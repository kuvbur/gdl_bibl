for i = 1 to 255	put inext iif bDoorWithSidelightSupport then	values "or_winOpLinePen" use(NSP)	if GLOB_MODPAR_NAME = "or_iWinOpLinePen" then		or_winOpLinePen = or_iOpLinePen		parameters or_winOpLinePen = or_winOpLinePen	else		or_iWinOpLinePen = or_winOpLinePen		parameters or_iWinOpLinePen = or_iWinOpLinePen	endif	if not(bOverride_MVO_win_3D & or_bWinOplines3d) & not(bOverride_MVO_win_2D) then		hideparameter "or_winOpLinePen", "or_iWinOpLinePen"		lock "or_winOpLinePen", "or_iWinOpLinePen"	endif	values "or_winOpLineType3dIn" stOpeningLineType[1], stOpeningLineType[2], stOpeningLineType[3]	values "or_iWinOpLineType3dIn" 0,1,2	if GLOB_MODPAR_NAME = "or_winOpLineType3dIn" then		or_iWinOpLineType3dIn = 0		if or_winOpLineType3dIn = stOpeningLineType[2] then or_iWinOpLineType3dIn = 1		if or_winOpLineType3dIn = stOpeningLineType[3] then or_iWinOpLineType3dIn = 2		parameters or_iWinOpLineType3dIn = or_iWinOpLineType3dIn	else		or_winOpLineType3dIn = stOpeningLineType[1]		if or_iWinOpLineType3dIn = 1 then or_winOpLineType3dIn = stOpeningLineType[2]		if or_iWinOpLineType3dIn = 2 then or_winOpLineType3dIn = stOpeningLineType[3]		parameters or_winOpLineType3dIn = or_winOpLineType3dIn	endif	values "or_winOpLineType3dOut" stOpeningLineType[1], stOpeningLineType[2], stOpeningLineType[3]	values "or_iWinOpLineType3dOut" 0,1,2	if GLOB_MODPAR_NAME = "or_winOpLineType3dOut" then		or_iWinOpLineType3dOut = 0		if or_winOpLineType3dOut = stOpeningLineType[2] then or_iWinOpLineType3dOut = 1		if or_winOpLineType3dOut = stOpeningLineType[3] then or_iWinOpLineType3dOut = 2		parameters or_iWinOpLineType3dOut = or_iWinOpLineType3dOut	else		or_winOpLineType3dOut = stOpeningLineType[1]		if or_iWinOpLineType3dOut = 1 then or_winOpLineType3dOut = stOpeningLineType[2]		if or_iWinOpLineType3dOut = 2 then or_winOpLineType3dOut = stOpeningLineType[3]		parameters or_winOpLineType3dOut = or_winOpLineType3dOut	endif	values "or_winOplineStyle" stOpeningLineStyle	values "or_iWinOplineStyle" 1, 2	if GLOB_MODPAR_NAME = "or_winOplineStyle" then		or_iWinOplineStyle = 1		if or_winOplineStyle = stOpeningLineStyle[2] then or_iWinOplineStyle = 2		parameters or_iWinOplineStyle = or_iWinOplineStyle	else		or_winOplineStyle = stOpeningLineStyle[1]		if or_iWinOplineStyle = 2 then or_winOplineStyle = stOpeningLineStyle[2]		parameters or_winOplineStyle = or_winOplineStyle	endif	if not(or_bWinOplines3d) then		lock	"or_winOpLineType3dIn",				"or_iWinOpLineType3dIn",				"or_winOpLineType3dOut",				"or_iWinOpLineType3dOut",				"or_winOplineStyle",				"or_iWinOplineStyle"		hideparameter	"or_winOpLineType3dIn",				"or_iWinOpLineType3dIn",				"or_winOpLineType3dOut",				"or_iWinOpLineType3dOut",				"or_winOplineStyle",				"or_iWinOplineStyle"	endif	if not(bOverride_MVO_win_3D) then		lock	"or_bWinOplines3d",				"or_winOpLineType3dIn",				"or_iWinOpLineType3dIn",				"or_winOpLineType3dOut",				"or_iWinOpLineType3dOut",				"or_winOplineStyle",				"or_iWinOplineStyle"		hideparameter	"or_bWinOplines3d",				"or_winOpLineType3dIn",				"or_iWinOpLineType3dIn",				"or_winOpLineType3dOut",				"or_iWinOpLineType3dOut",				"or_winOplineStyle",				"or_iWinOplineStyle"	endif	if	not(bOverride_MVO_win_2D) & \		(gs_sidelight_right | \		 gs_sidelight_left) then		lock	"or_winSwingLineType",				"or_winSwingType",				"or_iWinSwingType"		hideparameter	"or_winSwingLineType",						"or_winSwingType",						"or_iWinSwingType"	endif	if bDisable3DOverride then		lock	"bOverride_MVO_win_3D",				"or_bWinOplines3d",				"or_winOpLineType3dIn",				"or_iWinOpLineType3dIn",				"or_winOpLineType3dOut",				"or_iWinOpLineType3dOut",				"or_winOplineStyle",				"or_iWinOplineStyle"		hideparameter	"bOverride_MVO_win_3D",				"or_bWinOplines3d",				"or_winOpLineType3dIn",				"or_iWinOpLineType3dIn",				"or_winOpLineType3dOut",				"or_iWinOpLineType3dOut",				"or_winOplineStyle",				"or_iWinOplineStyle"	endif	if bDisable2DOverride then		lock	"bOverride_MVO_win_2D",				"or_winSwingLineType",				"or_winSwingType",				"or_iWinSwingType"		hideparameter	"bOverride_MVO_win_2D",						"or_winSwingLineType",						"or_winSwingType",						"or_iWinSwingType"	endif	if bDisable2DOverride & bDisable3DOverride then		hideparameter "or_winOpLinePen", "or_iWinOpLinePen"		lock "or_winOpLinePen", "or_iWinOpLinePen"	endif	if bHideOplineStyle then		hideparameter "or_winOplineStyle"	endif	if bLockOplineStyle then		lock "or_winOplineStyle", "or_iWinOplineStyle"	endifendifvalues "or_opLinePen" get(NSP)if GLOB_MODPAR_NAME = "or_iOpLinePen" then	or_opLinePen = or_iOpLinePen	parameters or_opLinePen = or_opLinePenelse	or_iOpLinePen = or_opLinePen	parameters or_iOpLinePen = or_iOpLinePenendifif	not((bOverride_MVO_2D & (not(bEnableSwingLineTurnOff) or (bEnableSwingLineTurnOff & or_bOplines2d ))) |\		(bOverride_MVO_3D & or_bOplines3d) |\		(((bOverride_MVO_2D | bOverride_MVO_3D) & gs_opline_2D) & ((iOpeningParamType = 9) | (iOpeningParamType = 11)))) then	hideparameter "or_opLinePen", "or_iOpLinePen"	lock "or_opLinePen", "or_iOpLinePen"endifif not(bSkylight) then	if iLineShapeCategory = LINE_SHAPE_CATEGORY_SWING then		dim iLineShapeSwingValueMask[]		dim sLineShapeSwingValueMask[]		j = 1		for i = 1 to vardim1(stLineShapeSwingType)			if bittest(iLineShapeSwingEnable, i - 1) then				iLineShapeSwingValueMask[j] = i - 1				sLineShapeSwingValueMask[j] = stLineShapeSwingType[i]				j = j + 1			else				if or_iSwingType = i - 1 then					or_iSwingType = 0					parameters or_iSwingType = 0				endif			endif		next i		if vardim1(iLineShapeSwingValueMask) > 0 then			values "or_SwingType" 	sLineShapeSwingValueMask			values "or_iSwingType"	iLineShapeSwingValueMask		endif		if GLOB_MODPAR_NAME = "or_SwingType" then			or_iSwingType = 0			for i = 2 to vardim1(stLineShapeSwingType)				if or_SwingType = stLineShapeSwingType[i] then					or_iSwingType = i - 1					i = vardim1(stLineShapeSwingType)				endif			next i			parameters or_iSwingType = or_iSwingType		else			or_iSwingType = min(max(0, or_iSwingType), (vardim1(stLineShapeSwingType) - 1))			or_SwingType = stLineShapeSwingType[or_iSwingType + 1]			parameters	or_SwingType	= or_SwingType,						or_iSwingType	= or_iSwingType		endif	else		dim iLineShapeSlidingValueMask[]		dim sLineShapeSlidingValueMask[]		j = 1		for i = 1 to vardim1(stLineShapeSlidingType)			if bittest(iLineShapeSlidingEnable, i - 1) then				iLineShapeSlidingValueMask[j] = i - 1				sLineShapeSlidingValueMask[j] = stLineShapeSlidingType[i]				j = j + 1			else				if or_iSlidingType = i - 1 then					or_iSlidingType = 0					parameters or_iSlidingType = 0				endif			endif		next i		if vardim1(iLineShapeSlidingValueMask) > 0 then			values "or_SlidingType" 	sLineShapeSlidingValueMask			values "or_iSlidingType"	iLineShapeSlidingValueMask		endif		if GLOB_MODPAR_NAME = "or_SlidingType" then			or_iSlidingType = 0			for i = 2 to vardim1(stLineShapeSlidingType)				if or_SlidingType = stLineShapeSlidingType[i] then					or_iSlidingType = i - 1					i = vardim1(stLineShapeSlidingType)				endif			next i			parameters or_iSlidingType = or_iSlidingType		else			or_iSlidingType = min(max(0, or_iSlidingType), (vardim1(stLineShapeSlidingType) - 1))			or_SlidingType = stLineShapeSlidingType[or_iSlidingType + 1]			parameters	or_SlidingType	= or_SlidingType,						or_iSlidingType	= or_iSlidingType		endif	endif	if	bDoorWithSidelightSupport  & \		(gs_sidelight_left | \		gs_sidelight_right) then		values "or_winSwingType" 	stLineShapeSwingType[2],									stLineShapeSwingType[3]		values "or_iWinSwingType"	LINE_SHAPE_SWING_CURVED,									LINE_SHAPE_SWING_STRAIGHT			if GLOB_MODPAR_NAME = "or_winSwingType" then			or_iWinSwingType = 0			for i = 2 to vardim1(stLineShapeSwingType)				if or_winSwingType = stLineShapeSwingType[i] then					or_iWinSwingType = i - 1					i = vardim1(stLineShapeSwingType)				endif			next i			parameters or_iWinSwingType = or_iWinSwingType		else			or_iWinSwingType = min(max(0, or_iWinSwingType), (vardim1(stLineShapeSwingType) - 1))			or_winSwingType = stLineShapeSwingType[or_iWinSwingType + 1]			parameters	or_winSwingType		= or_winSwingType,						or_iWinSwingType	= or_iWinSwingType		endif	endifendifif bEnableSwingLineTurnOff then	values "or_opLineType3dIn" stOpeningLineType	values "or_iOpLineType3dIn" 0,1,2,3else	values "or_opLineType3dIn" stOpeningLineType[1], stOpeningLineType[2], stOpeningLineType[3]	values "or_iOpLineType3dIn" 0,1,2endifif GLOB_MODPAR_NAME = "or_opLineType3dIn" then	or_iOpLineType3dIn = 0	if or_opLineType3dIn = stOpeningLineType[2] then or_iOpLineType3dIn = 1	if or_opLineType3dIn = stOpeningLineType[3] then or_iOpLineType3dIn = 2	if or_opLineType3dIn = stOpeningLineType[4] then or_iOpLineType3dIn = 3	parameters or_iOpLineType3dIn = or_iOpLineType3dInelse	or_opLineType3dIn = stOpeningLineType[1]	if or_iOpLineType3dIn = 1 then or_opLineType3dIn = stOpeningLineType[2]	if or_iOpLineType3dIn = 2 then or_opLineType3dIn = stOpeningLineType[3]	if or_iOpLineType3dIn = 3 then or_opLineType3dIn = stOpeningLineType[4]	parameters or_opLineType3dIn = or_opLineType3dInendifif bEnableSwingLineTurnOff then	values "or_opLineType3dOut" stOpeningLineType	values "or_iOpLineType3dOut" 0,1,2,3else	values "or_opLineType3dOut" stOpeningLineType[1], stOpeningLineType[2], stOpeningLineType[3]	values "or_iOpLineType3dOut" 0,1,2endifif GLOB_MODPAR_NAME = "or_opLineType3dOut" then	or_iOpLineType3dOut = 0	if or_opLineType3dOut = stOpeningLineType[2] then or_iOpLineType3dOut = 1	if or_opLineType3dOut = stOpeningLineType[3] then or_iOpLineType3dOut = 2	if or_opLineType3dOut = stOpeningLineType[4] then or_iOpLineType3dOut = 3	parameters or_iOpLineType3dOut = or_iOpLineType3dOutelse	or_opLineType3dOut = stOpeningLineType[1]	if or_iOpLineType3dOut = 1 then or_opLineType3dOut = stOpeningLineType[2]	if or_iOpLineType3dOut = 2 then or_opLineType3dOut = stOpeningLineType[3]	if or_iOpLineType3dOut = 3 then or_opLineType3dOut = stOpeningLineType[4]	parameters or_opLineType3dOut = or_opLineType3dOutendifif bEnableSecondaryOpLineTypes then	values "or_opLineType3dSecondary" stOpeningLineTypeSec	values "or_iOpLineType3dSecondary" 0, 1, 2, 3, 4	if GLOB_MODPAR_NAME = "or_opLineType3dSecondary" then		or_iOpLineType3dSecondary = 0		if or_opLineType3dSecondary = stOpeningLineTypeSec[2] then or_iOpLineType3dSecondary = 1		if or_opLineType3dSecondary = stOpeningLineTypeSec[3] then or_iOpLineType3dSecondary = 2		if or_opLineType3dSecondary = stOpeningLineTypeSec[4] then or_iOpLineType3dSecondary = 3		if or_opLineType3dSecondary = stOpeningLineTypeSec[5] then or_iOpLineType3dSecondary = 4		parameters or_iOpLineType3dSecondary = or_iOpLineType3dSecondary	else		or_opLineType3dSecondary = stOpeningLineType[1]		if or_iOpLineType3dSecondary = 1 then or_opLineType3dSecondary = stOpeningLineTypeSec[2]		if or_iOpLineType3dSecondary = 2 then or_opLineType3dSecondary = stOpeningLineTypeSec[3]		if or_iOpLineType3dSecondary = 3 then or_opLineType3dSecondary = stOpeningLineTypeSec[4]		if or_iOpLineType3dSecondary = 4 then or_opLineType3dSecondary = stOpeningLineTypeSec[5]		parameters or_opLineType3dSecondary = or_opLineType3dSecondary	endif	if gs_bSameLineTypeForLeaves then		hideparameter "or_swingLineType2", "or_iOpLineType3dSecondary", "or_opLineType3dSecondary"		lock "or_swingLineType2", "or_iOpLineType3dSecondary", "or_opLineType3dSecondary"	endifendifvalues "or_oplineStyle" stOpeningLineStylevalues "or_iOplineStyle" 1, 2if GLOB_MODPAR_NAME = "or_oplineStyle" then	or_iOplineStyle = 1	if or_oplineStyle = stOpeningLineStyle[2] then or_iOplineStyle = 2	parameters or_iOplineStyle = or_iOplineStyleelse	or_oplineStyle = stOpeningLineStyle[1]	if or_iOplineStyle = 2 then or_oplineStyle = stOpeningLineStyle[2]	parameters or_oplineStyle = or_oplineStyleendifif not(or_bOplines3d) then	lock	"or_opLineType3dIn",			"or_iOpLineType3dIn",			"or_opLineType3dOut",			"or_iOpLineType3dOut",			"or_oplineStyle",			"or_iOplineStyle"	hideparameter	"or_opLineType3dIn",			"or_iOpLineType3dIn",			"or_opLineType3dOut",			"or_iOpLineType3dOut",			"or_oplineStyle",			"or_iOplineStyle"	if bEnableSecondaryOpLineTypes then		lock "or_opLineType3dSecondary", "or_iOpLineType3dSecondary"		hideparameter "or_opLineType3dSecondary"	endifendifif not(bOverride_MVO_3D) then	lock	"or_bOplines3d",			"or_opLineType3dIn",			"or_iOpLineType3dIn",			"or_opLineType3dOut",			"or_iOpLineType3dOut",			"or_oplineStyle",			"or_iOplineStyle"	hideparameter	"or_bOplines3d",			"or_opLineType3dIn",			"or_iOpLineType3dIn",			"or_opLineType3dOut",			"or_iOpLineType3dOut",			"or_oplineStyle",			"or_iOplineStyle"	if bEnableSecondaryOpLineTypes then		lock "or_opLineType3dSecondary", "or_iOpLineType3dSecondary"		hideparameter "or_opLineType3dSecondary"	endifendifif not(bOverride_MVO_2D) then	lock			"or_swingLineType"	hideparameter	"or_swingLineType"	if not(bSkylight) then		lock	"or_SwingType",				"or_iSwingType",				"or_SlidingType",				"or_iSlidingType"		hideparameter	"or_SwingType",						"or_iSwingType",						"or_SlidingType",						"or_iSlidingType"	endif	if bEnableSecondaryOpLineTypes then		hideparameter "or_swingLineType2"		lock "or_swingLineType2"	endif	if bEnableSwingLineTurnOff then		hideparameter "or_bOplines2d"		lock "or_bOplines2d"	endifendifif bEnableSwingLineTurnOff & bOverride_MVO_2D & not(or_bOplines2d) then	lock	"or_swingLineType",			"or_SwingType",			"or_iSwingType",			"or_SlidingType",			"or_iSlidingType"	hideparameter	"or_swingLineType",					"or_SwingType",					"or_iSwingType",					"or_SlidingType",					"or_iSlidingType"	if bEnableSecondaryOpLineTypes then		lock	"or_swingLineType2"		hideparameter	"or_swingLineType2"	endifendifif bDisable2DOverride then	hideparameter	"bOverride_MVO_2D",					"or_SwingType",					"or_iSwingType",					"or_swingLineType",					"or_SlidingType",					"or_iSlidingType"	lock	"bOverride_MVO_2D",			"or_SwingType",			"or_iSwingType",			"or_swingLineType",			"or_SlidingType",			"or_iSlidingType"	if bEnableSwingLineTurnOff then		hideparameter "or_bOplines2d"		lock "or_bOplines2d"	endif	if bEnableSecondaryOpLineTypes then		hideparameter "or_swingLineType2"		lock "or_swingLineType2"	endifendifif bDisable3DOverride then	lock	"bOverride_MVO_3D",			"or_bOplines3d",			"or_opLineType3dIn",			"or_iOpLineType3dIn",			"or_opLineType3dOut",			"or_iOpLineType3dOut",			"or_oplineStyle",			"or_iOplineStyle"	hideparameter	"bOverride_MVO_3D",			"or_bOplines3d",			"or_opLineType3dIn",			"or_iOpLineType3dIn",			"or_opLineType3dOut",			"or_iOpLineType3dOut",			"or_oplineStyle",			"or_iOplineStyle"	if bEnableSecondaryOpLineTypes then		lock "or_opLineType3dSecondary", "or_iOpLineType3dSecondary"		hideparameter "or_opLineType3dSecondary"	endifendifif not(bSkylight) then	if bDisableSwingType then		lock	"or_SwingType",				"or_iSwingType",				"or_SlidingType",				"or_iSlidingType"		hideparameter	"or_SwingType",						"or_iSwingType",						"or_SlidingType",						"or_iSlidingType"	else		if iLineShapeCategory = LINE_SHAPE_CATEGORY_SWING then			lock	"or_SlidingType",					"or_iSlidingType"			hideparameter	"or_SlidingType",							"or_iSlidingType"		else			lock	"or_SwingType",					"or_iSwingType"			hideparameter	"or_SwingType",							"or_iSwingType"		endif	endifendifif bDisableSwingLineType then	lock "or_swingLineType"	hideparameter "or_swingLineType"	if bEnableSecondaryOpLineTypes then		hideparameter "or_swingLineType2"		lock "or_swingLineType2"	endifendifif bDisable2DOverride & bDisable3DOverride then	hideparameter "or_opLinePen", "or_iOpLinePen"	lock "or_opLinePen", "or_iOpLinePen"endifif iOpeningParamType = 12 then	! D1 Garage 3 USA with passdoor	if not(gs_passdoor) then		lock "or_swingLineType", "or_SwingType", "or_iSwingType"		hideparameter "or_swingLineType", "or_SwingType", "or_iSwingType"	endifendifif bHideOplineStyle then	hideparameter "or_oplineStyle"endifif bLockOplineStyle then	lock "or_oplineStyle", "or_iOplineStyle"endifif not(bSkylight) then	if iLineShapeCategory = LINE_SHAPE_CATEGORY_SWING then		if or_iSwingType = LINE_SHAPE_SWING_NONE then			lock "or_swingLineType"			hideparameter "or_swingLineType"			if not(bOverride_MVO_3D) & not(gs_opline_2D & ((iOpeningParamType = 9) | (iOpeningParamType = 11))) then				lock	"or_opLinePen",						"or_iOpLinePen"				hideparameter	"or_opLinePen",								"or_iOpLinePen"			endif		endif	else		if or_iSlidingType = LINE_SHAPE_SLIDING_NONE then			lock "or_swingLineType"			hideparameter "or_swingLineType"			if not(bOverride_MVO_3D) then				lock	"or_opLinePen",						"or_iOpLinePen"				hideparameter	"or_opLinePen",								"or_iOpLinePen"			endif		endif	endifendif