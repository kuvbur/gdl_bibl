EPS = 0.0001REVEAL_EDGE				= 0REVEAL_NO				= 1REVEAL_POSITIVE			= 2REVEAL_NEGATIVE			= 3REVEAL_SLANTED			= 4REVEAL_SPLAYED			= 5REVEAL_HISTORIC			= 6REVEAL_DOUBLE			= 7REVEAL_DOUBLE_SPLAYED	= 8REVEAL_OUTSIDE_SPLAYED	= 9! Threshold definitions:TRESHOLD_OFF			= 1TRESHOLD_NORMAL			= 2TRESHOLD_EXTENDED		= 3TRESHOLD_BOTHEXTENDED	= 4TRESHOLD_BENEATHPANEL	= 5TRESHOLD_PROFILED		= 6TRESHOLD_FLAT			= 7		! NOR Flat TerskelTRESHOLD_ANSLAG			= 8		! NOR AnslagterskelTRESHOLD_GUMMI			= 9		! NOR Gummiterskel m SlepelistTRESHOLD_HEVE			= 10	! NOR HeveterskelTRESHOLD_HC				= 11	! NOR H-C TerskelTRESHOLD_BRANN			= 12	! NOR BrannterskelTRESHOLD_BADEROMS		= 13	! NOR BaderomsterskelTRESHOLD_AKKUSTIKK		= 14	! NOR AkkustikkterskelTRESHOLD_SIMPLE			= 15	! NED Simple thresholdTRESHOLD_SLOPINGEXT		= 16	! Sloping ExtendedTRESHOLD_METAL			= 17	! MetalTRESHOLD_EXTENDED_SWE	= 18	! SWE Extended to Opening SideTRESHOLD_NOTAVAILABLE = -1		! Not Available! iFrameStyleFRAME_STYLE_BLOCK				= 1FRAME_STYLE_DOUBLE_REBATE		= 2FRAME_STYLE_SIMPLE_REBATE		= 3FRAME_STYLE_METAL				= 4FRAME_STYLE_DOUBLE_EGRESS_METAL = 5FRAME_STYLE_EXTRUSION			= 6FRAME_STYLE_WRAPPED_EXTRUSION	= 7 ! Partial Stucture Display defines:STRUCTURE_ENTIRE_STRUCTURE	= 0STRUCTURE_CORE_ONLY			= 1STRUCTURE_WITHOUT_FINISHES	= 2! iWindowShape:SHAPE_RECTANGULAR			= 0SHAPE_ARCHED				= 1SHAPE_ROUND					= 2SHAPE_EYEBROWS				= 3SHAPE_HALFCIRCLE			= 4 	! straight side is horizontalSHAPE_MULTISIDE				= 5SHAPE_OCTAGONAL				= 6SHAPE_HALFARCH				= 7SHAPE_PENTAGON				= 8SHAPE_QUARTERROUND			= 9SHAPE_HALFROUND				= 10 	! straight side is verticalSHAPE_TRAPEZOID				= 11SHAPE_TRIANGLE				= 12SHAPE_GOTHICARCH			= 13SHAPE_ELLIPSEARCH			= 14SHAPE_ROMBUS				= 15SHAPE_HORSESHOE				= 16SHAPE_OGEECENTERED			= 17SHAPE_SARACENIC				= 18SHAPE_T						= 19SHAPE_HALF_T_LEFT			= 20SHAPE_ARCHED_T				= 21SHAPE_ARCHED_HALF_T_LEFT	= 22SHAPE_PARALLELOGRAM			= 23SHAPE_ELLIPSE				= 24SHAPE_CORNER_TRIANGLE		= 25SHAPE_QUARTERROUND_NOFRAME	= 26SHAPE_HALF_T_RIGHT			= 27SHAPE_ARCHED_HALF_T_RIGHT	= 28bTShapedOpening =  (iWindowShape = SHAPE_T |\					iWindowShape = SHAPE_HALF_T_LEFT |\					iWindowShape = SHAPE_HALF_T_RIGHT |\					iWindowShape = SHAPE_ARCHED_T |\					iWindowShape = SHAPE_ARCHED_HALF_T_LEFT |\					iWindowShape = SHAPE_ARCHED_HALF_T_RIGHT)! ==============================================================================! Reveal Points Indexes! ==============================================================================idxSillStartRevealLeft		= iRevealPointsIdx[1]idxSillEndRevealLeft		= iRevealPointsIdx[2]idxSillStartPlasterLeft		= iRevealPointsIdx[7]idxSillEndPlasterLeft		= iRevealPointsIdx[8]idxSillStartRevealRight		= iRevealPointsIdx[11]idxSillEndRevealRight		= iRevealPointsIdx[12]idxSillStartPlasterRight	= iRevealPointsIdx[17]idxSillEndPlasterRight		= iRevealPointsIdx[18]idxFrameStartRevealLeft		= iRevealPointsIdx[3]idxFrameEndRevealLeft		= iRevealPointsIdx[4]idxFrameStartRevealRight	= iRevealPointsIdx[13]idxFrameEndRevealRight		= iRevealPointsIdx[14]idxBoardStartRevealLeft		= iRevealPointsIdx[5]idxBoardEndRevealLeft		= iRevealPointsIdx[6]idxBoardStartPlasterLeft	= iRevealPointsIdx[9]idxBoardEndPlasterLeft		= iRevealPointsIdx[10]idxBoardStartRevealRight	= iRevealPointsIdx[15]idxBoardEndRevealRight		= iRevealPointsIdx[16]idxBoardStartPlasterRight	= iRevealPointsIdx[19]idxBoardEndPlasterRight		= iRevealPointsIdx[20]! ==============================================================================curvedWall		= abs(WIDO_ORIG_DIST) > EPSwallIsLeft		= (SYMB_ROTANGLE > EPS) exor WIDO_REVEAL_SIDEsignWallIsLeft	= wallIsleft - not(wallIsleft)! ==============================================================================if gs_frame_width > EPS then	if gs_frame_width_left < EPS then		gs_frame_width_left = gs_frame_width	endif	if gs_frame_width_right < EPS then		gs_frame_width_right = gs_frame_width	endifendif! ==============================================================================if GLOB_SCRIPT_TYPE = 2 | GLOB_SCRIPT_TYPE = 3 then	if GLOB_STRUCTURE_DISPLAY = STRUCTURE_CORE_ONLY &  \	  (GLOB_CONTEXT = 2 | GLOB_CONTEXT = 22 | \		! Floor plan	   GLOB_CONTEXT = 3 | GLOB_CONTEXT = 23 | \		! 3D	   GLOB_CONTEXT = 4 | GLOB_CONTEXT = 24 | \		! Section	   (GLOB_PREVIEW_MODE = 2) | \	! IS but not surface	   GLOB_CONTEXT = 8 | GLOB_CONTEXT = 28) then	! Layout		bThreshold = 0	endifendifbDrawOutsideTrim = (gs_trim_outside)bDrawInsideTrim  = (gs_trim_inside)if (SYMB_MIRRORED & abs(SYMB_ROTANGLE) < EPS) | (not(SYMB_MIRRORED) & abs(SYMB_ROTANGLE - 180) < EPS) then	widoRightJamb	= WIDO_LEFT_JAMB	widoLeftJamb	= WIDO_RIGHT_JAMBelse	widoRightJamb	= WIDO_RIGHT_JAMB	widoLeftJamb	= WIDO_LEFT_JAMBendif! ==============================================================================! Restrictions for Window Shapes! ==============================================================================widoHeadDepth = WIDO_HEAD_DEPTHif iWindowShape = 1 then	! --- Arched Window Shape ---	widoLeftJamb	= widoRightJamb	widoHeadDepth	= widoRightJambendif! ==============================================================================! Calculations for Inclined Walls! ==============================================================================if abs(WALL_INCL) > EPS then	bInclinedWall = 1	bFactor = SYMB_MIRRORED exor WIDO_REVEAL_SIDE exor wallIsLeft	incFactor = not(bFactor) - bFactor	incX = incFactor * tan(WALL_INCL)	incY = incFactor * (1 / cos(WALL_INCL))	bDir = SYMB_MIRRORED exor (SYMB_ROTANGLE > EPS)	iDir = not(bDir) - bDir	incH = cos(WALL_INCL)	incV = sin(WALL_INCL) * iDirelse	bInclinedWall = 0	incX = 0	incY = 1	incH = 0	incV = 0endif! ==============================================================================! Calculations for Stack Door! ==============================================================================if gs_stack_left then	overSizeLeft		= gs_left_oversize	overSizeLeftOut		= gs_left_oversize	widoLeftJamb		= 0else	overSizeLeft		= 0	overSizeLeftOut		= -widoLeftJambendifif gs_stack_right then	overSizeRight		= gs_right_oversize	overSizeRightOut	= gs_right_oversize	widoRightJamb		= 0else	overSizeRight		= 0	overSizeRightOut	= -widoRightJambendif! ==============================================================================! Bounding Box of Polygon wall! ==============================================================================if AC_WallType = 2 then	boundMinX =  1000	boundMaxX = -1000	boundMinY =  1000	boundMaxY = -1000	for i = 1 to vardim1(AC_WallContourPolygon)		if boundMaxX < AC_WallContourPolygon[i][1] then boundMaxX = AC_WallContourPolygon[i][1]		if boundMinX > AC_WallContourPolygon[i][1] then boundMinX = AC_WallContourPolygon[i][1]		if boundMaxY < AC_WallContourPolygon[i][2] then boundMaxY = AC_WallContourPolygon[i][2]		if boundMinY > AC_WallContourPolygon[i][2] then boundMinY = AC_WallContourPolygon[i][2]	next iendif! ==============================================================================! Calculations for Slanted Reveal! ==============================================================================if iRevealType = REVEAL_SLANTED then	cond = ((WALL_INCL > 0) <> SYMB_MIRRORED) exor WIDO_REVEAL_SIDE exor wallIsLeft	if SYMB_MIRRORED = WIDO_REVEAL_SIDE then		temp = gs_reveal_right_angle		gs_reveal_right_angle = gs_reveal_left_angle		gs_reveal_left_angle = temp	endif	if not(curvedWall) then		px1 = -(leftWidth + rightWidth)/2 - not(gs_stack_left) * overSizeLeft		px2 =  (leftWidth + rightWidth)/2 + not(gs_stack_right) * overSizeRight		bPwInset = (abs(gs_parapet_inset_thk * gs_parapet_wall_inset) > EPS)		if abs(WALL_INCL) > EPS then			localWthk = WALL_THICKNESS - WIDO_SILL + incX * (px1)			localInsetThk = localWthk - gs_parapet_inset_thk * gs_parapet_wall_inset / cos(WALL_INCL)			if cond then				tanAlfaBeta = tan(-abs(WALL_INCL)) * tan(gs_reveal_right_angle)				dya = -localWthk * tanAlfaBeta / (tanAlfaBeta - 1)				dxa = dya / tan(-abs(WALL_INCL))				if bPwInset then					dya2 = -localInsetThk * tanAlfaBeta / (tanAlfaBeta - 1)					dxa2 = dya2 / tan(-abs(WALL_INCL))				endif			else				tanAlfaBeta = tan(abs(WALL_INCL)) * tan(gs_reveal_right_angle)				dya = -localWthk * tanAlfaBeta / (tanAlfaBeta - 1)				dxa = dya / tan(abs(WALL_INCL))				if bPwInset then					dya2 = -localInsetThk * tanAlfaBeta / (tanAlfaBeta - 1)					dxa2 = dya2 / tan(abs(WALL_INCL))				endif			endif			py3 = localWthk + dya			localWthk = WALL_THICKNESS - WIDO_SILL + incX * (px2)			localInsetThk = localWthk - gs_parapet_inset_thk * gs_parapet_wall_inset / cos(WALL_INCL)			if cond then				tanAlfaBeta = tan(abs(WALL_INCL)) * tan(gs_reveal_left_angle)				dyb = -localWthk * tanAlfaBeta / (tanAlfaBeta - 1)				dxb = dyb / tan(abs(WALL_INCL))				if bPwInset then					dyb2 = -localInsetThk * tanAlfaBeta / (tanAlfaBeta - 1)					dxb2 = dyb2 / tan(abs(WALL_INCL))				endif			else				tanAlfaBeta = tan(-abs(WALL_INCL)) * tan(gs_reveal_left_angle)				dyb = -localWthk * tanAlfaBeta / (tanAlfaBeta - 1)				dxb = dyb / tan(-abs(WALL_INCL))				if bPwInset then					dyb2 = -localInsetThk * tanAlfaBeta / (tanAlfaBeta - 1)					dxb2 = dyb2 / tan(-abs(WALL_INCL))				endif			endif			py4 = localWthk + dyb		else			if AC_WallType = 2 then				if WIDO_REVEAL_SIDE then					wThk = boundMaxY + 1	! For the safety				else					wThk = -boundMinY + 1	! For the safety				endif			else				wThk = WALL_THICKNESS - WIDO_SILL			endif			dxa = wThk * tan(gs_reveal_right_angle)			dya = 0			dxb = wThk * tan(gs_reveal_left_angle)			dyb = 0			py3 = wThk			py4 = wThk		endif	endifendif! ==============================================================================! Turned plaster skin thickness! ==============================================================================bOutsideAtRefLine = (wallIsLeft exor AC_Wall_Direction_Type <> 1)if bOutsideAtRefLine then	thkSkinAtSillLeft	= thkSkinTurnInLeft	thkSkinAtSillRight	= thkSkinTurnInRight	penSkinAtSill		= penSkinContourIn	ltSkinAtSill		= ltSkinContourIn	thkSkinAtBoardLeft	= thkSkinTurnOutLeft	thkSkinAtBoardRight	= thkSkinTurnOutRight	penSkinAtBoard		= penSkinContourOut	ltSkinAtBoard		= ltSkinContourOutelse	thkSkinAtSillLeft	= thkSkinTurnOutLeft	thkSkinAtSillRight	= thkSkinTurnOutRight	penSkinAtSill		= penSkinContourOut	ltSkinAtSill		= ltSkinContourOut	thkSkinAtBoardLeft	= thkSkinTurnInLeft	thkSkinAtBoardRight	= thkSkinTurnInRight	penSkinAtBoard		= penSkinContourIn	ltSkinAtBoard		= ltSkinContourInendif! ==============================================================================! Calculations for Curved Walls! ==============================================================================if curvedWall & abs(radSill) > EPS & abs(radBoard) > EPS then	if GLOB_SCRIPT_TYPE <> 2 then		widoOrigDist = -WIDO_ORIG_DIST	else		widoOrigDist = WIDO_ORIG_DIST	endif	tempWOD = abs(widoOrigDist) - (SYMB_ROTANGLE > EPS) * WIDO_FRAME_THICKNESS	alfaLeft	= atn((leftWidth  + overSizeLeft)  / tempWOD)	alfaRight	= atn((rightWidth + overSizeRight) / tempWOD)!	if WIDO_REVEAL_SIDE then!		WOD = widoOrigDist + WIDO_FRAME_THICKNESS!	else!		WOD = -widoOrigDist!	endif	ArcLengthSillToAngle	= 180 / radSill / PI	ArcLengthBoardToAngle	= 180 / radBoard / PI	alfaLeftJamb	= widoLeftJamb  * ArcLengthSillToAngle	alfaRightJamb	= widoRightJamb * ArcLengthSillToAngle	iCurveSign = wallIsLeft - not(wallIsLeft)endif	! curvedWall! ==============================================================================! Calculations for NOR Thresholds! ==============================================================================nor_mody_left      = 0nor_mody_right     = 0nor_mody_left_out  = 0nor_mody_right_out = 0if iThresholdType > 6 then	if leftRevealPnts[idxFrameEndRevealLeft][2] - gs_treshold_width > EPS then		nor_mody_left  = leftRevealPnts[idxFrameEndRevealLeft][2] - gs_treshold_width		nor_mody_right = rightRevealPnts[idxFrameEndRevealRight][2] - gs_treshold_width	endif	if gs_frame_thkin - gs_treshold_width > EPS then		nor_mody_left_out  = gs_frame_wthk * (gs_frame_thkin - gs_treshold_width)		nor_mody_right_out = gs_frame_wthk * (gs_frame_thkin - gs_treshold_width)	endifendifbNor	=  (iThresholdType = TRESHOLD_FLAT		| \			iThresholdType = TRESHOLD_ANSLAG	| \			iThresholdType = TRESHOLD_GUMMI		| \			!iThresholdType = TRESHOLD_HEVE		| \			!iThresholdType = TRESHOLD_HC		| \			iThresholdType = TRESHOLD_BRANN		| \			iThresholdType = TRESHOLD_BADEROMS	| \			iThresholdType = TRESHOLD_AKKUSTIKK )nor_nosing_left		= 0nor_nosing_right	= 0nor_threshold_extension	= (gs_treshold_width - gs_fthk)if bNor then		! NOR threshold types	if WIDO_REVEAL_SIDE then		nor_nosing_left		= gs_treshold_width + leftRevealPnts[idxSillStartPlasterLeft][2] - leftRevealPnts[idxFrameEndRevealLeft][2]		nor_nosing_right	= gs_treshold_width + rightRevealPnts[idxSillStartPlasterRight][2] - rightRevealPnts[idxFrameEndRevealRight][2]	else		nor_nosing_left		= gs_treshold_width - leftRevealPnts[idxBoardEndPlasterLeft][2]		nor_nosing_right	= gs_treshold_width - rightRevealPnts[idxBoardEndPlasterRight][2]	endifendifnor_threshold_offset = 0.008