_matPanel = outsideSurfacebSucceed = request{2} ("Building_Material_info", panelBMat, "gs_bmat_surface", _matPanel)tGLOB_STRUCTURE_DISPLAY = force_structure_displayif force_structure_display=-1 then tGLOB_STRUCTURE_DISPLAY = GLOB_STRUCTURE_DISPLAYisPlan = (GLOB_VIEW_TYPE=2)is3D = (GLOB_VIEW_TYPE=3)isPrew = (GLOB_PREVIEW_MODE<>0)isEdit = GLOB_FEEDBACK_MODEmax_y = 0 : min_y = 0max_x = 0 : min_x = 0for i = 1 to vardim1(AC_FrameAxisCoords)	max_x = max(max_x, AC_FrameAxisCoords[i][1])	min_x = min(min_x, AC_FrameAxisCoords[i][1])	max_y = max(max_y, AC_FrameAxisCoords[i][2])	min_y = min(min_y, AC_FrameAxisCoords[i][2])next iif GLOB_VIEW_TYPE = 8 or GLOB_VIEW_TYPE = 9 then 	rotx -90	for i = 1 to vardim1(AC_FrameAxisCoords)		put AC_FrameAxisCoords[i][1], AC_FrameAxisCoords[i][2], 0, 15	next i	material outsideSurface	plane_ nsp/4, get (nsp)	endendifif bOverrideEdgeSurf then	_edgeSurface		= edgeSurfaceelse	_edgeSurface		= _matPanelendif_surface = _edgeSurfacepen gs_cont_penmyProfileIdx = 0 : use_profile = 0if GLOB_MVO_CWPANEL_DETLEVEL = DETLEVEL3D_DETAILED then	myProfileIdx = myProfileIdx_det	use_profile = use_profile_detendifif GLOB_MVO_CWPANEL_DETLEVEL = DETLEVEL3D_SIMPLE then	myProfileIdx = myProfileIdx_simp	use_profile = use_profile_simpendifif GLOB_MVO_CWPANEL_DETLEVEL = DETLEVEL3D_SIMPLE and use_profile_det and not(use_profile_simp) then myProfileIdx = myProfileIdx_detif GLOB_MVO_CWPANEL_DETLEVEL = DETLEVEL3D_SCHEMATIC then	for i = 1 to vardim1(AC_FrameAxisCoords)		put AC_FrameAxisCoords[i][1], AC_FrameAxisCoords[i][2], 0, 15	next i	material outsideSurface	plane_ nsp/4, get (nsp)	endendifsect_attrs{2} penCut, lineTypeCutbuilding_material panelBMatif myProfileIdx>EPS then	nComponents = 0	dim _componentTypes[]	n = REQUEST ("Profile_components", myProfileIdx, _nComponents, _componentTypes)	n = REQUEST ("Profile_default_boundingbox", myProfileIdx, xmin, ymin, xmax, ymax)	if n then		dim _bShowPart[]		_needRequestDetails = 0		for _i = 1 to _nComponents			_bShowPart[_i] = 1    			  if tGLOB_STRUCTURE_DISPLAY = 1 AND _componentTypes[_i] <> COMPTYPE_CORE then _bShowPart[_i] = 0			  if tGLOB_STRUCTURE_DISPLAY = 2 AND _componentTypes[_i] = COMPTYPE_FINISH then _bShowPart[_i] = 0			  if _bShowPart[_i] then _needRequestDetails = 1		next _i		if _needRequestDetails then			dim _profileGeometryRawData[]			n = REQUEST ("Profile_default_geometry", myProfileIdx, _profileGeometryRawData)	 			dim _idxStartPoints[]			dim _idxEndPoints[]			_idxStartPoints[1] = _nComponents + 1			_numPropertybyNodes = 5			for _i = 2 to _nComponents				_numCompNodes = _profileGeometryRawData[_i - 1]				_idxStartPoints[_i] = _idxStartPoints[_i - 1] + _numCompNodes * _numPropertybyNodes				_idxEndPoints[_i-1] = _idxStartPoints[_i] - 1			next _i			_idxEndPoints[_nComponents] = vardim1(_profileGeometryRawData)		endif	endif	th = -ymax+yminelse	th = ac_thickness	ymin = ac_thicknessendifif bOverridepen<>"Ручная настройка" then	bSucceed = request{2} ("Building_Material_info", panelBMat, "gs_bmat_cutfill_properties", gs_fill_type, gs_fill_pen, gs_back_pen)endifGROUP "base"	if nCorners < 3 then end	for i = 1 to nCorners		put AC_PanelCoords[i][1], AC_PanelCoords [i][2], 15	next i	addz -ymin	cprism_  insideSurface, outsideSurface, _edgeSurface,		nCorners, th,		get (nsp)	ENDGROUPGROUP "plane"	material _edgeSurface	addz -ymin	for i = 1 to nCorners-1		put AC_PanelCoords[i][1], AC_PanelCoords [i][2],0, 15		put AC_PanelCoords[i][1], AC_PanelCoords [i][2],th, 15		if i=nCorners-1 then			i2 = 1		else			i2 = i+1		endif		put AC_PanelCoords[i2][1], AC_PanelCoords [i2][2],th, 15		put AC_PanelCoords[i2][1], AC_PanelCoords [i2][2],0, 15		plane_ nsp/4, get (nsp)	next iENDGROUPif not(use_profile) or myProfileIdx<EPS then	PLACEGROUP "plane"	PLACEGROUP "base"	KILLGROUP "plane"	KILLGROUP "base"	endendifif use_profile and myProfileIdx>EPS then	GROUP "profile"		height_t=max(max_x-min_x, max_y-min_y)		rotx -90		if is_gor then roty -90		if is_zerk then 			addx (xmax+xmin)/2			mulx -1			addx -(xmax+xmin)/2		endif		if isPlan and inx_component>EPS then			_iComp = inx_component			gosub "show_comp"		else			for _iComp = 1 to _nComponents				gosub "show_comp"			next _iComp		endif	ENDGROUP	DEL TOP	result=ISECTGROUP{2}("profile", "base", _edgeSurface, _edgeSurface, _edgeSurface, 0+2)	PLACEGROUP resultvert 0, 0, 0vert 1, 0, 0vert 0, 1, 0vert 0, 0, 1coor 2, -1, -2, -3, -4body 1!	if not(isPlan) then !		result_lines=ISECTGROUP("plane", "profile")!		PLACEGROUP result_lines!		KILLGROUP result_lines!	endif	KILLGROUP result	KILLGROUP "profile"	KILLGROUP "plane"	KILLGROUP "base"endif! ==============================================================================end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end! =============================================================================="show_comp":	if _bShowPart[_iComp] then		dim _currSurfaces[]		n = REQUEST{4} ("Profile_component_info", myProfileIdx, _iComp, "gs_profile_comp_surfaces", _currSurfaces)		_bmat = 1		_surface = 1		if bOverridebmat = "Сложный профиль" then			n = REQUEST{4} ("Profile_component_info", myProfileIdx, _iComp, "gs_profile_bmat", _bmat)		else			_bmat = panelBMat		endif		if bOverridepen = "Сложный профиль" then			n = REQUEST{4} ("Profile_component_info", myProfileIdx, _iComp, "gs_profile_outlinepen", tgs_cont_pen)			if tgs_cont_pen>0 and tgs_cont_pen<255 then gs_cont_pen = tgs_cont_pen		endif		if bOverridepen="Ручная настройка" then			SECT_ATTRS gs_fill_type, gs_back_pen, gs_fill_pen, penCut, lineTypeCut		else			building_material _bmat			sect_attrs{2} penCut, lineTypeCut		endif		pen gs_cont_pen		if bOverridebpokr = "Сложный профиль" then			n = REQUEST{4} ("Profile_component_info", myProfileIdx, _iComp, "gs_profile_surface", _surface)		endif		if _surface=insideSurface_prof then _surface=insideSurface		if _surface=outsideSurface_prof then _surface=outsideSurface		_surfIdx = 1		for _i = _idxStartPoints[_iComp] to _idxEndPoints[_iComp] step 5			if _currSurfaces[_surfIdx]=insideSurface_prof then _currSurfaces[_surfIdx]=insideSurface			if _currSurfaces[_surfIdx]=outsideSurface_prof then _currSurfaces[_surfIdx]=outsideSurface			gosub "set_status_code"	 ! input _profileGeometryRawData, returns prismStatus			put 	_profileGeometryRawData[_i], _profileGeometryRawData[_i + 1], 0, prismStatus, _currSurfaces[_surfIdx]			_surfIdx = _surfIdx + 1		next _i		_mask = 8		add 0, 0, -height_t		if is_array then			h = max(ymax - ymin,xmax - xmin)			for x=0 to height_t step h				addx -x*is_gor+x*not(is_gor)				cprism_{3} _edgeSurface, _edgeSurface, _surface, _mask, NSP/5, height_t*2, use(NSP)				del 1			next x			if nsp>0 then tt = max(get(nsp))		else			cprism_{3} _edgeSurface, _edgeSurface, _surface, _mask, NSP/5, height_t*2, get(NSP)		endif		del 1	endifreturn! ------------------------------------------------------------------------------! Set status code for each point! ------------------------------------------------------------------------------"set_status_code":	edgeVisible 		= _profileGeometryRawData[_i + 2]	verticalEdgeVisible 	= _profileGeometryRawData[_i + 3]	additionalStatus 	= _profileGeometryRawData[_i + 4]	prismStatus 	= additionalStatus	if additionalStatus >= 0 then        ! not contour end		if edgeVisible then 			prismStatus = prismStatus + 15		else			prismStatus = prismStatus + 8		endif		if verticalEdgeVisible = 0 then prismStatus = prismStatus + 64	endifreturn