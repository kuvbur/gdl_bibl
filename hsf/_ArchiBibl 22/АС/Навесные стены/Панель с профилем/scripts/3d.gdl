panel_mat = 0success = LIBRARYGLOBAL ("Libraryflobals-panel", "panel_mat", panel_mat)if panel_mat=1 then	dim name_panel[]	success = LIBRARYGLOBAL ("Libraryflobals-panel", "name_panel", name_panel)	dim mat_panel[]	success = LIBRARYGLOBAL ("Libraryflobals-panel", "mat_panel", mat_panel)	flag_find = 0	for i=1 to vardim1(name_panel)		if name_panel[i] = GLOB_ID then			flag_find = i			i = vardim1(name_panel)		endif	next i	if flag_find > EPS then		outsideSurface = mat_panel[flag_find]		insideSurface = mat_panel[flag_find]		edgeSurface = mat_panel[flag_find]		bOverrideOutSurf = 1		bOverrideInSurf = 1		bOverrideEdgeSurf = 1	endifendifsuccess = 0success = LIBRARYGLOBAL ("Libraryflobals-as", "gs_detlevel_3D_m", gs_detlevel_3D_m)IF success and gs_detlevel_3D_m = 1 THEN SHADOW OFFdt = -1 : if GLOB_PREVIEW_MODE=2 then dt = 1_matPanel = outsideSurfacebSucceed = request{2} ("Building_Material_info", panelBMat, "gs_bmat_surface", _matPanel)tGLOB_STRUCTURE_DISPLAY = force_structure_displayif force_structure_display=-1 then tGLOB_STRUCTURE_DISPLAY = GLOB_STRUCTURE_DISPLAYisPlan = (GLOB_VIEW_TYPE=2)globMVO = GLOB_MVO_CWPANEL_DETLEVELif GLOB_FEEDBACK_MODE then	myProfileIdx = 0	use_profile = 0	globMVO = DETLEVEL3D_SCHEMATICendifif bOverrideEdgeSurf then	_edgeSurface		= edgeSurfaceelse	_edgeSurface		= _matPanelendif_surface = _edgeSurfacepen gs_cont_penmyProfileIdx = 0 : use_profile = 0if globMVO = DETLEVEL3D_DETAILED then	use_profile = use_profile_det	if use_profile then myProfileIdx = myProfileIdx_detendifif globMVO = DETLEVEL3D_SIMPLE then	if use_profile_det and not(use_profile_simp) then		myProfileIdx = myProfileIdx_det		use_profile = use_profile_simp	endif	if use_profile_simp then		myProfileIdx = myProfileIdx_simp		use_profile = use_profile_simp	endifendifif myProfileIdx>EPS then	nComponents = 0	dim _componentTypes[]	n = REQUEST ("Profile_components", myProfileIdx, _nComponents, _componentTypes)	n = REQUEST ("Profile_default_boundingbox", myProfileIdx, xmin, ymin, xmax, ymax)	if n then		dim _bShowPart[]		_needRequestDetails = 0		for _i = 1 to _nComponents			_bShowPart[_i] = 1    			  if tGLOB_STRUCTURE_DISPLAY = 1 AND _componentTypes[_i] <> COMPTYPE_CORE then _bShowPart[_i] = 0			  if tGLOB_STRUCTURE_DISPLAY = 2 AND _componentTypes[_i] = COMPTYPE_FINISH then _bShowPart[_i] = 0			  if _bShowPart[_i] then _needRequestDetails = 1		next _i		if _needRequestDetails then			dim _profileGeometryRawData[]			n = REQUEST ("Profile_default_geometry", myProfileIdx, _profileGeometryRawData)	 			dim _idxStartPoints[]			dim _idxEndPoints[]			_idxStartPoints[1] = _nComponents + 1			_numPropertybyNodes = 5			for _i = 2 to _nComponents				_numCompNodes = _profileGeometryRawData[_i - 1]				_idxStartPoints[_i] = _idxStartPoints[_i - 1] + _numCompNodes * _numPropertybyNodes				_idxEndPoints[_i-1] = _idxStartPoints[_i] - 1			next _i			_idxEndPoints[_nComponents] = vardim1(_profileGeometryRawData)		endif	endif	th = -ymax+yminendifif bOverridepen<>"Ручная настройка" then	bSucceed = request{2} ("Building_Material_info", panelBMat, "gs_bmat_cutfill_properties", gs_fill_type, gs_fill_pen, gs_back_pen)endifif GLOB_MVO_CWACC_DETLEVEL >= 2 or GLOB_PREVIEW_MODE=2 then	del top	addz  th-0.0005	gosub "showved"	del topendifsect_attrs{2} penCut, lineTypeCutbuilding_material panelBMatGROUP "base"	if nCorners < 3 then end	for i = 1 to nCorners		put AC_PanelCoords[i][1], AC_PanelCoords [i][2], 15	next i	addz -ymin	cprism_  insideSurface, outsideSurface, _edgeSurface,		nCorners, th,		get (nsp)	ENDGROUPif use_profile and myProfileIdx>EPS then	GROUP "profile"		rotx -90		if is_gor then 			roty -90			add 0,0,-rightSide_X		else			add 0,0,downSide_Y		endif		if is_zerk then 			addx (xmax+xmin)/2			mulx -1			addx -(xmax+xmin)/2		endif		if isPlan and inx_component>EPS then			_iComp = inx_component			gosub "show_comp"		else			for _iComp = 1 to _nComponents				gosub "show_comp"			next _iComp		endif	ENDGROUP	DEL TOP	result=ISECTGROUP{2}("profile", "base", _edgeSurface, _edgeSurface, _edgeSurface, 0+2)	PLACEGROUP result	KILLGROUP result	KILLGROUP "profile"else	if GLOB_MVO_CWFRAME_DETLEVEL>0 then		GROUP "plane"			material _edgeSurface			addz -ymin			for i = 1 to nCorners-1				put AC_PanelCoords[i][1], AC_PanelCoords [i][2],0, 15				put AC_PanelCoords[i][1], AC_PanelCoords [i][2],th, 15				if i=nCorners-1 then					i2 = 1				else					i2 = i+1				endif				put AC_PanelCoords[i2][1], AC_PanelCoords [i2][2],th, 15				put AC_PanelCoords[i2][1], AC_PanelCoords [i2][2],0, 15				plane_ nsp/4, get (nsp)			next i		ENDGROUP		PLACEGROUP "plane"		KILLGROUP "plane"	endif	PLACEGROUP "base"endifKILLGROUP "base"! ==============================================================================end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end! =============================================================================="show_comp":	if _bShowPart[_iComp] then		dim _currSurfaces[]		n = REQUEST{4} ("Profile_component_info", myProfileIdx, _iComp, "gs_profile_comp_surfaces", _currSurfaces)		_bmat = 1		_surface = 1		if bOverridebmat = "Сложный профиль" then			n = REQUEST{4} ("Profile_component_info", myProfileIdx, _iComp, "gs_profile_bmat", _bmat)		else			_bmat = panelBMat		endif		if bOverridepen = "Сложный профиль" then			n = REQUEST{4} ("Profile_component_info", myProfileIdx, _iComp, "gs_profile_outlinepen", tgs_cont_pen)			if tgs_cont_pen>0 and tgs_cont_pen<255 then gs_cont_pen = tgs_cont_pen		endif		if bOverridepen="Ручная настройка" then			SECT_ATTRS gs_fill_type, gs_back_pen, gs_fill_pen, penCut, lineTypeCut		else			building_material _bmat			sect_attrs{2} penCut, lineTypeCut		endif		pen gs_cont_pen		if bOverridebpokr = "Сложный профиль" then			n = REQUEST{4} ("Profile_component_info", myProfileIdx, _iComp, "gs_profile_surface", _surface)		endif		if _surface=insideSurface_prof then _surface=insideSurface		if _surface=outsideSurface_prof then _surface=outsideSurface		_surfIdx = 1		for _i = _idxStartPoints[_iComp] to _idxEndPoints[_iComp] step 5			if _currSurfaces[_surfIdx]=insideSurface_prof then _currSurfaces[_surfIdx]=insideSurface			if _currSurfaces[_surfIdx]=outsideSurface_prof then _currSurfaces[_surfIdx]=outsideSurface			gosub "set_status_code"	 ! input _profileGeometryRawData, returns prismStatus			put 	_profileGeometryRawData[_i], _profileGeometryRawData[_i + 1], 0, prismStatus, _currSurfaces[_surfIdx]			_surfIdx = _surfIdx + 1		next _i		_mask = 1+2+4+8		cprism_{3} _edgeSurface, _edgeSurface, _surface, _mask, NSP/5, ac_height_profile, get(NSP)	endifreturn! ------------------------------------------------------------------------------! Set status code for each point! ------------------------------------------------------------------------------"set_status_code":	edgeVisible 		= _profileGeometryRawData[_i + 2]	verticalEdgeVisible 	= _profileGeometryRawData[_i + 3]	additionalStatus 	= _profileGeometryRawData[_i + 4]	prismStatus 	= additionalStatus	if additionalStatus >= 0 then        ! not contour end		if edgeVisible then 			prismStatus = prismStatus + 15		else			if edgeVisible_ then				prismStatus = prismStatus + 15			else				prismStatus = prismStatus + 13			endif		endif		if verticalEdgeVisible = 0 then prismStatus = prismStatus + 64	endif	edgeVisible_ = edgeVisiblereturn"CW Transformation_3d":	leftClamp_X  = AC_PanelCoords[1][1]	rightClamp_X = AC_PanelCoords[1][1]	for i = 1 to nCorners		if AC_PanelCoords[i][1] < leftClamp_X  then leftClamp_X  = AC_PanelCoords[i][1]		if AC_PanelCoords[i][1] > rightClamp_X then rightClamp_X = AC_PanelCoords[i][1]	next i	if abs (a) < EPS then end	if abs (rightClamp_X - leftClamp_X) > EPS then		tranWidth = a / (rightClamp_X - leftClamp_X)	else		tranWidth = 1	endif	if not(ac_originIsFrameCenter) then		tranX = leftClamp_X	else		tranX = 0	endif	_yDistort = 1	if 	abs(CWPANEL_VERTICAL_DIRECTION) > EPS then		_yDistort = 1 / sin(CWPANEL_VERTICAL_DIRECTION)		! Distort Panel Thickness in case of slanted CW	endifreturn"showved":	if nCorners < 3 then end	PAPER_TO_MODEL = GLOB_SCALE / 1000	Shrift_t = "" : success = LIBRARYGLOBAL ("LibraryGlobals_param_razm", "Shrift", Shrift_t)	Shrift_razm_t = 0 : success = LIBRARYGLOBAL ("LibraryGlobals_param_razm", "Shrift_razm", Shrift_razm_t)	Shrift_tip_t = 0 : success = LIBRARYGLOBAL ("LibraryGlobals_param_razm", "Shrift_tip", Shrift_tip_t)	!Если прочитать не удалось - применим значения по умолчанию	if strlen(Shrift_t)<EPS then Shrift_t = "ISOCPEUR"	if Shrift_razm_t<EPS then Shrift_razm_t = 2.5*GLOB_SCALE	Shrift = Shrift_t	Shrift_razm = 3*GLOB_SCALE	Shrift_tip = Shrift_tip_t	width_factor = 1	charspace_factor = 1	razm_f_anc = 8	razm_s_anc = 2	razm_anc = 5	DEFINE STYLE{2} "razm" Shrift , Shrift_razm, Shrift_tip	sss=request("Height_of_style", "razm", height, descent, leading)	dx_txt = (height/2-descent-leading-Shrift_razm/2)*PAPER_TO_MODEL*0.5	height = height * PAPER_TO_MODEL	material 0	if GLOB_MVO_CWACC_DETLEVEL = 4 or GLOB_MVO_CWACC_DETLEVEL = 2 or (GLOB_PREVIEW_MODE = 2 and id_ved) then		tblockname = "id"		txtv = GLOB_ID		gosub "get_block"		add centerX, centerY, 0		if not(SYMB_MIRRORED) then roty 180		RICHTEXT 0,0, 0.0005, 0, tblockname		if not(SYMB_MIRRORED) then del 1		del 1	endif	if GLOB_MVO_CWACC_DETLEVEL = 4 or GLOB_MVO_CWACC_DETLEVEL = 3 or (GLOB_PREVIEW_MODE = 2 and razm_ved) then		xs = 0 : ys = 0		xe = 0 : ye = 0		for i = 1 to vardim1(AC_FrameAxisCoords)			if i>1 then				xs = AC_FrameAxisCoords[i-1][1]				ys = AC_FrameAxisCoords[i-1][2]			else				xs = AC_FrameAxisCoords[vardim1(AC_FrameAxisCoords)][1]				ys = AC_FrameAxisCoords[vardim1(AC_FrameAxisCoords)][2]			endif			xe = AC_FrameAxisCoords[i][1]			ye = AC_FrameAxisCoords[i][2]			gosub "dim"		next i	endifreturn"dim":	tblockname = ""	dx = xs-xe	dy = ys-ye	gosub "torphi"	if razm_l>EPS then		x = (xs+xe)/2		y = (ys+ye)/2		txtv = str("%.0mm",round_int(razm_l*200)/200)		tblockname = i : gosub "get_block"		add xs,ys,0		rotz ang_razm		add -razm_l/2, dt*height/1000, 0if not(SYMB_MIRRORED) then roty 180		RICHTEXT 0,0, 0.0005, 0, tblocknameif not(SYMB_MIRRORED) then del 1		del 3	endifreturn"torphi":	razm_l = SQR(dx*dx+dy*dy)	if dx>EPS and (abs(dy)<EPS or dy>EPS) then 		ang_razm = atn(dy/dx)		angle_txt = 0	endif	if dx>EPS and dy<EPS and abs(dx)>EPS and abs(dy)>EPS then		ang_razm = atn(dy/dx)+360		angle_txt = 0	endif	if dx<EPS and abs(dx)>EPS then 		ang_razm = atn(dy/dx)+180		angle_txt = 180	endif	if abs(dx)<EPS and dy>EPS then 		ang_razm = 90		angle_txt = 0	endif	if abs(dx)<EPS and dy<EPS and abs(dy)>EPS then 		ang_razm = 270		angle_txt = 180	endif	if abs(dx)<EPS and abs(dy)<EPS then		ang_razm = 0		angle_txt = 0	endifreturn"get_block":	if vartype(tblockname)<>2 then  tblockname = str("%.0mm",tblockname)	if vartype(txtv)<>2 then  txtv = str("%.0mm",txtv)	paragraph tblockname+"p" 2,			0, 0, 0,			1			style "razm"			txtv	endparagraph	TEXTBLOCK tblockname 0, 4, angle_txt, width_factor, charspace_factor, 1,tblockname+"p"	width = Shrift_razm : height = Shrift_razm	n = REQUEST("TEXTBLOCK_INFO", tblockname, width, height)return