!------------------------
! Reinforcement
! 2012, Eptar Kft.
!------------------------
if not(gs_shadow) then shadow off
pen peniron
resol gs_resol
material gs_mat
unidstart=unid
arctoler=0.001
arcdensity=1
arccalc=0
if _iirontype=iron_type_rebar then
ntrans=0
if _ironsubtype=type_rebar_normal then
centerlength=_fulllength-_endlength1-_endlength2-abs(_offset1)-abs(_offset2)
if centerlength<eps&not(bplacedmanual) then
btran=0
if _iendtype1=4|_iendtype1=5|_iendtype1=6 then
btran=1
if _iendtype1=4 then _iendtype1=1
if _iendtype1=5 then _iendtype1=2
if _iendtype1=6 then
_iendtype1=3
if _fulllength/2<_turnbacklength1 then _turnbacklength1=_fulllength/2-0.01
if _turnbacklength1<eps then _iendtype1=2
endif
endif
if _iendtype2=4|_iendtype2=5|_iendtype2=6 then
btran=1
if _iendtype2=4 then _iendtype2=1
if _iendtype2=5 then _iendtype2=2
if _iendtype2=6 then
_iendtype2=3
if _fulllength/2<_turnbacklength2 then _turnbacklength2=_fulllength/2-0.01
if _turnbacklength2<eps then _iendtype2=2
endif
endif
if btran then
ntrans=1
addy max(_endheight1,_endheight2)
endif
endif
dim path[20][2]
pathnum=0
if _iendtype1=1 then
path[1][1]=-1
path[1][2]=0
path[2][1]=0
path[2][2]=0
pathnum=pathnum+2
else
if _iendtype1=2 then
path[1][1]=0
path[1][2]=-_endheight1-(_endheight1>0)+(_endheight1<0)
path[2][1]=0
path[2][2]=-_endheight1
path[3][1]=0
path[3][2]=0
pathnum=pathnum+3
else
if _iendtype1=3 then
path[1][1]=_turnbacklength1+(_turnbacklength1>0)-(_turnbacklength1<0)
path[1][2]=-_endheight1
path[2][1]=_turnbacklength1
path[2][2]=-_endheight1
path[3][1]=0
path[3][2]=-_endheight1
path[4][1]=0
path[4][2]=0
pathnum=pathnum+4
else
if _iendtype1=4 then
path[1][1]=-1
path[1][2]=_offset1
path[2][1]=0
path[2][2]=_offset1
path[3][1]=_endlength1
path[3][2]=_offset1
path[4][1]=_endlength1+abs(_offset1)
path[4][2]=0
pathnum=pathnum+4
else
if _iendtype1=5 then
path[1][1]=0
path[1][2]=_offset1-_endheight1-(_endheight1>0)+(_endheight1<0)
path[2][1]=0
path[2][2]=_offset1-_endheight1
path[3][1]=0
path[3][2]=_offset1
path[4][1]=_endlength1
path[4][2]=_offset1
path[5][1]=_endlength1+abs(_offset1)
path[5][2]=0
pathnum=pathnum+5
else
if _iendtype1=6 then
path[1][1]=_turnbacklength1+(_turnbacklength1>0)-(_turnbacklength1<0)
path[1][2]=_offset1-_endheight1
path[2][1]=_turnbacklength1
path[2][2]=_offset1-_endheight1
path[3][1]=0
path[3][2]=_offset1-_endheight1
path[4][1]=0
path[4][2]=_offset1
path[5][1]=_endlength1
path[5][2]=_offset1
path[6][1]=_endlength1+abs(_offset1)
path[6][2]=0
pathnum=pathnum+6
endif
endif
endif
endif
endif
endif
if _iendtype2=1 then
path[pathnum+1][1]=_fulllength
path[pathnum+1][2]=0
path[pathnum+2][1]=_fulllength+1
path[pathnum+2][2]=0
pathnum=pathnum+2
else
if _iendtype2=2 then
path[pathnum+1][1]=_fulllength
path[pathnum+1][2]=0
path[pathnum+2][1]=_fulllength
path[pathnum+2][2]=-_endheight2
path[pathnum+3][1]=_fulllength
path[pathnum+3][2]=-_endheight2-(_endheight2>0)+(_endheight2<0)
pathnum=pathnum+3
else
if _iendtype2=3 then
path[pathnum+1][1]=_fulllength
path[pathnum+1][2]=0
path[pathnum+2][1]=_fulllength
path[pathnum+2][2]=-_endheight2
path[pathnum+3][1]=_fulllength-_turnbacklength2
path[pathnum+3][2]=-_endheight2
path[pathnum+4][1]=_fulllength-_turnbacklength2-(_turnbacklength2>0)+(_turnbacklength2<0)
path[pathnum+4][2]=-_endheight2
pathnum=pathnum+4
else
if _iendtype2=4 then
path[pathnum+1][1]=_fulllength-_endlength2-abs(_offset2)
path[pathnum+1][2]=0
path[pathnum+2][1]=_fulllength-_endlength2
path[pathnum+2][2]=_offset2
path[pathnum+3][1]=_fulllength
path[pathnum+3][2]=_offset2
path[pathnum+4][1]=_fulllength+1
path[pathnum+4][2]=_offset2
pathnum=pathnum+4
else
if _iendtype2=5 then
path[pathnum+1][1]=_fulllength-_endlength2-abs(_offset2)
path[pathnum+1][2]=0
path[pathnum+2][1]=_fulllength-_endlength2
path[pathnum+2][2]=_offset2
path[pathnum+3][1]=_fulllength
path[pathnum+3][2]=_offset2
path[pathnum+4][1]=_fulllength
path[pathnum+4][2]=_offset2-_endheight2
path[pathnum+5][1]=_fulllength
path[pathnum+5][2]=_offset2-_endheight2-(_endheight2>0)+(_endheight2<0)
pathnum=pathnum+5
else
if _iendtype2=6 then
path[pathnum+1][1]=_fulllength-_endlength2-abs(_offset2)
path[pathnum+1][2]=0
path[pathnum+2][1]=_fulllength-_endlength2
path[pathnum+2][2]=_offset2
path[pathnum+3][1]=_fulllength
path[pathnum+3][2]=_offset2
path[pathnum+4][1]=_fulllength
path[pathnum+4][2]=_offset2-_endheight2
path[pathnum+5][1]=_fulllength-_turnbacklength2
path[pathnum+5][2]=_offset2-_endheight2
path[pathnum+6][1]=_fulllength-_turnbacklength2-(_turnbacklength2>0)+(_turnbacklength2<0)
path[pathnum+6][2]=_offset2-_endheight2
pathnum=pathnum+6
endif
endif
endif
endif
endif
endif
if idetlevel3d=2 then
for i=1 to pathnum
	put path[i][1],path[i][2],0,0
next i
if nsp>15 then
tube 2,nsp/4,1+2+16+32+128,
0,0,901,
_d/2,360,4001,
get(nsp)
else
for i=1 to nsp
eee=get(1)
next i
endif
else
for i=2 to pathnum-2
lin_ path[i][1],path[i][2],0,path[i+1][1],path[i+1][2],0
next i
endif
if benablehsedit then
if _iendtype1=1|_iendtype1=2|_iendtype1=3 then
_leftpos=0
else
_leftpos=_offset1
endif
if _iendtype2=1|_iendtype2=2|_iendtype2=3 then
_rightpos=0
else
_rightpos=_offset2
endif
if _iendtype1=2|_iendtype1=3|_iendtype1=5|_iendtype1=6 then
hotspot 0,_leftpos,0,unid,endheight1,1+128:unid=unid+1
hotspot 0,_leftpos-_endheight1,0,unid,endheight1,2:unid=unid+1
hotspot 0,_leftpos+1,0,unid,endheight1,3:unid=unid+1
if _iendtype1=3|_iendtype1=6 then
hotspot 0,_leftpos-_endheight1,0,unid,turnbacklength1,1+128:unid=unid+1
hotspot _turnbacklength1,_leftpos-_endheight1,0,unid,turnbacklength1,2:unid=unid+1
hotspot-1,_leftpos-_endheight1,0,unid,turnbacklength1,3:unid=unid+1
else
unid=unid+3
endif
else
unid=unid+6
endif
if _iendtype2=2|_iendtype2=3|_iendtype2=5|_iendtype2=6 then
hotspot _fulllength,_rightpos,0,unid,endheight2,1+128:unid=unid+1
hotspot _fulllength,_rightpos-_endheight2,0,unid,endheight2,2:unid=unid+1
hotspot _fulllength,_rightpos+1,0,unid,endheight2,3:unid=unid+1
if _iendtype2=3|_iendtype2=6 then
hotspot _fulllength,_rightpos-_endheight2,0,unid,turnbacklength2,1+128:unid=unid+1
hotspot _fulllength-_turnbacklength2,_rightpos-_endheight2,0,unid,turnbacklength2,2:unid=unid+1
hotspot _fulllength+1,_rightpos-_endheight2,0,unid,turnbacklength2,3:unid=unid+1
else
unid=unid+3
endif
else
unid=unid+6
endif
if _iendtype1=4|_iendtype1=5|_iendtype1=6 then
hotspot 0,_leftpos,0,unid,endlength1,1+128:unid=unid+1
hotspot _endlength1,_leftpos,0,unid,endlength1,2:unid=unid+1
hotspot-1,_leftpos,0,unid,endlength1,3:unid=unid+1
hotspot _endlength1,0,0,unid,offset1,1+128:unid=unid+1
hotspot _endlength1,_offset1,0,unid,offset1,2:unid=unid+1
hotspot _endlength1,-1,0,unid,offset1,3:unid=unid+1
hotspot _endlength1+abs(_offset1),0,0,unid:unid=unid+1
else
unid=unid+7
endif
if _iendtype2=4|_iendtype2=5|_iendtype2=6 then
hotspot _fulllength,_rightpos,0,unid,endlength2,1+128:unid=unid+1
hotspot _fulllength-_endlength2,_rightpos,0,unid,endlength2,2:unid=unid+1
hotspot _fulllength+1,_rightpos,0,unid,endlength2,3:unid=unid+1
hotspot _fulllength-_endlength2,0,0,unid,offset2,1+128:unid=unid+1
hotspot _fulllength-_endlength2,_offset2,0,unid,offset2,2:unid=unid+1
hotspot _fulllength-_endlength2,-1,0,unid,offset2,3:unid=unid+1
hotspot _fulllength-_endlength2-abs(_offset2),0,0,unid:unid=unid+1
else
unid=unid+7
endif
else
for i=2 to pathnum-1
hotspot path[i][1],path[i][2],0,unid:unid=unid+1
next i
endif
endif
if _ironsubtype=type_rebar_polygon then
rotx-90
ntrans=ntrans+1
if benablehsedit then
for i=1 to vardim1(rebarprevcoords)
unid=unidstart+(i-1)*20
hotspot 0,0,rebarprevcoords[i][2],unid,rebarprevcoords[i][1],1+128:unid=unid+1
hotspot-1,0,rebarprevcoords[i][2],unid,rebarprevcoords[i][1],3:unid=unid+1
hotspot rebarprevcoords[i][1],0,rebarprevcoords[i][2],unid,rebarprevcoords[i][1],2:unid=unid+1
hotspot rebarprevcoords[i][1],0,0,unid,rebarprevcoords[i][2],1+128:unid=unid+1
hotspot rebarprevcoords[i][1],0,-1,unid,rebarprevcoords[i][2],3:unid=unid+1
hotspot rebarprevcoords[i][1],0,rebarprevcoords[i][2],unid,rebarprevcoords[i][2],2:unid=unid+1
next i
for i=1 to __nironpoint-not(_bclosedpolygon)
if i<=vardim1(rebararcpoints) then
hotspot _halfpoints[i][1],0,_halfpoints[i][2],unid,rebararcpoints[i],1:unid=unid+1
hotspot _halfpoints[i][5],0,_halfpoints[i][6],unid,rebararcpoints[i],3:unid=unid+1
hotspot _halfpoints[i][3],0,_halfpoints[i][4],unid,rebararcpoints[i],2:unid=unid+1
gosub "arcSign"
endif
if i<=vardim1(rebarnewpoint) then
hotspot 0,0,rebarnewpoint[i][2],unid,rebarnewpoint[i][1],1+128:unid=unid+1
hotspot-1,0,rebarnewpoint[i][2],unid,rebarnewpoint[i][1],3:unid=unid+1
hotspot rebarnewpoint[i][1],0,rebarnewpoint[i][2],unid,rebarnewpoint[i][1],2:unid=unid+1
hotspot rebarnewpoint[i][1],0,0,unid,rebarnewpoint[i][2],1+128:unid=unid+1
hotspot rebarnewpoint[i][1],0,-1,unid,rebarnewpoint[i][2],3:unid=unid+1
hotspot rebarnewpoint[i][1],0,rebarnewpoint[i][2],unid,rebarnewpoint[i][2],2:unid=unid+1
gosub "newPointSign"
endif
next i
else
for i=1 to __nironpoint
unid=unidstart+(i-1)*20
hotspot __ironpointcoords[i][1],0,__ironpointcoords[i][2],unid
next i
endif
gosub "drawPolygonIron"
endif
del ntrans
endif
if _iirontype=iron_type_stirrup then
if _ironsubtype=type_stirrup_normal then
rotx 90
if idetlevel3d=2 then
put _cxr-_bendradius*_s45-_jointlength*2*_s45,_cyt+_bendradius*_s45-_jointlength*2*_s45,0,0
put _cxr-_bendradius*_s45-_jointlength*_s45,_cyt+_bendradius*_s45-_jointlength*_s45,0,0
put _cxr-_bendradius*_s45,_cyt+_bendradius*_s45,0,0
_alfa=-135
_curalfa=135
_cx=_cxr
_cy=_cyt
_cz=0
_radius=_bendradius
_lastpoint=0
gosub "putArc"
put _hoopx,_cyt,0,0
put _hoopx,_cyb,0,0
_alfa=-90
_curalfa=360
_cx=_cxr
_cy=_cyb
_radius=_bendradius
gosub "putArc"
put _cxr,0,0,0
put _cxl,0,0,0
_curalfa=270
_cx=_cxl
gosub "putArc"
put 0,_cyb,0,0
put 0,_cyt,0,0
_curalfa=180
_cy=_cyt
gosub "putArc"
put _cxl,_hoopy,0,0
_cz=_d
put _cxr,_hoopy,_cz,0
_curalfa=90
_alfa=-135
_cx=_cxr
gosub "putArc"
put _cxr+_bendradius*_s45,_cyt-_bendradius*_s45,_cz,0
put _cxr+_bendradius*_s45-_jointlength*_s45,_cyt-_bendradius*_s45-_jointlength*_s45,_cz,0
put _cxr+_bendradius*_s45-_jointlength*2*_s45,_cyt-_bendradius*_s45-_jointlength*2*_s45,_cz,0
!========================================================================================================================
for e=1 to _nstirrup
	addz-(e-1)*_stirrupdist

	if e=_nstirrup then
		tube 2,nsp/4,1+2+16+32+128,
		0,0,901,
		_d/2,360,4001,
		get(nsp)
	else
		tube 2,nsp/4,1+2+16+32+128,
		0,0,901,
		_d/2,360,4001,
		use(nsp)
	endif

	del 1
next e

else
for e=1 to _nstirrup
	addz-(e-1)*_stirrupdist

	lin_ _cxr-_bendradius*_s45-_jointlength*_s45,_cyt+_bendradius*_s45-_jointlength*_s45,0,_cxr-_bendradius*_s45,_cyt+_bendradius*_s45,0
	_alfa=-135
	_curalfa=135
	_cx=_cxr
	_cy=_cyt
	_cz=0
	_radius=_bendradius
	gosub "drawArc"
	lin_ _hoopx,_cyt,0,_hoopx,_cyb,0
	_alfa=-90
	_curalfa=360
	_cx=_cxr
	_cy=_cyb
	_radius=_bendradius
	gosub "drawArc"
	lin_ _cxr,0,0,_cxl,0,0
	_curalfa=270
	_cx=_cxl
	gosub "drawArc"
	lin_ 0,_cyb,0,0,_cyt,0
	_curalfa=180
	_cy=_cyt
	gosub "drawArc"
	lin_ _cxl,_hoopy,0,_cxr,_hoopy,0
	_curalfa=90
	_alfa=-135
	_cx=_cxr
	gosub "drawArc"
	lin_ _cxr+_bendradius*_s45,_cyt-_bendradius*_s45,0,_cxr+_bendradius*_s45-_jointlength*_s45,_cyt-_bendradius*_s45-_jointlength*_s45,0

	del 1
next e
endif
del 1
endif
if _ironsubtype=type_stirrup_polygon then
for e=1 to _nstirrup
	addy(e-1)*_stirrupdist
																									rotz rot_st
	if not(bnullhotspot) then
	if benablehsedit then
	for i=1 to vardim1(stirrupprevcoords)
	unid=unidstart+(i-1)*20
	hotspot 0,0,stirrupprevcoords[i][2],unid,stirrupprevcoords[i][1],1+128:unid=unid+1
	hotspot-1,0,stirrupprevcoords[i][2],unid,stirrupprevcoords[i][1],3:unid=unid+1
	hotspot stirrupprevcoords[i][1],0,stirrupprevcoords[i][2],unid,stirrupprevcoords[i][1],2:unid=unid+1
	hotspot stirrupprevcoords[i][1],0,0,unid,stirrupprevcoords[i][2],1+128:unid=unid+1
	hotspot stirrupprevcoords[i][1],0,-1,unid,stirrupprevcoords[i][2],3:unid=unid+1
	hotspot stirrupprevcoords[i][1],0,stirrupprevcoords[i][2],unid,stirrupprevcoords[i][2],2:unid=unid+1
	next i
	for i=1 to __nironpoint-not(_bclosedpolygon)
	if i<=vardim1(stirruparcpoints) then
	hotspot _halfpoints[i][1],0,_halfpoints[i][2],unid,stirruparcpoints[i],1:unid=unid+1
	hotspot _halfpoints[i][5],0,_halfpoints[i][6],unid,stirruparcpoints[i],3:unid=unid+1
	hotspot _halfpoints[i][3],0,_halfpoints[i][4],unid,stirruparcpoints[i],2:unid=unid+1
	gosub "arcSign"
	endif
	if i<=vardim1(stirrupnewpoint) then
	hotspot 0,0,stirrupnewpoint[i][2],unid,stirrupnewpoint[i][1],1+128:unid=unid+1
	hotspot-1,0,stirrupnewpoint[i][2],unid,stirrupnewpoint[i][1],3:unid=unid+1
	hotspot stirrupnewpoint[i][1],0,stirrupnewpoint[i][2],unid,stirrupnewpoint[i][1],2:unid=unid+1
	hotspot stirrupnewpoint[i][1],0,0,unid,stirrupnewpoint[i][2],1+128:unid=unid+1
	hotspot stirrupnewpoint[i][1],0,-1,unid,stirrupnewpoint[i][2],3:unid=unid+1
	hotspot stirrupnewpoint[i][1],0,stirrupnewpoint[i][2],unid,stirrupnewpoint[i][2],2:unid=unid+1
	gosub "newPointSign"
	endif
	next i
	else
	for i=1 to __nironpoint
	unid=unidstart+(i-1)*20
	hotspot __ironpointcoords[i][1],0,__ironpointcoords[i][2],unid
	next i
	endif
	endif
	gosub "drawPolygonIron"
	del 2
next e
endif
endif
if _iirontype=iron_type_mesh then
endif
end unid
"arcSign":
if glob_context=5 then return
pen penfont
line_type 1
add _halfpoints[i][3],0,_halfpoints[i][4]
roty-_lineangle[i]
mulz-1
add _signsize[i],0,-_signoffset*(_signsize[i]/_signl)
lin_-_signsize[i]*2,0,-_signsize[i],0,0,-_signsize[i]
lin_ 0,0,-_signsize[i],0,0,_signsize[i]
lin_ 0,0,_signsize[i],-_signsize[i]*2,0,_signsize[i]
lin_-_signsize[i]*2,0,_signsize[i],-_signsize[i]*2,0,-_signsize[i]
_curalfa=0
_alfa=180
_radius=_signsize[i]*0.75
_cx=-_signsize[i]
_cy=-_signsize[i]/2
_cz=0
_lastpoint=1
arcdensity=2
rotx 90
gosub "drawArc"
del 5
pen peniron
return
"newPointSign":
if glob_context=5 then return
pen penfont
line_type 1
add __ironnewpoint[i][1],0,__ironnewpoint[i][2]
roty-_lineangle[i]
mulz-1
add-_signsize[i],0,-_signoffset*(_signsize[i]/_signl)
lin_ 0,0,-_signsize[i],_signsize[i]*2,0,-_signsize[i]
lin_ _signsize[i]*2,0,-_signsize[i],_signsize[i]*2,0,_signsize[i]
lin_ _signsize[i]*2,0,_signsize[i],0,0,_signsize[i]
lin_ 0,0,_signsize[i],0,0,-_signsize[i]
addx _signsize[i]
lin_-_signsize[i]*0.75,0,-_signsize[i]/2,0,0,_signsize[i]/2
lin_ _signsize[i]*0.75,0,-_signsize[i]/2,0,0,_signsize[i]/2
del 5
pen peniron
return
"drawPolygonIron":
if arccalc=0 then
gosub "calculateDirection"
gosub "bendCalculation"
arccalc=arccalc+1
endif
rotx 90
if idetlevel3d=2 then
vx=detpoints[2][1]-detpoints[1][1]
vy=detpoints[2][2]-detpoints[1][2]
gosub "directionAngle"
put detpoints[1][1]-cos(angle),detpoints[1][2]-sin(angle),detpoints[1][3],0
put detpoints[1][1],detpoints[1][2],detpoints[1][3],0
for ii=1 to npoint-1
if detisarc[ii] then
vx=detpoints[ii][1]-detarccenter[ii][1]
vy=detpoints[ii][2]-detarccenter[ii][2]
gosub "directionAngle"
_curalfa=angle
_alfa=detarcangle[ii]
_radius=detradiusdist[ii]
_cx=detarccenter[ii][1]
_cy=detarccenter[ii][2]
_cz=detpoints[ii][3]
_lastpoint=0
gosub "putArc"
put detpoints[ii+1][1],detpoints[ii+1][2],detpoints[ii+1][3],0
else
put detpoints[ii+1][1],detpoints[ii+1][2],detpoints[ii+1][3],0
endif
next ii
vx=detpoints[npoint][1]-detpoints[npoint-1][1]
vy=detpoints[npoint][2]-detpoints[npoint-1][2]
gosub "directionAngle"
put detpoints[npoint][1]+cos(angle),detpoints[npoint][2]+sin(angle),detpoints[npoint][3],0
if nsp>15 then
tube 2,nsp/4,1+2+16+32+128,
0,0,901,
_d/2,360,4001,
get(nsp)
else
for e=1 to nsp
eee=get(1)
next e
endif
else
for ii=1 to npoint-1
if detisarc[ii] then
vx=detpoints[ii][1]-detarccenter[ii][1]
vy=detpoints[ii][2]-detarccenter[ii][2]
gosub "directionAngle"
_curalfa=angle
_alfa=detarcangle[ii]
_radius=detradiusdist[ii]
_cx=detarccenter[ii][1]
_cy=detarccenter[ii][2]
_cz=detpoints[ii][3]
arcdensity=1
gosub "drawArc"
else
lin_ detpoints[ii][1],detpoints[ii][2],0,detpoints[ii+1][1],detpoints[ii+1][2],detpoints[ii][3]
endif
next ii
endif
del 1
return
"drawArc":
_res=acs((_radius-arctoler)/_radius)*(2/arcdensity)
_int=max(abs(round_int(abs(_alfa)/_res) ),2)
_delta=_alfa/_int
_curangle=_curalfa
for _i=1 to _int
lin_ _cx+cos(_curangle)*_radius,_cy+sin(_curangle)*_radius,_cz,_cx+cos(_curangle+_delta)*_radius,_cy+sin(_curangle+_delta)*_radius,_cz
_curangle=_curangle+_delta
next _i
return
"putArc":
_res=acs((_radius-arctoler)/_radius)*2
_int=max(abs(round_int(abs(_alfa)/_res) ),2)
_delta=_alfa/_int
_curangle=_curalfa+_delta
_l=(_lastpoint=0)
for _i=1 to _int-_l
put _cx+cos(_curangle)*_radius,_cy+sin(_curangle)*_radius,_cz,0
_curangle=_curangle+_delta
next _i
return