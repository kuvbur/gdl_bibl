unID_arm=arm_inx*100unID_el=arm_inx*5000EPS=0.0001n_trans = 0if arm_inx<EPS then arm_inx=1! -------- Типы отображения ------------SHOW_GOST = 1SHOW_LINE = 2SHOW_SOLID = 3! -------- Типы конструкций -------------TYPE_SLAB = 1TYPE_WALL = 2TYPE_BEAM = 3TYPE_COLUMN = 4! --------- Направления -----------------DIR_X = 1DIR_Y = 2DIR_Z = 3! --------- Форма стержня ---------------LIN_START = 0						!---- Начало линейных стержней ----	LINN	=	LIN_START + 1			!Простой прямой	LIN_P	=	LIN_START + 2		!С П-образным загибом	LIN_G	=	LIN_START + 3		!С Г-образным загибомLIN_END = 19						!---- Конец линейных стержней ----KR_START = 20						!---- Начало поддерживающей/поперечной арматуры ----	KZ	=		KR_START + 1		!Каркас змейкой	KP3	=		KR_START + 2		!Каркас пространственный с 3 стержнями (козлик)	FROG =		KR_START + 3		!Лягушка	KP4	=		KR_START + 4		!Каркас пространственный	KSHP =		KR_START + 5		!Шпилька (стены)	KPR =		KR_START + 6		!П-шка (стены)KR_END = 29							!---- Конец поддерживающей/поперечной арматуры ----GNUT_START = 30						!---- Начало гнутых стержней ----	GNUT_P	=	GNUT_START + 1		!П-шкаGNUT_END = 60						!---- Конец гнутых стержней ----dict armconst_tif not(haskey(armconst.flag)) then	armconst_t.flag = 1	armconst_t.form.LIN_START = LIN_START	armconst_t.form.LINN = LINN	armconst_t.form.LIN_P = LIN_P	armconst_t.form.LIN_G = LIN_G	armconst_t.form.LIN_END = LIN_END	armconst_t.form.KR_START = KR_START	armconst_t.form.KZ = KZ	armconst_t.form.KP3 = KP3	armconst_t.form.FROG = FROG	armconst_t.form.KP4 = KP4	armconst_t.form.KSHP = KSHP	armconst_t.form.KPR = KPR	armconst_t.form.KR_END = KR_END	armconst_t.form.GNUT_START = GNUT_START	armconst_t.form.GNUT_P = GNUT_P	armconst_t.form.GNUT_END = GNUT_END	armconst_t.show.GOST = SHOW_GOST	armconst_t.show.LINE = SHOW_LINE	armconst_t.show.SOLID = SHOW_SOLID	armconst_t.type.SLAB = TYPE_SLAB	armconst_t.type.WALL = TYPE_WALL	armconst_t.type.BEAM = TYPE_BEAM	armconst_t.type.COLUMN = TYPE_COLUMN	armconst_t.dir.X = DIR_X	armconst_t.dir.Y = DIR_Y	armconst_t.dir.Z = DIR_Z		armconst = armconst_t	parameters armconst = armconst_tendif!!Общие параметры!armd.el[arm_inx].constr            !Тип конструкции!armd.el[arm_inx].dir               !Направление оси стержня!armd.el[arm_inx].length            !Длина стержня в модели!armd.el[arm_inx].layer             !Номер слоя!armd.el[arm_inx].area              !Площадь армирования!armd.el[arm_inx].flag_recal        !Нужно ли пересчитывать расположение стержней (0/1)!armd.el[arm_inx].maxrad            !Максимальный радиус изгиба!armd.el[arm_inx].form.type         !Тип формы стержня!armd.el[arm_inx].form.coord[]      !Параметры формы стержня!!Отступ начала элемента!armd.el[arm_inx].offset.x!armd.el[arm_inx].offset.y!armd.el[arm_inx].offset.z!!Направление 1!!Если задано направление 2, но не задано направление 1 - копируем всё в 1!armd.el[arm_inx].array[1].dir         !Направление массива!armd.el[arm_inx].array[1].step        !Шаг массива!armd.el[arm_inx].array[1].step_offset !Смещение шага при наличии внторого направления (для шахматного порядка)!armd.el[arm_inx].array[1].offset      !Смещение начала массива!armd.el[arm_inx].array[1].length      !Длина массива!armd.el[arm_inx].array[1].step_start  !Шаг первого стержня!armd.el[arm_inx].array[1].step_end    !Шаг последнего стержня!armd.el[arm_inx].array[1].qty         !Количество стержней в направлении 1!!Направление 2 - массив стерней из направления 1!armd.el[arm_inx].array[2].dir         !Направление массива!armd.el[arm_inx].array[2].step        !Шаг массива!armd.el[arm_inx].array[2].offset      !Смещение начала массива!armd.el[arm_inx].array[2].length      !Длина массива!armd.el[arm_inx].array[2].step_start  !Шаг первого стержня!armd.el[arm_inx].array[2].step_end    !Шаг последнего стержня!armd.el[arm_inx].array[2].qty         !Количество стержней в направлении 2!!Спецификация!armd.el[arm_inx].spec.pos             !Позиция стержня!armd.el[arm_inx].spec.subpos          !Марка сборки!armd.el[arm_inx].spec.diam            !Диаметр!armd.el[arm_inx].spec.r               !Радиус!armd.el[arm_inx].spec.class           !Класс!armd.el[arm_inx].spec.length          !Длина в спецификацию!armd.el[arm_inx].spec.fon             !Выводить в п.м. (0/1)!armd.el[arm_inx].spec.plit            !Фоновое армирование (0/1)!armd.el[arm_inx].spec.gnut            !Гнутый элемент (0/1)!armd.el[arm_inx].spec.otm_elem        !Отметка начала элемента!armd.el[arm_inx].spec.gost            !ГОСТ!armd.el[arm_inx].spec.ves             !Масса элемента!armd.el[arm_inx].spec.ves_p           !Масса п.м. элемента!armd.el[arm_inx].spec.qty             !Количествоarm_diam = armd.el[arm_inx].spec.diamarm_class = armd.el[arm_inx].spec.classarm_constr = armd.el[arm_inx].constrarm_direction = armd.el[arm_inx].dirarm_length = armd.el[arm_inx].lengtharm_array_1_dir = armd.el[arm_inx].array[1].dirarm_array_1_step = armd.el[arm_inx].array[1].steparm_array_1_dir_chess = armd.el[arm_inx].array[1].step_offsetarm_array_1_length = armd.el[arm_inx].array[1].lengtharm_array_2_dir = armd.el[arm_inx].array[1].dirarm_array_2_step = armd.el[arm_inx].array[1].steparm_array_2_length = armd.el[arm_inx].array[1].lengthss_x = armd.el[arm_inx].offset.xss_y = armd.el[arm_inx].offset.yss_z = armd.el[arm_inx].offset.zs_1 = armd.el[arm_inx].array[1].offsets_2 = armd.el[arm_inx].array[2].offsetarm_layer = armd.el[arm_inx].layerif arm_array_2_length<arm_array_2_step then arm_array_2_step = arm_array_2_lengthif arm_array_1_length<arm_array_1_step then arm_array_1_step = arm_array_1_lengthif arm_array_1_step<EPS or arm_array_1_length<EPS then arm_array_1_dir = 0if arm_array_2_step<EPS or arm_array_2_length<EPS then arm_array_2_dir = 0arm_r = arm_diam/2s_1 = s_1 + arm_r : s_2 = s_2 + arm_rarm_array_1_length = arm_array_1_length - arm_diamarm_array_2_length = arm_array_2_length - arm_diamqty_1 = 0if arm_array_1_dir>0 then	step_1_s = arm_array_1_step : step_1_e = arm_array_1_step	qty_1 = int(arm_array_1_length / arm_array_1_step)	if (arm_array_1_length - qty_1 * arm_array_1_step) > EPS then		step_1_s = (arm_array_1_length - (qty_1 - 1) * arm_array_1_step) / 2		step_1_e = step_1_s		qty_1 = qty_1 + 1	endif	qty_1 = qty_1 + 1endifqty_2 = 0if arm_array_2_dir>0 then	step_2_s = arm_array_2_step : step_2_e = arm_array_2_step	qty_2 = int(arm_array_2_length / arm_array_2_step)	if (arm_array_2_length - qty_2 * arm_array_2_step) > EPS then		step_2_s = (arm_array_2_length - (qty_2 - 1) * arm_array_2_step) / 2		step_2_e = step_2_s		qty_2 = qty_2 + 1	endif	qty_2 = qty_2 + 1endifex=0 : ey=0 : ez=0sx=0 : sy=0 : sz=0if arm_direction = DIR_X then	ex = arm_length	sx = ss_x	sy = ss_y	sz = ss_zendifif arm_direction = DIR_Y then	ey = arm_length	sy = ss_x	sx = ss_y	sz = ss_zendifif arm_direction = DIR_Z then	ez = arm_length	sz = ss_x	sy = ss_y	sx = ss_zendif!if show_type_2d=SHOW_GOST and show_type_3d=SHOW_GOST then!	s_1 = s_1 - arm_r : s_2 = s_2 - arm_r!	arm_array_1_length = arm_array_1_length + arm_diam!	arm_array_2_length = arm_array_2_length + arm_diam!endifdx_1=0 : dy_1=0 : dz_1=0sx_1=0 : sy_1=0 : sz_1=0ex_1=0 : ey_1=0 : ez_1=0if arm_array_1_dir = DIR_X then 	dx_1 = arm_array_1_step	ex_1 = arm_array_1_length	sx_1 = s_1endifif arm_array_1_dir = DIR_Y then 	dy_1 = arm_array_1_step	ey_1 = arm_array_1_length	sy_1 = s_1endifif arm_array_1_dir = DIR_Z then 	dz_1 = arm_array_1_step	ez_1 = arm_array_1_length	sz_1 = s_1endifdx_2=0 : dy_2=0 : dz_2=0sx_2=0 : sy_2=0 : sz_2=0ex_2=0 : ey_2=0 : ez_2=0if arm_array_2_dir = DIR_X then	dx_2 = arm_array_2_step	ex_2 = arm_array_2_length	sx_2 = s_2endifif arm_array_2_dir = DIR_Y then	dy_2 = arm_array_2_step	ey_2 = arm_array_2_length	sy_2 = s_2endifif arm_array_2_dir = DIR_Z then	dz_2 = arm_array_2_step	ez_2 = arm_array_2_length	sz_2 = s_2endifarm_kol_vo_spec = max(1, qty_1, qty_2, qty_1 * qty_2)dlin_ed_st = 11.7l_nahl = 0.6arm_dlin_st = arm_lengthif arm_length > dlin_ed_st then	arm_fon = 1	n_st = round_int(arm_length / dlin_ed_st)	arm_dlin_st = round_int((n_st * l_nahl + arm_length)*10)/10else	arm_dlin_st = round_int(arm_length*10)/10endifarm_step = arm_array_1_stepif qty_2 > qty_1 then arm_step = arm_array_2_steparm_area = 0if arm_step>EPS then arm_area = int(100*100*PI*arm_r^2*(1/arm_step)*100)/100