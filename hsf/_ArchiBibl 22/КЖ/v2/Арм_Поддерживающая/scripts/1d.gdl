unID_arm=arm_inx*100unID_el=arm_inx*5000EPS=0.0001n_trans = 0n = REQUEST ("Name_of_main", "", name)is_call = 0 : if name<>"" then is_call = 1if arm_inx<EPS then arm_inx=1if vardim1(coord_vin)<arm_inx or  vardim1(coord_vin_s)<arm_inx then	dim tmp_arr[][5]	dim tmp_arr_s[][5]	for i=1 to arm_inx		for j=1 to 5			var = i*j			var_s = i*j/1000			if i<=vardim1(coord_vin) then var = coord_vin[i][j]			if i<=vardim1(coord_vin_s) then var_s = coord_vin_s[i][j]			tmp_arr[i][j] = var			tmp_arr_s[i][j] = var_s		next j	next i	coord_vin = tmp_arr	coord_vin_s = tmp_arr_s	PARAMETERS coord_vin = coord_vin, coord_vin_s = coord_vin_sendif! -------- Типы отображения ------------SHOW_GOST = 1SHOW_LINE = 2SHOW_SOLID = 3! -------- Типы конструкций -------------TYPE_SLAB = 1TYPE_WALL = 2TYPE_BEAM = 3TYPE_COLUMN = 4! --------- Направления -----------------DIR_X = 1DIR_Y = 2DIR_Z = 3! --------- Форма стержня ---------------ARM_KR_START = 20						!---- Начало поддерживающей/поперечной арматуры ----	ARM_KZ	=		ARM_KR_START + 1		!Каркас змейкой	ARM_KP3	=		ARM_KR_START + 2		!Каркас пространственный с 3 стержнями (козлик)	ARM_FROG =		ARM_KR_START + 3		!Лягушка	ARM_KP4	=		ARM_KR_START + 4		!Каркас пространственный	ARM_KSHP =		ARM_KR_START + 5		!Шпилька (стены)	ARM_KPR =		ARM_KR_START + 6		!П-шка (стены)ARM_KR_END = 29							!---- Конец поддерживающей/поперечной арматуры ----if not(is_call) then	arm_pod_x = A	arm_pod_y = B	arm_pod_z = ZZYZX	if arm_direction = DIR_X then arm_length = arm_pod_x	if arm_direction = DIR_Y then arm_length = arm_pod_y	if arm_direction = DIR_Z then arm_length = arm_pod_z	if arm_array_1_dir = DIR_X then arm_array_1_length = arm_pod_x	if arm_array_1_dir = DIR_Y then arm_array_1_length = arm_pod_y	if arm_array_1_dir = DIR_Z then arm_array_1_length = arm_pod_z	if arm_array_2_dir = DIR_X then arm_array_2_length = arm_pod_x	if arm_array_2_dir = DIR_Y then arm_array_2_length = arm_pod_y	if arm_array_2_dir = DIR_Z then arm_array_2_length = arm_pod_zelse	arm_pos = arm_pos_arr[arm_inx]	subpos = subpos_arr[arm_inx]	arm_constr = arm_constr_arr[arm_inx]	arm_direction = arm_direction_arr[arm_inx]	arm_length = arm_length_arr[arm_inx]	arm_array_1_dir = arm_array_1_dir_arr[arm_inx]	arm_array_1_step = arm_array_1_step_arr[arm_inx][1]	arm_array_1_dir_chess = arm_array_1_step_arr[arm_inx][2]	arm_array_1_length = arm_array_1_length_arr[arm_inx]	arm_array_2_dir = arm_array_2_dir_arr[arm_inx]	arm_array_2_step = arm_array_2_step_arr[arm_inx][1]	arm_array_2_dir_chess = arm_array_2_step_arr[arm_inx][2]	arm_array_2_length = arm_array_2_length_arr[arm_inx]	arm_fon = arm_fon_arr[arm_inx]	arm_plit = arm_plit_arr[arm_inx]	arm_gnut = arm_gnut_arr[arm_inx]	arm_ss_x = arm_startpoint[arm_inx][1]	arm_ss_y = arm_startpoint[arm_inx][2]	arm_ss_z = arm_startpoint[arm_inx][3]	arm_s_1 = arm_startpoint[arm_inx][4]	arm_s_2 = arm_startpoint[arm_inx][5]	arm_layer = arm_layer_arr[arm_inx]endifdim tmp_coord[][4]n_used_diam = 4if arm_type_pod=ARM_KZ then	n_used_diam = 2	arm_array_2_dir = 0	arm_array_2_step = 0	arm_array_2_dir_chess = 0	arm_array_2_length = 0endifif arm_type_pod=ARM_FROG then	n_used_diam = 1	arm_gnut = 1	dir_down = arm_array_1_dir * (arm_array_2_dir>EPS) + (3-arm_direction)*(arm_array_2_dir<EPS) !Направление нижних усов	arm_ss_z = arm_ss_z + arm_diam_pod_1/2	arm_dist_pod = arm_dist_pod - arm_diam_pod_1	arm_s_1 = arm_s_1 + 0.5*(arm_step_pod+arm_diam_pod_1)	arm_s_2 = arm_s_2 + arm_l1_pod	arm_length = 0endifif arm_type_pod=ARM_KSHP then	n_used_diam = 1	arm_gnut = 1endifif arm_type_pod=ARM_KPR then	n_used_diam = 1	arm_gnut = 1endifmaxrad = 0if n_used_diam = 1 then	call "Радиус_изгиба" PARAMETERS ALL class=arm_class_pod_1, diam_arm=arm_diam_pod_1 RETURNED_PARAMETERS maxrad	arm_diam = arm_diam_pod_1	arm_class = arm_class_pod_1endifif arm_type_pod=ARM_FROG then	inx=2 	tmp_coord[inx][1] = 0.5*arm_step_pod*(dir_down=DIR_X) + arm_l1_pod*(dir_down=DIR_Y)	tmp_coord[inx][2] = arm_l1_pod*(dir_down=DIR_X) + 0.5*arm_step_pod*(dir_down=DIR_Y)	tmp_coord[inx][3] = 0	tmp_coord[inx][4] = 0	inx=inx+1	tmp_coord[inx][1] = 0.5*arm_step_pod*(dir_down=DIR_X) + maxrad*(dir_down=DIR_Y)	tmp_coord[inx][2] = maxrad*(dir_down=DIR_X) + 0.5*arm_step_pod*(dir_down=DIR_Y)	tmp_coord[inx][3] = 0	tmp_coord[inx][4] = 0	inx=inx+1	tmp_coord[inx][1] = 0.5*arm_step_pod*(dir_down=DIR_X)	tmp_coord[inx][2] = 0.5*arm_step_pod*(dir_down=DIR_Y)	tmp_coord[inx][3] = maxrad	tmp_coord[inx][4] = 0	inx=inx+1	tmp_coord[inx][1] = 0.5*arm_step_pod*(dir_down=DIR_X)	tmp_coord[inx][2] = 0.5*arm_step_pod*(dir_down=DIR_Y)	tmp_coord[inx][3] = arm_dist_pod*0.5	tmp_coord[inx][4] = 0	inx=inx+1	tmp_coord[inx][1] = 0.5*arm_step_pod*(dir_down=DIR_X)	tmp_coord[inx][2] = 0.5*arm_step_pod*(dir_down=DIR_Y)	tmp_coord[inx][3] = arm_dist_pod-maxrad	tmp_coord[inx][4] = 90	inx=inx+1	tmp_coord[inx][1] = (0.5*arm_step_pod-maxrad)*(dir_down=DIR_X)	tmp_coord[inx][2] = (0.5*arm_step_pod-maxrad)*(dir_down=DIR_Y)	tmp_coord[inx][3] = arm_dist_pod	tmp_coord[inx][4] = 90	inx=inx+1	tmp_coord[inx][1] = 0	tmp_coord[inx][2] = 0	tmp_coord[inx][3] = arm_dist_pod	tmp_coord[inx][4] = 90	inx=inx+1	tmp_coord[inx][1] = -(0.5*arm_step_pod-maxrad)*(dir_down=DIR_X)	tmp_coord[inx][2] = -(0.5*arm_step_pod-maxrad)*(dir_down=DIR_Y)	tmp_coord[inx][3] = arm_dist_pod	tmp_coord[inx][4] = 90	inx=inx+1	tmp_coord[inx][1] = -0.5*arm_step_pod*(dir_down=DIR_X)	tmp_coord[inx][2] = -0.5*arm_step_pod*(dir_down=DIR_Y)	tmp_coord[inx][3] = arm_dist_pod-maxrad	tmp_coord[inx][4] = 90	inx=inx+1	tmp_coord[inx][1] = -0.5*arm_step_pod*(dir_down=DIR_X)	tmp_coord[inx][2] = -0.5*arm_step_pod*(dir_down=DIR_Y)	tmp_coord[inx][3] = arm_dist_pod*0.5	tmp_coord[inx][4] = 90	inx=inx+1	tmp_coord[inx][1] = -0.5*arm_step_pod*(dir_down=DIR_X)	tmp_coord[inx][2] = -0.5*arm_step_pod*(dir_down=DIR_Y)	tmp_coord[inx][3] = maxrad	tmp_coord[inx][4] = 180	inx=inx+1	tmp_coord[inx][1] = -0.5*arm_step_pod*(dir_down=DIR_X) - maxrad*(dir_down=DIR_Y)	tmp_coord[inx][2] = -maxrad*(dir_down=DIR_X) - 0.5*arm_step_pod*(dir_down=DIR_Y)	tmp_coord[inx][3] = 0	tmp_coord[inx][4] = 180	inx=inx+1	tmp_coord[inx][1] = -0.5*arm_step_pod*(dir_down=DIR_X) - arm_l1_pod*(dir_down=DIR_Y)	tmp_coord[inx][2] = -arm_l1_pod*(dir_down=DIR_X) - 0.5*arm_step_pod*(dir_down=DIR_Y)	tmp_coord[inx][3] = 0	tmp_coord[inx][4] = 180	tmp_coord[inx+1][1] = tmp_coord[inx][1]-(dir_down=DIR_Y)	tmp_coord[inx+1][2] = tmp_coord[inx][2]-(dir_down=DIR_X)	tmp_coord[inx+1][3] = tmp_coord[inx][3]-(dir_down=DIR_Z)	tmp_coord[inx+1][4] = 0	tmp_coord[1][1] = tmp_coord[2][1]+(dir_down=DIR_Y)	tmp_coord[1][2] = tmp_coord[2][2]+(dir_down=DIR_X)	tmp_coord[1][3] = tmp_coord[2][3]+(dir_down=DIR_Z)	tmp_coord[1][4] = 0endifsuccess = LIBRARYGLOBAL ("Libraryflobals-kzh", "show_type_2d", show_type_2d)success = LIBRARYGLOBAL ("Libraryflobals-kzh", "show_type_3d", show_type_3d)ss_x = arm_ss_x : ss_y = arm_ss_y : ss_z = arm_ss_zs_1 = arm_s_1 : s_2 = arm_s_2arm_r = arm_diam/2arm_array_1_length = arm_array_1_length - arm_s_1 * 2arm_array_2_length = arm_array_2_length - arm_s_2 * 2if arm_array_2_length<arm_array_2_step then arm_array_2_step = arm_array_2_lengthif arm_array_1_length<arm_array_1_step then arm_array_1_step = arm_array_1_lengthif arm_array_1_step<EPS or arm_array_1_length<EPS then arm_array_1_dir = 0if arm_array_2_step<EPS or arm_array_2_length<EPS then arm_array_2_dir = 0qty_1 = 0if arm_array_1_dir>0 then	step_1_s = arm_array_1_step : step_1_e = arm_array_1_step	qty_1 = int(arm_array_1_length / arm_array_1_step)	if (arm_array_1_length - qty_1 * arm_array_1_step) > EPS then		step_1_s = (arm_array_1_length - (qty_1 - 1) * arm_array_1_step) / 2		step_1_e = step_1_s		qty_1 = qty_1 + 1	endif	qty_1 = qty_1 + 1endifqty_2 = 0if arm_array_2_dir>0 then	step_2_s = arm_array_2_step : step_2_e = arm_array_2_step	qty_2 = int(arm_array_2_length / arm_array_2_step)	if (arm_array_2_length - qty_2 * arm_array_2_step) > EPS then		step_2_s = (arm_array_2_length - (qty_2 - 1) * arm_array_2_step) / 2		step_2_e = step_2_s		qty_2 = qty_2 + 1	endif	qty_2 = qty_2 + 1endifex=0 : ey=0 : ez=0sx=0 : sy=0 : sz=0if arm_direction = DIR_X then	ex = arm_length	sx = ss_x	sy = ss_y	sz = ss_zendifif arm_direction = DIR_Y then	ey = arm_length	sy = ss_x	sx = ss_y	sz = ss_zendifif arm_direction = DIR_Z then	ez = arm_length	sz = ss_x	sy = ss_y	sx = ss_zendif!if show_type_2d=SHOW_GOST and show_type_3d=SHOW_GOST then!	s_1 = s_1 - arm_r : s_2 = s_2 - arm_r!	arm_array_1_length = arm_array_1_length + arm_diam!	arm_array_2_length = arm_array_2_length + arm_diam!endifdx_1=0 : dy_1=0 : dz_1=0sx_1=0 : sy_1=0 : sz_1=0ex_1=0 : ey_1=0 : ez_1=0if arm_array_1_dir = DIR_X then 	dx_1 = arm_array_1_step	ex_1 = arm_array_1_length	sx_1 = s_1endifif arm_array_1_dir = DIR_Y then 	dy_1 = arm_array_1_step	ey_1 = arm_array_1_length	sy_1 = s_1endifif arm_array_1_dir = DIR_Z then 	dz_1 = arm_array_1_step	ez_1 = arm_array_1_length	sz_1 = s_1endifdx_2=0 : dy_2=0 : dz_2=0sx_2=0 : sy_2=0 : sz_2=0ex_2=0 : ey_2=0 : ez_2=0if arm_array_2_dir = DIR_X then	dx_2 = arm_array_2_step	ex_2 = arm_array_2_length	sx_2 = s_2endifif arm_array_2_dir = DIR_Y then	dy_2 = arm_array_2_step	ey_2 = arm_array_2_length	sy_2 = s_2endifif arm_array_2_dir = DIR_Z then	dz_2 = arm_array_2_step	ez_2 = arm_array_2_length	sz_2 = s_2endifif arm_array_1_dir_chess>EPS and arm_array_2_dir>0 then	n_ch = int(qty_1/2)	if (qty_1 mod 2)>EPS then		n_nch = n_ch+1	else		n_nch = n_ch	endif	arm_kol_vo_spec = max(1, qty_1, qty_2*n_nch+(qty_2-1)*n_ch)else	arm_kol_vo_spec = max(1, qty_1, qty_2, qty_1 * qty_2)endifarm_step = arm_array_1_stepif qty_2 > qty_1 then arm_step = arm_array_2_steparm_area = int(100*100*PI*arm_r^2*(1/arm_step)*100)/100