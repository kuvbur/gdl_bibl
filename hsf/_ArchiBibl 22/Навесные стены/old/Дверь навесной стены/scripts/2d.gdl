unID = 1tranWidth = 0tranX = 0call "CW Transformation" parameters A = A, AC_PanelCoords = AC_PanelCoords, ac_originIsFrameCenter = ac_originIsFrameCenter returned_parameters tranWidth, tranXmul2 tranWidth, 1add2 -tranX, 0! --- setting detail level ---if gs_detlevel_2d_m = 0 then endif gs_detlevel_2d_m < 0 then	if GLOB_SCALE >= 150 then gs_detlevel_2d_m = 200	if GLOB_SCALE < 150 and GLOB_SCALE >= 75 then gs_detlevel_2d_m = 100	if GLOB_SCALE < 75 then gs_detlevel_2d_m = 50endif! --- setting center of door ---add2 (leftSide_X + rightSide_X) / 2, 0add2 0, AC_ClampWidth / 2 + offsetPanelif (gs_optype_m = OPTYPE_SIDEHUNGMIRRORED | gs_optype_m = OPTYPE_TILTTURNMIRRORED) exor abs(gs_updirection - 180) < EPS then mul2 -1, 1! --- defining dimensions ---frameLeftIn		= -doorWidth / 2 + frameWidth + adapterWidth * (iFrameType = 2)frameRightIn	=  doorWidth / 2 - frameWidth - adapterWidth * (iFrameType = 2)frameLeftOut	= -doorWidth / 2 + adapterWidth * (iFrameType = 2)	! adapterframeRightOut	=  doorWidth / 2 - adapterWidth * (iFrameType = 2)	! adapterif gs_opening_dir_m = OPDIR_IN then	frameInside = offsetGlass - recessThkelse	frameInside = offsetGlass - sashThk - (frameThk - recessThk)endifframeOutside = frameInside + frameThkadapterOutside	= max (0, frameOutside)adapterInside	= adapterOutside - adapterThk! --- drawing symbol ---! --- 1:200 ---if gs_detlevel_2d_m = 200 then	pen penFrame	line2 -doorWidth / 2,    0, frameLeftIn,  0	line2  frameRightIn,  0, doorWidth / 2,   0	if bTreshold then		pen penThreshold		line2  frameLeftIn,   0, frameRightIn,   0	endifendif! --- 1:100 ---if gs_detlevel_2d_m = 100 then	if bTreshold then		pen penThreshold		fill fillThreshold		poly2_b 5, 1+2+4+64, fillPenThreshold, fillPenBgThreshold,				 frameLeftIn,	frameOutside,	1,				 frameRightIn,	frameOutside,	0,				 frameRightIn,	frameInside,	1,				 frameLeftIn,	frameInside,	0,				 frameLeftIn,	frameOutside,	-1	endif	pen penFrame	fill fillFrame	poly2_b 4, 1+2+4+32, fillPenFrame, fillPenBgFrame,				frameLeftOut,	frameOutside,	1,				frameLeftIn,	frameOutside,	1,				frameLeftIn,	frameInside,	1,				frameLeftOut,	frameInside,	1	poly2_b 4, 1+2+4+32, fillPenFrame, fillPenBgFrame,				 frameRightOut,	frameOutside,	1,				 frameRightIn,	frameOutside,	1,				 frameRightIn,	frameInside,	1,				 frameRightOut,	frameInside,	1	if iFrameType = 2 then		! adapter		poly2_b 4, 1+2+4+32, fillPenFrame, fillPenBgFrame,				-doorWidth / 2,		adapterOutside,		1,				 frameLeftOut,		adapterOutside,		1,				 frameLeftOut,		adapterInside,		1,				-doorWidth / 2,		adapterInside,		1		poly2_b 4, 1+2+4+32, fillPenFrame, fillPenBgFrame,				 doorWidth / 2,		adapterOutside,		1,				 frameRightOut,		adapterOutside,		1,				 frameRightOut,		adapterInside,		1,				 doorWidth / 2,		adapterInside,		1	endifendif! --- 1:50 ---if  gs_detlevel_2d_m = 50 then	pen penFrame	fill fillFrame	if iFrameType = 2 then		! adapter		poly2_b 4, 1+2+4+32, fillPenFrame, fillPenBgFrame,				-doorWidth / 2,		adapterOutside,	1,				 frameLeftOut,		adapterOutside,	1,				 frameLeftOut,		adapterInside,	1,				-doorWidth / 2,		adapterInside,	1		poly2_b 4, 1+2+4+32, fillPenFrame, fillPenBgFrame,				 doorWidth / 2,		adapterOutside,	1,				 frameRightOut,		adapterOutside,	1,				 frameRightOut,		adapterInside,	1,				 doorWidth / 2,		adapterInside,	1	endif	if gs_opening_dir_m = OPDIR_IN then		poly2_b 6, 1+2+4+32, fillPenFrame, fillPenBgFrame,				frameLeftOut,					frameOutside,			1,				frameLeftIn,					frameOutside,			1,				frameLeftIn,					offsetGlass,			1,				frameLeftIn - recessWidth,		offsetGlass,			1,				frameLeftIn - recessWidth,		frameInside,			1,				frameLeftOut,					frameInside,			1		poly2_b 6, 1+2+4+32, fillPenFrame, fillPenBgFrame,				frameRightOut,					frameOutside,			1,				frameRightIn,					frameOutside,			1,				frameRightIn,					offsetGlass,			1,				frameRightIn + recessWidth,		offsetGlass,			1,				frameRightIn + recessWidth, 	frameInside,			1,				frameRightOut,					frameInside,			1	else		poly2_b 6, 1+2+4+32, fillPenFrame, fillPenBgFrame,				frameLeftOut,					frameInside,			1,				frameLeftIn,					frameInside,			1,				frameLeftIn,					offsetGlass - sashThk,	1,				frameLeftIn - recessWidth,		offsetGlass - sashThk,	1,				frameLeftIn - recessWidth,		frameOutside,			1,				frameLeftOut,					frameOutside,			1		poly2_b 6, 1+2+4+32, fillPenFrame, fillPenBgFrame,				frameRightOut,					frameInside,			1,				frameRightIn,					frameInside,			1,				frameRightIn,					offsetGlass - sashThk,	1,				frameRightIn + recessWidth,		offsetGlass - sashThk,	1,				frameRightIn + recessWidth, 	frameOutside,			1,				frameRightOut,					frameOutside,			1	endif	if bTreshold then		pen penThreshold		fill fillThreshold		poly2_b 5, 1+2+4+64, fillPenThreshold, fillPenBgThreshold,				 frameLeftIn,	offsetGlass,			1,				 frameRightIn,	offsetGlass,			0,				 frameRightIn,	offsetGlass - sashThk,	1,				 frameLeftIn,	offsetGlass - sashThk,	0,				 frameLeftIn,	offsetGlass,			-1	endifendif! --- Swing ---if gs_opening_dir_m = OPDIR_IN then	add2 0, (offsetGlass - recessThk) * (gs_detlevel_2d_m <> 200)	mul2 1, -1else	add2 0, offsetGlass - sashThk + recessThkendifrrr = doorWidth - 2 * frameWidth + 2 * recessWidth *  (gs_detlevel_2d_m = 50) - 2 * adapterWidth * (iFrameType = 2)add2 -rrr/2, 0pen penSashif gs_detlevel_2d_m <> 50 then	line2 0, 0, rrr * cos (opAngle_2d), rrr * sin (opAngle_2d)else	rot2 opAngle_2d	fill fillSash	poly2_b 4, 1+2+4+32, fillPenSash, fillPenBgSash,				 0,  	0, 1,				 rrr,  	0, 1,				 rrr, 	-sashThk, 1,				 0, 	-sashThk, 1	del 1endif! =============================================================================! Request Globals for Opening Lines and Hotspots! =============================================================================gs_opLinePen			= 1gs_iSwingType			= 1gs_swingLineType		= 1bShowAddHotspots		= 0bShowAddHotspotsForIS	= 0call "OpeningOptions" parameters	bWindow				= 0,									bOverride_MVO_2D	= bOverride_MVO_2D,									or_opLinePen		= or_opLinePen,									or_iSwingType		= or_iSwingType,									or_swingLineType	= or_swingLineType,									bEnableSecondaryOpLineTypes = 0,						returned_parameters dummy,											gs_opLinePen,											gs_iSwingType,											gs_swingLineType,											dummy,											bShowAddHotspots,											bShowAddHotspotsForISpen gs_opLinePenline_type gs_swingLineType!if gs_iSwingType = 2 then!	line2 rrr, 0, rrr * cos (opAngle_2d), rrr * sin (opAngle_2d)!else!	arc2 0, 0, rrr, 0, opAngle_2d!endifend