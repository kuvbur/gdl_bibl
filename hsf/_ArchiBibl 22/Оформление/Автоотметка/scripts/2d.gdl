PAPER_TO_MODEL = GLOB_SCALE / 1000DEFINE STYLE{2} "razm" AC_TextFont_1, AC_TextSize_1, 0add2  -LABEL_POSITION[1][1]*folow_x,-LABEL_POSITION [1][2]if folow_x then	HOTSPOT2 0, 0, unID, xall, 1+128: unID=unID+1	HOTSPOT2  xall, 0, unID, xall,     2: unID=unID+1	HOTSPOT2 -1, 0, unID, xall,     3: unID=unID+1	add2 xall,0endifdict macro_otm_dictmacro_otm_dict.dlin_vin = 0macro_otm_dict.h_polki = 0macro_otm_dict.dlin_polki = 0macro_otm_dict.Shrift = AC_TextFont_1macro_otm_dict.Shrift_razm = AC_TextSize_1macro_otm_dict.Shrift_tip = 0gosub "getBPropertyValue"!gosub "getPropertyValue"for j=1 to vardim1(label_otm_num)	HOTSPOT2 0, label_otm_num[j], unID, x[j], 1+128: unID=unID+1	HOTSPOT2  x[j], label_otm_num[j], unID, x[j],     2: unID=unID+1	HOTSPOT2 -1, label_otm_num[j], unID, x[j],     3: unID=unID+1	macro_otm_dict.otm[1].vn = label_otm_num[j]	macro_otm_dict.sx = x[j] : macro_otm_dict.sy = label_otm_num[j]	call 'macro_otm' parameters macro_otm_usedict = 1, macro_otm_dict = macro_otm_dictnext jend"getBPropertyValue":	propInputIds.propertyIds[1].id = tpropid[propname]	n = REQUEST ( "Property_Values_Of_Parent", propInputIds, propOutputVals)	if n>EPS and haskey(propOutputVals.propertyValues) then		for k=1 to vardim1(propOutputVals.propertyValues)			if (propOutputVals.propertyValues[k].value_status = 1) then				_typeValue = propOutputVals.propertyValues[k].type				koeff = 1				if _typeValue = 2 then koeff = 1000				if _typeValue = 3 then koeff = 1000				if _typeValue = 4 then koeff = 0				if _typeValue = 5 then koeff = 1000				if _typeValue = 6 then koeff = 1000				if _typeValue = 7 then koeff = 1000				if _typeValue = 8 then koeff = 1000				_value = 0				for j = 1 to vardim1(propOutputVals.propertyValues[k].value)					var = propOutputVals.propertyValues[k].value[j]					if vartype(var) = 1 then var = var * koeff					gosub "addotm"				next j			endif		next k	endifreturn"getPropertyValue":	if strlen(paramname)=0 then paramname = "AutoLevel"	param_name_str_old = STRTOLOWER(paramname)	flag_find = 0	_stPropertyValue = ""	dim	parentPropertiesArray[]	n = request ("Properties_Of_Parent", "", parentPropertiesArray)	for i=1 to vardim1(parentPropertiesArray) step 4		if i+3<=vardim1(parentPropertiesArray) then			PropertyName = parentPropertiesArray[i+3]			id = parentPropertiesArray[i]			if param_name_str_old = STRTOLOWER(PropertyName) or param_name_str_old = STRTOLOWER(id) then				propInputIds.propertyIds[1].id = id				if HASKEY(propOutputVals.propertyValues) then t = REMOVEKEY(propOutputVals.propertyValues)				n = REQUEST ("Property_Values_Of_Parent", propInputIds, propOutputVals)				if HASKEY(propOutputVals.propertyValues) then					if propOutputVals.propertyValues[1].value_status = 1 then						_typeValue = propOutputVals.propertyValues[1].type						_value = 0						for j = 1 to vardim1(propOutputVals.propertyValues[1].value)							_value = propOutputVals.propertyValues[1].value[j]							if vartype(_value)=2 then								if strlen(_value)>0 and _value<>" " then									flag_find = 1									if j > 1 then										_stPropertyValue = _stPropertyValue + ";" + _value									else										_stPropertyValue = _value									endif								endif							endif						next j					endif				endif				if HASKEY(propInputIds.propertyIds) then t = REMOVEKEY(propInputIds.propertyIds)				i = vardim1(parentPropertiesArray)			endif		endif	next i	if flag_find then		!Удаляем пробелы		if STRSTR(_stPropertyValue, " ")>EPS then			mrc_newChar = "" : mrc_charToReplace = " " : mrc_in_str = _stPropertyValue			call "macro_replace_char" parameters mrc_in_str=mrc_in_str,										mrc_charToReplace=mrc_charToReplace,										mrc_newChar = mrc_newChar,										RETURNED_PARAMETERS mrc_out_str			_stPropertyValue = mrc_out_str		endif		if STRSTR(_stPropertyValue, " ")>EPS then			mrc_newChar = "" : mrc_charToReplace = " " : mrc_in_str = _stPropertyValue			call "macro_replace_char" parameters mrc_in_str=mrc_in_str,										mrc_charToReplace=mrc_charToReplace,										mrc_newChar = mrc_newChar,										RETURNED_PARAMETERS mrc_out_str			_stPropertyValue = mrc_out_str		endif		dim mss_out_array[] : mss_delim_char = ";" : mss_in_str = _stPropertyValue		call "macro_split_string" parameters mss_in_str=mss_in_str,									mss_delim_char=mss_delim_char,									RETURNED_PARAMETERS mss_out_array		j = vardim1(label_otm_num)*is_call+1		for i=1 to vardim1(mss_out_array)			var = mss_out_array[i] : gosub "addotm"		next i	endifreturn"addotm":	flag_status = 1	if vartype(var) = 2 then		num = 0 : n = 0		n = SPLIT (var, "%n", num)		if n<EPS then flag_status = 0	else		num = var	endif	num = num / 1000	if abs(num)<RoundValue then num = 0	flag_ex = 1	for k=1 to vardim1(label_otm_num)		if abs(label_otm_num[k] - num)<RoundValue then			flag_ex = 0			k=vardim1(label_otm_num)		endif	next k	if flag_ex = 1 then		label_otm_num[j] = num		j = j + 1	endifreturn"get_block":	width_factor = 1	charspace_factor = 1	if vartype(tblockname)<>2 then tblockname = "emp"	if vartype(txtv)<>2 then txtv = str("%.0",txtv)	paragraph tblockname+"p" 2,			0, 0, 0,			1			style name_style			txtv	endparagraph	TEXTBLOCK tblockname 0, razm_anc, 0, width_factor, charspace_factor, 1,tblockname+"p"	width = Shrift_razm : height = Shrift_razm	n = REQUEST("TEXTBLOCK_INFO", tblockname, width, height)	tbwidth = width * PAPER_TO_MODEL	tbheight = height * PAPER_TO_MODEL	sss=request("Height_of_style", name_style, height, descent, leading)	dx_txt = (height/2-descent-leading-Shrift_razm/2)*PAPER_TO_MODELreturn