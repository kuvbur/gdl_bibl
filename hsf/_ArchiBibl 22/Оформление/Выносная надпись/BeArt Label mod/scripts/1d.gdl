!!!EPS = 0.0001dbg=0start_px = 0.1 : start_py = 0.1max_ins = 20ignore_id = "!"iTypeTextRotation = 1dim param_name_out[] : param_name_out[1]="!!"dim param_temp_out[] : param_temp_out[1]="!!"dim text_w[] : text_w[1] = ""dim text_r[] : text_r[1] = ""dim text_emp[] : text_emp[1]=""dim skinThktxtarr[] : skinThktxtarr[1]=""param_name_str = ""unit_name_str = ""tskinThktxt = ""unstr = ""Unit = ""name_prof_i=0ld=''var=""second_str=""inxpar = 1dim str_txt[][]for i=1 to vardim1(param_otobr)	str_txt[i][1]=""	str_txt[i][2]=""next iif vardim1(txt_ins_after)<>max_ins or vartype(txt_ins_after[1][1])=1 then	dim emp_num[]	dim emp_txt[][2]	for i=1 to max_ins		emp_num[i]=0		emp_txt[i][1]="%sFill% %thk%"		emp_txt[i][2]=""	next i	parameters txt_ins_after=emp_txt,i_ins_after=emp_num, fil_ins_after=emp_num, use_fil=emp_num, reset_format=0endif!!!! ОТЛКЛЮЧИТЬ!!!thk_suffix = " "unID=0dim ttype_view[]dim itype_view[] : i=0i=i+1 : itype_view[i]=0 : ttype_view[i] = "План"i=i+1 : itype_view[i]=1 : ttype_view[i] = "Разрез по X (вдоль буквенных)"i=i+1 : itype_view[i]=2 : ttype_view[i] = "Разрез по Y (вдоль цифровых)"i=i+1 : itype_view[i]=3 : ttype_view[i] = "Свободный"dim ttype_shrift_tip[]dim itype_shrift_tip[] : i=0i=i+1 : itype_shrift_tip[i]=0 : ttype_shrift_tip[i] = "Как в вноске"i=i+1 : itype_shrift_tip[i]=1 : ttype_shrift_tip[i] = "Обычный"i=i+1 : itype_shrift_tip[i]=2 : ttype_shrift_tip[i] = "Жирный(Ж)"i=i+1 : itype_shrift_tip[i]=3 : ttype_shrift_tip[i] = "Курсив(К)"i=i+1 : itype_shrift_tip[i]=4 : ttype_shrift_tip[i] = "Подчеркнутый(П)"i=i+1 : itype_shrift_tip[i]=5 : ttype_shrift_tip[i] = "Ж+К"i=i+1 : itype_shrift_tip[i]=6 : ttype_shrift_tip[i] = "Ж+П"i=i+1 : itype_shrift_tip[i]=7 : ttype_shrift_tip[i] = "К+П"i=i+1 : itype_shrift_tip[i]=8 : ttype_shrift_tip[i] = "Ж+К+П"dim out_var[][] : i=0i=i+1 : out_var[i][1] = "mid" : out_var[i][2] = "Мат.ИД" i=i+1 : out_var[i][1] = "msurf" : out_var[i][2] = "Мат.Поверхность" i=i+1 : out_var[i][1] = "mdesc" : out_var[i][2] = "Мат.Описание" i=i+1 : out_var[i][1] = "mman" : out_var[i][2] = "Мат.Производитель" i=i+1 : out_var[i][1] = "mname"	 : out_var[i][2] = "Мат.Имя" i=i+1 : out_var[i][1] = "mden" : out_var[i][2] = "Мат. плотность" i=i+1 : out_var[i][1] = "mFill" : out_var[i][2] = "Мат.ШтрихСечения"i=i+1 : out_var[i][1] = "fFill" : out_var[i][2] = "Мат.ШтрихПоверхности"i=i+1 : out_var[i][1] = "sFill" : out_var[i][2] = "ШтрихСечения"i=i+1 : out_var[i][1] = "thk" : out_var[i][2] = "ТолщинаСлоя"i=i+1 : out_var[i][1] = "n" : out_var[i][2] = "НомерСтроки"i=i+1 : out_var[i][1] = "dtxt" : out_var[i][2] = "ДопТекст"i=i+1 : out_var[i][1] = "id" : out_var[i][2] = "ИдЭлемента"i=i+1 : out_var[i][1] = "m_id" : out_var[i][2] = "ИдМодуля"i=i+1 : out_var[i][1] = "f_id" : out_var[i][2] = "ИдПолный"dim out_var_n[] : dim out_var_temp[]for i=1 to vardim1(out_var)+1	out_var_n[i]=""	if i<=vardim1(out_var) then out_var_temp[i] = "%"+out_var[i][1]+"%"next i_LABEL_TEXT_ALIGN = 0_LABEL_CUSTOM_ARROW = 0aversion = 0 : aname =  "" : name =  ""if GLOB_SCRIPT_TYPE = 2 then	n = REQUEST ("ASSOCLP_NAME", "", name)	n = REQUEST ("program_info", "", aname, aversion)	if aversion+EPS>21 then		LABEL_ALWAYS_READABLE = AC_bLabelAlwaysReadable		_LABEL_TEXT_WRAP = AC_bLabelTextWrap		_LABEL_TEXT_BG_PEN = AC_bLabelOpaqueFill*AC_LabelTextBgrPen		_LABEL_FRAME_ON = AC_bLabelFrame		_LABEL_FRAME_OFFSET = AC_LabelFrameOffset		_LABEL_ARROW_PEN = AC_LabelPointerPen		_LABEL_ARROW_LINETYPE = AC_LabelPointerLineType		_LABEL_ANCHOR_POS = AC_LabelPointerConnection		_LABEL_TEXT_ALIGN = AC_TextAlignment_1		_LABEL_TEXT_PEN = AC_TextPen_1		_LABEL_CUSTOM_ARROW = not(LABEL_HAS_POINTER)		_LABEL_FONT_NAME = AC_TextFont_1		_LABEL_TEXT_SIZE = AC_TextSize_1		_LABEL_FONT_STYLE = AC_TextStyle_1	else		_LABEL_FRAME_ON = LABEL_FRAME_ON		_LABEL_FRAME_OFFSET = LABEL_FRAME_OFFSET		_LABEL_TEXT_WRAP = LABEL_TEXT_WRAP		_LABEL_TEXT_BG_PEN = LABEL_TEXT_BG_PEN		_LABEL_ARROW_PEN = LABEL_ARROW_PEN		_LABEL_ANCHOR_POS = LABEL_ANCHOR_POS		_LABEL_TEXT_ALIGN = LABEL_TEXT_ALIGN		_LABEL_TEXT_PEN = LABEL_TEXT_PEN		_LABEL_CUSTOM_ARROW = LABEL_CUSTOM_ARROW		_LABEL_FONT_NAME = LABEL_FONT_NAME		_LABEL_TEXT_SIZE = LABEL_TEXT_SIZE		_LABEL_FONT_STYLE = _LABEL_FONT_STYLE	endif	if _LABEL_CUSTOM_ARROW=0 then		autod = 1	else		if _LABEL_TEXT_WRAP then			autod = 0		else			autod = 1		endif	endif!	if _LABEL_TEXT_BG_PEN<1 or _LABEL_TEXT_BG_PEN>255 then _LABEL_TEXT_BG_PEN=0!	if _LABEL_ARROW_PEN<1 or _LABEL_ARROW_PEN>255 then _LABEL_ARROW_PEN=1!	if _LABEL_TEXT_PEN<1 or _LABEL_TEXT_PEN>255 then _LABEL_TEXT_PEN=1endifif STRSTR(unittype,"Из глобальных настроек")>0 then	rr = REQUEST ("Linear_dimension", "",ld)else	if unittype = ".0mm" or unittype = "В мм" then		ld = "%.1mm"	else		ld = "%"+unittype	endifendifif GLOB_MODPAR_NAME="tx" or GLOB_MODPAR_NAME="ty" then	AngleT = 0	if tx>EPS and ty>EPS then AngleT=ATN(ty/tx)	if tx>EPS and ty<EPS then AngleT=ATN(ty/tx)+360	if tx<EPS and abs(tx)>EPS then AngleT=ATN(ty/tx)+180	if abs(tx)<EPS and ty>EPS then AngleT=90	if abs(tx)<EPS and ty<EPS then AngleT=270	AngleT=AngleT-90	if AngleT+90>90 and AngleT+90<180 and PosA>0 then PosA =PosA * (-1)	if AngleT+90>0 and AngleT+90<90 and PosA<0 then PosA =PosA * (-1)	if AngleT+90>180 and AngleT+90<270 and PosA>0 then PosA =PosA * (-1)	if AngleT+90>270 and AngleT+90<360 and PosA<0 then PosA =PosA * (-1)	parameters PosA = PosAendiftotal_thk = 0show_prof = 0If STRSTR(gs_style,"1") then gs_style_m=1If STRSTR(gs_style,"2") then gs_style_m=2If STRSTR(gs_style,"3") then gs_style_m=3If STRSTR(gs_style,"4") then gs_style_m=4If STRSTR(gs_style,"5") then gs_style_m=5If STRSTR(gs_style,"6") then gs_style_m=6If STRSTR(gs_style,"7") then gs_style_m=7anchor=5If _LABEL_CUSTOM_ARROW Then	anchor=5	if _LABEL_TEXT_ALIGN =4 then		anchor = 7 * (PosA>0) + 9 * (PosA<0)!		if flag = 1 then anchor = 4 * (PosA>0) + 6 * (PosA<0)	else		IF _LABEL_TEXT_ALIGN =1 Then anchor=7		IF _LABEL_TEXT_ALIGN =2 Then anchor=8		IF _LABEL_TEXT_ALIGN =3 Then anchor=9!		if flag = 1 then anchor = 4 * (PosA>0) + 6 * (PosA<0)	endifelse	IF _LABEL_TEXT_ALIGN =1 Then anchor=4	IF _LABEL_TEXT_ALIGN =2 Then anchor=5	IF _LABEL_TEXT_ALIGN =3 Then anchor=6	IF _LABEL_TEXT_ALIGN =4 Then anchor=5endifif _LABEL_TEXT_ALIGN=2 or _LABEL_TEXT_ALIGN=4 then thk_alg=0!<-------------------- Получаем ID -------------------------gl_id="" : full_id="" : master_id = ""n = REQUEST ("Full_ID_of_parent", "", master_id)!Удаляем пробелы в начале и концеif STRSTR(master_id, " ")>EPS then	mts_in_str = master_id	call "macro_trim_space" parameters mts_in_str=mts_in_str,										RETURNED_PARAMETERS mts_out_str	master_id = mts_out_strendifgl_id=GLOB_IDif vartype(gl_id)=1 then gl_id = str("%.0", gl_id)!Удаляем пробелы в начале и концеif STRSTR(gl_id, " ")>EPS then	mts_in_str = gl_id	call "macro_trim_space" parameters mts_in_str=mts_in_str,										RETURNED_PARAMETERS mts_out_str	gl_id = mts_out_strendifif master_id <> "" then	full_id = master_id + "." + gl_idelse	full_id = gl_idendifif STRSTR(gl_id, ignore_id, 1)>0 then gl_id = ""if STRSTR(full_id, ignore_id, 1)>0 then full_id = ""if STRSTR(master_id, ignore_id, 1)>0 then master_id = ""out_var_n[13] = gl_idout_var_n[14] = master_idout_var_n[15] = full_id!>-------------------- Получаем ID -------------------------if param_name = "Отделка/модель/ядро" then	param_name_t = param_otobr[GLOB_STRUCTURE_DISPLAY+1][2]else	param_name_t = param_nameendif!<---------------- Вытаскиваем данные из аксессуаров -----------pol=0n_sloi=0dim strih[] : strih[1] = 0dim bmatm[] : bmatm[1] = ""dim tolsh[] : tolsh[1] = 0if GLOB_ELEM_TYPE = 1 and param_name = "Откл" then	if (strstr(name,"Пол") <> 0 or strstr(name,"Потолок") <> 0 or strstr(name,"Лестница ЖБ") <> 0) then		pol = 1		dim tolsh_min[10]		dim strih_r[10]		dim tolsh_r[10]		dim tolsh_min_r[10]		if strstr(name,"v2") <> 0 then			ver = 1		else			ver = 0		endif		if strstr(name,"Лестница ЖБ") <> 0 then ver = 1		nd1 = request("Assoclp_parvalue", "n_sloi", namind1, type1, flag1, dim11, dim21, n_sloi)		if ver = 0 then			nd1 = request("Assoclp_parvalue", "sloi_n", namindd1, typed1, flagd1, dim1d1, dim2d1, sloi_n)			parameters sloi_n=sloi_n			j=0			for i=1 to n_sloi*2 step 2				j=j+1				strih[j]=sloi_n[i]				tolsh[j]=sloi_n[i+1]/100			next i			j=j+1			strih[j]=sloi_n[15]			tolsh[j]=sloi_n[16]/100			parameters strih = strih, tolsh = tolsh		else			nd1 = request("Assoclp_parvalue", "strih", namindd1, typed1, flagd1, dim1d1, dim2d1, strih_r)			nd1 = request("Assoclp_parvalue", "tolsh", namindd1, typed1, flagd1, dim1d1, dim2d1, tolsh_r)			nd1 = request("Assoclp_parvalue", "tolsh_min", namindd1, typed1, flagd1, dim1d1, dim2d1, tolsh_min_r)			j=0			for i=1 to n_sloi+1				strih[i]=strih_r[i]				tolsh[i]=tolsh_r[i]				tolsh_min[i]=tolsh_min_r[i] 			next i		endif		parameters strih = strih, tolsh = tolsh, tolsh_min = tolsh_min		if n_sloi > 0 then PARAMETERS vin = 0	endifendif!>---------------- Вытаскиваем данные из аксессуаров -----------!!<---------------- Вытаскиваем данные из сэндвич-панели -----------sand = 0if GLOB_ELEM_TYPE = 15 and param_name = "Откл" then	ac_thickness = 0	panelBMat = 0	if GLOB_ELEM_TYPE = 15 then		nd1 = request("Assoclp_parvalue", "ac_thickness", namindd1, typed1, flagd1, dim1d1, dim2d1, ac_thickness)		nd2 = request("Assoclp_parvalue", "panelBMat", namindd1, typed1, flagd1, dim1d1, dim2d1, panelBMat)		if nd1<1 or ac_thickness < EPS then ac_thickness = CWPANEL_THICKNESS		if nd2<1 or panelBMat < EPS then panelBMat = CWPANEL_MAT_CUT		panelBMatname = "" : n = REQUEST ("Name_of_building_material", panelBMat, panelBMatname)		n = REQUEST{2}("Building_Material_info", panelBMatname, "gs_bmat_cutFill_properties", bmat_Fill_prop)		if ac_thickness>EPS and panelBMat>EPS then 			n_sloi=1			strih[1] = bmat_Fill_prop			bmatm[1] = panelBMatname			tolsh[1] = ac_thickness			sand = 1		endif	endif	if n_sloi > 0 then vin = 0endif!>---------------- Вытаскиваем данные из сэндвич-панели -----------!<---------------- Выноска с параметрами -----------------------if param_name = "Отделка/модель/ядро" or param_name = "Параметры" then	334:	if param_name = "Отделка/модель/ядро" then		if inxpar<=vardim1(param_otobr) then			par_fist_str=param_otobr[inxpar][2]			par_sec_str=param_otobr[inxpar][3]		else			goto 335		endif	endif	nd1 = request("Assoclp_parvalue", "param_name_out", namindd1, typed1, flagd1, dim1d1, dim2d1, param_name_out)	nd1 = request("Assoclp_parvalue", "param_temp_out", namindd1, typed1, flagd1, dim1d1, dim2d1, param_temp_out)	dim par_str_arr_t[] : i=0	i=i+1 : par_str_arr_t[i]="%qty_v%"	i=i+1 : par_str_arr_t[i]="%id%"	i=i+1 : par_str_arr_t[i]="%m_id%"	i=i+1 : par_str_arr_t[i]="%f_id%"	for j=1 to vardim1(param_temp_out)		i=i+1		par_str_arr_t[i]=param_temp_out[j]	next j	if strstr(param_name_out[1],"!!Профиль",0)>0 and strstr(param_name_out[1],"Лист",0)=0 then		nd1 = request("Assoclp_parvalue", "name_prof_i", namindd1, typed1, flagd1, dim1d1, dim2d1, name_prof_i)	else		pr1 = strstr(name,"Двутавр") <> 0		pr2 = strstr(name,"Квадратнопрямоуг") <> 0		pr3 = strstr(name,"Круглая труба") <> 0		pr4 = strstr(name,"Ручник") <> 0		pr5 = strstr(name,"голок") <> 0		pr6 = strstr(name,"Швеллер") <> 0		prof = pr1 + pr2 + pr3 + pr4 + pr5 + pr6	endif	txt_vin = ""	PARAMETERS par_str_arr = par_str_arr_t	mgp_out_str = ""	if GLOB_ELEM_TYPE<>0 then		call "macro_get_param" parameters mgp_in_str=par_fist_str,											mgp_prim1=par_prim1,											mgp_prim2=par_prim2,											mgp_prim3=par_prim3,											mgp_prim4=par_prim4,											mgp_prim5=par_prim5,											mgp_qty=n_str_px*_LABEL_CUSTOM_ARROW,											mgp_ld=ld, mgp_ignore_id=ignore_id, RETURNED_PARAMETERS mgp_out_str	else		mgp_out_str = par_fist_str	endif	txt_vin = mgp_out_str	mgp_out_str = ""	if GLOB_ELEM_TYPE<>0 then		call "macro_get_param" parameters mgp_in_str=par_sec_str,											mgp_prim1=par_prim1,											mgp_prim2=par_prim2,											mgp_prim3=par_prim3,											mgp_prim4=par_prim4,											mgp_prim5=par_prim5,											mgp_qty=n_str_px*_LABEL_CUSTOM_ARROW,											mgp_ld=ld, mgp_ignore_id=ignore_id, RETURNED_PARAMETERS mgp_out_str	else		mgp_out_str = par_sec_str	endif	second_str = mgp_out_str	if vartype(txt_vin)=1 then txt_vin=""	if vartype(second_str)=1 then second_str=""	if inxpar=1 or vin=0 then		PARAMETERS par_fist_str_out = txt_vin		PARAMETERS par_sec_str_out = second_str 		PARAMETERS vin = 1	endifendif!>---------------- Выноска с параметрами -----------------------!<---------- Выноска с составом конструкций --------------------dim kol_vo_str[]if vin = 0 then	SkiN=WALL_SKINS_NUMBER*(GLOB_ELEM_TYPE=5)+\	SLAB_SKINS_NUMBER*(GLOB_ELEM_TYPE=7)+\	ROOF_SKINS_NUMBER*(GLOB_ELEM_TYPE=8)+(n_sloi+1)*(pol=1)+(GLOB_ELEM_TYPE=18)*SHELLBASE_SKINS_NUMBER + 1*(sand=1)else	SkiN=0endifif GLOB_ELEM_TYPE=0 and SkiN=0 then SkiN=-1if not(vin) then	if strlen(add_param)>EPS and add_param<>"Нет" and GLOB_ELEM_TYPE<>0 then		call "macro_get_param" parameters mgp_in_str=add_param,											mgp_prim1=par_prim1,											mgp_prim2=par_prim2,											mgp_prim3=par_prim3,											mgp_prim4=par_prim4,											mgp_prim5=par_prim5,											mgp_qty=n_str_px*_LABEL_CUSTOM_ARROW,											mgp_ld=ld, mgp_ignore_id=ignore_id, RETURNED_PARAMETERS mgp_out_str		add_param = mgp_out_str	else		add_param = ""	endif	flag_ins_aft=0	flag_ins_bef=0	dim ch_row[][] : n_cha = 0 : n_chd = 0	for mm=1 to max_ins		if i_ins_after[mm]>(SkiN+(SkiN<=0)) then flag_ins_aft=flag_ins_aft+1		if i_ins_after[mm]<0 then flag_ins_bef=flag_ins_bef+1		if STRSTR(txt_ins_after[mm][1], "-*")<2 and STRSTR(txt_ins_after[mm][1], "-*")>0 and i_ins_after[mm]<>0 then 			n_chd = n_chd + 1			ch_row[n_chd][1]=i_ins_after[mm]		endif		if STRSTR(txt_ins_after[mm][1], "+*")<2 and STRSTR(txt_ins_after[mm][1], "+*")>0 and i_ins_after[mm]<>0 then 			n_cha = n_cha + 1			ch_row[n_cha][2]=i_ins_after[mm]		endif	next mm	if flag_ins_aft>0 or flag_ins_bef>0 then		dim arr_sort[]		arr_sort = i_ins_after : gosub "array_num_sorty"		for mm=1 to max_ins			if i_ins_after[mm]<0 or i_ins_after[mm]>(SkiN+(SkiN<=0)) then				inx_sort = 0				for kk=1 to max_ins					if arr_sort[kk] = i_ins_after[mm] then						inx_sort = kk						kk = max_ins					endif				next kk				if i_ins_after[mm]<0 then					i_ins_after[mm] = -inx_sort				else					if i_ins_after[mm]>(SkiN+(SkiN<=0)) then						i_ins_after[mm] = SkiN+(SkiN<=0)+inx_sort					endif				endif			endif		next mm	endif	if flag_ins_aft>0 then		tinx = SkiN+(SkiN<=0)		for mm=1 to max_ins			if i_ins_after[mm]>(SkiN+flag_ins_bef+(SkiN<=0)) then				tinx = tinx + 1				i_ins_after[mm] = tinx			endif		next mm	endif	SkinBegin = 1	SkinFinish = SkiN+flag_ins_aft+flag_ins_bef+(SkiN<=0)	St=1	n_rec = 0	dob_th=0	old_string = "" : old_thk = 0 : old_thktxt = "" : thk_unit = ""	!!! - Отключение нумерации для одного слоя	if abs(SkinBegin - SkinFinish)<EPS then isnum = "Откл"	for i = SkinBegin to SkinFinish step St		isShow = -1		if i>flag_ins_bef and i<=(SkiN+flag_ins_bef+(SkiN<=0)) then			mun_txt=0			dob_th = 0			dob_txt = ""			matName = "-"			if SkiN=0 then				SkinPar=WALL_FILL*(GLOB_ELEM_TYPE=5)+SLAB_FILL*(GLOB_ELEM_TYPE=7)+\						ROOF_FILL*(GLOB_ELEM_TYPE=8)+(GLOB_ELEM_TYPE=18)*SHELLBASE_FILL+(GLOB_ELEM_TYPE=9)*FILL_FILL+(sand=1)*strih[1]				skinThk =WALL_THICKNESS+SLAB_THICKNESS+ROOF_THICKNESS+SHELLBASE_THICKNESS+(sand=1)*tolsh[1]				matName = SHELLBASE_BMAT_NAME+FILL_BMAT_NAME+SLAB_BMAT_NAME+WALL_BMAT_NAME+ROOF_BMAT_NAME+bmatm[1]			else				if GLOB_ELEM_TYPE=5 then 					SkinPar = WALL_SKINS_PARAMS [i-flag_ins_bef][1]					skinThk = WALL_SKINS_PARAMS [i-flag_ins_bef][2]					matName = WALL_SKINS_BMAT_NAMES [i-flag_ins_bef][1]					isShow = WALL_SKINS_PARAMS [i-flag_ins_bef][6]				endif				if GLOB_ELEM_TYPE=7 then 					SkinPar = SLAB_SKINS_PARAMS [i-flag_ins_bef][1]					skinThk = SLAB_SKINS_PARAMS [i-flag_ins_bef][2]					matName = SLAB_SKINS_BMAT_NAMES [i-flag_ins_bef][1]					isShow = SLAB_SKINS_PARAMS [i-flag_ins_bef][6]				endif				if GLOB_ELEM_TYPE=8 then					SkinPar = ROOF_SKINS_PARAMS [i-flag_ins_bef][1]					skinThk = ROOF_SKINS_PARAMS [i-flag_ins_bef][2]					matName = ROOF_SKINS_BMAT_NAMES [i-flag_ins_bef][1]					isShow = ROOF_SKINS_PARAMS [i-flag_ins_bef][6]				endif				if GLOB_ELEM_TYPE=18 then					SkinPar = SHELLBASE_SKINS_PARAMS [i-flag_ins_bef][1]					skinThk = SHELLBASE_SKINS_PARAMS [i-flag_ins_bef][2]					matName = SHELLBASE_SKINS_BMAT_NAMES [i-flag_ins_bef][1]					isShow = SHELLBASE_SKINS_PARAMS [i-flag_ins_bef][6]				endif				if GLOB_ELEM_TYPE=1 and pol=1 then					SkinPar = strih[i-flag_ins_bef]					skinThk = tolsh[i-flag_ins_bef]					if tolsh_min[i-flag_ins_bef]>0 then						dob_th = min(tolsh[i-flag_ins_bef],tolsh_min[i-flag_ins_bef])						skinThk = max(tolsh[i-flag_ins_bef],tolsh_min[i-flag_ins_bef])					endif				endif				if sand=1 then					SkinPar = strih[i-flag_ins_bef]					skinThk = tolsh[i-flag_ins_bef]					matName = bmatm[i-flag_ins_bef]					isShow = 1				endif			endif			total_thk = total_thk + skinThk			bmat_id="" : bmat_surf="" : bmat_desc="" : bmat_man="" : bmat_Fill="" : mat_Fill="" : skin_Fill=""			n = REQUEST{2}("Building_Material_info", matName, "gs_bmat_id", bmat_id)			n = REQUEST{2}("Building_Material_info", matName, "gs_bmat_surface", bmat_surf)			n = REQUEST{2}("Building_Material_info", matName, "gs_bmat_description", bmat_desc)						n = REQUEST{2}("Building_Material_info", matName, "gs_bmat_manufacturer", bmat_man)			n = REQUEST{2}("Building_Material_info", matName, "gs_bmat_cutFill_properties", bmat_Fill_prop)			n = REQUEST{2}("Building_Material_info", matName, "gs_bmat_physical_properties", thCond, dens, htCap, embodiedEnergy, embodiedCarbon)			if vartype(bmat_surf)=1 then 				n = REQUEST{2} ("Material_info", bmat_surf, "gs_mat_fill_ind", mat_fill_ind)				n = request("Name_of_fill", mat_fill_ind, mat_Fill)				n = request("Name_of_fill", bmat_Fill_prop, bmat_Fill)			endif			Pos = request("Name_of_fill", SkinPar, skin_Fill)			out_var_n[1] = bmat_id 			out_var_n[2] = bmat_surf 			out_var_n[3] = bmat_desc 			out_var_n[4] = bmat_man			out_var_n[5] = matName			out_var_n[6] = str("%.1",dens)+"кг/куб.м."			out_var_n[7] = bmat_Fill			out_var_n[8] = mat_Fill			out_var_n[9] = skin_Fill			n_str = i-flag_ins_bef		else			mun_txt=1			for kkk=1 to 9				out_var_n[kkk]=""			next kkk			if i<=flag_ins_bef then				n_str = -i			endif			if i>(SkiN+flag_ins_bef+(SkiN<=0)) then				n_str = i-flag_ins_bef			endif		endif		if n_cha>0 then			flag_zap=0			for mm=1 to n_cha				if ch_row[mm][2]=n_str then 					flag_zap=1					mm=n_cha				endif			next mm		else			flag_zap=1			for mm=1 to n_chd				if ch_row[mm][1]=n_str then 					flag_zap=0					mm=n_chd				endif			next mm		endif		if (show_by_type-1)>isShow and isShow<>-1 then goto 22		if ((not(flag_zap) or (skinThk*1000-min_lay_thk)<EPS)) and not(mun_txt) then 			goto 22		else			n_rec = n_rec+1		endif		flag_ins=0		for mm=1 to max_ins			if n_str=i_ins_after[mm] and i_ins_after[mm]<>0 then				flag_ins=mm				mm = max_ins			endif		next mm		if flag_ins>0 then			out_var_n[12] = txt_ins_after[flag_ins][1]			if use_fil[flag_ins] then				n = request("Name_of_fill", fil_ins_after[flag_ins], skin_Fill)				out_var_n[9] = skin_Fill				out_var_n[7] = skin_Fill				out_var_n[8] = skin_Fill			endif		else			out_var_n[12] = ""		endif		skinThktxtarr[n_rec]=""		out_var_n[10] = " "		out_var_n[11] = "**n**"		par_fist_str_t = str_format		if flag_ins>0 then			if STRSTR(str_format, "%dtxt%")>0 and STRSTR(txt_ins_after[flag_ins][1], "*")=1 then 				par_fist_str_t = STRSUB (txt_ins_after[flag_ins][1], 2, STRLEN (txt_ins_after[flag_ins][1])-1)			endif			if mun_txt then 				par_fist_str_t = "%dtxt%"				if STRSTR(isnum,"Откл")=0 and STRSTR(txt_ins_after[flag_ins][1],"%n%")=0 then par_fist_str_t = isnum + " " + par_fist_str_t			endif		endif		if STRSTR(isnum,"Откл")=0 and STRSTR(par_fist_str_t,"%n%")=0 then par_fist_str_t = isnum + " " + par_fist_str_t		npr = 0		43:		n_sh = STRSTR(par_fist_str_t, "%", 1)		if n_sh>0 then			in_str = par_fist_str_t : gosub "get_param_name"			var_param = ""			if STRLEN(param_name_str)>0 then				for kkk=1 to vardim1(out_var)					if out_var[kkk][1]=param_name_str then						var_param = out_var_n[kkk]						kkk=vardim1(out_var)					endif				next kkk				if STRSTR(param_name_str,"thk")>0 then					var_param = skinThk					if mun_txt then var_param = 0				endif				if vartype(var_param)=1 then					if STRLEN(unit_name_str) then 						unstr = "%" + unit_name_str					else						unstr = ld					endif					if STRSTR(param_name_str,"thk")>0 then						thk_unit = unstr						tThk = var_param						gosub "get_thk_txt"						var_param = tskinThktxt						if dob_th>0 then							skinThk = dob_th							gosub "get_thk_txt"							if STRLEN(tskinThktxt)>0 then var_param = tskinThktxt + "..." + var_param						endif					else						var_param = str(unstr, var_param) + Unit					endif					if STRLEN(var_param)>0 then var_param = var_param + Unit					param_name_str = param_name_str + unit_name_str				endif				find_str = "%" + param_name_str + "%"				if STRSTR(param_name_str,"thk")>0 then					if flag_ins>0 then 						if STRSTR(txt_ins_after[flag_ins][2], "*")=1 then							var_param=STRSUB (txt_ins_after[flag_ins][2], 2, STRLEN (txt_ins_after[flag_ins][2]))						else							var_param=txt_ins_after[flag_ins][2]+var_param						endif					endif					if STRLEN(var_param)>0 and var_param<>" " then						skinThktxtarr[n_rec]=thk_prefix+var_param+thk_suffix					endif					replace_str = ""				else					replace_str = var_param				endif				gosub "str_replace"				par_fist_str_t = out_str				npr = npr + 1				if npr<30 then goto 43			endif		endif		if vartype(par_fist_str_t)=2 then			string = par_fist_str_t		else			string = "!!"		endif		var = string : gosub "trim_space_end" : string = var		if old_string = string and old_thk = skinThk and old_thktxt = skinThktxtarr[n_rec] then flag_zap = 0		if not(flag_zap) and merge_eq<>"Не объединять" and n_rec>1 then			n_rec = n_rec-1			n_eq=n_eq+1			old_thk_all = old_thk_all + skinThk			if not(thk_alg) then				in_str = str_txt[n_rec][inxpar] : find_str = skinThktxtarr[n_rec] : replace_str = "" : gosub "str_replace" : str_txt[n_rec][inxpar] = out_str			endif			out_str="" : find_str = "%ns%" : in_str = merge_eq : replace_str = STR("%.0",n_eq) : gosub "str_replace"			unstr = thk_unit			tThk = old_thk_all			!!!Показывать толщину, только если толщина ОДНОГО слоя больше			if (skinThk*1000-min_thk)>EPS then gosub "get_thk_txt"			!!!Показывать толщину, только если толщина СУММЫ слоёв больше			!!gosub "get_thk_txt"			var_param = tskinThktxt+Unit			if flag_ins>0 then 				if STRSTR(txt_ins_after[flag_ins][2], "*")=1 then					var_param=STRSUB (txt_ins_after[flag_ins][2], 2, STRLEN (txt_ins_after[flag_ins][2]))				else					var_param=txt_ins_after[flag_ins][2]+var_param				endif			endif			str_txt[n_rec][inxpar] = string + out_str			if STRLEN(tskinThktxt)>0 and tskinThktxt<>" " then				skinThktxtarr[n_rec]=thk_prefix+var_param+thk_suffix				str_txt[n_rec][inxpar] = string + out_str			else				str_txt[n_rec][inxpar] = string + out_str + str_suffix			endif			goto 22		else			old_string = string			old_thk = skinThk			old_thk_all = skinThk			old_thktxt = skinThktxtarr[n_rec]			n_eq=1		endif		if skinThktxtarr[n_rec]="" then string = string + str_suffix		str_txt[n_rec][inxpar] = string		22:	next ielse	n_rec=2	str_txt[1][inxpar] = txt_vin	str_txt[2][inxpar] = second_strendifif inxpar=1 then StrMax=0for i = 1 to n_rec	if not(vin) then		if chnum then			n_str = n_rec + 1 - i		else			n_str = i		endif		in_str = str_txt[i][inxpar] : find_str = "**n**" : replace_str = STR("%.0",n_str) : gosub "str_replace" : str_txt[i][inxpar] = out_str		in_str = str_txt[i][inxpar] : find_str = "-*" : replace_str = "" : gosub "str_replace" : str_txt[i][inxpar] = out_str		in_str = str_txt[i][inxpar] : find_str = "+*" : replace_str = "" : gosub "str_replace" : str_txt[i][inxpar] = out_str		if thk_alg then			in_str = skinThktxtarr[i]		 	find_str = "." : replace_str = "" : gosub "str_replace"			in_str = out_str : find_str = "," : replace_str = "" : gosub "str_replace"			nspace = ""			for k=1 to strlen(out_str)				nspace = nspace + "@"			next k			str_txt[i][inxpar] = str_txt[i][inxpar] + nspace		else			str_txt[i][inxpar] = str_txt[i][inxpar] + skinThktxtarr[i]			skinThktxtarr[i] = ""		endif	endif	if vartype(str_txt[i][inxpar])=2 then		if STRSTR (str_txt[i][inxpar], "\n") > 0 then			one = STRSUB (str_txt[i][inxpar], 1, STRSTR (string, "\n")-1)			two = STRSUB (str_txt[i][inxpar], strlen(one)+3, STRLEN (str_txt[i][inxpar]) - STRSTR (str_txt[i][inxpar], "\n"))			str_txt[i][inxpar] = one +" "+ two		endif		StrMax = max(StrMax,stw(str_txt[i][inxpar])/1000*GLOB_SCALE)	endif	kol_vo_str[i] = 1next iif param_name = "Отделка/модель/ядро" and inxpar<vardim1(param_otobr) then	inxpar=inxpar+1	goto 334endif335:if PosA=0 Then	if LABEL_POSITION [2][1]>0 THEN PosA =-StrMax 	if LABEL_POSITION [2][1]<0 THEN PosA =StrMaxendifIf bo then	SkinBegin = 1	SkinFinish = n_rec	St=1else	SkinBegin = n_rec	SkinFinish = 1	St=-1endif!<--------- Формирование строки с подсказкой о составе шаблонной строки ---------------str_format_out_t = str_formatnpr = 044:n_sh = STRSTR(str_format_out_t, "%", 1)if n_sh>0 then	in_str = str_format_out_t : gosub "get_param_name"	var_param = ""	if param_name_str <> "" then		for kkk=1 to vardim1(out_var)			if out_var[kkk][1]=param_name_str then 				var_param = out_var[kkk][2]				kkk = vardim1(out_var)			endif		next kkk		find_str = "%" + param_name_str + unit_name_str + "%"		if param_name_str = "thk" then			if STRLEN(unit_name_str)>0 then 				unstr = "%" + unit_name_str			else				unstr = ld			endif			tThk = 0			gosub "get_thk_txt"			var_param = var_param+" (" + Unit + ")"		endif		replace_str = var_param		gosub "str_replace"		str_format_out_t = out_str		npr = npr + 1		if npr<30 then goto 44	endifendifstr_format_out = str_format_out_tparameters str_format_out = str_format_out!>--------- Формирование строки с подсказкой о составе шаблонной строки ---------------goto 20"array_num_sorty":	nel_sort = vardim1(arr_sort)	for j_sort=1 to nel_sort-1		flag_sort = 0		for i_sort=1 to nel_sort-j_sort			if (arr_sort[i_sort]-arr_sort[i_sort+1])>EPS then				ttt = arr_sort[i_sort]				arr_sort[i_sort] = arr_sort[i_sort+1]				arr_sort[i_sort+1] = ttt				flag_sort = 1			endif		next i_sort		if not(flag_sort) then j_sort=nel_sort	next j_sortreturn"trim_space_end":	if vartype(var) = 2 then		!Удаляем пробелы в начале и конце		if STRSTR(var, " ")>EPS then			mts_in_str = var			call "macro_trim_space" parameters mts_in_str=mts_in_str,												RETURNED_PARAMETERS mts_out_str			var = mts_out_str		endif	endifreturn"str_replace":	if vartype(in_str) = 2 and vartype(find_str) = 2 and vartype(replace_str) = 2 then		mrw_in_str = in_str		mrw_wordToReplace = find_str		mrw_newWord = replace_str		call "macro_replace_word" parameters mrw_in_str=mrw_in_str,											mrw_newWord=mrw_newWord,											mrw_wordToReplace = mrw_wordToReplace,											RETURNED_PARAMETERS mrw_out_str		out_str = mrw_out_str	endifreturn"get_param_name":	param_name_str = ""	unit_name_str = ""	start_find = STRSTR(in_str, "%", 1)	if start_find > 0 then		len_in_str = STRLEN (in_str)		chapt_1 = STRSUB(in_str, start_find+1, len_in_str)		start_find_2 = STRSTR(chapt_1, "%", 1)		if start_find_2 > 0 then			param_name_str = STRSUB(chapt_1, 1, start_find_2-1)		endif	endif	start_find = STRSTR(param_name_str, ".", 1)	if STRLEN(param_name_str)>0 and start_find then		len_in_str = STRLEN(param_name_str)		unit_name_str = STRSUB(param_name_str, start_find, len_in_str)		param_name_str = STRSUB(param_name_str, 1, start_find-1)	endifreturn"get_thk_txt":	if unstr = "" then unstr = ld	Unit=""	if STRSTR (unstr, "m")<>0 then Unit=" м"	if STRSTR (unstr, "cm")<>0 then Unit=" см"	if STRSTR (unstr, "mm")<>0 then Unit=" мм"	nstep = 1	if Unit = " м" then nstep = 1	if Unit = " см" then nstep = 100	if Unit = " мм" then nstep = 1000	n = SPLIT(STRSUB(unstr,3,1),"%n", nznak)	zerostr = ","	for ii=1 to nznak		zerostr = zerostr+"0"	next ii	tskinThktxt = ""	if (tThk*1000-min_thk)>EPS then		tskinThktxt = str(unstr, tThk)		if STRSTR(tskinThktxt,zerostr)>0 then tskinThktxt = strsub(tskinThktxt, 1, STRLEN(tskinThktxt)-STRLEN(zerostr))		if tskinThktxt="0" or tskinThktxt="0"+zerostr then tskinThktxt=""	endifreturn20: