hotspot2 0,0if (GLOB_STRUCTURE_DISPLAY = upr_n and upr = 0) or not(show_crew) or show_type = NOT_SHOW then 	if incline_r=90 and show_hole2D then		circle2 0,0,holeSizeR		HOTARC2 0, 0, holeSizeR, 0, 360, 9005		hotspot2 0,holeSizeR,9006		hotspot2 0,-holeSizeR,9007		hotspot2 holeSizeR,0,9008		hotspot2 -holeSizeR,0,9009	endif	endendifif iscall then 20!Projection	!Background Fill		fill gs_fill_type		pen gs_fill_pen		project2{3} 3, 270, 3 + 16 + 32, 15, gs_back_pen parameters isProjection = 1	!End of Background Fill	!Outline		pen gs_cont_pen		line_type gs_line_type		project2{3} 3, 270, 2 + 32, 15, parameters isProjection = 1	!End of Outline!End of Projection!Hotspot on Head	hotspot2 0, 0	add2 -washerThick*cos(incline), 0	hotspot2 -headThick*cos(incline), 0	del 1!End of Hotspot on Head!Dynamic Hotspots	!Adjust Total Length		if abs(cos(incline)) > 0.1 then			add2 -washerThick*cos(incline), 0			hotspot2 0, 0, iHotspot + 1, shaftLength2D, 1 + 128, shaftLength			hotspot2 shaftLength2D, 0, iHotspot + 2, shaftLength2D, 2, shaftLength			hotspot2 -1, 0, iHotspot + 3, shaftLength2D, 3, shaftLength			iHotspot = iHotspot + 3			del 1		endif	!End of Adjust Total Length	!Adjust Inside Length		if abs(cos(incline)) > 0.1 then			hotspot2 0, 0, iHotspot + 1, insideLength2D, 1 + 256, insideLength			hotspot2 insideLength2D, 0, iHotspot + 2, insideLength2D, 2 + 256, insideLength			hotspot2 -1, 0, iHotspot + 3, insideLength2D, 3 + 256, insideLength			iHotspot = iHotspot + 3		endif	!End of Adjust Inside Length	!Adjust Threaded Length		if abs(cos(incline)) > 0.1 then			add2 (-washerThick + shaftLength)*cos(incline), 0			hotspot2 0, 0, iHotspot + 1, threadLength2D, 1 + 128, threadLength			hotspot2 -threadLength2D, 0, iHotspot + 2, threadLength2D, 2, threadLength			hotspot2 1, 0, iHotspot + 3, threadLength2D, 3, threadLength			iHotspot = iHotspot + 3			del 1		endif	!End of Adjust Inside Length!End of Dynamic Hotspots!Center Line	if abs(cos(incline)) > 0.1 then		add2 -washerThick*cos(incline), 0		if clPen then			line_type clType			pen clPen			line2 -(headThick + shaftThick)*cos(incline), 0,				(shaftLength + shaftThick)*cos(incline), 0		endif		hotline2 -(headThick + shaftThick)*cos(incline), 0,			(shaftLength + shaftThick)*cos(incline), 0		del 1	endif!End of Center Line!Hole	if holePen > 0 and show_hole2D then		pen holePen		R = holeSizeR		if nNuts then			t = insideLength		else			t = shaftLength - washerThick		endif		gosub "Circular Lines"	endif!End of Hole!Hotlines	!Shaft Edges		R = shaftThick/2		t = shaftLength - washerThick		gosub "Circular Hotlines"	!End of Shaft Edges	!Head		R = edgeWidth/2		t = headThick		add2 -(washerThick + headThick)*cos(incline), 0		gosub "Hexagonal Hotlines"		del 1	!End of Head	!Nut		R = edgeWidth/2		t = nutThick		for iNut = 1 to nNuts			add2 (insideLength + washerThick + (iNut - 1)*nutThick)*cos(incline), 0			gosub "Hexagonal Hotlines"			del 1		next iNut	!End of Nut	!Washer under Head		if showWashers then			R = washerSize/2			t = washerThick			add2 -washerThick*cos(incline), 0				if washerType = "Square" then				gosub "Square Hotlines"			else				gosub "Circular Hotlines"			endif			del 1		endif	!End of Washer under Head	!Washer under Nut		if showWashers and nNuts then			R = washerSize/2			t = washerThick			add2 insideLength*cos(incline), 0				if washerType = "Square" then				gosub "Square Hotlines"			else				gosub "Circular Hotlines"			endif			del 1		endif	!End of Washer under Nut!End of Hotlinesend"Hexagonal Hotlines":	for qi = 30 to 330 step 60		put R*cos(qi), R*sin(qi), 0,			R*cos(qi + 60), R*sin(qi + 60), 0		gosub "Projected Hotline"		put R*cos(qi), R*sin(qi), t,			R*cos(qi + 60), R*sin(qi + 60), t		gosub "Projected Hotline"		put R*cos(qi), R*sin(qi), 0,			R*cos(qi), R*sin(qi), t		gosub "Projected Hotline"	next qireturn"Circular Hotlines":	for qi = 0 to 360 - 5 step 10		put R*cos(qi), R*sin(qi), 0,			R*cos(qi + 10), R*sin(qi + 10), 0		gosub "Projected Hotline"		put R*cos(qi), R*sin(qi), t,			R*cos(qi + 10), R*sin(qi + 10), t		gosub "Projected Hotline"	next qi	hotline2 0, -R, t*cos(incline), -R	hotline2 0, R, t*cos(incline), Rreturn"Square Hotlines":	R = R*sqr(2)	for qi = 45 to 315 step 90		put R*cos(qi), R*sin(qi), 0,			R*cos(qi + 90), R*sin(qi + 90), 0		gosub "Projected Hotline"		put R*cos(qi), R*sin(qi), t,			R*cos(qi + 90), R*sin(qi + 90), t		gosub "Projected Hotline"		put R*cos(qi), R*sin(qi), 0,			R*cos(qi), R*sin(qi), t		gosub "Projected Hotline"	next qireturn"Projected Hotline":	x1 = get(1)	y1 = get(1)	z1 = get(1)	x2 = get(1)	y2 = get(1)	z2 = get(1)	hotline2 x1*sin(incline)*cos(swivel) + y1*sin(incline)*sin(swivel) + z1*cos(incline), -x1*sin(swivel) + y1*cos(swivel),		x2*sin(incline)*cos(swivel) + y2*sin(incline)*sin(swivel) + z2*cos(incline), -x2*sin(swivel) + y2*cos(swivel)return"Circular Lines":	dq = (.003/R)*(180/pi)	nq = int(1 + 360/dq)	dq = 360/(2*nq)	for qi = 0 to 360 - dq step 2*dq		put R*cos(qi), R*sin(qi), 0,			R*cos(qi + dq), R*sin(qi + dq), 0		gosub "Projected Line"		put R*cos(qi), R*sin(qi), t,			R*cos(qi + dq), R*sin(qi + dq), t		gosub "Projected Line"	next qi	L = t*cos(incline)	dx = .003	nx = int(1 + L/dx)	dx = L/(2*nx)	for xi = 0 to L step 2*dx		line2 xi, -R, xi + dx, -R		line2 xi, R, xi + dx, R	next xireturn"Projected Line":	x1 = get(1)	y1 = get(1)	z1 = get(1)	x2 = get(1)	y2 = get(1)	z2 = get(1)	line2 x1*sin(incline)*cos(swivel) + y1*sin(incline)*sin(swivel) + z1*cos(incline), -x1*sin(swivel) + y1*cos(swivel),		x2*sin(incline)*cos(swivel) + y2*sin(incline)*sin(swivel) + z2*cos(incline), -x2*sin(swivel) + y2*cos(swivel)return20: