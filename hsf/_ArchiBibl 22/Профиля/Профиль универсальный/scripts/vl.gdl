parameters version = "20.5"values{2} "name_prof_i" iname_prof, tname_proffor i=1 to vardim1(iname_prof)	if name_prof_i=iname_prof[i] then		parameters name_prof=tname_prof[i]		i = vardim1(iname_prof)	endifnext i! ----- Параметры для выносной надписи --------dim label_posxyz[]dim label_posang[]label_posxyz[1] = half_x : label_posxyz[2] = half_y : label_posxyz[3] = half_zlabel_posang[1] = ang_pl : label_posang[2] = 90-angparameters label_posxyz = label_posxyz, label_posang = label_posang, label_posset = 1parameters el_type_view=el_type_view! --------------------------------------------------call "Шаблон профиля" parameters alldim param_name_out_t[] : i=1param_name_out_t[1] = "!!Профиль "+name_prof+"!!"i=i+1 : param_name_out_t[i] = "naen - наименование"i=i+1 : param_name_out_t[i] = "obozn - обозначение"i=i+1 : param_name_out_t[i] = "tip_profile - сечение"i=i+1 : param_name_out_t[i] = "mater - марка стали"i=i+1 : param_name_out_t[i] = "z_th_left - толщ. заглушки начала"i=i+1 : param_name_out_t[i] = "z_th_right - толщ. заглушки конца"i=i+1 : param_name_out_t[i] = "zagf_th_left - толщ. фасонки начала"i=i+1 : param_name_out_t[i] = "zagf_th_right - толщ. фасонки конца"parameters param_name_out = param_name_out_tdim param_temp_out_t[] : i=0i=i+1 : param_temp_out_t[i] = "%subpos%"i=i+1 : param_temp_out_t[i] = "%naen%"i=i+1 : param_temp_out_t[i] = "%tip_profile% %mater%"i=i+1 : param_temp_out_t[i] = "t%z_th_left% %z_mater_left%"i=i+1 : param_temp_out_t[i] = "t%z_th_right% %z_mater_right%"i=i+1 : param_temp_out_t[i] = "t%zagf_th_left% %z_mater_left%"i=i+1 : param_temp_out_t[i] = "t%zagf_th_right% %z_mater_right%"parameters param_temp_out = param_temp_out_tvalues{2} "type_cutf_s" itype_cutf, ttype_cutfvalues{2} "type_cutf_e" itype_cutf, ttype_cutfvalues{2} "ang_type_cut_s" itype_anglecut, ttype_anglecutvalues{2} "ang_type_cut_e" itype_anglecut, ttype_anglecutvalues{2} "type_fin_s" itype_fin, ttype_finvalues{2} "type_fin_e" itype_fin, ttype_finvalues{2} "zagf_flange_left" itype_zagf_flange, ttype_zagf_flangevalues{2} "zagf_flange_right" itype_zagf_flange, ttype_zagf_flangevalues{2} "dlin_spec_type" idlin_spec_type, tdlin_spec_typeif GLOB_MODPAR_NAME="ang_type_cut_s" and ang_type_cut_s>0 and mirr_cutf_s = 0 then parameters mirr_cutf_s = 1if GLOB_MODPAR_NAME="mirr_cutf_s" and ang_type_cut_s>0 and mirr_cutf_s = 0 then parameters mirr_cutf_s = 1if GLOB_MODPAR_NAME="ang_type_cut_e" and ang_type_cut_e>0 and mirr_cutf_e = 0 then parameters mirr_cutf_e = 1if GLOB_MODPAR_NAME="mirr_cutf_e" and ang_type_cut_e>0 and mirr_cutf_e = 0 then parameters mirr_cutf_e = 1if type_fin_e=1 or type_fin_e=3 then 	is_z_right=1else	is_z_right=0	hideparameter "out_right_vn"endifif type_fin_s=1 or type_fin_s=3 then 	is_z_left=1else	is_z_left=0	hideparameter "out_left_vn"endifparameters is_z_right=is_z_right, is_z_left=is_z_leftif is_z_left=0 and is_z_right=0 then	hideparameter "z_mater"endifif type_fin_s=2 then	parameters mirr_cutf_s = 1	if type_cutf_s = 1 then		values "pod_bv_s" range[-aa, aa]		values "pod_bn_s" range[-aa, aa]	endif	if type_cutf_s = 2 then		values "pod_bv_s" range[-bb, bb]		values "pod_bn_s" range[-bb, bb]	endif	if pod_eq_s then		parameters pod_an_s=pod_av_s, pod_bn_s=pod_bv_s, pod_rn_s=pod_rv_s		hideparameter "pod_an_s", "pod_bn_s", "pod_rn_s"	endifelse	hideparameter "pod_av_s", "pod_bv_s", "pod_rv_s","pod_an_s", "pod_bn_s", "pod_rn_s", "pod_eq_s"endifif type_fin_e=2 then	parameters mirr_cutf_e = 1 	if type_cutf_e = 1 then		values "pod_bv_e" range[-aa, aa]		values "pod_bn_e" range[-aa, aa]	endif	if type_cutf_e = 2 then		values "pod_bv_e" range[-bb, bb]		values "pod_bn_e" range[-bb, bb]	endif	if pod_eq_e then		parameters pod_an_e=pod_av_e, pod_bn_e=pod_bv_e, pod_rn_e=pod_rv_e		hideparameter "pod_an_e", "pod_bn_e", "pod_rn_e"	endifelse	hideparameter "pod_av_e", "pod_bv_e", "pod_rv_e", "pod_an_e", "pod_bn_e", "pod_rn_e", "pod_eq_e"endifvalues{2} "type_coord" itype_coord, ttype_coordvalues{2} "mirror_axis" imirror_axis, tmirror_axisvalues{2} "type_axis_pos" itype_offset_prof, ttype_offset_profvalues{2} "type_offset_prof_e" itype_offset_prof, ttype_offset_profvalues{2} "type_offset_prof_s" itype_offset_prof, ttype_offset_profif eq_offset_prof then 	parameters type_offset_prof_e = type_offset_prof_s	hideparameter "type_offset_prof_e"endifif type_offset_prof_s>0 then	offset_prof[is][ix] = offset_prof_arr[type_offset_prof_s+1][ix]	offset_prof[is][iy] = offset_prof_arr[type_offset_prof_s+1][iy]	parameters offset_prof=offset_profendifif type_offset_prof_e>0 then	offset_prof[ie][ix] = offset_prof_arr[type_offset_prof_e+1][ix]	offset_prof[ie][iy] = offset_prof_arr[type_offset_prof_e+1][iy]	parameters offset_prof=offset_profendifif GLOB_MODPAR_NAME="type_offset_prof_s" and type_offset_prof_s=0 then	offset_prof[is][ix] = 0	offset_prof[is][iy] = 0	parameters offset_prof=offset_profendifif GLOB_MODPAR_NAME="type_offset_prof_e" and type_offset_prof_e=0 then	offset_prof[ie][ix] = 0	offset_prof[ie][iy] = 0	parameters offset_prof=offset_profendifif eq_offset_prof then	offset_prof[ie][ix] = offset_prof[is][ix]	offset_prof[ie][iy] = offset_prof[is][iy]	parameters offset_prof=offset_profendif!-- Перешли в сферичискую систему координат ---if GLOB_MODPAR_NAME="pos_prof" or GLOB_MODPAR_NAME = ""  then	dx = pos_prof[ie][ix] - pos_prof[is][ix]	dy = pos_prof[ie][iy] - pos_prof[is][iy]	dz = pos_prof[ie][iz] - pos_prof[is][iz]	gosub "xytorphi"	parameters l_pos_prof = r, ang_pl = phi, ang = etta	dx = pos_prof[ie][ix] - pos_prof[is][ix]	dy = pos_prof[ie][iy] - pos_prof[is][iy]	l_axis_2d = SQR(dx*dx+dy*dy)	parameters l_axis_2d=l_axis_2delse	!-- Перешли в радиальную систему координат ---	if GLOB_MODPAR_NAME="l_pos_prof" or GLOB_MODPAR_NAME="ang_pl" or GLOB_MODPAR_NAME="ang" then		r = l_pos_prof : phi = ang_pl : etta = ang		gosub "rphitoxy"		pos_prof[ie][ix] = pos_prof[is][ix] + x		pos_prof[ie][iy] = pos_prof[is][iy] + y		pos_prof[ie][iz] = pos_prof[is][iz] + z		parameters pos_prof = pos_prof	endifendifif (ang mod 180) = 0 then parameters ang_form_axis=0if ang_type_cut_s=1 then	pos_cutf[is][ip] = ang-90	pos_cutf[is][in] = ang-90endifif ang_type_cut_s=2 then	pos_cutf[is][ip] = ang	pos_cutf[is][in] = ang+offset_angendifif ang_type_cut_e=1 then	pos_cutf[ie][ip] = -ang+90	pos_cutf[ie][in] = -ang+90endifif ang_type_cut_e=2 then	pos_cutf[ie][ip] = -ang	pos_cutf[ie][in] = -ang-offset_angendifif GLOB_MODPAR_NAME="pos_cutf" or GLOB_MODPAR_NAME="mirr_cutf_s" or GLOB_MODPAR_NAME="mirr_cutf_e" or ang_type_cut_s or ang_type_cut_e then	if mirr_cutf_s then		pos_cutf[is][il] = pos_cutf[is][ip]		pos_cutf[is][iv] = pos_cutf[is][in]	endif	if mirr_cutf_e then		pos_cutf[ie][il] = pos_cutf[ie][ip]		pos_cutf[ie][iv] = pos_cutf[ie][in]	endif	for i=1 to 2		for j=1 to 4			pos_cutf[i][j] = pos_cutf[i][j] mod 360 - 360*(pos_cutf[i][j]>180)		next j	next i	parameters pos_cutf = pos_cutfendif!Обнуляем неиспользуемые углы подрезкиif type_cutf_s = 1 then	if abs(pos_cutf[is][iv])>EPS then 	parameters pos_cutf[is][iv] = 0	if abs(pos_cutf[is][in])>EPS then 	parameters pos_cutf[is][in] = 0endifif type_cutf_s = 2 then	if abs(pos_cutf[is][il])>EPS then 	parameters pos_cutf[is][il] = 0	if abs(pos_cutf[is][ip])>EPS then 	parameters pos_cutf[is][ip] = 0endifif type_cutf_e = 1 then	if abs(pos_cutf[ie][iv])>EPS then 	parameters pos_cutf[ie][iv] = 0	if abs(pos_cutf[ie][in])>EPS then 	parameters pos_cutf[ie][in] = 0endifif type_cutf_e = 2 then	if abs(pos_cutf[ie][il])>EPS then 	parameters pos_cutf[ie][il] = 0	if abs(pos_cutf[ie][ip])>EPS then 	parameters pos_cutf[ie][ip] = 0endifparameters offset_r=offset_r, offset_ang=offset_ang, offset_ang_pl=offset_ang_plparameters max_cut=max_cut, max_cut_e=max_cut_e, max_cut_s=max_cut_sif dlin_spec_type=0 then dlin_prof=(offset_r+max_cut-offset_body_s-offset_body_e)if dlin_spec_type=1 then dlin_prof=l_pos_profif dlin_spec_type=2 then dlin_prof=offset_r+max_cutif (round_int(dlin_prof*10000)-dlin_prof*10000)>EPS then dlin_prof = round_int((l_pos_prof+max_cut-(offset_r-l_pos_prof)-offset_body_s-offset_body_e+1/1000)*1000)/1000parameters dlin_prof=dlin_prof+dlin_zapif dr<>0 then	if dr>l_pos_prof/2 then dr=l_pos_prof/2	rad_path = (dr/2)+l_pos_prof*l_pos_prof/(8*dr)	angle_path = 2*asn(l_pos_prof/(2*rad_path))	dlin_prof_dr = (pi*rad_path*angle_path)/180else	rad_path = 0	angle_path = 0	dlin_prof_dr = 0endifparameters rad_path=rad_path, angle_path=angle_path, dlin_prof_dr=dlin_prof_dr!Заглушкиif type_cutf_s = 1 then	parameters z_a_left = (aa + out_left_vn)*2	parameters z_b_left = abs(z_b_left_p)+abs(z_b_left_l)endifif type_cutf_e = 1 then	parameters z_a_right = (aa + out_right_vn)*2	parameters z_b_right = abs(z_b_right_p)+abs(z_b_right_l)endifif type_cutf_s = 2 then	parameters z_b_left = (bb + out_left_vn)*2	parameters z_a_left = abs(z_a_left_v)+abs(z_a_left_n)endifif type_cutf_e = 2 then	parameters z_b_right = (bb + out_right_vn)*2	parameters z_a_right = abs(z_a_right_v)+abs(z_a_right_n)endifparameters A=aa*2, B=bb*2, ZZYZX=dlin_profLOCK "A", "B", "ZZYZX"if reset_eq then	for i=ix to iz		if pos_prof[is][i] = pos_prof[ie][i] then 			pos_prof[is][i] = 0			pos_prof[ie][i] = 0		endif	next i	reset_eq = 0	parameters reset_eq = reset_eq, pos_prof = pos_profendifif reset_zero then	for i=ix to iz		ts = pos_prof[is][i]		te = pos_prof[ie][i]		pos_prof[is][i] = 0		pos_prof[ie][i] = te - ts	next i	reset_zero = 0	parameters reset_zero = reset_zero, pos_prof = pos_profendifparameters ac_toplevel = ac_toplevelparameters ac_bottomlevel = ac_bottomlevelparameters ac_symb_show_projection_to = 1parameters ac_symb_display_option = 3end"xytorphi":	r = SQR(dx*dx+dy*dy+dz*dz)	if dx>0 and dy>=0 then phi = atn(dy/dx)	if dx>0 and dy<0 then phi = atn(dy/dx)+360	if dx<0 then phi = atn(dy/dx)+180	if dx=0 and dy>0 then phi = 90	if dx=0 and dy<0 then phi = 270	if dx=0 and dy=0 then phi = 0	etta = acs(dz/r)return"rphitoxy":	x = r * sin(etta) * cos(phi)	y = r * sin(etta) * sin(phi)	z = r * cos(etta)return