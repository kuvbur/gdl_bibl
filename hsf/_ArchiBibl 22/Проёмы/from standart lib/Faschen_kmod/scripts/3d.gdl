! Ornamental Window Moldings ----------------------------------------------------!	gs_faschen_top:			on/off!	gs_faschen_right:		on/off!	gs_faschen_left:		on/off!	gs_faschen_bottom:		on/off!	gs_faschen_A:			Width of left/right. (length)!	gs_faschen_B:			Height of bottom. (length)!	gs_faschen_C:			Height of top. (length)!	gs_faschen_width:		Depth of Ornamental Window Molding!	gs_faschen_t:			on/off Ornamental Window Molding Depth >= Reveal Depth = WIDO_SILL!	gs_faschen_height_left:	in case of two different window connecting!	gs_faschen_height_right:in case of two different window connecting!	gs_faschen_pen:			3D Contour Pen!	gs_faschen_fill:		section fill!	gs_faschen_fp:			section fill pen!	gs_faschen_bg:			section fill background pen!	gs_faschen_type:		brickwork/plaster!	gs_faschen_brick_thk:	brick width in case of brickwork!	gs_faschen_mort_thk:	mortar width in case of brickwork!	gs_faschen_plaster_mat:	plaster material in case of plaster!	gs_faschen_brick_mat:	brick material in case of brickwork!	gs_faschen_mort_mat:	mortar material in case of brickworkif bNotAvailableByReveal then endaddy -sillSlantOffsetB = B + sillSlantOffsetaddz -epsresol WALL_RESOLif gs_stack_top then gs_faschen_top = 0if gs_stack_bottom then gs_faschen_bottom = 0if abs(gs_faschen_width)<eps then gs_faschen_width=10*epsj2=gs_reveal_rightj1=gs_reveal_leftif gs_faschen_width>WIDO_SILL then gs_faschen_width_n=gs_faschen_width-WIDO_SILL else gs_faschen_width_n=0if gs_stack_left  then gs_faschen_left = 0if gs_stack_right  then gs_faschen_right = 0upperJamb = gs_reveal_top*not(gs_stack_top) - gs_faschen_C*gs_faschen_toplowerJamb = gs_reveal_bottom*not(gs_stack_bottom) - gs_faschen_B*gs_faschen_bottomif WIDO_REVEAL_SIDE then	matRevealSide	= WALL_MAT_A	matOppositeSide = WALL_MAT_Belse	matRevealSide	= WALL_MAT_B	matOppositeSide = WALL_MAT_Aendif	pen WALL_VIEW_PEN	material matRevealSideif gs_faschen_left  or gs_faschen_right  or gs_faschen_top  or gs_faschen_bottom then	if curvedWall then		! ===== Curved Wall =====		if WIDO_REVEAL_SIDE then mulz -1		dxL = WIDO_FRAME_THICKNESS * tan(alfaLeftOs)		dxR = WIDO_FRAME_THICKNESS * tan(alfaRightOs)		! ===== Cut Reveal Side =====		material matRevealSide		addy gs_reveal_bottom * not(gs_stack_bottom) - gs_faschen_B * not(gs_stack_bottom) * gs_faschen_bottom		rotx -90		if SYMB_ROTANGLE > EPS then			 if not(WIDO_REVEAL_SIDE) then				fk = rSill + gs_faschen_width - WIDO_SILL				fb = rSill -WIDO_SILL			else				fk = -rSill + 1				fb = -rSill - WIDO_SILL			endif		else			 if not(WIDO_REVEAL_SIDE) then				fk = -rSill + 1				fb = -rSill - WIDO_SILL			else				fk = rSill + 1				fb = rSill -WIDO_SILL			endif		endif		kfLx = ySign*fk * sin(alfaleft - alfaLeftJamb * not(gs_stack_left) + alfafaschen * not(gs_stack_left))		kfLy = fk * cos(alfaleft - alfaLeftJamb * not(gs_stack_left) + alfafaschen * not(gs_stack_left))	 - wod	+  WIDO_FRAME_THICKNESS * WIDO_REVEAL_SIDE		kfRx = -ySign*fk * sin(alfaright - alfaRightJamb * not(gs_stack_Right) + alfafaschen * not(gs_stack_right))		kfRy = fk * cos(alfaright - alfaRightJamb * not(gs_stack_Right) + alfafaschen * not(gs_stack_right)) - wod	+  WIDO_FRAME_THICKNESS * WIDO_REVEAL_SIDE		bfLx = ySign*fb * sin(alfaleft - alfaLeftJamb * not(gs_stack_left) + alfafaschen * not(gs_stack_left))		bfLy = fb * cos(alfaleft - alfaLeftJamb * not(gs_stack_left) + alfafaschen * not(gs_stack_left))	- wod	+  WIDO_FRAME_THICKNESS * WIDO_REVEAL_SIDE		bfRx = -ySign*fb * sin(alfaright - alfaRightJamb * not(gs_stack_Right) + alfafaschen * not(gs_stack_right))		bfRy = fb * cos(alfaright - alfaRightJamb * not(gs_stack_Right) + alfafaschen * not(gs_stack_right)) - wod	+  WIDO_FRAME_THICKNESS * WIDO_REVEAL_SIDE		if gs_faschen_top then			addz B - gs_reveal_top*not(gs_stack_top) + gs_faschen_B*gs_faschen_bottom				wallniche 6, 1, 2 + 0,					0,0, 1, gs_faschen_C,					kfLx, kfLy, 79,					0, -WOD, 979,					kfRx, kfRy, 3015 - 3000*(SYMB_ROTANGLE<eps),					bfRx, bfRy, 79,					0, -WOD, 979,					bfLx, bfLy, 3015			del 1		endif		if gs_faschen_bottom then			wallniche 6, 1, 2 + 0,				0,0, 1, gs_faschen_B,				kfLx, kfLy, 79,				0, -WOD, 979,				kfRx, kfRy, 3015 - 3000*(SYMB_ROTANGLE<eps),				bfRx, bfRy, 79,				0, -WOD, 979,				bfLx, bfLy, 3015		endif		if gs_faschen_left then			wallniche 6, 1, 2 + 0,				0,0, 1, B - lowerJamb - upperJamb,				kfLx, kfLy, 79,				0, -WOD, 979,				0, fk - WOD + WIDO_FRAME_THICKNESS * WIDO_REVEAL_SIDE, 3015 - 3000*(SYMB_ROTANGLE<eps),				0, fb - WOD + WIDO_FRAME_THICKNESS * WIDO_REVEAL_SIDE, 79,				0, -WOD, 979,				bfLx, bfLy, 3015		endif		if gs_faschen_right then			wallniche 6, 1, 2 + 0,				0,0, 1, B - lowerJamb - upperJamb,				0, fk - WOD + WIDO_FRAME_THICKNESS * WIDO_REVEAL_SIDE, 79,				0, -WOD, 979,				kfRx, kfRy, 3015 - 3000*(SYMB_ROTANGLE<eps),				bfRx, bfRy, 79,				0, -WOD, 979,				0, fb - WOD + WIDO_FRAME_THICKNESS * WIDO_REVEAL_SIDE, 3015		endif		del 2		if WIDO_REVEAL_SIDE then del 1	else		if WIDO_REVEAL_SIDE then			addz WIDO_SILL - WALL_THICKNESS + WIDO_FRAME_THICKNESS    ! Flip		else			addz -WIDO_SILL		endif		if WIDO_REVEAL_SIDE then			mulz -1			addz -WALL_THICKNESS		endif		if WIDO_SILL > EPS then			material matRevealSide			px1 = + rightwidth - gs_reveal_right * not(gs_stack_right) + gs_faschen_A * not(gs_stack_right) + gs_right_oversize + gs_faschen_ovhg_right			px2 = - leftwidth  + gs_reveal_left  * not(gs_stack_left)  - gs_faschen_A * not(gs_stack_left)  + gs_left_oversize  - gs_faschen_ovhg_left			if gs_faschen_bottom then				wallniche 4, 1, 2 + 16,					0,0,1,	WIDO_SILL + eps,					px1,	lowerJamb,		31,					px1,	lowerJamb + gs_faschen_B * gs_faschen_bottom,	31,					px2,	lowerJamb + gs_faschen_B * gs_faschen_bottom,	31,					px2,	lowerJamb,		31			endif			if gs_faschen_top then				wallniche 4, 1, 2 + 16,					0,0,1,	WIDO_SILL + eps,					px1,	B - upperJamb,		31,					px1,	B - upperJamb - gs_faschen_C * gs_faschen_top,	31,					px2,	B - upperJamb - gs_faschen_C * gs_faschen_top,	31,					px2,	B - upperJamb,		31			endif			if gs_faschen_left then				wallniche 4, 1, 2 + 16,					0,0,1,	WIDO_SILL + eps,					-leftwidth + gs_reveal_left * not(gs_stack_left),	lowerJamb,		31,					-leftwidth + gs_reveal_left * not(gs_stack_left),	B - upperJamb,	31,					px2,		B - upperJamb,	31,					px2,		lowerJamb,		31			endif			if gs_faschen_right then				wallniche 4, 1, 2 + 16,					0,0,1,	WIDO_SILL + eps,					px1,		lowerJamb,		31,					px1,		B - upperJamb,	31,					rightwidth - gs_reveal_right * not(gs_stack_right),	B - upperJamb,	31,					rightwidth - gs_reveal_right * not(gs_stack_right),	lowerJamb,		31			endif		endif		del 1 + WIDO_REVEAL_SIDE * 2	endifendif		! ===== Cut for Corner Window =====if bCornerWindow or bRightCornerFunction then	addx rightwidth+WIDO_FRAME_THICKNESS*tan(ww)	addz zm	rotz 90	cutplane wew	del 3endifif bLeftCornerFunction then	addx -leftwidth-WIDO_FRAME_THICKNESS*tan(ww2)	addz zm2	rotz 90	cutplane -wew2	del 3endif!!! top	addx (gs_faschen_ovhg_right - gs_faschen_ovhg_left) / 2 - (leftwidth - rightwidth) / 2	addy B - gs_reveal_top*not(gs_stack_top)		gs_height		= gs_faschen_C		gs_ovhg_left	= gs_faschen_A		gs_ovhg_right	= gs_faschen_A		mort_n			= 1		aaa				= leftwidth + rightwidth + (gs_faschen_A - gs_reveal_right)*not(gs_stack_right) + (gs_faschen_A - gs_reveal_left)*not(gs_stack_left)\						+gs_faschen_ovhg_right+gs_faschen_ovhg_left		alpha			= alpha_orig -not(gs_faschen_R)*alfafaschen-not(gs_faschen_L)*alfafaschen-gs_stack_left*alfafaschen-gs_stack_right*alfafaschen + alfaleftjamb*gs_stack_left + alfarightjamb*gs_stack_right		bbb				=B		if gs_faschen_top then										!!! top			if not(curvedWall) then				if iFaschenTyp = WIN_MOLDING_PLASTER then					addx (gs_faschen_A - gs_reveal_right)/2 * not(gs_stack_right) - (gs_faschen_A - gs_reveal_left)/2 * not(gs_stack_left)				else					addx (gs_faschen_A - gs_reveal_right - not(gs_faschen_R)*gs_faschen_A)/2 * not(gs_stack_right) - (gs_faschen_A - gs_reveal_left+not(gs_faschen_L)*gs_faschen_A)/2 * not(gs_stack_left)				endif			endif			gs_rise = 0			gosub 1000			if not(curvedWall) then del 1		endif	del 2	!!! bottom	addx (gs_faschen_ovhg_right - gs_faschen_ovhg_left) / 2 - (leftwidth - rightwidth) / 2	addy  - gs_faschen_B + gs_reveal_bottom*not(gs_stack_bottom)		gs_height		= gs_faschen_B		gs_ovhg_left	= gs_faschen_A		gs_ovhg_right	= gs_faschen_A		mort_n			= 1		aaa				= leftwidth + rightwidth + (gs_faschen_A - gs_reveal_right)*not(gs_stack_right) + (gs_faschen_A - gs_reveal_left)*not(gs_stack_left)\						+gs_faschen_ovhg_right+gs_faschen_ovhg_left		alpha			= alpha_orig - gs_stack_left*alfafaschen - gs_stack_right*alfafaschen + alfaleftjamb*gs_stack_left + alfarightjamb*gs_stack_right		bbb				= b		if gs_faschen_bottom then 									!!!! bottom			if not(curvedWall) then				if iFaschenTyp = WIN_MOLDING_PLASTER then					addx (gs_faschen_A - gs_reveal_right)/2 * not(gs_stack_right) - (gs_faschen_A - gs_reveal_left)/2 * not(gs_stack_left)				else					addx (gs_faschen_A - gs_reveal_right - not(gs_faschen_R)*gs_faschen_A)/2 * not(gs_stack_right) - (gs_faschen_A - gs_reveal_left+not(gs_faschen_L)*gs_faschen_A)/2 * not(gs_stack_left)				endif			endif			gosub 1000			if not(curvedWall) then del 1		endif	del 2	!!!! side	if not(curvedWall) then		addx - leftwidth + gs_reveal_left*not(gs_stack_left)		rotz 90		addx B/2 + (gs_reveal_bottom)/2 - (gs_reveal_top)/2	else		addz wod - wod * 2 * WIDO_REVEAL_SIDE +  WIDO_FRAME_THICKNESS * WIDO_REVEAL_SIDE	endif		corrmort		= 0		gs_height		= gs_faschen_A		gs_ovhg_left	= 0		gs_ovhg_right	= 0		mort_n			= 2		bbb				= leftwidth + rightwidth		all_a			= B - gs_reveal_bottom*not(gs_stack_bottom) - gs_reveal_top*not(gs_stack_top)		if gs_faschen_L then			aaa=all_a			if curvedWall then				roty alfaLeft - alfaLeftJamb + alfafaschen/2 - (-alfaLeftJamb + alfaRightJamb)*(SYMB_ROTANGLE<eps)			else				addx  - gs_stack_bottom*gs_reveal_bottom/2 + gs_stack_top*gs_reveal_top/2			endif		else			aaa = gs_faschen_L_height			corrmort = 1			if curvedWall then				roty alfaLeft - alfaLeftJamb + alfafaschen/2 - (-alfaLeftJamb + alfaRightJamb)*(SYMB_ROTANGLE<eps)			else				addx aaa/2-all_a/2  - gs_stack_bottom*gs_reveal_bottom/2  + gs_stack_top*gs_reveal_top/2			endif		endif		if gs_faschen_left then			if bLeftCornerFunction < eps  then gosub 1000			corrmort = 0		endif		del 1		if gs_faschen_R then			aaa=all_a			if curvedWall then				roty -alfaRight + alfaRightJamb - alfafaschen/2 - (-alfaLeftJamb + alfaRightJamb)*(SYMB_ROTANGLE<eps)			else				addx - gs_stack_bottom*gs_reveal_bottom/2  + gs_stack_top*gs_reveal_top/2			endif		else			aaa = gs_faschen_R_height			corrmort = 1			if curvedWall then				roty -alfaRight  + alfaRightJamb - alfafaschen/2  - (-alfaLeftJamb + alfaRightJamb)*(SYMB_ROTANGLE<eps)			else				addx aaa/2-all_a/2  - gs_stack_bottom*gs_reveal_bottom/2  + gs_stack_top*gs_reveal_top/2			endif		endif		if gs_faschen_right then			if not(curvedWall) then addy - gs_faschen_A + gs_reveal_left*not(gs_stack_left) + gs_reveal_right*not(gs_stack_right) - leftwidth - rightwidth				if bRightCornerFunction < eps then gosub 1000			corrmort = 0			if not(curvedWall) then del 1		endif		del 1	if not(curvedWall) then del 3 else del 1if bCornerWindow or bRightCornerFunction then cutendif bLeftCornerFunction then cutendend1000:if iFaschenTyp = WIN_MOLDING_PLASTER then	mat_brick_plaster=gs_faschen_plaster_matendifif iFaschenTyp = WIN_MOLDING_BRICKWORK then	mat_brick_plaster=gs_faschen_brick_matendifif iWindowShape = 0 then	! Rectangular	openingArchHeight = gs_riseendifif WIDO_REVEAL_SIDE then	addz WIDO_SILL - WALL_THICKNESS + WIDO_FRAME_THICKNESS    ! Flipelse	addz -WIDO_SILLendifif WIDO_REVEAL_SIDE then	mulz -1	addz -WALL_THICKNESSendifadd 0, 0, WIDO_SILL-gs_faschen_width	pen gs_faschen_pen	sect_fill gs_faschen_fill, gs_faschen_bg, gs_faschen_fg, WALL_SECT_PEN	if iFaschenTyp = WIN_MOLDING_PLASTER and mort_n = 1 then		! Plaster bottom - top		material mat_brick_plaster		addz gs_faschen_width		rotx -90			if curvedWall then				if SYMB_ROTANGLE > EPS then					 if not(WIDO_REVEAL_SIDE) then						fk = rSill + gs_faschen_width - WIDO_SILL						fb = rSill -WIDO_SILL					else						fk = -rSill - WIDO_SILL + gs_faschen_width - WIDO_FRAME_THICKNESS						fb = -rSill - WIDO_SILL - WIDO_FRAME_THICKNESS					endif				else					 if not(WIDO_REVEAL_SIDE) then						fk = -rSill - WIDO_SILL + gs_faschen_width						fb = -rSill - WIDO_SILL					else						fk = rSill - WIDO_SILL - WIDO_FRAME_THICKNESS + gs_faschen_width						fb = rSill - WIDO_SILL - WIDO_FRAME_THICKNESS					endif				endif				kfLx = ySign*fk * sin(alfaleft - alfaLeftJamb * not(gs_stack_left) + alfafaschen * not(gs_stack_left))				kfLy = fk * cos(alfaleft - alfaLeftJamb * not(gs_stack_left) + alfafaschen * not(gs_stack_left))	 - wod	+  WIDO_FRAME_THICKNESS * WIDO_REVEAL_SIDE				kfRx = -ySign*fk * sin(alfaright - alfaRightJamb * not(gs_stack_Right) + alfafaschen * not(gs_stack_right))				kfRy = fk * cos(alfaright - alfaRightJamb * not(gs_stack_Right) + alfafaschen * not(gs_stack_right)) - wod	+  WIDO_FRAME_THICKNESS * WIDO_REVEAL_SIDE				bfLx = ySign*fb * sin(alfaleft - alfaLeftJamb * not(gs_stack_left) + alfafaschen * not(gs_stack_left))				bfLy = fb * cos(alfaleft - alfaLeftJamb * not(gs_stack_left) + alfafaschen * not(gs_stack_left))	- wod	+  WIDO_FRAME_THICKNESS * WIDO_REVEAL_SIDE				bfRx = -ySign*fb * sin(alfaright - alfaRightJamb * not(gs_stack_Right) + alfafaschen * not(gs_stack_right))				bfRy = fb * cos(alfaright - alfaRightJamb * not(gs_stack_Right) + alfafaschen * not(gs_stack_right)) - wod	+  WIDO_FRAME_THICKNESS * WIDO_REVEAL_SIDE				prism_ 6, gs_height,					kfLx, kfLy, 79,					0, -wod, 979,					kfRx, kfRy, 3015,					bfRx, bfRy, 79,					0, -wod, 979,					bfLx, bfLy, 3015			else				prism_ 4, gs_height,					-aaa/2,		0, 15,					 aaa/2,		0, 15,					 aaa/2,		gs_faschen_width, 15,					-aaa/2,		gs_faschen_width, 15			endif		del 2		txAngle = 90: gosub 200	endif	if iFaschenTyp = WIN_MOLDING_PLASTER and mort_n = 2 then		! Plaster left - right		material mat_brick_plaster			if curvedWall then				addy B-gs_reveal_top					addz (rSill+(-WIDO_SILL))*ySign - (-WIDO_SILL*2)*(ySign=1) +  WIDO_FRAME_THICKNESS * WIDO_REVEAL_SIDE						prism_ 4, gs_faschen_width,							-gs_height/2,		0, 15,							gs_height/2,	0, 15,							gs_height/2,	-aaa, 15,							-gs_height/2,	-aaa, 15					del 1				del 1			else				addz gs_faschen_width				rotx -90					prism_ 4, gs_height,						-aaa/2,		0, 15,						 aaa/2,		0, 15,						 aaa/2,		gs_faschen_width, 15,						-aaa/2,		gs_faschen_width, 15				del 2			endif		txAngle = 90: gosub 200	endif	if iFaschenTyp = WIN_MOLDING_BRICKWORK and mort_n = 1 then		! Brick bottom - top		if curvedWall then			masonryL  = alpha *  (rSill+(gs_faschen_width-WIDO_SILL)) * PI / 180		else			masonryL  = aaa		endif		numBricks = int(masonryL / (gs_faschen_brick_thk + gs_faschen_mort_thk))		mortaralpha = (alpha-brickalpha*numBricks)/(numBricks-1)		if curvedWall then			mortarbeta2 = brickalpha + mortaralpha - 2*(atn((gs_faschen_brick_thk/2)/(rSill+(-WIDO_SILL))))			mortarbeta1 = brickalpha + mortaralpha - 2*(atn((gs_faschen_brick_thk/2)/(rSill+(gs_faschen_width-WIDO_SILL)-0.01)))			mortarThk2  = (rSill+(-WIDO_SILL))*tan(mortarbeta2/2)			mortarThk1  = (rSill+(gs_faschen_width-WIDO_SILL)-0.01)*tan(mortarbeta1/2)		else			mortarThk  = (masonryL - (numBricks * gs_faschen_brick_thk)) / (numBricks - 1)		endif		if not(curvedWall) then			addx -rightwidth \				+ (gs_reveal_left  - gs_faschen_A + not(gs_faschen_L) * gs_faschen_A) * not(gs_stack_left)  / 2 \				+ (gs_reveal_right - gs_faschen_A + not(gs_faschen_R) * gs_faschen_A) * not(gs_stack_right) / 2 \				- (gs_faschen_ovhg_right + gs_faschen_ovhg_left) / 2 \				- (leftwidth - rightwidth) / 2			rotx -90			material mat_brick_plaster			for i=1 to numBricks					muly -1						block gs_faschen_brick_thk, gs_faschen_width, gs_height					del 1				txAngle = 90: gosub 200				addx gs_faschen_brick_thk + mortarThk			next i			del numBricks			material gs_faschen_mort_mat			for i=1 to numBricks - 1				add gs_faschen_brick_thk, -0.01, 0				muly -1					block mortarThk, gs_faschen_width - masonryArchMortInset, gs_height				del 2				addx gs_faschen_brick_thk + mortarThk			next i			del (numBricks - 1)			del 1			txAngle = 90: gosub 200			del 1		else			addz wod+gs_faschen_width			roty -alfaRight  + alfaRightjamb*not(gs_stack_right) - alfafaschen + brickalpha/2 + gs_stack_right * alfafaschen  - (-alfaLeftJamb + alfaRightJamb)*(ySign = 1)			for ii=1 to numBricks				addz (rSill+(gs_faschen_width-WIDO_SILL))*ySign - (gs_faschen_width*2 -WIDO_SILL*2)*(ySign=1)					material mat_brick_plaster					prism_ 4, gs_faschen_width,						-gs_faschen_brick_thk/2, 0, 15,						gs_faschen_brick_thk/2, 0, 15,						gs_faschen_brick_thk/2, gs_height, 15,						-gs_faschen_brick_thk/2, gs_height, 15					txAngle = 90: gosub 200				del 1				roty mortaralpha + brickalpha			next ii			del numBricks			roty brickalpha/2 + mortaralpha/2			for jj=1 to numBricks - 1				addz ((rSill+(gs_faschen_width-WIDO_SILL))-0.01 )*ySign - (gs_faschen_width -WIDO_SILL*2 - 0.01)*(ySign=1)				mulz -1*ySign					material gs_faschen_mort_mat					addy gs_height					rotx 90						prism_ 4,  gs_height,							mortarThk1, 0, 15,							-mortarThk1, 0, 15,							-mortarThk2, gs_faschen_width-0.01, 15,							mortarThk2, gs_faschen_width-0.01, 15					del 2					txAngle = 90: gosub 200				del 2				roty mortaralpha + brickalpha			next jj			del numBricks - 1			del 1			del 2		endif	endif	if iFaschenTyp = WIN_MOLDING_BRICKWORK and mort_n = 2 then		! Brick side		masonryL  = aaa		numBricks = int((masonryL + gs_faschen_brick_thk * corrmort) / (gs_faschen_brick_thk + gs_faschen_mort_thk)) - 1		mortarThk  = (masonryL - (numBricks * gs_faschen_brick_thk)) / (numBricks + 1 - corrmort)		if not(curvedWall) then			addx -aaa/2				material mat_brick_plaster				for i=1 to numBricks					addx  mortarThk						block gs_faschen_brick_thk, gs_height, gs_faschen_width					del 1					txAngle = 90: gosub 200					addx gs_faschen_brick_thk + mortarThk				next i				del numBricks				material gs_faschen_mort_mat				add 0, 0, masonryArchMortInset					block mortarThk, gs_height, gs_faschen_width - masonryArchMortInset				del 1				for i=1 to numBricks - corrmort					add gs_faschen_brick_thk + mortarThk, 0, masonryArchMortInset						block mortarThk, gs_height, gs_faschen_width - masonryArchMortInset					del 1					addx gs_faschen_brick_thk + mortarThk				next i				del numBricks - corrmort				txAngle = 90: gosub 200			del 1		else			material gs_faschen_mort_mat			for i=1 to numBricks + 1					addz ((rSill+(-WIDO_SILL)) - 0.01)*ySign - ( -WIDO_SILL*2 - 0.02)*(ySign=1) +  WIDO_FRAME_THICKNESS * WIDO_REVEAL_SIDE						prism_ 4, gs_faschen_width - 0.01,							gs_height/2, 0, 15,							-gs_height/2, 0, 15,							-gs_height/2, mortarThk, 15,							gs_height/2, mortarThk, 15					del 1				txAngle = 0: gosub 200				addy gs_faschen_brick_thk + mortarThk			next i			del numBricks + 1			addy mortarThk				material mat_brick_plaster				for i=1 to numBricks						addz (rSill+(-WIDO_SILL))*ySign - ( -WIDO_SILL*2)*(ySign=1) +  WIDO_FRAME_THICKNESS * WIDO_REVEAL_SIDE							prism_ 4, gs_faschen_width,								gs_height/2, 0, 15,								-gs_height/2, 0, 15,								-gs_height/2, gs_faschen_brick_thk, 15,								gs_height/2, gs_faschen_brick_thk, 15						del 1					txAngle = 0: gosub 200					addy gs_faschen_brick_thk + mortarThk				next i				del numBricks			del 1		endif	endifdel 1if WIDO_REVEAL_SIDE then	del 2endifdel 1!endif!!returnend200:! ==============================================================================! Texture alignment! ------------------------------------------------------------------------------! Input Parameters:!	txAngle:			rotation angle of texture! ==============================================================================	base	roty txAngle	vert 0, 0, 0	vert 1, 0, 0	vert 0, 1, 0	vert 0, 0, 1	coor 2 + 256, -1, -2, -3, -4	body 1	del 1return