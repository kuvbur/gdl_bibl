!if WIDO_REVEAL_SIDE then!	add2 0,-WIDO_FRAME_THICKNESS!else!	mul2 1,-1!endif! Contact person: <NJ>! ==============================================================================!! ------------------------------------------------------------------------------! Input parameters:!	refWidth:				reference width in curved walls (length)!	leftWidth:				wallhole's side distance from the origin at the left side (length)!	rightWidth:				wallhole's side distance from the origin at the right side (length)!	bWndCurved:				is the window made of curved panels (0 / 1)!	bParalellInCurvedWalls:	is the wallhole parallel in curved walls (0 / 1)! Reveal Geometry Parameters:!	iRevealType:			reveal type (integer)!								0 = no Reveal!								1 = Positive Reveal!								2 = Negative Reveal!								3 = Slanted Reveal!								4 =!	gs_reveal_left:			left reveal size (length)!	gs_reveal_right:		left reveal size (length)!	gs_reveal_left_angle:	left reveal angle in case of slanted reveal (angle)!	gs_reveal_right_angle:	right reveal angle in case of slanted reveal (angle)!	leftRevealPnts:!	rightRevealPnts:! Wall Geometry Parameters:!	radSill:				wall radius at the sill side (length)!	radBoard:				wall radius at the board side (length)!	WOD:					"wido orig dist" in the wallhole coordinate system (length)!	bGangingLeft:			Align to door/window on left side (0 / 1)!	bGangingRight:			Align to door/window on right side (0 / 1)! Sill and Board Parameters:!	gs_sill_outside:!	gs_sill_ovhg_left:!	gs_sill_ovhg_right:!	gs_board_inside:!	gs_board_ovhg_left:!	gs_board_ovhg_right:! Casing Parameters:!	iTim:!	gs_tw_left_in:!	gs_tw_ringht_in:!	gs_tw_left_out:!	gs_tw_ringht_out:! ------------------------------------------------------------------------------! Output parameters:! ==============================================================================EPS = 0.0001curvedWall		= abs(WIDO_ORIG_DIST) > EPSwallIsLeft		= (SYMB_ROTANGLE > EPS) exor WIDO_REVEAL_SIDEsignWallIsLeft	= wallIsleft - not(wallIsleft)! ==============================================================================REVEAL_EDGE				= 0REVEAL_NO				= 1REVEAL_POSITIVE			= 2REVEAL_NEGATIVE			= 3REVEAL_SLANTED			= 4REVEAL_SPLAYED			= 5REVEAL_HISTORIC			= 6REVEAL_DOUBLE			= 7REVEAL_DOUBLE_SPLAYED	= 8REVEAL_OUTSIDE_SPLAYED	= 9! ==============================================================================! Reveal Points Indices! ==============================================================================idxSillStartRevealLeft		= iRevealPointsIdx[1]idxSillEndRevealLeft		= iRevealPointsIdx[2]idxFrameStartRevealLeft		= iRevealPointsIdx[3]idxFrameEndRevealLeft		= iRevealPointsIdx[4]idxBoardStartRevealLeft		= iRevealPointsIdx[5]idxBoardEndRevealLeft		= iRevealPointsIdx[6]idxSillStartPlasterLeft		= iRevealPointsIdx[7]idxSillEndPlasterLeft		= iRevealPointsIdx[8]idxBoardStartPlasterLeft	= iRevealPointsIdx[9]idxBoardEndPlasterLeft		= iRevealPointsIdx[10]idxSillStartRevealRight		= iRevealPointsIdx[11]idxSillEndRevealRight		= iRevealPointsIdx[12]idxFrameStartRevealRight	= iRevealPointsIdx[13]idxFrameEndRevealRight		= iRevealPointsIdx[14]idxBoardStartRevealRight	= iRevealPointsIdx[15]idxBoardEndRevealRight		= iRevealPointsIdx[16]idxSillStartPlasterRight	= iRevealPointsIdx[17]idxSillEndPlasterRight		= iRevealPointsIdx[18]idxBoardStartPlasterRight	= iRevealPointsIdx[19]idxBoardEndPlasterRight		= iRevealPointsIdx[20]! ==============================================================================! Compatibility! ==============================================================================if refWidth   < EPS then refWidth   = Aif leftWidth  < EPS then leftWidth  = A / 2if rightWidth < EPS then rightWidth = A / 2! ==============================================================================dim lineSections[]lineSections[1] = 0LINE_BEG_X		= 1LINE_BEG_Y		= 2LINE_END_X		= 3LINE_END_Y		= 4LINE_ATTRIBUTES	= 5	! bitfield, look at LINE_ATTRIBUTES_xxx for available valuesLINE_PEN_IDX	= 6LINE_LTYPE_IDX	= 7LINE_STRUCTURE_SIZE	= 7LINE_ATTRIBUTES_GDLLINE		= 1			! Draw GDL Line in the sectionLINE_ATTRIBUTES_WALLLINE	= 2			! Draw WallLine in the sectionLINE_ATTRIBUTES_WALLSIDE	= 4			! The section is on the wall side (it is an arc in curved wall)LINE_ATTRIBUTES_DRAWCC		= 8			! The section is drawn by CavityClosure macro (otherwise the WallHoleCut macro)LINE_ATTRIBUTES_CONTOUR		= 16		! The section is contour or inner lineLINE_ATTRIBUTES_WALLEDGE	= 0			! The section is on the wall edge (always a straight line)! ==============================================================================! Calculations for Trapezoid Walls! ==============================================================================if abs(WALL_INCL) > EPS then	bInclinedWall = 1	bInclDir = SYMB_MIRRORED exor (SYMB_ROTANGLE > EPS)	! (0 / 1)	iInclDir = not(bInclDir) - bInclDir					! (1 / -1)	incH = cos(WALL_INCL)	incV = sin(WALL_INCL) * iInclDir	incHor = tan(WALL_INCL)else	bInclinedWall = 0	bInclDir = 0	iInclDir = 0	incH = 0	incV = 0	incHor = 0endif! ==============================================================================! Calculations for Curved Walls! ==============================================================================if curvedWall & abs(radSill) > EPS & abs(radBoard) > EPS then	arcLengthSillToAngle	= 180 / radSill  / PI	arcLengthBoardToAngle	= 180 / radBoard / PIendif! ==============================================================================! Calculations for Minimal Space! ==============================================================================sillMSWallLeft_x	= 0sillMSWallRight_x	= 0boardMSWallLeft_x	= 0boardMSWallRight_x	= 0sillMSWallLeft_y	= 0sillMSWallRight_y	= 0boardMSWallLeft_y	= 0boardMSWallRight_y	= 0reqBMinSpace = 0success = LIBRARYGLOBAL ("LibraryGlobals13", "showBMinSpace", reqBMinSpace)if success > 0 and reqBMinSpace then	!---------------------------------------	! Limits	!---------------------------------------	sillLeftMinReveal	= abs(leftRevealPnts[idxSillStartPlasterLeft][1])	+ egressOffset - EgressMSWidth	sillRightMinReveal	= abs(rightRevealPnts[idxSillStartPlasterRight][1])	- egressOffset	boardRightMinReveal	= abs(rightRevealPnts[idxBoardEndPlasterRight][1])	- egressOffset	boardLeftMinReveal	= abs(leftRevealPnts[idxBoardEndPlasterLeft][1])	+ egressOffset - EgressMSWidth	!---------------------------------------	! x Coordinates	!---------------------------------------	if not(WIDO_REVEAL_SIDE) then		boardMSWidthLeft	= msOppositeSideWidth2		sillMSWidthLeft		= msOpeningSideWidth2		boardMSWidthRight	= msOppositeSideWidth1		sillMSWidthRight	= msOpeningSideWidth1	else		boardMSWidthLeft	= msOpeningSideWidth2		sillMSWidthLeft		= msOppositeSideWidth2		boardMSWidthRight	= msOpeningSideWidth1		sillMSWidthRight	= msOppositeSideWidth1	endif	if boardLeftMinReveal < (boardMSWidthLeft + EPS) then		boardMSWallLeft_x = egressOffset - EgressMSWidth - boardMSWidthLeft	endif	if boardRightMinReveal < (EPS + boardMSWidthRight) then		boardMSWallRight_x = egressOffset + boardMSWidthRight	endif	if sillLeftMinReveal < (EPS + sillMSWidthLeft) then		sillMSWallLeft_x = egressOffset - EgressMSWidth - sillMSWidthLeft	endif	if sillRightMinReveal < (EPS + sillMSWidthRight) then		sillMSWallRight_x = egressOffset  + sillMSWidthRight	endif	!---------------------------------------	! y coordinates	!---------------------------------------	if not(curvedWall) then		if not(bInclinedWall) then			if boardLeftMinReveal < boardMSWidthLeft then				boardMSWallLeft_y = WALL_THICKNESS - WIDO_SILL			endif			if boardRightMinReveal < boardMSWidthRight then				boardMSWallRight_y = WALL_THICKNESS - WIDO_SILL			endif			if sillLeftMinReveal < sillMSWidthLeft then				sillMSWallLeft_y = -WIDO_SILL			endif			if sillRightMinReveal < sillMSWidthRight then				sillMSWallRight_y = -WIDO_SILL			endif		else			if boardLeftMinReveal < boardMSWidthLeft then				boardMSWallLeft_y = WALL_THICKNESS - WIDO_SILL - iInclDir * incHor * (boardMSWidthLeft + EgressMSWidth - egressOffset)			endif			if boardRightMinReveal < boardMSWidthRight then				boardMSWallRight_y = WALL_THICKNESS - WIDO_SILL + iInclDir * incHor * (boardMSWidthRight + egressOffset)			endif			if sillLeftMinReveal < sillMSWidthLeft then				sillMSWallLeft_y = -WIDO_SILL			endif			if sillRightMinReveal < sillMSWidthRight then				sillMSWallRight_y = -WIDO_SILL			endif		endif	else		if boardLeftMinReveal < boardMSWidthLeft then			boardMSWallLeft_y = signWallIsLeft * (abs(WOD) - sqr(radBoard^2 - boardMSWallLeft_x^2))		endif		if boardRightMinReveal < boardMSWidthRight then			boardMSWallRight_y = signWallIsLeft * (abs(WOD) - sqr(radBoard^2 - boardMSWallRight_x^2))		endif		if sillLeftMinReveal < sillMSWidthLeft then			sillMSWallLeft_y = signWallIsLeft * (abs(WOD) - sqr(radSill^2 - sillMSWallLeft_x^2))		endif		if sillRightMinReveal < sillMSWidthRight then			sillMSWallRight_y = signWallIsLeft * (abs(WOD) - sqr(radSill^2 - sillMSWallRight_x^2))		endif	endifendif! ==============================================================================! Uniform Casing Width! ==============================================================================if gs_trim_outside_uniform then	gs_tw_left_out	= gs_tw_right_out	gs_tw_top_out	= gs_tw_right_outendifif gs_trim_inside_uniform then	gs_tw_left_in	= gs_tw_right_in	gs_tw_top_in	= gs_tw_right_inendif! ==============================================================================!! ==============================================================================dim revealPnts[][2]idx = 0xb = 0sideSign = 0casingOvhg = 0if not(bGangingLeft) & not(bLeftCornerFunction) & vardim1(leftRevealPnts) > 1 then	sideSign		= -1	holeWidth		= leftWidth	revealWidth		= gs_reveal_left	revealAngle		= gs_reveal_left_angle	revealPnts		= leftRevealPnts	sillOverhang	= gs_sill_ovhg_left	boardOverhang	= gs_board_ovhg_left	if bDoorWithSidelightSupport then		bSill	= (not(gs_sidelight_left) & gs_sill_outside) | \				  (gs_sidelight_left & gs_sidelight_parapet_hgt_left < EPS & gs_sill_outside) | \				  (gs_sidelight_left & gs_sidelight_parapet_hgt_left > EPS & gs_sill_outside_sl_left)		bBoard	= (gs_sidelight_left & gs_sidelight_parapet_hgt_left > EPS & gs_board_inside_sl_left)	else		bSill			= (gs_sill_outside)		bBoard			= (gs_board_inside)	endif	if bCasingTolerance then		casingOverhangIn	= gs_tw_left_in  - gs_trim_width_in  + gs_trim_offs_in - gs_tolerance_left		if bDrawOutsideTrim & gs_trim_atframe_out then			casingOverhangOut	= gs_tw_left_out - gs_trim_width_out + gs_trim_offs_out		else			casingOverhangOut	= gs_tw_left_out - gs_trim_width_out + gs_trim_offs_out - gs_frame_width - gs_tolerance_left		endif	else		casingOverhangIn	= gs_tw_left_in  - gs_trim_width_in  + gs_trim_offs_in		casingOverhangOut	= gs_tw_left_out - gs_trim_width_out + gs_trim_offs_out	endif	bPocketHoleonSide	= 0	if (bReversePocketSide & (gs_pocket_leafs = 1)) | (gs_pocket_leafs = 2) then bPocketHoleonSide = 1	overSize			= gs_left_oversize	bTurnSkin_Sill		= bSkinTurnLeft	bTurnSkin_Board		= bSkinTurnLeft	bPlasterTurnSill	= bPlasterTurnSillLeft	bPlasterTurnBoard	= bPlasterTurnBoardLeft	idxSillStartReveal	= idxSillStartRevealLeft	idxSillEndReveal	= idxSillEndRevealLeft	idxFrameStartReveal	= idxFrameStartRevealLeft	idxFrameEndReveal	= idxFrameEndRevealLeft	idxBoardStartReveal	= idxBoardStartRevealLeft	idxBoardEndReveal	= idxBoardEndRevealLeft	idxSillStartPlaster	= idxSillStartPlasterLeft	idxSillEndPlaster	= idxSillEndPlasterLeft	idxBoardStartPlaster= idxBoardStartPlasterLeft	idxBoardEndPlaster	= idxBoardEndPlasterLeft	sillMSWall_x		= sillMSWallLeft_x	sillMSWall_y		= sillMSWallLeft_y	boardMSWall_x		= boardMSWallLeft_x	boardMSWall_y		= boardMSWallLeft_y	gosub 100endifif not(bGangingRight) & not(bRightCornerFunction) & vardim1(rightRevealPnts) > 1 then	sideSign		= 1	holeWidth		= rightWidth	revealWidth		= gs_reveal_right	revealAngle		= gs_reveal_right_angle	revealPnts		= rightRevealPnts	sillOverhang	= gs_sill_ovhg_right	boardOverhang	= gs_board_ovhg_right	if bDoorWithSidelightSupport then		bSill	= (not(gs_sidelight_right) & gs_sill_outside) | \				  (gs_sidelight_right & gs_sidelight_parapet_hgt_right < EPS & gs_sill_outside) | \				  (gs_sidelight_right & gs_sidelight_parapet_hgt_right > EPS & gs_sill_outside_sl_right)		bBoard	= (gs_sidelight_right & gs_sidelight_parapet_hgt_right > EPS & gs_board_inside_sl_right)	else		bSill	= (gs_sill_outside)		bBoard	= (gs_board_inside)	endif	if bCasingTolerance then		casingOverhangIn	= gs_tw_right_in  - gs_trim_width_in  + gs_trim_offs_in - gs_tolerance_right		if bDrawOutsideTrim & gs_trim_atframe_out then			casingOverhangOut	= gs_tw_right_out - gs_trim_width_out + gs_trim_offs_out		else			casingOverhangOut	= gs_tw_right_out - gs_trim_width_out + gs_trim_offs_out - gs_frame_width - gs_tolerance_right		endif	else		casingOverhangIn	= gs_tw_right_in  - gs_trim_width_in  + gs_trim_offs_in		casingOverhangOut	= gs_tw_right_out - gs_trim_width_out + gs_trim_offs_out	endif	bPocketHoleonSide	= 0	if (not(bReversePocketSide) & (gs_pocket_leafs = 1)) | gs_pocket_leafs = 2 then bPocketHoleonSide = 1	overSize			= gs_right_oversize	bTurnSkin_Sill		= bSkinTurnRight	bTurnSkin_Board		= bSkinTurnRight	bPlasterTurnSill	= bPlasterTurnSillRight	bPlasterTurnBoard	= bPlasterTurnBoardRight	idxSillStartReveal	= idxSillStartRevealRight	idxSillEndReveal	= idxSillEndRevealRight	idxFrameStartReveal	= idxFrameStartRevealRight	idxFrameEndReveal	= idxFrameEndRevealRight	idxBoardStartReveal	= idxBoardStartRevealRight	idxBoardEndReveal	= idxBoardEndRevealRight	idxSillStartPlaster	= idxSillStartPlasterRight	idxSillEndPlaster	= idxSillEndPlasterRight	idxBoardStartPlaster= idxBoardStartPlasterRight	idxBoardEndPlaster	= idxBoardEndPlasterRight	sillMSWall_x		= sillMSWallRight_x	sillMSWall_y		= sillMSWallRight_y	boardMSWall_x		= boardMSWallRight_x	boardMSWall_y		= boardMSWallRight_y	gosub 100endifend lineSections! ==============================================================================end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end! ==============================================================================! ==============================================================================!! ------------------------------------------------------------------------------! Input variables:!	sideSign:			(1, -1)!	holeWidth:!	revealWidth:!	revealAngle:!	revealPnts:!	sillOverhang:!	boardOverhang:!	casingOverhangIn:!	casingOverhangOut:!	bTurnSkin_Sill:!	bTurnSkin_Board:!	bPlasterTurnSill:!	bPlasterTurnBoard:!! Returned variables:!	lineSections:		entries in the lineSections array! ==============================================================================100:DoubRevSill = 0if iRevealType = REVEAL_DOUBLE  then DoubRevSill = 1! Window Frame -----------------------------------------------------------------!!	iAttributes	= LINE_ATTRIBUTES_WALLEDGE + (WIDO_FRAME_THICKNESS > EPS & overSize < EPS) * LINE_ATTRIBUTES_GDLLINE + LINE_ATTRIBUTES_WALLLINE + bTurnSkin_Sill * LINE_ATTRIBUTES_DRAWCC	iAttributes	= LINE_ATTRIBUTES_WALLEDGE + (not(isEmptyOpening) & WIDO_FRAME_THICKNESS > EPS & overSize < EPS) * LINE_ATTRIBUTES_GDLLINE + LINE_ATTRIBUTES_WALLLINE + bTurnSkin_Sill * LINE_ATTRIBUTES_DRAWCC	if WIDO_FRAME_THICKNESS > EPS then		idxFirst = min(idxFrameStartReveal, idxFrameEndReveal)		idxLast	 = max(idxFrameStartReveal, idxFrameEndReveal)		for i=idxFirst to idxLast - 1			idxBeg	 	= i			idxEnd	 	= i + 1			gosub 200		next i	endif!!	iAttributes	= LINE_ATTRIBUTES_WALLEDGE + (WIDO_FRAME_THICKNESS > EPS) * LINE_ATTRIBUTES_GDLLINE + LINE_ATTRIBUTES_WALLLINE + bTurnSkin_Sill * LINE_ATTRIBUTES_DRAWCC	iAttributes	= LINE_ATTRIBUTES_WALLEDGE + (not(isEmptyOpening) & WIDO_FRAME_THICKNESS > EPS) * LINE_ATTRIBUTES_GDLLINE + LINE_ATTRIBUTES_WALLLINE + bTurnSkin_Sill * LINE_ATTRIBUTES_DRAWCC	if iRevealType = REVEAL_POSITIVE | iRevealType = REVEAL_SLANTED | iRevealType = REVEAL_SPLAYED | iRevealType = REVEAL_HISTORIC | iRevealType = REVEAL_DOUBLE | iRevealType = REVEAL_DOUBLE_SPLAYED | iRevealType = REVEAL_OUTSIDE_SPLAYED then		idxFirst = min(idxFrameStartReveal, idxSillEndReveal)		idxLast	 = max(idxFrameStartReveal, idxSillEndReveal)		for i=idxFirst to idxLast - 1			idxBeg	 	= i			idxEnd	 	= i + 1			gosub 200		next i	endif	if iRevealType = REVEAL_DOUBLE then		idxFirst = min(idxBoardStartReveal, idxFrameEndReveal)		idxLast	 = max(idxBoardStartReveal, idxFrameEndReveal)		for i=idxFirst to idxLast - 1			idxBeg	 	= i			idxEnd	 	= i + 1			gosub 200		next i	endif! POLY2_B Casing ---------------------------------------------------------------	if reqBMinSpace & abs(sillMSWall_x) > EPS then		iAttributes	= LINE_ATTRIBUTES_WALLEDGE + LINE_ATTRIBUTES_GDLLINE + bTurnSkin_Sill * LINE_ATTRIBUTES_DRAWCC		idxFirst = min(idxSillStartPlaster, idxSillEndPlaster)		idxLast	 = max(idxSillStartPlaster, idxSillEndPlaster)		for i=idxFirst to idxLast - 1			idxBeg	 	= i			idxEnd	 	= i + 1			gosub 200		next i		iAttributes	= LINE_ATTRIBUTES_WALLSIDE + LINE_ATTRIBUTES_GDLLINE + bTurnSkin_Sill * LINE_ATTRIBUTES_DRAWCC		xb = sillMSWall_x		yb = sillMSWall_y		xe = revealPnts[idxSillStartPlaster][1]		ye = revealPnts[idxSillStartPlaster][2]		gosub 201	endif	if not(bPlasterTurnSill) then		if bDrawOutsideTrim & not(gs_trim_atframe_out) then			iAttributes	= LINE_ATTRIBUTES_WALLEDGE + LINE_ATTRIBUTES_GDLLINE + LINE_ATTRIBUTES_WALLLINE + bTurnSkin_Sill * LINE_ATTRIBUTES_DRAWCC			idxFirst = min(idxSillStartReveal, idxSillEndReveal)			idxLast	 = max(idxSillStartReveal, idxSillEndReveal)			for i=idxFirst to idxLast - 1				idxBeg	 	= i				idxEnd	 	= i + 1				gosub 200			next i!			if iRevealType = REVEAL_NEGATIVE | iRevealType = REVEAL_DOUBLE then!				xb = revealPnts[2][1]!				yb = revealPnts[2][2]!!				xe = revealPnts[2][1] - sideSign * gs_trim_width_out!				ye = revealPnts[2][2]!				if (revealPnts[2][1] - revealPnts[3][1]) * sideSign > 0 then!					gosub 201!				endif!			endif		endif		if bDrawOutsideTrim & gs_trim_atframe_out then			pIdx1 = idxSillStartReveal + 1			xb = sideSign * min(abs(revealPnts[pIdx1][1] + sideSign * casingOverhangOut), abs(revealPnts[pIdx1][1]))			yb = revealPnts[pIdx1][2]			pIdx2 = idxFrameStartReveal			xe = sideSign * min(abs(revealPnts[pIdx2][1]), abs(revealPnts[2][1] + sideSign * casingOverhangOut))			ye = revealPnts[pIdx2][2]			if (revealPnts[pIdx1][1] - revealPnts[pIdx2][1]) * sideSign > 0 then	!! & casingOverhangOut <= 0				gosub 201			endif			if abs(casingOverhangOut) < EPS then				xb = revealPnts[pIdx1][1]				yb = revealPnts[pIdx1][2]				xe = revealPnts[pIdx1][1]				ye = max(revealPnts[pIdx1][2] - gs_trim_thk_out, revealPnts[idxSillStartReveal][2])					gosub 201			endif		endif	endif	if reqBMinSpace & abs(boardMSWall_x) > EPS then		iAttributes	= LINE_ATTRIBUTES_WALLEDGE + LINE_ATTRIBUTES_GDLLINE + bTurnSkin_Board * LINE_ATTRIBUTES_DRAWCC		idxFirst = min(idxBoardStartPlaster, idxBoardEndPlaster)		idxLast	 = max(idxBoardStartPlaster, idxBoardEndPlaster)		for i=idxFirst to idxLast - 1			idxBeg	 	= i			idxEnd	 	= i + 1			gosub 200		next i		iAttributes	= LINE_ATTRIBUTES_WALLSIDE + LINE_ATTRIBUTES_GDLLINE + bTurnSkin_Board * LINE_ATTRIBUTES_DRAWCC		xb = boardMSWall_x		yb = boardMSWall_y		xe = revealPnts[idxBoardEndPlaster][1]		ye = revealPnts[idxBoardEndPlaster][2]		gosub 201	endif	if not(bPlasterTurnBoard) then		if bDrawInsideTrim & not(gs_trim_atframe_in) then			iAttributes	= LINE_ATTRIBUTES_WALLEDGE + LINE_ATTRIBUTES_GDLLINE + bTurnSkin_Board * LINE_ATTRIBUTES_DRAWCC			idxFirst = min(idxBoardStartReveal, idxBoardEndReveal)			idxLast	 = max(idxBoardStartReveal, idxBoardEndReveal)			for i=idxFirst to idxLast - 1				idxBeg	 	= i				idxEnd	 	= i + 1				gosub 200			next i		endif		if bDrawInsideTrim & gs_trim_atframe_in then			xb = revealPnts[idxBoardStartReveal][1]			yb = revealPnts[idxBoardStartReveal][2]			xe = revealPnts[idxBoardStartReveal][1]			ye = min ((revealPnts[idxBoardStartReveal][2] + gs_trim_thk_in), revealPnts[idxBoardEndReveal][2])			gosub 201		endif	endif! Threshold ---------------------------------------------------------------------	if not(bPlasterTurnSill) then		if not(bDrawOutsideTrim) and bSillSideTreshold then			iAttributes	= LINE_ATTRIBUTES_WALLEDGE + LINE_ATTRIBUTES_GDLLINE + bTurnSkin_Sill * LINE_ATTRIBUTES_DRAWCC			idxFirst = min(idxSillStartReveal, idxSillEndReveal)			idxLast	 = max(idxSillStartReveal, idxSillEndReveal)			for i=idxFirst to idxLast - 1				idxBeg	 	= i				idxEnd	 	= i + 1				gosub 200			next i		endif	endif	if bSillSideTreshold then		ovhg = gs_treshold_ovhg_2		xb = revealPnts[idxSillStartReveal][1]		yb = revealPnts[idxSillStartReveal][2]		if curvedWall then			x = xb			y = yb			alpha = sideSign * arcLengthSillToAngle * ovhg			gosub 300			xe = x			ye = y		else			xe = xb + sideSign * ovhg			ye = yb		endif		iAttributes	= LINE_ATTRIBUTES_WALLSIDE + LINE_ATTRIBUTES_GDLLINE + bTurnSkin_Sill * LINE_ATTRIBUTES_DRAWCC		gosub 201	endif	if not(bPlasterTurnBoard) then		if not(bDrawInsideTrim) and bBoardSideTreshold then			iAttributes	= LINE_ATTRIBUTES_WALLEDGE + LINE_ATTRIBUTES_GDLLINE + bTurnSkin_Board * LINE_ATTRIBUTES_DRAWCC			idxFirst = min(idxBoardStartReveal, idxBoardEndReveal)			idxLast	 = max(idxBoardStartReveal, idxBoardEndReveal)			for i=idxFirst to idxLast - 1				idxBeg	 	= i				idxEnd	 	= i + 1				gosub 200			next i		endif	endif	if bBoardSideTreshold then		ovhg = gs_treshold_ovhg		xb = revealPnts[idxBoardEndReveal][1]		yb = revealPnts[idxBoardEndReveal][2]		if curvedWall then			x = xb			y = yb			alpha = sideSign * arcLengthBoardToAngle * ovhg			gosub 300			xe = x			ye = y		else			if bInclinedWall then				xe = xb + sideSign * ovhg * incH				ye = yb + sideSign * ovhg * incV			else				xe = xb + sideSign * ovhg				ye = yb			endif		endif		iAttributes	= LINE_ATTRIBUTES_WALLSIDE + LINE_ATTRIBUTES_GDLLINE + bTurnSkin_Board * LINE_ATTRIBUTES_DRAWCC		gosub 201	endif! Only WALLHOLE2 Sill ----------------------------------------------------------	if not(bPlasterTurnSill) then!		if not(bDrawOutsideTrim) then		!! & bSill			iAttributes	= LINE_ATTRIBUTES_WALLEDGE + LINE_ATTRIBUTES_WALLLINE + bTurnSkin_Sill * LINE_ATTRIBUTES_DRAWCC			idxFirst = min(idxSillStartReveal, idxSillEndReveal)			idxLast	 = max(idxSillStartReveal, idxSillEndReveal)			for i=idxFirst to idxLast - 1				idxBeg	 	= i				idxEnd	 	= i + 1				gosub 200			next i!		endif	endif	if bDrawOutsideTrim | bSill then		casingOvhg	= bDrawOutsideTrim * casingOverhangOut		sillOvhg	= bSill * sillOverhang		ovhg = max(casingOvhg, sillOvhg)		xb = revealPnts[idxSillStartReveal][1]		yb = revealPnts[idxSillStartReveal][2]		if curvedWall & abs(radSill) > EPS then			if bParalellInCurvedWalls then				xe = xb + sideSign * ovhg				ye = WOD - sqr(radSill^2 - xe^2) * signWallIsLeft			else				x = xb				y = yb				alpha = sideSign * arcLengthSillToAngle * ovhg				gosub 300				xe = x				ye = y			endif		else			xe = xb + sideSign * ovhg			ye = yb		endif		iAttributes	= LINE_ATTRIBUTES_WALLSIDE + LINE_ATTRIBUTES_WALLLINE + bTurnSkin_Sill * LINE_ATTRIBUTES_DRAWCC		gosub 201	endif	if bDrawOutsideTrim & not(gs_trim_atframe_out) then		casingOvhg	= bDrawOutsideTrim * casingOverhangOut		xb = revealPnts[idxSillStartReveal][1]		yb = revealPnts[idxSillStartReveal][2]		if curvedWall then			x = xb			y = yb			alpha = sideSign * arcLengthSillToAngle * casingOvhg			gosub 300			xe = x			ye = y		else			xe = xb + sideSign * casingOvhg			ye = yb		endif		iAttributes	= LINE_ATTRIBUTES_WALLSIDE + LINE_ATTRIBUTES_GDLLINE + bTurnSkin_Sill * LINE_ATTRIBUTES_DRAWCC		gosub 201	endif! Only WALLHOLE2 Board ---------------------------------------------------------	if not(bPlasterTurnBoard) then		iAttributes	= LINE_ATTRIBUTES_WALLEDGE + LINE_ATTRIBUTES_WALLLINE + bTurnSkin_Board * LINE_ATTRIBUTES_DRAWCC		idxFirst = min(idxBoardStartReveal, idxBoardEndReveal)		idxLast	 = max(idxBoardStartReveal, idxBoardEndReveal)		for i=idxFirst to idxLast - 1			idxBeg	 	= i			idxEnd	 	= i + 1			gosub 200		next i	endif	if bDrawInsideTrim | bBoard then		casingOvhg	= bDrawInsideTrim * casingOverhangIn		boardOvhg	= bBoard * boardOverhang		ovhg = max(casingOvhg, boardOvhg)		xb = revealPnts[idxBoardEndReveal][1]		yb = revealPnts[idxBoardEndReveal][2]		if curvedWall & abs(radBoard) > EPS then			if bParalellInCurvedWalls then				xe = xb + sideSign * ovhg				ye = WOD - sqr(radBoard^2 - xe^2) * signWallIsLeft			else				x = xb				y = yb				alpha = sideSign * arcLengthBoardToAngle * ovhg				gosub 300				xe = x				ye = y			endif		else			if bInclinedWall then				xe = xb + sideSign * ovhg * incH				ye = yb + sideSign * ovhg * incV			else				xe = xb + sideSign * ovhg				ye = yb			endif		endif		iAttributes	= LINE_ATTRIBUTES_WALLSIDE + LINE_ATTRIBUTES_WALLLINE + bDrawInsideTrim * LINE_ATTRIBUTES_GDLLINE + bTurnSkin_Board * LINE_ATTRIBUTES_DRAWCC		gosub 201	endif	if bDrawInsideTrim & not(gs_trim_atframe_in) then		casingOvhg	= bDrawInsideTrim * casingOverhangIn		xb = revealPnts[idxBoardEndReveal][1]		yb = revealPnts[idxBoardEndReveal][2]		if curvedWall then			x = xb			y = yb			alpha = sideSign * arcLengthBoardToAngle * casingOvhg			gosub 300			xe = x			ye = y		else			xe = xb + sideSign * casingOvhg * incH			ye = yb + sideSign * casingOvhg * incV		endif		iAttributes	= LINE_ATTRIBUTES_WALLSIDE + LINE_ATTRIBUTES_GDLLINE + bTurnSkin_Board * LINE_ATTRIBUTES_DRAWCC		gosub 201	endifreturn! ==============================================================================! Circle - Line intersection! ------------------------------------------------------------------------------! Input variables:!	EPS:				epsylon!	xo,yo,ro:			circle!	x1,y1, x2,y2		line!! Returned variables:!	state:				0 = no intersection point!						1 = one intersection point (tangential line)!						2 = two intersection points!	xaa, yaa:				intersection point #1!	xbb, ybb:				intersection point #2! ==============================================================================101:	tempX1 = x1 - xo: tempY1 = y1 - yo	tempX2 = x2 - xo: tempY2 = y2 - yo	if abs(tempX2 - tempX1) < EPS then		if abs(ro - abs(tempX1)) < EPS then			state = 1			xaa = tempX1			yaa = 0			xbb = tempX1			ybb = 0		else			if abs(ro) - abs(tempX1) < 0 then				state = 0: xaa = 0: yaa = 0: xbb = 0: ybb = 0			else				state = 2				xaa = tempX1				yaa = sqr(ro^2 - tempX1^2)				xbb = tempX1				ybb = -sqr(ro^2 - tempX1^2)			endif		endif	else		kf = (tempY2 - tempY1) / (tempX2 - tempX1)		ad = 1 + kf^2		bd = 2 * tempY1 * kf - 2 * tempX1 * kf^2		cd = tempY1^2 - 2 * tempX1 * tempY1 * kf + tempX1^2 * kf^2 - ro^2		if bd^2 - 4 * ad * cd < 0 then			state = 0: xaa = 0: yaa = 0: xbb = 0: ybb = 0		else			xaa = (-bd + sqr(bd^2 - 4 * ad * cd)) / (2 * ad)			yaa = tempY1 + (xaa - tempX1) * kf			xbb = (-bd - sqr(bd^2 - 4 * ad * cd)) / (2 * ad)			ybb = tempY1 + (xbb - tempX1) * kf			if abs(xaa - xbb) < EPS then state = 1 else state = 2		endif	endif	if state = 2 then		da = sqr((tempX1 - xaa)^2 + (tempY1 - yaa)^2)		db = sqr((tempX1 - xbb)^2 + (tempY1 - ybb)^2)		if db < da then			xxo = xaa: yyo = yaa			xaa = xbb: yaa = ybb			xbb = xxo: ybb = yyo		endif	endif	xaa = xaa + xo: yaa = yaa + yo	xbb = xbb + xo: ybb = ybb + yoreturn! ==============================================================================! Select good intersection point after Circle - Line intersection! ------------------------------------------------------------------------------! Input variables:!	state:				intersection status!	wallIsLeft:!	xaa, yaa:				intersection point #1!	xbb, ybb:				intersection point #2!! Returned variables:!	cx, cy:				selected intersection point! ==============================================================================102:	cx = 0	cy = 0	if state = 1 then		cx = xaa		cy = yaa	endif	if state = 2 then		if wallIsLeft then			if yaa > ybb then				cx = xbb				cy = ybb			else				cx = xaa				cy = yaa			endif		else			if yaa < ybb then				cx = xbb				cy = ybb			else				cx = xaa				cy = yaa			endif		endif	endifreturn! ==============================================================================! Put line section! ------------------------------------------------------------------------------! Input variables:!	idxBeg:				line begin point index in the revealPnts array!	idxEnd:				line end point index in the revealPnts array!	iAttributes:		line attribute bits! Returned variables:!	lineSections:		new entry in the lineSections array! ==============================================================================200:	xb = revealPnts[idxBeg][1]	yb = revealPnts[idxBeg][2]	xe = revealPnts[idxEnd][1]	ye = revealPnts[idxEnd][2]201:	if abs(xb - xe) < EPS & abs(yb - ye) < EPS then		return	endif	if curvedWall & abs(radSill) > EPS then		Rb = sqr(xb^2 + (yb - WOD)^2)		Re = sqr(xe^2 + (ye - WOD)^2)		if wallIsLeft then			if Rb > radSill + EPS & Re > radSill + EPS then				return			endif			if Rb > radSill + EPS | Re > radSill + EPS then				xo = 0				yo = WOD				ro = radSill				x1 = xb				y1 = yb				x2 = xe				y2 = ye				gosub 101	! Circle - Line intersection				gosub 102	! Select good intersection point				if Rb > radSill + EPS then					xb = cx					yb = cy				else					xe = cx					ye = cy				endif			endif		else			if Rb < radSill - EPS & Re < radSill - EPS then				return			endif			if Rb < radSill - EPS | Re < radSill - EPS then				xo = 0				yo = WOD				ro = radSill				x1 = xb				y1 = yb				x2 = xe				y2 = ye				gosub 101	! Circle - Line intersection				gosub 102	! Select good intersection point				if Rb < radSill - EPS then					xb = cx					yb = cy				else					xe = cx					ye = cy				endif			endif		endif		if abs(xb - xe) < EPS & abs(yb - ye) < EPS then			return		endif	else! Cut lines at Sill side  ------------------------------------------------------		if yb < -WIDO_SILL - EPS & ye < -WIDO_SILL - EPS then			return		endif		if yb < -WIDO_SILL - EPS then			if abs(xb - xe) < EPS then				yb = -WIDO_SILL			else				x11 = 0				y11 = -WIDO_SILL				x12 = 1				y12 = y11				x21 = xb				y21 = yb				x22 = xe				y22 = ye				gosub 210	! Line - Line intersection				xb = cx				yb = cy			endif		endif		if ye < -WIDO_SILL - EPS then			if abs(xb - xe) < EPS then				ye = -WIDO_SILL			else				x11 = 0				y11 = -WIDO_SILL				x12 = 1				y12 = y11				x21 = xb				y21 = yb				x22 = xe				y22 = ye				gosub 210	! Line - Line intersection				xe = cx				ye = cy			endif		endif! Cut lines at Board side  -----------------------------------------------------		if abs(WALL_INCL) < EPS then			if (yb > -WIDO_SILL + WALL_THICKNESS - EPS & ye > -WIDO_SILL + WALL_THICKNESS - EPS) & abs(yb - ye) > EPS then				return			endif			if yb > -WIDO_SILL + WALL_THICKNESS + EPS then				if abs(xb - xe) < EPS then					yb = -WIDO_SILL + WALL_THICKNESS				else					x11 = 0					y11 = -WIDO_SILL + WALL_THICKNESS					x12 = 1					y12 = y11					x21 = xb					y21 = yb					x22 = xe					y22 = ye					gosub 210	! Line - Line intersection					xb = cx					yb = cy				endif			endif			if ye > -WIDO_SILL + WALL_THICKNESS + EPS then				if abs(xb - xe) < EPS then					ye = -WIDO_SILL + WALL_THICKNESS				else					x11 = 0					y11 = -WIDO_SILL + WALL_THICKNESS					x12 = 1					y12 = y11					x21 = xb					y21 = yb					x22 = xe					y22 = ye					gosub 210	! Line - Line intersection					xe = cx					ye = cy				endif			endif		else			if not(abs(yb + WIDO_SILL) < EPS & abs(ye + WIDO_SILL) < EPS) then				x11 = 0				y11 = -WIDO_SILL + WALL_THICKNESS				x12 = x11 + 1				y12 = y11 + iInclDir * incHor				x21 = xb				y21 = yb				x22 = xe				y22 = ye				gosub 210	! Line - Line intersection				if state then					if yb > cy + EPS & ye > cy + EPS then						return					endif					if yb > cy then						xb = cx						yb = cy					endif					if ye > cy then						xe = cx						ye = cy					endif				endif			endif		endif	endif	if 	bPocketHoleonSide then		side1y = posLeafy		side2y = posLeafy + widthWallCut		if yb >= side1y & yb <= side2y & ye >= side1y & ye <= side2y then			return		endif		if not( (yb >= side2y & ye >= side2y) |\				(yb <= side1y & ye <= side1y) ) then			orig_xb = xb			orig_yb = yb			orig_xe = xe			orig_ye = ye			if	(yb < side1y & ye > side2y) |\				(ye < side1y & yb > side2y) then				x11 = 0				y11 = side1y				x12 = 1				y12 = side1y				x21 = xb				y21 = yb				x22 = xe				y22 = ye				gosub 210	! Line - Line intersection				if (yb < side1y) then					xe = cx					ye = cy				else					xb = cx					yb = cy				endif				x11 = 0				y11 = side2y				x12 = 1				y12 = side2y				gosub 210	! Line - Line intersection				if (orig_yb < side1y) then					lineSections[idx + LINE_BEG_X]		= cx					lineSections[idx + LINE_BEG_Y]		= cy					lineSections[idx + LINE_END_X]		= orig_xe					lineSections[idx + LINE_END_Y]		= orig_ye				else					lineSections[idx + LINE_BEG_X]		= orig_xb					lineSections[idx + LINE_BEG_Y]		= orig_yb					lineSections[idx + LINE_END_X]		= cx					lineSections[idx + LINE_END_Y]		= cy				endif				lineSections[idx + LINE_ATTRIBUTES]	= iAttributes + LINE_ATTRIBUTES_CONTOUR	! All line is contour				lineSections[idx + LINE_PEN_IDX]	= 1				lineSections[idx + LINE_LTYPE_IDX]	= 1				idx = idx + LINE_STRUCTURE_SIZE			else				if yb < side2y & ye < side2y then					x11 = 0					y11 = side1y					x12 = 1					y12 = side1y				else					x11 = 0					y11 = side2y					x12 = 1					y12 = side2y				endif				x21 = xb				y21 = yb				x22 = xe				y22 = ye				gosub 210	! Line - Line intersection				if yb < side1y | yb > side2y then					xe = cx					ye = cy				else					xb = cx					yb = cy				endif			endif		endif	endif	lineSections[idx + LINE_BEG_X]		= xb	lineSections[idx + LINE_BEG_Y]		= yb	lineSections[idx + LINE_END_X]		= xe	lineSections[idx + LINE_END_Y]		= ye	lineSections[idx + LINE_ATTRIBUTES]	= iAttributes + LINE_ATTRIBUTES_CONTOUR	! All line is contour	lineSections[idx + LINE_PEN_IDX]	= 1	lineSections[idx + LINE_LTYPE_IDX]	= 1	idx = idx + LINE_STRUCTURE_SIZEreturn! ==============================================================================! Line - Line intersection! ------------------------------------------------------------------------------! Input variables:!	EPS:				epsylon!	x11,y11, x12,y12	line #1!	x21,y21, x22,y22	line #2!! Returned variables:!	state:				0 = no intersection point!						1 = valid intersection point!	cx, cy:				intersection point! ==============================================================================210:	lliDiv = (x11-x12) * (y21-y22) - (y11-y12) * (x21-x22)	if abs(lliDiv) > EPS then		! Intersection		temp1 = x11 * y12 - y11 * x12		temp2 = x21 * y22 - y21 * x22		tempx = temp1 * (x21-x22) - (x11-x12) * temp2		tempy = temp1 * (y21-y22) - (y11-y12) * temp2		state = 1		cx = (tempx / lliDiv)		cy = (tempy / lliDiv)	else		! No Intersection		state = 0		cx = 0		cy = 0	endifreturn! ==============================================================================! Rotate 2D points around curved wall's center! ------------------------------------------------------------------------------! Input variables:!	x,y:				2D point!	WOD:				"wido orig dist" in the wallhole coordinate system!	alpha:				rotation angle! Returned variables:!	x,y:				rotated 2D point! ==============================================================================300:	xo = x	yo = y - WOD	x = xo * cos(signWallIsLeft * alpha) - yo * sin(signWallIsLeft * alpha)	y = xo * sin(signWallIsLeft * alpha) + yo * cos(signWallIsLeft * alpha) + WODreturn