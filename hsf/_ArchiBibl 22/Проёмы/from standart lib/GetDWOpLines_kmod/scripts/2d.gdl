if bSkylight then	gs_opline_style_m = 1	success = LIBRARYGLOBAL ("LibraryGlobals13", "gs_opline_style_m", reqIOplineStyleTemp)	if success > 0 then		gs_opline_style_m = reqIOplineStyleTemp	endifendifgs_iSwingType = 1gs_iSlidingType = 1if bWindow | bSkylight then		! window or skylight	bOldMVOParametersUsed = 0	reqSwingType = -1	success = LIBRARYGLOBAL ("LibraryGlobals13", "W_iSwingType", reqSwingType)	if success > 0 and reqSwingType > -1 then		gs_iSwingType = reqSwingType	else		bOldMVOParametersUsed = 1	endif	if not(bOldMVOParametersUsed) then		gs_opLinePen = 1		success = LIBRARYGLOBAL ("LibraryGlobals13", "W_opLinePen", reqOplinePen)		if success > 0 then			gs_opLinePen = reqOplinePen		endif		gs_swingLineType = 1		success = LIBRARYGLOBAL ("LibraryGlobals13", "W_swingLineType", reqSwingLineType)		if success > 0 then			gs_swingLineType = reqSwingLineType		endif	endif	if bEnableSwingLineTurnOff then		bShowOplines = 1		success = LIBRARYGLOBAL ("LibraryGlobals13", "W_showBOpLine2D", reqShowOplines)		if success > 0 then			bShowOplines = reqShowOplines		endif	endif	if bEnableSecondaryOpLineTypes then		gs_swingLineType2 = 1		success = LIBRARYGLOBAL ("LibraryGlobals13", "W_swingLineType2", reqSwingType2)		if success > 0 then			gs_swingLineType2 = reqSwingType2		endif	endifelse			! door	bOldMVOParametersUsed = 0	reqSwingType = -1	success = LIBRARYGLOBAL ("LibraryGlobals13", "D_iSwingType", reqSwingType)	if success > 0 and reqSwingType > -1 then		gs_iSwingType = reqSwingType	else		bOldMVOParametersUsed = 1	endif	if not(bOldMVOParametersUsed) then		reqSlidingType = 0		success = LIBRARYGLOBAL ("LibraryGlobals13", "D_iSlidingType", reqSlidingType)		if success > 0 then			gs_iSlidingType = reqSlidingType		else			gs_iSlidingType = defaultSlidingType		endif		gs_opLinePen = 1		success = LIBRARYGLOBAL ("LibraryGlobals13", "D_opLinePen", reqOplinePen)		if success > 0 then			gs_opLinePen = reqOplinePen		endif		gs_swingLineType = 1		success = LIBRARYGLOBAL ("LibraryGlobals13", "D_swingLineType", reqSwingLineType)		if success > 0 then			gs_swingLineType = reqSwingLineType		endif	endif	if bEnableSwingLineTurnOff then		bShowOplines = 1		success = LIBRARYGLOBAL ("LibraryGlobals13", "D_showBOpLine2D", reqShowOplines)		if success > 0 then			bShowOplines = reqShowOplines		endif	endif	if bEnableSecondaryOpLineTypes then		gs_swingLineType2 = 1		success = LIBRARYGLOBAL ("LibraryGlobals13", "D_swingLineType2", reqSwingType2)		if success > 0 then			gs_swingLineType2 = reqSwingType2		endif	endifendifif bOldMVOParametersUsed then	gs_opLinePen = 1	success = LIBRARYGLOBAL ("LibraryGlobals13", "gs_opLinePen", reqOplinePen)	if success > 0 then		gs_opLinePen = reqOplinePen	endif	gs_iSwingType = 1	success = LIBRARYGLOBAL ("LibraryGlobals13", "gs_iSwingType", reqSwingType)	if success > 0 then		gs_iSwingType = reqSwingType	endif	gs_iSlidingType = defaultSlidingType	gs_swingLineType = 1	success = LIBRARYGLOBAL ("LibraryGlobals13", "gs_swingLineType", reqSwingLineType)	if success > 0 then		gs_swingLineType = reqSwingLineType	endifendifif not(bEnableSwingLineTurnOff) then	bShowOplines = 1endifif not(bEnableSecondaryOpLineTypes) then	gs_swingLineType2 = gs_swingLineTypeendifif bSkylight then	end gs_opLinePen, gs_iSwingType, gs_swingLineType, gs_opline_style_melse	end bShowOplines, gs_opLinePen, gs_iSwingType, gs_iSlidingType, gs_swingLineType, gs_swingLineType2endif