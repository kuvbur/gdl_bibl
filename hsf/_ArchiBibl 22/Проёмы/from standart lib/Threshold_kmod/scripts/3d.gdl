! Contact person: <NJ>! ==============================================================================! This macro draws the Threshold! ------------------------------------------------------------------------------! Input parameters:! Geometry ---------------------------------------------------------------------!	A:						wallhole width (length) (Obsolete)!	B:						wallhole height (length)!	refWidth:				reference width in curved walls (length)!	leftWidth:				wallhole's side distance from the origin at the left side (length)!	rightWidth:				wallhole's side distance from the origin at the right side (length)!	gs_tolerance_left:		tolerance at the left side (length)!	gs_tolerance_right:		tolerance at the right side (length)! Functions --------------------------------------------------------------------!	gs_IsCurved:			Does the door follow the curvature of the wall? (0 / 1)!	iWindowShape:			Shape of the door (integer)!								0 = rectangular (default)!								1 = arched!	bEnableThreshold:		Enable/disable threshold (0 / 1)! Door Frame -------------------------------------------------------------------!	iFrameStyle:			Style of the door frame (integer; 1-3)!	gs_frame_wthk:			Is the door frame thickness equals with the wall thickness? (0 / 1)!	gs_fthk:				Thickness of the Door frame (length)!	gs_frame_thkin:			Thickness of the intermediate door frames (length)!	gs_frame_width_left:	Width of the frame at left (length)!	gs_frame_width_right:	Width of the frame at right (length)!	gs_ds_thk:				thickness of bumper in case of iFrameStyle = FRAME_STYLE_DOUBLE_REBATE (length)!	gs_ds_w:				width of bumper in case of iFrameStyle = FRAME_STYLE_DOUBLE_REBATE (length)!	gs_rebate_width:		width of bumper in case of iFrameStyle = FRAME_STYLE_SIMPLE_REBATE (length)! Door Leaf --------------------------------------------------------------------!	gs_leaf_thk:			Thickness of the Door Leaf (length)! Sidelight --------------------------------------------------------------------!	gs_sidelight_left:			Enable/disable sidelight at the left side (0 / 1)!	gs_sidelight_width_left:	Width of sidelight at the left side (length)!	gs_sidelight_right:			Enable/disable sidelight at the right side (0 / 1)!	gs_sidelight_width_right:	Width of sidelight at the right side (length)! Oversize ---------------------------------------------------------------------!	gs_left_oversize:		Left opening oversize (length)!	gs_right_oversize:		Right opening oversize (length)!	gs_upper_oversize:		Upper opening oversize (length)!	gs_lower_oversize:		Lower opening oversize (length)! Casing -----------------------------------------------------------------------!	gs_trim_width_in:		Width of inside Trim. (length)!	gs_trim_width_out:		Width of outside Trim. (length)! Threshold --------------------------------------------------------------------!	gs_TresholdTypeEnable:	Enables sill types for the objects!								(integer; j1 + 2*j2 + 4*j3 + 8*j4 + 16*j5)!								(j1: normal, j2: extended, j3: extended both sides, j4: tr. beneath panel, j5: profiled)!	iThresholdType:				Identifies the type of the threshold!								(integer; 1 = no, 2 = normal threshold, 3 = extended threshold, 4 = extended both sides)!								(5 = tr. beneath panel, 6 = profiled )!	gs_treshold_inFloor:	Switch on/off the treshold slips in Floor (0 / 1) Only effective when iThresholdType = 5 or iThresholdType = 6!	gs_treshold_thk:		Thickness of the Threshold (length)!	gs_treshold_nosing:		Nosing of the Threshold (length)!	gs_treshold_nosing_2:	Nosing of the Threshold (length)! Ganging ----------------------------------------------------------------------!	gs_stack_left:			Align to door/window on left side (0 / 1)!	gs_stack_right:			Align to door/window on right side (0 / 1)! 2D Representation ------------------------------------------------------------!	gs_treshold_pen_sectcont:	Cotour pen of the cutted Threshold. (pen)! 3D Representation ------------------------------------------------------------!	lod3D:					Level of detail. Not used. (integer)!	gs_frame_pen:			Drawing pen of 3D. (pen)! Materials --------------------------------------------------------------------!	gs_treshold_mat:		Threshold material (material)!! Related Global Variables:!	GLOB_SCRIPT_TYPE!	GLOB_CONTEXT!	WALL_THICKNESS!	WALL_INCL!	WALL_RESOL!	WIDO_FRAME_THICKNESS!	WIDO_SILL!	WIDO_LEFT_JAMB!	WIDO_RIGHT_JAMB!	WIDO_THRES_DEPTH!	WIDO_HEAD_DEPTH!	WIDO_ORIG_DIST!	WIDO_REVEAL_SIDE!	SYMB_MIRRORED!	SYMB_ROTANGLE!	SYMB_FILL!	SYMB_SECT_PEN!	SYMB_FILL_PEN!	SYMB_FBGD_PEN! ==============================================================================if lod3D = 0 then end! Save the current parameter buffer ============================================dim savedQueueValues[]call "SaveQueue" parameters returned_parameters savedQueueValuesif WIDO_REVEAL_SIDE then	sy = 1	dy = -WIDO_FRAME_THICKNESSelse	sy = -1	dy = 0endif! ==============================================================================!	Draw Threshold! ==============================================================================if bThreshold then	rotx -90	if	iThresholdType = TRESHOLD_NORMAL |\		iThresholdType = TRESHOLD_EXTENDED |\		iThresholdType = TRESHOLD_BOTHEXTENDED |\		iThresholdType = TRESHOLD_EXTENDED_SWE then		if WIDO_REVEAL_SIDE then			addy -WIDO_FRAME_THICKNESS		else			muly -1		endif		addy -gs_frame_oversize_thk*(iFrameStyle = FRAME_STYLE_WRAPPED_EXTRUSION)		if curvedWall then put 0, WOD, 900		if iRevealType = REVEAL_EDGE | iRevealType = REVEAL_NO then			pointSillSide = 2		else			pointSillSide = 3		endif		pointBoardSide = pointSillSide + 1! left treshold - frame connection		if iFrameStyle = FRAME_STYLE_BLOCK then			if WIDO_REVEAL_SIDE then				py = leftRevealPnts[idxFrameEndRevealLeft][2] - gs_leaf_thk * (iThresholdType <> TRESHOLD_BOTHEXTENDED)				if not(bTShapedOpening & gs_sidelight_parapet_hgt_left > EPS) & gs_frame_wthk and gs_sidelight_left then					put -leftWidth + gs_frame_width_left + gs_tolerance_left, leftRevealPnts[idxFrameStartRevealLeft][2],  15,						-leftWidth + gs_frame_width_left + gs_tolerance_left, leftRevealPnts[idxFrameEndRevealLeft][2] - gs_frame_thkin,  15,						-leftWidth + leftFrameOffset, leftRevealPnts[idxFrameEndRevealLeft][2] - gs_frame_thkin,  15					py1 = leftRevealPnts[idxFrameEndRevealLeft][2] - gs_frame_thkin					put	-leftWidth + leftFrameOffset, py, 15				else					if py > leftRevealPnts[idxFrameStartRevealLeft][2] + EPS then						put -leftWidth + leftFrameOffset, leftRevealPnts[idxFrameStartRevealLeft][2],  15						py1 = leftRevealPnts[idxFrameStartRevealLeft][2]						put	-leftWidth + leftFrameOffset, py, 15					endif				endif			else				py = leftRevealPnts[idxFrameStartRevealLeft][2] + gs_leaf_thk * (iThresholdType <> TRESHOLD_BOTHEXTENDED)				if not(bTShapedOpening & gs_sidelight_parapet_hgt_left > EPS) & gs_frame_wthk and gs_sidelight_left then					put -leftWidth + leftFrameOffset, py,  15					put -leftWidth + leftFrameOffset, leftRevealPnts[idxFrameStartRevealLeft][2] + gs_frame_thkin, 15,						-leftWidth + gs_frame_width_left + gs_tolerance_left, leftRevealPnts[idxFrameStartRevealLeft][2] + gs_frame_thkin, 15,						-leftWidth + gs_frame_width_left + gs_tolerance_left, leftRevealPnts[idxFrameEndRevealLeft][2], 15					py1 = leftRevealPnts[idxFrameStartRevealLeft][2] + gs_frame_thkin				else					if py < leftRevealPnts[idxFrameEndRevealLeft][2] - EPS then						put -leftWidth + leftFrameOffset, py,  15						put	-leftWidth + leftFrameOffset, leftRevealPnts[idxFrameEndRevealLeft][2], 15						py1 = leftRevealPnts[idxFrameEndRevealLeft][2]					endif				endif			endif		endif		if iFrameStyle = FRAME_STYLE_DOUBLE_REBATE then			if WIDO_REVEAL_SIDE then				if not(bTShapedOpening & gs_sidelight_parapet_hgt_left > EPS) & gs_frame_wthk and gs_sidelight_left then					put -leftWidth + gs_frame_width_left + gs_tolerance_left, 			leftRevealPnts[idxFrameStartRevealLeft][2],  15,						-leftWidth + gs_frame_width_left + gs_tolerance_left, 			leftRevealPnts[idxFrameEndRevealLeft][2] - gs_frame_thkin,  15,						-leftWidth + leftFrameOffset, 			leftRevealPnts[idxFrameEndRevealLeft][2] - gs_frame_thkin,  15					py1 = leftRevealPnts[idxFrameEndRevealLeft][2] - gs_frame_thkin				else					put -leftWidth + leftFrameOffset, 			leftRevealPnts[idxFrameStartRevealLeft][2],  15					py1 = leftRevealPnts[idxFrameStartRevealLeft][2]				endif				put	-leftWidth + leftFrameOffset, 			leftRevealPnts[idxFrameEndRevealLeft][2] - gs_leaf_thk - gs_ds_thk, 15,					-leftWidth + leftFrameOffset + gs_ds_w, leftRevealPnts[idxFrameEndRevealLeft][2] - gs_leaf_thk - gs_ds_thk, 15,					-leftWidth + leftFrameOffset + gs_ds_w, leftRevealPnts[idxFrameEndRevealLeft][2] - gs_leaf_thk, 15,					-leftWidth + leftFrameOffset, 			leftRevealPnts[idxFrameEndRevealLeft][2] - gs_leaf_thk, 15				if  iThresholdType = TRESHOLD_BOTHEXTENDED then					put -leftWidth + leftFrameOffset, 			leftRevealPnts[idxFrameEndRevealLeft][2], 15				endif			else				if  iThresholdType = TRESHOLD_BOTHEXTENDED then					put -leftWidth + leftFrameOffset, 			leftRevealPnts[idxFrameStartRevealLeft][2],  15				endif				put	-leftWidth + leftFrameOffset, 			leftRevealPnts[idxFrameStartRevealLeft][2] + gs_leaf_thk, 15,					-leftWidth + leftFrameOffset + gs_ds_w, leftRevealPnts[idxFrameStartRevealLeft][2] + gs_leaf_thk, 15,					-leftWidth + leftFrameOffset + gs_ds_w, leftRevealPnts[idxFrameStartRevealLeft][2] + gs_leaf_thk + gs_ds_thk, 15,					-leftWidth + leftFrameOffset, 			leftRevealPnts[idxFrameStartRevealLeft][2] + gs_leaf_thk + gs_ds_thk, 15				if not(bTShapedOpening & gs_sidelight_parapet_hgt_left > EPS) & gs_frame_wthk and gs_sidelight_left then					put	-leftWidth + leftFrameOffset, 			leftRevealPnts[idxFrameStartRevealLeft][2] + gs_frame_thkin, 15,						-leftWidth + gs_frame_width_left + gs_tolerance_left, 			leftRevealPnts[idxFrameStartRevealLeft][2] + gs_frame_thkin, 15,						-leftWidth + gs_frame_width_left + gs_tolerance_left, 			leftRevealPnts[idxFrameEndRevealLeft][2], 15					py1 = leftRevealPnts[idxFrameStartRevealLeft][2] + gs_frame_thkin				else					put	-leftWidth + leftFrameOffset, 			leftRevealPnts[idxFrameEndRevealLeft][2], 15					py1 = leftRevealPnts[idxFrameEndRevealLeft][2]				endif			endif		endif		if	iFrameStyle = FRAME_STYLE_SIMPLE_REBATE		|\			iFrameStyle = FRAME_STYLE_EXTRUSION			|\			iFrameStyle = FRAME_STYLE_WRAPPED_EXTRUSION	then			if WIDO_REVEAL_SIDE then				if  not(bTShapedOpening & gs_sidelight_parapet_hgt_left > EPS) & gs_frame_wthk and gs_sidelight_left then					put -leftWidth + gs_frame_width_left + gs_tolerance_left, 		leftRevealPnts[idxFrameStartRevealLeft][2], 15,						-leftWidth + gs_frame_width_left + gs_tolerance_left, 		leftRevealPnts[idxFrameEndRevealLeft][2] - gs_frame_thkin, 15,						-leftWidth + leftFrameOffset, 		leftRevealPnts[idxFrameEndRevealLeft][2] - gs_frame_thkin, 15					py1 = leftRevealPnts[idxFrameEndRevealLeft][2] - gs_frame_thkin				else					put -leftWidth + leftFrameOffset, 		leftRevealPnts[idxFrameStartRevealLeft][2], 15					py1 = leftRevealPnts[idxFrameStartRevealLeft][2]				endif				put	-leftWidth + leftFrameOffset, 					leftRevealPnts[idxFrameEndRevealLeft][2] - gs_leaf_thk, 15,					-leftWidth + leftFrameOffset - gs_rebate_width, leftRevealPnts[idxFrameEndRevealLeft][2] - gs_leaf_thk, 15				if  iThresholdType = TRESHOLD_BOTHEXTENDED then					put -leftWidth + leftFrameOffset - gs_rebate_width, leftRevealPnts[idxFrameEndRevealLeft][2], 		 15				endif			else				if  iThresholdType = TRESHOLD_BOTHEXTENDED then					put -leftWidth + leftFrameOffset - gs_rebate_width, leftRevealPnts[idxFrameStartRevealLeft][2],  		 15				endif				put	-leftWidth + leftFrameOffset - gs_rebate_width, leftRevealPnts[idxFrameStartRevealLeft][2] + gs_leaf_thk, 15,					-leftWidth + leftFrameOffset, 					leftRevealPnts[idxFrameStartRevealLeft][2] + gs_leaf_thk, 15				if  not(bTShapedOpening & gs_sidelight_parapet_hgt_left > EPS) & gs_frame_wthk and gs_sidelight_left then					put -leftWidth + leftFrameOffset, 	leftRevealPnts[idxFrameStartRevealLeft][2] + gs_frame_thkin, 15,						-leftWidth + gs_frame_width_left + gs_tolerance_left, 	leftRevealPnts[idxFrameStartRevealLeft][2] + gs_frame_thkin, 15,						-leftWidth + gs_frame_width_left + gs_tolerance_left, 	leftRevealPnts[idxFrameEndRevealLeft][2], 15					py1 = leftRevealPnts[idxFrameStartRevealLeft][2] + gs_frame_thkin				else					put	-leftWidth + leftFrameOffset, 		leftRevealPnts[idxFrameEndRevealLeft][2], 15					py1 = leftRevealPnts[idxFrameEndRevealLeft][2]				endif			endif		endif		if iFrameStyle = FRAME_STYLE_METAL then		!SWE			if not(WIDO_REVEAL_SIDE) then				if  not(bTShapedOpening & gs_sidelight_parapet_hgt_left > EPS) & gs_frame_wthk and gs_sidelight_left then					put -leftWidth + gs_frame_width_left + gs_tolerance_left - gs_rebate_width, 		leftRevealPnts[idxFrameStartRevealLeft][2], 15,						-leftWidth + gs_frame_width_left + gs_tolerance_left - gs_rebate_width, 		leftRevealPnts[idxFrameEndRevealLeft][2] - gs_frame_thkin, 15,						-leftWidth + leftFrameOffset - gs_rebate_width, 		leftRevealPnts[idxFrameEndRevealLeft][2] - gs_frame_thkin, 15					py1 = leftRevealPnts[idxFrameEndRevealLeft][2] - gs_frame_thkin				else					put -leftWidth + leftFrameOffset - gs_rebate_width, 		leftRevealPnts[idxFrameStartRevealLeft][2], 15					py1 = leftRevealPnts[idxFrameStartRevealLeft][2]				endif				put	-leftWidth + leftFrameOffset - gs_rebate_width, 			leftRevealPnts[idxFrameEndRevealLeft][2] + gs_rebate_depth - gs_fthk, 15,					-leftWidth + leftFrameOffset, leftRevealPnts[idxFrameEndRevealLeft][2] + gs_rebate_depth - gs_fthk, 15				if  iThresholdType = TRESHOLD_BOTHEXTENDED then					put -leftWidth + leftFrameOffset, leftRevealPnts[idxFrameEndRevealLeft][2], 		 15				endif			else				if  iThresholdType = TRESHOLD_BOTHEXTENDED then					put -leftWidth + leftFrameOffset, leftRevealPnts[idxFrameStartRevealLeft][2],  		 15				endif				put	-leftWidth + leftFrameOffset, leftRevealPnts[idxFrameStartRevealLeft][2] - gs_rebate_depth + gs_fthk, 15,					-leftWidth + leftFrameOffset - gs_rebate_width, 					leftRevealPnts[idxFrameStartRevealLeft][2] - gs_rebate_depth + gs_fthk, 15				if  not(bTShapedOpening & gs_sidelight_parapet_hgt_left > EPS) & gs_frame_wthk and gs_sidelight_left then					put -leftWidth + leftFrameOffset - gs_rebate_width, 		leftRevealPnts[idxFrameStartRevealLeft][2] + gs_frame_thkin, 15,						-leftWidth + gs_frame_width_left + gs_tolerance_left - gs_rebate_width, 	leftRevealPnts[idxFrameStartRevealLeft][2] + gs_frame_thkin, 15,						-leftWidth + gs_frame_width_left + gs_tolerance_left - gs_rebate_width, 	leftRevealPnts[idxFrameEndRevealLeft][2], 15					py1 = leftRevealPnts[idxFrameStartRevealLeft][2] + gs_frame_thkin				else					put	-leftWidth + leftFrameOffset - gs_rebate_width, 		leftRevealPnts[idxFrameEndRevealLeft][2], 15					py1 = leftRevealPnts[idxFrameEndRevealLeft][2]				endif			endif		endif! Extended part of treshold on "board" side		if	iThresholdType = TRESHOLD_BOTHEXTENDED |\			(iThresholdType = TRESHOLD_EXTENDED & not(WIDO_REVEAL_SIDE)) |\			(iThresholdType = TRESHOLD_EXTENDED_SWE & WIDO_REVEAL_SIDE) then			if not(WIDO_REVEAL_SIDE) then				leftOverhang  = gs_treshold_ovhg_2 * not(gs_stack_left)				rightOverhang = gs_treshold_ovhg_2 * not(gs_stack_right)				nosing = gs_treshold_nosing_2			else				leftOverhang  = gs_treshold_ovhg * not(gs_stack_left)				rightOverhang = gs_treshold_ovhg * not(gs_stack_right)				nosing = gs_treshold_nosing			endif			if bTShapedOpening & gs_sidelight_left & gs_sidelight_parapet_hgt_left > EPS then				px  = -leftWidth + gs_sidelight_WHole_width_left + gs_reveal_double_innerLeft_sL				px1 = px - leftOverhang				if curvedWall then					py  = WOD - signWallIsLeft * sqr(radBoard^2 - (px + gs_turn_plaster_show_3D * thkPlasterAtBoardSlLeft)^2)					py0 = WOD - signWallIsLeft * sqr(radBoard^2 - px1^2)					py1 = py + nosing				else					py  = WALL_THICKNESS - WIDO_SILL + px * incX - leftOverhang * incX					py0 = py					py1 = py + nosing / cos(WALL_INCL)				endif				put	px + gs_turn_plaster_show_3D * thkPlasterAtBoardSlLeft,	WIDO_FRAME_THICKNESS,	15,					px + gs_turn_plaster_show_3D * thkPlasterAtBoardSlLeft,	py,						15,					px1,													py0,					15 + 3000 * (curvedWall & leftOverhang > EPS),					px1,													py1,					15			else				if gs_turn_plaster_show_3D then					startIdx = idxBoardStartPlasterLeft					endIdx   = idxBoardEndPlasterLeft				else					startIdx = idxBoardStartRevealLeft					endIdx   = idxBoardEndRevealLeft				endif				for i = startIdx to endIdx					put leftRevealPnts[i][1], leftRevealPnts[i][2], 8 + 7 * not(gs_stack_left)				next i				if not(curvedWall) then					px1 = leftRevealPnts[idxBoardEndRevealLeft][1] - leftOverhang					py  = leftRevealPnts[idxBoardEndRevealLeft][2] - leftOverhang * incX					py1 = py + nosing / cos(WALL_INCL)					put	px1, py, 8 + 7 * not(gs_stack_left),						px1, py1, 15				else					resol 100					p1x = leftRevealPnts[idxBoardEndRevealLeft][1] - leftOverhang					p1y = leftRevealPnts[idxBoardEndRevealLeft][2]					p2x = leftRevealPnts[idxBoardEndRevealLeft][1] - leftOverhang					p2y = leftRevealPnts[idxBoardEndRevealLeft][2] + nosing					px1 = leftRevealPnts[idxBoardEndRevealLeft][1] - leftOverhang					py1 = leftRevealPnts[idxBoardEndRevealLeft][2] + nosing					if bParalellInCurvedWalls then						xo = 0 : yo = WOD : ro = radBoard						x1 = p1x : y1 = 1 : x2 = p1x : y2 = 0						gosub 101						gosub 102						p1y = cy					else						xo = 0 : yo = WOD : ro = radBoard						x1 = p2x : y1 = p2y : x2 = 0 : y2 = WOD						gosub 101						gosub 102						p1y = cy						p1x = cx					endif					if gs_stack_left then						p1x = leftRevealPnts[idxBoardEndRevealLeft][1]						p1y = leftRevealPnts[idxBoardEndRevealLeft][2]						p2x = leftRevealPnts[idxBoardEndRevealLeft][1] + (((leftRevealPnts[idxBoardEndRevealLeft][1] - \								leftRevealPnts[idxFrameEndRevealLeft][1]) * (p2y - leftRevealPnts[idxBoardEndRevealLeft][2])) / \								(leftRevealPnts[idxBoardEndRevealLeft][2] - leftRevealPnts[idxFrameEndRevealLeft][2]))						px1 = p2x					endif					if leftRevealPnts[endIdx][1] > p1x + EPS then						put p1x, p1y, 8 + 3007 * not(gs_stack_left)					endif					put	p2x, p2y, 15				endif			endif			if bTShapedOpening & gs_sidelight_right & gs_sidelight_parapet_hgt_right > EPS then				px  = rightWidth - gs_sidelight_WHole_width_right - gs_reveal_double_innerRight_sR				px2 = px + rightOverhang				if curvedWall then					py  = WOD - signWallIsLeft * sqr(radBoard^2 - (px -  gs_turn_plaster_show_3D * thkPlasterAtBoardSlRight)^2)					py0 = WOD - signWallIsLeft * sqr(radBoard^2 - px2^2)					py2 = py + nosing				else					py  = WALL_THICKNESS - WIDO_SILL + px * incX - leftOverhang * incX					py0 = py					py2 = py + nosing / cos(WALL_INCL)				endif				put	px2,														py2,					15,					px2,														py0,					15,					px - gs_turn_plaster_show_3D * thkPlasterAtBoardSlRight,	py,						15 + 3000 * (curvedWall & (rightOverhang > EPS)),					px - gs_turn_plaster_show_3D * thkPlasterAtBoardSlRight,	WIDO_FRAME_THICKNESS,	15			else				bNeedCurve = 0				if not(curvedWall) then					px2 = rightRevealPnts[idxBoardEndRevealRight][1] + rightOverhang					py  = rightRevealPnts[idxBoardEndRevealRight][2] + rightOverhang * incX					py2 = py + nosing / cos(WALL_INCL)					put	px2, py2,	8 + 7 * not(gs_stack_right),						px2, py,	8 + 7 * not(gs_stack_right)				else					resol 100					p4x = rightRevealPnts[idxBoardEndRevealRight][1] + rightOverhang					p4y = rightRevealPnts[idxBoardEndRevealRight][2]					p3x = rightRevealPnts[idxBoardEndRevealRight][1] + rightOverhang					p3y = rightRevealPnts[idxBoardEndRevealRight][2] + nosing					px2 = rightRevealPnts[idxBoardEndRevealRight][1] + rightOverhang					py2 = rightRevealPnts[idxBoardEndRevealRight][2] + nosing					if bParalellInCurvedWalls then						xo = 0 : yo = WOD :	ro = radBoard						x1 = p4x : y1 = 1 : x2 = p4x : y2 = 0						gosub 101						gosub 102						p4y = cy					else						xo = 0 : yo = WOD : ro = radBoard						x1 = p3x : y1 = p3y : x2 = 0 : y2 = WOD						gosub 101						gosub 102						p4y = cy						p4x = cx					endif					if gs_stack_right then						p4x = rightRevealPnts[idxBoardEndRevealRight][1]						p4y = rightRevealPnts[idxBoardEndRevealRight][2]						p3x = rightRevealPnts[idxBoardEndRevealRight][1] + (((rightRevealPnts[idxBoardEndRevealRight][1] - \							rightRevealPnts[idxFrameEndRevealRight][1]) * (p3y - rightRevealPnts[idxBoardEndRevealRight][2])) / \							(rightRevealPnts[idxBoardEndRevealRight][2] - rightRevealPnts[idxFrameEndRevealRight][2]))						px2 = p3x					endif					put	p3x, p3y, 8 + 7 * not(gs_stack_right)					if rightRevealPnts[endIdx][1] < p4x - EPS then						put p4x, p4y, 8 + 7 * not(gs_stack_right)						bNeedCurve = 1					endif				endif				if gs_turn_plaster_show_3D then					startIdx = idxBoardEndPlasterRight					endIdx   = idxBoardStartPlasterRight				else					startIdx = idxBoardEndRevealRight					endIdx   = idxBoardStartRevealRight				endif				for i = startIdx to endIdx step -1					put rightRevealPnts[i][1], rightRevealPnts[i][2], 8 + 7 * not(gs_stack_right) + ((i = startIdx) & curvedWall & bNeedCurve) * 3000				next i			endif			hotspot px1, py1, gs_treshold_thk, 10102			hotspot px2, py2, gs_treshold_thk, 10103		endif! right treshold - frame connection		if iFrameStyle = FRAME_STYLE_BLOCK then			if WIDO_REVEAL_SIDE then				py = rightRevealPnts[idxFrameEndRevealRight][2] - gs_leaf_thk * (iThresholdType <> TRESHOLD_BOTHEXTENDED)				if not(bTShapedOpening & gs_sidelight_parapet_hgt_right > EPS) & gs_frame_wthk and gs_sidelight_right then					put	rightWidth - rightFrameOffset, py, 15					put rightWidth - rightFrameOffset, rightRevealPnts[idxFrameEndRevealRight][2] - gs_frame_thkin,  15,						rightWidth - gs_frame_width_right - gs_tolerance_right, rightRevealPnts[idxFrameEndRevealRight][2] - gs_frame_thkin,  15,						rightWidth - gs_frame_width_right - gs_tolerance_right, rightRevealPnts[idxFrameStartRevealRight][2],  15					py2 = rightRevealPnts[idxFrameEndRevealRight][2] - gs_frame_thkin				else					if py > rightRevealPnts[idxFrameStartRevealRight][2] + EPS then						put	rightWidth - rightFrameOffset, py, 15						put rightWidth - rightFrameOffset, rightRevealPnts[idxFrameStartRevealRight][2],  15						py2 = rightRevealPnts[idxFrameStartRevealRight][2]					endif				endif			else				py = rightRevealPnts[idxFrameStartRevealRight][2] + gs_leaf_thk * (iThresholdType <> TRESHOLD_BOTHEXTENDED)				if not(bTShapedOpening & gs_sidelight_parapet_hgt_right > EPS) & gs_frame_wthk and gs_sidelight_right then					put	rightWidth - gs_frame_width_right - gs_tolerance_right, rightRevealPnts[idxFrameEndRevealRight][2], 15,						rightWidth - gs_frame_width_right - gs_tolerance_right, rightRevealPnts[idxFrameStartRevealRight][2] + gs_frame_thkin, 15,						rightWidth - rightFrameOffset, rightRevealPnts[idxFrameStartRevealRight][2] + gs_frame_thkin, 15					py2 = rightRevealPnts[idxFrameStartRevealRight][2] + gs_frame_thkin					put	rightWidth - rightFrameOffset, py,  15				else					if py < rightRevealPnts[idxFrameEndRevealRight][2] - EPS then						put	rightWidth - rightFrameOffset, rightRevealPnts[idxFrameEndRevealRight][2], 15						py2 = rightRevealPnts[idxFrameEndRevealRight][2]						put	rightWidth - rightFrameOffset, py,  15					endif				endif			endif		endif		if iFrameStyle = FRAME_STYLE_DOUBLE_REBATE then			if WIDO_REVEAL_SIDE then				if  iThresholdType = TRESHOLD_BOTHEXTENDED then					put	rightWidth - rightFrameOffset, 			rightRevealPnts[idxFrameEndRevealRight][2], 15				endif				put	rightWidth - rightFrameOffset, 			rightRevealPnts[idxFrameEndRevealRight][2] - gs_leaf_thk, 15,					rightWidth - rightFrameOffset - gs_ds_w, rightRevealPnts[idxFrameEndRevealRight][2] - gs_leaf_thk, 15,					rightWidth - rightFrameOffset - gs_ds_w, rightRevealPnts[idxFrameEndRevealRight][2] - gs_leaf_thk - gs_ds_thk, 15,					rightWidth - rightFrameOffset, 			rightRevealPnts[idxFrameEndRevealRight][2] - gs_leaf_thk - gs_ds_thk, 15				if not(bTShapedOpening & gs_sidelight_parapet_hgt_right > EPS) & gs_frame_wthk and gs_sidelight_right then					put	rightWidth - rightFrameOffset, 		rightRevealPnts[idxFrameEndRevealRight][2] - gs_frame_thkin,  15,						rightWidth - gs_frame_width_right - gs_tolerance_right, 	rightRevealPnts[idxFrameEndRevealRight][2] - gs_frame_thkin,  15,						rightWidth - gs_frame_width_right - gs_tolerance_right, 	rightRevealPnts[idxFrameStartRevealRight][2],  15					py2 = rightRevealPnts[idxFrameEndRevealRight][2] - gs_frame_thkin				else					put	rightWidth - rightFrameOffset, 			rightRevealPnts[idxFrameStartRevealRight][2],  15					py2 = rightRevealPnts[idxFrameStartRevealRight][2]				endif			else				if not(bTShapedOpening & gs_sidelight_parapet_hgt_right > EPS) & gs_frame_wthk and gs_sidelight_right then					put	rightWidth - gs_frame_width_right - gs_tolerance_right, 			rightRevealPnts[idxFrameEndRevealRight][2], 15,						rightWidth - gs_frame_width_right - gs_tolerance_right, 			rightRevealPnts[idxFrameStartRevealRight][2] + gs_frame_thkin, 15,						rightWidth - rightFrameOffset, 			rightRevealPnts[idxFrameStartRevealRight][2] + gs_frame_thkin, 15					py2 = rightRevealPnts[idxFrameStartRevealRight][2] + gs_frame_thkin				else					put	rightWidth - rightFrameOffset, 			rightRevealPnts[idxFrameEndRevealRight][2], 15					py2 = rightRevealPnts[idxFrameEndRevealRight][2]				endif				put	rightWidth - rightFrameOffset, 			rightRevealPnts[idxFrameStartRevealRight][2] + gs_leaf_thk + gs_ds_thk,  15,					rightWidth - rightFrameOffset - gs_ds_w, rightRevealPnts[idxFrameStartRevealRight][2] + gs_leaf_thk + gs_ds_thk,  15,					rightWidth - rightFrameOffset - gs_ds_w, rightRevealPnts[idxFrameStartRevealRight][2] + gs_leaf_thk,  15,					rightWidth - rightFrameOffset, 			rightRevealPnts[idxFrameStartRevealRight][2] + gs_leaf_thk,  15				if  iThresholdType = TRESHOLD_BOTHEXTENDED then					put rightWidth - rightFrameOffset, 			rightRevealPnts[idxFrameStartRevealRight][2],  15				endif			endif		endif		if	iFrameStyle = FRAME_STYLE_SIMPLE_REBATE		|\			iFrameStyle = FRAME_STYLE_EXTRUSION			|\			iFrameStyle = FRAME_STYLE_WRAPPED_EXTRUSION	then			if WIDO_REVEAL_SIDE then				if  iThresholdType = TRESHOLD_BOTHEXTENDED then					put	rightWidth - rightFrameOffset + gs_rebate_width, rightRevealPnts[idxFrameEndRevealRight][2], 15				endif				put	rightWidth - rightFrameOffset + gs_rebate_width, rightRevealPnts[idxFrameEndRevealRight][2] - gs_leaf_thk, 15,					rightWidth - rightFrameOffset, rightRevealPnts[idxFrameEndRevealRight][2] - gs_leaf_thk, 15				if not(bTShapedOpening & gs_sidelight_parapet_hgt_right > EPS) & gs_frame_wthk and gs_sidelight_right then					put	rightWidth - rightFrameOffset, rightRevealPnts[idxFrameEndRevealRight][2] - gs_frame_thkin,  15,						rightWidth - gs_frame_width_right - gs_tolerance_right, rightRevealPnts[idxFrameEndRevealRight][2] - gs_frame_thkin,  15,						rightWidth - gs_frame_width_right - gs_tolerance_right, rightRevealPnts[idxFrameStartRevealRight][2],  15					py2 = rightRevealPnts[idxFrameEndRevealRight][2] - gs_frame_thkin				else					put	rightWidth - rightFrameOffset, rightRevealPnts[idxFrameStartRevealRight][2],  15					py2 = rightRevealPnts[idxFrameStartRevealRight][2]				endif			else				if not(bTShapedOpening & gs_sidelight_parapet_hgt_right > EPS) & gs_frame_wthk and gs_sidelight_right then					put	rightWidth - gs_frame_width_right - gs_tolerance_right, rightRevealPnts[idxFrameEndRevealRight][2], 15,						rightWidth - gs_frame_width_right - gs_tolerance_right, rightRevealPnts[idxFrameStartRevealRight][2] + gs_frame_thkin, 15,						rightWidth - rightFrameOffset, rightRevealPnts[idxFrameStartRevealRight][2] + gs_frame_thkin, 15					py2 = rightRevealPnts[idxFrameStartRevealRight][2] + gs_frame_thkin				else					put	rightWidth - rightFrameOffset, rightRevealPnts[idxFrameEndRevealRight][2], 15					py2 = rightRevealPnts[idxFrameEndRevealRight][2]				endif				put	rightWidth - rightFrameOffset, rightRevealPnts[idxFrameStartRevealRight][2] + gs_leaf_thk,  15,					rightWidth - rightFrameOffset + gs_rebate_width, rightRevealPnts[idxFrameStartRevealRight][2] + gs_leaf_thk,  15				if iThresholdType = TRESHOLD_BOTHEXTENDED then					put rightWidth - rightFrameOffset + gs_rebate_width, rightRevealPnts[idxFrameStartRevealRight][2],  15				endif			endif		endif		if iFrameStyle = FRAME_STYLE_METAL then		!SWE			if not(WIDO_REVEAL_SIDE) then				if  iThresholdType = TRESHOLD_BOTHEXTENDED then					put	rightWidth - rightFrameOffset, rightRevealPnts[idxFrameEndRevealRight][2], 15				endif				put	rightWidth - rightFrameOffset, rightRevealPnts[idxFrameEndRevealRight][2] + gs_rebate_depth - gs_fthk, 15,					rightWidth - rightFrameOffset + gs_rebate_width, rightRevealPnts[idxFrameEndRevealRight][2] + gs_rebate_depth - gs_fthk, 15				if not(bTShapedOpening & gs_sidelight_parapet_hgt_right > EPS) & gs_frame_wthk and gs_sidelight_right then					put	rightWidth - rightFrameOffset + gs_rebate_width, rightRevealPnts[idxFrameEndRevealRight][2] - gs_frame_thkin,  15,						rightWidth - gs_frame_width_right - gs_tolerance_right + gs_rebate_width, rightRevealPnts[idxFrameEndRevealRight][2] - gs_frame_thkin,  15,						rightWidth - gs_frame_width_right - gs_tolerance_right + gs_rebate_width, rightRevealPnts[idxFrameStartRevealRight][2],  15					py2 = rightRevealPnts[idxFrameEndRevealRight][2] - gs_frame_thkin				else					put	rightWidth - rightFrameOffset + gs_rebate_width, rightRevealPnts[idxFrameStartRevealRight][2],  15					py2 = rightRevealPnts[idxFrameStartRevealRight][2]				endif			else				if not(bTShapedOpening & gs_sidelight_parapet_hgt_right > EPS) & gs_frame_wthk and gs_sidelight_right then					put	rightWidth - gs_frame_width_right - gs_tolerance_right + gs_rebate_width, rightRevealPnts[idxFrameEndRevealRight][2], 15,						rightWidth - gs_frame_width_right - gs_tolerance_right + gs_rebate_width, rightRevealPnts[idxFrameStartRevealRight][2] + gs_frame_thkin, 15,						rightWidth - rightFrameOffset + gs_rebate_width, rightRevealPnts[idxFrameStartRevealRight][2] + gs_frame_thkin, 15					py2 = rightRevealPnts[idxFrameStartRevealRight][2] + gs_frame_thkin				else					put	rightWidth - rightFrameOffset + gs_rebate_width, rightRevealPnts[idxFrameEndRevealRight][2], 15					py2 = rightRevealPnts[idxFrameEndRevealRight][2]				endif				put	rightWidth - rightFrameOffset + gs_rebate_width, rightRevealPnts[idxFrameStartRevealRight][2] - gs_rebate_depth + gs_fthk,  15,					rightWidth - rightFrameOffset, rightRevealPnts[idxFrameStartRevealRight][2] - gs_rebate_depth + gs_fthk,  15				if iThresholdType = TRESHOLD_BOTHEXTENDED then					put rightWidth - rightFrameOffset, rightRevealPnts[idxFrameStartRevealRight][2],  15				endif			endif		endif		if iThresholdType = TRESHOLD_NORMAL then			px1 = -leftWidth + leftFrameOffset			px2 = rightWidth - rightFrameOffset			hotspot px1, py1, gs_treshold_thk, 10100			hotspot px2, py2, gs_treshold_thk, 10101		endif! Extended part of treshold on "sill" side		if	iThresholdType = TRESHOLD_BOTHEXTENDED |\			(iThresholdType = TRESHOLD_EXTENDED & WIDO_REVEAL_SIDE) |\			(iThresholdType = TRESHOLD_EXTENDED_SWE & not(WIDO_REVEAL_SIDE)) then			if not(WIDO_REVEAL_SIDE) then				leftOverhang  = gs_treshold_ovhg * not(gs_stack_left)				rightOverhang = gs_treshold_ovhg * not(gs_stack_right)				nosing = gs_treshold_nosing			else				leftOverhang  = gs_treshold_ovhg_2 * not(gs_stack_left)				rightOverhang = gs_treshold_ovhg_2 * not(gs_stack_right)				nosing = gs_treshold_nosing_2			endif			if bTShapedOpening & gs_sidelight_right & gs_sidelight_parapet_hgt_right > EPS then				px  = rightWidth - gs_sidelight_WHole_width_right - gs_reveal_right_sR				px2 = px + rightOverhang				if curvedWall then					py  = WOD - signWallIsLeft * sqr(radSill^2 - (px - gs_turn_plaster_show_3D * thkPlasterAtSillSlRight)^2)					py0 = WOD - signWallIsLeft * sqr(radSill^2 - px2^2)					py2 = py - nosing				else					py  = -WIDO_SILL					py0 = py					py2 = py - nosing				endif				put	px - gs_turn_plaster_show_3D * thkPlasterAtSillSlRight,	0,		15,					px - gs_turn_plaster_show_3D * thkPlasterAtSillSlRight,	py,		15,					px2,													py0,	15 + 3000 * (curvedWall & (rightOverhang > EPS)),					px2,													py2,	15			else				put	rightRevealPnts[idxFrameStartRevealLeft][1], rightRevealPnts[idxFrameStartRevealLeft][2],  8 + 7 * not(gs_stack_right)				if iRevealType > REVEAL_NO then					put rightRevealPnts[idxFrameStartRevealLeft-1][1], rightRevealPnts[idxFrameStartRevealLeft-1][2], 8 + 7 * not(gs_stack_right)				endif				if gs_turn_plaster_show_3D then					startIdx = idxSillEndPlasterRight					endIdx   = idxSillStartPlasterRight				else					startIdx = idxSillEndRevealRight					endIdx   = idxSillStartRevealRight				endif				for i = startIdx to endIdx step -1					put rightRevealPnts[i][1], rightRevealPnts[i][2], 8 + 7 * not(gs_stack_right)				next i				if not (curvedWall) then					px2 = rightRevealPnts[1][1] + rightOverhang					py  = rightRevealPnts[1][2]					py2 = py - nosing					put	px2, py,	8 + 7 * not(gs_stack_right),						px2, py2,	13 + 2 * not(gs_stack_right)				else					resol 100					p3x = rightRevealPnts[1][1] + rightOverhang					p4x = rightRevealPnts[1][1] + rightOverhang					p3y = rightRevealPnts[1][2] - nosing					p4y = rightRevealPnts[1][2]					px2 = rightRevealPnts[1][1] + rightOverhang					py2 = rightRevealPnts[1][2] - nosing					if bParalellInCurvedWalls then						xo = 0 : yo = WOD : ro = radSill						x1 = p4x : y1 = 1 : x2 = p4x :y2 = 0						gosub 101						gosub 102						p4y = cy					else						xo = 0 : yo = WOD : ro = radSill						x1 = p3x : y1 = p3y : x2 = 0 : y2 = WOD						gosub 101						gosub 102						p4y = cy						p4x = cx					endif					if gs_stack_right then						p4x = rightRevealPnts[1][1]						p4y = rightRevealPnts[1][2]						p3x = rightRevealPnts[1][1] + (((rightRevealPnts[1][1] - rightRevealPnts[idxFrameEndRevealRight][1]) * (p3y - rightRevealPnts[1][2])) / (rightRevealPnts[1][2] - rightRevealPnts[idxFrameEndRevealRight][2]))						px2 = p3x					endif					put	p4x, p4y, 8 + 3007 * not(gs_stack_right),						p3x, p3y, 13 + 2 * not(gs_stack_right)				endif			endif			if bTShapedOpening & gs_sidelight_left & gs_sidelight_parapet_hgt_left > EPS then				px  = -leftWidth + gs_sidelight_WHole_width_left + gs_reveal_left_sL				px1 = px - leftOverhang				if curvedWall then					py  = WOD - signWallIsLeft * sqr(radSill^2 - (px + gs_turn_plaster_show_3D * thkPlasterAtSillSlLeft)^2)					py0 = WOD - signWallIsLeft * sqr(radSill^2 - px1^2)					py1 = py - nosing				else					py  = -WIDO_SILL					py0 = py					py1 = py - nosing				endif				put	px1,													py1,	15,					px1,													py0,	15,					px + gs_turn_plaster_show_3D * thkPlasterAtSillSlLeft,	py,		15 + 3000 * (curvedWall & (leftOverhang > EPS)),					px + gs_turn_plaster_show_3D * thkPlasterAtSillSlLeft,	0,		15			else				if not(curvedWall) then					px1 = leftRevealPnts[1][1] - leftOverhang					py  = leftRevealPnts[1][2]					py1 = py - nosing					put	px1, py1,	8 + 7 * not(gs_stack_left),						px1, py,	8 + 7 * not(gs_stack_left)				else					resol 100					p1x = leftRevealPnts[1][1] - leftOverhang					p2x = leftRevealPnts[1][1] - leftOverhang					p1y = leftRevealPnts[1][2]					p2y = leftRevealPnts[1][2] - nosing					px1 = leftRevealPnts[1][1] - leftOverhang					py1 = leftRevealPnts[1][2] - nosing					if bParalellInCurvedWalls then						xo = 0 : yo = WOD : ro = radSill						x1 = p1x : y1 = 1 : x2 = p1x :y2 = 0						gosub 101						gosub 102						p1y = cy					else						xo = 0 : yo = WOD : ro = radSill						x1 = p2x : y1 = p2y : x2 = 0 : y2 = WOD						gosub 101						gosub 102						p1y = cy						p1x = cx					endif					if gs_stack_left then						p1x = leftRevealPnts[1][1]						p1y = leftRevealPnts[1][2]						p2x = leftRevealPnts[1][1] + (((leftRevealPnts[1][1] - leftRevealPnts[idxFrameEndRevealLeft][1]) * (p2y - leftRevealPnts[1][2])) / (leftRevealPnts[1][2] - leftRevealPnts[idxFrameEndRevealLeft][2]))						px1 = p2x					endif					put	p2x, p2y, 8 + 7 * not(gs_stack_left),						p1x, p1y, 8 + 7 * not(gs_stack_left)				endif				if gs_turn_plaster_show_3D then					startIdx = idxSillStartPlasterLeft					endIdx   = idxSillEndPlasterLeft				else					startIdx = idxSillStartRevealLeft					endIdx   = idxSillEndRevealLeft				endif				for i = startIdx to endIdx					put leftRevealPnts[i][1], leftRevealPnts[i][2], 8 + 7 * not(gs_stack_left)				next i				if iRevealType > REVEAL_NO then					put leftRevealPnts[idxFrameStartRevealLeft-1][1], leftRevealPnts[idxFrameStartRevealLeft-1][2], 8 + 7 * (1 - gs_stack_left)				endif				put	leftRevealPnts[idxFrameStartRevealLeft][1], leftRevealPnts[idxFrameStartRevealLeft][2],  15			endif			hotspot px1, py1, gs_treshold_thk, 10100			hotspot px2, py2, gs_treshold_thk, 10101		endif		if nsp > 6 then			pen gs_frame_pen			material gs_treshold_mat			sect_fill gs_treshold_fill, gs_treshold_pen_bg, gs_treshold_pen_fg, gs_treshold_pen_sectcont			prism_ nsp/3, gs_treshold_thk, get(nsp)			vert 0, 0, 0			vert 1, 0, 0			vert 0, 1, 0			vert 0, 0, 1			coor 5, -1, -2, -3, -4			body 1		else			for i=1 to nsp				n = get(1)			next i		endif		del 3	else! Threshold profiled, beneath panel and NOR thresholds		! ------------------------------------------------------------------------------		! NOR Threshold		! ------------------------------------------------------------------------------		if	iThresholdType = TRESHOLD_FLAT		| \			iThresholdType = TRESHOLD_ANSLAG	| \			iThresholdType = TRESHOLD_GUMMI		| \			!iThresholdType = TRESHOLD_HEVE		| \			!iThresholdType = TRESHOLD_HC		| \			iThresholdType = TRESHOLD_BRANN		| \			iThresholdType = TRESHOLD_BADEROMS	| \			iThresholdType = TRESHOLD_AKKUSTIKK	then			bDebug		= 0			nCut		= 0			cutOverSize = 0.1			nosing = max(nor_nosing_left, nor_nosing_right)			bNosing = (nosing > EPS)			if bNosing then				nosingOver	= nosing + cutOverSize			else				nosingOver	= 0			endif			if curvedWall then				cutOverSize = 10 * cutOverSize + abs(radBoard - radSill)			endif			if WIDO_REVEAL_SIDE then				startIdxLeft	= idxFrameEndRevealLeft				endIdxLeft		= idxSillStartRevealLeft				startIdxRight	= idxFrameEndRevealRight				endIdxRight		= idxSillStartRevealRight			else				startIdxLeft	= idxFrameStartRevealLeft				endIdxLeft		= idxBoardEndRevealLeft				startIdxRight	= idxFrameStartRevealRight				endIdxRight		= idxBoardEndRevealRight			endif			pxL = 0			for i = min(startIdxLeft,endIdxLeft) to max(startIdxLeft,endIdxLeft)				if leftRevealPnts[i][1] < pxL then pxL = leftRevealPnts[i][1]			next i			pxR = 0			for i = min(startIdxRight,endIdxRight) to max(startIdxRight,endIdxRight)				if rightRevealPnts[i][1] > pxR then pxR = rightRevealPnts[i][1]			next i			if WIDO_REVEAL_SIDE then				addy -WIDO_FRAME_THICKNESS			else				muly -1			endif			addy -gs_frame_oversize_thk*(iFrameStyle = FRAME_STYLE_WRAPPED_EXTRUSION)			if curvedWall then put 0, WOD, 900			if iRevealType = REVEAL_EDGE | iRevealType = REVEAL_NO then				pointSillSide = 2			else				pointSillSide = 3			endif			pointBoardSide = pointSillSide + 1			! left treshold - frame connection			if iFrameStyle = FRAME_STYLE_BLOCK then				if WIDO_REVEAL_SIDE then					if not(bTShapedOpening & gs_sidelight_parapet_hgt_left > EPS) & gs_frame_wthk and gs_sidelight_left then						put -leftWidth + leftFrameOffset, 							leftRevealPnts[idxFrameEndRevealLeft][2],	15,							-leftWidth, 											leftRevealPnts[idxFrameEndRevealLeft][2],	15,							-leftWidth, 											leftRevealPnts[idxFrameStartRevealLeft][2], 15,							-leftWidth + gs_frame_width_left + gs_tolerance_left, 	leftRevealPnts[idxFrameStartRevealLeft][2],	15,							-leftWidth + gs_frame_width_left + gs_tolerance_left, 	leftRevealPnts[idxFrameEndRevealLeft][2] - gs_frame_thkin,  15,							-leftWidth + leftFrameOffset, 							leftRevealPnts[idxFrameEndRevealLeft][2] - gs_frame_thkin,  15					else						put -leftWidth + leftFrameOffset, 					leftRevealPnts[idxFrameEndRevealLeft][2],	15,							 leftRevealPnts[idxFrameEndRevealLeft][1], 		leftRevealPnts[idxFrameEndRevealLeft][2],	15,							 leftRevealPnts[idxFrameStartRevealLeft][1], 	leftRevealPnts[idxFrameStartRevealLeft][2], 15,							-leftWidth + leftFrameOffset, 					leftRevealPnts[idxFrameStartRevealLeft][2], 15					endif				else					if not(bTShapedOpening & gs_sidelight_parapet_hgt_left > EPS) & gs_frame_wthk and gs_sidelight_left then						put	-leftWidth + leftFrameOffset, 							leftRevealPnts[idxFrameStartRevealLeft][2] + gs_frame_thkin, 15,							-leftWidth + gs_frame_width_left + gs_tolerance_left, 	leftRevealPnts[idxFrameStartRevealLeft][2] + gs_frame_thkin, 15,							-leftWidth + gs_frame_width_left + gs_tolerance_left, 	leftRevealPnts[idxFrameEndRevealLeft][2], 15,							-leftWidth, 											leftRevealPnts[idxFrameEndRevealLeft][2], 15,							-leftWidth, 											leftRevealPnts[idxFrameStartRevealLeft][2], 15,							-leftWidth + leftFrameOffset, 							leftRevealPnts[idxFrameStartRevealLeft][2], 15					else						put	-leftWidth + leftFrameOffset, 					leftRevealPnts[idxFrameEndRevealLeft][2], 15,							 leftRevealPnts[idxFrameEndRevealLeft][1], 		leftRevealPnts[idxFrameEndRevealLeft][2], 15,							 leftRevealPnts[idxFrameStartRevealLeft][1], 	leftRevealPnts[idxFrameStartRevealLeft][2], 15,							-leftWidth + leftFrameOffset, 					leftRevealPnts[idxFrameStartRevealLeft][2], 15					endif				endif			endif			if iFrameStyle = FRAME_STYLE_DOUBLE_REBATE then				if WIDO_REVEAL_SIDE then					if not(bTShapedOpening & gs_sidelight_parapet_hgt_left > EPS) & gs_frame_wthk and gs_sidelight_left then						put -leftWidth + leftFrameOffset, 							leftRevealPnts[idxFrameEndRevealLeft][2],	15,							-leftWidth, 											leftRevealPnts[idxFrameEndRevealLeft][2],	15,							-leftWidth, 											leftRevealPnts[idxFrameStartRevealLeft][2], 15,							-leftWidth + gs_frame_width_left + gs_tolerance_left, 	leftRevealPnts[idxFrameStartRevealLeft][2],	15,							-leftWidth + gs_frame_width_left + gs_tolerance_left, 	leftRevealPnts[idxFrameEndRevealLeft][2] - gs_frame_thkin,  15,							-leftWidth + leftFrameOffset, 							leftRevealPnts[idxFrameEndRevealLeft][2] - gs_frame_thkin,  15					else						put -leftWidth + leftFrameOffset, 					leftRevealPnts[idxFrameEndRevealLeft][2],	15,							 leftRevealPnts[idxFrameEndRevealLeft][1], 		leftRevealPnts[idxFrameEndRevealLeft][2],	15,							 leftRevealPnts[idxFrameStartRevealLeft][1], 	leftRevealPnts[idxFrameStartRevealLeft][2], 15,							-leftWidth + leftFrameOffset, 					leftRevealPnts[idxFrameStartRevealLeft][2], 15					endif					put	-leftWidth + leftFrameOffset, 			leftRevealPnts[idxFrameEndRevealLeft][2] - gs_leaf_thk - gs_ds_thk, 15,						-leftWidth + leftFrameOffset + gs_ds_w, leftRevealPnts[idxFrameEndRevealLeft][2] - gs_leaf_thk - gs_ds_thk, 15,						-leftWidth + leftFrameOffset + gs_ds_w, leftRevealPnts[idxFrameEndRevealLeft][2] - gs_leaf_thk, 15,						-leftWidth + leftFrameOffset, 			leftRevealPnts[idxFrameEndRevealLeft][2] - gs_leaf_thk, 15				else					put	-leftWidth + leftFrameOffset, 			leftRevealPnts[idxFrameStartRevealLeft][2] + gs_leaf_thk, 15,						-leftWidth + leftFrameOffset + gs_ds_w, leftRevealPnts[idxFrameStartRevealLeft][2] + gs_leaf_thk, 15,						-leftWidth + leftFrameOffset + gs_ds_w, leftRevealPnts[idxFrameStartRevealLeft][2] + gs_leaf_thk + gs_ds_thk, 15,						-leftWidth + leftFrameOffset, 			leftRevealPnts[idxFrameStartRevealLeft][2] + gs_leaf_thk + gs_ds_thk, 15					if not(bTShapedOpening & gs_sidelight_parapet_hgt_left > EPS) & gs_frame_wthk and gs_sidelight_left then						put	-leftWidth + leftFrameOffset, 							leftRevealPnts[idxFrameStartRevealLeft][2] + gs_frame_thkin, 15,							-leftWidth + gs_frame_width_left + gs_tolerance_left, 	leftRevealPnts[idxFrameStartRevealLeft][2] + gs_frame_thkin, 15,							-leftWidth + gs_frame_width_left + gs_tolerance_left, 	leftRevealPnts[idxFrameEndRevealLeft][2], 15,							-leftWidth, 											leftRevealPnts[idxFrameEndRevealLeft][2], 15,							-leftWidth, 											leftRevealPnts[idxFrameStartRevealLeft][2], 15,							-leftWidth + leftFrameOffset, 							leftRevealPnts[idxFrameStartRevealLeft][2], 15					else						put	-leftWidth + leftFrameOffset, 					leftRevealPnts[idxFrameEndRevealLeft][2], 15,							 leftRevealPnts[idxFrameEndRevealLeft][1], 		leftRevealPnts[idxFrameEndRevealLeft][2], 15,							 leftRevealPnts[idxFrameStartRevealLeft][1], 	leftRevealPnts[idxFrameStartRevealLeft][2], 15,							-leftWidth + leftFrameOffset, 					leftRevealPnts[idxFrameStartRevealLeft][2], 15					endif				endif			endif			if	iFrameStyle = FRAME_STYLE_SIMPLE_REBATE		|\				iFrameStyle = FRAME_STYLE_EXTRUSION			|\				iFrameStyle = FRAME_STYLE_WRAPPED_EXTRUSION	then				if WIDO_REVEAL_SIDE then					if  not(bTShapedOpening & gs_sidelight_parapet_hgt_left > EPS) & gs_frame_wthk and gs_sidelight_left then						put	-leftWidth, 												leftRevealPnts[idxFrameStartRevealLeft][2], 15,							-leftWidth + gs_frame_width_left + gs_tolerance_left, 		leftRevealPnts[idxFrameStartRevealLeft][2], 15,							-leftWidth + gs_frame_width_left + gs_tolerance_left, 		leftRevealPnts[idxFrameEndRevealLeft][2] - gs_frame_thkin, 15,							-leftWidth + leftFrameOffset, 								leftRevealPnts[idxFrameEndRevealLeft][2] - gs_frame_thkin, 15					else						put -leftWidth, 								leftRevealPnts[idxFrameStartRevealLeft][2], 15,							-leftWidth + leftFrameOffset, 				leftRevealPnts[idxFrameStartRevealLeft][2], 15					endif					put	-leftWidth + leftFrameOffset, 					leftRevealPnts[idxFrameEndRevealLeft][2] - gs_leaf_thk, 15,						-leftWidth + leftFrameOffset - gs_rebate_width, leftRevealPnts[idxFrameEndRevealLeft][2] - gs_leaf_thk, 15,						-leftWidth + leftFrameOffset - gs_rebate_width, leftRevealPnts[idxFrameEndRevealLeft][2], 15,						 leftRevealPnts[idxFrameEndRevealLeft][1],		leftRevealPnts[idxFrameEndRevealLeft][2], 15				else					put	-leftWidth, 									leftRevealPnts[idxFrameStartRevealLeft][2], 15,						-leftWidth + leftFrameOffset - gs_rebate_width, leftRevealPnts[idxFrameStartRevealLeft][2], 15,						-leftWidth + leftFrameOffset - gs_rebate_width, leftRevealPnts[idxFrameStartRevealLeft][2] + gs_leaf_thk, 15,						-leftWidth + leftFrameOffset, 					leftRevealPnts[idxFrameStartRevealLeft][2] + gs_leaf_thk, 15					if  not(bTShapedOpening & gs_sidelight_parapet_hgt_left > EPS) & gs_frame_wthk and gs_sidelight_left then						put -leftWidth + leftFrameOffset,							leftRevealPnts[idxFrameStartRevealLeft][2] + gs_frame_thkin, 15,							-leftWidth + gs_frame_width_left + gs_tolerance_left, 	leftRevealPnts[idxFrameStartRevealLeft][2] + gs_frame_thkin, 15,							-leftWidth + gs_frame_width_left + gs_tolerance_left, 	leftRevealPnts[idxFrameEndRevealLeft][2], 15,							-leftWidth, 											leftRevealPnts[idxFrameEndRevealLeft][2], 15					else						put	-leftWidth + leftFrameOffset, 					leftRevealPnts[idxFrameEndRevealLeft][2], 15,							leftRevealPnts[idxFrameEndRevealLeft][1], 		leftRevealPnts[idxFrameEndRevealLeft][2], 15					endif				endif			endif			if iFrameStyle = FRAME_STYLE_METAL then		!SWE				if WIDO_REVEAL_SIDE then					if  not(bTShapedOpening & gs_sidelight_parapet_hgt_left > EPS) & gs_frame_wthk and gs_sidelight_left then						put	-leftWidth, 																leftRevealPnts[idxFrameStartRevealLeft][2], 15,							-leftWidth + gs_frame_width_left + gs_tolerance_left - gs_rebate_width, 	leftRevealPnts[idxFrameStartRevealLeft][2], 15,							-leftWidth + gs_frame_width_left + gs_tolerance_left - gs_rebate_width, 	leftRevealPnts[idxFrameEndRevealLeft][2] - gs_frame_thkin, 15,							-leftWidth + leftFrameOffset - gs_rebate_width, 							leftRevealPnts[idxFrameEndRevealLeft][2] - gs_frame_thkin, 15					else						put -leftWidth, 										leftRevealPnts[idxFrameStartRevealLeft][2], 15,							-leftWidth + leftFrameOffset - gs_rebate_width, 	leftRevealPnts[idxFrameStartRevealLeft][2], 15					endif					put	-leftWidth + leftFrameOffset - gs_rebate_width, 			leftRevealPnts[idxFrameEndRevealLeft][2] + gs_rebate_depth - gs_fthk, 15,						-leftWidth + leftFrameOffset, leftRevealPnts[idxFrameEndRevealLeft][2] + gs_rebate_depth - gs_fthk, 15				else					put	-leftWidth + leftFrameOffset, leftRevealPnts[idxFrameStartRevealLeft][2] - gs_rebate_depth + gs_fthk, 15,						-leftWidth + leftFrameOffset - gs_rebate_width, 					leftRevealPnts[idxFrameStartRevealLeft][2] - gs_rebate_depth + gs_fthk, 15					if  not(bTShapedOpening & gs_sidelight_parapet_hgt_left > EPS) & gs_frame_wthk and gs_sidelight_left then						put -leftWidth + leftFrameOffset - gs_rebate_width,							leftRevealPnts[idxFrameStartRevealLeft][2] + gs_frame_thkin, 15,							-leftWidth + gs_frame_width_left + gs_tolerance_left - gs_rebate_width, 	leftRevealPnts[idxFrameStartRevealLeft][2] + gs_frame_thkin, 15,							-leftWidth + gs_frame_width_left + gs_tolerance_left - gs_rebate_width, 	leftRevealPnts[idxFrameEndRevealLeft][2], 15,							-leftWidth, 																leftRevealPnts[idxFrameEndRevealLeft][2], 15					else						put	-leftWidth + leftFrameOffset - gs_rebate_width, 	leftRevealPnts[idxFrameEndRevealLeft][2], 15,							leftRevealPnts[idxFrameEndRevealLeft][1], 			leftRevealPnts[idxFrameEndRevealLeft][2], 15					endif				endif			endif			if nsp > 6 then				if bDebug then					material 19					prism_ nsp/3, gs_treshold_thk, get(nsp)				else					pen gs_frame_pen					material gs_treshold_mat					sect_fill gs_treshold_fill, gs_treshold_pen_bg, gs_treshold_pen_fg, gs_treshold_pen_sectcont					cutpolya nsp/3, 1, 0, get(nsp)					nCut = nCut + 1				endif			else				for i=1 to nsp					n = get(1)				next i			endif			! left treshold - reveal connection			if gs_turn_plaster_show_3D then				startIdx = idxSillStartPlasterLeft				endIdx   = idxBoardEndPlasterLeft			else				startIdx = idxSillStartRevealLeft				endIdx   = idxBoardEndRevealLeft			endif			if bNosing & WIDO_REVEAL_SIDE then				if gs_stack_left then					if abs(leftRevealPnts[startIdx+1][1] - leftRevealPnts[startIdx][1]) < EPS then						if (leftRevealPnts[startIdx+1][2] - leftRevealPnts[startIdx][2]) > EPS then							leftAngOut = 90						else							leftAngOut = 270						endif					else						leftAngOut = atn((leftRevealPnts[startIdx+1][2] - leftRevealPnts[startIdx][2]) / (leftRevealPnts[startIdx+1][1] - leftRevealPnts[startIdx][1]))					endif					put leftRevealPnts[startIdx][1] - nosingOver / tan(leftAngOut), leftRevealPnts[startIdx][2] - nosingOver, 8				else					put leftRevealPnts[startIdx][1], leftRevealPnts[startIdx][2] - nosingOver, 15				endif			endif			for i = startIdx to endIdx				put leftRevealPnts[i][1], leftRevealPnts[i][2], 8 + 7 * not(gs_stack_left)			next i			if bNosing & not(WIDO_REVEAL_SIDE) then				if gs_stack_left then					if abs(leftRevealPnts[endIdx][1] - leftRevealPnts[endIdx-1][1]) < EPS then						if (leftRevealPnts[endIdx][2] - leftRevealPnts[endIdx-1][2]) > EPS then							leftAngOut = 90						else							leftAngOut = 270						endif					else						leftAngOut = atn((leftRevealPnts[endIdx][2] - leftRevealPnts[endIdx-1][2]) / (leftRevealPnts[endIdx][1] - leftRevealPnts[endIdx-1][1]))					endif					put leftRevealPnts[endIdx][1] + nosingOver / tan(leftAngOut), leftRevealPnts[endIdx][2] + nosingOver, 8					if curvedWall then						radDiff = tan(acs(leftRevealPnts[endIdx][1] / radBoard)) * leftRevealPnts[endIdx][1] - tan(acs(leftRevealPnts[endIdx][1] / radSill)) * leftRevealPnts[endIdx][1] - (radBoard - radSill)						pxL = pxL + (nosing + radDiff)  / tan(leftAngOut)					endif				else					put leftRevealPnts[endIdx][1], leftRevealPnts[endIdx][2] + nosingOver, 15				endif			endif			if not(curvedWall) then				if WIDO_REVEAL_SIDE then					put	pxL - cutOversize, leftRevealPnts[endIdx][2],					8 + 7 * not(gs_stack_left),						pxL - cutOversize, leftRevealPnts[startIdx][2] - nosingOver,	8 + 7 * not(gs_stack_left)				else					put	pxL - cutOversize, leftRevealPnts[endIdx][2] + nosingOver,		8 + 7 * not(gs_stack_left),						pxL - cutOversize, leftRevealPnts[startIdx][2],					8 + 7 * not(gs_stack_left)				endif			else				resol 100				p1x = pxL - cutOversize				p2x = pxL - cutOversize				p1y = leftRevealPnts[1][2]				p2y = leftRevealPnts[1][2]				xo = 0 : yo = WOD : ro = radSill - nosingOver * WIDO_REVEAL_SIDE				x1 = p2x : y1 = p2y : x2 = 0 : y2 = WOD				gosub 101				gosub 102				p1y = cy				p1x = cx				xo = 0 : yo = WOD : ro = radBoard				x1 = p2x : y1 = p2y : x2 = 0 : y2 = WOD				gosub 101				gosub 102				p2y = cy				p2x = cx				put	0, WOD, 900 + 64 + 8 + 7 * not(gs_stack_left),					p2x, p2y, 3000 + 64 + 8 + 7 * not(gs_stack_left)				if not(WIDO_REVEAL_SIDE) & not(bNosing) then					put	p1x, p1y, 64 + 8 + 7 * not(gs_stack_left),						0, WOD, 900 + 64 + 8 + 7 * not(gs_stack_left),						leftRevealPnts[startIdx][1], leftRevealPnts[startIdx][2], 3000 + 64 + 8 + 7 * not(gs_stack_left)				endif			endif			if nsp > 6 then				if bDebug then					material 19					prism_ nsp/3, gs_treshold_thk, get(nsp)				else					pen gs_frame_pen					material gs_treshold_mat					sect_fill gs_treshold_fill, gs_treshold_pen_bg, gs_treshold_pen_fg, gs_treshold_pen_sectcont					cutpolya nsp/3, 1, 0, get(nsp)					nCut = nCut + 1				endif			else				for i=1 to nsp					n = get(1)				next i			endif			! right treshold - frame connection			if iFrameStyle = FRAME_STYLE_BLOCK then				if WIDO_REVEAL_SIDE then					if not(bTShapedOpening & gs_sidelight_parapet_hgt_right > EPS) & gs_frame_wthk and gs_sidelight_right then						put rightWidth - rightFrameOffset, 								rightRevealPnts[idxFrameEndRevealRight][2] - gs_frame_thkin,  15,							rightWidth - gs_frame_width_right - gs_tolerance_right, 	rightRevealPnts[idxFrameEndRevealRight][2] - gs_frame_thkin,  15,							rightWidth - gs_frame_width_right - gs_tolerance_right, 	rightRevealPnts[idxFrameStartRevealRight][2],	15,							rightWidth, 												rightRevealPnts[idxFrameStartRevealRight][2],	15,							rightWidth, 												rightRevealPnts[idxFrameEndRevealRight][2],	15,							rightWidth - rightFrameOffset, 								rightRevealPnts[idxFrameEndRevealRight][2],	15					else						put	rightWidth - rightFrameOffset, 					rightRevealPnts[idxFrameStartRevealRight][2],  15,							rightRevealPnts[idxFrameStartRevealRight][1], 	rightRevealPnts[idxFrameStartRevealRight][2],  15,							rightRevealPnts[idxFrameEndRevealRight][1], 	rightRevealPnts[idxFrameEndRevealRight][2],  15,							rightWidth - rightFrameOffset, 					rightRevealPnts[idxFrameEndRevealRight][2],  15					endif				else					if not(bTShapedOpening & gs_sidelight_parapet_hgt_right > EPS) & gs_frame_wthk and gs_sidelight_right then						put	rightWidth - rightFrameOffset, 								rightRevealPnts[idxFrameStartRevealRight][2], 15,							rightWidth, 												rightRevealPnts[idxFrameStartRevealRight][2], 15,							rightWidth, 												rightRevealPnts[idxFrameEndRevealRight][2], 15,							rightWidth - gs_frame_width_right - gs_tolerance_right, 	rightRevealPnts[idxFrameEndRevealRight][2], 15,							rightWidth - gs_frame_width_right - gs_tolerance_right, 	rightRevealPnts[idxFrameStartRevealRight][2] + gs_frame_thkin, 15,							rightWidth - rightFrameOffset, 								rightRevealPnts[idxFrameStartRevealRight][2] + gs_frame_thkin, 15					else						put	rightWidth - rightFrameOffset, 					rightRevealPnts[idxFrameStartRevealRight][2], 15,							rightRevealPnts[idxFrameStartRevealRight][1], 	rightRevealPnts[idxFrameStartRevealRight][2], 15,							rightRevealPnts[idxFrameEndRevealRight][1], 	rightRevealPnts[idxFrameEndRevealRight][2], 15,							rightWidth - rightFrameOffset, 					rightRevealPnts[idxFrameEndRevealRight][2], 15					endif				endif			endif			if iFrameStyle = FRAME_STYLE_DOUBLE_REBATE then				if WIDO_REVEAL_SIDE then					put	rightWidth - rightFrameOffset, 			 rightRevealPnts[idxFrameEndRevealRight][2] - gs_leaf_thk, 15,						rightWidth - rightFrameOffset - gs_ds_w, rightRevealPnts[idxFrameEndRevealRight][2] - gs_leaf_thk, 15,						rightWidth - rightFrameOffset - gs_ds_w, rightRevealPnts[idxFrameEndRevealRight][2] - gs_leaf_thk - gs_ds_thk, 15,						rightWidth - rightFrameOffset,			 rightRevealPnts[idxFrameEndRevealRight][2] - gs_leaf_thk - gs_ds_thk, 15					if not(bTShapedOpening & gs_sidelight_parapet_hgt_right > EPS) & gs_frame_wthk and gs_sidelight_right then						put rightWidth - rightFrameOffset, 								rightRevealPnts[idxFrameEndRevealRight][2] - gs_frame_thkin,  15,							rightWidth - gs_frame_width_right - gs_tolerance_right, 	rightRevealPnts[idxFrameEndRevealRight][2] - gs_frame_thkin,  15,							rightWidth - gs_frame_width_right - gs_tolerance_right, 	rightRevealPnts[idxFrameStartRevealRight][2],	15,							rightWidth, 												rightRevealPnts[idxFrameStartRevealRight][2],	15,							rightWidth, 												rightRevealPnts[idxFrameEndRevealRight][2],	15,							rightWidth - rightFrameOffset, 								rightRevealPnts[idxFrameEndRevealRight][2],	15					else						put	rightWidth - rightFrameOffset, 					rightRevealPnts[idxFrameStartRevealRight][2],  15,							rightRevealPnts[idxFrameStartRevealRight][1], 	rightRevealPnts[idxFrameStartRevealRight][2],  15,							rightRevealPnts[idxFrameEndRevealRight][1], 	rightRevealPnts[idxFrameEndRevealRight][2],  15,							rightWidth - rightFrameOffset, 					rightRevealPnts[idxFrameEndRevealRight][2],  15					endif				else					if not(bTShapedOpening & gs_sidelight_parapet_hgt_right > EPS) & gs_frame_wthk and gs_sidelight_right then						put	rightWidth - rightFrameOffset, 								rightRevealPnts[idxFrameStartRevealRight][2], 15,							rightWidth, 												rightRevealPnts[idxFrameStartRevealRight][2], 15,							rightWidth, 												rightRevealPnts[idxFrameEndRevealRight][2], 15,							rightWidth - gs_frame_width_right - gs_tolerance_right, 	rightRevealPnts[idxFrameEndRevealRight][2], 15,							rightWidth - gs_frame_width_right - gs_tolerance_right, 	rightRevealPnts[idxFrameStartRevealRight][2] + gs_frame_thkin, 15,							rightWidth - rightFrameOffset, 								rightRevealPnts[idxFrameStartRevealRight][2] + gs_frame_thkin, 15					else						put	rightWidth - rightFrameOffset, 					rightRevealPnts[idxFrameStartRevealRight][2], 15,							rightRevealPnts[idxFrameStartRevealRight][1], 	rightRevealPnts[idxFrameStartRevealRight][2], 15,							rightRevealPnts[idxFrameEndRevealRight][1], 	rightRevealPnts[idxFrameEndRevealRight][2], 15,							rightWidth - rightFrameOffset, 					rightRevealPnts[idxFrameEndRevealRight][2], 15					endif					put	rightWidth - rightFrameOffset, 			 rightRevealPnts[idxFrameStartRevealRight][2] + gs_leaf_thk + gs_ds_thk,  15,						rightWidth - rightFrameOffset - gs_ds_w, rightRevealPnts[idxFrameStartRevealRight][2] + gs_leaf_thk + gs_ds_thk,  15,						rightWidth - rightFrameOffset - gs_ds_w, rightRevealPnts[idxFrameStartRevealRight][2] + gs_leaf_thk,  15,						rightWidth - rightFrameOffset, 			 rightRevealPnts[idxFrameStartRevealRight][2] + gs_leaf_thk,  15				endif			endif			if	iFrameStyle = FRAME_STYLE_SIMPLE_REBATE		|\				iFrameStyle = FRAME_STYLE_EXTRUSION			|\				iFrameStyle = FRAME_STYLE_WRAPPED_EXTRUSION	then				if WIDO_REVEAL_SIDE then					put	rightRevealPnts[idxFrameEndRevealRight][1],			rightRevealPnts[idxFrameEndRevealRight][2], 15,						rightWidth - rightFrameOffset + gs_rebate_width,	rightRevealPnts[idxFrameEndRevealRight][2], 15,						rightWidth - rightFrameOffset + gs_rebate_width,	rightRevealPnts[idxFrameEndRevealRight][2] - gs_leaf_thk, 15,						rightWidth - rightFrameOffset,						rightRevealPnts[idxFrameEndRevealRight][2] - gs_leaf_thk, 15					if not(bTShapedOpening & gs_sidelight_parapet_hgt_right > EPS) & gs_frame_wthk and gs_sidelight_right then						put	rightWidth - rightFrameOffset,							rightRevealPnts[idxFrameEndRevealRight][2] - gs_frame_thkin,  15,							rightWidth - gs_frame_width_right - gs_tolerance_right, rightRevealPnts[idxFrameEndRevealRight][2] - gs_frame_thkin,  15,							rightWidth - gs_frame_width_right - gs_tolerance_right, rightRevealPnts[idxFrameStartRevealRight][2],  15,							rightWidth,												rightRevealPnts[idxFrameStartRevealRight][2],  15					else						put	rightWidth - rightFrameOffset,					rightRevealPnts[idxFrameStartRevealRight][2],  15,							rightWidth,										rightRevealPnts[idxFrameStartRevealRight][2],  15					endif				else					if not(bTShapedOpening & gs_sidelight_parapet_hgt_right > EPS) & gs_frame_wthk and gs_sidelight_right then						put	rightWidth,												rightRevealPnts[idxFrameEndRevealRight][2], 15,							rightWidth - gs_frame_width_right - gs_tolerance_right, rightRevealPnts[idxFrameEndRevealRight][2], 15,							rightWidth - gs_frame_width_right - gs_tolerance_right, rightRevealPnts[idxFrameStartRevealRight][2] + gs_frame_thkin, 15,							rightWidth - rightFrameOffset,							rightRevealPnts[idxFrameStartRevealRight][2] + gs_frame_thkin, 15					else						put	rightRevealPnts[idxFrameEndRevealRight][1], 	rightRevealPnts[idxFrameEndRevealRight][2], 15,							rightWidth - rightFrameOffset,					rightRevealPnts[idxFrameEndRevealRight][2], 15					endif					put	rightWidth - rightFrameOffset,						rightRevealPnts[idxFrameStartRevealRight][2] + gs_leaf_thk,  15,						rightWidth - rightFrameOffset + gs_rebate_width,	rightRevealPnts[idxFrameStartRevealRight][2] + gs_leaf_thk,  15,						rightWidth - rightFrameOffset + gs_rebate_width,	rightRevealPnts[idxFrameStartRevealRight][2],  15,						rightWidth, 										rightRevealPnts[idxFrameStartRevealRight][2],  15				endif			endif			if iFrameStyle = FRAME_STYLE_METAL then		!SWE				if WIDO_REVEAL_SIDE then					put	rightWidth - rightFrameOffset, rightRevealPnts[idxFrameEndRevealRight][2] + gs_rebate_depth - gs_fthk, 15,						rightWidth - rightFrameOffset + gs_rebate_width, rightRevealPnts[idxFrameEndRevealRight][2] + gs_rebate_depth - gs_fthk, 15					if not(bTShapedOpening & gs_sidelight_parapet_hgt_right > EPS) & gs_frame_wthk and gs_sidelight_right then						put	rightWidth - rightFrameOffset + gs_rebate_width,							rightRevealPnts[idxFrameEndRevealRight][2] - gs_frame_thkin,  15,							rightWidth - gs_frame_width_right - gs_tolerance_right + gs_rebate_width,	rightRevealPnts[idxFrameEndRevealRight][2] - gs_frame_thkin,  15,							rightWidth - gs_frame_width_right - gs_tolerance_right + gs_rebate_width,	rightRevealPnts[idxFrameStartRevealRight][2],  15,							rightWidth,																	rightRevealPnts[idxFrameStartRevealRight][2],  15					else						put	rightWidth - rightFrameOffset + gs_rebate_width,	rightRevealPnts[idxFrameStartRevealRight][2],  15,							rightWidth,											rightRevealPnts[idxFrameStartRevealRight][2],  15					endif				else					if not(bTShapedOpening & gs_sidelight_parapet_hgt_right > EPS) & gs_frame_wthk and gs_sidelight_right then						put	rightWidth,																	rightRevealPnts[idxFrameEndRevealRight][2], 15,							rightWidth - gs_frame_width_right - gs_tolerance_right + gs_rebate_width,	rightRevealPnts[idxFrameEndRevealRight][2], 15,							rightWidth - gs_frame_width_right - gs_tolerance_right + gs_rebate_width,	rightRevealPnts[idxFrameStartRevealRight][2] + gs_frame_thkin, 15,							rightWidth - rightFrameOffset + gs_rebate_width,							rightRevealPnts[idxFrameStartRevealRight][2] + gs_frame_thkin, 15					else						put	rightRevealPnts[idxFrameEndRevealRight][1], 		rightRevealPnts[idxFrameEndRevealRight][2], 15,							rightWidth - rightFrameOffset + gs_rebate_width,	rightRevealPnts[idxFrameEndRevealRight][2], 15					endif					put	rightWidth - rightFrameOffset + gs_rebate_width, rightRevealPnts[idxFrameStartRevealRight][2] - gs_rebate_depth + gs_fthk,  15,						rightWidth - rightFrameOffset, rightRevealPnts[idxFrameStartRevealRight][2] - gs_rebate_depth + gs_fthk,  15				endif			endif			if nsp > 6 then				if bDebug then					material 19					prism_ nsp/3, gs_treshold_thk, get(nsp)				else					pen gs_frame_pen					material gs_treshold_mat					sect_fill gs_treshold_fill, gs_treshold_pen_bg, gs_treshold_pen_fg, gs_treshold_pen_sectcont					cutpolya nsp/3, 1, 0, get(nsp)					nCut = nCut + 1				endif			else				for i=1 to nsp					n = get(1)				next i			endif			! right treshold - reveal connection			if gs_turn_plaster_show_3D then				startIdx = idxSillStartPlasterRight				endIdx   = idxBoardEndPlasterRight			else				startIdx = idxSillStartRevealRight				endIdx   = idxBoardEndRevealRight			endif			if bNosing & WIDO_REVEAL_SIDE then				if gs_stack_right then					if abs(rightRevealPnts[startIdx+1][1] - rightRevealPnts[startIdx][1]) < EPS then						if (rightRevealPnts[startIdx+1][2] - rightRevealPnts[startIdx][2]) > EPS then							rightAngOut = 90						else							rightAngOut = 270						endif					else						rightAngOut = atn((rightRevealPnts[startIdx+1][2] - rightRevealPnts[startIdx][2]) / (rightRevealPnts[startIdx+1][1] - rightRevealPnts[startIdx][1]))					endif					put rightRevealPnts[startIdx][1] - nosingOver / tan(rightAngOut), rightRevealPnts[startIdx][2] - nosingOver, 8				else					put rightRevealPnts[startIdx][1], rightRevealPnts[startIdx][2] - nosingOver, 15				endif			endif			for i = startIdx to endIdx				put rightRevealPnts[i][1], rightRevealPnts[i][2], 8 + 7 * not(gs_stack_right)			next i			if bNosing & not(WIDO_REVEAL_SIDE) then				if gs_stack_right then					if abs(rightRevealPnts[endIdx][1] - rightRevealPnts[endIdx-1][1]) < EPS then						if (rightRevealPnts[endIdx][2] - rightRevealPnts[endIdx-1][2]) > EPS then							rightAngOut = 90						else							rightAngOut = 270						endif					else						rightAngOut = atn((rightRevealPnts[endIdx][2] - rightRevealPnts[endIdx-1][2]) / (rightRevealPnts[endIdx][1] - rightRevealPnts[endIdx-1][1]))					endif					put rightRevealPnts[endIdx][1] + nosingOver / tan(rightAngOut), rightRevealPnts[endIdx][2] + nosingOver, 8					if curvedWall then						radDiff = tan(acs(rightRevealPnts[endIdx][1] / radBoard)) * rightRevealPnts[endIdx][1] - tan(acs(rightRevealPnts[endIdx][1] / radSill)) * rightRevealPnts[endIdx][1] - (radBoard - radSill)						pxR = pxR + (nosing + radDiff) / tan(rightAngOut)					endif				else					put rightRevealPnts[endIdx][1], rightRevealPnts[endIdx][2] + nosingOver, 15				endif			endif			if not(curvedWall) then				if WIDO_REVEAL_SIDE then					put	pxR + cutOversize, rightRevealPnts[endIdx][2],					8 + 7 * not(gs_stack_right),						pxR + cutOversize, rightRevealPnts[startIdx][2] - nosingOver,	8 + 7 * not(gs_stack_right)				else					put	pxR + cutOversize, rightRevealPnts[endIdx][2] + nosingOver,		8 + 7 * not(gs_stack_right),						pxR + cutOversize, rightRevealPnts[startIdx][2],				8 + 7 * not(gs_stack_right)				endif			else				resol 100				p3x = pxR + cutOversize				p4x = pxR + cutOversize				p3y = rightRevealPnts[1][2]				p4y = rightRevealPnts[1][2]				xo = 0 : yo = WOD : ro = radSill - nosingOver * WIDO_REVEAL_SIDE				x1 = p4x : y1 = p4y : x2 = 0 : y2 = WOD				gosub 101				gosub 102				p3y = cy				p3x = cx				xo = 0 : yo = WOD : ro = radBoard				x1 = p4x : y1 = p4y : x2 = 0 : y2 = WOD				gosub 101				gosub 102				p4y = cy				p4x = cx				put	0, WOD, 900 + 64 + 8 + 7 * not(gs_stack_right),					p4x, p4y, 3000 + 64 + 8 + 7 * not(gs_stack_right)				if not(WIDO_REVEAL_SIDE) & not(bNosing) then					put	p3x, p3y, 64 + 8 + 7 * not(gs_stack_right),						0, WOD, 900 + 64 + 8 + 7 * not(gs_stack_right),						rightRevealPnts[startIdx][1], rightRevealPnts[startIdx][2], 3000 + 64 + 8 + 7 * not(gs_stack_right)				endif			endif			if nsp > 6 then				if bDebug then					material 19					prism_ nsp/3, gs_treshold_thk, get(nsp)				else					pen gs_frame_pen					material gs_treshold_mat					sect_fill gs_treshold_fill, gs_treshold_pen_bg, gs_treshold_pen_fg, gs_treshold_pen_sectcont					cutpolya nsp/3, 1, 0, get(nsp)					nCut = nCut + 1				endif			else				for i=1 to nsp					n = get(1)				next i			endif			del 2			! Threshold Prism!			if bOpeningDir then!				muly -1!				addy WIDO_FRAME_THICKNESS!			endif			addy gs_frame_oversize_thk*(iFrameStyle = FRAME_STYLE_WRAPPED_EXTRUSION)			!if iThresholdType = TRESHOLD_HEVE | iThresholdType = TRESHOLD_HC then			!endif			if iThresholdType = TRESHOLD_FLAT then				addx pxR				rotz -90				rotx 90				prism_ 5, pxR-pxL,					0, 0, 15,					gs_treshold_width, 0, 15,					gs_treshold_width, gs_treshold_thk, 15,					0, gs_treshold_thk, 15,					0, 0, -1				del 3			endif			if iThresholdType = TRESHOLD_ANSLAG | iThresholdType = TRESHOLD_BRANN | iThresholdType = TRESHOLD_BADEROMS | iThresholdType = TRESHOLD_AKKUSTIKK then				addx pxR				rotz -90				rotx 90				prism_ 8, pxR-pxL,					0, 0, 15,					gs_treshold_width, 0, 15,					gs_treshold_width, gs_treshold_thk, 15,					gs_treshold_width-gs_treshold_thk, gs_treshold_thk+nor_threshold_offset, 15,					gs_leaf_thk, gs_treshold_thk+nor_threshold_offset, 15,					gs_leaf_thk, gs_treshold_thk, 15,					0, gs_treshold_thk, 15,					0, 0, -1				del 3			endif			if iThresholdType = TRESHOLD_GUMMI then				hur=ABS(SQR((gs_treshold_width/2)**2+(gs_treshold_thk*2/3)**2))/2				szog_a=90-ATN((gs_treshold_width/2)/(gs_treshold_thk*2/3))				rad=hur/SIN(szog_a)				addx pxR				rotz -90				rotx 90				prism_ 7, pxR-pxL,					0, gs_treshold_thk/3, 15+64,					gs_treshold_width/2, gs_treshold_thk-rad, 900,					gs_treshold_width/2, gs_treshold_thk, 3000+15+64,					gs_treshold_width, gs_treshold_thk/3, 3000+15+64,					gs_treshold_width, 0, 15,					0, 0, 15,					0, gs_treshold_thk/3, -1				del 3			endif			vert 0, 0, 0			vert 1, 0, 0			vert 0, 1, 0			vert 0, 0, 1			coor 5, -1, -2, -3, -4			body 1			for i = 1 to nCut				cutend			next i!			if bOpeningDir then del 2			del 1		else			! Threshold profiled, beneath panel			pen gs_frame_pen			material gs_treshold_mat			sect_fill gs_treshold_fill, gs_treshold_pen_bg, gs_treshold_pen_fg, gs_treshold_pen_sectcont			if iThresholdType = TRESHOLD_BENEATHPANEL then				if gs_treshold_inFloor then addz - gs_treshold_thk				prism_ 4, gs_treshold_thk,					-LeftWidth, 0, 15,					-LeftWidth, -gs_fthk, 15,					RightWidth, -gs_fthk, 15,					RightWidth, 0, 15				if gs_treshold_inFloor then del 1			endif			if iThresholdType = TRESHOLD_PROFILED then				if gs_treshold_inFloor then addz - gs_treshold_thk				roty -90				addz -LeftWidth+gs_sidelight_width_right				rotz -90!				if bOpeningDir 		then xx=0.08-0.005				xx=gs_fthk-0.08-0.001				prism_ 11,(LeftWidth + RightWidth)-gs_sidelight_width_left-gs_sidelight_width_right,					gs_fthk,		0,15,					gs_fthk,		gs_treshold_thk,15,					gs_fthk-xx,		gs_treshold_thk,15,					gs_fthk-xx,		gs_treshold_thk-0.016,15,					0,				gs_treshold_thk-0.027,10,					0,				0,15,					0.015,			0,15,					0.020,			0.014,15,					0.060,			0.014,15,					0.060,			0,15,					gs_fthk,		0,-1				prism_ 9,-gs_sidelight_width_right,					gs_fthk,		0,15,					gs_fthk,		gs_treshold_thk,15,					0,				gs_treshold_thk,10,					0,				0,15,					0.015,			0,15,					0.020,			0.014,15,					0.060,			0.014,15,					0.060,			0,15,					gs_fthk,		0,-1				addz -gs_sidelight_width_right+(LeftWidth + RightWidth)-gs_sidelight_width_left				prism_ 9,gs_sidelight_width_left,					gs_fthk,		0,15,					gs_fthk,		gs_treshold_thk,15,					0,				gs_treshold_thk,10,					0,				0,15,					0.015,			0,15,					0.020,			0.014,15,					0.060,			0.014,15,					0.060,			0,15,					gs_fthk,		0,-1				del 4				if gs_treshold_inFloor then del 1			endif			pxL = -leftWidth  + leftFrameOffset  - gs_rebate_width			pxR =  rightWidth - rightFrameOffset + gs_rebate_width			if	iThresholdType = TRESHOLD_SLOPINGEXT |\				iThresholdType = TRESHOLD_METAL then				muly -1				addy WIDO_FRAME_THICKNESS			endif			if iThresholdType = TRESHOLD_SIMPLE then				if WIDO_REVEAL_SIDE then					addy -gs_frame_oversize_thk*(iFrameStyle = FRAME_STYLE_WRAPPED_EXTRUSION)				else					addy gs_frame_oversize_thk*(iFrameStyle = FRAME_STYLE_WRAPPED_EXTRUSION)				endif			endif			nCut = 0			IF iFrameStyle = FRAME_STYLE_DOUBLE_REBATE THEN				ADD pxR-gs_ds_w, -gs_leaf_thk-gs_ds_thk, 0				CUTPOLYA 5, 1, 0,					0, 0, 15,					gs_ds_w, 0, 15,					gs_ds_w, gs_ds_thk, 15,					0, gs_ds_thk, 15,					0, 0, -1				DEL 1				ADD pxL-gs_ds_w, -gs_leaf_thk-gs_ds_thk, 0				CUTPOLYA 5, 1, 0,					0, 0, 15,					gs_ds_w, 0, 15,					gs_ds_w, gs_ds_thk, 15,					0, gs_ds_thk, 15,					0, 0, -1				DEL 1				nCut = nCut + 2			ENDIF			IF	iFrameStyle = FRAME_STYLE_SIMPLE_REBATE		|\				iFrameStyle = FRAME_STYLE_EXTRUSION			|\				iFrameStyle = FRAME_STYLE_WRAPPED_EXTRUSION	then				if gs_rebate_width > EPS then					ADD pxR-gs_rebate_width, -gs_leaf_thk, 0					CUTPOLYA 5, 1, 0,						0, 0, 15,						gs_rebate_width, 0, 15,						gs_rebate_width, -gs_fthk, 15,						0, -gs_fthk, 15,						0, 0, -1					DEL 1					ADD pxL+gs_rebate_width, -gs_leaf_thk, 0					CUTPOLYA 5, 1, 0,						0, 0, 15,						-gs_rebate_width, 0, 15,						-gs_rebate_width, -gs_fthk, 15,						0, -gs_fthk, 15,						0, 0, -1					DEL 1					nCut = nCut + 2				endif			ENDIF			IF iFrameStyle = FRAME_STYLE_METAL THEN		!SWE				ADD pxR-gs_rebate_width, -gs_fthk, 0				CUTPOLYA 7, 1, 0,					gs_rebate_width, 0, 15,					rightFrameOffset, 0, 15,					rightFrameOffset, gs_fthk, 15,					0, gs_fthk, 15,					0, gs_rebate_depth, 15,					gs_rebate_width, gs_rebate_depth, 15,					gs_rebate_width, 0, -1				DEL 1				ADD pxL+gs_rebate_width, -gs_fthk, 0				CUTPOLYA 7, 1, 0,					-gs_rebate_width, 0, 15,					-leftFrameOffset, 0, 15,					-leftFrameOffset, gs_fthk, 15,					0, gs_fthk, 15,					0, gs_rebate_depth, 15,					-gs_rebate_width, gs_rebate_depth, 15,					-gs_rebate_width, 0, -1				DEL 1				nCut = nCut + 2			ENDIF			IF iThresholdType = TRESHOLD_SIMPLE THEN				ADDX pxR				ROTZ -90				ROTX 90				PRISM_ 5, pxR-pxL,					0, 0, 15,					gs_treshold_width, 0, 15,					gs_treshold_width, gs_treshold_thk, 15,					0, gs_treshold_thk, 15,					0, 0, -1				DEL 3			ENDIF			if iThresholdType = TRESHOLD_SLOPINGEXT then				pxL = -leftWidth				pxR =  rightWidth				gs_tresh_ext_hgt	= gs_treshold_thk - gs_rebate_width - (tan(gs_treshold_angle) * (gs_treshold_width - gs_fthk + gs_rebate_depth))				gs_tresh_nos_hgt	= gs_treshold_thk - gs_rebate_width - (tan(gs_treshold_angle) * (gs_treshold_width + gs_treshold_nosing - gs_fthk + gs_rebate_depth))				ADDX pxR				ROTZ -90				ROTX 90				PRISM_ 6, pxR-pxL,					gs_treshold_width, 0, 15,					0, 0, 15,					0, gs_treshold_thk, 15,					gs_fthk - gs_rebate_depth, gs_treshold_thk, 15,					gs_fthk - gs_rebate_depth, gs_treshold_thk - gs_rebate_width - 0.001, 15,					gs_treshold_width, gs_tresh_ext_hgt - 0.001, 15				material gs_treshold_metal_mat				EXTRUDE 3, 0, 0, pxR-pxL, 16+32,					gs_fthk - gs_rebate_depth, gs_treshold_thk - gs_rebate_width, 1,					gs_treshold_width + gs_treshold_nosing, gs_tresh_nos_hgt, 1,					gs_treshold_width + gs_treshold_nosing, gs_tresh_nos_hgt - 0.004, 1				DEL 3			endif			if iThresholdType = TRESHOLD_METAL then				pxL = -leftWidth				pxR =  rightWidth				ADDX pxR				ROTZ -90				ROTX 90				PRISM_ 4, pxR-pxL,					gs_fthk - gs_rebate_depth, 0, 15,					gs_fthk - gs_rebate_depth, gs_treshold_thk - gs_rebate_width, 15,					gs_treshold_width, gs_treshold_ext_hgt, 15,					gs_treshold_width, 0, 15				material gs_treshold_metal_mat				PRISM_ 10, pxR-pxL,					0, 0, 15,					gs_fthk - gs_rebate_depth, 0, 15,					gs_fthk - gs_rebate_depth, gs_treshold_thk, 15,					0, gs_treshold_thk, 15,					0, 0, -1,					0.0025, 0.0025, 15,					gs_fthk - gs_rebate_depth - 0.0025, 0.0025, 15,					gs_fthk - gs_rebate_depth - 0.0025, gs_treshold_thk - 0.0025, 15,					0.0025, gs_treshold_thk - 0.0025, 15,					0.0025, 0.0025, -1				DEL 3			endif			for i = 1 to nCut				cutend			next i			if	iThresholdType = TRESHOLD_SLOPINGEXT |\				iThresholdType = TRESHOLD_METAL then				del 2			endif			if iThresholdType = TRESHOLD_SIMPLE then del 1		endif	endifendif! Restore the saved parameter buffer ===========================================call "LoadQueue" parameters savedQueueValues = savedQueueValues! ==============================================================================end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end! ==============================================================================! ==============================================================================! === SUBROUTINES! ==============================================================================! ==============================================================================!		Arc segmentation! ------------------------------------------------------------------------------! Input parameters:!	alfaStart:		Start angle!	alfaEnd:		End angle!	arcRadius:		Arc radius!	firstStatus:	Status of the first segment!	lastStatus:		Status of the last segment! ==============================================================================100:	if not(wallIsLeft) then		alfaStart = 180 - alfaStart		alfaEnd = 180 - alfaEnd	endif	segmentAngle = 360 / WALL_RESOL	! --- Point at Start Angle ---	if WIDO_REVEAL_SIDE then		if SYMB_ROTANGLE < EPS then			difAngle = (AC_Hole_Position_Angle + alfaStart) mod segmentAngle		else			difAngle = -(AC_Hole_Position_Angle - 180 - alfaStart) mod segmentAngle		endif	else		if SYMB_ROTANGLE < EPS then			difAngle = -(AC_Hole_Position_Angle - alfaStart + 180) mod segmentAngle		else			difAngle = (AC_Hole_Position_Angle + alfaStart) mod segmentAngle		endif	endif	difAngle2 = difAngle	if abs(difAngle) > segmentAngle / 2 then difAngle = -segmentAngle / 2 + abs(difAngle mod (segmentAngle / 2))	segmentR = arcRadius / cos(difAngle)	put segmentR * sin(alfaStart), -segmentR * cos(alfaStart), firstStatus	! --- Middle Points ---	segmentR = arcRadius / cos(segmentAngle / 2)	if alfaStart > alfaEnd then		alfaActual = alfaStart - difAngle2 + segmentAngle / 2		if alfaActual > alfaStart then alfaActual = alfaActual - segmentAngle		if alfaActual > alfaStart then alfaActual = alfaActual - segmentAngle		if alfaActual < alfaEnd then alfaActual = alfaActual + segmentAngle		if alfaActual < alfaStart & alfaActual > alfaEnd then			do				put segmentR * sin(alfaActual), -segmentR * cos(alfaActual), 79				alfaActual = alfaActual - segmentAngle			while alfaActual > alfaEnd		endif	else		alfaActual = alfaStart - difAngle2 + segmentAngle / 2		if alfaActual < alfaStart then alfaActual = alfaActual + segmentAngle		if alfaActual > alfaEnd then alfaActual = alfaActual - segmentAngle		if alfaActual > alfaStart & alfaActual < alfaEnd then			do				put segmentR * sin(alfaActual), -segmentR * cos(alfaActual), 79				alfaActual = alfaActual + segmentAngle			while alfaActual < alfaEnd		endif	endif	! --- Point at End Angle ---	if WIDO_REVEAL_SIDE then		if SYMB_ROTANGLE < EPS then			difAngle = (AC_Hole_Position_Angle + alfaEnd) mod segmentAngle		else			difAngle = -(AC_Hole_Position_Angle + 180 - alfaEnd) mod segmentAngle		endif	else		if SYMB_ROTANGLE < EPS then			difAngle = -(AC_Hole_Position_Angle - alfaEnd + 180) mod segmentAngle		else			difAngle = (AC_Hole_Position_Angle + alfaEnd) mod segmentAngle		endif	endif	if abs(difAngle) > segmentAngle / 2 then difAngle = -segmentAngle / 2 + abs(difAngle mod (segmentAngle / 2))	segmentR = arcRadius / cos(difAngle)	put segmentR * sin(alfaEnd), -segmentR * cos(alfaEnd), lastStatus	return! ==============================================================================! Circle - Line intersection! ------------------------------------------------------------------------------! Input variables:!	EPS:				epsylon!	xo,yo,ro:			circle!	x1,y1, x2,y2		line!! Returned variables:!	state:				0 = no intersection point!						1 = one intersection point (tangential line)!						2 = two intersection points!	xa, ya:				intersection point #1!	xb, yb:				intersection point #2! ==============================================================================101:	tempX1 = x1 - xo: tempY1 = y1 - yo	tempX2 = x2 - xo: tempY2 = y2 - yo	if abs(tempX2 - tempX1) < EPS then		if abs(ro - abs(tempX1)) < EPS then			state = 1			xa = tempX1			ya = 0			xb = tempX1			yb = 0		else			if abs(ro) - abs(tempX1) < 0 then				state = 0: xa = 0: ya = 0: xb = 0: yb = 0			else				state = 2				xa = tempX1				ya = sqr(ro^2 - tempX1^2)				xb = tempX1				yb = -sqr(ro^2 - tempX1^2)			endif		endif	else		kf = (tempY2 - tempY1) / (tempX2 - tempX1)		ad = 1 + kf^2		bd = 2 * tempY1 * kf - 2 * tempX1 * kf^2		cd = tempY1^2 - 2 * tempX1 * tempY1 * kf + tempX1^2 * kf^2 - ro^2		if bd^2 - 4 * ad * cd < 0 then			state = 0: xa = 0: ya = 0: xb = 0: yb = 0		else			xa = (-bd + sqr(bd^2 - 4 * ad * cd)) / (2 * ad)			ya = tempY1 + (xa - tempX1) * kf			xb = (-bd - sqr(bd^2 - 4 * ad * cd)) / (2 * ad)			yb = tempY1 + (xb - tempX1) * kf			if abs(xa - xb) < EPS then state = 1 else state = 2		endif	endif	if state = 2 then		da = sqr((tempX1 - xa)^2 + (tempY1 - ya)^2)		db = sqr((tempX1 - xb)^2 + (tempY1 - yb)^2)		if db < da then			xxo = xa: yyo = ya			xa = xb:  ya = yb			xb = xxo: yb = yyo		endif	endif	xa = xa + xo: ya = ya + yo	xb = xb + xo: yb = yb + yoreturn! ==============================================================================! Select good intersection point after Circle - Line intersection! ------------------------------------------------------------------------------! Input variables:!	state:				intersection status!	wallIsLeft:!	xa, ya:				intersection point #1!	xb, yb:				intersection point #2!! Returned variables:!	cx, cy:				selected intersection point! ==============================================================================102:	cx = 0	cy = 0	if state = 1 then		cx = xa		cy = ya	endif	if state = 2 then		if wallIsLeft then			if ya > yb then				cx = xb				cy = yb			else				cx = xa				cy = ya			endif		else			if ya < yb then				cx = xb				cy = yb			else				cx = xa				cy = ya			endif		endif	endifreturn