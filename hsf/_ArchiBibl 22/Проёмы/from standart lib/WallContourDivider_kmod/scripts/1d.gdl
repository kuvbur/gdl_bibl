! Contact person: <NJ>! ==============================================================================! Splits incoming line segments with wall skin separator lines! Assign pen and line type properties to line segments! ------------------------------------------------------------------------------! Input parameters:!	lineSections:! ==============================================================================EPS = 0.0001! ==============================================================================curvedWall		= abs(WIDO_ORIG_DIST) > EPSwallIsLeft		= (SYMB_ROTANGLE > EPS) exor WIDO_REVEAL_SIDEsignWallIsLeft	= wallIsleft - not(wallIsleft)! ==============================================================================! Composite Wall Specific Definitions! ==============================================================================reorder = (AC_Wall_Direction_Type <> 1 & AC_Wall_Direction_Type <> 3)signReorder = not(reorder) - reorderSKIN_FILL				=  1SKIN_THICKNESS			=  2SKIN_CONT_PEN			=  3	! Obsolete (old contour pen)SKIN_FILL_PEN			=  4SKIN_FILL_BACK_PEN		=  5SKIN_CORE_STATUS		=  6SKIN_UPPER_LINE_PEN		=  7 + 2 * reorderSKIN_UPPER_LINE_TYPE	=  8 + 2 * reorderSKIN_LOWER_LINE_PEN		=  9 - 2 * reorderSKIN_LOWER_LINE_TYPE	= 10 - 2 * reorderSKIN_END_FACE_PEN		= 11SKIN_FILL_ORIENTATION	= 12	! 0 - global, 1 - localSKIN_TYPE				= 13	! 0 - cut, 1 - below cutplane, 2 - above cutplane (all skin types are 0 for simple walls)!	For D/W in complex walls on the floor plan this variable contains the data of all cut skins, for wall ends on the floor plan the data of all skins.!	For D/W and wall ends in the 3D window contains the data of the skins actually cut by the D/W or wall endSKIN_END_LINE_TYPE		= 14SKIN_FINISH_STATUS		= 15SKIN_FILL_FIT_TO_SKIN	= 16SKIN_THICKEN_TRAPEZOID	= 17bCompositeWall		= (WALL_SKINS_NUMBER > 0)! Partial Stucture Display defines:STRUCTURE_ENTIRE_STRUCTURE	= 0STRUCTURE_CORE_ONLY			= 1STRUCTURE_WITHOUT_FINISHES	= 2! ==============================================================================! Calculations for Trapezoid Walls! ==============================================================================if abs(WALL_INCL) > EPS then	bInclinedWall = 1	bInclDir = SYMB_MIRRORED exor (SYMB_ROTANGLE > EPS)	! (0 / 1)	iInclDir = not(bInclDir) - bInclDir					! (1 / -1)	incH = cos(WALL_INCL)	incV = sin(WALL_INCL) * iInclDir	incHor = tan(WALL_INCL)else	bInclinedWall = 0endif! ==============================================================================! Wall Line Structure! ==============================================================================LINE_BEG_X		= 1LINE_BEG_Y		= 2LINE_END_X		= 3LINE_END_Y		= 4LINE_ATTRIBUTES	= 5	! bitfield, look at LINE_ATTRIBUTES_xxx for available valuesLINE_PEN_IDX	= 6LINE_LTYPE_IDX	= 7LINE_STRUCTURE_SIZE	= 7!LINE_ATTRIBUTES_GDLLINE	= 0			! Draw GDL Line in the section!LINE_ATTRIBUTES_WALLLINE	= 1			! Draw WallLine in the section!LINE_ATTRIBUTES_WALLSIDE	= 2			! The section is on the wall side (it is an arc in curved wall)!LINE_ATTRIBUTES_DRAWCC		= 3			! The section is drawn by CavityClosure macro (otherwise the WallHoleCut macro)!LINE_ATTRIBUTES_CONTOUR	= 4			! The section is contour or inner line!LINE_ATTRIBUTES_WALLEDGE	= 0			! The section is on the wall edge (always a straight line)! ==============================================================================numSegments = vardim1(lineSections)! ==============================================================================! Fill line pen and line type attributes in case of solid walls! ==============================================================================if not(bCompositeWall) then	for i=1 to numSegments		lineSections[i][LINE_PEN_IDX]	= WALL_SECT_PEN		lineSections[i][LINE_LTYPE_IDX]	= WALL_LINETYPE	next i! Returned line sections -------------------------------------------------------	end lineSectionsendif! ==============================================================================! Split line segments with wall skins! ==============================================================================!if WIDO_REVEAL_SIDE then!	add2 0,-WIDO_FRAME_THICKNESS!else!	mul2 1,-1!endif!add2 -0.01,-0.01dim lineSectionSplits[][7]jdx = 1if bCompositeWall then	if bInclinedWall then		WallThk = 0		bInclinedSkin = 0		totalNotInclinedSkinsThk	= 0		totalSlantedSkinsThk		= 0		inclinedSkinThk				= 0		for j = 1 to WALL_SKINS_NUMBER			idx = j: gosub 10	! Get proper index			skinThk = WALL_SKINS_PARAMS[idx][SKIN_THICKNESS]			WallThk = WallThk + skinThk			if bInclinedSkin then				totalSlantedSkinsThk = totalSlantedSkinsThk + skinThk			endif			if abs(WALL_SKINS_PARAMS[idx][SKIN_THICKEN_TRAPEZOID] - 1) < EPS then				bInclinedSkin = 1				inclinedSkinThk = skinThk			endif			if not(bInclinedSkin) then				totalNotInclinedSkinsThk = totalNotInclinedSkinsThk + skinThk			endif		next j		inclinedSkinThkMod = -(WallThk - inclinedSkinThk - totalNotInclinedSkinsThk - totalSlantedSkinsThk / cos(WALL_INCL))	endif	for i=1 to numSegments		x11			= lineSections[i][LINE_BEG_X]		y11			= lineSections[i][LINE_BEG_Y]		x12			= lineSections[i][LINE_END_X]		y12			= lineSections[i][LINE_END_Y]		iAttributes	= lineSections[i][LINE_ATTRIBUTES]		bWallSideLine = (bittest(iAttributes, 2))		if bWallSideLine then			bSkipSegment = ((y11 > 0 & offsetBoard > EPS) | (y11 < 0 & offsetSill > EPS))		else			bSkipSegment = 0		endif		if not(bSkipSegment) then			if curvedWall then				actY = 0			else				actY = -WIDO_SILL			endif			bInclinedSkin = 0			bSplited = 0			bDoSplit = 1			j = 1			do				idx = j: gosub 10	! Get proper index				actY = actY + WALL_SKINS_PARAMS[idx][SKIN_THICKNESS]				if curvedWall then					xo = 0					yo = WOD					ro = radSill - signWallIsLeft * actY					x1 = x11					y1 = y11					x2 = x12					y2 = y12					gosub 500!!if state  = 1 then!!	circle2 cx,cy,0.01!!endif				else					if abs(WALL_SKINS_PARAMS[idx][SKIN_THICKEN_TRAPEZOID] - 1) < EPS & bInclinedWall then bInclinedSkin = 1					if bInclinedSkin then						if SYMB_MIRRORED exor abs(SYMB_ROTANGLE - 180) < EPS then							SignIncl = -1						else							SignIncl = 1						endif						x21 = 0						y21 = totalNotInclinedSkinsThk + inclinedSkinThk - WIDO_SILL - inclinedSkinThkMod + (actY + WIDO_SILL - inclinedSkinThk - totalNotInclinedSkinsThk) / cos(WALL_INCL) - (WallThk - WALL_THICKNESS)						x22 = cos(WALL_INCL)						y22 = y21 + SignIncl * sin(WALL_INCL)					else						x21 = 0						y21 = actY						x22 = 1						y22 = actY					endif					gosub 400				endif				bShowSkin = not((GLOB_STRUCTURE_DISPLAY = STRUCTURE_CORE_ONLY & WALL_SKINS_PARAMS[idx][SKIN_CORE_STATUS] < EPS) | \								(GLOB_STRUCTURE_DISPLAY = STRUCTURE_WITHOUT_FINISHES & abs(WALL_SKINS_PARAMS[idx][SKIN_FINISH_STATUS] - 1) < EPS))				if bShowSkin then					if bWallSideLine then						if idx = 1 exor not(reorder) then							linePenIdx	= WALL_SKINS_PARAMS[idx][SKIN_LOWER_LINE_PEN]							lineTypeIdx	= WALL_SKINS_PARAMS[idx][SKIN_LOWER_LINE_TYPE]						else							linePenIdx	= WALL_SKINS_PARAMS[idx][SKIN_UPPER_LINE_PEN]							lineTypeIdx	= WALL_SKINS_PARAMS[idx][SKIN_UPPER_LINE_TYPE]						endif					else						linePenIdx	= WALL_SKINS_PARAMS[idx][SKIN_END_FACE_PEN]						lineTypeIdx	= WALL_SKINS_PARAMS[idx][SKIN_END_LINE_TYPE]					endif				else					linePenIdx	= 0					lineTypeIdx	= 1				endif				if state = 1 | state = 3 then					bSplited = 1					if y11 < cy then						xb = x11						yb = y11						x11 = cx						y11 = cy					else						xb = x12						yb = y12						x12 = cx						y12 = cy					endif					xe = cx					ye = cy					gosub 1000	! Put line section				endif				if state = 0 then	! Parallel segments					if not(curvedWall) then						if max(y21, y22) + EPS > max(y11, y12) then							bDoSplit = 0						endif					else						Rmax = max(SQR((x11 ^ 2) + ((WOD - y11) ^ 2)), SQR((x12 ^ 2) + ((WOD - y12) ^ 2)))						if (wallIsLeft & (Rmax + EPS) > ro) | (not(wallIsLeft) & (Rmax + EPS) < ro) then							bDoSplit = 0						endif					endif				else					if cy + EPS > max(y11, y12) then						bDoSplit = 0					endif				endif				j = j + 1			while bDoSplit & j <= WALL_SKINS_NUMBER			xb = x11			yb = y11			xe = x12			ye = y12			gosub 1000	! Put line section		endif	next i! Returned line sections -------------------------------------------------------	end lineSectionSplitsendif!del 2! ==============================================================================end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end! ==============================================================================! ==============================================================================!		Calculate proper skin index from parameter 'idx'! ------------------------------------------------------------------------------! Input variables:!	idx:	index of current skin! Output variables:!	idx:	index of skin via 'Composite Structures' dialog! ==============================================================================10:	if not(wallIsLeft) then		idx = WALL_SKINS_NUMBER + 1 - idx	endifreturn! ==============================================================================! Put line section! ------------------------------------------------------------------------------! Input variables:!	jdx:				array index!	xb, yb:				line begin point index in the revealPnts array!	xe, ye:				line end point index in the revealPnts array!	iAttributes:		line attribute identifier!	linePenIdx:			pen index!	lineTypeIdx:		line type index! Returned variables:!	lineSectionSplits:	new entry in the lineSectionSplits array! ==============================================================================1000:	if abs(yb - ye) < EPS then		if abs(xb - xe) < EPS then			return		endif	endif	lineSectionSplits[jdx][LINE_BEG_X]		= xb	lineSectionSplits[jdx][LINE_BEG_Y]		= yb	lineSectionSplits[jdx][LINE_END_X]		= xe	lineSectionSplits[jdx][LINE_END_Y]		= ye	lineSectionSplits[jdx][LINE_ATTRIBUTES]= iAttributes	lineSectionSplits[jdx][LINE_PEN_IDX]	= linePenIdx	lineSectionSplits[jdx][LINE_LTYPE_IDX]	= lineTypeIdx	jdx = jdx + 1return! ==============================================================================! Segment - Segment intersection! ==============================================================================! Input variables:!	EPS:				epsylon!	x11,y11, x12,y12	segment #1!	x21,y21, x22,y22	segment #2!! Returned variables:!	state:				output status!							-1: no intersection, segments is not parallel!							 0: no intersection, parallel segments!							 1: intersection point lies on S1 segment, but not lies on S2!							 2: intersection point lies on S2 segment, but not lies on S1!							 3: intersection point lies on both segments!	cx, cy:				intersection point! ==============================================================================400:	gosub 401	! Line - Line intersection	if state then		state = 0		if abs(x11 - x12) < EPS then			if (y11 - EPS <= cy & cy <= y12 + EPS) | (y11 + EPS >= cy & cy >= y12 - EPS) then state = 1		else			if (x11 - EPS <= cx & cx <= x12 + EPS) | (x11 + EPS >= cx & cx >= x12 - EPS) then state = 1		endif		if abs(x21 - x22) < EPS then			if (y21 - EPS <= cy & cy <= y22 + EPS) | (y21 + EPS >= cy & cy >= y22 - EPS) then state = state + 2		else			if (x21 - EPS <= cx & cx <= x22 + EPS) | (x21 + EPS >= cx & cx >= x22 - EPS) then state = state + 2		endif		if state = 0 then			state = -1		else			if abs(x11 - cx) < EPS & abs(y11 - cy) < EPS then state = state + 10			if abs(x12 - cx) < EPS & abs(y12 - cy) < EPS then state = state + 10		endif	endifreturn! ==============================================================================! Line - Line intersection! ------------------------------------------------------------------------------! Input variables:!	EPS:				epsylon!	x11,y11, x12,y12	line #1!	x21,y21, x22,y22	line #2!! Returned variables:!	state:				0 = no intersection point!						1 = valid intersection point!	cx, cy:				intersection point! ==============================================================================401:	lliDiv = (x11-x12) * (y21-y22) - (y11-y12) * (x21-x22)	if abs(lliDiv) > EPS then		! Intersection		temp1 = x11 * y12 - y11 * x12		temp2 = x21 * y22 - y21 * x22		tempx = temp1 * (x21-x22) - (x11-x12) * temp2		tempy = temp1 * (y21-y22) - (y11-y12) * temp2		state = 1		cx = (tempx / lliDiv)		cy = (tempy / lliDiv)	else		! No Intersection		state = 0		cx = 0		cy = 0	endifreturn! ==============================================================================! Circle - Segment intersection! ------------------------------------------------------------------------------! Input variables:!	EPS:				epsylon!	xo,yo,ro:			circle!	x1,y1, x2,y2		segment!! Returned variables:!	state:				0 = no intersection point!						1 = one intersection point!						11 = intersection point not on section!	xa, ya:				intersection point #1!	xb, yb:				intersection point #2! ==============================================================================500:	gosub 501	! Circle - Line intersection	gosub 502	! Select good intersection point	if state <> 0 then		state = 0		if abs(x1 - x2) < EPS then			if (y1 - EPS <= cy & cy <= y2 + EPS) | (y1 + EPS >= cy & cy >= y2 - EPS) then state = 1		else			if (x1 - EPS <= cx & cx <= x2 + EPS) | (x1 + EPS >= cx & cx >= x2 - EPS) then state = 1		endif		if state <> 0 then			if abs(x1 - cx) < EPS & abs(y1 - cy) < EPS then state = state + 10			if abs(x2 - cx) < EPS & abs(y2 - cy) < EPS then state = state + 10		endif	endifreturn! ==============================================================================! Circle - Line intersection! ------------------------------------------------------------------------------! Input variables:!	EPS:				epsylon!	xo,yo,ro:			circle!	x1,y1, x2,y2		line!! Returned variables:!	state:				0 = no intersection point!						1 = one intersection point (tangential line)!						2 = two intersection points!	xa, ya:				intersection point #1!	xb, yb:				intersection point #2! ==============================================================================501:	tempX1 = x1 - xo: tempY1 = y1 - yo	tempX2 = x2 - xo: tempY2 = y2 - yo	if abs(tempX2 - tempX1) < EPS then		if abs(ro - abs(tempX1)) < EPS then			state = 1			xa = tempX1			ya = 0			xb = tempX1			yb = 0		else			if abs(ro) - abs(tempX1) < 0 then				state = 0: xa = 0: ya = 0: xb = 0: yb = 0			else				state = 2				xa = tempX1				ya = sqr(ro^2 - tempX1^2)				xb = tempX1				yb = -sqr(ro^2 - tempX1^2)			endif		endif	else		kf = (tempY2 - tempY1) / (tempX2 - tempX1)		ad = 1 + kf^2		bd = 2 * tempY1 * kf - 2 * tempX1 * kf^2		cd = tempY1^2 - 2 * tempX1 * tempY1 * kf + tempX1^2 * kf^2 - ro^2		if bd^2 - 4 * ad * cd < 0 then			state = 0: xa = 0: ya = 0: xb = 0: yb = 0		else			xa = (-bd + sqr(bd^2 - 4 * ad * cd)) / (2 * ad)			ya = tempY1 + (xa - tempX1) * kf			xb = (-bd - sqr(bd^2 - 4 * ad * cd)) / (2 * ad)			yb = tempY1 + (xb - tempX1) * kf			if abs(xa - xb) < EPS then state = 1 else state = 2		endif	endif	if state = 2 then		da = sqr((tempX1 - xa)^2 + (tempY1 - ya)^2)		db = sqr((tempX1 - xb)^2 + (tempY1 - yb)^2)		if db < da then			xxo = xa: yyo = ya			xa = xb:  ya = yb			xb = xxo: yb = yyo		endif	endif	xa = xa + xo: ya = ya + yo	xb = xb + xo: yb = yb + yoreturn! ==============================================================================! Select good intersection point after Circle - Line intersection! ------------------------------------------------------------------------------! Input variables:!	state:				intersection status!	wallIsLeft:!	xa, ya:				intersection point #1!	xb, yb:				intersection point #2!! Returned variables:!	cx, cy:				selected intersection point! ==============================================================================502:	cx = 0	cy = 0	if state = 1 then		cx = xa		cy = ya	endif	if state = 2 then		if abs(ya - yb) < EPS then			if min(x1, x2) < min(xa, xb) + EPS then				if xa < xb then					cx = xa					cy = ya				else					cx = xb					cy = yb				endif			else				if xa < xb then					cx = xb					cy = yb				else					cx = xa					cy = ya				endif			endif		else			if not(wallIsLeft) then				if ya > yb then					cx = xa					cy = ya				else					cx = xb					cy = yb				endif			else				if ya < yb then					cx = xa					cy = ya				else					cx = xb					cy = yb				endif			endif		endif	endifreturn