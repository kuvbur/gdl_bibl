EPS = 0.0001
unID=0
unIDr=1000
flag = 0

dict coord_rotate
dict line_dict
dict profile_data
dict _t
gosub "read_sort"

if not(haskey(ogr_data.coord)) then
	B = 2 : A = 2 : ZZYZX = 2
	i = 0
	i = i + 1 : ogr_data.coord[i].x = 0 : ogr_data.coord[i].y = 0 : ogr_data.coord[i].z = 0
	i = i + 1 : ogr_data.coord[i].x = 0 : ogr_data.coord[i].y = A : ogr_data.coord[i].z = ZZYZX
	i = i + 1 : ogr_data.coord[i].x = B : ogr_data.coord[i].y = A : ogr_data.coord[i].z = ZZYZX
	i = i + 1 : ogr_data.coord[i].x = B : ogr_data.coord[i].y = A*2 : ogr_data.coord[i].z = ZZYZX
	i = i + 1 : ogr_data.coord[i].x = 0 : ogr_data.coord[i].y = A*2 : ogr_data.coord[i].z = ZZYZX
	i = i + 1 : ogr_data.coord[i].x = 0 : ogr_data.coord[i].y = A*3 : ogr_data.coord[i].z = 0
	i = i + 1 : ogr_data.coord[i].x = -B : ogr_data.coord[i].y = A*3 : ogr_data.coord[i].z = 0
	i = i + 1 : ogr_data.coord[i].x = -B*3 : ogr_data.coord[i].y = A*3 : ogr_data.coord[i].z = ZZYZX
endif

if not(haskey(ogr_data.h)) then ogr_data.h = 1.2
if not(haskey(ogr_data.h_down)) then ogr_data.h_down = 0.15
if not(haskey(ogr_data.shag_st)) then ogr_data.shag_st = 0.5
if not(haskey(ogr_data.shag_st_1)) then ogr_data.shag_st_1 = 0.15

ogr_data.st.set.name_prof = name_prof_st
ogr_data.st.set.tip_p = tip_p_st
ogr_data.st.set.profile = profile_st
ogr_data.st.set.cpoint = 0

ogr_data.por_up.set.name_prof = name_prof_st
ogr_data.por_up.set.tip_p = tip_p_st
ogr_data.por_up.set.profile = profile_st


ogr_data.por_mid.set.name_prof = name_prof_st
ogr_data.por_mid.set.tip_p = tip_p_st
ogr_data.por_mid.set.profile = profile_st

ogr_data.pl.set.name_prof = name_prof_pl
ogr_data.pl.set.tip_p = tip_p_pl
ogr_data.pl.set.profile = profile_pl
ogr_data.pl.set.thicknes = th_pl

gosub "read_dict"

dr = 0 : j = 0 : m = 0 : ic = 0
for i=2 to vardim1(ogr_data.coord)
	j = 0
!Вычисляем длину и углы поворота сегмента ограждения
	ogr_data.segment[i-1].start = ogr_data.coord[i-1]
	ogr_data.segment[i-1].end = ogr_data.coord[i]
	call "macro_spheric_coord" PARAMETERS line_dict = ogr_data.segment[i-1], bDict = 1, type = 2, RETURNED_PARAMETERS line_dict
	ogr_data.segment[i-1] = line_dict
!Вычисляем количество стоек и отступы первых стоек
	n_st = int(ogr_data.segment[i-1].r/ogr_data.shag_st)
	if n_st*ogr_data.shag_st<ogr_data.segment[i-1].r then
		dr = (ogr_data.segment[i-1].r - n_st*ogr_data.shag_st)/2
		shag_st_1 = ogr_data.shag_st
	else
		dr = ogr_data.shag_st_1
		shag_st_1 = ogr_data.shag_st - dr
	endif
!Записываем координаты стоек
	r = 0
	r = r + dr : gosub "coord_st"
	for k=1 to n_st-1
		shag = ogr_data.shag_st
		if k=1 or k=n_st then shag = shag_st_1
		r = r + shag
		gosub "coord_st"
	next k
	r = ogr_data.segment[i-1].r - dr : gosub "coord_st"
	gosub "place_st"
!Записываем координаты поручней
	gosub "coord_por"
!Для горизонтальных участков - устанавливаем пластины по низу
	if abs(line_dict.etta mod 90)<EPS then
		ic = ic + 1
		if ic = 1 then
			ogr_data.pl.set.coord[ic] = ogr_data.segment[i-1].stoik[1]
		else
			ogr_data.pl.set.coord[ic] = ogr_data.coord[i-1]
		endif
	else
		!Горизонтальные участки кончились. Размещаем пластину
		if haskey(ogr_data.pl.set.coord) then
			if vardim1(ogr_data.pl.set.coord)>0 then
				ic = ic + 1
				ogr_data.pl.set.coord[ic] = ogr_data.segment[i-2].stoik[vardim1(ogr_data.segment[i-2].stoik)]
				gosub "place_pl"
			endif
			ic = 0
			_d = REMOVEKEY (ogr_data.pl.set.coord)
		endif
	endif
next i
gosub "place_por1"

goto "m_end"

"read_dict":
	ogr_data.st.set.cpoint = 0
	if haskey(profile_data.set) then _d = REMOVEKEY (profile_data.set)
	profile_data.set = ogr_data.st.set
	gosub "read_profile"
	if flag then ogr_data.st.read = profile_data.read


	ogr_data.por_up.set.cpoint = 4
	if haskey(profile_data.set) then _d = REMOVEKEY (profile_data.set)
	profile_data.set = ogr_data.por_up.set
	gosub "read_profile"
	if flag then ogr_data.por_up.read = profile_data.read


	ogr_data.por_mid.set.cpoint = 2
	if haskey(profile_data.set) then _d = REMOVEKEY (profile_data.set)
	profile_data.set = ogr_data.por_mid.set
	gosub "read_profile"
	if flag then ogr_data.por_mid.read = profile_data.read

	ogr_data.pl.set.typesheet = 1
	ogr_data.pl.set.fold = 1
	ogr_data.pl.set.cpoint.sgnth = -1
	if haskey(profile_data.set) then _d = REMOVEKEY (profile_data.set)
	profile_data.set = ogr_data.pl.set
	gosub "read_profile"
	if flag then ogr_data.pl.read = profile_data.read
return

"place_pl":
	if haskey(ogr_data.pl.set.path) then _d = REMOVEKEY (ogr_data.pl.set.path)
	zazor_bort = 10/1000
	!Путь профиля
	ii = 0
	ii = ii + 1
	ogr_data.pl.set.path[ii].x = 0
	ogr_data.pl.set.path[ii].y = 0
	ogr_data.pl.set.path[ii].z = zazor_bort-0.001 + ogr_data.pl.set.coord[1].z
	ii = ii + 1
	ogr_data.pl.set.path[ii].x = 0
	ogr_data.pl.set.path[ii].y = 0
	ogr_data.pl.set.path[ii].z = zazor_bort + ogr_data.pl.set.coord[1].z
	ii = ii + 1
	ogr_data.pl.set.path[ii].x = 0
	ogr_data.pl.set.path[ii].y = 0
	ogr_data.pl.set.path[ii].z = zazor_bort+h_pl + ogr_data.pl.set.coord[1].z
	ii = ii + 1
	ogr_data.pl.set.path[ii].x = 0
	ogr_data.pl.set.path[ii].y = 0
	ogr_data.pl.set.path[ii].z = zazor_bort+h_pl+0.001 + ogr_data.pl.set.coord[1].z

	if haskey(profile_data.set) then _d = REMOVEKEY (profile_data.set)
	if haskey(profile_data.read) then _d = REMOVEKEY (profile_data.read)
	profile_data.set = ogr_data.pl.set
	profile_data.read = ogr_data.pl.read
	call "macro_place_sheet" parameters all, profile_data = profile_data
return

"place_st":
	if haskey(ogr_data.st.set.start) then _d = REMOVEKEY (ogr_data.st.set.start)
	if haskey(ogr_data.st.set.path) then _d = REMOVEKEY (ogr_data.st.set.path)
	ogr_data.st.set.start = ogr_data.segment[i-1].stoik
	!Путь профиля
	ii = 0
	ii = ii + 1
	ogr_data.st.set.path[ii].x = 0
	ogr_data.st.set.path[ii].y = 0
	ogr_data.st.set.path[ii].z = -ogr_data.h_down-0.001
	ogr_data.st.set.path[ii].a = -ogr_data.segment[i-1].phi
	ii = ii + 1
	ogr_data.st.set.path[ii].x = 0
	ogr_data.st.set.path[ii].y = 0
	ogr_data.st.set.path[ii].z = -ogr_data.h_down
	ogr_data.st.set.path[ii].a = -ogr_data.segment[i-1].phi

	ii = ii + 1
	ogr_data.st.set.path[ii].x = 0
	ogr_data.st.set.path[ii].y = 0
	ogr_data.st.set.path[ii].z = ogr_data.h
	ogr_data.st.set.path[ii].a = -ogr_data.segment[i-1].phi
	ii = ii + 1
	ogr_data.st.set.path[ii].x = 0
	ogr_data.st.set.path[ii].y = 0
	ogr_data.st.set.path[ii].z = ogr_data.h+0.001
	ogr_data.st.set.path[ii].a = -ogr_data.segment[i-1].phi

	coord_rotate.in = ogr_data.st.set.path : coord_rotate.error = ""
	call "macro_rotate" parameters coord = coord_rotate ,ang = -ogr_data.segment[i-1].etta+90, axis = 2, bDict=1, RETURNED_PARAMETERS coord_rotate
	if coord_rotate.error = "ok" then ogr_data.st.set.path = coord_rotate.out

	coord_rotate.in = coord_rotate.out : coord_rotate.error = ""
	call "macro_rotate" parameters coord = coord_rotate ,ang = -ogr_data.segment[i-1].phi, axis = 3, bDict=1, RETURNED_PARAMETERS coord_rotate
	if coord_rotate.error = "ok" then ogr_data.st.set.path = coord_rotate.out

	ogr_data.st.set.el_type_view_2d = 3
	if haskey(profile_data.set) then _d = REMOVEKEY (profile_data.set)
	if haskey(profile_data.read) then _d = REMOVEKEY (profile_data.read)
	profile_data.set = ogr_data.st.set
	profile_data.read = ogr_data.st.read
	call "macro_place_profile" parameters all, profile_data = profile_data
return

"place_por1":
	if haskey(profile_data.set) then _d = REMOVEKEY (profile_data.set)
	if haskey(profile_data.read) then _d = REMOVEKEY (profile_data.read)
	profile_data.set = ogr_data.por_up.set
	profile_data.read = ogr_data.por_up.read
	call "macro_place_profile" parameters all, profile_data = profile_data

	if haskey(profile_data.set) then _d = REMOVEKEY (profile_data.set)
	if haskey(profile_data.read) then _d = REMOVEKEY (profile_data.read)
	profile_data.set = ogr_data.por_mid.set
	profile_data.read = ogr_data.por_mid.read
	call "macro_place_profile" parameters all, profile_data = profile_data
return

"coord_st":
	j = j + 1
	ogr_data.segment[i-1].stoik[j].x = ogr_data.segment[i-1].start.x + r * sin(ogr_data.segment[i-1].etta) * cos(ogr_data.segment[i-1].phi)
	ogr_data.segment[i-1].stoik[j].y = ogr_data.segment[i-1].start.y + r * sin(ogr_data.segment[i-1].etta) * sin(ogr_data.segment[i-1].phi)
	ogr_data.segment[i-1].stoik[j].z = ogr_data.segment[i-1].start.z + r * cos(ogr_data.segment[i-1].etta)
return

"coord_por":
	if haskey(coord_rotate.in) then _d = REMOVEKEY (coord_rotate.in)
	coord_rotate.in[1].x = 0
	coord_rotate.in[1].y = 0
	coord_rotate.in[1].z = ogr_data.h

	coord_rotate.in[2].x = 0
	coord_rotate.in[2].y = 0
	coord_rotate.in[2].z = ogr_data.h/2

	coord_rotate.error = ""
	call "macro_rotate" parameters coord = coord_rotate ,ang = -ogr_data.segment[i-1].etta+90, axis = 2, bDict=1, RETURNED_PARAMETERS coord_rotate
	coord_rotate.in = coord_rotate.out : coord_rotate.error = ""
	call "macro_rotate" parameters coord = coord_rotate ,ang = -ogr_data.segment[i-1].phi, axis = 3, bDict=1, RETURNED_PARAMETERS coord_rotate
	if coord_rotate.error = "ok" then ogr_data.st.set.path = coord_rotate.out
	m = m + 1
	if haskey(_t.por_up) then _d = REMOVEKEY (_t.por_up)
	if haskey(_t.por_mid) then _d = REMOVEKEY (_t.por_mid)

	if abs(ogr_data.segment[i-1].etta mod 90)<EPS then
		_t.por_up.start = ogr_data.coord[i-1]
		_t.por_mid.start = ogr_data.coord[i-1]
		_t.por_up.end = ogr_data.coord[i]
		_t.por_mid.end = ogr_data.coord[i]
	else
		_t.por_up.start = ogr_data.segment[i-1].stoik[1]
		_t.por_mid.start = ogr_data.segment[i-1].stoik[1]
		_t.por_up.end = ogr_data.segment[i-1].stoik[j]
		_t.por_mid.end = ogr_data.segment[i-1].stoik[j]
	endif
	!Для первого сегмента среднее ограждение начинается со стойки
	if i = 2 then
		_t.por_up.start = ogr_data.coord[i-1]
		_t.por_mid.start = ogr_data.segment[i-1].stoik[1]
	endif
	!Для последнего сегмента
	if i = vardim1(ogr_data.coord) then
		_t.por_up.end = ogr_data.coord[i]
		_t.por_mid.end = ogr_data.segment[i-1].stoik[j]
	endif

	ogr_data.por_up.set.coord[m].x = _t.por_up.start.x + coord_rotate.out[1].x
	ogr_data.por_up.set.coord[m].y = _t.por_up.start.y + coord_rotate.out[1].y
	ogr_data.por_up.set.coord[m].z = _t.por_up.start.z + coord_rotate.out[1].z

	ogr_data.por_mid.set.coord[m].x = _t.por_mid.start.x + coord_rotate.out[2].x
	ogr_data.por_mid.set.coord[m].y = _t.por_mid.start.y + coord_rotate.out[2].y
	ogr_data.por_mid.set.coord[m].z = _t.por_mid.start.z + coord_rotate.out[2].z

	m = m + 1
	ogr_data.por_up.set.coord[m].x = _t.por_up.end.x + coord_rotate.out[1].x
	ogr_data.por_up.set.coord[m].y = _t.por_up.end.y + coord_rotate.out[1].y
	ogr_data.por_up.set.coord[m].z = _t.por_up.end.z + coord_rotate.out[1].z

	ogr_data.por_mid.set.coord[m].x = _t.por_mid.end.x + coord_rotate.out[2].x
	ogr_data.por_mid.set.coord[m].y = _t.por_mid.end.y + coord_rotate.out[2].y
	ogr_data.por_mid.set.coord[m].z = _t.por_mid.end.z + coord_rotate.out[2].z

return

"read_sort":
	if not(haskey(sort_data.isread)) then call "macro_get_sort" PARAMETERS RETURNED_PARAMETERS sort_data
	if haskey(sort_data.isread) then 
		if sort_data.isread = 0 then
			text2 0,0, "Сортамент прочитан с ошибкой"
			goto "m_end"
		endif
	else
		text2 0,0, "Сортамент не прочитан"
		goto "m_end"
	endif
return

"read_profile":
	flag = 0
	profile_data.error = ""
	if haskey(profile_data.read) then _d = REMOVEKEY (profile_data.read)
	call "macro_get_profile" PARAMETERS prof_data = profile_data, sort_data = sort_data, RETURNED_PARAMETERS profile_data
	if profile_data.error = "ok" then flag = 1
	if profile_data.error <> "ok" then
		text2 0,0,profile_data.error+"!"
		goto "m_end"
	endif
return

"m_end":
