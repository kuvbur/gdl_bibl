!dim th[]
!th[1]=0.1
!th[2]=0.3
!th[3]=0.1
eps=0.00001
epszilon=0.0015
if GLOB_CONTEXT=1 or GLOB_CONTEXT=5 then
	if cust_bega<0 then parameters cust_bega=0
	if cust_enda<0 then parameters cust_enda=0
	if rHeight<0 then parameters rHeight=0
	if wain_thk<0 then parameters wain_thk=0
	if wain_thk_b<0 then parameters wain_thk_b=0
	if wain_thk_t<0 then parameters wain_thk_t=0
	if bat_angle<0 then parameters bat_angle=0
endif

dim empty[1][1]
	empty[1][1] = 0

! --------------------------------
! Calculate the section dimensions
! --------------------------------

yl=bot_ext
yh=ac_wall_height-top_ext

if rHeight>0 then
	xh=wain_thk_b-((wain_thk_b-wain_thk)/(rHeight))*yh-((wain_thk_b-wain_thk)/(rHeight))*bot_ext
	height=rHeight+bot_ext
	parameters wain_thk_t=xh
	lock "wain_thk_t"
else
	xh=wain_thk_t
	height=ac_wall_height+bot_ext+top_ext
endif

if rHeight<eps then
	lock "wain_thk"
endif

if abs(bat_angle)<epszilon then
	xl=wain_thk_b
else
	if rHeight>0 then
		xl=xh+(rHeight+bot_ext)*sin(bat_angle)
	else
		xl=xh+(ac_wall_height+top_ext+bot_ext)*sin(bat_angle)
	endif
	parameters wain_thk_b=xl
	lock "wain_thk_b"
endif

if wain_thk_t<0 then
	parameters uwtp=0
	lock "uwtp"
	uwtp=0
endif

! --------------------------------
! Scan the arrays for the last row
! --------------------------------

dim gs_bot_poly[][]
if uwbp=0 then
	gs_bot_poly[1][1]=0 : gs_bot_poly[1][2]=0
	gs_bot_poly[2][1]=ac_wall_length : gs_bot_poly[2][2]=0

	ac_bot_poly=gs_bot_poly

endif
bot_num=vardim1(ac_bot_poly)

dim gs_top_poly[][]
if uwtp=0 then
	gs_top_poly[1][1]=0 : gs_top_poly[1][2]=ac_wall_height
	gs_top_poly[2][1]=ac_wall_length : gs_top_poly[2][2]=ac_wall_height

	ac_top_poly=gs_top_poly
endif
top_num=vardim1(ac_top_poly)

sg_num=vardim1(ac_angles)
if vardim2(ac_side_poly)<=2 then
	sp_num=0
else
	sp_num=vardim1(ac_side_poly)
endif
if vardim2(ac_wd_poly)<=2 then
	wd_num=0
else
	wd_num=vardim1(ac_wd_poly)
endif

! ---------------------------
! Refill the ac_angles array
! ---------------------------

if abs(cust_bega)>eps then ac_angles[1][1]=cust_bega
if abs(cust_enda)>eps then ac_angles[sg_num][2]=cust_enda

! -----------------------------------------
! Calculate the oversize for the revolution
! -----------------------------------------

! Center point            (u,v)=(0,ac_wall_radius)
! Radius                  r=ac_wall_radius-xl
! Equation of the circle  (sec_x_beg-u)^2+(sec_y_beg-v)^2=r^2
! Slope of the line       kappa=180-ac_angles[1][1]
! Equation of the line    sec_y_beg=tan(kappa)*sec_x_beg
! Equation with two unkn. (1+(tan(kappa))^2)*sec_x_beg^2-2*ac_wall_radius*tan(kappa)*sec_x_beg+2*ac_wall_radius*xl-xl^2

ref_thickness=max(xl,xh)
cutting_thk=ref_thickness+0.20
if ac_wall_radius<eps then	!! Staight Wall
	if ac_angles[1][1]>90 then
		over_beg=ref_thickness/tan(180-ac_angles[1][1])+0.05
	else
		over_beg=0.05
	endif
	if ac_angles[vardim1(ac_angles)][2]<90 then
		over_end=ref_thickness/tan(ac_angles[vardim1(ac_angles)][2])+0.05
	else
		over_end=0.05
	endif

	over_cut_end=over_end+0.05
	over_cut_beg=over_beg+0.05
else						!! Curved Wall
	if ac_angles[1][1]<=90 then
		kappa=ac_angles[1][1]

		a_beg=(1+(tan(kappa))^2)
		b_beg=-2*ac_wall_radius*tan(kappa)
		c_beg=2*ac_wall_radius*ref_thickness-ref_thickness^2

		if b_beg^2-4*a_beg*c_beg>=0 then
			sec_x_beg=(-b_beg-sqr(b_beg^2-4*a_beg*c_beg))/(2*a_beg)
			sec_y_beg=sec_x_beg*tan(kappa)
		else
			sec_x_beg=ac_wall_radius*cos(kappa)*sin(kappa)
			sec_y_beg=ac_wall_radius-ac_wall_radius*cos(kappa)*cos(kappa)
		endif

		overang_1=0
	else
		kappa=180-ac_angles[1][1]

		a_beg=(1+(tan(kappa))^2)
		b_beg=-2*ac_wall_radius*tan(kappa)
		c_beg=2*ac_wall_radius*ref_thickness-ref_thickness^2

		if b_beg^2-4*a_beg*c_beg>=0 then
			sec_x_beg=-(-b_beg-sqr(b_beg^2-4*a_beg*c_beg))/(2*a_beg)
			sec_y_beg=-sec_x_beg*tan(kappa)
			overang_1=asn(-sec_x_beg/(ac_wall_radius-ref_thickness))  ! Iaccuray
		else
			sec_x_beg=-ac_wall_radius*cos(kappa)*sin(kappa)
			sec_y_beg=ac_wall_radius-ac_wall_radius*cos(kappa)*cos(kappa)
			overang_1=kappa
		endif
	endif

	if ac_angles[sg_num][2]>=90 then
		lambda=180-ac_angles[sg_num][2]

		a_end=(1+(tan(lambda))^2)
		b_end=-2*ac_wall_radius*tan(lambda)
		c_end=2*ac_wall_radius*ref_thickness-ref_thickness^2

		if b_end^2-4*a_end*c_end>=0 then
			sec_x_end=-(-b_end-sqr(b_end^2-4*a_end*c_end))/(2*a_end)
			sec_y_end=-sec_x_end*tan(lambda)
		else
			sec_x_end=-ac_wall_radius*cos(lambda)*sin(lambda)
			sec_y_end=ac_wall_radius-ac_wall_radius*cos(lambda)*cos(lambda)
		endif

		overang_2=0
	else
		lambda=ac_angles[sg_num][2]

		a_end=(1+(tan(lambda))^2)
		b_end=-2*ac_wall_radius*tan(lambda)
		c_end=2*ac_wall_radius*ref_thickness-ref_thickness^2

		if b_end^2-4*a_end*c_end>=0 then
			sec_x_end=(-b_end-sqr(b_end^2-4*a_end*c_end))/(2*a_end)
			sec_y_end=sec_x_end*tan(lambda)
			overang_2=asn(sec_x_end/(ac_wall_radius-ref_thickness))
		else
			sec_x_end=ac_wall_radius*cos(lambda)*sin(lambda)
			sec_y_end=ac_wall_radius-ac_wall_radius*cos(lambda)*cos(lambda)
			overang_2=lambda
		endif
	endif

	over_cut_beg=sin(overang_1)*ac_wall_radius+0.05
	over_cut_end=sin(overang_2)*ac_wall_radius+0.05
endif

! -----------------------------------------------
! Scan the window door polygons for the hole size
! -----------------------------------------------

dim wd_hole_poly[][]
if wd_num<>0 then
	for i=1 to wd_num
		for j=2 to int((ac_wd_poly[i][1]+1/32")/1")*2 step 2
			put ac_wd_poly[i][j]
		next j

		wd_hole_poly[i][1]=min(use(nsp))
		wd_hole_poly[i][3]=max(get(nsp))

		for j=3 to int((ac_wd_poly[i][1]+1/32")/1")*2 step 2
			put ac_wd_poly[i][j]
		next j

		wd_hole_poly[i][2]=min(use(nsp))
		wd_hole_poly[i][4]=max(get(nsp))
	next i

	! ----------------------------------------
	! Organize the holes into cumulative order
	! ----------------------------------------

	dim wd_hole[][]
	dim temp[][]

	temp=wd_hole_poly

	for z=1 to wd_num
		i=1
		p=1
		repeat
			if temp[i][1]<=temp[p][1] then
				p=p+1
			else
				p=i
				i=i+1
			endif
		until p>wd_num

		wd_hole[z]=temp[i]

		temp[i][1]=ac_wall_length
		temp[i][2]=0
		temp[i][3]=0
		temp[i][4]=0
	next z
endif

!!----------------!!
!! Debug Function !!
!!----------------!!

if gs_gdl_debug then
	print "- GDL Debug --- GDL Debug --- GDL Debug --- GDL Debug -"
	print "ac_wall_height=",ac_wall_height
	print "ac_wall_radius=",ac_wall_radius
	print "ac_wall_length=",ac_wall_length
	print "ac_refside=",ac_refside
	print "ac_angles"
	for i=1 to vardim1(ac_angles)
		print ac_angles[i]
	next i
	print "ac_side_poly"
	for i=1 to vardim1(ac_side_poly)
		print ac_side_poly[i]
	next i
	print "ac_top_poly"
	for i=1 to top_num
		print ac_top_poly[i]
	next i

	print "ac_bot_poly"
	for i=1 to bot_num
		print ac_bot_poly[i]
	next i

	print "ac_wd_poly"
	for i=1 to wd_num
		print ac_wd_poly[i]
	next i
endif
