
!------------------
! Precalculate data
!------------------

if gs_gdl_debug then
	print "wd_hole"
	for i=1 to vardim1(wd_hole)
		print wd_hole[i]
	next i
endif

dim td_symbol[][]

i=1
j=1
L=1
td_symbol[L][1]=0
td_symbol[L][2]=ac_angles[1][1]
td_symbol[L][3]=0

if gs_gdl_debug then
	print "td_symbol[",L,"][1]=",td_symbol[L][1]
	print "td_symbol[",L,"][2]=",td_symbol[L][2]
	print "td_symbol[",L,"][3]=",td_symbol[L][3]
endif

for k=1 to wd_num+1         ! The wall will be contain wd_num+1 pieces by sliceing the window.
	if k<=wd_num then
		Reference=wd_hole[j][1]
	else
		Reference=ac_wall_length
	endif

!	if gs_gdl_debug then print ac_side_poly[i][1],"<=",reference," and ",ac_side_poly[i][1],">=0 and",i,"<=",vardim1(ac_side_poly)," and ",vardim2(ac_side_poly),">2"

	if i<=vardim1(ac_side_poly) and vardim2(ac_side_poly)>2 then
		while ac_side_poly[i][1]<=Reference and ac_side_poly[i][1]>=0 and i<=vardim1(ac_side_poly) do
			if gs_gdl_debug then print "i=",i

			L=L+1
			td_symbol[L][1]=ac_side_poly[i][1]
			td_symbol[L][2]=ac_angles[i][2]
			td_symbol[L][3]=0

			if gs_gdl_debug then
				print "td_symbol[",L,"][1]=",td_symbol[L][1]
				print "td_symbol[",L,"][2]=",td_symbol[L][2]
				print "td_symbol[",L,"][3]=",td_symbol[L][3]
			endif

			L=L+1
			td_symbol[L][1]=ac_side_poly[i][3]
			td_symbol[L][2]=ac_angles[i+1][1]
			td_symbol[L][3]=0

			if gs_gdl_debug then
				print "td_symbol[",L,"][1]=",td_symbol[L][1]
				print "td_symbol[",L,"][2]=",td_symbol[L][2]
				print "td_symbol[",L,"][3]=",td_symbol[L][3]
			endif

			i=i+1

			if i>vardim1(ac_side_poly) then goto 10101
		endwhile
	endif
	10101:

	if j<=wd_num then
		L=L+1
		td_symbol[L][1]=wd_hole[j][1]
		td_symbol[L][2]=90
		td_symbol[L][3]=wd_hole[j][2]

		if gs_gdl_debug then
			print "td_symbol[",L,"][1]=",td_symbol[L][1]
			print "td_symbol[",L,"][2]=",td_symbol[L][2]
			print "td_symbol[",L,"][3]=",td_symbol[L][3]
		endif

		L=L+1
		td_symbol[L][1]=wd_hole[j][3]
		td_symbol[L][2]=90
		td_symbol[L][3]=wd_hole[j][2]

		if gs_gdl_debug then
			print "td_symbol[",L,"][1]=",td_symbol[L][1]
			print "td_symbol[",L,"][2]=",td_symbol[L][2]
			print "td_symbol[",L,"][3]=",td_symbol[L][3]
		endif

		j=j+1
	endif
next k

L=L+1
td_symbol[L][1]=ac_wall_length
td_symbol[L][2]=ac_angles[sg_num][2]
td_symbol[L][3]=0

if gs_gdl_debug then
	print "td_symbol[",L,"][1]=",td_symbol[L][1]
	print "td_symbol[",L,"][2]=",td_symbol[L][2]
	print "td_symbol[",L,"][3]=",td_symbol[L][3]
endif

!-------------------------------------------------
! Check the td_symbol array for the corner windows
!-------------------------------------------------

dim temper[][]

td_num=1
for i=1 to L step 2
	if td_symbol[i+1][1]>td_symbol[i][1]+epszilon then
		temper[td_num]=td_symbol[i]
		td_num=td_num+1
		temper[td_num]=td_symbol[i+1]
		td_num=td_num+1
	endif
next i
td_num=td_num-1

td_symbol=temper

! ------------------------
! Do the complete 2D symbol
! ------------------------

prw=(xh+xl)/2

pen gs_cont_pen
unID = 1

if ac_wall_radius>epszilon then
	if ac_refside=0 then
		radius_1=ac_wall_radius
		radius_2=ac_wall_radius-prw
		radius_3=ac_wall_radius-xl
	else
		radius_1=ac_wall_radius
		radius_2=ac_wall_radius+prw
		radius_3=ac_wall_radius+xl
	endif

	! Editable Hotspots for Angle Editing

	hsp_pos=prw/2

	j=1
	k=1
	hotspot2 0,0,unID,ac_angles[j][k],6+512*ac_refside : unID = unID+1
	hotspot2 1,0,unID,ac_angles[j][k],4+128 : unID = unID+1
	hotspot2 hsp_pos/tan(ac_angles[j][k]),hsp_pos*sgn(not(ac_refside)-0.5),unID,ac_angles[j][k],5 : unID = unID+1

	add2 0, ac_wall_radius
	rot2 ac_wall_length*360/(2*ac_wall_radius*pi)
	add2 0, -ac_wall_radius

	j=vardim1(ac_angles)
	k=2
	hotspot2 0,0,unID,ac_angles[j][k],6+512*ac_refside : unID = unID+1
	hotspot2 1,0,unID,ac_angles[j][k],4+128 : unID = unID+1
	hotspot2 hsp_pos/tan(ac_angles[j][k]),hsp_pos*sgn(not(ac_refside)-0.5),unID,ac_angles[j][k],5 : unID = unID+1

	del 3

	j=1
	k=2
	for i=1 to sp_num
		add2 0, ac_wall_radius
		rot2 ac_side_poly[i][1]*360/(2*ac_wall_radius*pi)
		add2 0, -ac_wall_radius

		k=2
		hotspot2 0,0,unID,ac_angles[j][k],6+512*ac_refside : unID = unID+1
		hotspot2 1,0,unID,ac_angles[j][k],4+128 : unID = unID+1
		hotspot2 hsp_pos/tan(ac_angles[j][k]),hsp_pos*sgn(not(ac_refside)-0.5),unID,ac_angles[j][k],5 : unID = unID+1

		del 3

		add2 0, ac_wall_radius
		rot2 ac_side_poly[i][3]*360/(2*ac_wall_radius*pi)
		add2 0, -ac_wall_radius

		j=j+1
		k=1

		hotspot2 0,0,unID,ac_angles[j][k],6+512*ac_refside : unID = unID+1
		hotspot2 1,0,unID,ac_angles[j][k],4+128 : unID = unID+1
		hotspot2 hsp_pos/tan(ac_angles[j][k]),hsp_pos*sgn(not(ac_refside)-0.5),unID,ac_angles[j][k],5 : unID = unID+1

		del 3
	next i

	!! End Of Editable Hotspots

!    print "radius_1=",radius_1,"radius_2=",radius_2,"radius_3=",radius_3

	!------------------------------------------
	! Do the symbol from the precalculated data
	!------------------------------------------

	i=1
	j=1
	for i=1 to td_num/2 ! wd_num+sp_num+1
		long_1=(td_symbol[j][1]*360/(2*radius_1*pi))-90
		long_2=(td_symbol[j+1][1]*360/(2*radius_1*pi))-90

		arc2 0, radius_1, radius_1, long_1, long_2

		if td_symbol[j][2]<>90 then

			fi_1b=(td_symbol[j][1])*360/(2*radius_1*pi)
			beg_point_x1=radius_1*sin(fi_1b)
			beg_point_y1=radius_1-radius_1*cos(fi_1b)

			rad=radius_1
			rad_act=radius_2
			if ac_refside=0 then
				kappa=td_symbol[j][2]
			else
				kappa=180-td_symbol[j][2]
			endif

			gosub 100

			fi_2b=fi_1b+atn(sec_x/(radius_1-sec_y))
			end_point_x1=(radius_2)*sin(fi_2b)
			end_point_y1=radius_1-(radius_2)*cos(fi_2b)

!			line2 beg_point_x1,beg_point_y1,end_point_x1,end_point_y1

			rad=radius_1
			rad_act=radius_3

			gosub 100

			fi_3b=fi_1b+atn(sec_x/(radius_1-sec_y))
			bot_point_x1=(radius_3)*sin(fi_3b)
			bot_point_y1=radius_1-(radius_3)*cos(fi_3b)

			if show_bot=1 and td_symbol[j][3]<0.001 then
				line2 end_point_x1,end_point_y1,bot_point_x1,bot_point_y1
			endif
		else
			fi_1b=(td_symbol[j][1])*360/(2*radius_1*pi)
			fi_2b=fi_1b
			fi_3b=fi_1b

			beg_point_x1=radius_1*sin(fi_1b)
			beg_point_y1=radius_1-radius_1*cos(fi_1b)
			end_point_x1=radius_2*sin(fi_2b)
			end_point_y1=radius_1-radius_2*cos(fi_2b)

			line2 beg_point_x1,beg_point_y1,end_point_x1,end_point_y1

			bot_point_x1=(radius_3)*sin(fi_3b)
			bot_point_y1=radius_1-(radius_3)*cos(fi_3b)

			if show_bot=1 and td_symbol[j][3]<0.001 then
				line2 end_point_x1,end_point_y1,bot_point_x1,bot_point_y1
			endif
		endif

		if td_symbol[j+1][2]<>90 then
			fi_1e=(td_symbol[j+1][1])*360/(2*radius_1*pi)
			beg_point_x2=radius_1*sin(fi_1e)
			beg_point_y2=radius_1-radius_1*cos(fi_1e)

			rad=radius_1
			rad_act=radius_2
			if ac_refside=0 then
				kappa=td_symbol[j+1][2]
			else
				kappa=180-td_symbol[j+1][2]
			endif

			gosub 100

			fi_2e=fi_1e+atn(sec_x/(radius_1-sec_y))
			end_point_x2=(radius_2)*sin(fi_2e)
			end_point_y2=radius_1-(radius_2)*cos(fi_2e)

			line2 beg_point_x2,beg_point_y2,end_point_x2,end_point_y2

			rad=radius_1
			rad_act=radius_3
!!            if ac_refside=0 then
!!                kappa=td_symbol[j+1][2]
!!            else
!!                kappa=180-td_symbol[j+1][2]
!!            endif

			gosub 100

			fi_3e=fi_1e+atn(sec_x/(radius_1-sec_y))

			bot_point_x2=(radius_3)*sin(fi_3e)
			bot_point_y2=radius_1-(radius_3)*cos(fi_3e)

			if show_bot=1 and td_symbol[j+1][3]<0.001 then
				line2 end_point_x2,end_point_y2,bot_point_x2,bot_point_y2
			endif
		else
			fi_1e=(td_symbol[j+1][1])*360/(2*radius_1*pi)
			fi_2e=fi_1e
			fi_3e=fi_1e

			beg_point_x2=radius_1*sin(fi_1e)
			beg_point_y2=radius_1-radius_1*cos(fi_1e)
			end_point_x2=radius_2*sin(fi_2e)
			end_point_y2=radius_1-radius_2*cos(fi_2e)
			bot_point_x2=(radius_3)*sin(fi_2e)
			bot_point_y2=radius_1-(radius_3)*cos(fi_2e)

			line2 beg_point_x2,beg_point_y2,end_point_x2,end_point_y2

			if show_bot=1 and td_symbol[j+1][3]<0.001 then
				line2 end_point_x2,end_point_y2,bot_point_x2,bot_point_y2
			endif
		endif

		sort_1=fi_2b-90
		sort_2=fi_2e-90

		if sort_2>sort_1 then
			arc2 0, radius_1, radius_2, sort_1, sort_2
		endif

		sort_3=fi_3b-90
		sort_4=fi_3e-90

		if show_bot=1 and sort_4>sort_3 then
			arc2 0, radius_1, radius_3, sort_3, sort_4
		endif

		! ---------------
		! Do the hotspots
		! ---------------

		hotspot2 beg_point_x1,beg_point_y1
		hotspot2 end_point_x1,end_point_y1
		hotspot2 beg_point_x2,beg_point_y2
		hotspot2 end_point_x2,end_point_y2
		if td_symbol[j][3]=0 and show_bot=1 then
			hotspot2 bot_point_x1,bot_point_y1
		endif
		if td_symbol[j+1][3]=0 and show_bot=1 then
			hotspot2 bot_point_x2,bot_point_y2
		endif

		mu_1=long_2-long_1
		mu_2=sort_2-sort_1
		mu_3=sort_4-sort_3

!		if mu_1>=0 and mu_2>=0 then
!			fill gs_fill_type
!			poly2_b 7, 2+4, gs_fill_pen, gs_back_pen,
!					beg_point_x1, beg_point_y1, 1,
!					end_point_x1, end_point_y1, 1,
!					0, radius_1, 901,
!					0, mu_2, 4001,
!					beg_point_x2, beg_point_y2, 1,
!					0, radius_1, 901,
!					0, -mu_1, 4001
!		endif

!		if show_bot=1 and mu_2>=0 and mu_3>=0 then
!			poly2_b 7, 2+4, gs_wallhole_penFg, gs_wallhole_penBg,
!					end_point_x1, end_point_y1, 1,
!					bot_point_x1, bot_point_y1, 1,
!					0, radius_1, 901,
!					0, mu_3, 4001,
!					end_point_x2, end_point_y2, 1,
!					0, radius_1, 901,
!					0, -mu_2, 4001
!		endif

		j=j+2
	next i

	!---------------------------------------------
	! Do the lines and the fills around the window
	!---------------------------------------------

	for i=1 to wd_num
		pen cont_pen_w

		if wd_hole[i][2]>epszilon then
			win_bot=xl-((xl-xh)*(wd_hole[i][3]+bot_ext))/height
			if win_bot<prw or show_bot=0 then win_bot=prw

			if ac_refside=0 then
				radius_4=ac_wall_radius-win_bot
			else
				radius_4=ac_wall_radius+win_bot
			endif

			if wd_hole[i][3]<ac_wall_length-epszilon and wd_hole[i][1]>0+epszilon then

				fi_1=(wd_hole[i][1])*360/(2*radius_1*pi)
				fi_2=(wd_hole[i][3])*360/(2*radius_1*pi)

				beg_point_x1=radius_1*sin(fi_1)
				beg_point_y1=radius_1-radius_1*cos(fi_1)
				end_point_x1=radius_2*sin(fi_1)
				end_point_y1=radius_1-radius_2*cos(fi_1)
				win_point_x1=radius_4*sin(fi_1)
				win_point_y1=radius_1-radius_4*cos(fi_1)
				bot_point_x1=radius_3*sin(fi_1)
				bot_point_y1=radius_1-radius_3*cos(fi_1)

				beg_point_x2=radius_1*sin(fi_2)
				beg_point_y2=radius_1-ac_wall_radius*cos(fi_2)
				end_point_x2=radius_2*sin(fi_2)
				end_point_y2=radius_1-radius_2*cos(fi_2)
				win_point_x2=radius_4*sin(fi_2)
				win_point_y2=radius_1-radius_4*cos(fi_2)
				bot_point_x2=radius_3*sin(fi_2)
				bot_point_y2=radius_1-radius_3*cos(fi_2)

				arc2 0, radius_1, radius_1, (wd_hole[i][1]*360/(2*radius_1*pi))-90, (wd_hole[i][3]*360/(2*radius_1*pi))-90

				if show_bot=1 then
					arc2 0, radius_1, radius_4, (wd_hole[i][1]*(radius_4/radius_1)*360/(2*radius_4*pi))-90, (wd_hole[i][3]*(radius_4/radius_1)*360/(2*radius_4*pi))-90
					if win_bot>prw then
						line2 end_point_x1,end_point_y1,win_point_x1, win_point_y1
						line2 end_point_x2,end_point_y2,win_point_x2, win_point_y2
						pen gs_cont_pen
						hotspot2 win_point_x1, win_point_y1
						hotspot2 win_point_x2, win_point_y2
					endif

					fill gs_fill_type
					poly2_b 7, 2+4, gs_wallhole_penFg, gs_wallhole_penBg,
							win_point_x1, win_point_y1, 1,
							bot_point_x1, bot_point_y1, 1,
							0, radius_1, 901,
							bot_point_x2, bot_point_y2, 3001,
							win_point_x2, win_point_y2, 1,
							0, radius_1, 901,
							win_point_x1, win_point_y1, 3001

					pen gs_cont_pen
					arc2 0, radius_1, radius_3, (wd_hole[i][1]*(radius_3/radius_1)*360/(2*radius_3*pi))-90, (wd_hole[i][3]*(radius_3/radius_1)*360/(2*radius_3*pi))-90
					pen cont_pen_w
				else
					arc2 0, radius_1, radius_2, (wd_hole[i][1]*(radius_2/radius_1)*360/(2*radius_2*pi))-90, (wd_hole[i][3]*(radius_2/radius_1)*360/(2*radius_2*pi))-90
				endif

				fill gs_fill_type
				poly2_b 7, 2+4, gs_wallhole_penFg, gs_wallhole_penBg,
						beg_point_x1, beg_point_y1, 1,
						win_point_x1, win_point_y1, 1,
						0, radius_1, 901,
						win_point_x2, win_point_y2, 3001,
						beg_point_x2, beg_point_y2, 1,
						0, radius_1, 901,
						beg_point_x1, beg_point_y1, 3001
			else
				if wd_hole[i][3]>=ac_wall_length-epszilon then

					fi_1b=(wd_hole[i][1])*360/(2*radius_1*pi)
					fi_2b=fi_1b
					fi_3b=fi_1b

					beg_point_x1=radius_1*sin(fi_1b)
					beg_point_y1=radius_1-radius_1*cos(fi_1b)
					end_point_x1=radius_2*sin(fi_1b)
					end_point_y1=radius_1-radius_2*cos(fi_1b)
					win_point_x1=radius_4*sin(fi_1b)
					win_point_y1=radius_1-radius_4*cos(fi_1b)
					bot_point_x1=(radius_3)*sin(fi_2b)
					bot_point_y1=radius_1-(radius_3)*cos(fi_2b)

					if win_bot>prw then
						line2 end_point_x1,end_point_y1,win_point_x1,win_point_y1
						hotspot2 win_point_x1,win_point_y1
					endif

					if show_bot=1 then   ! and wd_hole[i][3]<0.001
						line2 win_point_x1,win_point_y1,bot_point_x1,bot_point_y1
					endif

					if abs(ac_angles[sg_num][2]-90)>eps then
						fi_1e=ac_wall_length*360/(2*radius_1*pi)
						beg_point_x2=radius_1*sin(fi_1e)
						beg_point_y2=radius_1-radius_1*cos(fi_1e)

						hotspot2 beg_point_x2,beg_point_y2

						rad=radius_1
						rad_act=radius_4
						if ac_refside=0 then
							kappa=ac_angles[sg_num][2]
						else
							kappa=180-ac_angles[sg_num][2]
						endif

						gosub 100

						fi_2e=fi_1e+atn(sec_x/(radius_1-sec_y))
						win_point_x2=(radius_4)*sin(fi_2e)
						win_point_y2=radius_1-(radius_4)*cos(fi_2e)

						line2 beg_point_x2,beg_point_y2,win_point_x2,win_point_y2
						hotspot2 win_point_x2,win_point_y2

						rad=radius_1
						rad_act=radius_3
						! Kappa

						gosub 100

						fi_3e=fi_1e+atn(sec_x/(radius_1-sec_y))

						bot_point_x2=(radius_3)*sin(fi_3e)
						bot_point_y2=radius_1-(radius_3)*cos(fi_3e)

						pen gs_cont_pen
						if show_bot=1 then !  and wd_hole[i][3]<0.001
							line2 win_point_x2,win_point_y2,bot_point_x2,bot_point_y2
							hotspot2 bot_point_x2,bot_point_y2
						endif
					else
						fi_1e=(ac_wall_length)*360/(2*radius_1*pi)
						fi_2e=fi_1e
						fi_3e=fi_1e

						beg_point_x2=radius_1*sin(fi_1e)
						beg_point_y2=radius_1-radius_1*cos(fi_1e)
						win_point_x2=radius_4*sin(fi_2e)
						win_point_y2=radius_1-radius_4*cos(fi_2e)
						bot_point_x2=(radius_3)*sin(fi_2e)
						bot_point_y2=radius_1-(radius_3)*cos(fi_2e)

						line2 beg_point_x2,beg_point_y2,end_point_x2,end_point_y2

						pen gs_cont_pen
						if show_bot=1 then !  and wd_hole[i][3]<0.001
							line2 win_point_x2,win_point_y2,bot_point_x2,bot_point_y2
						endif
					endif

					pen cont_pen_w

					long_1=(wd_hole[i][1]*360/(2*radius_1*pi))-90
					long_2=(ac_wall_length*360/(2*radius_1*pi))-90

					arc2 0, radius_1, radius_1, long_1, long_2

					sort_1=fi_2b-90
					sort_2=fi_2e-90

					if sort_2>sort_1 then
						arc2 0, radius_1, radius_4, sort_1, sort_2
					endif

					sort_3=fi_3b-90
					sort_4=fi_3e-90

					pen gs_cont_pen
					if show_bot=1 and sort_4>sort_3 then
						arc2 0, radius_1, radius_3, sort_3, sort_4
					endif

					if show_bot=1 then
						fill gs_fill_type
						poly2_b 7, 2+4, gs_wallhole_penFg, gs_wallhole_penBg,
								win_point_x1, win_point_y1, 1,
								bot_point_x1, bot_point_y1, 1,
								0, radius_1, 901,
								bot_point_x2, bot_point_y2, 3001,
								win_point_x2, win_point_y2, 1,
								0, radius_1, 901,
								win_point_x1, win_point_y1, 3001
					endif

					fill gs_fill_type
					poly2_b 7, 2+4, gs_wallhole_penFg, gs_wallhole_penBg,
							beg_point_x1, beg_point_y1, 1,
							win_point_x1, win_point_y1, 1,
							0, radius_1, 901,
							win_point_x2, win_point_y2, 3001,
							beg_point_x2, beg_point_y2, 1,
							0, radius_1, 901,
							beg_point_x1, beg_point_y1, 3001
				endif

				if wd_hole[i][1]<=0+epszilon then

					fi_1e=wd_hole[i][3]*360/(2*radius_1*pi)
					fi_2e=fi_1e
					fi_3e=fi_1e

					beg_point_x2=radius_1*sin(fi_1e)
					beg_point_y2=radius_1-radius_1*cos(fi_1e)
					end_point_x2=radius_2*sin(fi_1e)
					end_point_y2=radius_1-radius_2*cos(fi_1e)
					win_point_x2=radius_4*sin(fi_1e)
					win_point_y2=radius_1-radius_4*cos(fi_1e)
					bot_point_x2=radius_3*sin(fi_2e)
					bot_point_y2=radius_1-radius_3*cos(fi_2e)

					if win_bot>prw then
						line2 end_point_x2,end_point_y2,win_point_x2,win_point_y2
						hotspot2 win_point_x2,win_point_y2
					endif

					if show_bot=1 then !  and wd_hole[i][3]<0.001
						line2 win_point_x2,win_point_y2,bot_point_x2,bot_point_y2
					endif

					if abs(ac_angles[1][1]-90)>eps then
						fi_1b=(0)*360/(2*radius_1*pi)
						beg_point_x1=radius_1*sin(fi_1b)
						beg_point_y1=radius_1-radius_1*cos(fi_1b)

						hotspot2 beg_point_x1,beg_point_y1

						rad=radius_1
						rad_act=radius_4
						if ac_refside=0 then
							kappa=ac_angles[1][1]
						else
							kappa=180-ac_angles[1][1]
						endif

						gosub 100

						fi_2b=fi_1b+atn(sec_x/(radius_1-sec_y))
!                print "fi_1b=",fi_1b," fi_2b=",fi_2b

						win_point_x1=(radius_4)*sin(fi_2b)
						win_point_y1=radius_1-(radius_4)*cos(fi_2b)

						line2 beg_point_x1,beg_point_y1,win_point_x1,win_point_y1
						hotspot2 win_point_x1,win_point_y1

						rad=radius_1
						rad_act=radius_3
						! Kappa

						gosub 100

						fi_3b=fi_1b+atn(sec_x/(radius_1-sec_y))

						bot_point_x1=(radius_3)*sin(fi_3b)
						bot_point_y1=radius_1-(radius_3)*cos(fi_3b)

						pen gs_cont_pen
						if show_bot=1 then !  and wd_hole[i][3]>0.001
							line2 win_point_x1,win_point_y1,bot_point_x1,bot_point_y1
							hotspot2 bot_point_x1,bot_point_y1
						endif
					else
						fi_1b=(0)*360/(2*radius_1*pi)
						fi_2b=fi_1b
						fi_3b=fi_1b

						beg_point_x1=radius_1*sin(fi_1b)
						beg_point_y1=radius_1-radius_1*cos(fi_1b)
						end_point_x1=radius_1*sin(fi_1b)
						end_point_y1=radius_1-radius_2*cos(fi_1b)
						win_point_x1=radius_4*sin(fi_2b)
						win_point_y1=radius_1-radius_4*cos(fi_2b)
						bot_point_x1=radius_3*sin(fi_3b)
						bot_point_y1=radius_1-radius_3*cos(fi_3b)

						line2 beg_point_x1,beg_point_y1,end_point_x1,end_point_y1

						pen gs_cont_pen
						if show_bot=1 then !  and wd_hole[i][3]>0.001
							line2 win_point_x1,win_point_y1,bot_point_x1,bot_point_y1
						endif
					endif

					pen cont_pen_w

					long_1=fi_1b-90
					long_2=fi_1e-90
!
					print "long_1=",long_1,"long_2=",long_2

					arc2 0, radius_1, radius_1, long_1, long_2

					sort_1=fi_2b-90
					sort_2=fi_2e-90
!
!                    print "sort_1=",sort_1,"sort_2=",sort_2

					if sort_2>sort_1 then
						arc2 0, radius_1, radius_4, sort_1, sort_2
					endif

					sort_3=fi_3b-90
					sort_4=fi_3e-90

!                    print "sort_3=",sort_3,"sort_4=",sort_4

					pen gs_cont_pen
					if show_bot=1 and sort_4>sort_3 then
						arc2 0, radius_1, radius_3, sort_3, sort_4
					endif

					if show_bot=1 then
						fill gs_fill_type
						poly2_b 7, 2+4, gs_wallhole_penFg, gs_wallhole_penBg,
								win_point_x1, win_point_y1, 1,
								bot_point_x1, bot_point_y1, 1,
								0, radius_1, 901,
								bot_point_x2, bot_point_y2, 3001,
								win_point_x2, win_point_y2, 1,
								0, radius_1, 901,
								win_point_x1, win_point_y1, 3001
					endif

					fill gs_fill_type
					poly2_b 7, 2+4, gs_wallhole_penFg, gs_wallhole_penBg,
							beg_point_x1, beg_point_y1, 1,
							win_point_x1, win_point_y1, 1,
							0, radius_1, 901,
							win_point_x2, win_point_y2, 3001,
							beg_point_x2, beg_point_y2, 1,
							0, radius_1, 901,
							beg_point_x1, beg_point_y1, 3001
				endif

			endif
		endif
	next i
else
	!---------------
	! Straight Model
	!---------------
	if ac_refSide=1 then mul2 1,-1

	!! Editable Hotspots for Angle Editing

	hsp_pos=prw/2

	j=1
	k=1
	hotspot2 0,0,unID,ac_angles[j][k],6+512*ac_refside : unID = unID+1
	hotspot2 1,0,unID,ac_angles[j][k],4+128 : unID = unID+1
	hotspot2 hsp_pos/tan(ac_angles[j][k]),hsp_pos,unID,ac_angles[j][k],5 : unID = unID+1

	j=vardim1(ac_angles)
	k=2
	hotspot2 ac_wall_length,0,unID,ac_angles[j][k],6+512*ac_refside : unID = unID+1
	hotspot2 ac_wall_length+1,0,unID,ac_angles[j][k],4+128 : unID = unID+1
	hotspot2 ac_wall_length+hsp_pos/tan(ac_angles[j][k]),hsp_pos,unID,ac_angles[j][k],5 : unID = unID+1

	j=1
	k=2
	for i=1 to sp_num
		k=2
		hotspot2 ac_side_poly[i][1],0,unID,ac_angles[j][k],6+512*ac_refside : unID = unID+1
		hotspot2 ac_side_poly[i][1]+1,0,unID,ac_angles[j][k],4+128 : unID = unID+1
		hotspot2 ac_side_poly[i][1]+hsp_pos/tan(ac_angles[j][k]),hsp_pos,unID,ac_angles[j][k],5 : unID = unID+1

		j=j+1
		k=1

		hotspot2 ac_side_poly[i][3],0,unID,ac_angles[j][k],6+512*ac_refside : unID = unID+1
		hotspot2 ac_side_poly[i][3]+1,0,unID,ac_angles[j][k],4+128 : unID = unID+1
		hotspot2 ac_side_poly[i][3]+hsp_pos/tan(ac_angles[j][k]),hsp_pos,unID,ac_angles[j][k],5 : unID = unID+1
	next i

	!! End Of Editable Hotspots

	i=1
	j=1
	for i=1 to td_num/2

		line2 td_symbol[j][1],0,td_symbol[j+1][1],0

		if td_symbol[j][2]<>90 then
			if td_symbol[j][2]>90 then
				alfa=180-td_symbol[j][2]
				dir_x=-1
			else
				alfa=td_symbol[j][2]
				dir_x=1
			endif
			beg_x=prw/tan(alfa)*dir_x
			line2 td_symbol[j][1],0,td_symbol[j][1]+beg_x,prw

			bot_begx=xl/tan(alfa)*dir_x
			if show_bot=1 and td_symbol[j][3]<0.001 then
				line2 td_symbol[j][1]+beg_x,prw,td_symbol[j][1]+bot_begx,xl
			endif
		else
			line2 td_symbol[j][1],0,td_symbol[j][1],prw

			if show_bot=1 and td_symbol[j][3]<0.001 then
				line2 td_symbol[j][1],prw,td_symbol[j][1],xl
			endif
			beg_x=0
			bot_begx=0
		endif

		if td_symbol[j+1][2]<>90 then
			if td_symbol[j+1][2]>90 then
				beta=180-td_symbol[j+1][2]
				dir_x=-1
			else
				beta=td_symbol[j+1][2]
				dir_x=1
			endif
			end_x=prw/tan(beta)*dir_x
			line2 td_symbol[j+1][1],0,td_symbol[j+1][1]+end_x,prw

			bot_endx=xl/tan(beta)*dir_x
			if show_bot=1 and td_symbol[j+1][3]<0.001 then
				line2 td_symbol[j+1][1]+end_x,prw,td_symbol[j+1][1]+bot_endx,xl
			endif
		else
			line2 td_symbol[j+1][1],0,td_symbol[j+1][1],prw

			if show_bot=1 and td_symbol[j+1][3]<0.001 then
				line2 td_symbol[j+1][1],prw,td_symbol[j+1][1],xl
			endif
			end_x=0
			bot_endx=0
		endif

		line2 td_symbol[j][1]+beg_x,prw,td_symbol[j+1][1]+end_x,prw
		if show_bot=1 then ! and (td_symbol[j+1][3]<0.001 or td_symbol[j][3]<0.001) then
			line2 td_symbol[j][1]+bot_begx,xl,td_symbol[j+1][1]+bot_endx,xl
		endif

		! ---------------
		! Do the hotspots
		! ---------------

		hotspot2 td_symbol[j][1],0
		hotspot2 td_symbol[j][1]+beg_x,prw
		hotspot2 td_symbol[j+1][1]+end_x,prw
		hotspot2 td_symbol[j+1][1],0

		if show_bot=1 and td_symbol[j][3]<0.001 then
			hotspot2 td_symbol[j][1]+bot_begx,xl
		endif
		if show_bot=1 and td_symbol[j+1][3]<0.001 then
			hotspot2 td_symbol[j+1][1]+bot_endx,xl
		endif

		if abs(td_symbol[j][1]-td_symbol[j+1][1])>epszilon or abs((td_symbol[j+1][1]+end_x)-(td_symbol[j][1]+beg_x))>epszilon then ! New
			fill gs_fill_type
			poly2_b 4, 2+4, gs_fill_pen, gs_back_pen,
					td_symbol[j][1], 0, 1,
					td_symbol[j][1]+beg_x, prw, 1,
					td_symbol[j+1][1]+end_x, prw, 1,
					td_symbol[j+1][1], 0, 1
		endif

		if show_bot=1 then
			if abs((td_symbol[j][1]+beg_x)-(td_symbol[j+1][1]+end_x))>epszilon or abs((td_symbol[j+1][1]+bot_endx)-(td_symbol[j][1]+bot_begx))>epszilon then ! New
				poly2_b 4, 2+4, gs_wallhole_penFg, gs_wallhole_penBg,
						td_symbol[j][1]+beg_x, prw, 1,
						td_symbol[j][1]+bot_begx, xl, 1,
						td_symbol[j+1][1]+bot_endx, xl, 1,
						td_symbol[j+1][1]+end_x, prw, 1
			endif
		endif

		j=j+2
	next i

	!---------------------------------------------
	! Do the lines and the fills around the window
	!---------------------------------------------

	for i=1 to wd_num
		pen cont_pen_w
		if wd_hole[i][2]>epszilon then

			win_bot=xl-((xl-xh)*(wd_hole[i][2]+bot_ext))/ac_wall_height   !height
			if win_bot<prw or show_bot=0 then win_bot=prw

			if wd_hole[i][3]<ac_wall_length-epszilon and wd_hole[i][1]>0+epszilon then ! New

!                print "belso ablak"

				line2 wd_hole[i][1],0,wd_hole[i][3],0
				if show_bot=1 then
					line2 wd_hole[i][1],win_bot,wd_hole[i][3],win_bot
					if win_bot>prw then
						line2 wd_hole[i][1],prw,wd_hole[i][1],win_bot
						line2 wd_hole[i][3],prw,wd_hole[i][3],win_bot
						pen gs_cont_pen
						hotspot2 wd_hole[i][1],win_bot
						hotspot2 wd_hole[i][3],win_bot
					endif
					line2 wd_hole[i][1],xl,wd_hole[i][3],xl
					pen cont_pen_w

					fill gs_fill_type
					poly2_b 4, 2+4, gs_wallhole_penFg, gs_wallhole_penBg,
							wd_hole[i][1], win_bot, 1,
							wd_hole[i][1], xl, 1,
							wd_hole[i][3], xl, 1,
							wd_hole[i][3], win_bot, 1

				else
					line2 wd_hole[i][1],prw,wd_hole[i][3],prw
				endif

				fill gs_fill_type
				poly2_b 4, 2+4, gs_wallhole_penFg, gs_wallhole_penBg,
						wd_hole[i][1], 0, 1,
						wd_hole[i][1], win_bot, 1,
						wd_hole[i][3], win_bot, 1,
						wd_hole[i][3], 0, 1
			else
				if wd_hole[i][1]<=0+epszilon then

					if ac_angles[1][1]>90 then
						beta=180-ac_angles[1][1]
						dir_x=-1
					else
						beta=ac_angles[1][1]
						dir_x=1
					endif
					beg_x=win_bot/tan(beta)*dir_x
!                    line2 0,0,beg_x,win_bot

					bot_begx=xl/tan(beta)*dir_x
					if win_bot>prw then
						pen gs_cont_pen
						line2 beg_x,win_bot,bot_begx,xl
						line2 bot_begx,xl,wd_hole[i][3],xl
						hotspot2 wd_hole[i][3],win_bot
						hotspot2 bot_begx,xl
					endif

					hotspot2 beg_x,win_bot
					hotspot2 0,0

					pen cont_pen_w
					line2 0,0,wd_hole[i][3],0
					line2 beg_x,win_bot,wd_hole[i][3],win_bot
					line2 wd_hole[i][3],prw,wd_hole[i][3],win_bot

					fill gs_fill_type
					poly2_b 4, 2+4, gs_wallhole_penFg, gs_wallhole_penBg,
							0, 0, 1,
							beg_x, win_bot, 1,
							wd_hole[i][3], win_bot, 1,
							wd_hole[i][3], 0, 1

					if show_bot=1 then
						fill gs_fill_type
						poly2_b 4, 2+4, gs_wallhole_penFg, gs_wallhole_penBg,
								beg_x, win_bot, 1,
								bot_begx, xl, 1,
								wd_hole[i][3], xl, 1,
								wd_hole[i][3], win_bot, 1
					endif
				endif

				if wd_hole[i][3]>=ac_wall_length-epszilon then

					if ac_angles[sg_num][2]>90 then
						beta=180-ac_angles[sg_num][2]
						dir_x=-1
					else
						beta=ac_angles[sg_num][2]
						dir_x=1
					endif
					end_x=win_bot/tan(beta)*dir_x
!                    line2 ac_wall_length,0,ac_wall_length+end_x,win_bot

					bot_endx=xl/tan(beta)*dir_x
					if win_bot>prw then
						pen gs_cont_pen
						line2 ac_wall_length+end_x,win_bot,ac_wall_length+bot_endx,xl
						line2 wd_hole[i][1],xl,ac_wall_length+bot_endx,xl
						hotspot2 wd_hole[i][1],win_bot
						hotspot2 ac_wall_length+bot_endx,xl
					endif

					hotspot2 ac_wall_length+end_x,win_bot
					hotspot2 ac_wall_length,0

					pen cont_pen_w
					line2 wd_hole[i][1],0,ac_wall_length,0
					line2 wd_hole[i][1],win_bot,ac_wall_length+end_x,win_bot
					line2 wd_hole[i][1],prw,wd_hole[i][1],win_bot

					fill gs_fill_type
					poly2_b 4, 2+4, gs_wallhole_penFg, gs_wallhole_penBg,
							wd_hole[i][1], 0, 1,
							wd_hole[i][1], win_bot, 1,
							ac_wall_length+end_x, win_bot, 1,
							ac_wall_length, 0, 1

					if show_bot=1 then
						fill gs_fill_type
						poly2_b 4, 2+4, gs_wallhole_penFg, gs_wallhole_penBg,
								wd_hole[i][1], win_bot, 1,
								wd_hole[i][1], xl, 1,
								ac_wall_length+bot_endx, xl, 1,
								ac_wall_length+end_x, win_bot, 1
					endif
				endif

			endif ! New

		endif
	next i

	if ac_refSide=1 then del 1

endif

td_symbol=empty !! Empty the Array

end

100:
! Center point            (u,v)=(0,rad)
! Radius                  rad_act
! Equation of the circle  (sec_x_beg-u)^2+(sec_y_beg-v)^2=r^2
! Slope of the line       kappa
! Equation of the line    sec_y_beg=tan(kappa)*sec_x_beg
! Equation with two unkn. (1+(tan(kappa))^2)*sec_x_beg^2-2*rad*tan(kappa)*sec_x_beg+rad^2-rad_act^2

!--------------------------
! Section point calculation
!--------------------------

a_value=(1+(tan(kappa))^2)
b_value=-2*rad*tan(kappa)
c_value=rad^2-rad_act^2

!print "kappa=",kappa
!print "a_value=",a_value
!print "b_value=",b_value
!print "c_value=",c_value

if kappa<=90 then
	if b_value^2-4*a_value*c_value>=0 then
		sec_x=(-b_value-sqr(b_value^2-4*a_value*c_value))/(2*a_value)
		sec_y=sec_x*tan(kappa)
	else
		sec_x=rad_act*cos(kappa)*sin(kappa)
		sec_y=rad-rad_act*cos(kappa)*cos(kappa)
	endif
else
	if b_value^2-4*a_value*c_value>=0 then
		sec_x=(-b_value+sqr(b_value^2-4*a_value*c_value))/(2*a_value)
		sec_y=sec_x*tan(kappa)
	else
		sec_x=rad_act*cos(kappa)*sin(kappa)
		sec_y=rad-rad_act*cos(kappa)*cos(kappa)
	endif
endif

!print "sec_x=",sec_x,"sec_y=",sec_y

return

