dim arr[]
dim emparr[]
dim end_type[]
	end_type[1] = "Пересечение"
	end_type[2] = "Нет"
	end_type[3] = "Монолит"
	end_type[4] = "Сердечник"


dim iend_type[]
	iend_type[1] = -max_t
	iend_type[2] = 0
	iend_type[3] = bst
	iend_type[4] = max_t

unID = 0
eps=0.00001

ac_wall_height_nw = ac_wall_height-otstup_down-otstup_up

if is_serd then
	h_arm = serd_height + l_vkl
else
	l_st = ac_wall_length - t_konop_right - otstup_right - t_konop_left - otstup_left - (left_str = "Сердечник") * bst - (right_str = "Сердечник") * bst
	h_serd_1 = (ac_wall_height_nw + l_down_left + l_up_left) * (left_str = "Сердечник")
	h_serd_2 = (ac_wall_height_nw + l_down_right + l_up_right) * (right_str = "Сердечник")
	l_wall = ac_wall_length - t_konop_right - otstup_right - t_konop_left - otstup_left
	l_konop = l_st +  (ac_wall_height_nw + l_down_left + l_up_left)*(t_konop_left>0) + (ac_wall_height_nw + l_down_right + l_up_right)*(t_konop_right>0)
endif

dim empty[1][1]
	empty[1][1] = 0

! --------------------------------
! Calculate the section dimensions
! --------------------------------

yl=bot_ext
yh=ac_wall_height_nw-top_ext

if rHeight>0 then
	xh=wain_thk_b-((wain_thk_b-wain_thk)/(rHeight))*yh-((wain_thk_b-wain_thk)/(rHeight))*bot_ext
	height=rHeight+bot_ext
	parameters wain_thk_t=xh
	lock "wain_thk_t"
else
	xh=wain_thk_t
	height=ac_wall_height_nw+bot_ext+top_ext
endif

if rHeight<eps then
	lock "wain_thk"
endif

if abs(bat_angle)<eps then
	xl=wain_thk_b
else
	if rHeight>0 then
		xl=xh+(rHeight+bot_ext)*sin(bat_angle)
	else
		xl=xh+(ac_wall_height_nw+top_ext+bot_ext)*sin(bat_angle)
	endif
	parameters wain_thk_b=xl
	lock "wain_thk_b"
endif

if wain_thk_t<0 then
	parameters uwtp=0
	lock "uwtp"
	uwtp=0
endif

! --------------------------------
! Scan the arrays for the last row
! --------------------------------

dim gs_bot_poly[][]
if uwbp=0 then
	gs_bot_poly[1][1]=0 : gs_bot_poly[1][2]=0
	gs_bot_poly[2][1]=ac_wall_length : gs_bot_poly[2][2]=0

	ac_bot_poly=gs_bot_poly

endif
bot_num=vardim1(ac_bot_poly)

dim gs_top_poly[][]
if uwtp=0 then
	gs_top_poly[1][1]=0 : gs_top_poly[1][2]=ac_wall_height_nw
	gs_top_poly[2][1]=ac_wall_length : gs_top_poly[2][2]=ac_wall_height_nw

	ac_top_poly=gs_top_poly
endif
top_num=vardim1(ac_top_poly)

sg_num=vardim1(ac_angles)
if vardim2(ac_side_poly)<=2 then
	sp_num=0
else
	sp_num=vardim1(ac_side_poly)
endif
if vardim2(ac_wd_poly)<=2 then
	wd_num=0
else
	wd_num=vardim1(ac_wd_poly)
endif

! ---------------------------
! Refill the ac_angles array
! ---------------------------

if abs(cust_bega)>eps then ac_angles[1][1]=cust_bega
if abs(cust_enda)>eps then ac_angles[sg_num][2]=cust_enda

! -----------------------------------------
! Calculate the oversize for the revolution
! -----------------------------------------

! Center point            (u,v)=(0,ac_wall_radius)
! Radius                  r=ac_wall_radius-xl
! Equation of the circle  (sec_x_beg-u)^2+(sec_y_beg-v)^2=r^2
! Slope of the line       kappa=180-ac_angles[1][1]
! Equation of the line    sec_y_beg=tan(kappa)*sec_x_beg
! Equation with two unkn. (1+(tan(kappa))^2)*sec_x_beg^2-2*ac_wall_radius*tan(kappa)*sec_x_beg+2*ac_wall_radius*xl-xl^2

ref_thickness=max(xl,xh)
cutting_thk=ref_thickness+0.20
if ac_wall_radius<eps then	!! Staight Wall
	if ac_angles[1][1]>90 then
		over_beg=ref_thickness/tan(180-ac_angles[1][1])+0.05
	else
		over_beg=0.05
	endif
	if ac_angles[vardim1(ac_angles)][2]<90 then
		over_end=ref_thickness/tan(ac_angles[vardim1(ac_angles)][2])+0.05
	else
		over_end=0.05
	endif

	over_cut_end=over_end+0.05
	over_cut_beg=over_beg+0.05
else						!! Curved Wall
	if ac_angles[1][1]<=90 then
		kappa=ac_angles[1][1]

		a_beg=(1+(tan(kappa))^2)
		b_beg=-2*ac_wall_radius*tan(kappa)
		c_beg=2*ac_wall_radius*ref_thickness-ref_thickness^2

		if b_beg^2-4*a_beg*c_beg>=0 then
			sec_x_beg=(-b_beg-sqr(b_beg^2-4*a_beg*c_beg))/(2*a_beg)
			sec_y_beg=sec_x_beg*tan(kappa)
		else
			sec_x_beg=ac_wall_radius*cos(kappa)*sin(kappa)
			sec_y_beg=ac_wall_radius-ac_wall_radius*cos(kappa)*cos(kappa)
		endif

		overang_1=0
	else
		kappa=180-ac_angles[1][1]

		a_beg=(1+(tan(kappa))^2)
		b_beg=-2*ac_wall_radius*tan(kappa)
		c_beg=2*ac_wall_radius*ref_thickness-ref_thickness^2

		if b_beg^2-4*a_beg*c_beg>=0 then
			sec_x_beg=-(-b_beg-sqr(b_beg^2-4*a_beg*c_beg))/(2*a_beg)
			sec_y_beg=-sec_x_beg*tan(kappa)
			overang_1=asn(-sec_x_beg/(ac_wall_radius-ref_thickness))  ! Iaccuray
		else
			sec_x_beg=-ac_wall_radius*cos(kappa)*sin(kappa)
			sec_y_beg=ac_wall_radius-ac_wall_radius*cos(kappa)*cos(kappa)
			overang_1=kappa
		endif
	endif

	if ac_angles[sg_num][2]>=90 then
		lambda=180-ac_angles[sg_num][2]

		a_end=(1+(tan(lambda))^2)
		b_end=-2*ac_wall_radius*tan(lambda)
		c_end=2*ac_wall_radius*ref_thickness-ref_thickness^2

		if b_end^2-4*a_end*c_end>=0 then
			sec_x_end=-(-b_end-sqr(b_end^2-4*a_end*c_end))/(2*a_end)
			sec_y_end=-sec_x_end*tan(lambda)
		else
			sec_x_end=-ac_wall_radius*cos(lambda)*sin(lambda)
			sec_y_end=ac_wall_radius-ac_wall_radius*cos(lambda)*cos(lambda)
		endif

		overang_2=0
	else
		lambda=ac_angles[sg_num][2]

		a_end=(1+(tan(lambda))^2)
		b_end=-2*ac_wall_radius*tan(lambda)
		c_end=2*ac_wall_radius*ref_thickness-ref_thickness^2

		if b_end^2-4*a_end*c_end>=0 then
			sec_x_end=(-b_end-sqr(b_end^2-4*a_end*c_end))/(2*a_end)
			sec_y_end=sec_x_end*tan(lambda)
			overang_2=asn(sec_x_end/(ac_wall_radius-ref_thickness))
		else
			sec_x_end=ac_wall_radius*cos(lambda)*sin(lambda)
			sec_y_end=ac_wall_radius-ac_wall_radius*cos(lambda)*cos(lambda)
			overang_2=lambda
		endif
	endif

	over_cut_beg=sin(overang_1)*ac_wall_radius+0.05
	over_cut_end=sin(overang_2)*ac_wall_radius+0.05
endif

shag_shpilek = shag_vert*2 !Шаг шпилек через стену
! -----------------------------------------------
! Scan the window door polygons for the hole size
! -----------------------------------------------
t_gor = 0
t_vert1 = 0
t_vert2 = 0
area_hole = 0
dim wd_hole_poly[][]
if wd_num<>0 then
	for i=1 to wd_num
		for j=2 to int((ac_wd_poly[i][1]+1/32")/1")*2 step 2
			put ac_wd_poly[i][j]
		next j

		wd_hole_poly[i][1]= min(use(nsp))
		wd_hole_poly[i][3]= max(use(nsp)) 

		taa = max(use(nsp)) - min(get(nsp))
		for j=3 to int((ac_wd_poly[i][1]+1/32")/1")*2 step 2
			put ac_wd_poly[i][j]
		next j

		wd_hole_poly[i][2]= min(use(nsp))
		wd_hole_poly[i][4]= max(use(nsp))
		tbb = max(use(nsp)) - min(get(nsp))
		area_hole = area_hole + abs(taa*tbb)
		t_gor=t_gor+(round_int(tbb / shag_gor)-1)*taa !Сколько горизонтальных сеток и какой длины вычетает отверстие
		t_vert1=t_vert1+(round_int(tbb / shag_vert)-1)*taa !Сколько вертикальных стержней и какой длины вычетает отверстие
		t_vert2=t_vert2+(round_int(taa / shag_vert)-1)*tbb !Сколько горизонтальных стержней и какой длины вычетает отверстие
	next i

	! ----------------------------------------
	! Organize the holes into cumulative order
	! ----------------------------------------

	dim wd_hole[][]
	dim temp[][]

	temp=wd_hole_poly

	for z=1 to wd_num
		i=1
		p=1
		repeat
			if temp[i][1]<=temp[p][1] then
				p=p+1
			else
				p=i
				i=i+1
			endif
		until p>wd_num

		wd_hole[z]=temp[i]

		temp[i][1]=ac_wall_length
		temp[i][2]=0
		temp[i][3]=0
		temp[i][4]=0
	next z
endif

!--------- Уголок
l_ug = 140/1000
ws = 80/1000
ds = ws
wt = 4/1000
!--------- Пластина
l_plast = 100/1000
h_plast = 180/1000
t_plast = 5/1000
zas_plast = 90/1000

l_max_gor = 6

shag_arm_gor = 50/1000
area_wall = l_wall * ac_wall_height_nw
area_wall_h = l_wall * ac_wall_height_nw - area_hole
n_gor_r = round_int(ac_wall_height_nw / shag_gor) !Кол-во рядов
n_gor_l = round_int(l_wall / (l_max_gor-0.5)) !Количество сеток в ряде
n_del = int(t_l / l_max_gor) !Количество сеток, вычитаемых проёмами
n_set = n_gor_r*n_gor_l - n_del !Общее кол-во сеток
s_kirp = l_wall * ac_wall_height_nw - area_hole
v_kirp = s_kirp * max_t
l_vert = (round_int(ac_wall_height_nw/shag_vert)*l_wall + round_int(l_wall/shag_vert)*ac_wall_height_nw - t_vert1 - t_vert2)*2
area_vert = s_kirp*2


n_krepug = 0
n_krepplast = 0
n_krep_side = round_int(l_wall/shag_krep)+1
if is_krep_up then 
	if plast_in_up then 
		n_krepplast = n_krepplast + n_krep_side
	else
		n_krepug = n_krepug + n_krep_side
	endif
	if plast_out_up then 
		n_krepplast = n_krepplast + n_krep_side
	else
		n_krepug = n_krepug + n_krep_side
	endif
endif
if is_krep_down then 
	if plast_in_down then 
		n_krepplast = n_krepplast + n_krep_side
	else
		n_krepug = n_krepug + n_krep_side
	endif
	if plast_out_down then 
		n_krepplast = n_krepplast + n_krep_side
	else
		n_krepug = n_krepug + n_krep_side
	endif
endif


n_petl = round_int(ac_wall_height_nw/shag_krep)*(left_str = "Монолит") + round_int(ac_wall_height_nw/shag_krep)*(right_str = "Монолит")
n_shpilek = round_int((area_wall_h/(shag_shpilek*shag_shpilek)))
l_shpilek = max_t + 2*75/1000
l_hom = bst*2 + max_t*2 + 200/1000
if is_serd then
	n_hom_1 = round_int(h_serd_1/shag_hom)
	n_hom_2 = round_int(h_serd_2/shag_hom)
	n_hom = n_hom_1 + n_hom_2
	l_arm = (h_serd_1+h_serd_2+l_vkl*(h_serd_1>0 or h_serd_2>0))*4
	v_bet = (h_serd_1+h_serd_2)*bst*max_t*1.05
else
	n_hom = round_int(serd_height/shag_hom)
	l_arm = (serd_height + l_vkl)*4
	v_bet = serd_height*bst*max_t*1.05
endif

m_w = ""
if wall_type = "Стена" then m_w = "Стены "
if wall_type = "Перегородка" then m_w = "Перегородки "
if wall_mat = "Кирпич" then m_w = "Кирп. "
if wall_mat = "Газобетон" then m_w = "Г/б "

if mun_subpos then 
	marka_sten = subpos
else
	marka_sten = m_w + "tст=" + str("%.0mm",max_t) + "мм"
endif
wall_scp = "Устройство "
wall_obozn = ""
if wall_type = "Стена" then wall_scp =wall_scp + "стен "
if wall_type = "Перегородка" then  wall_scp =wall_scp + "перегородок "
wall_scp =wall_scp +  " t=" + str("%.0mm",max_t) + "мм. "
if wall_mat = "Кирпич" then 
	wall_scp = wall_scp + "из кирпича"
	wall_obozn = "ГОСТ 530-2012"
endif
if wall_mat = "Газобетон" then 
	wall_scp = wall_scp + "из газобетона"
	wall_obozn = "ГОСТ 21520-89"
endif

!!----------------!!
!! Debug Function !!
!!----------------!!



