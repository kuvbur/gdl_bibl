EPS = 0.0001
unID=0
unIDr=900
flag = 0

dict _data
dict profile_data

STAIR_NO = 0
STAIR_90 = 1
STAIR_60 = 2
STAIR_45 = 3

dim ttype_stair[]
dim itype_stair[] : i=0
i=i+1 : itype_stair[i]=STAIR_NO : ttype_stair[i] = "Нет"
i=i+1 : itype_stair[i]=STAIR_90 : ttype_stair[i] = "Стремянка"
i=i+1 : itype_stair[i]=STAIR_60 : ttype_stair[i] = "60 градусов"
i=i+1 : itype_stair[i]=STAIR_45 : ttype_stair[i] = "45 градусов"

gosub "read_sort"

h_step_left = 0
b_step_left = 0
offset_step_left = 0
if stair_left = STAIR_NO then
	l_stair_left = 0
	n_step_left = 0
else
	if stair_left = STAIR_90 then
		h_step_left = h_step_90
		b_step_left = 0
		offset_step_left = 0
	else
		if stair_left = STAIR_60 then
			h_step_left = h_step_60
			b_step_left = b_step_60
			offset_step_left = offset_step_60
		else
			h_step_left = h_step_45
			b_step_left = b_step_45
			offset_step_left = offset_step_45
		endif
	endif
	n_step_left = max(3, INT(ZZYZX / h_step_left))
	l_stair_left = n_step_left * b_step_left
	stype = stair_left : ltype = "left": gosub "stair_90"
endif

h_step_right = 0
b_step_right = 0
offset_step_right = 0
if stair_right = STAIR_NO then
	l_stair_right = 0
	n_step_right = 0
else
	if stair_right = STAIR_90 then
		h_step_right = h_step_90
		b_step_right = 0
		offset_step_right = 0
	else
		if stair_right = STAIR_60 then
			h_step_right = h_step_60
			b_step_right = b_step_60
			offset_step_right = offset_step_60
		else
			h_step_right = h_step_45
			b_step_right = b_step_45
			offset_step_right = offset_step_45
		endif
	endif
	n_step_right = max(3, INT(ZZYZX / h_step_right))
	l_stair_right = n_step_right * b_step_right
	stype = stair_right : ltype = "right": gosub "stair_90"
endif


gosub "stoik"

_data.bort.set.name_prof = name_prof_bort
_data.bort.set.tip_p = tip_p_bort
_data.bort.set.profile = profile_bort
_data.bort.set.thickness = th_bort
_data.bort.set.typesheet = 1
_data.bort.set.fold = 1

i = 0
i = i + 1
_data.bort.set.coord[i].x = 0
_data.bort.set.coord[i].y = 0
i = i + 1
_data.bort.set.coord[i].x = A
_data.bort.set.coord[i].y = 0
i = i + 1
_data.bort.set.coord[i].x = A
_data.bort.set.coord[i].y = B
i = i + 1
_data.bort.set.coord[i].x = 0
_data.bort.set.coord[i].y = B
i = i + 1
_data.bort.set.coord[i].x = 0
_data.bort.set.coord[i].y = 0

zazor_bort = 10/1000
!Путь профиля
i = 0
i = i + 1
_data.bort.set.path[i].z = ZZYZX+zazor_bort-0.001
i = i + 1
_data.bort.set.path[i].z = ZZYZX+zazor_bort
i = i + 1
_data.bort.set.path[i].z = ZZYZX+zazor_bort+h_bort
i = i + 1
_data.bort.set.path[i].z = ZZYZX+zazor_bort+h_bort+0.001

i = 0 : _data.bort.set.n = 0
i = i + 1
_data.bort.set.start[i].x = 0
_data.bort.set.start[i].y = 0
_data.bort.set.n = _data.st.set.n + 1

profile_data.set = _data.bort.set
gosub "read_profile"
if flag then _data.bort.read = profile_data.read

if haskey(profile_data.set) then _d = REMOVEKEY (profile_data.set)
profile_data.set = _data.bort.set
call "macro_place_sheet" parameters all, profile_data = profile_data


_data.bort.set.name_prof = name_prof_bort
_data.bort.set.tip_p = tip_p_bort
_data.bort.set.profile = profile_bort
_data.bort.set.thickness = th_bort
_data.bort.set.typesheet = 2

i = 0
i = i + 1
_data.bort.set.coord[i].x = 0
_data.bort.set.coord[i].y = 0
i = i + 1
_data.bort.set.coord[i].x = A
_data.bort.set.coord[i].y = 0
i = i + 1
_data.bort.set.coord[i].x = A
_data.bort.set.coord[i].y = B
i = i + 1
_data.bort.set.coord[i].x = 0
_data.bort.set.coord[i].y = B
i = i + 1
_data.bort.set.coord[i].x = 0
_data.bort.set.coord[i].y = 0

i = 0 : _data.bort.set.n = 0
i = i + 1
_data.bort.set.start[i].z = ZZYZX
_data.bort.set.n = _data.st.set.n + 1

profile_data.set = _data.bort.set
gosub "read_profile"
if flag then _data.bort.read = profile_data.read

if haskey(profile_data.set) then _d = REMOVEKEY (profile_data.set)
profile_data.set = _data.bort.set
call "macro_place_sheet" parameters all, profile_data = profile_data


goto "m_end"

"stair":
	if stype = STAIR_90 then gosub "stair_90"
!	if stype = STAIR_60 then gosub "stair_60"
!	if stype = STAIR_45 then gosub "stair_45"
return

"stair_60":

return

"stair_45":

return


"stair_90":
	if ltype = "left" then
		n_step = n_step_left
		cpoint = 5
		rx = 180
		bb = 0
	endif
	if ltype = "right" then
		n_step = n_step_right
		cpoint = 5
		rx = 270
		bb = B
	endif
	_data.s90.set.name_prof = name_prof_90
	_data.s90.set.tip_p = tip_p_90
	_data.s90.set.profile = profile_90
	_data.s90.set.cpoint = cpoint

	profile_data.set = _data.s90.set
	gosub "read_profile"
	if flag then _data.s90.read = profile_data.read

	!Путь профиля
	i = 0
	i = i + 1
	_data.s90.set.path[i].x = -0.1
	i = i + 1
	_data.s90.set.path[i].x = 0.01
	i = i + 1
	_data.s90.set.path[i].x = A-0.01
	i = i + 1
	_data.s90.set.path[i].x = A+0.1

	dz = 0 : _data.s90.set.n = 0
	for i=1 to n_step
		dz = dz + h_step_90
		_data.s90.set.start[i].x = 0
		_data.s90.set.start[i].y = bb
		_data.s90.set.start[i].z = dz
		_data.s90.set.start[i].rx = rx
		_data.s90.set.n = _data.s90.set.n + 1
	next i

	if haskey(profile_data.set) then _d = REMOVEKEY (profile_data.set)
	profile_data.set = _data.s90.set
	call "macro_place_profile" parameters all, profile_data = profile_data
return


"stoik":
	_data.st.set.name_prof = name_prof_st
	_data.st.set.tip_p = tip_p_st
	_data.st.set.profile = profile_st
	_data.st.set.cpoint = 5
	
	profile_data.set = _data.st.set
	gosub "read_profile"
	if flag then _data.st.read = profile_data.read

	!Путь профиля
	i = 0
	i = i + 1
	_data.st.set.path[i].z = -0.1
	i = i + 1
	_data.st.set.path[i].z = 0
	i = i + 1
	_data.st.set.path[i].z = ZZYZX
	i = i + 1
	_data.st.set.path[i].z = ZZYZX+0.1
	
	!Крайние стойки
	i = 0 : _data.st.set.n = 0
	i = i + 1
	_data.st.set.start[i].x = 0
	_data.st.set.start[i].y = 0
	_data.st.set.n = _data.st.set.n + 1
	i = i + 1
	_data.st.set.start[i].x = 0
	_data.st.set.start[i].y = B
	_data.st.set.start[i].my = -1
	_data.st.set.n = _data.st.set.n + 1
	i = i + 1
	_data.st.set.start[i].x = A
	_data.st.set.start[i].y = 0
	_data.st.set.start[i].mx = -1
	_data.st.set.n = _data.st.set.n + 1
	i = i + 1
	_data.st.set.start[i].x = A
	_data.st.set.start[i].y = B
	_data.st.set.start[i].mx = -1
	_data.st.set.start[i].my = -1
	_data.st.set.n = _data.st.set.n + 1
	
	if haskey(profile_data.set) then _d = REMOVEKEY (profile_data.set)
	profile_data.set = _data.st.set
	call "macro_place_profile" parameters all, profile_data = profile_data
	
	if nA_st>2 then
		_data.st.set.cpoint = 4
		_d = REMOVEKEY(_data.st.set.start)
		shag = A/(nA_st-1)
		dx = 0 : j = 0
		for i=1 to nA_st-2
			dx = dx + shag
			j = j + 1
			_data.st.set.start[j].x = dx
			_data.st.set.start[j].y = 0
			_data.st.set.n = _data.st.set.n + 1
			j = j + 1
			_data.st.set.start[j].x = dx
			_data.st.set.start[j].y = B
			_data.st.set.start[j].my = -1
			_data.st.set.n = _data.st.set.n + 1
		next i
		if haskey(profile_data.set) then _d = REMOVEKEY (profile_data.set)
		profile_data.set = _data.st.set
		call "macro_place_profile" parameters all, profile_data = profile_data
	endif
	
	if nB_st>2 then
		_data.st.set.cpoint = 6
		_d = REMOVEKEY(_data.st.set.start)
		shag = B/(nB_st-1)
		dy = 0 : j = 0
		for i=1 to nB_st-2
			dy = dy + shag
			j = j + 1
			_data.st.set.start[j].x = 0
			_data.st.set.start[j].y = dy
			_data.st.set.n = _data.st.set.n + 1
			j = j + 1
			_data.st.set.start[j].x = A
			_data.st.set.start[j].y = dy
			_data.st.set.start[j].mx = -1
			_data.st.set.n = _data.st.set.n + 1
		next i
		if haskey(profile_data.set) then _d = REMOVEKEY (profile_data.set)
		profile_data.set = _data.st.set
		call "macro_place_profile" parameters all, profile_data = profile_data
	endif
	
	if nA_st>2 and nB_st>2 then
		_data.st.set.cpoint = 0
		_d = REMOVEKEY(_data.st.set.start)
		shagx = A/(nA_st-1)
		shagy = B/(nB_st-1)
		dx = 0 : dy = 0 : j = 0
		for k=1 to nA_st-2
			dy = 0
			dx = dx + shagx
			for i=1 to nB_st-2
				dy = dy + shagy
				j = j + 1
				_data.st.set.start[j].x = dx
				_data.st.set.start[j].y = dy
				_data.st.set.n = _data.st.set.n + 1
			next i
		next k
		if haskey(profile_data.set) then _d = REMOVEKEY (profile_data.set)
		profile_data.set = _data.st.set
		call "macro_place_profile" parameters all, profile_data = profile_data
	endif
return

"read_sort":
	if not(haskey(sort_data.isread)) then call "macro_get_sort" PARAMETERS RETURNED_PARAMETERS sort_data
	if haskey(sort_data.isread) then 
		if sort_data.isread = 0 then
			text2 0,0, "Сортамент прочитан с ошибкой"
			goto "m_end"
		endif
	else
		text2 0,0, "Сортамент не прочитан"
		goto "m_end"
	endif
return

"read_profile":
	flag = 0
	profile_data.error = ""
	if haskey(profile_data.read) then _d = REMOVEKEY (profile_data.read)
	call "macro_get_profile" PARAMETERS prof_data = profile_data, sort_data = sort_data, RETURNED_PARAMETERS profile_data
	if profile_data.error = "ok" then flag = 1
	if profile_data.error <> "ok" then
		text2 0,0,profile_data.error+"!"
		goto "m_end"
	endif
return


"m_end":
