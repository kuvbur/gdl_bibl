CALL "GS панель навесной стены_daimoon" parameters all
if gs_detlevel_3d_m = 0 then end
if not (gs_shadow) then shadow off

addx (leftSide_X + rightSide_X) / 2
addy (downSide_Y + upperSide_Y) / 2

unID = 1
r = min (doorWidth, doorHeight) / 4
hotspot 0, 							0, 							0, unID, gs_updirection, 6 : unID = unID +1 !center of angle
hotspot 0, 							r,							0, unID, gs_updirection, 4+128 : unID = unID +1 !base hotspot
hotspot r * sin (gs_updirection), 	r * cos (gs_updirection), 	0, unID, gs_updirection, 5 : unID = unID +1 !moving
hotspot 0, 							0, 							-1, unID, gs_updirection, 7 : unID = unID +1 !center of angle

del 2


! --- Frame ----------------------------------------------------------------------------------
addx (leftSide_X + rightSide_X) / 2
addy (downSide_Y + upperSide_Y) / 2

rotz - gs_updirection

! --- frame opposite to opening side ---

material matFrame
sect_fill fillFrame, fillPenBgFrame, fillPenFrame,  penFrame

if gs_opening_dir_m = OPDIR_IN then
	addz AC_clampWidth / 2 + offsetGlass + offsetPanel
else
	addz AC_clampWidth / 2 + offsetGlass - sashThk - (frameThk - recessThk) + offsetPanel
endif

material matFrame

if gs_SashText_typ_m = 1 then
	prism_ 4, frameThk - recessThk,
	 doorWidth / 2 - adapterWidth * (iFrameType = 2), 				-doorHeight / 2,								 					15,
	 doorWidth / 2 - adapterWidth * (iFrameType = 2), 				 doorHeight / 2 - adapterWidth * (iFrameType = 2), 					15,
	 doorWidth / 2 - adapterWidth * (iFrameType = 2) - frameWidth, 	 doorHeight / 2 - adapterWidth * (iFrameType = 2) - frameWidth, 	15,
	 doorWidth / 2 - adapterWidth * (iFrameType = 2) - frameWidth, 	-doorHeight / 2,													15

	gosub "verticalTextureDir"

	prism_ 4, frameThk - recessThk,
	  doorWidth / 2 - adapterWidth * (iFrameType = 2), 				doorHeight / 2 - adapterWidth * (iFrameType = 2), 					15,
	  doorWidth / 2 - adapterWidth * (iFrameType = 2) - frameWidth, doorHeight / 2 - adapterWidth * (iFrameType = 2) - frameWidth, 	15,
	 -doorWidth / 2 + adapterWidth * (iFrameType = 2) + frameWidth, doorHeight / 2 - adapterWidth * (iFrameType = 2) - frameWidth, 	15,
	 -doorWidth / 2 + adapterWidth * (iFrameType = 2), 				doorHeight / 2 - adapterWidth * (iFrameType = 2), 					15

	gosub "horizontalTextureDir"

	prism_ 4, frameThk - recessThk,
	-doorWidth / 2 + adapterWidth * (iFrameType = 2), 				 doorHeight / 2 - adapterWidth * (iFrameType = 2), 					15,
	-doorWidth / 2 + adapterWidth * (iFrameType = 2) + frameWidth, 	 doorHeight / 2 - adapterWidth * (iFrameType = 2) - frameWidth, 	15,
	-doorWidth / 2 + adapterWidth * (iFrameType = 2) + frameWidth, 	-doorHeight / 2,											 		15,
	-doorWidth / 2 + adapterWidth * (iFrameType = 2), 				-doorHeight / 2,								 					15

	gosub "verticalTextureDir"

else
	prism_ 4, frameThk - recessThk,
		 doorWidth / 2 - adapterWidth * (iFrameType = 2), 				-doorHeight / 2,								 					15,
		 doorWidth / 2 - adapterWidth * (iFrameType = 2), 				 doorHeight / 2 - adapterWidth * (iFrameType = 2) - frameWidth,		15,
		 doorWidth / 2 - adapterWidth * (iFrameType = 2) - frameWidth, 	 doorHeight / 2 - adapterWidth * (iFrameType = 2) - frameWidth,		15,
		 doorWidth / 2 - adapterWidth * (iFrameType = 2) - frameWidth, 	-doorHeight / 2,													15

	gosub "verticalTextureDir"

	prism_ 4, frameThk - recessThk,
		  doorWidth / 2 - adapterWidth * (iFrameType = 2), 				doorHeight / 2 - adapterWidth * (iFrameType = 2), 					15,
		  doorWidth / 2 - adapterWidth * (iFrameType = 2),				doorHeight / 2 - adapterWidth * (iFrameType = 2) - frameWidth,		15,
		 -doorWidth / 2 + adapterWidth * (iFrameType = 2),				doorHeight / 2 - adapterWidth * (iFrameType = 2) - frameWidth,		15,
		 -doorWidth / 2 + adapterWidth * (iFrameType = 2), 				doorHeight / 2 - adapterWidth * (iFrameType = 2), 					15

	gosub "horizontalTextureDir"

	prism_ 4, frameThk - recessThk,
		-doorWidth / 2 + adapterWidth * (iFrameType = 2), 				 doorHeight / 2 - adapterWidth * (iFrameType = 2) - frameWidth,		15,
		-doorWidth / 2 + adapterWidth * (iFrameType = 2) + frameWidth, 	 doorHeight / 2 - adapterWidth * (iFrameType = 2) - frameWidth,		15,
		-doorWidth / 2 + adapterWidth * (iFrameType = 2) + frameWidth, 	-doorHeight / 2,											 		15,
		-doorWidth / 2 + adapterWidth * (iFrameType = 2), 				-doorHeight / 2,								 					15

	gosub "verticalTextureDir"

endif

del 1


! --- Adapter -----------------------------------------------------------------

if iFrameType = 2 then
	if gs_opening_dir_m = OPDIR_IN then
		addz AC_clampWidth / 2 + offsetGlass - recessThk - (adapterThk - frameThk) + offsetPanel
	else
		addz AC_clampWidth / 2 + offsetGlass - sashThk  - (adapterThk - frameThk) - (frameThk - recessThk) + offsetPanel
	endif

	material matAdapter

	prism_ 4, adapterThk,
		 doorWidth / 2, 				-doorHeight / 2, 				15,
		 doorWidth / 2, 				 doorHeight / 2, 				15,
		 doorWidth / 2 - adapterWidth, 	 doorHeight / 2 - adapterWidth, 15,
		 doorWidth / 2 - adapterWidth, 	-doorHeight / 2,			 	15

	prism_ 4, adapterThk,
		  doorWidth / 2, 				doorHeight / 2, 				15,
		  doorWidth / 2 - adapterWidth, doorHeight / 2 - adapterWidth, 	15,
		 -doorWidth / 2 + adapterWidth, doorHeight / 2 - adapterWidth, 	15,
		 -doorWidth / 2, 				doorHeight / 2, 				15

	prism_ 4, adapterThk,
		-doorWidth / 2, 				 doorHeight / 2, 				15,
		-doorWidth / 2 + adapterWidth, 	 doorHeight / 2 - adapterWidth, 15,
		-doorWidth / 2 + adapterWidth, 	-doorHeight / 2, 				15,
		-doorWidth / 2, 				-doorHeight / 2, 				15

!!!	if bTreshold then
!!!		material matTreshold
!!!		prism_ 4, stopThk,
!!!			-doorWidth / 2 + stopWidth, -doorHeight / 2, 					15,
!!!			-doorWidth / 2 + stopWidth, -doorHeight / 2 + tresholdHeight, 	15,
!!!			 doorWidth / 2 - stopWidth, -doorHeight / 2 + tresholdHeight, 	15,
!!!			 doorWidth / 2 - stopWidth, -doorHeight / 2, 					15
!!!	endif

	del 1
endif


! --- frame opening side ------------------------------------------------------

if gs_opening_dir_m = OPDIR_IN then
	addz AC_clampWidth / 2 + offsetGlass - recessThk + offsetPanel
else
	addz AC_clampWidth / 2 + offsetGlass - sashThk + offsetPanel
endif

frameWidth_2 = frameWidth - recessWidth

material matFrame

if abs(frameWidth_2) > eps then
	if gs_SashText_typ_m = 1 then
		prism_ 4, recessThk,
			doorWidth / 2 - adapterWidth * (iFrameType = 2), 					-doorHeight / 2, 													15,
			doorWidth / 2 - adapterWidth * (iFrameType = 2), 					 doorHeight / 2 - adapterWidth * (iFrameType = 2),					15,
			doorWidth / 2 - adapterWidth * (iFrameType = 2) - frameWidth_2, 	 doorHeight / 2 - adapterWidth * (iFrameType = 2) - frameWidth_2, 	15,
			doorWidth / 2 - adapterWidth * (iFrameType = 2) - frameWidth_2, 	-doorHeight / 2, 													15

		gosub "verticalTextureDir"

		prism_ 4, recessThk,
			  doorWidth / 2 - adapterWidth * (iFrameType = 2), 					doorHeight / 2 - adapterWidth * (iFrameType = 2), 					15,
			  doorWidth / 2 - adapterWidth * (iFrameType = 2) - frameWidth_2,	doorHeight / 2 - adapterWidth * (iFrameType = 2) - frameWidth_2, 		15,
			 -doorWidth / 2 + adapterWidth * (iFrameType = 2) + frameWidth_2,	doorHeight / 2 - adapterWidth * (iFrameType = 2) - frameWidth_2, 		15,
			 -doorWidth / 2 + adapterWidth * (iFrameType = 2), 					doorHeight / 2 - adapterWidth * (iFrameType = 2), 					15

		gosub "horizontalTextureDir"

		prism_ 4, recessThk,
			-doorWidth / 2 + adapterWidth * (iFrameType = 2), 				 	 doorHeight / 2 - adapterWidth * (iFrameType = 2), 					15,
			-doorWidth / 2 + adapterWidth * (iFrameType = 2) + frameWidth_2, 	 doorHeight / 2 - adapterWidth * (iFrameType = 2) - frameWidth_2, 	15,
			-doorWidth / 2 + adapterWidth * (iFrameType = 2) + frameWidth_2, 	-doorHeight / 2, 													15,
			-doorWidth / 2 + adapterWidth * (iFrameType = 2), 					-doorHeight / 2, 													15

		gosub "verticalTextureDir"

	else
		  prism_ 4, recessThk,
			 doorWidth / 2 - adapterWidth * (iFrameType = 2), 					-doorHeight / 2, 													15,
			 doorWidth / 2 - adapterWidth * (iFrameType = 2), 					 doorHeight / 2 - adapterWidth * (iFrameType = 2) - frameWidth_2,					15,
			 doorWidth / 2 - adapterWidth * (iFrameType = 2) - frameWidth_2, 	 doorHeight / 2 - adapterWidth * (iFrameType = 2) - frameWidth_2,		15,
			 doorWidth / 2 - adapterWidth * (iFrameType = 2) - frameWidth_2, 	-doorHeight / 2, 													15

		gosub "verticalTextureDir"

		   prism_ 4, recessThk,
			 doorWidth / 2 - adapterWidth * (iFrameType = 2), 					doorHeight / 2 - adapterWidth * (iFrameType = 2), 					15,
			 doorWidth / 2 - adapterWidth * (iFrameType = 2),					doorHeight / 2 - adapterWidth * (iFrameType = 2) - frameWidth_2, 		15,
			 -doorWidth / 2 + adapterWidth * (iFrameType = 2),					doorHeight / 2 - adapterWidth * (iFrameType = 2) - frameWidth_2, 		15,
			 -doorWidth / 2 + adapterWidth * (iFrameType = 2), 					doorHeight / 2 - adapterWidth * (iFrameType = 2), 					15

		gosub "horizontalTextureDir"

		   prism_ 4, recessThk,
			 -doorWidth / 2 + adapterWidth * (iFrameType = 2), 				 	 doorHeight / 2 - adapterWidth * (iFrameType = 2) - frameWidth_2,					15,
			 -doorWidth / 2 + adapterWidth * (iFrameType = 2) + frameWidth_2, 	 doorHeight / 2 - adapterWidth * (iFrameType = 2) - frameWidth_2,		15,
			 -doorWidth / 2 + adapterWidth * (iFrameType = 2) + frameWidth_2, 	-doorHeight / 2, 													15,
			 -doorWidth / 2 + adapterWidth * (iFrameType = 2), 					-doorHeight / 2, 													15

		gosub "verticalTextureDir"

	endif
endif

if bTreshold then
	if tresholdHeight > eps then
		material matTreshold
		prism_ 4, recessThk,
			-doorWidth / 2 + adapterWidth * (iFrameType = 2) + frameWidth_2, -doorHeight / 2, 					15,
			-doorWidth / 2 + adapterWidth * (iFrameType = 2) + frameWidth_2, -doorHeight / 2 + tresholdHeight, 	15,
			 doorWidth / 2 - adapterWidth * (iFrameType = 2) - frameWidth_2, -doorHeight / 2 + tresholdHeight, 	15,
			 doorWidth / 2 - adapterWidth * (iFrameType = 2) - frameWidth_2, -doorHeight / 2, 					15

		gosub "horizontalTextureDir"
	endif
endif

del 4


! --- clamp -------------------------------------------------------------------

addz -AC_clampWidth / 2
material matClamp

if abs (downSide_Y - downClamp_Y) > eps then
	prism_ 4, AC_clampWidth,
			leftClamp_X, 	downClamp_Y, 	15,
			rightClamp_X, 	downClamp_Y, 	15,
			rightSide_X, 	downSide_Y, 	15,
			leftSide_X, 	downSide_Y, 	15
endif

if abs (rightSide_X - rightClamp_X) > eps then
	prism_ 4, AC_clampWidth,
			rightClamp_X, 	downClamp_Y, 	15,
			rightClamp_X, 	upperClamp_Y, 	15,
			rightSide_X, 	upperSide_Y, 	15,
			rightSide_X, 	downSide_Y, 	15
endif

if abs (upperSide_Y - upperClamp_Y) > eps then
	prism_ 4, AC_clampWidth,
			rightClamp_X, 	upperClamp_Y, 	15,
			leftClamp_X, 	upperClamp_Y, 	15,
			leftSide_X, 	upperSide_Y, 	15,
			rightSide_X, 	upperSide_Y, 	15
endif

if abs (leftSide_X - leftClamp_X) > eps then
	prism_ 4, AC_clampWidth,
			leftClamp_X, 	upperClamp_Y, 	15,
			leftClamp_X, 	downClamp_Y, 	15,
			leftSide_X, 	downSide_Y, 	15,
			leftSide_X, 	upperSide_Y, 	15
endif

del 1

! --- Sash ----------------------------------------------------------------------

if abs (gs_updirection) < eps then
	addx (leftSide_X + rightSide_X) / 2 - sash_X / 2
	addy downSide_Y
endif
if abs (gs_updirection - 90) < eps then
	addx leftSide_X
	addy (downSide_Y + upperSide_Y) / 2 + sash_X / 2
endif
if abs (gs_updirection - 180) < eps then
	addx (leftSide_X + rightSide_X) / 2 + sash_X / 2
	addy upperSide_Y
endif
if abs (gs_updirection - 270) < eps then
	addx rightSide_X
	addy (downSide_Y + upperSide_Y) / 2 - sash_X / 2
endif

rotz -gs_updirection

addy tresholdHeight * bTreshold

if gs_opening_dir_m = OPDIR_IN then
	addz AC_ClampWidth / 2 + offsetGlass - sashThk + offsetPanel + sashThk
	offsetGlass = sashThk - offSetGlass - glassThk
	mulz -1
else
	addz AC_ClampWidth / 2 + offsetGlass - sashThk + offsetPanel
endif

sh_unID = 500
for i = 1 to 2
	call "sashgeometry_1" parameters 	a 					= sash_X,
									b 						= sash_Y,

							! --- Options ------------------------------------------
									gs_opening_dir_m		= gs_opening_dir_m,
									gs_optype_m				= 2,
									gs_SashText_typ_num		= gs_SashText_typ_m,

							! --- Frame --------------------------------------------
									gs_frame_width			= frameWidth,
									gs_frame_thk			= frameThk,
									gs_rebate_width 		= recessWidth,
									gs_rebate_depth 		= recessThk,

							! --- Sash ---------------------------------------------
									grill_m					= grill_m,
									gs_sash_thk				= sashThk,
									gs_sash_width			= sashWidth,
									gs_glass_thk			= glassThk,
									nHorPanel_1				= nHorPanel_1,
									nVertPanel_1			= nVertPanel_1,
									grillPosition_m			= grillPosition_m,
									gth						= grillThk,
									grillWidth_hor_1		= grillWidth_hor_1,
									grillWidth_vert_1		= grillWidth_vert_1,
									horgrid_1				= horgrid_1,
									vergrid_1				= vergrid_1,
									glassFromLeft			= glassFromLeft,
									glassFromRight			= glassFromRight,
									glassFromTop			= glassFromTop,
									glassFromBottom			= glassFromBottom,
									gs_cust_panel			= gs_cust_panel,
									gs_handle_typ_m			= gs_handle_typ_m,
									gs_han_pos				= gs_han_pos,
									gs_han_height			= gs_han_height,
									gs_cust_handle			= gs_cust_handle,
									flipHandle				= 0,

							! --- Opening ------------------------------------------
									opAngle_horizontal		= opAngle_horizontal,
									opAngle_vertical		= 0,

							! --- 2D Rep -------------------------------------------
									gs_frame_pen_cont		= penFrame,
									gs_fillSash				= fillSash,
									gs_penSash_fg			= fillPenSash,
									gs_penSash_bg			= fillPenBgSash,

							! --- 3D Rep -------------------------------------------
									gs_detlevel_3d_m		= gs_detlevel_3d_m,
									gs_shadow				= gs_shadow,
									gs_resol				= gs_resol,
									gs_frame_pen			= penFrame,
									gs_glass_pen			= penGlass,

							! --- Materials ----------------------------------------
									gs_frame_mat			= matSash,
									gs_frame_mat2			= matSash,
									gs_glass_mat			= matGlass,
									gs_grill_mat			= matGrill,
									gs_grill_mat2			= matGrill,
									matHandle				= matHandle,
									matHandleAcc			= matHandleAcc,

							! --- Others -------------------------------------------
									sh_unID					= sh_unID,
									isWindow				= 0,
									gs_full_edit			= 1,

						! --- MVO Override -------------------------------------------
									or_bOplines3d			= or_bOplines3d,
									or_iOpLineType3dIn		= or_iOpLineType3dIn,
									or_iOpLineType3dOut		= or_iOpLineType3dOut,
									or_iOplineStyle			= or_iOplineStyle,
									or_opLinePen			= or_opLinePen,
									bOverride_MVO_3D		= bOverride_MVO_3D

	sh_unID = sh_unID + 500

	if not(b2Handles) then
		gs_handle_typ_m = 0
	endif
	addx sash_X
	mulx -1
next i
del 2*2

del 1
if gs_opening_dir_m = OPDIR_IN then
	del 5
else
	del 4
endif

end

!=============================================================================================================================
! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end
!=============================================================================================================================


! ---- horizontal texture -------------------------------------------------------------------------------------------------------
"horizontalTextureDir":
	base
	vert 0, 0, 0
	vert 1, 0, 0
	vert 0, 0, 1
	vert 0, 1, 0
	coor 2, -1, -2, -3, -4
	body 1
	base
return

! ---- vertical texture -------------------------------------------------------------------------------------------------------
"verticalTextureDir":
	rotz 90

	gosub "horizontalTextureDir"

	del 1
return

