show_asotv = 1 : min_h_otv = 0.01 : min_b_otv = 0.01
success1 = LIBRARYGLOBAL ("Libraryflobals-as", "show_asotv", tshow_asotv)
if success1 then show_asotv = tshow_asotv
success = LIBRARYGLOBAL ("Libraryflobals-as", "min_h_otv", tmin_h_otv)
if success then min_h_otv = tmin_h_otv
success = LIBRARYGLOBAL ("Libraryflobals-as", "min_b_otv", tmin_b_otv)
if success then min_b_otv = tmin_b_otv

asotv = 1 : B=min_h_otv+0.5 : A=min_b_otv+0.5 : upr_n = -1 : porog = 0
nd = request("Assoclp_parvalue", "asotv", namindd1, typed1, flagd1, dim1d1, dim2d1, tasotv)
if nd then asotv = tasotv
nd = request("Assoclp_parvalue", "B", namindd1, typed1, flagd1, dim1d1, dim2d1, tB)
if nd then B = tB
nd = request("Assoclp_parvalue", "A", namindd1, typed1, flagd1, dim1d1, dim2d1, tA)
if nd then A = tA
nd1 = request("Assoclp_parvalue", "upr_n", namindd1, typed1, flagd1, dim1d1, dim2d1, tupr_n)
if nd1 then upr_n = tupr_n
nd = request("Assoclp_parvalue", "porog", namindd1, typed1, flagd1, dim1d1, dim2d1, tporog)
if nd then porog = tporog

otobr = 0
if annot[1] = 0 then 
	otobr = 1
else
	for i=1 to vardim1(annot)
		if annot[i] = GLOB_SCALE then otobr = 1
	next i
endif
if not(otobr) then end

if (asotv and show_asotv and ((B+porog)>min_h_otv) and (A>min_b_otv) and (GLOB_STRUCTURE_DISPLAY = upr_n) or (upr_n<0)) or not(asotv) then
	goto 23
else
	end
endif
23:
type_renovation=""
type_wall=""
type_renovation_mark = ""

dim _parentProperties[]
n = REQUEST ("Properties_Of_Parent", "", _parentProperties)
for i = 1 to vardim1(_parentProperties) / 4
	PROPERTY_TYPE		= _parentProperties[4 * (i - 1) + 2]
	if PROPERTY_TYPE<>"IFC" then
		PROPERTY_NAME			= _parentProperties[4 * (i - 1) + 4]
		PROPERTY_ID		= _parentProperties[4 * (i - 1) + 1]
		if STRSTR(PROPERTY_NAME, "Тип замены заполнения")>0 then n = REQUEST ("Property_Value_Of_Parent", PROPERTY_ID, _typeValue, dim1, dim2, type_renovation)
		if STRSTR(PROPERTY_NAME, "Тип стены")>0 then n = REQUEST ("Property_Value_Of_Parent", PROPERTY_ID, _typeValue, dim1, dim2, type_wall)
	endif
next i
if STRSTR(type_renovation, "закладываемый")>0 then type_renovation_mark = ""
if STRSTR(type_renovation, "пробиваемый")>0 then type_renovation_mark = "пр"
if STRSTR(type_renovation, "расширяемый")>0 then type_renovation_mark = "р"

if type_renovation_mark = "пр" or type_renovation_mark = "р" then
	fill AC_MarkerFill
	POLY2_B 4, 2+4, 1, 0,AC_WIDO_A_SIZE/2,0,1,	AC_WIDO_A_SIZE/2,-AC_WALL_THICKNESS,1,	AC_WIDO_A_SIZE*0.8,-AC_WALL_THICKNESS,1,	AC_WIDO_A_SIZE*0.8,0,1
	POLY2_B 4, 2+4, 1, 0,-AC_WIDO_A_SIZE/2,0,1,	-AC_WIDO_A_SIZE/2,-AC_WALL_THICKNESS,1,	-AC_WIDO_A_SIZE*0.8,-AC_WALL_THICKNESS,1,	-AC_WIDO_A_SIZE*0.8,0,1
endif

mark_type = 0 : success = LIBRARYGLOBAL ("Libraryflobals-as", "mark_type", mark_type)
mark_num = 0 : success = LIBRARYGLOBAL ("Libraryflobals-as", "mark_num", mark_num)
if mark_type = 1 or mark_num = 0 then mark_num = GLOB_STRUCTURE_DISPLAY+1

show_firest_winddoor = 0 : success = LIBRARYGLOBAL ("Libraryflobals-as", "show_firest_winddoor", show_firest_winddoor)
show_egress_winddoor = 0 : success = LIBRARYGLOBAL ("Libraryflobals-as", "show_egress_winddoor", show_egress_winddoor)
show_renov_winddoor = 0 : success = LIBRARYGLOBAL ("Libraryflobals-as", "show_renov_winddoor", show_renov_winddoor) 
if show_egress_winddoor and GLOB_ELEM_TYPE=5 then 
	nd1 = request("Assoclp_parvalue", "ac_egress_width", namindd1, typed1, flagd1, dim1d1, dim2d1, ac_egress_width)
	nd1 = request("Assoclp_parvalue", "ac_egress_height", namindd1, typed1, flagd1, dim1d1, dim2d1, ac_egress_height)
	ac_egress_width = STR("%.0mm",ac_egress_width)
	ac_egress_height = STR("%.0mm",ac_egress_height)
	size_egress = ac_egress_width+"x"+ac_egress_height + "(h)"
else
	size_egress = ""
	if not(show_renov_winddoor) then type_renovation_mark = ""
endif

PAPER_TO_MODEL = GLOB_SCALE / 1000	! Convert paper size to model size

unID=2

ipos = mark_num
if show_firest_winddoor or show_egress_winddoor then ipos = 5


angl_txt = 0
r = request ("View_Rotangle", "", _angleViewRot)
_totalRotate = WALL_DIRECTION MOD 360
add2 0,-AC_WALL_THICKNESS/2
if not(auto_rot[ipos]) then
	rot2 _totalRotate * (SYMB_MIRRORED - not(SYMB_MIRRORED))
	angl_txt = -_angleViewRot
	_angleViewRot = (_angleViewRot + _totalRotate * (SYMB_MIRRORED - not(SYMB_MIRRORED))) MOD 360
	if (abs(_angleViewRot) > (90 + EPS) & abs(_angleViewRot) < (270 + EPS)) then
		angl_txt = 180
	endif
else
	_totalRotate = (_angleViewRot + WALL_DIRECTION) MOD 360
	if (_totalRotate > (90 + EPS) & _totalRotate < (270 + EPS)) then
		rot2 180
	endif
endif


if zerk[ipos] then
	mul2 1,-1
	angl_txt = angl_txt - 180
endif

!! - Этот код поворачивает корректно, но переносит начало координат, что не хотелось бы.
!!r = request ("View_Rotangle", "", _angleViewRot)
!!_totalRotate	= (SYMB_ROTANGLE + _angleViewRot) MOD 360
!!_nTrans = 0					  
!!if not(auto_rot[ipos]) then					! Readable
!!    if (_totalRotate > (90 + EPS) & _totalRotate < (270 + EPS)) then
!!        angl_txt = 180
!!        _nTrans = _nTrans + 1
!!    endif
!!else
!!	angl_txt = totalRotate * (SYMB_MIRRORED - not(SYMB_MIRRORED))
!!	_nTrans = _nTrans + 1
!!endif


DEFINE STYLE "cистемный" AC_TextFont_1, AC_TextSize_1, 5, AC_TextStyle_1
SET STYLE "cистемный"

txt_vin_t = ""
param_name_1 = param_otobr[mark_num][2]
param_name = param_name_1
if show_firest_winddoor or show_egress_winddoor then param_name = ""
GOSUB "read_param" : txt_vin_1 = txt_vin_t
if show_egress_winddoor then  txt_vin_1 = size_egress


txtv = txt_vin_1 : tblockname = "mark_1" : name_style = "cистемный" : angl_txt_a = angl_txt : gosub "get_block"
if isCircle then r_circle = max(r_circle,width/2+0.5, height/2+0.5)
add_x = max(height/6, r_circle)*PAPER_TO_MODEL+AC_WALL_THICKNESS/2+(height/2*PAPER_TO_MODEL)*zerk[ipos]
add2 0,add_x

if txt_vin_1 <> "Нет" then
	pos_xy[ipos][1] = pos_xys[ipos][1]*PAPER_TO_MODEL
	pos_xy[ipos][2] = pos_xys[ipos][2]*PAPER_TO_MODEL
	HOTSPOT2 pos_xy[ipos][1], 0, unID, pos_xy[ipos][2], 1+128+1024,pos_xys[ipos][2]: unID=unID+1
	HOTSPOT2 pos_xy[ipos][1], pos_xy[ipos][2], unID, pos_xy[ipos][2], 2+1024,pos_xys[ipos][2]: unID=unID+1
	HOTSPOT2 pos_xy[ipos][1],-1, unID, pos_xy[ipos][2], 3+1024,pos_xys[ipos][2]: unID=unID+1

	HOTSPOT2 0, pos_xy[ipos][2], unID, pos_xy[ipos][1], 1+128+1024, pos_xys[ipos][1]: unID=unID+1
	HOTSPOT2 pos_xy[ipos][1], pos_xy[ipos][2], unID, pos_xy[ipos][1], 2+1024, pos_xys[ipos][1]: unID=unID+1
	HOTSPOT2 -1, pos_xy[ipos][2], unID, pos_xy[ipos][1], 3+1024, pos_xys[ipos][1]: unID=unID+1

	RICHTEXT2 pos_xy[ipos][1], pos_xy[ipos][2]+dx, tblockname
	if isRect then
		l = (stw (txt_vin_1 + ".") + l_mun)*PAPER_TO_MODEL
		t = (height*0.6 + l_mun/2)*PAPER_TO_MODEL
		add2 pos_xy[ipos][1], pos_xy[ipos][2] + (Shrift_razm*PAPER_TO_MODEL)/2
		fill GLOB_FILL_INDEX_BACKGROUND
		poly2 5,1+2+4,
		-l/2,-t,
		l/2,-t,
		l/2,t,
		-l/2,t,
		-l/2,-t
		del 1
	endif
	if isCircle then 
		circle2  pos_xy[ipos][1]-height*sin(angl_txt)/4*PAPER_TO_MODEL, pos_xy[ipos][2]+height*cos(angl_txt)/4*PAPER_TO_MODEL,max(r_circle,width/2, height/2)*PAPER_TO_MODEL
	endif
endif

del 1
mul2 1,-1

txt_vin_t = ""
param_name_2 = param_otobr[mark_num][3]
param_name = param_name_2
if show_firest_winddoor or show_egress_winddoor then param_name = "firest"
GOSUB "read_param" : txt_vin_2 = txt_vin_t

txtv = txt_vin_2 : tblockname = "mark_2" : name_style = "cистемный" : angl_txt_a = angl_txt+180 : gosub "get_block"

if isCircle then r_circle = max(r_circle,width/2+0.5, height/2+0.5)
add_x = max(height/2+1, r_circle+1)*PAPER_TO_MODEL+AC_WALL_THICKNESS/2*(not(zerk[ipos]))
add2 0,add_x

if txt_vin_2 <> "Нет" then
	pos_xy[ipos][3] = pos_xys[ipos][3]*PAPER_TO_MODEL
	pos_xy[ipos][4] = pos_xys[ipos][4]*PAPER_TO_MODEL
	HOTSPOT2 pos_xy[ipos][3], 0, unID, pos_xy[ipos][4], 1+128+1024,pos_xys[ipos][4]: unID=unID+1
	HOTSPOT2 pos_xy[ipos][3], pos_xy[ipos][4], unID, pos_xy[ipos][4], 2+1024,pos_xys[ipos][4]: unID=unID+1
	HOTSPOT2 pos_xy[ipos][3], -1, unID, pos_xy[ipos][4], 3+1024,pos_xys[ipos][4]: unID=unID+1

	HOTSPOT2 0, pos_xy[ipos][4], unID, pos_xy[ipos][3], 1+128+1024,pos_xys[ipos][3]: unID=unID+1
	HOTSPOT2 pos_xy[ipos][3], pos_xy[ipos][4], unID, pos_xy[ipos][3], 2+1024,pos_xys[ipos][3]: unID=unID+1
	HOTSPOT2 -1, pos_xy[ipos][4], unID, pos_xy[ipos][3], 3+1024,pos_xys[ipos][3]: unID=unID+1

	RICHTEXT2 pos_xy[ipos][3], pos_xy[ipos][4], "mark_2"
	if isRect then
		l = (stw (txt_vin_2 + ".") + l_mun)*PAPER_TO_MODEL
		t = (height*0.6 + l_mun/2)*PAPER_TO_MODEL
		add2 pos_xy[ipos][3], pos_xy[ipos][4] + (Shrift_razm*PAPER_TO_MODEL)/2
		fill GLOB_FILL_INDEX_BACKGROUND
		poly2 5,1+2+4,
		-l/2,-t-height*PAPER_TO_MODEL*0.25,
		l/2,-t-height*PAPER_TO_MODEL*0.25,
		l/2,t-height*PAPER_TO_MODEL*0.25,
		-l/2,t-height*PAPER_TO_MODEL*0.25,
		-l/2,-t-height*PAPER_TO_MODEL*0.25
		del 1
	endif
	if isCircle then
		circle2  pos_xy[ipos][1]-height*sin(angl_txt)/4*PAPER_TO_MODEL, pos_xy[ipos][2]+height*cos(angl_txt)/4*PAPER_TO_MODEL,max(r_circle,width/2, height/2)*PAPER_TO_MODEL
	endif
endif

end

"read_param":	
	if not(hide_on_error) then
		if STRSUB(param_name, 1, 1) = "H" then
			hide_on_error = 1
			param_name = STRSUB(param_name, 2, strlen(param_name))
		else
			hide_on_error = 0
		endif
	endif
	isRect = 0
	if STRSUB(param_name, 1, 1) = "R" then
		isRect = 1
		param_name = STRSUB(param_name, 2, strlen(param_name))
	else
		if param_name_1 = "firest" then isRect = 1
	endif
	if STRSUB(param_name, 2, 1) = "R" then
		isRect = 1
		param_name = STRSUB(param_name, 1, 1) + STRSUB(param_name, 3, strlen(param_name))
	endif

	isCircle = 0
	if STRSUB(param_name, 1, 1) = "C" then
		isCircle = 1
		param_name = STRSUB(param_name, 2, strlen(param_name))	
	else
		if r_circle>0 and param_name = "ID" and not(show_egress_winddoor) then isCircle = 1
	endif
	if STRSUB(param_name, 1, 1) = "C" then
		isCircle = 1
		param_name = STRSUB(param_name, 1, 1) + STRSUB(param_name, 3, strlen(param_name))	
	endif

	if param_name = "otm_niz" then 
		if success1 and nd1 then
			txt_vin_t = "Отм. низа " + txt_vin_t
		else
			aaz = AC_GLOB_ELEVATION + WALL_POSITION[3]
			if abs(aaz)<EPS then
				az = "0.000"
				znak1 = ""
			 else
				az = str("%.3m", abs(aaz))
				if aaz < EPS then 
					znak1 = "-"
				else
					znak1 = "+"
				endif
			endif
			txt_vin_t = znak1 + az
		endif
	endif
	if param_name = "otm_verh" and not(success1 and nd1) then 
		aaz = AC_GLOB_ELEVATION + WALL_POSITION[3] + AC_WIDO_B_SIZE
		if abs(aaz)<EPS then
			az = "0.000"
			znak1 = ""
		 else
			az = str("%.3m", abs(aaz))
			if aaz < EPS then 
				znak1 = "-"
			else
				znak1 = "+"
			endif
		endif
		txt_vin_t = znak1 + az
	endif
	if param_name = "ID" then txt_vin_t = AC_WIDO_ID + type_renovation_mark
	if txt_vin_t = "" then
		if STRSTR(param_name, "%")=0 and STRSTR(param_name, " ")=0 then param_name = "%" + param_name + "%"
		mgp_error_char = "" : if hide_on_error then mgp_error_char = "@@"
		call "macro_get_param" parameters mgp_in_str=param_name,
											mgp_prim1="",
											mgp_prim2="",
											mgp_prim3="",
											mgp_prim4="",
											mgp_prim5="",
											mgp_qty=1, mgp_error_char = mgp_error_char,
											mgp_ld="%.0mm", RETURNED_PARAMETERS mgp_out_str
		txt_vin_t = mgp_out_str
	endif
	if vartype(txt_vin_t) <> 2 then txt_vin_t = STR("%.0", txt_vin_t)
	if hide_on_error and STRSTR(txt_vin_t, "@@")>EPS then txt_vin_t = "Нет"
	if txt_vin_t = "!" then txt_vin_t = "Нет"
	if param_name = "" then txt_vin_t = "Нет"
return

"get_block":
	paragraph tblockname+"p" 2,
			0, 0, 0,
			1
			style name_style
			txtv
	endparagraph
	TEXTBLOCK tblockname 0, 5, angl_txt_a, AC_TextCharWidthFactor_1, AC_TextCharSpaceFactor_1, 1,tblockname+"p"
	height = 0 : descent = 0 : leading = 0
	sss=request("Height_of_style", name_style, height, descent, leading)
	dx = (height/2-descent-leading-AC_TextSize_1/2)*PAPER_TO_MODEL*0.5
	n = REQUEST("TEXTBLOCK_INFO", tblockname, width, height)
	width = width * PAPER_TO_MODEL
	height = height * PAPER_TO_MODEL
return


