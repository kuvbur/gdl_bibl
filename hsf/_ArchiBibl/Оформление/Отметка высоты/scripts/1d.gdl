bOpaque = AC_bLabelOpaqueFill
penOpaque=AC_LabelTextBgrPen
penLine = AC_LabelPointerPen
penFont = AC_TextPen_1
nameFont = AC_TextFont_1
AC_TextSize_1 = AC_TextSize_1
iscall = 1
PARAMETERS penArrow = LABEL_ARROWHEAD_PEN

dict propInputIds
dict propOutputVals
dim label_otm_num[]
dim label_otm[] : label_otm[1] = "Отм. оси"

is_call = 0
call_y = 0
nd1 = request("Assoclp_parvalue", "otm_elem", namindd1, typed1, flagd1, dim1d1, dim2d1, call_y)
if nd1>0 then
	label_otm_num[1]=call_y
	is_call = 1
endif

if isabs then
	call_y = 0
	nd1 = request("Assoclp_parvalue", "otm_elem_abs", namindd1, typed1, flagd1, dim1d1, dim2d1, call_y)
	label_otm_num[1]=call_y
	if nd1>0 then
		label_otm_num[1]=call_y
		is_call = 1
	endif
endif

otm_elem_down = 0 : nd1 = request("Assoclp_parvalue", "otm_elem_down", namindd1, typed1, flagd1, dim1d1, dim2d1, otm_elem_down)
text2 0,-0.5,otm_elem_down
text2 0,0,nd1

otm_elem_up = 0 : nd1 = request("Assoclp_parvalue", "otm_elem_up", namindd1, typed1, flagd1, dim1d1, dim2d1, otm_elem_up)

otm_elem_axsis_down = 0 : nd1 = request("Assoclp_parvalue", "otm_elem_axsis_down", namindd1, typed1, flagd1, dim1d1, dim2d1, otm_elem_axsis_down)

otm_elem_axsis_up = 0 : nd1 = request("Assoclp_parvalue", "otm_elem_axsis_up", namindd1, typed1, flagd1, dim1d1, dim2d1, otm_elem_axsis_up)


end


max_val = 50
!if vardim1(Ll_m)<max_val and multi_otm then
!	dim tt_n[]
!	dim tt_t[]
!	for i=1 to max_val
!		tt_n[i]=0
!		tt_t[i]="Вверху"
!	next i
!	PARAMETERS orientMarker_sc_m = tt_n, txtOrientMarker_m = tt_t, orientMarker_fix_m = tt_n, Gap_fix_m = tt_n, Gap_m = tt_n, LineLength_fix_m = tt_n, LineLength_m = tt_n, Ll_m = tt_n
!endif


if nd1=0 then
	nd1 = request("Assoclp_parvalue", "label_otm", namindd1, typed1, flagd1, dim1d1, dim2d1, label_otm)
	nd2 = request("Assoclp_parvalue", "label_otm_num", namindd1, typed1, flagd1, dim1d1, dim2d1, label_otm_num)
	if nd1>0 and nd2>0 and vardim1(label_otm_num)>1 then
		is_call = 1
		for i=1 to vardim1(label_otm)
			if label_otm[i] = otm_type then
				call_y = label_otm_num[i] 
				i = vardim1(label_otm)
			endif
		next i
	endif
endif

mrh_ref_story = ref_story
dim mrh_ref_story_text[7] : mrh_ref_story_text[1] = ""
dim mrh_ref_story_val[7] : mrh_ref_story_val[1] = 0
mrh_reference_heigh = 0
call "macro_reference_height" parameters mrh_ref_story = mrh_ref_story,
								RETURNED_PARAMETERS mrh_reference_heigh, mrh_ref_story_text, mrh_ref_story_val
!>----- Получение поправки для привязки к уровню -----------
if ref_story>0 then DimOrigin = mrh_reference_heigh
DimOrigin = DimOrigin + popr

! Document name:
!   Name     : Отметка высоты (ГОСТ) / Elevation Dimension (GOST)
!   Version  : 10.0
!   Author   : Вилисов В.Ю. (Valery W)
!   Date     : 20 June 2006
!   Modified : 18 September 2006
!   Modified : 10 February 2007
!
! ======================================================
EPS=0.0001

! ======================================================
! Определение единицы измерения
! ======================================================
	wlu = ""
	rrr = REQUEST ("Working_length_unit", "", wlu) 	! Запрос системы измерения
	unit = ""
	IF STRSTR (wlu, "m")  THEN unit = "м"
	IF STRSTR (wlu, "cm") THEN unit = "см"
	IF STRSTR (wlu, "mm") THEN unit = "мм"
	IF STRSTR (wlu, "df") THEN unit = "df"
	IF STRSTR (wlu, "fi") THEN unit = "fi"
	IF STRSTR (wlu, "di") THEN unit = "di"
	ElevDimUnit = ""
	if GLOB_SCRIPT_TYPE = 2 then rr = REQUEST ("Elevation_dimension", "", ElevDimUnit) 	! Запрос размерной единицы высоты
	
! ======================================================
! Преобразование текста в значения
! ======================================================
	RoundValue = 0.001
	IF txtRoundValue = "0,001"	 THEN	RoundValue = 0.001
	IF txtRoundValue = "0,005"	 THEN	RoundValue = 0.005
	IF txtRoundValue = "0,010"	 THEN	RoundValue = 0.010
	IF txtRoundValue = "0,025"	 THEN	RoundValue = 0.025
	IF txtRoundValue = "0,050"	 THEN	RoundValue = 0.050
	
	IF txtArrowType = "Стандарт" THEN	iArrowType = 1
	IF txtArrowType = "Эскиз 1"	 THEN	iArrowType = 2
	IF txtArrowType = "Эскиз 2"	 THEN	iArrowType = 3
	IF txtArrowType = "Эскиз 3"	 THEN	iArrowType = 4
	IF txtArrowType = "Эскиз 4"	 THEN	iArrowType = 5
	IF txtArrowType = "Эскиз 5"	 THEN	iArrowType = 6
	
! ======================================================
! Запрос списка шрифтов в системе
! ======================================================
	DIM fontNames[]
	n = request("FONTNAMES_LIST", "", fontNames)
	
! ======================================================
! Установка стилей
! ======================================================
	DEFINE STYLE{2} "normalText" nameFont, AC_TextSize_1,	 AC_TextStyle_1
	DEFINE STYLE{2} "superText"  nameFont, AC_TextSize_1,	 AC_TextStyle_1+32
	DEFINE STYLE{2} "smallText"  nameFont, AC_TextSize_1*3/4, AC_TextStyle_1

n = REQUEST ("Height_of_style", "normalText", height1, descent1, leading1)	! шрифта Размерного текста 
n = REQUEST ("Height_of_style", "smallText",  height2, descent2, leading2)	! шрифта Дополнительного текста 

! ======================================================
! Установка высоты текст.стиля с учетом "плохих" шрифтов
! ======================================================
IF height1 - (AC_TextSize_1 + descent1 + leading1) < 1/2*descent1 THEN \
	hFontStyle1 = (descent1*5/3 + AC_TextSize_1) ELSE hFontStyle1 = height1
IF height2 - (AC_TextSize_1*3/4 + descent2 + leading2) < 1/2*descent2 THEN \
	hFontStyle2 = (descent2*2 + AC_TextSize_1*3/4) ELSE hFontStyle2 = height2

UpPos   = INT( MAX(sizeArrow *multiplierSA, sizeArrow + (hFontStyle2 - descent2) *(addText<>"")))	! min отступ вверх
DownPos = INT(-MAX(sizeArrow *multiplierSA, sizeArrow + hFontStyle1))				! min отступ вниз



!gosub "getPropertyValue"
!for jjj=1 to min(max_val, vardim1(label_otm_num))
!	ntxt = str("%.0", jjj)
!	symb = label_otm_num[jjj]
!	gosub "otm_txt"
!	if not(multi_otm) then goto 30
!next jjj
!
!if multi_otm then otm_auto_z = 1

inx = 1
for jjj=1 to vardim1(label_otm)
	if otm_type = label_otm[jjj] then
		inx = jjj
		jjj=vardim1(label_otm)
	endif
next jjj

ntxt = str("%.0", inx)
symb = label_otm_num[inx]
TextDimf = label_otm[inx]
gosub "otm_txt"

goto 30

"otm_txt":

	DimY = INT((symb - DimOrigin + RoundValue/2) /RoundValue) *RoundValue
	Dimf = INT((symb - DimOrigin + RoundValue/2) /RoundValue) *RoundValue

	TextDimY = STR(ElevDimUnit, DimY)
!	if dop=0 then TextDimf = STR(ElevDimUnit, Dimf) else TextDimf=""
	
	if strstr(addText,"абс")>0 then
		Dimf = INT((symb - DimOrigin + GLOB_PROJECT_ALTITUDE + RoundValue/2) /RoundValue) *RoundValue
		TextDimf = str(Dimf,6,2)
	endif
	
	IF bShowPlus THEN
		IF DimY > EPS THEN TextDimY = "+" + TextDimY
		IF ABS(DimY) < EPS AND bPlusMinus THEN TextDimY = "±" + TextDimY
	ENDIF
	
	IF txtOption = "Вычисленное значение" THEN
		dimText = TextDimY
		LOCK "customTextDimY"
	ELSE
		dimText = customTextDimY
	ENDIF
	
	! ======================================================
	! Составление текстовых блоков
	! ======================================================

if multi_otm then txtOrientMarker = txtOrientMarker_m[jjj]
		PEN penFont
		interval = ""
		IF superText <> "" THEN interval = " "
		
		PARAGRAPH "UpPRG"+ntxt 3, (1 - SYMB_MIRRORED), 0, SYMB_MIRRORED, 1
			SET STYLE "normalText"
				"" + dimText
			SET STYLE "superText"
				interval + superText
		ENDPARAGRAPH
		TEXTBLOCK "UpTextBlock"+ntxt 0, 9, 0, 1, 1, 1, "UpPRG"+ntxt
		
		PARAGRAPH "DownPRG"+ntxt 3, (1 - SYMB_MIRRORED), 0, SYMB_MIRRORED, 1
			SET STYLE "smallText"
				"" + addText + TextDimf
		ENDPARAGRAPH
		TEXTBLOCK "DownTextBlock"+ntxt 0, 9, 0, 1, 1, 1, "DownPRG"+ntxt
		
	! ======================================================
	! Запрос параметров текст.стилей для определения рамеров
	! ======================================================
		n = REQUEST ("TEXTBLOCK_INFO",  "UpTextBlock"+ntxt, wUpTextBlock, hUpTextBlock)	! габаритов верхнего текст.блока
		n = REQUEST ("TEXTBLOCK_INFO",  "DownTextBlock"+ntxt, wDownTextBlock, hDownTextBlock)	! габаритов нижнего текст.блока
		
	! ======================================================
	! Установка длины полки и подложки 
	! ======================================================
		
		LOpaque = (wUpTextBlock + sizeArrow )/1000*A_
		LShelf = (MAX(wUpTextBlock, wDownTextBlock*maxShelf - 0.3 *sizeArrow *(txtOrientMarker = "Внизу")) + sizeArrow )/1000*A_
		
	! ======================================================
	! Установка минимального отступа полки
	! ======================================================
		UpPos   = INT( MAX(sizeArrow *multiplierSA, sizeArrow + (hFontStyle2 - descent2) *(addText<>"")))	! min отступ вверх
		DownPos = INT(-MAX(sizeArrow *multiplierSA, sizeArrow + hFontStyle1))				! min отступ вниз

	! ======================================================
	! Удержание ориентации маркера (верх/низ) при редактировании нескольких отметок сразу. (работает)
	! Удержание разблокированного отступа полки на нужном растоянии при смене масштаба. (работает)
	! Удержание разблокированного отступа полки на нужном растоянии
	! при редактировании нескольких отметок сразу. (сделать неудалось)
	! ======================================================
!	if multi_otm then
!		IF NOT(GLOB_MODPAR_NAME = "orientMarker_sc") AND NOT(GLOB_MODPAR_NAME = "orientMarker_fix") THEN
!			IF txtOrientMarker_m[jjj] = "Вверху" THEN
!				IF orientMarker_sc_m[jjj] > 0 AND orientMarker_sc_m[jjj] < UpPos/1000*A_   THEN	PARAMETERS orientMarker_sc_m[jjj] = UpPos/1000*A_
!				IF FixMarkerSize = 0 THEN PARAMETERS orientMarker_sc_m[jjj] = MAX(UpPos /1000*A_, orientMarker_sc_m[jjj])
!				IF FixMarkerSize = 1 THEN PARAMETERS orientMarker_fix_m[jjj] = UpPos, orientMarker_sc_m[jjj] = UpPos /1000*A_
!			ENDIF
!			IF txtOrientMarker_m[jjj] = "Внизу" THEN
!				IF orientMarker_sc_m[jjj] < 0 AND orientMarker_sc_m[jjj] > DownPos/1000*A_ THEN	PARAMETERS orientMarker_sc_m[jjj] = DownPos/1000*A_
!				IF FixMarkerSize = 0 THEN PARAMETERS orientMarker_sc_m[jjj] = MIN(DownPos /1000*A_, orientMarker_sc_m[jjj])
!				IF FixMarkerSize = 1 THEN PARAMETERS orientMarker_fix_m[jjj] = DownPos, orientMarker_sc_m[jjj] = DownPos /1000*A_
!			ENDIF
!		ENDIF
!	else
!		IF NOT(GLOB_MODPAR_NAME = "orientMarker_sc") AND NOT(GLOB_MODPAR_NAME = "orientMarker_fix") THEN
!			IF txtOrientMarker = "Вверху" THEN
!				IF orientMarker_sc > 0 AND orientMarker_sc < UpPos/1000*A_   THEN	PARAMETERS orientMarker_sc = UpPos/1000*A_
!				IF FixMarkerSize = 0 THEN PARAMETERS orientMarker_sc = MAX(UpPos /1000*A_, orientMarker_sc)
!				IF FixMarkerSize = 1 THEN PARAMETERS orientMarker_fix = UpPos, orientMarker_sc = UpPos /1000*A_
!			ENDIF
!			IF txtOrientMarker = "Внизу" THEN
!				IF orientMarker_sc < 0 AND orientMarker_sc > DownPos/1000*A_ THEN	PARAMETERS orientMarker_sc = DownPos/1000*A_
!				IF FixMarkerSize = 0 THEN PARAMETERS orientMarker_sc = MIN(DownPos /1000*A_, orientMarker_sc)
!				IF FixMarkerSize = 1 THEN PARAMETERS orientMarker_fix = DownPos, orientMarker_sc = DownPos /1000*A_
!			ENDIF
!		ENDIF
!		IF txtOrientMarker = "Вверху" THEN
!			IF orientMarker_sc > 0 AND orientMarker_sc < UpPos/1000*A_   THEN	orientMarker_sc = UpPos/1000*A_
!			IF FixMarkerSize = 0 THEN orientMarker_sc  = MAX(UpPos /1000*A_, orientMarker_sc)
!			IF FixMarkerSize = 1 THEN orientMarker_fix = UpPos
!			IF FixMarkerSize = 1 THEN orientMarker_sc  = UpPos /1000*A_
!		ENDIF
!		IF txtOrientMarker = "Внизу" THEN
!			IF orientMarker_sc < 0 AND orientMarker_sc > DownPos/1000*A_ THEN	orientMarker_sc = DownPos/1000*A_
!			IF FixMarkerSize = 0 THEN orientMarker_sc  = MIN(DownPos /1000*A_, orientMarker_sc)
!			IF FixMarkerSize = 1 THEN orientMarker_fix = DownPos
!			IF FixMarkerSize = 1 THEN orientMarker_sc  = DownPos /1000*A_
!		ENDIF
!	endif
return 

"getPropertyValue":
	param_name_str_old = "AutoLevel"
	flag_find = 0
	_stPropertyValue = ""
	dim	parentPropertiesArray[]
	n = request ("Properties_Of_Parent", "", parentPropertiesArray)
	for i=1 to vardim1(parentPropertiesArray) step 4
		if i+3<=vardim1(parentPropertiesArray) then
			PropertyName = parentPropertiesArray[i+3]
			id = parentPropertiesArray[i]
			if STRTOLOWER(param_name_str_old) = STRTOLOWER(PropertyName) or STRTOLOWER(param_name_str_old) = STRTOLOWER(id) then
				propInputIds.propertyIds[1].id = id
				if HASKEY(propOutputVals.propertyValues) then t = REMOVEKEY(propOutputVals.propertyValues)
				n = REQUEST ("Property_Values_Of_Parent", propInputIds, propOutputVals)
				if HASKEY(propOutputVals.propertyValues) then
					if propOutputVals.propertyValues[1].value_status = 1 then
						_typeValue = propOutputVals.propertyValues[1].type
						_value = 0
						for j = 1 to vardim1(propOutputVals.propertyValues[1].value)
							_value = propOutputVals.propertyValues[1].value[j]
							if vartype(_value)=2 then
								if strlen(_value)>0 and _value<>" " then
									flag_find = 1
									if j > 1 then
										_stPropertyValue = _stPropertyValue + ";" + _value
									else
										_stPropertyValue = _value
									endif
								endif
							endif
						next j
					endif
				endif
				if HASKEY(propInputIds.propertyIds) then t = REMOVEKEY(propInputIds.propertyIds)
				i = vardim1(parentPropertiesArray)
			endif
		endif
	next i
	if flag_find then
		!Удаляем пробелы
		if STRSTR(_stPropertyValue, " ")>EPS then
			mrc_newChar = "" : mrc_charToReplace = " " : mrc_in_str = _stPropertyValue
			call "macro_replace_char" parameters mrc_in_str=mrc_in_str,
										mrc_charToReplace=mrc_charToReplace,
										mrc_newChar = mrc_newChar,
										RETURNED_PARAMETERS mrc_out_str
			_stPropertyValue = mrc_out_str
		endif
		if STRSTR(_stPropertyValue, " ")>EPS then
			mrc_newChar = "" : mrc_charToReplace = " " : mrc_in_str = _stPropertyValue
			call "macro_replace_char" parameters mrc_in_str=mrc_in_str,
										mrc_charToReplace=mrc_charToReplace,
										mrc_newChar = mrc_newChar,
										RETURNED_PARAMETERS mrc_out_str
			_stPropertyValue = mrc_out_str
		endif
		dim mss_out_array[] : mss_delim_char = ";" : mss_in_str = _stPropertyValue
		call "macro_split_string" parameters mss_in_str=mss_in_str,
									mss_delim_char=mss_delim_char,
									RETURNED_PARAMETERS mss_out_array
		j = vardim1(label_otm_num)*is_call+1
		for i=1 to vardim1(mss_out_array)
			num = 0 : n = 0
			n = SPLIT (mss_out_array[i], "%n", num)
			if n>EPS then
				num = num / 1000
				if abs(num)<RoundValue then num = 0
				flag_ex = 1
				for k=1 to vardim1(label_otm_num)
					if abs(label_otm_num[k] - num)<RoundValue then
						flag_ex = 0
						k=vardim1(label_otm_num)
					endif
				next k
				if flag_ex = 1 then
					label_otm_num[j] = num
					j = j + 1
				endif
			endif
		next i
	endif
return

30:




