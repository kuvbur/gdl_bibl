category_nam = ""
nam = ""
numbe = ""
cod = ""
if not(show_spec) then
	n_rea = 0
	n_rea = REQUEST ("Zone_relations", "", category_nam, cod, nam, numbe)
	if (n_zon <> numbe or name_zone <> nam) and not(mun_zone) then gs_cont_pen = p_err
	if (n_zon = "" or name_zone = "") and not(mun_zone) then gs_cont_pen = p_err
	if n_sloi = -2 then gs_cont_pen = 75
endif
otobr = 0
if annot[1] = 0 then 
	otobr = 1
else
	for i=1 to vardim1(annot)
		if annot[i] = GLOB_SCALE then otobr = 1
	next i
endif
unID=1
show_pol = 0 : show_pot = 0 : show_type_pot = 0 : show_tip_otm = 0
if tip_el = "Пол" then
	success = LIBRARYGLOBAL ("Libraryflobals-pokr", "show_pol", show_pol)
	success = LIBRARYGLOBAL ("Libraryflobals-pokr", "show_tip_otm", show_tip_otm)
	if otobr and not(show_pol) then otobr = 0
else
	success = LIBRARYGLOBAL ("Libraryflobals-pokr", "show_pot", show_pot)
	success = LIBRARYGLOBAL ("Libraryflobals-pokr", "show_type_pot", show_type_pot)
	success = LIBRARYGLOBAL ("Libraryflobals-pokr", "show_h_pot", show_h_pot)
	if otobr and not(show_pot) and not(show_type_pot) then otobr = 0
endif
success = LIBRARYGLOBAL ("Libraryflobals-pokr", "show_num", show_num)
success = LIBRARYGLOBAL ("Libraryflobals-pokr", "show_fill", show_fill)
if fillr=0 then show_fill=0
if show_fill then
	gs_fill_type = fillr
	gs_fill_pen = fill_pen
	gs_back_pen = fill_bac
endif
tp = "!"
if show_num then 
	if vartype(n_zon) = 2 then tp = tip_pol + "/" + n_zon
else
	tp = tip_pol
endif

DEFINE STYLE "MARK" Shrift, Shrift_razm, 2, Shrift_tip
STYLE "MARK"
sss=request("Height_of_style", "MARK", height, descent, leading)
height = height*GLOB_SCALE / 1000
if show_tip_otm then
	pen 6
	hotspot2 ch_x, ch_y
	text2 ch_x, ch_y, "Тип "+tip_pol + " t=" + str("%.0mm", summ_h)
	text2 ch_x, ch_y-height, "Отм. верха " + str("%.3m", SYMB_POS_Z)
	text2 ch_x, ch_y-height*2, "Отм. низа " + str("%.3m", SYMB_POS_Z-summ_h)
endif

if otobr then
	ch = INITADDONSCOPE ("PolyOperations", "", "")
	PREPAREFUNCTION ch, "CreateContainer", "from_cont", ""
	PREPAREFUNCTION ch, "CreateContainer", "to_cont", ""
	PREPAREFUNCTION ch, "SetSourceContainer",		"from_cont", ""
	PREPAREFUNCTION ch, "SetDestinationContainer",	"to_cont", ""
	dim emp2[][]
	dim emp1[]
	dim vertArray[][]
	dim contourArray[]
	dim resPolyIDArray[] : resPolyIDArray[1] = ""
	dim contArr[] : dim resVertices[]
	pen gs_cont_pen
	if tip_el = "Пол" then
		LINE_TYPE SYMB_LINETYPE
		for i=1 to k_otr_pl
			hotspot2 otr_pl[i][1],otr_pl[i][2], unID
			unID=unID+1
			hotline2 otr_pl[i][1],otr_pl[i][2],otr_pl[i][3],otr_pl[i][4]
	!			line2 otr_pl[i][1],otr_pl[i][2],otr_pl[i][3],otr_pl[i][4]
		next i
		if not(show_spec) then
			pen gs_cont_pen
			LINE_TYPE SYMB_LINETYPE
			HOTSPOT2 pos_x1, 0, unID, pos_y1, 1+128: unID=unID+1
			HOTSPOT2 pos_x1, pos_y1, unID, pos_y1, 2: unID=unID+1
			HOTSPOT2 pos_x1, -1, unID, pos_y1, 3: unID=unID+1
			HOTSPOT2 0, pos_y1, unID, pos_x1, 1+128: unID=unID+1
			HOTSPOT2 pos_x1, pos_y1, unID, pos_x1, 2: unID=unID+1
			HOTSPOT2 -1, pos_y1, unID, pos_x1, 3: unID=unID+1
			add2 pos_x1,pos_y1
			mashtab = GLOB_SCALE / 100
			MUL2 mashtab,mashtab
			k = 0.8
			MUL2 k,k
			DRAWINDEX 0
			text2 0.5*k_scale,0.87*k_scale/2,tp
			DRAWINDEX 0
			set fill 'Пусто'
			POLY2_B 4,1+2+4,19,19,0,0,1*k_scale,1*k_scale,0,1*k_scale,0.5*k_scale,0.87*k_scale,1*k_scale,0,0,-1
			hotspot2 0.5*k_scale,0.87*k_scale/2,unID : unID=unID+1
			hotspot2 0.5*k_scale,0.87*k_scale,unID : unID=unID+1
			hotspot2 0,0,unID : unID=unID+1
			hotspot2 1*k_scale,0,unID : unID=unID+1
			if vin then
				del top
				HOTSPOT2 pos_xv, 0, unID, pos_yv, 1+128: unID=unID+1
				HOTSPOT2 pos_xv, pos_yv, unID, pos_yv, 2: unID=unID+1
				HOTSPOT2 pos_xv, -1, unID, pos_yv, 3: unID=unID+1
				HOTSPOT2 0, pos_yv, unID, pos_xv, 1+128: unID=unID+1
				HOTSPOT2 pos_xv, pos_yv, unID, pos_xv, 2: unID=unID+1
				HOTSPOT2 -1, pos_yv, unID, pos_xv, 3: unID=unID+1
				DRAWINDEX 30
				line2 pos_x1+0.5*k, pos_y1, pos_xv, pos_yv
			endif
		endif
	else
		LINE_TYPE connt
		if k_otv>0 then
			for j=1 to k_otv
				vertArray = emp2
				contourArray = emp1
				hole_poly = "po"+str("%.0", j)
				nVertices = 0
				nContours = 0
				if j = 1 then n_perv = 1
				if j>1 then n_perv=k_otr_otv[k_otv-1]+1
				for i=1 to k_otr_otv[j]-1
					nVertices = nVertices + 1
					vertArray[nVertices][1] = otr_otv[n_perv+i][1]
					vertArray[nVertices][2] = otr_otv[n_perv+i][2]
					vertArray[nVertices][3] = 0
				next i
				nVertices = nVertices + 1
				vertArray[nVertices][1] = otr_otv[n_perv+k_otr_otv[j]-1][3]
				vertArray[nVertices][2] = otr_otv[n_perv+k_otr_otv[j]-1][4]
				vertArray[nVertices][3] = 0
				nVertices = nVertices + 1
				vertArray[nVertices][1] = otr_otv[n_perv+1][1]
				vertArray[nVertices][2] = otr_otv[n_perv+1][2]
				vertArray[nVertices][3] = 0
				nContours = nContours+1
				contourArray[nContours] = nVertices
				PREPAREFUNCTION ch, "Store", hole_poly, nVertices, nContours, vertArray, contourArray
				PREPAREFUNCTION  ch, "OffsetParams", "", 1, -offset_l
				numPoly = CALLFUNCTION (ch, "ResizeContour", hole_poly, resPolyIDArray)
				polygonID = resPolyIDArray[1]
				gosub 100	! Get one polygon contour data (without contours)
				if nsp > 3 then
					poly2_ nsp/3, 1+4, get(nsp)
				else
					pen 20
					text2 0,0,"!!ERROR!!"
				endif
			next j
		endif
		nVertices = 0
		nContours = 0
		!Наружный контур
		base_poly = "poly1"
		for i=1 to k_otr_pl
			nVertices = nVertices + 1
			vertArray[nVertices][1] = otr_pl[i][1]
			vertArray[nVertices][2] = otr_pl[i][2]
			vertArray[nVertices][3] = 0
		next i
		nVertices = nVertices + 1
		vertArray[nVertices][1] = otr_pl[k_otr_pl][3]
		vertArray[nVertices][2] = otr_pl[k_otr_pl][4]
		vertArray[nVertices][3] = 0
		nContours = nContours + 1
		contourArray[nContours] = nVertices
		PREPAREFUNCTION ch, "Store", base_poly, nVertices, nContours, vertArray, contourArray
		PREPAREFUNCTION  ch, "OffsetParams", "", 1, offset_l
		numPoly = CALLFUNCTION (ch, "ResizeContour", base_poly, resPolyIDArray)
		polygonID = resPolyIDArray[1]
		gosub 100	! Get one polygon contour data (without contours)
		if nsp > 3 then
			poly2_ nsp/3, 1+4, use(nsp)
			for i = 1 to nsp step 3
				hotspot2 get(2)
				t_=get(1)
			next i
		else
			pen 20
			text2 0,0,"!!ERROR!!"
		endif
		aaz = SYMB_POS_Z + ac_ref_height  * (ac_ref_height>0) - h_otn
		if abs(aaz) < EPS then az = "0.000" else az = str(abs(aaz),6,3)
		if aaz < 0 then znak1 = "-"
		if aaz > 0 then znak1 = "+"
		if abs(aaz) < EPS then znak1 = ""

		if show_type_pot then 
			ttxt = znak1 + az + " Тип " + tp
		else
			if show_num then 
				ttxt = tp + " (" + znak1 + az + ")" 
			else
				ttxt = znak1 + az
			endif
		endif
		if show_h_pot and abs(h_otn)>EPS then
			ttxt = ttxt + " Hподв=" + str("%.0mm", h_otn) + "мм."
			if germ then ttxt = ttxt + " ГЕРМЕТИЧЕН"
		endif
		HOTSPOT2 0, 0, unID: unID=unID+1
		HOTSPOT2 0, pos_y1, unID, pos_x1, 1+128: unID=unID+1
		HOTSPOT2 -1, pos_y1, unID, pos_x1, 3: unID=unID+1
		HOTSPOT2 pos_x1, pos_y1, unID, pos_x1, 2: unID=unID+1
		HOTSPOT2 pos_x1, 0, unID, pos_y1, 1+128: unID=unID+1
		HOTSPOT2 pos_x1, -1, unID, pos_y1, 3: unID=unID+1
		HOTSPOT2 pos_x1, pos_y1, unID, pos_y1, 2: unID=unID+1

		HOTSPOT2 0, pos_y2, unID, pos_x2, 1+128: unID=unID+1
		HOTSPOT2 -1, pos_y2, unID, pos_x2, 3: unID=unID+1
		HOTSPOT2 pos_x2, pos_y2, unID, pos_x2, 2: unID=unID+1
		HOTSPOT2 pos_x2, 0, unID, pos_y2, 1+128: unID=unID+1
		HOTSPOT2 pos_x2, -1, unID, pos_y2, 3: unID=unID+1
		HOTSPOT2 pos_x2, pos_y2, unID, pos_y2, 2: unID=unID+1
		LINE2 pos_x1, pos_y1, pos_x2, pos_y2
		HOTLINE2 pos_x1, pos_y1, pos_x2, pos_y2
		pos_x = pos_x1 - pos_x2
		pos_y = pos_y1 - pos_y2
		!Поворот
		angl = 0
		if pos_x > 0 and pos_y > 0 then
			angl = atn(pos_y/pos_x)
		endif
		if pos_x < 0 and pos_y > 0 then
			angl = 270 - atn(pos_x/pos_y)
		endif
		if pos_x < 0 and pos_y < 0 then
			angl = 90 - atn(pos_x/pos_y)
		endif
		if pos_x > 0 and pos_y < 0 then
			angl = 270 - atn(pos_x/pos_y)
		endif
		if abs(pos_x)<EPS and pos_y < 0 then
			angl = 90
		endif
		if abs(pos_x)<EPS and pos_y > 0 then
			angl = 90
		endif
		if pos_x < 0 and abs(pos_y)<EPS then
			angl = 0
		endif
		if pos_x > 0 and abs(pos_y)<EPS then
			angl = 0
		endif
		TEXTBLOCK "type" 0, 8, angl, 1, 1, 1, ttxt
		HOTSPOT2 0, pos_ytxt, unID, pos_xtxt, 1+128: unID=unID+1
		HOTSPOT2 -1, pos_ytxt, unID, pos_xtxt, 3: unID=unID+1
		HOTSPOT2 pos_xtxt, pos_ytxt, unID, pos_xtxt, 2: unID=unID+1
		HOTSPOT2 pos_xtxt, 0, unID, pos_ytxt, 1+128: unID=unID+1
		HOTSPOT2 pos_xtxt, -1, unID, pos_ytxt, 3: unID=unID+1
		HOTSPOT2 pos_xtxt, pos_ytxt, unID, pos_ytxt, 2: unID=unID+1
		RICHTEXT2 pos_xtxt, pos_ytxt, "type"
	endif
else
	hotspot2 0,0
	circle2 0,0,0.005
endif
del top
if nsp>0 then n = max(get(nsp))
whole_poly = "poly2"
vertArray = emp2
contourArray = emp1
nVertices = 0
nContours = 0
for i=1 to k_otr_pl
	nVertices = nVertices + 1
	vertArray[nVertices][1] = otr_pl[i][1]
	vertArray[nVertices][2] = otr_pl[i][2]
	vertArray[nVertices][3] = 0
next i
nVertices = nVertices + 1
vertArray[nVertices][1] = otr_pl[k_otr_pl][3]
vertArray[nVertices][2] = otr_pl[k_otr_pl][4]
vertArray[nVertices][3] = 0
nContours = nContours + 1
contourArray[nContours] = nVertices
if k_otv>0 then
	for j=1 to k_otv
		if j = 1 then n_perv = 1
		if j>1 then n_perv=k_otr_otv[k_otv-1]+1
		for i=1 to k_otr_otv[j]-1
			nVertices = nVertices + 1
			vertArray[nVertices][1] = otr_otv[n_perv+i][1]
			vertArray[nVertices][2] = otr_otv[n_perv+i][2]
			vertArray[nVertices][3] = 0
		next i
		nVertices = nVertices + 1
		vertArray[nVertices][1] = otr_otv[n_perv+k_otr_otv[j]-1][3]
		vertArray[nVertices][2] = otr_otv[n_perv+k_otr_otv[j]-1][4]
		vertArray[nVertices][3] = 0
		nVertices = nVertices + 1
		vertArray[nVertices][1] = otr_otv[n_perv+1][1]
		vertArray[nVertices][2] = otr_otv[n_perv+1][2]
		vertArray[nVertices][3] = 0
		nContours = nContours+1
		contourArray[nContours] = nVertices
	next j
endif
PREPAREFUNCTION ch, "Store", whole_poly, nVertices, nContours, vertArray, contourArray
nPgon = CALLFUNCTION (ch, "Regularize", whole_poly, resPolyIDArray)
polygonID = resPolyIDArray[1]
gosub 100	! Get one polygon contour data (without contours)
if nsp > 3 then
	pen gs_cont_pen
	DRAWINDEX 40
	set fill gs_fill_type
	LINE_TYPE SYMB_LINETYPE
	st = 1 : if show_fill then st = 1+2+4
	POLY2_B NSP/3,st,gs_fill_pen,gs_back_pen,get(NSP)
else
	pen 20
endif
CLOSEADDONSCOPE (ch)
end

100:
! ==============================================================================
! Get GDL Polygon
! ------------------------------------------------------------------------------
! Input variables:
!	ch:				Channel ID
!	polygonID:		Polygon ID
!
! Returned variables:
!	GDL stack:			GDL polygon
! ==============================================================================
	resVertices = emp1 : contArr = emp1
	numVertices = CALLFUNCTION (ch, "GetVertices", polygonID, resVertices)
	numVertices = numVertices / 3
	numContours = CALLFUNCTION (ch, "GetContourEnds", polygonID, contArr)
	for contIndex = 1 to numContours
		if contIndex = 1 then
			begIdx = 0
		else
			begIdx = contArr[contIndex] - 1
		endif
		if contIndex = numContours then
			endIdx = numVertices - 1
		else
			endIdx = contArr[contIndex + 1] - 2
		endif

		bClosed = 0
		bStartWithLast = 0

		index = endIdx * 3
		lastVertX = resVertices[index + 1]
		lastVertY = resVertices[index + 2]
		lastVertA = resVertices[index + 3]

		if abs(lastVertA) > EPS then
			put lastVertX, lastVertY, 1
			bStartWithLast = 1
		endif

		for vertIndex = begIdx to endIdx
			index = vertIndex * 3
			actVertX = resVertices[index + 1]
			actVertY = resVertices[index + 2]
			actVertA = resVertices[index + 3]

			if vertIndex = begIdx then
				if bStartWithLast then
					ac2gdl_spx = lastVertX
					ac2gdl_spy = lastVertY
				else
					ac2gdl_spx = actVertX
					ac2gdl_spy = actVertY
				endif
			endif

			if abs(lastVertA) > EPS then
				ac2gdl_mx = (actVertX + lastVertX) / 2
				ac2gdl_my = (actVertY + lastVertY) / 2
				ac2gdl_ratio = 1 / 2 / tan (lastVertA / 2)

				ac2gdl_cx = ac2gdl_mx - ac2gdl_ratio * (actVertY - lastVertY)	! Arc center
				ac2gdl_cy = ac2gdl_my + ac2gdl_ratio * (actVertX - lastVertX)

				put ac2gdl_cx,	ac2gdl_cy,	900,
					0,			lastVertA,	4001
			endif

			if vertIndex > begIdx & abs(ac2gdl_spx - actVertX) < EPS & abs(ac2gdl_spy - actVertY) < EPS then
				put actVertX, actVertY, -1
				bClosed = 1
			else
				if vertIndex < endIdx | not(bStartWithLast) then
					put actVertX, actVertY, 1
				endif
			endif

			lastVertX = actVertX
			lastVertY = actVertY
			lastVertA = actVertA

		next vertIndex

		if not(bClosed) then	! Close the polygon if it has holes
			put ac2gdl_spx, ac2gdl_spy, -1
		endif

	next contIndex
return

