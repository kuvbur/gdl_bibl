otobr = 0if annot[1] = 0 then 	otobr = 1else	for i=1 to vardim1(annot)		if annot[i] = GLOB_SCALE then otobr = 1	next iendifunID=1show_pol = 0 : show_pot = 0 : show_type_pot = 0if tip_el = "Пол" then	success = LIBRARYGLOBAL ("Libraryflobals-as", "show_pol", show_pol)	if otobr and not(show_pol) then otobr = 0else	success = LIBRARYGLOBAL ("Libraryflobals-as", "show_pot", show_pot)	success = LIBRARYGLOBAL ("Libraryflobals-as", "show_type_pot", show_type_pot)	if show_pot and not(show_pot) then otobr = 0endifif otobr then 	pen gs_cont_pen	LINE_TYPE connt	DEFINE STYLE "MARK" Shrift, Shrift_razm, 2, Shrift_tip	STYLE "MARK"	if tip_el = "Пол" then		for i=1 to k_otr_pl			hotspot2 otr_pl[i][1],otr_pl[i][2], unID			unID=unID+1			hotline2 otr_pl[i][1],otr_pl[i][2],otr_pl[i][3],otr_pl[i][4]!			line2 otr_pl[i][1],otr_pl[i][2],otr_pl[i][3],otr_pl[i][4]!			put otr_pl[i][1],otr_pl[i][2],1+32		next i		LINE_TYPE 1		HOTSPOT2 pos_x1, 0, unID, pos_y1, 1+128: unID=unID+1		HOTSPOT2 pos_x1, pos_y1, unID, pos_y1, 2: unID=unID+1		HOTSPOT2 pos_x1, -1, unID, pos_y1, 3: unID=unID+1		HOTSPOT2 0, pos_y1, unID, pos_x1, 1+128: unID=unID+1		HOTSPOT2 pos_x1, pos_y1, unID, pos_x1, 2: unID=unID+1		HOTSPOT2 -1, pos_y1, unID, pos_x1, 3: unID=unID+1		add2 pos_x1,pos_y1		mashtab = GLOB_SCALE / 100		MUL2 mashtab,mashtab		k = 0.8		MUL2 k,k		DRAWINDEX 0		if debug = 0 then text2 0.5,0.87/2,tip_pol		if debug = 1 then text2 0.5,0.87/2,n_zon		DRAWINDEX 20		set fill f		poly2 3,1+2+4,		0,0,		1,0,		0.5,0.87		hotspot2 0.5,0.87/2,unID : unID=unID+1		hotspot2 0.5,0.87,unID : unID=unID+1		hotspot2 0,0,unID : unID=unID+1		hotspot2 1,0,unID : unID=unID+1	else		ch = INITADDONSCOPE ("PolyOperations", "", "")		PREPAREFUNCTION ch, "CreateContainer", "mySourceContainer", ""		PREPAREFUNCTION ch, "CreateContainer", "myDestinationContainer", ""		PREPAREFUNCTION ch, "SetSourceContainer",		"mySourceContainer", ""		PREPAREFUNCTION ch, "SetDestinationContainer",	"myDestinationContainer", ""		nVertices = k_otr_pl		nContours = 1		dim vertArray[][]		dim contourArray[]		for i=1 to k_otr_pl			vertArray[i][1] = otr_pl[i][1]			vertArray[i][2] = otr_pl[i][2]			vertArray[i][3] = 0		next i		contourArray[1] = k_otr_pl+1		PREPAREFUNCTION ch, "Store", "poly1", nVertices, nContours, vertArray, contourArray		itemIdx=1		PREPAREFUNCTION  ch, "OffsetParams", "", itemIdx, offset_l		dim resPolyIDArray[]		numPoly = CALLFUNCTION (ch, "ResizeContour", "poly1", resPolyIDArray)		polygonID = resPolyIDArray[1]		gosub 100	! Get one polygon contour data (without contours)		if nsp > 0 then			poly2_ nsp/3, 1+4, use(nsp)			for i = 1 to nsp step 3				hotspot2 get(2)				get(1)			next i		else			pen 20			text2 0,0,"!!ERROR!!"		endif		CLOSEADDONSCOPE (ch)		aaz = SYMB_POS_Z + ac_ref_height  * (ac_ref_height>0)		if aaz = 0 then az = "0.000" else az = str(abs(aaz),6,3)		if aaz < 0 then znak1 = "-"		if aaz > 0 then znak1 = "+"		if aaz = 0 then znak1 = ""		HOTSPOT2 0, 0, unID: unID=unID+1		HOTSPOT2 0, pos_y1, unID, pos_x1, 1+128: unID=unID+1		HOTSPOT2 -1, pos_y1, unID, pos_x1, 3: unID=unID+1		HOTSPOT2 pos_x1, pos_y1, unID, pos_x1, 2: unID=unID+1		HOTSPOT2 pos_x1, 0, unID, pos_y1, 1+128: unID=unID+1		HOTSPOT2 pos_x1, -1, unID, pos_y1, 3: unID=unID+1		HOTSPOT2 pos_x1, pos_y1, unID, pos_y1, 2: unID=unID+1		HOTSPOT2 0, pos_y2, unID, pos_x2, 1+128: unID=unID+1		HOTSPOT2 -1, pos_y2, unID, pos_x2, 3: unID=unID+1		HOTSPOT2 pos_x2, pos_y2, unID, pos_x2, 2: unID=unID+1		HOTSPOT2 pos_x2, 0, unID, pos_y2, 1+128: unID=unID+1		HOTSPOT2 pos_x2, -1, unID, pos_y2, 3: unID=unID+1		HOTSPOT2 pos_x2, pos_y2, unID, pos_y2, 2: unID=unID+1		LINE2 pos_x1, pos_y1, pos_x2, pos_y2		HOTLINE2 pos_x1, pos_y1, pos_x2, pos_y2		pos_x = pos_x1 - pos_x2		pos_y = pos_y1 - pos_y2		!Поворот		angl = 0		if pos_x > 0 and pos_y > 0 then			angl = atn(pos_y/pos_x)		endif		if pos_x < 0 and pos_y > 0 then			angl = 270 - atn(pos_x/pos_y)		endif		if pos_x < 0 and pos_y < 0 then			angl = 90 - atn(pos_x/pos_y)		endif		if pos_x > 0 and pos_y < 0 then			angl = 270 - atn(pos_x/pos_y)		endif		if pos_x = 0 and pos_y < 0 then			angl = 90		endif		if pos_x = 0 and pos_y > 0 then			angl = 90		endif		if pos_x < 0 and pos_y = 0 then			angl = 0		endif		if pos_x > 0 and pos_y = 0 then			angl = 0		endif		TEXTBLOCK "otm" 0, 2, angl, 1, 1, 1, znak1 + az		TEXTBLOCK "type" 0, 8, angl, 1, 1, 1, tip_pol		HOTSPOT2 0, pos_ytxt, unID, pos_xtxt, 1+128: unID=unID+1		HOTSPOT2 -1, pos_ytxt, unID, pos_xtxt, 3: unID=unID+1		HOTSPOT2 pos_xtxt, pos_ytxt, unID, pos_xtxt, 2: unID=unID+1		HOTSPOT2 pos_xtxt, 0, unID, pos_ytxt, 1+128: unID=unID+1		HOTSPOT2 pos_xtxt, -1, unID, pos_ytxt, 3: unID=unID+1		HOTSPOT2 pos_xtxt, pos_ytxt, unID, pos_ytxt, 2: unID=unID+1				RICHTEXT2 pos_xtxt, pos_ytxt, "otm"		if show_type_pot then RICHTEXT2 pos_xtxt, pos_ytxt, "type"	endifendifend100:! ==============================================================================! Get GDL Polygon! ------------------------------------------------------------------------------! Input variables:!	ch:				Channel ID!	polygonID:		Polygon ID!! Returned variables:!	GDL stack:			GDL polygon! ==============================================================================	dim resVertices[]	numVertices = CALLFUNCTION (ch, "GetVertices", polygonID, resVertices)	numVertices = numVertices / 3	dim contArr[]	numContours = CALLFUNCTION (ch, "GetContourEnds", polygonID, contArr)	for contIndex = 1 to numContours		if contIndex = 1 then			begIdx = 0		else			begIdx = contArr[contIndex] - 1		endif		if contIndex = numContours then			endIdx = numVertices - 1		else			endIdx = contArr[contIndex + 1] - 2		endif		bClosed = 0		bStartWithLast = 0		index = endIdx * 3		lastVertX = resVertices[index + 1]		lastVertY = resVertices[index + 2]		lastVertA = resVertices[index + 3]		if abs(lastVertA) > EPS then			put lastVertX, lastVertY, 1			bStartWithLast = 1		endif		for vertIndex = begIdx to endIdx			index = vertIndex * 3			actVertX = resVertices[index + 1]			actVertY = resVertices[index + 2]			actVertA = resVertices[index + 3]			if vertIndex = begIdx then				if bStartWithLast then					ac2gdl_spx = lastVertX					ac2gdl_spy = lastVertY				else					ac2gdl_spx = actVertX					ac2gdl_spy = actVertY				endif			endif			if abs(lastVertA) > EPS then				ac2gdl_mx = (actVertX + lastVertX) / 2				ac2gdl_my = (actVertY + lastVertY) / 2				ac2gdl_ratio = 1 / 2 / tan (lastVertA / 2)				ac2gdl_cx = ac2gdl_mx - ac2gdl_ratio * (actVertY - lastVertY)	! Arc center				ac2gdl_cy = ac2gdl_my + ac2gdl_ratio * (actVertX - lastVertX)				put ac2gdl_cx,	ac2gdl_cy,	900,					0,			lastVertA,	4001			endif			if vertIndex > begIdx & abs(ac2gdl_spx - actVertX) < EPS & abs(ac2gdl_spy - actVertY) < EPS then				put actVertX, actVertY, -1				bClosed = 1			else				if vertIndex < endIdx | not(bStartWithLast) then					put actVertX, actVertY, 1				endif			endif			lastVertX = actVertX			lastVertY = actVertY			lastVertA = actVertA		next vertIndex		if not(bClosed) then	! Close the polygon if it has holes			put ac2gdl_spx, ac2gdl_spy, -1		endif	next contIndexreturn