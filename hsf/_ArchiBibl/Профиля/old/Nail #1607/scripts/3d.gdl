!Appearance {
	material nailMat
	pen gs_cont_pen
	resol 72
!} Appearance

grooveWidth = max(grooveWidth, .001)

!Components to Show {
	!If used as a Plan View Symbol
		if isProjection then
			showParts3D = showParts
			swivel = 0
		endif
	!} If used as a Plan View Symbol
	!Components {
		showHead = bittest(showParts3D, 0)
		showShaft = bittest(showParts3D, 2)
	!} Components
	!If used as an SEO Operator {
		isSEOperator = 0
		if int(glob_context/10) = 4 then
			showShaft = 1
			showHead = 1
			isSEOperator = 1
		endif
	!} If used as an SEO Operator
!} Components to Show

!Orientation Hotspots {
	hotspot 0, 0, 0
	iHotspot = 0
	!Incline {
		R = shaftLength/2
		hotspot 0, 1, 0, iHotspot + 1, incline, 7
		hotspot 0, 0, 0, iHotspot + 2, incline, 6 + 128
		hotspot R*cos(incline), 0, -R*sin(incline), iHotspot + 3, incline, 5
		hotspot R, 0, 0, iHotspot + 4, incline, 4 + 128
		iHotspot = iHotspot + 4
	!} Incline
!} Orientation Hotspots

!Position and Orientation {
	!Rotation {
		roty Incline
		rotx 30*(2*symb_mirrored - 1) + swivel
	!} Rotation
!} Position and Orientation

!Dimensional Hotspots {
	!Shaft Length {
		hotspot 0, 0, 0, iHotspot + 1, shaftLength, 1 + 256
		hotspot shaftLength, 0, 0, iHotspot + 2, shaftLength, 2 + 256
		hotspot -1, 0, 0, iHotspot + 3, shaftLength, 3 + 256
		iHotspot = iHotspot + 3
	!} Shaft Length
!} Dimensional Hotspots

!Center Line {
	if not(isSEOperator) then
		x0 = 0
		if showHead then
			x0 = 0
		endif
		if showShaft then
			x0 = shaftLength
		endif
		if x0 < shaftLength - .0001 then
			lin_ x0, 0, 0, shaftLength, 0, 0
		endif
	endif
!} Center Line
	
!Nail {
	if showHead or showShaft then
		dim faceStatus[],
			horzStatus[],
			vertStatus[]
		!Re-set Indices {
			body -1
			base
		!} Re-set Indices
		!Vertices
			dQ = 15
			taperL = shaftThick
			nTurn = 0
			k = 0
			for qi = 0 to 360 - dQ/2 step dQ
				nTurn = nTurn + 1
				nProf = 0
				!Head {
					put -headThick, headDia/2, 2, 0, 2: gosub "Add a Vertex"
					put 0, headDia/2, 0, 0, 2: gosub "Add a Vertex"
				!} Head
				!Shaft {
					if showShaft then
						Li = 0
						put 0, shaftDia/2 - grooveDepth, 0, 0, 2: gosub "Add a Vertex"
						for Li = grooveWidth to shaftLength - taperL - grooveWidth step grooveWidth
							put Li - grooveDepth/2 - grooveDepth, shaftDia/2 - grooveDepth, 2, 2, 2: gosub "Add a Vertex"
							put Li - grooveDepth/2, shaftDia/2, 0, 2, 2: gosub "Add a Vertex"
							put Li + grooveDepth/2, shaftDia/2, 2, 2, 2: gosub "Add a Vertex"
							put Li + grooveDepth/2 + grooveDepth, shaftDia/2 - grooveDepth, 0, 2, 2: gosub "Add a Vertex"
						next Li
						put Li - grooveDepth, shaftDia/2 - grooveDepth, 2, 2, 2: gosub "Add a Vertex"
					endif
				!} Shaft
			next qi
			!Point {
				lastVert = k + 1
				if showShaft then
					vert shaftLength, 0, 0
				else
					vert 0, 0, 0
				endif
			!}Point
		!} Vertices
		!Edges {
			k = 0
			!Horizontals {
				firstHorizontal = k
				for i = 1 to nTurn
					i2 = i%nTurn + 1
					firstVert = (i - 1)*nProf
					nextVert = (i2 - 1)*nProf
					for j = 1 to nProf
						edge firstVert + j, nextVert + j, -1, -1, horzStatus[j]
						k = k + 1
					next j
				next i
			!} Horizontals
			!Verticals {
				firstVertical = k
				for i = 1 to nTurn
					firstVert = (i - 1)*nProf
					for j = 1 to nProf - 1
						if i%4 = 1 then
							si = vertStatus[j]
						else
							si = 2
						endif
						edge firstVert + j, firstVert + j + 1, -1, -1, si
						k = k + 1
					next j
					j = nProf
					edge firstVert + j, lastVert, -1, -1, 2
					k = k + 1
				next i
			!} Verticals
			!Diagonals {
				firstDiagonal = k
				for i = 1 to nTurn
					i2 = i%nTurn + 1
					firstVert = (i - 1)*nProf
					nextVert = (i2 - 1)*nProf
					for j = 1 to nProf - 1
						edge firstVert + j, nextVert + j + 1, -1, -1, 2
						k = k + 1
					next j
				next i
			!} Diagonals
		!} Edges
		!Polygons {
			for i = 1 to nTurn
				put (i - 1)*nProf + 1
			next i
			pgon nsp, 0, 0, get(nsp)
			for i = 1 to nTurn
				firstHorz = firstHorizontal + (i - 1)*nProf
				firstVert = firstVertical + (i - 1)*nProf
				i2 = i%nTurn + 1
				nextVert = firstVertical + (i2 - 1)*nProf
				firstDiag = firstDiagonal + (i - 1)*(nProf - 1)
				for j = 1 to nProf - 1
					si = faceStatus[j]
					pgon 3, 0, si,
						firstDiag + j, -(nextVert + j), -(firstHorz + j)
					pgon 3, 0, si,
						-(firstDiag + j), firstVert + j, firstHorz + j + 1
				next j
				j = nProf
				pgon 3, 0, 0,
					firstVert + j, -(nextVert + j), -(firstHorz + j)
			next i
		!} Polygons
		!Body {
			body -1
		!} Body
	endif
!} Nail

end

"Add a Vertex":
	xi = get(1)
	Ri = get(1)
	vert xi, Ri*sin(qi), Ri*cos(qi)
	nProf = nProf + 1
	if nsp then
		faceStatus[nProf] = get(1)
		horzStatus[nProf] = get(1)
		vertStatus[nProf] = get(1)
	endif
	k = k + 1
return

