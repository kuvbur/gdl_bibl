! const values for parameter: iBoardInPolyWallBOARD_PARALLEL_WINDOW      = 1BOARD_PARALLEL_WALLPOLYGON = 2EPS = 0.0001! iRevealType:REVEAL_EDGE				= 0REVEAL_NO				= 1REVEAL_POSITIVE			= 2REVEAL_NEGATIVE			= 3REVEAL_SLANTED			= 4REVEAL_SPLAYED			= 5REVEAL_HISTORIC			= 6REVEAL_DOUBLE			= 7REVEAL_DOUBLE_SPLAYED	= 8REVEAL_OUTSIDE_SPLAYED	= 9! iWindowShape:SHAPE_RECTANGULAR			= 0SHAPE_ARCHED				= 1SHAPE_ROUND					= 2SHAPE_EYEBROWS				= 3SHAPE_HALFCIRCLE			= 4 	! straight side is horizontalSHAPE_MULTISIDE				= 5SHAPE_OCTAGONAL				= 6SHAPE_HALFARCH				= 7SHAPE_PENTAGON				= 8SHAPE_QUARTERROUND			= 9SHAPE_HALFROUND				= 10 	! straight side is verticalSHAPE_TRAPEZOID				= 11SHAPE_TRIANGLE				= 12SHAPE_GOTHICARCH			= 13SHAPE_ELLIPSEARCH			= 14SHAPE_ROMBUS				= 15SHAPE_HORSESHOE				= 16SHAPE_OGEECENTERED			= 17SHAPE_SARACENIC				= 18SHAPE_T						= 19SHAPE_HALF_T_LEFT			= 20SHAPE_ARCHED_T				= 21SHAPE_ARCHED_HALF_T_LEFT	= 22SHAPE_PARALLELOGRAM			= 23SHAPE_ELLIPSE				= 24SHAPE_CORNER_TRIANGLE		= 25SHAPE_QUARTERROUND_NOFRAME	= 26SHAPE_HALF_T_RIGHT			= 27SHAPE_ARCHED_HALF_T_RIGHT	= 28! const values for parameter: iBoardInPolyWallBOARD_PARALLEL_WINDOW      = 1BOARD_PARALLEL_WALLPOLYGON = 2! ==============================================================================bTShapedOpening =  (iWindowShape = SHAPE_T |\					iWindowShape = SHAPE_HALF_T_LEFT |\					iWindowShape = SHAPE_HALF_T_RIGHT |\					iWindowShape = SHAPE_ARCHED_T |\					iWindowShape = SHAPE_ARCHED_HALF_T_LEFT |\					iWindowShape = SHAPE_ARCHED_HALF_T_RIGHT)bInclinedWall	= (abs(WALL_INCL) > EPS)curvedWall		= (abs(WIDO_ORIG_DIST) > EPS)wallIsLeft		= (SYMB_ROTANGLE > EPS) exor WIDO_REVEAL_SIDEsignWallIsLeft	= wallIsleft - not(wallIsleft)if bDoorWithSidelightSupport then	bHasAnyBoardOn = (	(gs_sidelight_left  & gs_sidelight_parapet_hgt_left > EPS  & gs_board_inside_sl_left) | \						(gs_sidelight_right & gs_sidelight_parapet_hgt_right > EPS & gs_board_inside_sl_right))else	bHasAnyBoardOn = (gs_board_inside)endif! ==============================================================================if SYMB_MIRRORED exor (SYMB_ROTANGLE > EPS) then	widoRightJamb	= WIDO_LEFT_JAMB	widoLeftJamb	= WIDO_RIGHT_JAMBelse	widoRightJamb	= WIDO_RIGHT_JAMB	widoLeftJamb	= WIDO_LEFT_JAMBendif! ==============================================================================! Restrictions for Window Shapes! ==============================================================================if iWindowShape = 1 then	! --- Arched Window Shape ---	widoLeftJamb	= widoRightJambendif! ==============================================================================! Calculations for Corner Window! ==============================================================================if bRightCornerFunction & abs(rightCornerAngle) > EPS then	rx = 1 / tan(rightCornerAngle / 2)	if rightCornerAngle > 180 then		rightCwDx = WIDO_FRAME_THICKNESS / tan(-rightCornerAngle / 2)	else		rightCwDx = 0	endif	rightCwDx2 = 0	if abs(WALL_THICKNESS - rightConnWallThk) > EPS then		rightCwDx2 = (WALL_THICKNESS - rightConnWallThk) / cos(rightCornerAngle - 90)	endif	bFitMode = (rightConnWallThk > WALL_THICKNESS + EPS)	gs_right_oversize = 0endifif bLeftCornerFunction & abs(leftCornerAngle) > EPS then	lx = 1 / tan(leftCornerAngle / 2)	if leftCornerAngle > 180 then		leftCwDx = WIDO_FRAME_THICKNESS / tan(-leftCornerAngle / 2)	else		leftCwDx = 0	endif	leftCwDx2 = 0	if abs(WALL_THICKNESS - leftConnWallThk) > EPS then		leftCwDx2 = (WALL_THICKNESS - leftConnWallThk) / cos(leftCornerAngle - 90)	endif	bFitMode = (leftConnWallThk > WALL_THICKNESS + EPS)	gs_left_oversize = 0endif! ==============================================================================! Calculations for Inclined Walls! ==============================================================================if bInclinedWall then	bFactor = SYMB_MIRRORED exor WIDO_REVEAL_SIDE exor wallIsLeft	incFactor = not(bFactor) - bFactor	incX = incFactor * tan(WALL_INCL)	incY = incFactor * (1 / cos(WALL_INCL))	bDir = SYMB_MIRRORED exor (SYMB_ROTANGLE > EPS)	iDir = not(bDir) - bDir	incH = cos(WALL_INCL)	incV = sin(WALL_INCL) * iDirelse	incX = 0	incY = 1	incH = 0	incV = 0endif! ==============================================================================! Calculations for Stack Window! ==============================================================================if gs_stack_left then	gs_board_ovhg_left	= gs_left_oversize	overSizeLeft		= gs_left_oversize	overSizeLeftOut		= gs_left_oversize	widoLeftJamb		= 0else	overSizeLeft		= 0	overSizeLeftOut		= -widoLeftJambendifif gs_stack_right then	gs_board_ovhg_right	= gs_right_oversize	overSizeRight		= gs_right_oversize	overSizeRightOut	= gs_right_oversize	widoRightJamb		= 0else	overSizeRight		= 0	overSizeRightOut	= -widoRightJambendif! ==============================================================================! Calculations for Wall Inset! ==============================================================================parapetInset = gs_parapet_wall_inset * gs_parapet_inset_thk! ==============================================================================! Board Nosing! ==============================================================================boardNosing = gs_board_nosing! ==============================================================================! Reveal Points Indexes! ==============================================================================idxFrameStartRevealLeft		= iRevealPointsIdx[3]idxFrameEndRevealLeft		= iRevealPointsIdx[4]idxBoardStartRevealLeft		= iRevealPointsIdx[5]idxBoardEndRevealLeft		= iRevealPointsIdx[6]idxBoardStartPlasterLeft	= iRevealPointsIdx[9]idxBoardEndPlasterLeft		= iRevealPointsIdx[10]idxFrameStartRevealRight	= iRevealPointsIdx[13]idxFrameEndRevealRight		= iRevealPointsIdx[14]idxBoardStartRevealRight	= iRevealPointsIdx[15]idxBoardEndRevealRight		= iRevealPointsIdx[16]idxBoardStartPlasterRight	= iRevealPointsIdx[19]idxBoardEndPlasterRight		= iRevealPointsIdx[20]! ==============================================================================! Calculations for Straight Walls! ==============================================================================maxBoardAngle = 0casingOffsetLeft = 0casingOffsetRight = 0if gs_trim_show_cover_in & GLOB_SCRIPT_TYPE = 2 then	casingOffsetLeft	= (bDrawInsideTrim * not(gs_trim_atframe_in) * gs_trim_thk_in * (gs_board_ovhg_left  < CasingInsLeftOutPoint))	casingOffsetRight	= (bDrawInsideTrim * not(gs_trim_atframe_in) * gs_trim_thk_in * (gs_board_ovhg_right < CasingInsRightOutPoint))endifif not(curvedWall) then	if GLOB_SCRIPT_TYPE = 2 | GLOB_SCRIPT_TYPE = 3 then		if vardim1(leftRevealPnts) >= idxBoardEndRevealLeft then			if bLeftCornerFunction then				bpx5 = leftRevealPnts[idxBoardEndRevealLeft][1]				bpy5 = leftRevealPnts[idxBoardEndRevealLeft][2]				bpx6 = bpx5 + boardNosing * lx				bpy6 = bpy5 + boardNosing			else				if bInclinedWall then					if gs_stack_left then						bpx5 = leftRevealPnts[idxBoardEndRevealLeft][1]						bpy5 = leftRevealPnts[idxBoardEndRevealLeft][2]						bpx6 = bpx5						bpy6 = bpy5 + boardNosing / incH					else						bpx5 = leftRevealPnts[idxBoardEndRevealLeft][1] - gs_board_ovhg_left * incH						bpy5 = leftRevealPnts[idxBoardEndRevealLeft][2] - gs_board_ovhg_left * incV						bpx6 = bpx5 - boardNosing * incV						bpy6 = bpy5 + boardNosing * incH						bpx5 = bpx5 - casingOffsetLeft * incV						bpy5 = bpy5 + casingOffsetLeft * incH					endif				else					bpx5 = leftRevealPnts[idxBoardEndRevealLeft][1] - not(gs_stack_left) * gs_board_ovhg_left					bpy5 = leftRevealPnts[idxBoardEndRevealLeft][2] + casingOffsetLeft					bpx6 = bpx5					bpy6 = bpy5 + boardNosing - casingOffsetLeft				endif			endif		endif		if vardim1(rightRevealPnts) >= idxBoardEndRevealRight then			if bRightCornerFunction then				bpx8 = rightRevealPnts[idxBoardEndRevealRight][1]				bpy8 = rightRevealPnts[idxBoardEndRevealRight][2]				bpx7 = bpx8 - boardNosing * rx				bpy7 = bpy8 + boardNosing			else				if bInclinedWall then					if gs_stack_right then						bpx8 = rightRevealPnts[idxBoardEndRevealRight][1]						bpy8 = rightRevealPnts[idxBoardEndRevealRight][2]						bpx7 = bpx8						bpy7 = bpy8 + boardNosing / incH					else						bpx8 = rightRevealPnts[idxBoardEndRevealRight][1] + gs_board_ovhg_right * incH						bpy8 = rightRevealPnts[idxBoardEndRevealRight][2] + gs_board_ovhg_right * incV						bpx7 = bpx8 - boardNosing * incV						bpy7 = bpy8 + boardNosing * incH						bpx8 = bpx8 - casingOffsetLeft * incV						bpy8 = bpy8 + casingOffsetLeft * incH					endif				else					bpx8 = rightRevealPnts[idxBoardEndRevealRight][1] + not(gs_stack_right) * gs_board_ovhg_right					bpy8 = rightRevealPnts[idxBoardEndRevealRight][2] + casingOffsetRight					bpx7 = bpx8					bpy7 = bpy8 + boardNosing - casingOffsetRight				endif			endif		endif	endif	if bHasAnyBoardOn then		if bLeftCornerFunction & (abs(WALL_THICKNESS - leftConnWallThk) > EPS) then			tempWallThkLeft = leftConnWallThk		else			tempWallThkLeft = WALL_THICKNESS		endif		if bRightCornerFunction & (abs(WALL_THICKNESS - rightConnWallThk) > EPS) then			tempWallThkRight = rightConnWallThk		else			tempWallThkRight = WALL_THICKNESS		endif		wallThk = min (WALL_THICKNESS, tempWallThkLeft, tempWallThkRight)		temp = wallThk - WIDO_SILL - WIDO_FRAME_THICKNESS + gs_board_nosing		if abs(temp) < EPS then			maxBoardAngle = 90		else			maxBoardAngle = atn(gs_board_thk / temp)		endif	endifendif! ==============================================================================! Calculations for Curved Walls! ==============================================================================if curvedWall & abs(radBoard) > EPS then	if gs_parapet_wall_inset & not(bDrawBoard) & not(bDrawInsideTrim) then gs_board_curved = 0	if GLOB_SCRIPT_TYPE = 2 | GLOB_SCRIPT_TYPE = 3 then		bArchSign = (WIDO_REVEAL_SIDE exor SYMB_ROTANGLE > EPS)		iArchSign = bArchSign - not(bArchSign)		! 1 / -1		if wallIsLeft then			alfaL = -atn((leftWidth)  / (WOD - WIDO_FRAME_THICKNESS))			alfaR =  atn((rightWidth) / (WOD - WIDO_FRAME_THICKNESS))		else			alfaL = -atn((leftWidth)  / WOD)			alfaR =  atn((rightWidth) / WOD)		endif		ArcLengthBoardToAngle	= 180 / radBoard / PI		alfaBoardLeftOvhg	= not(gs_stack_left)  * gs_board_ovhg_left  * ArcLengthBoardToAngle		alfaBoardRightOvhg	= not(gs_stack_right) * gs_board_ovhg_right * ArcLengthBoardToAngle		if gs_stack_left then			bpx5 = leftRevealPnts[idxBoardEndRevealLeft][1] - casingOffsetLeft * sin(alfaL)			bpy5 = leftRevealPnts[idxBoardEndRevealLeft][2] + casingOffsetLeft			bpx6 = bpx5 - boardNosing * sin(alfaL) + casingOffsetLeft * sin(alfaL)			bpy6 = bpy5 + boardNosing * cos(alfaL) - casingOffsetLeft		else			if bParalellInCurvedWalls then				bpx5 = leftRevealPnts[idxBoardEndRevealLeft][1] - gs_board_ovhg_left				bpy5 = -signWallIsLeft * sqr(radBoard^2 - bpx5^2) + WOD + casingOffsetLeft				bpx6 = bpx5				bpy6 = -signWallIsLeft * sqr((radBoard - signWallIsLeft * boardNosing)^2 - bpx6^2) + WOD			else				x = leftRevealPnts[idxBoardEndRevealLeft][1] - casingOffsetLeft * sin(alfaL)				y = leftRevealPnts[idxBoardEndRevealLeft][2] + casingOffsetLeft				alpha = -alfaBoardLeftOvhg				gosub 9000	! Rotate 2D points around curved wall's center				bpx5 = x				bpy5 = y				alpha = abs(atn(bpx5 / (bpy5 - WOD)))				bpx6 = bpx5 + boardNosing * sin(alpha) * signWallIsLeft + casingOffsetLeft * sin(alfaL)				bpy6 = bpy5 + boardNosing * cos(alpha) - casingOffsetLeft			endif		endif		if gs_stack_right then			bpx8 = rightRevealPnts[idxBoardEndRevealRight][1] - casingOffsetRight * sin(alfaR)			bpy8 = rightRevealPnts[idxBoardEndRevealRight][2] + casingOffsetRight			bpx7 = bpx8 - boardNosing * sin(alfaR) + casingOffsetRight * sin(alfaR)			bpy7 = bpy8 + boardNosing * cos(alfaR) - casingOffsetRight		else			if bParalellInCurvedWalls then				bpx8 = rightRevealPnts[idxBoardEndRevealRight][1] + gs_board_ovhg_right				bpy8 = -signWallIsLeft * sqr(radBoard^2 - bpx8^2) + WOD + casingOffsetRight				bpx7 = bpx8				bpy7 = -signWallIsLeft * sqr((radBoard - signWallIsLeft * boardNosing)^2 - bpx7^2) + WOD			else				x = rightRevealPnts[idxBoardEndRevealRight][1] - casingOffsetRight * sin(alfaR)				y = rightRevealPnts[idxBoardEndRevealRight][2] + casingOffsetRight				alpha = alfaBoardRightOvhg				gosub 9000	! Rotate 2D points around curved wall's center				bpx8 = x				bpy8 = y				alpha = abs(atn(bpx8 / (bpy8 - WOD)))				bpx7 = bpx8 - boardNosing * sin(alpha) * signWallIsLeft + casingOffsetRight * sin(alfaR)				bpy7 = bpy8 + boardNosing * cos(alpha) - casingOffsetRight			endif		endif	endif	if bHasAnyBoardOn then		! --- Check Board angle ---		temp = max(abs(bpy6 + WOD) - WIDO_FRAME_THICKNESS, abs(bpy7 + WOD) - WIDO_FRAME_THICKNESS)		maxBoardLength = max(abs(radBoard - iArchSign * gs_board_nosing - abs(WOD)) - WIDO_FRAME_THICKNESS, temp)		if abs(maxBoardLength) < EPS then			maxBoardAngle = 90		else			asnMaxBoardAngle = (gs_board_thk - 0.001) / maxBoardLength			if asnMaxBoardAngle <= 1.0 & asnMaxBoardAngle >= -1.0 then				maxBoardAngle = asn((gs_board_thk - 0.001) / maxBoardLength)			else				maxBoardAngle = 0			endif		endif	endifendifgoto 1! ==============================================================================! Rotate 2D points around curved wall's center! ------------------------------------------------------------------------------! Input variables:!	x,y:				2D point!	WOD:				"wido orig dist" in the wallhole coordinate system!	alpha:				rotation angle! Returned variables:!	x,y:				rotated 2D point! ==============================================================================9000:	xo = x	yo = y - WOD	x = xo * cos(signWallIsLeft * alpha) - yo * sin(signWallIsLeft * alpha)	y = xo * sin(signWallIsLeft * alpha) + yo * cos(signWallIsLeft * alpha) + WODreturn! ==============================================================================! Generate Board Polygon - in Polygonal Walls! ------------------------------------------------------------------------------! Input variables:!	ch:!	leftRevealPnts, rightRevealPnts:!	reveal point indices:!	bPolyFor3D:!	AC_WallContourPolygon:!	boardNosing:!	gs_stack_left:!	gs_stack_right:! ==============================================================================2000:	hotspotLeftX	= 0	hotspotLeftY	= 0	hotspotRightX	= 0	hotspotRightY	= 0	preparefunction ch, "CreateContainer", "mySourceContainer", ""	preparefunction ch, "CreateContainer", "myDestinationContainer", ""	preparefunction ch, "SetSourceContainer",	 	"mySourceContainer", ""	preparefunction ch, "SetDestinationContainer",	"myDestinationContainer", ""	! Avoid generating invalid polygons	if WALL_THICKNESS - WIDO_SILL - WIDO_FRAME_THICKNESS < EPS then		return	endif! Store original wallhole polygon ----------------------------------------------	dim vertArr1[][3]	defaultInhEdgeInfo = -1	dim inhEdgeInfos1[]	put leftRevealPnts[idxFrameStartRevealLeft][1],	leftRevealPnts[idxFrameStartRevealLeft][2],	not(gs_stack_left)	put leftRevealPnts[idxFrameEndRevealLeft][1],	leftRevealPnts[idxFrameEndRevealLeft][2]	lastBoardPointX = leftRevealPnts[idxFrameEndRevealLeft][1]	lastBoardPointY = leftRevealPnts[idxFrameEndRevealLeft][2]	for i=idxBoardStartRevealLeft to idxBoardEndRevealLeft		if leftRevealPnts[i][2] >= WIDO_FRAME_THICKNESS then			distFromLast = abs((leftRevealPnts[i][1] - lastBoardPointX)^2 + (leftRevealPnts[i][2] - lastBoardPointY)^2)			if distFromLast > EPS then				put not(gs_stack_left)	! previous point status				put leftRevealPnts[i][1], leftRevealPnts[i][2]				lastBoardPointX = leftRevealPnts[i][1]				lastBoardPointY = leftRevealPnts[i][2]				bHasAnyBoardPoint = 1			endif		endif	next i	put -1	! last pont status	bHasAnyBoardPoint = 0	for i = idxBoardEndRevealRight to idxBoardStartRevealRight step -1		if rightRevealPnts[i][2] >= WIDO_FRAME_THICKNESS then			distFromLast = abs((rightRevealPnts[i][1] - lastBoardPointX)^2 + (rightRevealPnts[i][2] - lastBoardPointY)^2)			if not(bHasAnyBoardPoint) | distFromLast > EPS then				put rightRevealPnts[i][1], rightRevealPnts[i][2], not(gs_stack_right)				lastBoardPointX = rightRevealPnts[i][1]				lastBoardPointY = rightRevealPnts[i][2]				bHasAnyBoardPoint = 1			endif		endif	next i	if idxBoardStartRevealRight <> idxFrameEndRevealRight then		put rightRevealPnts[idxFrameEndRevealRight][1],	rightRevealPnts[idxFrameEndRevealRight][2],	not(gs_stack_right)	endif	put rightRevealPnts[idxFrameStartRevealRight][1],rightRevealPnts[idxFrameStartRevealRight][2],	0	nVertices1 = nsp/3	for i=1 to nVertices1		px = get(1)		py = get(1)		ps = get(1)		vertarr1[i][1]	 = px		vertarr1[i][2]	 = py		vertarr1[i][3]	 = 0		if bPolyFor3D then			if ps < 0 then				inhEdgeInfos1[i] = ps			else				inhEdgeInfos1[i] = 2 * ps			endif		else			inhEdgeInfos1[i] = -(ps < 0)	! Mark wallhole edges (0 / -1)		endif	next i	nContours1 = 1	dim contArr1[]	contArr1[1] = nVertices1 + 1	if nVertices1 >= 2 then		preparefunction ch, "Store", "poly1", nVertices1, nContours1, vertArr1, contArr1, defaultInhEdgeInfo, inhEdgeInfos1	endif	prevSourceContainer	= ""	lastDestContainer	= "mySourceContainer"	preparefunction ch, "SetDestinationContainer", lastDestContainer, ""! Offset board side edge -------------------------------------------------------	dim dstPolyIDArr[]	numPoly = callfunction (ch, "GetDestinationPolygons", "", dstPolyIDArr)	dim edgeIds[]	edgeIds[numPoly] = 0	for i=1 to numPoly		dim inhEdgeInfos[]		numEdges = callfunction(ch, "GetInhEdgeInfos", dstPolyIDArr[i], inhEdgeInfos)		for j=1 to numEdges			if inhEdgeInfos[j] = -1 then edgeIds[i] = j		next j	next i	if prevSourceContainer <> "" then		preparefunction ch, "DeleteContainer",		prevSourceContainer, ""	endif	preparefunction ch, "SetSourceContainer",		lastDestContainer, ""	prevSourceContainer	= lastDestContainer	lastDestContainer	= "myDestContainer2"	preparefunction ch, "CreateContainer",			lastDestContainer, ""	preparefunction ch, "SetDestinationContainer",	lastDestContainer, ""	dim srcPolyIDArr[]	numPoly = callfunction (ch, "GetSourcePolygons", "", srcPolyIDArr)	dim tempResPolyIDArr[]	for i=1 to numPoly		preparefunction ch, "OffsetParams", "", edgeIds[i], 2.00		tempNumPoly = callfunction (ch, "OffsetEdge", srcPolyIDArr[i], tempResPolyIDArr)	next i!!!dim resPolyIDArr[]!!!numPoly = callfunction (ch, "GetDestinationPolygons", "", resPolyIDArr)!!!!!!for i = 1 to numPoly!!!	polygonID = resPolyIDArr[i]!!!	gosub 1000	! Get GDL Polygon!!!!!!	ccc=0!!!	for j=1 to nsp/3!!!		xx=get(1)!!!		yy=get(1)!!!		ss=get(1)!!!		ccc=ccc+0.003!!!		circle2 xx,yy,ccc!!!		text2 xx,yy,j!!!	next j!!!next i!!!end! Store wall contour polygon in wallhole coordinate system ---------------------	if prevSourceContainer <> "" then		preparefunction ch, "DeleteContainer",		prevSourceContainer, ""	endif	preparefunction ch, "SetSourceContainer",		lastDestContainer, ""	prevSourceContainer	= lastDestContainer	lastDestContainer	= "myDestContainer3"	preparefunction ch, "CreateContainer",			lastDestContainer, ""	preparefunction ch, "SetDestinationContainer",	lastDestContainer, ""	nVertices2 = vardim1(AC_WallContourPolygon)	dim vertArr2[][3]	dim srcPolyIDArr[]	numPoly = callfunction (ch, "GetSourcePolygons", "", srcPolyIDArr)	defaultInhEdgeInfo = 0	dim inhEdgeInfos2[]!!!ccc=0	for i=1 to nVertices2		vertarr2[i][1] = AC_WallContourPolygon[i][1]		if WIDO_REVEAL_SIDE then			vertarr2[i][2] = AC_WallContourPolygon[i][2] + WIDO_FRAME_THICKNESS			vertarr2[i][3] = AC_WallContourPolygon[i][3]		else			vertarr2[i][2] = -AC_WallContourPolygon[i][2]			vertarr2[i][3] = -AC_WallContourPolygon[i][3]		endif		inhEdgeInfos2[i] = 1!!!ccc=ccc+0.003!!!circle2 vertarr2[i][1], vertarr2[i][2], ccc!!!text2 vertarr2[i][1], vertarr2[i][2], i	next i	nContours2 = 1	dim contArr2[]	contArr2[1] = nVertices2 + 1	preparefunction ch, "Store", "wallContourPoly", nVertices2, nContours2, vertArr2, contArr2, defaultInhEdgeInfo, inhEdgeInfos2! Substract polygons -----------------------------------------------------------	dim tempResPolyIDArr[]	for i = 1 to numPoly		tempNumPoly = callfunction (ch, "wallContourPoly - " + srcPolyIDArr[i], "", tempResPolyIDArr)	next i	savedNumPoly = tempNumPoly! Parallel to Polygon Wall case ------------------------------------------------!!!	if not(bBoardInPolyWall) then! Intersect polygon wall contour and wallhole polygons -------------------------		dim tempResPolyIDArr[]		for i = 1 to numPoly			tempNumPoly = callfunction (ch, "wallContourPoly / " + srcPolyIDArr[i], "", tempResPolyIDArr)		next i! Choose left and right reference points ---------------------------------------		leftPx	= 0		leftPy	= 0		rightPx	= 0		rightPy	= 0		for i = 1 to tempNumPoly			polygonID = tempResPolyIDArr[i]			dim resVertices[]			numVertices = callfunction(ch, "GetVertices", polygonID, resVertices)			numVertices = numVertices / 3			dim contArr[]			numContours = callfunction(ch, "GetContourEnds", polygonID, contArr)			dim inhEdgeInfos[]			numEdges = callfunction(ch, "GetInhEdgeInfos", polygonID, inhEdgeInfos)			for contIndex = 1 to numContours				if contIndex = 1 then					begIdx = 0				else					begIdx = contArr[contIndex] - 1				endif				if contIndex = numContours then					endIdx = numVertices - 1				else					endIdx = contArr[contIndex + 1] - 2				endif!index = endIdx * 3!lastVertX	= resVertices[index + 1]!lastVertY	= resVertices[index + 2]!lastVertA	= resVertices[index + 3]				edgeInfo	= inhEdgeInfos[endIdx + 1]				for vertIndex = begIdx to endIdx					index = vertIndex * 3					actVertX = resVertices[index + 1]					actVertY = resVertices[index + 2]					actVertA = resVertices[index + 3]!text2	(lastVertX + actVertX) / 2,!		(lastVertY + actVertY) / 2,!		edgeInfo					if edgeInfo <> inhEdgeInfos[vertIndex + 1] then						if actVertX < 0 then							if actVertY > leftPy then								leftPx = actVertX								leftPy = actVertY							endif						else							if actVertY > rightPy then								rightPx = actVertX								rightPy = actVertY							endif						endif!circle2 actVertX, actVertY, 0.05					endif!lastVertX	= actVertX!lastVertY	= actVertY!lastVertA	= actVertA					edgeInfo	= inhEdgeInfos[vertIndex + 1]				next vertIndex			next contIndex		next i		! If any of the reference points missing, switch back to "Parallel to Window" mode		if abs(leftPx) < EPS | leftPy < WIDO_FRAME_THICKNESS + EPS | abs(rightPx) < EPS | rightPy < WIDO_FRAME_THICKNESS + EPS then			bBoardInPolyWall = 1		endif!!!	endif	! bBoardInPolyWall!	if not(bBoardInPolyWall) then!		circle2 leftPx,leftPy, 0.10!		circle2 rightPx,rightPy, 0.10!	endif! Store Board polygon ----------------------------------------------------------	if prevSourceContainer <> "" then		preparefunction ch, "DeleteContainer",		prevSourceContainer, ""	endif	preparefunction ch, "SetSourceContainer",		lastDestContainer, ""	prevSourceContainer	= lastDestContainer	lastDestContainer	= "myDestContainer5"	preparefunction ch, "CreateContainer",			lastDestContainer, ""	preparefunction ch, "SetDestinationContainer",	lastDestContainer, ""	dim srcPolyIDArr[]	numPoly = callfunction (ch, "GetSourcePolygons", "", srcPolyIDArr)	numPoly = savedNumPoly	boardNosingY = max(leftRevealPnts[idxBoardEndRevealLeft][2], rightRevealPnts[idxBoardEndRevealRight][2])	if bBoardInPolyWall then		boardNosingY = max(boardNosingY, max(leftPy, rightPy))	endif	boardNosingY = boardNosingY + boardNosing	boardOvhgLeft	= max(gs_board_ovhg_left,	EPS)	boardOvhgRight	= max(gs_board_ovhg_right,	EPS)	if not(bBoardInPolyWall) then		if abs(leftPx - rightPx) > EPS then			boardDirAngle = atn((leftPy - rightPy) / (leftPx - rightPx))		else			bBoardInPolyWall = 0		endif	endif	if sidelightCutLeft then		put	sidelightCutPosLeft, boardNosingY,	2,			sidelightCutPosLeft, 0,				2		hotspotLeftX = sidelightCutPosLeft		hotspotLeftY = boardNosingY	else		if bBoardInPolyWall then			if boardNosing > EPS then				hotspotLeftX = leftRevealPnts[idxBoardEndRevealLeft][1] - not(gs_stack_left) * boardOvhgLeft				hotspotLeftY = boardNosingY				put hotspotLeftX, hotspotLeftY, 2 * not(gs_stack_left)			endif			for i=idxBoardEndRevealLeft to idxBoardStartRevealLeft step -1				put leftRevealPnts[i][1] - not(gs_stack_left) * boardOvhgLeft, leftRevealPnts[i][2] - (not(bPolyFor3D) & i <> idxBoardEndRevealLeft) * EPS,					2 * ((not(gs_stack_left) & (bPolyFor3D | i <> idxBoardStartRevealLeft)) | (bPolyFor3D & i = idxBoardStartRevealLeft))			next i		else			if boardNosing > EPS then				if gs_stack_left then					put leftPx, leftPy + boardNosing / cos(boardDirAngle), 0				else					hotspotLeftX = leftPx - boardNosing * sin(boardDirAngle) - boardOvhgLeft * cos(boardDirAngle)					hotspotLeftY = leftPy + boardNosing * cos(boardDirAngle) - boardOvhgLeft * sin(boardDirAngle)					put hotspotLeftX, hotspotLeftY, 2					put hotspotLeftX + 2 * boardOvhgLeft * sin(boardDirAngle), hotspotLeftY - 2 * boardOvhgLeft * cos(boardDirAngle), 2				endif			endif			put leftPx, leftPy, 2 * not(gs_stack_left)			for i=idxBoardEndRevealLeft to idxBoardStartRevealLeft step -1				if leftRevealPnts[i][2] < leftPy - EPS then					put leftRevealPnts[i][1] - not(gs_stack_left) * EPS, leftRevealPnts[i][2] - (not(bPolyFor3D) & i <> idxBoardEndRevealLeft) * EPS,						2 * ((not(gs_stack_left) & (bPolyFor3D | i <> idxBoardStartRevealLeft)) | (bPolyFor3D & i = idxBoardStartRevealLeft))				endif			next i		endif	endif	if abs(bBoardNnosUsa) > EPS then	! Board Negative Nosing by USA Framesill		put  leftRevealPnts[idxBoardStartRevealLeft][1]  + frameWidthLeft,	 leftRevealPnts[idxBoardStartRevealLeft][2],				2,			 leftRevealPnts[idxBoardStartRevealLeft][1]  + frameWidthLeft,	 leftRevealPnts[idxBoardStartRevealLeft][2]  - bBoardNnosUsa,	2,			rightRevealPnts[idxBoardStartRevealRight][1] - frameWidthRight, rightRevealPnts[idxBoardStartRevealRight][2] - bBoardNnosUsa,	2,			rightRevealPnts[idxBoardStartRevealRight][1] - frameWidthRight,	rightRevealPnts[idxBoardStartRevealRight][2],				2	endif	if sidelightCutRight then		put	sidelightCutPosRight, 0,			2,			sidelightCutPosRight, boardNosingY,	2		hotspotRightX = sidelightCutPosRight		hotspotRightY = boardNosingY	else		if bBoardInPolyWall then			for i=idxBoardStartRevealRight to idxBoardEndRevealRight				put rightRevealPnts[i][1] + not(gs_stack_right) * boardOvhgRight, rightRevealPnts[i][2] - (not(bPolyFor3D) & i <> idxBoardEndRevealRight) * EPS,					2 * ((not(gs_stack_right)) | (i = idxBoardEndRevealRight & boardNosing < EPS))			next i			if boardNosing > EPS then				hotspotRightX = rightRevealPnts[idxBoardEndRevealRight][1] + not(gs_stack_right) * boardOvhgRight				hotspotRightY = boardNosingY				put hotspotRightX, hotspotRightY, 2			endif		else			for i=idxBoardStartRevealRight to idxBoardEndRevealRight				if rightRevealPnts[i][2] < rightPy - EPS then					put rightRevealPnts[i][1] + not(gs_stack_right) * EPS, rightRevealPnts[i][2] - (not(bPolyFor3D) & i <> idxBoardEndRevealRight) * EPS,						2 * ((not(gs_stack_right)) | (i = idxBoardEndRevealRight & boardNosing < EPS))				endif			next i			put rightPx, rightPy, 2 * not(gs_stack_right)			if boardNosing > EPS then				if gs_stack_right then					put rightPx, rightPy + boardNosing / cos(boardDirAngle), 2				else					hotspotRightX = rightPx - boardNosing * sin(boardDirAngle) + boardOvhgRight * cos(boardDirAngle)					hotspotRightY = rightPy + boardNosing * cos(boardDirAngle) + boardOvhgRight * sin(boardDirAngle)					put hotspotRightX + 2 * boardOvhgRight * sin(boardDirAngle), hotspotRightY- 2 * boardOvhgRight * cos(boardDirAngle), 2					put hotspotRightX, hotspotRightY, 2				endif			endif		endif	endif	dim vertArrBoard[][3]	dim inhEdgeInfosBoard[]	defaultInhEdgeInfo = 0	for i=1 to nsp/3		px = get(1)		py = get(1)		ps = round_int (get(1))		vertArrBoard[i][1]	= px		vertArrBoard[i][2]	= py		vertArrBoard[i][3]	= 0		inhEdgeInfosBoard[i]= ps	next i	nVerticesBoard = vardim1(vertArrBoard)	nContoursBoard = 1	dim contArrBoard[]	contArrBoard[1] = nVerticesBoard + 1	if nVertices1 >= 2 then		preparefunction ch, "Store", "boardPoly", nVerticesBoard, nContoursBoard, vertArrBoard, contArrBoard, defaultInhEdgeInfo, inhEdgeInfosBoard	endif!! Regularize polygon(s) --------------------------------------------------------!!	dim srcPolyIDArr[]!	numPoly = callfunction (ch, "GetSourcePolygons", "", srcPolyIDArr)!!	dim tempResPolyIDArr[]!	for i=1 to numPoly!		tempNumPoly = callfunction (ch, "Regularize", srcPolyIDArr[i], tempResPolyIDArr)!	next i!!	if prevSourceContainer <> "" then!		preparefunction ch, "DeleteContainer",		prevSourceContainer, ""!	endif!	preparefunction ch, "SetSourceContainer",		lastDestContainer, ""!	prevSourceContainer	= lastDestContainer!	lastDestContainer	= "myDestContainer5"!	preparefunction ch, "CreateContainer",			lastDestContainer, ""!	preparefunction ch, "SetDestinationContainer",	lastDestContainer, ""! Substract polygons -----------------------------------------------------------	dim operandPolygonNames[]		operandPolygonNames[1] = "boardPoly"	numOperandPolygonNames = 1	containerIdx = 10	while numPoly > 0 do		for i = 2 to numPoly			tempNumPoly = callfunction (ch, "CopyPolygon", srcPolyIDArr[i], tempResPolyIDArr)		next i		lastNumPoly = numPoly - 1		for i=1 to numOperandPolygonNames			tempNumPoly = callfunction (ch, operandPolygonNames[i] + " - " + srcPolyIDArr[1], "", tempResPolyIDArr)		next i		numResPoly = tempNumPoly - lastNumPoly + 1		dim resPolyIDArr[]		tempNumPoly = callfunction (ch, "GetDestinationPolygons", "", resPolyIDArr)		numOperandPolygonNames = tempNumPoly - lastNumPoly		for i=1 to numOperandPolygonNames			operandPolygonNames[i] = resPolyIDArr[lastNumPoly + i]		next i		numPoly = numPoly - 1		if numPoly > 0 then			if prevSourceContainer <> "" then				preparefunction ch, "DeleteContainer",		prevSourceContainer, ""			endif			preparefunction ch, "SetSourceContainer",		lastDestContainer, ""			prevSourceContainer	= lastDestContainer			lastDestContainer	= "myDestContainer" + str(containerIdx, 1, 0)			preparefunction ch, "CreateContainer",			lastDestContainer, ""			preparefunction ch, "SetDestinationContainer",	lastDestContainer, ""			containerIdx = containerIdx + 1		endif	endwhilereturn1: