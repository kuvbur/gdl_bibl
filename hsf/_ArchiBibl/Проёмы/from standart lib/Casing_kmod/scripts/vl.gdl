
! Contact person: <NJ>

! ==============================================================================
! This macro draws the Casing
! ------------------------------------------------------------------------------
! Input parameters:
!	A:						Window nominal width (length)
!	B:						Window nominal height (length)
!	gs_IsCurved:			Does the window follow the curvature of the wall? (0 / 1)
!	isWindow:				Is the macro applied for a window or for a door?
!	iWindowShape:			Shape of the window (integer)
!								0 = rectangular (default)
!								1 = arched
!							Note: only the rectangular shape can be a Corner Window
! Corner Function --------------------------------------------------------------
!	bLeftCornerFunction:		Turn macro in Corner Window mode at the left side (0 / 1)
!	leftCornerAngle:		Angle between connected walls in case of Corner Window (angle)
!	leftConnWallThk:		Thickness of the connected wall in case of Corner Window (length)
!	bRightCornerFunction:	Turn macro in Corner Window mode at the right side (0 / 1)
!	rightCornerAngle:		Angle between connected walls in case of Corner Window (angle)
!	rightConnWallThk:		Thickness of the connected wall in case of Corner Window (length)
! Casing -----------------------------------------------------------------------
!	gs_trim_width_in:		Width of inside Trim. (length)
!	gs_trim_width_out:		Width of outside Trim. (length)
!	gs_trim_offs_in:		Offset of Casing inside. (length)
!	gs_trim_offs_out:		Offset of Casing outside. (length)
!	gs_trim_thk_in:			Thickness of inside Trim. (length)
!	gs_trim_thk_out:		Thickness of outside Trim. (length)
!	gs_tw_left_in:			Width of inside casing on the left (length)
!	gs_tw_right_in:			Width of inside casing on the right (length)
!	gs_tw_left_out:			Width of outside casing on the left (length)
!	gs_tw_right_out:		Width of outside casing on the right (length)
! Ganging ----------------------------------------------------------------------
!	gs_stack_left:			Align to door/window on left side (0 / 1)
!	gs_stack_right:			Align to door/window on right side (0 / 1)
!	gs_stack_top:			Align to door/window on upper side (0 / 1)
!	gs_stack_bottom:		Align to door/window on bottom side (0 / 1)
!	--- String Tables ---
!
! Related Global Variables:
!	GLOB_SCRIPT_TYPE
!	GLOB_CONTEXT
!	WALL_THICKNESS
!	WALL_INCL
!	WIDO_FRAME_THICKNESS
!	WIDO_SILL
!	WIDO_ORIG_DIST
!	WIDO_REVEAL_SIDE
!	SYMB_MIRRORED
!	SYMB_ROTANGLE
! ==============================================================================

if gs_sectgar then
	lock "gs_trim_inside"
	parameters gs_trim_inside = 0
else
	if iRevealType = REVEAL_DOUBLE_SPLAYED | iRevealType = REVEAL_OUTSIDE_SPLAYED then
		lock "gs_trim_outside"
		parameters gs_trim_outside = 0
	endif
endif


! ==============================================================================
! SWE Casing Types
! ==============================================================================

dim sCasingInTypeValueMask[]
dim iCasingInTypeValueMask[]

i=1
if bittest( gs_CasingInTypeEnable, 0) then 				! Rectangular
	sCasingInTypeValueMask[i] = stCasingType[1]
	iCasingInTypeValueMask[i] = 1
	i = i + 1
endif
if bittest( gs_CasingInTypeEnable, 1) then 				! SWE Traditional
	sCasingInTypeValueMask[i] = stCasingType[2]
	iCasingInTypeValueMask[i] = 2
	i = i + 1
endif

if i > 1 then
	values "gs_trimtype_in"		sCasingInTypeValueMask
	values "gs_trimtype_in_int"	iCasingInTypeValueMask
endif


dim sCasingOutTypeValueMask[]
dim iCasingOutTypeValueMask[]

i=1
if bittest( gs_CasingOutTypeEnable, 0) then 				! Rectangular
	sCasingOutTypeValueMask[i] = stCasingType[1]
	iCasingOutTypeValueMask[i] = 1
	i = i + 1
endif
if bittest( gs_CasingOutTypeEnable, 1) then 				! SWE Traditional
	sCasingOutTypeValueMask[i] = stCasingType[2]
	iCasingOutTypeValueMask[i] = 2
	i = i + 1
endif
if bittest( gs_CasingOutTypeEnable, 2) then 				! Complex
	sCasingOutTypeValueMask[i] = stCasingType[3]
	iCasingOutTypeValueMask[i] = 3
	i = i + 1
endif

if i > 1 then
	values "gs_trimtype_out"	 sCasingOutTypeValueMask
	values "gs_trimtype_out_int" iCasingOutTypeValueMask
endif


if GLOB_MODPAR_NAME = "gs_trimtype_in" then
	gs_trimtype_in_int = CASING_NORMAL
	if gs_trimtype_in = stCasingType[2] then gs_trimtype_in_int = CASING_OVERHANG
	parameters gs_trimtype_in_int = gs_trimtype_in_int
else
	gs_trimtype_in = stCasingType[min(2, max(1,gs_trimtype_in_int))]
	parameters gs_trimtype_in = gs_trimtype_in
endif

if	GLOB_MODPAR_NAME = "gs_trimtype_out" then
	gs_trimtype_out_int = CASING_NORMAL
	if gs_trimtype_out = stCasingType[2] then gs_trimtype_out_int = CASING_OVERHANG
	if gs_trimtype_out = stCasingType[3] then gs_trimtype_out_int = CASING_COMPLEX
	parameters gs_trimtype_out_int = gs_trimtype_out_int
else
	gs_trimtype_out = stCasingType[min(2, max(1,gs_trimtype_out_int))]
	parameters gs_trimtype_out = gs_trimtype_out
endif

if gs_CasingInTypeEnable = 0 | gs_CasingInTypeEnable = 1 then
	hideparameter "gs_trimtype_in", "gs_trimtype_in_int"
endif

if gs_CasingOutTypeEnable = 0 | gs_CasingOutTypeEnable = 1 then
	hideparameter "gs_trimtype_out", "gs_trimtype_out_int"
endif


! ==============================================================================
! Casing parameter handling in case of pocket door or curved wall
! ==============================================================================

if gs_trim_outside & ((_bPocketDoor & (gs_frame_wthk | (iRevealType = REVEAL_EDGE))) | curvedWall) then
	lock "gs_trim_show_cover_out"
endif

if gs_trim_inside & ((_bPocketDoor & gs_frame_wthk) | curvedWall) then
	lock "gs_trim_show_cover_in"
endif


! ==============================================================================
! Simple with Overhang casing parameter handling
! ==============================================================================

if _bEnableOutsideCasingOverhang then
	if gs_trim_outside & (gs_trimtype_out_int = CASING_OVERHANG) then
		lock "gs_trim_show_cover_out"
	endif
endif

if _bEnableInsideCasingOverhang then
	if gs_trim_inside & (gs_trimtype_in_int = CASING_OVERHANG) then
		lock "gs_trim_show_cover_in"
	endif
endif


! ==============================================================================
! Complex casing parameter handling
! ==============================================================================

if _bEnableOutsideCasingComplex then	! Complex is enabled in outside
	values{2} "iCasingHeadTypeOut"	CASING_HEAD_RECT, stCasingHeadType[1],
									CASING_HEAD_DECORATIVE_1, stCasingHeadType[2],
									CASING_HEAD_DECORATIVE_2, stCasingHeadType[3],
									CASING_HEAD_DECORATIVE_3, stCasingHeadType[4]

	values{2} "iArchitraveCapitalType"	ARCH_CAPITAL_SQUARE_ONSIDE,		stArchitraveCapitalType[1],
										ARCH_CAPITAL_SQUARE_NEXTSIDE,	stArchitraveCapitalType[2],
										ARCH_CAPITAL_DECOR_ONSIDE,		stArchitraveCapitalType[3],
										ARCH_CAPITAL_DECOR_NEXTSIDE,	stArchitraveCapitalType[4]

	if gs_trim_outside & (gs_trimtype_out_int = CASING_COMPLEX) then
		if not(bArchitraveCapital) then
			lock "iArchitraveCapitalType", "architraveCapitalWidth"
		endif
		lock "gs_trim_show_cover_out"
	else
		lock "iCasingHeadTypeOut", "bArchitraveCapital", "iArchitraveCapitalType", "architraveCapitalWidth"
	endif
endif

! ==============================================================================

if gs_trim_inside then
	if gs_wt_m = 1 then
		if gs_trim_atframe_in 	= 0 then values "gs_trim_offs_in"	range [0, gs_trim_width_in]
	else
		if gs_trim_atframe_in 	= 0 then values "gs_trim_offs_in"	range [0, )
	endif
	values "gs_trim_thk_in"		range [0,)
	values "gs_trim_width_in"	range [0,)
endif
if gs_trim_outside then
	if gs_trim_atframe_out 	= 0 & not(bCasingTolerance) then values "gs_trim_offs_out"	range [0, gs_trim_width_out]
	if gs_trim_atframe_out 	= 0 & bCasingTolerance then values "gs_trim_offs_out"	range [0, )
	values "gs_trim_thk_out"	range [0,)
	values "gs_trim_width_out"	range [0,)
endif

if gs_trim_inside then
	values "gs_tw_left_in"		range [gs_trim_width_in,)
	values "gs_tw_right_in"		range [gs_trim_width_in,)
	values "gs_tw_top_in"		range [gs_trim_width_in,)
	if isWindow then
		values "gs_tw_bottom_in"	range [gs_trim_width_in,)
	else
		if bTShapedOpening then
			values "gs_tw_bottom_in"	range [gs_trim_width_in,)
		endif
	endif
endif
if gs_trim_outside then
	values "gs_tw_left_out"		range [gs_trim_width_out,)
	values "gs_tw_right_out"	range [gs_trim_width_out,)
	values "gs_tw_top_out"		range [gs_trim_width_out,)
	if isWindow then
		values "gs_tw_bottom_out"	range [gs_trim_width_out,)
	else
		if bTShapedOpening then
			values "gs_tw_bottom_out"	range [gs_trim_width_out,)
		endif
	endif
endif

if iWindowShape = SHAPE_ARCHED | iWindowShape = SHAPE_ELLIPSEARCH then
	if gs_trim_inside then
		parameters gs_tw_left_in	= gs_tw_right_in
		parameters gs_tw_top_in		= gs_tw_right_in
	endif
	if gs_trim_outside then
		parameters gs_tw_left_out	= gs_tw_right_out
		parameters gs_tw_top_out	= gs_tw_right_out
	endif
endif

values "gs_trim_fill_in"	filltypes_mask 1
values "gs_trim_fill_out"	filltypes_mask 1


! ==============================================================================
! Trim parameter logic
! ==============================================================================

if (bInsideCasingNotAvailableByReveal |\
	bInsideCasingNotAvailableByWallType |\
	bInsideCasingNotAvailableByFrameStyle) then
	lock "gs_trim_inside"
endif
if (bOutsideCasingNotAvailableByReveal |\
	bOutsideCasingNotAvailableByFrameStyle) then
	lock "gs_trim_outside"
endif

if _bEnableSwitchableInCasCover then
	if gs_trim_inside & not(gs_trim_show_cover_in) then
		hideparameter "gs_trim_inside_uniform"
		lock "gs_trim_inside_uniform"
	endif
endif

if _bEnableSwitchableOutCasCover then
	if gs_trim_outside & not(gs_trim_show_cover_out) then
		hideparameter "gs_trim_outside_uniform"
		lock "gs_trim_outside_uniform"

		if isWindow then
			hideparameter "bCasingBottomOutside"
			lock "bCasingBottomOutside"
		endif
	endif
else
	if bExtSliding & not(gs_casing_nor) then
		parameters gs_trim_show_cover_out = 1
	endif
endif

if not(gs_trim_inside) | bInsideCasingNotAvailableByReveal | bInsideCasingNotAvailableByFrameStyle then
	hideparameter	"gs_trimtype_in",
					"gs_trimtype_in_int",
					"gs_trim_inside_uniform",
					"gs_trim_width_in",
					"gs_trim_offs_in",
					"gs_trim_thk_in",
					"gs_tw_left_in",
					"gs_tw_right_in",
					"gs_tw_top_in",
					"gs_trim_in_mat",
					"gs_trim_pen_fg_in",
					"gs_trim_pen_bg_in",
					"gs_trim_fill_in"

	lock			"gs_trimtype_in",
					"gs_trimtype_in_int",
					"gs_trim_inside_uniform",
					"gs_trim_width_in",
					"gs_trim_offs_in",
					"gs_trim_thk_in",
					"gs_tw_left_in",
					"gs_tw_right_in",
					"gs_tw_top_in",
					"gs_trim_in_mat",
					"gs_trim_pen_fg_in",
					"gs_trim_pen_bg_in",
					"gs_trim_fill_in"

	if isWindow | (not(isWindow) & bTShapedOpening) then
		hideparameter "gs_tw_bottom_in"
		lock "gs_tw_bottom_in"
	endif

	if gs_casing_che then
		hideparameter	"gs_trim_jambext_nosing_in"
		lock	"gs_trim_jambext_nosing_in"
	endif

	if bittest(gs_CasingInTypeEnable, 1) then 		! SWE Traditional
		hideparameter "gs_trimov_top_right_in"

		lock "gs_trimov_top_right_in"

		if isWindow | bTShapedOpening then
			hideparameter "gs_trimov_bot_right_in"

			lock "gs_trimov_bot_right_in"
		endif
	endif
else
	if not(bCasingUSA) & (isWindow | (not(isWindow) & bTShapedOpening)) then
		if gs_trimtype_in_int = CASING_NORMAL then		! Rectangular
			hideparameter	"gs_trimov_top_right_in",
							"gs_trimov_bot_right_in",
							"gs_trimov_bot_left_in"
			lock	"gs_trimov_top_right_in",
					"gs_trimov_bot_right_in",
					"gs_trimov_bot_left_in"
		else
			if not((iWindowShape = SHAPE_T & (gs_sidelight_parapet_hgt_left > EPS | gs_sidelight_parapet_hgt_right > EPS)) |\
				   (iWindowShape = SHAPE_HALF_T_RIGHT & (gs_sidelight_parapet_hgt_right > EPS)) |\
				   (isWindow & (iWindowShape = SHAPE_RECTANGULAR))) then

				hideparameter "gs_trimov_bot_right_in"
				lock "gs_trimov_bot_right_in"
			endif
			if not((iWindowShape = SHAPE_HALF_T_LEFT & (gs_sidelight_parapet_hgt_left > EPS))) then
				hideparameter "gs_trimov_bot_left_in"
				lock "gs_trimov_bot_left_in"
			endif
		endif
	endif
endif

if not(gs_trim_outside) | bOutsideCasingNotAvailableByReveal | bOutsideCasingNotAvailableByFrameStyle then
		hideparameter	"gs_trimtype_out",
						"gs_trimtype_out_int",
						"gs_trim_outside_uniform",
						"gs_trim_width_out",
						"gs_trim_offs_out",
						"gs_trim_thk_out",
						"gs_tw_left_out",
						"gs_tw_right_out",
						"gs_tw_top_out",
						"gs_trim_out_mat",
						"gs_trim_pen_fg_out",
						"gs_trim_pen_bg_out",
						"gs_trim_fill_out"

		lock			"gs_trimtype_out",
						"gs_trimtype_out_int",
						"gs_trim_outside_uniform",
						"gs_trim_width_out",
						"gs_trim_offs_out",
						"gs_trim_thk_out",
						"gs_tw_left_out",
						"gs_tw_right_out",
						"gs_tw_top_out",
						"gs_trim_out_mat",
						"gs_trim_pen_fg_out",
						"gs_trim_pen_bg_out",
						"gs_trim_fill_out"

	if isWindow | (not(isWindow) & bTShapedOpening) then
		hideparameter "gs_tw_bottom_out"
		lock "gs_tw_bottom_out"
	endif

	if gs_casing_che then
		hideparameter	"gs_trim_jambext_nosing_out"
		lock	"gs_trim_jambext_nosing_out"
	endif

	if bittest(gs_CasingOutTypeEnable, 1) then 		! SWE Traditional
		hideparameter "gs_trimov_top_right_out"

		lock "gs_trimov_top_right_out"

		if isWindow | bTShapedOpening then
			hideparameter "gs_trimov_bot_right_out"

			lock "gs_trimov_bot_right_out"
		endif
	endif
else
	if not(bCasingUSA) & (isWindow | (not(isWindow) & bTShapedOpening)) then
		if gs_trimtype_out_int = CASING_NORMAL then		! Rectangular
			if	iWindowShape = SHAPE_RECTANGULAR |\
				iWindowShape = SHAPE_T |\
				iWindowShape = SHAPE_HALF_T_LEFT |\
				iWindowShape = SHAPE_ARCHED_T |\
				iWindowShape = SHAPE_ARCHED_HALF_T_LEFT |\
				iWindowShape = SHAPE_HALF_T_RIGHT |\
				iWindowShape = SHAPE_ARCHED_HALF_T_RIGHT then

				hideparameter	"gs_trimov_top_right_out",
								"gs_trimov_bot_right_out",
								"gs_trimov_bot_left_out"
				lock	"gs_trimov_top_right_out",
						"gs_trimov_bot_right_out",
						"gs_trimov_bot_left_out"
			endif
		else
			if not((iWindowShape = SHAPE_T & (gs_sidelight_parapet_hgt_left > EPS | gs_sidelight_parapet_hgt_right > EPS)) |\
				   (iWindowShape = SHAPE_HALF_T_RIGHT & (gs_sidelight_parapet_hgt_right > EPS)) |\
				   (isWindow & (iWindowShape = SHAPE_RECTANGULAR))) then

				hideparameter "gs_trimov_bot_right_out"
				lock "gs_trimov_bot_right_out"
			endif
			if not((iWindowShape = SHAPE_HALF_T_LEFT & (gs_sidelight_parapet_hgt_left > EPS))) then
				hideparameter "gs_trimov_bot_left_out"
				lock "gs_trimov_bot_left_out"
			endif
		endif
	endif
endif

! Uniform Surfaces =============================================================

if	(not(gs_trim_inside) | bInsideCasingNotAvailableByReveal | bInsideCasingNotAvailableByFrameStyle) &\
	(not(gs_trim_outside) | bOutsideCasingNotAvailableByReveal | bOutsideCasingNotAvailableByFrameStyle) then

	hideparameter "bLinkCasingSurfaces"
	lock "bLinkCasingSurfaces"
endif

! ==============================================================================
! Uniform Casing Surfaces
! ==============================================================================

dim	surfaceParNames[]							:	dim	surfaceParameters[]
	surfaceParNames[1]	= "gs_trim_in_mat"		:		surfaceParameters[1]	= gs_trim_in_mat
	surfaceParNames[2]	= "gs_trim_out_mat"		:		surfaceParameters[2]	= gs_trim_out_mat

if bEnableApron then
	surfaceParNames[3]	= "gs_apron_mat"		:		surfaceParameters[3]	= gs_apron_mat
endif

_lastModCasingSurfaceParameter = gs_trim_in_mat

if stored_material[3][1] <> -9999 then
	for i = 1 to vardim1(surfaceParNames)
		if GLOB_MODPAR_NAME = surfaceParNames[i] then
			_lastModCasingSurfaceParameter	= surfaceParameters[i]
			stored_material[3][i]	= surfaceParameters[i]
			stored_material[4][i]	= 1

			for j = 1 to i-1
				stored_material[4][j]	= 0
				parameters stored_material[4][j]	= stored_material[4][j]
			next j

			for k = i+1 to vardim1(surfaceParNames)
				stored_material[4][k]	= 0
				parameters stored_material[4][k]	= stored_material[4][k]
			next k
		endif

		parameters	stored_material[3][i]	= stored_material[3][i],
					stored_material[4][i]	= stored_material[4][i]

		if stored_material[4][i] = 1 then
			_lastModCasingSurfaceParameter = stored_material[3][i]
		endif
	next i
else
	parameters	stored_material[3][1]	= gs_trim_in_mat,
				stored_material[3][2]	= gs_trim_out_mat

	if bEnableApron then
		parameters	stored_material[3][3]	= gs_apron_mat
	endif
endif

if bLinkCasingSurfaces then
	parameters	gs_trim_in_mat		= _lastModCasingSurfaceParameter,
				gs_trim_out_mat		= _lastModCasingSurfaceParameter

	if bEnableApron then
		parameters	gs_apron_mat	= _lastModCasingSurfaceParameter
	endif
else
	if GLOB_MODPAR_NAME = "bLinkCasingSurfaces" then
		parameters	gs_trim_in_mat		= stored_material[3][1],
					gs_trim_out_mat		= stored_material[3][2]

		if bEnableApron then
			parameters	gs_apron_mat	= stored_material[3][3]
		endif
	else
		parameters	stored_material[3][1]	= gs_trim_in_mat,
					stored_material[3][2]	= gs_trim_out_mat

		if bEnableApron then
			parameters	stored_material[3][3]	= gs_apron_mat
		endif
	endif
endif

if	(not(gs_trim_inside) | bInsideCasingNotAvailableByReveal | bInsideCasingNotAvailableByFrameStyle) &\
	(not(gs_trim_outside) | bOutsideCasingNotAvailableByReveal | bOutsideCasingNotAvailableByFrameStyle) then

	hideparameter "gs_trim_pen_cont"
	lock "gs_trim_pen_cont"
endif

if not(	iWindowShape = SHAPE_RECTANGULAR |\
		iWindowShape = SHAPE_T |\
		iWindowShape = SHAPE_HALF_T_LEFT |\
		iWindowShape = SHAPE_HALF_T_RIGHT ) then
	hideparameter "gs_trim_outside_uniform", "gs_trim_inside_uniform"
	lock "gs_trim_outside_uniform", "gs_trim_inside_uniform"
else
	if gs_trim_outside_uniform then
		hideparameter "gs_tw_left_out", "gs_tw_top_out"
		lock "gs_tw_left_out", "gs_tw_top_out"

		if isWindow | (not(isWindow) & bTShapedOpening) then
			hideparameter "gs_tw_bottom_out"
			lock "gs_tw_bottom_out"
		endif
	endif
	if gs_trim_inside_uniform then
		hideparameter "gs_tw_left_in", "gs_tw_top_in"
		lock "gs_tw_left_in", "gs_tw_top_in"

		if isWindow | (not(isWindow) & bTShapedOpening) then
			hideparameter "gs_tw_bottom_in"
			lock "gs_tw_bottom_in"
		endif
	endif
endif

if (gs_trim_inside | gs_trim_outside) then
	if gs_stack_left	then
		hideparameter "gs_tw_left_in", "gs_tw_left_out"
		lock "gs_tw_left_in", "gs_tw_left_out"
	else
		if bCasingUSA then hideparameter "gs_trim_stack_left"
	endif
	if gs_stack_right	then
		hideparameter "gs_tw_right_in", "gs_tw_right_out"
		lock "gs_tw_right_in", "gs_tw_right_out"
	else
		if bCasingUSA then hideparameter "gs_trim_stack_right"
	endif
	if gs_stack_top		then
		hideparameter "gs_tw_top_in", "gs_tw_top_out"
		lock "gs_tw_top_in", "gs_tw_top_out"
	else
		if bCasingUSA then hideparameter "gs_trim_stack_top"
	endif
	if gs_stack_bottom	then
		hideparameter "gs_tw_bottom_in", "gs_tw_bottom_out"
		lock "gs_tw_bottom_in", "gs_tw_bottom_out"
	else
		if bCasingUSA & isWindow then hideparameter "gs_trim_stack_bottom"
	endif

	if iWindowShape = SHAPE_ARCHED | iWindowShape = SHAPE_ARCHED then
		hideparameter	"gs_tw_left_in",
						"gs_tw_top_in",
						"gs_tw_left_out",
						"gs_tw_top_out"

		lock			"gs_tw_left_in",
						"gs_tw_top_in",
						"gs_tw_left_out",
						"gs_tw_top_out"
	endif
else
	if bEnableCasingAtGanging then
		if isWindow then
			hideparameter	"gs_trim_stack_bottom"
			lock			"gs_trim_stack_bottom"
		endif

		hideparameter	"gs_trim_stack_left",
						"gs_trim_stack_right",
						"gs_trim_stack_top"

		lock			"gs_trim_stack_left",
						"gs_trim_stack_right",
						"gs_trim_stack_top"
	endif
endif

if bCasingUSA then
	hideparameter	"gs_trim_atframe_out", "gs_trim_atframe_in"
	lock			"gs_trim_atframe_out", "gs_trim_atframe_in"

	if isWindow then
		hideparameter	"gs_trimb_atframe_out"
		lock			"gs_trimb_atframe_out"
	endif
endif

if	bEnableApron & not(gs_apron) then
	hideparameter	"gs_apron_thk",
					"gs_apron_width",
					"gs_apron_mat"
	lock			"gs_apron_thk",
					"gs_apron_width",
					"gs_apron_mat"
endif

if abs(WIDO_SILL) > EPS & gs_trim_atframe_out then
	lock "gs_trimov_top_left_out", "gs_trimov_top_right_out", "gs_trimov_bot_left_out", "gs_trimov_bot_right_out"
	hideparameter "gs_trimov_top_left_out", "gs_trimov_top_right_out", "gs_trimov_bot_left_out", "gs_trimov_bot_right_out"
endif

if _bEnableSwitchableInCasCover then
	if not(gs_trim_inside) then
		lock "gs_trim_show_cover_in"
		hideparameter "gs_trim_show_cover_in"
	endif

	if gs_trim_show_cover_in then
		lock "gs_trim_jambext_nosing_in"
		hideparameter "gs_trim_jambext_nosing_in"
	else
		lock	"gs_tw_right_in",
				"gs_tw_left_in",
				"gs_tw_top_in",
				"gs_tw_bottom_in",
				"gs_trim_thk_in",
				"gs_trim_offs_in"
		hideparameter	"gs_tw_right_in",
						"gs_tw_left_in",
						"gs_tw_top_in",
						"gs_tw_bottom_in",
						"gs_trim_thk_in",
						"gs_trim_offs_in"
	endif
endif

if _bEnableSwitchableOutCasCover then
	if not(gs_trim_outside) then
		lock "gs_trim_show_cover_out"
		hideparameter "gs_trim_show_cover_out"
	endif

	if gs_trim_show_cover_out then
		lock "gs_trim_jambext_nosing_out"
		hideparameter "gs_trim_jambext_nosing_out"
	else
		lock	"gs_tw_right_out",
				"gs_tw_left_out",
				"gs_tw_top_out",
				"gs_tw_bottom_out",
				"gs_trim_thk_out",
				"gs_trim_offs_out"
		hideparameter	"gs_tw_right_out",
						"gs_tw_left_out",
						"gs_tw_top_out",
						"gs_tw_bottom_out",
						"gs_trim_thk_out",
						"gs_trim_offs_out"
	endif
endif

if bEnableSwitchableBottomCasing & not(bCasingUSA | gs_casing_nor) then
	if not(gs_trim_outside) then
		hideparameter	"bCasingBottomOutside"
		lock			"bCasingBottomOutside"
	endif
endif


for i = 1 to 255
	put i
next i
values "gs_trim_pen_cont"	use(NSP)
values "gs_trim_pen_fg_in"	use(NSP)
values "gs_trim_pen_fg_out"	get(NSP)


! =============================================================================
! IFC Parameters
! =============================================================================

if isWindow = 0	then
	ifc_CasingDepth = max(gs_trim_thk_in*gs_trim_inside, gs_trim_thk_out*gs_trim_outside)
	parameters ifc_CasingDepth = ifc_CasingDepth

	ifc_CasingThickness = max(gs_tw_right_in*gs_trim_inside, gs_tw_right_out*gs_trim_outside)
	parameters ifc_CasingThickness = ifc_CasingThickness
endif


end	! ===== end ===== end ===== end ===== end ===== end ===== end ===== end ===== end ===== end =====


