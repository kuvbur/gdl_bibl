EPS = 0.0001dim EMPTYARRAY[]! OPENING_SYMBOL_DISPLAYSYMB_VISIBLE	= 1SYMB_HIDDEN		= 2SYMB_OVERHEAD	= 3EDGE_STRAIGHT	= 0EDGE_CURVED		= 1BEGPOINT = 1ENDPOINT = 2!===============================================================! "BasicGeometry_25" functionsdict BasicGeometry_25BasicGeometry_25.DIRECTION_POINTS_3D			= 1BasicGeometry_25.MIRROR_VECTOR_2D				= 2BasicGeometry_25.DIRECTION_SEGMENT_2D			= 3BasicGeometry_25.INTERSECT_LINE_LINE_2D		= 4BasicGeometry_25.INTERSECT_CIRCLE_LINE_2D		= 5BasicGeometry_25.INTERSECT_SEGMENT_LINE_2D		= 6BasicGeometry_25.INTERSECT_LINE_POLYGON_2D		= 7BasicGeometry_25.INSERT_POINT_TO_SEGMENT_2D	= 8BasicGeometry_25.SEGMENT_ARC_2D				= 9BasicGeometry_25.INTERSECT_CIRCLE_CIRCLE_2D	= 10BasicGeometry_25.INTERSECT_SEGMENT_CIRCLE_2D	= 11BasicGeometry_25.DISTRIBUTION_POLYLINE_2D		= 12BasicGeometry_25.ROT_Z_TO_VECTOR_3D			= 13BasicGeometry_25.PROJECT_POINTS_LINE_2D		= 14BasicGeometry_25.LOCAL_POINTS_TO_GLOBAL_3D		= 15BasicGeometry_25.GLOBAL_POINTS_TO_LOCAL_3D		= 16BasicGeometry_25.ARC_THROUGH_POINTS_2D			= 17!===============================================================! iSymbolTypeSYMBOL_X			= 8SYMBOL_X_2FILL		= 1SYMBOL_DIAG			= 2SYMBOL_DIAG_2FILL	= 3SYMBOL_BREAK		= 4SYMBOL_BREAK_2FILL	= 5SYMBOL_SHADOW		= 6SYMBOL_SHADOW_2FILL	= 7! derived attributesdict _symbol_symbol.type = 0if iSymbolType = SYMBOL_X		| iSymbolType = SYMBOL_X_2FILL		then _symbol.type = SYMBOL_Xif iSymbolType = SYMBOL_DIAG	| iSymbolType = SYMBOL_DIAG_2FILL	then _symbol.type = SYMBOL_DIAGif iSymbolType = SYMBOL_BREAK	| iSymbolType = SYMBOL_BREAK_2FILL	then _symbol.type = SYMBOL_BREAKif iSymbolType = SYMBOL_SHADOW	| iSymbolType = SYMBOL_SHADOW_2FILL	then _symbol.type = SYMBOL_SHADOW_symbol.hasTwoFills =	(iSymbolType = SYMBOL_X_2FILL		|\						 iSymbolType = SYMBOL_DIAG_2FILL	|\						 iSymbolType = SYMBOL_BREAK_2FILL	|\						 iSymbolType = SYMBOL_SHADOW_2FILL	)! enable hiding contour only when at least one fill is shown_symbol.enableHideContour = (_symbol.hasTwoFills & (drawFill1 | drawFill2))_symbol.forceShowContour  = (not(_symbol.hasTwoFills) | not(_symbol.enableHideContour))_symbol.hasBreakPoint = (_symbol.type =	SYMBOL_BREAK	|\						 _symbol.type = SYMBOL_SHADOW	)						 dict _GLaDOS : _GLaDOS.version = 0!===============================================================! orientation descriptions and iconsdim aOrientation[]									, sOrientation[]				, picOrientation[]		: i = 1if iSymbolType = SYMBOL_X then	! used by common code with SYMBOL_X_2FILL, iOrientation is not parameter of this type	ORIENT_FILL1SIDE	= 1	ORIENT_DEFAULT 		= ORIENT_FILL1SIDE	iOrientation = ORIENT_DEFAULT	! iOrientation				! unused, iOrientation not shown for this type	aOrientation[i]	= ORIENT_DEFAULT				: sOrientation[i] = `Тип 1`	: picOrientation[i] = 1	: i = i + 1endifif iSymbolType = SYMBOL_X_2FILL then	! iOrientation	ORIENT_FILL1SIDE	= 1	ORIENT_FILL1TOP		= 2	aOrientation[i]	= ORIENT_FILL1SIDE				: sOrientation[i] = `Тип 1`	: picOrientation[i] = 1	: i = i + 1	if drawFill1 | drawFill2 then	! no sense of orienting without fill		aOrientation[i]	= ORIENT_FILL1TOP			: sOrientation[i] = `Тип 2`	: picOrientation[i] = 2	: i = i + 1	endifendifif _symbol.type = SYMBOL_DIAG then	! iOrientation	ORIENT_UPRIGHT		= 1	ORIENT_DOWNRIGHT	= 2		aOrientation[i]	= ORIENT_UPRIGHT				: sOrientation[i] = `Тип 1`	: picOrientation[i] = 1	: i = i + 1	aOrientation[i]	= ORIENT_DOWNRIGHT				: sOrientation[i] = `Тип 2`	: picOrientation[i] = 2	: i = i + 1endifif	_symbol.type = SYMBOL_BREAK |\	_symbol.type = SYMBOL_SHADOW \then	! iOrientation	ORIENT_UPRIGHT_FILL1LEFT	= 1	ORIENT_DOWNRIGHT_FILL1LEFT	= 2	ORIENT_UPRIGHT_FILL1RIGHT	= 3	ORIENT_DOWNRIGHT_FILL1RIGHT	= 4		aOrientation[i]	= ORIENT_UPRIGHT_FILL1LEFT		: sOrientation[i] = `Тип 1`	: picOrientation[i] = 1	: i = i + 1	aOrientation[i]	= ORIENT_DOWNRIGHT_FILL1RIGHT	: sOrientation[i] = `Тип 2`	: picOrientation[i] = 2	: i = i + 1	aOrientation[i]	= ORIENT_DOWNRIGHT_FILL1LEFT	: sOrientation[i] = `Тип 3`	: picOrientation[i] = 3	: i = i + 1	aOrientation[i]	= ORIENT_UPRIGHT_FILL1RIGHT		: sOrientation[i] = `Тип 4`	: picOrientation[i] = 4	: i = i + 1endif