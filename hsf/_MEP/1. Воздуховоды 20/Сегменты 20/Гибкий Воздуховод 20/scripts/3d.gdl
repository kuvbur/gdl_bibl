!-----------3d---------------------if show_el < EPS then endIF gs_detlevel_3D_m < EPS THEN ENDCALL "MEP_m_RequestSystemGlobals" PARAMETERS ALL one_ConID=0 returned_parameters gs_cont_pen, sMat, gs_InsMat, MEP_cline_pen, show_elduct_show = duct_show*not(show_axis)gs_DuctMat = sMataddStatus = 0IF GLOB_CONTEXT > 40 AND GLOB_CONTEXT < 50 THEN	addStatus = 3ENDIFPEN gs_cont_pennumPoint = NumFlexibleDuctPointssnum = 24IF gs_detlevel_3D_m = DETLEV_3D_SIMPLE	THEN snum = 8IF gs_detlevel_3D_m = DETLEV_3D_DRAFT	THEN snum = 6RESOL snumIF show_axis_and or show_axis THEN	pen MEP_cline_pen	FOR i = 1 TO numPoint-1!		Hotline MEP_FlexibleDuctPoints[i][1], MEP_FlexibleDuctPoints[i][2],MEP_FlexibleDuctPoints[i][3], MEP_FlexibleDuctPoints[i+1][1], MEP_FlexibleDuctPoints[i+1][2], MEP_FlexibleDuctPoints[i+1][3]		LIN_ MEP_FlexibleDuctPoints[i][1], MEP_FlexibleDuctPoints[i][2],MEP_FlexibleDuctPoints[i][3], MEP_FlexibleDuctPoints[i+1][1], MEP_FlexibleDuctPoints[i+1][2], MEP_FlexibleDuctPoints[i+1][3]	NEXT i	PEN gs_cont_penendifIF res < 50 THEN	alpha_j = 360/snum	alpha_k = 360/snum	alpha = 0	iHalfWidth = ductHalfWidth + MEP_InsThicknessDIM inXvectors[][]DIM Xvectors[][]DIM Yvectors[][]DIM Zvectors[][]FOR i = 1 TO numPoint	Xx = normalVectors[i][1]	Xy = normalVectors[i][2]	Xz = normalVectors[i][3]	Yx = tangentVectors[i][1]	Yy = tangentVectors[i][2]	Yz = tangentVectors[i][3]	inXvectors[i][1] = -Yy*Xz+Yz*Xy	inXvectors[i][2] = -Yz*Xx+Yx*Xz	inXvectors[i][3] = -Yx*Xy+Yy*Xx	Xvectors[i][1] = inXvectors[i][1]	Xvectors[i][2] = inXvectors[i][2]	Xvectors[i][3] = inXvectors[i][3]	Yvectors[i][1] = normalVectors[i][1]	Yvectors[i][2] = normalVectors[i][2]	Yvectors[i][3] = normalVectors[i][3]	Zvectors[i][1] = tangentVectors[i][1]	Zvectors[i][2] = tangentVectors[i][2]	Zvectors[i][3] = tangentVectors[i][3]NEXT i	FOR i = 1 TO numPoint-1		xx = MEP_FlexibleDuctPoints[i+1][1]-MEP_FlexibleDuctPoints[i][1]		yy = MEP_FlexibleDuctPoints[i+1][2]-MEP_FlexibleDuctPoints[i][2]		zz = MEP_FlexibleDuctPoints[i+1][3]-MEP_FlexibleDuctPoints[i][3]		adx = xx*Xvectors[i][1]+yy*Xvectors[i][2]+zz*Xvectors[i][3]		ady = xx*normalVectors[i][1]+yy*normalVectors[i][2]+zz*normalVectors[i][3]		adz = xx*tangentVectors[i][1]+yy*tangentVectors[i][2]+zz*tangentVectors[i][3]		VXx = Xvectors[i+1][1]*Xvectors[i][1]+Xvectors[i+1][2]*Xvectors[i][2]+Xvectors[i+1][3]*Xvectors[i][3]		VXy = Xvectors[i+1][1]*normalVectors[i][1]+Xvectors[i+1][2]*normalVectors[i][2]+Xvectors[i+1][3]*normalVectors[i][3]		VXz = Xvectors[i+1][1]*tangentVectors[i][1]+Xvectors[i+1][2]*tangentVectors[i][2]+Xvectors[i+1][3]*tangentVectors[i][3]		VYx = normalVectors[i+1][1]*Xvectors[i][1]+normalVectors[i+1][2]*Xvectors[i][2]+normalVectors[i+1][3]*Xvectors[i][3]		VYy = normalVectors[i+1][1]*normalVectors[i][1]+normalVectors[i+1][2]*normalVectors[i][2]+normalVectors[i+1][3]*normalVectors[i][3]		VYz = normalVectors[i+1][1]*tangentVectors[i][1]+normalVectors[i+1][2]*tangentVectors[i][2]+normalVectors[i+1][3]*tangentVectors[i][3]		VZx = tangentVectors[i+1][1]*Xvectors[i][1]+tangentVectors[i+1][2]*Xvectors[i][2]+tangentVectors[i+1][3]*Xvectors[i][3]		VZy = tangentVectors[i+1][1]*normalVectors[i][1]+tangentVectors[i+1][2]*normalVectors[i][2]+tangentVectors[i+1][3]*normalVectors[i][3]		VZz = tangentVectors[i+1][1]*tangentVectors[i][1]+tangentVectors[i+1][2]*tangentVectors[i][2]+tangentVectors[i+1][3]*tangentVectors[i][3]		XFORM   Xvectors[i][1], normalVectors[i][1], tangentVectors[i][1], MEP_FlexibleDuctPoints[i][1],				Xvectors[i][2], normalVectors[i][2], tangentVectors[i][2], MEP_FlexibleDuctPoints[i][2],				Xvectors[i][3], normalVectors[i][3], tangentVectors[i][3], MEP_FlexibleDuctPoints[i][3]		IF duct_show THEN			FOR k = 1 TO snum				PUT ductHalfWidth*COS(alpha), ductHalfWidth*SIN(alpha), 1				alpha = alpha + alpha_k			NEXT k			alpha = 0			FOR kk = 1 TO snum				xx = ductHalfWidth*COS(alpha)*VXx+ductHalfWidth*SIN(alpha)*VYx+(0)*VZx				yy = ductHalfWidth*COS(alpha)*VXy+ductHalfWidth*SIN(alpha)*VYy+(0)*VZy				zz = ductHalfWidth*COS(alpha)*VXz+ductHalfWidth*SIN(alpha)*VYz+(0)*VZz				PUT xx+adx, yy+ady, zz+adz				alpha = alpha + alpha_k			NEXT kk			MATERIAL gs_DuctMat			RULED NSP/6, addStatus+4+16+32,				GET(NSP)		ENDIF		IF MEP_InsShow and show_isol and not(show_axis) THEN			alpha = 0			FOR k = 1 TO snum				PUT iHalfWidth*COS(alpha), iHalfWidth*SIN(alpha), 1				alpha = alpha + alpha_k			NEXT k			alpha = 0			FOR kk = 1 TO snum				xx = iHalfWidth*COS(alpha)*VXx+iHalfWidth*SIN(alpha)*VYx+(0)*VZx				yy = iHalfWidth*COS(alpha)*VXy+iHalfWidth*SIN(alpha)*VYy+(0)*VZy				zz = iHalfWidth*COS(alpha)*VXz+iHalfWidth*SIN(alpha)*VYz+(0)*VZz				PUT xx+adx, yy+ady, zz+adz				alpha = alpha + alpha_k			NEXT kk			MATERIAL gs_InsMat			RULED NSP/6, addStatus+4+16+32,				GET(NSP)		ENDIF		DEL 1	NEXT iELSE	FOR i = 1 TO numPoint		IF ABS(i - 1) < EPS THEN			Px = MEP_FlexibleDuctPoints[i+1][1]			Py = MEP_FlexibleDuctPoints[i+1][2]			Pz = MEP_FlexibleDuctPoints[i+1][3]			Dx = MEP_FlexibleDuctPoints[i][1]*MEP_NumConnectionData[1][4]			Dy = MEP_FlexibleDuctPoints[i][2]*MEP_NumConnectionData[1][5]			Dz = MEP_FlexibleDuctPoints[i][3]*MEP_NumConnectionData[1][6]			D = Dx+Dy+Dz			A = MEP_NumConnectionData[1][4]			B = MEP_NumConnectionData[1][5]			C = MEP_NumConnectionData[1][6]			dist = (A*Px+B*Py+C*Pz-D)/(SQR(A^2+B^2+C^2))			P2x = MEP_NumConnectionData[1][4]*dist+Px			P2y = MEP_NumConnectionData[1][5]*dist+Py			P2z = MEP_NumConnectionData[1][6]*dist+Pz			IF ABS(A*P2x+B*P2y+C*P2z-D) > EPS THEN				dist = -dist			ENDIF			PUT MEP_NumConnectionData[1][4]*dist*2+Px			PUT MEP_NumConnectionData[1][5]*dist*2+Py			PUT MEP_NumConnectionData[1][6]*dist*2+Pz			PUT 0		ENDIF		PUT MEP_FlexibleDuctPoints[i][1]		PUT MEP_FlexibleDuctPoints[i][2]		PUT MEP_FlexibleDuctPoints[i][3]		PUT 0		IF ABS(i - numPoint) < EPS THEN			Px = MEP_FlexibleDuctPoints[i-1][1]			Py = MEP_FlexibleDuctPoints[i-1][2]			Pz = MEP_FlexibleDuctPoints[i-1][3]			Dx = MEP_FlexibleDuctPoints[i][1]*MEP_NumConnectionData[2][4]			Dy = MEP_FlexibleDuctPoints[i][2]*MEP_NumConnectionData[2][5]			Dz = MEP_FlexibleDuctPoints[i][3]*MEP_NumConnectionData[2][6]			D = Dx+Dy+Dz			A = MEP_NumConnectionData[2][4]			B = MEP_NumConnectionData[2][5]			C = MEP_NumConnectionData[2][6]			dist = (A*Px+B*Py+C*Pz-D)/(SQR(A^2+B^2+C^2))			P2x = MEP_NumConnectionData[2][4]*dist+Px			P2y = MEP_NumConnectionData[2][5]*dist+Py			P2z = MEP_NumConnectionData[2][6]*dist+Pz			IF ABS(A*P2x+B*P2y+C*P2z-D) > EPS THEN				dist = -dist			ENDIF			PUT MEP_NumConnectionData[2][4]*dist*2+Px			PUT MEP_NumConnectionData[2][5]*dist*2+Py			PUT MEP_NumConnectionData[2][6]*dist*2+Pz			PUT 0		ENDIF	NEXT i	IF duct_show THEN		MATERIAL gs_DuctMat		IF MEP_InsShow and show_isol and not(show_axis) THEN			TUBE 2, NSP/4, addStatus+16+32,				 0, 0, 901,				 ductHalfWidth, 360, 4001,				 USE(NSP)		ELSE			TUBE 2, NSP/4, addStatus+16+32,				 0, 0, 901,				 ductHalfWidth, 360, 4001,				 GET(NSP)		ENDIF	ENDIF	IF MEP_InsShow and show_isol and not(show_axis) THEN		MATERIAL gs_InsMat		TUBE 2, NSP/4, addStatus+16+32,			 0, 0, 901,			 ductHalfWidth + MEP_InsThickness, 360, 4001,			 GET(NSP)	ENDIFENDIFFOR i = 1 TO VARDIM1(MEP_ControlPoints)	unID = i-1	IF i < 2 THEN unID = hceID_1	IF i > VARDIM1(MEP_ControlPoints)-1 THEN unID = hceID_2	HOTSPOT MEP_ControlPoints[i][1], MEP_ControlPoints[i][2], MEP_ControlPoints[i][3], unIDNEXT iFOR i = 1 TO NumFlexibleDuctPoints-1	HOTLINE MEP_FlexibleDuctPoints[i][1], MEP_FlexibleDuctPoints[i][2], MEP_FlexibleDuctPoints[i][3], MEP_FlexibleDuctPoints[i+1][1], MEP_FlexibleDuctPoints[i+1][2], MEP_FlexibleDuctPoints[i+1][3], iNEXT i