!-----------Основной---------------------success = LIBRARYGLOBAL ("Libraryflobals-mep", "show_axis", show_axis)success = LIBRARYGLOBAL ("Libraryflobals-mep", "show_axis_and", show_axis_and)success = LIBRARYGLOBAL ("Libraryflobals-mep", "show_isol", show_isol)success = LIBRARYGLOBAL ("Libraryflobals-mep", "show_conventions", show_conventions)success = LIBRARYGLOBAL ("Libraryflobals-mep", "show_size", show_size)success = LIBRARYGLOBAL ("Libraryflobals-mep", "gs_detlevel_2D_m",gs_detlevel_2D_m)success = LIBRARYGLOBAL ("Libraryflobals-mep", "gs_detlevel_3D_m", gs_detlevel_3D_m)call "Показ_систем" PARAMETERS All isMep=1 RETURNED_PARAMETERS show_el, syst_namecall "common_param" PARAMETERS ALLEPS = 0.00001DIM RiseOrDrop_dim [2]	RiseOrDrop_dim[1]=`Подъем`	RiseOrDrop_dim[2]=`Спуск`ductInnerWidth			= MEP_NumConnectionData[1][12]ductInnerHeight			= MEP_NumConnectionData[1][13]ductHalfWidth			= MEP_NumConnectionData[1][12]/2+MEP_NumConnectionData[1][14]ductHalfHeight			= MEP_NumConnectionData[1][13]/2+MEP_NumConnectionData[1][14]connectorLength			= MEP_NumConnectionData[1][14]connectorHalfWidthA		= ductHalfWidth+MEP_NumConnectionData[1][15]connectorHalfHeightA	= ductHalfHeight+MEP_NumConnectionData[1][15]connectedA				= MEP_NumConnectionData[1][18]connectorHalfWidthB		= ductHalfWidth+MEP_NumConnectionData[2][15]connectorHalfHeightB	= ductHalfHeight+MEP_NumConnectionData[2][15]connectedB				= MEP_NumConnectionData[2][18]flangeA = 1IF MEP_NumConnectionData[1][15] < EPS OR ABS(gs_AddConnections[1][1] - 1) < EPS THEN flangeA = 0cutBackA = 0IF flangeA THEN cutBackA = connectorLengthflangeB = 1IF MEP_NumConnectionData[2][15] < EPS OR ABS(gs_AddConnections[2][1] - 1) < EPS THEN flangeB = 0cutBackB = 0IF flangeB THEN cutBackB = connectorLengthIF GLOB_MODPAR_NAME = "setFlip" THEN	IF ABS(MEP_Position[2][3]) < EPS THEN		IF MEP_Position[2][1] > EPS OR ABS(MEP_Position[2][2]-1) < EPS THEN			compareFlip = 0		ELSE			compareFlip = 1		ENDIF	ELSE		IF MEP_Position[2][3] > EPS  THEN			compareFlip = 0		ELSE			compareFlip = 1		ENDIF	ENDIF	IF ABS(setFlip - compareFlip) > EPS THEN		MEP_Position[1][1] = MEP_Position[1][1]+MEP_StraightLength*MEP_Position[2][1]		PARAMETERS MEP_Position[1][1] = MEP_Position[1][1]		MEP_Position[1][2] = MEP_Position[1][2]+MEP_StraightLength*MEP_Position[2][2]		PARAMETERS MEP_Position[1][2] = MEP_Position[1][2]		MEP_Position[1][3] = MEP_Position[1][3]+MEP_StraightLength*MEP_Position[2][3]		PARAMETERS MEP_Position[1][3] = MEP_Position[1][3]		MEP_Position[2][1] = -MEP_Position[2][1]		PARAMETERS MEP_Position[2][1] = MEP_Position[2][1]		MEP_Position[2][2] = -MEP_Position[2][2]		PARAMETERS MEP_Position[2][2] = MEP_Position[2][2]		MEP_Position[2][3] = -MEP_Position[2][3]		PARAMETERS MEP_Position[2][3] = MEP_Position[2][3]		MEP_Position[3][1] = -MEP_Position[3][1]		PARAMETERS MEP_Position[3][1] = MEP_Position[3][1]		MEP_Position[3][2] = -MEP_Position[3][2]		PARAMETERS MEP_Position[3][2] = MEP_Position[3][2]		MEP_Position[3][3] = -MEP_Position[3][3]		PARAMETERS MEP_Position[3][3] = MEP_Position[3][3]	ENDIFELSE	IF ABS(MEP_Position[2][3]) < EPS THEN		IF MEP_Position[2][1] > EPS OR ABS(MEP_Position[2][2]-1) < EPS THEN			setFlip = 0			PARAMETERS setFlip = setFlip		ELSE			setFlip = 1			PARAMETERS setFlip = setFlip		ENDIF	ELSE		IF MEP_Position[2][3] > EPS THEN			setFlip = 0			PARAMETERS setFlip = setFlip		ELSE			setFlip = 1			PARAMETERS setFlip = setFlip		ENDIF	ENDIFENDIFIF ABS(MEP_Position[2][1]) < EPS THEN	IF SGN(MEP_Position[2][2]) = 1 THEN dirAng = 90	IF SGN(MEP_Position[2][2]) = -1 THEN dirAng = 270ELSE	dirAng = ATN(MEP_Position[2][2]/MEP_Position[2][1])	IF SGN(MEP_Position[2][1]) = -1 AND SGN(MEP_Position[2][2]) = 1 THEN dirAng = 180+dirAng	IF SGN(MEP_Position[2][1]) = -1 AND SGN(MEP_Position[2][2]) = -1 THEN dirAng = 180+dirAng	IF SGN(MEP_Position[2][1]) = 1 AND SGN(MEP_Position[2][2]) = -1 THEN dirAng = 360+dirAng	IF SGN(MEP_Position[2][1]) = 1 AND ABS(MEP_Position[2][2]) < EPS THEN dirAng = 0	IF SGN(MEP_Position[2][1]) = -1 AND ABS(MEP_Position[2][2]) < EPS THEN dirAng = 180ENDIF			! --- HARDCODED AND DERIVED VARIABLES --- !totalHalfWidth = (branchWidthA+branchWidthB+oWidth)/2ww = totalHalfWidth-ductHalfWidthinletInclinedLength = ww/TAN(inletAngle)outletInclinedLength = ww/TAN(outletAngle)valueA = inletStraightLength + outletStraightLength + inletInclinedLength + outletInclinedLengthvalueB = inletStraightLength + outletStraightLength + oLen + oWidthvalueC = MAX(valueA, valueB)IF MEP_StraightLength < valueC THEN	MEP_StraightLength = valueC	PARAMETERS MEP_StraightLength = MEP_StraightLengthENDIFangFlow = 90posHoleX = MEP_StraightLength/2posHoleY = totalHalfWidth-branchWidthA-oWidth/2						! ---------------- !						! --- Z vector --- !						! ---------------- !dZx = -MEP_Position[3][2]*MEP_Position[2][3]+MEP_Position[3][3]*MEP_Position[2][2]dZy = -MEP_Position[3][3]*MEP_Position[2][1]+MEP_Position[3][1]*MEP_Position[2][3]dZz = -MEP_Position[3][1]*MEP_Position[2][2]+MEP_Position[3][2]*MEP_Position[2][1]! --- Building of Transformational MatrixDIM MatrixT[3][3]MatrixT[1][1] = MEP_Position[2][1]MatrixT[1][2] = MEP_Position[2][2]MatrixT[1][3] = MEP_Position[2][3]MatrixT[2][1] = MEP_Position[3][1]MatrixT[2][2] = MEP_Position[3][2]MatrixT[2][3] = MEP_Position[3][3]MatrixT[3][1] = dZxMatrixT[3][2] = dZyMatrixT[3][3] = dZz! --- Input CoordinatesPUT 0, 0, 0PUT -1, 0, 0PUT 0, -1, 0PUT MEP_StraightLength, 0, 0PUT 1, 0, 0PUT 0, 1, 0PUT MEP_StraightLength/2, 0, 0Coordinates = NSP/3DIM inCoords[20][3]FOR cnum = 1 TO Coordinates	inCoords[cnum][1] = GET(1)	inCoords[cnum][2] = GET(1)	inCoords[cnum][3] = GET(1)NEXT cnum! --- the Matrix Operation, what make the Output-CoordinatesDIM outCoords[20][3]FOR cnum = 1 TO Coordinates	outCoords[cnum][1] = inCoords[cnum][1]*MatrixT[1][1]+inCoords[cnum][2]*MatrixT[2][1]+inCoords[cnum][3]*MatrixT[3][1]	outCoords[cnum][2] = inCoords[cnum][1]*MatrixT[1][2]+inCoords[cnum][2]*MatrixT[2][2]+inCoords[cnum][3]*MatrixT[3][2]	outCoords[cnum][3] = inCoords[cnum][1]*MatrixT[1][3]+inCoords[cnum][2]*MatrixT[2][3]+inCoords[cnum][3]*MatrixT[3][3]NEXT cnumz = MEP_Position[1][3] + MEP_Position[2][3]*MEP_StraightLength/2PARAMETERS ac_toplevel 		= zPARAMETERS ac_bottomlevel 	= z