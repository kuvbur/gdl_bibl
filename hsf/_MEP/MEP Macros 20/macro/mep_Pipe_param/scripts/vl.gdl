!!!!!========================== ДАННЫЕ ДЛЯ ПОДБОРА ===============================reload_data = 0isFirstRun = 0 : n = APPLICATION_QUERY("parameter_script", "firstoccasion_in_progress", isFirstRun)if isFirstRun then call "mep_get_version" parameters all returned_parameters reload_dataif reload_data = 1 then	call "mep_common_data" parameters all, mep_set_type=0 returned_parameters mep_data, mep_type_data	parameters mep_data = mep_dataelse	call "mep_common_data" parameters all, mep_set_type=1 returned_parameters mep_type_dataendifdict type_data : type_data = mep_type_data.type_datadim pn_arr[] : pn_arr = mep_type_data.pn_arrdict con_data!!-------------------------------- Читаем размеры ----------------------------con_data.c[1].d = MEP_NumConnectionData[1][12]ttdn = MEP_StrConnectionData[1][4]ttdn_ = ""if vartype(ttdn)=2 then	if strlen(ttdn)>0 then		ttdn_ = ttdn	endifelse	ttdn_ = ""endifcon_data.c[1].tdn = ttdn_con_data.c[1].th = MEP_NumConnectionData[1][14]strmm_num = con_data.c[1].d*1000 : gosub "strmm" : con_data.c[1].d_ = strmm_txtstrmm_num = con_data.c[1].th*1000 : gosub "strmm" : con_data.c[1].th_ = strmm_txtcon_data.max = con_data.c[1]con_data.min = con_data.c[1]for i = 2 to MEP_NumberConnections	if i<=vardim1(MEP_NumConnectionData) then		if abs(MEP_NumConnectionData[i][22]-1)<EPS then !Если статус соединения активен			con_data.c[i].d = MEP_NumConnectionData[i][12] 			ttdn = MEP_StrConnectionData[i][4]			ttdn_ = ""			if vartype(ttdn)=2 then				if strlen(ttdn)>0 then					ttdn_ = ttdn				endif			else				ttdn_ = ""			endif			con_data.c[i].tdn = ttdn_			con_data.c[i].th = MEP_NumConnectionData[i][14]			strmm_num = con_data.c[i].d*1000 : gosub "strmm" : con_data.c[i].d_ = strmm_txt			strmm_num = con_data.c[i].th*1000 : gosub "strmm" : con_data.c[i].th_ = strmm_txt			if con_data.c[i].d>con_data.max.d then con_data.max = con_data.c[i]			if con_data.c[i].d<con_data.max.d then con_data.min = con_data.c[i]		endif	endifnext iMEP_BendAngle_ = 0if STRSTR(mep_macro_name, "Врезка")>0 then	_MEP_BendAngle = MEP_BendAngle	if (_MEP_BendAngle-180)>EPS then		MEP_BendAngle_ = 180		_MEP_BendAngle = _MEP_BendAngle - MEP_BendAngle_	endif	if (_MEP_BendAngle-90)>EPS then		MEP_BendAngle_ = 180		_MEP_BendAngle = _MEP_BendAngle - MEP_BendAngle_	endif	if (_MEP_BendAngle-60)>EPS then		MEP_BendAngle_ = 90		_MEP_BendAngle = _MEP_BendAngle - MEP_BendAngle_	endif	if (_MEP_BendAngle-45)>EPS then		MEP_BendAngle_ = 60		_MEP_BendAngle = _MEP_BendAngle - MEP_BendAngle_	endif	if _MEP_BendAngle>EPS then		MEP_BendAngle_ = 45	endifendif!!------------------------------ Материал -------------------------------------mep_get_ma_name = "" : mep_get_ma_ro = 0 : mep_get_ma_group = MEP_UNKNOW : mep_get_ma_pn = 0call "mep_get_material" parameters all returned_parameters mep_get_ma_name, mep_get_ma_ro, mep_get_ma_group, mep_get_ma_pnsuffix_material = ""if mep_get_ma_group>EPS then	if STRSTR(mep_get_ma_name, "@")>0 then		suffix_material = strsub(mep_get_ma_name, STRSTR(mep_get_ma_name, "@")+1, STRLEN(mep_get_ma_name))		mep_m_gost = strsub(mep_get_ma_name, 1, STRSTR(mep_get_ma_name, "@")-1)	else		mep_m_gost = mep_get_ma_name	endif	con_data.group = mep_get_ma_groupelse	con_data.group = MEP_ST3	error_msg = error_msg  +  ";nomat"	printstr = printstr + "Не удалось определить материал по штриховке;"endifneedThickEq = 0 !Нужно ли подбирать по толщинеif con_data.group = MEP_ST3 then needThickEq = 1if con_data.group = MEP_AISI then needThickEq = 1if con_data.group = MEP_09G2S then needThickEq = 1if con_data.group = MEP_VG then needThickEq = 1if mep_get_ma_pn>0 then	eq_code = mep_get_ma_pn	if haskey(mep_type_data.tpn) then		for i=1 to vardim1(mep_type_data.tpn)			if abs(mep_get_ma_pn-mep_type_data.tpn[i].pn)<EPS then				eq_plant = mep_type_data.tpn[i].tpn				i=vardim1(mep_type_data.tpn)			endif		next i	else		eq_plant = "PN" + STR("%.1", mep_get_ma_pn)	endifendif!!------------------------------ Определяем типы ------------------------------con_data.is_ravoproh = 1con_data.is_offset = 0con_data.type = MEP_TYPE_TUBEif abs(con_data.max.d-con_data.min.d)>EPS and STRSTR(mep_macro_name, "Переход")>0 then	con_data.type = MEP_TYPE_PEREH	con_data.is_ravoproh = 0	if abs(MEP_offset_z)>EPS or abs(MEP_offset_y)>EPS then con_data.is_offset = 1endifif STRSTR(mep_macro_name, "Тройник")>0 then 	if abs(con_data.max.d-con_data.min.d)>EPS then con_data.is_ravoproh = 0	con_data.type = MEP_TYPE_TRendifif STRSTR(mep_macro_name, "Врезка")>0 then	con_data.type = MEP_TYPE_OTVOD	if con_data.group = MEP_GSH then con_data.type = MEP_TYPE_TUBEendifif STRSTR(mep_macro_name, "Заглушка")>0 then	con_data.type = MEP_TYPE_ZAGLendif!!Список доступных вариантовis_error = 0if haskey(type_data.t) then !Проверяем наличие ключа с типами	if haskey(type_data.t[con_data.type]) then !Проверяем наличие данного типа		if haskey(type_data.t[con_data.type].mat) then !Проверяем наличие ключа с материалами			if haskey(type_data.t[con_data.type].mat[con_data.group]) then !Проверяем наличие данного материала				if haskey(type_data.t[con_data.type].mat[con_data.group].gost) then !Проверяем наличие ключа с ГОСТами					if vardim1(type_data.t[con_data.type].mat[con_data.group].gost)>1 then						values "mep_gost" "Авто", type_data.t[con_data.type].mat[con_data.group].gost					else						mep_gost = "Авто"						PARAMETERS mep_gost = mep_gost						LOCK "mep_gost"					endif				else					error_msg = error_msg  +  ";gost"					printstr = printstr + " ГОСТ не найден в словаре type_data;"					is_error = 1				endif			else				error_msg = error_msg  +  ";matgr" + str("%.0", con_data.group)				printstr = printstr + " В словаре type_data отсутсвует материал " + str("%.0", con_data.group)				is_error = 1			endif		else			error_msg = error_msg  +  ";mattype" + str("%.0", con_data.type)			printstr = printstr + " В словаре type_data отсутвует тип " + str("%.0", con_data.group)			is_error = 1		endif	else		error_msg = error_msg  +  ";type" + str("%.0", con_data.type)		is_error = 1	endifelse	error_msg = error_msg  +  ";all"	is_error = 1endifif not(haskey(mep_data.filelist)) then	error_msg = error_msg  +  ";haskey(mep_data.filelist)"	is_error = 1endifif is_error>EPS then goto "end_param"is_error = 0flag_find = 0inx_type = 1is_mun = 0 !1-подбор не требуетсяif mep_gost <> "Авто" then	for i=1 to vardim1(type_data.t[con_data.type].mat[con_data.group].gost)		if mep_gost = type_data.t[con_data.type].mat[con_data.group].gost[i] then			inx_type = i			i = vardim1(type_data.t[con_data.type].mat[con_data.group].gost)		endif	next i	if haskey(type_data.t[con_data.type].mat[con_data.group].mun[inx_type]) then !Проверяем наличие ключа ручного задания размеров		is_mun = type_data.t[con_data.type].mat[con_data.group].mun[inx_type]	else		is_mun = 0	endif	if is_mun = 0 then		fname = type_data.t[con_data.type].mat[con_data.group].fname[inx_type] : gosub "get_inx_file"		if (inx_file>0) then			flag_find_file = inx_file			gosub "get_ncol"			gosub "find_variant"		else			is_error = 1			goto "end_param"		endif	endifelse	for inxf=1 to vardim1(type_data.t[con_data.type].mat[con_data.group].gost)		inx_type = inxf		if haskey(type_data.t[con_data.type].mat[con_data.group].mun[inx_type]) then !Проверяем наличие ключа ручного задания размеров			is_mun = type_data.t[con_data.type].mat[con_data.group].mun[inx_type]		else			is_mun = 0		endif		if is_mun = 0 then			fname = type_data.t[con_data.type].mat[con_data.group].fname[inx_type] : gosub "get_inx_file"			if (inx_file>0) then				gosub "get_ncol"				gosub "find_variant"				if flag_find>EPS then					flag_find_file = inx_file					inxf = vardim1(type_data.t[con_data.type].mat[con_data.group].gost)				endif			else				is_error = 1				goto "end_param"			endif		endif	next inxfendifif haskey(con_data.find) and flag_find>EPS then n = REMOVEKEY(con_data.find)if is_mun = 0 then	if flag_find<EPS then		is_error = 1		goto "end_param"	endif	gosub "get_ncol"	gosub "get_element_data"else	i=1	if haskey(con_data.c[i].d) and haskey(con_data.c[i].tdn) then		con_data.find.dy = con_data.c[1].d :	con_data.find.dy_ = con_data.c[i].tdn 	endif	if haskey(con_data.c[i].d) and haskey(con_data.c[i].d_) then		con_data.find.d1 = con_data.c[i].d : con_data.find.d1_ = con_data.c[i].d_	endif	if haskey(con_data.c[i].th) and haskey(con_data.c[i].th_) then		con_data.find.t1 = con_data.c[i].th : con_data.find.t1_ = con_data.c[i].th_	endif	i=2	if haskey(con_data.c[i].d) and haskey(con_data.c[i].d_) then		con_data.find.d2 = con_data.c[i].d : con_data.find.d2_ = con_data.c[i].d_	endif	if haskey(con_data.c[i].th) and haskey(con_data.c[i].th_) then		con_data.find.t2 = con_data.c[i].th : con_data.find.t2_ = con_data.c[i].th_	endif	if haskey(type_data.t[con_data.type].mat[con_data.group].suff[inx_type]) then		con_data.find.suff = type_data.t[con_data.type].mat[con_data.group].suff[inx_type]	endifendif!!================== Геометрия для фитингов =======================if con_data.type = MEP_TYPE_TR then	if haskey(con_data.find.dim1) and haskey(con_data.find.dim2) then		if con_data.find.dim1>EPS and con_data.find.dim2>EPS then			MEP_StraightLength = con_data.find.dim1			ConLength_3 = con_data.find.dim2			PARAMETERS MEP_StraightLength = MEP_StraightLength, ConLength_3 = ConLength_3		endif	endifendifif con_data.type = MEP_TYPE_PEREH then	if haskey(con_data.find.dim1) then		if con_data.find.dim1>EPS then			MEP_StraightLength = con_data.find.dim1			PARAMETERS MEP_StraightLength = MEP_StraightLength		endif	endif	if haskey(con_data.find.flangeout) then		con_data.find.flangeout1 = con_data.find.flangeout		con_data.find.flangeout2 = 0	endifendifif con_data.type = MEP_TYPE_OTVOD then	if haskey(con_data.find.dim1) then		if con_data.find.dim1>EPS then			MEP_BendRadius = con_data.find.dim1			PARAMETERS MEP_BendRadius = MEP_BendRadius		endif	endifendif!!---------------------------- Длина ------------------------------k_ves = 1if MEP_BendAngle_>91 then k_ves = 2if MEP_BendAngle_<89 then k_ves = 1/1.5if MEP_BendAngle_<46 then k_ves = 1/2mep_l = MEP_StraightLengthif mep_l<EPS then mep_l = MEP_BendRadius*(PI/180)*MEP_BendAngleif mep_l<EPS then mep_l = 100/1000mep_l = round_int(mep_l*100)/100!!---------------------- Периметры и площади ------------------------------mep_s_in = 3.14159 * con_data.max.d * con_data.max.d / 4mep_s_perim = 3.14159 * con_data.max.dmep_s_ins_perim = 3.14159 * (con_data.max.d+MEP_InsThickness*2)mep_s_el = mep_s_perim*mep_lmep_s_sech = 0.7853975*(con_data.max.th*con_data.max.th+2*con_data.max.th*con_data.max.d)mep_s_ins = mep_s_ins_perim*mep_l*MEP_InsShowmep_s_el = round_int(mep_s_el*100)/100mep_s_ins = round_int(mep_s_ins*100)/100if is_mun = 1 then con_data.find.ves = mep_s_sech * mep_l * mep_get_ma_ro!!----------------------------- Отметки, размеры ------------------------------mep_el_type_view = 0MEP_HORIZONTAL = 1call "mep_get_type_view" parameters MEP_Position = MEP_Position, MEP_StraightLength = MEP_StraightLength, RETURNED_PARAMETERS mep_el_type_viewif (abs(mep_el_type_view) = MEP_HORIZONTAL) then	otm_elem = SYMB_POS_Zelse	otm_elem = SYMB_POS_Z + MEP_StraightLength*(mep_el_type_view > 0)endifotm_elem_abs = otm_elemA = mep_lB = con_data.max.dZZYZX  = con_data.max.d!!================== Обозначение(ГОСТ) =======================dict templvartemplvar.v[1].name = "suff"templvar.v[1].val = ""if is_mun = 0 then obozn = type_data.t[con_data.type].mat[con_data.group].gost[inx_type]if (con_data.group = MEP_09G2S) and con_data.type = MEP_TYPE_TUBE then	if (con_data.max.d-0.05)<EPS then		obozn = "ГОСТ 3262-75"	else		if (con_data.max.d-0.63)<EPS then			obozn = "ГОСТ 8732-78"		else			obozn = "ГОСТ 31447-2012"			templvar.v[1].val = "2-"		endif	endifendifif (con_data.group = MEP_AISI) and con_data.type = MEP_TYPE_TUBE then	if (con_data.max.d-0.63)<EPS then		obozn = "ГОСТ 9940-81"	else		obozn = "ТУ 24.20.13-001-01395041-2016"	endifendif!!===================== Наименование =======================!!------ Словарь со значения для подстановки ---------i=1i=i+1 : templvar.v[i].name = "mep_m_gost" : templvar.v[i].val = mep_m_gosti=i+1 : templvar.v[i].name = "suffix_material" : templvar.v[i].val = suffix_materiali=i+1 : templvar.v[i].name = "obozn" : templvar.v[i].val = obozni=i+1 : templvar.v[i].name = "MEP_BendAngle" : templvar.v[i].val = str("%.0", MEP_BendAngle_)+"гр."if haskey(con_data.find.d1_) then	i=i+1 : templvar.v[i].name = "d1" : templvar.v[i].val = con_data.find.d1_	con_data.max.d_ = con_data.find.d1_endifif haskey(con_data.find.d2_) then	i=i+1 : templvar.v[i].name = "d2" : templvar.v[i].val = con_data.find.d2_	con_data.min.d_ = con_data.find.d2_endifif haskey(con_data.find.t1_) then	i=i+1 : templvar.v[i].name = "t1" : templvar.v[i].val = con_data.find.t1_	con_data.max.th_ = con_data.find.t1_endifif haskey(con_data.find.t2_) then	i=i+1 : templvar.v[i].name = "t2" : templvar.v[i].val = con_data.find.t2_	con_data.min.th_ = con_data.find.t2_endifif haskey(con_data.find.dy_) then	i=i+1 : templvar.v[i].name = "dy" : templvar.v[i].val = con_data.find.dy_endifif haskey(con_data.find.suff) then	i=i+1 : templvar.v[i].name = "suffix_element" : templvar.v[i].val = con_data.find.suffendifif haskey(con_data.find.code) then	i=i+1 : templvar.v[i].name = "code" : templvar.v[i].val = con_data.find.codeendifi=i+1 : templvar.v[i].name = "pn"if haskey(con_data.find.pn_) then	if strstr(con_data.find.pn_, "PN")=0 then con_data.find.pn_ = "PN" + con_data.find.pn_	templvar.v[i].val = con_data.find.pn_else	if strstr(eq_plant, "PN")=0 then eq_plant = "PN" + eq_plant	templvar.v[i].val = eq_plantendifi=i+1 : templvar.v[i].name = "eq_plant"if haskey(con_data.find.pn_) then	templvar.v[i].val = con_data.find.pn_else	templvar.v[i].val = eq_plantendifmep_razm = con_data.max.tdnmep_razm_abs = "d"+con_data.max.d_ + "x" + con_data.max.th_mep_razm_d = "d"+con_data.max.d_if con_data.type = MEP_TYPE_PEREH or (con_data.type = MEP_TYPE_TR and not(con_data.is_ravoproh)) then	mep_razm = mep_razm + " - " + con_data.min.tdn	mep_razm_abs = mep_razm_abs+"-" + "d"+con_data.min.d_+ "x" + con_data.min.th_	mep_razm_d = mep_razm_d+ "-" + "d"+con_data.min.d_endifi=i+1 : templvar.v[i].name = "mep_razm" : templvar.v[i].val = mep_razmi=i+1 : templvar.v[i].name = "mep_razm_abs" : templvar.v[i].val = mep_razm_absi=i+1 : templvar.v[i].name = "mep_razm_d" : templvar.v[i].val = mep_razm_dif con_data.type = MEP_TYPE_PEREH then	pereh_type = ""	if con_data.is_offset = 0 then		pereh_type = "К-2"	else		pereh_type = "Э"	endif	i=i+1 : templvar.v[i].name = "pereh_type" : templvar.v[i].val = pereh_typeendifif con_data.type = MEP_TYPE_TR then	tr_type = ""	if con_data.is_ravoproh then		tr_type = "90"	else		tr_type = "переходной"	endif	i=i+1 : templvar.v[i].name = "tr_type" : templvar.v[i].val = tr_typeendif !!------ Словарь со значения для подстановки ---------naen = ""FMProductName = ""if haskey(type_data.t[con_data.type]) then	if haskey(type_data.t[con_data.type].mat[con_data.group]) then		if haskey(type_data.t[con_data.type].mat[con_data.group].name[inx_type]) then			naen = type_data.t[con_data.type].mat[con_data.group].name[inx_type]			for i=1 to vardim1(templvar.v)				tname = "%" + templvar.v[i].name + "%"				if STRSTR(naen, tname)>0 then					call "macro_replace_word" parameters mrw_in_str=naen,														mrw_newWord=templvar.v[i].val,														mrw_wordToReplace = tname,														RETURNED_PARAMETERS mrw_out_str					naen = mrw_out_str				endif			next i		endif		if haskey(type_data.t[con_data.type].mat[con_data.group].vor[inx_type]) then			FMProductName = type_data.t[con_data.type].mat[con_data.group].vor[inx_type]			for i=1 to vardim1(templvar.v)				tname = "%" + templvar.v[i].name + "%"				if STRSTR(FMProductName, tname)>0 then					call "macro_replace_word" parameters mrw_in_str=FMProductName,														mrw_newWord=templvar.v[i].val,														mrw_wordToReplace = tname,														RETURNED_PARAMETERS mrw_out_str					FMProductName = mrw_out_str				endif			next i		endif	endifendifgs_list_manufacturer = ""if haskey(mep_type_data.renum) then 	if haskey(mep_type_data.renum[con_data.type]) then		gs_list_manufacturer = mep_type_data.renum[con_data.type]	endifendif!!========================= Артикул ================================FM_SerialNumber = ""if haskey(con_data.find.code) then	FM_SerialNumber = con_data.find.codeendif!!========================= Вес ================================if haskey(con_data.find.ves) then	if con_data.find.ves>EPS then 		ves = con_data.find.ves * k_ves		mep_m_ves = ves	else		is_error = 1		error_msg = error_msg  +  ";ВЕС"	endifelse	is_error = 1	error_msg = error_msg  +  ";ВЕССЛ"endifkomment = "шт"if con_data.type = MEP_TYPE_TUBE then 	komment = "м"	kol_vo_spec = mep_l	mep_m_ves = ves	ves = mep_l * mep_m_vesendifif komment = "шт" then 	mep_m_ves = ves	kol_vo_spec = 1endifPARAMETERS FM_ProductName = FMProductName, gs_list_manufacturer = gs_list_manufacturer, FM_SerialNumber = FM_SerialNumberPARAMETERS mep_m_ves = mep_m_vesPARAMETERS ves = vesPARAMETERS mep_th_elem = mep_th_elemPARAMETERS otm_elem=otm_elemPARAMETERS otm_elem_abs=otm_elem_absPARAMETERS mep_razm_abs=mep_razm_absPARAMETERS mep_razm=mep_razmPARAMETERS mep_vol=mep_s_in*mep_l*1000PARAMETERS mep_s_in=mep_s_inPARAMETERS mep_s_pokr=mep_s_elPARAMETERS mep_s_ins=mep_s_insPARAMETERS mep_s_el=mep_s_elPARAMETERS mep_l=mep_lPARAMETERS A=APARAMETERS B=BPARAMETERS ZZYZX=ZZYZXPARAMETERS kol_vo_spec = kol_vo_specPARAMETERS komment = kommentPARAMETERS obozn = oboznPARAMETERS naen = naenFM_ObjectWeightUnit = kommentPARAMETERS FM_ObjectWeightUnit = FM_ObjectWeightUnit"end_param":con_data.gost = mep_gostmep_con = con_dataPARAMETERS mep_con = mep_conPARAMETERS mep_m_gost = mep_m_gostif is_error>EPS then	error_msg = error_msg  +  ";Не подобран"	print printstr + error_msgendifPARAMETERS spec_add_param =  str("%.0", n_pop) + "\" + str("%.0", is_error) + error_msggoto "m_end""strmm":	strth = "%.0"	strmm_txt = ""	if vartype(strmm_num)=1 then		if strmm_num>EPS then 			if abs(strmm_num - int(strmm_num))>EPS then strth = "%.1"			strmm_txt = STR(strth, strmm_num)		endif	else		strmm_txt = strmm_num	endifreturn"get_element_data":	i = flag_find	inx_file = flag_find_file	if icd1>EPS then 		ic = icd1 : gosub "get_val" : con_data.find.d1 = vc/1000		strmm_num = vc : gosub "strmm" : con_data.find.d1_ = strmm_txt	endif	if ict1>EPS then 		ic = ict1 : gosub "get_val" : con_data.find.t1 = vc/1000		strmm_num = vc : gosub "strmm" : con_data.find.t1_ = strmm_txt	endif		if icd2>EPS then 		ic = icd2 : gosub "get_val" : con_data.find.d2 = vc/1000		strmm_num = vc : gosub "strmm" : con_data.find.d2_ = strmm_txt	endif		if ict2>EPS then 		ic = ict2 : gosub "get_val" : con_data.find.t2 = vc/1000		strmm_num = vc : gosub "strmm" : con_data.find.t2_ = strmm_txt	endif		if icves>EPS then 		ic = icves : gosub "get_val" : con_data.find.ves = vc	endif		if icdim1>EPS then 		ic = icdim1 : gosub "get_val" : con_data.find.dim1 = vc/1000	endif		if icdim2>EPS then 		ic = icdim2 : gosub "get_val" : con_data.find.dim2 = vc/1000	endif	if icpn>EPS then		ic = icpn : gosub "get_val" : con_data.find.pn = vc		strmm_num = vc : gosub "strmm" : con_data.find.pn_ = "PN" + strmm_txt	endif	if icdy>EPS then 		ic = icdy : gosub "get_val" : con_data.find.dy = vc		strmm_num = vc : gosub "strmm" : con_data.find.dy_ = strmm_txt	endif	if iang>EPS then 		ic = iang : gosub "get_val" : con_data.find.ang = vc		strmm_num = vc : gosub "strmm" : con_data.find.ang_ = strmm_txt	endif	if icsuff>EPS then 		ic = icsuff : gosub "get_val"		strmm_num = vc : gosub "strmm" : con_data.find.suff = strmm_txt	endif	if iccode>EPS then		ic = iccode : gosub "get_val"		strmm_num = vc : gosub "strmm" : con_data.find.code = strmm_txt	endif	if icflangeout>EPS then		ic = icflangeout : gosub "get_val" : con_data.find.flangeout = vc/1000	endif	if icsubtype>EPS then		ic = icsubtype : gosub "get_val" : con_data.find.subtype = vc	endifreturn"get_ncol":	!Получение номеров столбцов, в которых хранятся данные	icd1 = 0 : ict1 = 0 : icd2 = 0 : ict2 = 0 : icves = 0 : icdim1 = 0 : icdim2 = 0 : icpn = 0 : icdy = 0 : iang = 0 : icsuff = 0 : iccode = 0 : icflangeout = 0 : icsubtype = 0	if haskey(type_data.t[con_data.type].mat[con_data.group].d1[inx_type]) then icd1 = type_data.t[con_data.type].mat[con_data.group].d1[inx_type]	if haskey(type_data.t[con_data.type].mat[con_data.group].t1[inx_type]) then ict1 = type_data.t[con_data.type].mat[con_data.group].t1[inx_type]	if haskey(type_data.t[con_data.type].mat[con_data.group].d2[inx_type]) then icd2 = type_data.t[con_data.type].mat[con_data.group].d2[inx_type]	if haskey(type_data.t[con_data.type].mat[con_data.group].t2[inx_type]) then ict2 = type_data.t[con_data.type].mat[con_data.group].t2[inx_type]	if haskey(type_data.t[con_data.type].mat[con_data.group].ves[inx_type]) then icves = type_data.t[con_data.type].mat[con_data.group].ves[inx_type]	if haskey(type_data.t[con_data.type].mat[con_data.group].dim1[inx_type]) then icdim1 = type_data.t[con_data.type].mat[con_data.group].dim1[inx_type]	if haskey(type_data.t[con_data.type].mat[con_data.group].dim2[inx_type]) then icdim2 = type_data.t[con_data.type].mat[con_data.group].dim2[inx_type]	if haskey(type_data.t[con_data.type].mat[con_data.group].pn[inx_type]) then icpn = type_data.t[con_data.type].mat[con_data.group].pn[inx_type]	if haskey(type_data.t[con_data.type].mat[con_data.group].dy[inx_type]) then icdy = type_data.t[con_data.type].mat[con_data.group].dy[inx_type]	if haskey(type_data.t[con_data.type].mat[con_data.group].ang[inx_type]) then iang = type_data.t[con_data.type].mat[con_data.group].ang[inx_type]	if haskey(type_data.t[con_data.type].mat[con_data.group].suff[inx_type]) then icsuff = type_data.t[con_data.type].mat[con_data.group].suff[inx_type]	if haskey(type_data.t[con_data.type].mat[con_data.group].code[inx_type]) then iccode = type_data.t[con_data.type].mat[con_data.group].code[inx_type]	if haskey(type_data.t[con_data.type].mat[con_data.group].flangeout[inx_type]) then icflangeout = type_data.t[con_data.type].mat[con_data.group].flangeout[inx_type]	if haskey(type_data.t[con_data.type].mat[con_data.group].subtype[inx_type]) then icsubtype = type_data.t[con_data.type].mat[con_data.group].subtype[inx_type]return"find_variant":	!! Читаем данные о столбцах	d1 = 0 : t1 = 0 : d2 = 0 : t2 = 0 : ves = 0 : dim1 = 0 : dim2 = 0 : pn = 0 : dy = 0 : flag_find = 0	n_pop = 0	tPN = eq_code/10	d_pn = 600 : t_pn = tPN : dpn = 0	dim variant[] : variant[1]=1 : i_var = 0	flag_find = 0	n_pop = n_pop + 1	for i=1 to mep_data.file[inx_file].is_read		same_d1 = 0 : same_d2 = 0		same_t1 = 0 : same_t2 = 0		same_pn = 0 : same_ang = 0		add_t1 = 0 : add_t2 = 0 : add_pn = 0		if iang>0 then			ic = iang : gosub "get_val" : ang = vc			same_ang = abs(ang-MEP_BendAngle_)<EPS		else			same_ang = 1		endif		if same_ang then			if icd1>0 then				ic = icd1 : gosub "get_val" : d1 = vc/1000				same_d1 = abs(d1-con_data.max.d)<EPS_DIAM			else				d1 = 0				same_d1 = 1			endif			!Отсеиваем неподходящий диаметр 1			if same_d1 then				if icd2>0 then					ic = icd2 : gosub "get_val" : d2 = vc/1000					same_d2 = abs(d2-con_data.min.d)<EPS_DIAM				else					d2 = 0					same_d2 = 1				endif				!Отсеиваем неподходящий диаметр 2				if same_d2 then					if icpn>0 then						ic = icpn : gosub "get_val" : pn = vc						dpn = pn-tPN						if dpn>EPS then add_pn = 1						if abs(dpn)<EPS then same_pn = 1					else						pn = 0						same_pn = 1					endif					if (same_pn or add_pn) then						if ict1>0 and needThickEq then							ic = ict1 : gosub "get_val" : t1 = vc/1000							dt1 = t1-con_data.max.th							if abs(dt1)<EPS then same_t1 = 1 !Точное совпадение толщины							if abs(dt1)<=EPS_TH*3 then add_t1 = 1 !Если толщина +/- в допуске - добавим в список вариантов						else							t1 = 0							same_t1 = 1						endif						if (same_t1 or add_t1) then							if ict2>0 and needThickEq then								ic = ict2 : gosub "get_val" : t2 = vc/1000								dt2 = t2-con_data.min.th								if abs(dt2)<EPS then same_t2 = 1 !Точное совпадение толщины								if abs(dt2)<=EPS_TH*3 then add_t2 = 1 !Если толщина +/- в допуске - добавим в список вариантов							else								t2 = 0								same_t2 = 1							endif						endif					endif				endif			endif		endif		if same_d1 and same_d2 and same_t1 and same_t2 and same_pn and same_ang then			flag_find = i			flag_find_file = inx_file			i = mep_data.file[inx_file].is_read		else			if same_d1 and same_d2 and (add_t1 or same_t1) and (add_t2 or same_t2) and (add_pn or same_pn) and same_ang then				if same_pn or add_pn then					if (dpn-d_pn)<EPS then						d_pn = dpn						t_pn = pn					endif				endif				i_var = i_var + 1				variant[i_var]=i			endif		endif	next i	if flag_find<EPS and i_var>EPS then		dim dop[][] : i = 0		i = i + 1 : dop[i][1] = EPS : dop[i][2] = EPS_TH : dop[i][3] = t_pn		i = i + 1 : dop[i][1] = EPS_TH : dop[i][2] = EPS : dop[i][3] = t_pn		i = i + 1 : dop[i][1] = EPS : dop[i][2] = -EPS_TH : dop[i][3] = t_pn		i = i + 1 : dop[i][1] = -EPS_TH : dop[i][2] = EPS : dop[i][3] = t_pn		i = i + 1 : dop[i][1] = EPS_TH : dop[i][2] = EPS_TH : dop[i][3] = t_pn		i = i + 1 : dop[i][1] = EPS_TH : dop[i][2] = -EPS_TH : dop[i][3] = t_pn		i = i + 1 : dop[i][1] = -EPS_TH : dop[i][2] = EPS_TH : dop[i][3] = t_pn		i = i + 1 : dop[i][1] = -EPS_TH : dop[i][2] = -EPS_TH : dop[i][3] = t_pn		i = i + 1 : dop[i][1] = EPS_TH*3 : dop[i][2] = EPS_TH*3 : dop[i][3] = t_pn		i = i + 1 : dop[i][1] = EPS_TH*3 : dop[i][2] = -EPS_TH*3 : dop[i][3] = t_pn		i = i + 1 : dop[i][1] = -EPS_TH*3 : dop[i][2] = EPS_TH*3 : dop[i][3] = t_pn		i = i + 1 : dop[i][1] = -EPS_TH*3 : dop[i][2] = -EPS_TH*3 : dop[i][3] = t_pn		for p=1 to vardim1(pn_arr)			if pn_arr[p]>t_pn then				i = i + 1 : dop[i][1] = EPS : dop[i][2] = EPS_TH : dop[i][3] = pn_arr[p]				i = i + 1 : dop[i][1] = EPS_TH : dop[i][2] = EPS : dop[i][3] = pn_arr[p]				i = i + 1 : dop[i][1] = EPS : dop[i][2] = -EPS_TH : dop[i][3] = pn_arr[p]				i = i + 1 : dop[i][1] = -EPS_TH : dop[i][2] = EPS : dop[i][3] = pn_arr[p]				i = i + 1 : dop[i][1] = EPS_TH : dop[i][2] = EPS_TH : dop[i][3] = pn_arr[p]				i = i + 1 : dop[i][1] = EPS_TH : dop[i][2] = -EPS_TH : dop[i][3] = pn_arr[p]				i = i + 1 : dop[i][1] = -EPS_TH : dop[i][2] = EPS_TH : dop[i][3] = pn_arr[p]				i = i + 1 : dop[i][1] = -EPS_TH : dop[i][2] = -EPS_TH : dop[i][3] = pn_arr[p]			endif		next p		for p=1 to vardim1(pn_arr)			if pn_arr[p]<=t_pn then				i = i + 1 : dop[i][1] = EPS : dop[i][2] = EPS_TH : dop[i][3] = pn_arr[p]				i = i + 1 : dop[i][1] = EPS_TH : dop[i][2] = EPS : dop[i][3] = pn_arr[p]				i = i + 1 : dop[i][1] = EPS : dop[i][2] = -EPS_TH : dop[i][3] = pn_arr[p]				i = i + 1 : dop[i][1] = -EPS_TH : dop[i][2] = EPS : dop[i][3] = pn_arr[p]				i = i + 1 : dop[i][1] = EPS_TH : dop[i][2] = EPS_TH : dop[i][3] = pn_arr[p]				i = i + 1 : dop[i][1] = EPS_TH : dop[i][2] = -EPS_TH : dop[i][3] = pn_arr[p]				i = i + 1 : dop[i][1] = -EPS_TH : dop[i][2] = EPS_TH : dop[i][3] = pn_arr[p]				i = i + 1 : dop[i][1] = -EPS_TH : dop[i][2] = -EPS_TH : dop[i][3] = pn_arr[p]			endif		next p		for id=1 to vardim1(dop)			tEPS_TH1 = dop[id][1]			tEPS_TH2 = dop[id][2]			t_pn = dop[id][3]			for iv=1 to vardim1(variant)				n_pop = n_pop + 1				i = variant[iv]				same_t1 = 0 : same_t2 = 0				same_pn = 0				if icpn>0 then					ic = icpn : gosub "get_val" : pn = vc					if abs(pn-t_pn)<EPS then same_pn = 1				else					same_pn = 1				endif				if same_pn then					if ict1>0 and needThickEq then						ic = ict1 : gosub "get_val"						dt = vc/1000-con_data.max.th						if tEPS_TH1<EPS then							more_t = 1						else							more_t = (dt>EPS)						endif						same_t1 = abs(dt)<=abs(tEPS_TH1) and more_t					else						same_t1 = 1					endif					if same_t1 then						if ict2>0 and needThickEq then							ic = ict2 : gosub "get_val"							dt = vc/1000-con_data.min.th							if tEPS_TH2<EPS then								more_t = 1							else								more_t = (dt>EPS)							endif							same_t2 = abs(dt)<=abs(tEPS_TH2) and more_t						else							same_t2 = 1						endif					endif				endif				if same_t1 and same_t2 and same_pn then					flag_find = i					flag_find_file = inx_file					iv = vardim1(variant)				endif			next iv			if flag_find>EPS then id=vardim1(dop)		next id	endifreturn"get_val":	!Получение данных из i строки столбца ic	vc = 1	if abs(ic-1)<EPS then		vc = mep_data.file[inx_file].v1[i]		return	endif	if abs(ic-2)<EPS then		vc = mep_data.file[inx_file].v2[i]		return	endif	if abs(ic-3)<EPS then		vc = mep_data.file[inx_file].v3[i]		return	endif	if abs(ic-4)<EPS then		vc = mep_data.file[inx_file].v4[i]		return	endif	if abs(ic-5)<EPS then		vc = mep_data.file[inx_file].v5[i]		return	endif	if abs(ic-6)<EPS then		vc = mep_data.file[inx_file].v6[i]		return	endif	if abs(ic-7)<EPS then		vc = mep_data.file[inx_file].v7[i]		return	endif	if abs(ic-8)<EPS then		vc = mep_data.file[inx_file].v8[i]		return	endif	if abs(ic-9)<EPS then		vc = mep_data.file[inx_file].v9[i]		return	endif	if abs(ic-10)<EPS then		vc = mep_data.file[inx_file].v10[i]		return	endif	if abs(ic-11)<EPS then		vc = mep_data.file[inx_file].v11[i]		return	endif	if abs(ic-12)<EPS then		vc = mep_data.file[inx_file].v12[i]		return	endif	if abs(ic-13)<EPS then		vc = mep_data.file[inx_file].v13[i]		return	endif	if abs(ic-14)<EPS then		vc = mep_data.file[inx_file].v14[i]		return	endif	if abs(ic-15)<EPS then		vc = mep_data.file[inx_file].v15[i]		return	endif	if abs(ic-16)<EPS then		vc = mep_data.file[inx_file].v16[i]		return	endif	if abs(ic-17)<EPS then		vc = mep_data.file[inx_file].v17[i]		return	endif	if abs(ic-18)<EPS then		vc = mep_data.file[inx_file].v18[i]		return	endif	if abs(ic-19)<EPS then		vc = mep_data.file[inx_file].v19[i]		return	endif	if abs(ic-20)<EPS then		vc = mep_data.file[inx_file].v20[i]		return	endifreturn"get_inx_file":	inx_file = 0	nf = vardim1(mep_data.filelist)	for inx=1 to nf		if fname = mep_data.filelist[inx] then			inx_file = inx			inx = nf		endif	next inx	if inx_file = 0 then printstr = printstr +  " Файл не найден -" + fnamereturn"m_end":