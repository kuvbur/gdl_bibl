!!!!=============================== МАТЕРИАЛЫ =================================MEP_UNKNOW = 0MEP_ST3 = 1MEP_AISI = 2MEP_09G2S = 3MEP_PVC = 4MEP_GSH = 5!!!!============================= ТИПЫ ЭЛЕМЕНТОВ ===============================MEP_TYPE_TUBE = 1MEP_TYPE_PEREH = 2MEP_TYPE_TR = 3MEP_TYPE_OTVOD = 4!!!!========================== ДАННЫЕ ДЛЯ ПОДБОРА ===============================dict type_data!!type_data.t[ТИП_ЭЛ].mat[МАТЕРИАЛ].gost[i] = "ГОСТ"!!type_data.t[ТИП_ЭЛ].mat[МАТЕРИАЛ].fname[i] = "ИМЯ ФАЙЛА"!!type_data.t[ТИП_ЭЛ].mat[МАТЕРИАЛ].d1[i] = 2												!Диаметр соединения 1!!type_data.t[ТИП_ЭЛ].mat[МАТЕРИАЛ].d2[i] = 4												!Диаметр соединения 2!!type_data.t[ТИП_ЭЛ].mat[МАТЕРИАЛ].t1[i] = 3												!Толщина соединения 1!!type_data.t[ТИП_ЭЛ].mat[МАТЕРИАЛ].t2[i] = 5												!Толщина соединения 2!!type_data.t[ТИП_ЭЛ].mat[МАТЕРИАЛ].ves[i] = 9												!Столбец с весом!!type_data.t[ТИП_ЭЛ].mat[МАТЕРИАЛ].dim1[i] = 6												!Столбец с размером 1!!type_data.t[ТИП_ЭЛ].mat[МАТЕРИАЛ].dim2[i] = 7												!Столбец с размером 2!!type_data.t[ТИП_ЭЛ].mat[МАТЕРИАЛ].pn[i] = 8												!Столбец давлением!!type_data.t[ТИП_ЭЛ].mat[МАТЕРИАЛ].dy[i] = 1												!Столбец ДУ!!type_data.t[ТИП_ЭЛ].mat[МАТЕРИАЛ].name[i] = "Тройник %mep_razm_abs%-%pn%-%mep_m_gost%"	!Шаблон строки наименования!!!------------------------------- Трубы -----------------------------------------i=0i = i+1type_data.t[MEP_TYPE_TUBE].mat[MEP_ST3].gost[i] = "ГОСТ 17378-2001"type_data.t[MEP_TYPE_TUBE].mat[MEP_ST3].fname[i] = "ду_ЭСБШ"type_data.t[MEP_TYPE_TUBE].mat[MEP_ST3].d1[i] = 2type_data.t[MEP_TYPE_TUBE].mat[MEP_ST3].t1[i] = 3type_data.t[MEP_TYPE_TUBE].mat[MEP_ST3].ves[i] = 4type_data.t[MEP_TYPE_TUBE].mat[MEP_ST3].name[i] = "Труба %mep_razm_abs%-%mep_m_gost%"i = i+1type_data.t[MEP_TYPE_TUBE].mat[MEP_ST3].gost[i] = "ГОСТ 3262-75"type_data.t[MEP_TYPE_TUBE].mat[MEP_ST3].fname[i] = "ду_ВГ"type_data.t[MEP_TYPE_TUBE].mat[MEP_ST3].d1[i] = 2type_data.t[MEP_TYPE_TUBE].mat[MEP_ST3].t1[i] = 3type_data.t[MEP_TYPE_TUBE].mat[MEP_ST3].ves[i] = 4type_data.t[MEP_TYPE_TUBE].mat[MEP_ST3].name[i] = "Труба %mep_razm_abs%-%mep_m_gost%"i=0i = i+1type_data.t[MEP_TYPE_TUBE].mat[MEP_PVC].gost[i] = "ГОСТ 32415-2013"type_data.t[MEP_TYPE_TUBE].mat[MEP_PVC].fname[i] = "ду_PVC-U"type_data.t[MEP_TYPE_TUBE].mat[MEP_PVC].d1[i] = 2type_data.t[MEP_TYPE_TUBE].mat[MEP_PVC].t1[i] = 3type_data.t[MEP_TYPE_TUBE].mat[MEP_PVC].ves[i] = 4type_data.t[MEP_TYPE_TUBE].mat[MEP_PVC].name[i] = "Труба PVC-U SDR 11 %mep_razm_abs% %eq_plant%"i=0i = i+1type_data.t[MEP_TYPE_TUBE].mat[MEP_AISI].gost[i] = "ГОСТ 17378-2001"type_data.t[MEP_TYPE_TUBE].mat[MEP_AISI].fname[i] = "ду_din"type_data.t[MEP_TYPE_TUBE].mat[MEP_AISI].d1[i] = 2type_data.t[MEP_TYPE_TUBE].mat[MEP_AISI].t1[i] = 3type_data.t[MEP_TYPE_TUBE].mat[MEP_AISI].ves[i] = 4type_data.t[MEP_TYPE_TUBE].mat[MEP_AISI].name[i] = "Труба %mep_razm_abs%-%mep_m_gost%"i=0i = i+1type_data.t[MEP_TYPE_TUBE].mat[MEP_09G2S].gost[i] = "ГОСТ 17378-2001"type_data.t[MEP_TYPE_TUBE].mat[MEP_09G2S].fname[i] = "ду_09Г2С"type_data.t[MEP_TYPE_TUBE].mat[MEP_09G2S].d1[i] = 2type_data.t[MEP_TYPE_TUBE].mat[MEP_09G2S].t1[i] = 3type_data.t[MEP_TYPE_TUBE].mat[MEP_09G2S].ves[i] = 4type_data.t[MEP_TYPE_TUBE].mat[MEP_09G2S].name[i] = "Труба %suff%%mep_razm_abs%-%mep_m_gost%"!!!------------------------------- Тройники ----------------------------------------i=0i = i+1type_data.t[MEP_TYPE_TR].mat[MEP_ST3].gost[i] = "ГОСТ 17378-2001"type_data.t[MEP_TYPE_TR].mat[MEP_ST3].fname[i] = "трой_и2_17376"type_data.t[MEP_TYPE_TR].mat[MEP_ST3].d1[i] = 2type_data.t[MEP_TYPE_TR].mat[MEP_ST3].d2[i] = 4type_data.t[MEP_TYPE_TR].mat[MEP_ST3].t1[i] = 3type_data.t[MEP_TYPE_TR].mat[MEP_ST3].t2[i] = 5type_data.t[MEP_TYPE_TR].mat[MEP_ST3].ves[i] = 9type_data.t[MEP_TYPE_TR].mat[MEP_ST3].dim1[i] = 6type_data.t[MEP_TYPE_TR].mat[MEP_ST3].dim2[i] = 7type_data.t[MEP_TYPE_TR].mat[MEP_ST3].dy[i] = 1type_data.t[MEP_TYPE_TR].mat[MEP_ST3].name[i] = "Тройник %mep_razm_abs%-%mep_m_gost%"i = i+1type_data.t[MEP_TYPE_TR].mat[MEP_ST3].gost[i] = "ОСТ 34 10.764-97"type_data.t[MEP_TYPE_TR].mat[MEP_ST3].fname[i] = "трой_ОСТ_34_10_764_97"type_data.t[MEP_TYPE_TR].mat[MEP_ST3].d1[i] = 2type_data.t[MEP_TYPE_TR].mat[MEP_ST3].d2[i] = 4type_data.t[MEP_TYPE_TR].mat[MEP_ST3].t1[i] = 3type_data.t[MEP_TYPE_TR].mat[MEP_ST3].t2[i] = 5type_data.t[MEP_TYPE_TR].mat[MEP_ST3].ves[i] = 9type_data.t[MEP_TYPE_TR].mat[MEP_ST3].dim1[i] = 6type_data.t[MEP_TYPE_TR].mat[MEP_ST3].dim2[i] = 7type_data.t[MEP_TYPE_TR].mat[MEP_ST3].pn[i] = 8type_data.t[MEP_TYPE_TR].mat[MEP_ST3].dy[i] = 1type_data.t[MEP_TYPE_TR].mat[MEP_ST3].name[i] = "Тройник %mep_razm_abs%-%pn%-%mep_m_gost%"i = i+1type_data.t[MEP_TYPE_TR].mat[MEP_ST3].gost[i] = "ОСТ 34 10.762-97"type_data.t[MEP_TYPE_TR].mat[MEP_ST3].fname[i] = "трой_ОСТ_34_10_762_97"type_data.t[MEP_TYPE_TR].mat[MEP_ST3].d1[i] = 2type_data.t[MEP_TYPE_TR].mat[MEP_ST3].d2[i] = 4type_data.t[MEP_TYPE_TR].mat[MEP_ST3].t1[i] = 3type_data.t[MEP_TYPE_TR].mat[MEP_ST3].t2[i] = 5type_data.t[MEP_TYPE_TR].mat[MEP_ST3].ves[i] = 9type_data.t[MEP_TYPE_TR].mat[MEP_ST3].dim1[i] = 6type_data.t[MEP_TYPE_TR].mat[MEP_ST3].dim2[i] = 7type_data.t[MEP_TYPE_TR].mat[MEP_ST3].pn[i] = 8type_data.t[MEP_TYPE_TR].mat[MEP_ST3].dy[i] = 1type_data.t[MEP_TYPE_TR].mat[MEP_ST3].name[i] = "Тройник равнопроходный %mep_razm_abs%-%pn%-%mep_m_gost%"type_data.t[MEP_TYPE_TR].mat[MEP_AISI] = type_data.t[MEP_TYPE_TR].mat[MEP_ST3]type_data.t[MEP_TYPE_TR].mat[MEP_09G2S] = type_data.t[MEP_TYPE_TR].mat[MEP_ST3]!!!------------------------------- Переходы ----------------------------------------i=0i = i+1type_data.t[MEP_TYPE_PEREH].mat[MEP_ST3].gost[i] = "ГОСТ 17378-2001"type_data.t[MEP_TYPE_PEREH].mat[MEP_ST3].fname[i] = "переход_и2_17378"type_data.t[MEP_TYPE_PEREH].mat[MEP_ST3].d1[i] = 2type_data.t[MEP_TYPE_PEREH].mat[MEP_ST3].d2[i] = 4type_data.t[MEP_TYPE_PEREH].mat[MEP_ST3].t1[i] = 3type_data.t[MEP_TYPE_PEREH].mat[MEP_ST3].t2[i] = 5type_data.t[MEP_TYPE_PEREH].mat[MEP_ST3].ves[i] = 7type_data.t[MEP_TYPE_PEREH].mat[MEP_ST3].dim1[i] = 6type_data.t[MEP_TYPE_PEREH].mat[MEP_ST3].dy[i] = 1type_data.t[MEP_TYPE_PEREH].mat[MEP_ST3].name[i] = "Переход %pereh_type%-%mep_razm_abs%-%mep_m_gost%"i = i+1type_data.t[MEP_TYPE_PEREH].mat[MEP_ST3].gost[i] = "ОСТ 34 10.753-97"type_data.t[MEP_TYPE_PEREH].mat[MEP_ST3].fname[i] = "переход_ОСТ_34_10_764_97"type_data.t[MEP_TYPE_PEREH].mat[MEP_ST3].d1[i] = 2type_data.t[MEP_TYPE_PEREH].mat[MEP_ST3].d2[i] = 4type_data.t[MEP_TYPE_PEREH].mat[MEP_ST3].t1[i] = 3type_data.t[MEP_TYPE_PEREH].mat[MEP_ST3].t2[i] = 5type_data.t[MEP_TYPE_PEREH].mat[MEP_ST3].ves[i] = 7type_data.t[MEP_TYPE_PEREH].mat[MEP_ST3].dim1[i] = 6type_data.t[MEP_TYPE_PEREH].mat[MEP_ST3].dy[i] = 1type_data.t[MEP_TYPE_PEREH].mat[MEP_ST3].pn[i] = 8type_data.t[MEP_TYPE_PEREH].mat[MEP_ST3].name[i] = "Переход %pereh_type%-%dy%-%mep_m_gost%"type_data.t[MEP_TYPE_PEREH].mat[MEP_AISI] = type_data.t[MEP_TYPE_PEREH].mat[MEP_ST3]type_data.t[MEP_TYPE_PEREH].mat[MEP_09G2S] = type_data.t[MEP_TYPE_PEREH].mat[MEP_ST3]!!!------------------------------- Повороты ----------------------------------------i=0i = i+1type_data.t[MEP_TYPE_OTVOD].mat[MEP_ST3].gost[i] = "ГОСТ 17375-2001"type_data.t[MEP_TYPE_OTVOD].mat[MEP_ST3].fname[i] = "отвод_и2_17375"type_data.t[MEP_TYPE_OTVOD].mat[MEP_ST3].d1[i] = 2type_data.t[MEP_TYPE_OTVOD].mat[MEP_ST3].t1[i] = 3type_data.t[MEP_TYPE_OTVOD].mat[MEP_ST3].ves[i] = 5type_data.t[MEP_TYPE_OTVOD].mat[MEP_ST3].dim1[i] = 4type_data.t[MEP_TYPE_OTVOD].mat[MEP_ST3].dy[i] = 1type_data.t[MEP_TYPE_OTVOD].mat[MEP_ST3].name[i] = "Отвод %MEP_BendAngle%-%mep_razm_abs%-%mep_m_gost%"i = i+1type_data.t[MEP_TYPE_OTVOD].mat[MEP_ST3].gost[i] = "ОСТ 34 10.699-97"type_data.t[MEP_TYPE_OTVOD].mat[MEP_ST3].fname[i] = "отвод_ОСТ_34_10_699_9"type_data.t[MEP_TYPE_OTVOD].mat[MEP_ST3].d1[i] = 2type_data.t[MEP_TYPE_OTVOD].mat[MEP_ST3].t1[i] = 3type_data.t[MEP_TYPE_OTVOD].mat[MEP_ST3].ves[i] = 6type_data.t[MEP_TYPE_OTVOD].mat[MEP_ST3].dim1[i] = 4type_data.t[MEP_TYPE_PEREH].mat[MEP_ST3].pn[i] = 5type_data.t[MEP_TYPE_OTVOD].mat[MEP_ST3].dy[i] = 1type_data.t[MEP_TYPE_OTVOD].mat[MEP_ST3].name[i] = "Отвод %MEP_BendAngle%-%mep_razm_abs%-%mep_m_gost%"i = i+1type_data.t[MEP_TYPE_OTVOD].mat[MEP_ST3].gost[i] = "ОСТ 34 10.752-97"type_data.t[MEP_TYPE_OTVOD].mat[MEP_ST3].fname[i] = "отвод_ОСТ_34_10_752_97"type_data.t[MEP_TYPE_OTVOD].mat[MEP_ST3].d1[i] = 2type_data.t[MEP_TYPE_OTVOD].mat[MEP_ST3].t1[i] = 3type_data.t[MEP_TYPE_OTVOD].mat[MEP_ST3].ves[i] = 6type_data.t[MEP_TYPE_OTVOD].mat[MEP_ST3].ang[i] = 7type_data.t[MEP_TYPE_OTVOD].mat[MEP_ST3].dim1[i] = 4type_data.t[MEP_TYPE_OTVOD].mat[MEP_ST3].dy[i] = 1type_data.t[MEP_TYPE_PEREH].mat[MEP_ST3].pn[i] = 5type_data.t[MEP_TYPE_OTVOD].mat[MEP_ST3].name[i] = "Колено %MEP_BendAngle% %mep_razm_abs%-%pn% %dy% %mep_m_gost%"type_data.t[MEP_TYPE_OTVOD].mat[MEP_AISI] = type_data.t[MEP_TYPE_OTVOD].mat[MEP_ST3]type_data.t[MEP_TYPE_OTVOD].mat[MEP_09G2S] = type_data.t[MEP_TYPE_OTVOD].mat[MEP_ST3]dict templvardim pn_arr[] : i=0i=i+1 : pn_arr[i] = 0.6i=i+1 : pn_arr[i] = 1i=i+1 : pn_arr[i] = 1.6i=i+1 : pn_arr[i] = 2.5i=i+1 : pn_arr[i] = 4i=i+1 : pn_arr[i] = 6i=i+1 : pn_arr[i] = 10i=i+1 : pn_arr[i] = 16i=i+1 : pn_arr[i] = 25call "mep_set_pressure" parameters allreload_txt = 0dict con_datadim mrf2d_read_file[] : mrf2d_read_file[1] = ""dim mrf2d_koeff[][] : mrf2d_koeff[1][1] = 1dict mrf2d_readed_paramdict templvar!!-------------------------------- Читаем размеры ----------------------------con_data.c[1].d = MEP_NumConnectionData[1][12]con_data.c[1].tdn = MEP_StrConnectionData[1][4] con_data.c[1].th = MEP_NumConnectionData[1][14]strmm_num = con_data.c[1].d*1000 : gosub "strmm" : con_data.c[1].d_ = strmm_txtstrmm_num = con_data.c[1].th*1000 : gosub "strmm" : con_data.c[1].th_ = strmm_txtcon_data.max = con_data.c[1]con_data.min = con_data.c[1]for i = 2 to MEP_NumberConnections	if i<=vardim1(MEP_NumConnectionData) then		con_data.c[i].d = MEP_NumConnectionData[i][12] 		con_data.c[i].tdn = MEP_StrConnectionData[i][4] 		con_data.c[i].th = MEP_NumConnectionData[i][14]		strmm_num = con_data.c[i].d*1000 : gosub "strmm" : con_data.c[i].d_ = strmm_txt		strmm_num = con_data.c[i].th*1000 : gosub "strmm" : con_data.c[i].th_ = strmm_txt		if con_data.c[i].d>con_data.max.d then con_data.max = con_data.c[i]		if con_data.c[i].d<con_data.max.d then con_data.min = con_data.c[i]	endifnext i!!------------------------------ Материал -------------------------------------call "mep_get_material" parameters all returned_parameters mep_get_ma_name, mep_get_ma_ro, mep_get_ma_groupif mep_get_ma_group>EPS then	mep_m_gost = mep_get_ma_name	con_data.group = mep_get_ma_groupelse	con_data.group = MEP_ST3	error_msg = error_msg  +  ";nomat"endif!!------------------------------ Определяем типы ------------------------------con_data.is_ravoproh = 1con_data.is_offset = 0con_data.type = MEP_TYPE_TUBEif abs(con_data.max.d-con_data.min.d)>EPS and STRSTR(mep_macro_name, "Переход")>0 then	con_data.type = MEP_TYPE_PEREH	con_data.is_ravoproh = 0	if abs(MEP_offset_z)>EPS or abs(MEP_offset_y)>EPS then con_data.is_offset = 1endifif STRSTR(mep_macro_name, "Тройник")>0 then 	if abs(con_data.max.d-con_data.min.d)>EPS then con_data.is_ravoproh = 0	con_data.type = MEP_TYPE_TRendifif STRSTR(mep_macro_name, "Врезка")>0 then	con_data.type = MEP_TYPE_OTVOD	if con_data.group = MEP_GSH then con_data.type = MEP_TYPE_TUBEendif!!Список доступных вариантовis_error = 0if haskey(type_data.t) then	if haskey(type_data.t[con_data.type]) then		if haskey(type_data.t[con_data.type].mat) then			if haskey(type_data.t[con_data.type].mat[con_data.group]) then				if haskey(type_data.t[con_data.type].mat[con_data.group].gost) then					if vardim1(type_data.t[con_data.type].mat[con_data.group].gost)>1 then						values "mep_gost" "Авто", type_data.t[con_data.type].mat[con_data.group].gost					else						mep_gost = "Авто"						PARAMETERS mep_gost = mep_gost						LOCK "mep_gost"					endif				else					error_msg = error_msg  +  ";gost"					is_error = 1				endif			else				error_msg = error_msg  +  ";matgr" + str("%.0", con_data.group)				is_error = 1			endif		else			error_msg = error_msg  +  ";mattype" + str("%.0", con_data.type)			is_error = 1		endif	else		error_msg = error_msg  +  ";type" + str("%.0", con_data.type)		is_error = 1	endifelse	error_msg = error_msg  +  ";all"	is_error = 1endifif is_error>EPS then goto "end_param"!!Читаем файлы сортаментовinx_type = 1if mep_gost <> "Авто" then	for i=1 to vardim1(type_data.t[con_data.type].mat[con_data.group].gost)		if mep_gost = type_data.t[con_data.type].mat[con_data.group].gost[i] then			inx_type = i			i = vardim1(type_data.t[con_data.type].mat[con_data.group].gost)		endif	next i	mrf2d_read_file[1] = type_data.t[con_data.type].mat[con_data.group].fname[inx_type]else	mrf2d_read_file = type_data.t[con_data.type].mat[con_data.group].fnameendifreload_data = 0if not(haskey(mep_data.file)) then reload_data = 1if not(haskey(mep_con.gost)) then 	reload_data = 1else	if mep_con.gost<>mep_gost then 		reload_data = 1	endifendifif not(haskey(mep_data.is_read)) then	reload_data = 1else	if mep_data.is_read = 0 then		reload_data = 1	endifendifif reload_data > EPS then	call "macro_read_file2dict" parameters all mrf2d_read_file = mrf2d_read_file, mrf2d_koeff = mrf2d_koeff returned_parameters mrf2d_readed_param	is_error = 0	if not(haskey(mrf2d_readed_param.is_read)) then		is_error = 1		error_msg = error_msg  +  ";Ф.err-"	else		if mrf2d_readed_param.is_read = 0 then			is_error = 1			error_msg = error_msg  +  ";Ф.all-"		endif	endif	if is_error>EPS then goto "end_param"	for i=1 to vardim1(mrf2d_read_file)		if haskey(mrf2d_readed_param.file) then			if haskey(mrf2d_readed_param.file[i].is_read) then				if mrf2d_readed_param.file[i].is_read=0 then					is_error = 1					error_msg = error_msg  +  ";Ф."+ mrf2d_read_file[i] +"-"				endif			else				is_error = 1				error_msg = error_msg  +  ";Ф."+ mrf2d_read_file[i] +"-"			endif		else			is_error = 1			error_msg = error_msg  +  ";Ф."+ mrf2d_read_file[i] +"-"		endif	next i	if is_error<EPS then		mep_data =  mrf2d_readed_param		PARAMETERS mep_data = mep_data	else		goto "end_param"	endifendif!!Подбираем элементis_error = 0flag_find = 0if mep_gost <> "Авто" then	inx_file = 1	flag_find_file = 1	gosub "get_ncol"	gosub "find_variant"else	for inx_file=1 to vardim1(mrf2d_read_file)		inx_type = inx_file		gosub "get_ncol"		gosub "find_variant"		if flag_find>EPS then			flag_find_file = inx_file			inx_file = vardim1(mrf2d_read_file)		endif	next inx_fileendifif flag_find<EPS then	is_error = 1	goto "end_param"endifgosub "get_ncol"gosub "get_element_data"!!================== Геометрия для фитингов =======================if con_data.type = MEP_TYPE_TR then	if haskey(con_data.find.dim1) and haskey(con_data.find.dim2) then		if con_data.find.dim1>EPS and con_data.find.dim2>EPS then			MEP_StraightLength = con_data.find.dim1			ConLength_3 = con_data.find.dim2			PARAMETERS MEP_StraightLength = MEP_StraightLength, ConLength_3 = ConLength_3			LOCK "ConLength_3", "MEP_StraightLength"		endif	endifendifif con_data.type = MEP_TYPE_PEREH then	if haskey(con_data.find.dim1) then		if con_data.find.dim1>EPS then			MEP_StraightLength = con_data.find.dim1			PARAMETERS MEP_StraightLength = MEP_StraightLength			LOCK "MEP_StraightLength"		endif	endifendifif con_data.type = MEP_TYPE_OTVOD then	if haskey(con_data.find.dim1) then		if con_data.find.dim1>EPS then			MEP_BendRadius = con_data.find.dim1			PARAMETERS MEP_BendRadius = MEP_BendRadius			LOCK "MEP_BendRadius"		endif	endifendif!!---------------------------- Длина ------------------------------k_ves = 1MEP_BendAngle_ = 0if STRSTR(mep_macro_name, "Врезка")>0 then	_MEP_BendAngle = MEP_BendAngle	if (_MEP_BendAngle-180)>EPS then		MEP_BendAngle_ = 180		_MEP_BendAngle = _MEP_BendAngle - MEP_BendAngle_	endif	if (_MEP_BendAngle-90)>EPS then		MEP_BendAngle_ = 180		_MEP_BendAngle = _MEP_BendAngle - MEP_BendAngle_	endif	if (_MEP_BendAngle-60)>EPS then		MEP_BendAngle_ = 90		_MEP_BendAngle = _MEP_BendAngle - MEP_BendAngle_	endif	if (_MEP_BendAngle-45)>EPS then		MEP_BendAngle_ = 60		_MEP_BendAngle = _MEP_BendAngle - MEP_BendAngle_	endif	if _MEP_BendAngle>EPS then		MEP_BendAngle_ = 45	endif	if MEP_BendAngle_>91 then k_ves = 2	if MEP_BendAngle_<89 then k_ves = 1/1.5	if MEP_BendAngle_<46 then k_ves = 1/2endifmep_l = MEP_StraightLengthif mep_l<EPS then mep_l = MEP_BendRadius*(PI/180)*MEP_BendAngleif mep_l<EPS then mep_l = 100/1000mep_l = round_int(mep_l*100)/100!!---------------------- Периметры и площади ------------------------------mep_s_in = 3.14159 * con_data.max.d * con_data.max.d / 4mep_s_perim = 3.14159 * con_data.max.dmep_s_ins_perim = 3.14159 * (con_data.max.d+MEP_InsThickness*2)mep_s_el = mep_s_perim*mep_lmep_s_sech = 0.7853975*(con_data.max.th*con_data.max.th+2*con_data.max.th*con_data.max.d)mep_s_ins = mep_s_ins_perim*mep_l*MEP_InsShowmep_s_el = round_int(mep_s_el*100)/100mep_s_ins = round_int(mep_s_ins*100)/100!!----------------------------- Отметки, размеры ------------------------------otm_elem = SYMB_POS_Zotm_elem_abs = otm_elemA = mep_lB = con_data.max.dZZYZX  = con_data.max.d!!================== Обозначение(ГОСТ) =======================templvar.v[1].name = "suff"templvar.v[1].val = ""obozn = type_data.t[con_data.type].mat[con_data.group].gost[inx_type]if con_data.group = MEP_09G2S and con_data.type = MEP_TYPE_TUBE then	if (con_data.max.d-0.63)<EPS then		obozn = "ГОСТ 8732-78"	else		obozn = "ГОСТ 31447-2012"		templvar.v[1].val = "2-"	endifendif!!===================== Наименование =======================!!------ Словарь со значения для подстановки ---------i=1i=i+1 : templvar.v[i].name = "mep_m_gost" : templvar.v[i].val = mep_m_gosti=i+1 : templvar.v[i].name = "MEP_BendAngle" : templvar.v[i].val = str("%.0", MEP_BendAngle_)if haskey(con_data.find.d1_) then	i=i+1 : templvar.v[i].name = "d1" : templvar.v[i].val = con_data.find.d1_	con_data.max.d_ = con_data.find.d1_endifif haskey(con_data.find.d2_) then	i=i+1 : templvar.v[i].name = "d2" : templvar.v[i].val = con_data.find.d2_	con_data.min.d_ = con_data.find.d2_endifif haskey(con_data.find.t1_) then	i=i+1 : templvar.v[i].name = "t1" : templvar.v[i].val = con_data.find.t1_	con_data.max.th_ = con_data.find.t1_endifif haskey(con_data.find.t2_) then	i=i+1 : templvar.v[i].name = "t2" : templvar.v[i].val = con_data.find.t2_	con_data.min.th_ = con_data.find.t2_endifif haskey(con_data.find.dy_) then	i=i+1 : templvar.v[i].name = "dy" : templvar.v[i].val = con_data.find.dy_endifi=i+1 : templvar.v[i].name = "pn"if haskey(con_data.find.pn_) then	templvar.v[i].val = con_data.find.pn_else	templvar.v[i].val = eq_plantendifmep_razm = con_data.max.tdnmep_razm_abs = con_data.max.d_ + "x" + con_data.max.th_if con_data.type = MEP_TYPE_PEREH or (con_data.type = MEP_TYPE_TR and not(con_data.is_ravoproh)) then	mep_razm = mep_razm + " - " + con_data.min.tdn	mep_razm_abs = mep_razm_abs+"-" + con_data.min.d_+ "x" + con_data.min.th_endifi=i+1 : templvar.v[i].name = "mep_razm_abs" : templvar.v[i].val = mep_razm_abspereh_type = ""if con_data.is_offset = 0 then	pereh_type = "К-2"else	pereh_type = "Э"endifi=i+1 : templvar.v[i].name = "pereh_type" : templvar.v[i].val = pereh_type!!------ Словарь со значения для подстановки ---------naen = ""naen = type_data.t[con_data.type].mat[con_data.group].name[inx_type]for i=1 to vardim1(templvar.v)	tname = "%" + templvar.v[i].name + "%"	if STRSTR(naen, tname)>0 then		call "macro_replace_word" parameters mrw_in_str=naen,											mrw_newWord=templvar.v[i].val,											mrw_wordToReplace = tname,											RETURNED_PARAMETERS mrw_out_str		naen = mrw_out_str	endifnext i!!========================= Вес ================================if haskey(con_data.find.ves) then	if con_data.find.ves>EPS then 		ves = con_data.find.ves * k_ves		mep_m_ves = ves	else		is_error = 1		error_msg = error_msg  +  ";ВЕС"	endifelse	is_error = 1	error_msg = error_msg  +  ";ВЕССЛ"endifif con_data.type = MEP_TYPE_TUBE then 	komment = "м."	kol_vo_spec = mep_l	mep_m_ves = ves	ves = mep_l * mep_m_vesendifif komment = "шт." then 	mep_m_ves = ves	kol_vo_spec = 1endifPARAMETERS mep_m_ves = mep_m_vesPARAMETERS ves = vesPARAMETERS mep_th_elem = mep_th_elemPARAMETERS otm_elem=otm_elemPARAMETERS otm_elem_abs=otm_elem_absPARAMETERS mep_razm_abs=mep_razm_absPARAMETERS mep_razm=mep_razmPARAMETERS mep_vol=mep_s_in*mep_l*1000PARAMETERS mep_s_in=mep_s_inPARAMETERS mep_s_pokr=mep_s_elPARAMETERS mep_s_ins=mep_s_insPARAMETERS mep_s_el=mep_s_elPARAMETERS mep_l=mep_lPARAMETERS A=APARAMETERS B=BPARAMETERS ZZYZX=ZZYZXPARAMETERS kol_vo_spec = kol_vo_specPARAMETERS komment = kommentPARAMETERS obozn = oboznPARAMETERS naen = naen"end_param":con_data.gost = mep_gostmep_con = con_dataPARAMETERS mep_con = mep_conPARAMETERS mep_m_gost = mep_m_gostif is_error>EPS then error_msg = error_msg  +  ";Не подобран"PARAMETERS spec_add_param =  str("%.0", n_pop) + "\" + str("%.0", is_error) + error_msgend"strmm":	strth = "%.0"	strmm_txt = ""	if vartype(strmm_num)=1 then		if strmm_num>EPS then 			if abs(strmm_num - int(strmm_num))>EPS then strth = "%.1"			strmm_txt = STR(strth, strmm_num)		endif	else		strmm_txt = strmm_num	endifreturn"get_element_data":	i = flag_find	inx_file = flag_find_file	if icd1>EPS then 		ic = icd1 : gosub "get_val" : con_data.find.d1 = vc/1000		strmm_num = vc : gosub "strmm" : con_data.find.d1_ = strmm_txt	endif	if ict1>EPS then 		ic = ict1 : gosub "get_val" : con_data.find.t1 = vc/1000		strmm_num = vc : gosub "strmm" : con_data.find.t1_ = strmm_txt	endif		if icd2>EPS then 		ic = icd2 : gosub "get_val" : con_data.find.d2 = vc/1000		strmm_num = vc : gosub "strmm" : con_data.find.d2_ = strmm_txt	endif		if ict2>EPS then 		ic = ict2 : gosub "get_val" : con_data.find.t2 = vc/1000		strmm_num = vc : gosub "strmm" : con_data.find.t2_ = strmm_txt	endif		if icves>EPS then 		ic = icves : gosub "get_val" : con_data.find.ves = vc	endif		if icdim1>EPS then 		ic = icdim1 : gosub "get_val" : con_data.find.dim1 = vc/1000	endif		if icdim2>EPS then 		ic = icdim2 : gosub "get_val" : con_data.find.dim2 = vc/1000	endif	if icpn>EPS then		ic = icpn : gosub "get_val" : con_data.find.pn = vc		strmm_num = vc : gosub "strmm" : con_data.find.pn_ = "PN" + strmm_txt	endif	if icdy>EPS then 		ic = icdy : gosub "get_val" : con_data.find.dy = vc		strmm_num = vc : gosub "strmm" : con_data.find.dy_ = strmm_txt	endif	if iang>EPS then 		ic = iang : gosub "get_val" : con_data.find.ang = vc		strmm_num = vc : gosub "strmm" : con_data.find.ang_ = strmm_txt	endifreturn"get_ncol":	icd1 = 0 : ict1 = 0 : icd2 = 0 : ict2 = 0 : icves = 0 : icdim1 = 0 : icdim2 = 0 : icpn = 0 : icdy = 0 : iang = 0	if haskey(type_data.t[con_data.type].mat[con_data.group].d1[inx_type]) then icd1 = type_data.t[con_data.type].mat[con_data.group].d1[inx_type]	if haskey(type_data.t[con_data.type].mat[con_data.group].t1[inx_type]) then ict1 = type_data.t[con_data.type].mat[con_data.group].t1[inx_type]	if haskey(type_data.t[con_data.type].mat[con_data.group].d2[inx_type]) then icd2 = type_data.t[con_data.type].mat[con_data.group].d2[inx_type]	if haskey(type_data.t[con_data.type].mat[con_data.group].t2[inx_type]) then ict2 = type_data.t[con_data.type].mat[con_data.group].t2[inx_type]	if haskey(type_data.t[con_data.type].mat[con_data.group].ves[inx_type]) then icves = type_data.t[con_data.type].mat[con_data.group].ves[inx_type]	if haskey(type_data.t[con_data.type].mat[con_data.group].dim1[inx_type]) then icdim1 = type_data.t[con_data.type].mat[con_data.group].dim1[inx_type]	if haskey(type_data.t[con_data.type].mat[con_data.group].dim2[inx_type]) then icdim2 = type_data.t[con_data.type].mat[con_data.group].dim2[inx_type]	if haskey(type_data.t[con_data.type].mat[con_data.group].pn[inx_type]) then icpn = type_data.t[con_data.type].mat[con_data.group].pn[inx_type]	if haskey(type_data.t[con_data.type].mat[con_data.group].dy[inx_type]) then icdy = type_data.t[con_data.type].mat[con_data.group].dy[inx_type]	if haskey(type_data.t[con_data.type].mat[con_data.group].ang[inx_type]) then iang = type_data.t[con_data.type].mat[con_data.group].ang[inx_type]return"find_variant":	!! Читаем данные о столбцах	d1 = 0 : t1 = 0 : d2 = 0 : t2 = 0 : ves = 0 : dim1 = 0 : dim2 = 0 : pn = 0 : dy = 0 : flag_find = 0	n_pop = 0	tPN = eq_code/10	d_pn = 600 : t_pn = tPN : dpn = 0	dim variant[] : variant[1]=1 : i_var = 0	flag_find = 0	n_pop = n_pop + 1	for i=1 to mep_data.file[inx_file].is_read		same_d1 = 0 : same_d2 = 0		same_t1 = 0 : same_t2 = 0		same_pn = 0 : same_ang = 0		add_t1 = 0 : add_t2 = 0 : add_pn = 0		if iang>0 then			ic = iang : gosub "get_val" : ang = vc			same_ang = abs(ang-MEP_BendAngle_)<EPS		else			same_ang = 1		endif		if same_ang then			if icd1>0 then				ic = icd1 : gosub "get_val" : d1 = vc/1000				same_d1 = abs(d1-con_data.max.d)<EPS_DIAM			else				same_d1 = 1			endif			!Отсеиваем неподходящий диаметр 1			if same_d1 then				if icd2>0 then					ic = icd2 : gosub "get_val" : d2 = vc/1000					same_d2 = abs(d2-con_data.min.d)<EPS_DIAM				else					same_d2 = 1				endif				!Отсеиваем неподходящий диаметр 2				if same_d2 then					if icpn>0 then						ic = icpn : gosub "get_val" : pn = vc						dpn = pn-tPN						if dpn>EPS then add_pn = 1						if abs(dpn)<EPS then same_pn = 1					else						same_pn = 1					endif					if (same_pn or add_pn) then						if ict1>0 then							ic = ict1 : gosub "get_val" : t1 = vc/1000							dt1 = t1-con_data.max.th							if abs(dt1)<EPS then same_t1 = 1 !Точное совпадение толщины							if abs(dt1)<=EPS_TH*3 then add_t1 = 1 !Если толщина +/- в допуске - добавим в список вариантов						else							same_t1 = 1						endif						if (same_t1 or add_t1) then							if ict2>0 then								ic = ict2 : gosub "get_val" : t2 = vc/1000								dt2 = t2-con_data.min.th								if abs(dt2)<EPS then same_t2 = 1 !Точное совпадение толщины								if abs(dt2)<=EPS_TH*3 then add_t2 = 1 !Если толщина +/- в допуске - добавим в список вариантов							else								same_t2 = 1							endif						endif					endif				endif			endif		endif		if same_d1 and same_d2 and same_t1 and same_t2 and same_pn and same_ang then			flag_find = i			flag_find_file = inx_file			i = mep_data.file[inx_file].is_read		else			if same_d1 and same_d2 and (add_t1 or same_t1) and (add_t2 or same_t2) and (add_pn or same_pn) and same_ang then				if same_pn or add_pn then					if (dpn-d_pn)<EPS then						d_pn = dpn						t_pn = pn					endif				endif				i_var = i_var + 1				variant[i_var]=i			endif		endif	next i	if flag_find<EPS and i_var>EPS then		dim dop[][] : i = 0		i = i + 1 : dop[i][1] = EPS : dop[i][2] = EPS_TH : dop[i][3] = t_pn		i = i + 1 : dop[i][1] = EPS_TH : dop[i][2] = EPS : dop[i][3] = t_pn		i = i + 1 : dop[i][1] = EPS : dop[i][2] = -EPS_TH : dop[i][3] = t_pn		i = i + 1 : dop[i][1] = -EPS_TH : dop[i][2] = EPS : dop[i][3] = t_pn		i = i + 1 : dop[i][1] = EPS_TH : dop[i][2] = EPS_TH : dop[i][3] = t_pn		i = i + 1 : dop[i][1] = EPS_TH : dop[i][2] = -EPS_TH : dop[i][3] = t_pn		i = i + 1 : dop[i][1] = -EPS_TH : dop[i][2] = EPS_TH : dop[i][3] = t_pn		i = i + 1 : dop[i][1] = -EPS_TH : dop[i][2] = -EPS_TH : dop[i][3] = t_pn		i = i + 1 : dop[i][1] = EPS_TH*3 : dop[i][2] = EPS_TH*3 : dop[i][3] = t_pn		i = i + 1 : dop[i][1] = EPS_TH*3 : dop[i][2] = -EPS_TH*3 : dop[i][3] = t_pn		i = i + 1 : dop[i][1] = -EPS_TH*3 : dop[i][2] = EPS_TH*3 : dop[i][3] = t_pn		i = i + 1 : dop[i][1] = -EPS_TH*3 : dop[i][2] = -EPS_TH*3 : dop[i][3] = t_pn		for p=1 to vardim1(pn_arr)			if pn_arr[p]>t_pn then				i = i + 1 : dop[i][1] = EPS : dop[i][2] = EPS_TH : dop[i][3] = pn_arr[p]				i = i + 1 : dop[i][1] = EPS_TH : dop[i][2] = EPS : dop[i][3] = pn_arr[p]				i = i + 1 : dop[i][1] = EPS : dop[i][2] = -EPS_TH : dop[i][3] = pn_arr[p]				i = i + 1 : dop[i][1] = -EPS_TH : dop[i][2] = EPS : dop[i][3] = pn_arr[p]				i = i + 1 : dop[i][1] = EPS_TH : dop[i][2] = EPS_TH : dop[i][3] = pn_arr[p]				i = i + 1 : dop[i][1] = EPS_TH : dop[i][2] = -EPS_TH : dop[i][3] = pn_arr[p]				i = i + 1 : dop[i][1] = -EPS_TH : dop[i][2] = EPS_TH : dop[i][3] = pn_arr[p]				i = i + 1 : dop[i][1] = -EPS_TH : dop[i][2] = -EPS_TH : dop[i][3] = pn_arr[p]			endif		next p		for p=1 to vardim1(pn_arr)			if pn_arr[p]<=t_pn then				i = i + 1 : dop[i][1] = EPS : dop[i][2] = EPS_TH : dop[i][3] = pn_arr[p]				i = i + 1 : dop[i][1] = EPS_TH : dop[i][2] = EPS : dop[i][3] = pn_arr[p]				i = i + 1 : dop[i][1] = EPS : dop[i][2] = -EPS_TH : dop[i][3] = pn_arr[p]				i = i + 1 : dop[i][1] = -EPS_TH : dop[i][2] = EPS : dop[i][3] = pn_arr[p]				i = i + 1 : dop[i][1] = EPS_TH : dop[i][2] = EPS_TH : dop[i][3] = pn_arr[p]				i = i + 1 : dop[i][1] = EPS_TH : dop[i][2] = -EPS_TH : dop[i][3] = pn_arr[p]				i = i + 1 : dop[i][1] = -EPS_TH : dop[i][2] = EPS_TH : dop[i][3] = pn_arr[p]				i = i + 1 : dop[i][1] = -EPS_TH : dop[i][2] = -EPS_TH : dop[i][3] = pn_arr[p]			endif		next p		for id=1 to vardim1(dop)			tEPS_TH1 = dop[id][1]			tEPS_TH2 = dop[id][2]			t_pn = dop[id][3]			for iv=1 to vardim1(variant)				n_pop = n_pop + 1				i = variant[iv]				same_t1 = 0 : same_t2 = 0				same_pn = 0				if icpn>0 then					ic = icpn : gosub "get_val" : pn = vc					if abs(pn-t_pn)<EPS then same_pn = 1				else					same_pn = 1				endif				if same_pn then					if ict1>0 then						ic = ict1 : gosub "get_val"						dt = vc/1000-con_data.max.th						if tEPS_TH1<EPS then							more_t = 1						else							more_t = (dt>EPS)						endif						same_t1 = abs(dt)<=abs(tEPS_TH1) and more_t					else						same_t1 = 1					endif					if same_t1 then						if ict2>0 then							ic = ict2 : gosub "get_val"							dt = vc/1000-con_data.min.th							if tEPS_TH2<EPS then								more_t = 1							else								more_t = (dt>EPS)							endif							same_t2 = abs(dt)<=abs(tEPS_TH2) and more_t						else							same_t2 = 1						endif					endif				endif				if same_t1 and same_t2 and same_pn then					flag_find = i					flag_find_file = inx_file					iv = vardim1(variant)				endif			next iv			if flag_find>EPS then id=vardim1(dop)		next id	endifreturn"get_val":	if abs(ic-1)<EPS then vc = mep_data.file[inx_file].v1[i]	if abs(ic-2)<EPS then vc = mep_data.file[inx_file].v2[i]	if abs(ic-3)<EPS then vc = mep_data.file[inx_file].v3[i]	if abs(ic-4)<EPS then vc = mep_data.file[inx_file].v4[i]	if abs(ic-5)<EPS then vc = mep_data.file[inx_file].v5[i]	if abs(ic-6)<EPS then vc = mep_data.file[inx_file].v6[i]	if abs(ic-7)<EPS then vc = mep_data.file[inx_file].v7[i]	if abs(ic-8)<EPS then vc = mep_data.file[inx_file].v8[i]	if abs(ic-9)<EPS then vc = mep_data.file[inx_file].v9[i]	if abs(ic-10)<EPS then vc = mep_data.file[inx_file].v10[i]	if abs(ic-11)<EPS then vc = mep_data.file[inx_file].v11[i]	if abs(ic-12)<EPS then vc = mep_data.file[inx_file].v12[i]	if abs(ic-13)<EPS then vc = mep_data.file[inx_file].v13[i]	if abs(ic-14)<EPS then vc = mep_data.file[inx_file].v14[i]	if abs(ic-15)<EPS then vc = mep_data.file[inx_file].v15[i]	if abs(ic-16)<EPS then vc = mep_data.file[inx_file].v16[i]	if abs(ic-17)<EPS then vc = mep_data.file[inx_file].v17[i]	if abs(ic-18)<EPS then vc = mep_data.file[inx_file].v18[i]	if abs(ic-19)<EPS then vc = mep_data.file[inx_file].v19[i]	if abs(ic-20)<EPS then vc = mep_data.file[inx_file].v20[i]return