EPS = 0.00001isValidSystem = 0isavailable = 0show_el = 1n = APPLICATION_QUERY ("MEPMODELER", "IsAvailable()", isavailable)IF isavailable THEN	if one_ConID>EPS then		ConID = one_ConID		gosub 50	else		arr = str_arr_out		gosub "filter_arr3"		if flag_find_part=0 then			!!----------- Потом впуск			arr = str_arr_in			gosub "filter_arr3"		endif		if flag_find_part=0 then			!!!----------- Ну и остатки			FOR ConID = 1 TO min(vardim1(MEP_StrConnectionData),MEP_NumberConnections) 				gosub 50				if isValidSystem and show_el then ConID = MEP_NumberConnections			NEXT ConID		endif	endif	success = LIBRARYGLOBAL ("Libraryflobals-mep", "show_axis", show_axis)	if show_axis then MEP_cline_pen = gs_cont_pen	if gs_cont_pen<1 or gs_cont_pen>255 then gs_cont_pen=1	if MEP_cline_pen<1 or MEP_cline_pen>255 then MEP_cline_pen=1	if strstr(spec_add_param,"е подобран")>0 then		gs_cont_pen = 60		MEP_cline_pen = 60	endif	END gs_cont_pen, sMat, gs_InsMat, MEP_cline_pen, show_elENDIFgoto 3050:	isValidSystem = 0	if isavailable then		if ConID > vardim1(MEP_StrConnectionData) then ConID = MEP_NumberConnections		if ConID > vardim1(MEP_StrConnectionData) then ConID = 1		IF vartype(MEP_StrConnectionData[ConID][2])-1 and MEP_NumConnectionData[ConID][22]>EPS then			IF MEP_StrConnectionData[ConID][2]<>"0" THEN				ConSystemID = MEP_StrConnectionData[ConID][2]				queryStr = "GetDomain (" + ConSystemID + ")"				d = 0				n = APPLICATION_QUERY ("MEPSYSTEM", queryStr, d)				IF d THEN					IF d = 1 THEN PUT 1					IF d = 2 THEN PUT 2					IF d = 3 THEN PUT 1, 2					IF d = 4 THEN PUT 3					IF d = 5 THEN PUT 1, 3					IF d = 6 THEN PUT 2, 3					IF d = 7 THEN PUT 1, 2, 3					num = NSP					FOR i = 1 TO num						IF ABS(GET(1) - MEP_NumConnectionData[ConID][19]) < EPS THEN							isValidSystem = 1							queryStr = "GetMEPSystems (" + str(MEP_NumConnectionData[ConID][19],1,0) + ")"							isSystemQuery = APPLICATION_QUERY ("MEPSystem", queryStr, SystemStr)							num_ = VARDIM2(SystemStr)/2							FOR ki = 1 TO num_								if ConSystemID = SystemStr[1][ki*2-1] then									sname = SystemStr[1][ki*2]: gosub "clear_name3" : syst_name = sname									ki = num_								endif							NEXT ki							if NSP>EPS then tt=max(get(NSP))							i = num						ENDIF					NEXT i				ENDIF			endif		endif	ENDIF	IF isValidSystem THEN		IF vartype(MEP_StrConnectionData[ConID][2])=1 THEN			ConSystemID = MEP_StrConnectionData[ConID][2]			queryStr = "GetDomain (" + ConSystemID + ")"			n = APPLICATION_QUERY ("MEPSYSTEM", queryStr, d)			IF d THEN				IF d = 1 THEN PUT 1				IF d = 2 THEN PUT 2				IF d = 3 THEN PUT 1, 2				IF d = 4 THEN PUT 3				IF d = 5 THEN PUT 1, 3				IF d = 6 THEN PUT 2, 3				IF d = 7 THEN PUT 1, 2, 3				num = NSP				FOR i = 1 TO num					IF ABS(GET(1) - MEP_NumConnectionData[ConID][19]) < EPS THEN						queryStr = "GetMEPSystems (" + str(MEP_NumConnectionData[ConID][19],1,0) + ")"						isSystemQuery = APPLICATION_QUERY ("MEPSystem", queryStr, SystemStr)						num_ = VARDIM2(SystemStr)/2						FOR ki = 1 TO num_							if ConSystemID = SystemStr[1][ki*2-1] then								sname = SystemStr[1][ki*2]: gosub "clear_name3" : syst_name = sname								ki = num_							endif						NEXT ki						isValidSystem = 1						if NSP>EPS then tt=max(get(NSP))						i = num					ENDIF				NEXT i			ENDIF		endif	ENDIF	IF isValidSystem THEN		call "Показ_систем" PARAMETERS All isMep=0, syst_name=syst_name RETURNED_PARAMETERS show_el		queryStr = "GetContourPen (" + ConSystemID + ")"		n = APPLICATION_QUERY ("MEPSystem", queryStr, gs_cont_pen)		queryStr = "GetSystemMaterial (" + ConSystemID + ")"		n = APPLICATION_QUERY ("MEPSystem", queryStr, sMat)		queryStr = "GetInsulationMaterial (" + ConSystemID + ")"		n = APPLICATION_QUERY ("MEPSystem", queryStr, gs_InsMat)		queryStr = "GetCenterLinePen (" + ConSystemID + ")"		n = APPLICATION_QUERY ("MEPSystem", queryStr, MEP_cline_pen)	ELSE		if tID<>"" then			queryStr = "GetContourPen (" + tID + ")"			n = APPLICATION_QUERY ("MEPSystem", queryStr, gs_cont_pen)			queryStr = "GetSystemMaterial (" + tID + ")"			n = APPLICATION_QUERY ("MEPSystem", queryStr, sMat)			queryStr = "GetInsulationMaterial (" + tID + ")"			n = APPLICATION_QUERY ("MEPSystem", queryStr, gs_InsMat)			queryStr = "GetCenterLinePen (" + tID + ")"			n = APPLICATION_QUERY ("MEPSystem", queryStr, MEP_cline_pen)		else			gs_cont_pen = 20!invalidsystem_cont_pen			gs_InsMat = 0!invalidsystem_InsMat			sMat = 0!			MEP_cline_pen  = 20!invalidsystem_cline_pen		endif	ENDIFreturn"clear_name3":	if STRSTR(sname, "(")>0 then sname = STRSUB (sname, 1, STRSTR(sname, "(")-1)	if STRSTR(sname, " ")>0 then		_currStr = sname : gosub "replace_text" : sname = _newStr	endifreturn"replace_text3":	_charToReplace = " "	_newChar = ""    _newStr = ""     ! intialize a new empty string    _i = 1000        ! creating a "guard" for the while, set the max number of runs    while _currStr <> "" and _i > 0 do        _n = STRSTR (_currStr, _charToReplace, 1)   ! check the script for _charToReplace        if _n > 0 then	            ! _charToReplace is first found in position _n            ! add the first part of _currStr to _newStr, plus add _newChar            _newStr = _newStr + STRSUB (_currStr, 1, _n - 1) + _newChar            ! get a new _currStr from the chars after position _n            _currStr = STRSUB (_currStr, _n + 1, STRLEN(_currStr) - _n)	         else            ! if _charToReplace is not found then add _currStr to _newStr            _newStr = _newStr + _currStr            ! close the loop with changing _currStr to empty string            _currStr = ""        endif        _i = _i - 1	! decrease the "guard" variable in each run    endwhilereturn"name_has_part3":	flag_find_part = 0	for jj=1 to vardim1(arr)		if STRSTR(var, arr[jj])>0 then			flag_find_part = 1			jj = vardim1(arr)		endif	next jjreturn"filter_arr3":	if vardim2(MEP_StrConnectionData)>2 then		FOR ConID = 1 TO min(vardim1(MEP_StrConnectionData),MEP_NumberConnections)			if vartype(MEP_StrConnectionData[ConID][3])=2 then				if strlen(MEP_StrConnectionData[ConID][3])>0 then					var = MEP_StrConnectionData[ConID][3] : gosub "name_has_part3"					if flag_find_part then						gosub 50						if isValidSystem and show_el then ConID = MEP_NumberConnections					endif				endif			endif		NEXT ConID	endifreturn30: