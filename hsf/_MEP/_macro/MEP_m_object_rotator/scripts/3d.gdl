
! MEP_m_object_rotator
! Zsolt Feke/2007


EPS = 0.0001

IF ABS(symbRotangle) > 0 THEN			! *** is non exactly zero
	symbRotangle = -symbRotangle		! *** SYMB_ROTANGLE rotation for connected connection data

	DIM inCoords[20][3]
	DIM outCoords[20][3]

	DIM tMatrix[3][3]

	tMatrix[1][1] = COS(symbRotangle)
	tMatrix[1][2] = SIN(symbRotangle)
	tMatrix[1][3] = 0

	tMatrix[2][1] = -SIN(symbRotangle)
	tMatrix[2][2] = COS(symbRotangle)
	tMatrix[2][3] = 0

	tMatrix[3][1] = -tMatrix[2][2]*tMatrix[1][3]+tMatrix[2][3]*tMatrix[1][2]
	tMatrix[3][2] = -tMatrix[2][3]*tMatrix[1][1]+tMatrix[2][1]*tMatrix[1][3]
	tMatrix[3][3] = -tMatrix[2][1]*tMatrix[1][2]+tMatrix[2][2]*tMatrix[1][1]

							!!! +++ Input Coordinates +++ !!!

	PUT MEP_NumConnectedConnectionData[rot_conn][4], MEP_NumConnectedConnectionData[rot_conn][5], MEP_NumConnectedConnectionData[rot_conn][6]
	PUT MEP_NumConnectedConnectionData[rot_conn][7], MEP_NumConnectedConnectionData[rot_conn][8], MEP_NumConnectedConnectionData[rot_conn][9]

	Coordinates = NSP/3

	FOR cnum = 1 TO Coordinates
		inCoords[cnum][1] = GET(1)
		inCoords[cnum][2] = GET(1)
		inCoords[cnum][3] = GET(1)
	NEXT cnum

	! --- the Matrix Operation, what make the Output-Coordinates

	FOR cnum = 1 TO Coordinates
		MEP_NumConnectedConnectionData[rot_conn][1+cnum*3] = inCoords[cnum][1]*tMatrix[1][1]+inCoords[cnum][2]*tMatrix[2][1]+inCoords[cnum][3]*tMatrix[3][1]
		MEP_NumConnectedConnectionData[rot_conn][2+cnum*3] = inCoords[cnum][1]*tMatrix[1][2]+inCoords[cnum][2]*tMatrix[2][2]+inCoords[cnum][3]*tMatrix[3][2]
		MEP_NumConnectedConnectionData[rot_conn][3+cnum*3] = inCoords[cnum][1]*tMatrix[1][3]+inCoords[cnum][2]*tMatrix[2][3]+inCoords[cnum][3]*tMatrix[3][3]
	NEXT cnum
ENDIF


	! ****** rotation ****** !

unID = 100
IF ABS(ABS(MEP_NumConnectionData[rot_conn][6]) - 1) < EPS AND rot_conn < 2 AND ABS(gs_Connections[rot_conn][2] + gs_Connections[rot_conn][3]) < EPS AND ABS(dist_y) > 0 THEN
	ADD MEP_NumConnectionData[rot_conn][1], MEP_NumConnectionData[rot_conn][2], MEP_NumConnectionData[rot_conn][3]
	IF MEP_NumConnectionData[rot_conn][6] < 0 THEN
		ROTz angleDiffFromDefaultStatus
	ELSE
		ROTz -angleDiffFromDefaultStatus
	ENDIF
	HOTSPOT 0, 0, dist_x*MEP_Position[2][3], unID, Rotation, 6: unID=unID+1
	HOTSPOT dist_y, 0, dist_x*MEP_Position[2][3], unID, Rotation, 4+128: unID=unID+1
	HOTSPOT dist_y*COS(Rotation), dist_y*SIN(Rotation), dist_x*MEP_Position[2][3], unID, Rotation, 5: unID=unID+1
	HOTSPOT 0, 0, dist_x*MEP_Position[2][3]+1, unID, Rotation, 7: unID=unID+1
	DEL 2
ELSE
	XFORM   defaultMatrix[1][1], defaultMatrix[2][1], defaultMatrix[3][1], MEP_NumConnectionData[rot_conn][1],
			defaultMatrix[1][2], defaultMatrix[2][2], defaultMatrix[3][2], MEP_NumConnectionData[rot_conn][2],
			defaultMatrix[1][3], defaultMatrix[2][3], defaultMatrix[3][3], MEP_NumConnectionData[rot_conn][3]

	IF dist_z > EPS THEN
		HOTSPOT -dist_x, 0, 0, unID, Rotation, 6: unID=unID+1
		HOTSPOT -dist_x, 0, dist_z, unID, Rotation, 4+128: unID=unID+1
		HOTSPOT -dist_x, -dist_z*SIN(Rotation), dist_z*COS(Rotation), unID, Rotation, 5: unID=unID+1
		HOTSPOT 1-dist_x, 0, 0, unID, Rotation, 7: unID=unID+1
	ELSE
		HOTSPOT -dist_x, 0, 0, unID, Rotation, 6: unID=unID+1
		HOTSPOT -dist_x, -dist_y, 0, unID, Rotation, 4+128: unID=unID+1
		HOTSPOT -dist_x, -dist_y*COS(Rotation), -dist_y*SIN(Rotation), unID, Rotation, 5: unID=unID+1
		HOTSPOT 1-dist_x, 0, 0, unID, Rotation, 7: unID=unID+1
	ENDIF
	DEL 1
ENDIF
