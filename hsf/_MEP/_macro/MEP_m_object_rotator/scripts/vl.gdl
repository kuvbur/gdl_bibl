
! MEP_m_object_rotator
! Zsolt Feke/2007


EPS = 0.0001

IF ABS(symbRotangle) > 0 THEN			! *** is non exactly zero
	symbRotangle = -symbRotangle		! *** SYMB_ROTANGLE rotation for connected connection data

	DIM inCoords[20][3]
	DIM outCoords[20][3]

	DIM tMatrix[3][3]

	tMatrix[1][1] = COS(symbRotangle)
	tMatrix[1][2] = SIN(symbRotangle)
	tMatrix[1][3] = 0

	tMatrix[2][1] = -SIN(symbRotangle)
	tMatrix[2][2] = COS(symbRotangle)
	tMatrix[2][3] = 0

	tMatrix[3][1] = -tMatrix[2][2]*tMatrix[1][3]+tMatrix[2][3]*tMatrix[1][2]
	tMatrix[3][2] = -tMatrix[2][3]*tMatrix[1][1]+tMatrix[2][1]*tMatrix[1][3]
	tMatrix[3][3] = -tMatrix[2][1]*tMatrix[1][2]+tMatrix[2][2]*tMatrix[1][1]

							!!! +++ Input Coordinates +++ !!!

	PUT MEP_NumConnectedConnectionData[rot_conn][4], MEP_NumConnectedConnectionData[rot_conn][5], MEP_NumConnectedConnectionData[rot_conn][6]
	PUT MEP_NumConnectedConnectionData[rot_conn][7], MEP_NumConnectedConnectionData[rot_conn][8], MEP_NumConnectedConnectionData[rot_conn][9]

	Coordinates = NSP/3

	FOR cnum = 1 TO Coordinates
		inCoords[cnum][1] = GET(1)
		inCoords[cnum][2] = GET(1)
		inCoords[cnum][3] = GET(1)
	NEXT cnum

	! --- the Matrix Operation, what make the Output-Coordinates

	FOR cnum = 1 TO Coordinates
		MEP_NumConnectedConnectionData[rot_conn][1+cnum*3] = inCoords[cnum][1]*tMatrix[1][1]+inCoords[cnum][2]*tMatrix[2][1]+inCoords[cnum][3]*tMatrix[3][1]
		MEP_NumConnectedConnectionData[rot_conn][2+cnum*3] = inCoords[cnum][1]*tMatrix[1][2]+inCoords[cnum][2]*tMatrix[2][2]+inCoords[cnum][3]*tMatrix[3][2]
		MEP_NumConnectedConnectionData[rot_conn][3+cnum*3] = inCoords[cnum][1]*tMatrix[1][3]+inCoords[cnum][2]*tMatrix[2][3]+inCoords[cnum][3]*tMatrix[3][3]
	NEXT cnum
ENDIF


	DIM x_projection[1][3]
	DIM x_projection_90[1][3]
	DIM defaultMatrix[3][3]
	DIM inCoords[20][3]
	DIM outCoords[20][3]
	DIM positionVectorInConnWorld[3][3]
	DIM rotConnMatrix[3][3]


IF ABS(MEP_NumConnectionData[rot_conn][21] - 2) < EPS THEN
!	IF ABS(ABS(MEP_NumConnectionData[rot_conn][6]) - 1) > EPS AND GLOB_CONTEXT = 22 THEN VALUES "Rotation" 0, 90, 180, 270
ELSE
	wx1 = MEP_NumConnectionData[rot_conn][7]
	wy1 = MEP_NumConnectionData[rot_conn][8]
	wz1 = MEP_NumConnectionData[rot_conn][9]

	wx2 = MEP_NumConnectedConnectionData[rot_conn][7]
	wy2 = MEP_NumConnectedConnectionData[rot_conn][8]
	wz2 = MEP_NumConnectedConnectionData[rot_conn][9]

	addAng = 0
	IF ABS(ABS(MEP_NumConnectedConnectionData[rot_conn][6]) - 1) < EPS  THEN
		dx = MEP_NumConnectedConnectionData[rot_conn][7]
		dy = MEP_NumConnectedConnectionData[rot_conn][8]

		 arCosVal = dx/1
		IF ABS(arCosVal) > 1 AND SGN(arCosVal) = -1 THEN arCosVal = -1
		IF ABS(arCosVal) > 1 AND SGN(arCosVal) = 1 THEN arCosVal = 1
		addAng = ACS(arCosVal)
		IF SGN(dy) = -1 THEN addAng = 360-addAng

		IF ABS(MEP_NumConnectionData[rot_conn][12] - MEP_NumConnectionData[rot_conn][13]) < EPS THEN
			num = INT(addAng/90)
			addAng = addAng - 90*num
			VALUES "Rotation" addAng, addAng+90, addAng+180, addAng+270
		ELSE
			IF ABS(wx1*wx2 + wy1*wy2 + wz1*wz2) < EPS THEN addAng = addAng + 90
			num = INT(addAng/180)
			addAng = addAng - 180*num

			VALUES "Rotation" addAng, addAng+180
		ENDIF
	ELSE
		IF ABS(MEP_NumConnectionData[rot_conn][12] - MEP_NumConnectionData[rot_conn][13]) < EPS THEN
			IF (MEP_NumConnectedConnectionData[rot_conn][6]) < EPS THEN
				VALUES "Rotation" 0, 90, 180, 270
			ELSE
				VALUES "Rotation" 90, 270
			ENDIF
		ELSE
			IF ABS(wx1*wx2 + wy1*wy2 + wz1*wz2) < EPS THEN
				IF ABS(MEP_NumConnectionData[rot_conn][6]) < EPS AND ABS(MEP_NumConnectionData[rot_conn][9]) < EPS AND ABS(ABS(MEP_NumConnectedConnectionData[rot_conn][9])-1) < EPS THEN
					VALUES "Rotation" 0, 180
				ELSE
					VALUES "Rotation" 90, 270
				ENDIF
			ELSE
				VALUES "Rotation" 0, 180
			ENDIF
		ENDIF
	ENDIF
ENDIF


						! ---------------- !
						! --- Z vector --- !
						! ---------------- !

dZx = -MEP_Position[3][2]*MEP_Position[2][3]+MEP_Position[3][3]*MEP_Position[2][2]
dZy = -MEP_Position[3][3]*MEP_Position[2][1]+MEP_Position[3][1]*MEP_Position[2][3]
dZz = -MEP_Position[3][1]*MEP_Position[2][2]+MEP_Position[3][2]*MEP_Position[2][1]


					!!! +++ Transformational Matrix +++ !!!

DIM tMatrix[3][3]

tMatrix[1][1] = MEP_Position[2][1]
tMatrix[1][2] = MEP_Position[2][2]
tMatrix[1][3] = MEP_Position[2][3]

tMatrix[2][1] = MEP_Position[3][1]
tMatrix[2][2] = MEP_Position[3][2]
tMatrix[2][3] = MEP_Position[3][3]

tMatrix[3][1] = -MEP_Position[3][2]*MEP_Position[2][3]+MEP_Position[3][3]*MEP_Position[2][2]
tMatrix[3][2] = -MEP_Position[3][3]*MEP_Position[2][1]+MEP_Position[3][1]*MEP_Position[2][3]
tMatrix[3][3] = -MEP_Position[3][1]*MEP_Position[2][2]+MEP_Position[3][2]*MEP_Position[2][1]


						!!! +++ Input Coordinates +++ !!!

FOR i = 1 TO MEP_NumberConnections
	cx = gs_Connections[i][1]+gs_Connections[i][23]*gs_Connections[i][4]
	cy = gs_Connections[i][2]+gs_Connections[i][23]*gs_Connections[i][5]
	cz = gs_Connections[i][3]+gs_Connections[i][23]*gs_Connections[i][6]

	PUT cx, cy, cz
	PUT gs_Connections[i][4], gs_Connections[i][5], gs_Connections[i][6]
	PUT gs_Connections[i][7], gs_Connections[i][8], gs_Connections[i][9]
NEXT i

Coordinates = NSP/3

DIM inCoords[20][3]

FOR cnum = 1 TO Coordinates
	inCoords[cnum][1] = GET(1)
	inCoords[cnum][2] = GET(1)
	inCoords[cnum][3] = GET(1)
NEXT cnum


! --- the Matrix Operation, what make the Output-Coordinates

DIM outCoords[20][3]

FOR cnum = 1 TO Coordinates
	outCoords[cnum][1] = inCoords[cnum][1]*tMatrix[1][1]+inCoords[cnum][2]*tMatrix[2][1]+inCoords[cnum][3]*tMatrix[3][1]
	outCoords[cnum][2] = inCoords[cnum][1]*tMatrix[1][2]+inCoords[cnum][2]*tMatrix[2][2]+inCoords[cnum][3]*tMatrix[3][2]
	outCoords[cnum][3] = inCoords[cnum][1]*tMatrix[1][3]+inCoords[cnum][2]*tMatrix[2][3]+inCoords[cnum][3]*tMatrix[3][3]
NEXT cnum


! --- uploading of MEP_NumConnectionData

FOR k = 1 TO MEP_NumberConnections
	FOR i = 1 TO 9
		j = 1+INT((i-0.5)/3)
		MEP_NumConnectionData[k][i] = outCoords[j+3*(k-1)][i-3*(j-1)]
		PARAMETERS MEP_NumConnectionData[k][i] = outCoords[j+3*(k-1)][i-3*(j-1)]
	NEXT i
NEXT k


! ********* rotator code *********


! ****** defaultMatrix ****** !

IF ABS(ABS(MEP_NumConnectionData[rot_conn][6])-1) < EPS THEN
	defaultMatrix[2][1] = 1
	defaultMatrix[2][2] = 0
	defaultMatrix[2][3] = 0
ELSE
	length = SQR(MEP_NumConnectionData[rot_conn][4]^2 + MEP_NumConnectionData[rot_conn][5]^2)

	x_projection[1][1] = MEP_NumConnectionData[rot_conn][4]/length
	x_projection[1][2] = MEP_NumConnectionData[rot_conn][5]/length
	x_projection[1][3] = 0

	DIM MatrixT[3][3]

	MatrixT[1][1] = COS(90)
	MatrixT[1][2] = SIN(90)
	MatrixT[1][3] = 0

	MatrixT[2][1] = -SIN(90)
	MatrixT[2][2] = COS(90)
	MatrixT[2][3] = 0

	MatrixT[3][1] = 0
	MatrixT[3][2] = 0
	MatrixT[3][3] = 1

	PUT x_projection[1][1], x_projection[1][2], x_projection[1][3]

	Coordinates = NSP/3

	DIM inCoords[20][3]

	FOR cnum = 1 TO Coordinates
		inCoords[cnum][1] = GET(1)
		inCoords[cnum][2] = GET(1)
		inCoords[cnum][3] = GET(1)
	NEXT cnum

	FOR cnum = 1 TO Coordinates
		defaultMatrix[2][1] = inCoords[cnum][1]*MatrixT[1][1]+inCoords[cnum][2]*MatrixT[2][1]+inCoords[cnum][3]*MatrixT[3][1]
		defaultMatrix[2][2] = inCoords[cnum][1]*MatrixT[1][2]+inCoords[cnum][2]*MatrixT[2][2]+inCoords[cnum][3]*MatrixT[3][2]
		defaultMatrix[2][3] = inCoords[cnum][1]*MatrixT[1][3]+inCoords[cnum][2]*MatrixT[2][3]+inCoords[cnum][3]*MatrixT[3][3]
	NEXT cnum
ENDIF

defaultMatrix[1][1] = MEP_NumConnectionData[rot_conn][4]
defaultMatrix[1][2] = MEP_NumConnectionData[rot_conn][5]
defaultMatrix[1][3] = MEP_NumConnectionData[rot_conn][6]

defaultMatrix[3][1] = -defaultMatrix[2][2]*defaultMatrix[1][3]+defaultMatrix[2][3]*defaultMatrix[1][2]
defaultMatrix[3][2] = -defaultMatrix[2][3]*defaultMatrix[1][1]+defaultMatrix[2][1]*defaultMatrix[1][3]
defaultMatrix[3][3] = -defaultMatrix[2][1]*defaultMatrix[1][2]+defaultMatrix[2][2]*defaultMatrix[1][1]

PARAMETERS defaultMatrix[1][1] = defaultMatrix[1][1]
PARAMETERS defaultMatrix[1][2] = defaultMatrix[1][2]
PARAMETERS defaultMatrix[1][3] = defaultMatrix[1][3]

PARAMETERS defaultMatrix[2][1] = defaultMatrix[2][1]
PARAMETERS defaultMatrix[2][2] = defaultMatrix[2][2]
PARAMETERS defaultMatrix[2][3] = defaultMatrix[2][3]

PARAMETERS defaultMatrix[3][1] = defaultMatrix[3][1]
PARAMETERS defaultMatrix[3][2] = defaultMatrix[3][2]
PARAMETERS defaultMatrix[3][3] = defaultMatrix[3][3]


DIM RotatorConnData[1][3]

RotatorConnData[1][1] = MEP_NumConnectionData[rot_conn][1]
RotatorConnData[1][2] = MEP_NumConnectionData[rot_conn][2]
RotatorConnData[1][3] = MEP_NumConnectionData[rot_conn][3]


IF GLOB_MODPAR_NAME = "Rotation" THEN

	IF ABS(ABS(MEP_NumConnectionData[rot_conn][6])-1) < EPS AND rot_conn < 2 AND ABS(gs_Connections[rot_conn][2] + gs_Connections[rot_conn][3]) < EPS AND dist_y > 0 THEN
		MEP_Position[3][1] = COS(Rotation)
		PARAMETERS MEP_Position[3][1] = MEP_Position[3][1]
		MEP_Position[3][2] = SIN(Rotation)
		PARAMETERS MEP_Position[3][2] = MEP_Position[3][2]
	ELSE

			! ****** MEP_Position matrix in the rotator connection world ****** !

		DIM cMatrix[3][3]

		cMatrix[1][1] = MEP_NumConnectionData[rot_conn][4]
		cMatrix[1][2] = MEP_NumConnectionData[rot_conn][5]
		cMatrix[1][3] = MEP_NumConnectionData[rot_conn][6]

		cMatrix[2][1] = MEP_NumConnectionData[rot_conn][7]
		cMatrix[2][2] = MEP_NumConnectionData[rot_conn][8]
		cMatrix[2][3] = MEP_NumConnectionData[rot_conn][9]

		cMatrix[3][1] = -cMatrix[2][2]*cMatrix[1][3]+cMatrix[2][3]*cMatrix[1][2]
		cMatrix[3][2] = -cMatrix[2][3]*cMatrix[1][1]+cMatrix[2][1]*cMatrix[1][3]
		cMatrix[3][3] = -cMatrix[2][1]*cMatrix[1][2]+cMatrix[2][2]*cMatrix[1][1]


		DIM tMatrix[3][3]

		tMatrix[1][1] = cMatrix[1][1]
		tMatrix[1][2] = cMatrix[2][1]
		tMatrix[1][3] = cMatrix[3][1]

		tMatrix[2][1] = cMatrix[1][2]
		tMatrix[2][2] = cMatrix[2][2]
		tMatrix[2][3] = cMatrix[3][2]

		tMatrix[3][1] = cMatrix[1][3]
		tMatrix[3][2] = cMatrix[2][3]
		tMatrix[3][3] = cMatrix[3][3]


								!!! +++ Input Coordinates +++ !!!

		PUT MEP_Position[2][1], MEP_Position[2][2], MEP_Position[2][3]
		PUT MEP_Position[3][1], MEP_Position[3][2], MEP_Position[3][3]
		PUT dZx, dZy, dZz

		Coordinates = NSP/3

		FOR cnum = 1 TO Coordinates
			inCoords[cnum][1] = GET(1)
			inCoords[cnum][2] = GET(1)
			inCoords[cnum][3] = GET(1)
		NEXT cnum


		! --- the Matrix Operation, what make the Output-Coordinates

		FOR cnum = 1 TO Coordinates
			outCoords[cnum][1] = inCoords[cnum][1]*tMatrix[1][1]+inCoords[cnum][2]*tMatrix[2][1]+inCoords[cnum][3]*tMatrix[3][1]
			outCoords[cnum][2] = inCoords[cnum][1]*tMatrix[1][2]+inCoords[cnum][2]*tMatrix[2][2]+inCoords[cnum][3]*tMatrix[3][2]
			outCoords[cnum][3] = inCoords[cnum][1]*tMatrix[1][3]+inCoords[cnum][2]*tMatrix[2][3]+inCoords[cnum][3]*tMatrix[3][3]
		NEXT cnum


		! --- uploading of MEP_NumConnectionData

		FOR k = 1 TO Coordinates
			FOR i = 1 TO 3
				positionVectorInConnWorld[k][i] = outCoords[k][i]
			NEXT i
		NEXT k



		! ****** rotated connection matrix ****** !

		! --- Building of Transformational Matrix

		DIM MatrixT[3][3]

		FOR j = 1 TO 3
			FOR i = 1 TO 3
				MatrixT[j][i] = defaultMatrix[j][i]
			NEXT i
		NEXT j


		! --- Input Coordinates

		PUT 1, 0, 0
		PUT 0, COS(Rotation), SIN(Rotation)
		PUT 0, -SIN(Rotation), COS(Rotation)

		Coordinates = NSP/3

		DIM inCoords[20][3]

		FOR cnum = 1 TO Coordinates
			inCoords[cnum][1] = GET(1)
			inCoords[cnum][2] = GET(1)
			inCoords[cnum][3] = GET(1)
		NEXT cnum


		! --- the Matrix Operation, what makes the Output-Coordinates

		DIM outCoords[20][3]

		FOR cnum = 1 TO Coordinates
			outCoords[cnum][1] = inCoords[cnum][1]*MatrixT[1][1]+inCoords[cnum][2]*MatrixT[2][1]+inCoords[cnum][3]*MatrixT[3][1]
			outCoords[cnum][2] = inCoords[cnum][1]*MatrixT[1][2]+inCoords[cnum][2]*MatrixT[2][2]+inCoords[cnum][3]*MatrixT[3][2]
			outCoords[cnum][3] = inCoords[cnum][1]*MatrixT[1][3]+inCoords[cnum][2]*MatrixT[2][3]+inCoords[cnum][3]*MatrixT[3][3]
		NEXT cnum

		FOR k = 1 TO 3
			FOR i = 1 TO 3
				rotConnMatrix[k][i] = outCoords[k][i]
			NEXT i
		NEXT k


		! ****** Rotator Matrix ****** !

								! ------------------- !
								! --- coordinates --- !
								! ------------------- !

		! --- Building of Transformational Matrix

		DIM MatrixT[3][3]

		MatrixT[1][1] = rotConnMatrix[1][1]
		MatrixT[1][2] = rotConnMatrix[1][2]
		MatrixT[1][3] = rotConnMatrix[1][3]

		MatrixT[2][1] = rotConnMatrix[2][1]
		MatrixT[2][2] = rotConnMatrix[2][2]
		MatrixT[2][3] = rotConnMatrix[2][3]

		MatrixT[3][1] = rotConnMatrix[3][1]
		MatrixT[3][2] = rotConnMatrix[3][2]
		MatrixT[3][3] = rotConnMatrix[3][3]

		! --- Input Coordinates

		PUT positionVectorInConnWorld[1][1], positionVectorInConnWorld[1][2], positionVectorInConnWorld[1][3]
		PUT positionVectorInConnWorld[2][1], positionVectorInConnWorld[2][2], positionVectorInConnWorld[2][3]
		PUT positionVectorInConnWorld[3][1], positionVectorInConnWorld[3][2], positionVectorInConnWorld[3][3]

		Coordinates = NSP/3

		DIM inCoords[20][3]

		FOR cnum = 1 TO Coordinates
			inCoords[cnum][1] = GET(1)
			inCoords[cnum][2] = GET(1)
			inCoords[cnum][3] = GET(1)
		NEXT cnum


		! --- the Matrix Operation, what makes the Output-Coordinates

		DIM outCoords[20][3]

		FOR cnum = 1 TO Coordinates
			outCoords[cnum][1] = inCoords[cnum][1]*MatrixT[1][1]+inCoords[cnum][2]*MatrixT[2][1]+inCoords[cnum][3]*MatrixT[3][1]
			outCoords[cnum][2] = inCoords[cnum][1]*MatrixT[1][2]+inCoords[cnum][2]*MatrixT[2][2]+inCoords[cnum][3]*MatrixT[3][2]
			outCoords[cnum][3] = inCoords[cnum][1]*MatrixT[1][3]+inCoords[cnum][2]*MatrixT[2][3]+inCoords[cnum][3]*MatrixT[3][3]
		NEXT cnum

		FOR k = 1 TO 2
			FOR i = 1 TO 3
				MEP_Position[1+k][i] = outCoords[k][i]
				PARAMETERS MEP_Position[1+k][i] = outCoords[k][i]
			NEXT i
		NEXT k

		length = SQR(MEP_Position[2][1]^2+MEP_Position[2][2]^2+MEP_Position[2][3]^2)
		IF ABS(length-1) > EPS THEN
			MEP_Position[2][1] = MEP_Position[2][1]/length
			PARAMETERS MEP_Position[2][1] = MEP_Position[2][1]
			MEP_Position[2][2] = MEP_Position[2][2]/length
			PARAMETERS MEP_Position[2][2] = MEP_Position[2][2]
			MEP_Position[2][3] = MEP_Position[2][3]/length
			PARAMETERS MEP_Position[2][3] = MEP_Position[2][3]
		ENDIF

		length = SQR(MEP_Position[3][1]^2+MEP_Position[3][2]^2+MEP_Position[3][3]^2)
		IF ABS(length-1) > EPS THEN
			MEP_Position[3][1] = MEP_Position[3][1]/length
			PARAMETERS MEP_Position[3][1] = MEP_Position[3][1]
			MEP_Position[3][2] = MEP_Position[3][2]/length
			PARAMETERS MEP_Position[3][2] = MEP_Position[3][2]
			MEP_Position[3][3] = MEP_Position[3][3]/length
			PARAMETERS MEP_Position[3][3] = MEP_Position[3][3]
		ENDIF

		FOR i = 2 TO 3
			FOR j = 1 TO 3
				IF ABS(MEP_Position[i][j]) < EPS THEN
					MEP_Position[i][j] = 0
					PARAMETERS MEP_Position[i][j] = MEP_Position[i][j]
				ENDIF
			NEXT j
		NEXT i

						!!! +++ Transformational Matrix +++ !!!

		DIM tMatrix[3][3]

		tMatrix[1][1] = MEP_Position[2][1]
		tMatrix[1][2] = MEP_Position[2][2]
		tMatrix[1][3] = MEP_Position[2][3]

		tMatrix[2][1] = MEP_Position[3][1]
		tMatrix[2][2] = MEP_Position[3][2]
		tMatrix[2][3] = MEP_Position[3][3]

		tMatrix[3][1] = -MEP_Position[3][2]*MEP_Position[2][3]+MEP_Position[3][3]*MEP_Position[2][2]
		tMatrix[3][2] = -MEP_Position[3][3]*MEP_Position[2][1]+MEP_Position[3][1]*MEP_Position[2][3]
		tMatrix[3][3] = -MEP_Position[3][1]*MEP_Position[2][2]+MEP_Position[3][2]*MEP_Position[2][1]


								!!! +++ Input Coordinates +++ !!!

		FOR i = 1 TO MEP_NumberConnections
			cx = gs_Connections[i][1]+gs_Connections[i][23]*gs_Connections[i][4]
			cy = gs_Connections[i][2]+gs_Connections[i][23]*gs_Connections[i][5]
			cz = gs_Connections[i][3]+gs_Connections[i][23]*gs_Connections[i][6]

			PUT cx, cy, cz
			PUT gs_Connections[i][4], gs_Connections[i][5], gs_Connections[i][6]
			PUT gs_Connections[i][7], gs_Connections[i][8], gs_Connections[i][9]
		NEXT i

		Coordinates = NSP/3

		DIM inCoords[20][3]

		FOR cnum = 1 TO Coordinates
			inCoords[cnum][1] = GET(1)
			inCoords[cnum][2] = GET(1)
			inCoords[cnum][3] = GET(1)
		NEXT cnum


		! --- the Matrix Operation, what make the Output-Coordinates

		DIM outCoords[20][3]

		FOR cnum = 1 TO Coordinates
			outCoords[cnum][1] = inCoords[cnum][1]*tMatrix[1][1]+inCoords[cnum][2]*tMatrix[2][1]+inCoords[cnum][3]*tMatrix[3][1]
			outCoords[cnum][2] = inCoords[cnum][1]*tMatrix[1][2]+inCoords[cnum][2]*tMatrix[2][2]+inCoords[cnum][3]*tMatrix[3][2]
			outCoords[cnum][3] = inCoords[cnum][1]*tMatrix[1][3]+inCoords[cnum][2]*tMatrix[2][3]+inCoords[cnum][3]*tMatrix[3][3]
		NEXT cnum


		! --- uploading of MEP_NumConnectionData

		FOR k = 1 TO MEP_NumberConnections
			FOR i = 1 TO 9
				j = 1+INT((i-0.5)/3)
				MEP_NumConnectionData[k][i] = outCoords[j+3*(k-1)][i-3*(j-1)]
				PARAMETERS MEP_NumConnectionData[k][i] = outCoords[j+3*(k-1)][i-3*(j-1)]
			NEXT i
		NEXT k

		MEP_Position[1][1] = MEP_Position[1][1]-MEP_NumConnectionData[rot_conn][1] + RotatorConnData[1][1]
		PARAMETERS MEP_Position[1][1] = MEP_Position[1][1]
		MEP_Position[1][2] = MEP_Position[1][2]-MEP_NumConnectionData[rot_conn][2] + RotatorConnData[1][2]
		PARAMETERS MEP_Position[1][2] = MEP_Position[1][2]
		MEP_Position[1][3] = MEP_Position[1][3]-MEP_NumConnectionData[rot_conn][3] + RotatorConnData[1][3]
		PARAMETERS MEP_Position[1][3] = MEP_Position[1][3]
	ENDIF
ELSE
	! ****** Calculation of Rotation ****** !

	IF ABS(ABS(MEP_NumConnectionData[rot_conn][6])-1) < EPS THEN
		x2 = 1
		y2 = 0
		z2 = 0

		IF rot_conn < 2 AND ABS(gs_Connections[rot_conn][2] + gs_Connections[rot_conn][3]) < EPS AND dist_y > 0 THEN
			x1 = MEP_Position[3][1]
			y1 = MEP_Position[3][2]
			z1 = MEP_Position[3][3]
		ELSE
			x1 = MEP_NumConnectionData[rot_conn][7]
			y1 = MEP_NumConnectionData[rot_conn][8]
			z1 = MEP_NumConnectionData[rot_conn][9]
		ENDIF

		arcVal = (x1*x2+y1*y2+z1*z2)/((SQR(x1^2+y1^2+z1^2))*(SQR(x2^2+y2^2+z2^2)))
		IF arcVal > 1 THEN arcVal = 1
		IF arcVal < -1 THEN arcVal = -1
		Rotation = ACS(arcVal)
		IF y1 < -EPS THEN Rotation = 360-Rotation
		PARAMETERS Rotation = Rotation
	ELSE
		DIM x_projection[1][3]
		DIM x_projection_90[1][3]

		length = SQR(MEP_NumConnectionData[rot_conn][4]^2 + MEP_NumConnectionData[rot_conn][5]^2)

		x_projection[1][1] = MEP_NumConnectionData[rot_conn][4]/length
		x_projection[1][2] = MEP_NumConnectionData[rot_conn][5]/length
		x_projection[1][3] = 0

		DIM MatrixT[3][3]

		MatrixT[1][1] = COS(90)
		MatrixT[1][2] = SIN(90)
		MatrixT[1][3] = 0

		MatrixT[2][1] = -SIN(90)
		MatrixT[2][2] = COS(90)
		MatrixT[2][3] = 0

		MatrixT[3][1] = 0
		MatrixT[3][2] = 0
		MatrixT[3][3] = 1

		PUT x_projection[1][1], x_projection[1][2], x_projection[1][3]

		Coordinates = NSP/3

		DIM inCoords[20][3]

		FOR cnum = 1 TO Coordinates
			inCoords[cnum][1] = GET(1)
			inCoords[cnum][2] = GET(1)
			inCoords[cnum][3] = GET(1)
		NEXT cnum

		FOR cnum = 1 TO Coordinates
			x_projection_90[1][1] = inCoords[cnum][1]*MatrixT[1][1]+inCoords[cnum][2]*MatrixT[2][1]+inCoords[cnum][3]*MatrixT[3][1]
			x_projection_90[1][2] = inCoords[cnum][1]*MatrixT[1][2]+inCoords[cnum][2]*MatrixT[2][2]+inCoords[cnum][3]*MatrixT[3][2]
			x_projection_90[1][3] = inCoords[cnum][1]*MatrixT[1][3]+inCoords[cnum][2]*MatrixT[2][3]+inCoords[cnum][3]*MatrixT[3][3]
		NEXT cnum

		x2 = x_projection_90[1][1]
		y2 = x_projection_90[1][2]
		z2 = x_projection_90[1][3]

		x1 = MEP_NumConnectionData[rot_conn][7]
		y1 = MEP_NumConnectionData[rot_conn][8]
		z1 = MEP_NumConnectionData[rot_conn][9]

		arcVal = (x1*x2+y1*y2+z1*z2)/((SQR(x1^2+y1^2+z1^2))*(SQR(x2^2+y2^2+z2^2)))
		IF arcVal > 1 THEN arcVal = 1
		IF arcVal < -1 THEN arcVal = -1
		Rotation = ACS(arcVal)
		IF z1 < -EPS THEN Rotation = 360-Rotation
		PARAMETERS Rotation = Rotation
	ENDIF
ENDIF

! --- uploading of MEP_NumConnectionData

FOR k = 1 TO MEP_NumberConnections
	FOR i = 1 TO 3
		MEP_NumConnectionData[k][i] = MEP_NumConnectionData[k][i]+MEP_Position[1][i]
		PARAMETERS MEP_NumConnectionData[k][i] = MEP_NumConnectionData[k][i]
	NEXT i
NEXT k
