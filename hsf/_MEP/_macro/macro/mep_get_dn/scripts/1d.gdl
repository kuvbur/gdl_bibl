!mep_get_dn_material_in = "ст. 3"
!mep_get_dn_dn = 108/1000
!call "mep_get_dn" parameters all mep_get_dn_dn=mep_get_dn_dn, mep_get_dn_material_in=mep_get_dn_material_in, mep_get_dn_pn=mep_get_dn_pn, ConID=ConID returned_parameters mep_get_dn_dy, mep_get_dn_ves, mep_get_dn_th, mep_get_dn_material_out, mep_get_dn_pn, mep_get_find
n = REQUEST ("Name_of_main", "", name)
EPS = 0.0001
EPS_DIAM = 0.002
print_str = name + " : mep_get_dn : "
nprint = strlen(print_str)

MEP_UNKNOW = 0
MEP_ST3 = 1
MEP_AISI = 2
MEP_09G2S = 3
MEP_PVC = 4
MEP_GSH = 5
MEP_VG = 6
MEP_PE = 7
MEP_PPR_1 = 8
MEP_PPR_2 = 9
MEP_PPR_3 = 10
MEP_PPR_4 = 11
MEP_PPR_HV = 12
MEP_PVC_PIN = 13
MEP_COOPER = 14

MEP_TYPE_TUBE = 1
MEP_TYPE_PEREH = 2
MEP_TYPE_TR = 3
MEP_TYPE_OTVOD = 4
MEP_TYPE_FLANGE = 5
MEP_TYPE_OP = 6
MEP_TYPE_EQONTUBE = 7
MEP_TYPE_ZAGL = 8

FILE_DEPENDENCE "ду_ВГ.txt"
FILE_DEPENDENCE "ду_PVC-U.txt"
FILE_DEPENDENCE "ду_PVC-U_Pin.txt"
FILE_DEPENDENCE "ду_12Х18Н10Т.txt"
FILE_DEPENDENCE "ду_09Г2С.txt"
FILE_DEPENDENCE "ду_ПЭ100"
FILE_DEPENDENCE "ду_PPR.txt"
FILE_DEPENDENCE "ду_медь.txt"

mep_get_dn_pn = 0
!!========= Если материал не указан - попробуем его определить по штриховке системы коннектора ==========
if ConID<EPS then ConID = 1
if ConID>vardim1(MEP_StrConnectionData) then ConID=vardim1(MEP_StrConnectionData)

if strlen(mep_get_dn_material_in)<1 then
	call "mep_get_material" parameters all, ConID=ConID, MEP_StrConnectionData = MEP_StrConnectionData returned_parameters mep_get_ma_name, mep_get_ma_ro, mep_get_ma_group, mep_get_ma_pn
	if STRLEN(mep_get_ma_name)>0 then 
		mep_get_dn_material_in = mep_get_ma_name
		mep_get_dn_material_out = mep_get_ma_name
		mep_get_dn_pn = mep_get_ma_pn
	endif
else
	call "mep_get_material" parameters all mep_get_ma_name_in=mep_get_dn_material_in, ConID=ConID, MEP_StrConnectionData=MEP_StrConnectionData returned_parameters mep_get_ma_name, mep_get_ma_ro, mep_get_ma_group, mep_get_ma_pn
	mep_get_dn_pn = mep_get_ma_pn
endif

!!========= Получаем данные о файлах с сортаментом ==========
flag_find = 0
dict type_data
dict mep_type_data

if mep_get_ma_group>MEP_UNKNOW then
	reload_data = 0 : version = ""
	isFirstRun = 0 : n = APPLICATION_QUERY("parameter_script", "firstoccasion_in_progress", isFirstRun)
	if isFirstRun then call "mep_get_version" parameters all returned_parameters reload_data, version
	if reload_data = 1 then
		call "mep_common_data" parameters all, mep_set_type=0 returned_parameters mep_data, mep_type_data
		parameters mep_data = mep_data
	else
		call "mep_common_data" parameters all, mep_set_type=1 returned_parameters mep_type_data
	endif
	if haskey(mep_type_data.type_data) and haskey(mep_data.filelist) then
		type_data = mep_type_data.type_data
		if haskey(type_data.t[MEP_TYPE_TUBE].mat[mep_get_ma_group].fname) then
			has_pn = 0 : if mep_get_ma_pn>0 then has_pn = 1 !!TODO Доделать выбор диаметра по давлению для ПЭ
			gosub "find_dn"
		else
			ttype = "ERROR"
			if mep_get_ma_group = MEP_UNKNOW then ttype = "MEP_UNKNOW"
			if mep_get_ma_group = MEP_ST3 then ttype = "MEP_ST3"
			if mep_get_ma_group = MEP_AISI then ttype = "MEP_AISI"
			if mep_get_ma_group = MEP_09G2S then ttype = "MEP_09G2S"
			if mep_get_ma_group = MEP_PVC then ttype = "MEP_PVC"
			if mep_get_ma_group = MEP_GSH then ttype = "MEP_GSH"
			if mep_get_ma_group = MEP_VG then ttype = "MEP_VG"
			if mep_get_ma_group = MEP_PE then ttype = "MEP_PE"
			if mep_get_ma_group = MEP_PPR_1 then ttype = "MEP_PPR_1"
			if mep_get_ma_group = MEP_PPR_2 then ttype = "MEP_PPR_2"
			if mep_get_ma_group = MEP_PPR_3 then ttype = "MEP_PPR_3"
			if mep_get_ma_group = MEP_PPR_4 then ttype = "MEP_PPR_4"
			if mep_get_ma_group = MEP_PPR_HV then ttype = "MEP_PPR_HV"
			if mep_get_ma_group = MEP_PVC_PIN then ttype = "MEP_PVC_PIN"
			if mep_get_ma_group = MEP_COOPER then ttype = "MEP_COOPER"
			print_str = print_str + " haskey(type_data.t[MEP_TYPE_TUBE].mat["+ttype+"].fname) "
		endif
	else
		print_str = print_str + " haskey(mep_data.type_data) "
	endif
else
	print_str = print_str + " mep_get_ma_group=MEP_UNKNOW "
	goto "m_end"
endif

!Если ничего не нашли - поставим сталь Ст3, а вес вычислим по объёму
if flag_find = 0 then
	mep_get_dn_dy = mep_get_dn_dn
	mep_get_dn_th = 0.003
	mep_get_dn_ves = 3.1415*(mep_get_dn_dn/2)*(mep_get_dn_dn/2)-3.1415*((mep_get_dn_dn-mep_get_dn_th*2)/2)*(mep_get_dn_dn-mep_get_dn_th*2/2)
endif
mep_get_find = flag_find

goto "m_end"

"find_dn":
	npop = 0
	for inx_type=1 to vardim1(type_data.t[MEP_TYPE_TUBE].mat[mep_get_ma_group].fname)
		fname = type_data.t[MEP_TYPE_TUBE].mat[mep_get_ma_group].fname[inx_type]
		!Поищем в прочитанных файлах файл с таким именем
		for kk=1 to vardim1(mep_data.filelist)
			if fname = mep_data.filelist[kk] then
				!Ищем в сортаменте
				inx_file = kk : ctype = MEP_TYPE_TUBE : cgroup = mep_get_ma_group
				if haskey(mep_data.file[inx_file].v1) then
					gosub "get_ncol"
					_has_pn = has_pn : if icpn<EPS then _has_pn = 0
					for i=1 to vardim1(mep_data.file[inx_file].v1)
						npop = npop + 1
						!Проверяем давление - должно быть не меньше заданного
						if _has_pn = 1 then
							ic = icpn : gosub "get_val" : tpn = vc
							if abs(mep_get_dn_pn/10-tpn)<EPS_DIAM or (mep_get_dn_pn/10-tpn)>EPS then flag_find_pn = 1
						else
							flag_find_pn = 1
						endif
						if flag_find_pn then
							ic = icd1 : gosub "get_val" : tdn = vc/1000
							if tdn > 0.015 then
								EPS_DIAM = 0.002
							else
								EPS_DIAM = 0.0001
							endif
							if abs(mep_get_dn_dn-tdn)<EPS_DIAM then flag_find = 1
						endif
						if flag_find = 1 then
							ic = icdy : gosub "get_val" : mep_get_dn_dy = vc/1000
							ic = ict1 : gosub "get_val" : mep_get_dn_th = vc/1000
							ic = icves : gosub "get_val" : mep_get_dn_ves = vc
							i=vardim1(mep_data.file[inx_file].v1) !Выход из цикла
						endif
					next i
					if flag_find = 1 then kk = vardim1(mep_data.filelist) !Выход из цикла
				else
					print_str = print_str + " haskey(mep_data.file[inx_file].v1) "
				endif
			endif
		next kk
		if flag_find = 1 then inx_type = vardim1(type_data.t[MEP_TYPE_TUBE].mat[mep_get_ma_group].fname) !Выход из цикла
	next inx_type
return

"get_ncol":
	!Получение номеров столбцов, в которых хранятся данные
	icd1 = 0 : ict1 = 0 : icd2 = 0 : ict2 = 0 : icves = 0 : icdim1 = 0 : icdim2 = 0 : icpn = 0 : icdy = 0 : iang = 0 : icsuff = 0
	if haskey(type_data.t[ctype].mat[cgroup].d1[inx_type]) then icd1 = type_data.t[ctype].mat[cgroup].d1[inx_type]
	if haskey(type_data.t[ctype].mat[cgroup].t1[inx_type]) then ict1 = type_data.t[ctype].mat[cgroup].t1[inx_type]
	if haskey(type_data.t[ctype].mat[cgroup].d2[inx_type]) then icd2 = type_data.t[ctype].mat[cgroup].d2[inx_type]
	if haskey(type_data.t[ctype].mat[cgroup].t2[inx_type]) then ict2 = type_data.t[ctype].mat[cgroup].t2[inx_type]
	if haskey(type_data.t[ctype].mat[cgroup].ves[inx_type]) then icves = type_data.t[ctype].mat[cgroup].ves[inx_type]
	if haskey(type_data.t[ctype].mat[cgroup].dim1[inx_type]) then icdim1 = type_data.t[ctype].mat[cgroup].dim1[inx_type]
	if haskey(type_data.t[ctype].mat[cgroup].dim2[inx_type]) then icdim2 = type_data.t[ctype].mat[cgroup].dim2[inx_type]
	if haskey(type_data.t[ctype].mat[cgroup].pn[inx_type]) then icpn = type_data.t[ctype].mat[cgroup].pn[inx_type]
	if haskey(type_data.t[ctype].mat[cgroup].dy[inx_type]) then icdy = type_data.t[ctype].mat[cgroup].dy[inx_type]
	if haskey(type_data.t[ctype].mat[cgroup].ang[inx_type]) then iang = type_data.t[ctype].mat[cgroup].ang[inx_type]
	if haskey(type_data.t[ctype].mat[cgroup].suff[inx_type]) then icsuff = type_data.t[ctype].mat[cgroup].suff[inx_type]
return

"get_val":
	!Получение данных из i строки столбца ic
	vc = 1
	if abs(ic-1)<EPS then
		vc = mep_data.file[inx_file].v1[i]
		return
	endif
	if abs(ic-2)<EPS then
		vc = mep_data.file[inx_file].v2[i]
		return
	endif
	if abs(ic-3)<EPS then
		vc = mep_data.file[inx_file].v3[i]
		return
	endif
	if abs(ic-4)<EPS then
		vc = mep_data.file[inx_file].v4[i]
		return
	endif
	if abs(ic-5)<EPS then
		vc = mep_data.file[inx_file].v5[i]
		return
	endif
	if abs(ic-6)<EPS then
		vc = mep_data.file[inx_file].v6[i]
		return
	endif
	if abs(ic-7)<EPS then
		vc = mep_data.file[inx_file].v7[i]
		return
	endif
	if abs(ic-8)<EPS then
		vc = mep_data.file[inx_file].v8[i]
		return
	endif
	if abs(ic-9)<EPS then
		vc = mep_data.file[inx_file].v9[i]
		return
	endif
	if abs(ic-10)<EPS then
		vc = mep_data.file[inx_file].v10[i]
		return
	endif
	if abs(ic-11)<EPS then
		vc = mep_data.file[inx_file].v11[i]
		return
	endif
	if abs(ic-12)<EPS then
		vc = mep_data.file[inx_file].v12[i]
		return
	endif
	if abs(ic-13)<EPS then
		vc = mep_data.file[inx_file].v13[i]
		return
	endif
	if abs(ic-14)<EPS then
		vc = mep_data.file[inx_file].v14[i]
		return
	endif
	if abs(ic-15)<EPS then
		vc = mep_data.file[inx_file].v15[i]
		return
	endif
	if abs(ic-16)<EPS then
		vc = mep_data.file[inx_file].v16[i]
		return
	endif
	if abs(ic-17)<EPS then
		vc = mep_data.file[inx_file].v17[i]
		return
	endif
	if abs(ic-18)<EPS then
		vc = mep_data.file[inx_file].v18[i]
		return
	endif
	if abs(ic-19)<EPS then
		vc = mep_data.file[inx_file].v19[i]
		return
	endif
	if abs(ic-20)<EPS then
		vc = mep_data.file[inx_file].v20[i]
		return
	endif
return

"m_end":
if strlen(print_str)>nprint then print print_str
exit mep_get_dn_dy, mep_get_dn_ves, mep_get_dn_th, mep_get_dn_material_out, mep_get_dn_pn, mep_get_find
