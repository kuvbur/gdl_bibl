EPS = 0.00001
!-----------Основной---------------------
if (GLOB_SCRIPT_TYPE = 2 or GLOB_SCRIPT_TYPE = 3) and (GLOB_PREVIEW_MODE <> 0 or GLOB_FEEDBACK_MODE <> 0) then
	gs_detlevel_2D_m = 1
	gs_detlevel_3D_m = 1
	show_axis = 0
	show_axis_and = 1
	show_conventions = 0
	show_size = 0
	show_el = 1
	show_isol = 0
	hide_conventions = 0
	show_conventions_sal = 0
	show_op = 1
	show_sal = 1
else
	call "Показ_систем" PARAMETERS All isMep=1, isEqp=1 RETURNED_PARAMETERS show_el, syst_name
	success = LIBRARYGLOBAL ("Libraryflobals-mep", "show_op", show_op)
	success = LIBRARYGLOBAL ("Libraryflobals-mep", "show_sal", show_sal)
	success = LIBRARYGLOBAL ("Libraryflobals-mep", "show_axis", show_axis)
	success = LIBRARYGLOBAL ("Libraryflobals-mep", "show_axis_and", show_axis_and)
	success = LIBRARYGLOBAL ("Libraryflobals-mep", "show_isol", show_isol)
	success = LIBRARYGLOBAL ("Libraryflobals-mep", "show_conventions", show_conventions)
	success = LIBRARYGLOBAL ("Libraryflobals-mep", "show_size", show_size)
	success = LIBRARYGLOBAL ("Libraryflobals-mep", "gs_detlevel_2D_m",gs_detlevel_2D_m)
	success = LIBRARYGLOBAL ("Libraryflobals-mep", "gs_detlevel_3D_m", gs_detlevel_3D_m)
	success = LIBRARYGLOBAL ("Libraryflobals-mep", "show_conventions_sal", show_conventions_sal)
endif

IF gs_detlevel_3D_m = 2 THEN res = 22
IF gs_detlevel_3D_m = 1 THEN res = 12
IF gs_detlevel_3D_m = 0 THEN res = 12
is_sech = 0 : if (show_el-1)>EPS then is_sech = 1
unID2=900
if GLOB_PREVIEW_MODE = 0 then
	dob_o_txt="Ось на отм. "
	txt2 = ""
	aaz = SYMB_POS_Z
	if abs(aaz)<EPS then
		az = "0.000"
		znak1 = ""
	 else
		az = str("%.3m", abs(aaz))
		if aaz < EPS then 
			znak1 = "-"
		else
			znak1 = "+"
		endif
	endif
	parameters otm_niz = dob_o_txt + znak1 + az
	parameters otm_elem = SYMB_POS_Z
endif

if show_conventions then
	add_sal = 0.0005*GLOB_SCALE*(type_sal<>"Нет")
	add_ub = 0.001*GLOB_SCALE
else
	add_sal = 0.1*(type_sal<>"Нет")
	add_ub = 0.1
endif

PARAMETERS ConStatus_1 = 0
PARAMETERS ConWidth_1 = 0.0001
PARAMETERS ConLength_1 = 0.0001
PARAMETERS ConLength_1 = 0.0001

DIM StyleStr[][]
DIM StyleID[][]
!VALUES "LimitedRotation" 0, 90, 180, 270
DIM x_projection[1][3]

! ****** defaultMatrix ****** !

IF ABS(ABS(MEP_Position[2][3])-1) < EPS THEN
	defaultMatrix[1][1] = 0
	defaultMatrix[1][2] = 0
	defaultMatrix[1][3] = 1

	defaultMatrix[2][1] = 1
	defaultMatrix[2][2] = 0
	defaultMatrix[2][3] = 0
ELSE
	length = SQR(MEP_Position[2][1]^2 + MEP_Position[2][2]^2)

	x_projection[1][1] = MEP_Position[2][1]/length
	x_projection[1][2] = MEP_Position[2][2]/length
	x_projection[1][3] = 0

	DIM MatrixT[3][3]

	MatrixT[1][1] = COS(90)
	MatrixT[1][2] = SIN(90)
	MatrixT[1][3] = 0

	MatrixT[2][1] = -SIN(90)
	MatrixT[2][2] = COS(90)
	MatrixT[2][3] = 0

	MatrixT[3][1] = 0
	MatrixT[3][2] = 0
	MatrixT[3][3] = 1

	PUT x_projection[1][1], x_projection[1][2], x_projection[1][3]

	Coordinates = NSP/3

	DIM inCoords[20][3]

	FOR cnum = 1 TO Coordinates
		inCoords[cnum][1] = GET(1)
		inCoords[cnum][2] = GET(1)
		inCoords[cnum][3] = GET(1)
	NEXT cnum

	FOR cnum = 1 TO Coordinates
		defaultMatrix[2][1] = inCoords[cnum][1]*MatrixT[1][1]+inCoords[cnum][2]*MatrixT[2][1]+inCoords[cnum][3]*MatrixT[3][1]
		defaultMatrix[2][2] = inCoords[cnum][1]*MatrixT[1][2]+inCoords[cnum][2]*MatrixT[2][2]+inCoords[cnum][3]*MatrixT[3][2]
		defaultMatrix[2][3] = inCoords[cnum][1]*MatrixT[1][3]+inCoords[cnum][2]*MatrixT[2][3]+inCoords[cnum][3]*MatrixT[3][3]
	NEXT cnum

	defaultMatrix[1][1] = MEP_Position[2][1]
	defaultMatrix[1][2] = MEP_Position[2][2]
	defaultMatrix[1][3] = MEP_Position[2][3]
ENDIF

defaultMatrix[3][1] = -defaultMatrix[2][2]*defaultMatrix[1][3]+defaultMatrix[2][3]*defaultMatrix[1][2]
defaultMatrix[3][2] = -defaultMatrix[2][3]*defaultMatrix[1][1]+defaultMatrix[2][1]*defaultMatrix[1][3]
defaultMatrix[3][3] = -defaultMatrix[2][1]*defaultMatrix[1][2]+defaultMatrix[2][2]*defaultMatrix[1][1]

PARAMETERS defaultMatrix[1][1] = defaultMatrix[1][1]
PARAMETERS defaultMatrix[1][2] = defaultMatrix[1][2]
PARAMETERS defaultMatrix[1][3] = defaultMatrix[1][3]

PARAMETERS defaultMatrix[2][1] = defaultMatrix[2][1]
PARAMETERS defaultMatrix[2][2] = defaultMatrix[2][2]
PARAMETERS defaultMatrix[2][3] = defaultMatrix[2][3]

PARAMETERS defaultMatrix[3][1] = defaultMatrix[3][1]
PARAMETERS defaultMatrix[3][2] = defaultMatrix[3][2]
PARAMETERS defaultMatrix[3][3] = defaultMatrix[3][3]


IF GLOB_MODPAR_NAME = "Rotation" | GLOB_MODPAR_NAME = "LimitedRotation" THEN

	! The LimitedRotation is linked to Rotation
	IF GLOB_MODPAR_NAME = "LimitedRotation" THEN
		Rotation = LimitedRotation
		PARAMETERS Rotation = Rotation
	ENDIF

	! ****** rotated MEP_Position matrix ****** !


	! --- Building of Transformational Matrix

	DIM MatrixT[3][3]

	FOR j = 1 TO 3
		FOR i = 1 TO 3
			MatrixT[j][i] = defaultMatrix[j][i]
		NEXT i
	NEXT j


	! --- Input Coordinates

	PUT 1, 0, 0
	PUT 0, COS(Rotation), SIN(Rotation)
	PUT 0, -SIN(Rotation), COS(Rotation)

	Coordinates = NSP/3

	DIM inCoords[20][3]

	FOR cnum = 1 TO Coordinates
		inCoords[cnum][1] = GET(1)
		inCoords[cnum][2] = GET(1)
		inCoords[cnum][3] = GET(1)
	NEXT cnum


	! --- the Matrix Operation, what makes the Output-Coordinates

	DIM outCoords[20][3]

	FOR cnum = 1 TO Coordinates
		outCoords[cnum][1] = inCoords[cnum][1]*MatrixT[1][1]+inCoords[cnum][2]*MatrixT[2][1]+inCoords[cnum][3]*MatrixT[3][1]
		outCoords[cnum][2] = inCoords[cnum][1]*MatrixT[1][2]+inCoords[cnum][2]*MatrixT[2][2]+inCoords[cnum][3]*MatrixT[3][2]
		outCoords[cnum][3] = inCoords[cnum][1]*MatrixT[1][3]+inCoords[cnum][2]*MatrixT[2][3]+inCoords[cnum][3]*MatrixT[3][3]
	NEXT cnum

	FOR k = 1 TO 2
		FOR i = 1 TO 3
			MEP_Position[1+k][i] = outCoords[k][i]
			PARAMETERS MEP_Position[1+k][i] = outCoords[k][i]
		NEXT i
	NEXT k

	length = SQR(MEP_Position[2][1]^2+MEP_Position[2][2]^2+MEP_Position[2][3]^2)
	IF ABS(length-1) > EPS THEN
		MEP_Position[2][1] = MEP_Position[2][1]/length
		PARAMETERS MEP_Position[2][1] = MEP_Position[2][1]
		MEP_Position[2][2] = MEP_Position[2][2]/length
		PARAMETERS MEP_Position[2][2] = MEP_Position[2][2]
		MEP_Position[2][3] = MEP_Position[2][3]/length
		PARAMETERS MEP_Position[2][3] = MEP_Position[2][3]
	ENDIF

	length = SQR(MEP_Position[3][1]^2+MEP_Position[3][2]^2+MEP_Position[3][3]^2)
	IF ABS(length-1) > EPS THEN
		MEP_Position[3][1] = MEP_Position[3][1]/length
		PARAMETERS MEP_Position[3][1] = MEP_Position[3][1]
		MEP_Position[3][2] = MEP_Position[3][2]/length
		PARAMETERS MEP_Position[3][2] = MEP_Position[3][2]
		MEP_Position[3][3] = MEP_Position[3][3]/length
		PARAMETERS MEP_Position[3][3] = MEP_Position[3][3]
	ENDIF

	FOR i = 2 TO 3
		FOR j = 1 TO 3
			IF ABS(MEP_Position[i][j]) < EPS THEN
				MEP_Position[i][j] = 0
				PARAMETERS MEP_Position[i][j] = MEP_Position[i][j]
			ENDIF
		NEXT j
	NEXT i
ELSE
	! ****** Calculation of Rotation ****** !

	IF ABS(ABS(MEP_Position[2][3])-1) < EPS THEN
		x2 = 1
		y2 = 0
		z2 = 0

		x1 = MEP_Position[3][1]
		y1 = MEP_Position[3][2]
		z1 = MEP_Position[3][3]

		arcVal = (x1*x2+y1*y2+z1*z2)/((SQR(x1^2+y1^2+z1^2))*(SQR(x2^2+y2^2+z2^2)))
		IF arcVal > 1 THEN arcVal = 1
		IF arcVal < -1 THEN arcVal = -1
		Rotation = ACS(arcVal)
		IF y1 < -EPS THEN Rotation = 360-Rotation
		PARAMETERS Rotation = Rotation
	ELSE
		DIM x_projection[1][3]
		DIM x_projection_90[1][3]

		length = SQR(MEP_Position[2][1]^2 + MEP_Position[2][2]^2)

		x_projection[1][1] = MEP_Position[2][1]/length
		x_projection[1][2] = MEP_Position[2][2]/length
		x_projection[1][3] = 0

		DIM MatrixT[3][3]

		MatrixT[1][1] = COS(90)
		MatrixT[1][2] = SIN(90)
		MatrixT[1][3] = 0

		MatrixT[2][1] = -SIN(90)
		MatrixT[2][2] = COS(90)
		MatrixT[2][3] = 0

		MatrixT[3][1] = 0
		MatrixT[3][2] = 0
		MatrixT[3][3] = 1

		PUT x_projection[1][1], x_projection[1][2], x_projection[1][3]

		Coordinates = NSP/3

		DIM inCoords[20][3]

		FOR cnum = 1 TO Coordinates
			inCoords[cnum][1] = GET(1)
			inCoords[cnum][2] = GET(1)
			inCoords[cnum][3] = GET(1)
		NEXT cnum

		FOR cnum = 1 TO Coordinates
			x_projection_90[1][1] = inCoords[cnum][1]*MatrixT[1][1]+inCoords[cnum][2]*MatrixT[2][1]+inCoords[cnum][3]*MatrixT[3][1]
			x_projection_90[1][2] = inCoords[cnum][1]*MatrixT[1][2]+inCoords[cnum][2]*MatrixT[2][2]+inCoords[cnum][3]*MatrixT[3][2]
			x_projection_90[1][3] = inCoords[cnum][1]*MatrixT[1][3]+inCoords[cnum][2]*MatrixT[2][3]+inCoords[cnum][3]*MatrixT[3][3]
		NEXT cnum

		x2 = x_projection_90[1][1]
		y2 = x_projection_90[1][2]
		z2 = x_projection_90[1][3]

		x1 = MEP_Position[3][1]
		y1 = MEP_Position[3][2]
		z1 = MEP_Position[3][3]

		arcVal = (x1*x2+y1*y2+z1*z2)/((SQR(x1^2+y1^2+z1^2))*(SQR(x2^2+y2^2+z2^2)))
		IF arcVal > 1 THEN arcVal = 1
		IF arcVal < -1 THEN arcVal = -1
		Rotation = ACS(arcVal)
		IF z1 < -EPS THEN Rotation = 360-Rotation
		PARAMETERS Rotation = Rotation
	ENDIF
ENDIF

! The LimitedRotation is linked to Rotation
LimitedRotation = Rotation
PARAMETERS LimitedRotation = LimitedRotation


						! ---------------- !
						! --- Z vector --- !
						! ---------------- !

dZx = -MEP_Position[3][2]*MEP_Position[2][3]+MEP_Position[3][3]*MEP_Position[2][2]
dZy = -MEP_Position[3][3]*MEP_Position[2][1]+MEP_Position[3][1]*MEP_Position[2][3]
dZz = -MEP_Position[3][1]*MEP_Position[2][2]+MEP_Position[3][2]*MEP_Position[2][1]


					!!! +++ Transformational Matrix +++ !!!

DIM tMatrix[3][3]

tMatrix[1][1] = MEP_Position[2][1]
tMatrix[1][2] = MEP_Position[2][2]
tMatrix[1][3] = MEP_Position[2][3]

tMatrix[2][1] = MEP_Position[3][1]
tMatrix[2][2] = MEP_Position[3][2]
tMatrix[2][3] = MEP_Position[3][3]

tMatrix[3][1] = dZx
tMatrix[3][2] = dZy
tMatrix[3][3] = dZz


						!!! +++ Input Coordinates +++ !!!

PUT ConPosX_1, ConPosY_1+ConLength_1, ConPosZ_1
PUT gs_Connections[1][4], gs_Connections[1][5], gs_Connections[1][6]
PUT gs_Connections[1][7], gs_Connections[1][8], gs_Connections[1][9]

PUT ConPosX_1, ConPosY_1, ConPosZ_1
PUT -gs_Connections[1][4], -gs_Connections[1][5], -gs_Connections[1][6]
PUT -gs_Connections[1][7], -gs_Connections[1][8], -gs_Connections[1][9]

Coordinates = NSP/3

DIM inCoords[20][3]

FOR cnum = 1 TO Coordinates
	inCoords[cnum][1] = GET(1)
	inCoords[cnum][2] = GET(1)
	inCoords[cnum][3] = GET(1)
NEXT cnum


! --- the Matrix Operation, what make the Output-Coordinates

DIM outCoords[20][3]

FOR cnum = 1 TO Coordinates
	outCoords[cnum][1] = inCoords[cnum][1]*tMatrix[1][1]+inCoords[cnum][2]*tMatrix[2][1]+inCoords[cnum][3]*tMatrix[3][1]
	outCoords[cnum][2] = inCoords[cnum][1]*tMatrix[1][2]+inCoords[cnum][2]*tMatrix[2][2]+inCoords[cnum][3]*tMatrix[3][2]
	outCoords[cnum][3] = inCoords[cnum][1]*tMatrix[1][3]+inCoords[cnum][2]*tMatrix[2][3]+inCoords[cnum][3]*tMatrix[3][3]
NEXT cnum

z = 0
FOR i = 0 TO MEP_NumberConnections-1
	z = z + outCoords[1+3*i][3]
NEXT i

z = MEP_Position[1][3] + z/MEP_NumberConnections
PARAMETERS dys = PipeOuterDiameter
PARAMETERS ac_toplevel 		= z
PARAMETERS ac_bottomlevel 	= z
PARAMETERS auto_dlin = 0

dZx = 0 : dZy = 0 : dZz = 0
dx = 0 : dy = 0 : dz = 0 : rx1 = 0 : ry1 = 0 : dirAngOnXYPlane = 0
dZx = -MEP_Position[3][2]*MEP_Position[2][3]+MEP_Position[3][3]*MEP_Position[2][2]
dZy = -MEP_Position[3][3]*MEP_Position[2][1]+MEP_Position[3][1]*MEP_Position[2][3]
dZz = -MEP_Position[3][1]*MEP_Position[2][2]+MEP_Position[3][2]*MEP_Position[2][1]
rx1 = MEP_Position[1][1]
ry1 = MEP_Position[1][2]
rz1 = MEP_Position[1][3]
rx2 = rx1+MEP_Position[2][1]*MEP_StraightLength
ry2 = ry1+MEP_Position[2][2]*MEP_StraightLength
rz2 = rz1+MEP_Position[2][3]*MEP_StraightLength
dx = rx2-rx1
dy = ry2-ry1
dz = rz2-rz1
if abs(dz)<EPS then dz = 0
if abs(dx)<EPS then dx = 0
if abs(dy)<EPS then dy = 0
IF ABS(dZz-1) < EPS THEN
	arCosVal = MEP_Position[3][1]/1
	IF ABS(arCosVal) > 1 AND SGN(arCosVal) = -1 THEN arCosVal = -1
	IF ABS(arCosVal) > 1 AND SGN(arCosVal) = 1 THEN arCosVal = 1
	dirAngOnXYPlane = ACS(arCosVal)-90
	IF SGN(MEP_Position[3][2]) = -1 THEN dirAngOnXYPlane = 180-dirAngOnXYPlane
ELSE
	IF ABS(dx)>EPS OR ABS(dy)>EPS THEN
		arCosVal = dx/(SQR(dx^2+dy^2))
		IF ABS(arCosVal) > 1 AND SGN(arCosVal) = -1 THEN arCosVal = -1
		IF ABS(arCosVal) > 1 AND SGN(arCosVal) = 1 THEN arCosVal = 1
		dirAngOnXYPlane = ACS(arCosVal)
		IF SGN(dy) = -1 THEN dirAngOnXYPlane = 360-dirAngOnXYPlane
	ENDIF
ENDIF
