
! Cable Ladder Wye


IF gs_detlevel_3D_m = -1 THEN
	gs_detlevel_3D_m = 2	! Detailed
	IF gs_detlevel_3D = `Нет` THEN gs_detlevel_3D_m = 0
	IF gs_detlevel_3D = `Простой` THEN gs_detlevel_3D_m = 1
ENDIF

IF gs_detlevel_3D_m = 0 THEN END

CALL "MEP_m_RequestSystemGlobals" PARAMETERS ALL returned_parameters gs_cont_pen, sMat, gs_InsMat

IF useSysMat AND MEP_StrConnectionData[1][2] <> "0" THEN gs_CableTrayMat = sMat

PEN gs_cont_pen
MATERIAL gs_CableTrayMat


						! ---------------------- !
						! --- object rotator --- !
						! ---------------------- !

IF rot_conn THEN

	IF rot_conn = 1 THEN
		dist_x = gs_Connections[3][1]+gs_Connections[3][23]*gs_Connections[3][4]
		dist_y = gs_Connections[3][2]
	ELSE
		DIM inCoords[20][3]
		DIM outCoords[20][3]

		DIM cMatrix[3][3]

		cMatrix[1][1] = gs_Connections[rot_conn][4]
		cMatrix[1][2] = gs_Connections[rot_conn][5]
		cMatrix[1][3] = gs_Connections[rot_conn][6]

		cMatrix[2][1] = gs_Connections[rot_conn][7]
		cMatrix[2][2] = gs_Connections[rot_conn][8]
		cMatrix[2][3] = gs_Connections[rot_conn][9]

		cMatrix[3][1] = -cMatrix[2][2]*cMatrix[1][3]+cMatrix[2][3]*cMatrix[1][2]
		cMatrix[3][2] = -cMatrix[2][3]*cMatrix[1][1]+cMatrix[2][1]*cMatrix[1][3]
		cMatrix[3][3] = -cMatrix[2][1]*cMatrix[1][2]+cMatrix[2][2]*cMatrix[1][1]


		DIM tMatrix[3][3]

		tMatrix[1][1] = cMatrix[1][1]
		tMatrix[1][2] = cMatrix[2][1]
		tMatrix[1][3] = cMatrix[3][1]

		tMatrix[2][1] = cMatrix[1][2]
		tMatrix[2][2] = cMatrix[2][2]
		tMatrix[2][3] = cMatrix[3][2]

		tMatrix[3][1] = cMatrix[1][3]
		tMatrix[3][2] = cMatrix[2][3]
		tMatrix[3][3] = cMatrix[3][3]


								!!! +++ Input Coordinates +++ !!!

		cx = gs_Connections[rot_conn][1]+gs_Connections[rot_conn][23]*gs_Connections[rot_conn][4]
		cy = gs_Connections[rot_conn][2]+gs_Connections[rot_conn][23]*gs_Connections[rot_conn][5]
		cz = gs_Connections[rot_conn][3]+gs_Connections[rot_conn][23]*gs_Connections[rot_conn][6]

		PUT cx, cy, cz

		Coordinates = NSP/3

		FOR cnum = 1 TO Coordinates
			inCoords[cnum][1] = GET(1)
			inCoords[cnum][2] = GET(1)
			inCoords[cnum][3] = GET(1)
		NEXT cnum


		! --- the Matrix Operation, what make the Output-Coordinates

		FOR cnum = 1 TO Coordinates
			outCoords[cnum][1] = inCoords[cnum][1]*tMatrix[1][1]+inCoords[cnum][2]*tMatrix[2][1]+inCoords[cnum][3]*tMatrix[3][1]
			outCoords[cnum][2] = inCoords[cnum][1]*tMatrix[1][2]+inCoords[cnum][2]*tMatrix[2][2]+inCoords[cnum][3]*tMatrix[3][2]
			outCoords[cnum][3] = inCoords[cnum][1]*tMatrix[1][3]+inCoords[cnum][2]*tMatrix[2][3]+inCoords[cnum][3]*tMatrix[3][3]
		NEXT cnum

		dist_x = outCoords[1][1]
		dist_y = outCoords[1][2]
	ENDIF

	CALL "MEP_m_object_rotator" PARAMETERS 	rot_conn = rot_conn,
											MEP_Position = MEP_Position,
											dist_x = dist_x,
											dist_y = dist_y,
											Rotation = Rotation,
											symbRotangle = SYMB_ROTANGLE,
											gs_Connections = gs_Connections,
											MEP_NumberConnections = MEP_NumberConnections,
											MEP_NumConnectionData = MEP_NumConnectionData,
											MEP_NumConnectedConnectionData = MEP_NumConnectedConnectionData,
											defaultMatrix = defaultMatrix
ENDIF


XFORM   MEP_Position[2][1], MEP_Position[3][1], dZx, MEP_Position[1][1],
		MEP_Position[2][2], MEP_Position[3][2], dZy, MEP_Position[1][2],
		MEP_Position[2][3], MEP_Position[3][3], dZz, MEP_Position[1][3]

HOTSPOT MEP_StraightLength/2, 0, 0, 100

endBranchX = ConPosX_3+ConLength_3*COS(MEP_BranchAngle)
endBranchY = ConPosY_3+ConLength_3*SIN(MEP_BranchAngle)

IF GLOB_CONTEXT > 40 AND GLOB_CONTEXT < 50 THEN
	ADDz -cableTrayHalfHeight

	mm = 15
	GOSUB 10

	PRISM_ NSP/3, cableTrayHeight,

		GET (NSP)

	DEL 1
ELSE
	IF MEP_cline_show_3D THEN					! -----> center line <----- !
		LIN_ 0, 0, 0, MEP_StraightLength, 0, 0
		LIN_ MEP_BranchOffset, 0, 0, ConPosX_3+ConLength_3*COS(MEP_BranchAngle), ConPosY_3+ConLength_3*SIN(MEP_BranchAngle), ConPosZ_3
	ENDIF

	IF cable_carrier_show THEN
		IF MEP_CoveredCableTray THEN				! -----> upper plane <----- !
			MULz 1-2*(ABS(MEP_EmptySideID - 3) < EPS)
			mm = 1
			GOSUB 10
			ADDz cableTrayHalfHeight
			POLY_ NSP/3,

				GET(NSP)
			DEL 2
		ENDIF


		MULz  1-2*(ABS(MEP_EmptySideID - 3) < EPS)
		ADDz -cableTrayHalfHeight
		ladderNum = MAX(4, INT(MEP_StraightLength/(0.75*ConWidth_1)))
		ladderDist = MEP_StraightLength/ladderNum
		ladderHalfDist = ladderDist/2
		ladderThk = MAX(0.03*(ladderDist > 0.06), (0.75*ConWidth_1)/10)
		FOR i = 1 TO ladderNum						! -----> main ladders <----- !
			ADDx ladderHalfDist+ladderDist*(i-1)
			PUT ladderThk/2, cableTrayHalfWidth, 1
			PUT -ladderThk/2, cableTrayHalfWidth, 1
			PUT -ladderThk/2, -cableTrayHalfWidth, 1
			PUT ladderThk/2, -cableTrayHalfWidth, 1
			PUT ladderThk/2, cableTrayHalfWidth, -1

			POLY_ NSP/3,

				GET(NSP)

			DEL 1
		NEXT i


		ladderNum = MAX(1.5, INT(ConLength_3/(0.75*ConWidth_3))+0.5)
		ladderDist = ConLength_3/ladderNum
		ladderNum = INT(ladderNum)
		ladderThk = MAX(0.03*(ladderDist > 0.06), (0.75*ConWidth_3)/10)
		mm = 15
		GOSUB 20
		PUT 0, endBranchY+cableTrayHalfWidthB*COS(MEP_BranchAngle), mm

		CUTPOLYA NSP/3, 2, 0,

			  GET(NSP)

		mm = 15
		PUT MEP_StraightLength, endBranchY-cableTrayHalfWidthB*COS(MEP_BranchAngle), mm
		GOSUB 30

		CUTPOLYA NSP/3, 2, 0,

			  GET(NSP)

		ADDy cableTrayHalfWidth						! -----> branch ladders <----- !
		PUT EPS, 0, 1
		PUT EPS, ladderThk, 1
		PUT MEP_StraightLength-EPS, ladderThk, 1
		PUT MEP_StraightLength-EPS, 0, 1
		PUT EPS, 0, -1

		POLY_ NSP/3,

			GET(NSP)
		DEL 1

		ADD MEP_BranchOffset+cableTrayHalfWidth/TAN(MEP_BranchAngle), cableTrayHalfWidth, 0
		ROTz -90+MEP_BranchAngle
		cd = cableTrayHalfWidthB/TAN(MEP_BranchAngle)

		FOR i = 1 TO ladderNum+1
			dd = ladderDist*(i-1)-(ladderThk/SIN(MEP_BranchAngle))*(i > 1)
			ADDy ladderDist*(i-1)+(ladderThk/SIN(MEP_BranchAngle))*(i = 1)

			xx = dd*TAN(MEP_BranchAngle)
			xx2 = (dd+ladderThk)*TAN(MEP_BranchAngle)
			IF xx > cableTrayHalfWidthB THEN xx = cableTrayHalfWidthB
			IF xx2 > cableTrayHalfWidthB THEN xx2 = cableTrayHalfWidthB

			PUT xx, 0, 1
			IF dd < cd AND cd < dd+ladderThk THEN PUT cableTrayHalfWidthB, cd-dd, 1
			PUT xx2, ladderThk, 1
			PUT -cableTrayHalfWidthB, ladderThk, 1
			PUT -cableTrayHalfWidthB, 0, 1
			PUT xx, 0, -1

			POLY_ NSP/3,

				GET(NSP)
			DEL 1
		NEXT i
		DEL 2

		CUTEND
		CUTEND
		DEL 2


		ADDz -cableTrayHalfHeight					! -----> sides <----- !

		mm = 0
		IF ABS(MEP_WyeTypeID - 1) < EPS THEN mm = 1
		GOSUB 20

		mm = cableTrayHeight
		GOSUB 20


		RULED NSP/6, 16+32,

			  GET(NSP)

		mm = 0
		GOSUB 30

		mm = cableTrayHeight
		GOSUB 30

		RULED NSP/6, 16+32,

			  GET(NSP)

		PUT 0, -cableTrayHalfWidth, 0
		PUT MEP_StraightLength, -cableTrayHalfWidth, 0

		PUT 0, -cableTrayHalfWidth, cableTrayHeight
		PUT MEP_StraightLength, -cableTrayHalfWidth, cableTrayHeight

		RULED NSP/6, 16+32,

			  GET(NSP)

		DEL 1

		CALL "MEP_m_ConnectionsMEP_4" PARAMETERS SetProgram = SetProgram,
				MEP_NumberConnections = MEP_NumberConnections,
				MEP_NumConnectionData = gs_Connections,
				gs_AddConnections = gs_AddConnections,
				cShow3D = 1,
				MEP_InsShow = 0,
				MEP_cline_show_3D = 0,
				gs_cont_pen = gs_cont_pen,
				ConPosX_1=ConPosX_1, ConPosY_1=ConPosY_1, ConPosZ_1=ConPosZ_1, ConLength_1=0, ConShow_1 = 0,
				ConPosX_2=ConPosX_2, ConPosY_2=ConPosY_2, ConPosZ_2=ConPosZ_2, ConLength_2=0, ConShow_2 = 0,
				ConPosX_3=ConPosX_3, ConPosY_3=ConPosY_3, ConPosZ_3=ConPosZ_3, ConLength_3=ConLength_3, ConShow_3 = 0, ConEdit_3 = 1
	ENDIF
ENDIF
DEL 1
BODY -1


END

10:
	IF ABS(MEP_WyeTypeID - 1) < EPS THEN
		PUT 0, cableTrayHalfWidth, mm
		distX = ConPosX_3-cableTrayHalfWidthB/SIN(MEP_BranchAngle)-MEP_BranchRadius*TAN(MEP_BranchAngle/2)
		alpha = 0
		FOR i = 1 TO arcRes+1
			PUT distX+MEP_BranchRadius*SIN(alpha), cableTrayHalfWidth+MEP_BranchRadius*(1-COS(alpha)), mm
			alpha = alpha + MEP_BranchAngle/arcRes
		NEXT i
		PUT endBranchX-cableTrayHalfWidthB*SIN(MEP_BranchAngle), endBranchY+cableTrayHalfWidthB*COS(MEP_BranchAngle), mm
		PUT endBranchX +cableTrayHalfWidthB*SIN(MEP_BranchAngle), endBranchY-cableTrayHalfWidthB*COS(MEP_BranchAngle), mm
		PUT ConPosX_3+cableTrayHalfWidthB/SIN(MEP_BranchAngle), cableTrayHalfWidth, mm
		PUT MEP_StraightLength, cableTrayHalfWidth, mm
		PUT MEP_StraightLength, -cableTrayHalfWidth, mm
		PUT 0, -cableTrayHalfWidth, mm
		PUT 0, cableTrayHalfWidth, mm
	ELSE
		PUT 0, cableTrayHalfWidth, mm
		PUT ConPosX_3-cableTrayHalfWidthB/SIN(MEP_BranchAngle), cableTrayHalfWidth, mm
		PUT endBranchX-cableTrayHalfWidthB*SIN(MEP_BranchAngle), endBranchY+cableTrayHalfWidthB*COS(MEP_BranchAngle), mm
		PUT endBranchX +cableTrayHalfWidthB*SIN(MEP_BranchAngle), endBranchY-cableTrayHalfWidthB*COS(MEP_BranchAngle), mm
		PUT ConPosX_3+cableTrayHalfWidthB/SIN(MEP_BranchAngle), cableTrayHalfWidth, mm
		PUT MEP_StraightLength, cableTrayHalfWidth, mm
		PUT MEP_StraightLength, -cableTrayHalfWidth, mm
		PUT 0, -cableTrayHalfWidth, mm
		PUT 0, cableTrayHalfWidth, mm
	ENDIF
RETURN

20:
	IF ABS(MEP_WyeTypeID - 1) < EPS THEN
		PUT 0, cableTrayHalfWidth, mm
		distX = ConPosX_3-cableTrayHalfWidthB/SIN(MEP_BranchAngle)-MEP_BranchRadius*TAN(MEP_BranchAngle/2)
		alpha = 0
		FOR i = 1 TO arcRes+1
			PUT distX+MEP_BranchRadius*SIN(alpha), cableTrayHalfWidth+MEP_BranchRadius*(1-COS(alpha)), mm
			alpha = alpha + MEP_BranchAngle/arcRes
		NEXT i
		PUT endBranchX-cableTrayHalfWidthB*SIN(MEP_BranchAngle), endBranchY+cableTrayHalfWidthB*COS(MEP_BranchAngle), mm
	ELSE
		PUT 0, cableTrayHalfWidth, mm
		PUT ConPosX_3-cableTrayHalfWidthB/SIN(MEP_BranchAngle), cableTrayHalfWidth, mm
		PUT endBranchX-cableTrayHalfWidthB*SIN(MEP_BranchAngle), endBranchY+cableTrayHalfWidthB*COS(MEP_BranchAngle), mm
	ENDIF
RETURN

30:
	PUT endBranchX+cableTrayHalfWidthB*SIN(MEP_BranchAngle), endBranchY-cableTrayHalfWidthB*COS(MEP_BranchAngle), mm
	PUT ConPosX_3+cableTrayHalfWidthB/SIN(MEP_BranchAngle), cableTrayHalfWidth, mm
	PUT MEP_StraightLength, cableTrayHalfWidth, mm
RETURN
