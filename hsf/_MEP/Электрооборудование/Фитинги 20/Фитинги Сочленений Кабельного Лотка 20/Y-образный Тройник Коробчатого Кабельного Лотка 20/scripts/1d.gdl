success = LIBRARYGLOBAL ("Libraryflobals-mep", "show_axis", show_axis)
success = LIBRARYGLOBAL ("Libraryflobals-mep", "show_axis_and", show_axis_and)
success = LIBRARYGLOBAL ("Libraryflobals-mep", "show_isol", show_isol)
success = LIBRARYGLOBAL ("Libraryflobals-mep", "show_conventions", show_conventions)
success = LIBRARYGLOBAL ("Libraryflobals-mep", "show_size", show_size)
success = LIBRARYGLOBAL ("Libraryflobals-mep", "gs_detlevel_3D_m", gs_detlevel_3D_m)
success = LIBRARYGLOBAL ("Libraryflobals-mep", "gs_detlevel_2D_m",gs_detlevel_2D_m)
call "Показ_систем" PARAMETERS All isMep=1 RETURNED_PARAMETERS show_el, syst_name
call "common_param" PARAMETERS ALL

EPS = 0.00001

HptsUnIDBeginForConnEnds = 30000

hceID_1 = HptsUnIDBeginForConnEnds+100
hceID_2 = HptsUnIDBeginForConnEnds+200
hceID_3 = HptsUnIDBeginForConnEnds+300

DIM WyeTypeStr_dim[2]
	WyeTypeStr_dim[1] = `Радиус`
	WyeTypeStr_dim[2] = `Со Скосом`


IF GLOB_MODPAR_NAME = "MEP_WyeType" THEN
	FOR i = 1 TO 2
		IF MEP_WyeType = WyeTypeStr_dim[i] THEN
			MEP_WyeTypeID = i
			PARAMETERS MEP_WyeTypeID = MEP_WyeTypeID
			i = 2
		ENDIF
	NEXT i
ENDIF
IF MEP_WyeType <> WyeTypeStr_dim[MEP_WyeTypeID] THEN
	MEP_WyeType = WyeTypeStr_dim[MEP_WyeTypeID]
	PARAMETERS MEP_WyeType = MEP_WyeType
ENDIF

IF ABS(MEP_WyeTypeID - 1) < EPS THEN
	arcRes = 12
	IF gs_detlevel_3D = `Простой` THEN arcRes = 2
ENDIF


						! ------------------ !
						! --- Properties --- !
						! ------------------ !

cableTrayWidth			= MEP_NumConnectionData[1][12]
cableTrayWidthB			= MEP_NumConnectionData[3][12]
cableTrayHeight			= MEP_NumConnectionData[1][13]
cableTrayHalfWidth		= MEP_NumConnectionData[1][12]/2
cableTrayHalfWidthB		= MEP_NumConnectionData[3][12]/2
cableTrayHalfHeight		= MEP_NumConnectionData[1][13]/2


IF GLOB_MODPAR_NAME = "setFlip" THEN
	IF ABS(MEP_Position[2][3]) < EPS THEN
		IF MEP_Position[2][1] > EPS OR ABS(MEP_Position[2][2]-1) < EPS THEN
			compareFlip = 0
		ELSE
			compareFlip = 1
		ENDIF
	ELSE
		IF MEP_Position[2][3] > EPS  THEN
			compareFlip = 0
		ELSE
			compareFlip = 1
		ENDIF
	ENDIF

	IF ABS(setFlip - compareFlip) > EPS THEN
		MEP_Position[1][1] = MEP_Position[1][1]+MEP_StraightLength*MEP_Position[2][1]
		PARAMETERS MEP_Position[1][1] = MEP_Position[1][1]
		MEP_Position[1][2] = MEP_Position[1][2]+MEP_StraightLength*MEP_Position[2][2]
		PARAMETERS MEP_Position[1][2] = MEP_Position[1][2]
		MEP_Position[1][3] = MEP_Position[1][3]+MEP_StraightLength*MEP_Position[2][3]
		PARAMETERS MEP_Position[1][3] = MEP_Position[1][3]

		MEP_Position[2][1] = -MEP_Position[2][1]
		PARAMETERS MEP_Position[2][1] = MEP_Position[2][1]
		MEP_Position[2][2] = -MEP_Position[2][2]
		PARAMETERS MEP_Position[2][2] = MEP_Position[2][2]
		MEP_Position[2][3] = -MEP_Position[2][3]
		PARAMETERS MEP_Position[2][3] = MEP_Position[2][3]

!!		MEP_Position[3][1] = -MEP_Position[3][1]
!!		PARAMETERS MEP_Position[3][1] = MEP_Position[3][1]
!!		MEP_Position[3][2] = -MEP_Position[3][2]
!!		PARAMETERS MEP_Position[3][2] = MEP_Position[3][2]
!!		MEP_Position[3][3] = -MEP_Position[3][3]
!!		PARAMETERS MEP_Position[3][3] = MEP_Position[3][3]
	ENDIF
ELSE
	IF ABS(MEP_Position[2][3]) < EPS THEN
		IF MEP_Position[2][1] > EPS OR ABS(MEP_Position[2][2]-1) < EPS THEN
			setFlip = 0
			PARAMETERS setFlip = setFlip
		ELSE
			setFlip = 1
			PARAMETERS setFlip = setFlip
		ENDIF
	ELSE
		IF MEP_Position[2][3] > EPS THEN
			setFlip = 0
			PARAMETERS setFlip = setFlip
		ELSE
			setFlip = 1
			PARAMETERS setFlip = setFlip
		ENDIF
	ENDIF
ENDIF


						! ---------------- !
						! --- Z vector --- !
						! ---------------- !

dZx = -MEP_Position[3][2]*MEP_Position[2][3]+MEP_Position[3][3]*MEP_Position[2][2]
dZy = -MEP_Position[3][3]*MEP_Position[2][1]+MEP_Position[3][1]*MEP_Position[2][3]
dZz = -MEP_Position[3][1]*MEP_Position[2][2]+MEP_Position[3][2]*MEP_Position[2][1]


					!!! +++ Transformational Matrix +++ !!!

DIM tMatrix[3][3]

tMatrix[1][1] = MEP_Position[2][1]
tMatrix[1][2] = MEP_Position[2][2]
tMatrix[1][3] = MEP_Position[2][3]

tMatrix[2][1] = MEP_Position[3][1]
tMatrix[2][2] = MEP_Position[3][2]
tMatrix[2][3] = MEP_Position[3][3]

tMatrix[3][1] = dZx
tMatrix[3][2] = dZy
tMatrix[3][3] = dZz


						!!! +++ Input Coordinates +++ !!!

PUT ConPosX_1, ConPosY_1, ConPosZ_1
PUT gs_Connections[1][4], gs_Connections[1][5], gs_Connections[1][6]
PUT gs_Connections[1][7], gs_Connections[1][8], gs_Connections[1][9]

PUT ConPosX_2, ConPosY_2, ConPosZ_2
PUT gs_Connections[2][4], gs_Connections[2][5], gs_Connections[2][6]
PUT gs_Connections[2][7], gs_Connections[2][8], gs_Connections[2][9]

PUT ConPosX_3+ConLength_3*COS(MEP_BranchAngle), ConPosY_3+ConLength_3*SIN(MEP_BranchAngle), ConPosZ_3
PUT gs_Connections[3][4], gs_Connections[3][5], gs_Connections[3][6]
PUT gs_Connections[3][7], gs_Connections[3][8], gs_Connections[3][9]

PUT ConPosX_3-(ConWidth_1/2+ConWallThickness_1)/TAN(MEP_BranchAngle), 0, 0

Coordinates = NSP/3

DIM inCoords[20][3]

FOR cnum = 1 TO Coordinates
	inCoords[cnum][1] = GET(1)
	inCoords[cnum][2] = GET(1)
	inCoords[cnum][3] = GET(1)
NEXT cnum


! --- the Matrix Operation, what make the Output-Coordinates

DIM outCoords[20][3]

FOR cnum = 1 TO Coordinates
	outCoords[cnum][1] = inCoords[cnum][1]*tMatrix[1][1]+inCoords[cnum][2]*tMatrix[2][1]+inCoords[cnum][3]*tMatrix[3][1]
	outCoords[cnum][2] = inCoords[cnum][1]*tMatrix[1][2]+inCoords[cnum][2]*tMatrix[2][2]+inCoords[cnum][3]*tMatrix[3][2]
	outCoords[cnum][3] = inCoords[cnum][1]*tMatrix[1][3]+inCoords[cnum][2]*tMatrix[2][3]+inCoords[cnum][3]*tMatrix[3][3]
NEXT cnum


						! --------------------- !
						! --- Set Side Flag --- !
						! --------------------- !

MEP_EmptySideID = 1
IF SGN(dZz) = -1 THEN MEP_EmptySideID = 3
PARAMETERS MEP_EmptySideID = MEP_EmptySideID



						! ---------------------------- !
						! --- Top and Bottom Level --- !
						! ---------------------------- !

z = MEP_Position[1][3] + MEP_Position[2][3]*MEP_StraightLength/2
PARAMETERS ac_toplevel 		= z
PARAMETERS ac_bottomlevel 	= z
