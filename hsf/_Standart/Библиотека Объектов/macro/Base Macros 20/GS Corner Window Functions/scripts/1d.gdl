! const values for parameter: iDWDet2D
DETLEVEL_DW2D_MVO     = 1
DETLEVEL_DW2D_SCSENS  = 2
DETLEVEL_DW2D_50      = 3
DETLEVEL_DW2D_100     = 4
DETLEVEL_DW2D_MIDDET  = 5
DETLEVEL_DW2D_SMPL2L  = 6
DETLEVEL_DW2D_200     = 7
DETLEVEL_DW2D_OFF     = 8
DETLEVEL_DW2D_MIDUSA  = 9
DETLEVEL_DW2D_CHISMPL = 10
DETLEVEL_DW2D_CHIDET  = 11
DETLEVEL_DW2D_20      = 12


! const values for parameter: iDWDet3D
DETLEVEL_DW3D_SCALESENS    = 1
DETLEVEL_DW3D_DETAILED     = 2
DETLEVEL_DW3D_SIMPLE       = 3
DETLEVEL_DW3D_OFF          = 4
DETLEVEL_DW3D_CHI_SIMPLE   = 5
DETLEVEL_DW3D_CHI_DETAILED = 6


! const values for parameter: iTypeDemolitionFill
RENOVATION_FILL_EXIST		= 1
RENOVATION_FILL_DEMOLISHED	= 2
RENOVATION_FILL_NEW			= 3
RENOVATION_FILL_NEW_FULL	= 4


! const values for parameter: iBoardInPolyWall
BOARD_PARALLEL_WINDOW      = 1
BOARD_PARALLEL_WALLPOLYGON = 2


! const values for parameter: iCornerConnTypeRight
CONNECTION_TYPE_FRAME  = 1
CONNECTION_TYPE_COLUMN = 2
CONNECTION_TYPE_GLASS  = 3


! const values for parameter: iCornerConnTypeLeft
CONNECTION_TYPE_FRAME  = 1
CONNECTION_TYPE_COLUMN = 2
CONNECTION_TYPE_GLASS  = 3


! const values for parameter: iCustomCCEditWallSide
EDITED_WALL_FACE_OUTSIDE = 1
EDITED_WALL_FACE_INSIDE  = 2


! const values for parameter: iCustomCCEditJambSide
EDITED_JAMB_SIDE_BOTH  = 1
EDITED_JAMB_SIDE_LEFT  = 2
EDITED_JAMB_SIDE_RIGHT = 3


! const values for parameter: iCustomCCThicknessType
THICKNESS_TYPE_ORIGINAL = 1
THICKNESS_TYPE_CUSTOM   = 2


! const values for parameter: iCustomCCEditSkin
EDITED_SKIN_1 = 1
EDITED_SKIN_2 = 2
EDITED_SKIN_3 = 3
EDITED_SKIN_4 = 4


! const values for parameter: iCustomCCOrientation
ORIENTATION_ORIGINAL  = 1
ORIENTATION_TURNED_IN = 2


! const values for parameter: iSillType
SILL_TIMBER       = 1
SILL_BRICK        = 2
SILL_STONE        = 3
SILL_CERAMIC      = 4
SILL_ETHERNIT     = 5
SILL_CONCRETE_TUB = 6
SILL_ALUMINIUM    = 7
SILL_SOLID_11     = 8
SILL_SOLID_12     = 9
SILL_SOLID_22     = 10
SILL_METAL_1      = 11
SILL_PARALLEL     = 12
SILL_METAL_2      = 13
SILL_PARALLEL_2   = 14
SILL_SIMPLEBLOCK  = 15
SILL_BLOCK        = 16
SILL_DUTCH        = 17

! Contact person: <NJ>

EPS = 0.0001

! iWindowClass:
WINCLASS_NORMAL				= 1
WINCLASS_HISTORIC			= 2
WINCLASS_SINGLE_HUNG		= 3
WINCLASS_DOUBLE_HUNG		= 4
WINCLASS_HORIZONTAL_SLIDING	= 5
WINCLASS_SPECIAL			= 6
WINCLASS_DOORSASH			= 7
WINCLASS_MULTISASH			= 8
WINCLASS_SHELL				= 10

! iRevealType:
REVEAL_EDGE				= 0
REVEAL_NO				= 1
REVEAL_POSITIVE			= 2
REVEAL_NEGATIVE			= 3
REVEAL_SLANTED			= 4
REVEAL_SPLAYED			= 5
REVEAL_HISTORIC			= 6
REVEAL_DOUBLE			= 7
REVEAL_DOUBLE_SPLAYED	= 8
REVEAL_OUTSIDE_SPLAYED	= 9

! iRevealOnSymbol
SHOWREV_MVO		= 1
SHOWREV_ALWAYS	= 2
SHOWREV_UPTO50	= 3
SHOWREV_UPTO100	= 4
SHOWREV_UPTO200	= 5
SHOWREV_NEVER	= 6

! iClosureType:
CLOSURE_NO					= 0
CLOSURE_TRADITIONAL			= 1
CLOSURE_PREFABRICATED		= 2
CLOSURE_CUSTOM				= 3
CLOSURE_SOLID_WALL			= 4
CLOSURE_STUD_WALL			= 5
CLOSURE_STUD_WALL_SIDING	= 6
CLOSURE_BRICK_VENEER		= 7
CLOSURE_VARIABLE			= 8
CLOSURE_PLASTER_REVEAL	 			= 9
CLOSURE_INSULATED_REVEAL			= 10
CLOSURE_INSULATED_FOR_RENOVATION	= 11
CLOSURE_FINISH						= 12
CLOSURE_AIR_SPACE					= 13
CLOSURE_DUTCH_VARIABLE				= 14

! Partial Stucture Display defines:
STRUCTURE_ENTIRE_STRUCTURE	= 0
STRUCTURE_CORE_ONLY			= 1
STRUCTURE_WITHOUT_FINISHES	= 2

! lod2d
DET2D_FS_OFF				= 0
DET2D_FS_SCALESENS			= -1
DET2D_FS_SIMPLE_ONE			= 11
DET2D_FS_SIMPLE_TWO			= 12
DET2D_FS_MIDDLE				= 21
DET2D_FS_MIDDLE_USA			= 22
DET2D_FS_DETAILED			= 30
DET2D_FS_DETAILED_FIX_GRID	= 31
DET2D_FS_DETAILED_USA		= 32
DET2D_FS_SIMPLE_CHI			= 51
DET2D_FS_DETAILED_CHI		= 52

! iLoD2D
SYMBW_OFF					= 0
SYMBW_SCALESENS				= 1
SYMBW_S_1LINE				= 11
SYMBW_S_2LINE				= 12
SYMBW_S_CENTERLINE			= 13
SYMBW_S_2LINE_ACC			= 14
SYMBW_S_5					= 15
SYMBW_S_6					= 16
SYMBW_S_7					= 17
SYMBW_S_8					= 18
SYMBW_S_9					= 19
SYMBW_M_2LINE_NOGLASS		= 21
SYMBW_M_2LINE_GLASS			= 22
SYMBW_M_FRAMESASH			= 23
SYMBW_M_2LINE_FRAME			= 24
SYMBW_M_5					= 25
SYMBW_M_6					= 26
SYMBW_M_7					= 27
SYMBW_M_8					= 28
SYMBW_M_9					= 29
SYMBW_D_SGLASS				= 31
SYMBW_D_2GLASS				= 32
SYMBW_D_2LINE_HS			= 33
SYMBW_D_NOGLASS				= 34
SYMBW_D_REBATEONGLASS		= 35
SYMBW_D_2GLASS_OVERLAP		= 36
SYMBW_D_7					= 37
SYMBW_D_8					= 38
SYMBW_D_9					= 39

! iWindowShape:
SHAPE_RECTANGULAR			= 0
SHAPE_ARCHED				= 1
SHAPE_ROUND					= 2
SHAPE_EYEBROWS				= 3
SHAPE_HALFCIRCLE			= 4 	! straight side is horizontal
SHAPE_MULTISIDE				= 5
SHAPE_OCTAGONAL				= 6
SHAPE_HALFARCH				= 7
SHAPE_PENTAGON				= 8
SHAPE_QUARTERROUND			= 9
SHAPE_HALFROUND				= 10 	! straight side is vertical
SHAPE_TRAPEZOID				= 11
SHAPE_TRIANGLE				= 12
SHAPE_GOTHICARCH			= 13
SHAPE_ELLIPSEARCH			= 14
SHAPE_ROMBUS				= 15
SHAPE_HORSESHOE				= 16
SHAPE_OGEECENTERED			= 17
SHAPE_SARACENIC				= 18
SHAPE_T						= 19
SHAPE_HALF_T_LEFT			= 20
SHAPE_ARCHED_T				= 21
SHAPE_ARCHED_HALF_T_LEFT	= 22
SHAPE_PARALLELOGRAM			= 23
SHAPE_ELLIPSE				= 24
SHAPE_CORNER_TRIANGLE		= 25
SHAPE_QUARTERROUND_NOFRAME	= 26
SHAPE_HALF_T_RIGHT			= 27
SHAPE_ARCHED_HALF_T_RIGHT	= 28

! iWindowType:
WIN_HistoricWindowSingle2		= 10
WIN_HistoricWindowSingle		= 11
WIN_HistoricWindowDouble		= 12
WIN_HistoricWindowTriple		= 13
WIN_HistoricWindowSegmented		= 14
WIN_HistoricWindowTripleArched	= 15
WIN_W2HorizontalSlide			= 16
WIN_W4HorizontalSlide			= 17
WIN_Curved						= 18
WIN_Bow							= 19
WIN_SplayBay					= 20
WIN_SquareBay					= 21
WIN_Ribbon						= 22
WIN_WSingleHung1				= 23
WIN_WSingleHung2				= 24
WIN_WSingleHung3				= 25
WIN_WDoubleHung1				= 26
WIN_WDoubleHung2				= 27
WIN_WDoubleHung3				= 28
WIN_WRound						= 29
WIN_WOval						= 30
WIN_WMultiside					= 31
WIN_WHalfRound					= 32
WIN_WQuarterRound 				= 33
WIN_WPentagon					= 34
WIN_WTriangle					= 35
WIN_WEyebrows					= 36
WIN_WArched						= 37
WIN_WTrapezoid					= 38
WIN_WTrapezoidDoubleSash		= 39
WIN_VentWindow					= 40
WIN_2SashSliding				= 41
WIN_MultisashHorizontal			= 42
WIN_MultisashVertical			= 43
WIN_GlassBlock					= 44
WIN_TerraceDoorSWE				= 45
WIN_W3HorizontalSlide			= 46
WIN_W6HorizontalSlide			= 47
WIN_VentilationBrick			= 48
WIN_Rhomb						= 49
WIN_Skewed						= 50

! lodSE - S/E Detail level
LODSE_20	= 1
LODSE_50	= 2
LODSE_100	= 3
LODSE_200	= 4
LODSE_500	= 5

! Turn Skin on Side
CAVITY_SIDE_BOTH	= 1
CAVITY_SIDE_LEFT	= 2
CAVITY_SIDE_RIGHT	= 3
CAVITY_SIDE_NONE	= 4

! Wall Inset Sizes
PARAPET_SIZE_AUTO	= 1
PARAPET_SIZE_SYMM	= 2
PARAPET_SIZE_ASYMM	= 3

! Wall Inset Bottom at
PARAPET_BOTTOM_CURRENTSTORY	= 1
PARAPET_BOTTOM_WALLBASE		= 2

! Wall Contour Line - iWallContourLine
WALL_CONTOUR_OFF		= 1
WALL_CONTOUR_INSIDE		= 2
WALL_CONTOUR_OUTSIDE	= 3
WALL_CONTOUR_BOTHSIDES	= 4

! iVentilationProfileType
VENTPROFILE_OVER_FRAME		= 2
VENTPROFILE_OVER_GLAZING	= 3

! ==============================================================================
! Localization
! ==============================================================================

dim stDetail2D[12]
	stDetail2D[1]	= `по ПМВ`
	stDetail2D[2]	= `Зависит от Масштаба`
	stDetail2D[3]	= `1:50`
	stDetail2D[4]	= `1:100`
	stDetail2D[5]	= `Средняя Детализация - без Аксесс.`
	stDetail2D[6]	= `Простой - Две Линии`
	stDetail2D[7]	= `1:200`
	stDetail2D[8]	= `Откл.`
	stDetail2D[9]	= `Средний США`
	stDetail2D[10]	= `Китайский Простой`
	stDetail2D[11]	= `Китайский Детальный`
	stDetail2D[12]	= `1:20`

dim stRevealTypes[10]	! gs_reveal_type
	stRevealTypes[ 1] = `Без Четверти - Торец`
	stRevealTypes[ 2] = `Без Четверти`
	stRevealTypes[ 3] = `Четверть`
	stRevealTypes[ 4] = `Отрицательная Четверть`
	stRevealTypes[ 5] = `Четверть с Рассветами`
	stRevealTypes[ 6] = `Четверть с Откосом`
	stRevealTypes[ 7] = `Историческая Четверть`
	stRevealTypes[ 8] = `Специальная Четверть`
	stRevealTypes[ 9] = `Четверть с Двумя Откосами`
	stRevealTypes[10] = `Четверть с Откосом Снаружи`

dim stRevealTypesBottom[4]		! gs_reveal_type_bottom
	stRevealTypesBottom[1] = `Одинаковый`
	stRevealTypesBottom[2] = `Без Четверти`
	stRevealTypesBottom[3] = `Четверть`
	stRevealTypesBottom[4] = `Отрицательная Четверть`

dim stRevealAngleEditBy[2]	! gs_reveal_angle_edit_by
	stRevealAngleEditBy[1] = `Угол и Глубина`
	stRevealAngleEditBy[2] = `Ширина и Глубина`

dim stClosureTypes[15]	! gs_closure_type
	stClosureTypes[ 1] = `Без Замыкания`
	stClosureTypes[ 2] = `Традиционное Замыкание Слоев`
	stClosureTypes[ 3] = `Готовое Замыкание Слоев`
	stClosureTypes[ 4] = `Специальное Замыкание`
	stClosureTypes[ 5] = `Сплошная Стена`
	stClosureTypes[ 6] = `Деревянная Каркасная Стена`
	stClosureTypes[ 7] = `Деревянная Каркасная Стена с Наружной Обшивкой`
	stClosureTypes[ 8] = `Кирпичная Облицовка`
	stClosureTypes[ 9] = `Настраиваемое Замыкание`
	stClosureTypes[10] = `Штукатурная Четверть`
	stClosureTypes[11] = `Утепленная Четверть`
	stClosureTypes[12] = `Утепление при Реконструкции`
	stClosureTypes[13] = `Замыкание Отделкой`
	stClosureTypes[14] = `Замыкание с Воздушной Прослойкой`
	stClosureTypes[15] = `Датское Замыкание`

dim stRevealOnSymbValues[6]
	stRevealOnSymbValues[1] = `по ПМВ`
	stRevealOnSymbValues[2] = `Всегда`
	stRevealOnSymbValues[3] = `До 1:50`
	stRevealOnSymbValues[4] = `До 1:100`
	stRevealOnSymbValues[5] = `До 1:200`
	stRevealOnSymbValues[6] = `Никогда`

dim stWallContourLine[4]	! gs_wcont_line_sl
	stWallContourLine[1] = `Откл.`
	stWallContourLine[2] = `Внутри`
	stWallContourLine[3] = `Снаружи`
	stWallContourLine[4] = `Обе Стороны`

dim stCavityClosureSide[4]		! gs_cavity_side
	stCavityClosureSide[1] = `Обе`
	stCavityClosureSide[2] = `Слева`
	stCavityClosureSide[3] = `Справа`
	stCavityClosureSide[4] = `Нет`

dim stCavityClosureTurnDir[2]	! gs_nTurnDir
	stCavityClosureTurnDir[1] = `Снаружи`
	stCavityClosureTurnDir[2] = `Внутри`

dim stDutchClosureToSide[2]
	stDutchClosureToSide[1] = `Снаружи`
	stDutchClosureToSide[2] = `Внутри`

dim stCavityClosureEditedJambSide[3]
	stCavityClosureEditedJambSide[1] = `Редактирование Обоих Откосов`
	stCavityClosureEditedJambSide[2] = `Редактирование Левого Откоса`
	stCavityClosureEditedJambSide[3] = `Редактирование Правого Откоса`

dim stCavityClosureEditedWallSide[2]
	stCavityClosureEditedWallSide[1] = `Снаружи`
	stCavityClosureEditedWallSide[2] = `Внутри`

dim stCavityClosureEditedSkinNumber[4]
	stCavityClosureEditedSkinNumber[1] = `1. Слой`
	stCavityClosureEditedSkinNumber[2] = `2. Слой`
	stCavityClosureEditedSkinNumber[3] = `3. Слой`
	stCavityClosureEditedSkinNumber[4] = `4. Слой`

dim stCavityClosureTurnInThickness[2]
	stCavityClosureTurnInThickness[1] = `Исходная`
	stCavityClosureTurnInThickness[2] = `Специальный`

dim stCavityClosureHatchOrientation[2]
	stCavityClosureHatchOrientation[1] = `Исходная`
	stCavityClosureHatchOrientation[2] = `Поворот Внутрь`

dim stMasonryArchTypes[7]	! gs_masonry_arch_int
	stMasonryArchTypes[1] = `Откл.`
	stMasonryArchTypes[2] = `Прямая Перемычка`
	stMasonryArchTypes[3] = `Клинчатая Перемычка`
	stMasonryArchTypes[4] = `Клинчатая Перемычка с Замковым Камнем`
	stMasonryArchTypes[5] = `Лучковая Перемычка`
	stMasonryArchTypes[6] = `Лучковая Перемычка с Замковым Камнем`
	stMasonryArchTypes[7] = `Декоративная Арка`

dim gs_faschen_type[2]	! faschen
	gs_faschen_type[1] = `Штукатурка`
	gs_faschen_type[2] = `Кирпичная Кладка`

dim stMasonryArchStructure[2]	! gs_masonry_arch_structure
	stMasonryArchStructure[1] = `Штукатурная`
	stMasonryArchStructure[2] = `Кирпичная`

dim stSillTypes[17]	! gs_sill_type
	stSillTypes[ 1] = `Деревянный Отлив`			! Timber Sill
	stSillTypes[ 2] = `Кирпичный Отлив`
	stSillTypes[ 3] = `Каменный Отлив`
	stSillTypes[ 4] = `Керамический Отлив`
	stSillTypes[ 5] = `Этернитовый Отлив`
	stSillTypes[ 6] = `Бетонный Отлив`
	stSillTypes[ 7] = `Алюминиевый Отлив`
	stSillTypes[ 8] = `Монолитный Отлив 1.1`	! Massiv-Fensterbank 1.1
	stSillTypes[ 9] = `Монолитный Отлив 1.2`	! Massiv-Fensterbank 1.2
	stSillTypes[10] = `Монолитный Отлив`		! Massiv-Fensterbank 2.2
	stSillTypes[11] = `Металлический Лист`		! Metallfensterbank 1.1
	stSillTypes[12] = `Сплошной Параллельный`	! Massiv parallel
	stSillTypes[13] = `Металлический Лист 2`
	stSillTypes[14] = `Сплошной Параллельный 2`	! Massiv parallel 2
	stSillTypes[15] = `Простой Блок`
	stSillTypes[16] = `Блок Отлив`
	stSillTypes[17] = `Голландский Профилированный Отлив`

dim stBsilldetlevel[2]	! gs_brick_sill_detlev
	stBsilldetlevel[1] = `Простой`
	stBsilldetlevel[2] = `Детальный`

dim stShowSashOnSymbol[10]
	stShowSashOnSymbol[1] = `1. Створка`
	stShowSashOnSymbol[2] = `2. Створка`
	stShowSashOnSymbol[3] = `3. Створка`
	stShowSashOnSymbol[4] = `4. Створка`
	stShowSashOnSymbol[5] = `5. Створка`
	stShowSashOnSymbol[6] = `6. Створка`
	stShowSashOnSymbol[7] = `7. Створка`
	stShowSashOnSymbol[8] = `8. Створка`
	stShowSashOnSymbol[9] = `9. Створка`
	stShowSashOnSymbol[10] = `10. Створка`

dim stCornerConnType[3] ! gs_connTypeRight, gs_connTypeLeft
	stCornerConnType[1] = `Коробка`
	stCornerConnType[2] = `Угловой Импост`
	stCornerConnType[3] = `Стекло`

dim stParapetBottom[2]	! gs_parapet_bottom_st
	stParapetBottom[1] = `Текущий Этаж`
	stParapetBottom[2] = `Основание Стены`

dim stParapetSize[3] ! gs_parapet_sizes_st
	stParapetSize[1] = `Автоматически`
	stParapetSize[2] = `Симметрично`
	stParapetSize[3] = `Асимметрично`

dim stBoardInPolyWall[2] ! gs_boardInPolyWall
	stBoardInPolyWall[1] = `Параллельно Окну`
	stBoardInPolyWall[2] = `Параллельно Многоугольнику Стены`

dim stCasingType[3] ! gs_trimtype_in, gs_trimtype_out
	stCasingType[1] = `Простой`
	stCasingType[2] = `Простой с Выступом`
	stCasingType[3] = `Сложный с Выступом`

dim stCasingHeadType[4] ! iCasingHeadTypeOut
	stCasingHeadType[1] = `Прямоугольник`
	stCasingHeadType[2] = `Декоративный 1`
	stCasingHeadType[3] = `Декоративный 2`
	stCasingHeadType[4] = `Декоративный 3`

dim stArchitraveCapitalType[4] ! iArchitraveCapitalType
	stArchitraveCapitalType[1] = `Прямоугольный на Боковом Наличнике`
	stArchitraveCapitalType[2] = `Прямоугольный рядом с Боковым Наличником`
	stArchitraveCapitalType[3] = `Декоративный на Боковом Наличнике`
	stArchitraveCapitalType[4] = `Декоративный рядом с Боковым Наличником`

dim stSunShadeTypes[ 9]
	stSunShadeTypes[ 1] = `Нет`
	stSunShadeTypes[ 2] = `Декоративные`
	stSunShadeTypes[ 3] = `Обычные`
	stSunShadeTypes[ 4] = `Складывание к Четверти`
	stSunShadeTypes[ 5] = `Складывание к Поверхности Стены`
	stSunShadeTypes[ 6] = `Раздвижная`
	stSunShadeTypes[ 7] = `Рольставни`
	stSunShadeTypes[ 8] = `Наружные Жалюзи`
	stSunShadeTypes[ 9] = `Жалюзи в Перемычке`

dim stShutterPanelPos[11]
	stShutterPanelPos[ 1] = `Симметрично`
	stShutterPanelPos[ 2] = `Слева`
	stShutterPanelPos[ 3] = `Справа`
	stShutterPanelPos[ 4] = `Обычно Слева`
	stShutterPanelPos[ 5] = `Обычно Справа`
	stShutterPanelPos[ 6] = `Слева Вверху`
	stShutterPanelPos[ 7] = `Слева Внизу`
	stShutterPanelPos[ 8] = `Справа Вверху`
	stShutterPanelPos[ 9] = `Справа Внизу`
	stShutterPanelPos[10] = `Двойное Вверху`
	stShutterPanelPos[11] = `Двойное Внизу`

dim stFoldingShutterStacking[2]
	stFoldingShutterStacking[1] = `Внутри`
	stFoldingShutterStacking[2] = `Снаружи`

dim stSlidingShutterCover[3]
	stSlidingShutterCover[1] = `Нет`
	stSlidingShutterCover[2] = `Z-профиль`
	stSlidingShutterCover[3] = `Корпус`

dim stShutterPanelTypes[11]
	stShutterPanelTypes[ 1] = `Стиль 1`
	stShutterPanelTypes[ 2] = `Стиль 2`
	stShutterPanelTypes[ 3] = `Стиль 3`
	stShutterPanelTypes[ 4] = `Стиль 4`
	stShutterPanelTypes[ 5] = `Стиль 5`
	stShutterPanelTypes[ 6] = `Стиль 6`
	stShutterPanelTypes[ 7] = `Стиль 7`
	stShutterPanelTypes[ 8] = `Стиль 8`
	stShutterPanelTypes[ 9] = `Стиль 9`
	stShutterPanelTypes[10] = `Стиль 10`
	stShutterPanelTypes[11] = `Специальный`

dim stShutRollPlacement[3]
	stShutRollPlacement[1] = `На Фасаде`
	stShutRollPlacement[2] = `Перед Окном`
	stShutRollPlacement[3] = `За Фасадом`

dim stShutRollBoxType[2]
	stShutRollBoxType[1] = `Прямоугольник`
	stShutRollBoxType[2] = `Закругленный`

dim stShutRollBoxDefaultSize[2]
	stShutRollBoxDefaultSize[1] = `По Ширине Четверти`
	stShutRollBoxDefaultSize[2] = `По Ширине Проема`

dim stShutLamPlacement[3]
	stShutLamPlacement[1] = `На Фасаде`
	stShutLamPlacement[2] = `Перед Окном`
	stShutLamPlacement[3] = `За Фасадом`

dim stShutRollRailPos[2]
	stShutRollRailPos[1] = `На Наличнике`
	stShutRollRailPos[2] = `На Стене`

dim stShutLamRailPos[2]
	stShutLamRailPos[1] = `На Наличнике`
	stShutLamRailPos[2] = `На Стене`


! =============================================================================
! Array index definitions
! =============================================================================

iRevealType = gs_reveal_type_int - 1

if gs_bShowNewOnCC & iTypeDemolitionFill = RENOVATION_FILL_NEW then iRevealType = REVEAL_NO

iSillRevealType  = gs_reveal_doubleOuterTypeInt - 1
iBoardRevealType = gs_reveal_doubleInnerTypeInt - 1


! ==============================================================================
! Function Control
! ==============================================================================

if bEnableParapetInset		< 0	then bEnableParapetInset = 1
if bEnableMasonryArch		< 0	then
	bEnableMasonryArch = (iWindowShape = SHAPE_RECTANGULAR | iWindowShape = SHAPE_ARCHED | iWindowShape = SHAPE_ROUND | iWindowShape = SHAPE_ELLIPSE)
endif
if bEnableSill				< 0 then bEnableSill	= 1
if bEnableBoard				< 0 then bEnableBoard	= 1

if bEnableFaschen			< 0 then bEnableFaschen = 0
if bEnableThreshold			< 0 then bEnableThreshold = 0

if bEnableCasing			< 0 then bEnableCasing	= 1
if bEnableShutter			< 0 then bEnableShutter	= 1

if bEnableCustomCornerLeft	< 0 then bEnableCustomCornerLeft	= 1
if bEnableCustomCornerRight	< 0 then bEnableCustomCornerRight	= 1

bEnableWallContourHiddenLine	= 1

if gs_RevealTypeEnable = 0 then
	gs_RevealTypeEnable	 = 1 + 2
	if iWindowShape = SHAPE_RECTANGULAR then
		gs_RevealTypeEnable	= 1 + 2 + 4 + 8 + 16 + 32 + 64 + 128
	endif
	if iWindowShape = SHAPE_ARCHED then
		gs_RevealTypeEnable	= 1 + 2 + 4 + 8 + 128
	endif
	if iWindowShape = SHAPE_TRAPEZOID then
		gs_RevealTypeEnable	= 1 + 2 + 4 + 8 + 128
	endif
endif
if gs_ClosureTypeEnable = 0 then gs_ClosureTypeEnable = 1 + 2 + 4 + 8 + 256 + 512 + 1024 + 2048
if gs_SillTypeEnable = 0 then
	gs_SillTypeEnable	= 1 + 2 + 4 + 512 + 1024  !+ 8 + 16 + 32 + 64 + 128 + 256
		! Ceramic, Eternite, Concrete, Aluminum and German massiv sill types are hidden
endif
if gs_CasingOutTypeEnable = 0 then
	gs_CasingOutTypeEnable = 1+2+4
endif
if gs_CasingInTypeEnable = 0 then
	gs_CasingInTypeEnable = 1+2
endif

defaultSillDepth	= 0.120

bCasingTolerance	= 0
bSillPlaneCut		= 1
bBoardPlaneCut		= 1

iLineShapeCategory		= 1		! LINE_SHAPE_CATEGORY_SWING
iLineShapeSwingEnable	= 2+4	! Curved, Straight

! in case of SUNSHADE_ROLLING and SHUTROLL_BEHIND placement
if bEnableShutter & bSunshade & (gs_sunShade_iType = 6) & (gs_shutRoll_iPlacement = 3) & gs_shutRoll_bIncludeBoxHeight then
	_excludeRevealHeight	= 0
	_excludeCasingHeight	= 0
	
	if iRevealType = REVEAL_POSITIVE | iRevealType = REVEAL_SLANTED | iRevealType = REVEAL_HISTORIC | (iRevealType = REVEAL_DOUBLE & (iSillRevealType = 2 | gs_reveal_doubleOuterTypeInt = 3)) then
		if gs_reveal_uniform then
			_excludeRevealHeight = gs_reveal_right
		else
			_excludeRevealHeight = gs_reveal_top
		endif
	endif
	if (bEnableCasing & gs_trim_outside) then
		_excludeCasingHeight	= gs_trim_width_out
	endif

	_includeBoxHeight = (gs_shutRoll_boxHeight + gs_shutRoll_distFromHead - _excludeRevealHeight - _excludeCasingHeight)
else
	_includeBoxHeight = 0
endif


! =============================================================================
! Show Reveal On Symbol
! =============================================================================

bCanHaveReveal = (bittest(gs_RevealTypeEnable, REVEAL_POSITIVE)			| \
				  bittest(gs_RevealTypeEnable, REVEAL_NEGATIVE)			| \
				  bittest(gs_RevealTypeEnable, REVEAL_SLANTED)			| \
				  bittest(gs_RevealTypeEnable, REVEAL_SPLAYED)			| \
				  bittest(gs_RevealTypeEnable, REVEAL_HISTORIC)			| \
				  bittest(gs_RevealTypeEnable, REVEAL_DOUBLE)			| \
				  bittest(gs_RevealTypeEnable, REVEAL_DOUBLE_SPLAYED)	| \
				  bittest(gs_RevealTypeEnable, REVEAL_OUTSIDE_SPLAYED)	)


! ==============================================================================
! Corner Window Calculations
! ==============================================================================

curvedWall		= abs(WIDO_ORIG_DIST) > EPS
wallIsLeft		= (SYMB_ROTANGLE > EPS) exor WIDO_REVEAL_SIDE
bCornerWindow	= (ac_cw_function & ac_corner_window)

temp_leftcornerangle = leftcornerangle
temp_rightcornerangle = rightcornerangle

resize_Lca = int ((abs(temp_leftcornerangle))/360)
resize_Rca = int ((abs(temp_rightcornerangle))/360)

temp_leftcornerangle = temp_leftcornerangle + resize_Lca * 360 - (leftcornerangle > 0) * 2 * resize_Lca * 360
temp_rightcornerangle = temp_rightcornerangle + resize_Rca * 360 - (rightcornerangle > 0) * 2 * resize_Rca * 360

leftcornerangle = temp_leftcornerangle + 360 * (temp_leftcornerangle < 0)
rightcornerangle = temp_rightcornerangle + 360 * (temp_rightcornerangle < 0)

if not(bCornerWindow) & (abs(WALL_INCL) > EPS | abs(WIDO_ORIG_DIST) > EPS | AC_WallType = 2) then
	bLeftCornerFunction  = 0
	bRightCornerFunction = 0
endif

if not (bLeftDiffConnWall)  then leftConnWallThk  = WALL_THICKNESS
if not (bRightDiffConnWall) then rightConnWallThk = WALL_THICKNESS

if not(bCornerWindow) then
	if abs(leftCornerAngle  - 180) < EPS | abs(leftCornerAngle  - 360) < EPS then leftCornerAngle  = 0
	if abs(rightCornerAngle - 180) < EPS | abs(rightCornerAngle - 360) < EPS then rightCornerAngle = 0
endif

if bLeftCornerFunction  & abs(leftCornerAngle)  < EPS then bLeftCornerFunction  = 0
if bRightCornerFunction & abs(rightCornerAngle) < EPS then bRightCornerFunction = 0

if not(bLeftCornerFunction) then
	leftCornerAngle	= 0
	leftConnWallThk	= 0
endif
if bCornerWindow then
	bRightCornerFunction	= 1
	bRightCornerFunction	= (ac_cw_function & ac_corner_window)
	rightCornerAngle	= ac_corner_angle
	rightConnWallThk	= ac_con_wall_thk
else
	if not(bRightCornerFunction) then
		rightCornerAngle	= 0
		rightConnWallThk	= 0
	endif
endif


! =============================================================================
! Request globals for 2D (MVO Detail Level, MVO Reveal, Hotspots for IS)
! =============================================================================

iMVODetlevel2D			= 0
bMVOCasing2D			= 0
bShowAddHotspots		= 1
bMVODetlevelReveal		= 0
bShowAddHotspotsForIS	= 0

if GLOB_SCRIPT_TYPE = 2 then
	bGetMVOValueDlev2D		= (iDWDet2D = DETLEVEL_DW2D_MVO)
	bGetMVOValueCasing2D	= (bGetMVOValueDlev2D and bNotShowCasingIn2DNOR)
	bGetMVOValueDlevReveal	= (iRevealOnSymbol = SHOWREV_MVO)
	bGetHotspotsForIS		= (GLOB_CONTEXT = 6)

	if bGetMVOValueDlev2D | bGetMVOValueDlevReveal | bGetHotspotsForIS then
		call "GetDWSymbSettings" parameters	bWindow					= 1,
											bGetMVOValueDlev2D		= bGetMVOValueDlev2D,
											bGetMVOValueCasing2D	= bGetMVOValueCasing2D,
											bGetMVOValueDlevReveal	= bGetMVOValueDlevReveal,
											bGetHotspotsForIS		= bGetHotspotsForIS,
						returned_parameters iMVODetlevel2D,
											bMVOCasing2D,
											bMVODetlevelReveal,
											bShowAddHotspotsForIS
	endif
endif


! =============================================================================
! Request globals for 3D (MVO SE Detail Level, Hotspots for IS)
! =============================================================================

if GLOB_SCRIPT_TYPE = 3 then
	iMVODetlevelSE			= 0
	bGetMVOValueDlevSE		= 0					! not used in INT
	bGetHotspotsForIS		= (GLOB_CONTEXT = 6)

	if bGetMVOValueDlevSE | bGetHotspotsForIS then
		call "GetDWSymbSettings" parameters	bWindow					= 1,
											bGetMVOValueDlevSE		= bGetMVOValueDlevSE,
											bGetHotspotsForIS		= bGetHotspotsForIS,
						returned_parameters iMVODetlevelSE,
											bShowAddHotspotsForIS
	endif
endif


! =============================================================================
! Corner Column Calculation
! =============================================================================

gs_cc_thk = max(gs_cc_thk, WIDO_FRAME_THICKNESS + gs_cc_pr)

if bLeftCornerFunction & gs_corner_column then
	if (leftCornerAngle > 180) exor (rightCornerAngle > 180) then
		cornerPostXbyWidth	= (gs_cc_pr - gs_cc_thk) * abs(tan(90 - leftCornerAngle / 2)) + gs_cc_width
		cornerPostXbyThk	= (gs_cc_pr) * abs(tan(90 - leftCornerAngle / 2))
		cornerPostXLeft		= max(cornerPostXbyWidth, cornerPostXbyThk)
	else
		cornerPostXbyWidth	= (-WIDO_FRAME_THICKNESS - gs_cc_pr) * abs(tan(90 - leftCornerAngle / 2)) + gs_cc_width
		cornerPostXbyThk	= (gs_cc_thk - WIDO_FRAME_THICKNESS - gs_cc_pr) * abs(tan(90 - leftCornerAngle / 2))
		cornerPostXLeft		= max(cornerPostXbyWidth, cornerPostXbyThk)
	endif
else
	cornerPostXLeft = 0
endif

if bRightCornerFunction & gs_corner_column then
	cornerPostXbyWidth	= (-WIDO_FRAME_THICKNESS - gs_cc_pr) * abs(tan(90 - rightCornerAngle / 2)) + gs_cc_width
	cornerPostXbyThk	= (gs_cc_thk - WIDO_FRAME_THICKNESS - gs_cc_pr) * abs(tan(90 - rightCornerAngle / 2))
	cornerPostXRight	= max(cornerPostXbyWidth, cornerPostXbyThk)
else
	cornerPostXRight = 0
endif


! =============================================================================
! 2D detail level settings
! =============================================================================

if GLOB_SCRIPT_TYPE = 2 then
	iLoD2D	= SYMBW_SCALESENS
	if bGetMVOValueDlev2D then													! by MVO
		iLoD2D	= iMVODetlevel2D
		if	iLoD2D = SYMBW_M_2LINE_FRAME |\
			iLoD2D = SYMBW_D_2GLASS_OVERLAP then

			iLoD2D = SYMBW_D_SGLASS
			if iMVODetlevel2D < SYMBW_D_SGLASS then				iLoD2D	= SYMBW_M_2LINE_NOGLASS
			if iMVODetlevel2D < SYMBW_M_2LINE_NOGLASS then		iLoD2D	= SYMBW_S_1LINE
		endif

		if GLOB_PREVIEW_MODE = 3 then				! in case of 2D-3D Favorite Preview
			iLoD2D = SYMBW_D_SGLASS
		endif
	else
		if iDWDet2D = DETLEVEL_DW2D_50 then
			iLoD2D = SYMBW_D_SGLASS														! Detailed --> INT 50
			if bShowRebateOnFixGlass		then	iLoD2D = SYMBW_D_REBATEONGLASS		! Detailed --> NLD 50
		endif
		if iDWDet2D = DETLEVEL_DW2D_100 then
			iLoD2D = SYMBW_M_2LINE_NOGLASS												! Middle - with acc --> INT 100
			if bShowGlassInMiddle2D			then	iLoD2D = SYMBW_M_2LINE_GLASS		! Middle --> SWE 100
			if bShowSashInMiddle2D			then	iLoD2D = SYMBW_M_FRAMESASH			! Middle --> NLD 100
		endif
		if iDWDet2D = DETLEVEL_DW2D_MIDDET	then	iLoD2D = SYMBW_M_2LINE_GLASS		! Middle - without acc
		if iDWDet2D = DETLEVEL_DW2D_SMPL2L	then	iLoD2D = SYMBW_S_2LINE_ACC			! Simple - Two Lines
		if iDWDet2D = DETLEVEL_DW2D_200 then
			iLoD2D = SYMBW_S_1LINE														! Simple - One Line --> INT 200
			if bCenterLineInSimple2D		then	iLoD2D = SYMBW_S_CENTERLINE			! Simple - Center Line --> SWE 200
		endif
		if iDWDet2D = DETLEVEL_DW2D_OFF		then	iLoD2D = SYMBW_OFF					! Off
		if iDWDet2D = DETLEVEL_DW2D_MIDUSA	then	iLoD2D = SYMBW_M_FRAMESASH			! Middle USA
		if iDWDet2D = DETLEVEL_DW2D_CHISMPL	then	iLoD2D = SYMBW_S_2LINE				! Chinese Simple
		if iDWDet2D = DETLEVEL_DW2D_CHIDET	then	iLoD2D = SYMBW_D_2LINE_HS			! Chinese Detailed
		if iDWDet2D = DETLEVEL_DW2D_20		then	iLoD2D = SYMBW_D_2GLASS				! Detailed --> DAN 20
	endif
endif


! =============================================================================
! Show Reveal On Symbol
! =============================================================================

bShowReveal = 1
if GLOB_SCRIPT_TYPE = 2 then
	if bGetMVOValueDlevReveal then																				! by MVO
		bShowReveal = bMVODetlevelReveal
	else
		bShowReveal = 1
		if iRevealOnSymbol = SHOWREV_NEVER											then bShowReveal = 0		! Never
		if iLoD2D = SYMBW_SCALESENS then																		! Scale sensitive
			if iRevealOnSymbol = SHOWREV_UPTO50 & GLOB_SCALE > 75					then bShowReveal = 0		! Up to 1:50
			if iRevealOnSymbol = SHOWREV_UPTO100 & GLOB_SCALE > 150					then bShowReveal = 0		! Up to 1:100
		else
			if iRevealOnSymbol = SHOWREV_UPTO50 & iLoD2D < SYMBW_D_SGLASS			then bShowReveal = 0		! Up to 1:50
			if iRevealOnSymbol = SHOWREV_UPTO100 & iLoD2D < SYMBW_M_2LINE_NOGLASS	then bShowReveal = 0		! Up to 1:100
		endif
		if iRevealOnSymbol = SHOWREV_UPTO200 & GLOB_SCALE > 200						then bShowReveal = 0		! Up to 1:200
	endif
endif

! =============================================================================
! Hide Variable Closure Type NED, FLA
! =============================================================================

iClosureType = gs_closure_type_int - 1
if GLOB_SCRIPT_TYPE = 2 then
	if	bHideVariClosTypeInSimple2D &\
		iClosureType = CLOSURE_VARIABLE	&\
		((iLoD2D < SYMBW_M_2LINE_NOGLASS & iLoD2D > SYMBW_SCALESENS) | (iLoD2D = SYMBW_SCALESENS & GLOB_SCALE > 150)) then
		iClosureType = CLOSURE_NO
	endif
endif

! ==============================================================================
! Symbol at Middle
! ==============================================================================

signRevealSide = not(WIDO_REVEAL_SIDE) - WIDO_REVEAL_SIDE

if GLOB_SCRIPT_TYPE = 2 then
	if GLOB_CONTEXT = 2 | GLOB_CONTEXT = 22 then
		if	iLoD2D = SYMBW_S_2LINE | iLoD2D = SYMBW_D_2LINE_HS then bDWSymbolAtMiddle = 1
		if	iLoD2D = SYMBW_S_CENTERLINE |\
			(iLoD2D = SYMBW_SCALESENS and GLOB_SCALE > 150 and bCenterLineInSimple2D) then bDWSymbolAtMiddle2 = 1
	endif
endif
if GLOB_SCRIPT_TYPE = 3 then
	if GLOB_CONTEXT = 4 | GLOB_CONTEXT = 24 | GLOB_CONTEXT = 6 then
		if lod3D = 5 then bDWSymbolAtMiddle = 1
	endif
endif

SymbMid_LeftDx		= 0
SymbMid_RightDx		= 0
SymbolMid_shiftDy	= 0

if bDWSymbolAtMiddle then
	SymbolMid_shiftDy = (WIDO_SILL - WALL_THICKNESS / 2 + WIDO_FRAME_THICKNESS / 2) * signRevealSide

	if bRightCornerFunction then
		if gs_corner_column then
			SymbMid_RightDx = cornerPostXRight + (WIDO_FRAME_THICKNESS/2 + SymbolMid_shiftDy) / tan(rightCornerAngle/2)
		else
			SymbMid_RightDx = signRevealSide * SymbolMid_shiftDy / tan(rightCornerAngle/2)
		endif
	endif
	if bLeftCornerFunction then
		if gs_corner_column then
			SymbMid_LeftDx = cornerPostXLeft + (WIDO_FRAME_THICKNESS/2 + SymbolMid_shiftDy) / tan(leftCornerAngle/2)
		else
			SymbMid_LeftDx = signRevealSide * SymbolMid_shiftDy / tan(leftCornerAngle/2)
		endif
	endif
endif

if bDWSymbolAtMiddle2 then
	SymbolMid_shiftDy = (WIDO_SILL - WALL_THICKNESS / 2) * signRevealSide

	if bRightCornerFunction then
		SymbMid_RightDx = signRevealSide * SymbolMid_shiftDy / tan(rightCornerAngle/2)
	endif
	if bLeftCornerFunction then
		SymbMid_LeftDx = signRevealSide * SymbolMid_shiftDy / tan(leftCornerAngle/2)
	endif
endif


! =============================================================================
! Array index definitions
! =============================================================================

if not(bEnableSill) then
	iSillType = 0
endif

bBoardInPolyWall = 0
if iBoardInPolyWall = BOARD_PARALLEL_WINDOW then bBoardInPolyWall = 1 ! Parallel to Window


! =============================================================================
! Nominal Size
! =============================================================================

if gs_nominal_size > 0 then
	gs_wallhole_nominal	= 0
	gs_reveal_nominal	= 0
	gs_unit_nominal		= 0
	bSetParams = 0

	if not(bSetParams) & bittest(gs_nominal_size, 0) then: gs_wallhole_nominal	= 1: bSetParams = 1: endif
	if not(bSetParams) & bittest(gs_nominal_size, 1) then: gs_reveal_nominal	= 1: bSetParams = 1: endif
	if not(bSetParams) & bittest(gs_nominal_size, 2) then: gs_unit_nominal		= 1: bSetParams = 1: endif

	if bSetParams & GLOB_SCRIPT_TYPE = 5 then
		parameters	gs_wallhole_nominal	= gs_wallhole_nominal,
					gs_reveal_nominal	= gs_reveal_nominal,
					gs_unit_nominal		= gs_unit_nominal
	endif
endif


! =============================================================================
! Definitions
! =============================================================================

bDrawOutsideTrim	= (gs_trim_outside)
bDrawInsideTrim		= (gs_trim_inside)
bDrawSill			= (gs_sill_outside)
bDrawBoard			= (gs_board_inside)

bMirrored = (bDisabeMirroring & SYMB_MIRRORED)

ac_zone_on_reveal_side = 1
if WIDO_REVEAL_SIDE exor not(gs_bOpeningToZone) then
	ac_zone_on_reveal_side = not(ac_zone_on_reveal_side)
endif
parameters ac_zone_on_reveal_side = ac_zone_on_reveal_side

isVentilationOverFrame = (bEnableVentilationProfile & bVentilationProfile & (iVentilationProfileType = VENTPROFILE_OVER_FRAME))


! ==============================================================================
! Partial Stucture Display related calculations
! ==============================================================================

if GLOB_SCRIPT_TYPE = 2 | GLOB_SCRIPT_TYPE = 3 then
	if GLOB_STRUCTURE_DISPLAY = STRUCTURE_CORE_ONLY & \
	  (GLOB_CONTEXT = 2 | GLOB_CONTEXT = 22 | \		! Floor plan
	   GLOB_CONTEXT = 3 | GLOB_CONTEXT = 23 | \		! 3D
	   GLOB_CONTEXT = 4 | GLOB_CONTEXT = 24 | \		! Section
	   (GLOB_PREVIEW_MODE = 2) | \	! IS but not surface
	   GLOB_CONTEXT = 8 | GLOB_CONTEXT = 28) then	! Layout
		bDrawOutsideTrim	= 0
		bDrawInsideTrim		= 0
		bDrawSill			= 0
		bDrawBoard			= 0
	endif
endif

! =============================================================================
! Wallhole Oversize
! =============================================================================

overSize = 0

overSizeLeft	= 0
overSizeRight	= 0

if not(bDrawSill) & not(bDrawBoard) then
	overSizeLower = 0
else
	if not(bDrawSill) & bDrawBoard then
		overSizeLower = gs_sill_oversize * gs_board_thk
	else
		overSizeLower = 0
	endif
	if bDrawSill & not(bDrawBoard) then
		if iSillType = 1 then
			overSizeLower = gs_sill_oversize * (gs_sill_thk + gs_sill_elev)
		else
			overSizeLower = 0
		endif
	endif
	if bDrawSill & bDrawBoard then
		if iSillType = 1 then
			if gs_sill_oversize then
				overSizeLower = max((gs_sill_thk + gs_sill_elev), gs_board_thk)
			else
				overSizeLower = 0
			endif
		else
			overSizeLower = 0
		endif
	endif
endif
overSizeUpper	= 0


! ==============================================================================
! Calculations for Trapezoid Walls
! ==============================================================================

if abs(WALL_INCL) > EPS then
	bInclinedWall = 1
	bInclDir = SYMB_MIRRORED exor (SYMB_ROTANGLE > EPS)	! (0 / 1)
	iInclDir = not(bInclDir) - bInclDir					! (1 / -1)

	incH = cos(WALL_INCL)
	incV = sin(WALL_INCL) * iInclDir

	incHor = tan(WALL_INCL)
else
	bInclinedWall = 0
endif


! ==============================================================================
! Hide Casing in Special Cases
! ==============================================================================

call "CasingEnable" parameters A=A,
	iRevealType		= iRevealType,
	iWindowShape	= iWindowShape,
	returned_parameters bInsideCasingNotAvailableByWallType,
						bInsideCasingNotAvailableByReveal,
						bOutsideCasingNotAvailableByReveal,
						dummy,
						dummy

if (bInsideCasingNotAvailableByWallType |\
	bInsideCasingNotAvailableByReveal) then
	gs_trim_inside	= 0
	bDrawInsideTrim	= 0
endif
if bOutsideCasingNotAvailableByReveal then
	gs_trim_outside	 = 0
	bDrawOutsideTrim = 0
endif


! ==============================================================================
! Retroactive Logic
! ==============================================================================

if gs_sill_outside then
	if iSillType = 2 | iSillType = 3 | iSillType = 4 | iSillType = 5 | iSillType = 6 | iSillType = 7 | iSillType = 15 | iSillType = 17 then
		WIDO_THRES_DEPTH = 0
		gs_reveal_bottom = 0
	endif
endif

if gs_board_inside then
	gs_reveal_bottom_angle = 0
endif

bEnablePlasterLeftIn	= 1
bEnablePlasterLeftOut	= 1
bEnablePlasterRightIn	= 1
bEnablePlasterRightOut	= 1
bEnablePlasterTopIn		= 1
bEnablePlasterTopOut	= 1
bEnablePlasterBottomIn	= 1
bEnablePlasterBottomOut	= 1

bOutsideAtRefLine = (wallIsLeft exor (AC_Wall_Direction_Type <> 1 & AC_Wall_Direction_Type <> 3))
if bOutsideAtRefLine then
	if bDrawInsideTrim then
		bEnablePlasterLeftOut	= 0
		bEnablePlasterRightOut	= 0
		bEnablePlasterTopOut	= 0
		bEnablePlasterBottomOut	= 0
	endif
	if bDrawOutsideTrim then
		bEnablePlasterLeftIn	= 0
		bEnablePlasterRightIn	= 0
		bEnablePlasterTopIn		= 0
		bEnablePlasterBottomIn	= 0
	endif
	if bDrawSill then
		bEnablePlasterBottomIn	= 0
	endif
	if bDrawBoard then
		bEnablePlasterBottomOut	= 0
	endif
	if bEnableMasonryArch & bMasonryArch then
		bEnablePlasterTopIn	= 0
	endif
else
	if bDrawOutsideTrim then
		bEnablePlasterLeftOut	= 0
		bEnablePlasterRightOut	= 0
		bEnablePlasterTopOut	= 0
		bEnablePlasterBottomOut	= 0
	endif
	if bDrawInsideTrim then
		bEnablePlasterLeftIn	= 0
		bEnablePlasterRightIn	= 0
		bEnablePlasterTopIn		= 0
		bEnablePlasterBottomIn	= 0
	endif
	if bDrawSill then
		bEnablePlasterBottomOut	= 0
	endif
	if bDrawBoard then
		bEnablePlasterBottomIn	= 0
	endif
	if bEnableMasonryArch & bMasonryArch then
		bEnablePlasterTopOut	= 0
	endif
endif

! =============================================================================
! Disable 2D Opening Lines and Override
! =============================================================================

if iWindowClass = WINCLASS_SINGLE_HUNG | iWindowClass = WINCLASS_DOUBLE_HUNG |\
	iWindowClass = WINCLASS_HORIZONTAL_SLIDING then

	b2ColumnsOnOpLineUI	= 0
	bDisable2DOverride	= 1
endif

! =============================================================================
! Plaster Geometry
! =============================================================================

call "PlasterGeometry" parameters gs_macro_version = 12,
	AC_Wall_Direction_Type	= AC_Wall_Direction_Type,
	bEnablePlasterLeftIn	= bEnablePlasterLeftIn,
	bEnablePlasterLeftOut	= bEnablePlasterLeftOut,
	bEnablePlasterRightIn	= bEnablePlasterRightIn,
	bEnablePlasterRightOut	= bEnablePlasterRightOut,
	bEnablePlasterTopIn		= bEnablePlasterTopIn,
	bEnablePlasterTopOut	= bEnablePlasterTopOut,
	bEnablePlasterBottomIn	= bEnablePlasterBottomIn,
	bEnablePlasterBottomOut	= bEnablePlasterBottomOut,
	gs_useWallFinishSkin	= gs_useWallFinishSkin,
	gs_maxPlasterThk		= gs_maxPlasterThk,
	gs_bAutoTurnOut			= gs_bAutoTurnOut,
	gs_bOverOut				= gs_bOverOut,
	gs_bAutoTurnIn			= gs_bAutoTurnIn,
	gs_bOverIn				= gs_bOverIn,
	iClosureType			= iClosureType,
	gs_custom_cc_array_left	= gs_custom_cc_array_left,
	gs_custom_cc_array_right= gs_custom_cc_array_right,
returned_parameters	thkPlasterAtSillLeft,
					thkPlasterAtSillSlLeft,
					thkPlasterAtSillSlLeftBottom,
					thkPlasterAtSillRight,
					thkPlasterAtSillSlRight,
					thkPlasterAtSillSlRightBottom,
					thkPlasterAtSillTop,
					thkPlasterAtSillBottom,
					thkPlasterAtBoardLeft,
					thkPlasterAtBoardSlLeft,
					thkPlasterAtBoardSlLeftBottom,
					thkPlasterAtBoardRight,
					thkPlasterAtBoardSlRight,
					thkPlasterAtBoardSlRightBottom,
					thkPlasterAtBoardTop,
					thkPlasterAtBoardBottom,
					possibleSkinTurnIn,
					possibleSkinTurnOut,
					maxSkinTurnIn,
					maxSkinTurnOut,
					nSkinTurnIn,
					nSkinTurnOut


! =============================================================================
! Wallhole Geometry
! =============================================================================

diff = bCornerWindow * (overSizeLeft - overSizeRight) / 2

refWidth	= A
leftWidth	= ac_wallhole_width / 2 + diff + overSizeLeft  * not(bLeftCornerFunction) + (bCornerWindow) * cornerPostXRight + bLeftCornerFunction * cornerPostXLeft
rightWidth	= ac_wallhole_width / 2 - diff + overSizeRight * not(bRightCornerFunction | bCornerWindow) + (bRightCornerFunction & not(bCornerWIndow)) * cornerPostXRight

openingHeight	= ac_wallhole_height + overSizeLower + overSizeUpper
offsY			= overSizeLower


! ==============================================================================
! Calculations for Curved Walls
! ==============================================================================

if curvedWall then
	WOD = abs(WIDO_ORIG_DIST) - (SYMB_ROTANGLE > EPS) * WIDO_FRAME_THICKNESS

	leftAlfa	= atn(leftWidth  / WOD)
	rightAlfa	= atn(rightWidth / WOD)
endif


! =============================================================================
! Wallhole Reveal Geometry
! =============================================================================

origRevealType					= iRevealType
origRevealLeft					= gs_reveal_left
origRevealRight					= gs_reveal_right
origRevealTop					= gs_reveal_top
origRevealBottom				= gs_reveal_bottom
origRevealLeftAngle				= gs_reveal_left_angle
origRevealRightAngle			= gs_reveal_right_angle
origRevealTopAngle				= gs_reveal_top_angle
origRevealBottomAngle			= gs_reveal_bottom_angle
origRevealSplayedInnerLeft		= gs_reveal_splayed_innerLeft
origRevealSplayedInnerRight		= gs_reveal_splayed_innerRight
origRevealSplayedInnerTop		= gs_reveal_splayed_innerTop
origRevealSplayedInnerBottom	= gs_reveal_splayed_innerBottom
origRevealOuterJambDepth		= gs_reveal_outer_jamb_depth
origRevealDoubleInnerLeft		= gs_reveal_double_innerLeft
origRevealDoubleInnerRight		= gs_reveal_double_innerRight
origRevealDoubleInnerTop		= gs_reveal_double_innerTop
origRevealDoubleInnerBottom		= gs_reveal_double_innerBottom
origRevealOuterLeftAngle		= 0 ! gs_reveal_outerLeft_angle
origRevealOuterRightAngle		= 0 ! gs_reveal_outerRight_angle
origRevealOuterTopAngle			= 0 ! gs_reveal_outerTop_angle
origRevealOuterBottomAngle		= 0 ! gs_reveal_outerBottom_angle
origRevealInnerWidthLeft		= 0 ! gs_reveal_innerLeft_width
origRevealInnerWidthRight		= 0 ! gs_reveal_innerRight_width
origRevealInnerWidthTop			= 0 ! gs_reveal_innerTop_width
origRevealInnerWidthBottom		= 0 ! gs_reveal_innerBottom_width
origRevealOuterWidthLeft		= 0 ! gs_reveal_outerLeft_width
origRevealOuterWidthRight		= 0 ! gs_reveal_outerRight_width
origRevealOuterWidthTop			= 0 ! gs_reveal_outerTop_width
origRevealOuterWidthBottom		= 0 ! gs_reveal_outerBottom_width

dim revealPointsArray[]
dim iRevealPointsIdx[20]

dim bAddPoint[4]

dim  leftWallholeRevealPnts[][2]
dim rightWallholeRevealPnts[][2]

call "RevealGeometry" parameters A	= A,
	AC_WallType						= AC_WallType,
	AC_WindowInWallContour			= AC_WindowInWallContour,
	AC_WallContourPolygon			= AC_WallContourPolygon,
	gs_macro_version				= 12,
	iWindowShape					= iWindowShape,
	refWidth						= refWidth,
	leftWidth						= leftWidth  + gs_left_oversize,
	rightWidth						= rightWidth + gs_right_oversize,
	cornerPostX						= cornerPostXRight,
	bWndCurved						= gs_IsCurved,
	bParalellInCurvedWalls			= bParalellInCurvedWalls,
	bShowReveal						= bShowReveal,
	bDWSymbolAtMiddle				= bDWSymbolAtMiddle,
	iClosureType					= iClosureType,
	iRevealType						= origRevealType,
	gs_reveal_type_bottom_int		= gs_reveal_type_bottom_int,
	iSillRevealType					= iSillRevealType,
	iBoardRevealType				= iBoardRevealType,
	gs_wido_sill					= gs_wido_sill,
	gs_reveal_uniform				= gs_reveal_uniform,
	gs_reveal_left					= origRevealLeft,
	gs_reveal_right					= origRevealRight,
	gs_reveal_top					= origRevealTop,
	gs_reveal_bottom				= origRevealBottom,
	gs_reveal_splayed_innerLeft		= origRevealSplayedInnerLeft,
	gs_reveal_splayed_innerRight	= origRevealSplayedInnerRight,
	gs_reveal_splayed_innerTop		= origRevealSplayedInnerTop,
	gs_reveal_splayed_innerBottom	= origRevealSplayedInnerBottom,
	gs_reveal_double_innerLeft		= origRevealDoubleInnerLeft,
	gs_reveal_double_innerRight		= origRevealDoubleInnerRight,
	gs_reveal_double_innerTop		= origRevealDoubleInnerTop,
	gs_reveal_double_innerBottom	= origRevealDoubleInnerBottom,
	gs_reveal_outer_jamb_depth		= origRevealOuterJambDepth,
	gs_reveal_left_angle			= origRevealLeftAngle,
	gs_reveal_right_angle			= origRevealRightAngle,
	gs_reveal_top_angle				= origRevealTopAngle,
	gs_reveal_bottom_angle			= origRevealBottomAngle,
	gs_reveal_outerLeft_angle		= origRevealOuterLeftAngle,
	gs_reveal_outerRight_angle		= origRevealOuterRightAngle,
	gs_reveal_outerTop_angle		= origRevealOuterTopAngle,
	gs_reveal_outerBottom_angle		= origRevealOuterBottomAngle,
	gs_reveal_angle_edit_by_int		= 1,
	gs_reveal_innerLeft_width		= origRevealInnerWidthLeft,
	gs_reveal_innerRight_width		= origRevealInnerWidthRight,
	gs_reveal_innerTop_width		= origRevealInnerWidthTop,
	gs_reveal_innerBottom_width		= origRevealInnerWidthBottom,
	gs_reveal_outerLeft_width		= origRevealOuterWidthLeft,
	gs_reveal_outerRight_width		= origRevealOuterWidthRight,
	gs_reveal_outerTop_width		= origRevealOuterWidthTop,
	gs_reveal_outerBottom_width		= origRevealOuterWidthBottom,
	gs_reveal_left_sL				= 0,
	gs_reveal_right_sR				= 0,
	gs_reveal_bottom_sL				= 0,
	gs_reveal_bottom_sR				= 0,
	gs_reveal_double_innerLeft_sL	= 0,
	gs_reveal_double_innerRight_sR	= 0,
	gs_reveal_double_innerBottom_sL	= 0,
	gs_reveal_double_innerBottom_sR	= 0,
	gs_mountingFrame				= gs_mountingFrame,
	gs_mountingFrame_depth			= gs_mountingFrame_depth,
	thkPlasterAtSillLeft			= thkPlasterAtSillLeft,
	thkPlasterAtSillRight			= thkPlasterAtSillRight,
	thkPlasterAtBoardLeft			= thkPlasterAtBoardLeft,
	thkPlasterAtBoardRight			= thkPlasterAtBoardRight,
	bLeftCornerFunction				= bLeftCornerFunction,
	leftCornerAngle					= leftCornerAngle,
	leftConnWallThk					= leftConnWallThk,
	bRightCornerFunction			= bRightCornerFunction,
	rightCornerAngle				= rightCornerAngle,
	rightConnWallThk				= rightConnWallThk,
	bCornerWindow					= bCornerWindow,
	bGangingLeft					= gs_stack_left,
	bGangingRight					= gs_stack_right,
	gs_unit_nominal					= gs_unit_nominal,
	gs_reveal_nominal				= gs_reveal_nominal,
	gs_tolerance_left				= gs_tolerance_left,
	gs_tolerance_right				= gs_tolerance_right,
	gs_left_oversize				= gs_left_oversize,
	gs_right_oversize				= gs_right_oversize,
returned_parameters	iRevealType,
	iRevealTypeForDisplay,
	iClosureType,
	bShowReveal,
	leftWallholeWidth,
	rightWallholeWidth,
	originalOffsWindowX,
	offsWindowX,
	gs_reveal_left,
	gs_reveal_right,
	revealInnerLeft,
	revealInnerRight,
	gs_reveal_top,
	gs_reveal_bottom,
	gs_reveal_splayed_innerTop,
	gs_reveal_splayed_innerBottom,
	gs_reveal_double_innerLeft,
	gs_reveal_double_innerRight,
	gs_reveal_double_innerTop,
	gs_reveal_double_innerBottom,
	gs_reveal_outer_jamb_depth,
	gs_reveal_left_angle,
	gs_reveal_right_angle,
	gs_reveal_top_angle,
	gs_reveal_bottom_angle,
	gs_reveal_outerLeft_angle,
	gs_reveal_outerRight_angle,
	gs_reveal_outerTop_angle,
	gs_reveal_outerBottom_angle,
	gs_reveal_left_sL,
	gs_reveal_right_sR,
	gs_reveal_bottom_sL,
	gs_reveal_bottom_sR,
	gs_reveal_double_innerLeft_sL,
	gs_reveal_double_innerRight_sR,
	gs_reveal_double_innerBottom_sL,
	gs_reveal_double_innerBottom_sR,
	radSill,
	radBoard,
	WOD,
	iRevealPointsIdx,
	bAddPoint,
	revealPointsArray


for i=1 to iRevealPointsIdx[10]
	idx = 2 * (i - 1) + 1
	leftWallholeRevealPnts[i][1] = revealPointsArray[idx]
	leftWallholeRevealPnts[i][2] = revealPointsArray[idx + 1]
next i

for i=1 to iRevealPointsIdx[20]
	idx = 2 * (iRevealPointsIdx[10] + i - 1) + 1
	rightWallholeRevealPnts[i][1] = revealPointsArray[idx]
	rightWallholeRevealPnts[i][2] = revealPointsArray[idx + 1]
next i


! =============================================================================
! Wall Framing Reveal Geometry
! =============================================================================

dim  leftWallFrameRevealPnts[][2]
dim rightWallFrameRevealPnts[][2]

if abs(gs_left_oversize) > EPS | abs(gs_right_oversize) > EPS then
	if GLOB_SCRIPT_TYPE = 2 | GLOB_SCRIPT_TYPE = 3 | ((GLOB_SCRIPT_TYPE = 4 | GLOB_SCRIPT_TYPE = 5) & gs_sunShade_iType <> 0) then
		call "RevealGeometry" parameters A	= A,
			AC_WallType						= AC_WallType,
			AC_WindowInWallContour			= AC_WindowInWallContour,
			AC_WallContourPolygon			= AC_WallContourPolygon,
			gs_macro_version				= 12,
			iWindowShape					= iWindowShape,
			refWidth						= refWidth,
			leftWidth						= leftWidth,
			rightWidth						= rightWidth,
			cornerPostX						= cornerPostXRight,
			bWndCurved						= gs_IsCurved,
			bParalellInCurvedWalls			= bParalellInCurvedWalls,
			bShowReveal						= bShowReveal,
			bDWSymbolAtMiddle				= bDWSymbolAtMiddle,
			iClosureType					= iClosureType,
			iRevealType						= origRevealType,
			gs_reveal_type_bottom_int		= gs_reveal_type_bottom_int,
			iSillRevealType					= iSillRevealType,
			iBoardRevealType				= iBoardRevealType,
			gs_wido_sill					= gs_wido_sill,
			gs_reveal_uniform				= gs_reveal_uniform,
			gs_reveal_left					= origRevealLeft,
			gs_reveal_right					= origRevealRight,
			gs_reveal_top					= origRevealTop,
			gs_reveal_bottom				= origRevealBottom,
			gs_reveal_splayed_innerLeft		= origRevealSplayedInnerLeft,
			gs_reveal_splayed_innerRight	= origRevealSplayedInnerRight,
			gs_reveal_splayed_innerTop		= origRevealSplayedInnerTop,
			gs_reveal_splayed_innerBottom	= origRevealSplayedInnerBottom,
			gs_reveal_double_innerLeft		= origRevealDoubleInnerLeft,
			gs_reveal_double_innerRight		= origRevealDoubleInnerRight,
			gs_reveal_double_innerTop		= origRevealDoubleInnerTop,
			gs_reveal_double_innerBottom	= origRevealDoubleInnerBottom,
			gs_reveal_outer_jamb_depth		= origRevealOuterJambDepth,
			gs_reveal_left_angle			= origRevealLeftAngle,
			gs_reveal_right_angle			= origRevealRightAngle,
			gs_reveal_top_angle				= origRevealTopAngle,
			gs_reveal_bottom_angle			= origRevealBottomAngle,
			gs_reveal_outerLeft_angle		= origRevealOuterLeftAngle,
			gs_reveal_outerRight_angle		= origRevealOuterRightAngle,
			gs_reveal_outerTop_angle		= origRevealOuterTopAngle,
			gs_reveal_outerBottom_angle		= origRevealOuterBottomAngle,
			gs_reveal_angle_edit_by_int		= 1,
			gs_reveal_innerLeft_width		= origRevealInnerWidthLeft,
			gs_reveal_innerRight_width		= origRevealInnerWidthRight,
			gs_reveal_innerTop_width		= origRevealInnerWidthTop,
			gs_reveal_innerBottom_width		= origRevealInnerWidthBottom,
			gs_reveal_outerLeft_width		= origRevealOuterWidthLeft,
			gs_reveal_outerRight_width		= origRevealOuterWidthRight,
			gs_reveal_outerTop_width		= origRevealOuterWidthTop,
			gs_reveal_outerBottom_width		= origRevealOuterWidthBottom,
			gs_reveal_left_sL				= 0,
			gs_reveal_right_sR				= 0,
			gs_reveal_bottom_sL				= 0,
			gs_reveal_bottom_sR				= 0,
			gs_reveal_double_innerLeft_sL	= 0,
			gs_reveal_double_innerRight_sR	= 0,
			gs_reveal_double_innerBottom_sL	= 0,
			gs_reveal_double_innerBottom_sR	= 0,
			gs_mountingFrame				= gs_mountingFrame,
			gs_mountingFrame_depth			= gs_mountingFrame_depth,
			thkPlasterAtSillLeft			= thkPlasterAtSillLeft,
			thkPlasterAtSillRight			= thkPlasterAtSillRight,
			thkPlasterAtBoardLeft			= thkPlasterAtBoardLeft,
			thkPlasterAtBoardRight			= thkPlasterAtBoardRight,
			bLeftCornerFunction				= bLeftCornerFunction,
			leftCornerAngle					= leftCornerAngle,
			leftConnWallThk					= leftConnWallThk,
			bRightCornerFunction			= bRightCornerFunction,
			rightCornerAngle				= rightCornerAngle,
			rightConnWallThk				= rightConnWallThk,
			bCornerWindow					= bCornerWindow,
			bGangingLeft					= gs_stack_left,
			bGangingRight					= gs_stack_right,
			gs_unit_nominal					= gs_unit_nominal,
			gs_reveal_nominal				= gs_reveal_nominal,
			gs_tolerance_left				= gs_tolerance_left,
			gs_tolerance_right				= gs_tolerance_right,
			gs_left_oversize				= 0,
			gs_right_oversize				= 0,
		returned_parameters	dummyParam,
			dummyParam,
			dummyParam,
			dummyParam,
			leftWidth,
			rightWidth,
			dummyParam,
			dummyParam,
			dummyParam,
			dummyParam,
			dummyParam,
			dummyParam,
			dummyParam,
			dummyParam,
			dummyParam,
			dummyParam,
			dummyParam,
			dummyParam,
			dummyParam,
			dummyParam,
			dummyParam,
			dummyParam,
			dummyParam,
			dummyParam,
			dummyParam,
			dummyParam,
			dummyParam,
			dummyParam,
			dummyParam,
			dummyParam,
			dummyParam,
			dummyParam,
			dummyParam,
			dummyParam,
			dummyParam,
			dummyParam,
			dummyParam,
			dummyParam,
			dummyParam,
			dummyParam,
			iRevealPointsIdx,
			dummyParam,dummyParam,dummyParam,dummyParam,
			revealPointsArray

		for i=1 to iRevealPointsIdx[10]
			idx = 2 * (i - 1) + 1
			leftWallFrameRevealPnts[i][1] = revealPointsArray[idx]
			leftWallFrameRevealPnts[i][2] = revealPointsArray[idx + 1]
		next i

		for i=1 to iRevealPointsIdx[20]
			idx = 2 * (iRevealPointsIdx[10] + i - 1) + 1
			rightWallFrameRevealPnts[i][1] = revealPointsArray[idx]
			rightWallFrameRevealPnts[i][2] = revealPointsArray[idx + 1]
		next i
	endif
else
	 leftWallFrameRevealPnts =  leftWallholeRevealPnts
	rightWallFrameRevealPnts = rightWallholeRevealPnts

	leftWidth	= leftWallholeWidth
	rightWidth	= rightWallholeWidth
endif


! ==============================================================================
! Reveal Points Indexes
! ==============================================================================

idxFrameStartRevealLeft		= iRevealPointsIdx[3]
idxFrameEndRevealLeft		= iRevealPointsIdx[4]
idxFrameStartRevealRight	= iRevealPointsIdx[13]
idxFrameEndRevealRight		= iRevealPointsIdx[14]


! =============================================================================
! Wall Framing Reveal Geometry
! =============================================================================

dim lineSections[][7]
lineSections[1][1] = 0	! Initialization
lineSections[1][2] = 0
lineSections[1][3] = 0
lineSections[1][4] = 0
lineSections[1][5] = 0
lineSections[1][6] = 0
lineSections[1][7] = 0

if GLOB_SCRIPT_TYPE = 2 then

	bCompositeWall		= (WALL_SKINS_NUMBER > 0)

	bSkinTurnLeft	= 0
	bSkinTurnRight	= 0
	if bCompositeWall then
		if	iClosureType = CLOSURE_TRADITIONAL |\
			iClosureType = CLOSURE_VARIABLE |\
			iClosureType = CLOSURE_DUTCH_VARIABLE |\
			iClosureType = CLOSURE_PREFABRICATED then

			bSkinTurnLeft	= (iCavityClosureSide = CAVITY_SIDE_BOTH | iCavityClosureSide = CAVITY_SIDE_LEFT)
			bSkinTurnRight	= (iCavityClosureSide = CAVITY_SIDE_BOTH | iCavityClosureSide = CAVITY_SIDE_RIGHT)
		endif
		if iClosureType = CLOSURE_CUSTOM then
			bSkinTurnLeft	= 1
			bSkinTurnRight	= 1
		endif

		bPlasterTurnSillLeft	= (thkPlasterAtSillLeft > EPS)
		bPlasterTurnSillRight	= (thkPlasterAtSillRight > EPS)
		bPlasterTurnBoardLeft	= (thkPlasterAtBoardLeft > EPS)
		bPlasterTurnBoardRight	= (thkPlasterAtBoardRight > EPS)
	else
		bPlasterTurnSillLeft	= 0
		bPlasterTurnSillRight	= 0
		bPlasterTurnBoardLeft	= 0
		bPlasterTurnBoardRight	= 0
	endif

	dim tempLineSections[]
	tempLineSections[1] = 0	! Initialization

	call "FramingGeometry" parameters gs_macro_version = 12,
		refWidth				= refWidth,
		leftWidth				= leftWidth  + gs_left_oversize,
		rightWidth				= rightWidth + gs_right_oversize,
		bWndCurved				= gs_IsCurved,
		bParalellInCurvedWalls	= bParalellInCurvedWalls,
		radSill					= radSill,
		radBoard				= radBoard,
		WOD						= WOD,
		bSkinTurnLeft			= bSkinTurnLeft,
		bSkinTurnRight			= bSkinTurnRight,
		bPlasterTurnSillLeft	= bPlasterTurnSillLeft,
		bPlasterTurnSillRight	= bPlasterTurnSillRight,
		bPlasterTurnBoardLeft	= bPlasterTurnBoardLeft,
		bPlasterTurnBoardRight	= bPlasterTurnBoardRight,
		bLeftCornerFunction		= bLeftCornerFunction,
		bRightCornerFunction	= bRightCornerFunction,
		iRevealType				= iRevealTypeForDisplay,
		gs_reveal_left			= gs_reveal_left,
		gs_reveal_right			= gs_reveal_right,
		gs_reveal_left_angle	= gs_reveal_left_angle,
		gs_reveal_right_angle	= gs_reveal_right_angle,
		leftRevealPnts			= leftWallholeRevealPnts,
		rightRevealPnts			= rightWallholeRevealPnts,
		iRevealPointsIdx		= iRevealPointsIdx,
		bGangingLeft			= gs_stack_left,
		bGangingRight			= gs_stack_right,
		gs_left_oversize		= gs_left_oversize,
		gs_right_oversize		= gs_right_oversize,
		gs_sill_outside			= gs_sill_outside,
		iSillType				= iSillType,
		gs_sill_nosing			= gs_sill_nosing,
		gs_sill_ovhg_left		= gs_sill_ovhg_left,
		gs_sill_ovhg_right		= gs_sill_ovhg_right,
		gs_board_inside			= gs_board_inside,
		gs_board_ovhg_left		= gs_board_ovhg_left,
		gs_board_ovhg_right		= gs_board_ovhg_right,
		bDrawOutsideTrim		= bDrawOutsideTrim,
		bDrawInsideTrim			= bDrawInsideTrim,
		gs_trim_outside_uniform	= gs_trim_outside_uniform,
		gs_trim_inside_uniform	= gs_trim_inside_uniform,
		gs_trim_width_in		= gs_trim_width_in,
		gs_trim_width_out		= gs_trim_width_out,
		gs_trim_offs_in			= gs_trim_offs_in,
		gs_trim_offs_out		= gs_trim_offs_out,
		gs_trim_thk_in			= gs_trim_thk_in,
		gs_trim_thk_out			= gs_trim_thk_out,
		gs_tw_left_in			= gs_tw_left_in,
		gs_tw_right_in			= gs_tw_right_in,
		gs_tw_left_out			= gs_tw_left_out,
		gs_tw_right_out			= gs_tw_right_out,
		gs_trim_atframe_out		= gs_trim_atframe_out,
		gs_trim_atframe_in		= gs_trim_atframe_in,
	returned_parameters	tempLineSections

	numLineSections = round_int(vardim1(tempLineSections) / 7)
	idx = 0
	for i=1 to numLineSections
		for j=1 to 7
			lineSections[i][j] = tempLineSections[idx + j]
		next j
		idx = idx + 7
	next i
endif


! =============================================================================
! Frame Overhang Calculations
! =============================================================================

if GLOB_SCRIPT_TYPE = 2 | GLOB_SCRIPT_TYPE = 3 then
	fx1L = -leftWidth
	fx2L = -leftWidth

	fx1R =  rightWidth
	fx2R =  rightWidth

	fx1L = leftWallFrameRevealPnts[idxFrameStartRevealLeft][1]
	fx2L = leftWallFrameRevealPnts[idxFrameEndRevealLeft][1]

	fx1R = rightWallFrameRevealPnts[idxFrameStartRevealRight][1]
	fx2R = rightWallFrameRevealPnts[idxFrameEndRevealRight][1]

	if bDWSymbolAtMiddle2 then
		if NOT(bLeftCornerFunction) then
			if idxFrameStartRevealLeft = 2 then
				if WIDO_SILL + WIDO_FRAME_THICKNESS < WALL_THICKNESS / 2 then
					if WIDO_SILL < EPS then
						fx1L = leftWallFrameRevealPnts[idxFrameStartRevealLeft + 2][1] + TAN(gs_reveal_left_angle) * (WALL_THICKNESS / 2 - WIDO_SILL)
					else
						fx1L = leftWallFrameRevealPnts[idxFrameStartRevealLeft + 2][1] - TAN(gs_reveal_left_angle) * (WALL_THICKNESS / 2 - WIDO_SILL - WIDO_FRAME_THICKNESS)
					endif
				endif
			else
				if WIDO_SILL + WIDO_FRAME_THICKNESS < WALL_THICKNESS / 2 then
					if ABS(leftWallFrameRevealPnts[idxFrameStartRevealLeft + 1][2] - leftWallFrameRevealPnts[idxFrameStartRevealLeft + 2][2]) < EPS then
						fx1L = leftWallFrameRevealPnts[idxFrameStartRevealLeft + 2][1] - TAN(gs_reveal_left_angle) * (WALL_THICKNESS / 2 - WIDO_SILL - WIDO_FRAME_THICKNESS)
					else
						fx1L = leftWallFrameRevealPnts[idxFrameStartRevealLeft][1] - TAN(gs_reveal_left_angle) * (WALL_THICKNESS / 2 - WIDO_SILL)			
					endif
				else
					if WIDO_SILL > WALL_THICKNESS / 2 then
						fx1L = leftWallFrameRevealPnts[idxFrameStartRevealLeft - 1][1]
					else
						if ABS(leftWallFrameRevealPnts[idxFrameStartRevealLeft + 1][2] - leftWallFrameRevealPnts[idxFrameStartRevealLeft + 2][2]) > EPS then
							fx1L = leftWallFrameRevealPnts[idxFrameStartRevealLeft][1] - TAN(gs_reveal_left_angle) * (WALL_THICKNESS / 2 - WIDO_SILL)
						endif
					endif
				endif
			endif
		endif

		if NOT(bRightCornerFunction) then
			if idxFrameStartRevealRight = 2 then
				if WIDO_SILL + WIDO_FRAME_THICKNESS < WALL_THICKNESS / 2 then
					if WIDO_SILL < EPS then
						fx1R = rightWallFrameRevealPnts[idxFrameStartRevealRight + 2][1] - TAN(gs_reveal_right_angle) * (WALL_THICKNESS / 2 - WIDO_SILL)
					else
						fx1R = rightWallFrameRevealPnts[idxFrameStartRevealRight + 2][1] + TAN(gs_reveal_right_angle) * (WALL_THICKNESS / 2 - WIDO_SILL - WIDO_FRAME_THICKNESS)
					endif
				endif
			else
				if WIDO_SILL + WIDO_FRAME_THICKNESS < WALL_THICKNESS / 2 then
					if ABS(rightWallFrameRevealPnts[idxFrameStartRevealRight + 1][2] - rightWallFrameRevealPnts[idxFrameStartRevealRight + 2][2]) < EPS then
						fx1R = rightWallFrameRevealPnts[idxFrameStartRevealRight + 2][1] + TAN(gs_reveal_right_angle) * (WALL_THICKNESS / 2 - WIDO_SILL - WIDO_FRAME_THICKNESS)
					else
						fx1R = rightWallFrameRevealPnts[idxFrameStartRevealRight][1] + TAN(gs_reveal_right_angle) * (WALL_THICKNESS / 2 - WIDO_SILL)			
					endif
				else
					if WIDO_SILL > WALL_THICKNESS / 2 then
						fx1R = rightWallFrameRevealPnts[idxFrameStartRevealRight - 1][1]
					else
						if ABS(rightWallFrameRevealPnts[idxFrameStartRevealRight + 1][2] - rightWallFrameRevealPnts[idxFrameStartRevealRight + 2][2]) > EPS then
							fx1R = rightWallFrameRevealPnts[idxFrameStartRevealRight][1] + TAN(gs_reveal_right_angle) * (WALL_THICKNESS / 2 - WIDO_SILL)
						endif
					endif
				endif
			endif
		endif
	endif

	! Curved
	if GLOB_SCRIPT_TYPE = 2 | GLOB_SCRIPT_TYPE = 3 then
		if GLOB_CONTEXT = 2 | GLOB_CONTEXT = 22 | GLOB_CONTEXT = 4 | GLOB_CONTEXT = 24 | GLOB_CONTEXT = 6 then
			if curvedWall then
				signRotAngle = (abs(SYMB_ROTANGLE - 180) < EPS) - not(SYMB_ROTANGLE > EPS)
				SymbMid_LeftDx	= signRotAngle * SymbolMid_shiftDy * tan(leftAlfa)
				SymbMid_RightDx	= signRotAngle * SymbolMid_shiftDy * tan(rightAlfa)
			endif
		endif
	endif

	leftFrameOverhang	= (not(bLeftCornerFunction) & bShowReveal) * (overSizeLeft + gs_left_oversize) + bShowReveal * gs_tolerance_left - SymbMid_LeftDx * NOT(bDWSymbolAtMiddle2)
	rightFrameOverhang	= (not(bRightCornerFunction) & bShowReveal) * (overSizeRight + gs_right_oversize) + (not(bCornerWindow) & bShowReveal) * gs_tolerance_right - SymbMid_RightDx * NOT(bDWSymbolAtMiddle2)

	if WIDO_REVEAL_SIDE then
		gs_frame_ovhg_left_in	= -fx1L - leftWallholeWidth + leftFrameOverhang + not(bShowReveal) * gs_left_oversize
		gs_frame_ovhg_left_out	= -fx2L - leftWallholeWidth + leftFrameOverhang + not(bShowReveal) * gs_left_oversize

		gs_frame_ovhg_right_in	= fx1R - rightWallholeWidth + rightFrameOverhang + not(bShowReveal) * gs_right_oversize
		gs_frame_ovhg_right_out	= fx2R - rightWallholeWidth + rightFrameOverhang + not(bShowReveal) * gs_right_oversize
	else
		gs_frame_ovhg_left_out	= -fx1L - leftWallholeWidth + leftFrameOverhang + not(bShowReveal) * gs_left_oversize
		gs_frame_ovhg_left_in	= -fx2L - leftWallholeWidth + leftFrameOverhang + not(bShowReveal) * gs_left_oversize

		gs_frame_ovhg_right_out	= fx1R - rightWallholeWidth + rightFrameOverhang + not(bShowReveal) * gs_right_oversize
		gs_frame_ovhg_right_in	= fx2R - rightWallholeWidth + rightFrameOverhang + not(bShowReveal) * gs_right_oversize
	endif

	if NOT(bDWSymbolAtMiddle2) then
		if bLeftCornerFunction & gs_corner_column then
			gs_frame_ovhg_left_out	= bShowReveal * gs_tolerance_left
			gs_frame_ovhg_left_in	= bShowReveal * gs_tolerance_left
		endif
	
		if bRightCornerFunction & gs_corner_column then
			gs_frame_ovhg_right_out	= not(bCornerWindow) * bShowReveal * gs_tolerance_right
			gs_frame_ovhg_right_in	= not(bCornerWindow) * bShowReveal * gs_tolerance_right
		endif
	endif
endif
