

! ==============================================================================
! Detail Level
! ==============================================================================

if GLOB_MODPAR_NAME = "gs_detlevel_2D" then
	gs_detlevel_2D_m = LOD2D_BYMVO												! by MVO
	if gs_detlevel_2D = stDetail[ 1] then gs_detlevel_2D_m = LOD2D_SCALE		! Scale Sensitive
	if bMetricScale then
		if gs_detlevel_2D = stDetail[ 6] then gs_detlevel_2D_m = LOD2D_20		! 1:20
		if gs_detlevel_2D = stDetail[ 7] then gs_detlevel_2D_m = LOD2D_50		! 1:50
		if gs_detlevel_2D = stDetail[ 8] then gs_detlevel_2D_m = LOD2D_100		! 1:100
		if gs_detlevel_2D = stDetail[ 9] then gs_detlevel_2D_m = LOD2D_200		! 1:200
		if gs_detlevel_2D = stDetail[10] then gs_detlevel_2D_m = LOD2D_500		! 1:500
		if gs_detlevel_2D = stDetail[ 5] then gs_detlevel_2D_m = LOD2D_OFF		! Off
	else
		if gs_detlevel_2D = stDetail[ 2] then gs_detlevel_2D_m = LOD2D_20		! Detailed
		if gs_detlevel_2D = stDetail[ 3] then gs_detlevel_2D_m = LOD2D_50		! Middle
		if gs_detlevel_2D = stDetail[ 4] then gs_detlevel_2D_m = LOD2D_100		! Simple
		if gs_detlevel_2D = stDetail[ 5] then gs_detlevel_2D_m = LOD2D_OFF		! Off
	endif
	parameters gs_detlevel_2D_m = gs_detlevel_2D_m
else
	gs_detlevel_2D = stDetail[11]												! by MVO
	if gs_detlevel_2D_m = LOD2D_SCALE	then gs_detlevel_2D = stDetail[ 1]		! Scale Sensitive
	if bMetricScale then
		if gs_detlevel_2D_m = LOD2D_20		then gs_detlevel_2D = stDetail[ 6]	! 1:20
		if gs_detlevel_2D_m = LOD2D_50		then gs_detlevel_2D = stDetail[ 7]	! 1:50
		if gs_detlevel_2D_m = LOD2D_100		then gs_detlevel_2D = stDetail[ 8]	! 1:100
		if gs_detlevel_2D_m = LOD2D_200		then gs_detlevel_2D = stDetail[ 9]	! 1:200
		if gs_detlevel_2D_m = LOD2D_500		then gs_detlevel_2D = stDetail[10]	! 1:500
		if gs_detlevel_2D_m = LOD2D_OFF		then gs_detlevel_2D = stDetail[ 5]	! Off
	else
		if gs_detlevel_2D_m = LOD2D_20		then gs_detlevel_2D = stDetail[ 2]	! Detailed
		if gs_detlevel_2D_m = LOD2D_50		then gs_detlevel_2D = stDetail[ 3]	! Middle
		if gs_detlevel_2D_m = LOD2D_100		then gs_detlevel_2D = stDetail[ 4]	! Simple
		if gs_detlevel_2D_m = LOD2D_200		then gs_detlevel_2D = stDetail[ 4]	! Simple
		if gs_detlevel_2D_m = LOD2D_500		then gs_detlevel_2D = stDetail[ 4]	! Simple
		if gs_detlevel_2D_m = LOD2D_OFF		then gs_detlevel_2D = stDetail[ 5]	! Off
	endif
	parameters gs_detlevel_2D = gs_detlevel_2D
endif

if bMetricScale then
	values "gs_detlevel_2D"	stDetail[11],	! by MVO
							stDetail[1],	! Scale Sensitive
							stDetail[6],	! 1:20
							stDetail[7],	! 1:50
							stDetail[8],	! 1:100
							stDetail[9],	! 1:200
							stDetail[10],	! 1:500
							stDetail[5]		! Off

	values "gs_detlevel_2D_m"	LOD2D_BYMVO,
								LOD2D_SCALE,
								LOD2D_20,
								LOD2D_50,
								LOD2D_100,
								LOD2D_200,
								LOD2D_500,
								LOD2D_OFF
else
	values "gs_detlevel_2D"	stDetail[11],	! by MVO
							stDetail[1],	! Scale Sensitive
							stDetail[2],	! Detailed
							stDetail[3],	! Middle
							stDetail[4],	! Simple
							stDetail[5]		! Off

	values "gs_detlevel_2D_m"	LOD2D_BYMVO,
								LOD2D_SCALE,
								LOD2D_20,
								LOD2D_50,
								LOD2D_100,
								LOD2D_OFF
endif


if GLOB_MODPAR_NAME = "gs_detlevel_3D" then
	gs_detlevel_3D_m = LOD3D_DETAILED			! Detailed
	if gs_detlevel_3D = stDetail[4] then gs_detlevel_3D_m = LOD3D_SIMPLE	! Simple
	if gs_detlevel_3D = stDetail[5] then gs_detlevel_3D_m = LOD3D_OFF		! Off
	parameters gs_detlevel_3D_m = gs_detlevel_3D_m
else
	gs_detlevel_3D = stDetail[2]				! Detailed
	if gs_detlevel_3D_m = LOD3D_SIMPLE	then gs_detlevel_3D = stDetail[4]	! Simple
	if gs_detlevel_3D_m = LOD3D_OFF		then gs_detlevel_3D = stDetail[5]	! Off
	parameters gs_detlevel_3D = gs_detlevel_3D
endif

values "gs_detlevel_3D"		stDetail[2],	! Detailed
							stDetail[4],	! Simple
							stDetail[5]		! Off

values "gs_detlevel_3D_m"	LOD3D_DETAILED,
							LOD3D_SIMPLE,
							LOD3D_OFF


if GLOB_MODPAR_NAME = "gs_detlevel_SE" then
	gs_detlevel_SE_m = LODSE_BYMVO												! by MVO
	if gs_detlevel_SE = stDetail[ 1] then gs_detlevel_SE_m = LODSE_SCALE		! Scale Sensitive
	if bMetricScale then
		if gs_detlevel_SE = stDetail[ 6] then gs_detlevel_SE_m = LODSE_20		! 1:20
		if gs_detlevel_SE = stDetail[ 7] then gs_detlevel_SE_m = LODSE_50		! 1:50
		if gs_detlevel_SE = stDetail[ 8] then gs_detlevel_SE_m = LODSE_100		! 1:100
		if gs_detlevel_SE = stDetail[ 9] then gs_detlevel_SE_m = LODSE_200		! 1:200
		if gs_detlevel_SE = stDetail[10] then gs_detlevel_SE_m = LODSE_500		! 1:500
	else
		if gs_detlevel_SE = stDetail[ 2] then gs_detlevel_SE_m = LOD2D_20		! Detailed
		if gs_detlevel_SE = stDetail[ 3] then gs_detlevel_SE_m = LOD2D_50		! Middle
		if gs_detlevel_SE = stDetail[ 4] then gs_detlevel_SE_m = LOD2D_100		! Simple
	endif
	parameters gs_detlevel_SE_m = gs_detlevel_SE_m
else
	gs_detlevel_SE = stDetail[11]												! by MVO
	if gs_detlevel_SE_m = LODSE_SCALE	then gs_detlevel_SE = stDetail[ 1]		! Scale Sensitive
	if bMetricScale then
		if gs_detlevel_SE_m = LODSE_20	then gs_detlevel_SE = stDetail[ 6]		! 1:20
		if gs_detlevel_SE_m = LODSE_50	then gs_detlevel_SE = stDetail[ 7]		! 1:50
		if gs_detlevel_SE_m = LODSE_100	then gs_detlevel_SE = stDetail[ 8]		! 1:100
		if gs_detlevel_SE_m = LODSE_200	then gs_detlevel_SE = stDetail[ 9]		! 1:200
		if gs_detlevel_SE_m = LODSE_500	then gs_detlevel_SE = stDetail[10]		! 1:500
	else
		if gs_detlevel_SE_m = LOD2D_20	then gs_detlevel_SE = stDetail[ 2]		! Detailed
		if gs_detlevel_SE_m = LOD2D_50	then gs_detlevel_SE = stDetail[ 3]		! Middle
		if gs_detlevel_SE_m = LOD2D_100	then gs_detlevel_SE = stDetail[ 4]		! Simple
		if gs_detlevel_SE_m = LOD2D_200	then gs_detlevel_SE = stDetail[ 4]		! Simple
		if gs_detlevel_SE_m = LOD2D_500	then gs_detlevel_SE = stDetail[ 4]		! Simple
	endif
	parameters gs_detlevel_SE = gs_detlevel_SE
endif

if bMetricScale then
	values "gs_detlevel_SE"	stDetail[11],	! by MVO
							stDetail[ 1],	! Scale Sensitive
							stDetail[ 6],	! 1:20
							stDetail[ 7],	! 1:50
							stDetail[ 8],	! 1:100
							stDetail[ 9],	! 1:200
							stDetail[10]	! 1:500

	values "gs_detlevel_SE_m"	LODSE_BYMVO,
								LODSE_SCALE,
								LODSE_20,
								LODSE_50,
								LODSE_100,
								LODSE_200,
								LODSE_500
else
	values "gs_detlevel_SE"	stDetail[11],	! by MVO
							stDetail[ 1],	! Scale Sensitive
							stDetail[ 2],	! Detailed
							stDetail[ 3],	! Middle
							stDetail[ 4]	! Simple

	values "gs_detlevel_SE_m"	LODSE_BYMVO,
								LODSE_SCALE,
								LODSE_20,
								LODSE_50,
								LODSE_100
endif


! ==============================================================================
! Lining
! ==============================================================================

if bEnableLining then
	if not(gs_egde_cover) then
		hideparameter	"gs_edge_cover_thk",
						"gs_edge_cover_fill_type",
						"gs_edge_cover_fill_pen_bg",
						"gs_edge_cover_fill_pen_fg",
						"gs_edge_mat"
		lock "gs_edge_cover_thk",
			"gs_edge_cover_fill_type",
			"gs_edge_cover_fill_pen_bg",
			"gs_edge_cover_fill_pen_fg",
			"gs_edge_mat"
	endif
	values "gs_edge_cover_thk" range[0,]
endif


! ==============================================================================
! Endge Type
! ==============================================================================

if bEnableEdgeTypesUpper | bEnableEdgeTypesLower then
	forceChange = 0

	if abs(ac_roofang) < MIN_ROOF_ANGLE | abs(ac_roofang - 180) < MIN_ROOF_ANGLE then
		if bEnableEdgeTypesUpper then
			values "gs_edge_upper_type" stEdgeTypes[1], stEdgeTypes[2], stEdgeTypes[4]
			values "ac_edge_upper_type" 0, 1, 3
			if gs_edge_upper_type = stEdgeTypes[3] then
				gs_edge_upper_type = stEdgeTypes[2]
				forceChange = 1
			endif
		endif
		if bEnableEdgeTypesLower then
			values "gs_edge_lower_type" stEdgeTypes[1], stEdgeTypes[2], stEdgeTypes[4]
			values "ac_edge_lower_type" 0, 1, 3
			if gs_edge_lower_type = stEdgeTypes[3] then
				gs_edge_lower_type = stEdgeTypes[2]
				forceChange = 1
			endif
		endif
	else
		if abs(ac_roofang - 90) < MIN_ROOF_ANGLE then
			if bEnableEdgeTypesUpper then
				values "gs_edge_upper_type" stEdgeTypes[2], stEdgeTypes[3], stEdgeTypes[4]
				values "ac_edge_upper_type" 1, 2, 3
				if gs_edge_upper_type = stEdgeTypes[1] then
					gs_edge_upper_type = stEdgeTypes[2]
					forceChange = 1
				endif
			endif
			if bEnableEdgeTypesLower then
				values "gs_edge_lower_type" stEdgeTypes[2], stEdgeTypes[3], stEdgeTypes[4]
				values "ac_edge_lower_type" 1, 2, 3
				if gs_edge_lower_type = stEdgeTypes[1] then
					gs_edge_lower_type = stEdgeTypes[2]
					forceChange = 1
				endif
			endif
		else
			if bEnableEdgeTypesUpper then
				values "gs_edge_upper_type" stEdgeTypes
				values "ac_edge_upper_type" 0, 1, 2, 3
			endif
			if bEnableEdgeTypesLower then
				values "gs_edge_lower_type" stEdgeTypes
				values "ac_edge_lower_type" 0, 1, 2, 3
			endif
		endif
	endif

	if bEnableEdgeTypesUpper then
		if forceChange | GLOB_MODPAR_NAME = "gs_edge_upper_type" then
			if gs_edge_upper_type = stEdgeTypes[1] then ac_edge_upper_type = 0
			if gs_edge_upper_type = stEdgeTypes[2] then ac_edge_upper_type = 1
			if gs_edge_upper_type = stEdgeTypes[3] then ac_edge_upper_type = 2
			if gs_edge_upper_type = stEdgeTypes[4] then ac_edge_upper_type = 3
			parameters ac_edge_upper_type = ac_edge_upper_type
		else
			idx = max(1, ac_edge_upper_type + 1)
			if idx > 4 then idx = 1
			gs_edge_upper_type = stEdgeTypes[idx]
			parameters gs_edge_upper_type = gs_edge_upper_type
		endif

		values "ac_edge_upper_angle" range (0, 180)
		if gs_edge_upper_type <> stEdgeTypes[4] then
			hideparameter "ac_edge_upper_angle"
			lock "ac_edge_upper_angle"
		endif
	endif

	if bEnableEdgeTypesLower then
		if forceChange | GLOB_MODPAR_NAME = "gs_edge_lower_type" then
			if gs_edge_lower_type = stEdgeTypes[1] then ac_edge_lower_type = 0
			if gs_edge_lower_type = stEdgeTypes[2] then ac_edge_lower_type = 1
			if gs_edge_lower_type = stEdgeTypes[3] then ac_edge_lower_type = 2
			if gs_edge_lower_type = stEdgeTypes[4] then ac_edge_lower_type = 3
			parameters ac_edge_lower_type = ac_edge_lower_type
		else
			idx = max(1, ac_edge_lower_type + 1)
			if idx > 4 then idx = 1
			gs_edge_lower_type = stEdgeTypes[idx]
			parameters gs_edge_lower_type = gs_edge_lower_type
		endif

		values "ac_edge_lower_angle" range (0, 180)
		if gs_edge_lower_type <> stEdgeTypes[4] then
			hideparameter"ac_edge_lower_angle"
			lock "ac_edge_lower_angle"
		endif
	endif
endif

for i = 1 to nsp
	dum1 = get(1)
next i

! =============================================================================
! UI Support
! =============================================================================

if iSkylightType = DORMER_OX_EYE or iSkylightType = DORMER_PITCHED or iSkylightType = DORMER_SHED then
	put 1, 2, 3
else
	if iSkylightType = SKYLIGHT_PIVOT_HUNG or iSkylightType = SKYLIGHT_TOP_HUNG or iSkylightType = SKYLIGHT_EXAMPLE then
		put 1, 2, 3, 4, 5
	else
		put 1, 2, 3, 4
	endif
endif


values "gs_ui_current_page" get(nsp)


