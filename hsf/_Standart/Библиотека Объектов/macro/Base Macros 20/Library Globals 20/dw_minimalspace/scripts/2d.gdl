
if WIDO_REVEAL_SIDE then
	add2 0,-WIDO_FRAME_THICKNESS
else
	mul2 1,-1
endif

reqBMinSpace = 0
reqMSFillType = 28
reqMSFillPen = 4
reqMSFillBackPen = 19
reqMSContLineType = 25
reqMSContLinePen = 1

!success = LIBRARYGLOBAL ("LibraryGlobals13", "showBMinSpace", reqBMinSpace)
!if success > 0 and reqBMinSpace then

success = LIBRARYGLOBAL ("LibraryGlobals13", "MSFillType", reqMSFillType)
success = LIBRARYGLOBAL ("LibraryGlobals13", "MSFillPen", reqMSFillPen)
success = LIBRARYGLOBAL ("LibraryGlobals13", "MSFillBackPen", reqMSFillBackPen)
success = LIBRARYGLOBAL ("LibraryGlobals13", "MSContLineType", reqMSContLineType)
success = LIBRARYGLOBAL ("LibraryGlobals13", "MSContLinePen", reqMSContLinePen)
line_type reqMSContLineType
pen reqMSContLinePen
fill reqMSFillType

if gs_leaf_optype_m = LEAF_REVOLVING then	!drawing for self
	end  reqBMinSpace, reqMSFillType, reqMSFillPen, reqMSFillBackPen, reqMSContLineType, reqMSContLinePen
endif

!-------------------------------------------
!Conversion
!-------------------------------------------

if not(WIDO_REVEAL_SIDE) exor bOpeningDirection then
	boardMSWidthLeft	= msOppositeSideWidth2
	sillMSWidthLeft		= msOpeningSideWidth2

	boardMSWidthRight	= msOppositeSideWidth1
	sillMSWidthRight	= msOpeningSideWidth1

	boardMSDepth		= ms_oppositeSDepth
	sillMSDepth			= ms_openingSDepth
else
	boardMSWidthLeft	= msOpeningSideWidth2
	sillMSWidthLeft		= msOppositeSideWidth2

	boardMSWidthRight	= msOpeningSideWidth1
	sillMSWidthRight	= msOppositeSideWidth1

	boardMSDepth		= ms_openingSDepth
	sillMSDepth			= ms_oppositeSDepth
endif

bUseAllRevealPointsBoardLeft	= (boardLeftMinReveal < boardMSWidthLeft)
bUseAllRevealPointsBoardRight	= (boardRightMinReveal < boardMSWidthRight)
bUseAllRevealPointsSillLeft		= (sillLeftMinReveal < sillMSWidthLeft)
bUseAllRevealPointsSillRight	= (sillRightMinReveal < sillMSWidthRight)


bLeftSideTShapedOpeningBoard	= (bTShapedOpening & gs_sidelight_left  & gs_sidelight_parapet_hgt_left  > EPS) & (EPS < boardMSWidthLeft)
bRightSideTShapedOpeningBoard	= (bTShapedOpening & gs_sidelight_right & gs_sidelight_parapet_hgt_right > EPS) & (EPS < boardMSWidthRight)
bLeftSideTShapedOpeningSill		= (bTShapedOpening & gs_sidelight_left  & gs_sidelight_parapet_hgt_left  > EPS)	& (EPS < sillMSWidthLeft)
bRightSideTShapedOpeningSill	= (bTShapedOpening & gs_sidelight_right & gs_sidelight_parapet_hgt_right > EPS) & (EPS < sillMSWidthRight)

!-------------------------------------------
!Coordinates
!-------------------------------------------

boardMSWallLeft_x 	= egressOffset - EgressMSWidth - boardMSWidthLeft
boardMSWallRight_x 	= egressOffset + boardMSWidthRight
sillMSWallLeft_x 	= egressOffset - EgressMSWidth - sillMSWidthLeft
sillMSWallRight_x 	= egressOffset  + sillMSWidthRight

egressLeft_x 	= max(egressOffset-EgressMSWidth - ms_leftOffset - gs_sliding_fixpanel_width_left, sillMSWallLeft_x, boardMSWallLeft_x)
egressRight_x 	= min(egressOffset + ms_rightOffset + gs_sliding_fixpanel_width_right, sillMSWallRight_x, boardMSWallRight_x)

if not(bSimplifyMSPoly) then
	sidelightLeft_x 	= max((egressOffset-EgressMSWidth - gs_sidelight_width_left * gs_sidelight_left), boardMSWallLeft_x)
	sidelightRight_x 	= min((egressOffset + gs_sidelight_width_right * gs_sidelight_right), boardMSWallRight_x)
	sidelightLeft_x2 	= max((egressOffset-EgressMSWidth - gs_sidelight_width_left * gs_sidelight_left), sillMSWallLeft_x)
	sidelightRight_x2 	= min((egressOffset + gs_sidelight_width_right * gs_sidelight_right), sillMSWallRight_x)
endif


sillOuter_y = -(ms_sill_depth + sillMSDepth)
boardOuter_y = WALL_THICKNESS - ms_sill_depth + boardMSDepth - (EgressMSWidth/2-egressOffset)* incHor

if not(bSimplifyMSPoly) then
	sillEgressLeft_y 	= - ms_frameOffset
	sillEgressRight_y 	= - ms_frameOffset
	boardEgressLeft_y 	= ms_frame_thkin_left - ms_frameOffset
	boardEgressRight_y 	= ms_frame_thkin_right - ms_frameOffset
else
	sillEgressLeft_y 	= - ms_sill_depth
	sillEgressRight_y 	= - ms_sill_depth
	boardEgressLeft_y	= WALL_THICKNESS - ms_sill_depth +  iInclDir * incHor * (EgressMSWidth-egressOffset)
	boardEgressRight_y	= WALL_THICKNESS - ms_sill_depth -  iInclDir * incHor * (egressOffset)
endif

if bUseAllRevealPointsBoardLeft | bSimplifyMSPoly | bLeftSideTShapedOpeningBoard then
	if curvedWall then
		boardMSWallLeft_y = signWallIsLeft * (abs(WOD) - sqr(radBoard^2 - boardMSWallLeft_x^2))
	else
		boardMSWallLeft_y = WALL_THICKNESS - ms_sill_depth - iInclDir * incHor * (boardMSWidthLeft + EgressMSWidth - egressOffset)
	endif
else
	boardMSWallLeft_y = ms_frame_thk - ms_frameOffset
endif

if bUseAllRevealPointsBoardRight | bSimplifyMSPoly | bRightSideTShapedOpeningBoard then
	if curvedWall then
		boardMSWallRight_y = signWallIsLeft * (abs(WOD) - sqr(radBoard^2 - boardMSWallRight_x^2))
	else
		boardMSWallRight_y = WALL_THICKNESS - ms_sill_depth + iInclDir * incHor * (boardMSWidthRight + egressOffset)
	endif
else
	boardMSWallRight_y = ms_frame_thk - ms_frameOffset
endif

if bUseAllRevealPointsSillLeft | bSimplifyMSPoly | bLeftSideTShapedOpeningSill then
	if curvedWall then
		sillMSWallLeft_y = signWallIsLeft * (abs(WOD) - sqr(radSill^2 - sillMSWallLeft_x^2))
	else
		sillMSWallLeft_y = -ms_sill_depth
	endif
else
	sillMSWallLeft_y = -ms_frameOffset
endif

if bUseAllRevealPointsSillRight | bSimplifyMSPoly | bRightSideTShapedOpeningSill then
	if curvedWall then
		sillMSWallRight_y = signWallIsLeft * (abs(WOD) - sqr(radSill^2 - sillMSWallRight_x^2))
	else
		sillMSWallRight_y = -ms_sill_depth
	endif
else
	sillMSWallRight_y = -ms_frameOffset
endif


!-------------------------------------------
!Putting the polygon together
!-------------------------------------------

if curvedWall then put 0,WOD,900

if not(bTelescopic) then
	if sillMSDepth > EPS then
		if not(gs_sectgar) and not(gs_highspeedgar) then put egressLeft_x, sillEgressLeft_y, 0
		if bLeftSideTShapedOpeningSill then
			px = -ac_wallhole_width/2 + gs_sidelight_WHole_width_left + gs_reveal_left_sL + thkPlasterAtSillSlLeft
			if curvedWall then
				py = signWallIsLeft * (abs(WOD) - sqr(radSill^2 - px^2))
			else
				py = -ms_sill_depth
			endif
			put px, sillEgressLeft_y, 0,
				px, py, 0
		endif

		if not(bSimplifyMSPoly) then
			if gs_sidelight_left & not(bLeftSideTShapedOpeningSill) then
				put sidelightLeft_x2, sillEgressLeft_y, 0
			endif
			if bCornerFrameCHE then
				if gs_sidelight_left then
					put sidelightLeft_x2, sillMSWallLeft_y, 0
				else
					put egressLeft_x, sillMSWallLeft_y, 0
				endif
			endif
		endif

		if bUseAllRevealPointsSillLeft then
			if not(bLeftSideTShapedOpeningSill) then gosub "revealSillSideLeft"
		endif

		put sillMSWallLeft_x, sillMSWallLeft_y,		1+3000 * curvedWall * bUseAllRevealPointsSillLeft,
			sillMSWallLeft_x, sillOuter_y, 		1,
			sillMSWallRight_x, sillOuter_y, 		1,
			sillMSWallRight_x, sillMSWallRight_y,		0

		if bUseAllRevealPointsSillRight then
			if not(bRightSideTShapedOpeningSill) then gosub "revealSillSideRight"
		endif

		if not(bSimplifyMSPoly) then
			if bCornerFrameCHE then
				if gs_sidelight_right then
					put sidelightRight_x2, sillMSWallRight_y, 0
				else
					put egressRight_x, sillMSWallRight_y, 0
				endif
			endif
			if gs_sidelight_right & not(bRightSideTShapedOpeningSill) then
				put	sidelightRight_x2, sillEgressRight_y, 0
			endif
		endif

		if bRightSideTShapedOpeningSill then
			px = ac_wallhole_width/2 - gs_sidelight_WHole_width_right - gs_reveal_right_sR - thkPlasterAtSillSlRight
			if curvedWall then
				py = signWallIsLeft * (abs(WOD) - sqr(radSill^2 - px^2))
			else
				py = -ms_sill_depth
			endif
			put px, py, 3000 * curvedWall,
				px, sillEgressRight_y, 0
		endif
		if not(gs_sectgar) and not(gs_highspeedgar) then put egressRight_x, sillEgressRight_y, 0

		hotspot2 sillMSWallLeft_x, 	sillOuter_y, unID : unID = unID +1
		hotspot2 sillMSWallRight_x, sillOuter_y, unID : unID = unID +1
	endif

	if boardMSDepth > EPS then
		if not(gs_sectgar) and not(gs_highspeedgar) then put egressRight_x, boardEgressRight_y, gs_sidelight_right*bSidelightWithoutContour
		if bRightSideTShapedOpeningBoard then
			px = ac_wallhole_width/2 - gs_sidelight_WHole_width_right - gs_reveal_double_innerRight_sR - thkPlasterAtBoardSlRight
			if curvedWall then
				py = signWallIsLeft * (abs(WOD) - sqr(radBoard^2 - px^2))
			else
				py = boardMSWallRight_y  - iInclDir * incHor * (boardMSWallRight_x-px)
			endif
			put px, sillEgressRight_y+gs_frame_thk, 0,
				px, py, 0
		endif

		if not(bSimplifyMSPoly) then
			if gs_sidelight_right & not(bRightSideTShapedOpeningBoard) then
				contourFlagRight = 0
				if boardRightMinReveal > boardMSWidthRight then
					contourFlagRight = 1
				endif
				put sidelightRight_x, boardEgressRight_y, contourFlagRight
			endif

			if gs_frame_wthk or bDiffFrameThk then
				if gs_sidelight_right then
					put sidelightRight_x, boardMSWallRight_y, 0
				else
					put egressRight_x, boardMSWallRight_y, 0
				endif
			endif
		endif

		if bUseAllRevealPointsBoardRight then
			if not(bRightSideTShapedOpeningBoard) then gosub "revealBoardSideRight"
		endif

		put boardMSWallRight_x, boardMSWallRight_y, 1+3000 * curvedWall * bUseAllRevealPointsBoardRight,
			boardMSWallRight_x, boardOuter_y, 1,
			boardMSWallLeft_x, boardOuter_y, 1,
			boardMSWallLeft_x, boardMSWallLeft_y, 0

		if bUseAllRevealPointsBoardLeft then
			if not(bLeftSideTShapedOpeningBoard) then gosub "revealBoardSideLeft"
		endif

		if not(bSimplifyMSPoly) then
			if gs_frame_wthk or bDiffFrameThk then
				if gs_sidelight_left then
					contourFlagLeft = 0
					if boardLeftMinReveal > boardMSWidthLeft then
						contourFlagLeft = 1
					endif
					put sidelightLeft_x, boardMSWallLeft_y, contourFlagLeft
				else
					put egressLeft_x, boardMSWallLeft_y, 0
				endif
			endif
			if gs_sidelight_left & not(bLeftSideTShapedOpeningBoard) then
				put sidelightLeft_x, boardEgressLeft_y, gs_sidelight_left*bSidelightWithoutContour
			endif
		endif

		if bLeftSideTShapedOpeningBoard then
			px = -ac_wallhole_width/2 + gs_sidelight_WHole_width_left + gs_reveal_double_innerLeft_sL + thkPlasterAtBoardSlLeft
			if curvedWall then
				py = signWallIsLeft * (abs(WOD) - sqr(radBoard^2 - px^2))
			else
				py = boardMSWallLeft_y  - iInclDir * incHor * (boardMSWallLeft_x-px)
			endif
			put px, py, 3000 * curvedWall,
				px, sillEgressRight_y+gs_frame_thk, 0
		endif
		if not(gs_sectgar) and not(gs_highspeedgar) then put egressLeft_x, boardEgressLeft_y, 0

		hotspot2 boardMSWallLeft_x, 	boardOuter_y, unID : unID = unID +1
		hotspot2 boardMSWallRight_x, 	boardOuter_y, unID : unID = unID +1
	endif
else		! Telescopic Doors
	put EgressMSWidth / 2, 0, 0,
		EgressMSWidth / 2, boardEgressLeft_y, 0,
		boardMSWallRight_x, boardMSWallRight_y, 1,
		boardMSWallRight_x, boardOuter_y, 1,
		boardMSWallLeft_x, boardOuter_y, 1,
		boardMSWallLeft_x, boardMSWallLeft_y, 0,
		-EgressMSWidth / 2, boardEgressRight_y, 0,
		-EgressMSWidth / 2, 0, 0,
		sillMSWallLeft_x, 0, 1,
		sillMSWallLeft_x, sillOuter_y, 1,
		sillMSWallRight_x, sillOuter_y, 1,
		sillMSWallRight_x, 0, 0

	if ms_oppositeSDepth > EPS then
		hotspot2 boardMSWallLeft_x, 	boardOuter_y, unID : unID = unID +1
		hotspot2 boardMSWallRight_x,	boardOuter_y, unID : unID = unID +1
	endif
	if ms_openingSDepth > EPS then
		hotspot2 sillMSWallRight_x, 	sillOuter_y, unID : unID = unID +1
		hotspot2 sillMSWallLeft_x,		sillOuter_y, unID : unID = unID +1
	endif
endif

if NSP then

	! Ignore point if location of previous point is same and change contour bit if it is needed
!!!	define style "text01" "arial", 0.3, 5, 0
!!!	set style "text01"
!!!	line_type 1

	_num = nsp/3

	dim temp_coord[][]
	dim filtered_coord[][]
	for i = 1 to _num
		temp_coord[i][1] = get(1)
		temp_coord[i][2] = get(1)
		temp_coord[i][3] = get(1)

!!!		text2 temp_coord[i][1], temp_coord[i][2], i
!!!		circle2 temp_coord[i][1], temp_coord[i][2], 0.01
	next i

	j = 0
	for i = 1 to _num
		if i > 1 then
			if not((abs(temp_coord[i-1][1] - temp_coord[i][1]) < EPS) & (abs(temp_coord[i-1][2] - temp_coord[i][2]) < EPS)) then
				j = j + 1
				filtered_coord[j][1] = temp_coord[i][1]
				filtered_coord[j][2] = temp_coord[i][2]
				filtered_coord[j][3] = temp_coord[i][3]
			else
				iPrevoiusFlag	= filtered_coord[j][3]
				iCurrentFlag	= temp_coord[i][3]

				if (iPrevoiusFlag <> iCurrentFlag) then
					iPrevoiusContourBit	= bittest (iPrevoiusFlag, 0)
					iCurrentContourBit	= bittest (iCurrentFlag, 0)

					if (iPrevoiusContourBit <> iCurrentContourBit) then
						filtered_coord[j][3] = iPrevoiusFlag - iPrevoiusContourBit + iCurrentContourBit
					endif
				endif
			endif
		else
			j = j + 1
			filtered_coord[j][1] = temp_coord[i][1]
			filtered_coord[j][2] = temp_coord[i][2]
			filtered_coord[j][3] = temp_coord[i][3]
		endif
	next i

	for i = 1 to j
		put filtered_coord[i][1]
		put filtered_coord[i][2]
		put filtered_coord[i][3]

!!!		text2 filtered_coord[i][1], filtered_coord[i][2], i
!!!		circle2 filtered_coord[i][1], filtered_coord[i][2], 0.01
	next i

	if nsp > 8 then
		poly2_b NSP/3, 1+2+4,reqMSFillPen,reqMSFillBackPen,
				get(NSP)
	else
		for i = 1 to nsp
			temp_param = get(1)
		next i
	endif
endif
del 1


1000:
end  reqBMinSpace, reqMSFillType, reqMSFillPen, reqMSFillBackPen, reqMSContLineType, reqMSContLinePen


"revealBoardSideLeft":
	curveFlag = 3000 * curvedWall * bUseAllRevealPointsBoardLeft
	for i=idxBoardEndPlasterLeft to idxBoardStartPlasterLeft step -1
		put leftRevealPnts[i][1],	leftRevealPnts[i][2], curveFlag
		curveFlag = 0
		if bSimplifyMSPoly then i = idxBoardStartPlasterLeft
	next i
return

"revealSillSideLeft":
	for i = idxSillEndPlasterLeft to idxSillStartPlasterLeft step -1
		if bSimplifyMSPoly then i = idxSillStartPlasterLeft
		put leftRevealPnts[i][1], leftRevealPnts[i][2], 0
	next i
return

"revealBoardSideRight":
	for i=idxBoardStartPlasterRight to idxBoardEndPlasterRight
		if bSimplifyMSPoly then i = idxBoardEndPlasterRight
		put rightRevealPnts[i][1],	rightRevealPnts[i][2], 0
	next i
return

"revealSillSideRight":
	curveFlag = 3000 * curvedWall * bUseAllRevealPointsSillRight
	for i = idxSillStartPlasterRight to idxSillEndPlasterRight
		put rightRevealPnts[i][1], rightRevealPnts[i][2], curveFlag
		curveFlag = 0
		if bSimplifyMSPoly then i = idxSillEndPlasterRight
	next i
return
