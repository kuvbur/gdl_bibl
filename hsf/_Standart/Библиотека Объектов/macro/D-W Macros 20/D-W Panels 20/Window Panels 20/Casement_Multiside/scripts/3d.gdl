

! ==============================================================================
! Simple Detail Level
! ==============================================================================

if	gs_optype_m = SASH_FIXED |\
	gs_optype_m = SASH_HOR_PIVOT |\
	gs_optype_m = SASH_VER_PIVOT |\
	gs_optype_m = SASH_VER_PIVOT_M |\
	gs_optype_m = SASH_SLIDING_HOR |\
	gs_optype_m = SASH_SLIDING_HOR_M |\
	gs_optype_m = SASH_DOUBLE_SLIDING_HOR |\
	gs_optype_m = SASH_DOUBLE_SLIDING_HOR_M |\
	gs_optype_m = SASH_SLIDING_VER |\
	gs_optype_m = SASH_DOUBLE_SLIDING_VER then

	if lod3D = 1 | lod3D = 5 | gs_optype_m = SASH_FIXED then
		addy gs_rebate_width
		A = A - 2*gs_rebate_width
		B = B - 2*gs_rebate_width
		if iMullionStyle = MULLION_SOLID_PANEL then
			addz -gs_frame_thk
		endif
	else
		if	gs_optype_m = SASH_HOR_PIVOT |\
			gs_optype_m = SASH_VER_PIVOT |\
			gs_optype_m = SASH_VER_PIVOT_M then
			addz -gs_sash_thk
		else
			addz -gs_frame_thk
		endif
	endif
else
	if lod3D <> 1 & lod3D <> 5 then
		addz -gs_rebate_depth
	endif
endif

if lod3D = 1 | lod3D = 5 then
	vgn = 0
	hgn = 0

	if iMullionStyle = MULLION_CUSTOM then
		iMullionStyle = MULLION_NONE
	endif

	gs_full_edit = 0
endif


gs_sash_width = gs_sash_width * (gs_optype_m <> SASH_FIXED)

if abs(multiside_unID)<EPS then
	unID = 0
else
	unID = multiside_unID
endif

if GLOB_CONTEXT = 6 then	! Window Schedule - 3D view should NOT display sash in open position
	openingAngle_01 = 0
endif

yy=(gs_sash_width + frame_toler)/cos(bszog/2)
kr=r-yy

resol n
if bRound then				! W Round Fix/Piv
	msk=64
	noh=0
	koh=0
else
	msk=0
	noh=2*(r)*sin(bszog/2)
	koh=2*(kr)*sin(bszog/2)
endif


! =============================================================================
! Open the Window
! =============================================================================

if gs_full_edit then
	if gs_optype_m = SASH_VER_PIVOT then	!fenti-tengely
		addy b/2
		rotx	-90
		addy gs_sash_thk/2

		if bEnableSEOpening then
			hotspot gs_sash_thk*sin(135)+a/2*sin(90), gs_sash_thk*cos(135)+a/2*cos(90), (0), unID, openingAngle_01, 4+128 : unID=unID+1
			hotspot gs_sash_thk*sin(90)+a/2*sin(0), gs_sash_thk*cos(90)+a/2*cos(0), 0, unID, openingAngle_01, 7 : unID=unID+1
			hotspot gs_sash_thk*sin(180+openingAngle_01)+a/2*sin(90+openingAngle_01), gs_sash_thk*cos(180+openingAngle_01)+a/2*cos(90+openingAngle_01), (0), unID, openingAngle_01, 5 : unID=unID+1
			hotspot 0, -gs_sash_thk, (0), unID, openingAngle_01, 6 : unID=unID+1
		endif

		del 2

		if abs(openingAngle_01)>EPS then
			addz gs_sash_thk/2
			roty -openingAngle_01
			addz -(gs_sash_thk/2)
		endif
		addy -b/2
	endif
endif

addy mag
rotz crot


! =============================================================================
! Handling Inner-outer Sash
! =============================================================================

if gs_frame_mat = gs_frame_mat2 then				! One body, in case of similar materials
	in_out_cikl = 1

	gs_frame_mat2 = gs_frame_mat

	out_thk = 0
	part_thk = gs_sash_thk

	in_out_mask = 15
else												! two bodies
	in_out_cikl = 2

	! Inner-outer Material Control
	if bOpeningDirectionInside then
		temp_frame_mat	= gs_frame_mat
		gs_frame_mat	= gs_frame_mat2
		gs_frame_mat2	= temp_frame_mat
	endif

	out_thk = gs_sash_thk/2-gs_glass_thk/2
	part_thk = out_thk

	in_out_mask = 11
endif
var_mater = gs_frame_mat
var_mater2 = gs_frame_mat2


! =============================================================================
! 3D Window Model
! =============================================================================

sect_fill gs_fillSash, gs_penSash_bg, gs_pensash_fg, gs_frame_pen_cont


! =============================================================================
! Frame
! =============================================================================

if bRound then				! W Round
	yz=gs_sash_width
else
	yz=gs_sash_width + frame_toler
endif

if ((iMullionStyle <> MULLION_CUSTOM & iMullionStyle <> MULLION_SOLID_PANEL) | abs(gs_glass_thk) < EPS) & (lod3D = 2) & (gs_optype_m <> SASH_FIXED) then

	pen gs_frame_pen
	material gs_frame_mat

	for ijk = 1 to in_out_cikl
		material var_mater

		sprism_{2} var_mater2,var_mater,var_mater2,
			10,
			0,0, 0,1, 0, 0,
			0,0, 0,1, part_thk, 0,
			noh/2,-mag, 	in_out_mask+msk,		var_mater2,
			0,0, 			900+in_out_mask+msk,	var_mater2,
			0,360-bszog, 	4000+in_out_mask+msk,	var_mater2,
			-noh/2,-mag, 	in_out_mask+msk,		var_mater2,
			 noh/2,-mag, 	-1,						var_mater2,

			koh/2,yz-mag, 	in_out_mask+msk,		var_mater,
			0,0, 			900+in_out_mask+msk,	var_mater,
			0,360-bszog, 	4000+in_out_mask+msk,	var_mater,
			-koh/2,yz-mag, 	in_out_mask+msk,		var_mater,
			 koh/2,yz-mag, 	-1,						var_mater

		addz part_thk
		part_thk= gs_sash_thk-out_thk

		var_mater = gs_frame_mat2
		var_mater2 = gs_frame_mat2

		in_out_mask = 14

	next ijk
	del in_out_cikl
endif


! =============================================================================
! Grill
! =============================================================================

if iMullionStyle <> MULLION_CUSTOM & iMullionStyle <> MULLION_SOLID_PANEL then

	if bRound then
		width = a - 2 * gs_sash_width
		height = b - 2 * gs_sash_width
	else
		xmax = 0
		xmin = 0
		ymax = 0
		ymin = 0
		beta = -bszog/2

		for i = 1 to n
			xcur = (r - gs_sash_width/sin(kszog))*sin(beta)
			xmax = max(xmax, xcur)
			xmin = min(xmin, xcur)

			ycur = -(r - gs_sash_width/sin(kszog))*cos(beta)
			ymax = max(ymax, ycur)
			ymin = min(ymin, ycur)

			beta = beta + bszog
		next i
		width = xmax - xmin
		height = ymax - ymin
	endif

	pen gs_sash_pen

	if iMullionStyle <> MULLION_NONE then

		!!! ________________Handling Inner-outer Grill_____________________
		if gs_grill_mat = gs_grill_mat2 then				! One body, in case of similar materials
			in_out_cikl_gr = 1

			var_mater_grill = gs_grill_mat
			var_mater2_grill = gs_grill_mat

			part_thk_grill = gth
			out_thk_grill = 0
		else
			!!! Inner-outer Material Control-----------
			temp_grill_mat = gs_grill_mat
			temp_grill_mat2 = gs_grill_mat2
			if not(bOpeningDirectionInside) then
				gs_grill_mat=temp_grill_mat
				gs_grill_mat2=temp_grill_mat2
			else
				gs_grill_mat=temp_grill_mat2
				gs_grill_mat2=temp_grill_mat
			endif
			!!!----------------------------------------

			var_mater_grill = gs_grill_mat
			var_mater2_grill = gs_grill_mat2

			if iMullionPosition = MULLION_INSIDE or iMullionPosition = MULLION_OUTSIDE or (iMullionPosition = MULLION_THROUGHOUT and gs_glass_thk>=gth ) then		!!Inside, Outside position
				in_out_cikl_gr = 1
				out_thk_grill = gth
				part_thk_grill = out_thk_grill
			else									!!Throughout position
				in_out_cikl_gr = 2
				out_thk_grill = gth/2 - gs_glass_thk/2
				part_thk_grill = out_thk_grill
			endif
		endif

		if iMullionPosition = MULLION_INSIDE then
			side_mat = var_mater2_grill
		else
			side_mat = var_mater_grill
		endif


		material gs_grill_mat

		group "grillhrz"

			gspac = (width + gw)/(vgn+1)
			diam = width + gw
			for ijk = 1 to in_out_cikl_gr
				addy -mag
				for cnt=1 to vgn
					if gw > EPS then
						sprism_ var_mater2_grill,var_mater_grill,side_mat,
							5,
							0,0, 0,1, part_thk_grill, 0,
							-diam/2+cnt*gspac-gw/2, 0,		15,
							-diam/2+cnt*gspac+gw/2, 0,		15,
							-diam/2+cnt*gspac+gw/2, r*2,	15,
							-diam/2+cnt*gspac-gw/2, r*2,	15,
							-diam/2+cnt*gspac-gw/2, 0,		15
					else
						lin_ -diam/2+cnt*gspac, 0, 0, -diam/2+cnt*gspac, r*2, 0
					endif
				next cnt

				del 1

				addz part_thk_grill

				part_thk_grill = gth - out_thk_grill

				var_mater_grill = gs_grill_mat2
				var_mater2_grill = gs_grill_mat2
				side_mat = gs_grill_mat2

			next ijk
			del in_out_cikl_gr
		endgroup


		!!! ________________Handling Inner-outer Grill_____________________
		if gs_grill_mat = gs_grill_mat2 then				! One body, in case of similar materials
			var_mater_grill = gs_grill_mat
			var_mater2_grill = gs_grill_mat

			part_thk_grill = gth
		else
			var_mater_grill = gs_grill_mat
			var_mater2_grill = gs_grill_mat2

			if iMullionPosition = MULLION_INSIDE or iMullionPosition = MULLION_OUTSIDE or (iMullionPosition = MULLION_THROUGHOUT and gs_glass_thk>=gth ) then		!!Inside, Outside position
				out_thk_grill = gth
				part_thk_grill = out_thk_grill
			else									!!Throughout position
				out_thk_grill = gth/2 - gs_glass_thk/2
				part_thk_grill = out_thk_grill
			endif
		endif


		if iMullionPosition = MULLION_INSIDE then
			side_mat = var_mater2_grill
		else
			side_mat = var_mater_grill
		endif


		group "grillvrt"

			gspac = (height + gw)/(hgn+1)
			for ijk= 1 to in_out_cikl_gr
				for cnt=1 to hgn
					if gw > EPS then
						sprism_ var_mater2_grill,var_mater_grill,side_mat,
							5,
							0,0, 0,1, part_thk_grill, 0,
							-r,gs_sash_width-gw/2+cnt*gspac-gw/2-mag,	15,
							-r,gs_sash_width-gw/2+cnt*gspac+gw/2-mag,	15,
							 r,gs_sash_width-gw/2+cnt*gspac+gw/2-mag,	15,
							 r,gs_sash_width-gw/2+cnt*gspac-gw/2-mag,	15,
							-r,gs_sash_width-gw/2+cnt*gspac-gw/2-mag,	15
					else
						lin_ -r,gs_sash_width-gw/2+cnt*gspac-mag, 0, r,gs_sash_width-gw/2+cnt*gspac-mag, 0
					endif
				next cnt

				addz part_thk_grill

				part_thk_grill = gth - out_thk_grill

				var_mater_grill = gs_grill_mat2
				var_mater2_grill = gs_grill_mat2
				side_mat = gs_grill_mat2

			next ijk
			del in_out_cikl_gr
		endgroup

	endif


	group "cutgr"

		nnoh=6*r*sin(bszog/2)
		mmag=cos(bszog/2)*3*r

		addz -5*gs_sash_thk
		prism_ 10, 10*gs_sash_thk,
			nnoh/2,-mmag, 15+msk,
			0,0, 915+msk,
			0,360-bszog, 4015+msk,
			-nnoh/2,-mmag, 15+msk,
			nnoh/2,-mmag, -1,

			koh/2,yz-mag, 15+msk,
			0,0, 915+msk,
			0,360-bszog, 4015+msk,
			-koh/2,yz-mag, 15+msk,
			koh/2,yz-mag, -1
		del 1

	endgroup

	if iMullionPosition = MULLION_THROUGHOUT then
		gz = (gs_optype_m <> SASH_FIXED) * gs_sash_thk/2 - gth/2
	else
		if (iMullionPosition = MULLION_INSIDE) exor not(bOpeningDirectionInside) then
			gz = (gs_optype_m <> SASH_FIXED) * gs_sash_thk/2 + gs_glass_thk/2
		else
			gz = (gs_optype_m <> SASH_FIXED) * gs_sash_thk/2 - gs_glass_thk/2 - gth
		endif
	endif
	gz = gz - (gs_optype_m = SASH_FIXED) * gs_rebate_depth

	if iMullionStyle <> MULLION_NONE then
		addz gz
		if vgn<>0 and hgn<>0 then placegroup(subgroup(addgroup("grillhrz","grillvrt"),"cutgr"))
		if hgn=0 and vgn <>0 then placegroup(subgroup("grillhrz","cutgr"))
		if vgn=0 and hgn <>0 then placegroup(subgroup("grillvrt","cutgr"))

		killgroup "grillvrt"
		killgroup "grillhrz"
		del 1
	endif

	killgroup "cutgr"

	if iMullionStyle <> MULLION_NONE then
		del 1
	endif


! =============================================================================
! Glazing
! =============================================================================

	if abs(gs_glass_thk)>EPS then
		pen gs_glass_pen
		material gs_glass_mat

		if gs_optype_m <> SASH_FIXED then
			if lod3D = 5 then	! Chinese
				addz -gs_frame_thk
				gl_chi_thk = gs_frame_thk
				gl_chi_mask = 13
			else
				if lod3D = 1 then	! Simple
					addz -gs_frame_thk/2 - gs_glass_thk/2
				else
					addz gs_sash_thk/2-gs_glass_thk/2
				endif
				gl_chi_thk = gs_glass_thk
				gl_chi_mask = 5
			endif
		else
			if lod3D = 5 then	! Chinese
				addz -gs_frame_thk
				gl_chi_thk = gs_frame_thk
				gl_chi_mask = 13
			else
				if lod3D = 1 then	! Simple
					addz -gs_frame_thk/2 - gs_glass_thk/2
				else
					addz -gs_rebate_depth - gs_glass_thk/2
				endif
				gl_chi_thk = gs_glass_thk
				gl_chi_mask = 5
			endif
		endif

		body -1

		prism_ 5, gl_chi_thk,
			koh/2,yz-mag, gl_chi_mask,
			0,0, 900+gl_chi_mask,
			0,360-bszog, 4000+gl_chi_mask,
			-koh/2,yz-mag, gl_chi_mask,
			 koh/2,yz-mag, gl_chi_mask

		base
		vert 0, 0, 0
		vert 1, 0, 0
		vert 0, 1, 0
		vert 0, 0, 1
		coor 2,-1, -2,-3, -4
		body 1

		del 1
	endif
endif


! ==============================================================================
! Opening Line
! ==============================================================================

if bOplines3d & (gs_optype_m <> SASH_FIXED) then
	oplineGap = 0

	if lod3D = 5 then
		opLineDist = gs_frame_thk + 2 * oplineGap
		frameWidth = gs_sash_width
	else
		if lod3D = 1 then
			opLineDist = gs_glass_thk + 2 * oplineGap
			frameWidth = gs_sash_width
		else
			opLineDist = gs_sash_thk + 2 * oplineGap
			frameWidth = 0
		endif
	endif

	if (lod3D = 1 | lod3D = 5) then	! Simple, Chinese
		addz -gs_frame_thk/2
	else
		addz gs_sash_thk/2
	endif

	if n mod 2 <> 0 then
		alpha_rotation = 180 / n

		innerRad = (a/2) / cos(alpha_rotation/2) - (frameWidth) / cos(alpha_rotation)

		OpLineWidth = 0
		OpLineHeight = 0
		x11 = 0
		y11 = -b
		x12 = 0
		y12 = b
		!lin_ x11,y11,0.1,x12,y12,0.1

		for i = 1 to n
			x21 =  innerRad * sin (alpha_rotation + (i-1) * (360 / n))
			y21 = -innerRad * cos (alpha_rotation + (i-1) * (360 / n))
			x22 =  innerRad * sin (alpha_rotation + (i) * (360 / n))
			y22 = -innerRad * cos (alpha_rotation + (i) * (360 / n))
			!lin_ x21,y21,0.1,x22,y22,0.1

			if (x21 < EPS & x22 > EPS) | (x22 < EPS & x21 > EPS) then
				gosub 100		! Segment - Segment sections

				if state then OpLineHeight = OpLineHeight + abs(cy)
				lastcy = cy
			endif
		next i
		yOpLineOffset = (OpLineHeight - 2*abs(lastcy)) / 2


		x11 = -a
		y11 = yOpLineOffset
		x12 = a
		y12 = yOpLineOffset
		!lin_ x11,y11,0.1,x12,y12,0.1


		for i = 1 to n
			x21 =  innerRad * sin (alpha_rotation + (i-1) * (360 / n))
			y21 = -innerRad * cos (alpha_rotation + (i-1) * (360 / n))
			x22 =  innerRad * sin (alpha_rotation + (i) * (360 / n))
			y22 = -innerRad * cos (alpha_rotation + (i) * (360 / n))
			!lin_ x21,y21,0.1,x22,y22,0.1

			if (y21 < yOpLineOffset & y22 > yOpLineOffset) | (y22 < yOpLineOffset & y21 > yOpLineOffset) then
				gosub 100		! Segment - Segment sections

				if state then OpLineWidth = OpLineWidth + abs(cx)
			endif
		next i
	else
		OpLineWidth = a - 2 * frameWidth
		OpLineHeight = b - 2 * frameWidth
		yOpLineOffset = 0
	endif

	add -OpLineWidth/2, -OpLineHeight/2 + yOpLineOffset, - opLineDist/2
	call "OpeningLines" parameters a = OpLineWidth,
				b					= OpLineHeight,
				frameThickness		= opLineDist,
				iOpeningType		= gs_optype_m,
				opLineType3dIn		= opLineType3dIn,
				opLineType3dOut		= opLineType3dOut,
				gs_opLinePen		= gs_opLinePen,
				gs_opline_style_m	= gs_opline_style_m
	del 2
endif


! =============================================================================
! Solid Panel
! =============================================================================

if iMullionStyle = MULLION_SOLID_PANEL then

		sprism_{2} gs_panel_mat2, gs_panel_mat,gs_panel_mat,
			5,
			0,0, 0,1, 0, 0,
			0,0, 0,1, gs_sash_thk, 0,
			noh/2,-mag, 	in_out_mask+msk,		gs_panel_mat2,
			0,0, 			900+in_out_mask+msk,	gs_panel_mat2,
			0,360-bszog, 	4000+in_out_mask+msk,	gs_panel_mat2,
			-noh/2,-mag, 	in_out_mask+msk,		gs_panel_mat2,
			 noh/2,-mag, 	-1,						gs_panel_mat2

endif


! =============================================================================
! Custom Panel
! =============================================================================

if iMullionStyle = MULLION_CUSTOM & gs_cust_panel <> "" then
	if bRound then
		bszog = 360/n
		r = A/2
		beta = 0
	else
		beta = -bszog/2
	endif

	rotx 90
	for i=1 to n
		add r*sin(beta), 0, r*cos(beta)
		roty beta + bszog/2
		cutplane
		del 2
		beta = beta + bszog
	next i
	del 1

	if gs_optype_m = SASH_FIXED then
		addz -gs_rebate_depth - gs_glass_thk/2
		panelThk = gs_glass_thk
	else
		panelThk = gs_sash_thk
	endif

	add -A/2, -B/2, 0
	call "Window_Panel_Collection" parameters a=a, b=b, zzyzx=panelThk, gs_ptype=gs_cust_panel
	del 1

	if gs_optype_m = SASH_FIXED then del 1

	for i=1 to n
		cutend
	next i
endif


multiside_unID = unID

end multiside_unID




! ==============================================================================
! Line - Line intersection
! ------------------------------------------------------------------------------
! Input variables:
!	EPS:				epsylon
!	x11,y11, x12,y12	line #1
!	x21,y21, x22,y22	line #2
!
! Returned variables:
!	state:				0 = no intersection point
!						1 = valid intersection point
!	cx, cy:				intersection point
! ==============================================================================

100:
	lliDiv = (x11-x12) * (y21-y22) - (y11-y12) * (x21-x22)

	if abs(lliDiv) > EPS then
		! Intersection

		temp1 = x11 * y12 - y11 * x12
		temp2 = x21 * y22 - y21 * x22

		tempx = temp1 * (x21-x22) - (x11-x12) * temp2
		tempy = temp1 * (y21-y22) - (y11-y12) * temp2

		state = 1
		cx = (tempx / lliDiv)
		cy = (tempy / lliDiv)
	else
		! No Intersection
		state = 0
		cx = 0
		cy = 0
	endif
return
