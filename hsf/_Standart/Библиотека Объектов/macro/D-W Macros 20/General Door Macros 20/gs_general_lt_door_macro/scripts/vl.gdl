
! =============================================================================
!
! =============================================================================

leafNum					= 0
bSlidingOptypeChanged	= 0
if	gs_leaf_optype_m = LEAF_2L_1SLIDING |\
	gs_leaf_optype_m = LEAF_2L_1SLIDING_M |\
	gs_leaf_optype_m = LEAF_2L_2SLIDING |\
	gs_leaf_optype_m = LEAF_2L_2SLIDING_M then leafNum = 2
if	gs_leaf_optype_m = LEAF_3L_2SLIDING |\
	gs_leaf_optype_m = LEAF_3L_2SLIDING_M |\
	gs_leaf_optype_m = LEAF_3L_2SLIDING_CENTER then leafNum = 3
if	gs_leaf_optype_m = LEAF_4L_2SLIDING |\
	gs_leaf_optype_m = LEAF_4L_3SLIDING |\
	gs_leaf_optype_m = LEAF_4L_3SLIDING_M |\
	gs_leaf_optype_m = LEAF_4L_4SLIDING |\
	gs_leaf_optype_m = LEAF_4L_4SLIDING_M then leafNum = 4

if	bSlidingUIalternative then
	if 	(gs_leaf_optype_m = LEAF_2L_2SLIDING |\
	 	gs_leaf_optype_m = LEAF_4L_4SLIDING ) then 
			if gs_leaf_optype_m = LEAF_2L_2SLIDING then i = 1
			if gs_leaf_optype_m = LEAF_4L_4SLIDING then i = 3

			values{2} "gs_openleaf_set_to_edit", 1, stOpenLeaf[i],
												 2, stOpenLeaf[i + 1]
	else
			values{2} "gs_openleaf_set_to_edit", 1, stOpenLeaf[1]
	endif
endif

TotalLeafWidthin3D = ac_unit_width - gs_sidelight_width_right * gs_sidelight_right - gs_sidelight_width_left * gs_sidelight_left - \
				gs_frame_width_right * not(gs_sidelight_right) - gs_frame_width_left * not(gs_sidelight_left) + 2 * gs_rebate_width

if GLOB_MODPAR_NAME = "gs_leaf_optype" | GLOB_MODPAR_NAME = "gs_leaf_optype_m" then
	if leafNum > 0 then
		bSlidingOptypeChanged	= 1

		gs_leaf_panel_width_new = gs_leaf_panel_width * leafNum
		if abs(gs_leaf_panel_width - gs_leaf_panel_width_new) > EPS then
			ac_unit_width = gs_leaf_panel_width * leafNum \
				+ gs_sidelight_width_right * gs_sidelight_right \
				+ gs_sidelight_width_left  * gs_sidelight_left \
				+ gs_frame_width_right * not(gs_sidelight_right) \
				+ gs_frame_width_left * not(gs_sidelight_left) \
				- 2 * gs_rebate_width

			if gs_wallhole_nominal then
				A = ac_unit_width + gs_tolerance_left + gs_tolerance_right
				parameters A = A
			endif
			if gs_reveal_nominal then

				bHaveReveal = (	(gs_reveal_type_int - 1) = REVEAL_POSITIVE | \
								(gs_reveal_type_int - 1) = REVEAL_NEGATIVE | \
								(gs_reveal_type_int - 1) = REVEAL_SLANTED | \
								(gs_reveal_type_int - 1) = REVEAL_HISTORIC | \
								(gs_reveal_type_int - 1) = REVEAL_DOUBLE_SPLAYED | \
								(gs_reveal_type_int - 1) = REVEAL_OUTSIDE_SPLAYED | \
								(((gs_reveal_type_int - 1) = REVEAL_DOUBLE) & \
									(((gs_reveal_doubleOuterTypeInt - 1) = REVEAL_POSITIVE) | ((gs_reveal_doubleOuterTypeInt - 1) = REVEAL_NEGATIVE))) )

				bNegativeReveal = ( (gs_reveal_type_int - 1 = REVEAL_NEGATIVE) | \
								  (((gs_reveal_type_int - 1) = REVEAL_DOUBLE) & ((gs_reveal_doubleOuterTypeInt - 1) = REVEAL_NEGATIVE)) )
				iSignReveal = not(bNegativeReveal) - (bNegativeReveal)

				A = ac_unit_width + gs_tolerance_left + gs_tolerance_right - iSignReveal * bHaveReveal * (gs_reveal_left + gs_reveal_right)
				parameters A = A
			endif
			if gs_unit_nominal then
				A = ac_unit_width
				parameters A = A
			endif
			if gs_egress_nominal then
				A = gs_leaf_panel_width * leafNum - 2 * gs_rebate_width - gs_sliding_fixpanel_width_left - gs_sliding_fixpanel_width_right
				parameters A = A
			endif
			if gs_leaf_nominal then
				A = gs_leaf_panel_width * leafNum - 2 * gs_rebate_width
				parameters A = A
			endif
		endif
	endif
else
	if leafNum > 0 then
		gs_leaf_panel_width = TotalLeafWidthin3D / leafNum
	else
		gs_leaf_panel_width = TotalLeafWidthin3D
	endif
	parameters gs_leaf_panel_width = gs_leaf_panel_width
endif


! =============================================================================
! Calculate unitWidth/unitHeight from A/B
! =============================================================================

if gs_wallhole_nominal | gs_reveal_nominal then
	unitWidth	= A - gs_tolerance_left - gs_tolerance_right
	unitHeight	= B - gs_tolerance_upper - gs_tolerance_lower
endif
if gs_unit_nominal then
	unitWidth	= A
	unitHeight	= B
endif
if gs_egress_nominal then
	unitWidth = A +\
		not(gs_sidelight_left)  * gs_frame_width_left  + gs_ds_w + (gs_sidelight_left)  * gs_sidelight_width_left  + gs_sliding_fixpanel_width_left +\
		not(gs_sidelight_right) * gs_frame_width_right + gs_ds_w + (gs_sidelight_right) * gs_sidelight_width_right + gs_sliding_fixpanel_width_right
	unitHeight	= B +\
		not(gs_door_transom) * gs_frame_width_upper + gs_ds_w + (gs_door_transom) * gs_transom_height
endif
if gs_leaf_nominal then
	unitWidth = A +\
		not(gs_sidelight_left)  * gs_frame_width_left  - gs_rebate_width + (gs_sidelight_left)  * gs_sidelight_width_left  + gs_sliding_fixpanel_width_left +\
		not(gs_sidelight_right) * gs_frame_width_right - gs_rebate_width + (gs_sidelight_right) * gs_sidelight_width_right + gs_sliding_fixpanel_width_right
	unitHeight	= B +\
		not(gs_door_transom) * gs_frame_width_upper - gs_rebate_width + (gs_door_transom) * gs_transom_height
endif


! =============================================================================
! Size Limitations
! =============================================================================

minGlassSize = 0.01

minDoorLeafWidth = 0.2
if iDoorPanelType >= 2 & iDoorPanelType < 29 then
	minDoorLeafHeight = 7 * gs_fw_side + 12*gs_int_fw + 0.1
else
	minDoorLeafHeight = gs_fw_lower + gs_fw_upper
endif


!if gs_grill_typ_m = 37 then	! Prairie
!	minDoorLeafWidth	= max(minDoorLeafWidth,  gs_grid_w*5 + 6" + gs_panel_fw + 0.005")
!	minDoorLeafHeight	= max(minDoorLeafHeight, gs_grid_w*8 + 6" + gs_panel_fw + 0.005")
!endif

if gs_sidelight_left then
	bAllSashFixed =	(gs_optype_m_09 = SASH_FIXED) & \
					((gs_optype_m_10 = SASH_FIXED & gs_LeftMullion_Top  & gs_Transom_toLeft) | not(gs_LeftMullion_Top  & gs_Transom_toLeft))

	minSidelightWidthLeft	= gs_frame_width_left + gs_frame_width_left_2 + not(bAllSashFixed) * 2 * (gs_sash_width - gs_sidelight_rebate_width) + minGlassSize
	minSidelightHeightLeft	= gs_frame_width_low_right_sl + not(gs_optype_m_09 = SASH_FIXED) * 2 * (gs_sash_width - gs_sidelight_rebate_width) + minGlassSize
	minSLHorDivHeightLeft	= gs_sidelight_parapet_hgt_left + gs_frame_width_low_left_sl + not(gs_optype_m_11 = SASH_FIXED) * 2 * (gs_sash_width - gs_sidelight_rebate_width) + minGlassSize
	if gs_door_transom then
		maxSLHorDivHeightLeft	= unitHeight - gs_transom_height - gs_sidelight_fr_hdiv_wdt_left - not(gs_optype_m_09 = SASH_FIXED) * 2 * (gs_sash_width - gs_sidelight_rebate_width) - minGlassSize
	else
		maxSLHorDivHeightLeft	= unitHeight - gs_frame_width_upper - gs_sidelight_fr_hdiv_wdt_left - not(gs_optype_m_09 = SASH_FIXED) * 2 * (gs_sash_width - gs_sidelight_rebate_width) - minGlassSize
	endif
else
	minSidelightWidthLeft	= gs_frame_width_left
	minSidelightHeightLeft	= 0
endif

if gs_sidelight_right then
	bAllSashFixed =	(gs_optype_m_05 = SASH_FIXED) & \
					((gs_optype_m_06 = SASH_FIXED & gs_LeftMullion_Top  & gs_Transom_toRight) | not(gs_LeftMullion_Top  & gs_Transom_toRight))

	minSidelightWidthRight	= gs_frame_width_right + gs_frame_width_right_2 + not(bAllSashFixed) * 2 * (gs_sash_width - gs_sidelight_rebate_width) + minGlassSize
	minSidelightHeightRight	= gs_frame_width_low_left_sl + not(gs_optype_m_05 = SASH_FIXED) * 2 * (gs_sash_width - gs_sidelight_rebate_width) + minGlassSize
	minSLHorDivHeightRight	= gs_sidelight_parapet_hgt_right + gs_frame_width_low_right_sl + not(gs_optype_m_07 = SASH_FIXED) * 2 * (gs_sash_width - gs_sidelight_rebate_width) + minGlassSize
	if gs_door_transom then
		maxSLHorDivHeightRight	= unitHeight - gs_transom_height - gs_sidelight_fr_hdiv_wdt_right - not(gs_optype_m_05 = SASH_FIXED) * 2 * (gs_sash_width - gs_sidelight_rebate_width) - minGlassSize
	else
		maxSLHorDivHeightRight	= unitHeight - gs_frame_width_upper - gs_sidelight_fr_hdiv_wdt_right - not(gs_optype_m_05 = SASH_FIXED) * 2 * (gs_sash_width - gs_sidelight_rebate_width) - minGlassSize
	endif
else
	minSidelightWidthRight	= gs_frame_width_right
	minSidelightHeightRight	= 0
endif

if gs_door_transom then
	bAllSashFixed =	(gs_optype_m_02 = SASH_FIXED) & \
					((gs_optype_m_10 = SASH_FIXED & gs_LeftMullion_Top  & gs_Transom_toLeft)  | not(gs_LeftMullion_Top  & gs_Transom_toLeft)) & \
					((gs_optype_m_06 = SASH_FIXED & gs_RightMullion_Top & gs_Transom_toRight) | not(gs_RightMullion_Top & gs_Transom_toRight))

	minTransomHeight = gs_frame_width_transom + gs_frame_width_upper + not(bAllSashFixed) * 2 * (gs_sash_width - gs_sidelight_rebate_width) + minGlassSize
	maxTransomHeight = unitHeight - minDoorLeafHeight
	if gs_sidelight_left then
		maxTransomHeight = min(maxTransomHeight, unitHeight - (gs_sidelight_parapet_hgt_left + minSidelightHeightLeft))
	endif
	if gs_sidelight_right then
		maxTransomHeight = min(maxTransomHeight, unitHeight - (gs_sidelight_parapet_hgt_right + minSidelightHeightRight))
	endif
else
	minTransomHeight = gs_frame_width_upper
	maxTransomHeight = unitHeight
endif

values "gs_transom_height" range[minTransomHeight, maxTransomHeight]

if gs_sidelight_left then
	values "gs_sidelight_width_left"  range[minSidelightWidthLeft,  unitWidth - minDoorLeafWidth - minSidelightWidthRight]
	values "gs_sidelight_parapet_hgt_left"  range[0, unitHeight - minTransomHeight - minSidelightHeightLeft]
	values "gs_sidelight_fr_hdiv_hgt_left" range[minSLHorDivHeightLeft, maxSLHorDivHeightLeft]
else
	gs_sidelight_width_left			= 0
	gs_sidelight_parapet_hgt_left	= 0

	parameters	gs_sidelight_width_left			= gs_sidelight_width_left,
				gs_sidelight_parapet_hgt_left	= gs_sidelight_parapet_hgt_left

	lock "gs_sidelight_width_left", "gs_sidelight_parapet_hgt_left"
	hideparameter "gs_sidelight_width_left", "gs_sidelight_parapet_hgt_left"
endif
if gs_sidelight_right then
	values "gs_sidelight_width_right" range[minSidelightWidthRight, unitWidth - minDoorLeafWidth - minSidelightWidthLeft]
	values "gs_sidelight_parapet_hgt_right" range[0, unitHeight - minTransomHeight - minSidelightHeightRight]
	values "gs_sidelight_fr_hdiv_hgt_right" range[minSLHorDivHeightRight, maxSLHorDivHeightRight]

	maxSidelightWidthLeft = unitWidth - minDoorLeafWidth - gs_sidelight_width_right
	if gs_sidelight_width_left > maxSidelightWidthLeft then
		gs_sidelight_width_left = maxSidelightWidthLeft
		parameters gs_sidelight_width_left = maxSidelightWidthLeft
	endif
else
	gs_sidelight_width_right		= 0
	gs_sidelight_parapet_hgt_right	= 0

	parameters	gs_sidelight_width_right		= gs_sidelight_width_right,
				gs_sidelight_parapet_hgt_right	= gs_sidelight_parapet_hgt_right

	lock "gs_sidelight_width_right", "gs_sidelight_parapet_hgt_right"
	hideparameter "gs_sidelight_width_right", "gs_sidelight_parapet_hgt_right"
endif

minUnitWidth =	minDoorLeafWidth + minSidelightWidthLeft + minSidelightWidthRight
minUnitHeight = minDoorLeafHeight + minTransomHeight

if gs_door_transom then
	if bArchedTop then
		archedExtra = gs_frame_width_right + (gs_optype_m_02 <> SASH_FIXED) * 2 * (gs_sash_width - gs_sidelight_rebate_width)
	else
		archedExtra = 0
	endif
	values "gs_shoulder_h" range[unitHeight - gs_transom_height + gs_frame_width_transom + archedExtra, unitHeight - gs_frame_width / 2)
else
	values "gs_shoulder_h" range[(unitHeight - unitWidth / 2), unitHeight - gs_frame_width / 2)
endif

gs_pivotdoor = (gs_leaf_optype_m = LEAF_1L_PIVOT | gs_leaf_optype_m = LEAF_1L_PIVOT_m)

values "gs_leaf_undercut" range [0, 0.05]

! =============================================================================
! GS Door Functions
! =============================================================================

if bArchedTop then
	gs_sunShade_typeDisableByObject	= 8+16+64+128+256
else
	gs_sunShade_typeDisableByObject	= 0
endif

call "GS Door Functions",
	parameters all	iWindowShape					= iWindowShape,
					bEnableMasonryArch				= bEnableMasonryArch,
					bEnableSill						= bEnableSill,
					bEnableBoard					= bEnableBoard,
					bEnableThreshold				= bEnableThreshold,
					bForceToShowThresholdUI			= bForceToShowThresholdUI,
					bEnableShutter					= bEnableShutter,
					bEnableCasing					= bEnableCasing,
					bEnableGanging					= bEnableGanging,
					bEnableVentilationProfile		= bEnableVentilationProfile,
					bDoorWithSidelightSupport		= 1,
					gs_pivotdoor					= gs_pivotdoor,
					bBombShelter					= bBombShelter,
					gs_sunShade_typeDisableByObject	= gs_sunShade_typeDisableByObject,
					iDoorType						= iDoorType,
					minUnitWidth					= minUnitWidth,
					minUnitHeight					= minUnitHeight,
					minSidelightWidthLeft			= minSidelightWidthLeft,
					minSidelightWidthRight			= minSidelightWidthRight,
					minTransomHeight				= minTransomHeight,
					gs_reveal_uniform				= gs_reveal_uniform,
					gs_sliding_fixpanel_width_left	= gs_sliding_fixpanel_width_left,
					gs_sliding_fixpanel_width_right	= gs_sliding_fixpanel_width_right,
					bHideOplineStyle				= bHideOplineStyle,
					bLockOplineStyle				= bLockOplineStyle,
					bDisable2DOverride				= bDisable2DOverride,
					bDisable3DOverride				= bDisable3DOverride,
					bDisableSwingType				= bDisableSwingType,
					bDisableSwingLineType 			= bDisableSwingLineType,
					iOpeningParamType				= iOpeningParamType,
					bDoorEmptyPanel					= bDoorEmptyPanel,
					isRebateWidth					= isRebateWidth,
					bSlidingOptypeChanged			= bSlidingOptypeChanged

! =============================================================================
! FM Types
! =============================================================================

call "FM_types" parameters all


! =============================================================================
! GeneralDoorUnit
! =============================================================================

call "GeneralDoorUnit" parameters all A=A,
	stGrillPos						= stGrillPos,
	stOpeningDir					= stOpeningDir,
	gs_stDoorFrame					= gs_stDoorFrame,
	stFrameElemJoin					= stFrameElemJoin,
	stSashType						= stSashType,
	stMullionPosition				= stMullionPosition,
	stOpeningType					= stOpeningType,
	stLouversinFrame				= stLouversinFrame,
	stSidelightTransomRelation		= stSidelightTransomRelation,
	stLeavesConfiguration			= stLeavesConfiguration,
	stLeafOpeningType				= stLeafOpeningType,
	stDoorTypes						= stDoorTypes,
	stRailTypes						= stRailTypes,
	stSillTypes						= stSillTypes,
	stThresholdTypes				= stThresholdTypes,
	bCHIVer							= (iDWDet3D = DETLEVEL_DW3D_CHI_SIMPLE | iDWDet3D = DETLEVEL_DW3D_CHI_DETAILED),
	bEnableVentilationProfile		= bEnableVentilationProfile,
	gs_VentilationProfileTypeEnable	= gs_VentilationProfileTypeEnable,
	iRevealType						= gs_reveal_type_int - 1,
	bSlidingUIalternative			= bSlidingUIalternative,
	CasementIDArray					= CasementIDArray,
	bKickBoardOut					= bKickBoardOut,
	bKickBoardIn					= bKickBoardIn,
	kickBoardHeight					= kickBoardHeight,
	bKickBoardOut2					= bKickBoardOut2,
	bKickBoardIn2					= bKickBoardIn2,
	kickBoardHeight2				= kickBoardHeight2


! =============================================================================
! Pocket Door - Ceneterd in Wall Function
! =============================================================================

if	gs_leaf_optype_m = LEAF_1L_POCKET |\
	gs_leaf_optype_m = LEAF_1L_POCKET_M |\
	gs_leaf_optype_m = LEAF_2L_POCKET then

	if GLOB_UI_BUTTON_ID = 9999 then
	
		if not(gs_pocket_door_frame) then
			AC_wido_sill = WALL_THICKNESS/2 - gs_leaf_thk/2 - 0.005
		else
			if WIDO_REVEAL_SIDE then
				_currentOffset = gs_frame_thk - gs_leaf_offset - gs_leaf_thk/2 - 0.005
			else
				_currentOffset = gs_leaf_offset + 0.005 + gs_leaf_thk/2
			endif

			AC_wido_sill = WALL_THICKNESS/2 - gs_frame_thk/2 * gs_leaf_center - (_currentOffset) * not(gs_leaf_center)
		endif
		gs_wido_sill = AC_wido_sill
		if gs_reveal_type_int = REVEAL_EDGE + 1	 then gs_reveal_type_int = REVEAL_NO + 1

		parameters	AC_wido_sill = AC_wido_sill,
					gs_wido_sill = gs_wido_sill,
					gs_reveal_type_int	= gs_reveal_type_int
	endif
endif


! =============================================================================
! Tolerance parameter handling
! =============================================================================

if bArchedTop then
	if	(gs_sidelight_left & gs_sidelight_right) & ((gs_sidelight_parapet_hgt_left < EPS) & (gs_sidelight_parapet_hgt_right < EPS)) |\
		(gs_sidelight_left & not(gs_sidelight_right)) & (gs_sidelight_parapet_hgt_left < EPS)									|\
		(not(gs_sidelight_left) & gs_sidelight_right) & (gs_sidelight_parapet_hgt_right < EPS)								then

		lock "gs_tolerance_uniform"
	endif
endif

if gs_tolerance_uniform then
	if bArchedTop then
		lock "gs_tolerance_upper"
		hideparameter "gs_tolerance_upper"
	endif

	lock	"gs_tolerance_left",
			"gs_tolerance_left_2",
			"gs_tolerance_low_left_sl",
			"gs_tolerance_right_2",
			"gs_tolerance_low_right_sl"

	hideparameter	"gs_tolerance_left",
					"gs_tolerance_left_2",
					"gs_tolerance_low_left_sl",
					"gs_tolerance_right_2",
					"gs_tolerance_low_right_sl"
else
	if bArchedTop then
		if GLOB_MODPAR_NAME = "gs_tolerance_upper" then
			gs_tolerance_left	= gs_tolerance_upper
			gs_tolerance_right	= gs_tolerance_upper
			parameters	gs_tolerance_left	= gs_tolerance_left,
						gs_tolerance_right	= gs_tolerance_right
		else
			if GLOB_MODPAR_NAME = "gs_tolerance_left" then
				gs_tolerance_upper = gs_tolerance_left
				gs_tolerance_right = gs_tolerance_left
				parameters	gs_tolerance_upper = gs_tolerance_upper,
							gs_tolerance_right = gs_tolerance_right
			else
				gs_tolerance_upper	= gs_tolerance_right
				gs_tolerance_left	= gs_tolerance_right
				parameters	gs_tolerance_upper	= gs_tolerance_upper,
							gs_tolerance_left	= gs_tolerance_left
			endif
		endif
	endif

	if iWindowShape = SHAPE_HALF_T_LEFT | iWindowShape = SHAPE_ARCHED_HALF_T_LEFT | gs_sidelight_parapet_hgt_right < EPS then
		lock	"gs_tolerance_right_2",
				"gs_tolerance_low_right_sl"

		hideparameter	"gs_tolerance_right_2",
						"gs_tolerance_low_right_sl"
	endif
	if gs_sidelight_parapet_hgt_left < EPS then
		lock	"gs_tolerance_left_2",
				"gs_tolerance_low_left_sl"

		hideparameter	"gs_tolerance_left_2",
						"gs_tolerance_low_left_sl"
	endif

	if bArchedTop then
		hideparameter	"gs_tolerance_upper",
						"gs_tolerance_left"
	endif
endif


! =============================================================================
! Minimal Space
! =============================================================================

if (GLOB_MODPAR_NAME = "gs_leaf_optype_m" &\
	(gs_leaf_optype_m = LEAF_1L_DOUBLE_ACTING |\
	 gs_leaf_optype_m = LEAF_1L_DOUBLE_ACTING_M |\
	 gs_leaf_optype_m = LEAF_2L_DOUBLE_ACTING |\
	 gs_leaf_optype_m = LEAF_2L_DOUBLE_EGRESS |\
	 gs_leaf_optype_m = LEAF_2L_DOUBLE_EGRESS_M )) \
	|\
	(GLOB_MODPAR_NAME = "gs_leaf_optype" &\
	(gs_leaf_optype = stLeafOpeningType[3] |\
	 gs_leaf_optype = stLeafOpeningType[4] |\
	 gs_leaf_optype = stLeafOpeningType[6] |\
	 gs_leaf_optype = stLeafOpeningType[7] |\
	 gs_leaf_optype = stLeafOpeningType[8] )) then

	ms_oppositeSDepth = ms_openingSDepth
	parameters ms_oppositeSDepth = ms_oppositeSDepth
endif

if (GLOB_MODPAR_NAME = "gs_leaf_optype_m" &\
	(gs_leaf_optype_m = LEAF_1L_SIDE_HUNG |\
	 gs_leaf_optype_m = LEAF_1L_SIDE_HUNG_M |\
	 gs_leaf_optype_m = LEAF_2L_SIDE_HUNG )) \
	|\
	(GLOB_MODPAR_NAME = "gs_leaf_optype" &\
	(gs_leaf_optype = stLeafOpeningType[1] |\
	 gs_leaf_optype = stLeafOpeningType[2] |\
	 gs_leaf_optype = stLeafOpeningType[5] )) then

	ms_oppositeSDepth = ms_oppositeSDepth_Default	! Default size of ms_oppositeSDepth
	parameters ms_oppositeSDepth = ms_oppositeSDepth
endif


! =============================================================================
! Oversize parameter handling
! =============================================================================

if iWindowShape = SHAPE_T | iWindowShape = SHAPE_HALF_T_LEFT | iWindowShape = SHAPE_HALF_T_RIGHT then
	lock	"gs_left_oversize",
			"gs_right_oversize",
			"gs_lower_oversize"

	hideparameter 	"gs_left_oversize",
					"gs_right_oversize",
					"gs_lower_oversize"
endif

if iWindowShape = SHAPE_ARCHED_T | iWindowShape = SHAPE_ARCHED_HALF_T_LEFT | iWindowShape = SHAPE_ARCHED_HALF_T_RIGHT then
	lock	"gs_door_oversize",
			"gs_left_oversize",
			"gs_right_oversize",
			"gs_upper_oversize",
			"gs_lower_oversize"

	hideparameter 	"gs_door_oversize",
					"gs_left_oversize",
					"gs_right_oversize",
					"gs_upper_oversize",
					"gs_lower_oversize"
endif


! ==============================================================================
! Hiding 2D Chinese Parameters
! ==============================================================================

if not(bEnableShowHandle) | (gs_handle_type_m = 0) | \
	iDWDet2D = DETLEVEL_DW2D_100 | iDWDet2D = DETLEVEL_DW2D_200 | \
	iDWDet2D = DETLEVEL_DW2D_OFF | iDWDet2D = DETLEVEL_DW2D_CHISMPL  then
	lock "bShowHandleOnSymbol"
	hideparameter "bShowHandleOnSymbol"
endif
if not(bEnableShowAirtightPanel) | iDWDet2D = DETLEVEL_DW2D_100 | \
	iDWDet2D = DETLEVEL_DW2D_200 | iDWDet2D = DETLEVEL_DW2D_OFF | iDWDet2D = DETLEVEL_DW2D_CHISMPL then
	lock "bShowAirtightPanel"
	hideparameter "bShowAirtightPanel"
endif
if not(bEnableShowAirtightPanel & bShowAirtightPanel) | iDWDet2D = DETLEVEL_DW2D_100 | \
	iDWDet2D = DETLEVEL_DW2D_200 | iDWDet2D = DETLEVEL_DW2D_OFF | iDWDet2D = DETLEVEL_DW2D_CHISMPL then
	lock "gs_fillAirtight", "gs_penAirtight_fg", "gs_penAirtight_bg"
	hideparameter "gs_fillAirtight", "gs_penAirtight_fg", "gs_penAirtight_bg"
endif
if not(bEnableShowGlassPanel) | iDWDet2D = DETLEVEL_DW2D_100 | \
	iDWDet2D = DETLEVEL_DW2D_200 | iDWDet2D = DETLEVEL_DW2D_OFF | iDWDet2D = DETLEVEL_DW2D_CHISMPL then
	lock "bShowGlassPanelOnSymbol"
	hideparameter "bShowGlassPanelOnSymbol"
endif
if not(bEnableShowGlassPanel) then
	parameters bShowGlassPanelOnSymbol = 0
endif
if not(bEnableShowChiSpringSymbol) | iDWDet2D = DETLEVEL_DW2D_100 \
	| iDWDet2D = DETLEVEL_DW2D_200 | iDWDet2D = DETLEVEL_DW2D_OFF | iDWDet2D = DETLEVEL_DW2D_CHISMPL then
	lock "bShowChiSpringSymbol"
	hideparameter "bShowChiSpringSymbol"
endif
if GLOB_MODPAR_NAME="bShowAirtightPanel" and bShowAirtightPanel then
	bShowGlassPanelOnSymbol=0
	parameters bShowGlassPanelOnSymbol=0
endif
if GLOB_MODPAR_NAME="bShowGlassPanelOnSymbol" and bShowGlassPanelOnSymbol then
	bShowAirtightPanel=0
	parameters bShowAirtightPanel=0
endif

if	iOpeningMethod = 5 |\	! External Sliding
	iOpeningMethod = 6 |\	! Double External Sliding
	iOpeningMethod = 7 |\	! Pocket
	iOpeningMethod = 8 then	! Double Pocket

	if not(bEnableSlidingOpLine2D) then
		hideparameter "bSlidingOpLine2D"
		lock "bSlidingOpLine2D"
	endif
endif


! ==============================================================================
! Setting Reveal Side
! ==============================================================================

values "gs_reveal_set_side" REVEAL_SET_INSIDE, REVEAL_SET_OUTSIDE


! =============================================================================
! Hide unnecessary parameters
! =============================================================================

if bArchedTop then
	lock "gs_door_stack"
	hideparameter "gs_door_stack"
endif

if not(bEnableMasonryArch) then
	parameters bMasonryArch = 0
	lock	"bMasonryArch",
			"gs_masonry_arch_int",
			"gs_masonry_arch_fill",
			"gs_masonry_arch_pen_fg",
			"gs_masonry_arch_pen_bg",
			"gs_masonry_arch_brick_mat",
			"gs_masonry_arch_mort_mat",
			"gs_masonry_arch_keystone_mat"
	hideparameter	"bMasonryArch",
					"gs_masonry_arch_int",
					"gs_masonry_arch_fill",
					"gs_masonry_arch_pen_fg",
					"gs_masonry_arch_pen_bg",
					"gs_masonry_arch_brick_mat",
					"gs_masonry_arch_mort_mat",
					"gs_masonry_arch_keystone_mat"
endif

if not(bEnableBoard) then
	parameters gs_board_inside = 0
	lock "gs_board",
		 "gs_board_pen_3D", "gs_board_pen_sectcont", "gs_board_fill", "gs_board_pen_fg", "gs_board_pen_bg",
		 "gs_board_mat"
	hideparameter	"gs_board",
					"gs_board_pen_3D", "gs_board_pen_sectcont", "gs_board_fill", "gs_board_pen_fg", "gs_board_pen_bg",
					"gs_board_mat"
endif

if not(bEnableSill) then
	parameters gs_sill_outside = 0
	lock "gs_sill",
		 "gs_sill_pen_3D", "gs_sill_pen_sectcont", "gs_sill_fill", "gs_sill_pen_fg", "gs_sill_pen_bg",
		 "gs_sill_pen_ins_sectcont", "gs_sill_fill_ins_fg", "gs_sill_pen_ins_fg", "gs_sill_pen_ins_bg",
		 "gs_sill_mat", "gs_brick_sill_mort_mat"
	hideparameter	"gs_sill",
					"gs_sill_pen_3D", "gs_sill_pen_sectcont", "gs_sill_fill", "gs_sill_pen_fg", "gs_sill_pen_bg",
					"gs_sill_pen_ins_sectcont", "gs_sill_fill_ins_fg", "gs_sill_pen_ins_fg", "gs_sill_pen_ins_bg",
					"gs_sill_mat", "gs_brick_sill_mort_mat"
endif

if not(bEnableThreshold) then
	lock	"bThreshold",
		"gs_treshold_pen_sectcont",
		"gs_treshold_fill",
		"gs_treshold_pen_fg",
		"gs_treshold_pen_bg",
		"gs_treshold_mat",
		"gs_treshold_metal_mat"
	hideparameter	"gs_treshold_pen_sectcont",
					"gs_treshold_fill",
					"gs_treshold_pen_fg",
					"gs_treshold_pen_bg",
					"gs_treshold_mat",
					"gs_treshold_metal_mat"
	if not(bForceToShowThresholdUI) then
		hideparameter	"bThreshold"
	endif
endif

if gs_frame_style_m = FRAME_STYLE_WRAPPED_EXTRUSION then
	lock	"gs_stack_left",
			"gs_stack_right",
			"gs_stack_top"
	hideparameter	"gs_stack_left",
					"gs_stack_right",
					"gs_stack_top"
endif


! =============================================================================
! Japanese list parameter control
! =============================================================================

if gs_JPN_listParams_contr then
	call "ListValuesJPN" parameters all gs_JPNObjectType = 1,		!COMMPARS_INTDOORS
			gs_is_p2	= 0,
			gs_is_p6	= 0
endif


! =============================================================================
! 3D Detail Level
! =============================================================================

if gs_3DDetEnable =0 then

    values{2} "iDWDet3D" 	DETLEVEL_DW3D_DETAILED,		`Детальный`,
						    DETLEVEL_DW3D_SIMPLE,		`Простой`,
						    DETLEVEL_DW3D_OFF,			`Откл.`

else
	dim n3DScaleValueMask[]
	dim n3DScaleValueMask_m[]

	i=1
	if bittest( gs_3DDetEnable, 0) then                                              ! Scale Sensitive in Value list, 1
				n3DScaleValueMask[i] = stDetail[1]
				n3DScaleValueMask_m[i] = DETLEVEL_DW3D_SCALESENS
				i = i + 1
	endif
	if bittest( gs_3DDetEnable, 1) then                                              ! Detailed in Value list,2
				n3DScaleValueMask[i] = stDetail[2]
				n3DScaleValueMask_m[i] = DETLEVEL_DW3D_DETAILED
				i = i + 1
	endif
	if bittest( gs_3DDetEnable, 2) then                                              ! Simple in Value list,4
				n3DScaleValueMask[i] = stDetail[3]
				n3DScaleValueMask_m[i] = DETLEVEL_DW3D_SIMPLE
				i = i + 1
	endif
	if bittest( gs_3DDetEnable, 3) then                                              ! Off in Value list,8
				n3DScaleValueMask[i] = stDetail[4]
				n3DScaleValueMask_m[i] = DETLEVEL_DW3D_OFF
				i = i + 1
	endif
	if bittest( gs_3DDetEnable, 4) then                                              ! Chinese Simple in Value list,16
				n3DScaleValueMask[i] = stDetail[5]
				n3DScaleValueMask_m[i] = DETLEVEL_DW3D_CHI_SIMPLE
				i = i + 1
	endif
	if bittest( gs_3DDetEnable, 5) then                                              ! Chinese Detailed in Value list,32
				n3DScaleValueMask[i] = stDetail[6]
				n3DScaleValueMask_m[i] = DETLEVEL_DW3D_CHI_DETAILED
				i = i + 1
	endif

	values{2} "iDWDet3D" n3DScaleValueMask_m, n3DScaleValueMask
endif

! =============================================================================
! Swedish list parameter control
! =============================================================================

if gs_SWE_listParams_contr > 0 then
	call "SWE_ListParameters_control" parameters gs_SWE_listParams_contr = gs_SWE_listParams_contr,
			swe_list_d1				= swe_list_d1
endif

