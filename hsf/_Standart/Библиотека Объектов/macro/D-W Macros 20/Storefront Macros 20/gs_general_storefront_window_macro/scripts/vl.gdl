

! =============================================================================
! GS Storefront Window Functions
! =============================================================================

call "GS Storefront Window Functions",
	parameters all bEnableVentilationProfile	= bEnableVentilationProfile,
					bEnableParapetInset			= bEnableParapetInset,
					bEnableMasonryArch			= bEnableMasonryArch,
					bEnableSill					= bEnableSill,
					bEnableBoard				= bEnableBoard,
					bEnableFaschen				= bEnableFaschen,
					bEnableThreshold			= bEnableThreshold,
					bEnableCasing				= bEnableCasing,
					bEnableShutter				= bEnableShutter,
					bEnableCustomCornerLeft		= bEnableCustomCornerLeft,
					bEnableCustomCornerRight	= bEnableCustomCornerRight

values "gs_frame_width" range (0,)

values{2} "gs_SashText_typ_num" 	MITERED_JOINT, `Угловое Соединение`,
									BUTT_JOINT, `Соединение Встык`


! =============================================================================
! Ventilation Profile
! =============================================================================

if bEnableVentilationProfile then
	call "Ventilation_profile" parameters	isWindow						= 1,
											iWindowType						= 0,
											bVentilationProfile				= bVentilationProfile,
											iVentilationProfileType			= iVentilationProfileType,
											gs_VentilationProfileTypeEnable	= gs_VentilationProfileTypeEnable
else
	lock	"bVentilationProfile",
			"gs_list_freeAirPerformance"
	hideparameter	"bVentilationProfile",
					"gs_list_freeAirPerformance"
endif


! =============================================================================
! Orientation
! =============================================================================

values{2} "gs_list_orientationDef_m"	0, `Автоматически`,
										1, `Специальный`

if gs_list_orientationDef_m = 0 then
	ac_OpeningSide = ""
	parameters ac_OpeningSide = ac_OpeningSide

	lock "ac_OpeningSide"
	hideparameter "ac_OpeningSide"
endif


! =============================================================================
! IFC Parameters
! =============================================================================

ifc_optype = WIN_OP_USER_DEFINED

if iStorefrontType = 3 then
	ifc_optype = WIN_OP_SINGLE_PANEL
endif

if iStorefrontType = 1 then
	if bMiddleRail then
		ifc_optype = WIN_OP_DOUBLE_PANEL_HORIZONTAL
	else
		ifc_optype = WIN_OP_SINGLE_PANEL
	endif
endif

if (iStorefrontType = 4) then
	if gs_Utrans then
		ifc_optype = WIN_OP_DOUBLE_PANEL_HORIZONTAL
	else
		ifc_optype = WIN_OP_SINGLE_PANEL
	endif
endif

if iStorefrontType = 2 then
	if gs_Utrans & bMiddleRail then
		ifc_optype = WIN_OP_TRIPLE_PANEL_HORIZONTAL
	else
		if gs_Utrans exor bMiddleRail then
			ifc_optype = WIN_OP_DOUBLE_PANEL_HORIZONTAL
		else
			ifc_optype = WIN_OP_SINGLE_PANEL
		endif
	endif
endif

! 2 Sidelights, 2 transoms
if iStorefrontType = 5 then
	if (gs_Utrans | bMiddleRail) & not(gs_bSLight | gs_bSLight2) then
		if gs_Utrans & bMiddleRail then
			ifc_optype = WIN_OP_TRIPLE_PANEL_HORIZONTAL
		else
			ifc_optype = WIN_OP_DOUBLE_PANEL_HORIZONTAL
		endif
	else
		if not(gs_Utrans | bMiddleRail) then
			if gs_bSLight & gs_bSLight2 then
				ifc_optype = WIN_OP_TRIPLE_PANEL_VERTICAL
			else
				if gs_bSLight exor gs_bSLight2 then
					ifc_optype = WIN_OP_DOUBLE_PANEL_VERTICAL
				else
					ifc_optype = WIN_OP_SINGLE_PANEL
				endif
			endif
		else
			ifc_optype = WIN_OP_USER_DEFINED
		endif
	endif
endif

parameters ifc_optype = ifc_optype

call "IFC_optype_window" parameters ifc_optype = ifc_optype

lock "ifc_optypestr"

ifc_LiningDepth = WIDO_FRAME_THICKNESS
parameters ifc_LiningDepth = ifc_LiningDepth

ifc_LiningThickness = gs_frame_width
parameters ifc_LiningThickness = ifc_LiningThickness


ifc_MullionThickness	= 0
ifc_FirstMullionOffset	= 0
ifc_SecondMullionOffset	= 0
if ifc_optype = WIN_OP_DOUBLE_PANEL_VERTICAL then
	ifc_MullionThickness = gs_frame_width
	if gs_bSLight then
		ifc_FirstMullionOffset = (gs_SLight_w - ifc_MullionThickness/2)/ac_unit_width
	else
		ifc_FirstMullionOffset = (ac_unit_width - gs_SLight_w2 + ifc_MullionThickness/2)/ac_unit_width
	endif
endif
if ifc_optype = WIN_OP_TRIPLE_PANEL_VERTICAL then
	ifc_MullionThickness	= gs_frame_width
	ifc_FirstMullionOffset	= (gs_SLight_w - ifc_MullionThickness/2)/ac_unit_width
	ifc_SecondMullionOffset	= (ac_unit_width - gs_SLight_w2 + ifc_MullionThickness/2)/ac_unit_width
endif
parameters	ifc_MullionThickness	= ifc_MullionThickness,
			ifc_FirstMullionOffset	= ifc_FirstMullionOffset,
			ifc_SecondMullionOffset	= ifc_SecondMullionOffset


ifc_TransomThickness	= 0
ifc_FirstTransomOffset	= 0
ifc_SecondTransomOffset	= 0
if ifc_optype = WIN_OP_DOUBLE_PANEL_HORIZONTAL then
	if gs_UTrans then
		ifc_TransomThickness	= gs_frame_width
		ifc_FirstTransomOffset	= (ac_unit_height - transomHeight + gs_frame_width/2)/ac_unit_height
	else
		ifc_TransomThickness	= midRailWidth
		ifc_FirstTransomOffset	= midRailElevation/ac_unit_height
	endif
endif
if ifc_optype = WIN_OP_TRIPLE_PANEL_HORIZONTAL then
	ifc_TransomThickness	= gs_frame_width
	ifc_FirstTransomOffset	= midRailElevation/ac_unit_height
	ifc_SecondTransomOffset	= (ac_unit_height - transomHeight + gs_frame_width/2)/ac_unit_height
endif
parameters	ifc_TransomThickness	= ifc_TransomThickness,
			ifc_FirstTransomOffset	= ifc_FirstTransomOffset,
			ifc_SecondTransomOffset	= ifc_SecondTransomOffset


dim ifc_WindowPanel[][4]
if ifc_optype = WIN_OP_NOT_DEFINED | ifc_optype = WIN_OP_USER_DEFINED then
	ifc_WindowPanel[1][1] = 0
	ifc_WindowPanel[1][2] = 0
	ifc_WindowPanel[1][3] = 0		! NOTDEFINED
	ifc_WindowPanel[1][4] = 0		! NOTDEFINED
else
	if ifc_optype = WIN_OP_SINGLE_PANEL then
		ifc_WindowPanel[1][1] = 0
		ifc_WindowPanel[1][2] = 0
		ifc_WindowPanel[1][3] = 12 	! FIXEDCASEMENT
		ifc_WindowPanel[1][4] = 2	! MIDDLE
	endif

	if ifc_optype = WIN_OP_DOUBLE_PANEL_HORIZONTAL then
		ifc_WindowPanel[1][1] = 0
		ifc_WindowPanel[1][2] = 0
		ifc_WindowPanel[1][3] = 12 	! FIXEDCASEMENT
		ifc_WindowPanel[1][4] = 5	! TOP

		ifc_WindowPanel[2][1] = 0
		ifc_WindowPanel[2][2] = 0
		ifc_WindowPanel[2][3] = 12 	! FIXEDCASEMENT
		ifc_WindowPanel[2][4] = 4	! BOTTOM
	endif

	if ifc_optype = WIN_OP_DOUBLE_PANEL_VERTICAL then
		ifc_WindowPanel[1][1] = 0
		ifc_WindowPanel[1][2] = 0
		ifc_WindowPanel[1][3] = 12 	! FIXEDCASEMENT
		ifc_WindowPanel[1][4] = 1	! LEFT?

		ifc_WindowPanel[2][1] = 0
		ifc_WindowPanel[2][2] = 0
		ifc_WindowPanel[2][3] = 12 	! FIXEDCASEMENT
		ifc_WindowPanel[2][4] = 3	! RIGHT?
	endif

	if ifc_optype = WIN_OP_TRIPLE_PANEL_HORIZONTAL then
		ifc_WindowPanel[1][1] = 0
		ifc_WindowPanel[1][2] = 0
		ifc_WindowPanel[1][3] = 12 	! FIXEDCASEMENT
		ifc_WindowPanel[1][4] = 5	! TOP

		ifc_WindowPanel[2][1] = 0
		ifc_WindowPanel[2][2] = 0
		ifc_WindowPanel[2][3] = 12 	! FIXEDCASEMENT
		ifc_WindowPanel[2][4] = 2	! MIDDLE

		ifc_WindowPanel[3][1] = 0
		ifc_WindowPanel[3][2] = 0
		ifc_WindowPanel[3][3] = 12 	! FIXEDCASEMENT
		ifc_WindowPanel[3][4] = 4	! BOTTOM
	endif
	if ifc_optype = WIN_OP_TRIPLE_PANEL_VERTICAL then
		ifc_WindowPanel[1][1] = 0
		ifc_WindowPanel[1][2] = 0
		ifc_WindowPanel[1][3] = 12 	! FIXEDCASEMENT
		ifc_WindowPanel[1][4] = 1	! LEFT?

		ifc_WindowPanel[2][1] = 0
		ifc_WindowPanel[2][2] = 0
		ifc_WindowPanel[2][3] = 12 	! FIXEDCASEMENT
		ifc_WindowPanel[2][4] = 2	! MIDDLE

		ifc_WindowPanel[3][1] = 0
		ifc_WindowPanel[3][2] = 0
		ifc_WindowPanel[3][3] = 12 	! FIXEDCASEMENT
		ifc_WindowPanel[3][4] = 3	! RIGHT?
	endif
endif
parameters ifc_WindowPanel = ifc_WindowPanel


! =============================================================================
! FM Types
! =============================================================================

call "FM_types" parameters all

! =============================================================================
! Swedish list parameter control
! =============================================================================

if gs_SWE_listParams_contr > 0 then
	call "SWE_ListParameters_control" parameters gs_SWE_listParams_contr = gs_SWE_listParams_contr,
			swe_list_f1				= swe_list_f1
endif

gosub "GlasAreaCalculation"

! =============================================================================
! SWE Label sash ID handling
! =============================================================================
	gs_UTrans_Div = 0
	gs_LTrans_Div = 0

	parameters	gs_optype_m_01 = 1
	if iStorefrontType <> 3 and iStorefrontType <> 1 then
		gs_optype_m_02 = 1
		parameters gs_optype_m_02 = gs_optype_m_02
	endif
	if iStorefrontType = 1 or iStorefrontType = 2 or iStorefrontType = 5 then
		gs_optype_m_03 = 1
		parameters gs_optype_m_03 = gs_optype_m_03
	endif
	if iStorefrontType = 5 then
		gs_optype_m_05 = 1
		gs_optype_m_06 = 1
		gs_optype_m_07 = 1

		gs_optype_m_09 = 1
		gs_optype_m_10 = 1
		gs_optype_m_11 = 1
		parameters	gs_optype_m_05 = gs_optype_m_05,
					gs_optype_m_06 = gs_optype_m_06,
					gs_optype_m_07 = gs_optype_m_07,
					gs_optype_m_09 = gs_optype_m_09,
					gs_optype_m_10 = gs_optype_m_10,
					gs_optype_m_11 = gs_optype_m_11


		if gs_UTrans and (gs_bSLight2 or gs_bSLight) then
			gs_UTrans_Div = 1
		endif
		if bMiddleRail and (gs_bSLight2 or gs_bSLight) then
			gs_LTrans_Div = 1
		endif
	endif

	call "winDoorCasIDmacro" parameters 	isSweDoorWindow			= 0,
											sashRowNum				= 0,
											sashColumnNum			= 0,
											iWindowType				= 0,
											iWindowClass			= 0,
											gs_bLeftSLight			= gs_bSLight2,
											gs_bSLight				= gs_bSLight,
											gs_UTrans				= gs_UTrans,
											gs_LTrans				= bMiddleRail,
											gs_UTrans_Div			= gs_UTrans_Div,
											gs_LTrans_Div			= gs_LTrans_Div,
											storeFrontSide1			= gs_bSLight,
											storeFrontSide2			= gs_bSLight2,
											nDinamicSash			= 0



! PENS -------------------------------------------------------------------[
for i = 1 to 255
	put i
next i

values "gs_penJoint" use(NSP)
values "gs_penJointFg" use(NSP)
values "gs_penPlug" use(NSP)
values "gs_penPlugFg" use(NSP)
values "gs_custom_cc_separator_pen" use(NSP)
values "gs_pen_2D" use(NSP)
values "gs_pen_mull" use(NSP)
values "gs_pen_glass" use(NSP)
values "gs_wcont_line_pen" use(NSP)
values "gs_penShCov_fg" use(NSP)
values "gs_penFr_fg" use(NSP)
values "gs_penFr_bg" use(NSP)
values "gs_penGlass_fg" use(NSP)
values "gs_wallhole_pen_fg" use(NSP)
values "gs_frame_pen" use(NSP)
values "gs_sash_pen" use(NSP)
values "gs_glass_pen" use(NSP)
values "gs_head_symbol_pen" use(NSP)

for i = 1 to nsp
	dummy = get(1)
next i


! ==============================================================================
! Uniform Surfaces
! ==============================================================================

dim	surfaceParNames[4]						:	dim	surfaceParameters[4]
	surfaceParNames[1]	= "gs_frame_mat"	:		surfaceParameters[1]	= gs_frame_mat
	surfaceParNames[2]	= "gs_sash_mat"		:		surfaceParameters[2]	= gs_sash_mat
	surfaceParNames[3]	= "gs_vertMull_mat"	:		surfaceParameters[3]	= gs_vertMull_mat
	surfaceParNames[4]	= "gs_midrail_mat"	:		surfaceParameters[4]	= gs_midrail_mat

_lastModSurfaceParameter = gs_frame_mat

if stored_material[1][1] <> -9999 then
	for i = 1 to vardim1(surfaceParNames)
		if GLOB_MODPAR_NAME = surfaceParNames[i] then
			_lastModSurfaceParameter	= surfaceParameters[i]
			stored_material[1][i]	= surfaceParameters[i]
			stored_material[2][i]	= 1

			for j = 1 to i-1
				stored_material[2][j]	= 0
				parameters stored_material[2][j]	= stored_material[2][j]
			next j

			for k = i+1 to vardim1(surfaceParNames)
				stored_material[2][k]	= 0
				parameters stored_material[2][k]	= stored_material[2][k]
			next k
		endif

		parameters	stored_material[1][i]	= stored_material[1][i],
					stored_material[2][i]	= stored_material[2][i]

		if stored_material[2][i] = 1 then
			_lastModSurfaceParameter = stored_material[1][i]
		endif
	next i
else
	gosub "preloadSurfaces"
endif

if bLinkSurfacesFrameSash then
	parameters	gs_frame_mat	= _lastModSurfaceParameter,
				gs_sash_mat		= _lastModSurfaceParameter,
				gs_vertMull_mat	= _lastModSurfaceParameter,
				gs_midrail_mat	= _lastModSurfaceParameter
else
	if GLOB_MODPAR_NAME = "bLinkSurfacesFrameSash" then
		parameters	gs_frame_mat	= stored_material[1][1],
					gs_sash_mat		= stored_material[1][2],
					gs_vertMull_mat	= stored_material[1][3],
					gs_midrail_mat	= stored_material[1][4]
	else
		gosub "preloadSurfaces"
	endif
endif

values "endFrameLeft" stEndFrameProfile
values "iEndFrameLeft" 1, 2, 3

if GLOB_MODPAR_NAME = "endFrameLeft" then
	iEndFrameLeft = ENDFRAME_NORMAL
	if endFrameLeft = stEndFrameProfile[2] then iEndFrameLeft = ENDFRAME_JOINT
	if endFrameLeft = stEndFrameProfile[3] then iEndFrameLeft = ENDFRAME_CORNER
	parameters iEndFrameLeft = iEndFrameLeft
else
	endFrameLeft = stEndFrameProfile[max(1, min(iEndFrameLeft,vardim1(stEndFrameProfile)))]
	parameters endFrameLeft = endFrameLeft
endif

values "endFrameRight" stEndFrameProfile
values "iEndFrameRight" 1, 2, 3

if GLOB_MODPAR_NAME = "endFrameRight" then
	iEndFrameRight = ENDFRAME_NORMAL
	if endFrameRight = stEndFrameProfile[2] then iEndFrameRight = ENDFRAME_JOINT
	if endFrameRight = stEndFrameProfile[3] then iEndFrameRight = ENDFRAME_CORNER
	parameters iEndFrameRight = iEndFrameRight
else
	endFrameRight = stEndFrameProfile[max(1, min(iEndFrameRight,vardim1(stEndFrameProfile)))]
	parameters endFrameRight = endFrameRight
endif

if iEndFrameLeft = ENDFRAME_CORNER then
	values "frameStyleLeft" stFrameStyle[1], stFrameStyle[2], stFrameStyle[3], stFrameStyle[4]
	values "iFrameStyleLeft" 1, 2, 3, 4
else
	values "frameStyleLeft" stFrameStyle[1], stFrameStyle[2]
	values "iFrameStyleLeft" 1, 2
endif

if iEndFrameRight = ENDFRAME_CORNER then
	VALUES "frameStyleRight" stFrameStyle[1], stFrameStyle[2], stFrameStyle[3], stFrameStyle[4]
	values "iFrameStyleRight" 1, 2, 3, 4
else
	VALUES "frameStyleRight" stFrameStyle[1], stFrameStyle[2]
	values "iFrameStyleRight" 1, 2
endif

if GLOB_MODPAR_NAME = "frameStyleLeft" then
	iFrameStyleLeft = FRAME_STYLE_VISIBLE_MULLIONS
	if frameStyleLeft = stFrameStyle[2] then iFrameStyleLeft = FRAME_STYLE_BUTT_GLAZED
	if iEndFrameLeft = ENDFRAME_CORNER then
		if frameStyleLeft = stFrameStyle[3] then iFrameStyleLeft = FRAME_STYLE_BUTT_GLAZED_WO_FRAME
		if frameStyleLeft = stFrameStyle[4] then iFrameStyleLeft = FRAME_STYLE_ANGLE_FRAME
	endif
	parameters iFrameStyleLeft = iFrameStyleLeft
else
	frameStyleLeft = stFrameStyle[max(1, min(iFrameStyleLeft, vardim1(stFrameStyle)))]
	parameters frameStyleLeft = frameStyleLeft
endif

if GLOB_MODPAR_NAME = "frameStyleRight" then
	iFrameStyleRight = FRAME_STYLE_VISIBLE_MULLIONS
	if frameStyleRight = stFrameStyle[2] then iFrameStyleRight = FRAME_STYLE_BUTT_GLAZED
	if iEndFrameRight = ENDFRAME_CORNER then
		if frameStyleRight = stFrameStyle[3] then iFrameStyleRight = FRAME_STYLE_BUTT_GLAZED_WO_FRAME
		if frameStyleRight = stFrameStyle[4] then iFrameStyleRight = FRAME_STYLE_ANGLE_FRAME
	endif
	parameters iFrameStyleRight = iFrameStyleRight
else
	frameStyleRight = stFrameStyle[max(1, min(iFrameStyleRight, vardim1(stFrameStyle)))]
	parameters frameStyleRight = frameStyleRight
endif

if iEndFrameLeft <> ENDFRAME_NORMAL then
	gs_tolerance_left = 0
	parameters gs_tolerance_left = gs_tolerance_left
	lock "gs_tolerance_left"
endif

if iEndFrameRight <> ENDFRAME_NORMAL then
	gs_tolerance_right = 0
	parameters gs_tolerance_right = gs_tolerance_right
	lock "gs_tolerance_right"
endif

if gs_stack_top then
	gs_tolerance_upper = 0
	parameters gs_tolerance_upper = gs_tolerance_upper
	lock "gs_tolerance_upper"
endif
if gs_stack_bottom then
	gs_tolerance_lower = 0
	parameters gs_tolerance_lower = gs_tolerance_lower
	lock "gs_tolerance_lower"
endif

! ===== Show / Hide 2D Fills  =====

if not(gs_bFills) then
	hideparameter	"gs_fillFr",
					"gs_penFr_fg",
					"gs_penFr_bg",
					"gs_gsect",
					"gs_penGlass_fg",
					"gs_penGlass_bg"
endif

if iFrameStyleMullion = FRAME_STYLE_VISIBLE_MULLIONS then
	if gs_grid_thk>gs_fthk then
		PARAMETERS gs_grid_thk=gs_fthk
	endif
endif

if iFrameStyleMullion = FRAME_STYLE_BUTT_GLAZED then
	if gs_grid_thk>gs_fthk-gs_gsb then
		PARAMETERS gs_grid_thk=gs_fthk-gs_gsb
	endif
endif

if iFrameStyleMullion = FRAME_STYLE_VISIBLE_MULLIONS then
	if gridThkVert>gs_fthk then
		PARAMETERS gridThkVert=gs_fthk
	endif
endif

if iFrameStyleMullion = FRAME_STYLE_BUTT_GLAZED then
	if gridThkVert>gs_fthk-(gs_glass_thk*(dtlev)+gs_gsb) then
		PARAMETERS gridThkVert=gs_fthk-(gs_glass_thk*(dtlev)+gs_gsb)
	endif
endif

if iEndFrameLeft <> ENDFRAME_CORNER then
	HIDEPARAMETER "leftCornerAngle"
else
	values "leftCornerAngle" range(0, 180), range(180, 360)
endif

if iEndFrameRight <> ENDFRAME_CORNER then
	HIDEPARAMETER "rightCornerAngle"
else
	values "rightCornerAngle" range(0, 180), range(180, 360)
endif

values "midRailWidth" range(0, ]
values "bottomRailWidth" range(0, ]

if gs_UTrans then
	if transomHeight < gs_fw_upper+(gs_hor_gtp*2+1)*gs_grid_w then PARAMETERS transomHeight = gs_fw_upper+(gs_hor_gtp*2+1)*gs_grid_w

	if bMiddleRail then
		if transomHeight > ac_unit_height-midRailElevation-midRailWidth/2-(gs_hor_gnumtr*2+1)*gs_grid_w then
			PARAMETERS transomHeight = ac_unit_height-midRailElevation-midRailWidth/2-(gs_hor_gnumtr*2+1)*gs_grid_w
		endif
	else
		if transomHeight > ac_unit_height-bottomRailWidth-(gs_hor_gnumtr*2+1)*gs_grid_w then
			PARAMETERS transomHeight = ac_unit_height-bottomRailWidth-(gs_hor_gnumtr*2+1)*gs_grid_w
		endif
	endif
else
	hideparameter	"transomHeight",
					"divWidthVertTransom",
					"nVertDivTransom"
	lock	"transomHeight",
			"divWidthVertTransom",
			"nVertDivTransom"
endif

if bMiddleRail then
	if midRailElevation < (2*gs_hor_gnum+1)*gs_grid_w + gs_fw_lower + midRailWidth/2 then
		PARAMETERS midRailElevation = (2*gs_hor_gnum+1)*gs_grid_w + gs_fw_lower + midRailWidth/2
	endif
	if midRailElevation > ac_unit_height-frameOrTransomHeight-(gs_hor_gnumtr*2+1)*gs_grid_w-midRailWidth/2 then
		PARAMETERS midRailElevation = ac_unit_height-frameOrTransomHeight-(gs_hor_gnumtr*2+1)*gs_grid_w-midRailWidth/2
	endif
else
	hideparameter	"midRailElevation",
					"midRailWidth",
					"divWidthVertBottom",
					"nVertDivBottom"
	lock	"midRailElevation",
			"midRailWidth",
			"divWidthVertBottom",
			"nVertDivBottom"
endif

if gs_bSLight then
	if gs_SLight_w < gs_fw_side_left+gs_frame_width+EPS then parameters gs_SLight_w = gs_fw_side_left+gs_frame_width+EPS
	if gs_SLight_w > ac_unit_width-frameOrSLightWidthRight - 2*gs_frame_width-(gs_ver_gnum*2+1)*gs_grid_w then
		parameters gs_SLight_w = ac_unit_width-frameOrSLightWidthRight - 2*gs_frame_width-(gs_ver_gnum*2+1)*gs_grid_w
	endif
else
	hideparameter "gs_SLight_w"
	lock "gs_SLight_w"
endif

if gs_bSLight2 then
	if gs_SLight_w2 < gs_fw_side_right+gs_frame_width+EPS then parameters gs_SLight_w2 = gs_fw_side_right+gs_frame_width+EPS
	if gs_SLight_w2 > ac_unit_width-frameOrSLightWidthLeft - 2*gs_frame_width-(gs_ver_gnum*2+1)*gs_grid_w then
		parameters gs_SLight_w2 = ac_unit_width-frameOrSLightWidthLeft - 2*gs_frame_width-(gs_ver_gnum*2+1)*gs_grid_w
	endif
else
	hideparameter "gs_SLight_w2"
	lock "gs_SLight_w2"
endif

VALUES "frameStyleMullion"  stFrameStyle[1],stFrameStyle[2]
VALUES "iFrameStyleMullion" 1, 2

if GLOB_MODPAR_NAME = "frameStyleMullion" then
	iFrameStyleMullion = FRAME_STYLE_VISIBLE_MULLIONS
	if frameStyleMullion = stFrameStyle[2] then iFrameStyleMullion = FRAME_STYLE_BUTT_GLAZED
	parameters iFrameStyleMullion = iFrameStyleMullion
else
	frameStyleMullion = stFrameStyle[max(1, min(iFrameStyleMullion, vardim1(stFrameStyle)))]
	parameters frameStyleMullion = frameStyleMullion
endif

VALUES "divisionMethod" stDivisionMethod
values "iDivisionMethod" 1, 2

if GLOB_MODPAR_NAME = "divisionMethod" then
	iDivisionMethod = DIVISION_NUM
	if divisionMethod= stDivisionMethod[2] then iDivisionMethod = DIVISION_WIDTH
	parameters iDivisionMethod = iDivisionMethod
else
	divisionMethod = stDivisionMethod[max(1, min(iDivisionMethod, vardim1(stDivisionMethod)))]
	parameters divisionMethod = divisionMethod
endif

if iDivisionMethod = DIVISION_NUM then
	HIDEPARAMETER "divWidthHor","divWidthVertBottom","divWidthVertMiddle","divWidthVertTransom"
endif

if iDivisionMethod = DIVISION_WIDTH then
	HIDEPARAMETER "nVertDivTransom","gs_hor_gtp","nVertDivBottom","gs_hor_gnum","nHorDivision","gs_ver_gnum","nVertDivMiddle","gs_hor_gnumtr"
endif


!! MULLION DEPTH=FRAME DEPTH !!
if gs_md = 1 then
	gs_grid_thk = gs_fthk
	PARAMETERS gs_grid_thk = gs_grid_thk
	gridThkVert = gs_fthk
	PARAMETERS gridThkVert = gridThkVert
	HIDEPARAMETER "gs_grid_thk", "gridThkVert"
	LOCK "gs_grid_thk", "gridThkVert"
endif
!! END OF MULLION DEPTH=FRAME DEPTH !!

!! GLASS SETBACK=1/2 MULLION !!
if gs_gsmd=1 then
	gs_gsb = MIN(gs_grid_thk,gridThkVert)/2-gs_glass_thk/2
	PARAMETERS gs_gsb = gs_gsb
	HIDEPARAMETER "gs_gsb"
	LOCK "gs_gsb"
endif
!! END OF GLASS SETBACK=1/2 MULLION !!

! =============================================================================
! Onorm list Settings
! =============================================================================

if LibraryLangCode = "AUT" or LibraryLangCode = "CHE" or LibraryLangCode = "GER" then
	call "Onorm_Window" parameters all
	hideparameter "gs_window_oversize"
else
	hideparameter "gs_onorm_Title"
endif

end


"preloadSurfaces":
	parameters	stored_material[1][1]	= gs_frame_mat,
				stored_material[1][2]	= gs_sash_mat,
				stored_material[1][3]	= gs_vertMull_mat,
				stored_material[1][4]	= gs_midrail_mat
return


"GlasAreaCalculation":

	GlasWidth			= ac_unit_width - 2 * gs_frame_width
	GlasHeight			= ac_unit_height - gs_frame_width - bottomRailWidth
	GlasArea			= GlasWidth * GlasHeight

	SumFrameArea 		= 0
	MiddleRailArea		= midRailWidth * GlasWidth * bMiddleRail
	TransomFrameArea	= gs_frame_width * GlasWidth * gs_UTrans
	SideLightFrameArea	= gs_frame_width * GlasHeight * gs_bSLight
	SideLightFrameArea2	= gs_frame_width * GlasHeight * gs_bSLight2
	FrameSectionArea	= gs_frame_width * gs_frame_width * gs_UTrans * gs_bSLight + \
							gs_frame_width * gs_frame_width * gs_UTrans * gs_bSLight2 + \
							midRailWidth * gs_frame_width * bMiddleRail * gs_bSLight + \
							midRailWidth * gs_frame_width * bMiddleRail * gs_bSLight2
	SumFrameArea		= MiddleRailArea + TransomFrameArea + SideLightFrameArea + SideLightFrameArea2 - FrameSectionArea

	SumGrillArea		 = 0
	SummHorGrillNum		= gs_hor_gnum + gs_hor_gnumtr + gs_hor_gtp
	VerticalGrillArea	= gs_ver_gnum * GlasHeight * gridWidthVert
	HorizontalGrillArea	= SummHorGrillNum * GlasWidth * gs_grid_w
	HorSLSectArea		= SummHorGrillNum * gs_frame_width * gs_grid_w * gs_bSLight + \
						SummHorGrillNum * gs_frame_width * gs_grid_w * gs_bSLight2
	VerTRSectArea		= gs_ver_gnum * gs_frame_width * gridWidthVert * gs_UTrans + \
						gs_ver_gnum * midRailWidth * gridWidthVert * bMiddleRail
	GrillSectArea		= SummHorGrillNum * gs_ver_gnum * gs_grid_w * gridWidthVert
	SumSectionArea		= HorSLSectArea + VerTRSectArea + GrillSectArea
	SumGrillArea		= VerticalGrillArea + HorizontalGrillArea - SumSectionArea

	SumGlassArea		= GlasArea - SumFrameArea - SumGrillArea

	! =============================================================================
	! Total Glazed Area Listing Parameters
	! =============================================================================
	if NOT(gs_list_glassarea_override) then
		if GLOB_MODPAR_NAME = "gs_list_glassarea" then
			gs_list_glassarea_tmp = gs_list_glassarea
			parameters gs_list_glassarea_tmp = gs_list_glassarea_tmp
		else
			gs_list_glassarea = gs_list_glassarea_tmp
			parameters gs_list_glassarea = gs_list_glassarea
		endif

		gs_list_glassarea = SumGlassArea
		parameters gs_list_glassarea = gs_list_glassarea

		lock "gs_list_glassarea"
	else
		if GLOB_MODPAR_NAME = "gs_list_glassarea" then
			gs_list_glassarea_tmp = gs_list_glassarea
			parameters gs_list_glassarea_tmp = gs_list_glassarea_tmp
		else
			gs_list_glassarea = gs_list_glassarea_tmp
			parameters gs_list_glassarea = gs_list_glassarea
		endif
	endif
return
