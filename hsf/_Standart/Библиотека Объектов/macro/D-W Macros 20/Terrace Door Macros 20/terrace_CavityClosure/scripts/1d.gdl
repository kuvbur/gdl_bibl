
! const values for parameter: iTypeDemolitionFill
RENOVATION_FILL_EXIST      = 1
RENOVATION_FILL_DEMOLISHED = 2
RENOVATION_FILL_NEW        = 3


! const values for parameter: iCustomCCEditWallSide
EDITED_WALL_FACE_OUTSIDE = 1
EDITED_WALL_FACE_INSIDE  = 2


! const values for parameter: iCustomCCEditJambSide
EDITED_JAMB_SIDE_BOTH  = 1
EDITED_JAMB_SIDE_LEFT  = 2
EDITED_JAMB_SIDE_RIGHT = 3


! const values for parameter: iCustomCCThicknessType
THICKNESS_TYPE_ORIGINAL = 1
THICKNESS_TYPE_CUSTOM   = 2


! const values for parameter: iCustomCCEditSkin
EDITED_SKIN_1 = 1
EDITED_SKIN_2 = 2
EDITED_SKIN_3 = 3
EDITED_SKIN_4 = 4


! const values for parameter: iCustomCCOrientation
ORIENTATION_ORIGINAL  = 1
ORIENTATION_TURNED_IN = 2

EPS = 0.0001

! ==============================================================================

! iRevealType:
REVEAL_EDGE				= 0
REVEAL_NO				= 1
REVEAL_POSITIVE			= 2
REVEAL_NEGATIVE			= 3
REVEAL_SLANTED			= 4
REVEAL_SPLAYED			= 5
REVEAL_HISTORIC			= 6
REVEAL_DOUBLE			= 7
REVEAL_DOUBLE_SPLAYED	= 8
REVEAL_OUTSIDE_SPLAYED	= 9


! ==============================================================================

curvedWall	= abs(WIDO_ORIG_DIST) > EPS

bRotAngle180 = SYMB_ROTANGLE > EPS
wallIsLeft	= bRotAngle180 exor WIDO_REVEAL_SIDE
signWallIsLeft	= wallIsleft - not(wallIsleft)


! ==============================================================================
! Compatibility
! ==============================================================================

if refWidth < EPS then refWidth = A
if leftWidth < EPS then leftWidth = A / 2
if rightWidth < EPS then rightWidth = A / 2


! ==============================================================================

CAVITY_SIDE_BOTH	= 1
CAVITY_SIDE_LEFT	= 2
CAVITY_SIDE_RIGHT	= 3

CAVITY_TURN_REFERENCE	= 1
CAVITY_TURN_OPPOSITE	= 2

CLOSURE_METHOD_NONE				= 1
CLOSURE_METHOD_TRADITIONAL		= 2
CLOSURE_METHOD_PREFABRICATED	= 3

gs_bTurnDir = (iCavityClosureTurnDir = CAVITY_TURN_REFERENCE)

! ==============================================================================
! Parameter Restrictions - only for the 2D and 3D scripts
! ==============================================================================

if GLOB_SCRIPT_TYPE = 2 | GLOB_SCRIPT_TYPE = 3 then
	if iRevealType = REVEAL_EDGE | iRevealType = REVEAL_NO then
		gs_reveal_left	= 0
		gs_reveal_right	= 0
	endif

	if iRevealType = REVEAL_EDGE | iRevealType = REVEAL_NO | iRevealType = REVEAL_POSITIVE | iRevealType = REVEAL_NEGATIVE then
		gs_reveal_left_angle  = 0
		gs_reveal_right_angle = 0
	endif

	if WIDO_SILL < EPS & (iRevealType = REVEAL_POSITIVE | iRevealType = REVEAL_NEGATIVE) then
		iRevealType = REVEAL_NO
	endif

	if not(gs_bJoint) then gs_thkJoint = 0
	if gs_thkJoint < EPS then gs_bJoint = 0

	if GLOB_SCRIPT_TYPE = 2 & AC_Hole_Display_Option = 5 then	! Overhead All
		gs_bAutoTurnIn		= 0		! Do not turn plasters in this display mode
		gs_bOverIn			= 0
		bDrawObjContourIn	= 1		! Always draw wall contour lines

		gs_bAutoTurnOut		= 0
		gs_bOverOut			= 0
		bDrawObjContourOut	= 1
	endif
endif


! ==============================================================================
! Calculations for Trapezoid Walls
! ==============================================================================

if abs(WALL_INCL) > EPS then
	bInclinedWall = 1
	bInclDir = SYMB_MIRRORED exor (SYMB_ROTANGLE > EPS)	! (0 / 1)
	iInclDir = not(bInclDir) - bInclDir					! (1 / -1)

	incH = cos(WALL_INCL)
	incV = sin(WALL_INCL) * iInclDir

	incHor = tan(WALL_INCL)
else
	bInclinedWall = 0
	bInclDir = 0
	iInclDir = 0

	incH = 0
	incV = 0

	incHor = 0
endif


! ==============================================================================
! Calculations for Curved Walls
! ==============================================================================

if curvedWall then

	widoOrigDist = -WIDO_ORIG_DIST

	if GLOB_SCRIPT_TYPE <> 5 then
		if GLOB_SCRIPT_TYPE = 2 | GLOB_CONTEXT = 22 then
			widoOrigDist =  WIDO_ORIG_DIST
		endif
	endif

	WOD = abs(widoOrigDist) - (SYMB_ROTANGLE > EPS) * WIDO_FRAME_THICKNESS

	leftAlfa	= atn(leftWidth / WOD)
	rightAlfa	= atn(rightWidth / WOD)

	bArchSign = (WIDO_REVEAL_SIDE exor SYMB_ROTANGLE > EPS)
	iArchSign = bArchSign - not(bArchSign)		! 1 / -1

	R = sqr((refWidth / 2)^2 + (WIDO_ORIG_DIST)^2)
	bulgeHeight = R + iArchSign * WIDO_SILL - abs(WIDO_ORIG_DIST)

	if bArchSign then
		bulgeHeightRefSide = R + WIDO_SILL - abs(WIDO_ORIG_DIST)
		bulgeHeightOppSide = 0
	else
		bulgeHeightRefSide = 0
		bulgeHeightOppSide = R - WIDO_SILL + WALL_THICKNESS - abs(WIDO_ORIG_DIST)
	endif

	if WIDO_REVEAL_SIDE then
		WOD = widoOrigDist + WIDO_FRAME_THICKNESS
	else
		WOD = -widoOrigDist
	endif

	if WIDO_REVEAL_SIDE exor SYMB_ROTANGLE < EPS then
		ySign = 1
		if WIDO_REVEAL_SIDE then
			rSill = sqr(refWidth^2 / 4 + WOD^2) - WIDO_SILL
			rBoard = rSill + WALL_THICKNESS
		else
			rSill = sqr(refWidth^2 / 4 + WOD^2) - WIDO_SILL
			rBoard = rSill + WALL_THICKNESS
		endif
	else
		ySign = -1
		if WIDO_REVEAL_SIDE then
			rBoard = sqr(refWidth^2 / 4 + WOD^2) + WIDO_SILL - WALL_THICKNESS
			rSill = rBoard + WALL_THICKNESS
		else
			rSill = sqr(refWidth^2 / 4 + WOD^2) + WIDO_SILL
			rBoard = rSill - WALL_THICKNESS
		endif
	endif

	rSillLine = rSill - iArchSign * WIDO_SILL	! Radius of the reveal at the Sill depth

	ArcLengthSillToAngle	= 180 / rSill / PI
!!!	ArcLengthBoardToAngle	= 180 / rBoard / PI

else
	WOD = 0
	bulgeHeightRefSide = 0
	bulgeHeightOppSide = 0
	leftAlfa	= 0
	rightAlfa	= 0
	iArchSign = 0
endif


! ==============================================================================
! Bounding Box of Polygon wall
! ==============================================================================

if AC_WallType = 2 then

	boundMinX =  1000
	boundMaxX = -1000
	boundMinY =  1000
	boundMaxY = -1000

	for i = 1 to vardim1(AC_WallContourPolygon)
		if boundMaxX < AC_WallContourPolygon[i][1] then boundMaxX = AC_WallContourPolygon[i][1]
		if boundMinX > AC_WallContourPolygon[i][1] then boundMinX = AC_WallContourPolygon[i][1]
		if boundMaxY < AC_WallContourPolygon[i][2] then boundMaxY = AC_WallContourPolygon[i][2]
		if boundMinY > AC_WallContourPolygon[i][2] then boundMinY = AC_WallContourPolygon[i][2]
	next i
else
	boundMinX = 0
	boundMaxX = 0
	boundMinY = 0
	boundMaxY = 0
endif


! ==============================================================================
! Cavity Closure
! ==============================================================================

reorder = (AC_Wall_Direction_Type <> 1 & AC_Wall_Direction_Type <> 3)
signReorder = not(reorder) - reorder

SKIN_FILL				=  1
SKIN_THICKNESS			=  2
SKIN_CONT_PEN			=  3	! Obsolete (old contour pen)
SKIN_FILL_PEN			=  4
SKIN_FILL_BACK_PEN		=  5
SKIN_CORE_STATUS		=  6
SKIN_UPPER_LINE_PEN		=  7 + 2 * reorder
SKIN_UPPER_LINE_TYPE	=  8 + 2 * reorder
SKIN_LOWER_LINE_PEN		=  9 - 2 * reorder
SKIN_LOWER_LINE_TYPE	= 10 - 2 * reorder
SKIN_END_FACE_PEN		= 11
SKIN_FILL_ORIENTATION	= 12	! 0 - global, 1 - local
SKIN_TYPE				= 13	! 0 - cut, 1 - below cutplane, 2 - above cutplane (all skin types are 0 for simple walls)
!	For D/W in complex walls on the floor plan this variable contains the data of all cut skins, for wall ends on the floor plan the data of all skins.
!	For D/W and wall ends in the 3D window contains the data of the skins actually cut by the D/W or wall end
SKIN_END_LINE_TYPE		= 14
SKIN_FINISH_STATUS		= 15
SKIN_FILL_FIT_TO_SKIN	= 16
SKIN_THICKEN_TRAPEZOID	= 17


! Line Property defines:
LINE_PROPERTY_GENERIC	= 0
LINE_PROPERTY_INNER		= 1
LINE_PROPERTY_CONTOUR	= 2


! Partial Stucture Display defines:
STRUCTURE_ENTIRE_STRUCTURE	= 0
STRUCTURE_CORE_ONLY			= 1
STRUCTURE_WITHOUT_FINISHES	= 2


! ==============================================================================

bCompositeWall		= (WALL_SKINS_NUMBER > 0)
bFirstSkinAtReveal	= (wallIsLeft exor reorder)

! --- find the last core skin ---
firstCoreSkin	= 0
lastCoreSkin	= 0
for i = 1 to WALL_SKINS_NUMBER
	idx = i: gosub 10	! Get proper index

	if abs(WALL_SKINS_PARAMS[idx][SKIN_CORE_STATUS] - 3) < EPS then
		if firstCoreSkin < 1 then
			firstCoreSkin = i
		endif
		lastCoreSkin = i
	endif
next i

if firstCoreSkin = 0 then
	firstCoreSkin = WALL_SKINS_NUMBER
endif

gs_maxPlasterThkIn	= gs_maxPlasterThk
gs_maxPlasterThkOut	= gs_maxPlasterThk


! ==============================================================================
! Partial Stucture Display related calculations
! ==============================================================================

offsetSill	= 0
offsetBoard	= 0
bRevealInDisplayedStructure = 1
bOneFillAtRevealSide		= 1

if GLOB_SCRIPT_TYPE = 2 | GLOB_SCRIPT_TYPE = 3 then
	if GLOB_STRUCTURE_DISPLAY <> STRUCTURE_ENTIRE_STRUCTURE then

		if bCompositeWall then

			offsetInside		= 0
			offsetOutside		= 0

			for i = 1 to WALL_SKINS_NUMBER

				bShowSkin = (GLOB_STRUCTURE_DISPLAY = STRUCTURE_WITHOUT_FINISHES & abs(WALL_SKINS_PARAMS[i][SKIN_FINISH_STATUS] - 1) > EPS) | \
							(GLOB_STRUCTURE_DISPLAY = STRUCTURE_CORE_ONLY & WALL_SKINS_PARAMS[i][SKIN_CORE_STATUS] > EPS)

				if not(bShowSkin) then
					offsetInside = offsetInside + WALL_SKINS_PARAMS[i][SKIN_THICKNESS]
				else
					i = WALL_SKINS_NUMBER	! Break loop
				endif
			next i

			for i = WALL_SKINS_NUMBER to 1 step -1

				bShowSkin = (GLOB_STRUCTURE_DISPLAY = STRUCTURE_WITHOUT_FINISHES & abs(WALL_SKINS_PARAMS[i][SKIN_FINISH_STATUS] - 1) > EPS) | \
							(GLOB_STRUCTURE_DISPLAY = STRUCTURE_CORE_ONLY & WALL_SKINS_PARAMS[i][SKIN_CORE_STATUS] > EPS)

				if not(bShowSkin) then
					offsetOutside = offsetOutside + WALL_SKINS_PARAMS[i][SKIN_THICKNESS]
				else
					i = 1	! Break loop
				endif
			next i

			if wallIsLeft then
				offsetSill	= offsetInside
				offsetBoard	= offsetOutside
			else
				offsetSill	= offsetOutside
				offsetBoard	= offsetInside
			endif

			bRevealInDisplayedStructure	= (WIDO_REVEAL_ON & (offsetSill < WIDO_SILL) & (offsetBoard < WALL_THICKNESS - WIDO_SILL))
			bOneFillAtRevealSide		= (WIDO_REVEAL_ON & (offsetSill < WIDO_SILL))
		endif
	endif
endif

! ==============================================================================
! Determine number of turned plaster skins from the Outside Face
! ==============================================================================

nSkinTurnIn			= 0
maxSkinTurnIn		= 0
nFinishSkinTurnIn	= 0	! Number of finish state skins at inside
bCountMaxSkins		= 1
possibleSkinTurnIn	= 0
bCountPossibleSkins	= 1
lengthPlasterTurnIn	= bFirstSkinAtReveal * WIDO_SILL + not(bFirstSkinAtReveal) * (WALL_THICKNESS - WIDO_SILL - WIDO_FRAME_THICKNESS)

if GLOB_SCRIPT_TYPE <> 5 then
	if bCompositeWall then
		sumThk = 0
		for i = 1 to firstCoreSkin - 1
			idx = i: gosub 10	! Get proper index

			thisTkh = WALL_SKINS_PARAMS[idx][SKIN_THICKNESS]
			sumThk = sumThk + thisTkh

			if abs(WALL_SKINS_PARAMS[idx][SKIN_FINISH_STATUS] - 1) < EPS | GLOB_STRUCTURE_DISPLAY = STRUCTURE_CORE_ONLY then
				nFinishSkinTurnIn = nFinishSkinTurnIn + 1
			endif

			if thisTkh <= gs_maxPlasterThkIn + EPS then
				if bCountPossibleSkins then possibleSkinTurnIn = possibleSkinTurnIn + 1
			else
				bCountPossibleSkins = 0
			endif

			if bCountMaxSkins & (not(gs_bAutoTurnIn) | thisTkh <= gs_maxPlasterThkIn + EPS) then
				if bFirstSkinAtReveal then
					if sumThk <= WIDO_SILL - EPS then
						maxSkinTurnIn = maxSkinTurnIn + 1
					else
						bCountMaxSkins = 0
					endif
				else
					if sumThk <= WALL_THICKNESS - WIDO_SILL - WIDO_FRAME_THICKNESS - EPS then
						maxSkinTurnIn = maxSkinTurnIn + 1
					else
						bCountMaxSkins = 0
					endif
				endif
			else
				bCountMaxSkins = 0
			endif
		next i

		if gs_useWallFinishSkin then
			maxSkinTurnIn	= 0
			bCountMaxSkins	= 1

			for i = 1 to firstCoreSkin - 1
				idx = i: gosub 10	! Get proper index

				if bCountMaxSkins & abs(WALL_SKINS_PARAMS[idx][SKIN_FINISH_STATUS] - 1) < EPS then
					maxSkinTurnIn = maxSkinTurnIn + 1
				else
					bCountMaxSkins = 0
				endif
			next i
		endif

		if gs_bAutoTurnIn then
			nSkinTurnIn = maxSkinTurnIn
		else
			nSkinTurnIn = min(possibleSkinTurnIn, gs_bOverIn)
			nSkinTurnIn = max(nSkinTurnIn, 0)
		endif
		nFinishSkinTurnIn = min(nFinishSkinTurnIn, nSkinTurnIn)
	endif
endif

! ==============================================================================
! Determine number of turned plaster skins from the Inside Face
! ==============================================================================

nSkinTurnOut		= 0
maxSkinTurnOut		= 0
nFinishSkinTurnOut	= 0	! Number of finish state skins at outside
bCountMaxSkins		= 1
possibleSkinTurnOut	= 0
bCountPossibleSkins	= 1
lengthPlasterTurnOut= not(bFirstSkinAtReveal) * WIDO_SILL + bFirstSkinAtReveal * (WALL_THICKNESS - WIDO_SILL - WIDO_FRAME_THICKNESS)

if GLOB_SCRIPT_TYPE <> 5 then
	if bCompositeWall then
		sumThk = 0
		for i = WALL_SKINS_NUMBER to lastCoreSkin + 1 step -1
			idx = i: gosub 10	! Get proper index

			thisTkh = WALL_SKINS_PARAMS[idx][SKIN_THICKNESS]
			sumThk = sumThk + thisTkh

			if abs(WALL_SKINS_PARAMS[idx][SKIN_FINISH_STATUS] - 1) < EPS | GLOB_STRUCTURE_DISPLAY = STRUCTURE_CORE_ONLY then
				nFinishSkinTurnOut = nFinishSkinTurnOut + 1
			endif

			if thisTkh <= gs_maxPlasterThkOut + EPS then
				if bCountPossibleSkins then possibleSkinTurnOut = possibleSkinTurnOut + 1
			else
				bCountPossibleSkins = 0
			endif

			if bCountMaxSkins & (not(gs_bAutoTurnOut) | thisTkh <= gs_maxPlasterThkOut + EPS) then
				if bFirstSkinAtReveal then
					if sumThk <= WALL_THICKNESS - WIDO_SILL - WIDO_FRAME_THICKNESS - EPS then
						maxSkinTurnOut = maxSkinTurnOut + 1
					else
						bCountMaxSkins = 0
					endif
				else
					if sumThk <= WIDO_SILL - EPS then
						maxSkinTurnOut = maxSkinTurnOut + 1
					else
						bCountMaxSkins = 0
					endif
				endif
			else
				bCountMaxSkins = 0
			endif
		next i

		if gs_useWallFinishSkin then
			maxSkinTurnOut	= 0
			bCountMaxSkins	= 1

			for i = WALL_SKINS_NUMBER to lastCoreSkin + 1 step -1
				idx = i: gosub 10	! Get proper index

				if bCountMaxSkins & abs(WALL_SKINS_PARAMS[idx][SKIN_FINISH_STATUS] - 1) < EPS then
					maxSkinTurnOut = maxSkinTurnOut + 1
				else
					bCountMaxSkins = 0
				endif
			next i
		endif

		if gs_bAutoTurnOut then
			nSkinTurnOut = maxSkinTurnOut
		else
			nSkinTurnOut = min(possibleSkinTurnOut, gs_bOverOut)
			nSkinTurnOut = max(nSkinTurnOut, 0)
		endif
		nFinishSkinTurnOut = min(nFinishSkinTurnOut, nSkinTurnOut)
	endif
endif


! ==============================================================================
goto 1:
! ==============================================================================



! ==============================================================================
!		Calculate proper skin index from parameter 'idx'
! ------------------------------------------------------------------------------
! Input variables:
!	idx:	index of current skin
! Output variables:
!	idx:	index of skin via 'Composite Structures' dialog
! ==============================================================================

10:
	if reorder then
		idx = WALL_SKINS_NUMBER + 1 - idx
	endif
return

! ==============================================================================

1:

