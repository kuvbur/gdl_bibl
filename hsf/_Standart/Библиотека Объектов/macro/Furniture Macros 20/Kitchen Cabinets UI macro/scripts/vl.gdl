

! ================================================================================
! TabPages
! ================================================================================

bTabpage2 = 0
bTabpage3 = 0
bTabpage4 = 0
for iPage = 1 TO vardim1(pageIds)
	if pageIds[iPage] = 2 then
		bTabpage2 = 1
	endif
	if pageIds[iPage] = 3 then
		bTabpage3 = 1
	endif
	if pageIds[iPage] = 4 then
		bTabpage4 = 1
	endif
next iPage

call "FM_types" parameters all

! ================================================================================
! Cabinet Type, Counter Type
! ================================================================================

if CabinetType = BASE_CAB then
	values "bs_h"		range [0,)
	if gs_count_type_m <> 0 then
		values "count_th"	range (0,)
	endif
	values "front_cab"	range [0,)

	if MSFront < 0 then
		MSFront = 0
		parameters MSFront = MSFront
	endif
	values "gs_count_type"	st_counttype
	dim r_countType[]
	for iCountType = 1 to vardim1(st_counttype)
		r_countType[iCountType] = iCountType-1
	next iCountType
	values "gs_count_type_m"	r_countType
	values "cab_size_" `Корпус`,`Столешница`

	if GLOB_MODPAR_NAME = "cab_size_" then
		cab_size = 1
		if cab_size_ = `Столешница` then cab_size = 0
		parameters cab_size = cab_size
	else
		cab_size_ = `Корпус`
		if cab_size = 0 then cab_size_ = `Столешница`
		parameters cab_size_ = cab_size_
	endif
endif

! ================================================================================
! Detail Level
! ================================================================================


dim st_detail3D[3]
	st_detail3D[1] = `Детальный`
	st_detail3D[2] = `Простой`
	st_detail3D[3] = `Откл.`

values "gs_detlevel_3D" st_detail3D		!`Detailed`,`Simple`,`Off`
values "gs_detlevel_3D_m" 2, 1, 0

if GLOB_MODPAR_NAME = "gs_detlevel_3D" OR gs_detlevel_3D_m = -1 then
	gs_detlevel_3D_m = 2				! Detailed
	if gs_detlevel_3D = st_detail3D[3] then gs_detlevel_3D_m = 0	! Off
	if gs_detlevel_3D = st_detail3D[2] then gs_detlevel_3D_m = 1	! Simple
	parameters gs_detlevel_3D_m = gs_detlevel_3D_m
else
	gs_detlevel_3D = st_detail3D[1]		! Detailed
	if gs_detlevel_3D_m = 0 then gs_detlevel_3D = st_detail3D[3]	! Off
	if gs_detlevel_3D_m = 1 then gs_detlevel_3D = st_detail3D[2]	! Simple
	parameters gs_detlevel_3D = gs_detlevel_3D
endif

if bTabpage3 = 1 and bPossibleDrawerNum then
	values "numDrawers" 2, 1
endif

if bToe and bToeType then
	values "gs_toe_type" 	`Сплошное`,`Круглые`,`Прямоугольные`,`Нет`
	values "gs_toe_type_m" 	 0,1,2,3
endif

if nDoors > 0 then
	values "fr_th1" range [0.01,)
	values "gs_door_type" 	st_doortypes[2],
							st_doortypes[3],
							st_doortypes[4],
							st_doortypes[12],
							st_doortypes[13],
							st_doortypes[10],
							st_doortypes[5],
							st_doortypes[6],
							st_doortypes[7],
							st_doortypes[8],
							`Спец. панель`,
							st_doortypes[1]

	dim r_doortypes[]
	doorTypeIndex = 1
	for iDoorNum = 1 to vardim1(st_doortypes)
		if st_doortypes[iDoorNum] <> "" then
			r_doortypes[doorTypeIndex] = iDoorNum-1
			doorTypeIndex = doorTypeIndex + 1
		endif
	next iDoorNum
	r_doortypes[doorTypeIndex] = 99
	values "gs_door_type_m" r_doortypes
	values "door_ang"		range [0,180]
	values "doorframe_w"	range [0.03,)
	values "knob_size"		range [0.045,)
endif

if bTabpage4 = 1 then
	values "stEndPanelType" stEndPanelTypeValues
	values "iEndPanelType" 1, 2, 4, 7, 9, 99

	if GLOB_MODPAR_NAME = "stEndPanelType" then
		iEndPanelType = 1
		if stEndPanelType = stEndPanelTypeValues[2] then iEndPanelType = 2
		if stEndPanelType = stEndPanelTypeValues[3] then iEndPanelType = 4
		if stEndPanelType = stEndPanelTypeValues[4] then iEndPanelType = 7
		if stEndPanelType = stEndPanelTypeValues[5] then iEndPanelType = 9
		if stEndPanelType = stEndPanelTypeValues[6] then iEndPanelType = 99
		parameters iEndPanelType = iEndPanelType
	else
		stEndPanelType = stEndPanelTypeValues[1]
		if iEndPanelType = 2 then stEndPanelType = stEndPanelTypeValues[2]
		if iEndPanelType = 4 then stEndPanelType = stEndPanelTypeValues[3]
		if iEndPanelType = 7 then stEndPanelType = stEndPanelTypeValues[4]
		if iEndPanelType = 9 then stEndPanelType = stEndPanelTypeValues[5]
		if iEndPanelType = 99 then stEndPanelType = stEndPanelTypeValues[6]
		parameters stEndPanelType = stEndPanelType
	endif
endif

if nDoors > 0 then
	if GLOB_MODPAR_NAME = "gs_door_type" then
		for iDoor = 1 to vardim1(st_doortypes)
			if gs_door_type = st_doortypes[iDoor] then
				gs_door_type_m = iDoor - 1
			endif
		next iDoor
		if gs_door_type = `Спец. панель` then
			gs_door_type_m = 99
		endif
		parameters gs_door_type_m = gs_door_type_m
	else
		if gs_door_type_m < 99 then
			gs_door_type = st_doortypes[gs_door_type_m + 1]
		else
			gs_door_type = `Спец. панель`
		endif
		parameters gs_door_type = gs_door_type
	endif
endif

! --------------------------------------------------------------------------------
! Knobs
! --------------------------------------------------------------------------------

if bKnobParams then
	if bVerKnobPosition and bHorKnobPosition then
		values "gs_knob_p"	 st_knobplacing
		dim r_knobPos[]
		for iKnobPos = 1 to vardim1(st_knobplacing)
			r_knobPos[iKnobPos] = iKnobPos-1
		next iKnobPos
		values "gs_knob_p_m" r_knobPos

		if GLOB_MODPAR_NAME = "gs_knob_p" then
			for iKnob = 1 to vardim1(st_knobplacing)
				if gs_knob_p = st_knobplacing[iKnob] then
					gs_knob_p_m = iKnob - 1
				endif
			next iKnob
			parameters gs_knob_p_m = gs_knob_p_m
		else
			gs_knob_p = st_knobplacing[gs_knob_p_m+1]
			parameters gs_knob_p = gs_knob_p
		endif
	endif

	values "gs_knob_type"   st_knobtypes
	dim r_knobType[]
	for iKnobType = 1 to vardim1(st_knobtypes)
		r_knobType[iKnobType] = iKnobType-1
	next iKnobType
	values "gs_knob_type_m" r_knobType
	if GLOB_MODPAR_NAME = "gs_knob_type" then
		for iKnob = 1 to vardim1(st_knobtypes)
			if gs_knob_type = st_knobtypes[iKnob] then
				gs_knob_type_m = iKnob - 1
			endif
		next iKnob
		parameters gs_knob_type_m = gs_knob_type_m
	else
		gs_knob_type = st_knobtypes[gs_knob_type_m+1]
		parameters gs_knob_type = gs_knob_type
	endif

	if gs_knob_type_m = 9 then		! Custom
		dim gs_pt_handle[]

		call "Knob_Collection" parameters returned_parameters gs_pt_handle
		values "gs_cust_knob" gs_pt_handle
		lock "knob_size"
		hideparameter "knob_size"
	else
		lock "gs_cust_knob", "gs_customHandleLength", "gs_customHandleHeight", "gs_customHandleDepth"
		hideparameter "gs_cust_knob", "gs_customHandleLength", "gs_customHandleHeight", "gs_customHandleDepth"
	endif
endif


if CabinetType = BASE_CAB then
	if GLOB_MODPAR_NAME = "gs_count_type" then
		for iCount = 1 to vardim1(st_counttype)
			if gs_count_type = st_counttype[iCount] then
				gs_count_type_m = iCount - 1
			endif
		next iCount
		parameters gs_count_type_m = gs_count_type_m
	else
		gs_count_type_m = max(min(gs_count_type_m,vardim1(st_counttype)-1),0)
		gs_count_type = st_counttype[gs_count_type_m+1]
		parameters gs_count_type = gs_count_type
	endif
endif


if CabinetType <> WALL_CAB and bToe and bToeType then
	if GLOB_MODPAR_NAME = "gs_toe_type" then
		for iToe = 1 to vardim1(st_toetype)
			if gs_toe_type = st_toetype[iToe] then
				gs_toe_type_m = iToe -1
			endif
		next iToe
		parameters gs_toe_type_m = gs_toe_type_m
	else
		gs_toe_type = st_toetype[gs_toe_type_m+1]
		parameters gs_toe_type = gs_toe_type
	endif
endif


if possibleSinkTypes <> Sinks_NoSink then
	if abs(count_th)<EPS then
		parameters gs_sink_type_m = 0
		lock "gs_sink_type"
	endif

	if possibleSinkTypes = Sinks_Belfast1 or possibleSinkTypes = Sinks_Belfast2 then
		! Belfast Sinks
		if possibleSinkTypes = Sinks_Belfast1  then	iMaxSinkType = 3
		if possibleSinkTypes = Sinks_Belfast2  then	iMaxSinkType = 7
		dim st_activesinktypes[]
		dim i_activesinktypes[]
		for i = 1 to iMaxSinkType
			st_activesinktypes[iMaxSinkType-i+1] = st_sinktypes[iMaxSinkType-i+2]
			i_activesinktypes[iMaxSinkType-i+1] = iMaxSinkType-i+1
		next i
		values "gs_sink_type" 	st_activesinktypes
		values "gs_sink_type_m"	i_activesinktypes
	else
		! non-Belfast, normal sinks
		if possibleSinkTypes = Sinks_Max2  then	iMaxSinkType = 2
		if possibleSinkTypes = Sinks_Max7  then	iMaxSinkType = 7
		if possibleSinkTypes = Sinks_Max14 then	iMaxSinkType = 14
		dim st_activesinktypes[]
		dim i_activesinktypes[]
		for i = 0 to iMaxSinkType
			st_activesinktypes[iMaxSinkType-i+1] = st_sinktypes[iMaxSinkType-i+1]
			i_activesinktypes[iMaxSinkType-i+1] = iMaxSinkType-i
		next i
		values "gs_sink_type" 	st_activesinktypes
		values "gs_sink_type_m"	i_activesinktypes
	endif

	if GLOB_MODPAR_NAME = "gs_sink_type" then
		for iType = 1 to vardim1(st_sinktypes)
			if gs_sink_type = st_sinktypes[iType] then
				gs_sink_type_m = iType - 1
			endif
		next iType
		parameters gs_sink_type_m = gs_sink_type_m
	else
		gs_sink_type = st_sinktypes[gs_sink_type_m+1]
		parameters gs_sink_type = gs_sink_type
	endif

	if possibleSinkTypes <> Sinks_Belfast1 and possibleSinkTypes <> Sinks_Belfast2 then
		call "tapType_m" parameters	all	enableTapGroups			= 0,
										enableSingleLevelTaps	= 0,
										enableTwoHandleTaps		= 0,
										enableTraditionalTaps	= 0,
										enableSensorFaucets		= 0,
										enableWallMountedTaps	= 0,
										enableCustomTaps		= 2 + 2**2 + 2**3 + 2**4 + 2**5 + 2**6 + 2**7 + 2**8 + 2**9,
										bEnableTapEdit			= 0,
										bShower 				= 0,
										enableTapSymbols		= 2 + 4 + 8 + 32
	endif

	if bPossibleSinknTap then
		if bDrainSymb then
			values "SinkSymbol" st_symbol[5], st_symbol[4], st_symbol[3]
			values "SinkSymbol_m" 	1, 2, 3
		else
			values "SinkSymbol" st_symbol[4], st_symbol[3]
			values "SinkSymbol_m" 	1, 2
		endif

		if GLOB_MODPAR_NAME = "SinkSymbol" then
			if SinkSymbol = st_symbol[3] then SinkSymbol_m = 1
			if SinkSymbol = st_symbol[4] then SinkSymbol_m = 2
			if SinkSymbol = st_symbol[5] then SinkSymbol_m = 3
			parameters SinkSymbol_m  = SinkSymbol_m
		else
			if SinkSymbol_m = 1 then SinkSymbol = st_symbol[3]
			if SinkSymbol_m = 2 then SinkSymbol = st_symbol[4]
			if SinkSymbol_m = 3 then SinkSymbol = st_symbol[5]
			parameters SinkSymbol = SinkSymbol
		endif
	endif
endif

if bCabSymbol then
	values "stCabSymbolType2D" stCabSymbolType2DValues
	values "iCabSymbolType2D" 1, 2, 3, 4

	if GLOB_MODPAR_NAME = "stCabSymbolType2D" then
		iCabSymbolType2D = 1
		if stCabSymbolType2D = stCabSymbolType2DValues[2] then iCabSymbolType2D = 2
		if stCabSymbolType2D = stCabSymbolType2DValues[3] then iCabSymbolType2D = 3
		if stCabSymbolType2D = stCabSymbolType2DValues[4] then iCabSymbolType2D = 4
		parameters iCabSymbolType2D = iCabSymbolType2D
	else
		stCabSymbolType2D = stCabSymbolType2DValues[1]
		if iCabSymbolType2D = 2 then stCabSymbolType2D = stCabSymbolType2DValues[2]
		if iCabSymbolType2D = 3 then stCabSymbolType2D = stCabSymbolType2DValues[3]
		if iCabSymbolType2D = 4 then stCabSymbolType2D = stCabSymbolType2DValues[4]
		parameters stCabSymbolType2D = stCabSymbolType2D
	endif
endif
values "gs_resol"	range [4,)

if bShelf then
	values "shelf_num"	range [0,)
endif
if bToe then
	values "toe_h"		range (0,)
endif

if bSidePanels then
	values "left_cab"	range [0,)
	values "right_cab"	range [0,)

	if CornCabType <> CORNER_NO_CORN then
		values "lrear_cab" range [0,)
		values "rrear_cab" range [0,)
	else
		values "rear_cab"	range [0,)
	endif
endif

if CornCabType <> CORNER_NO_CORN and SYMB_MIRRORED and bSidePanels then
	values "lrear_cab_mirror" range [0,)
	values "rrear_cab_mirror" range [0,)
	values "left_cab_mirror" range [0,)
	values "right_cab_mirror" range [0,)
endif


if bTabpage4 = 1 then
	values "doorframe_w_end"	range [0.03,)
endif


! --- Custom Elements ---------------------------------------------------------

dim gs_pt[]

if gs_door_type_m = 99 then
	call "Object_Panel_Collection" parameters returned_parameters gs_pt
	values "gs_cust_p" gs_pt
endif

if iEndPanelType = 99 then
	call "Object_Panel_Collection" parameters returned_parameters gs_pt
	values "gs_cust_p_end" gs_pt
endif

! --- Handling mirroring issues -----------------------------------------------

if CabinetType <> WALL_CAB then
	if bEdgeRightOrBoth then
		values "side_vis" 			st_sidevis[3], st_sidevis[4]
		values "side_vis_mirror" 	st_sidevis[2], st_sidevis[4]
		values "side_vis_m" 2, 3
	else
		values "side_vis" 			st_sidevis
		dim r_sideVis[]
		for iSideVis = 1 to vardim1(st_sidevis)
			r_sideVis[iSideVis] = iSideVis-1
		next iSideVis
		values "side_vis_m" 		r_sideVis
		values "side_vis_mirror" 	st_sidevis
	endif
endif

if bEdgeRightOrBoth then
	values "side_vis2D"			st_sidevis[3], st_sidevis[4]
	values "side_vis2D_mirror"	st_sidevis[2], st_sidevis[4]
	values "side_vis2D_m" 2, 3

else
	values "side_vis2D"			st_sidevis
	values "side_vis2D_mirror" 	st_sidevis
	dim r_sideVis2D[]
	for iSideVis2D = 1 to vardim1(st_sidevis)
		r_sideVis2D[iSideVis2D] = iSideVis2D-1
	next iSideVis2D
	values "side_vis2D_m" 		r_sideVis2D
endif

! --- Visible Edges -------------------------------------------------------
if SYMB_MIRRORED then
	if CabinetType <> WALL_CAB then
		if GLOB_MODPAR_NAME = "side_vis_mirror" then
			if bEdgeRightOrBoth then
				if side_vis_mirror = st_sidevis[2] then side_vis_m = 2
				if side_vis_mirror = st_sidevis[4] then side_vis_m = 3		
			else
				for iVis = 1 to vardim1(st_sidevis)
					if side_vis_mirror = st_sidevis[iVis] then
						side_vis_m = ((iVis - 1) mod 2) * 2 + int((iVis - 1)/2)
					endif
				next iVis
			endif
			parameters side_vis_m = side_vis_m
		else
			if bEdgeRightOrBoth then
				if side_vis_m = 2 then side_vis_mirror = st_sidevis[2]
				if side_vis_m = 3 then side_vis_mirror = st_sidevis[4]	
			else
				side_vis_mirror = st_sidevis[(side_vis_m mod 2) * 2 + int(side_vis_m/2) + 1]
			endif
			parameters side_vis_mirror = side_vis_mirror
		endif
		side_vis = st_sidevis[side_vis_m+1]
		parameters side_vis = side_vis

		hideparameter "side_vis"
	endif

	if GLOB_MODPAR_NAME = "side_vis2D_mirror" then
		if bEdgeRightOrBoth then
			if side_vis2D_mirror = st_sidevis[2] then side_vis2D_m = 2
			if side_vis2D_mirror = st_sidevis[4] then side_vis2D_m = 3		
		else
			for iVism = 1 to vardim1(st_sidevis)
				if side_vis2D_mirror = st_sidevis[iVism] then
					side_vis2D_m = ((iVism - 1) mod 2) * 2 + int((iVism - 1)/2)
				endif
			next iVism
		endif
		parameters side_vis2D_m = side_vis2D_m
	else
		if bEdgeRightOrBoth then
			if side_vis2D_m = 2 then side_vis2D_mirror = st_sidevis[2] 
			if side_vis2D_m = 3 then side_vis2D_mirror = st_sidevis[4] 	
		else
			side_vis2D_mirror = st_sidevis[(side_vis2D_m mod 2) * 2 + int(side_vis2D_m/2) + 1]
		endif
		parameters side_vis2D_mirror = side_vis2D_mirror
	endif
	side_vis2D = st_sidevis[side_vis_m+1]
	parameters side_vis2D = side_vis2D

	hideparameter "side_vis2D"
else
	if CabinetType <> WALL_CAB then
		if GLOB_MODPAR_NAME = "side_vis" then
			for iVis = 1 to vardim1(st_sidevis)
				if side_vis = st_sidevis[iVis] then
					side_vis_m = iVis - 1
				endif
			next iVis
			parameters side_vis_m = side_vis_m
		else
			side_vis = st_sidevis[side_vis_m+1]
			parameters side_vis = side_vis
		endif
		side_vis_mirror = st_sidevis[(side_vis_m mod 2) * 2 + int(side_vis_m/2) + 1]
		parameters side_vis_mirror = side_vis_mirror

		hideparameter "side_vis_mirror"
	endif

	if GLOB_MODPAR_NAME = "side_vis2D" then
		for iVis2 = 1 to vardim1(st_sidevis)
			if side_vis2D = st_sidevis[iVis2] then
				side_vis2D_m = iVis2 - 1
			endif
		next iVis2
		parameters side_vis2D_m = side_vis2D_m
	else
		side_vis2D = st_sidevis[side_vis2D_m+1]
		parameters side_vis2D = side_vis2D
	endif
	side_vis2D_mirror = st_sidevis[(side_vis2D_m mod 2) * 2 + int(side_vis2D_m/2) + 1]
	parameters side_vis2D_mirror = side_vis2D_mirror

	hideparameter "side_vis2D_mirror"
endif

if bMirror then
	if SYMB_MIRRORED then
		parameters left_panel = right_panel_mirror
		parameters right_panel = left_panel_mirror
		hideparameter "left_panel"
		hideparameter "right_panel"
		if CornCabType <> CORNER_NO_CORN	then
			parameters lrear_panel = rrear_panel_mirror
			parameters rrear_panel = lrear_panel_mirror
			hideparameter "lrear_panel"
			hideparameter "rrear_panel"
		endif
	else
		parameters left_panel_mirror = right_panel
		parameters right_panel_mirror = left_panel
		hideparameter "left_panel_mirror"
		hideparameter "right_panel_mirror"
		if CornCabType <> CORNER_NO_CORN	then
			parameters lrear_panel_mirror = rrear_panel
			parameters rrear_panel_mirror = lrear_panel
			hideparameter "lrear_panel_mirror"
			hideparameter "rrear_panel_mirror"
		endif
	endif
endif
if CabinetType = BASE_CAB and \
		((CornCabType <> CORNER_NO_CORN) and bSidePanels or \
		 bCounterOverhang) then
	if SYMB_MIRRORED then
		parameters left_cab = right_cab_mirror
		parameters right_cab = left_cab_mirror
		hideparameter "left_cab"
		hideparameter "right_cab"
	else
		parameters left_cab_mirror  = right_cab
		parameters right_cab_mirror  = left_cab
		hideparameter "left_cab_mirror"
		hideparameter "right_cab_mirror"
	endif
endif
if CabinetType = BASE_CAB and (CornCabType <> CORNER_NO_CORN) and bSidePanels then
	if SYMB_MIRRORED then
		parameters lrear_cab = rrear_cab_mirror
		parameters rrear_cab = lrear_cab_mirror
		hideparameter "lrear_cab"
		hideparameter "rrear_cab"
	else
		parameters lrear_cab_mirror  = rrear_cab
		parameters rrear_cab_mirror = lrear_cab
		hideparameter "lrear_cab_mirror"
		hideparameter "rrear_cab_mirror"
	endif
else
	if CabinetType = BASE_CAB or CabinetType = TALL_CAB then
		if SYMB_MIRRORED then
			hideparameter "side_vis"
			if side_vis_mirror = `Слева` then parameters side_vis=`Справа`
			if side_vis_mirror = `Справа` then parameters side_vis=`Слева`
			if side_vis_mirror = `Нет` then parameters side_vis=`Нет`
			if side_vis_mirror = `Обе` then parameters side_vis=`Обе`

			hideparameter "side_vis2D"
			if side_vis2D_mirror = `Слева` then parameters side_vis2D=`Справа`
			if side_vis2D_mirror = `Справа` then parameters side_vis2D=`Слева`
			if side_vis2D_mirror = `Нет` then parameters side_vis2D=`Нет`
			if side_vis2D_mirror = `Обе` then parameters side_vis2D=`Обе`
		else
			hideparameter "side_vis_mirror"
			if side_vis = `Слева` then parameters side_vis_mirror=`Справа`
			if side_vis = `Справа` then parameters side_vis_mirror=`Слева`
			if side_vis = `Нет` then parameters side_vis_mirror=`Нет`
			if side_vis = `Обе` then parameters side_vis_mirror=`Обе`

			hideparameter "side_vis2D_mirror"
			if side_vis2D= `Слева` then parameters side_vis2D_mirror=`Справа`
			if side_vis2D= `Справа` then parameters side_vis2D_mirror=`Слева`
			if side_vis2D= `Нет` then parameters side_vis2D_mirror=`Нет`
			if side_vis2D= `Обе` then parameters side_vis2D_mirror=`Обе`
		endif
	endif
endif

If (CabinetType = BASE_CAB or (CabinetType = WALL_CAB and CornCabType = CORNER_2_EDIT_EDGE))\
		and GLOB_MODPAR_NAME = "dob_face" then
	if dob_face = 1 Then
	
		Parameters 	rear_cab = front_cab
					rear_cab = front_cab
					
		if (CornCabType = CORNER_2_EDIT_EDGE) & not(bMoreDoorPanels) then				! Corner S
			parameters 	lrear_cab = 0
						lrear_cab = 0
		else
			parameters 	lrear_cab = front_cab
						lrear_cab = front_cab
		endif
		
		if ((CornCabType = CORNER_1_EDIT_EDGE) | (CornCabType = CORNER_2_EDIT_EDGE))\	! Corner C & Corner L
			& bMoreDoorPanels then
			parameters rrear_cab = 0
					   rrear_cab = 0
		else
			parameters 	rrear_cab = front_cab
						rrear_cab = front_cab
		endif
		
	else
		Parameters 	rear_cab = 0
					rear_cab = 0
		Parameters 	lrear_cab = 0
					lrear_cab = 0
		Parameters 	rrear_cab = 0
					rrear_cab = 0
	endif
endif

if (CabinetType = WALL_CAB) and (CornCabType = CORNER_NO_CORN) and bDoubleFacadeEdit then
	if rear_panel = 1 then
		dob_face = 0
		parameters dob_face = dob_face
		LOCK "dob_face"
		HIDEPARAMETER "dob_face"
	endif
	
	if dob_face = 1 then
		rear_panel = 0
		parameters rear_panel = rear_panel
		LOCK "rear_panel"
		HIDEPARAMETER "rear_panel"
	endif
endif

! Pen<>0
if gs_cont_pen=0 then parameters gs_cont_pen=4
if gs_fill_pen=0 then parameters gs_fillpen=19


! --- LOCK PARAMETERS ---------------------------------------------------------

if gs_detlevel_3D_m = 1 then
	HIDEPARAMETER "gs_resol"
	LOCK "gs_resol"
endif
if gs_detlevel_3D_m = 0 then
	HIDEPARAMETER "gs_resol", "gs_shadow"
	LOCK "gs_resol", "gs_shadow"
endif

if CabinetType = BASE_CAB then
	if gs_count_type_m=0 then
		hideparameter "front_cab","rear_cab","left_cab","right_cab", "left_cab_mirror","right_cab_mirror"
		lock          "front_cab","rear_cab","left_cab","right_cab", "left_cab_mirror","right_cab_mirror"
		hideparameter "side_vis","side_vis_mirror"
		lock          "side_vis","side_vis_mirror"
		hideparameter "count_th","bs_h","count_mat","bs_mat"
		lock          "count_th","bs_h","count_mat","bs_mat"
		if possibleSinkTypes <> Sinks_NoSink and possibleSinkTypes <> Sinks_Belfast1 then
			hideparameter "gs_sink_type"
			lock          "gs_sink_type"
		endif
	endif

	if abs(count_th)<EPS then
		lock "count_mat"
		hideparameter "count_mat"
	endif

	if bEnableBackSplash & abs(bs_h)<EPS then
		lock "bs_mat"
		hideparameter "bs_mat"
	endif

	if dob_face then
		if CornCabType = CORNER_1_EDIT_EDGE | CornCabType = CORNER_2_EDIT_EDGE then
			lock "rear_panel"
			hideparameter "rear_panel"
		else
			lock "rear_panel", "bs_h"
			hideparameter "rear_panel", "bs_h"
		endif
	endif
endif

if CabinetType = BASE_CAB or (CabinetType = WALL_CAB and CornCabType = CORNER_2_EDIT_EDGE) then
	if dob_face then
		if CornCabType = CORNER_2_EDIT_EDGE and bMoreDoorPanels then		! --- Corn-L
			lock "lrear_panel"
			hideparameter "lrear_panel"
		else													! --- Corn-S
			lock "rrear_panel"
			hideparameter "rrear_panel"
		endif
	endif
endif

if bToe and gs_toe_type_m = 0 then
	parameters toe_h = 0
	LOCK "toe_h","toe_d","toe_mat"
	HIDEPARAMETER "toe_h","toe_d","toe_mat"
endif

if bPossibleDrawer then
	if not(bDrawer) then
		LOCK "DrawerMat", "numDrawers"
		HIDEPARAMETER "DrawerMat", "numDrawers"
	endif
endif

if bEnableDoorpanel then
	if gs_door_type_m=1 OR gs_door_type_m=99 then
		lock "doorframe_w","hor_gnum","vert_gnum","doorglas_mat"
		hideparameter "doorframe_w","hor_gnum","vert_gnum","doorglas_mat"
	endif

	if gs_door_type_m=2 OR gs_door_type_m=4 OR gs_door_type_m=6 OR gs_door_type_m=11 then
		lock "hor_gnum","vert_gnum","doorglas_mat"
		hideparameter "hor_gnum","vert_gnum","doorglas_mat"
	endif

	if gs_door_type_m=9  then
		lock "hor_gnum","vert_gnum"
		hideparameter "hor_gnum","vert_gnum"
	endif

	if CabinetType = TALL_CAB & up_door = 1 then
		if gs_door_type_m =  1 | \
		   gs_door_type_m =  2 | \
		   gs_door_type_m =  4 | \
		   gs_door_type_m =  6 | \
		   gs_door_type_m =  9 | \
		   gs_door_type_m = 11 | \
		   gs_door_type_m = 99 then
			lock          "hor_gnum2", "vert_gnum2"
			hideparameter "hor_gnum2", "vert_gnum2"
		endif
	endif

	if gs_door_type_m=99 then
		lock "gs_bevel"
	else
		hideparameter "gs_cust_p"
		lock "gs_cust_p"
	endif

	if gs_door_type_m = 0 AND not(bDrawer) then
		LOCK "fr_th1"
		HIDEPARAMETER "fr_th1"
	endif

	if gs_door_type_m = 0 then
		lock "gs_bevel", "fr_th1", "door_ang", "doorframe_w",\
			 "doorframe_mat", "doorglas_mat", "vert_gnum", "hor_gnum"
		hideparameter "gs_bevel", "fr_th1", "door_ang", "doorframe_w",\
			 "doorframe_mat", "doorglas_mat", "vert_gnum", "hor_gnum"

		if bDoubleDoor then
			lock "gs_door_bw", "door_w"
			hideparameter "gs_door_bw", "door_w"
		endif

		if isTallCabinet then
			lock "low_door", "up_door", "vert_gnum2", "hor_gnum2"
			hideparameter "low_door", "up_door", "vert_gnum2", "hor_gnum2"
		endif
	endif
endif

if bKnobParams then
	if (bTabpage3 and gs_door_type_m = 0) then
		lock "gs_cust_p","door_ang","doorframe_w","hor_gnum","vert_gnum","fr_th1",
			"knob_pl_x","knob_pl_y","gs_knob_p","knob_size", "gs_knob_type", "gs_knob_type_m", "gs_knob_mat"	!! UI
	endif

	if gs_knob_type_m=1 OR gs_knob_type_m=2 OR gs_knob_type_m=3 OR gs_knob_type_m=9  then
		lock "knob_size"
		hideparameter "knob_size"

		if bEnableKnobPlacing then
			lock "gs_knob_p", "gs_knob_p_m"
			hideparameter "gs_knob_p", "gs_knob_p_m"
		endif
	endif

	if gs_knob_type_m=0 then
		lock "knob_size","gs_knob_mat" 	!!UI
		hideparameter "knob_size", "gs_knob_mat"

		if bEnableKnobPlacing then
			lock "knob_pl_x","knob_pl_y","gs_knob_p", "gs_knob_p_m"
			hideparameter "knob_pl_x","knob_pl_y","gs_knob_p", "gs_knob_p_m"
		endif
	endif

	if gs_door_type_m = 0 then
		LOCK "gs_knob_type","gs_knob_mat", "gs_knob_type_m"
	endif

endif

if bEnableShelf & cabinetType <>2 and shelf_num=0 then
	LOCK "gs_ShelfMat"
	HIDEPARAMETER "gs_ShelfMat"
endif

if bEnableSink then
	if possibleSinkTypes <> Sinks_Belfast1 and gs_sink_type_m = 0 then
		HIDEPARAMETER "sunder","sink_dist","sink_disty","SinkSymbol"
		LOCK          "sunder","sink_dist","sink_disty","SinkSymbol"
		HIDEPARAMETER "gs_tap_type","gs_sink_mat","gs_tap_mat"
		LOCK          "gs_tap_type","gs_sink_mat","gs_tap_mat"
	endif

	if SinkSymbol_m < 2 then
		LOCK "TapSymbol"
		HIDEPARAMETER "TapSymbol"
	endif
endif

if bEnableEndpanel then
	if iEndPanelType = 1 OR iEndPanelType = 99 then
		LOCK "doorframe_w_end"
		HIDEPARAMETER "doorframe_w_end"
	endif

	if iEndPanelType <> 99 then
		HIDEPARAMETER "gs_cust_p_end"
		LOCK "gs_cust_p_end"
	endif

	if	left_panel			= 0 & \
		right_panel			= 0 & \
		left_panel_mirror	= 0 & \
		right_panel_mirror	= 0 & \
		rear_panel			= 0 & \
		lrear_panel			= 0 & \
		rrear_panel			= 0 then

		LOCK	"stEndPanelType",
				"iEndPanelType",
				"doorframe_mat_end",
				"doorframe_w_end"

		HIDEPARAMETER	"stEndPanelType",
						"iEndPanelType",
						"doorframe_mat_end",
						"doorframe_w_end"
	endif
endif

if rear_panel=1 then
	LOCK "dob_face"
	HIDEPARAMETER "dob_face"
endif

if CornCabType = CORNER_2_EDIT_EDGE and bMoreDoorPanels then		! --- Corn-L
	if lrear_panel=1 then
		LOCK "dob_face"
		HIDEPARAMETER "dob_face"
	endif
else													! --- Corn-S
	if rrear_panel=1 then
		LOCK "dob_face"
		HIDEPARAMETER "dob_face"
	endif
endif

if not(Appl2D) then
	lock "ApplLineType"
endif

if CabinetType = TALL_CAB then
	if low_door=0 then
		LOCK "hor_gnum","vert_gnum"
		HIDEPARAMETER "hor_gnum","vert_gnum"
	endif

	if up_door=0 then
		LOCK "hor_gnum2","vert_gnum2"
		HIDEPARAMETER "hor_gnum2","vert_gnum2"
	endif

	if not(UpCabinet) then
		LOCK "up_door","up_door_h","low_door_h","vert_gnum2","hor_gnum2","knob_pl_x_up", "knob_pl_y_up"
		HIDEPARAMETER "up_door","up_door_h","low_door_h","vert_gnum2","hor_gnum2","knob_pl_x_up", "knob_pl_y_up"
	endif
endif


VALUES "A" RANGE(0, ]
VALUES "B" RANGE(0, ]
VALUES "ZZYZX" RANGE(0, ]

if isMEPEnabled then

	DIM shape_typ_to_validation[3]
		shape_typ_to_validation[1] = 0		! Rectangle
		shape_typ_to_validation[2] = 1		! Circle
		shape_typ_to_validation[3] = 0		! Oval

					! --- 1st CONNECTION --- !

	ConID = 1
	ConName = DimConName[1]

	ConDVecX = 0
	ConDVecY = 1
	ConDVecZ = 0

	ConWVecX = -1
	ConWVecY = 0
	ConWVecZ = 0

	if ConWidth_1 < 0.001 then
		ConWidth_1 = 0.001
		PARAMETERS ConWidth_1 = ConWidth_1
	endif
	if ConWidth_1 > MIN(A/2, (zzyzx-count_th-toe_h)/2) then
		ConWidth_1 = MIN(A/2, (zzyzx-count_th-toe_h)/2)
		PARAMETERS ConWidth_1 = ConWidth_1
	endif
	VALUES "ConWidth_1" RANGE (0, MIN(A/2, (zzyzx-count_th-toe_h)/2)]
	PARAMETERS ConDepth_1 = ConWidth_1
	VALUES "ConLength_1" RANGE [0, ]


	VALUES "ConPosX_1" RANGE [ConWidth_1/2, A-ConWidth_1/2]
	PARAMETERS ConPosY_1 = B
	VALUES "ConPosZ_1" RANGE [toe_h+ConWidth_1/2, zzyzx-count_th-ConWidth_1/2]


	CALL "MEP_m_ConnectionsACL_4" PARAMETERS SetProgram = SetProgram,
		gs_Connections = gs_Connections,
		MEP_NumConnectionData = MEP_NumConnectionData,
		MEP_StrConnectionData = MEP_StrConnectionData,
		MEP_NumberConnections = MEP_NumberConnections,
		gs_AddConnections = gs_AddConnections,
		ConName = ConName,
		ConID = ConID,
		ConPosX = ConPosX_1,
		ConPosY = ConPosY_1,
		ConPosZ = ConPosZ_1,
		ConDVecX = ConDVecX,
		ConDVecY = ConDVecY,
		ConDVecZ = ConDVecZ,
		ConWVecX = ConWVecX,
		ConWVecY = ConWVecY,
		ConWVecZ = ConWVecZ,

		ConNominalWidth = ConNominalWidth_1,
		ConNominalDepth = ConNominalDepth_1,
		ConWidth = ConWidth_1,
		ConDepth = ConDepth_1,
		ConLength = ConLength_1,
		ConWallThickness = ConWallThickness_1,
		ConConnectorWidth = ConConnectorWidth_1,
		ConConnectorDepth = ConConnectorDepth_1,
		ConConnectorWidth2 = ConConnectorWidth2_1,
		ConToolType = ConToolType_1,
		ConStatus = ConStatus_1,
		ConType_1 = ConType_1,
		ConConnectorType_1 = ConConnectorType_1,
		ConSystem_1 = ConSystem_1,
		ui_current_con = ui_current_con,
		shape_typ_to_validation = shape_typ_to_validation,
		MEP_enabled_geometry_mod = 1

	PARAMETERS MEP_ConInfo[ConID][1] = STR(ConToolType_1, 1, 0)
	PARAMETERS MEP_ConInfo[ConID][2] = ConName
	PARAMETERS MEP_ConInfo[ConID][3] = "0"

	if  MEP_NumberConnections > 1 then

					! --- 2nd CONNECTION --- !

		ConID = 2
		ConName = DimConName[2]

		ConDVecX = 0
		ConDVecY = 1
		ConDVecZ = 0

		ConWVecX = -1
		ConWVecY = 0
		ConWVecZ = 0

		if ConWidth_2 < 0.001 then
			ConWidth_2 = 0.001
			PARAMETERS ConWidth_2 = ConWidth_2
		endif
		if ConWidth_2 > MIN(A/2, (zzyzx-count_th-toe_h)/2) then
			ConWidth_2 = MIN(A/2, (zzyzx-count_th-toe_h)/2)
			PARAMETERS ConWidth_2 = ConWidth_2
		endif
		VALUES "ConWidth_2" RANGE (0, MIN(A/2, (zzyzx-count_th-toe_h)/2)]
		PARAMETERS ConDepth_2 = ConWidth_2
		VALUES "ConLength_2" RANGE [0, ]


		VALUES "ConPosX_2" RANGE [ConWidth_2/2, A-ConWidth_2/2]
		PARAMETERS ConPosY_2 = B
		VALUES "ConPosZ_2" RANGE [toe_h+ConWidth_2/2, zzyzx-count_th-ConWidth_2/2]


		CALL "MEP_m_ConnectionsACL_4" PARAMETERS SetProgram = SetProgram,
			gs_Connections = gs_Connections,
			MEP_NumConnectionData = MEP_NumConnectionData,
			MEP_StrConnectionData = MEP_StrConnectionData,
			MEP_NumberConnections = MEP_NumberConnections,
			gs_AddConnections = gs_AddConnections,
			ConName = ConName,
			ConID = ConID,
			ConPosX = ConPosX_2,
			ConPosY = ConPosY_2,
			ConPosZ = ConPosZ_2,
			ConDVecX = ConDVecX,
			ConDVecY = ConDVecY,
			ConDVecZ = ConDVecZ,
			ConWVecX = ConWVecX,
			ConWVecY = ConWVecY,
			ConWVecZ = ConWVecZ,

			ConNominalWidth = ConNominalWidth_2,
			ConNominalDepth = ConNominalDepth_2,
			ConWidth = ConWidth_2,
			ConDepth = ConDepth_2,
			ConLength = ConLength_2,
			ConWallThickness = ConWallThickness_2,
			ConConnectorWidth = ConConnectorWidth_2,
			ConConnectorDepth = ConConnectorDepth_2,
			ConConnectorWidth2 = ConConnectorWidth2_2,
			ConToolType = ConToolType_2,
			ConStatus = ConStatus_2,
			ConType_2 = ConType_2,
			ConConnectorType_2 = ConConnectorType_2,
			ConSystem_2 = ConSystem_2,
			shape_typ_to_validation = shape_typ_to_validation,
			MEP_enabled_geometry_mod = 1

		PARAMETERS MEP_ConInfo[ConID][1] = STR(ConToolType_2, 1, 0)
		PARAMETERS MEP_ConInfo[ConID][2] = ConName
		PARAMETERS MEP_ConInfo[ConID][3] = "0"

   endif

   if  MEP_NumberConnections > 2 then

						! --- 3rd CONNECTION --- !

		ConID = 3
		ConName = DimConName[3]

		ConDVecX = 0
		ConDVecY = 1
		ConDVecZ = 0

		ConWVecX = -1
		ConWVecY = 0
		ConWVecZ = 0

		if ConWidth_3 < 0.001 then
			ConWidth_3 = 0.001
			PARAMETERS ConWidth_3 = ConWidth_3
		endif
		if ConWidth_3 > MIN(A/2, (zzyzx-count_th-toe_h)/2) then
			ConWidth_3 = MIN(A/2, (zzyzx-count_th-toe_h)/2)
			PARAMETERS ConWidth_3 = ConWidth_3
		endif
		VALUES "ConWidth_3" RANGE (0, MIN(A/2, (zzyzx-count_th-toe_h)/2)]
		PARAMETERS ConDepth_3 = ConWidth_3
		VALUES "ConLength_3" RANGE [0, ]


		VALUES "ConPosX_3" RANGE [ConWidth_3/2, A-ConWidth_3/2]
		PARAMETERS ConPosY_3 = B
		VALUES "ConPosZ_3" RANGE [toe_h+ConWidth_3/2, zzyzx-count_th-ConWidth_3/2]


		CALL "MEP_m_ConnectionsACL_4" PARAMETERS SetProgram = SetProgram,
			gs_Connections = gs_Connections,
			MEP_NumConnectionData = MEP_NumConnectionData,
			MEP_StrConnectionData = MEP_StrConnectionData,
			MEP_NumberConnections = MEP_NumberConnections,
			gs_AddConnections = gs_AddConnections,
			ConName = ConName,
			ConID = ConID,
			ConPosX = ConPosX_3,
			ConPosY = ConPosY_3,
			ConPosZ = ConPosZ_3,
			ConDVecX = ConDVecX,
			ConDVecY = ConDVecY,
			ConDVecZ = ConDVecZ,
			ConWVecX = ConWVecX,
			ConWVecY = ConWVecY,
			ConWVecZ = ConWVecZ,

			ConNominalWidth = ConNominalWidth_3,
			ConNominalDepth = ConNominalDepth_3,
			ConWidth = ConWidth_3,
			ConDepth = ConDepth_3,
			ConLength = ConLength_3,
			ConWallThickness = ConWallThickness_3,
			ConConnectorWidth = ConConnectorWidth_3,
			ConConnectorDepth = ConConnectorDepth_3,
			ConConnectorWidth2 = ConConnectorWidth2_3,
			ConToolType = ConToolType_3,
			ConStatus = ConStatus_3,
			ConType_3 = ConType_3,
			ConConnectorType_3 = ConConnectorType_3,
			ConSystem_3 = ConSystem_3,
			shape_typ_to_validation = shape_typ_to_validation,
			MEP_enabled_geometry_mod = 1

		PARAMETERS MEP_ConInfo[ConID][1] = STR(ConToolType_3, 1, 0)
		PARAMETERS MEP_ConInfo[ConID][2] = ConName
		PARAMETERS MEP_ConInfo[ConID][3] = "0"

	endif

	if gs_ui_current_page = idConnTab then
		ac_mep_connectionpage_active = 1
	else
		ac_mep_connectionpage_active = 0
	endif
	PARAMETERS ac_mep_connectionpage_active = ac_mep_connectionpage_active

	isConnection = 0
	FOR i = 1 TO VARDIM1(MEP_NumConnectionData)
		isConnection = isConnection + MEP_NumConnectionData[i][22]
	NEXT i
	if isConnection < EPS then
		LOCK "gs_con_mat"
		HIDEPARAMETER "gs_con_mat"
	endif

	if SetProgram then
		SetProgram = 0
		PARAMETERS SetProgram = SetProgram
	endif
else
	if MEP_NumberConnections > 0 then
		HIDEPARAMETER "gs_connection", "useSysMat"

		ac_mep_connectionpage_active = 0
		PARAMETERS ac_mep_connectionpage_active = ac_mep_connectionpage_active
	endif
endif

for i = 1 to nTabs
	put i
next i

values "gs_ui_current_page" get(nsp)
