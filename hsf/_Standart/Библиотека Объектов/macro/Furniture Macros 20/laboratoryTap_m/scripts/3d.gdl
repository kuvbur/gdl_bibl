
unID = start_unID

reqBTaps = 0
success = LIBRARYGLOBAL ("LibraryGlobals13", "hideBTaps", reqBTaps)

if gs_detlevel_3D_m = DET3D_NONE | (success > 0 and reqBTaps and GLOB_CONTEXT <> 5) then end
if GLOB_CONTEXT > 20 and GLOB_CONTEXT < 40 then gs_detlevel_3D_m = DET3D_SIMPLE
if NOT(gs_shadow) then SHADOW OFF
pen gs_cont_pen

_resol		= gs_resol * (gs_detlevel_3D_m = DET3D_DETAILED) + 8 * (gs_detlevel_3D_m = DET3D_SIMPLE)
resol _resol
archResol	= _resol * (gs_detlevel_3D_m = DET3D_DETAILED) + 3 * (gs_detlevel_3D_m = DET3D_SIMPLE)

if tapID = 1 then
	hotspot 0,			0,	0,	unID, tapOffset1, 1 + 128:		unID = unID + 1
	hotspot -1,			0,	0,	unID, tapOffset1, 3:			unID = unID + 1
	hotspot tapOffset1,	0,	0,	unID, tapOffset1, 2:			unID = unID + 1

	addx tapOffset1
else
	hotspot 0,			0,	0,	unID, tapOffset2, 1 + 128:		unID = unID + 1
	hotspot -1,			0,	0,	unID, tapOffset2, 3:			unID = unID + 1
	hotspot tapOffset2,	0,	0,	unID, tapOffset2, 2:			unID = unID + 1

	addx tapOffset2
endif

rotz -90
	gosub "tap"
del 2

!================================================================================
end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end
!================================================================================

! ======================================================================
"tap":
! ======================================================================

	addx neckDepth / 2 * (gs_tap_type_m = 1)
		hotspot 0,	0,	0,			unID, tapHeight, 1 + 128:	unID = unID + 1
		hotspot 0,	0,	-1,			unID, tapHeight, 3:			unID = unID + 1
		hotspot 0,	0,	tapHeight,	unID, tapHeight, 2:			unID = unID + 1
	del 1

	material gs_tap_mat

	group "top tap"
		tube 2, 4, 1 + 2 + 16 + 32,
			0, 0, 901,
			tapDia / 2, 360, 4001,
	
			0, 0, -1, 0,
			0, 0, sThk, 0,
			0, 0, neckStart, 0,
			0, 0, neckStart * 2, 0
	
		if gs_tap_type_m = 1 then
			__radius		= neckDepth / 2
			__angleOrigoX	= __radius
			__angleOrigoY	= 0
			__angleOrigoZ	= tapHeight - __radius
			__startAngle	= -90
			__fullAngle		= 180
	
			tempResol	= __fullAngle / 360 * archResol
			if tempResol - INT(tempResol) < 0.5 then
				tempResol = INT(tempResol)
				__beta = __fullAngle / tempResol
			else
				tempResol = INT(tempResol) + 1
				__beta = __fullAngle / tempResol
			endif
	
			for i = 1 to tempResol
				put __angleOrigoX + __radius * SIN(__startAngle), 0, __angleOrigoZ + __radius * COS(__startAngle), 0
				__startAngle = __startAngle + __beta
			next i
	
			tube 2, 5 + NSP / 4, 1 + 2 + 16 + 32,
				0, 0, 901,
				neckDia / 2, 360, 4001,
		
				0, 0, 0, 0,
				0, 0, neckStart, 0,
				0, 0, __angleOrigoZ, 0,
				GET(NSP),
				__angleOrigoX + __radius * SIN(__startAngle), 0, __angleOrigoZ + __radius * COS(__startAngle), 0,
				__angleOrigoX + __radius * SIN(__startAngle + __beta), 0, __angleOrigoZ + __radius * COS(__startAngle + __beta), 0

			add neckDepth, 0, __angleOrigoZ
				gosub "tapEnd"
			del 1
			add 0, tapDia / 2, neckStart - 0.05
			rotx -90
				gosub "tapHandle"
			del 2
		endif
	endgroup



	__radius		= 0.05
	__angleOrigoX	= __radius
	__angleOrigoY	= tapWidth / 2 - __radius
	__angleOrigoZ	= bottomTapElev
	__startAngle	= -90
	__fullAngle		= 90

	__radius2		= 0.05
	__angleOrigoX2	= tapDepth - __radius2
	__angleOrigoY2	= tapWidth / 2
	__angleOrigoZ2	= bottomTapElev - __radius2
	__startAngle2	= 0
	__fullAngle2	= 90

	tempResol	= __fullAngle / 360 * archResol
	if tempResol - INT(tempResol) < 0.5 then
		tempResol = INT(tempResol)
		__beta = __fullAngle / tempResol
	else
		tempResol = INT(tempResol) + 1
		__beta = __fullAngle / tempResol
	endif
	
	put	0, -1, __angleOrigoZ, 0,
		0, 0, __angleOrigoZ, 0
	for i = 1 to tempResol
		put __angleOrigoX + __radius * SIN(__startAngle), __angleOrigoY + __radius * COS(__startAngle), __angleOrigoZ, 0
		__startAngle = __startAngle + __beta
	next i
	put	__angleOrigoX + __radius * SIN(__startAngle), __angleOrigoY + __radius * COS(__startAngle), __angleOrigoZ, 0,
		__angleOrigoX2, __angleOrigoY2, __angleOrigoZ, 0


	tempResol	= __fullAngle2 / 360 * archResol
	if tempResol - INT(tempResol) < 0.5 then
		tempResol = INT(tempResol)
		__beta2 = __fullAngle2 / tempResol
	else
		tempResol = INT(tempResol) + 1
		__beta2 = __fullAngle2 / tempResol
	endif
	
	for i = 1 to tempResol
		put __angleOrigoX2 + __radius2 * SIN(__startAngle2), __angleOrigoY2, __angleOrigoZ2 + __radius2 * COS(__startAngle2), 0
		__startAngle2 = __startAngle2 + __beta2
	next i
	put	__angleOrigoX2 + __radius2 * SIN(__startAngle2), __angleOrigoY2, __angleOrigoZ2 + __radius2 * COS(__startAngle2), 0,
		__angleOrigoX2 + __radius2 * SIN(__startAngle2 + __beta2), __angleOrigoY2, __angleOrigoZ2 + __radius2 * COS(__startAngle2 + __beta2), 0

	group "bottom taps"
		tube 2, NSP / 4, 1 + 2 + 16 + 32,
			0, 0, 901,
			tapDia / 2, 360, 4001,
			USE(NSP)

		add tapDepth, tapWidth / 2, __angleOrigoZ2
			gosub "tapEnd"
		del 1
		add __angleOrigoX2 + (__radius2 + tapDia / 2) * COS(45), tapWidth / 2, __angleOrigoZ2 + (__radius2 + tapDia / 2) * SIN(45)
		roty 45
			gosub "tapHandle"
		del 2

		muly -1
			tube 2, NSP / 4, 1 + 2 + 16 + 32,
				0, 0, 901,
				tapDia / 2, 360, 4001,
				GET(NSP)
	
			add tapDepth, tapWidth / 2, __angleOrigoZ2
				gosub "tapEnd"
			del 1
			add __angleOrigoX2 + (__radius2 + tapDia / 2) * COS(45), tapWidth / 2, __angleOrigoZ2 + (__radius2 + tapDia / 2) * SIN(45)
			roty 45
				gosub "tapHandle"
			del 2
		del 1
	endgroup

	placegroup "top tap"
	placegroup subgroup("bottom taps", "top tap")

	cylind sThk, 0.015

return



! ======================================================================
"tapEnd":
! ======================================================================

	addz -0.05
		cylind 0.04, 0.004
		addz 0.04
			cylind 0.01, 0.012
		del 1
	del 1

return



! ======================================================================
"tapHandle":
! ======================================================================

	cylind 0.05, 0.012

return


