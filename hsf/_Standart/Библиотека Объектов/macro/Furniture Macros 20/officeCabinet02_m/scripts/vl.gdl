
hideparameter all "A", "B", "ZZYZX"

call "FM_types" parameters all

lock			"totalDrawerHeight"
hideparameter	"totalDrawerHeight"

if NOT(bPartOfLayout) then
	values "gs_resol" range [3,)
 	values "gs_detlevel_3D" stDetail3D
	values "gs_detlevel_3D_m" 0, 1, 2

	if GLOB_MODPAR_NAME = "gs_detlevel_3D" then
		if gs_detlevel_3D = stDetail3D[1]	then parameters gs_detlevel_3D_m = DET3D_OFF
		if gs_detlevel_3D = stDetail3D[2]	then parameters gs_detlevel_3D_m = DET3D_SIMPLE
		if gs_detlevel_3D = stDetail3D[3]	then parameters gs_detlevel_3D_m = DET3D_DETAILED
	else
		if gs_detlevel_3D_m = DET3D_OFF then parameters gs_detlevel_3D = stDetail3D[1]
		if gs_detlevel_3D_m = DET3D_SIMPLE then parameters gs_detlevel_3D = stDetail3D[2]
		if gs_detlevel_3D_m = DET3D_DETAILED then parameters gs_detlevel_3D = stDetail3D[3]
	endif

	if gs_detlevel_3D_m = DET3D_SIMPLE then
		hideparameter "gs_resol"
		lock	"gs_knob_type_m", "gs_knob_mat", "gs_resol"
	endif
	if gs_detlevel_3D_m = DET3D_OFF then
		lock "gs_resol", "gs_shadow"
		hideparameter "gs_resol", "gs_shadow"
	endif


	for i = 1 to 255
		put i
	next i
	values "gs_cont_pen" use(NSP)
	values "gs_fill_pen" get(NSP)
endif


values "cabinetScheme" stCabinetScheme
values "iCabinetScheme" 1, 2, 3, 4, 5
if GLOB_MODPAR_NAME = "cabinetScheme" then
	for iCab = 1 to vardim1(stCabinetScheme)
		if cabinetScheme = stCabinetScheme[iCab] then iCabinetScheme = iCab
	next iCab
	parameters iCabinetScheme = iCabinetScheme
else
	cabinetScheme = stCabinetScheme[max(iCabinetScheme, 1)]
	parameters cabinetScheme = cabinetScheme
endif

values "cupboardDoors" stCupboardDoors[2], stCupboardDoors[1]
values "iCupboardDoors" 1, 2
if GLOB_MODPAR_NAME = "cupboardDoors" then
	for iCabD = 1 to vardim1(stCupboardDoors)
		if cupboardDoors = stCupboardDoors[iCabD] then iCupboardDoors = iCabD
	next iCabD
	parameters iCupboardDoors = iCupboardDoors
else
	cupboardDoors = stCupboardDoors[max(iCupboardDoors, 1)]
	parameters cupboardDoors = cupboardDoors
endif

if NOT(bPartOfLayout) then
	values{2} "gs_knob_type_m"	KNOB_STYLE_1,	`Стиль 1`,
								KNOB_STYLE_2,	`Стиль 2`,
								KNOB_STYLE_3,	`Стиль 3`,
								KNOB_STYLE_4,	`Стиль 4`,
								KNOB_STYLE_5,	`Стиль 5`,
								KNOB_STYLE_6,	`Стиль 6`,
								KNOB_STYLE_7,	`Стиль 7`,
								KNOB_STYLE_8,	`Стиль 8`

	values{2} "gs_knob_type_m_up"	KNOB_STYLE_1,	`Стиль 1`,
								KNOB_STYLE_2,	`Стиль 2`,
								KNOB_STYLE_3,	`Стиль 3`,
								KNOB_STYLE_4,	`Стиль 4`,
								KNOB_STYLE_5,	`Стиль 5`,
								KNOB_STYLE_6,	`Стиль 6`,
								KNOB_STYLE_7,	`Стиль 7`,
								KNOB_STYLE_8,	`Стиль 8`


	values{2} "iDrawerKnobPlacing" 	KNOBPLACING_HORIZ, `Горизонтальный`
	lock	"iDrawerKnobPlacing"
	hideparameter	"iDrawerKnobPlacing"
	values "drawerKnobSize"	range [minKnobSize, drawerWidth]
	if (gs_knob_type_m < 4) or not(bKnob) then
		lock "drawerKnobSize"
		hideparameter "drawerKnobSize"
	endif
	values "xDrawerKnobPos" range [-A/2 + 0.005 + 0.02, A/2 - 0.005 - 0.02]
	values "zDrawerKnobPos" range [-(gs_drawerHeight/2-0.005) + 0.02, (gs_drawerHeight/2-0.005) - 0.02]

	if NOT(enableDrawers) then
		lock			"bKnob"
		hideparameter	"bKnob"
	endif

	if not(bKnob) or NOT(enableDrawers) then
		lock			"iDrawerKnobPlacing",
						"nDrawerKnob",
						"gs_knob_type_m",
						"drawerKnobSize",
						"xDrawerKnobPos",
						"zDrawerKnobPos",
						"matDrawerKnob"
		hideparameter	"iDrawerKnobPlacing",
						"nDrawerKnob",
						"gs_knob_type_m",
						"drawerKnobSize",
						"xDrawerKnobPos",
						"zDrawerKnobPos",
						"matDrawerKnob"
	endif

	values "nDrawerKnob" 1, 2
	values "gs_knob_p" st_knobplacing
	values "gs_knob_p_m" 0, 1
	if GLOB_MODPAR_NAME = "gs_knob_p" then
		for iKnob = 1 to vardim1(st_knobplacing)
			if gs_knob_p = st_knobplacing[iKnob] then
				gs_knob_p_m = iKnob - 1
			endif
		next iKnob
		parameters gs_knob_p_m = gs_knob_p_m
	else
		gs_knob_p = st_knobplacing[gs_knob_p_m+1]
		parameters gs_knob_p = gs_knob_p
	endif
	if (gs_knob_type_m_up < 4) or not(bKnob_up) then
		lock "gs_knob_p", "gs_knob_p_m", "knob_size"
		hideparameter "gs_knob_p", "gs_knob_p_m", "knob_size"
	endif

	if enableCupboard then
		if	GLOB_MODPAR_NAME = "cabinetScheme" or GLOB_MODPAR_NAME = "iCabinetScheme" or\
			GLOB_MODPAR_NAME = "ZZYZX" or GLOB_MODPAR_NAME = "gs_upperCabHeight" or\
			GLOB_MODPAR_NAME = "totalDrawerHeight" or GLOB_MODPAR_NAME = "gs_drawerHeight" or\
			GLOB_MODPAR_NAME = "bCabinetBase" or GLOB_MODPAR_NAME = "cabinetBaseHeight" then
			knob_pl_y = realUpperCabHeight / 2
			parameters knob_pl_y = knob_pl_y
		endif
		if bUpperKnobs then
			actUpKnobSize = knob_size
			if gs_knob_type_m_up = KNOB_STYLE_1 then
				actUpKnobSize = 0.025
			endif
			if gs_knob_type_m_up = KNOB_STYLE_2 or gs_knob_type_m_up = KNOB_STYLE_3 then
				actUpKnobSize = 0.04
			endif

			if gs_knob_p_m = CABINET_KNOB_VER then
				values "knob_size" range [minKnobSize, (gs_upperCabHeight * (iCabinetScheme = DRAWERS_CUPBOARD) + (zzyzx - baseHeight) * (iCabinetScheme = CUPBOARD))-0.04]

				values "knob_pl_x" range [0.02, doorWidth - 0.02]
				values "knob_pl_y" range [0.02 + actUpKnobSize/2, realUpperCabHeight - 0.02 - actUpKnobSize/2]
			else
				values "knob_size" range [minKnobSize, doorWidth-0.04]
				values "knob_pl_x" range [0.02 + actUpKnobSize/2, doorWidth - 0.02 - actUpKnobSize/2]
				values "knob_pl_y" range [0.02, realUpperCabHeight - 0.04]
			endif
		endif
	endif

	if not(enableCupboard) then
		lock			"bKnob_up"
		hideparameter	"bKnob_up"
	endif
	if not(bKnob_up) or not(enableCupboard) then
		lock			"gs_knob_type_m_up", "gs_knob_p"
		hideparameter	"gs_knob_type_m_up", "gs_knob_p"
	endif

	if not(bUpperKnobs) or not(bKnob_up) or not(enableCupboard) then
		lock "knob_size", "knob_pl_x", "knob_pl_y", "gs_knob_mat"
		hideparameter "knob_size", "knob_pl_x", "knob_pl_y", "gs_knob_mat"
	endif

	if MSFront < 0 then
		MSFront = 0
		parameters MSFront = MSFront
	endif

	values "A" range (0, )
	values "B" range (0, )
endif

if not(bCabinetBase) then
	lock			"cabinetBaseHeight",
					"toe_mat"
	hideparameter	"cabinetBaseHeight",
					"toe_mat"
endif
if not(bShelves) then
	lock			"shelfNum"
	hideparameter	"shelfNum"
endif


if iCabinetScheme = DRAWERS then
	lock			"gs_drawerHeight"
	hideparameter	"gs_drawerHeight"
endif
if iCabinetScheme = CUPBOARD then
	lock			"gs_cabDimensions"
	hideparameter	"gs_cabDimensions"
endif
if iCabinetScheme <> DRAWERS_CUPBOARD and iCabinetScheme <> DRAWERS_SHELVES then
	lock			"gs_upperCabHeight"
	hideparameter	"gs_upperCabHeight"
endif

if NOT(enableDrawers) then
	lock			"drawerNum",
					"gs_drawerHeight"
	hideparameter	"drawerNum",
					"gs_drawerHeight"
endif
if NOT(enableShelves) then
	lock			"shelfNum"
	hideparameter	"shelfNum"
endif
if NOT(enableCupboard) then
	lock			"cupboardDoors",
					"iCupboardDoors"
	hideparameter	"cupboardDoors",
					"iCupboardDoors"
endif

if NOT(bPartOfLayout) then
	if iCabinetScheme = DRAWERS_CUPBOARD then
		lock			"matShelf",
						"bShelves"
		hideparameter	"matShelf",
						"bShelves"
	endif
	if iCabinetScheme = DRAWERS_SHELVES then
		lock			"gs_knob_type_m_up",
						"gs_knob_mat",
						"gs_upper_mat"
		hideparameter	"gs_knob_type_m_up",
						"gs_knob_mat",
						"gs_upper_mat"
	endif
	if iCabinetScheme = DRAWERS then
		lock			"gs_knob_type_m_up",
						"gs_upper_mat",
						"gs_knob_mat",
						"matShelf",
						"bShelves"
		hideparameter	"gs_knob_type_m_up",
						"gs_upper_mat",
						"gs_knob_mat",
						"matShelf",
						"bShelves"
	endif
	if iCabinetScheme = CUPBOARD then
		lock			"gs_knob_type_m",
						"gs_drawer_mat",
						"matShelf",
						"matDrawerKnob"
		hideparameter	"gs_knob_type_m",
						"gs_drawer_mat",
						"matShelf",
						"matDrawerKnob",
						"bShelves"
	endif
	if iCabinetScheme = SHELVES then
		lock			"gs_knob_type_m",
						"gs_knob_type_m_up",
						"gs_bevel",
						"gs_upper_mat",
						"gs_knob_mat",
						"gs_drawer_mat",
						"matDrawerKnob"
		hideparameter	"gs_knob_type_m",
						"gs_knob_type_m_up",
						"gs_bevel",
						"gs_upper_mat",
						"gs_knob_mat",
						"gs_drawer_mat",
						"matDrawerKnob"
	endif
endif

if iCabinetScheme = DRAWERS_CUPBOARD then
	minUpperCabHeight = 0.1
else
	minUpperCabHeight = (shelfThk + 0.1) * shelfNum + 0.1 + boardThk + shelfThk / 2
endif

if	GLOB_MODPAR_NAME = "gs_upperCabHeight" or GLOB_MODPAR_NAME = "totalDrawerHeight" or\
	GLOB_MODPAR_NAME = "gs_drawerHeight" or GLOB_MODPAR_NAME = "drawerNum" or GLOB_MODPAR_NAME = "shelfNum" then

	if GLOB_MODPAR_NAME = "gs_upperCabHeight" then
		gs_drawerHeight = (zzyzx - baseHeight - gs_upperCabHeight) / drawerNum
		parameters gs_drawerHeight = gs_drawerHeight

		totalDrawerHeight = baseHeight + gs_drawerHeight * drawerNum
		parameters totalDrawerHeight = totalDrawerHeight
	endif
	if GLOB_MODPAR_NAME = "totalDrawerHeight" then
		gs_upperCabHeight = zzyzx - totalDrawerHeight
		parameters gs_upperCabHeight = gs_upperCabHeight

		gs_drawerHeight = (totalDrawerHeight - baseHeight) / drawerNum
		parameters gs_drawerHeight = gs_drawerHeight
	endif
	if GLOB_MODPAR_NAME = "gs_drawerHeight" then
		if iCabinetScheme = DRAWERS_CUPBOARD or iCabinetScheme = DRAWERS_SHELVES then
			totalDrawerHeight = baseHeight + gs_drawerHeight * drawerNum
			parameters totalDrawerHeight = totalDrawerHeight

			gs_upperCabHeight = zzyzx - totalDrawerHeight
			parameters gs_upperCabHeight = gs_upperCabHeight
		else
			drawerNum = INT((zzyzx - baseHeight) / gs_drawerHeight)
			parameters drawerNum = drawerNum
		endif
	endif
	if GLOB_MODPAR_NAME = "drawerNum" then
		if iCabinetScheme = DRAWERS_CUPBOARD or iCabinetScheme = DRAWERS_SHELVES then
			gs_drawerHeight = (totalDrawerHeight - baseHeight) / drawerNum
			parameters gs_drawerHeight = gs_drawerHeight

			gs_upperCabHeight = zzyzx - totalDrawerHeight
			parameters gs_upperCabHeight = gs_upperCabHeight
		else
			gs_drawerHeight = (zzyzx - baseHeight) / drawerNum
			parameters gs_drawerHeight = gs_drawerHeight
		endif
	endif
else
	if iCabinetScheme = DRAWERS_CUPBOARD or iCabinetScheme = DRAWERS_SHELVES then
		if gs_upperCabHeight - minUpperCabHeight > EPS then
			gs_upperCabHeight = zzyzx - baseHeight - gs_drawerHeight * drawerNum
		else
			gs_upperCabHeight = minUpperCabHeight
		endif
		parameters gs_upperCabHeight = gs_upperCabHeight

		gs_drawerHeight = (zzyzx - baseHeight - gs_upperCabHeight) / drawerNum
		if gs_drawerHeight < 0.1 then gs_drawerHeight = 0.1
		parameters gs_drawerHeight = gs_drawerHeight

		totalDrawerHeight = baseHeight + gs_drawerHeight * drawerNum
		if totalDrawerHeight > zzyzx - minUpperCabHeight then
			maxDrawerNum = INT((zzyzx - gs_upperCabHeight - baseHeight) / 0.1)
			if drawerNum > maxDrawerNum then drawerNum = maxDrawerNum
			parameters drawerNum = drawerNum
			totalDrawerHeight = baseHeight + gs_drawerHeight * drawerNum
		endif
		parameters totalDrawerHeight = totalDrawerHeight
	endif
endif

if NOT(bPartOfLayout) then
	if bCallcabSymbolType then
		if iCabinetScheme = DRAWERS_CUPBOARD or iCabinetScheme = DRAWERS_SHELVES then
			values "zzyzx" range [(baseHeight + 0.1 * drawerNum + minUpperCabHeight),]
			values "drawerNum" range [1, MAX(INT((zzyzx - gs_upperCabHeight - baseHeight) / 0.1), drawerNum)]
			values "cabinetBaseHeight" range (0, MAX(zzyzx - minUpperCabHeight - 0.1 * drawerNum, cabinetBaseHeight)]
			values "gs_drawerHeight" range [0.1, ((zzyzx - baseHeight - minUpperCabHeight) / drawerNum)]
			values "totalDrawerHeight" range[baseHeight + 0.1 * drawerNum, zzyzx - minUpperCabHeight]
			values "gs_upperCabHeight" range [minUpperCabHeight, (zzyzx - 0.1 * drawerNum - baseHeight)]
 
			if iCabinetScheme = DRAWERS_CUPBOARD then
				! Enable all Symbol Types
				iSymbolStyleEnable = 2**1 + 2**2 + 2**3 + 2**4 + 2**5 + 2**6 + 2**7 + 2**8 + 2**9
			endif
		endif
		if iCabinetScheme = DRAWERS_SHELVES then
			! Enable only Symbol Types without door symbol
			iSymbolStyleEnable = 2**1 + 2**2 + 2**3 + 2**6
			if bShelvesNoneType then
				values "shelfNum" range [0, MAX((gs_upperCabHeight - 0.1) / (shelfThk + 0.1), shelfNum)]
			else
				values "shelfNum" range [1, MAX((gs_upperCabHeight - 0.1) / (shelfThk + 0.1), shelfNum)]
			endif
		endif
		if iCabinetScheme = DRAWERS then
			! Enable only Symbol Types without door symbol
			iSymbolStyleEnable = 2**1 + 2**2 + 2**3 + 2**6
			values "zzyzx" range [(baseHeight + 0.1 * drawerNum),]
			values "drawerNum" range [1, MAX(INT((zzyzx - baseHeight) / 0.1), drawerNum)]
			values "cabinetBaseHeight" range (0, MAX(zzyzx - 0.1 * drawerNum, cabinetBaseHeight)]
		endif
		if iCabinetScheme = CUPBOARD then
			! Enable all Symbol Types
			iSymbolStyleEnable = 2**1 + 2**2 + 2**3 + 2**4 + 2**5 + 2**6 + 2**7 + 2**8 + 2**9
			values "zzyzx" range [(baseHeight + 0.1),]
			values "cabinetBaseHeight" range (0, MAX(zzyzx - 0.1, cabinetBaseHeight)]
		endif
		if iCabinetScheme = SHELVES then
			! Enable only Symbol Types without door and drawer symbol
			iSymbolStyleEnable = 2**1 + 2**2 + 2**3
			values "zzyzx" range [baseHeight + (shelfThk + 0.1) * shelfNum + 0.1 + boardThk * 2,]
			if bShelvesNoneType then
				values "shelfNum" range [0, MAX((zzyzx - baseHeight - 0.1 - boardThk * 2) / (shelfThk + 0.1), shelfNum)]
			else
				values "shelfNum" range [1, MAX((zzyzx - baseHeight - 0.1 - boardThk * 2) / (shelfThk + 0.1), shelfNum)]
			endif
			values "cabinetBaseHeight" range (0, MAX(zzyzx - (shelfThk + 0.1) * shelfNum - 0.1 - boardThk * 2, cabinetBaseHeight)]
		endif

		call "cabSymbolType" parameters 	iSymbolStyle = iSymbolStyle,
											iSymbolStyleEnable = iSymbolStyleEnable
	endif
else
	if iCabinetScheme = DRAWERS_CUPBOARD or iCabinetScheme = DRAWERS_SHELVES then
		values "extCabinetHeight" range [MAX(baseHeight + 0.1 * drawerNum + minUpperCabHeight, tableTopHeight),]
		values "drawerNum" range [1, MAX(INT((extCabinetHeight - gs_upperCabHeight - baseHeight) / 0.1), drawerNum)]
		values "cabinetBaseHeight" range (0, MAX(extCabinetHeight - minUpperCabHeight - 0.1 * drawerNum, cabinetBaseHeight)]
		values "gs_drawerHeight" range [0.1, ((extCabinetHeight - baseHeight - minUpperCabHeight) / drawerNum)]
		values "totalDrawerHeight" range[baseHeight + 0.1 * drawerNum, extCabinetHeight - minUpperCabHeight]
		values "gs_upperCabHeight" range [minUpperCabHeight, (extCabinetHeight - 0.1 * drawerNum - baseHeight)]
	endif
	if iCabinetScheme = DRAWERS_SHELVES then
		if bShelvesNoneType then
			values "shelfNum" range [0, MAX((gs_upperCabHeight - 0.1) / (shelfThk + 0.1), shelfNum)]
		else
			values "shelfNum" range [1, MAX((gs_upperCabHeight - 0.1) / (shelfThk + 0.1), shelfNum)]
		endif
	endif
	if iCabinetScheme = DRAWERS then
		values "extCabinetHeight" range [MAX(baseHeight + 0.1 * drawerNum, tableTopHeight),]
		values "drawerNum" range [1, MAX(INT((extCabinetHeight - baseHeight) / 0.1), drawerNum)]
		values "cabinetBaseHeight" range (0, MAX(extCabinetHeight - 0.1 * drawerNum, cabinetBaseHeight)]
	endif
	if iCabinetScheme = CUPBOARD then
		values "extCabinetHeight" range [MAX(baseHeight + 0.1, tableTopHeight),]
		values "cabinetBaseHeight" range (0, MAX(extCabinetHeight - 0.1, cabinetBaseHeight)]
	endif
	if iCabinetScheme = SHELVES then
		values "extCabinetHeight" range [MAX(baseHeight + (shelfThk + 0.1) * shelfNum + 0.1 + boardThk * 2, tableTopHeight),]
		if bShelvesNoneType then
			values "shelfNum" range [0, MAX((extCabinetHeight - baseHeight - 0.1 - boardThk * 2) / (shelfThk + 0.1), shelfNum)]
		else
			values "shelfNum" range [1, MAX((extCabinetHeight - baseHeight - 0.1 - boardThk * 2) / (shelfThk + 0.1), shelfNum)]
		endif
		values "cabinetBaseHeight" range (0, MAX(extCabinetHeight - (shelfThk + 0.1) * shelfNum - 0.1 - boardThk * 2, cabinetBaseHeight)]
	endif
endif

if bPartOfLayout then
	if NOT(bShowExtCabParams) then
		lock			"cabinetScheme",
						"iCabinetScheme",
						"cupboardDoors",
						"iCupboardDoors",
						"gs_drawerHeight",
						"gs_upperCabHeight",
						"drawerNum",
						"shelfNum",
						"bCabinetBase",
						"cabinetBaseHeight"
	endif

	values "gs_knobVerPos_m" 1, 0, -1
endif

! =============================================================================
! UI Support
! =============================================================================

if GLOB_UI_BUTTON_ID < 0 then
	parameters gs_ui_current_page = -GLOB_UI_BUTTON_ID
endif
