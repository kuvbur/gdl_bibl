
unID = tableTops_unID

! ======================================================================
! Minimal Space
! ======================================================================

reqBMinSpace = 0
call "fa_minimalspace" parameters all MSType = 0, unID = 3000,
							returned_parameters reqBMinSpace,
												MSFillType,
												MSFillPen,
												MSFillBackPen,
												MSContLineType,
												MSContLinePen



! ======================================================================
! TableTop
! ======================================================================

pen gs_cont_pen
line_type 1
fill gs_fill_type
minSpaceUnID = 3000

gosub "2DHotspots"

if iTableTopType = TTOP_L_SHAPED then	gosub "deskLShaped"
if iTableTopType = TTOP_STRAIGHT then	gosub "deskStraight"
if archedTableTop then					gosub "deskArched"
if iTableTopType = TTOP_RECT then		gosub "deskRectangle"

if NOT(bPartOfLayout) then gosub "minimalSpace"

! ======================================================================
tableTops_unID = unID
end tableTops_unID
! ======================================================================

"deskLShaped":
	put	0, 0, 1,
		tableLength1, 0, 1,
		tableLength1, tableDepth1, 1

	if iInnerEdge = STRAIGHT then
		put	innerCornerPos, tableDepth1,	1
	else
		put	innerArcStartPos, tableDepth1,	1,
			innerEdgeRad, -(90 - tableTopAngle / 2) * 2, 2001
	endif

	put	xPosTopCorner, yPosTopCorner, 1,
		-xPosSideCorner, yPosSideCorner, 1

	poly2_b NSP / 3, 1+2+4+64, gs_fill_pen, gs_back_pen,
			get(NSP)

	hotline2 0, 0, tableLength1, 0
	hotline2 tableLength1, 0, tableLength1, tableDepth1
	if iInnerEdge = STRAIGHT then
		hotline2 tableLength1, tableDepth1, innerCornerPos, tableDepth1
		hotline2 innerCornerPos, tableDepth1, xPosTopCorner, yPosTopCorner
	else
		hotline2 tableLength1, tableDepth1, innerArcStartPos, tableDepth1
		hotarc2 innerArcStartPos, tableDepth1 + innerEdgeRad, innerEdgeRad, 270 - (90 - tableTopAngle / 2) * 2, -90
		hotline2 xPosAngleEnd, yPosAngleEnd, xPosTopCorner, yPosTopCorner
	endif
	hotline2 xPosTopCorner, yPosTopCorner, -xPosSideCorner, yPosSideCorner
	hotline2 -xPosSideCorner, yPosSideCorner, 0, 0

return



"deskStraight":
	add2 -extraDeskWidth / 2 * bCalledAsExtension, 0
	poly2_b 4, 1+2+4+64, gs_fill_pen, gs_back_pen,
		0, 0, 1,
		tableLength1, 0, 1,
		tableLength1, tableDepth1, 1,
		0, tableDepth1, 1

	hotline2 0, 0, tableLength1, 0
	hotline2 0, 0, 0, tableDepth1
	hotline2 tableLength1, 0, tableLength1, tableDepth1
	hotline2 0, tableDepth1, tableLength1, tableDepth1
	del 1

return



"deskArched":
	if iTableTopType = TTOP_ARCHED_P_TOP then
		hotline2 0, -b, b, -b
		hotline2 b, 0, b, -b
	endif
	if iTableTopType = TTOP_ARCHED_360 then
		hotline2 b * SIN(60), -b * COS(60), b * SIN(60), b * COS(60)
	endif

	rot2 60 * (iTableTopType = TTOP_ARCHED_360)
	hotarc2 0, 0, b, 270 - tableTopAngle, 270

	if bPartColumnCut then
		put	-partColumnCutWidth, 0, 1,
			-partColumnCutWidth, -partColumnCutWidth, 1,
			0, -partColumnCutWidth, 1
	endif
	put	0, -b, 1,
		0, 0, 900,
		0, -tableTopAngle, 4001,
		b * (iTableTopType = TTOP_ARCHED_P_TOP) - partColumnCutWidth * bPartColumnCut, -b * (iTableTopType = TTOP_ARCHED_360 or iTableTopType = TTOP_ARCHED_P_TOP), 1

	poly2_b NSP / 3, 1+2+4+64, gs_fill_pen, gs_back_pen,
			get(NSP)
	del 1

	hotline2 0, 0, 0, -b
	hotline2 0, 0, -SIN(tableTopAngle) * b, -COS(tableTopAngle) * b

return



"deskRectangle":
	poly2_b 4, 1+2+4+64, gs_fill_pen, gs_back_pen,
		-a / 2, -b / 2, 1,
		a / 2, -b / 2, 1,
		a / 2, b / 2, 1,
		-a / 2, b / 2, 1

	hotline2 -a / 2, -b / 2, a / 2, -b / 2
	hotline2 a / 2, -b / 2, a / 2, b / 2
	hotline2 a / 2, b / 2, -a / 2, b / 2
	hotline2 -a / 2, b / 2, -a / 2, -b / 2

return



"2DHotspots":
	if iTableTopType = TTOP_L_SHAPED then
		if bEnableDeskHsCorner then
			hotspot2 0, 0, unID:																unID = unID + 1
		endif
		if bEnableDeskHsHalfEdge then
			hotspot2 tableLength1 / 2, 0, unID:													unID = unID + 1
			hotspot2 -xPosSideCorner / 2, yPosSideCorner / 2, unID:								unID = unID + 1
		endif
		if bEnableDeskHsEditingX then
			hotspot2 0, tableDepth1, unID, tableLength1, 1 + 128:								unID = unID + 1
			hotspot2 -tableLength1, tableDepth1, unID, tableLength1, 3 + 128:					unID = unID + 1
			hotspot2 tableLength1, tableDepth1, unID, tableLength1, 2:							unID = unID + 1

			hotspot2 0, 0, unID, tableLength1, 1 + 128:											unID = unID + 1
			hotspot2 -tableLength1, 0, unID, tableLength1, 3 + 128:								unID = unID + 1
			hotspot2 tableLength1, 0, unID, tableLength1, 2:									unID = unID + 1
		endif
		if bEnableDeskHsEditingC then
			if iInnerEdge = STRAIGHT then
				hotspot2 innerCornerPos, 0, unID, tableDepth1, 1 + 128:							unID = unID + 1
				hotspot2 innerCornerPos, -1, unID, tableDepth1, 3 + 128:						unID = unID + 1
				hotspot2 innerCornerPos, tableDepth1, unID, tableDepth1, 2:						unID = unID + 1
				hotspot2 0, tableDepth1, unID, innerCornerPos, 1 + 128, tableDepth2:			unID = unID + 1
				hotspot2 -1, tableDepth1, unID, innerCornerPos, 3 + 128, tableDepth2:			unID = unID + 1
				hotspot2 innerCornerPos, tableDepth1, unID, innerCornerPos, 2, tableDepth2:		unID = unID + 1
			else
				hotspot2 innerArcStartPos, 0, unID, tableDepth1, 1 + 128:							unID = unID + 1
				hotspot2 innerArcStartPos, -1, unID, tableDepth1, 3 + 128:							unID = unID + 1
				hotspot2 innerArcStartPos, tableDepth1, unID, tableDepth1, 2:						unID = unID + 1
				hotspot2 0, tableDepth1, unID, innerArcStartPos, 1 + 128, innerEdgeRad:				unID = unID + 1
				hotspot2 -1, tableDepth1, unID, innerArcStartPos, 3 + 128, innerEdgeRad:			unID = unID + 1
				hotspot2 innerArcStartPos, tableDepth1, unID, innerArcStartPos, 2, innerEdgeRad:	unID = unID + 1

				rot2 tableTopAngle - 180
					hotspot2 -innerArcEndPos, 0, unID, tableDepth2, 1 + 128:						unID = unID + 1
					hotspot2 -innerArcEndPos, -1, unID, tableDepth2, 3 + 128:						unID = unID + 1
					hotspot2 -innerArcEndPos, tableDepth2, unID, tableDepth2, 2:					unID = unID + 1

					hotspot2 0, tableDepth2, unID, innerArcEndPos, 1 + 128, innerEdgeRad: 			unID = unID + 1
					hotspot2 1, tableDepth2, unID, innerArcEndPos, 3 + 128, innerEdgeRad: 			unID = unID + 1
					hotspot2 -innerArcEndPos, tableDepth2, unID, innerArcEndPos, 2, innerEdgeRad:	unID = unID + 1
				del 1
			endif
		endif
		if bEnableDeskHsEditingY then
			rot2 tableTopAngle - 180
				hotspot2 -tableLength2, 0, unID, tableDepth2, 1 + 128:							unID = unID + 1
				hotspot2 -tableLength2, -tableDepth2, unID, tableDepth2, 3 + 128:				unID = unID + 1
				hotspot2 -tableLength2, tableDepth2, unID, tableDepth2, 2:						unID = unID + 1

				hotspot2 0, tableDepth2, unID, tableLength2, 1 + 128:							unID = unID + 1
				hotspot2 tableLength2, tableDepth2, unID, tableLength2, 3 + 128:				unID = unID + 1
				hotspot2 -tableLength2, tableDepth2, unID, tableLength2, 2:						unID = unID + 1
			del 1

			hotspot2 tableLength1, 0, unID, tableDepth1, 1 + 128:								unID = unID + 1
			hotspot2 tableLength1, -tableDepth1, unID, tableDepth1, 3 + 128:					unID = unID + 1
			hotspot2 tableLength1, tableDepth1, unID, tableDepth1, 2:							unID = unID + 1

			hotspot2 0, 0, unID, tableLength2, 1 + 128:											unID = unID + 1
			hotspot2 1, -1, unID, tableLength2, 3 + 128: 										unID = unID + 1
			hotspot2 -xPosSideCorner, yPosSideCorner, unID, tableLength2, 2: 					unID = unID + 1
		endif
	endif

	if iTableTopType = TTOP_STRAIGHT then
		if NOT(bCalledAsExtension) then
			if NOT(bPartOfLayout) and NOT(bPartOfWsSolo) then
				if bEnableDeskHsEditingX then
					hotspot2 0, 0, unID, a, 1 + 256:			unID = unID + 1
					hotspot2 -1, 0, unID, a, 3 + 128:			unID = unID + 1
					hotspot2 a, 0, unID, a, 2:					unID = unID + 1

					hotspot2 0, b, unID, a, 1 + 256:			unID = unID + 1
					hotspot2 -1, b, unID, a, 3 + 128:			unID = unID + 1
					hotspot2 a, b, unID, a, 2:					unID = unID + 1
				endif
				if bEnableDeskHsEditingY then
					hotspot2 0, 0, unID, b, 1 + 256:			unID = unID + 1
					hotspot2 0, -1, unID, b, 3 + 128:			unID = unID + 1
					hotspot2 0, b, unID, b, 2:					unID = unID + 1

					hotspot2 a, 0, unID, b, 1 + 256:			unID = unID + 1
					hotspot2 a, -1, unID, b, 3 + 128:			unID = unID + 1
					hotspot2 a, b, unID, b, 2:					unID = unID + 1
				endif

				hotspot2 a / 2, b / 2, unID:					unID = unID + 1

				if bEnableDeskHsHalfEdge then
					hotspot2 0, b / 2, unID:					unID = unID + 1
					hotspot2 a, b / 2, unID:					unID = unID + 1
					hotspot2 a / 2, 0, unID:					unID = unID + 1
					hotspot2 a / 2, b, unID:					unID = unID + 1
				endif
			else
				if bPartOfWsSolo then
					if bEnableDeskHsEditingX then
						hotspot2 0, 0, unID, tableLength1, 1 + 256:					unID = unID + 1
						hotspot2 -1, 0, unID, tableLength1, 3 + 128:				unID = unID + 1
						hotspot2 tableLength1, 0, unID, tableLength1, 2:			unID = unID + 1

						hotspot2 0, tableDepth1, unID, tableLength1, 1 + 256:		unID = unID + 1
						hotspot2 -1, tableDepth1, unID, tableLength1, 3 + 128:		unID = unID + 1
						hotspot2 tableLength1, tableDepth1, unID, tableLength1, 2:	unID = unID + 1
					endif
					if bEnableDeskHsEditingY then
						hotspot2 0, 0, unID, tableDepth1, 1 + 256:					unID = unID + 1
						hotspot2 0, -1, unID, tableDepth1, 3 + 128:					unID = unID + 1
						hotspot2 0, tableDepth1, unID, tableDepth1, 2:				unID = unID + 1

						hotspot2 tableLength1, 0, unID, tableDepth1, 1 + 256:		unID = unID + 1
						hotspot2 tableLength1, -1, unID, tableDepth1, 3 + 128:		unID = unID + 1
						hotspot2 tableLength1, tableDepth1, unID, tableDepth1, 2:	unID = unID + 1
					endif
				else
					if bEnableDeskHsEditingX then
						hotspot2 0, 0, unID, tableLength1, 1 + 128:					unID = unID + 1
						hotspot2 -1, 0, unID, tableLength1, 3 + 128:				unID = unID + 1
						hotspot2 tableLength1, 0, unID, tableLength1, 2:			unID = unID + 1

						hotspot2 0, tableDepth1, unID, tableLength1, 1 + 128:		unID = unID + 1
						hotspot2 -1, tableDepth1, unID, tableLength1, 3 + 128:		unID = unID + 1
						hotspot2 tableLength1, tableDepth1, unID, tableLength1, 2:	unID = unID + 1
					endif
					if bEnableDeskHsEditingY then
						hotspot2 0, 0, unID, tableDepth1, 1 + 128:					unID = unID + 1
						hotspot2 0, -1, unID, tableDepth1, 3 + 128:					unID = unID + 1
						hotspot2 0, tableDepth1, unID, tableDepth1, 2:				unID = unID + 1
					endif
					if bEnableDeskHsEditingY then
						hotspot2 tableLength1, 0, unID, tableDepth1, 1 + 128:		unID = unID + 1
						hotspot2 tableLength1, -1, unID, tableDepth1, 3 + 128:		unID = unID + 1
						hotspot2 tableLength1, tableDepth1, unID, tableDepth1, 2:	unID = unID + 1
					endif
				endif
			endif
		else
			hotspot2 0, extraDeskDepth, unID, halfExtraDeskWidth, 1 + 128, extraDeskWidth:				unID = unID + 1
			hotspot2 -1, extraDeskDepth, unID, halfExtraDeskWidth, 3, extraDeskWidth:					unID = unID + 1
			hotspot2 halfExtraDeskWidth, extraDeskDepth, unID, halfExtraDeskWidth, 2, extraDeskWidth:	unID = unID + 1
			hotspot2 halfExtraDeskWidth, 0, unID, extraDeskDepth, 1 + 128:								unID = unID + 1
			hotspot2 halfExtraDeskWidth, -extraDeskDepth, unID, extraDeskDepth, 3:						unID = unID + 1
			hotspot2 halfExtraDeskWidth, extraDeskDepth, unID, extraDeskDepth, 2:						unID = unID + 1

			hotspot2 0, extraDeskDepth, unID, halfExtraDeskWidth, 1 + 128, extraDeskWidth:				unID = unID + 1
			hotspot2 1, extraDeskDepth, unID, halfExtraDeskWidth, 3, extraDeskWidth:					unID = unID + 1
			hotspot2 -halfExtraDeskWidth, extraDeskDepth, unID, halfExtraDeskWidth, 2, extraDeskWidth:	unID = unID + 1
			hotspot2 -halfExtraDeskWidth, 0, unID, extraDeskDepth, 1 + 128:								unID = unID + 1
			hotspot2 -halfExtraDeskWidth, -extraDeskDepth, unID, extraDeskDepth, 3:						unID = unID + 1
			hotspot2 -halfExtraDeskWidth, extraDeskDepth, unID, extraDeskDepth, 2:						unID = unID + 1
		endif
	endif

	if archedTableTop and NOT(bPartOfLayout) and NOT(bPartOfWsSolo) then
		if iTableTopType <> TTOP_ARCHED_360 then
			hotspot2 0, 0, unID:														unID = unID + 1
		else
			hotspot2 -b * SIN(tableTopAngle), -b * COS(tableTopAngle), unID:			unID = unID + 1
			hotspot2 -b * SIN(tableTopAngle - 60), -b * COS(tableTopAngle - 60), unID:	unID = unID + 1
		endif

		if iTableTopType = TTOP_ARCHED_P_TOP then
			hotspot2 b, -b, unID:														unID = unID + 1
		endif

		hotspot2 0, 0, unID, b, 1 + 128:												unID = unID + 1
		hotspot2 1, 0, unID, b, 3 + 128:												unID = unID + 1
		hotspot2 0, -b, unID, b, 2:														unID = unID + 1

		if tableTopAngle > 135 then
			hotspot2 0, 0, unID, b, 1 + 128:											unID = unID + 1
			hotspot2 1, 0, unID, b, 3 + 128:											unID = unID + 1
			hotspot2 -b * SIN(90), -b * COS(90), unID, b, 2:							unID = unID + 1
		endif
		if tableTopAngle > 180 then
			hotspot2 0, 0, unID, b, 1 + 128:	unID = unID + 1
			hotspot2 1 - 2 * (tableTopAngle > 180), 0, unID, b, 3 + 128:				unID = unID + 1
			hotspot2 -b * SIN(180), -b * COS(180), unID, b, 2:							unID = unID + 1
		endif
		if iTableTopType <> TTOP_ARCHED_360 then
			hotspot2 0, 0, unID, b, 1 + 128:	unID = unID + 1
			hotspot2 1 - 2 * (tableTopAngle > 180), 0, unID, b, 3 + 128:				unID = unID + 1
			hotspot2 -b * SIN(tableTopAngle), -b * COS(tableTopAngle), unID, b, 2:		unID = unID + 1
		endif
	endif

	if iTableTopType = TTOP_RECT and NOT(bPartOfLayout) and NOT(bPartOfWsSolo) then
		hotspot2 0, 0, unID:							unID = unID + 1

		hotspot2 0, halfB, unID, halfA, 1 + 128, a:		unID = unID + 1
		hotspot2 -halfA, halfB, unID, halfA, 3, a:		unID = unID + 1
		hotspot2 halfA, halfB, unID, halfA, 2, a:		unID = unID + 1
		hotspot2 halfA, 0, unID, halfB, 1 + 128, b:		unID = unID + 1
		hotspot2 halfA, -halfB, unID, halfB, 3, b:		unID = unID + 1
		hotspot2 halfA, halfB, unID, halfB, 2, b:		unID = unID + 1

		hotspot2 0, -halfB, unID, halfA, 1 + 128, a:	unID = unID + 1
		hotspot2 -halfA, -halfB, unID, halfA, 3, a:		unID = unID + 1
		hotspot2 halfA, -halfB, unID, halfA, 2, a:		unID = unID + 1
		hotspot2 halfA, 0, unID, halfB, 1 + 128, b:		unID = unID + 1
		hotspot2 halfA, halfB, unID, halfB, 3, b:		unID = unID + 1
		hotspot2 halfA, -halfB, unID, halfB, 2, b:		unID = unID + 1

		hotspot2 0, halfB, unID, halfA, 1 + 128, a:		unID = unID + 1
		hotspot2 halfA, halfB, unID, halfA, 3, a:		unID = unID + 1
		hotspot2 -halfA, halfB, unID, halfA, 2, a:		unID = unID + 1
		hotspot2 -halfA, 0, unID, halfB, 1 + 128, b:	unID = unID + 1
		hotspot2 -halfA, -halfB, unID, halfB, 3, b:		unID = unID + 1
		hotspot2 -halfA, halfB, unID, halfB, 2, b:		unID = unID + 1

		hotspot2 0, -halfB, unID, halfA, 1 + 128, a:	unID = unID + 1
		hotspot2 halfA, -halfB, unID, halfA, 3, a:		unID = unID + 1
		hotspot2 -halfA, -halfB, unID, halfA, 2, a:		unID = unID + 1
		hotspot2 -halfA, 0, unID, halfB, 1 + 128, b:	unID = unID + 1
		hotspot2 -halfA, halfB, unID, halfB, 3, b:		unID = unID + 1
		hotspot2 -halfA, -halfB, unID, halfB, 2, b:		unID = unID + 1
	endif

	if archedTableTop and NOT(bPartOfLayout) and NOT(bPartOfWsSolo) and iTableTopType = TTOP_ARCHED_360 then
		hotspot2 0, 0, unID:							unID = unID + 1
	endif

return

"minimalSpace":
	if MSFront > EPS and reqBMinSpace <> 0 then
		drawindex 10
		FILL MSFillType
		pen MSContLinePen
		line_type MSContLineType

		if iTableTopType = TTOP_L_SHAPED then
			if bPartOfWsSolo then
				hotspot2 innerCornerPos + MSSide, tableDepth1 + MSFront, minSpaceUnID : minSpaceUnID = minSpaceUnID + 1
				hotspot2 innerCornerPos + MSFront / TAN(tableTopAngle / 2), tableDepth1 + MSFront, minSpaceUnID : minSpaceUnID = minSpaceUnID + 1
				hotspot2 innerCornerPos - MSSide2 * COS(180 - tableTopAngle) + MSFront * SIN(180 - tableTopAngle), tableDepth1 + MSSide2 * SIN(180 - tableTopAngle) + MSFront * COS(180 - tableTopAngle), minSpaceUnID : minSpaceUnID = minSpaceUnID + 1

				if MSSide > tableLength1 - innerCornerPos then
					hotspot2 innerCornerPos + MSSide, tableDepth1, minSpaceUnID : minSpaceUnID = minSpaceUnID + 1
					put tableLength1, tableDepth1, 1
				endif

				put innerCornerPos + MSSide, tableDepth1, 1,
					innerCornerPos + MSSide, tableDepth1 + MSFront, 1,
					innerCornerPos + MSFront / TAN(tableTopAngle / 2), tableDepth1 + MSFront, 1,
					innerCornerPos - MSSide2 * COS(180 - tableTopAngle) + MSFront * SIN(180 - tableTopAngle), tableDepth1 + MSSide2 * SIN(180 - tableTopAngle) + MSFront * COS(180 - tableTopAngle), 1,
					innerCornerPos - MSSide2 * COS(180 - tableTopAngle), tableDepth1 + MSSide2 * SIN(180 - tableTopAngle), MSSide2 > SQR((innerCornerPos - xPosTopCorner) ** 2 + (yPosTopCorner - tableDepth1) ** 2)

				if MSSide2 > SQR((innerCornerPos - xPosTopCorner) ** 2 + (yPosTopCorner - tableDepth1) ** 2) then
					hotspot2 innerCornerPos - MSSide2 * COS(180 - tableTopAngle), tableDepth1 + MSSide2 * SIN(180 - tableTopAngle), minSpaceUnID : minSpaceUnID = minSpaceUnID + 1
					put xPosTopCorner, yPosTopCorner, 0
				endif
			endif
			if NOT(bPartOfLayout) and NOT(bPartOfWsSolo) then
				if tableTopAngle = 90 then
					if tableDepth2 + MSFront < tableLength1 then
						hotspot2 tableLength1, tableDepth1 + MSFront, minSpaceUnID : minSpaceUnID = minSpaceUnID + 1
					else
						hotspot2 tableDepth2 + MSFront, tableDepth1 + MSFront, minSpaceUnID : minSpaceUnID = minSpaceUnID + 1
						hotspot2 tableDepth2 + MSFront, tableDepth1, minSpaceUnID : minSpaceUnID = minSpaceUnID + 1
					endif
					if tableDepth1 + MSFront < tableLength2 and tableDepth2 + MSFront < tableLength1 then
						hotspot2 innerCornerPos + MSFront, tableDepth1 + MSFront, minSpaceUnID : minSpaceUnID = minSpaceUnID + 1
					endif
					if tableDepth1 + MSFront < tableLength2 then
						hotspot2 innerCornerPos + MSFront, tableLength2, minSpaceUnID : minSpaceUnID = minSpaceUnID + 1
					else
						hotspot2 innerCornerPos, tableDepth1 + MSFront, minSpaceUnID : minSpaceUnID = minSpaceUnID + 1
					endif

					put tableLength1, tableDepth1, 1,
						MAX(tableLength1, tableDepth2 + MSFront), tableDepth1, 1,
						MAX(tableLength1, tableDepth2 + MSFront), tableDepth1 + MSFront, 1,
						innerCornerPos + MSFront, tableDepth1 + MSFront, 1,
						innerCornerPos + MSFront, MAX(tableLength2, tableDepth1 + MSFront), 1,
						innerCornerPos, MAX(tableLength2, tableDepth1 + MSFront), 1,
						innerCornerPos, tableLength2, 0
				else
					qq = SQR((innerCornerPos - xPosTopCorner) ** 2 + (yPosTopCorner - tableDepth1) ** 2)
					ww = qq * TAN(180 - tableTopAngle)
					zz = MSFront / TAN(tableTopAngle / 2)
					ee = (tableLength1 - innerCornerPos) * TAN(tableTopAngle / 2)

					if MSFront < ww then
						hotspot2 tableLength1, tableDepth1 + MSFront, minSpaceUnID : minSpaceUnID = minSpaceUnID + 1
						hotspot2 innerCornerPos + MSFront / TAN(tableTopAngle / 2), tableDepth1 + MSFront, minSpaceUnID : minSpaceUnID = minSpaceUnID + 1
						hotspot2 xPosTopCorner + SIN(180 - tableTopAngle) * MSFront, yPosTopCorner + COS(180 - tableTopAngle) * MSFront, minSpaceUnID : minSpaceUnID = minSpaceUnID + 1

						put tableLength1, tableDepth1, 1,
							tableLength1, tableDepth1 + MSFront, 1,
							innerCornerPos + MSFront / TAN(tableTopAngle / 2), tableDepth1 + MSFront, 1,
							xPosTopCorner + SIN(180 - tableTopAngle) * MSFront, yPosTopCorner + COS(180 - tableTopAngle) * MSFront, 1,
							xPosTopCorner, yPosTopCorner, 0
					else
						if MSFront < ee then
							hotspot2 tableLength1, tableDepth1 + MSFront, minSpaceUnID : minSpaceUnID = minSpaceUnID + 1
							hotspot2 innerCornerPos + MSFront / TAN(tableTopAngle / 2), tableDepth1 + MSFront, minSpaceUnID : minSpaceUnID = minSpaceUnID + 1
							hotspot2 innerCornerPos - COS(180 - tableTopAngle) * zz, tableDepth1 + SIN(180 - tableTopAngle) * zz, minSpaceUnID : minSpaceUnID = minSpaceUnID + 1

							put tableLength1, tableDepth1, 1,
								tableLength1, tableDepth1 + MSFront, 1,
								innerCornerPos + MSFront / TAN(tableTopAngle / 2), tableDepth1 + MSFront, 1,
								innerCornerPos - COS(180 - tableTopAngle) * zz, tableDepth1 + SIN(180 - tableTopAngle) * zz, 1,
								xPosTopCorner, yPosTopCorner, 0
						else
							hotspot2 innerCornerPos + MSFront / TAN(tableTopAngle / 2), tableDepth1, minSpaceUnID : minSpaceUnID = minSpaceUnID + 1
							hotspot2 innerCornerPos + MSFront / TAN(tableTopAngle / 2), tableDepth1 + MSFront, minSpaceUnID : minSpaceUnID = minSpaceUnID + 1
							hotspot2 innerCornerPos - COS(180 - tableTopAngle) * zz, tableDepth1 + SIN(180 - tableTopAngle) * zz, minSpaceUnID : minSpaceUnID = minSpaceUnID + 1

							put tableLength1, tableDepth1, 1,
								innerCornerPos + MSFront / TAN(tableTopAngle / 2), tableDepth1, 1,
								innerCornerPos + MSFront / TAN(tableTopAngle / 2), tableDepth1 + MSFront, 1,
								innerCornerPos - COS(180 - tableTopAngle) * zz, tableDepth1 + SIN(180 - tableTopAngle) * zz, 1,
								xPosTopCorner, yPosTopCorner, 0
						endif
					endif
				endif
			endif

			if iInnerEdge = STRAIGHT then
				put innerCornerPos, tableDepth1, 0
			else
				put xPosAngleEnd, yPosAngleEnd, 0,
					innerArcStartPos, tableDepth1, 1000
			endif

			poly2_b NSP / 3, 1+2+4+64, MSFillPen, MSFillBackPen,
					get(NSP)
		endif
		if iTableTopType = TTOP_STRAIGHT then
			add2 tableLength1, tableDepth1
			rot2 180
			call "fa_minimalspace" parameters all	MSType	= 12,
													unID	= minSpaceUnID,
													a		= tableLength1
			del 2
		endif
		if archedTableTop then
			if iTableTopType = TTOP_ARCHED_360 then
				rot2 60
				poly2_b 5, 1+2+4+64, MSFillPen, MSFillBackPen,
						hur * COS(60) - szelo * SIN(60), -hur * SIN(60) - szelo * COS(60), 1,
						0, 0, 900,
						0, -gamma, 4001,
						b * SIN(60), -b * COS(60), 0,
						0, tableTopAngle, 4001
				del 1

				hotspot2 -b - MSFront, 0, minSpaceUnID : minSpaceUnID = minSpaceUnID + 1
				hotspot2 0, b + MSFront, minSpaceUnID : minSpaceUnID = minSpaceUnID + 1
				hotspot2 0, -b - MSFront, minSpaceUnID : minSpaceUnID = minSpaceUnID + 1

				hotspot2 hur, szelo, minSpaceUnID : minSpaceUnID = minSpaceUnID + 1
				hotspot2 hur, -szelo, minSpaceUnID : minSpaceUnID = minSpaceUnID + 1
			endif
			if iTableTopType = TTOP_ARCHED_P_TOP then
				poly2_b 7, 1+2+4+64, MSFillPen, MSFillBackPen,
						0, -b, 1,
						-tt, -b, 1,
						-b, tt, 800,
						xb - tt * SIN(270 - tableTopAngle), yb + tt * COS(270 - tableTopAngle), 1001,
						xb, yb, 0,
						-tt * SIN(270 - tableTopAngle), tt * COS(270 - tableTopAngle), 800,
						0, -b, 1000

				hotspot2 -tt, -b, minSpaceUnID : minSpaceUnID = minSpaceUnID + 1
				hotspot2 b, tt, minSpaceUnID : minSpaceUnID = minSpaceUnID + 1
			endif
			if iTableTopType <> TTOP_ARCHED_360 and iTableTopType <> TTOP_ARCHED_P_TOP then
				poly2_b 8, 1+2+4+64, MSFillPen, MSFillBackPen,
						0,			-b,					1,
						0,			-b - MSFront,			1,
						-1,			0,					800,
						-SIN(tableTopAngle) * (b + MSFront),	-COS(tableTopAngle) * (b + MSFront), 1001,
						-SIN(tableTopAngle) * b,				-COS(tableTopAngle) * b,			 0,
						b * COS(tableTopAngle),				-b * SIN(tableTopAngle),			 800,
						0,			-b,		1000,
						0,			-b,		-1

				hotspot2 0,-b - MSFront, minSpaceUnID : minSpaceUnID = minSpaceUnID + 1
				hotspot2 -SIN(tableTopAngle) * (b + MSFront), -COS(tableTopAngle) * (b + MSFront), minSpaceUnID : minSpaceUnID = minSpaceUnID + 1
			endif
		endif
		if iTableTopType = TTOP_RECT then
			add2 -a / 2, -b / 2
				call "fa_minimalspace" parameters all MSType = 4, unID = minSpaceUnID, MSSide = 0, MSFront = MSFront2
			del 1
		endif
	endif

return




end

call "deskAcc_m"




