
! ==============================================================================
! 2D Symbol
! ==============================================================================

! iEnableLampSymbolTypes - possible values
!	2		- enable Type 1
!	4		- enable Type 2
!	8		- enable Type 3
!	16		- enable Type 4
!	32		- enable Type 5
!	64		- enable Type 6
!	128		- enable Type 7
!	256		- enable Type 8

if bEnableSymbolTypes & iEnableLampSymbolTypes > EPS then
	dim symbolTypeValueList[]
	j = 1
	for i = 1 to vardim1(stSymbolType)
		if bittest(iEnableLampSymbolTypes, i) then
			put i
			symbolTypeValueList[j] = stSymbolType[i]
			j = j + 1
		endif
	next i
	values "iSymbolType" get(NSP)
	values "symbolType" symbolTypeValueList
	if GLOB_MODPAR_NAME = "symbolType" then
		for i = 1 to vardim1(stSymbolType)
			if symbolType = stSymbolType[i] then iSymbolType = i
		next i
		parameters iSymbolType = iSymbolType
	else
		symbolType = stSymbolType[max(iSymbolType, 1)]
		parameters symbolType = symbolType
	endif
endif

values "typeTextRotation" textOrientation
values "typeTextRotation_m" 2, 1, 0

if GLOB_MODPAR_NAME = "typeTextRotation" then
	if typeTextRotation = textOrientation[1]	then typeTextRotation_m = 2
	if typeTextRotation = textOrientation[2]	then typeTextRotation_m = 1
	if typeTextRotation = textOrientation[3]	then typeTextRotation_m = 0
	parameters typeTextRotation_m = typeTextRotation_m
else
	if typeTextRotation_m = 2					then typeTextRotation = textOrientation[1]
	if typeTextRotation_m = 1					then typeTextRotation = textOrientation[2]
	if typeTextRotation_m = 0					then typeTextRotation = textOrientation[3]
	parameters typeTextRotation = typeTextRotation
endif

if gs_symbtype_2D_m = 1 then					! Realistic Symbol
	lock			"ss"
	hideparameter	"ss"
endif

values "ss" range(0,]

if	(NOT(bEnableFillOnRealisticSymbol) and (iEnableLampSymbolTypes < 1 | gs_symbtype_2D_m = SYMBOL_REALISTIC)) then
	lock			"gs_fill_type",
					"gs_fill_pen",
					"gs_back_pen"
	hideparameter	"gs_fill_type",
					"gs_fill_pen",
					"gs_back_pen"
endif

if NOT(bEnableTextOnRealisticSymbol) and gs_symbtype_2D_m = 1 then
	lock			"show_txt"
	hideparameter	"show_txt"
endif

if NOT(show_txt) | (NOT(bEnableTextOnRealisticSymbol) and gs_symbtype_2D_m = 1) | (not(_bEnableJPNText) & LibraryLangCode = "JPN") then
	lock			"txt",
					"fontType",
					"fsz",
					"fsz_point",
					"gs_text_style_bold",
					"gs_text_style_italic",
					"gs_text_style_underline",
					"gs_text_style_strike",
					"typeTextRotation",
					"typeTextRotation_m",
					"txt_pos_x",
					"txt_pos_y"
	hideparameter	"txt",
					"fontType",
					"fsz",
					"fsz_point",
					"gs_text_style_bold",
					"gs_text_style_italic",
					"gs_text_style_underline",
					"gs_text_style_strike",
					"typeTextRotation",
					"typeTextRotation_m",
					"txt_pos_x",
					"txt_pos_y"
endif

Dot_in_mm = 25.4 / 72

! Synhronized mm and point in marker width
if GLOB_MODPAR_NAME = "fsz" then
	parameters fsz_point = fsz / Dot_in_mm
	fsz_point = fsz / Dot_in_mm
endif
if GLOB_MODPAR_NAME = "fsz_point" then
	parameters fsz = fsz_point * Dot_in_mm
	fsz = fsz_point * Dot_in_mm
endif

parameters fsz = abs(fsz)
values "fsz" range (0,]
values "fsz_point" range (0,]

hideparameter	"fsz_point"

! ==============================================================================
!	Japanese parameters logic
! ==============================================================================

if LibraryLangCode <> "JPN" then
	if bEnableSymbolTypes then
		lock	"iSpecSymbolType",
				"specSymbolWidth",
				"specSymbolDepth"
		hideparameter	"iSpecSymbolType",
						"specSymbolWidth",
						"specSymbolDepth"
	endif
else
	values{2} "iSpecSymbolType"	iSpecLampTypes,			stSpecLampTypes,
								SPEC_SYMBOL_HAS_NO_2D,	"No 2D Special Symbol"

	if gs_symbtype_2D_m = 1 then
		lock			"iSpecSymbolType"
		hideparameter	"iSpecSymbolType"
	endif

	if not(_bEnableJPNText) then
		show_txt = 0
		parameters show_txt = show_txt

		lock			"show_txt"
		hideparameter	"show_txt"
	endif

	if bEnableSymbolTypes then
		if	(iSpecSymbolType <> SPEC_FLUORESCENT_1_CEILING & \
			iSpecSymbolType <> SPEC_FLUORESCENT_2_CEILING & \
			iSpecSymbolType <> SPEC_FLUORESCENT_3_CEILING & \
			iSpecSymbolType <> SPEC_FLUORESCENT_4_CEILING & \
			iSpecSymbolType <> SPEC_FLUORESCENT_1_WALL & \
			iSpecSymbolType <> SPEC_FLUORESCENT_2_WALL & \
			iSpecSymbolType <> SPEC_FLUORESCENT_EMERGENCY_CEIL & \
			iSpecSymbolType <> SPEC_FLUORESCENT_LONGLAST_1_CEIL & \
			iSpecSymbolType <> SPEC_FLUORESCENT_LONGLAST_2_CEIL & \
			iSpecSymbolType <> SPEC_EMERGENCY_FLOURESCENT_CEIL & \
			iSpecSymbolType <> SPEC_EMERGENCY_FLOURESCENT_WALL) |\
			gs_symbtype_2D_m = 1 	then

			lock			"specSymbolWidth"
			hideparameter	"specSymbolWidth"
		endif

		if	(iSpecSymbolType <> SPEC_FLUORESCENT_VERT_WALL & \
			iSpecSymbolType <> SPEC_SPOT & \
			iSpecSymbolType <> SPEC_EMERGENCY_VERT_WALL & \
			iSpecSymbolType <> SPEC_EMERGENCY_VERT_WALL_CIRC) |\
			gs_symbtype_2D_m = 1 	then

			lock			"specSymbolDepth"
			hideparameter	"specSymbolDepth"
		endif
	endif

	if GLOB_MODPAR_NAME = "iSpecSymbolType" then
		if iSpecSymbolType = SPEC_DOWNLIGHT then txt="DL"
		if iSpecSymbolType = SPEC_CEILING then txt="CL"
		if iSpecSymbolType = SPEC_CHANDELIER then txt="CH"
		if iSpecSymbolType = SPEC_PENDANT_CHAIN then txt="CP"
		if iSpecSymbolType = SPEC_PENDANT_PIPE then txt="P"
		parameters txt = txt
	endif
endif



