

	! ======================================================================
	! Illumination Surface
	! ======================================================================

	DIM	tmp_C4D_ChCol_Color[3]
		tmp_C4D_ChCol_Color[1] = 1
		tmp_C4D_ChCol_Color[2] = 1
		tmp_C4D_ChCol_Color[3] = 1
	DIM	tmp_C4D_ShNoise_Color1_1[3]
		tmp_C4D_ShNoise_Color1_1[1] = 0
		tmp_C4D_ShNoise_Color1_1[2] = 0
		tmp_C4D_ShNoise_Color1_1[3] = 0
	DIM	tmp_C4D_ShNoise_Color2_1[3]
		tmp_C4D_ShNoise_Color2_1[1] = 1
		tmp_C4D_ShNoise_Color2_1[2] = 1
		tmp_C4D_ShNoise_Color2_1[3] = 1
	DIM	tmp_C4D_ShNoise_RelativeScale_1[3]
		tmp_C4D_ShNoise_RelativeScale_1[1] = 1
		tmp_C4D_ShNoise_RelativeScale_1[2] = 1
		tmp_C4D_ShNoise_RelativeScale_1[3] = 1
	DIM	tmp_C4D_ChLum_Color[3]
		tmp_C4D_ChLum_Color[1] = 1
		tmp_C4D_ChLum_Color[2] = 1
		tmp_C4D_ChLum_Color[3] = 1
	DIM	tmp_C4D_ChTra_Color[3]
		tmp_C4D_ChTra_Color[1] = 1
		tmp_C4D_ChTra_Color[2] = 1
		tmp_C4D_ChTra_Color[3] = 1
	DIM	tmp_C4D_ChTra_AbsorptionColor[3]
		tmp_C4D_ChTra_AbsorptionColor[1] = 1
		tmp_C4D_ChTra_AbsorptionColor[2] = 1
		tmp_C4D_ChTra_AbsorptionColor[3] = 1
	DIM	tmp_C4D_ChRef_Color[3]
		tmp_C4D_ChRef_Color[1] = 1
		tmp_C4D_ChRef_Color[2] = 1
		tmp_C4D_ChRef_Color[3] = 1
	DIM	tmp_C4D_ChEnv_Color[3]
		tmp_C4D_ChEnv_Color[1] = 1
		tmp_C4D_ChEnv_Color[2] = 1
		tmp_C4D_ChEnv_Color[3] = 1
	DIM	tmp_C4D_ChFog_Color[3]
		tmp_C4D_ChFog_Color[1] = 1
		tmp_C4D_ChFog_Color[2] = 1
		tmp_C4D_ChFog_Color[3] = 1
	DIM	tmp_C4D_ChAlp_Color[3]
		tmp_C4D_ChAlp_Color[1] = 1
		tmp_C4D_ChAlp_Color[2] = 1
		tmp_C4D_ChAlp_Color[3] = 1
	DIM	tmp_C4D_ChAlp_Delta[3]
		tmp_C4D_ChAlp_Delta[1] = 0.1
		tmp_C4D_ChAlp_Delta[2] = 0.1
		tmp_C4D_ChAlp_Delta[3] = 0.1
	DIM	tmp_C4D_ChSpe_Color[3]
		tmp_C4D_ChSpe_Color[1] = 1
		tmp_C4D_ChSpe_Color[2] = 1
		tmp_C4D_ChSpe_Color[3] = 1
	DIM	tmp_C4D_ChGlo_Color[3]
		tmp_C4D_ChGlo_Color[1] = 1
		tmp_C4D_ChGlo_Color[2] = 1
		tmp_C4D_ChGlo_Color[3] = 1
	DIM	tmp_C4D_GKRGB_Color_3[3]
		tmp_C4D_GKRGB_Color_3[1] = 0
		tmp_C4D_GKRGB_Color_3[2] = 0
		tmp_C4D_GKRGB_Color_3[3] = 0
	DIM	tmp_C4D_GKRGB_Color_4[3]
		tmp_C4D_GKRGB_Color_4[1] = 1
		tmp_C4D_GKRGB_Color_4[2] = 1
		tmp_C4D_GKRGB_Color_4[3] = 1

	define material	"builtInMatIlluminationShading" 0,
		0.92549, 0.941176, 0.952941,
		1, 1, 0.5, 0.8,
		17.24, 0.04,
		1, 1, 1,
		0, 0, 0, 0,
	ADDITIONAL_DATA		C4D_VER_MAIN= 1,
	C4D_VER_SUB						= 0,
	C4D_ChCol_State					= 1,
	C4D_ChCol_Color					= tmp_C4D_ChCol_Color,
	C4D_ChCol_Brightness			= 1,
	C4D_ChCol_MixMode				= "Normal",
	C4D_ChCol_MixStrength			= 1,
	C4D_ChDif_State					= 0,
	C4D_ChDif_Brightness			= 1,
	C4D_ChDif_Luminance				= 1,
	C4D_ChDif_Specular				= 1,
	C4D_ChDif_Reflection			= 1,
	C4D_ChDif_Texture				= "1",
	C4D_ShNoise_BlendMode_1			= "Normal",
	C4D_ShNoise_BlendStre_1			= 1,
	C4D_ShNoise_BlurOffset_1		= 0,
	C4D_ShNoise_BlurScale_1			= 0,
	C4D_ShNoise_Color1_1			= tmp_C4D_ShNoise_Color1_1,
	C4D_ShNoise_Color2_1			= tmp_C4D_ShNoise_Color2_1,
	C4D_ShNoise_Seed_1				= 665,
	C4D_ShNoise_Noise_1				= "Turbulence",
	C4D_ShNoise_Octaves_1			= 5,
	C4D_ShNoise_Space_1				= "Texture",
	C4D_ShNoise_GlobalScale_1		= 0.01,
	C4D_ShNoise_RelativeScale_1		= tmp_C4D_ShNoise_RelativeScale_1,
	C4D_ShNoise_Absolute_1			= 0,
	C4D_ShNoise_Cycles_1			= 0,
	C4D_ShNoise_LowClip_1			= 0,
	C4D_ShNoise_HighClip_1			= 1,
	C4D_ShNoise_Brightness_1		= 0,
	C4D_ShNoise_Contrast_1			= 0,
	C4D_ChDif_MixMode				= "Normal",
	C4D_ChDif_MixStrength			= 0.1,
	C4D_ChLum_State					= 0,
	C4D_ChLum_Color					= tmp_C4D_ChLum_Color,
	C4D_ChLum_Brightness			= 1,
	C4D_ChLum_MixMode				= "Normal",
	C4D_ChLum_MixStrength			= 1,
	C4D_ChTra_State					= 1,
	C4D_ChTra_Color					= tmp_C4D_ChTra_Color,
	C4D_ChTra_Brightness			= 1,
	C4D_ChTra_Refraction			= 1,
	C4D_ChTra_InternalReflections	= 0,
	C4D_ChTra_ExitReflection		= 0,
	C4D_ChTra_FresnelReflectivity	= 0.5,
	C4D_ChTra_Additive				= 0,
	C4D_ChTra_MixMode				= "Normal",
	C4D_ChTra_MixStrength			= 1,
	C4D_ChTra_AbsorptionColor		= tmp_C4D_ChTra_AbsorptionColor,
	C4D_ChTra_AbsorptionDistance	= 300,
	C4D_ChTra_Blurriness			= 0,
	C4D_ChTra_MinSamples			= 10,
	C4D_ChTra_MaxSamples			= 80,
	C4D_ChTra_Accuracy				= 0.5,
	C4D_ChRef_State					= 0,
	C4D_ChRef_Color					= tmp_C4D_ChRef_Color,
	C4D_ChRef_Brightness			= 0.1,
	C4D_ChRef_Additive				= 1,
	C4D_ChRef_MixMode				= "Normal",
	C4D_ChRef_MixStrength			= 1,
	C4D_ChRef_Blurriness			= 0,
	C4D_ChRef_MinSamples			= 5,
	C4D_ChRef_MaxSamples			= 128,
	C4D_ChRef_Accuracy				= 0.5,
	C4D_ChEnv_State					= 0,
	C4D_ChEnv_Color					= tmp_C4D_ChEnv_Color,
	C4D_ChEnv_Brightness			= 1,
	C4D_ChEnv_MixMode				= "Normal",
	C4D_ChEnv_MixStrength			= 1,
	C4D_ChEnv_TilesX				= 1,
	C4D_ChEnv_TilesY				= 1,
	C4D_ChEnv_Exclusive				= 0,
	C4D_ChFog_State					= 0,
	C4D_ChFog_Color					= tmp_C4D_ChFog_Color,
	C4D_ChFog_Brightness			= 1,
	C4D_ChFog_Distance				= 10,
	C4D_ChBum_State					= 0,
	C4D_ChBum_Strength				= 1,
	C4D_ChBum_MipFalloff			= 1,
	C4D_ChNor_State					= 0,
	C4D_ChNor_Strength				= 1,
	C4D_ChNor_Method				= "Tangent",
	C4D_ChNor_FlipX					= 0,
	C4D_ChNor_FlipY					= 0,
	C4D_ChNor_FlipZ					= 0,
	C4D_ChNor_SwapYZ				= 0,
	C4D_ChAlp_State					= 0,
	C4D_ChAlp_Color					= tmp_C4D_ChAlp_Color,
	C4D_ChAlp_Delta					= tmp_C4D_ChAlp_Delta,
	C4D_ChAlp_Invert				= 0,
	C4D_ChAlp_Soft					= 1,
	C4D_ChAlp_ImageAlpha			= 0,
	C4D_ChAlp_PreMultiplied			= 0,
	C4D_ChSpe_State					= 0,
	C4D_ChSpe_Color					= tmp_C4D_ChSpe_Color,
	C4D_ChSpe_Brightness			= 1,
	C4D_ChSpe_MixMode				= "Normal",
	C4D_ChSpe_MixStrength			= 1,
	C4D_ChSpe_Mode					= "Plastic",
	C4D_ChSpe_Width					= 0.45,
	C4D_ChSpe_Height				= 0.5,
	C4D_ChSpe_Falloff				= -0.05,
	C4D_ChSpe_InnerWidth			= 0,
	C4D_ChGlo_State					= 0,
	C4D_ChGlo_Color					= tmp_C4D_ChGlo_Color,
	C4D_ChGlo_Brightness			= 1,
	C4D_ChGlo_InnerStrength			= 1,
	C4D_ChGlo_OuterStrength			= 5,
	C4D_ChGlo_Radius				= 10,
	C4D_ChGlo_Random				= 0,
	C4D_ChGlo_Frequency				= 1,
	C4D_ChGlo_UseMatColor			= 1,
	C4D_ChDis_State					= 0,
	C4D_ChDis_Strength				= 1,
	C4D_ChDis_Height				= 0.5,
	C4D_ChDis_Type					= "IntensityCentered",
	C4D_ChDis_SubDivision			= 0,
	C4D_ChDis_Level					= 4,
	C4D_ChDis_RoundGeometry			= 0,
	C4D_ChDis_RoundContour			= 1,
	C4D_ChDis_MapRounded			= 1,
	C4D_ChDis_MapResult				= 0,
	C4D_ChDis_KeepEdges				= 0,
	C4D_ChDis_BestDistribution		= 1,
	C4D_ChGra_State					= 0,
	C4D_ChGra_Color					= "2",
	C4D_GradientRGB_Interpol_2		= "SmoothKnot",
	C4D_GradientRGB_Knots_2			= "3,4",
	C4D_GKRGB_Color_3				= tmp_C4D_GKRGB_Color_3,
	C4D_GKRGB_Intensity_3			= 1,
	C4D_GKRGB_Position_3			= 0,
	C4D_GKRGB_Bias_3				= 0.5,
	C4D_GKRGB_Color_4				= tmp_C4D_GKRGB_Color_4,
	C4D_GKRGB_Intensity_4			= 1,
	C4D_GKRGB_Position_4			= 1,
	C4D_GKRGB_Bias_4				= 0.5,
	C4D_ChGra_MixStrength			= 0.5,
	C4D_ChGra_Density				= 1,
	C4D_ChGra_Length				= 0.1,
	C4D_ChGra_Width					= 0.005,
	C4D_ChGra_Crinkle				= 0.1,
	C4D_ChGra_Bend					= 0.6,
	C4D_ChGra_Wetness				= 0.05,
	C4D_ChIll_GenerateGI			= 1,
	C4D_ChIll_GenGIStrength			= 1,
	C4D_ChIll_GenGISaturat			= 1,
	C4D_ChIll_ReceiveGI				= 1,
	C4D_ChIll_RecGIStrength			= 1,
	C4D_ChIll_RecGISaturat			= 1,
	C4D_ChIll_GIPortal				= 0,
	C4D_ChIll_GILight				= 0,
	C4D_ChIll_GenerateCaustics		= 1,
	C4D_ChIll_GenCausticsStrength	= 1,
	C4D_ChIll_ReceiveCaustics		= 1,
	C4D_ChIll_RecCausticsStrength	= 1,
	C4D_ChIll_Radius				= 0.1,
	C4D_ChIll_CausticsSamples		= 100,
	C4D_ChIll_Model					= "Blinn",
	C4D_ChIll_DiffuseFalloff		= 0,
	C4D_ChIll_DiffuseLevel			= 1,
	C4D_ChIll_Roughness				= 0.5

model surface
pen gs_cont_pen
material "builtInMatIlluminationShading"

resol gs_resol

bShowLightSymbolIn3D	= NOT(bShowLightSymbolIn2D)

bShowTargetLine 		= 0
bShowCrossHairSymbol	= 0
bShowArrowSymbol		= 0
bShowSpotLightCone		= 0
bShowNearClip			= 0
bShowFarClip			= 0
bShowFalloffSymbol		= 0
bShowAreaShapes			= 0

if iLightGroupType = LIGHTGROUP_GENERAL_LIGHT then
	bShowCrossHairSymbol	= bShowLightSymbolIn3D and bShow3D
	bShowNearClip			= bEnableClipping and bShowClipping and c4dDetNearClip and bShowLightSymbolIn3D and _bShowIllumination3D and bShow3D
	bShowFarClip			= bEnableClipping and bShowClipping and c4dDetFarClip and bShowLightSymbolIn3D and _bShowIllumination3D and bShow3D
	bShowSpotLightCone		= NOT(c4dGenNoIllumination) and ((bShowLightSymbolIn2D and _bShowIllumination2D) | (bShowLightSymbolIn3D and _bShowIllumination3D and bShow3D))
	if _bDetShowFalloff and NOT(c4dPhoPhotometric) then
		bShowFalloffSymbol	= NOT(c4dGenNoIllumination) and ((bShowLightSymbolIn2D and _bShowIllumination2D) | (bShowLightSymbolIn3D and _bShowIllumination3D and bShow3D))
	endif
	if iC4dGenType = GENTYPE_SPOT then
		bShowTargetLine		= bShowLightSymbolIn3D and bShow3D
		bShowArrowSymbol	= bShowLightSymbolIn3D and bShow3D
	else
		bShowTargetLine		= bShowLightSymbolIn3D and bShow3D and bEnableLightRotation
		bShowArrowSymbol	= bShowLightSymbolIn3D and bShow3D and bEnableLightRotation
	endif
	bShowAreaShapes			= bShowLightSymbolIn2D | (bShowLightSymbolIn3D and bShow3D)
else
	bShowFalloffSymbol		= bShowLightSymbolIn3D and _bShowIllumination3D and bShow3D and NOT(c4dPhoPhotometric)
	bShowSpotLightCone		= bShowFalloffSymbol
	if iLightGroupType = LIGHTGROUP_BUILTIN_VIS_AREA then
		bShowAreaShapes		= bShowLightSymbolIn2D | (bShowLightSymbolIn3D and bShow3D)
	endif
endif


unID = max(lightUnID, 1)

! ======================================================================
! Cinema 4D Light
! ======================================================================

if gs_light_switch then gosub "c4d light engine"


! ======================================================================
! Light Geometry
! ======================================================================

if bShowLightSymbolIn3D and NOT(bShow3D) then end

if iLightGroupType = LIGHTGROUP_GENERAL_LIGHT then
	if iSymbolRotationType = ROTTYPE_ROTATIONANGLE then hotspot 0, 0, 0, unID		: unID = unID + 1
else
	if iLightGroupType <> LIGHTGROUP_BUILTIN_VIS_AREA and iLightGroupType <> LIGHTGROUP_BUILTIN_FALLOFF then
		hotspot 0, 0, 0, unID			: unID = unID + 1
	endif
endif

if iLightGroupType = LIGHTGROUP_BUILTIN_FALLOFF then
	if bShowLightSymbolIn3D and _bShowIllumination3D and bShow3D and NOT(c4dPhoPhotometric) then gosub "draw falloff"
else
	if iC4dGenType = GENTYPE_INFINITE then	gosub "infinite light geometry"
	if iC4dGenType = GENTYPE_AREA then		gosub "area light geometry"
	if iC4dGenType = GENTYPE_OMNI then		gosub "omni light geometry"
	if iC4dGenType = GENTYPE_SPOT then		gosub "spot light geometry"
	if iC4dGenType = GENTYPE_IES then		gosub "ies light geometry"
endif

!================================================================================
end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end
!================================================================================


"c4d light engine":

	! ======================================================================
	! Light Engine
	! ======================================================================

	dim	c4dGenColorBuiltIn[3]
		c4dGenColorBuiltIn[1]	= iLightColorRed / 255
		c4dGenColorBuiltIn[2]	= iLightColorGreen / 255
		c4dGenColorBuiltIn[3]	= iLightColorBlue / 255


	! ======================================================================
	! Non Localized Strings
	! ======================================================================
	dim stC4DGenType[4]
		stC4DGenType[1] = "Omni"
		stC4DGenType[2] = "Spot"
		stC4DGenType[3] = "Area"
		stC4DGenType[4] = "Infinite"

	if iC4dGenType	= GENTYPE_IES then
		if c4dPhoUseIES then
			c4dGenType	= stC4DGenType[3]
		else
			c4dGenType	= stC4DGenType[1]
		endif
	else
		c4dGenType	= stC4DGenType[max(min(iC4dGenType, vardim1(stC4DGenType)), 1)]
	endif

	dim stC4DGenShadowType[4]
		stC4DGenShadowType[1] = "None"
		stC4DGenShadowType[2] = "Soft"
		stC4DGenShadowType[3] = "Hard"
		stC4DGenShadowType[4] = "Area"
	c4dGenShadowType	= stC4DGenShadowType[max(min(iC4dGenShadowType, vardim1(stC4DGenShadowType)), 1)]

	dim stC4DGenVisibility[4]
		stC4DGenVisibility[1] = "None"
		stC4DGenVisibility[2] = "Visible"
		stC4DGenVisibility[3] = "Volumetric"
		stC4DGenVisibility[4] = "Inverse Volumetric"
	c4dGenVisibility	= stC4DGenVisibility[max(min(iC4dGenVisibility, vardim1(stC4DGenVisibility)), 1)]

	dim stC4DDetAreaShape[8]
		stC4DDetAreaShape[1] = "Disc"
		stC4DDetAreaShape[2] = "Rectangle"
		stC4DDetAreaShape[3] = "Sphere"
		stC4DDetAreaShape[4] = "Cylinder"
		stC4DDetAreaShape[5] = "Cube"
		stC4DDetAreaShape[6] = "Hemisphere"
		stC4DDetAreaShape[7] = "Line"
		stC4DDetAreaShape[8] = "PCylinder"
	c4dDetAreaShape	= stC4DDetAreaShape[max(min(iC4dDetAreaShape, vardim1(stC4DDetAreaShape)), 1)]

	dim stC4DPhoUnit[3]
		stC4DPhoUnit[1] = "lm"
		stC4DPhoUnit[2] = "cd"
		stC4DPhoUnit[3] = "lx"
	c4dPhoUnit		= stC4DPhoUnit[max(min(iC4dPhoUnit, vardim1(stC4DPhoUnit)), 1)]

	dim stC4DDetFalloff[5]
		stC4DDetFalloff[1] = "None"
		stC4DDetFalloff[2] = "InverseSquare"
		stC4DDetFalloff[3] = "Linear"
		stC4DDetFalloff[4] = "Step"
		stC4DDetFalloff[5] = "InverseSquareClamped"
	c4dDetFalloff	= stC4DDetFalloff[max(min(iC4dDetFalloff, vardim1(stC4DDetFalloff)), 1)]

	dim stC4DGradientRGBInterpol[8]
		stC4DGradientRGBInterpol[1] = "SmoothKnot"
		stC4DGradientRGBInterpol[2] = "CubicKnot"
		stC4DGradientRGBInterpol[3] = "CubicBias"
		stC4DGradientRGBInterpol[4] = "Linear Knot"
		stC4DGradientRGBInterpol[5] = "Linear"
		stC4DGradientRGBInterpol[6] = "None"
		stC4DGradientRGBInterpol[7] = "ExponentUp"
		stC4DGradientRGBInterpol[8] = "ExponentDown"
!	c4dGradientRGBInterpol	= stC4DGradientRGBInterpol[max(min(iC4dGradientRGBInterpol, vardim1(stC4DGradientRGBInterpol)), 1)]

	dim stC4DCauFalloff[6]
		stC4DCauFalloff[1] = "None"
		stC4DCauFalloff[2] = "Linear"
		stC4DCauFalloff[3] = "Inverse"
		stC4DCauFalloff[4] = "InverseSquare"
		stC4DCauFalloff[5] = "InverseCubic"
		stC4DCauFalloff[6] = "Step"
	c4dCauFalloff	= stC4DCauFalloff[max(min(iC4dCauFalloff, vardim1(stC4DCauFalloff)), 1)]

	dim stC4DNoiKind[4]
		stC4DNoiKind[1] = "None"
		stC4DNoiKind[2] = "Illumination"
		stC4DNoiKind[3] = "VisibleLight"
		stC4DNoiKind[4] = "Both"
	c4dNoiKind	= stC4DNoiKind[max(min(iC4dNoiKind, vardim1(stC4DNoiKind)), 1)]

	dim stC4DNoiType[4]
		stC4DNoiType[1] = "Noise"
		stC4DNoiType[2] = "SoftTurbulence"
		stC4DNoiType[3] = "HardTurbulence"
		stC4DNoiType[4] = "WavyTurbulence"
	c4dNoiType	= stC4DNoiType[max(min(iC4dNoiType, vardim1(stC4DNoiType)), 1)]

	dim stC4DLenGlow[23]
		stC4DLenGlow[ 1] = "Inactive"
		stC4DLenGlow[ 2] = "Default"
		stC4DLenGlow[ 3] = "CINEMAR4"
		stC4DLenGlow[ 4] = "WideAngle"
		stC4DLenGlow[ 5] = "ZOOM"
		stC4DLenGlow[ 6] = "HI8"
		stC4DLenGlow[ 7] = "Camcorder"
		stC4DLenGlow[ 8] = "SearchLight"
		stC4DLenGlow[ 9] = "Artifact"
		stC4DLenGlow[10] = "Star1"
		stC4DLenGlow[11] = "Star2"
		stC4DLenGlow[12] = "Star3"
		stC4DLenGlow[13] = "Purple"
		stC4DLenGlow[14] = "FlashLight"
		stC4DLenGlow[15] = "Sun1"
		stC4DLenGlow[16] = "Sun2"
		stC4DLenGlow[17] = "Grey"
		stC4DLenGlow[18] = "Blue1"
		stC4DLenGlow[19] = "Blue2"
		stC4DLenGlow[20] = "Red"
		stC4DLenGlow[21] = "YellowGreen1"
		stC4DLenGlow[22] = "YellowGreen2"
		stC4DLenGlow[23] = "Candle"
	c4dLenGlow	= stC4DLenGlow[max(min(iC4dLenGlow, vardim1(stC4DLenGlow)), 1)]

	dim stC4DLenReflexes[16]
		stC4DLenReflexes[ 1] = "Inactive"
		stC4DLenReflexes[ 2] = "Default"
		stC4DLenReflexes[ 3] = "CINEMAR4"
		stC4DLenReflexes[ 4] = "WideAngle"
		stC4DLenReflexes[ 5] = "ZOOM"
		stC4DLenReflexes[ 6] = "HI8"
		stC4DLenReflexes[ 7] = "Camcorder"
		stC4DLenReflexes[ 8] = "SearchLight"
		stC4DLenReflexes[ 9] = "Artifact"
		stC4DLenReflexes[10] = "Star1"
		stC4DLenReflexes[11] = "Star2"
		stC4DLenReflexes[12] = "Star3"
		stC4DLenReflexes[13] = "Purple"
		stC4DLenReflexes[14] = "FlashLight"
		stC4DLenReflexes[15] = "Sun1"
		stC4DLenReflexes[16] = "Sun2"
	c4dLenReflexes	= stC4DLenReflexes[max(min(iC4dLenReflexes, vardim1(stC4DLenReflexes)), 1)]

	iGeneralIntensity	= gs_light_intensity
	iBuiltInIntensity	= min(100, gs_light_intensity)

	internalLightConeRadius			= 0
	internalLightConeAngle1			= 0
	internalLightConeAngle2			= 0
	internalLightConeAngleFalloff	= 0
	internalLightStart				= 0
	internalLightStop				= 0
	internalLightFalloffDistance	= 0

	if iLightGroupType = LIGHTGROUP_GENERAL_LIGHT then
		if iC4dGenType <> GENTYPE_SPOT and iC4dGenType <> GENTYPE_OMNI then iBuiltInIntensity	= 0

		if iC4dGenType = GENTYPE_SPOT then
			internalLightConeRadius			= tempLightConeRadius
			internalLightConeAngle1			= MIN(c4dDetInnerAngle / 2, 80)
			internalLightConeAngle2			= MIN(c4dDetOuterAngle / 2, 80)
			internalLightConeAngleFalloff	= 1
			internalLightStart				= 0
			internalLightStop				= _c4dDetRadius
			internalLightFalloffDistance	= 1
		else
			internalLightConeRadius			= 0
			internalLightConeAngle1			= 0
			internalLightConeAngle2			= 0
			internalLightConeAngleFalloff	= 0
			internalLightStart				= 0
			internalLightStop				= _c4dDetRadius
			internalLightFalloffDistance	= (min(100, gs_light_intensity) / 100 - 1)**2 * 1.2
		endif
	else
		if iLightGroupType = LIGHTGROUP_BUILTIN_NONVIS_AREA then
			internalLightConeRadius			= 0
			internalLightConeAngle1			= 0
			internalLightConeAngle2			= MIN(c4dDetFalloffAngle, 80)
			internalLightConeAngleFalloff	= 0
			internalLightStart				= 0
			internalLightStop				= c4dDetRadius
			internalLightFalloffDistance	= 0
		else
			if iLightGroupType = LIGHTGROUP_BUILTIN_SPOT then
				internalLightConeRadius			= tempLightConeRadius
				internalLightConeAngle1			= MIN(c4dDetInnerAngle / 2, 80)
				internalLightConeAngle2			= MIN(c4dDetOuterAngle / 2, 80)
				internalLightConeAngleFalloff	= 0
				internalLightStart				= 0
				internalLightStop				= _c4dDetRadius
				internalLightFalloffDistance	= 1
			else
				internalLightConeRadius			= 0
				internalLightConeAngle1			= 0
				internalLightConeAngle2			= 0
				internalLightConeAngleFalloff	= 0
				internalLightStart				= c4dDetNearTo
				internalLightStop				= c4dDetFarFrom
				internalLightFalloffDistance	= 0
			endif
		endif
	endif

	intensityModifier	= 1
	if bWindowLight then
		delta				= angleSunAzimuth - SYMB_ROTANGLE
		if delta < 0 then delta = delta + 360
		intensityModifier	= (cos(delta + 90) / 2 + 0.5) * 0.9 + 0.3
	endif
	if bSunObject then intensityModifier	= 1.5

	bShowRotationHotspot	= 0
	gosub "symbol rotation start"

	if bWindowLight then add c4dDetAreaX / 2, c4dDetAreaY / 2, 0
	rotz 90
	roty 90

	if iLightGroupType = LIGHTGROUP_GENERAL_LIGHT then
		if iC4dGenType = GENTYPE_IES then
			if bIESFileExist then		!!! *.IES file loaded
				light	iBuiltInIntensity / 100 * (iLightColorRed / 255), iBuiltInIntensity / 100 * (iLightColorGreen / 255), iBuiltInIntensity / 100 * (iLightColorBlue / 255),	!!! RGB
						!!! parameters for internal rendering engine
						bGenShadow,						!!! Shadow on/off
						internalLightConeRadius,		!!! Light Cone Radius
						internalLightConeAngle1,		!!! Angle 1   /maximum light/
						internalLightConeAngle2,		!!! Angle 2   /angle faloff light/
						internalLightConeAngleFalloff,	!!! Angle Faloff
						internalLightStart,				!!! Light Start
						internalLightStop,				!!! Light Stop
						internalLightFalloffDistance,	!!! Distance Falloff
						!!! parameters for Cinema4D rendering engine
											!!! LightGeneral
						ADDITIONAL_DATA			c4d_gen_Type				= c4dGenType,
												c4d_gen_Color				= c4dGenColorBuiltIn,
												c4d_gen_Intensity			= iGeneralIntensity / 100 * intensityModifier,
												c4d_gen_ShadowType			= c4dGenShadowType,
												c4d_gen_Visibility			= c4dGenVisibility,
												c4d_gen_NoiIlumination		= c4dGenNoIllumination,
												c4d_gen_AmbientOnly			= c4dGenAmbientOnly,
												c4d_gen_Diffuse				= NOT(c4dGenDiffuse),
												c4d_gen_Specular			= NOT(c4dGenSpecular),
												c4d_gen_GIIllumination		= c4dGenGIIllumination,
!!!	unset params-> read from file				c4d_det_AreaX				= _c4dDetAreaX,
!!!												c4d_det_AreaY				= _c4dDetAreaY,
!!!												c4d_det_AreaZ				= _c4dDetAreaZ,

												c4d_det_NearClip			= 0,
												c4d_det_FarClip				= 0,

												c4d_det_ShowinRender		= c4dDetShowinRender,
												c4d_det_ShowinReflection	= c4dDetShowinReflection,
												c4d_det_Samples				= c4dDetSamples,
												c4d_det_AddGrain			= _c4dDetAddGrain,

												c4d_pho_UseIES				= 1,
												c4d_pho_File				= c4dPhoIESFile,
												c4d_pho_UseIESSize			= c4dPhoUseIESSize,
												c4d_pho_Photometric			= c4dPhoPhotometric,
!!!												c4d_pho_Intensity			= c4dPhoIntensity * NOT(c4dPhoPhotometric),
												c4d_det_Falloff				= c4dDetFalloff,
												c4d_det_Radius				= _c4dDetRadius,

											!!! LightCaustics
												c4d_cau_Surface				= c4dCauSurface,
												c4d_cau_SurfaceEnergy		= c4dCauSurfaceEnergy / 100,
												c4d_cau_SurfacePhotons		= c4dCauSurfacePhotons,
												c4d_cau_Volume				= c4dCauVolume,
												c4d_cau_VolumeEnergy		= c4dCauVolumeEnergy / 100,
												c4d_cau_VolumePhotons		= c4dCauVolumePhotons,
												c4d_cau_Falloff				= c4dCauFalloff,
												c4d_cau_InnerDistance		= 0,
												c4d_cau_OuterDistance		= _c4dCauOuterDistance,

											!!! LightNoise
												c4d_noi_Kind				= c4dNoiKind,
												c4d_noi_Type				= c4dNoiType,
												c4d_noi_Octaves				= c4dNoiOctaves,
												c4d_noi_Brightness			= c4dNoiBrightness / 100,
												c4d_noi_Contrast			= c4dNoiContrast / 100,
												c4d_noi_VisibilityScale		= c4dNoiVisibilityScale,
												c4d_noi_IlluminationScale	= c4dNoiIlluminationScale,

											!!! LightShadow
												c4d_sha_Density				= c4dShaDensity / 100,
												c4d_sha_Transparency		= NOT(c4dShaTransparency),
												c4d_sha_ClippingInfluence	= c4dShaClippingInfluence,
												c4d_sha_ShadowMapSize		= c4dShaShadowMapSize,
												c4d_sha_ShadowMapX			= c4dShaShadowMapX,
												c4d_sha_ShadowMapY			= c4dShaShadowMapY,
												c4d_sha_SampleRadius		= c4dShaSampleRadius,
												c4d_sha_AbsoluteBias		= c4dShaAbsoluteBias,
												c4d_sha_RelBias				= c4dShaRelBias / 100,
												c4d_sha_AbsBias				= c4dShaAbsBias,
												c4d_sha_ParalellWidth		= c4dShaParalellWidth,
												c4d_sha_OutlineShadow		= c4dShaOutlineShadow,
												c4d_sha_ShadowCone			= c4dShaShadowCone,
												c4d_sha_Angle				= c4dShaAngle,
												c4d_sha_SoftCone			= c4dShaSoftCone,
												c4d_sha_Accuracy			= c4dShaAccuracy / 100,
												c4d_sha_MinsSmples			= c4dShaMinSamples,
												c4d_sha_MaxsSmples			= c4dShaMaxSamples,

											!!! LightLens
												c4d_len_Glow				= c4dLenGlow,
												c4d_len_GlowBrightness		= c4dLenGlowBrightness / 100,
												c4d_len_GlowAspectRatio		= c4dLenGlowAspectRatio,
												c4d_len_Reflexes			= c4dLenReflexes,
												c4d_len_ReflexBrightness	= c4dLenReflexBrightness / 100,
												c4d_len_ReflexAspectRatio	= c4dLenReflexAspectRatio,
												c4d_len_Scale				= c4dLenScale / 100,
												c4d_len_Rotation			= c4dLenRotation,
												c4d_len_GlowDistantScale	= c4dLenGlowDistantScale,
												c4d_len_ReflexDistantScale	= c4dLenReflexDistantScale
			else		!!! there is no *.IES file loaded
				light	iBuiltInIntensity / 100 * (iLightColorRed / 255), iBuiltInIntensity / 100 * (iLightColorGreen / 255), iBuiltInIntensity / 100 * (iLightColorBlue / 255),	!!! RGB
						!!! parameters for internal rendering engine
						bGenShadow,						!!! Shadow on/off
						internalLightConeRadius,		!!! Light Cone Radius
						internalLightConeAngle1,		!!! Angle 1   /maximum light/
						internalLightConeAngle2,		!!! Angle 2   /angle faloff light/
						internalLightConeAngleFalloff,	!!! Angle Faloff
						internalLightStart,				!!! Light Start
						internalLightStop,				!!! Light Stop
						internalLightFalloffDistance,	!!! Distance Falloff
						!!! parameters for Cinema4D rendering engine
											!!! LightGeneral
						ADDITIONAL_DATA			c4d_gen_Type				= c4dGenType,
												c4d_gen_Color				= c4dGenColorBuiltIn,
												c4d_gen_Intensity			= iGeneralIntensity / 100 * intensityModifier,
												c4d_gen_ShadowType			= c4dGenShadowType,
												c4d_gen_Visibility			= c4dGenVisibility,
												c4d_gen_NoiIlumination		= c4dGenNoIllumination,
												c4d_gen_AmbientOnly			= c4dGenAmbientOnly,
												c4d_gen_Diffuse				= NOT(c4dGenDiffuse),
												c4d_gen_Specular			= NOT(c4dGenSpecular),
												c4d_gen_GIIllumination		= c4dGenGIIllumination,
												c4d_det_AreaX				= _c4dDetAreaX,
												c4d_det_AreaY				= _c4dDetAreaY,
												c4d_det_AreaZ				= _c4dDetAreaZ,

												c4d_det_NearClip			= 0,
												c4d_det_FarClip				= 0,

												c4d_det_ShowinRender		= 0,
												c4d_det_ShowinReflection	= 0,
												c4d_det_Samples				= c4dDetSamples,
												c4d_det_AddGrain			= _c4dDetAddGrain,

												c4d_pho_UseIES				= 0,
!!!												c4d_pho_UseIESSize			= c4dPhoUseIESSize,
												c4d_pho_Photometric			= 0,
												c4d_det_Falloff				= c4dDetFalloff,
												c4d_det_Radius				= _c4dDetRadius,

											!!! LightCaustics
												c4d_cau_Surface				= c4dCauSurface,
												c4d_cau_SurfaceEnergy		= c4dCauSurfaceEnergy / 100,
												c4d_cau_SurfacePhotons		= c4dCauSurfacePhotons,
												c4d_cau_Volume				= c4dCauVolume,
												c4d_cau_VolumeEnergy		= c4dCauVolumeEnergy / 100,
												c4d_cau_VolumePhotons		= c4dCauVolumePhotons,
												c4d_cau_Falloff				= c4dCauFalloff,
												c4d_cau_InnerDistance		= 0,
												c4d_cau_OuterDistance		= _c4dCauOuterDistance,

											!!! LightNoise
												c4d_noi_Kind				= c4dNoiKind,
												c4d_noi_Type				= c4dNoiType,
												c4d_noi_Octaves				= c4dNoiOctaves,
												c4d_noi_Brightness			= c4dNoiBrightness / 100,
												c4d_noi_Contrast			= c4dNoiContrast / 100,
												c4d_noi_VisibilityScale		= c4dNoiVisibilityScale,
												c4d_noi_IlluminationScale	= c4dNoiIlluminationScale,

											!!! LightShadow
												c4d_sha_Density				= c4dShaDensity / 100,
												c4d_sha_Transparency		= NOT(c4dShaTransparency),
												c4d_sha_ClippingInfluence	= c4dShaClippingInfluence,
												c4d_sha_ShadowMapSize		= c4dShaShadowMapSize,
												c4d_sha_ShadowMapX			= c4dShaShadowMapX,
												c4d_sha_ShadowMapY			= c4dShaShadowMapY,
												c4d_sha_SampleRadius		= c4dShaSampleRadius,
												c4d_sha_AbsoluteBias		= c4dShaAbsoluteBias,
												c4d_sha_RelBias				= c4dShaRelBias / 100,
												c4d_sha_AbsBias				= c4dShaAbsBias,
												c4d_sha_ParalellWidth		= c4dShaParalellWidth,
												c4d_sha_OutlineShadow		= c4dShaOutlineShadow,
												c4d_sha_ShadowCone			= c4dShaShadowCone,
												c4d_sha_Angle				= c4dShaAngle,
												c4d_sha_SoftCone			= c4dShaSoftCone,
												c4d_sha_Accuracy			= c4dShaAccuracy / 100,
												c4d_sha_MinsSmples			= c4dShaMinSamples,
												c4d_sha_MaxsSmples			= c4dShaMaxSamples,

											!!! LightLens
												c4d_len_Glow				= c4dLenGlow,
												c4d_len_GlowBrightness		= c4dLenGlowBrightness / 100,
												c4d_len_GlowAspectRatio		= c4dLenGlowAspectRatio,
												c4d_len_Reflexes			= c4dLenReflexes,
												c4d_len_ReflexBrightness	= c4dLenReflexBrightness / 100,
												c4d_len_ReflexAspectRatio	= c4dLenReflexAspectRatio,
												c4d_len_Scale				= c4dLenScale / 100,
												c4d_len_Rotation			= c4dLenRotation,
												c4d_len_GlowDistantScale	= c4dLenGlowDistantScale,
												c4d_len_ReflexDistantScale	= c4dLenReflexDistantScale
			endif
		else
			light	iBuiltInIntensity / 100 * (iLightColorRed / 255), iBuiltInIntensity / 100 * (iLightColorGreen / 255), iBuiltInIntensity / 100 * (iLightColorBlue / 255),	!!! RGB
					!!! parameters for internal rendering engine
					bGenShadow,						!!! Shadow on/off
					internalLightConeRadius,		!!! Light Cone Radius
					internalLightConeAngle1,		!!! Angle 1   /maximum light/
					internalLightConeAngle2,		!!! Angle 2   /angle faloff light/
					internalLightConeAngleFalloff,	!!! Angle Faloff
					internalLightStart,				!!! Light Start
					internalLightStop,				!!! Light Stop
					internalLightFalloffDistance,	!!! Distance Falloff
					!!! parameters for Cinema4D rendering engine
										!!! LightGeneral
					ADDITIONAL_DATA			c4d_gen_Type				= c4dGenType,
											c4d_gen_Color				= c4dGenColorBuiltIn,
											c4d_gen_Intensity			= iGeneralIntensity / 100 * intensityModifier,
											c4d_gen_ShadowType			= c4dGenShadowType,
											c4d_gen_Visibility			= c4dGenVisibility,
											c4d_gen_NoiIlumination		= c4dGenNoIllumination,
											c4d_gen_AmbientOnly			= c4dGenAmbientOnly,
											c4d_gen_Diffuse				= NOT(c4dGenDiffuse),
											c4d_gen_Specular			= NOT(c4dGenSpecular),
											c4d_gen_GIIllumination		= c4dGenGIIllumination,

										!!! LightDetail
											c4d_det_UseInner			= c4dDetUseInner,
											c4d_det_InnerAngle			= c4dDetInnerAngle,
											c4d_det_OuterAngle			= c4dDetOuterAngle,
											c4d_det_AspectRatio			= _c4dDetAspectRatio,
											c4d_det_Contrast			= c4dDetContrast / 100,
											c4d_det_ShadowCaster		= c4dDetShadowCaster,
											c4d_det_AreaShape			= c4dDetAreaShape,
											c4d_det_AreaX				= _c4dDetAreaX,
											c4d_det_AreaY				= _c4dDetAreaY,
											c4d_det_AreaZ				= _c4dDetAreaZ,
											c4d_det_Samples				= c4dDetSamples,
											c4d_det_OnlyZ				= c4dDetOnlyZ,
											c4d_det_ShowinRender		= c4dDetShowinRender,
											c4d_det_ShowinReflection	= c4dDetShowinReflection,
											c4d_det_Falloff				= c4dDetFalloff,
											c4d_det_InfinitAngle		= c4dDetInfinitAngle,
											c4d_det_AddGrain			= _c4dDetAddGrain,
											c4d_det_IdenticalNoise		= c4dDetIdenticalNoise,
											c4d_det_FalloffAngle		= c4dDetFalloffAngle,
											c4d_det_InnerRadius			= c4dDetInnerRadius,
											c4d_det_Radius				= _c4dDetRadius,

											c4d_det_NearClip			= c4dDetNearClip * bEnableClipping,
											c4d_det_FarClip				= c4dDetFarClip * bEnableClipping,
											c4d_det_NearFrom			= c4dDetNearFrom,
											c4d_det_NearTo				= c4dDetNearTo,
											c4d_det_FarFrom				= c4dDetFarFrom,
											c4d_det_FarTo				= c4dDetFarTo,

										!!! LightVisibility
											c4d_vis_UseFalloff			= c4dVisUseFalloff,
											c4d_vis_Falloff				= c4dVisFalloff / 100,
											c4d_vis_UseEdgeFalloff		= c4dVisUseEdgeFalloff,
											c4d_vis_EdgeFalloff			= c4dVisEdgeFalloff / 100,
											c4d_vis_ColoredEdge			= c4dVisColoredEdge,
											c4d_vis_InnerDistance		= c4dVisInnerDistance,
											c4d_vis_OuterDistance		= c4dVisOuterDistance,
											c4d_vis_RelativeScale		= c4dVisRelativeScale,
											c4d_vis_SampleDistance		= c4dVisSampleDistance,
											c4d_vis_Brightness			= c4dVisBrightness / 100,
											c4d_vis_Dust				= c4dVisDust / 100,
											c4d_vis_Dithering			= c4dVisDithering / 100,
											c4d_vis_Additive			= c4dVisAdditive,
											c4d_vis_AdaptBrightness		= c4dVisAdaptBrightness,

										!!! LightPhotometric
!!!											c4d_pho_UseIES				= c4dPhoUseIES,
!!!											c4d_pho_File				= c4dPhoIESFile,
!!!											c4d_pho_UseIESSize			= c4dPhoUseIESSize,
											c4d_pho_Photometric			= c4dPhoPhotometric,
											c4d_pho_Intensity			= c4dPhoIntensity,
											c4d_pho_Unit				= c4dPhoUnit,

										!!! LightCaustics
											c4d_cau_Surface				= c4dCauSurface,
											c4d_cau_SurfaceEnergy		= c4dCauSurfaceEnergy / 100,
											c4d_cau_SurfacePhotons		= c4dCauSurfacePhotons,
											c4d_cau_Volume				= c4dCauVolume,
											c4d_cau_VolumeEnergy		= c4dCauVolumeEnergy / 100,
											c4d_cau_VolumePhotons		= c4dCauVolumePhotons,
											c4d_cau_Falloff				= c4dCauFalloff,
											c4d_cau_InnerDistance		= 0,
											c4d_cau_OuterDistance		= _c4dCauOuterDistance,

										!!! LightNoise
											c4d_noi_Kind				= c4dNoiKind,
											c4d_noi_Type				= c4dNoiType,
											c4d_noi_Octaves				= c4dNoiOctaves,
											c4d_noi_Brightness			= c4dNoiBrightness / 100,
											c4d_noi_Contrast			= c4dNoiContrast / 100,
											c4d_noi_VisibilityScale		= c4dNoiVisibilityScale,
											c4d_noi_IlluminationScale	= c4dNoiIlluminationScale,

										!!! LightShadow
											c4d_sha_Density				= c4dShaDensity / 100,
											c4d_sha_Transparency		= NOT(c4dShaTransparency),
											c4d_sha_ClippingInfluence	= c4dShaClippingInfluence,
											c4d_sha_ShadowMapSize		= c4dShaShadowMapSize,
											c4d_sha_ShadowMapX			= c4dShaShadowMapX,
											c4d_sha_ShadowMapY			= c4dShaShadowMapY,
											c4d_sha_SampleRadius		= c4dShaSampleRadius,
											c4d_sha_AbsoluteBias		= c4dShaAbsoluteBias,
											c4d_sha_RelBias				= c4dShaRelBias / 100,
											c4d_sha_AbsBias				= c4dShaAbsBias,
											c4d_sha_ParalellWidth		= c4dShaParalellWidth,
											c4d_sha_OutlineShadow		= c4dShaOutlineShadow,
											c4d_sha_ShadowCone			= c4dShaShadowCone,
											c4d_sha_Angle				= c4dShaAngle,
											c4d_sha_SoftCone			= c4dShaSoftCone,
											c4d_sha_Accuracy			= c4dShaAccuracy / 100,
											c4d_sha_MinsSmples			= c4dShaMinSamples,
											c4d_sha_MaxsSmples			= c4dShaMaxSamples,

										!!! LightLens
											c4d_len_Glow				= c4dLenGlow,
											c4d_len_GlowBrightness		= c4dLenGlowBrightness / 100,
											c4d_len_GlowAspectRatio		= c4dLenGlowAspectRatio,
											c4d_len_Reflexes			= c4dLenReflexes,
											c4d_len_ReflexBrightness	= c4dLenReflexBrightness / 100,
											c4d_len_ReflexAspectRatio	= c4dLenReflexAspectRatio,
											c4d_len_Scale				= c4dLenScale / 100,
											c4d_len_Rotation			= c4dLenRotation,
											c4d_len_GlowDistantScale	= c4dLenGlowDistantScale,
											c4d_len_ReflexDistantScale	= c4dLenReflexDistantScale
		endif
	endif

	if iLightGroupType = LIGHTGROUP_BUILTIN_OMNI then
		light	iBuiltInIntensity / 100 * (iLightColorRed / 255), iBuiltInIntensity / 100 * (iLightColorGreen / 255), iBuiltInIntensity / 100 * (iLightColorBlue / 255),	!!! RGB
				!!! parameters for internal rendering engine
				bGenShadow,						!!! Shadow on/off
				0,								!!! Light Cone Radius
				0,								!!! Angle 1   /maximum light/
				0,								!!! Angle 2   /angle faloff light/
				0,								!!! Angle Faloff
				internalLightStart,				!!! Light Start
				internalLightStop,				!!! Light Stop
				internalLightFalloffDistance,	!!! Distance Falloff

				!!! parameters for Cinema4D rendering engine
									!!! LightGeneral
				ADDITIONAL_DATA			c4d_gen_Type				= c4dGenType,
										c4d_gen_Color				= c4dGenColorBuiltIn,
										c4d_gen_Intensity			= iGeneralIntensity / 100,
										c4d_gen_ShadowType			= c4dGenShadowType,					!!! set "Area" by bGenShadow
!!!										c4d_gen_Visibility			= c4dGenVisibility,					!!!	engine default ("None")
!!!										c4d_gen_NoiIlumination		= c4dGenNoIllumination,				!!!	engine default (0)
!!!										c4d_gen_AmbientOnly			= c4dGenAmbientOnly,				!!!	engine default (0)
!!!										c4d_gen_Diffuse				= NOT(c4dGenDiffuse),				!!!	engine default (1)
!!!										c4d_gen_Specular			= NOT(c4dGenSpecular),				!!!	engine default (1)
!!!										c4d_gen_GIIllumination		= c4dGenGIIllumination,				!!!	engine default (1)

									!!! LightDetail
!!!										c4d_det_UseInner			= c4dDetUseInner,
!!!										c4d_det_InnerAngle			= c4dDetInnerAngle,
!!!										c4d_det_OuterAngle			= c4dDetOuterAngle,
!!!										c4d_det_AspectRatio			= c4dDetAspectRatio,				!!!	engine default (1.0)
!!!										c4d_det_Contrast			= c4dDetContrast / 100,				!!!	engine default (0)
!!!										c4d_det_ShadowCaster		= c4dDetShadowCaster,				!!!	engine default (0)

										c4d_det_AreaShape			= c4dDetAreaShape,					!!! set by user
										c4d_det_AreaX				= _c4dDetAreaX,						!!! set by user (default 30mm)
										c4d_det_AreaY				= _c4dDetAreaY,						!!! set by user (default 30mm)
										c4d_det_AreaZ				= _c4dDetAreaZ,						!!! set by user (default 30mm)
!!!										c4d_det_Samples				= c4dDetSamples,					!!! engine default (100)
!!!										c4d_det_OnlyZ				= c4dDetOnlyZ,						!!!	engine default (0)
!!!										c4d_det_ShowinRender		= c4dDetShowinRender,				!!!	engine default (0)
!!!										c4d_det_ShowinReflection	= c4dDetShowinReflection,			!!!	engine default (0)
										c4d_det_Falloff				= c4dDetFalloff,					!!! set "Inverse Square" by bDetShowFalloff (engine default)
!!!										c4d_det_InfinitAngle		= c4dDetInfinitAngle,
!!!										c4d_det_AddGrain			= c4dDetAddGrain,					!!!	engine default (0)
!!!										c4d_det_IdenticalNoise		= c4dDetIdenticalNoise,				!!!	engine default (0)
!!!										c4d_det_FalloffAngle		= c4dDetFalloffAngle,				!!!	engine default (180)
!!!										c4d_det_InnerRadius			= c4dDetInnerRadius,
										c4d_det_Radius				= c4dDetRadius,

!!!										c4d_det_UseGradient			= c4dDetUseGradient,				!!!	engine default (0)
!!!										c4d_det_Color				= "1",
!!!										c4d_GradientRGB_Interpol_1	= c4dDetGradientRGBInterpol,
!!!										c4d_GradientRGB_Knots_1		= "2,3",
!!!										c4d_GKRGB_Color_2			= c4dDetGKRGBColor1,
!!!										c4d_GKRGB_Intensity_2		= c4dDetGKRGBIntensity1,
!!!										c4d_GKRGB_Position_2		= c4dDetGKRGBPosition1,
!!!										c4d_GKRGB_Bias_2			= c4dDetGKRGBBias1,
!!!										c4d_GKRGB_Color_3			= c4dDetGKRGBColor2,
!!!										c4d_GKRGB_Intensity_3		= c4dDetGKRGBIntensity2,
!!!										c4d_GKRGB_Position_3		= c4dDetGKRGBPosition2,
!!!										c4d_GKRGB_Bias_3			= c4dDetGKRGBBias2,

										c4d_det_NearClip			= 0,
										c4d_det_FarClip				= 0,
!!!										c4d_det_NearFrom			= c4dDetNearFrom,
!!!										c4d_det_NearTo				= c4dDetNearTo,
!!!										c4d_det_FarFrom				= c4dDetFarFrom,
!!!										c4d_det_FarTo				= c4dDetFarTo,

									!!! LightVisibility
!!!										c4d_vis_UseFalloff			= c4dVisUseFalloff,
!!!										c4d_vis_Falloff				= c4dVisFalloff / 100,
!!!										c4d_vis_UseEdgeFalloff		= c4dVisUseEdgeFalloff,
!!!										c4d_vis_EdgeFalloff			= c4dVisEdgeFalloff / 100,
!!!										c4d_vis_ColoredEdge			= c4dVisColoredEdge,
!!!										c4d_vis_InnerDistance		= c4dVisInnerDistance,
!!!										c4d_vis_OuterDistance		= c4dVisOuterDistance,
!!!										c4d_vis_RelativeScale		= c4dVisRelativeScale,
!!!										c4d_vis_SampleDistance		= c4dVisSampleDistance,
!!!										c4d_vis_Brightness			= c4dVisBrightness / 100,
!!!										c4d_vis_Dust				= c4dVisDust / 100,
!!!										c4d_vis_Dithering			= c4dVisDithering / 100,
!!!										c4d_vis_Additive			= c4dVisAdditive,					!!!	engine default (0)
!!!										c4d_vis_AdaptBrightness		= c4dVisAdaptBrightness,			!!!	engine default (1)

!!!										c4d_vis_UseGradient			= c4dVisUseGradient,				!!!	engine default (0)
!!!										c4d_vis_Color				= "4",
!!!										c4d_GradientRGB_Interpol_4	= c4dVisGradientRGBInterpol,
!!!										c4d_GradientRGB_Knots_4		= "5,6",
!!!										c4d_GKRGB_Color_5			= c4dVisGKRGBColor1,
!!!										c4d_GKRGB_Intensity_5		= c4dVisGKRGBIntensity1,
!!!										c4d_GKRGB_Position_5		= c4dVisGKRGBPosition1,
!!!										c4d_GKRGB_Bias_5			= c4dVisGKRGBBias1,
!!!										c4d_GKRGB_Color_6			= c4dVisGKRGBColor2,
!!!										c4d_GKRGB_Intensity_6		= c4dVisGKRGBIntensity2,
!!!										c4d_GKRGB_Position_6		= c4dVisGKRGBPosition2,
!!!										c4d_GKRGB_Bias_6			= c4dVisGKRGBBias2,

									!!! LightPhotometric
!!!										c4d_pho_UseIES				= c4dPhoUseIES,						!!!	engine default (0)
!!!										c4d_pho_File				= c4dPhoIESFile,
!!!										c4d_pho_UseIESSize			= c4dPhoUseIESSize,
										c4d_pho_Photometric			= c4dPhoPhotometric,				!!! set by user
										c4d_pho_Intensity			= c4dPhoIntensity,					!!! set by user
										c4d_pho_Unit				= c4dPhoUnit,						!!! set by user

									!!! LightCaustics
!!!										c4d_cau_Surface				= c4dCauSurface,					!!!	engine default (0)
!!!										c4d_cau_SurfaceEnergy		= c4dCauSurfaceEnergy / 100,
!!!										c4d_cau_SurfacePhotons		= c4dCauSurfacePhotons,
!!!										c4d_cau_Volume				= c4dCauVolume,						!!!	engine default (0)
!!!										c4d_cau_VolumeEnergy		= c4dCauVolumeEnergy / 100,
!!!										c4d_cau_VolumePhotons		= c4dCauVolumePhotons,
!!!										c4d_cau_Falloff				= c4dCauFalloff,
!!!										c4d_cau_InnerDistance		= c4dDetInnerRadius,
!!!										c4d_cau_OuterDistance		= c4dDetRadius,

									!!! LightNoise
!!!										c4d_noi_Kind				= c4dNoiKind,						!!!	engine default ("None")
!!!										c4d_noi_Type				= c4dNoiType,
!!!										c4d_noi_Octaves				= c4dNoiOctaves,
!!!										c4d_noi_Brightness			= c4dNoiBrightness / 100,
!!!										c4d_noi_Contrast			= c4dNoiContrast / 100,
!!!										c4d_noi_VisibilityScale		= c4dNoiVisibilityScale,
!!!										c4d_noi_IlluminationScale	= c4dNoiIlluminationScale,

									!!! LightShadow
!!!										c4d_sha_Density				= c4dShaDensity / 100,				!!!	engine default (1.0)
!!!										c4d_sha_Color				= c4dShaColor,
!!!										c4d_sha_Color				= c4dGenColorBuiltIn,
!!!										c4d_sha_Transparency		= NOT(c4dShaTransparency),			!!!	engine default (1)
!!!										c4d_sha_ClippingInfluence	= c4dShaClippingInfluence,			!!!	engine default (0)
!!!										c4d_sha_ShadowMapSize		= c4dShaShadowMapSize,
!!!										c4d_sha_ShadowMapX			= c4dShaShadowMapX,
!!!										c4d_sha_ShadowMapY			= c4dShaShadowMapY,
!!!										c4d_sha_SampleRadius		= c4dShaSampleRadius,
!!!										c4d_sha_AbsoluteBias		= c4dShaAbsoluteBias,
!!!										c4d_sha_RelBias				= c4dShaRelBias / 100,
!!!										c4d_sha_AbsBias				= c4dShaAbsBias,
!!!										c4d_sha_ParalellWidth		= c4dShaParalellWidth,
!!!										c4d_sha_OutlineShadow		= c4dShaOutlineShadow,
!!!										c4d_sha_ShadowCone			= c4dShaShadowCone,
!!!										c4d_sha_Angle				= c4dShaAngle,
!!!										c4d_sha_SoftCone			= c4dShaSoftCone,
										c4d_sha_Accuracy			= c4dShaAccuracy / 100,				!!! set by iShadowQuality
										c4d_sha_MinsSmples			= c4dShaMinSamples,					!!! set by iShadowQuality
										c4d_sha_MaxsSmples			= c4dShaMaxSamples					!!! set by iShadowQuality

									!!! LightLens
!!!										c4d_len_Glow				= c4dLenGlow,						!!! engine default ("Inactive")
!!!										c4d_len_GlowBrightness		= c4dLenGlowBrightness / 100,
!!!										c4d_len_GlowAspectRatio		= c4dLenGlowAspectRatio,
!!!										c4d_len_Reflexes			= c4dLenReflexes					!!! engine default ("Inactive")
!!!										c4d_len_ReflexBrightness	= c4dLenReflexBrightness / 100,
!!!										c4d_len_ReflexAspectRatio	= c4dLenReflexAspectRatio,
!!!										c4d_len_Scale				= c4dLenScale / 100,
!!!										c4d_len_Rotation			= c4dLenRotation,
!!!										c4d_len_UseLightParams		= c4dLenUseLightParams,
!!!										c4d_len_FadeBehindObjects	= c4dLenFadeBehindObjects,
!!!										c4d_len_FadeNearBorders		= c4dLenFadeNearBorders,
!!!										c4d_len_FadeApproachingObjs	= c4dLenFadeApproachingObjs,
!!!										c4d_len_GlowDistantScale	= c4dLenGlowDistantScale,
!!!										c4d_len_ReflexDistantScale	= c4dLenReflexDistantScale
	endif

	if iLightGroupType = LIGHTGROUP_BUILTIN_NONVIS_AREA then
		if iC4dDetAreaShape = AREASHAPE_DISC then
			areaSizeMod	= COS(180 / gs_resol)
		else
			areaSizeMod	= 1
		endif

		light	iBuiltInIntensity / 100 * (iLightColorRed / 255), iBuiltInIntensity / 100 * (iLightColorGreen / 255), iBuiltInIntensity / 100 * (iLightColorBlue / 255),	!!! RGB
				!!! parameters for internal rendering engine
				bGenShadow,						!!! Shadow on/off
				internalLightConeRadius,		!!! Light Cone Radius
				internalLightConeAngle1,		!!! Angle 1   /maximum light/
				internalLightConeAngle2,		!!! Angle 2   /angle faloff light/
				internalLightConeAngleFalloff,	!!! Angle Faloff
				internalLightStart,				!!! Light Start
				internalLightStop,				!!! Light Stop
				internalLightFalloffDistance,	!!! Distance Falloff

				!!! parameters for Cinema4D rendering engine
									!!! LightGeneral
				ADDITIONAL_DATA			c4d_gen_Type				= c4dGenType,
										c4d_gen_Color				= c4dGenColorBuiltIn,
										c4d_gen_Intensity			= iGeneralIntensity / 100,
										c4d_gen_ShadowType			= c4dGenShadowType,					!!! set "Area" by bGenShadow
!!!										c4d_gen_Visibility			= c4dGenVisibility,					!!!	set "None" by parameter (bGenVisibleLight = 0)
										c4d_gen_NoiIlumination		= c4dGenNoIllumination,				!!!	set "0" by parameter
										c4d_gen_AmbientOnly			= c4dGenAmbientOnly,				!!!	set "0" by parameter
										c4d_gen_Diffuse				= NOT(c4dGenDiffuse),				!!!	set "1" by parameter
										c4d_gen_Specular			= NOT(c4dGenSpecular),				!!!	set "1" by parameter
										c4d_gen_GIIllumination		= c4dGenGIIllumination,				!!!	set "1" by parameter

									!!! LightDetail
!!!										c4d_det_UseInner			= c4dDetUseInner,
!!!										c4d_det_InnerAngle			= c4dDetInnerAngle,
!!!										c4d_det_OuterAngle			= c4dDetOuterAngle,
!!!										c4d_det_AspectRatio			= c4dDetAspectRatio,				!!!	engine default (1.0)
!!!										c4d_det_Contrast			= c4dDetContrast / 100,				!!!	engine default (0)
										c4d_det_ShadowCaster		= 0,

										c4d_det_AreaShape			= c4dDetAreaShape,					!!! set by user (default "Sphere")
										c4d_det_AreaX				= _c4dDetAreaX * areaSizeMod,		!!! set by user (default ???)
										c4d_det_AreaY				= _c4dDetAreaY * areaSizeMod,		!!! set by user (default ???)
										c4d_det_AreaZ				= _c4dDetAreaZ,						!!! set by user (default ???)
										c4d_det_Samples				= c4dDetSamples,
!!!										c4d_det_OnlyZ				= c4dDetOnlyZ,						!!!	set "0" by parameter
										c4d_det_ShowinRender		= 0,
										c4d_det_ShowinReflection	= 0,
										c4d_det_Falloff				= c4dDetFalloff,					!!! set "Inverse Square" by bDetShowFalloff
!!!										c4d_det_InfinitAngle		= c4dDetInfinitAngle,
										c4d_det_AddGrain			= _c4dDetAddGrain,
!!!										c4d_det_IdenticalNoise		= c4dDetIdenticalNoise,				!!!	set "0" by parameter
										c4d_det_FalloffAngle		= c4dDetFalloffAngle,				!!! set by user (default ???)
!!!										c4d_det_InnerRadius			= c4dDetInnerRadius,
										c4d_det_Radius				= c4dDetRadius,

										c4d_det_UseGradient			= c4dDetUseGradient,				!!!	set "0" by parameter
!!!										c4d_det_Color				= "1",
!!!										c4d_GradientRGB_Interpol_1	= c4dDetGradientRGBInterpol,
!!!										c4d_GradientRGB_Knots_1		= "2,3",
!!!										c4d_GKRGB_Color_2			= c4dDetGKRGBColor1,
!!!										c4d_GKRGB_Intensity_2		= c4dDetGKRGBIntensity1,
!!!										c4d_GKRGB_Position_2		= c4dDetGKRGBPosition1,
!!!										c4d_GKRGB_Bias_2			= c4dDetGKRGBBias1,
!!!										c4d_GKRGB_Color_3			= c4dDetGKRGBColor2,
!!!										c4d_GKRGB_Intensity_3		= c4dDetGKRGBIntensity2,
!!!										c4d_GKRGB_Position_3		= c4dDetGKRGBPosition2,
!!!										c4d_GKRGB_Bias_3			= c4dDetGKRGBBias2,

										c4d_det_NearClip			= 0,
										c4d_det_FarClip				= 0,
!!!										c4d_det_NearFrom			= c4dDetNearFrom,
!!!										c4d_det_NearTo				= c4dDetNearTo,
!!!										c4d_det_FarFrom				= c4dDetFarFrom,
!!!										c4d_det_FarTo				= c4dDetFarTo,

									!!! LightVisibility
!!!										c4d_vis_UseFalloff			= c4dVisUseFalloff,
!!!										c4d_vis_Falloff				= c4dVisFalloff / 100,
!!!										c4d_vis_UseEdgeFalloff		= c4dVisUseEdgeFalloff,
!!!										c4d_vis_EdgeFalloff			= c4dVisEdgeFalloff / 100,
!!!										c4d_vis_ColoredEdge			= c4dVisColoredEdge,
!!!										c4d_vis_InnerDistance		= c4dVisInnerDistance,
!!!										c4d_vis_OuterDistance		= c4dVisOuterDistance,
!!!										c4d_vis_RelativeScale		= c4dVisRelativeScale,
!!!										c4d_vis_SampleDistance		= c4dVisSampleDistance,
!!!										c4d_vis_Brightness			= c4dVisBrightness / 100,
!!!										c4d_vis_Dust				= c4dVisDust / 100,
!!!										c4d_vis_Dithering			= c4dVisDithering / 100,
!!!										c4d_vis_Additive			= c4dVisAdditive,					!!!	engine default (0)
!!!										c4d_vis_AdaptBrightness		= c4dVisAdaptBrightness,			!!!	engine default (1)

!!!										c4d_vis_UseGradient			= c4dVisUseGradient,				!!!	engine default (0)
!!!										c4d_vis_Color				= "4",
!!!										c4d_GradientRGB_Interpol_4	= c4dVisGradientRGBInterpol,
!!!										c4d_GradientRGB_Knots_4		= "5,6",
!!!										c4d_GKRGB_Color_5			= c4dVisGKRGBColor1,
!!!										c4d_GKRGB_Intensity_5		= c4dVisGKRGBIntensity1,
!!!										c4d_GKRGB_Position_5		= c4dVisGKRGBPosition1,
!!!										c4d_GKRGB_Bias_5			= c4dVisGKRGBBias1,
!!!										c4d_GKRGB_Color_6			= c4dVisGKRGBColor2,
!!!										c4d_GKRGB_Intensity_6		= c4dVisGKRGBIntensity2,
!!!										c4d_GKRGB_Position_6		= c4dVisGKRGBPosition2,
!!!										c4d_GKRGB_Bias_6			= c4dVisGKRGBBias2,

									!!! LightPhotometric
!!!										c4d_pho_UseIES				= c4dPhoUseIES,						!!!	set "0" by parameter
!!!										c4d_pho_File				= c4dPhoIESFile,
!!!										c4d_pho_UseIESSize			= c4dPhoUseIESSize,
										c4d_pho_Photometric			= c4dPhoPhotometric,				!!! set by user (default 0)
										c4d_pho_Intensity			= c4dPhoIntensity,					!!! set by user (default ???)
										c4d_pho_Unit				= c4dPhoUnit,						!!! set by user (default "Candela", cd)

									!!! LightCaustics
!!!										c4d_cau_Surface				= c4dCauSurface,					!!!	engine default (0)
!!!										c4d_cau_SurfaceEnergy		= c4dCauSurfaceEnergy / 100,
!!!										c4d_cau_SurfacePhotons		= c4dCauSurfacePhotons,
!!!										c4d_cau_Volume				= c4dCauVolume,						!!!	engine default (0)
!!!										c4d_cau_VolumeEnergy		= c4dCauVolumeEnergy / 100,
!!!										c4d_cau_VolumePhotons		= c4dCauVolumePhotons,
!!!										c4d_cau_Falloff				= c4dCauFalloff,
!!!										c4d_cau_InnerDistance		= c4dDetInnerRadius,
!!!										c4d_cau_OuterDistance		= c4dDetRadius,

									!!! LightNoise
!!!										c4d_noi_Kind				= c4dNoiKind,						!!!	engine default ("None")
!!!										c4d_noi_Type				= c4dNoiType,
!!!										c4d_noi_Octaves				= c4dNoiOctaves,
!!!										c4d_noi_Brightness			= c4dNoiBrightness / 100,
!!!										c4d_noi_Contrast			= c4dNoiContrast / 100,
!!!										c4d_noi_VisibilityScale		= c4dNoiVisibilityScale,
!!!										c4d_noi_IlluminationScale	= c4dNoiIlluminationScale,

									!!! LightShadow
!!!										c4d_sha_Density				= c4dShaDensity / 100,				!!!	engine default (1.0)
!!!										c4d_sha_Color				= c4dShaColor,
!!!										c4d_sha_Color				= c4dGenColorBuiltIn,
!!!										c4d_sha_Transparency		= NOT(c4dShaTransparency),			!!!	engine default (1)
!!!										c4d_sha_ClippingInfluence	= c4dShaClippingInfluence,			!!!	engine default (0)
!!!										c4d_sha_ShadowMapSize		= c4dShaShadowMapSize,
!!!										c4d_sha_ShadowMapX			= c4dShaShadowMapX,
!!!										c4d_sha_ShadowMapY			= c4dShaShadowMapY,
!!!										c4d_sha_SampleRadius		= c4dShaSampleRadius,
!!!										c4d_sha_AbsoluteBias		= c4dShaAbsoluteBias,
!!!										c4d_sha_RelBias				= c4dShaRelBias / 100,
!!!										c4d_sha_AbsBias				= c4dShaAbsBias,
!!!										c4d_sha_ParalellWidth		= c4dShaParalellWidth,
!!!										c4d_sha_OutlineShadow		= c4dShaOutlineShadow,
!!!										c4d_sha_ShadowCone			= c4dShaShadowCone,
!!!										c4d_sha_Angle				= c4dShaAngle,
!!!										c4d_sha_SoftCone			= c4dShaSoftCone,
										c4d_sha_Accuracy			= c4dShaAccuracy / 100,				!!! set by iShadowQuality
										c4d_sha_MinsSmples			= c4dShaMinSamples,					!!! set by iShadowQuality
										c4d_sha_MaxsSmples			= c4dShaMaxSamples					!!! set by iShadowQuality

									!!! LightLens
!!!										c4d_len_Glow				= c4dLenGlow,						!!! engine default ("Inactive")
!!!										c4d_len_GlowBrightness		= c4dLenGlowBrightness / 100,
!!!										c4d_len_GlowAspectRatio		= c4dLenGlowAspectRatio,
!!!										c4d_len_Reflexes			= c4dLenReflexes					!!! engine default ("Inactive")
!!!										c4d_len_ReflexBrightness	= c4dLenReflexBrightness / 100,
!!!										c4d_len_ReflexAspectRatio	= c4dLenReflexAspectRatio,
!!!										c4d_len_Scale				= c4dLenScale / 100,
!!!										c4d_len_Rotation			= c4dLenRotation,
!!!										c4d_len_UseLightParams		= c4dLenUseLightParams,
!!!										c4d_len_FadeBehindObjects	= c4dLenFadeBehindObjects,
!!!										c4d_len_FadeNearBorders		= c4dLenFadeNearBorders,
!!!										c4d_len_FadeApproachingObjs	= c4dLenFadeApproachingObjs,
!!!										c4d_len_GlowDistantScale	= c4dLenGlowDistantScale,
!!!										c4d_len_ReflexDistantScale	= c4dLenReflexDistantScale
	endif

	if iLightGroupType = LIGHTGROUP_BUILTIN_VIS_AREA then
		if iC4dDetAreaShape = AREASHAPE_DISC then
			areaSizeMod	= COS(180 / gs_resol)
		else
			areaSizeMod	= 1
		endif

		light	iBuiltInIntensity / 100 * (iLightColorRed / 255), iBuiltInIntensity / 100 * (iLightColorGreen / 255), iBuiltInIntensity / 100 * (iLightColorBlue / 255),	!!! RGB
				!!! parameters for internal rendering engine
				bGenShadow,						!!! Shadow on/off
				0,								!!! Light Cone Radius
				0,								!!! Angle 1   /maximum light/
				0,								!!! Angle 2   /angle faloff light/
				0,								!!! Angle Faloff
				internalLightStart,				!!! Light Start
				internalLightStop,				!!! Light Stop
				internalLightFalloffDistance,	!!! Distance Falloff

				!!! parameters for Cinema4D rendering engine
									!!! LightGeneral
				ADDITIONAL_DATA			c4d_gen_Type				= c4dGenType,
										c4d_gen_Color				= c4dGenColorBuiltIn,
										c4d_gen_Intensity			= iGeneralIntensity / 100,
										c4d_gen_ShadowType			= c4dGenShadowType,					!!! engine default ("None")
!!!										c4d_gen_Visibility			= c4dGenVisibility,					!!!	engine default ("None")
!!!										c4d_gen_NoiIlumination		= c4dGenNoIllumination,				!!!	engine default (0)
!!!										c4d_gen_AmbientOnly			= c4dGenAmbientOnly,				!!!	engine default (0)
!!!										c4d_gen_Diffuse				= NOT(c4dGenDiffuse),				!!!	engine default (1)
!!!										c4d_gen_Specular			= NOT(c4dGenSpecular),				!!!	engine default (1)
!!!										c4d_gen_GIIllumination		= c4dGenGIIllumination,				!!!	engine default (1)

									!!! LightDetail
!!!										c4d_det_UseInner			= c4dDetUseInner,
!!!										c4d_det_InnerAngle			= c4dDetInnerAngle,
!!!										c4d_det_OuterAngle			= c4dDetOuterAngle,
!!!										c4d_det_AspectRatio			= c4dDetAspectRatio,				!!!	engine default (1.0)
!!!										c4d_det_Contrast			= c4dDetContrast / 100,				!!!	engine default (0)
										c4d_det_ShadowCaster		= 0,

										c4d_det_AreaShape			= c4dDetAreaShape,					!!! set by user (default lámpától függoen)
										c4d_det_AreaX				= _c4dDetAreaX * areaSizeMod,		!!! set by user (default ???)
										c4d_det_AreaY				= _c4dDetAreaY * areaSizeMod,		!!! set by user (default ???)
										c4d_det_AreaZ				= _c4dDetAreaZ,						!!! set by user (default lámpától függoen)
!!!										c4d_det_Samples				= c4dDetSamples,					!!! engine default (100)
!!!										c4d_det_OnlyZ				= c4dDetOnlyZ,						!!!	engine default (0)
										c4d_det_ShowinRender		= 1,
										c4d_det_ShowinReflection	= 1,
										c4d_det_Falloff				= c4dDetFalloff,
!!!										c4d_det_InfinitAngle		= c4dDetInfinitAngle,
!!!										c4d_det_AddGrain			= c4dDetAddGrain,					!!!	engine default (0)
!!!										c4d_det_IdenticalNoise		= c4dDetIdenticalNoise,				!!!	engine default (0)
										c4d_det_FalloffAngle		= c4dDetFalloffAngle,
!!!										c4d_det_InnerRadius			= c4dDetInnerRadius,
										c4d_det_Radius				= 0,

!!!										c4d_det_UseGradient			= c4dDetUseGradient,				!!!	engine default (0)
!!!										c4d_det_Color				= "1",
!!!										c4d_GradientRGB_Interpol_1	= c4dDetGradientRGBInterpol,
!!!										c4d_GradientRGB_Knots_1		= "2,3",
!!!										c4d_GKRGB_Color_2			= c4dDetGKRGBColor1,
!!!										c4d_GKRGB_Intensity_2		= c4dDetGKRGBIntensity1,
!!!										c4d_GKRGB_Position_2		= c4dDetGKRGBPosition1,
!!!										c4d_GKRGB_Bias_2			= c4dDetGKRGBBias1,
!!!										c4d_GKRGB_Color_3			= c4dDetGKRGBColor2,
!!!										c4d_GKRGB_Intensity_3		= c4dDetGKRGBIntensity2,
!!!										c4d_GKRGB_Position_3		= c4dDetGKRGBPosition2,
!!!										c4d_GKRGB_Bias_3			= c4dDetGKRGBBias2,

										c4d_det_NearClip			= 0,
										c4d_det_FarClip				= 0,
!!!										c4d_det_NearFrom			= c4dDetNearFrom,
!!!										c4d_det_NearTo				= c4dDetNearTo,
!!!										c4d_det_FarFrom				= c4dDetFarFrom,
!!!										c4d_det_FarTo				= c4dDetFarTo,

									!!! LightVisibility
!!!										c4d_vis_UseFalloff			= c4dVisUseFalloff,
!!!										c4d_vis_Falloff				= c4dVisFalloff / 100,
!!!										c4d_vis_UseEdgeFalloff		= c4dVisUseEdgeFalloff,
!!!										c4d_vis_EdgeFalloff			= c4dVisEdgeFalloff / 100,
!!!										c4d_vis_ColoredEdge			= c4dVisColoredEdge,
!!!										c4d_vis_InnerDistance		= c4dVisInnerDistance,
!!!										c4d_vis_OuterDistance		= c4dVisOuterDistance,
!!!										c4d_vis_RelativeScale		= c4dVisRelativeScale,
!!!										c4d_vis_SampleDistance		= c4dVisSampleDistance,
!!!										c4d_vis_Brightness			= c4dVisBrightness / 100,
!!!										c4d_vis_Dust				= c4dVisDust / 100,
!!!										c4d_vis_Dithering			= c4dVisDithering / 100,
!!!										c4d_vis_Additive			= c4dVisAdditive,					!!!	engine default (0)
!!!										c4d_vis_AdaptBrightness		= c4dVisAdaptBrightness,			!!!	engine default (1)

!!!										c4d_vis_UseGradient			= c4dVisUseGradient,				!!!	engine default (0)
!!!										c4d_vis_Color				= "4",
!!!										c4d_GradientRGB_Interpol_4	= c4dVisGradientRGBInterpol,
!!!										c4d_GradientRGB_Knots_4		= "5,6",
!!!										c4d_GKRGB_Color_5			= c4dVisGKRGBColor1,
!!!										c4d_GKRGB_Intensity_5		= c4dVisGKRGBIntensity1,
!!!										c4d_GKRGB_Position_5		= c4dVisGKRGBPosition1,
!!!										c4d_GKRGB_Bias_5			= c4dVisGKRGBBias1,
!!!										c4d_GKRGB_Color_6			= c4dVisGKRGBColor2,
!!!										c4d_GKRGB_Intensity_6		= c4dVisGKRGBIntensity2,
!!!										c4d_GKRGB_Position_6		= c4dVisGKRGBPosition2,
!!!										c4d_GKRGB_Bias_6			= c4dVisGKRGBBias2,

									!!! LightPhotometric
!!!										c4d_pho_UseIES				= c4dPhoUseIES,						!!!	engine default (0)
!!!										c4d_pho_File				= c4dPhoIESFile,
!!!										c4d_pho_UseIESSize			= c4dPhoUseIESSize,
!!!										c4d_pho_Photometric			= c4dPhoPhotometric,				!!! engine default (0)
!!!										c4d_pho_Intensity			= c4dPhoIntensity,					!!! engine default (10.0)
!!!										c4d_pho_Unit				= c4dPhoUnit,						!!! engine default (cd)

									!!! LightCaustics
!!!										c4d_cau_Surface				= c4dCauSurface,					!!!	engine default (0)
!!!										c4d_cau_SurfaceEnergy		= c4dCauSurfaceEnergy / 100,
!!!										c4d_cau_SurfacePhotons		= c4dCauSurfacePhotons,
!!!										c4d_cau_Volume				= c4dCauVolume,						!!!	engine default (0)
!!!										c4d_cau_VolumeEnergy		= c4dCauVolumeEnergy / 100,
!!!										c4d_cau_VolumePhotons		= c4dCauVolumePhotons,
!!!										c4d_cau_Falloff				= c4dCauFalloff,
!!!										c4d_cau_InnerDistance		= c4dDetInnerRadius,
!!!										c4d_cau_OuterDistance		= c4dDetRadius,

									!!! LightNoise
!!!										c4d_noi_Kind				= c4dNoiKind,						!!!	engine default ("None")
!!!										c4d_noi_Type				= c4dNoiType,
!!!										c4d_noi_Octaves				= c4dNoiOctaves,
!!!										c4d_noi_Brightness			= c4dNoiBrightness / 100,
!!!										c4d_noi_Contrast			= c4dNoiContrast / 100,
!!!										c4d_noi_VisibilityScale		= c4dNoiVisibilityScale,
!!!										c4d_noi_IlluminationScale	= c4dNoiIlluminationScale,

									!!! LightShadow
!!!										c4d_sha_Density				= c4dShaDensity / 100,				!!!	engine default (1.0)
!!!										c4d_sha_Color				= c4dShaColor,
!!!										c4d_sha_Color				= c4dGenColorBuiltIn,
!!!										c4d_sha_Transparency		= NOT(c4dShaTransparency),			!!!	engine default (1)
!!!										c4d_sha_ClippingInfluence	= c4dShaClippingInfluence,			!!!	engine default (0)
!!!										c4d_sha_ShadowMapSize		= c4dShaShadowMapSize,
!!!										c4d_sha_ShadowMapX			= c4dShaShadowMapX,
!!!										c4d_sha_ShadowMapY			= c4dShaShadowMapY,
!!!										c4d_sha_SampleRadius		= c4dShaSampleRadius,
!!!										c4d_sha_AbsoluteBias		= c4dShaAbsoluteBias,
!!!										c4d_sha_RelBias				= c4dShaRelBias / 100,
!!!										c4d_sha_AbsBias				= c4dShaAbsBias,
!!!										c4d_sha_ParalellWidth		= c4dShaParalellWidth,
!!!										c4d_sha_OutlineShadow		= c4dShaOutlineShadow,
!!!										c4d_sha_ShadowCone			= c4dShaShadowCone,
!!!										c4d_sha_Angle				= c4dShaAngle,
!!!										c4d_sha_SoftCone			= c4dShaSoftCone,
										c4d_sha_Accuracy			= c4dShaAccuracy / 100,				!!! set by iShadowQuality
										c4d_sha_MinsSmples			= c4dShaMinSamples,					!!! set by iShadowQuality
										c4d_sha_MaxsSmples			= c4dShaMaxSamples					!!! set by iShadowQuality

									!!! LightLens
!!!										c4d_len_Glow				= c4dLenGlow,						!!! engine default ("Inactive")
!!!										c4d_len_GlowBrightness		= c4dLenGlowBrightness / 100,
!!!										c4d_len_GlowAspectRatio		= c4dLenGlowAspectRatio,
!!!										c4d_len_Reflexes			= c4dLenReflexes					!!! engine default ("Inactive")
!!!										c4d_len_ReflexBrightness	= c4dLenReflexBrightness / 100,
!!!										c4d_len_ReflexAspectRatio	= c4dLenReflexAspectRatio,
!!!										c4d_len_Scale				= c4dLenScale / 100,
!!!										c4d_len_Rotation			= c4dLenRotation,
!!!										c4d_len_UseLightParams		= c4dLenUseLightParams,
!!!										c4d_len_FadeBehindObjects	= c4dLenFadeBehindObjects,
!!!										c4d_len_FadeNearBorders		= c4dLenFadeNearBorders,
!!!										c4d_len_FadeApproachingObjs	= c4dLenFadeApproachingObjs,
!!!										c4d_len_GlowDistantScale	= c4dLenGlowDistantScale,
!!!										c4d_len_ReflexDistantScale	= c4dLenReflexDistantScale
	endif

	if iLightGroupType = LIGHTGROUP_BUILTIN_SPOT then
		light	iBuiltInIntensity / 100 * (iLightColorRed / 255), iBuiltInIntensity / 100 * (iLightColorGreen / 255), iBuiltInIntensity / 100 * (iLightColorBlue / 255),	!!! RGB
				!!! parameters for internal rendering engine
				bGenShadow,						!!! Shadow on/off
				internalLightConeRadius,		!!! Light Cone Radius
				internalLightConeAngle1,		!!! Angle 1   /maximum light/
				internalLightConeAngle2,		!!! Angle 2   /angle faloff light/
				internalLightConeAngleFalloff,	!!! Angle Faloff
				internalLightStart,				!!! Light Start
				internalLightStop,				!!! Light Stop
				internalLightFalloffDistance,	!!! Distance Falloff

				!!! parameters for Cinema4D rendering engine
									!!! LightGeneral
				ADDITIONAL_DATA			c4d_gen_Type				= c4dGenType,
										c4d_gen_Color				= c4dGenColorBuiltIn,
										c4d_gen_Intensity			= iGeneralIntensity / 100,
										c4d_gen_ShadowType			= c4dGenShadowType,					!!! set "Area" by bGenShadow
										c4d_gen_Visibility			= c4dGenVisibility,					!!!	set "Visible"
!!!										c4d_gen_NoiIlumination		= c4dGenNoIllumination,				!!!	engine default (0)
!!!										c4d_gen_AmbientOnly			= c4dGenAmbientOnly,				!!!	engine default (0)
!!!										c4d_gen_Diffuse				= NOT(c4dGenDiffuse),				!!!	engine default (1)
!!!										c4d_gen_Specular			= NOT(c4dGenSpecular),				!!!	engine default (1)
!!!										c4d_gen_GIIllumination		= c4dGenGIIllumination,				!!!	engine default (1)

									!!! LightDetail
										c4d_det_UseInner			= 1,
										c4d_det_InnerAngle			= c4dDetInnerAngle,
										c4d_det_OuterAngle			= c4dDetOuterAngle,
!!!										c4d_det_AspectRatio			= c4dDetAspectRatio,				!!!	engine default (1.0)
!!!										c4d_det_Contrast			= c4dDetContrast / 100,				!!!	engine default (0)
!!!										c4d_det_ShadowCaster		= c4dDetShadowCaster,				!!!	engine default (0)

										c4d_det_AreaShape			= c4dDetAreaShape,					!!! set by user
										c4d_det_AreaX				= _c4dDetAreaX,						!!! set by user (default 30mm)
										c4d_det_AreaY				= _c4dDetAreaY,						!!! set by user (default 30mm)
										c4d_det_AreaZ				= _c4dDetAreaZ,						!!! set by user (default 30mm)
!!!										c4d_det_Samples				= c4dDetSamples,					!!! engine default (100)
!!!										c4d_det_OnlyZ				= c4dDetOnlyZ,						!!!	engine default (0)
!!!										c4d_det_ShowinRender		= c4dDetShowinRender,				!!!	engine default (0)
!!!										c4d_det_ShowinReflection	= c4dDetShowinReflection,			!!!	engine default (0)
										c4d_det_Falloff				= c4dDetFalloff,					!!! set "InverseSquare" by bDetShowFalloff (engine default)
!!!										c4d_det_InfinitAngle		= c4dDetInfinitAngle,
!!!										c4d_det_AddGrain			= c4dDetAddGrain,					!!!	engine default (0)
!!!										c4d_det_IdenticalNoise		= c4dDetIdenticalNoise,				!!!	engine default (0)
!!!										c4d_det_FalloffAngle		= c4dDetFalloffAngle,				!!!	engine default (180)
!!!										c4d_det_InnerRadius			= c4dDetInnerRadius,
										c4d_det_Radius				= c4dDetRadius,

!!!										c4d_det_UseGradient			= c4dDetUseGradient,				!!!	engine default (0)
!!!										c4d_det_Color				= "1",
!!!										c4d_GradientRGB_Interpol_1	= c4dDetGradientRGBInterpol,
!!!										c4d_GradientRGB_Knots_1		= "2,3",
!!!										c4d_GKRGB_Color_2			= c4dDetGKRGBColor1,
!!!										c4d_GKRGB_Intensity_2		= c4dDetGKRGBIntensity1,
!!!										c4d_GKRGB_Position_2		= c4dDetGKRGBPosition1,
!!!										c4d_GKRGB_Bias_2			= c4dDetGKRGBBias1,
!!!										c4d_GKRGB_Color_3			= c4dDetGKRGBColor2,
!!!										c4d_GKRGB_Intensity_3		= c4dDetGKRGBIntensity2,
!!!										c4d_GKRGB_Position_3		= c4dDetGKRGBPosition2,
!!!										c4d_GKRGB_Bias_3			= c4dDetGKRGBBias2,

										c4d_det_NearClip			= 0,
										c4d_det_FarClip				= 0,
!!!										c4d_det_NearFrom			= c4dDetNearFrom,
!!!										c4d_det_NearTo				= c4dDetNearTo,
!!!										c4d_det_FarFrom				= c4dDetFarFrom,
!!!										c4d_det_FarTo				= c4dDetFarTo,

									!!! LightVisibility
										c4d_vis_UseFalloff			= 1,
										c4d_vis_Falloff				= 0.8,
										c4d_vis_UseEdgeFalloff		= 1,
										c4d_vis_EdgeFalloff			= 0.8,
!!!										c4d_vis_ColoredEdge			= c4dVisColoredEdge,
!!!										c4d_vis_InnerDistance		= c4dVisInnerDistance,
!!!										c4d_vis_OuterDistance		= c4dVisOuterDistance,
!!!										c4d_vis_RelativeScale		= c4dVisRelativeScale,
!!!										c4d_vis_SampleDistance		= c4dVisSampleDistance,
										c4d_vis_Brightness			= c4dVisBrightness / 100,
!!!										c4d_vis_Dust				= c4dVisDust / 100,
!!!										c4d_vis_Dithering			= c4dVisDithering / 100,
!!!										c4d_vis_Additive			= c4dVisAdditive,					!!!	engine default (0)
!!!										c4d_vis_AdaptBrightness		= c4dVisAdaptBrightness,			!!!	engine default (1)

!!!										c4d_vis_UseGradient			= c4dVisUseGradient,				!!!	engine default (0)
!!!										c4d_vis_Color				= "4",
!!!										c4d_GradientRGB_Interpol_4	= c4dVisGradientRGBInterpol,
!!!										c4d_GradientRGB_Knots_4		= "5,6",
!!!										c4d_GKRGB_Color_5			= c4dVisGKRGBColor1,
!!!										c4d_GKRGB_Intensity_5		= c4dVisGKRGBIntensity1,
!!!										c4d_GKRGB_Position_5		= c4dVisGKRGBPosition1,
!!!										c4d_GKRGB_Bias_5			= c4dVisGKRGBBias1,
!!!										c4d_GKRGB_Color_6			= c4dVisGKRGBColor2,
!!!										c4d_GKRGB_Intensity_6		= c4dVisGKRGBIntensity2,
!!!										c4d_GKRGB_Position_6		= c4dVisGKRGBPosition2,
!!!										c4d_GKRGB_Bias_6			= c4dVisGKRGBBias2,

									!!! LightPhotometric
!!!										c4d_pho_UseIES				= c4dPhoUseIES,						!!!	engine default (0)
!!!										c4d_pho_File				= c4dPhoIESFile,
!!!										c4d_pho_UseIESSize			= c4dPhoUseIESSize,
										c4d_pho_Photometric			= c4dPhoPhotometric,				!!! set by user
										c4d_pho_Intensity			= c4dPhoIntensity,					!!! set by user
										c4d_pho_Unit				= c4dPhoUnit,						!!! set by user

									!!! LightCaustics
!!!										c4d_cau_Surface				= c4dCauSurface,					!!!	engine default (0)
!!!										c4d_cau_SurfaceEnergy		= c4dCauSurfaceEnergy / 100,
!!!										c4d_cau_SurfacePhotons		= c4dCauSurfacePhotons,
!!!										c4d_cau_Volume				= c4dCauVolume,						!!!	engine default (0)
!!!										c4d_cau_VolumeEnergy		= c4dCauVolumeEnergy / 100,
!!!										c4d_cau_VolumePhotons		= c4dCauVolumePhotons,
!!!										c4d_cau_Falloff				= c4dCauFalloff,
!!!										c4d_cau_InnerDistance		= c4dDetInnerRadius,
!!!										c4d_cau_OuterDistance		= c4dDetRadius,

									!!! LightNoise
!!!										c4d_noi_Kind				= c4dNoiKind,						!!!	engine default ("None")
!!!										c4d_noi_Type				= c4dNoiType,
!!!										c4d_noi_Octaves				= c4dNoiOctaves,
!!!										c4d_noi_Brightness			= c4dNoiBrightness / 100,
!!!										c4d_noi_Contrast			= c4dNoiContrast / 100,
!!!										c4d_noi_VisibilityScale		= c4dNoiVisibilityScale,
!!!										c4d_noi_IlluminationScale	= c4dNoiIlluminationScale,

									!!! LightShadow
!!!										c4d_sha_Density				= c4dShaDensity / 100,				!!!	engine default (1.0)
!!!										c4d_sha_Color				= c4dShaColor,
!!!										c4d_sha_Color				= c4dGenColorBuiltIn,
!!!										c4d_sha_Transparency		= NOT(c4dShaTransparency),			!!!	engine default (1)
!!!										c4d_sha_ClippingInfluence	= c4dShaClippingInfluence,			!!!	engine default (0)
!!!										c4d_sha_ShadowMapSize		= c4dShaShadowMapSize,
!!!										c4d_sha_ShadowMapX			= c4dShaShadowMapX,
!!!										c4d_sha_ShadowMapY			= c4dShaShadowMapY,
!!!										c4d_sha_SampleRadius		= c4dShaSampleRadius,
!!!										c4d_sha_AbsoluteBias		= c4dShaAbsoluteBias,
!!!										c4d_sha_RelBias				= c4dShaRelBias / 100,
!!!										c4d_sha_AbsBias				= c4dShaAbsBias,
!!!										c4d_sha_ParalellWidth		= c4dShaParalellWidth,
!!!										c4d_sha_OutlineShadow		= c4dShaOutlineShadow,
!!!										c4d_sha_ShadowCone			= c4dShaShadowCone,
!!!										c4d_sha_Angle				= c4dShaAngle,
!!!										c4d_sha_SoftCone			= c4dShaSoftCone,
										c4d_sha_Accuracy			= c4dShaAccuracy / 100,				!!! set by iShadowQuality
										c4d_sha_MinsSmples			= c4dShaMinSamples,					!!! set by iShadowQuality
										c4d_sha_MaxsSmples			= c4dShaMaxSamples					!!! set by iShadowQuality

									!!! LightLens
!!!										c4d_len_Glow				= c4dLenGlow,						!!! engine default ("Inactive")
!!!										c4d_len_GlowBrightness		= c4dLenGlowBrightness / 100,
!!!										c4d_len_GlowAspectRatio		= c4dLenGlowAspectRatio,
!!!										c4d_len_Reflexes			= c4dLenReflexes					!!! engine default ("Inactive")
!!!										c4d_len_ReflexBrightness	= c4dLenReflexBrightness / 100,
!!!										c4d_len_ReflexAspectRatio	= c4dLenReflexAspectRatio,
!!!										c4d_len_Scale				= c4dLenScale / 100,
!!!										c4d_len_Rotation			= c4dLenRotation,
!!!										c4d_len_UseLightParams		= c4dLenUseLightParams,
!!!										c4d_len_FadeBehindObjects	= c4dLenFadeBehindObjects,
!!!										c4d_len_FadeNearBorders		= c4dLenFadeNearBorders,
!!!										c4d_len_FadeApproachingObjs	= c4dLenFadeApproachingObjs,
!!!										c4d_len_GlowDistantScale	= c4dLenGlowDistantScale,
!!!										c4d_len_ReflexDistantScale	= c4dLenReflexDistantScale
	endif

	del 2
	if bWindowLight then del 1

	gosub "symbol rotation end"

return


"omni light geometry":

	! ======================================================================
	! Omni Light Geometry
	! ======================================================================

	bShowRotationHotspot	= NOT(bBuiltInLight)

	if iLightGroupType = LIGHTGROUP_BUILTIN_FALLOFF then
		if bShowFalloffSymbol then		gosub "draw falloff"
	else
		gosub "symbol rotation start"

		if bShowTargetLine then			gosub "target line"
		if bShowCrossHairSymbol then	gosub "crossHair symbol"
		if bShowArrowSymbol then		gosub "arrow symbol"
		if bShowFalloffSymbol then		gosub "draw falloff"

		if bShowNearClip then
			penSphere		= penNearClip

			circleRadius	= c4dDetNearFrom
			iEditingType	= EDITTYPE_NEARCLIPFROM
			gosub "draw sphere symbol"

			circleRadius	= c4dDetNearTo
			iEditingType	= EDITTYPE_NEARCLIPTO
			gosub "draw sphere symbol"
		endif

		if bShowFarClip then
			penSphere		= penFarClip

			circleRadius	= c4dDetFarFrom
			iEditingType	= EDITTYPE_FARCLIPFROM
			gosub "draw sphere symbol"

			circleRadius	= c4dDetFarTo
			iEditingType	= EDITTYPE_FARCLIPTO
			gosub "draw sphere symbol"
		endif

		gosub "symbol rotation end"
	endif

return


"spot light geometry":

	! ======================================================================
	! Spot Light Geometry
	! ======================================================================

	if bShowTargetLine then	gosub "target line"

	bShowRotationHotspot	= NOT(bBuiltInLight)
	gosub "symbol rotation start"


	muly _c4dDetAspectRatio

	if bShowSpotLightCone then	gosub "draw falloff"

	if bShowNearClip then
		penCone				= penNearClip

		coneApexLength		= c4dDetNearFrom
		coneAngle			= c4dDetOuterAngle / 2
		coneRadiusBase		= SIN(coneAngle) * coneApexLength
		coneRadiusTop		= 0
		coneHeight			= COS(coneAngle) * coneApexLength
		bShowConeApex		= 0
		bShowTopContour		= 0
		bShowBaseContour	= 1
		bShowBaseBottomArc	= 1
		fullLineLength		= 0
		iEditingType		= EDITTYPE_NEARCLIPFROM
		gosub "draw cone symbol"

		coneApexLength		= c4dDetNearTo
		coneAngle			= c4dDetOuterAngle / 2
		coneRadiusBase		= SIN(coneAngle) * coneApexLength
		coneRadiusTop		= 0
		coneHeight			= COS(coneAngle) * coneApexLength
		bShowConeApex		= 0
		bShowTopContour		= 0
		bShowBaseContour	= 1
		bShowBaseBottomArc	= 1
		fullLineLength		= 0
		iEditingType		= EDITTYPE_NEARCLIPTO
		gosub "draw cone symbol"
	endif

	if bShowFarClip then
		penCone				= penFarClip

		coneApexLength		= c4dDetFarFrom
		coneAngle			= c4dDetOuterAngle / 2
		coneRadiusBase		= SIN(coneAngle) * coneApexLength
		coneRadiusTop		= 0
		coneHeight			= COS(coneAngle) * coneApexLength
		bShowConeApex		= 0
		bShowTopContour		= 0
		bShowBaseContour	= 1
		bShowBaseBottomArc	= 1
		fullLineLength		= 0
		iEditingType		= EDITTYPE_FARCLIPFROM
		gosub "draw cone symbol"

		coneApexLength		= c4dDetFarTo
		coneAngle			= c4dDetOuterAngle / 2
		coneRadiusBase		= SIN(coneAngle) * coneApexLength
		coneRadiusTop		= 0
		coneHeight			= COS(coneAngle) * coneApexLength
		bShowConeApex		= 0
		bShowTopContour		= 0
		bShowBaseContour	= 1
		bShowBaseBottomArc	= 1
		fullLineLength		= 0
		iEditingType		= EDITTYPE_FARCLIPTO
		gosub "draw cone symbol"
	endif

	del 1

	if bShowCrossHairSymbol then	gosub "crossHair symbol"
	if bShowArrowSymbol then		gosub "arrow symbol"

	gosub "symbol rotation end"

return


"area light geometry":

	! ======================================================================
	! Area Light Geometry
	! ======================================================================

	if NOT(bWindowLight) then
		if bShowTargetLine then		gosub "target line"
	endif

	bShowRotationHotspot	= NOT(bBuiltInLight)
	gosub "symbol rotation start"

	if bWindowLight then
		add c4dDetAreaX / 2, c4dDetAreaY / 2, 0
		if bShowTargetLine then		gosub "target line"
	endif
	if bShowCrossHairSymbol then	gosub "crossHair symbol"
	if bShowArrowSymbol then		gosub "arrow symbol"
	if bShowFalloffSymbol then		gosub "draw falloff"

	if bWindowLight then del 1

	! ======================================================================
	! Area shapes
	! ======================================================================

	if bShowAreaShapes then
		pen gs_cont_pen

		model surface

		bModelWire	= 0
		if iLightGroupType = LIGHTGROUP_GENERAL_LIGHT then
			if (bShowLightSymbolIn3D and iModelType = MODEL_WIREFRAME) | bShowLightSymbolIn2D then bModelWire = 1
		endif

		if bModelWire then
			if bShowLightSymbolIn3D then resol 16
			model wire
		endif

		if NOT(bWindowLight) then
			if iLightGroupType = LIGHTGROUP_BUILTIN_VIS_AREA then addz EPS

			mul c4dDetAreaX, c4dDetAreaY * _c4dDetAspectRatio, c4dDetAreaZ

				if iC4dDetAreaShape = AREASHAPE_DISC then
					poly_ 2,
						0, 0, 901,
						0.5, 360, 4000
				endif
				if iC4dDetAreaShape = AREASHAPE_RECT then
					poly_ 4,
						-0.5, -0.5, 1,
						0.5, -0.5, 1,
						0.5, 0.5, 1,
						-0.5, 0.5, 1
				endif
				if iC4dDetAreaShape = AREASHAPE_SPHERE then
					sphere 1 / 2
				endif
				if iC4dDetAreaShape = AREASHAPE_CYLIND then
					addz -1 / 2
						cylind 1, 1 / 2
					del 1
				endif
				if iC4dDetAreaShape = AREASHAPE_CUBE then
					addz -0.5
						prism_ 4, 1,
							-0.5, -0.5, 15,
							0.5, -0.5, 15,
							0.5, 0.5, 15,
							-0.5, 0.5, 15
					del 1
				endif
				if iC4dDetAreaShape = AREASHAPE_HEMISPHERE then
					rotx 90
						cutplane
					del 1

					sphere 1 / 2

					cutend
				endif
				if iC4dDetAreaShape = AREASHAPE_PCYLIND then
					addx -1 / 2
					roty 90
						cylind 1, 1 / 2
					del 2
				endif

			del 1

			if iC4dDetAreaShape = AREASHAPE_LINE then
				lin_ 0, 0, -sizeAreaXHalf, 0, 0, sizeAreaXHalf
			endif

			! ======================================================================
			! Area shapes hotspot editing
			! ======================================================================

			if iLightGroupType = LIGHTGROUP_GENERAL_LIGHT then
				if iC4dDetAreaShape <> AREASHAPE_LINE then
					for i = 1 to 1 + (iC4dDetAreaShape = AREASHAPE_CUBE | iC4dDetAreaShape = AREASHAPE_CYLIND)
						if	iC4dDetAreaShape = AREASHAPE_RECT |\
							iC4dDetAreaShape = AREASHAPE_CUBE then

							addz -c4dDetAreaZ / 2 * (iC4dDetAreaShape = AREASHAPE_CUBE)
								hotspot	0,	sizeAreaYHalf,	0,					unID, sizeAreaXHalf,	1 + 128,	c4dDetAreaX : unID = unID + 1
								hotspot	-1,	sizeAreaYHalf,	0,					unID, sizeAreaXHalf, 	3,			c4dDetAreaX	: unID = unID + 1
								hotspot	sizeAreaXHalf,	sizeAreaYHalf,	0,		unID, sizeAreaXHalf, 	2,			c4dDetAreaX	: unID = unID + 1

								hotspot	sizeAreaXHalf,	0,	0,					unID, sizeAreaYHalf,	1 + 128,	c4dDetAreaY	: unID = unID + 1
								hotspot	sizeAreaXHalf,	-1,	0,					unID, sizeAreaYHalf, 	3,			c4dDetAreaY	: unID = unID + 1
								hotspot	sizeAreaXHalf,	sizeAreaYHalf,	0,		unID, sizeAreaYHalf, 	2,			c4dDetAreaY	: unID = unID + 1

								if bFullEditing then
									hotspot	0,	sizeAreaYHalf,	0,					unID, sizeAreaXHalf,	1 + 128,	c4dDetAreaX	: unID = unID + 1
									hotspot	1,	sizeAreaYHalf,	0,					unID, sizeAreaXHalf, 	3,			c4dDetAreaX	: unID = unID + 1
									hotspot	-sizeAreaXHalf,	sizeAreaYHalf,	0,		unID, sizeAreaXHalf, 	2,			c4dDetAreaX	: unID = unID + 1

									hotspot	-sizeAreaXHalf,	0,	0,					unID, sizeAreaYHalf,	1 + 128,	c4dDetAreaY	: unID = unID + 1
									hotspot	-sizeAreaXHalf,	-1,	0,					unID, sizeAreaYHalf, 	3,			c4dDetAreaY	: unID = unID + 1
									hotspot	-sizeAreaXHalf,	sizeAreaYHalf,	0,		unID, sizeAreaYHalf, 	2,			c4dDetAreaY	: unID = unID + 1

									hotspot	0,	-sizeAreaYHalf,	0,					unID, sizeAreaXHalf,	1 + 128,	c4dDetAreaX	: unID = unID + 1
									hotspot	-1,	-sizeAreaYHalf,	0,					unID, sizeAreaXHalf, 	3,			c4dDetAreaX	: unID = unID + 1
									hotspot	sizeAreaXHalf,	-sizeAreaYHalf,	0,		unID, sizeAreaXHalf, 	2,			c4dDetAreaX	: unID = unID + 1

									hotspot	sizeAreaXHalf,	0,	0,					unID, sizeAreaYHalf,	1 + 128,	c4dDetAreaY	: unID = unID + 1
									hotspot	sizeAreaXHalf,	1,	0,					unID, sizeAreaYHalf, 	3,			c4dDetAreaY	: unID = unID + 1
									hotspot	sizeAreaXHalf,	-sizeAreaYHalf,	0,		unID, sizeAreaYHalf, 	2,			c4dDetAreaY	: unID = unID + 1

									hotspot	0,	-sizeAreaYHalf,	0,					unID, sizeAreaXHalf,	1 + 128,	c4dDetAreaX 	: unID = unID + 1
									hotspot	1,	-sizeAreaYHalf,	0,					unID, sizeAreaXHalf, 	3,			c4dDetAreaX	: unID = unID + 1
									hotspot	-sizeAreaXHalf,	-sizeAreaYHalf,	0,		unID, sizeAreaXHalf, 	2,			c4dDetAreaX	: unID = unID + 1

									hotspot	-sizeAreaXHalf,	0,	0,					unID, sizeAreaYHalf,	1 + 128,	c4dDetAreaY	: unID = unID + 1
									hotspot	-sizeAreaXHalf,	1,	0,					unID, sizeAreaYHalf, 	3,			c4dDetAreaY	: unID = unID + 1
									hotspot	-sizeAreaXHalf,	-sizeAreaYHalf,	0,		unID, sizeAreaYHalf, 	2,			c4dDetAreaY	: unID = unID + 1
								endif
							del 1
						endif
						if	iC4dDetAreaShape = AREASHAPE_PCYLIND then
							hotspot	0,	0,	0,							unID, sizeAreaXHalf,	1 + 128,	c4dDetAreaX : unID = unID + 1
							hotspot	-1,	0,	0,							unID, sizeAreaXHalf, 	3,			c4dDetAreaX	: unID = unID + 1
							hotspot	sizeAreaXHalf,	0,	0,				unID, sizeAreaXHalf, 	2,			c4dDetAreaX	: unID = unID + 1

							hotspot	sizeAreaXHalf,	0,	0,				unID, sizeAreaYHalf,	1 + 128,	c4dDetAreaY	: unID = unID + 1
							hotspot	sizeAreaXHalf,	-1,	0,				unID, sizeAreaYHalf, 	3,			c4dDetAreaY	: unID = unID + 1
							hotspot	sizeAreaXHalf,	sizeAreaYHalf,	0,	unID, sizeAreaYHalf, 	2,			c4dDetAreaY	: unID = unID + 1

							if bFullEditing then
								hotspot	0,	0,	0,							unID, sizeAreaXHalf,	1 + 128,	c4dDetAreaX : unID = unID + 1
								hotspot	1,	0,	0,							unID, sizeAreaXHalf, 	3,			c4dDetAreaX	: unID = unID + 1
								hotspot	-sizeAreaXHalf,	0,	0,				unID, sizeAreaXHalf, 	2,			c4dDetAreaX	: unID = unID + 1

								hotspot	sizeAreaXHalf,	0,	0,				unID, sizeAreaYHalf,	1 + 128,	c4dDetAreaY	: unID = unID + 1
								hotspot	sizeAreaXHalf,	1,	0,				unID, sizeAreaYHalf, 	3,			c4dDetAreaY	: unID = unID + 1
								hotspot	sizeAreaXHalf,	-sizeAreaYHalf,	0,	unID, sizeAreaYHalf, 	2,			c4dDetAreaY	: unID = unID + 1

								hotspot	-sizeAreaXHalf,	0,	0,				unID, sizeAreaYHalf,	1 + 128,	c4dDetAreaY	: unID = unID + 1
								hotspot	-sizeAreaXHalf,	-1,	0,				unID, sizeAreaYHalf, 	3,			c4dDetAreaY	: unID = unID + 1
								hotspot	-sizeAreaXHalf,	sizeAreaYHalf,	0,	unID, sizeAreaYHalf, 	2,			c4dDetAreaY	: unID = unID + 1

								hotspot	-sizeAreaXHalf,	0,	0,				unID, sizeAreaYHalf,	1 + 128,	c4dDetAreaY	: unID = unID + 1
								hotspot	-sizeAreaXHalf,	1,	0,				unID, sizeAreaYHalf, 	3,			c4dDetAreaY	: unID = unID + 1
								hotspot	-sizeAreaXHalf,	-sizeAreaYHalf,	0,	unID, sizeAreaYHalf, 	2,			c4dDetAreaY	: unID = unID + 1
							endif
						endif
						if	iC4dDetAreaShape = AREASHAPE_DISC |\
							iC4dDetAreaShape = AREASHAPE_SPHERE |\
							iC4dDetAreaShape = AREASHAPE_HEMISPHERE |\
							iC4dDetAreaShape = AREASHAPE_CYLIND then
							addz -c4dDetAreaZ / 2 * (iC4dDetAreaShape = AREASHAPE_CYLIND)
								hotspot	0,	0,	0,					unID, sizeAreaXHalf,	1 + 128,	c4dDetAreaX : unID = unID + 1
								hotspot	-1,	0,	0,					unID, sizeAreaXHalf, 	3,			c4dDetAreaX	: unID = unID + 1
								hotspot	sizeAreaXHalf,	0,	0,		unID, sizeAreaXHalf, 	2,			c4dDetAreaX	: unID = unID + 1

								if iC4dDetAreaShape = AREASHAPE_HEMISPHERE then
									hotspot	0,	0,	0,					unID, sizeAreaYHalf,	1 + 128,	sizeAreaYHalf	: unID = unID + 1
									hotspot	0,	-1,	0,					unID, sizeAreaYHalf, 	3,			sizeAreaYHalf	: unID = unID + 1
									hotspot	0,	sizeAreaYHalf,	0,		unID, sizeAreaYHalf, 	2,			sizeAreaYHalf	: unID = unID + 1
								else
									hotspot	0,	0,	0,					unID, sizeAreaYHalf,	1 + 128,	c4dDetAreaY	: unID = unID + 1
									hotspot	0,	-1,	0,					unID, sizeAreaYHalf, 	3,			c4dDetAreaY	: unID = unID + 1
									hotspot	0,	sizeAreaYHalf,	0,		unID, sizeAreaYHalf, 	2,			c4dDetAreaY	: unID = unID + 1
								endif

								if bFullEditing then
									hotspot	0,	0,	0,					unID, sizeAreaXHalf,	1 + 128,	c4dDetAreaX : unID = unID + 1
									hotspot	1,	0,	0,					unID, sizeAreaXHalf, 	3,			c4dDetAreaX	: unID = unID + 1
									hotspot	-sizeAreaXHalf,	0,	0,		unID, sizeAreaXHalf, 	2,			c4dDetAreaX	: unID = unID + 1

									if iC4dDetAreaShape <> AREASHAPE_HEMISPHERE then
										hotspot	0,	0,	0,					unID, sizeAreaYHalf,	1 + 128,	c4dDetAreaY	: unID = unID + 1
										hotspot	0,	1,	0,					unID, sizeAreaYHalf, 	3,			c4dDetAreaY	: unID = unID + 1
										hotspot	0,	-sizeAreaYHalf,	0,		unID, sizeAreaYHalf, 	2,			c4dDetAreaY	: unID = unID + 1
									endif
								endif
							del 1
						endif

						addz c4dDetAreaZ
					next i
					del 1 + (iC4dDetAreaShape = AREASHAPE_CUBE | iC4dDetAreaShape = AREASHAPE_CYLIND)

					if	iC4dDetAreaShape = AREASHAPE_CUBE |\
						iC4dDetAreaShape = AREASHAPE_SPHERE |\
						iC4dDetAreaShape = AREASHAPE_HEMISPHERE |\
						iC4dDetAreaShape = AREASHAPE_CYLIND then

						hotspot	0,	0,	0,					unID, sizeAreaZHalf, 1 + 128,		c4dDetAreaZ :		unID = unID + 1
						hotspot	0,	0,	-1,					unID, sizeAreaZHalf, 3,				c4dDetAreaZ :		unID = unID + 1
						hotspot	0,	0,	sizeAreaZHalf,		unID, sizeAreaZHalf, 2,				c4dDetAreaZ	:		unID = unID + 1

						if bFullEditing then
							hotspot	0,	0,	0,					unID, sizeAreaZHalf, 1 + 128,	c4dDetAreaZ :		unID = unID + 1
							hotspot	0,	0,	1,					unID, sizeAreaZHalf, 3,			c4dDetAreaZ :		unID = unID + 1
							hotspot	0,	0,	-sizeAreaZHalf,		unID, sizeAreaZHalf, 2,			c4dDetAreaZ	:		unID = unID + 1
						endif
					endif
					if	iC4dDetAreaShape = AREASHAPE_PCYLIND then
						hotspot	sizeAreaXHalf,	0,	0,					unID, sizeAreaZHalf, 1 + 128,	c4dDetAreaZ :		unID = unID + 1
						hotspot	sizeAreaXHalf,	0,	-1,					unID, sizeAreaZHalf, 3,			c4dDetAreaZ :		unID = unID + 1
						hotspot	sizeAreaXHalf,	0,	sizeAreaZHalf,		unID, sizeAreaZHalf, 2,			c4dDetAreaZ	:		unID = unID + 1

						if bFullEditing then
							hotspot	sizeAreaXHalf,	0,	0,					unID, sizeAreaZHalf, 1 + 128,	c4dDetAreaZ :		unID = unID + 1
							hotspot	sizeAreaXHalf,	0,	1,					unID, sizeAreaZHalf, 3,			c4dDetAreaZ :		unID = unID + 1
							hotspot	sizeAreaXHalf,	0,	-sizeAreaZHalf,		unID, sizeAreaZHalf, 2,			c4dDetAreaZ	:		unID = unID + 1

							hotspot	-sizeAreaXHalf,	0,	0,					unID, sizeAreaZHalf, 1 + 128,	c4dDetAreaZ :		unID = unID + 1
							hotspot	-sizeAreaXHalf,	0,	-1,					unID, sizeAreaZHalf, 3,			c4dDetAreaZ :		unID = unID + 1
							hotspot	-sizeAreaXHalf,	0,	sizeAreaZHalf,		unID, sizeAreaZHalf, 2,			c4dDetAreaZ	:		unID = unID + 1

							hotspot	-sizeAreaXHalf,	0,	0,					unID, sizeAreaZHalf, 1 + 128,	c4dDetAreaZ :		unID = unID + 1
							hotspot	-sizeAreaXHalf,	0,	1,					unID, sizeAreaZHalf, 3,			c4dDetAreaZ :		unID = unID + 1
							hotspot	-sizeAreaXHalf,	0,	-sizeAreaZHalf,		unID, sizeAreaZHalf, 2,			c4dDetAreaZ	:		unID = unID + 1
						endif
					endif
				else
					hotspot	0,	0,	0,				unID, sizeAreaXHalf, 1 + 128,	c4dDetAreaX :	unID = unID + 1
					hotspot	0,	0,	-1,				unID, sizeAreaXHalf, 3, 		c4dDetAreaX :	unID = unID + 1
					hotspot	0,	0,	sizeAreaXHalf,	unID, sizeAreaXHalf, 2,			c4dDetAreaX :	unID = unID + 1
				endif
			endif

			if iLightGroupType = LIGHTGROUP_BUILTIN_VIS_AREA then del 1
		else
			poly_ 4,
				0, 0, bModelWire,
				c4dDetAreaX, 0, bModelWire,
				c4dDetAreaX, c4dDetAreaY, bModelWire,
				0, c4dDetAreaY, bModelWire

			lin_ 0, 0, 0, c4dDetAreaX, c4dDetAreaY, 0
			lin_ 0, c4dDetAreaY, 0, c4dDetAreaX, 0, 0

			hotspot	0,	0,	0,					unID, c4dDetAreaX,	1 + 256				: unID = unID + 1
			hotspot	-1,	0,	0,					unID, c4dDetAreaX, 	3					: unID = unID + 1
			hotspot	c4dDetAreaX,	0,	0,		unID, c4dDetAreaX, 	2					: unID = unID + 1

			hotspot	0,	c4dDetAreaY,	0,					unID, c4dDetAreaX,	1 + 256	: unID = unID + 1
			hotspot	-1,	c4dDetAreaY,	0,					unID, c4dDetAreaX, 	3		: unID = unID + 1
			hotspot	c4dDetAreaX,	c4dDetAreaY,	0,		unID, c4dDetAreaX, 	2		: unID = unID + 1

			hotspot	0,	0,	0,					unID, c4dDetAreaY,	1 + 256				: unID = unID + 1
			hotspot	0,	-1,	0,					unID, c4dDetAreaY, 	3					: unID = unID + 1
			hotspot	0,	c4dDetAreaY,	0,		unID, c4dDetAreaY, 	2					: unID = unID + 1

			hotspot	c4dDetAreaX,	0,	0,					unID, c4dDetAreaY,	1 + 256	: unID = unID + 1
			hotspot	c4dDetAreaX,	-1,	0,					unID, c4dDetAreaY, 	3		: unID = unID + 1
			hotspot	c4dDetAreaX,	c4dDetAreaY,	0,		unID, c4dDetAreaY, 	2		: unID = unID + 1
		endif
	endif

	gosub "symbol rotation end"

return


"infinite light geometry":

	! ======================================================================
	! Infinite Light Geometry
	! ======================================================================

	iLineType = LINETYPE_SIMPLE

	if bShowTargetLine then			gosub "target line"

	bShowRotationHotspot	= NOT(bBuiltInLight)
	gosub "symbol rotation start"

	if (bShowLightSymbolIn3D and bShow3D) | bShowLightSymbolIn2D then
		pen gs_cont_pen

		if bSunObject then
			iSunResol	= 16

			resol iSunResol

			model wire

			sphere sunRadius

			for ii = 1 to 4
				lineStartPosX		= sunRadius + sunBeamOffset
				lineStartPosY		= 0
				lineStartPosZ		= 0
				lineEndPosX			= sunRadius + sunBeamOffset + sunBeamLength
				lineEndPosY			= 0
				lineEndPosZ			= 0
				gosub "3D line"

				rotz 90
			next ii
			del 4

			for ii = 1 to 4
				lineStartPosX		= 0
				lineStartPosY		= 0
				lineStartPosZ		= sunRadius + sunBeamOffset
				lineEndPosX			= 0
				lineEndPosY			= 0
				lineEndPosZ			= sunRadius + sunBeamOffset + sunBeamLength
				gosub "3D line"

				rotx 90
			next ii
			del 4
		else
			fullLineLength	= 1

			contourSizeX	= fullLineLength
			contourSizeY	= fullLineLength
			iLineType		= LINETYPE_DASHED
			gosub "3D rect"

			add 0, -fullLineLength / 6, 0
				for ii = 1 to 2
					lineStartPosX		= -fullLineLength / 2
					lineStartPosY		= 0
					lineStartPosZ		= 0
					lineEndPosX			= fullLineLength / 2
					lineEndPosY			= 0
					lineEndPosZ			= 0
					gosub "3D line"

					addy fullLineLength / 3
				next ii
				del 2
			del 1

			add -fullLineLength / 6, 0, 0
				for ii = 1 to 2
					lineStartPosX		= 0
					lineStartPosY		= -fullLineLength / 2
					lineStartPosZ		= 0
					lineEndPosX			= 0
					lineEndPosY			= fullLineLength / 2
					lineEndPosZ			= 0
					gosub "3D line"

					addx fullLineLength / 3
				next ii
				del 2
			del 1
		endif
	endif

	if bShowCrossHairSymbol then	gosub "crossHair symbol"
	if bShowArrowSymbol then		gosub "arrow symbol"

	gosub "symbol rotation end"

return


"ies light geometry":

	! ======================================================================
	! IES Light Geometry
	! ======================================================================

	bShowRotationHotspot	= NOT(bBuiltInLight)
	gosub "symbol rotation start"

	if bShowTargetLine then			gosub "target line"
	if bShowCrossHairSymbol then	gosub "crossHair symbol"
	if bShowArrowSymbol then		gosub "arrow symbol"
	if bShowFalloffSymbol then		gosub "draw falloff"

	gosub "symbol rotation end"

return


"target line":

	! ======================================================================
	! Target Line
	! ======================================================================

	pen penTargetLine

	iLineType = LINETYPE_SIMPLE

	if iSymbolRotationType = ROTTYPE_TARGETPOSITION then
		if NOT(bTargetLineIsVertical) then
			targetAngleZ			= ASN((targetPosZ - lightPosZ) / (targetLineLength3D))
		else
			if targetPosZ < lightPosZ then
				targetAngleZ		= -90
			else
				targetAngleZ		= 90
			endif
		endif

		lineStartPosX		= lightPosX + targetLineExtensionLength * COS(targetAngleZ) * COS(targetAngle2D)
		lineStartPosY		= lightPosY + targetLineExtensionLength * COS(targetAngleZ) * SIN(targetAngle2D)
		lineStartPosZ		= lightPosZ - targetLineExtensionLength * SIN(targetAngleZ)
		lineEndPosX			= targetPosX
		lineEndPosY			= targetPosY
		lineEndPosZ			= targetPosZ
		gosub "3D line"
	else
		lineStartPosX		= 0
		lineStartPosY		= 0
		lineStartPosZ		= targetLineExtensionLength
		lineEndPosX			= 0
		lineEndPosY			= 0
		lineEndPosZ			= -targetLineLength3D
		gosub "3D line"

		if bWindowLight then hotspot 0, 0, -targetLineLength3D,	unID		: unID = unID + 1
	endif

return


"light position editing":

	! ======================================================================
	! Light Position Editing
	! ======================================================================

	if bEnableLightHotspotEditing and bShowLightSymbolIn3D and bShow3D then
		hotspot	0,			lightPosY,	lightPosZ,	unID, lightPosX,	1 + 128		: unID = unID + 1
		hotspot -1,			lightPosY,	lightPosZ, 	unID, lightPosX, 	3			: unID = unID + 1
		hotspot lightPosX,	lightPosY,	lightPosZ,	unID, lightPosX, 	2			: unID = unID + 1

		hotspot	lightPosX,	0,			lightPosZ,	unID, lightPosY,	1 + 128		: unID = unID + 1
		hotspot lightPosX,	-1,			lightPosZ, 	unID, lightPosY, 	3			: unID = unID + 1
		hotspot lightPosX,	lightPosY,	lightPosZ,	unID, lightPosY, 	2			: unID = unID + 1

		hotspot	lightPosX,	lightPosY,	0,			unID, lightPosZ,	1 + 128		: unID = unID + 1
		hotspot lightPosX,	lightPosY,	-1, 		unID, lightPosZ, 	3			: unID = unID + 1
		hotspot lightPosX,	lightPosY,	lightPosZ,	unID, lightPosZ, 	2			: unID = unID + 1
	else
		hotspot	lightPosX,	lightPosY,	lightPosZ,	unID							: unID = unID + 1
	endif

return


"target position editing":

	! ======================================================================
	! Target Position Editing
	! ======================================================================

	if bEnableTargetHotspotEditing and bShowLightSymbolIn3D and bShow3D then
		hotspot	0,			targetPosY,	targetPosZ,	unID, targetPosX,	1 + 128		: unID = unID + 1
		hotspot -1,			targetPosY,	targetPosZ, unID, targetPosX, 	3			: unID = unID + 1
		hotspot targetPosX,	targetPosY,	targetPosZ,	unID, targetPosX, 	2			: unID = unID + 1

		hotspot	targetPosX,	0,			targetPosZ,	unID, targetPosY,	1 + 128		: unID = unID + 1
		hotspot targetPosX,	-1,			targetPosZ, unID, targetPosY, 	3			: unID = unID + 1
		hotspot targetPosX,	targetPosY,	targetPosZ,	unID, targetPosY, 	2			: unID = unID + 1

		hotspot	targetPosX,	targetPosY,	0,			unID, targetPosZ,	1 + 128		: unID = unID + 1
		hotspot targetPosX,	targetPosY,	-1, 		unID, targetPosZ, 	3			: unID = unID + 1
		hotspot targetPosX,	targetPosY,	targetPosZ,	unID, targetPosZ, 	2			: unID = unID + 1
	else
		hotspot	targetPosX,	targetPosY,	targetPosZ,	unID							: unID = unID + 1
	endif

return


"outer Light Cone editing":

	! ======================================================================
	! Outer Light Cone Editing
	! ======================================================================

	rotz -90
	for ii = 1 to 1 + (1 + 2 * (iLightForm = LIGHTFORM_CIRCLE)) * (bFullEditing)
		hotspot 0,	0,				-c4dDetRadius,	unID, outerConeAngleHalf, 4 + 128,	c4dDetOuterAngle	: unID = unID + 1
		hotspot 0,	coneRadiusBase,	-coneHeight,	unID, outerConeAngleHalf, 5,		c4dDetOuterAngle	: unID = unID + 1
		hotspot 0,	0,				0,				unID, outerConeAngleHalf, 6,		c4dDetOuterAngle	: unID = unID + 1
		hotspot 0,	c4dDetRadius,	0,				unID, outerConeAngleHalf, 7,		c4dDetOuterAngle	: unID = unID + 1

		rotz 90 + 90 * (iLightForm = LIGHTFORM_ELLIPSE)
	next ii
	del 1 + (1 + 2 * (iLightForm = LIGHTFORM_CIRCLE)) * (bFullEditing)
	del 1

return


"inner Light Cone editing":

	! ======================================================================
	! Inner Light Cone Editing
	! ======================================================================

	rotz -90
	for ii = 1 to 1 + (1 + 2 * (iLightForm = LIGHTFORM_CIRCLE)) * (bFullEditing)
		hotspot 0,	0,					-c4dDetRadius,	unID, innerConeAngleHalf, 4 + 128,	c4dDetInnerAngle	: unID = unID + 1
		hotspot 0,	coneRadiusBase,		-coneHeight,	unID, innerConeAngleHalf, 5,		c4dDetInnerAngle	: unID = unID + 1
		hotspot 0,	0,					0,				unID, innerConeAngleHalf, 6,		c4dDetInnerAngle	: unID = unID + 1
		hotspot 0,	c4dDetRadius,		0,				unID, innerConeAngleHalf, 7,		c4dDetInnerAngle	: unID = unID + 1

		rotz 90 + 90 * (iLightForm = LIGHTFORM_ELLIPSE)
	next ii
	del 1 + (1 + 2 * (iLightForm = LIGHTFORM_CIRCLE)) * (bFullEditing)
	del 1

return


"draw falloff":

	! ======================================================================
	! Draw Falloff
	! ======================================================================

	penSphere	= penIllumination
	penCone		= penIllumination

	if bFixFalloffAngle then falloffAngleTemp	= c4dDetRadius * TAN(c4dDetFalloffAngle / 2)

	if iFalloffType = FALLOFFTYPE_OMNI then
		circleRadius	= c4dDetRadius
		iEditingType	= EDITTYPE_FALLOFF
		gosub "draw sphere symbol"
	endif

	if iFalloffType = FALLOFFTYPE_AREA then
		gosub "area falloff contours"
	endif

	if iFalloffType = FALLOFFTYPE_SPOT then
		! ---- Outer Spot Light Cone
		coneAngle			= c4dDetOuterAngle / 2
		coneHeight			= COS(coneAngle) * c4dDetRadius
		coneApexLength		= coneHeight / COS(coneAngle)
		coneRadiusBase		= SIN(coneAngle) * coneApexLength
		coneRadiusTop		= 0
		bShowConeApex		= 1
		bShowTopContour		= 0
		bShowBaseContour	= 1
		bShowBaseBottomArc	= bShowFalloffSymbol
		fullLineLength		= coneApexLength
		iEditingType		= EDITTYPE_FALLOFF
		bFixFalloffAngle	= 1
		gosub "draw cone symbol"
		gosub "outer Light Cone editing"

		if c4dDetUseInner and iModelType = MODEL_WIREFRAME then
			! ---- Inner Spot Light Cone
			coneAngle			= c4dDetInnerAngle / 2
			coneHeight			= COS(coneAngle) * c4dDetRadius
			coneApexLength		= coneHeight / COS(coneAngle)
			coneRadiusBase		= SIN(coneAngle) * coneApexLength
			coneRadiusTop		= 0
			bShowConeApex		= 1
			bShowTopContour		= 0
			bShowBaseContour	= 1
			bShowBaseBottomArc	= 0
			fullLineLength		= coneApexLength
			bFixFalloffAngle	= 1
			gosub "draw cone symbol"
			gosub "inner Light Cone editing"
		endif
	endif

	if iFalloffType = FALLOFFTYPE_CONE then
		coneHeight			= c4dDetRadius
		coneAngle			= c4dDetFalloffAngle / 2
		coneApexLength		= coneHeight / COS(coneAngle)
		coneRadiusBase		= SIN(coneAngle) * coneApexLength
		coneRadiusTop		= c4dDetAreaX / 2
		bShowConeApex		= 1
		bShowTopContour		= 1
		bShowBaseContour	= 1
		bShowBaseBottomArc	= 0
		fullLineLength		= coneApexLength
		iEditingType		= EDITTYPE_FALLOFF
		bFixFalloffAngle	= (iLightGroupType = LIGHTGROUP_BUILTIN_FALLOFF)
		muly c4dDetAreaY / c4dDetAreaX
			gosub "draw cone symbol"
		del 1
	endif

	if iFalloffType = FALLOFFTYPE_PYRAMID then
		coneHeight			= c4dDetRadius
		coneAngle			= c4dDetFalloffAngle / 2
		coneApexLength		= coneHeight / COS(coneAngle)
		contourSizeXTop		= c4dDetAreaX
		contourSizeYTop		= c4dDetAreaY
		contourSizeXBase	= SIN(coneAngle) * coneApexLength * 2 + contourSizeXTop
		contourSizeYBase	= SIN(coneAngle) * coneApexLength * 2 + contourSizeYTop
		bShowConeApex		= 1
		bShowTopContour		= 1
		bShowBaseContour	= 1
		fullLineLength		= coneApexLength
		iEditingType		= EDITTYPE_FALLOFF
		bFixFalloffAngle	= (iLightGroupType = LIGHTGROUP_BUILTIN_FALLOFF)
		gosub "draw pyramid symbol"
	endif

return


"draw cone symbol":

	pen penCone

	! ======================================================================
	! Draw Cone Symbol
	! ======================================================================

	if coneHeight > 0 then
		if iModelType = MODEL_WIREFRAME | bShowLightSymbolIn2D then
			if bShowConeApex then
				iLineType	= LINETYPE_DASHED

				for ii = 1 to 4
					lineStartPosX		= coneRadiusTop
					lineStartPosY		= 0
					lineStartPosZ		= 0
					lineEndPosX			= coneRadiusBase + coneRadiusTop
					lineEndPosY			= 0
					lineEndPosZ			= -coneHeight
					gosub "3D line"

					rotz 90
				next ii
				del 4
			endif

			if bShowTopContour then
				circleRadius	= coneRadiusTop
				fullArcAngle	= 360
				iLineType		= LINETYPE_DASHED
				iArcScale		= 1
				gosub "3D arc"
			endif

			if bShowBaseContour then
				circleRadius	= coneRadiusBase + coneRadiusTop
				fullArcAngle	= 360
				iLineType		= LINETYPE_DASHED
				iArcScale		= 1
				addz -coneHeight
					gosub "3D arc"
				del 1
			endif

			if bShowBaseBottomArc then
				circleRadius	= coneApexLength
				fullArcAngle	= coneAngle * 2
				iLineType		= LINETYPE_DASHED
				iArcScale		= 1

				for ba = 1 to 2
					roty 90 - fullArcAngle / 2
					rotx -90
						gosub "3D arc"
					del 2

					rotz 90
				next ba
				del 2
			endif

			iSymbolGeometry	= GEOMETRY_CONE
			if iEditingType = EDITTYPE_FALLOFF then			gosub "falloff distance editing"
			if bFullEditing then
				if iEditingType = EDITTYPE_NEARCLIPFROM then	gosub "near clip from editing"
				if iEditingType = EDITTYPE_NEARCLIPTO then		gosub "near clip to editing"
				if iEditingType = EDITTYPE_FARCLIPFROM then		gosub "far clip from editing"
				if iEditingType = EDITTYPE_FARCLIPTO then		gosub "far clip to editing"
			endif
		else
			model surface

			if iEditingType = EDITTYPE_FALLOFF then
				addz -coneHeight
				roty -90
					revolve 2, 360, 0,
						0, coneRadiusBase + coneRadiusTop, 1,
						coneHeight, coneRadiusTop, 1
				del 2
			else
				circleRadius	= coneRadiusBase + coneRadiusTop
				fullArcAngle	= 360
				iLineType		= LINETYPE_SIMPLE
				iArcScale		= 1
				addz -coneHeight
					gosub "3D arc"
				del 1
			endif

			iSymbolGeometry	= GEOMETRY_CONE
			if iEditingType = EDITTYPE_FALLOFF then			gosub "falloff distance editing"
			if bFullEditing then
				if iEditingType = EDITTYPE_NEARCLIPFROM then	gosub "near clip from editing"
				if iEditingType = EDITTYPE_NEARCLIPTO then		gosub "near clip to editing"
				if iEditingType = EDITTYPE_FARCLIPFROM then		gosub "far clip from editing"
				if iEditingType = EDITTYPE_FARCLIPTO then		gosub "far clip to editing"
			endif
		endif
	endif

	if bShowFalloffSymbol then
		hotspot	0,	0,	0,				unID, c4dDetRadius,	1 + 128		: unID = unID + 1
		hotspot 0,	0,	1,				unID, c4dDetRadius, 3			: unID = unID + 1
		hotspot 0,	0,	-c4dDetRadius,	unID, c4dDetRadius, 2			: unID = unID + 1
	endif

	if NOT(bFixFalloffAngle) then
		add c4dDetAreaX / 2, 0, -c4dDetRadius
			hotspot	0,					0,	0,	unID, falloffAngleTemp,	1 + 128,	c4dDetFalloffAngle	: unID = unID + 1
			hotspot -1,					0,	0,	unID, falloffAngleTemp, 3,			c4dDetFalloffAngle	: unID = unID + 1
			hotspot falloffAngleTemp,	0,	0,	unID, falloffAngleTemp, 2,			c4dDetFalloffAngle	: unID = unID + 1
		del 1
	endif

return


"draw pyramid symbol":

	pen penCone

	! ======================================================================
	! Draw Pyramid Symbol
	! ======================================================================

	if coneHeight > 0 then
		if iModelType = MODEL_WIREFRAME | bShowLightSymbolIn2D then
			if bShowConeApex then
				iLineType	= LINETYPE_DASHED

				lineStartPosX		= contourSizeXTop / 2
				lineStartPosY		= contourSizeYTop / 2
				lineStartPosZ		= 0
				lineEndPosX			= contourSizeXBase / 2
				lineEndPosY			= contourSizeYBase / 2
				lineEndPosZ			= -coneHeight
				gosub "3D line"

				lineStartPosX		= contourSizeXTop / 2
				lineStartPosY		= -contourSizeYTop / 2
				lineStartPosZ		= 0
				lineEndPosX			= contourSizeXBase / 2
				lineEndPosY			= -contourSizeYBase / 2
				lineEndPosZ			= -coneHeight
				gosub "3D line"

				lineStartPosX		= -contourSizeXTop / 2
				lineStartPosY		= -contourSizeYTop / 2
				lineStartPosZ		= 0
				lineEndPosX			= -contourSizeXBase / 2
				lineEndPosY			= -contourSizeYBase / 2
				lineEndPosZ			= -coneHeight
				gosub "3D line"

				lineStartPosX		= -contourSizeXTop / 2
				lineStartPosY		= contourSizeYTop / 2
				lineStartPosZ		= 0
				lineEndPosX			= -contourSizeXBase / 2
				lineEndPosY			= contourSizeYBase / 2
				lineEndPosZ			= -coneHeight
				gosub "3D line"
			endif

			if bShowTopContour then
				contourSizeX	= contourSizeXTop
				contourSizeY	= contourSizeYTop
				iLineType		= LINETYPE_DASHED
				gosub "3D rect"
			endif

			if bShowBaseContour then
				contourSizeX	= contourSizeXBase
				contourSizeY	= contourSizeYBase
				iLineType		= LINETYPE_DASHED
				addz -coneHeight
					gosub "3D rect"
				del 1
			endif

			iSymbolGeometry	= GEOMETRY_CONE
			if iEditingType = EDITTYPE_FALLOFF then			gosub "falloff distance editing"
			if bFullEditing then
				if iEditingType = EDITTYPE_NEARCLIPFROM then	gosub "near clip from editing"
				if iEditingType = EDITTYPE_NEARCLIPTO then		gosub "near clip to editing"
				if iEditingType = EDITTYPE_FARCLIPFROM then		gosub "far clip from editing"
				if iEditingType = EDITTYPE_FARCLIPTO then		gosub "far clip to editing"
			endif
		else
			model surface

			addz -coneHeight
				fprism_ "builtInMatIlluminationShading", "builtInMatIlluminationShading",
						"builtInMatIlluminationShading", "builtInMatIlluminationShading",
						4, c4dDetRadius, (90 - c4dDetFalloffAngle / 2), c4dDetRadius,
					-c4dDetAreaX / 2 - falloffAngleTemp, -c4dDetAreaY / 2 - falloffAngleTemp, 15,
					c4dDetAreaX / 2 + falloffAngleTemp, -c4dDetAreaY / 2 - falloffAngleTemp, 15,
					c4dDetAreaX / 2 + falloffAngleTemp, c4dDetAreaY / 2 + falloffAngleTemp, 15,
					-c4dDetAreaX / 2 - falloffAngleTemp, c4dDetAreaY / 2 + falloffAngleTemp, 15
			del 1

			iSymbolGeometry	= GEOMETRY_CONE
			if iEditingType = EDITTYPE_FALLOFF then			gosub "falloff distance editing"
		endif
	endif

	if bShowFalloffSymbol then
		hotspot	0,	0,	0,				unID, c4dDetRadius,	1 + 128		: unID = unID + 1
		hotspot 0,	0,	1,				unID, c4dDetRadius, 3			: unID = unID + 1
		hotspot 0,	0,	-c4dDetRadius,	unID, c4dDetRadius, 2			: unID = unID + 1
	endif

	if NOT(bFixFalloffAngle) then
		add c4dDetAreaX / 2, 0, -c4dDetRadius
			hotspot	0,					0,	0,	unID, falloffAngleTemp,	1 + 128,	c4dDetFalloffAngle	: unID = unID + 1
			hotspot -1,					0,	0,	unID, falloffAngleTemp, 3,			c4dDetFalloffAngle	: unID = unID + 1
			hotspot falloffAngleTemp,	0,	0,	unID, falloffAngleTemp, 2,			c4dDetFalloffAngle	: unID = unID + 1
		del 1
	endif

return


"area falloff contours":

	! ======================================================================
	! Falloff Contours
	! ======================================================================

	pen penIllumination

	if iLightGroupType = LIGHTGROUP_GENERAL_LIGHT then
		if c4dDetOnlyZ then cutplane

		if iC4dDetAreaShape = AREASHAPE_RECT then
			shapeSizeX		= sizeAreaXHalf * 2
			shapeSizeY		= sizeAreaYHalf * 2
			arcSizeX		= c4dDetRadius
			arcSizeY		= c4dDetRadius * _c4dDetAspectRatio
			iArcScale		= _c4dDetAspectRatio
			gosub "oval contour 3D"

			roty -90
				shapeSizeX		= 0
				shapeSizeY		= sizeAreaYHalf * 2
				arcSizeX		= c4dDetRadius
				arcSizeY		= c4dDetRadius * _c4dDetAspectRatio
				iArcScale		= _c4dDetAspectRatio
				gosub "oval contour 3D"
			del 1

			rotx 90
				shapeSizeX		= sizeAreaXHalf * 2
				shapeSizeY		= 0
				arcSizeX		= c4dDetRadius
				arcSizeY		= c4dDetRadius
				gosub "oval contour 3D"
				iArcScale		= 1
			del 1

			falloffEditingStartX	= sizeAreaXHalf
			falloffEditingStartY	= sizeAreaYHalf
			falloffEditingStartZ	= 0
			gosub "falloff distance editing area"
		endif


		if iC4dDetAreaShape = AREASHAPE_DISC then
			shapeSizeX		= 0
			shapeSizeY		= 0
			arcSizeX		= sizeAreaXHalf + c4dDetRadius
			arcSizeY		= sizeAreaYHalf + c4dDetRadius * _c4dDetAspectRatio
			iArcScale		= _c4dDetAspectRatio
			gosub "oval contour 3D"

			roty -90
				shapeSizeX		= 0
				shapeSizeY		= sizeAreaYHalf * 2
				arcSizeX		= c4dDetRadius
				arcSizeY		= c4dDetRadius * _c4dDetAspectRatio
				iArcScale		= _c4dDetAspectRatio
				gosub "oval contour 3D"
			del 1

			rotx 90
				shapeSizeX		= sizeAreaXHalf * 2
				shapeSizeY		= 0
				arcSizeX		= c4dDetRadius
				arcSizeY		= c4dDetRadius
				iArcScale		= 1
				gosub "oval contour 3D"
			del 1

			falloffEditingStartX	= sizeAreaXHalf
			falloffEditingStartY	= sizeAreaYHalf
			falloffEditingStartZ	= 0
			gosub "falloff distance editing area"
		endif

		if iC4dDetAreaShape = AREASHAPE_CUBE then
			shapeSizeX		= sizeAreaXHalf * 2
			shapeSizeY		= sizeAreaYHalf * 2
			arcSizeX		= c4dDetRadius
			arcSizeY		= c4dDetRadius * _c4dDetAspectRatio
			iArcScale		= _c4dDetAspectRatio
			gosub "oval contour 3D"

			roty -90
				shapeSizeX		= sizeAreaZHalf * 2
				shapeSizeY		= sizeAreaYHalf * 2
				arcSizeX		= c4dDetRadius
				arcSizeY		= c4dDetRadius * _c4dDetAspectRatio
				iArcScale		= _c4dDetAspectRatio
				gosub "oval contour 3D"
			del 1

			rotx 90
				shapeSizeX		= sizeAreaXHalf * 2
				shapeSizeY		= sizeAreaZHalf * 2
				arcSizeX		= c4dDetRadius
				arcSizeY		= c4dDetRadius
				iArcScale		= 1
				gosub "oval contour 3D"
			del 1

			falloffEditingStartX	= sizeAreaXHalf
			falloffEditingStartY	= sizeAreaYHalf
			falloffEditingStartZ	= sizeAreaZHalf
			gosub "falloff distance editing area"
		endif

		if iC4dDetAreaShape = AREASHAPE_SPHERE then
			shapeSizeX		= 0
			shapeSizeY		= 0
			arcSizeX		= sizeAreaXHalf + c4dDetRadius
			arcSizeY		= sizeAreaYHalf + c4dDetRadius * _c4dDetAspectRatio
			iArcScale		= _c4dDetAspectRatio
			gosub "oval contour 3D"

			roty -90
				shapeSizeX		= 0
				shapeSizeY		= 0
				arcSizeX		= sizeAreaZHalf + c4dDetRadius
				arcSizeY		= sizeAreaYHalf + c4dDetRadius * _c4dDetAspectRatio
				iArcScale		= _c4dDetAspectRatio
				gosub "oval contour 3D"
			del 1

			rotx 90
				shapeSizeX		= 0
				shapeSizeY		= 0
				arcSizeX		= sizeAreaXHalf + c4dDetRadius
				arcSizeY		= sizeAreaZHalf + c4dDetRadius
				iArcScale		= 1
				gosub "oval contour 3D"
			del 1

			falloffEditingStartX	= sizeAreaXHalf
			falloffEditingStartY	= sizeAreaYHalf
			falloffEditingStartZ	= sizeAreaZHalf
			gosub "falloff distance editing area"
		endif

		if iC4dDetAreaShape = AREASHAPE_CYLIND then
			shapeSizeX		= 0
			shapeSizeY		= 0
			arcSizeX		= sizeAreaXHalf + c4dDetRadius
			arcSizeY		= sizeAreaYHalf + c4dDetRadius * _c4dDetAspectRatio
			iArcScale		= _c4dDetAspectRatio
			gosub "oval contour 3D"

			roty -90
				shapeSizeX		= sizeAreaZHalf * 2
				shapeSizeY		= sizeAreaYHalf * 2
				arcSizeX		= c4dDetRadius
				arcSizeY		= c4dDetRadius * _c4dDetAspectRatio
				iArcScale		= _c4dDetAspectRatio
				gosub "oval contour 3D"
			del 1

			rotx 90
				shapeSizeX		= sizeAreaXHalf * 2
				shapeSizeY		= sizeAreaZHalf * 2
				arcSizeX		= c4dDetRadius
				arcSizeY		= c4dDetRadius
				gosub "oval contour 3D"
			del 1

			falloffEditingStartX	= sizeAreaXHalf
			falloffEditingStartY	= sizeAreaYHalf
			falloffEditingStartZ	= sizeAreaZHalf
			gosub "falloff distance editing area"
		endif

		if iC4dDetAreaShape = AREASHAPE_PCYLIND then
			shapeSizeX		= sizeAreaXHalf * 2
			shapeSizeY		= sizeAreaYHalf * 2
			arcSizeX		= c4dDetRadius
			arcSizeY		= c4dDetRadius * _c4dDetAspectRatio
			iArcScale		= _c4dDetAspectRatio
			gosub "oval contour 3D"

			roty -90
				shapeSizeX		= 0
				shapeSizeY		= 0
				arcSizeX		= sizeAreaZHalf + c4dDetRadius
				arcSizeY		= sizeAreaYHalf + c4dDetRadius * _c4dDetAspectRatio
				iArcScale		= _c4dDetAspectRatio
				gosub "oval contour 3D"
			del 1

			rotx 90
				shapeSizeX		= sizeAreaXHalf * 2
				shapeSizeY		= sizeAreaZHalf * 2
				arcSizeX		= c4dDetRadius
				arcSizeY		= c4dDetRadius
				iArcScale		= 1
				gosub "oval contour 3D"
			del 1

			falloffEditingStartX	= sizeAreaXHalf
			falloffEditingStartY	= sizeAreaYHalf
			falloffEditingStartZ	= sizeAreaZHalf
			gosub "falloff distance editing area"
		endif

		if iC4dDetAreaShape = AREASHAPE_LINE then
			shapeSizeX		= 0
			shapeSizeY		= 0
			arcSizeX		= c4dDetRadius
			arcSizeY		= c4dDetRadius * _c4dDetAspectRatio
			iArcScale		= _c4dDetAspectRatio
			gosub "oval contour 3D"

			roty -90
				shapeSizeX		= sizeAreaXHalf * 2
				shapeSizeY		= 0
				arcSizeX		= c4dDetRadius
				arcSizeY		= c4dDetRadius * _c4dDetAspectRatio
				iArcScale		= _c4dDetAspectRatio
				gosub "oval contour 3D"
			del 1

			rotx 90
				shapeSizeX		= 0
				shapeSizeY		= sizeAreaXHalf * 2
				arcSizeX		= c4dDetRadius
				arcSizeY		= c4dDetRadius
				iArcScale		= 1
				gosub "oval contour 3D"
			del 1

			falloffEditingStartX	= 0
			falloffEditingStartY	= 0
			falloffEditingStartZ	= sizeAreaXHalf
			gosub "falloff distance editing area"
		endif

		if iC4dDetAreaShape = AREASHAPE_HEMISPHERE then
			shapeSizeX		= sizeAreaXHalf * 2
			shapeSizeY		= sizeAreaYHalf + c4dDetRadius * _c4dDetAspectRatio
			arcSizeX		= sizeAreaXHalf + c4dDetRadius
			arcSizeY		= sizeAreaYHalf + c4dDetRadius * _c4dDetAspectRatio
			iArcScale		= _c4dDetAspectRatio
			gosub "halfoval contour 3D"

			roty -90
				shapeSizeX		= sizeAreaZHalf * 2
				shapeSizeY		= sizeAreaYHalf + c4dDetRadius * _c4dDetAspectRatio
				arcSizeX		= sizeAreaZHalf + c4dDetRadius
				arcSizeY		= sizeAreaYHalf + c4dDetRadius * _c4dDetAspectRatio
				iArcScale		= _c4dDetAspectRatio
				gosub "halfoval contour 3D"
			del 1

			rotx 90
				shapeSizeX		= 0
				shapeSizeY		= 0
				arcSizeX		= sizeAreaXHalf + c4dDetRadius
				arcSizeY		= sizeAreaZHalf + c4dDetRadius
				iArcScale		= 1
				gosub "oval contour 3D"
			del 1

			falloffEditingStartX	= sizeAreaXHalf
			falloffEditingStartY	= sizeAreaYHalf
			falloffEditingStartZ	= sizeAreaZHalf
			gosub "falloff distance editing area"
		endif

		if c4dDetOnlyZ then cutend
	endif

return


"oval contour 3D":

	! ======================================================================
	! Oval Contour 3D
	! ======================================================================

	iLineType			= LINETYPE_DASHED
	circleRadius		= c4dDetRadius
	fullArcAngle		= 90

	for jj = 1 to 2
		for ii = 1 to 2

			add shapeSizeX / 2, shapeSizeY / 2, 0
				mul arcSizeX / c4dDetRadius, arcSizeY / c4dDetRadius, 1
					gosub "3D arc"
				del 1
			del 1

			if jj = 1 then
				fullLineLength		= shapeSizeY
				add shapeSizeX / 2 + arcSizeX, 0, 0
					lineStartPosX		= 0
					lineStartPosY		= -fullLineLength / 2
					lineStartPosZ		= 0
					lineEndPosX			= 0
					lineEndPosY			= fullLineLength / 2
					lineEndPosZ			= 0
					gosub "3D line"
				del 1
			endif

			if ii = 1 then
				fullLineLength		= shapeSizeX
				add 0, shapeSizeY / 2 + arcSizeY, 0
					lineStartPosX		= -fullLineLength / 2
					lineStartPosY		= 0
					lineStartPosZ		= 0
					lineEndPosX			= fullLineLength / 2
					lineEndPosY			= 0
					lineEndPosZ			= 0
					gosub "3D line"
				del 1
			endif

			mulx -1
		next ii
		del 2

		muly -1
	next jj
	del 2

return


"halfoval contour 3D":

	! ======================================================================
	! Oval Contour 3D
	! ======================================================================

	iLineType			= LINETYPE_DASHED
	circleRadius		= c4dDetRadius
	fullArcAngle		= 90

	for jj = 1 to 2
		for ii = 1 to 2

			if jj = 1 then
				add 0, 0, 0
					mul arcSizeX / c4dDetRadius, arcSizeY / c4dDetRadius, 1
						gosub "3D arc"
					del 1
				del 1
			else
				add shapeSizeX / 2, 0, 0
					mul 1, 1, 1
						gosub "3D arc"
					del 1
				del 1
			endif

			if jj = 2 and ii = 1 then
				fullLineLength		= shapeSizeX
				add 0, c4dDetRadius, 0
					lineStartPosX		= -fullLineLength / 2
					lineStartPosY		= 0
					lineStartPosZ		= 0
					lineEndPosX			= fullLineLength / 2
					lineEndPosY			= 0
					lineEndPosZ			= 0
					gosub "3D line"
				del 1
			endif

			mulx -1
		next ii
		del 2

		muly -1
	next jj
	del 2

return


"draw sphere symbol":

	! ======================================================================
	! Draw Sphere Symbol
	! ======================================================================

	pen penSphere

	fullArcAngle	= 360
	iLineType		= LINETYPE_DASHED
	iArcScale		= 1
	gosub "3D arc"

	fullArcAngle	= 360 / (1 + c4dDetOnlyZ)

	roty -90
	rotz 90
		gosub "3D arc"
	del 2
	rotx -90
		gosub "3D arc"
	del 1

	iSymbolGeometry	= GEOMETRY_SPHERE
	if iEditingType = EDITTYPE_FALLOFF then			gosub "falloff distance editing"
	if iEditingType = EDITTYPE_NEARCLIPFROM then	gosub "near clip from editing"
	if iEditingType = EDITTYPE_NEARCLIPTO then		gosub "near clip to editing"
	if iEditingType = EDITTYPE_FARCLIPFROM then		gosub "far clip from editing"
	if iEditingType = EDITTYPE_FARCLIPTO then		gosub "far clip to editing"

return


"near clip from editing":

	! ======================================================================
	! Near Clip from Editing
	! ======================================================================

	if iSymbolGeometry = GEOMETRY_SPHERE then
		for ii = 1 to 1 + 3 * bFullEditing
			hotspot	0,	0,	0,				unID, c4dDetNearFrom,	1 + 128		: unID = unID + 1
			hotspot -1,	0,	0, 				unID, c4dDetNearFrom,	3			: unID = unID + 1
			hotspot c4dDetNearFrom,	0,	0,	unID, c4dDetNearFrom,	2			: unID = unID + 1

			rotz 90
		next ii
		del 1 + 3 * bFullEditing
	endif

	if bFullEditing | iSymbolGeometry <> GEOMETRY_SPHERE then
		for ii = 1 to 1 + (bFullEditing and iSymbolGeometry = GEOMETRY_SPHERE)
			hotspot	0,	0,	0,					unID, c4dDetNearFrom,	1 + 128		: unID = unID + 1
			hotspot 0,	0,	1,	 				unID, c4dDetNearFrom,	3			: unID = unID + 1
			hotspot 0,	0,	-c4dDetNearFrom,	unID, c4dDetNearFrom,	2			: unID = unID + 1

			roty 180
		next ii
		del 1 + (bFullEditing and iSymbolGeometry = GEOMETRY_SPHERE)
	endif

return


"near clip to editing":

	! ======================================================================
	! Near Clip to Editing
	! ======================================================================

	if iSymbolGeometry = GEOMETRY_SPHERE then
		for ii = 1 to 1 + 3 * bFullEditing
			hotspot	0,	0,	0,				unID, c4dDetNearTo,	1 + 128		: unID = unID + 1
			hotspot -1,	0,	0, 				unID, c4dDetNearTo,	3			: unID = unID + 1
			hotspot c4dDetNearTo,	0,	0,	unID, c4dDetNearTo,	2			: unID = unID + 1

			rotz 90
		next ii
		del 1 + 3 * bFullEditing
	endif

	if bFullEditing | iSymbolGeometry <> GEOMETRY_SPHERE then
		for ii = 1 to 1 + (bFullEditing and iSymbolGeometry = GEOMETRY_SPHERE)
			hotspot	0,	0,	0,				unID, c4dDetNearTo,	1 + 128		: unID = unID + 1
			hotspot 0,	0,	1,	 			unID, c4dDetNearTo,	3			: unID = unID + 1
			hotspot 0,	0,	-c4dDetNearTo,	unID, c4dDetNearTo,	2			: unID = unID + 1

			roty 180
		next ii
		del 1 + (bFullEditing and iSymbolGeometry = GEOMETRY_SPHERE)
	endif

return


"far clip from editing":

	! ======================================================================
	! Far Clip from Editing
	! ======================================================================

	if iSymbolGeometry = GEOMETRY_SPHERE then
		for ii = 1 to 1 + 3 * bFullEditing
			hotspot	0,	0,	0,				unID, c4dDetFarFrom,	1 + 128		: unID = unID + 1
			hotspot -1,	0,	0, 				unID, c4dDetFarFrom,	3			: unID = unID + 1
			hotspot c4dDetFarFrom,	0,	0,	unID, c4dDetFarFrom,	2			: unID = unID + 1

			rotz 90
		next ii
		del 1 + 3 * bFullEditing
	endif

	if bFullEditing | iSymbolGeometry <> GEOMETRY_SPHERE then
		for ii = 1 to 1 + (bFullEditing and iSymbolGeometry = GEOMETRY_SPHERE)
			hotspot	0,	0,	0,				unID, c4dDetFarFrom,	1 + 128		: unID = unID + 1
			hotspot 0,	0,	1,	 			unID, c4dDetFarFrom,	3			: unID = unID + 1
			hotspot 0,	0,	-c4dDetFarFrom,	unID, c4dDetFarFrom,	2			: unID = unID + 1

			roty 180
		next ii
		del 1 + (bFullEditing and iSymbolGeometry = GEOMETRY_SPHERE)
	endif

return


"far clip to editing":

	! ======================================================================
	! Far Clip to Editing
	! ======================================================================

	if iSymbolGeometry = GEOMETRY_SPHERE then
		for ii = 1 to 1 + 3 * bFullEditing
			hotspot	0,	0,	0,				unID, c4dDetFarTo,	1 + 128		: unID = unID + 1
			hotspot -1,	0,	0, 				unID, c4dDetFarTo,	3			: unID = unID + 1
			hotspot c4dDetFarTo,	0,	0,	unID, c4dDetFarTo,	2			: unID = unID + 1

			rotz 90
		next ii
		del 1 + 3 * bFullEditing
	endif

	if bFullEditing | iSymbolGeometry <> GEOMETRY_SPHERE then
		for ii = 1 to 1 + (bFullEditing and iSymbolGeometry = GEOMETRY_SPHERE)
			hotspot	0,	0,	0,				unID, c4dDetFarTo,	1 + 128		: unID = unID + 1
			hotspot 0,	0,	1,	 			unID, c4dDetFarTo,	3			: unID = unID + 1
			hotspot 0,	0,	-c4dDetFarTo,	unID, c4dDetFarTo,	2			: unID = unID + 1

			roty 180
		next ii
		del 1 + (bFullEditing and iSymbolGeometry = GEOMETRY_SPHERE)
	endif

return


"3D line":

	! ======================================================================
	! 3D Line
	! ======================================================================

	model wire
	if GLOB_CONTEXT > 20 and GLOB_CONTEXT < 40 then iLineType = LINETYPE_SIMPLE

	fullLineLength	= SQR((lineEndPosX - lineStartPosX)**2 + (lineEndPosY - lineStartPosY)**2 + (lineEndPosZ - lineStartPosZ)**2)

	if ABS(lineEndPosX - lineStartPosX) < EPS then
		if ABS(lineEndPosY - lineStartPosY) < EPS then
			lineRotZ = 0
		else
			if lineEndPosY > lineStartPosY then
				lineRotZ = 90
			else
				lineRotZ = -90
			endif
		endif
	else
		if ABS(lineEndPosY - lineStartPosY) < EPS then
			lineRotZ = 0
		else
			if lineEndPosX > lineStartPosX then
				if lineEndPosY > lineStartPosY then
					lineRotZ = ATN((lineEndPosY - lineStartPosY) / (lineEndPosX - lineStartPosX))
				else
					lineRotZ = ATN((lineEndPosY - lineStartPosY) / (lineEndPosX - lineStartPosX))
				endif
			else
				if lineEndPosY > lineStartPosY then
					lineRotZ = 180 + ATN((lineEndPosY - lineStartPosY) / (lineEndPosX - lineStartPosX))
				else
					lineRotZ = 180 + ATN((lineEndPosY - lineStartPosY) / (lineEndPosX - lineStartPosX))
				endif
			endif
		endif
	endif

	if ABS(lineEndPosZ - lineStartPosZ) < EPS then
		lineRotY		= 0
	else
		if lineEndPosZ > lineStartPosZ then
			if (ABS(lineEndPosX - lineStartPosX) < EPS and ABS(lineEndPosY - lineStartPosY) < EPS) then
				lineRotY = -90
			else
				lineRotY = -ATN(ABS(lineEndPosZ - lineStartPosZ) / SQR((lineEndPosX - lineStartPosX)**2 + (lineEndPosY - lineStartPosY)**2))
			endif
		else
			if (ABS(lineEndPosX - lineStartPosX) < EPS and ABS(lineEndPosY - lineStartPosY) < EPS) then
				lineRotY = 90
			else
				lineRotY = ATN(ABS(lineEndPosZ - lineStartPosZ) / SQR((lineEndPosX - lineStartPosX)**2 + (lineEndPosY - lineStartPosY)**2))
			endif
		endif
	endif

	if iLineType = LINETYPE_DASHED and fullLineLength > (dashedLineLength + tempSpaceLength) * 2 then
		dashedLineNum	= INT((fullLineLength + EPS) / (dashedLineLength + tempSpaceLength))
		spaceLength		= (fullLineLength - dashedLineNum * dashedLineLength) / (dashedLineNum - 1)

		add lineStartPosX, lineStartPosY, lineStartPosZ
		rotz lineRotZ
		roty lineRotY
			for li = 1 to dashedLineNum
				lin_ 0, 0, 0, dashedLineLength, 0, 0

				addx (dashedLineLength + spaceLength)
			next li
			del dashedLineNum
		del 3
	else
		lin_	lineStartPosX, lineStartPosY, lineStartPosZ,
				lineEndPosX, lineEndPosY, lineEndPosZ
	endif

return


"3D arc":

	! ======================================================================
	! 3D Arc
	! ======================================================================

	model wire
	if GLOB_CONTEXT > 20 and GLOB_CONTEXT < 40 then iLineType = LINETYPE_SIMPLE

	fullArcLength	= circleRadius * iArcScale * 2 * pi / 360 * fullArcAngle

	if circleRadius > EPS then
		if iLineType = LINETYPE_DASHED and (fullArcLength + dashedLineLength * (ABS(fullArcAngle - 360) < eps)) > (dashedLineLength + tempSpaceLength) * 2 then
			dashedLineNum	= INT((fullArcLength + dashedLineLength * (ABS(fullArcAngle - 360) < eps)) / (dashedLineLength + tempSpaceLength))
			spaceLength		= (fullArcLength + dashedLineLength * (ABS(fullArcAngle - 360) < eps) - dashedLineNum * dashedLineLength) / (dashedLineNum - 1)
			dashedLineAngle	= dashedLineLength * fullArcAngle / fullArcLength
			spaceAngle		= spaceLength * fullArcAngle / fullArcLength

			for li = 1 to dashedLineNum
				arc circleRadius, 0, dashedLineAngle

				rotz dashedLineAngle + spaceAngle
			next li
			del dashedLineNum
		else
			arc circleRadius, 0, fullArcAngle
		endif
	endif

return


"3D rect":

	! ======================================================================
	! 3D Rect
	! ======================================================================

	model wire

	add 0, -contourSizeY / 2, 0
		for ii = 1 to 2
			lineStartPosX		= -contourSizeX / 2
			lineStartPosY		= 0
			lineStartPosZ		= 0
			lineEndPosX			= contourSizeX / 2
			lineEndPosY			= 0
			lineEndPosZ			= 0
			gosub "3D line"

			addy contourSizeY
		next ii
		del 2
	del 1

	add -contourSizeX / 2, 0, 0
		for ii = 1 to 2
			lineStartPosX		= 0
			lineStartPosY		= -contourSizeY / 2
			lineStartPosZ		= 0
			lineEndPosX			= 0
			lineEndPosY			= contourSizeY / 2
			lineEndPosZ			= 0
			gosub "3D line"

			addx contourSizeX
		next ii
		del 2
	del 1

return


"crossHair symbol":

	! ======================================================================
	! Crosshair Symbol
	! ======================================================================

	pen penCrossHair

	lin_ -crossHairLineLengthHor / 2, 0, 0, crossHairLineLengthHor / 2, 0, 0
	lin_ 0, -crossHairLineLengthVer / 2 - crossHairLineLengthVer / 2 * (iC4dDetAreaShape = AREASHAPE_HEMISPHERE), 0, 0, crossHairLineLengthVer / 2, 0
	lin_ 0, 0, -crossHairLineLengthVer / 2, 0, 0, crossHairLineLengthVer / 2

return


"arrow symbol":

	! ======================================================================
	! Arrow Symbol
	! ======================================================================

	pen penTargetLine

	addz -targetLineLength3D
	rotz 45
		for ii = 1 to 4
			lin_ 0, 0, 0, arrowLineLength * COS(arrowAngle), 0, arrowLineLength * SIN(arrowAngle)

			rotz 90
		next ii
		del 4
	del 2

return


"falloff distance editing area":

	! ======================================================================
	! Area Falloff Distance Editing
	! ======================================================================

	for ii = 1 to 1 + bFullEditing
		addx falloffEditingStartX
			hotspot	0,				0,	0,	unID, c4dDetRadius,	1 + 128		: unID = unID + 1
			hotspot -1,				0,	0,	unID, c4dDetRadius, 3			: unID = unID + 1
			hotspot c4dDetRadius,	0,	0,	unID, c4dDetRadius, 2			: unID = unID + 1
		del 1

		mulx -1
	next ii
	del 1 + bFullEditing

	for ii = 1 to 1 + bFullEditing
		rotz 90
		addx falloffEditingStartY
			hotspot 0,					0,	0,	unID, falloffDist3DTempY,	1 + 128,	c4dDetRadius	: unID = unID + 1
			hotspot -1,					0,	0,	unID, falloffDist3DTempY,	3,			c4dDetRadius	: unID = unID + 1
			hotspot falloffDist3DTempY,	0,	0,	unID, falloffDist3DTempY,	2,			c4dDetRadius	: unID = unID + 1
		del 2

		muly -1
	next ii
	del 1 + bFullEditing

	for ii = 1 to 1 + (bFullEditing and NOT(c4dDetOnlyZ))
		roty -90
		addx -falloffEditingStartZ
			hotspot	0,				0,	0,	unID, c4dDetRadius,	1 + 128		: unID = unID + 1
			hotspot 1,				0,	0,	unID, c4dDetRadius, 3			: unID = unID + 1
			hotspot -c4dDetRadius,	0,	0,	unID, c4dDetRadius, 2			: unID = unID + 1
		del 2

		mulz -1
	next ii
	del 1 + (bFullEditing and NOT(c4dDetOnlyZ))

return


"falloff distance editing":

	! ======================================================================
	! Falloff Distance Editing
	! ======================================================================

	if bShowFalloffSymbol then
		if iSymbolGeometry = GEOMETRY_SPHERE then
			for ii = 1 to 1 + 3 * bFullEditing
				hotspot	0,				0,	0,	unID, c4dDetRadius,	1 + 128		: unID = unID + 1
				hotspot -1,				0,	0,	unID, c4dDetRadius, 3			: unID = unID + 1
				hotspot c4dDetRadius,	0,	0,	unID, c4dDetRadius, 2			: unID = unID + 1

				rotz 90
			next ii
			del 1 + 3 * bFullEditing
		endif

		if bFullEditing | iSymbolGeometry <> GEOMETRY_SPHERE then
			for ii = 1 to 1 + (bFullEditing and iSymbolGeometry = GEOMETRY_SPHERE and NOT(c4dDetOnlyZ))
				hotspot	0,	0,	0,				unID, c4dDetRadius,	1 + 128		: unID = unID + 1
				hotspot 0,	0,	1,	 			unID, c4dDetRadius, 3			: unID = unID + 1
				hotspot 0,	0,	-c4dDetRadius,	unID, c4dDetRadius, 2			: unID = unID + 1

				roty 180

			next ii
			del 1 + (bFullEditing and iSymbolGeometry = GEOMETRY_SPHERE)
		endif
	endif

return


"symbol rotation start":

	! ======================================================================
	! Symbol Rotation Start
	! ======================================================================

	if iSymbolRotationType = ROTTYPE_TARGETPOSITION then
		if bEnableLightRotation then
			if bShowRotationHotspot then
				gosub "light position editing"
				gosub "target position editing"
			endif

			add lightPosX, lightPosY, lightPosZ
			rotz coneRotZ
			roty coneRotY

			if bEnableZRotationIn3D then
				if bShowRotationHotspot then gosub "z rotation editing"
				rotz rotAngleZ
			endif
		endif
	else
		if bEnableLightRotation then
			if bShowRotationHotspot then gosub "x rotation editing"
			rotx 90 * bWindowLight
			rotx rotAngleX
		endif

		if bEnableZRotationIn3D then
			if bShowRotationHotspot then gosub "z rotation editing"
			rotz rotAngleZ
		endif
	endif

return


"x rotation editing":

	! ======================================================================
	! X Rotaiton Editing
	! ======================================================================

	if bWindowLight then
		addx c4dDetAreaX / 2
			hotspot 0,	0,									c4dDetAreaY / 2,					unID, rotAngleX, 4 + 128	: unID = unID + 1
			hotspot 0,	0,									0,									unID, rotAngleX, 6			: unID = unID + 1
			hotspot 1,	0,									0,									unID, rotAngleX, 7			: unID = unID + 1
			hotspot 0,	-c4dDetAreaY / 2 * SIN(rotAngleX),	c4dDetAreaY / 2 * COS(rotAngleX),	unID, rotAngleX, 5			: unID = unID + 1
		del 1
	else
		hotspot 0,	0,										-targetLineLength3D,					unID, rotAngleX, 4 + 128	: unID = unID + 1
		hotspot 0,	0,										0,										unID, rotAngleX, 6			: unID = unID + 1
		hotspot 1,	0,										0,										unID, rotAngleX, 7			: unID = unID + 1
		hotspot 0,	targetLineLength3D * SIN(rotAngleX),	-targetLineLength3D * COS(rotAngleX),	unID, rotAngleX, 5			: unID = unID + 1
	endif
return


"z rotation editing":

	! ======================================================================
	! Z Rotaiton Editing
	! ======================================================================

	if iC4dDetAreaShape = AREASHAPE_HEMISPHERE then
		zRotationDist	= crossHairLineLength
	else
		zRotationDist	= sizeAreaYHalf
	endif

	addz c4dDetAreaZ / 2 * (iC4dDetAreaShape = AREASHAPE_CUBE)
		hotspot 0,	-zRotationDist,		0, unID, rotAngleZ, 4 + 128										: unID = unID + 1
		hotspot 0,	0, 					0, unID, rotAngleZ, 6											: unID = unID + 1
		hotspot 0,	0,					1, unID, rotAngleZ, 7											: unID = unID + 1
		hotspot zRotationDist * SIN(rotAngleZ), -zRotationDist * COS(rotAngleZ), 0, unID, rotAngleZ, 5	: unID = unID + 1
	del 1

return


"symbol rotation end":

	! ======================================================================
	! Symbol Rotation End
	! ======================================================================

	if iSymbolRotationType = ROTTYPE_TARGETPOSITION then
		if bEnableLightRotation then del 3
		if bEnableZRotationIn3D then del 1
	else
		if bEnableLightRotation then del 1 + bWindowLight
		if bEnableZRotationIn3D then del 1
	endif

return

