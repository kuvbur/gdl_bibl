
EPS = 0.00001	! minimum epsilon for Layout View (Scale=1:1)

! iMarkerObjectType
MARKER_OBJECT_TYPE_DETAIL		= 1
MARKER_OBJECT_TYPE_WORKSHEET	= 2
MARKER_OBJECT_TYPE_CHANGE		= 3

! AC_Component values
HEAD_ONLY		= 0
CLOUD_ONLY		= 1
HEAD_AND_CLOUD	= 2


bEnableFillCloud = (iMarkerObjectType = MARKER_OBJECT_TYPE_CHANGE)

if (iMarkerObjectType = MARKER_OBJECT_TYPE_CHANGE) then
	_RefCoord_X	= 0
	_RefCoord_Y = 0

	gs_ref_pos_X = 0
	gs_ref_pos_Y = 0

	_hasHead = 0
	if AC_Component = HEAD_ONLY | AC_Component = HEAD_AND_CLOUD then
		_hasHead = 1
	endif
	
	_hasPolygon = 0
	if AC_Component = CLOUD_ONLY | AC_Component = HEAD_AND_CLOUD then
		_hasPolygon = 1
	endif

else
	AC_PolygonNodes		= AC_ClippNodes
	AC_PolygonCoords	= AC_ClippCoord

	_RefCoord_X	= RefCoord_X
	_RefCoord_Y = RefCoord_Y

	_hasHead = 1
	_hasPolygon = 0
	if AC_ShowBoundary = 1 then
		_hasPolygon = 1
	endif

	bDivisionLine =	(bShowDetailNameInSecondRow |\
					 bShowLayoutID |\
					 bShowSecondCustomText)

	contentFirstRow = ""
	if not(AC_NoLinkMarker) then
		if bShowReferenceID then
			if AC_MarkerText_1 <> "" then
				contentFirstRow = contentFirstRow + AC_MarkerText_1
			endif
		endif
		if bShowDetailNameInFirstRow then
			if AC_MarkerText_2 <> "" then
				if contentFirstRow <> "" then
					stSeparator = " "
				else
					stSeparator = ""
				endif
				contentFirstRow = contentFirstRow + stSeparator + AC_MarkerText_2
			endif
		endif
		if bShowDrawingID & AC_ReferToDrawing then
			if contentFirstRow <> "" then
				stSeparator = " "
			else
				stSeparator = ""
			endif
			contentFirstRow = contentFirstRow + stSeparator + "<MARKERDRAWINGNUMBER_R>" + AC_DrawingGUID
		endif
	endif
	if bShowFirstCustomText then
		if firstCustomText <> "" then
			if contentFirstRow <> "" then
				stSeparator = " "
			else
				stSeparator = ""
			endif
			contentFirstRow = contentFirstRow + stSeparator + firstCustomText
		endif
	endif

	contentSecondRow = ""
	if not(AC_NoLinkMarker) then
		if bShowDetailNameInSecondRow then
			if AC_MarkerText_2 <> "" then
				contentSecondRow = contentSecondRow + AC_MarkerText_2
			endif
		endif
		if bShowLayoutID & AC_ReferToDrawing then
			if contentSecondRow <> "" then
				stSeparator = " "
			else
				stSeparator = ""
			endif
			contentSecondRow = contentSecondRow + stSeparator + "<MARKERSHEETNUMBER_R>" + AC_DrawingGUID
		endif
	endif
	if bShowSecondCustomText then
		if secondCustomText <> "" then
			if contentSecondRow <> "" then
				stSeparator = " "
			else
				stSeparator = ""
			endif
			contentSecondRow = contentSecondRow + stSeparator + secondCustomText
		endif
	endif

	if GLOB_MODPAR_NAME = "gs_ref_pos_X" then
		gs_pos_X = gs_ref_pos_X + RefCoord_X 
		parameters gs_pos_X = gs_ref_pos_X + RefCoord_X 
	else
		gs_ref_pos_X = gs_pos_X - RefCoord_X
		parameters gs_ref_pos_X = gs_pos_X - RefCoord_X
	endif

	if GLOB_MODPAR_NAME = "gs_ref_pos_Y" then
		gs_pos_Y = gs_ref_pos_Y + RefCoord_Y
		parameters gs_pos_Y = gs_ref_pos_Y + RefCoord_Y
	else
		gs_ref_pos_Y = gs_pos_Y - RefCoord_Y
		parameters gs_ref_pos_Y = gs_pos_Y - RefCoord_Y
	endif
endif


if ((iMarkerObjectType = MARKER_OBJECT_TYPE_CHANGE) & not(_hasHead)) |\
	((iMarkerObjectType = MARKER_OBJECT_TYPE_DETAIL | iMarkerObjectType = MARKER_OBJECT_TYPE_WORKSHEET) & not(_hasPolygon))  then
	bConnectionLine = 0
	lock "bConnectionLine"
	hideparameter "bConnectionLine"
endif

! ==============================================================================
! Localization
! ==============================================================================

dim strTypeCloud[5]
	strTypeCloud[1] = `Ограничивающий Многоугольник`
	strTypeCloud[2] = `Скругление Ограничивающего Полигона`
	strTypeCloud[3] = `Одинаковый Радиус`
	strTypeCloud[4] = `Одинаковое Соотношение`
	strTypeCloud[5] = `Случайный Радиус`

CLOUD_POLYGON 	= 1
CLOUD_ROUNDED 	= 2
CLOUD_BISCUIT 	= 3
CLOUD_PERIODIC 	= 4
CLOUD_RANDOM 	= 5

dim _stShapeHead[13]
	_stShapeHead[1] = `Без символа`
	_stShapeHead[2] = `Окружность`
	_stShapeHead[3] = `Треугольник Вверх`
	_stShapeHead[4] = `Треугольник Вниз`
	_stShapeHead[5] = `Прямоугольник`
	_stShapeHead[6] = `Пятиугольник Вверх`
	_stShapeHead[7] = `Пятиугольник Вниз`
	_stShapeHead[8] = `Шестиугольник`
	_stShapeHead[9] = `Шестиугольник Повернутый`
	_stShapeHead[10] = `Восьмиугольник`
	_stShapeHead[11] = `Восьмиугольник Повернутый`
	_stShapeHead[12] = `Ромб`
	_stShapeHead[13] = `Линия`


MARKER_HEAD_NONE 			= 1
MARKER_HEAD_CIRCLE 			= 2
MARKER_HEAD_TRIANGLE_UP 	= 3
MARKER_HEAD_TRIANGLE_DOWN 	= 4
MARKER_HEAD_RECTANGLE 		= 5
MARKER_HEAD_PENTAGON_UP 	= 6
MARKER_HEAD_PENTAGON_DOWN 	= 7
MARKER_HEAD_HEXAGON 		= 8
MARKER_HEAD_HEXAGON_ROTATED = 9
MARKER_HEAD_OCTOGON 		= 10
MARKER_HEAD_OCTOGON_ROTATED = 11
MARKER_HEAD_DIAMOND 		= 12
MARKER_HEAD_LINE 			= 13

dim _stRotateHead[2]
	_stRotateHead[1] = `Автоматически`
	_stRotateHead[2] = `Всегда Горизонтально`

! iRotateHead
HEAD_ROTATED 	= 1
HEAD_HORIZONTAL = 2


dim _stHeadLineType[2]
	_stHeadLineType[1] = `с Разрывом`
	_stHeadLineType[2] = `Прямой`

LINE_BREAKPOINT = 1
LINE_STRAIGHT 	= 2

HEAD_SIZE_SIDE = 1
HEAD_SIZE_UP = 2
HEAD_SIZE_DOWN = 3


if iShapeHead = MARKER_HEAD_LINE then
	bDivisionLine = 1
	iConnectionLine = LINE_BREAKPOINT
endif


! ==============================================================================
! Autotext descript and value
! ==============================================================================

if (iMarkerObjectType = MARKER_OBJECT_TYPE_CHANGE) then
	AUTOTEXT_DESC = 1
	AUTOTEXT_KEY = 2

	dim _sAutotextMenu[7][2]
	_sAutotextMenu[1][AUTOTEXT_DESC] = `ID Изменения`
	_sAutotextMenu[1][AUTOTEXT_KEY] = "<CHANGEID>"

	_sAutotextMenu[2][AUTOTEXT_DESC] = `Имя Изменения`
	_sAutotextMenu[2][AUTOTEXT_KEY] = "<CHANGEDESCRIPTION>"

	_sAutotextMenu[3][AUTOTEXT_DESC] = `ID Редакции`
	_sAutotextMenu[3][AUTOTEXT_KEY] = "<REVISIONID>"

	_sAutotextMenu[4][AUTOTEXT_DESC] = `ID Выпуска`
	_sAutotextMenu[4][AUTOTEXT_KEY] = "<ISSUEID>"

	_sAutotextMenu[5][AUTOTEXT_DESC] = `Имя Выпуска`
	_sAutotextMenu[5][AUTOTEXT_KEY] = "<ISSUEDESCRIPTION>"

	_sAutotextMenu[6][AUTOTEXT_DESC] = `Дата Выпуска`
	_sAutotextMenu[6][AUTOTEXT_KEY] = "<ISSUEDATE>"

	_sAutotextMenu[7][AUTOTEXT_DESC] = `Выпустил`
	_sAutotextMenu[7][AUTOTEXT_KEY] = "<ISSUEDBY>"

	_numAutotextMenu = vardim1(_sAutotextMenu)

	dim _contentText[8]
		_contentText[1] = `Добавить Автотекст`
	dim _icontentText[8]
		_icontentText[1] = 1

	for iDim = 1 to _numAutotextMenu
		_contentText[1+iDim] = _sAutotextMenu[iDim][AUTOTEXT_DESC]
		_icontentText[1+iDim] = 1 + iDim
	next iDim
endif


! =========================================================================
! Calculations
! =========================================================================

dim _lengthVector[]
dim _angleVector[]
dim _angVectorSide[]
dim _maxDistTangentPoint[]
dim _distancePointfromOrigo[]

if _hasPolygon then

	! Polygon vectors length and angle 
	! =========================================================================

	for k = 1 to AC_PolygonNodes - 1
		vx2 = AC_PolygonCoords[k+1][1]
		vy2 = AC_PolygonCoords[k+1][2]

		vx1 = AC_PolygonCoords[k][1]
		vy1 = AC_PolygonCoords[k][2]

		! calculate the length of vector
		! --------------------------------------
		gosub "calculation_vector_length"
		_lengthVector[k] = _templengthVector

		! calculate the angle of vector
		! --------------------------------------
		vx = AC_PolygonCoords[k+1][1] - AC_PolygonCoords[k][1]
		vy = AC_PolygonCoords[k+1][2] - AC_PolygonCoords[k][2]
		gosub "check_vector_direction_angle"
		_angleVector[k] = angle

	next k


	! Rounded Polygons first cloud radius calculations for hotspot
	! =========================================================================

	! initialization
	_anglebyMaxRadius = 90
	_maxUsableRadius = 9999

	if iTypeCloud = CLOUD_ROUNDED then

		_maxTangent = 0
		_placeMaxRadius = 1

		! -----------------------------------------------------
		! find the maximum Cloud radius
		! calculate the distance from peak to the tangent point
		! calculate the angle from peak between two nearby vector
		! -----------------------------------------------------

		for iCalcPoint = 1 to AC_PolygonNodes - 1

			if iCalcPoint = 1 then
				xcoordLast 	= AC_PolygonCoords[AC_PolygonNodes - 1][1]
				ycoordLast 	= AC_PolygonCoords[AC_PolygonNodes - 1][2]
				lvectorLast = _lengthVector[AC_PolygonNodes - 1]
			else
				xcoordLast 	= AC_PolygonCoords[iCalcPoint-1][1]
				ycoordLast 	= AC_PolygonCoords[iCalcPoint-1][2]
				lvectorLast = _lengthVector[iCalcPoint - 1]
			endif

			! calculate the distance from peak to the tangent point
			! -----------------------------------------------------
			_maxDistTangentPoint[iCalcPoint] = min(_lengthVector[iCalcPoint], lvectorLast)/2
			if _maxTangent < _maxDistTangentPoint[iCalcPoint] then
				_maxTangent = _maxDistTangentPoint[iCalcPoint]
				_placeMaxRadius = iCalcPoint
			endif

			! calculate the angle between two vector
			! --------------------------------------
			vx1 = xcoordLast - AC_PolygonCoords[iCalcPoint][1]
			vy1 = ycoordLast - AC_PolygonCoords[iCalcPoint][2]
			vx2 = AC_PolygonCoords[iCalcPoint+1][1] - AC_PolygonCoords[iCalcPoint][1]
			vy2 = AC_PolygonCoords[iCalcPoint+1][2] - AC_PolygonCoords[iCalcPoint][2]
			vl1 = lvectorLast
			vl2 = _lengthVector[iCalcPoint]
			gosub "two_vector_side_angle"
			_angVectorSide[iCalcPoint] = angle

		next iCalcPoint

		! set Radius maximum if available
		_anglebyMaxRadius 	= _angVectorSide[_placeMaxRadius]/2
		_maxUsableRadius = tan(_angVectorSide[_placeMaxRadius]/2) * _maxDistTangentPoint[_placeMaxRadius]

	endif

	if iTypeCloud = CLOUD_RANDOM then

		! Polygon vector's beginning point distance from origo 
		! =========================================================================

		for k = 1 to AC_PolygonNodes - 1
			vx2 = 0
			vy2 = 0

			vx1 = AC_PolygonCoords[k][1]
			vy1 = AC_PolygonCoords[k][2]

			! calculate the length of vector
			! --------------------------------------
			gosub "calculation_vector_length"
			_distancePointfromOrigo[k] = _templengthVector
		next k

	endif

endif


goto "MasterEnd"

! ==============================================================================
! Vector length
! ------------------------------------------------------------------------------
! Input variables:
!	vx, vy:				vector
!
! Returned variables:
!	_lengthVector:	length of vector
! ==============================================================================
"calculation_vector_length" :

	_templengthVector = SQR((vx2 - vx1)^2 + (vy2 - vy1)^2)


return

! ==============================================================================
! Direction Angle
! ------------------------------------------------------------------------------
! Input variables:
!	vx, vy:				vector
!
! Returned variables:
!	angle:				selected intersection point
! ==============================================================================

"check_vector_direction_angle":

	if abs(vx) < EPS & abs(vy) < EPS then
		angle = 0
		return
	endif

	if abs(vx) < EPS then
		if vy > 0 then
			angle = 90
		else
			angle = 270
		endif
	else
		angle = atn(vy / vx)
		if vx >= 0 then
			if angle < 0 then
				angle = angle + 360
			endif
		else
			angle = 180 + angle
		endif
	endif

return

! ==============================================================================
! Angle between two vectors
! ------------------------------------------------------------------------------
! Input variables:
!	vx1, vy1:				vector 1
!	vx2, vy2:				vector 2
!	vl1:					length of vector 1
!	vl2:					length of vector 2
!
! Returned variables:
!	angle:				selected intersection point
! ==============================================================================
"two_vector_side_angle":

	scalarproduct = (vx1 * vx2) + (vy1 * vy2)

	if abs(scalarproduct) > EPS & abs(scalarproduct) < abs(vl2 * vl1) then
		angleRange = scalarproduct  /(vl2 * vl1)

		angle = ACS(angleRange)
	else
		angle = 90
	endif

return

"MasterEnd":
