
unIDoffset	= 1
unIDap		= 10
unID		= 100
bFeedBack	= (GLOB_CONTEXT > 19)

paperToModel = GLOB_SCALE / 1000
modelToPaper = 1000 / GLOB_SCALE

! ==============================================================================
! Scales and Variables
! ==============================================================================

dim orders[]

_iScale = SCALE_INSENSITIVE

if bScaleSensitive then
	_iScale = SCALE_200
	if GLOB_SCALE < 100 + eps then _iScale = SCALE_100
	if GLOB_SCALE < 50  + eps then _iScale = SCALE_50

	if _iScale = SCALE_50 then
		nOrder					= nOrder_50
		orders					= orders_50
		bDisplayInsideBox		= bDisplayInsideBox_50
		bShowZoneCatCode		= bShowZoneCatCode_50
		bShowID					= bShowID_50
		bShowApartmentID		= bShowApartmentID_50
		bShowApartmentCode		= bShowApartmentCode_50
		bShowStaircaseCode		= bShowStaircaseCode_50
		bShowPosition			= bShowPosition_50
		bShowHouseNumber		= bShowHouseNumber_50
		apartmentIdFrame		= apartmentIdFrame_50
		iApartmentIdFrame		= iApartmentIdFrame_50
		apartmentIDoffsetX		= apartmentIDoffsetX_50
		apartmentIDoffsetY		= apartmentIDoffsetY_50
		apartmentIDangle		= apartmentIDangle_50
		offsetX					= offsetX_50
		offsetY					= offsetY_50
		bShowClassification		= bShowClassification_50
		bShowDimensionUnits		= bShowDimensionUnits_50
		bShowSuperScript		= bShowSuperScript_50
		bShowMeasuredArea		= bShowMeasuredArea_50
		bShowMeasuredNetArea	= bShowMeasuredNetArea_50
		bShowVentArea			= bShowVentArea_50
		bShowReducedArea		= bShowReducedArea_50
		bShowCalculatedArea		= bShowCalculatedArea_50
		fontScaleType			= fontScaleType_50
		iFontScaleType			= iFontScaleType_50
		bAutomaticLineSpace		= bAutomaticLineSpace_50
		lineSpacing				= lineSpacing_50
		fontTitleType			= fontTitleType_50
		fontTitleSizePaper		= fontTitleSizePaper_50
		fontTitleSizeModel		= fontTitleSizeModel_50
		bFontTitleBold			= bFontTitleBold_50
		bFontTitleItalic		= bFontTitleItalic_50
		bFontTitleUnder			= bFontTitleUnder_50
		bFontTitleStrike		= bFontTitleStrike_50
		fontTitle2Type			= fontTitle2Type_50
		fontTitle2SizePaper		= fontTitle2SizePaper_50
		fontTitle2SizeModel		= fontTitle2SizeModel_50
		bFontTitle2Bold			= bFontTitle2Bold_50
		bFontTitle2Italic		= bFontTitle2Italic_50
		bFontTitle2Under		= bFontTitle2Under_50
		bFontTitle2Strike		= bFontTitle2Strike_50
		fontDataType			= fontDataType_50
		fontDataSizePaper		= fontDataSizePaper_50
		fontDataSizeModel		= fontDataSizeModel_50
		bFontDataBold			= bFontDataBold_50
		bFontDataItalic			= bFontDataItalic_50
		bFontDataUnder			= bFontDataUnder_50
		bFontDataStrike			= bFontDataStrike_50
		bBackFill				= bBackFill_50
		fillType				= fillType_50
		fillPen					= fillPen_50
		fillBackPen				= fillBackPen_50
		iFrameStyle				= iFrameStyle_50
		framePen				= framePen_50
		frameLineType			= frameLineType_50
		bFixWidth				= bFixWidth_50
		fixWidth				= fixWidth_50
		iAlignTexts				= iAlignTexts_50
		iAlignNumericalValues	= iAlignNumericalValues_50
		iAlignStringValues		= iAlignStringValues_50
		bFixRadius				= bFixRadius_50
		frameRadius				= frameRadius_50
		bPointer				= bPointer_50
		ltPointer				= ltPointer_50
		penPointer				= penPointer_50
		iPointerAnchor			= iPointerAnchor_50
		iPointerSide			= iPointerSide_50
		pointerOffsetX			= pointerOffsetX_50
		pointerOffsetY			= pointerOffsetY_50
		pointerHorDist			= pointerHorDist_50
		bArrowhead				= bArrowhead_50
		iArrowHeadType			= iArrowHeadType_50
		penArrowhead			= penArrowhead_50
		bShowZoneNameLine1		= bShowZoneNameLine1_50
		bShowZoneNameLine2		= bShowZoneNameLine2_50
		bShowZoneNum			= bShowZoneNum_50
		bShowZoneNum2			= bShowZoneNum2_50
		bShowZoneNum3			= bShowZoneNum3_50
		bShowApartmentName		= bShowApartmentName_50
		bShowFunctions			= bShowFunctions_50
		bShowFloor				= bShowFloor_50
		bShowWallFinish			= bShowWallFinish_50
		bShowCeiling			= bShowCeiling_50
		bShowHeightZone			= bShowHeightZone_50
		bShowHeightFloor		= bShowHeightFloor_50
		bShowWindowArea			= bShowWindowArea_50
		bShowPerimeter			= bShowPerimeter_50
		bShowCeilingHeight		= bShowCeilingHeight_50
		bShowVolume				= bShowVolume_50
		bShowShortTitle			= bShowShortTitle_50
		bShowOnormData			= bShowOnormData_50
		bShowExistFloor			= bShowExistFloor_50
		bShowExistArea			= bShowExistArea_50
		bShowCustom1			= bShowCustom1_50
		bShowCustom2			= bShowCustom2_50
		bShowCustom3			= bShowCustom3_50
		bShowAdditionalTags		= bShowAdditionalTags_50
		iTncDisplayData			= iTncDisplayData_50
	endif

	if _iScale = SCALE_100 then
		nOrder					= nOrder_100
		orders					= orders_100
		bDisplayInsideBox		= bDisplayInsideBox_100
		bShowZoneCatCode		= bShowZoneCatCode_100
		bShowID					= bShowID_100
		bShowApartmentID		= bShowApartmentID_100
		bShowApartmentCode		= bShowApartmentCode_100
		bShowStaircaseCode		= bShowStaircaseCode_100		
		bShowPosition			= bShowPosition_100
		bShowHouseNumber		= bShowHouseNumber_100
		apartmentIdFrame		= apartmentIdFrame_100
		iApartmentIdFrame		= iApartmentIdFrame_100
		apartmentIDoffsetX		= apartmentIDoffsetX_100
		apartmentIDoffsetY		= apartmentIDoffsetY_100
		apartmentIDangle		= apartmentIDangle_100
		offsetX					= offsetX_100
		offsetY					= offsetY_100
		bShowClassification		= bShowClassification_100
		bShowDimensionUnits		= bShowDimensionUnits_100
		bShowSuperScript		= bShowSuperScript_100
		bShowMeasuredArea		= bShowMeasuredArea_100
		bShowMeasuredNetArea	= bShowMeasuredNetArea_100
		bShowVentArea			= bShowVentArea_100
		bShowReducedArea		= bShowReducedArea_100
		bShowCalculatedArea		= bShowCalculatedArea_100
		fontScaleType			= fontScaleType_100
		iFontScaleType			= iFontScaleType_100
		bAutomaticLineSpace		= bAutomaticLineSpace_100
		lineSpacing				= lineSpacing_100
		fontTitleType			= fontTitleType_100
		fontTitleSizePaper		= fontTitleSizePaper_100
		fontTitleSizeModel		= fontTitleSizeModel_100
		bFontTitleBold			= bFontTitleBold_100
		bFontTitleItalic		= bFontTitleItalic_100
		bFontTitleUnder			= bFontTitleUnder_100
		bFontTitleStrike		= bFontTitleStrike_100
		fontTitle2Type			= fontTitle2Type_100
		fontTitle2SizePaper		= fontTitle2SizePaper_100
		fontTitle2SizeModel		= fontTitle2SizeModel_100
		bFontTitle2Bold			= bFontTitle2Bold_100
		bFontTitle2Italic		= bFontTitle2Italic_100
		bFontTitle2Under		= bFontTitle2Under_100
		bFontTitle2Strike		= bFontTitle2Strike_100
		fontDataType			= fontDataType_100
		fontDataSizePaper		= fontDataSizePaper_100
		fontDataSizeModel		= fontDataSizeModel_100
		bFontDataBold			= bFontDataBold_100
		bFontDataItalic			= bFontDataItalic_100
		bFontDataUnder			= bFontDataUnder_100
		bFontDataStrike			= bFontDataStrike_100
		bBackFill				= bBackFill_100
		fillType				= fillType_100
		fillPen					= fillPen_100
		fillBackPen				= fillBackPen_100
		iFrameStyle				= iFrameStyle_100
		framePen				= framePen_100
		frameLineType			= frameLineType_100
		bFixWidth				= bFixWidth_100
		fixWidth				= fixWidth_100
		iAlignTexts				= iAlignTexts_100
		iAlignNumericalValues	= iAlignNumericalValues_100
		iAlignStringValues		= iAlignStringValues_100
		bFixRadius				= bFixRadius_100
		frameRadius				= frameRadius_100
        bPointer				= bPointer_100
		ltPointer				= ltPointer_100
		penPointer				= penPointer_100
		iPointerAnchor			= iPointerAnchor_100
		iPointerSide			= iPointerSide_100
		pointerOffsetX			= pointerOffsetX_100
		pointerOffsetY			= pointerOffsetY_100
		pointerHorDist			= pointerHorDist_100
		bArrowhead				= bArrowhead_100
		iArrowHeadType			= iArrowHeadType_100
		penArrowhead			= penArrowhead_100
		bShowZoneNameLine1		= bShowZoneNameLine1_100
		bShowZoneNameLine2		= bShowZoneNameLine2_100
		bShowZoneNum			= bShowZoneNum_100
		bShowZoneNum2			= bShowZoneNum2_100
		bShowZoneNum3			= bShowZoneNum3_100
		bShowApartmentName		= bShowApartmentName_100
		bShowFunctions			= bShowFunctions_100
		bShowFloor				= bShowFloor_100
		bShowWallFinish			= bShowWallFinish_100
		bShowCeiling			= bShowCeiling_100
		bShowHeightZone			= bShowHeightZone_100
		bShowHeightFloor		= bShowHeightFloor_100
		bShowWindowArea			= bShowWindowArea_100
		bShowPerimeter			= bShowPerimeter_100
		bShowCeilingHeight		= bShowCeilingHeight_100
		bShowVolume				= bShowVolume_100
		bShowShortTitle			= bShowShortTitle_100
		bShowOnormData			= bShowOnormData_100
		bShowExistFloor			= bShowExistFloor_100
		bShowExistArea			= bShowExistArea_100
		bShowCustom1			= bShowCustom1_100
		bShowCustom2			= bShowCustom2_100
		bShowCustom3			= bShowCustom3_100
		bShowAdditionalTags		= bShowAdditionalTags_100
		iTncDisplayData			= iTncDisplayData_100
	endif

	if _iScale = SCALE_200 then
		nOrder					= nOrder_200
		orders					= orders_200
		bDisplayInsideBox		= bDisplayInsideBox_200
		bShowZoneCatCode		= bShowZoneCatCode_200
		bShowID					= bShowID_200
		bShowApartmentID		= bShowApartmentID_200
		bShowApartmentCode		= bShowApartmentCode_200
		bShowStaircaseCode		= bShowStaircaseCode_200		
		bShowPosition			= bShowPosition_200
		bShowHouseNumber		= bShowHouseNumber_200
		apartmentIdFrame		= apartmentIdFrame_200
		iApartmentIdFrame		= iApartmentIdFrame_200
		apartmentIDoffsetX		= apartmentIDoffsetX_200
		apartmentIDoffsetY		= apartmentIDoffsetY_200
		apartmentIDangle		= apartmentIDangle_200
		offsetX					= offsetX_200
		offsetY					= offsetY_200
		bShowClassification		= bShowClassification_200
		bShowDimensionUnits		= bShowDimensionUnits_200
		bShowSuperScript		= bShowSuperScript_200
		bShowMeasuredArea		= bShowMeasuredArea_200
		bShowMeasuredNetArea	= bShowMeasuredNetArea_200
		bShowVentArea			= bShowVentArea_200
		bShowReducedArea		= bShowReducedArea_200
		bShowCalculatedArea		= bShowCalculatedArea_200
		fontScaleType			= fontScaleType_200
		iFontScaleType			= iFontScaleType_200
		bAutomaticLineSpace		= bAutomaticLineSpace_200
		lineSpacing				= lineSpacing_200
		fontTitleType			= fontTitleType_200
		fontTitleSizePaper		= fontTitleSizePaper_200
		fontTitleSizeModel		= fontTitleSizeModel_200
		bFontTitleBold			= bFontTitleBold_200
		bFontTitleItalic		= bFontTitleItalic_200
		bFontTitleUnder			= bFontTitleUnder_200
		bFontTitleStrike		= bFontTitleStrike_200
		fontTitle2Type			= fontTitle2Type_200
		fontTitle2SizePaper		= fontTitle2SizePaper_200
		fontTitle2SizeModel		= fontTitle2SizeModel_200
		bFontTitle2Bold			= bFontTitle2Bold_200
		bFontTitle2Italic		= bFontTitle2Italic_200
		bFontTitle2Under		= bFontTitle2Under_200
		bFontTitle2Strike		= bFontTitle2Strike_200
		fontDataType			= fontDataType_200
		fontDataSizePaper		= fontDataSizePaper_200
		fontDataSizeModel		= fontDataSizeModel_200
		bFontDataBold			= bFontDataBold_200
		bFontDataItalic			= bFontDataItalic_200
		bFontDataUnder			= bFontDataUnder_200
		bFontDataStrike			= bFontDataStrike_200
		bBackFill				= bBackFill_200
		fillType				= fillType_200
		fillPen					= fillPen_200
		fillBackPen				= fillBackPen_200
		iFrameStyle				= iFrameStyle_200
		framePen				= framePen_200
		frameLineType			= frameLineType_200
		bFixWidth				= bFixWidth_200
		fixWidth				= fixWidth_200
		iAlignTexts				= iAlignTexts_200
		iAlignNumericalValues	= iAlignNumericalValues_200
		iAlignStringValues		= iAlignStringValues_200
		bFixRadius				= bFixRadius_200
		frameRadius				= frameRadius_200
        bPointer				= bPointer_200
		ltPointer				= ltPointer_200
		penPointer				= penPointer_200
		iPointerAnchor			= iPointerAnchor_200
		iPointerSide			= iPointerSide_200
		pointerOffsetX			= pointerOffsetX_200
		pointerOffsetY			= pointerOffsetY_200
		pointerHorDist			= pointerHorDist_200
		bArrowhead				= bArrowhead_200
		iArrowHeadType			= iArrowHeadType_200
		penArrowhead			= penArrowhead_200
		bShowZoneNameLine1		= bShowZoneNameLine1_200
		bShowZoneNameLine2		= bShowZoneNameLine2_200
		bShowZoneNum			= bShowZoneNum_200
		bShowZoneNum2			= bShowZoneNum2_200
		bShowZoneNum3			= bShowZoneNum3_200
		bShowApartmentName		= bShowApartmentName_200
		bShowFunctions			= bShowFunctions_200
		bShowFloor				= bShowFloor_200
		bShowWallFinish			= bShowWallFinish_200
		bShowCeiling			= bShowCeiling_200
		bShowHeightZone			= bShowHeightZone_200
		bShowHeightFloor		= bShowHeightFloor_200
		bShowWindowArea			= bShowWindowArea_200
		bShowPerimeter			= bShowPerimeter_200
		bShowCeilingHeight		= bShowCeilingHeight_200
		bShowVolume				= bShowVolume_200
		bShowShortTitle			= bShowShortTitle_200
		bShowOnormData			= bShowOnormData_200
		bShowExistFloor			= bShowExistFloor_200
		bShowExistArea			= bShowExistArea_200
		bShowCustom1			= bShowCustom1_200
		bShowCustom2			= bShowCustom2_200
		bShowCustom3			= bShowCustom3_200
		bShowAdditionalTags		= bShowAdditionalTags_200
		iTncDisplayData			= iTncDisplayData_200
	endif

else

	nOrder					= nOrder_0
	orders					= orders_0
	bDisplayInsideBox		= bDisplayInsideBox_0
	bShowZoneCatCode		= bShowZoneCatCode_0
	bShowID					= bShowID_0
	bShowApartmentID		= bShowApartmentID_0
	bShowApartmentCode		= bShowApartmentCode_0
	bShowStaircaseCode		= bShowStaircaseCode_0	
	bShowPosition			= bShowPosition_0
	bShowHouseNumber		= bShowHouseNumber_0
	apartmentIdFrame		= apartmentIdFrame_0
	iApartmentIdFrame		= iApartmentIdFrame_0
	apartmentIDoffsetX		= apartmentIDoffsetX_0
	apartmentIDoffsetY		= apartmentIDoffsetY_0
	apartmentIDangle		= apartmentIDangle_0
	offsetX					= offsetX_0
	offsetY					= offsetY_0
	bShowClassification		= bShowClassification_0
	bShowDimensionUnits		= bShowDimensionUnits_0
	bShowSuperScript		= bShowSuperScript_0
	bShowMeasuredArea		= bShowMeasuredArea_0
	bShowMeasuredNetArea	= bShowMeasuredNetArea_0
	bShowVentArea			= bShowVentArea_0
	bShowReducedArea		= bShowReducedArea_0
	bShowCalculatedArea		= bShowCalculatedArea_0
	fontScaleType			= fontScaleType_0
	iFontScaleType			= iFontScaleType_0
	bAutomaticLineSpace		= bAutomaticLineSpace_0
	lineSpacing				= lineSpacing_0
	fontTitleType			= fontTitleType_0
	fontTitleSizePaper		= fontTitleSizePaper_0
	fontTitleSizeModel		= fontTitleSizeModel_0
	bFontTitleBold			= bFontTitleBold_0
	bFontTitleItalic		= bFontTitleItalic_0
	bFontTitleUnder			= bFontTitleUnder_0
	bFontTitleStrike		= bFontTitleStrike_0
	fontTitle2Type			= fontTitle2Type_0
	fontTitle2SizePaper		= fontTitle2SizePaper_0
	fontTitle2SizeModel		= fontTitle2SizeModel_0
	bFontTitle2Bold			= bFontTitle2Bold_0
	bFontTitle2Italic		= bFontTitle2Italic_0
	bFontTitle2Under		= bFontTitle2Under_0
	bFontTitle2Strike		= bFontTitle2Strike_0
	fontDataType			= fontDataType_0
	fontDataSizePaper		= fontDataSizePaper_0
	fontDataSizeModel		= fontDataSizeModel_0
	bFontDataBold			= bFontDataBold_0
	bFontDataItalic			= bFontDataItalic_0
	bFontDataUnder			= bFontDataUnder_0
	bFontDataStrike			= bFontDataStrike_0
	bBackFill				= bBackFill_0
	fillType				= fillType_0
	fillPen					= fillPen_0
	fillBackPen				= fillBackPen_0
	iFrameStyle				= iFrameStyle_0
	framePen				= framePen_0
	frameLineType			= frameLineType_0
	bFixWidth				= bFixWidth_0
	fixWidth				= fixWidth_0
	iAlignTexts				= iAlignTexts_0
	iAlignNumericalValues	= iAlignNumericalValues_0
	iAlignStringValues		= iAlignStringValues_0
	bFixRadius				= bFixRadius_0
	frameRadius				= frameRadius_0
    bPointer				= bPointer_0
	ltPointer				= ltPointer_0
	penPointer				= penPointer_0
	iPointerAnchor			= iPointerAnchor_0
	iPointerSide			= iPointerSide_0
	pointerOffsetX			= pointerOffsetX_0
	pointerOffsetY			= pointerOffsetY_0
	pointerHorDist			= pointerHorDist_0
	bArrowhead				= bArrowhead_0
	iArrowHeadType			= iArrowHeadType_0
	penArrowhead			= penArrowhead_0
	bShowZoneNameLine1		= bShowZoneNameLine1_0
	bShowZoneNameLine2		= bShowZoneNameLine2_0
	bShowZoneNum			= bShowZoneNum_0
	bShowZoneNum2			= bShowZoneNum2_0
	bShowZoneNum3			= bShowZoneNum3_0
	bShowApartmentName		= bShowApartmentName_0
	bShowFunctions			= bShowFunctions_0
	bShowFloor				= bShowFloor_0
	bShowWallFinish			= bShowWallFinish_0
	bShowCeiling			= bShowCeiling_0
	bShowHeightZone			= bShowHeightZone_0
	bShowHeightFloor		= bShowHeightFloor_0
	bShowWindowArea			= bShowWindowArea_0
	bShowPerimeter			= bShowPerimeter_0
	bShowCeilingHeight		= bShowCeilingHeight_0
	bShowVolume				= bShowVolume_0
	bShowShortTitle			= bShowShortTitle_0
	bShowOnormData			= bShowOnormData_0
	bShowExistFloor			= bShowExistFloor_0
	bShowExistArea			= bShowExistArea_0
	bShowCustom1			= bShowCustom1_0
	bShowCustom2			= bShowCustom2_0
	bShowCustom3			= bShowCustom3_0
	bShowAdditionalTags		= bShowAdditionalTags_0
	iTncDisplayData			= iTncDisplayData_0
endif

! ---------- Category Codes ----------
catName = ""
catCode = ""
rrr = request("Zone_category", "", catName, catCode)

if catCode = "0 BGF" then
	bShowVentArea		= 0
	bSubRegul       	= 0
	bShowCalculatedArea = 0
endif

! ---------- ID ---------
dim _MasterID[]
result = REQUEST("Full_ID_of_parent", "", _MasterID)
roomID = ""
if result then
	if iShowZoneIDAs = IDVALUE_IDNUMBER then
		roomID = _MasterID[vardim1(_MasterID)]
	else
		for i = 1 to vardim1 (_MasterID)
			roomID = roomID + _MasterID[i]
		next i
	endif
else
	if iShowZoneIDAs = IDVALUE_IDNUMBER then
		roomID = "<" + `ID Зоны` + ">"
	else
		roomID = "<" + `Основной ID Зоны` + ">"
	endif
endif

! ---------- Custom Units ---------
if iStampType = ZONE_STAMP_2_INT then
	_custUnitForm	= ""
	_calcTsubo 		= 1
	if iAreaCustomUnit = CUST_METER then 	
		_custUnitForm 	= "sqm"
		_calcTsubo 		= 1
	endif
	if iAreaCustomUnit = CUST_CMETER then 
		_custUnitForm 	= "sqcm"
		_calcTsubo 		= 1
	endif	
	if iAreaCustomUnit = CUST_MMETER then
		_custUnitForm 	= "sqmm"
		_calcTsubo 		= 1
	endif
	if iAreaCustomUnit = CUST_DECFT then
		_custUnitForm 	= "sqf"
		_calcTsubo 		= 1
	endif
	if iAreaCustomUnit = CUST_DECIN then 	
		_custUnitForm 	= "sqi"
		_calcTsubo 		= 1	
	endif
	if iAreaCustomUnit = CUST_TSUBO then 	
		_custUnitForm 	= `Тсубо`			! Do not convert value, use only _calcTsubo
		_calcTsubo 		= 3.3060
	endif
endif

! ------------------------------------------------------------------------------
! Row_Number's Definition
! ------------------------------------------------------------------------------

nFrontNoneRows = 0
bOnlyNone = 1
for iFront = 1 to nOrder
	if orders[iFront] = ORDER_NONE and bOnlyNone = 1 then
	   nFrontNoneRows = nFrontNoneRows + 1
	else
	   bOnlyNone = 0
	endif
next iFront
nBackNoneRows = 0
bOnlyNone = 1
for iBack = nOrder to 1 step -1
	if orders[iBack] = ORDER_NONE and bOnlyNone = 1 then
	   nBackNoneRows = nBackNoneRows + 1
	else
	   bOnlyNone = 0
	endif
next iBack

firstIndex = 1 + nFrontNoneRows
lastIndex	= nOrder - nBackNoneRows

dim usedRows[]
nOrderRow	= 0
bPrevIsNone	= 0
for i = firstIndex to lastIndex
	if orders[i] = ORDER_NONE then
		if not(bPrevIsNone) then
			nOrderRow			= nOrderRow + 1
			usedRows[nOrderRow]	= ORDER_NONE
		endif
		bPrevIsNone	= 1
	else
		nOrderRow			= nOrderRow + 1
		usedRows[nOrderRow]	= orders[i]
		bPrevIsNone			= 0
	endif
next i

dim showGroupDisplay[]
for i = 1 to 15
	showGroupDisplay[i] = 0
next i

for orderIdx = 1 to nOrderRow
	if usedRows[orderIdx]	= ORDER_ZONE_NAME		then showGroupDisplay[ORDER_ZONE_NAME] = 1
	if usedRows[orderIdx]	= ORDER_ZONE_NUMBER		then showGroupDisplay[ORDER_ZONE_NUMBER] = 1
	if usedRows[orderIdx]	= ORDER_ID				then showGroupDisplay[ORDER_ID] = 1
	if usedRows[orderIdx]	= ORDER_APARTMENT		then showGroupDisplay[ORDER_APARTMENT] = 1
	if usedRows[orderIdx]	= ORDER_FINISHING		then showGroupDisplay[ORDER_FINISHING] = 1
	if usedRows[orderIdx]	= ORDER_HEIGHT			then showGroupDisplay[ORDER_HEIGHT] = 1
	if usedRows[orderIdx]	= ORDER_HEIGHT_NUMBER	then showGroupDisplay[ORDER_HEIGHT_NUMBER] = 1
	if usedRows[orderIdx]	= ORDER_ZONE_AREAS		then showGroupDisplay[ORDER_ZONE_AREAS] = 1
	if usedRows[orderIdx]	= ORDER_WINDOW_AREA		then showGroupDisplay[ORDER_WINDOW_AREA] = 1
	if usedRows[orderIdx]	= ORDER_SIZE			then showGroupDisplay[ORDER_SIZE] = 1
	if usedRows[orderIdx]	= ORDER_AREA_CODE_GER	then showGroupDisplay[ORDER_AREA_CODE_GER] = 1
	if usedRows[orderIdx]	= ORDER_ONORM_AUT		then showGroupDisplay[ORDER_ONORM_AUT] = 1
	if usedRows[orderIdx]	= ORDER_ADD_TAGS		then showGroupDisplay[ORDER_ADD_TAGS] = 1
	if usedRows[orderIdx]	= ORDER_CUSTOM			then showGroupDisplay[ORDER_CUSTOM] = 1
	!NEW:	if usedRows[orderIdx]	= NEW_GROUP			then showGroupDisplay[NEW_GROUP] = 1
next orderIdx

! ------------------------------------------------------------------------------
! Zone Content
! ------------------------------------------------------------------------------
! ==============================================================================
! Content
! 1 : None					->	""
! 2 : Zone Name				->	title
! 3 : 2nd Zone Name Line	->	title
! 4 : Zone No.				->	title
! 5 : Secondary Zone No.	->	title (NOR)
! 6 : Tertiary Zone No.		->	title (NOR)
! 7 : Zone Category Code	->	title
! 8 : ID					->	title (AUT, NOR)
! 9 : Short Title			->	title (AUT)
! 10 : Apartment Code		->	title (AUT, GER)
! 11 : Staircase Code		->	title (AUT, GER)
! 12 : Apartment Name		->	title
! 13 : Position				->	title
! 14 : House Number			->	title
! 15 : Function				->	title
! 16 : Flooring				->	title + string / custom
! 17 : Existing Flooring	->	title + string / custom
! 18 : Wall Finish			->	title + string / custom
! 19 : Ceiling				->	title + string / custom
! 20 : Height Values Finished Floor Level	->	title + calculeted value / custom
! 21 : Height Values Zone Level				->	title + calculeted value / custom
! 22 : Measured Area		->	title + calculeted value with unit / without unit
! 23 : Measured Area Custom	->	title + calculeted value with unit (INT)
! 24 : Existing Measured Area	->	title + custom realnumber / without unit (AUT)
! 25 : Measured Net Area		->	title + calculeted value with unit / without unit
! 26 : Measured Net Area Custom	->	title + calculeted value with unit (INT)
! 27 : DIN Subtracted Areas	->	title + calculeted value with unit / without unit (GER)
! 28 : Reduced Area			->	title + calculeted value with unit / without unit
! 29 : Reduced Area Custom	->	title + calculeted value with unit (INT)
! 30 : Calculated Area		->	title + calculeted value with unit / without unit
! 31 : Calculated Area Custom->	title + calculeted value with unit (INT)
! 32 : Window Area			->	title + calculeted value with unit / without unit
! 33 : Perimeter			->	title + calculeted value with unit / without unit
! 34 : Ceiling Height		->	title + calculeted value with unit / without unit
! 35 : Zone Volume			->	title + calculeted value with unit / without unit
! 36 : Classification		->	title + string (GER)
! 37 - 52 : ONORM Data		->	title + string (AUT)
! 53 : Custom Text 1		->  title
! 54 : Custom Text 2		->  title
! 55 : Custom Text 3		->  title
! 56 : Apartment ID			->  title
! 57 : Additional Tags		->  string table - title
! ==============================================================================


_iQuantityString	= 0
_iQuantityLength	= 10 	! Calc_length_unit
_iQuantityArea		= 9 	! Area_dimension
_iQuantityVolume	= 12	! Calc_volume_unit
_iQuantityLevel		= 5		! Level_dimension

! Zone Name
! ==============================================================================
if bUseCategoryName then
	rowDataString[ROW__ZONE_NAME__ZONE_NAME][iDataPrefix] = catName
else
	rowDataString[ROW__ZONE_NAME__ZONE_NAME][iDataPrefix] = ROOM_NAME
endif
rowDataString[ROW__ZONE_NAME__ZONE_NAME][iDataStrings] = ""
rowDataNumeric[ROW__ZONE_NAME__ZONE_NAME][iDataShow] = bShowZoneNameLine1 * showGroupDisplay[ORDER_ZONE_NAME]
rowDataNumeric[ROW__ZONE_NAME__ZONE_NAME][iDataQuantity] = 0
rowDataNumeric[ROW__ZONE_NAME__ZONE_NAME][iDataQFormat] = _iQuantityString

! Zone Name 2
! ==============================================================================
rowDataString[ROW__ZONE_NAME__ZONE_NAME2][iDataPrefix] = zoneNameLine2
rowDataString[ROW__ZONE_NAME__ZONE_NAME2][iDataStrings] = ""
rowDataNumeric[ROW__ZONE_NAME__ZONE_NAME2][iDataShow] = bShowZoneNameLine2 * showGroupDisplay[ORDER_ZONE_NAME]
rowDataNumeric[ROW__ZONE_NAME__ZONE_NAME2][iDataQuantity] = 0
rowDataNumeric[ROW__ZONE_NAME__ZONE_NAME2][iDataQFormat] = _iQuantityString

! Zone Number 1
! ==============================================================================
rowDataString[ROW__ZONE_NUMBER__ZONE_NO1][iDataPrefix] = ROOM_NUMBER
rowDataString[ROW__ZONE_NUMBER__ZONE_NO1][iDataStrings] = ""
rowDataNumeric[ROW__ZONE_NUMBER__ZONE_NO1][iParentGroup] = ORDER_ZONE_NUMBER * not(bDisplayInsideBox) + ORDER_HEIGHT_NUMBER * bDisplayInsideBox
rowDataNumeric[ROW__ZONE_NUMBER__ZONE_NO1][iDataShow] = bShowZoneNum * (showGroupDisplay[ORDER_ZONE_NUMBER] | showGroupDisplay[ORDER_HEIGHT_NUMBER])
rowDataNumeric[ROW__ZONE_NUMBER__ZONE_NO1][iDataQuantity] = 0
rowDataNumeric[ROW__ZONE_NUMBER__ZONE_NO1][iDataQFormat] = _iQuantityString

! Zone Number 2 (NOR)
! ==============================================================================
if iStampType = ZONE_STAMP_NOR then
	rowDataString[ROW__ZONE_NUMBER__ZONE_NO2][iDataPrefix] = zoneNum2
	rowDataString[ROW__ZONE_NUMBER__ZONE_NO2][iDataStrings] = ""
	rowDataNumeric[ROW__ZONE_NUMBER__ZONE_NO2][iParentGroup] = ORDER_ZONE_NUMBER * not(bDisplayInsideBox) + ORDER_HEIGHT_NUMBER * bDisplayInsideBox
	rowDataNumeric[ROW__ZONE_NUMBER__ZONE_NO2][iDataShow] = bShowZoneNum2 * (showGroupDisplay[ORDER_ZONE_NUMBER] | showGroupDisplay[ORDER_HEIGHT_NUMBER])
	rowDataNumeric[ROW__ZONE_NUMBER__ZONE_NO2][iDataQuantity] = 0
	rowDataNumeric[ROW__ZONE_NUMBER__ZONE_NO2][iDataQFormat] = _iQuantityString
endif

! Zone Number 3 (NOR)
! ==============================================================================
if iStampType = ZONE_STAMP_NOR then
	rowDataString[ROW__ZONE_NUMBER__ZONE_NO3][iDataPrefix] = zoneNum3
	rowDataString[ROW__ZONE_NUMBER__ZONE_NO3][iDataStrings] = ""
	rowDataNumeric[ROW__ZONE_NUMBER__ZONE_NO3][iParentGroup] = ORDER_ZONE_NUMBER * not(bDisplayInsideBox) + ORDER_HEIGHT_NUMBER * bDisplayInsideBox
	rowDataNumeric[ROW__ZONE_NUMBER__ZONE_NO3][iDataShow] = bShowZoneNum3 * (showGroupDisplay[ORDER_ZONE_NUMBER] | showGroupDisplay[ORDER_HEIGHT_NUMBER])
	rowDataNumeric[ROW__ZONE_NUMBER__ZONE_NO3][iDataQuantity] = 0
	rowDataNumeric[ROW__ZONE_NUMBER__ZONE_NO3][iDataQFormat] = _iQuantityString
endif

! Category Code
! ==============================================================================
rowDataString[ROW__ID__CAT_ID][iDataPrefix] = catCode
rowDataString[ROW__ID__CAT_ID][iDataStrings] = ""
rowDataNumeric[ROW__ID__CAT_ID][iDataShow] = bShowZoneCatCode * showGroupDisplay[ORDER_ID]
rowDataNumeric[ROW__ID__CAT_ID][iDataQuantity] = 0
rowDataNumeric[ROW__ID__CAT_ID][iDataQFormat] = _iQuantityString

! ID
! ==============================================================================
rowDataString[ROW__ID__ID][iDataPrefix] = roomID					! ID
rowDataString[ROW__ID__ID][iDataStrings] = ""
rowDataNumeric[ROW__ID__ID][iDataShow] = bShowID * showGroupDisplay[ORDER_ID]
rowDataNumeric[ROW__ID__ID][iDataQuantity] = 0
rowDataNumeric[ROW__ID__ID][iDataQFormat] = _iQuantityString

! Short Title (AUT)
! ==============================================================================
if iStampType = ZONE_STAMP_ON then
	rowDataString[ROW__ID__SHORT_TITLE][iDataPrefix] = shortTitle
	rowDataString[ROW__ID__SHORT_TITLE][iDataStrings] = ""
	rowDataNumeric[ROW__ID__SHORT_TITLE][iDataShow] = bShowShortTitle * showGroupDisplay[ORDER_ID]
	rowDataNumeric[ROW__ID__SHORT_TITLE][iDataQuantity] = 0
	rowDataNumeric[ROW__ID__SHORT_TITLE][iDataQFormat] = _iQuantityString
endif

! Apartment Code (AUT, GER)
! ==============================================================================
if iStampType = ZONE_STAMP_ON | iStampType = ZONE_STAMP_DIN then
	if bShowApCodePrefix then
		rowDataString[ROW__ID__APARTMENT_CODE][iDataPrefix] = stApartmentCodePrefix + " " + asAddOn_stApartmentCode
	else
		rowDataString[ROW__ID__APARTMENT_CODE][iDataPrefix] = asAddOn_stApartmentCode
	endif
	rowDataString[ROW__ID__APARTMENT_CODE][iDataStrings] = ""
	rowDataNumeric[ROW__ID__APARTMENT_CODE][iDataShow] = bShowApartmentCode * showGroupDisplay[ORDER_ID]
	rowDataNumeric[ROW__ID__APARTMENT_CODE][iDataQuantity] = 0
	rowDataNumeric[ROW__ID__APARTMENT_CODE][iDataQFormat] = _iQuantityString
endif

! Staircase Code (AUT, GER)
! ==============================================================================
if iStampType = ZONE_STAMP_ON | iStampType = ZONE_STAMP_DIN then
	rowDataString[ROW__ID__STAIRCASE_CODE][iDataPrefix] = asAddOn_stStaircaseCode
	rowDataString[ROW__ID__STAIRCASE_CODE][iDataStrings] = ""
	rowDataNumeric[ROW__ID__STAIRCASE_CODE][iDataShow] = bShowStaircaseCode * showGroupDisplay[ORDER_ID]
	rowDataNumeric[ROW__ID__STAIRCASE_CODE][iDataQuantity] = 0
	rowDataNumeric[ROW__ID__STAIRCASE_CODE][iDataQFormat] = _iQuantityString
endif

! Apartment Name
! ==============================================================================
rowDataString[ROW__APARTMENT__APART_NAME][iDataPrefix] = apartmentName
rowDataString[ROW__APARTMENT__APART_NAME][iDataStrings] = ""
rowDataNumeric[ROW__APARTMENT__APART_NAME][iDataShow] = bShowApartmentName * showGroupDisplay[ORDER_APARTMENT]
rowDataNumeric[ROW__APARTMENT__APART_NAME][iDataQuantity] = 0
rowDataNumeric[ROW__APARTMENT__APART_NAME][iDataQFormat] = _iQuantityString

! Position
! ==============================================================================

rowDataString[ROW__APARTMENT__APART_POS][iDataPrefix] = stPosition
rowDataString[ROW__APARTMENT__APART_POS][iDataStrings] = ""
rowDataNumeric[ROW__APARTMENT__APART_POS][iDataShow] = bShowPosition * showGroupDisplay[ORDER_APARTMENT]
rowDataNumeric[ROW__APARTMENT__APART_POS][iDataQuantity] = 0
rowDataNumeric[ROW__APARTMENT__APART_POS][iDataQFormat] = _iQuantityString

! House Number
! ==============================================================================
rowDataString[ROW__APARTMENT__HOUSE_NUM][iDataPrefix] = stHouseNumber
rowDataString[ROW__APARTMENT__HOUSE_NUM][iDataStrings] = ""
rowDataNumeric[ROW__APARTMENT__HOUSE_NUM][iDataShow] = bShowHouseNumber * showGroupDisplay[ORDER_APARTMENT]
rowDataNumeric[ROW__APARTMENT__HOUSE_NUM][iDataQuantity] = 0
rowDataNumeric[ROW__APARTMENT__HOUSE_NUM][iDataQFormat] = _iQuantityString

! Function
! ==============================================================================
rowDataString[ROW__APARTMENT__FUNCTION][iDataPrefix] = functionName
rowDataString[ROW__APARTMENT__FUNCTION][iDataStrings] = ""
rowDataNumeric[ROW__APARTMENT__FUNCTION][iDataShow] = bShowFunctions * showGroupDisplay[ORDER_APARTMENT]
rowDataNumeric[ROW__APARTMENT__FUNCTION][iDataQuantity] = 0
rowDataNumeric[ROW__APARTMENT__FUNCTION][iDataQFormat] = _iQuantityString

! Flooring
! ==============================================================================
rowDataString[ROW__FINISHING__FLOOR][iDataPrefix] = floorCode
rowDataString[ROW__FINISHING__FLOOR][iDataStrings] = stFloorCovering
rowDataNumeric[ROW__FINISHING__FLOOR][iDataShow] = bShowFloor * showGroupDisplay[ORDER_FINISHING]
rowDataNumeric[ROW__FINISHING__FLOOR][iDataQuantity] = 0
rowDataNumeric[ROW__FINISHING__FLOOR][iDataQFormat] = _iQuantityString

! Existing Finish
! ==============================================================================
if iStampType = ZONE_STAMP_ON then
	rowDataString[ROW__FINISHING__FLOOR__EXIST][iDataPrefix] = existingFloorFinishCode
	rowDataString[ROW__FINISHING__FLOOR__EXIST][iDataStrings] = stExistingFloorFinish
	rowDataNumeric[ROW__FINISHING__FLOOR__EXIST][iDataShow] = bShowExistFloor * showGroupDisplay[ORDER_FINISHING]
	rowDataNumeric[ROW__FINISHING__FLOOR__EXIST][iDataQuantity] = 0
	rowDataNumeric[ROW__FINISHING__FLOOR__EXIST][iDataQFormat] = _iQuantityString
endif

! Ceiling
! ==============================================================================
rowDataString[ROW__FINISHING__CEILING][iDataPrefix] = ceilingCode
rowDataString[ROW__FINISHING__CEILING][iDataStrings] = stCeilingCovering
rowDataNumeric[ROW__FINISHING__CEILING][iDataShow] = bShowCeiling * showGroupDisplay[ORDER_FINISHING]
rowDataNumeric[ROW__FINISHING__CEILING][iDataQuantity] = 0
rowDataNumeric[ROW__FINISHING__CEILING][iDataQFormat] = _iQuantityString

! Wall Finish
! ==============================================================================
rowDataString[ROW__FINISHING__WALL][iDataPrefix] = wallCode
rowDataString[ROW__FINISHING__WALL][iDataStrings] = stWallCovering
rowDataNumeric[ROW__FINISHING__WALL][iDataShow] = bShowWallFinish * showGroupDisplay[ORDER_FINISHING]
rowDataNumeric[ROW__FINISHING__WALL][iDataQuantity] = 0
rowDataNumeric[ROW__FINISHING__WALL][iDataQFormat] = _iQuantityString

! Height Values Finished Floor Level
! ==============================================================================
rowDataNumeric[ROW__HEIGHT__FLOOR][iParentGroup] = ORDER_HEIGHT * not(bDisplayInsideBox) + ORDER_HEIGHT_NUMBER * bDisplayInsideBox
rowDataNumeric[ROW__HEIGHT__FLOOR][iDataShow] = bShowHeightFloor * (showGroupDisplay[ORDER_HEIGHT] | showGroupDisplay[ORDER_HEIGHT_NUMBER])
if iPrefixFloorLevel = PREFIX_TEXT then
	rowDataString[ROW__HEIGHT__FLOOR][iDataPrefix] = titleFloorLevel
else
	rowDataString[ROW__HEIGHT__FLOOR][iDataPrefix] = ""
endif
rowDataString[ROW__HEIGHT__FLOOR][iDataStrings] = ""
rowDataNumeric[ROW__HEIGHT__FLOOR][iDataQuantity] = 0

if bAutomaticFloorLevel then
	rowDataNumeric[ROW__HEIGHT__FLOOR][iDataQuantity] = ROOM_BASELEV + ROOM_FL_THICK
	if rowDataNumeric[ROW__HEIGHT__FLOOR][iDataQuantity] > eps then
		rowDataString[ROW__HEIGHT__FLOOR][iDataStrings] =  "+"
	else
		if abs(rowDataNumeric[ROW__HEIGHT__FLOOR][iDataQuantity]) <= eps then
			rowDataString[ROW__HEIGHT__FLOOR][iDataStrings] = "±"
			if rowDataNumeric[ROW__HEIGHT__FLOOR][iDataQuantity] < -eps then
				rowDataString[ROW__HEIGHT__FLOOR][iDataStrings] = "-"
			endif
		endif
	endif
	rowDataNumeric[ROW__HEIGHT__FLOOR][iDataQFormat] = _iQuantityLevel
else
	rowDataString[ROW__HEIGHT__FLOOR][iDataStrings] = customFloorLevel
	rowDataNumeric[ROW__HEIGHT__FLOOR][iDataQFormat] = _iQuantityString
endif

! Height Values Zone Level
! ==============================================================================
rowDataNumeric[ROW__HEIGHT__ZONE][iParentGroup] = ORDER_HEIGHT * not(bDisplayInsideBox) + ORDER_HEIGHT_NUMBER * bDisplayInsideBox
rowDataNumeric[ROW__HEIGHT__ZONE][iDataShow] = bShowHeightZone * (showGroupDisplay[ORDER_HEIGHT] | showGroupDisplay[ORDER_HEIGHT_NUMBER])
if iPrefixZoneLevel = PREFIX_TEXT then
	rowDataString[ROW__HEIGHT__ZONE][iDataPrefix] = titleZoneLevel
else
	rowDataString[ROW__HEIGHT__ZONE][iDataPrefix] = ""
endif
rowDataString[ROW__HEIGHT__ZONE][iDataStrings] = ""
rowDataNumeric[ROW__HEIGHT__ZONE][iDataQuantity] = 0

if bAutomaticZoneLevel then
	rowDataNumeric[ROW__HEIGHT__ZONE][iDataQuantity] = ROOM_BASELEV

	if rowDataNumeric[ROW__HEIGHT__ZONE][iDataQuantity] > eps then
		rowDataString[ROW__HEIGHT__ZONE][iDataStrings] = "+"
	else
		if abs(rowDataNumeric[ROW__HEIGHT__ZONE][iDataQuantity]) <= eps then
			rowDataString[ROW__HEIGHT__ZONE][iDataStrings] = "±"
			if rowDataNumeric[ROW__HEIGHT__ZONE][iDataQuantity] < -eps then
				rowDataString[ROW__HEIGHT__ZONE][iDataStrings] = "-"
			endif
		endif
	endif
	rowDataNumeric[ROW__HEIGHT__ZONE][iDataQFormat] = _iQuantityLevel
else
	rowDataString[ROW__HEIGHT__ZONE][iDataStrings] = customZoneLevel
	rowDataNumeric[ROW__HEIGHT__ZONE][iDataQFormat] = _iQuantityString
endif

! Measured Area
! ==============================================================================
rowDataString[ROW__ZONE_AREAS__MES_AREA][iDataPrefix] = measuredAreaCode
rowDataString[ROW__ZONE_AREAS__MES_AREA][iDataStrings] = ""
rowDataNumeric[ROW__ZONE_AREAS__MES_AREA][iDataShow] = bShowMeasuredArea * showGroupDisplay[ORDER_ZONE_AREAS]  * ((iStampType <> ZONE_STAMP_2_INT) | (iStampType = ZONE_STAMP_2_INT and iAreaUnit <> AREA_UNIT_CUST))
rowDataNumeric[ROW__ZONE_AREAS__MES_AREA][iDataQuantity] = ROOM_AREA
rowDataNumeric[ROW__ZONE_AREAS__MES_AREA][iDataQFormat] = _iQuantityArea

! Measured Area Custom Unit
! ==============================================================================
if iStampType = ZONE_STAMP_2_INT then
	rowDataString[ROW__ZONE_AREAS__MES_AREA_CUST][iDataName] = `Измеренная Площадь`
	rowDataString[ROW__ZONE_AREAS__MES_AREA_CUST][iDataPrefix] = measuredAreaCode
	rowDataString[ROW__ZONE_AREAS__MES_AREA_CUST][iDataStrings] = ""
	rowDataNumeric[ROW__ZONE_AREAS__MES_AREA_CUST][iDataShow] = bShowMeasuredArea * showGroupDisplay[ORDER_ZONE_AREAS] * (iAreaUnit <> AREA_UNIT_PROJECT)
	rowDataNumeric[ROW__ZONE_AREAS__MES_AREA_CUST][iDataQuantity] = ROOM_AREA / _calcTsubo
	rowDataNumeric[ROW__ZONE_AREAS__MES_AREA_CUST][iDataQFormat] = _iQuantityArea
	rowDataString[ROW__ZONE_AREAS__MES_AREA_CUST][iDataQCustomFormat] = "%~0." + str(iAreaDecimalOptions,1,0) + _custUnitForm
endif

! Existing Area
! ==============================================================================
if iStampType = ZONE_STAMP_ON then
	rowDataString[ROW__ZONE_AREAS__EXIST_AREA][iDataName] = `Существующая Площадь`
	rowDataString[ROW__ZONE_AREAS__EXIST_AREA][iDataPrefix] = existingAreaCode
	rowDataString[ROW__ZONE_AREAS__EXIST_AREA][iDataStrings] = ""
	rowDataNumeric[ROW__ZONE_AREAS__EXIST_AREA][iDataShow] = bShowExistArea * showGroupDisplay[ORDER_ZONE_AREAS]
	rowDataNumeric[ROW__ZONE_AREAS__EXIST_AREA][iDataQuantity] = existingArea
	rowDataNumeric[ROW__ZONE_AREAS__EXIST_AREA][iDataQFormat] = _iQuantityArea
endif

! Measured Net Area
! ==============================================================================
rowDataString[ROW__ZONE_AREAS__MES_NET_AREA][iDataPrefix] = measuredNetAreaCode
rowDataString[ROW__ZONE_AREAS__MES_NET_AREA][iDataStrings] = ""
rowDataNumeric[ROW__ZONE_AREAS__MES_NET_AREA][iDataShow] = bShowMeasuredNetArea * showGroupDisplay[ORDER_ZONE_AREAS] * ((iStampType <> ZONE_STAMP_2_INT) | (iStampType = ZONE_STAMP_2_INT and iAreaUnit <> AREA_UNIT_CUST))
rowDataNumeric[ROW__ZONE_AREAS__MES_NET_AREA][iDataQuantity] = ROOM_NET_AREA
rowDataNumeric[ROW__ZONE_AREAS__MES_NET_AREA][iDataQFormat] = _iQuantityArea

! Measured Net Area Custom Unit
! ==============================================================================
if iStampType = ZONE_STAMP_2_INT then
	rowDataString[ROW__ZONE_AREAS__MES_NET_AREA_CUST][iDataName] = `Измеренная Чистая Площадь`
	rowDataString[ROW__ZONE_AREAS__MES_NET_AREA_CUST][iDataPrefix] = measuredNetAreaCode
	rowDataString[ROW__ZONE_AREAS__MES_NET_AREA_CUST][iDataStrings] = ""
	rowDataNumeric[ROW__ZONE_AREAS__MES_NET_AREA_CUST][iDataShow] = bShowMeasuredNetArea * showGroupDisplay[ORDER_ZONE_AREAS] * (iAreaUnit <> AREA_UNIT_PROJECT)
	rowDataNumeric[ROW__ZONE_AREAS__MES_NET_AREA_CUST][iDataQuantity] = ROOM_NET_AREA / _calcTsubo
	rowDataNumeric[ROW__ZONE_AREAS__MES_NET_AREA_CUST][iDataQFormat] = _iQuantityArea
	rowDataString[ROW__ZONE_AREAS__MES_NET_AREA_CUST][iDataQCustomFormat] = "%~0." + str(iAreaDecimalOptions,1,0) + _custUnitForm
endif

! DIN Subtracted Areas
! ==============================================================================
if iStampType = ZONE_STAMP_DIN then
	rowDataString[ROW__ZONE_AREAS__VENT_AREA][iDataName] = `Вычтенные Площади DIN`
	rowDataString[ROW__ZONE_AREAS__VENT_AREA][iDataPrefix] = ventAreaCode
	rowDataString[ROW__ZONE_AREAS__VENT_AREA][iDataStrings] = ""
	rowDataNumeric[ROW__ZONE_AREAS__VENT_AREA][iDataShow] = bShowVentArea * showGroupDisplay[ORDER_ZONE_AREAS]
	rowDataNumeric[ROW__ZONE_AREAS__VENT_AREA][iDataQuantity] = ROOM_AREA - ( ROOM_REDUCED_AREA - ROOM_REDUCED_AREA * _percentReduction ) * ROOM_AREA_FACTOR
	rowDataNumeric[ROW__ZONE_AREAS__VENT_AREA][iDataQFormat] = _iQuantityArea
endif

! Reduced Area
! ==============================================================================
rowDataString[ROW__ZONE_AREAS__REDUC_AREA][iDataPrefix] = reducedAreaCode
rowDataString[ROW__ZONE_AREAS__REDUC_AREA][iDataStrings] = ""
rowDataNumeric[ROW__ZONE_AREAS__REDUC_AREA][iDataShow] = bShowReducedArea * showGroupDisplay[ORDER_ZONE_AREAS] * ((iStampType <> ZONE_STAMP_2_INT) | (iStampType = ZONE_STAMP_2_INT and iAreaUnit <> AREA_UNIT_CUST))
rowDataNumeric[ROW__ZONE_AREAS__REDUC_AREA][iDataQuantity] = ROOM_REDUCED_AREA
rowDataNumeric[ROW__ZONE_AREAS__REDUC_AREA][iDataQFormat] = _iQuantityArea

! Reduced Area Custom Unit
! ==============================================================================
if iStampType = ZONE_STAMP_2_INT then
	rowDataString[ROW__ZONE_AREAS__REDUC_AREA_CUST][iDataName] = `Уменьшенная Площадь`
	rowDataString[ROW__ZONE_AREAS__REDUC_AREA_CUST][iDataPrefix] = reducedAreaCode
	rowDataString[ROW__ZONE_AREAS__REDUC_AREA_CUST][iDataStrings] = ""
	rowDataNumeric[ROW__ZONE_AREAS__REDUC_AREA_CUST][iDataShow] = bShowReducedArea * showGroupDisplay[ORDER_ZONE_AREAS] * (iAreaUnit <> AREA_UNIT_PROJECT)
	rowDataNumeric[ROW__ZONE_AREAS__REDUC_AREA_CUST][iDataQuantity] = ROOM_REDUCED_AREA / _calcTsubo
	rowDataNumeric[ROW__ZONE_AREAS__REDUC_AREA_CUST][iDataQFormat] = _iQuantityArea
	rowDataString[ROW__ZONE_AREAS__REDUC_AREA_CUST][iDataQCustomFormat] = "%~0." + str(iAreaDecimalOptions,1,0) + _custUnitForm
endif

! Calculated Area
! ==============================================================================
rowDataString[ROW__ZONE_AREAS__CALC_AREA][iDataPrefix] = calculatedAreaCode
rowDataString[ROW__ZONE_AREAS__CALC_AREA][iDataStrings] = ""
rowDataNumeric[ROW__ZONE_AREAS__CALC_AREA][iDataShow] = bShowCalculatedArea * showGroupDisplay[ORDER_ZONE_AREAS] * ((iStampType <> ZONE_STAMP_2_INT) | (iStampType = ZONE_STAMP_2_INT and iAreaUnit <> AREA_UNIT_CUST))
if iStampType = ZONE_STAMP_DIN then
	rowDataNumeric[ROW__ZONE_AREAS__CALC_AREA][iDataQuantity] = _calculatedReducedAreaDIN	! Calculated Area (GER)
else
	rowDataNumeric[ROW__ZONE_AREAS__CALC_AREA][iDataQuantity] = ROOM_CALC_AREA			! Calculated Area
endif
rowDataNumeric[ROW__ZONE_AREAS__CALC_AREA][iDataQFormat] = _iQuantityArea

! Calculated Area Custom Unit
! ==============================================================================
if iStampType = ZONE_STAMP_2_INT then
	rowDataString[ROW__ZONE_AREAS__CALC_AREA_CUST][iDataName] = `Вычисленная Площадь`
	rowDataString[ROW__ZONE_AREAS__CALC_AREA_CUST][iDataPrefix] = calculatedAreaCode
	rowDataString[ROW__ZONE_AREAS__CALC_AREA_CUST][iDataStrings] = ""
	rowDataNumeric[ROW__ZONE_AREAS__CALC_AREA_CUST][iDataShow] = bShowCalculatedArea * showGroupDisplay[ORDER_ZONE_AREAS] * (iAreaUnit <> AREA_UNIT_PROJECT)
	rowDataNumeric[ROW__ZONE_AREAS__CALC_AREA_CUST][iDataQuantity] = ROOM_CALC_AREA / _calcTsubo
	rowDataNumeric[ROW__ZONE_AREAS__CALC_AREA_CUST][iDataQFormat] = _iQuantityArea
	rowDataString[ROW__ZONE_AREAS__CALC_AREA_CUST][iDataQCustomFormat] = "%~0." + str(iAreaDecimalOptions,1,0) + _custUnitForm
endif

! Window Area
! ==============================================================================
rowDataString[ROW__WINDOW_AREA__WINDOW_AREA][iDataPrefix] = windowAreaCode
rowDataString[ROW__WINDOW_AREA__WINDOW_AREA][iDataStrings] = ""
rowDataNumeric[ROW__WINDOW_AREA__WINDOW_AREA][iDataShow] = bShowWindowArea * showGroupDisplay[ORDER_WINDOW_AREA]
rowDataNumeric[ROW__WINDOW_AREA__WINDOW_AREA][iDataQuantity] = ROOM_WINDS_SURF
rowDataNumeric[ROW__WINDOW_AREA__WINDOW_AREA][iDataQFormat] = _iQuantityArea

! Perimeter
! ==============================================================================
rowDataString[ROW__SIZE__PERIMETER][iDataPrefix] = perimeterCode
rowDataString[ROW__SIZE__PERIMETER][iDataStrings] = ""
rowDataNumeric[ROW__SIZE__PERIMETER][iDataShow] = bShowPerimeter * showGroupDisplay[ORDER_SIZE]
rowDataNumeric[ROW__SIZE__PERIMETER][iDataQuantity] = ROOM_PERIM
rowDataNumeric[ROW__SIZE__PERIMETER][iDataQFormat] = _iQuantityLength

! Ceiling Height
! ==============================================================================
rowDataString[ROW__SIZE__CEILING_H][iDataPrefix] = ceilingHeightCode
rowDataString[ROW__SIZE__CEILING_H][iDataStrings] = ""
rowDataNumeric[ROW__SIZE__CEILING_H][iDataShow] = bShowCeilingHeight * showGroupDisplay[ORDER_SIZE]
rowDataNumeric[ROW__SIZE__CEILING_H][iDataQuantity] = ROOM_HEIGHT
rowDataNumeric[ROW__SIZE__CEILING_H][iDataQFormat] = _iQuantityLength

! Zone Volume
! ==============================================================================
rowDataString[ROW__SIZE__VOLUME][iDataPrefix] = volumeCode
rowDataString[ROW__SIZE__VOLUME][iDataStrings] = ""
rowDataNumeric[ROW__SIZE__VOLUME][iDataShow] = bShowVolume * showGroupDisplay[ORDER_SIZE]
rowDataNumeric[ROW__SIZE__VOLUME][iDataQuantity] = ROOM_VOLUME
rowDataNumeric[ROW__SIZE__VOLUME][iDataQFormat] = _iQuantityVolume

! Classification
! ==============================================================================
if iStampType = ZONE_STAMP_DIN then
	rowDataString[ROW__AREA_CODE_GER__AREACODE][iDataPrefix] = din277AreaTitle
	rowDataString[ROW__AREA_CODE_GER__AREACODE][iDataStrings] = " " + din277AreaCode
	rowDataNumeric[ROW__AREA_CODE_GER__AREACODE][iDataShow] = bShowClassification * showGroupDisplay[ORDER_AREA_CODE_GER]
	rowDataNumeric[ROW__AREA_CODE_GER__AREACODE][iDataQuantity] = 0
	rowDataNumeric[ROW__AREA_CODE_GER__AREACODE][iDataQFormat] = _iQuantityString
endif

! ONORM Data
! ==============================================================================
if iStampType = ZONE_STAMP_ON then
	for i = 0 to 16
		rowDataNumeric[ROW__ONORM_AUT__ONORM + i][iDataShow] =  bShowOnormData * showGroupDisplay[ORDER_ONORM_AUT]
		rowDataString[ROW__ONORM_AUT__ONORM + i][iDataStrings] = ""
		rowDataNumeric[ROW__ONORM_AUT__ONORM + i][iDataQuantity] = 0
		rowDataNumeric[ROW__ONORM_AUT__ONORM + i][iDataQFormat] = _iQuantityString
	next i
	idR = 0
	rowDataString[ROW__ONORM_AUT__ONORM + idR][iDataName] = `Данные ONORM Количество Дверей`
	rowDataString[ROW__ONORM_AUT__ONORM + idR][iDataPrefix] = normCustom1
	idR = idR + 1

	rowDataString[ROW__ONORM_AUT__ONORM + idR][iDataName] = `Данные ONORM Свободная Высота`
	rowDataString[ROW__ONORM_AUT__ONORM + idR][iDataPrefix] = normCustom2
	idR = idR + 1

	rowDataString[ROW__ONORM_AUT__ONORM + idR][iDataName] = `Данные ONORM Номинальная Высота`
	rowDataString[ROW__ONORM_AUT__ONORM + idR][iDataPrefix] = normCustom3
	idR = idR + 1

	rowDataString[ROW__ONORM_AUT__ONORM + idR][iDataName] = `Данные ONORM Подвесной Потолок`
	rowDataString[ROW__ONORM_AUT__ONORM + idR][iDataPrefix] = normCustom4
	idR = idR + 1

	rowDataString[ROW__ONORM_AUT__ONORM + idR][iDataName] = `Данные ONORM Код Использования Зоны`
	rowDataString[ROW__ONORM_AUT__ONORM + idR][iDataPrefix] = normCustom5
	idR = idR + 1

	rowDataString[ROW__ONORM_AUT__ONORM + idR][iDataName] = `Данные ONORM Учетный Номер Зоны`
	rowDataString[ROW__ONORM_AUT__ONORM + idR][iDataPrefix] = normCustom6
	idR = idR + 1

	rowDataString[ROW__ONORM_AUT__ONORM + idR][iDataName] = `Данные ONORM Дополнительная Информация 1`
	rowDataString[ROW__ONORM_AUT__ONORM + idR][iDataPrefix] = normCustom7
	idR = idR + 1

	rowDataString[ROW__ONORM_AUT__ONORM + idR][iDataName] = `Данные ONORM Дополнительная Информация 2`
	rowDataString[ROW__ONORM_AUT__ONORM + idR][iDataPrefix] = normCustom8
	idR = idR + 1

	rowDataString[ROW__ONORM_AUT__ONORM + idR][iDataName] = `Данные ONORM Дополнительная Информация 3`
	rowDataString[ROW__ONORM_AUT__ONORM + idR][iDataPrefix] = normCustom9
	idR = idR + 1

	rowDataString[ROW__ONORM_AUT__ONORM + idR][iDataName] = `Данные ONORM Административная Единица`
	rowDataString[ROW__ONORM_AUT__ONORM + idR][iDataPrefix] = normCustom10
	idR = idR + 1

	rowDataString[ROW__ONORM_AUT__ONORM + idR][iDataName] = `Данные ONORM Код Приписки Зоны`
	rowDataString[ROW__ONORM_AUT__ONORM + idR][iDataPrefix] = normCustom11
	idR = idR + 1

	rowDataString[ROW__ONORM_AUT__ONORM + idR][iDataName] = `Данные ONORM Чистая Площадь по ONORM`
	rowDataString[ROW__ONORM_AUT__ONORM + idR][iDataPrefix] = normCustom12
	idR = idR + 1

	rowDataString[ROW__ONORM_AUT__ONORM + idR][iDataName] = `Данные ONORM Площадь Зоны по ONORM B 1800`
	rowDataString[ROW__ONORM_AUT__ONORM + idR][iDataPrefix] = normCustom13
	idR = idR + 1

	rowDataString[ROW__ONORM_AUT__ONORM + idR][iDataName] = `Данные ONORM Площадь Зоны по MRG`
	rowDataString[ROW__ONORM_AUT__ONORM + idR][iDataPrefix] = normCustom14
	idR = idR + 1

	rowDataString[ROW__ONORM_AUT__ONORM + idR][iDataName] = `Данные ONORM Количество Людей`
	rowDataString[ROW__ONORM_AUT__ONORM + idR][iDataPrefix] = normCustom15
	idR = idR + 1

	rowDataString[ROW__ONORM_AUT__ONORM + idR][iDataName] = `Данные ONORM Дата Создания`
	rowDataString[ROW__ONORM_AUT__ONORM + idR][iDataPrefix] = normCustom16
	idR = idR + 1

	rowDataString[ROW__ONORM_AUT__ONORM + idR][iDataName] = `Данные ONORM Дата Редактирования`
	rowDataString[ROW__ONORM_AUT__ONORM + idR][iDataPrefix] = normCustom17
	idR = idR + 1
endif

! Additional Tags
! ============================================================================== 
rowDataString[ROW__ADD__TAGS][iDataName] = `Дополнительные Метки`
rowDataString[ROW__ADD__TAGS][iDataPrefix] = ""
rowDataString[ROW__ADD__TAGS][iDataStrings] = ""
rowDataNumeric[ROW__ADD__TAGS][iDataShow] = bShowAdditionalTags * showGroupDisplay[ORDER_ADD_TAGS]
rowDataNumeric[ROW__ADD__TAGS][iDataQuantity] = 0
rowDataNumeric[ROW__ADD__TAGS][iDataQFormat] = _iQuantityString

_nRowProperty = 0
_nColuProperty = 0

dim _allStringsTnC[]
	_allStringsTnC[1] = ""

if rowDataNumeric[ROW__ADD__TAGS][iDataShow] = 1 then
	! Initialization for returned parameters
	dim _listProperty[]
		_listProperty[1] = ""
	dim _prefixTnC[]
		_prefixTnC[1] = ""
	dim _contentTnC[]
		_contentTnC[1] = ""

	gosub "getTnCParams"
endif

! Apartment ID
! ==============================================================================
! the values of Apartment ID rowData arrays are only loaded in the 2D script,
! because the Content Order List does not contain the Apartment ID
! ------------------------------------------------------------------------------
rowDataNumeric[ROW__APARTMAN__ID][iParentGroup] = 0
rowDataNumeric[ROW__APARTMAN__ID][iDataShow] = bShowApartmentID
rowDataString[ROW__APARTMAN__ID][iDataPrefix] = stApartmentId
rowDataString[ROW__APARTMAN__ID][iDataStrings] = ""
rowDataNumeric[ROW__APARTMAN__ID][iDataQuantity] = 0
rowDataNumeric[ROW__APARTMAN__ID][iDataQFormat] = _iQuantityString

! Custom Text 1
! ==============================================================================
rowDataString[ROW__CUSTOM__1][iDataPrefix] = sCustom1Value
rowDataString[ROW__CUSTOM__1][iDataStrings] = ""
rowDataNumeric[ROW__CUSTOM__1][iDataShow] = bShowCustom1 * showGroupDisplay[ORDER_CUSTOM]
rowDataNumeric[ROW__CUSTOM__1][iDataQuantity] = 0
rowDataNumeric[ROW__CUSTOM__1][iDataQFormat] = _iQuantityString

! Custom Text 2
! ==============================================================================
rowDataString[ROW__CUSTOM__2][iDataPrefix] = sCustom2Value
rowDataString[ROW__CUSTOM__2][iDataStrings] = ""
rowDataNumeric[ROW__CUSTOM__2][iDataShow] = bShowCustom2 * showGroupDisplay[ORDER_CUSTOM]
rowDataNumeric[ROW__CUSTOM__2][iDataQuantity] = 0
rowDataNumeric[ROW__CUSTOM__2][iDataQFormat] = _iQuantityString

! Custom Text 3
! ==============================================================================
rowDataString[ROW__CUSTOM__3][iDataPrefix] = sCustom3Value
rowDataString[ROW__CUSTOM__3][iDataStrings] = ""
rowDataNumeric[ROW__CUSTOM__3][iDataShow] = bShowCustom3 * showGroupDisplay[ORDER_CUSTOM]
rowDataNumeric[ROW__CUSTOM__3][iDataQuantity] = 0
rowDataNumeric[ROW__CUSTOM__3][iDataQFormat] = _iQuantityString

! Check String last character (:)

for i = 1 to maxNumText 
	if rowDataNumeric[i][iParentGroup] = ORDER_ADD_TAGS then
		for _tncRow = 1 to _nRowProperty
			tempPrefixString = _prefixTnC[_tncRow]
			tempContentString = _contentTnC[_tncRow]
			if tempPrefixString <> "" and (tempContentString <> "" |  rowDataNumeric[i][iDataQFormat] > 0) then
				gosub "checkPrefixString"
				_prefixTnC[_tncRow] = tempPrefixString
			endif
			_allStringsTnC[_tncRow] = _prefixTnC[_tncRow] + _contentTnC[_tncRow]
		next _tncRow
	else
		tempPrefixString = rowDataString[i][iDataPrefix]
		tempContentString = rowDataString[i][iDataStrings]
		if tempPrefixString <> "" and (tempContentString <> "" |  rowDataNumeric[i][iDataQFormat] > 0) then
			gosub "checkPrefixString"
			rowDataString[i][iDataPrefix] = tempPrefixString
		endif
		rowDataString[i][iDataAllStrings] = rowDataString[i][iDataPrefix] + rowDataString[i][iDataStrings]

		! Exeptional none-displaying at Additional Tags
		if rowDataNumeric[i][iDataQFormat] = 0 and rowDataString[i][iDataAllStrings] = "" then rowDataNumeric[i][iDataShow] = 0
	endif
next i

dim bShowDimensionUnit[]
	for i = 1 to maxNumText
		if rowDataNumeric[i][iDataQFormat] = _iQuantityString | rowDataNumeric[i][iDataQFormat] = _iQuantityLevel then
			bShowDimensionUnit[i] = 0
		else
			bShowDimensionUnit[i] = bShowDimensionUnits
		endif
	next i

! ==============================================================================
! Row_Number's Definition
! ==============================================================================

isEmpty = 1
for i = 1 to maxNumText
	if rowDataNumeric[i][iDataShow] then
		isEmpty = 0
		i = maxNumText ! force loop end
	endif
next i

if isEmpty then
	hotspot2 0,0
	end
endif

! ==============================================================================
! Fonts Style
! ==============================================================================


TEXTALIGN_LEFT			= 1
TEXTALIGN_RIGHT			= 3

! ---------- Font Size ----------
if iFontScaleType = FONT_PAPER then
	fontTitleSize	= fontTitleSizePaper
	fontTitle2Size	= fontTitle2SizePaper
	fontDataSize	= fontDataSizePaper
	lineSpacing		= lineSpacing
else
	fontTitleSize	= modelToPaper * fontTitleSizeModel
	fontTitle2Size	= modelToPaper * fontTitle2SizeModel
	fontDataSize	= modelToPaper * fontDataSizeModel
	lineSpacing		= 100/GLOB_SCALE * lineSpacing
endif

iFaceCodeTitle				= bFontTitleBold + 2 * bFontTitleItalic + 4 * bFontTitleUnder + 128 * bFontTitleStrike
iFaceCodeTitle2				= bFontTitle2Bold + 2 * bFontTitle2Italic + 4 * bFontTitle2Under + 128 * bFontTitle2Strike
iFaceCodeData				= bFontDataBold  + 2 * bFontDataItalic  + 4 * bFontDataUnder  + 128 * bFontDataStrike
if bUseSepPensForRenovSettings then
	iFaceCodeZoneNameRenovation				= bFontTitleBold	+ 2 * bFontTitleItalic	+ 4 * bZoneNameUL				+ 128 * bZoneNameST
	iFaceCode2ndZoneNameRenovation			= bFontTitleBold	+ 2 * bFontTitleItalic	+ 4 * b2ndZoneNameUL			+ 128 * b2ndZoneNameST
	iFaceCodeMeasuredAreaRenovation			= bFontDataBold		+ 2 * bFontDataItalic	+ 4 * bMeasuredAreaUL			+ 128 * bMeasuredAreaST
	iFaceCodeExistingAreaRenovation			= bFontDataBold		+ 2 * bFontDataItalic	+ 4 * bExistingAreaUL			+ 128 * bExistingAreaST
	iFaceCodeFloorFinishRenovation			= bFontDataBold		+ 2 * bFontDataItalic	+ 4 * bFloorFinishUL			+ 128 * bFloorFinishST
	iFaceCodeExistingFloorFinishRenovation	= bFontDataBold		+ 2 * bFontDataItalic	+ 4 * bExistingFloorFinishUL	+ 128 * bExistingFloorFinishST
endif


! setting font type of text line
! setting font size of text line
! setting font style of text line
! --------------------------------------------------------------------------------
for rowIdx = 1 to maxnumText
	rowDataString[rowIdx][iFontType]			= fontDataType
	rowDataNumeric[rowIdx][iDataFontSize]		= fontDataSize
	rowDataNumeric[rowIdx][iDataFontFaceCode]	= iFaceCodeData

	! exeptions
	if rowDataNumeric[rowIdx][iParentGroup] = ORDER_ZONE_NAME then
		rowDataString[rowIdx][iFontType]		= fontTitleType
		rowDataNumeric[rowIdx][iDataFontSize]	= fontTitleSize
	rowDataNumeric[rowIdx][iDataFontFaceCode]	= iFaceCodeTitle
	else
		if rowDataNumeric[rowIdx][iParentGroup] = ORDER_ZONE_NUMBER |\
			(rowDataNumeric[rowIdx][iParentGroup] = ORDER_HEIGHT_NUMBER and \
			(rowIdx = ROW__ZONE_NUMBER__ZONE_NO1 |\
			rowIdx = ROW__ZONE_NUMBER__ZONE_NO2 |\
			rowIdx = ROW__ZONE_NUMBER__ZONE_NO3)) then

			rowDataString[rowIdx][iFontType]			= fontTitle2Type
			rowDataNumeric[rowIdx][iDataFontSize]		= fontTitle2Size
			rowDataNumeric[rowIdx][iDataFontFaceCode]	= iFaceCodeTitle2
		endif
	endif
next rowIdx

! Exeptions for AUT
if bUseSepPensForRenovSettings then
	rowDataNumeric[ROW__ZONE_NAME__ZONE_NAME][iDataFontFaceCode]		= iFaceCodeZoneNameRenovation
	rowDataNumeric[ROW__ZONE_NAME__ZONE_NAME2][iDataFontFaceCode]		= iFaceCode2ndZoneNameRenovation
	rowDataNumeric[ROW__ZONE_AREAS__MES_AREA][iDataFontFaceCode]		= iFaceCodeMeasuredAreaRenovation
	rowDataNumeric[ROW__ZONE_AREAS__EXIST_AREA][iDataFontFaceCode]		= iFaceCodeExistingAreaRenovation
	rowDataNumeric[ROW__FINISHING__FLOOR][iDataFontFaceCode]			= iFaceCodeFloorFinishRenovation
	rowDataNumeric[ROW__FINISHING__FLOOR__EXIST][iDataFontFaceCode]		= iFaceCodeExistingFloorFinishRenovation
endif

! setting index of pen
! --------------------------------------------------------------------------------
for rowIdx = 1 to maxnumText
	rowDataNumeric[rowIdx][iDataPenNumber] = SYMB_VIEW_PEN
next rowIdx
! Exeptions for AUT
if bUseSepPensForRenovSettings then
	rowDataNumeric[ROW__ZONE_NAME__ZONE_NAME][iDataPenNumber]		= penZoneName
	rowDataNumeric[ROW__ZONE_NAME__ZONE_NAME2][iDataPenNumber]		= pen2ndZoneNameLine
	rowDataNumeric[ROW__ZONE_AREAS__MES_AREA][iDataPenNumber]		= penMeasuredArea
	rowDataNumeric[ROW__ZONE_AREAS__EXIST_AREA][iDataPenNumber]		= penExistingArea
	rowDataNumeric[ROW__FINISHING__FLOOR][iDataPenNumber]			= penFloorFinish
	rowDataNumeric[ROW__FINISHING__FLOOR__EXIST][iDataPenNumber]	= penExistingFloorFinish
endif

! setting text wrapping function (0/1)
! --------------------------------------------------------------------------------

for rowIdx = 1 to maxnumText
	rowDataNumeric[rowIdx][iDataWrapped] = 0
next rowIdx
! Exeptions
rowDataNumeric[ROW__ZONE_NAME__ZONE_NAME][iDataWrapped]	= 1 * bFixWidth
rowDataNumeric[ROW__ZONE_NAME__ZONE_NAME2][iDataWrapped]= 1 * bFixWidth


! Define Text Styles
! --------------------------------------------------------------------------------
	
dim textStyles[7][]
dim textAnchor[7][]
for k = 1 to 7
	for rowIdx = 1 to maxNumText
		textStyles[k][rowIdx] = ""
		textAnchor[k][rowIdx] = 0
	next rowIdx
next k

TEXTSTYLE_TITLE_MIDDLE	= 1
TEXTSTYLE_TITLE_LEFT	= 2
TEXTSTYLE_TITLE_RIGHT	= 3
TEXTSTYLE_DATA_LEFT		= 4
TEXTSTYLE_DATA_RIGHT	= 5
TEXTSTYLE_APARMENT		= 6
TEXTSTYLE_UNIT			= 7

for k = 1 to 7
	for rowIdx = 1 to maxNumText
		if k = 1 then textStyles[k][rowIdx] = "font" + "TitleMiddle" + "Style" + STR(rowIdx, 1, 0)
		if k = 2 then textStyles[k][rowIdx] = "font" + "TitleLeft" + "Style" + STR(rowIdx, 1, 0)
		if k = 3 then textStyles[k][rowIdx] = "font" + "TitleRight" + "Style" + STR(rowIdx, 1, 0)
		if k = 4 then textStyles[k][rowIdx] = "font" + "DataLeft" + "Style" + STR(rowIdx, 1, 0)
		if k = 5 then textStyles[k][rowIdx] = "font" + "DataRight" + "Style" + STR(rowIdx, 1, 0)
		if k = 6 then textStyles[k][rowIdx] = "font" + "ApartmentID" + "Style" + STR(rowIdx, 1, 0)
		if k = 7 then textStyles[k][rowIdx] = "font" + "Unit" + "Style" + STR(rowIdx, 1, 0)

		if k = 1 then _iAnchor = 2
		if k = 2 then _iAnchor = 1
		if k = 3 then _iAnchor = 3
		if k = 4 then _iAnchor = 1
		if k = 5 then _iAnchor = 3
		if k = 6 then _iAnchor = 5
		if k = 7 then _iAnchor = 3

		define style{2} textStyles[k][rowIdx] rowDataString[rowIdx][iFontType], rowDataNumeric[rowIdx][iDataFontSize], rowDataNumeric[rowIdx][iDataFontFaceCode]
		textAnchor[k][rowIdx] = _iAnchor
	next rowIdx
next k

define style{2} "fontTitleStyle"			fontTitleType,	fontTitleSize,	iFaceCodeTitle	! Title Texts Style
define style{2} "fontTitle2Style"			fontTitle2Type,	fontTitle2Size,	iFaceCodeTitle2	! Title 2 Texts Style
define style{2} "fontDataStyle"				fontDataType,	fontDataSize,	iFaceCodeData	! Data Texts Style

rrr = request("Height_of_style", "fontTitleStyle", fontTitleHeight)
rrr = request("Height_of_style", "fontTitle2Style", fontTitle2Height)
rrr = request("Height_of_style", "fontDataStyle", fontDataHeight)

if not(bAutomaticLineSpace) then
	automaticSpaceFactor = 0
	fontTitleSpace		= lineSpacing - min ( lineSpacing, fontTitleHeight)
	fontTitle2Space		= lineSpacing - min ( lineSpacing, fontTitle2Height)
	fontDataSpace		= lineSpacing - min ( lineSpacing, fontDataHeight)
else
	automaticSpaceFactor = 0.25
	fontTitleSpace		= fontDataHeight * automaticSpaceFactor
	fontTitle2Space		= fontDataHeight * automaticSpaceFactor
	fontDataSpace		= fontDataHeight * automaticSpaceFactor
endif


! setting height of text line with line spacing
! setting height of text line's offset / half of line spacing
! --------------------------------------------------------------------------------

rowDataNumeric[ROW__NONE][iFontHeight] = fontDataHeight + fontDataSpace
rowDataNumeric[ROW__NONE][iTextOffsetY] = fontDataSpace / 2

for rowIdx = 2 to maxnumText
	if rowDataNumeric[rowIdx][iDataShow] then
		rowDataNumeric[rowIdx][iFontHeight] = fontDataHeight + fontDataSpace
		rowDataNumeric[rowIdx][iTextOffsetY] = fontDataSpace / 2

		! exeptions
		if rowDataNumeric[rowIdx][iParentGroup] = ORDER_ZONE_NAME then
			rowDataNumeric[rowIdx][iFontHeight] = fontTitleHeight + fontTitleSpace
			rowDataNumeric[rowIdx][iTextOffsetY] = fontTitleSpace / 2
		else
			if rowDataNumeric[rowIdx][iParentGroup] = ORDER_ZONE_NUMBER |\
			(rowDataNumeric[rowIdx][iParentGroup] = ORDER_HEIGHT_NUMBER and \
			(rowIdx = ROW__ZONE_NUMBER__ZONE_NO1 |\
			rowIdx = ROW__ZONE_NUMBER__ZONE_NO2 |\
			rowIdx = ROW__ZONE_NUMBER__ZONE_NO3)) then
				rowDataNumeric[rowIdx][iFontHeight] = fontTitle2Height + fontTitle2Space
				rowDataNumeric[rowIdx][iTextOffsetY] = fontTitle2Space / 2
			endif
		endif
	else
		rowDataNumeric[rowIdx][iFontHeight] = 0
		rowDataNumeric[rowIdx][iTextOffsetY] = 0
	endif
next rowIdx


textAlign		= TEXTALIGN_LEFT
_textSpaceTitle = fontTitleHeight + fontTitleSpace
_textSpaceData = fontDataHeight + fontDataSpace

! ==============================================================================
! Units Lengths - set unit to vertical axis
! ==============================================================================

QUANTITY_NONE			= 1
QUANTITY_LENGTH			= 2
QUANTITY_AREA			= 3
QUANTITY_VOLUME			= 4
QUANTITY_LEVEL			= 5

iQFormat 		= 1
iQFormatisUsed 	= 2
iUnitLength 	= 3
iUnitOffset 	= 4

! initialization
dim unitAttr[5][4]	! iQFormat, iQFormatisUsed, iUnitLength, iUnitOffset
for i = 1 to 5
	for j = 1 to 4
		unitAttr[i][j] = 0
	next j
next i

unitLengthMax = 0
if bShowDimensionUnits then
	
	unitAttr[QUANTITY_NONE][iQFormat] 	= _iQuantityString
	unitAttr[QUANTITY_LENGTH][iQFormat] = _iQuantityLength
	unitAttr[QUANTITY_AREA][iQFormat] 	= _iQuantityArea
	unitAttr[QUANTITY_VOLUME][iQFormat] = _iQuantityVolume
	unitAttr[QUANTITY_LEVEL][iQFormat] 	= _iQuantityLevel
	
	for i = 1 to maxNumtext
		for iDim = 1 to 5
			if rowDataNumeric[i][iDataShow] and \
				rowDataNumeric[i][iDataQFormat] = unitAttr[iDim][iQFormat] then
				unitAttr[iDim][iQFormatisUsed] = 1
			endif
		next iDim
	next i
	

	for iDim = 1 to 5
		if unitAttr[iDim][iQFormatisUsed] then
			idx			= 1 ! temporary for font style just for calculating
			unitValue	= 0
			iUnitType	= unitAttr[iDim][iQFormat]
			textAlign 	= TEXTALIGN_LEFT
			szPrefix	= ""
			bShowText	= 0
			bShowUnit	= 1
			gosub "callQuantity"
		
			unitAttr[iDim][iUnitLength] = lengthOfUnit
			if unitAttr[iDim][iUnitLength] > unitLengthMax then unitLengthMax = unitAttr[iDim][iUnitLength]
		endif
	next iDim
	for iDim = 1 to 5
		unitAttr[iDim][iUnitOffset] = unitLengthMax - unitAttr[iDim][iUnitLength]
	next iDim

	for i = 1 to maxNumtext
		for iDim = 1 to 5
			if rowDataNumeric[i][iDataShow] and \
				rowDataNumeric[i][iDataQFormat] = unitAttr[iDim][iQFormat] then
	
				rowDataNumeric[i][iDataUnitOffset] = unitAttr[iDim][iUnitOffset]
				
			endif
		next iDim
	next i

endif


! ==============================================================================
! Frame Display
! ==============================================================================
	line_type frameLineType

	borderDistance	= fontTitleHeight / 2   ! distance of texts from borderline if frame is on

	dim _widthOffset[]
	for idx = 1 to maxNumText
		_widthOffset[idx] = 0
	next idx

	_bFrame = 0
	frameDist = 0
	frameDistHalf = 0
	_bFrameOnFirstRow = 0
	_bCellLineInside = 0
	_iFirstGroupContent = 0
	if iFrameStyle <> FRAME_NONE then
		_bFrame = 1
		if iFrameStyle = FRAME_STYLE_1 | iFrameStyle = FRAME_STYLE_3 then
			_bFrameOnFirstRow = 1
		endif
		if iFrameStyle = FRAME_STYLE_3 | iFrameStyle = FRAME_STYLE_4 then
			_bCellLineInside = 1
		endif

		frameDist		= borderDistance * 2
		frameDistHalf	= borderDistance

		for idx = 1 to maxNumText
			_widthOffset[idx] = borderDistance * 2
		next idx

		! find the first row whose frame could be turned off

		if not(_bFrameOnFirstRow) then
			for orderIdx = 1 to nOrderRow
				if _iFirstGroupContent = 0 then
					for idx = 1 to maxNumText
						if rowDataNumeric[idx][iParentGroup] = usedRows[orderIdx] &	rowDataNumeric[idx][iDataShow] = 1 then
							_iFirstGroupContent 	= usedRows[orderIdx]
							_widthOffset[idx] 		= 0
						endif
					next idx
				else
					orderIdx = nOrderRow ! force loop end
				endif	
			next orderIdx
		endif
	endif

! ==============================================================================
! Height Values Display
! ==============================================================================
! the bDisplayInsideBox boolean set the Inside Box available for order values

	markerHeight = fontDataHeight*0.625
	markerwidth = markerHeight + stw (" ")

	_bDrawInsideBox = 0
	if showGroupDisplay[ORDER_HEIGHT_NUMBER] then

			_bDrawInsideBox = 	rowDataNumeric[ROW__HEIGHT__FLOOR][iDataShow] |\
								rowDataNumeric[ROW__HEIGHT__ZONE][iDataShow] |\
								rowDataNumeric[ROW__ZONE_NUMBER__ZONE_NO1][iDataShow] |\
								rowDataNumeric[ROW__ZONE_NUMBER__ZONE_NO2][iDataShow] |\
								rowDataNumeric[ROW__ZONE_NUMBER__ZONE_NO3][iDataShow]
	
			_widthOffset[ROW__HEIGHT__FLOOR] = borderDistance * 2
			_widthOffset[ROW__HEIGHT__ZONE] = borderDistance * 2
			_widthOffset[ROW__ZONE_NUMBER__ZONE_NO1] = borderDistance * 2	
			_widthOffset[ROW__ZONE_NUMBER__ZONE_NO2] = borderDistance * 2
			_widthOffset[ROW__ZONE_NUMBER__ZONE_NO3] = borderDistance * 2

	endif

! ==============================================================================
! Zone Stamp Size
! ==============================================================================

maxStampWidth = 0
maxStampHeight = 0
for orderIdx = 1 to nOrderRow
	for idx = 1 to maxNumText
		if rowDataNumeric[idx][iParentGroup] = usedRows[orderIdx] and\
			rowDataNumeric[idx][iDataShow] then
			
			if rowDataNumeric[idx][iParentGroup] = ORDER_ADD_TAGS then
				style textStyles[1][idx]	! mindegy melyik style mert nincs Anchor

				for _tncRow = 1 to _nRowProperty
					if maxStampWidth < stw(_allStringsTnC[_tncRow]) + _widthOffset[idx] then	
						maxStampWidth = stw(_allStringsTnC[_tncRow]) + _widthOffset[idx]
					endif
					maxStampHeight = maxStampHeight + rowDataNumeric[idx][iFontHeight]
				next _tncRow
			else
				gosub "calcRowWidth"
				if maxStampWidth < rowDataNumeric[idx][iDataAllStringsLength] then	
					maxStampWidth = rowDataNumeric[idx][iDataAllStringsLength]
				endif
				maxStampHeight = maxStampHeight + rowDataNumeric[idx][iFontHeight]
			endif
		endif
	next idx
	if usedRows[orderIdx] = ORDER_NONE then
		maxStampHeight = maxStampHeight + rowDataNumeric[ROW__NONE][iFontHeight]
	endif
next orderIdx

! ==============================================================================
! Calculate Maximum Dimension
! ==============================================================================


_heightFirstGroup = 0
for idx = 1 to maxNumtext
	if rowDataNumeric[idx][iParentGroup] = _iFirstGroupContent & rowDataNumeric[idx][iDataShow] = 1 then
		if rowDataNumeric[idx][iParentGroup] = ORDER_ADD_TAGS then
			_heightFirstGroup = rowDataNumeric[idx][iFontHeight] * _nRowProperty
		else
			_heightFirstGroup = _heightFirstGroup + rowDataNumeric[idx][iFontHeight]
		endif
	endif
next idx

! Group Width design (old function)
!	Height Values align right with offset to the frame line, but align left for max string length of themself
!	Numbers align left with offset to the frame line
! Group Height design : minimum 2 x Height Values Row Height when number`s on
!	even if Height Values aren`t shown

_widthInsideBox = 0
_heightInsideBox = 0
if _bDrawInsideBox then
	_widthInsideBox = 2 * max( rowDataNumeric[ROW__HEIGHT__FLOOR][iDataAllStringsLength],\
										 rowDataNumeric[ROW__HEIGHT__ZONE][iDataAllStringsLength],\
										 rowDataNumeric[ROW__ZONE_NUMBER__ZONE_NO1][iDataAllStringsLength],\
										 rowDataNumeric[ROW__ZONE_NUMBER__ZONE_NO2][iDataAllStringsLength],\
										 rowDataNumeric[ROW__ZONE_NUMBER__ZONE_NO3][iDataAllStringsLength])
	if maxStampWidth < _widthInsideBox then
		maxStampWidth = _widthInsideBox
	endif
	! clear the height dim
	maxStampHeight = maxStampHeight\
					- rowDataNumeric[ROW__HEIGHT__FLOOR][iFontHeight]\
					- rowDataNumeric[ROW__HEIGHT__ZONE][iFontHeight]\
					- rowDataNumeric[ROW__ZONE_NUMBER__ZONE_NO1][iFontHeight]\
					- rowDataNumeric[ROW__ZONE_NUMBER__ZONE_NO2][iFontHeight]\
					- rowDataNumeric[ROW__ZONE_NUMBER__ZONE_NO3][iFontHeight]

	_heightInsideBox = max((fontDataHeight + fontDataSpace) * 2, ! by design, min 2 row height
							(rowDataNumeric[ROW__ZONE_NUMBER__ZONE_NO1][iFontHeight] +\
							rowDataNumeric[ROW__ZONE_NUMBER__ZONE_NO2][iFontHeight] +\
							rowDataNumeric[ROW__ZONE_NUMBER__ZONE_NO3][iFontHeight]) )


	maxStampHeight = maxStampHeight + _heightInsideBox
endif


if bFixWidth then	maxStampWidth = fixWidth



! ==============================================================================
! Stamp Size
! ==============================================================================
bigFontHeight	= 0
nZoneNameLines	= (bShowZoneNameLine1 + bShowZoneNameLine2) * showGroupDisplay[ORDER_ZONE_NAME]
offsetHeight	= maxStampHeight - _textSpaceTitle * nZoneNameLines - _textSpaceData * bShowZoneNameLine2 * showGroupDisplay[ORDER_ZONE_NAME]

if _bDrawInsideBox then
	if fontTitleSize > 2*fontDataSize & bShowZoneNum*showGroupDisplay[ORDER_ZONE_NUMBER] then
		bigFontHeight = (fontTitleSize-2*fontDataSize)
	endif
	stampTopY	= automaticSpaceFactor * fontDataHeight * 0.5 - _textSpaceData - offsetHeight/2
else
	stampTopY	= automaticSpaceFactor * _textSpaceData/2 - _textSpaceData - offsetHeight/2
endif
fillHeight	= maxStampHeight

stampY = stampTopY * paperToModel
stampX = (maxStampWidth/2) * paperToModel

! ==============================================================================
! Hotspots
! ==============================================================================

add2 -stampY*sin(rotAngle), (fillHeight/2*paperToModel+stampY)*cos(rotAngle)

if _iScale = SCALE_INSENSITIVE then
	hotspot2  0, 		offsetY,	unIDoffset, "offsetX_0", 1+128					:	unIDoffset = unIDoffset + 1
	hotspot2 -1, 		offsetY,	unIDoffset, "offsetX_0", 3						:	unIDoffset = unIDoffset + 1
	hotspot2 offsetX, 	offsetY,	unIDoffset, "offsetX_0", 2						:	unIDoffset = unIDoffset + 1
	hotspot2 offsetX,  	0, 			unIDoffset, "offsetY_0", 1+128					:	unIDoffset = unIDoffset + 1
	hotspot2 offsetX, 	-1, 		unIDoffset, "offsetY_0", 3						:	unIDoffset = unIDoffset + 1
	hotspot2 offsetX, 	offsetY,	unIDoffset, "offsetY_0", 2						:	unIDoffset = unIDoffset + 1
else
	if _iScale = SCALE_50 then
		hotspot2  0, 		offsetY,	unIDoffset, "offsetX_50", 1+128				:	unIDoffset = unIDoffset + 1
		hotspot2 -1, 		offsetY,	unIDoffset, "offsetX_50", 3					:	unIDoffset = unIDoffset + 1
		hotspot2 offsetX, 	offsetY,	unIDoffset, "offsetX_50", 2					:	unIDoffset = unIDoffset + 1
		hotspot2 offsetX,  	0, 			unIDoffset, "offsetY_50", 1+128				:	unIDoffset = unIDoffset + 1
		hotspot2 offsetX, 	-1, 		unIDoffset, "offsetY_50", 3					:	unIDoffset = unIDoffset + 1
		hotspot2 offsetX, 	offsetY,	unIDoffset, "offsetY_50", 2					:	unIDoffset = unIDoffset + 1
	else
		if _iScale = SCALE_100 then
			hotspot2  0, 		offsetY, 	unIDoffset, "offsetX_100", 1+128		:	unIDoffset = unIDoffset + 1
			hotspot2 -1, 		offsetY, 	unIDoffset, "offsetX_100", 3			:	unIDoffset = unIDoffset + 1
			hotspot2 offsetX, 	offsetY, 	unIDoffset, "offsetX_100", 2			:	unIDoffset = unIDoffset + 1
			hotspot2 offsetX,  	0, 			unIDoffset, "offsetY_100", 1+128		:	unIDoffset = unIDoffset + 1
			hotspot2 offsetX, 	-1, 		unIDoffset, "offsetY_100", 3			:	unIDoffset = unIDoffset + 1
			hotspot2 offsetX, 	offsetY, 	unIDoffset, "offsetY_100", 2			:	unIDoffset = unIDoffset + 1
		else
			hotspot2  0, 		offsetY, 	unIDoffset, "offsetX_200", 1+128		:	unIDoffset = unIDoffset + 1
			hotspot2 -1, 		offsetY, 	unIDoffset, "offsetX_200", 3			:	unIDoffset = unIDoffset + 1
			hotspot2 offsetX, 	offsetY, 	unIDoffset, "offsetX_200", 2			:	unIDoffset = unIDoffset + 1
			hotspot2 offsetX,  	0, 			unIDoffset, "offsetY_200", 1+128		:	unIDoffset = unIDoffset + 1
			hotspot2 offsetX, 	-1, 		unIDoffset, "offsetY_200", 3			:	unIDoffset = unIDoffset + 1
			hotspot2 offsetX, 	offsetY, 	unIDoffset, "offsetY_200", 2			:	unIDoffset = unIDoffset + 1
		endif
	endif
endif

del 1

! ==============================================================================
! Pointer, Pointer hotspots
! ==============================================================================

if iStampType = ZONE_STAMP_2_INT then
	
	unIDpointer = 1
	if _iScale = SCALE_50 then
		if bPointer then
			_ydistFromMiddle = 0										! Middle
			if iPointerAnchor = 1 then									! Upper
				_ydistFromMiddle = fillHeight * paperToModel + stampY
			else
				if iPointerAnchor = 3 then								! Lower
					_ydistFromMiddle = stampY
				endif
			endif
			add2 0, _ydistFromMiddle

			pen penPointer
			line_type ltPointer

			if iPointerSide = 1 then
				line2 offsetX - maxStampWidth * paperToModel / 2, offsetY, offsetX - pointerHorDist, offsetY
	
				hotspot2 offsetX, 					offsetY,	unIDpointer, pointerHorDist_50, 1+128		:	unIDpointer = unIDpointer + 1
				hotspot2 offsetX + 1, 				offsetY,	unIDpointer, pointerHorDist_50, 3			:	unIDpointer = unIDpointer + 1
				hotspot2 offsetX - pointerHorDist,	offsetY,	unIDpointer, pointerHorDist_50, 2			:	unIDpointer = unIDpointer + 1

				gosub "calculatePointerDims"

				line2 offsetX - pointerHorDist, offsetY, pointerOffsetX + _pointerHeadOffsetX, pointerOffsetY + _pointerHeadOffsetY
				
				gosub "drawArrowHead"				
			else
				line2 offsetX + maxStampWidth * paperToModel / 2, offsetY, offsetX + pointerHorDist, offsetY
	
				hotspot2 offsetX, 					offsetY,	unIDpointer, pointerHorDist_50, 1+128		:	unIDpointer = unIDpointer + 1
				hotspot2 offsetX - 1, 				offsetY,	unIDpointer, pointerHorDist_50, 3			:	unIDpointer = unIDpointer + 1
				hotspot2 offsetX + pointerHorDist,	offsetY,	unIDpointer, pointerHorDist_50, 2			:	unIDpointer = unIDpointer + 1
	
				gosub "calculatePointerDims"

				line2 offsetX + pointerHorDist, offsetY, pointerOffsetX + _pointerHeadOffsetX, pointerOffsetY + _pointerHeadOffsetY

				gosub "drawArrowHead"
			endif

			hotspot2 0, 				pointerOffsetY,	unIDpointer, pointerOffsetX_50, 1+128		:	unIDpointer = unIDpointer + 1
			hotspot2 -1, 				pointerOffsetY,	unIDpointer, pointerOffsetX_50, 3			:	unIDpointer = unIDpointer + 1
			hotspot2 pointerOffsetX, 	pointerOffsetY,	unIDpointer, pointerOffsetX_50, 2			:	unIDpointer = unIDpointer + 1

			hotspot2 pointerOffsetX, 	0,				unIDpointer, pointerOffsetY_50, 1+128		:	unIDpointer = unIDpointer + 1
			hotspot2 pointerOffsetX, 	-1,				unIDpointer, pointerOffsetY_50, 3			:	unIDpointer = unIDpointer + 1
			hotspot2 pointerOffsetX, 	pointerOffsetY,	unIDpointer, pointerOffsetY_50, 2			:	unIDpointer = unIDpointer + 1
		
			del 1
		endif
	else
		if _iScale = SCALE_100 then
			if bPointer then
				_ydistFromMiddle = 0										! Middle
				if iPointerAnchor = 1 then									! Upper
					_ydistFromMiddle = fillHeight * paperToModel + stampY
				else
					if iPointerAnchor = 3 then								! Lower
						_ydistFromMiddle = stampY
					endif
				endif
				add2 0, _ydistFromMiddle

				pen penPointer
				line_type ltPointer

				if iPointerSide = 1 then
					line2 offsetX - maxStampWidth * paperToModel / 2, offsetY, offsetX - pointerHorDist, offsetY
	
					hotspot2 offsetX, 					offsetY,	unIDpointer, pointerHorDist_100, 1+128		:	unIDpointer = unIDpointer + 1
					hotspot2 offsetX + 1, 				offsetY,	unIDpointer, pointerHorDist_100, 3			:	unIDpointer = unIDpointer + 1
					hotspot2 offsetX - pointerHorDist,	offsetY,	unIDpointer, pointerHorDist_100, 2			:	unIDpointer = unIDpointer + 1

					gosub "calculatePointerDims"

					line2 offsetX - pointerHorDist, offsetY, pointerOffsetX + _pointerHeadOffsetX, pointerOffsetY + _pointerHeadOffsetY
				
					gosub "drawArrowHead"				
				else
					line2 offsetX + maxStampWidth * paperToModel / 2, offsetY, offsetX + pointerHorDist, offsetY
	
					hotspot2 offsetX, 					offsetY,	unIDpointer, pointerHorDist_100, 1+128		:	unIDpointer = unIDpointer + 1
					hotspot2 offsetX - 1, 				offsetY,	unIDpointer, pointerHorDist_100, 3			:	unIDpointer = unIDpointer + 1
					hotspot2 offsetX + pointerHorDist,	offsetY,	unIDpointer, pointerHorDist_100, 2			:	unIDpointer = unIDpointer + 1
	
					gosub "calculatePointerDims"

					line2 offsetX + pointerHorDist, offsetY, pointerOffsetX + _pointerHeadOffsetX, pointerOffsetY + _pointerHeadOffsetY

					gosub "drawArrowHead"
				endif

				hotspot2 0, 				pointerOffsetY,	unIDpointer, pointerOffsetX_100, 1+128		:	unIDpointer = unIDpointer + 1
				hotspot2 -1, 				pointerOffsetY,	unIDpointer, pointerOffsetX_100, 3			:	unIDpointer = unIDpointer + 1
				hotspot2 pointerOffsetX, 	pointerOffsetY,	unIDpointer, pointerOffsetX_100, 2			:	unIDpointer = unIDpointer + 1

				hotspot2 pointerOffsetX, 	0,				unIDpointer, pointerOffsetY_100, 1+128		:	unIDpointer = unIDpointer + 1
				hotspot2 pointerOffsetX, 	-1,				unIDpointer, pointerOffsetY_100, 3			:	unIDpointer = unIDpointer + 1
				hotspot2 pointerOffsetX, 	pointerOffsetY,	unIDpointer, pointerOffsetY_100, 2			:	unIDpointer = unIDpointer + 1
		
				del 1
			endif
		else
			if _iScale = SCALE_200 then
				if bPointer then
					_ydistFromMiddle = 0										! Middle
					if iPointerAnchor = 1 then									! Upper
						_ydistFromMiddle = fillHeight * paperToModel + stampY
					else
						if iPointerAnchor = 3 then								! Lower
							_ydistFromMiddle = stampY
						endif
					endif
					add2 0, _ydistFromMiddle

					pen penPointer
					line_type ltPointer

					if iPointerSide = 1 then
						line2 offsetX - maxStampWidth * paperToModel / 2, offsetY, offsetX - pointerHorDist, offsetY
	
						hotspot2 offsetX, 					offsetY,	unIDpointer, pointerHorDist_200, 1+128		:	unIDpointer = unIDpointer + 1
						hotspot2 offsetX + 1, 				offsetY,	unIDpointer, pointerHorDist_200, 3			:	unIDpointer = unIDpointer + 1
						hotspot2 offsetX - pointerHorDist,	offsetY,	unIDpointer, pointerHorDist_200, 2			:	unIDpointer = unIDpointer + 1

						gosub "calculatePointerDims"

						line2 offsetX - pointerHorDist, offsetY, pointerOffsetX + _pointerHeadOffsetX, pointerOffsetY + _pointerHeadOffsetY
				
						gosub "drawArrowHead"				
					else
						line2 offsetX + maxStampWidth * paperToModel / 2, offsetY, offsetX + pointerHorDist, offsetY
	
						hotspot2 offsetX, 					offsetY,	unIDpointer, pointerHorDist_200, 1+128		:	unIDpointer = unIDpointer + 1
						hotspot2 offsetX - 1, 				offsetY,	unIDpointer, pointerHorDist_200, 3			:	unIDpointer = unIDpointer + 1
						hotspot2 offsetX + pointerHorDist,	offsetY,	unIDpointer, pointerHorDist_200, 2			:	unIDpointer = unIDpointer + 1
	
						gosub "calculatePointerDims"

						line2 offsetX + pointerHorDist, offsetY, pointerOffsetX + _pointerHeadOffsetX, pointerOffsetY + _pointerHeadOffsetY

						gosub "drawArrowHead"
					endif

					hotspot2 0, 				pointerOffsetY,	unIDpointer, pointerOffsetX_200, 1+128		:	unIDpointer = unIDpointer + 1
					hotspot2 -1, 				pointerOffsetY,	unIDpointer, pointerOffsetX_200, 3			:	unIDpointer = unIDpointer + 1
					hotspot2 pointerOffsetX, 	pointerOffsetY,	unIDpointer, pointerOffsetX_200, 2			:	unIDpointer = unIDpointer + 1
	
					hotspot2 pointerOffsetX, 	0,				unIDpointer, pointerOffsetY_200, 1+128		:	unIDpointer = unIDpointer + 1
					hotspot2 pointerOffsetX, 	-1,				unIDpointer, pointerOffsetY_200, 3			:	unIDpointer = unIDpointer + 1
					hotspot2 pointerOffsetX, 	pointerOffsetY,	unIDpointer, pointerOffsetY_200, 2			:	unIDpointer = unIDpointer + 1
		
					del 1
				endif
			else
				if bPointer then
					_ydistFromMiddle = 0										! Middle
					if iPointerAnchor = 1 then									! Upper
						_ydistFromMiddle = fillHeight * paperToModel + stampY
					else
						if iPointerAnchor = 3 then								! Lower
							_ydistFromMiddle = stampY
						endif
					endif
					add2 0, _ydistFromMiddle

					pen penPointer
					line_type ltPointer

					if iPointerSide = 1 then
						line2 offsetX - maxStampWidth * paperToModel / 2, offsetY, offsetX - pointerHorDist, offsetY
	
						hotspot2 offsetX, 					offsetY,	unIDpointer, pointerHorDist_0, 1+128		:	unIDpointer = unIDpointer + 1
						hotspot2 offsetX + 1, 				offsetY,	unIDpointer, pointerHorDist_0, 3			:	unIDpointer = unIDpointer + 1
						hotspot2 offsetX - pointerHorDist,	offsetY,	unIDpointer, pointerHorDist_0, 2			:	unIDpointer = unIDpointer + 1

						gosub "calculatePointerDims"

						line2 offsetX - pointerHorDist, offsetY, pointerOffsetX + _pointerHeadOffsetX, pointerOffsetY + _pointerHeadOffsetY
				
						gosub "drawArrowHead"				
					else
						line2 offsetX + maxStampWidth * paperToModel / 2, offsetY, offsetX + pointerHorDist, offsetY
	
						hotspot2 offsetX, 					offsetY,	unIDpointer, pointerHorDist_0, 1+128		:	unIDpointer = unIDpointer + 1
						hotspot2 offsetX - 1, 				offsetY,	unIDpointer, pointerHorDist_0, 3			:	unIDpointer = unIDpointer + 1
						hotspot2 offsetX + pointerHorDist,	offsetY,	unIDpointer, pointerHorDist_0, 2			:	unIDpointer = unIDpointer + 1
	
						gosub "calculatePointerDims"

						line2 offsetX + pointerHorDist, offsetY, pointerOffsetX + _pointerHeadOffsetX, pointerOffsetY + _pointerHeadOffsetY

						gosub "drawArrowHead"
					endif

					hotspot2 0, 				pointerOffsetY,	unIDpointer, pointerOffsetX_0, 1+128		:	unIDpointer = unIDpointer + 1
					hotspot2 -1, 				pointerOffsetY,	unIDpointer, pointerOffsetX_0, 3			:	unIDpointer = unIDpointer + 1
					hotspot2 pointerOffsetX, 	pointerOffsetY,	unIDpointer, pointerOffsetX_0, 2			:	unIDpointer = unIDpointer + 1
	
					hotspot2 pointerOffsetX, 	0,				unIDpointer, pointerOffsetY_0, 1+128		:	unIDpointer = unIDpointer + 1
					hotspot2 pointerOffsetX, 	-1,				unIDpointer, pointerOffsetY_0, 3			:	unIDpointer = unIDpointer + 1
					hotspot2 pointerOffsetX, 	pointerOffsetY,	unIDpointer, pointerOffsetY_0, 2			:	unIDpointer = unIDpointer + 1
		
					del 1
				endif
			endif
		endif
	endif
	
endif

add2 offsetX, offsetY
mul2 paperToModel, paperToModel

fill fillType
pen framePen
line_type frameLineType

add2 -maxStampWidth/2, stampTopY

if abs(fillHeight) > EPS & abs(maxStampWidth) > EPS then
	if bBackFill then
		poly2_B{2} 5, 2, fillPen, fillBackPen,
			0,		 0,		0,
			0,		 0,		1,
			0,		 fillHeight,	1,
			maxStampWidth, fillHeight,	1,
			maxStampWidth, 0,		1,
			0,		 0,		1
	endif
else
	if maxStampWidth > EPS then
		line2 0,0, maxStampWidth,0
	else
		if fillHeight > EPS then
			line2 0,0, 0,fillHeight
		endif
	endif
endif
del 1

hotspot2 -maxStampWidth/2, stampTopY, unID					:	unID = unID + 1
hotspot2 maxStampWidth/2, stampTopY, unID					:	unID = unID + 1
hotspot2 -maxStampWidth/2, stampTopY+fillHeight, unID		:	unID = unID + 1
hotspot2 maxStampWidth/2, stampTopY+fillHeight, unID		:	unID = unID + 1

! Frame Boundary and Feedback Boundary
if _bFrame | bFeedBack then
	pen framePen
	line_type frameLineType

	! -- for feedback needed the overall size not depending on Frame Styles (e.g. height of first group) --
	if bFeedBack then _heightFirstGroup = 0

	if maxStampWidth > EPS & ( fillHeight - _heightFirstGroup) > EPS then
		rect2 -maxStampWidth/2, stampTopY,  maxStampWidth/2, stampTopY+fillHeight-_heightFirstGroup
	endif
endif


! ==============================================================================
! Draw Zone Stamp
! ==============================================================================
nRow		= 0
currentPosY	= 0
rot2 rotAngle
add2 -maxStampWidth/2, stampTopY+fillHeight

gosub "drawApartmentID"

for orderIdx = 1 to nOrderRow
	if usedRows[orderIdx] = ORDER_HEIGHT_NUMBER then
		if _bDrawInsideBox then ! it means the group is not empty
			gosub "drawHeightWithNum"
			currentPosY = currentPosY + _heightInsideBox
		endif
	else
		if usedRows[orderIdx] = ORDER_NONE then
			currentPosY = currentPosY + rowDataNumeric[ROW__NONE][iFontHeight]
		else
			for idx = 1 to maxNumText
				if 	rowDataNumeric[idx][iParentGroup] = usedRows[orderIdx] &\
					rowDataNumeric[idx][iDataShow] then

					if rowDataNumeric[idx][iParentGroup] = ORDER_ADD_TAGS then
						style textStyles[1][idx]

						for _tncRow = 1 to _nRowProperty
							rowDataString[idx][iDataPrefix]			= _prefixTnC[_tncRow]
							rowDataString[idx][iDataStrings] 		= _contentTnC[_tncRow]
							rowDataNumeric[idx][iDataPrefixLength]	= stw(_prefixTnC[_tncRow])
	
							gosub "printRow"
							if _bCellLineInside then gosub "drawStampLine"
						next _tncRow
					else
						gosub "printRow"
						if _bCellLineInside then gosub "drawStampLine"
					endif
				endif
			next idx
		endif
	endif
next orderIdx
del 4



END

! ==============================================================================
! Subroutines
! ==============================================================================

! ==============================================================================
"drawApartmentID":
! ------------------------------------------------------------------------------
!	Draw Apartment ID
! ==============================================================================
	if bShowApartmentID then
		pen SYMB_VIEW_PEN

		apartmentIDstartX = maxStampWidth / 2
		apartmentIDstartY = _textSpaceData

		widthApartmentID = stw (stApartmentId)

		add2 0,					apartmentIDstartY / 2

		add2 apartmentIDstartX,	apartmentIDstartY

		mul2 modelToPaper, modelToPaper

		if _iScale = SCALE_INSENSITIVE then
			hotspot2  0, 					apartmentIDoffsetY,	unIDap, "apartmentIDoffsetX_0", 1+128				:	unIDap = unIDap + 1
			hotspot2 -1, 					apartmentIDoffsetY,	unIDap, "apartmentIDoffsetX_0", 3					:	unIDap = unIDap + 1
			hotspot2 apartmentIDoffsetX, 	apartmentIDoffsetY,	unIDap, "apartmentIDoffsetX_0", 2					:	unIDap = unIDap + 1
			hotspot2 apartmentIDoffsetX,  	0, 					unIDap, "apartmentIDoffsetY_0", 1+128				:	unIDap = unIDap + 1
			hotspot2 apartmentIDoffsetX, 	-1, 				unIDap, "apartmentIDoffsetY_0", 3					:	unIDap = unIDap + 1
			hotspot2 apartmentIDoffsetX, 	apartmentIDoffsetY,	unIDap, "apartmentIDoffsetY_0", 2					:	unIDap = unIDap + 1
		else
			if _iScale = SCALE_50 then
				hotspot2  0, 					apartmentIDoffsetY,	unIDap, "apartmentIDoffsetX_50", 1+128			:	unIDap = unIDap + 1
				hotspot2 -1, 					apartmentIDoffsetY,	unIDap, "apartmentIDoffsetX_50", 3				:	unIDap = unIDap + 1
				hotspot2 apartmentIDoffsetX, 	apartmentIDoffsetY,	unIDap, "apartmentIDoffsetX_50", 2				:	unIDap = unIDap + 1
				hotspot2 apartmentIDoffsetX,  	0, 					unIDap, "apartmentIDoffsetY_50", 1+128			:	unIDap = unIDap + 1
				hotspot2 apartmentIDoffsetX, 	-1, 				unIDap, "apartmentIDoffsetY_50", 3				:	unIDap = unIDap + 1
				hotspot2 apartmentIDoffsetX, 	apartmentIDoffsetY,	unIDap, "apartmentIDoffsetY_50", 2				:	unIDap = unIDap + 1
			else
				if _iScale = SCALE_100 then
					hotspot2  0, 					apartmentIDoffsetY, 	unIDap, "apartmentIDoffsetX_100", 1+128		:	unIDap = unIDap + 1
					hotspot2 -1, 					apartmentIDoffsetY, 	unIDap, "apartmentIDoffsetX_100", 3			:	unIDap = unIDap + 1
					hotspot2 apartmentIDoffsetX, 	apartmentIDoffsetY, 	unIDap, "apartmentIDoffsetX_100", 2			:	unIDap = unIDap + 1
					hotspot2 apartmentIDoffsetX,	0, 						unIDap, "apartmentIDoffsetY_100", 1+128		:	unIDap = unIDap + 1
					hotspot2 apartmentIDoffsetX, 	-1, 					unIDap, "apartmentIDoffsetY_100", 3			:	unIDap = unIDap + 1
					hotspot2 apartmentIDoffsetX, 	apartmentIDoffsetY, 	unIDap, "apartmentIDoffsetY_100", 2			:	unIDap = unIDap + 1
				else
					hotspot2  0, 					apartmentIDoffsetY, 	unIDap, "apartmentIDoffsetX_200", 1+128		:	unIDap = unIDap + 1
					hotspot2 -1, 					apartmentIDoffsetY, 	unIDap, "apartmentIDoffsetX_200", 3			:	unIDap = unIDap + 1
					hotspot2 apartmentIDoffsetX, 	apartmentIDoffsetY, 	unIDap, "apartmentIDoffsetX_200", 2			:	unIDap = unIDap + 1
					hotspot2 apartmentIDoffsetX,  	0, 						unIDap, "apartmentIDoffsetY_200", 1+128		:	unIDap = unIDap + 1
					hotspot2 apartmentIDoffsetX, 	-1, 					unIDap, "apartmentIDoffsetY_200", 3			:	unIDap = unIDap + 1
					hotspot2 apartmentIDoffsetX, 	apartmentIDoffsetY, 	unIDap, "apartmentIDoffsetY_200", 2			:	unIDap = unIDap + 1
				endif
			endif
		endif

		! for compatibility, here was tempradius hotspots (for a paper size length)
		unIDap = unIDap + 3
		

		del 1

		add2 apartmentIDoffsetX * modelToPaper, apartmentIDoffsetY * modelToPaper

		widthApartmentID = stw (stApartmentId)

		if iApartmentIdFrame = APARTMENT_ID_FRAME_OVAL or iApartmentIdFrame = APARTMENT_ID_FRAME_CIRC then
			tempWidthApartmentID = widthApartmentID/2
		else
			tempWidthApartmentID = widthApartmentID/2 + borderDistance*(iApartmentIdFrame <> APARTMENT_ID_FRAME_NONE)
		endif

		if _iScale = SCALE_INSENSITIVE then
			hotspot2 0,													0, 												unIDap, "apartmentIDangle_0", 6			: unIDap = unIDap + 1
			hotspot2 0, 												-apartmentIDstartY/2, 							unIDap, "apartmentIDangle_0", 4+128		: unIDap = unIDap + 1
			hotspot2 apartmentIDstartY * sin(apartmentIDangle) / 2,		-apartmentIDstartY * cos(apartmentIDangle) / 2,	unIDap, "apartmentIDangle_0", 5			: unIDap = unIDap + 1
		else
			if _iScale = SCALE_50 then
				hotspot2 0,													0, 												unIDap, "apartmentIDangle_50", 6		: unIDap = unIDap + 1
				hotspot2 0, 												-apartmentIDstartY/2, 							unIDap, "apartmentIDangle_50", 4+128		: unIDap = unIDap + 1
				hotspot2 apartmentIDstartY * sin(apartmentIDangle) / 2,		-apartmentIDstartY * cos(apartmentIDangle) / 2,	unIDap, "apartmentIDangle_50", 5		: unIDap = unIDap + 1
			else
				if _iScale = SCALE_100 then
					hotspot2 0,													0, 												unIDap, "apartmentIDangle_100", 6		: unIDap = unIDap + 1
					hotspot2 0, 												-apartmentIDstartY/2, 							unIDap, "apartmentIDangle_100", 4+128	: unIDap = unIDap + 1
					hotspot2 apartmentIDstartY * sin(apartmentIDangle) / 2,		-apartmentIDstartY * cos(apartmentIDangle) / 2,	unIDap, "apartmentIDangle_100", 5		: unIDap = unIDap + 1
				else
					hotspot2 0,													0, 												unIDap, "apartmentIDangle_200", 6		: unIDap = unIDap + 1
					hotspot2 0, 												-apartmentIDstartY/2, 							unIDap, "apartmentIDangle_200", 4+128	: unIDap = unIDap + 1
					hotspot2 apartmentIDstartY * sin(apartmentIDangle) / 2,		-apartmentIDstartY * cos(apartmentIDangle) / 2,	unIDap, "apartmentIDangle_200", 5		: unIDap = unIDap + 1
				endif
			endif
		endif

		rot2 apartmentIDangle

		add2 0, -apartmentIDstartY / 2

		textStyleName	= textStyles[TEXTSTYLE_APARMENT][1]
		_textblock_anchor		= textAnchor[TEXTSTYLE_APARMENT][1]
		stText			= stApartmentID
		_bFixWidth		= 0
		_parAlignment	= 1		! Paragraph Left Aligned
		gosub "makeParagraph"
		richtext2 0, _textSpaceData / 2, "textBlock" + textStyleName

		! Background Fill or Frame
		if bBackFill | iApartmentIdFrame <> APARTMENT_ID_FRAME_NONE then
			if iApartmentIdFrame = APARTMENT_ID_FRAME_OVAL then
				put -tempWidthApartmentID, 0, 1,
					 tempWidthApartmentID, 0, 1,
					 tempWidthApartmentID, _textSpaceData/2, 901,
					 0, 180, 4001,
					-tempWidthApartmentID, _textSpaceData, 1,
					-tempWidthApartmentID, _textSpaceData/2, 901,
					 0, 180, 4001
			else
				if iApartmentIdFrame = APARTMENT_ID_FRAME_CIRC then
					if bFixRadius then
						_circleFrameRadius = frameRadius
					else
						_circleFrameRadius = max(_textSpaceData, stw(stApartmentId)) / 2
					endif

					put 0,	_textSpaceData/2,	901,
						_circleFrameRadius,	360,	4001
				else
					put -tempWidthApartmentID, 0, 1,
						 tempWidthApartmentID, 0, 1,
						 tempWidthApartmentID, _textSpaceData, 1,
						-tempWidthApartmentID, _textSpaceData, 1,
						-tempWidthApartmentID, 0, -1
				endif
			endif

			fill fillType
			pen framePen
			line_type frameLineType

			poly2_B{2} nsp/3, (bBackFill * 2)+((iApartmentIdFrame <> APARTMENT_ID_FRAME_NONE) | GLOB_CONTEXT > 19), fillPen, fillBackPen,
				0,		 0,		0,
				get(nsp)
		endif

		del 3 + 2
	endif
return


! ==============================================================================
"drawStampLine":
! ------------------------------------------------------------------------------
!	Input variable:
!		_bFrame:				set by Frame Style
!		_bFrameOnFirstRow:		set by Frame Style, the first row could be different
!		_iFirstGroupContent:	group integer who is the first
!		currentPosY
!		rowDataNumeric[idx][iFontHeight]
!		maxStampWidth
! ==============================================================================
	if _bFrame then
		pen framePen
		line_type frameLineType
		if not(not(_bFrameOnFirstRow) and _iFirstGroupContent 	= usedRows[orderIdx]) then
			rect2 0, -currentPosY + rowDataNumeric[idx][iFontHeight],  maxStampWidth, -currentPosY
		endif
	endif
return


! ==============================================================================
"drawHeightWithNum":
! ------------------------------------------------------------------------------
! TODO - report
! ==============================================================================
	pen framePen
	line_type frameLineType

	rect2 0, -currentPosY, +maxStampWidth, -currentPosY-_heightInsideBox
	line2 +maxStampWidth/2, -currentPosY, +maxStampWidth/2, -currentPosY-_heightInsideBox
	line2 +maxStampWidth/2, -currentPosY-_heightInsideBox/2, +maxStampWidth, -currentPosY-_heightInsideBox/2


	_numPosY = currentPosY
	_beginY =  - _heightInsideBox/2 + (rowDataNumeric[ROW__ZONE_NUMBER__ZONE_NO1][iFontHeight] +\
										rowDataNumeric[ROW__ZONE_NUMBER__ZONE_NO2][iFontHeight] +\
										rowDataNumeric[ROW__ZONE_NUMBER__ZONE_NO3][iFontHeight]) /2
	for iH = 1 to 3
		if iH = 1 then idx = ROW__ZONE_NUMBER__ZONE_NO1
		if iH = 2 then idx = ROW__ZONE_NUMBER__ZONE_NO2
		if iH = 3 then idx = ROW__ZONE_NUMBER__ZONE_NO3

		if rowDataNumeric[idx][iDataShow] then
			pen rowDataNumeric[idx][iDataPenNumber]
			style textStyles[TEXTSTYLE_TITLE_LEFT][idx]

			! Left 1st
			textStyleName			= textStyles[TEXTSTYLE_DATA_LEFT][idx]
			_textblock_anchor		= textAnchor[TEXTSTYLE_DATA_LEFT][idx]
			stText					= rowDataString[idx][iDataPrefix]
			_bFixWidth				= abs(rowDataNumeric[idx][iDataWrapped] > EPS) & bFixWidth
			_parAlignment			= 1		! Paragraph Left Aligned
			gosub "makeParagraph"
			richtext2 borderDistance, _beginY -_numPosY - rowDataNumeric[idx][iTextOffsetY], "textBlock" + textStyleName

			_numPosY = _numPosY + rowDataNumeric[idx][iFontHeight]
		endif
	next iH


	_numPosY = currentPosY
	_markerPosX	= max( rowDataNumeric[ROW__HEIGHT__FLOOR][iDataAllStringsLength], \
						rowDataNumeric[ROW__HEIGHT__ZONE][iDataAllStringsLength]) - borderDistance

	nTrans = 0

	idx = ROW__HEIGHT__FLOOR
	pen rowDataNumeric[idx][iDataPenNumber]
	style textStyles[TEXTSTYLE_TITLE_LEFT][idx]

	if rowDataNumeric[idx][iDataShow] then
		_beginY =  - _heightInsideBox/4 + rowDataNumeric[ROW__HEIGHT__FLOOR][iFontHeight]/2

		add2 maxStampWidth - _markerPosX, _beginY -_numPosY - rowDataNumeric[idx][iTextOffsetY]
		nTrans = nTrans + 1

		if iPrefixFloorLevel = PREFIX_MARKER then
			gosub "drawMarker"
			add2 markerWidth, 0
			nTrans = nTrans + 1
		endif

		unitValue	= rowDataNumeric[idx][iDataQuantity]
		iUnitType	= rowDataNumeric[idx][iDataQFormat]
		textAlign	= TEXTALIGN_LEFT
		szPrefix	= rowDataString[idx][iDataPrefix] + rowDataString[idx][iDataStrings]
		bShowText	= 1
		bShowUnit	= 0

		gosub "callQuantity"
		del nTrans : nTrans = 0
	endif


	idx = ROW__HEIGHT__ZONE
	pen rowDataNumeric[idx][iDataPenNumber]
	style textStyles[TEXTSTYLE_TITLE_LEFT][idx]

	if rowDataNumeric[idx][iDataShow] then
		_beginY =  - _heightInsideBox/4*3 + rowDataNumeric[ROW__HEIGHT__ZONE][iFontHeight]/2

		add2 maxStampWidth - _markerPosX, _beginY -_numPosY - rowDataNumeric[idx][iTextOffsetY]
		nTrans = nTrans + 1

		if iPrefixZoneLevel = PREFIX_MARKER then
			gosub "drawMarker"
			add2 markerWidth, 0
			nTrans = nTrans + 1
		endif

		unitValue	= rowDataNumeric[idx][iDataQuantity]
		iUnitType	= rowDataNumeric[idx][iDataQFormat]
		textAlign	= TEXTALIGN_LEFT
		szPrefix	= rowDataString[idx][iDataPrefix] + rowDataString[idx][iDataStrings]
		bShowText	= 1
		bShowUnit	= 0
	
		gosub "callQuantity"
		del nTrans : nTrans = 0
	endif

return

! ==============================================================================
"drawMarker":
! ------------------------------------------------------------------------------
! ==============================================================================

	pen SYMB_VIEW_PEN
	line_type 1

	markerHeight = fontDataHeight * 0.625
	markerwidth = markerHeight + stw (" ")
	_posyMarker = (fontDataHeight - markerHeight/sqr(2)) / 2

	add2 0, -  _posyMarker

	_forepen = SYMB_VIEW_PEN
	_backpen = SYMB_VIEW_PEN

	if idx = ROW__HEIGHT__FLOOR then
		_iMarkerStyle = iMarkerFloorLevel
	endif
	if idx = ROW__HEIGHT__ZONE then
		_iMarkerStyle = iMarkerZoneLevel
	endif

	if _iMarkerStyle = MARKER_TRIANGLE_FILLBOTH then

		fill typeFillMarker1
		_forepen = penFillMarker1
		_backpen = bgpenFillMarker1
		poly2_b{2} 3, 1 * not(bFeedBack) + 2 + 4,
			_forepen, _backpen,
			0,0,0,
			0, 0,	1,
			markerHeight/2, -markerHeight/sqr(2), 1,
			markerHeight/2, 0, 1

		fill typeFillMarker2
		_forepen = penFillMarker2
		_backpen = bgpenFillMarker2
		poly2_b{2} 3, 1 * not(bFeedBack) + 2 + 4,
			_forepen, _backpen,
			0,0,0,
			markerHeight/2,		0,	1,
			markerHeight,		0, 1,
			markerHeight/2,		-markerHeight/sqr(2), 1
	endif

	if _iMarkerStyle = MARKER_TRIANGLE_FILL1 |\
		_iMarkerStyle = MARKER_TRIANGLE_FILL2 then

		if _iMarkerStyle = MARKER_TRIANGLE_FILL1 then
			fill typeFillMarker1
			_forepen = penFillMarker1
			_backpen = bgpenFillMarker1
		else
			fill typeFillMarker2
			_forepen = penFillMarker2
			_backpen = bgpenFillMarker2
		endif

		poly2_b{2} 3, 1 * not(bFeedBack) + 2 + 4,
			_forepen, _backpen,
			0,0,0,
			0, 0,	1,
			markerHeight/2, -markerHeight/sqr(2), 1,
			markerHeight, 0, 1
	endif

	if _iMarkerStyle = MARKER_CIRCLE_FILLBOTH |\
		_iMarkerStyle = MARKER_CIRCLE_FILL1 then

		add2 markerHeight/2,-markerHeight/sqr(2)/2

		_radius = markerHeight/2 - markerHeight/8

		poly2_b{2} 2, 1 * not(bFeedBack) + 4,
			_forepen, _backpen,
			0,0,0,
			0,0,901,
			_radius, 360,	4001
		line2 markerHeight/2, 0, -markerHeight/2,0
		line2 0,markerHeight/2,0,-markerHeight/2

		for iSector = 1 to 4
			if _iMarkerStyle = MARKER_CIRCLE_FILLBOTH & (iSector = 1 or iSector = 3) then
				fill typeFillMarker2
				_forepen = penFillMarker2
				_backpen = bgpenFillMarker2
			else
				fill typeFillMarker1
				_forepen = penFillMarker1
				_backpen = bgpenFillMarker1
			endif

			poly2_b{2} 4, 2 + 4,
				_forepen, _backpen, 0,0,0,
				0,			0,	1,
				_radius, 	0,	1,
				0,	0,			901,
				_radius, 90,	4001

			rot2 90
		next iSector
		del iSector-1

		del 1
	endif
	del 1

	line_type frameLineType
return

! ==============================================================================
!
! General Subroutines
!
! ==============================================================================

! ==============================================================================
"callQuantity":
! ------------------------------------------------------------------------------
!	Call Quantity Text Macro
! ------------------------------------------------------------------------------
!	Input Parameters:
!		modelToPaper:			Scale (real)
!		unitValue				Printed Unit Value (double)
!		iUnitType				Unit Type (integer) see "Units"
!		textAlign				Text Align	(1 left, 3 right) (integer)
!		szPrefix				String Prefix value (±,-)
!		bShowUnit				Show Unit (bool)
!		bShowSuperScript		Show Superscrit (bool)
!	Output Parameters:
!		totalLength:			Quantity Total Length (length)
!		textboxHeight:			Quantity Total Height (length)
!		szExtraPrecision:		Quantity Extra Precision (string)
!		lengthOfIntegerPart:	Length of Integer Part (length)
!		lengthOfUnit:			Length of Unit (length)
! ==============================================================================
	mul2 modelToPaper, modelToPaper
	call "quantity_text_writer" parameters 	lengthValue				= unitValue,
											iUnitType				= iUnitType * (rowDataString[idx][iDataQCustomFormat] = ""),
											GS_iMarkerDir			= 1,
											horizontalAlignment 	= textAlign,
											verticalAlignment		= 2,
											AC_TextFont				= rowDataString[idx][iFontType],
											AC_TextSize				= rowDataNumeric[idx][iDataFontSize],
											AC_TextStyle			= rowDataNumeric[idx][iDataFontFaceCode],
											szPrefix				= szPrefix,
											custom_form				= rowDataString[idx][iDataQCustomFormat],
											AC_Readable				= 0,
											gs_readable_angle		= 90,
											useLeadingAndDescent	= 1,
											bShowText				= bShowText,
											bShowUnit				= bShowUnit,
											bShowSuperScript		= bShowSuperScript,
											bFeedBackMode			= 0,	! feedback boundary for sript details
					returned_parameters		totalLength,
											textboxHeight,
											szExtraPrecision,
											lengthOfIntegerPart,
											lengthOfUnit
	del 1
return


! ==============================================================================
"calcRowWidth":
! ------------------------------------------------------------------------------
!	Calculation one row width, height, etc..
! ------------------------------------------------------------------------------
! TODO - report
! ==============================================================================
	! iDataStringLength - total without prefix and unitoffset

	bShowText = 0
! Width

	style textStyles[1][idx]	! mindegz melzik style mert nincs Anchor TODO

	rowDataNumeric[idx][iDataPrefixLength] 		= stw (rowDataString[idx][iDataPrefix])
	rowDataNumeric[idx][iDataStringLength] 		= stw (rowDataString[idx][iDataStrings])
	rowDataNumeric[idx][iDataAllStringsLength] 	= stw (rowDataString[idx][iDataAllStrings])

	! values with units are formatted with quantity macro
	if abs(rowDataNumeric[idx][iDataQFormat] - _iQuantityString) > EPS then
		unitValue	= rowDataNumeric[idx][iDataQuantity]
		iUnitType	= rowDataNumeric[idx][iDataQFormat]
		szPrefix	= rowDataString[idx][iDataPrefix]
		bShowText	= 0
		bShowUnit	= bShowDimensionUnit[idx]
		gosub "callQuantity"	! returned lengthOfUnit, totalLength

		rowDataNumeric[idx][iDataStringLength] = totalLength - rowDataNumeric[idx][iDataPrefixLength]
		rowDataNumeric[idx][iDataAllStringsLength] = totalLength + rowDataNumeric[idx][iDataUnitOffset]
	endif

	! Exeptions Height Values with Marker
	if idx = ROW__HEIGHT__FLOOR | idx = ROW__HEIGHT__ZONE then

		!  Height Values with his own style
		markerHeight = fontDataHeight*0.625
		markerwidth = markerHeight + stw (" ")

		if (idx = ROW__HEIGHT__FLOOR and iPrefixFloorLevel = PREFIX_MARKER) |\
			 (idx = ROW__HEIGHT__ZONE and iPrefixZoneLevel = PREFIX_MARKER) then
			! iDataPrefix`s empty
			rowDataNumeric[idx][iDataPrefixLength] = markerwidth
		else
			! iDataPrefix`s filled in MS script
			rowDataNumeric[idx][iDataPrefixLength] = stw (rowDataString[idx][iDataPrefix])
		endif
		! (+/-)
		rowDataNumeric[idx][iDataStringLength] 		= stw (rowDataString[idx][iDataStrings])

		unitValue	= rowDataNumeric[idx][iDataQuantity]
		iUnitType	= rowDataNumeric[idx][iDataQFormat]
		szPrefix	= rowDataString[idx][iDataPrefix] + rowDataString[idx][iDataStrings]
		bShowText	= 0
		bShowUnit	= bShowDimensionUnit[idx]
		gosub "callQuantity"	! returned lengthOfUnit, totalLength
	
		if (idx = ROW__HEIGHT__FLOOR and iPrefixFloorLevel = PREFIX_MARKER) |\
			 (idx = ROW__HEIGHT__ZONE and iPrefixZoneLevel = PREFIX_MARKER) then	
			rowDataNumeric[idx][iDataStringLength] = totalLength
			rowDataNumeric[idx][iDataAllStringsLength] = rowDataNumeric[idx][iDataPrefixLength] + totalLength ! without rowDataNumeric[idx][iDataUnitOffset]
		else
			rowDataNumeric[idx][iDataStringLength] = totalLength - rowDataNumeric[idx][iDataPrefixLength]
			rowDataNumeric[idx][iDataAllStringsLength] = totalLength 	! without rowDataNumeric[idx][iDataUnitOffset]
		endif
	endif

	! Exeptions Names with word wrapping
	! Only for width and Height Calculations
	if rowDataNumeric[idx][iDataWrapped] & bFixWidth then
		textStyleName			= textStyles[1][idx]
		_parAlignment			= 1						! Paragraph Left Aligned
		_textblock_anchor		= textAnchor[1][idx]
		stText					= rowDataString[idx][iDataAllStrings]
		_bFixWidth				= bFixWidth
		gosub "makeParagraph"
		n = REQUEST ("TEXTBLOCK_INFO", "textBlock" + textStyleName, _textblock_width, _textblock_height)

		rowDataNumeric[idx][iFontHeight] = _textblock_height + 2*rowDataNumeric[idx][iTextOffsetY]
		rowDataNumeric[idx][iDataAllStringsLength] = _textblock_width

	endif


	rowDataNumeric[idx][iDataAllStringsLength] = rowDataNumeric[idx][iDataAllStringsLength] + _widthOffset[idx]


return

! ==============================================================================
"getTnCParams":
! Additional Tags`re sorted from the Tags and Categories
! - subroutine function: setting number of Additional Tags rows and content
! "None" displaying is by design:
! if a user sets the create sortings row type to none, then empty rows 
! (epmty instead "none") would be displayed only between two non-empty rows,
! At the begin and at the end the empty rows are not displyed. 
! For analyzing use TnCParamRequest macro with _sContentTnC array as returned variable
! for help:
! 	call "ZoneStampProperties_m" parameters all bDebug = 1
! ==============================================================================

	
	! Request results in multiple rows: 
	!  group = 2; name = 3; value = 5
	dim _columns[5]	! [iTncDisplayData]
		_columns[1] =     3 * 5	! DISPLAYDATABY_NAMEVALUE
		_columns[2] =     3   	! DISPLAYDATABY_NAME
		_columns[3] =         5	! DISPLAYDATABY_VALUE
		_columns[4] = 2 * 3    	! DISPLAYDATABY_GROUPNAME
		_columns[5] = 2 * 3 * 5	! DISPLAYDATABY_GROUPNAMEVALUE
	
	call "ZoneStampProperties_m" parameters all iScale					=_iScale, ! set the parameters to use depending on GLOB_SCALE
	
                                                ! displayed datas of properties
                                                bUsePropertyFolder			= not(_columns[iTncDisplayData] mod 2),
                                                bUsePropertyName			= not(_columns[iTncDisplayData] mod 3),
                                                bUsePropertyValue 			= not(_columns[iTncDisplayData] mod 5),
	
                                returned_parameters _nRowProperty, _nColuProperty, _listProperty
                                ! listProperty is became to a single dimension array (a type of linear array)
                                ! it has to be sepparated by each columns

	! Converting rows of the result
	for i = 1 to _nRowProperty
		! initializaton
		_prefixTnC[i] = ""
		_contentTnC[i] = ""
	
		! Set first column 
		_contentTnC[i] = _listProperty[_nColuProperty * i]
	
		! Set second column
		if _nColuProperty > 1 then
			_prefixTnC[i] = _listProperty[_nColuProperty * (i-1) + 1]
	
			if _nColuProperty > 2 then
				! Hack: if more columns, concatenate to the first column
				for j = 2 to _nColuProperty - 1
					_cellValue = _listProperty[_nColuProperty * (i-1) + j]
					_separator1 = ""
					_separator2 = ""
					if _prefixTnC[i] # "" and _cellValue # "" then
						_separator1 = " ("
						_separator2 = ")"
					endif
					_prefixTnC[i] = _cellValue + _separator1 + _prefixTnC[i] + _separator2
				next j
			endif
		else
			if (_columns[iTncDisplayData] mod 5) > 0 then	! Property Value not displayed
				_prefixTnC[i] = _contentTnC[i]
				_contentTnC[i] = ""
			endif
		endif
	next i
return

! ==============================================================================
"printRow":
! ------------------------------------------------------------------------------
! TODO - report
! ==============================================================================

	bShowText = 1
	pen rowDataNumeric[idx][iDataPenNumber]

	! Title in Zone_Stamp_2
	if	iStampType = ZONE_STAMP_2_INT          &\
		rowDataNumeric[idx][iDataQFormat] = 0  &\
		rowDataString[idx][iDataStrings] = ""	then

		textStyleName			= textStyles[iAlignTexts + 1][idx]
		_textblock_anchor		= textAnchor[iAlignTexts + 1][idx]
		stText					= rowDataString[idx][iDataPrefix]
		_bFixWidth				= rowDataNumeric[idx][iDataWrapped] & bFixWidth

		if _bFixWidth = 1 then
			if iAlignTexts = ALIGN_MIDDLE then
				_parAlignment = 2
			else
				if iAlignTexts = ALIGN_LEFT then
					_parAlignment = 1
				else											! ALIGN_RIGHT
					_parAlignment = 3
				endif
			endif
		else
			_parAlignment		= 1					! Paragraph Left Aligned
		endif
		gosub "makeParagraph"

		if iAlignTexts = ALIGN_MIDDLE then
			_posx = maxStampWidth/2
		else
			if iAlignTexts = ALIGN_LEFT then
				_posx = _widthOffset[idx]/2
			else											! ALIGN_RIGHT
				_posx = maxStampWidth - _widthOffset[idx]/2
			endif
		endif

		richtext2 _posx, -currentPosY - rowDataNumeric[idx][iTextOffsetY], "textBlock" + textStyleName
	else
	! Left 1st
		textStyleName			= textStyles[TEXTSTYLE_DATA_LEFT][idx]
		_parAlignment			= 1											! Paragraph Left Aligned
		_textblock_anchor		= textAnchor[TEXTSTYLE_DATA_LEFT][idx]
		stText					= rowDataString[idx][iDataPrefix]
		_bFixWidth				= rowDataNumeric[idx][iDataWrapped] & bFixWidth
		gosub "makeParagraph"

		richtext2 _widthOffset[idx]/2, -currentPosY - rowDataNumeric[idx][iTextOffsetY], "textBlock" + textStyleName
	endif

	! Exeptions Height Values
	! by design there is only left alignment
	! iAlignNumericalValues = ALIGN_LEFT
	if idx = ROW__HEIGHT__FLOOR | idx = ROW__HEIGHT__ZONE then

		if (idx = ROW__HEIGHT__FLOOR and iPrefixFloorLevel = PREFIX_MARKER) |\
			( idx = ROW__HEIGHT__ZONE and iPrefixZoneLevel = PREFIX_MARKER)  then

			_posx = frameDistHalf
			add2 _posx, -currentPosY - rowDataNumeric[idx][iTextOffsetY]
			gosub "drawMarker"
			del 1
		endif

		_posx = frameDistHalf + rowDataNumeric[idx][iDataPrefixLength]
		add2 _posx, -currentPosY - rowDataNumeric[idx][iTextOffsetY]

		unitValue = rowDataNumeric[idx][iDataQuantity]
		iUnitType = rowDataNumeric[idx][iDataQFormat]
		textAlign = ALIGN_LEFT
		szPrefix = rowDataString[idx][iDataStrings]
		bShowText	= 1
		bShowUnit	= bShowDimensionUnit[idx]
		gosub "callQuantity"
		del 1
	else
        ! Right 2nd
        if rowDataNumeric[idx][iDataQFormat] = 0 then
            textStyleName			= textStyles[iAlignStringValues + 3][idx]
            _parAlignment			= 1											! Paragraph Left Aligned
            _textblock_anchor		= textAnchor[iAlignStringValues + 3][idx]
            stText					= rowDataString[idx][iDataStrings]
            _bFixWidth				= 0
            gosub "makeParagraph"
            if iAlignStringValues = ALIGN_LEFT then
                _posx = frameDistHalf + rowDataNumeric[idx][iDataPrefixLength]
            else
                _posx = maxStampWidth - frameDistHalf
            endif
            richtext2 _posx , -currentPosY - rowDataNumeric[idx][iTextOffsetY], "textBlock" + textStyleName
        else
			if iAlignNumericalValues = ALIGN_LEFT then
				_posx = frameDistHalf + rowDataNumeric[idx][iDataPrefixLength]
			else
				_posx = maxStampWidth - frameDistHalf - rowDataNumeric[idx][iDataUnitOffset]
			endif
			add2 _posx, -currentPosY - rowDataNumeric[idx][iTextOffsetY]

			unitValue = rowDataNumeric[idx][iDataQuantity]
			iUnitType = rowDataNumeric[idx][iDataQFormat]
			textAlign	= (iAlignNumericalValues  = ALIGN_LEFT) * 1 + (iAlignNumericalValues  = ALIGN_RIGHT) * 3
			szPrefix = ""
			bShowText	= 1
			bShowUnit	= bShowDimensionUnit[idx]
			gosub "callQuantity"
			del 1
		endif
	endif

	
	currentPosY = currentPosY + rowDataNumeric[idx][iFontHeight]

return

! ==============================================================================
"makeParagraph":
! ------------------------------------------------------------------------------
!	Input Parameters:
!		textStyleName:			Current Text Style Name
!		_parAlignment:			Alignment of the paragraph
!		stText:					Current string
!		_textblock_anchor:		Current Anchor Position
!		_bFixWidth:				FixWidth
!	Output Parameters:			none
! ==============================================================================

	PARAGRAPH textStyleName _parAlignment, 0, 0, 0, 1, 0
		style textStyleName
		stText
	ENDPARAGRAPH
	TEXTBLOCK "textBlock" + textStyleName _bFixWidth * fixWidth, _textblock_anchor, 0, 1, 1, 0, textStyleName
return

! ==============================================================================
"draw_data_table":
! ------------------------------------------------------------------------------
! TODO - report
! ==============================================================================
summa = 0
for idx = 1 to maxNumText

if rowDataNumeric[idx][iDataShow] then summa = summa + 1

	posx = 0: widthColu = 1.5: posy = 0 : heightRow = 0.2
	! Header
	define style{2} "header" "Arial", 2, 1
	style "header"
		text2 posx, posy, "iDataName"
		posx = posx + widthColu
		text2 posx, posy,"iDataPrefix"
		posx = posx + widthColu
		text2 posx, posy,"iDataStrings"
		posx = posx + widthColu
		text2 posx, posy, "iDataAllStrings"
		posx = posx + widthColu
		text2 posx, posy, "iFontType"
		posx = posx + widthColu
	
		text2 posx, posy, "iParentGroup"
		posx = posx + widthColu
		text2 posx, posy, "iDataShow"
		posx = posx + widthColu
		text2 posx, posy, "iDataQuantity"
		posx = posx + widthColu
		text2 posx, posy, "iDataQFormat"
		posx = posx + widthColu
		text2 posx, posy, "iDataFontSize"
		posx = posx + widthColu
		text2 posx, posy, "iDataFontFaceCode"
		posx = posx + widthColu
		text2 posx, posy, "iDataPenNumber"
		posx = posx + widthColu
		text2 posx, posy, "iDataUnitOffset"
		posx = posx + widthColu	
		text2 posx, posy, "iDataPrefixLength"
		posx = posx + widthColu	
		text2 posx, posy, "iDataStringLength"
		posx = posx + widthColu	
		text2 posx, posy, "iDataAllStringsLength"
		posx = posx + widthColu
		text2 posx, posy, "iDataWrapped"
		posx = posx + widthColu	
		text2 posx, posy, "iFontHeight"
		posx = posx + widthColu	
	! Block
	define style{2} "block1" "Arial", 1, 0
	style "block1"
	
		posx = 0: widthColu = 1.5: posy = posy - idx : heightRow = 0.2
		for iColu = 1 to 5
			text2 posx,posy ,rowDataString[idx][iColu]
			posx = posx + widthColu
		next iColu
	
		for iColu = 1 to 13
			text2 posx,posy ,rowDataNumeric[idx][iColu]
			posx = posx + widthColu
		next iColu

		text2 posx,posy ,rowDataString[idx][1]
		posx = posx + widthColu
next idx
text2 10,1,"summa" 
text2 12,1, str(summa ,1,0)
return

! ==============================================================================
"checkPrefixString":		!Check String last character (:)
! ------------------------------------------------------------------------------
!	Input Parameters:
!		tempPrefixString:	String
!	Output Parameters:
!		tempPrefixString:	Modified String
! ==============================================================================
	if tempPrefixString <> "" then
		prefixStringLength = strlen(tempPrefixString)
		if strsub(tempPrefixString, prefixStringLength, prefixStringLength) = ":" then
			tempPrefixString = tempPrefixString + " "
		else
			tempPrefixString = tempPrefixString + ": "
		endif
	endif
return

! ==============================================================================
"calculatePointerDims":		! Calculate Pointer length and angle
! ------------------------------------------------------------------------------
!	Input Parameters:
!		iArrowHeadTypes: 		Integer
!		bArrowhead:				Boolean
!		arrowheadSize:			RealNum
!		iPointerSide: 			Integer
!	Output Parameters:		
!		_anglePointer: 			Calculated Angle of the pointer	
!		_angleArrow:			Angle of the Arrowhead
!		_pointerHeadOffsetX:	Offset of the pointer end in X dimension
!		_pointerHeadOffsetY:	Offset of the pointer end in Y dimension
! ==============================================================================
	if iPointerSide = 1 then
		if abs(offsetX - pointerHorDist - pointerOffsetX) > EPS then
			if offsetX - pointerHorDist - pointerOffsetX > EPS then
				_anglePointer = atn((offsetY - pointerOffsetY) / (offsetX - pointerHorDist - pointerOffsetX))
			else
				_anglePointer = 180 + atn((offsetY - pointerOffsetY) / (offsetX - pointerHorDist - pointerOffsetX))
			endif
		else
			if pointerOffsetY > offsetY then
				_anglePointer = 270
			else
				_anglePointer = 90
			endif
		endif
	else
		if abs(offsetX + pointerHorDist - pointerOffsetX) > EPS then
			if offsetX + pointerHorDist - pointerOffsetX > EPS then
				_anglePointer = atn((offsetY - pointerOffsetY) / (offsetX + pointerHorDist - pointerOffsetX))
			else
				_anglePointer = 180 + atn((offsetY - pointerOffsetY) / (offsetX + pointerHorDist - pointerOffsetX))
			endif
		else
			if pointerOffsetY > offsetY then
				_anglePointer = 270
			else
				_anglePointer = 90
			endif
		endif
	endif

	if bArrowhead then
		if 	iArrowHeadType = TRIANG_2LIN_45 |\
			iArrowHeadType = TRIANG_3LIN_45 |\
			iArrowHeadType = TRIANG_FILLED_45 then

			_angleArrow = 22.5
		endif

		if 	iArrowHeadType = TRIANG_2LIN_30 |\
			iArrowHeadType = TRIANG_3LIN_30 |\
			iArrowHeadType = TRIANG_FILLED_30 then

			_angleArrow = 15
		endif

		if 	iArrowHeadType = TRIANG_2LIN_15 |\
			iArrowHeadType = TRIANG_3LIN_15 |\
			iArrowHeadType = TRIANG_FILLED_15 then

			_angleArrow = 7.5
		endif
		
		if 	iArrowHeadType = TRIANG_2LIN_45 |\
			iArrowHeadType = TRIANG_2LIN_30 |\
			iArrowHeadType = TRIANG_2LIN_15 then

			_pointerHeadOffsetX = 0
			_pointerHeadOffsetX = 0
		else
			if 	iArrowHeadType = CIRCLE_EMPTY |\
				iArrowHeadType = CIRCLE_FILLED then

				_pointerHeadOffsetX = cos(_anglePointer) * (arrowheadSize / 2 * paperToModel)
				_pointerHeadOffsetY = sin(_anglePointer) * (arrowheadSize / 2 * paperToModel)
			else
				_pointerHeadOffsetX = cos(_anglePointer) * (arrowheadSize / 2 * paperToModel / tan(_angleArrow))
				_pointerHeadOffsetY = sin(_anglePointer) * (arrowheadSize / 2 * paperToModel / tan(_angleArrow))
			endif
		endif
	else
		_pointerHeadOffsetX = 0
		_pointerHeadOffsetY = 0
	endif
return

! ==============================================================================
"drawArrowHead":			! Draw Arrowhead for the Pointer
! ------------------------------------------------------------------------------
!	Input Parameters:
!		iArrowHeadTypes: 	Integer
!		bArrowhead:			Boolean
!		arrowheadSize:		RealNum
!		_anglePointer: 		Calculated Angle of the pointer
!		_angleArrow:		Angle of the Arrowhead
!	Output Parameters:
!		None
! ==============================================================================
	if bArrowhead then
		pen penArrowhead
		line_type 1			! Solid Line

		add2 pointerOffsetX, pointerOffsetY
		rot2 _anglePointer

		if 	iArrowHeadType = TRIANG_2LIN_45 |\
			iArrowHeadType = TRIANG_3LIN_45 |\
			iArrowHeadType = TRIANG_2LIN_30 |\
			iArrowHeadType = TRIANG_3LIN_30 |\
		 	iArrowHeadType = TRIANG_2LIN_15 |\
			iArrowHeadType = TRIANG_3LIN_15 then

			line2 0, 0, arrowheadSize / 2 * paperToModel / tan(_angleArrow), arrowheadSize / 2 * paperToModel
			line2 0, 0, arrowheadSize / 2 * paperToModel / tan(_angleArrow), - arrowheadSize / 2 * paperToModel
			
			if 	iArrowHeadType = TRIANG_3LIN_45 |\
				iArrowHeadType = TRIANG_3LIN_30 |\
				iArrowHeadType = TRIANG_3LIN_15 then

				line2	arrowheadSize / 2 * paperToModel / tan(_angleArrow), arrowheadSize / 2 * paperToModel, \
						arrowheadSize / 2 * paperToModel / tan(_angleArrow), - arrowheadSize / 2 * paperToModel
			endif
		else
			if iArrowHeadType = CIRCLE_EMPTY then
				circle2 0, 0, arrowheadSize / 2 * paperToModel
			else
				define solid_fill "arrowheadfill"
				fill arrowheadfill
	
				if 	iArrowHeadType = TRIANG_FILLED_45 |\
					iArrowHeadType = TRIANG_FILLED_30 |\
					iArrowHeadType = TRIANG_FILLED_15 then
	
					poly2_A 3, 1+2+4, penArrowhead,
							0,														0,									1,
							arrowheadSize / 2 * paperToModel / tan(_angleArrow), 	arrowheadSize / 2 * paperToModel,	1,
							arrowheadSize / 2 * paperToModel / tan(_angleArrow), - arrowheadSize / 2 * paperToModel,	1
				else
					poly2_A 2, 1+2+4, penArrowhead,
							0, 									0, 		900,
							arrowheadSize / 2 * paperToModel,	360, 	4001
				endif
			endif
		endif

		del 2
	endif

return
