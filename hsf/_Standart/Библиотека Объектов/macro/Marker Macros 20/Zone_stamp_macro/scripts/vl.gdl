

dim temp_stGroupOrder[]
	for i = 1 to 11
		temp_stGroupOrder[i] = ""
	next i
dim temp_iGroupOrder[]
	for i = 1 to 11
		temp_iGroupOrder[i] = 0
	next i

maxPenNumber = 255
dim iPenNumber[255]
for i = 1 to maxPenNumber
	iPenNumber[i] = i
next i


isFirstRun = 0
n = APPLICATION_QUERY ("parameter_script", "firstoccasion_in_progress", isFirstRun)

if GLOB_UI_BUTTON_ID < 0 then
	parameters gs_ui_current_page = -GLOB_UI_BUTTON_ID
endif


if bScaleSensitive then
	! ==============================================================================
	! Representation Values 50
	! ==============================================================================

	_iScaleFrom			= SCALE_50
	_scaleExt 			= "_50"
	_nGroupDisplay 		= nOrder_50
	_tempButtonID		= BUTTON_ID_50

	gosub "charge_temporary_array_with_integer_and_string_params_50"

	! ---------- Order 01 - 11 ----------
	for iGroup = 1 to nMaxGroupDisplay
		gosub "set_parameters_values"
		gosub "connect_Integer_and_String"
	next iGroup

	gosub "hide_locked_orderparameters"

	! ---------- Define Order ----------

	values "nOrder_50" range [1, nMaxGroupDisplay]

	! Define Order editing from Parameter List Setting dialog
	! -- on UI: Add/Delete buttons are working just on UI
	! -- on PL: display maximum Row Number

	gosub "analyse_paramlist_orderparams_to_set_ordering_if_add"

	gosub "analyse_ui_orderbuttons_to_set_ordering"

	if GLOB_MODPAR_NAME = "bDisplayInsideBox_50" then
		gosub "set_ordering_default_controlled_by_displaying_box"
	endif

	gosub "writeOrder_50"

	bgZoneName_50		= 0
	bgZoneNo_50			= 0
	bgZoneID_50			= 0
	bgApartment_50		= 0
	bgFinishes_50		= 0
	bgHeight_50			= 0
	bgHeightNumber_50	= 0
	bgZoneArea_50		= 0
	bgWindowArea_50		= 0
	bgSize_50			= 0
	bgAreaCode_50		= 0
	bgOnorm_50			= 0
	bgAddTags_50		= 0
	bgCustom_50			= 0
	for i = 1 to min(__nGroupDisplay, nMaxGroupDisplay)
		if temp_iGroupOrder[i] = ORDER_ZONE_NAME		then bgZoneName_50		= 1
		if temp_iGroupOrder[i] = ORDER_ZONE_NUMBER		then bgZoneNo_50		= 1
		if temp_iGroupOrder[i] = ORDER_ID				then bgZoneID_50		= 1
		if temp_iGroupOrder[i] = ORDER_APARTMENT		then bgApartment_50		= 1
		if temp_iGroupOrder[i] = ORDER_FINISHING		then bgFinishes_50		= 1
		if temp_iGroupOrder[i] = ORDER_HEIGHT			then bgHeight_50		= 1
		if temp_iGroupOrder[i] = ORDER_HEIGHT_NUMBER	then bgHeightNumber_50	= 1
		if temp_iGroupOrder[i] = ORDER_ZONE_AREAS		then bgZoneArea_50		= 1
		if temp_iGroupOrder[i] = ORDER_WINDOW_AREA		then bgWindowArea_50	= 1
		if temp_iGroupOrder[i] = ORDER_SIZE				then bgSize_50			= 1
		if temp_iGroupOrder[i] = ORDER_AREA_CODE_GER	then bgAreaCode_50		= 1
		if temp_iGroupOrder[i] = ORDER_ONORM_AUT		then bgOnorm_50			= 1
		if temp_iGroupOrder[i] = ORDER_ADD_TAGS			then bgAddTags_50		= 1
		if temp_iGroupOrder[i] = ORDER_CUSTOM			then bgCustom_50		= 1
	next i

	if not(bgZoneName_50) then
		hideparameter	"bShowZoneNameLine1_50", "bShowZoneNameLine2_50"
		lock			"bShowZoneNameLine1_50", "bShowZoneNameLine2_50"
	endif

	if bDisplayInsideBox_50 then
		if not(bgHeightNumber_50) then
			hideparameter	"bShowHeightZone_50", "bShowHeightFloor_50", "bShowZoneNum_50"
			lock			"bShowHeightZone_50", "bShowHeightFloor_50", "bShowZoneNum_50"

			if iStampType = ZONE_STAMP_NOR then
				hideparameter	"bShowZoneNum2_50", "bShowZoneNum3_50"
				lock			"bShowZoneNum2_50", "bShowZoneNum3_50"
			endif
		endif
	else
		if not(bgHeight_50) then
			hideparameter	"bShowHeightZone_50", "bShowHeightFloor_50"
			lock			"bShowHeightZone_50", "bShowHeightFloor_50"
		endif

		if not(bgZoneNo_50) then
			hideparameter	"bShowZoneNum_50"
			lock			"bShowZoneNum_50"

			if iStampType = ZONE_STAMP_NOR then
				hideparameter	"bShowZoneNum2_50", "bShowZoneNum3_50"
				lock			"bShowZoneNum2_50", "bShowZoneNum3_50"
			endif
		endif
	endif

	if not(bgZoneID_50) then
		hideparameter	"bShowZoneCatCode_50", "bShowID_50"
		lock			"bShowZoneCatCode_50", "bShowID_50"
	endif

	if not(bgApartment_50) then
		hideparameter	"bShowApartmentName_50", "bShowPosition_50", "bShowHouseNumber_50", "bShowFunctions_50"
		lock			"bShowApartmentName_50", "bShowPosition_50", "bShowHouseNumber_50", "bShowFunctions_50"
	endif

	if not(bgFinishes_50) then
		hideparameter	"bShowFloor_50", "bShowCeiling_50", "bShowWallFinish_50"
		lock			"bShowFloor_50", "bShowCeiling_50", "bShowWallFinish_50"
        
        if iStampType = ZONE_STAMP_ON then
			hideparameter	"bShowExistFloor_50"
			lock			"bShowExistFloor_50"
		endif
	endif

	if not(bgZoneArea_50) then
		hideparameter	"bShowMeasuredArea_50", "bShowMeasuredNetArea_50", "bShowReducedArea_50", "bShowCalculatedArea_50"
		lock			"bShowMeasuredArea_50", "bShowMeasuredNetArea_50", "bShowReducedArea_50", "bShowCalculatedArea_50"

		if iStampType = ZONE_STAMP_ON then
			hideparameter	"bShowExistArea_50"
			lock			"bShowExistArea_50"
		endif

		if iStampType = ZONE_STAMP_DIN then
			hideparameter	"bShowVentArea_50"
			lock			"bShowVentArea_50"
		endif
	endif

	if not(bgWindowArea_50) then
		hideparameter	"bShowWindowArea_50"
		lock			"bShowWindowArea_50"
	endif

	if not(bgSize_50) then
		hideparameter	"bShowPerimeter_50", "bShowCeilingHeight_50", "bShowVolume_50"
		lock			"bShowPerimeter_50", "bShowCeilingHeight_50", "bShowVolume_50"
	endif

	if iStampType = ZONE_STAMP_DIN & not(bgAreaCode_50) then
		hideparameter	"bShowClassification_50"
		lock			"bShowClassification_50"
	endif

	if iStampType = ZONE_STAMP_ON & not(bgOnorm_50) then
		hideparameter	"bShowOnormData_50"
		lock			"bShowOnormData_50"
	endif
	
	if not(bgAddTags_50) then
		hideparameter	"bShowAdditionalTags_50"
		lock			"bShowAdditionalTags_50"
	endif

	if not(bgCustom_50) then
		hideparameter	"bShowCustom1_50", "bShowCustom2_50", "bShowCustom3_50"
		lock			"bShowCustom1_50", "bShowCustom2_50", "bShowCustom3_50"
	endif

	! ---------- Apartment ID ----------
	values "apartmentIdFrame_50" stApartmentIdFrame
	values "iApartmentIdFrame_50" APARTMENT_ID_FRAME_NONE, APARTMENT_ID_FRAME_RECT, APARTMENT_ID_FRAME_OVAL, APARTMENT_ID_FRAME_CIRC
	if GLOB_MODPAR_NAME = "apartmentIdFrame_50" then
		for i = 1 to vardim1(stApartmentIdFrame)
			if apartmentIdFrame_50 = stApartmentIdFrame[i] then
				iApartmentIdFrame_50 = vardim1(stApartmentIdFrame) - i
				i = vardim1(stApartmentIdFrame)
			endif
		next i
		parameters iApartmentIdFrame_50 = iApartmentIdFrame_50
	else
		iApartmentIdFrame_50 = max(min(iApartmentIdFrame_50,vardim1(stApartmentIdFrame)-1),0)
		parameters apartmentIdFrame_50 = stApartmentIdFrame[vardim1(stApartmentIdFrame)-iApartmentIdFrame_50]
	endif

	if not(bShowApartmentID_50) then
		hideparameter	"apartmentIdFrame_50", "iApartmentIdFrame_50", "apartmentIDoffsetX_50", "apartmentIDoffsetY_50", "apartmentIDangle_50", "bFixRadius_50", "frameRadius_50"
		lock			"apartmentIdFrame_50", "iApartmentIdFrame_50", "apartmentIDoffsetX_50", "apartmentIDoffsetY_50", "apartmentIDangle_50", "bFixRadius_50", "frameRadius_50"
	endif

	! ---------- Fixed Radius ----------
	if iApartmentIdFrame_50 <> APARTMENT_ID_FRAME_CIRC then
		hideparameter	"bFixRadius_50", "frameRadius_50"
		lock			"bFixRadius_50", "frameRadius_50"
	endif
	values "frameRadius_50" range (0, )

	if not(bFixRadius_50) then
		hideparameter	"frameRadius_50"
		lock			"frameRadius_50"
	endif


	! ---------- Frame ----------
	values "sFrameStyle_50" stFrameStyle
	values "iFrameStyle_50" 1,2,3,4,5
	if GLOB_MODPAR_NAME = "sFrameStyle_50" then
		for i = 1 to vardim1(stFrameStyle)
			if sFrameStyle_50 = stFrameStyle[i] then
				iFrameStyle_50 = i
				i = vardim1(stFrameStyle)
			endif
		next i
		parameters iFrameStyle_50 = iFrameStyle_50
	else
		iFrameStyle_50 = max(min(iFrameStyle_50,vardim1(stFrameStyle)),1)
		parameters sFrameStyle_50 = stFrameStyle[iFrameStyle_50]
	endif

	! ---------- Fixed Width ----------
	if not(bFixWidth_50) then
		hideparameter	"fixWidth_50"
		lock			"fixWidth_50"
	endif
	values "fixWidth_50"	range (0,)

	! ---------- Texts Align ----------
	if iStampType = ZONE_STAMP_2_INT then
		values{2} "iAlignTexts_50" 	0, `Середина`,
									1, `Слева`,
									2, `Справа`
	endif

	! ---------- Numerical Values Align ----------
	values "sAlignNumericalValues_50" stDataAlign
	values "iAlignNumericalValues_50" 1,2
	if GLOB_MODPAR_NAME = "sAlignNumericalValues_50" then
		for i = 1 to vardim1(stDataAlign)
			if sAlignNumericalValues_50 = stDataAlign[i] then
				iAlignNumericalValues_50 = i
				i = vardim1(stDataAlign)
			endif
		next i
		parameters iAlignNumericalValues_50 = iAlignNumericalValues_50
	else
		iAlignNumericalValues_50 = max(min(iAlignNumericalValues_50,vardim1(stDataAlign)),1)
		parameters sAlignNumericalValues_50 = stDataAlign[iAlignNumericalValues_50]
	endif

	! ---------- Finish Text Align ----------
	values "sAlignStringValues_50" stDataAlign
	values "iAlignStringValues_50" 1,2
	if GLOB_MODPAR_NAME = "sAlignStringValues_50" then
		for i = 1 to vardim1(stDataAlign)
			if sAlignStringValues_50 = stDataAlign[i] then
				iAlignStringValues_50 = i
				i = vardim1(stDataAlign)
			endif
		next i
		parameters iAlignStringValues_50 = iAlignStringValues_50
	else
		iAlignStringValues_50 = max(min(iAlignStringValues_50,vardim1(stDataAlign)),1)
		parameters sAlignStringValues_50 = stDataAlign[iAlignStringValues_50]
	endif

	! ---------- Fonts ----------
	values "fontScaleType_50" stFontScale
	values "iFontScaleType_50" FONT_MODEL, FONT_PAPER
	if GLOB_MODPAR_NAME = "fontScaleType_50" then
		for i = 1 to vardim1(stFontScale)
			if fontScaleType_50 = stFontScale[i] then
				iFontScaleType_50 = i
				i = vardim1(stFontScale)
			endif
		next i
		parameters iFontScaleType_50 = iFontScaleType_50
	else
		iFontScaleType_50 = max(min(iFontScaleType_50,vardim1(stFontScale)),1)
		parameters fontScaleType_50 = stFontScale[iFontScaleType_50]
	endif

	if bAutomaticLineSpace_50 then
		hideparameter	"lineSpacing_50"
		lock			"lineSpacing_50"
	endif

	if not(bShowDimensionUnits_50) then
		hideparameter	"bShowSuperScript_50"
		lock			"bShowSuperScript_50"
	endif


	values "lineSpacing_50"		range [0,]

	if fontTitleSizePaper_50 < eps then
		fontTitleSizePaper_50 = eps
		parameters fontTitleSizePaper_50 = fontTitleSizePaper_50
	endif

	if fontTitleSizeModel_50 < eps then
		fontTitleSizeModel_50 = eps
		parameters fontTitleSizeModel_50 = fontTitleSizeModel_50
	endif

	if fontDataSizePaper_50 < eps then
		fontDataSizePaper_50 = eps
		parameters fontDataSizePaper_50 = fontDataSizePaper_50
	endif

	if fontDataSizeModel_50 < eps then
		fontDataSizeModel_50 = eps
		parameters fontDataSizeModel_50 = fontDataSizeModel_50
	endif

	! Attributes -------------------------------------------------------------------
	! --- Pens
	values "fillPen_50" iPenNumber
	values "framePen_50" iPenNumber


	! --- Frame's attributes
	if not(_needFrameAttr_50) then
		hideparameter	"framePen_50", "frameLineType_50"
		lock			"framePen_50", "frameLineType_50"
	endif
	! --- Background Fill
	if not(bBackFill_50) then
		hideparameter	"fillType_50", "fillPen_50", "fillBackPen_50"
		lock			"fillType_50", "fillPen_50", "fillBackPen_50"
	endif

	! ---------- Pointer ----------
	if iStampType = ZONE_STAMP_2_INT then
		if 	not(bShowZoneNameLine1_50) 		&\
			not(bShowZoneNum_50) 			&\
			not(bShowZoneCatCode_50) 		&\
			not(bShowZoneNameLine2_50) 		&\
			not(bShowApartmentName_50) 		&\
			not(bShowPosition_50) 			&\
			not(bShowHouseNumber_50) 		&\
			not(bShowFunctions_50) 			&\
			not(bShowID_50) 				&\
			not(bShowFloor_50) 				&\
			not(bShowWallFinish_50) 		&\
			not(bShowCeiling_50) 			&\
			not(bShowHeightZone_50) 		&\
			not(bShowHeightFloor_50) 		&\
			not(bShowMeasuredArea_50) 		&\
			not(bShowMeasuredNetArea_50) 	&\
			not(bShowReducedArea_50) 		&\
			not(bShowCalculatedArea_50) 	&\
			not(bShowWindowArea_50) 		&\
			not(bShowPerimeter_50) 			&\
			not(bShowCeilingHeight_50) 		&\
			not(bShowVolume_50) 			&\
			not(bShowCustom1_50) 			&\
			not(bShowCustom2_50) 			&\
			not(bShowCustom3_50) 			&\
			not(bShowAdditionalTags_50)		then	! No content shown, or only Apartment ID

			bPointer_50 = 0
			parameters bPointer_50 = bPointer_50

			hideparameter	"bPointer_50"
			lock			"bPointer_50"
		endif

		values{2} "iPointerAnchor_50" 	1, `Вверху`,
										2, `Середина`,
										3, `Внизу`
	
		values{2} "iPointerSide_50" 	1, `Cо Стороны 1`,
										2, `Cо Стороны 2`
	
		values{2} "iArrowHeadType_50" 	TRIANG_2LIN_45,		stArrowheadType[1],
										TRIANG_2LIN_30,		stArrowheadType[2],
										TRIANG_2LIN_15,		stArrowheadType[3],
										TRIANG_3LIN_45,		stArrowheadType[4],
										TRIANG_3LIN_30,		stArrowheadType[5],
										TRIANG_3LIN_15,		stArrowheadType[6],
										TRIANG_FILLED_45,	stArrowheadType[7],
										TRIANG_FILLED_30,	stArrowheadType[8],
										TRIANG_FILLED_15,	stArrowheadType[9],
										CIRCLE_EMPTY,		stArrowheadType[10],
										CIRCLE_FILLED,		stArrowheadType[11]
	
		if GLOB_MODPAR_NAME = "bPointer_50" then
			if bPointer_50 then					 ! set defaults by design
				pointerOffsetX_50	= 0
				pointerOffsetY_50	= 0
				pointerHorDist_50	= 1.5
				offsetX_50 			= 2.5
				offsetY_50 			= 1

				parameters 	pointerOffsetX_50 	= pointerOffsetX_50,
							pointerOffsetY_50	= pointerOffsetY_50,
							pointerHorDist_50	= pointerHorDist_50
            else
            	offsetX_50 	= pointerOffsetX_50
				offsetY_50 	= pointerOffsetY_50
			endif
            parameters  offsetX_50	= offsetX_50,
                        offsetY_50	= offsetY_50
		endif
	
		values "pointerHorDist_50" range (0, )

		if not(bPointer_50) then
			hideparameter	"iPointerAnchor_50", "iPointerSide_50", "ltPointer_50", "penPointer_50", "bArrowhead_50", "iArrowHeadType_50", "penArrowhead_50"
			lock			"iPointerAnchor_50", "iPointerSide_50", "ltPointer_50", "penPointer_50", "bArrowhead_50", "iArrowHeadType_50", "penArrowhead_50"
		else
			if not(bArrowhead_50) then
				hideparameter	"iArrowHeadType_50", "penArrowhead_50"
				lock			"iArrowHeadType_50", "penArrowhead_50"
			endif
		endif
	endif

	! ==============================================================================
	! Representation Values 100
	! ==============================================================================

	_iScaleFrom			= SCALE_100
	_scaleExt 			= "_100"
	_nGroupDisplay 		= nOrder_100
	_tempButtonID		= BUTTON_ID_100

	gosub "charge_temporary_array_with_integer_and_string_params_100"

	! ---------- Order 01 - 11 ----------
	for iGroup = 1 to nMaxGroupDisplay
		gosub "set_parameters_values"
		gosub "connect_Integer_and_String"
	next iGroup

	gosub "hide_locked_orderparameters"

	! ---------- Define Order ----------

	values "nOrder_100" range [1, nMaxGroupDisplay]

	! Define Order editing from Parameter List Setting dialog
	! -- on UI: Add/Delete buttons are working just on UI
	! -- on PL: display maximum Row Number

	gosub "analyse_paramlist_orderparams_to_set_ordering_if_add"

	gosub "analyse_ui_orderbuttons_to_set_ordering"

	if GLOB_MODPAR_NAME = "bDisplayInsideBox_100" then
		gosub "set_ordering_default_controlled_by_displaying_box"
	endif

	gosub "writeOrder_100"

	bgZoneName_100		= 0
	bgZoneNo_100		= 0
	bgZoneID_100		= 0
	bgApartment_100		= 0
	bgFinishes_100		= 0
	bgHeight_100		= 0
	bgHeightNumber_100	= 0
	bgZoneArea_100		= 0
	bgWindowArea_100	= 0
	bgSize_100			= 0
	bgAreaCode_100		= 0
	bgOnorm_100			= 0
	bgAddTags_100		= 0
	bgCustom_100		= 0
	for i = 1 to min(__nGroupDisplay, nMaxGroupDisplay)
		if temp_iGroupOrder[i] = ORDER_ZONE_NAME		then bgZoneName_100		= 1
		if temp_iGroupOrder[i] = ORDER_ZONE_NUMBER		then bgZoneNo_100		= 1
		if temp_iGroupOrder[i] = ORDER_ID				then bgZoneID_100		= 1
		if temp_iGroupOrder[i] = ORDER_APARTMENT		then bgApartment_100	= 1
		if temp_iGroupOrder[i] = ORDER_FINISHING		then bgFinishes_100		= 1
		if temp_iGroupOrder[i] = ORDER_HEIGHT			then bgHeight_100		= 1
		if temp_iGroupOrder[i] = ORDER_HEIGHT_NUMBER	then bgHeightNumber_100	= 1
		if temp_iGroupOrder[i] = ORDER_ZONE_AREAS		then bgZoneArea_100		= 1
		if temp_iGroupOrder[i] = ORDER_WINDOW_AREA		then bgWindowArea_100	= 1
		if temp_iGroupOrder[i] = ORDER_SIZE				then bgSize_100			= 1
		if temp_iGroupOrder[i] = ORDER_AREA_CODE_GER	then bgAreaCode_100		= 1
		if temp_iGroupOrder[i] = ORDER_ONORM_AUT		then bgOnorm_100		= 1
		if temp_iGroupOrder[i] = ORDER_ADD_TAGS			then bgAddTags_100		= 1
		if temp_iGroupOrder[i] = ORDER_CUSTOM			then bgCustom_100		= 1
	next i

	if not(bgZoneName_100) then
		hideparameter	"bShowZoneNameLine1_100", "bShowZoneNameLine2_100"
		lock			"bShowZoneNameLine1_100", "bShowZoneNameLine2_100"
	endif

	if bDisplayInsideBox_100 then
		if not(bgHeightNumber_100) then
			hideparameter	"bShowHeightZone_100", "bShowHeightFloor_100", "bShowZoneNum_100"
			lock			"bShowHeightZone_100", "bShowHeightFloor_100", "bShowZoneNum_100"

			if iStampType = ZONE_STAMP_NOR then
				hideparameter	"bShowZoneNum2_100", "bShowZoneNum3_100"
				lock			"bShowZoneNum2_100", "bShowZoneNum3_100"
			endif
		endif
	else
		if not(bgHeight_100) then
			hideparameter	"bShowHeightZone_100", "bShowHeightFloor_100"
			lock			"bShowHeightZone_100", "bShowHeightFloor_100"
		endif

		if not(bgZoneNo_100) then
			hideparameter	"bShowZoneNum_100"
			lock			"bShowZoneNum_100"

			if iStampType = ZONE_STAMP_NOR then
				hideparameter	"bShowZoneNum2_100", "bShowZoneNum3_100"
				lock			"bShowZoneNum2_100", "bShowZoneNum3_100"
			endif
		endif
	endif

	if not(bgZoneID_100) then
		hideparameter	"bShowZoneCatCode_100", "bShowID_100"
		lock			"bShowZoneCatCode_100", "bShowID_100"
	endif

	if not(bgApartment_100) then
		hideparameter	"bShowApartmentName_100", "bShowPosition_100", "bShowHouseNumber_100", "bShowFunctions_100"
		lock			"bShowApartmentName_100", "bShowPosition_100", "bShowHouseNumber_100", "bShowFunctions_100"
	endif

	if not(bgFinishes_100) then
		hideparameter	"bShowFloor_100", "bShowCeiling_100", "bShowWallFinish_100"
		lock			"bShowFloor_100", "bShowCeiling_100", "bShowWallFinish_100"
        
        if iStampType = ZONE_STAMP_ON then
			hideparameter	"bShowExistFloor_100"
			lock			"bShowExistFloor_100"
		endif
	endif

	if not(bgZoneArea_100) then
		hideparameter	"bShowMeasuredArea_100", "bShowMeasuredNetArea_100", "bShowReducedArea_100", "bShowCalculatedArea_100"
		lock			"bShowMeasuredArea_100", "bShowMeasuredNetArea_100", "bShowReducedArea_100", "bShowCalculatedArea_100"

		if iStampType = ZONE_STAMP_ON then
			hideparameter	"bShowExistArea_100"
			lock			"bShowExistArea_100"
		endif

		if iStampType = ZONE_STAMP_DIN then
			hideparameter	"bShowVentArea_100"
			lock			"bShowVentArea_100"
		endif
	endif

	if not(bgWindowArea_100) then
		hideparameter	"bShowWindowArea_100"
		lock			"bShowWindowArea_100"
	endif

	if not(bgSize_100) then
		hideparameter	"bShowPerimeter_100", "bShowCeilingHeight_100", "bShowVolume_100"
		lock			"bShowPerimeter_100", "bShowCeilingHeight_100", "bShowVolume_100"
	endif

	if iStampType = ZONE_STAMP_DIN & not(bgAreaCode_100) then
		hideparameter	"bShowClassification_100"
		lock			"bShowClassification_100"
	endif

	if iStampType = ZONE_STAMP_ON & not(bgOnorm_100) then
		hideparameter	"bShowOnormData_100"
		lock			"bShowOnormData_100"
	endif

	if not(bgAddTags_100) then
		hideparameter	"bShowAdditionalTags_100"
		lock			"bShowAdditionalTags_100"
	endif

	if not(bgCustom_100) then
		hideparameter	"bShowCustom1_100", "bShowCustom2_100", "bShowCustom3_100"
		lock			"bShowCustom1_100", "bShowCustom2_100", "bShowCustom3_100"
	endif

	! ---------- Apartment ID ----------
	values "apartmentIdFrame_100" stApartmentIdFrame
	values "iApartmentIdFrame_100" APARTMENT_ID_FRAME_NONE, APARTMENT_ID_FRAME_RECT, APARTMENT_ID_FRAME_OVAL, APARTMENT_ID_FRAME_CIRC
	if GLOB_MODPAR_NAME = "apartmentIdFrame_100" then
		for i = 1 to vardim1(stApartmentIdFrame)
			if apartmentIdFrame_100 = stApartmentIdFrame[i] then
				iApartmentIdFrame_100 = vardim1(stApartmentIdFrame) - i
				i = vardim1(stApartmentIdFrame)
			endif
		next i
		parameters iApartmentIdFrame_100 = iApartmentIdFrame_100
	else
		iApartmentIdFrame_100 = max(min(iApartmentIdFrame_100,vardim1(stApartmentIdFrame)-1),0)
		parameters apartmentIdFrame_100 = stApartmentIdFrame[vardim1(stApartmentIdFrame)-iApartmentIdFrame_100]
	endif

	if not(bShowApartmentID_100) then
		hideparameter	"apartmentIdFrame_100", "iApartmentIdFrame_100", "apartmentIDoffsetX_100", "apartmentIDoffsetY_100", "apartmentIDangle_100", "bFixRadius_100", "frameRadius_100"
		lock			"apartmentIdFrame_100", "iApartmentIdFrame_100", "apartmentIDoffsetX_100", "apartmentIDoffsetY_100", "apartmentIDangle_100", "bFixRadius_100", "frameRadius_100"
	endif

	! ---------- Fixed Radius ----------
	if iApartmentIdFrame_100 <> APARTMENT_ID_FRAME_CIRC then
		hideparameter	"bFixRadius_100", "frameRadius_100"
		lock			"bFixRadius_100", "frameRadius_100"
	endif
	values "frameRadius_100" range (0, )

	if not(bFixRadius_100) then
		hideparameter	"frameRadius_100"
		lock			"frameRadius_100"
	endif

	! ---------- Frame ----------
	values "sFrameStyle_100" stFrameStyle
	values "iFrameStyle_100" 1,2,3,4,5
	if GLOB_MODPAR_NAME = "sFrameStyle_100" then
		for i = 1 to vardim1(stFrameStyle)
			if sFrameStyle_100 = stFrameStyle[i] then
				iFrameStyle_100 = i
				i = vardim1(stFrameStyle)
			endif
		next i
		parameters iFrameStyle_100 = iFrameStyle_100
	else
		iFrameStyle_100 = max(min(iFrameStyle_100,vardim1(stFrameStyle)),1)
		parameters sFrameStyle_100 = stFrameStyle[iFrameStyle_100]
	endif

	! ---------- Fixed Width ----------
	if not(bFixWidth_100) then
		hideparameter	"fixWidth_100"
		lock			"fixWidth_100"
	endif
	values "fixWidth_100"	range (0,)

	! ---------- Texts Align ----------
	if iStampType = ZONE_STAMP_2_INT then
		values{2} "iAlignTexts_100" 0, `Середина`,
									1, `Слева`,
									2, `Справа`
	endif

	! ---------- Numerical Values Align ----------
	values "sAlignNumericalValues_100" stDataAlign
	values "iAlignNumericalValues_100" 1,2
	if GLOB_MODPAR_NAME = "sAlignNumericalValues_100" then
		for i = 1 to vardim1(stDataAlign)
			if sAlignNumericalValues_100 = stDataAlign[i] then
				iAlignNumericalValues_100 = i
				i = vardim1(stDataAlign)
			endif
		next i
		parameters iAlignNumericalValues_100 = iAlignNumericalValues_100
	else
		iAlignNumericalValues_100 = max(min(iAlignNumericalValues_100,vardim1(stDataAlign)),1)
		parameters sAlignNumericalValues_100 = stDataAlign[iAlignNumericalValues_100]
	endif

	! ---------- Finish Text Align ----------
	values "sAlignStringValues_100" stDataAlign
	values "iAlignStringValues_100" 1,2
	if GLOB_MODPAR_NAME = "sAlignStringValues_100" then
		for i = 1 to vardim1(stDataAlign)
			if sAlignStringValues_100 = stDataAlign[i] then
				iAlignStringValues_100 = i
				i = vardim1(stDataAlign)
			endif
		next i
		parameters iAlignStringValues_100 = iAlignStringValues_100
	else
		iAlignStringValues_100 = max(min(iAlignStringValues_100,vardim1(stDataAlign)),1)
		parameters sAlignStringValues_100 = stDataAlign[iAlignStringValues_100]
	endif

	! ---------- Fonts ----------
	values "fontScaleType_100" stFontScale
	values "iFontScaleType_100" FONT_MODEL, FONT_PAPER
	if GLOB_MODPAR_NAME = "fontScaleType_100" then
		for i = 1 to vardim1(stFontScale)
			if fontScaleType_100 = stFontScale[i] then
				iFontScaleType_100 = i
				i = vardim1(stFontScale)
			endif
		next i
		parameters iFontScaleType_100 = iFontScaleType_100
	else
		iFontScaleType_100 = max(min(iFontScaleType_100,vardim1(stFontScale)),1)
		parameters fontScaleType_100 = stFontScale[iFontScaleType_100]
	endif

	if bAutomaticLineSpace_100 then
		hideparameter	"lineSpacing_100"
		lock			"lineSpacing_100"
	endif

	if not(bShowDimensionUnits_100) then
		hideparameter	"bShowSuperScript_100"
		lock			"bShowSuperScript_100"
	endif


	values "lineSpacing_100"		range [0,]

	if fontTitleSizePaper_100 < eps then
		fontTitleSizePaper_100 = eps
		parameters fontTitleSizePaper_100 = fontTitleSizePaper_100
	endif

	if fontTitleSizeModel_100 < eps then
		fontTitleSizeModel_100 = eps
		parameters fontTitleSizeModel_100 = fontTitleSizeModel_100
	endif

	if fontDataSizePaper_100 < eps then
		fontDataSizePaper_100 = eps
		parameters fontDataSizePaper_100 = fontDataSizePaper_100
	endif

	if fontDataSizeModel_100 < eps then
		fontDataSizeModel_100 = eps
		parameters fontDataSizeModel_100 = fontDataSizeModel_100
	endif

	! Attributes -------------------------------------------------------------------
	! --- Pens
	values "fillPen_100" iPenNumber
	values "framePen_100" iPenNumber


	! --- Frame's attributes
	if not(_needFrameAttr_100) then
		hideparameter	"framePen_100", "frameLineType_100"
		lock			"framePen_100", "frameLineType_100"
	endif
	! --- Background Fill
	if not(bBackFill_100) then
		hideparameter	"fillType_100", "fillPen_100", "fillBackPen_100"
		lock			"fillType_100", "fillPen_100", "fillBackPen_100"
	endif

	! ---------- Pointer ----------
	if iStampType = ZONE_STAMP_2_INT then
		if 	not(bShowZoneNameLine1_100) 	&\
			not(bShowZoneNum_100) 			&\
			not(bShowZoneCatCode_100) 		&\
			not(bShowZoneNameLine2_100) 	&\
			not(bShowApartmentName_100) 	&\
			not(bShowPosition_100) 			&\
			not(bShowHouseNumber_100) 		&\
			not(bShowFunctions_100) 		&\
			not(bShowID_100) 				&\
			not(bShowFloor_100) 			&\
			not(bShowWallFinish_100) 		&\
			not(bShowCeiling_100) 			&\
			not(bShowHeightZone_100) 		&\
			not(bShowHeightFloor_100) 		&\
			not(bShowMeasuredArea_100) 		&\
			not(bShowMeasuredNetArea_100) 	&\
			not(bShowReducedArea_100) 		&\
			not(bShowCalculatedArea_100) 	&\
			not(bShowWindowArea_100) 		&\
			not(bShowPerimeter_100) 		&\
			not(bShowCeilingHeight_100) 	&\
			not(bShowVolume_100) 			&\
			not(bShowCustom1_100) 			&\
			not(bShowCustom2_100) 			&\
			not(bShowCustom3_100) 			&\
			not(bShowAdditionalTags_100)	then	! No content shown, or only Apartment ID

			bPointer_100 = 0
			parameters bPointer_100 = bPointer_100

			hideparameter	"bPointer_100"
			lock			"bPointer_100"
		endif

		values{2} "iPointerAnchor_100" 	1, `Вверху`,
										2, `Середина`,
										3, `Внизу`
	
		values{2} "iPointerSide_100" 	1, `Cо Стороны 1`,
										2, `Cо Стороны 2`
	
		values{2} "iArrowHeadType_100" 	TRIANG_2LIN_45,		stArrowheadType[1],
										TRIANG_2LIN_30,		stArrowheadType[2],
										TRIANG_2LIN_15,		stArrowheadType[3],
										TRIANG_3LIN_45,		stArrowheadType[4],
										TRIANG_3LIN_30,		stArrowheadType[5],
										TRIANG_3LIN_15,		stArrowheadType[6],
										TRIANG_FILLED_45,	stArrowheadType[7],
										TRIANG_FILLED_30,	stArrowheadType[8],
										TRIANG_FILLED_15,	stArrowheadType[9],
										CIRCLE_EMPTY,		stArrowheadType[10],
										CIRCLE_FILLED,		stArrowheadType[11]
	
		if GLOB_MODPAR_NAME = "bPointer_100" then
			if bPointer_100 then					 ! set defaults by design
				pointerOffsetX_100	= 0
				pointerOffsetY_100	= 0
				pointerHorDist_100	= 1.5
				offsetX_100 		= 2.5
				offsetY_100 		= 1

				parameters 	pointerOffsetX_100 	= pointerOffsetX_100,
							pointerOffsetY_100	= pointerOffsetY_100,
							pointerHorDist_100	= pointerHorDist_100
            else
            	offsetX_100 	= pointerOffsetX_100
				offsetY_100 	= pointerOffsetY_100
			endif
            parameters  offsetX_100	= offsetX_100,
                        offsetY_100	= offsetY_100
		endif
	
		values "pointerHorDist_100" range (0, )

		if not(bPointer_100) then
			hideparameter	"iPointerAnchor_100", "iPointerSide_100", "ltPointer_100", "penPointer_100", "bArrowhead_100", "iArrowHeadType_100", "penArrowhead_100"
			lock			"iPointerAnchor_100", "iPointerSide_100", "ltPointer_100", "penPointer_100", "bArrowhead_100", "iArrowHeadType_100", "penArrowhead_100"
		else
			if not(bArrowhead_100) then
				hideparameter	"iArrowHeadType_100", "penArrowhead_100"
				lock			"iArrowHeadType_100", "penArrowhead_100"
			endif
		endif
	endif

	! ==============================================================================
	! Representation Values 200
	! ==============================================================================

	_iScaleFrom			= SCALE_200
	_scaleExt 			= "_200"
	_nGroupDisplay 		= nOrder_200
	_tempButtonID		= BUTTON_ID_200

	gosub "charge_temporary_array_with_integer_and_string_params_200"

	! ---------- Order 01 - 11 ----------
	for iGroup = 1 to nMaxGroupDisplay
		gosub "set_parameters_values"
		gosub "connect_Integer_and_String"
	next iGroup

	gosub "hide_locked_orderparameters"

	! ---------- Define Order ----------

	values "nOrder_200" range [1, nMaxGroupDisplay]

	! Define Order editing from Parameter List Setting dialog
	! -- on UI: Add/Delete buttons are working just on UI
	! -- on PL: display maximum Row Number

	gosub "analyse_paramlist_orderparams_to_set_ordering_if_add"

	gosub "analyse_ui_orderbuttons_to_set_ordering"

	if GLOB_MODPAR_NAME = "bDisplayInsideBox_200" then
		gosub "set_ordering_default_controlled_by_displaying_box"
	endif

	gosub "writeOrder_200"

	bgZoneName_200		= 0
	bgZoneNo_200		= 0
	bgZoneID_200		= 0
	bgApartment_200		= 0
	bgFinishes_200		= 0
	bgHeight_200		= 0
	bgHeightNumber_200	= 0
	bgZoneArea_200		= 0
	bgWindowArea_200	= 0
	bgSize_200			= 0
	bgAreaCode_200		= 0
	bgOnorm_200			= 0
	bgAddTags_200		= 0
	bgCustom_200		= 0
	for i = 1 to min(__nGroupDisplay, nMaxGroupDisplay)
		if temp_iGroupOrder[i] = ORDER_ZONE_NAME		then bgZoneName_200		= 1
		if temp_iGroupOrder[i] = ORDER_ZONE_NUMBER		then bgZoneNo_200		= 1
		if temp_iGroupOrder[i] = ORDER_ID				then bgZoneID_200		= 1
		if temp_iGroupOrder[i] = ORDER_APARTMENT		then bgApartment_200	= 1
		if temp_iGroupOrder[i] = ORDER_FINISHING		then bgFinishes_200		= 1
		if temp_iGroupOrder[i] = ORDER_HEIGHT			then bgHeight_200		= 1
		if temp_iGroupOrder[i] = ORDER_HEIGHT_NUMBER	then bgHeightNumber_200	= 1
		if temp_iGroupOrder[i] = ORDER_ZONE_AREAS		then bgZoneArea_200		= 1
		if temp_iGroupOrder[i] = ORDER_WINDOW_AREA		then bgWindowArea_200	= 1
		if temp_iGroupOrder[i] = ORDER_SIZE				then bgSize_200			= 1
		if temp_iGroupOrder[i] = ORDER_AREA_CODE_GER	then bgAreaCode_200		= 1
		if temp_iGroupOrder[i] = ORDER_ONORM_AUT		then bgOnorm_200		= 1
		if temp_iGroupOrder[i] = ORDER_ADD_TAGS			then bgAddTags_200		= 1
		if temp_iGroupOrder[i] = ORDER_CUSTOM			then bgCustom_200		= 1
	next i

	if not(bgZoneName_200) then
		hideparameter	"bShowZoneNameLine1_200", "bShowZoneNameLine2_200"
		lock			"bShowZoneNameLine1_200", "bShowZoneNameLine2_200"
	endif

	if bDisplayInsideBox_200 then
		if not(bgHeightNumber_200) then
			hideparameter	"bShowHeightZone_200", "bShowHeightFloor_200", "bShowZoneNum_200"
			lock			"bShowHeightZone_200", "bShowHeightFloor_200", "bShowZoneNum_200"

			if iStampType = ZONE_STAMP_NOR then
				hideparameter	"bShowZoneNum2_200", "bShowZoneNum3_200"
				lock			"bShowZoneNum2_200", "bShowZoneNum3_200"
			endif
		endif
	else
		if not(bgHeight_200) then
			hideparameter	"bShowHeightZone_200", "bShowHeightFloor_200"
			lock			"bShowHeightZone_200", "bShowHeightFloor_200"
		endif

		if not(bgZoneNo_200) then
			hideparameter	"bShowZoneNum_200"
			lock			"bShowZoneNum_200"

			if iStampType = ZONE_STAMP_NOR then
				hideparameter	"bShowZoneNum2_200", "bShowZoneNum3_200"
				lock			"bShowZoneNum2_200", "bShowZoneNum3_200"
			endif
		endif
	endif

	if not(bgZoneID_200) then
		hideparameter	"bShowZoneCatCode_200", "bShowID_200"
		lock			"bShowZoneCatCode_200", "bShowID_200"
	endif

	if not(bgApartment_200) then
		hideparameter	"bShowApartmentName_200", "bShowPosition_200", "bShowHouseNumber_200", "bShowFunctions_200"
		lock			"bShowApartmentName_200", "bShowPosition_200", "bShowHouseNumber_200", "bShowFunctions_200"
	endif

	if not(bgFinishes_200) then
		hideparameter	"bShowFloor_200", "bShowCeiling_200", "bShowWallFinish_200"
		lock			"bShowFloor_200", "bShowCeiling_200", "bShowWallFinish_200"
        
        if iStampType = ZONE_STAMP_ON then
			hideparameter	"bShowExistFloor_200"
			lock			"bShowExistFloor_200"
		endif
	endif

	if not(bgZoneArea_200) then
		hideparameter	"bShowMeasuredArea_200", "bShowMeasuredNetArea_200", "bShowReducedArea_200", "bShowCalculatedArea_200"
		lock			"bShowMeasuredArea_200", "bShowMeasuredNetArea_200", "bShowReducedArea_200", "bShowCalculatedArea_200"

		if iStampType = ZONE_STAMP_ON then
			hideparameter	"bShowExistArea_200"
			lock			"bShowExistArea_200"
		endif

		if iStampType = ZONE_STAMP_DIN then
			hideparameter	"bShowVentArea_200"
			lock			"bShowVentArea_200"
		endif
	endif

	if not(bgWindowArea_200) then
		hideparameter	"bShowWindowArea_200"
		lock			"bShowWindowArea_200"
	endif

	if not(bgSize_200) then
		hideparameter	"bShowPerimeter_200", "bShowCeilingHeight_200", "bShowVolume_200"
		lock			"bShowPerimeter_200", "bShowCeilingHeight_200", "bShowVolume_200"
	endif

	if iStampType = ZONE_STAMP_DIN & not(bgAreaCode_200) then
		hideparameter	"bShowClassification_200"
		lock			"bShowClassification_200"
	endif

	if iStampType = ZONE_STAMP_ON & not(bgOnorm_200) then
		hideparameter	"bShowOnormData_200"
		lock			"bShowOnormData_200"
	endif

	if not(bgAddTags_200) then
		hideparameter	"bShowAdditionalTags_200"
		lock			"bShowAdditionalTags_200"
	endif

	if not(bgCustom_200) then
		hideparameter	"bShowCustom1_200", "bShowCustom2_200", "bShowCustom3_200"
		lock			"bShowCustom1_200", "bShowCustom2_200", "bShowCustom3_200"
	endif
	
	! ---------- Apartment ID ----------
	values "apartmentIdFrame_200" stApartmentIdFrame
	values "iApartmentIdFrame_200" APARTMENT_ID_FRAME_NONE, APARTMENT_ID_FRAME_RECT, APARTMENT_ID_FRAME_OVAL, APARTMENT_ID_FRAME_CIRC
	if GLOB_MODPAR_NAME = "apartmentIdFrame_200" then
		for i = 1 to vardim1(stApartmentIdFrame)
			if apartmentIdFrame_200 = stApartmentIdFrame[i] then
				iApartmentIdFrame_200 = vardim1(stApartmentIdFrame) - i
				i = vardim1(stApartmentIdFrame)
			endif
		next i
		parameters iApartmentIdFrame_200 = iApartmentIdFrame_200
	else
		iApartmentIdFrame_200 = max(min(iApartmentIdFrame_200,vardim1(stApartmentIdFrame)-1),0)
		parameters apartmentIdFrame_200 = stApartmentIdFrame[vardim1(stApartmentIdFrame)-iApartmentIdFrame_200]
	endif

	if not(bShowApartmentID_200) then
		hideparameter	"apartmentIdFrame_200", "iApartmentIdFrame_200", "apartmentIDoffsetX_200", "apartmentIDoffsetY_200", "apartmentIDangle_200", "bFixRadius_200", "frameRadius_200"
		lock			"apartmentIdFrame_200", "iApartmentIdFrame_200", "apartmentIDoffsetX_200", "apartmentIDoffsetY_200", "apartmentIDangle_200", "bFixRadius_200", "frameRadius_200"
	endif

	! ---------- Fixed Radius ----------
	if iApartmentIdFrame_200 <> APARTMENT_ID_FRAME_CIRC then
		hideparameter	"bFixRadius_200", "frameRadius_200"
		lock			"bFixRadius_200", "frameRadius_200"
	endif
	values "frameRadius_200" range (0, )

	if not(bFixRadius_200) then
		hideparameter	"frameRadius_200"
		lock			"frameRadius_200"
	endif

	! ---------- Frame ----------
	values "sFrameStyle_200" stFrameStyle
	values "iFrameStyle_200" 1,2,3,4,5
	if GLOB_MODPAR_NAME = "sFrameStyle_200" then
		for i = 1 to vardim1(stFrameStyle)
			if sFrameStyle_200 = stFrameStyle[i] then
				iFrameStyle_200 = i
				i = vardim1(stFrameStyle)
			endif
		next i
		parameters iFrameStyle_200 = iFrameStyle_200
	else
		iFrameStyle_200 = max(min(iFrameStyle_200,vardim1(stFrameStyle)),1)
		parameters sFrameStyle_200 = stFrameStyle[iFrameStyle_200]
	endif

	! ---------- Fixed Width ----------
	if not(bFixWidth_200) then
		hideparameter	"fixWidth_200"
		lock			"fixWidth_200"
	endif
	values "fixWidth_200"	range (0,)

	! ---------- Texts Align ----------
	if iStampType = ZONE_STAMP_2_INT then
		values{2} "iAlignTexts_200" 0, `Середина`,
									1, `Слева`,
									2, `Справа`
	endif
	! ---------- Numerical Values Align ----------
	values "sAlignNumericalValues_200" stDataAlign
	values "iAlignNumericalValues_200" 1,2
	if GLOB_MODPAR_NAME = "sAlignNumericalValues_200" then
		for i = 1 to vardim1(stDataAlign)
			if sAlignNumericalValues_200= stDataAlign[i] then
				iAlignNumericalValues_200= i
				i = vardim1(stDataAlign)
			endif
		next i
		parameters iAlignNumericalValues_200= iAlignNumericalValues_200
	else
		iAlignNumericalValues_200= max(min(iAlignNumericalValues_200,vardim1(stDataAlign)),1)
		parameters sAlignNumericalValues_200= stDataAlign[iAlignNumericalValues_200]
	endif

	! ---------- Finish Text Align ----------
	values "sAlignStringValues_200" stDataAlign
	values "iAlignStringValues_200" 1,2
	if GLOB_MODPAR_NAME = "sAlignStringValues_200" then
		for i = 1 to vardim1(stDataAlign)
			if sAlignStringValues_200= stDataAlign[i] then
				iAlignStringValues_200= i
				i = vardim1(stDataAlign)
			endif
		next i
		parameters iAlignStringValues_200= iAlignStringValues_200
	else
		iAlignStringValues_200= max(min(iAlignStringValues_200,vardim1(stDataAlign)),1)
		parameters sAlignStringValues_200= stDataAlign[iAlignStringValues_200]
	endif

	! ---------- Fonts ----------
	values "fontScaleType_200" stFontScale
	values "iFontScaleType_200" FONT_MODEL, FONT_PAPER
	if GLOB_MODPAR_NAME = "fontScaleType_200" then
		for i = 1 to vardim1(stFontScale)
			if fontScaleType_200 = stFontScale[i] then
				iFontScaleType_200 = i
				i = vardim1(stFontScale)
			endif
		next i
		parameters iFontScaleType_200 = iFontScaleType_200
	else
		iFontScaleType_200 = max(min(iFontScaleType_200,vardim1(stFontScale)),1)
		parameters fontScaleType_200 = stFontScale[iFontScaleType_200]
	endif

	if bAutomaticLineSpace_200 then
		hideparameter	"lineSpacing_200"
		lock			"lineSpacing_200"
	endif

	if not(bShowDimensionUnits_200) then
		hideparameter	"bShowSuperScript_200"
		lock			"bShowSuperScript_200"
	endif

	values "lineSpacing_200"		range [0,]

	if fontTitleSizePaper_200 < eps then
		fontTitleSizePaper_200 = eps
		parameters fontTitleSizePaper_200 = fontTitleSizePaper_200
	endif

	if fontTitleSizeModel_200 < eps then
		fontTitleSizeModel_200 = eps
		parameters fontTitleSizeModel_200 = fontTitleSizeModel_200
	endif

	if fontDataSizePaper_200 < eps then
		fontDataSizePaper_200 = eps
		parameters fontDataSizePaper_200 = fontDataSizePaper_200
	endif

	if fontDataSizeModel_200 < eps then
		fontDataSizeModel_200 = eps
		parameters fontDataSizeModel_200 = fontDataSizeModel_200
	endif

	! Attributes -------------------------------------------------------------------
	! --- Pens
	values "fillPen_200" iPenNumber
	values "framePen_200" iPenNumber


	! --- Frame's attributes
	if not(_needFrameAttr_200) then
		hideparameter	"framePen_200", "frameLineType_200"
		lock			"framePen_200", "frameLineType_200"
	endif
	! --- Background Fill
	if not(bBackFill_200) then
		hideparameter	"fillType_200", "fillPen_200", "fillBackPen_200"
		lock			"fillType_200", "fillPen_200", "fillBackPen_200"
	endif
	! ---------- Pointer ----------
	if iStampType = ZONE_STAMP_2_INT then
		if 	not(bShowZoneNameLine1_200) 	&\
			not(bShowZoneNum_200) 			&\
			not(bShowZoneCatCode_200) 		&\
			not(bShowZoneNameLine2_200) 	&\
			not(bShowApartmentName_200) 	&\
			not(bShowPosition_200) 			&\
			not(bShowHouseNumber_200) 		&\
			not(bShowFunctions_200) 		&\
			not(bShowID_200) 				&\
			not(bShowFloor_200) 			&\
			not(bShowWallFinish_200) 		&\
			not(bShowCeiling_200) 			&\
			not(bShowHeightZone_200) 		&\
			not(bShowHeightFloor_200) 		&\
			not(bShowMeasuredArea_200) 		&\
			not(bShowMeasuredNetArea_200) 	&\
			not(bShowReducedArea_200) 		&\
			not(bShowCalculatedArea_200) 	&\
			not(bShowWindowArea_200) 		&\
			not(bShowPerimeter_200) 		&\
			not(bShowCeilingHeight_200) 	&\
			not(bShowVolume_200) 			&\
			not(bShowCustom1_200) 			&\
			not(bShowCustom2_200) 			&\
			not(bShowCustom3_200) 			&\
			not(bShowAdditionalTags_200)		then	! No content shown, or only Apartment ID

			bPointer_200 = 0
			parameters bPointer_200 = bPointer_200

			hideparameter	"bPointer_200"
			lock			"bPointer_200"
		endif

		values{2} "iPointerAnchor_200" 	1, `Вверху`,
										2, `Середина`,
										3, `Внизу`
	
		values{2} "iPointerSide_200" 	1, `Cо Стороны 1`,
										2, `Cо Стороны 2`
	
		values{2} "iArrowHeadType_200" 	TRIANG_2LIN_45,		stArrowheadType[1],
										TRIANG_2LIN_30,		stArrowheadType[2],
										TRIANG_2LIN_15,		stArrowheadType[3],
										TRIANG_3LIN_45,		stArrowheadType[4],
										TRIANG_3LIN_30,		stArrowheadType[5],
										TRIANG_3LIN_15,		stArrowheadType[6],
										TRIANG_FILLED_45,	stArrowheadType[7],
										TRIANG_FILLED_30,	stArrowheadType[8],
										TRIANG_FILLED_15,	stArrowheadType[9],
										CIRCLE_EMPTY,		stArrowheadType[10],
										CIRCLE_FILLED,		stArrowheadType[11]
	
		if GLOB_MODPAR_NAME = "bPointer_200" then
			if bPointer_200 then					 ! set defaults by design
				pointerOffsetX_200	= 0
				pointerOffsetY_200	= 0
				pointerHorDist_200	= 1.5
				offsetX_200 		= 2.5
				offsetY_200 		= 1

				parameters 	pointerOffsetX_200 	= pointerOffsetX_200,
							pointerOffsetY_200	= pointerOffsetY_200,
							pointerHorDist_200	= pointerHorDist_200
            else
            	offsetX_200 	= pointerOffsetX_200
				offsetY_200 	= pointerOffsetY_200
			endif
            parameters  offsetX_200	= offsetX_200,
                        offsetY_200	= offsetY_200
		endif
	
		values "pointerHorDist_200" range (0, )

		if not(bPointer_200) then
			hideparameter	"iPointerAnchor_200", "iPointerSide_200", "ltPointer_200", "penPointer_200", "bArrowhead_200", "iArrowHeadType_200", "penArrowhead_200"
			lock			"iPointerAnchor_200", "iPointerSide_200", "ltPointer_200", "penPointer_200", "bArrowhead_200", "iArrowHeadType_200", "penArrowhead_200"
		else
			if not(bArrowhead_200) then
				hideparameter	"iArrowHeadType_200", "penArrowhead_200"
				lock			"iArrowHeadType_200", "penArrowhead_200"
			endif
		endif
	endif
else

	! ==============================================================================
	! Representation Values 0
	! ==============================================================================

	_iScaleFrom			= SCALE_INSENSITIVE
	_scaleExt 			= "_0"
	_nGroupDisplay 		= nOrder_0
	_tempButtonID		= BUTTON_ID_INSENSITIVE

	gosub "charge_temporary_array_with_integer_and_string_params_0"

	! ---------- Order 01 - 11 ----------
	for iGroup = 1 to nMaxGroupDisplay
		gosub "set_parameters_values"
		gosub "connect_Integer_and_String"
	next iGroup

	gosub "hide_locked_orderparameters"

	! ---------- Define Order ----------

	values "nOrder_0" range [1, nMaxGroupDisplay]

	! Define Order editing from Parameter List Setting dialog
	! -- on UI: Add/Delete buttons are working just on UI
	! -- on PL: display maximum Row Number

	gosub "analyse_paramlist_orderparams_to_set_ordering_if_add"

	gosub "analyse_ui_orderbuttons_to_set_ordering"

	if GLOB_MODPAR_NAME = "bDisplayInsideBox_0" then
		gosub "set_ordering_default_controlled_by_displaying_box"
	endif

	gosub "writeOrder_0"

	bgZoneName_0		= 0
	bgZoneNo_0			= 0
	bgZoneID_0			= 0
	bgApartment_0		= 0
	bgFinishes_0		= 0
	bgHeight_0			= 0
	bgHeightNumber_0	= 0
	bgZoneArea_0		= 0
	bgWindowArea_0		= 0
	bgSize_0			= 0
	bgAreaCode_0		= 0
	bgOnorm_0			= 0
	bgAddTags_0			= 0
	bgCustom_0			= 0
	for i = 1 to min(__nGroupDisplay, nMaxGroupDisplay)
		if temp_iGroupOrder[i] = ORDER_ZONE_NAME		then bgZoneName_0		= 1
		if temp_iGroupOrder[i] = ORDER_ZONE_NUMBER		then bgZoneNo_0			= 1
		if temp_iGroupOrder[i] = ORDER_ID				then bgZoneID_0			= 1
		if temp_iGroupOrder[i] = ORDER_APARTMENT		then bgApartment_0		= 1
		if temp_iGroupOrder[i] = ORDER_FINISHING		then bgFinishes_0		= 1
		if temp_iGroupOrder[i] = ORDER_HEIGHT			then bgHeight_0			= 1
		if temp_iGroupOrder[i] = ORDER_HEIGHT_NUMBER	then bgHeightNumber_0	= 1
		if temp_iGroupOrder[i] = ORDER_ZONE_AREAS		then bgZoneArea_0		= 1
		if temp_iGroupOrder[i] = ORDER_WINDOW_AREA		then bgWindowArea_0		= 1
		if temp_iGroupOrder[i] = ORDER_SIZE				then bgSize_0			= 1
		if temp_iGroupOrder[i] = ORDER_AREA_CODE_GER	then bgAreaCode_0		= 1
		if temp_iGroupOrder[i] = ORDER_ONORM_AUT		then bgOnorm_0			= 1
		if temp_iGroupOrder[i] = ORDER_ADD_TAGS			then bgAddTags_0		= 1
		if temp_iGroupOrder[i] = ORDER_CUSTOM			then bgCustom_0			= 1
	next i

	if not(bgZoneName_0) then
		hideparameter	"bShowZoneNameLine1_0", "bShowZoneNameLine2_0"
		lock			"bShowZoneNameLine1_0", "bShowZoneNameLine2_0"
	endif

	if bDisplayInsideBox_0 then
		if not(bgHeightNumber_0) then
			hideparameter	"bShowHeightZone_0", "bShowHeightFloor_0", "bShowZoneNum_0"
			lock			"bShowHeightZone_0", "bShowHeightFloor_0", "bShowZoneNum_0"

			if iStampType = ZONE_STAMP_NOR then
				hideparameter	"bShowZoneNum2_0", "bShowZoneNum3_0"
				lock			"bShowZoneNum2_0", "bShowZoneNum3_0"
			endif
		endif
	else
		if not(bgHeight_0) then
			hideparameter	"bShowHeightZone_0", "bShowHeightFloor_0"
			lock			"bShowHeightZone_0", "bShowHeightFloor_0"
		endif

		if not(bgZoneNo_0) then
			hideparameter	"bShowZoneNum_0"
			lock			"bShowZoneNum_0"

			if iStampType = ZONE_STAMP_NOR then
				hideparameter	"bShowZoneNum2_0", "bShowZoneNum3_0"
				lock			"bShowZoneNum2_0", "bShowZoneNum3_0"
			endif
		endif
	endif

	if not(bgZoneID_0) then
		hideparameter	"bShowZoneCatCode_0", "bShowID_0"
		lock			"bShowZoneCatCode_0", "bShowID_0"
	endif

	if not(bgApartment_0) then
		hideparameter	"bShowApartmentName_0", "bShowPosition_0", "bShowHouseNumber_0", "bShowFunctions_0"
		lock			"bShowApartmentName_0", "bShowPosition_0", "bShowHouseNumber_0", "bShowFunctions_0"
	endif

	if not(bgFinishes_0) then
		hideparameter	"bShowFloor_0", "bShowCeiling_0", "bShowWallFinish_0"
		lock			"bShowFloor_0", "bShowCeiling_0", "bShowWallFinish_0"
    
        if iStampType = ZONE_STAMP_ON then
			hideparameter	"bShowExistFloor_0"
			lock			"bShowExistFloor_0"
		endif
	endif

	if not(bgZoneArea_0) then
		hideparameter	"bShowMeasuredArea_0", "bShowMeasuredNetArea_0", "bShowReducedArea_0", "bShowCalculatedArea_0"
		lock			"bShowMeasuredArea_0", "bShowMeasuredNetArea_0", "bShowReducedArea_0", "bShowCalculatedArea_0"

		if iStampType = ZONE_STAMP_ON then
			hideparameter	"bShowExistArea_0"
			lock			"bShowExistArea_0"
		endif

		if iStampType = ZONE_STAMP_DIN then
			hideparameter	"bShowVentArea_0"
			lock			"bShowVentArea_0"
		endif
	endif

	if not(bgWindowArea_0) then
		hideparameter	"bShowWindowArea_0"
		lock			"bShowWindowArea_0"
	endif

	if not(bgSize_0) then
		hideparameter	"bShowPerimeter_0", "bShowCeilingHeight_0", "bShowVolume_0"
		lock			"bShowPerimeter_0", "bShowCeilingHeight_0", "bShowVolume_0"
	endif

	if iStampType = ZONE_STAMP_DIN & not(bgAreaCode_0) then
		hideparameter	"bShowClassification_0"
		lock			"bShowClassification_0"
	endif

	if iStampType = ZONE_STAMP_ON & not(bgOnorm_0) then
		hideparameter	"bShowOnormData_0"
		lock			"bShowOnormData_0"
	endif

	if not(bgAddTags_0) then
		hideparameter	"bShowAdditionalTags_0"
		lock			"bShowAdditionalTags_0"
	endif

	if not(bgCustom_0) then
		hideparameter	"bShowCustom1_0", "bShowCustom2_0", "bShowCustom3_0"
		lock			"bShowCustom1_0", "bShowCustom2_0", "bShowCustom3_0"
	endif

	! ---------- Apartment ID ----------
	values "apartmentIdFrame_0" stApartmentIdFrame
	values "iApartmentIdFrame_0" APARTMENT_ID_FRAME_NONE, APARTMENT_ID_FRAME_RECT, APARTMENT_ID_FRAME_OVAL, APARTMENT_ID_FRAME_CIRC
	if GLOB_MODPAR_NAME = "apartmentIdFrame_0" then
		for i = 1 to vardim1(stApartmentIdFrame)
			if apartmentIdFrame_0 = stApartmentIdFrame[i] then
				iApartmentIdFrame_0 = vardim1(stApartmentIdFrame) - i
				i = vardim1(stApartmentIdFrame)
			endif
		next i
		parameters iApartmentIdFrame_0 = iApartmentIdFrame_0
	else
		iApartmentIdFrame_0 = max(min(iApartmentIdFrame_0,vardim1(stApartmentIdFrame)-1),0)
		parameters apartmentIdFrame_0 = stApartmentIdFrame[vardim1(stApartmentIdFrame)-iApartmentIdFrame_0]
	endif

	if not(bShowApartmentID_0) then
		hideparameter	"apartmentIdFrame_0", "iApartmentIdFrame_0", "apartmentIDoffsetX_0", "apartmentIDoffsetY_0", "apartmentIDangle_0", "bFixRadius_0", "frameRadius_0"
		lock			"apartmentIdFrame_0", "iApartmentIdFrame_0", "apartmentIDoffsetX_0", "apartmentIDoffsetY_0", "apartmentIDangle_0", "bFixRadius_0", "frameRadius_0"
	endif

	! ---------- Fixed Radius ----------
	if iApartmentIdFrame_0 <> APARTMENT_ID_FRAME_CIRC then
		hideparameter	"bFixRadius_0", "frameRadius_0"
		lock			"bFixRadius_0", "frameRadius_0"
	endif
	values "frameRadius_0" range (0, )

	if not(bFixRadius_0) then
		hideparameter	"frameRadius_0"
		lock			"frameRadius_0"
	endif

	! ---------- Frame ----------
	values "sFrameStyle_0" stFrameStyle
	values "iFrameStyle_0" 1,2,3,4,5
	if GLOB_MODPAR_NAME = "sFrameStyle_0" then
		for i = 1 to vardim1(stFrameStyle)
			if sFrameStyle_0 = stFrameStyle[i] then
				iFrameStyle_0 = i
				i = vardim1(stFrameStyle)
			endif
		next i
		parameters iFrameStyle_0 = iFrameStyle_0
	else
		iFrameStyle_0 = max(min(iFrameStyle_0,vardim1(stFrameStyle)),1)
		parameters sFrameStyle_0 = stFrameStyle[iFrameStyle_0]
	endif


	! ---------- Fixed Width ----------
	if not(bFixWidth_0) then
		hideparameter	"fixWidth_0"
		lock			"fixWidth_0"
	endif
	values "fixWidth_0"	range (0,)

	! ---------- Texts Align ----------
	if iStampType = ZONE_STAMP_2_INT then
		values{2} "iAlignTexts_0" 	0, `Середина`,
									1, `Слева`,
									2, `Справа`
	endif

	! ---------- Numerical Values Align ----------
	values "sAlignNumericalValues_0" stDataAlign
	values "iAlignNumericalValues_0" 1,2
	if GLOB_MODPAR_NAME = "sAlignNumericalValues_0" then
		for i = 1 to vardim1(stDataAlign)
			if sAlignNumericalValues_0= stDataAlign[i] then
				iAlignNumericalValues_0= i
				i = vardim1(stDataAlign)
			endif
		next i
		parameters iAlignNumericalValues_0= iAlignNumericalValues_0
	else
		iAlignNumericalValues_0= max(min(iAlignNumericalValues_0,vardim1(stDataAlign)),1)
		parameters sAlignNumericalValues_0= stDataAlign[iAlignNumericalValues_0]
	endif

	! ---------- Finish Text Align ----------
	values "sAlignStringValues_0" stDataAlign
	values "iAlignStringValues_0" 1,2
	if GLOB_MODPAR_NAME = "sAlignStringValues_0" then
		for i = 1 to vardim1(stDataAlign)
			if sAlignStringValues_0= stDataAlign[i] then
				iAlignStringValues_0= i
				i = vardim1(stDataAlign)
			endif
		next i
		parameters iAlignStringValues_0= iAlignStringValues_0
	else
		iAlignStringValues_0= max(min(iAlignStringValues_0,vardim1(stDataAlign)),1)
		parameters sAlignStringValues_0= stDataAlign[iAlignStringValues_0]
	endif

	! ---------- Fonts ----------
	values "fontScaleType_0" stFontScale
	values "iFontScaleType_0" FONT_MODEL, FONT_PAPER
	if GLOB_MODPAR_NAME = "fontScaleType_0" then
		for i = 1 to vardim1(stFontScale)
			if fontScaleType_0 = stFontScale[i] then
				iFontScaleType_0 = i
				i = vardim1(stFontScale)
			endif
		next i
		parameters iFontScaleType_0 = iFontScaleType_0
	else
		iFontScaleType_0 = max(min(iFontScaleType_0,vardim1(stFontScale)),1)
		parameters fontScaleType_0 = stFontScale[iFontScaleType_0]
	endif

	if bAutomaticLineSpace_0 then
		hideparameter	"lineSpacing_0"
		lock			"lineSpacing_0"
	endif

	if not(bShowDimensionUnits_0) then
		hideparameter	"bShowSuperScript_0"
		lock			"bShowSuperScript_0"
	endif

	values "lineSpacing_0"		range [0,]

	if fontTitleSizePaper_0 < eps then
		fontTitleSizePaper_0 = eps
		parameters fontTitleSizePaper_0 = fontTitleSizePaper_0
	endif

	if fontTitleSizeModel_0 < eps then
		fontTitleSizeModel_0 = eps
		parameters fontTitleSizeModel_0 = fontTitleSizeModel_0
	endif

	if fontDataSizePaper_0 < eps then
		fontDataSizePaper_0 = eps
		parameters fontDataSizePaper_0 = fontDataSizePaper_0
	endif

	if fontDataSizeModel_0 < eps then
		fontDataSizeModel_0 = eps
		parameters fontDataSizeModel_0 = fontDataSizeModel_0
	endif

	! Attributes -------------------------------------------------------------------
	! --- Pens
	values "fillPen_0" iPenNumber
	values "framePen_0" iPenNumber


	! --- Frame's attributes
	if not(_needFrameAttr_0) then
		hideparameter	"framePen_0", "frameLineType_0"
		lock			"framePen_0", "frameLineType_0"
	endif
	! --- Background Fill
	if not(bBackFill_0) then
		hideparameter	"fillType_0", "fillPen_0", "fillBackPen_0"
		lock			"fillType_0", "fillPen_0", "fillBackPen_0"
	endif

	! ---------- Pointer ----------
	if iStampType = ZONE_STAMP_2_INT then
		if 	not(bShowZoneNameLine1_0) 		&\
			not(bShowZoneNum_0) 			&\
			not(bShowZoneCatCode_0) 		&\
			not(bShowZoneNameLine2_0) 		&\
			not(bShowApartmentName_0) 		&\
			not(bShowPosition_0) 			&\
			not(bShowHouseNumber_0) 		&\
			not(bShowFunctions_0) 			&\
			not(bShowID_0) 					&\
			not(bShowFloor_0) 				&\
			not(bShowWallFinish_0) 			&\
			not(bShowCeiling_0) 			&\
			not(bShowHeightZone_0) 			&\
			not(bShowHeightFloor_0) 		&\
			not(bShowMeasuredArea_0) 		&\
			not(bShowMeasuredNetArea_0) 	&\
			not(bShowReducedArea_0) 		&\
			not(bShowCalculatedArea_0) 		&\
			not(bShowWindowArea_0) 			&\
			not(bShowPerimeter_0) 			&\
			not(bShowCeilingHeight_0) 		&\
			not(bShowVolume_0) 				&\
			not(bShowCustom1_0) 			&\
			not(bShowCustom2_0) 			&\
			not(bShowCustom3_0) 			&\
			not(bShowAdditionalTags_0)		then	! No content shown, or only Apartment ID

			bPointer_0 = 0
			parameters bPointer_0 = bPointer_0

			hideparameter	"bPointer_0"
			lock			"bPointer_0"
		endif

		values{2} "iPointerAnchor_0" 	1, `Вверху`,
										2, `Середина`,
										3, `Внизу`
	
		values{2} "iPointerSide_0" 	1, `Cо Стороны 1`,
										2, `Cо Стороны 2`
	
		values{2} "iArrowHeadType_0" 	TRIANG_2LIN_45,		stArrowheadType[1],
										TRIANG_2LIN_30,		stArrowheadType[2],
										TRIANG_2LIN_15,		stArrowheadType[3],
										TRIANG_3LIN_45,		stArrowheadType[4],
										TRIANG_3LIN_30,		stArrowheadType[5],
										TRIANG_3LIN_15,		stArrowheadType[6],
										TRIANG_FILLED_45,	stArrowheadType[7],
										TRIANG_FILLED_30,	stArrowheadType[8],
										TRIANG_FILLED_15,	stArrowheadType[9],
										CIRCLE_EMPTY,		stArrowheadType[10],
										CIRCLE_FILLED,		stArrowheadType[11]
	
		if GLOB_MODPAR_NAME = "bPointer_0" then
			if bPointer_0 then					 ! set defaults by design
				pointerOffsetX_0	= 0
				pointerOffsetY_0	= 0
				pointerHorDist_0	= 1.5
				offsetX_0 			= 2.5
				offsetY_0 			= 1

				parameters 	pointerOffsetX_0 	= pointerOffsetX_0,
							pointerOffsetY_0	= pointerOffsetY_0,
							pointerHorDist_0	= pointerHorDist_0
            else
            	offsetX_0 	= pointerOffsetX_0
				offsetY_0 	= pointerOffsetY_0
			endif
            parameters  offsetX_0	= offsetX_0,
                        offsetY_0	= offsetY_0
		endif
	
		values "pointerHorDist_0" range (0, )

		if not(bPointer_0) then
			hideparameter	"iPointerAnchor_0", "iPointerSide_0", "ltPointer_0", "penPointer_0", "bArrowhead_0", "iArrowHeadType_0", "penArrowhead_0"
			lock			"iPointerAnchor_0", "iPointerSide_0", "ltPointer_0", "penPointer_0", "bArrowhead_0", "iArrowHeadType_0", "penArrowhead_0"
		else
			if not(bArrowhead_0) then
				hideparameter	"iArrowHeadType_0", "penArrowhead_0"
				lock			"iArrowHeadType_0", "penArrowhead_0"
			endif
		endif
	endif
endif


! ==============================================================================
! Main Values
! ==============================================================================

values "ROOM_NAME"	stRoomNames, custom

! ---------- Covering ----------
values "iWallCovering" 1, 2, 3, 4, 999
values "stWallCovering" stWallCoveringValues, custom

if GLOB_MODPAR_NAME = "stWallCovering" then
	iWallCovering = 999
	if stWallCovering = stWallCoveringValues[1] then iWallCovering = 1
	if stWallCovering = stWallCoveringValues[2] then iWallCovering = 2
	if stWallCovering = stWallCoveringValues[3] then iWallCovering = 3
	if stWallCovering = stWallCoveringValues[4] then iWallCovering = 4
	parameters iWallCovering = iWallCovering
else
	if iWallCovering = 1 then stWallCovering = stWallCoveringValues[1]
	if iWallCovering = 2 then stWallCovering = stWallCoveringValues[2]
	if iWallCovering = 3 then stWallCovering = stWallCoveringValues[3]
	if iWallCovering = 4 then stWallCovering = stWallCoveringValues[4]
	parameters stWallCovering = stWallCovering
endif

values "iCeilingCovering" 1, 2, 3, 999
values "stCeilingCovering" stCeilingCoveringValues, custom

if GLOB_MODPAR_NAME = "stCeilingCovering" then
	iCeilingCovering = 999
	if stCeilingCovering = stCeilingCoveringValues[1] then iCeilingCovering = 1
	if stCeilingCovering = stCeilingCoveringValues[2] then iCeilingCovering = 2
	if stCeilingCovering = stCeilingCoveringValues[3] then iCeilingCovering = 3
	parameters iCeilingCovering = iCeilingCovering
else
	if iCeilingCovering = 1 then stCeilingCovering = stCeilingCoveringValues[1]
	if iCeilingCovering = 2 then stCeilingCovering = stCeilingCoveringValues[2]
	if iCeilingCovering = 3 then stCeilingCovering = stCeilingCoveringValues[3]
	parameters stCeilingCovering = stCeilingCovering
endif

values "iFloorCovering" 1, 2, 3, 4, 999
values "stFloorCovering" stFloorCoveringValues, custom

if GLOB_MODPAR_NAME = "stFloorCovering" then
	iFloorCovering = 999
	if stFloorCovering = stFloorCoveringValues[1] then iFloorCovering = 1
	if stFloorCovering = stFloorCoveringValues[2] then iFloorCovering = 2
	if stFloorCovering = stFloorCoveringValues[3] then iFloorCovering = 3
	if stFloorCovering = stFloorCoveringValues[4] then iFloorCovering = 4
	parameters iFloorCovering = iFloorCovering
else
	if iFloorCovering = 1 then stFloorCovering = stFloorCoveringValues[1]
	if iFloorCovering = 2 then stFloorCovering = stFloorCoveringValues[2]
	if iFloorCovering = 3 then stFloorCovering = stFloorCoveringValues[3]
	if iFloorCovering = 4 then stFloorCovering = stFloorCoveringValues[4]
	parameters stFloorCovering = stFloorCovering
endif

if iStampType = ZONE_STAMP_ON then
	values "iExistingFloorFinish" 1, 2, 3, 4, 999
	values "stExistingFloorFinish" stFloorCoveringValues, custom

	if GLOB_MODPAR_NAME = "stExistingFloorFinish" then
		iExistingFloorFinish = 999
		if stExistingFloorFinish = stFloorCoveringValues[1] then iExistingFloorFinish = 1
		if stExistingFloorFinish = stFloorCoveringValues[2] then iExistingFloorFinish = 2
		if stExistingFloorFinish = stFloorCoveringValues[3] then iExistingFloorFinish = 3
		if stExistingFloorFinish = stFloorCoveringValues[4] then iExistingFloorFinish = 4
		parameters iExistingFloorFinish = iExistingFloorFinish
	else
		if iExistingFloorFinish = 1 then stExistingFloorFinish = stFloorCoveringValues[1]
		if iExistingFloorFinish = 2 then stExistingFloorFinish = stFloorCoveringValues[2]
		if iExistingFloorFinish = 3 then stExistingFloorFinish = stFloorCoveringValues[3]
		if iExistingFloorFinish = 4 then stExistingFloorFinish = stFloorCoveringValues[4]
		parameters stExistingFloorFinish = stExistingFloorFinish
	endif
endif

values{2} "iShowZoneIDAs"	IDVALUE_IDNUMBER, stIDValue[1],
							IDVALUE_FULLIDNUM, stIDValue[2]

! ---------- Height Values ----------

! Finished Floor Level ----------

if bAutomaticFloorLevel then
	hideparameter	"customFloorLevel"
	lock			"customFloorLevel"
endif

values "sPrefixFloorLevel" stPrefixLevel
values "iPrefixFloorLevel" 1,2
if GLOB_MODPAR_NAME = "sPrefixFloorLevel" then
	iPrefixFloorLevel = PREFIX_MARKER
	if sPrefixFloorLevel = stPrefixLevel[2] then iPrefixFloorLevel = 2
	parameters iPrefixFloorLevel = iPrefixFloorLevel
else
	sPrefixFloorLevel = stPrefixLevel[iPrefixFloorLevel]
	parameters sPrefixFloorLevel= sPrefixFloorLevel
endif

values{2} "iMarkerFloorLevel"	MARKER_TRIANGLE_FILL1, 		_sMarkerSign[1],
								MARKER_TRIANGLE_FILLBOTH,	_sMarkerSign[2],
								MARKER_TRIANGLE_FILL2,		_sMarkerSign[3],
								MARKER_CIRCLE_FILL1,		_sMarkerSign[4],
								MARKER_CIRCLE_FILLBOTH,		_sMarkerSign[5]


if iPrefixFloorLevel = PREFIX_MARKER then
	hideparameter 	"titleFloorLevel"
	lock			"titleFloorLevel"
else
	lock "iMarkerFloorLevel"
	hideparameter "iMarkerFloorLevel"
endif

! Zone Level ----------

if bAutomaticZoneLevel then
	hideparameter	"customZoneLevel"
	lock			"customZoneLevel"
endif

values "sPrefixZoneLevel" stPrefixLevel
values "iPrefixZoneLevel" 1,2
if GLOB_MODPAR_NAME = "sPrefixZoneLevel" then
	iPrefixZoneLevel = PREFIX_MARKER
	if sPrefixZoneLevel = stPrefixLevel[2] then iPrefixZoneLevel = 2
	parameters iPrefixZoneLevel = iPrefixZoneLevel
else
	sPrefixZoneLevel = stPrefixLevel[iPrefixZoneLevel]
	parameters sPrefixZoneLevel= sPrefixZoneLevel
endif

values{2} "iMarkerZoneLevel"	MARKER_TRIANGLE_FILL1, 		_sMarkerSign[1],
								MARKER_TRIANGLE_FILLBOTH,	_sMarkerSign[2],
								MARKER_TRIANGLE_FILL2,		_sMarkerSign[3],
								MARKER_CIRCLE_FILL1,		_sMarkerSign[4],
								MARKER_CIRCLE_FILLBOTH,		_sMarkerSign[5]

if iPrefixZoneLevel = PREFIX_MARKER then
	hideparameter 	"titleZoneLevel"
	lock			"titleZoneLevel"
else
	lock "iMarkerZoneLevel"
	hideparameter "iMarkerZoneLevel"
endif

! ==============================================================================
! Additional Tags
! ==============================================================================

call "ZoneStampProperties_m" parameters all 


! ==============================================================================
! Disable Functions by Standards
! ==============================================================================

if iStampType = ZONE_STAMP_DIN | iStampType = ZONE_STAMP_ON then
	! ----- Identification for Apartment/TOP Stamp Add-On -------

	values{2} "iApartmentCode" 1, `ID Квартиры`,
								2, `Имя Квартиры`,
								3, `Специальный`
	if iApartmentCode = 1 then						! Apartment ID
		asAddOn_stApartmentCode = stApartmentId
		lock "asAddOn_stApartmentCode"
	else
		if iApartmentCode = 2 then					! Apartment Name
			asAddOn_stApartmentCode = apartmentName
			lock "asAddOn_stApartmentCode"
		endif
	endif
	parameters asAddOn_stApartmentCode = asAddOn_stApartmentCode
 
	if not(bShowApCodePrefix) then
		lock "stApartmentCodePrefix"
	endif

	values{2} "iStaircaseCode" 1, `Функция`,
								2, `Специальный`
	if iStaircaseCode = 1 then						! Function Name
		asAddOn_stStaircaseCode = functionName
		lock "asAddOn_stStaircaseCode"
		parameters asAddOn_stStaircaseCode = asAddOn_stStaircaseCode
	endif

	values{2} "iHouseCode" 1, `Номер Дома`,
							2, `Специальный`
	if iHouseCode = 1 then							! House Number
		asAddOn_stHouseCode = stHouseNumber
		lock "asAddOn_stHouseCode"
		parameters asAddOn_stHouseCode = asAddOn_stHouseCode
	endif

	values{2} "iPositionCode" 	1, `Расположение`,
								2, `Специальный`
	if iPositionCode = 1 then						! Position
		asAddOn_stPositionCode = stPosition
		lock "asAddOn_stPositionCode"
		parameters asAddOn_stPositionCode = asAddOn_stPositionCode
	endif
endif

if iStampType = ZONE_STAMP_DIN then
	! ---------- DIN 277 ----------
	values "din277AreaCode" stDin277AreaCode

	! ----- only for listing -------
	lock "room_calc_area_reduced"
	parameters room_calc_area_reduced = _calculatedReducedAreaDIN

	! ----- for Apartment Stamp Add-On -------
	if not(bSubRegul) then
    	asAddOn_SubRegul = 0
		parameters asAddOn_SubRegul = asAddOn_SubRegul
        
		hideparameter "asAddOn_SubRegul"
		lock "asAddOn_SubRegul"
	else
		if asAddOn_SubRegul < eps then
			asAddOn_SubRegul = 0
			parameters asAddOn_SubRegul = asAddOn_SubRegul
		endif
		if asAddOn_SubRegul > 100 then
			asAddOn_SubRegul = 100
			parameters asAddOn_SubRegul = asAddOn_SubRegul
		endif
	endif
	asAddOn_SubArea 	= _subtractedAreaDIN
	asAddOn_SubFinish 	= _subtractionForFinishesDIN
	asAddOn_CalcArea 	= _calculatedReducedAreaDIN
	parameters 	asAddOn_SubArea 	= asAddOn_SubArea,
				asAddOn_SubFinish	= asAddOn_SubFinish,
				asAddOn_CalcArea	= asAddOn_CalcArea

	lock 			"asAddOn_SubArea", "asAddOn_SubFinish", "asAddOn_CalcArea"
	hideparameter 	"asAddOn_SubArea", "asAddOn_SubFinish", "asAddOn_CalcArea"
endif

if iStampType = ZONE_STAMP_ON then
	! ---------- for TOP Stamp Add-On ----------
	values{2} "asAddOn_iHousing"	1, stTopHousingValues[1],
									2, stTopHousingValues[2],
									3, stTopHousingValues[3],
									4, stTopHousingValues[4],
									5, stTopHousingValues[5],
									6, stTopHousingValues[6],
									7, stTopHousingValues[7],
									8, stTopHousingValues[8]
endif

! ---------- ONORM ----------
if iStampType = ZONE_STAMP_ON then
	if bScaleSensitive then
		hideparameter	"bShowOnormData_0"
		lock			"bShowOnormData_0"
	else
		hideparameter	"bShowOnormData_50", "bShowOnormData_100", "bShowOnormData_200"
		lock			"bShowOnormData_50", "bShowOnormData_100", "bShowOnormData_200"
	endif

	if NOT(bUseSepPensForRenovSettings) then
		lock			"penZoneName",
						"pen2ndZoneNameLine",
						"penMeasuredArea",
						"penExistingArea",
						"penFloorFinish",
						"penExistingFloorFinish"
		hideparameter	"penZoneName",
						"pen2ndZoneNameLine",
						"penMeasuredArea",
						"penExistingArea",
						"penFloorFinish",
						"penExistingFloorFinish"
	endif
endif

! ==============================================================================
! Measured and Calculated Area Unit in Custom Unit
! ==============================================================================

if iStampType = ZONE_STAMP_2_INT then

	values{2} "iAreaUnit" 	AREA_UNIT_PROJECT, 				stAreaUnit[1],
							AREA_UNIT_CUST_AND_PROJECT, 	stAreaUnit[2],
							AREA_UNIT_CUST, 		    	stAreaUnit[3]

	values{2} "iAreaCustomUnit"		CUST_METER,		stAreaCustomUnit[1],
									CUST_CMETER,	stAreaCustomUnit[2],
									CUST_MMETER,	stAreaCustomUnit[3],
									CUST_DECFT,		stAreaCustomUnit[4],
									CUST_DECIN,		stAreaCustomUnit[5],
									CUST_TSUBO,		stAreaCustomUnit[6]

	if 	iAreaCustomUnit = CUST_METER |\
		iAreaCustomUnit = CUST_DECFT |\
		iAreaCustomUnit = CUST_TSUBO then

		values "iAreaDecimalOptions" 0, 1, 2, 3, 4
	else
		if 	iAreaCustomUnit = CUST_DECIN then
			values "iAreaDecimalOptions" 0, 1, 2, 3
		else
			if 	iAreaCustomUnit = CUST_CMETER then
				values "iAreaDecimalOptions" 0, 1, 2
			else								! CUST_MMETER
				values "iAreaDecimalOptions" 0, 1
			endif
		endif
	endif
    
    if bScaleSensitive then
        if not(bShowMeasuredArea_50  |\
            bShowMeasuredNetArea_50  |\
            bShowReducedArea_50      |\
            bShowCalculatedArea_50   |\
            bShowMeasuredArea_100    |\
            bShowMeasuredNetArea_100 |\
            bShowReducedArea_100     |\
            bShowCalculatedArea_100  |\
            bShowMeasuredArea_200    |\
            bShowMeasuredNetArea_200 |\
            bShowReducedArea_200     |\
            bShowCalculatedArea_200) then
            
            lock 			"iAreaUnit", "iAreaDecimalOptions", "iAreaCustomUnit"
            hideparameter 	"iAreaUnit", "iAreaDecimalOptions", "iAreaCustomUnit"
        endif
    else
        if not(bShowMeasuredArea_0  |\
            bShowMeasuredNetArea_0  |\
            bShowReducedArea_0      |\
            bShowCalculatedArea_0)  then
            
            lock 			"iAreaUnit", "iAreaDecimalOptions", "iAreaCustomUnit"
            hideparameter 	"iAreaUnit", "iAreaDecimalOptions", "iAreaCustomUnit"
        endif
    endif
    
	if 	iAreaUnit = AREA_UNIT_PROJECT then
		lock 			"iAreaDecimalOptions", "iAreaCustomUnit"	
		hideparameter 	"iAreaDecimalOptions", "iAreaCustomUnit"	
	endif
endif

! ==============================================================================
! Pointer only in Zone_stamp_2
! ==============================================================================

if iStampType = ZONE_STAMP_2_INT then
	values "arrowheadSize" range [0, )

	if bScaleSensitive then
		hideparameter	"bPointer_0"
		lock			"bPointer_0"

		if 	(not(bPointer_50) | not(bArrowhead_50)) &\
			(not(bPointer_100) | not(bArrowhead_100)) &\
			(not(bPointer_200) | not(bArrowhead_200)) then

			hideparameter	"arrowheadSize"
			lock			"arrowheadSize"
		endif

	else
		hideparameter	"bPointer_50", "bPointer_100", "bPointer_200"
		lock			"bPointer_50", "bPointer_100", "bPointer_200"

		if not(bPointer_0) | not(bArrowhead_0) then

			hideparameter	"arrowheadSize"
			lock			"arrowheadSize"
		endif
	endif
endif

! ==============================================================================
! Lock Parameters
! ==============================================================================
! ---------- Zona Name ----------
if	(not(bShowZoneNameLine1_0)		& _iUIDisplayScale = SCALE_INSENSITIVE) | \
	(not(bShowZoneNameLine1_50)		& _iUIDisplayScale = SCALE_50) | \
	(not(bShowZoneNameLine1_100)	& _iUIDisplayScale = SCALE_100) | \
	(not(bShowZoneNameLine1_200)	& _iUIDisplayScale = SCALE_200) then
	hideparameter	"bUseCategoryName"
	lock			"bUseCategoryName"
endif

! ---------- Height Values ----------
tAutomaticFloor	= 0
tAutomaticZone	= 0
if	(bShowHeightFloor_0	& _iUIDisplayScale = SCALE_INSENSITIVE) | \
	(bShowHeightFloor_50 & _iUIDisplayScale = SCALE_50) | \
	(bShowHeightFloor_100 & _iUIDisplayScale = SCALE_100) | \
	(bShowHeightFloor_200 & _iUIDisplayScale = SCALE_200) then
	tAutomaticFloor = 1
endif

if	(bShowHeightZone_0	& _iUIDisplayScale = SCALE_INSENSITIVE) | \
	(bShowHeightZone_50 & _iUIDisplayScale = SCALE_50) | \
	(bShowHeightZone_100 & _iUIDisplayScale = SCALE_100) | \
	(bShowHeightZone_200 & _iUIDisplayScale = SCALE_200) then
	tAutomaticZone = 1
endif

if not(tAutomaticZone) then
	hideparameter	"bAutomaticZoneLevel", "customZoneLevel", "sPrefixZoneLevel", "iPrefixZoneLevel", "titleZoneLevel", "iMarkerZoneLevel"
	lock			"bAutomaticZoneLevel", "customZoneLevel", "sPrefixZoneLevel", "iPrefixZoneLevel", "titleZoneLevel", "iMarkerZoneLevel"
endif

if not(tAutomaticFloor) then
	hideparameter	"bAutomaticFloorLevel", "customFloorLevel", "sPrefixFloorLevel", "iPrefixFloorLevel", "titleFloorLevel", "iMarkerFloorLevel"
	lock			"bAutomaticFloorLevel", "customFloorLevel", "sPrefixFloorLevel", "iPrefixFloorLevel", "titleFloorLevel", "iMarkerFloorLevel"
endif

if not(tAutomaticZone) & not(tAutomaticFloor) then
	hideparameter	"sp_height"
	lock			"sp_height"
endif

! ---------- Height Values Marker Fills ----------
if 	(not(tAutomaticZone) 				|\
	iPrefixZoneLevel = PREFIX_TEXT) 	&\
	(not(tAutomaticFloor) 				|\
	iPrefixFloorLevel = PREFIX_TEXT) 	then

	hideparameter	"typeFillMarker1", "penFillMarker1", "bgpenFillMarker1", "typeFillMarker2", "penFillMarker2", "bgpenFillMarker2"
	lock			"typeFillMarker1", "penFillMarker1", "bgpenFillMarker1", "typeFillMarker2", "penFillMarker2", "bgpenFillMarker2"
else
	if not(tAutomaticZone) |  iPrefixZoneLevel = PREFIX_TEXT then
		if 	iMarkerFloorLevel = MARKER_TRIANGLE_FILL1 |\
			iMarkerFloorLevel = MARKER_CIRCLE_FILL1	then
		
			hideparameter	"typeFillMarker2", "penFillMarker2", "bgpenFillMarker2"
			lock			"typeFillMarker2", "penFillMarker2", "bgpenFillMarker2"
		else
			if 	iMarkerFloorLevel = MARKER_TRIANGLE_FILL2	then
				hideparameter	"typeFillMarker1", "penFillMarker1", "bgpenFillMarker1"
				lock			"typeFillMarker1", "penFillMarker1", "bgpenFillMarker1"
			endif
		endif
	else
		if not(tAutomaticFloor) |  iPrefixFloorLevel = PREFIX_TEXT then
			if 	iMarkerZoneLevel = MARKER_TRIANGLE_FILL1 |\
				iMarkerZoneLevel = MARKER_CIRCLE_FILL1	then
			
				hideparameter	"typeFillMarker2", "penFillMarker2", "bgpenFillMarker2"
				lock			"typeFillMarker2", "penFillMarker2", "bgpenFillMarker2"
			else
				if 	iMarkerZoneLevel = MARKER_TRIANGLE_FILL2	then
					hideparameter	"typeFillMarker1", "penFillMarker1", "bgpenFillMarker1"
					lock			"typeFillMarker1", "penFillMarker1", "bgpenFillMarker1"
				endif
			endif
		else
			if 	(iMarkerZoneLevel = MARKER_TRIANGLE_FILL1 	|\
				iMarkerZoneLevel = MARKER_CIRCLE_FILL1)	&\
				(iMarkerFloorLevel = MARKER_TRIANGLE_FILL1 |\
				iMarkerFloorLevel = MARKER_CIRCLE_FILL1)	then
			
				hideparameter	"typeFillMarker2", "penFillMarker2", "bgpenFillMarker2"
				lock			"typeFillMarker2", "penFillMarker2", "bgpenFillMarker2"
			else
				if 	iMarkerZoneLevel = MARKER_TRIANGLE_FILL2 	&\
					iMarkerFloorLevel = MARKER_TRIANGLE_FILL2	then
			
					hideparameter	"typeFillMarker1", "penFillMarker1", "bgpenFillMarker1"
					lock			"typeFillMarker1", "penFillMarker1", "bgpenFillMarker1"
				endif
			endif
		endif
	endif
endif

! ==============================================================================
! Prices
! ==============================================================================

if iStampType = ZONE_STAMP_DIN then								! Price Calculated from Calculated Area
	gs_list_calculated_area_price 	= room_calc_area_reduced * gs_list_price_per_m2
else
	gs_list_calculated_area_price	= ROOM_CALC_AREA * gs_list_price_per_m2
endif
gs_list_gross_area_price 	= ROOM_AREA * gs_list_price_per_m2			! Price Calculated from Measured Area
gs_list_net_area_price	 	= ROOM_NET_AREA * gs_list_price_per_m2		! Price Calculated from Measured Net Area
gs_list_reduced_area_price 	= ROOM_REDUCED_AREA * gs_list_price_per_m2	! Price Calculated from Reduced Area


gs_list_gross_volume_price 	= ROOM_VOLUME * gs_list_price_per_m3


parameters	gs_list_gross_area_price 		= gs_list_gross_area_price,
			gs_list_net_area_price			= gs_list_net_area_price,
			gs_list_reduced_area_price		= gs_list_reduced_area_price,
			gs_list_calculated_area_price	= gs_list_calculated_area_price

parameters gs_list_gross_volume_price 	= gs_list_gross_volume_price

lock	"gs_list_gross_area_price",
		"gs_list_net_area_price",
		"gs_list_reduced_area_price",
		"gs_list_calculated_area_price",
		"gs_list_gross_volume_price"


! ==============================================================================
! Interface Script
! ==============================================================================

for i = 1 to LAST_PAGE_INDEX
	put i
next i
values "gs_ui_current_page" get(nsp)

if GLOB_UI_BUTTON_ID < 0 then
	parameters gs_ui_current_page = abs(GLOB_UI_BUTTON_ID) - idButton_jumptopage
endif

! ---------- UI Scale settings ----------
values "displayScale" stDisplayScale
values "iDisplayScale" SCALE_50, SCALE_100, SCALE_200
if GLOB_MODPAR_NAME = "displayScale" then
	for i = 1 to vardim1(stDisplayScale)
		if displayScale = stDisplayScale[i]	then
			iDisplayScale = i
			i = vardim1(stDisplayScale)
		endif
	next i
	parameters iDisplayScale = iDisplayScale
else
	iDisplayScale = max(min(iDisplayScale,vardim1(stDisplayScale)),1)
	parameters displayScale = stDisplayScale[iDisplayScale]
endif

if bScaleSensitive then
	hideparameter	"reprezentation", "displayOrder"
	lock			"reprezentation", "displayOrder"
else
	hideparameter	"displayScale", "iDisplayScale", "reprezentation_50", "reprezentation_100", "reprezentation_200", "displayOrder_50", "displayOrder_100", "displayOrder_200"
	lock			"displayScale", "iDisplayScale", "reprezentation_50", "reprezentation_100", "reprezentation_200", "displayOrder_50", "displayOrder_100", "displayOrder_200"
endif

!=============================================================================
! Pen Colors
!=============================================================================

if iStampType = ZONE_STAMP_ON then
	if NOT(bUseSepPensForRenovSettings) then
		hideparameter	"penZoneName", "iPenZoneName",
						"pen2ndZoneNameLine", "iPen2ndZoneNameLine",
						"penMeasuredArea", "iPenMeasuredArea",
						"penExistingArea", "iPenExistingArea",
						"penFloorFinish", "iPenFloorFinish",
						"penExistingFloorFinish", "iPenExistingFloorFinish",
						"bZoneNameUL", "bZoneNameST",
						"b2ndZoneNameUL", "b2ndZoneNameST",
						"bMeasuredAreaUL", "bMeasuredAreaST",
						"bExistingAreaUL", "bExistingAreaST",
						"bFloorFinishUL", "bFloorFinishST",
						"bExistingFloorFinishUL", "bExistingFloorFinishST"

		lock			"penZoneName", "iPenZoneName",
						"pen2ndZoneNameLine", "iPen2ndZoneNameLine",
						"penMeasuredArea", "iPenMeasuredArea",
						"penExistingArea", "iPenExistingArea",
						"penFloorFinish", "iPenFloorFinish",
						"penExistingFloorFinish", "iPenExistingFloorFinish",
						"bZoneNameUL", "bZoneNameST",
						"b2ndZoneNameUL", "b2ndZoneNameST",
						"bMeasuredAreaUL", "bMeasuredAreaST",
						"bExistingAreaUL", "bExistingAreaST",
						"bFloorFinishUL", "bFloorFinishST",
						"bExistingFloorFinishUL", "bExistingFloorFinishST"
	endif

	if penZoneName				< 1 then penZoneName				= 1
	if pen2ndZoneNameLine		< 1 then pen2ndZoneNameLine			= 1
	if penMeasuredArea			< 1 then penMeasuredArea			= 1
	if penExistingArea			< 1 then penExistingArea			= 1
	if penFloorFinish			< 1 then penFloorFinish				= 1
	if penExistingFloorFinish	< 1 then penExistingFloorFinish		= 1

	if penZoneName				> 255 then penZoneName				= 255
	if pen2ndZoneNameLine		> 255 then pen2ndZoneNameLine		= 255
	if penMeasuredArea			> 255 then penMeasuredArea			= 255
	if penExistingArea			> 255 then penExistingArea			= 255
	if penFloorFinish			> 255 then penFloorFinish			= 255
	if penExistingFloorFinish	> 255 then penExistingFloorFinish	= 255

	parameters		penZoneName				= penZoneName,
					pen2ndZoneNameLine		= pen2ndZoneNameLine,
					penMeasuredArea			= penMeasuredArea,
					penExistingArea			= penExistingArea,
					penFloorFinish			= penFloorFinish,
					penExistingFloorFinish	= penExistingFloorFinish

	if iPenZoneName				< 1 then iPenZoneName				= 1
	if iPen2ndZoneNameLine		< 1 then iPen2ndZoneNameLine		= 1
	if iPenMeasuredArea			< 1 then iPenMeasuredArea			= 1
	if iPenExistingArea			< 1 then iPenExistingArea			= 1
	if iPenFloorFinish			< 1 then iPenFloorFinish			= 1
	if iPenExistingFloorFinish	< 1 then iPenExistingFloorFinish	= 1

	if iPenZoneName				> 255 then iPenZoneName				= 255
	if iPen2ndZoneNameLine		> 255 then iPen2ndZoneNameLine		= 255
	if iPenMeasuredArea			> 255 then iPenMeasuredArea			= 255
	if iPenExistingArea			> 255 then iPenExistingArea			= 255
	if iPenFloorFinish			> 255 then iPenFloorFinish			= 255
	if iPenExistingFloorFinish	> 255 then iPenExistingFloorFinish	= 255

	parameters		iPenZoneName			= iPenZoneName,
					iPen2ndZoneNameLine		= iPen2ndZoneNameLine,
					iPenMeasuredArea		= iPenMeasuredArea,
					iPenExistingArea		= iPenExistingArea,
					iPenFloorFinish			= iPenFloorFinish,
					iPenExistingFloorFinish	= iPenExistingFloorFinish

	if GLOB_MODPAR_NAME = "iPenZoneName" then
		penZoneName = iPenZoneName
		parameters penZoneName = penZoneName
	else
		iPenZoneName = penZoneName
		parameters iPenZoneName = iPenZoneName
	endif
	if GLOB_MODPAR_NAME = "iPen2ndZoneNameLine" then
		pen2ndZoneNameLine = iPen2ndZoneNameLine
		parameters pen2ndZoneNameLine = pen2ndZoneNameLine
	else
		iPen2ndZoneNameLine = pen2ndZoneNameLine
		parameters iPen2ndZoneNameLine = iPen2ndZoneNameLine
	endif
	if GLOB_MODPAR_NAME = "iPenMeasuredArea" then
		penMeasuredArea = iPenMeasuredArea
		parameters penMeasuredArea = penMeasuredArea
	else
		iPenMeasuredArea = penMeasuredArea
		parameters iPenMeasuredArea = iPenMeasuredArea
	endif
	if GLOB_MODPAR_NAME = "iPenExistingArea" then
		penExistingArea = iPenExistingArea
		parameters penExistingArea = penExistingArea
	else
		iPenExistingArea = penExistingArea
		parameters iPenExistingArea = iPenExistingArea
	endif
	if GLOB_MODPAR_NAME = "iPenFloorFinish" then
		penFloorFinish = iPenFloorFinish
		parameters penFloorFinish = penFloorFinish
	else
		iPenFloorFinish = penFloorFinish
		parameters iPenFloorFinish = iPenFloorFinish
	endif
	if GLOB_MODPAR_NAME = "iPenExistingFloorFinish" then
		penExistingFloorFinish = iPenExistingFloorFinish
		parameters penExistingFloorFinish = penExistingFloorFinish
	else
		iPenExistingFloorFinish = penExistingFloorFinish
		parameters iPenExistingFloorFinish = iPenExistingFloorFinish
	endif
endif

end

! ==============================================================================
!
! Subroutines
!
! ==============================================================================

! ==============================================================================
"writeOrder_50":			! set Parameters value
! ------------------------------------------------------------------------------
!	Input Variables:
!		temp_stGroupOrder [String], temp_iGroupOrder [Integer]
!		__nGroupDisplay			Number of displayed Group
!	Output Variables:			none
!	Output Parameters:			none
!		orders_50				[Integer] orders integer in array parameters
!		nOrder_50				[Integer] Number of displayed Group parameter
! ==============================================================================

	iOrder_01_50 = temp_iGroupOrder[1]
	iOrder_02_50 = temp_iGroupOrder[2]
	iOrder_03_50 = temp_iGroupOrder[3]
	iOrder_04_50 = temp_iGroupOrder[4]
	iOrder_05_50 = temp_iGroupOrder[5]
	iOrder_06_50 = temp_iGroupOrder[6]
	iOrder_07_50 = temp_iGroupOrder[7]
	iOrder_08_50 = temp_iGroupOrder[8]
	iOrder_09_50 = temp_iGroupOrder[9]
	iOrder_10_50 = temp_iGroupOrder[10]
	iOrder_11_50 = temp_iGroupOrder[11]
	iOrder_12_50 = temp_iGroupOrder[12]

	order_12_50 = temp_stGroupOrder[12]
	order_11_50 = temp_stGroupOrder[11]
	order_10_50 = temp_stGroupOrder[10]
	order_09_50 = temp_stGroupOrder[9]
	order_08_50 = temp_stGroupOrder[8]
	order_07_50 = temp_stGroupOrder[7]
	order_06_50 = temp_stGroupOrder[6]
	order_05_50 = temp_stGroupOrder[5]
	order_04_50 = temp_stGroupOrder[4]
	order_03_50 = temp_stGroupOrder[3]
	order_02_50 = temp_stGroupOrder[2]
	order_01_50 = temp_stGroupOrder[1]


	dim orders_50[]
	orders_50 = temp_iGroupOrder
	nOrder_50 = __nGroupDisplay

	parameters	nOrder_50		= nOrder_50,
				orders_50		= orders_50,
				iOrder_01_50	= iOrder_01_50,
				iOrder_02_50	= iOrder_02_50,
				iOrder_03_50	= iOrder_03_50,
				iOrder_04_50	= iOrder_04_50,
				iOrder_05_50	= iOrder_05_50,
				iOrder_06_50	= iOrder_06_50,
				iOrder_07_50	= iOrder_07_50,
				iOrder_08_50	= iOrder_08_50,
				iOrder_09_50	= iOrder_09_50,
				iOrder_10_50	= iOrder_10_50,
				iOrder_11_50	= iOrder_11_50,
				iOrder_12_50	= iOrder_12_50

	parameters	order_01_50	= order_01_50,
				order_02_50	= order_02_50,
				order_03_50	= order_03_50,
				order_04_50	= order_04_50,
				order_05_50	= order_05_50,
				order_06_50	= order_06_50,
				order_07_50	= order_07_50,
				order_08_50	= order_08_50,
				order_09_50	= order_09_50,
				order_10_50	= order_10_50,
				order_11_50	= order_11_50,
				order_12_50	= order_12_50
return

! ==============================================================================
"writeOrder_100":			! set Parameters value
! ------------------------------------------------------------------------------
!	Input Variables:
!		temp_stGroupOrder [String], temp_iGroupOrder [Integer]
!		__nGroupDisplay			Number of displayed Group
!	Output Variables:			none
!	Output Parameters:			none
!		orders_100				[Integer] orders integer in array parameters
!		nOrder_100				[Integer] Number of displayed Group parameter
! ==============================================================================

	iOrder_01_100 = temp_iGroupOrder[1]
	iOrder_02_100 = temp_iGroupOrder[2]
	iOrder_03_100 = temp_iGroupOrder[3]
	iOrder_04_100 = temp_iGroupOrder[4]
	iOrder_05_100 = temp_iGroupOrder[5]
	iOrder_06_100 = temp_iGroupOrder[6]
	iOrder_07_100 = temp_iGroupOrder[7]
	iOrder_08_100 = temp_iGroupOrder[8]
	iOrder_09_100 = temp_iGroupOrder[9]
	iOrder_10_100 = temp_iGroupOrder[10]
	iOrder_11_100 = temp_iGroupOrder[11]
	iOrder_12_100 = temp_iGroupOrder[12]

	order_12_100 = temp_stGroupOrder[12]
	order_11_100 = temp_stGroupOrder[11]
	order_10_100 = temp_stGroupOrder[10]
	order_09_100 = temp_stGroupOrder[9]
	order_08_100 = temp_stGroupOrder[8]
	order_07_100 = temp_stGroupOrder[7]
	order_06_100 = temp_stGroupOrder[6]
	order_05_100 = temp_stGroupOrder[5]
	order_04_100 = temp_stGroupOrder[4]
	order_03_100 = temp_stGroupOrder[3]
	order_02_100 = temp_stGroupOrder[2]
	order_01_100 = temp_stGroupOrder[1]


	dim orders_100[]
	orders_100 = temp_iGroupOrder
	nOrder_100 = __nGroupDisplay

	parameters	nOrder_100		= nOrder_100,
				orders_100		= orders_100,
				iOrder_01_100	= iOrder_01_100,
				iOrder_02_100	= iOrder_02_100,
				iOrder_03_100	= iOrder_03_100,
				iOrder_04_100	= iOrder_04_100,
				iOrder_05_100	= iOrder_05_100,
				iOrder_06_100	= iOrder_06_100,
				iOrder_07_100	= iOrder_07_100,
				iOrder_08_100	= iOrder_08_100,
				iOrder_09_100	= iOrder_09_100,
				iOrder_10_100	= iOrder_10_100,
				iOrder_11_100	= iOrder_11_100,
				iOrder_12_100	= iOrder_12_100

	parameters	order_01_100	= order_01_100,
				order_02_100	= order_02_100,
				order_03_100	= order_03_100,
				order_04_100	= order_04_100,
				order_05_100	= order_05_100,
				order_06_100	= order_06_100,
				order_07_100	= order_07_100,
				order_08_100	= order_08_100,
				order_09_100	= order_09_100,
				order_10_100	= order_10_100,
				order_11_100	= order_11_100,
				order_12_100	= order_12_100

return

! ==============================================================================
"writeOrder_200":			! set Parameters value
! ------------------------------------------------------------------------------
!	Input Variables:
!		temp_stGroupOrder [String], temp_iGroupOrder [Integer]
!		__nGroupDisplay			Number of displayed Group
!	Output Variables:			none
!	Output Parameters:			none
!		orders_200				[Integer] orders integer in array parameters
!		nOrder_200				[Integer] Number of displayed Group parameter
! ==============================================================================

	iOrder_01_200 = temp_iGroupOrder[1]
	iOrder_02_200 = temp_iGroupOrder[2]
	iOrder_03_200 = temp_iGroupOrder[3]
	iOrder_04_200 = temp_iGroupOrder[4]
	iOrder_05_200 = temp_iGroupOrder[5]
	iOrder_06_200 = temp_iGroupOrder[6]
	iOrder_07_200 = temp_iGroupOrder[7]
	iOrder_08_200 = temp_iGroupOrder[8]
	iOrder_09_200 = temp_iGroupOrder[9]
	iOrder_10_200 = temp_iGroupOrder[10]
	iOrder_11_200 = temp_iGroupOrder[11]
	iOrder_12_200 = temp_iGroupOrder[12]

	order_12_200 = temp_stGroupOrder[12]
	order_11_200 = temp_stGroupOrder[11]
	order_10_200 = temp_stGroupOrder[10]
	order_09_200 = temp_stGroupOrder[9]
	order_08_200 = temp_stGroupOrder[8]
	order_07_200 = temp_stGroupOrder[7]
	order_06_200 = temp_stGroupOrder[6]
	order_05_200 = temp_stGroupOrder[5]
	order_04_200 = temp_stGroupOrder[4]
	order_03_200 = temp_stGroupOrder[3]
	order_02_200 = temp_stGroupOrder[2]
	order_01_200 = temp_stGroupOrder[1]


	dim orders_200[]
	orders_200 = temp_iGroupOrder
	nOrder_200 = __nGroupDisplay

	parameters	nOrder_200		= nOrder_200,
				orders_200		= orders_200,
				iOrder_01_200	= iOrder_01_200,
				iOrder_02_200	= iOrder_02_200,
				iOrder_03_200	= iOrder_03_200,
				iOrder_04_200	= iOrder_04_200,
				iOrder_05_200	= iOrder_05_200,
				iOrder_06_200	= iOrder_06_200,
				iOrder_07_200	= iOrder_07_200,
				iOrder_08_200	= iOrder_08_200,
				iOrder_09_200	= iOrder_09_200,
				iOrder_10_200	= iOrder_10_200,
				iOrder_11_200	= iOrder_11_200,
				iOrder_12_200	= iOrder_12_200

	parameters	order_01_200	= order_01_200,
				order_02_200	= order_02_200,
				order_03_200	= order_03_200,
				order_04_200	= order_04_200,
				order_05_200	= order_05_200,
				order_06_200	= order_06_200,
				order_07_200	= order_07_200,
				order_08_200	= order_08_200,
				order_09_200	= order_09_200,
				order_10_200	= order_10_200,
				order_11_200	= order_11_200,
				order_12_200	= order_12_200

return


! ==============================================================================
"writeOrder_0":			! set Parameters value
! ------------------------------------------------------------------------------
!	Input Variables:
!		temp_stGroupOrder [String], temp_iGroupOrder [Integer]
!		__nGroupDisplay			Number of displayed Group
!	Output Variables:			none
!	Output Parameters:			none
!		orders_0				[Integer] orders integer in array parameters
!		nOrder_0				[Integer] Number of displayed Group parameter
! ==============================================================================

	iOrder_01_0 = temp_iGroupOrder[1]
	iOrder_02_0 = temp_iGroupOrder[2]
	iOrder_03_0 = temp_iGroupOrder[3]
	iOrder_04_0 = temp_iGroupOrder[4]
	iOrder_05_0 = temp_iGroupOrder[5]
	iOrder_06_0 = temp_iGroupOrder[6]
	iOrder_07_0 = temp_iGroupOrder[7]
	iOrder_08_0 = temp_iGroupOrder[8]
	iOrder_09_0 = temp_iGroupOrder[9]
	iOrder_10_0 = temp_iGroupOrder[10]
	iOrder_11_0 = temp_iGroupOrder[11]
	iOrder_12_0 = temp_iGroupOrder[12]

	order_12_0 = temp_stGroupOrder[12]
	order_11_0 = temp_stGroupOrder[11]
	order_10_0 = temp_stGroupOrder[10]
	order_09_0 = temp_stGroupOrder[9]
	order_08_0 = temp_stGroupOrder[8]
	order_07_0 = temp_stGroupOrder[7]
	order_06_0 = temp_stGroupOrder[6]
	order_05_0 = temp_stGroupOrder[5]
	order_04_0 = temp_stGroupOrder[4]
	order_03_0 = temp_stGroupOrder[3]
	order_02_0 = temp_stGroupOrder[2]
	order_01_0 = temp_stGroupOrder[1]


	dim orders_0[]
	orders_0 = temp_iGroupOrder
	nOrder_0 = __nGroupDisplay

	parameters	nOrder_0	= nOrder_0,
				orders_0	= orders_0,
				iOrder_01_0	= iOrder_01_0,
				iOrder_02_0	= iOrder_02_0,
				iOrder_03_0	= iOrder_03_0,
				iOrder_04_0	= iOrder_04_0,
				iOrder_05_0	= iOrder_05_0,
				iOrder_06_0	= iOrder_06_0,
				iOrder_07_0	= iOrder_07_0,
				iOrder_08_0	= iOrder_08_0,
				iOrder_09_0	= iOrder_09_0,
				iOrder_10_0	= iOrder_10_0,
				iOrder_11_0	= iOrder_11_0,
				iOrder_12_0	= iOrder_12_0

	parameters	order_01_0	= order_01_0,
				order_02_0	= order_02_0,
				order_03_0	= order_03_0,
				order_04_0	= order_04_0,
				order_05_0	= order_05_0,
				order_06_0	= order_06_0,
				order_07_0	= order_07_0,
				order_08_0	= order_08_0,
				order_09_0	= order_09_0,
				order_10_0	= order_10_0,
				order_11_0	= order_11_0,
				order_12_0	= order_12_0
return


! ==============================================================================
"charge_temporary_array_with_integer_and_string_params_50":
! ------------------------------------------------------------------------------
!	Input Parameters:
!		order_01_50 [String], iOrder_01_50 [Integer]
!		order_02_50 [String], iOrder_02_50 [Integer]
!		order_03_50 [String], iOrder_03_50 [Integer]
!		order_04_50 [String], iOrder_04_50 [Integer]
!		order_05_50 [String], iOrder_05_50 [Integer]
!		order_06_50 [String], iOrder_06_50 [Integer]
!		order_07_50 [String], iOrder_07_50 [Integer]
!		order_08_50 [String], iOrder_08_50 [Integer]
!		order_09_50 [String], iOrder_09_50 [Integer]
!		order_10_50 [String], iOrder_10_50 [Integer]
!		order_11_50 [String], iOrder_11_50 [Integer]
!		order_12_50 [String], iOrder_12_50 [Integer]
!
!	Output Parameters:	none
!
!	Input Variables:	none
!	Output Variables:	temp_stGroupOrder [String], temp_iGroupOrder [Integer]
! ==============================================================================

	dim temp_stGroupOrder[12]
		temp_stGroupOrder[1] = order_01_50
		temp_stGroupOrder[2] = order_02_50
		temp_stGroupOrder[3] = order_03_50
		temp_stGroupOrder[4] = order_04_50
		temp_stGroupOrder[5] = order_05_50
		temp_stGroupOrder[6] = order_06_50
		temp_stGroupOrder[7] = order_07_50
		temp_stGroupOrder[8] = order_08_50
		temp_stGroupOrder[9] = order_09_50
		temp_stGroupOrder[10] = order_10_50
		temp_stGroupOrder[11] = order_11_50
		temp_stGroupOrder[12] = order_12_50

	dim temp_iGroupOrder[12]
		temp_iGroupOrder[1] = iOrder_01_50
		temp_iGroupOrder[2] = iOrder_02_50
		temp_iGroupOrder[3] = iOrder_03_50
		temp_iGroupOrder[4] = iOrder_04_50
		temp_iGroupOrder[5] = iOrder_05_50
		temp_iGroupOrder[6] = iOrder_06_50
		temp_iGroupOrder[7] = iOrder_07_50
		temp_iGroupOrder[8] = iOrder_08_50
		temp_iGroupOrder[9] = iOrder_09_50
		temp_iGroupOrder[10] = iOrder_10_50
		temp_iGroupOrder[11] = iOrder_11_50
		temp_iGroupOrder[12] = iOrder_12_50
return

! ==============================================================================
"charge_temporary_array_with_integer_and_string_params_100":
! ------------------------------------------------------------------------------
!	Input Parameters:
!		order_01_100 [String], iOrder_01_100 [Integer]
!		order_02_100 [String], iOrder_02_100 [Integer]
!		order_03_100 [String], iOrder_03_100 [Integer]
!		order_04_100 [String], iOrder_04_100 [Integer]
!		order_05_100 [String], iOrder_05_100 [Integer]
!		order_06_100 [String], iOrder_06_100 [Integer]
!		order_07_100 [String], iOrder_07_100 [Integer]
!		order_08_100 [String], iOrder_08_100 [Integer]
!		order_09_100 [String], iOrder_09_100 [Integer]
!		order_10_100 [String], iOrder_10_100 [Integer]
!		order_11_100 [String], iOrder_11_100 [Integer]
!		order_12_100 [String], iOrder_12_100 [Integer]
!
!	Output Parameters:	none
!
!	Input Variables:	none
!	Output Variables:	temp_stGroupOrder [String], temp_iGroupOrder [Integer]
! ==============================================================================

	dim temp_stGroupOrder[12]
		temp_stGroupOrder[1] = order_01_100
		temp_stGroupOrder[2] = order_02_100
		temp_stGroupOrder[3] = order_03_100
		temp_stGroupOrder[4] = order_04_100
		temp_stGroupOrder[5] = order_05_100
		temp_stGroupOrder[6] = order_06_100
		temp_stGroupOrder[7] = order_07_100
		temp_stGroupOrder[8] = order_08_100
		temp_stGroupOrder[9] = order_09_100
		temp_stGroupOrder[10] = order_10_100
		temp_stGroupOrder[11] = order_11_100
		temp_stGroupOrder[12] = order_12_100

	dim temp_iGroupOrder[12]
		temp_iGroupOrder[1] = iOrder_01_100
		temp_iGroupOrder[2] = iOrder_02_100
		temp_iGroupOrder[3] = iOrder_03_100
		temp_iGroupOrder[4] = iOrder_04_100
		temp_iGroupOrder[5] = iOrder_05_100
		temp_iGroupOrder[6] = iOrder_06_100
		temp_iGroupOrder[7] = iOrder_07_100
		temp_iGroupOrder[8] = iOrder_08_100
		temp_iGroupOrder[9] = iOrder_09_100
		temp_iGroupOrder[10] = iOrder_10_100
		temp_iGroupOrder[11] = iOrder_11_100
		temp_iGroupOrder[12] = iOrder_12_100
return

! ==============================================================================
"charge_temporary_array_with_integer_and_string_params_200":
! ------------------------------------------------------------------------------
!	Input Parameters:
!		order_01_200 [String], iOrder_01_200 [Integer]
!		order_02_200 [String], iOrder_02_200 [Integer]
!		order_03_200 [String], iOrder_03_200 [Integer]
!		order_04_200 [String], iOrder_04_200 [Integer]
!		order_05_200 [String], iOrder_05_200 [Integer]
!		order_06_200 [String], iOrder_06_200 [Integer]
!		order_07_200 [String], iOrder_07_200 [Integer]
!		order_08_200 [String], iOrder_08_200 [Integer]
!		order_09_200 [String], iOrder_09_200 [Integer]
!		order_10_200 [String], iOrder_10_200 [Integer]
!		order_11_200 [String], iOrder_11_200 [Integer]
!		order_12_200 [String], iOrder_12_200 [Integer]
!
!	Output Parameters:	none
!
!	Input Variables:	none
!	Output Variables:	temp_stGroupOrder [String], temp_iGroupOrder [Integer]
! ==============================================================================

	dim temp_stGroupOrder[12]
		temp_stGroupOrder[1] = order_01_200
		temp_stGroupOrder[2] = order_02_200
		temp_stGroupOrder[3] = order_03_200
		temp_stGroupOrder[4] = order_04_200
		temp_stGroupOrder[5] = order_05_200
		temp_stGroupOrder[6] = order_06_200
		temp_stGroupOrder[7] = order_07_200
		temp_stGroupOrder[8] = order_08_200
		temp_stGroupOrder[9] = order_09_200
		temp_stGroupOrder[10] = order_10_200
		temp_stGroupOrder[11] = order_11_200
		temp_stGroupOrder[12] = order_12_200

	dim temp_iGroupOrder[12]
		temp_iGroupOrder[1] = iOrder_01_200
		temp_iGroupOrder[2] = iOrder_02_200
		temp_iGroupOrder[3] = iOrder_03_200
		temp_iGroupOrder[4] = iOrder_04_200
		temp_iGroupOrder[5] = iOrder_05_200
		temp_iGroupOrder[6] = iOrder_06_200
		temp_iGroupOrder[7] = iOrder_07_200
		temp_iGroupOrder[8] = iOrder_08_200
		temp_iGroupOrder[9] = iOrder_09_200
		temp_iGroupOrder[10] = iOrder_10_200
		temp_iGroupOrder[11] = iOrder_11_200
		temp_iGroupOrder[12] = iOrder_12_200

return

! ==============================================================================
"charge_temporary_array_with_integer_and_string_params_0":
! ------------------------------------------------------------------------------
!	Input Parameters:
!		order_01_0 [String], iOrder_01_0 [Integer]
!		order_02_0 [String], iOrder_02_0 [Integer]
!		order_03_0 [String], iOrder_03_0 [Integer]
!		order_04_0 [String], iOrder_04_0 [Integer]
!		order_05_0 [String], iOrder_05_0 [Integer]
!		order_06_0 [String], iOrder_06_0 [Integer]
!		order_07_0 [String], iOrder_07_0 [Integer]
!		order_08_0 [String], iOrder_08_0 [Integer]
!		order_09_0 [String], iOrder_09_0 [Integer]
!		order_10_0 [String], iOrder_10_0 [Integer]
!		order_11_0 [String], iOrder_11_0 [Integer]
!		order_12_0 [String], iOrder_12_0 [Integer]
!
!	Output Parameters:	none
!
!	Input Variables:	none
!	Output Variables:	temp_stGroupOrder [String], temp_iGroupOrder [Integer]
! ==============================================================================

	dim temp_stGroupOrder[12]
		temp_stGroupOrder[1] = order_01_0
		temp_stGroupOrder[2] = order_02_0
		temp_stGroupOrder[3] = order_03_0
		temp_stGroupOrder[4] = order_04_0
		temp_stGroupOrder[5] = order_05_0
		temp_stGroupOrder[6] = order_06_0
		temp_stGroupOrder[7] = order_07_0
		temp_stGroupOrder[8] = order_08_0
		temp_stGroupOrder[9] = order_09_0
		temp_stGroupOrder[10] = order_10_0
		temp_stGroupOrder[11] = order_11_0
		temp_stGroupOrder[12] = order_12_0

	dim temp_iGroupOrder[12]
		temp_iGroupOrder[1] = iOrder_01_0
		temp_iGroupOrder[2] = iOrder_02_0
		temp_iGroupOrder[3] = iOrder_03_0
		temp_iGroupOrder[4] = iOrder_04_0
		temp_iGroupOrder[5] = iOrder_05_0
		temp_iGroupOrder[6] = iOrder_06_0
		temp_iGroupOrder[7] = iOrder_07_0
		temp_iGroupOrder[8] = iOrder_08_0
		temp_iGroupOrder[9] = iOrder_09_0
		temp_iGroupOrder[10] = iOrder_10_0
		temp_iGroupOrder[11] = iOrder_11_0
		temp_iGroupOrder[12] = iOrder_12_0

return

! ==============================================================================
"set_parameters_values":
! ------------------------------------------------------------------------------
!	Input Variables:
!		_scaleExt			parts of params name example "_50"
! ==============================================================================

	if iGroup > 9 then
		_numForString = ""
	else
		_numForString = "0"
	endif

	idx 		= iGroup
	iScaleFrom 	= _iScaleFrom
	gosub "getOrderValues"

	values "iOrder_" + _numForString + str(iGroup,1,0) + _scaleExt use(nsp)
	dim groupText[]
	for iGet = 1 to nsp
		groupText[iGet] = stGroupText[get(1)]
	next iGet
	values "order_" + _numForString + str(iGroup,1,0) + _scaleExt groupText

return

! ==============================================================================
"connect_Integer_and_String":
! ------------------------------------------------------------------------------
!	Input Variables:
!		_scaleExt			parts of params name example "_50"
!		temp_stGroupOrder [String], temp_iGroupOrder [Integer]
!	Output Variables:
!		temp_stGroupOrder [String], temp_iGroupOrder [Integer]
! ==============================================================================

	if iGroup > 9 then
		_numForString = ""
	else
		_numForString = "0"
	endif

	if GLOB_MODPAR_NAME = "order_" + _numForString + str(iGroup,1,0) + _scaleExt then
		temp_iGroupOrder[iGroup] = ORDER_NONE
		for iValue = 1 to vardim1(stGroupText)
			if temp_stGroupOrder[iGroup] = stGroupText[iValue] then
				temp_iGroupOrder[iGroup] = iValue
				iValue = vardim1(stGroupText)
			endif
		next iValue
	else
		temp_iGroupOrder[iGroup] = max(min(temp_iGroupOrder[iGroup],vardim1(stGroupText)),1)
		temp_stGroupOrder[iGroup] = stGroupText[temp_iGroupOrder[iGroup]]
	endif

return


! ==============================================================================
"analyse_paramlist_orderparams_to_set_ordering_if_add":		! Ordering with Params
! ------------------------------------------------------------------------------
!	Input Variables:
!		nMaxGroupDisplay	Maximum Number of displayable Group depends on iStampType only
!		_nGroupDisplay		Number of displayed Group
!		_scaleExt			parts of params name example "_50"
!	Output Variables:
!		__nGroupDisplay		Number of displayed Group
! ==============================================================================

	__nGroupDisplay = _nGroupDisplay

	for iDisplay = nMaxGroupDisplay to 1 step -1
		if _nGroupDisplay < iDisplay then
			if iDisplay > 9 then
				_numForString = ""
			else
				_numForString = "0"
			endif
			if GLOB_MODPAR_NAME = "order_" + _numForString + str(iDisplay,1,0) + _scaleExt and temp_iGroupOrder[iDisplay] <> ORDER_NONE then
				__nGroupDisplay = iDisplay
			endif
		endif
	next iDisplay

return

! ==============================================================================
"hide_locked_orderparameters":
! ------------------------------------------------------------------------------
!	Input Variables:
!		nMaxGroupDisplay	Maximum Number of displayable Group depends on iStampType
!		_scaleExt			parts of params name example "_50"
! ==============================================================================

	for i = nAllGroupDisplay to (nMaxGroupDisplay + 1) step -1
		lock "order_" + str(i,1,0) + _scaleExt
		lock "iOrder_" + str(i,1,0) + _scaleExt
		hideparameter "order_" + str(i,1,0) + _scaleExt
		hideparameter "iOrder_" + str(i,1,0) + _scaleExt
	next i

return

! ==============================================================================
"analyse_ui_orderbuttons_to_set_ordering":			! Define Order Button functions
! ------------------------------------------------------------------------------
!	Input Variables:
!		_tempButtonID			UI add/delete functions button ID
!		temp_iGroupOrder[]		orders integer in array
!		__nGroupDisplay			Number of displayed Group
!	Output Variables:
!		temp_iGroupOrder[]		orders integer in array
!		__nGroupDisplay			Number of displayed Group
! ==============================================================================

if n and isFirstRun and GLOB_UI_BUTTON_ID > 999 then
	! Add new line at last - growing number of displayed group
	if GLOB_UI_BUTTON_ID = (_tempButtonID + idButton_addnewRow) then
		__nGroupDisplay = __nGroupDisplay + 1

		! paste empty/none default to last row
		temp_iGroupOrder[__nGroupDisplay] = ORDER_NONE
	endif

	for i = 1 to __nGroupDisplay

	! Add new line ------------------------------------------------------------
		if GLOB_UI_BUTTON_ID = (_tempButtonID  + idButton_pasteRow + i) then
			dim tempTexts[]
				tempTexts = temp_iGroupOrder

			! if one line is added then the opened group must follow his owner
			dim tempbool[][]
				tempbool= bActiveGroupSwipeDown

			if __nGroupDisplay < nMaxGroupDisplay then
				__nGroupDisplay = __nGroupDisplay + 1

				! find the first unused group to paste
				idx = 1	! non-exist group, just for calculating
				iScaleFrom 	= _iScaleFrom
				gosub "getOrderValues"	! return stack
				dim integervaluesGroup[] : iGet = 1
				for istack = 1 to nsp
					integervaluesGroup[iGet] = get(1)
					iGet = iGet + 1
				next istack

				! find the first unused group to paste
				iUnused = 0
				for iGet = 1 to vardim1(integervaluesGroup)-1	! values list without NONE
					for iCalcRow = 1 to __nGroupDisplay
						if tempTexts[iCalcRow] <> integervaluesGroup[iGet] then
							iUnused = integervaluesGroup[iGet]
						else
							iUnused = 0
							iCalcRow = __nGroupDisplay ! force loop end
						endif
					next iCalcRow
					if iUnused <> 0 then
						iGet = vardim1(integervaluesGroup) ! force loop end
					endif
				next iGet
				! paste empty/none default if all values are sold out
				if iUnused = 0 then iUnused = ORDER_NONE
			endif

			for j = 1 to __nGroupDisplay
				if j < i then
					temp_iGroupOrder[j] = tempTexts[j]
					bActiveGroupSwipeDown[j][_iUIDisplayScale+1] = tempbool[j][_iUIDisplayScale+1]
				else
					if i = j then
						temp_iGroupOrder[j] = iUnused
						bActiveGroupSwipeDown[j][_iUIDisplayScale+1] = 0
					else
						temp_iGroupOrder[j] = tempTexts[j - 1]
						bActiveGroupSwipeDown[j][_iUIDisplayScale+1] = tempbool[j-1][_iUIDisplayScale+1]
					endif
				endif
			next j

			parameters bActiveGroupSwipeDown = bActiveGroupSwipeDown
		endif

	! Delete line ------------------------------------------------------------
		if GLOB_UI_BUTTON_ID = (_tempButtonID + idButton_dropRow + i) then
			dim tempTexts[]
				tempTexts = temp_iGroupOrder

			! if one line is deleted then the opened group must follow his owner
			dim tempbool[][]
				tempbool= bActiveGroupSwipeDown

			if __nGroupDisplay > 1 then __nGroupDisplay = __nGroupDisplay - 1

			for j = 1 to __nGroupDisplay + 1
				if j < i then
					temp_iGroupOrder[j] = tempTexts[j]
					bActiveGroupSwipeDown[j][_iUIDisplayScale+1] = tempbool[j][_iUIDisplayScale+1]
				else
					temp_iGroupOrder[j] = tempTexts[j + 1]
					bActiveGroupSwipeDown[j][_iUIDisplayScale+1] = tempbool[j+1][_iUIDisplayScale+1]
				endif
			next j
			temp_iGroupOrder[__nGroupDisplay + 1] = ORDER_NONE
			bActiveGroupSwipeDown[__nGroupDisplay + 1][_iUIDisplayScale+1] = 0

			parameters bActiveGroupSwipeDown = bActiveGroupSwipeDown
		endif

	! Open Group ------------------------------------------------------------
		if GLOB_UI_BUTTON_ID = (_tempButtonID + idButton_openGroup + i) then
			dim bActiveGroupSwipeDown[][4]
			for iBool = 1 to __nGroupDisplay
				bActiveGroupSwipeDown[iBool][_iUIDisplayScale+1] = 0
			next iBool
			bActiveGroupSwipeDown[i][_iUIDisplayScale+1] = 1
			parameters bActiveGroupSwipeDown = bActiveGroupSwipeDown
		endif

	! Close Group ------------------------------------------------------------
		if GLOB_UI_BUTTON_ID = (_tempButtonID + idButton_closeGroup + i) then
			dim bActiveGroupSwipeDown[][4]
			for iBool = 1 to __nGroupDisplay
				bActiveGroupSwipeDown[iBool][_iUIDisplayScale+1] = 0
			next iBool
			parameters bActiveGroupSwipeDown = bActiveGroupSwipeDown
		endif


	next i
endif
return

! ==============================================================================
"set_ordering_default_controlled_by_displaying_box":			! Define Order Button functions
! ------------------------------------------------------------------------------
!	Input Variables:
!		_tempButtonID			UI add/delete functions button ID
!		temp_iGroupOrder[]		orders integer in array
!		__nGroupDisplay			Number of displayed Group
!	Output Variables:
!		temp_iGroupOrder[]		orders integer in array
!		__nGroupDisplay			Number of displayed Group
! ==============================================================================

	if _bDisplayInsideBox[_iScaleFrom+1] then
		for iGroup = 1 to nMaxGroupDisplay
			if temp_iGroupOrder[iGroup] = ORDER_ZONE_NUMBER then
				! then behave like by deleting row on UI
				GLOB_UI_BUTTON_ID = (_tempButtonID + idButton_dropRow + iGroup)
				gosub "analyse_ui_orderbuttons_to_set_ordering"
			endif
			if temp_iGroupOrder[iGroup] = ORDER_HEIGHT then
				temp_iGroupOrder[iGroup] = ORDER_HEIGHT_NUMBER
				temp_stGroupOrder[iGroup] = stGroupText[ORDER_HEIGHT_NUMBER]
			endif
		next iGroup
	else
		for iGroup = 1 to nMaxGroupDisplay
			if temp_iGroupOrder[iGroup] = ORDER_HEIGHT_NUMBER then
				temp_iGroupOrder[iGroup] = ORDER_HEIGHT
				temp_stGroupOrder[iGroup] = stGroupText[ORDER_HEIGHT]

				if _numDisplayedGroup[_iScaleFrom+1] < nMaxGroupDisplay then
					! then behave like by pasitng row on UI
					GLOB_UI_BUTTON_ID = (_tempButtonID + idButton_pasteRow + iGroup)
					gosub "analyse_ui_orderbuttons_to_set_ordering"
					temp_iGroupOrder[iGroup] = ORDER_ZONE_NUMBER
					temp_stGroupOrder[iGroup] = stGroupText[ORDER_ZONE_NUMBER]
				endif
				
				iGroup = nMaxGroupDisplay ! force loop end
			endif
		next iGroup
	endif
return

