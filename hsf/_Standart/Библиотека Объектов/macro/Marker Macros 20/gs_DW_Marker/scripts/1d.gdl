
EPS = 0.00001

dim stShapes[9]
	stShapes[1] = `Окружность`
	stShapes[2] = `Ромб`
	stShapes[3] = `Прямоугольник`
	stShapes[4] = `Овал`
	stShapes[5] = `Треугольник`
	stShapes[6] = `Пятиугольник`
	stShapes[7] = `Шестиугольник`
	stShapes[8] = `Восьмиугольник`
	stShapes[9] = `Нет`

SHAPE_CIRCLE	= 1
SHAPE_RECT		= 2
SHAPE_FRAGMENT	= 3
SHAPE_OVAL		= 4
SHAPE_TRIANGLE	= 5
SHAPE_PENTAGON	= 6
SHAPE_HEXAGON	= 7
SHAPE_OCTAGON	= 8
SHAPE_NONE		= 0

dim stCustomText[4]
	stCustomText[1] = `Компактный ID Элемента`
	stCustomText[2] = `Измеряемое Значение`
	stCustomText[3] = `Специальный Текст`
	stCustomText[4] = `Полный ID Элемента`

CTXT_IDNUMBER		= 1
CTXT_MEASUREDVALUE	= 2
CTXT_CUSTOMTEXT		= 3
CTXT_FULLIDNUM		= 4

dim stMarkerDirValues[4]
	stMarkerDirValues[1] = `Стандарт`
	stMarkerDirValues[2] = `Выровнять по Линии Маркера`
	stMarkerDirValues[3] = `Горизонтально`
	stMarkerDirValues[4] = `Вертикально`

DIMUNIT_MM		= 11  
DIMUNIT_CM		= 12
DIMUNIT_METER	= 13
DIMUNIT_INCH	= 14
DIMUNIT_DM		= 15
DIMUNIT_PROJECT	= 10

dim stUnitFormats[6]
	stUnitFormats[1] = `мм`
	stUnitFormats[2] = `см`
	stUnitFormats[3] = `дм`
	stUnitFormats[4] = `м`
	stUnitFormats[5] = `дюймы`
	stUnitFormats[6] = `по Параметрам Проекта`

dim stShowSillToValues[3]
	if gs_dw_marker_type = 3 then
		stShowSillToValues[1] = `Основание Крыши/Свода`
	else
		stShowSillToValues[1] = `Основание Стены`
	endif
	stShowSillToValues[2] = `Этаж Вставки`
	stShowSillToValues[3] = `Привязка`


if GLOB_SCRIPT_TYPE = 7 | GLOB_SCRIPT_TYPE = 8 then

	goto "end of master script"
endif

main = ""
frac = ""

! ==============================================================================
! Uniform Text Format
! ==============================================================================

if GS_UniTextFormat then
	AC_TextFont_2	= AC_TextFont_1
	AC_TextSize_2	= AC_TextSize_1
	AC_TextPen_2	= AC_TextPen_1
	AC_TextStyle_2	= AC_TextStyle_1
	AC_TextFont_3	= AC_TextFont_1
	AC_TextSize_3	= AC_TextSize_1
	AC_TextPen_3	= AC_TextPen_1
	AC_TextStyle_3	= AC_TextStyle_1
	AC_TextFont_4	= AC_TextFont_1
	AC_TextSize_4	= AC_TextSize_1
	AC_TextPen_4	= AC_TextPen_1
	AC_TextStyle_4	= AC_TextStyle_1
	AC_TextFont_5	= AC_TextFont_1
	AC_TextSize_5	= AC_TextSize_1
	AC_TextPen_5	= AC_TextPen_1
	AC_TextStyle_5	= AC_TextStyle_1
	AC_TextFont_6	= AC_TextFont_1
	AC_TextSize_6	= AC_TextSize_1
	AC_TextPen_6	= AC_TextPen_1
	AC_TextStyle_6	= AC_TextStyle_1
	AC_TextFont_7	= AC_TextFont_1
	AC_TextSize_7	= AC_TextSize_1
	AC_TextPen_7	= AC_TextPen_1
	AC_TextStyle_7	= AC_TextStyle_1
else
	AC_TextStyle_1 = GS_Text_Style_1B + 2 * GS_Text_Style_1I + 4 * GS_Text_Style_1U
	AC_TextStyle_2 = GS_Text_Style_2B + 2 * GS_Text_Style_2I + 4 * GS_Text_Style_2U
	AC_TextStyle_3 = GS_Text_Style_3B + 2 * GS_Text_Style_3I + 4 * GS_Text_Style_3U
	AC_TextStyle_4 = GS_Text_Style_4B + 2 * GS_Text_Style_4I + 4 * GS_Text_Style_4U
	AC_TextStyle_5 = GS_Text_Style_5B + 2 * GS_Text_Style_5I + 4 * GS_Text_Style_5U
	AC_TextStyle_6 = GS_Text_Style_6B + 2 * GS_Text_Style_6I + 4 * GS_Text_Style_6U
	AC_TextStyle_7 = GS_Text_Style_7B + 2 * GS_Text_Style_7I + 4 * GS_Text_Style_7U
endif

! ==============================================================================

dim stDimensionTypes[8]
	stDimensionTypes[1] = `Размеры Проема`
	stDimensionTypes[2] = `Размеры Блока`
	stDimensionTypes[3] = `Размеры Полотна`
	stDimensionTypes[4] = `Размеры Прохода`
	stDimensionTypes[5] = `Размеры Четверти`
	stDimensionTypes[6] = `Размеры Проема - ширина х высота`
	stDimensionTypes[7] = `Размеры Прохода - ширина x высота`
	stDimensionTypes[8] = `Размеры Полотна - ширина x высота`

if GLOB_MODPAR_NAME = "gs_dimension_select" then
	for iType = 1 to vardim1(stDimensionTypes)
		if gs_dimension_select = stDimensionTypes[iType] then
			gs_dimension_select_int = iType
		endif
	next iType
	parameters gs_dimension_select_int = gs_dimension_select_int
else
	gs_dimension_select = stDimensionTypes[min(gs_dimension_select_int,vardim1(stDimensionTypes))]
	parameters gs_dimension_select = gs_dimension_select
endif


if gs_dimension_select_int = 6 or gs_dimension_select_int = 7 or gs_dimension_select_int = 8 then
	bIsDutchDimType = 1
else
	bIsDutchDimType = 0
endif

if not(gsIsNedMarker) or not(bIsDutchDimType) then
	RotWidthText = 0
endif


_bLockLinearUnitDecimal		= (not(AC_WidHei_On)	| iWorkUnitLinear	= DIMUNIT_INCH	| iWorkUnitLinear	= DIMUNIT_PROJECT)
_bLockSillHgtUnitDecimal	= (not(AC_Sill_On)		| iWorkUnitSillHgt	= DIMUNIT_INCH	| iWorkUnitSillHgt	= DIMUNIT_PROJECT)


! ==============================================================================
! Marker text measured values
! ==============================================================================

! --- Sill Height --------------------------------------------------------------

sillExtraPrecision = ""

if (GLOB_SCRIPT_TYPE = 5 or (GLOB_SCRIPT_TYPE = 2 and AC_Sill_On)) \
		and GS_iCustomText_4 = CTXT_MEASUREDVALUE then

	if (iShowSillTo <> 1 & iShowSillTo <> 2 & iShowSillTo <> 3) then
		if AC_SillNominal then
			lengthValue = AC_GLOB_ELEVATION
		else
			lengthValue = AC_SILL_TO_CURR_STORY - AC_WIDO_OVERSIZE_B - AC_WIDO_SUBFL_THICKNESS
		endif
	endif

	if iShowSillTo = 1 then
		if AC_SillNominal then
			lengthValue = AC_GLOB_ELEVATION
		else
			lengthValue = AC_GLOB_ELEVATION - AC_WIDO_OVERSIZE_B - AC_WIDO_SUBFL_THICKNESS
		endif
	endif

	if iShowSillTo = 2 then
		if AC_SillNominal then
			lengthValue = AC_SILL_TO_CURR_STORY
		else
			lengthValue = AC_SILL_TO_CURR_STORY - AC_WIDO_OVERSIZE_B - AC_WIDO_SUBFL_THICKNESS
		endif
	endif

	if iShowSillTo = 3 then
		if AC_SillNominal then
			lengthValue = AC_SILL_TO_ANCHOR_LEVEL
		else
			lengthValue = AC_SILL_TO_ANCHOR_LEVEL - AC_WIDO_OVERSIZE_B - AC_WIDO_SUBFL_THICKNESS
		endif
	endif

	szFormat	= ""
	rrr = request ("Sill_Height_Dimension", "", szFormat)

	gosub "format_length_2_main_n_frac"

	_lengthSillValue = lengthValue
	AC_MarkerText_4 = AC_SillPrefix + " " + main
	sillExtraPrecision = frac

endif

widhei_form = ""

! --- Window Width -------------------------------------------------------------

extra	= ""

if (GLOB_SCRIPT_TYPE = 5 or (GLOB_SCRIPT_TYPE = 2 and AC_WidHei_On)) \
		and GS_iCustomText_2 = CTXT_MEASUREDVALUE then

	if gs_dimension_select_int = 1 then		! Wall Opening Sizes
		wwidth = 0
		if gsIsNedMarker then
			rrr = request ("ASSOCLP_PARVALUE", "A",
				index_rw, type_rw, flags_rw, dim1_rw, dim2_rw, wwidth)
		else
			rrr = request ("ASSOCLP_PARVALUE", "ac_wallhole_width",
				index_ww, type_ww, flags_ww, dim1_ww, dim2_ww, wwidth)
		endif
		widthSize = wwidth
	else
		if gs_dimension_select_int = 3 then		! Leaf Sizes
			leafwidth = 0
			if gs_dw_marker_type = 2 then	! door
				if gsIsNedMarker then
					rrr = request ("ASSOCLP_PARVALUE", "Brdeur",
						index_rw, type_rw, flags_rw, dim1_rw, dim2_rw, leafwidth)
				else
					rrr = request ("ASSOCLP_PARVALUE", "ac_leaf_width",
						index_lw, type_lw, flags_lw, dim1_lw, dim2_lw, leafwidth)
				endif
			endif
			widthSize = leafwidth
		else
			if gs_dimension_select_int = 2 then		! Unit Sizes
				unitwidth = 0
				if gsIsNedMarker then
					rrr = request ("ASSOCLP_PARVALUE", "BrDag",
						index_rw, type_rw, flags_rw, dim1_rw, dim2_rw, unitwidth)
				else
					rrr = request ("ASSOCLP_PARVALUE", "ac_unit_width",
						index_uw, type_uw, flags_uw, dim1_uw, dim2_uw, unitwidth)
				endif
				widthSize = unitwidth
			else
				if gs_dimension_select_int = 4 then		! Egress Sizes
					egresswidth = 0
					if gs_dw_marker_type = 2 then	! door
						if gsIsNedMarker then
							rrr = request ("ASSOCLP_PARVALUE", "brdag",
								index_rw, type_rw, flags_rw, dim1_rw, dim2_rw, egresswidth)
						else
							rrr = request ("ASSOCLP_PARVALUE", "ac_egress_width",
								index_ew, type_ew, flags_ew, dim1_ew, dim2_ew, egresswidth)
						endif
					endif
					widthSize = egresswidth
				else
					revealwidth = 0
					if gs_dw_marker_type = 1 | gs_dw_marker_type = 3 then	! window, skylight
						rrr = request ("ASSOCLP_PARVALUE", "ac_reveal_width",
							index_rw, type_rw, flags_rw, dim1_rw, dim2_rw, revealwidth)
					endif
					widthSize = revealwidth
				endif
			endif
		endif
	endif
	if widthSize < EPS then
		widthSize = AC_WIDO_A_SIZE
	endif

	rrr = request("Window_Door_Dimension", "", widhei_form)
	szFormat = widhei_form
	lengthValue = widthSize

	gosub "format_length_2_main_n_frac"

	_lengthWidthValue = lengthValue
	AC_MarkerText_2 = main
	extra = frac

endif

! --- Window Height ------------------------------------------------------------

extraH	= ""

if (GLOB_SCRIPT_TYPE = 5 or (GLOB_SCRIPT_TYPE = 2 and AC_WidHei_On)) \
		and GS_iCustomText_3 = CTXT_MEASUREDVALUE then

	if gs_dimension_select_int = 1 then		! Wall Opening Sizes
		wheight = 0
		if gsIsNedMarker then
			rrr = request ("ASSOCLP_PARVALUE", "B",
				index_rw, type_rw, flags_rw, dim1_rw, dim2_rw, wheight)
		else
			rrr = request ("ASSOCLP_PARVALUE", "ac_wallhole_height",
				index_wh, type_wh, flags_wh, dim1_wh, dim2_wh, wheight)
		endif
		heightSize = wheight
	else
		if gs_dimension_select_int = 3 then		! Leaf Sizes
			leafheight = 0
			if gs_dw_marker_type = 2 then	! door
				if gsIsNedMarker then
					rrr = request ("ASSOCLP_PARVALUE", "Hodeur",
						index_rw, type_rw, flags_rw, dim1_rw, dim2_rw, leafheight)
				else
					rrr = request ("ASSOCLP_PARVALUE", "ac_leaf_height",
						index_lh, type_lh, flags_lh, dim1_lh, dim2_lh, leafheight)
				endif
			endif
			heightSize = leafheight
		else
			if gs_dimension_select_int = 2 then		! Unit Sizes
				unitheight = 0
				if gsIsNedMarker then
					rrr = request ("ASSOCLP_PARVALUE", "HoDag",
						index_rw, type_rw, flags_rw, dim1_rw, dim2_rw, unitheight)
				else
					rrr = request ("ASSOCLP_PARVALUE", "ac_unit_height",
						index_uh, type_uh, flags_uh, dim1_uh, dim2_uh, unitheight)
				endif
				heightSize = unitheight
			else
				if gs_dimension_select_int = 4 then		! Egress Sizes
					egressheight = 0
					if gs_dw_marker_type = 2 then	! door
						if gsIsNedMarker then
							rrr = request ("ASSOCLP_PARVALUE", "hodag",
								index_rw, type_rw, flags_rw, dim1_rw, dim2_rw, egressheight)
						else
							rrr = request ("ASSOCLP_PARVALUE", "ac_egress_height",
								index_eh, type_eh, flags_eh, dim1_eh, dim2_eh, egressheight)
						endif
					endif
					heightSize = egressheight
				else
					revealheight = 0
					if gs_dw_marker_type = 1 | gs_dw_marker_type = 3 then	! window, skylight
						rrr = request ("ASSOCLP_PARVALUE", "ac_reveal_height",
							index_rh, type_rh, flags_rh, dim1_rh, dim2_rh, revealheight)
					endif
					heightSize = revealheight
				endif
			endif
		endif
	endif
	if heightSize < EPS then
		heightSize = AC_WIDO_B_SIZE
	endif

	if widhei_form = "" then
		rrr = request("Window_Door_Dimension", "", widhei_form)
	endif
	szFormat = widhei_form
	lengthValue = heightSize

	gosub "format_length_2_main_n_frac"

	_lengthHeightValue = lengthValue
	AC_MarkerText_3 = main
	extraH = frac

endif

! --- Fire Rating --------------------------------------------------------------

if (LibraryLangCode = "AUT" or LibraryLangCode = "CHE" or LibraryLangCode = "GER") and\
	gs_dw_marker_type <> 3 then
	
	if AC_show_firerating & GS_iCustomText_5 = CTXT_MEASUREDVALUE then

		_contExpressionFR = ""

		rrr = request ("ASSOCLP_PARVALUE", "gs_list_FR_expression",
				dummy, dummy, dummy, dummy, dummy, _contExpressionFR)

		if gs_dw_marker_type = 2 then													! D Marker

			_contbInsulation = 0
			_contindexInsul = ""
		
			rrr = request ("ASSOCLP_PARVALUE", "gs_list_bInsulation",
					dummy, dummy, dummy, dummy, dummy, _contbInsulation)
	
			rrr = request ("ASSOCLP_PARVALUE", "gs_list_FR_indexSelfClosing",
					dummy, dummy, dummy, dummy, dummy, _contindexInsul)
		else																			! W Marker
			_contbSelfC = 0
			_contindexSelfC = ""
	
			rrr = request ("ASSOCLP_PARVALUE", "gs_list_FR_bSelfClosing",
					dummy, dummy, dummy, dummy, dummy, _contbSelfC)
	
			rrr = request ("ASSOCLP_PARVALUE", "gs_list_FR_indexSelfClosing",
					dummy, dummy, dummy, dummy, dummy, _contindexSelfC)
		endif
	endif
else
	if GS_iCustomText_5 = CTXT_MEASUREDVALUE or not(AC_show_firerating) then
		firerating = ""
		rrr = request ("ASSOCLP_PARVALUE", "gs_list_firerating",
			index_firerating, type_firerating, flags_firerating,
			dim1_firerating, dim2_firerating, firerating)
		AC_MarkerText_5 = AC_FirePrefix + firerating	! Fire Rating Value
		parameters AC_MarkerText_5 = AC_MarkerText_5
	endif
endif

! --- Acoustic Rating ----------------------------------------------------------

if GS_iCustomText_6 = CTXT_MEASUREDVALUE or not(AC_show_acousticrating) then
	acousticrating = ""
	rrr = request ("ASSOCLP_PARVALUE", "gs_list_acousticrating",
		index_acousticrating, type_acousticrating, flags_acousticrating,
		dim1_acousticrating, dim2_acousticrating, acousticrating)
	AC_MarkerText_6 = AC_AcousticPrefix + acousticrating	! Acoustic Rating Value
	parameters AC_MarkerText_6 = AC_MarkerText_6
endif

! --- U-value ----------------------------------------------------------

if GS_iCustomText_7 = CTXT_MEASUREDVALUE or not(AC_show_Uvalue) then
	uvalue = ""
	rrr = request ("ASSOCLP_PARVALUE", "gs_list_heattransfer",
		index_uvalue, type_uvalue, flags_uvalue,
		dim1_uvalue, dim2_uvalue, uvalue)
	AC_MarkerText_7 = AC_UvaluePrefix + uvalue	! U-Value
	parameters AC_MarkerText_7 = AC_MarkerText_7
endif

! ==============================================================================
! Marker Text
! ==============================================================================

if GLOB_SCRIPT_TYPE <> 5 and (GS_iCustomText_1 <> CTXT_CUSTOMTEXT) then
	dim _MasterID[]
	result = REQUEST("Full_ID_of_parent", "", _MasterID)
	AC_MarkerText_1 = ""
	if result then
		if GS_iCustomText_1 = CTXT_IDNUMBER then
			AC_MarkerText_1 = _MasterID[vardim1(_MasterID)]
		else
			for i = 1 to vardim1 (_MasterID)
				AC_MarkerText_1 = AC_MarkerText_1 + _MasterID[i]
			next i
		endif
	endif
endif

! ==============================================================================
! end of master script
! ==============================================================================
goto "end of master script"

! ==============================================================================
! Format length value into main and frac strings
! Input:
!	szFormat:    formatted string
!	lengthValue: length value
! Output:
!	main: the main part of the length which should be written in normal type
!	frac: the fractal part which should be written smaller
! ==============================================================================

"format_length_2_main_n_frac":
	szFormattedLength = str{2}(szFormat, lengthValue, szExtraPrecision)

	if strstr(szFormat, "*10") <= 0 then
		main = szFormattedLength
		frac = szExtraPrecision
	else

		slash = strstr(szFormattedLength, "/")

		main = ""
		frac = ""

		if not(slash) then	! No Fractions
			main = szFormattedLength
		else				! Fractions
			if slash > 2 then
				slen  = strlen(szFormattedLength)
				main = strsub(szFormattedLength, 1, slash - 3)
				frac = strsub(szFormattedLength, slash - 2, slen)

				if strstr(frac," ") | strstr(frac,"-") then
					temp = frac
					frac = ""
					frac = strsub(temp, 2, strlen(temp))
				endif

				fine = strsub(main, strlen(main), strlen(main))

				if fine = " " | fine = "-" then
					temp = main
					main = ""
					main = strsub(temp, 1, strlen(temp) - 1)
				endif
			else
				frac = szFormattedLength
			endif
		endif

	endif

return

"end of master script":

