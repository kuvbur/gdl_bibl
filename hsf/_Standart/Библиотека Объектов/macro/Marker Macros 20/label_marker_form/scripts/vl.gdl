
lock "A"
lock "B"

if bUseBuiltinPointer then
	! With AC Arrow
	lock "iLabelOrientation"
	hideparameter "iLabelOrientation"

	if bEnableLeaderLine then
		lock 	"bFlipLabel",
				"bShowLeaderLine",
				"distanceLabelHead_mm",
				"distanceLabelHead_pt",
				"lengthExtensionLine_mm",
				"lengthExtensionLine_pt"
		hideparameter 	"bFlipLabel",
				"bShowLeaderLine",
				"distanceLabelHead_mm",
				"distanceLabelHead_pt",
				"lengthExtensionLine_mm",
				"lengthExtensionLine_pt"
	else
		if not(bEnableHeadWithPointer) then
			lock "iReferencePoint"
			hideparameter "iReferencePoint"
		endif
	endif
endif

w_units_form = ""
rrr = request("Working_length_unit", "", w_units_form)
_bMetricDimension = strstr(w_units_form, "m")		! m, cm, mm

! -> zero means automatic calculations
values "widthTextBoxContent_mm" range [2 * LABEL_TEXT_SIZE,)
values "widthTextBoxContent_pt" range [2 * LABEL_TEXT_SIZE * DOT_IN_MM,)
if bEnablePrefixColumn then
	values "widthTextBoxPrefix_mm" range [2 * LABEL_TEXT_SIZE,)
	values "widthTextBoxPrefix_pt" range [2 * LABEL_TEXT_SIZE * DOT_IN_MM,) 
	if _bMetricDimension then
		lock "widthTextBoxPrefix_pt"
		hideparameter "widthTextBoxPrefix_pt"
	else
		lock "widthTextBoxPrefix_mm"
		hideparameter "widthTextBoxPrefix_mm"
	endif
endif

if _bMetricDimension then
	lock "widthTextBoxContent_pt"
	hideparameter "widthTextBoxContent_pt"
else
	lock "widthTextBoxContent_mm"
	hideparameter "widthTextBoxContent_mm"
endif

if _bHideTextBoxContent then
	lock "widthTextBoxContent_mm", "widthTextBoxContent_pt"
	if bEnablePrefixColumn then
		lock "widthTextBoxPrefix_mm", "widthTextBoxPrefix_pt"
	endif
else
	if GLOB_MODPAR_NAME = "widthTextBoxContent_pt" then
		widthTextBoxContent_mm = widthTextBoxContent_pt / DOT_IN_MM
		parameters widthTextBoxContent_mm = widthTextBoxContent_mm
	else
		widthTextBoxContent_pt = widthTextBoxContent_mm * DOT_IN_MM
		parameters widthTextBoxContent_pt = widthTextBoxContent_pt
	endif

	if bEnablePrefixColumn then
		if bUsePrefixColumn then
			if GLOB_MODPAR_NAME = "widthTextBoxPrefix_pt" then
				widthTextBoxPrefix_mm = widthTextBoxPrefix_pt / DOT_IN_MM
				parameters widthTextBoxPrefix_mm = widthTextBoxPrefix_mm
			else
				widthTextBoxPrefix_pt = widthTextBoxPrefix_mm * DOT_IN_MM
				parameters widthTextBoxPrefix_pt = widthTextBoxPrefix_pt
			endif
		else
			lock "widthTextBoxPrefix_mm", "widthTextBoxPrefix_pt"
		endif
	endif
endif

values{2} "iShapeHead"	MARKER_HEAD_CIRCLE 			,_stShapeHead[2],
						MARKER_HEAD_RECTANGLE 		,_stShapeHead[8],
						MARKER_HEAD_SQUARE_ROTATED 	,_stShapeHead[17],
						MARKER_HEAD_ROUNDED_RECT 	,_stShapeHead[18],
						MARKER_HEAD_POINTED_RECT_90	,_stShapeHead[12],
						MARKER_HEAD_POINTED_RECT_120,_stShapeHead[19],
						MARKER_HEAD_DIAMOND			,_stShapeHead[9],
						MARKER_HEAD_OVAL 			,_stShapeHead[3],
						MARKER_HEAD_TRIANGLE_UP 	,_stShapeHead[4],
						MARKER_HEAD_TRIANGLE_DOWN 	,_stShapeHead[5],
						MARKER_HEAD_TRIANGLE_LEFT 	,_stShapeHead[6],
						MARKER_HEAD_TRIANGLE_RIGHT 	,_stShapeHead[7],
						MARKER_HEAD_PENTAGON_UP 	,_stShapeHead[10],
						MARKER_HEAD_PENTAGON_DOWN 	,_stShapeHead[11],
						MARKER_HEAD_HEXAGON 		,_stShapeHead[13],
						MARKER_HEAD_HEXAGON_ROTATED ,_stShapeHead[14],
						MARKER_HEAD_OCTOGON 		,_stShapeHead[15],
						MARKER_HEAD_OCTOGON_ROTATED ,_stShapeHead[16]

! --------------------------------------------------------------------------------------------------
! Head Sizes
! --------------------------------------------------------------------------------------------------
values "widthHead_mm" range (2 * LABEL_TEXT_SIZE,)
values "widthHead_pt" range (2 * LABEL_TEXT_SIZE * DOT_IN_MM,)
if iShapeHead = MARKER_HEAD_OVAL then
	values "heightHead_mm" range (2 * LABEL_TEXT_SIZE, widthHead_mm]
	values "heightHead_pt" range (2 * LABEL_TEXT_SIZE * DOT_IN_MM, widthHead_pt]
else
	values "heightHead_mm" range (2 * LABEL_TEXT_SIZE,)
	values "heightHead_pt" range (2 * LABEL_TEXT_SIZE * DOT_IN_MM,)
endif

! Regular Poligons ---------------------------------------------------------------------------------
if	not(bFitFrameToText) &\
	(iShapeHead = MARKER_HEAD_CIRCLE |\
	iShapeHead = MARKER_HEAD_SQUARE_ROTATED |\
	iShapeHead = MARKER_HEAD_PENTAGON_UP |\
	iShapeHead = MARKER_HEAD_PENTAGON_DOWN |\
	iShapeHead = MARKER_HEAD_HEXAGON |\
	iShapeHead = MARKER_HEAD_HEXAGON_ROTATED |\
	iShapeHead = MARKER_HEAD_OCTOGON |\
	iShapeHead = MARKER_HEAD_OCTOGON_ROTATED) then

	bLinkSizes = 1
	parameters bLinkSizes = bLinkSizes

	lock "bLinkSizes"
	hideparameter "bLinkSizes"

	ratioHeadSizes = 1

	if	iShapeHead = MARKER_HEAD_PENTAGON_UP |\
		iShapeHead = MARKER_HEAD_PENTAGON_DOWN then
		_radPent = widthHead_mm/2 / cos(18)
		! heightHead_mm = _radPent + _radPent * sin(54)
		ratioHeadSizes = widthHead_mm / (_radPent + _radPent * sin(54))
	endif

	if	iShapeHead = MARKER_HEAD_HEXAGON then
		! heightHead_mm = widthHead_mm * cos(30)
		ratioHeadSizes = widthHead_mm / (widthHead_mm * cos(30))
	endif

	if	iShapeHead = MARKER_HEAD_HEXAGON_ROTATED  then
		! heightHead_mm = widthHead_mm / cos(30)
		ratioHeadSizes = widthHead_mm / (widthHead_mm / cos(30))
	endif

	parameters ratioHeadSizes = ratioHeadSizes
endif

! Link Sizes ---------------------------------------------------------------------------------
if bLinkSizes then
	if GLOB_MODPAR_NAME = "widthHead_mm" then
		heightHead_mm = widthHead_mm/ratioHeadSizes
		parameters heightHead_mm = heightHead_mm

		heightHead_pt = widthHead_mm/ratioHeadSizes * DOT_IN_MM
		parameters heightHead_pt = heightHead_pt
	endif
	if GLOB_MODPAR_NAME = "heightHead_mm" then
		widthHead_mm = heightHead_mm * ratioHeadSizes
		parameters widthHead_mm = widthHead_mm

		widthHead_pt = heightHead_mm * ratioHeadSizes * DOT_IN_MM
		parameters widthHead_pt = widthHead_pt
	endif
	if GLOB_MODPAR_NAME = "widthHead_pt" then
		heightHead_pt = widthHead_pt/ratioHeadSizes
		parameters heightHead_pt = heightHead_pt

		heightHead_mm = widthHead_pt/ratioHeadSizes / DOT_IN_MM
		parameters heightHead_mm = heightHead_mm
	endif
	if GLOB_MODPAR_NAME = "heightHead_pt" then
		widthHead_pt = heightHead_pt * ratioHeadSizes
		parameters widthHead_pt = widthHead_pt

		widthHead_mm = heightHead_pt * ratioHeadSizes / DOT_IN_MM
		parameters widthHead_mm = widthHead_mm
	endif
endif


if GLOB_MODPAR_NAME = "widthHead_pt" then
	widthHead_mm = widthHead_pt / DOT_IN_MM
	parameters widthHead_mm = widthHead_mm
else
	widthHead_pt = widthHead_mm * DOT_IN_MM
	parameters widthHead_pt = widthHead_pt
endif

if GLOB_MODPAR_NAME = "heightHead_pt" then
	heightHead_mm = heightHead_pt / DOT_IN_MM
	parameters heightHead_mm = heightHead_mm
else
	heightHead_pt = heightHead_mm * DOT_IN_MM
	parameters heightHead_pt = heightHead_pt
endif

ratioHeadSizes = widthHead_mm/heightHead_mm
parameters ratioHeadSizes = ratioHeadSizes

if _bMetricDimension then
	lock "widthHead_pt", "heightHead_pt"
	hideparameter "widthHead_pt", "heightHead_pt"
else
	lock "widthHead_mm", "heightHead_mm"
	hideparameter "widthHead_mm", "heightHead_mm"
endif

if _bHideHeadFrameSettings then
	lock	"iShapeHead",
			"bFitFrameToText",
			"widthHead_mm",
			"heightHead_mm",
			"widthHead_pt",
			"heightHead_pt",
			"bLinkSizes"

	hideparameter	"iShapeHead",
					"bFitFrameToText",
					"widthHead_mm",
					"heightHead_mm",
					"widthHead_pt",
					"heightHead_pt",
					"bLinkSizes"
else

	if bFitFrameToText then
		lock	"widthHead_mm",
				"heightHead_mm",
				"bLinkSizes"
	
		hideparameter	"widthHead_mm",
						"heightHead_mm",
						"bLinkSizes"
	endif
endif

! --------------------------------------------------------------------------------------------------
! Head distance and Leader Line
! --------------------------------------------------------------------------------------------------


if not(bShowHead) then
	lock	"distanceLabelHead_mm",
			"distanceLabelHead_pt"

	hideparameter	"distanceLabelHead_mm",
					"distanceLabelHead_pt"
endif

if bUseTextBoxOnLine & not(LABEL_FRAME_ON) then
	lock "bHideTextBoxContour"
	hideparameter "bHideTextBoxContour"
endif




if bEnableDivisionLine then
	if not(bDivisionLine) then
		lock "bUseCustomDivisionLinePen", "penDivisionLine"
		hideparameter "bUseCustomDivisionLinePen", "penDivisionLine"
	else
		if not(bUseCustomDivisionLinePen) then
			lock "penDivisionLine"
			hideparameter "penDivisionLine"
		endif
	endif

	if not(bShowHead) then
		lock "bDivisionLine", "bUseCustomDivisionLinePen", "penDivisionLine"
		hideparameter "bDivisionLine", "bUseCustomDivisionLinePen", "penDivisionLine"
	endif
endif

values{2} "iLabelOrientation" 	ORIENTATION_PARALLEL, 		_stLabelOrientation[ORIENTATION_PARALLEL],
								ORIENTATION_VERTICAL, 		_stLabelOrientation[ORIENTATION_VERTICAL],
								ORIENTATION_HORIZONTAL, 	_stLabelOrientation[ORIENTATION_HORIZONTAL],
								ORIENTATION_CUSTOM, 		_stLabelOrientation[ORIENTATION_CUSTOM]


if bEnableLeaderLine then
	values "distanceLabelHead_mm" range (listTextTopDistance_mm * bUseTextBoxOnLine,)
	values "distanceLabelHead_pt" range (listTextTopDistance_pt * bUseTextBoxOnLine,)

	if GLOB_MODPAR_NAME = "distanceLabelHead_pt" then
		distanceLabelHead_mm = distanceLabelHead_pt / DOT_IN_MM
		parameters distanceLabelHead_mm = distanceLabelHead_mm
	else
		distanceLabelHead_pt = distanceLabelHead_mm * DOT_IN_MM
		parameters distanceLabelHead_pt = distanceLabelHead_pt
	endif

	if _bMetricDimension then
		lock "distanceLabelHead_pt"
		hideparameter "distanceLabelHead_pt"
	else
		lock "distanceLabelHead_mm"
		hideparameter "distanceLabelHead_mm"
	endif

	if bEnableExtensionPolygon then
		values{2} "iLeaderLineStyle" 	LINE_SINGLE, 	_stLeaderLine[1],
										LINE_DOUBLE, 	_stLeaderLine[2]

		values{2} "iExtensionLineStyle" 	EXTLINE_SAMEASMARKER, 	stExtensionLine[1],
											EXTLINE_RECT, 			stExtensionLine[2]
	endif

	values "lengthExtensionLine_mm" range [0,distanceLabelHead_mm)
	values "lengthExtensionLine_pt" range [0,distanceLabelHead_pt)

	if GLOB_MODPAR_NAME = "lengthExtensionLine_pt" then
		lengthExtensionLine_mm = lengthExtensionLine_pt / DOT_IN_MM
		parameters lengthExtensionLine_mm = lengthExtensionLine_mm
	else
		lengthExtensionLine_pt = lengthExtensionLine_mm * DOT_IN_MM
		parameters lengthExtensionLine_pt = lengthExtensionLine_pt
	endif

	if _bMetricDimension then
		lock "lengthExtensionLine_pt"
		hideparameter "lengthExtensionLine_pt"
	else
		lock "lengthExtensionLine_mm"
		hideparameter "lengthExtensionLine_mm"
	endif

	if bEnableExtensionPolygon then
		values "thkLeaderLine_mm" range (0,)
		values "thkLeaderLine_pt" range (0,) 

		if GLOB_MODPAR_NAME = "thkLeaderLine_pt" then
			thkLeaderLine_mm = thkLeaderLine_pt / DOT_IN_MM
			parameters thkLeaderLine_mm = thkLeaderLine_mm
		else
			thkLeaderLine_pt = thkLeaderLine_mm * DOT_IN_MM
			parameters thkLeaderLine_pt = thkLeaderLine_pt
		endif

		if _bMetricDimension then
			lock "thkLeaderLine_pt"
			hideparameter "thkLeaderLine_pt"
		else
			lock "thkLeaderLine_mm"
			hideparameter "thkLeaderLine_mm"
		endif

		if iLeaderLineStyle <> LINE_DOUBLE then
			lock "thkLeaderLine_mm", "thkLeaderLine_pt"
			hideparameter "thkLeaderLine_mm", "thkLeaderLine_pt"
		endif

		values "thkExtensionLine_mm" range (0,)
		values "thkExtensionLine_pt" range (0,)

		if GLOB_MODPAR_NAME = "thkExtensionLine_pt" then
			thkExtensionLine_mm = thkExtensionLine_pt / DOT_IN_MM
			parameters thkExtensionLine_mm = thkExtensionLine_mm
		else
			thkExtensionLine_pt = thkExtensionLine_mm * DOT_IN_MM
			parameters thkExtensionLine_pt = thkExtensionLine_pt
		endif

		if iExtensionLineStyle <> EXTLINE_RECT then
				lock "thkExtensionLine_mm", "thkExtensionLine_pt"
				hideparameter "thkExtensionLine_mm", "thkExtensionLine_pt"
		else
			if _bMetricDimension then
				lock "thkExtensionLine_pt"
				hideparameter "thkExtensionLine_pt"
			else
				lock "thkExtensionLine_mm"
				hideparameter "thkExtensionLine_mm"
			endif
		endif

	endif

	if bUseBuiltinPointer then
		lock	"bShowLeaderLine"
		hideparameter 	"bShowLeaderLine"
	endif

	if _bHideLeaderLineParams then
		lock	"lengthExtensionLine_mm",
				"lengthExtensionLine_pt"
			
		hideparameter 	"lengthExtensionLine_mm",
						"lengthExtensionLine_pt"

		if bEnableExtensionPolygon then
			lock 	"iLeaderLineStyle",
					"thkLeaderLine_mm",
					"thkLeaderLine_pt",
					"iExtensionLineStyle",
					"thkExtensionLine_mm",
					"thkExtensionLine_pt"
			hideparameter 	"iLeaderLineStyle",
							"thkLeaderLine_mm",
							"thkLeaderLine_pt",
							"iExtensionLineStyle",
							"thkExtensionLine_mm",
							"thkExtensionLine_pt"
		endif
	endif
endif

if bEnableCustomHeaderStyle then		! Only Skin List Label has this option
	values{2} "iAlignmentHeader" 	1, _stAlignment[1],
									2, _stAlignment[2],
									3, _stAlignment[3]



	if GLOB_MODPAR_NAME = "sizeFontHeader_pt" then
		sizeFontHeader_mm = sizeFontHeader_pt / DOT_IN_MM
		parameters sizeFontHeader_mm = sizeFontHeader_mm
	else
		sizeFontHeader_pt = sizeFontHeader_mm * DOT_IN_MM
		parameters sizeFontHeader_pt = sizeFontHeader_pt
	endif

	if _bMetricDimension then
		lock "sizeFontHeader_pt"
		hideparameter "sizeFontHeader_pt"
	else
		lock "sizeFontHeader_mm"
		hideparameter "sizeFontHeader_mm"
	endif

	if bUseBuiltinPointer then
		lock "bShowHead"
		hideparameter "bShowHead"
	endif

	if _bHideHeadEverySettings then
		lock "bUseCustomHeaderStyle"
		hideparameter "bUseCustomHeaderStyle"
	endif

	if not(bUseCustomHeaderStyle) | _bHideHeadEverySettings then
		lock "penTextHeader",
			"fontTypeHeader",
			"bBoldStyleHeader",
			"bItalicStyleHeader",
			"bUnderlineStyleHeader",
			"bStrikethroughStyleHeader",
			"sizeFontHeader_mm",
			"sizeFontHeader_pt",
			"iAlignmentHeader"

		hideparameter "penTextHeader",
			"fontTypeHeader",
			"bBoldStyleHeader",
			"bItalicStyleHeader",
			"bUnderlineStyleHeader",
			"bStrikethroughStyleHeader",
			"sizeFontHeader_mm",
			"sizeFontHeader_pt",
			"iAlignmentHeader"
	endif
endif

if bUseTextBoxOnLine then
	values "listTextTopDistance_mm" range (0,)
	values "listTextTopDistance_pt" range (0,)

	if GLOB_MODPAR_NAME = "listTextTopDistance_pt" then
		listTextTopDistance_mm = listTextTopDistance_pt / DOT_IN_MM
		parameters listTextTopDistance_mm = listTextTopDistance_mm
	else
		listTextTopDistance_pt = listTextTopDistance_mm * DOT_IN_MM
		parameters listTextTopDistance_pt = listTextTopDistance_pt
	endif

	if _bMetricDimension then
		lock "listTextTopDistance_pt"
		hideparameter "listTextTopDistance_pt"
	else
		lock "listTextTopDistance_mm"
		hideparameter "listTextTopDistance_mm"
	endif

	values "gs_ui_sub_tab" 1, 2, 3, 4
	
	if GLOB_UI_BUTTON_ID = 10001 then
		isFirstRun = 0
		n = APPLICATION_QUERY ("parameter_script", "firstoccasion_in_progress", isFirstRun)
		if isFirstRun then
			gs_ui_sub_tab = max(1, gs_ui_sub_tab-1)
			parameters gs_ui_sub_tab = gs_ui_sub_tab
		endif
	endif
	if GLOB_UI_BUTTON_ID = 10002 then
		isFirstRun = 0
		n = APPLICATION_QUERY ("parameter_script", "firstoccasion_in_progress", isFirstRun)
		if isFirstRun then
			gs_ui_sub_tab = min(4, gs_ui_sub_tab+1)
			parameters gs_ui_sub_tab = gs_ui_sub_tab
		endif
	endif

endif


