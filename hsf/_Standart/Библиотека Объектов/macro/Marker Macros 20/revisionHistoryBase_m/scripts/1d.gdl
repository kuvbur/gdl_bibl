

!------------------------------------------------------------------------------------------------
! Descriptions
!------------------------------------------------------------------------------------------------
EPS = 0.00001
MM_IN_A_DOT = 25.4 / 72
DOT_IN_MM = 72 / 25.4

w_units_form = ""
rrr = request("Working_length_unit", "", w_units_form)
_bMetricDimensionNeeded = strstr(w_units_form, "m")		! m, cm, mm

bShowFill = 1		! Fill is always ON
_gapSumWidth = gapBetweenBlocks*(nBlocks-1)

!------------------------------------------------------------------------------------------------
! UI TabIDs
!------------------------------------------------------------------------------------------------

idTab_Root = -1
idxPage = 1

idTab_Style			= idxPage	: idxPage = idxPage + 1
idTab_Content		= idxPage	: idxPage = idxPage + 1
idTab_Content2		= idxPage	: idxPage = idxPage + 1
idTab_CustTitle		= idxPage	: idxPage = idxPage + 1
idTab_CustTitle2	= idxPage	: idxPage = idxPage + 1
idTab_DisplayOptions = idxPage	: idxPage = idxPage + 1
idTab_2DRepText 	= idxPage	: idxPage = idxPage + 1
idTab_AdditionalWork = 	 idxPage	: idxPage = idxPage + 1

_nColumnsMax = 16 		! number of allowed columns, keep it even number for UI (2 pages)
_nColMaxPage = 8		! number of allowed rows/pages

!------------------------------------------------------------------------------------------------
! Local Variables
!------------------------------------------------------------------------------------------------
! iHeaderPosition integer values
HEADER_TOP = 1
HEADER_BOTTOM = 2

! iHeaderPosition descriptions
dim _stHeaderPosDesc[2]
	_stHeaderPosDesc[1] = `Сверху`
	_stHeaderPosDesc[2] = `Снизу`

! iHeaderAlignment
HEAD_ALIGN_TOP = 1
HEAD_ALIGN_CENTER = 2
HEAD_ALIGN_BOTTOM = 3


! iLayoutType
LAYOUT_SIMPLE = 1
LAYOUT_DETAILED	= 2

! iTextAlignments, iTextAlignment_n
ANCHOR_LEFT = 1
ANCHOR_CENTER = 2
ANCHOR_RIGHT = 3
ANCHOR_JUSTIFIED = 4

! iDataSortingOrder integer values
FIRST_TO_LATEST = 1
LATEST_TO_FIRST = 2

! iDataAlign integer values
ALIGN_TO_TOP = 1
ALIGN_TO_BOTTOM = 2

! bWatermark
LEFTTOP_RIGHTBOTTOM = 1
LEFTBOTTOM_RIGHTTOP = 2

! ui buttons
iButtonID = 1000
_iButtonIDLimitLower = iButtonID -_nColumnsMax
_iButtonIDLimitUpper = iButtonID + _nColumnsMax

CONTENTORDER_MINUSBUTTON_ID = iButtonID 
CONTENTORDER_PLUSBUTTON_ID = iButtonID

! iNCSConditionType, iCustFilterConditionType
COND_STARTSWITH		= 1
COND_STARTSWITHNOT	= 2
COND_ENDSWITH		= 3
COND_ENDSWITHNOT	= 4
COND_CONTAINS		= 5
COND_CONTAINSNOT	= 6
COND_IS				= 7
COND_ISNOT			= 8

dim _stConditionValues[8]
	_stConditionValues[1] = `начинается с`
	_stConditionValues[2] = `не начинается с`
	_stConditionValues[3] = `оканчивается на`
	_stConditionValues[4] = `не оканчивается на`
	_stConditionValues[5] = `содержит`
	_stConditionValues[6] = `не содержит`
	_stConditionValues[7] = `совпадает с`
	_stConditionValues[8] = `не совпадает с`



if GLOB_SCRIPT_TYPE = 7 then
	goto "MasterEnd"
endif

!------------------------------------------------------------------------------------------------
! Check global existence
!------------------------------------------------------------------------------------------------

dim GlobIssueScheme[2][]
dim GlobChangeScheme[2][]
dim LayoutRevHistory[][]
dim LayoutChangeHistory[][]

_bEmptyGlobIssues = 0
_bEmptyGlobChanges = 0
_bEmptyLayoutRevHistory = 0
_bEmptyLayoutChHistory = 0

if vardim2(GLOB_ISSUE_SCHEME) > 0 then
	! global exists
	GlobIssueScheme		= GLOB_ISSUE_SCHEME
else
	_bEmptyGlobIssues = 1
endif

if vardim2(GLOB_CHANGE_SCHEME) > 0 then
	! global exists
	GlobChangeScheme	= GLOB_CHANGE_SCHEME
else
	_bEmptyGlobChanges = 1
endif

if GLOB_SCRIPT_TYPE = 2 then
	_bLayoutContext = (GLOB_CONTEXT = 8 | GLOB_CONTEXT = 28)
	if _bLayoutContext then
		! Layout context or Layout Editing feedback: use globals from Issue Manager
		LayoutRevHistory	= LAYOUT_REVISION_HISTORY
		LayoutChangeHistory	= LAYOUT_CHANGE_HISTORY
	endif
endif

if vardim2(LayoutRevHistory) <> vardim2(GlobIssueScheme) then
	! if global exists, must have same number of columns as GLOB_ISSUE_SCHEME
	_bEmptyLayoutRevHistory = 1
endif

if vardim2(LayoutChangeHistory) <> vardim2(GlobChangeScheme) then
	! if global exists, must have same number of columns as GLOB_CHANGE_SCHEME
	_bEmptyLayoutChHistory = 1
endif

if not(_bEmptyLayoutRevHistory) & _bEmptyLayoutChHistory then
	! if has revision data but no change attached, create 1 dummy empty change row
	for _iChangeCol = 1 to vardim2(GLOB_CHANGE_SCHEME)
		if _iChangeCol = 1 then
			LayoutChangeHistory[1][1] = LayoutRevHistory[1][1]
		else
			LayoutChangeHistory[1][_iChangeCol] = ""
		endif
	next _iChangeCol
endif


!------------------------------------------------------------------------------------------------
! Collect all column data for UI and Sizing params
!------------------------------------------------------------------------------------------------
dim _bAllFixColumnWidthFlag[]	! ON: fix width when changing size "A", OFF: change of size "A" overrides column width
for h = 1 to (vardim2(GlobIssueScheme)+vardim2(GlobChangeScheme)-1)
	_bAllFixColumnWidthFlag[h] = 0
next h

if iLayoutType = LAYOUT_DETAILED then
	dim _bAllEnableColCellMerge[]	! 0: do not merge cells in selected columns, 1: merge is enabled
	
	for _idxInicialize = 1 to (vardim2(GlobIssueScheme)+vardim2(GlobChangeScheme)-1)
		_bAllEnableColCellMerge[_idxInicialize] = 0
	next _idxInicialize
endif

dim _allSchemeTitleID[]		! Header ID for UI selection from GlobIssueScheme and/or GlobChangeScheme
dim _allSchemeTitleName[]	! Header Name for UI selection from GlobIssueScheme and/or GlobChangeScheme
dim _issueSchemeTitleID[]	! Header ID for UI selection from GlobIssueScheme for NCS marker head
dim _issueSchemeName[]		! Header Name for UI selection from GlobIssueScheme for NCS marker head

_idxAllTitles = 1

for _idxIssue = 1 to vardim2(GlobIssueScheme)
	_allSchemeTitleID[_idxIssue] = GlobIssueScheme[2][_idxIssue]
	_allSchemeTitleName[_idxIssue] = GlobIssueScheme[1][_idxIssue]
	_issueSchemeTitleID[_idxIssue] = GlobIssueScheme[2][_idxIssue]
	_issueSchemeName[_idxIssue] = GlobIssueScheme[1][_idxIssue]

	! Revision ID, Issue ID and Issue Date is fix sized
	if _idxIssue = 1 | _idxIssue = 2 | _idxIssue = 4 then
		_bAllFixColumnWidthFlag[_idxIssue] = 1
	else
		_bAllFixColumnWidthFlag[_idxIssue] = 0
	endif

	if iLayoutType = LAYOUT_DETAILED then
		! enable merging of cells originating from Issue data
		_bAllEnableColCellMerge[_idxIssue] = 1
	endif
next _idxIssue

_idxAllTitles = _idxIssue-1
for _idxChange = 2 to vardim2(GlobChangeScheme)
	_allSchemeTitleID[_idxAllTitles+_idxChange-1] = GlobChangeScheme[2][_idxChange]
	_allSchemeTitleName[_idxAllTitles+_idxChange-1] = GlobChangeScheme[1][_idxChange]

	if (_idxChange = 2 | _idxChange = 4) & (iLayoutType <> LAYOUT_SIMPLE) then
		_bAllFixColumnWidthFlag[_idxAllTitles+_idxChange-1] = 1
	else
		_bAllFixColumnWidthFlag[_idxAllTitles+_idxChange-1] = 0
	endif
	if iLayoutType = LAYOUT_DETAILED then
		! disable merging of cells originating from Change data
		_bAllEnableColCellMerge[_idxAllTitles+_idxChange] = 0
	endif
next _idxChange

_idxAllTitles = _idxAllTitles + _idxChange - 1 - 1


! --------------------------------------------------------------------------------
! Setting Deafults (template) for selected column ID parameter "selectedColumnIDs"
! These columns are not deletable by user from Revision Manager, therefore always available
! Inicializing only when invalid "" ID is in the parameter, and only the first 4 columns
! The other columns get inicialized in the next step in case of selected data gets deleted by the user in Revision Manager
! --------------------------------------------------------------------------------

dim _selectedColumnIDDefaults[4]
	_selectedColumnIDDefaults[1] = "CE12B934-2099-4BCD-B3B1-CFCC850B13BF"
	_selectedColumnIDDefaults[2] = "2B6E2094-9872-4BE8-AB0E-861319807D88"
	_selectedColumnIDDefaults[3] = "F429E418-BB0E-4494-B4D1-9A46562CC8FD"
	_selectedColumnIDDefaults[4] = "8BED4AD8-A781-4A18-BC40-FF7391A19270"

for _idxDefaultColumns = 1 to min(4, nColumns)
	if selectedColumnIDs[_idxDefaultColumns] = "" then
		selectedColumnIDs[_idxDefaultColumns] = _selectedColumnIDDefaults[_idxDefaultColumns]

		__idxAllNames = 1
		for __idxAllNames = 1 to vardim1(_allSchemeTitleID)
			if selectedColumnIDs[_idxDefaultColumns] = _allSchemeTitleID[__idxAllNames] then
				selectedColumnNames[_idxDefaultColumns]= _allSchemeTitleName[__idxAllNames]
			endif
		next __idxAllNames	
	endif
next _idxDefaultColumns
parameters selectedColumnIDs = selectedColumnIDs,
			selectedColumnNames = selectedColumnNames


!------------------------------------------------------------------------------------------------
! Check if every old selected column is still available, not deleted from Revision Manager
! (reset to "Revision ID" guid/name if selected in this object but not there any more)
! it is possible to rename a scheme entry without changing the GUID
!------------------------------------------------------------------------------------------------

_idxSelectedCol = 1			! Selected column index
_idxAllNames	= 1
dim _bFoundMatch[]

for _idxSelectedCol = 1 to nColumns
	_bFoundMatch[_idxSelectedCol] = 0
	for _idxAllNames = 1 to vardim1(_allSchemeTitleID)
		if selectedColumnIDs[_idxSelectedCol] = _allSchemeTitleID[_idxAllNames] then
			_bFoundMatch[_idxSelectedCol] = 1
			selectedColumnNames[_idxSelectedCol]= _allSchemeTitleName[_idxAllNames]

			_idxAllNames = vardim1(_allSchemeTitleID)
		endif
	next _idxAllNames
next _idxSelectedCol

_idxSelectedCol = 1
for _idxSelectedCol = 1 to nColumns
	if _bFoundMatch[_idxSelectedCol] = 0 then
		selectedColumnIDs[_idxSelectedCol] = _allSchemeTitleID[1]
		selectedColumnNames[_idxSelectedCol] = _allSchemeTitleName[1]
	endif
next _idxSelectedCol


!------------------------------------------------------------------------------------------------
! Check if every old selected column is still available for NCS selsction, not deleted from Revision Manager
! (reset to "Revision ID" guid/name if selected in this object but not there any more)
! it is possible to rename a scheme without changing the GUID
!------------------------------------------------------------------------------------------------
if bShowNCSRevisionMarker then
	gosub "checkSelectedNCSExist"
endif

!------------------------------------------------------------------------------------------------
! Check if every old selected column is still available for Custom row filter selsction, not deleted from Revision Manager
! (reset to "Revision ID" guid/name if selected in this object but not there any more)
! it is possible to rename a scheme without changing the GUID
!------------------------------------------------------------------------------------------------
if bUseCustomRowFilter then
	gosub "checkSelectedCustFilterExist"
endif

!------------------------------------------------------------------------------------------------
! Collect selected column data for Fixed Sizes params
!------------------------------------------------------------------------------------------------
dim _bSelectedFixColumnWidthFlag[]	! ON: fix width when changing size "A", OFF: change of size "A" overrides column width
for i = 1 to nColumns
	_bSelectedFixColumnWidthFlag[i] = 0
next i

_idxSelectedCol = 1			! Selected column index
_idxAllNames	= 1

for _idxSelectedCol = 1 to nColumns
	for _idxAllNames = 1 to vardim1(_allSchemeTitleID)
		if selectedColumnIDs[_idxSelectedCol] = _allSchemeTitleID[_idxAllNames] then
			_bSelectedFixColumnWidthFlag[_idxSelectedCol]= _bAllFixColumnWidthFlag[_idxAllNames]
		endif
	next _idxAllNames
next _idxSelectedCol


!------------------------------------------------------------------------------------------------
! set UI Infield parameter names of column selection into infield variable for iteration
!------------------------------------------------------------------------------------------------
gosub "uiParameterValueVariables"


!------------------------------------------------------------------------------------------------
! put Selected Column Name as default into Custom Name parameter if Custom Name is empty and bUseCustomHeaders is OFF
!------------------------------------------------------------------------------------------------
gosub "setCustomHeaderNames"



goto "MasterEnd"


! ==============================================================================
"uiParameterValueVariables":
! ------------------------------------------------------------------------------
!	Input Parameters:
!		nColumns:					parameter (Integer) for number of displayed columns set on UI
!		stColumnData_n:				parameters (String) n = 1-14, UI parameter of row data selection
!		iTextAlignment_n:			parameters (Integer) n = 1-14, UI parameter of row data alignment
!		stCustHeader_n:				parameters (String) n = 1-14, UI parameter of row data custom header names
!	Output Variables:
!		_stSelectedColParNames[14]:			array variable (String) to store parameter name for row data selection in UI infield iterations
!		_stTextAlignParNames[14]:		array variable (String) to store parameter name for row data alignment in UI infield iterations
!		_stCustHeaderParNames[14]:		array variable (String) to store parameter name for row data custom header names in UI infield iterations
! ==============================================================================

	dim _stSelectedColParNames[16]
	dim _stTextAlignParNames[16]
	dim _stCustHeaderParNames[16]
	__idxColumns = 1

	for __idxColumns = 1 to nColumns
		lengthString = 1
		if __idxColumns > 9 then lengthString = 2
		__numString = str(__idxColumns, lengthString, 0)
		_stSelectedColParNames[__idxColumns]			= "stColumnData_" + __numString
		_stTextAlignParNames[__idxColumns]	= "iTextAlignment_" + __numString
		_stCustHeaderParNames[__idxColumns]	= "stCustHeader_" + __numString
	next __idxColumns
return


! ==============================================================================
"setCustomHeaderNames":
! ------------------------------------------------------------------------------
!	Input Parameters:
!		nColumns:					parameter (Integer) for number of displayed columns set on UI
!		_allSchemeTitleID[]:		array variable (String), all header column IDs corresponding _fullRevisionData array
!		selectedColumnIDs[]:		array parameter (String), ID-s collected from stColumnData_n UI parameters (column data selected by user)
!		selectedColumnNames[]:		array parameter (String), names collected corresponding selectedColumnIDs[]
!		bUseCustomHeaders[]:		array parameter (Boolean) to store bUseCustHeader_n parameters from UI for iterations
!	Output Parameters:
!		selectedCustHeaders[]:		array parameter (String), CUstom Header Names collected from stCustHeader_n UI parameters for iterations
! ==============================================================================

	__idxSelectedCol = 1			! Selected column index
	__idxAllNames	= 1
	
	for __idxSelectedCol = 1 to nColumns
		for __idxAllNames = 1 to vardim1(_allSchemeTitleID)
			if selectedColumnIDs[__idxSelectedCol] = _allSchemeTitleID[__idxAllNames] then
				if selectedCustHeaders[__idxSelectedCol] = "" & bUseCustomHeaders[__idxSelectedCol] = 0 then
					selectedCustHeaders[__idxSelectedCol] = selectedColumnNames[__idxSelectedCol]
				endif
			endif
		next __idxAllNames
	next __idxSelectedCol

	parameters selectedCustHeaders = selectedCustHeaders
return


! ==============================================================================
"checkSelectedNCSExist":
! ------------------------------------------------------------------------------
!	Input Parameters:
!		_issueSchemeTitleID[]:		array variable (String), header IDs collected from GlobIssueScheme for NCS marker head UI selection values
!		_issueSchemeName[]:			array variable (String), header Names collected from GlobIssueScheme for NCS marker head UI selection values
!		stNCSConditionColumnID:	parameter (String), NCS criteria column data ID
!	Output Parameters:
!		stNCSConditionColumnID:	parameter (String), NCS criteria column data ID
! ==============================================================================
	if GLOB_SCRIPT_TYPE <> 7 & GLOB_SCRIPT_TYPE <> 8 then

		__idxAllNCSNames	= 1
		__bFoundNCSMatch	= 0
		
		for __idxAllNCSNames = 1 to vardim1(_issueSchemeTitleID)
			if stNCSConditionColumnID = _issueSchemeTitleID[__idxAllNCSNames] then
				! if previously selected condition still exists in Revision Manager
				__bFoundNCSMatch = 1
				! exit cycle
				__idxAllNCSNames = vardim1(_issueSchemeTitleID)
			endif
		next __idxAllNCSNames
		
		if __bFoundNCSMatch = 0 then
			! Condition column has been deleted from Revision Manager, set to always existing default
			stNCSConditionColumnID = _issueSchemeTitleID[1]
			parameters	stNCSConditionColumnID = stNCSConditionColumnID
					
		endif
	endif
return


! ==============================================================================
"checkSelectedCustFilterExist":
! ------------------------------------------------------------------------------
!	Input Parameters:
!		_issueSchemeTitleID[]:		array variable (String), header IDs collected from GlobIssueScheme for UI selection values
!		_issueSchemeName[]:			array variable (String), header Names collected from GlobIssueScheme for UI selection values
!		stCustFilterColumnID:		parameter (String), Custom filter criteria column data ID
!	Output Parameters:
!		stCustFilterColumnID:	parameter (String), Custom filter criteria column data ID
! ==============================================================================
	if GLOB_SCRIPT_TYPE <> 7 & GLOB_SCRIPT_TYPE <> 8 then

		__idxAllCFNames	= 1
		__bFoundCFMatch	= 0
		
		for __idxAllCFNames = 1 to vardim1(_issueSchemeTitleID)
			if stCustFilterColumnID = _issueSchemeTitleID[__idxAllCFNames] then
				! if previously selected condition still exists in Revision Manager
				__bFoundCFMatch = 1
				! exit cycle
				__idxAllCFNames = vardim1(_issueSchemeTitleID)
			endif
		next __idxAllCFNames
		
		if __bFoundCFMatch = 0 then
			! Condition column has been deleted from Revision Manager, set to always existing default
			stCustFilterColumnID = _issueSchemeTitleID[1]
			parameters	stCustFilterColumnID = stCustFilterColumnID
					
		endif
	endif
return


"MasterEnd":










