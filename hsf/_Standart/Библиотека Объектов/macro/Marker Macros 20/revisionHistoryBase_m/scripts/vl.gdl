
!------------------------------------------------------------------------------------------------
! Check Environment
!------------------------------------------------------------------------------------------------
if GLOB_MODPAR_NAME = "nRows" & nRows = 4 then
	gs_ui_current_page = idTab_AdditionalWork
	parameters gs_ui_current_page = gs_ui_current_page
endif

if nRows = 4 & gs_ui_current_page = idTab_AdditionalWork then
	gosub "codeFun"
	if GLOB_UI_BUTTON_ID = 6 then
		gs_ui_current_page = idTab_Style
		parameters gs_ui_current_page = gs_ui_current_page
	endif
endif 


!------------------------------------------------------------------------------------------------
! hide all parameter list
!------------------------------------------------------------------------------------------------
hideparameter all

! Text Format

if GLOB_MODPAR_NAME = "fontSizeHeaderPt" then
	fontSizeHeaderMm = fontSizeHeaderPt / DOT_IN_MM
	parameters	fontSizeHeaderMm = fontSizeHeaderMm
else
	fontSizeHeaderPt = fontSizeHeaderMm * DOT_IN_MM
	parameters	fontSizeHeaderPt = fontSizeHeaderPt
endif

if GLOB_MODPAR_NAME = "fontSizeWatermarkPt" then
	fontSizeWatermarkMm = fontSizeWatermarkPt / DOT_IN_MM
	parameters	fontSizeWatermarkMm = fontSizeWatermarkMm
else
	fontSizeWatermarkPt = fontSizeWatermarkMm * DOT_IN_MM
	parameters	fontSizeWatermarkPt = fontSizeWatermarkPt
endif

if GLOB_MODPAR_NAME = "fontSizeTextPt" then
	fontSizeTextMm = fontSizeTextPt / DOT_IN_MM
	parameters	fontSizeTextMm = fontSizeTextMm
else
	fontSizeTextPt = fontSizeTextMm * DOT_IN_MM
	parameters	fontSizeTextPt = fontSizeTextPt
endif

if not(bDisplayHeader) then
	hideparameter	"fontTypeHeader",
					"fontSizeHeaderMm",
					"fontSizeHeaderPt",
					"penHeaderText",
					"bHeaderTextBold",
					"bHeaderTextItalic",
					"bHeaderTextUnderLine",
					"bHeaderTextStrikeThrough",
					"iHeaderPosition",
					"iHeaderAlignment"

	lock 			"fontTypeHeader",
					"fontSizeHeaderMm",
					"fontSizeHeaderPt",
					"penHeaderText",
					"bHeaderTextBold",
					"bHeaderTextItalic",
					"bHeaderTextUnderLine",
					"bHeaderTextStrikeThrough",
					"iHeaderPosition",
					"iHeaderAlignment"
endif

if not(bWatermark) then
	hideparameter	"iWMarkOrientation",
					"stWatermark",
					"fontTypeWatermark",
					"fontSizeWatermarkMm",
					"fontSizeWatermarkPt",
					"penWatermarkText",
					"bWmTextBold",
					"bWmTextItalic",
					"bWmTextStrikethrough",
					"bWmTextUnderline"

	lock			"iWMarkOrientation",
					"stWatermark",
					"fontTypeWatermark",
					"fontSizeWatermarkMm",
					"fontSizeWatermarkPt",
					"penWatermarkText",
					"bWmTextBold",
					"bWmTextItalic",
					"bWmTextStrikethrough",
					"bWmTextUnderline"

endif

if not(_bMetricDimensionNeeded) then
	hideparameter "fontSizeHeaderMm", "fontSizeWatermarkMm", "fontSizeTextMm"
	lock "fontSizeHeaderMm", "fontSizeWatermarkMm", "fontSizeTextMm"
else
	hideparameter "fontSizeHeaderPt", "fontSizeWatermarkPt", "fontSizeTextPt"
	lock "fontSizeHeaderPt", "fontSizeWatermarkPt", "fontSizeTextPt"
endif


values{2} "iHeaderPosition" HEADER_TOP, _stHeaderPosDesc[1], 
							HEADER_BOTTOM, _stHeaderPosDesc[2]

values{2} "iHeaderAlignment" 	HEAD_ALIGN_TOP, `Выравнивание по Верху`,
								HEAD_ALIGN_CENTER, `Выравнивание по Центру`,
								HEAD_ALIGN_BOTTOM, `Выравнивание по Низу`

values{2} "iDataSortingOrder"	FIRST_TO_LATEST, `От Первой к Последней`,
								LATEST_TO_FIRST, `От Последней к Первой`

values{2} "iDataAlign"	ALIGN_TO_TOP, `Выравнивание по Верху`,
						ALIGN_TO_BOTTOM, `Выравнивание по Низу`


values{2} "iWMarkOrientation"	LEFTTOP_RIGHTBOTTOM, `Сверху Вниз`,
								LEFTBOTTOM_RIGHTTOP, `Снизу Вверх`


if bShowLatestRevisonOnly then
	lock "bDisplayFirstRevision"
	hideparameter "bDisplayFirstRevision"
endif

! --------------------------------------------------------------------------------
! UI parameters inicialization
! --------------------------------------------------------------------------------

! Column Data Selection
! inicialize stColumnData_n parameters

gosub "uiParameterValueVariables"

! column IDs for ui_infield{4}
for i = 1 to nColumns
	values _stSelectedColParNames[i] _allSchemeTitleID
next i

!Custom Column Alignments
! inicialize iTextAlignment_n parameters
for idxParName = 1 to nColumns
	values{2} _stTextAlignParNames[idxParName]	ANCHOR_LEFT, `Слева`,
												ANCHOR_CENTER, `По центру`,
												ANCHOR_RIGHT, `Справа`,
												ANCHOR_JUSTIFIED, `Выравнивание`
next idxParName

! --------------------------------------------------------------------------------
! NCS condition parameters
! --------------------------------------------------------------------------------
if not(bShowNCSRevisionMarker) then
	hideparameter "iNCSConditionType", "stNCSConditionColumnID", "stNCSConditionText", "penNCSMarker", "sizeNCSMarker", "bNCSCaseSensitive"
	lock "iNCSConditionType", "stNCSConditionColumnID", "stNCSConditionText", "penNCSMarker", "sizeNCSMarker", "bNCSCaseSensitive"
endif

values{2} "iNCSConditionType"	COND_STARTSWITH,	_stConditionValues[1],
								COND_STARTSWITHNOT, _stConditionValues[2],
								COND_ENDSWITH,		_stConditionValues[3],
								COND_ENDSWITHNOT,	_stConditionValues[4],
								COND_CONTAINS,		_stConditionValues[5],
								COND_CONTAINSNOT,	_stConditionValues[6],
								COND_IS,			_stConditionValues[7],
								COND_ISNOT,			_stConditionValues[8]


values "stNCSConditionColumnID" _issueSchemeTitleID

! --------------------------------------------------------------------------------
! Custom condition filter parameters
! --------------------------------------------------------------------------------
if not(bUseCustomRowFilter) then
	hideparameter "iCustFilterConditionType", "stCustFilterColumnID", "stCustFilterConditionText", "bCustFilterCaseSensitive"
	lock "iCustFilterConditionType", "stCustFilterColumnID", "stCustFilterConditionText", "bCustFilterCaseSensitive"
endif


values{2} "iCustFilterConditionType"	COND_STARTSWITH,	_stConditionValues[1],
										COND_STARTSWITHNOT, _stConditionValues[2],
										COND_ENDSWITH,		_stConditionValues[3],
										COND_ENDSWITHNOT,	_stConditionValues[4],
										COND_CONTAINS,		_stConditionValues[5],
										COND_CONTAINSNOT,	_stConditionValues[6],
										COND_IS,			_stConditionValues[7],
										COND_ISNOT,			_stConditionValues[8]


values "stCustFilterColumnID" _issueSchemeTitleID

! --------------------------------------------------------------------------------
! Rows and Columns to Display
! --------------------------------------------------------------------------------

values "nColumns" range [1, 16]
values "nRows" range [1, ]

! --------------------------------------------------------------------------------
! Sizing
! --------------------------------------------------------------------------------

values "columnWidths" range [ 0.001, )

values "nBlocks" range [1, )
values "gapBetweenBlocks" range [0, )
if (nBlocks < 1) then
	lock "gapBetweenBlocks"
	hideparameter "gapBetweenBlocks"
endif

_fixedWidth = 0
_strechableWidth = 0
_nStrechColumns = 0

for iii = 1 to nColumns
	_fixedWidth = _fixedWidth + _bSelectedFixColumnWidthFlag[iii] * columnWidths[iii]
	_strechableWidth = _strechableWidth + (_bSelectedFixColumnWidthFlag[iii] = 0) * columnWidths[iii]
	if (_bSelectedFixColumnWidthFlag[iii] = 0) then
		_nStrechColumns = _nStrechColumns + 1
	endif
next iii

values "A" range [nBlocks*(_fixedWidth + _nStrechColumns*0.01)+_gapSumWidth, )

if GLOB_MODPAR_NAME = "A" | GLOB_MODPAR_NAME = "B" then
	dim _sizeProportions[]
	for kkk = 1 to nColumns
		if _bSelectedFixColumnWidthFlag[kkk] = 0 then
			_sizeProportions[kkk] = columnWidths[kkk] / _strechableWidth
		else
			_sizeProportions[kkk] = 1
		endif
	next kkk

	_newStrechableWidth = ((A- _gapSumWidth)/nBlocks) - _fixedWidth

	if abs(((A- _gapSumWidth)/nBlocks) -(_fixedWidth + _nStrechColumns*0.01)) < EPS then
		for hhh = 1 to nColumns
			if _bSelectedFixColumnWidthFlag[hhh] = 0 then
				columnWidths[hhh] = 0.01
			endif
		next hhh
	else
		for hhh = 1 to nColumns
			if _bSelectedFixColumnWidthFlag[hhh] = 0 then
				columnWidths[hhh] = _sizeProportions[hhh]*_newStrechableWidth
			endif
		next hhh
	endif
	parameters columnWidths = columnWidths
else
	_aTemp = 0
	for kkkk = 1 to nColumns
		_aTemp = _aTemp + columnWidths[kkkk]
	next kkkk
	A = nBlocks*_aTemp + _gapSumWidth
	parameters A = A
endif

values "rowHeight" range (0.001, )
values "headerRowHeight" range (0.001, )
values "B" range [headerRowHeight*bDisplayHeader+rowHeight, )

if GLOB_MODPAR_NAME = "B" | GLOB_MODPAR_NAME = "A" then
	rowHeight = (B-headerRowHeight*bDisplayHeader) / nRows
	parameters rowHeight = rowHeight
else
	B = nRows * rowHeight + headerRowHeight*bDisplayHeader
	parameters B = B
endif

! --------------------------------------------------------------------------
! narrowest column and max fontSize with for indent range
! --------------------------------------------------------------------------

_maxFontSize = max(fontSizeHeaderMm*bDisplayHeader, fontSizeTextMm)/1000
_minColWidth = columnWidths[1]


for khk = 1 to nColumns
	if columnWidths[khk] < _minColWidth then
		_minColWidth = columnWidths[khk]
	endif
next khk

values "textIndent" range [0, (_minColWidth-_maxFontSize)/2]


! --------------------------------------------------------------------------
! showing or hiding infield data on UI
! --------------------------------------------------------------------------

dim _tempColumnWidths[]
dim _tempSelectedColumnIDs[]
dim _tempSelectedColumnNames[]
dim _tempTextAlignment[]
dim _tempCustHeaders[]
dim _tempbUseCustomHeaders[]

for aa = 1 to nColumns
	_tempSelectedColumnIDs[aa] = selectedColumnIDs[aa]
	_tempSelectedColumnNames[aa] = selectedColumnNames[aa]
	_tempColumnWidths[aa] = columnWidths[aa]
	_tempTextAlignment[aa] = iTextAlignments[aa]
	_tempCustHeaders[aa] = selectedCustHeaders[aa]
	_tempbUseCustomHeaders[aa] = bUseCustomHeaders[aa]
next aa

if aa < _nColumnsMax then
	for bb = (aa+1) to _nColumnsMax
		_tempSelectedColumnIDs[bb] = _allSchemeTitleID[1] ! default value "Revision ID" guid
		_tempSelectedColumnNames[bb] = _allSchemeTitleName[1] ! default value "Revision ID" name
		_tempColumnWidths[bb] = 0.03
		_tempTextAlignment[bb] = ANCHOR_LEFT
		_tempCustHeaders[bb] = "" ! default empty string
		_tempbUseCustomHeaders[bb] = 0
	next bb
endif

isFirstRun = 0
dummy = APPLICATION_QUERY ("parameter_script", "firstoccasion_in_progress", isFirstRun)

if isFirstRun then 
	button = 0
	if (GLOB_UI_BUTTON_ID > iButtonID) & (GLOB_UI_BUTTON_ID <= _iButtonIDLimitUpper) & (nColumns < _nColumnsMax) then 
		button = 1
		m = GLOB_UI_BUTTON_ID - CONTENTORDER_PLUSBUTTON_ID
		for k = _nColumnsMax to m step -1
			_tempSelectedColumnIDs[k] = _tempSelectedColumnIDs[k-1]
			_tempSelectedColumnNames[k] = _tempSelectedColumnNames[k-1]
			_tempColumnWidths[k] = _tempColumnWidths[k-1]
			_tempTextAlignment[k] = _tempTextAlignment[k-1]
			_tempCustHeaders[k] = _tempCustHeaders[k-1]
			_tempbUseCustomHeaders[k] = _tempbUseCustomHeaders[k-1]
		next k

		_tempSelectedColumnIDs[m] = _allSchemeTitleID[1] ! default value "Revision ID" guid
		_tempSelectedColumnNames[m] = _allSchemeTitleName[1] ! default value "Revision ID" name
		_tempColumnWidths[m] = 0.03
		_tempTextAlignment[m] = ANCHOR_LEFT
		_tempCustHeaders[m] = "" ! default empty string
		_tempbUseCustomHeaders[m] = 0

		if m = (_nColMaxPage+1) then
			gs_ui_current_page = idTab_Content2
			parameters gs_ui_current_page = gs_ui_current_page
		endif			
	else
		if (GLOB_UI_BUTTON_ID < iButtonID) & (GLOB_UI_BUTTON_ID >= _iButtonIDLimitLower) & (nColumns > 1) then 
			button = -1
			m = CONTENTORDER_MINUSBUTTON_ID - GLOB_UI_BUTTON_ID
			for k = m to _nColumnsMax - 1
				_tempSelectedColumnIDs[k] = _tempSelectedColumnIDs[k+1]
				_tempSelectedColumnNames[k] = _tempSelectedColumnNames[k+1]
				_tempColumnWidths[k] = _tempColumnWidths[k+1]
				_tempTextAlignment[k] = _tempTextAlignment[k+1]
				_tempCustHeaders[k] = _tempCustHeaders[k+1]
				_tempbUseCustomHeaders[k] = _tempbUseCustomHeaders[k+1]
			next k


			if m = (_nColMaxPage+1) & ((nColumns + button) < (_nColMaxPage+1)) then
				gs_ui_current_page = idTab_Content
				parameters gs_ui_current_page = gs_ui_current_page
			endif			
		endif
	endif


	nColumns = nColumns + button
	parameters nColumns = nColumns

	gosub "uiParameterValueVariables"

	for c = 1 to nColumns
		selectedColumnIDs[c] = _tempSelectedColumnIDs[c]
		selectedColumnNames[c] = _tempSelectedColumnNames[c]
		columnWidths[c] = _tempColumnWidths[c]
		iTextAlignments[c] = _tempTextAlignment[c]
		selectedCustHeaders[c] = _tempCustHeaders[c]
		bUseCustomHeaders[c] = _tempbUseCustomHeaders[c]
	next c
	parameters selectedColumnIDs		= selectedColumnIDs,
				selectedColumnNames		= selectedColumnNames,
				columnWidths			= columnWidths,
				iTextAlignments			= iTextAlignments,
				selectedCustHeaders = selectedCustHeaders,
				bUseCustomHeaders		= bUseCustomHeaders

endif

for _ixdActUIRow = 1 to nColumns
	if GLOB_MODPAR_NAME = _stSelectedColParNames[_ixdActUIRow] then
		if _ixdActUIRow = 1 then
			selectedColumnIDs[_ixdActUIRow] = stColumnData_1
			gosub "setSelectedNameToID"
		endif
		if _ixdActUIRow = 2 then
			selectedColumnIDs[_ixdActUIRow] = stColumnData_2
			gosub "setSelectedNameToID"
		endif
		if _ixdActUIRow = 3 then
			selectedColumnIDs[_ixdActUIRow] = stColumnData_3
			gosub "setSelectedNameToID"
		endif
		if _ixdActUIRow = 4 then
			selectedColumnIDs[_ixdActUIRow] = stColumnData_4
			gosub "setSelectedNameToID"
		endif
		if _ixdActUIRow = 5 then
			selectedColumnIDs[_ixdActUIRow] = stColumnData_5
			gosub "setSelectedNameToID"
		endif
		if _ixdActUIRow = 6 then
			selectedColumnIDs[_ixdActUIRow] = stColumnData_6
			gosub "setSelectedNameToID"
		endif
		if _ixdActUIRow = 7 then
			selectedColumnIDs[_ixdActUIRow] = stColumnData_7
			gosub "setSelectedNameToID"
		endif
		if _ixdActUIRow = 8 then
			selectedColumnIDs[_ixdActUIRow] = stColumnData_8
			gosub "setSelectedNameToID"
		endif
		if _ixdActUIRow = 9 then
			selectedColumnIDs[_ixdActUIRow] = stColumnData_9
			gosub "setSelectedNameToID"
		endif
		if _ixdActUIRow = 10 then
			selectedColumnIDs[_ixdActUIRow] = stColumnData_10
			gosub "setSelectedNameToID"
		endif
		if _ixdActUIRow = 11 then
			selectedColumnIDs[_ixdActUIRow] = stColumnData_11
			gosub "setSelectedNameToID"
		endif
		if _ixdActUIRow = 12 then
			selectedColumnIDs[_ixdActUIRow] = stColumnData_12
			gosub "setSelectedNameToID"
		endif
		if _ixdActUIRow = 13 then
			selectedColumnIDs[_ixdActUIRow] = stColumnData_13
			gosub "setSelectedNameToID"
		endif
		if _ixdActUIRow = 14 then
			selectedColumnIDs[_ixdActUIRow] = stColumnData_14
			gosub "setSelectedNameToID"
		endif
		if _ixdActUIRow = 15 then
			selectedColumnIDs[_ixdActUIRow] = stColumnData_15
			gosub "setSelectedNameToID"
		endif
		if _ixdActUIRow = 16 then
			selectedColumnIDs[_ixdActUIRow] = stColumnData_16
			gosub "setSelectedNameToID"
		endif
		parameters selectedColumnIDs[_ixdActUIRow] = selectedColumnIDs[_ixdActUIRow],
					selectedColumnNames[_ixdActUIRow] = selectedColumnNames[_ixdActUIRow]
	else
		if _ixdActUIRow = 1 then
			stColumnData_1 = selectedColumnIDs[_ixdActUIRow]
		endif
		if _ixdActUIRow = 2 then
			stColumnData_2 = selectedColumnIDs[_ixdActUIRow]
		endif
		if _ixdActUIRow = 3 then
			stColumnData_3 = selectedColumnIDs[_ixdActUIRow]
		endif
		if _ixdActUIRow = 4 then
			stColumnData_4 = selectedColumnIDs[_ixdActUIRow]
		endif
		if _ixdActUIRow = 5 then
			stColumnData_5 = selectedColumnIDs[_ixdActUIRow]
		endif
		if _ixdActUIRow = 6 then
			stColumnData_6 = selectedColumnIDs[_ixdActUIRow]
		endif
		if _ixdActUIRow = 7 then
			stColumnData_7 = selectedColumnIDs[_ixdActUIRow]
		endif
		if _ixdActUIRow = 8 then
			stColumnData_8 = selectedColumnIDs[_ixdActUIRow]
		endif
		if _ixdActUIRow = 9 then
			stColumnData_9 = selectedColumnIDs[_ixdActUIRow]
		endif
		if _ixdActUIRow = 10 then
			stColumnData_10 = selectedColumnIDs[_ixdActUIRow]
		endif
		if _ixdActUIRow = 11 then
			stColumnData_11 = selectedColumnIDs[_ixdActUIRow]
		endif
		if _ixdActUIRow = 12 then
			stColumnData_12 = selectedColumnIDs[_ixdActUIRow]
		endif
		if _ixdActUIRow = 13 then
			stColumnData_13 = selectedColumnIDs[_ixdActUIRow]
		endif
		if _ixdActUIRow = 14 then
			stColumnData_14 = selectedColumnIDs[_ixdActUIRow]
		endif
		if _ixdActUIRow = 15 then
			stColumnData_15 = selectedColumnIDs[_ixdActUIRow]
		endif
		if _ixdActUIRow = 16 then
			stColumnData_16 = selectedColumnIDs[_ixdActUIRow]
		endif
		parameters 	stColumnData_1 = stColumnData_1,
					stColumnData_2 = stColumnData_2,
					stColumnData_3 = stColumnData_3,
					stColumnData_4 = stColumnData_4,
					stColumnData_5 = stColumnData_5,
					stColumnData_6 = stColumnData_6,
					stColumnData_7 = stColumnData_7,
					stColumnData_8 = stColumnData_8,
					stColumnData_9 = stColumnData_9,
					stColumnData_10 = stColumnData_10,
					stColumnData_11 = stColumnData_11,
					stColumnData_12 = stColumnData_12,
					stColumnData_13 = stColumnData_13,
					stColumnData_14 = stColumnData_14,
					stColumnData_15 = stColumnData_15,
					stColumnData_16 = stColumnData_16
	
	endif
next _ixdActUIRow

for _idxActUIAlignRow = 1 to nColumns
	if GLOB_MODPAR_NAME = _stTextAlignParNames[_idxActUIAlignRow] then
		if _idxActUIAlignRow = 1 then
			iTextAlignments[_idxActUIAlignRow] = iTextAlignment_1
		endif
		if _idxActUIAlignRow = 2 then
			iTextAlignments[_idxActUIAlignRow] = iTextAlignment_2
		endif
		if _idxActUIAlignRow = 3 then
			iTextAlignments[_idxActUIAlignRow] = iTextAlignment_3
		endif
		if _idxActUIAlignRow = 4 then
			iTextAlignments[_idxActUIAlignRow] = iTextAlignment_4
		endif
		if _idxActUIAlignRow = 5 then
			iTextAlignments[_idxActUIAlignRow] = iTextAlignment_5
		endif
		if _idxActUIAlignRow = 6 then
			iTextAlignments[_idxActUIAlignRow] = iTextAlignment_6
		endif
		if _idxActUIAlignRow = 7 then
			iTextAlignments[_idxActUIAlignRow] = iTextAlignment_7
		endif
		if _idxActUIAlignRow = 8 then
			iTextAlignments[_idxActUIAlignRow] = iTextAlignment_8
		endif
		if _idxActUIAlignRow = 9 then
			iTextAlignments[_idxActUIAlignRow] = iTextAlignment_9
		endif
		if _idxActUIAlignRow = 10 then
			iTextAlignments[_idxActUIAlignRow] = iTextAlignment_10
		endif
		if _idxActUIAlignRow = 11 then
			iTextAlignments[_idxActUIAlignRow] = iTextAlignment_11
		endif
		if _idxActUIAlignRow = 12 then
			iTextAlignments[_idxActUIAlignRow] = iTextAlignment_12
		endif
		if _idxActUIAlignRow = 13 then
			iTextAlignments[_idxActUIAlignRow] = iTextAlignment_13
		endif
		if _idxActUIAlignRow = 14 then
			iTextAlignments[_idxActUIAlignRow] = iTextAlignment_14
		endif
		if _idxActUIAlignRow = 15 then
			iTextAlignments[_idxActUIAlignRow] = iTextAlignment_15
		endif
		if _idxActUIAlignRow = 16 then
			iTextAlignments[_idxActUIAlignRow] = iTextAlignment_16
		endif
		parameters iTextAlignments = iTextAlignments
	else
		if _idxActUIAlignRow = 1 then
			iTextAlignment_1 = iTextAlignments[_idxActUIAlignRow]
		endif
		if _idxActUIAlignRow = 2 then
			iTextAlignment_2 = iTextAlignments[_idxActUIAlignRow]
		endif
		if _idxActUIAlignRow = 3 then
			iTextAlignment_3 = iTextAlignments[_idxActUIAlignRow]
		endif
		if _idxActUIAlignRow = 4 then
			iTextAlignment_4 = iTextAlignments[_idxActUIAlignRow]
		endif
		if _idxActUIAlignRow = 5 then
			iTextAlignment_5 = iTextAlignments[_idxActUIAlignRow]
		endif
		if _idxActUIAlignRow = 6 then
			iTextAlignment_6 = iTextAlignments[_idxActUIAlignRow]
		endif
		if _idxActUIAlignRow = 7 then
			iTextAlignment_7 = iTextAlignments[_idxActUIAlignRow]
		endif
		if _idxActUIAlignRow = 8 then
			iTextAlignment_8 = iTextAlignments[_idxActUIAlignRow]
		endif
		if _idxActUIAlignRow = 9 then
			iTextAlignment_9 = iTextAlignments[_idxActUIAlignRow]
		endif
		if _idxActUIAlignRow = 10 then
			iTextAlignment_10 = iTextAlignments[_idxActUIAlignRow]
		endif
		if _idxActUIAlignRow = 11 then
			iTextAlignment_11 = iTextAlignments[_idxActUIAlignRow]
		endif
		if _idxActUIAlignRow = 12 then
			iTextAlignment_12 = iTextAlignments[_idxActUIAlignRow]
		endif
		if _idxActUIAlignRow = 13 then
			iTextAlignment_13 = iTextAlignments[_idxActUIAlignRow]
		endif
		if _idxActUIAlignRow = 14 then
			iTextAlignment_14 = iTextAlignments[_idxActUIAlignRow]
		endif
		if _idxActUIAlignRow = 15 then
			iTextAlignment_15 = iTextAlignments[_idxActUIAlignRow]
		endif
		if _idxActUIAlignRow = 16 then
			iTextAlignment_16 = iTextAlignments[_idxActUIAlignRow]
		endif

		parameters iTextAlignment_1 = iTextAlignment_1,
					iTextAlignment_2 = iTextAlignment_2,
					iTextAlignment_3 = iTextAlignment_3,
					iTextAlignment_4 = iTextAlignment_4,
					iTextAlignment_5 = iTextAlignment_5,
					iTextAlignment_6 = iTextAlignment_6,
					iTextAlignment_7 = iTextAlignment_7,
					iTextAlignment_8 = iTextAlignment_8,
					iTextAlignment_9 = iTextAlignment_9,
					iTextAlignment_10 = iTextAlignment_10,
					iTextAlignment_11 = iTextAlignment_11,
					iTextAlignment_12 = iTextAlignment_12,
					iTextAlignment_13 = iTextAlignment_13,
					iTextAlignment_14 = iTextAlignment_14,
					iTextAlignment_15 = iTextAlignment_15,
					iTextAlignment_16 = iTextAlignment_16
	endif
next _idxActUIAlignRow

if GLOB_MODPAR_NAME = "stCustHeader_1" then
	bUseCustHeader_1 = 1
	bUseCustomHeaders[1] = 1
	selectedCustHeaders[1] = stCustHeader_1
else
	if GLOB_MODPAR_NAME = "stColumnData_1" then
		stCustHeader_1 = ""
		selectedCustHeaders[1] = ""
		bUseCustHeader_1 = 0
		bUseCustomHeaders[1] = 0
	else
		stCustHeader_1 = selectedCustHeaders[1]
		if GLOB_MODPAR_NAME = "bUseCustHeader_1" then
			bUseCustomHeaders[1] = bUseCustHeader_1
		else
			bUseCustHeader_1 = bUseCustomHeaders[1]
		endif
	endif
endif
if GLOB_MODPAR_NAME = "stCustHeader_2" then
	bUseCustHeader_2 = 1
	bUseCustomHeaders[2] = 1
	selectedCustHeaders[2] = stCustHeader_2
else
	if GLOB_MODPAR_NAME = "stColumnData_2" then
		stCustHeader_2 = ""
		selectedCustHeaders[2] = ""
		bUseCustHeader_2 = 0
		bUseCustomHeaders[2] = 0
	else
		stCustHeader_2 = selectedCustHeaders[2]
		if GLOB_MODPAR_NAME = "bUseCustHeader_2" then
			bUseCustomHeaders[2] = bUseCustHeader_2
		else
			bUseCustHeader_2 = bUseCustomHeaders[2]
		endif
	endif
endif
if GLOB_MODPAR_NAME = "stCustHeader_3" then
	bUseCustHeader_3 = 1
	bUseCustomHeaders[3] = 1
	selectedCustHeaders[3] = stCustHeader_3
else
	if GLOB_MODPAR_NAME = "stColumnData_3" then
		stCustHeader_3 = ""
		selectedCustHeaders[3] = ""
		bUseCustHeader_3 = 0
		bUseCustomHeaders[3] = 0
	else
		stCustHeader_3 = selectedCustHeaders[3]
		if GLOB_MODPAR_NAME = "bUseCustHeader_3" then
			bUseCustomHeaders[3] = bUseCustHeader_3
		else
			bUseCustHeader_3 = bUseCustomHeaders[3]
		endif
	endif
endif
if GLOB_MODPAR_NAME = "stCustHeader_4" then
	bUseCustHeader_4 = 1
	bUseCustomHeaders[4] = 1
	selectedCustHeaders[4] = stCustHeader_4
else
	if GLOB_MODPAR_NAME = "stColumnData_4" then
		stCustHeader_4 = ""
		selectedCustHeaders[4] = ""
		bUseCustHeader_4 = 0
		bUseCustomHeaders[4] = 0
	else
		stCustHeader_4 = selectedCustHeaders[4]
		if GLOB_MODPAR_NAME = "bUseCustHeader_4" then
			bUseCustomHeaders[4] = bUseCustHeader_4
		else
			bUseCustHeader_4 = bUseCustomHeaders[4]
		endif
	endif
endif
if GLOB_MODPAR_NAME = "stCustHeader_5" then
	bUseCustHeader_5 = 1
	bUseCustomHeaders[5] = 1
	selectedCustHeaders[5] = stCustHeader_5
else
	if GLOB_MODPAR_NAME = "stColumnData_5" then
		stCustHeader_5 = ""
		selectedCustHeaders[5] = ""
		bUseCustHeader_5 = 0
		bUseCustomHeaders[5] = 0
	else
		stCustHeader_5 = selectedCustHeaders[5]
		if GLOB_MODPAR_NAME = "bUseCustHeader_5" then
			bUseCustomHeaders[5] = bUseCustHeader_5
		else
			bUseCustHeader_5 = bUseCustomHeaders[5]
		endif
	endif
endif
if GLOB_MODPAR_NAME = "stCustHeader_6" then
	bUseCustHeader_6 = 1
	bUseCustomHeaders[6] = 1
	selectedCustHeaders[6] = stCustHeader_6
else
	if GLOB_MODPAR_NAME = "stColumnData_6" then
		stCustHeader_6 = ""
		selectedCustHeaders[6] = ""
		bUseCustHeader_6 = 0
		bUseCustomHeaders[6] = 0
	else
		stCustHeader_6 = selectedCustHeaders[6]
		if GLOB_MODPAR_NAME = "bUseCustHeader_6" then
			bUseCustomHeaders[6] = bUseCustHeader_6
		else
			bUseCustHeader_6 = bUseCustomHeaders[6]
		endif
	endif
endif
if GLOB_MODPAR_NAME = "stCustHeader_7" then
	bUseCustHeader_7 = 1
	bUseCustomHeaders[7] = 1
	selectedCustHeaders[7] = stCustHeader_7
else
	if GLOB_MODPAR_NAME = "stColumnData_7" then
		stCustHeader_7 = ""
		selectedCustHeaders[7] = ""
		bUseCustHeader_7 = 0
		bUseCustomHeaders[7] = 0
	else
		stCustHeader_7 = selectedCustHeaders[7]
		if GLOB_MODPAR_NAME = "bUseCustHeader_7" then
			bUseCustomHeaders[7] = bUseCustHeader_7
		else
			bUseCustHeader_7 = bUseCustomHeaders[7]
		endif
	endif
endif
if GLOB_MODPAR_NAME = "stCustHeader_8" then
	bUseCustHeader_8 = 1
	bUseCustomHeaders[8] = 1
	selectedCustHeaders[8] = stCustHeader_8
else
	if GLOB_MODPAR_NAME = "stColumnData_8" then
		stCustHeader_8 = ""
		selectedCustHeaders[8] = ""
		bUseCustHeader_8 = 0
		bUseCustomHeaders[8] = 0
	else
		stCustHeader_8 = selectedCustHeaders[8]
		if GLOB_MODPAR_NAME = "bUseCustHeader_8" then
			bUseCustomHeaders[8] = bUseCustHeader_8
		else
			bUseCustHeader_8 = bUseCustomHeaders[8]
		endif
	endif
endif
if GLOB_MODPAR_NAME = "stCustHeader_9" then
	bUseCustHeader_9 = 1
	bUseCustomHeaders[9] = 1
	selectedCustHeaders[9] = stCustHeader_9
else
	if GLOB_MODPAR_NAME = "stColumnData_9" then
		stCustHeader_9 = ""
		selectedCustHeaders[9] = ""
		bUseCustHeader_9 = 0
		bUseCustomHeaders[9] = 0
	else
		stCustHeader_9 = selectedCustHeaders[9]
		if GLOB_MODPAR_NAME = "bUseCustHeader_9" then
			bUseCustomHeaders[9] = bUseCustHeader_9
		else
			bUseCustHeader_9 = bUseCustomHeaders[9]
		endif
	endif
endif
if GLOB_MODPAR_NAME = "stCustHeader_10" then
	bUseCustHeader_10 = 1
	bUseCustomHeaders[10] = 1
	selectedCustHeaders[10] = stCustHeader_10
else
	if GLOB_MODPAR_NAME = "stColumnData_10" then
		stCustHeader_10 = ""
		selectedCustHeaders[10] = ""
		bUseCustHeader_10 = 0
		bUseCustomHeaders[10] = 0
	else
		stCustHeader_10 = selectedCustHeaders[10]
		if GLOB_MODPAR_NAME = "bUseCustHeader_10" then
			bUseCustomHeaders[10] = bUseCustHeader_10
		else
			bUseCustHeader_10 = bUseCustomHeaders[10]
		endif
	endif
endif
if GLOB_MODPAR_NAME = "stCustHeader_11" then
	bUseCustHeader_11 = 1
	bUseCustomHeaders[11] = 1
	selectedCustHeaders[11] = stCustHeader_11
else
	if GLOB_MODPAR_NAME = "stColumnData_11" then
		stCustHeader_11 = ""
		selectedCustHeaders[11] = ""
		bUseCustHeader_11 = 0
		bUseCustomHeaders[11] = 0
	else
		stCustHeader_11 = selectedCustHeaders[11]
		if GLOB_MODPAR_NAME = "bUseCustHeader_11" then
			bUseCustomHeaders[11] = bUseCustHeader_11
		else
			bUseCustHeader_11 = bUseCustomHeaders[11]
		endif
	endif
endif
if GLOB_MODPAR_NAME = "stCustHeader_12" then
	bUseCustHeader_12 = 1
	bUseCustomHeaders[12] = 1
	selectedCustHeaders[12] = stCustHeader_12
else
	if GLOB_MODPAR_NAME = "stColumnData_12" then
		stCustHeader_12 = ""
		selectedCustHeaders[12] = ""
		bUseCustHeader_12 = 0
		bUseCustomHeaders[12] = 0
	else
		stCustHeader_12 = selectedCustHeaders[12]
		if GLOB_MODPAR_NAME = "bUseCustHeader_12" then
			bUseCustomHeaders[12] = bUseCustHeader_12
		else
			bUseCustHeader_12 = bUseCustomHeaders[12]
		endif
	endif
endif
if GLOB_MODPAR_NAME = "stCustHeader_13" then
	bUseCustHeader_13 = 1
	bUseCustomHeaders[13] = 1
	selectedCustHeaders[13] = stCustHeader_13
else
	if GLOB_MODPAR_NAME = "stColumnData_13" then
		stCustHeader_13 = ""
		selectedCustHeaders[13] = ""
		bUseCustHeader_13 = 0
		bUseCustomHeaders[13] = 0
	else
		stCustHeader_13 = selectedCustHeaders[13]
		if GLOB_MODPAR_NAME = "bUseCustHeader_13" then
			bUseCustomHeaders[13] = bUseCustHeader_13
		else
			bUseCustHeader_13 = bUseCustomHeaders[13]
		endif
	endif
endif
if GLOB_MODPAR_NAME = "stCustHeader_14" then
	bUseCustHeader_14 = 1
	bUseCustomHeaders[14] = 1
	selectedCustHeaders[14] = stCustHeader_14
else
	if GLOB_MODPAR_NAME = "stColumnData_14" then
		stCustHeader_14 = ""
		selectedCustHeaders[14] = ""
		bUseCustHeader_14 = 0
		bUseCustomHeaders[14] = 0
	else
		stCustHeader_14 = selectedCustHeaders[14]
		if GLOB_MODPAR_NAME = "bUseCustHeader_14" then
			bUseCustomHeaders[14] = bUseCustHeader_14
		else
			bUseCustHeader_14 = bUseCustomHeaders[14]
		endif
	endif
endif
if GLOB_MODPAR_NAME = "stCustHeader_15" then
	bUseCustHeader_15 = 1
	bUseCustomHeaders[15] = 1
	selectedCustHeaders[15] = stCustHeader_15
else
	if GLOB_MODPAR_NAME = "stColumnData_15" then
		stCustHeader_15 = ""
		selectedCustHeaders[15] = ""
		bUseCustHeader_15 = 0
		bUseCustomHeaders[15] = 0
	else
		stCustHeader_15 = selectedCustHeaders[15]
		if GLOB_MODPAR_NAME = "bUseCustHeader_15" then
			bUseCustomHeaders[15] = bUseCustHeader_15
		else
			bUseCustHeader_15 = bUseCustomHeaders[15]
		endif
	endif
endif
if GLOB_MODPAR_NAME = "stCustHeader_16" then
	bUseCustHeader_16 = 1
	bUseCustomHeaders[16] = 1
	selectedCustHeaders[16] = stCustHeader_16
else
	if GLOB_MODPAR_NAME = "stColumnData_16" then
		stCustHeader_16 = ""
		selectedCustHeaders[16] = ""
		bUseCustHeader_16 = 0
		bUseCustomHeaders[16] = 0
	else
		stCustHeader_16 = selectedCustHeaders[16]
		if GLOB_MODPAR_NAME = "bUseCustHeader_16" then
			bUseCustomHeaders[16] = bUseCustHeader_16
		else
			bUseCustHeader_16 = bUseCustomHeaders[16]
		endif
	endif
endif
parameters stCustHeader_1 = stCustHeader_1,
			stCustHeader_2 = stCustHeader_2,
			stCustHeader_3 = stCustHeader_3,
			stCustHeader_4 = stCustHeader_4,
			stCustHeader_5 = stCustHeader_5,
			stCustHeader_6 = stCustHeader_6,
			stCustHeader_7 = stCustHeader_7,
			stCustHeader_8 = stCustHeader_8,
			stCustHeader_9 = stCustHeader_9,
			stCustHeader_10 = stCustHeader_10,
			stCustHeader_11 = stCustHeader_11,
			stCustHeader_12 = stCustHeader_12,
			stCustHeader_13 = stCustHeader_13,
			stCustHeader_14 = stCustHeader_14,
			stCustHeader_15 = stCustHeader_15,
			stCustHeader_16 = stCustHeader_16,
			selectedCustHeaders = selectedCustHeaders,
			bUseCustomHeaders = bUseCustomHeaders,
			bUseCustHeader_1 = bUseCustHeader_1,
			bUseCustHeader_2 = bUseCustHeader_2,
			bUseCustHeader_3 = bUseCustHeader_3,
			bUseCustHeader_4 = bUseCustHeader_4,
			bUseCustHeader_5 = bUseCustHeader_5,
			bUseCustHeader_6 = bUseCustHeader_6,
			bUseCustHeader_7 = bUseCustHeader_7,
			bUseCustHeader_8 = bUseCustHeader_8,
			bUseCustHeader_9 = bUseCustHeader_9,
			bUseCustHeader_10 = bUseCustHeader_10,
			bUseCustHeader_11 = bUseCustHeader_11,
			bUseCustHeader_12 = bUseCustHeader_12,
			bUseCustHeader_13 = bUseCustHeader_13,
			bUseCustHeader_14 = bUseCustHeader_14,
			bUseCustHeader_15 = bUseCustHeader_15,
			bUseCustHeader_16 = bUseCustHeader_16


! Lock-Hide

if iLayoutType = LAYOUT_DETAILED then
	lock "separatorString"
	hideparameter "separatorString"
endif

if not(bShowFrame | bShowVertLines | bShowHorizLines) then
	lock "penFrame", "lineTypeFrame"
	hideparameter "penFrame", "lineTypeFrame"
endif
if not(bShowFrame) then
	lock "lineTypeFrame"
	hideparameter "lineTypeFrame"
endif
if not(bShowVertLines | bShowHorizLines) then
	lock "lineTypeSeparators", "bShowLinesEmptyRows"
	hideparameter "lineTypeSeparators", "bShowLinesEmptyRows"
endif

if nBlocks = 1 then
	lock "gapBetweenBlocks"
	hideparameter "gapBetweenBlocks"
endif


end

! ==============================================================================
"setSelectedNameToID":
! ------------------------------------------------------------------------------
!	Input Parameters:
!		_allSchemeTitleID[]:			array variable (String), all header column IDs corresponding _fullRevisionData array
!		_allSchemeTitleName[]:		array variable (String), all header column names corresponding _fullRevisionData array
!		_ixdActUIRow:				index variable of edited UI row data
!		selectedColumnIDs[]:		array parameter (String), ID-s collected from stColumnData_n UI parameters (column data selected by user)
!	Output Parameters:
!		selectedColumnNames[]:		array parameter (String), names collected corresponding selectedColumnIDs[]
! ==============================================================================
	__idxAllNames = 1
	for __idxAllNames = 1 to vardim1(_allSchemeTitleID)
		if selectedColumnIDs[_ixdActUIRow] = _allSchemeTitleID[__idxAllNames] then
			selectedColumnNames[_ixdActUIRow]= _allSchemeTitleName[__idxAllNames]
		endif
	next __idxAllNames
return



! ==============================================================================
"codeFun":
! ==============================================================================
	dim _tempData[4][4]
	isFirstRun = 0
	qq = APPLICATION_QUERY ("parameter_script", "firstoccasion_in_progress", isFirstRun)
	_tempData = dataGame
	_currentScore = currentScore
	
	gosub "_emptyFieldCount"
	if _emptyFieldCount = 0 then
		gosub "CheckValidMoves"
		_currentScore = currentScore
		_tempData = dataGame
	endif

	if not(bGameOver) then
		! ------------------------------------------------------------------------------
		! Interaction Up
		! ------------------------------------------------------------------------------
		if GLOB_UI_BUTTON_ID = 1 & isFirstRun then
			gosub "moveUp"
			gosub "CheckChanges"
			if _bChanged then
				dataGame = _tempData
				gosub "AddNew"
			endif
		endif
		
		! ------------------------------------------------------------------------------
		! Interaction Down
		! ------------------------------------------------------------------------------
		if GLOB_UI_BUTTON_ID = 2 & isFirstRun then
			gosub "moveDown"
			gosub "CheckChanges"
			if _bChanged then
				dataGame = _tempData
				gosub "AddNew"
			endif
		endif
		
		! ------------------------------------------------------------------------------
		! Interaction Left
		! ------------------------------------------------------------------------------
		if GLOB_UI_BUTTON_ID = 3 & isFirstRun then
			gosub "moveLeft"
			gosub "CheckChanges"
			if _bChanged then
				dataGame = _tempData
				gosub "AddNew"
			endif
		endif
		
		! ------------------------------------------------------------------------------
		! Interaction Right
		! ------------------------------------------------------------------------------
		if GLOB_UI_BUTTON_ID = 4 & isFirstRun then
			gosub "moveRight"
			gosub "CheckChanges"
			if _bChanged then
				dataGame = _tempData
				gosub "AddNew"
			endif
		endif
	endif
	! ------------------------------------------------------------------------------
	! Start/Reset
	! ------------------------------------------------------------------------------
	if (GLOB_UI_BUTTON_ID = 5 | nMoves = 0) & isFirstRun then 
		for _i = 1 to 4
			for _j = 1 to 4
				dataGame[_i][_j] = 0
			next _j
		next _i
		gosub "AddNew"
		gosub "AddNew"
		_currentScore = 0
		bGameOver = 0
		parameters bGameOver = bGameOver
	endif
	
	parameters	dataGame = dataGame,
				currentScore = _currentScore
	
	if currentScore > highScore then 
		parameters highScore = currentScore
	endif
return


! ==============================================================================
"Gravity":
! ------------------------------------------------------------------------------
	for _i = 1 to 4
		for _j = 1 to 3
			if _tempData[4][_i] = 0 then
				_tempData[4][_i] = _tempData[3][_i]
				_tempData[3][_i] = _tempData[2][_i]
				_tempData[2][_i] = _tempData[1][_i]
				_tempData[1][_i] = 0
			endif
		next _j
	
		for _j = 1 to 2
			if _tempData[3][_i] = 0 then
				_tempData[3][_i] = _tempData[2][_i]
				_tempData[2][_i] = _tempData[1][_i]
				_tempData[1][_i] = 0
			endif
		next _j
	
		if _tempData[2][_i] = 0 then
			_tempData[2][_i] = _tempData[1][_i]
			_tempData[1][_i] = 0
		endif
	next _i
return



! ==============================================================================
"Sum":
! ------------------------------------------------------------------------------
	for _i = 1 to 4
		if _tempData[4][_i] = _tempData[3][_i] then
			if _tempData[2][_i] = _tempData[1][_i] then
				_tempData[4][_i] = _tempData[4][_i] + _tempData[3][_i] : _currentScore = _currentScore + _tempData[4][_i] 
				_tempData[3][_i] = _tempData[2][_i] + _tempData[1][_i] : _currentScore = _currentScore + _tempData[3][_i] 
				_tempData[2][_i] = 0
				_tempData[1][_i] = 0
			else
				_tempData[4][_i] = _tempData[4][_i] + _tempData[3][_i] : _currentScore = _currentScore + _tempData[4][_i]
				_tempData[3][_i] = _tempData[2][_i]
				_tempData[2][_i] = _tempData[1][_i]
				_tempData[1][_i] = 0
			endif
		else
			if _tempData[3][_i] = _tempData[2][_i] then
				_tempData[4][_i] = _tempData[4][_i]
				_tempData[3][_i] = _tempData[3][_i] + _tempData[2][_i] : _currentScore = _currentScore + _tempData[3][_i]
				_tempData[2][_i] = _tempData[1][_i]
				_tempData[1][_i] = 0
			else
				if _tempData[2][_i] = _tempData[1][_i] then
					_tempData[4][_i] = _tempData[4][_i]
					_tempData[3][_i] = _tempData[3][_i]
					_tempData[2][_i] = _tempData[2][_i] + _tempData[1][_i] : _currentScore = _currentScore + _tempData[2][_i]
					_tempData[1][_i] = 0
				endif
			endif
		endif
	next _i
return



! ==============================================================================
"AddNew":
! ------------------------------------------------------------------------------
	_emptyFieldCount = 0
	gosub "_emptyFieldCount"

	if _emptyFieldCount <> 0 then
		gosub "GetRandomNumber"
		_randomNumber = (ownRandomNumber mod _emptyFieldCount) + 1
		for _i = 1 to 4
			for _j = 1 to 4
				if dataGame[_i][_j] = 0 then 
					_randomNumber = _randomNumber - 1
					if _randomNumber = 0 then
						dataGame[_i][_j] = 2
					endif
				endif
			next _j
		next _i
	endif

	parameters	dataGame = dataGame,
				_emptyFieldCount = _emptyFieldCount
return



! ==============================================================================
"FlipTemp":
! ------------------------------------------------------------------------------
	for _j = 1 to 4
		for _i = 4 to 1 step -1
			PUT(_tempData[_i][_j])
		next _i
	
		for _i = 1 to 4
			_tempData[_i][_j]= GET(1)
		next _i
	next _j
return



! ==============================================================================
"TransposeTemp":
! ------------------------------------------------------------------------------
	for _j = 1 to 4
		for _i = 1 to 4
			PUT(_tempData[_i][_j])
		next _i
	next _j
	
	for _j = 1 to 4
		for _i = 1 to 4
			_tempData[_j][_i]= GET(1)
		next _i
	next _j
return


! ==============================================================================
"GetRandomNumber":
! ------------------------------------------------------------------------------
	if GLOB_INTGUID = "" then 
		guidString = "B7411A05BA1547BBA8CD9F352C00E290"
	else
		guidString = STRSUB (GLOB_INTGUID, 1, 8) + STRSUB (GLOB_INTGUID, 10, 4) + STRSUB (GLOB_INTGUID, 15, 4) + STRSUB (GLOB_INTGUID, 20, 4)+ STRSUB (GLOB_INTGUID, 25, 12)
	endif

	_i = (nMoves mod 32) + 1

	if STRSUB (guidString, _i, 1) = "0" then ownRandomNumber = 0
	if STRSUB (guidString, _i, 1) = "1" then ownRandomNumber = 1
	if STRSUB (guidString, _i, 1) = "2" then ownRandomNumber = 2
	if STRSUB (guidString, _i, 1) = "3" then ownRandomNumber = 3
	if STRSUB (guidString, _i, 1) = "4" then ownRandomNumber = 4
	if STRSUB (guidString, _i, 1) = "5" then ownRandomNumber = 5
	if STRSUB (guidString, _i, 1) = "6" then ownRandomNumber = 6
	if STRSUB (guidString, _i, 1) = "7" then ownRandomNumber = 7
	if STRSUB (guidString, _i, 1) = "8" then ownRandomNumber = 8
	if STRSUB (guidString, _i, 1) = "9" then ownRandomNumber = 9
	if STRSUB (guidString, _i, 1) = "A" then ownRandomNumber = 10
	if STRSUB (guidString, _i, 1) = "B" then ownRandomNumber = 11
	if STRSUB (guidString, _i, 1) = "C" then ownRandomNumber = 12
	if STRSUB (guidString, _i, 1) = "D" then ownRandomNumber = 13
	if STRSUB (guidString, _i, 1) = "E" then ownRandomNumber = 14
	if STRSUB (guidString, _i, 1) = "F" then ownRandomNumber = 15

	nMoves = nMoves + 1
	parameters	nMoves = nMoves,
				ownRandomNumber = ownRandomNumber
return


! ==============================================================================
"CheckChanges":
! ------------------------------------------------------------------------------
	_bChanged = 0
	for _i = 1 to 4
		for _j = 1 to 4
			if _tempData[_i][_j] <> dataGame[_i][_j] then _bChanged = 1
		next _j
	next _i
return

! ==============================================================================
"CheckValidMoves":
! ------------------------------------------------------------------------------
	gosub "moveUp"
	gosub "moveDown"
	gosub "moveLeft"
	gosub "moveRight"
		
	gosub "CheckChanges"

	if not(_bChanged) & _emptyFieldCount = 0 then
		bGameOver = 1
		parameters bGameOver = bGameOver
	endif

return

! ==============================================================================
"_emptyFieldCount":
! ==============================================================================
	_emptyFieldCount = 0

	for _i = 1 to 4
		for _j = 1 to 4
			if dataGame[_i][_j] = 0 then 
				_emptyFieldCount = _emptyFieldCount + 1
			endif
		next _j
	next _i

return

"moveUp":
	gosub "FlipTemp"
	gosub "Gravity"
	gosub "Sum"
	gosub "FlipTemp"
return

"moveDown":
	gosub "Gravity"
	gosub "Sum"
return

"moveLeft":
	gosub "TransposeTemp"
	gosub "FlipTemp"
	gosub "Gravity"
	gosub "Sum"
	gosub "FlipTemp"
	gosub "TransposeTemp"
return

"moveRight":
	gosub "TransposeTemp"
	gosub "Gravity"
	gosub "Sum"
	gosub "TransposeTemp"
return

