if bShowMEP then
	if show_el < EPS then end
	IF gs_detlevel_2D_m < EPS THEN END
	CALL "MEP_m_RequestSystemGlobals" PARAMETERS ALL one_ConID=0 returned_parameters gs_cont_pen, gs_fill_type, gs_fill_pen, gs_back_pen, MEP_cline_type, MEP_cline_pen, show_el
endif
!================================================================================
! Attributes
!================================================================================
vk_type_view = 1 : success = LIBRARYGLOBAL ("Libraryflobals-mep", "vk_type_view", vk_type_view)
pen gs_cont_pen


!================================================================================
! Scale Settings
!================================================================================

call "2dDetailLevel" parameters gs_detlevel_2D 		= gs_detlevel_2D,
								gs_detlevel_2D_m 	= gs_detlevel_2D_m,
								enable2dDetLevels	= 30,
								returned_parameters det2D


!================================================================================
! WC
!================================================================================

DrawingNum = 1
if DrawingNum = 1 then			! --- Top


	! --- Bowl ------------------------------------------------------------------

	drawindex 20

	add2 0, -distanceFromWall * bBowlMove


	if vk_type_view = 2 then
		rect2 -A/2,0,A/2,-B*0.2
		line2 -A/2,0, -A/2, -B+A/2
		line2 A/2,0, A/2, -B+A/2
		ARC2 0, -B+A/2, A/2, 180, 360
	else
		if iWCType = WC_NORMAL then
			if iToiletMounting = FLOOR_MOUNTED then
				if iFloorMountedBowlType = FLOORMOUNTED_TYPE_1 then
					dim floorMountedBowlPolyOperationArray1[20][3]
					call "ToiletBowlTypesMacro" parameters all	A 						= bowlWidth,
																B 						= bowlDepth,
																ZZYZX 					= bowlHeight,
																builtInCistern 			= builtInCistern,
																builtInCisternHeight 	= builtInCisternHeight,
																det2D					= det2D,
																wallOffset				= distanceFromWall * bBowlMove,
																returned_parameters 	floorMountedBowlPolyOperationArray1
				endif
				if iFloorMountedBowlType = FLOORMOUNTED_TYPE_2 then
					dim floorMountedBowlPolyOperationArray2[36][3]
					call "ToiletBowlTypesMacro" parameters all	A 						= bowlWidth,
																B 						= bowlDepth,
																ZZYZX 					= bowlHeight,
																builtInCistern 			= builtInCistern,
																builtInCisternHeight 	= builtInCisternHeight,
																det2D					= det2D,
																wallOffset				= distanceFromWall * bBowlMove,
																returned_parameters 	floorMountedBowlPolyOperationArray2
				endif
				if iFloorMountedBowlType = FLOORMOUNTED_TYPE_3 then
					dim floorMountedBowlPolyOperationArray3[59][3]
					call "ToiletBowlTypesMacro" parameters all	A 						= bowlWidth,
																B 						= bowlDepth,
																ZZYZX 					= bowlHeight,
																builtInCistern 			= builtInCistern,
																builtInCisternHeight 	= builtInCisternHeight,
																det2D					= det2D,
																wallOffset				= distanceFromWall * bBowlMove,
																returned_parameters 	floorMountedBowlPolyOperationArray3
				endif
				if iFloorMountedBowlType = FLOORMOUNTED_TYPE_4 then
					dim floorMountedBowlPolyOperationArray4[20][3]
					call "ToiletBowlTypesMacro" parameters all	A 						= bowlWidth,
																B 						= bowlDepth,
																ZZYZX 					= bowlHeight,
																builtInCistern 			= builtInCistern,
																builtInCisternHeight 	= builtInCisternHeight,
																det2D					= det2D,
																wallOffset				= distanceFromWall * bBowlMove,
																returned_parameters 	floorMountedBowlPolyOperationArray4
				endif
				if iFloorMountedBowlType = FLOORMOUNTED_TYPE_5 then
					dim floorMountedBowlPolyOperationArray5[30][3]
					call "ToiletBowlTypesMacro" parameters all	A 						= bowlWidth,
																B 						= bowlDepth,
																ZZYZX 					= bowlHeight,
																builtInCistern 			= builtInCistern,
																builtInCisternHeight 	= builtInCisternHeight,
																det2D					= det2D,
																wallOffset				= distanceFromWall * bBowlMove,
																returned_parameters 	floorMountedBowlPolyOperationArray5
				endif
				if iFloorMountedBowlType = FLOORMOUNTED_TYPE_6 then
					dim floorMountedBowlPolyOperationArray6[21][3]
					call "ToiletBowlTypesMacro" parameters all	A 						= bowlWidth,
																B 						= bowlDepth,
																ZZYZX 					= bowlHeight,
																builtInCistern 			= builtInCistern,
																builtInCisternHeight 	= builtInCisternHeight,
																det2D					= det2D,
																wallOffset				= distanceFromWall * bBowlMove,
																returned_parameters 	floorMountedBowlPolyOperationArray6
				endif
			endif
	
			if iToiletMounting = WALL_HUNG then
				if iWallHungBowlType = WALLHUNG_TYPE_1 then
					dim wallHungBowlPolyOperationArray1[20][3]
					call "ToiletBowlTypesMacro" parameters all	A 						= bowlWidth,
																B 						= bowlDepth,
																ZZYZX 					= bowlHeight,
																builtInCistern 			= builtInCistern,
																builtInCisternHeight 	= builtInCisternHeight,
																det2D					= det2D,
																returned_parameters 	wallHungBowlPolyOperationArray1
				endif
				if iWallHungBowlType = WALLHUNG_TYPE_2 then
					dim wallHungBowlPolyOperationArray2[44][3]
					call "ToiletBowlTypesMacro" parameters all	A 						= bowlWidth,
																B 						= bowlDepth,
																ZZYZX 					= bowlHeight,
																builtInCistern 			= builtInCistern,
																builtInCisternHeight 	= builtInCisternHeight,
																det2D					= det2D,
																returned_parameters 	wallHungBowlPolyOperationArray2
				endif
				if iWallHungBowlType = WALLHUNG_TYPE_3 then
					dim wallHungBowlPolyOperationArray3[20][3]
					call "ToiletBowlTypesMacro" parameters all	A 						= bowlWidth,
																B 						= bowlDepth,
																ZZYZX 					= bowlHeight,
																builtInCistern 			= builtInCistern,
																builtInCisternHeight 	= builtInCisternHeight,
																det2D					= det2D,
																returned_parameters 	wallHungBowlPolyOperationArray3
				endif
				if iWallHungBowlType = WALLHUNG_TYPE_4 then
					dim wallHungBowlPolyOperationArray4[21][3]
					call "ToiletBowlTypesMacro" parameters all	A 						= bowlWidth,
																B 						= bowlDepth,
																ZZYZX 					= bowlHeight,
																builtInCistern 			= builtInCistern,
																builtInCisternHeight 	= builtInCisternHeight,
																det2D					= det2D,
																returned_parameters 	wallHungBowlPolyOperationArray4
				endif
			endif
		endif
	
		if iWCType = WC_CORNER then
			if iCornerBowlType = CORNER_TYPE_1 then
				dim cornerBowlPolyOperationArray1[21][3]
				call "ToiletBowlTypesMacro" parameters all	A 						= bowlWidth,
															B 						= bowlDepth,
															ZZYZX 					= bowlHeight,
															builtInCistern 			= builtInCistern,
															builtInCisternHeight 	= builtInCisternHeight,
															det2D					= det2D,
															returned_parameters 	cornerBowlPolyOperationArray1
			endif
			if iCornerBowlType = CORNER_TYPE_2 then
				dim cornerBowlPolyOperationArray2[37][3]
				call "ToiletBowlTypesMacro" parameters all	A 						= bowlWidth,
															B 						= bowlDepth,
															ZZYZX 					= bowlHeight,
															builtInCistern 			= builtInCistern,
															builtInCisternHeight 	= builtInCisternHeight,
															det2D					= det2D,
															returned_parameters 	cornerBowlPolyOperationArray2
			endif
			if iCornerBowlType = CORNER_TYPE_3 then
				dim cornerBowlPolyOperationArray3[56][3]
				call "ToiletBowlTypesMacro" parameters all	A 						= bowlWidth,
															B 						= bowlDepth,
															ZZYZX 					= bowlHeight,
															builtInCistern 			= builtInCistern,
															builtInCisternHeight 	= builtInCisternHeight,
															det2D					= det2D,
															returned_parameters 	cornerBowlPolyOperationArray3
			endif
		endif
	
		if iWCType = WC_SQUATTING then
			if iSquattingBowlType = SQUATTING_TYPE_1 then
				dim squattingBowlPolyOperationArray1[9][3]
				call "ToiletBowlTypesMacro" parameters all	A 						= bowlWidth,
															B 						= bowlDepth,
															ZZYZX 					= bowlHeight,
															builtInCistern 			= builtInCistern,
															builtInCisternHeight 	= builtInCisternHeight,
															det2D					= det2D,
															returned_parameters 	squattingBowlPolyOperationArray1
			endif
		endif
		del 1
		
		! --- Flush Method ----------------------------------------------------------
	
		drawindex 40
		
		add2 0, -distanceFromWall * bFlushMove
		
		if iFlushType = CISTERN then
			if not(builtInCistern) then
	
				if iWCType = WC_NORMAL then
					if iCisternType = CISTERN_TYPE_1 then
						dim cisternPolyOperationArray1[42][3]
						call "ToiletCisternTypesMacro" parameters all 	iFlushType 				= CISTERN,
																		A 						= cisternWidth,
																		B 						= cisternDepth,
																		ZZYZX 					= cisternHeight,
																		det2D					= det2D,
																		returned_parameters 	cisternPolyOperationArray1
					endif
					if iCisternType = CISTERN_TYPE_2 then
						dim cisternPolyOperationArray2[28][3]
						call "ToiletCisternTypesMacro" parameters all 	iFlushType 				= CISTERN,
																		A 						= cisternWidth,
																		B 						= cisternDepth,
																		ZZYZX 					= cisternHeight,
																		det2D					= det2D,
																		returned_parameters 	cisternPolyOperationArray2
					endif
					if iCisternType = CISTERN_TYPE_3 then
						dim cisternPolyOperationArray3[21][3]
						call "ToiletCisternTypesMacro" parameters all 	iFlushType 				= CISTERN,
																		A 						= cisternWidth,
																		B 						= cisternDepth,
																		ZZYZX 					= cisternHeight,
																		det2D					= det2D,
																		returned_parameters 	cisternPolyOperationArray3
					endif
					if iCisternType = CISTERN_TYPE_4 then
						dim cisternPolyOperationArray4[20][3]
						call "ToiletCisternTypesMacro" parameters all 	iFlushType 				= CISTERN,
																		A 						= cisternWidth,
																		B 						= cisternDepth,
																		ZZYZX 					= cisternHeight,
																		det2D					= det2D,
																		returned_parameters 	cisternPolyOperationArray4
					endif
					if iCisternType = CISTERN_TYPE_5 then
						dim cisternPolyOperationArray5[21][3]
						call "ToiletCisternTypesMacro" parameters all 	iFlushType 				= CISTERN,
																		A 						= cisternWidth,
																		B 						= cisternDepth,
																		ZZYZX 					= cisternHeight,
																		det2D					= det2D,
																		returned_parameters 	cisternPolyOperationArray5
					endif
				endif
	
				if iWCType = WC_CORNER then
					if iCornerCisternType = CORNER_CISTERN_TYPE_1 then
						dim cornerCisternPolyOperationArray1[22][3]
						call "ToiletCisternTypesMacro" parameters all 	iFlushType 				= CISTERN,
																		A 						= cisternWidth,
																		B 						= cisternDepth,
																		ZZYZX 					= cisternHeight,
																		det2D					= det2D,
																		returned_parameters 	cornerCisternPolyOperationArray1
					endif
					if iCornerCisternType = CORNER_CISTERN_TYPE_2 then
						dim cornerCisternPolyOperationArray2[20][3]
						call "ToiletCisternTypesMacro" parameters all 	iFlushType 				= CISTERN,
																		A 						= cisternWidth,
																		B 						= cisternDepth,
																		ZZYZX 					= cisternHeight,
																		det2D					= det2D,
																		returned_parameters 	cornerCisternPolyOperationArray2
					endif
					if iCornerCisternType = CORNER_CISTERN_TYPE_3 then
						dim cornerCisternPolyOperationArray3[19][3]
						call "ToiletCisternTypesMacro" parameters all 	iFlushType 				= CISTERN,
																		A 						= cisternWidth,
																		B 						= cisternDepth,
																		ZZYZX 					= cisternHeight,
																		det2D					= det2D,
																		returned_parameters 	cornerCisternPolyOperationArray3
					endif
				endif
	
			endif
		endif
	
	
		if iFlushType = ELEVATED_CISTERN then
			if iWCType = WC_NORMAL then
				if iElevatedCisternType = ELEV_CISTERN_TYPE_1 then
					dim elevCisternPolyOperationArray1[42][3]
					call "ToiletCisternTypesMacro" parameters all 	iFlushType 				= ELEVATED_CISTERN,
																	A 						= cisternWidth,
																	B 						= cisternDepth,
																	ZZYZX 					= cisternHeight,
																	det2D					= det2D,
																	returned_parameters 	elevCisternPolyOperationArray1
				endif
				if iElevatedCisternType = ELEV_CISTERN_TYPE_2 then
					dim elevCisternPolyOperationArray2[12][3]
					call "ToiletCisternTypesMacro" parameters all 	iFlushType 				= ELEVATED_CISTERN,
																	A 						= cisternWidth,
																	B 						= cisternDepth,
																	ZZYZX 					= cisternHeight,
																	det2D					= det2D,
																	returned_parameters 	elevCisternPolyOperationArray2
				endif
				if iElevatedCisternType = ELEV_CISTERN_TYPE_3 then
					dim elevCisternPolyOperationArray3[21][3]
					call "ToiletCisternTypesMacro" parameters all 	iFlushType 				= ELEVATED_CISTERN,
																	A 						= cisternWidth,
																	B 						= cisternDepth,
																	ZZYZX 					= cisternHeight,
																	det2D					= det2D,
																	returned_parameters 	elevCisternPolyOperationArray3
				endif
			endif
		endif
	
	
		if iFlushType = IN_WALL_CARRIER then
			if iWCType = WC_NORMAL then
				call "ToiletInWallCarrierTypesMacro" parameters all 	A						= carrierWidth,
																		B 						= carrierDepth,
																		ZZYZX 					= carrierHeight,
																		det2D					= det2D
			endif
			if iWCType = WC_CORNER then
				dim inWallCarrierPolyOperationArray1[4][3]
				call "ToiletInWallCarrierTypesMacro" parameters all 	A						= carrierWidth,
																		B 						= carrierDepth,
																		ZZYZX 					= carrierHeight,
																		det2D					= det2D,
																		returned_parameters		inWallCarrierPolyOperationArray1
			endif
		endif
	
	
		if iFlushType = FLUSHOMETER then
			call "flushometer_m" parameters		gs_detlevel_3D_m	= gs_detlevel_3D_m,
												det2D				= det2D,
												iFlushometerType	= iFlushometerType,
												gs_resol			= gs_resol,
												gs_shadow			= gs_shadow,
												yTapPos				= 0.05,
												zTapPos				= waterConnectionHeight-gs_seat_height,
												matFlushometer		= gs_pipe_mat,
												matSensor			= matSensor,
												gs_cont_pen			= gs_cont_pen
		endif
	
		del 1
	endif
	
	! --- Minimal Space ---------------------------------------------------------

	drawindex 10

	! --- Minimal Space Bounding Rectangle Size ---

	minSpaceA = EPS
	minSpaceB = EPS
	if iWCType = WC_NORMAL then
		minSpaceA = bowlWidth + EPS
		minSpaceB = bowlDepth + EPS
	endif

	if iWCType = WC_CORNER then
		if iFlushType <> IN_WALL_CARRIER then
			if iCornerBowlType = CORNER_TYPE_1 then
				scalefactor = 0.40278
				b_offset = scalefactor*bowlWidth
			endif

			if iCornerBowlType = CORNER_TYPE_2 then
				scalefactor = 0.46532
				b_offset = scalefactor*bowlWidth
			endif

			if iCornerBowlType = CORNER_TYPE_3 then
				scalefactor = (bowlDepth-0.105/0.350*bowlWidth/2)/bowlDepth * 0.95025
				yoffset = -(0.105/0.350*bowlWidth)/2 - (0.029/0.560*bowlDepth)*scalefactor
				b_offset = -(yoffset+(0.029/0.560*bowlDepth)*scalefactor)
			endif

			minSpaceA = bowlWidth + EPS
			minSpaceB = bowlDepth  + b_offset + EPS
		else
			minSpaceA = bowlWidth + EPS
			minSpaceB = bowlDepth + carrierWidth/2 + EPS
		endif
	endif

	if iWCType = WC_SQUATTING then
		minSpaceA = bowlWidth + EPS
		minSpaceB = bowlDepth + EPS
	endif

	reqBMinSpace = 0
	if MSFront > EPS or MSSide > EPS or MSSide2 > EPS then
		call "fa_minimalspace" parameters all 	MSType 	= 0,
								returned_parameters reqBMinSpace,
													MSFillType,
													MSFillPen,
													MSFillBackPen,
													MSContLineType,
													MSContLinePen
	endif

	if reqBMinSpace <> 0 then
		fill MSFillType
		line_type MSContLineType
		pen MSContLinePen

		add2 0, -distanceFromWall * bBowlMove
		gosub "MINIMAL_SPACE_POLYGON"
		del 1
	endif

	! --- Connections - Projection of 3D ----------------------------------------

	drawindex 10

	if bShowMEP and vk_type_view = 1 then
		fill gs_fill_type

		pen gs_cont_pen
		if gs_fill_pen then pen gs_fill_pen
		project2{3} 3, 270, 3+32, 4, gs_back_pen, 0, 0, 0, parameters gs_detlevel_3D_m = DETLEV_3D_SIMPLE, show3D = 0
		pen gs_cont_pen
		project2{3} 3, 270, 2, 8, 0, 0, 0, 0, parameters gs_detlevel_3D_m = DETLEV_3D_SIMPLE, show3D = 0
	endif

endif
!================================================================================
! Connections
!================================================================================

if bShowMEP then

	pen gs_cont_pen

	! --- Other Views -----------------------------------------------------------

	rot2 -SYMB_ROTANGLE * (DrawingNum > 1 and not(SYMB_MIRRORED))+SYMB_ROTANGLE * (DrawingNum > 1 and SYMB_MIRRORED)

	if DrawingNum = 2 then project2 -3,  90, 						2	! Bottom
	if DrawingNum = 3 then project2  4, 270, 						2	! Front
	if DrawingNum = 4 then project2  4,  90, 						2	! Back
	if DrawingNum = 5 then project2  4, 180*(SYMB_MIRRORED), 	2	! Right
	if DrawingNum = 6 then project2  4, 180*not(SYMB_MIRRORED), 	2	! Left

	if DirEffluent_ID = EFFLUENT_BACK then
		ConEdit_2 = 1
	else
		ConEdit_2 = 3
		if iWCType = WC_NORMAL and iToiletMounting = FLOOR_MOUNTED and iFloorMountedBowlType = FLOORMOUNTED_TYPE_2 then ConEdit_2 = 0
	endif

	! --- Connections -----------------------------------------------------------

	call "MEP_m_ConnectionsACL_4" parameters 	SetProgram 				= SetProgram,
												ui_current_con 			= ui_current_con,
												MEP_NumberConnections 	= MEP_NumberConnections,
												MEP_NumConnectionData 	= gs_Connections,
												gs_AddConnections 		= gs_AddConnections,
												DrawingNum 				= DrawingNum,
												MEP_InsShow 			= 0,
												MEP_cline_show 			= 0,
												gs_cont_pen 			= gs_cont_pen,
												gs_fill_type 			= gs_fill_type,
												gs_fill_pen 			= gs_fill_pen,
												gs_back_pen 			= gs_back_pen,
												ConPosX_1 				= ConPosX_1,
												ConPosY_1 				= ConPosY_1 - (ConWidth_2/2+0.030)*(iWCType = WC_CORNER and iFlushType = NONEFLUSH),
												ConLength_1 			= ConLength_1,
												ConShow_1 				= 0,
												ConEdit_1 				= 1,
												ConPosX_2 				= ConPosX_2,
												ConPosY_2 				= ConPosY_2 - (ConWidth_2/2+0.030)*(iWCType = WC_CORNER and DirEffluent_ID = EFFLUENT_BACK and iFlushType <> IN_WALL_CARRIER),
												ConLength_2 			= ConLength_2,
												ConShow_2 				= 0,
												ConEdit_2 				= ConEdit_2

	del 1
endif



!================================================================================
end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end
!================================================================================




!================================================================================
"MINIMAL_SPACE_POLYGON":
!================================================================================
	msUNID = 3000

	if iWCType = WC_CORNER then
		HOTSPOT2 minSpaceA/2+MSSide2, -minSpaceA/2-MSSide2,	msUNID: msUNID=msUNID+1
		HOTSPOT2 -minSpaceA/2-MSSide, -minSpaceB-MSFront,	msUNID: msUNID=msUNID+1
		HOTSPOT2  minSpaceA/2+MSSide2, -minSpaceB-MSFront,	msUNID: msUNID=msUNID+1
		HOTSPOT2  -minSpaceA/2-MSSide, -minSpaceA/2-MSSide, msUNID: msUNID=msUNID+1
	else
		mul2 -1, 1
		add2 -minSpaceA/2, -minSpaceB
		HOTSPOT2 -MSSide2,			 -MSFront, 			msUNID: msUNID=msUNID+1
		HOTSPOT2 -MSSide2,			 minSpaceB + distanceFromWall * bBowlMove, 	msUNID: msUNID=msUNID+1
		HOTSPOT2  minSpaceA+MSSide,	 -MSFront, 			msUNID: msUNID=msUNID+1
		HOTSPOT2  minSpaceA+MSSide,	 minSpaceB + distanceFromWall * bBowlMove, 	msUNID: msUNID=msUNID+1
		HOTSPOT2  minSpaceA/2,		 -MSFront, 			msUNID: msUNID=msUNID+1
		del 2
	endif


	! --- Initialize PolyOperations Add-On ------------------------------------------

	ch = INITADDONSCOPE ("PolyOperations", "", "")


	! --- First Cut -----------------------------------------------------------------

	! --- Creating polygon containers ---

	PREPAREFUNCTION ch, "CreateContainer", "SourceContainer1", ""
	PREPAREFUNCTION ch, "CreateContainer", "DestinationContainer1", ""

	PREPAREFUNCTION ch, "SetSourceContainer",		"SourceContainer1", ""
	PREPAREFUNCTION ch, "SetDestinationContainer",	"DestinationContainer1", ""

	! --- Set input polygon 1 - Bounding Box ---

	if iWCType = WC_NORMAL or iWCType = WC_SQUATTING then
		nVertices1 = 4
		dim vertArr1[][]
		vertArr1[1][1] = -(minSpaceA/2 + MSSide + EPS)
		vertArr1[1][2] = - EPS + distanceFromWall * bBowlMove
		vertArr1[1][3] =   0

		vertArr1[2][1] = -(minSpaceA/2 + MSSide + EPS)
		vertArr1[2][2] = -(minSpaceB + MSFront + EPS)
		vertArr1[2][3] =   0

		vertArr1[3][1] =   minSpaceA/2 + MSSide2 + EPS
		vertArr1[3][2] = -(minSpaceB + MSFront + EPS)
		vertArr1[3][3] =   0

		vertArr1[4][1] =  minSpaceA/2 + MSSide2 + EPS
		vertArr1[4][2] = -EPS + distanceFromWall * bBowlMove
		vertArr1[4][3] =  0

		nContours1 = 1
		dim contArr1[]
		contArr1[1] = 5

		defaultInhEdgeInfo	= 0
		dim inhEdgeInfos1[]
		inhEdgeInfos1[1] = -2
		inhEdgeInfos1[2] = -3
		inhEdgeInfos1[3] = -4
		inhEdgeInfos1[4] = -5
	endif

	if iWCType = WC_CORNER then
		nVertices1 = 5
		dim vertArr1[][]

		vertArr1[1][1] = -(minSpaceA/2 + MSSide)
		vertArr1[1][2] = -(minSpaceB + MSFront)
		vertArr1[1][3] =  0

		vertArr1[2][1] = -(minSpaceA/2 + MSSide)
		vertArr1[2][2] = -(minSpaceA/2 + MSSide)
		vertArr1[2][3] = 0

		vertArr1[3][1] = 0
		vertArr1[3][2] = 0
		vertArr1[3][3] = 0

		vertArr1[4][1] =  minSpaceA/2 + MSSide2
		vertArr1[4][2] = -(minSpaceA/2 + MSSide2)
		vertArr1[4][3] =  0

		vertArr1[5][1] =  minSpaceA/2 + MSSide2
		vertArr1[5][2] =  -(minSpaceB + MSFront)
		vertArr1[5][3] =  0

		nContours1 = 1
		dim contArr1[]
		contArr1[1] = 6

		defaultInhEdgeInfo	= 0
		dim inhEdgeInfos1[]
		inhEdgeInfos1[1] = -2
		inhEdgeInfos1[2] = -3
		inhEdgeInfos1[3] = -4
		inhEdgeInfos1[4] = -5
		inhEdgeInfos1[5] = -6
	endif

	PREPAREFUNCTION ch, "Store", "poly1", nVertices1, nContours1, vertArr1, contArr1,
		defaultInhEdgeInfo, inhEdgeInfos1

	! --- Set input polygon 2 - Bowl ---

	if iWCType = WC_NORMAL then
		if iToiletMounting = FLOOR_MOUNTED then
			if iFloorMountedBowlType = FLOORMOUNTED_TYPE_1 then nVertices2 = vardim1(floorMountedBowlPolyOperationArray1)
			if iFloorMountedBowlType = FLOORMOUNTED_TYPE_2 then nVertices2 = vardim1(floorMountedBowlPolyOperationArray2)
			if iFloorMountedBowlType = FLOORMOUNTED_TYPE_3 then nVertices2 = vardim1(floorMountedBowlPolyOperationArray3)
			if iFloorMountedBowlType = FLOORMOUNTED_TYPE_4 then nVertices2 = vardim1(floorMountedBowlPolyOperationArray4)
			if iFloorMountedBowlType = FLOORMOUNTED_TYPE_5 then nVertices2 = vardim1(floorMountedBowlPolyOperationArray5)
			if iFloorMountedBowlType = FLOORMOUNTED_TYPE_6 then nVertices2 = vardim1(floorMountedBowlPolyOperationArray6)
		endif

		if iToiletMounting = WALL_HUNG then
			if iWallHungBowlType = WALLHUNG_TYPE_1 then nVertices2 = vardim1(wallHungBowlPolyOperationArray1)
			if iWallHungBowlType = WALLHUNG_TYPE_2 then nVertices2 = vardim1(wallHungBowlPolyOperationArray2)
			if iWallHungBowlType = WALLHUNG_TYPE_3 then nVertices2 = vardim1(wallHungBowlPolyOperationArray3)
			if iWallHungBowlType = WALLHUNG_TYPE_4 then nVertices2 = vardim1(wallHungBowlPolyOperationArray4)
		endif
	endif

	if iWCType = WC_CORNER then
		if iCornerBowlType = CORNER_TYPE_1 then nVertices2 = vardim1(cornerBowlPolyOperationArray1)
		if iCornerBowlType = CORNER_TYPE_2 then nVertices2 = vardim1(cornerBowlPolyOperationArray2)
		if iCornerBowlType = CORNER_TYPE_3 then nVertices2 = vardim1(cornerBowlPolyOperationArray3)
	endif

	if iWCType = WC_SQUATTING then
		if iSquattingBowlType = SQUATTING_TYPE_1 then nVertices2 = vardim1(squattingBowlPolyOperationArray1)
	endif


	dim vertArr2[][3]
	for i=1 to nVertices2
		if iWCType = WC_NORMAL then
			if iToiletMounting = FLOOR_MOUNTED then
				if iFloorMountedBowlType = FLOORMOUNTED_TYPE_1 then
					vertArr2[i][1] = floorMountedBowlPolyOperationArray1[i][1]
					vertArr2[i][2] = floorMountedBowlPolyOperationArray1[i][2]
					vertArr2[i][3] = floorMountedBowlPolyOperationArray1[i][3]
				endif
				if iFloorMountedBowlType = FLOORMOUNTED_TYPE_2 then
					vertArr2[i][1] = floorMountedBowlPolyOperationArray2[i][1]
					vertArr2[i][2] = floorMountedBowlPolyOperationArray2[i][2]
					vertArr2[i][3] = floorMountedBowlPolyOperationArray2[i][3]
				endif
				if iFloorMountedBowlType = FLOORMOUNTED_TYPE_3 then
					vertArr2[i][1] = floorMountedBowlPolyOperationArray3[i][1]
					vertArr2[i][2] = floorMountedBowlPolyOperationArray3[i][2]
					vertArr2[i][3] = floorMountedBowlPolyOperationArray3[i][3]
				endif
				if iFloorMountedBowlType = FLOORMOUNTED_TYPE_4 then
					vertArr2[i][1] = floorMountedBowlPolyOperationArray4[i][1]
					vertArr2[i][2] = floorMountedBowlPolyOperationArray4[i][2]
					vertArr2[i][3] = floorMountedBowlPolyOperationArray4[i][3]
				endif
				if iFloorMountedBowlType = FLOORMOUNTED_TYPE_5 then
					vertArr2[i][1] = floorMountedBowlPolyOperationArray5[i][1]
					vertArr2[i][2] = floorMountedBowlPolyOperationArray5[i][2]
					vertArr2[i][3] = floorMountedBowlPolyOperationArray5[i][3]
				endif
				if iFloorMountedBowlType = FLOORMOUNTED_TYPE_6 then
					vertArr2[i][1] = floorMountedBowlPolyOperationArray6[i][1]
					vertArr2[i][2] = floorMountedBowlPolyOperationArray6[i][2]
					vertArr2[i][3] = floorMountedBowlPolyOperationArray6[i][3]
				endif
			endif

			if iToiletMounting = WALL_HUNG then
				if iWallHungBowlType = WALLHUNG_TYPE_1 then
					vertArr2[i][1] = wallHungBowlPolyOperationArray1[i][1]
					vertArr2[i][2] = wallHungBowlPolyOperationArray1[i][2]
					vertArr2[i][3] = wallHungBowlPolyOperationArray1[i][3]
				endif
				if iWallHungBowlType = WALLHUNG_TYPE_2 then
					vertArr2[i][1] = wallHungBowlPolyOperationArray2[i][1]
					vertArr2[i][2] = wallHungBowlPolyOperationArray2[i][2]
					vertArr2[i][3] = wallHungBowlPolyOperationArray2[i][3]
				endif
				if iWallHungBowlType = WALLHUNG_TYPE_3 then
					vertArr2[i][1] = wallHungBowlPolyOperationArray3[i][1]
					vertArr2[i][2] = wallHungBowlPolyOperationArray3[i][2]
					vertArr2[i][3] = wallHungBowlPolyOperationArray3[i][3]
				endif
				if iWallHungBowlType = WALLHUNG_TYPE_4 then
					vertArr2[i][1] = wallHungBowlPolyOperationArray4[i][1]
					vertArr2[i][2] = wallHungBowlPolyOperationArray4[i][2]
					vertArr2[i][3] = wallHungBowlPolyOperationArray4[i][3]
				endif
			endif
		endif

		if iWCType = WC_CORNER then
			if iCornerBowlType = CORNER_TYPE_1 then
				vertArr2[i][1] = cornerBowlPolyOperationArray1[i][1]
				vertArr2[i][2] = cornerBowlPolyOperationArray1[i][2]
				vertArr2[i][3] = cornerBowlPolyOperationArray1[i][3]
			endif
			if iCornerBowlType = CORNER_TYPE_2 then
				vertArr2[i][1] = cornerBowlPolyOperationArray2[i][1]
				vertArr2[i][2] = cornerBowlPolyOperationArray2[i][2]
				vertArr2[i][3] = cornerBowlPolyOperationArray2[i][3]
			endif
			if iCornerBowlType = CORNER_TYPE_3 then
				vertArr2[i][1] = cornerBowlPolyOperationArray3[i][1]
				vertArr2[i][2] = cornerBowlPolyOperationArray3[i][2]
				vertArr2[i][3] = cornerBowlPolyOperationArray3[i][3]
			endif
		endif

		if iWCType = WC_SQUATTING then
			if iSquattingBowlType = SQUATTING_TYPE_1 then
				vertArr2[i][1] = squattingBowlPolyOperationArray1[i][1]
				vertArr2[i][2] = squattingBowlPolyOperationArray1[i][2]
				vertArr2[i][3] = squattingBowlPolyOperationArray1[i][3]
			endif
		endif
	next i

	nContours2 = 1
	dim contArr2[]
	contArr2[1] = nVertices2+1

	defaultInhEdgeInfo = 0
	dim inhEdgeInfos2[]
	for i=1 to nVertices2
		inhEdgeInfos2[i] = 1
	next i

	PREPAREFUNCTION ch, "Store", "poly2", nVertices2, nContours2, vertarr2, contArr2,
		defaultInhEdgeInfo, inhEdgeInfos2

	! --- Substract polygons ---

	dim resPolyIDArray[]	! Array to receive polygon IDs (name strings) created by
							! the next polygon operation
	numPoly = CALLFUNCTION (ch, "poly1 - poly2", "", resPolyIDArray)

	! --- Draw resulting polygons ---
	if (iFlushType = IN_WALL_CARRIER and iWCType = WC_NORMAL) or \
	   iFlushType = FLUSHOMETER 							  or \
	   iFlushType = NONEFLUSH 								  or \
	   iWCType = WC_SQUATTING								  then
			for i = 1 to numPoly
				polygonID = resPolyIDArray[i]
				gosub "GET_GDL_POLYGON"	! Get one polygon contour data (without contours)

				if NSP > 0 then
					poly2_b NSP/3, 2+64, MSFillPen, MSFillBackPen,
								get(NSP)
				endif
			next i
	endif

	if iWCType = WC_NORMAL or iWCType = WC_SQUATTING then
		line2 vertArr1[1][1],vertArr1[1][2], vertArr1[4][1],vertArr1[4][2]
		line2 vertArr1[2][1],vertArr1[2][2], vertArr1[1][1],vertArr1[1][2]
		line2 vertArr1[3][1],vertArr1[3][2], vertArr1[2][1],vertArr1[2][2]
		line2 vertArr1[4][1],vertArr1[4][2], vertArr1[3][1],vertArr1[3][2]
	endif

	if iWCType = WC_CORNER then
		line2 vertArr1[5][1],vertArr1[5][2], vertArr1[1][1],vertArr1[1][2]
		line2 vertArr1[4][1],vertArr1[4][2], vertArr1[5][1],vertArr1[5][2]
		line2 vertArr1[3][1],vertArr1[3][2], vertArr1[4][1],vertArr1[4][2]
		line2 vertArr1[2][1],vertArr1[2][2], vertArr1[3][1],vertArr1[3][2]
		line2 vertArr1[1][1],vertArr1[1][2], vertArr1[2][1],vertArr1[2][2]
	endif

	! --- Result Transfer into Second Cut -------------------------------------------

	if iWCType = WC_NORMAL or iWCType = WC_CORNER then
		if iFlushType = CISTERN 									or \
		   iFlushType = ELEVATED_CISTERN 							or \
		   iFlushType = IN_WALL_CARRIER and iWCType = WC_CORNER 	then

			! --- Result Transfer into source container ---

			lastDestContainer = "DestinationContainer1"
			PREPAREFUNCTION ch, "SetSourceContainer", lastDestContainer, ""

			! --- Creating second destination container ---

			PREPAREFUNCTION ch, "CreateContainer", "DestinationContainer2", ""
			PREPAREFUNCTION ch, "SetDestinationContainer",	"DestinationContainer2", ""


			! --- Second Cut ----------------------------------------------------------------

			! --- Set input polygon 3 - Cistern ---

			if iWCType = WC_NORMAL then
				if iFlushType = CISTERN then
					if iCisternType = CISTERN_TYPE_1 then nVertices3 = vardim1(cisternPolyOperationArray1)
					if iCisternType = CISTERN_TYPE_2 then nVertices3 = vardim1(cisternPolyOperationArray2)
					if iCisternType = CISTERN_TYPE_3 then nVertices3 = vardim1(cisternPolyOperationArray3)
					if iCisternType = CISTERN_TYPE_4 then nVertices3 = vardim1(cisternPolyOperationArray4)
					if iCisternType = CISTERN_TYPE_5 then nVertices3 = vardim1(cisternPolyOperationArray5)
				endif

				if iFlushType = ELEVATED_CISTERN then
					if iElevatedCisternType = ELEV_CISTERN_TYPE_1 then nVertices3 = vardim1(elevCisternPolyOperationArray1)
					if iElevatedCisternType = ELEV_CISTERN_TYPE_2 then nVertices3 = vardim1(elevCisternPolyOperationArray2)
					if iElevatedCisternType = ELEV_CISTERN_TYPE_3 then nVertices3 = vardim1(elevCisternPolyOperationArray3)
				endif
			endif

			if iWCType = WC_CORNER then
				if iFlushType = CISTERN then
					if iCornerCisternType = CORNER_CISTERN_TYPE_1 then nVertices3 = vardim1(cornerCisternPolyOperationArray1)
					if iCornerCisternType = CORNER_CISTERN_TYPE_2 then nVertices3 = vardim1(cornerCisternPolyOperationArray2)
					if iCornerCisternType = CORNER_CISTERN_TYPE_3 then nVertices3 = vardim1(cornerCisternPolyOperationArray3)
				endif
				if iFlushType = IN_WALL_CARRIER then
					nVertices3 = vardim1(inWallCarrierPolyOperationArray1)
				endif
			endif

			dim vertArr3[][3]
			for i=1 to nVertices3
				if iWCType = WC_NORMAL then
					if iFlushType = CISTERN then
						if iCisternType = CISTERN_TYPE_1 then
							vertArr3[i][1] = cisternPolyOperationArray1[i][1]
							vertArr3[i][2] = cisternPolyOperationArray1[i][2]
							vertArr3[i][3] = cisternPolyOperationArray1[i][3]
						endif
						if iCisternType = CISTERN_TYPE_2 then
							vertArr3[i][1] = cisternPolyOperationArray2[i][1]
							vertArr3[i][2] = cisternPolyOperationArray2[i][2]
							vertArr3[i][3] = cisternPolyOperationArray2[i][3]
						endif
						if iCisternType = CISTERN_TYPE_3 then
							vertArr3[i][1] = cisternPolyOperationArray3[i][1]
							vertArr3[i][2] = cisternPolyOperationArray3[i][2]
							vertArr3[i][3] = cisternPolyOperationArray3[i][3]
						endif
						if iCisternType = CISTERN_TYPE_4 then
							vertArr3[i][1] = cisternPolyOperationArray4[i][1]
							vertArr3[i][2] = cisternPolyOperationArray4[i][2]
							vertArr3[i][3] = cisternPolyOperationArray4[i][3]
						endif
						if iCisternType = CISTERN_TYPE_5 then
							vertArr3[i][1] = cisternPolyOperationArray5[i][1]
							vertArr3[i][2] = cisternPolyOperationArray5[i][2]
							vertArr3[i][3] = cisternPolyOperationArray5[i][3]
						endif
					endif

					if iFlushType = ELEVATED_CISTERN then
						if iElevatedCisternType = ELEV_CISTERN_TYPE_1 then
							vertArr3[i][1] = elevCisternPolyOperationArray1[i][1]
							vertArr3[i][2] = elevCisternPolyOperationArray1[i][2]
							vertArr3[i][3] = elevCisternPolyOperationArray1[i][3]
						endif
						if iElevatedCisternType = ELEV_CISTERN_TYPE_2 then
							vertArr3[i][1] = elevCisternPolyOperationArray2[i][1]
							vertArr3[i][2] = elevCisternPolyOperationArray2[i][2]
							vertArr3[i][3] = elevCisternPolyOperationArray2[i][3]
						endif
						if iElevatedCisternType = ELEV_CISTERN_TYPE_3 then
							vertArr3[i][1] = elevCisternPolyOperationArray3[i][1]
							vertArr3[i][2] = elevCisternPolyOperationArray3[i][2]
							vertArr3[i][3] = elevCisternPolyOperationArray3[i][3]
						endif
					endif
				endif

				if iWCType = WC_CORNER then
					if iFlushType = CISTERN then
						if iCornerCisternType = CORNER_CISTERN_TYPE_1 then
							vertArr3[i][1] = cornerCisternPolyOperationArray1[i][1]
							vertArr3[i][2] = cornerCisternPolyOperationArray1[i][2]
							vertArr3[i][3] = cornerCisternPolyOperationArray1[i][3]
						endif
						if iCornerCisternType = CORNER_CISTERN_TYPE_2 then
							vertArr3[i][1] = cornerCisternPolyOperationArray2[i][1]
							vertArr3[i][2] = cornerCisternPolyOperationArray2[i][2]
							vertArr3[i][3] = cornerCisternPolyOperationArray2[i][3]
						endif
						if iCornerCisternType = CORNER_CISTERN_TYPE_3 then
							vertArr3[i][1] = cornerCisternPolyOperationArray3[i][1]
							vertArr3[i][2] = cornerCisternPolyOperationArray3[i][2]
							vertArr3[i][3] = cornerCisternPolyOperationArray3[i][3]
						endif
					endif

					if iFlushType = IN_WALL_CARRIER then
						vertArr3[i][1] = inWallCarrierPolyOperationArray1[i][1]
						vertArr3[i][2] = inWallCarrierPolyOperationArray1[i][2]
						vertArr3[i][3] = inWallCarrierPolyOperationArray1[i][3]
					endif
				endif
			next i

			nContours3 = 1
			dim contArr3[]
			contArr3[1] = nVertices3+1

			defaultInhEdgeInfo = 0
			dim inhEdgeInfos3[]
			for i=1 to nVertices3
				inhEdgeInfos3[i] = 1
			next i

			PREPAREFUNCTION ch, "Store", "poly3", nVertices3, nContours3, vertarr3, contArr3,
				defaultInhEdgeInfo, inhEdgeInfos3


			! --- Substract polygons ---

			dim resPolyIDArray2[]	! Array to receive polygon IDs (name strings) created by
									! the next polygon operation
			numPoly2 = 0
			for i = 1 to numPoly
				numPoly2 = CALLFUNCTION (ch, resPolyIDArray[i] + " - poly3", "", resPolyIDArray2)
			next i

			! --- Draw resulting polygons ---
			for i = 1 to numPoly2
				polygonID = resPolyIDArray2[i]
				gosub "GET_GDL_POLYGON"	! Get one polygon contour data (without contours)

				if NSP > 0 then
					poly2_b NSP/3, 2+64, MSFillPen, MSFillBackPen,
								get(NSP)
				endif
			next i

		endif
	endif

	! --- Delete Containers ---------------------------------------------------------

	PREPAREFUNCTION ch, "DeleteContainer", "SourceContainer1", ""
	PREPAREFUNCTION ch, "DeleteContainer", "DestinationContainer1", ""

	if iWCType = WC_NORMAL or iWCType = WC_CORNER then
		if iFlushType = CISTERN 			or \
		   iFlushType = ELEVATED_CISTERN 	then
				PREPAREFUNCTION ch, "DeleteContainer", "DestinationContainer2", ""
		endif
	endif


	! --- Dispose PolyOperations Add-On ---------------------------------------------

	CLOSEADDONSCOPE ch

return



!================================================================================
"GET_GDL_POLYGON":
!--------------------------------------------------------------------------------
! Input variables:
!	ch:				Channel ID
!	polygonID:		Polygon ID
!
! Returned variables:
!	GDL stack:			GDL polygon
!================================================================================

	dim resVertices[]
	numVertices = CALLFUNCTION (ch, "GetVertices", polygonID, resVertices)
	numVertices = numVertices / 3

	dim contArr[]
	numContours = CALLFUNCTION (ch, "GetContourEnds", polygonID, contArr)

	for contIndex = 1 to numContours

		if contIndex = 1 then
			begIdx = 0
		else
			begIdx = contArr[contIndex] - 1
		endif
		if contIndex = numContours then
			endIdx = numVertices - 1
		else
			endIdx = contArr[contIndex + 1] - 2
		endif

		bClosed = 0
		bStartWithLast = 0

		index = endIdx * 3
		lastVertX = resVertices[index + 1]
		lastVertY = resVertices[index + 2]
		lastVertA = resVertices[index + 3]

		if abs(lastVertA) > EPS then
			put lastVertX, lastVertY, 1
			bStartWithLast = 1
		endif

		for vertIndex = begIdx to endIdx
			index = vertIndex * 3
			actVertX = resVertices[index + 1]
			actVertY = resVertices[index + 2]
			actVertA = resVertices[index + 3]

			if vertIndex = begIdx then
				if bStartWithLast then
					ac2gdl_spx = lastVertX
					ac2gdl_spy = lastVertY
				else
					ac2gdl_spx = actVertX
					ac2gdl_spy = actVertY
				endif
			endif

			if abs(lastVertA) > EPS then
				ac2gdl_mx = (actVertX + lastVertX) / 2
				ac2gdl_my = (actVertY + lastVertY) / 2
				ac2gdl_ratio = 1 / 2 / tan (lastVertA / 2)

				ac2gdl_cx = ac2gdl_mx - ac2gdl_ratio * (actVertY - lastVertY)	! Arc center
				ac2gdl_cy = ac2gdl_my + ac2gdl_ratio * (actVertX - lastVertX)

				put ac2gdl_cx,	ac2gdl_cy,	900,
					0,			lastVertA,	4001
			endif

			if vertIndex > begIdx & abs(ac2gdl_spx - actVertX) < EPS & abs(ac2gdl_spy - actVertY) < EPS then
				put actVertX, actVertY, -1
				bClosed = 1
			else
				if vertIndex < endIdx | not(bStartWithLast) then
					put actVertX, actVertY, 1
				endif
			endif

			lastVertX = actVertX
			lastVertY = actVertY
			lastVertA = actVertA

		next vertIndex

		if not(bClosed) then	! Close the polygon if it has holes
			put ac2gdl_spx, ac2gdl_spy, -1
		endif

	next contIndex
return

