
! ==============================================================================
! showerCabin_m
! ==============================================================================


unID=GS_HotspotUnIDBegin

if gs_detlevel_3D_m=0 then end GS_HotspotUnIDBegin

if not(gs_shadow) then SHADOW OFF

pen gs_cont_pen

if (GLOB_CONTEXT > 20 & GLOB_CONTEXT < 40) | gs_detlevel_3D_m = 1 | gs_detlevel_3D_m = 3 then
	gs_resol = 12
else
	gs_resol = gs_resol
endif
resol gs_resol

bFramedPanel = 2 - iPanelType		! Framed Panel = 1, Fully Panel = 2
if bFramedPanel then panelThk = frameThk else panelThk = glassThk
frameWidth = cabinFrameWidth
frameWidthL = frameWidth
frameWidthR = frameWidth
frameWidthB = frameWidth
frameWidthT = frameWidth
frameMaskR = 0
framemaskR2 = 0
frameMaskL = 0
withoutGlas = 0
panelHeight = ZZYZX
cutAngleL = 0
cutAngleR = 0
cutMaskR = 0
iStiffL = 0
iStiffR = 0
bCeilingStiffL = 0
bCeilingStiffR = 0
stiffAngle = 0
stiffType = 0
hingeWidth = 0.04
hingeHeight = 0.04
hingeThk = 0.003
hingeAngleL = 0
hingeAngleR = 0
ceilingThk = 0.02
bHandle = 0
if iHandleType = 8 then gs_knob_type_m = 0
if iHandleType = 1 then gs_knob_type_m = 9
if iHandleType = 2 then gs_knob_type_m = 10
if iHandleType = 3 then gs_knob_type_m = 1
if iHandleType = 4 then gs_knob_type_m = 2
if iHandleType = 5 then gs_knob_type_m = 4
if iHandleType = 6 then gs_knob_type_m = 5
if iHandleType = 7 then gs_knob_type_m = 8
if iHandleType = 2 then
	knob_size = 0.3
else
	knob_size = 0.1
endif
if iHandleType > 4 then zHandlePos = knob_size/2 else zHandlePos = 0

bWallL = 0		! Left Wall
bWallR = 0		! Right Wall
bWallB = 0		! Back Wall
if iCabinType = CABINTYPE_ALCOVE then
	bWallL = 1		! Left Wall
	bWallR = 1		! Right Wall
	bWallB = 1		! Back Wall
endif
if iCabinType = CABINTYPE_CORNER then
	bWallL = 1		! Left Wall
	bWallB = 1		! Back Wall
endif
if iCabinType = CABINTYPE_PENINSULAR then
	bWallB = 1		! Back Wall
endif

if iCabinForm = CABINFORM_SQUAREDALCOVE | iCabinForm = CABINFORM_SQUAREDCORNER | iCabinForm = CABINFORM_SQUAREDPENINSULAR | iCabinForm = CABINFORM_SQUARE then			! Square
	if not(bWallL) then 		! Left Panel
		panelWidth = B
		cutAngleL = 45 * not(bWallB)
		cutAngleR = 45
		xPanelPos = -A/2
		yPanelPos = B/2
		panelRotation = -90
		iStiffL = 1 + bWallB
		iStiffR = 0
		bCeilingStiffL = 1
		bCeilingStiffR = 0
		gosub "Straight_Panel"
	endif

	if not(bWallB) then			! Back Panel
		panelWidth = A
		cutAngleL = 45
		cutAngleR = 45
		xPanelPos = A/2
		yPanelPos = B/2
		panelRotation = -180
		iStiffL = 0
		iStiffR = 0
		bCeilingStiffL = 0
		bCeilingStiffR = 0
		gosub "Straight_Panel"
	endif

	if not(bWallR) then			! Right Panel
		if iDoorType = DOORTYPE_CORNERSLIDING then
			panelWidth =  sidePanelWidthR -cabinFrameWidth/2
			yPanelPos = B/2 - sidePanelWidthR + cabinFrameWidth/2
			cutAngleL = 0
			frameWidthL = cabinFrameWidth/2
			frameMaskL = 7
		else
			panelWidth = B
			yPanelPos = -B/2
			cutAngleL = 45
		endif
		cutAngleR = 45 * not(bWallB)
		xPanelPos = A/2
		panelRotation = 90
		iStiffL = 0
		iStiffR = 1 + bWallB
		bCeilingStiffL = 0
		bCeilingStiffR = 1
		gosub "Straight_Panel"
	endif
	if iDoorType = DOORTYPE_CORNERSLIDING then
		panelWidth =  B - sidePanelWidthR + cabinFrameWidth/2
		cutAngleL = 45
		cutAngleR = 0
		xPanelPos = A/2
		yPanelPos = -B/2
		panelRotation = 90
		frameWidthL = 0
		frameWidthR = cabinFrameWidth/2
		frameMaskR = 7
		withoutGlas = 1
		iStiffR = 0
		gosub "Straight_Panel"
	endif

	if bFramedPanel then		! Front Panel
		panelWidth = A - (bSidePanelL * (sidePanelWidthL - cabinFrameWidth/2)) - (bSidePanelR * (sidePanelWidthR - cabinFrameWidth/2))
		panelHeight = ZZYZX
		if bWallL then cutAngleL = 0 else cutAngleL = 45 * not(bSidePanelL)
		if bWallR then cutAngleR = 0 else cutAngleR = 45 * not(bSidePanelR)
		xPanelPos = -A/2 + (bSidePanelL * (sidePanelWidthL - cabinFrameWidth/2))
		yPanelPos = -B/2
		panelRotation = 0
		frameWidthL = cabinFrameWidth - cabinFrameWidth/2 * bSidePanelL
		frameMaskL = 7 * bSidePanelL
		if iDoorType = DOORTYPE_CORNERSLIDING then
			frameWidthR = 0
		else
			frameWidthR = cabinFrameWidth - cabinFrameWidth/2 * bSidePanelR
			frameMaskR = 7 * bSidePanelR
		endif
		withoutGlas = 1
		iStiffR = 0
		gosub "Straight_Panel"
	endif

	if bSidePanelL then			! Left Side Panel
		panelWidth = sidePanelWidthL - cabinFrameWidth/2 * bFramedPanel
		cutAngleL = 45 * not(bWallL)
		cutAngleR = 0
		xPanelPos = -A/2
		yPanelPos = -B/2
		panelRotation = 0
		frameWidthR = cabinFrameWidth/2
		frameMaskR = 7
		iStiffL = 1 + bWallL
		iStiffR = 0
		bCeilingStiffL = 1
		bCeilingStiffR = 0
		gosub "Straight_Panel"
	endif

	if bSidePanelR then			! Right Side Panel
		panelWidth = sidePanelWidthR - cabinFrameWidth/2 * bFramedPanel
		cutAngleL = 0
		cutAngleR = 45 * not(bWallR)
		xPanelPos = A/2 - sidePanelWidthR + cabinFrameWidth/2 * bFramedPanel
		yPanelPos = -B/2
		panelRotation = 0
		frameWidthL = cabinFrameWidth/2
		frameMaskL = 7
		iStiffL = 0
		iStiffR = 1 + bWallR
		bCeilingStiffL = 0
		bCeilingStiffR = 1
		gosub "Straight_Panel"
	endif

	if bFramedPanel then
		if bSidePanelL = 0 & bSidePanelR = 0 then
			panelWidth = A - 2 * cabinFrameWidth
			xPanelPos = -A/2 + cabinFrameWidth
		endif
		if bSidePanelL = 1 & bSidePanelR = 0 then
			panelWidth = A - cabinFrameWidth - sidePanelWidthL
			xPanelPos = -A/2 + sidePanelWidthL
		endif
		if bSidePanelL = 1 & bSidePanelR = 1 then
			panelWidth = doorWidth
			xPanelPos = -A/2 + sidePanelWidthL
		endif
	else
		if bSidePanelL = 0 & bSidePanelR = 0 then
			panelWidth = A - 2 * panelThk
			xPanelPos = -A/2 + panelThk
		endif
		if bSidePanelL = 1 & bSidePanelR = 0 then
			panelWidth = A - panelThk - sidePanelWidthL
			xPanelPos = -A/2 + sidePanelWidthL
		endif
		if bSidePanelL = 1 & bSidePanelR = 1 then
			panelWidth = A - sidePanelWidthL - sidePanelWidthR
			xPanelPos = -A/2 + sidePanelWidthL
		endif
	endif
	yPanelPos = -B/2
	panelRotation = 0
	bHandle = 1
	iStiffL = 0
	iStiffR = 0
	bCeilingStiffL = 0
	bCeilingStiffR = 0
	gosub "Opening_Type"			! Opening Panel

	if iDoorType = DOORTYPE_SIMPLELEAF_SIDEPANEL2 | iDoorType = DOORTYPE_DOUBLELEAF_SIDEPANEL2 | iDoorType = DOORTYPE_DOUBLESLIDING then
		hotspot -A/2 + sidePanelWidthL + doorWidth/2, -B/2, 0, unID, halfDoorWidth, 1+128, doorWidth : unID=unID+1
		hotspot -A/2 + sidePanelWidthL + doorWidth/2 - halfDoorWidth, -B/2, 0, unID, halfDoorWidth, 2, doorWidth : unID=unID+1
		hotspot -A/2 + sidePanelWidthL + 1, -B/2, 0, unID, halfDoorWidth, 3, doorWidth : unID=unID+1

		hotspot -A/2 + sidePanelWidthL + doorWidth/2, -B/2, 0, unID, halfDoorWidth, 1+128, doorWidth : unID=unID+1
		hotspot -A/2 + sidePanelWidthL + doorWidth/2 + halfDoorWidth, -B/2, 0, unID, halfDoorWidth, 2, doorWidth : unID=unID+1
		hotspot -A/2 + sidePanelWidthL, -B/2, 0, unID, halfDoorWidth, 3, doorWidth : unID=unID+1
	endif
	if iDoorType = DOORTYPE_SIMPLELEAF_SIDEPANEL1 | iDoorType = DOORTYPE_DOUBLELEAF_SIDEPANEL1 | iDoorType = DOORTYPE_SLIDING then
		hotspot A/2, -B/2, 0, unID, doorWidth, 1+128 : unID=unID+1
		hotspot A/2 - doorWidth, -B/2, 0, unID, doorWidth, 2 : unID=unID+1
		hotspot A/2 + 1, -B/2, 0, unID, doorWidth, 3 : unID=unID+1
	endif
	if iDoorType = DOORTYPE_CORNERSLIDING then
		add A/2 - doorWidth/2*cos(45), -B/2 + doorWidth/2*cos(45), 0
		rotz 45
		hotspot 0, 0, 0, unID, halfDoorWidth, 1+128, doorWidth : unID=unID+1
		hotspot halfDoorWidth, 0, 0, unID, halfDoorWidth, 2, doorWidth : unID=unID+1
		hotspot -1, 0, 0, unID, halfDoorWidth, 3, doorWidth : unID=unID+1

		hotspot 0, 0, 0, unID, halfDoorWidth, 1+128, doorWidth : unID=unID+1
		hotspot -halfDoorWidth, 0, 0, unID, halfDoorWidth, 2, doorWidth : unID=unID+1
		hotspot 1, 0, 0, unID, halfDoorWidth, 3, doorWidth : unID=unID+1
		del 2
	endif

endif

if iCabinForm = CABINFORM_ROUNDEDCORNER then			! Rounded Corner

	if not(bWallL) then 		! Left Panel
		panelWidth = B
		cutAngleL = 45 * not(bWallB)
		cutAngleR = 45
		xPanelPos = -A/2
		yPanelPos = B/2
		panelRotation = -90
		gosub "Straight_Panel"
	endif

	if not(bWallB) then			! Back Panel
		panelWidth = A
		cutAngleL = 45
		cutAngleR = 45
		xPanelPos = A/2
		yPanelPos = B/2
		panelRotation = -180
		gosub "Straight_Panel"
	endif

	panelWidth =  sidePanelWidthR
	yPanelPos = B/2 - sidePanelWidthR
	cutAngleL = 0
	cutAngleR = 45 * not(bWallB)
	xPanelPos = A/2
	panelRotation = 90
	frameMaskL = 7
	iStiffL = 0
	iStiffR = 1 + bWallB
	bCeilingStiffL = 0
	bCeilingStiffR = 1
	gosub "Straight_Panel"

	panelWidth = sidePanelWidthL
	cutAngleL = 45 * not(bWallL)
	cutAngleR = 0
	xPanelPos = -A/2
	yPanelPos = -B/2
	panelRotation = 0
	frameMaskR = 7
	iStiffL = 1 + bWallB
	iStiffR = 0
	bCeilingStiffL = 1
	bCeilingStiffR = 0
	gosub "Straight_Panel"

	if bFramedPanel then		! Front Panel
		arcRadius = doorWidth*cos(45) - panelThk
		panelWidth = arcRadius * PI/2
		cutAngleL = 22.5
		cutAngleR = 22.5
		xPanelPos = -A/2 + sidePanelWidthL
		yPanelPos = -B/2
		panelRotation = 0
		withoutGlas = 1
		frameWidthL = 0
		frameMaskL = 7
		frameWidthR = 0
		frameMaskR = 7
		gosub "Curved_Panel"
		lin_ xPanelPos, yPanelPos, cabinFrameWidth, xPanelPos, yPanelPos, panelHeight - cabinFrameWidth
		lin_ xPanelPos, yPanelPos + frameThk, cabinFrameWidth, xPanelPos, yPanelPos + frameThk, panelHeight - cabinFrameWidth
		lin_ A/2, -B/2 + doorWidth*cos(45), cabinFrameWidth, A/2, -B/2 + doorWidth*cos(45), panelHeight - cabinFrameWidth
		lin_ A/2 - frameThk, -B/2 + doorWidth*cos(45), cabinFrameWidth, A/2 - frameThk, -B/2 + doorWidth*cos(45), panelHeight - cabinFrameWidth
	endif

	arcRadius = doorWidth*cos(45) - panelThk
	arcAngle = 90
	panelWidth = arcRadius * PI / 2
	xPanelPos = -A/2 + sidePanelWidthL
	yPanelPos = -B/2 + panelThk * (iDoorType > 8)
	panelRotation = 45
	bHandle = 1
	iStiffL = 0
	iStiffR = 0
	bCeilingStiffL = 0
	bCeilingStiffR = 0
	gosub "Opening_Type"			! Opening Panel

	add A/2 - doorWidth/2*cos(45), -B/2 + doorWidth/2*cos(45), 0
	rotz 45
	hotspot 0, 0, 0, unID, halfDoorWidth, 1+128, doorWidth : unID=unID+1
	hotspot halfDoorWidth, 0, 0, unID, halfDoorWidth, 2, doorWidth : unID=unID+1
	hotspot -1, 0, 0, unID, halfDoorWidth, 3, doorWidth : unID=unID+1

	hotspot 0, 0, 0, unID, halfDoorWidth, 1+128, doorWidth : unID=unID+1
	hotspot -halfDoorWidth, 0, 0, unID, halfDoorWidth, 2, doorWidth : unID=unID+1
	hotspot 1, 0, 0, unID, halfDoorWidth, 3, doorWidth : unID=unID+1
	del 2

endif

if iCabinForm = CABINFORM_CHAMFERCORNER then			! Chamfer Corner

	if not(bWallL) then 		! Left Panel
		panelWidth = B
		cutAngleL = 45 * not(bWallB)
		cutAngleR = 45
		xPanelPos = -A/2
		yPanelPos = B/2
		panelRotation = -90
		iStiffL = 1 + bWallB
		iStiffR = 0
		bCeilingStiffL = 1
		bCeilingStiffR = 0
		gosub "Straight_Panel"
	endif

	if not(bWallB) then			! Back Panel
		panelWidth = A
		cutAngleL = 45
		cutAngleR = 45
		xPanelPos = A/2
		yPanelPos = B/2
		panelRotation = -180
		gosub "Straight_Panel"
	endif

	panelWidth =  sidePanelWidthR
	yPanelPos = B/2 - sidePanelWidthR
	cutAngleL = 22.5
	cutAngleR = 45 * not(bWallB)
	xPanelPos = A/2
	panelRotation = 90
	iStiffL = 0
	iStiffR = 1 + bWallB
	bCeilingStiffL = 0
	bCeilingStiffR = 1
	gosub "Straight_Panel"

	if bFramedPanel then		! Front Panel
		panelWidth = doorWidth
		cutAngleL = 22.5
		cutAngleR = 22.5
		xPanelPos = -A/2 + (bSidePanelL * sidePanelWidthL)
		yPanelPos = -B/2
		panelRotation = 45
		withoutGlas = 1
		gosub "Straight_Panel"
	endif

	panelWidth = sidePanelWidthL
	cutAngleL = 45 * not(bWallL)
	cutAngleR = 22.5
	xPanelPos = -A/2
	yPanelPos = -B/2
	panelRotation = 0
	iStiffL = 1 + bWallB
	iStiffR = 0
	bCeilingStiffL = 1
	bCeilingStiffR = 0
	gosub "Straight_Panel"

	if bFramedPanel then
		panelWidth = doorWidth - 2 * cabinFrameWidth
		xPanelPos = -A/2 + sidePanelWidthL + cabinFrameWidth * cos(45)
		yPanelPos = -B/2 + cabinFrameWidth * sin(45)
	else
		panelWidth = doorWidth
		xPanelPos = -A/2 + sidePanelWidthL
		yPanelPos = -B/2
	endif
	panelRotation = 45
	bHandle = 1
	iStiffL = 0
	iStiffR = 0
	bCeilingStiffL = 0
	bCeilingStiffR = 0
	gosub "Opening_Type"			! Opening Panel

	add A/2 - doorWidth/2*cos(45), -B/2 + doorWidth/2*cos(45), 0
	rotz 45
	hotspot 0, 0, 0, unID, halfDoorWidth, 1+128, doorWidth : unID=unID+1
	hotspot halfDoorWidth, 0, 0, unID, halfDoorWidth, 2, doorWidth : unID=unID+1
	hotspot -1, 0, 0, unID, halfDoorWidth, 3, doorWidth : unID=unID+1

	hotspot 0, 0, 0, unID, halfDoorWidth, 1+128, doorWidth : unID=unID+1
	hotspot -halfDoorWidth, 0, 0, unID, halfDoorWidth, 2, doorWidth : unID=unID+1
	hotspot 1, 0, 0, unID, halfDoorWidth, 3, doorWidth : unID=unID+1
	del 2

endif

if iCabinForm = CABINFORM_ROUNDEDPENINSULAR then			! Rounded Peninsular

	gosub "Straight_Curved_Panel"

	arcRadius = A/2 - panelThk
	arcAngle = 2 * asn(doorWidth/A)
	if bFramedPanel then
		if iDoorType < 8 then
			panelWidth = arcRadius * PI * arcAngle/180
			xPanelPos = -doorWidth/2
			yPanelPos = -B/2 + A/2 -(arcRadius + panelThk) * cos(arcAngle/2)
		else
			panelWidth = (arcRadius) * PI * arcAngle/180
			xPanelPos = -doorWidth/2 + (panelThk) * sin(arcAngle/2)
			yPanelPos = -A/2 * cos(arcAngle/2) + (panelThk) * cos(arcAngle/2)
		endif
	else
		panelWidth = arcRadius * PI * arcAngle/180
		xPanelPos = -doorWidth/2
		yPanelPos = -B/2 + A/2 -(arcRadius + panelThk) * cos(arcAngle/2)
	endif
	panelRotation = 0
	bHandle = 1
	gosub "Opening_Type"			! Opening Panel

	arcAngle = 2 * asn(doorWidth/A)
	add 0, -A/2 * cos(arcAngle/2), 0
	hotspot 0, 0, 0, unID, halfDoorWidth, 1+128, doorWidth : unID=unID+1
	hotspot halfDoorWidth, 0, 0, unID, halfDoorWidth, 2, doorWidth : unID=unID+1
	hotspot -1, 0, 0, unID, halfDoorWidth, 3, doorWidth : unID=unID+1

	hotspot 0, 0, 0, unID, halfDoorWidth, 1+128, doorWidth : unID=unID+1
	hotspot -halfDoorWidth, 0, 0, unID, halfDoorWidth, 2, doorWidth : unID=unID+1
	hotspot 1, 0, 0, unID, halfDoorWidth, 3, doorWidth : unID=unID+1
	del 1

endif

if iCabinForm = CABINFORM_ROUND then			! Round

	arcRadius = A/2
	arcAngle = 2 * asn(doorWidth/A)
	frameAngle = cabinFrameWidth/(arcRadius*PI)*180
	if bFramedPanel then
		material matFrame
		addz cabinFrameWidth - 100*eps*0
		cutform 4, 1, 1 + 2,
			0, 0, 1, panelHeight - 2*cabinFrameWidth + 2*eps*0,
			0, 0, 95,
			-A * sin(arcAngle/2), -A * cos(arcAngle/2), 95,
			A * sin(arcAngle/2), -A * cos(arcAngle/2), 95,
			0, 0, -1
		del 1
		addz cabinFrameWidth
		cutform 8, 1, 1 + 2,
			0, 0, 1, panelHeight - 2*cabinFrameWidth,
			0, 0, 95,
			A * sin(arcAngle/2 + frameAngle), -A * cos(arcAngle/2 + frameAngle), 95,
			A, -A * cos(arcAngle/2 + frameAngle), 95,
			A, A, 95,
			-A, A, 95,
			-A, -A * cos(arcAngle/2 + frameAngle), 95,
			-A * sin(arcAngle/2 + frameAngle), -A * cos(arcAngle/2 + frameAngle), 95,
			0, 0, 1
		del 1
		prism_ 5 + 5, panelHeight,
			-arcRadius * sin(arcAngle/2), -arcRadius * cos(arcAngle/2), 15 + 64,
			0, 0, 900,
			arcRadius * sin(arcAngle/2), -arcRadius * cos(arcAngle/2), 3015 + 64,
			-arcRadius * sin(arcAngle/2), -arcRadius * cos(arcAngle/2), 1015 + 64,
			-arcRadius * sin(arcAngle/2), -arcRadius * cos(arcAngle/2), -1,
			-(arcRadius - frameThk)* sin(arcAngle/2), -(arcRadius - frameThk) * cos(arcAngle/2), 15 + 64,
			0, 0, 900,
			(arcRadius - frameThk) * sin(arcAngle/2), -(arcRadius - frameThk) * cos(arcAngle/2), 3015 + 64,
			-(arcRadius - frameThk) * sin(arcAngle/2), -(arcRadius - frameThk) * cos(arcAngle/2), 1015 + 64,
			-(arcRadius - frameThk) * sin(arcAngle/2), -(arcRadius - frameThk) * cos(arcAngle/2), -1
		cutend
		cutend

		material matGlass
		cutform 6, 1, 1 + 2,
			0, 0, 1, panelHeight,
			0, 0, 95,
			-A * sin(arcAngle/2 + frameAngle), -A * cos(arcAngle/2 + frameAngle), 95,
			-A * sin(arcAngle/2 + frameAngle), -A * cos(arcAngle/2 + frameAngle) - A, 95,
			A * sin(arcAngle/2 + frameAngle), -A * cos(arcAngle/2 + frameAngle) - A, 95,
			A * sin(arcAngle/2 + frameAngle), -A * cos(arcAngle/2 + frameAngle), 95,
			0, 0, -1
		addz cabinFrameWidth
		prism_ 5 + 5, panelHeight - 2*cabinFrameWidth,
			-(arcRadius - framethk/2 + glassThk/2) * sin(arcAngle/2), -(arcRadius - framethk/2 + glassThk/2) * cos(arcAngle/2), 15 + 64,
			0, 0, 900,
			(arcRadius - framethk/2 + glassThk/2) * sin(arcAngle/2), -(arcRadius - framethk/2 + glassThk/2) * cos(arcAngle/2), 3015 + 64,
			-(arcRadius - framethk/2 + glassThk/2) * sin(arcAngle/2), -(arcRadius - framethk/2 + glassThk/2) * cos(arcAngle/2), 1015 + 64,
			-(arcRadius - framethk/2 + glassThk/2) * sin(arcAngle/2), -(arcRadius - framethk/2 + glassThk/2) * cos(arcAngle/2), -1,
			-(arcRadius - framethk/2 - glassThk/2)* sin(arcAngle/2), -(arcRadius - framethk/2 - glassThk/2) * cos(arcAngle/2), 15 + 64,
			0, 0, 900,
			(arcRadius - framethk/2 - glassThk/2) * sin(arcAngle/2), -(arcRadius - framethk/2 - glassThk/2) * cos(arcAngle/2), 3015 + 64,
			-(arcRadius - framethk/2 - glassThk/2) * sin(arcAngle/2), -(arcRadius - framethk/2 - glassThk/2) * cos(arcAngle/2), 1015 + 64,
			-(arcRadius - framethk/2 - glassThk/2) * sin(arcAngle/2), -(arcRadius - framethk/2 - glassThk/2) * cos(arcAngle/2), -1
		del 1
		cutend
	else
		material matGlass
		cutform 4, 1, 1 + 2,
			0, 0, 1, panelHeight,
			0, 0, 95,
			-A * sin(arcAngle/2), -A * cos(arcAngle/2), 95,
			A * sin(arcAngle/2), -A * cos(arcAngle/2), 95,
			0, 0, -1
		prism_ 5 + 5, panelHeight,
			-arcRadius * sin(arcAngle/2), -arcRadius * cos(arcAngle/2), 15 + 64,
			0, 0, 900,
			arcRadius * sin(arcAngle/2), -arcRadius * cos(arcAngle/2), 3015 + 64,
			-arcRadius * sin(arcAngle/2), -arcRadius * cos(arcAngle/2), 1015 + 64,
			-arcRadius * sin(arcAngle/2), -arcRadius * cos(arcAngle/2), -1,

			-(arcRadius - glassThk)* sin(arcAngle/2), -(arcRadius - glassThk) * cos(arcAngle/2), 15 + 64,
			0, 0, 900,
			(arcRadius - glassThk) * sin(arcAngle/2), -(arcRadius - glassThk) * cos(arcAngle/2), 3015 + 64,
			-(arcRadius - glassThk) * sin(arcAngle/2), -(arcRadius - glassThk) * cos(arcAngle/2), 1015 + 64,
			-(arcRadius - glassThk) * sin(arcAngle/2), -(arcRadius - glassThk) * cos(arcAngle/2), -1
		cutend

		if gs_detlevel_3D_m = 2 then
			material matFrame
			szi = min(45, 90 - arcAngle/2 - 5)
			for ji = 1 to 2
				add 0.015 / sin(szi), 0, 0
				cutpolya 4, 1, 0,
					0, 0, 7,
					5 * A * cos(szi), -5 * A * sin(szi), 7,
					5 * A * cos(szi), 5 * A * sin(szi), 7,
					0, 0, -1
				del 1
			mulx -1
			next ji
			del 2
			for ji = 1 to 2
				if szi < 90 then add 0, -0.015 / sin(90 - szi), 0 else add 0, -0.015, 0
				cutpolya 4, 1, 0,
					0, 0, 7,
					-5 * A * cos(szi), -5 * A * sin(szi), 7,
					5 * A * cos(szi), -5 * A * sin(szi), 7,
					0, 0, -1
				del 1
			muly -1
			next ji
			del 2

			addz zzyzx
			prism_ 5, ceilingThk/2,
				-arcRadius * sin(arcAngle/2), -arcRadius * cos(arcAngle/2), 15 + 64,
				0, 0, 900,
				arcRadius * sin(arcAngle/2), -arcRadius * cos(arcAngle/2), 3015 + 64,
				-arcRadius * sin(arcAngle/2), -arcRadius * cos(arcAngle/2), 1015 + 64,
				-arcRadius * sin(arcAngle/2), -arcRadius * cos(arcAngle/2), -1
			del 1
			cutend
			cutend
			cutend
			cutend
		endif
	endif

	arcRadius = A/2 - panelThk
	arcAngle = 2 * asn(doorWidth/A)
	if bFramedPanel then
		if iDoorType < 8 then
			panelWidth = arcRadius * PI * arcAngle/180
			xPanelPos = -doorWidth/2
			yPanelPos = -(arcRadius + panelThk) * cos(arcAngle/2)
		else
			panelWidth = (arcRadius) * PI * arcAngle/180
			xPanelPos = -doorWidth/2 + (panelThk) * sin(arcAngle/2)
			yPanelPos = -A/2 * cos(arcAngle/2) + (panelThk) * cos(arcAngle/2)
		endif
	else
		if iDoorType < 8 then
			panelWidth = arcRadius * PI * arcAngle/180
			xPanelPos = -doorWidth/2
			yPanelPos = -(arcRadius + panelThk) * cos(arcAngle/2)
		else
			panelWidth = (arcRadius) * PI * arcAngle/180
			xPanelPos = -doorWidth/2 + (panelThk) * sin(arcAngle/2)
			yPanelPos = -A/2 * cos(arcAngle/2) + (panelThk) * cos(arcAngle/2)
		endif
	endif
	panelRotation = 0
	bHandle = 1
	gosub "Opening_Type"			! Opening Panel

	arcAngle = 2 * asn(doorWidth/A)
	add 0, -A/2 * cos(arcAngle/2), 0
	hotspot 0, 0, 0, unID, halfDoorWidth, 1+128, doorWidth : unID=unID+1
	hotspot halfDoorWidth, 0, 0, unID, halfDoorWidth, 2, doorWidth : unID=unID+1
	hotspot -1, 0, 0, unID, halfDoorWidth, 3, doorWidth : unID=unID+1

	hotspot 0, 0, 0, unID, halfDoorWidth, 1+128, doorWidth : unID=unID+1
	hotspot -halfDoorWidth, 0, 0, unID, halfDoorWidth, 2, doorWidth : unID=unID+1
	hotspot 1, 0, 0, unID, halfDoorWidth, 3, doorWidth : unID=unID+1
	del 1

endif


GS_HotspotUnIDBegin = unID
end GS_HotspotUnIDBegin


! ==============================================================================
"Opening_Type":
! ==============================================================================

if iCabinForm = CABINFORM_SQUAREDALCOVE | iCabinForm = CABINFORM_SQUAREDCORNER | iCabinForm = CABINFORM_CHAMFERCORNER | iCabinForm = CABINFORM_SQUAREDPENINSULAR | iCabinForm = CABINFORM_SQUARE then			! Square
	if iDoorType = DOORTYPE_SIMPLELEAF | iDoorType = DOORTYPE_SIMPLELEAF_SIDEPANEL1 | iDoorType = DOORTYPE_SIMPLELEAF_SIDEPANEL2 then gosub "Simple_Leaf"
	if iDoorType = DOORTYPE_DOUBLELEAF | iDoorType = DOORTYPE_DOUBLELEAF_SIDEPANEL1 | iDoorType = DOORTYPE_DOUBLELEAF_SIDEPANEL2 then gosub "Double_Leaf"
	if iDoorType = DOORTYPE_FOLDING then gosub "Folding"
	if iDoorType = DOORTYPE_DOUBLEFOLDING then gosub "Double_Folding"
	if iDoorType = DOORTYPE_SLIDING then gosub "Sliding"
	if iDoorType = DOORTYPE_DOUBLESLIDING then gosub "Double_Sliding"
	if iDoorType = DOORTYPE_CORNERSLIDING then gosub "Corner_Sliding"
endif
if iCabinForm = CABINFORM_ROUNDEDCORNER | iCabinForm = CABINFORM_ROUNDEDPENINSULAR | iCabinForm = CABINFORM_ROUND then			! Rounded Corner
	if iDoorType = DOORTYPE_SIMPLELEAF then gosub "Curved_Simple_Leaf"
	if iDoorType = DOORTYPE_DOUBLELEAF then	gosub "Curved_Double_Leaf"
	if iDoorType = DOORTYPE_SLIDING then gosub "Curved_Sliding"
	if iDoorType = DOORTYPE_DOUBLESLIDING then gosub "Curved_Double_Sliding"
endif

return


! ==============================================================================
"Simple_Leaf":
! ==============================================================================

add xPanelPos, yPanelPos, 0
rotz panelRotation
if bMirrorDoor then
	addx panelWidth
	mulx -1
endif

if bFramedPanel then
	fi = 0
	rotW = panelWidth
	hingeAngleL = 0
	xHingePos = 0
	yHingePos = 0
else
	hingeAngleL = 0
	xHingePos = - hingeThk/2 - glassThk * bMirrorDoor
	yHingePos = - hingeThk/2
	fi = atn(hingeThk/2/(panelWidth + hingeThk/2 + glassThk * bMirrorDoor))
	rotW = (panelWidth + hingeThk/2 + glassThk * bMirrorDoor)/cos(fi)

	if iCabinForm = CABINFORM_SQUAREDALCOVE then
		if iDoorType = DOORTYPE_SIMPLELEAF then
			hingeAngleL = -90
			xHingePos = - hingeThk/2
			yHingePos = - hingeThk/2
			fi = atn(hingeThk/2/(panelWidth + hingeThk/2))
			rotW = (panelWidth + hingeThk/2)/cos(fi)
		endif
		if iDoorType = DOORTYPE_SIMPLELEAF_SIDEPANEL1 then
			hingeAngleL = -90 * bMirrorDoor
			xHingePos = - hingeThk/2 * bMirrorDoor
			yHingePos = - hingeThk/2
			fi = atn(hingeThk/2/(panelWidth + hingeThk/2 * bMirrorDoor))
			rotW = (panelWidth + hingeThk/2 * bMirrorDoor)/cos(fi)
		endif
		if iDoorType = DOORTYPE_SIMPLELEAF_SIDEPANEL2 then
			hingeAngleL = 0
			xHingePos = 0
			yHingePos = - hingeThk/2
			fi = atn(hingeThk/2/panelWidth)
			rotW = panelWidth/cos(fi)
		endif
	endif
	if iCabinForm = CABINFORM_SQUAREDCORNER then
		if iDoorType = DOORTYPE_SIMPLELEAF then
			hingeAngleL = -90
			xHingePos = - hingeThk/2 - glassThk * bMirrorDoor
			yHingePos = - hingeThk/2
			fi = atn(hingeThk/2/(panelWidth + hingeThk/2 + glassThk * bMirrorDoor))
			rotW = (panelWidth + hingeThk/2 + glassThk * bMirrorDoor)/cos(fi)
		endif
		if iDoorType = DOORTYPE_SIMPLELEAF_SIDEPANEL1 then
			hingeAngleL = -90 * bMirrorDoor
			xHingePos = - (hingeThk/2 + glassThk) * bMirrorDoor
			yHingePos = - hingeThk/2
			fi = atn(hingeThk/2/(panelWidth + (hingeThk/2 + glassThk) * bMirrorDoor))
			rotW = (panelWidth + (hingeThk/2 + glassThk) * bMirrorDoor)/cos(fi)
		endif
		if iDoorType = DOORTYPE_SIMPLELEAF_SIDEPANEL2 then
			hingeAngleL = 0
			xHingePos = 0
			yHingePos = - hingeThk/2
			fi = atn(hingeThk/2/panelWidth)
			rotW = panelWidth/cos(fi)
		endif
	endif
	if iCabinForm = CABINFORM_CHAMFERCORNER then
		cutAngleL = 22.5
		cutAngleR = 22.5
		if iDoorType = DOORTYPE_SIMPLELEAF then
			hingeAngleL = -45
			xHingePos = - hingeThk/2 * tan(22.5)
			yHingePos = - hingeThk/2
			fi = atn(hingeThk/2/(panelWidth + hingeThk/2 * tan(22.5) - glassThk * tan(22.5)))
			rotW = (panelWidth + hingeThk/2 * tan(22.5) - glassThk * tan(22.5))/cos(fi)
		endif
	endif
	if iCabinForm = CABINFORM_SQUAREDPENINSULAR | iCabinForm = CABINFORM_SQUARE then
		if iDoorType = DOORTYPE_SIMPLELEAF then
			hingeAngleL = -90
			xHingePos = - hingeThk/2 - glassThk
			yHingePos = - hingeThk/2
			fi = atn(hingeThk/2/(panelWidth + hingeThk/2 + glassThk))
			rotW = (panelWidth + hingeThk/2 + glassThk)/cos(fi)
		endif
		if iDoorType = DOORTYPE_SIMPLELEAF_SIDEPANEL1 then
			hingeAngleL = -90 * bMirrorDoor
			xHingePos = - (hingeThk/2 + glassThk) * bMirrorDoor
			yHingePos = - hingeThk/2
			fi = atn(hingeThk/2/(panelWidth + (hingeThk/2 + glassThk) * bMirrorDoor))
			rotW = (panelWidth + (hingeThk/2 + glassThk) * bMirrorDoor)/cos(fi)
		endif
		if iDoorType = DOORTYPE_SIMPLELEAF_SIDEPANEL2 then
			hingeAngleL = 0
			xHingePos = 0
			yHingePos = - hingeThk/2
			fi = atn(hingeThk/2/panelWidth)
			rotW = panelWidth/cos(fi)
		endif
	endif

	add xHingePos, yHingePos, 0
	gosub "Hinge"
	del 1
endif

add xHingePos, yHingePos, 0
rotz fi
hotspot rotW, 0, panelheight/2, unID, gs_open_3D, 4+128 : unID = unID + 1
hotspot rotW*cos(gs_open_3D), -rotW*sin(gs_open_3D), panelHeight/2, unID, gs_open_3D, 5 : unID = unID + 1
hotspot 0, 0, panelheight/2, unID, gs_open_3D, 6 : unID = unID + 1
hotspot 0, 0, panelheight * bMirrorDoor, unID, gs_open_3D, 7 : unID = unID + 1
del 2

add xHingePos, yHingePos, frameWidth * bFramedPanel
rotz -gs_open_3D
add -xHingePos, -yHingePos, 0
xPanelPos = 0
yPanelPos = 0
panelRotation = 0
panelHeight = ZZYZX - 2 * frameWidth * bFramedPanel
frameWidth = doorFrameWidth
frameWidthL = doorFrameWidth
frameWidthR = doorFrameWidth
gosub "Straight_Panel"
del 3

del 2 + bMirrorDoor * 2

return


! ==============================================================================
"Double_Leaf":
! ==============================================================================

panelWidth = panelWidth/2

add xPanelPos, yPanelPos, 0
rotz panelRotation

for ii = 1 to 2
if bFramedPanel then
	fi = 0
	rotW = panelWidth
	hingeAngleL = 0
	xHingePos = 0
	yHingePos = 0
else
	hingeAngleL = 0
	xHingePos = - hingeThk/2
	yHingePos = - hingeThk/2
	fi = atn(hingeThk/2/(panelWidth + hingeThk/2))
	rotW = (panelWidth + hingeThk/2)/cos(fi)

	if iCabinForm = CABINFORM_SQUAREDALCOVE then
		if iDoorType = DOORTYPE_DOUBLELEAF then
			hingeAngleL = -90
			xHingePos = - hingeThk/2
			yHingePos = - hingeThk/2
			fi = atn(hingeThk/2/(panelWidth + hingeThk/2))
			rotW = (panelWidth + hingeThk/2)/cos(fi)
		endif
		if iDoorType = DOORTYPE_DOUBLELEAF_SIDEPANEL1 then
			hingeAngleL = -90 * (ii - 1)
			xHingePos = - hingeThk/2 * (ii - 1)
			yHingePos = - hingeThk/2
			fi = atn(hingeThk/2/(panelWidth + hingeThk/2 * (ii - 1)))
			rotW = (panelWidth + hingeThk/2 * (ii - 1))/cos(fi)
		endif
		if iDoorType = DOORTYPE_DOUBLELEAF_SIDEPANEL2 then
			hingeAngleL = 0
			xHingePos = 0
			yHingePos = - hingeThk/2
			fi = atn(hingeThk/2/panelWidth)
			rotW = panelWidth/cos(fi)

		endif
	endif
	if iCabinForm = CABINFORM_SQUAREDCORNER then
		if iDoorType = DOORTYPE_DOUBLELEAF then
			hingeAngleL = -90
			xHingePos = - hingeThk/2 - glassThk * (ii = 2)
			yHingePos = - hingeThk/2
			fi = atn(hingeThk/2/(panelWidth + hingeThk/2 + glassThk * (ii = 2)))
			rotW = (panelWidth + hingeThk/2 + glassThk * (ii = 2))/cos(fi)
		endif
		if iDoorType = DOORTYPE_DOUBLELEAF_SIDEPANEL1 then
			hingeAngleL = -90 * (ii = 2)
			xHingePos = - (hingeThk/2 + glassThk) * (ii = 2)
			yHingePos = - hingeThk/2
			fi = atn(hingeThk/2/(panelWidth + (hingeThk/2 + glassThk) * (ii = 2)))
			rotW = (panelWidth + (hingeThk/2 + glassThk) * (ii = 2))/cos(fi)
		endif
		if iDoorType = DOORTYPE_DOUBLELEAF_SIDEPANEL2 then
			hingeAngleL = 0
			xHingePos = 0
			yHingePos = - hingeThk/2
			fi = atn(hingeThk/2/panelWidth)
			rotW = panelWidth/cos(fi)
		endif
	endif
	if iCabinForm = CABINFORM_CHAMFERCORNER then
		cutAngleL = 22.5
		cutAngleR = 0
		if iDoorType = DOORTYPE_DOUBLELEAF then
			hingeAngleL = -45
			xHingePos = - hingeThk/2 * tan(22.5)
			yHingePos = - hingeThk/2
			fi = atn(hingeThk/2/(panelWidth + hingeThk/2  * tan(22.5)))
			rotW = (panelWidth + hingeThk/2 * tan(22.5))/cos(fi)
		endif
	endif
	if iCabinForm = CABINFORM_SQUAREDPENINSULAR | iCabinForm = CABINFORM_SQUARE then
		if iDoorType = DOORTYPE_DOUBLELEAF then
			hingeAngleL = -90
			xHingePos = - hingeThk/2 - glassThk
			yHingePos = - hingeThk/2
			fi = atn(hingeThk/2/(panelWidth + hingeThk/2 + glassThk))
			rotW = (panelWidth + hingeThk/2 + glassThk)/cos(fi)
		endif
		if iDoorType = DOORTYPE_DOUBLELEAF_SIDEPANEL1 then
			hingeAngleL = -90 * (ii = 2)
			xHingePos = - (hingeThk/2 + glassThk) * (ii = 2)
			yHingePos = - hingeThk/2
			fi = atn(hingeThk/2/(panelWidth + (hingeThk/2 + glassThk) * (ii = 2)))
			rotW = (panelWidth + (hingeThk/2 + glassThk) * (ii = 2))/cos(fi)
		endif
		if iDoorType = DOORTYPE_DOUBLELEAF_SIDEPANEL2 then
			hingeAngleL = 0
			xHingePos = 0
			yHingePos = - hingeThk/2
			fi = atn(hingeThk/2/panelWidth)
			rotW = panelWidth/cos(fi)
		endif
	endif

	add xHingePos, yHingePos, 0
	gosub "Hinge"
	del 1
endif

add xHingePos, yHingePos, 0
rotz fi
hotspot rotW, 0, panelheight/2, unID, gs_open_3D, 4+128 : unID = unID + 1
hotspot rotW*cos(gs_open_3D), -rotW*sin(gs_open_3D), panelHeight/2, unID, gs_open_3D, 5 : unID = unID + 1
hotspot 0, 0, panelheight/2, unID, gs_open_3D, 6 : unID = unID + 1
hotspot 0, 0, panelheight * (ii=2), unID, gs_open_3D, 7 : unID = unID + 1
del 2

add xHingePos, yHingePos, cabinFrameWidth * bFramedPanel
rotz -gs_open_3D
add -xHingePos, -yHingePos, 0
xPanelPos = 0
yPanelPos = 0
panelRotation = 0
panelHeight = ZZYZX - 2 * cabinFrameWidth * bFramedPanel
frameWidth = doorFrameWidth
frameWidthL = doorFrameWidth
frameWidthR = doorFrameWidth
gosub "Straight_Panel"
del 3

addx 2 * panelWidth
mulx -1
next ii
del 4

del 2

return


! ==============================================================================
"Folding":
! ==============================================================================

panelWidth = panelWidth/2
panelHeight = ZZYZX - 2 * cabinFrameWidth * bFramedPanel

add xPanelPos, yPanelPos, 0
rotz panelRotation
if bMirrorDoor then
	addx panelWidth * 2
	mulx -1
endif
xPanelPos = 0
yPanelPos = 0
panelRotation = 0

hotspot xPanelPos + panelWidth*2, yPanelPos + panelThk, panelHeight/2 + cabinFrameWidth * bFramedPanel, unID, gs_open3D, 1+128 : unID=unID+1
hotspot xPanelPos + panelWidth*2 - gs_open3D, yPanelPos + panelThk, panelHeight/2 + cabinFrameWidth * bFramedPanel, unID, gs_open3D, 2 : unID=unID+1
hotspot xPanelPos + panelWidth*2 + 1, yPanelPos + panelThk, panelHeight/2 + cabinFrameWidth * bFramedPanel, unID, gs_open3D, 3 : unID=unID+1

panelDiagonal = sqr(panelWidth^2 + panelThk^2)
rotAngle = 0
diaAngle = 0
if gs_open3D > eps then
	diaAngle = atn(panelthk/panelWidth)
	rotAngle = acs((panelWidth - gs_open3D/2)/panelDiagonal) + diaAngle
endif
add xPanelPos, yPanelPos + panelThk, cabinFrameWidth * bFramedPanel
for ii = 1 to 2
	if ii = 1 then bHandle = 0
	if ii = 2 then bHandle = 1
	rotz rotAngle
	add -xPanelPos, -yPanelPos - panelThk, 0
	addx panelWidth
	mulx -1
	frameWidth = doorFrameWidth
	frameWidthL = doorFrameWidth
	frameWidthR = doorFrameWidth
	gosub "Straight_Panel"
	del 4
addx 2*panelWidth - gs_open3D
mulx -1
next ii
del 4 + 1

del 2 + 2 * bMirrorDoor

return


! ==============================================================================
"Double_Folding":
! ==============================================================================

panelWidth = panelWidth/4
panelHeight = ZZYZX - 2 * cabinFrameWidth * bFramedPanel

add xPanelPos, yPanelPos, 0
rotz panelRotation

xPanelPos = 0
yPanelPos = 0
panelRotation = 0

for ji = 1 to 2
	hotspot xPanelPos + panelWidth*2, yPanelPos + panelThk, panelHeight/2, unID, gs_open3D, 1+128 : unID=unID+1
	hotspot xPanelPos + panelWidth*2 - gs_open3D, yPanelPos + panelThk, panelHeight/2, unID, gs_open3D, 2 : unID=unID+1
	hotspot xPanelPos + panelWidth*2 + 1, yPanelPos + panelThk, panelHeight/2, unID, gs_open3D, 3 : unID=unID+1
	addx 4*panelWidth
mulx -1
next ji
del 4

panelDiagonal = sqr(panelWidth^2 + panelThk^2)
rotAngle = 0
diaAngle = 0
if gs_open3D > eps then
	diaAngle = atn(panelthk/panelWidth)
	rotAngle = acs((panelWidth - gs_open3D/2)/panelDiagonal) + diaAngle
endif
add xPanelPos, yPanelPos + panelThk, cabinFrameWidth * bFramedPanel
for ji = 1 to 2
	for ii = 1 to 2
		if ii = 1 then bHandle = 0
		if ii = 2 then bHandle = 1
		rotz rotAngle
		add -xPanelPos, -yPanelPos - panelThk, 0
		addx panelWidth
		mulx -1
		frameWidth = doorFrameWidth
		frameWidthL = doorFrameWidth
		frameWidthR = doorFrameWidth
		gosub "Straight_Panel"
		del 4
	addx 2*panelWidth - gs_open3D
	mulx -1
	next ii
	del 4
addx 4*panelWidth
mulx -1
next ji
del 4 + 1

del 2

return


! ==============================================================================
"Sliding":
! ==============================================================================

panelWidth = panelWidth + 2 * doorFrameWidth
panelHeight = ZZYZX

hotspot A/2 - cabinFrameWidth + doorFrameWidth, -B/2 + panelThk, panelHeight/2, unID, gs_open3D, 1+128 : unID=unID+1
hotspot A/2 - cabinFrameWidth + doorFrameWidth - gs_open3D, -B/2 + panelThk, panelHeight/2, unID, gs_open3D, 2 : unID=unID+1
hotspot A/2 - cabinFrameWidth + doorFrameWidth + 1, -B/2 + panelThk, panelHeight/2, unID, gs_open3D, 3 : unID=unID+1

add -doorFrameWidth - gs_open3D, panelThk, 0
frameWidth = cabinFrameWidth
frameWidthL = doorFrameWidth
frameWidthR = doorFrameWidth
gosub "Straight_Panel"
del 1

return


! ==============================================================================
"Double_Sliding":
! ==============================================================================

panelWidth = panelWidth/2 + doorFrameWidth
panelHeight = ZZYZX

add xpanelPos + panelWidth - doorFrameWidth, 0, 0
for ii = 1 to 2
	hotspot 0, -B/2 + panelThk, panelHeight/2, unID, gs_open3D, 1+128 : unID=unID+1
	hotspot - gs_open3D, -B/2 + panelThk, panelHeight/2, unID, gs_open3D, 2 : unID=unID+1
	hotspot 1, -B/2 + panelThk, panelHeight/2, unID, gs_open3D, 3 : unID=unID+1
mulx -1
next ii
del 2 + 1

add xpanelPos + panelWidth - doorFrameWidth, panelThk, 0
for ii = 1 to 2
	addx -xPanelpos - panelWidth - gs_open3D
	frameWidth = cabinFrameWidth
	frameWidthL = doorFrameWidth
	frameWidthR = doorFrameWidth
	gosub "Straight_Panel"
	del 1
mulx -1
next ii
del 2 + 1

return


! ==============================================================================
"Corner_Sliding":
! ==============================================================================

panelWidth = panelWidth + cabinFrameWidth + doorFrameWidth - panelThk
panelHeight = ZZYZX

add A/2 - panelThk, yPanelPos + panelThk, 0
for ii = 1 to 2
	addx -gs_open3D
	rotx -90
	rotz 90
	cutplane 45
	del 3
	add -A/2 + panelThk, -yPanelPos - panelThk, 0
	hotspot A/2 - panelThk, -B/2 + panelThk, panelHeight/2, unID, gs_open3D, 1+128 : unID=unID+1
	hotspot A/2 - panelThk- gs_open3D, -B/2 + panelThk, panelHeight/2, unID, gs_open3D, 2 : unID=unID+1
	hotspot A/2 - panelThk+ 1, -B/2 + panelThk, panelHeight/2, unID, gs_open3D, 3 : unID=unID+1

	add -doorFrameWidth - gs_open3D, panelThk, 0
	frameWidth = cabinFrameWidth
	frameWidthL = doorFrameWidth
	frameWidthR = doorFrameWidth
	gosub "Straight_Panel"
	del 1 + 1
	cutend
mulx -1
rotz -90
next ii
del 4 + 1

return


! ==============================================================================
"Curved_Simple_Leaf":
! ==============================================================================

panelHeight = ZZYZX - 2 * cabinFrameWidth * bFramedPanel
add xPanelPos, yPanelPos, 0
rotz -arcAngle/2 + panelRotation
if bMirrorDoor then
	rotz arcAngle/2
	addx doorWidth
	mulx -1
	rotz -arcAngle/2
endif

if bFramedPanel then
	fi = 0
	rotW = doorWidth
	hingeAngleL = 0
	xHingePos = 0
	yHingePos = 0
else
	if iCabinForm = CABINFORM_ROUNDEDCORNER then
		nSegment1 = round_int((360 - arcAngle)/360*gs_resol)
		nSegment2 = gs_resol - nSegment1
		hingeAngleL = 0
		hingeAngleR = (arcAngle/nSegment2)/2

		xHingePos = hingeThk/2 * tan((arcAngle/nSegment2)/4)
		yHingePos = - hingeThk/2
		di = 135 - (arcAngle/nSegment2)/4
		rd = sqr(xHingePos^2 + yHingePos^2)
		rotW = sqr(doorWidth^2 + rd^2 - 2 * doorWidth * rd * cos(di))
		fi = asn(rd / rotW * sin(di))
	endif
	if iCabinForm = CABINFORM_ROUNDEDPENINSULAR | iCabinForm = CABINFORM_ROUND then
		nSegment1 = round_int((360 - arcAngle)/360*gs_resol)
		nSegment2 = gs_resol - nSegment1
		if iCabinForm = CABINFORM_ROUNDEDPENINSULAR then nSegment3 = round_int((90 - arcAngle/2)/360*gs_resol)
		if iCabinForm = CABINFORM_ROUND then nSegment3 = round_int((360 - arcAngle)/360*gs_resol)
		if iCabinForm = CABINFORM_ROUNDEDPENINSULAR then hingeAngleL = -((90 - arcAngle/2)/nSegment3)/2
		if iCabinForm = CABINFORM_ROUND then hingeAngleL = -((360 - arcAngle)/nSegment3)/2
		hingeAngleR = (arcAngle/nSegment2)/2

		xHingePos = 0
		yHingePos = - hingeThk/2/cos(hingeAngleR)
		di = 135 - (arcAngle/nSegment2)/4
		rd = sqr(xHingePos^2 + yHingePos^2)
		rotW = sqr(doorWidth^2 + rd^2 - 2 * doorWidth * rd * cos(di))
		fi = asn(rd / rotW * sin(di))
	endif

	add xHingePos, yHingePos, 0
	gosub "Hinge"
	del 1
endif

add xHingePos, yHingePos, 0
rotz fi + arcAngle/2
hotspot rotW, 0, panelheight/2 + cabiFrameWidth * bFramedPanel, unID, gs_open_3D, 4+128 : unID = unID + 1
hotspot rotW*cos(gs_open_3D), -rotW*sin(gs_open_3D), panelHeight/2 + cabinFrameWidth * bFramedPanel, unID, gs_open_3D, 5 : unID = unID + 1
hotspot 0, 0, panelheight/2 + cabinFrameWidth * bFramedPanel, unID, gs_open_3D, 6 : unID = unID + 1
hotspot 0, 0, panelheight * bMirrorDoor, unID, gs_open_3D, 7 : unID = unID + 1
del 2

add xHingePos, yHingePos, cabinFrameWidth * bFramedPanel
rotz -gs_open_3D
add -xHingePos, -yHingePos, 0
xPanelPos = 0
yPanelPos = 0
panelRotation = 0
frameWidth = doorFrameWidth
frameWidthL = doorFrameWidth
frameWidthR = doorFrameWidth
gosub "Curved_Panel"
del 3

del 2 + bMirrorDoor * 4

return


! ==============================================================================
"Curved_Double_Leaf":
! ==============================================================================

panelWidthHalf = panelWidth/2
xPanelPosMod = xPanelPos
yPanelPosMod = yPanelPos
panelRotMod = panelRotation
arcAngleMod = arcAngle
panelHeight = ZZYZX - 2 * cabinFrameWidth * bFramedPanel

for ii = 1 to 2

add xPanelPosMod, yPanelPosMod, 0
rotz -arcAngleMod/2 + panelRotMod
if ii = 2 then
	rotz arcAngleMod/2
	addx doorWidth
	mulx -1
	rotz -arcAngleMod/2
endif

if bFramedPanel then
	fi = 0
	rotW = ((arcRadius+panelThk) * sin(arcAngleMod/4))*2
	hingeAngleL = 0
	xHingePos = 0
	yHingePos = 0
else
	if iCabinForm = CABINFORM_ROUNDEDCORNER then
		nSegment1 = round_int((360 - arcAngleMod)/360*gs_resol)
		nSegment2 = gs_resol - nSegment1
		hingeAngleL = 0
		hingeAngleR = (arcAngleMod/nSegment2)/2

		xHingePos = hingeThk/2 * tan((arcAngleMod/nSegment2)/4)
		yHingePos = - hingeThk/2
		di = 135 - arcAngleMod/4 - (arcAngleMod/nSegment2)/4
		rd = sqr(xHingePos^2 + yHingePos^2)
		doorWidthHalf = ((arcRadius+panelThk) * sin(arcAngleMod/4))*2
		rotW = sqr(doorWidthHalf^2 + rd^2 - 2 * doorWidthHalf * rd * cos(di))
		fi = asn(rd / rotW * sin(di))
	endif
	if iCabinForm = CABINFORM_ROUNDEDPENINSULAR | iCabinForm = CABINFORM_ROUND then
		nSegment1 = round_int((360 - arcAngleMod)/360*gs_resol)
		nSegment2 = gs_resol - nSegment1
		if iCabinForm = CABINFORM_ROUNDEDPENINSULAR then nSegment3 = round_int((90 - arcAngleMod/2)/360*gs_resol)
		if iCabinForm = CABINFORM_ROUND then nSegment3 = round_int((360 - arcAngleMod)/360*gs_resol)
		if iCabinForm = CABINFORM_ROUNDEDPENINSULAR then hingeAngleL = -((90 - arcAngleMod/2)/nSegment3)/2
		if iCabinForm = CABINFORM_ROUND then hingeAngleL = -((360 - arcAngleMod)/nSegment3)/2
		hingeAngleR = (arcAngleMod/nSegment2)/2

		xHingePos = 0
		yHingePos = - hingeThk/2/cos(hingeAngleR)
		di = 90 + arcAngleMod/4
		rd = sqr(xHingePos^2 + yHingePos^2)
		doorWidthHalf = ((arcRadius+panelThk) * sin(arcAngleMod/4))*2
		rotW = sqr(doorWidthHalf^2 + rd^2 - 2 * doorWidthHalf * rd * cos(di))
		fi = asn(rd / rotW * sin(di))
	endif

	add xHingePos, yHingePos, 0
	gosub "Hinge"
	del 1
endif

add xHingePos, yHingePos, 0
rotz fi + arcAngleMod/4
hotspot rotW, 0, panelheight/2 + cabinFrameWidth * bFramedPanel, unID, gs_open_3D, 4+128 : unID = unID + 1
hotspot rotW*cos(gs_open_3D), -rotW*sin(gs_open_3D), panelHeight/2 + cabinFrameWidth * bFramedPanel, unID, gs_open_3D, 5 : unID = unID + 1
hotspot 0, 0, panelheight/2 + cabinFrameWidth * bFramedPanel, unID, gs_open_3D, 6 : unID = unID + 1
hotspot 0, 0, panelHeight * (ii = 2), unID, gs_open_3D, 7 : unID = unID + 1
del 2

add xHingePos, yHingePos, cabinFrameWidth * bFramedPanel
rotz -gs_open_3D
add -xHingePos, -yHingePos, 0
xPanelPos = 0
yPanelPos = 0
panelRotation = 0
panelWidth = panelWidthHalf
frameWidth = doorFrameWidth
frameWidthL = doorFrameWidth
frameWidthR = doorFrameWidth
gosub "Curved_Panel"
del 3

del 2 + (ii = 2) * 4

next ii

return


! ==============================================================================
"Curved_Sliding":
! ==============================================================================

arcRadius = arcRadius - panelThk
rotW = arcRadius + panelThk
panelWidth = arcRadius * PI * arcAngle/180

add xPanelPos, yPanelPos, 0
rotz -arcAngle/2 + panelRotation
panelRotation = 0
xPanelPos = 0
yPanelPos = 0
hotspot rotW*sin(arcAngle), arcRadius + panelThk - rotW*cos(arcAngle), panelheight/2, unID, gs_open_3D, 4+128, gs_open3D : unID = unID + 1
hotspot rotW*sin(arcAngle - gs_open_3D), arcRadius + panelThk - rotW*cos(arcAngle - gs_open_3D), panelHeight/2, unID, gs_open_3D, 5, gs_open3D : unID = unID + 1
hotspot 0, arcRadius + panelThk, panelheight/2, unID, gs_open_3D, 6, gs_open3D : unID = unID + 1
hotspot 0, arcRadius + panelThk, 0, unID, gs_open_3D, 7, gs_open3D : unID = unID + 1

panelHeight = ZZYZX
add 0, arcRadius + panelThk, 0
rotz -gs_open_3D
add 0, -arcRadius - panelThk, 0
frameWidth = cabinFrameWidth
frameWidthL = doorFrameWidth
frameWidthR = doorFrameWidth
gosub "Curved_Panel"
del 3

if not(bFramedPanel) then
	add xPanelPos, yPanelPos - hingeThk, 0
	gosub "Stiffening"
	del 1
endif
del 2

return


! ==============================================================================
"Curved_Double_Sliding":
! ==============================================================================

arcRadius = arcRadius - panelThk
rotW = arcRadius + panelThk
panelWidth = arcRadius * PI * arcAngle/180/2

add xPanelPos, yPanelPos, 0
rotz panelRotation
add (arcRadius + panelThk) * sin(arcAngle/2), (arcRadius + panelThk) * cos(arcAngle/2), 0

panelRotation = 0
xPanelPos = 0
yPanelPos = 0
for ii = 1 to 2
	if ii = 2 then rotz arcAngle/2
	hotspot 0, -rotW, panelheight/2, unID, gs_open_3D, 4+128, gs_open3D : unID = unID + 1
	hotspot -rotW*sin(gs_open_3D), - rotW*cos(gs_open_3D), panelHeight/2, unID, gs_open_3D, 5, gs_open3D : unID = unID + 1
	hotspot 0, 0, panelheight/2, unID, gs_open_3D, 6, gs_open3D : unID = unID + 1
	hotspot 0, 0, (ii-1)*panelheight, unID, gs_open_3D, 7, gs_open3D : unID = unID + 1
	if ii = 2 then del 1

	panelHeight = ZZYZX
	rotz -gs_open_3D - arcAngle/2
	add 0, -arcRadius - panelThk, 0
	frameWidth = cabinFrameWidth
	frameWidthL = doorFrameWidth
	frameWidthR = doorFrameWidth
	gosub "Curved_Panel"
	del 2
rotz arcAngle/2
mulx -1
next ii
del 4

del 3

return


! ==============================================================================
"Straight_Panel":
! ==============================================================================

add xPanelPos, yPanelPos, 0
rotz panelRotation

if bFramedPanel then
	material matFrame
	cutDepth = frameThk
else
	material matGlass
	cutDepth = glassThk
endif
if cutAngleL > 0 then
	cutpolya 3, 1, 0,
		0, 0, 2 + 64,
		cutDepth * tan(cutAngleL), cutDepth, 2 + 64,
		0, cutDepth, 2 + 64
endif
if cutAngleR > 0 then
	cutpolya 3, 1, 0,
		panelWidth, 0, 2 + 64,
		panelWidth - sin(cutAngleR), cos(cutAngleR), 2 + 64,
		panelWidth, cos(cutAngleR), 2 + 64
endif

if not(bFramedPanel) then
	material matGlass
	addy glassThk
	rotx 90
	prism_ 5, glassThk,
		glassThk * tan(cutAngleL), 0, 15,
		panelWidth - glassThk * tan(cutAngleR), 0, 15,
		panelWidth - glassThk * tan(cutAngleR), panelHeight, 15,
		glassThk * tan(cutAngleL), panelHeight, 15,
		glassThk * tan(cutAngleL), 0, -1
	del 2

	for hi = 1 to 2
	lin_ panelWidth, 0, 0, panelWidth, 0, panelHeight
	addy panelThk
	next hi
	del 2
else
	material matFrame
	addy frameThk
	rotx 90
	cutpolya 5, 2, 0,
		frameWidthL, frameWidth, 7,
		panelWidth - frameWidthR, frameWidth, 7,
		panelWidth - frameWidthR, panelHeight - frameWidth, 7,
		frameWidthL, panelHeight - frameWidth, 7,
		frameWidthL, frameWidth, -1
	prism_ 5, frameThk,
		0, 0, 15 - frameMaskL/3.5,
		panelWidth, 0, 15 - frameMaskR,
		panelWidth, panelHeight, 15 - framemaskR/3.5,
		0, panelHeight, 15 - frameMaskL,
		0, 0, -1
	cutend
	del 2

	if not(withoutGlas) then
		material matGlass
		addy frameThk/2 + glassThk/2
		rotx 90
		prism_ 5, glassThk,
			frameWidthL, frameWidth, 15,
			panelWidth - frameWidthR, frameWidth, 15,
			panelWidth - frameWidthR, panelHeight - frameWidth, 15,
			frameWidthL, panelHeight - frameWidth, 15,
			frameWidthL, frameWidth, -1
		del 2
	else
		for hi = 1 to 2
		lin_ frameWidthL, 0, frameWidth, panelWidth - frameWidthR, 0, frameWidth
		if frameWidthR > 0 then lin_ panelWidth - frameWidthR, 0, frameWidth, panelWidth - frameWidthR, 0, panelHeight - frameWidth
		lin_ panelWidth - frameWidthR, 0, panelHeight - frameWidth, frameWidthL, 0, panelHeight - frameWidth
		if frameWidthL > 0 then lin_ frameWidthL, 0, panelHeight - frameWidth, frameWidthL, 0, frameWidth
		addy panelThk
		next hi
		del 2
	endif
endif

if cutAngleL > 0 then cutend
if cutAngleR > 0 then cutend

if not(bFramedPanel) then
	if iStiffL > 0 then
		stiffType = iStiffL
		stiffAngle = 0
		gosub "Stiffening"
	endif
	if iStiffR > 0 then
		addx panelWidth
		mulx -1
		stiffType = iStiffR
		stiffAngle = 0
		gosub "Stiffening"
		del 2
	endif
	if bBracket then						!Bracket in case of Fully Glazed
		if bCeilingStiffL then
			stiffAngle = 90
			gosub "Ceiling_Stiffening"
		endif
		if bCeilingStiffR then
			stiffAngle = 180
			addx panelWidth
			gosub "Ceiling_Stiffening"
			del 1
		endif
	endif
endif

if gs_detlevel_3D_m = 2 & bHandle then
	for ki = 1 to 2
		add panelWidth - 0.06, 0, 0.9 - frameWidth * bFramedPanel * (iDoorType < 9) + zHandlePos
		call "fa_knobtyp" parameters all gs_knob_type_m = gs_knob_type_m,
										knob_size		= knob_size
		del 1
	muly -1
	addy -panelThk
	next ki
	del 4
endif

del 2

frameWidthL = frameWidth
frameWidthR = frameWidth
frameMaskR = 0
frameMaskL = 0
withoutGlas = 0
cutAngleL = 0
cutAngleR = 0

return


! ==============================================================================
"Curved_Panel":
! ==============================================================================

arcAngle = panelWidth/arcRadius/PI*180
frameAngleL = frameWidthL/(arcRadius*PI)*180
frameAngleR = frameWidthR/(arcRadius*PI)*180
if arcAngle > 90 & arcAngle < 270 then tanMod = 1 else tanMod = -1
nSegment1 = round_int((360 - arcAngle)/360*gs_resol)
nSegment2 = gs_resol - nSegment1

add xPanelPos, yPanelPos, 0
rotz panelRotation

if bFramedPanel then
	material matFrame
	cutDepth = frameThk
else
	material matGlass
	cutDepth = glassThk
endif

if bFramedPanel then
	material matFrame
	addz frameWidth
	if arcAngle < 180 then
		cutform 4, 1, 1 + 2,
			0, 0, 1, panelHeight - 2*frameWidth,
			0, arcRadius + panelThk, 95,
			2*(arcRadius + panelThk)*sin(frameAngleL), (arcRadius + panelThk) * (1 - 2*cos(frameAngleL)), 95,
			2*(arcRadius + panelThk)*sin(arcAngle - frameAngleR), (arcRadius + panelThk) * (1 - 2*cos(arcAngle - frameAngleR)), 95,
			0, arcRadius + panelThk, -1
	else
		cutform 7, 1, 1 + 2,
			0, 0, 1, panelHeight - 2*frameWidth,
			0, arcRadius + panelThk, 95,
			2*(arcRadius + panelThk)*sin(frameAngleL), (arcRadius + panelThk) * (1 - 2*cos(frameAngleL)), 95,
			A, (arcRadius + panelThk) * (1 - 2*cos(frameAngleL)), 95,
			A, 2*B, 95,
			2*(arcRadius + panelThk)*sin(arcAngle - frameAngleR), 2*B, 95,
			2*(arcRadius + panelThk)*sin(arcAngle - frameAngleR), (arcRadius + panelThk) * (1 - 2*cos(arcAngle - frameAngleR)), 95,
			0, arcRadius + panelThk, -1
	endif
	del 1
	prism_ 7, panelHeight,
		0, 0, 15 + 64 - frameMaskL/3.5,
		1, 0, 800,
		(arcRadius + panelThk) * sin(arcAngle), (arcRadius + panelThk) * (1 - cos(arcAngle)), 1015 - frameMaskR,
		(arcRadius) * sin(arcAngle), (arcRadius + panelThk) - (arcRadius)*cos(arcAngle), 15 + 64 - frameMaskR/3.5,
		tanMod, tanMod * tan(arcAngle), 800,
		0, panelThk, 1015 - frameMaskL,
		0, 0, -1
	cutend

	if abs(gs_open_3D) < eps then
		for ji = 1 to 2
		poly_ 7,
			0, 0, 1,
			1, 0, 800,
			(arcRadius + panelThk) * sin(arcAngle), (arcRadius + panelThk) * (1 - cos(arcAngle)), 1001,
			(arcRadius) * sin(arcAngle), (arcRadius + panelThk) - (arcRadius)*cos(arcAngle), 1,
			tanMod, tanMod * tan(arcAngle), 800,
			0, panelThk, 1001 - frameMaskL/7,
			0, 0, -1
		addz panelHeight
		next ji
		del 2
	endif

	if not(withoutGlas) then
		material matGlass
		cutform 4, 1, 1 + 2,
			0, 0, 1, panelHeight,
			0, arcRadius + panelThk, 95,
			0, 0, 95,
			(arcRadius + panelThk)*sin(frameAngleL), (arcRadius + panelThk) * (1 - cos(frameAngleL)), 95,
			0, arcRadius + panelThk, -1
		cutform 4, 1, 1 + 2,
			0, 0, 1, panelHeight,
			0, arcRadius + panelThk, 95,
			(arcRadius + panelThk)*sin(arcAngle - frameAngleR), (arcRadius + panelThk) * (1 - cos(arcAngle - frameAngleR)), 95,
			(arcRadius + panelThk)*sin(arcAngle), (arcRadius + panelThk) * (1 - cos(arcAngle)), 95,
			0, arcRadius + panelThk, -1
		addz frameWidth
		prism_ 7, panelHeight - 2*frameWidth,
			0, panelThk/2 - glassThk/2, 15 + 64,
			1, 0, 800,
			(arcRadius + panelThk/2 + glassThk/2) * sin(arcAngle), (arcRadius + panelThk) - (arcRadius + panelThk/2 + glassThk/2)*cos(arcAngle), 1015,
			(arcRadius + panelThk/2 - glassThk/2) * sin(arcAngle), (arcRadius + panelThk) - (arcRadius + panelThk/2 - glassThk/2)*cos(arcAngle), 15 + 64,
			tanMod, tanmod * tan(arcAngle), 800,
			0, panelThk/2 + glassThk/2, 1015,
			0, panelThk/2 - glassThk/2, -1
		del 1
		cutend
		cutend
	endif
else
	material matGlass
	prism_ 7, panelHeight,
		0, 0, 15 + 64,
		1, 0, 800,
		(arcRadius + panelThk) * sin(arcAngle), (arcRadius + panelThk) * (1 - cos(arcAngle)), 1015,
		(arcRadius) * sin(arcAngle), (arcRadius + panelThk) - (arcRadius)*cos(arcAngle), 15 + 64,
		tanMod, tanMod * tan(arcAngle), 800,
		0, panelThk, 1015,
		0, 0, -1
endif

if gs_detlevel_3D_m = 2 & bHandle then
	add (arcRadius + panelThk) * sin(arcAngle), (arcRadius + panelThk) * (1 - cos(arcAngle)), 0.9 - frameWidth * bFramedPanel * (iDoorType < 9) + zHandlePos
	rotz arcAngle - (arcAngle/nSegment2)/2
	add -0.06, bFramedPanel * (frameThk/2 - glassThk/2), 0
	for ki = 1 to 2
		call "fa_knobtyp" parameters all gs_knob_type_m = gs_knob_type_m,
										knob_size		= knob_size
	muly -1
	addy -glassThk * cos((arcAngle/nSegment2)/2)
	next ki
	del 4
	del 1+1+1
endif

del 2

frameWidthL = frameWidth
frameWidthR = frameWidth
frameWidthB = frameWidth
frameWidthT = frameWidth
frameMaskR = 0
frameMaskL = 0
withoutGlas = 0
cutAngleL = 0
cutAngleR = 0

return


! ==============================================================================
"Straight_Curved_Panel":
! ==============================================================================

arcRadius = A/2 - panelThk
arcAngle = 2 * asn(doorWidth/A)
frameAngle = cabinFrameWidth/(arcRadius*PI)*180

if bFramedPanel then
	material matFrame
	cutDepth = frameThk
else
	material matGlass
	cutDepth = glassThk
endif

if bFramedPanel then
	material matFrame
	add 0, 0, cabinFrameWidth
	cutform 3, 1, 1 + 2 + 64*0 + 128*0,
		0, 0, 1, panelHeight - 2*cabinFrameWidth,
		0, -B/2 + A/2, 95,
		-A*tan(asn(doorWidth/A)), -B/2 + A/2 - A, 95,
		A*tan(asn(doorWidth/A)), -B/2 + A/2 - A, 95
	cutform 4, 1, 1 + 2 + 64*0 + 128*0,
		0, 0, 1, panelHeight - 2*cabinFrameWidth,
		0, -B/2 + A/2, 95,
		-A*tan(asn(doorWidth/A)+frameAngle), -B/2 + A/2 - A, 95,
		-A*tan(asn(doorWidth/A)+frameAngle), B/2 - cabinFrameWidth, 95,
		0, B/2 - cabinFrameWidth, 95
	cutform 4, 1, 1 + 2 + 64*0 + 128*0,
		0, 0, 1, panelHeight - 2*cabinFrameWidth,
		0, -B/2 + A/2, 95,
		A*tan(asn(doorWidth/A)+frameAngle), -B/2 + A/2 - A, 95,
		A*tan(asn(doorWidth/A)+frameAngle), B/2 - cabinFrameWidth, 95,
		0, B/2 - cabinFrameWidth, 95
	del 1
	if iDoorType = DOORTYPE_SIMPLELEAF | iDoorType = DOORTYPE_SLIDING then
		put -(A/2)*sin(arcAngle/2), -B/2+A/2-(A/2)*cos(arcAngle/2), 1015 + 64
		put (A/2)*sin(arcAngle/2), -B/2+A/2-(A/2)*cos(arcAngle/2), 1015 + 64
		put (A/2 - panelThk)*sin(arcAngle/2), -B/2+A/2-(A/2 - panelThk)*cos(arcAngle/2), 1015 + 64
		put -(A/2 - panelThk)*sin(arcAngle/2), -B/2+A/2-(A/2 - panelThk)*cos(arcAngle/2), 1015 + 64
	else
		put -(A/2)*sin(arcAngle/2), -B/2+A/2-(A/2)*cos(arcAngle/2), 1015 + 64
		put 0, -B/2, 1015 + 64
		put (A/2)*sin(arcAngle/2), -B/2+A/2-(A/2)*cos(arcAngle/2), 1015 + 64
		put (A/2 - panelThk)*sin(arcAngle/2), -B/2+A/2-(A/2 - panelThk)*cos(arcAngle/2), 1015 + 64
		put 0, -B/2 + panelthk, 1015 + 64
		put -(A/2 - panelThk)*sin(arcAngle/2), -B/2+A/2-(A/2 - panelThk)*cos(arcAngle/2), 1015 + 64
	endif
	prism_ 9 + nsp/3, panelHeight,
		-A/2, B/2, 15,
		-A/2, -B/2 + A/2, 15 + 64,
		get(nsp/2),
		 A/2, -B/2 + A/2, 1015 + 64,
		 A/2, B/2, 15,
		 A/2 - panelThk, B/2, 15,
		 A/2 - panelThk, -B/2 + A/2, 15 + 64,
		get(nsp),
		-A/2 + panelThk, -B/2 + A/2, 1015 + 64,
		-A/2 + panelThk, B/2, 15,
		-A/2, B/2, -1
	cutend
	cutend
	cutend

	material matGlass
	addz cabinFrameWidth
	for ji = 1 to 2
		cutform 3, 1, 1 + 2 + 64*0 + 128*0,
			0, 0, 1, panelHeight - 2*cabinFrameWidth,
			0, -B/2 + A/2, 95,
			-A*tan(asn(doorWidth/A) + frameAngle), -B/2 + A/2 - A, 95,
			A*tan(asn(doorWidth/A)) + frameAngle, -B/2 + A/2 - A, 95
		prism_ 8, panelHeight - 2*cabinFrameWidth,
			-A/2 + panelThk/2 - glassThk/2, B/2 - cabinFrameWidth, 15,
			-A/2 + panelThk/2 - glassThk/2, -B/2 + A/2, 15 + 64,
			-(A/2 - panelThk/2 + glassThk/2)*sin(arcAngle/2), -B/2+A/2-(A/2 - panelThk/2 + glassThk/2)*cos(arcAngle/2), 1015,
			-(A/2 - panelThk/2 - glassThk/2)*sin(arcAngle/2), -B/2+A/2-(A/2 - panelThk/2 - glassThk/2)*cos(arcAngle/2), 15 + 64,
			0, -B/2 + A/2, 900,
			-A/2 + panelThk/2 + glassThk/2, -B/2 + A/2, 3015 + 64,
			-A/2 + panelThk/2 + glassThk/2, B/2 - cabinFrameWidth, 15,
			-A/2 + panelThk/2 - glassThk/2, B/2 - cabinFrameWidth, -1
		cutend
	mulx -1
	next ji
	del 2 + 1
else
	for ji = 1 to 2
	material matGlass
	prism_ 8, panelHeight,
		-A/2, B/2, 15,
		-A/2, -B/2 + A/2, 15 + 64,
		-(A/2)*sin(arcAngle/2), -B/2+A/2-(A/2)*cos(arcAngle/2), 1015,
		-(A/2 - glassThk)*sin(arcAngle/2), -B/2+A/2-(A/2 - glassThk)*cos(arcAngle/2), 15 + 64,
		0, -B/2 + A/2, 900 + 64,
		-A/2 + glassThk, -B/2 + A/2, 3015 + 64,
		-A/2 + glassThk, B/2, 15,
		-A/2, B/2, -1

	stiffType = 2
	stiffAngle = 270
	add -A/2, B/2, 0
	gosub "Stiffening"
	del 1

	stiffAngle = 0
	add -A/2, B/2, 0
	if bBracket then gosub "Ceiling_Stiffening"			!Bracket in case of Fully Glazed
	del 1
	mulx -1
	next ji
	del 2
endif

frameWidthL = frameWidth
frameWidthR = frameWidth
frameWidthB = frameWidth
frameWidthT = frameWidth
frameMaskR = 0
frameMaskL = 0
withoutGlas = 0
cutAngleL = 0
cutAngleR = 0

return


! ==============================================================================
"Hinge":
! ==============================================================================

if gs_detlevel_3D_m = 2 then
	material matFrame
	resol 6
	for hi = 1 to 2
		addz panelHeight/8 - hingeHeight/2
		rotz hingeAngleL
		add  - hingeWidth, hingeThk/2, 0

		rotx 90
		cutpolya 4, 1, 0,
			hingeWidth - hingeThk/2, hingeHeight/2, 7,
			hingeWidth*2, hingeHeight/2, 7,
			hingeWidth*2, hingeHeight, 7,
			hingeWidth - hingeThk/2, hingeHeight, 7
		del 1

		prism_ 5, hingeHeight,
			0, 0, 15,
			hingeWidth, 0, 15 + 64,
			hingeWidth, -hingeThk, 1015 + 64,
			0, -hingeThk, 15,
			0, 0, -1
		cutend
		del 2

		rotz hingeAngleR - gs_open_3D
		add  hingeWidth, hingeThk/2, 0

		rotx 90
		cutpolya 4, 1, 0,
			-hingeWidth + hingeThk/2, 0, 7,
			-hingeWidth*2, 0, 7,
			-hingeWidth*2, hingeHeight/2, 7,
			-hingeWidth + hingeThk/2, hingeHeight/2, 7
		del 1

		prism_ 5, hingeHeight,
			0, 0, 15,
			-hingeWidth, 0, 15 + 64,
			-hingeWidth, -hingeThk, 1015 + 64,
			0, -hingeThk, 15,
			0, 0, -1
		cutend
		del 2

		del 1
	addz panelHeight/8*6
	next hi
	del 2
	resol gs_resol
endif

return


! ==============================================================================
"Stiffening":
! ==============================================================================

if gs_detlevel_3D_m = 2 then
	material matFrame
	rotz stiffAngle
	if stiffType = 2 then		! Wall
		for hi = 1 to 2
			add 0, -hingeThk, panelheight/8 - hingeHeight/2
			block hingeWidth, hingeThk, hingeHeight
			del 1
		addz panelheight/8*6
		next hi
		del 2
	endif
	if stiffType = 1 then		! Corner
		for hi = 1 to 2
			addz panelheight/8 - hingeHeight/2
			prism_ 7, hingeHeight,
				0, 0, 15,
				hingeWidth, 0, 15,
				hingeWidth, -hingeThk, 15,
			   -hingeThk, -hingeThk, 15,
			   -hingeThk, +hingeWidth, 15,
				0, +hingeWidth, 15,
				0, 0, -1
			del 1
		addz panelheight/8*6
		next hi
		del 2
	endif
	del 1
endif

return


! ==============================================================================
"Ceiling_Stiffening":
! ==============================================================================

if gs_detlevel_3D_m = 2 then
	material matFrame
	if iCabinForm <> CABINFORM_ROUNDEDPENINSULAR then
		stiffWidth = min(panelWidth, A/5, B/5)
	else
		stiffWidth = min(A/5, B/5)
	endif
	rotz stiffAngle
	if not(bCeiling) then		! !Bracket
		addz ZZYZX
		prism_ 5, ceilingThk/2,
			0, -stiffWidth, 15,
			stiffWidth, 0, 15,
			stiffWidth - 0.02, 0, 15,
			0, -stiffWidth + 0.02, 15,
			0, -stiffWidth, -1
		del 1
	endif
	del 1
endif

return

