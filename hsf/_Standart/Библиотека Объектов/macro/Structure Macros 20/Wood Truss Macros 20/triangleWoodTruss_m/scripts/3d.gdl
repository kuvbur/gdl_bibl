
if gs_detlevel_3D_m = DETLEVEL3D_OFF then end

! ==============================================================================
! 2D Display Options
! ==============================================================================

!gs_2D_projection_type:
!	0 - Normal 3D
!	1 - View Edges
!	2 - View Polygons
!	3 - Overhead Edges
!	4 - Cut Lines
!	5 - Cut Polygons
!	6 - Bottom Range Cut Lines
!	7 - Top Range Cut Lines

nProjectionCut = 0
if gs_2D_projection then
	if AC_symb_show_projection_to = PROJECTION_FLOOR_PLAN_RANGE | (AC_symb_show_projection_to = PROJECTION_DISPLAY_LIMIT & gs_bottom_range_height < gs_cutplane_height) then
		addz gs_bottom_range_height
		cutplane{2} 180, 2
		nProjectionCut = nProjectionCut + 1
		del 1
	endif
	if gs_2D_projection_type <> 6 then
		addz gs_cutplane_height
		cutplane{2} 180 * (gs_2D_projection_type = 3), 1
		nProjectionCut = nProjectionCut + 1
		del 1
	endif
	if AC_symb_show_projection_to <> 3 then
		addz gs_top_range_height
		cutplane{2} 0, 2
		nProjectionCut = nProjectionCut + 1
		del 1
	endif
endif

if gs_shadow = 0 then SHADOW OFF
if gs_shadow = 1 then SHADOW ON


! =============================================================================
! Coordinate calculation
! =============================================================================

! Ending coordinates ----------------------------------------------------------

end1x = -A/2
end1y = -eaveHeight + yy
end2x = -A/2 + xx
end2y = -eaveHeight
if iEndType = END_RECTANGULAR then
	end3x = -A/2
	end3y = -eaveHeight
endif
if iEndType = END_CUSTOM_CUT then
	end3x = -A/2
	end3y = -eaveHeight - yyMod

	x11 = end1x
	y11 = end1y
	x12 = end1x + cos(topFlangeAngle)
	y12 = end1y - sin(topFlangeAngle)

	x21 = end2x
	y21 = end2y
	x22 = end3x
	y22 = end3y

	gosub "Line - Line intersection"

	if state = 1 & cx < 0 then
		end3x = cx
		end3y = cy
	else
		end3x = 0
		end3y = 0
	endif

endif


! =============================================================================
! 3D
! =============================================================================

unID = 1
gosub "Hotspot Editing"


pen gs_pen_3d

add tieBeamLength/2, B, 0
rotx 90


! Truss elements 3D -----------------------------------------------------------

material gs_truss_mat

! Tie beam - common part
prism_	4, B,
		tieBeamBottomLx,	tieBeamBottomLy,	15,
		tieBeamBottomRx,	tieBeamBottomRy,	15,
		triangleInRx,		triangleInRy,		15,
		triangleInLx,		triangleInLy,		15

for i = 1 to 2
	material gs_truss_mat

	! Rafters - common part
	if iEndType < 4 then
		prism_	4, B,
				end1x,			end1y,			15,
				end2x,			end2y,			15,
				triangleInTx,	triangleInTy,	15,
				triangleOutTx,	triangleOutTy,	15
	else
		prism_	5, B,
				end1x,			end1y,			15,
				end3x,			end3y,			15,
				end2x,			end2y,			15,
				triangleInTx,	triangleInTy,	15,
				triangleOutTx,	triangleOutTy,	15
	endif

	if (gs_detlevel_3D_m = DETLEVEL3D_DETAILED) then

		! -----------------------------------------------------------------------------
		if iTrussType = TRUSS_PITCHED_COMPLEX then
		! -----------------------------------------------------------------------------

			material gs_truss_mat

			add -triangleOutRx, 0, 0

			! First inclined web beam from outside
			dx11 = triangleOutRx - delx
			dx1 = dx/2 + dx11
			dy1 = (dx1)*tan(ang) - rafterHeight/cos(ang)

			dr1 = sqr((dx*dx/4) + (dy1 - tieBeamHeight)^2)
			bet1 = asn(webBeamHeight/dr1)
			bet2 = atn((dy1 - tieBeamHeight)/(dx/2))
			bet = bet2 + bet1

			if 90 - bet > ang then
				bet3 = 90 - bet - ang
			else
				bet3 = ang - (90 - bet)
			endif

			dr12 = webBeamHeight / cos(bet3)
			dx12 = dr12 * cos(ang)
			dy12 = dr12 * sin(ang)

			prism_ 4, B, 
				dx1,									dy1,			15,
				dx + dx11 - (webBeamHeight/sin(bet)),	tieBeamHeight,	15,
				dx + dx11,								tieBeamHeight,	15,
				dx1 + dx12,								dy1 + dy12,		15

			! Second inclined web beam from outside
			dx2 = dx * 1.5 + dx11
			dy2 = dx2 * tan(ang) - rafterHeight/cos(ang)
			dr2 = sqr((dx*dx/4) + (dy2 - tieBeamHeight)^2)
			bet4 = asn(webBeamHeight/dr2)
			bet5 = atn((dy2 - tieBeamHeight)/(dx/2))
			gam = bet4 + bet5
	
			bet6 = gam - ang

			dr22 = webBeamHeight / sin(bet6)
			dx22 = dr22 * cos(ang)
			dy22 = dr22 * sin(ang)

			prism_ 4, B,
				dx2,									dy2,			15,
				dx + dx11 + (webBeamHeight/sin(gam)),	tieBeamHeight,	15,
				dx + dx11,								tieBeamHeight,	15,
				dx2 - dx22,								dy2 - dy22,		15

			! Third inclined web beam from outside
			dx3 = dx*2 + dx11
			dy3 = dx3 * tan(ang) - rafterHeight/cos(ang)
			dr3 = sqr((dx*dx/4) + (dy2 - tieBeamHeight)^2)
			bet7 = asn(webBeamHeight/dr3)
			bet8 = atn((dy2 - tieBeamHeight) / (dx/2))
			delt = bet8 + bet7

			if 90 - delt > ang then
				bet9 = 90 - delt - ang
			else
				bet9 = ang - (90 - delt)
			endif

			dr33 = webBeamHeight / cos(bet9)
			dx33 = dr33 * cos(ang)
			dy33 = dr33 * sin(ang)

			prism_ 4, B,
				dx2,								dy2,			15,
				dx3 - (webBeamHeight/sin(delt)),	tieBeamHeight,	15,
				dx3,								tieBeamHeight,	15,
				dx2 + dx33,							dy2 + dy33,		15

			! Last inclined web beam from outside
			dx4 = triangleOutRx
			dy4 = trussHeight - rafterHeight/cos(ang)
			dr4 = sqr((dx*dx) + (dy4 - tieBeamHeight)^2)
			bet10 = asn(webBeamHeight/dr4)
			bet11 = atn((dy4 - tieBeamHeight)/(dx))
			ome = bet10 + bet11

			bet12 = ome - ang

			dr44 = webBeamHeight / sin(bet12)
			dx44 = dr44 * cos(ang)
			dy44 = dr44 * sin(ang)

			prism_ 4, B,
				dx4,								dy4,			15,
				dx3 + (webBeamHeight / sin(ome)),	tieBeamHeight,	15,
				dx3,								tieBeamHeight,	15,
				dx4 - dx44,							dy4 - dy44,		15

			! Horizontal web beam
			prism_ 4, B,
				dx2 + dx33,														dy2 + dy33,					15,
				dx2 + dx33 + webBeamHeight/tan(ang),							dy2 + dy33 + webBeamHeight,	15,
				dx3 + (dy2 + dy33 - tieBeamHeight + webBeamHeight) / tan(ome),	dy2 + dy33 + webBeamHeight,	15,
				dx3 + (dy2 + dy33 - tieBeamHeight) / tan(ome),					dy2 + dy33,					15

			! Upper inclined web beam
			dy5 = dy2 + dy33
			dx5 = dy5 / tan(ome)
			dx6 = dx3 + (dy2 + dy33) / tan(ome) - (dx2 + dx33)
			dr11 = dx6 * cos(90 - ang)
			dy61 = (dr11 * sin(90 - ang)) + dy5
			dx61 = dr11 * cos(90 - ang)

			zeta = atn( abs(dy61 - (dy2 + dy33 + webBeamHeight))/abs((dy2 + dy33) / tan(ome) - dx61 - (dy2 + dy33 - tieBeamHeight + webBeamHeight) / tan(ome)) )
			teta = 180 - zeta - ome
			dr12 = webBeamHeight / sin(teta)
			dx71 = dr12 * cos(ome)
			dy71 = dr12 * sin(ome)

			prism_ 4, B,
				dx3 + (dy2 + dy33 - tieBeamHeight + webBeamHeight) / tan(ome),			dy2 + dy33 + webBeamHeight,			15,
				dx3 + (dy2 + dy33) / tan(ome) - dx61,									dy61,								15,
				dx3 + (dy2 + dy33) / tan(ome) - dx61 + webBeamHeight*cos(ang),			dy61 + webBeamHeight*sin(ang),		15,
				dx3 + (dy2 + dy33 - tieBeamHeight + webBeamHeight) / tan(ome) + dx71,	dy2 + dy33 + webBeamHeight + dy71,	15

			! Steel plates
			if stp then
				addz -0.005
				material mat2
				for u=1 to 2
					if i = 1 then
						prism_ 5, 0.005,
							dx4 - dx44,							dy4 - dy44,								15,
							dx4 + dx44,							dy4 - dy44,								15,
							dx4 + dx44 + sin(ang)*rafterHeight,	dy4 - dy44 + cos(ang) * rafterHeight,	15,
							triangleOutRx,						trussHeight,							15,
							dx4-dx44-sin(ang)*rafterHeight,		dy4 - dy44 + cos(ang) * rafterHeight,	15
					endif

					! Steel plates in joint of rafter and tie beam
					if (iEndType <> END_HORIZONTAL) then
						addx triangleOutRx + end2x
						roty 90
						cutplane 180 - ang * (iEndType = END_PERPENDICULAR)
						del 2
					endif

					prism_ 5, 0.005,
						triangleOutRx + triangleInLx,							0,											15,
						triangleOutRx + triangleInLx,							triangleInLy,								15,
						triangleOutRx + triangleInLx - rafterHeight * sin(ang), triangleInLy + rafterHeight * cos(ang),		15,
						triangleOutRx + (triangleInLx + triangleOutLx)/2,		(triangleInLy + rafterHeight / cos(ang))/2,	15,
						triangleOutRx + (triangleInLx + triangleOutLx)/2,		0,											15

					if (iEndType <> END_HORIZONTAL) then cutend

					prism_ 4, 0.005,
						dx + dx11 - (webBeamHeight/sin(bet)),	0,								15,
						dx + dx11 - (webBeamHeight/sin(bet)),	tieBeamHeight + webBeamHeight,	15,
						dx + dx11 + (webBeamHeight/sin(gam)),	tieBeamHeight + webBeamHeight,	15,
						dx + dx11 + (webBeamHeight/sin(gam)),	0,								15

					prism_ 4, 0.005,
						dx3 + (webBeamHeight/sin(gam)),		0,								15,
						dx3 + (webBeamHeight/sin(gam)),		tieBeamHeight + webBeamHeight,	15,
						dx3 - (webBeamHeight/sin(delt)),	tieBeamHeight + webBeamHeight,	15,
						dx3 - (webBeamHeight/sin(delt)),	0,								15

					x101 = (rafterHeight/cos(ang))/(tan(ang)+tan(bet))

					prism_ 4, 0.005,
						dx1 + dx12 + rafterHeight*cos(bet),								dy1 + dy12 - rafterHeight*sin(bet),						15,
						dx1 + dx12 + rafterHeight*cos(bet) - webBeamHeight*sin(bet),	dy1 + dy12 - rafterHeight*sin(bet) - webBeamHeight*cos(bet),	15,
						dx1 - x101,														dy1 + x101*tan(bet),									15,
						dx1 + dx12 - x101,												dy1 + dy12 + x101*tan(bet),								15

					prism_ 5, 0.005,
						dx2 - dx22,														dy2 - dy22 + rafterHeight/cos(ang),	15,
						dx2 - dx22,														dy2 - dy22,							15,
						dx2 + dx33 + webBeamHeight/tan(ang),							dy2 - dy22,							15,
						dx2 + dx33 + webBeamHeight/tan(ang),							dy2 + dy33 + webBeamHeight,			15,
						dx2 + dx33 + webBeamHeight/tan(ang) - rafterHeight/sin(ang),	dy2 + dy33 + webBeamHeight,			15

					x101 = (rafterHeight/cos(ang))/(tan(ang)+tan(zeta))

					prism_ 4, 0.005,
						dx3 + (dy2 + dy33) / tan(ome) - dx61 - x101,												dy61 + x101*tan(zeta),										15,
						dx3 + (dy2 + dy33) / tan(ome) - dx61 + webBeamHeight*cos(ang) - x101,						dy61 + webBeamHeight*sin(ang) + x101*tan(zeta),				15,
						dx3 + (dy2 + dy33) / tan(ome) - dx61 + webBeamHeight*cos(zeta) + webBeamHeight*sin(zeta),	dy61 - webBeamHeight*sin(zeta) + webBeamHeight*cos(zeta),	15,
						dx3 + (dy2 + dy33) / tan(ome) - dx61 + webBeamHeight*cos(zeta),								dy61 - webBeamHeight*sin(zeta),								15

					prism_ 6, 0.005,
						dx3 + (dy2 + dy33 - tieBeamHeight + webBeamHeight) / tan(ome) + dx71 + webBeamHeight*sin(ome),	dy2 + dy33 + webBeamHeight + dy71 - webBeamHeight*cos(ome),	15,
						dx3 + (dy2 + dy33 - tieBeamHeight + webBeamHeight) / tan(ome) + dx71,							dy2 + dy33 + webBeamHeight + dy71,					15,
						dx3 + (dy2 + dy33 - tieBeamHeight + webBeamHeight) / tan(ome) + dx71 - webBeamHeight*sin(zeta),	dy2 + dy33 + webBeamHeight + dy71 - webBeamHeight*cos(zeta),	15,
						dx3 + (dy2 + dy33 - tieBeamHeight) / tan(ome),													dy2 + dy33 + webBeamHeight,						15,
						dx3 + (dy2 + dy33 - tieBeamHeight) / tan(ome),													dy2 + dy33,									15,
						dx3 + (dy2 + dy33 - tieBeamHeight) / tan(ome) + webBeamHeight*sin(ome),							dy2 + dy33 - webBeamHeight*cos(ome),				15

				  addz 0.005 + B
				next u
				del 3
			endif

			del 1

		endif


		! -----------------------------------------------------------------------------
		if	iTrussType = TRUSS_PITCHED_HOWE |\
			iTrussType = TRUSS_PITCHED_PRATT then
		! -----------------------------------------------------------------------------

			if i = 1 then
				! Middle web beam
				prism_ 5, B,
					triangleInTx,		triangleInTy,							15,
					-webBeamHeight/2,	triangleInTy - webBeamHeight/2*tan(ang),15,
					-webBeamHeight/2,	tieBeamHeight,							15,
					webBeamHeight/2,	tieBeamHeight,							15,
					webBeamHeight/2,	triangleInTy - webBeamHeight/2*tan(ang),15
			endif

			for j=1 to n-1

				material gs_truss_mat

				! Vertical web beams
				prism_ 4,b,
					-dx*j - webBeamHeight/2, tieBeamHeight, 15,
					-dx*j + webBeamHeight/2, tieBeamHeight, 15,
					-dx*j + webBeamHeight/2, triangleInTy - (dx*j - webBeamHeight/2)*tan(ang), 15,
					-dx*j - webBeamHeight/2, triangleInTy - (dx*j + webBeamHeight/2)*tan(ang), 15


				if iTrussType = TRUSS_PITCHED_HOWE then
					! Corner point on top
					dTx	= -dx*(j) + webBeamHeight/2
					dTy	= triangleInTy - (dx*(j) - webBeamHeight/2)*tan(ang)

					! Corner point on bottom
					dBx = -dx*(j-1) - webBeamHeight/2
					dBy = tieBeamHeight

					! Web angle
					webAngle = atn((dTy-dBy)/(dBx-dTx))

					dIncl = (webBeamHeight/2)/sin(webAngle + ang)

					! Inclined web beams
					prism_ 6, B,
						dTx + dIncl*cos(ang),					dTy + dIncl*sin(ang),					15,
						dTx,									dTy,									15,
						dTx,									dTy - (webBeamHeight/2)/cos(webAngle),	15,
						dBx - (webBeamHeight/2)/sin(webAngle),	dBy,									15,
						dBx,									dBy,									15,
						dBx,									dBy + (webBeamHeight/2)/cos(webAngle),	15
				endif


				if iTrussType = TRUSS_PITCHED_PRATT then
					! Corner point on top
					dTx	= -dx*(j-1) - webBeamHeight/2
					dTy	= triangleInTy - (dx*(j-1) + webBeamHeight/2)*tan(ang)

					! Corner point on bottom
					dBx = -dx*j + webBeamHeight/2
					dBy = tieBeamHeight

					! Web angle
					webAngle = atn((dTy-dBy)/(dTx-dBx))

					dIncl = (webBeamHeight/2)/sin(webAngle - ang)

					! Inclined web beams
					prism_ 6, B,
						dTx - dIncl*cos(ang),					dTy - dIncl*sin(ang),					15,
						dTx,									dTy,									15,
						dTx,									dTy - (webBeamHeight/2)/cos(webAngle),	15,
						dBx + (webBeamHeight/2)/sin(webAngle),	dBy,									15,
						dBx,									dBy,									15,
						dBx,									dBy + (webBeamHeight/2)/cos(webAngle),	15
				endif

				! Steel plates
				if stp then
					material mat2

					addz -0.005
					for t = 1 to 2

						if iTrussType = TRUSS_PITCHED_HOWE then

							! Corner point on top
							dTx	= -dx*(j) + webBeamHeight/2
							dTy	= triangleInTy - (dx*(j) - webBeamHeight/2)*tan(ang)

							! Corner point on bottom
							dBx = -dx*(j-1) - webBeamHeight/2
							dBy = tieBeamHeight

							! Web angle
							webAngle = atn((dTy-dBy)/(dBx-dTx))

							! Steel plates of middle web beam
							if (j = 1) & (i = 1) then
								prism_ 4, 0.005,
									-webBeamHeight/2 - (webBeamHeight/2)/sin(webAngle),	tieBeamHeight + (webBeamHeight/2)/cos(webAngle),	15,
									-webBeamHeight/2 - (webBeamHeight/2)/sin(webAngle),	0,													15,
									webBeamHeight/2 + (webBeamHeight/2)/sin(webAngle),	0,													15,
									webBeamHeight/2 + (webBeamHeight/2)/sin(webAngle),	tieBeamHeight + (webBeamHeight/2)/cos(webAngle),	15

								prism_ 4, 0.005,
									webBeamHeight/2,	triangleOutTy - (webBeamHeight/2)*tan(ang),					15,
									webBeamHeight/2,	triangleInTy - (webBeamHeight/2)*tan(ang) - webBeamHeight,	15,
									-webBeamHeight/2,	triangleInTy - (webBeamHeight/2)*tan(ang) - webBeamHeight,	15,
									-webBeamHeight/2,	triangleOutTy - (webBeamHeight/2)*tan(ang),					15
							endif

							! Steel plates of top of (except the last) vertical web beams
							prism_ 4, 0.005,
								dTx - webBeamHeight,	dTy + (rafterHeight / sin(ang) - webBeamHeight)*tan(ang),					15,
								dTx - webBeamHeight,	dTy - (webBeamHeight/2) / cos(webAngle),			15,
								dTx + dIncl*cos(ang),	dTy - (webBeamHeight/2) / cos(webAngle),			15,
								dTx + dIncl*cos(ang),	dTy + (rafterHeight / sin(ang) - webBeamHeight)*tan(ang),	15

							! Steel plates in joint of tie beam and web beam (except the last)
							if (j < (n - 1)) then
								! Corner point on top
								dTx	= -dx*(j+1) + webBeamHeight/2
								dTy	= triangleInTy - (dx*(j+1) - webBeamHeight/2)*tan(ang)

								! Corner point on bottom
								dBx = -dx*j - webBeamHeight/2
								dBy = tieBeamHeight

								! Web angle
								webAngle = atn((dTy-dBy)/(dBx-dTx))

								prism_ 4, 0.005,
									dBx + webBeamHeight,					0,										15,
									dBx + webBeamHeight,					dBy + (webBeamHeight/2)/cos(webAngle),	15,
									dBx - (webBeamHeight/2)/sin(webAngle),	dBy + (webBeamHeight/2)/cos(webAngle),	15,
									dBx - (webBeamHeight/2)/sin(webAngle),	0, 										15
							endif

							if (j = (n - 1)) then
								! Steel plates in joint of tie beam and last web beam
								dBx = -dx*j - webBeamHeight/2
								dBy = tieBeamHeight

								prism_ 4, 0.005,
									dBx + webBeamHeight,	0,						15,
									dBx + webBeamHeight,	dBy + webBeamHeight,	15,
									dBx,					dBy + webBeamHeight,	15,
									dBx,					0, 						15

								! Steel plates in joint of rafter and tie beam
								if (iEndType <> END_HORIZONTAL) then
									addx end2x
									roty 90
									cutplane 180 - ang * (iEndType = END_PERPENDICULAR)
									del 2
								endif

								prism_ 5, 0.005,
									triangleInLx,							0,											15,
									triangleInLx,							triangleInLy,								15,
									triangleInLx - rafterHeight * sin(ang), triangleInLy + rafterHeight * cos(ang),		15,
									(triangleInLx + triangleOutLx)/2,		(triangleInLy + rafterHeight / cos(ang))/2,	15,
									(triangleInLx + triangleOutLx)/2,		0,											15

								if (iEndType <> END_HORIZONTAL) then cutend
							endif
						endif

						if iTrussType = TRUSS_PITCHED_PRATT then

							! Steel plates of middle web beam
							if (j = 1) & (i = 1) then
								prism_ 4, 0.005,
									-webBeamHeight/2,	0,					15,
									-webBeamHeight/2,	tieBeamHeight*2,	15,
									webBeamHeight/2,	tieBeamHeight*2,	15,
									webBeamHeight/2,	0,					15

								dTx	= -dx*(j-1) - webBeamHeight/2
								dTy	= triangleInTy - (dx*(j-1) + webBeamHeight/2)*tan(ang)

								prism_ 6, 0.005,
									dTx,					dTy + rafterHeight / cos(ang),					15,
									dTx - dIncl*cos(ang),	dTy - dIncl*sin(ang) + rafterHeight / cos(ang),	15,
									dTx - dIncl*cos(ang),	dTy - dIncl*sin(ang),							15,
									-dTx + dIncl*cos(ang),	dTy - dIncl*sin(ang),							15,
									-dTx + dIncl*cos(ang),	dTy - dIncl*sin(ang) + rafterHeight / cos(ang),	15,
									-dTx,					dTy + rafterHeight / cos(ang),					15
							endif

							! Steel plates in joint of tie beam and web beam
							prism_ 4, 0.005,
								dBx - webBeamHeight,					0,										15,
								dBx - webBeamHeight,					dBy + (webBeamHeight/2)/cos(webAngle),	15,
								dBx + (webBeamHeight/2)/sin(webAngle),	dBy + (webBeamHeight/2)/cos(webAngle),	15,
								dBx + (webBeamHeight/2)/sin(webAngle),	0, 										15

							! Steel plates of top of (except the last) vertical web beams
							if (j < (n - 1)) then
								dTx = -dx*j - webBeamHeight/2
								dTy	= triangleInTy - (dx*j + webBeamHeight/2)*tan(ang)
								prism_ 5, 0.005,
									dTx, dTy + rafterHeight / cos(ang),										15,
									dTx + webBeamHeight,	dTy + rafterHeight / cos(ang),					15,
									dTx + webBeamHeight,	dTy - dIncl*sin(ang),							15,
									dTx - dIncl*cos(ang),	dTy - dIncl*sin(ang),							15,
									dTx - dIncl*cos(ang),	dTy - dIncl*sin(ang) + rafterHeight / cos(ang),	15
							endif

							if (j = (n - 1)) then
								dTx = -dx*j - webBeamHeight/2
								dTy	= triangleInTy - (dx*j + webBeamHeight/2)*tan(ang)

								! Steel plates of top of the last vertical web beam
								prism_ 4, 0.005,
									dTx,					dTy + rafterHeight / cos(ang),					15,
									dTx,					dTy + rafterHeight / cos(ang) - 2*rafterHeight,	15,
									dTx + webBeamHeight,	dTy + rafterHeight / cos(ang) - 2*rafterHeight,	15,
									dTx + webBeamHeight,	dTy + rafterHeight / cos(ang),					15

								! Steel plates in joint of rafter and tie beam
								if (iEndType <> END_HORIZONTAL) then
									addx end2x
									roty 90
									cutplane 180 - ang * (iEndType = END_PERPENDICULAR)
									del 2
								endif

								prism_ 5, 0.005,
									triangleInLx,							0,											15,
									triangleInLx,							triangleInLy,								15,
									triangleInLx - rafterHeight * sin(ang), triangleInLy + rafterHeight * cos(ang),		15,
									(triangleInLx + triangleOutLx)/2,		(triangleInLy + rafterHeight / cos(ang))/2,	15,
									(triangleInLx + triangleOutLx)/2,		0,											15

								if (iEndType <> END_HORIZONTAL) then cutend
							endif
						endif

						addz 0.005+b
					next t
					del 3
				endif

			next j

		endif

		! -----------------------------------------------------------------------------
		if iTrussType = TRUSS_PITCHED_FINK then
		! -----------------------------------------------------------------------------

			prism_	5, B,
					p1B1x,			p1B1y,			15,
					p1B2x,			p1B2y,			15,
					p1T2x,			p1T2y,			15,
					triangleInTx,	triangleInTy,	15,
					p1T1x,			p1T1y,			15

			prism_	4, B,
					p1B1x, p1B1y, 15,
					p2B2x, p2B2y, 15,
					p2T2x, p2T2y, 15,
					p2T1x, p2T1y, 15

			if (wn = 5) then
				prism_	5, B,
						p3B1x, p3B1y, 15,
						p3B2x, p3B2y, 15,
						p3T2x, p3T2y, 15,
						p2T1x, p2T1y, 15,
						p3T1x, p3T1y, 15

				prism_	4, B,
						p3B1x, p3B1y, 15,
						p4B2x, p4B2y, 15,
						p4T2x, p4T2y, 15,
						p4T1x, p4T1y, 15
			endif

			! Steel plates
			if stp then
				material mat2

				addz -0.005

				for j = 1 to 2

					prism_	 4, 0.005,
							 p1T1x, p1T2y,								15,
							-p1T1x, p1T2y,								15,
							-p1T1x, p1T1y + rafterHeight / cos(ang),	15,
							 p1T1x, p1T1y + rafterHeight / cos(ang),	15

					prism_	4, 0.005,
							p1B1x, 0,		15,
							p1B2x, 0,		15,
							p1B2x, p2B2y,	15,
							p1B1x, p2B2y,	15

					if (wn = 5) then
						prism_	4, 0.005,
								p3T1x, p3T2y,							15,
								p2T2x, p3T2y,							15,
								p2T2x, p2T2y + rafterHeight / cos(ang),	15,
								p3T1x, p3T1y + rafterHeight / cos(ang),	15

						prism_	4, 0.005,
								p3B1x, 0,		15,
								p3B2x, 0,		15,
								p3B2x, p4B2y,	15,
								p3B1x, p4B2y,	15

						tt = min (max(0.07, rafterHeight/2), rafterHeight)
						prism_	4, 0.005,
								p4T2x + tt * cos(beta4) - webBeamHeight * sin(beta4),	p4T2y - tt * sin(beta4) - webBeamHeight * cos(beta4),		15,
								p4T2x + tt * cos(beta4),								p4T2y - tt * sin(beta4),								15,
								p4T1x - tt * cos(beta4) + webBeamHeight * sin(beta4),	p4T1y + tt * sin(beta4) + webBeamHeight * cos(beta4),		15,
								p4T1x - tt * cos(beta4),								p4T1y + tt * sin(beta4),								15
					else
						tt = min (max(0.07, rafterHeight/2), rafterHeight)
						prism_	4, 0.005,
								p2T2x + tt * cos(beta2) - webBeamHeight * sin(beta2),	p2T2y - tt * sin(beta2) - webBeamHeight * cos(beta2),		15,
								p2T2x + tt * cos(beta2),								p2T2y - tt * sin(beta2),								15,
								p2T1x - tt * cos(beta2) + webBeamHeight * sin(beta2),	p2T1y + tt * sin(beta2) + webBeamHeight * cos(beta2),		15,
								p2T1x - tt * cos(beta2),								p2T1y + tt * sin(beta2),								15
					endif

					! Steel plates in joint of rafter and tie beam
					if (iEndType <> END_HORIZONTAL) then
						addx end2x
						roty 90
						cutplane 180 - ang * (iEndType = END_PERPENDICULAR)
						del 2
					endif

					prism_ 5, 0.005,
						triangleInLx,							0,											15,
						triangleInLx,							triangleInLy,								15,
						triangleInLx - rafterHeight * sin(ang), triangleInLy + rafterHeight * cos(ang),		15,
						(triangleInLx + triangleOutLx)/2,		(triangleInLy + rafterHeight / cos(ang))/2,	15,
						(triangleInLx + triangleOutLx)/2,		0,											15

					if (iEndType <> END_HORIZONTAL) then cutend

					addz B + 0.005
				next j

				del 1 + 2
			endif

		endif
	
	endif

	mul -1, 1, 1

next i
del 1

del 3

for i = 1 to nProjectionCut
	cutend
next i

! ==============================================================================
end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end
! ==============================================================================


! ==============================================================================
"Hotspot Editing":
! ==============================================================================

	hotspot 0,				B/2,	0,	unID,	tieBeamLength,	1+256	: unID=unID+1
	hotspot -1,				B/2,	0,	unID,	tieBeamLength,	3		: unID=unID+1
	hotspot tieBeamLength,	B/2,	0,	unID,	tieBeamLength,	2		: unID=unID+1

	hotspot 0,				0,	0,	unID,	tieBeamLength,	1+256	: unID=unID+1
	hotspot -1,				0,	0,	unID,	tieBeamLength,	3		: unID=unID+1
	hotspot tieBeamLength,	0,	0,	unID,	tieBeamLength,	2		: unID=unID+1

	hotspot 0,				B,	0,	unID,	tieBeamLength,	1+256	: unID=unID+1
	hotspot -1,				B,	0,	unID,	tieBeamLength,	3		: unID=unID+1
	hotspot tieBeamLength,	B,	0,	unID,	tieBeamLength,	2		: unID=unID+1

	hotspot 0,	0,	0,	unID,	B,	1+256	: unID=unID+1
	hotspot 0,	-1,	0,	unID,	B,	3		: unID=unID+1
	hotspot 0,	B,	0,	unID,	B,	2		: unID=unID+1

	hotspot tieBeamLength,	0,	0,	unID,	B,	1+256	: unID=unID+1
	hotspot tieBeamLength,	-1,	0,	unID,	B,	3		: unID=unID+1
	hotspot tieBeamLength,	B,	0,	unID,	B,	2		: unID=unID+1

	if iDimensionSetMode = DIM_WIDTH_HEIGHT then
		hotspot tieBeamLength/2, B/2, 0,			unID, trussHeight, 1+128	: unID=unID+1
		hotspot tieBeamLength/2, B/2, -1,			unID, trussHeight, 3		: unID=unID+1
		hotspot tieBeamLength/2, B/2, trussHeight,	unID, trussHeight, 2		: unID=unID+1
	endif

	if iDimensionSetMode = DIM_WIDTH_ANGLE then
		hotspot tieBeamLength/2, B/2, trussHeight, unID : unID=unID+1

		rafterLength = sqr((tieBeamLength/2)^2 + (trussHeight - rafterHeight/cos(ang))^2)

		hotspot rafterLength/2,				0,	0,							unID, ang, 4+128	: unID=unID+1
		hotspot 0,							0,	0,							unID, ang, 6 		: unID=unID+1
		hotspot (rafterLength/2)*cos(ang),	0,	(rafterLength/2)*sin(ang),	unID, ang, 5		: unID=unID+1
		hotspot 0,							-1,	0,							unID, ang, 7		: unID=unID+1

		hotspot rafterLength/2,				B,		0,							unID, ang, 4+128	: unID=unID+1
		hotspot 0,							B,		0,							unID, ang, 6 		: unID=unID+1
		hotspot (rafterLength/2)*cos(ang),	B,		(rafterLength/2)*sin(ang),	unID, ang, 5		: unID=unID+1
		hotspot 0,							B - 1,	0,							unID, ang, 7		: unID=unID+1

		hotspot tieBeamLength - rafterLength/2,				0,	0,							unID, ang, 4+128	: unID=unID+1
		hotspot tieBeamLength,								0,	0,							unID, ang, 6 		: unID=unID+1
		hotspot tieBeamLength - (rafterLength/2)*cos(ang),	0,	(rafterLength/2)*sin(ang),	unID, ang, 5		: unID=unID+1
		hotspot tieBeamLength,								1,	0,							unID, ang, 7		: unID=unID+1

		hotspot tieBeamLength - rafterLength/2,				B,		0,							unID, ang, 4+128	: unID=unID+1
		hotspot tieBeamLength,								B,		0,							unID, ang, 6 		: unID=unID+1
		hotspot tieBeamLength - (rafterLength/2)*cos(ang),	B,		(rafterLength/2)*sin(ang),	unID, ang, 5		: unID=unID+1
		hotspot tieBeamLength,								B + 1,	0,							unID, ang, 7		: unID=unID+1
	endif

	if iDimensionSetMode = DIM_WIDTH_PROPORTION then
		hotspot tieBeamLength/2, B/2, trussHeight, unID : unID=unID+1
	endif

	if bOverhang then
		hotspot  0,				0, -eaveHeight + yy, unID, eaveOverhang, 1+128	: unID=unID+1
		hotspot  1, 			0, -eaveHeight + yy, unID, eaveOverhang, 3		: unID=unID+1
		hotspot -eaveOverhang,	0, -eaveHeight + yy, unID, eaveOverhang, 2		: unID=unID+1

		hotspot  0,				B, -eaveHeight + yy, unID, eaveOverhang, 1+128	: unID=unID+1
		hotspot  1, 			B, -eaveHeight + yy, unID, eaveOverhang, 3		: unID=unID+1
		hotspot -eaveOverhang,	B, -eaveHeight + yy, unID, eaveOverhang, 2		: unID=unID+1

		hotspot tieBeamLength,					0, -eaveHeight + yy, unID, eaveOverhang, 1+128	: unID=unID+1
		hotspot tieBeamLength - 1, 				0, -eaveHeight + yy, unID, eaveOverhang, 3		: unID=unID+1
		hotspot tieBeamLength + eaveOverhang,	0, -eaveHeight + yy, unID, eaveOverhang, 2		: unID=unID+1

		hotspot tieBeamLength,					B, -eaveHeight + yy, unID, eaveOverhang, 1+128	: unID=unID+1
		hotspot tieBeamLength - 1, 				B, -eaveHeight + yy, unID, eaveOverhang, 3		: unID=unID+1
		hotspot tieBeamLength + eaveOverhang,	B, -eaveHeight + yy, unID, eaveOverhang, 2		: unID=unID+1
	else
		hotspot -eaveOverhang,	0, -eaveHeight + yy, unID	: unID=unID+1
		hotspot -eaveOverhang,	B, -eaveHeight + yy, unID	: unID=unID+1

		hotspot tieBeamLength + eaveOverhang,	0, -eaveHeight + yy, unID	: unID=unID+1
		hotspot tieBeamLength + eaveOverhang,	B, -eaveHeight + yy, unID	: unID=unID+1
	endif
return
