
if not(gs_path_move) then

	wheelAngle	= 0
	posX		= 0
	posY		= 0
	rotAngle	= 0

else

! =============================================================================
! Editable Hotspots
! =============================================================================

	fontSize = 0.3	! Font size in model space
	define style "TextStyle" fontType, fontSize / (GLOB_SCALE / 1000), 1, 0
	define style "TextStyleCenter" fontType, fontSize / (GLOB_SCALE / 1000), 2, 0

	if gs_path_show_2D then
		pen gs_path_line_pen
		set style "TextStyleCenter"

		diamSpeedometer = 0.9
		if SYMB_MIRRORED then
			mirSign = 1
		else
			mirSign = -1
		endif

		for i=1 to gs_pathNodes_Num

			idx = i+1

			! Start vector
			if i=1 then
				add2 gs_pathNodes_Pos[2][1], gs_pathNodes_Pos[2][2]
				hotspot2 gs_pathNodes_Pos[1][1],	0,						hsId,   gs_pathNodes_Pos[1][2], 1+128
				hotspot2 gs_pathNodes_Pos[1][1],	-1,						hsId+1, gs_pathNodes_Pos[1][2], 3
				hotspot2 gs_pathNodes_Pos[1][1],	gs_pathNodes_Pos[1][2],	hsId+2, gs_pathNodes_Pos[1][2], 2
				hsId = hsId + 3

				hotspot2 0,							gs_pathNodes_Pos[1][2],	hsId,   gs_pathNodes_Pos[1][1], 1+128
				hotspot2 -1,						gs_pathNodes_Pos[1][2],	hsId+1, gs_pathNodes_Pos[1][1], 3
				hotspot2 gs_pathNodes_Pos[1][1],	gs_pathNodes_Pos[1][2],	hsId+2, gs_pathNodes_Pos[1][1], 2
				hsId = hsId + 3
				del 1
			endif

			hotspot2 gs_pathNodes_Pos[idx][1],	0,							hsId,   gs_pathNodes_Pos[idx][2], 1+128
			hotspot2 gs_pathNodes_Pos[idx][1],	-1,							hsId+1, gs_pathNodes_Pos[idx][2], 3
			hotspot2 gs_pathNodes_Pos[idx][1],	gs_pathNodes_Pos[idx][2],	hsId+2, gs_pathNodes_Pos[idx][2], 2
			hsId = hsId + 3

			hotspot2 0,							gs_pathNodes_Pos[idx][2],	hsId,   gs_pathNodes_Pos[idx][1], 1+128
			hotspot2 -1,						gs_pathNodes_Pos[idx][2],	hsId+1, gs_pathNodes_Pos[idx][1], 3
			hotspot2 gs_pathNodes_Pos[idx][1],	gs_pathNodes_Pos[idx][2],	hsId+2, gs_pathNodes_Pos[idx][1], 2
			hsId = hsId + 3

			! End vector
			if i=gs_pathNodes_Num then
				add2 gs_pathNodes_Pos[gs_pathNodes_Num+1][1], gs_pathNodes_Pos[gs_pathNodes_Num+1][2]
				hotspot2 gs_pathNodes_Pos[gs_pathNodes_Num+2][1],	0,											hsId,   gs_pathNodes_Pos[gs_pathNodes_Num+2][2], 1+128
				hotspot2 gs_pathNodes_Pos[gs_pathNodes_Num+2][1],	-1,											hsId+1, gs_pathNodes_Pos[gs_pathNodes_Num+2][2], 3
				hotspot2 gs_pathNodes_Pos[gs_pathNodes_Num+2][1],	gs_pathNodes_Pos[gs_pathNodes_Num+2][2],	hsId+2, gs_pathNodes_Pos[gs_pathNodes_Num+2][2], 2
				hsId = hsId + 3

				hotspot2 0,											gs_pathNodes_Pos[gs_pathNodes_Num+2][2],	hsId,   gs_pathNodes_Pos[gs_pathNodes_Num+2][1], 1+128
				hotspot2 -1,										gs_pathNodes_Pos[gs_pathNodes_Num+2][2],	hsId+1, gs_pathNodes_Pos[gs_pathNodes_Num+2][1], 3
				hotspot2 gs_pathNodes_Pos[gs_pathNodes_Num+2][1],	gs_pathNodes_Pos[gs_pathNodes_Num+2][2],	hsId+2, gs_pathNodes_Pos[gs_pathNodes_Num+2][1], 2
				hsId = hsId + 3
				del 1
			endif

			! Speedometer
			add2 gs_pathNodes_Pos[idx][1], gs_pathNodes_Pos[idx][2]
			rot2 mirSign * SYMB_ROTANGLE

			if not(bFeedBack) then
				circle2 0,0, diamSpeedometer/2
				arc2 0,0,diamSpeedometer*0.45, -25,205
				arc2 0,0,diamSpeedometer*0.40, -25,205
			endif

			text2 0,0, gs_pathNodes_Speed[idx]

			rot2 -mirSign * 115

			R = diamSpeedometer*0.425
			hotspot2 0, 										0, 									hsId,	gs_pathNodes_Angle[idx], 6 + 512 * not(SYMB_MIRRORED), gs_pathNodes_Speed[idx]
			hotspot2 0,											R,									hsId+1,	gs_pathNodes_Angle[idx], 4 + 128, gs_pathNodes_Speed[idx]
			hotspot2 -mirSign*sin(gs_pathNodes_Angle[idx]) * R,	cos(gs_pathNodes_Angle[idx]) * R,	hsId+2,	gs_pathNodes_Angle[idx], 5, gs_pathNodes_Speed[idx]
			hsId = hsId + 3

			rot2 mirSign * gs_pathNodes_Angle[idx]
			line2 0,0,0,R
			del 3

			del 1
		next i
	endif

! =============================================================================
! Visualization of Skeleton
! =============================================================================

	if gs_path_show_2D then

		sizeHpts = 0.06 ! Size of Hotspots

		for i=1 to gs_pathNodes_Num - 1
			pen gs_path_pen
			circle2 sect[i][1], sect[i][2],  sizeHpts
			circle2 sect[i][10],sect[i][11], sizeHpts

!			lin_ sect[i][1], sect[i][2], sect[i][3],
!				 sect[i][10],sect[i][11],sect[i][12]

			pen gs_path_line_pen
			circle2 sect[i][4],sect[i][5], sizeHpts
			circle2 sect[i][7],sect[i][8], sizeHpts

			line2 sect[i][1], sect[i][2],
				  sect[i][4], sect[i][5]
			line2 sect[i][10],sect[i][11],
				  sect[i][7], sect[i][8]
		next i
	endif

! =============================================================================
! Show animation infos
! =============================================================================

	if gs_path_show_2D then
		set style "TextStyle"
		sp = 1.5 * fontSize

		add2 0, -1.0

		pen gs_path_pen
		text2 0,0,	   stAnimationInfo[1] + " " + str(gs_path_fps,1,0) + " " + stAnimationInfo[5]			! Animation speed: 24 [fps]
		text2 0,-1*sp, stAnimationInfo[2] + " " + str(gs_path_start_frame,1,0) + " " + stAnimationInfo[6]	! Start frame: 1 [frame]
		text2 0,-2*sp, stAnimationInfo[3] + " " + str(gs_path_start_frame + vardim1(pathPnts),1,0) + " " + stAnimationInfo[6]	! End frame: 101 [frame]
		text2 0,-3*sp, stAnimationInfo[4] + " " + str(vardim1(pathPnts),1,0) + " " + stAnimationInfo[6]		! Animation length: 100 [frame]
		text2 0,-4*sp, stAnimationInfo[4] + " " + str(vardim1(pathPnts) / gs_path_fps,2,1) + " " + stAnimationInfo[7]		! Animation length: 4 [sec]

		del 1
	endif

! =============================================================================
! Draw Bezier Path
! =============================================================================

	if gs_path_show_2D then
		pen gs_path_pen

		for i=1 to vardim1(pathPnts) - 1
			if not(bFeedBack) then
				circle2 pathPnts[i][1],   pathPnts[i][2], 0.03
				hotspot2 pathPnts[i][1],   pathPnts[i][2], hsId
			endif
			hsId = hsId + 1

			line2 pathPnts[i][1],   pathPnts[i][2],
				  pathPnts[i+1][1], pathPnts[i+1][2]
		next i
	endif

! =============================================================================
! Calculate vehicle transformation
! =============================================================================

	idx = min(frameIdx, vardim1(pathPnts))
	posX = pathPnts[idx][1]
	posY = pathPnts[idx][2]

!!!circle2 pathPnts[idx][4], pathPnts[idx][5], 0.1		! Back wheel point

	if idx > 1 then
		dirX = pathPnts[idx - 1][1] - posX
		dirY = pathPnts[idx - 1][2] - posY
	else
		dirX = gs_pathNodes_Pos[2][1] - gs_pathNodes_Pos[1][1]
		dirY = gs_pathNodes_Pos[2][2] - gs_pathNodes_Pos[1][2]
	endif

	dirX = pathPnts[idx][4] - pathPnts[idx][1]
	dirY = pathPnts[idx][5] - pathPnts[idx][2]


	vx = dirX
	vy = dirY
	gosub 103	 ! Direction angle
	rotAngle = angle

	wheelAngle = 0

endif



if test then
	add2 0, -1
	circle2 0,0,0.05
	circle2 -testPos,0,0.05
	hotspot2  0,		0,	hsId,   testPos, 1+128
	hotspot2  1,		0,	hsId+1, testPos, 3
	hotspot2 -testPos,	0,	hsId+2, testPos, 2
	hsId = hsId + 3
	del 1
endif



end wheelAngle,
	posX, posY, rotAngle



103:

if abs(vx) < EPS & abs(vy) < EPS then
	angle = 0
	return
endif

if abs(vx) < EPS then
	if vy > 0 then
		angle = 90
	else
		angle = 270
	endif
else
	angle = atn(vy / vx)
	if vx >= 0 then
		if angle < 0 then
			angle = angle + 360
		endif
	else
		angle = 180 + angle
	endif
endif

return



