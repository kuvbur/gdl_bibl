
hideparameter all "A", "B", "ZZYZX"

call "FM_types" parameters all


! ==============================================================================
! 2D Display Options
! ==============================================================================

values "gs_symb_display_option" stDisplayOptions
values "gs_symb_show_projection_to" stProjectionTypes

if AC_symb_display_option = DISPLAY_SYMBOLIC | AC_symb_display_option = DISPLAY_OVERHEAD_ALL then
	lock			"gs_use_3D_view_attributes"
endif

if gs_use_3D_view_attributes then
	lock			"gs_cont_pen"
endif

if not(AC_symb_display_option = DISPLAY_PROJECTED | AC_symb_display_option = DISPLAY_OVERHEAD_PROJ) then
	lock	"gs_cut_pen",
			"gs_cut_fill_type",
			"gs_cut_fill_pen",
			"gs_cut_back_pen"
endif

if AC_symb_display_option = DISPLAY_SYMBOLIC | AC_symb_display_option = DISPLAY_OUTLINES | AC_symb_display_option = DISPLAY_OVERHEAD_ALL then
	lock			"gs_symb_show_projection_to",
					"AC_cut_linetype", "gs_cut_pen"
endif

if AC_symb_display_option = DISPLAY_PROJECTED | AC_symb_display_option = DISPLAY_SYMBOLIC | AC_symb_display_option = DISPLAY_OUTLINES then
	lock			"AC_overhead_linetype", "AC_overhead_pen"
endif

if AC_symb_display_option = DISPLAY_OVERHEAD_ALL then
	lock			"gs_fill_type", "gs_fill_pen", "gs_back_pen", "gs_cont_pen", "gs_cont_line"
endif


! ==============================================================================
! Pens
! ==============================================================================

if txt_pen	< 1 then parameters txt_pen			= 1


! ==============================================================================
! Functions
! ==============================================================================
if bEnableRafter then
	if rm_bRafterVisible & AC_symb_display_option = DISPLAY_OUTLINES then
		lock			"rm_AxisLineType", "gs_axis_line_pen"
	endif

	if not(rm_bRafterVisible) then
		lock			"gs_fill_type",
						"gs_cont_pen",
						"gs_cont_line",
						"gs_fill_pen",
						"gs_back_pen",
						"AC_cut_linetype",
						"gs_cut_pen",
						"AC_overhead_linetype",
						"AC_overhead_pen",
						"AC_symb_display_option",
						"AC_symb_show_projection_to",
						"gs_symb_display_option",
						"gs_symb_show_projection_to"
	endif
endif

if bEnableResolution then
	values "gs_res" range [3,]
endif

if bEnableSymbol then
	values "rm_symbolType" stSymbolType
	values "rm_iSymbolType" 1,2

	if GLOB_MODPAR_NAME = "rm_symbolType" then
		rm_iSymbolType = 1
		for i = 2 to vardim1(stSymbolType)
			if rm_symbolType = stSymbolType[i] then
				rm_iSymbolType = i
				i = vardim1(stSymbolType)
			endif
		next i
		parameters rm_iSymbolType = rm_iSymbolType
	else
		rm_iSymbolType = max(min(rm_iSymbolType,vardim1(stSymbolType)),1)
		parameters rm_symbolType = stSymbolType[rm_iSymbolType]
	endif

	if rm_iSymbolType = SYMBOLTYPE_CIRCLE then
		lock			"rm_AxisLineType", "gs_axis_line_pen"
	endif

	if AC_symb_display_option <> DISPLAY_SYMBOLIC then
		lock			"rm_symbolType", "rm_iSymbolType", "rm_AxisLineType", "gs_axis_line_pen"
	endif
endif


! ==============================================================================
! Rounding Values
! ==============================================================================
values "roundValue" range [0,]
if not(bIsMetricLength) then
	for i = 1 to vardim1(stRoundValuesUSA)
		put i-1
	next i
	values "roundingValueUSA"	stRoundValuesUSA
	values "iRoundingValueUSA"	get(NSP)

	if GLOB_MODPAR_NAME = "roundingValueUSA" then
		iRoundingValueUSA = vardim1(stRoundValuesUSA)-1
		for i = 1 to vardim1(stRoundValuesUSA)
			if roundingValueUSA  = stRoundValuesUSA[i] then
				iRoundingValueUSA = i-1
				i = vardim1(stRoundValuesUSA)
			endif
		next i
		parameters iRoundingValueUSA = iRoundingValueUSA
	else
		iRoundingValue = max(min(iRoundingValueUSA,vardim1(stRoundValuesUSA)-1),0)
		parameters	roundingValueUSA	= stRoundValuesUSA[iRoundingValueUSA+1],
					iRoundingValueUSA	= iRoundingValueUSA
	endif

	lock 			"roundingValue", "iRoundingValue"
else
	for i = 1 to vardim1(stRoundValuesMetric)
		put i-1
	next i
	values "roundingValue"		stRoundValuesMetric
	values "iRoundingValue" 	get(NSP)

	if GLOB_MODPAR_NAME = "roundingValue" then
		iRoundingValue = vardim1(stRoundValuesMetric)-1
		for i = 1 to vardim1(stRoundValuesMetric)
			if roundingValue  = stRoundValuesMetric[i] then
				iRoundingValue = i-1
				i = vardim1(stRoundValuesMetric)
			endif
		next i
		parameters iRoundingValue = iRoundingValue
	else
		iRoundingValue = max(min(iRoundingValue,vardim1(stRoundValuesMetric)-1),0)
		parameters	roundingValue	= stRoundValuesMetric[iRoundingValue+1]
					!iRoundingValue	= iRoundingValue
	endif

	lock 			"roundingValueUSA", "iRoundingValueUSA"
endif

if iDisplaySize = DISPLAY_CUT_SIZE | not(txt_show) then
	lock "roundingValueUSA", "iRoundingValueUSA", "roundingValue", "iRoundingValue", "roundValue"
endif

roundedLumberSize = 0
if lumberSize > EPS then
	if bIsMetricLength then
		dim _roundValues[]
		_roundValues	= roundValuesMetric
		_iRound 		= iRoundingValue
		gosub "rounding"
		if iRoundingValue < vardim1(stRoundValuesMetric)-1 then
			lock			"roundValue"
		endif
	else
		dim _roundValues[]
		_roundValues	= roundValuesUSA
		_iRound 		= iRoundingValueUSA
		gosub "rounding"
		if iRoundingValueUSA <> vardim1(stRoundValuesUSA)-1 then
			lock			"roundValue"
		endif
	endif
else
	lock			"roundValue"
endif

parameters roundedLumberSize = roundedLumberSize
lock "lumberSize", "roundedLumberSize"


! ==============================================================================
! BDFT
! ==============================================================================
if gs_iDisplayStandards = LANGUAGE_USA then
	parameters numBDFT = lumberPackBDFT_2
	lock "numBDFT"
else
	lock			"numBDFT"
endif


! ==============================================================================
! Display Lumber Size
! ==============================================================================

parameters fsz = abs(fsz)
values "fsz" range (0,]

values "typeTextRotation" stTextOrientation
values "typeTextRotation_m" 2, 1, 0

if GLOB_MODPAR_NAME = "typeTextRotation" then
	typeTextRotation_m = 2
	for i = 1 to vardim1(stTextOrientation)
		if typeTextRotation  = stTextOrientation[i] then
			typeTextRotation_m  = 3-i
			i = vardim1(stTextOrientation)
		endif
	next i
	parameters typeTextRotation_m = typeTextRotation_m
else
	typeTextRotation_m = max(min(typeTextRotation_m,vardim1(stTextOrientation)-1),0)
	parameters	typeTextRotation	= stTextOrientation[vardim1(stTextOrientation)-typeTextRotation_m],
				typeTextRotation_m	= typeTextRotation_m
endif

values "displaySize"	stDisplaySize
values "iDisplaySize"	DISPLAY_CUT_SIZE, DISPLAY_ROUNDED_SIZE

if GLOB_MODPAR_NAME = "displaySize" then
	iDisplaySize = 1
	if displaySize  = stDisplaySize[2] then iDisplaySize = 2
	parameters iDisplaySize = iDisplaySize
else
	iDisplaySize = max(min(iDisplaySize,vardim1(stDisplaySize)),1)
	parameters	displaySize		= stDisplaySize[iDisplaySize],
				iDisplaySize	= iDisplaySize
endif

if not(txt_show) then
	lock			"displaySize",
					"iDisplaySize",
					"txt_pen",
					"txt",
					"fontType",
					"fsz",
					"txt_pos_x",
					"txt_pos_y",
					"gs_text_style_bold",
					"gs_text_style_italic",
					"gs_text_style_underline",
					"typeTextRotation",
					"typeTextRotation_m"
endif


end


! ==============================================================================
! Rounding Rutin
! ==============================================================================
"rounding":
	if abs(_roundValues[_iRound+1]) < EPS then
		roundedLumberSize = lumberSize
	else
		_perRound = int(lumberSize / _roundValues[_iRound+1])
		if abs(_perRound*_roundValues[_iRound+1] - lumberSize) > EPS then _perRound = _perRound+1
		roundedLumberSize = _perRound * _roundValues[_iRound+1]
	endif
return
