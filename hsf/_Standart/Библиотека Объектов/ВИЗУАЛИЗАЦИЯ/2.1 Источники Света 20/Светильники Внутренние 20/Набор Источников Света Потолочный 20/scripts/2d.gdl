

call "GetPlanViewGlobals" parameters all returned_parameters gs_symbtype_2D_m

if GLOB_PREVIEW_MODE = 3 then				! in case of 2D-3D Favorite Preview
	gs_symbtype_2D_m = 1
endif

unID = 10000
hotspot2 0,0,unID

unID = 1

! --- Spot Position's Array ---
dim xSpotPos[6]
dim ySpotPos[6]
dim zSpotPos[6]
for i = 1 to numSpots
	xSpotPos[i] = 0
	ySpotPos[i] = 0
	zSpotPos[i] = 0
next i

if gs_symbtype_2D_m = 1 then			! Realistic Symbol

	pen gs_cont_pen
	fill gs_fill_type

	pen gs_fill_pen
	set fill gs_fill_type
	project2{3} 3, 270, 3+32+1024, 1+4, gs_back_pen, 0, 0, 0, parameters	iSpotOrientation	= 1,
																			bProject2D			= 1,
																			gs_detlevel_3D_m	= 2,
																			gs_resol			= 16,
																			bShowIllumination3D	= 0

	pen gs_cont_pen
	project2{3} 3, 270, 2+1024, 1+4+8, parameters	iSpotOrientation	= 1,
													bProject2D			= 1,
													gs_detlevel_3D_m	= 2,
													gs_resol			= 16,
													bShowIllumination3D	= 0

	if ABS(rotAngleX) < EPS then
		if iMountType = 1 then
			gosub "MOUNT_1"
		endif
		if iMountType = 2 then
			gosub "MOUNT_2"
		endif
		if iMountType = 3 then
			gosub "MOUNT_3"
		endif
		if iMountType = 4 then
			gosub "MOUNT_4"
		endif
		if iMountType = 5 then
			gosub "MOUNT_5"
		endif
		if iMountType = 6 then
			gosub "MOUNT_6"
		endif
		if iMountType = 7 then
			gosub "MOUNT_7"
		endif
		if iMountType = 8 then
			gosub "MOUNT_8"
		endif
		if iMountType = 9 then
			gosub "MOUNT_9"
		endif
		if iMountType = 10 then
			gosub "MOUNT_10"
		endif
		if iMountType = 11 then
			gosub "MOUNT_11"
		endif

		for k = 1 to numSpots

			actspotangle_h = spotangle_h[k]
			actspotangle_v = spotangle_v[k]

			hotspot2 xSpotPos[k], ySpotPos[k], unID : unID=unID+1

			if (iSpotOrientation = 3) or (iSpotOrientation = 2 and k = 1) then
				pen penSpotPosition
				if GLOB_CONTEXT = 22 then
					add2 xSpotPos[k],	ySpotPos[k]
					rot2 -actspotangle_h
					circle2 0, 0, hotspotdist
					del 2
				endif

				add2 xSpotPos[k],	ySpotPos[k]
				hotspot2 0,	0,	unID,spotangle_h[k],	6+512 : unID=unID+1
				hotspot2 0,	0+1,unID,spotangle_h[k],	4+128 : unID=unID+1
				hotspot2 hotspotdist*sin(spotangle_h[k]), hotspotdist*cos(spotangle_h[k]),unID,spotangle_h[k],5 : unID=unID+1
				del 1
			endif

		next k
	endif
endif

if gs_symbtype_2D_m = 2 OR gs_symbtype_2D_m = 3 then			! Electrical Symbol or RCP Symbol
	call "Lamp_symbol" parameters all \
									bWallLamp = 0,
									bDirect = 0,
									Symbol_unID = unID,
									specSymbolRotation=180
endif

unID = unID + 100
hotspot2 0,0,unID : unID=unID+1

! ==============================================================================
end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end !
! ==============================================================================



! ==============================================================================
"MOUNT_1":
! ==============================================================================

	sumangle = 40
	angle = sumangle / (numSpots-1)
	mulx_factor = a/0.5

	for i = 0 to numSpots-1
		xSpotPos[i+1] = mulx_factor * 0.65 * cos(90-sumangle/2+i*angle)
		ySpotPos[i+1] = 0
	next i

return



! ==============================================================================
"MOUNT_2":
! ==============================================================================

	sumangle = 40
	mulx_factor = a/0.5

	if numSpots/2 - int(numSpots/2) > 0 then
		numSpotsHalf = (numSpots-1)/2
		angle = sumangle / (numSpotsHalf)
	else
		numSpotsHalf = numSpots/2
		angle = sumangle / (numSpotsHalf-0.5)
	endif

	for i = 1 to 2
		for j = 0 to numSpotsHalf-1
			if i = 1 then
				xSpotPos[j+1] = -0.25*mulx_factor/2 + mulx_factor/2 * ( 0.65 * cos(90+sumangle/2-j*angle))
				ySpotPos[j+1] = -0.6 + 0.65 * sin(90-sumangle/2+j*angle)
			else
				xSpotPos[numSpotsHalf+j+1] = -(-0.25*mulx_factor/2 + mulx_factor/2 * ( 0.65 * cos(90+sumangle/2-j*angle)))
				ySpotPos[numSpotsHalf+j+1] = -(-0.6 + 0.65 * sin(90-sumangle/2+j*angle))
			endif
		next j
	next i


return



! ==============================================================================
"MOUNT_3":
! ==============================================================================

	for i = 1 to numSpots
		xSpotPos[i] = 0.1038 * cos(i*360/numSpots)
		ySpotPos[i] = 0.1038 * sin(i*360/numSpots)
	next i

return



! ==============================================================================
"MOUNT_4":
! ==============================================================================

	mount_cover_a = a
	mount_cover_b = a
	mount_cover_h = 0.01

	for i = 1 to numSpots
		xSpotPos[i] = (mount_cover_a/2-0.03)*(numSpots>1) * cos(180/numSpots+(i-1)*360/numSpots)
		ySpotPos[i] = (mount_cover_a/2-0.03)*(numSpots>1) * sin(180/numSpots+(i-1)*360/numSpots)
	next i

return



! ==============================================================================
"MOUNT_5":
! ==============================================================================

	mount_cover_a = a
	mount_cover_b = b
	mount_cover_h = 0.04
	if numSpots > 1 then
		spotdistance = (mount_cover_a - 0.06)/(numSpots-1)
	else
		spotdistance = 0
	endif

	for i = 0 to numSpots-1
		xSpotPos[i+1] = (mount_cover_a/2-0.03)*(numSpots>1)-spotdistance*(i)
		ySpotPos[i+1] = 0
	next i

return



! ==============================================================================
"MOUNT_6":
! ==============================================================================

	spotdistance = (a - 0.06)/(numSpots-1)
	for i = 0 to numSpots-1
		xSpotPos[i+1] = a/2-0.03-spotdistance*i
		ySpotPos[i+1] = 0
	next i

return



! ==============================================================================
"MOUNT_7":
! ==============================================================================

	spotdistance = (a - 0.06)/(numSpots-1)
	for i = 0 to numSpots-1
		if (a/2-0.03-spotdistance*i) < 0.05 then
			actangle = arm2angle
		else
			actangle = arm1angle
		endif
		xSpotPos[i+1] = (a/2-0.03-spotdistance*i)*cos(actangle)
		ySpotPos[i+1] = (a/2-0.03-spotdistance*i)*sin(actangle)
		zSpotPos[i+1] = -mount_cover_h-rod_r-0.02-0.06*((a/2-0.03-spotdistance*i) < 0.05)
	next i

	hotspot2 0, 0,unID,arm1angle,6 : unID=unID+1
	hotspot2 1, 0,unID,arm1angle,4+128 : unID=unID+1
	hotspot2 a/2*cos(arm1angle), a/2*sin(arm1angle),unID,arm1angle,5 : unID=unID+1

	hotspot2 0, 0,unID,arm2angle,6 : unID=unID+1
	hotspot2 -1, 0,unID,arm2angle,4+128 : unID=unID+1
	hotspot2 -a/2*cos(arm2angle),-a/2*sin(arm2angle),unID,arm2angle,5 : unID=unID+1


return



! ==============================================================================
"MOUNT_8":
! ==============================================================================

	distfromcenter = 0.03
	spotdistance = (a - 2*distfromcenter)/(numSpots-1)

	for i = 0 to numSpots-1
		if (a/2-distfromcenter-spotdistance*i) < 0.05 then
			actangle = arm2angle
		else
			actangle = arm1angle
		endif
		xSpotPos[i+1] = (a/2-distfromcenter-spotdistance*i)*cos(actangle)
		ySpotPos[i+1] = (a/2-distfromcenter-spotdistance*i)*sin(actangle) \
							-distfromcenter*((a/2-distfromcenter-spotdistance*i) < 0.05) \
							+distfromcenter*((a/2-distfromcenter-spotdistance*i) >= 0.05)
	next i

	hotspot2 0,distfromcenter, unID,arm1angle,6 : unID=unID+1
	hotspot2 1,distfromcenter, unID,arm1angle,4+128 : unID=unID+1
	hotspot2 a/2*cos(arm1angle),distfromcenter+a/2*sin(arm1angle), unID,arm1angle,5 : unID=unID+1

	hotspot2 0,-distfromcenter, unID,arm2angle,6 : unID=unID+1
	hotspot2 -1,-distfromcenter, unID,arm2angle,4+128 : unID=unID+1
	hotspot2 -a/2*cos(arm2angle),-distfromcenter-a/2*sin(arm2angle), unID,arm2angle,5 : unID=unID+1

return



! ==============================================================================
"MOUNT_9":
! ==============================================================================

	if numSpots/2 - int(numSpots/2) > eps then
		numSpots = numSpots + 1
	endif

	spotdistance = (a - 0.06)/(numSpots/2-1)
	for i = 0 to numSpots-1
		if (a-0.05-spotdistance*i) < eps then
			actangle = arm1angle
		else
			actangle = 0
		endif
		xSpotPos[i+1] = (a/2-0.03-spotdistance*i+(a-0.06+spotdistance)*((a-0.05-spotdistance*i) < eps))*cos(actangle)
		ySpotPos[i+1] = (a/2-0.03-spotdistance*i+(a-0.06+spotdistance)*((a-0.05-spotdistance*i) < eps))*sin(actangle)
	next i

	hotspot2 0,0,unID,arm1angle,6 : unID=unID+1
	hotspot2 1,0,unID,arm1angle,4+128 : unID=unID+1
	hotspot2 a/2*cos(arm1angle),a/2*sin(arm1angle),unID,arm1angle,5 : unID=unID+1

	hotspot2 0,0,unID,arm1angle,6 : unID=unID+1
	hotspot2 1,0,unID,arm1angle,4+128 : unID=unID+1
	hotspot2 -a/2*cos(arm1angle),-a/2*sin(arm1angle),unID,arm1angle,5 : unID=unID+1

return



! ==============================================================================
"MOUNT_10":
! ==============================================================================

	sumangle = 40
	distfromcenter = 0.03
	mulx_factor = a/0.5

	if numSpots/3 - int(numSpots/3) > 0 then
		numSpotsHalf = (numSpots-1)/3
		angle = sumangle / (numSpotsHalf)
	else
		numSpotsHalf = numSpots/3
		angle = sumangle / (numSpotsHalf-0.5)
	endif

	for i = 1 to 3
		if i = 1 then
			actangle = arm1angle
			rotangle = arm1angle
		else
			if i = 2 then
				actangle = arm2angle
				rotangle = arm2angle
			else
				actangle = arm3angle
				rotangle = arm3angle
			endif
		endif
		for j = 0 to numSpotsHalf-1
			if numSpotsHalf > 1 then
				xSpotPos[i*numSpotsHalf-1*(j=0)] = (-0.25*mulx_factor/2 - distfromcenter + mulx_factor/2 * ( 0.65 * cos(90+sumangle/2-j*angle)))*cos(actangle)\
								 - (-0.6 + 0.65 * sin(90-sumangle/2+j*angle))*sin(actangle)
				ySpotPos[i*numSpotsHalf-1*(j=0)] = (-0.25*mulx_factor/2 - distfromcenter + mulx_factor/2 * ( 0.65 * cos(90+sumangle/2-j*angle)))*sin(actangle)\
								 + (-0.6 + 0.65 * sin(90-sumangle/2+j*angle))*cos(actangle)
			else
				xSpotPos[i] = (-0.25*mulx_factor/2 - distfromcenter + mulx_factor/2 * ( 0.65 * cos(90+sumangle/2-j*angle)))*cos(actangle)\
								 - (-0.6 + 0.65 * sin(90-sumangle/2+j*angle))*sin(actangle)
				ySpotPos[i] = (-0.25*mulx_factor/2 - distfromcenter + mulx_factor/2 * ( 0.65 * cos(90+sumangle/2-j*angle)))*sin(actangle)\
								 + (-0.6 + 0.65 * sin(90-sumangle/2+j*angle))*cos(actangle)
			endif
		next j
	next i

	hotspot2 0,0,unID,arm1angle,6 : unID=unID+1
	hotspot2 -1,0,unID,arm1angle,4+128 : unID=unID+1
	hotspot2 -(a/2+distfromcenter)*cos(arm1angle),-(a/2+distfromcenter)*sin(arm1angle),unID,arm1angle,5 : unID=unID+1

	hotspot2 0,0,unID,arm2angle,6 : unID=unID+1
	hotspot2 -1,0,unID,arm2angle,4+128 : unID=unID+1
	hotspot2 -(a/2+distfromcenter)*cos(arm2angle),-(a/2+distfromcenter)*sin(arm2angle),unID,arm2angle,5 : unID=unID+1

	hotspot2 0,0,unID,arm3angle,6 : unID=unID+1
	hotspot2 -1,0,unID,arm3angle,4+128 : unID=unID+1
	hotspot2 -(a/2+distfromcenter)*cos(arm3angle),-(a/2+distfromcenter)*sin(arm3angle),unID,arm3angle,5 : unID=unID+1

return



! ==============================================================================
"MOUNT_11":
! ==============================================================================

	for j = 1 to 3
		if j = 1 then
			actangle = 0
			rotangle = 0
		else
			if j = 2 then
				actangle = arm1angle
				rotangle = arm1angle
			else
				actangle = arm2angle
				rotangle = arm2angle
			endif
		endif

		if numSpots/3 > 1 then
			spotdistance = 3*a/(numSpots)
		else
			spotdistance = (a - 0.2)
		endif

		for i = 0 to numSpots/3-1
			if numSpots/3 > 1 then
				xSpotPos[j*numSpots/3-1*(i=0)] = -a/2+(j=3)*a + (a-(a-spotdistance)/2-spotdistance*i)*cos(actangle)
				ySpotPos[j*numSpots/3-1*(i=0)] = (a-(a-spotdistance)/2-spotdistance*i)*sin(actangle)
			else
				xSpotPos[j] = -a/2+(j=3)*a + (a-(a-spotdistance)/2-spotdistance*i)*cos(actangle)
				ySpotPos[j] = (a-(a-spotdistance)/2-spotdistance*i)*sin(actangle)
			endif
		next i
	next j

	hotspot2 -a/2,0,unID,arm1angle,6 : unID=unID+1
	hotspot2 1,0,unID,arm1angle,4+128 : unID=unID+1
	hotspot2 -a/2+a*cos(arm1angle),a*sin(arm1angle),unID,arm1angle,5 : unID=unID+1

	hotspot2 a/2,0,unID,arm2angle,6 : unID=unID+1
	hotspot2 1,0,unID,arm2angle,4+128 : unID=unID+1
	hotspot2 a/2+a*cos(arm2angle),a*sin(arm2angle),unID,arm2angle,5 : unID=unID+1

return

