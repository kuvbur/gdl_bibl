

lod2D = 0
if GLOB_SCALE > 150 then
	lod2D = DET2D_SIMPLE_ONE
endif
if GLOB_SCALE <= 150 and GLOB_SCALE > 75 then
	lod2D = DET2D_SIMPLE_TWO
endif
if GLOB_SCALE <=  75 then
	lod2D = DET2D_DETAILED
endif

if scaleSensFontSize then
	if lod2D = DET2D_SIMPLE_ONE then fontHeight = fontSize200mm
	if lod2D = DET2D_SIMPLE_TWO then fontHeight = fontSize100mm
	if lod2D = DET2D_DETAILED then fontHeight = fontSize50mm
else
	fontHeight = gs_font_height
endif

pen gs_cont_pen
fill gs_fill_type

mul2 COS(gs_terry),COS(gs_terrx)

define style "parking" fontType, fontHeight,5,1
style "parking"

call "Resize_A_B_ZZYZX" Parameters ALL

unID = 1

if sfs then gosub "drawLine"

if iNumberingSide = NUMBERING_SIDE1 then
	_writeOutNum	= 1 + num_start - 1
	_writeOutCont	= 1
else
	_writeOutNum	= gs_list_parkingPlaces + num_start - 1
	_writeOutCont	= -1
endif

atFirstNum		= 1
atFirstHandic	= 1
atFirstFamily	= 1
atFirstNormal	= 1
atFirstEmpty	= 1
for i = 1 to vardim1(parkingSizes)
	isymboltype = int(parkingSizes[i][2])

	if isymboltype > 0 then
		gosub "drawSign"
		gosub "numbering"
		gosub "drawBollard"
	else
		if markEmptySpace then
			add2 tl,tb
			if typeTextRotation_m = TEXT_READABLE & bNeedTextRotation then rot2 180
	
				if isymboltype < 0 then
					text2 0, 0, "X"
				else
					text2 0, 0, "E"
				endif
	
			if typeTextRotation_m = TEXT_READABLE & bNeedTextRotation then del 1
			del 1
		endif
	endif

	add2 parkingSizes[i][1],0

	if i < vardim1(parkingSizes) then
		if not(isymboltype = SYMBOL_WHEELCHAIR) then gosub  "drawLine"
	else
		if sss then gosub  "drawLine"
	endif
next i

del i-1

if markEmptySpace then
	_writeOutNum	= 1
	_writeOutCont	= 1
	for i = 1 to vardim1(parkingSizes)
		add2 0,-tb
		gosub "numbering"
		del 1
		add2 parkingSizes[i][1],0
	next i
	del i-1
endif

if bEmptyPlace then
	for i = 1 to iNumEmptyPlace
		gosub "emptySpaceEditing"
	next i
endif
end

"drawLine":
	poly2_b 5, 1+2+4+64, gs_fill_pen, gs_back_pen,
		   -sw/2, 0, 1,
			sw/2, 0, 1,
			sw/2, b, 1,
		   -sw/2, b, 1,
		   -sw/2, 0, 1
return

"drawSign":
	if isymboltype = SYMBOL_WHEELCHAIR then
		if atFirstHandic then
			if GLOB_FEEDBACK_MODE = 1 then
				add2 handicapWidth, 0
				gosub "drawLine"
				del 1
			endif

			hotspot2 0, B/2, unID, handicapWidth, 1+128			: unID = unID + 1
			hotspot2 -1, B/2, unID, handicapWidth, 3			: unID = unID + 1
			hotspot2 handicapWidth, B/2, unID, handicapWidth, 2	: unID = unID + 1

			hotspot2 parkingSizes[i][1]-handicapAddWidth, B/2, unID, handicapAddWidth, 1+128			: unID = unID + 1
			hotspot2 parkingSizes[i][1]-handicapAddWidth-1, B/2, unID, handicapAddWidth, 3			: unID = unID + 1
			hotspot2 parkingSizes[i][1], B/2, unID, handicapAddWidth, 2	: unID = unID + 1
			atFirstHandic = 0
		endif

		if idetlevel2D = DETLEVEL2D_DETAILED then
			add2 0,B/2-(2/3.079158810136 * sizeMod)/2
			add2 (parkingSizes[i][1]-handicapAddWidth)/2-(2/3.079158810136 * sizeMod)/2+sw/2,0
			call "parking_symbols" parameters all	A = 2/3.079158810136 * sizeMod,
													B = 2/3.079158810136 * sizeMod,
													ZZYZX = 0.01,
													isymboltype = 1,
													bFillIn2D = 1
			del 2
		endif

		if idetlevel2D = DETLEVEL2D_DETAILED then
			_isymboltype = 3
		else
			_isymboltype = 4
		endif

		add2 parkingSizes[i][1]-handicapAddWidth+sw/2, 0
		if handicapAddWidth > 0 then
			call "parking_symbols" parameters all	A = handicapAddWidth,
													B = B,
													ZZYZX = 0.01,
													isymboltype = _isymboltype,
													lineWidth = sw,
													bFillIn2D = 1
		endif
		del 1
	endif

	if isymboltype = SYMBOL_FAMILY then
		if atFirstFamily then
			if GLOB_FEEDBACK_MODE = 1 then
				add2 familyWidth, 0
				gosub "drawLine"
				del 1
			endif

			hotspot2 0, B/2, unID, familyWidth, 1+128		: unID = unID + 1
			hotspot2 -1, B/2, unID, familyWidth, 3			: unID = unID + 1
			hotspot2 familyWidth, B/2, unID, familyWidth, 2	: unID = unID + 1
			atFirstFamily = 0
		endif
		if idetlevel2D = DETLEVEL2D_DETAILED then
			add2 0, B/2-(1.796787381172/3.079158810136 * sizeMod)/2
			add2 parkingSizes[i][1]/2-(2.879158810136/3.079158810136 * sizeMod)/2, 0
			call "parking_symbols" parameters all	A = sizeMod,
													B = (2.009757855857/3.079158810136 * sizeMod),
													ZZYZX = 0.01,
													isymboltype = 2,
													bFillIn2D = 1
			del 2
		endif

	endif

	if isymboltype = SYMBOL_NORMAL then
		if atFirstNormal then
			if GLOB_FEEDBACK_MODE = 1 then
				add2 minspace, 0
				gosub "drawLine"
				del 1
			endif

			hotspot2 0, B/2, unID, minspace, 1+128		: unID = unID + 1
			hotspot2 -1, B/2, unID, minspace, 3			: unID = unID + 1
			hotspot2 minspace, B/2, unID, minspace, 2	: unID = unID + 1
			atFirstNormal = 0
		endif
	endif
return

"numbering":
	if show_num then
		if atFirstNum then
			hotspot2 tl,0,unID,tb,1+128 :unID = unID + 1
			hotspot2 tl,-1,unID,tb,3 :unID = unID + 1
			hotspot2 tl,tb,unID,tb,2 :unID = unID + 1
			
			hotspot2 0,tb,unID,tl,1+128 :unID = unID + 1
			hotspot2 -1,tb,unID,tl,3 :unID = unID + 1
			hotspot2 tl,tb,unID,tl,2 :unID = unID + 1
			atFirstNum = 0
		endif

		add2 tl,tb
		if typeTextRotation_m = TEXT_READABLE & bNeedTextRotation then rot2 180

		text2 0, 0, _writeOutNum

		if typeTextRotation_m = TEXT_READABLE & bNeedTextRotation then del 1
		del 1

		_writeOutNum = _writeOutNum + _writeOutCont
	else
		unID = unID + 6
	endif
return

"drawBollard":
	if bBollard then
		if isymboltype = SYMBOL_WHEELCHAIR then
			_handicapAddMod = handicapAddWidth
		else
			_handicapAddMod = 0
		endif

		add2 (parkingSizes[i][1]-_handicapAddMod)/2, B
		call "bollard_m" parameters all bPartOfLayout 	= 1,
										enableBollardTypes		= 2 + 4 + 8 + 16 + 32 + 64 + 128 + 256 + 512 + 1024 + 2048,
										bollardUniD				= 100 + 10 * i
		del 1
	endif
return

"emptySpaceEditing":
	if i = 1 then
		hotspot2 0, B/2, unID, emptyPosition1, 1+128			: unID = unID + 1
		hotspot2 -1, B/2, unID, emptyPosition1, 3				: unID = unID + 1
		hotspot2 emptyPosition1, B/2, unID, emptyPosition1, 2	: unID = unID + 1
		
		if not(bUniformEmptyWidth) then
			hotspot2 emptyPosition1, B/2, unID, emptyWidth1, 1+128			: unID = unID + 1
			hotspot2 emptyPosition1-1, B/2, unID, emptyWidth1, 3			: unID = unID + 1
			hotspot2 emptyPosition1+emptyWidth1, B/2, unID, emptyWidth1, 2	: unID = unID + 1
		else
			hotspot2 emptyPosition1, B/2, unID, UniformEmptyWidth, 1+128				: unID = unID + 1
			hotspot2 emptyPosition1-1, B/2, unID, UniformEmptyWidth, 3					: unID = unID + 1
			hotspot2 emptyPosition1+UniformEmptyWidth, B/2, unID, UniformEmptyWidth, 2	: unID = unID + 1
		endif
	else
		unID = unID + 3
	endif

	if i = 2 then
		hotspot2 0, B/2, unID, emptyPosition2, 1+128			: unID = unID + 1
		hotspot2 -1, B/2, unID, emptyPosition2, 3				: unID = unID + 1
		hotspot2 emptyPosition2, B/2, unID, emptyPosition2, 2	: unID = unID + 1
		
		if not(bUniformEmptyWidth) then
			hotspot2 emptyPosition2, B/2, unID, emptyWidth2, 1+128			: unID = unID + 1
			hotspot2 emptyPosition2-1, B/2, unID, emptyWidth2, 3			: unID = unID + 1
			hotspot2 emptyPosition2+emptyWidth2, B/2, unID, emptyWidth2, 2	: unID = unID + 1
		else
			unID = unID + 3
		endif
	else
		unID = unID + 3
	endif

	if i = 3 then
		hotspot2 0, B/2, unID, emptyPosition3, 1+128			: unID = unID + 1
		hotspot2 -1, B/2, unID, emptyPosition3, 3				: unID = unID + 1
		hotspot2 emptyPosition3, B/2, unID, emptyPosition3, 2	: unID = unID + 1
		
		if not(bUniformEmptyWidth) then
			hotspot2 emptyPosition3, B/2, unID, emptyWidth3, 1+128			: unID = unID + 1
			hotspot2 emptyPosition3-1, B/2, unID, emptyWidth3, 3			: unID = unID + 1
			hotspot2 emptyPosition3+emptyWidth3, B/2, unID, emptyWidth3, 2	: unID = unID + 1
		else
			unID = unID + 3
		endif
	else
		unID = unID + 3
	endif

	if i = 4 then
		hotspot2 0, B/2, unID, emptyPosition4, 1+128			: unID = unID + 1
		hotspot2 -1, B/2, unID, emptyPosition4, 3				: unID = unID + 1
		hotspot2 emptyPosition4, B/2, unID, emptyPosition4, 2	: unID = unID + 1
		
		if not(bUniformEmptyWidth) then
			hotspot2 emptyPosition4, B/2, unID, emptyWidth4, 1+128			: unID = unID + 1
			hotspot2 emptyPosition4-1, B/2, unID, emptyWidth4, 3			: unID = unID + 1
			hotspot2 emptyPosition4+emptyWidth4, B/2, unID, emptyWidth4, 2	: unID = unID + 1
		else
			unID = unID + 3
		endif
	else
		unID = unID + 3
	endif

	if i = 5 then
		hotspot2 0, B/2, unID, emptyPosition5, 1+128			: unID = unID + 1
		hotspot2 -1, B/2, unID, emptyPosition5, 3				: unID = unID + 1
		hotspot2 emptyPosition5, B/2, unID, emptyPosition5, 2	: unID = unID + 1
		
		if not(bUniformEmptyWidth) then
			hotspot2 emptyPosition5, B/2, unID, emptyWidth5, 1+128			: unID = unID + 1
			hotspot2 emptyPosition5-1, B/2, unID, emptyWidth5, 3			: unID = unID + 1
			hotspot2 emptyPosition5+emptyWidth5, B/2, unID, emptyWidth5, 2	: unID = unID + 1
		else
			unID = unID + 3
		endif
	else
		unID = unID + 3
	endif

	if i = 6 then
		hotspot2 0, B/2, unID, emptyPosition6, 1+128			: unID = unID + 1
		hotspot2 -1, B/2, unID, emptyPosition6, 3				: unID = unID + 1
		hotspot2 emptyPosition6, B/2, unID, emptyPosition6, 2	: unID = unID + 1
		
		if not(bUniformEmptyWidth) then
			hotspot2 emptyPosition6, B/2, unID, emptyWidth6, 1+128			: unID = unID + 1
			hotspot2 emptyPosition6-1, B/2, unID, emptyWidth6, 3			: unID = unID + 1
			hotspot2 emptyPosition6+emptyWidth6, B/2, unID, emptyWidth6, 2	: unID = unID + 1
		else
			unID = unID + 3
		endif
	else
		unID = unID + 3
	endif

	if i = 7 then
		hotspot2 0, B/2, unID, emptyPosition7, 1+128			: unID = unID + 1
		hotspot2 -1, B/2, unID, emptyPosition7, 3				: unID = unID + 1
		hotspot2 emptyPosition7, B/2, unID, emptyPosition7, 2	: unID = unID + 1
		
		if not(bUniformEmptyWidth) then
			hotspot2 emptyPosition7, B/2, unID, emptyWidth7, 1+128			: unID = unID + 1
			hotspot2 emptyPosition7-1, B/2, unID, emptyWidth7, 3			: unID = unID + 1
			hotspot2 emptyPosition7+emptyWidth7, B/2, unID, emptyWidth7, 2	: unID = unID + 1
		else
			unID = unID + 3
		endif
	else
		unID = unID + 3
	endif

	if i = 8 then
		hotspot2 0, B/2, unID, emptyPosition8, 1+128			: unID = unID + 1
		hotspot2 -1, B/2, unID, emptyPosition8, 3				: unID = unID + 1
		hotspot2 emptyPosition8, B/2, unID, emptyPosition8, 2	: unID = unID + 1
		
		if not(bUniformEmptyWidth) then
			hotspot2 emptyPosition8, B/2, unID, emptyWidth8, 1+128			: unID = unID + 1
			hotspot2 emptyPosition8-1, B/2, unID, emptyWidth8, 3			: unID = unID + 1
			hotspot2 emptyPosition8+emptyWidth8, B/2, unID, emptyWidth8, 2	: unID = unID + 1
		else
			unID = unID + 3
		endif
	else
		unID = unID + 3
	endif

	if i = 9 then
		hotspot2 0, B/2, unID, emptyPosition9, 1+128			: unID = unID + 1
		hotspot2 -1, B/2, unID, emptyPosition9, 3				: unID = unID + 1
		hotspot2 emptyPosition9, B/2, unID, emptyPosition9, 2	: unID = unID + 1
		
		if not(bUniformEmptyWidth) then
			hotspot2 emptyPosition9, B/2, unID, emptyWidth9, 1+128			: unID = unID + 1
			hotspot2 emptyPosition9-1, B/2, unID, emptyWidth9, 3			: unID = unID + 1
			hotspot2 emptyPosition9+emptyWidth9, B/2, unID, emptyWidth9, 2	: unID = unID + 1
		else
			unID = unID + 3
		endif
	else
		unID = unID + 3
	endif

	if i = 10 then
		hotspot2 0, B/2, unID, emptyPosition10, 1+128			: unID = unID + 1
		hotspot2 -1, B/2, unID, emptyPosition10, 3				: unID = unID + 1
		hotspot2 emptyPosition10, B/2, unID, emptyPosition10, 2	: unID = unID + 1
		
		if not(bUniformEmptyWidth) then
			hotspot2 emptyPosition10, B/2, unID, emptyWidth10, 1+128			: unID = unID + 1
			hotspot2 emptyPosition10-1, B/2, unID, emptyWidth10, 3				: unID = unID + 1
			hotspot2 emptyPosition10+emptyWidth10, B/2, unID, emptyWidth10, 2	: unID = unID + 1
		else
			unID = unID + 3
		endif
	else
		unID = unID + 3
	endif
return

