
! ==============================================================================
! Font Size setting
! ==============================================================================

parameters gs_font_height = abs(gs_font_height)
values "gs_font_height" range (0,]
values "gs_font_height_point" range (0,]

if scaleSensFontSize then
	lock "gs_font_height", "gs_font_height_point"
	hideparameter "gs_font_height", "gs_font_height_point"
else
	lock	"fontSize50mm", "fontSize50pt",
			"fontSize100mm", "fontSize100pt",
			"fontSize200mm", "fontSize200pt"
	hideparameter 	"fontSize50mm", "fontSize50pt",
					"fontSize100mm", "fontSize100pt",
					"fontSize200mm", "fontSize200pt"
endif

w_units_form = ""
rrr = request("Working_length_unit", "", w_units_form)
bMetricDimension = strstr(w_units_form, "m")		! m, cm, mm

if bMetricDimension then
	lock "fontSize200pt", "fontSize100pt", "fontSize50pt", "gs_font_height_point"
	hideparameter "fontSize200pt", "fontSize100pt", "fontSize50pt", "gs_font_height_point"
else
	lock "fontSize200mm", "fontSize100mm", "fontSize50mm", "gs_font_height"
	hideparameter "fontSize200mm", "fontSize100mm", "fontSize50mm", "gs_font_height"
endif

call "FM_types" parameters all



values{2} "idetlevel2D"	DETLEVEL2D_SIMPLE, stdetlevel2D[1],
						DETLEVEL2D_DETAILED, stdetlevel2D[2]

values "gs_detlevel_3D" stDetail_3D[3], stDetail_3D[1]
values "gs_detlevel_3D_m" 2, 0

if GLOB_MODPAR_NAME = "gs_detlevel_3D" then
	gs_detlevel_3D_m = 2
	if gs_detlevel_3D = stDetail_3D[1] then gs_detlevel_3D_m = 0
	parameters gs_detlevel_3D_m = gs_detlevel_3D_m
else
	gs_detlevel_3D = stDetail_3D[3]
	if gs_detlevel_3D_m = 0 then gs_detlevel_3D = stDetail_3D[1]
	parameters gs_detlevel_3D = gs_detlevel_3D
endif

values{2} "iNumberingSide"	NUMBERING_SIDE1,	stNumberingSide[1],
							NUMBERING_SIDE2,	stNumberingSide[2]


! ==============================================================================
! Palce Size setting
! ==============================================================================

if not(bEmptyPlace) then
	hideparameter "iNumEmptyPlace", "bUniformEmptyWidth", "UniformEmptyWidth"
	lock "iNumEmptyPlace", "bUniformEmptyWidth", "UniformEmptyWidth"

	for i = 1 to 10
		_widthParName	= "emptyWidth" + str(i,1,0)
		_posParName		= "emptyPosition" + str(i,1,0)
		hideparameter _widthParName, _posParName
		lock _widthParName, _posParName
	next i
endif

if not(bUniformEmptyWidth) then
	hideparameter "UniformEmptyWidth"
	lock "UniformEmptyWidth"
else
	for i = 1 to 10
		_widthParName	= "emptyWidth" + str(i,1,0)
		hideparameter _widthParName
		lock _widthParName
	next i
endif

values "iNumEmptyPlace" 1,2,3,4,5,6,7,8,9,10
values "iNumHandicapPlace" range [1, int((A-(iNumFamilyPlace*familyWidth)) / (handicapWidth+handicapAddWidth))]
values "iNumFamilyPlace" range [1, int((A-iNumHandicapPlace*(handicapWidth+handicapAddWidth)) / familyWidth)]

values "UniformEmptyWidth" range (0, ]
values "emptyWidth1" range (0, ]
values "emptyWidth2" range (0, ]
values "emptyWidth3" range (0, ]
values "emptyWidth4" range (0, ]
values "emptyWidth5" range (0, ]
values "emptyWidth6" range (0, ]
values "emptyWidth7" range (0, ]
values "emptyWidth8" range (0, ]
values "emptyWidth9" range (0, ]
values "emptyWidth10" range (0, ]
values "handicapWidth" range (0, ]
values "handicapAddWidth" range [0, ]
values "familyWidth" range (0, ]

for i = 10 to iNumEmptyPlace + 1 step -1
	_widthParName	= "emptyWidth" + str(i,1,0)
	_posParName		= "emptyPosition" + str(i,1,0)
	hideparameter _widthParName, _posParName
	lock _widthParName, _posParName
next i

_currpos = 0
values "emptyPosition1" range [_currpos,)
EmptyPlaceDataGrid[1][1] = emptyPosition1
if bUniformEmptyWidth then
	EmptyPlaceDataGrid[1][2] = UniformEmptyWidth
else
	EmptyPlaceDataGrid[1][2] = emptyWidth1
endif

_currpos = emptyPosition1 + emptyWidth1
values "emptyPosition2" range [_currpos,)
EmptyPlaceDataGrid[2][1] = emptyPosition2
if bUniformEmptyWidth then
	EmptyPlaceDataGrid[2][2] = UniformEmptyWidth
else
	EmptyPlaceDataGrid[2][2] = emptyWidth2
endif

_currpos = emptyPosition2 + emptyWidth2
values "emptyPosition3" range [_currpos,)
EmptyPlaceDataGrid[3][1] = emptyPosition3
if bUniformEmptyWidth then
	EmptyPlaceDataGrid[3][2] = UniformEmptyWidth
else
	EmptyPlaceDataGrid[3][2] = emptyWidth3
endif

_currpos = emptyPosition3 + emptyWidth3
values "emptyPosition4" range [_currpos,)
EmptyPlaceDataGrid[4][1] = emptyPosition4
if bUniformEmptyWidth then
	EmptyPlaceDataGrid[4][2] = UniformEmptyWidth
else
	EmptyPlaceDataGrid[4][2] = emptyWidth4
endif

_currpos = emptyPosition4 + emptyWidth4
values "emptyPosition5" range [_currpos,)
EmptyPlaceDataGrid[5][1] = emptyPosition5
if bUniformEmptyWidth then
	EmptyPlaceDataGrid[5][2] = UniformEmptyWidth
else
	EmptyPlaceDataGrid[5][2] = emptyWidth5
endif

_currpos = emptyPosition5 + emptyWidth5
values "emptyPosition6" range [_currpos,)
EmptyPlaceDataGrid[6][1] = emptyPosition6
if bUniformEmptyWidth then
	EmptyPlaceDataGrid[6][2] = UniformEmptyWidth
else
	EmptyPlaceDataGrid[6][2] = emptyWidth6
endif

_currpos = emptyPosition6 + emptyWidth6
values "emptyPosition7" range [_currpos,)
EmptyPlaceDataGrid[7][1] = emptyPosition7
if bUniformEmptyWidth then
	EmptyPlaceDataGrid[7][2] = UniformEmptyWidth
else
	EmptyPlaceDataGrid[7][2] = emptyWidth7
endif

_currpos = emptyPosition7 + emptyWidth7
values "emptyPosition8" range [_currpos,)
EmptyPlaceDataGrid[8][1] = emptyPosition8
if bUniformEmptyWidth then
	EmptyPlaceDataGrid[8][2] = UniformEmptyWidth
else
	EmptyPlaceDataGrid[8][2] = emptyWidth8
endif

_currpos = emptyPosition8 + emptyWidth8
values "emptyPosition9" range [_currpos,)
EmptyPlaceDataGrid[9][1] = emptyPosition9
if bUniformEmptyWidth then
	EmptyPlaceDataGrid[9][2] = UniformEmptyWidth
else
	EmptyPlaceDataGrid[9][2] = emptyWidth9
endif

_currpos = emptyPosition9 + emptyWidth9
values "emptyPosition10" range [_currpos,)
EmptyPlaceDataGrid[10][1] = emptyPosition10
if bUniformEmptyWidth then
	EmptyPlaceDataGrid[10][2] = UniformEmptyWidth
else
	EmptyPlaceDataGrid[10][2] = emptyWidth10
endif
parameters EmptyPlaceDataGrid = EmptyPlaceDataGrid

if not(bHandicapPlace) then
	hideparameter "iNumHandicapPlace", "handicapWidth", "handicapAddWidth"
	lock "iNumHandicapPlace", "handicapWidth", "handicapAddWidth"
endif

if not(bFamilyPlace) then
	hideparameter "iNumFamilyPlace", "familyWidth"
	lock "iNumFamilyPlace", "familyWidth"
endif

!========================================================
! calculate Parking Segments Widths
!========================================================
dim _parkingSegments[]
if bEmptyPlace then
	for i = 1 to iNumEmptyPlace
		if i = 1 then
			_parkingSegments[1] = EmptyPlaceDataGrid[1][1]
		else
			_parkingSegments[i] = EmptyPlaceDataGrid[i][1] - (EmptyPlaceDataGrid[i-1][1] + EmptyPlaceDataGrid[i-1][2])
		endif
	next i
	
	if A - (EmptyPlaceDataGrid[i-1][1] + EmptyPlaceDataGrid[i-1][2]) > 0 then
		_parkingSegments[i] = A - (EmptyPlaceDataGrid[i-1][1] + EmptyPlaceDataGrid[i-1][2])
	endif
else
	_parkingSegments[1] = A
endif

parameters parkingSegments = _parkingSegments

!========================================================

dim _parkingSizes[][]
_handicFullsize		= handicapWidth + handicapAddWidth
if bEmptyPlace then
	_reamingEmptyNum	= iNumEmptyPlace
else
	_reamingEmptyNum	= 0
endif

if bHandicapPlace then
	_reamingHandicNum	= iNumHandicapPlace
else
	_reamingHandicNum	= 0
endif

if bFamilyPlace then
	_reamingFamilyNum	= iNumFamilyPlace
else
	_reamingFamilyNum	= 0
endif

_place = 1
for i = 1 to vardim1(ParkingSegments)
	maxHandicInSegment = 0
	maxFamilyInSegment = 0
	maxNormalInSegment = 0
	_AdditionalWidthInSegment = 0

	if ParkingSegments[i] > EPS then
		if bHandicapPlace & _reamingHandicNum > 0 then
			maxHandicInSegment = min(int(ParkingSegments[i] / _handicFullsize), _reamingHandicNum)
			_reamingHandicNum = _reamingHandicNum - maxHandicInSegment
		endif

		_reamingWidth = ParkingSegments[i] - (maxHandicInSegment * _handicFullsize)
		if bFamilyPlace & _reamingHandicNum = 0 & _reamingFamilyNum > 0 & \
			(_reamingWidth - familyWidth > EPS | abs(_reamingWidth - familyWidth) < EPS) then
			maxFamilyInSegment =  min(int(_reamingWidth / familyWidth), _reamingFamilyNum)
			_reamingFamilyNum = _reamingFamilyNum - maxFamilyInSegment
		endif

		_reamingWidth = ParkingSegments[i] - (maxHandicInSegment * _handicFullsize) - (maxFamilyInSegment * familyWidth)
		if _reamingWidth > 0 & _reamingHandicNum = 0 & _reamingFamilyNum = 0 & \
			(_reamingWidth - minspace > EPS | abs(_reamingWidth - minspace) < EPS) then
			maxNormalInSegment = int(_reamingWidth / minspace)
		endif

		_reamingWidth = ParkingSegments[i] - (maxHandicInSegment * _handicFullsize) - (maxFamilyInSegment * familyWidth) - (maxNormalInSegment * minspace)
		if _reamingWidth > EPS then
			if maxHandicInSegment + maxFamilyInSegment + maxNormalInSegment > 0 then
				_AdditionalWidthInSegment = _reamingWidth / (maxHandicInSegment + maxFamilyInSegment + maxNormalInSegment)
			else
				_parkingSizes[_place][1] = _reamingWidth
				_parkingSizes[_place][2] = SYMBOL_USELESS ! Useless
				_place = _place + 1
			endif
		endif

		for j = 1 to maxHandicInSegment
			_parkingSizes[_place][1] =_handicFullsize + _AdditionalWidthInSegment
			_parkingSizes[_place][2] = SYMBOL_WHEELCHAIR ! Disabled
			_place = _place + 1
		next j

		for j = 1 to maxFamilyInSegment
			_parkingSizes[_place][1] = familyWidth + _AdditionalWidthInSegment
			_parkingSizes[_place][2] = SYMBOL_FAMILY ! Family
			_place = _place + 1
		next j

		for j = 1 to maxNormalInSegment
			_parkingSizes[_place][1] = minspace + _AdditionalWidthInSegment
			_parkingSizes[_place][2] = SYMBOL_NORMAL ! Normal
			_place = _place + 1
		next j

		if _reamingEmptyNum > 0 then
			_parkingSizes[_place][1] = EmptyPlaceDataGrid[i][2]
			_parkingSizes[_place][2] = SYMBOL_EMPTY ! Empty
			_reamingEmptyNum = _reamingEmptyNum - 1
			_place = _place + 1
		endif
	else
		if _reamingEmptyNum > 0 then
			_parkingSizes[_place][1] = EmptyPlaceDataGrid[i][2]
			_parkingSizes[_place][2] = SYMBOL_EMPTY ! Empty
			_reamingEmptyNum = _reamingEmptyNum - 1
			_place = _place + 1
		endif
	endif
next i

if _reamingHandicNum > 0 then
	for i = _reamingHandicNum to 1 step - 1
		_parkingSizes[_place][1] =_handicFullsize
		_parkingSizes[_place][2] = SYMBOL_WHEELCHAIR ! Disabled
		_place = _place + 1
	next i
endif

if _reamingFamilyNum > 0 then
	for i = _reamingFamilyNum to 1 step - 1
		_parkingSizes[_place][1] = familyWidth
		_parkingSizes[_place][2] = SYMBOL_FAMILY ! Family
		_place = _place + 1
qwe = qwe +1
	next i
endif

parameters parkingSizes = _parkingSizes

gs_list_parkingPlaces = 0
for i = 1 to vardim1(_parkingSizes)
	if abs(_parkingSizes[i][2]) > EPS then
		gs_list_parkingPlaces = gs_list_parkingPlaces + 1
	endif
next i
parameters gs_list_parkingPlaces = gs_list_parkingPlaces

!========================================================
! other parameter settings
!========================================================

if gs_cont_pen=0 then parameters gs_cont_pen=4
if gs_fill_pen=0 then parameters gs_fill_pen=91

values{2} "iTerrainSlope" 	TERRAINSLOPE_NOSLOPE,		stSlopeTypes[1],
							TERRAINSLOPE_LENGTHSLOPE,	stSlopeTypes[2],
							TERRAINSLOPE_SIDESLOPE,		stSlopeTypes[3]

if iTerrainSlope = TERRAINSLOPE_NOSLOPE then
	gs_terrx = 0
	gs_terry = 0
	parameters gs_terrx = gs_terrx
	parameters gs_terry = gs_terry
	hideparameter "gs_terrx", "gs_terry"
	lock "gs_terrx", "gs_terry"
endif

if iTerrainSlope = TERRAINSLOPE_LENGTHSLOPE then
	gs_terry = 0
	parameters gs_terry = gs_terry
	hideparameter "gs_terry"
	lock "gs_terry"
endif

if iTerrainSlope = TERRAINSLOPE_SIDESLOPE then
	gs_terrx = 0
	parameters  gs_terrx = gs_terrx
	hideparameter "gs_terrx"
	lock "gs_terrx"
endif

values "sw" RANGE (0,)
values "minspace" RANGE (0.2, A)

if tb < 2*sw Then
	tb = 2*sw
	parameters tb = 2*sw
EndIf

if tl < 2*sw Then
	tl = 2*sw
	parameters tl = 2*sw
EndIf

if tb > b/2 Then
	tb = b/2
	parameters tb = b/2
EndIf

if tl > minspace/2 Then
	tl = minspace/2
	parameters tl = minspace/2
EndIf

values "typeTextRotation" `Читаемый`,`Выровнять по Символу`
values "typeTextRotation_m" TEXT_READABLE, TEXT_ALIGNED

if GLOB_MODPAR_NAME = "typeTextRotation" then
	if typeTextRotation = `Читаемый`			then typeTextRotation_m = TEXT_READABLE
	if typeTextRotation = `Выровнять по Символу`	then typeTextRotation_m = TEXT_ALIGNED
	parameters typeTextRotation_m = typeTextRotation_m
else
	if typeTextRotation_m = TEXT_READABLE					then typeTextRotation = `Читаемый`
	if typeTextRotation_m = TEXT_ALIGNED					then typeTextRotation = `Выровнять по Символу`
	parameters typeTextRotation = typeTextRotation
endif

if typeTextRotation_m = TEXT_ALIGNED then
	hideparameter "bTextFollow2DOrientation"
	lock "bTextFollow2DOrientation"
endif

Dot_in_mm = 25.4 / 72


! Synhronized mm and point in marker width
if scaleSensFontSize then
	  if GLOB_MODPAR_NAME = "fontSize200pt" then
		  parameters fontSize200mm = fontSize200pt * Dot_in_mm
		  fontSize200mm = fontSize200pt * Dot_in_mm
	  else
		  parameters fontSize200pt = fontSize200mm / Dot_in_mm
		  fontSize200pt = fontSize200mm / Dot_in_mm
	  endif

	  if GLOB_MODPAR_NAME = "fontSize100pt" then
		  parameters fontSize100mm = fontSize100pt * Dot_in_mm
		  fontSize100mm = fontSize100pt * Dot_in_mm
	  else
		  parameters fontSize100pt = fontSize100mm / Dot_in_mm
		  fontSize100pt = fontSize100mm / Dot_in_mm
	  endif

	  if GLOB_MODPAR_NAME = "fontSize50pt" then
		  parameters fontSize50mm = fontSize50pt * Dot_in_mm
		  fontSize50mm = fontSize50pt * Dot_in_mm
	  else
		  parameters fontSize50pt = fontSize50mm / Dot_in_mm
		  fontSize50pt = fontSize50mm / Dot_in_mm
	  endif
else
	if GLOB_MODPAR_NAME = "gs_font_height_point" then
		parameters gs_font_height = gs_font_height_point * Dot_in_mm
		gs_font_height = gs_font_height_point * Dot_in_mm
	else
		parameters gs_font_height_point = gs_font_height / Dot_in_mm
		gs_font_height_point = gs_font_height / Dot_in_mm
	endif
endif


! ==============================================================================
! Bollard
! ==============================================================================

if bBollard then
	call "bollard_m" parameters all bPartOfLayout 	= 1,
									enableBollardTypes		= 2 + 4 + 8 + 16 + 32 + 64 + 128 + 256 + 512 + 1024 + 2048,
									bBollardBase			= bBollardBase,
									bollardUnID				= 100
else
	lock "BollardType", "iBollardType", "bollardDia", "bollardWidth", "bollardDepth", "bollardBaseDia",\
		"bollardTopDia", "bollardHeight", "bBollardBase", "xBollardPos", "yBollardPos",\
		"BollardMat", "BollardMat1", "BollardMat2"
	hideparameter "BollardType", "iBollardType", "bollardDia", "bollardWidth", "bollardDepth", "bollardBaseDia",\
		"bollardTopDia", "bollardHeight", "bBollardBase", "xBollardPos", "yBollardPos",\
		"BollardMat", "BollardMat1", "BollardMat2"
endif

