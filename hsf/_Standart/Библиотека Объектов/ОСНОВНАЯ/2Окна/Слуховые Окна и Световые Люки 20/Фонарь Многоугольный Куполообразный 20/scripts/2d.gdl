

! =============================================================================
! GS Skylight Functions
! =============================================================================

call "GS Skylight Functions",
	parameters all	bEnableLining			= bEnableLining,
					bEnableEdgeTypesUpper	= bEnableEdgeTypesUpper,
					bEnableEdgeTypesLower	= bEnableEdgeTypesLower,
	returned_parameters	iLoD2D,
		gs_opLinePen, gs_openedSashPen, gs_iSwingType, gs_swingLineType, gs_opline_style_m

if iLoD2D = SYMBS_OFF | iLoD2D = SYMBS_S_1 then end


! ==============================================================================
! Symbolic 2D
! ==============================================================================

pen gs_cont_pen

unID=1
hotspot2 0,0,unID : unID=unID+1

if abs(cos(ac_roofang)) < EPS then
	if (GLOB_PREVIEW_MODE = 1) then
		ac_roofang = 0
	else
		end
	endif
endif
mul2 1,cos(ac_roofang)

if gs_back_pen<>0 then
	mask=1+2+4+64
else
	mask=1+4
endif

pen gs_cont_pen
fill gs_fill_type
if ac_skylight_function then
	poly2_b 4, mask, gs_fill_pen, gs_back_pen,
		-a/2, 0, 0,
		a/2, 0, 0,
		a/2, b, 0,
		-a/2, b, 0
endif

add2 0, b/2-(b/2-gs_radius*cos(alfa))

rot2 -90+alfa

angle=0
for i=1 to gs_edge_num
	put gs_radius*cos(angle), gs_radius*sin(angle), 0
	angle=i*360/gs_edge_num
next i

if iLoD2D = SYMBS_D_1 | iLoD2D = SYMBS_D_2 then
	put gs_radius*cos(0), gs_radius*sin(0), -1

	poly2_b nsp/3, mask, gs_fill_pen, gs_back_pen,
			use(nsp)

	angle=0
	for i=1 to gs_edge_num
		put (gs_radius-gs_curb_thk)*cos(angle), (gs_radius-gs_curb_thk)*sin(angle), 1
		angle=i*360/gs_edge_num
	next i
	put (gs_radius-gs_curb_thk)*cos(0), (gs_radius-gs_curb_thk)*sin(0), -1
endif

pen gs_cont_pen
fill gs_fill_type
poly2_b nsp/3, mask, gs_fill_pen, gs_back_pen,
		get(nsp)

ang = 360/gs_edge_num
for i=1 to gs_edge_num
	line2 0, 0, gs_radius, 0
	line2 gs_radius*cos(ang), gs_radius*sin(ang), gs_radius, 0
	hotspot2 gs_radius,0,unID : unID=unID+1
	rot2 ang
next i
del gs_edge_num+3
