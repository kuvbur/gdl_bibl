
! Contact person: <SzL, NJ>

! =============================================================================

lod3D = 0										! Don't draw anything
if (GLOB_VIEW_TYPE = 9 & GLOB_PREVIEW_MODE = 0) then	! in case of Surface IS Calculation
	lod3D = 2	! Detailed
else
	if iDWDet3D = DETLEVEL_DW3D_SIMPLE then lod3D = 1	! Simple
	if iDWDet3D = DETLEVEL_DW3D_DETAILED then lod3D = 2	! Detailed
	if iDWDet3D = DETLEVEL_DW3D_CHI_SIMPLE | iDWDet3D = DETLEVEL_DW3D_CHI_DETAILED then
		if (GLOB_CONTEXT = 4 | GLOB_CONTEXT = 24 | GLOB_CONTEXT = 6) then
			lod3D = 5								! Chinese
		else
			lod3D = 2
		endif
	endif
endif

gs_fillFr		= gs_bFills * gs_fillFr
gs_penFr_fg		= gs_bFills * gs_penFr_fg
gs_penFr_bg		= gs_bFills * gs_penFr_bg

gs_fillSash		= gs_bFills * gs_fillSash
gs_penSash_fg	= gs_bFills * gs_penSash_fg
gs_penSash_bg	= gs_bFills * gs_penSash_bg

if not(gs_shadow) then shadow off


! =============================================================================
! GS Window Functions
! =============================================================================

call "GS Window Functions",
	parameters all	iWindowShape			= iWindowShape,
					nArchResolution			= gs_res,
					gs_IsCurved				= gs_IsCurved,
					bParalellInCurvedWalls	= bParalellInCurvedWalls,
					lod3D					= lod3D,
					bDisabeMirroring		= bDisabeMirroring,
	returned_parameters	ac_unit_width,
						ac_unit_height,
						gs_frame_ovhg_left_out,
						gs_frame_ovhg_right_out,
						gs_frame_ovhg_top_out,
						gs_frame_ovhg_bottom_out,
						gs_frame_ovhg_left_in,
						gs_frame_ovhg_right_in,
						gs_frame_ovhg_top_in,
						gs_frame_ovhg_bottom_in,
						bMirrored,
						xform11, xform12, xform13, xform14,
						xform21, xform22, xform23, xform24,
						xform31, xform32, xform33, xform34,

						bOplines3d, opLineType3dIn, opLineType3dOut, gs_opline_style_m, gs_opLinePen,
						bShowAddHotspots, bShowAddHotspotsForIS, bShowUnitHotspots

alpha_rotation = 180 / gs_res
if (gs_res mod 2) = 0 then
	alpha_rotation = 0
endif


! =============================================================================
! Block for operator mode
! =============================================================================

if GLOB_CONTEXT > 40 & GLOB_CONTEXT < 50 then

	for jj = 1 to gs_res
		put (ac_unit_width/2) * sin (alpha_rotation + (jj-1) * (360 / gs_res)),
			(ac_unit_width/2) * ac_unit_height/ac_unit_width * cos (alpha_rotation + (jj-1) * (360 / gs_res)), 79
	next jj

	addy ac_wallhole_height/2
	prism_ nsp/3, WIDO_FRAME_THICKNESS,
		get(nsp)

	del 1
	end
endif


if lod3D = 0 then end

xform	xform11, xform12, xform13, xform14,
		xform21, xform22, xform23, xform24,
		xform31, xform32, xform33, xform34

muly -1
addy WIDO_FRAME_THICKNESS

temp = gs_frame_ovhg_left_out
gs_frame_ovhg_left_out = gs_frame_ovhg_left_in
gs_frame_ovhg_left_in = temp

temp = gs_frame_ovhg_right_out
gs_frame_ovhg_right_out = gs_frame_ovhg_right_in
gs_frame_ovhg_right_in = temp

temp = gs_frame_ovhg_top_in
gs_frame_ovhg_top_in = gs_frame_ovhg_top_out
gs_frame_ovhg_top_out = temp

temp = gs_frame_ovhg_bottom_in
gs_frame_ovhg_bottom_in = gs_frame_ovhg_bottom_out
gs_frame_ovhg_bottom_out = temp

if ((GLOB_PREVIEW_MODE = 2) | GLOB_CONTEXT = 46) then
	gs_sill_outside	= 0
	gs_board_inside	= 0
	gs_trim_inside	= 0
	gs_trim_outside	= 0
endif

if lod3D = 5 then	! Chinese
	fr_sect_fill_type	= gs_fillShCover
	fr_sect_fill_fg		= gs_penShCov_fg
	fr_sect_fill_bg		= gs_penShCov_bg
else
	fr_sect_fill_type	= gs_fillFr
	fr_sect_fill_fg		= gs_penFr_fg
	fr_sect_fill_bg		= gs_penFr_bg
endif


A = ac_unit_width
B = ac_unit_height

rotx 90


! =============================================================================
! Unit Hotspots
! =============================================================================

if bShowUnitHotspots then
	unID=100

	hotspot  0,		0,	0, unID	:unID=unID+1
	hotspot  A/2,	B/2,0, unID	:unID=unID+1
	hotspot  0,		B,	0, unID	:unID=unID+1
	hotspot -A/2,	B/2,0, unID	:unID=unID+1

	hotspot  0,		0,	gs_frame_thk, unID	:unID=unID+1
	hotspot  A/2,	B/2,gs_frame_thk, unID	:unID=unID+1
	hotspot  0,		B,	gs_frame_thk, unID	:unID=unID+1
	hotspot -A/2,	B/2,gs_frame_thk, unID
endif


! =============================================================================
! Casing
! =============================================================================

A = ac_wallhole_width
B = ac_wallhole_height

if (gs_trim_inside | gs_trim_outside) & lod3D <> 5 then

	addy -gs_tolerance_left

	rWallhole		= ac_unit_width/2 + gs_tolerance_left
	rCasingBeginIn	= rWallhole - gs_trim_width_in
	rCasingBeginOut	= rWallhole - gs_trim_width_out
	rTrimBeginIn	= rCasingBeginIn + gs_trim_offs_in
	rTrimBeginOut	= rCasingBeginOut + gs_trim_offs_out
	rTrimFinishIn	= rTrimBeginIn + gs_tw_right_in
	rTrimFinishOut	= rTrimBeginOut + gs_tw_right_out

	pen gs_frame_pen
	resol gs_res

	maskInside1  = 11 + 4 * (gs_trim_offs_in > EPS)
	maskInside2  = 14 + 1 * (gs_trim_offs_in > EPS)
	maskOutside1 = 14 + 1 * (gs_trim_offs_out > EPS | abs(WIDO_SILL) < EPS)
	maskOutside2 = 11 + 4 * (gs_trim_offs_out > EPS)

! Straight Wall ---------------------------------------------------------------

	if abs(WIDO_ORIG_DIST) < EPS & abs(WALL_INCL) < EPS then
		if not(WIDO_REVEAL_SIDE) then
			addz WIDO_SILL - WALL_THICKNESS + WIDO_FRAME_THICKNESS    ! Flip
			mulz -1
			addz -WALL_THICKNESS
		else
			addz -WIDO_SILL
		endif

		if gs_trim_inside then
			sect_fill gs_trim_fill_in, gs_trim_pen_bg_in, gs_trim_pen_fg_in, gs_trim_pen_cont
			material gs_trim_in_mat

			muly b/a
			addy rWallhole

			if gs_trim_width_in > 0 then
				addz WIDO_SILL + WIDO_FRAME_THICKNESS

				prism_ 10, WALL_THICKNESS-WIDO_SILL-WIDO_FRAME_THICKNESS,
					0, -rWallhole,	79,
					0,  0,			979,
					0,  180,		4079,
					0,  180,		4079,
					0, -rWallhole,	-1,

					0, -rCasingBeginIn,	64 + maskInside1,
					0,  0,				964 + maskInside1,
					0,  180,			4064 + maskInside1,
					0,  180,			4064 + maskInside1,
					0, -rCasingBeginIn,	-1

				del 1
			endif

			if gs_trim_thk_in > 0 then
				addz WALL_THICKNESS

				prism_ 10, gs_trim_thk_in,
					0, -rTrimFinishIn,	79,
					0,  0,				979,
					0,  180,			4079,
					0,  180,			4079,
					0, -rTrimFinishIn,	-1,

					0, -rTrimBeginIn,	64 + maskInside2,
					0,  0,				964 + maskInside2,
					0,  180,			4064 + maskInside2,
					0,  180,			4064 + maskInside2,
					0, -rTrimBeginIn,	-1
				del 1
			endif
			del 2
		endif

		if gs_trim_outside then
			sect_fill gs_trim_fill_out, gs_trim_pen_bg_out, gs_trim_pen_fg_out, gs_trim_pen_cont
			material gs_trim_out_mat

			muly b/a
			addy rWallhole

			if gs_trim_width_out > 0 then
				prism_ 10, WIDO_SILL,
					0, -rWallhole,	79,
					0,  0,			979,
					0,  180,		4079,
					0,  180,		4079,
					0, -rWallhole,	-1,

					0, -rCasingBeginOut,	64 + maskOutside1,
					0,  0,					964 + maskOutside1,
					0,  180,				4064 + maskOutside1,
					0,  180,				4064 + maskOutside1,
					0, -rCasingBeginOut,	-1
			endif

			if gs_trim_thk_out > 0 then
				addz -gs_trim_thk_out

				prism_ 10, gs_trim_thk_out,
					0, -rTrimFinishOut,	79,
					0,  0,				979,
					0,  180,			4079,
					0,  180,			4079,
					0, -rTrimFinishOut,	-1,

					0, -rTrimBeginOut,	64 + maskOutside2,
					0,  0,				964 + maskOutside2,
					0,  180,			4064 + maskOutside2,
					0,  180,			4064 + maskOutside2,
					0, -rTrimBeginOut,	-1

				del 1
			endif
			del 2
		endif

		if not(WIDO_REVEAL_SIDE) then
			del 2
		endif

		del 1
	endif

! Inclined Wall ---------------------------------------------------------------

	if abs(WIDO_ORIG_DIST) < EPS & abs(WALL_INCL) > EPS then

		if not(WIDO_REVEAL_SIDE) then
			addz WIDO_SILL-WALL_THICKNESS+WIDO_FRAME_THICKNESS    ! Flip
			mulz -1
			addz -WALL_THICKNESS
		else
			addz -WIDO_SILL
		endif

		if gs_trim_inside then
			sect_fill gs_trim_fill_in, gs_trim_pen_bg_in, gs_trim_pen_fg_in, gs_trim_pen_cont
			material gs_trim_in_mat

			if not(SYMB_MIRRORED) & abs(SYMB_ROTANGLE-180)<EPS | SYMB_MIRRORED & abs(SYMB_ROTANGLE)<EPS then
				mulx -1  ! Rotated or mirrored window
			endif

			if gs_trim_width_in > 0 then
				rotx 90
				if WALL_INCL > 0 then
					cutpolya 4, 1, 0,
					   -a/2-tr_ov_out-1,  WALL_THICKNESS-tan(WALL_INCL)*(a/2+tr_ov_out+1),   8 + 7 * (gs_trim_offs_in > EPS),
						a/2+tr_ov_out+1,  WALL_THICKNESS+tan(WALL_INCL)*(a/2+tr_ov_out+1),   8 + 7 * (gs_trim_offs_in > EPS),
					   -a/2-tr_ov_out-1,  WALL_THICKNESS+tan(WALL_INCL)*(a/2+tr_ov_out+1),   8 + 7 * (gs_trim_offs_in > EPS),
					   -a/2-tr_ov_out-1,  WALL_THICKNESS-tan(WALL_INCL)*(a/2+tr_ov_out+1),  -1
				else
					cutpolya 4, 1, 0,
					   -a/2-tr_ov_out-1,  WALL_THICKNESS-tan(WALL_INCL)*(a/2+tr_ov_out+1),   8 + 7 * (gs_trim_offs_in > EPS),
						a/2+tr_ov_out+1,  WALL_THICKNESS-tan(WALL_INCL)*(a/2+tr_ov_out+1),   8 + 7 * (gs_trim_offs_in > EPS),
						a/2+tr_ov_out+1,  WALL_THICKNESS+tan(WALL_INCL)*(a/2+tr_ov_out+1),   8 + 7 * (gs_trim_offs_in > EPS),
					   -a/2-tr_ov_out-1,  WALL_THICKNESS-tan(WALL_INCL)*(a/2+tr_ov_out+1),  -1
				endif
				del 1

				muly b/a
				addy rWallhole
				addz WIDO_SILL+WIDO_FRAME_THICKNESS

				prism_ 10, WALL_THICKNESS-WIDO_SILL-WIDO_FRAME_THICKNESS+abs(tan(WALL_INCL))*(a/2+gs_trim_thk_in),
					0, -rWallhole,	79,
					0,  0,			979,
					0,  180,		4079,
					0,  180,		4079,
					0, -rWallhole,	-1,

					0, -rCasingBeginIn,	64 + maskInside1,
					0,  0,				964 + maskInside1,
					0,  180,			4064 + maskInside1,
					0,  180,			4064 + maskInside1,
					0, -rCasingBeginIn,	-1
				del 3

				cutend
			endif

			if gs_trim_thk_in > 0 then
				muly b/a
				addy rWallHole
				addz WALL_THICKNESS
				roty -WALL_INCL

				prism_ 10, gs_trim_thk_in,
					0, -rTrimFinishIn,	79,
					0,  0,				979,
					0,  180,			4079,
					0,  180,			4079,
					0, -rTrimFinishIn,	-1,

					0, -rTrimBeginIn,	64 + maskInside2,
					0,  0,				964 + maskInside2,
					0,  180,			4064 + maskInside2,
					0,  180,			4064 + maskInside2,
					0, -rTrimBeginIn,	-1

				del 4
			endif

			if not(SYMB_MIRRORED) and abs(SYMB_ROTANGLE-180)<EPS or SYMB_MIRRORED and abs(SYMB_ROTANGLE)<EPS then del 1

		endif

		if gs_trim_outside then
			sect_fill gs_trim_fill_out, gs_trim_pen_bg_out, gs_trim_pen_fg_out, gs_trim_pen_cont
			material gs_trim_out_mat

			muly b/a
			addy rWallhole

			if gs_trim_width_out > 0 then
				prism_ 10, WIDO_SILL,
					0, -rWallhole,	79,
					0,  0,			979,
					0,  180,		4079,
					0,  180,		4079,
					0, -rWallhole,	-1,

					0, -rCasingBeginOut,	64 + maskOutside1,
					0,  0,					964 + maskOutside1,
					0,  180,				4064 + maskOutside1,
					0,  180,				4064 + maskOutside1,
					0, -rCasingBeginOut,	-1
			endif

			if gs_trim_thk_out > 0 then
				addz -gs_trim_thk_out

				prism_ 10, gs_trim_thk_out,
					0, -rTrimFinishOut,	79,
					0,  0,				979,
					0,  180,			4079,
					0,  180,			4079,
					0, -rTrimFinishOut,	-1,

					0, -rTrimBeginOut,	64 + maskOutside2,
					0,  0,				964 + maskOutside2,
					0,  180,			4064 + maskOutside2,
					0,  180,			4064 + maskOutside2,
					0, -rTrimBeginOut,	-1

				del 1
			endif
			del 2
		endif

		if not(WIDO_REVEAL_SIDE) then
			del 2
		endif

		del 1
	endif

! Curved Wall -----------------------------------------------------------------

	if abs(WIDO_ORIG_DIST) > EPS then

		resol WALL_RESOL

		mulz -1
		addz -WIDO_FRAME_THICKNESS

		!z axis curved wall calculation at subroutine 1000
		!off1, off2 etc. special offset values for outside, inside etc. elements "rfur" values
		!different from element to element!

		if WIDO_ORIG_DIST > 0 exor WIDO_REVEAL_SIDE then
			maskInside1  = 11 + 4 * (gs_trim_offs_in > EPS)
			maskInside2  = 14 + 1 * (gs_trim_offs_in > EPS)
			maskOutside1 = 14 + 1 * (gs_trim_offs_out > EPS)
			maskOutside2 = 11 + 4 * (gs_trim_offs_out > EPS)
		else
			maskInside1  = 14 + 1 * (gs_trim_offs_in > EPS)
			maskInside2  = 11 + 4 * (gs_trim_offs_in > EPS)
			maskOutside1 = 11 + 4 * (gs_trim_offs_out > EPS)
			maskOutside2 = 14 + 1 * (gs_trim_offs_out > EPS)
		endif

		if gs_trim_inside then
			sect_fill gs_trim_fill_in, gs_trim_pen_bg_in, gs_trim_pen_fg_in, gs_trim_pen_cont
			material gs_trim_in_mat

			!1st part

			if gs_trim_thk_in > 0 then
				off1 = -gs_trim_thk_in
				off2 = 0
				off3 = WALL_THICKNESS
				off4 = -WALL_THICKNESS-gs_trim_thk_in
				gosub 1000

				!Penetration curve calculation
				!(Curved wall "Outside" surface and a Cylind with radius of a/2)

				seg		= 360/gs_res
				n=gs_res
				dalpha=(gs_tw_right_in*180)/(pi*rfur)
				rint=ac_wallhole_width/2+gs_tw_right_in+gs_trim_offs_in-gs_trim_width_in
				w=0

				for i=1 to n+1 step 1
					xw=rint*cos(w)
					betaw=atn(xw/r0)
					ibetaw=betaw/180*pi*rfur
					put xoffset+ibetaw,b/2+(b/a)*rint*sin(w)
					if i = n+1 then
						put -1
					else
						put 79
					endif
					w=w+seg
				next i


				seg=360/gs_res
				n=gs_res
				rint=a/2-gs_trim_width_in + gs_trim_offs_in
				w=0

				for i=1 to n+1 step 1
					xw=rint*cos(w)
					betaw=atn(xw/r0)
					ibetaw=betaw/180*pi*rfur
					put xoffset+ibetaw,b/2+(b/a)*rint*sin(w)
					if i = n+1 then
						put -1
					else
						put 64 + maskInside1
					endif
					w=w+seg
				next i



				addz k_weitoffset
				mulz mulstat
				addz -rfur
				roty -AC_Hole_Position_Angle
				addz rfur

				bprism_ gs_trim_in_mat,gs_trim_in_mat,gs_trim_in_mat,
					nsp/3, gs_trim_thk_in,rfur,
					get(nsp)

				del 5
			endif

			!2nd part

			if gs_trim_width_in > 0 then
				!Cutplanes at frame

				if WIDO_REVEAL_SIDE then
					cutplane 1,1,0,0
				else
					addz WIDO_FRAME_THICKNESS
					cutplane 1,1,0,1
					del 1
				endif

				off1=0
				off2=-WALL_THICKNESS
				off3=0
				off4=-WALL_THICKNESS
				gosub 1000


				!Penetration curve calculation
				!(Curved wall "Outside" surface and a Cylind with radius of a/2)

				seg = 360/gs_res
				n=gs_res
				dalpha=(gs_trim_width_in*180)/(pi*rfur)
				rint=a/2
				w=0

				for i=1 to n+1 step 1
					xw=rint*cos(w)
					betaw=atn(xw/r0)
					ibetaw=betaw/180*pi*rfur
					put xoffset+ibetaw,b/2+(b/a)*rint*sin(w)
					if i = n+1 then
						put -1
					else
						put 79
					endif
					w=w+seg
				next i


				seg=360/gs_res
				n=gs_res
				rint=a/2-gs_trim_width_in
				w=0

				for i=1 to n+1 step 1
					xw=rint*cos(w)
					betaw=atn(xw/r0)
					ibetaw=betaw/180*pi*rfur
					put xoffset+ibetaw,b/2+(b/a)*rint*sin(w)
					if i = n+1 then
						put -1
					else
						put 64 + maskInside2
					endif
					w=w+seg
				next i


				addz k_weitoffset
				mulz mulstat
				addz -rfur
				roty -AC_Hole_Position_Angle
				addz rfur

				bprism_ gs_trim_in_mat,gs_trim_in_mat,gs_trim_in_mat,
					nsp/3, WALL_THICKNESS, rfur,
					get(nsp)

				del 5

				cutend
			endif
		endif

		if gs_trim_outside then
			sect_fill gs_trim_fill_out, gs_trim_pen_bg_out, gs_trim_pen_fg_out, gs_trim_pen_cont
			material gs_trim_out_mat

			!1st part

			if gs_trim_thk_out > 0 then
				off1=WALL_THICKNESS
				off2=-WALL_THICKNESS-gs_trim_thk_out
				off3=-gs_trim_thk_out
				off4=0
				gosub 1000


				!Penetration curve calculation
				!(Curved wall "Outside" surface and a Cylind with radius of a/2)

				seg=360/gs_res
				n=gs_res
				dalpha=(gs_tw_right_out*180)/(pi*rfur)
				rint=ac_wallhole_width/2+gs_tw_right_out+gs_trim_offs_out-gs_trim_width_out
				w=0

				for i=1 to n+1 step 1
					xw=rint*cos(w)
					betaw=atn(xw/r0)
					ibetaw=betaw/180*pi*rfur
					put xoffset+ibetaw,b/2+(b/a)*rint*sin(w)
					if i = n+1 then
						put -1
					else
						put 79
					endif
					w=w+seg
				next i


				seg=360/gs_res
				n=gs_res
				rint=a/2 - gs_trim_width_out + gs_trim_offs_out
				w=0

				for i=1 to n+1 step 1
					xw=rint*cos(w)
					betaw=atn(xw/r0)
					ibetaw=betaw/180*pi*rfur
					put xoffset+ibetaw,b/2+(b/a)*rint*sin(w)
					if i = n+1 then
						put -1
					else
						put 64 + maskOutside1
					endif
					w=w+seg
				next i


				addz k_weitoffset
				mulz mulstat
				addz -rfur
				roty -AC_Hole_Position_Angle
				addz rfur

				bprism_  gs_trim_out_mat,gs_trim_out_mat,gs_trim_out_mat,
					nsp/3, gs_trim_thk_out, rfur,
					get(nsp)

				del 5
			endif


			!2nd part

			if gs_trim_width_out > 0 then
				!Cutplanes at frame

				if WIDO_REVEAL_SIDE then
					addz WIDO_FRAME_THICKNESS
					cutplane 1,1,0,1
					del 1
				else
					cutplane 1,1,0,0
				endif

				off1=0
				off2=-WALL_THICKNESS
				off3=0
				off4=-WALL_THICKNESS
				gosub 1000

				!Penetration curve calculation
				!(Curved wall "Outside" surface and a Cylind with radius of a/2)

				seg=360/gs_res
				n=gs_res
				dalpha=(gs_trim_width_out*180)/(pi*rfur)
				rint=a/2
				w=0

				for i=1 to n+1 step 1
					xw=rint*cos(w)
					betaw=atn(xw/r0)
					ibetaw=betaw/180*pi*rfur
					put xoffset+ibetaw,b/2+(b/a)*rint*sin(w)
					if i = n+1 then
						put -1
					else
						put 79
					endif
					w=w+seg
				next i


				seg=360/gs_res
				n=gs_res
				rint=a/2 - gs_trim_width_out
				w=0

				for i=1 to n+1 step 1
					xw=rint*cos(w)
					betaw=atn(xw/r0)
					ibetaw=betaw/180*pi*rfur
					put xoffset+ibetaw,b/2+(b/a)*rint*sin(w)
					if i = n+1 then
						put -1
					else
						put 64 + maskOutside2
					endif
					w=w+seg
				next i


				addz k_weitoffset
				mulz mulstat
				addz -rfur
				roty -AC_Hole_Position_Angle
				addz rfur

				bprism_  gs_trim_out_mat,gs_trim_out_mat,gs_trim_out_mat,
					nsp/3, WALL_THICKNESS, rfur,
					get(nsp)

				del 5

				cutend
			endif
		endif

		del 2
	endif

	del 1

	body -1
endif


! =============================================================================
! Draw window frame and sash
! =============================================================================

A = ac_unit_width
B = ac_unit_height

if gs_frame_pen_cont < 1 then gs_frame_pen_cont = SYMB_SECT_PEN

if gs_fillFr   < 1 then gs_fillFr   = SYMB_FILL
if gs_penFr_bg < 1 then gs_penFr_bg = SYMB_FBGD_PEN
if gs_penFr_fg < 1 then gs_penFr_fg = SYMB_FILL_PEN


! =============================================================================
! Draw Frame
! =============================================================================

Ovhg = max(gs_frame_ovhg_top_out, gs_frame_ovhg_top_in)

if lod3D = 1 then	! Simple
	if not(WIDO_REVEAL_SIDE) then
		frameThk  = gs_frame_thk/2 + gs_glass_thk/2
		frameThk2 = gs_frame_thk/2 - gs_glass_thk/2
	else
		frameThk  = gs_frame_thk/2 - gs_glass_thk/2
		frameThk2 = gs_frame_thk/2 + gs_glass_thk/2
	endif
else
	frameThk  = gs_frame_thk - gs_rebate_depth
	frameThk2 = gs_rebate_depth
endif

if gs_frame_mat = gs_frame_mat2 | frameThk < EPS | frameThk2 < EPS then
	loopNum = 1
	if gs_frame_mat = gs_frame_mat2 then
		frameThk = gs_frame_thk
	else
		frameThk = max(frameThk, frameThk2)
	endif
	if not(WIDO_REVEAL_SIDE) then
		frameMatTop		= gs_frame_mat
		frameMatBottom	= gs_frame_mat2
	else
		frameMatTop		= gs_frame_mat2
		frameMatBottom	= gs_frame_mat
	endif
	if WIDO_REVEAL_SIDE then
		frameMat = gs_frame_mat2
	else
		frameMat = gs_frame_mat
	endif
	frameMask = 15
else
	loopNum = 2
	if not(WIDO_REVEAL_SIDE) then
		frameMat  = gs_frame_mat2
		frameMat2 = gs_frame_mat
	else
		frameMat  = gs_frame_mat
		frameMat2 = gs_frame_mat2
	endif
	frameMatTop		= frameMat2
	frameMatBottom	= frameMat

	frameMask = 11
	frameMask2 = 14
endif

simpleOffset = 0
if (lod3D = 1 | lod3D = 5) & gs_optype_m_01 <> SASH_FIXED then
	if gs_optype_m_01 = SASH_VER_PIVOT | gs_optype_m_01 = SASH_VER_PIVOT_M then simpleOffset = gs_sash_width
endif

pen gs_frame_pen
sect_fill fr_sect_fill_type, fr_sect_fill_bg, fr_sect_fill_fg, gs_frame_pen_cont


innerRadius	= ac_unit_width/2 - gs_frame_width - simpleOffset

addy ac_wallhole_height/2 - Ovhg

resol gs_res
for i=1 to loopNum

	material frameMat
	for jj = 1 to gs_res
		put ac_wallhole_width/2 * sin (alpha_rotation + (jj-1) * (360 / gs_res)), ac_wallhole_width/2 * ac_wallhole_height/ac_wallhole_width * cos (alpha_rotation + (jj-1) * (360 / gs_res)), frameMask + 64
	next jj
	put ac_wallhole_width/2 * sin (alpha_rotation), ac_wallhole_width/2 * ac_wallhole_height/ac_wallhole_width * cos (alpha_rotation), -1
	for jj = 1 to gs_res
		put innerRadius * sin (alpha_rotation + (jj-1) * (360 / gs_res)), ac_wallhole_width/2 * ac_wallhole_height/ac_wallhole_width * cos (alpha_rotation + (jj-1) * (360 / gs_res)) - \
			(Ovhg + gs_frame_width + simpleOffset) * cos (alpha_rotation + (jj-1) * (360 / gs_res)), frameMask + 64
	next jj
	put innerRadius * sin (alpha_rotation), ac_wallhole_width/2 * ac_wallhole_height/ac_wallhole_width * cos (alpha_rotation) - \
			(Ovhg + gs_frame_width + simpleOffset) * cos (alpha_rotation), -1

	cprism_ frameMatTop, frameMatBottom, frameMat, nsp/3,frameThk,
		get(nsp)

	addz frameThk
	if loopNum > 1 then
		frameThk = frameThk2
		frameMatTop		= frameMat2
		frameMatBottom	= frameMat2
		frameMat		= frameMat2
		frameMask = frameMask2
	endif
next i
del loopNum + 1

body -1


! =============================================================================
! Draw Casement
! =============================================================================

if lod3D = 5 then	! Chinese
	sh_sect_fill_type	= gs_fillShCover
	sh_sect_fill_fg		= gs_penShCov_fg
	sh_sect_fill_bg		= gs_penShCov_bg
else
	sh_sect_fill_type	= gs_fillSash
	sh_sect_fill_fg		= gs_penSash_fg
	sh_sect_fill_bg		= gs_penSash_bg
endif

add sashPosXArray[2][2], sashPosYArray[2][2], gs_frame_thk

call "Casement_Oval" parameters	A = sashWidthArray[2][2],
								B = sashHeightArray[2][2],
	lod3D							= lod3D,
	gs_full_edit					= gs_full_edit,
	gs_rebate_width					= gs_rebate_width,
	gs_rebate_depth					= gs_rebate_depth,
	gs_frame_width					= gs_frame_width,
	gs_frame_thk					= gs_frame_thk,
	gs_sash_width					= gs_sash_width,
	gs_sash_thk						= gs_sash_thk,
	iMullionStyle					= iMullionStyle_01,
	iMullionPosition				= iMullionPosition,
	gw								= gw,
	gth								= gth,
	gs_glass_thk					= gs_glass_thk,
	vgn								= vgn_01,
	hgn								= hgn_01,
	gs_frame_pen					= gs_sash_pen,
	gs_glass_pen					= gs_glass_pen,
	gs_frame_mat					= gs_sash_mat2,
	gs_frame_mat2					= gs_sash_mat,
	gs_grill_mat					= gs_grill_mat2,
	gs_grill_mat2					= gs_grill_mat,
	gs_glass_mat					= gs_glass_mat,
	gs_panel_mat					= gs_panel_mat,
	gs_panel_mat2					= gs_panel_mat2,
	res								= gs_res,
	openingAngle_01					= openingAngle_01,
	gs_optype_m						= gs_optype_m_01,
	gs_sash_pen						= gs_sash_pen,
	gs_fillSash						= sh_sect_fill_type,
	gs_penSash_bg					= sh_sect_fill_bg,
	gs_penSash_fg					= sh_sect_fill_fg,
	gs_frame_pen_cont				= gs_frame_pen_cont,
	bOpeningDirectionInside			= WIDO_REVEAL_SIDE,
	gs_cust_panel					= gs_cust_panel_01,
	oval_unID						= 1000,
	bOplines3d						= bOplines3d,
	opLineType3dIn					= opLineType3dIn,
	opLineType3dOut					= opLineType3dOut,
	gs_opline_style_m				= gs_opline_style_m,
	gs_opLinePen					= gs_opLinePen

del 1


! =============================================================================
end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end
! =============================================================================

1000:

!Curved Wall Calculation

r0=abs(WIDO_ORIG_DIST)

if WIDO_ORIG_DIST<0 then                !Wall is convex from "outside"

	if WIDO_REVEAL_SIDE then                            !Flip is on
		nframe=WIDO_FRAME_THICKNESS
		wsill=WIDO_SILL
		wthickness=WALL_THICKNESS

		mulstat=1
		rdpi=sqr(a*a/4+(r0+nframe)^2)
		r=sqr(a*a/4+r0*r0)
		kdpi=rdpi-r+WIDO_SILL
		rclo=r+kdpi                         !wall radius_2
		rfur=rclo-wthickness+off1           !wall radius_1
		calpha=asn(a/2/r)                   !window half angle
	else                                     !Flip is off
		nframe=0
		wsill=-WIDO_SILL
		wthickness=-WALL_THICKNESS

		mulstat=1
		r=sqr(a*a/4+r0*r0)
		rclo=r+wsill                         !wall radius_2
		rfur=rclo-wthickness+off2            !wall radius_1
		calpha=asn(a/2/r)                    !window half angle
	endif

else                                      !Wall is concave from "outside"

	if WIDO_REVEAL_SIDE then                              !Flip is on
		nframe=WIDO_FRAME_THICKNESS
		wsill=WIDO_SILL
		wthickness=WALL_THICKNESS

		mulstat=-1
		r0=r0-nframe
		r=sqr(a*a/4+r0*r0)
		rfur=r-wsill+off3                    !wall radius_1
		rclo=rfur+wthickness                 !wall radius_2
		calpha=asn(a/2/r)                    !window half angle
	else                                      !Flip is off
		nframe=WIDO_FRAME_THICKNESS
		wsill=-WIDO_SILL
		wthickness=-WALL_THICKNESS

		mulstat=-1
		rdpi=sqr(a*a/4+r0*r0)
		r0=r0-nframe
		r=sqr(a*a/4+r0*r0)
		kdpi=rdpi-r+WIDO_SILL
		rfur=r+kdpi+off4                     !wall radius_1
		rclo=rfur+wthickness                 !wall radius_2
		calpha=asn(a/2/r)                    !window half angle
	endif

endif


!Additional values

k_weitoffset=rfur*mulstat+WIDO_ORIG_DIST  !gs_window_sill value at window centerpoint
xoffset=AC_Hole_Position_Angle/180*pi*rfur                    !Window centerpoint distance from wall origin

return
