
! Contact person: <SzL, NJ>

EPS = 0.0001


! gs_optype_m
SASH_FIXED					= 1		! Fixed Glass
SASH_FIXED_SCREW			= 2		! Fixed Sash
SASH_SIDE_HUNG				= 3		! Side Hung
SASH_SIDE_HUNG_M			= 4		! Side Hung Mirrored
SASH_TILT_TURN				= 5		! Tilt and Turn
SASH_TILT_TURN_M			= 6		! Tilt and Turn Mirrored
SASH_BOTTOM_HUNG			= 7		! Bottom Hung
SASH_TOP_HUNG				= 8		! Top Hung
SASH_HOR_PIVOT				= 9		! Horizontal Pivot Hung
SASH_VER_PIVOT				= 10	! Vertical Pivotted
SASH_TILT_SLIDE				= 11	! Tilt and Slide
SASH_LEFT_SLIDING			= 12	! Left Sliding
SASH_RIGHT_SLIDING			= 13	! Right Sliding
SASH_UP_SLIDING				= 14	! Sliding Up
SASH_DOWN_SLIDING			= 15	! Sliding Down
SASH_VER_PIVOT_M			= 16	! Vertical Pivotted Mirrored
SASH_FIXED_SLIDE			= 17	! Fixed Sliding Sash
SASH_DOUBLE_SIDE_HUNG		= 18	! Double Sash
SASH_DOUBLE_TILT_TURN		= 19	! Double Tilt and Turn
SASH_DOUBLE_TILT_TURN_M		= 20	! Double Tilt and Turn Mirrored
SASH_SLIDING_HOR			= 21	! Sliding
SASH_SLIDING_HOR_M			= 22	! Sliding Mirrored
SASH_DOUBLE_SLIDING_HOR		= 23	! Double Sliding
SASH_DOUBLE_SLIDING_HOR_M	= 24	! Double Sliding Mirrored
SASH_SLIDING_VER			= 25	! Single Hung
SASH_DOUBLE_SLIDING_VER		= 26	! Double Hung

! iWinTopDefinition
TOPDEFINITION_TOTALHEIGHT_SHOULDER	= 1
TOPDEFINITION_ANGLE_SHOULDER		= 2
TOPDEFINITION_ANGLE_TOTALHEIGHT		= 3

! iMullionStyle
MULLION_NONE			= 1
MULLION_HVGRID			= 2
MULLION_EDITABLEGRID	= 3
MULLION_CUSTOM			= 4
MULLION_PRAIRIE			= 5
MULLION_DIVIDED			= 6
MULLION_SOLID_PANEL		= 15

! iMullionPosition
MULLION_OUTSIDE		= 1
MULLION_INSIDE		= 2
MULLION_THROUGHOUT	= 3

! iVentilationProfileType
VENTPROFILE_OVER_FRAME		= 2
VENTPROFILE_OVER_GLAZING	= 3

! iDWDet3D
DETLEVEL_DW3D_SCALESENS    = 1
DETLEVEL_DW3D_DETAILED     = 2
DETLEVEL_DW3D_SIMPLE       = 3
DETLEVEL_DW3D_OFF          = 4
DETLEVEL_DW3D_CHI_SIMPLE   = 5
DETLEVEL_DW3D_CHI_DETAILED = 6

! iTypeDemolitionFill
RENOVATION_FILL_EXIST		= 1
RENOVATION_FILL_DEMOLISHED	= 2
RENOVATION_FILL_NEW			= 3
RENOVATION_FILL_NEW_FULL	= 4

! gs_SashText_typ_num
MITERED_JOINT = 1
BUTT_JOINT    = 2

! iCornerConnTypeRight
CONNECTION_TYPE_FRAME  = 1
CONNECTION_TYPE_COLUMN = 2
CONNECTION_TYPE_GLASS  = 3

! iCornerConnTypeLeft
CONNECTION_TYPE_FRAME  = 1
CONNECTION_TYPE_COLUMN = 2
CONNECTION_TYPE_GLASS  = 3


! =============================================================================
! Uniform Sashes
! =============================================================================

iMullionStyleOriginal_01 = iMullionStyle_01
iMullionStyleOriginal_02 = iMullionStyle_02

if gs_sash_uniform then
	iMullionStyle_01 = iMullionStyle_00
	iMullionStyle_02 = iMullionStyle_00

	gs_cust_panel_01 = gs_cust_panel_00
	gs_cust_panel_02 = gs_cust_panel_00
	gs_cust_panel2_01 = gs_cust_panel_00
	gs_cust_panel2_02 = gs_cust_panel_00

	vgn2_01 = vgn_01
	hgn2_01 = hgn_01
	vgn2_02 = vgn_02
	hgn2_02 = hgn_02
endif


! =============================================================================
! Migration
! =============================================================================

if GLOB_SCRIPT_TYPE = 7 | GLOB_SCRIPT_TYPE = 8 then goto "MasterEnd"	! forward migration, backward migration


! =============================================================================
! Main Definitions
! =============================================================================

gs_IsCurved			= 0
bParalellInCurvedWalls = 0
bDisabeMirroring	= 0
iWindowShape		= 11		! SHAPE_TRAPEZOID
openingArchHeight	= ac_wallhole_height - gs_shoulderHeight
bParalellInCurvedWalls = 0

gs_fillFr	= gs_fillFr * gs_bFills
gs_fillSash	= gs_fillSash * gs_bFills


bCornerWindow	= (ac_cw_function & ac_corner_window)


! =============================================================================
! Casement IDs
! =============================================================================

dim CasementIDArray[3][3]
CasementIDArray[1][1]	= 0
CasementIDArray[1][2]	= 2
CasementIDArray[1][3]	= 0
CasementIDArray[2][1]	= 0
CasementIDArray[2][2]	= 1
CasementIDArray[2][3]	= 0
CasementIDArray[3][1]	= 0
CasementIDArray[3][2]	= 0
CasementIDArray[3][3]	= 0

dim CasementTypeArray[3][3]
CasementTypeArray[1][1]	= 1
CasementTypeArray[1][2]	= 1
CasementTypeArray[1][3]	= 1
CasementTypeArray[2][1]	= 1
CasementTypeArray[2][2]	= 1
CasementTypeArray[2][3]	= 1
CasementTypeArray[3][1]	= 1
CasementTypeArray[3][2]	= 1
CasementTypeArray[3][3]	= 1

dim CasementShapeArray[3][3]
CasementShapeArray[1][1]	= 1
CasementShapeArray[1][2]	= 7	! SASH_SHAPE_TRAPEZOID
CasementShapeArray[1][3]	= 1
CasementShapeArray[2][1]	= 1
if gs_UTrans then
	CasementShapeArray[2][2]	= 1
else
	CasementShapeArray[2][2]	= 7	! SASH_SHAPE_TRAPEZOID
endif
CasementShapeArray[2][3]	= 1
CasementShapeArray[3][1]	= 1
CasementShapeArray[3][2]	= 1
CasementShapeArray[3][3]	= 1


! =============================================================================
! Localization
! =============================================================================

dim stTopDefinition[3]
	stTopDefinition[1] = `по Общей и Меньшей Высоте`
	stTopDefinition[2] = `по Наклону Перемычки и Меньшей Высоте`
	stTopDefinition[3] = `по Наклону Перемычки и Общей Высоте`

dim stDetail[6]
	stDetail[1] = `Зависит от Масштаба`
	stDetail[2] = `Детальный`
	stDetail[3] = `Простой`
	stDetail[4] = `Откл.`
	stDetail[5] = `Китайский Простой`
	stDetail[6] = `Китайский Детальный`

dim stFrameElemJoin[2]
	stFrameElemJoin[1] = `Угловое Соединение`
	stFrameElemJoin[2] = `Соединение Встык`

dim stSashType[17]
	stSashType[1] = `Без Раскладки`
	stSashType[2] = `Г/В-Раскладка`
	stSashType[3] = `Редактируемая Раскладка`
	stSashType[4] = `Специальная Створка`
	stSashType[5] = `Стиль Прерия`
	stSashType[6] = `Разделенный`
	stSashType[7] = `Солнечные Лучи 1`
	stSashType[8] = `Солнечные Лучи 2`
	stSashType[9] = `Солнечные Лучи 3`
	stSashType[10] = `Солнечные Лучи 4`
	stSashType[11] = `Солнечные Лучи 5`
	stSashType[12] = `Солнечные Лучи 6`
	stSashType[13] = `Сплошное Остекление`
	stSashType[14] = `Разделенная Рама`
	stSashType[15] = `Сплошная Панель`
	stSashType[16] = `Вентиляционная Створка`
	stSashType[17] = `Французская Панель`

dim stMullionPosition[3]
	stMullionPosition[1] = `Снаружи`
	stMullionPosition[2] = `Внутри`
	stMullionPosition[3] = `Посередине`

dim stOpeningType[26]
	stOpeningType[1] = `Фиксированное Остекление`
	stOpeningType[2] = `Фиксированная Створка`
	stOpeningType[3] = `Распашная`
	stOpeningType[4] = `Распашная Зеркальная`
	stOpeningType[5] = `Наклонно-Поворотная `
	stOpeningType[6] = `Наклонно-Поворотная Зеркальная`
	stOpeningType[7] = `Нижнеподвесная`
	stOpeningType[8] = `Верхнеподвесная`
	stOpeningType[9] = `Среднеповоротная Горизонтальная`
	stOpeningType[10] = `Среднеповоротная Вертикальная`
	stOpeningType[11] = ``
	stOpeningType[12] = ``
	stOpeningType[13] = ``
	stOpeningType[14] = ``
	stOpeningType[15] = ``
	stOpeningType[16] = `Среднеповоротная Вертикальная Зеркальная`
	stOpeningType[17] = ``
	stOpeningType[18] = `Двойная Створка`
	stOpeningType[19] = `Двойная Наклонно-Поворотная`
	stOpeningType[20] = `Двойная Наклонно-Поворотная Зеркальная`
	stOpeningType[21] = `Раздвижная`
	stOpeningType[22] = `Раздвижная Зеркальная`
	stOpeningType[23] = `Двойная Раздвижная`
	stOpeningType[24] = `Двойная Раздвижная Зеркальная`
	stOpeningType[25] = `Подъемная`
	stOpeningType[26] = `Подъемно-Опускная`

dim stSillTypes[17]	! gs_sill_type
	stSillTypes[ 1] = `Деревянный Отлив`			! Timber Sill
	stSillTypes[ 2] = `Кирпичный Отлив`
	stSillTypes[ 3] = `Каменный Отлив`
	stSillTypes[ 4] = `Керамический Отлив`
	stSillTypes[ 5] = `Этернитовый Отлив`
	stSillTypes[ 6] = `Бетонный Отлив`
	stSillTypes[ 7] = `Алюминиевый Отлив`
	stSillTypes[ 8] = `Монолитный Отлив 1.1`	! Massiv-Fensterbank 1.1
	stSillTypes[ 9] = `Монолитный Отлив 1.2`	! Massiv-Fensterbank 1.2
	stSillTypes[10] = `Монолитный Отлив`		! Massiv-Fensterbank 2.2
	stSillTypes[11] = `Металлический Лист`		! Metallfensterbank 1.1
	stSillTypes[12] = `Сплошной Параллельный`	! Massiv parallel
	stSillTypes[13] = `Металлический Лист 2`
	stSillTypes[14] = `Сплошной Параллельный 2`	! Massiv parallel 2
	stSillTypes[15] = `Простой Блок`
	stSillTypes[16] = `Блок Отлив`
	stSillTypes[17] = `Голландский Профилированный Отлив`

dim stVentilationProfileType[3]
	stVentilationProfileType[1] = `Нет`
	stVentilationProfileType[2] = `В Раме`
	stVentilationProfileType[3] = `В Остеклении`

dim stCornerConnType[3] !gs_connTypeRight, gs_connTypeLeft
	stCornerConnType[1] = `Коробка`
	stCornerConnType[2] = `Угловой Импост`
	stCornerConnType[3] = `Стекло`

! =============================================================================

iConnTypeRight = 0
if iCornerConnTypeRight = CONNECTION_TYPE_FRAME then iConnTypeRight = 1
if iCornerConnTypeRight = CONNECTION_TYPE_COLUMN then iConnTypeRight = 2

iConnTypeLeft = 0
if iCornerConnTypeLeft = CONNECTION_TYPE_FRAME then iConnTypeLeft = 1
if iCornerConnTypeLeft = CONNECTION_TYPE_COLUMN then iConnTypeLeft = 2

! =============================================================================

overSize = max((not(WIDO_REVEAL_ON)) * gs_trim_outside * gs_trim_width_out, gs_trim_inside * gs_trim_width_in)

if gs_trim_outside | gs_trim_inside then
	osl = overSize * not(gs_stack_left)
	osr = overSize * not(gs_stack_right)
endif

wi=WALL_INCL    !Inclination of the wall surfaces


! =============================================================================
! Window Top Definition
! =============================================================================

if iWinTopDefinition	= TOPDEFINITION_TOTALHEIGHT_SHOULDER then
	topAngle = atn((ac_wallhole_height-gs_shoulderHeight)/ac_wallhole_width)
	if not(bCornerWindow) then
		parameters topAngle = topAngle
	endif
	lock "topAngle"
endif
if iWinTopDefinition	= TOPDEFINITION_ANGLE_SHOULDER then
	if gs_wallhole_nominal then
		ac_wallhole_height	= tan(topAngle)*ac_wallhole_width+gs_shoulderHeight
		B = ac_wallhole_height
		parameters	ac_wallhole_height	= ac_wallhole_height,
					B = B
	endif

	if gs_reveal_nominal then

		! iRevealType:
		REVEAL_EDGE				= 0
		REVEAL_NO				= 1
		REVEAL_POSITIVE			= 2
		REVEAL_NEGATIVE			= 3
		REVEAL_SLANTED			= 4
		REVEAL_SPLAYED			= 5
		REVEAL_HISTORIC			= 6
		REVEAL_DOUBLE			= 7
		REVEAL_DOUBLE_SPLAYED	= 8
		REVEAL_OUTSIDE_SPLAYED	= 9

		bHaveReveal = (	(gs_reveal_type_int - 1) = REVEAL_POSITIVE | \
						(gs_reveal_type_int - 1) = REVEAL_NEGATIVE | \
						(gs_reveal_type_int - 1) = REVEAL_SLANTED | \
						(gs_reveal_type_int - 1) = REVEAL_HISTORIC | \
						(gs_reveal_type_int - 1) = REVEAL_DOUBLE_SPLAYED | \
						(gs_reveal_type_int - 1) = REVEAL_OUTSIDE_SPLAYED | \
						(((gs_reveal_type_int - 1) = REVEAL_DOUBLE) & \
							(((gs_reveal_doubleOuterTypeInt - 1) = REVEAL_POSITIVE) | ((gs_reveal_doubleOuterTypeInt - 1) = REVEAL_NEGATIVE))) )

		bNegativeReveal = ( (gs_reveal_type_int - 1 = REVEAL_NEGATIVE) | \
						  (((gs_reveal_type_int - 1) = REVEAL_DOUBLE) & ((gs_reveal_doubleOuterTypeInt - 1) = REVEAL_NEGATIVE)) )
		iSignReveal = not(bNegativeReveal) - (bNegativeReveal)

		ac_wallhole_height	= tan(topAngle)*ac_wallhole_width+gs_shoulderHeight
		ac_reveal_height =  ac_wallhole_height - iSignReveal * bHaveReveal * (gs_reveal_top + gs_reveal_bottom)
		B = ac_reveal_height
		parameters	ac_wallhole_height	= ac_wallhole_height,
					ac_reveal_height	= ac_reveal_height,
					B = B
	endif

	if gs_unit_nominal then
		ac_unit_height	= tan(topAngle) * ac_wallhole_width + gs_shoulderHeight - gs_tolerance_left - gs_tolerance_right
		B = ac_unit_height
		parameters	ac_unit_height	= ac_unit_height,
					B = B
	endif

	lock "ac_wallhole_height"
	lock "ac_reveal_height"
	lock "ac_unit_height"
	lock "b"
endif
if iWinTopDefinition	= TOPDEFINITION_ANGLE_TOTALHEIGHT then
	gs_shoulderHeight = ac_wallhole_height-tan(topAngle)*ac_wallhole_width
	if not(bCornerWindow) then
		parameters gs_shoulderHeight = gs_shoulderHeight
	endif
	lock "gs_shoulderHeight"
endif


! ==============================================================================
! Angle and Coordinate Calculations for Pentagon Shape
! ==============================================================================

pbeta1=(90+topAngle)/2
pbeta2=(90-topAngle)/2

dyfw1=gs_frame_width/tan(pbeta1)     !dy at frame width
dyfw2=gs_frame_width/tan(pbeta2)

dyrw1=(gs_frame_width+gs_tolerance_left-gs_rebate_width)/tan(pbeta1)     !dy at rebate width
dyrw2=(gs_frame_width+gs_tolerance_left-gs_rebate_width)/tan(pbeta2)
dyrw3=(gs_frame_width+gs_tolerance_left-gs_rebate_width)/cos(topAngle)

dysw1=(gs_frame_width+gs_tolerance_left-gs_sash_width)/tan(pbeta1)     !dy at sash width
dysw2=(gs_frame_width+gs_tolerance_left-gs_sash_width)/tan(pbeta2)
dysw3=(gs_frame_width+gs_tolerance_left-gs_sash_width)/cos(topAngle)


!Straight or Inclined Wall

gs_trim_inside_uniform = 0
gs_trim_outside_uniform = 0


! =============================================================================
! Ventilation Profile Type Enable
! =============================================================================

bEnableVentilationProfile = 1
if gs_UTrans then
	gs_VentilationProfileTypeEnable = 2
else
	gs_VentilationProfileTypeEnable = 0
endif


! =============================================================================
! Sash Sizes
! =============================================================================

dim sashWidthArray[3][3]
dim sashHeightArray[3][3]
dim sashPosXArray[3][3]
dim sashPosYArray[3][3]
for i=1 to 3
	for j=1 to 3
		sashWidthArray[i][j]	= 0
		sashHeightArray[i][j]	= 0
		sashPosXArray[i][j]		= 0
		sashPosYArray[i][j]		= 0
	next j
next i

! Transom Sashe ===============================================================

cavityLeft	= -ac_unit_width/2 + gs_frame_width - gs_rebate_width
cavityRight	=  ac_unit_width/2 - gs_frame_width + gs_rebate_width

! Upper Middle Sash -----------------------------------------------------------

if gs_UTrans then
	cavityHeight = ac_wallhole_height - gs_tolerance_lower - gs_tolerance_upper / cos(topAngle) - \
					gs_UTrans_h - gs_UTrans_w/2 + gs_rebate_width - ac_wallhole_width/2 * tan(topAngle) - (gs_frame_width - gs_rebate_width) / cos(topAngle)
	cavityBottom = gs_UTrans_h + gs_UTrans_w/2 - gs_rebate_width

	sashWidthArray[1][2]	= cavityRight - cavityLeft
	sashHeightArray[1][2]	= cavityHeight
	sashPosXArray[1][2]		= cavityLeft + (cavityRight - cavityLeft)/2
	sashPosYArray[1][2]		= cavityBottom
endif


! Main Sash ===================================================================

if gs_UTrans then
	cavityTop = gs_UTrans_h - gs_UTrans_w/2 + gs_rebate_width
else
	cavityTop = ac_wallhole_height - gs_tolerance_lower - gs_tolerance_upper / cos(topAngle) - (ac_unit_width/2 + gs_tolerance_left) * tan(topAngle) - (gs_frame_width - gs_rebate_width) / cos(topAngle)
endif
cavityBottom = gs_frame_width - gs_rebate_width
sashWidthArray[2][2]	= cavityRight - cavityLeft
sashHeightArray[2][2]	= cavityTop - cavityBottom
sashPosXArray[2][2]		= (cavityLeft + cavityRight)/2
sashPosYArray[2][2]		= cavityBottom


! ==============================================================================
! Calculations for Corner Window
! ==============================================================================

bCornerWindow	= (ac_cw_function & ac_corner_window)

temp_leftcornerangle = leftcornerangle
temp_rightcornerangle = rightcornerangle

resize_Lca = int ((abs(temp_leftcornerangle))/360)
resize_Rca = int ((abs(temp_rightcornerangle))/360)

temp_leftcornerangle = temp_leftcornerangle + resize_Lca * 360 - (leftcornerangle > 0) * 2 * resize_Lca * 360
temp_rightcornerangle = temp_rightcornerangle + resize_Rca * 360 - (rightcornerangle > 0) * 2 * resize_Rca * 360

leftcornerangle = temp_leftcornerangle + 360 * (temp_leftcornerangle < 0)
rightcornerangle = temp_rightcornerangle + 360 * (temp_rightcornerangle < 0)

if not(bCornerWindow) & (abs(WALL_INCL) > EPS | abs(WIDO_ORIG_DIST) > EPS | AC_WallType = 2) then
	bLeftCornerFunction  = 0
	bRightCornerFunction = 0
endif

if not (bLeftDiffConnWall)  then leftConnWallThk  = WALL_THICKNESS
if not (bRightDiffConnWall) then rightConnWallThk = WALL_THICKNESS

if not(bCornerWindow) then
	if abs(leftCornerAngle  - 180) < EPS | abs(leftCornerAngle  - 360) < EPS then leftCornerAngle  = 0
	if abs(rightCornerAngle - 180) < EPS | abs(rightCornerAngle - 360) < EPS then rightCornerAngle = 0
endif

if bLeftCornerFunction  & abs(leftCornerAngle)  < EPS then bLeftCornerFunction  = 0
if bRightCornerFunction & abs(rightCornerAngle) < EPS then bRightCornerFunction = 0

if not(bLeftCornerFunction) then
	leftCornerAngle	= 0
	leftConnWallThk	= 0
endif
if bCornerWindow then
	bRightCornerFunction	= 1
	bRightCornerFunction	= (ac_cw_function & ac_corner_window)
	rightCornerAngle	= ac_corner_angle
	rightConnWallThk	= ac_con_wall_thk
else
	if not(bRightCornerFunction) then
		rightCornerAngle	= 0
		rightConnWallThk	= 0
	endif
endif

if GLOB_MODPAR_NAME = "rightCornerAngle" then
	if abs(rightCornerAngle) < EPS or abs(180-rightCornerAngle) < EPS or abs(360-rightCornerAngle) < EPS then
		bRightCornerFunction = 0
	else
		bRightCornerFunction = 1
	endif
	parameters bRightCornerFunction = bRightCornerFunction
endif

if bRightCornerFunction & abs(rightCornerAngle) > EPS then
	rx = 1 / tan(rightCornerAngle / 2)

	if rightCornerAngle > 180 then
		rightCwDx = WIDO_FRAME_THICKNESS / tan(-rightCornerAngle / 2)
	else
		rightCwDx = 0
	endif

	rightCwDx2 = 0
	if abs(WALL_THICKNESS - rightConnWallThk) > EPS then
		rightCwDx2 = (WALL_THICKNESS - rightConnWallThk) / cos(rightCornerAngle - 90)
	endif
	bFitMode = (rightConnWallThk > WALL_THICKNESS + EPS)

	gs_right_oversize = 0

	beta = atn ((rightConnWallThk * sin(rightCornerAngle)) / (WALL_THICKNESS + rightConnWallThk * cos(rightCornerAngle)))
	rx = 1 / tan(rightCornerAngle / 2)

	if rightCornerAngle > 180 then
		overSizeRightX = max (0, WALL_THICKNESS / tan(360 - rightCornerAngle + beta) + WIDO_SILL / tan(rightCornerAngle / 2)) + 2 * gs_tw_right_out
	else
		overSizeRightX = (WIDO_FRAME_THICKNESS + WIDO_SILL) * rx + max (0, WALL_THICKNESS * tan(rightCornerAngle - beta - 90)) + 2 * gs_tw_right_out
	endif
	overSizeRightY = overSizeRightX * tan(topAngle)

	cornerPostXbyWidth	= (-WIDO_FRAME_THICKNESS - gs_cc_pr) * abs(tan(90 - rightCornerAngle / 2)) + gs_cc_width
	cornerPostXbyThk	= (gs_cc_thk - WIDO_FRAME_THICKNESS - gs_cc_pr) * abs(tan(90 - rightCornerAngle / 2))
	pxFrameR = max(cornerPostXbyWidth, cornerPostXbyThk)

	tanAngle = tan(rightCornerAngle / 2)
	if (rightCornerAngle > 180) then
		px1R = -gs_cc_pr / tanAngle
		px2R =  WIDO_FRAME_THICKNESS / tanAngle
		px3R =  -(gs_cc_pr - gs_cc_thk) / tanAngle
	else
		px1R =  gs_cc_pr / tanAngle
		px2R = -WIDO_FRAME_THICKNESS / tanAngle
		px3R =  (gs_cc_pr - gs_cc_thk) / tanAngle
	endif
endif

if bLeftCornerFunction & abs(leftCornerAngle) > EPS then
	lx = 1 / tan(leftCornerAngle / 2)

	if leftCornerAngle > 180 then
		leftCwDx = WIDO_FRAME_THICKNESS / tan(-leftCornerAngle / 2)
	else
		leftCwDx = 0
	endif

	leftCwDx2 = 0
	if abs(WALL_THICKNESS - leftConnWallThk) > EPS then
		leftCwDx2 = (WALL_THICKNESS - leftConnWallThk) / cos(leftCornerAngle - 90)
	endif
	bFitMode = (leftConnWallThk > WALL_THICKNESS + EPS)

	gs_left_oversize = 0

	beta = atn ((leftConnWallThk * sin(leftCornerAngle)) / (WALL_THICKNESS + leftConnWallThk * cos(leftCornerAngle)))
	lx = 1 / tan(leftCornerAngle / 2)

	if leftCornerAngle > 180 then
		overSizeLeftX = max (0, WALL_THICKNESS / tan(360 - leftCornerAngle + beta) + WIDO_SILL / tan(leftCornerAngle / 2)) + 2 * gs_tw_right_out
	else
		overSizeLeftX = (WIDO_FRAME_THICKNESS + WIDO_SILL) * lx + max (0, WALL_THICKNESS * tan(leftCornerAngle - beta - 90)) + 2 * gs_tw_right_out
	endif
	overSizeLeftY = overSizeLeftX * tan(topAngle)

	cornerPostXbyWidth	= (-WIDO_FRAME_THICKNESS - gs_cc_pr) * abs(tan(90 - leftCornerAngle / 2)) + gs_cc_width
	cornerPostXbyThk	= (gs_cc_thk - WIDO_FRAME_THICKNESS - gs_cc_pr) * abs(tan(90 - leftCornerAngle / 2))
	pxFrameL = max(cornerPostXbyWidth, cornerPostXbyThk)

	tanAngle = tan(leftCornerAngle / 2)
	if (leftCornerAngle > 180) then
		px1L = -gs_cc_pr / tanAngle
		px2L =  WIDO_FRAME_THICKNESS / tanAngle
		px3L =  -(gs_cc_pr - gs_cc_thk) / tanAngle
	else
		px1L =  gs_cc_pr / tanAngle
		px2L = -WIDO_FRAME_THICKNESS / tanAngle
		px3L =  (gs_cc_pr - gs_cc_thk) / tanAngle
	endif
endif

if gs_corner_column then
	bMirrorRight	= (rightCornerAngle > 180)
	bMirrorLeft		= (leftCornerAngle > 180)
	offsLeftY		= ((leftCornerAngle > 180) exor (rightCornerAngle > 180)) * (2 * gs_cc_pr - gs_cc_thk)
	if abs(leftCornerAngle) > EPS then
		offsLeftX	= -abs(offsLeftY / tan(leftCornerAngle / 2))
	endif
endif


! =============================================================================
! Ventilation Profile
! =============================================================================

if not(bEnableVentilationProfile & bVentilationProfile & (iVentilationProfileType = VENTPROFILE_OVER_GLAZING)) then
	isVentilationProfileInSash_01	= 0
endif

"MasterEnd":
