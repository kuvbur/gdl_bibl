
! Contact person: <SzL, NJ>

minUnitWidth	= gs_frame_width+gs_frame_thk+2*gs_sash_width
minUnitHeight	= gs_frame_width+2*gs_sash_width+gs_UTrans*(gs_UTrans_w/2+2*gs_sash_width)+0.01


! =============================================================================
! GS Window Functions
! =============================================================================

call "GS Window Functions",
	parameters all	gs_RevealTypeEnable		= gs_RevealTypeEnable,
					bEnableSill				= 0,
					bEnableBoard			= 0,
					iWindowShape			= iWindowShape,
					iWindowType				= 19,			!WIN_Bow
					gs_IsCurved				= gs_IsCurved,
					bParalellInCurvedWalls	= bParalellInCurvedWalls,
					bDisabeMirroring		= bDisabeMirroring,
					minUnitWidth			= minUnitWidth,
					minUnitHeight			= minUnitHeight,
					gs_sunShade_typeDisableByObject	= 2+4+8+16+32+64+128+256


! =============================================================================
! Window Specific Parameters
! =============================================================================

! ===== General Window Parameters =====

! =============================================================================
! 3D Detail Level
! =============================================================================

if gs_3DDetEnable =0 then

    values{2} "iDWDet3D" 	DETLEVEL_DW3D_DETAILED,		`Детальный`,
						    DETLEVEL_DW3D_SIMPLE,		`Простой`,
						    DETLEVEL_DW3D_OFF,			`Откл.`

else
	dim n3DScaleValueMask[]
	dim n3DScaleValueMask_m[]

	i=1
	if bittest( gs_3DDetEnable, 0) then                                              ! Scale Sensitive in Value list, 1
				n3DScaleValueMask[i] = stDetail[1]
				n3DScaleValueMask_m[i] = DETLEVEL_DW3D_SCALESENS
				i = i + 1
	endif
	if bittest( gs_3DDetEnable, 1) then                                              ! Detailed in Value list,2
				n3DScaleValueMask[i] = stDetail[2]
				n3DScaleValueMask_m[i] = DETLEVEL_DW3D_DETAILED
				i = i + 1
	endif
	if bittest( gs_3DDetEnable, 2) then                                              ! Simple in Value list,4
				n3DScaleValueMask[i] = stDetail[3]
				n3DScaleValueMask_m[i] = DETLEVEL_DW3D_SIMPLE
				i = i + 1
	endif
	if bittest( gs_3DDetEnable, 3) then                                              ! Off in Value list,8
				n3DScaleValueMask[i] = stDetail[4]
				n3DScaleValueMask_m[i] = DETLEVEL_DW3D_OFF
				i = i + 1
	endif
	if bittest( gs_3DDetEnable, 4) then                                              ! Chinese Simple in Value list,16
				n3DScaleValueMask[i] = stDetail[5]
				n3DScaleValueMask_m[i] = DETLEVEL_DW3D_CHI_SIMPLE
				i = i + 1
	endif
	if bittest( gs_3DDetEnable, 5) then                                              ! Chinese Detailed in Value list,32
				n3DScaleValueMask[i] = stDetail[6]
				n3DScaleValueMask_m[i] = DETLEVEL_DW3D_CHI_DETAILED
				i = i + 1
	endif

	values{2} "iDWDet3D" n3DScaleValueMask_m, n3DScaleValueMask
endif


values "gs_frame_thk"	range (gs_rebate_depth, ]
values "gs_sash_thk"	range (0, ]
values "gs_frame_width"	range (gs_rebate_width, ]
values "gs_sash_width"	range (0, ]
values "gs_glass_thk"	range (0, )
values "gs_UTrans_w"	range (0, gs_UTrans_h-gs_frame_width)

values "gs_rebate_width" range (0, gs_frame_width/2)
values "gs_rebate_depth" range (0, gs_frame_thk)
values "gs_sill_thk"     range (0, gs_frame_width-gs_rebate_width]

values "gs_parapet_inset_thk" range [0, ]

values{2} "gs_SashText_typ_num" 	MITERED_JOINT, `Угловое Соединение`,
									BUTT_JOINT, `Стыковое Соединение`

values "FixGlassDir" stFixGlassDir
values "FixGlassDir_m" 1, 2

if gs_UTrans then
	parameters gs_optype_06 = stOpeningType[1]
	parameters gs_optype_m_06 = SASH_FIXED

	values "gs_optype_02" stOpeningType[1], stOpeningType[3], stOpeningType[4], stOpeningType[5], stOpeningType[6], stOpeningType[7], stOpeningType[8]
	values "gs_optype_m_02" SASH_FIXED, SASH_SIDE_HUNG, SASH_SIDE_HUNG_M, SASH_TILT_TURN, SASH_TILT_TURN_M, SASH_BOTTOM_HUNG, SASH_TOP_HUNG
	if GLOB_MODPAR_NAME = "gs_optype_02" then
		gs_optype_m_02 = SASH_FIXED
		for i = 3 to 8
			if gs_optype_02 = stOpeningType[i] then gs_optype_m_02 = i
		next i
		parameters gs_optype_m_02 = gs_optype_m_02
	else
		gs_optype_02 = stOpeningType[1]
		for i = 3 to 8
			if gs_optype_m_02 = i then gs_optype_02 = stOpeningType[i]
		next i
		parameters gs_optype_02 = gs_optype_02
	endif
else
	hideparameter	"gs_optype_02", "gs_optype_m_02"
	lock "gs_optype_02", "gs_optype_m_02"
endif

parameters gs_optype_05 = stOpeningType[1]
parameters gs_optype_m_05 = SASH_FIXED

values "gs_optype_01" stOpeningType[1], stOpeningType[3], stOpeningType[4], stOpeningType[5], stOpeningType[6], stOpeningType[7], stOpeningType[8]
values "gs_optype_m_01" SASH_FIXED, SASH_SIDE_HUNG, SASH_SIDE_HUNG_M, SASH_TILT_TURN, SASH_TILT_TURN_M, SASH_BOTTOM_HUNG, SASH_TOP_HUNG

if GLOB_MODPAR_NAME = "gs_optype_01" then
	gs_optype_m_01 = SASH_FIXED
	for i = 3 to 8
		if gs_optype_01 = stOpeningType[i] then gs_optype_m_01 = i
	next i
	parameters gs_optype_m_01 = gs_optype_m_01
else
	gs_optype_01 = stOpeningType[1]
	for i = 3 to 8
		if gs_optype_m_01 = i then gs_optype_01 = stOpeningType[i]
	next i
	parameters gs_optype_01 = gs_optype_01
	parameters gs_optype_01 = gs_optype_01
endif

hideparameter	"gs_optype_05", "gs_optype_m_05",
				"gs_optype_06", "gs_optype_m_06"
lock	"gs_optype_05", "gs_optype_m_05",
		"gs_optype_06", "gs_optype_m_06"

! Glob modpar
PARAMETERS var_par = GLOB_MODPAR_NAME


! ==============================================================================
! Uniform Surfaces
! ==============================================================================

dim	surfaceParNames[8]						:	dim	surfaceParameters[8]
	surfaceParNames[1]	= "gs_frame_mat"	:		surfaceParameters[1]	= gs_frame_mat
	surfaceParNames[2]	= "gs_frame_mat2"	:		surfaceParameters[2]	= gs_frame_mat2
	surfaceParNames[3]	= "gs_sash_mat"		:		surfaceParameters[3]	= gs_sash_mat
	surfaceParNames[4]	= "gs_sash_mat2"	:		surfaceParameters[4]	= gs_sash_mat2
	surfaceParNames[5]	= "gs_grill_mat"	:		surfaceParameters[5]	= gs_grill_mat
	surfaceParNames[6]	= "gs_grill_mat2"	:		surfaceParameters[6]	= gs_grill_mat2
	surfaceParNames[7]	= "gs_panel_mat"	:		surfaceParameters[7]	= gs_panel_mat
	surfaceParNames[8]	= "gs_panel_mat2"	:		surfaceParameters[8]	= gs_panel_mat2

_lastModSurfaceParameter = gs_frame_mat

if stored_material[1][1] <> -9999 then
	for i = 1 to vardim1(surfaceParNames)
		if GLOB_MODPAR_NAME = surfaceParNames[i] then
			_lastModSurfaceParameter	= surfaceParameters[i]
			stored_material[1][i]	= surfaceParameters[i]
			stored_material[2][i]	= 1

			for j = 1 to i-1
				stored_material[2][j]	= 0
				parameters stored_material[2][j]	= stored_material[2][j]
			next j

			for k = i+1 to vardim1(surfaceParNames)
				stored_material[2][k]	= 0
				parameters stored_material[2][k]	= stored_material[2][k]
			next k
		endif

		parameters	stored_material[1][i]	= stored_material[1][i],
					stored_material[2][i]	= stored_material[2][i]

		if stored_material[2][i] = 1 then
			_lastModSurfaceParameter = stored_material[1][i]
		endif
	next i
else
	gosub "preloadSurfaces"
endif

if bLinkSurfacesFrameSash then
	parameters	gs_frame_mat	= _lastModSurfaceParameter,
				gs_frame_mat2	= _lastModSurfaceParameter,
				gs_sash_mat		= _lastModSurfaceParameter,
				gs_sash_mat2	= _lastModSurfaceParameter,
				gs_grill_mat	= _lastModSurfaceParameter,
				gs_grill_mat2	= _lastModSurfaceParameter,
				gs_panel_mat	= _lastModSurfaceParameter,
				gs_panel_mat2	= _lastModSurfaceParameter
else
	if GLOB_MODPAR_NAME = "bLinkSurfacesFrameSash" then
		parameters	gs_frame_mat	= stored_material[1][1],
					gs_frame_mat2	= stored_material[1][2],
					gs_sash_mat		= stored_material[1][3],
					gs_sash_mat2	= stored_material[1][4],
					gs_grill_mat	= stored_material[1][5],
					gs_grill_mat2	= stored_material[1][6],
					gs_panel_mat	= stored_material[1][7],
					gs_panel_mat2	= stored_material[1][8]
	else
		gosub "preloadSurfaces"
	endif
endif


! =============================================================================
! Orientation
! =============================================================================

values{2} "gs_list_orientationDef_m"	0, `Автоматически`,
										1, `Специальная`

if gs_list_orientationDef_m = 0 then
	ac_OpeningSide = ""
	parameters ac_OpeningSide = ac_OpeningSide

	lock "ac_OpeningSide"
	hideparameter "ac_OpeningSide"
endif


! =============================================================================
! IFC Parameters
! =============================================================================

ifc_optype = 10		! WIN_OP_USER_DEFINED
parameters ifc_optype = ifc_optype
call "IFC_optype_window" parameters ifc_optype = ifc_optype

lock "ifc_optypestr"

ifc_LiningDepth = WIDO_FRAME_THICKNESS
parameters ifc_LiningDepth = ifc_LiningDepth

ifc_LiningThickness = gs_frame_width
parameters ifc_LiningThickness = ifc_LiningThickness


! =============================================================================
! FM Types
! =============================================================================

call "FM_types" parameters all

if rots_a = 30 | rots_a = 31 then
	if GLOB_MODPAR_NAME = "opa_a" then
		parameters opa_a2 = 0
		opa_a2 = 0
	endif
	if GLOB_MODPAR_NAME = "opa_a2" then
		parameters opa_a = 0
		opa_a = 0
	endif
	if opa_a2 = 0 then hideparameter "opa_a2"
	if opa_a = 0 & opa_a2 <> 0 then hideparameter "opa_a"
else
	lock "opa_a2"
	hideparameter "opa_a2"
	opa_a2 = 0
	parameters opa_a2 = opa_a2
endif


if rots_d = 30 | rots_d = 31 then
	if GLOB_MODPAR_NAME = "opa_d" then
		parameters opa_d2 = 0
		opa_d2 = 0
	endif
	if GLOB_MODPAR_NAME = "opa_d2" then
		parameters opa_d = 0
		opa_d = 0
	endif
	if opa_d2 = 0 then hideparameter "opa_d2"
	if opa_d = 0 & opa_d2 <> 0 then hideparameter "opa_d"
else
	lock "opa_d2"
	hideparameter "opa_d2"
	opa_d2 = 0
	parameters opa_d2 = opa_d2
endif

if bLockOpeningAngle2D then
	lock "gs_open_2D"
	hideparameter "gs_open_2D"
endif

if LibraryLangCode = "NED" then
	values "gs_openLength_2D" range [0, B*not(gs_UTrans)  + gs_UTrans * gs_UTrans_h]
endif

! =============================================================================
! Tolerance
! =============================================================================

PARAMETERS gs_tolerance = 0
PARAMETERS gs_tolerance_left = 0
PARAMETERS gs_tolerance_right = 0
lock "gs_tolerance", "gs_tolerance_left", "gs_tolerance_right"
hideparameter "gs_tolerance", "gs_tolerance_left", "gs_tolerance_right"


!!!if not(gs_stack_left | gs_stack_right) then
!!	if GLOB_MODPAR_NAME = "gs_tolerance" then
!!		gs_tolerance_left	= gs_tolerance
!!		gs_tolerance_right	= gs_tolerance
!!		parameters gs_tolerance_left	= gs_tolerance
!!		parameters gs_tolerance_right	= gs_tolerance
!!	else
!!		gs_tolerance		= gs_tolerance_left
!!		gs_tolerance_right	= gs_tolerance_left
!!		parameters gs_tolerance	= gs_tolerance_left
!!		parameters gs_tolerance_right	= gs_tolerance_left
!!	endif
!!!endif


!!!**********************************Custom Panels******************

dim gs_pt[]
if iGrill = MULLION_CUSTOM then
	call "Window_Panel_Collection" parameters returned_parameters gs_pt
	values "gs_cust_panel"  gs_pt
	values "gs_cust_panel2" gs_pt
	values "gs_cust_panel3" gs_pt
	values "gs_cust_panel4" gs_pt
else
	hideparameter "gs_cust_panel","gs_cust_panel2","gs_cust_panel3","gs_cust_panel4"
endif


!!---------------!!
!! Trim And Sill !!
!!---------------!!

if not(gs_trim_outside) & not(gs_trim_inside) then

	hideparameter "gs_trim_thk_in","gs_tw_left_in","gs_tw_right_in","gs_tw_top_in",
		"gs_tw_bottom_in","gs_tw_left_out","gs_tw_right_out","gs_tw_top_out","gs_tw_bottom_out",
		"gs_trim_out_mat","gs_trim_in_mat"

else
	if not(gs_trim_outside) & gs_trim_inside then
		hideparameter	"gs_tw_left_out","gs_tw_right_out","gs_tw_top_out","gs_tw_bottom_out","gs_trim_out_mat"
	endif

	if gs_trim_outside & not(gs_trim_inside) then
		hideparameter	"gs_tw_left_in","gs_tw_right_in","gs_tw_top_in","gs_tw_bottom_in","gs_trim_in_mat"
	endif
endif

if not (gs_sill_outside) and not (gs_board_inside) then
	hideparameter "gs_sill_thk"
	lock "gs_sill_thk"
endif

	if not (gs_sill_outside) then
	hideparameter "gs_sill_nosing", "gs_sill_mat",
					"gs_sill_fill", "gs_sill_pen_fg", "gs_sill_pen_bg"
	lock "gs_sill_nosing", "gs_sill_mat",
			"gs_sill_fill", "gs_sill_pen_fg", "gs_sill_pen_bg"
endif

if not(gs_board_inside) then
	hideparameter "gs_board_nosing","gs_board_mat",
				 "gs_board_fill", "gs_board_pen_fg", "gs_board_pen_bg"

	lock "gs_board_nosing","gs_board_mat",
			 "gs_board_fill", "gs_board_pen_fg", "gs_board_pen_bg"
endif

!! W Splay Bay 70.win

if not(gs_UTrans) then
	lock "gs_cust_panel", "gs_cust_panel4"
	hideparameter "gs_cust_panel", "gs_cust_panel4"
endif


!! UNDERCLOAK !!

values{2} "iUndercloakType" 1,	`Горизонтально`,
 						2,	`С Уклоном`

IF not(bUndercloak) THEN LOCK "uclsill","uclh","ucsill","uch","ucmat","iUndercloakType" 
IF iUndercloakType = 1 THEN LOCK "ucsill","uch"								! Flat

!! ROOF !!

values{2} "iRoofType" 	1,	`Горизонтально`,
 					2,	`С Уклоном`

IF not(bRoof) THEN LOCK "rlsill","rolh","rsill","roh","rfmat", "iRoofType"
IF iRoofType = 1 THEN LOCK "rsill","roh" 							! Flat


!! TRANSOM !!
IF not(gs_UTrans) THEN LOCK "gs_UTrans_h"


!!! *** GRILL !!
values "grill" stSashType[1], stSashType[2], stSashType[3], stSashType[15], stSashType[4]
values "iGrill" MULLION_NONE, MULLION_HVGRID, MULLION_EDITABLEGRID, MULLION_SOLID_PANEL, MULLION_CUSTOM

if GLOB_MODPAR_NAME = "grill" then
	iGrill = MULLION_NONE
	if grill = stSashType[2] then iGrill = MULLION_HVGRID
	if grill = stSashType[3] then iGrill = MULLION_EDITABLEGRID
	if grill = stSashType[4] then iGrill = MULLION_CUSTOM
	if grill = stSashType[5] then iGrill = MULLION_PRAIRIE
	if grill = stSashType[6] then iGrill = MULLION_DIVIDED
	if grill = stSashType[15] then iGrill = MULLION_SOLID_PANEL
	parameters iGrill = iGrill
else
	grill  = stSashType[iGrill]
	parameters grill  = grill
endif

values{2} "iMullionPosition" 	MULLION_OUTSIDE, `Снаружи`,
								MULLION_INSIDE, `Внутри`,
								MULLION_THROUGHOUT, `Посередине`
values "hgn" range [1,)
values "vgn" range [1,)
values "hgn2" range [1,)
values "vgn2" range [1,)
values "hgn3" range [1,)
values "vgn3" range [1,)
values "hgn4" range [1,)
values "vgn4" range [1,)

IF iGrill = MULLION_NONE THEN
	hideparameter	"hgn",
				"vgn",
				"hgn3",
				"vgn3",
				"gw",
				"gth",
				"hgn2",
				"vgn2",
				"hgn4",
				"vgn4",
				"iMullionPosition",
				"gs_grill_mat",
				"gs_grill_mat2"
ENDIF

if iGrill <> MULLION_EDITABLEGRID then
	lock			"ghe"
	hideparameter	"ghe"
endif

hideparameter "gs_trim_outside", "gs_trim_inside"


!! PEN
IF gs_pen_2D=0 then parameters gs_pen_2D=3
IF gs_frame_pen=0 then parameters gs_frame_pen=2
IF gs_sash_pen=0 then parameters gs_sash_pen=2
IF gs_glass_pen=0 then parameters gs_glass_pen=2
!!!if gs_cavity_jointpen=0 then parameters gs_cavity_jointpen=2

!! OPENING ANGLE IN 3D !!
VALUES "opa_a" RANGE [0, 90]
VALUES "opa_d" RANGE [0, 90]

VALUES "opa_a2" RANGE [0, 90]
VALUES "opa_d2" RANGE [0, 90]

values "gs_open_2D" RANGE [0, 90]



!!! *** LIMITATIONs of PARAMETER

values "bang" RANGE (ATN(byd/(a/2)),90]
values "byd" RANGE [gs_frame_thk/2+3*gs_frame_width*SIN(bang),)
values "nsa" RANGE [1,INT((ami-gs_frame_width)/(2*gs_sash_width)))



!*****************Locking Parameters***********************************

IF gs_optype_m_02 = SASH_FIXED THEN Lock "opa_d"
if gs_optype_m_01 = SASH_FIXED THEN Lock "opa_a"

IF iGrill = MULLION_NONE | iGrill=MULLION_CUSTOM | iGrill = MULLION_SOLID_PANEL THEN
	lock	"vgn",
		"hgn",
		"vgn2",
		"hgn2",
		"vgn3",
		"hgn3",
		"vgn4",
		"hgn4",
		"iMullionPosition",
		"gw",
		"gth",
		"gs_grill_mat",
		"gs_grill_mat2"
ENDIF

if iGrill = MULLION_CUSTOM then
	lock "gs_glass_mat", "gs_glass_pen", "gs_sash_mat", "gs_sash_mat2"
	hideparameter "gs_glass_mat", "gs_glass_pen", "gs_sash_mat", "gs_sash_mat2"
endif

if iGrill = MULLION_SOLID_PANEL then
	lock "gs_glass_mat", "gs_glass_pen", "gs_sash_mat", "gs_sash_mat2"
	hideparameter "gs_glass_mat", "gs_glass_pen", "gs_sash_mat", "gs_sash_mat2"
else
	lock "gs_panel_mat", "gs_panel_mat2"
	hideparameter "gs_panel_mat", "gs_panel_mat2"
endif

!**************** Swedish list parameter control **********************
if gs_SWE_listParams_contr > 0 then
	call "SWE_ListParameters_control" parameters gs_SWE_listParams_contr = gs_SWE_listParams_contr,
			swe_list_f1				= swe_list_f1
endif

! =============================================================================
! Japanese list parameter control
! =============================================================================

if gs_JPN_listParams_contr then
	call "ListValuesJPN" parameters all gs_JPNObjectType = 2,		!COMMPARS_INTWINDOWS
			gs_is_p2	= 0,
			gs_is_p6	= 0
endif


! =============================================================================
! SWE Label sash ID handling
! =============================================================================

	call "winDoorCasIDmacro" parameters 	isSweDoorWindow			= 0,
											sashRowNum				= 0,
											sashColumnNum			= 0,
											iWindowType				= 20,			!WIN_SplayBay
											iWindowClass			= 0,
											gs_bLeftSLight			= 0,
											gs_bSLight				= 0,
											gs_UTrans				= gs_UTrans,
											gs_LTrans				= 0,
											gs_UTrans_Div			= 0,
											gs_LTrans_Div			= 0,
											nDinamicSash			= nsa+2

parameters gs_trim_inside = 0
parameters gs_trim_outside = 0

lock "gs_trim_inside", "gs_trim_outside"


if gs_UTrans then
	bwtr = 0
	widthMod = gs_UTrans_w
else
	bwtr = B - gs_UTrans_h
	widthMod = gs_frame_width
endif

! =============================================================================
! Total Glazed Area Listing Parameters
! =============================================================================
if NOT(gs_list_glassarea_override) then
	if GLOB_MODPAR_NAME = "gs_list_glassarea" then
		gs_list_glassarea_tmp = gs_list_glassarea
		parameters gs_list_glassarea_tmp = gs_list_glassarea_tmp
	else
		gs_list_glassarea = gs_list_glassarea_tmp
		parameters gs_list_glassarea = gs_list_glassarea
	endif

	gs_list_glassarea	= 0
	PanelGlassArea		= 0
	for i = 1 to 2
		call "Casement_b" parameters a		= (byd - gs_frame_thk/2) / sin(bang) - gs_frame_thk/2 * tan(bang/2) - gs_tolerance_bay - 2 * gs_frame_width,
							b				= gs_UTrans_h - widthMod - gs_frame_width + bwtr,
							rots_b			= 100,
							iMullionStyle	= iMullionStyle,
							gw				= gw,
							vgn				= vgn2,
							hgn				= hgn2,
							vergridl		= vergridl,
							horgridl		= horgridl,
					returned_parameters	PanelGlassArea
		gs_list_glassarea = gs_list_glassarea + PanelGlassArea

		IF gs_UTrans THEN
			call "Casement_d" parameters a		= (byd - gs_frame_thk/2) / sin(bang) - gs_frame_thk / 2 * tan(bang/2) - gs_tolerance_bay - 2 * gs_frame_width,
								b				= b - gs_UTrans_h - gs_frame_width,
								rots_d			= 100,
								iMullionStyle	= iMullionStyle,
								gw				= gw,
								vgn				= vgn4,
								hgn				= hgn4,
								vergridx		= vergridx,
								horgridx		= horgridx,
						returned_parameters	PanelGlassArea
			gs_list_glassarea = gs_list_glassarea + PanelGlassArea
		endif
	next i

	for i = 1 to nsa
		call "Casement_a" parameters a		= hsa,
							b				= gs_UTrans_h - widthMod - gs_frame_width + bwtr,
							gs_rebate_width	= gs_rebate_width,
							gs_sash_width	= gs_sash_width,
							rots_a			= rots_a,
							iMullionStyle	= iMullionStyle,
							gw				= gw,
							vgn				= vgn3,
							hgn				= hgn3,
							vergrid			= vergridr,
							horgrid			= horgridr,
					returned_parameters	PanelGlassArea
		gs_list_glassarea = gs_list_glassarea + PanelGlassArea

		IF gs_UTrans THEN
			call "Casement_d" parameters a		= hsa,
								b				= b - gs_UTrans_h - gs_frame_width,
								gs_rebate_width	= gs_rebate_width,
								gs_sash_width	= gs_sash_width,
								rots_d			= rots_d,
								iMullionStyle	= iMullionStyle,
								gw				= gw,
								vgn				= vgn,
								hgn				= hgn,
								vergridx		= vergrid,
								horgridx		= horgrid,
						returned_parameters	PanelGlassArea
			gs_list_glassarea = gs_list_glassarea + PanelGlassArea
		endif
	next i

	parameters gs_list_glassarea = gs_list_glassarea
	lock "gs_list_glassarea"
else
	if GLOB_MODPAR_NAME = "gs_list_glassarea" then
		gs_list_glassarea_tmp = gs_list_glassarea
		parameters gs_list_glassarea_tmp = gs_list_glassarea_tmp
	else
		gs_list_glassarea = gs_list_glassarea_tmp
		parameters gs_list_glassarea = gs_list_glassarea
	endif
endif

end

"preloadSurfaces":
	parameters	stored_material[1][1]	= gs_frame_mat,
				stored_material[1][2]	= gs_frame_mat2,
				stored_material[1][3]	= gs_sash_mat,
				stored_material[1][4]	= gs_sash_mat2,
				stored_material[1][5]	= gs_grill_mat,
				stored_material[1][6]	= gs_grill_mat2,
				stored_material[1][7]	= gs_panel_mat,
				stored_material[1][8]	= gs_panel_mat2
return

