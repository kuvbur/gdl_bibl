
if not(bSymbol2D) then end

! --- Oriented View ------------------------------ [

angleViewRot = 0
rrr = REQUEST ("View_Rotangle", "", angleViewRot)
totalRotate = (WALL_DIRECTION + angleViewRot) MOD 360

! --- Oriented View ------------------------------ ]

if curvedWall then
	WOD = WIDO_ORIG_DIST
	if WIDO_REVEAL_SIDE then
		add2 0, -WIDO_SILL + WALL_THICKNESS - dep
		outerRadius = signWallIsLeft * SQR((a/2)^2+WOD^2)
	else
		add2 0, WIDO_SILL
		outerRadius = -signWallIsLeft * SQR((a/2)^2+WOD^2)
	endif
	alpha = 2 * ATN(a/(2*WOD))
else
	WOD = 0
	if WIDO_REVEAL_SIDE then
		add2 0,-WIDO_SILL + dep
		if wallIsLeft exor SYMB_MIRRORED then
			rot2 WALL_INCL
		else
			rot2 -WALL_INCL
		endif
	else
		add2 0, WIDO_SILL
	endif
	outerRadius = 0
	alpha = 0
endif

pen SYMB_VIEW_PEN
if curvedWall then
	arc2 0, WOD, abs(outerRadius),
		(90 + alpha/2) * signSymbRot ,
		(90 - alpha/2) * signSymbRot
else
	line2 -a/2,0,a/2,0
endif

! ======================================================================
! Wall Cutting
! ======================================================================

pen WALL_SECT_PEN
fill gs_fill_niche

if curvedWall then											!CurvedWall
	wallhole2 6, 1+2+4, gs_fill_pen_2, gs_back_pen,
		0,0,0,
		-a/2,	0,		1,
		-a/2,	-dep,	1,
		a/2,	-dep,	1,
		a/2,	0,		1,
		0,		WOD,900,
		0,		-alpha,		4001
else														!StraightWall
	wallhole2 4, 1+2+4, gs_fill_pen_2, gs_back_pen,
		0,0,0,
		-a/2,	0,		1,
		-a/2,	-dep,	1,
		a/2,	-dep,	1,
		a/2,	0,		1

endif

! ======================================================================
! Background Fill
! ======================================================================
if curvedWall then											!CurvedWall
	POLY2_B 6, 1+2+4+64, gs_fill_pen_2, gs_back_pen,
		-a/2,	0,		1,
		-a/2,	-dep,	1,
		a/2,	-dep,	1,
		a/2,	0,		1,
		0,		WOD,900,
		0,		-alpha,		4001
else														!StraightWall
	POLY2_B 4, 1+2+4+64, gs_fill_pen_2, gs_back_pen,
		-a/2,	0,		1,
		-a/2,	-dep,	1,
		a/2,	-dep,	1,
		a/2,	0,		1
endif

if bSymbolFill then
	if dep > A then
		x = dep/3.5 * (sqr(A / dep / 2))
	else
		x = A/3.5 * (sqr(dep / A / 2))
	endif
	fill typeFillSymbol
	POLY2_B 5, 2+64, penFillSymbol, backPenFillSymbol,
		-A/2,    - dep,		1,
		A/2,     - dep,		1,
		A/2,     0,			1,
		A/2 - x, - dep + x,	1,
		-A/2,    - dep,		-1

endif

line_property 2

wallline2  a/2, 0, a/2, -dep
wallline2 -a/2, 0, -a/2, -dep
wallline2 -a/2, -dep, a/2, -dep

line_property 0

hotline2 -a/2,0,-a/2,-dep
hotline2 -a/2,-dep,a/2,-dep
hotline2 a/2,-dep,a/2,0


unID=5000
HOTSPOT2 -a/2,  0,		unID, dep, 1+128    :unID=unID+1
HOTSPOT2 -a/2, -dep,	unID, dep, 2        :unID=unID+1
HOTSPOT2 -a/2,  1,		unID, dep, 3        :unID=unID+1

HOTSPOT2  a/2,  0,		unID, dep, 1+128    :unID=unID+1
HOTSPOT2  a/2, -dep,	unID, dep, 2        :unID=unID+1
HOTSPOT2  a/2,  1,		unID, dep, 3        :unID=unID+1



! ------------------------------------------------------------------------------
! TEXT STYLE
! ------------------------------------------------------------------------------

define style "styleText" fontType, textHeight, 5, 0
set style "styleText"
n = request ("Height_of_style", "styleText", lineSpace)
lineSpace = lineSpace/1000 * GLOB_SCALE

dim contString[3]
dim bParam[3]
	bParam[1] = bShowAutoText
	bParam[2] = bShowTopHeight
	bParam[3] = bShowBottomHeight

if bShowAutoText then
	totalWidth = str(int(A * 100 + 0.5), 2, 0)
	totalHeight = str(int(B * 100 + 0.5), 2, 0)
	totalDepth = str(int(dep * 100 + 0.5), 2, 0)
	contString[1] = autoTextNotation + " " + totalWidth + "/" + totalHeight + "/" + totalDepth
endif

if bShowTopHeight then
	heightOfTop = str((GLOB_ELEVATION + B) * 100, 2, 0)
	contString[2] = topHeightNotation + " " + heightOfTop
endif

if bShowBottomHeight then
	heightOfBottom = str((GLOB_ELEVATION) * 100, 2, 0)
	contString[3] = bottomHeightNotation + " " + heightOfBottom
endif

! ------------------------------------------------------------------------------
! DRAW TEXT
! ------------------------------------------------------------------------------

pen textPen

add2 textOffsetX, textOffsetY

hadText = 0
yPos = lineSpace
for i = 3 to 1 STEP -1
	nTrans = 0
	if bParam[i] then
		hadText = 1
		add2 0,yPos
		nTrans = nTrans + 1
		if typeTextRotation_m = 2 & GLOB_CONTEXT <> 5 then								! Readable
			if abs(SYMB_ROTANGLE-180) < EPS then
				iReadable = (totalRotate < (gs_readable_angle + eps) | totalRotate > (gs_readable_angle + 180 + eps))
			else
				iReadable = (totalRotate > (gs_readable_angle + eps) & totalRotate < (gs_readable_angle + 180 + eps))
			endif
			rot2 180 * iReadable
			nTrans = nTrans + 1
		endif

		text2 0,0,contString[i]

		yPos = yPos + lineSpace
		del nTrans
	endif
next i

del 1

if hadText then
	unID = 20
	hotspot2 0,           	textOffsetY,	unID, textOffsetX, 1+128 :unID=unID+1
	hotspot2 textOffsetX, 	textOffsetY,	unID, textOffsetX, 2 :unID=unID+1
	hotspot2 -1,       		textOffsetY,	unID, textOffsetX, 3 :unID=unID+1

	hotspot2 textOffsetX, 	0,          	unID, textOffsetY, 1+128 :unID=unID+1
	hotspot2 textOffsetX, 	textOffsetY,	unID, textOffsetY, 2 :unID=unID+1
	hotspot2 textOffsetX, 	-1,        		unID, textOffsetY, 3 :unID=unID+1
endif

end
