
if not(bSymbol2D) then end

! --- Oriented View ------------------------------ [

angleViewRot = 0
rrr = REQUEST ("View_Rotangle", "", angleViewRot)
totalRotate = (WALL_DIRECTION + angleViewRot) MOD 360
if totalRotate < EPS then totalRotate = 360 + totalRotate

! --- Oriented View ------------------------------ ]

set fill fillTypeNormal
pen symbolPen

if ABS(WIDO_ORIG_DIST) < EPS then
	if ABS(WALL_INCL) < EPS then
		!---------------------------------------------------------------------------------
		!WALL HOLE IN NORMAL WALL
		!---------------------------------------------------------------------------------

		if WIDO_REVEAL_SIDE then
			add2 0, -WIDO_SILL + (WALL_THICKNESS/2)
		else
			add2 0, WIDO_SILL - (WALL_THICKNESS/2)
		endif

		color = symbolPen
		put	0, 0, 1,
			-A/2, WALL_THICKNESS/2, 1,
			 A/2, WALL_THICKNESS/2, 1,
			0, 0, -1
		gosub "draw_poly"

		color = symbolPen
		put	0, 0, 1,
			-A/2, -WALL_THICKNESS/2, 1,
			 A/2, -WALL_THICKNESS/2, 1,
			0, 0, -1
		gosub "draw_poly"

		color = gs_fill_pen_2
		put	0, 0, 1,
			-A/2, -WALL_THICKNESS/2, 1,
			-A/2,  WALL_THICKNESS/2, 1,
			0, 0, -1
		gosub "draw_poly"

		color = gs_fill_pen_2
		put	0, 0, 1,
			A/2, -WALL_THICKNESS/2, 1,
			A/2,  WALL_THICKNESS/2, 1,
			0, 0, -1
		gosub "draw_poly"

		line2 -A/2, -WALL_THICKNESS/2,  A/2, -WALL_THICKNESS/2
		line2 -A/2,  WALL_THICKNESS/2,  A/2,  WALL_THICKNESS/2
		line2  A/2, -WALL_THICKNESS/2, -A/2,  WALL_THICKNESS/2
		line2  A/2,  WALL_THICKNESS/2, -A/2, -WALL_THICKNESS/2
		wallline2 -A/2, WALL_THICKNESS/2, -A/2, -WALL_THICKNESS/2
		wallline2  A/2, WALL_THICKNESS/2,  A/2,  -WALL_THICKNESS/2
	else
		!---------------------------------------------------------------------------------
		!WALL HOLE IN INCLINED WALL
		!---------------------------------------------------------------------------------

		bMulDone = 0
		if SYMB_MIRRORED = WIDO_REVEAL_SIDE then
			mul2 -1, 1
			bMulDone = 1
		endif

		corrDist = A/2 * tan(WALL_INCL)					!difference of side lengths due to wall_incl
		if WIDO_REVEAL_SIDE then
			add2 0, -WIDO_SILL + (WALL_THICKNESS/2)
		else
			add2 0, WIDO_SILL - (WALL_THICKNESS/2)
		endif

		if not(WIDO_REVEAL_SIDE) then
			setValue1 = 0
			setValue2 = 1
			lineOne = -1
			lineTwo = 0
		else
			setValue1 = 1
			setValue2 = 0
			lineOne = 0
			lineTwo = -1
		endif

		color = symbolPen
		put		0,    0, 5,
				-A/2, WALL_THICKNESS/2 - corrDist * setValue1, 5,
				 A/2, WALL_THICKNESS/2 + corrDist * setValue1, 5,
				0,    0, -1
		gosub "draw_poly"

		color = symbolPen
		put		0,    0, 1,
				-A/2, -WALL_THICKNESS/2 + corrDist * setValue2, 1,
				 A/2, -WALL_THICKNESS/2 - corrDist * setValue2, 1,
				0,    0, -1
		gosub "draw_poly"

		color = gs_fill_pen_2
		put		0,    0, 1,
				-A/2, -WALL_THICKNESS/2 + corrDist * setValue2, 1,
				-A/2,  WALL_THICKNESS/2 - corrDist * setValue1, 1,
				0,    0, -1
		gosub "draw_poly"

		color = gs_fill_pen_2
		put		0,    0, 1,
				A/2, -WALL_THICKNESS/2 - corrDist * setValue2, 1,
				A/2,  WALL_THICKNESS/2 + corrDist * setValue1, 1,
				0,    0, -1
		gosub "draw_poly"

		! diagonal lines
		line2 0, 0, A/2, -WALL_THICKNESS/2 + corrDist * lineOne
		line2 0, 0, -A/2, -WALL_THICKNESS/2 - corrDist * lineOne
		line2 0, 0, A/2, WALL_THICKNESS/2 - corrDist * lineTwo
		line2 0, 0, -A/2, WALL_THICKNESS/2 + corrDist * lineTwo
		! lines on wall contour
		line2 -A/2, -WALL_THICKNESS/2 + corrDist * setValue2, A/2, -WALL_THICKNESS/2 - corrDist * setValue2
		line2 -A/2,  WALL_THICKNESS/2 - corrDist * setValue1, A/2,  WALL_THICKNESS/2 + corrDist * setValue1
		!parallel lines
		wallline2 -A/2, -WALL_THICKNESS/2 + corrDist * setValue2, -A/2, WALL_THICKNESS/2 - corrDist * setValue1
		wallline2 A/2, -WALL_THICKNESS/2 - corrDist * setValue2, A/2, WALL_THICKNESS/2 + corrDist * setValue1

		if bMulDone then
			del 1
		endif

	endif
else
	!---------------------------------------------------------------------------------
	!CURVED WALL
	!---------------------------------------------------------------------------------

	radiusWallDist = abs(WIDO_ORIG_DIST)
	if WIDO_ORIG_DIST < 0 then
		if not(WIDO_REVEAL_SIDE) then
			rdpi = sqr(A * A/4 + radiusWallDist^2)
			rweit = rdpi + WIDO_SILL
			rnah = rweit - WALL_THICKNESS
			mulstat=1
		else
			rdpi = sqr(A * A/4 + (radiusWallDist ^2))
			rweit = rdpi - WIDO_SILL + WALL_THICKNESS
			rnah = rweit - WALL_THICKNESS
			mulstat=1
		endif
	else
		if not(WIDO_REVEAL_SIDE) then
			rdpi = sqr(A * A/4 + radiusWallDist^2)
			rweit = rdpi - WIDO_SILL
			rnah = rweit + WALL_THICKNESS
			mulstat=-1
		else
			rdpi = sqr(A * A/4 + (radiusWallDist + stock)^2)
			rweit = rdpi + WIDO_SILL - WALL_THICKNESS
			rnah = rweit + WALL_THICKNESS
			mulstat=-1
		endif
	endif


	alpha = 2 * atn(A/2 / radiusWallDist)

	if not(WIDO_REVEAL_SIDE) then
		rw=rweit
		rn=rnah
		rwn=rweit
	else
		rn=rweit
		rw=rnah
		rwn=rnah
	endif

	add2 0, WIDO_ORIG_DIST
	mul2 1, mulstat

	line_type 1

	arc2 0, 0, rw, 90-alpha/2, 90+alpha/2
	arc2 0, 0, rn, 90-alpha/2, 90+alpha/2

	xx2=-rw*cos(90-alpha/2)
	yy2=rw*sin(90-alpha/2)

	xx1=rn*cos(90-alpha/2)
	yy1=rn*sin(90-alpha/2)

	line2 xx2, yy2, xx1, yy1
	line2 -xx2, yy2, -xx1, yy1

	beta=atn((yy2-yy1)/(abs(xx2)+abs(xx1)))
	yy3=xx1*tan(beta)

	yyy=yy1+yy3

	fill fillTypeNormal
	pen symbolPen

	wallline2 xx2, yy2, -xx1, yy1
	wallline2 -xx2, yy2, xx1, yy1


	if iCurvedWallFillType = CURVEDWALLFILLTYPE_1 then
		color = symbolPen
		put	-xx2, yy2, 1,
			0, 0, 900,
			xx2, yy2, 3001,
			0, yyy, 1,
			-xx2, yy2, -1
		gosub "draw_poly"

		color = symbolPen
		put	-xx1, yy1, 1,
			0, 0, 900,
			xx1, yy1, 3001,
			0, yyy, 1,
			-xx1, yy1, -1
		gosub "draw_poly"

		color = gs_fill_pen_2
		put	-xx2, yy2, 1,
			xx1, yy1, 1,
			0, yyy, 1,
			-xx2, yy2, -1
		gosub "draw_poly"

		color = gs_fill_pen_2
		put	xx2, yy2, 1,
			-xx1, yy1, 1,
			0, yyy, 1,
			xx2, yy2, -1
		gosub "draw_poly"

	else

		color = gs_fill_pen_2
		put	-xx2, yy2, 1,
			0, 0, 900,
			xx2, yy2, 3001,
			0, yyy, 1,
			-xx2, yy2, -1
		gosub "draw_poly"

		color = gs_fill_pen_2
		put	-xx1, yy1, 1,
			0, 0, 900,
			xx1, yy1, 3001,
			0, yyy, 1,
			-xx1, yy1, -1
		gosub "draw_poly"

		color = symbolPen
		put		-xx2, yy2, 1,
				xx1, yy1, 1,
				0, yyy, 1,
				-xx2, yy2, -1
		gosub "draw_poly"

		color = symbolPen
		put		xx2, yy2, 1,
				-xx1, yy1, 1,
				0, yyy, 1,
				xx2, yy2, -1
		gosub "draw_poly"
	endif

	DEL 2

endif


! ------------------------------------------------------------------------------
! TEXT STYLE
! ------------------------------------------------------------------------------

define style "styleText" fontType, textHeight, 5, 0
set style "styleText"
n = request ("Height_of_style", "styleText", lineSpace)
lineSpace = lineSpace/1000 * GLOB_SCALE

dim contString[4]
dim bParam[4]
	bParam[1] = bAutoTextSwitch
	bParam[2] = bShowTopHeight
	bParam[3] = bShowBottomHeight
	bParam[4] = bCustomTextSwitch

if bAutoTextSwitch then
	totalWidth = str(int(A * 100 + 0.5), 2, 0)
	totalHeight = str(int(B * 100 + 0.5), 2, 0)
	contString[1] = gen_text + " " + totalWidth + "/" + totalHeight
endif

heightValue = GLOB_ELEVATION

if bShowTopHeight then
	heightOfTop = str((heightValue + B) * 100, 2, 0)
	contString[2] = topHeightNotation + " " + heightOfTop
endif

if bShowBottomHeight then
	heightOfBottom = str((heightValue) * 100, 2, 0)
	contString[3] = bottomHeightNotation + " " + heightOfBottom
endif

contString[4] = txt2

! ------------------------------------------------------------------------------
! DRAW TEXT
! ------------------------------------------------------------------------------

pen textPen

add2 0, WALL_THICKNESS/2
add2 textOffsetX, textOffsetY

hadText = 0
yPos = lineSpace
for i = 4 to 1 STEP -1
	nTrans = 0
	if bParam[i] then
		hadText = 1
		add2 0,yPos
		nTrans = nTrans + 1
		if typeTextRotation_m = 2 & GLOB_CONTEXT <> 5 then								! Readable
			if abs(SYMB_ROTANGLE-180) < EPS then
				iReadable = (totalRotate < (gs_readable_angle + eps) | totalRotate > (gs_readable_angle + 180 + eps))
			else
				iReadable = (totalRotate > (gs_readable_angle + eps) & totalRotate < (gs_readable_angle + 180 + eps))
			endif
			rot2 180 * iReadable
			nTrans = nTrans + 1
		endif

		text2 0,0,contString[i]

		yPos = yPos + lineSpace
		del nTrans
	endif
next i

del 1

if hadText then
	unID = 20
	hotspot2 0,           	textOffsetY,	unID, textOffsetX, 1+128 :unID=unID+1
	hotspot2 textOffsetX, 	textOffsetY,	unID, textOffsetX, 2 :unID=unID+1
	hotspot2 -1,       		textOffsetY,	unID, textOffsetX, 3 :unID=unID+1

	hotspot2 textOffsetX, 	0,          	unID, textOffsetY, 1+128 :unID=unID+1
	hotspot2 textOffsetX, 	textOffsetY,	unID, textOffsetY, 2 :unID=unID+1
	hotspot2 textOffsetX, 	-1,        		unID, textOffsetY, 3 :unID=unID+1
endif

del 1

END

"draw_poly":

	if GLOB_CONTEXT = 5 then
		poly2_b NSP/3, 1+2, color, color,
				get (NSP)
	else
		wallhole2 NSP/3, 2, color, color,
				0, 0, 0,
				get (NSP)
	endif
return
