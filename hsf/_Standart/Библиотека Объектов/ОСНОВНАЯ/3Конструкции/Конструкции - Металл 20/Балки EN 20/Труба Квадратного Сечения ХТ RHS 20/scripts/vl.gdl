
! --------------------------------------------------------------------------------
! hide All Parameters list
! --------------------------------------------------------------------------------

hideparameter all "A", "B", "ZZYZX"

if GLOB_MODPAR_NAME = "Profile" or siz_mtr[1] = "" then
	dim vekt[30][2]
	dim namevekt[30]

	for i = 1 to 30
		vekt[i][1] = 0
		vekt[i][2] = 0
		namevekt[i] = ""
	next i

	nTypes = 0
	szelv = open("text", "RHS Cold-Formed(14).txt", "separator='\t', mode=ro, Library")
	if szelv > 0 then
		iRow = 2
		n = input(szelv, iRow, 2, v1, v2, v3)
		while n > 2 do
			bHaveThisType = 0
			for k = 1 to nTypes
				if (vekt[k][1] = v2) and (vekt[k][2] = v3) then
					bHaveThisType = 1
				endif
			next k
			if not(bHaveThisType) then
				nTypes = nTypes + 1
				vekt[nTypes][1] = v2
				vekt[nTypes][2] = v3
				namevekt[nTypes] = v1
			endif
			iRow = iRow + 1
			n = input(szelv, iRow, 2, v1, v2, v3)
		endwhile
		close szelv
	endif

	if nTypes > 0 then
		namevekt[nTypes] = `СПЕЦИАЛЬНЫЕ`			! --- For Localization
	endif
	siz_mtr = namevekt
	parameters siz_mtr = siz_mtr

	if Profile <> `СПЕЦИАЛЬНЫЕ` then
		for inumType = 1 to nTypes
			if siz_mtr[inumType] = Profile then
				sectDepth = vekt[inumType][1]
				parameters sectDepth = sectDepth
				sectWidth = vekt[inumType][2]
				parameters sectWidth = sectWidth
			endif
		next inumType
	endif
endif

call "FM_types" parameters all

values "Profile" siz_mtr

file_dependence "RHS Cold-Formed(14).txt"

if Profile <> `СПЕЦИАЛЬНЫЕ` then
	if Profile <> lastProfile then
		lastProfile = Profile
		parameters lastProfile = Profile
	endif

	bFoundExactMatch = 0
	szelv = open("text", "RHS Cold-Formed(14).txt", "separator='\t', mode=ro, Library")
	iRow = 2
	n = input(szelv, iRow, 3, ker1, ker2, ker3)
	while n > 0 do
		if (sectDepth=ker1) and (sectWidth=ker2) then
			n = input(szelv, iRow, 5, osectThick)
			put osectThick
			if sectThick = ker3 then			! look up all data fields for the profile
				n = input(szelv, iRow, 6, omassPerMeter, osectArea, odpt, obpt, osecondMomentX, osecondMomentY, \
          ogyrationRadX, ogyrationRadY, oelastModX, oelastModY, oplastModX, oplastModY)
				bFoundExactMatch = 1
			endif
		endif
		iRow = iRow + 1
		n = input(szelv, iRow, 3, ker1, ker2, ker3)
	endwhile
	close szelv

	if NSP > 0 then
		values "sectThick" use(NSP)
	endif

	! set the predefined dimensions
	if bFoundExactMatch then
		parameters B = sectWidth/1000
		parameters ZZYZX = sectDepth/1000
		massPerMeter = omassPerMeter
		parameters massPerMeter = massPerMeter
		secondMomentX = osecondMomentX
		parameters secondMomentX = secondMomentX
		secondMomentY = osecondMomentY
		parameters secondMomentY = secondMomentY
		gyrationRadX = ogyrationRadX
		parameters gyrationRadX = gyrationRadX
		gyrationRadY = ogyrationRadY
		parameters gyrationRadY = gyrationRadY
		elastModX = oelastModX
		parameters elastModX = elastModX
		elastModY = oelastModY
		parameters elastModY = elastModY
		plastModX = oplastModX
		parameters plastModX = plastModX
		plastModY = oplastModY
		parameters plastModY = plastModY
		sectArea = osectArea
		parameters sectArea = sectArea
	endif
else
	values "sectDepth" range (0.001, )
	values "sectWidth" range (0.001, )

	if GLOB_MODPAR_NAME = "sectWidth" then
		B = sectWidth/1000
		parameters B = B
	else
		sectWidth = B*1000
		parameters sectWidth = sectWidth
	endif
	if GLOB_MODPAR_NAME = "sectDepth" then
		ZZYZX = sectDepth/1000
		parameters ZZYZX = ZZYZX
	else
		sectDepth = ZZYZX*1000
		parameters sectDepth = sectDepth
	endif
endif

massSum = massPerMeter * A
parameters massSum = massSum
lock "massSum"

if Profile <> `СПЕЦИАЛЬНЫЕ` then
	lock "sectDepth"
	lock "sectWidth"
	lock "B"
	lock "ZZYZX"
	lock "massPerMeter"
	lock "secondMomentX"
	lock "secondMomentY"
	lock "gyrationRadX"
	lock "gyrationRadY"
	lock "elastModX"
	lock "elastModY"
	lock "plastModX"
	lock "plastModY"
	lock "sectArea"
endif
if gs_cont_pen=0 then parameters gs_cont_pen=90
if gs_fill_pen=0 then parameters gs_fill_pen=19

values "sectThick" range (0, min(sectWidth/2, sectDepth/2))

dim stDetLevel3d[3]
	stDetLevel3d[1] = `Простой`
	stDetLevel3d[2] = `Детальный`
	stDetLevel3d[3] = `Откл.`

values "gs_detlevel_3D" stDetLevel3d
values "gs_detlevel_3D_m" 1, 2, 0

if GLOB_MODPAR_NAME = "gs_detlevel_3D" then
	gs_detlevel_3D_m = 1
	if gs_detlevel_3D = stDetLevel3d[2] then gs_detlevel_3D_m = 2
	if gs_detlevel_3D = stDetLevel3d[3] then gs_detlevel_3D_m = 0
	parameters gs_detlevel_3D_m = gs_detlevel_3D_m
else
	gs_detlevel_3D = stDetLevel3d[1]
	if gs_detlevel_3D_m = 2 then gs_detlevel_3D = stDetLevel3d[2]
	if gs_detlevel_3D_m = 0 then gs_detlevel_3D = stDetLevel3d[3]
	parameters gs_detlevel_3D = gs_detlevel_3D
endif
values "gs_resol" range [3,)
dim stRotAxisValues[2]
	stRotAxisValues[1] = `Вдоль оси`
	stRotAxisValues[2] = `Вдоль поперечного сечения`

values "stRotAxis" stRotAxisValues
values "iRotAxis" ROT_AXIS, ROT_CROSSECT

if GLOB_MODPAR_NAME = "stRotAxis" then
	iRotAxis = ROT_AXIS
	if stRotAxis = stRotAxisValues[2] then iRotAxis = ROT_CROSSECT
	parameters iRotAxis = iRotAxis
else
	stRotAxis = stRotAxisValues[1]
	if iRotAxis = ROT_CROSSECT then stRotAxis = stRotAxisValues[2]
	parameters stRotAxis = stRotAxis
endif
dim stInsertPointValues[3]
	stInsertPointValues[1] = `Вверху`
	stInsertPointValues[2] = `По центру`
	stInsertPointValues[3] = `Внизу`

values "stInsertPoint" stInsertPointValues
values "iInsertPoint" INSERTPOINT_TOP, INSERTPOINT_CENTER, INSERTPOINT_BOTTOM

if GLOB_MODPAR_NAME = "stInsertPoint" then
	iInsertPoint = INSERTPOINT_TOP
	if stInsertPoint = stInsertPointValues[2] then iInsertPoint = INSERTPOINT_CENTER
	if stInsertPoint = stInsertPointValues[3] then iInsertPoint = INSERTPOINT_BOTTOM
	parameters iInsertPoint = iInsertPoint
else
	stInsertPoint = stInsertPointValues[1]
	if iInsertPoint = INSERTPOINT_CENTER then stInsertPoint = stInsertPointValues[2]
	if iInsertPoint = INSERTPOINT_BOTTOM then stInsertPoint = stInsertPointValues[3]
	parameters stInsertPoint = stInsertPoint
endif

if gs_detlevel_3D_m = 1 then lock "gs_resol"

dim stCutModeValues[3]
	stCutModeValues[1] = `Перпендикулярно оси`
	stCutModeValues[2] = `Вдоль вертикальной оси`
	stCutModeValues[3] = `Вдоль горизонтальной оси`

IF iRotAxis = ROT_AXIS or Angle>60 THEN
    values "stCutModeBottom" stCutModeValues[1],
			stCutModeValues[3]
    values "iCutModeBottom" CUTMODE_PERPENDICULAR, CUTMODE_ALONGHORIZONTAL
    values "stCutModeTop" stCutModeValues[1],
			stCutModeValues[3]
    values "iCutModeTop" CUTMODE_PERPENDICULAR, CUTMODE_ALONGHORIZONTAL
ELSE
    values "stCutModeBottom" stCutModeValues
    values "iCutModeBottom" CUTMODE_PERPENDICULAR, CUTMODE_ALONGVERTICAL, CUTMODE_ALONGHORIZONTAL
    values "stCutModeTop" stCutModeValues
    values "iCutModeTop" CUTMODE_PERPENDICULAR, CUTMODE_ALONGVERTICAL, CUTMODE_ALONGHORIZONTAL
ENDIF

if GLOB_MODPAR_NAME = "stCutModeBottom" then
	iCutModeBottom = CUTMODE_PERPENDICULAR
	if stCutModeBottom = stCutModeValues[2] then iCutModeBottom = CUTMODE_ALONGVERTICAL
	if stCutModeBottom = stCutModeValues[3] then iCutModeBottom = CUTMODE_ALONGHORIZONTAL
	parameters iCutModeBottom = iCutModeBottom
else
	stCutModeBottom = stCutModeValues[1]
	if iCutModeBottom = CUTMODE_ALONGVERTICAL then stCutModeBottom = stCutModeValues[2]
	if iCutModeBottom = CUTMODE_ALONGHORIZONTAL then stCutModeBottom = stCutModeValues[3]
	parameters stCutModeBottom = stCutModeBottom
endif

if GLOB_MODPAR_NAME = "stCutModeTop" then
	iCutModeTop = CUTMODE_PERPENDICULAR
	if stCutModeTop = stCutModeValues[2] then iCutModeTop = CUTMODE_ALONGVERTICAL
	if stCutModeTop = stCutModeValues[3] then iCutModeTop = CUTMODE_ALONGHORIZONTAL
	parameters iCutModeTop = iCutModeTop
else
	stCutModeTop = stCutModeValues[1]
	if iCutModeTop = CUTMODE_ALONGVERTICAL then stCutModeTop = stCutModeValues[2]
	if iCutModeTop = CUTMODE_ALONGHORIZONTAL then stCutModeTop = stCutModeValues[3]
	parameters stCutModeTop = stCutModeTop
endif

if not(bCutPlanes) THEN LOCK "stCutModeBottom", "iCutModeBottom",
				"gs_cutang1_bot", "gs_cutang2_bot",
				"stCutModeTop", "iCutModeTop",
				"gs_cutang3_up","gs_cutang4_up"

if GLOB_MODPAR_NAME = "a_temp" then
    if iRotAxis = ROT_CROSSECT then
        A = a_temp/cos(Angle)
    else
        A = a_temp
    endif
    parameters A = A
else
    if iRotAxis = ROT_CROSSECT then
        a_temp = A*cos(Angle)
    else
        a_temp = A
    endif
    parameters a_temp = a_temp
endif


if GLOB_MODPAR_NAME="A" then
	massSum=massPerMeter*A
	parameters massSum=massSum
endif

if not(axis) then
	lock "only_axis", "axis_line_type", "axis_line_pen"
endif
if axis and only_axis then
	lock "gs_ShowMoreHtps2D", "gs_cont_pen", "gs_fill_type", "gs_fill_pen", "gs_back_pen"
endif

if ABS(Angle)<EPS AND iCutModeBottom <> CUTMODE_ALONGHORIZONTAL AND iCutModeTop <> CUTMODE_ALONGHORIZONTAL OR ABS(Angle)>EPS then !!Angle=0, Angle<>0
    hideparameter "DashedLineType"
    lock "DashedLineType"
endif


! --- Rotation Angle -----------------------------------------------------------

values "Angle" range[-90,90]

if temp_ang >= 270 and temp_ang <= 360 then parameters temp_ang = 0		!! Bottom
if temp_ang < 270 and temp_ang >= 180 then parameters temp_ang = 180

if GLOB_MODPAR_NAME = "temp_ang" then
	parameters Angle = temp_ang - 90
else
	parameters temp_ang = Angle + 90
endif

! ---- Cutting Angles --------------------------------------------------........

values "gs_cutang1_bot" range[-60,60]
values "gs_cutang2_bot" range[-60,60]
values "gs_cutang3_up" range[-60,60]
values "gs_cutang4_up" range[-60,60]


if temp_cutang1_bot > 120 and temp_cutang1_bot < (360-120)/2+120 then parameters temp_cutang1_bot = 120
if temp_cutang1_bot < 360 and temp_cutang1_bot >= (360-120)/2+120 then parameters temp_cutang1_bot = 0

if temp_cutang2_bot > 120 and temp_cutang2_bot < (360-120)/2+120 then parameters temp_cutang2_bot = 120
if temp_cutang2_bot < 360 and temp_cutang2_bot >= (360-120)/2+120 then parameters temp_cutang2_bot = 0

if temp_cutang3_up > 120 and temp_cutang3_up < (360-120)/2+120 then parameters temp_cutang3_up = 120
if temp_cutang3_up < 360 and temp_cutang3_up >= (360-120)/2+120 then parameters temp_cutang3_up = 0

if temp_cutang4_up > 120 and temp_cutang4_up < (360-120)/2+120 then parameters temp_cutang4_up = 120
if temp_cutang4_up < 360 and temp_cutang4_up >= (360-120)/2+120 then parameters temp_cutang4_up = 0


if GLOB_MODPAR_NAME = "temp_cutang1_bot" then
	parameters gs_cutang1_bot = temp_cutang1_bot - 60
else
	parameters temp_cutang1_bot = gs_cutang1_bot + 60
endif

if GLOB_MODPAR_NAME = "temp_cutang2_bot" then
	parameters gs_cutang2_bot = temp_cutang2_bot - 60
else
	parameters temp_cutang2_bot = gs_cutang2_bot + 60
endif

if GLOB_MODPAR_NAME = "temp_cutang3_up" then
	parameters gs_cutang3_up = temp_cutang3_up - 60
else
	parameters temp_cutang3_up = gs_cutang3_up + 60
endif

if GLOB_MODPAR_NAME = "temp_cutang4_up" then
	parameters gs_cutang4_up = temp_cutang4_up - 60
else
	parameters temp_cutang4_up = gs_cutang4_up + 60
endif


! ================================================================================
! Toplevel, Bottomlevel
! ================================================================================

ac_bottomlevel = 0
ac_toplevel = ZZYZX

if iRotAxis = ROT_AXIS then
	if iInsertPoint = INSERTPOINT_BOTTOM then
		ac_bottomlevel =  - abs(sin (Angle)* B/2)
		ac_toplevel = abs(sin (Angle)* B/2) + cos(Angle)* ZZYZX
	else
		if iInsertPoint = INSERTPOINT_CENTER then 
			ac_bottomlevel =  - abs(sin (Angle)* B/2)- abs(cos(Angle)*ZZYZX/2)
			ac_toplevel = abs(sin (Angle)* B/2) + cos(Angle)* ZZYZX- abs(cos(Angle)*ZZYZX/2)
		else				!INSERTPOINT_TOP  	
			ac_toplevel =  abs(sin (Angle)* B/2)
			ac_bottomlevel = - abs(sin (Angle)* B/2) - cos(Angle)* ZZYZX
		endif
	endif


else    !iRotAxis = ROT_CROSSECT 
	if iInsertPoint = INSERTPOINT_BOTTOM then
		if not(Angle<0) then
			ac_bottomlevel =  0
			ac_toplevel = abs(cos(90-Angle) * A) + abs(sin(90-Angle)*ZZYZX)
		else
			ac_toplevel =  abs(sin(90-Angle)*ZZYZX)
			ac_bottomlevel = -abs(cos(90-Angle) * A)
		endif
	else
		if iInsertPoint = INSERTPOINT_CENTER then
			if not(Angle<0) then
				ac_bottomlevel =  -abs(sin (90-Angle)* ZZYZX/2)
				ac_toplevel = abs(cos(90-Angle) * A) + abs(sin(90-Angle)*ZZYZX) -abs(sin (90-Angle)* ZZYZX/2)
			else
				ac_toplevel =  abs(sin (90-Angle)* ZZYZX/2)
				ac_bottomlevel = -abs(cos(90-Angle) * A) - abs(sin(90-Angle)*ZZYZX) +abs(sin (90-Angle)* ZZYZX/2)
			endif
		else				!INSERTPOINT_TOP 
			if not(Angle<0) then 	
				ac_bottomlevel =  -2*abs(sin (90-Angle)* ZZYZX/2)
				ac_toplevel = abs(cos(90-Angle) * A) + abs(sin(90-Angle)*ZZYZX) -2*abs(sin (90-Angle)* ZZYZX/2)
			else
				ac_toplevel = 0
				ac_bottomlevel = -abs(cos(90-Angle) * A) - abs(sin(90-Angle)*ZZYZX)
			endif
		endif
	endif
endif


parameters ac_bottomlevel = ac_bottomlevel
parameters ac_toplevel = ac_toplevel

