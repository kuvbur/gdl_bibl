
if gs_detlevel_3D_m = 0 then END
if not(gs_shadow) then SHADOW OFF

if 2*flightWidth>b then flightWidth=b/2
n=int(((A-flightWidth)*2)/treadDepth)

dx = 0
if nRisers1stRun=0 | nRisers1stRun=int(n/2) then
	n=int(((a-flightWidth)*2)/treadDepth)
	if n/2=int(n/2) then
		dx=((a-flightWidth)*2)/n
		n=n/2
		nn=n
	else
		dx=(a-flightWidth)/(n-int(n/2))
		nn=INT(n/2)+1
		n=INT(n/2)
	endif
	dy=zzyzx/(n+nn)
endif
if nRisers1stRun>0 then   	!!!  & nRisers1stRun<int(n/2)
	n=nRisers1stRun   		!!! int((a-flightWidth)/treadDepth)+
	nn=nRisers2ndRun
	dx=(a-flightWidth)/max(nRisers1stRun,nRisers2ndRun)
	dy=zzyzx/(n+nn)
endif

if A < flightWidth+dx then end

pen gs_cont_pen
rotx 90
mulz -1

alf=atn(dy/dx)
y=stairSlabThk/cos(alf)
x=stairSlabThk/sin(alf)

bet=(90-alf)/2
ang=ATN(dy/dx)

zzy=n*dy
kx=a-flightWidth-n*dx

! ==============================================================================
! MAIN HOTSPOTS
! ==============================================================================
unID = 1
HOTSPOT 0,nRisers1stRun*dy,0,unID,a, 1+128		: unID=unID+1
HOTSPOT -0.1,nRisers1stRun*dy,0,unID,a, 3		: unID=unID+1
HOTSPOT a,nRisers1stRun*dy,0,unID,a, 2			: unID=unID+1

HOTSPOT a,0,0,unID,a, 1+128		: unID=unID+1
HOTSPOT a+0.1,0,0,unID,a, 3		: unID=unID+1
HOTSPOT 0,0,0,unID,a, 2			: unID=unID+1

HOTSPOT 0,nRisers1stRun*dy,b,unID,a, 1+128		: unID=unID+1
HOTSPOT -0.1,nRisers1stRun*dy,b,unID,a, 3		: unID=unID+1
HOTSPOT a,nRisers1stRun*dy,b,unID,a, 2			: unID=unID+1

HOTSPOT a,(nRisers1stRun+nRisers2ndRun)*dy,b,unID,a, 1+128		: unID=unID+1
HOTSPOT a+0.1,(nRisers1stRun+nRisers2ndRun)*dy,b,unID,a, 3		: unID=unID+1
HOTSPOT 0,(nRisers1stRun+nRisers2ndRun)*dy,b,unID,a, 2			: unID=unID+1

HOTSPOT a,0,b,unID,a, 1+128		: unID=unID+1
HOTSPOT a+0.1,0,b,unID,a, 3		: unID=unID+1
HOTSPOT 0,0,b,unID,a, 2			: unID=unID+1

HOTSPOT a,nRisers1stRun*dy,0,unID,b, 1+256		: unID=unID+1
HOTSPOT a,nRisers1stRun*dy,-0.1,unID,b, 3		: unID=unID+1
HOTSPOT a,nRisers1stRun*dy,b,unID,b, 2			: unID=unID+1

HOTSPOT 0,0,0,unID,b, 1+256		: unID=unID+1
HOTSPOT 0,0,-0.1,unID,b, 3		: unID=unID+1
HOTSPOT 0,0,b,unID,b, 2			: unID=unID+1

HOTSPOT a-flightWidth-nRisers1stRun*treadDepth,0,0,unID,flightWidth, 1+256		: unID=unID+1
HOTSPOT a-flightWidth-nRisers1stRun*treadDepth,0,-0.1,unID,flightWidth, 3		: unID=unID+1
HOTSPOT a-flightWidth-nRisers1stRun*treadDepth,0,flightWidth,unID,flightWidth, 2			: unID=unID+1

HOTSPOT a-flightWidth-nRisers2ndRun*treadDepth,(nRisers1stRun+nRisers2ndRun)*dy,b,unID,flightWidth, 1+256		: unID=unID+1
HOTSPOT a-flightWidth-nRisers2ndRun*treadDepth,(nRisers1stRun+nRisers2ndRun)*dy,b+0.1,unID,flightWidth, 3		: unID=unID+1
HOTSPOT a-flightWidth-nRisers2ndRun*treadDepth,(nRisers1stRun+nRisers2ndRun)*dy,b-flightWidth,unID,flightWidth, 2			: unID=unID+1

! ==============================================================================
! base
! ==============================================================================
material matBase
SECT_FILL typeFillStringer, penBackFillStringer, penFillStringer, penLineStringer

! --- concrete
if stairBaseType_m = 1 then		! Concrete

	for i=1 to n
		put kx+(i-1)*dx+riserCoverThk,i*dy-treadThickness,15
		put kx+i*dx+riserCoverThk,i*dy-treadThickness,15
	next i

	prism_ 5+(2*n),flightWidth,
		kx+riserCoverThk,0,15,
		get (nsp-1),9,
		a,zzy-treadThickness,11,
		a,zzy-treadThickness-stairSlabThk,11,
		a-flightWidth+stairSlabThk*tan(alf/2),zzy-treadThickness-stairSlabThk,15,
		kx+x,0,15
		ver=get(1)

	addz flightWidth
	prism_ 5,b-2*flightWidth,
		a,zzy-treadThickness,10,
		a,zzy-treadThickness-stairSlabThk,10,
		a-flightWidth+stairSlabThk*tan(alf/2),zzy-treadThickness-stairSlabThk,9,
		a-flightWidth,zzy-treadThickness-stairSlabThk,11,
		a-flightWidth,zzy-treadThickness,10
	addz b-2*flightWidth
	prism_ 4,flightWidth,
		a,zzy-treadThickness,14,
		a,zzy-treadThickness-stairSlabThk,14,
		a-flightWidth,zzy-treadThickness-stairSlabThk,9,
		a-flightWidth,zzy-treadThickness,14

	del 2

	add a-flightWidth,nRisers1stRun*dy,b-flightWidth
	mulx -1

	covthicky_t=riserCoverThk

	for i=1 to nn
		if i=nn then covthicky_t=0
		put (i-1)*dx+riserCoverThk,i*dy-treadThickness,15
		put i*dx+covthicky_t,i*dy-treadThickness,15
	next i

	prism_ 6+(2*(nn)),flightWidth,
		0,-treadThickness,15,
		riserCoverThk,-treadThickness,15,
		get (nsp-1),9,
		nn*dx,zzyzx-zzy-treadThickness,15,
		nn*dx,zzyzx-zzy-treadThickness-stairSlabThk/cos(alf),15,
		stairSlabThk*tan(alf/2),-treadThickness-stairSlabThk,15,
		0,-treadThickness-stairSlabThk,8
		ver=get(1)

	del 2
endif

! --- wood
if stairBaseType_m = 2 then		! Wood

	for i=1 to n
	  put kx+(i-1)*dx+riserCoverThk,i*dy-treadThickness,15
	  put kx+i*dx+riserCoverThk,i*dy-treadThickness,15
	next i

	addz woodBaseOffset
	prism_ 5+(2*n),woodBaseThk,
		kx+riserCoverThk,0,15,
		use (nsp),
		a-flightWidth+0.1,zzy-treadThickness,15,
		a-flightWidth+0.1,zzy-treadThickness-stairSlabThk,15,
		a-flightWidth+stairSlabThk*tan(alf/2),zzy-treadThickness-stairSlabThk,15,
		kx+x+riserCoverThk,0,15
	del 1

	addz flightWidth-woodBaseOffset-woodBaseThk
	prism_ 5+(2*n),woodBaseThk,
		kx+riserCoverThk,0,15,
		get (nsp),
		a-flightWidth+0.1,zzy-treadThickness,15,
		a-flightWidth+0.1,zzy-treadThickness-stairSlabThk,15,
		a-flightWidth+stairSlabThk*tan(alf/2),zzy-treadThickness-stairSlabThk,15,
		kx+x+riserCoverThk,0,15
	del 1

	prism_ 4,b,
		a-flightWidth+0.1,zzy-treadThickness-stairSlabThk,15,
		a-flightWidth+0.15,zzy-treadThickness-stairSlabThk,15,
		a-flightWidth+0.15,zzy-treadThickness,15,
		a-flightWidth+0.1,zzy-treadThickness,15

	prism_ 4,b,
		a-woodBaseOffset-woodBaseThk,zzy-treadThickness-stairSlabThk,15,
		a-woodBaseOffset,zzy-treadThickness-stairSlabThk,15,
		a-woodBaseOffset,zzy-treadThickness,15,
		a-woodBaseOffset-woodBaseThk,zzy-treadThickness,15

  add a-flightWidth,nRisers1stRun*dy,b-flightWidth+woodBaseOffset
  mulx -1
	for i=1 to nn
		put (i-1)*dx+riserCoverThk,i*dy-treadThickness,15
		put i*dx+riserCoverThk,i*dy-treadThickness,15
	next i

	prism_ 6+(2*(nn)),woodBaseThk,
		+riserCoverThk,-treadThickness,15,
		use (nsp-1),9,
		a-flightWidth,zzyzx-zzy-treadThickness,15,
		a-flightWidth,zzyzx-zzy-treadThickness-stairSlabThk/cos(alf),15,
		stairSlabThk*tan(alf/2),-treadThickness-stairSlabThk,15,
		-0.1,-treadThickness-stairSlabThk,15,
		-0.1,-treadThickness,15

  addz flightWidth-2*woodBaseOffset-woodBaseThk
	prism_ 6+(2*(nn)),woodBaseThk,
		+riserCoverThk,-treadThickness,15,
		get (nsp-1),9,
		a-flightWidth,zzyzx-zzy-treadThickness,15,
		a-flightWidth,zzyzx-zzy-treadThickness-stairSlabThk/cos(alf),15,
		stairSlabThk*tan(alf/2),-treadThickness-stairSlabThk,15,
		-0.1,-treadThickness-stairSlabThk,15,
		-0.1,-treadThickness,15
		ver=get(1)
  del 3
endif

! ==============================================================================
! Risers
! ==============================================================================
IF ABS(riserCoverThk)>0.001 THEN
	FOR t=1 to n
	ADD kx+(t-1)*dx,(t-1)*dy,0
	MATERIAL matRiser
	SECT_FILL typeFillRiser, penBackFillRiser, penFillRiser, penLineRiser

	prism_ 4,flightWidth,
		0,0,15,
		riserCoverThk,0,15,
		riserCoverThk,dy-treadThickness,15,
		0,dy-treadThickness,15
	DEL 1
	Next t

	add a-flightWidth,nRisers1stRun*dy,b-flightWidth
	mulx -1

	FOR t=1 to nn
	ADD (t-1)*dx,(t-1)*dy,0
	prism_ 4,flightWidth,
		0,0,15,
		riserCoverThk,0,15,
		riserCoverThk,dy-treadThickness,15,
		0,dy-treadThickness,15
	DEL 1
	Next t

	del 2
ENDIF


! ==============================================================================
! Treads
! ==============================================================================

SECT_FILL typeFillTread, penBackFillTread, penFillTread, penLineTread
MATERIAL matTread

IF treadThickness>0.0001 THEN
	covthicky_t=riserCoverThk
	for i=1 to n
		if i=nn then covthicky_t=0
		put kx+(i-1)*dx-nosing,i*dy-treadThickness,15
		put kx+i*dx+covthicky_t,i*dy-treadThickness,15
		put kx+i*dx+covthicky_t,i*dy,15
		put kx+(i-1)*dx-nosing,i*dy,15
	next i

	for k=1 to n
		base
		prism_ 4,flightWidth,
				get (12)
		vert 0, 0, 0 !#1
		vert 0, 0, 1 !#2
		vert 0, 1, 0 !#3
		vert -1, 0, 0 !#4
		coor 2, -1, -2,-3, -4
		body -1

	next k

	base
	prism_ 4,b-flightWidth,
			a-flightWidth,zzy-treadThickness,11,
			a-flightWidth,zzy,11,
			a,zzy,11,
			a,zzy-treadThickness,11
	vert 0, 0, 0 !#1
	vert 0, 0, 1 !#2
	vert 0, 1, 0 !#3
	vert -1, 0, 0 !#4
	coor 2, -1, -2,-3, -4
	body -1


	ADDz b-flightWidth
	base
	prism_ 4,flightWidth,
		a-flightWidth-riserCoverThk,zzy-treadThickness,14,
		a-flightWidth-riserCoverThk,zzy,14,
		a,zzy,14,
		a,zzy-treadThickness,14
	vert 0, 0, 0 !#1
	vert 0, 0, 1 !#2
	vert 0, 1, 0 !#3
	vert -1, 0, 0 !#4
	coor 2, -1, -2,-3, -4
	body -1
	DEL 1

	add a-flightWidth,nRisers1stRun*dy,b-flightWidth
	mulx -1

	covthicky_t=riserCoverThk
	for i=1 to nn
		if i=nn then covthicky_t=0
		put (i-1)*dx-nosing,i*dy-treadThickness,15
		put i*dx+covthicky_t,i*dy-treadThickness,15
		put i*dx+covthicky_t,i*dy,15
		put (i-1)*dx-nosing,i*dy,15
	next i

	for k=1 to nn
		base
		prism_ 4,flightWidth,
				get (12)
		vert 0, 0, 0 !#1
		vert 0, 0, 1 !#2
		vert 0, 1, 0 !#3
		vert -1, 0, 0 !#4
		coor 2, -1, -2,-3, -4
		body -1
	next k
	del 2
ENDIF


! ==============================================================================
! LEFT RAILS
! ==============================================================================
material matPost

IF rail_m = 3 | rail_m = 1 then		! Left, Both
	if bSameRails then
		leftRailType_m = rightRailType_m
		leftWireType_m = rightWireType_m
	endif

	rotx -90

	ADD a-flightWidth-nRisers1stRun*treadDepth-leftRailOvhgBottom,-flightWidth+leftRailOffset+leftRailFrameThk/2,-leftRailOvhgBottom*tan(ang)+dy

	lraSimple=(nRisers1stRun-1)*treadDepth+leftRailOvhgBottom
	lraComplex=(nRisers1stRun-1)*treadDepth
	additionXComplex=leftRailOvhgBottom+treadDepth/2
	additionZComplex=leftRailOvhgBottom*tan(ang)
	hrovL=treadDepth/2+leftRailOvhgBottom
	hrovR=0
	postNumber = ((nRisers-1))/4
	railAngle	= ang
	side = SIDE_LEFT
	gosub "callRailsForStair"

	DEL 1

	! --- Rails on the landing (left side_1) -------------------------------------
	ADD a-flightWidth-treadDepth,-flightWidth+leftRailOffset+leftRailFrameThk/2,nRisers1stRun*dy

	IF bComplexRailLeft THEN
		ADDx treadDepth/2 - leftRailPostSize/2*0
	endif

	lraSimple=treadDepth+leftRailOffset
	lraComplex=treadDepth/2+leftRailOffset-leftRailPostSize/2+leftRailFrameThk
	hrovL=0
	hrovR=leftRailPostSize/2
	postNumber = (flightWidth+treadDepth/2-leftRailOffset-leftRailPostSize/2)/(3*treadDepth)+1
	side = SIDE_LEFT
	gosub "callRailsForLanding"

	IF bComplexRailLeft THEN del 1

	DEL 1


	! --- Rails on the landing (back) ---
	ADD a-flightWidth+leftRailFrameThk/2+leftRailOffset,-flightWidth+leftRailOffset+leftRailFrameThk,nRisers1stRun*dy
	ROTz -90

	IF b-2*flightWidth+2*leftRailOffset+leftRailFrameThk>=0.05 THEN
		IF leftRailType_m < 7 THEN
			gamma=max(0,ATN(((treadDepth-leftRailFrameThk)*tan(ang)-leftRailOffset*tan(ang))/(b-2*flightWidth+2*leftRailOffset+leftRailFrameThk)))
		else
			gamma=max(0,ATN(((treadDepth/2-leftRailFrameThk)*tan(ang)-leftRailOffset*tan(ang))/(b-2*flightWidth+2*leftRailOffset+leftRailFrameThk)))
		endif

		IF leftRailType_m < 7 or (leftRailType_m > 6 and gamma <= 45) then
			lraSimple=b-2*flightWidth+2*leftRailOffset+leftRailFrameThk
			lraComplex=b-2*flightWidth+2*leftRailOffset + (leftRailFrameThk-leftRailPostSize/2)
			additionXComplex=0
			additionZComplex=-leftRailFrameThk*tan(gamma) * bComplexRailLeft
			hrovL=-leftRailFrameThk * bComplexRailLeft
			hrovR=leftRailPostSize/2 * bComplexRailLeft
			postNumber = max(2,(b-2*leftRailOffset-2*leftRailFrameThk+leftRailPostSize)/(3*treadDepth))
			railAngle	= gamma
			side = SIDE_LEFT
			gosub "callRailsForStair"
		endif
	ENDIF

	DEL 2

	! --- Rails on the landing (right side_2) ------------------------------------
	IF leftRailOffset>=treadDepth-leftRailFrameThk THEN
		ADD a-flightWidth+treadDepth,-b+flightWidth-leftRailOffset-leftRailFrameThk/2,nRisers1stRun*dy
		IF leftRailOffset-treadDepth+leftRailFrameThk<=0.1 THEN
			ADDy leftRailFrameThk/2
			ROTx 90
			IF leftRailType_m = 1 | leftRailType_m = 4 | leftRailType_m = 5 | leftRailType_m = 6 THEN
				PRISM_	4, leftRailFrameThk,
					0,leftRailDist,15,
					leftRailOffset-treadDepth+leftRailFrameThk,leftRailDist,015,
					leftRailOffset-treadDepth+leftRailFrameThk,leftRailHeight+leftRailDist,015,
					0,leftRailHeight+leftRailDist,15
			ENDIF
			DEL 2

			IF leftRailType_m = 2 | leftRailType_m = 3 THEN
				lraSimple=leftRailOffset-treadDepth+leftRailFrameThk
				lraComplex=leftRailOffset-treadDepth+leftRailFrameThk
				hrovL=0
				hrovR=0
				postNumber = 2
				side = SIDE_LEFT
				gosub "callRailsForLanding"
			endif
		ELSE
			IF leftRailType_m > 0 and leftRailType_m < 7 THEN
				lraSimple=leftRailOffset-treadDepth+leftRailFrameThk
				lraComplex=leftRailOffset-treadDepth+leftRailFrameThk
				hrovL=0
				hrovR=0
				postNumber = 2
				side = SIDE_LEFT
				gosub "callRailsForLanding"
			endif
		ENDIF
		DEL 1
	ENDIF

	IF leftRailOffset>=treadDepth/2-leftRailFrameThk THEN
		ADD a-flightWidth+leftRailOffset+leftRailFrameThk,-b+flightWidth-leftRailOffset-leftRailFrameThk/2,nRisers1stRun*dy
		IF leftRailOffset+leftRailFrameThk-min(leftRailOffset,treadDepth/2)<=0.2 THEN
			ADDy  leftRailFrameThk/2
			ROTx 90
			IF leftRailType_m = 7 | leftRailType_m = 8 | leftRailType_m = 9 | leftRailType_m = 10 THEN
				PRISM_	4, leftRailFrameThk,
					0,leftRailHeight+leftRailDist+(treadDepth/2)*tan(ang),15,
					-leftRailOffset-leftRailFrameThk+min(leftRailOffset,treadDepth/2),leftRailHeight+leftRailDist+(treadDepth/2)*tan(ang),015,
					-leftRailOffset-leftRailFrameThk+min(leftRailOffset,treadDepth/2),leftRailHeight+leftRailDist+(treadDepth/2)*tan(ang)-leftRailFrameThk,015,
					0,leftRailHeight+leftRailDist+(treadDepth/2)*tan(ang)-leftRailFrameThk,15
			ENDIF

			DEL 2
		ELSE
			IF leftRailType_m = 7 | leftRailType_m = 8 | leftRailType_m = 9 | leftRailType_m = 10 THEN
				ADDx -leftRailPostSize/2
				MULx -1

				lraSimple=leftRailOffset-min(leftRailOffset,treadDepth/2)
				lraComplex=leftRailOffset-min(leftRailOffset,treadDepth/2)
				hrovL=leftRailPostSize/2
				hrovR=leftRailPostSize/2
				postNumber = (flightWidth+treadDepth/2-leftRailOffset)/(3*treadDepth)+1
				side = SIDE_LEFT
				gosub "callRailsForLanding"

				del 2
			endif
		ENDIF
		DEL 1
	ENDIF

	! --- Rails on the 2nd Arm ---
	if bComplexRailLeft then
		ADD a-flightWidth-treadDepth/2,-b+flightWidth-leftRailOffset-leftRailFrameThk/2,(nRisers1stRun+1)*dy
	else
		ADD a-flightWidth+leftRailFrameThk+min(leftRailOffset,treadDepth-leftRailFrameThk),-b+flightWidth-leftRailOffset-leftRailFrameThk/2,(nRisers1stRun+1)*dy-leftRailFrameThk*tan(ang)-min((leftRailOffset)*tan(ang),(treadDepth-leftRailFrameThk)*tan(ang))
	endif
	ROTz 180

	IF leftRailOffset-treadDepth+leftRailFrameThk < eps THEN
		lraSimple=leftRailOffset+(nRisers2ndRun)*treadDepth+leftRailOvhgTop+leftRailFrameThk
	else
		lraSimple=(nRisers2ndRun+1)*treadDepth+leftRailOvhgTop
	endif
	lraComplex=(nRisers2ndRun)*treadDepth-treadDepth
	additionXComplex=0
	additionZComplex=0
	hrovL=treadDepth/2+leftRailFrameThk+min(leftRailOffset,treadDepth/2-leftRailFrameThk)
	hrovR=treadDepth/2+leftRailOvhgTop
	postNumber = ((nRisers2ndRun-1))/2+1
	railAngle	= ang
	side = SIDE_LEFT
	gosub "callRailsForStair"

	DEL 2

	DEL 1
	! Bottom side

	HOTSPOT a-flightWidth-nRisers1stRun*treadDepth,dy+leftRailDist+leftRailHeight-leftRailOvhgBottom*tan(ang),flightWidth-leftRailFrameThk/2-leftRailOffset,unID,leftRailOvhgBottom, 1+128		: unID=unID+1
	HOTSPOT a-flightWidth-nRisers1stRun*treadDepth+0.1,dy+leftRailDist+leftRailHeight-leftRailOvhgBottom*tan(ang),flightWidth-leftRailFrameThk/2-leftRailOffset,unID,leftRailOvhgBottom, 3		: unID=unID+1
	HOTSPOT a-flightWidth-nRisers1stRun*treadDepth-leftRailOvhgBottom,dy+leftRailDist+leftRailHeight-leftRailOvhgBottom*tan(ang),flightWidth-leftRailFrameThk/2-leftRailOffset,unID,leftRailOvhgBottom, 2		: unID=unID+1

	HOTSPOT a-flightWidth-nRisers1stRun*treadDepth-leftRailOvhgBottom,dy+leftRailDist-leftRailOvhgBottom*tan(ang),flightWidth-leftRailFrameThk/2,unID,leftRailOffset, 1+128		: unID=unID+1
	HOTSPOT a-flightWidth-nRisers1stRun*treadDepth-leftRailOvhgBottom,dy+leftRailDist-leftRailOvhgBottom*tan(ang),flightWidth-leftRailFrameThk/2-0.1,unID,leftRailOffset, 3		: unID=unID+1
	HOTSPOT a-flightWidth-nRisers1stRun*treadDepth-leftRailOvhgBottom,dy+leftRailDist-leftRailOvhgBottom*tan(ang),flightWidth-leftRailFrameThk/2-leftRailOffset,unID,leftRailOffset, 2		: unID=unID+1

	HOTSPOT a-flightWidth-nRisers1stRun*treadDepth-leftRailOvhgBottom,dy-leftRailOvhgBottom*tan(ang),flightWidth-leftRailFrameThk/2-leftRailOffset,unID,leftRailDist, 1+128		: unID=unID+1
	HOTSPOT a-flightWidth-nRisers1stRun*treadDepth-leftRailOvhgBottom,dy-0.1-leftRailOvhgBottom*tan(ang),flightWidth-leftRailFrameThk/2-leftRailOffset,unID,leftRailDist, 3		: unID=unID+1
	HOTSPOT a-flightWidth-nRisers1stRun*treadDepth-leftRailOvhgBottom,dy+leftRailDist-leftRailOvhgBottom*tan(ang),flightWidth-leftRailFrameThk/2-leftRailOffset,unID,leftRailDist, 2		: unID=unID+1

	HOTSPOT a-flightWidth-nRisers1stRun*treadDepth-leftRailOvhgBottom,dy-leftRailOvhgBottom*tan(ang)+leftRailDist,flightWidth-leftRailFrameThk/2-leftRailOffset,unID,leftRailHeight, 1+128		: unID=unID+1
	HOTSPOT a-flightWidth-nRisers1stRun*treadDepth-leftRailOvhgBottom,dy-leftRailOvhgBottom*tan(ang)+leftRailDist-0.1,flightWidth-leftRailFrameThk/2-leftRailOffset,unID,leftRailHeight, 3		: unID=unID+1
	HOTSPOT a-flightWidth-nRisers1stRun*treadDepth-leftRailOvhgBottom,dy-leftRailOvhgBottom*tan(ang)+leftRailDist+leftRailHeight,flightWidth-leftRailFrameThk/2-leftRailOffset,unID,leftRailHeight, 2	: unID=unID+1

	! Top side
	HOTSPOT a-flightWidth-nRisers2ndRun*treadDepth,(nRisers)*dy+(leftRailOvhgTop+treadDepth)*tan(ang)+leftRailDist+leftRailHeight,b-flightWidth+leftRailFrameThk/2+leftRailOffset,unID,leftRailOvhgTop, 1+128			: unID=unID+1
	HOTSPOT a-flightWidth-nRisers2ndRun*treadDepth+0.1,(nRisers)*dy+(leftRailOvhgTop+treadDepth)*tan(ang)+leftRailDist+leftRailHeight,b-flightWidth+leftRailFrameThk/2+leftRailOffset,unID,leftRailOvhgTop, 3			: unID=unID+1
	HOTSPOT a-flightWidth-nRisers2ndRun*treadDepth-leftRailOvhgTop,(nRisers)*dy+(leftRailOvhgTop+treadDepth)*tan(ang)+leftRailDist+leftRailHeight,b-flightWidth+leftRailFrameThk/2+leftRailOffset,unID,leftRailOvhgTop, 2			: unID=unID+1

	HOTSPOT a-flightWidth-nRisers2ndRun*treadDepth-leftRailOvhgTop,(nRisers)*dy+(leftRailOvhgTop+treadDepth)*tan(ang)+leftRailDist,b-flightWidth+leftRailFrameThk/2,unID,leftRailOffset, 1+128		: unID=unID+1
	HOTSPOT a-flightWidth-nRisers2ndRun*treadDepth-leftRailOvhgTop,(nRisers)*dy+(leftRailOvhgTop+treadDepth)*tan(ang)+leftRailDist,b-flightWidth+leftRailFrameThk/2+0.1,unID,leftRailOffset, 3		: unID=unID+1
	HOTSPOT a-flightWidth-nRisers2ndRun*treadDepth-leftRailOvhgTop,(nRisers)*dy+(leftRailOvhgTop+treadDepth)*tan(ang)+leftRailDist,b-flightWidth+leftRailFrameThk/2+leftRailOffset,unID,leftRailOffset, 2		: unID=unID+1

	HOTSPOT a-flightWidth-nRisers2ndRun*treadDepth-leftRailOvhgTop,(nRisers)*dy+(leftRailOvhgTop+treadDepth)*tan(ang),b-flightWidth+leftRailFrameThk/2+leftRailOffset,unID,leftRailDist, 1+128		: unID=unID+1
	HOTSPOT a-flightWidth-nRisers2ndRun*treadDepth-leftRailOvhgTop,(nRisers)*dy+(leftRailOvhgTop+treadDepth)*tan(ang)-0.1,b-flightWidth+leftRailFrameThk/2+leftRailOffset,unID,leftRailDist, 3		: unID=unID+1
	HOTSPOT a-flightWidth-nRisers2ndRun*treadDepth-leftRailOvhgTop,(nRisers)*dy+(leftRailOvhgTop+treadDepth)*tan(ang)+leftRailDist,b-flightWidth+leftRailFrameThk/2+leftRailOffset,unID,leftRailDist, 2		: unID=unID+1

	HOTSPOT a-flightWidth-nRisers2ndRun*treadDepth-leftRailOvhgTop,(nRisers)*dy+(leftRailOvhgTop+treadDepth)*tan(ang)+leftRailDist,b-flightWidth+leftRailFrameThk/2+leftRailOffset,unID,leftRailHeight, 1+128			: unID=unID+1
	HOTSPOT a-flightWidth-nRisers2ndRun*treadDepth-leftRailOvhgTop,(nRisers)*dy+(leftRailOvhgTop+treadDepth)*tan(ang)+leftRailDist-0.1,b-flightWidth+leftRailFrameThk/2+leftRailOffset,unID,leftRailHeight, 3			: unID=unID+1
	HOTSPOT a-flightWidth-nRisers2ndRun*treadDepth-leftRailOvhgTop,(nRisers)*dy+(leftRailOvhgTop+treadDepth)*tan(ang)+leftRailHeight+leftRailDist,b-flightWidth+leftRailFrameThk/2+leftRailOffset,unID,leftRailHeight, 2			: unID=unID+1

ENDIF


! ==============================================================================
! RIGHT RAILS
! ==============================================================================
rightRailOffset = rightRailOffset
leftRailOffset = leftRailOffset
treadDepth=dx
material matPost

IF rail_m = 2 | rail_m = 1 then	! Right, Both
	rotx -90

	ADD a-flightWidth-nRisers1stRun*treadDepth-rightRailOvhgBottom,-rightRailOffset-rightRailFrameThk/2,-rightRailOvhgBottom*tan(ang)+dy

	lraSimple=(nRisers1stRun-1)*treadDepth+rightRailOvhgBottom
	lraComplex=(nRisers1stRun-1)*treadDepth
	additionXComplex=rightRailOvhgBottom+treadDepth/2
	additionZComplex=rightRailOvhgBottom*tan(ang)
	hrovL=treadDepth/2+rightRailOvhgBottom
	hrovR=0
	postNumber = ((nRisers-1))/4
	railAngle	= ang
	side = SIDE_RIGHT
	gosub "callRailsForStair"

	DEL 1

	! --- Rails on the landing (right side_1) ------------------------------------
	ADD a-flightWidth-treadDepth,-rightRailOffset-rightRailFrameThk/2,nRisers1stRun*dy

	IF rightRailType_m = 7 | rightRailType_m = 8 | rightRailType_m = 9 | rightRailType_m = 10 THEN
		ADDx treadDepth/2 - rightRailPostSize/2*0
	endif

	lraSimple=flightWidth+treadDepth-rightRailOffset
	lraComplex=flightWidth+treadDepth/2-rightRailOffset-rightRailPostSize/2
	hrovL=0
	hrovR=rightRailPostSize/2
	postNumber = (flightWidth+treadDepth/2-rightRailOffset-rightRailPostSize/2)/(3*treadDepth)+1
	side = SIDE_RIGHT
	gosub "callRailsForLanding"

	IF rightRailType_m = 7 | rightRailType_m = 8 | rightRailType_m = 9 | rightRailType_m = 10 THEN del 1

	DEL 1

	! --- Rails on the landing (back) ---
	ADD a-rightRailOffset-rightRailFrameThk/2,-rightRailOffset-rightRailFrameThk,nRisers1stRun*dy
	ROTz -90

	IF rightRailType_m = 7 | rightRailType_m = 8 | rightRailType_m = 9 THEN
		IF rightRailType_m = 7 | rightRailType_m = 8 THEN
			ADDx -rightRailPostSize/2 - rightRailPostSize/2*0
		else
			ADDx treadDepth/2 - rightRailPostSize/2*0
		endif
	endif

	lraSimple=b-2*rightRailOffset-2*rightRailFrameThk
	lraComplex=b-2*rightRailOffset-2*rightRailFrameThk - treadDepth * (rightRailType_m = 9) + rightRailPostSize * (rightRailType_m = 7 | rightRailType_m = 8)
	hrovL=treadDepth/2 * (rightRailType_m = 9) - rightRailPostSize/2 * (rightRailType_m = 7 | rightRailType_m = 8)
	hrovR=treadDepth/2 * (rightRailType_m = 9) - rightRailPostSize/2 * (rightRailType_m = 7 | rightRailType_m = 8)
	postNumber = (b-2*rightRailOffset-2*rightRailFrameThk+rightRailPostSize)/(3*treadDepth)+1
	side = SIDE_RIGHT
	gosub "callRailsForLanding"

	IF rightRailType_m = 7 | rightRailType_m = 8 | rightRailType_m = 9 THEN del 1

	DEL 2

	! --- Rails on the landing (right side_2) ------------------------------------
	ADD a-flightWidth+treadDepth,-b+rightRailOffset+rightRailFrameThk/2,nRisers1stRun*dy

	IF bComplexRailRight THEN
		ADDx -treadDepth/2 - rightRailPostSize/2*0
	endif

	lraSimple=flightWidth-treadDepth-rightRailOffset
	lraComplex=flightWidth-treadDepth/2-rightRailOffset-rightRailPostSize/2
	hrovL=0
	hrovR=rightRailPostSize/2
	postNumber = (flightWidth+treadDepth/2-rightRailOffset)/(3*treadDepth)+1
	side = SIDE_RIGHT
	gosub "callRailsForLanding"

	IF bComplexRailRight THEN del 1

	DEL 1

	! --- Rails on the 2nd Arm ---
	ADD a-flightWidth+treadDepth,-b+rightRailOffset+rightRailFrameThk/2,nRisers1stRun*dy
	ROTz 180

	lraSimple=(nRisers2ndRun+1)*treadDepth+rightRailOvhgTop
	lraComplex=(nRisers2ndRun)*treadDepth
	additionXComplex=treadDepth/2
	additionZComplex=0
	hrovL=0
	hrovR=treadDepth/2+rightRailOvhgTop
	postNumber = ((nRisers2ndRun-1))/2+1
	railAngle	= ang
	side = SIDE_RIGHT
	gosub "callRailsForStair"

	DEL 2

	DEL 1
	! Bottom side

	HOTSPOT a-flightWidth-nRisers1stRun*treadDepth,dy+rightRailDist+rightRailHeight-rightRailOvhgBottom*tan(ang),rightRailFrameThk/2+rightRailOffset,unID,rightRailOvhgBottom, 1+128		: unID=unID+1
	HOTSPOT a-flightWidth-nRisers1stRun*treadDepth+0.1,dy+rightRailDist+rightRailHeight-rightRailOvhgBottom*tan(ang),rightRailFrameThk/2+rightRailOffset,unID,rightRailOvhgBottom, 3		: unID=unID+1
	HOTSPOT a-flightWidth-nRisers1stRun*treadDepth-rightRailOvhgBottom,dy+rightRailDist+rightRailHeight-rightRailOvhgBottom*tan(ang),rightRailFrameThk/2+rightRailOffset,unID,rightRailOvhgBottom, 2		: unID=unID+1

	HOTSPOT a-flightWidth-nRisers1stRun*treadDepth-rightRailOvhgBottom,dy+rightRailDist-rightRailOvhgBottom*tan(ang),rightRailFrameThk/2,unID,rightRailOffset, 1+128		: unID=unID+1
	HOTSPOT a-flightWidth-nRisers1stRun*treadDepth-rightRailOvhgBottom,dy+rightRailDist-rightRailOvhgBottom*tan(ang),rightRailFrameThk/2+0.1,unID,rightRailOffset, 3		: unID=unID+1
	HOTSPOT a-flightWidth-nRisers1stRun*treadDepth-rightRailOvhgBottom,dy+rightRailDist-rightRailOvhgBottom*tan(ang),rightRailFrameThk/2+rightRailOffset,unID,rightRailOffset, 2		: unID=unID+1

	HOTSPOT a-flightWidth-nRisers1stRun*treadDepth-rightRailOvhgBottom,dy-rightRailOvhgBottom*tan(ang),rightRailFrameThk/2+rightRailOffset,unID,rightRailDist, 1+128		: unID=unID+1
	HOTSPOT a-flightWidth-nRisers1stRun*treadDepth-rightRailOvhgBottom,dy-0.1-rightRailOvhgBottom*tan(ang),rightRailFrameThk/2+rightRailOffset,unID,rightRailDist, 3		: unID=unID+1
	HOTSPOT a-flightWidth-nRisers1stRun*treadDepth-rightRailOvhgBottom,dy+rightRailDist-rightRailOvhgBottom*tan(ang),rightRailFrameThk/2+rightRailOffset,unID,rightRailDist, 2		: unID=unID+1

	HOTSPOT a-flightWidth-nRisers1stRun*treadDepth-rightRailOvhgBottom,dy-rightRailOvhgBottom*tan(ang)+rightRailDist,rightRailFrameThk/2+rightRailOffset,unID,rightRailHeight, 1+128		: unID=unID+1
	HOTSPOT a-flightWidth-nRisers1stRun*treadDepth-rightRailOvhgBottom,dy-rightRailOvhgBottom*tan(ang)+rightRailDist-0.1,rightRailFrameThk/2+rightRailOffset,unID,rightRailHeight, 3		: unID=unID+1
	HOTSPOT a-flightWidth-nRisers1stRun*treadDepth-rightRailOvhgBottom,dy-rightRailOvhgBottom*tan(ang)+rightRailDist+rightRailHeight,rightRailFrameThk/2+rightRailOffset,unID,rightRailHeight, 2	: unID=unID+1

	!!!!Top side
	HOTSPOT a-flightWidth-nRisers2ndRun*treadDepth,(nRisers)*dy+(rightRailOvhgTop+treadDepth)*tan(ang)+rightRailDist+rightRailHeight,b-rightRailFrameThk/2-rightRailOffset,unID,rightRailOvhgTop, 1+128			: unID=unID+1
	HOTSPOT a-flightWidth-nRisers2ndRun*treadDepth+0.1,(nRisers)*dy+(rightRailOvhgTop+treadDepth)*tan(ang)+rightRailDist+rightRailHeight,b-rightRailFrameThk/2-rightRailOffset,unID,rightRailOvhgTop, 3			: unID=unID+1
	HOTSPOT a-flightWidth-nRisers2ndRun*treadDepth-rightRailOvhgTop,(nRisers)*dy+(rightRailOvhgTop+treadDepth)*tan(ang)+rightRailDist+rightRailHeight,b-rightRailFrameThk/2-rightRailOffset,unID,rightRailOvhgTop, 2			: unID=unID+1

	HOTSPOT a-flightWidth-nRisers2ndRun*treadDepth-rightRailOvhgTop,(nRisers)*dy+(rightRailOvhgTop+treadDepth)*tan(ang)+rightRailDist,b-rightRailFrameThk/2,unID,rightRailOffset, 1+128		: unID=unID+1
	HOTSPOT a-flightWidth-nRisers2ndRun*treadDepth-rightRailOvhgTop,(nRisers)*dy+(rightRailOvhgTop+treadDepth)*tan(ang)+rightRailDist,b-rightRailFrameThk/2-0.1,unID,rightRailOffset, 3		: unID=unID+1
	HOTSPOT a-flightWidth-nRisers2ndRun*treadDepth-rightRailOvhgTop,(nRisers)*dy+(rightRailOvhgTop+treadDepth)*tan(ang)+rightRailDist,b-rightRailFrameThk/2-rightRailOffset,unID,rightRailOffset, 2		: unID=unID+1

	HOTSPOT a-flightWidth-nRisers2ndRun*treadDepth-rightRailOvhgTop,(nRisers)*dy+(rightRailOvhgTop+treadDepth)*tan(ang),b-rightRailFrameThk/2-rightRailOffset,unID,rightRailDist, 1+128		: unID=unID+1
	HOTSPOT a-flightWidth-nRisers2ndRun*treadDepth-rightRailOvhgTop,(nRisers)*dy+(rightRailOvhgTop+treadDepth)*tan(ang)-0.1,b-rightRailFrameThk/2-rightRailOffset,unID,rightRailDist, 3		: unID=unID+1
	HOTSPOT a-flightWidth-nRisers2ndRun*treadDepth-rightRailOvhgTop,(nRisers)*dy+(rightRailOvhgTop+treadDepth)*tan(ang)+rightRailDist,b-rightRailFrameThk/2-rightRailOffset,unID,rightRailDist, 2		: unID=unID+1

	HOTSPOT a-flightWidth-nRisers2ndRun*treadDepth-rightRailOvhgTop,(nRisers)*dy+(rightRailOvhgTop+treadDepth)*tan(ang)+rightRailDist,b-rightRailFrameThk/2-rightRailOffset,unID,rightRailHeight, 1+128			: unID=unID+1
	HOTSPOT a-flightWidth-nRisers2ndRun*treadDepth-rightRailOvhgTop,(nRisers)*dy+(rightRailOvhgTop+treadDepth)*tan(ang)+rightRailDist-0.1,b-rightRailFrameThk/2-rightRailOffset,unID,rightRailHeight, 3			: unID=unID+1
	HOTSPOT a-flightWidth-nRisers2ndRun*treadDepth-rightRailOvhgTop,(nRisers)*dy+(rightRailOvhgTop+treadDepth)*tan(ang)+rightRailHeight+rightRailDist,b-rightRailFrameThk/2-rightRailOffset,unID,rightRailHeight, 2			: unID=unID+1
ENDIF

end


! ==============================================================================
"callRailsForStair":
! ------------------------------------------------------------------------------
!	lraSimple
!	lraComplex
!	additionXComplex
!	additionZComplex
!	hrovL: rail overhang start
!	hrovR: rail overhang end
!	postNumber:   number of posts
!	side: SIDE_LEFT or SIDE_RIGHT
! ==============================================================================
	ani = railAngle
	additionXComplex = additionXComplex
	additionZComplex = additionZComplex
	if side = SIDE_LEFT then
		dsComplex = leftRailDist+treadDepth/2*tan(ang)
	else
		dsComplex = rightRailDist+treadDepth/2*tan(ang)
	endif

	gosub "callRails"
return


! ==============================================================================
"callRailsForLanding":
! ------------------------------------------------------------------------------
!	lraSimple
!	lraComplex
!	hrovL: rail overhang start
!	hrovR: rail overhang end
!	postNumber:   number of posts
!	side: SIDE_LEFT or SIDE_RIGHT
! ==============================================================================
	ani = 0
	additionZComplex = 0
	if side = SIDE_LEFT then
		additionXComplex = leftRailPostSize/2*0
		dsComplex = leftRailDist + treadDepth/2*tan(ang)
	else
		additionXComplex = rightRailPostSize/2*0
		dsComplex = rightRailDist + treadDepth/2*tan(ang)
	endif

	gosub "callRails"
return


! ==============================================================================
"callRails":
! ------------------------------------------------------------------------------
!	ani
!	additionXComplex
!	additionZComplex
!	dsComplex
!  ------------------
!	side: SIDE_LEFT or SIDE_RIGHT
!	lraSimple
!	lraComplex
!	hrovL: rail overhang start
!	hrovR: rail overhang end
!	postNumber:   number of posts
! ==============================================================================
	if side = SIDE_LEFT then
		railBarDepth		= leftRailBarDepth
		railBarDiam			= railBarDepth
		railHeight			= leftRailHeight
		railBarFillThk		= leftRailBarThk
		railFrameThk		= leftRailFrameThk
		railDist			= leftRailDist
		railType_m			= leftRailType_m
		railPostSize		= leftRailPostSize
		barNumber			= nBarsLeftRail
		railWireType		= leftWireType_m
		if leftRailType_m = RAIL_WIRED then
			railBarThk		= leftRailWireThk
			railBarDepth	= leftRailWireDepth
			railBarDiam		= leftRailWireDiam
		endif
	else
		railBarDepth		= rightRailBarDepth
		railBarDiam			= railBarDepth
		railHeight			= rightRailHeight
		railBarFillThk		= rightRailBarThk
		railFrameThk		= rightRailFrameThk
		railDist			= rightRailDist
		railType_m			= rightRailType_m
		railPostSize		= rightRailPostSize
		barNumber			= nBarsRightRail
		railWireType		= rightWireType_m
		if rightRailType_m = RAIL_WIRED then
			railBarThk		= rightRailWireThk
			railBarDepth	= rightRailWireDepth
			railBarDiam		= rightRailWireDiam
		endif
	endif

	call "stairRails_m" parameters	railType_m				= railType_m,
									iStairType				= 1,
									bEnableWired02Rail		= 0,
									bEnableNonVerticalRail	= 0,
									additionXComplex		= additionXComplex,
									additionZComplex		= additionZComplex,
									ptyp_m					= 1,
									ani						= ani,
									ab						= 0,
									rb						= 0,
									rom_m					= 1,
									rmm_m					= 1,
									lraSimple				= lraSimple,
									lraComplex				= lraComplex,
									railHeight				= railHeight,
									railHeightComplex		= dsComplex,
									railDist				= railDist,
									gs_detlevel_3D_m		= gs_detlevel_3D_m,
									gs_cont_pen				= gs_cont_pen,
									res						= res,
									rescs					= rescs,
									gs_shadow				= gs_shadow,

									railFrameThk			= railFrameThk,
									railBarDepth			= railBarDepth,
									railBarFillThk			= railBarFillThk,
									railBarDiam				= railBarDiam,
									balusterDist			= treadDepth,
									railFrameMat			= matBar,
									railBaluFillMat			= matSurface,
									barNumber				= barNumber,
									hrovL					= hrovL,
									hrovR					= hrovR,
									railHandrailMat			= matHandrail,
									iBalusterStyle			= railWireType,
									railPostDiam			= railPostSize,
									railPostWidth			= railPostSize,
									railPostThk				= railFrameThk,
									postNumber				= postNumber,
									railPostMat				= matPost

return


