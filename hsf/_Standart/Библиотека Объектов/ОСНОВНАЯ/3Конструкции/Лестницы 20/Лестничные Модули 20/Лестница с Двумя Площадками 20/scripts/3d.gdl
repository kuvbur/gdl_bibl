
!! Stairs TwoLandings.gsm
if gs_detlevel_3D_m = 0 then END
if not(gs_shadow) then SHADOW OFF

pen gs_cont_pen

gapToFirstTread = 0

! ==============================================================================
! HOTSPOTS
! ==============================================================================
unID = 1

HOTSPOT 0,gapToFirstTread,0,unID,flightWidth,1+128	: unID=unID+1
HOTSPOT -0.1,gapToFirstTread,0,unID,flightWidth,3		: unID=unID+1
HOTSPOT flightWidth,gapToFirstTread,0,unID,flightWidth,2		: unID=unID+1

HOTSPOT a,0,0,unID,a,1+128	: unID=unID+1
HOTSPOT a+0.1,0,0,unID,a,3		: unID=unID+1
HOTSPOT 0,0,0,unID,a,2		: unID=unID+1

HOTSPOT a,0,(nRisers1stRun+nRisers2ndRun)*treadHeight,unID,b,1+128	: unID=unID+1
HOTSPOT a,-0.1,(nRisers1stRun+nRisers2ndRun)*treadHeight,unID,b,3		: unID=unID+1
HOTSPOT a,b,(nRisers1stRun+nRisers2ndRun)*treadHeight,unID,b,2		: unID=unID+1

HOTSPOT 0,b,0,unID,b,1+128	: unID=unID+1
HOTSPOT 0,b+0.1,0,unID,b,3		: unID=unID+1
HOTSPOT 0,0,0,unID,b,2		: unID=unID+1

HOTSPOT flightWidth+(nRisers2ndRun-1)*td2,b,(nRisers1stRun+nRisers2ndRun)*treadHeight,unID,flightWidth,1+128	: unID=unID+1
HOTSPOT flightWidth+(nRisers2ndRun-1)*td2,b+0.1,(nRisers1stRun+nRisers2ndRun)*treadHeight,unID,flightWidth,3		: unID=unID+1
HOTSPOT flightWidth+(nRisers2ndRun-1)*td2,b-flightWidth,(nRisers1stRun+nRisers2ndRun)*treadHeight,unID,flightWidth,2		: unID=unID+1

HOTSPOT flightWidth,b,nRisers1stRun*treadHeight,unID,flightWidth,1+128	: unID=unID+1
HOTSPOT flightWidth,b+0.1,nRisers1stRun*treadHeight,unID,flightWidth,3		: unID=unID+1
HOTSPOT flightWidth,b-flightWidth,nRisers1stRun*treadHeight,unID,flightWidth,2		: unID=unID+1

HOTSPOT 0,0,(nRisers1stRun)*treadHeight,unID,b,1+128		: unID=unID+1
HOTSPOT 0,-0.1,(nRisers1stRun)*treadHeight,unID,b,3		: unID=unID+1
HOTSPOT 0,b,(nRisers1stRun)*treadHeight,unID,b,2		: unID=unID+1

HOTSPOT a,b,nRisers1stRun*treadHeight,unID,a,1+128		: unID=unID+1
HOTSPOT a+0.1,b,nRisers1stRun*treadHeight,unID,a,3		: unID=unID+1
HOTSPOT 0,b,nRisers1stRun*treadHeight,unID,a,2		: unID=unID+1

HOTSPOT a,b-flightWidth-nRisers3rdRun*treadDepth,0,unID,zzyzx,1+128		: unID=unID+1
HOTSPOT a,b-flightWidth-nRisers3rdRun*treadDepth,-0.1,unID,zzyzx,3		: unID=unID+1
HOTSPOT a,b-flightWidth-nRisers3rdRun*treadDepth,zzyzx,unID,zzyzx,2		: unID=unID+1

HOTSPOT a,b-flightWidth-nRisers3rdRun*treadDepth,zzyzx,unID,flightWidth,1+128		: unID=unID+1
HOTSPOT a+0.1,b-flightWidth-nRisers3rdRun*treadDepth,zzyzx,unID,flightWidth,3		: unID=unID+1
HOTSPOT a-flightWidth,b-flightWidth-nRisers3rdRun*treadDepth,zzyzx,unID,flightWidth,2		: unID=unID+1

! ==============================================================================
! Concrete Base
! ==============================================================================

addy gapToFirstTread

IF stairBaseType_m = 1 THEN				! Concrete
	MATERIAL matBase
	SECT_FILL typeFillStringer, penBackFillStringer, penFillStringer, penLineStringer

	ROTx 90
	ROTy 90

	PUT riserCoverThk,0,15
	FOR i=1 to nRisers1stRun-1
		PUT (i-1)*treadDepth+riserCoverThk,i*treadHeight-treadThickness,15,
			(i)*treadDepth+riserCoverThk,i*treadHeight-treadThickness,15
	NEXT i

	PUT (nRisers1stRun-1)*treadDepth+riserCoverThk,(nRisers1stRun-1)*treadHeight-treadThickness,10,
		(nRisers1stRun-1)*treadDepth+riserCoverThk,(nRisers1stRun)*treadHeight-treadThickness-stairSlabThk,8,
		nRisers1stRun*treadDepth+stairSlabThk*tan(ang/2),nRisers1stRun*treadHeight-treadThickness-stairSlabThk,15,
		(treadThickness+stairSlabThk)/sin(ang),0,15

	PRISM_ nsp/3,flightWidth,
		get(nsp)

	IF ABS(riserCoverThk)>0.001 THEN
		FOR t=1 to nRisers1stRun
		ADD (t-1)*treadDepth,(t-1)*treadHeight,0
		MATERIAL matRiser
		SECT_FILL typeFillRiser, penBackFillRiser, penFillRiser, penLineRiser

		prism_ 4,flightWidth,
			0,0,15,
			riserCoverThk,0,15,
			riserCoverThk,treadHeight-treadThickness,15,
			0,treadHeight-treadThickness,15
		DEL 1
		Next t
		MATERIAL matBase
		SECT_FILL typeFillStringer, penBackFillStringer, penFillStringer, penLineStringer
	ENDIF



	DEL 2
	!!!!!******************************      LANDING 1.

	ADD 0,(nRisers1stRun-1)*treadDepth,(nRisers1stRun)*treadHeight-treadThickness-stairSlabThk
	PRISM_ 6,stairSlabThk-treadHeight,
		0,				riserCoverThk,8,
		flightWidth,	riserCoverThk,9,
		flightWidth,	stairSlabThk*tan(ang/2)+treadDepth,9,
		flightWidth,	flightWidth,9,
		0,				flightWidth,11,
		0,				stairSlabThk*tan(ang/2)+treadDepth,8
	ADDz stairSlabThk-treadHeight
	PRISM_ 4,treadHeight,
		0,+riserCoverThk,14,
		flightWidth,+riserCoverThk,14,
		flightWidth,flightWidth,12,
		0,flightWidth,14
	DEL 2
	!!!!!******************************      2nd RUN

	ADD flightWidth,(nRisers1stRun-1)*treadDepth,nRisers1stRun*treadHeight-treadThickness
	ROTx 90
	ADDz -flightWidth

	PUT 0,-stairSlabThk,8,
		0,0,15,
		riserCoverThk,0,15


	FOR i=1 to nRisers2ndRun-1
		PUT (i-1)*td2+riserCoverThk,i*treadHeight,15,
			(i)*td2+riserCoverThk,i*treadHeight,15
	NEXT i

	PUT (nRisers2ndRun-1)*td2+riserCoverThk,(nRisers2ndRun-1)*treadHeight,8,
		(nRisers2ndRun-1)*td2+riserCoverThk,(nRisers2ndRun)*treadHeight-stairSlabThk,8,
		(nRisers2ndRun)*td2+stairSlabThk*tan(ang/2),(nRisers2ndRun)*treadHeight-stairSlabThk,15

	PRISM_ nsp/3,flightWidth,
		get(nsp)

	IF ABS(riserCoverThk)>0.001 THEN
		FOR t=1 to nRisers2ndRun
		ADD (t-1)*td2,(t-1)*treadHeight+treadThickness,0
		MATERIAL matRiser
		SECT_FILL typeFillRiser, penBackFillRiser, penFillRiser, penLineRiser

		prism_ 4,flightWidth,
			0,0,15,
			riserCoverThk,0,15,
			riserCoverThk,treadHeight-treadThickness,15,
			0,treadHeight-treadThickness,15
		DEL 1
		Next t
		MATERIAL matBase
		SECT_FILL typeFillStringer, penBackFillStringer, penFillStringer, penLineStringer
	ENDIF


	DEL 3

	!!!!!******************************      LANDING 2.

	ADD flightWidth+(nRisers2ndRun-1)*td2,(nRisers1stRun-1)*treadDepth+flightWidth,(nRisers1stRun+nRisers2ndRun)*treadHeight-treadThickness-stairSlabThk
	ROTz -90
	PRISM_ 6,stairSlabThk-treadHeight,
		0,				riserCoverThk,	8,
		flightWidth,	riserCoverThk,	9,
		flightWidth,	treadDepth,		9,
		flightWidth,	flightWidth,	9,
		0,				flightWidth,	11,
		0,				treadDepth,		8
	ADDz stairSlabThk-treadHeight
	PRISM_ 4,treadHeight,
		0,+riserCoverThk,14,
		flightWidth,+riserCoverThk,14,
		flightWidth,flightWidth,12,
		0,flightWidth,14
	DEL 3

	!!!!!******************************      3rd RUN

	ADD flightWidth+(nRisers2ndRun-1)*td2,(nRisers1stRun-1)*treadDepth,(nRisers1stRun+nRisers2ndRun)*treadHeight-treadThickness
	ROTx 90
	ROTy -90
	ADDz -flightWidth

	PUT 0,-stairSlabThk,8,
		0,0,15,
		riserCoverThk,0,15

	covthicky_t=riserCoverThk
	FOR i=1 to nRisers3rdRun
		if i=nRisers3rdRun then covthicky_t=0
		PUT (i-1)*treadDepth+riserCoverThk,i*treadHeight,15,
			(i)*treadDepth+covthicky_t,i*treadHeight,15
	NEXT i

	PUT (nRisers3rdRun)*treadDepth+covthicky_t,(nRisers3rdRun)*treadHeight,15,
		(nRisers3rdRun)*treadDepth+covthicky_t,(nRisers3rdRun)*treadHeight-stairSlabThk-(stairSlabThk*tan(ang/2))*tan(ang),15

	PRISM_ nsp/3,flightWidth,
		get(nsp)

	IF ABS(riserCoverThk)>0.001 THEN
		FOR t=1 to nRisers3rdRun
		ADD (t-1)*treadDepth,(t-1)*treadHeight+treadThickness,0
		MATERIAL matRiser
		SECT_FILL typeFillRiser, penBackFillRiser, penFillRiser, penLineRiser
		prism_ 4,flightWidth,
			0,0,15,
			riserCoverThk,0,15,
			riserCoverThk,treadHeight-treadThickness,15,
			0,treadHeight-treadThickness,15
		DEL 1
		Next t
		MATERIAL matBase
		SECT_FILL typeFillStringer, penBackFillStringer, penFillStringer, penLineStringer
	ENDIF

	DEL 4


ENDIF

! ==============================================================================
! Wood Base
! ==============================================================================

IF stairBaseType_m = 2 | stairBaseType_m = 3 THEN		! Wood, None
	MATERIAL matBase
	SECT_FILL typeFillStringer, penBackFillStringer, penFillStringer, penLineStringer

	ROTx 90
	ROTy 90

	IF stairBaseType_m = 2 THEN		! Wood
		PUT riserCoverThk,0,15
		FOR i=1 to nRisers1stRun-1
			PUT (i-1)*treadDepth+riserCoverThk,i*treadHeight-treadThickness,15,
				(i)*treadDepth+riserCoverThk,i*treadHeight-treadThickness,15
		NEXT i

		PUT (nRisers1stRun-1)*treadDepth+riserCoverThk,(nRisers1stRun-1)*treadHeight-treadThickness,10,
			(nRisers1stRun-1)*treadDepth+riserCoverThk,(nRisers1stRun)*treadHeight-treadThickness-stairSlabThk,8,
			nRisers1stRun*treadDepth+stairSlabThk*tan(ang/2),nRisers1stRun*treadHeight-treadThickness-stairSlabThk,15,
			(treadThickness+stairSlabThk)/sin(ang),0,15

		ADDz woodBaseOffset
		PRISM_ nsp/3,woodBaseThk,
			use(nsp)
		DEL 1

		ADDz flightWidth-woodBaseOffset-woodBaseThk
		PRISM_ nsp/3,woodBaseThk,
			get(nsp)
		DEL 1
	ENDIF

	IF ABS(riserCoverThk)>0.001 THEN
		FOR t=1 to nRisers1stRun
		ADD (t-1)*treadDepth,(t-1)*treadHeight,0
		MATERIAL matRiser
		SECT_FILL typeFillRiser, penBackFillRiser, penFillRiser, penLineRiser

		prism_ 4,flightWidth,
			0,0,15,
			riserCoverThk,0,15,
			riserCoverThk,treadHeight-treadThickness,15,
			0,treadHeight-treadThickness,15
		DEL 1
		Next t
		MATERIAL matBase
		SECT_FILL typeFillStringer, penBackFillStringer, penFillStringer, penLineStringer
	ENDIF

	DEL 2
	!!!!!******************************      LANDING 1.

	IF stairBaseType_m = 2 THEN		! Wood
		ADD 0,(nRisers1stRun-1)*treadDepth,(nRisers1stRun)*treadHeight-treadThickness-stairSlabThk
		PRISM_ 6,stairSlabThk-treadHeight,
			woodBaseOffset,+riserCoverThk,8,
			woodBaseOffset+woodBaseThk,+riserCoverThk,8,
			woodBaseOffset+woodBaseThk,stairSlabThk*tan(ang/2)+treadDepth,9,
			woodBaseOffset+woodBaseThk,flightWidth,11,
			woodBaseOffset,flightWidth,11,
			woodBaseOffset,stairSlabThk*tan(ang/2)+treadDepth,8

		PRISM_ 6,stairSlabThk-treadHeight,
			flightWidth-woodBaseOffset-woodBaseThk,+riserCoverThk,8,
			flightWidth-woodBaseOffset,+riserCoverThk,8,
			flightWidth-woodBaseOffset,stairSlabThk*tan(ang/2)+treadDepth,9,
			flightWidth-woodBaseOffset,flightWidth,11,
			flightWidth-woodBaseOffset-woodBaseThk,flightWidth,11,
			flightWidth-woodBaseOffset-woodBaseThk,stairSlabThk*tan(ang/2)+treadDepth,8

		ADDz stairSlabThk-treadHeight
		PRISM_ 4,treadHeight,
			woodBaseOffset,+riserCoverThk,14,
			woodBaseOffset+woodBaseThk,+riserCoverThk,14,
			woodBaseOffset+woodBaseThk,flightWidth,14,
			woodBaseOffset,flightWidth,14

		PRISM_ 4,treadHeight,
			flightWidth-woodBaseOffset-woodBaseThk,+riserCoverThk,14,
			flightWidth-woodBaseOffset,+riserCoverThk,14,
			flightWidth-woodBaseOffset,flightWidth,14,
			flightWidth-woodBaseOffset-woodBaseThk,flightWidth,14

		DEL 2
	ENDIF
	!!!!!******************************      2nd RUN
	ADD flightWidth,(nRisers1stRun-1)*treadDepth,nRisers1stRun*treadHeight-treadThickness
	ROTx 90
	ADDz -flightWidth

	IF stairBaseType_m = 2 THEN		! Wood
		PUT 0,-stairSlabThk,15,
			-woodBaseOffset,-stairSlabThk,15,
			-woodBaseOffset,0,15,
			riserCoverThk,0,15

		FOR i=1 to nRisers2ndRun
			PUT (i-1)*td2+riserCoverThk,i*treadHeight,15,
				(i)*td2+riserCoverThk,i*treadHeight,15
		NEXT i

		PUT (nRisers2ndRun)*td2,(nRisers2ndRun)*treadHeight,13,
			(nRisers2ndRun-1)*td2+flightWidth,(nRisers2ndRun)*treadHeight,15,
			(nRisers2ndRun-1)*td2+flightWidth,(nRisers2ndRun)*treadHeight-stairSlabThk,15,
			(nRisers2ndRun)*td2+stairSlabThk*tan(ang/2),(nRisers2ndRun)*treadHeight-stairSlabThk,15,
			(nRisers2ndRun)*td2,(nRisers2ndRun)*treadHeight-stairSlabThk,15

		ADDz woodBaseOffset
		PRISM_ nsp/3,woodBaseThk,
			use(nsp)
		DEL 1
		ADDz flightWidth-woodBaseOffset-woodBaseThk
		PRISM_ nsp/3,woodBaseThk,
			get(nsp)
		DEL 1
	ENDIF

	IF ABS(riserCoverThk)>0.001 THEN
		FOR t=1 to nRisers2ndRun
		ADD (t-1)*td2,(t-1)*treadHeight+treadThickness,0
		MATERIAL matRiser
		SECT_FILL typeFillRiser, penBackFillRiser, penFillRiser, penLineRiser

		prism_ 4,flightWidth,
			0,0,15,
			riserCoverThk,0,15,
			riserCoverThk,treadHeight-treadThickness,15,
			0,treadHeight-treadThickness,15
		DEL 1
		Next t
		MATERIAL matBase
		SECT_FILL typeFillStringer, penBackFillStringer, penFillStringer, penLineStringer
	ENDIF

	DEL 3

	!!!!!******************************      3rd RUN
	ADD a-flightWidth,(nRisers1stRun-1)*treadDepth,(nRisers1stRun+nRisers2ndRun)*treadHeight-treadThickness
	ROTx 90
	ROTy -90
	ADDz -flightWidth

	IF stairBaseType_m = 2 THEN		! Wood
		PUT 0,-stairSlabThk,15,
			-woodBaseOffset,-stairSlabThk,15,
			-woodBaseOffset,0,15,
			riserCoverThk,0,15

		covthicky_t=riserCoverThk
		FOR i=1 to nRisers3rdRun
			if i=nRisers3rdRun then covthicky_t=0
			PUT (i-1)*treadDepth+riserCoverThk,i*treadHeight,15,
				(i)*treadDepth+covthicky_t,i*treadHeight,15
		NEXT i



		PUT (nRisers3rdRun)*treadDepth+covthicky_t,(nRisers3rdRun)*treadHeight,15,
			(nRisers3rdRun)*treadDepth+covthicky_t,(nRisers3rdRun)*treadHeight-stairSlabThk,15

		ADDz woodBaseOffset
		PRISM_ nsp/3,woodBaseThk,
			use(nsp)
		DEL 1
		ADDz flightWidth-woodBaseOffset-woodBaseThk
		PRISM_ nsp/3,woodBaseThk,
			get(nsp)
		DEL 1
	ENDIF

	IF ABS(riserCoverThk)>0.001 THEN
		FOR t=1 to nRisers3rdRun
		ADD (t-1)*treadDepth,(t-1)*treadHeight+treadThickness,0
		MATERIAL matRiser
		SECT_FILL typeFillRiser, penBackFillRiser, penFillRiser, penLineRiser
		prism_ 4,flightWidth,
			0,0,15,
			riserCoverThk,0,15,
			riserCoverThk,treadHeight-treadThickness,15,
			0,treadHeight-treadThickness,15
		DEL 1
		Next t
		MATERIAL matBase
		SECT_FILL typeFillStringer, penBackFillStringer, penFillStringer, penLineStringer
	ENDIF
	DEL 4

ENDIF

DEL 1

! ==============================================================================
! Treads
! ==============================================================================
MATERIAL matTread
SECT_FILL typeFillTread, penBackFillTread, penFillTread, penLineTread


IF treadThickness>0.0001 THEN
	!!!!!******************************    1st run
	FOR i=1 TO nRisers1stRun-1
	  ADD 0,-nosing+(i-1)*treadDepth,(i*treadHeight)-treadThickness
		base
		BLOCK flightWidth,treadDepth+nosing+riserCoverThk,treadThickness
		vert 0, 0, 0 !#1
		vert 1, 0, 0 !#2
		vert 0, 1, 0 !#3
		vert 0, 0, 1 !#4
		coor 2, -1, -2,-3, -4
		body -1
	  DEL 1
	NEXT i

	!!!!!******************************    treads on Landing 1.

	ADD 0,-nosing+(nRisers1stRun-1)*treadDepth,nRisers1stRun*treadHeight-treadThickness
	base
	BLOCK flightWidth+riserCoverThk,flightWidth+nosing,treadThickness
	vert 0, 0, 0 !#1
	vert 1, 0, 0 !#2
	vert 0, 1, 0 !#3
	vert 0, 0, 1 !#4
	coor 2, -1, -2,-3, -4
	body -1
	DEL 1

	!!!!!******************************    2nd run
	ADD flightWidth,b-gapToFirstTread,(nRisers1stRun)*treadHeight-treadThickness
	ROTz -90
	 FOR i=1 TO nRisers2ndRun-1
	  ADD 0,-nosing+(i-1)*td2,(i*treadHeight)
		base
		BLOCK flightWidth,td2+nosing+riserCoverThk,treadThickness
		vert 0, 0, 0 !#1
		vert 1, 0, 0 !#2
		vert 0, 1, 0 !#3
		vert 0, 0, 1 !#4
		coor 2, -1, -2,-3, -4
		body -1
	  DEL 1
	 NEXT i
	DEL 2

	!!!!!******************************    treads on Landing 2.

	ADD a-flightWidth-nosing,b-flightWidth-riserCoverThk,(nRisers1stRun+nRisers2ndRun)*treadHeight-treadThickness
	base
	BLOCK flightWidth+nosing,flightWidth+riserCoverThk,treadThickness
	vert 0, 0, 0 !#1
	vert 1, 0, 0 !#2
	vert 0, 1, 0 !#3
	vert 0, 0, 1 !#4
	coor 2, -1, -2,-3, -4
	body -1
	DEL 1

	!!!!!******************************    3rd run
	ADD a,b-flightWidth,(nRisers1stRun+nRisers2ndRun)*treadHeight-treadThickness
	ROTz 180
	covthicky_t=riserCoverThk
	 FOR i=1 TO nRisers3rdRun
	  if i=nRisers3rdRun then covthicky_t=0
	  ADD 0,-nosing+(i-1)*treadDepth,(i*treadHeight)
		base
		BLOCK flightWidth,treadDepth+nosing+covthicky_t,treadThickness
		vert 0, 0, 0 !#1
		vert 1, 0, 0 !#2
		vert 0, 1, 0 !#3
		vert 0, 0, 1 !#4
		coor 2, -1, -2,-3, -4
		body -1
	  DEL 1
	 NEXT i
	DEL 2
ENDIF


! ==============================================================================
! HANDRAILS
! ==============================================================================
rightRailOffset = rightRailOffset
leftRailOffset = leftRailOffset
material matPost

! ------------------------------------------------------------------------------
! Left rail
! ------------------------------------------------------------------------------

IF rail_m = 3 | rail_m = 1 then		! Left, Both
	if bSameRails then
		leftRailType_m = rightRailType_m
		leftWireType_m = rightWireType_m
	endif

	ADD leftRailOffset+leftRailFrameThk/2,-leftRailOvhgBottom,-leftRailOvhgBottom*tan(ang)+treadHeight
	ROTz 90

	lraSimple=(nRisers1stRun-1)*treadDepth+leftRailOvhgBottom
	lraComplex=(nRisers1stRun-2)*treadDepth
	additionXComplex=leftRailOvhgBottom+treadDepth/2
	additionZComplex=leftRailOvhgBottom*tan(ang)
	hrovL=treadDepth/2+leftRailOvhgBottom
	hrovR=treadDepth/2
	postNumber = max(2,(nRisers1stRun)/2+1)
	railAngle	= ang
	side = SIDE_LEFT
	gosub "callRailsForStair"

	DEL 2

	! ------------ POST & Rail on the landing (left side_1) ------------

	ADD leftRailOffset+leftRailFrameThk/2,(nRisers1stRun-1)*treadDepth,(nRisers1stRun)*treadHeight
	ROTz 90

	lraSimple=flightWidth-leftRailOffset-leftRailFrameThk
	lraComplex=flightWidth-leftRailOffset-leftRailFrameThk
	hrovL=leftRailPostSize/2
	hrovR=-leftRailPostSize/2
	postNumber = max(2,(flightWidth-leftRailOffset-treadDepth)/0.5+1)
	side = SIDE_LEFT
	gosub "callRailsForLanding"

	DEL 2

	! ------------ POST & Rail on the landing (left side_2) ------------
	ADD leftRailOffset,b-leftRailOffset-leftRailFrameThk/2-gapToFirstTread,(nRisers1stRun)*treadHeight

	IF flightWidth-leftRailOffset-td2>2*leftRailFrameThk then
		IF leftRailType_m > 0 and leftRailType_m < 7 THEN
			lraSimple=flightWidth-leftRailOffset-td2
			lraComplex=flightWidth-leftRailOffset-leftRailFrameThk
			hrovL=leftRailPostSize/2
			hrovR=-leftRailPostSize/2
			postNumber = max(2,(flightWidth-leftRailOffset-treadDepth)/0.5+1)
			side = SIDE_LEFT
			gosub "callRailsForLanding"
		endif
	ENDIF

	IF leftRailType_m = 7 | leftRailType_m = 8 | leftRailType_m = 9 | leftRailType_m = 10 THEN
		if leftRailType_m = 9 and (flightWidth-leftRailOffset-leftRailPostSize-td2<max(treadDepth/2,0.2)) then
			add 0,-leftRailFrameThk/2,leftRailHeight+leftRailDist-leftRailFrameThk
			block flightWidth-leftRailOffset-td2,leftRailFrameThk,leftRailFrameThk
			del 1
		else
			lraSimple=flightWidth-leftRailOffset-leftRailPostSize-td2
			lraComplex=flightWidth-leftRailOffset-leftRailPostSize-td2
			hrovL=leftRailPostSize/2
			hrovR=leftRailPostSize/2
			postNumber = max(2,(flightWidth-leftRailOffset-treadDepth)/0.5+1)
			side = SIDE_LEFT
			gosub "callRailsForLanding"
		endif
	endif

	DEL 1

	! ------------ Rail on 2nd Run ------------

	ADD flightWidth-td2,b-leftRailOffset-leftRailFrameThk/2-gapToFirstTread,(nRisers1stRun)*treadHeight

	lraSimple=(nRisers2ndRun)*td2
	lraComplex=(nRisers2ndRun-1)*td2
	additionXComplex=td2/2
	additionZComplex=0
	hrovL=td2/2
	hrovR=td2/2
	postNumber = max(2,(nRisers2ndRun-1)/2+1)
	railAngle	= ang2
	side = SIDE_LEFT
	gosub "callRailsForStair"

	DEL 1

	! ------------ POST & Rail on the landing (left side_1) ------------

	ADD a-flightWidth,b-leftRailOffset-leftRailFrameThk/2,(nRisers1stRun+nRisers2ndRun)*treadHeight
	ROTz 0

	lraSimple=flightWidth-leftRailOffset-leftRailFrameThk
	lraComplex=flightWidth-leftRailOffset-leftRailFrameThk
	hrovL=leftRailPostSize/2
	hrovR=-leftRailPostSize/2
	postNumber = max(2,(flightWidth-leftRailOffset-leftRailFrameThk)/0.5+1)
	side = SIDE_LEFT
	gosub "callRailsForLanding"

	DEL 2

	! ------------ POST & Rail on the landing (left side_2) ------------

	ADD a-leftRailOffset-leftRailFrameThk/2,b-leftRailOffset,(nRisers1stRun+nRisers2ndRun)*treadHeight
	ROTz -90

	IF flightWidth-leftRailOffset-treadDepth>2*leftRailFrameThk THEN
		IF leftRailType_m > 0 and leftRailType_m < 8 THEN
			lraSimple=flightWidth-leftRailOffset-treadDepth
			lraComplex=flightWidth-leftRailOffset-treadDepth-leftRailPostSize
			hrovL=leftRailPostSize/2
			hrovR=leftRailPostSize/2
			postNumber = max(2,(flightWidth-leftRailOffset-treadDepth)/0.5+1)
			side = SIDE_LEFT
			gosub "callRailsForLanding"
		endif
	endif
	IF leftRailType_m = 8 | leftRailType_m = 9 | leftRailType_m = 10 THEN
		if leftRailType_m = 9 and (flightWidth-leftRailOffset-leftRailPostSize-td2<max(treadDepth/2,0.2)) then
			add 0,-leftRailFrameThk/2,leftRailHeight+leftRailDist-leftRailFrameThk
			block flightWidth-leftRailOffset-treadDepth,leftRailFrameThk,leftRailFrameThk
			del 1
		else
			lraSimple=flightWidth-leftRailOffset-leftRailPostSize-treadDepth
			lraComplex=flightWidth-leftRailOffset-leftRailPostSize-treadDepth
			hrovL=leftRailPostSize/2
			hrovR=leftRailPostSize/2
			postNumber = max(2,(flightWidth-leftRailOffset-treadDepth)/0.5+1)
			side = SIDE_LEFT
			gosub "callRailsForLanding"
		endif
	endif

	DEL 2

	! ------------ Rail on 3rd Run ------------

	ADD a-leftRailOffset-leftRailFrameThk/2,b-flightWidth+treadDepth,(nRisers1stRun+nRisers2ndRun)*treadHeight
	ROTz -90

	lraSimple=(nRisers3rdRun+1)*treadDepth+leftRailOvhgTop
	lraComplex=(nRisers3rdRun)*treadDepth
	additionXComplex=treadDepth/2
	additionZComplex=0
	hrovL=treadDepth/2
	hrovR=treadDepth/2+leftRailOvhgTop
	postNumber = max(2,(nRisers3rdRun)/2+1)
	railAngle	= ang
	side = SIDE_LEFT
	gosub "callRailsForStair"

	DEL 2

	!!!!!!!!!!******** HOTSPOTS

	!!!!Bottom side
	HOTSPOT leftRailFrameThk/2+leftRailOffset,0,treadHeight+leftRailDist+leftRailHeight-leftRailOvhgBottom*tan(ang),unID,leftRailOvhgBottom, 1+128		: unID=unID+1
	HOTSPOT leftRailFrameThk/2+leftRailOffset,flightWidth-leftRailFrameThk/2-leftRailOffset,treadHeight+leftRailDist+leftRailHeight-leftRailOvhgBottom*tan(ang),unID,leftRailOvhgBottom, 3		: unID=unID+1
	HOTSPOT leftRailFrameThk/2+leftRailOffset,-leftRailOvhgBottom,treadHeight+leftRailDist+leftRailHeight-leftRailOvhgBottom*tan(ang),unID,leftRailOvhgBottom, 2		: unID=unID+1

	HOTSPOT leftRailFrameThk/2,-leftRailOvhgBottom,treadHeight+leftRailDist-leftRailOvhgBottom*tan(ang),unID,leftRailOffset, 1+128		: unID=unID+1
	HOTSPOT leftRailFrameThk/2+0.1,-leftRailOvhgBottom,treadHeight+leftRailDist-leftRailOvhgBottom*tan(ang),unID,leftRailOffset, 3		: unID=unID+1
	HOTSPOT leftRailFrameThk/2+leftRailOffset,-leftRailOvhgBottom,treadHeight+leftRailDist-leftRailOvhgBottom*tan(ang),unID,leftRailOffset, 2		: unID=unID+1

	HOTSPOT leftRailFrameThk/2+leftRailOffset,-leftRailOvhgBottom,treadHeight-leftRailOvhgBottom*tan(ang),unID,leftRailDist, 1+128		: unID=unID+1
	HOTSPOT leftRailFrameThk/2+leftRailOffset,-leftRailOvhgBottom,treadHeight-0.1-leftRailOvhgBottom*tan(ang),unID,leftRailDist, 3		: unID=unID+1
	HOTSPOT leftRailFrameThk/2+leftRailOffset,-leftRailOvhgBottom,treadHeight+leftRailDist-leftRailOvhgBottom*tan(ang),unID,leftRailDist, 2		: unID=unID+1

	HOTSPOT leftRailFrameThk/2+leftRailOffset,-leftRailOvhgBottom,treadHeight-leftRailOvhgBottom*tan(ang)+leftRailDist,unID,leftRailHeight, 1+128		: unID=unID+1
	HOTSPOT leftRailFrameThk/2+leftRailOffset,-leftRailOvhgBottom,treadHeight-leftRailOvhgBottom*tan(ang)+leftRailDist-0.1,unID,leftRailHeight, 3		: unID=unID+1
	HOTSPOT leftRailFrameThk/2+leftRailOffset,-leftRailOvhgBottom,treadHeight-leftRailOvhgBottom*tan(ang)+leftRailDist+leftRailHeight,unID,leftRailHeight, 2	: unID=unID+1

	!!!!Top side
	HOTSPOT a-leftRailOffset-leftRailFrameThk/2,b-flightWidth-nRisers3rdRun*treadDepth,(nRisers+1)*treadHeight+leftRailOvhgTop*tan(ang)+leftRailHeight+leftRailDist,unID,leftRailOvhgTop, 1+128			: unID=unID+1
	HOTSPOT a-leftRailOffset-leftRailFrameThk/2,b-flightWidth-nRisers3rdRun*treadDepth+0.1,(nRisers+1)*treadHeight+leftRailOvhgTop*tan(ang)+leftRailHeight+leftRailDist,unID,leftRailOvhgTop, 3			: unID=unID+1
	HOTSPOT a-leftRailOffset-leftRailFrameThk/2,b-flightWidth-nRisers3rdRun*treadDepth-leftRailOvhgTop,(nRisers+1)*treadHeight+leftRailOvhgTop*tan(ang)+leftRailHeight+leftRailDist,unID,leftRailOvhgTop, 2			: unID=unID+1

	HOTSPOT a-leftRailFrameThk/2,b-flightWidth-nRisers3rdRun*treadDepth-leftRailOvhgTop,(nRisers+1)*treadHeight+leftRailDist+leftRailOvhgTop*tan(ang),unID,leftRailOffset, 1+128		: unID=unID+1
	HOTSPOT a-leftRailFrameThk/2-0.1,b-flightWidth-nRisers3rdRun*treadDepth-leftRailOvhgTop,(nRisers+1)*treadHeight+leftRailDist+leftRailOvhgTop*tan(ang),unID,leftRailOffset, 3		: unID=unID+1
	HOTSPOT a-leftRailFrameThk/2-leftRailOffset,b-flightWidth-nRisers3rdRun*treadDepth-leftRailOvhgTop,(nRisers+1)*treadHeight+leftRailDist+leftRailOvhgTop*tan(ang),unID,leftRailOffset, 2		: unID=unID+1

	HOTSPOT a-leftRailOffset-leftRailFrameThk/2,b-flightWidth-nRisers3rdRun*treadDepth-leftRailOvhgTop,(nRisers+1)*treadHeight+(leftRailOvhgTop)*tan(ang),unID,leftRailDist, 1+128		: unID=unID+1
	HOTSPOT a-leftRailOffset-leftRailFrameThk/2,b-flightWidth-nRisers3rdRun*treadDepth-leftRailOvhgTop,(nRisers+1)*treadHeight+(leftRailOvhgTop)*tan(ang)-0.1,unID,leftRailDist, 3		: unID=unID+1
	HOTSPOT a-leftRailOffset-leftRailFrameThk/2,b-flightWidth-nRisers3rdRun*treadDepth-leftRailOvhgTop,(nRisers+1)*treadHeight+(leftRailOvhgTop)*tan(ang)+leftRailDist,unID,leftRailDist, 2		: unID=unID+1

	HOTSPOT a-leftRailOffset-leftRailFrameThk/2,b-flightWidth-nRisers3rdRun*treadDepth-leftRailOvhgTop,(nRisers+1)*treadHeight+leftRailOvhgTop*tan(ang)+leftRailDist,unID,leftRailHeight, 1+128			: unID=unID+1
	HOTSPOT a-leftRailOffset-leftRailFrameThk/2,b-flightWidth-nRisers3rdRun*treadDepth-leftRailOvhgTop,(nRisers+1)*treadHeight+leftRailOvhgTop*tan(ang)+leftRailDist-0.1,unID,leftRailHeight, 3			: unID=unID+1
	HOTSPOT a-leftRailOffset-leftRailFrameThk/2,b-flightWidth-nRisers3rdRun*treadDepth-leftRailOvhgTop,(nRisers+1)*treadHeight+leftRailOvhgTop*tan(ang)+leftRailHeight+leftRailDist,unID,leftRailHeight, 2			: unID=unID+1
ENDIF


! ------------------------------------------------------------------------------
! Right rail
! ------------------------------------------------------------------------------

IF rail_m = 2 | rail_m = 1 then		! Right, Both
	ADD flightWidth-rightRailOffset-rightRailFrameThk/2,-rightRailOvhgBottom,-rightRailOvhgBottom*tan(ang)+treadHeight
	ROTz 90

	lraSimple=(nRisers1stRun-1)*treadDepth+rightRailOvhgBottom+min(0,rightRailOffset)
	lraComplex=(nRisers1stRun-2)*treadDepth+min(0,rightRailOffset)
	additionXComplex=rightRailOvhgBottom+treadDepth/2
	additionZComplex=rightRailOvhgBottom*tan(ang)
	hrovL=treadDepth/2+rightRailOvhgBottom
	hrovR=treadDepth/2+min(0,rightRailOffset)*0
	postNumber = ((nRisers-1))/4
	railAngle	= ang
	side = SIDE_RIGHT
	gosub "callRailsForStair"

	DEL 2

	! ---------- POST & Rail on the landing (right side_1) ------------
	ADD flightWidth-rightRailFrameThk-rightRailOffset,(nRisers1stRun-1)*treadDepth+rightRailOffset,(nRisers1stRun)*treadHeight+min(0,rightRailOffset*tan(ang))
		BLOCK rightRailFrameThk,rightRailFrameThk,rightRailDist+rightRailHeight+treadDepth*tan(ang)-min(rightRailOffset*tan(ang),treadHeight)
	DEL 1

	IF rightRailOffset>0.05 THEN
		IF rightRailOffset<0.2 THEN
			IF rightRailType_m = 3 | rightRailType_m = 7 | rightRailType_m = 8 | rightRailType_m = 9 | rightRailType_m = 10 THEN
			  hight=rightRailFrameThk
			  if rightRailType_m = 3 then hight=0.025
			  ADD flightWidth-rightRailOffset,(nRisers1stRun-1)*treadDepth,(nRisers1stRun)*treadHeight+rightRailHeight+rightRailDist-hight
			  ROTz 90
			  MATERIAL matHandrail
				BLOCK rightRailOffset,rightRailFrameThk,hight
			  DEL 2
			ELSE
				IF rightRailType_m = 2 THEN
				  ADD flightWidth-rightRailOffset-rightRailFrameThk/2,(nRisers1stRun-1)*treadDepth,(nRisers1stRun)*treadHeight
				  ROTz 90
					lraSimple=rightRailOffset
					lraComplex=rightRailOffset
					hrovL=rightRailPostSize/2
					hrovR=-rightRailPostSize/2
					postNumber = max(2,rightRailOffset/0.5)
					side = SIDE_RIGHT
					gosub "callRailsForLanding"
				DEL 2
				ELSE
					ADD flightWidth-rightRailOffset,(nRisers1stRun-1)*treadDepth,(nRisers1stRun)*treadHeight+rightRailDist
					ROTz 90
					MATERIAL matHandrail
					BLOCK rightRailOffset,rightRailFrameThk,rightRailHeight
					DEL 2
				ENDIF
			ENDIF
		ELSE
			ADD flightWidth-rightRailOffset-rightRailFrameThk/2,(nRisers1stRun-1)*treadDepth,(nRisers1stRun)*treadHeight
			ROTz 90

			IF rightRailType_m = 8 | rightRailType_m = 9 | rightRailType_m = 10 THEN
				ADD 0,-rightRailFrameThk/2,rightRailDist+rightRailHeight-rightRailFrameThk
				MATERIAL matHandrail
				IF rightRailOffset>0 then BLOCK rightRailOffset,rightRailFrameThk,rightRailFrameThk
				DEL 1
			else
				lraSimple=rightRailOffset
				lraComplex=rightRailOffset
				hrovL=rightRailPostSize/2
				hrovR=-rightRailPostSize/2
				postNumber = max(2,rightRailOffset/0.5)
				side = SIDE_RIGHT
				gosub "callRailsForLanding"
			ENDIF

			DEL 2
		ENDIF
	ENDIF

	! ------------ POST & Rail on the landing (right side_2) ------------
	IF rightRailOffset*tan(ang)>treadHeight THEN
		IF rightRailOffset<0.2 & rightRailOffset>0.05 THEN
			IF rightRailType_m = 3 | rightRailType_m = 7 | rightRailType_m = 8 | rightRailType_m = 9 | rightRailType_m = 10 THEN
				hight=rightRailFrameThk
				if rightRailType_m = 3 then hight=0.025
				ADD flightWidth-rightRailOffset,(nRisers1stRun-1)*treadDepth+rightRailOffset,(nRisers1stRun)*treadHeight+rightRailHeight+rightRailDist-hight
				ROTz 0
				MATERIAL matHandrail
				BLOCK rightRailOffset,rightRailFrameThk,hight
				DEL 2
			ELSE
				IF rightRailType_m = 2 THEN
					ADD flightWidth-rightRailOffset-rightRailFrameThk/2,(nRisers1stRun-1)*treadDepth,(nRisers1stRun)*treadHeight
					ROTz 90

					lraSimple=rightRailOffset-treadDepth
					lraComplex=rightRailOffset
					hrovL=rightRailPostSize/2
					hrovR=-rightRailPostSize/2
					postNumber = max(2,rightRailOffset/0.5)
					side = SIDE_RIGHT
					gosub "callRailsForLanding"

					DEL 2
				ELSE
					ADD flightWidth-rightRailOffset,(nRisers1stRun-1)*treadDepth,(nRisers1stRun)*treadHeight+rightRailDist
					ROTz 90
					MATERIAL matHandrail
					BLOCK rightRailOffset,rightRailFrameThk,rightRailHeight
					DEL 2
				ENDIF
			ENDIF
		ELSE
			ADD flightWidth-rightRailOffset,(nRisers1stRun-1)*treadDepth+rightRailOffset+rightRailFrameThk/2,(nRisers1stRun)*treadHeight
			ROTz 0

			IF rightRailOffset>treadDepth+0.08 & rightRailOffset-treadDepth>2*rightRailFrameThk+0.001 then
				IF rightRailType_m = 8 | rightRailType_m = 9 | rightRailType_m = 10 THEN
					ADD 0,-rightRailFrameThk/2,rightRailDist+rightRailHeight-rightRailFrameThk
					MATERIAL matHandrail
					BLOCK rightRailOffset-treadDepth,rightRailFrameThk,rightRailFrameThk
					DEL 1
				else
					lraSimple=rightRailOffset-treadDepth
					lraComplex=rightRailOffset-treadDepth
					hrovL=-rightRailPostSize/2
					hrovR=rightRailPostSize/2
					postNumber = max(2,rightRailOffset/0.5)
					side = SIDE_RIGHT
					gosub "callRailsForLanding"
				ENDIF
			ENDIF

			DEL 2
		ENDIF
	ENDIF

	!!!!!!!!!!******** Railing on the 2nd run
	ADD flightWidth-min(rightRailOffset,td2),(nRisers1stRun-1)*treadDepth+rightRailFrameThk/2+rightRailOffset,(nRisers1stRun+1)*treadHeight-min(rightRailOffset,td2)*tan(ang)
	ROTz 0

	lraSimple=(nRisers2ndRun-1)*td2+min(rightRailOffset,td2)+min(0,rightRailOffset)
	lraComplex=(nRisers2ndRun-2)*td2+min(0,rightRailOffset)
	additionXComplex=td2/2+min(rightRailOffset,td2)
	additionZComplex=min(rightRailOffset*tan(ang2),treadHeight)
	hrovL=td2/2+min(rightRailOffset,td2)
	hrovR=td2/2
	postNumber=max(2,(nRisers2ndRun-2)/2)
	railAngle	= ang2
	side = SIDE_RIGHT
	gosub "callRailsForStair"

	DEL 2

	! ------------ POST & Rail on the landing 2. (right side_1) ------------
	ADD a-flightWidth+rightRailOffset,(nRisers1stRun-1)*treadDepth+rightRailOffset,(nRisers1stRun+nRisers2ndRun)*treadHeight+min(0,rightRailOffset*tan(ang))
		BLOCK rightRailFrameThk,rightRailFrameThk,rightRailDist+rightRailHeight+treadDepth*tan(ang)-min(rightRailOffset*tan(ang),treadHeight)
	DEL 1

	IF rightRailOffset>0.05 THEN
		IF rightRailOffset<0.2 THEN
			IF rightRailType_m = 3 | rightRailType_m = 7 | rightRailType_m = 8 | rightRailType_m = 9 | rightRailType_m = 10 THEN
				hight=rightRailFrameThk
				if rightRailType_m = 3 then hight=0.025
				ADD a-flightWidth,(nRisers1stRun-1)*treadDepth+rightRailOffset,(nRisers1stRun+nRisers2ndRun)*treadHeight+rightRailHeight+rightRailDist-hight
				ROTz 0
				MATERIAL matHandrail
				BLOCK rightRailOffset,rightRailFrameThk,hight
				DEL 2
			ELSE
				IF rightRailType_m = 2 THEN
				  ADD a-flightWidth,(nRisers1stRun-1)*treadDepth+rightRailOffset+rightRailFrameThk/2,(nRisers1stRun+nRisers2ndRun)*treadHeight
				  ROTz 0
					lraSimple=rightRailOffset
					lraComplex=rightRailOffset
					hrovL=rightRailPostSize/2
					hrovR=-rightRailPostSize/2
					postNumber = max(2,rightRailOffset/0.5)
					side = SIDE_RIGHT
					gosub "callRailsForLanding"
				DEL 2
				ELSE
					ADD a-flightWidth,(nRisers1stRun-1)*treadDepth+rightRailOffset,(nRisers1stRun+nRisers2ndRun)*treadHeight+rightRailDist+treadThickness
					ROTz 0
					MATERIAL matHandrail
					BLOCK rightRailOffset,rightRailFrameThk,rightRailHeight
					DEL 2
				ENDIF
			ENDIF
		ELSE
			ADD a-flightWidth+rightRailOffset,(nRisers1stRun-1)*treadDepth+rightRailOffset+rightRailFrameThk/2,(nRisers1stRun+nRisers2ndRun)*treadHeight
			ROTz 180

			IF rightRailType_m = 8 | rightRailType_m = 9 | rightRailType_m = 10 THEN
				ADD 0,-rightRailFrameThk/2,rightRailDist+rightRailHeight-rightRailFrameThk
				MATERIAL matHandrail
				IF rightRailOffset>0 then BLOCK rightRailOffset,rightRailFrameThk,rightRailFrameThk
				DEL 1
			ELSE
				lraSimple=rightRailOffset
				lraComplex=rightRailOffset
				hrovL=rightRailPostSize/2
				hrovR=-rightRailPostSize/2
				postNumber = max(2,rightRailOffset/0.5)
				side = SIDE_RIGHT
				gosub "callRailsForLanding"
			ENDIF

			DEL 2
		ENDIF
	ENDIF

	! ------------ POST & Rail on the landing (right side_2) ------------
	IF rightRailOffset*tan(ang)>treadHeight THEN
		IF rightRailOffset<0.2 & rightRailOffset>0.05 THEN
			IF rightRailType_m = 3 | rightRailType_m = 7 | rightRailType_m = 8 | rightRailType_m = 9 | rightRailType_m = 10 THEN
			  hight=rightRailFrameThk
			  if rightRailType_m = 3 then hight=0.025
			  ADD flightWidth-rightRailOffset,(nRisers1stRun-1)*treadDepth+rightRailOffset,(nRisers1stRun)*treadHeight+rightRailHeight+rightRailDist-hight
			  ROTz 0
			  MATERIAL matHandrail
				BLOCK rightRailOffset,rightRailFrameThk,hight
			  DEL 2
			ELSE
				IF rightRailType_m = 2 THEN
				  ADD flightWidth-rightRailOffset-rightRailFrameThk/2,(nRisers1stRun-1)*treadDepth,(nRisers1stRun)*treadHeight
				  ROTz 90
					lraSimple=rightRailOffset-treadDepth
					lraComplex=rightRailOffset
					hrovL=rightRailPostSize/2
					hrovR=-rightRailPostSize/2
					postNumber = max(2,rightRailOffset/0.5)
					side = SIDE_RIGHT
					gosub "callRailsForLanding"
				DEL 2
				ELSE
					ADD flightWidth-rightRailOffset,(nRisers1stRun-1)*treadDepth,(nRisers1stRun)*treadHeight+rightRailDist
					ROTz 90
					MATERIAL matHandrail
					 BLOCK rightRailOffset,rightRailFrameThk,rightRailHeight
					DEL 2
				ENDIF
			ENDIF
		ELSE
			ADD flightWidth-rightRailOffset,(nRisers1stRun-1)*treadDepth+rightRailOffset+rightRailFrameThk/2,(nRisers1stRun)*treadHeight
			ROTz 0

			IF rightRailOffset>treadDepth+0.08 & rightRailOffset-treadDepth>2*rightRailFrameThk+0.001 then
				IF rightRailType_m = 8 | rightRailType_m = 9 | rightRailType_m = 10 THEN
					ADD 0,-rightRailFrameThk/2,rightRailDist+rightRailHeight-rightRailFrameThk
					MATERIAL matHandrail
					BLOCK rightRailOffset-treadDepth,rightRailFrameThk,rightRailFrameThk
					DEL 1
				else
					lraSimple=rightRailOffset-treadDepth
					lraComplex=rightRailOffset-treadDepth
					hrovL=-rightRailPostSize/2
					hrovR=rightRailPostSize/2
					postNumber = max(2,rightRailOffset/0.5)
					side = SIDE_RIGHT
					gosub "callRailsForLanding"
				ENDIF
			ENDIF

			DEL 2
		ENDIF
	ENDIF

	!!!!!!!!!!******** Railing on the 3rd run

	ADD a-flightWidth+rightRailOffset+rightRailFrameThk/2,(nRisers1stRun-1)*treadDepth+min(rightRailOffset,treadDepth),(nRisers1stRun+nRisers2ndRun+1)*treadHeight-min(rightRailOffset,treadDepth)*tan(ang)
	ROTz -90

	lraSimple=(nRisers3rdRun)*treadDepth+min(rightRailOffset,treadDepth)+rightRailOvhgTop
	lraComplex=(nRisers3rdRun-1)*treadDepth
	additionXComplex=treadDepth/2+min(rightRailOffset,treadDepth)
	additionZComplex=min(rightRailOffset*tan(ang),treadHeight)
	hrovL=treadDepth/2+min(rightRailOffset,treadDepth)
	hrovR=treadDepth/2+rightRailOvhgTop
	postNumber = max(2,(nRisers3rdRun-1)/(3*treadDepth))
	railAngle	= ang
	side = SIDE_RIGHT
	gosub "callRailsForStair"

	DEL 2

	!!!!!!!!!!******** HOTSPOTS

	!!!!Bottom side
	HOTSPOT flightWidth-rightRailFrameThk/2-rightRailOffset,gapToFirstTread,treadHeight+rightRailDist+rightRailHeight-rightRailOvhgBottom*tan(ang),unID,rightRailOvhgBottom, 1+128		: unID=unID+1
	HOTSPOT flightWidth-rightRailFrameThk/2-rightRailOffset,gapToFirstTread+0.1,treadHeight+rightRailDist+rightRailHeight-rightRailOvhgBottom*tan(ang),unID,rightRailOvhgBottom, 3		: unID=unID+1
	HOTSPOT flightWidth-rightRailFrameThk/2-rightRailOffset,gapToFirstTread-rightRailOvhgBottom,treadHeight+rightRailDist+rightRailHeight-rightRailOvhgBottom*tan(ang),unID,rightRailOvhgBottom, 2		: unID=unID+1

	HOTSPOT flightWidth-rightRailFrameThk/2,gapToFirstTread-rightRailOvhgBottom,treadHeight+rightRailDist-rightRailOvhgBottom*tan(ang),unID,rightRailOffset, 1+128		: unID=unID+1
	HOTSPOT flightWidth-rightRailFrameThk/2-0.1,gapToFirstTread-rightRailOvhgBottom,treadHeight+rightRailDist-rightRailOvhgBottom*tan(ang),unID,rightRailOffset, 3		: unID=unID+1
	HOTSPOT flightWidth-rightRailFrameThk/2-rightRailOffset,gapToFirstTread-rightRailOvhgBottom,treadHeight+rightRailDist-rightRailOvhgBottom*tan(ang),unID,rightRailOffset, 2		: unID=unID+1

	HOTSPOT flightWidth-rightRailFrameThk/2-rightRailOffset,gapToFirstTread-rightRailOvhgBottom,treadHeight-rightRailOvhgBottom*tan(ang),unID,rightRailDist, 1+128		: unID=unID+1
	HOTSPOT flightWidth-rightRailFrameThk/2-rightRailOffset,gapToFirstTread-rightRailOvhgBottom,treadHeight-0.1-rightRailOvhgBottom*tan(ang),unID,rightRailDist, 3		: unID=unID+1
	HOTSPOT flightWidth-rightRailFrameThk/2-rightRailOffset,gapToFirstTread-rightRailOvhgBottom,treadHeight+rightRailDist-rightRailOvhgBottom*tan(ang),unID,rightRailDist, 2		: unID=unID+1

	HOTSPOT flightWidth-rightRailFrameThk/2-rightRailOffset,gapToFirstTread-rightRailOvhgBottom,treadHeight-rightRailOvhgBottom*tan(ang)+rightRailDist,unID,rightRailHeight, 1+128		: unID=unID+1
	HOTSPOT flightWidth-rightRailFrameThk/2-rightRailOffset,gapToFirstTread-rightRailOvhgBottom,treadHeight-rightRailOvhgBottom*tan(ang)+rightRailDist-0.1,unID,rightRailHeight, 3		: unID=unID+1
	HOTSPOT flightWidth-rightRailFrameThk/2-rightRailOffset,gapToFirstTread-rightRailOvhgBottom,treadHeight-rightRailOvhgBottom*tan(ang)+rightRailDist+rightRailHeight,unID,rightRailHeight, 2	: unID=unID+1

	!!!!Top side
	HOTSPOT a-flightWidth+rightRailOffset+rightRailFrameThk/2,b-flightWidth-nRisers3rdRun*treadDepth,(nRisers+1)*treadHeight+rightRailOvhgTop*tan(ang)+rightRailHeight+rightRailDist,unID,rightRailOvhgTop, 1+128			: unID=unID+1
	HOTSPOT a-flightWidth+rightRailOffset+rightRailFrameThk/2,b-flightWidth-nRisers3rdRun*treadDepth+0.1,(nRisers+1)*treadHeight+rightRailOvhgTop*tan(ang)+rightRailHeight+rightRailDist,unID,rightRailOvhgTop, 3			: unID=unID+1
	HOTSPOT a-flightWidth+rightRailOffset+rightRailFrameThk/2,b-flightWidth-nRisers3rdRun*treadDepth-rightRailOvhgTop,(nRisers+1)*treadHeight+rightRailOvhgTop*tan(ang)+rightRailHeight+rightRailDist,unID,rightRailOvhgTop, 2			: unID=unID+1

	HOTSPOT a-flightWidth+rightRailFrameThk/2,b-flightWidth-nRisers3rdRun*treadDepth-rightRailOvhgTop,(nRisers+1)*treadHeight+rightRailDist+rightRailOvhgTop*tan(ang),unID,rightRailOffset, 1+128		: unID=unID+1
	HOTSPOT a-flightWidth+rightRailFrameThk/2+0.1,b-flightWidth-nRisers3rdRun*treadDepth-rightRailOvhgTop,(nRisers+1)*treadHeight+rightRailDist+rightRailOvhgTop*tan(ang),unID,rightRailOffset, 3		: unID=unID+1
	HOTSPOT a-flightWidth+rightRailFrameThk/2+rightRailOffset,b-flightWidth-nRisers3rdRun*treadDepth-rightRailOvhgTop,(nRisers+1)*treadHeight+rightRailDist+rightRailOvhgTop*tan(ang),unID,rightRailOffset, 2		: unID=unID+1

	HOTSPOT a-flightWidth+rightRailFrameThk/2+rightRailOffset,b-flightWidth-nRisers3rdRun*treadDepth-rightRailOvhgTop,(nRisers+1)*treadHeight+(rightRailOvhgTop)*tan(ang),unID,rightRailDist, 1+128		: unID=unID+1
	HOTSPOT a-flightWidth+rightRailFrameThk/2+rightRailOffset,b-flightWidth-nRisers3rdRun*treadDepth-rightRailOvhgTop,(nRisers+1)*treadHeight+(rightRailOvhgTop)*tan(ang)-0.1,unID,rightRailDist, 3		: unID=unID+1
	HOTSPOT a-flightWidth+rightRailFrameThk/2+rightRailOffset,b-flightWidth-nRisers3rdRun*treadDepth-rightRailOvhgTop,(nRisers+1)*treadHeight+(rightRailOvhgTop)*tan(ang)+rightRailDist,unID,rightRailDist, 2		: unID=unID+1

	HOTSPOT a-flightWidth+rightRailFrameThk/2+rightRailOffset,b-flightWidth-nRisers3rdRun*treadDepth-rightRailOvhgTop,(nRisers+1)*treadHeight+rightRailOvhgTop*tan(ang)+rightRailDist,unID,rightRailHeight, 1+128			: unID=unID+1
	HOTSPOT a-flightWidth+rightRailFrameThk/2+rightRailOffset,b-flightWidth-nRisers3rdRun*treadDepth-rightRailOvhgTop,(nRisers+1)*treadHeight+rightRailOvhgTop*tan(ang)+rightRailDist-0.1,unID,rightRailHeight, 3			: unID=unID+1
	HOTSPOT a-flightWidth+rightRailFrameThk/2+rightRailOffset,b-flightWidth-nRisers3rdRun*treadDepth-rightRailOvhgTop,(nRisers+1)*treadHeight+rightRailOvhgTop*tan(ang)+rightRailHeight+rightRailDist,unID,rightRailHeight, 2			: unID=unID+1

ENDIF

end


! ==============================================================================
"callRailsForStair":
! ------------------------------------------------------------------------------
!	lraSimple
!	lraComplex
!	additionXComplex
!	additionZComplex
!	hrovL: rail overhang start
!	hrovR: rail overhang end
!	postNumber:   number of posts
!	side: SIDE_LEFT or SIDE_RIGHT
! ==============================================================================
	ani = railAngle
	additionXComplex = additionXComplex
	additionZComplex = additionZComplex
	if side = SIDE_LEFT then
		dsComplex = leftRailDist+treadDepth/2*tan(ang)
	else
		dsComplex = rightRailDist+treadDepth/2*tan(ang)
	endif

	gosub "callRails"
return


! ==============================================================================
"callRailsForLanding":
! ------------------------------------------------------------------------------
!	lraSimple
!	lraComplex
!	hrovL: rail overhang start
!	hrovR: rail overhang end
!	postNumber:   number of posts
!	side: SIDE_LEFT or SIDE_RIGHT
! ==============================================================================
	ani = 0
	additionZComplex = 0
	if side = SIDE_LEFT then
		additionXComplex = leftRailPostSize/2
		dsComplex = leftRailDist
	else
		additionXComplex = rightRailPostSize/2
		dsComplex = rightRailDist
	endif

	gosub "callRails"
return


! ==============================================================================
"callRails":
! ------------------------------------------------------------------------------
!	ani
!	additionXComplex
!	additionZComplex
!	dsComplex
!  ------------------
!	side: SIDE_LEFT or SIDE_RIGHT
!	lraSimple
!	lraComplex
!	hrovL: rail overhang start
!	hrovR: rail overhang end
!	postNumber:   number of posts
! ==============================================================================
	if side = SIDE_LEFT then
		railBarDepth		= leftRailBarDepth
		railBarDiam			= railBarDepth
		railHeight			= leftRailHeight
		railBarFillThk		= leftRailBarThk
		railFrameThk		= leftRailFrameThk
		railDist			= leftRailDist
		railType_m			= leftRailType_m
		railPostSize		= leftRailPostSize
		barNumber			= nBarsLeftRail
		railWireType		= leftWireType_m
		if leftRailType_m = RAIL_WIRED then
			railBarThk		= leftRailWireThk
			railBarDepth	= leftRailWireDepth
			railBarDiam		= leftRailWireDiam
		endif
	else
		railBarDepth		= rightRailBarDepth
		railBarDiam			= railBarDepth
		railHeight			= rightRailHeight
		railBarFillThk		= rightRailBarThk
		railFrameThk		= rightRailFrameThk
		railDist			= rightRailDist
		railType_m			= rightRailType_m
		railPostSize		= rightRailPostSize
		barNumber			= nBarsRightRail
		railWireType		= rightWireType_m
		if rightRailType_m = RAIL_WIRED then
			railBarThk		= rightRailWireThk
			railBarDepth	= rightRailWireDepth
			railBarDiam		= rightRailWireDiam
		endif
	endif

	call "stairRails_m" parameters	railType_m				= railType_m,
									iStairType				= 1,
									bEnableWired02Rail		= 0,
									bEnableNonVerticalRail	= 0,
									additionXComplex		= additionXComplex,
									additionZComplex		= additionZComplex,
									ptyp_m					= 1,
									ani						= ani,
									ab						= 0,
									rb						= 0,
									rom_m					= 1,
									rmm_m					= 1,
									lraSimple				= lraSimple,
									lraComplex				= lraComplex,
									railHeight				= railHeight,
									railHeightComplex		= dsComplex,
									railDist				= railDist,
									gs_detlevel_3D_m		= gs_detlevel_3D_m,
									gs_cont_pen				= gs_cont_pen,
									res						= res,
									rescs					= rescs,
									gs_shadow				= gs_shadow,

									railFrameThk			= railFrameThk,
									railBarDepth			= railBarDepth,
									railBarFillThk			= railBarFillThk,
									railBarDiam				= railBarDiam,
									balusterDist			= treadDepth,
									railFrameMat			= matBar,
									railBaluFillMat			= matSurface,
									barNumber				= barNumber,
									hrovL					= hrovL,
									hrovR					= hrovR,
									railHandrailMat			= matHandrail,
									iBalusterStyle			= railWireType,
									railPostDiam			= railPostSize,
									railPostWidth			= railPostSize,
									railPostThk				= railFrameThk,
									postNumber				= postNumber,
									railPostMat				= matPost

return



