
call "FM_types" parameters all
call "ui_stairs" parameters gs_ui_current_page	= gs_ui_current_page

! ---------- Length Unit ----------
w_units_form = ""
rrr					= request("Linear_dimension", "", w_units_form)
bLinearDimIsMetric	= (strstr(w_units_form, "m") > 0)


! ---------- 3D detail level ----------
values{2} "gs_detlevel_3D_m" 	DET3D_OFF,			stDetlevel3D[1],
								DET3D_SIMPLE,		stDetlevel3D[2],
								DET3D_DETAILED,		stDetlevel3D[3]

if gs_detlevel_3D_m = DET3D_SIMPLE then
	lock "gs_resol"
	hideparameter "gs_resol"
endif

if gs_detlevel_3D_m = DET3D_OFF then
	lock "gs_resol", "gs_shadow"
	hideparameter "gs_resol", "gs_shadow"
endif


!! ---------- 2D detail level ----------
values{2} "gs_detlevel_2D_m"	DET2D_SCALESENSITIVE,	stDetlevel2D[1],
								DET2D_CUSTOM,			stDetlevel2D[2]

!! ---------- Symbol Type ----------
if gs_detlevel_2D_m = DET2D_SCALESENSITIVE then
	values{2} "iSymbolGroup"	SYMBOLGROUP_TYPE1,	stSymbolGroup[1],
								SYMBOLGROUP_TYPE2,	stSymbolGroup[2],
								SYMBOLGROUP_TYPE3,	stSymbolGroup[3],
								SYMBOLGROUP_TYPE4,	stSymbolGroup[4],
								SYMBOLGROUP_TYPE5,	stSymbolGroup[5],
								SYMBOLGROUP_TYPE6,	stSymbolGroup[6],
								SYMBOLGROUP_TYPE7,	stSymbolGroup[7],
								SYMBOLGROUP_TYPE8,	stSymbolGroup[8]

	lock			"gs_SymbolType_m"
	hideparameter	"gs_SymbolType_m"


	!! ----------------- Simple to Middle Scale -----------------
	if bLinearDimIsMetric then
		_iEnableScaleSMTypes	= 2 + 4 + 8 + 16 + 32 + 64
	else
		_iEnableScaleSMTypes	= 128 + 256 + 512 + 1024 + 2048 + 4096 + 8192 + 16384
	endif

	dim _iEnableScaleSMTypeValueList[]
	dim _stEnableScaleSMTypeValueList[]
	j = 1
	for i = 1 to vardim1(iScaleType)
		if bittest(_iEnableScaleSMTypes, i) then
			_iEnableScaleSMTypeValueList[j] = iScaleType[i]
			_stEnableScaleSMTypeValueList[j] = stScaleType[i]
			j = j + 1
		endif
	next i
	_iEnableScaleSMTypeValueList[j] = iScaleType[15]
	_stEnableScaleSMTypeValueList[j] = stScaleType[15]
	values{2} "iScaleChangeSM" _iEnableScaleSMTypeValueList, _stEnableScaleSMTypeValueList
	if iScaleChangeSM = SCALE_CUSTOM then
		values "gs_ScaleChangeSM"	range (1,)
	else
		gs_ScaleChangeSM = iScaleChangeSM
		parameters	gs_ScaleChangeSM = gs_ScaleChangeSM

		lock			"gs_ScaleChangeSM"
		hideparameter	"gs_ScaleChangeSM"
	endif

	
	!! ----------------- Middle to Detailed Scale -----------------
	if bLinearDimIsMetric then
		_iEnableScaleMDTypes	= 2 + 4 + 8 + 16 + 32 + 64
	else
		_iEnableScaleMDTypes	= 128 + 256 + 512 + 1024 + 2048 + 4096 + 8192 + 16384
	endif

	dim _iEnableScaleMDTypeValueList[]
	dim _stEnableScaleMDTypeValueList[]
	j = 1
	for i = 1 to vardim1(iScaleType)
		if bittest(_iEnableScaleMDTypes, i) then
			if iScaleChangeSM = SCALE_CUSTOM then
				if gs_ScaleChangeSM > iScaleType[i] then
					_iEnableScaleMDTypeValueList[j] = iScaleType[i]
					_stEnableScaleMDTypeValueList[j] = stScaleType[i]
					j = j + 1
				else
					i = vardim1(iScaleType)
				endif
			else
				_iEnableScaleMDTypeValueList[j] = iScaleType[i]
				_stEnableScaleMDTypeValueList[j] = stScaleType[i]

				if gs_ScaleChangeSM = _iEnableScaleSMTypeValueList[j] then
					i = vardim1(iScaleType)
				else
					j = j + 1
				endif
			endif
		endif
	next i
	_iEnableScaleMDTypeValueList[j] = iScaleType[15]
	_stEnableScaleMDTypeValueList[j] = stScaleType[15]
	values{2} "iScaleChangeMD" _iEnableScaleMDTypeValueList, _stEnableScaleMDTypeValueList

	if iScaleChangeMD = SCALE_CUSTOM then
		values "gs_ScaleChangeMD"	range (, _iScaleSM)
	else
		gs_ScaleChangeMD = iScaleChangeMD
		parameters	gs_ScaleChangeMD = gs_ScaleChangeMD

		lock			"gs_ScaleChangeMD"
		hideparameter	"gs_ScaleChangeMD"
	endif
	if (gs_ScaleChangeMD >= gs_ScaleChangeSM)  then
		gs_ScaleChangeMD = gs_ScaleChangeSM - 1
		parameters	gs_ScaleChangeMD = gs_ScaleChangeMD
	endif
else
	values{2} "gs_SymbolType_m"	SYMBOL_TYPE1,	stStairSymbolTypes[1],
								SYMBOL_TYPE2,	stStairSymbolTypes[2],
								SYMBOL_TYPE3,	stStairSymbolTypes[3],
								SYMBOL_TYPE4,	stStairSymbolTypes[4],
								SYMBOL_TYPE5,	stStairSymbolTypes[5],
								SYMBOL_TYPE6,	stStairSymbolTypes[6],
								SYMBOL_TYPE7,	stStairSymbolTypes[7],
								SYMBOL_TYPE8,	stStairSymbolTypes[8],
								SYMBOL_TYPE9,	stStairSymbolTypes[9],
								SYMBOL_TYPE10,	stStairSymbolTypes[10],
								SYMBOL_TYPE11,	stStairSymbolTypes[11],
								SYMBOL_TYPE12,	stStairSymbolTypes[12],
								SYMBOL_TYPE13,	stStairSymbolTypes[13],
								SYMBOL_TYPE14,	stStairSymbolTypes[14],
								SYMBOL_TYPE15,	stStairSymbolTypes[15],
								SYMBOL_TYPE16,	stStairSymbolTypes[16],
								SYMBOL_TYPE17,	stStairSymbolTypes[17],
								SYMBOL_TYPE18,	stStairSymbolTypes[18],
								SYMBOL_TYPE19,	stStairSymbolTypes[19],
								SYMBOL_TYPE20,	stStairSymbolTypes[20]

	lock			"iSymbolGroup",
					"gs_ScaleChangeSM",
					"iScaleChangeSM",
					"gs_ScaleChangeMD",
					"iScaleChangeMD"
	hideparameter	"iSymbolGroup",
					"gs_ScaleChangeSM",
					"iScaleChangeSM",
					"gs_ScaleChangeMD",
					"iScaleChangeMD"
endif


! ====================================================================
! Base
! ====================================================================

VALUES "parameterType" stParameterType			! Based on Sizes, Based on Risers No.
if GLOB_MODPAR_NAME = "parameterType" then
	for i = 1 to vardim1(stParameterType)
	   if parameterType = stParameterType[i]	then parameterType_m = i
	next i
	parameters parameterType_m = parameterType_m
else
	parameters parameterType = stParameterType[parameterType_m]
endif

values "topTreadLevel"	stTopTreadLevel			! Top Tread at Floor Level, Top Tread below Floor Level
if GLOB_MODPAR_NAME = "topTreadLevel" then
	for i = 1 to vardim1(stTopTreadLevel)
	   if topTreadLevel = stTopTreadLevel[i]	then topTreadLevel_m = i
	next i
	parameters topTreadLevel_m = topTreadLevel_m
else
	parameters topTreadLevel = stTopTreadLevel[topTreadLevel_m]
endif

values "stairBaseType"	stStairBaseType			! Concrete, Wood, None
values "stairBaseType_m" 1, 2, 3
if GLOB_MODPAR_NAME = "stairBaseType" then
	stairBaseType_m = 1
	for i = 1 to vardim1(stStairBaseType)
	   if stairBaseType = stStairBaseType[i]	then stairBaseType_m = i
	next i
	parameters stairBaseType_m = stairBaseType_m
else
	stairBaseType_m = max(1, min(stairBaseType_m, vardim1(stStairBaseType)))
	stairBaseType = stStairBaseType[stairBaseType_m]
	parameters stairBaseType = stairBaseType, stairBaseType_m = stairBaseType_m
endif

VALUES "nWoodCarriages" 1,2

! ====================================================================
! 2D Text
! ====================================================================

! ---------- Rise & Run Text ----------

values "gs_RiseRunText" stRiseRunText
values "iRiseRunText" 1, 2, 3, 4, 5, 6, 99

if GLOB_MODPAR_NAME = "gs_RiseRunText" then
	for i = 1 to vardim1(stRiseRunText)
	   if gs_RiseRunText = stRiseRunText[i]	then iRiseRunText = i
	next i
	if gs_RiseRunText = stRiseRunText[7]	then iRiseRunText = 99
	parameters iRiseRunText = iRiseRunText
else
	if iRiseRunText = 99 then
		gs_RiseRunText = stRiseRunText[7]
	else
		gs_RiseRunText = stRiseRunText[max(1, min(iRiseRunText, vardim1(stRiseRunText)) )]
	endif
	parameters gs_RiseRunText = gs_RiseRunText
endif

values "typeTextRotation_RiseRun" stTextOrientation[3],stTextOrientation[1]	! Readable, Align with Symbol
if GLOB_MODPAR_NAME = "typeTextRotation_RiseRun" then
	for i = 1 to 3
		if typeTextRotation_RiseRun = stTextOrientation[i]	then typeTextRotation_RiseRun_m = i-1
	next i
	parameters typeTextRotation_RiseRun_m = typeTextRotation_RiseRun_m
else
	parameters typeTextRotation_RiseRun = stTextOrientation[typeTextRotation_RiseRun_m+1]
endif

! ---------- Numbering ----------

values "typeTextRotation_Num" stTextOrientation[3],stTextOrientation[1]	! Readable, Align with Symbol
if GLOB_MODPAR_NAME = "typeTextRotation_Num" then
	for i = 1 to 3
		if typeTextRotation_Num = stTextOrientation[i]	then typeTextRotation_Num_m = i-1
	next i
	parameters typeTextRotation_Num_m = typeTextRotation_Num_m
else
	parameters typeTextRotation_Num = stTextOrientation[typeTextRotation_Num_m+1]
endif

! ---------- UP & Down ----------

values "walkingDirUPDN" stWalkingDirUPDN			! None, Up, Down at Bottom, Down at Top, Both, Both Sensitive
values "walkingDirUPDN_m" 1, 2, 3, 4, 5, 6
if GLOB_MODPAR_NAME = "walkingDirUPDN" then
	walkingDirUPDN_m = 1
	for i = 1 to vardim1(stWalkingDirUPDN)
	   if walkingDirUPDN = stWalkingDirUPDN[i]	then walkingDirUPDN_m = i
	next i
	parameters walkingDirUPDN_m = walkingDirUPDN_m
else
	walkingDirUPDN_m = max(1, min(walkingDirUPDN_m, vardim1(stWalkingDirUPDN)))
	walkingDirUPDN = stWalkingDirUPDN[walkingDirUPDN_m]
	parameters walkingDirUPDN = walkingDirUPDN, walkingDirUPDN_m = walkingDirUPDN_m
endif

values "typeTextRotation_UpDn" stTextOrientation[3],stTextOrientation[2],stTextOrientation[1]	! Readable, Parallel with, Align with Symbol
if GLOB_MODPAR_NAME = "typeTextRotation_UpDn" then
	for i = 1 to 3
		if typeTextRotation_UpDn = stTextOrientation[i]	then typeTextRotation_UpDn_m = i-1
	next i
	parameters typeTextRotation_UpDn_m = typeTextRotation_UpDn_m
else
	parameters typeTextRotation_UpDn = stTextOrientation[typeTextRotation_UpDn_m+1]
endif

VALUES "lineTypeAboveBreak" stLineTypeAboveBreak
if GLOB_MODPAR_NAME = "lineTypeAboveBreak" then
	for i = 1 to vardim1(stLineTypeAboveBreak)
	   if lineTypeAboveBreak = stLineTypeAboveBreak[i]	then lineTypeAboveBreak_m = i
	next i
	parameters lineTypeAboveBreak_m = lineTypeAboveBreak_m
else
	parameters lineTypeAboveBreak = stLineTypeAboveBreak[lineTypeAboveBreak_m]
endif

VALUES "arrow_style" 	stArrowHeadStyles		! Style 1 - 9
values "arrow_style_m" 1, 2, 3, 4, 5, 6, 7, 8, 9
if GLOB_MODPAR_NAME = "arrow_style" then
	for i = 1 to vardim1(stArrowHeadStyles)
	   if arrow_style = stArrowHeadStyles[i]	then arrow_style_m = i
	next i
	parameters arrow_style_m = arrow_style_m
else
	parameters arrow_style = stArrowHeadStyles[arrow_style_m]
endif

values "gs_StartEndStyle"	stStartSymbolStyles			! Style 1, Style 2, Style 3, None
values "gs_StartEndStyle_m" 1, 2, 3, 4
if GLOB_MODPAR_NAME = "gs_StartEndStyle" then
	gs_StartEndStyle_m = 1
	for i = 1 to vardim1(stStartSymbolStyles)
	   if gs_StartEndStyle = stStartSymbolStyles[i]	then gs_StartEndStyle_m = i
	next i
	parameters gs_StartEndStyle_m = gs_StartEndStyle_m
else
	gs_StartEndStyle_m = max(1, min(gs_StartEndStyle_m, vardim1(stStartSymbolStyles)))
	gs_StartEndStyle = stStartSymbolStyles[gs_StartEndStyle_m]
	parameters gs_StartEndStyle = gs_StartEndStyle, gs_StartEndStyle_m = gs_StartEndStyle_m
endif

if bSimpleZigZag then
	VALUES "breakline_style" stBreaklineStyle[1],stBreaklineStyle[3]	! Straight, Zigzag CHI
	values "breakline_style_m" 1, 3
else
	VALUES "breakline_style" stBreaklineStyle[1],stBreaklineStyle[2]	! Straight, Zigzag
	values "breakline_style_m" 1, 2
endif
if GLOB_MODPAR_NAME = "breakline_style" then
	for i = 1 to vardim1(stBreaklineStyle)
	   if breakline_style = stBreaklineStyle[i]	then breakline_style_m = i
	next i
	parameters breakline_style_m = breakline_style_m
else
	parameters breakline_style = stBreaklineStyle[breakline_style_m]
endif

!values "gs_BreakHeight" range (0,ZZYZX - treadDepth)
VALUES "breakLineWidth"	RANGE (0,treadDepth]

! ====================================================================
! Rail
! ====================================================================

values "rail_m" 1, 2, 3, 4
if GLOB_MODPAR_NAME = "bRightRail" or GLOB_MODPAR_NAME = "bLeftRail" then
	if bRightRail then
		if bLeftRail then
			rail_m = RAILPOS_BOTH
		else
			rail_m = RAILPOS_RIGHT
		endif
	else
		if bLeftRail then
			rail_m = RAILPOS_LEFT
		else
			rail_m = RAILPOS_NONE
		endif
	endif
	parameters rail_m = rail_m
else
	if rail_m = 1 then
		bRightRail	= 1
		bLeftRail	= 1
	endif
	if rail_m = 2 then
		bRightRail	= 1
		bLeftRail	= 0
	endif
	if rail_m = 3 then
		bRightRail	= 0
		bLeftRail	= 1
	endif
	if rail_m = 4 then
		bRightRail	= 0
		bLeftRail	= 0
	endif
	parameters bRightRail	= bRightRail
	parameters bLeftRail	= bLeftRail
endif

if NOT(bRightRail) then
	lock			"rightRailType"
	hideparameter	"rightRailType"
endif
if NOT(bLeftRail) then
	lock			"leftRailType"
	hideparameter	"leftRailType"
endif

VALUES "rightRailType" 	stRailTypes[1],
						stRailTypes[2],
						stRailTypes[3],
						stRailTypes[4],
						stRailTypes[5],
						stRailTypes[6],
						stRailTypes[7],
						stRailTypes[8],
						stRailTypes[9],
						stRailTypes[10]

if GLOB_MODPAR_NAME = "rightRailType" then
	for i = 1 to vardim1(stRailTypes)
	   if rightRailType = stRailTypes[i]	then rightRailType_m = i
	next i
	parameters rightRailType_m = rightRailType_m
else
	parameters rightRailType = stRailTypes[rightRailType_m]
endif

if rail_m = RAILPOS_BOTH then		! Both
	VALUES "leftRailType" 	stRailTypes
else
	VALUES "leftRailType" 	stRailTypes[1],
							stRailTypes[2],
							stRailTypes[3],
							stRailTypes[4],
							stRailTypes[5],
							stRailTypes[6],
							stRailTypes[7],
							stRailTypes[8],
							stRailTypes[9],
							stRailTypes[10]
endif
if GLOB_MODPAR_NAME = "leftRailType" then
	for i = 1 to vardim1(stRailTypes)
	   if leftRailType = stRailTypes[i]	then leftRailType_m = i
	next i
	parameters leftRailType_m = leftRailType_m
else
	parameters leftRailType = stRailTypes[leftRailType_m]
endif
bSameRails = (leftRailType_m = RAIL_SAMERAILS)
parameters bSameRails = bSameRails

values "rightWireType" stWireType	! Rectangular, Round
values "leftWireType" stWireType	! Rectangular, Round

if GLOB_MODPAR_NAME = "leftWireType" then
	for i = 1 to vardim1(stWireType)
	   if leftWireType = stWireType[i]	then leftWireType_m = i
	next i
	parameters leftWireType_m = leftWireType_m
else
	parameters leftWireType = stWireType[leftWireType_m]
endif

if GLOB_MODPAR_NAME = "rightWireType" then
	for i = 1 to vardim1(stWireType)
	   if rightWireType = stWireType[i]	then rightWireType_m = i
	next i
	parameters rightWireType_m = rightWireType_m
else
	parameters rightWireType = stWireType[rightWireType_m]
endif

if rightRailType_m = 2 THEN
	values "nBarsRightRail" 2,3,4,5,6
else
	values "nBarsRightRail" 1,2,3,4,5,6
endif
if leftRailType_m = 2 | bSameRails & rightRailType_m = 2 THEN
	values "nBarsLeftRail" 2,3,4,5,6
else
	values "nBarsLeftRail" 1,2,3,4,5,6
endif

! --- HIDE RAILING PARAMETERS ---

LOCK "ggr","sgr","ggl","sgl"

IF leftRailType_m = RAIL_BALUSTRADE THEN
	HIDEPARAMETER	"leftRailPostSize",
					"nBarsLeftRail"
ENDIF
IF leftRailType_m = RAIL_PARALLEL_BARS THEN
	HIDEPARAMETER	"leftRailBarThk",
					"leftRailPostSize"
ENDIF
IF leftRailType_m = RAIL_SIMPLE_BAR THEN
	HIDEPARAMETER	"leftRailBarThk",
					"leftRailPostSize",
					"nBarsLeftRail"
ENDIF
IF leftRailType_m = RAIL_SOLID_FRAME_FILLED THEN
	HIDEPARAMETER	"leftRailPostSize",
					"leftRailBarDepth",
					"nBarsLeftRail"
ENDIF
IF leftRailType_m = RAIL_SOLID_FRAME THEN
	HIDEPARAMETER	"leftRailPostSize",
					"leftRailBarDepth",
					"nBarsLeftRail",
					"leftRailBarThk"
ENDIF
IF leftRailType_m = RAIL_SOLID THEN
	HIDEPARAMETER	"leftRailPostSize",
					"leftRailBarDepth",
					"nBarsLeftRail",
					"leftRailBarThk"
ENDIF
IF leftRailType_m = RAIL_WIRED THEN
	HIDEPARAMETER	"leftRailBarDepth"
	if leftWireType_m = 1 then HIDEPARAMETER	"leftRailWireDiam"
	if leftWireType_m = 2 then HIDEPARAMETER	"leftRailWireThk",
												"leftRailWireDepth"
else
	HIDEPARAMETER	"leftWireType",
					"leftRailWireThk",
					"leftRailWireDepth",
					"leftRailWireDiam"
ENDIF
IF leftRailType_m = RAIL_WOODEN_BALUSTRADE THEN
	HIDEPARAMETER	"leftRailPostSize",
					"leftRailBarDepth",
					"nBarsLeftRail",
					"leftRailBarThk"
ENDIF



IF rightRailType_m = RAIL_BALUSTRADE THEN
	HIDEPARAMETER	"rightRailPostSize",
					"nBarsRightRail"
ENDIF
IF rightRailType_m = RAIL_PARALLEL_BARS THEN
	HIDEPARAMETER	"rightRailBarThk",
					"rightRailPostSize"
ENDIF
IF rightRailType_m = RAIL_SIMPLE_BAR THEN
	HIDEPARAMETER	"rightRailBarThk",
					"rightRailPostSize",
					"nBarsRightRail"
ENDIF
IF rightRailType_m = RAIL_SOLID_FRAME_FILLED THEN
	HIDEPARAMETER	"rightRailPostSize",
					"rightRailBarDepth",
					"nBarsRightRail"
ENDIF
IF rightRailType_m = RAIL_SOLID_FRAME THEN
	HIDEPARAMETER	"rightRailPostSize",
					"rightRailBarDepth",
					"nBarsRightRail",
					"rightRailBarThk"
ENDIF
IF rightRailType_m = RAIL_SOLID THEN
	HIDEPARAMETER	"rightRailPostSize",
					"rightRailBarDepth",
					"nBarsRightRail",
					"rightRailBarThk"
ENDIF
IF rightRailType_m = RAIL_WIRED THEN
	HIDEPARAMETER	"rightRailBarDepth"
	if rightWireType_m = 1 then HIDEPARAMETER	"rightRailWireDiam"
	if rightWireType_m = 2 then HIDEPARAMETER	"rightRailWireThk",
												"rightRailWireDepth"
else
	HIDEPARAMETER	"rightWireType",
					"rightRailWireThk",
					"rightRailWireDepth",
					"rightRailWireDiam"
ENDIF
IF rightRailType_m = RAIL_WOODEN_BALUSTRADE THEN
	HIDEPARAMETER	"rightRailPostSize",
					"rightRailBarDepth",
					"nBarsRightRail",
					"rightRailBarThk"
ENDIF

IF rail_m = RAILPOS_NONE | rail_m = RAILPOS_LEFT THEN		! None, Left
	HIDEPARAMETER "rightRailType", "ggr", "rightRailHeight", "rightRailDist", "rightRailOffset", "sgr",
		"rightRailFrameThk", "rightRailBarThk"
ENDIF
IF rail_m = RAILPOS_NONE | rail_m = RAILPOS_RIGHT THEN		! None, Right
	HIDEPARAMETER "leftRailType", "ggl", "leftRailHeight", "leftRailDist", "leftRailOffset", "sgl",
		"leftRailFrameThk", "leftRailBarThk"
ENDIF

IF rail_m = RAILPOS_NONE THEN HIDEPARAMETER "matPost","matHandrail","matSurface","matBar"		! None

IF bSameRails or NOT(bLeftRail) THEN
	HIDEPARAMETER	"ggl",
					"leftRailHeight",
					"leftRailDist",
					"leftRailOffset",
					"sgl",
					"leftRailHeight",
					"leftRailDist",
					"leftRailOffset",
					"leftRailOvhgBottom",
					"leftRailWireDiam",
					"leftWireType",
					"leftRailWireThk",
					"leftRailWireDepth",
					"leftRailOvhgTop",
					"leftRailPostSize",
					"leftRailFrameThk",
					"nBarsLeftRail",
					"leftRailBarThk",
					"leftRailBarDepth"
ENDIF
IF NOT(bRightRail) THEN
	HIDEPARAMETER	"ggr",
					"rightRailHeight",
					"rightRailDist",
					"rightRailOffset",
					"sgr",
					"rightRailHeight",
					"rightRailDist",
					"rightRailOffset",
					"rightRailOvhgBottom",
					"rightRailWireDiam",
					"rightWireType",
					"rightRailWireThk",
					"rightRailWireDepth",
					"rightRailOvhgTop",
					"rightRailPostSize",
					"rightRailFrameThk",
					"nBarsRightRail",
					"rightRailBarThk",
					"rightRailBarDepth"
ENDIF

! ==============================================================================
! Symbolic 2D
! ==============================================================================

values "postSymbolType" stPostSymbolType
values "iPostSymbolType" 1, 2, 3, 4, 0
if GLOB_MODPAR_NAME = "postSymbolType" then
	iPostSymbolType = 1
	if postSymbolType = stPostSymbolType[2] then iPostSymbolType = 2
	if postSymbolType = stPostSymbolType[3] then iPostSymbolType = 3
	if postSymbolType = stPostSymbolType[4] then iPostSymbolType = 4
	if postSymbolType = stPostSymbolType[5] then iPostSymbolType = 0
	parameters iPostSymbolType = iPostSymbolType
else
	postSymbolType = stPostSymbolType[1]
	if iPostSymbolType = 2 then postSymbolType = stPostSymbolType[2]
	if iPostSymbolType = 3 then postSymbolType = stPostSymbolType[3]
	if iPostSymbolType = 4 then postSymbolType = stPostSymbolType[4]
	if iPostSymbolType = 0 then postSymbolType = stPostSymbolType[5]
	parameters postSymbolType = postSymbolType
endif

if NOT(bShowRailOnFloorPlan) then
	lock			"railLineType",
					"railPen",
					"bSymbolic2D",
					"postSymbolType",
					"iPostSymbolType",
					"postLineType",
					"postPen",
					"bShowRailAboveBreakLine"
	hideparameter	"railLineType",
					"railPen",
					"bSymbolic2D",
					"postSymbolType",
					"iPostSymbolType",
					"postLineType",
					"postPen",
					"bShowRailAboveBreakLine"
endif
if NOT(iPostSymbolType) then
	lock			"postLineType",
					"postPen"
	hideparameter	"postLineType",
					"postPen"
endif
if NOT(bSymbolic2D) then
	lock			"postSymbolType",
					"iPostSymbolType",
					"postLineType",
					"postPen"
	hideparameter	"postSymbolType",
					"iPostSymbolType",
					"postLineType",
					"postPen"
endif
if not(bShowRailAxis) then
	lock 			"railAxisLineType",
					"gs_RailAxisPen"
	hideparameter	"railAxisLineType",
					"gs_RailAxisPen"
endif
if	gs_detlevel_2D_m = DET2D_CUSTOM &\
	(gs_SymbolType_m = 3 |\
	gs_SymbolType_m = 8 |\
	gs_SymbolType_m = 15) then
	lock			"bShowRailAboveBreakLine"
	hideparameter	"bShowRailAboveBreakLine"
endif
if NOT(bShowCarriage) then
	lock			"iShowCarriageUpTo",
					"stShowCarriageUpTo",
					"carriageLineType",
					"carriagePen"
	hideparameter	"stShowCarriageUpTo",
					"carriageLineType",
					"carriagePen"
endif
if NOT(bEnableCarriageLine) then
	lock			"bShowCarriage",
					"iShowCarriageUpTo",
					"stShowCarriageUpTo",
					"carriageLineType",
					"carriagePen"
	hideparameter	"bShowCarriage",
					"stShowCarriageUpTo",
					"carriageLineType",
					"carriagePen"
endif

values "stShowCarriageUpTo" stShowCarriageValues
values "iShowCarriageUpTo" 1, 20, 50, 100, 200

if GLOB_MODPAR_NAME = "stShowCarriageUpTo" then
	iShowCarriageUpTo = 1
	if stShowCarriageUpTo = stShowCarriageValues[2]	then iShowCarriageUpTo = 20
	if stShowCarriageUpTo = stShowCarriageValues[3]	then iShowCarriageUpTo = 50
	if stShowCarriageUpTo = stShowCarriageValues[4]	then iShowCarriageUpTo = 100
	if stShowCarriageUpTo = stShowCarriageValues[5]	then iShowCarriageUpTo = 200
	parameters iShowCarriageUpTo = iShowCarriageUpTo
else
	stShowCarriageUpTo = stShowCarriageValues[1]
	if iShowCarriageUpTo = 20	then stShowCarriageUpTo = stShowCarriageValues[2]
	if iShowCarriageUpTo = 50	then stShowCarriageUpTo = stShowCarriageValues[3]
	if iShowCarriageUpTo = 100	then stShowCarriageUpTo = stShowCarriageValues[4]
	if iShowCarriageUpTo = 200	then stShowCarriageUpTo = stShowCarriageValues[5]
	parameters stShowCarriageUpTo = stShowCarriageUpTo
endif

! ====================================================================
! End Of Rail
! ====================================================================

! --- Pens ---

dim iPenNumber[255]
for i=1 to 255
	iPenNumber[i]=i
next i

values "gs_cont_pen"		iPenNumber
values "gs_DashLinePen"		iPenNumber
values "railPen"			iPenNumber
values "gs_RailAxisPen"		iPenNumber
values "postPen"			iPenNumber
values "carriagePen"		iPenNumber
values "gs_fill_pen"		iPenNumber
values "gs_wLinePen"		iPenNumber
values "gs_NumTextPen"		iPenNumber
values "gs_text_pen"		iPenNumber
values "UPDNfontpen"		iPenNumber
values "gs_desc_text_pen"	iPenNumber
values "gs_LinePenStUp"		iPenNumber

! --- CALCULATE TREADS PARAMETERS ---
IF parameterType_m = 1 THEN	! Based on Sizes
	treadHeight=(zzyzx/nRisers)
	treadDepth=a/nRisers
	Parameters treadDepth=treadDepth,treadHeight=treadHeight
	LOCK "treadDepth","treadHeight"
ENDIF

IF parameterType_m = 2 THEN	! Based on Risers No.
	a=nRisers*treadDepth
	zzyzx=nRisers*treadHeight
	Parameters a=a,zzyzx=zzyzx
	LOCK "a","zzyzx"
ENDIF

! --- CONTROLED PARAMETERS ---

VALUES "stairSlabThk" RANGE (0,)
VALUES "treadHeight"		RANGE [0.05,)
VALUES "treadDepth" 	RANGE [0.1, )
VALUES "nosing" RANGE [0,treadDepth/2)
VALUES "B" RANGE (0,)


IF NOT(bEnableCarriageLine) THEN
	HIDEPARAMETER "woodCarriageOffsetRight","woodCarriageOffsetLeft","nWoodCarriages"
ELSE
	IF nWoodCarriages=1 THEN HIDEPARAMETER "woodCarriageOffsetLeft"
ENDIF

IF stairBaseType_m = 3 THEN HIDEPARAMETER "stairSlabThk"

IF bRiserCover=0 THEN HIDEPARAMETER "riserCoverThk","matRiser",
									"penLineRiser",
									"typeFillRiser",
									"penFillRiser",
									"penBackFillRiser"

! --- HIDE MATERIAL PARAMETERS ---

! None
IF stairBaseType_m = 3 THEN HIDEPARAMETER "matBase",		
										"penLineStringer",
										"typeFillStringer",
										"penFillStringer",
										"penBackFillStringer"

IF treadThickness<0.0001 THEN HIDEPARAMETER "matTread",
											"penLineTread",
											"typeFillTread",
											"penFillTread",
											"penBackFillTread"

! ==============================================================================
! Settings of 2D Symbol Type
! ==============================================================================

! --- GENERAL SETTINGS ---
	LOCK	"gs_ArrowFill","gs_ArrowHeight","gs_ArrowHalfWidth",
			"gs_StartEndFill","gs_StartWidth","gs_StartHeight",
			"DirNumText_X","DirNumText_Y",
			"DirUPDN_X","DirUPDN_Y","AngUPDN",
			"bSameRails","breakLineWidth"

	IF bShowWalkLine=0 THEN
		 HIDEPARAMETER 	"gs_wLineType1","gs_wLineTypeAbove",
						"gs_wLinePen","arrow_style","gs_ArrowFillPen","gs_ArrowFillPenAbove", "bShowWalkLineAboveBreakline", "gs_circleRadius",
						"gs_StartEndStyle","gs_StartEndFillPen","bShowRiseAndRunText","walkingDirUPDN","UPDNfontsize","gs_text_size_pt_UpDn"

		 LOCK	"gs_wLineType1","gs_wLineTypeAbove",
				"gs_wLinePen","arrow_style","gs_ArrowFillPen","gs_ArrowFillPenAbove", "bShowWalkLineAboveBreakline", "gs_circleRadius",
				"gs_StartEndStyle","gs_StartEndFillPen","bShowRiseAndRunText","walkingDirUPDN","UPDNfontsize","gs_text_size_pt_UpDn"
	ENDIF

	IF arrow_style_m = 1 | arrow_style_m = 2 | arrow_style_m = 3 THEN
		 lock 	"gs_ArrowFillPen","gs_ArrowFillPenAbove"
		 HIDEPARAMETER 	"gs_ArrowFillPen","gs_ArrowFillPenAbove"
	ENDIF

	IF gs_StartEndStyle_m = 3 | gs_StartEndStyle_m = 4  THEN		! Style 3, None
		 HIDEPARAMETER 	"gs_StartEndFillPen"
	ENDIF

	if not(bShowNumbering)  then
		 lock 	"nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen", "typeTextRotation_Num"
		 hideparameter 	"nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen", "typeTextRotation_Num"
	endif

	if not(bShowRiseAndRunText) then
		lock 	"gs_RiseRunText","gs_CustomText1","gs_CustomText2","gs_customText_rise", "fontsize", "gs_text_size_pt", "typeTextRotation_RiseRun", "gs_text_pen", "bUseACLinearUnit"
		hideparameter 	"gs_RiseRunText","gs_CustomText1","gs_CustomText2", "gs_customText_rise", "fontsize", "gs_text_size_pt", "typeTextRotation_RiseRun", "gs_text_pen", "bUseACLinearUnit"
	endif

	if iRiseRunText < 99 then
		hideparameter 	"gs_CustomText1","gs_CustomText2"
		lock		 	"gs_CustomText1","gs_CustomText2"
	else
		if bLinearDimIsMetric then
			hideparameter 	"gs_CustomText2"
			lock		 	"gs_CustomText2"
		endif
	endif

	if iRiseRunText <> 5 & iRiseRunText <> 6 then
		lock "gs_customText_rise"
		hideparameter "gs_customText_rise"
	endif

	if walkingDirUPDN_m = 1 then	! None
		 lock 	"UPDNfontsize","gs_text_size_pt_UpDn", "UPDNfontpen","AngUPDN", "typeTextRotation_UpDn"
		 hideparameter 	"UPDNfontsize", "gs_text_size_pt_UpDn", "UPDNfontpen","AngUPDN", "typeTextRotation_UpDn"
	endif
	if walkingDirUPDN_m = 1 | walkingDirUPDN_m = 2 then	! None, Up
		lock "gs_CustomText_Down"
		hideparameter "gs_CustomText_Down"
	endif

	! --- SETTINGS BY SYMBOL TYPES ---

	if gs_detlevel_2D_m = DET2D_CUSTOM then
		IF gs_SymbolType_m = 1 THEN		! Type 1
			HIDEPARAMETER	"bShowNumbering","nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen",
							"gs_ArrowFillPenAbove","gs_FillAbove"

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=0
				PARAMETERS gs_BreaklineStUp=0
				PARAMETERS gs_TreadStUp=0
				PARAMETERS gs_numaStUp=0
			ENDIF

		ENDIF

		IF gs_SymbolType_m = 2 THEN		! Type 2
			HIDEPARAMETER 	"bShowNumbering","nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen",
							"gs_ArrowFillPenAbove","gs_FillAbove"

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=0
				PARAMETERS gs_BreaklineStUp=0
				PARAMETERS gs_TreadStUp=0
				PARAMETERS gs_numaStUp=0
			ENDIF

		ENDIF

		IF gs_SymbolType_m = 3 THEN		! Type 3
			HIDEPARAMETER 	"bShowNumbering","nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen",
							"gs_ArrowFillPenAbove","gs_FillAbove"

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=0
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=0
				PARAMETERS gs_numaStUp=0
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 4 THEN		! Type 4
			HIDEPARAMETER 	"bShowNumbering","nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen"

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=0
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=0
				PARAMETERS gs_numaStUp=0
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 5 THEN		! Type 5
			HIDEPARAMETER 	"bShowNumbering","nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen"

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=0
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=0
				PARAMETERS gs_numaStUp=0
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 6 THEN		! Type 6
			HIDEPARAMETER "gs_ArrowFillPenAbove","gs_FillAbove"

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=0
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 7 THEN		! Type 7
			HIDEPARAMETER 	"gs_ArrowFillPenAbove","gs_FillAbove"
			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=0
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 8 THEN		! Type 8
			HIDEPARAMETER 	"bShowNumbering","nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen",
							"gs_ArrowFillPenAbove","gs_FillAbove"

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 9 THEN		! Type 9
			HIDEPARAMETER 	"bShowNumbering","nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen"

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 10 THEN		! Type 10
			HIDEPARAMETER 	"bShowNumbering","nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen"
			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 11 THEN		! Type 11

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 12 THEN		! Type 12

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 13 THEN		! Type 13
			HIDEPARAMETER 	"gs_FillAbove"
			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=0
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 14 THEN		! Type 14
			HIDEPARAMETER 	"gs_FillAbove"
			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=0
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 15 THEN		! Type 15
			HIDEPARAMETER 	"bShowNumbering","nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen",
							"gs_FillAbove"

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 16 THEN		! Type 16
			HIDEPARAMETER 	"bShowNumbering","nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen"

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 17 THEN		! Type 17
			HIDEPARAMETER 	"bShowNumbering","nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen"

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 18 THEN		! Type 18

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 19 THEN		! Type 19

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 20 THEN		! Type 20
			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF
	endif
	
! ======================================================================
! Above Home Story
! ======================================================================
IF not(bStorySensitive) THEN
	HIDEPARAMETER "gs_AboveHomeStory"
ELSE
	IF not(gs_BreaklineStUp) THEN HIDEPARAMETER "gs_LowerPartStUp","gs_UpperPartStUp"
	IF gs_BreaklineStUp | not(gs_TreadStUp) THEN HIDEPARAMETER "gs_numaStUp"
	IF not(gs_LowerPartStUp) & not(gs_UpperPartStUp) & gs_BreaklineStUp THEN HIDEPARAMETER "gs_TreadStUp"
ENDIF

! ==============================================================================
! mm / point conversion
! ==============================================================================

MM_IN_A_DOT = 25.4 / 72

if GLOB_MODPAR_NAME = "gs_text_size_pt_UpDn" then
	UPDNfontsize = gs_text_size_pt_UpDn * MM_IN_A_DOT
	parameters UPDNfontsize = UPDNfontsize
else
	gs_text_size_pt_UpDn = UPDNfontsize / MM_IN_A_DOT
	parameters gs_text_size_pt_UpDn = gs_text_size_pt_UpDn
endif

if GLOB_MODPAR_NAME = "gs_text_size_pt" then
	fontsize = gs_text_size_pt * MM_IN_A_DOT
	parameters fontsize = fontsize
else
	gs_text_size_pt = fontsize / MM_IN_A_DOT
	parameters gs_text_size_pt = gs_text_size_pt
endif

if GLOB_MODPAR_NAME = "gs_text_size_pt_num" then
	gs_NumTextSize = gs_text_size_pt_num * MM_IN_A_DOT
	parameters gs_NumTextSize = gs_NumTextSize
else
	gs_text_size_pt_num = gs_NumTextSize / MM_IN_A_DOT
	parameters gs_text_size_pt_num = gs_text_size_pt_num
endif

if GLOB_MODPAR_NAME = "gs_desc_text_size_pt" then
	gs_desc_text_size = gs_desc_text_size_pt * MM_IN_A_DOT
	parameters gs_desc_text_size = gs_desc_text_size
else
	gs_desc_text_size_pt = gs_desc_text_size / MM_IN_A_DOT
	parameters gs_desc_text_size_pt = gs_desc_text_size_pt
endif

! --- Connecting integer and section pencolor type parameters ---

for i = 1 to 255
	put i
next i

values "penLineStringer" use(nsp)
values "penFillStringer" use(nsp)

if GLOB_MODPAR_NAME = "penLineStringer_m" then
	if penLineStringer_m < -1 | penLineStringer_m > 255 then
		penLineStringer_m = 1
		parameters penLineStringer_m = penLineStringer_m
	endif
	parameters penLineStringer = penLineStringer_m
else
	parameters penLineStringer_m = penLineStringer
endif
if GLOB_MODPAR_NAME = "penFillStringer_m" then
	if penFillStringer_m < -1 | penFillStringer_m > 255 then
		penFillStringer_m = 1
		parameters penFillStringer_m = penFillStringer_m
	endif
	parameters penFillStringer = penFillStringer_m
else
	parameters penFillStringer_m = penFillStringer
endif

values "penLineTread" use(nsp)
values "penFillTread" use(nsp)

if GLOB_MODPAR_NAME = "penLineTread_m" then
	if penLineTread_m < 1 | penLineTread_m > 255 then
		penLineTread_m = 1
		parameters penLineTread_m = penLineTread_m
	endif
	parameters penLineTread = penLineTread_m
else
	parameters penLineTread_m = penLineTread
endif
if GLOB_MODPAR_NAME = "penFillTread_m" then
	if penFillTread_m < 1 | penFillTread_m > 255 then
		penFillTread_m = 1
		parameters penFillTread_m = penFillTread_m
	endif
	parameters penFillTread = penFillTread_m
else
	parameters penFillTread_m = penFillTread
endif

values "penLineRiser" use(nsp)
values "penFillRiser" get(nsp)

if GLOB_MODPAR_NAME = "penLineRiser_m" then
	if penLineRiser_m < 1 | penLineRiser_m > 255 then
		penLineRiser_m = 1
		parameters penLineRiser_m = penLineRiser_m
	endif
	parameters penLineRiser = penLineRiser_m
else
	parameters penLineRiser_m = penLineRiser
endif
if GLOB_MODPAR_NAME = "penFillRiser_m" then
	if penFillRiser_m < 1 | penFillRiser_m > 255 then
		penFillRiser_m = 1
		parameters penFillRiser_m = penFillRiser_m
	endif
	parameters penFillRiser = penFillRiser_m
else
	parameters penFillRiser_m = penFillRiser
endif


if GLOB_MODPAR_NAME = "penBackFillStringer_m" then
	if penBackFillStringer_m < -1 | penBackFillStringer_m > 255 then
		penBackFillStringer_m = 1
		parameters penBackFillStringer_m = penBackFillStringer_m
	endif
	parameters penBackFillStringer = penBackFillStringer_m
else
	parameters penBackFillStringer_m = penBackFillStringer
endif

if GLOB_MODPAR_NAME = "penBackFillTread_m" then
	if penBackFillTread_m < -1 | penBackFillTread_m > 255 then
		penBackFillTread_m = 1
		parameters penBackFillTread_m = penBackFillTread_m
	endif
	parameters penBackFillTread = penBackFillTread_m
else
	parameters penBackFillTread_m = penBackFillTread
endif

if GLOB_MODPAR_NAME = "penBackFillRiser_m" then
	if penBackFillRiser_m < -1 | penBackFillRiser_m > 255 then
		penBackFillRiser_m = 1
		parameters penBackFillRiser_m = penBackFillRiser_m
	endif
	parameters penBackFillRiser = penBackFillRiser_m
else
	parameters penBackFillRiser_m = penBackFillRiser
endif


! =============================================================================
! Onorm list Settings
! =============================================================================

if LibraryLangCode = "AUT" or LibraryLangCode = "CHE" or LibraryLangCode = "GER" then
	call "Onorm_Stair" parameters all
else
	hideparameter "gs_onorm_Title", "gs_list_soundinsul"
endif

! =============================================================================
! IFC2x3 Property Set for Stairs
! =============================================================================

STRAIGHT_RUN_STAIR = 1
parameters ifc_StairType 		= STRAIGHT_RUN_STAIR
parameters ifc_NumberOfRiser 	= nRisers
! unused "topTreadLevel" parameter
parameters ifc_NumberOfTreads 	= nRisers
parameters ifc_RiserHeight		= treadHeight
parameters ifc_TreadLength		= treadDepth

