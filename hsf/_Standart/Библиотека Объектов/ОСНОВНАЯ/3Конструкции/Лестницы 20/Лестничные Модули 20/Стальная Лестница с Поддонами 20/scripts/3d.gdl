
if gs_detlevel_3D_m = 0 then END
if not(gs_shadow) then SHADOW OFF



! Contour Hotspots
! ------------------------------------------------------------------
unID = 1

HOTSPOT 0,	0,				0,						unID,b,1+256	: unID=unID+1
HOTSPOT 0,	-0.1,			0,						unID,b,3		: unID=unID+1
HOTSPOT 0,	flightWidth,	0,						unID,b,2		: unID=unID+1

HOTSPOT a,	0,				nRisers*treadHeight,	unID,b,1+256	: unID=unID+1
HOTSPOT a,	-0.1,			nRisers*treadHeight,	unID,b,3		: unID=unID+1
HOTSPOT a,	flightWidth,	nRisers*treadHeight,	unID,b,2		: unID=unID+1

HOTSPOT a,	flightWidth,	0,						unID,zzyzx,1+128	: unID=unID+1
HOTSPOT a,	flightWidth,	-0.1,					unID,zzyzx,3		: unID=unID+1
HOTSPOT a,	flightWidth,	zzyzx,					unID,zzyzx,2		: unID=unID+1

HOTSPOT a,	0,				0,						unID,zzyzx,1+128	: unID=unID+1
HOTSPOT a,	0,				-0.1,					unID,zzyzx,3		: unID=unID+1
HOTSPOT a,	0,				zzyzx,					unID,zzyzx,2		: unID=unID+1


pen gs_cont_pen
! ======================================================================
! Riser
! ======================================================================

intTreadNum		= int(A/treadDepth)
distTreadCover	= treadThickness/tan(angleRiser)
distTread		= (treadThickness + thickPan)/tan(angleRiser)
xRiser 			= thickRiser/sin(angleRiser)
xTreadCover		= treadDepth + widthOverlapTread - xRiser

if typeStringer_m = 7 then					! Channel Inside Open - Stringer
	widthTotalTread	= b - thickStringer * 2
else
	widthTotalTread	= widthFreeFlight
endif
bet	= atn((2*treadDepth)/widthTotalTread)

! Point of Riser
! ----------------------------------------------------------------------
dim pointRiser[][3]
i = 1

if bRiser then
	pointRiser[i][1] = widthOverlapTread
	pointRiser[i][2] = 0
	pointRiser[i][3] = 15
else
	pointRiser[i][1] = distTread
	pointRiser[i][2] = treadHeight - treadThickness - thickPan
	pointRiser[i][3] = 15
endif
i = i + 1

if typeNose = stTypeNose[1] then
	pointRiser[i][1] = 0
	pointRiser[i][2] = treadHeight
	pointRiser[i][3] = 15
	i = i + 1
endif

if typeNose = stTypeNose[2] then
	pointRiser[i][1] = radiusFillet * (1 + sin(90-angleRiser)) / tan(angleRiser)
	pointRiser[i][2] = treadHeight - radiusFillet * (1 + sin(90-angleRiser))
	pointRiser[i][3] = 79
	i = i + 1
	pointRiser[i][1] = radiusFillet * ((1 + sin(90-angleRiser)) / tan(angleRiser) + cos((90-angleRiser)))
	pointRiser[i][2] = treadHeight - radiusFillet
	pointRiser[i][3] = 979
	i = i + 1
	pointRiser[i][1] = radiusFillet * ((1 + sin(90-angleRiser)) / tan(angleRiser) + cos((90-angleRiser)))
	pointRiser[i][2] = treadHeight
	pointRiser[i][3] = 3079
	i = i + 1
endif
if typeNose = stTypeNose[3] then
	pointRiser[i][1] = depthChamfer/(1 + tan(angleRiser)*tan(angleChamfer-90))
	pointRiser[i][2] = treadHeight - depthChamfer/(1/tan(angleRiser)+tan(angleChamfer-90))
	pointRiser[i][3] = 15
	i = i + 1
	pointRiser[i][1] = depthChamfer
	pointRiser[i][2] = treadHeight
	pointRiser[i][3] = 15
	i = i + 1
endif
iStartTread = i
pointRiser[i][1] = lengthNose
pointRiser[i][2] = treadHeight
pointRiser[i][3] = 15
i = i + 1

pointRiser[i][1] = lengthNose
pointRiser[i][2] = treadHeight - thickRiser
pointRiser[i][3] = 15
i = i + 1

if typeNose = stTypeNose[1] then
	pointRiser[i][1] = thickRiser/tan(angleRiser/2)
	pointRiser[i][2] = treadHeight - thickRiser
	pointRiser[i][3] = 15
	i = i + 1
endif
if typeNose = stTypeNose[2] then
	pointRiser[i][1] = radiusFillet * ((1 + sin(90-angleRiser)) / tan(angleRiser) + cos((90-angleRiser)))
	pointRiser[i][2] = treadHeight - thickRiser
	pointRiser[i][3] = 79
	i = i + 1
	pointRiser[i][1] = radiusFillet * ((1 + sin(90-angleRiser)) / tan(angleRiser) + cos((90-angleRiser)))
	pointRiser[i][2] = treadHeight - radiusFillet
	pointRiser[i][3] = 979
	i = i + 1
	pointRiser[i][1] = (radiusFillet-thickRiser) * (1 + sin(90-angleRiser)) / tan(angleRiser)
	pointRiser[i][2] = treadHeight - radiusFillet * (1 + sin(90-angleRiser))
	pointRiser[i][3] = 3079
	i = i + 1
endif
if typeNose = stTypeNose[3] then
	pointRiser[i][1] = depthChamfer + thickRiser/tan(angleChamfer/2)
	pointRiser[i][2] = treadHeight - thickRiser
	pointRiser[i][3] = 15
	i = i + 1
	pointRiser[i][1] = depthChamfer/(1 + tan(angleRiser)*tan(angleChamfer-90)) + sin(180-((angleRiser+angleChamfer)/2)) * thickRiser/sin((angleRiser-angleChamfer+180)/2)
	pointRiser[i][2] = treadHeight - depthChamfer/(1/tan(angleRiser)+tan(angleChamfer-90)) - cos(180-((angleRiser+angleChamfer)/2)) * thickRiser/sin((angleRiser-angleChamfer+180)/2)
	pointRiser[i][3] = 15
	i = i + 1
endif
pointRiser[i][1] = distTreadCover + xRiser
pointRiser[i][2] = treadHeight - treadThickness
pointRiser[i][3] = 15
i = i + 1
pointRiser[i][1] = treadDepth + distTreadCover + widthOverlapTread
pointRiser[i][2] = treadHeight - treadThickness
pointRiser[i][3] = 15
i = i + 1

iEndTread = i
pointRiser[i][1] = treadDepth + widthOverlapTread
pointRiser[i][2] = treadHeight
pointRiser[i][3] = 15
i = i + 1

!-----------------------------------------------------------------

pointRiser[i][1] = widthOverlapTread + treadDepth + xRiser
pointRiser[i][2] = treadHeight
pointRiser[i][3] = 15
i = i + 1
pointRiser[i][1] = widthOverlapTread + treadDepth + xRiser + distTread
pointRiser[i][2] = treadHeight - treadThickness - thickPan
pointRiser[i][3] = 15
i = i + 1
pointRiser[i][1] = distTread + xRiser
pointRiser[i][2] = treadHeight - treadThickness - thickPan
pointRiser[i][3] = 15
i = i + 1

if bRiser then
	pointRiser[i][1] = widthOverlapTread + xRiser
	pointRiser[i][2] = 0
	pointRiser[i][3] = 15
	i = i + 1

	pointRiser[i][1] = widthOverlapTread
	pointRiser[i][2] = 0
	pointRiser[i][3] = -1
else
	pointRiser[i][1] = distTread
	pointRiser[i][2] = treadHeight - treadThickness - thickPan
	pointRiser[i][3] = 15
	i = i + 1

	pointRiser[i][1] = distTread
	pointRiser[i][2] = treadHeight - treadThickness - thickPan
	pointRiser[i][3] = -1
endif


for j = 1 to i
	put pointRiser[j][1], pointRiser[j][2], pointRiser[j][3]
next j


! ----- Draw the Riser -----
material matRiser
if GLOB_CONTEXT = 4 then SECT_FILL typeFillRiser, penBackFillRiser, penFillRiser, penLineRiser

rotx 90
mulz -1
addz (B-widthTotalTread)/2

! CutPlane for the last Tread
! ------------------------------[
	addx A : rotz 90
	cutplane{2} 90, 2
	del 2
! ------------------------------]

for n = 0 to intTreadNum-1
	add n * treadDepth, n * treadHeight,0
	if n <> intTreadNum-1 then
		prism_ nsp/3, widthTotalTread,
			use (nsp)
	else
		prism_ nsp/3, widthTotalTread,
			get (nsp)
	endif
	del 1
next n

cutend

! ======================================================================
! Treads
! ======================================================================

material matTread
if GLOB_CONTEXT = 4 then SECT_FILL typeFillTread, penBackFillTread, penFillTread, penLineTread

if treadThickness > EPS then
	for j = iStartTread to iEndTread
		put pointRiser[j][1], pointRiser[j][2], pointRiser[j][3]
	next j

	! CutPlane for the last Tread
	! ------------------------------[
		addx A : rotz 90
		cutplane{2} 90, 2
		del 2
	! ------------------------------]

	for iTread = 0 to intTreadNum-1
		base
		add iTread  * treadDepth, iTread  * treadHeight,0
		if iTread  <> intTreadNum-1 then
			prism_ nsp/3, widthTotalTread,
				use (nsp)
		else
			prism_ nsp/3, widthTotalTread,
				get (nsp)
		endif
		del 1

		vert 0, 0, 0 !#1
		vert 0, 0, 1 !#2
		vert 0, 1, 0 !#3
		vert -1, 0, 0 !#4
		coor 2, -1, -2,-3, -4
		body -1
	next iTread

	cutend
endif

DEL 3

! ======================================================================
! Stringer
! ======================================================================

material matBase
if GLOB_CONTEXT = 4 then SECT_FILL typeFillStringer, penBackFillStringer, penFillStringer, penLineStringer

if typeStringer_m = 1 | typeStringer_m = 2 then
	toeRadius = 0.0001
	toeRadius2 = 0.0001
endif
if typeStringer_m = 3 | typeStringer_m = 4 then
	toeRadius = radiusStringer
	toeRadius2 = radiusStringer-thickStringer
endif
if typeStringer_m = 5 | typeStringer_m = 6 then
	toeRadius = widthStringer/2
	toeRadius2 = widthStringer/2-thickStringer
endif

nTrans = 0
numPoint = 0

addx widthOverlapTread-cutDistLowerEnd
rotz -90
cutplane 180-cutAngleLowerEnd
del 2

add a, 0, zzyzx+cutDistUpperEnd
rotz -90
cutplane -90+cutAngleUpperEnd
del 2

for i = 1 to 2
	if typeStringer_m <> 7 & typeStringer_m <> 8 then

		! ----- Solid Bar, Solid Tube, Rounded Rectangle -----

		numPoint = 13

		put toeRadius,						0, 							79
		put toeRadius,						toeRadius, 					979
		put 0,								toeRadius,					3079

		put 0,								widthStringer-toeRadius, 	79
		put toeRadius,						widthStringer-toeRadius, 	979
		put toeRadius,						widthStringer,				3079

		put heightStringer-toeRadius,		widthStringer,				79
		put heightStringer-toeRadius,		widthStringer-toeRadius, 	979
		put heightStringer,					widthStringer-toeRadius, 	3079

		put heightStringer,					toeRadius,					79
		put heightStringer	- toeRadius,	toeRadius,					979
		put heightStringer - toeRadius,		0,							3079

		put toeRadius,						0, 							-1

		! ----- Hollow Core Bar, Hollow  Core Tube, Hollow Rounded Rectangle -----

		if typeStringer_m = 2 | typeStringer_m = 4 | typeStringer_m = 6 then
			numPoint = 26

			put toeRadius2+thickStringer,				thickStringer, 							79
			put toeRadius2+thickStringer,				toeRadius2+thickStringer, 				979
			put +thickStringer,							toeRadius2+thickStringer,				3079

			put +thickStringer,							widthStringer-toeRadius2-thickStringer, 79
			put toeRadius2+thickStringer,				widthStringer-toeRadius2-thickStringer, 979
			put toeRadius2+thickStringer,				widthStringer-thickStringer,			3079

			put heightStringer-toeRadius2-thickStringer,widthStringer-thickStringer,			79
			put heightStringer-toeRadius2-thickStringer,widthStringer-toeRadius2-thickStringer, 979
			put heightStringer-thickStringer,			widthStringer-toeRadius2-thickStringer, 3079

			put heightStringer-thickStringer,			toeRadius2+thickStringer,				79
			put heightStringer-toeRadius2-thickStringer,toeRadius2+thickStringer,				979
			put heightStringer-toeRadius2-thickStringer,thickStringer,							3079

			put toeRadius2+thickStringer,				thickStringer,	 						-1
		endif
	else
		numPoint = 9

		put 0,							 	0, 							15
		put 0,							 	widthStringer, 				15
		put heightStringer, 			 	widthStringer,				15

		put heightStringer,				 	0,							15
		put heightStringer-thickStringer,	0, 							15
		put heightStringer-thickStringer,	widthStringer-thickStringer,15

		put thickStringer,					widthStringer-thickStringer,15
		put thickStringer,					0,							15
		put 0,							 	0, 							15

		if typeStringer_m = 7 then
			muly -1
			addy -widthStringer
			nTrans = 2
		endif
	endif

	! CutPlane
	! ------------------------------[
		cutplane{2} 180, 2	! By Start Horizontal
		addx A : rotz 90
		cutplane{2} 90, 2	! By Finish Vertical
		del 2
	! ------------------------------]

	addx -treadHeight/tan(ang) - distNoseStringer/sin(ang)
	roty 90-ang

	PRISM_ numPoint , zzyzx/sin(ang) + (treadHeight + distNoseStringer/cos(ang))/sin(ang),
			get (nsp)

	cutend
	cutend
	del 2 + nTrans

	addy b
	muly -1
next i
del 2*2
cutend
cutend

! --- RAILS --------------------------------------------------------------------
material matPost

! --- Left rail ---
if rail_m = 3 | rail_m = 1 then		! Left, Both
	if bSameRails then
		leftRailType_m = rightRailType_m
		leftWireType_m = rightWireType_m
	endif

	isCuttingOnLeftSide = ((widthStringer-leftRailFrameThk*0.75) > leftRailOffset)
	if isCuttingOnLeftSide then
		addx -treadHeight/tan(ang) - distNoseStringer/sin(ang)
		roty -ang
		cutplane{2} 180, 2
		del 2
	endif

	ADD -leftRailOvhgBottom,flightWidth-leftRailOffset-leftRailFrameThk/2,-leftRailOvhgBottom*tan(ang)+treadHeight

	lraSimple=a+leftRailOvhgBottom+leftRailOvhgTop
	lraComplex=a-treadDepth
	additionXComplex=leftRailOvhgBottom+treadDepth/2
	additionZComplex=leftRailOvhgBottom*tan(ang)
	hrovL=treadDepth/2+leftRailOvhgBottom
	hrovR=treadDepth/2+leftRailOvhgTop
	IF leftRailType_m = 10 THEN	! Rail Post with Bars
		postNumber=max(2,(a-treadDepth)/(3*treadDepth))
	else
		postNumber=(a+leftRailOvhgBottom+leftRailOvhgTop)/(3*treadDepth)+1
	endif
	railAngle	= ang
	side = SIDE_LEFT
	gosub "callRailsForStair"

	DEL 1

	! Bottom side
	add 0, flightWidth - leftRailOffset - railFrameThk/2, 0
	HOTSPOT 0,0,treadHeight+railDist+railHeight-leftRailOvhgBottom*tan(ang),unID,leftRailOvhgBottom, 1+128		: unID=unID+1
	HOTSPOT 0.1,0,treadHeight+railDist+railHeight-leftRailOvhgBottom*tan(ang),unID,leftRailOvhgBottom, 3		: unID=unID+1
	HOTSPOT -leftRailOvhgBottom,0,treadHeight+railDist+railHeight-leftRailOvhgBottom*tan(ang),unID,leftRailOvhgBottom, 2		: unID=unID+1

	HOTSPOT -leftRailOvhgBottom,leftRailOffset,treadHeight+railDist-leftRailOvhgBottom*tan(ang),unID,leftRailOffset, 1+128		: unID=unID+1
	HOTSPOT -leftRailOvhgBottom,leftRailOffset-0.1,treadHeight+railDist-leftRailOvhgBottom*tan(ang),unID,leftRailOffset, 3		: unID=unID+1
	HOTSPOT -leftRailOvhgBottom,0,treadHeight+railDist-leftRailOvhgBottom*tan(ang),unID,leftRailOffset, 2		: unID=unID+1

	HOTSPOT -leftRailOvhgBottom,0,treadHeight-leftRailOvhgBottom*tan(ang),unID,leftRailDist, 1+128		: unID=unID+1
	HOTSPOT -leftRailOvhgBottom,0,treadHeight-0.1-leftRailOvhgBottom*tan(ang),unID,leftRailDist, 3		: unID=unID+1
	HOTSPOT -leftRailOvhgBottom,0,treadHeight+railDist-leftRailOvhgBottom*tan(ang),unID,leftRailDist, 2		: unID=unID+1

	HOTSPOT -leftRailOvhgBottom,0,treadHeight-leftRailOvhgBottom*tan(ang)+railDist,unID,leftRailHeight, 1+128		: unID=unID+1
	HOTSPOT -leftRailOvhgBottom,0,treadHeight-leftRailOvhgBottom*tan(ang)+railDist-0.1,unID,leftRailHeight, 3		: unID=unID+1
	HOTSPOT -leftRailOvhgBottom,0,treadHeight-leftRailOvhgBottom*tan(ang)+railDist+railHeight,unID,leftRailHeight, 2	: unID=unID+1

	! Top side
	HOTSPOT nRisers*treadDepth,0,(nRisers+1)*treadHeight+leftRailOvhgTop*tan(ang)+railHeight+railDist,unID,leftRailOvhgTop, 1+128			: unID=unID+1
	HOTSPOT nRisers*treadDepth-0.1,0,(nRisers+1)*treadHeight+leftRailOvhgTop*tan(ang)+railHeight+railDist,unID,leftRailOvhgTop, 3			: unID=unID+1
	HOTSPOT nRisers*treadDepth+leftRailOvhgTop,0,(nRisers+1)*treadHeight+leftRailOvhgTop*tan(ang)+railHeight+railDist,unID,leftRailOvhgTop, 2			: unID=unID+1

	HOTSPOT nRisers*treadDepth+leftRailOvhgTop,leftRailOffset,(nRisers+1)*treadHeight+railDist+leftRailOvhgTop*tan(ang),unID,leftRailOffset, 1+128		: unID=unID+1
	HOTSPOT nRisers*treadDepth+leftRailOvhgTop,leftRailOffset-0.1,(nRisers+1)*treadHeight+railDist+leftRailOvhgTop*tan(ang),unID,leftRailOffset, 3		: unID=unID+1
	HOTSPOT nRisers*treadDepth+leftRailOvhgTop,0,(nRisers+1)*treadHeight+railDist+leftRailOvhgTop*tan(ang),unID,leftRailOffset, 2		: unID=unID+1

	HOTSPOT nRisers*treadDepth+leftRailOvhgTop,0,(nRisers+1)*treadHeight+(leftRailOvhgTop)*tan(ang),unID,leftRailDist, 1+128		: unID=unID+1
	HOTSPOT nRisers*treadDepth+leftRailOvhgTop,0,(nRisers+1)*treadHeight+(leftRailOvhgTop)*tan(ang)-0.1,unID,leftRailDist, 3		: unID=unID+1
	HOTSPOT nRisers*treadDepth+leftRailOvhgTop,0,(nRisers+1)*treadHeight+(leftRailOvhgTop)*tan(ang)+railDist,unID,leftRailDist, 2		: unID=unID+1

	HOTSPOT nRisers*treadDepth+leftRailOvhgTop,0,(nRisers+1)*treadHeight+leftRailOvhgTop*tan(ang)+railDist,unID,leftRailHeight, 1+128			: unID=unID+1
	HOTSPOT nRisers*treadDepth+leftRailOvhgTop,0,(nRisers+1)*treadHeight+leftRailOvhgTop*tan(ang)+railDist-0.1,unID,leftRailHeight, 3			: unID=unID+1
	HOTSPOT nRisers*treadDepth+leftRailOvhgTop,0,(nRisers+1)*treadHeight+leftRailOvhgTop*tan(ang)+railDist+railHeight,unID,leftRailHeight, 2			: unID=unID+1
	del 1

	if isCuttingOnLeftSide then cutend
ENDIF

! --- Right rail ---
if rail_m = 2 | rail_m = 1 then		! Right, Both
	isCuttingOnRightSide = ((widthStringer-rightRailFrameThk*0.75) > rightRailOffset)
	if isCuttingOnRightSide then
		addx -treadHeight/tan(ang) - distNoseStringer/sin(ang)
		roty -ang
		cutplane{2} 180, 2
		del 2
	endif

	ADD -rightRailOvhgBottom-nosing*0,rightRailOffset+rightRailFrameThk/2,-rightRailOvhgBottom*tan(ang)+treadHeight

	lraSimple=a+rightRailOvhgBottom+rightRailOvhgTop
	lraComplex=a-treadDepth
	additionXComplex=rightRailOvhgBottom+treadDepth/2
	additionZComplex=rightRailOvhgBottom*tan(ang)
	hrovL=treadDepth/2+rightRailOvhgBottom
	hrovR=treadDepth/2+rightRailOvhgTop
	IF rightRailType_m = 10 THEN	! Rail Post with Bars
		postNumber=max(2,(a-treadDepth)/(3*treadDepth))
	else
		postNumber=(a+rightRailOvhgBottom+rightRailOvhgTop)/(3*treadDepth)+1
	endif
	railAngle	= ang
	side = SIDE_RIGHT
	gosub "callRailsForStair"

	DEL 1

	! Bottom side
	add -nosing*0, rightRailOffset + railFrameThk/2, 0
	HOTSPOT 0,0,treadHeight+railDist+railHeight-rightRailOvhgBottom*tan(ang),unID,rightRailOvhgBottom, 1+128		: unID=unID+1
	HOTSPOT -0.1,0,treadHeight+railDist+railHeight-rightRailOvhgBottom*tan(ang),unID,rightRailOvhgBottom, 3		: unID=unID+1
	HOTSPOT -rightRailOvhgBottom,0,treadHeight+railDist+railHeight-rightRailOvhgBottom*tan(ang),unID,rightRailOvhgBottom, 2		: unID=unID+1

	HOTSPOT -rightRailOvhgBottom,-rightRailOffset,treadHeight+leftRailDist-rightRailOvhgBottom*tan(ang),unID,rightRailOffset, 1+128		: unID=unID+1
	HOTSPOT -rightRailOvhgBottom,-rightRailOffset+0.1,treadHeight+leftRailDist-rightRailOvhgBottom*tan(ang),unID,rightRailOffset, 3		: unID=unID+1
	HOTSPOT -rightRailOvhgBottom,0,treadHeight+leftRailDist-rightRailOvhgBottom*tan(ang),unID,rightRailOffset, 2		: unID=unID+1

	HOTSPOT -rightRailOvhgBottom,0,treadHeight-rightRailOvhgBottom*tan(ang),unID,rightRailDist, 1+128		: unID=unID+1
	HOTSPOT -rightRailOvhgBottom,0,treadHeight-0.1-rightRailOvhgBottom*tan(ang),unID,rightRailDist, 3		: unID=unID+1
	HOTSPOT -rightRailOvhgBottom,0,treadHeight+leftRailDist-rightRailOvhgBottom*tan(ang),unID,rightRailDist, 2		: unID=unID+1

	HOTSPOT -rightRailOvhgBottom,0,treadHeight-rightRailOvhgBottom*tan(ang)+railDist,unID,rightRailHeight, 1+128		: unID=unID+1
	HOTSPOT -rightRailOvhgBottom,0,treadHeight-rightRailOvhgBottom*tan(ang)+railDist-0.1,unID,rightRailHeight, 3		: unID=unID+1
	HOTSPOT -rightRailOvhgBottom,0,treadHeight-rightRailOvhgBottom*tan(ang)+railDist+railHeight,unID,rightRailHeight, 2	: unID=unID+1

	! Top side
	HOTSPOT nRisers*treadDepth,0,(nRisers+1)*treadHeight+rightRailOvhgTop*tan(ang)+railDist+railHeight,unID,rightRailOvhgTop, 1+128			: unID=unID+1
	HOTSPOT nRisers*treadDepth+0.1,0,(nRisers+1)*treadHeight+rightRailOvhgTop*tan(ang)+railDist+railHeight,unID,rightRailOvhgTop, 3			: unID=unID+1
	HOTSPOT nRisers*treadDepth+rightRailOvhgTop,0,(nRisers+1)*treadHeight+rightRailOvhgTop*tan(ang)+railDist+railHeight,unID,rightRailOvhgTop, 2			: unID=unID+1

	HOTSPOT nRisers*treadDepth+rightRailOvhgTop,-rightRailOffset,(nRisers+1)*treadHeight+railDist+rightRailOvhgTop*tan(ang),unID,rightRailOffset, 1+128		: unID=unID+1
	HOTSPOT nRisers*treadDepth+rightRailOvhgTop,-rightRailOffset+0.1,(nRisers+1)*treadHeight+railDist+rightRailOvhgTop*tan(ang),unID,rightRailOffset, 3		: unID=unID+1
	HOTSPOT nRisers*treadDepth+rightRailOvhgTop,0,(nRisers+1)*treadHeight+railDist+rightRailOvhgTop*tan(ang),unID,rightRailOffset, 2		: unID=unID+1

	HOTSPOT nRisers*treadDepth+rightRailOvhgTop,0,(nRisers+1)*treadHeight+(rightRailOvhgTop)*tan(ang),unID,rightRailDist, 1+128		: unID=unID+1
	HOTSPOT nRisers*treadDepth+rightRailOvhgTop,0,(nRisers+1)*treadHeight+(rightRailOvhgTop)*tan(ang)-0.1,unID,rightRailDist, 3		: unID=unID+1
	HOTSPOT nRisers*treadDepth+rightRailOvhgTop,0,(nRisers+1)*treadHeight+(rightRailOvhgTop)*tan(ang)+railDist,unID,rightRailDist, 2		: unID=unID+1

	HOTSPOT nRisers*treadDepth+rightRailOvhgTop,0,(nRisers+1)*treadHeight+rightRailOvhgTop*tan(ang)+railDist,unID,rightRailHeight, 1+128			: unID=unID+1
	HOTSPOT nRisers*treadDepth+rightRailOvhgTop,0,(nRisers+1)*treadHeight+rightRailOvhgTop*tan(ang)+railDist-0.1,unID,rightRailHeight, 3			: unID=unID+1
	HOTSPOT nRisers*treadDepth+rightRailOvhgTop,0,(nRisers+1)*treadHeight+rightRailOvhgTop*tan(ang)+railDist+railHeight,unID,rightRailHeight, 2			: unID=unID+1
	del 1

	if isCuttingOnRightSide then cutend
ENDIF

! ==============================================================================
! top below floor level
! ==============================================================================

if topTreadLevel_m = 2 then		! Top Tread below Floor Level	! currently unused!

	intTreadNum	= int(a/treadDepth)
	widthTread	= a/intTreadNum
	heightTread	= zzyzx/intTreadNum

	ang=atn(zzyzx/a)
	y=stairSlabThk/cos(ang)
	x=stairSlabThk/sin(ang)

	intTreadNum = intTreadNum-1

! --- base ---------------------------------------------------------------------
	material bmat

	! --- concrete ---
	if stairBaseType_m = 1 then		! Concrete

		for i=1 to intTreadNum
			put (i-1)*widthTread,i*heightTread-treadThickness,15
			put i*widthTread,i*heightTread-treadThickness,15
		next i

		prism_ 4+(2*intTreadNum),b,
				0,0,15,
				get (nsp),
				a-widthTread,zzyzx-treadThickness-heightTread,15,
				a-widthTread,zzyzx-y-heightTread,15,
				x,0,15
	endif

	! --- wood ---
	if stairBaseType_m = 2 then		! Wood

		for i=1 to intTreadNum
			put (i-1)*widthTread,i*heightTread-treadThickness,15
			put i*widthTread,i*heightTread-treadThickness,15
		next i

		addz 0.15
		prism_ 4+(2*intTreadNum),0.05,
				0,0,15,
				use (nsp),
				a,zzyzx-treadThickness,15,
				a,zzyzx-y,15,
				x,0,15
		del 1

		addz b-0.2
		prism_ 4+(2*intTreadNum),0.05,
				0,0,15,
				get (nsp),
				a,zzyzx-treadThickness,15,
				a,zzyzx-y,15,
				x,0,15
		del 1
	endif

	! --- Treads -------------------------------------------------------------------
	material matTread

	for i=1 to intTreadNum
		put (i-1)*widthTread-nosing,i*heightTread-treadThickness,15
		put i*widthTread,i*heightTread-treadThickness,15
		put i*widthTread,i*heightTread,15
		put (i-1)*widthTread-nosing,i*heightTread,15
	next i

	for k=1 to intTreadNum
		base
		prism_ 4,b,
				get (12)

		vert 0, 0, 0 !#1
		vert 0, 0, 1 !#2
		vert 0, 1, 0 !#3
		vert -1, 0, 0 !#4
		coor 2, -1, -2,-3, -4
		body -1
	next k


	! --- RAILS --------------------------------------------------------------------
	material matPost

	! --- Right rail ---
	if rail_m = 2 | rail_m = 1 then		! Right, Both
		bLeftSide = 0
		railBarDepth = rightRailBarDepth
		railBarThk = rightRailBarThk
		railWireDepth = rightRailWireDepth
		railWireThk = rightRailWireThk
		RailWireDiam = rightRailWireDiam
		gosub "one_rail_simple"
	endif
	! --- Left rail ---
	if rail_m = 3 | rail_m = 1 then		! Left, Both
		addz b-0.09
		bLeftSide = 1
		railBarDepth = leftRailBarDepth
		railBarThk = leftRailBarThk
		railWireDepth = leftRailWireDepth
		railWireThk = leftRailWireThk
		RailWireDiam = leftRailWireDiam
		gosub "one_rail_simple"
		del 1
	endif

endif


end
! ==============================================================================
"callRailsForStair":
! ------------------------------------------------------------------------------
!	lraSimple
!	lraComplex
!	additionXComplex
!	additionZComplex
!	hrovL: rail overhang start
!	hrovR: rail overhang end
!	postNumber:   number of posts
!	side: SIDE_LEFT or SIDE_RIGHT
! ==============================================================================
	ani = railAngle
	additionXComplex = additionXComplex
	additionZComplex = additionZComplex
	if side = SIDE_LEFT then
		dsComplex = leftRailDist+treadDepth/2*tan(ang)
	else
		dsComplex = rightRailDist+treadDepth/2*tan(ang)
	endif

	gosub "callRails"
return


! ==============================================================================
"callRails":
! ------------------------------------------------------------------------------
!	ani
!	additionXComplex
!	additionZComplex
!	dsComplex
!  ------------------
!	side: SIDE_LEFT or SIDE_RIGHT
!	lraSimple
!	lraComplex
!	hrovL: rail overhang start
!	hrovR: rail overhang end
!	postNumber:   number of posts
! ==============================================================================
	if side = SIDE_LEFT then
		railBarDepth		= leftRailBarDepth
		railBarDiam			= railBarDepth
		railHeight			= leftRailHeight
		railBarFillThk		= leftRailBarThk
		railFrameThk		= leftRailFrameThk
		railDist			= leftRailDist
		railType_m			= leftRailType_m
		railPostSize		= leftRailPostSize
		barNumber			= nBarsLeftRail
		railWireType		= leftWireType_m
		if leftRailType_m = RAIL_WIRED then
			railBarThk		= leftRailWireThk
			railBarDepth	= leftRailWireDepth
			railBarDiam		= leftRailWireDiam
		endif
	else
		railBarDepth		= rightRailBarDepth
		railBarDiam			= railBarDepth
		railHeight			= rightRailHeight
		railBarFillThk		= rightRailBarThk
		railFrameThk		= rightRailFrameThk
		railDist			= rightRailDist
		railType_m			= rightRailType_m
		railPostSize		= rightRailPostSize
		barNumber			= nBarsRightRail
		railWireType		= rightWireType_m
		if rightRailType_m = RAIL_WIRED then
			railBarThk		= rightRailWireThk
			railBarDepth	= rightRailWireDepth
			railBarDiam		= rightRailWireDiam
		endif
	endif

	call "stairRails_m" parameters	railType_m				= railType_m,
									iStairType				= 1,
									bEnableWired02Rail		= 0,
									bEnableNonVerticalRail	= 0,
									additionXComplex		= additionXComplex,
									additionZComplex		= additionZComplex,
									ptyp_m					= 1,
									ani						= ani,
									ab						= 0,
									rb						= 0,
									rom_m					= 1,
									rmm_m					= 1,
									lraSimple				= lraSimple,
									lraComplex				= lraComplex,
									railHeight				= railHeight,
									railHeightComplex		= dsComplex,
									railDist				= railDist,
									gs_detlevel_3D_m		= gs_detlevel_3D_m,
									gs_cont_pen				= gs_cont_pen,
									res						= res,
									rescs					= rescs,
									gs_shadow				= gs_shadow,

									railFrameThk			= railFrameThk,
									railBarDepth			= railBarDepth,
									railBarFillThk			= railBarFillThk,
									railBarDiam				= railBarDiam,
									balusterDist			= treadDepth,
									railFrameMat			= matBar,
									railBaluFillMat			= matSurface,
									barNumber				= barNumber,
									hrovL					= hrovL,
									hrovR					= hrovR,
									railHandrailMat			= matHandrail,
									iBalusterStyle			= railWireType,
									railPostDiam			= railPostSize,
									railPostWidth			= railPostSize,
									railPostThk				= railFrameThk,
									postNumber				= postNumber,
									railPostMat				= matPost

return

! ==============================================================================
! one side of the railing with simple representation
!	bLeftSide =
!	railBarDepth =
!	railBarThk =
! ==============================================================================
"one_rail_simple":
	material matSurface
	if rightRailType_m = 6 then
		addz 0.03
		poly_ 6,
				widthTread/2,heightTread+0.05+heightTread/2,1,
				widthTread/2,heightTread+1,1,
				a-widthTread/2,zzyzx+1,1,
				a,zzyzx+1,1,
				a,zzyzx+0.05+heightTread/2,1,
				a-widthTread/2,zzyzx+0.05+heightTread/2,1
		del 1
	endif

	material matHandrail
	if rightRailType_m = 5 then
		addz 0.01
		prism_ 14,0.05,
				widthTread/2,heightTread+0.05+heightTread/2,15,
				widthTread/2,heightTread+1,15,
				a-widthTread/2,zzyzx+1,15,
				a,zzyzx+1,15,
				a,zzyzx+0.05+heightTread/2,15,
				a-widthTread/2,zzyzx+0.05+heightTread/2,15,
				widthTread/2,heightTread+0.05+heightTread/2,-1,

				widthTread/2+0.03,heightTread+0.05+heightTread/2+0.03/tan(bet),15,
				widthTread/2+0.03,heightTread+1-0.03*tan(bet),15,
				a-widthTread/2+0.03*tan(ang/2),zzyzx+0.97,15,
				a-0.03,zzyzx+0.97,15,
				a-0.03,zzyzx+0.08+heightTread/2,15,
				a-widthTread/2-tan(ang/2)*0.03,zzyzx+0.08+heightTread/2,15,
				widthTread/2+0.03,heightTread+0.05+heightTread/2+0.03/tan(bet),-1
		del 1
	endif

	if rightRailType_m = 6 then
		addz 0.01
		prism_ 14,0.05,
				widthTread/2,heightTread+0.05+heightTread/2,15,
				widthTread/2,heightTread+1,15,
				a-widthTread/2,zzyzx+1,15,
				a,zzyzx+1,15,
				a,zzyzx+0.05+heightTread/2,15,
				a-widthTread/2,zzyzx+0.05+heightTread/2,15,
				widthTread/2,heightTread+0.05+heightTread/2,-1,

				widthTread/2+0.03,heightTread+0.05+heightTread/2+0.03/tan(bet),15,
				widthTread/2+0.03,heightTread+1-0.03*tan(bet),15,
				a-widthTread/2+0.03*tan(ang/2),zzyzx+0.97,15,
				a-0.03,zzyzx+0.97,15,
				a-0.03,zzyzx+0.08+heightTread/2,15,
				a-widthTread/2-tan(ang/2)*0.03,zzyzx+0.08+heightTread/2,15,
				widthTread/2+0.03,heightTread+0.05+heightTread/2+0.03/tan(bet),-1

		addz 0.025

		material matSurface
		poly_ 6,
				widthTread/2+0.03,heightTread+0.05+heightTread/2+0.03/tan(bet),1,
				widthTread/2+0.03,heightTread+1-0.03*tan(bet),1,
				a-widthTread/2+0.03*tan(ang/2),zzyzx+0.97,1,
				a-0.03,zzyzx+0.97,1,
				a-0.03,zzyzx+0.08+heightTread/2,1,
				a-widthTread/2-tan(ang/2)*0.03,zzyzx+0.08+heightTread/2,1

		del 2
	endif

	if rightRailType_m = 1 then
		addz 0.02
		MATERIAL matHandrail
		prism_ 14,0.05,
				widthTread/2,heightTread+0.05+heightTread/2,15,
				widthTread/2,heightTread+1,15,
				a-widthTread/2,zzyzx+1,15,
				a,zzyzx+1,15,
				a,zzyzx+0.05+heightTread/2,15,
				a-widthTread/2,zzyzx+0.05+heightTread/2,15,
				widthTread/2,heightTread+0.05+heightTread/2,-1,

				widthTread/2+0.03,heightTread+0.05+heightTread/2+0.03/tan(bet),15,
				widthTread/2+0.03,heightTread+1-0.03/tan((90+ang)/2),15,
				a-widthTread/2+0.03*tan(ang/2),zzyzx+0.97,15,
				a-0.03,zzyzx+0.97,15,
				a-0.03,zzyzx+0.08+heightTread/2,15,
				a-widthTread/2-tan(ang/2)*0.03,zzyzx+0.08+heightTread/2,15,
				widthTread/2+0.03,heightTread+0.05+heightTread/2+0.03/tan(bet),-1

		add widthTread/2,heightTread/2,0.01

		for u=1 to (intTreadNum)*2-1
			add widthTread/2,heightTread/2,0
			MATERIAL matBar
			prism_ 4,0.03,
					-0.015,heightTread+0.05-0.015*tan(ang)+0.03/cos(ang),15,
					-0.015,heightTread/2+1-0.03/cos(ang)-0.015*tan(ang),15,
					0.015,heightTread/2+1-0.03/cos(ang)+0.015*tan(ang),15,
					0.015,heightTread+0.05+0.015*tan(ang)+0.03/cos(ang),15
		next u
		del (intTreadNum)*2
		del 1

		MATERIAL matPost
		prism_ 4,0.09,
				a-widthTread/2-tan(ang/2)*0.03,zzyzx,15,
				a-widthTread/2-tan(ang/2)*0.03+0.09,zzyzx,15,
				a-widthTread/2-0.03*tan(ang/2)+0.09,zzyzx+1.1,15,
				a-widthTread/2-0.03*tan(ang/2),zzyzx+1.1,15

		prism_ 4,0.09,
				widthTread/2,heightTread,15,
				widthTread/2-0.09,heightTread,15,
				widthTread/2-0.09,heightTread+1.1,15,
				widthTread/2,heightTread+1.1,15

	endif

	if rightRailType_m = 2 then
		if bLeftSide then addz 0.05-railBarDepth
		addz 0.02
		barDistance = (0.95-railBarThk-heightTread/2)/(nBarsRightRail-1)
		for u=1 to nBarsRightRail
			MATERIAL matBar
			prism_ 6,railBarDepth,
					widthTread/2,heightTread+0.05+heightTread/2,15,
					widthTread/2,heightTread+0.05+heightTread/2+bth,15,
					a-widthTread/2,zzyzx+0.05+heightTread/2+bth,15,
					a-railBarDepth-0.04,zzyzx+0.05+heightTread/2+bth,15,
					a-railBarDepth-0.04,zzyzx+heightTread/2+0.05,15,
					a-widthTread/2,zzyzx+heightTread/2+0.05,15
			addy barDistance
		next u

		del nBarsRightRail+1

		MATERIAL matPost
		prism_ 4,railBarDepth+0.04,
				a,zzyzx,15,
				a-railBarDepth-0.04,zzyzx,15,
				a-railBarDepth-0.04,zzyzx+1.1,15,
				a,zzyzx+1.1,15

		prism_ 4,railBarDepth+0.04,
				widthTread/2,heightTread,15,
				widthTread/2-railBarDepth-0.04,heightTread,15,
				widthTread/2-railBarDepth-0.04,heightTread+1.1,15,
				widthTread/2,heightTread+1.1,15

		if bLeftSide then del 1
	endif

return

