
! RC Spiral Wooden

IF gs_detlevel_3D_m = DET3D_OFF THEN END

IF GLOB_CONTEXT>20 and GLOB_CONTEXT<40 THEN 		!! FOR Simple Model and in 3D Windoow
	gs_detlevel_3D_m = DET3D_SIMPLE
ENDIF

IF not(gs_shadow) THEN SHADOW OFF

ROTz fokszog
PEN gs_cont_PEN
FILL gs_FILL_type


!!!!!!!!!!!!!!!!!!!!!!!!! *** HOTSPOTs RailUNID *** !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

	FlightUNID=1			!!! 1-15
	!!! RailUNID=1000		!!! 1000,1100,1200

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

IF iFirstTread = FIRSTTREAD_AT_FLOOR_LEVEL THEN stt=-1 ELSE stt=0
IF iTopTread = TOPTREAD_AT_FLOOR_LEVEL THEN ett=rnu ELSE ett=rnu-1

!!! Height in origo
HOTSPOT 0,0,0, FlightUNID, zzyzx, 1+128 :FlightUNID=FlightUNID+1
HOTSPOT 0,0,-1, FlightUNID, zzyzx, 3 :FlightUNID=FlightUNID+1
HOTSPOT 0,0,zzyzx, FlightUNID, zzyzx, 2 :FlightUNID=FlightUNID+1

!!! Flight Width/ Bottom Step/ Left
kr=r-flw
HOTSPOT (r)*cos(fokszog*stt),(r)*sin(fokszog*stt),0, FlightUNID, flw, 1+128 :FlightUNID=FlightUNID+1
HOTSPOT (r+1)*cos(fokszog*stt),(r+1)*sin(fokszog*stt),0, FlightUNID, flw, 3 :FlightUNID=FlightUNID+1
HOTSPOT (r-flw)*cos(fokszog*stt),(r-flw)*sin(fokszog*stt),0, FlightUNID, flw, 2 :FlightUNID=FlightUNID+1

!!! Flight Width/ Bottom Step/ Right
HOTSPOT 0,0,0, FlightUNID, r, 1+128 :FlightUNID=FlightUNID+1
HOTSPOT (r)*cos(fokszog*stt),(r)*sin(fokszog*stt),0, FlightUNID, r, 2 :FlightUNID=FlightUNID+1
HOTSPOT (-1)*cos(fokszog*stt),(-1)*sin(fokszog*stt),0, FlightUNID, r, 3 :FlightUNID=FlightUNID+1

!!! Flight Width/ Top Step/ Left
HOTSPOT (r)*cos(fokszog*ett),(r)*sin(fokszog*ett),zzyzx, FlightUNID, flw, 1+128 :FlightUNID=FlightUNID+1
HOTSPOT (r+1)*cos(fokszog*ett),(r+1)*sin(fokszog*ett),zzyzx, FlightUNID, flw, 3 :FlightUNID=FlightUNID+1
HOTSPOT (r-flw)*cos(fokszog*ett),(r-flw)*sin(fokszog*ett),zzyzx, FlightUNID, flw, 2 :FlightUNID=FlightUNID+1

!!! Flight Width/ Top Step/ Right
HOTSPOT 0,0,zzyzx, FlightUNID, r, 1+128 :FlightUNID=FlightUNID+1
HOTSPOT (r)*cos(ett*fokszog),(r)*sin(ett*fokszog),zzyzx, FlightUNID, r, 2 :FlightUNID=FlightUNID+1
HOTSPOT (-1)*cos(ett*fokszog),(-1)*sin(ett*fokszog),zzyzx, FlightUNID, r, 3 :FlightUNID=FlightUNID+1


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

addz -rt

GROUP "treadcutsoff"
!!!!		FIRST & TOP TREAD CUT		!!!!
	MATERIAL matsoff
	SECT_FILL typeFillSoffit, penBackFillSoffit, penFillSoffit, penLineSoffit

	rk=(r-flw)/2
!!!!	FIRST
	IF iFirstTread = FIRSTTREAD_AT_FLOOR_LEVEL THEN stp=-3 ELSE stp=-2
	ADDz -sh
	PRISM_ 5,
		2*sh+th,
		rk*cos((stp)*fokszog), rk*sin((stp)*fokszog), 15,
		(r+1)*cos((stp)*fokszog), (r+1)*sin((stp)*fokszog), 15,
		(r+1)*cos((stp+2)*fokszog), (r+1)*sin((stp+2)*fokszog), 15,
		rk*cos((stp+2)*fokszog), rk*sin((stp+2)*fokszog), 15,
		rk*cos((stp)*fokszog), rk*sin((stp)*fokszog), 15
	DEL 1
!!!!	TOP
	IF iTopTread = TOPTREAD_AT_FLOOR_LEVEL THEN
		stp=rnu
		ADDz sh-pd+(rnu)*th-lst
	ELSE
		ADDz sh-pd+rnu*th-lst
		stp=rnu-1
	ENDIF
	PRISM_ 5,
		2*sh+th,
		rk*cos((stp+2)*fokszog), rk*sin((stp+2)*fokszog),15,
		(r+1)*cos((stp+2)*fokszog), (r+1)*sin((stp+2)*fokszog),15,
		(r+1)*cos((stp)*fokszog), (r+1)*sin((stp)*fokszog),15,
		rk*cos((stp)*fokszog), rk*sin((stp)*fokszog),15,
		rk*cos((stp+2)*fokszog), rk*sin((stp+2)*fokszog),15
	DEL 1
ENDGROUP

GROUP "treadcutstr"
!!!!		FIRST & TOP TREAD CUT		!!!!
	MATERIAL matstr
	SECT_FILL typeFillStringer, penBackFillStringer, penFillStringer, penLineStringer

	rk=(r-flw)/2
!!!!	FIRST
	IF iFirstTread = FIRSTTREAD_AT_FLOOR_LEVEL THEN stp=-3 ELSE stp=-2
	ADDz -sh
	PRISM_ 5,
		2*sh+th,
		rk*cos((stp)*fokszog), rk*sin((stp)*fokszog), 15,
		(r+1)*cos((stp)*fokszog), (r+1)*sin((stp)*fokszog), 15,
		(r+1)*cos((stp+2)*fokszog), (r+1)*sin((stp+2)*fokszog), 15,
		rk*cos((stp+2)*fokszog), rk*sin((stp+2)*fokszog), 15,
		rk*cos((stp)*fokszog), rk*sin((stp)*fokszog), 15
	DEL 1
!!!!	TOP
	IF iTopTread = TOPTREAD_AT_FLOOR_LEVEL THEN
		stp=rnu
		ADDz sh-pd+(rnu)*th-lst
	ELSE
		ADDz sh-pd+rnu*th-lst
		stp=rnu-1
	ENDIF
	PRISM_ 5,
		2*sh+th,
		rk*cos((stp+2)*fokszog), rk*sin((stp+2)*fokszog),15,
		(r+1)*cos((stp+2)*fokszog), (r+1)*sin((stp+2)*fokszog),15,
		(r+1)*cos((stp)*fokszog), (r+1)*sin((stp)*fokszog),15,
		rk*cos((stp)*fokszog), rk*sin((stp)*fokszog),15,
		rk*cos((stp+2)*fokszog), rk*sin((stp+2)*fokszog),15
	DEL 1
ENDGROUP


!!!!!!!!!!!!!!!!!!!! *** STRINGS *** !!!!!!!!!!!!!!!!!!!!
GROUP "strings"

IF iLowerJunctionType = LOWERJUNCTION_GROUND_FLOOR THEN
	ADDz sh-pd+rt
	MATERIAL mat_tread
	SECT_FILL typeFillTread, penBackFillTread, penFillTread, penLineTread

	cutplane 180
	DEL 1
ENDIF

!!!!		Right String		!!!!

	pontszam=0
	IF iFirstTread = FIRSTTREAD_AT_FLOOR_LEVEL THEN dc=-2*res-1 ELSE dc=-1*res
	IF iTopTread = TOPTREAD_AT_FLOOR_LEVEL THEN endp=2*res+1 ELSE endp=res+1
	WHILE dc <= fordul*resolka+endp do
!		put r*cos((360/resolka)*dc), r*sin((360/resolka)*dc), (dc)*stepup
		put (r-st)*cos((360/resolka)*dc), (r-st)*sin((360/resolka)*dc), (dc)*stepup

		pontszam=pontszam+1
		dc=dc+1
	ENDWHILE

	MATERIAL matstr
	SECT_FILL typeFillStringer, penBackFillStringer, penFillStringer, penLineStringer

	TUBEA 5, pontszam, 1+2+16+32,
		FlightWidth/3,0,0,
		-st,0,0,
		-st,sh,0,
		FlightWidth/3,sh,0,
		FlightWidth/3,0,0,
!	TUBEA 5, pontszam, 1+2+16+32,
!		flw/3,0,0,
!		-st,0,0,
!		-st,sh,0,
!		flw/3,sh,0,
!		flw/3,0,0,

		get(pontszam*3)

!!!!		Left String			!!!!

	pontszam=0
	IF iFirstTread = FIRSTTREAD_AT_FLOOR_LEVEL THEN dc=-2*res ELSE dc=-1*res
	IF iTopTread = TOPTREAD_AT_FLOOR_LEVEL THEN endp=2*res+1 ELSE endp=res+1
	WHILE dc <= fordul*resolka+endp do
		put (r-flw+st)*cos((360/resolka)*dc), (r-flw+st)*sin((360/resolka)*dc),
			(dc)*stepup
!		put (r-flw)*cos((360/resolka)*dc), (r-flw)*sin((360/resolka)*dc),
!			(dc)*stepup
		pontszam=pontszam+1
		dc=dc+1
	ENDWHILE

	MATERIAL matstr
	SECT_FILL typeFillStringer, penBackFillStringer, penFillStringer, penLineStringer

	TUBEA 5, pontszam, 1+2+16+32,
		-FlightWidth/3,0,0,
		st,0,0,
		st,sh,0,
		-FlightWidth/3,sh,0,
		-FlightWidth/3,0,0,

!	TUBEA 5, pontszam, 1+2+16+32,
!		-flw/3,0,0,
!		st,0,0,
!		st,sh,0,
!		-flw/3,sh,0,
!		-flw/3,0,0,

		get(pontszam*3)


IF iLowerJunctionType = LOWERJUNCTION_GROUND_FLOOR THEN CUTEND
ENDGROUP

GROUP "cutrings"
!!!!		OUTER RING		!!!!

	pontszam=0
	dc=0
	WHILE dc <= resolka do
!		put (r+1)*cos((360/resolka)*dc), (r+1)*sin((360/resolka)*dc),15
		put (r-st+1)*cos((360/resolka)*dc), (r-st+1)*sin((360/resolka)*dc),15
		pontszam=pontszam+1
		dc=dc+1
	ENDWHILE
	dc=0
!	put (r+1)*cos((360/resolka)*dc), (r+1)*sin((360/resolka)*dc),-1
	put (r-st+1)*cos((360/resolka)*dc), (r-st+1)*sin((360/resolka)*dc),-1
	pontszam=pontszam+1

	dc=0
	WHILE dc <= resolka do
!		put (r)*cos((360/resolka)*dc), (r)*sin((360/resolka)*dc),15
		put (r-st)*cos((360/resolka)*dc), (r-st)*sin((360/resolka)*dc),15
		pontszam=pontszam+1
		dc=dc+1
	ENDWHILE
	dc=0
!	put (r)*cos((360/resolka)*dc), (r)*sin((360/resolka)*dc),-1
	put (r-st)*cos((360/resolka)*dc), (r-st)*sin((360/resolka)*dc),-1
	pontszam=pontszam+1

	MATERIAL mat_tread
	SECT_FILL typeFillTread, penBackFillTread, penFillTread, penLineTread

	ADDz -1-sh
	PRISM_ pontszam, zzyzx+2+2*sh,

		get(pontszam*3)
	DEL 1

!!!!		INNER CYLINDER			!!!!

	pontszam=0
	WHILE dc <= resolka do
!		put (r-flw)*cos((360/resolka)*dc), (r-flw)*sin((360/resolka)*dc)
		put (r-flw+st)*cos((360/resolka)*dc), (r-flw+st)*sin((360/resolka)*dc)

		pontszam=pontszam+1
		dc=dc+1
	ENDWHILE
	dc=0
!	put (r-flw)*cos((360/resolka)*dc), (r-flw)*sin((360/resolka)*dc)
	put (r-flw+st)*cos((360/resolka)*dc), (r-flw+st)*sin((360/resolka)*dc)

	pontszam=pontszam+1

	MATERIAL mat_tread
	SECT_FILL typeFillTread, penBackFillTread, penFillTread, penLineTread

	ADDz -1-sh
	PRISM pontszam, zzyzx+2+2*sh,
		get(pontszam*2)

	DEL 1
ENDGROUP


GROUP "cutringsstr"
!!!!		OUTER RING		!!!!

	pontszam=0
	dc=0
	WHILE dc <= resolka do
!		put (r)*cos((360/resolka)*dc), (r)*sin((360/resolka)*dc),1+4+8
		put (r-st)*cos((360/resolka)*dc), (r-st)*sin((360/resolka)*dc),1+4+8
		pontszam=pontszam+1
		dc=dc+1
	ENDWHILE
	dc=0
!	put (r)*cos((360/resolka)*dc), (r)*sin((360/resolka)*dc),-1
	put (r-st)*cos((360/resolka)*dc), (r-st)*sin((360/resolka)*dc),-1
	pontszam=pontszam+1

	dc=0
	WHILE dc <= resolka do
!		put (r-flw)*cos((360/resolka)*dc), (r-flw)*sin((360/resolka)*dc),1+4+8
		put (r-flw+st)*cos((360/resolka)*dc), (r-flw+st)*sin((360/resolka)*dc),1+4+8

		pontszam=pontszam+1
		dc=dc+1
	ENDWHILE
	dc=0
!	put (r-flw)*cos((360/resolka)*dc), (r-flw)*sin((360/resolka)*dc),-1
	put (r-flw+st)*cos((360/resolka)*dc), (r-flw+st)*sin((360/resolka)*dc),-1

	pontszam=pontszam+1

	MATERIAL matstr
	SECT_FILL typeFillStringer, penBackFillStringer, penFillStringer, penLineStringer

	ADDz -1-sh
	PRISM_ pontszam, zzyzx+2+2*sh,

		get(pontszam*3)
	DEL 1
ENDGROUP

!!!!	SOFFIT
GROUP "soffit"
IF soffit THEN
	pontszam=0
	resolkaSoffit = 4 *resolka
	stepupSoffit = stepup / 4
	IF iFirstTread = FIRSTTREAD_AT_FLOOR_LEVEL THEN dc=-2*res ELSE dc=-1*res
	IF iTopTread = TOPTREAD_AT_FLOOR_LEVEL THEN endp=2*res+1 ELSE endp=res+1

	WHILE dc <= fordul*resolkaSoffit+endp do
		put (r-flw)*cos((360/resolkaSoffit)*dc), (r-flw)*sin((360/resolkaSoffit)*dc),
			(dc)*stepupSoffit
		pontszam=pontszam+1
		dc=dc+1
	ENDWHILE

	MATERIAL matsoff
	SECT_FILL typeFillSoffit, penBackFillSoffit, penFillSoffit, penLineSoffit


	stl=(r-flw)/2
	stn=-0.5
	TUBEA 5, pontszam, 1+2+16+32,
		stl,0,0,
		stn-flw,0,0,
		stn-flw,softh,0,
		stl,softh,0,
		stl,0,0,

		get(pontszam*3)
ENDIF
ENDGROUP

GROUP "treads"
!!!!		BATTENS		!!!!
	IF bt_m <> BATTEN_NONE THEN
		MATERIAL mat_tread
		ADDz rt+sh-pd
		rkk=(r-flw)/2
		IF bt_m = BATTEN_NOSING THEN
			btts=th*2/3-rt
			bttl=th/3
		ENDIF
		IF bt_m = BATTEN_INTERM THEN
			btts=(th)/3-rt/2
			bttl=th/3
		ENDIF
		IF bt_m = BATTEN_TREAD THEN
			btts=0
			bttl=th/3
		ENDIF
		IF bt_m = BATTEN_FULL THEN
			btts=0
			bttl=th-rt
		ENDIF
		IF iTopTread = TOPTREAD_AT_FLOOR_LEVEL THEN endp=rnu ELSE endp=rnu+1
		IF iFirstTread = FIRSTTREAD_AT_FLOOR_LEVEL THEN strt=1 ELSE strt=1
		FOR i=strt to endp
			dx=rt*sin(i*fokszog)
			dy=-rt*cos(i*fokszog)
			ii=i-1
			ADDz th*ii+btts
			IF not(i=endp and iTopTread = TOPTREAD_BELOW_FLOOR_LEVEL) THEN
				MATERIAL mat_riser
				SECT_FILL typeFillRiser, penBackFillRiser, penFillRiser, penLineRiser

				PRISM 5, bttl,		!th-rt,
					rkk*cos(ii*fokszog),rkk*sin(ii*fokszog),
					(r+0.5)*cos(ii*fokszog), (r+0.5)*sin(ii*fokszog),
					(r+0.5)*cos(ii*fokszog)+dx, (r+0.5)*sin(ii*fokszog)+dy,
					rkk*cos(ii*fokszog)+dx, rkk*sin(ii*fokszog)+dy,
					rkk*cos(ii*fokszog),rkk*sin(ii*fokszog)
			ENDIF
			DEL 1
		NEXT i
		DEL 1
	ENDIF

!!!!		TREADS			!!!!
	ADDz sh-pd-th
	rkk=(r-flw)/2
	IF iFirstTread = FIRSTTREAD_AT_FLOOR_LEVEL THEN strt=0 ELSE strt=1
	IF iTopTread = TOPTREAD_AT_FLOOR_LEVEL THEN endp=rnu ELSE endp=rnu-1
	FOR i=strt to endp
		dx=(rt+ns)*sin(i*fokszog)
		dy=(rt+ns)*cos(i*fokszog)*(-1)
		ADDz (i+1)*th
		IF not ((i=0 and iFirstTread = FIRSTTREAD_ABOVE_FLOOR_LEVEL) or (i=rnu and iTopTread = TOPTREAD_BELOW_FLOOR_LEVEL)) THEN
			IF i=0 THEN
				dx=(rt)*sin(i*fokszog)
				dy=(rt)*cos(i*fokszog)*(-1)
			ENDIF
			MATERIAL mat_tread
			SECT_FILL typeFillTread, penBackFillTread, penFillTread, penLineTread

			PRISM 5, rt,
				rkk*cos((i-1)*fokszog)+dx, rkk*sin((i-1)*fokszog)+dy,
				(r+0.5)*cos((i-1)*fokszog)+dx, (r+0.5)*sin((i-1)*fokszog)+dy,
				(r+0.5)*cos(i*fokszog), (r+0.5)*sin(i*fokszog),
				rkk*cos(i*fokszog), rkk*sin(i*fokszog),
				rkk*cos((i-1)*fokszog)+dx, rkk*sin((i-1)*fokszog)+dy
		ENDIF
		DEL 1
	NEXT i
	DEL 1
ENDGROUP


ADDz -(sh-pd)

IF iLowerJunctionType = LOWERJUNCTION_GROUND_FLOOR THEN		!!!Cut Soffit at Bottom Step
	ADDz sh-pd
	MATERIAL mat_tread
	cutplane 180
	DEL 1
ENDIF


PLACEGROUP subgroup(subgroup("soffit","treadcutsoff"),"cutrings")
PLACEGROUP subgroup(subgroup("strings","treadcutstr"),"cutringsstr")
PLACEGROUP subgroup("treads","cutrings")



IF iLowerJunctionType = LOWERJUNCTION_GROUND_FLOOR THEN cutend


DEL 1

KILLGROUP "treads"
KILLGROUP "strings"
KILLGROUP "cutrings"
KILLGROUP "cutringsstr"
KILLGROUP "soffit"
KILLGROUP "treadcutsoff"
KILLGROUP "treadcutstr"


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! *** RAILING *** !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

IF rail_m <> RAILPOS_NONE THEN
	fordul=fordul*1.00241
	IF iTopTread = TOPTREAD_AT_FLOOR_LEVEL THEN
		zzz=zzyzx
	ELSE
		zzz=zzyzx-th
		fordul=fordul-fokszog/360
	ENDIF

	IF iFirstTread = FIRSTTREAD_AT_FLOOR_LEVEL THEN
		fordul=fokszog/360+fordul
		zz=zzz+th
	ELSE
		zz=zzz
	ENDIF

	ker	= 2*pi*(r-flw+st-roffl)
	k	= 2*pi*(r-st/2+roffr)
	nlra=sqr(k*k*fordul*fordul+zz*zz)
	klra=sqr(ker*ker*fordul*fordul+zz*zz)

	ann=atn(zz/(k*fordul))
	ank=atn(zz/(ker*fordul))

	IF iFirstTread = FIRSTTREAD_ABOVE_FLOOR_LEVEL THEN
		hsz=0
	ELSE
		ADDz -th
		ROTz -fokszog
	ENDIF

	ADDz pd
	hsz=hsz+pd

	rr=r-st/2+roffr			!!!Right Railing
	kr=r-flw+st/2-roffl		!!!Left Railing
	res=res*360/fokszog

	! ------------------------------------------------------------------------------
	! Right rail
	! ------------------------------------------------------------------------------

	if rail_m = RAILPOS_RIGHT or rail_m = RAILPOS_BOTH then
		ADDx rr
		ROTz 90

		RailUNID=1000

		!!! Rail Offset/Bottom Step/ Right
		ADDy roffr
		HOTSPOT 0, 0, dsr, RailUNID, roffr, 1+128 :RailUNID=RailUNID+1
		HOTSPOT 0, -roffr, dsr, RailUNID, roffr, 2 :RailUNID=RailUNID+1
		HOTSPOT 0, 1, dsr, RailUNID, roffr, 3 :RailUNID=RailUNID+1
		DEL 1

		!!! Distance of String/Bottom Step/ Right
		HOTSPOT 0,0,0, RailUNID, dsr, 1+128 :RailUNID=RailUNID+1
		HOTSPOT 0,0,dsr, RailUNID, dsr, 2 :RailUNID=RailUNID+1
		HOTSPOT 0,0,-1, RailUNID, dsr, 3 :RailUNID=RailUNID+1

		!!! Railing Height/Bottom Step/ Right
		HOTSPOT 0,0,dsr, RailUNID, hrr, 1+128 :RailUNID=RailUNID+1
		HOTSPOT 0,0,dsr+hrr, RailUNID, hrr, 2 :RailUNID=RailUNID+1
		HOTSPOT 0,0,dsr-1, RailUNID, hrr, 3 :RailUNID=RailUNID+1

		lraSimple=nlra
		lraComplex=nlra
		additionXComplex=0
		additionZComplex=0
		hrovL=hror
		hrovR=hror
		postNumber = npr
		side = SIDE_RIGHT
		gosub "callRailsForStair"

		del 2
	ENDIF

	! ------------------------------------------------------------------------------
	! Left rail
	! ------------------------------------------------------------------------------

	if rail_m = RAILPOS_LEFT or rail_m = RAILPOS_BOTH then
		if bSameRails then
			leftRailType_m = rightRailType_m
		endif

		ADDx kr
		ROTz 90

		IF not(bSameRails) THEN
			RailUNID=1100

			ADDy -roffl
			HOTSPOT 0,0,dsl, RailUNID, roffl, 1+128 :RailUNID=RailUNID+1
			HOTSPOT 0,roffl,dsl, RailUNID, roffl, 2 :RailUNID=RailUNID+1
			HOTSPOT 0,-1,dsl, RailUNID, roffl, 3 :RailUNID=RailUNID+1
			DEL 1

			HOTSPOT 0,0,0, RailUNID, dsl, 1+128 :RailUNID=RailUNID+1
			HOTSPOT 0,0,dsl, RailUNID, dsl, 2 :RailUNID=RailUNID+1
			HOTSPOT 0,0,-1, RailUNID, dsl, 3 :RailUNID=RailUNID+1

			HOTSPOT 0,0,dsl, RailUNID, hrl, 1+128 :RailUNID=RailUNID+1
			HOTSPOT 0,0,dsl+hrl, RailUNID, hrl, 2 :RailUNID=RailUNID+1
			HOTSPOT 0,0,dsl-1, RailUNID, hrl, 3 :RailUNID=RailUNID+1
		ELSE

			RailUNID=1200

			ADDy -roffr
			HOTSPOT 0,0,dsr, RailUNID, roffr, 1+128 :RailUNID=RailUNID+1
			HOTSPOT 0,roffr,dsr, RailUNID, roffr, 2 :RailUNID=RailUNID+1
			HOTSPOT 0,-1,dsr, RailUNID, roffr, 3 :RailUNID=RailUNID+1
			DEL 1

			HOTSPOT 0,0,0, RailUNID, dsr, 1+128 :RailUNID=RailUNID+1
			HOTSPOT 0,0,dsr, RailUNID, dsr, 2 :RailUNID=RailUNID+1
			HOTSPOT 0,0,-1, RailUNID, dsr, 3 :RailUNID=RailUNID+1

			HOTSPOT 0,0,dsr, RailUNID, hrr, 1+128 :RailUNID=RailUNID+1
			HOTSPOT 0,0,dsr+hrr, RailUNID, hrr, 2 :RailUNID=RailUNID+1
			HOTSPOT 0,0,dsr-1, RailUNID, hrr, 3 :RailUNID=RailUNID+1
		ENDIF

		lraSimple=klra
		lraComplex=klra
		additionXComplex=0
		additionZComplex=0
		hrovL=hrol
		hrovR=hrol
		postNumber = npl
		side = SIDE_LEFT
		gosub "callRailsForStair"

		DEL 2
	ENDIF

	DEL 1
	IF iFirstTread = FIRSTTREAD_AT_FLOOR_LEVEL THEN DEL 2
ENDIF
DEL 1

END

! ==============================================================================
"callRailsForStair":
! ------------------------------------------------------------------------------
!	lraSimple
!	lraComplex
!	additionXComplex
!	additionZComplex
!	hrovL: rail overhang start
!	hrovR: rail overhang end
!	postNumber:   number of posts
!	side: SIDE_LEFT or SIDE_RIGHT
! ==============================================================================
	additionXComplex = additionXComplex
	additionZComplex = additionZComplex
	gosub "callRails"
return

! ==============================================================================
"callRails":
! ------------------------------------------------------------------------------
!	ani
!	additionXComplex
!	additionZComplex
!	dsComplex
!  ------------------
!	side: SIDE_LEFT or SIDE_RIGHT
!	lraSimple
!	lraComplex
!	hrovL: rail overhang start
!	hrovR: rail overhang end
!	postNumber:   number of posts
! ==============================================================================
	if side = SIDE_LEFT then
		railBarDepth	= bwl
		railBarDiam		= bdl
		railHeight		= hrl
		railBarThk		= fthl
		railBarType		= btypl_m
		railFrameThk	= fthl
		railDist		= dsl
		railType_m		= leftRailType_m
		railPostDiam	= pdl
		railPostWidth	= pwl
		railPostThk		= pthl
		railPostType	= ptl_m
		barNumber		= nbl
		iBalusterStyle	= btl_m
		railFramesWSide	= fswl
		railFramesWTop	= ftwl
		railFramesWBot	= fbwl
		railBarHeight	= bhl
		railBarFillThk	= bthl
		balusterDist	= abdistl
		railFrameMat	= fmatl
		railBaluFillMat	= bmatl
		railPostMat		= pmatl
		balusterNumber	= nbtl
		railFillDist	= fdfl
!!!		railPostBaseType= gs_PostBaseTypeL_m
		railDistFromHr	= sbhl
!!!		railPostBaseOv	= gs_PostBaseOverhangL
		handRailType	= hrtl_m
		handRailWidth	= hrwl
		handRailDiam	= hrdl
		handRailHeight	= hrhl
		ani				= ank
		rb				= kr
	else
		railBarDepth	= bwr
		railBarDiam		= bdr
		railHeight		= hrr
		railBarThk		= fthr
		railBarType		= btypr_m
		railFrameThk	= fthr
		railDist		= dsr
		railType_m		= rightRailType_m
		railPostDiam	= pdr
		railPostWidth	= pwr
		railPostThk		= pthr
		railPostType	= ptr_m
		barNumber		= nbr
		iBalusterStyle	= btr_m
		railFramesWSide	= fswr
		railFramesWTop	= ftwr
		railFramesWBot	= fbwr
		railBarHeight	= bhr
		railBarFillThk	= bthr
		balusterDist	= abdistr
		railFrameMat	= fmatr
		railBaluFillMat	= bmatr
		railPostMat		= pmatr
		balusterNumber	= nbtr
		railFillDist	= fdfr
!!!		railPostBaseType= gs_PostBaseTypeR_m
		railDistFromHr	= sbhr
!!!		railPostBaseOv	= gs_PostBaseOverhangR
		handRailType	= hrtr_m
		handRailWidth	= hrwr
		handRailDiam	= hrdr
		handRailHeight	= hrhr
		ani				= ann
		rb				= rr
	endif

	call "stairRails_m" parameters	railType_m				= railType_m,
									iStairType				= 2,
									bEnableWired02Rail		= 0,
									bEnableNonVerticalRail	= 0,
									additionXComplex		= additionXComplex,
									additionZComplex		= additionZComplex,
									ptyp_m					= 3,
									ani						= ani,
									ab						= fordul*360,
									rb						= rb,
									rom_m					= 1,
									rmm_m					= 1,
									lraSimple				= lraSimple,
									lraComplex				= lraComplex,
									railHeight				= railHeight,
									railDist				= railDist,
									gs_detlevel_3D_m		= gs_detlevel_3D_m,
									gs_cont_pen				= gs_cont_pen,
									res						= res,
									rescs					= rescs,
									gs_shadow				= gs_shadow,
									railFrameThk			= railFrameThk,
									railFramesWSide			= railFramesWSide,
									railFramesWTop			= railFramesWTop,
									railFramesWBot			= railFramesWBot,
									railBarType				= railBarType,
									railBarDepth			= railBarDepth,
									railBarFillThk			= railBarFillThk,
									railBarDiam				= railBarDiam,
									balusterDist			= balusterDist,
									railFrameMat			= railFrameMat,
									railBaluFillMat			= railBaluFillMat,
									barNumber				= barNumber,
									railBarHeight			= railBarHeight,
									railFillDist			= railFillDist,
									handRailType			= handRailType,
									handRailDiam			= handRailDiam,
									handRailWidth			= handRailWidth,
									handRailHeight			= handRailHeight,
									hrovL					= hrovL,
									hrovR					= hrovR,
									iBalusterStyle			= iBalusterStyle,
									railPostDiam			= railPostDiam,
									railPostWidth			= railPostWidth,
									railPostThk				= railPostThk,
									railPostType			= railPostType,
									postNumber				= postNumber,
									railPostMat				= railPostMat,
									iParamInputType			= 1,
									balusterNumber			= balusterNumber,
!!!									railPostBaseType		= railPostBaseType,
!!!									railPostBaseOv			= railPostBaseOv,
									railDistFromHr			= railDistFromHr
return

