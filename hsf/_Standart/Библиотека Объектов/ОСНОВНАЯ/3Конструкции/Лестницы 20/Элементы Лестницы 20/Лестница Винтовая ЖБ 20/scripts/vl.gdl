
call "FM_types" parameters all
call "ui_stairs" parameters gs_ui_current_page	= gs_ui_current_page

! ---------- Length Unit ----------
w_units_form = ""
rrr					= request("Linear_dimension", "", w_units_form)
bLinearDimIsMetric	= (strstr(w_units_form, "m") > 0)


! ---------- 3D detail level ----------
values{2} "gs_detlevel_3D_m" 	DET3D_DETAILED,		stDetlevel3D[1],
								DET3D_SIMPLE,		stDetlevel3D[2],
								DET3D_OFF,			stDetlevel3D[3]

if gs_detlevel_3D_m = DET3D_SIMPLE then
	lock "gs_resol"
	hideparameter "gs_resol"
endif

if gs_detlevel_3D_m = DET3D_OFF then
	lock "gs_resol", "gs_shadow"
	hideparameter "gs_resol", "gs_shadow"
endif


!! ---------- 2D detail level ----------
values{2} "gs_detlevel_2D_m"	DET2D_SCALESENSITIVE,	stDetlevel2D[1],
								DET2D_CUSTOM,			stDetlevel2D[2]

!! ---------- Symbol Type ----------
if gs_detlevel_2D_m = DET2D_SCALESENSITIVE then
	values{2} "iSymbolGroup"	SYMBOLGROUP_TYPE1,	stSymbolGroup[1],
								SYMBOLGROUP_TYPE2,	stSymbolGroup[2],
								SYMBOLGROUP_TYPE3,	stSymbolGroup[3],
								SYMBOLGROUP_TYPE4,	stSymbolGroup[4],
								SYMBOLGROUP_TYPE5,	stSymbolGroup[5],
								SYMBOLGROUP_TYPE6,	stSymbolGroup[6],
								SYMBOLGROUP_TYPE7,	stSymbolGroup[7],
								SYMBOLGROUP_TYPE8,	stSymbolGroup[8]

	lock			"gs_SymbolType_m"
	hideparameter	"gs_SymbolType_m"


	!! ----------------- Simple to Middle Scale -----------------
	if bLinearDimIsMetric then
		_iEnableScaleSMTypes	= 2 + 4 + 8 + 16 + 32 + 64
	else
		_iEnableScaleSMTypes	= 128 + 256 + 512 + 1024 + 2048 + 4096 + 8192 + 16384
	endif

	dim _iEnableScaleSMTypeValueList[]
	dim _stEnableScaleSMTypeValueList[]
	j = 1
	for i = 1 to vardim1(iScaleType)
		if bittest(_iEnableScaleSMTypes, i) then
			_iEnableScaleSMTypeValueList[j] = iScaleType[i]
			_stEnableScaleSMTypeValueList[j] = stScaleType[i]
			j = j + 1
		endif
	next i
	_iEnableScaleSMTypeValueList[j] = iScaleType[15]
	_stEnableScaleSMTypeValueList[j] = stScaleType[15]
	values{2} "iScaleChangeSM" _iEnableScaleSMTypeValueList, _stEnableScaleSMTypeValueList
	if iScaleChangeSM = SCALE_CUSTOM then
		values "gs_ScaleChangeSM"	range (1,)
	else
		gs_ScaleChangeSM = iScaleChangeSM
		parameters	gs_ScaleChangeSM = gs_ScaleChangeSM

		lock			"gs_ScaleChangeSM"
		hideparameter	"gs_ScaleChangeSM"
	endif

	
	!! ----------------- Middle to Detailed Scale -----------------
	if bLinearDimIsMetric then
		_iEnableScaleMDTypes	= 2 + 4 + 8 + 16 + 32 + 64
	else
		_iEnableScaleMDTypes	= 128 + 256 + 512 + 1024 + 2048 + 4096 + 8192 + 16384
	endif

	dim _iEnableScaleMDTypeValueList[]
	dim _stEnableScaleMDTypeValueList[]
	j = 1
	for i = 1 to vardim1(iScaleType)
		if bittest(_iEnableScaleMDTypes, i) then
			if iScaleChangeSM = SCALE_CUSTOM then
				if gs_ScaleChangeSM > iScaleType[i] then
					_iEnableScaleMDTypeValueList[j] = iScaleType[i]
					_stEnableScaleMDTypeValueList[j] = stScaleType[i]
					j = j + 1
				else
					i = vardim1(iScaleType)
				endif
			else
				_iEnableScaleMDTypeValueList[j] = iScaleType[i]
				_stEnableScaleMDTypeValueList[j] = stScaleType[i]

				if gs_ScaleChangeSM = _iEnableScaleSMTypeValueList[j] then
					i = vardim1(iScaleType)
				else
					j = j + 1
				endif
			endif
		endif
	next i
	_iEnableScaleMDTypeValueList[j] = iScaleType[15]
	_stEnableScaleMDTypeValueList[j] = stScaleType[15]
	values{2} "iScaleChangeMD" _iEnableScaleMDTypeValueList, _stEnableScaleMDTypeValueList

	if iScaleChangeMD = SCALE_CUSTOM then
		values "gs_ScaleChangeMD"	range (, _iScaleSM)
	else
		gs_ScaleChangeMD = iScaleChangeMD
		parameters	gs_ScaleChangeMD = gs_ScaleChangeMD

		lock			"gs_ScaleChangeMD"
		hideparameter	"gs_ScaleChangeMD"
	endif
	if (gs_ScaleChangeMD >= gs_ScaleChangeSM)  then
		gs_ScaleChangeMD = gs_ScaleChangeSM - 1
		parameters	gs_ScaleChangeMD = gs_ScaleChangeMD
	endif
else
	values{2} "gs_SymbolType_m"	SYMBOL_TYPE1,	stStairSymbolTypes[1],
								SYMBOL_TYPE2,	stStairSymbolTypes[2],
								SYMBOL_TYPE3,	stStairSymbolTypes[3],
								SYMBOL_TYPE4,	stStairSymbolTypes[4],
								SYMBOL_TYPE5,	stStairSymbolTypes[5],
								SYMBOL_TYPE6,	stStairSymbolTypes[6],
								SYMBOL_TYPE7,	stStairSymbolTypes[7],
								SYMBOL_TYPE8,	stStairSymbolTypes[8],
								SYMBOL_TYPE9,	stStairSymbolTypes[9],
								SYMBOL_TYPE10,	stStairSymbolTypes[10],
								SYMBOL_TYPE11,	stStairSymbolTypes[11],
								SYMBOL_TYPE12,	stStairSymbolTypes[12],
								SYMBOL_TYPE13,	stStairSymbolTypes[13],
								SYMBOL_TYPE14,	stStairSymbolTypes[14],
								SYMBOL_TYPE15,	stStairSymbolTypes[15],
								SYMBOL_TYPE16,	stStairSymbolTypes[16],
								SYMBOL_TYPE17,	stStairSymbolTypes[17],
								SYMBOL_TYPE18,	stStairSymbolTypes[18],
								SYMBOL_TYPE19,	stStairSymbolTypes[19],
								SYMBOL_TYPE20,	stStairSymbolTypes[20]

	lock			"iSymbolGroup",
					"gs_ScaleChangeSM",
					"iScaleChangeSM",
					"gs_ScaleChangeMD",
					"iScaleChangeMD"
	hideparameter	"iSymbolGroup",
					"gs_ScaleChangeSM",
					"iScaleChangeSM",
					"gs_ScaleChangeMD",
					"iScaleChangeMD"
endif

if iNoseType = NOSE_NORMAL then lock "tproj"

VALUES "tproj" RANGE (0.005,.3 )

values "tt" stTopTread
values "iTopTread" TOPTREAD_AT_FLOOR_LEVEL, TOPTREAD_BELOW_FLOOR_LEVEL

if GLOB_MODPAR_NAME = "tt" then
	n = vardim1(stTopTread)
	iTopTread = TOPTREAD_AT_FLOOR_LEVEL
	for i = 1 to n
		if tt = stTopTread[i] then
			iTopTread = i
			i = n
		endif
	next i
	parameters iTopTread = iTopTread
else
	iTopTread = max(1, min(iTopTread, vardim1(stTopTread)))
	tt = stTopTread[iTopTread]
	parameters	tt = tt,
				iTopTread = iTopTread
endif


values "ft" stFirstTread
values "iFirstTread" FIRSTTREAD_AT_FLOOR_LEVEL, FIRSTTREAD_ABOVE_FLOOR_LEVEL

if GLOB_MODPAR_NAME = "ft" then
	n = vardim1(stFirstTread)
	iFirstTread = FIRSTTREAD_AT_FLOOR_LEVEL
	for i = 1 to n
		if ft = stFirstTread[i] then
			iFirstTread = i
			i = n
		endif
	next i
	parameters iFirstTread = iFirstTread
else
	iFirstTread = max(1, min(iFirstTread, vardim1(stFirstTread)))
	ft = stFirstTread[iFirstTread]
	parameters	ft = ft,
				iFirstTread = iFirstTread
endif


values "fst" stFlightSectionType
values "iFlightSectionType" FLIGHTSECTION_WITHOUT_SPINEBEAM, FLIGHTSECTION_WITH_SPINEBEAM

if GLOB_MODPAR_NAME = "fst" then
	n = vardim1(stFlightSectionType)
	iFlightSectionType = FLIGHTSECTION_WITHOUT_SPINEBEAM
	for i = 1 to n
		if fst = stFlightSectionType[i] then
			iFlightSectionType = i
			i = n
		endif
	next i
	parameters iFlightSectionType = iFlightSectionType
else
	iFlightSectionType = max(1, min(iFlightSectionType, vardim1(stFlightSectionType)))
	fst = stFlightSectionType[iFlightSectionType]
	parameters	fst = fst,
				iFlightSectionType = iFlightSectionType
endif


values "jntl" stLowerJunctionType
values "iLowerJunctionType" LOWERJUNCTION_GROUND_FLOOR, LOWERJUNCTION_FLOOR_OR_LANDING

if GLOB_MODPAR_NAME = "jntl" then
	n = vardim1(stLowerJunctionType)
	iLowerJunctionType = LOWERJUNCTION_GROUND_FLOOR
	for i = 1 to n
		if jntl = stLowerJunctionType[i] then
			iLowerJunctionType = i
			i = n
		endif
	next i
	parameters iLowerJunctionType = iLowerJunctionType
else
	iLowerJunctionType = max(1, min(iLowerJunctionType, vardim1(stLowerJunctionType)))
	jntl = stLowerJunctionType[iLowerJunctionType]
	parameters	jntl = jntl,
				iLowerJunctionType = iLowerJunctionType
endif

values "noseType" stNoseTypes
values "iNoseType" NOSE_NORMAL, NOSE_ROUNDED

if GLOB_MODPAR_NAME = "noseType" then
	iNoseType = NOSE_NORMAL
	if noseType = stNoseTypes[2] then iNoseType = NOSE_ROUNDED
	parameters iNoseType = iNoseType
else
	noseType = stNoseTypes[1]
	if iNoseType = NOSE_ROUNDED then noseType = stNoseTypes[2]
	parameters noseType = noseType
endif


values "PTYP" stCalculationMode
values "iCalculationMode" CALCMODE_NO_OF_RISERS, CALCMODE_TREAD_HEIGHT

if GLOB_MODPAR_NAME = "PTYP" then
	n = vardim1(stCalculationMode)
	iCalculationMode = CALCMODE_NO_OF_RISERS
	for i = 1 to n
		if PTYP = stCalculationMode[i] then
			iCalculationMode = i
			i = n
		endif
	next i
	parameters iCalculationMode = iCalculationMode
else
	iCalculationMode = max(1, min(iCalculationMode, vardim1(stCalculationMode)))
	PTYP = stCalculationMode[iCalculationMode]
	parameters	PTYP = PTYP,
				iCalculationMode = iCalculationMode
endif


values "arrow_style" stArrowStyle
values "arrow_style_m"	ARROW_STYLE_1,
						ARROW_STYLE_2,
						ARROW_STYLE_3,
						ARROW_STYLE_4,
						ARROW_STYLE_5,
						ARROW_STYLE_6,
						ARROW_STYLE_7,
						ARROW_STYLE_8,
						ARROW_STYLE_9

if GLOB_MODPAR_NAME = "arrow_style" then
	n = vardim1(stArrowStyle)
	arrow_style_m = ARROW_STYLE_1
	for i = 1 to n
		if arrow_style = stArrowStyle[i] then
			arrow_style_m = i
			i = n
		endif
	next i
	parameters arrow_style_m = arrow_style_m
else
	arrow_style_m = max(1, min(arrow_style_m, vardim1(stArrowStyle)))
	arrow_style = stArrowStyle[arrow_style_m]
	parameters	arrow_style = arrow_style,
				arrow_style_m = arrow_style_m
endif

values "gs_StartEndStyle" stStartSymbolStyles		! Style 1, Style 2, Style 3, None
values "gs_StartEndStyle_m" STARTSYMB_STYLE1, STARTSYMB_STYLE2, STARTSYMB_STYLE3, STARTSYMB_NONE

if GLOB_MODPAR_NAME = "gs_StartEndStyle" then
	gs_StartEndStyle_m = 1
	for i = 1 to vardim1(stStartSymbolStyles)
		if gs_StartEndStyle = stStartSymbolStyles[i] then
			gs_StartEndStyle_m = i
			i = vardim1(stStartSymbolStyles)
		endif
	next i
	parameters gs_StartEndStyle_m = gs_StartEndStyle_m
else
	gs_StartEndStyle_m = max(1, min(gs_StartEndStyle_m, vardim1(stStartSymbolStyles)))
	gs_StartEndStyle = stStartSymbolStyles[gs_StartEndStyle_m]
	parameters	gs_StartEndStyle_m	= gs_StartEndStyle_m,
				gs_StartEndStyle	= gs_StartEndStyle
endif


! ---------- Rise and Run Text ----------

values "gs_RiseRunText" stRiseRunText
values "iRiseRunText" 1, 2, 3, 4, 5, 6, 99

if GLOB_MODPAR_NAME = "gs_RiseRunText" then
	for i = 1 to vardim1(stRiseRunText)
	   if gs_RiseRunText = stRiseRunText[i]	then iRiseRunText = i
	next i
	if gs_RiseRunText = stRiseRunText[7]	then iRiseRunText = 99
	parameters iRiseRunText = iRiseRunText
else
	if iRiseRunText = 99 then
		gs_RiseRunText = stRiseRunText[7]
	else
		gs_RiseRunText = stRiseRunText[max(1, min(iRiseRunText, vardim1(stRiseRunText)) )]
	endif
	parameters gs_RiseRunText = gs_RiseRunText
endif

values "typeTextRotation_RiseRun" `Читаемый`,`Выровнять по Символу`
values "typeTextRotation_RiseRun_m" 2, 0

if GLOB_MODPAR_NAME = "typeTextRotation_RiseRun" then
	if typeTextRotation_RiseRun = `Читаемый`			then typeTextRotation_RiseRun_m = 2
	if typeTextRotation_RiseRun = `Выровнять по Символу`	then typeTextRotation_RiseRun_m = 0
	parameters typeTextRotation_RiseRun_m = typeTextRotation_RiseRun_m
else
	if typeTextRotation_RiseRun_m = 2					then typeTextRotation_RiseRun = `Читаемый`
	if typeTextRotation_RiseRun_m = 0					then typeTextRotation_RiseRun = `Выровнять по Символу`
	parameters typeTextRotation_RiseRun = typeTextRotation_RiseRun
endif

if not(bShowRiseAndRunText) then
	lock			"gs_RiseRunText","gs_CustomText1", "gs_CustomText2", "gs_customText_rise",
					"fontsize","gs_text_size_pt", "typeTextRotation_RiseRun","gs_text_pen","bUseACLinearUnit"
	hideparameter	"gs_RiseRunText","gs_CustomText1", "gs_CustomText2", "gs_customText_rise",
					"fontsize","gs_text_size_pt", "typeTextRotation_RiseRun","gs_text_pen","bUseACLinearUnit"
endif

if iRiseRunText <> 99 then
	lock 	"gs_CustomText1","gs_CustomText2"
	hideparameter 	"gs_CustomText1","gs_CustomText2"
endif

if iRiseRunText <> 5 & iRiseRunText <> 6 then
	lock "gs_customText_rise"
	hideparameter "gs_customText_rise"
endif

if iRiseRunText = 99 then		! Custom
	if bLinearDimIsMetric then hideparameter	"gs_CustomText2"
endif

! ---------- Numbering ----------

values "typeTextRotation_Num" `Читаемый`,`Выровнять по Символу`
values "typeTextRotation_Num_m" 2, 0

if GLOB_MODPAR_NAME = "typeTextRotation_Num" then
	if typeTextRotation_Num = `Читаемый`			then typeTextRotation_Num_m = 2
	if typeTextRotation_Num = `Выровнять по Символу`	then typeTextRotation_Num_m = 0
	parameters typeTextRotation_Num_m = typeTextRotation_Num_m
else
	if typeTextRotation_Num_m = 2					then typeTextRotation_Num = `Читаемый`
	if typeTextRotation_Num_m = 0					then typeTextRotation_Num = `Выровнять по Символу`
	parameters typeTextRotation_Num= typeTextRotation_Num
endif

if not(bShowNumbering) then
	 lock			"nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen","gs_NumBelow","gs_NumAbove", "typeTextRotation_Num"
	 hideparameter	"nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen","gs_NumBelow","gs_NumAbove", "typeTextRotation_Num"
endif

! ---------- UP and Down ----------
values "walkingDirUPDN" stWalkingDirUPDN		! None, UP, DOWN
values "walkingDirUPDN_m" WALKDIRSTR_NONE, WALKDIRSTR_UP, WALKDIRSTR_DOWN

if GLOB_MODPAR_NAME = "walkingDirUPDN" then
	walkingDirUPDN_m = 1
	for i = 1 to vardim1(stWalkingDirUPDN)
		if walkingDirUPDN = stWalkingDirUPDN[i] then
			walkingDirUPDN_m = i
			i = vardim1(stWalkingDirUPDN)
		endif
	next i
	parameters walkingDirUPDN_m = walkingDirUPDN_m
else
	walkingDirUPDN_m = max(1, min(walkingDirUPDN_m, vardim1(stWalkingDirUPDN)))
	walkingDirUPDN = stWalkingDirUPDN[walkingDirUPDN_m]
	parameters	walkingDirUPDN_m	= walkingDirUPDN_m,
				walkingDirUPDN		= walkingDirUPDN
endif

values "typeTextRotation_UpDn" `Читаемый`,`Параллельно Линии Всхода`,`Выровнять по Символу`
values "typeTextRotation_UpDn_m" 2, 1, 0

if GLOB_MODPAR_NAME = "typeTextRotation_UpDn" then
	if typeTextRotation_UpDn = `Читаемый`					then typeTextRotation_UpDn_m = 2
	if typeTextRotation_UpDn = `Параллельно Линии Всхода`	then typeTextRotation_UpDn_m = 1
	if typeTextRotation_UpDn = `Выровнять по Символу`			then typeTextRotation_UpDn_m = 0
	parameters typeTextRotation_UpDn_m = typeTextRotation_UpDn_m
else
	if typeTextRotation_UpDn_m = 2					then typeTextRotation_UpDn = `Читаемый`
	if typeTextRotation_UpDn_m = 1					then typeTextRotation_UpDn = `Параллельно Линии Всхода`
	if typeTextRotation_UpDn_m = 0					then typeTextRotation_UpDn = `Выровнять по Символу`
	parameters typeTextRotation_UpDn = typeTextRotation_UpDn
endif

if walkingDirUPDN_m = WALKDIRSTR_NONE  then
	 lock			"UPDNfontsize", "gs_text_size_pt_UpDn", "UPDNfontpen","AngUPDN", "typeTextRotation_UpDn"
	 HIDEPARAMETER	"UPDNfontsize", "gs_text_size_pt_UpDn", "UPDNfontpen","AngUPDN", "typeTextRotation_UpDn"
endif

!!! *** RANGE PARAMETERS *** !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

VALUES "ZZYZX" RANGE [2*th,)
VALUES "r" RANGE (0,)
VALUES "flw" range (0,)
VALUES "sst" range (0,)
VALUES "lst" range [0,)
VALUES "lst2" range [0,)
VALUES "beamx" range (0,)
VALUES "beamy" range (0,)

VALUES "wldo" range [r-flw,r]
VALUES "pth" RANGE [0.05,)
VALUES "th" range (0,)
VALUES "td" range (0,)
VALUES "thd" range (0,)
VALUES "rnu" range (0,)
VALUES "covthick" range (0,)
VALUES "covthicky" range (0,)
VALUES "ns" range (0,)

VALUES "gs_BreakHeight" 	RANGE [th,INT(360/fokszog)*th]
VALUES "gs_ArrowHeight" 	RANGE (0,)
VALUES "gs_ArrowHalfWidth" 	RANGE (0,)
VALUES "gs_CircleRadius" 	RANGE (0,)
VALUES "gs_StartWidth" 		RANGE (0,)
VALUES "gs_StartHeight" 	RANGE (0,)

VALUES "res" RANGE [1,500]
VALUES "rescs" range[3,)

!!! A, B, ZZYZX !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

	PARAMETERS A=2*R
	LOCK "A"
	PARAMETERS B=2*R
	LOCK "B"

!!! *** RAILING PARAMETERS *** !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

values "rail_m" 1, 2, 3, 4
if GLOB_MODPAR_NAME = "bRightRail" or GLOB_MODPAR_NAME = "bLeftRail" then
	if bRightRail then
		if bLeftRail then
			rail_m = RAILPOS_BOTH
		else
			rail_m = RAILPOS_RIGHT
		endif
	else
		if bLeftRail then
			rail_m = RAILPOS_LEFT
		else
			rail_m = RAILPOS_NONE
		endif
	endif
	parameters rail_m = rail_m
else
	if rail_m = 1 then
		bRightRail	= 1
		bLeftRail	= 1
	endif
	if rail_m = 2 then
		bRightRail	= 1
		bLeftRail	= 0
	endif
	if rail_m = 3 then
		bRightRail	= 0
		bLeftRail	= 1
	endif
	if rail_m = 4 then
		bRightRail	= 0
		bLeftRail	= 0
	endif
	parameters bRightRail	= bRightRail
	parameters bLeftRail	= bLeftRail
endif

if NOT(bRightRail) then
	lock			"rightRailType"
	hideparameter	"rightRailType"
endif
if NOT(bLeftRail) then
	lock			"leftRailType"
	hideparameter	"leftRailType"
endif

values "btypr" stBarStyle
values "btypr_m" BAR_RECTANGULAR, BAR_ROUND

if GLOB_MODPAR_NAME = "btypr" then
	btypr_m = BAR_RECTANGULAR
	if btypr = stBarStyle[2] then btypr_m = BAR_ROUND
	parameters btypr_m = btypr_m
else
	btypr = stBarStyle[1]
	if btypr_m = BAR_ROUND then btypr = stBarStyle[2]
	parameters btypr = btypr
endif

values "btypl" stBarStyle
values "btypl_m" BAR_RECTANGULAR, BAR_ROUND

if GLOB_MODPAR_NAME = "btypl" then
	btypl_m = BAR_RECTANGULAR
	if btypl = stBarStyle[2] then btypl_m = BAR_ROUND
	parameters btypl_m = btypl_m
else
	btypl = stBarStyle[1]
	if btypl_m = BAR_ROUND then btypl = stBarStyle[2]
	parameters btypl = btypl
endif

VALUES "rightRailType" 	stRailTypes[1],
						stRailTypes[2],
						stRailTypes[3],
						stRailTypes[4],
						stRailTypes[5],
						stRailTypes[6],
						stRailTypes[7],
						stRailTypes[8],
						stRailTypes[9],
						stRailTypes[10]

if GLOB_MODPAR_NAME = "rightRailType" then
	for i = 1 to vardim1(stRailTypes)
	   if rightRailType = stRailTypes[i]	then rightRailType_m = i
	next i
	parameters rightRailType_m = rightRailType_m
else
	parameters rightRailType = stRailTypes[rightRailType_m]
endif

if rail_m = RAILPOS_BOTH then		! Both
	VALUES "leftRailType" 	stRailTypes[11],
							stRailTypes[1],
							stRailTypes[2],
							stRailTypes[3],
							stRailTypes[4],
							stRailTypes[5],
							stRailTypes[6],
							stRailTypes[7],
							stRailTypes[8],
							stRailTypes[9],
							stRailTypes[10]
else
	VALUES "leftRailType" 	stRailTypes[1],
							stRailTypes[2],
							stRailTypes[3],
							stRailTypes[4],
							stRailTypes[5],
							stRailTypes[6],
							stRailTypes[7],
							stRailTypes[8],
							stRailTypes[9],
							stRailTypes[10]
endif
if GLOB_MODPAR_NAME = "leftRailType" then
	for i = 1 to vardim1(stRailTypes)
	   if leftRailType = stRailTypes[i]	then leftRailType_m = i
	next i
	parameters leftRailType_m = leftRailType_m
else
	parameters leftRailType = stRailTypes[leftRailType_m]
endif
bSameRails = (leftRailType_m = RAIL_SAMERAILS)
parameters bSameRails = bSameRails

if GLOB_MODPAR_NAME = "rightRailType" or GLOB_MODPAR_NAME = "rightRailType_m" then
	if rightRailType_m = RAIL_WIRED then
		bwr		= 0.005
		bthr	= 0.005
		bdr		= 0.005
	else
		bwr		= 0.025
		bthr	= 0.025
		bdr		= 0.05
	endif

	parameters bwr = bwr
	parameters bthr = bthr
	parameters bdr = bdr
endif

if GLOB_MODPAR_NAME = "leftRailType" or GLOB_MODPAR_NAME = "leftRailType_m" then
	if leftRailType_m = RAIL_WIRED then
		bwl		= 0.005
		bthl	= 0.005
		bdl		= 0.005
	else
		bwl		= 0.025
		bthl	= 0.025
		bdl		= 0.05
	endif

	parameters bwl = bwr
	parameters bthl = bthr
	parameters bdl = bdr
endif

! ==============================================================================
! Symbolic 2D
! ==============================================================================

values "postSymbolType" stPostSymbolType
values "iPostSymbolType" 1, 2, 3, 4, 0
if GLOB_MODPAR_NAME = "postSymbolType" then
	iPostSymbolType = 1
	if postSymbolType = stPostSymbolType[2] then iPostSymbolType = 2
	if postSymbolType = stPostSymbolType[3] then iPostSymbolType = 3
	if postSymbolType = stPostSymbolType[4] then iPostSymbolType = 4
	if postSymbolType = stPostSymbolType[5] then iPostSymbolType = 0
	parameters iPostSymbolType = iPostSymbolType
else
	postSymbolType = stPostSymbolType[1]
	if iPostSymbolType = 2 then postSymbolType = stPostSymbolType[2]
	if iPostSymbolType = 3 then postSymbolType = stPostSymbolType[3]
	if iPostSymbolType = 4 then postSymbolType = stPostSymbolType[4]
	if iPostSymbolType = 0 then postSymbolType = stPostSymbolType[5]
	parameters postSymbolType = postSymbolType
endif

if NOT(bShowRailOnFloorPlan) then
	lock			"railLineType",
					"railPen",
					"bSymbolic2D",
					"postSymbolType",
					"iPostSymbolType",
					"postLineType",
					"postPen",
					"bShowRailAboveBreakLine"
	hideparameter	"railLineType",
					"railPen",
					"bSymbolic2D",
					"postSymbolType",
					"iPostSymbolType",
					"postLineType",
					"postPen",
					"bShowRailAboveBreakLine"
endif
if NOT(iPostSymbolType) then
	lock			"postLineType",
					"postPen"
	hideparameter	"postLineType",
					"postPen"
endif
if NOT(bSymbolic2D) then
	lock			"postSymbolType",
					"iPostSymbolType",
					"postLineType",
					"postPen"
	hideparameter	"postSymbolType",
					"iPostSymbolType",
					"postLineType",
					"postPen"
endif
if not(bShowRailAxis) then
	lock 			"railAxisLineType",
					"gs_RailAxisPen"
	hideparameter	"railAxisLineType",
					"gs_RailAxisPen"
endif
if	gs_detlevel_2D_m = DET2D_CUSTOM &\
	(gs_SymbolType_m = 3 |\
	gs_SymbolType_m = 8 |\
	gs_SymbolType_m = 15) then
	lock			"bShowRailAboveBreakLine"
	hideparameter	"bShowRailAboveBreakLine"
endif
if NOT(bShowCarriage) then
	lock			"iShowCarriageUpTo",
					"stShowCarriageUpTo",
					"carriageLineType",
					"carriagePen"
	hideparameter	"stShowCarriageUpTo",
					"carriageLineType",
					"carriagePen"
endif
if NOT(bEnableCarriageLine) then
	lock			"bShowCarriage",
					"iShowCarriageUpTo",
					"stShowCarriageUpTo",
					"carriageLineType",
					"carriagePen"
	hideparameter	"bShowCarriage",
					"stShowCarriageUpTo",
					"carriageLineType",
					"carriagePen"
endif

values "stShowCarriageUpTo" stShowCarriageValues
values "iShowCarriageUpTo" 1, 20, 50, 100, 200

if GLOB_MODPAR_NAME = "stShowCarriageUpTo" then
	iShowCarriageUpTo = 1
	if stShowCarriageUpTo = stShowCarriageValues[2]	then iShowCarriageUpTo = 20
	if stShowCarriageUpTo = stShowCarriageValues[3]	then iShowCarriageUpTo = 50
	if stShowCarriageUpTo = stShowCarriageValues[4]	then iShowCarriageUpTo = 100
	if stShowCarriageUpTo = stShowCarriageValues[5]	then iShowCarriageUpTo = 200
	parameters iShowCarriageUpTo = iShowCarriageUpTo
else
	stShowCarriageUpTo = stShowCarriageValues[1]
	if iShowCarriageUpTo = 20	then stShowCarriageUpTo = stShowCarriageValues[2]
	if iShowCarriageUpTo = 50	then stShowCarriageUpTo = stShowCarriageValues[3]
	if iShowCarriageUpTo = 100	then stShowCarriageUpTo = stShowCarriageValues[4]
	if iShowCarriageUpTo = 200	then stShowCarriageUpTo = stShowCarriageValues[5]
	parameters stShowCarriageUpTo = stShowCarriageUpTo
endif

!!! *** HIDE RAILING PARAMETERS *** !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

LOCK "ggr","sgr","ggl","sgl"

IF leftRailType_m = RAIL_BALUSTRADE THEN
	HIDEPARAMETER "fdfl", "bhl", "nbl", "btypl", "bdl", "hrtl", "hrdl"
	HIDEPARAMETER "hrwl", "hrhl", "hrol", "ptl", "npl"
	HIDEPARAMETER "nbtl", "pdl", "pwl", "pthl", "sbhl", "btl"
	HIDEPARAMETER "pmatl"
ENDIF

IF leftRailType_m = RAIL_PARALLEL_BARS THEN
	HIDEPARAMETER "fswl", "ftwl", "fbwl", "bwl", "bthl", "abdistl"
	HIDEPARAMETER "fdfl", "btypl", "bdl", "hrtl", "hrdl"
	HIDEPARAMETER "hrwl", "hrhl", "hrol", "ptl", "npl"
	HIDEPARAMETER "nbtl", "pdl", "pwl", "pthl", "sbhl", "btl"
	HIDEPARAMETER "bmatl","pmatl"
ENDIF

IF leftRailType_m = RAIL_SIMPLE_BAR THEN
	HIDEPARAMETER "fswl", "ftwl", "fbwl", "bwl", "bthl", "abdistl"
	HIDEPARAMETER "fdfl", "nbl", "hrtl", "hrdl"
	HIDEPARAMETER "hrwl", "hrhl", "hrol", "ptl", "npl"
	HIDEPARAMETER "nbtl", "pdl", "pwl", "pthl", "sbhl", "btl"
	HIDEPARAMETER "bmatl","pmatl"
ENDIF

IF leftRailType_m = RAIL_SOLID_FRAME_FILLED THEN
	HIDEPARAMETER "bhl", "nbl", "btypl", "bdl", "hrtl", "hrdl"
	HIDEPARAMETER "hrwl", "hrhl", "hrol", "ptl", "npl", "btl"
	HIDEPARAMETER "nbtl", "pdl", "pwl", "pthl", "sbhl", "bwl", "abdistl"
	HIDEPARAMETER "pmatl"
ENDIF

IF leftRailType_m = RAIL_SOLID_FRAME THEN
	HIDEPARAMETER "bthl", "fdfl", "bhl", "nbl", "btypl", "bdl", "hrtl", "hrdl"
	HIDEPARAMETER "hrwl", "hrhl", "hrol", "ptl", "npl", "btl"
	HIDEPARAMETER "nbtl", "pdl", "pwl", "pthl", "sbhl", "bwl", "abdistl"
	HIDEPARAMETER "bmatl","pmatl"
ENDIF

IF leftRailType_m = RAIL_SOLID THEN
	HIDEPARAMETER "fswl", "ftwl", "fbwl", "bthl", "fdfl"
	HIDEPARAMETER "bthl", "fdfl", "bhl", "nbl", "btypl", "bdl", "hrtl", "hrdl"
	HIDEPARAMETER "hrwl", "hrhl", "hrol", "ptl", "npl", "btl"
	HIDEPARAMETER "nbtl", "pdl", "pwl", "pthl", "sbhl", "bwl", "abdistl"
	HIDEPARAMETER "bmatl","pmatl"
ENDIF

IF leftRailType_m = RAIL_POST_WITH_BALUSTERS THEN
	HIDEPARAMETER "ggl","sgl"
	HIDEPARAMETER "fswl", "ftwl", "fbwl", "fdfl", "fthl"
	HIDEPARAMETER "fdfl", "bhl", "btypl"
	HIDEPARAMETER "nbtl", "sbhl", "abdistl"
ENDIF

IF leftRailType_m = RAIL_WIRED THEN
	HIDEPARAMETER "ggl","sgl"
	HIDEPARAMETER "fswl", "ftwl", "fbwl", "fdfl", "fthl"
	HIDEPARAMETER "fdfl", "bhl", "btypl"
	HIDEPARAMETER "sbhl"
	HIDEPARAMETER "nbtl", "abdistl"
ENDIF

IF leftRailType_m = RAIL_WOODEN_BALUSTRADE THEN
	HIDEPARAMETER "ggl","sgl"
	HIDEPARAMETER "fswl", "ftwl", "fbwl", "bthl", "fdfl", "fthl"
	HIDEPARAMETER "bthl", "fdfl", "bhl", "btypl"
	HIDEPARAMETER "sbhl", "abdistl", "ptl", "npl", "pwl"
	HIDEPARAMETER "pthl", "btl", "nbl"
	HIDEPARAMETER "bmatl"
ENDIF

IF leftRailType_m = RAIL_POST_WITH_BARS THEN
	HIDEPARAMETER "ggl","sgl"
	HIDEPARAMETER "fswl", "ftwl", "fbwl", "fdfl", "fthl"
	HIDEPARAMETER "bhl", "btypl"
	HIDEPARAMETER "nbtl", "abdistl"
ENDIF

IF rightRailType_m = RAIL_BALUSTRADE THEN
	HIDEPARAMETER "fdfr", "bhr", "nbr", "btypr", "bdr", "hrtr", "hrdr"
	HIDEPARAMETER "hrwr", "hrhr", "hror", "ptr", "npr"
	HIDEPARAMETER "nbtr", "pdr", "pwr", "pthr", "sbhr", "btr"
	HIDEPARAMETER "pmatr"
ENDIF

IF rightRailType_m = RAIL_PARALLEL_BARS THEN
	HIDEPARAMETER "fswr", "ftwr", "fbwr", "bwr", "bthr", "abdistr"
	HIDEPARAMETER "fdfr", "btypr", "bdr", "hrtr", "hrdr"
	HIDEPARAMETER "hrwr", "hrhr", "hror", "ptr", "npr"
	HIDEPARAMETER "nbtr", "pdr", "pwr", "pthr", "sbhr", "btr"
	HIDEPARAMETER "bmatr","pmatr"
ENDIF

IF rightRailType_m = RAIL_SIMPLE_BAR THEN
	HIDEPARAMETER "fswr", "ftwr", "fbwr", "bwr", "bthr", "abdistr"
	HIDEPARAMETER "fdfr", "nbr", "hrtr", "hrdr"
	HIDEPARAMETER "hrwr", "hrhr", "hror", "ptr", "npr"
	HIDEPARAMETER "nbtr", "pdr", "pwr", "pthr", "sbhr", "btr"
	HIDEPARAMETER "bmatr","pmatr"
ENDIF

IF rightRailType_m = RAIL_SOLID_FRAME_FILLED THEN
	HIDEPARAMETER "bhr", "nbr", "btypr", "bdr", "hrtr", "hrdr"
	HIDEPARAMETER "hrwr", "hrhr", "hror", "ptr", "npr", "btr"
	HIDEPARAMETER "nbtr", "pdr", "pwr", "pthr", "sbhr", "bwr", "abdistr"
	HIDEPARAMETER "pmatr"
ENDIF

IF rightRailType_m = RAIL_SOLID_FRAME THEN
	HIDEPARAMETER "bthr", "fdfr", "bhr", "nbr", "btypr", "bdr", "hrtr", "hrdr"
	HIDEPARAMETER "hrwr", "hrhr", "hror", "ptr", "npr", "btr"
	HIDEPARAMETER "nbtr", "pdr", "pwr", "pthr", "sbhr", "bwr", "abdistr"
	HIDEPARAMETER "bmatr","pmatr"
ENDIF

IF rightRailType_m = RAIL_SOLID THEN
	HIDEPARAMETER "fswr", "ftwr", "fbwr", "bthr", "fdfr"
	HIDEPARAMETER "bthr", "fdfr", "bhr", "nbr", "btypr", "bdr", "hrtr", "hrdr"
	HIDEPARAMETER "hrwr", "hrhr", "hror", "ptr", "npr", "btr"
	HIDEPARAMETER "nbtr", "pdr", "pwr", "pthr", "sbhr", "bwr", "abdistr"
	HIDEPARAMETER "bmatr","pmatr"
ENDIF

IF rightRailType_m = RAIL_POST_WITH_BALUSTERS THEN
	HIDEPARAMETER "ggr","sgr"
	HIDEPARAMETER "fswr", "ftwr", "fbwr", "fdfr", "fthr"
	HIDEPARAMETER "fdfr", "bhr", "btypr"
	HIDEPARAMETER "nbtr", "sbhr", "abdistr"
ENDIF

IF rightRailType_m = RAIL_WIRED THEN
	HIDEPARAMETER "ggr","sgr"
	HIDEPARAMETER "fswr", "ftwr", "fbwr", "fdfr", "fthr"
	HIDEPARAMETER "fdfr", "bhr", "btypr"
	HIDEPARAMETER "sbhr"
	HIDEPARAMETER "nbtr", "abdistr"
ENDIF

IF rightRailType_m = RAIL_WOODEN_BALUSTRADE THEN
	HIDEPARAMETER "ggr","sgr"
	HIDEPARAMETER "fswr", "ftwr", "fbwr", "bthr", "fdfr", "fthr"
	HIDEPARAMETER "bthr", "fdfr", "bhr", "btypr"
	HIDEPARAMETER "sbhr", "abdistr", "ptr", "npr", "pwr"
	HIDEPARAMETER "pthr", "btr", "nbr"
	HIDEPARAMETER "bmatr"
ENDIF

IF rightRailType_m = RAIL_POST_WITH_BARS THEN
	HIDEPARAMETER "ggr","sgr"
	HIDEPARAMETER "fswr", "ftwr", "fbwr", "fdfr", "fthr"
	HIDEPARAMETER "bhr", "btypr"
	HIDEPARAMETER "nbtr", "abdistr"
ENDIF

!!! *** FULL HIDE OF RAILING PARAMETERS *** !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

IF rail_m = RAILPOS_NONE or rail_m = RAILPOS_LEFT THEN
	HIDEPARAMETER "ggr", "hrr", "dsr", "roffr", "sgr", "fswr",
		"fthr", "ftwr", "fbwr", "bwr", "bthr", "abdistr", "fdfr",
		"bhr", "bdr", "nbr", "btypr", "fmatr", "bmatr", "romr", "rmmr",
		"hrtr","hrdr","hrwr","hrhr","hror",
		"ptr","npr","nbtr","pdr","pwr","pthr",
		"btr","nbr","bwr","bthr","bdr","sbhr",
		"bmatr","fmatr","pmatr"
ENDIF
IF rail_m = RAILPOS_NONE or rail_m = RAILPOS_RIGHT THEN
	HIDEPARAMETER "ggl", "hrl", "dsl", "roffl", "sgl", "fswl",
		"fthl", "ftwl", "fbwl", "bwl", "bthl", "abdistl", "fdfl",
		"bhl", "bdl", "nbl", "btypl", "fmatl", "bmatl", "rmml",
		"hrtl","hrdl","hrwl","hrhl","hrol",
		"ptl","npl","nbtl","pdl","pwl","pthl",
		"btl","nbl","bwl","bthl","bdl","sbhl",
		"bmatl","fmatl","pmatl"
ENDIF

!!! *** RIGHT RAIL STRUCTURAL DIMENSION PARAMETERS *** !!!!!!!!!!!!!!!!!!!!!!!!!

values "hrtr" stHandrailStyle
values "hrtr_m" HANDRAIL_RECTANGULAR, HANDRAIL_ROUND

if GLOB_MODPAR_NAME = "hrtr" then
	hrtr_m = HANDRAIL_RECTANGULAR
	if hrtr = stHandrailStyle[2] then hrtr_m = HANDRAIL_ROUND
	parameters hrtr_m = hrtr_m
else
	hrtr = stHandrailStyle[1]
	if hrtr_m = HANDRAIL_ROUND then hrtr = stHandrailStyle[2]
	parameters hrtr = hrtr
endif

IF hrtr_m = HANDRAIL_ROUND THEN
	HIDEPARAMETER "hrwr"
	HIDEPARAMETER "hrhr"
ELSE
	HIDEPARAMETER "hrdr"
ENDIF

values "ptr" stPostStyle
values "ptr_m" POST_RECTANGULAR, POST_ROUND

if GLOB_MODPAR_NAME = "ptr" then
	ptr_m = POST_RECTANGULAR
	if ptr = stPostStyle[2] then ptr_m = POST_ROUND
	parameters ptr_m = ptr_m
else
	ptr = stPostStyle[1]
	if ptr_m = POST_ROUND then ptr = stPostStyle[2]
	parameters ptr = ptr
endif

IF ptr_m = POST_ROUND THEN
	HIDEPARAMETER "pwr"
	HIDEPARAMETER "pthr"
ELSE
	HIDEPARAMETER "pdr"
ENDIF

values "btr" stBoardStyle
values "btr_m" BOARD_RECTANGULAR, BOARD_ROUND

if GLOB_MODPAR_NAME = "btr" then
	btr_m = BOARD_RECTANGULAR
	if btr = stBoardStyle[2] then btr_m = BOARD_ROUND
	parameters btr_m = btr_m
else
	btr = stBoardStyle[1]
	if btr_m = BOARD_ROUND then btr = stBoardStyle[2]
	parameters btr = btr
endif

IF rightRailType_m <> RAIL_SIMPLE_BAR THEN
	IF btr_m = BOARD_ROUND THEN
		HIDEPARAMETER "bwr"
		HIDEPARAMETER "bthr"
	ELSE
		HIDEPARAMETER "bdr"
	ENDIF
ELSE
	IF btypr_m = BAR_ROUND THEN
		HIDEPARAMETER "bhr"
		HIDEPARAMETER "fthr"
	ELSE
		HIDEPARAMETER "bdr"
	ENDIF
ENDIF

values "btl" stBoardStyle
values "btl_m" BOARD_RECTANGULAR, BOARD_ROUND

if GLOB_MODPAR_NAME = "btl" then
	btl_m = BOARD_RECTANGULAR
	if btl = stBoardStyle[2] then btl_m = BOARD_ROUND
	parameters btl_m = btl_m
else
	btl = stBoardStyle[1]
	if btl_m = BOARD_ROUND then btl = stBoardStyle[2]
	parameters btl = btl
endif

IF leftRailType_m <> RAIL_SIMPLE_BAR THEN
	IF btl_m = BOARD_ROUND THEN
		HIDEPARAMETER "bwl"
		HIDEPARAMETER "bthl"
	ELSE
		HIDEPARAMETER "bdl"
	ENDIF
ELSE
	IF btypl_m = BAR_ROUND THEN
		HIDEPARAMETER "bhl"
		HIDEPARAMETER "fthl"
	ELSE
		HIDEPARAMETER "bdl"
	ENDIF
ENDIF

!!! *** LEFT RAIL STRUCTURAL DIMENSION PARAMETERS *** !!!!!!!!!!!!!!!!!!!!!!!!!!

IF bSameRails THEN
	HIDEPARAMETER "ggl","hrl","dsl","roffl",
	"sgl","fswl","fthl","ftwl","fbwl","abdistl","fdfl","bhl","btypl",
	"hrtl","hrdl","hrwl","hrhl","hrol",
	"ptl","npl","nbtl","pdl","pwl","pthl",
	"btl","nbl","bwl","bthl","bdl","sbhl",
	"bmatl","fmatl","pmatl"
ENDIF

values "hrtl" stHandrailStyle
values "hrtl_m" HANDRAIL_RECTANGULAR, HANDRAIL_ROUND

if GLOB_MODPAR_NAME = "hrtl" then
	hrtl_m = HANDRAIL_RECTANGULAR
	if hrtl = stHandrailStyle[2] then hrtl_m = HANDRAIL_ROUND
	parameters hrtl_m = hrtl_m
else
	hrtl = stHandrailStyle[1]
	if hrtl_m = HANDRAIL_ROUND then hrtl = stHandrailStyle[2]
	parameters hrtl = hrtl
endif

IF hrtl_m = HANDRAIL_ROUND THEN
	HIDEPARAMETER "hrwl"
	HIDEPARAMETER "hrhl"
ELSE
	HIDEPARAMETER "hrdl"
ENDIF

values "ptl" stPostStyle
values "ptl_m" POST_RECTANGULAR, POST_ROUND

if GLOB_MODPAR_NAME = "ptl" then
	ptl_m = POST_RECTANGULAR
	if ptl = stPostStyle[2] then ptl_m = POST_ROUND
	parameters ptl_m = ptl_m
else
	ptl = stPostStyle[1]
	if ptl_m = POST_ROUND then ptl = stPostStyle[2]
	parameters ptl = ptl
endif

IF ptl_m = POST_ROUND THEN
	HIDEPARAMETER "pwl"
	HIDEPARAMETER "pthl"
ELSE
	HIDEPARAMETER "pdl"
ENDIF

!!! End of RAILING !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

IF walkl=0 THEN
	 HIDEPARAMETER "arrow_style","walkingDirUPDN","UPDNfontsize"
ENDIF

IF  walkingDirUPDN_m = WALKDIRSTR_NONE THEN
	 HIDEPARAMETER "UPDNfontsize"
ENDIF

!!! Cover Materials
IF iNoseType = NOSE_ROUNDED THEN 	HIDEPARAMETER "covery","covthicky","mat_riser","ns"
IF cover=0 		THEN
	HIDEPARAMETER "covthick","ns","mat_tread",
					"penLineTread", "typeFillTread",
					"penFillTread", "penBackFillTread"
endif

IF covery=0 	THEN 	HIDEPARAMETER "covthicky","mat_riser"

if iNoseType = NOSE_ROUNDED or covery=0 then
	hideparameter 	"penLineRiser", "typeFillRiser",
					"penFillRiser", "penBackFillRiser"
endif

VALUES "nbtr" rnu, custom
VALUES "nbtl" rnu, custom

! ------ Story Sensitive ------------------------------

if not(gs_StorySensitive) then
	hideparameter "gs_AboveHomeStory"
else
	if not(gs_BreaklineStUp) then
		hideparameter "gs_LowerPartStUp","gs_UpperPartStUp"
	endif
	if not(gs_LowerPartStUp) & not(gs_UpperPartStUp) & gs_BreaklineStUp then
		hideparameter "gs_TreadStUp"
	endif
endif

! ------ for 2D above Home Story ------------------------------[
if	(GLOB_MODPAR_NAME = "gs_SymbolType" | GLOB_MODPAR_NAME = "gs_SymbolType_m" |\
	GLOB_MODPAR_NAME = "gs_detlevel_2D" | GLOB_MODPAR_NAME = "gs_detlevel_2D_m") &\
	gs_detlevel_2D_m = DET2D_CUSTOM then
	if gs_SymbolType_m  = 1 | gs_SymbolType_m  = 2 then
		parameters	gs_BreaklineStUp	= 0,
					gs_TreadStUp		= 0
	endif
	if gs_SymbolType_m  = 3 | gs_SymbolType_m  = 4 | gs_SymbolType_m  = 5 then
		parameters	gs_BreaklineStUp	= 1,
					gs_LowerPartStUp	= 0,
					gs_UpperPartStUp	= 1,
					gs_TreadStUp		= 0
	endif
	if gs_SymbolType_m  = 6 | gs_SymbolType_m  = 7 | \
		gs_SymbolType_m  = 13 | gs_SymbolType_m  = 14 then
		parameters	gs_BreaklineStUp	= 0,
					gs_TreadStUp		= 1
	endif
	if gs_SymbolType_m  = 8 | gs_SymbolType_m  = 9 | gs_SymbolType_m  = 10 | \
		gs_SymbolType_m  = 11 | gs_SymbolType_m  = 12 | \
		gs_SymbolType_m  = 15 | gs_SymbolType_m  = 16 | gs_SymbolType_m  = 17 | \
		gs_SymbolType_m  = 18 | gs_SymbolType_m  = 19 | gs_SymbolType_m  = 20 then
		parameters	gs_BreaklineStUp = 1,
					gs_LowerPartStUp = 0,
					gs_UpperPartStUp = 1,
					gs_TreadStUp = 1
	endif
endif
! ------ for 2D above Home Story ------------------------------]

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!! Settings of 2D Symbol Type *** !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

	LOCK	"gs_2DTread","gs_2DTreadAbove","gs_2DRiserAbove","gs_2DContourAbove",
			"gs_2DContourBelow","brk",
			"gs_ArrowFill","gs_ArrowHeight","gs_ArrowHalfWidth",
			"gs_StartEndFill","gs_CircleRadius","gs_StartWidth","gs_StartHeight","tdfs",
			"DirNumText_X","DirNumText_Y",
			"DirUPDN_X","DirUPDN_Y","AngUPDN",
			"bSameRails","gs_FillTypeAbove"


	IF walkl=0 THEN
		 HIDEPARAMETER 	"gs_wLineType1","gs_wLineType2","gs_wLineTypeAbove",
						"gs_wLinePen","arrow_style","gs_ArrowFillPen","gs_ArrowFillPenAbove",
						"gs_StartEndStyle","gs_StartEndFillPen",
						"gs_RiseRunText","gs_CustomText1","gs_CustomText2","gs_CustomText2","bShowRiseAndRunText","fontsize","typeTextRotation_RiseRun", "gs_text_pen",
						"walkingDirUPDN","UPDNfontsize","UPDNfontpen","gs_wLineTypeStUp", "typeTextRotation_UpDn"
	ENDIF

	IF arrow_style_m = ARROW_STYLE_1 OR arrow_style_m = ARROW_STYLE_2 OR arrow_style_m = ARROW_STYLE_3 THEN
		 HIDEPARAMETER 	"gs_ArrowFillPen","gs_ArrowFillPenAbove"
	ENDIF

	IF gs_StartEndStyle_m = STARTSYMB_STYLE3 OR gs_StartEndStyle_m = STARTSYMB_NONE  THEN
		 HIDEPARAMETER 	"gs_StartEndFillPen"
	ENDIF

	IF bShowNumbering=0  THEN
		 HIDEPARAMETER 	"nStartNumbering","gs_NumTextSize","gs_NumTextPen","gs_NumBelow","gs_NumAbove"
	ENDIF

	IF bShowRailAxis=0  THEN
		 HIDEPARAMETER 	"railAxisLineType","gs_RailAxisPen"
	ENDIF

	!!! SETTINGS BY SYMBOL TYPES ON HOME STORY !!!!!!!!!!!!!!!!!!!
	!!! ******************************************************* !!


	if gs_detlevel_2D_m = DET2D_CUSTOM then
		IF gs_SymbolType_m = 1 THEN
			HIDEPARAMETER	"gs_wLineType1","gs_wLineTypeAbove",
							"gs_ArrowFillPenAbove","gs_NumBelow","gs_NumAbove",
							"gs_FillAbove","gs_cont_pen","solid_line",
							"bShowRailAxis","railAxisLineType","gs_RailAxisPen","gs_BreakHeight"

			IF bShowRiseAndRunText=0 AND walkingDirUPDN_m = WALKDIRSTR_NONE OR walkl=0 THEN HIDEPARAMETER "fontType"
			if not(gs_StorySensitive) | (gs_StorySensitive & not(gs_BreaklineStUp)) then
				hideparameter "gs_BreakHeight"
			endif
		ENDIF

		IF gs_SymbolType_m = 2 THEN
			HIDEPARAMETER	"gs_wLineType2","gs_wLineTypeAbove",
							"gs_ArrowFillPenAbove","gs_NumBelow","gs_NumAbove",
							"gs_FillAbove","gs_DashLinePen","dash_line",
							"bShowRailAxis","railAxisLineType","gs_RailAxisPen","gs_BreakHeight"

			IF bShowRiseAndRunText=0 AND walkingDirUPDN_m = WALKDIRSTR_NONE OR walkl=0 THEN HIDEPARAMETER "fontType"
			if not(gs_StorySensitive) | (gs_StorySensitive & not(gs_BreaklineStUp)) then
				hideparameter "gs_BreakHeight"
			endif
		ENDIF


		IF gs_SymbolType_m = 3 THEN
			HIDEPARAMETER	"gs_wLineType2","gs_wLineTypeAbove",
							"gs_ArrowFillPenAbove","gs_NumBelow","gs_NumAbove",
							"gs_FillAbove","gs_DashLinePen","dash_line",
							"bShowRailAxis","railAxisLineType","gs_RailAxisPen"

			IF bShowRiseAndRunText=0 AND walkingDirUPDN_m = WALKDIRSTR_NONE OR walkl=0 THEN HIDEPARAMETER "fontType"
		ENDIF


		IF gs_SymbolType_m = 4 THEN
			HIDEPARAMETER	"gs_wLineType2","bShowRailAxis","railAxisLineType","gs_RailAxisPen"

			IF bShowRiseAndRunText=0 AND walkingDirUPDN_m = WALKDIRSTR_NONE OR walkl=0 THEN HIDEPARAMETER "fontType"
		ENDIF


		IF gs_SymbolType_m = 5 THEN
			HIDEPARAMETER	"gs_wLineType2","gs_wLineTypeAbove",
							"gs_DashLinePen","dash_line",
							"bShowRailAxis","railAxisLineType","gs_RailAxisPen"

			IF bShowRiseAndRunText=0 AND walkingDirUPDN_m = WALKDIRSTR_NONE OR walkl=0 THEN HIDEPARAMETER "fontType"
		ENDIF


		IF gs_SymbolType_m = 6 THEN
			HIDEPARAMETER	"gs_wLineType1","gs_wLineTypeAbove",
							"gs_ArrowFillPenAbove","gs_NumBelow","gs_NumAbove",
							"gs_FillAbove","gs_cont_pen","solid_line",
							"bShowRailAxis","railAxisLineType","gs_RailAxisPen","gs_BreakHeight"

			IF bShowRiseAndRunText=0 AND walkingDirUPDN_m = WALKDIRSTR_NONE and bShowNumbering=0 OR walkl=0 and bShowNumbering=0 THEN HIDEPARAMETER "fontType"
			if not(gs_StorySensitive) | (gs_StorySensitive & not(gs_BreaklineStUp)) then
				hideparameter "gs_BreakHeight"
			endif
		ENDIF


		IF gs_SymbolType_m = 7 THEN
			HIDEPARAMETER	"gs_wLineType2","gs_wLineTypeAbove",
							"gs_ArrowFillPenAbove","gs_NumBelow","gs_NumAbove",
							"gs_FillAbove","gs_DashLinePen","dash_line",
							"bShowRailAxis","railAxisLineType","gs_RailAxisPen","gs_BreakHeight"

			IF bShowRiseAndRunText=0 AND walkingDirUPDN_m = WALKDIRSTR_NONE and bShowNumbering=0 OR walkl=0 and bShowNumbering=0 THEN HIDEPARAMETER "fontType"
			if not(gs_StorySensitive) | (gs_StorySensitive & not(gs_BreaklineStUp)) then
				hideparameter "gs_BreakHeight"
			endif
		ENDIF


		IF gs_SymbolType_m = 8 THEN
			HIDEPARAMETER	"gs_wLineType2","gs_wLineTypeAbove",
							"gs_ArrowFillPenAbove","gs_NumBelow","gs_NumAbove",
							"gs_FillAbove","gs_DashLinePen","dash_line",
							"bShowRailAxis","railAxisLineType","gs_RailAxisPen"

			IF bShowRiseAndRunText=0 AND walkingDirUPDN_m = WALKDIRSTR_NONE OR walkl=0 THEN HIDEPARAMETER "fontType"
		ENDIF


		IF gs_SymbolType_m = 9 THEN
			HIDEPARAMETER	"gs_wLineType2","bShowRailAxis","railAxisLineType","gs_RailAxisPen"

			IF bShowRiseAndRunText=0 AND walkingDirUPDN_m = WALKDIRSTR_NONE OR walkl=0 THEN HIDEPARAMETER "fontType"
		ENDIF


		IF gs_SymbolType_m = 10 THEN
			HIDEPARAMETER	"gs_wLineType2","gs_wLineTypeAbove","gs_DashLinePen","dash_line",
							"bShowRailAxis","railAxisLineType","gs_RailAxisPen"

			IF bShowRiseAndRunText=0 AND walkingDirUPDN_m = WALKDIRSTR_NONE OR walkl=0 THEN HIDEPARAMETER "fontType"
		ENDIF

		IF gs_SymbolType_m = 11 THEN
			HIDEPARAMETER	"gs_wLineType2","bShowRailAxis","railAxisLineType","gs_RailAxisPen"

			IF bShowRiseAndRunText=0 AND walkingDirUPDN_m = WALKDIRSTR_NONE and bShowNumbering=0 OR walkl=0 and bShowNumbering=0 THEN HIDEPARAMETER "fontType"
		ENDIF


		IF gs_SymbolType_m = 12 THEN
			HIDEPARAMETER	"gs_wLineType2","gs_wLineTypeAbove","gs_DashLinePen","dash_line",
							"bShowRailAxis","railAxisLineType","gs_RailAxisPen"

			IF bShowRiseAndRunText=0 AND walkingDirUPDN_m = WALKDIRSTR_NONE and bShowNumbering=0 OR walkl=0 and bShowNumbering=0 THEN HIDEPARAMETER "fontType"
		ENDIF


		IF gs_SymbolType_m = 13 THEN
			HIDEPARAMETER	"gs_wLineType1","gs_wLineTypeAbove",
							"gs_ArrowFillPenAbove","gs_NumBelow","gs_NumAbove",
							"gs_FillAbove","gs_cont_pen","solid_line","gs_BreakHeight"

			IF bShowRiseAndRunText=0 AND walkingDirUPDN_m = WALKDIRSTR_NONE and bShowNumbering=0 OR walkl=0 and bShowNumbering=0 THEN HIDEPARAMETER "fontType"
			if not(gs_StorySensitive) | (gs_StorySensitive & not(gs_BreaklineStUp)) then
				hideparameter "gs_BreakHeight"
			endif
		ENDIF


		IF gs_SymbolType_m = 14 THEN
			HIDEPARAMETER	"gs_wLineType2","gs_wLineTypeAbove",
							"gs_ArrowFillPenAbove","gs_NumBelow","gs_NumAbove",
							"gs_FillAbove","gs_BreakHeight"

			IF bShowRiseAndRunText=0 AND walkingDirUPDN_m = WALKDIRSTR_NONE and bShowNumbering=0 OR walkl=0 and bShowNumbering=0 THEN HIDEPARAMETER "fontType"
			if not(gs_StorySensitive) | (gs_StorySensitive & not(gs_BreaklineStUp)) then
				hideparameter "gs_BreakHeight"
			endif
		ENDIF


		IF gs_SymbolType_m = 15 THEN
			HIDEPARAMETER	"gs_wLineType2","gs_wLineTypeAbove",
							"gs_ArrowFillPenAbove","gs_NumBelow","gs_NumAbove",
							"gs_FillAbove"

			IF bShowRiseAndRunText=0 AND walkingDirUPDN_m = WALKDIRSTR_NONE OR walkl=0 THEN HIDEPARAMETER "fontType"
		ENDIF


		IF gs_SymbolType_m = 16 THEN
			HIDEPARAMETER	"gs_wLineType2"

			IF bShowRiseAndRunText=0 AND walkingDirUPDN_m = WALKDIRSTR_NONE OR walkl=0 THEN HIDEPARAMETER "fontType"
		ENDIF


		IF gs_SymbolType_m = 17 THEN
			HIDEPARAMETER	"gs_wLineType2","gs_wLineTypeAbove"

			IF bShowRiseAndRunText=0 AND walkingDirUPDN_m = WALKDIRSTR_NONE OR walkl=0 THEN HIDEPARAMETER "fontType"
		ENDIF


		IF gs_SymbolType_m = 18 THEN
			HIDEPARAMETER	"gs_wLineType2"

			IF bShowRiseAndRunText=0 AND walkingDirUPDN_m = WALKDIRSTR_NONE and bShowNumbering=0 OR walkl=0 and bShowNumbering=0 THEN HIDEPARAMETER "fontType"
		ENDIF


		IF gs_SymbolType_m = 19 THEN
			HIDEPARAMETER	"gs_wLineType2"

			IF bShowRiseAndRunText=0 AND walkingDirUPDN_m = WALKDIRSTR_NONE and bShowNumbering=0 OR walkl=0 and bShowNumbering=0 THEN HIDEPARAMETER "fontType"
		ENDIF


		IF gs_SymbolType_m = 20 THEN
			HIDEPARAMETER	"gs_wLineType2","gs_wLineTypeAbove"

			IF bShowRiseAndRunText=0 AND walkingDirUPDN_m = WALKDIRSTR_NONE and bShowNumbering=0 OR walkl=0 and bShowNumbering=0 THEN HIDEPARAMETER "fontType"
		ENDIF
	endif

! ==============================================================================
! mm / point conversion
! ==============================================================================

MM_IN_A_DOT = 25.4 / 72

if GLOB_MODPAR_NAME = "gs_text_size_pt_UpDn" then
	UPDNfontsize = gs_text_size_pt_UpDn * MM_IN_A_DOT
	parameters UPDNfontsize = UPDNfontsize
else
	gs_text_size_pt_UpDn = UPDNfontsize / MM_IN_A_DOT
	parameters gs_text_size_pt_UpDn = gs_text_size_pt_UpDn
endif

if GLOB_MODPAR_NAME = "gs_text_size_pt" then
	fontsize = gs_text_size_pt * MM_IN_A_DOT
	parameters fontsize = fontsize
else
	gs_text_size_pt = fontsize / MM_IN_A_DOT
	parameters gs_text_size_pt = gs_text_size_pt
endif

if GLOB_MODPAR_NAME = "gs_text_size_pt_num" then
	gs_NumTextSize = gs_text_size_pt_num * MM_IN_A_DOT
	parameters gs_NumTextSize = gs_NumTextSize
else
	gs_text_size_pt_num = gs_NumTextSize / MM_IN_A_DOT
	parameters gs_text_size_pt_num = gs_text_size_pt_num
endif


! --- Connecting integer and section pencolor type parameters ---

dim iPenNumber[255]
for i=1 to 255
	iPenNumber[i]=i
next i

values "gs_cont_pen"		iPenNumber
values "gs_DashLinePen"		iPenNumber
values "railPen"			iPenNumber
values "gs_RailAxisPen"		iPenNumber
values "postPen"			iPenNumber
values "carriagePen"		iPenNumber
values "gs_fill_pen"		iPenNumber
values "gs_wLinePen"		iPenNumber
values "gs_NumTextPen"		iPenNumber
values "gs_text_pen"		iPenNumber
values "UPDNfontpen"		iPenNumber
values "gs_LinePenStUp"		iPenNumber
values "penLineStringer" 	iPenNumber
values "penFillStringer" 	iPenNumber
values "penLineTread" 		iPenNumber
values "penFillTread" 		iPenNumber
values "penLineRiser" 		iPenNumber
values "penFillRiser" 		iPenNumber

if GLOB_MODPAR_NAME = "penLineStringer_m" then
	if penLineStringer_m < -1 | penLineStringer_m > 255 then
		penLineStringer_m = 1
		parameters penLineStringer_m = penLineStringer_m
	endif
	parameters penLineStringer = penLineStringer_m
else
	parameters penLineStringer_m = penLineStringer
endif
if GLOB_MODPAR_NAME = "penFillStringer_m" then
	if penFillStringer_m < -1 | penFillStringer_m > 255 then
		penFillStringer_m = 1
		parameters penFillStringer_m = penFillStringer_m
	endif
	parameters penFillStringer = penFillStringer_m
else
	parameters penFillStringer_m = penFillStringer
endif

if GLOB_MODPAR_NAME = "penLineTread_m" then
	if penLineTread_m < 1 | penLineTread_m > 255 then
		penLineTread_m = 1
		parameters penLineTread_m = penLineTread_m
	endif
	parameters penLineTread = penLineTread_m
else
	parameters penLineTread_m = penLineTread
endif
if GLOB_MODPAR_NAME = "penFillTread_m" then
	if penFillTread_m < 1 | penFillTread_m > 255 then
		penFillTread_m = 1
		parameters penFillTread_m = penFillTread_m
	endif
	parameters penFillTread = penFillTread_m
else
	parameters penFillTread_m = penFillTread
endif

if GLOB_MODPAR_NAME = "penLineRiser_m" then
	if penLineRiser_m < 1 | penLineRiser_m > 255 then
		penLineRiser_m = 1
		parameters penLineRiser_m = penLineRiser_m
	endif
	parameters penLineRiser = penLineRiser_m
else
	parameters penLineRiser_m = penLineRiser
endif
if GLOB_MODPAR_NAME = "penFillRiser_m" then
	if penFillRiser_m < 1 | penFillRiser_m > 255 then
		penFillRiser_m = 1
		parameters penFillRiser_m = penFillRiser_m
	endif
	parameters penFillRiser = penFillRiser_m
else
	parameters penFillRiser_m = penFillRiser
endif

if GLOB_MODPAR_NAME = "penBackFillStringer_m" then
	if penBackFillStringer_m < -1 | penBackFillStringer_m > 255 then
		penBackFillStringer_m = 1
		parameters penBackFillStringer_m = penBackFillStringer_m
	endif
	parameters penBackFillStringer = penBackFillStringer_m
else
	parameters penBackFillStringer_m = penBackFillStringer
endif

if GLOB_MODPAR_NAME = "penBackFillTread_m" then
	if penBackFillTread_m < -1 | penBackFillTread_m > 255 then
		penBackFillTread_m = 1
		parameters penBackFillTread_m = penBackFillTread_m
	endif
	parameters penBackFillTread = penBackFillTread_m
else
	parameters penBackFillTread_m = penBackFillTread
endif

if GLOB_MODPAR_NAME = "penBackFillRiser_m" then
	if penBackFillRiser_m < -1 | penBackFillRiser_m > 255 then
		penBackFillRiser_m = 1
		parameters penBackFillRiser_m = penBackFillRiser_m
	endif
	parameters penBackFillRiser = penBackFillRiser_m
else
	parameters penBackFillRiser_m = penBackFillRiser
endif

! =============================================================================
! Onorm list Settings
! =============================================================================

if LibraryLangCode = "AUT" or LibraryLangCode = "CHE" or LibraryLangCode = "GER" then
	call "Onorm_Stair" parameters all matTread = mat_tread
else
	hideparameter "gs_onorm_Title", "gs_list_soundinsul"
endif

! =============================================================================
! IFC2x3 Property Set for Stairs
! =============================================================================

SPIRAL_STAIR = 11
parameters ifc_StairType 		= SPIRAL_STAIR
parameters ifc_NumberOfRiser 	= nRiser
parameters ifc_NumberOfTreads 	= numTread
parameters ifc_RiserHeight		= th
parameters ifc_TreadLength		= PI/180 * (r - flw/3) * (fokszog)

