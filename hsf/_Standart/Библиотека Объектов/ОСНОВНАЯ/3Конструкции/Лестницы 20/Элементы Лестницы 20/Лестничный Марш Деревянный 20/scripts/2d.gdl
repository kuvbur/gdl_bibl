

! ---------- Hotspots ----------[

	!!! FlightUNID=1		!!! 1,50,100,150
	!!! RailUNID=1000		!!! 1000-1250
	!!! BreakUNID=2000		!!! 2000,2050,2100,2150
	!!! StartSymbUNID=3000	!!! 3000,3100
	!!! ArrowUNID=4000		!!! 4000,4100,4200,4300,4400
	!!! RiseRunUNID=5000	!!! 5000,5050,5100
	!!! UpDownUNID=6000		!!! 6000
	!!! NumUNID=7000		!!! 7000,7100

! ---------- Hotspots ----------]

tempLine19  = 0
covthicky = 0
temp_wLineLength = 0
temp_wLineLengthAbove = 0

bCarriageLineExist		= bShowCarriage and bEnableCarriageLine and (GLOB_SCALE <= iShowCarriageUpTo | iShowCarriageUpTo = 1)

if bCarriageLineExist then
	FlightWidth		= flw - 2 * st
	tempStringWidth	= st
else
	FlightWidth		= flw
	tempStringWidth	= 0
endif

FlightUNID=1
HOTSPOT2 0,0, FlightUNID: FlightUNID=FlightUNID+1


!!!!!!!!!!!!!!!!!!! *** Story Sensitive *** !!!!!!!!!!!!!!!!!!!!!!

chStoryDist = GLOB_CH_STORY_DIST
IF not(gs_StorySensitive) THEN chStoryDist = 0

!!!!!!!!!!!!!!! *** Settings of 2D Symbol Type *** !!!!!!!!!!!!!!!
!!!!!!!!!!!! *** Stories, where the object is placed on !!!!!!!!!!

	!!! The default settings is ON of the next parameters:
	!!!	gs_2DTread,gs_2DTreadAbove,gs_2DRiserAbove,gs_2DContourAbove,

	!!! The default settings is OFF of the next parameters:
	!!!	gs_FillAbove

	temp_RiserLine= dash_line		!!because of Type 17, Type 20
	temp_RiserLinePEN= gs_DashLinePen

	IF walkl=0 THEN bShowRiseAndRunText=0			!! If no walking line > no Rise and Run Text

	! ---------- Settings of 2D Symbol Type ----------
	_iSymbolType = 1
	if gs_detlevel_2D_m = DET2D_SCALESENSITIVE then
		if GLOB_SCALE <= _iScaleMD then									!! Detailed Scale
			_iSymbolType = iEnabledSymbolTypes[iSymbolGroup][3]
		else
			if GLOB_SCALE > _iScaleMD & GLOB_SCALE <= _iScaleSM then	!! Middle Scale
				_iSymbolType = iEnabledSymbolTypes[iSymbolGroup][2]
			else														!! Simple Scale
				_iSymbolType = iEnabledSymbolTypes[iSymbolGroup][1]
			endif
		endif
	else
		_iSymbolType = gs_SymbolType_m
	endif
	
	IF _iSymbolType = 1 THEN
		!!! Treads
		ns=0
		brk=0
		gs_2DTread=0
		solid_line = dash_line
		gs_cont_pen = gs_DashLinePen
		gs_NosingLine = solid_line
		!!! Numbering
		gs_NumBelow = 1
		gs_NumAbove = 1
		!!! Walking Line
		temp_wLineType=gs_wLineType2
		!!! Railing
		rail_m = RAILPOS_NONE
	ENDIF

	IF _iSymbolType = 2 THEN
		!!! Treads
		ns=0
		brk=0
		gs_2DTread=0
		!!! Numbering
		gs_NumBelow = 1
		gs_NumAbove = 1
		!!! Walking Line
		temp_wLineType=gs_wLineType1
		!!! Railing
		rail_m = RAILPOS_NONE
	ENDIF

	IF _iSymbolType = 3 THEN
		!!! Treads
		ns=0
		brk=1
		iLineTypeAboveBreak = LINETYPEABOVEBREAK_INTERSECT
		gs_2DContourAbove=0
		gs_2DTread=0
		gs_2DTreadAbove=0
		!!! Numbering
		gs_NumBelow = 1
		IF chStoryDist > EPS  then
			gs_NumAbove = 1
			ELSE
			gs_NumAbove = 0
		ENDIF
		!!! Walking Line
		temp_wLineType=gs_wLineType1
		!!! Railing
		rail_m = RAILPOS_NONE
	ENDIF

	IF _iSymbolType = 4 THEN
		!!! Treads
		ns=0
		brk=1
		iLineTypeAboveBreak = LINETYPEABOVEBREAK_INTERSECT
		gs_2DTread=0
		gs_2DTreadAbove=0
		!!! Walking Line
		temp_wLineType=gs_wLineType1
		!!! Railing
		rail_m = RAILPOS_NONE
	ENDIF

	IF _iSymbolType = 5 THEN
		!!! Treads
		ns=0
		brk=1
		iLineTypeAboveBreak = LINETYPEABOVEBREAK_INTERSECT
		gs_2DTread=0
		gs_2DTreadAbove=0
		IF chStoryDist > -EPS  then
			dash_line = solid_line
			gs_DashLinePen = gs_cont_pen
		ENDIF
		!!! Walking Line
		temp_wLineType = gs_wLineType1
		gs_wLineTypeAbove = gs_wLineType1
		!!! Railing
		rail_m = RAILPOS_NONE
	ENDIF

	IF _iSymbolType = 6 THEN
		!!! Treads
		ns=0
		brk=0
		iLineTypeAboveBreak = LINETYPEABOVEBREAK_FULL
		solid_line = dash_line
		gs_cont_pen = gs_DashLinePen
		gs_NosingLine = solid_line
		!!! Numbering
		gs_NumBelow = 1
		gs_NumAbove = 1
		!!! Walking Line
		temp_wLineType=gs_wLineType2
		!!! Railing
		rail_m = RAILPOS_NONE
	ENDIF

	IF _iSymbolType = 7 THEN
		!!! Treads
		ns=0
		brk=0
		iLineTypeAboveBreak = LINETYPEABOVEBREAK_FULL
		!!! Numbering
		gs_NumBelow = 1
		gs_NumAbove = 1
		!!! Walking Line
		temp_wLineType=gs_wLineType1
		!!! Railing
		rail_m = RAILPOS_NONE
	ENDIF

	IF _iSymbolType = 8 THEN
		!!! Treads
		ns=0
		brk=1
		iLineTypeAboveBreak = LINETYPEABOVEBREAK_INTERSECT
		gs_2DContourAbove=0
		gs_2DTreadAbove=0
		!!! Numbering
		gs_NumBelow = 1
		IF chStoryDist > EPS  then
			gs_NumAbove = 1
			ELSE
			gs_NumAbove = 0
		ENDIF
		!!! Walking Line
		temp_wLineType=gs_wLineType1
		!!! Railing
		rail_m = RAILPOS_NONE
	ENDIF

	IF _iSymbolType = 9 THEN
		!!! Treads
		ns=0
		brk=1
		iLineTypeAboveBreak = LINETYPEABOVEBREAK_INTERSECT
		gs_2DTreadAbove=0
		!!! Walking Line
		temp_wLineType=gs_wLineType1
		!!! Railing
		rail_m = RAILPOS_NONE
	ENDIF

	IF _iSymbolType = 10 THEN
		!!! Treads
		ns=0
		brk=1
		iLineTypeAboveBreak = LINETYPEABOVEBREAK_INTERSECT
		gs_2DTreadAbove=0
		IF chStoryDist > -EPS  then
			dash_line = solid_line
			gs_DashLinePen = gs_cont_pen
		ENDIF
		!!! Walking Line
		temp_wLineType=gs_wLineType1
		gs_wLineTypeAbove = gs_wLineType1
		!!! Railing
		rail_m = RAILPOS_NONE
	ENDIF

	IF _iSymbolType = 11 THEN
		!!! Treads
		ns=0
		brk=1
		iLineTypeAboveBreak = LINETYPEABOVEBREAK_INTERSECT
		!!! Walking Line
		temp_wLineType=gs_wLineType1
		!!! Railing
		rail_m = RAILPOS_NONE
	ENDIF

	IF _iSymbolType = 12 THEN
		!!! Treads
		ns=0
		brk=1
		iLineTypeAboveBreak = LINETYPEABOVEBREAK_INTERSECT
		IF chStoryDist > -EPS  then
			dash_line = solid_line
			gs_DashLinePen = gs_cont_pen
		ENDIF
		!!! Walking Line
		temp_wLineType=gs_wLineType1
		gs_wLineTypeAbove = gs_wLineType1
		!!! Railing
		rail_m = RAILPOS_NONE
	ENDIF

	IF _iSymbolType = 13 THEN
		!!! Treads
		brk=0
		iLineTypeAboveBreak = LINETYPEABOVEBREAK_FULL
		solid_line = dash_line
		gs_cont_pen = gs_DashLinePen
		!!! Numbering
		gs_NumBelow = 1
		gs_NumAbove = 1
		!!! Walking Line
		temp_wLineType=gs_wLineType2
	ENDIF

	IF _iSymbolType = 14 THEN
		!!! Treads
		brk=0
		iLineTypeAboveBreak = LINETYPEABOVEBREAK_FULL
		!!! Numbering
		gs_NumBelow = 1
		gs_NumAbove = 1
		!!! Walking Line
		temp_wLineType=gs_wLineType1
	ENDIF

	IF _iSymbolType = 15 THEN
		!!! Treads
		brk=1
		iLineTypeAboveBreak = LINETYPEABOVEBREAK_INTERSECT
		gs_2DContourAbove=0
		gs_2DTreadAbove=0
		gs_2DRiserAbove=0
		!!! Numbering
		gs_NumBelow = 1
		IF chStoryDist > EPS  then
			gs_NumAbove = 1
			gs_2DRiserAbove=1
			ELSE
			gs_NumAbove = 0
			gs_2DRiserAbove=0
		ENDIF
		!!! Walking Line
		temp_wLineType=gs_wLineType1
	ENDIF

	IF _iSymbolType = 16 THEN
		!!! Treads
		brk=1
		iLineTypeAboveBreak = LINETYPEABOVEBREAK_INTERSECT
		gs_2DTreadAbove=0
		!!! Walking Line
		temp_wLineType=gs_wLineType1
	ENDIF

	IF _iSymbolType = 17 THEN
		!!! Treads
		brk=1
		iLineTypeAboveBreak = LINETYPEABOVEBREAK_INTERSECT
		gs_2DTreadAbove=0
		IF ABS(chStoryDist) < EPS  then
			dash_line = solid_line
			gs_DashLinePen = gs_cont_pen
			ELSE
			dash_line = dash_line
			gs_DashLinePen = gs_DashLinePen
		ENDIF
		!!! Walking Line
		temp_wLineType=gs_wLineType1
		gs_wLineTypeAbove = gs_wLineType1
	ENDIF

	IF _iSymbolType = 18 THEN
		!!! Treads
		brk=1
		iLineTypeAboveBreak = LINETYPEABOVEBREAK_INTERSECT
		!!! Walking Line
		temp_wLineType=gs_wLineType1
	ENDIF

	IF _iSymbolType = 19 THEN
		!!! Treads
		brk=1
		iLineTypeAboveBreak = LINETYPEABOVEBREAK_INTERSECT
		gs_2DRiserAbove=0
		!!! Walking Line
		temp_wLineType=gs_wLineType1
	ENDIF

	IF _iSymbolType = 20 THEN
		!!! Treads
		brk=1
		iLineTypeAboveBreak = LINETYPEABOVEBREAK_INTERSECT
		IF ABS(chStoryDist) < EPS  then
			dash_line = solid_line
			gs_DashLinePen = gs_cont_pen
			ELSE
			dash_line = dash_line
			gs_DashLinePen = gs_DashLinePen
		ENDIF
		!!! Walking Line
		temp_wLineType=gs_wLineType1
		gs_wLineTypeAbove = gs_wLineType1
	ENDIF

!!!!!!!!!!!!!! *** 2D Representation on Stories *** !!!!!!!!!!!!!!
!!! *** Stories above the story, where the object is placed on !!!

IF gs_StorySensitive=1 THEN

	IF chStoryDist > EPS  then

		!!! Line Type and Pen
		solid_line = gs_LineTypeStUp
			IF gs_BreaklineStUp=0 THEN
				dash_line = dash_line
				ELSE
				dash_line = gs_LineTypeStUp
			ENDIF
		gs_cont_pen = gs_LinePenStUp
		IF gs_BreaklineStUp=1 THEN gs_DashLinePen = gs_LinePenStUp

		!!! Walking Line
		gs_wLineType1 = gs_wLineTypeStUp
		gs_wLineType2 = gs_wLineTypeStUp
		gs_wLineTypeAbove = gs_wLineTypeStUp
		temp_wLineType = gs_wLineTypeStUp



		!!! Rise and Run Text
		IF gs_txStUp = 1 THEN
			bShowRiseAndRunText = 1
			ELSE
			bShowRiseAndRunText = 0
		ENDIF

		!!! NUMBERING
		IF gs_numaStUp = 1 THEN
			bShowNumbering = 1
			gs_NumAbove = 1
			gs_NumBelow = 1
			ELSE
			bShowNumbering = 0
			gs_NumAbove = 0
			gs_NumBelow = 0
		ENDIF

		IF gs_BreaklineStUp=1 THEN
			brk=1
			iLineTypeAboveBreak = LINETYPEABOVEBREAK_INTERSECT
			ELSE
			brk=0
			iLineTypeAboveBreak = LINETYPEABOVEBREAK_FULL
		ENDIF

		IF gs_BreaklineStUp=0 AND gs_TreadStUp=1  THEN gs_2DTread=1
		IF gs_BreaklineStUp=0 AND gs_TreadStUp=0  THEN gs_2DTread=0


		IF gs_BreaklineStUp=1 THEN

			IF gs_UpperPartStUp=1 THEN
				gs_2DContourAbove=1
				gs_NumAbove = 1
				ELSE
				gs_2DTreadAbove=0
				gs_2DContourAbove=0
				gs_NumAbove = 0
			ENDIF

			IF gs_LowerPartStUp=1 THEN
				gs_2DContourBelow=1
				gs_NumBelow = 1
				ELSE
				gs_2DTread=0
				gs_2DContourBelow=0
				gs_NumBelow = 0
			ENDIF

			IF gs_UpperPartStUp=1 AND gs_TreadStUp=1  THEN gs_2DTreadAbove=1
			IF gs_UpperPartStUp=1 AND gs_TreadStUp=0  THEN gs_2DTreadAbove=0

			IF gs_LowerPartStUp=1 AND gs_TreadStUp=1  THEN gs_2DTread=1
			IF gs_LowerPartStUp=1 AND gs_TreadStUp=0  THEN gs_2DTread=0

		ENDIF

	ENDIF
ENDIF


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!! *** Stories down the story, where the object is placed on !!!!

	IF chStoryDist < -EPS  then
		rail_m = RAILPOS_NONE
		bShowNumbering=0
		bShowRiseAndRunText=0
		walkingDirUPDN_m = WALKDIRSTR_NONE
		brk=0
		walkl=0
		solid_line = dash_line
		gs_cont_pen=gs_DashLinePen
		SET LINE_TYPE dash_line
		gs_fill_type=65
		gs_back_pen=0
	endif

	if bCarriageLineExist then
		sideMask	= 0
	ELSE
		sideMask	= 1
	ENDIF

	IF chStoryDist > -EPS THEN
		IF NOT(gs_2DTread) THEN
			MASK2=0
		ELSE
			MASK2=1
		ENDIF
	ENDIF

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!! Arrow Size

	ArrowDist=gs_ArrowHalfWidth

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

PEN gs_cont_pen
FILL gs_fill_type
DRAWINDEX 10

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!! *** CONTOUR LINES AND FILL *** !!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

ADD2 tempStringWidth, 0
!!NumStline=INT (1/th)	!!! POSITION of BREAK LINE
NumStline=INT (gs_BreakHeight/th)	!!! POSITION of BREAK LINE
IF ZZYZX <= (NumStline+1)*th THEN brk=0		!!!IF value of ZZYZX is less than BREAK LINE

	!!! Contour Line and Fill Type
	IF iLineTypeAboveBreak = LINETYPEABOVEBREAK_INTERSECT THEN
		temp_line=dash_line
		temp_pen=gs_DashLinePen
		IF gs_FillAbove=1 THEN
			FullFill=2+64
			temp_FillTypeAbove=gs_fill_type
			temp_BackPen=gs_back_pen
		ELSE
			FullFill=0
			temp_FillTypeAbove=gs_FillTypeAbove		!!! because of Area Fill Selection
			temp_BackPen=0							!!! because of Area Fill Selection
		ENDIF
	ELSE
		temp_line=solid_line
		temp_pen=gs_cont_pen
		FullFill=2+64
		temp_FillTypeAbove=gs_fill_type
		temp_BackPen=gs_back_pen
	ENDIF


	!!! BREAK LINE Distance
		brkLineX=(brkLineY*FlightWidth)/(2*td)

	!! No BREAK LINE
	IF brk=0 THEN

		PEN gs_cont_pen
		SET LINE_TYPE solid_line

		POLY2_b 5, 1+2+64, gs_fill_pen, gs_back_pen,
			0, td-ns, gs_2DTread,
			FlightWidth, td-ns, sideMask,
			FlightWidth, (rnu-1)*td, 1,
			0, (rnu-1)*td, sideMask,
			0, td-ns, -1

	ELSE	!!! with Break Line

			IF breakline_style_m = BREAKLINE_STRAIGHT THEN

				IF gs_2DContourBelow=1 THEN

					PEN gs_cont_pen
					SET LINE_TYPE solid_line

					POLY2_b 5, 1+2+64, gs_fill_pen, gs_back_pen,
						0, td-ns, 0,
						FlightWidth, td-ns, sideMask,
						FlightWidth, (NumStline+1)*td-ns, 1,
						0, (NumStline-1)*td-ns, sideMask,
						0, td-ns, -1

					BreakUNID=2000
					HOTSPOT2 0, (NumStline-1)*td-ns, BreakUNID: BreakUNID=BreakUNID+1
					HOTSPOT2 FlightWidth, (NumStline+1)*td-ns, BreakUNID: BreakUNID=BreakUNID+1

				ENDIF


				IF gs_2DContourAbove=1 THEN		!!IF No Contour above Break Line

					PEN temp_pen
					FILL temp_FillTypeAbove
					SET LINE_TYPE temp_line

					LINE2 0, (NumStline-1)*td-ns+brkLineY,FlightWidth, (NumStline+1)*td-ns+brkLineY


					POLY2_b 5, 1+FullFill, gs_fill_pen, temp_BackPen,
						0, (NumStline-1)*td-ns+brkLineY, 0,
						FlightWidth, (NumStline+1)*td-ns+brkLineY, sideMask,
						FlightWidth, (rnu-1)*td, 1,
						0, (rnu-1)*td, sideMask,
						0, (NumStline-1)*td-ns+brkLineY, -1

						BreakUNID=2050

						!!! BREAK LINE
						HOTSPOT2 FlightWidth/2,		(NumStline)*td-ns, BreakUNID, brkLineY, 1+128 : BreakUNID=BreakUNID+1
						HOTSPOT2 FlightWidth/2,		(NumStline)*td-ns-1, BreakUNID, brkLineY, 3 : BreakUNID=BreakUNID+1
						HOTSPOT2 FlightWidth/2,		(NumStline)*td-ns+brkLineY, BreakUNID, brkLineY, 2 : BreakUNID=BreakUNID+1

						HOTSPOT2 0, (NumStline-1)*td-ns+brkLineY, BreakUNID: BreakUNID=BreakUNID+1
						HOTSPOT2 FlightWidth, (NumStline+1)*td-ns+brkLineY, BreakUNID: BreakUNID=BreakUNID+1


				ENDIF


			ELSE
				if breakline_style_m = BREAKLINE_ZIGZAG_CHI then

					angle_breakline=ATN(2*td/FlightWidth)
					ZigZag1Y=(2/5*FlightWidth)*tan(angle_breakline)
					ZigZag2Y=(2/5*FlightWidth)*tan(angle_breakline)

					IF gs_2DContourBelow=1 THEN

						PEN gs_cont_pen
						SET LINE_TYPE solid_line

						POLY2_b 9, 1+2+64, gs_fill_pen, gs_back_pen,
							0, td-ns, 0,
							FlightWidth, td-ns, sideMask,
							FlightWidth, (NumStline+1)*td-ns, 1,
							6/10*FlightWidth,(NumStline+1)*td-ns-ZigZag1Y, 1,
							6/10*FlightWidth,(NumStline-1)*td-ns+ZigZag1Y, 1,
							4/10*FlightWidth,(NumStline+1)*td-ns-ZigZag1Y+brkLineY, 1,
							4/10*FlightWidth,(NumStline-1)*td-ns+ZigZag1Y, 1,
							0, (NumStline-1)*td-ns, sideMask,
							0, td-ns, -1

						BreakUNID=2100

						HOTSPOT2 0, (NumStline-1)*td-ns, BreakUNID: BreakUNID=BreakUNID+1
						HOTSPOT2 FlightWidth, (NumStline+1)*td-ns, BreakUNID: BreakUNID=BreakUNID+1

					ENDIF


					IF gs_2DContourAbove=1 THEN		!!IF No Contour above Break Line

						PEN temp_pen
						FILL temp_FillTypeAbove
						SET LINE_TYPE temp_line

						POLY2_b 9, 1+FullFill, gs_fill_pen, temp_BackPen,
							0, (NumStline-1)*td-ns+brkLineY, 1,
							4/10*FlightWidth, (NumStline-1)*td -ns + brkLineY+ZigZag2Y, 1,
							4/10*FlightWidth, (NumStline+1)*td -ns + brkLineY-ZigZag1Y, 1,
							6/10*FlightWidth, (NumStline-1)*td -ns+ZigZag1Y, 1,
							6/10*FlightWidth, (NumStline-1)*td -ns+ brkLineY+ZigZag2Y+2*(td-ZigZag1Y), 1,
							FlightWidth, (NumStline+1)*td-ns+brkLineY, sideMask,
							FlightWidth, (rnu-1)*td, 1,
							0, (rnu-1)*td, sideMask,
							0, (NumStline-1)*td-ns+brkLineY, -1

						BreakUNID=2150

						!!! BREAK LINE
						HOTSPOT2 FlightWidth/2,		(NumStline)*td-ns, BreakUNID, brkLineY, 1+128 : BreakUNID=BreakUNID+1
						HOTSPOT2 FlightWidth/2,		(NumStline)*td-ns-1, BreakUNID, brkLineY, 3 : BreakUNID=BreakUNID+1
						HOTSPOT2 FlightWidth/2,		(NumStline)*td-ns+brkLineY, BreakUNID, brkLineY, 2 : BreakUNID=BreakUNID+1

						HOTSPOT2 0, (NumStline-1)*td-ns+brkLineY, BreakUNID: BreakUNID=BreakUNID+1
						HOTSPOT2 FlightWidth, (NumStline+1)*td-ns+brkLineY, BreakUNID: BreakUNID=BreakUNID+1


					ENDIF
				else	!!! breakline_style=`Zigzag`

					angle_breakline=ATN(2*td/FlightWidth)
					ZigZag1Y=(2/5*FlightWidth)*tan(angle_breakline)
					ZigZag2Y=(7/20*FlightWidth)*tan(angle_breakline)

					IF gs_2DContourBelow=1 THEN

						PEN gs_cont_pen
						SET LINE_TYPE solid_line

						POLY2_b 9, 1+2+64, gs_fill_pen, gs_back_pen,
							0, td-ns, 0,
							FlightWidth, td-ns, sideMask,
							FlightWidth, (NumStline+1)*td-ns, 1,
							6/10*FlightWidth,(NumStline+1)*td-ns-ZigZag1Y, 1,
							6/10*FlightWidth,(NumStline-1)*td-ns+ZigZag1Y, 1,
							4/10*FlightWidth,(NumStline+1)*td-ns-ZigZag1Y, 1,
							4/10*FlightWidth,(NumStline-1)*td-ns+ZigZag1Y, 1,
							0, (NumStline-1)*td-ns, sideMask,
							0, td-ns, -1

						BreakUNID=2100

						HOTSPOT2 0, (NumStline-1)*td-ns, BreakUNID: BreakUNID=BreakUNID+1
						HOTSPOT2 FlightWidth, (NumStline+1)*td-ns, BreakUNID: BreakUNID=BreakUNID+1

					ENDIF


					IF gs_2DContourAbove=1 THEN		!!IF No Contour above Break Line

						PEN temp_pen
						FILL temp_FillTypeAbove
						SET LINE_TYPE temp_line

						POLY2_b 9, 1+FullFill, gs_fill_pen, temp_BackPen,
							0, (NumStline-1)*td-ns+brkLineY, 1,
							7/20*FlightWidth, (NumStline-1)*td -ns + brkLineY+ZigZag2Y, 1,
							7/20*FlightWidth, (NumStline-1)*td -ns + brkLineY+ZigZag2Y+2*(td-ZigZag1Y), 1,
							11/20*FlightWidth, (NumStline-1)*td -ns+ brkLineY+ZigZag2Y, 1,
							11/20*FlightWidth, (NumStline-1)*td -ns+ brkLineY+ZigZag2Y+2*(td-ZigZag1Y), 1,
							FlightWidth, (NumStline+1)*td-ns+brkLineY, sideMask,
							FlightWidth, (rnu-1)*td, 1,
							0, (rnu-1)*td, sideMask,
							0, (NumStline-1)*td-ns+brkLineY, -1

						BreakUNID=2150

						!!! BREAK LINE
						HOTSPOT2 FlightWidth/2,		(NumStline)*td-ns, BreakUNID, brkLineY, 1+128 : BreakUNID=BreakUNID+1
						HOTSPOT2 FlightWidth/2,		(NumStline)*td-ns-1, BreakUNID, brkLineY, 3 : BreakUNID=BreakUNID+1
						HOTSPOT2 FlightWidth/2,		(NumStline)*td-ns+brkLineY, BreakUNID, brkLineY, 2 : BreakUNID=BreakUNID+1

						HOTSPOT2 0, (NumStline-1)*td-ns+brkLineY, BreakUNID: BreakUNID=BreakUNID+1
						HOTSPOT2 FlightWidth, (NumStline+1)*td-ns+brkLineY, BreakUNID: BreakUNID=BreakUNID+1


					ENDIF
				endif



			ENDIF

	ENDIF

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!! *** TREADS *** !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

	IF brk=0 THEN		!!! IF NO BREAK LINE

		IF chStoryDist > -EPS  then

			IF gs_2DTread=1 THEN
				ADD2 0,2*td-ns
					FOR numTread=1 to rnu-3

						PEN gs_cont_pen
						SET LINE_TYPE solid_line

						LINE2 0,0,FlightWidth,0
						IF ns=0 THEN HOTLINE2 0,0,FlightWidth,0
						ADD2 0,td
					NEXT numTread
					DEL rnu-3
				DEL 1

				IF ns> 0 THEN	!!! IF TREAD NOSING > 0
				ADD2 0,td
					FOR numTread=1 to rnu-2

						PEN gs_DashLinePen
						SET LINE_TYPE dash_line

						LINE2 0,0,FlightWidth,0
						HOTLINE2 0,0,FlightWidth,0
						ADD2 0,td
					NEXT numTread
					DEL rnu-2
				DEL 1
				ENDIF
			ENDIF

		ENDIF

	ELSE	!!! with Break Line

		!!! TREAD UNDER BREAK LINE

		IF gs_2DTread=1 THEN
			ADD2 0,td-ns
				FOR numTread=1 to NumStline
					StartSolid=0

					IF breakline_style_m = BREAKLINE_STRAIGHT THEN
						IF numTread=NumStline THEN StartSolid=FlightWidth/2
						ELSE
						IF numTread=NumStline THEN StartSolid=FlightWidth*6/10
					ENDIF

					PEN gs_cont_pen
					SET LINE_TYPE solid_line

					!!! SOLID LINE

					LINE2 StartSolid,0,FlightWidth,0
					IF ns=0 THEN HOTLINE2 StartSolid,0,FlightWidth,0

					IF ns> 0 THEN	!!! IF TREAD NOSING > 0

						StartDashed=0
						IF breakline_style_m = BREAKLINE_STRAIGHT THEN

							IF numTread=NumStline THEN StartDashed=FlightWidth/2+((ns)*FlightWidth)/(2*td)
							IF numTread=NumStline-1 THEN StartDashed=((ns)*FlightWidth)/(2*td)

						ELSE

							IF distZigZag >= 4/10*FlightWidth THEN
							distZigZag = 4/10*FlightWidth
							ELSE
							distZigZag=(FlightWidth*(td-ns))/(2*td)
							ENDIF

							IF numTread=NumStline THEN StartDashed=FlightWidth-distZigZag
							IF numTread=NumStline-1 THEN StartDashed=(FlightWidth*(ns))/(2*td)

						ENDIF

						ADD2 0,ns
							PEN temp_RiserLinePen
							SET LINE_TYPE temp_RiserLine
							!!! DASHED LINE
							LINE2 StartDashed,0,FlightWidth,0
							HOTLINE2 StartDashed,0,FlightWidth,0
						DEL 1
						ENDIF

					ADD2 0,td
				NEXT numTread
				DEL NumStline
			DEL 1
		ENDIF

		!!! TREADS ABOVE BREAK LINE

		IF gs_2DTreadAbove=1 THEN
			ADD2 0,(NumStline)*td-ns
				FOR numTread=1 to rnu-NumStline-1

					EndSolid=FlightWidth

					IF breakline_style_m = BREAKLINE_STRAIGHT THEN
						IF numTread=1 THEN EndSolid=FlightWidth/2-brkLineX
						IF numTread=2 THEN EndSolid=FlightWidth-brkLineX
					ELSE
						if breakline_style_m = BREAKLINE_ZIGZAG_CHI then
							ZigZagCorrection = 1/10
						else
							ZigZagCorrection = 3/20
						endif
						IF brkLineX <= ZigZagCorrection*FlightWidth THEN
							IF numTread=1 THEN EndSolid=FlightWidth/2-ZigZagCorrection*FlightWidth
							else
							IF numTread=1 THEN EndSolid=FlightWidth/2-brkLineX
						endif


						IF (FlightWidth/2-brkLineX) <= (4/20-ZigZagCorrection)*FlightWidth THEN
							IF numTread=2 THEN EndSolid=FlightWidth/2-ZigZagCorrection*FlightWidth
							else
							IF numTread=2 THEN EndSolid=FlightWidth-brkLineX
						endif

					ENDIF

					PEN temp_pen
					SET LINE_TYPE temp_line

					!!! SOLID LINE
					LINE2 0,0,EndSolid,0
					IF ns=0 THEN HOTLINE2 0,0,EndSolid,0

					!!! DASHED LINE/RISER
					IF gs_2DRiserAbove=1 THEN
						IF ns> 0 THEN	!!! IF TREAD NOSING > 0
							EndDashed=FlightWidth
							IF breakline_style_m = BREAKLINE_STRAIGHT THEN
								IF numTread=1 THEN EndDashed=FlightWidth/2+((ns)*FlightWidth)/(2*td)-brkLineX
								IF numTread=2 THEN EndDashed=FlightWidth-brkLineX+((ns)*FlightWidth)/(2*td)

							ELSE

								IF distZigZag <= (0.5-ZigZagCorrection)*FlightWidth THEN
									distZigZag = (0.5-ZigZagCorrection)*FlightWidth
								ELSE
									distZigZag=(FlightWidth*(td/2+ns))/(2*td)
								ENDIF

								IF (brkLineX-((ns)*FlightWidth)/(2*td)) <= ZigZagCorrection*FlightWidth  AND FlightWidth/2+((ns)*FlightWidth)/(2*td)-brkLineX< FlightWidth/2+(4/20-ZigZagCorrection)*FlightWidth THEN
									IF numTread=1 THEN EndDashed=FlightWidth/2-ZigZagCorrection*FlightWidth
									else
									IF numTread=1 THEN EndDashed=FlightWidth/2-brkLineX+((ns)*FlightWidth)/(2*td)
								endif

								IF (FlightWidth-brkLineX+((ns)*FlightWidth)/(2*td)) >= FlightWidth THEN
									IF numTread=2 THEN EndDashed=FlightWidth
									else
									IF numTread=2 THEN EndDashed=FlightWidth-brkLineX+((ns)*FlightWidth)/(2*td)
								endif

							ENDIF

								ADD2 0,ns
									PEN temp_RiserLinePen
									SET LINE_TYPE temp_RiserLine
									!!! DASHED LINE
									LINE2 0,0,EndDashed,0
									HOTLINE2 0,0,EndDashed,0
								DEL 1
						ENDIF
					ENDIF

					ADD2 0,td
				NEXT numTread
				DEL rnu-NumStline-1
			DEL 1
		ENDIF
	ENDIF


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!! *** NEWEL POST *** !!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
IF gs_2DContourBelow=1 THEN
	if bCarriageLineExist then
		IF np_m = POSTPOS_LEFT or np_m = POSTPOS_BOTH THEN
			IF iBottomStepArrangement <> BSTEPARRANGE_NORMAL THEN
				ADD2 -nps,td-nps/2
			ELSE
				ADD2 -nps,0
			ENDIF

				PEN gs_cont_pen
				SET LINE_TYPE solid_line

					POLY2_b 5, 1+2+64, gs_fill_pen, gs_back_pen,
						0, 0, 1,
						nps, 0, 1,
						nps, nps, 1,
						0, nps, 1,
						0, 0, -1
			DEL 1
		ENDIF

		IF np_m = POSTPOS_RIGHT or np_m = POSTPOS_BOTH THEN

			IF iBottomStepArrangement <> BSTEPARRANGE_NORMAL THEN
				ADD2 FlightWidth,td-nps/2
			ELSE
				ADD2 FlightWidth,0
			ENDIF

				PEN gs_cont_pen
				SET LINE_TYPE solid_line

				POLY2_b 5, 1+2+64, gs_fill_pen, gs_back_pen,
					0, 0, 1,
					nps, 0, 1,
					nps, nps, 1,
					0, nps, 1,
					0, 0, -1
			DEL 1
		ENDIF
	ENDIF
ENDIF
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!! *** BOTTOM STEP *** !!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

IF gs_2DContourBelow=1 THEN
IF iBottomStepArrangement = BSTEPARRANGE_NORMAL THEN

		PEN gs_cont_pen
		SET LINE_TYPE solid_line

		POLY2_b 5, 1+2+64, gs_fill_pen, gs_back_pen,
			0, -ns, 1,
			FlightWidth, -ns, 1,
			FlightWidth, td-ns, gs_2DTread,
			0,td-ns, 1,
			0, -ns, -1

		IF ns>0 and chStoryDist > -EPS OR ns>0 and chStoryDist > EPS AND gs_TreadStUp=1 THEN

			PEN gs_DashLinePen
			SET LINE_TYPE dash_line

			LINE2 0,0,FlightWidth,0

		ENDIF
ELSE

	CutPostX=nps
	CutPostY=nps/2

	IF np_m = POSTPOS_BOTH THEN
		IF iBottomStepArrangement = BSTEPARRANGE_DSTEP THEN

				PEN gs_cont_pen
				SET LINE_TYPE solid_line

				if bCarriageLineExist then

					put	-CutPostX,				-ns,			1,
						FlightWidth+CutPostX,	-ns,			1,
						FlightWidth+CutPostX,	td/2,			901,
						0,						180,			4001,
						FlightWidth+CutPostX,	td-CutPostY,	1

					if abs(CutPostY-ns) > EPS then
						put	FlightWidth,	td-CutPostY,	1,
							FlightWidth,	td-ns,			gs_2DTread,
							0,				td-ns,			1,
							0,				td-CutPostY,	1,
							-CutPostX,		td-CutPostY,	1,
							-CutPostX,		td+ns,			1,
							-CutPostX,		td/2,			901,
							-CutPostX,		180,			4001
					else
						put	FlightWidth,	td-CutPostY,	gs_2DTread,
							0,				td-CutPostY,	1,
							-CutPostX,		td-CutPostY,	1,
							-CutPostX,		td+ns,			1,
							-CutPostX,		td/2,			901,
							-CutPostX,		180,			4001
					endif

					POLY2_b NSP/3, 1+2+4+64, gs_fill_pen, gs_back_pen,
						get (NSP)
				ELSE
					modFlightWidth = FlightWidth - 2 * st
					add2 (FlightWidth - modFlightWidth)/2,0

					POLY2_b 7, 1+2+64, gs_fill_pen, gs_back_pen,
						-CutPostX,-ns,1,
						modFlightWidth+CutPostX,-ns,1,
						modFlightWidth+CutPostX,td/2,901,
						0,180,4001,
						-CutPostX,td+ns,1,
						-CutPostX,td/2,901,
						-CutPostX,180,4001
					del 1
				ENDIF

!			IF ns>0 and chStoryDist > -EPS THEN
			IF ns>0 and chStoryDist > -EPS OR ns>0 and chStoryDist > EPS AND gs_TreadStUp=1 THEN

				PEN gs_DashLinePen
				SET LINE_TYPE dash_line

				if bCarriageLineExist then
					LINE2 -nps,0,FlightWidth+nps,0
					ARC2 -nps,td/2,td/2,90,270
					ARC2 FlightWidth+nps,td/2,td/2,-90,-270
				else
					LINE2 0,0,FlightWidth,0
					ARC2 0,td/2,td/2,90,270
					ARC2 FlightWidth,td/2,td/2,-90,-270
				endif

			ENDIF
		ENDIF

		IF iBottomStepArrangement = BSTEPARRANGE_BULLNOSE THEN

				PEN gs_cont_pen
				SET LINE_TYPE solid_line

				if abs(CutPostY-ns) > EPS then
					put	0,							td-ns,			1,
						0,							td-CutPostY,	1,
						-ns,						td-CutPostY,	1,
						td-CutPostY,				td-CutPostY,	901,
						0,							90,				4001,
						FlightWidth-(td-CutPostY),	-ns,			1,
						FlightWidth-(td-CutPostY),	td-CutPostY,	901,
						0,							90,				4001,
						FlightWidth,				td-CutPostY,	1,
						FlightWidth,				td-ns,			gs_2DTread,
						0,							td,				-1
				else
					put	0,							td-CutPostY,	1,
						-ns,						td-CutPostY,	1,
						td-CutPostY,				td-CutPostY,	901,
						0,							90,				4001,
						FlightWidth-(td-CutPostY),	-ns,			1,
						FlightWidth-(td-CutPostY),	td-CutPostY,	901,
						0,							90,				4001,
						FlightWidth,				td-CutPostY,	gs_2DTread,
						0,							td,				-1
				endif

				POLY2_b NSP/3, 1+2+64, gs_fill_pen, gs_back_pen,
					get (NSP)

			IF ns>0 and chStoryDist > -EPS OR ns>0 and chStoryDist > EPS AND gs_TreadStUp=1 THEN

					PEN gs_DashLinePen
					SET LINE_TYPE dash_line

					LINE2 td-CutPostY,0,FlightWidth-(td-CutPostY),0
					ARC2 td-CutPostY,td-CutPostY,td-CutPostY,180,270
					ARC2 FlightWidth-(td-CutPostY),td-CutPostY,td-CutPostY,270,360
			ENDIF
		ENDIF

		IF iBottomStepArrangement = BSTEPARRANGE_SPLAYED THEN

				PEN gs_cont_pen
				SET LINE_TYPE solid_line

				POLY2_b 11, 1+2+64, gs_fill_pen, gs_back_pen,
					0,td-ns,1,
					0,td-CutPostY,1,
					-ns,td-CutPostY,1,
					-ns,2/3*td-ns*tan(22.5),1,
					2/3*td-ns*tan(22.5),-ns,1,
					FlightWidth-2/3*td+ns*tan(22.5),-ns,1,
					FlightWidth+ns,2/3*td-ns*tan(22.5),1,
					FlightWidth+ns,td-CutPostY,1,
					FlightWidth,td-CutPostY,1,
					FlightWidth,td-ns,gs_2DTread,
					0,td-ns,-1

			IF ns>0 and chStoryDist > -EPS OR ns>0 and chStoryDist > EPS AND gs_TreadStUp=1 THEN

				PEN gs_DashLinePen
				SET LINE_TYPE dash_line

				LINE2 0,td+CutPostY,0,2/3*td
				LINE2 0,2/3*td,2/3*td,0
				LINE2 2/3*td,0,FlightWidth-2/3*td,0
				LINE2 FlightWidth-2/3*td,0,FlightWidth,2/3*td
				LINE2 FlightWidth,2/3*td,FlightWidth,td+CutPostY

			ENDIF
		ENDIF
	ENDIF


	IF np_m = POSTPOS_LEFT or np_m = POSTPOS_RIGHT THEN

	IF np_m = POSTPOS_RIGHT THEN
	mul2 -1,1
	ADD2 -FlightWidth,0
	ENDIF

		IF iBottomStepArrangement = BSTEPARRANGE_DSTEP THEN

				PEN gs_cont_pen
				SET LINE_TYPE solid_line

				if bCarriageLineExist then
					POLY2_b 9, 1+2+64, gs_fill_pen, gs_back_pen,
						FlightWidth,-ns,1,
						FlightWidth,td-ns,gs_2DTread,
						0,td-ns,1,
						0,td-CutPostY,1,
						-CutPostX,td-CutPostY,1,
						-CutPostX,td+ns,1,
						-CutPostX,td/2,901,
						-CutPostX,180,4001,
						FlightWidth,-ns,-1
				ELSE
					POLY2_b 8, 1+2+64, gs_fill_pen, gs_back_pen,
						0,-ns,1,
						FlightWidth,-ns,1,
						FlightWidth,td-ns,gs_2DTread,
						0,td-ns,1,
						0,td+ns,1,
						0,td/2,901,
						0,180,4001,
						0,-ns,-1
				ENDIF

			IF ns>0 and chStoryDist > -EPS OR ns>0 and chStoryDist > EPS AND gs_TreadStUp=1 THEN


				PEN gs_DashLinePen
				SET LINE_TYPE dash_line

				if bCarriageLineExist then
					LINE2 -nps,0,FlightWidth,0
					ARC2 -nps,td/2,td/2,90,270
				else
					LINE2 0,0,FlightWidth,0
					ARC2 0,td/2,td/2,90,270
				endif

			ENDIF

		ENDIF

		IF iBottomStepArrangement = BSTEPARRANGE_BULLNOSE THEN

				PEN gs_cont_pen
				SET LINE_TYPE solid_line

				POLY2_b 8, 1+2+64, gs_fill_pen, gs_back_pen,
					0, td-ns,1,
					0, td-CutPostY,1,
					-ns, td-CutPostY,1,
					td-CutPostY, td-CutPostY,901,
					0, 90,4001,
					FlightWidth,-ns,1,
					FlightWidth,td-ns,gs_2DTread,
					0,td-ns,-1

			IF ns>0 and chStoryDist > -EPS OR ns>0 and chStoryDist > EPS AND gs_TreadStUp=1 THEN

				PEN gs_DashLinePen
				SET LINE_TYPE dash_line

				LINE2 td-CutPostY,0,FlightWidth,0
				ARC2 td-CutPostY,td-CutPostY,td-CutPostY,180,270
			ENDIF
		ENDIF

		IF iBottomStepArrangement = BSTEPARRANGE_SPLAYED THEN

				PEN gs_cont_pen
				SET LINE_TYPE solid_line

				POLY2_b 8, 1+2+64, gs_fill_pen, gs_back_pen,
					0,td-ns,1,
					0,td-CutPostY,1,
					-ns,td-CutPostY,1,
					-ns,2/3*td-ns*tan(22.5),1,
					2/3*td-ns*tan(22.5),-ns,1,
					FlightWidth,-ns,1,
					FlightWidth,td-ns,gs_2DTread,
					0,td-ns,-1

				IF ns>0 and chStoryDist > -EPS OR ns>0 and chStoryDist > EPS AND gs_TreadStUp=1 THEN


					PEN gs_DashLinePen
					SET LINE_TYPE dash_line

					LINE2 0,td+CutPostY,0,2/3*td
					LINE2 0,2/3*td,2/3*td,0
					LINE2 2/3*td,0,FlightWidth,0

				ENDIF
			ENDIF

	IF np_m = POSTPOS_RIGHT THEN DEL 2
	ENDIF

ENDIF
ENDIF
DEL 1


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!! *** STRING *** !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

if bCarriageLineExist then
	IF iFlightSectionType = FLIGHTSECTION_WITHOUT_SOFFIT or iFlightSectionType = FLIGHTSECTION_WITH_SOFFIT THEN
	Add2 st,0
		!!! String Overhang on Lower Side
		LowerEndX1=(th+pdvert)/TAN(ang)
		LowerEndHgtX=LowerEndHgt/TAN(ang)

		!!! Start Point of String on Lower Side

		IF np_m = POSTPOS_NONE THEN
				IF iLowerJunctionType = LOWERJUNCTION_STRAIGHT_END THEN
					StringStartPointL=0
					StringStartPointR=0
				ELSE
					StringStartPointL=-LowerEndX1+LowerEndHgtX
					StringStartPointR=-LowerEndX1+LowerEndHgtX
				ENDIF
		ENDIF

		IF np_m = POSTPOS_RIGHT THEN
				IF iBottomStepArrangement <> BSTEPARRANGE_NORMAL THEN
					StringStartPointL=-LowerEndX1+LowerEndHgtX
					StringStartPointR=td+nps/2
				ELSE
					StringStartPointL=-LowerEndX1+LowerEndHgtX
					StringStartPointR=nps
				ENDIF
		ENDIF

		IF np_m = POSTPOS_LEFT THEN
				IF iBottomStepArrangement <> BSTEPARRANGE_NORMAL THEN
					StringStartPointR=-LowerEndX1+LowerEndHgtX
					StringStartPointL=td+nps/2
				ELSE
					StringStartPointR=-LowerEndX1+LowerEndHgtX
					StringStartPointL=nps
				ENDIF
		ENDIF

		IF np_m = POSTPOS_BOTH THEN
				IF iBottomStepArrangement <> BSTEPARRANGE_NORMAL THEN
					StringStartPointR=td+nps/2
					StringStartPointL=td+nps/2
				ELSE
					StringStartPointR=nps
					StringStartPointL=nps
				ENDIF
		ENDIF

		!!! temp_parameters at Break Line
		String_distBreakline=(2*td*(st))/(FlightWidth)

		IF breakline_style_m = BREAKLINE_STRAIGHT THEN
			temp_brkLineY=brkLineY
			ELSE
			temp_brkLineY=brkLineY
		ENDIF

		!!!!!!!!!!!!!!!!!!!!!!! *** LEFT STRING *** !!!!!!!!!!!!!!!!!!!!!!!!!!!!!

				IF brk=0 THEN

						PEN carriagePen
						SET LINE_TYPE carriageLineType

						POLY2_b 5, 1+2+64, gs_fill_pen, gs_back_pen,
							0,StringStartPointL,1,
							-st,StringStartPointL,1,
							-st,(rnu-1)*td,1,
							0,(rnu-1)*td,1,
							0,StringStartPointL,-1

				ELSE

					IF gs_2DContourBelow=1 THEN

							PEN carriagePen
							SET LINE_TYPE carriageLineType

							POLY2_b 5, 1+2+64, gs_fill_pen, gs_back_pen,
								0,StringStartPointL,1,
								-st,StringStartPointL,1,
								-st,(NumStline-1)*td-ns-String_distBreakline,1,
								0,(NumStline-1)*td-ns,1,
								0,StringStartPointL,-1
					ENDIF

					IF gs_2DContourAbove=1 THEN	!!IF No Contour above Break Line

							PEN carriagePen
							FILL temp_FillTypeAbove
							SET LINE_TYPE temp_line

							POLY2_b 5, 1+FullFill, gs_fill_pen, temp_BackPen,
								-st,(rnu-1)*td,1,
								-st,(NumStline-1)*td-ns-String_distBreakline+temp_brkLineY,1,
								0,(NumStline-1)*td-ns+temp_brkLineY,1,
								0,(rnu-1)*td,1,
								-st,(rnu-1)*td,-1

					ENDIF

				ENDIF

		!!!!!!!!!!!!!!!!!!!!!!! *** RIGHT STRING *** !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
			ADD2 FlightWidth+st,0
				IF brk=0 THEN

						PEN carriagePen
						SET LINE_TYPE carriageLineType

						POLY2_b 5, 1+2+64, gs_fill_pen, gs_back_pen,
							0,StringStartPointR,1,
							-st,StringStartPointR,1,
							-st,(rnu-1)*td,1,
							0,(rnu-1)*td,1,
							0,StringStartPointR,-1

				ELSE

					IF gs_2DContourBelow=1 THEN

							PEN carriagePen
							SET LINE_TYPE carriageLineType

							POLY2_b 5, 1+2+64, gs_fill_pen, gs_back_pen,
								0,StringStartPointR,1,
								-st,StringStartPointR,1,
								-st,(NumStline+1)*td-ns,1,
								0,(NumStline+1)*td-ns+String_distBreakline,1,
								0,StringStartPointR,-1
					ENDIF


					IF gs_2DContourAbove=1 THEN	!!IF No Contour above Break Line

							PEN carriagePen
							FILL temp_FillTypeAbove
							SET LINE_TYPE temp_line

							POLY2_b 5, 1+FullFill, gs_fill_pen, temp_BackPen,
								-st,(rnu-1)*td,1,
								-st,(NumStline+1)*td-ns+temp_brkLineY,1,
								0,(NumStline+1)*td-ns+String_distBreakline+temp_brkLineY,1,
								0,(rnu-1)*td,1,
								-st,(rnu-1)*td,-1
					ENDIF

				ENDIF
			DEL 1
		DEL 1
	ENDIF
ENDIF


! ==============================================================================
! WALKING LINE / ARROWHEAD / START END SYMBOL
! ==============================================================================

IF walkl THEN
	add2 tempStringWidth, 0
	DRAWINDEX 40

		!!! Arrow Size !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

		ArrowDist=gs_ArrowHalfWidth

		!!! ********** Arrowhead Contour Conditions
		IF arrow_style_m = ARROW_STYLE_1 OR arrow_style_m = ARROW_STYLE_2 OR arrow_style_m = ARROW_STYLE_3 THEN
			temp_ArrowMask=0
		else
			temp_ArrowMask=1
		endif

		!!! ********** Arrowhead Contour Points Conditions
		IF arrow_style_m = ARROW_STYLE_1 OR arrow_style_m = ARROW_STYLE_4 OR arrow_style_m = ARROW_STYLE_7 THEN
			temp_1XContour=0
			temp_2XContour=FlightWidth
			temp_1YContourTop=(rnu-2)*td-ns
			temp_2YContourTop=(rnu-2)*td-ns
			temp_1YContourBreak=(NumStline-1)*td-ns
			temp_2YContourBreak=(NumStline-1)*td-ns
		endif

		IF arrow_style_m = ARROW_STYLE_2 OR arrow_style_m = ARROW_STYLE_5 OR arrow_style_m = ARROW_STYLE_8 THEN
			temp_1XContour=FlightWidth/4
			temp_2XContour=FlightWidth*3/4
			temp_1YContourTop=(rnu-2)*td-ns
			temp_2YContourTop=(rnu-2)*td-ns
			temp_1YContourBreak=(NumStline-1)*td-ns
			temp_2YContourBreak=(NumStline-1)*td-ns
		endif

		IF arrow_style_m = ARROW_STYLE_3 OR arrow_style_m = ARROW_STYLE_6 OR arrow_style_m = ARROW_STYLE_9 THEN
			temp_1XContour=FlightWidth/2-ArrowDist
			temp_2XContour=FlightWidth/2+ArrowDist
			temp_1YContourTop=(rnu-1)*td-gs_ArrowHeight
			temp_2YContourTop=(rnu-1)*td-gs_ArrowHeight
			temp_1YContourBreak=(NumStline)*td-ns-gs_ArrowHeight
			temp_2YContourBreak=(NumStline)*td-ns-gs_ArrowHeight
		endif

		!!! ********** Arrowhead Fill Contour Points Conditions
		IF arrow_style_m = ARROW_STYLE_4 OR arrow_style_m = ARROW_STYLE_5 OR arrow_style_m = ARROW_STYLE_6 THEN
			temp_1XFill=temp_1XContour
		endif

		IF arrow_style_m = ARROW_STYLE_7 OR arrow_style_m = ARROW_STYLE_8 OR arrow_style_m = ARROW_STYLE_9 THEN
			temp_1XFill=FlightWidth/2
		endif

		! Walking Line Length Conditions
		temp_wLineLength = 0
		temp_wLineLengthAbove = 0
		IF arrow_style_m = ARROW_STYLE_4 OR arrow_style_m = ARROW_STYLE_5 THEN temp_wLineLength = td+ns
		IF arrow_style_m = ARROW_STYLE_4 OR arrow_style_m = ARROW_STYLE_5 THEN temp_wLineLengthAbove = td+ns
		IF arrow_style_m = ARROW_STYLE_6 THEN temp_wLineLength = gs_ArrowHeight
		IF arrow_style_m = ARROW_STYLE_6 THEN temp_wLineLengthAbove = gs_ArrowHeight


		PEN gs_wLinePen
		Fill gs_ArrowFill

		IF brk THEN
			! ---------------------------------------------------------------------------
			! with Break Line
			! ---------------------------------------------------------------------------

			IF gs_2DContourBelow THEN

				! Geometry of ArrowHead Contour at Break Line
				SET LINE_TYPE gs_wLineType1
				POLY2_b 4, 1, gs_ArrowFillPen, gs_fill_pen,
					temp_1XContour,temp_1YContourBreak, temp_ArrowMask,
					temp_2XContour,temp_2YContourBreak, 1,
					FlightWidth/2,(NumStline)*td-ns, 1,
					temp_1XContour,temp_1YContourBreak, -1

				IF gs_ArrowFillPen<>0 THEN
					IF arrow_style_m <> ARROW_STYLE_1 AND arrow_style_m <> ARROW_STYLE_2 AND arrow_style_m <> ARROW_STYLE_3 THEN
						! Geometry of ArrowHead Fill
						POLY2_b 4, 2, gs_ArrowFillPen, gs_fill_pen,
							temp_1XFill,temp_1YContourBreak, temp_ArrowMask,
							temp_2XContour,temp_2YContourBreak, 1,
							FlightWidth/2,(NumStline)*td-ns, 1,
							temp_1XFill,temp_1YContourBreak, -1
					ENDIF
				ENDIF

			ENDIF

			IF gs_2DContourAbove THEN		! IF No Contour above Break Line
				SET LINE_TYPE gs_wLineTypeAbove
				! Geometry of ArrowHead Contour
				POLY2_b 4, 1, gs_ArrowFillPen, gs_fill_pen,
					temp_1XContour,temp_1YContourTop, temp_ArrowMask,
					temp_2XContour,temp_2YContourTop, 1,
					FlightWidth/2,(rnu-1)*td, 1,
					temp_1XContour,temp_1YContourTop, -1


				IF gs_ArrowFillPenAbove<>0 THEN
					IF arrow_style_m <> ARROW_STYLE_1 AND arrow_style_m <> ARROW_STYLE_2 AND arrow_style_m <> ARROW_STYLE_3 THEN
						! Geometry of ArrowHead Fill
						POLY2_b 4, 2, gs_ArrowFillPenAbove, gs_fill_pen,
							temp_1XFill,temp_1YContourTop, temp_ArrowMask,
							temp_2XContour,temp_2YContourTop, 1,
							FlightWidth/2,(rnu-1)*td, 1,
							temp_1XFill,temp_1YContourTop, -1
					ENDIF
				ENDIF
			ENDIF

			! Walkin Line Length under Break Line
			IF gs_2DContourBelow=1 THEN
				SET LINE_TYPE gs_wLineType1
				line2 FlightWidth/2,-ns, FlightWidth/2, (NumStline)*td-ns-temp_wLineLength
			ENDIF

			! Walkin Line Length above Break Line

			IF gs_2DContourAbove=1 THEN		! IF No Contour above Break Line
				SET LINE_TYPE gs_wLineTypeAbove
				IF breakline_style_m = BREAKLINE_STRAIGHT THEN
					line2 FlightWidth/2,(NumStline)*td-ns+brkLineY, FlightWidth/2, (rnu-1)*td-temp_wLineLengthAbove
				ELSE
					line2 FlightWidth/2,(NumStline)*td-ns+brkLineY-(td-ZigZag1Y), FlightWidth/2, (rnu-1)*td-temp_wLineLengthAbove
				ENDIF
			ENDIF

		ELSE
			! ---------------------------------------------------------------------------
			! NO BREAK LINE
			! ---------------------------------------------------------------------------

			SET LINE_TYPE temp_wLineType

			! Walking Line Length
			line2 FlightWidth/2,-ns, FlightWidth/2, (rnu-1)*td-temp_wLineLength


			! Geometry of ArrowHead Contour
			POLY2_b 4, 1, gs_ArrowFillPen, gs_fill_pen,
				temp_1XContour,temp_1YContourTop, temp_ArrowMask,
				temp_2XContour,temp_2YContourTop, 1,
				FlightWidth/2,(rnu-1)*td, 1,
				temp_1XContour,temp_1YContourTop, -1

			IF gs_ArrowFillPen<>0 THEN
				IF arrow_style_m <> ARROW_STYLE_1 AND arrow_style_m <> ARROW_STYLE_2 AND arrow_style_m <> ARROW_STYLE_3 THEN
					! Geometry of ArrowHead Fill
					POLY2_b 4, 2, gs_ArrowFillPen, gs_fill_pen,
						temp_1XFill,temp_1YContourTop, temp_ArrowMask,
						temp_2XContour,temp_2YContourTop, 1,
						FlightWidth/2,(rnu-1)*td, 1,
						temp_1XFill,temp_1YContourTop, -1
				ENDIF
			ENDIF

		ENDIF


				!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
				!!! ********** Start End Symbol ********** !!!
				!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

				DRAWINDEX 45
				IF brk THEN
				SET LINE_TYPE gs_wLineType1
				ELSE
				SET LINE_TYPE temp_wLineType
				ENDIF

				Fill gs_StartEndFill

					IF gs_StartEndFillPen<>0 THEN temp_FillStatus=2
					IF gs_StartEndFillPen=0 THEN temp_FillStatus=0

					IF gs_2DContourBelow=1 THEN

						IF gs_StartEndStyle_m = STARTSYMB_STYLE1 THEN

							POLY2_B 2, 1+temp_FillStatus, gs_StartEndFillPen, gs_fill_pen,
							FlightWidth/2,-ns,901,
							gs_CircleRadius,360,4001

						ENDIF


						IF gs_StartEndStyle_m = STARTSYMB_STYLE2 THEN

							FOR kk=1 TO 2
								POLY2_B 6, 1+temp_FillStatus, gs_StartEndFillPen, gs_fill_pen,
									FlightWidth/2,-ns,1,
									FlightWidth/2+gs_CircleRadius,-ns,1,
									FlightWidth/2,-ns,901,
									0,90,4001,
									FlightWidth/2,-ns+gs_CircleRadius,0,
									FlightWidth/2,-ns,-1

								POLY2_B 6, 1, gs_StartEndFillPen, gs_fill_pen,
									FlightWidth/2,-ns,1,
									FlightWidth/2,-ns+gs_CircleRadius,1,
									FlightWidth/2,-ns,901,
									0,90,4001,
									FlightWidth/2-gs_CircleRadius,-ns,0,
									FlightWidth/2,-ns,-1
							ROT2 180
							ADD2 -FlightWidth,2*ns
							NEXT kk
							DEL 4

						ENDIF

						IF gs_StartEndStyle_m = STARTSYMB_STYLE3 THEN
							LINE2 FlightWidth/2+gs_StartWidth,-ns-gs_StartHeight,FlightWidth/2+gs_StartWidth,-ns+gs_StartHeight
							LINE2 FlightWidth/2-gs_StartWidth,-ns-gs_StartHeight,FlightWidth/2-gs_StartWidth,-ns+gs_StartHeight
						ENDIF


						!!! ********* Hotspots of StartEnd Symbol
						IF gs_StartEndStyle_m = STARTSYMB_STYLE1 OR gs_StartEndStyle_m = STARTSYMB_STYLE2 THEN

							StartSymbUNID=3000

							ADD2 FlightWidth/2,-ns
								FOR kk=1 to 4
									HOTSPOT2 0, 0, StartSymbUNID, gs_CircleRadius, 1+128		:StartSymbUNID=StartSymbUNID+1
									HOTSPOT2 -1, 0, StartSymbUNID, gs_CircleRadius, 3+128	:StartSymbUNID=StartSymbUNID+1
									HOTSPOT2 gs_CircleRadius, 0, StartSymbUNID, gs_CircleRadius,2	:StartSymbUNID=StartSymbUNID+1

									ROT2 90
								NEXT KK
								DEL 4
							DEL 1
						ENDIF

						IF gs_StartEndStyle_m = STARTSYMB_STYLE3 THEN

							StartSymbUNID=3100

							ADD2 FlightWidth/2,0
								FOR kk=1 to 2
									ADD2 0, -ns
										!!! Symbol Width/2
										HOTSPOT2 0, -gs_StartHeight, StartSymbUNID, gs_StartWidth, 1+128		:StartSymbUNID=StartSymbUNID+1
										HOTSPOT2 -1, -gs_StartHeight, StartSymbUNID, gs_StartWidth, 3	:StartSymbUNID=StartSymbUNID+1
										HOTSPOT2 gs_StartWidth, -gs_StartHeight, StartSymbUNID, gs_StartWidth,2	:StartSymbUNID=StartSymbUNID+1

										HOTSPOT2 0, gs_StartHeight, StartSymbUNID, gs_StartWidth, 1+128		:StartSymbUNID=StartSymbUNID+1
										HOTSPOT2 -1, gs_StartHeight, StartSymbUNID, gs_StartWidth, 3	:StartSymbUNID=StartSymbUNID+1
										HOTSPOT2 gs_StartWidth, gs_StartHeight, StartSymbUNID, gs_StartWidth,2	:StartSymbUNID=StartSymbUNID+1
									DEL 1

									ADD2 0, -ns
										!!! Symbol Height
										HOTSPOT2 gs_StartWidth, 0, StartSymbUNID, gs_StartHeight, 1+128		:StartSymbUNID=StartSymbUNID+1
										HOTSPOT2 gs_StartWidth, -1, StartSymbUNID, gs_StartHeight, 3	:StartSymbUNID=StartSymbUNID+1
										HOTSPOT2 gs_StartWidth, gs_StartHeight, StartSymbUNID, gs_StartHeight,2	:StartSymbUNID=StartSymbUNID+1

										HOTSPOT2 gs_StartWidth, 0, StartSymbUNID, gs_StartHeight, 1+128		:StartSymbUNID=StartSymbUNID+1
										HOTSPOT2 gs_StartWidth, 1, StartSymbUNID, gs_StartHeight, 3	:StartSymbUNID=StartSymbUNID+1
										HOTSPOT2 gs_StartWidth, -gs_StartHeight, StartSymbUNID, gs_StartHeight,2	:StartSymbUNID=StartSymbUNID+1
									DEL 1

								MUL2 -1,1
								NEXT kk
								DEL 2
							DEL 1
						ENDIF
					ENDIF

				DRAWINDEX 40
				Fill gs_ArrowFill



		!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		!!! ********** ARROWHEAD HOTSPOTS ********** !!!

		ArrowUNID=4000
		IF gs_2DContourBelow=1 THEN HOTSPOT2 FlightWidth/2,-ns,ArrowUNID: ArrowUNID=ArrowUNID+1

		IF brk=0 OR brk=1 AND gs_2DContourAbove=1 THEN

			ArrowUNID=4100
			HOTSPOT2 FlightWidth/2,td*(rnu-1),ArrowUNID: ArrowUNID=ArrowUNID+1

			!!! ********** Hotspot editing of Height and Width of Arrowhead
			IF arrow_style_m = ARROW_STYLE_3 OR arrow_style_m = ARROW_STYLE_6 OR arrow_style_m = ARROW_STYLE_9 THEN

				ArrowUNID=4200
				ADD2 FlightWidth/2+ArrowDist,(rnu-1)*td
				ROT2 180
					HOTSPOT2 0,0,	ArrowUNID, gs_ArrowHeight, 1+128 : ArrowUNID=ArrowUNID+1
					HOTSPOT2 0,gs_ArrowHeight, ArrowUNID, gs_ArrowHeight, 2 : ArrowUNID=ArrowUNID+1
					HOTSPOT2 0,-1,	ArrowUNID, gs_ArrowHeight, 3: ArrowUNID=ArrowUNID+1
				DEL 2

				ADD2 FlightWidth/2-ArrowDist,(rnu-1)*td
				ROT2 180
					HOTSPOT2 0,0,	ArrowUNID, gs_ArrowHeight, 1+128 : ArrowUNID=ArrowUNID+1
					HOTSPOT2 0,gs_ArrowHeight, ArrowUNID, gs_ArrowHeight, 2 : ArrowUNID=ArrowUNID+1
					HOTSPOT2 0,-1,	ArrowUNID, gs_ArrowHeight, 3: ArrowUNID=ArrowUNID+1
				DEL 2

				ADD2 FlightWidth/2,(rnu-1)*td-gs_ArrowHeight
					HOTSPOT2 0,0,	ArrowUNID, gs_ArrowHalfWidth, 1+128 : ArrowUNID=ArrowUNID+1
					HOTSPOT2 gs_ArrowHalfWidth,0, ArrowUNID, gs_ArrowHalfWidth, 2 : ArrowUNID=ArrowUNID+1
					HOTSPOT2 -1,0,	ArrowUNID, gs_ArrowHalfWidth, 3: ArrowUNID=ArrowUNID+1
				DEL 1

				ADD2 FlightWidth/2,(rnu-1)*td-gs_ArrowHeight
					HOTSPOT2 0,0,	ArrowUNID, gs_ArrowHalfWidth, 1+128 : ArrowUNID=ArrowUNID+1
					HOTSPOT2 -gs_ArrowHalfWidth,0, ArrowUNID, gs_ArrowHalfWidth, 2 : ArrowUNID=ArrowUNID+1
					HOTSPOT2 01,0,	ArrowUNID, gs_ArrowHalfWidth, 3: ArrowUNID=ArrowUNID+1
				DEL 1
			ENDIF
		ENDIF


		IF brk=1 AND gs_2DContourBelow=1 THEN

			ArrowUNID=4300
			HOTSPOT2 FlightWidth/2, (NumStline)*td-ns,ArrowUNID: ArrowUNID=ArrowUNID+1

			!!! ********** Hotspot editing of Height and Width of Arrowhead
			IF arrow_style_m = ARROW_STYLE_3 OR arrow_style_m = ARROW_STYLE_6 OR arrow_style_m = ARROW_STYLE_9 THEN

				ArrowUNID=4400
				ADD2 FlightWidth/2+ArrowDist,(NumStline)*td-ns
				ROT2 180
					HOTSPOT2 0,0,	ArrowUNID, gs_ArrowHeight, 1+128 : ArrowUNID=ArrowUNID+1
					HOTSPOT2 0,gs_ArrowHeight, ArrowUNID, gs_ArrowHeight, 2 : ArrowUNID=ArrowUNID+1
					HOTSPOT2 0,-1,	ArrowUNID, gs_ArrowHeight, 3: ArrowUNID=ArrowUNID+1
				DEL 2

				ADD2 FlightWidth/2-ArrowDist,(NumStline)*td-ns
				ROT2 180
					HOTSPOT2 0,0,	ArrowUNID, gs_ArrowHeight, 1+128 : ArrowUNID=ArrowUNID+1
					HOTSPOT2 0,gs_ArrowHeight, ArrowUNID, gs_ArrowHeight, 2 : ArrowUNID=ArrowUNID+1
					HOTSPOT2 0,-1,	ArrowUNID, gs_ArrowHeight, 3: ArrowUNID=ArrowUNID+1
				DEL 2

				ADD2 FlightWidth/2,(NumStline)*td-ns-gs_ArrowHeight
					HOTSPOT2 0,0,	ArrowUNID, gs_ArrowHalfWidth, 1+128 : ArrowUNID=ArrowUNID+1
					HOTSPOT2 gs_ArrowHalfWidth,0, ArrowUNID, gs_ArrowHalfWidth, 2 : ArrowUNID=ArrowUNID+1
					HOTSPOT2 -1,0,	ArrowUNID, gs_ArrowHalfWidth, 3: ArrowUNID=ArrowUNID+1
				DEL 1

				ADD2 FlightWidth/2,(NumStline)*td-ns-gs_ArrowHeight
					HOTSPOT2 0,0,	ArrowUNID, gs_ArrowHalfWidth, 1+128 : ArrowUNID=ArrowUNID+1
					HOTSPOT2 -gs_ArrowHalfWidth,0, ArrowUNID, gs_ArrowHalfWidth, 2 : ArrowUNID=ArrowUNID+1
					HOTSPOT2 01,0,	ArrowUNID, gs_ArrowHalfWidth, 3: ArrowUNID=ArrowUNID+1
				DEL 1
			ENDIF
		ENDIF

	PEN gs_cont_pen
	FILL gs_fill_type
	DRAWINDEX 10
DEL 1
ENDIF



!===============================================================================
! --- Text / Up-Down Text / Numbering ---
!===============================================================================

! --- Oriented View ------------------------------ [

angleViewRot = 0
if bShowRiseAndRunText | walkingDirUPDN_m <> WALKDIRSTR_NONE | bShowNumbering then
	rrr = REQUEST ("View_Rotangle", "", angleViewRot)
endif
totalRotate = (SYMB_ROTANGLE + angleViewRot) MOD 360

! --- Oriented View ------------------------------ ]

! --- Define Font Style --------------------------------------------------------

define style "UPDN" fontType, UPDNfontsize, 5, 0		  	!!- UP/DN

define style "stepnum" fontType, gs_NumTextSize, 1, 0		!! - Numbering

! --- Rise and Run Text -------------------------------------------------------
DRAWINDEX 50

if bShowRiseAndRunText then
	call "Stair_RiseRun_Text" PARAMETERS ALL	totalRotate				= totalRotate,
												iRotateType 			= 1,
												iRiseRunTextPosition	= 1,
												flightWidth				= flw,
												nRisers					= rnu,
												treadHeight				= th,
												treadDepth				= td,
												RiseRunUNID				= 5000
endif

! --- Up and Down Text -------------------------------------------------------
iReadable = 0
if walkingDirUPDN_m <> WALKDIRSTR_NONE and walkl then
	set STYLE "UPDN"
	pen UPDNfontpen

	nTransUPDN = 0
	nTransHotspot = 0
	add2 flw/2+DirUPDN_X,DirUPDN_Y
	nTransUPDN = nTransUPDN + 1
	! Text Rotation - Readable / Parallel with Walking Line / Align with Symbol
	! ----------------------------------------------------------------------
	if typeTextRotation_UpDn_m = 2 then									! Readable
		if (totalRotate > (gs_readable_angle + eps) & totalRotate < (gs_readable_angle + 180 + eps)) then
			rot2 180
			nTransUPDN = nTransUPDN + 1
		endif
	else
		if typeTextRotation_UpDn_m = 1 then								! Parallel with Walking Line
			if not(SYMB_MIRRORED) then
				iReadable = (totalRotate > (gs_readable_angle - 90 + eps) & totalRotate < (gs_readable_angle + 180 - 90 + eps))- not(totalRotate > (gs_readable_angle - 90 + eps) & totalRotate < (gs_readable_angle + 180 - 90 + eps))
			else
				iReadable = (totalRotate < (gs_readable_angle - 90 + eps) | totalRotate > (gs_readable_angle + 180 - 90 + eps))- not(totalRotate < (gs_readable_angle - 90 + eps) | totalRotate > (gs_readable_angle + 180 - 90 + eps))
			endif
			rot2 -90 * iReadable
			nTransUPDN = nTransUPDN + 1
		endif
	endif
	! ----------------------------------------------------------------------
	rot2 AngUPDN
	nTransUPDN = nTransUPDN + 1

	text2 0,0, walkingDirUPDN
	del nTransUPDN

	width	= STW (walkingDirUPDN)/1000*GLOB_SCALE
	rb		= width/2


	UpDownUNID=6000
	hotspot2 flw/2,				DirUPDN_Y,	UpDownUNID, DirUPDN_X, 1+128	: UpDownUNID=UpDownUNID+1
	hotspot2 flw/2-1,			DirUPDN_Y,	UpDownUNID, DirUPDN_X, 3		: UpDownUNID=UpDownUNID+1
	hotspot2 flw/2+DirUPDN_X,	DirUPDN_Y,	UpDownUNID, DirUPDN_X, 2		: UpDownUNID=UpDownUNID+1

	hotspot2 flw/2+DirUPDN_X,	0,			UpDownUNID, DirUPDN_Y, 1+128	: UpDownUNID=UpDownUNID+1
	hotspot2 flw/2+DirUPDN_X,	-1,			UpDownUNID, DirUPDN_Y, 3		: UpDownUNID=UpDownUNID+1
	hotspot2 flw/2+DirUPDN_X,	DirUPDN_Y,	UpDownUNID, DirUPDN_Y, 2		: UpDownUNID=UpDownUNID+1

	ADD2 flw/2+DirUPDN_X,DirUPDN_Y
	nTransHotspot = nTransHotspot +1
	if typeTextRotation_UpDn_m = 1 then	! Parallel with Walking Line
		rot2 -90 * iReadable
		nTransHotspot = nTransHotspot +1
	endif
	hotspot2 0,					0,				UpDownUNID,	AngUPDN,6		: UpDownUNID=UpDownUNID+1
	hotspot2 rb,				0,				UpDownUNID,	AngUPDN,4+128	: UpDownUNID=UpDownUNID+1
	hotspot2 rb*cos(AngUPDN),	rb*sin(AngUPDN),UpDownUNID,	AngUPDN,5		: UpDownUNID=UpDownUNID+1
	del nTransHotspot
endif

! --- Numbering -------------------------------------------------------

if bShowNumbering & (gs_NumBelow | gs_NumAbove) then
	Add2 tempStringWidth, 0

	if gs_BreakHeight < ZZYZX then
		if DirNumText_x <= flw/2 then
			tempNumBelow = NumStline
			tempNumAbove = NumStline+1
		else
			tempNumBelow = NumStline+1
			tempNumAbove = NumStline+2
		endif
	else
		tempNumBelow = rnu
	endif

	if gs_NumBelow then
		if gs_NumAbove & gs_BreakHeight < ZZYZX then
			numBegin = 1
			numFinish = rnu
		else
			numBegin = 1
			numFinish = tempNumBelow
		endif
	else
		if gs_NumAbove & gs_BreakHeight < ZZYZX then
			numBegin = tempNumAbove
			numFinish = rnu
		endif
	endif

	set style "stepnum"
	pen gs_NumTextPen
	rrrr = REQUEST ("Height_of_style", "stepnum", strHeight)
	strHeight = strHeight / 1000 * GLOB_SCALE
	nTextPos = 0
	nTextTransformations = 0

	add2 DirNumText_X, -td/2 + DirNumText_Y
	nTextPos = nTextPos + 1
	if not(gs_NumBelow) & gs_NumAbove then
		add2 0, (numBegin-1) * td
		nTextPos = nTextPos + 1
	endif
	for iNumStep = numBegin to numFinish
		add2 0, td
		nTextPos = nTextPos + 1
		! Text Rotation - Readable / Align with Symbol
		! ----------------------------------------------------------------------
		if typeTextRotation_Num_m = 2 then								! Readable
			if (totalRotate > (gs_readable_angle + eps) & totalRotate < (gs_readable_angle + 180 + eps)) then
				rot2 180
				strWidth = STW(str("%.0", iNumStep + nStartNumbering - 1)) / 1000 * GLOB_SCALE
				add2 -strWidth, strHeight
				nTextTransformations = 2
			endif
		endif
		! ----------------------------------------------------------------------

		text2 0,0,iNumStep + nStartNumbering - 1
		if nTextTransformations > 0 then del nTextTransformations
	next iNumStep
	del nTextPos

	if gs_NumBelow then
		NumUNID=7000
		HOTSPOT2 0,				DirNumText_Y, NumUNID, DirNumText_X, 1+128	:NumUNID=NumUNID+1
		HOTSPOT2 -1,			DirNumText_Y, NumUNID, DirNumText_X, 3		:NumUNID=NumUNID+1
		HOTSPOT2 DirNumText_X,	DirNumText_Y, NumUNID, DirNumText_X, 2		:NumUNID=NumUNID+1

		HOTSPOT2 DirNumText_X,	0,				NumUNID, DirNumText_Y, 1+128:NumUNID=NumUNID+1
		HOTSPOT2 DirNumText_X,	-1,				NumUNID, DirNumText_Y, 3	:NumUNID=NumUNID+1
		HOTSPOT2 DirNumText_X,	DirNumText_Y,	NumUNID, DirNumText_Y, 2	:NumUNID=NumUNID+1
	endif
	if gs_NumAbove then
		NumUNID=7100
		HOTSPOT2 0,				DirNumText_Y+(rnu)*td, NumUNID, DirNumText_X, 1+128		:NumUNID=NumUNID+1
		HOTSPOT2 -1,			DirNumText_Y+(rnu)*td, NumUNID, DirNumText_X, 3	:NumUNID=NumUNID+1
		HOTSPOT2 DirNumText_X,	DirNumText_Y+(rnu)*td, NumUNID, DirNumText_X,2	:NumUNID=NumUNID+1

		HOTSPOT2 DirNumText_X,	0+(rnu)*td,				NumUNID, DirNumText_Y, 1+128		:NumUNID=NumUNID+1
		HOTSPOT2 DirNumText_X,	-1+(rnu)*td,			NumUNID, DirNumText_Y, 3	:NumUNID=NumUNID+1
		HOTSPOT2 DirNumText_X,	DirNumText_Y+(rnu)*td,	NumUNID, DirNumText_Y,2	:NumUNID=NumUNID+1
	endif

	del 1
endif
DRAWINDEX 10

!===============================================================================
! --- Railings ---
!===============================================================================

_bShowRailIn2D = 1
if _bShowRailIn2D then
	angle_breakline=ATN(2*td/FlightWidth)

	bShowRailPart1	= 0
	bShowRailPart2	= 0
	breakLineW		= brkLineY
	breakLineDist	= 0

	drawindex 30
	fill gs_fill_type

	! --- Left Rail ----------------------------------------------------------------
	if rail_m = 3 | rail_m = 1 then		! Left, Both
		if bSameRails then
			leftRailType_m = rightRailType_m
		endif

		IF np_m = POSTPOS_LEFT or np_m = POSTPOS_BOTH THEN
			OverhangLBottom=0
			temp_npsLX=nps
			temp_npsLY=nps*tan(ang)

			IF ptl_m = POST_RECTANGULAR THEN
				temp_LengL2=bComplexRailLeft*pwl/2
				CutRailBottomL=pwl/2*tan(ang)
				temp_hrol=pwl/2		!! No Handrail Overhang if Newel Post=1
			ELSE
				temp_LengL2=bComplexRailLeft*pdl/2
				CutRailBottomL=pdl/2*tan(ang)
				temp_hrol=pdl/2		!! No Handrail Overhang if Newel Post=1
			ENDIF

			IF iBottomStepArrangement <> BSTEPARRANGE_NORMAL THEN
				temp_rnuL=rnu-3
				temp_btaLx=td-nps/2
				temp_btaLY=(td-nps/2)*tan(ang)
				temp_LengL1=nps/2
			ELSE
				temp_rnuL=rnu-2
				temp_btaLx=0
				temp_btaLY=0
				temp_LengL1=0
			ENDIF
		ELSE
			temp_npsLX=0
			temp_npsLY=0
			temp_rnuL=rnu-2
			temp_btaLx=0
			temp_btaLY=0
			temp_LengL1=0
		ENDIF

		!!! Railing Length in Vertical Orientation Method
		LRailLength=td*(temp_rnuL)+OverhangLBottom+OverhangLTop-temp_npsLX+temp_LengL1-temp_LengL2

		!!! Railing Length in Perpendicular Orientation Method
		atfogL=sqr((temp_rnuL)*(temp_rnuL)*(td*td+th*th))+(OverhangLBottom+OverhangLTop)/cos(ang)

		add2 0,-OverhangLBottom+temp_npsLX+temp_btaLX+temp_LengL2
		ADD2 st/2-roffl, 0
		ROT2 90

		if bCarriageLineExist then
			brLineDist	= (NumStline-1)*td-ns -(temp_npsLX+temp_btaLX-OverhangLBottom) - (roffl + st / 2 - handRailWidthL / 2) * TAN(angle_breakline)
		else
			brLineDist	= (NumStline-1)*td-ns -(temp_npsLX+temp_btaLX-OverhangLBottom) - (roffl - st / 2 - handRailWidthL / 2) * TAN(angle_breakline)
		endif

		PEN railPen
		SET LINE_TYPE railLineType

		if brk then
			if bShowRailOnFloorPlan then
				IF gs_2DContourBelow=1 THEN
					if bSymbolic2D then
						bShowRailOn1stRun		= 1
						bBreakRailLine			= 1
						brLineAngle				= angle_breakline
						bShowRailPart1			= gs_2DContourBelow
						breakLineDist			= brLineDist
						breakLineW				= brkLineY
						bRailAboveBreakLine		= 0
						gosub "left rail"
					else
						POLY2_b 5, 1+2+64, gs_fill_pen, gs_back_pen,
							-temp_hrol * bComplexRailLeft, handRailWidthL / 2, 1,
							-temp_hrol * bComplexRailLeft, -handRailWidthL / 2, 1,
							brLineDist - temp_hrol * bComplexRailLeft, -handRailWidthL / 2, 1,
							brLineDist - temp_hrol * bComplexRailLeft - handRailWidthL * TAN(angle_breakline), handRailWidthL / 2, 1,
							-temp_hrol * bComplexRailLeft, handRailWidthL / 2, -1
					ENDIF
				endif

				IF gs_2DContourAbove=1 and bShowRailAboveBreakLine THEN	!!IF No Contour above Break Line
					if bSymbolic2D then
						bShowRailOn1stRun		= 1
						bBreakRailLine			= 1
						brLineAngle				= angle_breakline
						bShowRailPart2			= gs_2DContourAbove
						breakLineDist			= brLineDist
						breakLineW				= brkLineY
						bRailAboveBreakLine		= 1
						gosub "left rail"
					else
						FILL temp_FillTypeAbove
						SET LINE_TYPE temp_line

						POLY2_b 5, 1+2+64, gs_fill_pen, temp_BackPen,
							brLineDist - temp_hrol * bComplexRailLeft - handRailWidthL * TAN(angle_breakline) + brkLineY, handRailWidthL / 2, 1,
							brLineDist - temp_hrol * bComplexRailLeft + brkLineY, -handRailWidthL / 2, 1,
							LRailLength + hrol * bComplexRailLeft, -handRailWidthL / 2, 1,
							LRailLength + hrol * bComplexRailLeft, handRailWidthL / 2, 1,
							brLineDist - temp_hrol * bComplexRailLeft - handRailWidthL * TAN(angle_breakline) + brkLineY, handRailWidthL / 2, 1
					ENDIF
				endif
			endif

			IF bShowRailAxis THEN
				line_type railAxisLineType
				pen gs_RailAxisPen
				IF gs_2DContourBelow=1 THEN LINE2 -temp_hrol * bComplexRailLeft, 0, brLineDist - temp_hrol * bComplexRailLeft - handRailWidthL / 2 * TAN(angle_breakline), 0
				IF gs_2DContourAbove=1 THEN	LINE2 brLineDist - temp_hrol * bComplexRailLeft - handRailWidthL / 2 * TAN(angle_breakline) + brkLineY, 0, LRailLength + hrol * bComplexRailLeft, 0
			ENDIF
		else
			if bShowRailOnFloorPlan then
				if bSymbolic2D then
					bShowRailOn1stRun		= 1
					bBreakRailLine			= 0
					bRailAboveBreakLine		= 0
					gosub "left rail"
				else
					poly2_b 5, 1+2+64, gs_fill_pen, gs_back_pen,
						-temp_hrol * bComplexRailLeftLeft, handRailWidthL / 2, 1,
						-temp_hrol * bComplexRailLeft, -handRailWidthL / 2, 1,
						LRailLength + hrol * bComplexRailLeft, -handRailWidthL / 2, 1,
						LRailLength + hrol * bComplexRailLeft, handRailWidthL / 2, 1,
						-temp_hrol * bComplexRailLeft, handRailWidthL / 2, -1
				endif
			endif

			if bShowRailAxis then
				line_type railAxisLineType
				pen gs_RailAxisPen
				line2 -temp_hrol * bComplexRailLeft, 0, LRailLength + hrol * bComplexRailLeft, 0
			endif
		endif

		del 3
	endif

	! --- Right Rail ---------------------------------------------------------------
	pen gs_cont_pen
	if rail_m = 2 | rail_m = 1 then		! Right, Both
		IF np_m = POSTPOS_RIGHT or np_m = POSTPOS_BOTH THEN
			OverhangRBottom=0
			temp_npsRX=nps
			temp_npsRY=nps*tan(ang)
			temp_hror=hror	!! Handrail Overhang if Newel Post=0

			IF ptr_m = POST_RECTANGULAR THEN
				temp_LengR2=bComplexRailRight*pwr/2
				CutRailBottomR=pwr/2*tan(ang)
				temp_hror=pwr/2		!! No Handrail Overhang if Newel Post=1
				ELSE
				temp_LengR2=bComplexRailRight*pdr/2
				CutRailBottomR=pdr/2*tan(ang)
				temp_hror=pdr/2		!! No Handrail Overhang if Newel Post=1
			ENDIF

			IF iBottomStepArrangement <> BSTEPARRANGE_NORMAL THEN
				temp_rnuR=rnu-3
				temp_btaRx=td-nps/2
				temp_btaRY=(td-nps/2)*tan(ang)
				temp_LengR1=nps/2
			ELSE
				temp_rnuR=rnu-2
				temp_btaRx=0
				temp_btaRY=0
				temp_LengR1=0
			ENDIF
		ELSE
			temp_npsRX=0
			temp_npsRY=0
			temp_rnuR=rnu-2
			temp_btaRx=0
			temp_btaRY=0
			temp_LengR1=0
			temp_LengR2=0
			temp_hror=hror	!! Handrail Overhang if Newel Post=0
		ENDIF

		!!! Railing Length in Vertical Orientation Method
		RRailLength=td*(temp_rnuR)+OverhangRBottom+OverhangRTop-temp_npsRX+temp_LengR1-temp_LengR2

		!!! Railing Length in Perpendicular Orientation Method
		atfogR=sqr((temp_rnuR)*(temp_rnuR)*(td*td+th*th))+(OverhangRBottom+OverhangRTop)/cos(ang)

		add2 0,-OverhangRBottom+temp_npsRX+temp_btaRX+temp_LengR2
		ADD2 flw-st/2+roffr, 0
		ROT2 90

		if bCarriageLineExist then
			brLineDist	= (NumStline+1)*td-ns -(temp_npsRX+temp_btaRX-OverhangRBottom) + (roffr + st / 2 + handRailWidthR / 2) * TAN(angle_breakline)
		else
			brLineDist	= (NumStline+1)*td-ns -(temp_npsRX+temp_btaRX-OverhangRBottom) + (roffr - st / 2 + handRailWidthR / 2) * TAN(angle_breakline)
		endif

		PEN railPen
		SET LINE_TYPE railLineType

		if brk then
			if bShowRailOnFloorPlan then
				IF gs_2DContourBelow=1 THEN
					if bSymbolic2D then
						bShowRailOn1stRun		= 1
						bBreakRailLine			= 1
						brLineAngle				= angle_breakline
						bShowRailPart1			= gs_2DContourBelow
						breakLineDist			= brLineDist
						breakLineW				= brkLineY
						bRailAboveBreakLine		= 0
						gosub "right rail"
					else
						POLY2_b 5, 1+2+64, gs_fill_pen, gs_back_pen,
							-temp_hror * bComplexRailRight, handRailWidthR / 2, 1,
							-temp_hror * bComplexRailRight, -handRailWidthR / 2, 1,
							brLineDist - temp_hror * bComplexRailRight, -handRailWidthR / 2, 1,
							brLineDist - temp_hror * bComplexRailRight - handRailWidthR * TAN(angle_breakline), handRailWidthR / 2, 1,
							-temp_hror * bComplexRailRight, handRailWidthR / 2, -1
					ENDIF
				endif

				IF gs_2DContourAbove=1 and bShowRailAboveBreakLine THEN	!!IF No Contour above Break Line
					if bSymbolic2D then
						bShowRailOn1stRun		= 1
						bBreakRailLine			= 1
						brLineAngle				= angle_breakline
						bShowRailPart2			= gs_2DContourAbove
						breakLineDist			= brLineDist
						breakLineW				= brkLineY
						bRailAboveBreakLine		= 1
						gosub "right rail"
					else
						FILL temp_FillTypeAbove
						SET LINE_TYPE temp_line

						POLY2_b 5, 1+2+64, gs_fill_pen, temp_BackPen,
							brLineDist - temp_hror * bComplexRailRight - handRailWidthR * TAN(angle_breakline) + brkLineY, handRailWidthR / 2, 1,
							brLineDist - temp_hror * bComplexRailRight + brkLineY, -handRailWidthR / 2, 1,
							RRailLength + hror * bComplexRailRight, -handRailWidthR / 2, 1,
							RRailLength + hror * bComplexRailRight, handRailWidthR / 2, 1,
							brLineDist - temp_hror * bComplexRailRight - handRailWidthR * TAN(angle_breakline) + brkLineY, handRailWidthR / 2, 1
					ENDIF
				endif
			endif

			IF bShowRailAxis THEN
				line_type railAxisLineType
				pen gs_RailAxisPen
				IF gs_2DContourBelow=1 THEN LINE2 -temp_hror * bComplexRailRight, 0, brLineDist - temp_hror * bComplexRailRight - handRailWidthR / 2 * TAN(angle_breakline), 0
				IF gs_2DContourAbove=1 THEN	LINE2 brLineDist - temp_hror * bComplexRailRight - handRailWidthR / 2 * TAN(angle_breakline) + brkLineY, 0, RRailLength + hror * bComplexRailRight, 0
			ENDIF
		else
			if bShowRailOnFloorPlan then
				if bSymbolic2D then
					bShowRailOn1stRun		= 1
					bBreakRailLine			= 0
					bRailAboveBreakLine		= 0
					gosub "right rail"
				else
					poly2_b 5, 1+2+64, gs_fill_pen, gs_back_pen,
						-temp_hror * bComplexRailRight, handRailWidthR / 2, 1,
						-temp_hror * bComplexRailRight, -handRailWidthR / 2, 1,
						RRailLength + hror * bComplexRailRight, -handRailWidthR / 2, 1,
						RRailLength + hror * bComplexRailRight, handRailWidthR / 2, 1,
						-temp_hror * bComplexRailRight, handRailWidthR / 2, -1
				endif
			endif

			if bShowRailAxis then
				line_type railAxisLineType
				pen gs_RailAxisPen
				line2 -temp_hror * bComplexRailRight, 0, RRailLength + hror * bComplexRailRight, 0
			endif
		endif

		del 3
	endif
endif

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!! *** HOTSPOT EDITING in 2D / RAILING AND FLIGHT *** !!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


!-- FLIGHT WIDTH ---------------------------------------------------

	FlightUNID=50
	HOTSPOT2 0,0,	FlightUNID, flw, 1+256 : FlightUNID=FlightUNID+1
	HOTSPOT2 flw,0, FlightUNID, flw, 2 : FlightUNID=FlightUNID+1
	HOTSPOT2 -1,0,	FlightUNID, flw, 3: FlightUNID=FlightUNID+1

	HOTSPOT2 0,(rnu-1)*td,	FlightUNID, flw, 1+256 : FlightUNID=FlightUNID+1
	HOTSPOT2 flw,(rnu-1)*td, FlightUNID, flw, 2 : FlightUNID=FlightUNID+1
	HOTSPOT2 -1,(rnu-1)*td,	FlightUNID, flw, 3 : FlightUNID=FlightUNID+1


!-- STRING WIDTH ---------------------------------------------------

	if bCarriageLineExist then
		IF gs_2DContourBelow=1 THEN

			FlightUNID=100

			HOTSPOT2 flw,	StringStartPointR,	FlightUNID, st, 1+128 : FlightUNID=FlightUNID+1
			HOTSPOT2 flw-st,StringStartPointR, FlightUNID, st, 2 : FlightUNID=FlightUNID+1
			HOTSPOT2 flw+1,	StringStartPointR,	FlightUNID, st, 3: FlightUNID=FlightUNID+1

			HOTSPOT2 0,		StringStartPointL,	FlightUNID, st, 1+128 : FlightUNID=FlightUNID+1
			HOTSPOT2 0+st,	StringStartPointL, FlightUNID, st, 2 : FlightUNID=FlightUNID+1
			HOTSPOT2 0-1,	StringStartPointL,	FlightUNID, st, 3: FlightUNID=FlightUNID+1
		ENDIF
		IF gs_2DContourAbove=1 THEN

			FlightUNID=150

			HOTSPOT2 flw,	(rnu-1)*td,	FlightUNID, st, 1+128 : FlightUNID=FlightUNID+1
			HOTSPOT2 flw-st,(rnu-1)*td, FlightUNID, st, 2 : FlightUNID=FlightUNID+1
			HOTSPOT2 flw+1,	(rnu-1)*td,	FlightUNID, st, 3: FlightUNID=FlightUNID+1

			HOTSPOT2 0,		(rnu-1)*td,	FlightUNID, st, 1+128 : FlightUNID=FlightUNID+1
			HOTSPOT2 0+st,	(rnu-1)*td, FlightUNID, st, 2 : FlightUNID=FlightUNID+1
			HOTSPOT2 0-1,	(rnu-1)*td,	FlightUNID, st, 3: FlightUNID=FlightUNID+1
		ENDIF
	ENDIF

!!! RAILING  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

if bShowRailOnFloorPlan then
	IF rail_m = RAILPOS_RIGHT or rail_m = RAILPOS_BOTH THEN

			IF gs_2DContourBelow=1 THEN

			RailUNID=1000

				!!! RAIL OFFSET
				HOTSPOT2 flw-st/2,			-OverhangRBottom+temp_npsRX+temp_btaRX+temp_LengR2-temp_hror * bComplexRailRight, RailUNID, roffr, 1+128 : RailUNID=RailUNID+1
				HOTSPOT2 flw-st/2+roffr,	-OverhangRBottom+temp_npsRX+temp_btaRX+temp_LengR2-temp_hror * bComplexRailRight, RailUNID, roffr, 2 : RailUNID=RailUNID+1
				HOTSPOT2 flw-st/2-1,		-OverhangRBottom+temp_npsRX+temp_btaRX+temp_LengR2-temp_hror * bComplexRailRight, RailUNID, roffr, 3 : RailUNID=RailUNID+1

				IF np_m = POSTPOS_NONE THEN
					!!! RAIL BOTTOM OVERHANG
					HOTSPOT2 flw-st/2+roffr,		0, RailUNID, OverhangRBottom, 1+128 : RailUNID=RailUNID+1
					HOTSPOT2 flw-st/2+roffr,		0+1, RailUNID, OverhangRBottom, 3 : RailUNID=RailUNID+1
					HOTSPOT2 flw-st/2+roffr,		0-OverhangRBottom, RailUNID, OverhangRBottom, 2 : RailUNID=RailUNID+1
				ENDIF
			ENDIF

			IF gs_2DContourAbove=1 THEN

			RailUNID=1050

				HOTSPOT2 flw-st/2,			(rnu-2)*td+OverhangRTop, RailUNID, roffr, 1+128 : RailUNID=RailUNID+1
				HOTSPOT2 flw-st/2+roffr,	(rnu-2)*td+OverhangRTop, RailUNID, roffr, 2 : RailUNID=RailUNID+1
				HOTSPOT2 flw-st/2-1,		(rnu-2)*td+OverhangRTop, RailUNID, roffr, 3 : RailUNID=RailUNID+1

				!!! RAIL TOP OVERHANG
				HOTSPOT2 flw-st/2+roffr,		td*(rnu-2), RailUNID, OverhangRTop, 1+128 : RailUNID=RailUNID+1
				HOTSPOT2 flw-st/2+roffr,		td*(rnu-2)-1, RailUNID, OverhangRTop, 3 : RailUNID=RailUNID+1
				HOTSPOT2 flw-st/2+roffr,		td*(rnu-2)+OverhangRTop, RailUNID, OverhangRTop, 2 : RailUNID=RailUNID+1
			ENDIF
	ENDIF

	IF rail_m = RAILPOS_LEFT or rail_m = RAILPOS_BOTH THEN
		if bSameRails then
			leftRailType_m = rightRailType_m
		endif

		IF bSameRails THEN
			IF gs_2DContourBelow=1 THEN

			RailUNID=1100

				!!! RAIL OFFSET
				HOTSPOT2 st/2,			-OverhangLBottom+temp_npsLX+temp_btaLX+temp_LengL2-temp_hrol * bComplexRailLeft, RailUNID, roffr, 1+128 : RailUNID=RailUNID+1
				HOTSPOT2 st/2-roffr,	-OverhangLBottom+temp_npsLX+temp_btaLX+temp_LengL2-temp_hrol * bComplexRailLeft, RailUNID, roffr, 2 : RailUNID=RailUNID+1
				HOTSPOT2 st/2+1,		-OverhangLBottom+temp_npsLX+temp_btaLX+temp_LengL2-temp_hrol * bComplexRailLeft, RailUNID, roffr, 3 : RailUNID=RailUNID+1

				IF np_m = POSTPOS_NONE THEN
					!!! RAIL BOTTOM OVERHANG
					HOTSPOT2 st/2-roffr,		0, RailUNID, OverhangRBottom, 1+128 : RailUNID=RailUNID+1
					HOTSPOT2 st/2-roffr,		0+1, RailUNID, OverhangRBottom, 3 : RailUNID=RailUNID+1
					HOTSPOT2 st/2-roffr,		0-OverhangRBottom, RailUNID, OverhangRBottom, 2 : RailUNID=RailUNID+1
				ENDIF
			ENDIF

			IF gs_2DContourAbove=1 THEN

			RailUNID=1150

				HOTSPOT2 st/2,			(rnu-2)*td+OverhangRTop, RailUNID, roffr, 1+128 : RailUNID=RailUNID+1
				HOTSPOT2 st/2-roffr,	(rnu-2)*td+OverhangRTop, RailUNID, roffr, 2 : RailUNID=RailUNID+1
				HOTSPOT2 st/2+1,		(rnu-2)*td+OverhangRTop, RailUNID, roffr, 3 : RailUNID=RailUNID+1

				!!! RAIL TOP OVERHANG
				HOTSPOT2 st/2-roffr,		td*(rnu-2), RailUNID, OverhangRTop, 1+128 : RailUNID=RailUNID+1
				HOTSPOT2 st/2-roffr,		td*(rnu-2)-1, RailUNID, OverhangRTop, 3 : RailUNID=RailUNID+1
				HOTSPOT2 st/2-roffr,		td*(rnu-2)+OverhangRTop, RailUNID, OverhangRTop, 2 : RailUNID=RailUNID+1
			ENDIF
		ELSE

			IF gs_2DContourBelow=1 THEN

			RailUNID=1200

				!!! RAIL OFFSET
				HOTSPOT2 st/2,			-OverhangLBottom+temp_npsLX+temp_btaLX+temp_LengL2-temp_hrol * bComplexRailLeft, RailUNID, roffl, 1+128 : RailUNID=RailUNID+1
				HOTSPOT2 st/2-roffl,	-OverhangLBottom+temp_npsLX+temp_btaLX+temp_LengL2-temp_hrol * bComplexRailLeft, RailUNID, roffl, 2 : RailUNID=RailUNID+1
				HOTSPOT2 st/2+1,		-OverhangLBottom+temp_npsLX+temp_btaLX+temp_LengL2-temp_hrol * bComplexRailLeft, RailUNID, roffl, 3 : RailUNID=RailUNID+1

				IF np_m = POSTPOS_NONE THEN
					!!! RAIL BOTTOM OVERHANG
					HOTSPOT2 st/2-roffl,		0, RailUNID, OverhangLBottom, 1+128 : RailUNID=RailUNID+1
					HOTSPOT2 st/2-roffl,		0+1, RailUNID, OverhangLBottom, 3 : RailUNID=RailUNID+1
					HOTSPOT2 -st/2-roffl,		0-OverhangLBottom, RailUNID, OverhangLBottom, 2 : RailUNID=RailUNID+1
				ENDIF
			ENDIF

			IF gs_2DContourAbove=1 THEN

			RailUNID=1250

				HOTSPOT2 st/2,			(rnu-2)*td+OverhangLTop, RailUNID, roffl, 1+128 : RailUNID=RailUNID+1
				HOTSPOT2 st/2-roffl,	(rnu-2)*td+OverhangLTop, RailUNID, roffl, 2 : RailUNID=RailUNID+1
				HOTSPOT2 st/2+1,		(rnu-2)*td+OverhangLTop, RailUNID, roffl, 3 : RailUNID=RailUNID+1

				!!! RAIL TOP OVERHANG
				HOTSPOT2 st/2-roffl,		td*(rnu-2), RailUNID, OverhangLTop, 1+128 : RailUNID=RailUNID+1
				HOTSPOT2 st/2-roffl,		td*(rnu-2)-1, RailUNID, OverhangLTop, 3 : RailUNID=RailUNID+1
				HOTSPOT2 st/2-roffl,		td*(rnu-2)+OverhangLTop, RailUNID, OverhangLTop, 2 : RailUNID=RailUNID+1
			ENDIF
		ENDIF
	ENDIF
endif

!================================================================================
end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end
!================================================================================

"left rail":

	! ---  Rail on 1st Run -----------------------------------------------------
	if bShowRailOn1stRun then
		lraSimple=LRailLength
		lraComplex=LRailLength
		additionXComplex=0
		additionZComplex=0
		hrovL=temp_hrol
		hrovR=hrol
		postNumber = npl
		side = SIDE_LEFT
		gosub "callRailsForStair"
	endif
return


"right rail":

	! ---  Rail on 1st Run -----------------------------------------------------
	if bShowRailOn1stRun then
		lraSimple=RRailLength
		lraComplex=RRailLength
		additionXComplex=0
		additionZComplex=0
		hrovL=temp_hror
		hrovR=hror
		postNumber = npr
		side = SIDE_RIGHT
		gosub "callRailsForStair"
	endif
return

"callRailsForStair":
! ------------------------------------------------------------------------------
!	lraSimple
!	lraComplex
!	additionXComplex
!	additionZComplex
!	hrovL: rail overhang start
!	hrovR: rail overhang end
!	postNumber:   number of posts
!	side: SIDE_LEFT or SIDE_RIGHT
! ==============================================================================
	ani = ang
	additionXComplex = additionXComplex
	additionZComplex = additionZComplex
	gosub "callRails"
return

! ==============================================================================
"callRails":
! ------------------------------------------------------------------------------
!	ani
!	additionXComplex
!	additionZComplex
!	dsComplex
!  ------------------
!	side: SIDE_LEFT or SIDE_RIGHT
!	lraSimple
!	lraComplex
!	hrovL: rail overhang start
!	hrovR: rail overhang end
!	postNumber:   number of posts
! ==============================================================================
	if side = SIDE_LEFT then
		railBarDepth	= bwl
		railBarDiam		= bdl
		railHeight		= hrl
		railBarThk		= fthl
		railFrameThk	= fthl
		railDist		= dsl
		railType_m		= leftRailType_m
		railPostDia		= pdl
		railPostWidth	= pwl
		railPostThk		= pthl
		railPostType	= ptl_m
		nBarsRail		= nbl
		bt_m			= btl_m
		railFramesWSide	= fswl
		railFramesWTop	= ftwl
		railFramesWBot	= fbwl
		railBarHeight	= bhl
		railBarFillThk	= bthl
		abdist			= abdistl
		railFrameMat	= fmatl
		railBaluFillMat	= bmatl
		railPostMat		= pmatl
		nbt				= nbtl
		railFillDist	= fdfl
		railPostBaseType= gs_PostBaseTypeL_m
		railDistFromHr	= sbhl
		railPostBaseOv	= gs_PostBaseOverhangL
		railHrailHeight	= hrhl
		handRailWidth	= handRailWidthL
		bComplexRail	= bComplexRailLeft
	else
		railBarDepth	= bwr
		railBarDiam		= bdr
		railHeight		= hrr
		railBarThk		= fthr
		railFrameThk	= fthr
		railDist		= dsr
		railType_m		= rightRailType_m
		railPostDia		= pdr
		railPostWidth	= pwr
		railPostThk		= pthr
		railPostType	= ptr_m
		nBarsRail		= nbr
		bt_m			= btr_m
		railFramesWSide	= fswr
		railFramesWTop	= ftwr
		railFramesWBot	= fbwr
		railBarHeight	= bhr
		railBarFillThk	= bthr
		abdist			= abdistr
		railFrameMat	= fmatr
		railBaluFillMat	= bmatr
		railPostMat		= pmatr
		nbt				= nbtr
		railFillDist	= fdfr
		railPostBaseType= gs_PostBaseTypeR_m
		railDistFromHr	= sbhr
		railPostBaseOv	= gs_PostBaseOverhangR
		railHrailHeight	= hrhr
		handRailWidth	= handRailWidthR
		bComplexRail	= bComplexRailRight
	endif

	add2 additionXComplex * bComplexRail, 0
	call "railSymbol2D_m" parameters all	cfs					= 1,
											bEnable2DPosts		= bComplexRail,
											ptyp_m				= 1,
											ani					= ani,
											rom_m				= 1,
											rmm_m				= 1,
											LengthSize			= 0,
											lra					= lraSimple * NOT(bComplexRail) + lraComplex * (bComplexRail),
											hr					= railHeight,
											hrPerp				= railHeight,
											ab					= 0,
											rb					= 0,
											ds					= railDist,
											gs_AngleL			= 90,
											gs_AngleR			= 90,
											iHandRailStyle		= 1,
											handRailDiameter	= handRailWidth,
											handRailWidth		= handRailWidth,
											hroL				= hrovL,
											hroR				= hrovR,
											np					= postNumber,
											pd					= railPostDia,
											pw					= railPostWidth,
											pth					= railPostThk,
											gs_cont_pen			= railPen,
											sa					= 0,
											bBreakRailLine		= bBreakRailLine,
											breakLineAngle		= brLineAngle,
											breakLineDist		= breakLineDist,
											breakLineWidth		= brkLineY,
											bRailAboveBreakLine	= bRailAboveBreakLine,
											bShowRailBelowBrL	= bShowRailPart1,
											bShowRailAboveBrL	= bShowRailPart2,
											bPostNoCalculation	= (railType_m = 10),
											pit_m				= 1,
											dp					= abdist,
											nbt					= nbt
	del 1

	bShowRailPart1			= 0
	bShowRailPart2			= 0

return

