
IF gs_detlevel_3D_m=0 THEN END

IF GLOB_CONTEXT>20 and GLOB_CONTEXT<40 THEN 		!! for Simple Model and in 3D Windoow
	gs_detlevel_3D_m=1
ENDIF

IF gs_shadow=0 THEN SHADOW OFF

PEN gs_cont_pen



!!!!!!!!!!!!!!!!!!! *** HOTSPOTs RailUNID *** !!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

	!!! FlightUNID=1	!!! 1,5,100
	!!! RailUNID=1000	!!! 1000-2300
	!!! PostUNID=5000	!!! 5000,
	!!! StringUNID=6000	!!! 6000-6900

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!! *** NEWEL POST *** !!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

ADDx st
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!! *** Left Newel Post *** !!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	IF np_m = POSTPOS_LEFT or np_m = POSTPOS_BOTH THEN

		IF iBottomStepArrangement <> BSTEPARRANGE_NORMAL THEN
			ADD -nps,td-nps/2,0
		ELSE
			ADD -nps,0,0
		ENDIF

				MATERIAL matnp
				PRISM_ 5,nph,
					0,0,15,
					nps,0,15,
					nps,nps,15,
					0,nps,15,
					0,0,-1

			if posthead_m = POSTHEAD_SPHERE or posthead_m = POSTHEAD_PYRAMID then
			ADD  nps/2,nps/2,nph
				PYRAMID 5, nps, 1+2+16+32+64,
					-nps/2, nps/2, 0,
					-nps/2, -nps/2, 0,
					nps/2, -nps/2, 0,
					nps/2, nps/2, 0,
					-nps/2, nps/2, 0

					addz (sqr(2)+1)*nps/2
					RESOL res
					if posthead_m = POSTHEAD_SPHERE then SPHERE sqr(2)*nps/2
					del 1
			DEL 1
			ENDIF

			PostUNID=5000
			HOTSPOT nps/2,nps/2,0,	PostUNID, nph, 1+128 : PostUNID=PostUNID+1
			HOTSPOT nps/2,nps/2,-1,	PostUNID, nph, 3 : PostUNID=PostUNID+1
			HOTSPOT nps/2,nps/2,nph,PostUNID, nph, 2 : PostUNID=PostUNID+1

		DEL 1
	ENDIF

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!! *** Right Newel Post *** !!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
IF np_m = POSTPOS_RIGHT or np_m = POSTPOS_BOTH THEN

	IF iBottomStepArrangement <> BSTEPARRANGE_NORMAL THEN
		ADD FlightWidth,td-nps/2,0
	ELSE
		ADD FlightWidth,0,0
	ENDIF

			MATERIAL matnp
			PRISM_ 5,nph,
				0,0,15,
				nps,0,15,
				nps,nps,15,
				0,nps,15,
				0,0,-1

			if posthead_m = POSTHEAD_SPHERE or posthead_m = POSTHEAD_PYRAMID then
			ADD  nps/2,nps/2,nph
				PYRAMID 5, nps, 1+2+16+32+64,
					-nps/2, nps/2, 0,
					-nps/2, -nps/2, 0,
					nps/2, -nps/2, 0,
					nps/2, nps/2, 0,
					-nps/2, nps/2, 0

					addz (sqr(2)+1)*nps/2
					RESOL res
					if posthead_m = POSTHEAD_SPHERE then SPHERE sqr(2)*nps/2
					del 1
			DEL 1
			ENDIF

			PostUNID=5100
			HOTSPOT nps/2,nps/2,0,	PostUNID, nph, 1+128 : PostUNID=PostUNID+1
			HOTSPOT nps/2,nps/2,-1,	PostUNID, nph, 3 : PostUNID=PostUNID+1
			HOTSPOT nps/2,nps/2,nph,PostUNID, nph, 2 : PostUNID=PostUNID+1

	DEL 1
ENDIF


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!! *** SIDE STRINGS *** !!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

!!shvert= sh/cos(atn(th/td))	!!Dim. of Vert. Projection of String
!!pdvert= pd*shvert/sh			!!Dim. of Vert. Projection of Pitch Line

!!! String
LowerEndX1=(th+pdvert)/TAN(ang)
LowerEndX2=(shvert-th-pdvert)/TAN(ang)

LowerEndHgtX=LowerEndHgt/TAN(ang)
LowerEndHgtY=LowerEndHgt*TAN(ang)

UpperEndHgtX=(pdvert-UpperEndHgt)/TAN(ang)
UpperEndX2=(shvert-pdvert-lst)/TAN(ang)

IF iFlightSectionType = FLIGHTSECTION_WITHOUT_SOFFIT or iFlightSectionType = FLIGHTSECTION_WITH_SOFFIT THEN
!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!! *** Left String *** !!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		Addx -st
		Rotz 90
		ROTx 90
			MATERIAL matstr
			SECT_FILL typeFillStringer, penBackFillStringer, penFillStringer, penLineStringer

			IF np_m = POSTPOS_RIGHT or np_m = POSTPOS_NONE THEN		!!! (Newel Post=NO on Left Side)
			!!! *** Lower Junction Type
				IF iLowerJunctionType = LOWERJUNCTION_GROUND_FLOOR THEN
					PRISM_ 6, st,
						-LowerEndX1+LowerEndHgtX,0,15,
						LowerEndX2,0,15,
						(rnu-1)*td/2, (tan(ang)*(rnu-1)*td)/2-(shvert-th-pdvert), 8,
						(rnu-1)*td/2, (tan(ang)*(rnu-1)*td)/2-(-th-pdvert), 13,
						-LowerEndX1+LowerEndHgtX,LowerEndHgt,15,
						-LowerEndX1+LowerEndHgtX,0,-1
				ENDIF

				IF iLowerJunctionType = LOWERJUNCTION_FLOOR_OR_LANDING THEN
					PRISM_ 7, st,
						-LowerEndX1+LowerEndHgtX,0,15,
						0,0,15,
						0,-shvert+th+pdvert,15,
						(rnu-1)*td/2, (tan(ang)*(rnu-1)*td)/2-(shvert-th-pdvert), 8,
						(rnu-1)*td/2, (tan(ang)*(rnu-1)*td)/2-(-th-pdvert), 13,
						-LowerEndX1+LowerEndHgtX,LowerEndHgt,15,
						-LowerEndX1+LowerEndHgtX,0,-1
				ENDIF

				IF iLowerJunctionType = LOWERJUNCTION_STRAIGHT_END THEN
					ADDy -(shvert-th-pdvert)
					PRISM_ 6, st,
						0,LowerEndHgtY,15,
						LowerEndHgt,LowerEndHgtY,15,
						(rnu-1)*td/2, (tan(ang)*(rnu-1)*td)/2, 8,
						(rnu-1)*td/2, (tan(ang)*(rnu-1)*td)/2+shvert, 13,
						0, shvert, 15,
						0,LowerEndHgtY,-1
					DEL 1
				ENDIF

			ELSE		!!! *** IF np_m = POSTPOS_LEFT or np_m = POSTPOS_NONE !!! (Newel Post=YES on Left Side)

				IF iBottomStepArrangement <> BSTEPARRANGE_NORMAL THEN
					ADDx td+nps/2
				ELSE
					ADDx nps
				ENDIF

				ROTy 90
				CUTPLANE 180
				DEL 2

				ROTx 90
				CUTPLANE
				DEL 1

					ADDy -(shvert-th-pdvert)
					PRISM_ 5, st,
						0,0,15,
						(rnu-1)*td/2, (tan(ang)*(rnu-1)*td)/2, 8,
						(rnu-1)*td/2, (tan(ang)*(rnu-1)*td)/2+shvert, 13,
						0, shvert, 15,
						0,0,-1
					DEL 1
				CUTEND
				CUTEND
			ENDIF

			IF rnu=3 and np_m <> POSTPOS_RIGHT THEN
				Addx td+nps/2
				roty 90
				CUTPLANE 180
				del 2
			ENDIF

			!!! *** Upper Junction Type *** !!!
				IF iUpperJunctionType = UPPERJUNCTION_FLOOR_OR_LANDING THEN
					ADDy -(shvert-th-pdvert)
					PRISM_ 7, st,
						(rnu-1)*td/2, (tan(ang)*(rnu-1)*td)/2, 13,
						(rnu-1)*td+UpperEndX2, (tan(ang)*(rnu-1)*td)+shvert-pdvert-lst, 15,
						(rnu-1)*td, (tan(ang)*(rnu-1)*td)+shvert-pdvert-lst, 15,
						(rnu-1)*td, (tan(ang)*(rnu-1)*td)+shvert-pdvert+UpperEndHgt, 15,
						(rnu-1)*td-UpperEndHgtx, (tan(ang)*(rnu-1)*td)+shvert-pdvert+UpperEndHgt, 15,
						(rnu-1)*td/2, (tan(ang)*(rnu-1)*td)/2+shvert, 8,
						(rnu-1)*td/2, (tan(ang)*(rnu-1)*td)/2,-1
					DEL 1
				ENDIF

				IF iUpperJunctionType = UPPERJUNCTION_STRAIGHT_END THEN
					ADDy -(shvert-th-pdvert)
					PRISM_ 6, st,
						(rnu-1)*td/2, (tan(ang)*(rnu-1)*td)/2, 13,
						(rnu-1)*td, (tan(ang)*(rnu-1)*td), 15,
						(rnu-1)*td, (tan(ang)*(rnu-1)*td)+shvert-pdvert+UpperEndHgt, 15,
						(rnu-1)*td-UpperEndHgtx, (tan(ang)*(rnu-1)*td)+shvert-pdvert+UpperEndHgt, 15,
						(rnu-1)*td/2, (tan(ang)*(rnu-1)*td)/2+shvert, 8,
						(rnu-1)*td/2, (tan(ang)*(rnu-1)*td)/2,-1
					DEL 1
				ENDIF

			IF rnu=3 and np_m <> POSTPOS_RIGHT THEN CUTEND

		DEL 3

!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!! *** Right String *** !!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!

	ADDx FlightWidth+st
		Addx -st
		Rotz 90
		ROTx 90
			MATERIAL matstr
			SECT_FILL typeFillStringer, penBackFillStringer, penFillStringer, penLineStringer

			IF np_m = POSTPOS_LEFT or np_m = POSTPOS_NONE THEN
			!!! *** Lower Junction Type
				IF iLowerJunctionType = LOWERJUNCTION_GROUND_FLOOR THEN
					PRISM_ 6, st,
						-LowerEndX1+LowerEndHgtX,0,15,
						LowerEndX2,0,15,
						(rnu-1)*td/2, (tan(ang)*(rnu-1)*td)/2-(shvert-th-pdvert), 8,
						(rnu-1)*td/2, (tan(ang)*(rnu-1)*td)/2-(-th-pdvert), 13,
						-LowerEndX1+LowerEndHgtX,LowerEndHgt,15,
						-LowerEndX1+LowerEndHgtX,0,-1
				ENDIF

				IF iLowerJunctionType = LOWERJUNCTION_FLOOR_OR_LANDING THEN
					PRISM_ 7, st,
						-LowerEndX1+LowerEndHgtX,0,15,
						0,0,15,
						0,-shvert+th+pdvert,15,
						(rnu-1)*td/2, (tan(ang)*(rnu-1)*td)/2-(shvert-th-pdvert), 8,
						(rnu-1)*td/2, (tan(ang)*(rnu-1)*td)/2-(-th-pdvert), 13,
						-LowerEndX1+LowerEndHgtX,LowerEndHgt,15,
						-LowerEndX1+LowerEndHgtX,0,-1
				ENDIF

				IF iLowerJunctionType = LOWERJUNCTION_STRAIGHT_END THEN
					ADDy -(shvert-th-pdvert)
					PRISM_ 6, st,
						0,LowerEndHgtY,15,
						LowerEndHgt,LowerEndHgtY,15,
						(rnu-1)*td/2, (tan(ang)*(rnu-1)*td)/2, 8,
						(rnu-1)*td/2, (tan(ang)*(rnu-1)*td)/2+shvert, 13,
						0, shvert, 15,
						0,LowerEndHgtY,-1
					DEL 1
				ENDIF
			ELSE	!!! *** IF np_m = POSTPOS_RIGHT or np_m = POSTPOS_BOTH THEN

				IF iBottomStepArrangement <> BSTEPARRANGE_NORMAL THEN
					ADDx td+nps/2
				ELSE
					ADDx nps
				ENDIF

				ROTy 90
				CUTPLANE 180
				DEL 2

				ROTx 90
				CUTPLANE
				DEL 1

					ADDy -(shvert-th-pdvert)
					PRISM_ 5, st,
						0,0,15,
						(rnu-1)*td/2, (tan(ang)*(rnu-1)*td)/2, 8,
						(rnu-1)*td/2, (tan(ang)*(rnu-1)*td)/2+shvert, 13,
						0, shvert, 15,
						0,0,-1
					DEL 1
				CUTEND
				CUTEND
			ENDIF

			IF rnu=3 and np_m <> POSTPOS_LEFT THEN
				Addx td+nps/2
				roty 90
				CUTPLANE 180
				del 2
			ENDIF

			!!! *** Upper Junction Type
				IF iUpperJunctionType = UPPERJUNCTION_FLOOR_OR_LANDING THEN
					ADDy -(shvert-th-pdvert)
					PRISM_ 7, st,
						(rnu-1)*td/2, (tan(ang)*(rnu-1)*td)/2, 13,
						(rnu-1)*td+UpperEndX2, (tan(ang)*(rnu-1)*td)+shvert-pdvert-lst, 15,
						(rnu-1)*td, (tan(ang)*(rnu-1)*td)+shvert-pdvert-lst, 15,
						(rnu-1)*td, (tan(ang)*(rnu-1)*td)+shvert-pdvert+UpperEndHgt, 15,
						(rnu-1)*td-UpperEndHgtx, (tan(ang)*(rnu-1)*td)+shvert-pdvert+UpperEndHgt, 15,
						(rnu-1)*td/2, (tan(ang)*(rnu-1)*td)/2+shvert, 8,
						(rnu-1)*td/2, (tan(ang)*(rnu-1)*td)/2,-1
					DEL 1
				ENDIF

				IF iUpperJunctionType = UPPERJUNCTION_STRAIGHT_END THEN
					ADDy -(shvert-th-pdvert)
					PRISM_ 6, st,
						(rnu-1)*td/2, (tan(ang)*(rnu-1)*td)/2, 13,
						(rnu-1)*td, (tan(ang)*(rnu-1)*td), 15,
						(rnu-1)*td, (tan(ang)*(rnu-1)*td)+shvert-pdvert+UpperEndHgt, 15,
						(rnu-1)*td-UpperEndHgtx, (tan(ang)*(rnu-1)*td)+shvert-pdvert+UpperEndHgt, 15,
						(rnu-1)*td/2, (tan(ang)*(rnu-1)*td)/2+shvert, 8,
						(rnu-1)*td/2, (tan(ang)*(rnu-1)*td)/2,-1
					DEL 1
				ENDIF
			IF rnu=3 and np_m <> POSTPOS_LEFT THEN CUTEND
		DEL 3
	DEL 1

ENDIF


!!! *** End of Side Strings	*** !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!! *** SOFFIT *** !!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

SoffitVert=softh/cos(atn(th/td))
LowerSoffitX1=softh/sin(ang)

IF iFlightSectionType = FLIGHTSECTION_WITH_SOFFIT THEN		!!! SOFFIT

	Addx -st
	Rotz 90
	ROTx 90

	MATERIAL matsoff
	SECT_FILL typeFillSoffit, penBackFillSoffit, penFillSoffit, penLineSoffit

	IF np_m = POSTPOS_NONE THEN
			!!! *** Lower Junction Type
			IF iLowerJunctionType = LOWERJUNCTION_GROUND_FLOOR THEN
				IF iFlightSectionType = FLIGHTSECTION_WITH_SOFFIT THEN		!!! SOFFIT
					ADDz st
						PRISM_ 5, FlightWidth,
						LowerEndX2-LowerSoffitX1,0,15,
						LowerEndX2,0,15,
						(rnu-1)*td/2, (tan(ang)*(rnu-1)*td)/2-(shvert-th-pdvert), 8,
						(rnu-1)*td/2, (tan(ang)*(rnu-1)*td)/2-(shvert-th-pdvert)+SoffitVert, 13,
						LowerEndX2-LowerSoffitX1,0,-1
					DEL 1
				ENDIF
			ENDIF

			IF iLowerJunctionType = LOWERJUNCTION_FLOOR_OR_LANDING THEN
				IF iFlightSectionType = FLIGHTSECTION_WITH_SOFFIT THEN		!!! SOFFIT
					ADDz st
						PRISM_ 5, FlightWidth,
							0,-shvert+th+pdvert+SoffitVert,15,
							0,-shvert+th+pdvert,15,
							(rnu-1)*td/2, (tan(ang)*(rnu-1)*td)/2-(shvert-th-pdvert), 8,
							(rnu-1)*td/2, (tan(ang)*(rnu-1)*td)/2-(shvert-th-pdvert)+SoffitVert, 13,
							0,-shvert+th+pdvert+SoffitVert,-1
					DEL 1
				ENDIF
			ENDIF

			IF iLowerJunctionType = LOWERJUNCTION_STRAIGHT_END THEN
				ADDy -(shvert-th-pdvert)
					IF iFlightSectionType = FLIGHTSECTION_WITH_SOFFIT THEN		!!! SOFFIT
						ADDz st
						IF LowerEndHgt>LowerSoffitX1 THEN
							Point1=LowerEndHgt-LowerSoffitX1
							Point2=LowerEndHgtY
						ELSE
							Point1=0
							Point2=SoffitVert
						ENDIF

						PRISM_ 6, FlightWidth,
							Point1,Point2,15,
							Point1,LowerEndHgtY,15,
							LowerEndHgt,LowerEndHgtY,15,
							(rnu-1)*td/2, (tan(ang)*(rnu-1)*td)/2, 8,
							(rnu-1)*td/2, (tan(ang)*(rnu-1)*td)/2+SoffitVert, 13,
							Point1,Point2,-1
						DEL 1
					ENDIF
				DEL 1
			ENDIF
	ELSE

			IF iBottomStepArrangement <> BSTEPARRANGE_NORMAL THEN
				ADDx td+nps/2
			ELSE
				ADDx nps
			ENDIF

			ROTy 90
			CUTPLANE 180
			DEL 2

			ROTx 90
			CUTPLANE
			DEL 1

				IF iFlightSectionType = FLIGHTSECTION_WITH_SOFFIT THEN		!!! SOFFIT
					ADDz st
						PRISM_ 5, FlightWidth,
						LowerEndX2-LowerSoffitX1,0,15,
						LowerEndX2,0,15,
						(rnu-1)*td/2, (tan(ang)*(rnu-1)*td)/2-(shvert-th-pdvert), 8,
						(rnu-1)*td/2, (tan(ang)*(rnu-1)*td)/2-(shvert-th-pdvert)+SoffitVert, 13,
						LowerEndX2-LowerSoffitX1,0,-1
					DEL 1
				ENDIF

			CUTEND
			CUTEND

	ENDIF

		!!! *** Upper Junction Type *** !!!
			IF iUpperJunctionType = UPPERJUNCTION_FLOOR_OR_LANDING THEN
				ADDy -(shvert-th-pdvert)
					IF iFlightSectionType = FLIGHTSECTION_WITH_SOFFIT THEN		!!! SOFFIT
						ADDz st
						PRISM_ 5, FlightWidth,
							(rnu-1)*td/2, (tan(ang)*(rnu-1)*td)/2, 13,
							(rnu-1)*td+UpperEndX2, (tan(ang)*(rnu-1)*td)+shvert-pdvert-lst, 15,
							(rnu-1)*td+UpperEndX2-LowerSoffitX1, (tan(ang)*(rnu-1)*td)+shvert-pdvert-lst, 15,
							(rnu-1)*td/2, (tan(ang)*(rnu-1)*td)/2+SoffitVert, 8,
							(rnu-1)*td/2, (tan(ang)*(rnu-1)*td)/2, -1
						DEL 1
					ENDIF

				DEL 1
			ENDIF

			IF iUpperJunctionType = UPPERJUNCTION_STRAIGHT_END THEN
				ADDy -(shvert-th-pdvert)
					IF iFlightSectionType = FLIGHTSECTION_WITH_SOFFIT THEN		!!! SOFFIT
						ADDz st
						PRISM_ 5, FlightWidth,
							(rnu-1)*td/2, (tan(ang)*(rnu-1)*td)/2, 13,
							(rnu-1)*td, (tan(ang)*(rnu-1)*td), 15,
							(rnu-1)*td, (tan(ang)*(rnu-1)*td)+SoffitVert, 15,
							(rnu-1)*td/2, (tan(ang)*(rnu-1)*td)/2+SoffitVert, 8,
							(rnu-1)*td/2, (tan(ang)*(rnu-1)*td)/2, -1
						DEL 1
					ENDIF
				DEL 1
			ENDIF
	DEL 3
ENDIF
DEL 1

!!! *** End of Soffit *** !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!! *** TREADS *** !!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

ADDx st

IF iBottomStepArrangement = BSTEPARRANGE_NORMAL THEN
	RiserEndValue = (rnu-1)
ELSE
	RiserEndValue = (rnu-2)
ENDIF


FOR NumRisers=1 to RiserEndValue

	IF NumRisers=RiserEndValue then
	temp_tdo=0
	ELSE
	temp_tdo=tdo
	ENDIF

		IF iBottomStepArrangement <> BSTEPARRANGE_NORMAL THEN add 0,td,th
		ADDZ th-rt
			MATERIAL mat_tread
			SECT_FILL typeFillTread, penBackFillTread, penFillTread, penLineTread

			PRISM_ 5, rt,
				0,-ns,15,
				FlightWidth,-ns,15,
				FlightWidth,td+temp_tdo,15,
				0,td+temp_tdo,15,
				0,-ns,-1
		DEL 1
		IF iBottomStepArrangement <> BSTEPARRANGE_NORMAL THEN DEL 1
	ADD 0,td,th
NEXT NumRisers
DEL RiserEndValue

!!!!!!!!!!!!!!!!!!!!!!!!!! *** BATTENS *** !!!!!!!!!!!!!!!!!!!!!!!!!!
if bt_m <> BATTEN_NONE then
ADDx -st
		if bt_m = BATTEN_NOSING then
			btts=th*2/3-rt
			bttl=th/3
		endif
		if bt_m = BATTEN_INTERM then
			btts=(th)/3-rt/2
			bttl=th/3
		endif
		if bt_m = BATTEN_TREAD then
			btts=0
			bttl=th/3
		endif
		if bt_m = BATTEN_FULL then
			btts=0
			bttl=th-rt
		endif

		FOR NumRisers=1 to RiserEndValue
			SECT_FILL typeFillRiser, penBackFillRiser, penFillRiser, penLineRiser

				IF iBottomStepArrangement <> BSTEPARRANGE_NORMAL THEN add 0,td,th
					ADDz btts
						MATERIAL mat_riser
						PRISM 5, bttl,
							st, rt,
							st, 0,
							st+FlightWidth, 0,
							st+FlightWidth, rt,
							st, rt
					DEL 1
				IF iBottomStepArrangement <> BSTEPARRANGE_NORMAL THEN DEL 1
			ADD 0,td,th
		NEXT NumRisers
		DEL RiserEndValue
DEL 1
ENDIF

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!! *** BOTTOM STEP *** !!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

CutPostX=nps
CutPostY=nps/2


IF np_m = POSTPOS_BOTH THEN
		IF iBottomStepArrangement = BSTEPARRANGE_DSTEP THEN
			ADDz th-rt
			MATERIAL mat_tread
			SECT_FILL typeFillTread, penBackFillTread, penFillTread, penLineTread

			!!! *** TREAD
			PRISM_ 15, rt,
				-CutPostX,-ns,79,
				FlightWidth+CutPostX,-ns,79,
				FlightWidth+CutPostX,td/2,900,
				0,180,4000,
				FlightWidth+CutPostX,td+ns,15,
				FlightWidth+CutPostX,td-CutPostY,15,
				FlightWidth,td-CutPostY,15,
				FlightWidth,td+tdo,15,
				0,td+tdo,79,
				0,td-CutPostY,79,
				-CutPostX,td-CutPostY,79,
				-CutPostX,td+ns,79,
				-CutPostX,td/2,900,
				-CutPostX,180,4000,
				-CutPostX,-ns,-1
		DEL 1
			MATERIAL mat_riser
			SECT_FILL typeFillRiser, penBackFillRiser, penFillRiser, penLineRiser

			!!! *** TREAD
			PRISM_ 17, th-rt,
				-CutPostX,0,79,
				FlightWidth+CutPostX,0,79,
				FlightWidth+CutPostX,td/2,900,
				0,180,4000,
				FlightWidth+CutPostX,td,15,
				FlightWidth+CutPostX,td-rt,79,
				FlightWidth+CutPostX,td/2,900,
				0,-180,4000,
				FlightWidth+CutPostX,rt,15,
				-CutPostX,rt,79,
				-CutPostX,td/2,900,
				-CutPostX,-180,4000,
				-CutPostX,td-rt,15,
				-CutPostX,td,79,
				-CutPostX,td/2,900,
				-CutPostX,180,4000,
				-CutPostX,0,-1
		ENDIF

		IF iBottomStepArrangement = BSTEPARRANGE_BULLNOSE THEN
		ADDz th-rt
			MATERIAL mat_tread
			SECT_FILL typeFillTread, penBackFillTread, penFillTread, penLineTread

			!!! *** TREAD
			PRISM_ 13, rt,
				0, td+tdo,15,
				0, td-CutPostY,15,
				-ns, td-CutPostY,79,
				td-CutPostY, td-CutPostY,900,
				0, 90,4000,
				td-CutPostY,-ns,13,
				FlightWidth-(td-CutPostY),-ns,79,
				FlightWidth-(td-CutPostY),td-CutPostY,900,
				0,90,4000,
				FlightWidth+ns,td-CutPostY,15,
				FlightWidth,td-CutPostY,15,
				FlightWidth,td+tdo,15,
				0,td+tdo,-1
		DEL 1
			MATERIAL mat_riser
			SECT_FILL typeFillRiser, penBackFillRiser, penFillRiser, penLineRiser
			!!! *** TREAD
			PRISM_ 21, th-rt,
				0, td+CutPostY,15,
				0, td-CutPostY,79,
				td-CutPostY, td-CutPostY,900,
				0, 90,4000,
				td-CutPostY,0,13,
				FlightWidth-(td-CutPostY),0,79,
				FlightWidth-(td-CutPostY),td-CutPostY,900,
				0,90,4000,
				FlightWidth,td-CutPostY,15,
				FlightWidth,td+tdo,15,
				FlightWidth-rt,td+tdo,15,
				FlightWidth-rt,td-CutPostY,79,
				FlightWidth-(td-CutPostY),td-CutPostY,900,
				0,-90,4000,
				FlightWidth-(td-CutPostY),rt,13,
				td-CutPostY,rt,79,
				td-CutPostY, td-CutPostY,900,
				0,-90,4000,
				rt,td-CutPostY,13,
				rt,td+CutPostY,15,
				0, td+CutPostY,-1
		ENDIF

		IF iBottomStepArrangement = BSTEPARRANGE_SPLAYED THEN
		ADDz th-rt
			MATERIAL mat_tread
			SECT_FILL typeFillTread, penBackFillTread, penFillTread, penLineTread
			!!! *** TREAD
			PRISM_ 11,rt,
				0,td+tdo,15,
				0,td-CutPostY,15,
				-ns,td-CutPostY,15,
				-ns,2/3*td-ns*tan(22.5),15,
				2/3*td-ns*tan(22.5),-ns,15,
				FlightWidth-2/3*td+ns*tan(22.5),-ns,15,
				FlightWidth+ns,2/3*td-ns*tan(22.5),15,
				FlightWidth+ns,td-CutPostY,15,
				FlightWidth,td-CutPostY,15,
				FlightWidth,td+tdo,15,
				0,td+tdo,-1
		DEL 1
			MATERIAL mat_riser
			SECT_FILL typeFillRiser, penBackFillRiser, penFillRiser, penLineRiser
			!!! *** TREAD
			PRISM_ 13,th-rt,
				0,td+CutPostY,15,
				0,2/3*td,15,
				2/3*td,0,15,
				FlightWidth-2/3*td,0,15,
				FlightWidth,2/3*td,15,
				FlightWidth,td+CutPostY,15,
				FlightWidth-rt,td+CutPostY,15,
				FlightWidth-rt,2/3*td+ns*tan(22.5),15,
				FlightWidth-2/3*td-ns*tan(22.5),rt,15,
				2/3*td+ns*tan(22.5),rt,15,
				rt,2/3*td+ns*tan(22.5),15,
				rt,td+CutPostY,15,
				0,td+CutPostY,-1
		ENDIF

ENDIF
IF np_m = POSTPOS_LEFT or np_m = POSTPOS_RIGHT THEN

IF np_m = POSTPOS_RIGHT THEN
mul -1,1,1
ADDx -FlightWidth
ENDIF

		IF iBottomStepArrangement = BSTEPARRANGE_DSTEP THEN
		ADDz th-rt
			MATERIAL mat_tread
			SECT_FILL typeFillTread, penBackFillTread, penFillTread, penLineTread
			!!! *** TREAD
			PRISM_ 10, rt,
				-CutPostX,-ns,15,
				FlightWidth,-ns,15,
				FlightWidth,td+tdo,15,
				0,td+tdo,79,
				0,td-CutPostY,79,
				-CutPostX,td-CutPostY,79,
				-CutPostX,td+ns,79,
				-CutPostX,td/2,900,
				-CutPostX,180,4000,
				-CutPostX,-ns,-1
		DEL 1
			MATERIAL mat_riser
			SECT_FILL typeFillRiser, penBackFillRiser, penFillRiser, penLineRiser
			!!! *** TREAD
			PRISM_ 11, th-rt,
				-CutPostX,0,79,
				FlightWidth,0,79,
				FlightWidth,rt,15,
				-CutPostX,rt,79,
				-CutPostX,td/2,900,
				-CutPostX,-180,4000,
				-CutPostX,td-rt,15,
				-CutPostX,td,79,
				-CutPostX,td/2,900,
				-CutPostX,180,4000,
				-CutPostX,0,-1
		ENDIF

		IF iBottomStepArrangement = BSTEPARRANGE_BULLNOSE THEN
		ADDz th-rt
			MATERIAL mat_tread
			SECT_FILL typeFillTread, penBackFillTread, penFillTread, penLineTread
			!!! *** TREAD
			PRISM_ 9, rt,
				0, td+tdo,15,
				0, td-CutPostY,15,
				-ns, td-CutPostY,79,
				td-CutPostY, td-CutPostY,900,
				0, 90,4000,
				td-CutPostY,-ns,13,
				FlightWidth,-ns,15,
				FlightWidth,td+tdo,15,
				0,td+tdo,-1
		DEL 1
			MATERIAL mat_riser
			SECT_FILL typeFillRiser, penBackFillRiser, penFillRiser, penLineRiser
			!!! *** TREAD
			PRISM_ 13, th-rt,
				0, td+CutPostY,15,
				0, td-CutPostY,79,
				td-CutPostY, td-CutPostY,900,
				0, 90,4000,
				td-CutPostY,0,13,
				FlightWidth,0,15,
				FlightWidth,rt,15,
				td-CutPostY,rt,79,
				td-CutPostY, td-CutPostY,900,
				0,-90,4000,
				rt,td-CutPostY,13,
				rt,td+CutPostY,15,
				0, td+CutPostY,-1
		ENDIF

		IF iBottomStepArrangement = BSTEPARRANGE_SPLAYED THEN
		ADDz th-rt
			MATERIAL mat_tread
			SECT_FILL typeFillTread, penBackFillTread, penFillTread, penLineTread
			!!! *** TREAD
			PRISM_ 8,rt,
				0,td+tdo,15,
				0,td-CutPostY,15,
				-ns,td-CutPostY,15,
				-ns,2/3*td-ns*tan(22.5),15,
				2/3*td-ns*tan(22.5),-ns,15,
				FlightWidth,-ns,15,
				FlightWidth,td+tdo,15,
				0,td+tdo,-1
		DEL 1
			MATERIAL mat_riser
			SECT_FILL typeFillRiser, penBackFillRiser, penFillRiser, penLineRiser
			!!! *** TREAD
			PRISM_ 9,th-rt,
				0,td+CutPostY,15,
				0,2/3*td,15,
				2/3*td,0,15,
				FlightWidth,0,15,
				FlightWidth,rt,15,
				2/3*td+ns*tan(22.5),rt,15,
				rt,2/3*td+ns*tan(22.5),15,
				rt,td+CutPostY,15,
				0,td+CutPostY,-1
		ENDIF

IF np_m = POSTPOS_RIGHT THEN DEL 2
ENDIF

DEL 1
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!! *** RAILING *** !!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

IF hrtr_m=1 THEN		!!! HANDRAIL RIGHT WIDTH
		HandrailHgtR=hrhr
	ELSE
		HandrailHgtR=hrdr
ENDIF

IF hrtl_m=1 THEN		!!! HANDRAIL RIGHT WIDTH
		HandrailHgtL=hrhl
	ELSE
		HandrailHgtL=hrdl
ENDIF

! ------------------------------------------------------------------------------
! Left rail
! ------------------------------------------------------------------------------

IF rail_m = RAILPOS_LEFT or rail_m = RAILPOS_BOTH THEN
	if bSameRails then
		leftRailType_m = rightRailType_m
	endif

	rplPostBase = (leftRailType_m = 7 or leftRailType_m = 8 or leftRailType_m = 9 or leftRailType_m = 11)

	IF np_m = POSTPOS_LEFT or np_m = POSTPOS_BOTH THEN
		OverhangLBottom=0
		temp_npsLX=nps
		temp_npsLY=nps*tan(ang)

		IF ptl_m = POST_RECTANGULAR THEN
			temp_LengL2=bComplexRailLeft*pwl/2
			CutRailBottomL=pwl/2*tan(ang)
			temp_hrol=pwl/2		!! No Handrail Overhang if Newel Post=1
			ELSE
			temp_LengL2=bComplexRailLeft*pdl/2
			CutRailBottomL=pdl/2*tan(ang)
			temp_hrol=pdl/2		!! No Handrail Overhang if Newel Post=1
		ENDIF

		IF iBottomStepArrangement <> BSTEPARRANGE_NORMAL THEN
			temp_rnuL=rnu-3
			temp_btaLx=td-nps/2
			temp_btaLY=(td-nps/2)*tan(ang)
			temp_LengL1=nps/2
		ELSE
			temp_rnuL=rnu-2
			temp_btaLx=0
			temp_btaLY=0
			temp_LengL1=0
		ENDIF
	ELSE
		temp_npsLX=0
		temp_npsLY=0
		temp_rnuL=rnu-2
		temp_btaLx=0
		temp_btaLY=0
		temp_LengL1=0
	ENDIF

	!!! Railing Length in Vertical Orientation Method
	LRailLength=td*(temp_rnuL)+OverhangLBottom+OverhangLTop-temp_npsLX+temp_LengL1-temp_LengL2

	!!! Railing Length in Perpendicular Orientation Method
	atfogL=sqr((temp_rnuL)*(temp_rnuL)*(td*td+th*th))+(OverhangLBottom+OverhangLTop)/cos(ang)

	add 0,-OverhangLBottom+temp_npsLX+temp_btaLX+temp_LengL2,-OverhangLBottom*tan(ang)+temp_npsLY+temp_btaLY+temp_LengL2*tan(ang)
	ADD st/2-roffl,0,th+pdvert
	ROTz 90

	IF roml_m = RAILORIENT_VERTICAL THEN
		Roty -ang
		IF ABS(gs_PostBaseOverhangR)<EPS and bComplexRailLeft THEN CUTPLANE 180
		DEL 1

		lraSimple=LRailLength
		lraComplex=LRailLength
		additionXComplex=0
		additionZComplex=-CutRailBottomL
		hrovL=temp_hrol
		hrovR=hrol
		postNumber = npl
		rom_m = 1
		rmm_m = 1
		side = SIDE_LEFT
		gosub "callRailsForStair"

		IF ABS(gs_PostBaseOverhangR)<EPS and bComplexRailLeft THEN cutend
	else
		lraSimple=atfogL
		lraComplex=atfogL
		additionXComplex=0
		additionZComplex=0
		hrovL=temp_hrol
		hrovR=hrol
		postNumber = npl
		rom_m = 2
		rmm_m = 2
		side = SIDE_LEFT
		gosub "callRailsForStair"
	endif

	DEL 3

ENDIF

! ------------------------------------------------------------------------------
! Right rail
! ------------------------------------------------------------------------------

IF rail_m = RAILPOS_RIGHT or rail_m = RAILPOS_BOTH THEN
	rprPostBase = (rightRailType_m = 7 or rightRailType_m = 8 or rightRailType_m = 9 or rightRailType_m = 11)

	IF np_m = POSTPOS_RIGHT or np_m = POSTPOS_BOTH THEN
		OverhangRBottom=0
		temp_npsRX=nps
		temp_npsRY=nps*tan(ang)
		temp_hror=hror	!! Handrail Overhang if Newel Post=0

		IF ptr_m = POST_RECTANGULAR THEN
			temp_LengR2=bComplexRailRight*pwr/2
			CutRailBottomR=pwr/2*tan(ang)
			temp_hror=pwr/2		!! No Handrail Overhang if Newel Post=1
			ELSE
			temp_LengR2=bComplexRailRight*pdr/2
			CutRailBottomR=pdr/2*tan(ang)
			temp_hror=pdr/2		!! No Handrail Overhang if Newel Post=1
		ENDIF

		IF iBottomStepArrangement <> BSTEPARRANGE_NORMAL THEN
			temp_rnuR=rnu-3
			temp_btaRx=td-nps/2
			temp_btaRY=(td-nps/2)*tan(ang)
			temp_LengR1=nps/2
		ELSE
			temp_rnuR=rnu-2
			temp_btaRx=0
			temp_btaRY=0
			temp_LengR1=0
		ENDIF
	ELSE
		temp_npsRX=0
		temp_npsRY=0
		temp_rnuR=rnu-2
		temp_btaRx=0
		temp_btaRY=0
		temp_LengR1=0
		temp_LengR2=0
		temp_hror=hror	!! Handrail Overhang if Newel Post=0
	ENDIF

	!!! Railing Length in Vertical Orientation Method
	RRailLength=td*(temp_rnuR)+OverhangRBottom+OverhangRTop-temp_npsRX+temp_LengR1-temp_LengR2

	!!! Railing Length in Perpendicular Orientation Method
	atfogR=sqr((temp_rnuR)*(temp_rnuR)*(td*td+th*th))+(OverhangRBottom+OverhangRTop)/cos(ang)

	add 0,-OverhangRBottom+temp_npsRX+temp_btaRX+temp_LengR2,-OverhangRBottom*tan(ang)+temp_npsRY+temp_btaRY+temp_LengR2*tan(ang)
	ADD flw-st/2+roffr,0,th+pdvert
	ROTz 90

	IF romr_m = RAILORIENT_VERTICAL THEN
		Roty -ang
		IF ABS(gs_PostBaseOverhangR)<EPS and bComplexRailRight THEN CUTPLANE 180			!!gs_PostBaseOverhangR=0
		DEL 1

		!!! *** Right Railing/Lower Part
		lraSimple=RRailLength
		lraComplex=RRailLength
		additionXComplex=0
		additionZComplex=-CutRailBottomR
		hrovL=temp_hror
		hrovR=hror
		postNumber = npr
		side = SIDE_RIGHT
		rom_m = 1
		rmm_m = 1
		gosub "callRailsForStair"

		IF ABS(gs_PostBaseOverhangR)<EPS and bComplexRailRight THEN cutend			!!gs_PostBaseOverhangR=0
	else
		!!! *** Right Railing/Lower Part
		lraSimple=atfogR
		lraComplex=atfogR
		additionXComplex=0
		additionZComplex=0
		hrovL=temp_hror
		hrovR=hror
		postNumber = npr
		side = SIDE_RIGHT
		rom_m = 2
		rmm_m = 2
		gosub "callRailsForStair"
	endif

	del 3

ENDIF

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!! HOTSPOTS in 3D / Stair !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

	lrah=td*(rnu-1)		!!! Length

	FlightUNID=1

	!!! FLIGHT WIDTH
	HOTSPOT 		0,	0,	0, FlightUNID, flw, 1+256: FlightUNID=FlightUNID+1
	HOTSPOT 		-1,	0,	0, FlightUNID, flw, 3: FlightUNID=FlightUNID+1
	HOTSPOT 		flw,0,	0, FlightUNID, flw, 2: FlightUNID=FlightUNID+1

	HOTSPOT 		flw,lrah,	(rnu)*th, FlightUNID : FlightUNID=FlightUNID+1
	HOTSPOT 		0,	lrah,	(rnu)*th, FlightUNID : FlightUNID=FlightUNID+1

	IF iUpperJunctionType = UPPERJUNCTION_FLOOR_OR_LANDING then

		FlightUNID=50

		HOTSPOT 		0,	lrah+UpperEndX2,(rnu)*th-lst, FlightUNID, flw, 1+256: FlightUNID=FlightUNID+1
		HOTSPOT 		-1,	lrah+UpperEndX2,(rnu)*th-lst, FlightUNID, flw, 3: FlightUNID=FlightUNID+1
		HOTSPOT 		flw,lrah+UpperEndX2,(rnu)*th-lst, FlightUNID, flw, 2: FlightUNID=FlightUNID+1
	ELSE

		FlightUNID=100

		HOTSPOT 		0,	lrah,(rnu)*th-shvert+pdvert, FlightUNID, flw, 1+256: FlightUNID=FlightUNID+1
		HOTSPOT 		-1,	lrah,(rnu)*th-shvert+pdvert, FlightUNID, flw, 3: FlightUNID=FlightUNID+1
		HOTSPOT 		flw,lrah,(rnu)*th-shvert+pdvert, FlightUNID, flw, 2: FlightUNID=FlightUNID+1
	ENDIF



	!!!*** HOTSPOTS at LOWER JUNCTION *** !!!/!!! Right String - Lower End

	IF np_m = POSTPOS_LEFT or np_m = POSTPOS_NONE THEN
		IF iLowerJunctionType <> LOWERJUNCTION_STRAIGHT_END THEN

			StringUNID=6000

			!!! LOWER STRING END HEIGHT
			HOTSPOT 		flw,	-LowerEndX1+LowerEndHgtX, 0, StringUNID, LowerEndHgt, 1+128: StringUNID=StringUNID+1
			HOTSPOT 		flw,	-LowerEndX1+LowerEndHgtX, -1, StringUNID, LowerEndHgt, 3: StringUNID=StringUNID+1
			HOTSPOT 		flw, 	-LowerEndX1+LowerEndHgtX, LowerEndHgt, StringUNID, LowerEndHgt, 2: StringUNID=StringUNID+1

			!!! STRING WIDTH
			HOTSPOT 		flw,	-LowerEndX1+LowerEndHgtX,LowerEndHgt, StringUNID, st, 1+128: StringUNID=StringUNID+1
			HOTSPOT 		flw+1,	-LowerEndX1+LowerEndHgtX,LowerEndHgt, StringUNID, st, 3: StringUNID=StringUNID+1
			HOTSPOT 		flw-st, -LowerEndX1+LowerEndHgtX,LowerEndHgt, StringUNID, st, 2: StringUNID=StringUNID+1

			IF iLowerJunctionType = LOWERJUNCTION_FLOOR_OR_LANDING THEN
				HOTSPOT flw,0,	-shvert+th+pdvert, StringUNID : StringUNID=StringUNID+1
			ENDIF
		ELSE

			StringUNID=6100

			ADDz -shvert+th+pdvert
				!!! LOWER STRING END HEIGHT
				HOTSPOT 		flw-st,	0, 	LowerEndHgtY, StringUNID, LowerEndHgt, 1+128: StringUNID=StringUNID+1
				HOTSPOT 		flw-st,	-1, LowerEndHgtY, StringUNID, LowerEndHgt, 3: StringUNID=StringUNID+1
				HOTSPOT 		flw-st, LowerEndHgt, LowerEndHgtY, StringUNID, LowerEndHgt, 2: StringUNID=StringUNID+1

				!!! STRING WIDTH
				HOTSPOT 		flw,	0,LowerEndHgtY, StringUNID, st, 1+128: StringUNID=StringUNID+1
				HOTSPOT 		flw+1,	0,LowerEndHgtY, StringUNID, st, 3: StringUNID=StringUNID+1
				HOTSPOT 		flw-st, 0,LowerEndHgtY, StringUNID, st, 2: StringUNID=StringUNID+1
			DEL 1

				HOTSPOT 		flw,	0,th+pdvert, StringUNID, st, 1+128: StringUNID=StringUNID+1
				HOTSPOT 		flw+1,	0,th+pdvert, StringUNID, st, 3: StringUNID=StringUNID+1
				HOTSPOT 		flw-st, 0,th+pdvert, StringUNID, st, 2: StringUNID=StringUNID+1
		ENDIF
	ENDIF

	IF np_m = POSTPOS_LEFT or np_m = POSTPOS_BOTH THEN
			IF iBottomStepArrangement <> BSTEPARRANGE_NORMAL THEN
				ADD 0,td+nps/2,2*th+pdvert+nps/2*tan(ang)
			ELSE
				ADD 0,nps,th+pdvert+nps*tan(ang)
			ENDIF

			StringUNID=6200

			!!! STRING WIDTH if there is Newel Post on Left Side
			HOTSPOT 		0,		0, 	0, StringUNID, st, 1+128: StringUNID=StringUNID+1
			HOTSPOT 		-1,		0, 	0, StringUNID, st, 3: StringUNID=StringUNID+1
			HOTSPOT 		st,		0, 	0, StringUNID, st, 2: StringUNID=StringUNID+1
			DEL 1
	ENDIF

	!!!*** HOTSPOTS at LOWER JUNCTION *** !!!/!!! Left String - Lower End

	IF np_m = POSTPOS_RIGHT or np_m = POSTPOS_NONE THEN
		IF iLowerJunctionType <> LOWERJUNCTION_STRAIGHT_END THEN

			StringUNID=6300

			!!! LOWER STRING END HEIGHT
			HOTSPOT 		0,	-LowerEndX1+LowerEndHgtX, 0, StringUNID, LowerEndHgt, 1+128: StringUNID=StringUNID+1
			HOTSPOT 		0,	-LowerEndX1+LowerEndHgtX, -1, StringUNID, LowerEndHgt, 3: StringUNID=StringUNID+1
			HOTSPOT 		0, 	-LowerEndX1+LowerEndHgtX, LowerEndHgt, StringUNID, LowerEndHgt, 2: StringUNID=StringUNID+1

			!!! STRING WIDTH
			HOTSPOT 		0,	-LowerEndX1+LowerEndHgtX,LowerEndHgt, StringUNID, st, 1+128: StringUNID=StringUNID+1
			HOTSPOT 		-1,	-LowerEndX1+LowerEndHgtX,LowerEndHgt, StringUNID, st, 3: StringUNID=StringUNID+1
			HOTSPOT 		st, -LowerEndX1+LowerEndHgtX,LowerEndHgt, StringUNID, st, 2: StringUNID=StringUNID+1

			IF iLowerJunctionType = LOWERJUNCTION_FLOOR_OR_LANDING THEN
				HOTSPOT 0,0,	-shvert+th+pdvert, StringUNID : StringUNID=StringUNID+1
			ENDIF

		ELSE

			StringUNID=6400

			ADDz -shvert+th+pdvert
				!!! LOWER STRING END HEIGHT
				HOTSPOT 		st,	0, 	LowerEndHgtY, StringUNID, LowerEndHgt, 1+128: StringUNID=StringUNID+1
				HOTSPOT 		st,	-1, LowerEndHgtY, StringUNID, LowerEndHgt, 3: StringUNID=StringUNID+1
				HOTSPOT 		st, LowerEndHgt, LowerEndHgtY, StringUNID, LowerEndHgt, 2: StringUNID=StringUNID+1

				!!! STRING WIDTH
				HOTSPOT 		0,	0,LowerEndHgtY, StringUNID, st, 1+128: StringUNID=StringUNID+1
				HOTSPOT 		-1,	0,LowerEndHgtY, StringUNID, st, 3: StringUNID=StringUNID+1
				HOTSPOT 		st,0,LowerEndHgtY, StringUNID, st, 2: StringUNID=StringUNID+1
			DEL 1

				HOTSPOT 		0,	0,th+pdvert, StringUNID, st, 1+128: StringUNID=StringUNID+1
				HOTSPOT 		-1,	0,th+pdvert, StringUNID, st, 3: StringUNID=StringUNID+1
				HOTSPOT 		st,0,th+pdvert, StringUNID, st, 2: StringUNID=StringUNID+1
		ENDIF
	ENDIF

	IF np_m = POSTPOS_RIGHT or np_m = POSTPOS_BOTH THEN
			IF iBottomStepArrangement <> BSTEPARRANGE_NORMAL THEN
				ADD flw,td+nps/2,2*th+pdvert+nps/2*tan(ang)
			ELSE
				ADD flw,nps,th+pdvert+nps*tan(ang)
			ENDIF

			StringUNID=6500

			!!! STRING WIDTH if there is Newel Post on Right Side
			HOTSPOT 		0,		0, 	0, StringUNID, st, 1+128: StringUNID=StringUNID+1
			HOTSPOT 		+1,		0, 	0, StringUNID, st, 3: StringUNID=StringUNID+1
			HOTSPOT 		-st,		0, 	0, StringUNID, st, 2: StringUNID=StringUNID+1
			DEL 1
	ENDIF

	!!!*** HOTSPOTS at UPPER JUNCTION *** !!!

	StringUNID=6600

	!!! UPPER STRING END HEIGHT
	HOTSPOT 		0,	lrah,	(rnu)*th, StringUNID, UpperEndHgt, 1+128: StringUNID=StringUNID+1
	HOTSPOT 		0,	lrah,	(rnu)*th-1, StringUNID, UpperEndHgt, 3: StringUNID=StringUNID+1
	HOTSPOT 		0, 	lrah,	(rnu)*th+UpperEndHgt, StringUNID, UpperEndHgt, 2: StringUNID=StringUNID+1

	HOTSPOT 		st,lrah,	(rnu)*th, StringUNID, UpperEndHgt, 1+128: StringUNID=StringUNID+1
	HOTSPOT 		st,lrah,	(rnu)*th-1, StringUNID, UpperEndHgt, 3: StringUNID=StringUNID+1
	HOTSPOT 		st, lrah,	(rnu)*th+UpperEndHgt, StringUNID, UpperEndHgt, 2: StringUNID=StringUNID+1

	HOTSPOT 		flw,lrah,	(rnu)*th, StringUNID, UpperEndHgt, 1+128: StringUNID=StringUNID+1
	HOTSPOT 		flw,lrah,	(rnu)*th-1, StringUNID, UpperEndHgt, 3: StringUNID=StringUNID+1
	HOTSPOT 		flw,lrah,	(rnu)*th+UpperEndHgt, StringUNID, UpperEndHgt, 2: StringUNID=StringUNID+1

	HOTSPOT 		flw-st,lrah,(rnu)*th, StringUNID, UpperEndHgt, 1+128: StringUNID=StringUNID+1
	HOTSPOT 		flw-st,lrah,(rnu)*th-1, StringUNID, UpperEndHgt, 3: StringUNID=StringUNID+1
	HOTSPOT 		flw-st,lrah,(rnu)*th+UpperEndHgt, StringUNID, UpperEndHgt, 2: StringUNID=StringUNID+1

	!!! STRING WIDTH
	IF iUpperJunctionType = UPPERJUNCTION_FLOOR_OR_LANDING then

		StringUNID=6700

		HOTSPOT 		0,	lrah+UpperEndX2,(rnu)*th-lst, StringUNID, st, 1+128: StringUNID=StringUNID+1
		HOTSPOT 		-1,	lrah+UpperEndX2,(rnu)*th-lst, StringUNID, st, 3: StringUNID=StringUNID+1
		HOTSPOT 		+st,lrah+UpperEndX2,(rnu)*th-lst, StringUNID, st, 2: StringUNID=StringUNID+1

		HOTSPOT 		flw,	lrah+UpperEndX2,(rnu)*th-lst, StringUNID, st, 1+128: StringUNID=StringUNID+1
		HOTSPOT 		flw+1,	lrah+UpperEndX2,(rnu)*th-lst, StringUNID, st, 3: StringUNID=StringUNID+1
		HOTSPOT 		flw-st, lrah+UpperEndX2,(rnu)*th-lst, StringUNID, st, 2: StringUNID=StringUNID+1
	ELSE

		StringUNID=6800

		HOTSPOT 		0,	lrah,(rnu)*th-shvert+pdvert, StringUNID, st, 1+128: StringUNID=StringUNID+1
		HOTSPOT 		-1,	lrah,(rnu)*th-shvert+pdvert, StringUNID, st, 3: StringUNID=StringUNID+1
		HOTSPOT 		+st,lrah,(rnu)*th-shvert+pdvert, StringUNID, st, 2: StringUNID=StringUNID+1

		HOTSPOT 		flw,	lrah,(rnu)*th-shvert+pdvert, StringUNID, st, 1+128: StringUNID=StringUNID+1
		HOTSPOT 		flw+1,	lrah,(rnu)*th-shvert+pdvert, StringUNID, st, 3: StringUNID=StringUNID+1
		HOTSPOT 		flw-st, lrah,(rnu)*th-shvert+pdvert, StringUNID, st, 2: StringUNID=StringUNID+1
	ENDIF

	!!! UPPER JUNCTION TYPE
	IF iUpperJunctionType = UPPERJUNCTION_FLOOR_OR_LANDING then

		StringUNID=6900

		HOTSPOT 		0,	lrah,	(rnu)*th, StringUNID, lst, 1+128: StringUNID=StringUNID+1
		HOTSPOT 		0,	lrah,	(rnu)*th+1, StringUNID, lst, 3: StringUNID=StringUNID+1
		HOTSPOT 		0, 	lrah,	(rnu)*th-lst, StringUNID, lst, 2: StringUNID=StringUNID+1

		HOTSPOT 		st,	lrah,	(rnu)*th, StringUNID, lst, 1+128: StringUNID=StringUNID+1
		HOTSPOT 		st,	lrah,	(rnu)*th+1, StringUNID, lst, 3: StringUNID=StringUNID+1
		HOTSPOT 		st, 	lrah,	(rnu)*th-lst, StringUNID, lst, 2: StringUNID=StringUNID+1

		HOTSPOT 		flw,lrah,	(rnu)*th, StringUNID, lst, 1+128: StringUNID=StringUNID+1
		HOTSPOT 		flw,lrah,	(rnu)*th+1, StringUNID, lst, 3: StringUNID=StringUNID+1
		HOTSPOT 		flw,lrah,	(rnu)*th-lst, StringUNID, lst, 2: StringUNID=StringUNID+1

		HOTSPOT 		flw-st,lrah,	(rnu)*th, StringUNID, lst, 1+128: StringUNID=StringUNID+1
		HOTSPOT 		flw-st,lrah,	(rnu)*th+1, StringUNID, lst, 3: StringUNID=StringUNID+1
		HOTSPOT 		flw-st,lrah,	(rnu)*th-lst, StringUNID, lst, 2: StringUNID=StringUNID+1

		HOTSPOT 		0,	lrah+UpperEndX2,(rnu)*th-lst, StringUNID : StringUNID=StringUNID+1
		HOTSPOT 		flw,lrah+UpperEndX2,(rnu)*th-lst, StringUNID : StringUNID=StringUNID+1
	ENDIF

!!!!!!!!!!!!!!!!!!!!!!!!!! *** RAILING in 3D *** !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!



IF rail_m = RAILPOS_RIGHT or rail_m = RAILPOS_BOTH THEN
	if bSameRails then
		leftRailType_m = rightRailType_m
	endif

	RailRZZ=-OverhangRBottom*tan(ang)+temp_npsRY+temp_btaRY
	RailRXX=-OverhangRBottom+temp_npsRX+temp_btaRX

	rprPostBase = (rightRailType_m = 7 or rightRailType_m = 8 or rightRailType_m = 9 or rightRailType_m = 11)

	RailUNID=1000

	ADDZ th+pdvert
		!!! RAIL OFFSET
		HOTSPOT flw-st/2,		RailRXX, RailRZZ, RailUNID, roffr, 1+128 : RailUNID=RailUNID+1
		HOTSPOT flw-st/2-1,		RailRXX, RailRZZ, RailUNID, roffr, 3 : RailUNID=RailUNID+1
		HOTSPOT flw-st/2+roffr,	RailRXX, RailRZZ, RailUNID, roffr, 2 : RailUNID=RailUNID+1

		HOTSPOT flw-st/2,		lrah-td+OverhangRTop, (rnu-2)*th+OverhangRTop*tan(ang), RailUNID, roffr, 1+128 : RailUNID=RailUNID+1
		HOTSPOT flw-st/2-1,		lrah-td+OverhangRTop, (rnu-2)*th+OverhangRTop*tan(ang), RailUNID, roffr, 3 : RailUNID=RailUNID+1
		HOTSPOT flw-st/2+roffr,	lrah-td+OverhangRTop, (rnu-2)*th+OverhangRTop*tan(ang), RailUNID, roffr, 2 : RailUNID=RailUNID+1
	DEL 1

	IF romr_m = RAILORIENT_VERTICAL THEN
			ADDZ th+pdvert

			RailUNID=1050

			!!! Dist. from Top of String
			HOTSPOT flw-st/2+roffr, RailRXX,	RailRZZ,		RailUNID, dsr, 1+128 : RailUNID=RailUNID+1
			HOTSPOT flw-st/2+roffr, RailRXX,	RailRZZ-1,	RailUNID, dsr, 3 : RailUNID=RailUNID+1
			HOTSPOT flw-st/2+roffr, RailRXX,	RailRZZ+dsr,	RailUNID, dsr, 2 : RailUNID=RailUNID+1

			HOTSPOT flw-st/2+roffr, lrah-td+OverhangRTop,	(rnu-2)*th+OverhangRTop*tan(ang),		RailUNID, dsr, 1+128 : RailUNID=RailUNID+1
			HOTSPOT flw-st/2+roffr, lrah-td+OverhangRTop,	(rnu-2)*th-1+OverhangRTop*tan(ang),		RailUNID, dsr, 3 : RailUNID=RailUNID+1
			HOTSPOT flw-st/2+roffr, lrah-td+OverhangRTop,	(rnu-2)*th+dsr+OverhangRTop*tan(ang),	RailUNID, dsr, 2 : RailUNID=RailUNID+1

			!!! Height of Rail
			HOTSPOT flw-st/2+roffr, RailRXX,	RailRZZ+dsr,		RailUNID, hrr, 1+128 : RailUNID=RailUNID+1
			HOTSPOT flw-st/2+roffr, RailRXX,	RailRZZ+dsr-1,	RailUNID, hrr, 3 : RailUNID=RailUNID+1
			HOTSPOT flw-st/2+roffr, RailRXX,	RailRZZ+dsr+hrr,	RailUNID, hrr, 2 : RailUNID=RailUNID+1

			HOTSPOT flw-st/2+roffr, lrah-td+OverhangRTop,	(rnu-2)*th+OverhangRTop*tan(ang)+dsr,		RailUNID, hrr, 1+128 : RailUNID=RailUNID+1
			HOTSPOT flw-st/2+roffr, lrah-td+OverhangRTop,	(rnu-2)*th+OverhangRTop*tan(ang)+dsr-1,	RailUNID, hrr, 3 : RailUNID=RailUNID+1
			HOTSPOT flw-st/2+roffr, lrah-td+OverhangRTop,	(rnu-2)*th+OverhangRTop*tan(ang)+dsr+hrr,	RailUNID, hrr, 2 : RailUNID=RailUNID+1

			IF rprPostBase=1 THEN

				RailUNID=1100

				!!!POST BASE OVERHANG
				HOTSPOT flw-st/2+roffr, RailRXX,RailRZZ,RailUNID,gs_PostBaseOverhangR,1 : RailUNID=RailUNID+1
				HOTSPOT flw-st/2+roffr, RailRXX,RailRZZ-gs_PostBaseOverhangR,RailUNID,gs_PostBaseOverhangR,2 : RailUNID=RailUNID+1
				HOTSPOT flw-st/2+roffr, RailRXX,RailRZZ+1,RailUNID,gs_PostBaseOverhangR,3 : RailUNID=RailUNID+1

				HOTSPOT flw-st/2+roffr, lrah-td+OverhangRTop,(rnu-2)*th+OverhangRTop*tan(ang),RailUNID,gs_PostBaseOverhangR,1 : RailUNID=RailUNID+1
				HOTSPOT flw-st/2+roffr, lrah-td+OverhangRTop,(rnu-2)*th+OverhangRTop*tan(ang)-gs_PostBaseOverhangR,RailUNID,gs_PostBaseOverhangR,2 : RailUNID=RailUNID+1
				HOTSPOT flw-st/2+roffr, lrah-td+OverhangRTop,(rnu-2)*th+OverhangRTop*tan(ang)+1,RailUNID,gs_PostBaseOverhangR,3 : RailUNID=RailUNID+1
			ENDIF

			IF rightRailType_m = 9 THEN

				RailUNID=1150

				HOTSPOT flw-st/2+roffr, RailRXX,	hrr+RailRZZ+dsr-HandrailHgtR,		RailUNID, sbhr, 1+128 : RailUNID=RailUNID+1
				HOTSPOT flw-st/2+roffr, RailRXX,	hrr+RailRZZ+dsr-HandrailHgtR+1,		RailUNID, sbhr, 3 : RailUNID=RailUNID+1
				HOTSPOT flw-st/2+roffr, RailRXX,	hrr+RailRZZ+dsr-HandrailHgtR-sbhr,	RailUNID, sbhr, 2 : RailUNID=RailUNID+1

				HOTSPOT flw-st/2+roffr, lrah-td+OverhangRTop,	hrr+(rnu-2)*th+OverhangRTop*tan(ang)+dsr-HandrailHgtR,		RailUNID, sbhr, 1+128 : RailUNID=RailUNID+1
				HOTSPOT flw-st/2+roffr, lrah-td+OverhangRTop,	hrr+(rnu-2)*th+OverhangRTop*tan(ang)+dsr-HandrailHgtR+1,	RailUNID, sbhr, 3 : RailUNID=RailUNID+1
				HOTSPOT flw-st/2+roffr, lrah-td+OverhangRTop,	hrr+(rnu-2)*th+OverhangRTop*tan(ang)+dsr-HandrailHgtR-sbhr,	RailUNID, sbhr, 2 : RailUNID=RailUNID+1
			ENDIF

			DEL 1

			!!! Rail Overhang at Bottom
			IF np_m = POSTPOS_NONE or np_m = POSTPOS_LEFT THEN

				RailUNID=1200

				HOTSPOT flw-st/2+roffr,	0,	th+pdvert+dsr,	RailUNID, temp_OverhangRBottom, 1+128,OverhangRBottom : RailUNID=RailUNID+1
				HOTSPOT flw-st/2+roffr,	1,	th+pdvert+dsr+tan(ang),	RailUNID, temp_OverhangRBottom, 3,OverhangRBottom : RailUNID=RailUNID+1
				HOTSPOT flw-st/2+roffr,-OverhangRBottom,	th+pdvert+dsr-OverhangRBottom*tan(ang),	RailUNID, temp_OverhangRBottom, 2,OverhangRBottom : RailUNID=RailUNID+1
			ENDIF

			RailUNID=1250

			!!! Rail Overhang at Top
			HOTSPOT flw-st/2+roffr,	lrah-td,				th+pdvert+(rnu-2)*th+dsr,		RailUNID, temp_OverhangRTop, 1+128,OverhangRTop : RailUNID=RailUNID+1
			HOTSPOT flw-st/2+roffr,	lrah-td-1,				th+pdvert+(rnu-2)*th+dsr-tan(ang),		RailUNID, temp_OverhangRTop, 3,OverhangRTop : RailUNID=RailUNID+1
			HOTSPOT flw-st/2+roffr,	lrah-td+OverhangRTop,	th+pdvert+(rnu-2)*th+dsr+OverhangRTop*tan(ang),	RailUNID, temp_OverhangRTop, 2,OverhangRTop : RailUNID=RailUNID+1

	ELSE

		ADDz th+pdvert
		ROTx atn(th/td)

			RailUNID=1300

			!! Distance from Top of Tread

			HOTSPOT flw-st/2+roffr,	-OverhangRBottom/cos(ang),	0,	RailUNID, dsr, 1+128 : RailUNID=RailUNID+1
			HOTSPOT flw-st/2+roffr,	-OverhangRBottom/cos(ang),	dsr,RailUNID, dsr, 2 : RailUNID=RailUNID+1
			HOTSPOT flw-st/2+roffr,	-OverhangRBottom/cos(ang),	-1,	RailUNID, dsr, 3 : RailUNID=RailUNID+1

			HOTSPOT flw-st/2+roffr,(lrah-td)*th/(td*sin(atn(th/td)))+OverhangRTop/cos(ang),0,	RailUNID, dsr, 1+128 : RailUNID=RailUNID+1
			HOTSPOT flw-st/2+roffr,(lrah-td)*th/(td*sin(atn(th/td)))+OverhangRTop/cos(ang),dsr,	RailUNID, dsr, 2 : RailUNID=RailUNID+1
			HOTSPOT flw-st/2+roffr,(lrah-td)*th/(td*sin(atn(th/td)))+OverhangRTop/cos(ang),-1,	RailUNID, dsr, 3 : RailUNID=RailUNID+1

			!! Height of Rail

			HOTSPOT flw-st/2+roffr,-OverhangRBottom/cos(ang),dsr,	RailUNID, hrr, 1+128 : RailUNID=RailUNID+1
			HOTSPOT flw-st/2+roffr,-OverhangRBottom/cos(ang),dsr+hrr,	RailUNID, hrr, 2 : RailUNID=RailUNID+1
			HOTSPOT flw-st/2+roffr,-OverhangRBottom/cos(ang),dsr-1,	RailUNID, hrr, 3 : RailUNID=RailUNID+1

			HOTSPOT flw-st/2+roffr,(lrah-td)*th/(td*sin(atn(th/td)))+OverhangRTop/cos(ang),dsr,	RailUNID, hrr, 1+128 : RailUNID=RailUNID+1
			HOTSPOT flw-st/2+roffr,(lrah-td)*th/(td*sin(atn(th/td)))+OverhangRTop/cos(ang),dsr+hrr,	RailUNID, hrr, 2 : RailUNID=RailUNID+1
			HOTSPOT flw-st/2+roffr,(lrah-td)*th/(td*sin(atn(th/td)))+OverhangRTop/cos(ang),dsr-1,	RailUNID, hrr, 3 : RailUNID=RailUNID+1

			!!! Rail Overhang at Bottom

			HOTSPOT flw-st/2+roffr,	0,	dsr,	RailUNID, temp_OverhangRBottom, 1+128,OverhangRBottom  : RailUNID=RailUNID+1
			HOTSPOT flw-st/2+roffr, 1	,dsr,RailUNID, temp_OverhangRBottom, 3,OverhangRBottom : RailUNID=RailUNID+1
			HOTSPOT flw-st/2+roffr,-temp_OverhangRBottom,dsr,RailUNID, temp_OverhangRBottom, 2,OverhangRBottom : RailUNID=RailUNID+1

			!!! Rail Overhang at Top
			HOTSPOT flw-st/2+roffr,	(lrah-td)*th/(td*sin(atn(th/td))),	dsr,	RailUNID, temp_OverhangRTop, 1+128,OverhangRTop  : RailUNID=RailUNID+1
			HOTSPOT flw-st/2+roffr, (lrah-td)*th/(td*sin(atn(th/td)))-1	,dsr,RailUNID, temp_OverhangRTop, 3,OverhangRTop : RailUNID=RailUNID+1
			HOTSPOT flw-st/2+roffr, (lrah-td)*th/(td*sin(atn(th/td)))+temp_OverhangRTop,dsr,RailUNID, temp_OverhangRTop, 2,OverhangRTop : RailUNID=RailUNID+1

			IF rprPostBase=1 THEN

				RailUNID=1350

				!!!POST BASE OVERHANG
				HOTSPOT flw-st/2+roffr, -OverhangRBottom/cos(ang), 0,RailUNID,gs_PostBaseOverhangR,1 : RailUNID=RailUNID+1
				HOTSPOT flw-st/2+roffr, -OverhangRBottom/cos(ang),-gs_PostBaseOverhangR,RailUNID,gs_PostBaseOverhangR,2 : RailUNID=RailUNID+1
				HOTSPOT flw-st/2+roffr, -OverhangRBottom/cos(ang), 1,RailUNID,gs_PostBaseOverhangR,3 : RailUNID=RailUNID+1

				HOTSPOT flw-st/2+roffr,(lrah-td)*th/(td*sin(atn(th/td)))+OverhangRTop/cos(ang),0,RailUNID,gs_PostBaseOverhangR,1 : RailUNID=RailUNID+1
				HOTSPOT flw-st/2+roffr,(lrah-td)*th/(td*sin(atn(th/td)))+OverhangRTop/cos(ang),-gs_PostBaseOverhangR,RailUNID,gs_PostBaseOverhangR,2 : RailUNID=RailUNID+1
				HOTSPOT flw-st/2+roffr,(lrah-td)*th/(td*sin(atn(th/td)))+OverhangRTop/cos(ang),1,RailUNID,gs_PostBaseOverhangR,3 : RailUNID=RailUNID+1
			ENDIF

			IF rightRailType_m = 9 THEN

				RailUNID=1400

				HOTSPOT flw-st/2+roffr,-OverhangRBottom/cos(ang),hrr+dsr-HandrailHgtR/cos(ang),	RailUNID,sbhPerpR,1+128,sbhr : RailUNID=RailUNID+1
				HOTSPOT flw-st/2+roffr,-OverhangRBottom/cos(ang),hrr+dsr-HandrailHgtR/cos(ang)-sbhr,	RailUNID,sbhPerpR,2,sbhr : RailUNID=RailUNID+1
				HOTSPOT flw-st/2+roffr,-OverhangRBottom/cos(ang),hrr+dsr-HandrailHgtR/cos(ang)+1,	RailUNID,sbhPerpR,3,sbhr : RailUNID=RailUNID+1

				HOTSPOT flw-st/2+roffr,(lrah-td)*th/(td*sin(atn(th/td)))+OverhangRTop/cos(ang),hrr+dsr-HandrailHgtR/cos(ang),	RailUNID,sbhPerpR,1+128,sbhr : RailUNID=RailUNID+1
				HOTSPOT flw-st/2+roffr,(lrah-td)*th/(td*sin(atn(th/td)))+OverhangRTop/cos(ang),hrr+dsr-HandrailHgtR/cos(ang)-sbhr,	RailUNID,sbhPerpR,2,sbhr : RailUNID=RailUNID+1
				HOTSPOT flw-st/2+roffr,(lrah-td)*th/(td*sin(atn(th/td)))+OverhangRTop/cos(ang),hrr+dsr-HandrailHgtR/cos(ang)+1,	RailUNID,sbhPerpR,3,sbhr : RailUNID=RailUNID+1
			ENDIF

		DEL 2
	ENDIF
ENDIF

IF rail_m = RAILPOS_LEFT or rail_m = RAILPOS_BOTH THEN
	rplPostBase = (leftRailType_m = 7 or leftRailType_m = 8 or leftRailType_m = 9 or leftRailType_m = 11)

	IF bSameRails THEN		!!! Same as Right

	RailRZZ=-OverhangRBottom*tan(ang)+temp_npsRY+temp_btaRY
	RailRXX=-OverhangRBottom+temp_npsRX+temp_btaRX

	ADDZ th+pdvert

		RailUNID=1450

		!!! RAIL OFFSET
		HOTSPOT st/2,		RailRXX, RailRZZ, RailUNID, roffr, 1+128 : RailUNID=RailUNID+1
		HOTSPOT st/2+1,	RailRXX, RailRZZ, RailUNID, roffr, 3 : RailUNID=RailUNID+1
		HOTSPOT st/2-roffr,RailRXX, RailRZZ, RailUNID, roffr, 2 : RailUNID=RailUNID+1

		HOTSPOT st/2,		lrah-td+OverhangRTop, (rnu-2)*th+OverhangRTop*tan(ang), RailUNID, roffr, 1+128 : RailUNID=RailUNID+1
		HOTSPOT st/2+1,	lrah-td+OverhangRTop, (rnu-2)*th+OverhangRTop*tan(ang), RailUNID, roffr, 3 : RailUNID=RailUNID+1
		HOTSPOT st/2-roffr,lrah-td+OverhangRTop, (rnu-2)*th+OverhangRTop*tan(ang), RailUNID, roffr, 2 : RailUNID=RailUNID+1
	DEL 1

	IF roml_m = RAILORIENT_VERTICAL THEN
			ADDZ th+pdvert

			RailUNID=1500

			!!! Dist. from Top of String
			HOTSPOT st/2-roffr, RailRXX,	RailRZZ,		RailUNID, dsr, 1+128 : RailUNID=RailUNID+1
			HOTSPOT st/2-roffr, RailRXX,	RailRZZ-1,	RailUNID, dsr, 3 : RailUNID=RailUNID+1
			HOTSPOT st/2-roffr, RailRXX,	RailRZZ+dsr,	RailUNID, dsr, 2 : RailUNID=RailUNID+1

			HOTSPOT st/2-roffr, lrah-td+OverhangRTop,	(rnu-2)*th+OverhangRTop*tan(ang),		RailUNID, dsr, 1+128 : RailUNID=RailUNID+1
			HOTSPOT st/2-roffr, lrah-td+OverhangRTop,	(rnu-2)*th-1+OverhangRTop*tan(ang),		RailUNID, dsr, 3 : RailUNID=RailUNID+1
			HOTSPOT st/2-roffr, lrah-td+OverhangRTop,	(rnu-2)*th+dsr+OverhangRTop*tan(ang),	RailUNID, dsr, 2 : RailUNID=RailUNID+1

			!!! Height of Rail
			HOTSPOT st/2-roffr, RailRXX,	RailRZZ+dsr,		RailUNID, hrr, 1+128 : RailUNID=RailUNID+1
			HOTSPOT st/2-roffr, RailRXX,	RailRZZ+dsr-1,	RailUNID, hrr, 3 : RailUNID=RailUNID+1
			HOTSPOT st/2-roffr, RailRXX,	RailRZZ+dsr+hrr,	RailUNID, hrr, 2 : RailUNID=RailUNID+1

			HOTSPOT st/2-roffr, lrah-td+OverhangRTop,	(rnu-2)*th+OverhangRTop*tan(ang)+dsr,		RailUNID, hrr, 1+128 : RailUNID=RailUNID+1
			HOTSPOT st/2-roffr, lrah-td+OverhangRTop,	(rnu-2)*th+OverhangRTop*tan(ang)+dsr-1,	RailUNID, hrr, 3 : RailUNID=RailUNID+1
			HOTSPOT st/2-roffr, lrah-td+OverhangRTop,	(rnu-2)*th+OverhangRTop*tan(ang)+dsr+hrr,	RailUNID, hrr, 2 : RailUNID=RailUNID+1

			IF rplPostBase=1 THEN

				RailUNID=1550

				!!!POST BASE OVERHANG
				HOTSPOT st/2-roffr, RailRXX,RailRZZ,RailUNID,gs_PostBaseOverhangR,1 : RailUNID=RailUNID+1
				HOTSPOT st/2-roffr, RailRXX,RailRZZ-gs_PostBaseOverhangR,RailUNID,gs_PostBaseOverhangR,2 : RailUNID=RailUNID+1
				HOTSPOT st/2-roffr, RailRXX,RailRZZ+1,RailUNID,gs_PostBaseOverhangR,3 : RailUNID=RailUNID+1

				HOTSPOT st/2-roffr, lrah-td+OverhangRTop,(rnu-2)*th+OverhangRTop*tan(ang),RailUNID,gs_PostBaseOverhangR,1 : RailUNID=RailUNID+1
				HOTSPOT st/2-roffr, lrah-td+OverhangRTop,(rnu-2)*th+OverhangRTop*tan(ang)-gs_PostBaseOverhangR,RailUNID,gs_PostBaseOverhangR,2 : RailUNID=RailUNID+1
				HOTSPOT st/2-roffr, lrah-td+OverhangRTop,(rnu-2)*th+OverhangRTop*tan(ang)+1,RailUNID,gs_PostBaseOverhangR,3 : RailUNID=RailUNID+1
			ENDIF

			IF leftRailType_m = 9 THEN

				RailUNID=1600

				HOTSPOT st/2-roffr, RailRXX,	hrr+RailRZZ+dsr-HandrailHgtR,		RailUNID, sbhr, 1+128 : RailUNID=RailUNID+1
				HOTSPOT st/2-roffr, RailRXX,	hrr+RailRZZ+dsr-HandrailHgtR+1,		RailUNID, sbhr, 3 : RailUNID=RailUNID+1
				HOTSPOT st/2-roffr, RailRXX,	hrr+RailRZZ+dsr-HandrailHgtR-sbhr,	RailUNID, sbhr, 2 : RailUNID=RailUNID+1

				HOTSPOT st/2-roffr, lrah-td+OverhangRTop,	hrr+(rnu-2)*th+OverhangRTop*tan(ang)+dsr-HandrailHgtR,		RailUNID, sbhr, 1+128 : RailUNID=RailUNID+1
				HOTSPOT st/2-roffr, lrah-td+OverhangRTop,	hrr+(rnu-2)*th+OverhangRTop*tan(ang)+dsr-HandrailHgtR+1,	RailUNID, sbhr, 3 : RailUNID=RailUNID+1
				HOTSPOT st/2-roffr, lrah-td+OverhangRTop,	hrr+(rnu-2)*th+OverhangRTop*tan(ang)+dsr-HandrailHgtR-sbhr,	RailUNID, sbhr, 2 : RailUNID=RailUNID+1
			ENDIF

			DEL 1

			!!! Rail Overhang at Bottom
			IF np_m = POSTPOS_NONE or np_m = POSTPOS_LEFT THEN

				RailUNID=1650

				HOTSPOT st/2-roffr,	0,	th+pdvert+dsr,	RailUNID, temp_OverhangRBottom, 1+128,OverhangRBottom : RailUNID=RailUNID+1
				HOTSPOT st/2-roffr,	1,	th+pdvert+dsr+tan(ang),	RailUNID, temp_OverhangRBottom, 3,OverhangRBottom : RailUNID=RailUNID+1
				HOTSPOT st/2-roffr,-OverhangRBottom,	th+pdvert+dsr-OverhangRBottom*tan(ang),	RailUNID, temp_OverhangRBottom, 2,OverhangRBottom : RailUNID=RailUNID+1
			ENDIF

			RailUNID=1700

			!!! Rail Overhang at Top
			HOTSPOT st/2-roffr,	lrah-td,				th+pdvert+(rnu-2)*th+dsr,		RailUNID, temp_OverhangRTop, 1+128,OverhangRTop : RailUNID=RailUNID+1
			HOTSPOT st/2-roffr,	lrah-td-1,				th+pdvert+(rnu-2)*th+dsr-tan(ang),		RailUNID, temp_OverhangRTop, 3,OverhangRTop : RailUNID=RailUNID+1
			HOTSPOT st/2-roffr,	lrah-td+OverhangRTop,	th+pdvert+(rnu-2)*th+dsr+OverhangRTop*tan(ang),	RailUNID, temp_OverhangRTop, 2,OverhangRTop : RailUNID=RailUNID+1

	ELSE
		ADDz th+pdvert
		ROTx atn(th/td)

			RailUNID=1750

			!! Distance from Top of Tread

			HOTSPOT st/2-roffr,	-OverhangRBottom/cos(ang),	0,	RailUNID, dsr, 1+128 : RailUNID=RailUNID+1
			HOTSPOT st/2-roffr,	-OverhangRBottom/cos(ang),	dsr,RailUNID, dsr, 2 : RailUNID=RailUNID+1
			HOTSPOT st/2-roffr,	-OverhangRBottom/cos(ang),	-1,	RailUNID, dsr, 3 : RailUNID=RailUNID+1

			HOTSPOT st/2-roffr,(lrah-td)*th/(td*sin(atn(th/td)))+OverhangRTop/cos(ang),0,	RailUNID, dsr, 1+128 : RailUNID=RailUNID+1
			HOTSPOT st/2-roffr,(lrah-td)*th/(td*sin(atn(th/td)))+OverhangRTop/cos(ang),dsr,	RailUNID, dsr, 2 : RailUNID=RailUNID+1
			HOTSPOT st/2-roffr,(lrah-td)*th/(td*sin(atn(th/td)))+OverhangRTop/cos(ang),-1,	RailUNID, dsr, 3 : RailUNID=RailUNID+1

			!! Height of Rail

			HOTSPOT st/2-roffr,-OverhangRBottom/cos(ang),dsr,	RailUNID, hrr, 1+128 : RailUNID=RailUNID+1
			HOTSPOT st/2-roffr,-OverhangRBottom/cos(ang),dsr+hrr,	RailUNID, hrr, 2 : RailUNID=RailUNID+1
			HOTSPOT st/2-roffr,-OverhangRBottom/cos(ang),dsr-1,	RailUNID, hrr, 3 : RailUNID=RailUNID+1

			HOTSPOT st/2-roffr,(lrah-td)*th/(td*sin(atn(th/td)))+OverhangRTop/cos(ang),dsr,	RailUNID, hrr, 1+128 : RailUNID=RailUNID+1
			HOTSPOT st/2-roffr,(lrah-td)*th/(td*sin(atn(th/td)))+OverhangRTop/cos(ang),dsr+hrr,	RailUNID, hrr, 2 : RailUNID=RailUNID+1
			HOTSPOT st/2-roffr,(lrah-td)*th/(td*sin(atn(th/td)))+OverhangRTop/cos(ang),dsr-1,	RailUNID, hrr, 3 : RailUNID=RailUNID+1

			!!! Rail Overhang at Bottom

			HOTSPOT st/2-roffr,	0,	dsr,	RailUNID, temp_OverhangRBottom, 1+128,OverhangRBottom  : RailUNID=RailUNID+1
			HOTSPOT st/2-roffr, 1	,dsr,RailUNID, temp_OverhangRBottom, 3,OverhangRBottom : RailUNID=RailUNID+1
			HOTSPOT st/2-roffr,-temp_OverhangRBottom,dsr,RailUNID, temp_OverhangRBottom, 2,OverhangRBottom : RailUNID=RailUNID+1

			!!! Rail Overhang at Top
			HOTSPOT st/2-roffr,(lrah-td)*th/(td*sin(atn(th/td))),	dsr,	RailUNID, temp_OverhangRTop, 1+128,OverhangRTop  : RailUNID=RailUNID+1
			HOTSPOT st/2-roffr,(lrah-td)*th/(td*sin(atn(th/td)))-1	,dsr,RailUNID, temp_OverhangRTop, 3,OverhangRTop : RailUNID=RailUNID+1
			HOTSPOT st/2-roffr,(lrah-td)*th/(td*sin(atn(th/td)))+temp_OverhangRTop,dsr,RailUNID, temp_OverhangRTop, 2,OverhangRTop : RailUNID=RailUNID+1

			IF rplPostBase=1 THEN

				RailUNID=1800

				!!!POST BASE OVERHANG
				HOTSPOT st/2-roffr, -OverhangRBottom/cos(ang), 0,RailUNID,gs_PostBaseOverhangR,1 : RailUNID=RailUNID+1
				HOTSPOT st/2-roffr, -OverhangRBottom/cos(ang),-gs_PostBaseOverhangR,RailUNID,gs_PostBaseOverhangR,2 : RailUNID=RailUNID+1
				HOTSPOT st/2-roffr, -OverhangRBottom/cos(ang), 1,RailUNID,gs_PostBaseOverhangR,3 : RailUNID=RailUNID+1

				HOTSPOT st/2-roffr,(lrah-td)*th/(td*sin(atn(th/td)))+OverhangRTop/cos(ang),0,RailUNID,gs_PostBaseOverhangR,1 : RailUNID=RailUNID+1
				HOTSPOT st/2-roffr,(lrah-td)*th/(td*sin(atn(th/td)))+OverhangRTop/cos(ang),-gs_PostBaseOverhangR,RailUNID,gs_PostBaseOverhangR,2 : RailUNID=RailUNID+1
				HOTSPOT st/2-roffr,(lrah-td)*th/(td*sin(atn(th/td)))+OverhangRTop/cos(ang),1,RailUNID,gs_PostBaseOverhangR,3 : RailUNID=RailUNID+1
			ENDIF

			IF leftRailType_m = 9 THEN

				RailUNID=1850

				HOTSPOT st/2-roffr,-OverhangRBottom/cos(ang),hrr+dsr-HandrailHgtR/cos(ang),	RailUNID,sbhPerpR,1+128,sbhr : RailUNID=RailUNID+1
				HOTSPOT st/2-roffr,-OverhangRBottom/cos(ang),hrr+dsr-HandrailHgtR/cos(ang)-sbhr,	RailUNID,sbhPerpR,2,sbhr : RailUNID=RailUNID+1
				HOTSPOT st/2-roffr,-OverhangRBottom/cos(ang),hrr+dsr-HandrailHgtR/cos(ang)+1,	RailUNID,sbhPerpR,3,sbhr : RailUNID=RailUNID+1

				HOTSPOT st/2-roffr,(lrah-td)*th/(td*sin(atn(th/td)))+OverhangRTop/cos(ang),hrr+dsr-HandrailHgtR/cos(ang),	RailUNID,sbhPerpR,1+128,sbhr : RailUNID=RailUNID+1
				HOTSPOT st/2-roffr,(lrah-td)*th/(td*sin(atn(th/td)))+OverhangRTop/cos(ang),hrr+dsr-HandrailHgtR/cos(ang)-sbhr,	RailUNID,sbhPerpR,2,sbhr : RailUNID=RailUNID+1
				HOTSPOT st/2-roffr,(lrah-td)*th/(td*sin(atn(th/td)))+OverhangRTop/cos(ang),hrr+dsr-HandrailHgtR/cos(ang)+1,	RailUNID,sbhPerpR,3,sbhr : RailUNID=RailUNID+1
			ENDIF
		DEL 2
	ENDIF

	ELSE		!!! <> Same as Right

		RailLZZ=-OverhangLBottom*tan(ang)+temp_npsLY+temp_btaLY
		RailLXX=-OverhangLBottom+temp_npsLX+temp_btaLX

		ADDZ th+pdvert

			RailUNID=1900

			!!! RAIL OFFSET
			HOTSPOT st/2,		RailLXX, RailLZZ, RailUNID, roffl, 1+128 : RailUNID=RailUNID+1
			HOTSPOT st/2+1,	RailLXX, RailLZZ, RailUNID, roffl, 3 : RailUNID=RailUNID+1
			HOTSPOT st/2-roffl,RailLXX, RailLZZ, RailUNID, roffl, 2 : RailUNID=RailUNID+1

			HOTSPOT st/2,		lrah-td+OverhangLTop, (rnu-2)*th+OverhangLTop*tan(ang), RailUNID, roffl, 1+128 : RailUNID=RailUNID+1
			HOTSPOT st/2+1,	lrah-td+OverhangLTop, (rnu-2)*th+OverhangLTop*tan(ang), RailUNID, roffl, 3 : RailUNID=RailUNID+1
			HOTSPOT st/2-roffl,lrah-td+OverhangLTop, (rnu-2)*th+OverhangLTop*tan(ang), RailUNID, roffl, 2 : RailUNID=RailUNID+1
		DEL 1

		IF roml_m = RAILORIENT_VERTICAL THEN
			ADDZ th+pdvert

			RailUNID=1950

			!!! Distance from Top of String
			HOTSPOT st/2-roffl, RailLXX,	RailLZZ,		RailUNID, dsl, 1+128 : RailUNID=RailUNID+1
			HOTSPOT st/2-roffl, RailLXX,	RailLZZ-1,	RailUNID, dsl, 3 : RailUNID=RailUNID+1
			HOTSPOT st/2-roffl, RailLXX,	RailLZZ+dsl,	RailUNID, dsl, 2 : RailUNID=RailUNID+1

			HOTSPOT st/2-roffl, lrah-td+OverhangLTop,	(rnu-2)*th+OverhangLTop*tan(ang),		RailUNID, dsl, 1+128 : RailUNID=RailUNID+1
			HOTSPOT st/2-roffl, lrah-td+OverhangLTop,	(rnu-2)*th-1+OverhangLTop*tan(ang),		RailUNID, dsl, 3 : RailUNID=RailUNID+1
			HOTSPOT st/2-roffl, lrah-td+OverhangLTop,	(rnu-2)*th+dsl+OverhangLTop*tan(ang),	RailUNID, dsl, 2 : RailUNID=RailUNID+1

			!!! Height of Rail
			HOTSPOT st/2-roffl, RailLXX,	RailLZZ+dsl,		RailUNID, hrl, 1+128 : RailUNID=RailUNID+1
			HOTSPOT st/2-roffl, RailLXX,	RailLZZ+dsl-1,	RailUNID, hrl, 3 : RailUNID=RailUNID+1
			HOTSPOT st/2-roffl, RailLXX,	RailLZZ+dsl+hrl,	RailUNID, hrl, 2 : RailUNID=RailUNID+1

			HOTSPOT st/2-roffl, lrah-td+OverhangLTop,	(rnu-2)*th+OverhangLTop*tan(ang)+dsl,		RailUNID, hrl, 1+128 : RailUNID=RailUNID+1
			HOTSPOT st/2-roffl, lrah-td+OverhangLTop,	(rnu-2)*th+OverhangLTop*tan(ang)+dsl-1,	RailUNID, hrl, 3 : RailUNID=RailUNID+1
			HOTSPOT st/2-roffl, lrah-td+OverhangLTop,	(rnu-2)*th+OverhangLTop*tan(ang)+dsl+hrl,	RailUNID, hrl, 2 : RailUNID=RailUNID+1

			IF rplPostBase=1 THEN

				RailUNID=2000

				!!!POST BASE OVERHANG
				HOTSPOT st/2-roffl, RailLXX, RailLZZ,RailUNID,gs_PostBaseOverhangL,1 : RailUNID=RailUNID+1
				HOTSPOT st/2-roffl, RailLXX, RailLZZ-gs_PostBaseOverhangL,RailUNID,gs_PostBaseOverhangL,2 : RailUNID=RailUNID+1
				HOTSPOT st/2-roffl, RailLXX, RailLZZ+1,RailUNID,gs_PostBaseOverhangL,3 : RailUNID=RailUNID+1

				HOTSPOT st/2-roffl, lrah-td+OverhangLTop,(rnu-2)*th+OverhangLTop*tan(ang),RailUNID,gs_PostBaseOverhangL,1 : RailUNID=RailUNID+1
				HOTSPOT st/2-roffl, lrah-td+OverhangLTop,(rnu-2)*th+OverhangLTop*tan(ang)-gs_PostBaseOverhangL,RailUNID,gs_PostBaseOverhangL,2 : RailUNID=RailUNID+1
				HOTSPOT st/2-roffl, lrah-td+OverhangLTop,(rnu-2)*th+OverhangLTop*tan(ang)+1,RailUNID,gs_PostBaseOverhangL,3 : RailUNID=RailUNID+1
			ENDIF

			IF leftRailType_m = 9 THEN

				RailUNID=2050

				HOTSPOT st/2-roffl, RailLXX,	hrl+RailLZZ+dsl-HandrailHgtL,		RailUNID, sbhl, 1+128 : RailUNID=RailUNID+1
				HOTSPOT st/2-roffl, RailLXX,	hrl+RailLZZ+dsl-HandrailHgtL+1,	RailUNID, sbhl, 3 : RailUNID=RailUNID+1
				HOTSPOT st/2-roffl, RailLXX,	hrl+RailLZZ+dsl-HandrailHgtL-sbhl,	RailUNID, sbhl, 2 : RailUNID=RailUNID+1

				HOTSPOT st/2-roffl, lrah-td+OverhangLTop,	hrl+(rnu-2)*th+OverhangLTop*tan(ang)+dsl-HandrailHgtL,		RailUNID, sbhl, 1+128 : RailUNID=RailUNID+1
				HOTSPOT st/2-roffl, lrah-td+OverhangLTop,	hrl+(rnu-2)*th+OverhangLTop*tan(ang)+dsl-HandrailHgtL+1,	RailUNID, sbhl, 3 : RailUNID=RailUNID+1
				HOTSPOT st/2-roffl, lrah-td+OverhangLTop,	hrl+(rnu-2)*th+OverhangLTop*tan(ang)+dsl-HandrailHgtL-sbhl,		RailUNID, sbhl, 2 : RailUNID=RailUNID+1

			ENDIF

			DEL 1

			!!! Rail Overhang at Bottom
			IF np_m = POSTPOS_NONE or np_m = POSTPOS_RIGHT THEN

				RailUNID=2100

				HOTSPOT st/2-roffl,	0,	th+pdvert+dsl,	RailUNID, temp_OverhangLBottom, 1+128,OverhangLBottom : RailUNID=RailUNID+1
				HOTSPOT st/2-roffl,	1,	th+pdvert+dsl+tan(ang),	RailUNID, temp_OverhangLBottom, 3,OverhangLBottom : RailUNID=RailUNID+1
				HOTSPOT st/2-roffl,-OverhangLBottom,	th+pdvert+dsl-OverhangLBottom*tan(ang),	RailUNID, temp_OverhangLBottom, 2,OverhangLBottom : RailUNID=RailUNID+1
			ENDIF

			RailUNID=2150

			!!! Rail Overhang at Top
			HOTSPOT st/2-roffl,	lrah-td,				th+pdvert+(rnu-2)*th+dsl,		RailUNID, temp_OverhangLTop, 1+128,OverhangLTop : RailUNID=RailUNID+1
			HOTSPOT st/2-roffl,	lrah-td-1,				th+pdvert+(rnu-2)*th+dsl-tan(ang),		RailUNID, temp_OverhangLTop, 3,OverhangLTop : RailUNID=RailUNID+1
			HOTSPOT st/2-roffl,	lrah-td+OverhangLTop,	th+pdvert+(rnu-2)*th+dsl+OverhangLTop*tan(ang),	RailUNID, temp_OverhangLTop, 2,OverhangLTop : RailUNID=RailUNID+1

		ELSE
			ADDz th+pdvert
			ROTx atn(th/td)

				RailUNID=2200

				!! Distance from Top of Tread

				HOTSPOT st/2-roffl,-OverhangLBottom/cos(ang),	0,	RailUNID, dsl, 1+128 : RailUNID=RailUNID+1
				HOTSPOT st/2-roffl,-OverhangLBottom/cos(ang),	dsl,RailUNID, dsl, 2 : RailUNID=RailUNID+1
				HOTSPOT st/2-roffl,-OverhangLBottom/cos(ang),	-1,	RailUNID, dsl, 3 : RailUNID=RailUNID+1

				HOTSPOT st/2-roffl,(lrah-td)*th/(td*sin(atn(th/td)))+OverhangLTop/cos(ang),0,	RailUNID, dsl, 1+128 : RailUNID=RailUNID+1
				HOTSPOT st/2-roffl,(lrah-td)*th/(td*sin(atn(th/td)))+OverhangLTop/cos(ang),dsl,	RailUNID, dsl, 2 : RailUNID=RailUNID+1
				HOTSPOT st/2-roffl,(lrah-td)*th/(td*sin(atn(th/td)))+OverhangLTop/cos(ang),-1,	RailUNID, dsl, 3 : RailUNID=RailUNID+1

				!! Height of Rail

				HOTSPOT st/2-roffl,-OverhangLBottom/cos(ang),dsl,	RailUNID, hrl, 1+128 : RailUNID=RailUNID+1
				HOTSPOT st/2-roffl,-OverhangLBottom/cos(ang),dsl+hrl,	RailUNID, hrl, 2 : RailUNID=RailUNID+1
				HOTSPOT st/2-roffl,-OverhangLBottom/cos(ang),dsl-1,	RailUNID, hrl, 3 : RailUNID=RailUNID+1

				HOTSPOT st/2-roffl,(lrah-td)*th/(td*sin(atn(th/td)))+OverhangLTop/cos(ang),dsl,	RailUNID, hrl, 1+128 : RailUNID=RailUNID+1
				HOTSPOT st/2-roffl,(lrah-td)*th/(td*sin(atn(th/td)))+OverhangLTop/cos(ang),dsl+hrl,	RailUNID, hrl, 2 : RailUNID=RailUNID+1
				HOTSPOT st/2-roffl,(lrah-td)*th/(td*sin(atn(th/td)))+OverhangLTop/cos(ang),dsl-1,	RailUNID, hrl, 3 : RailUNID=RailUNID+1

				!!! Rail Overhang at Bottom

				HOTSPOT st/2-roffl,0,	dsl,	RailUNID, temp_OverhangLBottom, 1+128,OverhangLBottom  : RailUNID=RailUNID+1
				HOTSPOT st/2-roffl,1	,dsl,RailUNID, temp_OverhangLBottom, 3,OverhangLBottom : RailUNID=RailUNID+1
				HOTSPOT st/2-roffl,-temp_OverhangLBottom,dsl,RailUNID, temp_OverhangLBottom, 2,OverhangLBottom : RailUNID=RailUNID+1

				!!! Rail Overhang at Top
				HOTSPOT st/2-roffl,(lrah-td)*th/(td*sin(atn(th/td))),	dsl,	RailUNID, temp_OverhangLTop, 1+128,OverhangLTop  : RailUNID=RailUNID+1
				HOTSPOT st/2-roffl,(lrah-td)*th/(td*sin(atn(th/td)))-1	,dsl,RailUNID, temp_OverhangLTop, 3,OverhangLTop : RailUNID=RailUNID+1
				HOTSPOT st/2-roffl,(lrah-td)*th/(td*sin(atn(th/td)))+temp_OverhangLTop,dsl,RailUNID, temp_OverhangLTop, 2,OverhangLTop : RailUNID=RailUNID+1

				IF rplPostBase=1 THEN

					RailUNID=2250

					!!!POST BASE OVERHANG
					HOTSPOT st/2-roffl, -OverhangLBottom/cos(ang), 0,RailUNID,gs_PostBaseOverhangL,1 : RailUNID=RailUNID+1
					HOTSPOT st/2-roffl, -OverhangLBottom/cos(ang),-gs_PostBaseOverhangL,RailUNID,gs_PostBaseOverhangL,2 : RailUNID=RailUNID+1
					HOTSPOT st/2-roffl, -OverhangLBottom/cos(ang), 1,RailUNID,gs_PostBaseOverhangL,3 : RailUNID=RailUNID+1

					HOTSPOT st/2-roffl,(lrah-td)*th/(td*sin(atn(th/td)))+OverhangLTop/cos(ang),0,RailUNID,gs_PostBaseOverhangL,1 : RailUNID=RailUNID+1
					HOTSPOT st/2-roffl,(lrah-td)*th/(td*sin(atn(th/td)))+OverhangLTop/cos(ang),-gs_PostBaseOverhangL,RailUNID,gs_PostBaseOverhangL,2 : RailUNID=RailUNID+1
					HOTSPOT st/2-roffl,(lrah-td)*th/(td*sin(atn(th/td)))+OverhangLTop/cos(ang),1,RailUNID,gs_PostBaseOverhangL,3 : RailUNID=RailUNID+1
				ENDIF

				IF leftRailType_m = 9 THEN
					RailUNID=2300

					HOTSPOT st/2-roffl,-OverhangLBottom/cos(ang),hrl+dsl-HandrailHgtL/cos(ang),	RailUNID,sbhPerpL,1+128,sbhl : RailUNID=RailUNID+1
					HOTSPOT st/2-roffl,-OverhangLBottom/cos(ang),hrl+dsl-HandrailHgtL/cos(ang)-sbhl,	RailUNID,sbhPerpL,2,sbhl : RailUNID=RailUNID+1
					HOTSPOT st/2-roffl,-OverhangLBottom/cos(ang),hrl+dsl-HandrailHgtL/cos(ang)+1,	RailUNID,sbhPerpL,3,sbhl : RailUNID=RailUNID+1

					HOTSPOT st/2-roffl,(lrah-td)*th/(td*sin(atn(th/td)))+OverhangLTop/cos(ang),hrl+dsl-HandrailHgtL/cos(ang),	RailUNID,sbhPerpL,1+128,sbhl : RailUNID=RailUNID+1
					HOTSPOT st/2-roffl,(lrah-td)*th/(td*sin(atn(th/td)))+OverhangLTop/cos(ang),hrl+dsl-HandrailHgtL/cos(ang)-sbhl,	RailUNID,sbhPerpL,2,sbhl : RailUNID=RailUNID+1
					HOTSPOT st/2-roffl,(lrah-td)*th/(td*sin(atn(th/td)))+OverhangLTop/cos(ang),hrl+dsl-HandrailHgtL/cos(ang)+1,	RailUNID,sbhPerpL,3,sbhl : RailUNID=RailUNID+1
				ENDIF
			DEL 2
		ENDIF
	ENDIF
ENDIF



!================================================================================
end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end
!================================================================================

! ==============================================================================
"callRailsForStair":
! ------------------------------------------------------------------------------
!	lraSimple
!	lraComplex
!	additionXComplex
!	additionZComplex
!	hrovL: rail overhang start
!	hrovR: rail overhang end
!	postNumber:   number of posts
!	side: SIDE_LEFT or SIDE_RIGHT
! ==============================================================================
	ani = ang
	additionXComplex = additionXComplex
	additionZComplex = additionZComplex
	gosub "callRails"
return

! ==============================================================================
"callRails":
! ------------------------------------------------------------------------------
!	ani
!	additionXComplex
!	additionZComplex
!	dsComplex
!  ------------------
!	side: SIDE_LEFT or SIDE_RIGHT
!	lraSimple
!	lraComplex
!	hrovL: rail overhang start
!	hrovR: rail overhang end
!	postNumber:   number of posts
! ==============================================================================
	if side = SIDE_LEFT then
		railBarDepth	= bwl
		railBarDiam		= bdl
		railHeight		= hrl
		railBarThk		= fthl
		railBarType		= btypl_m
		railFrameThk	= fthl
		railDist		= dsl
		railType_m		= leftRailType_m
		railPostDiam	= pdl
		railPostWidth	= pwl
		railPostThk		= pthl
		railPostType	= ptl_m
		barNumber		= nbl
		iBalusterStyle	= btl_m
		railFramesWSide	= fswl
		railFramesWTop	= ftwl
		railFramesWBot	= fbwl
		railBarHeight	= bhl
		railBarFillThk	= bthl
		balusterDist	= abdistl
		railFrameMat	= fmatl
		railBaluFillMat	= bmatl
		railPostMat		= pmatl
		balusterNumber	= nbtl
		railFillDist	= fdfl
		railPostBaseType= gs_PostBaseTypeL_m
		railDistFromHr	= sbhl
		railPostBaseOv	= gs_PostBaseOverhangL
		handRailType	= hrtl_m
		handRailWidth	= hrwl
		handRailDiam	= hrdl
		handRailHeight	= hrhl
	else
		railBarDepth	= bwr
		railBarDiam		= bdr
		railHeight		= hrr
		railBarThk		= fthr
		railBarType		= btypr_m
		railFrameThk	= fthr
		railDist		= dsr
		railType_m		= rightRailType_m
		railPostDiam	= pdr
		railPostWidth	= pwr
		railPostThk		= pthr
		railPostType	= ptr_m
		barNumber		= nbr
		iBalusterStyle	= btr_m
		railFramesWSide	= fswr
		railFramesWTop	= ftwr
		railFramesWBot	= fbwr
		railBarHeight	= bhr
		railBarFillThk	= bthr
		balusterDist	= abdistr
		railFrameMat	= fmatr
		railBaluFillMat	= bmatr
		railPostMat		= pmatr
		balusterNumber	= nbtr
		railFillDist	= fdfr
		railPostBaseType= gs_PostBaseTypeR_m
		railDistFromHr	= sbhr
		railPostBaseOv	= gs_PostBaseOverhangR
		handRailType	= hrtr_m
		handRailWidth	= hrwr
		handRailDiam	= hrdr
		handRailHeight	= hrhr
	endif

	call "stairRails_m" parameters	railType_m				= railType_m,
									iStairType				= 2,
									bEnableWired02Rail		= 1,
									bEnableNonVerticalRail	= 1,
									additionXComplex		= additionXComplex,
									additionZComplex		= additionZComplex,
									ptyp_m					= 1,
									ani						= ani,
									ab						= 0,
									rb						= 0,
									rom_m					= rom_m,
									rmm_m					= rmm_m,
									lraSimple				= lraSimple,
									lraComplex				= lraComplex,
									railHeight				= railHeight,
									railDist				= railDist,
									gs_detlevel_3D_m		= gs_detlevel_3D_m,
									gs_cont_pen				= gs_cont_pen,
									res						= res,
									rescs					= rescs,
									gs_shadow				= gs_shadow,
									railFrameThk			= railFrameThk,
									railFramesWSide			= railFramesWSide,
									railFramesWTop			= railFramesWTop,
									railFramesWBot			= railFramesWBot,
									railBarType				= railBarType,
									railBarDepth			= railBarDepth,
									railBarFillThk			= railBarFillThk,
									railBarDiam				= railBarDiam,
									balusterDist			= balusterDist,
									railFrameMat			= railFrameMat,
									railBaluFillMat			= railBaluFillMat,
									barNumber				= barNumber,
									railBarHeight			= railBarHeight,
									railFillDist			= railFillDist,
									handRailType			= handRailType,
									handRailDiam			= handRailDiam,
									handRailWidth			= handRailWidth,
									handRailHeight			= handRailHeight,
									hrovL					= hrovL,
									hrovR					= hrovR,
									iBalusterStyle			= iBalusterStyle,
									railPostDiam			= railPostDiam,
									railPostWidth			= railPostWidth,
									railPostThk				= railPostThk,
									railPostType			= railPostType,
									postNumber				= postNumber,
									railPostMat				= railPostMat,
									iParamInputType			= 1,
									balusterNumber			= balusterNumber,
									railPostBaseType		= railPostBaseType,
									railPostBaseOv			= railPostBaseOv,
									railDistFromHr			= railDistFromHr
return





