

cutplaneHeight	= GLOB_CSTORY_ELEV - GLOB_HSTORY_ELEV + GLOB_CUTPLANES_INFO[1]


PEN gs_cont_pen
FILL gs_fill_type

ADD2 -ladderLength, -gs_ladder_width/2


! ------------------------------------------------------------------------------
! HOTSPOTS
! ------------------------------------------------------------------------------

unID=1
!!!HOTSPOT2 0,0,unID   : unID=unID+1
HOTSPOT2 ladderLength,0,unID   : unID=unID+1


! ------------------------------------------------------------------------------
! STORY SENSITIVE
! ------------------------------------------------------------------------------
bCutted		= 0
lineType	= gs_LineType
cuttingPos	= 0
holeWidth	= 0.05
startOffset = ladderLength - n_st * dX
halfD		= hr_d/2
bDetailedHandrail = 1
if bStorySensitive then
	if cutplaneHeight > ac_toplevel then
		!!No cutting all draw symbol line
	else
		if cutplaneHeight < ac_bottomlevel then		!All draw hidden, No cutting
			bDetailedHandrail = 0
			lineType = gs_LineTypeStUp
		else
			! Cutting
			bDetailedHandrail = 0
			cutHeigth = cutplaneHeight-ac_bottomlevel

			nCutPosY = int(cutHeigth / dY) + 1
			if nCutPosY < 1 then nCutPosY = 1
			if nCutPosY > n_st-1 then nCutPosY = n_st

			cutPosX = nCutPosY * dX + 0.5 * dX  + EPS
			cutAlpha =  atn((b/2-sr_d) / (dX*0.5))
			bCutted	= 1
		endif
	endif
endif

! ------------------------------------------------------------------------------
! Scale Sensitive
! ------------------------------------------------------------------------------
call "2dDetailLevel" parameters gs_detlevel_2D	= gs_detlevel_2D,
							gs_detlevel_2D_m	= gs_detlevel_2D_m,
							enable2dDetLevels	= 2+4+8+16,
		returned_parameters	det2D


! ------------------------------------------------------------------------------
! EDITABLE HOTSPOTS
! ------------------------------------------------------------------------------

hotspot2 0,	 gs_ladder_width/2,unID,gs_ladder_width,1	: unID=unID+1
hotspot2 0,	 gs_ladder_width+1,unID,gs_ladder_width,3	: unID=unID+1
hotspot2 0,	-gs_ladder_width/2,unID,gs_ladder_width,2	: unID=unID+1

hotspot2 ladderLength,	gs_ladder_width/2,	unID,B,1	: unID=unID+1
hotspot2 ladderLength,	gs_ladder_width/2+1,unID,B,3	: unID=unID+1
hotspot2 ladderLength,	gs_ladder_width/2-B,unID,B,2	: unID=unID+1

hotspot2 A,	gs_ladder_width/2,	unID,B,1	: unID=unID+1
hotspot2 A,	gs_ladder_width/2+1,unID,B,3	: unID=unID+1
hotspot2 A,	gs_ladder_width/2-B,unID,B,2	: unID=unID+1

if walkl then
	hotspot2 ladderLength-(n_st-1)*dX,0,unID   : unID=unID+1
endif

hotspot2 ladderLength,						gs_ladder_width/2-B, unID, gs_platform_length, 1+256	: unID=unID+1
hotspot2 ladderLength-1,					gs_ladder_width/2-B, unID, gs_platform_length, 3		: unID=unID+1
hotspot2 ladderLength+gs_platform_length,	gs_ladder_width/2-B, unID, gs_platform_length, 2		: unID=unID+1

! ------------------------------------------------------------------------------
! 2D Content
! ------------------------------------------------------------------------------
ROT2 -90
ch = INITADDONSCOPE ("PolyOperations", "", "")

nContainer = 1
prevSourceContainer	= "mySourceContainer"
lastDestContainer	= "myDestinationContainer"

PREPAREFUNCTION ch, "CreateContainer", prevSourceContainer, ""
PREPAREFUNCTION ch, "CreateContainer", lastDestContainer, ""

PREPAREFUNCTION ch, "SetSourceContainer",		prevSourceContainer, ""
PREPAREFUNCTION ch, "SetDestinationContainer",	lastDestContainer, ""

gosub "putBasePolygons"

if not(bCutted) then
	if lastDestContainer <> "" then
		PREPAREFUNCTION ch, "DeleteContainer",		lastDestContainer, ""
	endif
	lastDestContainer = prevSourceContainer
	prevSourceContainer = "mySourceContainer" + STR(nContainer,1,0)
	PREPAREFUNCTION ch, "CreateContainer",			prevSourceContainer, ""
	PREPAREFUNCTION ch, "SetSourceContainer",		prevSourceContainer, ""
	PREPAREFUNCTION ch, "SetDestinationContainer",	lastDestContainer, ""

	gosub "drawDestinationPolygons"
else
	dim sourceIDArray[]
	numOrigPoly = CALLFUNCTION (ch, "GetSourcePolygons", "", sourceIDArray)

	!----Below---------
	lineType = gs_LineType
	gosub "cutpolyAbove"

	dim resPolyIDArray[]
	for i = 1 to numOrigPoly
		nPgon = CALLFUNCTION (ch, sourceIDArray[i] + " - cutAbove", "", resPolyIDArray)
		gosub "drawDestinationPolygons"
	next i

	!----Above---------
	lineType = gs_LineTypeStUp
	gosub "cutpolyBelow"

	dim resPolyIDArray[]
	for i = 1 to numOrigPoly
		nPgon = CALLFUNCTION (ch, sourceIDArray[i] + " - cutBelow", "", resPolyIDArray)
		gosub "drawDestinationPolygons"
	next i
endif

CLOSEADDONSCOPE ch

DEL 1


! ------------------------------------------------------------------------------
! Walking Line
! ------------------------------------------------------------------------------
if walkl then
	if det2D = DETLEVEL2D_50 then
		line_type gs_LineType
		circle2 ladderLength-(n_st-1)*dX,0, 0.05
	endif

	line_type gs_wLineType1
	if not(bCutted) then
		line2 ladderLength-(n_st-1)*dX,0, ladderLength,0
	else
		line2 ladderLength-(n_st-1)*dX,0, startOffset + cutPosX -holeWidth,0
		line_type gs_LineTypeStUp
		line2 startOffset + cutPosX,0, ladderLength,0
	endif
	line2 ladderLength,0, ladderLength-dX, dX
	line2 ladderLength,0, ladderLength-dX,-dX
endif


! ------------------------------------------------------------------------------
END
! ------------------------------------------------------------------------------

"putBasePolygons":
	!------- SIDE RAILs ----------------
	DIM vertArr[][]
	DIM contArr[]
	DIM inhEdgeInfos[]

	nVertices	= 4
	contArr[1]	= 5
	nContour	= 1
	defaultInhEdgeInfo	= 1

	vertArr[1][1] = -gs_ladder_width/2
	vertArr[1][2] = 0
	vertArr[1][3] = 0.0
	vertArr[2][1] = -gs_ladder_width/2+sr_d
	vertArr[2][2] = 0
	vertArr[2][3] = 0.0
	vertArr[3][1] = -gs_ladder_width/2+sr_d
	vertArr[3][2] = ladderLength
	vertArr[3][3] = 0.0
	vertArr[4][1] = -gs_ladder_width/2
	vertArr[4][2] = ladderLength
	vertArr[4][3] = 0.0

	inhEdgeInfos[1] = 1
	inhEdgeInfos[2] = 1
	inhEdgeInfos[3] = 1
	inhEdgeInfos[4] = 1

	PREPAREFUNCTION ch, "Store", "sideRail_1", nVertices, nContour, vertArr, contArr, defaultInhEdgeInfo, inhEdgeInfos

	DIM vertArr[][]
	DIM contArr[]
	DIM inhEdgeInfos[]

	nVertices	= 4
	contArr[1]	= 5
	nContour	= 1
	defaultInhEdgeInfo	= 1

	vertArr[1][1] = gs_ladder_width/2
	vertArr[1][2] = 0
	vertArr[1][3] = 0.0
	vertArr[2][1] = gs_ladder_width/2-sr_d
	vertArr[2][2] = 0
	vertArr[2][3] = 0.0
	vertArr[3][1] = gs_ladder_width/2-sr_d
	vertArr[3][2] = ladderLength
	vertArr[3][3] = 0.0
	vertArr[4][1] = gs_ladder_width/2
	vertArr[4][2] = ladderLength
	vertArr[4][3] = 0.0

	inhEdgeInfos[1] = 1
	inhEdgeInfos[2] = 1
	inhEdgeInfos[3] = 1
	inhEdgeInfos[4] = 1

	PREPAREFUNCTION ch, "Store", "sideRail_2", nVertices, nContour, vertArr, contArr, defaultInhEdgeInfo, inhEdgeInfos


	!------- STEPS ----------------
	DIM vertArr[][]
	DIM contArr[]
	DIM inhEdgeInfos[]

	nVertices	= 4
	contArr[1]	= 5
	nContour	= 1
	defaultInhEdgeInfo	= 1

	inhEdgeInfos[1] = 0
	inhEdgeInfos[2] = 0
	inhEdgeInfos[3] = 0
	inhEdgeInfos[4] = 1

	if det2D = DETLEVEL2D_200 then
		vertArr[1][1] = -gs_ladder_width/2+sr_d
		vertArr[1][2] = startOffset+dX
		vertArr[1][3] = 0.0
		vertArr[2][1] = -gs_ladder_width/2+sr_d
		vertArr[2][2] = ladderLength
		vertArr[2][3] = 0.0
		vertArr[3][1] = gs_ladder_width/2-sr_d
		vertArr[3][2] = ladderLength
		vertArr[3][3] = 0.0
		vertArr[4][1] = gs_ladder_width/2-sr_d
		vertArr[4][2] = startOffset+dX
		vertArr[4][3] = 0.0

		PREPAREFUNCTION ch, "Store", "currentStep", nVertices, nContour, vertArr, contArr, defaultInhEdgeInfo, inhEdgeInfos
	else
		for s=1 to n_st-1
			offset = startOffset + dX*(s)

			if s = n_st then
				stepWidth = st_w
			else
				if (st_w) > dX then
					stepWidth = dX
				else
					stepWidth = st_w
				endif
			endif

			vertArr[1][1] = -gs_ladder_width/2+sr_d
			vertArr[1][2] = offset
			vertArr[1][3] = 0.0
			vertArr[2][1] = -gs_ladder_width/2+sr_d
			vertArr[2][2] = stepWidth+offset
			vertArr[2][3] = 0.0
			vertArr[3][1] = gs_ladder_width/2-sr_d
			vertArr[3][2] = stepWidth+offset
			vertArr[3][3] = 0.0
			vertArr[4][1] = gs_ladder_width/2-sr_d
			vertArr[4][2] = offset
			vertArr[4][3] = 0.0

			currentStep = "step" + STR(s,1,0)
			PREPAREFUNCTION ch, "Store", currentStep, nVertices, nContour, vertArr, contArr, defaultInhEdgeInfo, inhEdgeInfos

		next s
	endif


	!------- PLATFORM ----------------
	DIM vertArr[][]
	DIM contArr[]
	DIM inhEdgeInfos[]

	if not(bCutted) & det2D = DETLEVEL2D_50 then
		nVertices	= 10
		contArr[1]	= 5
		contArr[2]	= 10
		nContour	= 2
		defaultInhEdgeInfo	= 1

		vertArr[1][1] = -gs_ladder_width/2
		vertArr[1][2] = ladderLength
		vertArr[1][3] = 0.0
		vertArr[2][1] = -gs_ladder_width/2
		vertArr[2][2] = ladderLength+gs_platform_length
		vertArr[2][3] = 0.0
		vertArr[3][1] = -gs_ladder_width/2+B
		vertArr[3][2] = ladderLength+gs_platform_length
		vertArr[3][3] = 0.0
		vertArr[4][1] = -gs_ladder_width/2+B
		vertArr[4][2] = ladderLength
		vertArr[4][3] = 0.0
		vertArr[5][1] = -gs_ladder_width/2
		vertArr[5][2] = ladderLength
		vertArr[5][3] = 0.0
		vertArr[6][1] = -gs_ladder_width/2+plf_t
		vertArr[6][2] = ladderLength+plf_t
		vertArr[6][3] = 0.0
		vertArr[7][1] = -gs_ladder_width/2+plf_t
		vertArr[7][2] = ladderLength+gs_platform_length-plf_t
		vertArr[7][3] = 0.0
		vertArr[8][1] = -gs_ladder_width/2+B-plf_t
		vertArr[8][2] = ladderLength+gs_platform_length-plf_t
		vertArr[8][3] = 0.0
		vertArr[9][1] = -gs_ladder_width/2+B-plf_t
		vertArr[9][2] = ladderLength+plf_t
		vertArr[9][3] = 0.0
		vertArr[10][1] = -gs_ladder_width/2+plf_t
		vertArr[10][2] = ladderLength+plf_t
		vertArr[10][3] = 0.0

		inhEdgeInfos[1] = 1
		inhEdgeInfos[2] = 1
		inhEdgeInfos[3] = 1
		inhEdgeInfos[4] = 1
		inhEdgeInfos[5] = 1
		inhEdgeInfos[6] = 1
		inhEdgeInfos[7] = 1
		inhEdgeInfos[8] = 1
		inhEdgeInfos[9] = 1
		inhEdgeInfos[10] = 1

		PREPAREFUNCTION ch, "Store", "platform_1", nVertices, nContour, vertArr, contArr, defaultInhEdgeInfo, inhEdgeInfos


		DIM vertArr[][]
		DIM contArr[]
		DIM inhEdgeInfos[]

		nVertices	= 4
		contArr[1]	= 5
		nContour	= 1
		defaultInhEdgeInfo	= 1

		vertArr[1][1] = -gs_ladder_width/2+plf_t
		vertArr[1][2] = ladderLength+plf_t
		vertArr[1][3] = 0.0
		vertArr[2][1] = -gs_ladder_width/2+plf_t
		vertArr[2][2] = ladderLength+gs_platform_length-plf_t
		vertArr[2][3] = 0.0
		vertArr[3][1] = -gs_ladder_width/2+B-plf_t
		vertArr[3][2] = ladderLength+gs_platform_length-plf_t
		vertArr[3][3] = 0.0
		vertArr[4][1] = -gs_ladder_width/2+B-plf_t
		vertArr[4][2] = ladderLength+plf_t
		vertArr[4][3] = 0.0

		inhEdgeInfos[1] = 1
		inhEdgeInfos[2] = 1
		inhEdgeInfos[3] = 1
		inhEdgeInfos[4] = 1

		PREPAREFUNCTION ch, "Store", "platform_2", nVertices, nContour, vertArr, contArr, defaultInhEdgeInfo, inhEdgeInfos
	else
		nVertices	= 4
		contArr[1]	= 5
		nContour	= 1
		defaultInhEdgeInfo	= 1

		vertArr[1][1] = -gs_ladder_width/2
		vertArr[1][2] = ladderLength
		vertArr[1][3] = 0.0
		vertArr[2][1] = -gs_ladder_width/2
		vertArr[2][2] = ladderLength+gs_platform_length
		vertArr[2][3] = 0.0
		vertArr[3][1] = -gs_ladder_width/2+B
		vertArr[3][2] = ladderLength+gs_platform_length
		vertArr[3][3] = 0.0
		vertArr[4][1] = -gs_ladder_width/2+B
		vertArr[4][2] = ladderLength
		vertArr[4][3] = 0.0

		inhEdgeInfos[1] = 1
		inhEdgeInfos[2] = 1
		inhEdgeInfos[3] = 1
		inhEdgeInfos[4] = 1

		PREPAREFUNCTION ch, "Store", "platform_2", nVertices, nContour, vertArr, contArr, defaultInhEdgeInfo, inhEdgeInfos
	endif


	!------- Handrails ----------------
	if det2D = DETLEVEL2D_50 then
		if iHandrailPos = HANDRAILPOS_LEFT | iHandrailPos = HANDRAILPOS_BOTH then
			DIM vertArr[][]
			DIM contArr[]
			DIM inhEdgeInfos[]

			nVertices	= 4
			contArr[1]	= 5
			nContour	= 1
			defaultInhEdgeInfo	= 1

			vertArr[1][1] = -gs_ladder_width/2+hr_d-halfD
			vertArr[1][2] = 2"
			vertArr[1][3] = 0.0
			vertArr[2][1] = -gs_ladder_width/2+hr_d-halfD
			vertArr[2][2] = 2" + (n_st-1) * dX
			vertArr[2][3] = 0.0
			vertArr[3][1] = -gs_ladder_width/2+hr_d+halfD
			vertArr[3][2] = 2" + (n_st-1) * dX
			vertArr[3][3] = 0.0
			vertArr[4][1] = -gs_ladder_width/2+hr_d+halfD
			vertArr[4][2] = 2"
			vertArr[4][3] = 0.0

			inhEdgeInfos[1] = 1
			inhEdgeInfos[2] = 1
			inhEdgeInfos[3] = 1
			inhEdgeInfos[4] = 1

			PREPAREFUNCTION ch, "Store", "handrail_1", nVertices, nContour, vertArr, contArr, defaultInhEdgeInfo, inhEdgeInfos
		endif

		if iHandrailPos = HANDRAILPOS_RIGHT | iHandrailPos = HANDRAILPOS_BOTH then

			DIM vertArr[][]
			DIM contArr[]
			DIM inhEdgeInfos[]

			nVertices	= 4
			contArr[1]	= 5
			nContour	= 1
			defaultInhEdgeInfo	= 1

			vertArr[1][1] = gs_ladder_width/2
			vertArr[1][2] = 2"
			vertArr[1][3] = 0.0
			vertArr[2][1] = gs_ladder_width/2
			vertArr[2][2] = ladderLength - hr_d / 2 * NOT(_bShowRightRailOnCorner) - hr_d * 2 * _bShowRightRailOnCorner
			vertArr[2][3] = 0.0
			vertArr[3][1] = gs_ladder_width/2+2*halfD
			vertArr[3][2] = ladderLength - hr_d / 2 * NOT(_bShowRightRailOnCorner) - hr_d * 2 * _bShowRightRailOnCorner
			vertArr[3][3] = 0.0
			vertArr[4][1] = gs_ladder_width/2+2*halfD
			vertArr[4][2] = 2"
			vertArr[4][3] = 0.0

			inhEdgeInfos[1] = 0
			if hr_p then
				inhEdgeInfos[2] = bDetailedHandrail
			else
				inhEdgeInfos[2] = 1
			endif
			inhEdgeInfos[3] = 1
			inhEdgeInfos[4] = 1

			PREPAREFUNCTION ch, "Store", "handrail_2", nVertices, nContour, vertArr, contArr, defaultInhEdgeInfo, inhEdgeInfos
		endif

		if hr_p then
			if iHandrailPos = HANDRAILPOS_RIGHT | iHandrailPos = HANDRAILPOS_BOTH then
				if _bShowRightRailOnCorner then
					put  0,		-B,						0,
						 0,		-gs_ladder_width,		0,
						 -hr_d * 2,		-gs_ladder_width,		0,
						 -hr_d * 2,		-gs_ladder_width-hr_d,		1,
						-hr_d,	-gs_ladder_width-hr_d,	1,
						-hr_d,	-B-hr_d,				bDetailedHandrail

					if bDetailedHandrail then
						line2 hr_d+gs_ladder_width/2, -hr_d+ladderLength, gs_ladder_width/2, ladderLength
					endif
				endif
			else
				if _bShowRightRailOnCorner then
					put  0,		-B,					0,
						 0,		-gs_ladder_width,	0,
						-hr_d,	-gs_ladder_width,	1,
						-hr_d,	-B-hr_d,			1
				else
					put -halfD,	-B,		 1,
						-halfD,	-B-hr_d, 1
				endif
			endif

			DIM vertArr[][]
			DIM contArr[]
			DIM inhEdgeInfos[]

			nPoly	= NSP / 3

			nVertices	= nPoly
			contArr[1]	= nPoly + 1
			nContour	= 1
			defaultInhEdgeInfo	= 1

			for i = 1 to nPoly
				vertArr[i][2] = get(1) + ladderLength
				vertArr[i][1] = -get(1) - gs_ladder_width/2
				vertArr[i][3] = 0.0
				inhEdgeInfos[i] = get(1)
			next i

			if _bShowRightRailOnCorner then
				PREPAREFUNCTION ch, "Store", "handrail_31", nVertices, nContour, vertArr, contArr, defaultInhEdgeInfo, inhEdgeInfos
			endif

			put gs_platform_length+hr_d,	-B-hr_d, 1,
				gs_platform_length+hr_d,	 0, 1,
				gs_platform_length,			 0, 0,
				gs_platform_length,			-B, bDetailedHandrail

			DIM vertArr[][]
			DIM contArr[]
			DIM inhEdgeInfos[]

			nPoly	= NSP / 3

			nVertices	= nPoly
			contArr[1]	= nPoly + 1
			nContour	= 1
			defaultInhEdgeInfo	= 1

			for i = 1 to nPoly
				vertArr[i][2] = get(1) + ladderLength
				vertArr[i][1] = -get(1) - gs_ladder_width/2
				vertArr[i][3] = 0.0
				inhEdgeInfos[i] = get(1)
			next i

			PREPAREFUNCTION ch, "Store", "handrail_32", nVertices, nContour, vertArr, contArr, defaultInhEdgeInfo, inhEdgeInfos


			put gs_platform_length,			-B, bDetailedHandrail,
				gs_platform_length+hr_d,	-B-hr_d, 1,
				-hr_d / 2 * _bShowRightRailOnCorner - hr_d / 2,	-B-hr_d, bDetailedHandrail | NOT(_bShowRightRailOnCorner),
				-hr_d / 2 * NOT(_bShowRightRailOnCorner),							-B, 0

			DIM vertArr[][]
			DIM contArr[]
			DIM inhEdgeInfos[]

			nPoly	= NSP / 3

			nVertices	= nPoly
			contArr[1]	= nPoly + 1
			nContour	= 1
			defaultInhEdgeInfo	= 1

			for i = 1 to nPoly
				vertArr[i][2] = get(1) + ladderLength
				vertArr[i][1] = -get(1) - gs_ladder_width/2
				vertArr[i][3] = 0.0
				inhEdgeInfos[i] = get(1)
			next i

			PREPAREFUNCTION ch, "Store", "handrail_33", nVertices, nContour, vertArr, contArr, defaultInhEdgeInfo, inhEdgeInfos
		endif
	endif
return


"cutpolyAbove":
	DIM vertArr[][]
	DIM contArr[]

	cutWidth = b/2 + 1

	nVertices	= 4
	contArr[1]	= 5
	nContour	= 1

	vertArr[1][1] = -cutWidth
	vertArr[1][2] = startOffset + cutPosX + cutWidth/tan(cutAlpha) - holeWidth
	vertArr[1][3] = 0.0
	vertArr[2][1] = cutWidth
	vertArr[2][2] = startOffset + cutPosX - cutWidth/tan(cutAlpha) - holeWidth
	vertArr[2][3] = 0.0
	vertArr[3][1] = cutWidth
	vertArr[3][2] = a+1
	vertArr[3][3] = 0.0
	vertArr[4][1] = -cutWidth
	vertArr[4][2] = a+1
	vertArr[4][3] = 0.0

	PREPAREFUNCTION ch, "Store", "cutAbove", nVertices, nContour, vertArr, contArr
return

"cutpolyBelow":
	DIM vertArr[][]
	DIM contArr[]

	cutWidth = b/2 + 1

	nVertices	= 4
	contArr[1]	= 5
	nContour	= 1

	vertArr[1][1] = -cutWidth
	vertArr[1][2] = startOffset + cutPosX + cutWidth/tan(cutAlpha)
	vertArr[1][3] = 0.0
	vertArr[2][1] = cutWidth
	vertArr[2][2] = startOffset + cutPosX - cutWidth/tan(cutAlpha)
	vertArr[2][3] = 0.0
	vertArr[3][1] = cutWidth
	vertArr[3][2] = -1
	vertArr[3][3] = 0.0
	vertArr[4][1] = -cutWidth
	vertArr[4][2] = -1
	vertArr[4][3] = 0.0

	PREPAREFUNCTION ch, "Store", "cutBelow", nVertices, nContour, vertArr, contArr
return

"drawDestinationPolygons":
	line_type lineType
	dim resPolyIDArr[]
	numPoly = CALLFUNCTION(ch, "GetDestinationPolygons", "", resPolyIDArr)
	for cP = 1 to numPoly
		polygonID = resPolyIDArr[cP]
		mask = 1
		gosub "getGDLpolygonFromAPI"
		poly2_b NSP/3, 1+2+4+64,gs_fill_pen,gs_back_pen,
			get(NSP)

		PREPAREFUNCTION ch, "Dispose", polygonID, lastDestContainer
	next cP
return


! ==============================================================================
! GET GDL Polygon
! ------------------------------------------------------------------------------
! Input variables:
!	ch:				Channel ID
!	polygonID:		Polygon ID
!
! Returned variables:
!	GDL stack:			GDL polygon
! ==============================================================================
"getGDLpolygonFromAPI":
	DIM resVertices[]
	numVertices = CALLFUNCTION (ch, "GetVertices", polygonID, resVertices)
	numVertices = numVertices / 3

	DIM contArr[]
	numContours = CALLFUNCTION (ch, "GetContourEnds", polygonID, contArr)

	DIM inhEdgeInfos[]
	numEdges = CALLFUNCTION (ch, "GetInhEdgeInfos", polygonID, inhEdgeInfos)

	FOR contIndex = 1 TO numContours
		IF contIndex = 1 THEN
			begIdx = 0
		ELSE
			begIdx = endIdx +1
		ENDIF
		IF contIndex = numContours THEN
			endIdx = numVertices - 1
		ELSE
			endIdx = contArr[contIndex + 1] - 2 -(contIndex - 1)
		ENDIF

		bClosed = 0
		bStartWithLast = 0

		index = endIdx * 3
		lastVertX = resVertices[index + 1]
		lastVertY = resVertices[index + 2]
		lastVertA = resVertices[index + 3]
		edgeInfo  = inhEdgeInfos[endIdx + 1]

		IF ABS(lastVertA) > EPS THEN
			PUT lastVertX, lastVertY, 0
			bStartWithLast = 1
		ENDIF

		FOR vertIndex = begIdx TO endIdx
			index = vertIndex * 3
			actVertX = resVertices[index + 1]
			actVertY = resVertices[index + 2]
			actVertA = resVertices[index + 3]

			! ------------------------------------------------------------------------------
			! Show inherited edge information number
			! ------------------------------------------------------------------------------
			!
			!			text2	(lastVertX + actVertX) / 2,
			!					(lastVertY + actVertY) / 2,
			!					edgeInfo
			! ------------------------------------------------------------------------------

			IF vertIndex = begIdx THEN
				IF bStartWithLast THEN
					ac2gdl_spx = lastVertX
					ac2gdl_spy = lastVertY
				ELSE
					ac2gdl_spx = actVertX
					ac2gdl_spy = actVertY
				ENDIF
			ENDIF

			if abs(lastVertA) > EPS then
			!	ac2gdl_mx = (actVertX + lastVertX) / 2
			!	ac2gdl_my = (actVertY + lastVertY) / 2
			!	ac2gdl_ratio = 1 / 2 / tan (lastVertA / 2)
			!
			!	ac2gdl_cx = ac2gdl_mx - ac2gdl_ratio * (actVertY - lastVertY)	! Arc center
			!	ac2gdl_cy = ac2gdl_my + ac2gdl_ratio * (actVertX - lastVertX)
			!
			!	put ac2gdl_cx,	ac2gdl_cy,	900,
			!		0,			lastVertA,	4000
			else
				if edgeInfo then
					line2 lastVertX, lastVertY, actVertX, actVertY
				endif
			endif

			IF vertIndex > begIdx & ABS(ac2gdl_spx - actVertX) < EPS & ABS(ac2gdl_spy - actVertY) < EPS THEN
				PUT actVertX, actVertY, -1
				bClosed = 1
			ELSE
				IF vertIndex < endIdx | NOT(bStartWithLast) THEN
					edgeInfo  = inhEdgeInfos[vertIndex + 1]
					PUT actVertX, actVertY, 0
				ENDIF
			ENDIF

			lastVertX = actVertX
			lastVertY = actVertY
			lastVertA = actVertA

		NEXT vertIndex

		IF NOT(bClosed) THEN	! Close the polygon IF it has holes
			PUT ac2gdl_spx, ac2gdl_spy, -1
		ENDIF

	NEXT contIndex
RETURN
