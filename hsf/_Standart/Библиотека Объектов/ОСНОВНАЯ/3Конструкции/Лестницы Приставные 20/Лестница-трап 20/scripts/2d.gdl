

cutplaneHeight	= GLOB_CSTORY_ELEV - GLOB_HSTORY_ELEV + GLOB_CUTPLANES_INFO[1]


PEN gs_cont_pen
FILL gs_fill_type

! ------------------------------------------------------------------------------
! HOTSPOTS
! ------------------------------------------------------------------------------

unID=1
HOTSPOT2 0,0,unID   : unID=unID+1

! ------------------------------------------------------------------------------
! STORY SENSITIVE
! ------------------------------------------------------------------------------
bCutted		= 0
lineType	= gs_LineType
cuttingPos	= 0
holeWidth	= 0.05
startOffset = a-st_w-(n_st-1)*dX
if bStorySensitive then
	if cutplaneHeight > ac_toplevel then
		!!No cutting all draw symbol line
	else
		if cutplaneHeight < ac_bottomlevel then		!All draw hidden, No cutting
			lineType = gs_LineTypeStUp
		else
			! Cutting
			cutHeigth = cutplaneHeight-ac_bottomlevel

			nCutPosY = int(cutHeigth / dY)
			if nCutPosY < 1 then nCutPosY = 1
			if nCutPosY > n_st-1 then nCutPosY = n_st

			cutPosX = nCutPosY * dX + 0.5 * dX  + EPS
			cutAlpha =  atn((b/2-sr_d) / (dX*0.5))
			bCutted	= 1
		endif
	endif
endif

! ------------------------------------------------------------------------------
! Scale Sensitive
! ------------------------------------------------------------------------------
call "2dDetailLevel" parameters gs_detlevel_2D	= gs_detlevel_2D,
							gs_detlevel_2D_m	= gs_detlevel_2D_m,
							enable2dDetLevels	= 2+4+8+16,
		returned_parameters	det2D


! ------------------------------------------------------------------------------
! EDITABLE HOTSPOTS
! ------------------------------------------------------------------------------

HOTSPOT2 0,0,unID,a,1+256   : unID=unID+1
HOTSPOT2 -0.1,0,unID,a,3    : unID=unID+1
HOTSPOT2 a,0,unID,a,2   	: unID=unID+1

HOTSPOT2 0,0,unID,b_temp,1+128,b    : unID=unID+1
HOTSPOT2 0,-0.1,unID,b_temp,3,b     : unID=unID+1
HOTSPOT2 0,b_temp,unID,b_temp,2,b   : unID=unID+1

HOTSPOT2 0,0,unID,b_temp,1+128,b    : unID=unID+1
HOTSPOT2 0,0.1,unID,b_temp,3,b    	: unID=unID+1
HOTSPOT2 0,-b_temp,unID,b_temp,2,b  : unID=unID+1

HOTSPOT2 a,0,unID,b_temp,1+128,b    : unID=unID+1
HOTSPOT2 a,-0.1,unID,b_temp,3,b     : unID=unID+1
HOTSPOT2 a,b_temp,unID,b_temp,2,b   : unID=unID+1

HOTSPOT2 a,0,unID,b_temp,1+128,b    : unID=unID+1
HOTSPOT2 a,0.1,unID,b_temp,3,b    	: unID=unID+1
HOTSPOT2 a,-b_temp,unID,b_temp,2,b  : unID=unID+1



! ------------------------------------------------------------------------------
! 2D Content
! ------------------------------------------------------------------------------
ROT2 -90
ch = INITADDONSCOPE ("PolyOperations", "", "")

nContainer = 1
prevSourceContainer	= "mySourceContainer"
lastDestContainer	= "myDestinationContainer"

PREPAREFUNCTION ch, "CreateContainer", prevSourceContainer, ""
PREPAREFUNCTION ch, "CreateContainer", lastDestContainer, ""

PREPAREFUNCTION ch, "SetSourceContainer",		prevSourceContainer, ""
PREPAREFUNCTION ch, "SetDestinationContainer",	lastDestContainer, ""

gosub "putBasePolygons"

if not(bCutted) then
	if lastDestContainer <> "" then
		PREPAREFUNCTION ch, "DeleteContainer",		lastDestContainer, ""
	endif
	lastDestContainer = prevSourceContainer
	prevSourceContainer = "mySourceContainer" + STR(nContainer,1,0)
	PREPAREFUNCTION ch, "CreateContainer",			prevSourceContainer, ""
	PREPAREFUNCTION ch, "SetSourceContainer",		prevSourceContainer, ""
	PREPAREFUNCTION ch, "SetDestinationContainer",	lastDestContainer, ""

	gosub "drawDestinationPolygons"
else
	dim sourceIDArray[]
	numOrigPoly = CALLFUNCTION (ch, "GetSourcePolygons", "", sourceIDArray)

	!----Below---------
	lineType = gs_LineType
	gosub "cutpolyAbove"

	dim resPolyIDArray[]
	for i = 1 to numOrigPoly
		nPgon = CALLFUNCTION (ch, sourceIDArray[i] + " - cutAbove", "", resPolyIDArray)
		gosub "drawDestinationPolygons"
	next i

	!----Above---------
	lineType = gs_LineTypeStUp
	gosub "cutpolyBelow"

	dim resPolyIDArray[]
	for i = 1 to numOrigPoly
		nPgon = CALLFUNCTION (ch, sourceIDArray[i] + " - cutBelow", "", resPolyIDArray)
		gosub "drawDestinationPolygons"
	next i
endif

CLOSEADDONSCOPE ch

DEL 1


! ------------------------------------------------------------------------------
! Walking Line
! ------------------------------------------------------------------------------
if walkl then
	hotspot2 A-st_w-(n_st-1)*dX,0,unID   : unID=unID+1

	if det2D = DETLEVEL2D_50 then
		line_type gs_LineType
		circle2 A-st_w-(n_st-1)*dX,0, 0.05
	endif

	line_type gs_wLineType1
	if not(bCutted) then
		line2 startOffset,0, A,0
	else
		line2 startOffset,0, startOffset + cutPosX -holeWidth, 0
		line_type gs_LineTypeStUp
		line2 startOffset + cutPosX,0, A, 0
	endif
	line2 A,0, A-dX, dX
	line2 A,0, A-dX,-dX
endif


! ------------------------------------------------------------------------------
END
! ------------------------------------------------------------------------------


"putBasePolygons":
	!------- SIDE RAILs 1 ----------------
	DIM vertArr[][]
	DIM contArr[]
	DIM inhEdgeInfos[]

	nVertices	= 4
	contArr[1]	= 5
	nContour	= 1
	defaultInhEdgeInfo	= 1

	vertArr[1][1] = -b/2
	vertArr[1][2] = 0
	vertArr[1][3] = 0.0
	vertArr[2][1] = -b/2+sr_d
	vertArr[2][2] = 0
	vertArr[2][3] = 0.0
	vertArr[3][1] = -b/2+sr_d
	vertArr[3][3] = 0.0
	vertArr[4][1] = -b/2
	vertArr[4][3] = 0.0
	if det2D = DETLEVEL2D_50 then
		vertArr[3][2] = A-st_w-2"
		vertArr[4][2] = A-st_w-2"
	else
		vertArr[3][2] = A
		vertArr[4][2] = A
	endif

	inhEdgeInfos[1] = 1
	inhEdgeInfos[2] = 1
	inhEdgeInfos[3] = 1
	inhEdgeInfos[4] = 1

	PREPAREFUNCTION ch, "Store", "sideRail_11", nVertices, nContour, vertArr, contArr, defaultInhEdgeInfo, inhEdgeInfos

	if (bCutted & det2D = DETLEVEL2D_50) | (not(bCutted) & det2D <> DETLEVEL2D_200) then
		vertArr[1][1] = -b/2
		vertArr[1][2] = a-st_w-2"
		vertArr[1][3] = 0.0
		vertArr[2][1] = -b/2+sr_d
		vertArr[2][2] = a-st_w-2"
		vertArr[2][3] = 0.0
		vertArr[3][1] = -b/2+sr_d
		vertArr[3][2] = a
		vertArr[3][3] = 0.0
		vertArr[4][1] = -b/2
		vertArr[4][2] = a
		vertArr[4][3] = 0.0

		inhEdgeInfos[1] = 0
		inhEdgeInfos[2] = 1
		inhEdgeInfos[3] = 1
		inhEdgeInfos[4] = 1

		PREPAREFUNCTION ch, "Store", "sideRail_12", nVertices, nContour, vertArr, contArr, defaultInhEdgeInfo, inhEdgeInfos
	endif


	!------- SIDE RAILs 2 ----------------
	DIM vertArr[][]
	DIM contArr[]
	DIM inhEdgeInfos[]

	nVertices	= 4
	contArr[1]	= 5
	nContour	= 1
	defaultInhEdgeInfo	= 1

	vertArr[1][1] = b/2
	vertArr[1][2] = 0
	vertArr[1][3] = 0.0
	vertArr[2][1] = b/2-sr_d
	vertArr[2][2] = 0
	vertArr[2][3] = 0.0
	vertArr[3][1] = b/2-sr_d
	vertArr[3][3] = 0.0
	vertArr[4][1] = b/2
	vertArr[4][3] = 0.0
	if det2D = DETLEVEL2D_50 then
		vertArr[3][2] = A-st_w-2"
		vertArr[4][2] = A-st_w-2"
	else
		vertArr[3][2] = A
		vertArr[4][2] = A
	endif

	inhEdgeInfos[1] = 1
	inhEdgeInfos[2] = 1
	inhEdgeInfos[3] = 1
	inhEdgeInfos[4] = 1

	PREPAREFUNCTION ch, "Store", "sideRail_21", nVertices, nContour, vertArr, contArr, defaultInhEdgeInfo, inhEdgeInfos

	if (bCutted & det2D = DETLEVEL2D_50) | (not(bCutted) & det2D <> DETLEVEL2D_200) then
		vertArr[1][1] = b/2
		vertArr[1][2] = a-st_w-2"
		vertArr[1][3] = 0.0
		vertArr[2][1] = b/2-sr_d
		vertArr[2][2] = a-st_w-2"
		vertArr[2][3] = 0.0
		vertArr[3][1] = b/2-sr_d
		vertArr[3][2] = a
		vertArr[3][3] = 0.0
		vertArr[4][1] = b/2
		vertArr[4][2] = a
		vertArr[4][3] = 0.0

		inhEdgeInfos[1] = 0
		inhEdgeInfos[2] = 1
		inhEdgeInfos[3] = 1
		inhEdgeInfos[4] = 1

		PREPAREFUNCTION ch, "Store", "sideRail_22", nVertices, nContour, vertArr, contArr, defaultInhEdgeInfo, inhEdgeInfos
	endif

	!------- STEPS ----------------
	DIM vertArr[][]
	DIM contArr[]
	DIM inhEdgeInfos[]

	nVertices	= 4
	contArr[1]	= 5
	nContour	= 1
	defaultInhEdgeInfo	= 1

	inhEdgeInfos[1] = 0
	inhEdgeInfos[2] = 0
	inhEdgeInfos[3] = 0
	inhEdgeInfos[4] = 1

	if det2D = DETLEVEL2D_200 then
		vertArr[1][1] = -b/2+sr_d
		vertArr[1][2] = startOffset
		vertArr[1][3] = 0.0
		vertArr[2][1] = -b/2+sr_d
		vertArr[2][2] = A
		vertArr[2][3] = 0.0
		vertArr[3][1] = b/2-sr_d
		vertArr[3][2] = A
		vertArr[3][3] = 0.0
		vertArr[4][1] = b/2-sr_d
		vertArr[4][2] = startOffset
		vertArr[4][3] = 0.0
		inhEdgeInfos[2] = 1

		PREPAREFUNCTION ch, "Store", "currentStep", nVertices, nContour, vertArr, contArr, defaultInhEdgeInfo, inhEdgeInfos
	else
		for s=1 to n_st
			offset = startOffset + dX*(s-1)

			if s = n_st then
				stepWidth = st_w
				inhEdgeInfos[2] = 1
			else
				if (st_w) > dX then
					stepWidth = dX
				else
					stepWidth = st_w
					inhEdgeInfos[2] = 1
				endif
			endif

			vertArr[1][1] = -b/2+sr_d
			vertArr[1][2] = offset
			vertArr[1][3] = 0.0
			vertArr[2][1] = -b/2+sr_d
			vertArr[2][2] = stepWidth+offset
			vertArr[2][3] = 0.0
			vertArr[3][1] = b/2-sr_d
			vertArr[3][2] = stepWidth+offset
			vertArr[3][3] = 0.0
			vertArr[4][1] = b/2-sr_d
			vertArr[4][2] = offset
			vertArr[4][3] = 0.0

			currentStep = "step" + STR(s,1,0)
			PREPAREFUNCTION ch, "Store", currentStep, nVertices, nContour, vertArr, contArr, defaultInhEdgeInfo, inhEdgeInfos
		next s
	endif


	!------- Handrails ----------------
	if det2D = DETLEVEL2D_50 then
		if iHandrailPos = HANDRAILPOS_LEFT | iHandrailPos = HANDRAILPOS_BOTH then
			DIM vertArr[][]
			DIM contArr[]
			DIM inhEdgeInfos[]

			nVertices	= 4
			contArr[1]	= 5
			nContour	= 1
			defaultInhEdgeInfo	= 1

			vertArr[1][1] = -b/2
			vertArr[1][2] = 2"
			vertArr[1][3] = 0.0
			vertArr[2][1] = -b/2-hr_d
			vertArr[2][2] = 2"
			vertArr[2][3] = 0.0
			vertArr[3][1] = -b/2-hr_d
			vertArr[3][2] = a
			vertArr[3][3] = 0.0
			vertArr[4][1] = -b/2
			vertArr[4][2] = a
			vertArr[4][3] = 0.0

			inhEdgeInfos[1] = 1
			inhEdgeInfos[2] = 1
			inhEdgeInfos[3] = 1
			inhEdgeInfos[4] = 0

			PREPAREFUNCTION ch, "Store", "handRail_1", nVertices, nContour, vertArr, contArr, defaultInhEdgeInfo, inhEdgeInfos
		endif

		if iHandrailPos = HANDRAILPOS_RIGHT | iHandrailPos = HANDRAILPOS_BOTH then
			DIM vertArr[][]
			DIM contArr[]
			DIM inhEdgeInfos[]

			nVertices	= 4
			contArr[1]	= 5
			nContour	= 1
			defaultInhEdgeInfo	= 1

			vertArr[1][1] = b/2
			vertArr[1][2] = 2"
			vertArr[1][3] = 0.0
			vertArr[2][1] = b/2+hr_d
			vertArr[2][2] = 2"
			vertArr[2][3] = 0.0
			vertArr[3][1] = b/2+hr_d
			vertArr[3][2] = a
			vertArr[3][3] = 0.0
			vertArr[4][1] = b/2
			vertArr[4][2] = a
			vertArr[4][3] = 0.0

			inhEdgeInfos[1] = 1
			inhEdgeInfos[2] = 1
			inhEdgeInfos[3] = 1
			inhEdgeInfos[4] = 0

			PREPAREFUNCTION ch, "Store", "handRail_2", nVertices, nContour, vertArr, contArr, defaultInhEdgeInfo, inhEdgeInfos
		endif
	endif
return


"cutpolyAbove":
	DIM vertArr[][]
	DIM contArr[]

	cutWidth = b/2 + 1

	nVertices	= 4
	contArr[1]	= 5
	nContour	= 1

	vertArr[1][1] = -cutWidth
	vertArr[1][2] = startOffset + cutPosX + cutWidth/tan(cutAlpha) - holeWidth
	vertArr[1][3] = 0.0
	vertArr[2][1] = cutWidth
	vertArr[2][2] = startOffset + cutPosX - cutWidth/tan(cutAlpha) - holeWidth
	vertArr[2][3] = 0.0
	vertArr[3][1] = cutWidth
	vertArr[3][2] = a+1
	vertArr[3][3] = 0.0
	vertArr[4][1] = -cutWidth
	vertArr[4][2] = a+1
	vertArr[4][3] = 0.0

	PREPAREFUNCTION ch, "Store", "cutAbove", nVertices, nContour, vertArr, contArr
return

"cutpolyBelow":
	DIM vertArr[][]
	DIM contArr[]

	cutWidth = b/2 + 1

	nVertices	= 4
	contArr[1]	= 5
	nContour	= 1

	vertArr[1][1] = -cutWidth
	vertArr[1][2] = startOffset + cutPosX + cutWidth/tan(cutAlpha)
	vertArr[1][3] = 0.0
	vertArr[2][1] = cutWidth
	vertArr[2][2] = startOffset + cutPosX - cutWidth/tan(cutAlpha)
	vertArr[2][3] = 0.0
	vertArr[3][1] = cutWidth
	vertArr[3][2] = -1
	vertArr[3][3] = 0.0
	vertArr[4][1] = -cutWidth
	vertArr[4][2] = -1
	vertArr[4][3] = 0.0

	PREPAREFUNCTION ch, "Store", "cutBelow", nVertices, nContour, vertArr, contArr
return


"drawDestinationPolygons":
	line_type lineType
	dim resPolyIDArr[]
	numPoly = CALLFUNCTION(ch, "GetDestinationPolygons", "", resPolyIDArr)
	for cP = 1 to numPoly
		polygonID = resPolyIDArr[cP]
		mask = 1
		gosub "getGDLpolygonFromAPI"
		poly2_b NSP/3,1+2+4+64,gs_fill_pen,gs_back_pen,
			get(NSP)

		PREPAREFUNCTION ch, "Dispose", polygonID, lastDestContainer
	next cP
return


! ==============================================================================
! GET GDL Polygon
! ------------------------------------------------------------------------------
! Input variables:
!	ch:				Channel ID
!	polygonID:		Polygon ID
!
! Returned variables:
!	GDL stack:			GDL polygon
! ==============================================================================
"getGDLpolygonFromAPI":
	DIM resVertices[]
	numVertices = CALLFUNCTION (ch, "GetVertices", polygonID, resVertices)
	numVertices = numVertices / 3

	DIM contArr[]
	numContours = CALLFUNCTION (ch, "GetContourEnds", polygonID, contArr)

	DIM inhEdgeInfos[]
	numEdges = CALLFUNCTION (ch, "GetInhEdgeInfos", polygonID, inhEdgeInfos)

	FOR contIndex = 1 TO numContours
		IF contIndex = 1 THEN
			begIdx = 0
		ELSE
			begIdx = endIdx +1
		ENDIF
		IF contIndex = numContours THEN
			endIdx = numVertices - 1
		ELSE
			endIdx = contArr[contIndex + 1] - 2 -(contIndex - 1)
		ENDIF

		bClosed = 0
		bStartWithLast = 0

		index = endIdx * 3
		lastVertX = resVertices[index + 1]
		lastVertY = resVertices[index + 2]
		lastVertA = resVertices[index + 3]
		edgeInfo  = inhEdgeInfos[endIdx + 1]

		IF ABS(lastVertA) > EPS THEN
			PUT lastVertX, lastVertY, 0
			bStartWithLast = 1
		ENDIF

		FOR vertIndex = begIdx TO endIdx
			index = vertIndex * 3
			actVertX = resVertices[index + 1]
			actVertY = resVertices[index + 2]
			actVertA = resVertices[index + 3]

			! ------------------------------------------------------------------------------
			! Show inherited edge information number
			! ------------------------------------------------------------------------------
			!
			!			text2	(lastVertX + actVertX) / 2,
			!					(lastVertY + actVertY) / 2,
			!					edgeInfo
			! ------------------------------------------------------------------------------

			IF vertIndex = begIdx THEN
				IF bStartWithLast THEN
					ac2gdl_spx = lastVertX
					ac2gdl_spy = lastVertY
				ELSE
					ac2gdl_spx = actVertX
					ac2gdl_spy = actVertY
				ENDIF
			ENDIF

			if abs(lastVertA) > EPS then
			!	ac2gdl_mx = (actVertX + lastVertX) / 2
			!	ac2gdl_my = (actVertY + lastVertY) / 2
			!	ac2gdl_ratio = 1 / 2 / tan (lastVertA / 2)
			!
			!	ac2gdl_cx = ac2gdl_mx - ac2gdl_ratio * (actVertY - lastVertY)	! Arc center
			!	ac2gdl_cy = ac2gdl_my + ac2gdl_ratio * (actVertX - lastVertX)
			!
			!	put ac2gdl_cx,	ac2gdl_cy,	900,
			!		0,			lastVertA,	4000
			else
				if edgeInfo then
					line2 lastVertX, lastVertY, actVertX, actVertY
				endif
			endif

			IF vertIndex > begIdx & ABS(ac2gdl_spx - actVertX) < EPS & ABS(ac2gdl_spy - actVertY) < EPS THEN
				PUT actVertX, actVertY, -1
				bClosed = 1
			ELSE
				IF vertIndex < endIdx | NOT(bStartWithLast) THEN
					edgeInfo  = inhEdgeInfos[vertIndex + 1]
					PUT actVertX, actVertY, 0
				ENDIF
			ENDIF

			lastVertX = actVertX
			lastVertY = actVertY
			lastVertA = actVertA

		NEXT vertIndex

		IF NOT(bClosed) THEN	! Close the polygon IF it has holes
			PUT ac2gdl_spx, ac2gdl_spy, -1
		ENDIF

	NEXT contIndex
RETURN
