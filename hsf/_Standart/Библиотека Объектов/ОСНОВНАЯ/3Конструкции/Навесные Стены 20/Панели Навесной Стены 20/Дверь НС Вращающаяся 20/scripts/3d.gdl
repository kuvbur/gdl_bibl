
![#COMPATIBILITY] - START

if iLeafType = -1 then
	gosub "LeafCompatibility"
else
	panelThk = sashThk
	matPanel = matSash
endif
![#COMPATIBILITY] - END

if gs_detlevel_3d_m = 0 then end
if not (gs_shadow) then shadow off

addx (leftSide_X + rightSide_X) / 2
addy (downSide_Y + upperSide_Y) / 2

unID = 1
r = min (doorWidth, doorHeight) / 4
hotspot 0, 							0, 							0, unID, gs_updirection, 6 : unID = unID +1 !center of angle
hotspot 0, 							r,							0, unID, gs_updirection, 4+128 : unID = unID +1 !base hotspot
hotspot r * sin (gs_updirection), 	r * cos (gs_updirection), 	0, unID, gs_updirection, 5 : unID = unID +1 !moving
hotspot 0, 							0, 							-1, unID, gs_updirection, 7 : unID = unID +1 !center of angle

del 2


! --- Clamp ----------------------------------------------------------------------------------


material matFrame
sect_fill fillFrame, fillPenBgFrame, fillPenFrame,  penFrame


addz -AC_clampWidth / 2
material matClamp

if abs (downSide_Y - downClamp_Y) > eps then
	prism_ 4, AC_clampWidth,
			leftClamp_X, 	downClamp_Y, 	15,
			rightClamp_X, 	downClamp_Y, 	15,
			rightSide_X, 	downSide_Y, 	15,
			leftSide_X, 	downSide_Y, 	15
endif

if abs (rightSide_X - rightClamp_X) > eps then
	prism_ 4, AC_clampWidth,
			rightClamp_X, 	downClamp_Y, 	15,
			rightClamp_X, 	upperClamp_Y, 	15,
			rightSide_X, 	upperSide_Y, 	15,
			rightSide_X, 	downSide_Y, 	15
endif

if abs (upperSide_Y - upperClamp_Y) > eps then
	prism_ 4, AC_clampWidth,
			rightClamp_X, 	upperClamp_Y, 	15,
			leftClamp_X, 	upperClamp_Y, 	15,
			leftSide_X, 	upperSide_Y, 	15,
			rightSide_X, 	upperSide_Y, 	15
endif

if abs (leftSide_X - leftClamp_X) > eps then
	prism_ 4, AC_clampWidth,
			leftClamp_X, 	upperClamp_Y, 	15,
			leftClamp_X, 	downClamp_Y, 	15,
			leftSide_X, 	downSide_Y, 	15,
			leftSide_X, 	upperSide_Y, 	15
endif

del 1

! --- Door ----------------------------------------------------------------------

if abs (gs_updirection) < eps then
	addx (leftSide_X + rightSide_X) / 2
	addy downSide_Y
endif
if abs (gs_updirection - 90) < eps then
	addx leftSide_X
	addy (downSide_Y + upperSide_Y) / 2
endif
if abs (gs_updirection - 180) < eps then
	addx (leftSide_X + rightSide_X) / 2
	addy upperSide_Y
endif
if abs (gs_updirection - 270) < eps then
	addx rightSide_X
	addy (downSide_Y + upperSide_Y) / 2
endif

addz offsetPanel

rotz -gs_updirection
rotx -90

! --- top cylind ---

addz doorHeight - frameThk

material matFrame

cylind frameThk, doorWidth/2

del 1


! --- door sides ---

for i = 1 to 2
	rotz -45
	addx doorWidth/2
	rotz 90
	rotx 90

	dx = doorWidth * pi / 360 * asn (frameWidth / doorWidth)

	sect_fill fillFrame, fillPenBgFrame, fillPenFrame,  penFrame

	base
	bprism_ matFrame, matFrame, matFrame,
		8,	-frameThk,	doorWidth / 2,
		0,										0,			15,
		0,										frameThk,	8,
		frameThk,								frameThk,	15,
		doorWidth * pi / 8 - frameThk - dx, 	frameThk,	10,
		doorWidth * pi / 8 + frameThk + dx, 	frameThk,	15,
		doorWidth * pi / 4 - frameThk, 		frameThk,	10,
		doorWidth * pi / 4, 					frameThk,	13,
		doorWidth * pi / 4,					0,			15

	bprism_ matFrame, matFrame, matFrame,
		8, -frameThk, doorWidth / 2,
		0,										doorHeight - frameThk,		15,
		0,										doorHeight - frameThk*2,		8,
		frameThk,								doorHeight - frameThk*2,		15,
		doorWidth * pi / 8 - frameThk - dx,	doorHeight - frameThk*2,		10,
		doorWidth * pi / 8 + frameThk + dx,	doorHeight - frameThk*2,		15,
		doorWidth * pi / 4 - frameThk,		doorHeight - frameThk*2,		10,
		doorWidth * pi / 4,					doorHeight - frameThk*2,		13,
		doorWidth * pi / 4,					doorHeight - frameThk,		15

	vert 0, 0, 0
	vert 1, 0, 0
	vert 0, 0, 1
	vert 0, 1, 0
	coor 3, -1, -2, -3, -4
	body 1

	base
	bprism_ matFrame, matFrame, matFrame,
		4,	-frameThk,	doorWidth / 2,
		0,				frameThk,					8,
		frameThk,		frameThk,					15,
		frameThk,		doorHeight - frameThk*2,	10,
		0,				doorHeight - frameThk*2,	15
	bprism_ matFrame, matFrame, matFrame,
		4,	-frameThk,	doorWidth / 2,
		doorWidth * pi / 4 - frameThk,	frameThk,					8,
		doorWidth * pi / 4,				frameThk,					15,
		doorWidth * pi / 4,				doorHeight - frameThk * 2,	10,
		doorWidth * pi / 4 - frameThk,	doorHeight - frameThk * 2,	15
	bprism_ matFrame, matFrame, matFrame,
		4,	-frameThk,	doorWidth / 2,
		doorWidth * pi / 8 - frameThk - dx,	frameThk,					15,
		doorWidth * pi / 8 - frameThk - dx,	doorHeight - frameThk * 2,	10,
		doorWidth * pi / 8 + frameThk + dx,	doorHeight - frameThk * 2,	15,
		doorWidth * pi / 8 + frameThk + dx,	frameThk,					10
	vert 0, 0, 0
	vert 0, 1, 0
	vert 0, 0, 1
	vert 1, 0, 0
	coor 5, -1, -2, -3, -4
	body 1

	addz -(frameThk - glassThk) / 2

	base
	bprism_ matGlass, matGlass, matGlass,
		5, -glassThk, doorWidth / 2,
		frameThk,							frameThk,					15,
		frameThk,							doorHeight - frameThk * 2,	15,
		doorWidth * PI / 8 - frameThk - dx,	doorHeight - frameThk * 2,	15,
		doorWidth * PI / 8 - frameThk - dx,	frameWidth,					15,
		frameThk,							frameThk,					-1
	vert 0, 0, 0
	vert 1, 0, 0
	vert 0, 0, 1
	vert 0, 1, 0
	coor 1, -1, -2, -3, -4
	body 1

	del 1

	addx -(frameThk - glassThk) / 2

	base
	bprism_ matGlass, matGlass, matGlass,
		5,	-glassThk,	doorWidth/2,
		doorWidth * pi / 8 + frameThk + dx,		frameThk,					15,
		doorWidth * pi / 8 + frameThk + dx,		doorHeight - frameThk * 2,	15,
		doorWidth * pi / 4 - frameThk,			doorHeight - frameThk * 2,	15,
		doorWidth * pi / 4 - frameThk,			frameThk,					15,
		doorWidth * pi / 8 + frameThk + dx,		frameThk,					-1
	vert 0, 0, 0
	vert 0, 0, 1
	vert 1, 0, 0
	vert 0, 1, 0
	coor 1, -1, -2, -3, -4
	body 1

	del 1

	del 3

	rotz -135

next i

del 2


! --- middle coloumn ---

if doorHeight - frameThk > eps then cylind doorHeight - frameThk, radiusMiddleColumn

rotz 45


! --- panels ---

sect_fill fillSash, fillPenBgSash, fillPenSash,  penSash

for i=1 to 4
	addx radiusMiddleColumn
	addy sashThk/2
	rotx 90

	if iLeafType = 2 then
		material matPanel
		addz sashThk/2-panelThk/2

		base
		prism_ 5, panelThk,
			0,			0,		15,
			0,			sash_Y,	15,
			sash_X/2,	sash_Y,	15,
			sash_X/2,	0,		15,
			0,			0,		-1
		vert 0, 0, 0
		vert 1, 0, 0
		vert 0, 1, 0
		vert 0, 0, 1
		coor 1, -1, -2, -3, -4
		body 1

		del 1
	endif

	if iLeafType = 1 then
		px1 = 0
		px2 = 0 + sashWidth
		px3 = sash_X / 2 - sashWidth
		px4 = sash_X / 2
		py1 = 0
		py2 = 0 + sashWidth
		py3 = sash_Y - sashWidth
		py4 = sash_Y

		material matSash

		if gs_SashText_typ_m = 1 then
base
			prism_ 5, sashThk,		! left side
				px1,	py1,	15,
				px1,	py4,	15,
				px2,	py3,	15,
				px2,	py2,	15,
				px1,	py1,	-1

			prism_ 5, sashThk,		! right side
				px4,	py1,	15,
				px4,	py4,	15,
				px3,	py3,	15,
				px3,	py2,	15,
				px4,	py1,	-1
		vert 0, 0, 0
		vert 0, 1, 0
		vert 1, 0, 0
		vert 0, 0, 1
		coor 1, -1, -2, -3, -4
		body 1

		base
			prism_ 5, sashThk,		! bottom
				px1,	py1,	15,
				px4,	py1,	15,
				px3,	py2,	15,
				px2,	py2,	15,
				px1,	py1,	-1

			prism_ 5, sashThk,		! top
				px1,	py4,	15,
				px4,	py4,	15,
				px3,	py3,	15,
				px2,	py3,	15,
				px1,	py4,	-1
		vert 0, 0, 0
		vert 1, 0, 0
		vert 0, 1, 0
		vert 0, 0, 1
		coor 1, -1, -2, -3, -4
		body 1
		else
		base
			prism_ 5, sashThk,		! left side
				px1,	py1,	15,
				px1,	py4,	15,
				px2,	py4,	15,
				px2,	py1,	15,
				px1,	py1,	-1

			prism_ 5, sashThk,		! right side
				px4,	py1,	15,
				px4,	py4,	15,
				px3,	py4,	15,
				px3,	py1,	15,
				px4,	py1,	-1
		vert 0, 0, 0
		vert 0, 1, 0
		vert 1, 0, 0
		vert 0, 0, 1
		coor 1, -1, -2, -3, -4
		body 1

		base
			prism_ 5, sashThk,		! bottom
				px2,	py1,	15,
				px3,	py1,	15,
				px3,	py2,	15,
				px2,	py2,	15,
				px2,	py1,	-1

			prism_ 5, sashThk,		! top
				px2,	py4,	15,
				px3,	py4,	15,
				px3,	py3,	15,
				px2,	py3,	15,
				px2,	py4,	-1

		vert 0, 0, 0
		vert 1, 0, 0
		vert 0, 1, 0
		vert 0, 0, 1
		coor 1, -1, -2, -3, -4
		body 1

		endif

		material matGlass
		addz sashThk/2-glassThk/2

		base
		prism_ 5, glassThk,		! glass
			px2,	py2,	15,
			px3,	py2,	15,
			px3,	py3,	15,
			px2,	py3,	15,
			px2,	py2,	-1
		vert 0, 0, 0
		vert 1, 0, 0
		vert 0, 1, 0
		vert 0, 0, 1
		coor 1, -1, -2, -3, -4
		body 1

		del 1
	endif
	del 3
	rotz 90
next i

end
