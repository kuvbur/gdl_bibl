
unID = 1

tranWidth = 0
tranX = 0
call "CW Transformation" parameters A = A, AC_PanelCoords = AC_PanelCoords, ac_originIsFrameCenter = ac_originIsFrameCenter returned_parameters tranWidth, tranX
mul2 tranWidth, 1
add2 -tranX, 0


! =============================================================================
! Request Globals for Opening Lines
! =============================================================================

gs_opLinePen			= 1
gs_iSwingType			= 1
gs_iSlidingType			= 0
gs_swingLineType		= 1

call "OpeningOptions" parameters	bWindow				= 0,
									bOverride_MVO_2D	= bOverride_MVO_2D,
									iLineShapeCategory	= 2,			! LINE_SHAPE_CATEGORY_SLIDING
									or_opLinePen		= or_opLinePen,
									or_iSwingType		= or_iSwingType,
									or_iSlidingType		= or_iSlidingType,
									or_swingLineType	= or_swingLineType,
									bEnableSecondaryOpLineTypes = 0,
						returned_parameters dummy,
											gs_opLinePen,
											gs_iSwingType,
											gs_iSlidingType,
											gs_swingLineType,
											dummy


! =============================================================================
! Request globals for 2D (MVO Detail Level, MVO Reveal, Hotspots for IS)
! =============================================================================

iMVODetlevel2D			= 0
bMVOCasing2D			= 0
bShowAddHotspots		= 0
bMVODetlevelReveal		= 0
bShowAddHotspotsForIS	= 0

bGetMVOValueDlev2D		= (gs_detlevel_2d_m = 1)
bGetMVOValueCasing2D	= 0
bGetMVOValueDlevReveal	= 0
bGetHotspotsForIS		= 0

if (bGetMVOValueDlev2D | bGetMVOValueDlevReveal | bGetHotspotsForIS) & GLOB_SCRIPT_TYPE = 2 then
	call "GetDWSymbSettings" parameters	bWindow					= 0,
										bGetMVOValueDlev2D		= bGetMVOValueDlev2D,
										bGetMVOValueCasing2D	= bGetMVOValueCasing2D,
										bGetMVOValueDlevReveal	= bGetMVOValueDlevReveal,
										bGetHotspotsForIS		= bGetHotspotsForIS,
					returned_parameters iMVODetlevel2D,
										bMVOCasing2D,
										bMVODetlevelReveal,
										bShowAddHotspotsForIS
endif


! =============================================================================
! 2D detail level settings
! =============================================================================

if bGetMVOValueDlev2D then																! by MVO
	iLoD2D	= SYMBD_D_2LINELEAFOP_GLASS
	if iMVODetlevel2D < SYMBD_D_2LINELEAFOP_GLASS then		iLoD2D = SYMBD_M_1LINELEAF_2LINE
	if iMVODetlevel2D < SYMBD_M_1LINELEAF_2LINE then		iLoD2D = SYMBD_S_1LINE

	if GLOB_PREVIEW_MODE = 3 then				! in case of 2D-3D Favorite Preview
		iLoD2D = SYMBD_D_2LINELEAFOP_GLASS
	endif
else
	iLoD2D = SYMBD_OFF																! Off
	if gs_detlevel_2d_m = 50 then	iLoD2D = SYMBD_D_2LINELEAFOP_GLASS		! 50
	if gs_detlevel_2d_m = 100 then	iLoD2D = SYMBD_M_1LINELEAF_2LINE		! 100
	if gs_detlevel_2d_m = 200 then	iLoD2D = SYMBD_S_1LINE					! 200

	if gs_detlevel_2d_m < 0 then
		iLoD2D	= SYMBD_S_1LINE
		if GLOB_SCALE <= 150 and GLOB_SCALE > 75 then	iLoD2D = SYMBD_M_1LINELEAF_2LINE
		if GLOB_SCALE <= 75 then						iLoD2D = SYMBD_D_2LINELEAFOP_GLASS
	endif
endif

if iLoD2D = SYMBD_OFF then end


! --- setting center of door ---

add2 (leftSide_X + rightSide_X) / 2, 0

add2 0, AC_ClampWidth / 2 + offsetPanel

if (nPanels = 2 & iFixPanelPosition = 1) exor abs(gs_updirection - 180) < EPS then mul2 -1, 1

! --- defining dimensions ---

if gs_opening_dir_m = OPDIR_IN then
	fixSashOutside = offsetGlass
	fixsashInside	= fixSashOutside - sashThk
	movingSashOutside = fixSashInside
	movingSashInside = movingSashOutside - sashThk
else
	movingSashOutside = offsetGlass
	movingSashInside = movingSashOutside - sashThk
	fixSashOutside = movingSashInside
	fixsashInside	= fixSashOutside - sashThk
endif

frameLeftIn = -doorWidth / 2 + frameWidth
frameRightIn= doorWidth / 2 - frameWidth
frameLeftOut = -doorWidth / 2
frameRightOut = doorWidth / 2

frameOutside = max (fixSashOutside, movingSashOutside)
frameInside = frameOutside - frameThk


! --- drawing symbol ---

! --- 1:200 frame ---

if iLoD2D < SYMBD_M_1LINELEAF_2LINE then
	pen penFrame
	line2	frameLeftOut,	frameOutside,	frameLeftIn,	frameOutside
	line2	frameRightIn,	frameOutside,	frameRightOut,	frameOutside
endif


! --- 1:50, 1:100 frame ---

if iLoD2D > SYMBD_S_9 then
	pen penFrame
	fill fillFrame
	poly2_b 4, 1+2+4+32, fillPenFrame, fillPenBgFrame,
				frameLeftOut,	frameOutside,	1,
				frameLeftIn,	frameOutside,	1,
				frameLeftIn,	frameInside,	1,
				frameLeftOut,	frameInside,	1
	poly2_b 4, 1+2+4+32, fillPenFrame, fillPenBgFrame,
				 frameRightOut,	frameOutside,	1,
				 frameRightIn,	frameOutside,	1,
				 frameRightIn,	frameInside,	1,
				 frameRightOut,	frameInside,	1
endif


! --- 1:100, 1:200 sashes ---

if iLoD2D < SYMBD_D_2LINELEAFOP_GLASS then
	pen penSash
	if nPanels = 4 then
		if gs_opening_dir_m = OPDIR_IN then
			add2 -opWidth2d/2, 0
			line2  frameLeftIn/2,	movingSashInside,	0,				movingSashInside

			if gs_iSlidingType = LINE_SHAPE_SLIDING_ARROW then
				add2 frameLeftIn/4, movingSashInside
				mul2 -1, 1
				gosub "LineShapeArrow"
				del 2
			endif
			del 1

			pen penSash
			line2  frameLeftIn,		fixSashOutside,		frameLeftIn/2,	fixSashOutside
			line2  frameRightIn/2,	fixSashOutside,		frameRightIn,	fixSashOutside
			add2 opWidth2d/2, 0
			line2  0,				movingSashInside,	frameRightIn/2,	movingSashInside

			if gs_iSlidingType = LINE_SHAPE_SLIDING_ARROW then
				add2 frameRightIn/4, movingSashInside
				gosub "LineShapeArrow"
				del 1
			endif
			del 1
		else
			add2 -opWidth2d/2, 0
			line2  frameLeftIn/2,	movingSashOutside,	0,				movingSashOutside

			if gs_iSlidingType = LINE_SHAPE_SLIDING_ARROW then
				add2 frameLeftIn/4, movingSashOutside
				mul2 -1, 1
				gosub "LineShapeArrow"
				del 2
			endif
			del 1

			pen penSash
			line2  frameLeftIn,		fixsashInside,		frameLeftIn/2,	fixsashInside
			line2  frameRightIn/2,	fixsashInside,		frameRightIn,	fixsashInside
			add2 opWidth2d/2, 0
			line2  0,				movingSashOutside,	frameRightIn/2,	movingSashOutside

			if gs_iSlidingType = LINE_SHAPE_SLIDING_ARROW then
				add2 frameRightIn/4, movingSashOutside
				gosub "LineShapeArrow"
				del 1
			endif
			del 1
		endif
	else
		if gs_opening_dir_m = OPDIR_IN then
			add2 opWidth2d, 0
			line2  frameLeftIn,		movingSashInside,	0,				movingSashInside
			del 1
			line2  0,				fixSashOutside,		frameRightIn,	fixSashOutside

			if gs_iSlidingType = LINE_SHAPE_SLIDING_ARROW then
				add2 opWidth2d+frameLeftIn/2, movingSashInside
				gosub "LineShapeArrow"
				del 1
			endif
		else
			add2 opWidth2d, 0
			line2  frameLeftIn,		movingSashOutside,	0,				movingSashOutside
			del 1
			line2  0,				fixsashInside,		frameRightIn,	fixsashInside

			if gs_iSlidingType = LINE_SHAPE_SLIDING_ARROW then
				add2 opWidth2d+frameLeftIn/2, movingSashOutside
				gosub "LineShapeArrow"
				del 1
			endif
		endif
	endif
endif


! --- 1:50 sashes ---

if iLoD2D > SYMBD_M_9 then
	pen penSash
	fill fillSash

	if nPanels = 4 then
		poly2_b 4, 1+2+4+64, fillPenSash, fillPenBgSash,		!fix sash
				 frameLeftIn,	 	fixSashOutside,		1,
				 frameLeftIn / 2,	fixSashOutside,		1,
				 frameLeftIn / 2,	fixsashInside,		1,
				 frameLeftIn,		fixsashInside,		1

		add2 -opWidth2d/2, 0
		poly2_b 4, 1+2+4+64, fillPenSash, fillPenBgSash,		!moving sash
				 0,	 				movingSashInside,	1,
				 frameLeftIn / 2,	movingSashInside,	1,
				 frameLeftIn / 2,	movingSashOutside,	1,
				 0,					movingSashOutside,	1

		if gs_iSlidingType = LINE_SHAPE_SLIDING_ARROW then
			add2 frameLeftIn/4, (movingSashInside + sashThk/2)*(gs_opening_dir_m = OPDIR_IN) + (movingSashOutside - sashThk/2)*(gs_opening_dir_m = OPDIR_OUT)
			mul2 -1, 1
			gosub "LineShapeArrow"
			del 2
		endif
		del 1

		pen penSash
		fill fillSash
		poly2_b 4, 1+2+4+64, fillPenSash, fillPenBgSash,		!fix sash
				 frameRightIn / 2,	fixsashInside,		1,
				 frameRightIn,		fixsashInside,		1,
				 frameRightIn,		fixSashOutside,		1,
				 frameRightIn / 2,	fixSashOutside,		1

		add2 opWidth2d/2, 0
		poly2_b 4, 1+2+4+64, fillPenSash, fillPenBgSash,		!moving sash
				 frameRightIn / 2,	movingSashInside,	1,
				 0,					movingSashInside,	1,
				 0,					movingSashOutside,	1,
				 frameRightIn / 2,	movingSashOutside,	1

		if gs_iSlidingType = LINE_SHAPE_SLIDING_ARROW then
			add2 frameRightIn/4, (movingSashInside + sashThk/2)*(gs_opening_dir_m = OPDIR_IN) + (movingSashOutside - sashThk/2)*(gs_opening_dir_m = OPDIR_OUT)
			gosub "LineShapeArrow"
			del 1
		endif
		del 1
	else
		add2 opWidth2d, 0
		poly2_b 4, 1+2+4+64, fillPenSash, fillPenBgSash,		!moving sash
				 frameLeftIn,		movingSashOutside,	1,
				 0,					movingSashOutside,	1,
				 0,					movingSashInside,	1,
				 frameLeftIn,		movingSashInside,	1

		if gs_iSlidingType = LINE_SHAPE_SLIDING_ARROW then
			add2 frameLeftIn/2, (movingSashInside + sashThk/2)*(gs_opening_dir_m = OPDIR_IN) + (movingSashOutside - sashThk/2)*(gs_opening_dir_m = OPDIR_OUT)
			gosub "LineShapeArrow"
			del 1
		endif
		del 1

		pen penSash
		fill fillSash
		poly2_b 4, 1+2+4+64, fillPenSash, fillPenBgSash,		!fix sash
				 0,					fixSashOutside,		1,
				 frameRightIn,		fixSashOutside,		1,
				 frameRightIn,		fixsashInside,		1,
				 0,					fixsashInside,		1
	endif
endif

if gs_iSlidingType = LINE_SHAPE_SLIDING_SIMPLE_LINE then
	pen gs_opLinePen
	line_type gs_swingLineType

	add2 0, frameOutside - frameThk/2
	line2 0, -0.50, 0, 0.50
	del 1
endif


end


"LineShapeArrow":
	if gs_opening_dir_m = OPDIR_IN then mul2 1, -1

	pen gs_opLinePen
	line_type gs_swingLineType

	if bLineShapeArrowNED then
		line2 0, 0, 0, 0.12
	endif
	line2 0, 0.12, 0.20, 0.12
	line2 0.20, 0.12, 0.15, 0.17
	line2 0.20, 0.12, 0.15, 0.07

	if gs_opening_dir_m = OPDIR_IN then del 1

	line_type 1
return
