
!<ZsK>

if gs_detlevel_3D_m = DLEV3D_OFF then end

endPoint = WALL_THICKNESS/2

elevation = 0
if AC_fit_to_wall_height then
	ZZYZX = WALL_HEIGHT
	if ABS(ac_wall_slant_angle1) > EPS then
		elevation = -GLOB_ELEVATION / sin (ac_wall_slant_angle1)
	endif
endif

if gs_useWallPen_3D then
	wallPen_3D = WALL_VIEW_PEN
else
	wallPen_3D = gs_wallPen_3D
endif

if gs_useWallMat then
	wallMatLeft = 	WALL_MAT_A
	wallMatRight = 	WALL_MAT_B
	wallMatVert = 	WALL_MAT_EDGE
	wallMatHoriz = 	WALL_MAT_EDGE
else
	wallMatLeft = 	matLeft
	wallMatRight = 	matRight
	wallMatVert = 	matEdge
	wallMatHoriz = 	matEdge
endif

dim trafo_array[][]

ROTz -90
numTrafo = 1
trafo_array[numTrafo][1] = TRAFO_ROT_Z
trafo_array[numTrafo][2] = -90

ADDz elevation
numTrafo = numTrafo + 1
trafo_array[numTrafo][1] = TRAFO_ADD_Z
trafo_array[numTrafo][2] = elevation

pen wallPen_3D

! Used for the cut part in the Section/Elevation window
sect_fill WallFillType, WallFillBackPen, WallFillPen, WallLinePen, WallLineType

if AC_CutWidth > EPS then
	bDoCut = 1
	for i = 1 to 2

		if ABS(GLOB_ELEVATION) < EPS or AC_fit_to_wall_height then
			tempEdge11 = 5
		else
			if GLOB_ELEVATION > EPS and not(AC_fit_to_wall_height) then
				tempEdge11 = 5*gs_useEndLine_3D
			else
				tempEdge11 = 0
			endif
		endif
		if ABS(ZZYZX+GLOB_ELEVATION - WALL_HEIGHT) < EPS then
			tempEdge13 = 5 + 2*gs_useEndLine_3D
		else
			if (ZZYZX+GLOB_ELEVATION) < WALL_HEIGHT then
				if ABS(GLOB_ELEVATION) < EPS or AC_fit_to_wall_height then
					tempEdge13 = 5*gs_useEndLine_3D
				else
					tempEdge13 = 7*gs_useEndLine_3D
				endif
			else
				tempEdge13 = 0
			endif
		endif

		if GLOB_ELEVATION < -EPS then
			! below-wall part
			call "SkinRect" PARAMETERS trafo_array = trafo_array, numTrafo = numTrafo, gs_useWallMat = gs_useWallMat,
					startX = 0, startY = 0,
					endX = length, endY = WALL_THICKNESS,
					innerRadius = r0,
					incAngle = wallIncl,
					ac_wall_slant_angle1 = ac_wall_slant_angle1, ac_wall_slant_angle2 = ac_wall_slant_angle2,
					trapType = 1,
					bDoCut = bDoCut, height = ABS(GLOB_ELEVATION),
					edge1 = 13, edge2 = 15 , edge3 = 10, edge4 = 8,
					matLeft = wallMatLeft, matRight = wallMatRight, matVert = wallMatVert, matHoriz = wallMatHoriz

			elevCompensation = -GLOB_ELEVATION
			hInWallPart = min (ZZYZX+elevCompensation, WALL_HEIGHT)
		else
			elevCompensation = 0
			hInWallPart = min (ZZYZX+elevCompensation, WALL_HEIGHT-GLOB_ELEVATION)
		endif

		! in-wall part
		addz elevCompensation
		numOwnTrafo = 1
		numTrafo = numTrafo + 1
		trafo_array[numTrafo][1] = TRAFO_ADD_Z
		trafo_array[numTrafo][2] = elevCompensation

		call "SkinRect" PARAMETERS trafo_array = trafo_array, numTrafo = numTrafo, gs_useWallMat = gs_useWallMat,
				startX = 0, startY = 0,
				endX = length, endY = WALL_THICKNESS,
				innerRadius = r0,
				incAngle = wallIncl,
				ac_wall_slant_angle1 = ac_wall_slant_angle1, ac_wall_slant_angle2 = ac_wall_slant_angle2,
				trapType = 1,
				bDoCut = bDoCut, height = hInWallPart,
				edge1 = 8 + tempEdge11, edge2 = 8 + 7*gs_useEndLine_3D, edge3 = 8 + tempEdge13, edge4 = 8,
				matLeft = wallMatLeft, matRight = wallMatRight, matVert = wallMatVert, matHoriz = wallMatHoriz

		numTrafo = numTrafo - numOwnTrafo
		del 1

		! above-wall part
		if (ZZYZX+GLOB_ELEVATION) > WALL_HEIGHT then
			ADDz WALL_HEIGHT-GLOB_ELEVATION
			numOwnTrafo = 1
			numTrafo = numTrafo + 1
			trafo_array[numTrafo][1] = TRAFO_ADD_Z
			trafo_array[numTrafo][2] = WALL_HEIGHT-GLOB_ELEVATION

			call "SkinRect" PARAMETERS trafo_array = trafo_array, numTrafo = numTrafo, gs_useWallMat = gs_useWallMat,
					startX = 0, startY = 0,
					endX = length, endY = WALL_THICKNESS,
					innerRadius = r0,
					incAngle = wallIncl,
					ac_wall_slant_angle1 = ac_wall_slant_angle1, ac_wall_slant_angle2 = ac_wall_slant_angle2,
					trapType = 1,
					bDoCut = bDoCut, height = (ZZYZX+GLOB_ELEVATION) - WALL_HEIGHT,
					edge1 = 8, edge2 = 15 , edge3 = 15, edge4 = 8,
					matLeft = wallMatLeft, matRight = wallMatRight, matVert = wallMatVert, matHoriz = wallMatHoriz

			numTrafo = numTrafo - numOwnTrafo
			del 1
		endif

		bDoCut = 0
	next i
endif

! === Model of Wall End Cap ====================================================
! --- replace AC hotspots at the ends ---
call "Resize Wall End" PARAMETERS GS_HotspotUnIDBegin = 20000,
		cutWidthAngle = cutWidthAngle, AC_CutWidth = AC_CutWidth,
		r0 = r0, wallIncl = wallIncl, onWallBeg = onWallBeg,
		zzyzx = zzyzx

unID=1
hotspot 0, endPoint, 0, unID, gs_end_overhang, 1+128: unID=unID+1
hotspot 1, endPoint, 0, unID, gs_end_overhang, 3: unID=unID+1
hotspot -gs_end_overhang, endPoint, 0, unID, gs_end_overhang, 2: unID=unID+1

hotspot 0, endPoint, ZZYZX, unID, gs_end_overhang, 1+128: unID=unID+1
hotspot 1, endPoint, ZZYZX, unID, gs_end_overhang, 3: unID=unID+1
hotspot -gs_end_overhang, endPoint, ZZYZX, unID, gs_end_overhang, 2: unID=unID+1

if not(AC_fit_to_wall_height) then

	hotspot 0, 0, 0, unID, ZZYZX, 1+128:unID=unID+1
	hotspot 0, 0, -1, unID, ZZYZX, 3:unID=unID+1
	hotspot 0, 0, ZZYZX, unID, ZZYZX, 2:unID=unID+1

	hotspot 0, WALL_THICKNESS, 0, unID, ZZYZX, 1+128:unID=unID+1
	hotspot 0, WALL_THICKNESS, -1, unID, ZZYZX, 3:unID=unID+1
	hotspot 0, WALL_THICKNESS, ZZYZX, unID, ZZYZX, 2:unID=unID+1

endif


RESOL gs_resol
mul gs_end_overhang / ((WALL_THICKNESS/2) + 0.01), 1, 1
numTrafo = numTrafo + 1
trafo_array[numTrafo][1] = TRAFO_MUL_X
trafo_array[numTrafo][2] = gs_end_overhang / ((WALL_THICKNESS/2) + 0.01)

if abs(ac_wall_slant_angle1 - ac_wall_slant_angle2) < EPS then
	slantAngle = -(ac_wall_slant_angle1 - 90)
	if SYMB_MIRRORED then
		slantAngle = -slantAngle
	endif
	zCoordModif = 0
	if SYMB_MIRRORED & ABS(ac_wall_slant_angle1) > EPS then
		zCoordModif = -WALL_THICKNESS / tan(ac_wall_slant_angle1)
	endif

	if gs_useWallMat and WALL_MAT_A = WALL_MAT_B or not(gs_useWallMat) and matLeft=matRight then

		if AC_CutWidth > EPS and GLOB_ELEVATION > EPS and not(AC_fit_to_wall_height) then
			mask1_BottomLine = 1
		else
			mask1_BottomLine = 0
		endif
		if (ZZYZX+GLOB_ELEVATION) < WALL_HEIGHT then
			mask1_WallHeight = 12
		else
			mask1_WallHeight = 8
		endif

		sprism_{2} wallMatHoriz, wallMatHoriz, wallMatRight,
			7,
			0, 0, 1, 0, ZZYZX + zCoordModif, slantAngle,
			0, 0, 1, 0, 0 + zCoordModif, slantAngle,
			0,     0,                13,      wallMatRight,
			-0.01, 0,                79,      wallMatRight,
			-0.01, WALL_THICKNESS/2, 900,     wallMatRight,
			-0.01, -180,             4000,    wallMatRight,
			-0.01, WALL_THICKNESS,   13,      wallMatRight,
			0,     WALL_THICKNESS,   mask1_WallHeight + mask1_BottomLine, wallMatRight,
			0,     0,                -1,      wallMatRight

		gosub "wallTextureCoor"

	else

		sprism_{2} wallMatHoriz, wallMatHoriz, wallMatRight,
			6,
			0, 0, 1, 0, ZZYZX + zCoordModif, slantAngle,
			0, 0, 1, 0, 0 + zCoordModif, slantAngle,
			0, WALL_THICKNESS/2, 8, wallMatRight,
			0, WALL_THICKNESS, 13, wallMatRight,
			-0.01, WALL_THICKNESS, 79, wallMatRight,
			-0.01, WALL_THICKNESS/2, 900, wallMatRight,
			-0.01, 90, 4008, wallMatRight,
			0, WALL_THICKNESS/2, -1, wallMatRight

		gosub "wallTextureCoor"

		sprism_{2} wallMatHoriz, wallMatHoriz, wallMatLeft,
			6,
			0, 0, 1, 0, ZZYZX + zCoordModif, slantAngle,
			0, 0, 1, 0, 0 + zCoordModif, slantAngle,
			0, 0, 13, wallMatLeft,
			-0.01, 0, 79, wallMatLeft,
			-0.01, WALL_THICKNESS/2, 900, wallMatLeft,
			-0.01, -90, 4008, wallMatLeft,
			0, WALL_THICKNESS/2, 8, wallMatLeft,
			0, 0, -1, wallMatLeft

		gosub "wallTextureCoor"

		lin_ -0.01-WALL_THICKNESS/2, WALL_THICKNESS/2,0,-0.01-WALL_THICKNESS/2, WALL_THICKNESS/2,ZZYZX

	endif
endif

del 1

del 2


end


"wallTextureCoor":
	if gs_useWallMat then
		for iTrafo = numTrafo to 1 step -1
			if abs(trafo_array[iTrafo][1] - TRAFO_ADD_X) < EPS then
				addx -trafo_array[iTrafo][2]
			endif
			if abs(trafo_array[iTrafo][1] - TRAFO_ADD_Y) < EPS then
				addy -trafo_array[iTrafo][2]
			endif
			if abs(trafo_array[iTrafo][1] - TRAFO_ADD_Z) < EPS then
				addz -trafo_array[iTrafo][2]
			endif
			if abs(trafo_array[iTrafo][1] - TRAFO_ROT_X) < EPS then
				rotx -trafo_array[iTrafo][2]
			endif
			if abs(trafo_array[iTrafo][1] - TRAFO_ROT_Y) < EPS then
				roty -trafo_array[iTrafo][2]
			endif
			if abs(trafo_array[iTrafo][1] - TRAFO_ROT_Z) < EPS then
				rotz -trafo_array[iTrafo][2]
			endif
			if abs(trafo_array[iTrafo][1] - TRAFO_MUL_X) < EPS then
				mulx 1/trafo_array[iTrafo][2]
			endif
			if abs(trafo_array[iTrafo][1] - TRAFO_MUL_Y) < EPS then
				muly 1/trafo_array[iTrafo][2]
			endif
			if abs(trafo_array[iTrafo][1] - TRAFO_MUL_Z) < EPS then
				mulz 1/trafo_array[iTrafo][2]
			endif
		next iTrafo

		base
		vert WALL_TEXTURE_WRAP[3], WALL_TEXTURE_WRAP[4], WALL_TEXTURE_WRAP[5]
		vert WALL_TEXTURE_WRAP[6], WALL_TEXTURE_WRAP[7], WALL_TEXTURE_WRAP[8]
		vert WALL_TEXTURE_WRAP[9], WALL_TEXTURE_WRAP[10], WALL_TEXTURE_WRAP[11]
		vert WALL_TEXTURE_WRAP[12], WALL_TEXTURE_WRAP[13], WALL_TEXTURE_WRAP[14]
		coor{2} WALL_TEXTURE_WRAP[1], WALL_TEXTURE_WRAP[2], -1, -2, -3, -4
		body 1

		for iTrafo = 1 to numTrafo
			if (trafo_array[iTrafo][1] > 0) and (trafo_array[iTrafo][1] < 10) then
				del 1
			endif
		next iTrafo
	else
		base
		vert 0, 0, 0
		vert 1, 0, 0
		vert 0, 1, 0
		vert 0, 0, 1
		coor 2, -1, -2, -3, -4
		body 1
	endif
return
