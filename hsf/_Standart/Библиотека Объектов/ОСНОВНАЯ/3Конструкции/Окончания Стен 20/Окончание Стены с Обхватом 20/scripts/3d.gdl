
!<TZs>


if  b3DRepresentation & (GLOB_STRUCTURE_DISPLAY = STRUCTURE_ENTIRE_STRUCTURE) then
	elevation = 0
	if AC_fit_to_wall_height then
	ZZYZX = WALL_HEIGHT
	elevation = -GLOB_ELEVATION / sin (ac_wall_slant_angle1)
	endif

	rotz -90
	addz elevation
	pen gs_wallEndPen_3D

	! bottom arm
	if thickFirst > eps then
	! bottom corner
	if thickCap > eps then
		if length > eps then
			mask2 = 0
			mask3 = 0
		else
			mask2 = 1 + 2
			mask3 = 2
		endif
			call "SkinRect" PARAMETERS numTrafo = 0, gs_useWallMat = 0,
				startX = -thickCap, startY = -thickFirst,
				endX = 0, endY = 0,
				innerRadius = r0, incAngle = wallIncl, trapType = trapFirst,
				ac_wall_slant_angle1 = ac_wall_slant_angle1, ac_wall_slant_angle2 = ac_wall_slant_angle2,
				bDoCut = 0, height = ZZYZX,
				edge1 = 1 + 2 + 8, edge2 = 4 + 8 + mask2, edge3 = 1 + 8 + mask3, edge4 = 1 + 2 + 8,
				matLeft = matCap, matRight = matCap, matVert = matCap, matHoriz = matCap
		mask1 = 0
		mask4 = 0
	else
		mask1 = 2
		mask4 = 1 + 2 + 4
	endif

	! bottom arm
	if length > eps then
			call "SkinRect" PARAMETERS numTrafo = 0, gs_useWallMat = 0,
				startX = 0, startY = -thickFirst,
				endX = length, endY = 0,
				innerRadius = r0, incAngle = wallIncl, trapType = trapFirst,
				ac_wall_slant_angle1 = ac_wall_slant_angle1, ac_wall_slant_angle2 = ac_wall_slant_angle2,
				bDoCut = 0, height = ZZYZX,
				edge1 = 1 + 4 + 8 + mask1, edge2 = 1 + 2 + 4 + 8, edge3 = 1 + 2 + 4 + 8, edge4 = 8 + mask4,
				matLeft = matCap, matRight = matCap, matVert = matCap, matHoriz = matCap
	endif

	endif

	! upper arm
	if thickSecond > eps then
	! upper corner
	if thickCap > eps then
		if length > eps then
			mask2 = 0
			mask3 = 0
		else
			mask2 = 2 + 4
			mask3 = 2
		endif
			call "SkinRect" PARAMETERS numTrafo = 0, gs_useWallMat = 0,
				startX = -thickCap, startY = WALL_THICKNESS,
				endX = 0, endY = WALL_THICKNESS + thickSecond,
				innerRadius = r0, incAngle = wallIncl, trapType = trapSecond,
				ac_wall_slant_angle1 = ac_wall_slant_angle1, ac_wall_slant_angle2 = ac_wall_slant_angle2,
				bDoCut = 0, height = ZZYZX,
				edge1 = 6 + 8, edge2 = 1 + 8 + mask2, edge3 = 4 + 8 + mask3, edge4 = 6 + 8,
				matLeft = matCap, matRight = matCap, matVert = matCap, matHoriz = matCap
		mask1 = 0
		mask4 = 0
	else
		mask1 = 2
		mask4 = 1 + 2 + 4
	endif

	! upper arm
	if length > eps then
			call "SkinRect" PARAMETERS numTrafo = 0, gs_useWallMat = 0,
				startX = 0, startY = WALL_THICKNESS,
				endX = length, endY = WALL_THICKNESS + thickSecond,
				innerRadius = r0, incAngle = wallIncl, trapType = trapSecond,
				ac_wall_slant_angle1 = ac_wall_slant_angle1, ac_wall_slant_angle2 = ac_wall_slant_angle2,
				bDoCut = 0, height = ZZYZX,
				edge1 = 1 + 4 + 8 + mask1, edge2 = 1 + 2 + 4 + 8, edge3 = 1 + 2 + 4 + 8, edge4 = 8 + mask4,
				matLeft = matCap, matRight = matCap, matVert = matCap, matHoriz = matCap
	endif
	endif

	! middle part
	if thickCap > eps then
	mask = 0
	if thickFirst < eps then
		mask = mask + 1
	endif
	if thickSecond < eps then
		mask = mask + 4
	endif
		call "SkinRect" PARAMETERS numTrafo = 0, gs_useWallMat = 0,
			startX = -thickCap, startY = 0,
			endX = 0, endY = WALL_THICKNESS,
			innerRadius = r0, incAngle = wallIncl, trapType = 1,
			ac_wall_slant_angle1 = ac_wall_slant_angle1, ac_wall_slant_angle2 = ac_wall_slant_angle2,
			bDoCut = 0, height = ZZYZX,
			edge1 = 2 + 8 + mask, edge2 = 2 + 8 + mask, edge3 = 2 + 8 + mask, edge4 = 2 + 8 + mask,
			matLeft = matCap, matRight = matCap, matVert = matCap, matHoriz = matCap
	endif

	! ===== Hotspots =====

	! --- replace AC hotspots at the ends ---
	call "Resize Wall End" PARAMETERS ZZYZX = ZZYZX,
		GS_HotspotUnIDBegin = 20000,
		cutWidthAngle = cutWidthAngle, AC_CutWidth = AC_CutWidth,
		r0 = r0, wallIncl = wallIncl, onWallBeg = onWallBeg

	! --- bounding hotspots ---

	! - side thickness -
	xMoveTo = AC_CutWidth
	gosub 1

	unID = 1

	for i = 1 to 2
	if SYMB_MIRRORED then
		hotspot 0, 0, 0, unID, thickOtherSide, 1+128						! base
		unID = unID + 1
		hotspot 0, 0.1, 0, unID, thickOtherSide, 3							! reference
		unID = unID + 1
		hotspot 0, additionIfMirr - thickOtherSide, 0, unID, thickOtherSide, 2	! moving
		unID = unID + 1

		hotspot 0, WALL_THICKNESS, 0, unID, thickRefSide, 1+128				! base
		unID = unID + 1
		hotspot 0, 0, 0, unID, thickRefSide, 3								! reference
		unID = unID + 1
		hotspot 0, WALL_THICKNESS + additionNotMirr + thickRefSide, 0, unID, thickRefSide, 2	! moving
		unID = unID + 1
	else
		hotspot 0, 0, 0, unID, thickRefSide, 1+128							! base
		unID = unID + 1
		hotspot 0, 0.1, 0, unID, thickRefSide, 3							! reference
		unID = unID + 1
		hotspot 0, additionIfMirr - thickRefSide, 0, unID, thickRefSide, 2	! moving
		unID = unID + 1

		hotspot 0, WALL_THICKNESS, 0, unID, thickOtherSide, 1+128			! base
		unID = unID + 1
		hotspot 0, 0, 0, unID, thickOtherSide, 3							! reference
		unID = unID + 1
		hotspot 0, WALL_THICKNESS + additionNotMirr + thickOtherSide, 0, unID, thickOtherSide, 2	! moving
		unID = unID + 1
	endif

	addz ZZYZX
	next i
	del 2

	del moveStepNum

	! - end thickness -
	if r0 < EPS then

	xMoveTo = -thickCap
	gosub 1

	for i = 1 to 2
		hotspot thickCap, additionIfMirr - thickFirst, 0, unID, thickCap, 1+128	! base
		unID = unID + 1
		hotspot thickCap + 0.1, additionIfMirr - thickFirst, 0, unID, thickCap, 3	! reference
		unID = unID + 1
		hotspot 0, additionIfMirr - thickFirst, 0, unID, thickCap, 2			! moving
		unID = unID + 1

		hotspot thickCap, WALL_THICKNESS + additionNotMirr + thickSecond, 0, unID, thickCap, 1+128	! base
		unID = unID + 1
		hotspot thickCap + 0.1, WALL_THICKNESS + additionNotMirr + thickSecond, 0, unID, thickCap, 3	! reference
		unID = unID + 1
		hotspot 0, WALL_THICKNESS + additionNotMirr + thickSecond, 0, unID, thickCap, 2			! moving
		unID = unID + 1

		addz ZZYZX
	next i
	del 2

	del moveStepNum

	else

	for i = 1 to 2
		hotspot 0, -thickFirst, 0, unID, thickCapAngle, 4+128				! base
		unID = unID + 1
		xMoveTo = -thickCap
		gosub 1
		hotspot 0, -thickFirst, 0, unID, thickCapAngle, 5, thickCap			! moving - display param: thickCap
		del moveStepNum
		unID = unID + 1
		if onWallBeg then
			hotspot 0, r0 + WALL_THICKNESS, 0, unID, thickCapAngle, 6	! centerpoint
			unID = unID + 1
			hotspot 0, r0 + WALL_THICKNESS, -1, unID, thickCapAngle, 7	! reference
			unID = unID + 1
		else
			hotspot 0, -r0, 0, unID, thickCapAngle, 6					! centerpoint
			unID = unID + 1
			hotspot 0, -r0, 1, unID, thickCapAngle, 7					! reference
			unID = unID + 1
		endif

		hotspot 0, WALL_THICKNESS + thickSecond, 0, unID, thickCapAngle, 4+128		! base
		unID = unID + 1
		xMoveTo = -thickCap
		gosub 1
		hotspot 0, WALL_THICKNESS + thickSecond, 0, unID, thickCapAngle, 5, thickCap	! moving - display param: thickCap
		del moveStepNum
		unID = unID + 1
		if onWallBeg then
			hotspot 0, r0 + WALL_THICKNESS, 0, unID, thickCapAngle, 6	! centerpoint
			unID = unID + 1
			hotspot 0, r0 + WALL_THICKNESS, -1, unID, thickCapAngle, 7	! reference
			unID = unID + 1
		else
			hotspot 0, -r0, 0, unID, thickCapAngle, 6					! centerpoint
			unID = unID + 1
			hotspot 0, -r0, 1, unID, thickCapAngle, 7					! reference
			unID = unID + 1
		endif

		addz ZZYZX
	next i
	del 2

	endif

	del 2

endif

end


! =============================================================================
! === SUBROUTINES
! =============================================================================

! =============================================================================
!		Move the coorinate system to a given X coordinate
! -----------------------------------------------------------------------------
! Input Parameters:
!	r0:			inner radius of the curved wall (0 otherwise)
!	wallIncl:	signed inclination of trapeze wall (0 otherwise)
!	alpha:		angle of the object in curved wall
!	length:		full length of the object
!	xMoveTo:	the X coordinate to move to
! Output:
!	additionIfMirr:		Y addition at the current X position if SYMB_MIRRORED = 1
!	additionNotMirr:	Y addition at the current X position if SYMB_MIRRORED = 0
!	moveStepNum:		number of the transformation added by the subroutine
! Remark:
!	The macro moves the coordinate system to the desired X coordinate,
!	after the place operation write a 'del moveStepNum' command
! =============================================================================

1:

additionIfMirr = 0
additionNotMirr = 0
if r0 > EPS then

	if onWallBeg then
		addy r0+WALL_THICKNESS
		rotz (xMoveTo / (r0 + WALL_THICKNESS/2)) / PI * 180
		addy -r0-WALL_THICKNESS
	else
		addy -r0
		rotz -(xMoveTo / (r0 + WALL_THICKNESS/2)) / PI * 180
		addy r0
	endif

	moveStepNum = 3

else

	if SYMB_MIRRORED then
		additionIfMirr = xMoveTo * tan(wallIncl)
	else
		additionNotMirr = xMoveTo * tan(wallIncl)
	endif

	addx xMoveTo
	moveStepNum = 1

endif

return
