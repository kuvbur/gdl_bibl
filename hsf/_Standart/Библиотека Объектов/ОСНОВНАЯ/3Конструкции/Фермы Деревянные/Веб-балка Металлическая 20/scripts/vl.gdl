
hideparameter all "A", "B", "ZZYZX"

!================================================================================
! List Parameters
!================================================================================

call "FM_types" parameters all


!================================================================================
! Detail Levels
!================================================================================

values{2} "gs_detlevel_3D_m" DETLEVEL_3D_DETAILED, st3dDetLevelValues[1],
							DETLEVEL_3D_SIMPLE, st3dDetLevelValues[2],
							DETLEVEL_3D_OFF, st3dDetLevelValues[3]


!================================================================================
! Joist Types and Heights
!================================================================================

values "strJoistType" strJoistTypeValues
values "iJoistType" iJoistTypeValues


! --- String-Integer Connection -------------------------------------------------

if GLOB_MODPAR_NAME = "strJoistType" then
	iJoistType = 1
	for i = 1 to vardim1(enabledJoistDefaults)
		if enabledJoistDefaults[i] > 0 then
			if strJoistType = joistNames[enabledJoistDefaults[i]]then
				iJoistType = i
				parameters iJoistType = iJoistType

				i = vardim1(enabledJoistDefaults)		! break
			endif
		endif
	next i
else
	strJoistType = joistNames[1]
	for i = 1 to vardim1(enabledJoistDefaults)
		if enabledJoistDefaults[i] > 0 then
			if iJoistType = enabledJoistDefaults[i] then
				strJoistType = joistNames[enabledJoistDefaults[i]]
				parameters strJoistType = strJoistType

				i = vardim1(enabledJoistDefaults)		! break
			endif
		endif
	next i
endif

joistHeight = joistHeights[iJoistType]
parameters joistHeight = joistHeight



!================================================================================
! Timber Chord Values
!================================================================================

dim strChordSizeValues[]
dim iChordSizeValues[]

j = 1
for i = 1 to vardim1(enabledChordDefaults)
	if enabledChordDefaults[i] > 0 then
		strChordSizeValues[j] = chordProfileDefaults[i]
		iChordSizeValues[j] = i
		j = j + 1
	endif
next i

values "strChordSize" strChordSizeValues
values "iChordSize" iChordSizeValues

! --- String-Integer Connection -------------------------------------------------

if GLOB_MODPAR_NAME = "strChordSize" then
	iChordSize = 1
	for i = 1 to vardim1(enabledChordDefaults)
		if enabledChordDefaults[i] > 0 then
			if strChordSize = chordProfileDefaults[enabledChordDefaults[i]]then
				iChordSize = i
				parameters iChordSize = iChordSize

				i = vardim1(enabledChordDefaults)		! break
			endif
		endif
	next i
else
	strChordSize = chordProfileDefaults[1]
	for i = 1 to vardim1(enabledChordDefaults)
		if enabledChordDefaults[i] > 0 then
			if iChordSize = enabledChordDefaults[i] then
				strChordSize = chordProfileDefaults[enabledChordDefaults[i]]
				parameters strChordSize = strChordSize

				i = vardim1(enabledChordDefaults)		! break
			endif
		endif
	next i
endif

! --- Chord Sizes ---------------------------------------------------------------

for i = 1 to vardim1(enabledChordDefaults)
	if enabledChordDefaults[i] > 0 then
		if strChordSize = chordProfileDefaults[enabledChordDefaults[i]]then
			chordHeight = chordProfileSizes[i][1]
			chordWidth  = chordProfileSizes[i][2]
			parameters chordHeight = chordHeight, chordWidth = chordWidth

			i = vardim1(enabledChordDefaults)		! break
		endif
	endif
next i



!================================================================================
! Geometry
!================================================================================

values "strEndTrimming" strEndTrimmingValues
values "iEndTrimming" FRAMED, SOLID_WEB

if GLOB_MODPAR_NAME = "strEndTrimming" then
	iEndTrimming = FRAMED
	if strEndTrimming = strEndTrimmingValues[2] then iEndTrimming = SOLID_WEB
	parameters iEndTrimming = iEndTrimming
else
	strEndTrimming = strEndTrimmingValues[1]
	if iEndTrimming = SOLID_WEB then strEndTrimming = strEndTrimmingValues[2]
	parameters strEndTrimming = strEndTrimming
endif

values "strWebBracing" strWebBracingValues
values "iWebBracing" NORMAL, STAGGERED, DOUBLE_DENSITY

if GLOB_MODPAR_NAME = "strWebBracing" then
	iWebBracing = NORMAL
	if strWebBracing = strWebBracingValues[2] then iWebBracing = STAGGERED
	if strWebBracing = strWebBracingValues[3] then iWebBracing = DOUBLE_DENSITY
	parameters iWebBracing = iWebBracing
else
	strWebBracing = strWebBracingValues[1]
	if iWebBracing = STAGGERED then strWebBracing = strWebBracingValues[2]
	if iWebBracing = DOUBLE_DENSITY then strWebBracing = strWebBracingValues[3]
	parameters strWebBracing = strWebBracing
endif


!================================================================================
! Sizes
!================================================================================

! --- A ---

if iEndTrimming = SOLID_WEB then

	values "A" range[ASolidLowerLimit, ASolidUpperLimit]

else

	max_column_number = INT((unit_width-chordHeight*2)/d_columns)+2		! --- Sum for both ends
	if max_column_number MOD 2 > EPS then max_column_number = max_column_number-1

	n_max_units = INT((max_A-chordHeight*2-chordHeight*2)/unit_width)

	dim possible_A_values[]
	iValues = 0
	for i=1 to n_max_units
		for j=0 to max_column_number/2
			len_calc 		= i*unit_width + chordHeight*2 + d_columns*2*j
			len_calc_next 	= (i+1)*unit_width + chordHeight*2
			if len_calc < 4.000 + EPS and len_calc < len_calc_next-EPS then
				iValues = iValues + 1
				possible_A_values[iValues] = len_calc
			endif

			len_calc4 		= i*unit_width + chordHeight*2 + d_columns*2*j + chordHeight
			len_calc4_next 	= (i+1)*unit_width + chordHeight*2 + chordHeight
			if len_calc4 > 4.000 and len_calc4 < 8.000 + EPS and len_calc4 < len_calc4_next-EPS then
				iValues = iValues + 1
				possible_A_values[iValues] = len_calc4
			endif

			len_calc8 		= i*unit_width + chordHeight*2 + d_columns*2*j + chordHeight*2
			len_calc8_next 	= (i+1)*unit_width + chordHeight*2 + chordHeight*2
			if len_calc8 > 8.000 and len_calc8 < 12.000 + EPS and len_calc8 < len_calc8_next-EPS then
				iValues = iValues + 1
				possible_A_values[iValues] = len_calc8
			endif
		next j
	next i


	! --- Parameter Range Calculation

	if iJoistType = PS16N or iJoistType = WS400 then

		if iWebBracing = DOUBLE_DENSITY then

			values "A" 	range[ 1*unit_width+chordHeight*2,  1*unit_width+chordHeight*2+d_columns*8] 	step  1*unit_width+chordHeight*2, 	d_columns*2,
						range[ 2*unit_width+chordHeight*2,  2*unit_width+chordHeight*2+d_columns*8] 	step  2*unit_width+chordHeight*2, 	d_columns*2,
						range[ 3*unit_width+chordHeight*2,  3*unit_width+chordHeight*2+d_columns*8] 	step  3*unit_width+chordHeight*2, 	d_columns*2,

						4*unit_width+chordHeight*2,

						range[ 4*unit_width+chordHeight*3,  4*unit_width+chordHeight*3+d_columns*8] 	step  4*unit_width+chordHeight*3, 	d_columns*2,
						range[ 5*unit_width+chordHeight*3,  5*unit_width+chordHeight*3+d_columns*8] 	step  5*unit_width+chordHeight*3, 	d_columns*2,
						range[ 6*unit_width+chordHeight*3,  6*unit_width+chordHeight*3+d_columns*8] 	step  6*unit_width+chordHeight*3, 	d_columns*2,
						range[ 7*unit_width+chordHeight*3,  7*unit_width+chordHeight*3+d_columns*8] 	step  7*unit_width+chordHeight*3, 	d_columns*2,

						8*unit_width+chordHeight*3,
						range[ 8*unit_width+chordHeight*4+d_columns*2,  8*unit_width+chordHeight*4+d_columns*8] 	step  8*unit_width+chordHeight*4+d_columns*2, 	d_columns*2,

						range[ 9*unit_width+chordHeight*4,  9*unit_width+chordHeight*4+d_columns*8] 	step  9*unit_width+chordHeight*4, 	d_columns*2,
						range[10*unit_width+chordHeight*4, 10*unit_width+chordHeight*4+d_columns*8] 	step 10*unit_width+chordHeight*4, 	d_columns*2,
						range[11*unit_width+chordHeight*4, 11*unit_width+chordHeight*4+d_columns*8] 	step 11*unit_width+chordHeight*4, 	d_columns*2,

						range[12*unit_width+chordHeight*4, 12*unit_width+chordHeight*4+d_columns] 		step  12*unit_width+chordHeight*4, 	d_columns*2

		else

			values "A" 	range[ 1*unit_width+chordHeight*2,  1*unit_width+chordHeight*2+d_columns*6] 	step  1*unit_width+chordHeight*2, 	d_columns*2,
						range[ 2*unit_width+chordHeight*2,  2*unit_width+chordHeight*2+d_columns*6] 	step  2*unit_width+chordHeight*2, 	d_columns*2,
						range[ 3*unit_width+chordHeight*2,  3*unit_width+chordHeight*2+d_columns*6] 	step  3*unit_width+chordHeight*2, 	d_columns*2,
						range[ 4*unit_width+chordHeight*2,  4*unit_width+chordHeight*2+d_columns*6] 	step  4*unit_width+chordHeight*2, 	d_columns*2,

						5*unit_width+chordHeight*2,
						range[ 5*unit_width+chordHeight*3+d_columns*2,  5*unit_width+chordHeight*3+d_columns*6] 	step  5*unit_width+chordHeight*3+d_columns*2, 	d_columns*2,

						range[ 6*unit_width+chordHeight*3,  6*unit_width+chordHeight*3+d_columns*6] 	step  6*unit_width+chordHeight*3, 	d_columns*2,
						range[ 7*unit_width+chordHeight*3,  7*unit_width+chordHeight*3+d_columns*6] 	step  7*unit_width+chordHeight*3, 	d_columns*2,
						range[ 8*unit_width+chordHeight*3,  8*unit_width+chordHeight*3+d_columns*6] 	step  8*unit_width+chordHeight*3, 	d_columns*2,
						range[ 9*unit_width+chordHeight*3,  9*unit_width+chordHeight*3+d_columns*6] 	step  9*unit_width+chordHeight*3, 	d_columns*2,

						10*unit_width+chordHeight*3,
						range[10*unit_width+chordHeight*4+d_columns*2,  10*unit_width+chordHeight*4+d_columns*6] 	step  10*unit_width+chordHeight*4+d_columns*2, 	d_columns*2,

						range[11*unit_width+chordHeight*4,  11*unit_width+chordHeight*4+d_columns*6] 	step  11*unit_width+chordHeight*4, 	d_columns*2,
						range[12*unit_width+chordHeight*4,  12*unit_width+chordHeight*4+d_columns*6] 	step  12*unit_width+chordHeight*4, 	d_columns*2,
						range[13*unit_width+chordHeight*4,  13*unit_width+chordHeight*4+d_columns*6] 	step  13*unit_width+chordHeight*4, 	d_columns*2,
						range[14*unit_width+chordHeight*4,  14*unit_width+chordHeight*4+d_columns*6] 	step  14*unit_width+chordHeight*4, 	d_columns*2,

						range[15*unit_width+chordHeight*4,	15*unit_width+chordHeight*4+d_columns*2] 	step  15*unit_width+chordHeight*4, 	d_columns*2

		endif

	else

		nValuesA = vardim1(possible_A_values)	! number of possible A values

		for i=1 to nValuesA
			if possible_A_values[i] < 4.000 + EPS then
				nUnder4m = i
			endif
			if possible_A_values[i] < 8.000 + EPS then
				nUnder8m = i
			endif
		next i

		ALowerLimit   = possible_A_values[1]
		AUnder4mLimit = possible_A_values[nUnder4m]
		AOver4mLimit  = possible_A_values[nUnder4m+1]
		AUnder8mLimit = possible_A_values[nUnder8m]
		AOver8mLimit  = possible_A_values[nUnder8m+1]
		AUpperLimit   = possible_A_values[nValuesA]

		values "A" 	range[ALowerLimit,  AUnder4mLimit] 	step ALowerLimit, 	d_columns*2,
					range[AOver4mLimit, AUnder8mLimit] 	step AOver4mLimit, 	d_columns*2,
					range[AOver8mLimit, AUpperLimit] 	step AOver8mLimit, 	d_columns*2

	endif

endif


! --- B ---

dim possible_B_values[]
iValues = 0
for i=1 to vardim1(chordProfileSizes)
	if enabledChordDefaults[i] > 0 then
		iValues = iValues + 1
		possible_B_values[iValues] = chordProfileSizes[i][2]
	endif
next i

values "B" possible_B_values

if GLOB_MODPAR_NAME = "B" then
	for i=1 to vardim1(chordProfileSizes)
		if ABS(B-chordProfileSizes[i][2]) < EPS then
			strChordSize = chordProfileDefaults[i]
			iChordSize   = i
			chordWidth   = chordProfileSizes[i][2]
		endif
	next i
	parameters strChordSize = strChordSize, iChordSize = iChordSize, chordWidth = chordWidth
else
	B = chordWidth
	parameters B = B
endif


! --- ZZYZX ---

dim possible_ZZYZX_values[]
iValues = 0
for i=1 to vardim1(joistHeights)
	if enabledJoistDefaults[i] > 0 then
        _bNewValue = 1

        ! check if the value exists in the value set
        for j = 1 to iValues
            if abs(possible_ZZYZX_values[j] - joistHeights[i]) < EPS then
                _bNewValue = 0
                j = iValues
            endif
        next j
    
        if _bNewValue then
    		iValues = iValues + 1
    		possible_ZZYZX_values[iValues] = joistHeights[i]
        endif
	endif
next i

values "ZZYZX" possible_ZZYZX_values

if GLOB_MODPAR_NAME = "ZZYZX" then
	for i=1 to vardim1(joistHeights)
		if ABS(ZZYZX-joistHeights[i]) < EPS then
			strJoistType = joistNames[i]
			iJoistType = i
		endif
	next i
	parameters strJoistType = strJoistType, iJoistType = iJoistType
else
	ZZYZX = joistHeight
	parameters ZZYZX = ZZYZX
endif

parameters ac_bottomlevel = 0,
		   ac_toplevel	  = ZZYZX
		   
! ==============================================================================
! 2D Display Options
! ==============================================================================

values{2} "ac_symb_display_option" 	DISPLAY_PROJECTED,		stDisplayOptions[1],
									DISPLAY_OVERHEAD_PROJ,	stDisplayOptions[2],
									DISPLAY_SYMBOLIC,		stDisplayOptions[3],
									DISPLAY_OUTLINES,		stDisplayOptions[4],
									DISPLAY_OVERHEAD_ALL,	stDisplayOptions[5]
									
values{2} "ac_symb_show_projection_to"	PROJECTION_FLOOR_PLAN_RANGE,	stProjectionTypes[1],
										PROJECTION_DISPLAY_LIMIT,		stProjectionTypes[2],
										PROJECTION_ENTIRE_ELEMENT,		stProjectionTypes[3]

if ac_symb_display_option = DISPLAY_SYMBOLIC | ac_symb_display_option = DISPLAY_OVERHEAD_ALL then
	hideparameter	"gs_use_3D_view_attributes"
	lock			"gs_use_3D_view_attributes"
endif

if gs_use_3D_view_attributes then
	hideparameter	"gs_cont_pen"
	lock			"gs_cont_pen"
endif

if not(ac_symb_display_option = DISPLAY_PROJECTED | ac_symb_display_option = DISPLAY_OVERHEAD_PROJ) then
	hideparameter	"gs_cut_fill_type",
					"gs_cut_fill_pen",
					"gs_cut_back_pen"
endif

if ac_symb_display_option = DISPLAY_SYMBOLIC | ac_symb_display_option = DISPLAY_OUTLINES | ac_symb_display_option = DISPLAY_OVERHEAD_ALL then
	hideparameter	"ac_symb_show_projection_to"
	lock			"ac_symb_show_projection_to"

	hideparameter	"gs_cut_linetype",
					"gs_cut_pen",
					"gs_cut_fill_type",
					"gs_cut_fill_pen",
					"gs_cut_back_pen"

	lock			"gs_cut_linetype",
					"gs_cut_pen",
					"gs_cut_fill_type",
					"gs_cut_fill_pen",
					"gs_cut_back_pen"
endif

if ac_symb_display_option = DISPLAY_PROJECTED | ac_symb_display_option = DISPLAY_SYMBOLIC | ac_symb_display_option = DISPLAY_OUTLINES then
	hideparameter	"gs_overhead_linetype", "gs_overhead_pen"
	lock			"gs_overhead_linetype", "gs_overhead_pen"
endif

if ac_symb_display_option = DISPLAY_OVERHEAD_ALL then
	hideparameter	"gs_fill_type", "gs_fill_pen", "gs_back_pen", "gs_cont_pen", "gs_cont_line"
	lock			"gs_fill_type", "gs_fill_pen", "gs_back_pen", "gs_cont_pen", "gs_cont_line"
endif

if ac_symb_display_option # DISPLAY_SYMBOLIC then
	hideparameter "std"
	lock "std"
endif

if ac_symb_display_option = DISPLAY_OUTLINES then
	hideparameter "gs_axis"
	lock "gs_axis"
endif

if not(gs_axis) then
	lock "gs_axis_line", "gs_axis_line_pen"
endif

! ==============================================================================
! 3D Display Options
! ==============================================================================

if gs_detlevel_3D_m = DETLEVEL_3D_OFF then
	lock "gs_pen_3d", "gs_shadow"
endif
