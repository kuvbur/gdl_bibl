
if gs_detlevel_3D_m = DETLEVEL3D_OFF then end

! ==============================================================================
! 2D Display Options
! ==============================================================================

!gs_2D_projection_type:
!	0 - Normal 3D
!	1 - View Edges
!	2 - View Polygons
!	3 - Overhead Edges
!	4 - Cut Lines
!	5 - Cut Polygons
!	6 - Bottom Range Cut Lines
!	7 - Top Range Cut Lines

nProjectionCut = 0
if gs_2D_projection then
	if AC_symb_show_projection_to = PROJECTION_FLOOR_PLAN_RANGE | (AC_symb_show_projection_to = PROJECTION_DISPLAY_LIMIT & gs_bottom_range_height < gs_cutplane_height) then
		addz gs_bottom_range_height
		cutplane{2} 180, 2
		nProjectionCut = nProjectionCut + 1
		del 1
	endif
	if gs_2D_projection_type <> 6 then
		addz gs_cutplane_height
		cutplane{2} 180 * (gs_2D_projection_type = 3), 1
		nProjectionCut = nProjectionCut + 1
		del 1
	endif
	if AC_symb_show_projection_to <> 3 then
		addz gs_top_range_height
		cutplane{2} 0, 2
		nProjectionCut = nProjectionCut + 1
		del 1
	endif
endif

IF not(gs_shadow) THEN SHADOW OFF

_eaveOverhang = crh / sin(ang)
_A = tieBeamLength + _eaveOverhang
Ax	= _A/nn
vertWebBeamAxisDist = Ax / numDivisions


! ==============================================================================
! Hotspots
! ==============================================================================

unID=1
gosub 1000


! ==============================================================================
! Truss
! ==============================================================================

addy crd
if nn=0 then nn=1
pen gs_pen_3d

B = zzyzx

material gs_truss_mat

By	= B / numDivisions
dx1	= (Ax*crh) / B

addx -_eaveOverhang

rotx 90
if ced then
	prism_ 5, crd,
		_eaveOverhang,	0,		15,
		_A,				0,		15,
		_A,				crh,	15,
		_eaveOverhang,	crh,	15,
		_eaveOverhang,	0,		-1
else
	prism_ 5, crd,
		0,		0,		15,
		_A,		0,		15,
		_A,		crh,	15,
		dx1,	crh,	15,
		0,		0,		-1
endif
del 1


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
dx2	= sqr((dx1*dx1)+(crh*crh))
dy1	= crh/cos(ang)
dy2	= crh*tan(ang)
d	= sqr((_A*_A)+(B*B))
beta = atn( (By*(numDivisions-1)-crh-dy1+(dy2/2)) / ((vertWebBeamAxisDist)-(crh/2)-crh) )
dy3	= (crh/2)/cos(beta)
dxy	= (crh/2)/cos(90-ang-beta)
dx3	= dxy*cos(ang)
dyy3 = dxy*sin(ang)
dx4	= (crh/2)/sin(beta)
dy4	= (crh/2)/cos(beta)

if (numDivisions = 3) then
	inclBeam_TopPx		= vertWebBeamAxisDist + crh/2
	inclBeam_TopPy		= By - crh/cos(ang) + (crh/2)*tan(ang)
	inclBeam_BottomPx	= vertWebBeamAxisDist*2 - crh/2
	inclBeam_BottomPy	= crh
	inclBeam_Beta	= atn( (inclBeam_TopPy - inclBeam_BottomPy) / (inclBeam_BottomPx - inclBeam_TopPx) )
	inclBeam_dx		= (crh/2)/sin(inclBeam_Beta)
	inclBeam_dy		= (crh/2)/cos(inclBeam_Beta)
	inclBeam_dIncl	= (crh/2)/sin(inclBeam_Beta + ang)
	inclBeam_dInclx	= inclBeam_dIncl*cos(ang)
	inclBeam_dIncly	= inclBeam_dIncl*sin(ang)
endif

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

for n=0 to nn-1
	material gs_truss_mat

	! Rafter beam
	if ced & (n = 0) then
		addx _eaveOverhang
		roty -90
		cutplane
		del 2
	endif

	add dx1, 0, crh
	rotx 90
	cprism_{2} gs_truss_mat, gs_truss_mat, gs_truss_mat,
			5, crd,
			0,			0,				0, 15, gs_truss_mat,
			dx2,		0,				0, 15, gs_truss_mat,
			Ax - dx1,	B - crh-dy1,	0, 15, gs_truss_mat,
			Ax - dx1,	B - crh,		0, 15, gs_truss_mat,
			0,			0,				0, -1, gs_truss_mat
	del 2

	if ced & (n = 0) then cutend

	! Vertical beam
	add Ax - crh, 0, crh
	rotx 90
	prism_ 5, crd,
		0,		0,						15,
		crh,	0,						15,
		crh,	B - crh - dy1,			15,
		0,		B - crh - dy1 - dy2,	15,
		0,		0,						-1
	del 2

	if (gs_detlevel_3D_m = DETLEVEL3D_DETAILED) then

		! Vertical higher web beam
		add vertWebBeamAxisDist*(numDivisions-1)-(crh/2), 0, crh
		rotx 90
		prism_ 5, crd,
			0,		0,												15,
			crh,	0,												15,
			crh,	(By*(numDivisions-1)) - crh - dy1 + (dy2/2),	15,
			0,		(By*(numDivisions-1)) - crh - dy1 - (dy2/2),	15,
			0,		0,												-1
		del 2

		! Incline higher web beam
		addz crh
		addx vertWebBeamAxisDist*(numDivisions-1)+(crh/2)
		rotx 90
		prism_ 7, crd,
			0,											(By*(numDivisions-1)) - crh - dy1 + (dy2/2) - dy3,	15,
			0,											(By*(numDivisions-1)) - crh - dy1 + (dy2/2),		15,
			dx3,										(By*(numDivisions-1)) - crh - dy1 + (dy2/2) + dyy3,	15,
			vertWebBeamAxisDist - crh - (crh/2),		dy4,												15,
			vertWebBeamAxisDist - crh - (crh/2),		0,													15,
			vertWebBeamAxisDist - crh - (crh/2) - dx4,	0,													15,
			0,											(By*(numDivisions-1)) - crh - dy1 + (dy2/2) - dy3,	-1
		del 3

		if (numDivisions = 3) then
			! Vertical higher web beam
			add vertWebBeamAxisDist*(numDivisions-2)-(crh/2),0,crh
			rotx 90
			prism_ 5, crd,
				0,		0,												15,
				crh,	0,												15,
				crh,	(By*(numDivisions-2)) - crh - dy1 + (dy2/2),	15,
				0,		(By*(numDivisions-2)) - crh - dy1 - (dy2/2),	15,
				0,		0,												-1
			del 2

			rotx 90
			prism_ 7, crd,
				inclBeam_TopPx,						inclBeam_TopPy - inclBeam_dy,		15,
				inclBeam_TopPx,						inclBeam_TopPy,						15,
				inclBeam_TopPx + inclBeam_dInclx,	inclBeam_TopPy + inclBeam_dIncly,	15,
				inclBeam_BottomPx,					inclBeam_BottomPy + inclBeam_dy,	15,
				inclBeam_BottomPx,					inclBeam_BottomPy,					15,
				inclBeam_BottomPx - inclBeam_dx,	inclBeam_BottomPy,					15,
				inclBeam_TopPx,						inclBeam_TopPy - inclBeam_dy,		-1
			del 1
		endif

	endif

	addx Ax
next n
del n


!!!!!!!!!!!!!!!!!!!!!!!!!!!  steel plates

if stp & (gs_detlevel_3D_m = DETLEVEL3D_DETAILED) then
	material mat2

	for l=1 to 2
		for m=0 to nn-1
			dxy1 = crh*sin(ang)
			dxx1 = (dxy1 + crh)*sin(ang)
			dyy1 = sqr((dxy1 + crh)*(dxy1 + crh) - (dxx1*dxx1))

			if ced & (m = 0) then
				addx _eaveOverhang
				rotz -90
				cutplane 90
				del 2
			endif

			add dx1,0.005,0
			rotx 90
			prism_ 6,0.005,
				0,					0,			15,
				dx2 + crh,			0,			15,
				dx2 + crh,			crh,		15,
				dx2 + crh - dxx1,	crh + dyy1,	15,
				0,					crh,		15,
				0,					0,			-1
			del 2

			if ced & (m = 0) then cutend

			add vertWebBeamAxisDist*(numDivisions-1) - (crh/2), 0.005, 0
			rotx 90
			prism_ 5,0.005,
				0,		0,		15,
				crh,	0,		15,
				crh,	2*crh,	15,
				0,		2*crh,	15,
				0,		0,		-1
			del 2

			dxx4 = crh*sin(beta)
			dyy4 = crh*cos(beta)

			add Ax - crh - dx4, 0.005, 0
			rotx 90
			prism_ 6,0.005,
				0,			0,			15,
				dx4 + crh,	0,			15,
				dx4 + crh,	crh + dyy4,	15,
				dxx4,		crh + dyy4,	15,
				0,			crh,		15,
				0,			0,			-1
			del 2

			dyy2 = crh*tan(ang)
			dx22 = crh*cos(ang)
			dy22 = crh*sin(ang)
			dyy = (crh + dx22 + dy22)*tan(ang)

			add Ax, 0.005, B
			rotx 90
			prism_ 6,0.005,
				0,0,15,
				-(crh + dx22 + dy22),	-dyy,					15,
				-(crh + dx22),			-(dy1 + dyy2 + dy22),	15,
				-crh,					-(dy1 + dyy2 + crh),	15,
				0,						-(dy1 + dyy2 + crh),	15,
				0,						0,						-1
			del 2

			t = 0
			d3x = (dy3 - dy2)/tan(ang)
			d3 = d3x + dy22
			d4 = d3*tan(ang)
			z = dy1 + dy3 - (dy2) - d4

			if dy3 < dy2 then
				t = (dy3 - dy2)
				d3 = crh*sin(ang)
				d3x = 0
				z = dy1 + t - ((crh*sin(ang))*tan(ang))
			endif

			add (vertWebBeamAxisDist*(numDivisions-1) - crh/2), 0.005, (B/numDivisions)*(numDivisions-1) - dy1 + (dy2 / 2) - dy3
			rotx 90
			prism_ 6,0.005,
				-d3x,				t,					15,
				crh,				t,					15,
				crh + dx3,			dy3 + dyy3,			15,
				crh + dx3 - dy22,	dy3 + dyy3 + dx22,	15,
				-d3,				z,					15,
				-d3x,				t,					-1
			del 2

			if (numDivisions = 3) then
				add vertWebBeamAxisDist - (crh/2), 0.005, 0
				rotx 90
				prism_ 5,0.005,
					0,		0,		15,
					crh,	0,		15,
					crh,	2*crh,	15,
					0,		2*crh,	15,
					0,		0,		-1
				del 2

				t = 0
				d3x = (inclBeam_dy - dy2)/tan(ang)
				d3 = d3x + dy22
				d4 = d3*tan(ang)
				z = dy1 + inclBeam_dy - (dy2) - d4

				if inclBeam_dy < dy2 then
					t = (inclBeam_dy - dy2)
					d3 = crh*sin(ang)
					d3x = 0
					z = dy1 + t - ((crh*sin(ang))*tan(ang))
				endif

				add (vertWebBeamAxisDist*(numDivisions-2) - crh/2), 0.005, (B/numDivisions)*(numDivisions-2) - dy1 + (dy2 / 2) - inclBeam_dy
				rotx 90
				prism_ 6,0.005,
					-d3x,				t,					15,
					crh,				t,					15,
					crh + inclBeam_dInclx,			inclBeam_dy + inclBeam_dIncly,			15,
					crh + inclBeam_dInclx - dy22,	inclBeam_dy + inclBeam_dIncly + dx22,	15,
					-d3,				z,					15,
					-d3x,				t,					-1
				del 2
			endif

			addx Ax
		next m
		del m

		addy -crd - 0.005
	next l
	del l

endif

del top

for i = 1 to nProjectionCut
	cutend
next i

! ==============================================================================
end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end
! ==============================================================================

1000:

	hotspot 0,				B/2,	0,	unID,	tieBeamLength,	1+256	: unID=unID+1
	hotspot -1,				B/2,	0,	unID,	tieBeamLength,	3		: unID=unID+1
	hotspot tieBeamLength,	B/2,	0,	unID,	tieBeamLength,	2		: unID=unID+1

	hotspot -eaveOverhang,	0,	0,	unID,	B,	1+256	: unID=unID+1
	hotspot -eaveOverhang,	-1,	0,	unID,	B,	3		: unID=unID+1
	hotspot -eaveOverhang,	B,	0,	unID,	B,	2		: unID=unID+1

	hotspot tieBeamLength,	0,	0,	unID,	B,	1+256	: unID=unID+1
	hotspot tieBeamLength,	-1,	0,	unID,	B,	3		: unID=unID+1
	hotspot tieBeamLength,	B,	0,	unID,	B,	2		: unID=unID+1

	addx -_eaveOverhang
	if iDimensionSetMode = DIM_WIDTH_HEIGHT then
		for s=1 to nn
			hotspot numDivisions*s*vertWebBeamAxisDist, B/2, 0,		unID, zzyzx, 1+128	:unID=unID+1
			hotspot numDivisions*s*vertWebBeamAxisDist, B/2, -1,	unID, zzyzx, 3		:unID=unID+1
			hotspot numDivisions*s*vertWebBeamAxisDist, B/2, zzyzx,	unID, zzyzx, 2		:unID=unID+1
		next s
	endif

	if iDimensionSetMode = DIM_WIDTH_ANGLE | iDimensionSetMode = DIM_WIDTH_PROPORTION then
		for s=1 to nn
			hotspot numDivisions*s*vertWebBeamAxisDist, B/2, zzyzx, unID : unID=unID+1
		next s
	endif
	del 1

	if iDimensionSetMode = DIM_WIDTH_ANGLE then
		rafterLength = (sqr(tieBeamLength^2 + (zzyzx*nn - crh/cos(ang))^2))/nn

		hotspot rafterLength/2,				0,	0,							unID, ang, 4+128	: unID=unID+1
		hotspot 0,							0,	0,							unID, ang, 6 		: unID=unID+1
		hotspot (rafterLength/2)*cos(ang),	0,	(rafterLength/2)*sin(ang),	unID, ang, 5		: unID=unID+1
		hotspot 0,							-1,	0,							unID, ang, 7		: unID=unID+1

		hotspot rafterLength/2,				B,		0,							unID, ang, 4+128	: unID=unID+1
		hotspot 0,							B,		0,							unID, ang, 6 		: unID=unID+1
		hotspot (rafterLength/2)*cos(ang),	B,		(rafterLength/2)*sin(ang),	unID, ang, 5		: unID=unID+1
		hotspot 0,							B - 1,	0,							unID, ang, 7		: unID=unID+1
	endif
return




