
EPS = 0.0001

partitionFrameThk	= 0.03

CABINET				= 0
SIMPLE_DESK			= 1
LAYOUT_ISLAND		= 2
LAYOUT_LINEAR		= 3
WS_SOLO				= 4

dim	stDeskStyle[5]
	stDeskStyle[1] = `L90 Прямой`
	stDeskStyle[2] = `L90 Скругленный`
	stDeskStyle[3] = `L120 Прямой`
	stDeskStyle[4] = `L120 Скругленный`
	stDeskStyle[5] = `Прямой`

dim stSymbolTypes[16]
	stSymbolTypes[ 1] = `Круглый`
	stSymbolTypes[ 2] = `Круглый со Спинкой`
	stSymbolTypes[ 3] = `Прямоугольный`
	stSymbolTypes[ 4] = `Прямоугольный со Спинкой 1`
	stSymbolTypes[ 5] = `Трапециевидный`
	stSymbolTypes[ 6] = `Трапециевидный со Спинкой`
	stSymbolTypes[ 7] = `Криволинейный`
	stSymbolTypes[ 8] = `Криволинейный со Спинкой`
	stSymbolTypes[ 9] = `Прямоугольный со Спинкой 3`
	stSymbolTypes[10] = `Прямоугольный со Спинкой 2`
	stSymbolTypes[11] = `Круг со Спинкой 2`
	stSymbolTypes[12] = `Круглый со Спинкой 3`
	stSymbolTypes[13] = `Криволинейный со Спинкой 2`
	stSymbolTypes[14] = `Криволинейный со Спинкой 3`
	stSymbolTypes[15] = `Детальный 1`
	stSymbolTypes[16] = `Детальный 2`

DESKSTYLE_90STR		= 1
DESKSTYLE_90ROUND	= 2
DESKSTYLE_120STR	= 3
DESKSTYLE_120ROUND	= 4
DESKSTYLE_STR		= 5

DESK_PARTITION		= 6

PARPOS_ABOVE_D		= 1
PARPOS_BETW_D		= 2

PARLENGTH_DESK		= 1
PARLENGTH_CUSTOM	= 2

STRAIGHT			= 1
ROUNDED				= 2

TTOP_L_SHAPED		= 1
TTOP_STRAIGHT		= 2

iTableTopType		= TTOP_L_SHAPED * (iDeskStyle <> DESKSTYLE_STR) + TTOP_STRAIGHT * (iDeskStyle = DESKSTYLE_STR)

iDeskAngle			= 90 * ((iDeskStyle = DESKSTYLE_90STR) or (iDeskStyle = DESKSTYLE_90ROUND) or (iDeskStyle = DESKSTYLE_STR)) +\
					  120 * ((iDeskStyle = DESKSTYLE_120STR) or (iDeskStyle = DESKSTYLE_120ROUND))

chairPos			= (iTableTopType = TTOP_STRAIGHT) + 2 * (iTableTopType = TTOP_L_SHAPED)

partCColumnWdith	= partitionFrameThk / TAN(iDeskAngle / 2)

!!!4	- Left End Partition
!!!2	- Side Partition
!!!1	- Front Partition
!!!3	- Right End Partition

!!!!! Existing Partitions
dim	existPartition[4]
	existPartition[4]	= bEndPartitions1
	existPartition[2]	= bSidePartitions * (iTableTopType = TTOP_L_SHAPED)
	existPartition[1]	= bFrontPartitions
	existPartition[3]	= bEndPartitions2

callAnyPartition		= bFrontPartitions or bSidePartitions or bEndPartitions1 or bEndPartitions2

!!!!! Existing Partition Columns
dim	existPartColumn[3]
if iTableTopType = TTOP_L_SHAPED then
	existPartColumn[1]	= bEndPartitions1 * bSidePartitions * (iPartitionLength = PARLENGTH_DESK)
	existPartColumn[2]	= bFrontPartitions * bSidePartitions * (iPartitionLength = PARLENGTH_DESK or (iPartitionLength = PARLENGTH_CUSTOM and ABS(partitionOffsetCustom) < EPS))
	existPartColumn[3]	= bEndPartitions2 * bFrontPartitions * (iPartitionLength = PARLENGTH_DESK)
else
	existPartColumn[1]	= bEndPartitions1 * bFrontPartitions * (iPartitionLength = PARLENGTH_DESK)
	existPartColumn[2]	= 0
	existPartColumn[3]	= bEndPartitions2 * bFrontPartitions * (iPartitionLength = PARLENGTH_DESK)
endif

!!!!! Desk Partition Length
partLengthMod		= partitionFrameThk * (iPartitionPos = PARPOS_ABOVE_D)
partLengthModCC		= partCColumnWdith * (iPartitionPos = PARPOS_ABOVE_D)

dim	partLength[4]
if iTableTopType = TTOP_L_SHAPED then
	partLength[4] =	tableDepth2 - partLengthMod * bSidePartitions * (iPartitionLength = PARLENGTH_DESK)
	partLength[2] =	tableLength2 - partLengthModCC * bFrontPartitions - partLengthMod * bEndPartitions1
	partLength[1] =	tableLength1 - partLengthModCC * bSidePartitions - partLengthMod * bEndPartitions2
	partLength[3] =	tableDepth1 - partLengthMod * bFrontPartitions * (iPartitionLength = PARLENGTH_DESK)
else
	partLength[4] =	tableDepth1 - partLengthMod * bFrontPartitions * (iPartitionLength = PARLENGTH_DESK)
	partLength[2] =	0
	partLength[1] =	tableLength1 - partLengthMod * bEndPartitions1 - partLengthMod * bEndPartitions2
	partLength[3] =	tableDepth1 - partLengthMod * bFrontPartitions * (iPartitionLength = PARLENGTH_DESK)
endif

!!!!! Desk Partition Distance
partPosModAboveD	= partitionFrameThk / 2 * (iPartitionPos = PARPOS_ABOVE_D)
partPosModBetwD		= partitionFrameThk / 2 * (iPartitionPos = PARPOS_BETW_D)

dim	partPos[4][2]
if iTableTopType = TTOP_L_SHAPED then
	xPartOffset4		= partLengthMod * bSidePartitions * (iPartitionLength = PARLENGTH_DESK)
	yPartOffset4		= partPosModBetwD - partPosModAboveD
	xPartOffset2		= partPosModAboveD - partPosModBetwD
	if iPartitionLength = PARLENGTH_DESK then
		yPartOffset2	= partLength[2] / 2 + partLengthModCC * bFrontPartitions
	else
		yPartOffset2	= partCColumnWdith * existPartColumn[2] + partitionLengthCustom / 2 + partitionOffsetCustom
	endif

	partPos[4][1]		= (partLength[4] / 2 + xPartOffset4) * SIN(180 - iDeskAngle) - (tableLength2 + yPartOffset4) * COS(180 - iDeskAngle)
	partPos[2][1]		= -yPartOffset2 * COS(180 - iDeskAngle) + xPartOffset2 * SIN(180 - iDeskAngle)
	if iPartitionLength = PARLENGTH_DESK then
		partPos[1][1]	= partLength[1] / 2 + partLengthModCC * bSidePartitions
	else
		partPos[1][1]	= partCColumnWdith * existPartColumn[2] + partitionLengthCustom / 2 + partitionOffsetCustom
	endif
	partPos[3][1]	= tableLength1 + partPosModBetwD - partPosModAboveD
	partPos[4][2]	= (partLength[4] / 2 + xPartOffset4) * COS(180 - iDeskAngle) + (tableLength2 + yPartOffset4) * SIN(180 - iDeskAngle)
	partPos[2][2]	= yPartOffset2 * SIN(180 - iDeskAngle) + xPartOffset2 * COS(180 - iDeskAngle)
	partPos[1][2]	= partPosModAboveD - partPosModBetwD
	partPos[3][2]	= partLength[3] / 2 + partLengthMod * bFrontPartitions * (iPartitionLength = PARLENGTH_DESK)
else
	partPos[4][1]	= partPosModAboveD - partPosModBetwD
	partPos[2][1]	= 0
	if iPartitionLength = PARLENGTH_DESK then
		partPos[1][1]	= partLength[1] / 2 + partLengthMod * bEndPartitions1
	else
		partPos[1][1]	= tableLength1 / 2 + partitionOffsetCustom
	endif
	partPos[3][1]	= tableLength1 + partPosModBetwD - partPosModAboveD

	partPos[4][2]	= partLength[4] / 2 + partLengthMod * bFrontPartitions * (iPartitionLength = PARLENGTH_DESK)
	partPos[2][2]	= 0
	partPos[1][2]	= partPosModAboveD - partPosModBetwD
	partPos[3][2]	= partLength[3] / 2 + partLengthMod * bFrontPartitions * (iPartitionLength = PARLENGTH_DESK)
endif

!!!!! Partition Columns Distance
dim	partColumnPos[3][2]
if iTableTopType = TTOP_L_SHAPED then
	partColumnPos[1][1]	= partPosModAboveD - partPosModBetwD
	partColumnPos[2][1]	= partCColumnWdith / 2 * (iPartitionPos = PARPOS_ABOVE_D) - partCColumnWdith / 2 * (iPartitionPos = PARPOS_BETW_D)
	partColumnPos[3][1]	= tableLength1 + partPosModBetwD - partPosModAboveD

	partColumnPos[1][2]	= tableLength2 + partPosModBetwD - partPosModAboveD
	partColumnPos[2][2]	= partPosModAboveD - partPosModBetwD
	partColumnPos[3][2]	= partPosModAboveD - partPosModBetwD
else
	partColumnPos[1][1]	= partPosModAboveD - partPosModBetwD
	partColumnPos[2][1]	= 0
	partColumnPos[3][1]	= tableLength1 + partPosModBetwD - partPosModAboveD

	partColumnPos[1][2]	= partPosModAboveD - partPosModBetwD
	partColumnPos[2][2]	= 0
	partColumnPos[3][2]	= partPosModAboveD - partPosModBetwD
endif

realPartHeight	= (gs_partitionHeight + tableTopHeight * (iPartitionPos = PARPOS_ABOVE_D)) * callAnyPartition

! ======================================================================
! For Parameter Locking and Hiding
! ======================================================================

bShowPartitionParams	=	callAnyPartition
bShowExtCabParams		=	0
bShowExtDeskParams		=	0
bShowExtDeskChairParams	=	0
bShowExtDeskCabParams	=	0
bEnablePartExt			=	0
bShowCabParams			=	gs_bOfficeCab * (iTableTopType = TTOP_L_SHAPED) or\
							(gs_officeCab_m > 0) * (iTableTopType = TTOP_STRAIGHT)
bShowCommonCabParams	=	bShowCabParams

