
pen gs_cont_pen
if not(gs_shadow) then shadow off


! ------------------------------------------------------------------------------
! Definitions
! ------------------------------------------------------------------------------
washerBack		= 0.02
washerDist		= 0.01
washerPanelH	= 0.11
toeBack			= 0.05
cutMask			= 15
cutMask2		= 23
gs_resol		= 16
sinkDepth		= 0.2

refriDoorThk	= 0.08
refriDoorW		= 0.9/0.5
refriFreezeH	= 0.5
if iRefrigeratorType = ACC_REFRI_COMPACT then
	refrigeratorHeigth	= counterHeigth - counterThickness
	refrigeratorDepth	= refriDefaults[ACC_REFRI_COMPACT]
	bRefriWallCabinet	= 0
endif

ovenBack		= 0.02
ovenThk			= 0.02
ovenCutDepth	= counterDepth*0.6
noTallOvenHeigth = max(counterHeigth - counterThickness -ovenH - 0.13, toeHeigth)
for i = 1 to nofOvens
	if not(bOvenInTall[i]) then
		ovenHeigth[i] = noTallOvenHeigth
	endif
next i

resol gs_resol


! ==============================================================================
!
! Hotspots
!
! ==============================================================================

! ------------------------------------------------------------------------------
! Reference Line
! ------------------------------------------------------------------------------
unID = 100
for i = 1 to nRefPoints[1] - (iLayoutType = LAYOUT_ISLAND)*2
	hotspot  0,						refLinePoints_1[i][2],	0, unID, refLinePoints_1[i][1], 1+128		: unID = unID + 1
	hotspot -1, 					refLinePoints_1[i][2],	0, unID, refLinePoints_1[i][1], 3			: unID = unID + 1
	hotspot refLinePoints_1[i][1],	refLinePoints_1[i][2],	0, unID, refLinePoints_1[i][1], 2			: unID = unID + 1

	hotspot refLinePoints_1[i][1],	0,					 	0, unID, refLinePoints_1[i][2], 1+128		: unID = unID + 1
	hotspot refLinePoints_1[i][1], -1,						0, unID, refLinePoints_1[i][2], 3			: unID = unID + 1
	hotspot refLinePoints_1[i][1],	refLinePoints_1[i][2],	0, unID, refLinePoints_1[i][2], 2			: unID = unID + 1

	hotspot  0,						refLinePoints_1[i][2],	counterHeigth, unID, refLinePoints_1[i][1], 1+128		: unID = unID + 1
	hotspot -1, 					refLinePoints_1[i][2],	counterHeigth, unID, refLinePoints_1[i][1], 3			: unID = unID + 1
	hotspot refLinePoints_1[i][1],	refLinePoints_1[i][2],	counterHeigth, unID, refLinePoints_1[i][1], 2			: unID = unID + 1

	hotspot refLinePoints_1[i][1],	0,					 	counterHeigth, unID, refLinePoints_1[i][2], 1+128		: unID = unID + 1
	hotspot refLinePoints_1[i][1], -1,						counterHeigth, unID, refLinePoints_1[i][2], 3			: unID = unID + 1
	hotspot refLinePoints_1[i][1],	refLinePoints_1[i][2],	counterHeigth, unID, refLinePoints_1[i][2], 2			: unID = unID + 1
next i

for i = 1 to nRefPoints[2]
	hotspot  0,						refLinePoints_2[i][2],	0, unID, refLinePoints_2[i][1], 1+128		: unID = unID + 1
	hotspot -1, 					refLinePoints_2[i][2],	0, unID, refLinePoints_2[i][1], 3			: unID = unID + 1
	hotspot refLinePoints_2[i][1],	refLinePoints_2[i][2],	0, unID, refLinePoints_2[i][1], 2			: unID = unID + 1

	hotspot refLinePoints_2[i][1],	0,					 	0, unID, refLinePoints_2[i][2], 1+128		: unID = unID + 1
	hotspot refLinePoints_2[i][1], -1,						0, unID, refLinePoints_2[i][2], 3			: unID = unID + 1
	hotspot refLinePoints_2[i][1],	refLinePoints_2[i][2],	0, unID, refLinePoints_2[i][2], 2			: unID = unID + 1

	hotspot  0,						refLinePoints_2[i][2],	counterHeigth, unID, refLinePoints_2[i][1], 1+128		: unID = unID + 1
	hotspot -1, 					refLinePoints_2[i][2],	counterHeigth, unID, refLinePoints_2[i][1], 3			: unID = unID + 1
	hotspot refLinePoints_2[i][1],	refLinePoints_2[i][2],	counterHeigth, unID, refLinePoints_2[i][1], 2			: unID = unID + 1

	hotspot refLinePoints_2[i][1],	0,					 	counterHeigth, unID, refLinePoints_2[i][2], 1+128		: unID = unID + 1
	hotspot refLinePoints_2[i][1], -1,						counterHeigth, unID, refLinePoints_2[i][2], 3			: unID = unID + 1
	hotspot refLinePoints_2[i][1],	refLinePoints_2[i][2],	counterHeigth, unID, refLinePoints_2[i][2], 2			: unID = unID + 1
next i

for i = 1 to nRefPoints[3]
	hotspot  0,						refLinePoints_3[i][2],	0, unID, refLinePoints_3[i][1], 1+128		: unID = unID + 1
	hotspot -1, 					refLinePoints_3[i][2],	0, unID, refLinePoints_3[i][1], 3			: unID = unID + 1
	hotspot refLinePoints_3[i][1],	refLinePoints_3[i][2],	0, unID, refLinePoints_3[i][1], 2			: unID = unID + 1

	hotspot refLinePoints_3[i][1],	0,					 	0, unID, refLinePoints_3[i][2], 1+128		: unID = unID + 1
	hotspot refLinePoints_3[i][1], -1,						0, unID, refLinePoints_3[i][2], 3			: unID = unID + 1
	hotspot refLinePoints_3[i][1],	refLinePoints_3[i][2],	0, unID, refLinePoints_3[i][2], 2			: unID = unID + 1

	hotspot  0,						refLinePoints_3[i][2],	counterHeigth, unID, refLinePoints_3[i][1], 1+128		: unID = unID + 1
	hotspot -1, 					refLinePoints_3[i][2],	counterHeigth, unID, refLinePoints_3[i][1], 3			: unID = unID + 1
	hotspot refLinePoints_3[i][1],	refLinePoints_3[i][2],	counterHeigth, unID, refLinePoints_3[i][1], 2			: unID = unID + 1

	hotspot refLinePoints_3[i][1],	0,					 	counterHeigth, unID, refLinePoints_3[i][2], 1+128		: unID = unID + 1
	hotspot refLinePoints_3[i][1], -1,						counterHeigth, unID, refLinePoints_3[i][2], 3			: unID = unID + 1
	hotspot refLinePoints_3[i][1],	refLinePoints_3[i][2],	counterHeigth, unID, refLinePoints_3[i][2], 2			: unID = unID + 1
next i


! ------------------------------------------------------------------------------
! Other Contour Points
! ------------------------------------------------------------------------------
unID = 1500
for i = 1 to vardim1(oppsidePoints)
	hotspot oppsidePoints[i][1], oppsidePoints[i][2], 0, 				unID		: unID = unID + 1
next i


! ------------------------------------------------------------------------------
! Elements Moveable Hotspots
! ------------------------------------------------------------------------------
for i = 1 to nElement
	n = elementTypes[i][2]
	unID = 2000 + (elementTypes[i][1]-1) * 1000  +  (n-1) * 100

	if elementTypes[i][1] = SYMBTYPE_TALL then
		hotspot  0,					tallCabPos[n][2], ZZYZX,	unID, tallCabPos[n][1], 1+128	: unID = unID + 1
		hotspot -1,					tallCabPos[n][2], ZZYZX,	unID, tallCabPos[n][1], 3		: unID = unID + 1
		hotspot tallCabPos[n][1],	tallCabPos[n][2], ZZYZX,	unID, tallCabPos[n][1], 2		: unID = unID + 1

		hotspot tallCabPos[n][1],	 0,				  ZZYZX,	unID, tallCabPos[n][2], 1+128	: unID = unID + 1
		hotspot tallCabPos[n][1],	-1,				  ZZYZX,	unID, tallCabPos[n][2], 3		: unID = unID + 1
		hotspot tallCabPos[n][1],	tallCabPos[n][2], ZZYZX,	unID, tallCabPos[n][2], 2		: unID = unID + 1
	endif

	if elementTypes[i][1] = SYMBTYPE_SINK then
		hotspot  0,				sinkPos[n][2],	counterHeigth, unID, sinkPos[n][1], 1+128		: unID = unID + 1
		hotspot -1,				sinkPos[n][2],	counterHeigth, unID, sinkPos[n][1], 3			: unID = unID + 1
		hotspot sinkPos[n][1],	sinkPos[n][2],	counterHeigth, unID, sinkPos[n][1], 2			: unID = unID + 1

		hotspot sinkPos[n][1],	 0,				counterHeigth, unID, sinkPos[n][2], 1+128		: unID = unID + 1
		hotspot sinkPos[n][1],	-1,				counterHeigth, unID, sinkPos[n][2], 3			: unID = unID + 1
		hotspot sinkPos[n][1],	sinkPos[n][2],	counterHeigth, unID, sinkPos[n][2], 2			: unID = unID + 1
	endif

	if elementTypes[i][1] = SYMBTYPE_COOKTOP then
		hotspot  0,					cooktopPos[n][2],	counterHeigth, unID, cooktopPos[n][1], 1+128		: unID = unID + 1
		hotspot -1,					cooktopPos[n][2],	counterHeigth, unID, cooktopPos[n][1], 3			: unID = unID + 1
		hotspot cooktopPos[n][1],	cooktopPos[n][2],	counterHeigth, unID, cooktopPos[n][1], 2			: unID = unID + 1

		hotspot cooktopPos[n][1],	 0,					counterHeigth, unID, cooktopPos[n][2], 1+128		: unID = unID + 1
		hotspot cooktopPos[n][1],	-1,					counterHeigth, unID, cooktopPos[n][2], 3			: unID = unID + 1
		hotspot cooktopPos[n][1],	cooktopPos[n][2],	counterHeigth, unID, cooktopPos[n][2], 2			: unID = unID + 1
	endif

	if elementTypes[i][1] = SYMBTYPE_OVEN then
		hotspot  0,				ovenPos[n][2],	counterHeigth, unID, ovenPos[n][1], 1+128		: unID = unID + 1
		hotspot -1,				ovenPos[n][2],	counterHeigth, unID, ovenPos[n][1], 3			: unID = unID + 1
		hotspot ovenPos[n][1],	ovenPos[n][2],	counterHeigth, unID, ovenPos[n][1], 2			: unID = unID + 1

		hotspot ovenPos[n][1],	 0,				counterHeigth, unID, ovenPos[n][2], 1+128		: unID = unID + 1
		hotspot ovenPos[n][1],	-1,				counterHeigth, unID, ovenPos[n][2], 3			: unID = unID + 1
		hotspot ovenPos[n][1],	ovenPos[n][2],	counterHeigth, unID, ovenPos[n][2], 2			: unID = unID + 1
	endif

	if elementTypes[i][1] = SYMBTYPE_REFRI then
		hotspot  0,						refrigeratorPos[n][2],	refrigeratorHeigth, unID, refrigeratorPos[n][1], 1+128		: unID = unID + 1
		hotspot -1,						refrigeratorPos[n][2],	refrigeratorHeigth, unID, refrigeratorPos[n][1], 3			: unID = unID + 1
		hotspot refrigeratorPos[n][1],	refrigeratorPos[n][2],	refrigeratorHeigth, unID, refrigeratorPos[n][1], 2			: unID = unID + 1

		hotspot refrigeratorPos[n][1],	 0,						refrigeratorHeigth, unID, refrigeratorPos[n][2], 1+128		: unID = unID + 1
		hotspot refrigeratorPos[n][1],	-1,						refrigeratorHeigth, unID, refrigeratorPos[n][2], 3			: unID = unID + 1
		hotspot refrigeratorPos[n][1],	refrigeratorPos[n][2],	refrigeratorHeigth, unID, refrigeratorPos[n][2], 2			: unID = unID + 1
	endif

	if elementTypes[i][1] = SYMBTYPE_DISHWASH then
		hotspot  0,						dishwasherPos[n][2],	counterHeigth, unID, dishwasherPos[n][1], 1+128	: unID = unID + 1
		hotspot -1,						dishwasherPos[n][2],	counterHeigth, unID, dishwasherPos[n][1], 3		: unID = unID + 1
		hotspot dishwasherPos[n][1],	dishwasherPos[n][2],	counterHeigth, unID, dishwasherPos[n][1], 2		: unID = unID + 1

		hotspot dishwasherPos[n][1],	 0,						counterHeigth, unID, dishwasherPos[n][2], 1+128	: unID = unID + 1
		hotspot dishwasherPos[n][1],	-1,						counterHeigth, unID, dishwasherPos[n][2], 3		: unID = unID + 1
		hotspot dishwasherPos[n][1],	dishwasherPos[n][2],	counterHeigth, unID, dishwasherPos[n][2], 2		: unID = unID + 1
	endif

	if elementTypes[i][1] = SYMBTYPE_WASH then
		hotspot  0,					washerPos[n][2],	counterHeigth, unID, washerPos[n][1], 1+128	: unID = unID + 1
		hotspot -1,					washerPos[n][2],	counterHeigth, unID, washerPos[n][1], 3		: unID = unID + 1
		hotspot washerPos[n][1],	washerPos[n][2],	counterHeigth, unID, washerPos[n][1], 2		: unID = unID + 1

		hotspot washerPos[n][1],	 0,					counterHeigth, unID, washerPos[n][2], 1+128	: unID = unID + 1
		hotspot washerPos[n][1],	-1,					counterHeigth, unID, washerPos[n][2], 3		: unID = unID + 1
		hotspot washerPos[n][1],	washerPos[n][2],	counterHeigth, unID, washerPos[n][2], 2		: unID = unID + 1
	endif
next i


! ------------------------------------------------------------------------------
! Elements Width Hotspots
! ------------------------------------------------------------------------------

for i = 1 to nElement
	n = elementTypes[i][2]
	unID = 2000 + (elementTypes[i][1]-1) * 1000  +  (n-1) * 100 + 20

	if elementTypes[i][1] = SYMBTYPE_TALL then
		hotspot elementWidth[i][1],							elementWidth[i][2],						ZZYZX, unID, tallCabinetWidth2[n], 1+128	: unID = unID + 1
		hotspot elementWidth[i][1]+cos(elementAngle[i]),	elementWidth[i][2]+sin(elementAngle[i]),ZZYZX, unID, tallCabinetWidth2[n], 3	: unID = unID + 1
		hotspot elementWidth[i][3],							elementWidth[i][4],						ZZYZX, unID, tallCabinetWidth2[n], 2	: unID = unID + 1

		hotspot elementWidth[i][3],							elementWidth[i][4],						ZZYZX, unID, tallCabinetWidth[n], 1+128	: unID = unID + 1
		hotspot elementWidth[i][3]-cos(elementAngle[i]),	elementWidth[i][4]-sin(elementAngle[i]),ZZYZX, unID, tallCabinetWidth[n], 3		: unID = unID + 1
		hotspot elementWidth[i][1],							elementWidth[i][2],						ZZYZX, unID, tallCabinetWidth[n], 2		: unID = unID + 1

		unID = unID + 6
	endif

	if elementTypes[i][1] = SYMBTYPE_SINK then
		if iSinkType <> ACC_SINK_ROUND then
			hotspot elementWidth[i][1],						elementWidth[i][2],						counterHeigth, unID, sinkWidth2[n], 1+128	: unID = unID + 1
			hotspot elementWidth[i][1]+cos(elementAngle[i]),elementWidth[i][2]+sin(elementAngle[i]),counterHeigth, unID, sinkWidth2[n], 3		: unID = unID + 1
			hotspot elementWidth[i][3],						elementWidth[i][4],						counterHeigth, unID, sinkWidth2[n], 2		: unID = unID + 1

			hotspot elementWidth[i][3],						elementWidth[i][4],						counterHeigth, unID, sinkWidth[n], 1+128	: unID = unID + 1
			hotspot elementWidth[i][3]-cos(elementAngle[i]),elementWidth[i][4]-sin(elementAngle[i]),counterHeigth, unID, sinkWidth[n], 3		: unID = unID + 1
			hotspot elementWidth[i][1],						elementWidth[i][2],						counterHeigth, unID, sinkWidth[n], 2		: unID = unID + 1

			unID = unID + 6
		else
			hotspot elementPos[i][1],						elementPos[i][2],						counterHeigth, unID, sinkWidthHalf, 1+128			: unID = unID + 1
			hotspot elementPos[i][1]+cos(elementAngle[i]),	elementPos[i][2]+sin(elementAngle[i]),	counterHeigth, unID, sinkWidthHalf, 3				: unID = unID + 1
			hotspot elementWidth[i][3],						elementWidth[i][4],						counterHeigth, unID, sinkWidthHalf, 2, sinkWidth[n]	: unID = unID + 1

			hotspot elementPos[i][1],						elementPos[i][2],						counterHeigth, unID, sinkWidthHalf, 1+128			: unID = unID + 1
			hotspot elementPos[i][1]-cos(elementAngle[i]),	elementPos[i][2]-sin(elementAngle[i]),	counterHeigth, unID, sinkWidthHalf, 3				: unID = unID + 1
			hotspot elementWidth[i][1],						elementWidth[i][2],						counterHeigth, unID, sinkWidthHalf, 2, sinkWidth[n]	: unID = unID + 1

			unID = unID + 6
		endif
	endif

	if elementTypes[i][1] = SYMBTYPE_COOKTOP then
		hotspot elementWidth[i][1],						elementWidth[i][2],						counterHeigth, unID, cooktopWidth2[n], 1+128	: unID = unID + 1
		hotspot elementWidth[i][1]+cos(elementAngle[i]),elementWidth[i][2]+sin(elementAngle[i]),counterHeigth, unID, cooktopWidth2[n], 3		: unID = unID + 1
		hotspot elementWidth[i][3],						elementWidth[i][4],						counterHeigth, unID, cooktopWidth2[n], 2		: unID = unID + 1

		hotspot elementWidth[i][3],						elementWidth[i][4],						counterHeigth, unID, cooktopWidth[n], 1+128	: unID = unID + 1
		hotspot elementWidth[i][3]-cos(elementAngle[i]),elementWidth[i][4]-sin(elementAngle[i]),counterHeigth, unID, cooktopWidth[n], 3		: unID = unID + 1
		hotspot elementWidth[i][1],						elementWidth[i][2],						counterHeigth, unID, cooktopWidth[n], 2		: unID = unID + 1

		if bHood then
			hotspot hoodWidthPos[n][1],						hoodWidthPos[n][2],						counterHeigth+wallCabinetClearence, unID, hoodWidth2[n], 1+128			: unID = unID + 1
			hotspot hoodWidthPos[n][1]-cos(elementAngle[i]),hoodWidthPos[n][2]-sin(elementAngle[i]),counterHeigth+wallCabinetClearence, unID, hoodWidth2[n], 3			: unID = unID + 1
			hotspot hoodWidthPos[n][3],						hoodWidthPos[n][4],						counterHeigth+wallCabinetClearence, unID, hoodWidth2[n], 2, hoodWidth[n]	: unID = unID + 1

			hotspot hoodWidthPos[n][1],						hoodWidthPos[n][2],						counterHeigth+wallCabinetClearence, unID, hoodWidth2[n], 1+128			: unID = unID + 1
			hotspot hoodWidthPos[n][1]+cos(elementAngle[i]),hoodWidthPos[n][2]+sin(elementAngle[i]),counterHeigth+wallCabinetClearence, unID, hoodWidth2[n], 3			: unID = unID + 1
			hotspot hoodWidthPos[n][5],						hoodWidthPos[n][6],						counterHeigth+wallCabinetClearence, unID, hoodWidth2[n], 2, hoodWidth[n]	: unID = unID + 1
		else
			unID = unID + 6
		endif
	endif

	if elementTypes[i][1] = SYMBTYPE_OVEN then
		hpH = ovenHeigth[n] + ovenH
		add sin(elementAngle[i]) * counterDepth/2, -cos(elementAngle[i]) * counterDepth/2, 0

		hotspot elementWidth[i][1],						elementWidth[i][2],						hpH, unID, ovenWidth2[n], 1+128		: unID = unID + 1
		hotspot elementWidth[i][1]+cos(elementAngle[i]),elementWidth[i][2]+sin(elementAngle[i]),hpH, unID, ovenWidth2[n], 3			: unID = unID + 1
		hotspot elementWidth[i][3],						elementWidth[i][4],						hpH, unID, ovenWidth2[n], 2			: unID = unID + 1

		hotspot elementWidth[i][3],						elementWidth[i][4],						hpH, unID, ovenWidth[n], 1+128		: unID = unID + 1
		hotspot elementWidth[i][3]-cos(elementAngle[i]),elementWidth[i][4]-sin(elementAngle[i]),hpH, unID, ovenWidth[n], 3			: unID = unID + 1
		hotspot elementWidth[i][1],						elementWidth[i][2],						hpH, unID, ovenWidth[n], 2			: unID = unID + 1

		if bOvenInTall[n] then
			hotspot ovenPos[n][1],	ovenPos[n][2],	0, 				unID, ovenHeigth[n], 1+128		: unID = unID + 1
			hotspot ovenPos[n][1],	ovenPos[n][2],	-1, 			unID, ovenHeigth[n], 3			: unID = unID + 1
			hotspot ovenPos[n][1],	ovenPos[n][2],	ovenHeigth[n],	unID, ovenHeigth[n], 2			: unID = unID + 1
		else
			unID = unID + 3
		endif

		unID = unID + 3

		del 1
	endif

	if elementTypes[i][1] = SYMBTYPE_REFRI then
		tx1 = sin(elementAngle[i]) * (refrigeratorDepth-counterDepth/2)
		ty1 = cos(elementAngle[i]) * (refrigeratorDepth-counterDepth/2)

		tx2 = sin(elementAngle[i]) * refrigeratorDepth
		ty2 = cos(elementAngle[i]) * refrigeratorDepth

		tx3 = sin(elementAngle[i]) * (counterDepth/2)
		ty3 = cos(elementAngle[i]) * (counterDepth/2)

		hotspot elementWidth[i][1]+tx1,						elementWidth[i][2]-ty1,						refrigeratorHeigth, unID, refrigeratorWidth2[n], 1+128	: unID = unID + 1
		hotspot elementWidth[i][1]+tx1+cos(elementAngle[i]),elementWidth[i][2]-ty1+sin(elementAngle[i]),refrigeratorHeigth, unID, refrigeratorWidth2[n], 3	: unID = unID + 1
		hotspot elementWidth[i][3]+tx1,						elementWidth[i][4]-ty1,						refrigeratorHeigth, unID, refrigeratorWidth2[n], 2	: unID = unID + 1

		hotspot elementWidth[i][3]+tx1,						elementWidth[i][4]-ty1,						refrigeratorHeigth, unID, refrigeratorWidth[n], 1+128	: unID = unID + 1
		hotspot elementWidth[i][3]+tx1-cos(elementAngle[i]),elementWidth[i][4]-ty1-sin(elementAngle[i]),refrigeratorHeigth, unID, refrigeratorWidth[n], 3		: unID = unID + 1
		hotspot elementWidth[i][1]+tx1,						elementWidth[i][2]-ty1,						refrigeratorHeigth, unID, refrigeratorWidth[n], 2		: unID = unID + 1

		hotspot elementWidth[i][1]-tx3,						elementWidth[i][2]+ty3,						refrigeratorHeigth, unID, refrigeratorDepth, 1+128	: unID = unID + 1
		hotspot elementWidth[i][1]-tx3,						elementWidth[i][2]+ty3,						refrigeratorHeigth, unID, refrigeratorDepth, 3		: unID = unID + 1
		hotspot elementWidth[i][1]-tx3+tx2,					elementWidth[i][2]+ty3-ty2,					refrigeratorHeigth, unID, refrigeratorDepth, 2		: unID = unID + 1

		hotspot elementWidth[i][3]-tx3,						elementWidth[i][4]+ty3,						refrigeratorHeigth, unID, refrigeratorDepth, 1+128	: unID = unID + 1
		hotspot elementWidth[i][3]-tx3,						elementWidth[i][4]+ty3,						refrigeratorHeigth, unID, refrigeratorDepth, 3		: unID = unID + 1
		hotspot elementWidth[i][3]-tx3+tx2,					elementWidth[i][4]+ty3-ty2,					refrigeratorHeigth, unID, refrigeratorDepth, 2		: unID = unID + 1

	endif

	if elementTypes[i][1] = SYMBTYPE_DISHWASH then
		add sin(elementAngle[i]) * counterDepth/2, -cos(elementAngle[i]) * counterDepth/2, 0

		hotspot elementWidth[i][1],						elementWidth[i][2],						counterHeigth, unID, dishwasherWidth2[n], 1+128		: unID = unID + 1
		hotspot elementWidth[i][1]+cos(elementAngle[i]),elementWidth[i][2]+sin(elementAngle[i]),counterHeigth, unID, dishwasherWidth2[n], 3		: unID = unID + 1
		hotspot elementWidth[i][3],						elementWidth[i][4],						counterHeigth, unID, dishwasherWidth2[n], 2		: unID = unID + 1

		hotspot elementWidth[i][3],						elementWidth[i][4],						counterHeigth, unID, dishwasherWidth[n], 1+128		: unID = unID + 1
		hotspot elementWidth[i][3]-cos(elementAngle[i]),elementWidth[i][4]-sin(elementAngle[i]),counterHeigth, unID, dishwasherWidth[n], 3		: unID = unID + 1
		hotspot elementWidth[i][1],						elementWidth[i][2],						counterHeigth, unID, dishwasherWidth[n], 2		: unID = unID + 1

		unID = unID + 6

		del 1
	endif

	if elementTypes[i][1] = SYMBTYPE_WASH then
		add sin(elementAngle[i]) * counterDepth/2, -cos(elementAngle[i]) * counterDepth/2, 0

		hotspot elementWidth[i][1],						elementWidth[i][2],						counterHeigth, unID, washerWidth2[n], 1+128	: unID = unID + 1
		hotspot elementWidth[i][1]+cos(elementAngle[i]),elementWidth[i][2]+sin(elementAngle[i]),counterHeigth, unID, washerWidth2[n], 3		: unID = unID + 1
		hotspot elementWidth[i][3],						elementWidth[i][4],						counterHeigth, unID, washerWidth2[n], 2		: unID = unID + 1

		hotspot elementWidth[i][3],						elementWidth[i][4],						counterHeigth, unID, washerWidth[n], 1+128	: unID = unID + 1
		hotspot elementWidth[i][3]-cos(elementAngle[i]),elementWidth[i][4]-sin(elementAngle[i]),counterHeigth, unID, washerWidth[n], 3		: unID = unID + 1
		hotspot elementWidth[i][1],						elementWidth[i][2],						counterHeigth, unID, washerWidth[n], 2		: unID = unID + 1

		unID = unID + 6

		del 1
	endif

next i


! ==============================================================================
!
! Body
!
! ==============================================================================

nCut	= 0
nToeCut	= 0
nWallCut= 0

! ------------------------------------------------------------------------------
! Cutting Toe
! ------------------------------------------------------------------------------
for i = 1 to nElement
	if elementTypes[i][1] = SYMBTYPE_TALL | elementTypes[i][1] = SYMBTYPE_REFRI | elementTypes[i][1] = SYMBTYPE_DISHWASH | elementTypes[i][1] = SYMBTYPE_WASH then
		add elementXY[i][1], elementXY[i][2], 0
		rotz elementAngle[i]

		widthSymbol		= counterDepth + EPS
		lengthSymbol	= elementSizes[i]

		cutpolya 4, 1, 0,
			-lengthSymbol/2, -widthSymbol/2, cutMask,
			-lengthSymbol/2,  widthSymbol/2, cutMask,
			 lengthSymbol/2,  widthSymbol/2, cutMask,
			 lengthSymbol/2, -widthSymbol/2, cutMask

		nToeCut = nToeCut + 1

		del 2
	endif
next i


! ------------------------------------------------------------------------------
! Toe Body
! ------------------------------------------------------------------------------
if toeHeigth > EPS then
	dim tempOffset[][2]
	offsetSize = counterDepth - toeBack
	gosub "polyLineOffset"
	dim toePoints[][2]
	toePoints = tempOffset

	for i = 1 to nTotalRefPoint-1
		if bIsLine[i] then
			startMask	= 10 + 5 * not(bIsSect[i])
			endMask		= 10 + 5 * not(bIsSect[i+1])

			material gs_base_mat
			prism_ 5, toeHeigth,
				refLinePoints[i  ][1], refLinePoints[i  ][2], 15,
				refLinePoints[i+1][1], refLinePoints[i+1][2], endMask,
				toePoints[i+1][1],	toePoints[i+1][2], 15,
				toePoints[i][1],	toePoints[i  ][2], startMask,
				refLinePoints[i  ][1], refLinePoints[i  ][2], -1

			rotz refAngle[i]
			gosub "textureCube"
			del 1
		endif
	next i
endif


! ------------------------------------------------------------------------------
! Cutend
! ------------------------------------------------------------------------------
for i =1 to nToeCut
	cutend
next i


! ------------------------------------------------------------------------------
! Cutting Counter
! ------------------------------------------------------------------------------
for i = 1 to nElement
	if elementTypes[i][1] = SYMBTYPE_SINK then
		add elementXY[i][1], elementXY[i][2], 0
		rotz elementAngle[i]

		widthSymbol		= counterDepth
		lengthSymbol	= elementSizes[i]

		if elementTypes[i][1] = SYMBTYPE_SINK then
			if iSinkType = ACC_SINK_ROUND then
				cutpolya 2, 1, 0,
					0, 0, 979,
					sinkWidthHalf-0.01, 360, 4079
			else
				if counterDepth < minSinkCounter then
					sinkOffsetY	= 0
					sinkMinusY	= 0.02
					sinkMinusX	= 0.02
				else
					sinkOffsetY = 0.02
					sinkMinusY	= 0.15
					sinkMinusX	= 0.05
				endif

				addy sinkOffsetY

				widthSymbol = widthSymbol - sinkMinusY
				lengthSymbol = lengthSymbol - sinkMinusX
				cutpolya 4, 1, 0,
					-lengthSymbol/2, -widthSymbol/2, cutMask,
					-lengthSymbol/2,  widthSymbol/2, cutMask,
					 lengthSymbol/2,  widthSymbol/2, cutMask,
					 lengthSymbol/2, -widthSymbol/2, cutMask
				del 1
			endif

			nCut = nCut + 1

		endif

		del 2
	endif

	if elementTypes[i][1] = SYMBTYPE_TALL then
		add elementXY[i][1], elementXY[i][2], 0
		rotz elementAngle[i]

		widthSymbol		= counterDepth + EPS
		lengthSymbol	= elementSizes[i]

		cutpolya 4, 1, 0,
			-lengthSymbol/2, -widthSymbol/2, cutMask,
			-lengthSymbol/2,  widthSymbol/2, cutMask,
			 lengthSymbol/2,  widthSymbol/2, cutMask,
			 lengthSymbol/2, -widthSymbol/2, cutMask

		nCut = nCut + 1

		del 2
	endif

	if elementTypes[i][1] = SYMBTYPE_REFRI & (refrigeratorHeigth > counterHeigth-EPS | bRefriWallCabinet) then
		add elementXY[i][1], elementXY[i][2], 0
		rotz elementAngle[i]

		widthSymbol		= counterDepth + EPS
		lengthSymbol	= elementSizes[i]

		cutpolya 4, 1, 0,
			-lengthSymbol/2, -widthSymbol/2, cutMask,
			-lengthSymbol/2,  widthSymbol/2, cutMask,
			 lengthSymbol/2,  widthSymbol/2, cutMask,
			 lengthSymbol/2, -widthSymbol/2, cutMask

		nCut = nCut + 1

		del 2
	endif

next i


! ------------------------------------------------------------------------------
! Counter Body
! ------------------------------------------------------------------------------
for i = 1 to nTotalRefPoint-1
	if bIsLine[i] then
		startMask	= 10 + 5 * not(bIsSect[i])
		endMask		= 10 + 5 * not(bIsSect[i+1])

		material count_mat
		addz counterHeigth-counterThickness
		prism_ 5, counterThickness,
			refLinePoints[i  ][1], refLinePoints[i  ][2], 15,
			refLinePoints[i+1][1], refLinePoints[i+1][2], endMask,
			oppsidePoints[i+1][1], oppsidePoints[i+1][2], 15,
			oppsidePoints[i  ][1], oppsidePoints[i  ][2], startMask,
			refLinePoints[i  ][1], refLinePoints[i  ][2], -1

		rotz refAngle[i]
		gosub "textureCube"
		del 2
	endif
next i


! ------------------------------------------------------------------------------
! Cutting Cabinet
! ------------------------------------------------------------------------------
for i = 1 to nElement
	if (elementTypes[i][1] = SYMBTYPE_REFRI & (refrigeratorHeigth < counterHeigth+EPS | not(bRefriWallCabinet))) | elementTypes[i][1] = SYMBTYPE_DISHWASH | elementTypes[i][1] = SYMBTYPE_WASH then
		add elementXY[i][1], elementXY[i][2], 0
		rotz elementAngle[i]

		widthSymbol		= counterDepth + EPS
		lengthSymbol	= elementSizes[i]

		cutpolya 4, 1, 0,
			-lengthSymbol/2, -widthSymbol/2, cutMask,
			-lengthSymbol/2,  widthSymbol/2, cutMask,
			 lengthSymbol/2,  widthSymbol/2, cutMask,
			 lengthSymbol/2, -widthSymbol/2, cutMask

		nCut = nCut + 1

		del 2
	endif
next i


! ------------------------------------------------------------------------------
! Cabinet Body
! ------------------------------------------------------------------------------
for i = 1 to nTotalRefPoint-1
	if bIsLine[i] then
		nOvenCut = 0
		for k = 1 to nofOvens
			if nSegmentOven[k] = i then
				add ovenPos[k][1], ovenPos[k][2], 0
				rotz refAngle[nSegmentOven[k]]
				rotx 90
				add 0, ovenHeigth[k], -counterDepth

				material oven_mat
				cutpolya 4, 2, ovenCutDepth,
					-ovenWidth[k]/2+ovenBack, ovenBack,			cutMask2,
					-ovenWidth[k]/2+ovenBack, ovenH-ovenBack,	cutMask2,
					 ovenWidth[k]/2-ovenBack, ovenH-ovenBack,	cutMask2,
					 ovenWidth[k]/2-ovenBack, ovenBack,			cutMask2,
					 0, 0, ovenCutDepth

				nOvenCut = nOvenCut + 1

				addz (counterDepth-ovenThk*2)*1.5+ovenThk
				cutpolya 4, 2, ovenThk,
					-ovenWidth[k]/2, 0,		cutMask2,
					-ovenWidth[k]/2, ovenH,	cutMask2,
					 ovenWidth[k]/2, ovenH,	cutMask2,
					 ovenWidth[k]/2, 0,		cutMask2,
					 0, 0, ovenThk

				nOvenCut = nOvenCut + 1

				del 5
			endif
		next k

		startMask	= 10 + 5 * not(bIsSect[i])
		endMask		= 10 + 5 * not(bIsSect[i+1])

		material gs_cabinet_mat
		addz toeHeigth
		prism_ 5, counterHeigth-toeHeigth-counterThickness,
			refLinePoints[i  ][1], refLinePoints[i  ][2], 15,
			refLinePoints[i+1][1], refLinePoints[i+1][2], endMask,
			oppsidePoints[i+1][1], oppsidePoints[i+1][2], 15,
			oppsidePoints[i  ][1], oppsidePoints[i  ][2], startMask,
			refLinePoints[i  ][1], refLinePoints[i  ][2], -1

		rotz refAngle[i]
		gosub "textureCube"
		del 2

		for k = 1 to nOvenCut
			cutend
		next k
	endif
next i


! ------------------------------------------------------------------------------
! Cutend
! ------------------------------------------------------------------------------
for i =1 to nCut
	cutend
next i


! ------------------------------------------------------------------------------
! Cutting Wall Cabinet
! ------------------------------------------------------------------------------
for i = 1 to nElement
	if elementTypes[i][1] = SYMBTYPE_TALL | elementTypes[i][1] = SYMBTYPE_REFRI | elementTypes[i][1] = SYMBTYPE_COOKTOP then
		add elementXY[i][1], elementXY[i][2], 0
		rotz elementAngle[i]

		widthSymbol		= counterDepth + EPS
		lengthSymbol	= elementSizes[i]

		if elementTypes[i][1] = SYMBTYPE_TALL | (elementTypes[i][1] = SYMBTYPE_REFRI & bRefriWallCabinet) then
			cutpolya 4, 1, 0,
				-lengthSymbol/2, -widthSymbol/2, cutMask,
				-lengthSymbol/2,  widthSymbol/2, cutMask,
				 lengthSymbol/2,  widthSymbol/2, cutMask,
				 lengthSymbol/2, -widthSymbol/2, cutMask

			nWallCut = nWallCut + 1
		else
			if elementTypes[i][1] = SYMBTYPE_REFRI & refrigeratorHeigth > counterHeigth + wallCabinetClearence then
				cutpolya 4, 1, 0,
					-lengthSymbol/2, -widthSymbol/2, cutMask,
					-lengthSymbol/2,  widthSymbol/2, cutMask,
					 lengthSymbol/2,  widthSymbol/2, cutMask,
					 lengthSymbol/2, -widthSymbol/2, cutMask

				nWallCut = nWallCut + 1
			endif

			if elementTypes[i][1] = SYMBTYPE_COOKTOP & bHood then
				hoodSizeX = hoodWidth[elementTypes[i][2]]/2

				if iHoodType = ACC_HOOD_BUILTIN then
					addz counterHeigth + wallCabinetClearence
					cutpolya 4, 1, -0.2,
						-hoodSizeX, -widthSymbol/2, cutMask,
						-hoodSizeX,  widthSymbol/2, cutMask,
						 hoodSizeX,  widthSymbol/2, cutMask,
						 hoodSizeX, -widthSymbol/2, cutMask,
						 0, 0, -0.2
					del 1

					nWallCut = nWallCut + 1
				else
					cutpolya 4, 1, 0,
						-hoodSizeX, -widthSymbol/2, cutMask,
						-hoodSizeX,  widthSymbol/2, cutMask,
						 hoodSizeX,  widthSymbol/2, cutMask,
						 hoodSizeX, -widthSymbol/2, cutMask

					nWallCut = nWallCut + 1
				endif
			endif
		endif

		del 2
	endif
next i


! ------------------------------------------------------------------------------
! Wall Cabinet
! ------------------------------------------------------------------------------
wallCabBottomH	= counterHeigth + wallCabinetClearence
wallCabTopH		= counterHeigth + wallCabinetClearence + wallCabinetHeigth
material wallcab_mat

for i = 1 to nWallCabinet
	unID = 15000 + (i-1) * 100

	hotspot  0,							wallCabinetPos_1[i][2],	wallCabBottomH, unID, wallCabinetPos_1[i][1], 1+128	: unID = unID + 1
	hotspot -1,							wallCabinetPos_1[i][2],	wallCabBottomH, unID, wallCabinetPos_1[i][1], 3		: unID = unID + 1
	hotspot  wallCabinetPos_1[i][1],	wallCabinetPos_1[i][2],	wallCabBottomH, unID, wallCabinetPos_1[i][1], 2		: unID = unID + 1

	hotspot  wallCabinetPos_1[i][1],	0,						wallCabBottomH, unID, wallCabinetPos_1[i][2], 1+128	: unID = unID + 1
	hotspot  wallCabinetPos_1[i][1],	-1,						wallCabBottomH, unID, wallCabinetPos_1[i][2], 3		: unID = unID + 1
	hotspot  wallCabinetPos_1[i][1],	wallCabinetPos_1[i][2],	wallCabBottomH, unID, wallCabinetPos_1[i][2], 2		: unID = unID + 1

	hotspot  0,							wallCabinetPos_2[i][2],	wallCabBottomH, unID, wallCabinetPos_2[i][1], 1+128	: unID = unID + 1
	hotspot -1,							wallCabinetPos_2[i][2],	wallCabBottomH, unID, wallCabinetPos_2[i][1], 3		: unID = unID + 1
	hotspot  wallCabinetPos_2[i][1],	wallCabinetPos_2[i][2],	wallCabBottomH, unID, wallCabinetPos_2[i][1], 2		: unID = unID + 1

	hotspot  wallCabinetPos_2[i][1],	0,						wallCabBottomH, unID, wallCabinetPos_2[i][2], 1+128	: unID = unID + 1
	hotspot  wallCabinetPos_2[i][1],	-1,						wallCabBottomH, unID, wallCabinetPos_2[i][2], 3		: unID = unID + 1
	hotspot  wallCabinetPos_2[i][1],	wallCabinetPos_2[i][2],	wallCabBottomH, unID, wallCabinetPos_2[i][2], 2		: unID = unID + 1


	hotspot  0,							wallCabinetPos_1[i][2],	wallCabTopH, unID, wallCabinetPos_1[i][1], 1+128	: unID = unID + 1
	hotspot -1,							wallCabinetPos_1[i][2],	wallCabTopH, unID, wallCabinetPos_1[i][1], 3		: unID = unID + 1
	hotspot  wallCabinetPos_1[i][1],	wallCabinetPos_1[i][2],	wallCabTopH, unID, wallCabinetPos_1[i][1], 2		: unID = unID + 1

	hotspot  wallCabinetPos_1[i][1],	0,						wallCabTopH, unID, wallCabinetPos_1[i][2], 1+128	: unID = unID + 1
	hotspot  wallCabinetPos_1[i][1],	-1,						wallCabTopH, unID, wallCabinetPos_1[i][2], 3		: unID = unID + 1
	hotspot  wallCabinetPos_1[i][1], 	wallCabinetPos_1[i][2],	wallCabTopH, unID, wallCabinetPos_1[i][2], 2		: unID = unID + 1

	hotspot  0,							wallCabinetPos_2[i][2],	wallCabTopH, unID, wallCabinetPos_2[i][1], 1+128	: unID = unID + 1
	hotspot -1,							wallCabinetPos_2[i][2],	wallCabTopH, unID, wallCabinetPos_2[i][1], 3		: unID = unID + 1
	hotspot  wallCabinetPos_2[i][1],	wallCabinetPos_2[i][2],	wallCabTopH, unID, wallCabinetPos_2[i][1], 2		: unID = unID + 1

	hotspot  wallCabinetPos_2[i][1],	0,						wallCabTopH, unID, wallCabinetPos_2[i][2], 1+128	: unID = unID + 1
	hotspot  wallCabinetPos_2[i][1],	-1,						wallCabTopH, unID, wallCabinetPos_2[i][2], 3		: unID = unID + 1
	hotspot  wallCabinetPos_2[i][1],	wallCabinetPos_2[i][2],	wallCabTopH, unID, wallCabinetPos_2[i][2], 2		: unID = unID + 1


	addz wallCabBottomH
	for j = 1 to nWallContour[i] - 1
		startMask	= 10 + 5 * (j = 1)
		endMask		= 10 + 5 * (j = nWallContour[i] - 1)

		prism_ 5, wallCabinetHeigth,
			wallCoords1[i][j*2-1], wallCoords1[i][j*2], 15,
			wallCoords1[i][j*2+1], wallCoords1[i][j*2+2], endMask,
			wallCoords2[i][j*2+1], wallCoords2[i][j*2+2], 15,
			wallCoords2[i][j*2-1], wallCoords2[i][j*2], startMask,
			wallCoords1[i][j*2-1], wallCoords1[i][j*2], -1

		rotz refAngle[nWallSegment[i][1 + (nWallSegment[i][1] > nWallSegment[i][2])]+j-1]
		gosub "textureCube"
		del 1
	next j
	del 1
next i

! ------------------------------------------------------------------------------
! Cutend
! ------------------------------------------------------------------------------
for i =1 to nWallCut
	cutend
next i


! ------------------------------------------------------------------------------
! Symbols
! ------------------------------------------------------------------------------
for i = 1 to nElement
	add elementXY[i][1], elementXY[i][2], 0
	rotz elementAngle[i]
	widthSymbol		= counterDepth
	lengthSymbol	= elementSizes[i]
	symbolType		= elementTypes[i][1]
	nSymbol			= elementTypes[i][2]
	unID			= 2000 + (elementTypes[i][1]-1) * 1000  +  (elementTypes[i][2]-1) * 100 + 70

	if symbolType = SYMBTYPE_TALL		then gosub "symbolTallCabinet"
	if symbolType = SYMBTYPE_SINK		then gosub "symbolSink"
	if symbolType = SYMBTYPE_COOKTOP	then gosub "symbolCookTop"
	if symbolType = SYMBTYPE_OVEN		then gosub "symbolOven"
	if symbolType = SYMBTYPE_REFRI		then gosub "symbolRefrigerator"
	if symbolType = SYMBTYPE_DISHWASH	then gosub "symbolDishwasher"
	if symbolType = SYMBTYPE_WASH		then gosub "symbolWasher"

	del 2
next i


! ==============================================================================
!
end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end
!
! ==============================================================================


! ------------------------------------------------------------------------------
! Draw Symbol
! ------------------------------------------------------------------------------


! ------------------------------------------------------------------------------
"symbolTallCabinet":
! ------------------------------------------------------------------------------

	nOvenCut = 0
	del 2
	for k = 1 to nofOvens
		if nSegmentOven[k] = nSegmentTall[nSymbol] then
			add ovenPos[k][1], ovenPos[k][2], 0
			rotz refAngle[nSegmentOven[k]]
			rotx 90
			add 0, ovenHeigth[k], -counterDepth

			material oven_mat
			cutpolya 4, 2, ovenCutDepth,
				-ovenWidth[k]/2+ovenBack, ovenBack,			cutMask2,
				-ovenWidth[k]/2+ovenBack, ovenH-ovenBack,	cutMask2,
				 ovenWidth[k]/2-ovenBack, ovenH-ovenBack,	cutMask2,
				 ovenWidth[k]/2-ovenBack, ovenBack,			cutMask2,
				 0, 0, ovenCutDepth

			nOvenCut = nOvenCut + 1

			addz (counterDepth-ovenThk*2)*1.5+ovenThk
			cutpolya 4, 2, ovenThk,
				-ovenWidth[k]/2, 0,		cutMask2,
				-ovenWidth[k]/2, ovenH,	cutMask2,
				 ovenWidth[k]/2, ovenH,	cutMask2,
				 ovenWidth[k]/2, 0,		cutMask2,
				 0, 0, ovenThk

			nOvenCut = nOvenCut + 1

			del 5
		endif
	next k

	add elementXY[i][1], elementXY[i][2], 0
	rotz elementAngle[i]

	material gs_base_mat
	prism_ 5, toeHeigth,
		-lengthSymbol/2, -widthSymbol/2+toeBack, 15,
		-lengthSymbol/2,  widthSymbol/2, 15,
		 lengthSymbol/2,  widthSymbol/2, 15,
		 lengthSymbol/2, -widthSymbol/2+toeBack, 15,
		-lengthSymbol/2, -widthSymbol/2+toeBack, -1
	gosub "textureCube"

	material gs_cabinet_mat
	addz toeHeigth
	prism_ 5, counterHeigth+wallCabinetHeigth+wallCabinetClearence-toeHeigth,
		-lengthSymbol/2, -widthSymbol/2, 15,
		-lengthSymbol/2,  widthSymbol/2, 15,
		 lengthSymbol/2,  widthSymbol/2, 15,
		 lengthSymbol/2, -widthSymbol/2, 15,
		-lengthSymbol/2, -widthSymbol/2, -1

	gosub "textureCube"
	del 1

	for k =1 to nOvenCut
		cutend
	next k
return


! ------------------------------------------------------------------------------
"symbolSink":
! ------------------------------------------------------------------------------

	if iSinkType = ACC_SINK_ROUND then
		lengthSymbol = min (lengthSymbol, widthSymbol)
		add -lengthSymbol/2*(1-2*bMirroredSink), -widthSymbol/2, counterHeigth-sinkDepth
		sinkMinus = 0
	else
		if counterDepth < minSinkCounter then
			sinkOffsetY	= 0
			sinkMinus	= 0
		else
			sinkOffsetY = 0.07
			sinkMinus	= 0.1
		endif
		add -lengthSymbol/2*(1-2*bMirroredSink), -widthSymbol/2 + sinkOffsetY, counterHeigth-sinkDepth
	endif
	mulx 1-2*bMirroredSink
	call "fa_sinktyp"  parameters	a	= lengthSymbol,
									b	= widthSymbol-sinkMinus,
								zzyzx	= sinkDepth,
					gs_sink_type_m		= gs_sink_type_m,
					SinkSymbol_m		= 1,
					sunder				= 0,
					TapSymbol_m			= 0,
					gs_cont_pen			= gs_cont_pen,
					gs_detlevel_3D_m	= 2,
					gs_sink_mat			= sink_mat,
					gs_shadow			= gs_shadow,
					gs_resol			= gs_resol,
					gs_tap_type_m		= 0,
					tapOffset			= 0,
					bShowHotspots		= 0
	del 2
return


! ------------------------------------------------------------------------------
"symbolCookTop":
! ------------------------------------------------------------------------------

	add 0, widthSymbol/2, counterHeigth
	call "fa_CooktopType" parameters	a	= lengthSymbol,
										aa	= lengthSymbol,
										b	= widthSymbol,
										bb	= widthSymbol - 0.1,
						CooktopType_m		= CooktopType_m,
						gs_hotspotUnIdBegin = unID,
						gs_cont_pen			= gs_cont_pen,
						gs_detlevel_3D_m	= 1,
						gs_shadow			= gs_shadow,
						gs_resol			= gs_resol,
						matarc				= hotplate_mat,
						bmat				= cooktop_mat,
						bShowHotspots		= 0
	del 1

	if bHood then gosub "symbolHood"
return


! ------------------------------------------------------------------------------
"symbolHood":
! ------------------------------------------------------------------------------

	hoodSizeX = hoodWidth[nSymbol]/2
	hoodSizeY = 0.85 * counterDepth
	hoodSizeZ = hoodHeigth - counterHeigth - wallCabinetClearence
	hoodChimneyX	= 0.14
	hoodChimneyY1	= counterDepth/2 - 0.15
	hoodChimneyY2	= counterDepth/2
	hoodOffsetY		= 0.05

	if iHoodType = ACC_HOOD_WALL then
		hotspot 0,	widthSymbol/2,	 0,			unID, hoodHeigth, 1+128		: unID = unID + 1
		hotspot 0,	widthSymbol/2,	-1,			unID, hoodHeigth, 3			: unID = unID + 1
		hotspot 0,	widthSymbol/2,	hoodHeigth, unID, hoodHeigth, 2			: unID = unID + 1
	endif

	if iHoodType = ACC_HOOD_HANGING then
		hotspot 0,	hoodOffsetY,	 0,			unID, hoodHeigth, 1+128		: unID = unID + 1
		hotspot 0,	hoodOffsetY,	-1,			unID, hoodHeigth, 3			: unID = unID + 1
		hotspot 0,	hoodOffsetY,	hoodHeigth, unID, hoodHeigth, 2			: unID = unID + 1
	endif

	material hood_mat
	addz counterHeigth + wallCabinetClearence

	if iHoodType = ACC_HOOD_WALL then
		addz 0.04
		ruled 4 , 2+4+14+32,
			 hoodSizeX-0.04,	counterDepth/2 - hoodSizeY + 0.04,	0,
			-hoodSizeX+0.04,	counterDepth/2 - hoodSizeY + 0.04,	0,
			-hoodSizeX+0.04,	hoodChimneyY2,	0,
			 hoodSizeX-0.04,	hoodChimneyY2,	0,

			 hoodChimneyX,		hoodChimneyY1,	0.24,
			-hoodChimneyX,		hoodChimneyY1,	0.24,
			-hoodChimneyX,		hoodChimneyY2,	0.24,
			 hoodChimneyX,		hoodChimneyY2,	0.24
		gosub "textureCube"

		addz 0.24
		prism_      5,  hoodSizeZ-0.28,
			-hoodChimneyX,	hoodChimneyY1,	15,
			 hoodChimneyX,	hoodChimneyY1,	15,
			 hoodChimneyX,	hoodChimneyY2,	15,
			-hoodChimneyX,	hoodChimneyY2,	15,
			-hoodChimneyX,	hoodChimneyY1,	-1
		gosub "textureCube"
		del 2

		prism_      5,      0.04,
			 hoodSizeX,	counterDepth/2 - hoodSizeY,		15,
			 hoodSizeX,	counterDepth/2,  				15,
			-hoodSizeX,	counterDepth/2,  				15,
			-hoodSizeX,	counterDepth/2 - hoodSizeY,		15,
			 hoodSizeX,	counterDepth/2 - hoodSizeY,		-1
		gosub "textureCube"
	endif

	if iHoodType = ACC_HOOD_HANGING then
		addz 0.04
		prism_      5,  hoodSizeZ-0.04,
			-hoodChimneyX,	-0.125+hoodOffsetY,	15,
			 hoodChimneyX,	-0.125+hoodOffsetY,	15,
			 hoodChimneyX,	 0.125+hoodOffsetY,	15,
			-hoodChimneyX,	 0.125+hoodOffsetY,	15,
			-hoodChimneyX,	-0.125+hoodOffsetY,	-1
		gosub "textureCube"
		del 1

		prism_      5,      0.04,
			 hoodSizeX,	counterDepth/2 - hoodSizeY,		15,
			 hoodSizeX,	counterDepth/2,  				15,
			-hoodSizeX,	counterDepth/2,  				15,
			-hoodSizeX,	counterDepth/2 - hoodSizeY,		15,
			 hoodSizeX,	counterDepth/2 - hoodSizeY,		-1
		gosub "textureCube"
	endif

	if iHoodType = ACC_HOOD_BUILTIN then
		rotx 90
		roty 90
		addz -hoodSizeX
		prism_ 7, hoodSizeX*2,
			counterDepth/2 - hoodSizeY, 0.0675, 15,
			counterDepth/2 - hoodSizeY, 0.2-0.0675, 15,
			counterDepth/2 - hoodSizeY + 0.15, 0.2, 15,
			counterDepth/2, 0.2, 15,
			counterDepth/2, 0, 15,
			counterDepth/2 - hoodSizeY + 0.15, 0, 15,
			counterDepth/2 - hoodSizeY, 0.0675, -1
		del 3

		gosub "textureCube"
	endif

	del 1
return


! ------------------------------------------------------------------------------
"symbolOven":
! ------------------------------------------------------------------------------

	add -lengthSymbol/2,-counterDepth/2, ovenHeigth[nSymbol]
	call "fa_MicOvenDoor" parameters	A		= lengthSymbol,
										B		= ovenThk,
										ZZYZX	= ovenH,
							ApplType_m			= 2,
							ApplStyle_m			= 1,
							gs_detlevel_3D_m	= 1,
							gs_shadow			= gs_shadow,
							PanelMat			= oven_mat,
							BaseMat				= oven_mat,
							HandleMat			= oven_mat,
							SwitchMat			= oven_mat,
							GlassMat			= glass_mat

	material  oven_mat
	addz ovenBack
	prism_ 5, ovenH-2*ovenBack,
		ovenBack, 				ovenThk,							7,
		lengthSymbol-ovenBack,	ovenThk,							15,
		lengthSymbol-ovenBack,	ovenCutDepth+counterDepth/2*0.6,	15,
		ovenBack,				ovenCutDepth+counterDepth/2*0.6,	15,
		ovenBack,				ovenThk,							-1

	del 2
return


! ------------------------------------------------------------------------------
"symbolRefrigerator":
! ------------------------------------------------------------------------------

	widthSymbol = refrigeratorDepth
	add 0, -widthSymbol/2 + counterDepth/2, 0

	if iRefrigeratorType <> ACC_REFRI_COMPACT then
		hotspot -lengthSymbol/2,	-widthSymbol/2,	 0,					unID, refrigeratorHeigth, 1+128		: unID = unID + 1
		hotspot -lengthSymbol/2,	-widthSymbol/2,	-1,					unID, refrigeratorHeigth, 3			: unID = unID + 1
		hotspot -lengthSymbol/2,	-widthSymbol/2,	refrigeratorHeigth, unID, refrigeratorHeigth, 2			: unID = unID + 1

		hotspot  lengthSymbol/2,	-widthSymbol/2,	 0,					unID, refrigeratorHeigth, 1+128		: unID = unID + 1
		hotspot  lengthSymbol/2,	-widthSymbol/2,	-1,					unID, refrigeratorHeigth, 3			: unID = unID + 1
		hotspot  lengthSymbol/2,	-widthSymbol/2,	refrigeratorHeigth, unID, refrigeratorHeigth, 2			: unID = unID + 1
	endif

	! Toe
	material gs_base_mat
	prism_ 5, toeHeigth,
		-lengthSymbol/2, -widthSymbol/2+refriDoorThk, 15,
		-lengthSymbol/2, -widthSymbol/2+toeBack, 15,
		 lengthSymbol/2, -widthSymbol/2+toeBack, 15,
		 lengthSymbol/2, -widthSymbol/2+refriDoorThk, 15,
		-lengthSymbol/2, -widthSymbol/2+refriDoorThk, -1
	gosub "textureCube"

	!Base
	material refrigerator_mat
	prism_ 5, refrigeratorHeigth,
		-lengthSymbol/2, -widthSymbol/2+refriDoorThk, 15,
		-lengthSymbol/2,  widthSymbol/2, 15,
		 lengthSymbol/2,  widthSymbol/2, 15,
		 lengthSymbol/2, -widthSymbol/2+refriDoorThk, 15,
		-lengthSymbol/2, -widthSymbol/2+refriDoorThk, -1
	gosub "textureCube"

	if refrigeratorHeigth < refriFreezeH *2 then refriFreezeH = 0

	!Doors
	if iRefrigeratorType = ACC_REFRI_TOP then
		addz toeHeigth

		prism_ 5, refrigeratorHeigth-toeHeigth-refriFreezeH-0.0025*(refrigeratorHeigth > EPS),
			-lengthSymbol/2,	-widthSymbol/2+refriDoorThk+EPS, 15,
			-lengthSymbol/2,	-widthSymbol/2, 15,
			 lengthSymbol/2,	-widthSymbol/2, 15,
			 lengthSymbol/2,	-widthSymbol/2+refriDoorThk+EPS, 15,
			-lengthSymbol/2,	-widthSymbol/2+refriDoorThk+EPS, -1
		gosub "textureCube"

		if refriFreezeH > EPS then
			addz refrigeratorHeigth-toeHeigth-refriFreezeH+0.0025
			prism_ 5, refriFreezeH-0.0025,
				-lengthSymbol/2,	-widthSymbol/2+refriDoorThk+EPS, 15,
				-lengthSymbol/2,	-widthSymbol/2, 15,
				 lengthSymbol/2,	-widthSymbol/2, 15,
				 lengthSymbol/2,	-widthSymbol/2+refriDoorThk+EPS, 15,
				-lengthSymbol/2,	-widthSymbol/2+refriDoorThk+EPS, -1
			gosub "textureCube"
			del 1
		endif

		del 1
	endif

	if iRefrigeratorType = ACC_REFRI_BOTTOM then
		addz toeHeigth

		addz refriFreezeH + 0.0025*(refrigeratorHeigth > EPS)
		prism_ 5, refrigeratorHeigth-toeHeigth-refriFreezeH-0.0025*(refrigeratorHeigth > EPS),
			-lengthSymbol/2,	-widthSymbol/2+refriDoorThk+EPS, 15,
			-lengthSymbol/2,	-widthSymbol/2, 15,
			 lengthSymbol/2,	-widthSymbol/2, 15,
			 lengthSymbol/2,	-widthSymbol/2+refriDoorThk+EPS, 15,
			-lengthSymbol/2,	-widthSymbol/2+refriDoorThk+EPS, -1
		gosub "textureCube"
		del 1

		if refriFreezeH > EPS then
			prism_ 5, refriFreezeH-0.0025,
				-lengthSymbol/2,	-widthSymbol/2+refriDoorThk+EPS, 15,
				-lengthSymbol/2,	-widthSymbol/2, 15,
				 lengthSymbol/2,	-widthSymbol/2, 15,
				 lengthSymbol/2,	-widthSymbol/2+refriDoorThk+EPS, 15,
				-lengthSymbol/2,	-widthSymbol/2+refriDoorThk+EPS, -1
			gosub "textureCube"
		endif

		del 1
	endif

	if iRefrigeratorType = ACC_REFRI_SIDE then
		addz toeHeigth
		doorW = lengthSymbol / refriDoorW

		prism_ 5, refrigeratorHeigth-toeHeigth,
			-lengthSymbol/2,				-widthSymbol/2+refriDoorThk+EPS, 15,
			-lengthSymbol/2,				-widthSymbol/2, 15,
			-lengthSymbol/2+doorW-0.0025,	-widthSymbol/2, 15,
			-lengthSymbol/2+doorW-0.0025,	-widthSymbol/2+refriDoorThk+EPS, 15,
			-lengthSymbol/2,				-widthSymbol/2+refriDoorThk+EPS, -1
		gosub "textureCube"

		prism_ 5, refrigeratorHeigth-toeHeigth,
			 lengthSymbol/2,								-widthSymbol/2+refriDoorThk+EPS, 15,
			 lengthSymbol/2,								-widthSymbol/2, 15,
			 lengthSymbol/2-(lengthSymbol-doorW-0.0025),	-widthSymbol/2, 15,
			 lengthSymbol/2-(lengthSymbol-doorW-0.0025),	-widthSymbol/2+refriDoorThk+EPS, 15,
			 lengthSymbol/2,								-widthSymbol/2+refriDoorThk+EPS, -1
		gosub "textureCube"

		del 1
	endif

	if iRefrigeratorType = ACC_REFRI_FRENCH then
		addz toeHeigth

		addz refriFreezeH + 0.0025*(refrigeratorHeigth > EPS)

		prism_ 5, refrigeratorHeigth-toeHeigth-refriFreezeH-0.0025*(refrigeratorHeigth > EPS),
			-lengthSymbol/2,	-widthSymbol/2+refriDoorThk+EPS, 15,
			-lengthSymbol/2,	-widthSymbol/2, 15,
			-0.0025,			-widthSymbol/2, 15,
			-0.0025,			-widthSymbol/2+refriDoorThk+EPS, 15,
			-lengthSymbol/2,	-widthSymbol/2+refriDoorThk+EPS, -1
		gosub "textureCube"

		prism_ 5, refrigeratorHeigth-toeHeigth-refriFreezeH-0.0025*(refrigeratorHeigth > EPS),
			 lengthSymbol/2,	-widthSymbol/2+refriDoorThk+EPS, 15,
			 lengthSymbol/2,	-widthSymbol/2, 15,
			 0.0025,			-widthSymbol/2, 15,
			 0.0025,			-widthSymbol/2+refriDoorThk+EPS, 15,
			 lengthSymbol/2,	-widthSymbol/2+refriDoorThk+EPS, -1
		gosub "textureCube"

		del 1

		if refrigeratorHeigth > EPS then
			prism_ 5, refriFreezeH-0.0025,
				-lengthSymbol/2,	-widthSymbol/2+refriDoorThk+EPS, 15,
				-lengthSymbol/2,	-widthSymbol/2, 15,
				 lengthSymbol/2,	-widthSymbol/2, 15,
				 lengthSymbol/2,	-widthSymbol/2+refriDoorThk+EPS, 15,
				-lengthSymbol/2,	-widthSymbol/2+refriDoorThk+EPS, -1
			gosub "textureCube"
		endif

		del 1
	endif

	if iRefrigeratorType = ACC_REFRI_COMPACT then
		addz toeHeigth
		prism_ 5, refrigeratorHeigth-toeHeigth,
			-lengthSymbol/2,	-widthSymbol/2+refriDoorThk+EPS, 15,
			-lengthSymbol/2,	-widthSymbol/2, 15,
			 lengthSymbol/2,	-widthSymbol/2, 15,
			 lengthSymbol/2,	-widthSymbol/2+refriDoorThk+EPS, 15,
			-lengthSymbol/2,	-widthSymbol/2+refriDoorThk+EPS, -1
		gosub "textureCube"
		del 1
	endif

	del 1

	if bRefriWallCabinet then
		if counterHeigth+wallCabinetHeigth+wallCabinetClearence-refrigeratorHeigth > EPS then
			addz refrigeratorHeigth
			material gs_cabinet_mat
			prism_ 5, counterHeigth+wallCabinetHeigth+wallCabinetClearence-refrigeratorHeigth,
				-lengthSymbol/2, -counterDepth/2, 15,
				-lengthSymbol/2,  counterDepth/2, 15,
				 lengthSymbol/2,  counterDepth/2, 15,
				 lengthSymbol/2, -counterDepth/2, 15,
				-lengthSymbol/2, -counterDepth/2, -1
			gosub "textureCube"
			del 1
		endif
	endif
return


! ------------------------------------------------------------------------------
"symbolDishwasher":
! ------------------------------------------------------------------------------

	material gs_base_mat
	prism_ 5, toeHeigth,
		-lengthSymbol/2, -widthSymbol/2+toeBack, 15,
		-lengthSymbol/2,  widthSymbol/2, 15,
		 lengthSymbol/2,  widthSymbol/2, 15,
		 lengthSymbol/2, -widthSymbol/2+toeBack, 15,
		-lengthSymbol/2, -widthSymbol/2+toeBack, -1
	gosub "textureCube"

	material dishwasher_mat
	addz toeHeigth
	prism_ 5, counterHeigth-toeHeigth-counterThickness,
		-lengthSymbol/2, -widthSymbol/2, 15,
		-lengthSymbol/2,  widthSymbol/2, 15,
		 lengthSymbol/2,  widthSymbol/2, 15,
		 lengthSymbol/2, -widthSymbol/2, 15,
		-lengthSymbol/2, -widthSymbol/2, -1

	gosub "textureCube"
	del 1
return


! ------------------------------------------------------------------------------
"symbolWasher":
! ------------------------------------------------------------------------------

	material washer_mat
	prism_ 5, toeHeigth,
		-lengthSymbol/2, -widthSymbol/2+toeBack, 15,
		-lengthSymbol/2,  widthSymbol/2, 15,
		 lengthSymbol/2,  widthSymbol/2, 15,
		 lengthSymbol/2, -widthSymbol/2+toeBack, 15,
		-lengthSymbol/2, -widthSymbol/2+toeBack, -1
	gosub "textureCube"

	material washer_mat
	addz toeHeigth
	prism_ 5, counterHeigth-toeHeigth-counterThickness,
		-lengthSymbol/2, -widthSymbol/2+washerBack, 15,
		-lengthSymbol/2,  widthSymbol/2, 15,
		 lengthSymbol/2,  widthSymbol/2, 15,
		 lengthSymbol/2, -widthSymbol/2+washerBack, 15,
		-lengthSymbol/2, -widthSymbol/2+washerBack, -1

	gosub "textureCube"
	del 1

	rotx 90
	addz counterDepth/2 - washerBack

	prism_ 5, washerBack,
		-lengthSymbol/2, counterHeigth-counterThickness-washerDist, 15,
		 lengthSymbol/2, counterHeigth-counterThickness-washerDist, 15,
		 lengthSymbol/2, counterHeigth-counterThickness-washerDist-washerPanelH, 15,
		-lengthSymbol/2, counterHeigth-counterThickness-washerDist-washerPanelH, 15,
		-lengthSymbol/2, counterHeigth-counterThickness-washerDist, -1

	gosub "textureCube"

	cutpolya 2, 1, 0,
		0, (counterHeigth-counterThickness-2*washerDist-washerPanelH - toeHeigth) / 2 + toeHeigth, 979,
		0.17, 360, 4079

	prism_ 5, washerBack,
		-lengthSymbol/2, toeHeigth, 15,
		 lengthSymbol/2, toeHeigth, 15,
		 lengthSymbol/2, counterHeigth-counterThickness-2*washerDist-washerPanelH, 15,
		-lengthSymbol/2, counterHeigth-counterThickness-2*washerDist-washerPanelH, 15,
		-lengthSymbol/2, toeHeigth, -1

	gosub "textureCube"

	cutend

	del 2
return


! ------------------------------------------------------------------------------
! Textures
! ------------------------------------------------------------------------------
"textureCube":
	roty 90

	base
	vert 0, 0, 0
	vert 1, 0, 0
	vert 0, 1, 0
	vert 0, 0, 1
	coor 2 + 256, -1, -2, -3, -4
	body -1

	del 1
return
