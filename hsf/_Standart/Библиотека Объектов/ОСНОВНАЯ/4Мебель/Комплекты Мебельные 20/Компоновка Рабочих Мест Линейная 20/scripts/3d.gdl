
if gs_detlevel_3D_m = 0 then end

unID = 1
centerunID = 30000

if iLayoutType = LAYOUT_WAVE then
	rotz axisAngle
		hotspot 0, 0, 0, unID, lengthRight, 1 + 128, totalLength:		unID = unID + 1
		hotspot -1, 0, 0, unID, lengthRight, 3, totalLength:			unID = unID + 1
		hotspot lengthRight, 0, 0, unID, lengthRight, 2, totalLength:	unID = unID + 1

		hotspot 0, 0, 0, unID, lengthLeft, 1 + 128, totalLength:		unID = unID + 1
		hotspot 1, 0, 0, unID, lengthLeft, 3, totalLength:				unID = unID + 1
		hotspot -lengthLeft, 0, 0, unID, lengthLeft, 2, totalLength:	unID = unID + 1
	del 1
else
	hotspot 0, 0, 0, unID, totalLength, 1 + 256:		unID = unID + 1
	hotspot -1, 0, 0, unID, totalLength, 3:				unID = unID + 1
	hotspot totalLength, 0, 0, unID, totalLength, 2:	unID = unID + 1
endif

if iLayoutType = LAYOUT_WAVE then
	firstLengthStep	= -partitionFrameThk / COS(diagonalAngle) * (bEndPartitions1) + (tableLength2 / 2) / SIN(diagonalAngle)\
					+ partitionFrameThk / SIN(diagonalAngle) * (bFrontPartitions or bEndPartitions1)

	if (iPartitionPos = PARPOS_ABOVE_D) or NOT(bShowPartitionParams) then
		add -lengthLeft, 0, 0
	else
		add -lengthLeft + firstLengthStep * NOT(bDeskNumLeftIsEven), 0, 0
	endif

	rotz totalAngle
	add xPosSideCorner / 2, -yPosSideCorner / 2, 0

	if (iPartitionPos = PARPOS_ABOVE_D) or NOT(bShowPartitionParams) then
		add deskDist / 2 * NOT(bDeskNumLeftIsEven), -deskDist2 / 2 * NOT(bDeskNumLeftIsEven), 0
	else
		pthkDB	= TAN(totalAngle) * partitionFrameThk
		yy		= COS(totalAngle) * (partitionFrameThk - pthkDB)
		add	INT(deskNumberLeft / 2) * (yy / SIN(totalAngle)) * NOT(bDeskNumLeftIsEven) * bFrontPartitions,
				deskNumberLeft / 2 * (yy / COS(totalAngle)) * bDeskNumLeftIsEven * bFrontPartitions, 0
	endif
endif

! ======================================================================
! Desks (with Front Panel, Desk Cabinet, Chair, Keyboard, LCD Monitor)
! ======================================================================

if iLayoutType = LAYOUT_STRAIGHT then
	if iPartitionPos = PARPOS_BETW_D then add partitionFrameThk * bEndPartitions1, (partitionFrameThk / 2 + partitionFrameThk / 2 * NOT(bDoubleRow)) * bFrontPartitions, 0

	for iDe = 1 to deskNumberInRow
		for iRow = 1 to 1 + bDoubleRow

			bMirroredComputer	= (iRow = 2) * (iArrangement = ARRANGE_MIRR)
			gosub "desk"

			mul 1 - 2 * (iArrangement = ARRANGE_ROT), -1, 1
			add (partitionFrameThk * (iPartitionPos = PARPOS_BETW_D) * bDoubleRow * bSidePartitions - deskDist) * (iArrangement = ARRANGE_ROT), partitionFrameThk * (iPartitionPos = PARPOS_BETW_D) * bDoubleRow * bFrontPartitions, 0
		next iRow
		del (1 + bDoubleRow) * 2

		add deskDist, 0, 0
	next iDe
	del deskNumberInRow

	if iPartitionPos = PARPOS_BETW_D then del 1
endif

if iLayoutType = LAYOUT_CUBICLE then
	if iPartitionPos = PARPOS_BETW_D then add partitionFrameThk * bEndPartitions1, (partitionFrameThk / 2 + partitionFrameThk / 2 * NOT(bDoubleRow)) * bFrontPartitions, 0

	for iDe = 1 to deskNumberInRow
		for iRow = 1 to 1 + bDoubleRow

			bMirroredComputer	= (iRow = 2) * (iArrangement = ARRANGE_MIRR)
			gosub "desk"

			mul	1 - 2 * (iArrangement = ARRANGE_ROT), -1, 1
			add	(partitionFrameThk * (iPartitionPos = PARPOS_BETW_D) * bDoubleRow * bSidePartitions - deskDist) * (iArrangement = ARRANGE_ROT),
				partitionFrameThk * (iPartitionPos = PARPOS_BETW_D) * bDoubleRow * bFrontPartitions, 0
		next iRow
		del (1 + bDoubleRow) * 2

		add deskDist, 0, 0
	next iDe
	del deskNumberInRow

	if iPartitionPos = PARPOS_BETW_D then del 1
endif

if iLayoutType = LAYOUT_WAVE then
	add partitionFrameThk * bEndPartitions1 * (iPartitionPos = PARPOS_BETW_D), 0, 0

	for iDe = 1 to deskNumber
		iRow = iDe

		if NOT(bDeskNumLeftIsEven) then
			rotz 180
			add	-deskDist * ((iDe / 2) = INT(iDe / 2)) + partitionFrameThk * (iPartitionPos = PARPOS_BETW_D) * bFrontPartitions,
					-deskDist2 * ((iDe / 2) <> INT(iDe / 2)) + partitionFrameThk * (iPartitionPos = PARPOS_BETW_D) * bFrontPartitions, 0
		endif

		bMirroredComputer	= 0
		gosub "desk"

		if NOT(bDeskNumLeftIsEven) then del 2

		rotz 180
		add	-deskDist * ((iDe / 2) <> INT(iDe / 2)) + partitionFrameThk * (iPartitionPos = PARPOS_BETW_D) * bFrontPartitions,
				-deskDist2 * ((iDe / 2) = INT(iDe / 2)) + partitionFrameThk * (iPartitionPos = PARPOS_BETW_D) * bFrontPartitions, 0
	next iDe
	del deskNumber * 2

	del 1
endif



! ======================================================================
! Extensions (Rounded, Desk, Desk with Chair, Cabinet, Partition)
! ======================================================================

if iLayoutType = LAYOUT_STRAIGHT then
	for iExt = 1 to 2
		add extDistFromCenter[iExt * 2], 0, 0
		rotz 90
		mul 1, 1 - 2 * (iExt = 1), 1

		iExtType		= iExtensionType[iExt * 2]
		extRoundedRad	= layoutEndWidth[iExt * 2]
		bPartColumnCut	= 0
		gosub "extension"
		del 3
	next iExt
endif

if iLayoutType = LAYOUT_WAVE then
	if bDeskNumLeftIsEven then
		extNumInTopRow		= CEIL(deskNumber / 2) - 1
		extNumInBottomRow	= INT(deskNumber / 2) - 1
	else
		extNumInTopRow		= INT(deskNumber / 2) - 1
		extNumInBottomRow	= CEIL(deskNumber / 2) - 1
	endif

	if deskNumber > 1 then
		for iExtTop = 1 to extNumInTopRow

			if iPartitionPos = PARPOS_BETW_D then
				add	deskDist - partitionFrameThk * NOT(bEndPartitions1) + partitionFrameThk * NOT(bFrontPartitions),
						partitionFrameThk * bFrontPartitions * (iExtensionType[1] = EXT_CABINET) - partitionFrameThk * bFrontPartitions, 0
			else
				add	deskDist, 0, 0
			endif

			iExtType		= iExtensionType[1]
			extRoundedRad	= layoutEndWidth[1]
			bPartColumnCut	= bFrontPartitions * (iPartitionPos = PARPOS_BETW_D)
			gosub "extension"
			del 1

		add deskDist, -deskDist2, 0
		next iExtTop
		del extNumInTopRow

		for iExtBottom = 1 to extNumInBottomRow

			if iPartitionPos = PARPOS_BETW_D then
				add deskDist * bDeskNumLeftIsEven + partitionFrameThk * bEndPartitions1, -partitionFrameThk * bFrontPartitions * (iExtensionType[1] = EXT_CABINET) - deskDist2 * bDeskNumLeftIsEven, 0
			else
				add deskDist * bDeskNumLeftIsEven, -deskDist2 * bDeskNumLeftIsEven, 0
			endif
			rotz 180

			iExtType		= iExtensionType[3]
			extRoundedRad	= layoutEndWidth[3]
			bPartColumnCut	= bFrontPartitions * (iPartitionPos = PARPOS_BETW_D)
			gosub "extension"

			del 2

		add deskDist, -deskDist2, 0
		next iExtBottom
		del extNumInBottomRow
	endif
endif



! ======================================================================
! Desk Partitions
! ======================================================================

if iLayoutType = LAYOUT_STRAIGHT then
	!!!Left End Partition and Partition Column
	if bEndPartitions1 then
		add partitionFrameThk / 2, 0, 0

		!!!Left End Column if NOT(bDoubleRow)
		if NOT(bDoubleRow) * bFrontPartitions then
			add 0, partitionFrameThk / 2, 0
				bPartColumnCover	= 0
				bShowPartEdgeTop	= 0
				bShowPartEdgeLeft	= 1
				bShowPartEdgeBottom	= 1
				bShowPartEdgeRight	= 0
				bOnlyPartitionCover	= bPartColumnCover * NOT(bFrontPartitions) * NOT(bSidePartitions)
				gosub "partitionColumn"
			del 1
		endif

		if NOT(bDoubleRow) then
			add 0, partLength[4] / 2 + partitionFrameThk * bFrontPartitions, 0
		else
			rotz 90
		endif

		bShowPartEdgeLeft	= NOT(bDoubleRow) * NOT(bFrontPartitions)
		bShowPartEdgeRight	= 1
		bCalledAsExtension	= bDoubleRow
		anglePartititon		= 90 * NOT(bDoubleRow)
		gosub "leftEndPartition"

		del 1

		del 1
	endif

	!!!Right End Partition and Partition Column
	if bEndPartitions2 then
		add totalLength - partitionFrameThk / 2, 0, 0

		!!!Right End Column if NOT(bDoubleRow)
		if NOT(bDoubleRow) * bFrontPartitions then
			add 0, partitionFrameThk / 2, 0
				bPartColumnCover	= 0
				bShowPartEdgeTop	= 0
				bShowPartEdgeLeft	= 0
				bShowPartEdgeBottom	= 1
				bShowPartEdgeRight	= 1
				bOnlyPartitionCover	= bPartColumnCover * NOT(bFrontPartitions) * NOT(bSidePartitions)
				gosub "partitionColumn"
			del 1
		endif

		if NOT(bDoubleRow) then
			add 0, partLength[3] / 2 + partitionFrameThk * bFrontPartitions, 0
		else
			rotz -90
		endif

		bShowPartEdgeLeft	= NOT(bDoubleRow) * NOT(bFrontPartitions)
		bShowPartEdgeRight	= 1
		bCalledAsExtension	= bDoubleRow
		anglePartititon		= 90 * NOT(bDoubleRow)
		gosub "rightEndPartition"

		del 1

		del 1
	endif

	!!!Front Partitions
	if bFrontPartitions then
		add 0, partitionFrameThk / 2 * NOT(bDoubleRow), 0
		for iPa = 1 to deskNumberInRow
			if iPa = 1 then
				if iPartitionPos = PARPOS_BETW_D then
					frontPartLength = partLength[1] - partitionFrameThk / 2 * NOT(bSidePartitions) + partitionFrameThk / 2 * (deskNumberInRow = 1)
				else
					frontPartLength = partLength[1] - partitionFrameThk / 2 * (deskNumberInRow > 1)	- partitionFrameThk * bEndPartitions1 - partitionFrameThk * bEndPartitions2 * (deskNumberInRow = 1)
				endif
				add frontPartLength / 2 + partitionFrameThk * bEndPartitions1, 0, 0
			endif

			if iPa > 1 and iPa < deskNumberInRow then
				if iPartitionPos = PARPOS_BETW_D then
					frontPartLength = partLength[1] - partitionFrameThk * NOT(bSidePartitions)
					add deskDist * (iPa - 1) + frontPartLength / 2 + partitionFrameThk * bEndPartitions1 + partitionFrameThk / 2 * NOT(bSidePartitions), 0, 0
				else
					frontPartLength = partLength[1] - partitionFrameThk
					add deskDist * (iPa - 1) + frontPartLength / 2 + partitionFrameThk / 2, 0, 0
				endif
			endif
			if iPa = deskNumberInRow and iPa > 1 then
				if iPartitionPos = PARPOS_BETW_D then
					frontPartLength = partLength[1] - partitionFrameThk / 2 * NOT(bSidePartitions)
					add deskDist * (iPa - 1) + frontPartLength / 2 + partitionFrameThk * bEndPartitions1 + partitionFrameThk / 2 * NOT(bSidePartitions), 0, 0
				else
					frontPartLength = partLength[1] - partitionFrameThk / 2 - partitionFrameThk * bEndPartitions2
					add deskDist * (iPa - 1) + frontPartLength / 2 + partitionFrameThk / 2, 0, 0
				endif
			endif

			bShowPartEdgeRight	= NOT(bEndPartitions2) * (iPa = deskNumberInRow)
			bShowPartEdgeLeft	= NOT(bEndPartitions1) * (iPa = 1)
			gosub "frontPartition"
			del 1
		next iPa
		del 1
	endif

	!!!Side Partitions
	if bSidePartitions then
		add deskDist, 0, 0
		if iPartitionPos = PARPOS_BETW_D then
			if bEndPartitions1 then
				add partitionFrameThk / 2, 0, 0
			else
				add -partitionFrameThk / 2, 0, 0
			endif
		endif

		for iPa = 1 to deskNumberInRow - 1
			if NOT(bDoubleRow) then
				add 0, partLength[2] / 2 + partitionFrameThk * bFrontPartitions, 0
			else
				add 0, extPartLengthStart[2] / 2 + partitionFrameThk / 2, 0
			endif

			for iPa2 = 1 to 1 + bDoubleRow
				add 0, -(extPartLengthStart[2] + partitionFrameThk) * (iPa2 = 2), 0
				mul 1, 1 - 2 * (iPa2 = 2), 1

				bShowPartEdgeLeft	= NOT(bDoubleRow) * NOT(bFrontPartitions)
				bShowPartEdgeRight	= 1
				bOnlyPartitionCover	= NOT(bSidePartitions)
				sidePartLength		= partLength[2] * NOT(bDoubleRow) + extPartLengthStart[2] * bDoubleRow
				gosub "sidePartition"
				del 2
			next iPa2
			del 1
		add deskDist, 0, 0
		next iPa
		del deskNumberInRow - 1

		del 1 + (iPartitionPos = PARPOS_BETW_D)
	endif

	!!!Internal Partition Column
	if bSidePartitions * bDoubleRow or bFrontPartitions then
		add deskDist, 0, 0
		if iPartitionPos = PARPOS_BETW_D then add partitionFrameThk * bEndPartitions1 - partitionFrameThk / 2 * bSidePartitions, 0, 0

		for iPa = 1 to deskNumberInRow - 1
			add deskDist * (iPa - 1), partitionFrameThk / 2 * NOT(bDoubleRow), 0
				bPartColumnCover	= 1
				bShowPartEdgeTop	= NOT(bSidePartitions)
				bShowPartEdgeLeft	= NOT(bFrontPartitions)
				bShowPartEdgeBottom	= NOT(bSidePartitions) or NOT(bDoubleRow)
				bShowPartEdgeRight	= NOT(bFrontPartitions)
				bOnlyPartitionCover	= bPartColumnCover * NOT(bFrontPartitions) * NOT(bSidePartitions)
				gosub "partitionColumn"
			del 1
		next iPa

		del 1 + (iPartitionPos = PARPOS_BETW_D)
	endif
endif

if iLayoutType = LAYOUT_CUBICLE then
	!!!Left End Partition and Partition Column
	if bEndPartitions1 then
		add partitionFrameThk / 2, 0, 0

		!!!Left End Column if NOT(bDoubleRow)
		if NOT(bDoubleRow) * bFrontPartitions then
			add 0, partitionFrameThk / 2, 0
				bPartColumnCover	= 0
				bShowPartEdgeTop	= 0
				bShowPartEdgeLeft	= 1
				bShowPartEdgeBottom	= 1
				bShowPartEdgeRight	= 0
				gosub "partitionColumn"
			del 1
		endif

		if NOT(bDoubleRow) then
			add 0, partLength[4] / 2 + partitionFrameThk * bFrontPartitions, 0
		else
			rotz 90
		endif

		bShowPartEdgeLeft	= NOT(bDoubleRow) * NOT(bFrontPartitions)
		bShowPartEdgeRight	= 1
		bCalledAsExtension	= bDoubleRow
		anglePartititon		= 90 * NOT(bDoubleRow)
		gosub "leftEndPartition"

		del 1

		del 1
	endif

	!!!Right End Partition and Partition Column
	if bEndPartitions2 then
		add totalLength - partitionFrameThk / 2, 0, 0

		!!!Right End Column if NOT(bDoubleRow)
		if NOT(bDoubleRow) * bFrontPartitions then
			add 0, partitionFrameThk / 2, 0
				bPartColumnCover	= 0
				bShowPartEdgeTop	= 0
				bShowPartEdgeLeft	= 0
				bShowPartEdgeBottom	= 1
				bShowPartEdgeRight	= 1
				gosub "partitionColumn"
			del 1
		endif

		if NOT(bDoubleRow) then
			add 0, partLength[3] / 2 + partitionFrameThk * bFrontPartitions, 0
		else
			rotz -90
		endif

		bShowPartEdgeLeft	= NOT(bDoubleRow) * NOT(bFrontPartitions)
		bShowPartEdgeRight	= 1
		bCalledAsExtension	= bDoubleRow
		anglePartititon		= 90 * NOT(bDoubleRow)
		gosub "rightEndPartition"

		del 1

		del 1
	endif

	!!!Front Partitions
	if bFrontPartitions then
		add 0, partitionFrameThk / 2 * NOT(bDoubleRow), 0
		for iPa = 1 to deskNumberInRow
			if iPa = 1 then
				if iPartitionPos = PARPOS_BETW_D then
					frontPartLength = partLength[1] - partitionFrameThk / 2 * NOT(bSidePartitions) + partitionFrameThk / 2 * (deskNumberInRow = 1)
				else
					frontPartLength = partLength[1]\
									- partitionFrameThk / 2 * (deskNumberInRow > 1) * NOT(bSidePartitions)\
									- partitionFrameThk * (bEndPartitions1 + bEndPartitions2 * (deskNumberInRow = 1))\
									- partitionFrameThk / 2 * bSidePartitions * (iArrangement = ARRANGE_ROT) * (bDoubleRow + (deskNumberInRow > 1))
				endif
				add frontPartLength / 2 + partitionFrameThk * bEndPartitions1, 0, 0
			endif
			if iPa > 1 and iPa < deskNumberInRow then
				if iPartitionPos = PARPOS_BETW_D then
					frontPartLength = partLength[1] - partitionFrameThk * NOT(bSidePartitions)
					add deskDist * (iPa - 1) + frontPartLength / 2 + partitionFrameThk * bEndPartitions1 + partitionFrameThk / 2 * NOT(bSidePartitions), 0, 0
				else
					frontPartLength = partLength[1] - partitionFrameThk - partitionFrameThk * bSidePartitions * bDoubleRow * (iArrangement = ARRANGE_ROT)
					add deskDist * (iPa - 1) + frontPartLength / 2 + partitionFrameThk / 2 + partitionFrameThk / 2 * bSidePartitions, 0, 0
				endif
			endif
			if iPa = deskNumberInRow and iPa > 1 then
				if iPartitionPos = PARPOS_BETW_D then
					frontPartLength = partLength[1] - partitionFrameThk / 2 * NOT(bSidePartitions)
					add deskDist * (iPa - 1) + frontPartLength / 2 + partitionFrameThk * bEndPartitions1 + partitionFrameThk / 2 * NOT(bSidePartitions), 0, 0
				else
					frontPartLength = partLength[1] - partitionFrameThk / 2 - partitionFrameThk * bEndPartitions2 - partitionFrameThk / 2 * bSidePartitions
					add deskDist * (iPa - 1) + frontPartLength / 2 + partitionFrameThk / 2 + partitionFrameThk / 2 * bSidePartitions, 0, 0
				endif
			endif

			bShowPartEdgeRight	= NOT(bEndPartitions2) * (iPa = deskNumberInRow)
			bShowPartEdgeLeft	= NOT(bEndPartitions1) * (iPa = 1)
			gosub "frontPartition"
			del 1
		next iPa
		del 1
	endif

	!!!Side Partitions
	if bSidePartitions then
		add deskDist, 0, 0
		if iPartitionPos = PARPOS_BETW_D then
			if bEndPartitions1 then
				add partitionFrameThk / 2, 0, 0
			else
				add -partitionFrameThk / 2, 0, 0
			endif
		endif

		for iPa = 1 to deskNumberInRow - 1
			if NOT(bDoubleRow) then
				add 0, partLength[2] / 2 + partitionFrameThk * bFrontPartitions, 0
			else
				add 0, extPartLengthStart[2] / 2 + partitionFrameThk / 2, 0
			endif

			for iPa2 = 1 to 1 + bDoubleRow
				if iPartitionPos = PARPOS_ABOVE_D then
					add	partitionFrameThk / 2 * ((iPa2 = 1) + (iPa2 = 2) * (iArrangement = ARRANGE_MIRR))\
						- partitionFrameThk / 2 * ((iPa2 = 2) * (iArrangement = ARRANGE_ROT)), 0, 0
				endif
				add 0, -(extPartLengthStart[2] + partitionFrameThk) * (iPa2 = 2), 0
				mul 1, 1 - 2 * (iPa2 = 2), 1

				bShowPartEdgeLeft	= NOT(bDoubleRow) * NOT(bFrontPartitions)
				bShowPartEdgeRight	= 1
				bOnlyPartitionCover	= NOT(bSidePartitions)
				sidePartLength		= partLength[2] * NOT(bDoubleRow) + extPartLengthStart[2] * bDoubleRow
				gosub "sidePartition"
				del 2
				if iPartitionPos = PARPOS_ABOVE_D then del 1
			next iPa2
			del 1
		add deskDist, 0, 0
		next iPa
		del deskNumberInRow - 1

		del 1 + (iPartitionPos = PARPOS_BETW_D)
	endif

	!!!Internal Partition Column
	if bSidePartitions * bDoubleRow or bFrontPartitions then
		add deskDist, 0, 0
		if iPartitionPos = PARPOS_BETW_D then add partitionFrameThk * bEndPartitions1 - partitionFrameThk / 2 * bSidePartitions, 0, 0

		for iPa2 = 1 to 1 + (iPartitionPos = PARPOS_ABOVE_D) * bSidePartitions * (iArrangement = ARRANGE_ROT)
			if iPartitionPos = PARPOS_ABOVE_D and bSidePartitions then
				add	partitionFrameThk / 2 * (iPa2 = 1) - partitionFrameThk / 2 * (iPa2 = 2), 0, 0
			endif

			for iPa = 1 to deskNumberInRow - 1
				add deskDist * (iPa - 1), partitionFrameThk / 2 * NOT(bDoubleRow), 0
					bPartColumnCover	= 1
					if iPartitionPos = PARPOS_BETW_D or iArrangement = ARRANGE_MIRR then
						bShowPartEdgeTop	= NOT(bSidePartitions)
						bShowPartEdgeLeft	= NOT(bFrontPartitions)
						bShowPartEdgeBottom	= NOT(bSidePartitions) or NOT(bDoubleRow)
						bShowPartEdgeRight	= NOT(bFrontPartitions)
					else
						bShowPartEdgeTop	= NOT(bSidePartitions) or (bSidePartitions and iPa2 = 2)
						bShowPartEdgeLeft	= (NOT(bFrontPartitions) and iPa2 = 2)
						bShowPartEdgeBottom	= NOT(bSidePartitions) or (bSidePartitions and iPa2 = 1)
						bShowPartEdgeRight	= (NOT(bFrontPartitions) and iPa2 = 1)
					endif
					gosub "partitionColumn"
				del 1
			next iPa

			if iPartitionPos = PARPOS_ABOVE_D and bSidePartitions then del 1
		next iPa2

		if iPartitionPos = PARPOS_BETW_D then del 1
		del 1
	endif
endif

if iLayoutType = LAYOUT_WAVE then
	!!!Left End Partition and Partition Column
	if bEndPartitions1 then
		!!!Left End Column if deskNumber = 1
		if (deskNumber = 1) * bFrontPartitions then
			add partitionFrameThk / 2 - deskDist * NOT(bDeskNumLeftIsEven), (deskDist2 - partitionFrameThk) * NOT(bDeskNumLeftIsEven)\
			+ partitionFrameThk / 2 * (iPartitionPos = PARPOS_ABOVE_D)\
			+ (partitionFrameThk / 2 * NOT(bDeskNumLeftIsEven) - partitionFrameThk / 2 * bDeskNumLeftIsEven) * (iPartitionPos = PARPOS_BETW_D), 0

				if bDeskNumLeftIsEven then
					bShowPartEdgeTop	= 0
					bShowPartEdgeLeft	= 1
					bShowPartEdgeBottom	= 1
					bShowPartEdgeRight	= 0
				else
					bShowPartEdgeTop	= 1
					bShowPartEdgeLeft	= 1
					bShowPartEdgeBottom	= 0
					bShowPartEdgeRight	= 0
				endif
				bPartColumnCover	= 0
				bOnlyPartitionCover	= bPartColumnCover * NOT(bFrontPartitions)
				gosub "partitionColumn"
			del 1
		endif

		if bDeskNumLeftIsEven then
			if iPartitionPos = PARPOS_BETW_D then
				add partitionFrameThk / 2,
				(partLength[4] / 2 + partitionFrameThk / 2 * bFrontPartitions) * (deskNumber = 1) - partitionFrameThk / 2 + partitionFrameThk / 2 * NOT(bFrontPartitions), 0
			else
				add partitionFrameThk / 2,
				(partLength[4] / 2 + partitionFrameThk * bFrontPartitions) * (deskNumber = 1), 0
			endif
		else
			if iPartitionPos = PARPOS_BETW_D then
				add partitionFrameThk / 2 - deskDist * (deskNumber = 1) + partitionFrameThk / 2 * NOT(bFrontPartitions) * (deskNumber > 1),
				deskDist2 - partitionFrameThk / 2 + (partitionFrameThk / 2 - partLength[4] / 2 - partitionFrameThk * bFrontPartitions) * (deskNumber = 1)\
				+ partitionFrameThk * NOT(bFrontPartitions) * (deskNumber > 1), 0
			else
				add (partitionFrameThk / 2 - deskDist) * (deskNumber = 1),
				deskDist2 - partitionFrameThk / 2 + (partitionFrameThk / 2 - partLength[4] / 2 - partitionFrameThk * bFrontPartitions) * (deskNumber = 1), 0
			endif
		endif

		bShowPartEdgeLeft	= NOT(bFrontPartitions)
		bShowPartEdgeRight	= 1
		bCalledAsExtension	= (deskNumber > 1)
		anglePartititon		= 90 * bDeskNumLeftIsEven - 90 * NOT(bDeskNumLeftIsEven) * (deskNumber = 1)

		gosub "leftEndPartition"

		del 1
	endif

	!!!Right End Partition and Partition Column
	if bEndPartitions2 then
		if bDeskNumLeftIsEven then
			rightEndPartPosX = deskDist * (INT(deskNumber / 2) + (deskNumber = 1))
			rightEndPartPosY = -deskDist2 * (CEIL(deskNumber / 2) - 1) + tableDepth1 / 2 * (deskNumber = 1)
			if iPartitionPos = PARPOS_BETW_D then
				rightEndPartPosmodX = partitionFrameThk / 2 - partitionFrameThk * NOT(bEndPartitions1) + partitionFrameThk * NOT(bFrontPartitions)\
									- partitionFrameThk / 2 * NOT(bFrontPartitions) * (NOT(bDeskNumberIsEven) * (deskNumber > 3) + (deskNumber = 3))
				rightEndPartPosmodY = -partitionFrameThk / 2 + partitionFrameThk / 2 * ((deskNumber = 1) * bFrontPartitions + (deskNumber < 3) * NOT(bFrontPartitions))\
									+ partitionFrameThk / 2 * NOT(bFrontPartitions) * bDeskNumberIsEven * (deskNumber > 3)
			else
				rightEndPartPosmodX = -partitionFrameThk / 2 * bDeskNumberIsEven - partitionFrameThk / 2 * (deskNumber = 1)
				rightEndPartPosmodY = partitionFrameThk / 2 * NOT(bDeskNumberIsEven) * ((deskNumber > 1) + (deskNumber = 1) * bFrontPartitions)
			endif
		else
			rightEndPartPosX = deskDist * (CEIL(deskNumber / 2) - 1)
			rightEndPartPosY = -deskDist2 * (INT(deskNumber / 2) - 1) * (deskNumber > 1) + partLength[3] / 2 * (deskNumber = 1)
			if iPartitionPos = PARPOS_BETW_D then
				rightEndPartPosmodX = partitionFrameThk / 2 - partitionFrameThk * NOT(bEndPartitions1)\
									+ partitionFrameThk * NOT(bFrontPartitions) * NOT(bDeskNumberIsEven)\
									+ partitionFrameThk / 2 * NOT(bFrontPartitions) * bDeskNumberIsEven

				rightEndPartPosmodY = -partitionFrameThk / 2 + partitionFrameThk / 2 * (deskNumber = 1) * bFrontPartitions\
									+ partitionFrameThk / 2 * NOT(bFrontPartitions) * NOT(bDeskNumberIsEven)
			else
				rightEndPartPosmodX = -partitionFrameThk / 2 * NOT(bDeskNumberIsEven)
				rightEndPartPosmodY = partitionFrameThk / 2 * bDeskNumberIsEven
			endif
		endif

		add rightEndPartPosX + rightEndPartPosmodX, rightEndPartPosY + rightEndPartPosmodY, 0

		!!!Right End Column if deskNumber = 1
		if (deskNumber = 1) * bFrontPartitions then
			add 0, partLength[3] / 2 * NOT(bDeskNumLeftIsEven) - (partitionFrameThk + partLength[3] / 2) * bDeskNumLeftIsEven + partitionFrameThk / 2, 0
				if bDeskNumLeftIsEven then
					bShowPartEdgeTop	= 0
					bShowPartEdgeLeft	= 0
					bShowPartEdgeBottom	= 1
					bShowPartEdgeRight	= 1
				else
					bShowPartEdgeTop	= 1
					bShowPartEdgeLeft	= 0
					bShowPartEdgeBottom	= 0
					bShowPartEdgeRight	= 1
				endif
				bPartColumnCover	= 0
				bOnlyPartitionCover	= bPartColumnCover * NOT(bFrontPartitions)
				gosub "partitionColumn"
			del 1
		endif

		if bDeskNumLeftIsEven then
			if (deskNumber > 1) then
				rotz -90 * bDeskNumberIsEven
				mul 1, 1 - 2 * NOT(bDeskNumberIsEven), 1
			endif
		else
			if (deskNumber > 1) then
				rotz 90 * NOT(bDeskNumberIsEven) + 180 * bDeskNumberIsEven
				mul 1, 1 - 2 * NOT(bDeskNumberIsEven), 1
			endif
		endif

		bShowPartEdgeLeft	= NOT(bFrontPartitions)
		bShowPartEdgeRight	= 1
		bCalledAsExtension	= (deskNumber > 1)
		anglePartititon		= (90 * bDeskNumLeftIsEven - 90 * NOT(bDeskNumLeftIsEven)) * (deskNumber = 1)

		gosub "rightEndPartition"

		del 2 * (deskNumber > 1)

		del 1
	endif

	!!!Front Partitions
	if bFrontPartitions then
		if bDeskNumLeftIsEven then
			frontPartNum	= INT(deskNumber / 2) + (deskNumber = 1)
		else
			frontPartNum	= CEIL(deskNumber / 2) - 1 + (deskNumber = 1)
		endif

		add 0, -partitionFrameThk / 2 * (iPartitionPos = PARPOS_BETW_D), 0

		for iPa = 1 to frontPartNum
			if iPa = 1 then
				if bDeskNumLeftIsEven then
					if iPartitionPos = PARPOS_BETW_D then
						frontPartLength = partLength[1]
						add frontPartLength / 2 + partitionFrameThk * bEndPartitions1, 0, 0
					else
						frontPartLength = partLength[1] + partitionFrameThk * NOT(bEndPartitions1) - partitionFrameThk / 2 * (deskNumber > 2) - partitionFrameThk * bEndPartitions2 * (deskNumber < 3)
						add frontPartLength / 2 + partitionFrameThk - partitionFrameThk * NOT(bEndPartitions1), partitionFrameThk / 2 * (deskNumber = 1), 0
					endif
				else
					if iPartitionPos = PARPOS_BETW_D then
						frontPartLength = partLength[1]
						add frontPartLength / 2 + partitionFrameThk * bEndPartitions1 * (deskNumber > 1) - (frontPartLength + partitionFrameThk * NOT(bEndPartitions1)) * (deskNumber = 1),
						deskDist2 * (deskNumber = 1), 0
					else
						frontPartLength = partLength[1] + (partitionFrameThk - partitionFrameThk * bEndPartitions1 - partitionFrameThk * bEndPartitions2) * (deskNumber = 1)\
										+ (partitionFrameThk / 2 * NOT(bEndPartitions2) - partitionFrameThk / 2 * bEndPartitions2) * (deskNumber = 3)
						add frontPartLength / 2 + partitionFrameThk / 2 - (frontPartLength + partitionFrameThk / 2 + partitionFrameThk * bEndPartitions2) * (deskNumber = 1),
						(deskDist2 - partitionFrameThk / 2) * (deskNumber = 1), 0
					endif
				endif
			endif
			if iPa > 1 and iPa < frontPartNum then
				if iPartitionPos = PARPOS_BETW_D then
					frontPartLength = partLength[1]
					add frontPartLength / 2 + partitionFrameThk * bEndPartitions1, 0, 0
				else
					frontPartLength = partLength[1]
					add frontPartLength / 2 + partitionFrameThk / 2, 0, 0
				endif
			endif
			if iPa > 1 and iPa = frontPartNum then
				if bDeskNumLeftIsEven then
					if iPartitionPos = PARPOS_BETW_D then
						frontPartLength = partLength[1]
						add frontPartLength / 2 + partitionFrameThk * bEndPartitions1, 0, 0
					else
						frontPartLength = partLength[1] + (partitionFrameThk * NOT(bEndPartitions2) - partitionFrameThk / 2) * bDeskNumberIsEven
						add frontPartLength / 2 + partitionFrameThk / 2, 0, 0
					endif
				else
					if iPartitionPos = PARPOS_BETW_D then
						frontPartLength = partLength[1]
						add frontPartLength / 2 + partitionFrameThk * bEndPartitions1, 0, 0
					else
						frontPartLength = partLength[1] + (partitionFrameThk * NOT(bEndPartitions2) - partitionFrameThk / 2) * NOT(bDeskNumberIsEven)
						add frontPartLength / 2 + partitionFrameThk / 2, 0, 0
					endif
				endif
			endif

			if bDeskNumLeftIsEven then
				bShowPartEdgeRight	= NOT(bEndPartitions2) * (iPa = frontPartNum) * (bDeskNumberIsEven or (deskNumber = 1))
				bShowPartEdgeLeft	= NOT(bEndPartitions1) * (iPa = 1)
			else
				bShowPartEdgeRight	= NOT(bEndPartitions2) * (iPa = frontPartNum) * NOT(bDeskNumberIsEven)
				bShowPartEdgeLeft	= NOT(bEndPartitions1) * (deskNumber = 1)
			endif

			gosub "frontPartition"

			del 1

			add deskDist, -deskDist2, 0

		next iPa
		del frontPartNum

		del 1
	endif

	!!!Side Partitions
	if bFrontPartitions then
		if bDeskNumLeftIsEven then
			sidePartNum	= CEIL(deskNumber / 2) - 1
		else
			sidePartNum	= INT(deskNumber / 2)
		endif

		add deskDist * bDeskNumLeftIsEven, deskDist2 * NOT(bDeskNumLeftIsEven), 0
		if iPartitionPos = PARPOS_BETW_D then
			if bEndPartitions1 then
				add partitionFrameThk / 2, 0, 0
			else
				add -partitionFrameThk / 2, 0, 0
			endif
		endif

		for iPa = 1 to sidePartNum
			if bDeskNumLeftIsEven then
				if iPartitionPos = PARPOS_BETW_D then
					sidePartLength	= partLength[2]
					add	0, -sidePartLength / 2 - partitionFrameThk, 0
				else
					sidePartLength	= partLength[2] + (partitionFrameThk * NOT(bEndPartitions2) - partitionFrameThk / 2) * NOT(bDeskNumberIsEven) * (iPa = sidePartNum)
					add	0, -sidePartLength / 2 - partitionFrameThk / 2, 0
				endif
			else
				if iPartitionPos = PARPOS_BETW_D then
					sidePartLength	= partLength[2]
					add	0, -sidePartLength / 2 - partitionFrameThk, 0
				else
					if iPa = 1 then
						sidePartLength	= partLength[2] - partitionFrameThk / 2 + partitionFrameThk * NOT(bEndPartitions1)\
										+ (partitionFrameThk / 2 * NOT(bEndPartitions2) - partitionFrameThk / 2 * bEndPartitions2) * (deskNumber < 3)
						add	0, -sidePartLength / 2 - partitionFrameThk * (bEndPartitions1), 0
					endif
					if iPa > 1 and iPa < sidePartNum then
						sidePartLength	= partLength[2]
						add	0, -sidePartLength / 2 - partitionFrameThk / 2, 0
					endif
					if iPa > 1 and iPa = sidePartNum then
						sidePartLength	= partLength[2] + (partitionFrameThk * NOT(bEndPartitions2) - partitionFrameThk / 2) * bDeskNumberIsEven
						add	0, -sidePartLength / 2 - partitionFrameThk / 2, 0
					endif
				endif
			endif

			if bDeskNumLeftIsEven then
				bShowPartEdgeLeft	= NOT(bEndPartitions2) * (iPa = sidePartNum) * NOT(bDeskNumberIsEven)
				bShowPartEdgeRight	= 0
			else
				bShowPartEdgeLeft	= NOT(bEndPartitions2) * (iPa = sidePartNum) * bDeskNumberIsEven
				bShowPartEdgeRight	= NOT(bEndPartitions1) * (iPa = 1)
			endif
			bOnlyPartitionCover	= NOT(bFrontPartitions)

			gosub "sidePartition"

			del 1
		add deskDist, -deskDist2, 0
		next iPa
		del sidePartNum

		del 1 + (iPartitionPos = PARPOS_BETW_D)
	endif

	!!!Internal Partition Columns
	if bFrontPartitions then
		if bDeskNumLeftIsEven then
			colNumInTopRow		= CEIL(deskNumber / 2) - 1
			colNumInBottomRow	= INT(deskNumber / 2) - 1
		else
			colNumInTopRow		= INT(deskNumber / 2) - 1
			colNumInBottomRow	= CEIL(deskNumber / 2) - 1
		endif

		if deskNumber > 1 then
			for iPaTop = 1 to colNumInTopRow

				if iPartitionPos = PARPOS_BETW_D then
					add	deskDist + partitionFrameThk / 2 * (bEndPartitions1) - partitionFrameThk / 2 * NOT(bEndPartitions1), -partitionFrameThk / 2, 0
				else
					add	deskDist, 0, 0
				endif

				bPartColumnCover	= 1
				bShowPartEdgeTop	= 1
				bShowPartEdgeLeft	= 0
				bShowPartEdgeBottom	= 0
				bShowPartEdgeRight	= 1
				bOnlyPartitionCover	= bPartColumnCover * NOT(bFrontPartitions)

				gosub "partitionColumn"

				del 1

			add deskDist, -deskDist2, 0
			next iPaTop
			del colNumInTopRow

			for iPaBottom = 1 to colNumInBottomRow

				if iPartitionPos = PARPOS_BETW_D then
					add deskDist * bDeskNumLeftIsEven + partitionFrameThk / 2 * (bEndPartitions1) - partitionFrameThk / 2 * NOT(bEndPartitions1),
					-deskDist2 * bDeskNumLeftIsEven - partitionFrameThk / 2, 0
				else
					add deskDist * bDeskNumLeftIsEven, -deskDist2 * bDeskNumLeftIsEven, 0
				endif

				bPartColumnCover	= 1
				bShowPartEdgeTop	= 0
				bShowPartEdgeLeft	= 1
				bShowPartEdgeBottom	= 1
				bShowPartEdgeRight	= 0
				bOnlyPartitionCover	= bPartColumnCover * NOT(bFrontPartitions)

				gosub "partitionColumn"

				del 1

			add deskDist, -deskDist2, 0
			next iPaBottom
			del colNumInBottomRow
		endif
	endif
endif

if iLayoutType = LAYOUT_WAVE then del 4

! ======================================================================
end
! ======================================================================



"desk":
	call "completeTable_m" parameters all	iTableTopType			= 1 + (iLayoutType = LAYOUT_STRAIGHT),
											iDeskAngle				= iDeskAngle,
											bCalledAsExtension		= 0,
											bPartOfLayout			= 1,
											bPartOfWsSolo			= 0,
											bChair					= 1,
											bEnableDeskHsCorner		= 0,
											bEnableDeskHsHalfEdge	= 0,
											bEnableDeskHsEditingX	= (iDe = 1) * (iRow = 1) * (iSizing = SIZING_WS_SIZE),
											bEnableDeskHsEditingY	= (iDe = 1) * (iRow = 1),
											bEnableDeskHsEditingC	= (iDe = 1) * (iRow = 1),
											bEnableChairHsEditing 	= (iDe = 1) * (iRow = 1),
											bMirroredComputer		= bMirroredComputer,
											bMirroredCabPos			= bMirroredCabPos,
											chairPos				= chairPos,
											zzyzx					= tableTopHeight,
											completeTable_unID		= unID,
											stSymbolTypes			= stSymbolTypes,
											bKnobNoneType			= 0,
											returned_parameters completeTable_unID
	unID = completeTable_unID
	if iLayoutType = 1 then
		hotspot tableLength1 / 2, tableDepth1 / 2, 0,				centerunID, tableTopHeight, 1 : centerunID = centerunID + 1
		hotspot tableLength1 / 2, tableDepth1 / 2, tableTopHeight,	centerunID, tableTopHeight, 2 : centerunID = centerunID + 1
		hotspot tableLength1 / 2, tableDepth1 / 2, -1,				centerunID, tableTopHeight, 3 : centerunID = centerunID + 1
	endif
return

"extension":
	call "deskClosings_m" parameters all	iExtensionType			= iExtType,
											partitionFrameThk		= partitionFrameThk,
											bSymmetricalDeskEnd		= bSymmetricalDeskEnd,
											extRoundedRad			= extRoundedRad,
											bCalledAsExtension		= 1,
											bPartOfLayout			= 1,
											bPartOfWsSolo			= 0,
											bPartColumnCut			= bPartColumnCut,
											partColumnCutWidth		= partitionFrameThk,
											anglePartititon			= 0,
											xPartOrigPos			= 0,
											yPartOrigPos			= 0,
											iExtraDeskCab			= iExtraDeskCab * bShowCabParams,
											deskClosings_unID		= unID,
											stSymbolTypes			= stSymbolTypes,
											bKnobNoneType			= 0,
											returned_parameters deskClosings_unID
	unID = deskClosings_unID
	if iExtType = 2 or iExtType = 3 then
		hotspot 0, extraDeskDepth / 2, 0,				centerunID, tableTopHeight, 1 : centerunID = centerunID + 1
		hotspot 0, extraDeskDepth / 2, tableTopHeight,	centerunID, tableTopHeight, 2 : centerunID = centerunID + 1
		hotspot 0, extraDeskDepth / 2, -1,				centerunID, tableTopHeight, 3 : centerunID = centerunID + 1
	endif
return

"leftEndPartition":
	call "deskClosings_m" parameters all	iExtensionType			= DESK_PARTITION,
											partitionFrameThk		= partitionFrameThk,
											iDeskAngle				= iDeskAngle,
											bCalledAsExtension		= bCalledAsExtension,
											bPartOfLayout			= 1,
											bPartOfWsSolo			= 0,
											lengthPartition			= partLength[4],
											extPartLengthStart		= extPartLengthStart[4],
											extPartLengthEnd		= extPartLengthEnd[4],
											bShowExtPartConnEdge	= NOT(bFrontPartitions),
											bShowPartEdgeLeft		= bShowPartEdgeLeft,
											bShowPartEdgeRight		= bShowPartEdgeRight,
											anglePartititon			= anglePartititon,
											xPartOrigPos			= 0,
											yPartOrigPos			= 0,
											deskClosings_unID		= unID,
											stSymbolTypes			= stSymbolTypes,
											bKnobNoneType			= 0,
											returned_parameters deskClosings_unID
	unID = deskClosings_unID
return

"rightEndPartition":
	call "deskClosings_m" parameters all	iExtensionType			= DESK_PARTITION,
											partitionFrameThk		= partitionFrameThk,
											iDeskAngle				= iDeskAngle,
											bCalledAsExtension		= bCalledAsExtension,
											bPartOfLayout			= 1,
											bPartOfWsSolo			= 0,
											lengthPartition			= partLength[3],
											extPartLengthStart		= extPartLengthStart[3],
											extPartLengthEnd		= extPartLengthEnd[3],
											bShowExtPartConnEdge	= NOT(bFrontPartitions),
											bShowPartEdgeLeft		= bShowPartEdgeLeft,
											bShowPartEdgeRight		= bShowPartEdgeRight,
											anglePartititon			= anglePartititon,
											xPartOrigPos			= 0,
											yPartOrigPos			= 0,
											deskClosings_unID		= unID,
											stSymbolTypes			= stSymbolTypes,
											bKnobNoneType			= 0,
											returned_parameters deskClosings_unID
	unID = deskClosings_unID
return

"frontPartition":
	call "deskClosings_m" parameters all	iExtensionType			= DESK_PARTITION,
											partitionFrameThk		= partitionFrameThk,
											iDeskAngle				= iDeskAngle,
											bCalledAsExtension		= 0,
											bPartOfLayout			= 1,
											bPartOfWsSolo			= 0,
											bOnlyPartitionColumn	= 0,
											bOnlyPartitionCover		= NOT(bFrontPartitions),
											lengthPartition			= frontPartLength,
											bShowPartEdgeLeft		= bShowPartEdgeLeft,
											bShowPartEdgeRight		= bShowPartEdgeRight,
											anglePartititon			= 0,
											xPartOrigPos			= 0,
											yPartOrigPos			= 0,
											deskClosings_unID		= unID,
											stSymbolTypes			= stSymbolTypes,
											bKnobNoneType			= 0,
											returned_parameters deskClosings_unID
	unID = deskClosings_unID
return

"sidePartition":
	call "deskClosings_m" parameters all	iExtensionType			= DESK_PARTITION,
											partitionFrameThk		= partitionFrameThk,
											iDeskAngle				= iDeskAngle,
											bCalledAsExtension		= 0,
											bPartOfLayout			= 1,
											bPartOfWsSolo			= 0,
											bOnlyPartitionColumn	= 0,
											bOnlyPartitionCover		= bOnlyPartitionCover,
											lengthPartition			= sidePartLength,
											bShowPartEdgeLeft		= bShowPartEdgeLeft,
											bShowPartEdgeRight		= bShowPartEdgeRight,
											anglePartititon			= 90,
											xPartOrigPos			= 0,
											yPartOrigPos			= 0,
											deskClosings_unID		= unID,
											stSymbolTypes			= stSymbolTypes,
											bKnobNoneType			= 0,
											returned_parameters deskClosings_unID
	unID = deskClosings_unID
return

"partitionColumn":
	call "deskClosings_m" parameters all	iExtensionType			= DESK_PARTITION,
											partitionFrameThk		= partitionFrameThk,
											iDeskAngle				= iDeskAngle,
											bCalledAsExtension		= 1,
											bPartOfLayout			= 1,
											bPartOfWsSolo			= 0,
											bOnlyPartitionColumn	= 1,
											bOnlyPartitionCover		= bOnlyPartitionCover,
											bShowPartEdgeTop		= bShowPartEdgeTop,
											bShowPartEdgeLeft		= bShowPartEdgeLeft,
											bShowPartEdgeBottom		= bShowPartEdgeBottom,
											bShowPartEdgeRight		= bShowPartEdgeRight,
											deskClosings_unID		= unID,
											stSymbolTypes			= stSymbolTypes,
											bKnobNoneType			= 0,
											returned_parameters deskClosings_unID
	unID = deskClosings_unID
return

