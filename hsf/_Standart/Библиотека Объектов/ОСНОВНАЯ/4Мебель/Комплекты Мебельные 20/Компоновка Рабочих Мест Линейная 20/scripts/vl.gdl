
hideparameter all "A", "B", "ZZYZX"

call "FM_types" parameters all

! ======================================================================
! UI
! ======================================================================

call "ui_tabcontrol" parameters		controlType			= 1,
									nTabs				= 10,
									gs_ui_current_page	= gs_ui_current_page



! ======================================================================
! Object sizing
! ======================================================================

lock "deskNumberInRow"
if iLayoutType <> LAYOUT_WAVE then
	if GLOB_MODPAR_NAME = "bDoubleRow" then
		if NOT(bDoubleRow) then
			deskNumber = deskNumberInRow
			parameters deskNumber = deskNumber
		else
			deskNumber = deskNumberInRow * 2
			parameters deskNumber = deskNumber
		endif
	endif

	desklengthStart	= tableLength1 + (partitionFrameThk * bEndPartitions1 + partitionFrameThk * bEndPartitions2) * (iPartitionPos = PARPOS_BETW_D)
	deskLengthStep	= tableLength1 + partitionFrameThk * bSidePartitions * (iPartitionPos = PARPOS_BETW_D)

	if iSizing = SIZING_WS_SIZE then
		values "totalLength" range[desklengthStart,] step desklengthStart, deskLengthStep

		if GLOB_MODPAR_NAME = "totalLength" then
			parameters deskNumberInRow	=	totalLength / tableLength1 * (iPartitionPos = PARPOS_ABOVE_D)\
											+ (totalLength - partitionFrameThk * bEndPartitions1 - partitionFrameThk * bEndPartitions2 + partitionFrameThk * bSidePartitions) / (partitionFrameThk * bSidePartitions + tableLength1) * (iPartitionPos = PARPOS_BETW_D)

			parameters deskNumber		= deskNumberInRow * (1 + bDoubleRow)
		else
			parameters deskNumberInRow	= deskNumber / (1 + bDoubleRow)

			parameters totalLength		=	deskNumberInRow * tableLength1 * (iPartitionPos = PARPOS_ABOVE_D)\
											+ (deskNumberInRow * tableLength1 + (deskNumberInRow - 1) * partitionFrameThk * bSidePartitions + partitionFrameThk * bEndPartitions1 + partitionFrameThk * bEndPartitions2) * (iPartitionPos = PARPOS_BETW_D)
		endif

		lock		"totalLength"
	else
		if GLOB_MODPAR_NAME = "totalLength" then
			parameters tableLength1		=	totalLength / deskNumberInRow * (iPartitionPos = PARPOS_ABOVE_D)\
											+ (totalLength - partitionFrameThk * bEndPartitions1 - partitionFrameThk * bEndPartitions2\
											- (deskNumberInRow - 1) * partitionFrameThk * callAnyPartition) / deskNumberInRow * (iPartitionPos = PARPOS_BETW_D)
		else
			parameters deskNumberInRow	= deskNumber / (1 + bDoubleRow)

			if GLOB_MODPAR_NAME = "deskNumber" then
				parameters tableLength1	=	totalLength / deskNumberInRow * (iPartitionPos = PARPOS_ABOVE_D)\
											+ (totalLength - partitionFrameThk * bEndPartitions1 - partitionFrameThk * bEndPartitions2\
											- (deskNumberInRow - 1) * partitionFrameThk * bSidePartitions) / deskNumberInRow * (iPartitionPos = PARPOS_BETW_D)
			else
				parameters totalLength	=	deskNumberInRow * tableLength1 * (iPartitionPos = PARPOS_ABOVE_D)\
											+ (deskNumberInRow * tableLength1 + (deskNumberInRow - 1) * partitionFrameThk * bSidePartitions + partitionFrameThk * bEndPartitions1 + partitionFrameThk * bEndPartitions2) * (iPartitionPos = PARPOS_BETW_D)
			endif
		endif

		values "totalLength" range[tableLength1, )
		lock	"tableLength1"
	endif
else
	if (iPartitionPos = PARPOS_ABOVE_D) or NOT(bShowPartitionParams) then
		deskLengthStep	= deskDiagonal / 2

		if GLOB_MODPAR_NAME = "lengthRight" or GLOB_MODPAR_NAME = "lengthLeft" then
			deskNumberLeft = lengthLeft / deskLengthStep
			deskNumberRight = lengthRight / deskLengthStep

			parameters deskNumberLeft = deskNumberLeft
			parameters deskNumberRight = deskNumberRight

			totalLength	= lengthRight + lengthLeft
			parameters totalLength	= totalLength
			parameters deskNumber	= totalLength / deskLengthStep
		else
			if GLOB_MODPAR_NAME = "deskNumber" then
				deskNumberRight = deskNumber - deskNumberLeft
				if deskNumberRight < 1 then deskNumberRight = 1
				parameters deskNumberRight = deskNumberRight

				deskNumberLeft = deskNumber - deskNumberRight
				parameters deskNumberLeft = deskNumberLeft

				lengthLeft = deskNumberLeft * deskLengthStep
				parameters lengthLeft = lengthLeft

				lengthRight = deskNumberRight * deskLengthStep
				parameters lengthRight = lengthRight

				totalLength	= lengthRight + lengthLeft
				parameters totalLength	= totalLength
			else
				lengthLeft = deskNumberLeft * deskLengthStep
				parameters lengthLeft = lengthLeft

				lengthRight = deskNumberRight * deskLengthStep
				parameters lengthRight = lengthRight

				deskNumber = deskNumberLeft + deskNumberRight
				parameters deskNumber = deskNumber

				totalLength	= deskNumber * deskLengthStep
				parameters totalLength = totalLength
			endif
		endif

		values "lengthLeft" range[0,] step 0, deskLengthStep
		values "lengthRight" range[deskLengthStep,] step deskLengthStep, deskLengthStep
	else
		dim lengthValuesRight[]
		desklengthStartRight = partitionFrameThk / COS(diagonalAngle) * bEndPartitions1
		for ii = 1 to maxDeskNumberByWave
			if ii = 1 then
				lengthMr			= tableLength2 / 2
				lengthStep			= desklengthStartRight + lengthMr / SIN(diagonalAngle)\
									+ partitionFrameThk / SIN(diagonalAngle) * (bFrontPartitions or bEndPartitions2)

				lengthValuesRight[ii] = lengthStep
			else
				if ii / 2 = INT(ii / 2) then	!!!ii p치ros
					lengthMr		= tableLength1 - lengthMr / TAN(diagonalAngle)\
									- partitionFrameThk / TAN(diagonalAngle) * (bFrontPartitions or bEndPartitions2) * (ii = 2)\
									- partitionFrameThk / TAN(diagonalAngle) * bFrontPartitions * (ii <> 2)
					lengthStep		= lengthMr / COS(diagonalAngle)\
									+ partitionFrameThk / COS(diagonalAngle) * (bEndPartitions2 and NOT(bFrontPartitions))\
									+ partitionFrameThk / COS(diagonalAngle) * bFrontPartitions * (ii - deskNumberRight > EPS)\
									+ partitionFrameThk / COS(diagonalAngle) * (bEndPartitions2 and (bFrontPartitions)) * (ii - deskNumberRight < EPS)
				else							!!!ii p치ratlan
					lengthMr		= tableLength2 - lengthMr * TAN(diagonalAngle)\
									- partitionFrameThk * TAN(diagonalAngle) * bFrontPartitions
					lengthStep		= lengthMr / SIN(diagonalAngle)\
									- partitionFrameThk / COS(diagonalAngle) * (bEndPartitions2 and NOT(bFrontPartitions))\
									+ partitionFrameThk / SIN(diagonalAngle) * bFrontPartitions * (ii - deskNumberRight > EPS)\
									+ partitionFrameThk / SIN(diagonalAngle) * (bEndPartitions2 and (bFrontPartitions)) * (ii - deskNumberRight < EPS)
				endif

				lengthValuesRight[ii] = lengthValuesRight[ii - 1] + lengthStep
			endif
		next ii

		dim lengthValuesLeft[]
		desklengthStartLeft = -partitionFrameThk / COS(diagonalAngle) * (bEndPartitions1)
		for ii = 1 to maxDeskNumberByWave
			if ii = 1 then
				lengthMr	= tableLength2 / 2
				lengthStep	= desklengthStartLeft + lengthMr / SIN(diagonalAngle)\
							+ partitionFrameThk / SIN(diagonalAngle) * (bFrontPartitions or bEndPartitions1)

				lengthValuesLeft[ii] = lengthStep
			else
				if ii / 2 = INT(ii / 2) then		!!!ii p치ros
					lengthMr		= tableLength1 - lengthMr / TAN(diagonalAngle)\
									- partitionFrameThk / TAN(diagonalAngle) * (bFrontPartitions or bEndPartitions1) * (ii = 2)\
									- partitionFrameThk / TAN(diagonalAngle) * bFrontPartitions * (ii <> 2)
					lengthStep		= lengthMr / COS(diagonalAngle)\
									+ partitionFrameThk / COS(diagonalAngle) * bFrontPartitions\
									+ partitionFrameThk / COS(diagonalAngle) * (NOT(bFrontPartitions) and bEndPartitions1)\
									+ partitionFrameThk / COS(diagonalAngle) * bFrontPartitions * (ii - deskNumberLeft > EPS)\
									+ partitionFrameThk / COS(diagonalAngle) * (bFrontPartitions and bEndPartitions1) * (ii - deskNumberLeft < EPS)
				else								!!!ii p치ratlan
					lengthMr		= tableLength2 - lengthMr * TAN(diagonalAngle)\
									- partitionFrameThk * TAN(diagonalAngle) * bFrontPartitions
					lengthStep		= lengthMr / SIN(diagonalAngle)\
									- partitionFrameThk / COS(diagonalAngle) * bFrontPartitions\
									- partitionFrameThk / COS(diagonalAngle) * (NOT(bFrontPartitions) and bEndPartitions1)\
									+ partitionFrameThk / SIN(diagonalAngle) * bFrontPartitions * (ii - deskNumberLeft > EPS)\
									+ partitionFrameThk / SIN(diagonalAngle) * (bFrontPartitions and bEndPartitions1) * (ii - deskNumberLeft < EPS)
				endif

				lengthValuesLeft[ii] = lengthValuesLeft[ii - 1] + lengthStep
			endif
		next ii

		values "lengthRight" lengthValuesRight
		values "lengthLeft" 0, lengthValuesLeft

		if GLOB_MODPAR_NAME = "lengthRight" or GLOB_MODPAR_NAME = "lengthLeft" then
			totalLength	= lengthRight + lengthLeft
			parameters totalLength	= totalLength

			for iDnumRight = 1 to maxDeskNumberByWave
				if ABS(lengthRight - lengthValuesRight[iDnumRight]) < EPS then deskNumberRight = iDnumRight
			next iDnumRight

			if lengthLeft > EPS then
				for iDnumLeft = 1 to maxDeskNumberByWave
					if ABS(lengthLeft - lengthValuesLeft[iDnumLeft]) < EPS then deskNumberLeft = iDnumLeft
				next iDnumLeft
			else
				deskNumberLeft = 0
			endif

			parameters deskNumberRight = deskNumberRight
			parameters deskNumberLeft = deskNumberLeft

			deskNumber = deskNumberRight + deskNumberLeft
			parameters deskNumber = deskNumber
		else
			if GLOB_MODPAR_NAME = "deskNumber" then
				deskNumberRight = deskNumber - deskNumberLeft
				if deskNumberRight < 1 then deskNumberRight = 1
				parameters deskNumberRight = deskNumberRight

				deskNumberLeft = deskNumber - deskNumberRight
				parameters deskNumberLeft = deskNumberLeft

				if deskNumberLeft > 0 then
					lengthLeft = lengthValuesLeft[deskNumberLeft]
				else
					lengthLeft = 0
				endif
				parameters lengthLeft = lengthLeft

				lengthRight = lengthValuesRight[deskNumberRight]
				parameters lengthRight = lengthRight

				totalLength	= lengthRight + lengthLeft
				parameters totalLength	= totalLength
			else
				if deskNumberLeft > 0 then
					lengthLeft = lengthValuesLeft[deskNumberLeft]
				else
					lengthLeft = 0
				endif
				parameters lengthLeft = lengthLeft

				lengthRight = lengthValuesRight[deskNumberRight]
				parameters lengthRight = lengthRight

				deskNumber = deskNumberRight + deskNumberLeft
				parameters deskNumber = deskNumber

				totalLength	= lengthRight + lengthLeft
				parameters totalLength	= totalLength
			endif
		endif
	endif

	lock		"totalLength"
endif

lock			"lengthLeft",
				"lengthRight",
				"deskNumberLeft",
				"deskNumberRight"

hideparameter	"lengthLeft",
				"lengthRight",
				"deskNumberLeft",
				"deskNumberRight"

a		= layoutLeftSideDimA + layoutRightSideDimA
b		= layoutTopSideDimB + layoutBottomSideDimB
zzyzx	= MAX(tableTopHeight, maxExtHeight, realPartHeight)
parameters a		= a
parameters b		= b
parameters zzyzx	= zzyzx
lock	"a",
		"b",
		"zzyzx"



! ======================================================================
! Desks
! ======================================================================

if GLOB_MODPAR_NAME = "layoutType" or GLOB_MODPAR_NAME = "iLayoutType" then
	if iLayoutType = LAYOUT_STRAIGHT then
		defaultTableChairDistX	= 0
	else
		defaultTableChairDistX	= 0.5
	endif
	if iLayoutType = LAYOUT_WAVE then
		defaultInnerEdge		= ROUNDED

		defaultExtensionType	= EXT_ROUNDED
	else
		defaultInnerEdge		= STRAIGHT

		defaultExtensionType	= EXT_NONE
	endif
	if iLayoutType = LAYOUT_CUBICLE then
		defaultMSFront			= 0.75
	else
		defaultMSFront			= 1.1
	endif

	tableChairDistX	= defaultTableChairDistX
	parameters tableChairDistX	= tableChairDistX

	iInnerEdge = defaultInnerEdge
	parameters iInnerEdge = iInnerEdge

	MSFront= defaultMSFront
	parameters MSFront = MSFront

	iExtensionTypeTop		= defaultExtensionType
	iExtensionTypeBottom	= defaultExtensionType

	parameters iExtensionTypeTop	= iExtensionTypeTop
	parameters iExtensionTypeBottom	= iExtensionTypeBottom
endif

if GLOB_MODPAR_NAME = "extensionTypeLeft" or GLOB_MODPAR_NAME = "iextensionTypeLeft" then
	if bShowExtDeskParams then
		defaultMSSide	= 1.1
	else
		defaultMSSide	= 0.75
	endif

	MSSide = defaultMSSide
	parameters MSSide = MSSide
endif
if GLOB_MODPAR_NAME = "extensionTypeRight" or GLOB_MODPAR_NAME = "iextensionTypeRight" then
	if bShowExtDeskParams then
		defaultMSSide2	= 1.1
	else
		defaultMSSide2	= 0.75
	endif

	MSSide2 = defaultMSSide2
	parameters MSSide2 = MSSide2
endif

values "MSSide" range[0, ]
values "MSSide2" range[0, ]

values "iCabKnobType" 1, 2, 3, 4, 5, 6, 7, 8
values "iCabKnobVerPos" 1, 0, -1
values "iExtCabKnobType" 0, 1, 2, 3, 4, 5, 6, 7, 8
values "iExtCabKnobVerPos" 1, 0, -1
if GLOB_MODPAR_NAME = "iCabKnobType" or GLOB_MODPAR_NAME = "iExtCabKnobType" then
	if GLOB_MODPAR_NAME = "iCabKnobType" then
		gs_knob_type_m = iCabKnobType
		parameters gs_knob_type_m = gs_knob_type_m
	else
		gs_knob_type_m = iExtCabKnobType
		parameters gs_knob_type_m = gs_knob_type_m
	endif
else
	iCabKnobType	= gs_knob_type_m
	iExtCabKnobType	= gs_knob_type_m
	parameters iCabKnobType		= iCabKnobType
	parameters iExtCabKnobType	= iExtCabKnobType
endif
if GLOB_MODPAR_NAME = "iCabKnobVerPos" or GLOB_MODPAR_NAME = "iExtCabKnobVerPos" then
	if GLOB_MODPAR_NAME = "iCabKnobVerPos" then
		gs_knobVerPos_m = iCabKnobVerPos
		parameters gs_knobVerPos_m = gs_knobVerPos_m
	else
		gs_knobVerPos_m = iExtCabKnobVerPos
		parameters gs_knobVerPos_m = gs_knobVerPos_m
	endif
else
	iCabKnobVerPos		= gs_knobVerPos_m
	iExtCabKnobVerPos	= gs_knobVerPos_m
	parameters iCabKnobVerPos		= iCabKnobVerPos
	parameters iExtCabKnobVerPos	= iExtCabKnobVerPos
endif

if ((iExtensionTypeLeft <> 4 and iExtensionTypeRight <> 4) or iCabinetScheme = 5) and gs_officeCab_m = 0 then
	hideparameter  "bKnob", "iCabKnobType", "iCabKnobVerPos"
	lock "bKnob", "iCabKnobType", "iCabKnobVerPos"
endif

if not(bKnob) then
	hideparameter "iCabKnobVerPos", "iCabKnobType"
	lock "iCabKnobVerPos", "iCabKnobType"
endif
if NOT(bShowExtCabParams) then
	lock "iExtCabKnobType"
	lock "iExtCabKnobVerPos"
endif
if iExtCabKnobType = 0 then
	lock "iExtCabKnobVerPos"
endif

call "completeTable_m" parameters all	iTableTopType			= (iLayoutType = LAYOUT_CUBICLE or iLayoutType = LAYOUT_WAVE) + 2 * (iLayoutType = LAYOUT_STRAIGHT),
										zzyzx					= tableTopHeight,
										iDeskAngle				= iDeskAngle,
										chairPos				= chairPos,
										bCalledAsExtension		= 0,
										bPartOfLayout			= 1,
										bPartOfWsSolo			= 0,
										bEnableBasetypes		= 0,
										bMirroredCabPos			= bMirroredCabPos,
										bShowCommonCabParams	= bShowCommonCabParams,
										bShowCabParams			= bShowCabParams,
										bShowExtDeskCabParams	= bShowExtDeskCabParams,
										bKnobNoneType			= 0,
										stSymbolTypes			= stSymbolTypes



! ======================================================================
! Extensions, Partitions
! ======================================================================

call "deskClosings_m" parameters all	bPartOfLayout			= 1,
										bPartOfWsSolo			= 0,
										bShowCabParams			= bShowCabParams,
										bShowPartitionParams	= bShowPartitionParams,
										bShowExtCabParams		= bShowExtCabParams,
										bShowExtDeskParams		= bShowExtDeskParams,
										bShowExtDeskChairParams	= bShowExtDeskChairParams,
										bShowExtDeskCabParams	= bShowExtDeskCabParams,
										bShowCommonCabParams	= bShowCommonCabParams,
										bEnableCustPartLength	= 0,
										bKnobNoneType			= 0,
										stSymbolTypes			= stSymbolTypes

! enableExtensionTypes - possible values
!	2		- enable None
!	4		- enable Rounded
!	8		- enable Desk
!	16		- enable Desk with Chair
!	32		- enable Cabinet
!	64		- enable Partition

if iLayoutType = LAYOUT_STRAIGHT then
	enableExtensionTypes = 2 + 4 + 32 + (8 + 16) * bSymmetricalDeskEnd
endif
if iLayoutType = LAYOUT_CUBICLE then
	enableExtensionTypes = 2
endif
if iLayoutType = LAYOUT_WAVE then
	enableExtensionTypes = 2 + 4 + 32
endif

dim extensionTypeValueList[]
j = 1
for i = 1 to vardim1(stExtensionsType)
	if bittest(enableExtensionTypes, i) then
		put i - 1
		extensionTypeValueList[j] = stExtensionsType[i]
		j = j + 1
	endif
next i

values "extensionTypeTop" extensionTypeValueList
values "iExtensionTypeTop" use(NSP)
if GLOB_MODPAR_NAME = "extensionTypeTop" then
	for iExtTop = 1 to vardim1(stExtensionsType)
		if extensionTypeTop = stExtensionsType[iExtTop] then iExtensionTypeTop = iExtTop - 1
	next iExtTop
	parameters iExtensionTypeTop = iExtensionTypeTop
else
	extensionTypeTop = stExtensionsType[iExtensionTypeTop + 1]
	parameters extensionTypeTop = extensionTypeTop
endif

values "extensionTypeRight" extensionTypeValueList
values "iExtensionTypeRight" use(NSP)
if GLOB_MODPAR_NAME = "extensionTypeRight" then
	for iExtRight = 1 to vardim1(stExtensionsType)
		if extensionTypeRight = stExtensionsType[iExtRight] then iExtensionTypeRight = iExtRight - 1
	next iExtRight
	parameters iExtensionTypeRight = iExtensionTypeRight
else
	extensionTypeRight = stExtensionsType[iExtensionTypeRight + 1]
	parameters extensionTypeRight = extensionTypeRight
endif

values "extensionTypeBottom" extensionTypeValueList
values "iExtensionTypeBottom" use(NSP)
if GLOB_MODPAR_NAME = "extensionTypeBottom" then
	for iExtBottom = 1 to vardim1(stExtensionsType)
		if extensionTypeBottom = stExtensionsType[iExtBottom] then iExtensionTypeBottom = iExtBottom - 1
	next iExtBottom
	parameters iExtensionTypeBottom = iExtensionTypeBottom
else
	extensionTypeBottom = stExtensionsType[iExtensionTypeBottom + 1]
	parameters extensionTypeBottom = extensionTypeBottom
endif

values "extensionTypeLeft" extensionTypeValueList
values "iExtensionTypeLeft" get(NSP)
if GLOB_MODPAR_NAME = "extensionTypeLeft" then
	for iExtLeft = 1 to vardim1(stExtensionsType)
		if extensionTypeLeft = stExtensionsType[iExtLeft] then iExtensionTypeLeft = iExtLeft - 1
	next iExtLeft
	parameters iExtensionTypeLeft = iExtensionTypeLeft
else
	extensionTypeLeft = stExtensionsType[iExtensionTypeLeft + 1]
	parameters extensionTypeLeft = extensionTypeLeft
endif

if iLayoutType = LAYOUT_STRAIGHT then
	iExtensionTypeTop		= 0
	iExtensionTypeBottom	= 0

	parameters iExtensionTypeTop		= iExtensionTypeTop
	parameters iExtensionTypeBottom		= iExtensionTypeBottom

	lock			"extensionTypeTop",
					"iExtensionTypeTop",
					"extensionTypeBottom",
					"iExtensionTypeBottom"
	hideparameter	"extensionTypeTop",
					"iExtensionTypeTop",
					"extensionTypeBottom",
					"iExtensionTypeBottom"
endif
if iLayoutType = LAYOUT_CUBICLE then
	iExtensionTypeRight		= 0
	iExtensionTypeLeft		= 0
	iExtensionTypeTop		= 0
	iExtensionTypeBottom	= 0

	parameters iExtensionTypeRight		= iExtensionTypeRight
	parameters iExtensionTypeLeft		= iExtensionTypeLeft
	parameters iExtensionTypeTop		= iExtensionTypeTop
	parameters iExtensionTypeBottom		= iExtensionTypeBottom

	lock			"gs_extensions"
endif
if iLayoutType = LAYOUT_WAVE then
	if bDeskNumLeftIsEven then
		if deskNumber < 4 then
			iExtensionTypeBottom	= 0
			lock		"extensionTypeBottom",
						"iExtensionTypeBottom"
		endif
		if deskNumber < 3 then
			iExtensionTypeTop		= 0
			lock		"extensionTypeTop",
						"iExtensionTypeTop"
		endif
	else
		if deskNumber < 3 then
			iExtensionTypeBottom	= 0
			lock		"extensionTypeBottom",
						"iExtensionTypeBottom"
		endif
		if deskNumber < 4 then
			iExtensionTypeTop		= 0
			lock		"extensionTypeTop",
						"iExtensionTypeTop"
		endif
	endif

	iExtensionTypeRight	= 0
	IExtensionTypeLeft	= 0
	bSidePartitions		= 1

	parameters iExtensionTypeRight	= iExtensionTypeRight
	parameters iExtensionTypeLeft	= iExtensionTypeLeft
	parameters bSidePartitions		= bSidePartitions

	lock			"extensionTypeRight",
					"iExtensionTypeRight",
					"extensionTypeLeft",
					"iExtensionTypeLeft",
					"bSidePartitions"
	hideparameter	"extensionTypeRight",
					"iExtensionTypeRight",
					"extensionTypeLeft",
					"iExtensionTypeLeft",
					"bSidePartitions"
endif

if deskNumber = 1 + bDoubleRow then
	bSidePartitions = 0
	parameters bSidePartitions = bSidePartitions
	lock "bSidePartitions"
endif



! ======================================================================
! Layout
! ======================================================================

values "layoutType" stLayoutType
values "iLayoutType" 1, 2, 3
if GLOB_MODPAR_NAME = "layoutType" then
	for iLay = 1 to vardim1(stLayoutType)
		if layoutType = stLayoutType[iLay] then iLayoutType = iLay
	next iLay
	parameters iLayoutType = iLayoutType
else
	layoutType = stLayoutType[max(iLayoutType, 1)]
	parameters layoutType = layoutType
endif

values "arrangement" stArrangement
values "iArrangement" 1, 2
if GLOB_MODPAR_NAME = "arrangement" then
	for iArr = 1 to vardim1(stArrangement)
		if arrangement = stArrangement[iArr] then iArrangement = iArr
	next iArr
	parameters iArrangement = iArrangement
else
	arrangement = stArrangement[max(iArrangement, 1)]
	parameters arrangement = arrangement
endif

if (iLayoutType = LAYOUT_STRAIGHT or iLayoutType = LAYOUT_CUBICLE) and NOT(bDoubleRow) then
	iArrangement	= 1
	parameters iArrangement	= iArrangement

	lock	"arrangement",
			"iArrangement"
endif
if iLayoutType = LAYOUT_WAVE then
	iArrangement	= 2
	parameters iArrangement	= iArrangement

	lock	"arrangement",
			"iArrangement"
endif



! ======================================================================
! Dimensions
! ======================================================================

values "sizing" stSizing
values "iSizing" 1, 2
if GLOB_MODPAR_NAME = "sizing" then
	for iSiz = 1 to vardim1(stSizing)
		if sizing = stSizing[iSiz] then iSizing = iSiz
	next iSiz
	parameters iSizing = iSizing
else
	sizing = stSizing[max(iSizing, 1)]
	parameters sizing = sizing
endif

values "deskSizing" stDeskSizing
values "iDeskSizing" 1, 2
if GLOB_MODPAR_NAME = "deskSizing" then
	for iDSiz = 1 to vardim1(stDeskSizing)
		if deskSizing = stDeskSizing[iDSiz] then iDeskSizing = iDSiz
	next iDSiz
	parameters iDeskSizing = iDeskSizing
else
	deskSizing = stDeskSizing[max(iDeskSizing, 1)]
	parameters deskSizing = deskSizing
endif

if iLayoutType = LAYOUT_WAVE then
	values "deskNumber" range[1, )
else
	values "deskNumber" range[1 + bDoubleRow, ) step 1 + bDoubleRow, 1 + bDoubleRow
endif

if iLayoutType = LAYOUT_WAVE then
	iSizing = 1
	parameters iSizing = iSizing
	lock			"sizing",
					"iSizing"
	hideparameter 	"sizing",
					"iSizing"

	bDoubleRow = 1
	parameters bDoubleRow = bDoubleRow
	lock			"bDoubleRow"
endif

if iLayoutType = LAYOUT_STRAIGHT then
	lock			"tableLength2", "tableDepth2", "innerEdge", "iInnerEdge", "innerEdgeRad"
	hideparameter 	"tableLength2", "tableDepth2", "innerEdge", "iInnerEdge", "innerEdgeRad"
endif
if iLayoutType = LAYOUT_WAVE then
	if	GLOB_MODPAR_NAME = "tableLength1" or GLOB_MODPAR_NAME = "tableLength2" or\
		GLOB_MODPAR_NAME = "xPosTopCorner" or GLOB_MODPAR_NAME = "yPosTopCorner" then
		if iDeskSizing = DESKSIZING_FIX_AXIS then
			parameters totalAngle = diagonalAngle
		else
			parameters axisAngle = totalAngle - diagonalAngle
		endif
	else
		parameters totalAngle = diagonalAngle + axisAngle
	endif

	if iDeskSizing = DESKSIZING_FIX_AXIS then
		parameters axisAngle = 0
		lock		"axisAngle"
	endif

	parameters iSizing = 1
	lock			"sizing",
					"iSizing"
	hideparameter 	"sizing",
					"iSizing"
else
	lock			"deskSizing",
					"iDeskSizing",
					"axisAngle"
	hideparameter 	"deskSizing",
					"iDeskSizing",
					"axisAngle"
endif

if gs_officeCab_m = 0 or not(gs_bOfficeCab) then
	hideparameter "gs_bevel"
	lock "gs_bevel"
endif

! ======================================================================
! Layout Components Listing
! ======================================================================

parameters iListDeskNum90	= 0
parameters iListDeskNumRect	= 0
parameters iListExtDeskNum	= 0
parameters iListDeskCabNum	= 0
parameters iListExtRounded	= 0
parameters iListExtCab		= 0
parameters iListChairNum	= 0
parameters iListPartNum		= 0

lock	"iListDeskNum90",
		"iListDeskNumRect",
		"iListExtDeskNum",
		"iListDeskCabNum",
		"iListExtRounded",
		"iListExtCab",
		"iListChairNum",
		"iListPartNum"

if iLayoutType = LAYOUT_STRAIGHT then
	parameters iListDeskNumRect	= deskNumber

	parameters iListExtCab		= ((iExtensionTypeLeft = EXT_CABINET)\
								+ (iExtensionTypeRight = EXT_CABINET)) * (1 + bDoubleRow)

	parameters iListExtDeskNum	= (iExtensionTypeLeft = EXT_DESK)\
								+ (iExtensionTypeRight = EXT_DESK)\
								+ (iExtensionTypeRight = EXT_DESK_WCHAIR)\
								+ (iExtensionTypeLeft = EXT_DESK_WCHAIR)

	parameters iListDeskCabNum	= deskNumber * CEIL(gs_officeCab_m / 2)\
								+ iListExtDeskNum * CEIL(iExtraDeskCab / 2) * bShowCabParams

	parameters iListExtRounded	= (iExtensionTypeLeft = EXT_ROUNDED)\
								+ (iExtensionTypeRight = EXT_ROUNDED)

	parameters iListChairNum	= deskNumber + (iExtensionTypeLeft = EXT_DESK_WCHAIR)\
								+ (iExtensionTypeRight = EXT_DESK_WCHAIR)

	parameters iListPartNum		= bFrontPartitions * (deskNumber / (1 + bDoubleRow))\
								+ bSidePartitions * ((deskNumber / (1 + bDoubleRow)) - 1) * (1 + bDoubleRow)\
								+ bEndPartitions1 * (1 + bDoubleRow)\
								+ bEndPartitions2 * (1 + bDoubleRow)
endif

if iLayoutType = LAYOUT_CUBICLE then
	parameters iListDeskNum90	= deskNumber

	parameters iListDeskCabNum	= deskNumber * gs_bOfficeCab

	parameters iListChairNum	= deskNumber

	parameters iListPartNum		= bFrontPartitions * (deskNumber / (1 + bDoubleRow))\
								+ bSidePartitions * ((deskNumber / (1 + bDoubleRow)) - 1) * (1 + bDoubleRow)\
								+ bEndPartitions1 * (1 + bDoubleRow)\
								+ bEndPartitions2 * (1 + bDoubleRow)
endif

if iLayoutType = LAYOUT_WAVE then
	parameters iListDeskNum90	= deskNumber

	parameters iListExtCab		= (iExtensionTypeTop = EXT_CABINET) * (CEIL(deskNumber / 2) - 1)\
								+ (iExtensionTypeBottom = EXT_CABINET) * (bDeskNumberIsEven * ((deskNumber / 2) - 1) + (deskNumber > 1) * NOT(bDeskNumberIsEven) * (((deskNumber - 1) / 2) - 1))

	parameters iListDeskCabNum	= deskNumber * gs_bOfficeCab

	parameters iListExtRounded	= (iExtensionTypeTop = EXT_ROUNDED) * (CEIL(deskNumber / 2) - 1)\
								+ (iExtensionTypeBottom = EXT_ROUNDED) * (bDeskNumberIsEven * ((deskNumber / 2) - 1) + (deskNumber > 1) * NOT(bDeskNumberIsEven) * (((deskNumber - 1) / 2) - 1))

	parameters iListChairNum	= deskNumber

	parameters iListPartNum		= bFrontPartitions * ((deskNumber - 1) * (deskNumber > 1) + (deskNumber = 1))\
								+ bEndPartitions1 * (1 + (deskNumber > 1))\
								+ bEndPartitions2 * (1 + (deskNumber > 1))
endif


