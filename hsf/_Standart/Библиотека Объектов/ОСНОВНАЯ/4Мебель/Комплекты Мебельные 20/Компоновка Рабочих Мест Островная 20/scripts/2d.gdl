
unID = 1
centerunID = 20000

! ======================================================================
! Desks (with Front Panel, Desk Cabinet, Chair, Keyboard, LCD Monitor)
! ======================================================================

for iDe = 1 to deskNumber
	add2 -layoutDimModX / 2, layoutDimModY / 2 * DESK_LAYOUT_4 + layoutDimModY3Desk / 2 * DESK_LAYOUT_3
	rot2 90

	if enableDesk[iDe] then
		gosub "desk"
	endif

	del 2

	if iArrangement = ARRANGE_4_DESK_MIRR then
		mul2 1 - 2 * (iDe = 1 or iDe = 3), 1 - 2 * (iDe = 2 or iDe = 4)
	else
		rot2 -iDeskAngle
	endif
next iDe

del deskNumber



! ======================================================================
! Extensions (Rounded, Desk, Desk with Chair, Cabinet, Partition)
! ======================================================================

for iExt = 1 to deskNumber
	add2 layoutDimModX / 2 * NOT(bSymmetricalDeskEnd), extDistFromCenter[iExt]
	if iExtensionType[iExt] = EXT_PARTITION then
		add2 0, partitionFrameThk / 2 * (iPartitionPos = PARPOS_BETW_D) - partitionFrameThk / 2 * (iPartitionPos = PARPOS_ABOVE_D)
	endif

	gosub "extension"

	del 1 + (iExtensionType[iExt] = EXT_PARTITION)
rot2  -iDeskAngle
next iExt

del deskNumber



! ======================================================================
! Desk Partitions
! ======================================================================

if callAnyPartition then
	for iPa = 1 to deskNumber
		if existPartition[iPa] * (iPartitionPos = PARPOS_ABOVE_D) + enablePartition[iPa] * (iPartitionPos = PARPOS_BETW_D) then
			add2 0, partCenterDist[iPa]

			gosub "partition"

			del 1
		endif
	rot2  -iDeskAngle
	next iPa

	del deskNumber
endif



! ======================================================================
! Desk Center Partitions Column
! ======================================================================

if existPartCenterColumn then
	if iPartitionPos = PARPOS_BETW_D then
		bShowPartEdgeTop		= NOT(enablePartition[1])
		bShowPartEdgeRight		= NOT(enablePartition[2])
		bShowPartEdgeBottom		= NOT(enablePartition[3]) * DESK_LAYOUT_4
		bShowPartEdgeLeft		= NOT(enablePartition[4]) * DESK_LAYOUT_4 + NOT(enablePartition[3]) * DESK_LAYOUT_3
	else
		bShowPartEdgeTop		= NOT(existPartition[1])
		bShowPartEdgeRight		= NOT(existPartition[2])
		bShowPartEdgeBottom		= NOT(existPartition[3]) * DESK_LAYOUT_4
		bShowPartEdgeLeft		= NOT(existPartition[4]) * DESK_LAYOUT_4 + NOT(existPartition[3]) * DESK_LAYOUT_3
	endif
	gosub "partitionColumn"
endif



! ======================================================================
! Minimal Space
! ======================================================================

reqBMinSpace = 0
minSpaceUnID = 3000
call "fa_minimalspace" parameters all MSType = 0, unID = 3000,
							returned_parameters reqBMinSpace,
												MSFillType,
												MSFillPen,
												MSFillBackPen,
												MSContLineType,
												MSContLinePen

if reqBMinSpace <> 0 then
	drawindex 10
	FILL MSFillType
	pen MSContLinePen
	line_type MSContLineType

	if DESK_LAYOUT_4 then
		poly2_b 4, 1+2+4+64, MSFillPen, MSFillBackPen,
			minSpaceRightSideDimA, minSpaceTopSideDimB, 1,
			minSpaceRightSideDimA, -minSpaceBottomSideDimB, 1,
			-minSpaceLeftSideDimA, -minSpaceBottomSideDimB, 1,
			-minSpaceLeftSideDimA, minSpaceTopSideDimB, 1

		hotspot2 minSpaceRightSideDimA, minSpaceTopSideDimB,		minSpaceUnID : minSpaceUnID = minSpaceUnID + 1
		hotspot2 minSpaceRightSideDimA, -minSpaceBottomSideDimB,	minSpaceUnID : minSpaceUnID = minSpaceUnID + 1
		hotspot2 -minSpaceLeftSideDimA, -minSpaceBottomSideDimB,	minSpaceUnID : minSpaceUnID = minSpaceUnID + 1
		hotspot2 -minSpaceLeftSideDimA, minSpaceTopSideDimB,		minSpaceUnID : minSpaceUnID = minSpaceUnID + 1
	endif
	if DESK_LAYOUT_3 then
		calcExtWidthForMinSpaceFill	= (iArrangement = ARRANGE_3_DESK_ALIGN)

		poly2_b 6, 1+2+4+64, MSFillPen, MSFillBackPen,
			-extPartLengthStart[1] + extWidthTop / TAN(60) * calcExtWidthForMinSpaceFill - SIN(60) * MSFront - COS(60) * MSFront * TAN(minSpaceBetaTop),
			deskGroupTopSideDimB + extWidthTop * calcExtWidthForMinSpaceFill + minSpaceTop, 1,
			extPartLengthEnd[1] - extWidthTop / TAN(60) * calcExtWidthForMinSpaceFill + SIN(60) * MSFront + COS(60) * MSFront * TAN(minSpaceBetaTop),
			deskGroupTopSideDimB + extWidthTop * calcExtWidthForMinSpaceFill + minSpaceTop, 1,
			maxdeskGroupRightAxisLength + extPartLengthEnd[2] * COS(60) + extWidthRight / COS(30) * COS(60) * calcExtWidthForMinSpaceFill + SIN(60) * MSFront - COS(60) * MSFront * TAN(minSpaceBetaRight),
			-maxdeskGroupBottomAxisLength + extPartLengthEnd[2] * SIN(60) - extWidthRight / COS(30) * SIN(60) * calcExtWidthForMinSpaceFill + COS(60) * MSFront + SIN(60) * MSFront * TAN(minSpaceBetaRight), 1,
			maxdeskGroupRightAxisLength - extPartLengthStart[2] * COS(60) + extWidthRight / COS(30) * calcExtWidthForMinSpaceFill - MSFront * TAN(minSpaceBetaRight),
			-maxdeskGroupBottomAxisLength - extPartLengthStart[2] * SIN(60) - MSFront, 1,
			-maxdeskGroupLeftAxisLength + extPartLengthEnd[4] * COS(60) - extWidthLeft / COS(30) * calcExtWidthForMinSpaceFill + MSFront * TAN(minSpaceBetaLeft),
			-maxdeskGroupBottomAxisLength - extPartLengthEnd[4] * SIN(60) - MSFront, 1,
			-maxdeskGroupLeftAxisLength - extPartLengthStart[4] * COS(60) - extWidthLeft / COS(30) * COS(60) * calcExtWidthForMinSpaceFill - SIN(60) * MSFront + COS(60) * MSFront * TAN(minSpaceBetaLeft),
			-maxdeskGroupBottomAxisLength + extPartLengthStart[4] * SIN(60) - extWidthLeft / COS(30) * SIN(60) * calcExtWidthForMinSpaceFill + COS(60) * MSFront + SIN(60) * MSFront * TAN(minSpaceBetaLeft), 1


		hotspot2 -extPartLengthStart[1] + extWidthTop / TAN(60) * calcExtWidthForMinSpaceFill - SIN(60) * MSFront - COS(60) * MSFront * TAN(minSpaceBetaTop),
				deskGroupTopSideDimB + extWidthTop * calcExtWidthForMinSpaceFill + minSpaceTop,																						minSpaceUnID : minSpaceUnID = minSpaceUnID + 1
		hotspot2 extPartLengthEnd[1] - extWidthTop / TAN(60) * calcExtWidthForMinSpaceFill + SIN(60) * MSFront + COS(60) * MSFront * TAN(minSpaceBetaTop),
				deskGroupTopSideDimB + extWidthTop * calcExtWidthForMinSpaceFill + minSpaceTop,																						minSpaceUnID : minSpaceUnID = minSpaceUnID + 1
		hotspot2 maxdeskGroupRightAxisLength + extPartLengthEnd[2] * COS(60) + extWidthRight / COS(30) * COS(60) * calcExtWidthForMinSpaceFill + SIN(60) * MSFront - COS(60) * MSFront * TAN(minSpaceBetaRight),
				-maxdeskGroupBottomAxisLength + extPartLengthEnd[2] * SIN(60) - extWidthRight / COS(30) * SIN(60) * calcExtWidthForMinSpaceFill + COS(60) * MSFront + SIN(60) * MSFront * TAN(minSpaceBetaRight),	minSpaceUnID : minSpaceUnID = minSpaceUnID + 1
		hotspot2 maxdeskGroupRightAxisLength - extPartLengthStart[2] * COS(60) + extWidthRight / COS(30) * calcExtWidthForMinSpaceFill - MSFront * TAN(minSpaceBetaRight),
				-maxdeskGroupBottomAxisLength - extPartLengthStart[2] * SIN(60) - MSFront,																							minSpaceUnID : minSpaceUnID = minSpaceUnID + 1
		hotspot2 -maxdeskGroupLeftAxisLength + extPartLengthEnd[4] * COS(60) - extWidthLeft / COS(30) * calcExtWidthForMinSpaceFill + MSFront * TAN(minSpaceBetaLeft),
				-maxdeskGroupBottomAxisLength - extPartLengthEnd[4] * SIN(60) - MSFront,																							minSpaceUnID : minSpaceUnID = minSpaceUnID + 1
		hotspot2 -maxdeskGroupLeftAxisLength - extPartLengthStart[4] * COS(60) - extWidthLeft / COS(30) * COS(60) * calcExtWidthForMinSpaceFill - SIN(60) * MSFront + COS(60) * MSFront * TAN(minSpaceBetaLeft),
				-maxdeskGroupBottomAxisLength + extPartLengthStart[4] * SIN(60) - extWidthLeft / COS(30) * SIN(60) * calcExtWidthForMinSpaceFill + COS(60) * MSFront + SIN(60) * MSFront * TAN(minSpaceBetaLeft),	minSpaceUnID : minSpaceUnID = minSpaceUnID + 1
	endif

	line_type 1
endif

! ======================================================================
end
! ======================================================================



"desk":
	call "completeTable_m" parameters all	iTableTopType			= 1,
											iDeskAngle				= iDeskAngle,
											bCalledAsExtension		= 0,
											bPartOfLayout			= 1,
											bPartOfWsSolo			= 0,
											bChair					= 1,
											bEnableDeskHsCorner		= 0,
											bEnableDeskHsHalfEdge	= 0,
											bEnableDeskHsEditingX	= 1,
											bEnableDeskHsEditingY	= 1,
											bEnableDeskHsEditingC	= 1,
											bEnableChairHsEditing 	= 1,
											bMirroredComputer		= (iDe / 2 = INT(iDe / 2)) * (iArrangement = ARRANGE_4_DESK_MIRR),
											bMirroredCabPos			= 0,
											chairPos				= 2,
											zzyzx					= tableTopHeight,
											completeTable_unID		= unID,
											stSymbolTypes			= stSymbolTypes,
											returned_parameters completeTable_unID
	unID = completeTable_unID
return

"extension":
	call "deskClosings_m" parameters all	iExtensionType			= iExtensionType[iExt],
											partitionFrameThk		= partitionFrameThk,
											bSymmetricalDeskEnd		= bSymmetricalDeskEnd,
											extRoundedRad			= layoutEndWidth[iExt] / 2 - layoutDimModX / 2 * NOT(bSymmetricalDeskEnd),
											bCalledAsExtension		= 1,
											bPartOfLayout			= 1,
											bPartOfWsSolo			= 0,
											extPartLengthStart		= extPartLengthStart[iExt],
											extPartLengthEnd		= extPartLengthEnd[iExt],
											bShowExtPartConnEdge	= NOT(existPartition[iExt]) * (iPartitionPos = PARPOS_ABOVE_D) or NOT(callAnyPartition) * (iPartitionPos = PARPOS_BETW_D) or (iPartitionLength = PARLENGTH_CUSTOM),
											anglePartititon			= 0,
											xPartOrigPos			= 0,
											yPartOrigPos			= 0,
											iExtraDeskCab			= iExtraDeskCab * bShowCabParams,
											deskClosings_unID		= unID,
											stSymbolTypes			= stSymbolTypes,
											returned_parameters deskClosings_unID
	unID = deskClosings_unID
	if iExtensionType[iExt] = 2 or iExtensionType[iExt] = 3 then
		hotspot2 0, extraDeskDepth / 2, centerunID : centerunID = centerunID + 1
	endif
return

"partition":
	call "deskClosings_m" parameters all	iExtensionType			= DESK_PARTITION,
											partitionFrameThk		= partitionFrameThk,
											iDeskAngle				= iDeskAngle,
											bCalledAsExtension		= 0,
											bPartOfLayout			= 1,
											bPartOfWsSolo			= 0,
											lengthPartition			= partLength[iPa],
											bOnlyPartitionColumn	= 0,
											bOnlyPartitionCover		= NOT(existPartition[iPa]),
											bShowPartEdgeLeft		= ((iPartitionLength = PARLENGTH_CUSTOM) and (ABS(partitionOffsetCustom) > 0)) or NOT(existPartCenterColumn),
											bShowPartEdgeRight		= NOT(iExtensionType[iPa] = EXT_PARTITION) or (iPartitionLength = PARLENGTH_CUSTOM),
											anglePartititon			= 90,
											xPartOrigPos			= 0,
											yPartOrigPos			= 0,
											deskClosings_unID		= unID,
											stSymbolTypes			= stSymbolTypes,
											returned_parameters deskClosings_unID
	unID = deskClosings_unID
return

"partitionColumn":
	call "deskClosings_m" parameters all	iExtensionType			= DESK_PARTITION,
											partitionFrameThk		= partitionFrameThk,
											iDeskAngle				= iDeskAngle,
											bCalledAsExtension		= 0,
											bPartOfLayout			= 1,
											bPartOfWsSolo			= 0,
											bOnlyPartitionColumn	= 1,
											bOnlyPartitionCover		= 0,
											bShowPartEdgeTop		= bShowPartEdgeTop,
											bShowPartEdgeRight		= bShowPartEdgeRight,
											bShowPartEdgeBottom		= bShowPartEdgeBottom,
											bShowPartEdgeLeft		= bShowPartEdgeLeft,
											deskClosings_unID		= unID,
											stSymbolTypes			= stSymbolTypes,
											returned_parameters deskClosings_unID
	unID = deskClosings_unID
return


