

!Hide all parameters from UI
hideparameter all  "A", "B", "ZZYZX"

call "FM_types" parameters all



minDist = 0.3
values "a" range [minDist, ]
values "b" range [minDist, ]
values "zzyzx" range [leg_h+minDist+bCornice*cot, ]


! ==============================================================================
! Cabinet Shape
! ==============================================================================
! ----- Cabinet Shape -----
values "cabinetForm" stCabinetForm		! Square(1), Corner-L(2), Corner-C(3)
values "iCabinetForm"  SHAPE_SQUARE, SHAPE_CORNER_L, SHAPE_CORNER_C
if GLOB_MODPAR_NAME = "cabinetForm" then
	iCabinetForm = 1
	for i = 1 to vardim1(stCabinetForm)
		if cabinetForm= stCabinetForm[i] then	iCabinetForm = i
	next i
	parameters iCabinetForm = iCabinetForm
else
	iCabinetForm = max(min(iCabinetForm,3),1)
	parameters cabinetForm = stCabinetForm[iCabinetForm]
endif

if iTempForm <> iCabinetForm then
	if iCabinetForm = SHAPE_SQUARE then
		B = sideDepth2
		parameters B = B
	else
		if iTempForm = SHAPE_SQUARE then
			B = A
			parameters B = B
		endif
	endif

	iTempForm = iCabinetForm
	parameters iTempForm = iTempForm
endif

if iCabinetForm = SHAPE_SQUARE then
	hideparameter "sideDepth1", "sideDepth2"
	lock "sideDepth1", "sideDepth2"
endif

if iCabinetForm = SHAPE_CORNER_L then
	values "sideDepth1" range [0.1, A]
	values "sideDepth2" range [0.1, B]
endif

if iCabinetForm = SHAPE_CORNER_C then
	values "sideDepth1" range [0.1, A-0.1]
	values "sideDepth2" range [0.1, B-0.1]
endif


! ==============================================================================
! Door Settings
! ==============================================================================
! ----- Door Style -----
dim doorStyleNumber[12]
	doorStyleNumber[1] = 1
	doorStyleNumber[2] = 13
	doorStyleNumber[3] = 3
	doorStyleNumber[4] = 9
	doorStyleNumber[5] = 4
	doorStyleNumber[6] = 5
	doorStyleNumber[7] = 14
	doorStyleNumber[8] = 15
	doorStyleNumber[9] = 16
	doorStyleNumber[10] = 17
	doorStyleNumber[11] = 18
	doorStyleNumber[12] = 10

values "iDoorStyle" doorStyleNumber
values "doorStyle" stDoorStyle
if GLOB_MODPAR_NAME = "doorStyle" then
	iDoorStyle = 1
	for i = 1 to vardim1(stDoorStyle)
		if doorStyle = stDoorStyle[i] then iDoorStyle = doorStyleNumber[i]
	next i
	parameters iDoorStyle = iDoorStyle
else
	for i = 1 to vardim1(stDoorStyle)
		if iDoorStyle = doorStyleNumber[i] then doorStyle = stDoorStyle[i]
	next i
	parameters doorStyle = doorStyle
endif

! ----- Door Type -----
if iCabinetForm = SHAPE_SQUARE then
	values "doorType" stDoorType		! Side Hung(2), Sliding(1)
	values "iDoorType" DOOR_TYPE_SLIDING, DOOR_TYPE_SIDEHUNG
else
	values "doorType" stDoorType[1]
	values "iDoorType" DOOR_TYPE_SIDEHUNG
endif
if GLOB_MODPAR_NAME = "doorType" then
	iDoorType = 2
	for i = 1 to vardim1(stDoorType)
		if doorType = stDoorType[i] then	iDoorType = 3-i
	next i
	parameters iDoorType = iDoorType
else
	iDoorType = max(min(iDoorType,2),0)
	parameters doorType = stDoorType[3-iDoorType]
endif

if not(bDoor) then
	hideparameter "nDoor", "doorStyle", "iDoorStyle", "iDoorType", "doorThickness", "doorFrameWidth", "mullionWidth", "nVerticalMullion", "nHorizontalMullion", "bBevel", "doorAngle3D", "doorType", "bKnob"
	lock "nDoor", "doorStyle", "iDoorStyle", "iDoorType", "doorThickness", "doorFrameWidth", "mullionWidth", "nVerticalMullion", "nHorizontalMullion", "bBevel", "doorAngle3D", "doorType", "bKnob"

	hideparameter "matDoorFrame", "matDoorGlass", "matDoorMirror", "matDoorDecor1", "matDoorDecor2"
	lock "matDoorFrame", "matDoorGlass", "matDoorMirror", "matDoorDecor1", "matDoorDecor2"

	hideparameter	"gs_knob_type_m", "knob_pl_x", "knob_pl_y", "gs_knob_p", "gs_knob_p_m", "knob_size", "gs_knob_mat"
	lock			"gs_knob_type_m", "knob_pl_x", "knob_pl_y", "gs_knob_p", "gs_knob_p_m", "knob_size", "gs_knob_mat"
endif

! ----- Door Number -----
if iCabinetForm = SHAPE_SQUARE then
	tempDoorNumber = 1
	if iDoorType = DOOR_TYPE_SLIDING then tempDoorNumber = 2
	values "nDoor" range [tempDoorNumber, ]
else
	if iCabinetForm = SHAPE_CORNER_C then
		values "nDoor" range [1, 2]
	else
		values "nDoor" 1
		lock "nDoor"
		hideparameter "nDoor"
	endif
endif

if GLOB_MODPAR_NAME = "doorType" | GLOB_MODPAR_NAME = "iDoorType" then
	if nDoor = 1 & (iDoorType = DOOR_TYPE_SLIDING) then
		nDoor = 2
		parameters nDoor = nDoor
	endif
endif

! ----- Door and Knob Parameters Macro -----
call "fa_warddoortyp" parameters all bNotMacro = 0,
									gs_full_edit = 1,
									doorWidth=doorFullWidth/nDoor,
									bBevel = bBevel,
									doorHeight=doorHeight

! ==============================================================================
! Door Opening
! ==============================================================================
openingRange = 0.9
doorTempWidth = doorFullWidth/nDoor

knob_w = 0
if gs_knob_type_m >=1 & gs_knob_type_m <=3 then knob_w= 0.02
if gs_knob_type_m >=4 & gs_knob_type_m <=8 then
	if gs_knob_p_m = 1 then	! Horizontal
		knob_w= 0.1
	else
		knob_w= 0.012
	endif
endif

minLengthKnob = knob_pl_x + knob_w
slidingRange = 1 - (minLengthKnob/doorTempWidth)

if GLOB_MODPAR_NAME = "nDoor" then
	for kk = 1 to nDoor
		openingDoor[kk] = 0
		openingDoorLength[kk] = 0
		parameters openingDoorLength[kk] = openingDoorLength[kk], openingDoor[kk] = openingDoor[kk]
	next kk
endif

if GLOB_MODPAR_NAME = "openingDoor" then
	for kk = 1 to nDoor
		if (ceil(nDoor/2)<>nDoor/2)  and (kk = 2 and nDoor>2) then
			if openingDoor[kk] > openingRange*100 then
				openingDoor[kk] = openingRange*100
				parameters openingDoor[kk] = openingDoor[kk]
			endif

			if openingDoor[kk] < -openingRange*100 then
				openingDoor[kk] = -openingRange*100
				parameters openingDoor[kk] = openingDoor[kk]
			endif
		else
			if openingDoor[kk] > openingRange*100 then
				openingDoor[kk] = openingRange*100
				parameters openingDoor[kk] = openingDoor[kk]
			endif

			if openingDoor[kk] < 0 then
				openingDoor[kk] = 0
				parameters openingDoor[kk] = openingDoor[kk]
			endif
		endif

		openingDoorLength[kk] = doorTempWidth * (openingDoor[kk]/100)
		parameters openingDoorLength[kk] = openingDoorLength[kk]
	next kk
else
	! Comment:
	! odd Door Number 	- 1, 2, 3, A, B, A, B ...
	! even Door Number	- A, B, A, B, A, B, A ...

	for kk = 1 to nDoor

		if iDoorType = DOOR_TYPE_SLIDING then
			if (ceil(nDoor/2)<>nDoor/2)  & nDoor > 2 & (kk >= 1 & kk <= 3) then
				! Maximum Range
				if kk = 1 then	! (1)
					if openingDoorLength[kk] > (doorTempWidth * slidingRange + openingDoorLength[kk+1]) then
						openingDoorLength[kk] = (doorTempWidth * slidingRange + openingDoorLength[kk+1])
						parameters openingDoorLength[kk] = openingDoorLength[kk]
					endif
				endif
				if kk = 2 then	! (2)
					if openingDoorLength[kk] > (doorTempWidth * slidingRange - openingDoorLength[kk+1]) then
						openingDoorLength[kk] = (doorTempWidth * slidingRange - openingDoorLength[kk+1])
						parameters openingDoorLength[kk] = openingDoorLength[kk]
					endif
				endif
				if kk = 3 then	! (3)
					if openingDoorLength[kk] > (doorTempWidth * slidingRange - openingDoorLength[kk-1]) then
						openingDoorLength[kk] = (doorTempWidth * slidingRange - openingDoorLength[kk-1])
						parameters openingDoorLength[kk] = openingDoorLength[kk]
					endif
				endif
				! Minimum Range
				if kk = 2 then	! (2)
					if openingDoorLength[kk] < -(doorTempWidth * slidingRange - openingDoorLength[kk-1]) then
						openingDoorLength[kk] = -(doorTempWidth * slidingRange - openingDoorLength[kk-1])
						parameters openingDoorLength[kk] = openingDoorLength[kk]
					endif
				else	! (1), (3)
					if openingDoorLength[kk] < eps then
						openingDoorLength[kk] = 0
						parameters openingDoorLength[kk] = openingDoorLength[kk]
					endif
				endif
			else
				! Maximum Range
				if ceil(kk/2)<>kk/2 exor (ceil(nDoor/2)<>nDoor/2)  then ! (A)
					if openingDoorLength[kk] > (doorTempWidth * slidingRange - openingDoorLength[kk+1]) then
						openingDoorLength[kk] = (doorTempWidth * slidingRange - openingDoorLength[kk+1])
						parameters openingDoorLength[kk] = openingDoorLength[kk]
					endif
				else	! (B)
					if openingDoorLength[kk] > (doorTempWidth * slidingRange - openingDoorLength[kk-1]) then
						openingDoorLength[kk] = (doorTempWidth * slidingRange - openingDoorLength[kk-1])
						parameters openingDoorLength[kk] = openingDoorLength[kk]
					endif
				endif
				! Minimum Range (A), (B)
				if openingDoorLength[kk] < 0 then
					openingDoorLength[kk] = 0
					parameters openingDoorLength[kk] = openingDoorLength[kk]
				endif
			endif
		else
			if (ceil(nDoor/2)<>nDoor/2)  and (kk = 2 and nDoor>2) then
				if openingDoorLength[kk] > doorTempWidth*slidingRange then
					openingDoorLength[kk] = doorTempWidth*slidingRange
					parameters openingDoorLength[kk] = openingDoorLength[kk]
				endif

				if openingDoorLength[kk] < -doorTempWidth*slidingRange then
					openingDoorLength[kk] = -doorTempWidth*slidingRange
					parameters openingDoorLength[kk] = openingDoorLength[kk]
				endif
			else
				if openingDoorLength[kk] > doorTempWidth*slidingRange then
					openingDoorLength[kk] = doorTempWidth*slidingRange
					parameters openingDoorLength[kk] = openingDoorLength[kk]
				endif

				if openingDoorLength[kk] < 0 then
					openingDoorLength[kk] = 0
					parameters openingDoorLength[kk] = openingDoorLength[kk]
				endif
			endif
		endif

		openingDoor[kk] = (openingDoorLength[kk]/doorTempWidth)*100
		parameters openingDoor[kk] = openingDoor[kk]
	next kk
endif



! ==============================================================================
! Knob
! ==============================================================================
! ----- Knob Style-----
values{2} "gs_knob_type_m"	KNOB_STYLE_1,	`Стиль 1`,
							KNOB_STYLE_2,	`Стиль 2`,
							KNOB_STYLE_3,	`Стиль 3`,
							KNOB_STYLE_4,	`Стиль 4`,
							KNOB_STYLE_5,	`Стиль 5`,
							KNOB_STYLE_6,	`Стиль 6`,
							KNOB_STYLE_7,	`Стиль 7`,
							KNOB_STYLE_8,	`Стиль 8`

! ----- Knob Placing-----
values "gs_knob_p_m" 0,1
values "gs_knob_p" stKnobPlacing
if GLOB_MODPAR_NAME = "gs_knob_p" then
	gs_knob_type_m = KNOB_STYLE_1
	for i = 1 to vardim1(stKnobPlacing)
		if gs_knob_p = stKnobPlacing[i] then gs_knob_p_m = i-1
	next i
	parameters gs_knob_p_m = gs_knob_p_m
else
	gs_knob_p_m = max(min(gs_knob_p_m,1),0)
	parameters gs_knob_p = stKnobPlacing[gs_knob_p_m+1]
endif

if gs_knob_type_m > 0 and gs_knob_type_m < 4 or not(bKnob) then
	hideparameter	"knob_size", "gs_knob_p", "gs_knob_p_m"
	lock			"knob_size", "gs_knob_p", "gs_knob_p_m"
endif

! ==============================================================================
! Interior Fittings
! ==============================================================================
! ----- Interior Fittings -----
if iCabinetForm = SHAPE_SQUARE then
	values "iFunctions" 0,1,2,3
	values "gs_functions" stInteriorType
else
	values "iFunctions" 0,2,3
	values "gs_functions" stInteriorType[1], stInteriorType[2], stInteriorType[4]
endif
if GLOB_MODPAR_NAME = "gs_functions" then
	for i = 1 to vardim1(stInteriorType)
		if gs_functions = stInteriorType[i] then iFunctions = 4 - i
	next i
	parameters iFunctions = iFunctions
else
	iFunctions = max(min(iFunctions,3),0)
	parameters gs_functions = stInteriorType[4-iFunctions]
endif

! ----- Shelves and Hangers -----
values "nShelves" range [1, ]
values "nHangers" range [1, 2]
if iFunctions = INTERIOR_NONE then
	lock "nHangers", "nShelves", "gs_hanger_mat", "gs_shelf_mat"
	hideparameter "nHangers", "nShelves", "gs_hanger_mat", "gs_shelf_mat"
else
	if iFunctions = INTERIOR_SHELVES then
		lock "nHangers", "gs_hanger_mat"
		hideparameter "nHangers", "gs_hanger_mat"
	endif
	if iFunctions = INTERIOR_HANGER then
		lock "nShelves", "gs_shelf_mat"
		hideparameter "nShelves", "gs_shelf_mat"
	endif
endif


! ==============================================================================
! Cornice
! ==============================================================================
! ----- Cornice Style -----

values{2} "gs_cornice_type_m"	CORN_STYLE_1,		`Стиль 1`,
								CORN_STYLE_2,		`Стиль 2`,
								CORN_STYLE_3,		`Стиль 3`,
								CORN_STYLE_4,		`Стиль 4`


! ----- Cornice Overhang-----
values "gs_lining" stCorniceOverhang
values "gs_lining_m" 1,2,3,4
if GLOB_MODPAR_NAME = "gs_lining" then
	gs_lining_m = 0
	for i = 1 to vardim1(stCorniceOverhang)
		if gs_lining = stCorniceOverhang[i] then gs_lining_m= 5-i
	next i
	parameters gs_lining_m = gs_lining_m
else
	gs_lining_m = max(min(gs_lining_m,4),1)
	parameters gs_lining = stCorniceOverhang[5-gs_lining_m]
endif


if not(bCornice) then
	hideparameter "gs_cornice_type_m", "gs_lining", "gs_lining_m", "cot", "cooh", "gs_cornice_mat"
	lock "gs_cornice_type_m", "gs_lining", "gs_lining_m", "cot", "cooh", "gs_cornice_mat"
else

	values "cot" range (0,)
	if gs_cornice_type_m=CORN_STYLE_1  then values "cooh" range [0,)
	if gs_cornice_type_m=CORN_STYLE_2 or gs_cornice_type_m=CORN_STYLE_3  then values "cooh" range [1/2*cot,)
	if gs_cornice_type_m=CORN_STYLE_4 then values "cooh" range [3/4*cot,)

endif


! ==============================================================================
! Leg
! ==============================================================================
! ----- Base Style-----
values{2} "gs_leg_type_m" 	LEG_STYLE_1, `Стиль 1`,
							LEG_STYLE_2, `Стиль 2`,
							LEG_STYLE_3, `Стиль 3`,
							LEG_STYLE_4, `Стиль 4`,
							LEG_STYLE_5, `Стиль 5`,
							LEG_STYLE_6, `Стиль 6`


values "leg_h" range [0, mindist]
values "leg_w" range (0, min(a/2, b/2))

if not(bBase) then
	hideparameter "gs_leg_type_m", "gs_leg_mat", "leg_h", "leg_w"
	lock "gs_leg_type_m", "gs_leg_mat", "leg_h", "leg_w"
endif


! ==============================================================================
! 2D Style
! ==============================================================================
! ----- 2D Symbol Type -----
if not(bDoor) then
	if iCabinetForm = SHAPE_SQUARE then
		! Enable only Symbol Type without door and drawer symbol
		iSymbolStyleEnable = 2**1 + 2**2 + 2**3
	else
		! Enable only Symbol Type without door, drawer and cabinet symbol
		iSymbolStyleEnable = 2**1
	endif
else
	if iCabinetForm = SHAPE_SQUARE then
		if iDoorType = DOOR_TYPE_SLIDING then
			! Enable only Symbol Types without Door Opening
			iSymbolStyleEnable = 2**1 + 2**2 + 2**3 + 2**4 + 2**5 + 2**6 + 2**7
		else
			! Enable all Symbol Types
			iSymbolStyleEnable = 2**1 + 2**2 + 2**3 + 2**4 + 2**5 + 2**6 + 2**7 + 2**8 + 2**9
		endif
	else
		! Enable only Symbol Types without symbols drawn in the cabinet
		iSymbolStyleEnable = 2**1 + 2**6 + 2**7 + 2**8 + 2**9
	endif
endif

call "cabSymbolType" parameters 	iSymbolStyle = iSymbolStyle,
									iSymbolStyleEnable = iSymbolStyleEnable

lock "openingAngle2D"
hideparameter "openingAngle2D"

if iFunctions = INTERIOR_NONE | iFunctions = INTERIOR_SHELVES |\
 	iSymbolStyle = 2 |\ 
 	iSymbolStyle = 3 |\ 
 	iSymbolStyle = 4 |\ 
	iSymbolStyle = 5 then				! Lock Hanger Symbol in case of symbols drawn in the cabinet

	hideparameter "bHangers"
	lock "bHangers"
endif

if gs_cont_pen=0 then parameters gs_cont_pen=4
if gs_fill_pen=0 then parameters gs_fill_pen=19


! ==============================================================================
! Minimal Space
! ==============================================================================
values "MSFront" range [0, ]


! ==============================================================================
! 3D Representation
! ==============================================================================
! ----- 3D Representation -----
values "gs_detlevel_3D" stDetlevel3D		! Off(0), Simple(1), Detailed(2)
values "gs_detlevel_3D_m" 0, 1, 2
if GLOB_MODPAR_NAME = "gs_detlevel_3D" then
	gs_detlevel_3D_m = 2
	for i = 1 to vardim1(stDetlevel3D)
		if gs_detlevel_3D = stDetlevel3D[i] then	gs_detlevel_3D_m = 3-i
	next i
	parameters gs_detlevel_3D_m = gs_detlevel_3D_m
else
	gs_detlevel_3D_m = max(min(gs_detlevel_3D_m,2),0)
	parameters gs_detlevel_3D = stDetlevel3D[3-gs_detlevel_3D_m]
endif

values "gs_resol" range [3, )
if gs_resol<3 then parameters gs_resol=3

if gs_detlevel_3D_m = 0 then
	lock "gs_shadow", "gs_resol"
	hideparameter "gs_shadow", "gs_resol"
endif

if gs_detlevel_3D_m = 1 then
	lock "gs_resol"
	hideparameter "gs_resol"
endif


! =============================================================================
! UI Support
! =============================================================================

if GLOB_UI_BUTTON_ID < 0 then
	parameters gs_ui_current_page = - GLOB_UI_BUTTON_ID
endif

