
if not(gs_shadow) then shadow off
if gs_detlevel_3D_m = 2 then	! Detailed
	resol gs_resol
else
	if gs_detlevel_3D_m = 1 then ! Simple
		resol 3
		gs_resol = 6
	else
		END	! Off
	endif
endif

nDrawerTempX = 1
pen gs_cont_pen


!-----Definitions-----
unID = 1

if not(bKnob) then knob_d=0
if gs_knob_type_m=KNOB_STYLE_1 then knob_d=0.025
if gs_knob_type_m=KNOB_STYLE_2 then knob_d=0.025
if gs_knob_type_m=KNOB_STYLE_3 then knob_d=0.03
if gs_knob_type_m=KNOB_STYLE_4 then knob_d=0.024
if gs_knob_type_m=KNOB_STYLE_5 then knob_d=0.025
if gs_knob_type_m=KNOB_STYLE_6 then knob_d=0.025
if gs_knob_type_m=KNOB_STYLE_7 then knob_d=0.03
if gs_knob_type_m=KNOB_STYLE_8 then knob_d=0.03


! ==============================================================================
! Hotspots
! ==============================================================================
if iCabinetForm = SHAPE_SQUARE then
	call "Resize_A_B_ZZYZX" parameters ALL

	hotspot a/2, b, ZZYZX, unID : unID = unID + 1
	hotspot a/2, b, 0, unID 	: unID = unID + 1

	!-----Base Height-----
	if bBase then
		hotspot  0, 0,  0,    unID, leg_h, 1+128				: unID=unID+1
		hotspot  0, 0, -1, 	  unID, leg_h, 3					: unID=unID+1
		hotspot  0, 0, leg_h, unID, leg_h, 2					: unID=unID+1

		hotspot  0, b,  0,    unID, leg_h, 1+128				: unID=unID+1
		hotspot  0, b, -1, 	  unID, leg_h, 3					: unID=unID+1
		hotspot  0, b, leg_h, unID, leg_h, 2					: unID=unID+1

		hotspot  a, b,  0,    unID, leg_h, 1+128				: unID=unID+1
		hotspot  a, b, -1, 	  unID, leg_h, 3					: unID=unID+1
		hotspot  a, b, leg_h, unID, leg_h, 2					: unID=unID+1

		hotspot  a, 0,  0,    unID, leg_h, 1+128				: unID=unID+1
		hotspot  a, 0, -1, 	  unID, leg_h, 3					: unID=unID+1
		hotspot  a, 0, leg_h, unID, leg_h, 2					: unID=unID+1
	endif

	!-----divisionHeight-----
	hotspot  0, 0,  0,    unID, divisionHeight, 1+128				: unID=unID+1
	hotspot  0, 0, -1, 	  unID, divisionHeight, 3					: unID=unID+1
	hotspot  0, 0, divisionHeight, unID, divisionHeight, 2			: unID=unID+1

	hotspot  0, b,  0,    unID, divisionHeight, 1+128				: unID=unID+1
	hotspot  0, b, -1, 	  unID, divisionHeight, 3					: unID=unID+1
	hotspot  0, b, divisionHeight, unID, divisionHeight, 2			: unID=unID+1

	hotspot  a, b,  0,    unID, divisionHeight, 1+128				: unID=unID+1
	hotspot  a, b, -1, 	  unID, divisionHeight, 3					: unID=unID+1
	hotspot  a, b, divisionHeight, unID, divisionHeight, 2			: unID=unID+1

	hotspot  a, 0,  0,    unID, divisionHeight, 1+128				: unID=unID+1
	hotspot  a, 0, -1, 	  unID, divisionHeight, 3					: unID=unID+1
	hotspot  a, 0, divisionHeight, unID, divisionHeight, 2			: unID=unID+1

else
	!-----Plan-----

	hotspot  0, B, 0, unID, A, 1+256					: unID=unID+1
	hotspot -1, B, 0, unID, A, 3						: unID=unID+1
	hotspot  A, B, 0, unID, A, 2						: unID=unID+1

	hotspot  0,  0, 0, unID, B, 1+256					: unID=unID+1
	hotspot  0, -1, 0, unID, B, 3						: unID=unID+1
	hotspot  0,  B, 0, unID, B, 2						: unID=unID+1

	hotspot  0,  0, 0, unID, sideDepth1, 1+128			: unID=unID+1
	hotspot -1,  0, 0, unID, sideDepth1, 3				: unID=unID+1
	hotspot  sideDepth1,  0, 0, unID, sideDepth1, 2		: unID=unID+1

	hotspot  A,  B, 0, unID, sideDepth2, 1+128			: unID=unID+1
	hotspot  A,  B+1, 0, unID, sideDepth2, 3			: unID=unID+1
	hotspot  A,  B-sideDepth2, 0, unID, sideDepth2, 2	: unID=unID+1

	if iCabinetForm = SHAPE_CORNER_L then
		!hotspot  sideDepth1,  B-sideDepth2, 0, unID	: unID=unID+1

		hotspot  0,  B-sideDepth2, 0, unID, sideDepth1, 1+128		: unID=unID+1
		hotspot -1,  B-sideDepth2, 0, unID, sideDepth1, 3			: unID=unID+1
		hotspot  sideDepth1,  B-sideDepth2, 0, unID, sideDepth1, 2	: unID=unID+1

		hotspot  sideDepth1,  B, 0, unID, sideDepth2, 1+128			: unID=unID+1
		hotspot  sideDepth1,  B+1, 0, unID, sideDepth2, 3			: unID=unID+1
		hotspot  sideDepth1,  B-sideDepth2, 0, unID, sideDepth2, 2	: unID=unID+1
	endif

	!-----ZZYZX-----
	hotspot  0, 0,  0,    unID, ZZYZX, 1+128				: unID=unID+1
	hotspot  0, 0, -1, 	  unID, ZZYZX, 3					: unID=unID+1
	hotspot  0, 0, ZZYZX, unID, ZZYZX, 2					: unID=unID+1

	hotspot  0, b,  0,    unID, ZZYZX, 1+128				: unID=unID+1
	hotspot  0, b, -1, 	  unID, ZZYZX, 3					: unID=unID+1
	hotspot  0, b, ZZYZX, unID, ZZYZX, 2					: unID=unID+1

	hotspot  a, b,  0,    unID, ZZYZX, 1+128				: unID=unID+1
	hotspot  a, b, -1, 	  unID, ZZYZX, 3					: unID=unID+1
	hotspot  a, b, ZZYZX, unID, ZZYZX, 2					: unID=unID+1

	hotspot  sideDepth1, 0,  0,    unID, ZZYZX, 1+128		: unID=unID+1
	hotspot  sideDepth1, 0, -1, unID, ZZYZX, 3				: unID=unID+1
	hotspot  sideDepth1, 0, ZZYZX, unID, ZZYZX, 2			: unID=unID+1

	hotspot  a, B-sideDepth2,  0,    unID, ZZYZX, 1+128		: unID=unID+1
	hotspot  a, B-sideDepth2, -1,    unID, ZZYZX, 3			: unID=unID+1
	hotspot  a, B-sideDepth2, ZZYZX, unID, ZZYZX, 2			: unID=unID+1

	if iCabinetForm = SHAPE_CORNER_L then
		hotspot  sideDepth1, B-sideDepth2,  0,    unID, ZZYZX, 1+128	: unID=unID+1
		hotspot  sideDepth1, B-sideDepth2, -1,    unID, ZZYZX, 3		: unID=unID+1
		hotspot  sideDepth1, B-sideDepth2, ZZYZX, unID, ZZYZX, 2		: unID=unID+1
	endif


	!-----Base Height-----
	if bBase then
		hotspot  0, 0,  0,    unID, leg_h, 1+128				: unID=unID+1
		hotspot  0, 0, -1, 	  unID, leg_h, 3					: unID=unID+1
		hotspot  0, 0, leg_h, unID, leg_h, 2					: unID=unID+1

		hotspot  0, b,  0,    unID, leg_h, 1+128				: unID=unID+1
		hotspot  0, b, -1, 	  unID, leg_h, 3					: unID=unID+1
		hotspot  0, b, leg_h, unID, leg_h, 2					: unID=unID+1

		hotspot  a, b,  0,    unID, leg_h, 1+128				: unID=unID+1
		hotspot  a, b, -1, 	  unID, leg_h, 3					: unID=unID+1
		hotspot  a, b, leg_h, unID, leg_h, 2					: unID=unID+1

		hotspot  sideDepth1, 0,  0,    unID, leg_h, 1+128		: unID=unID+1
		hotspot  sideDepth1, 0, -1, unID, leg_h, 3				: unID=unID+1
		hotspot  sideDepth1, 0, leg_h, unID, leg_h, 2			: unID=unID+1

		hotspot  a, B-sideDepth2,  0,    unID, leg_h, 1+128		: unID=unID+1
		hotspot  a, B-sideDepth2, -1,    unID, leg_h, 3			: unID=unID+1
		hotspot  a, B-sideDepth2, leg_h, unID, leg_h, 2			: unID=unID+1

		if iCabinetForm = SHAPE_CORNER_L then
			hotspot  sideDepth1, B-sideDepth2,  0,    unID, leg_h, 1+128	: unID=unID+1
			hotspot  sideDepth1, B-sideDepth2, -1,    unID, leg_h, 3		: unID=unID+1
			hotspot  sideDepth1, B-sideDepth2, leg_h, unID, leg_h, 2		: unID=unID+1
		endif
	endif

	!-----divisionHeight-----
	hotspot  0, 0,  0,    unID, divisionHeight, 1+128				: unID=unID+1
	hotspot  0, 0, -1, 	  unID, divisionHeight, 3					: unID=unID+1
	hotspot  0, 0, divisionHeight, unID, divisionHeight, 2			: unID=unID+1

	hotspot  0, b,  0,    unID, divisionHeight, 1+128				: unID=unID+1
	hotspot  0, b, -1, 	  unID, divisionHeight, 3					: unID=unID+1
	hotspot  0, b, divisionHeight, unID, divisionHeight, 2			: unID=unID+1

	hotspot  a, b,  0,    unID, divisionHeight, 1+128				: unID=unID+1
	hotspot  a, b, -1, 	  unID, divisionHeight, 3					: unID=unID+1
	hotspot  a, b, divisionHeight, unID, divisionHeight, 2			: unID=unID+1

	hotspot  sideDepth1, 0,  0,    unID, divisionHeight, 1+128		: unID=unID+1
	hotspot  sideDepth1, 0, -1, unID, divisionHeight, 3				: unID=unID+1
	hotspot  sideDepth1, 0, divisionHeight, unID, divisionHeight, 2	: unID=unID+1

	hotspot  a, B-sideDepth2,  0,    unID, divisionHeight, 1+128		: unID=unID+1
	hotspot  a, B-sideDepth2, -1,    unID, divisionHeight, 3			: unID=unID+1
	hotspot  a, B-sideDepth2, divisionHeight, unID, divisionHeight, 2	: unID=unID+1

	if iCabinetForm = SHAPE_CORNER_L then
		hotspot  sideDepth1, B-sideDepth2,  0,    unID, divisionHeight, 1+128			: unID=unID+1
		hotspot  sideDepth1, B-sideDepth2, -1,    unID, divisionHeight, 3				: unID=unID+1
		hotspot  sideDepth1, B-sideDepth2, divisionHeight, unID, divisionHeight, 2		: unID=unID+1
	endif
endif


! ==============================================================================
! Base
! ==============================================================================
bUnder = 0
bAbove = 0
if iCabinetForm = SHAPE_SQUARE then
	add a/2, b, 0

	! ----- Credenza -----
	if bUnderDrawerOrDoor < bAboveDrawerOrDoor then
		bUnder = 1
	else
		bAbove = 1
	endif
	cutpolya 4, 1, divisionHeight+thickness*bUnder,
		-a/2, -b, 15,
		-a/2,  0, 15,
		 a/2,  0, 15,
		 a/2, -b, 15,
		 0, 0, divisionHeight+thickness*bUnder

	CALL "fa_cabinet_credenza" PARAMETERS ALL B=B-doorThickness*bUnderDrawerOrDoor,
											ZZYZX = divisionHeight+eps+thickness,
											side_overhang = cooh,
											cot = 0
	cutend

	cutpolya 4, 1, -divisionHeight-thickness*bUnder,
		-a/2, -b, 15,
		-a/2,  0, 15,
		 a/2,  0, 15,
		 a/2, -b, 15,
		 0, 0, -divisionHeight-thickness*bUnder
	addz divisionHeight-eps-thickness*bUnder
	CALL "fa_cabinet_credenza" PARAMETERS ALL B=B-doorThickness*bAboveDrawerOrDoor,
												ZZYZX = ZZYZX-divisionHeight+eps+thickness*bUnder,
												side_overhang = cooh,
												leg_h = 0
	del 1
	cutend

	lin_ -A/2+corOverhangL, -B+cooh+doorThickness*bUnderDrawerOrDoor, divisionHeight+thickness*bUnder, -A/2+corOverhangL, -B+cooh+doorThickness*bAboveDrawerOrDoor, divisionHeight+thickness*bUnder
	lin_ A/2-corOverhangR, -B+cooh+doorThickness*bUnderDrawerOrDoor, divisionHeight+thickness*bUnder, A/2-corOverhangR, -B+cooh+doorThickness*bAboveDrawerOrDoor, divisionHeight+thickness*bUnder

	! ----- Cornices -----
	if bCornice then
		mulx -1
		addz zzyzx-cot
		CALL "fa_cornicetyp" PARAMETERS ALL side_overhang = cooh
		del 2
	endif

	! ----- Legs -----
	if bBase then
	  CALL "fa_cabinet_legtyp" PARAMETERS A = A,
										  B = B-doorThickness*bUnderDrawerOrDoor,
										  iCabinetForm = iCabinetForm,
										  gs_detlevel_3D_m = gs_detlevel_3D_m,
										  gs_leg_type_m = gs_leg_type_m,
										  leg_h = leg_h,
										  leg_w = leg_w,
										  cooh = cooh,
										  side_overhang = cooh,
										  gs_resol = gs_resol,
										  gs_leg_mat = gs_leg_mat,
										  gs_cont_pen = gs_cont_pen,
										  gs_lining_m = gs_lining_m
	endif

	del 1
else
	add 0, b, 0
	! ----- Cornices -----
	if bCornice then
		addz zzyzx-cot
		CALL "fa_cornicetyp" PARAMETERS ALL side_overhang = cooh
		del 1
	endif

	! ----- Credenza -----
	if bUnderDrawerOrDoor < bAboveDrawerOrDoor then
		bUnder = 1
	else
		bAbove = 1
	endif
	cutpolya 4, 1, divisionHeight+thickness*bUnder,
		0, 0, 15,
		0, -b, 15,
		a, -b, 15,
		a, 0, 15,
		0, 0, divisionHeight+thickness*bUnder
	CALL "fa_cabinet_credenza" PARAMETERS ALL sideDepth1=sideDepth1-doorThickness*bUnderDrawerOrDoor,
											  sideDepth2=sideDepth2-doorThickness*bUnderDrawerOrDoor,
											  ZZYZX = divisionHeight+eps+thickness,
											  cot = 0,
											  side_overhang = cooh,
											  boardThk = doorThickness
	cutend

	cutpolya 4, 1, -divisionHeight-thickness*bUnder,
		0, 0, 15,
		0, -b, 15,
		a, -b, 15,
		a, 0, 15,
		0, 0, -divisionHeight-thickness*bUnder
	addz divisionHeight-eps-thickness*bUnder
	CALL "fa_cabinet_credenza" PARAMETERS ALL sideDepth1=sideDepth1-doorThickness*bAboveDrawerOrDoor,
											  sideDepth2=sideDepth2-doorThickness*bAboveDrawerOrDoor,
											  ZZYZX = ZZYZX-divisionHeight+eps+thickness*bUnder,
											  side_overhang = cooh,
											  leg_h = 0,
											  boardThk = doorThickness
	del 1
	cutend

	lin_ A-corOverhangR, -sideDepth2+cooh+doorThickness*bUnderDrawerOrDoor, divisionHeight+thickness*bUnder, A-corOverhangR, -sideDepth2+cooh+doorThickness*bAboveDrawerOrDoor, divisionHeight+thickness*bUnder
	lin_ sideDepth1-cooh-doorThickness*bAboveDrawerOrDoor, -B+corOverhangR, divisionHeight+thickness*bUnder, sideDepth1-cooh-doorThickness*bUnderDrawerOrDoor, -B+corOverhangR, divisionHeight+thickness*bUnder


	! ----- Legs -----
	CALL "fa_cabinet_legtyp" PARAMETERS A = A,
										B = B,
										iCabinetForm = iCabinetForm,
										sideDepth1 = sideDepth1-doorThickness*bUnderDrawerOrDoor,
										sideDepth2 = sideDepth2-doorThickness*bUnderDrawerOrDoor,
										gs_detlevel_3D_m = gs_detlevel_3D_m,
										gs_leg_type_m = gs_leg_type_m,
										leg_h = leg_h,
										leg_w = leg_w,
										cooh = cooh,
										side_overhang = cooh,
										gs_resol = gs_resol,
										gs_leg_mat = gs_leg_mat,
										gs_cont_pen = gs_cont_pen,
										gs_lining_m = gs_lining_m
	del 1
endif


! ==============================================================================
! Interior Fittings
! ==============================================================================
if iFunctions <> INTERIOR_NONE and iFrontAbove <> FRONT_DRAWER then
	addz divisionHeight

	tempInteriorHeight = zzyzx-cot-divisionHeight-2*thickness
	nTempShelves = nShelves
	shelvesDistance=(tempInteriorHeight+thickness)/(nTempShelves+1)
	nTempHangers = nHangers
	hangerDistance=(tempInteriorHeight-0.1)/(nHangers)

	front = 1
	iTempDoorType = iFrontAbove
	tempFunctions = iFunctions
	bDrawerOrDoor = bAboveDrawerOrDoor
	tempSideDepth1 = sideDepth1 - cooh - doorThickness*bDrawerOrDoor
	tempSideDepth2 = sideDepth2 - cooh - doorThickness*bDrawerOrDoor

	gosub "Interior"

	del 1
endif

if iInteriorUnder <> INTERIOR_NONE and iFrontUnder <> FRONT_DRAWER then
	addz leg_h

	tempInteriorHeight = divisionHeight-leg_h-thickness
	nTempShelves = nShelvesUnder
	shelvesDistance=(tempInteriorHeight+thickness)/(nTempShelves+1)
	nTempHangers = nHangersUnder
	hangerDistance=(tempInteriorHeight-0.1)/(nHangers)

	front = 2
	iTempDoorType = iFrontUnder
	tempFunctions = iInteriorUnder
	bDrawerOrDoor = bUnderDrawerOrDoor
	tempSideDepth1 = sideDepth1 - cooh - doorThickness*bDrawerOrDoor
	tempSideDepth2 = sideDepth2 - cooh - doorThickness*bDrawerOrDoor

	gosub "Interior"

	del 1
endif


! ==============================================================================
! Door Settings
! ==============================================================================
if iFrontAbove = FRONT_SLIDING or iFrontAbove = FRONT_DOOR then
	addz divisionHeight + thickness/2*not(bUnderDrawerOrDoor)*(iFrontAbove = FRONT_DOOR)

	front				= 1
	iTempDoorType		= iFrontAbove
	bDrawerOrDoor		= bAboveDrawerOrDoor
	tempbKnob			= bKnobAbove
	iTempKnobType		= iKnobTypeAbove
	tempKnobPozX		= xKnobPozAbove
	tempKnobPozY		= yKnobPozAbove
	tempKnobSize		= knobSizeAbove
	tempnKnobDrawers	= nKnobDrawersAbove
	tempxDrawerKnobPos	= xDrawerKnobPosAbove
	tempzDrawerKnobPos	= zDrawerKnobPosAbove
	tempmatKnob			= matKnobAbove
	gosub "Doors"

	del 1
endif

if iFrontUnder = FRONT_SLIDING or iFrontUnder = FRONT_DOOR then
	addz leg_h

	front				= 2
	iTempDoorType		= iFrontUnder
	bDrawerOrDoor		= bUnderDrawerOrDoor
	tempbKnob			= bKnob
	iTempKnobType		= gs_knob_type_m
	tempKnobPozX		= knob_pl_x
	tempKnobPozY		= knob_pl_y
	tempKnobSize		= knob_size
	tempnKnobDrawers	= nKnobDrawers
	tempxDrawerKnobPos	= xDrawerKnobPos
	tempzDrawerKnobPos	= zDrawerKnobPos
	tempmatKnob			= gs_knob_mat
	gosub "Doors"

	del 1
endif

! ==============================================================================
! Drawer Settings
! ==============================================================================
if iFrontAbove = FRONT_DRAWER then
	addz divisionHeight + thickness/2*not(bUnderDrawerOrDoor)

	front				= 1
	iTempDoorType		= iFrontAbove
	bDrawerOrDoor		= bAboveDrawerOrDoor
	tempbKnob			= bKnobAbove
	iTempKnobType		= iKnobTypeAbove
	tempKnobPozX		= xKnobPozAbove
	tempKnobPozY		= yKnobPozAbove
	tempKnobSize		= knobSizeAbove
	tempnKnobDrawers	= nKnobDrawersAbove
	tempxDrawerKnobPos	= xDrawerKnobPosAbove
	tempzDrawerKnobPos	= zDrawerKnobPosAbove
	tempmatKnob			= matKnobAbove
	gosub "Drawers"

	del 1
endif

if iFrontUnder = FRONT_DRAWER  then
	addz leg_h

	front				= 2
	iTempDoorType		= iFrontUnder
	bDrawerOrDoor		= bUnderDrawerOrDoor
	tempbKnob			= bKnob
	iTempKnobType		= gs_knob_type_m
	tempKnobPozX		= knob_pl_x
	tempKnobPozY		= knob_pl_y
	tempKnobSize		= knob_size
	tempnKnobDrawers	= nKnobDrawers
	tempxDrawerKnobPos	= xDrawerKnobPos
	tempzDrawerKnobPos	= zDrawerKnobPos
	tempmatKnob			= gs_knob_mat
	gosub "Drawers"

	del 1
endif




! ======================================================================
! END
! ======================================================================

END

! ======================================================================
! SubRoutines
! ======================================================================
"Drawers":
	bMirrored = 0
	gs_full_edit = 1
	bFormMirror = 0
	bSliding = 0
	bAngleEdit = 0

	if iCabinetForm = SHAPE_SQUARE then

		nDrawerTempX = nDrawerHor
		nDrawerTempY = nDrawerVert
		tempDepth = B-cooh
		doorFullWidthTemp = doorFullWidth[front]
		doorStartX = 0
		doorStartY = doorThickness+cooh
		doorStartX = cabinetStartX+thickness/2
		gosub "doorCall"

	else

		if iCabinetForm = SHAPE_CORNER_L then
			tempSideDepth1 = sideDepth1 - cooh
			tempSideDepth2 = sideDepth2 - cooh
			nDrawerTempX = nDrawerHor
			nDrawerTempY = nDrawerVert
			tempDepth = tempSideDepth1
			doorFullWidthTemp = doorWidthB[front]-cornelLMin
			doorStartY = doorThickness+cooh
			doorStartX = cabinetStartX+thickness/2
			rotz 90
			mulx -1
			add	-doorStartX*2-doorWidthB[front]+cornelLMin , -sideDepth1, 0
			gosub "doorCall"
			del 3

			tempDepth = tempSideDepth2
			doorFullWidthTemp = doorWidthA[front]-cornelLMin
			doorStartX = sideDepth1-cooh+cornelLMin
			addy B-sideDepth2
			gosub "doorCall"
			del 1

			add sideDepth1-cooh, B-sideDepth2+cooh, thickness/2
			cprism_ gs_cabinet_mat, gs_cabinet_mat, gs_cabinet_mat,
				6, doorHeight[front],
				-doorThickness, doorThickness, 15,
				cornelLMin, doorThickness, 15,
				cornelLMin, 0, 15,
				0, 0, 15,
				0, -cornelLMin, 15,
				-doorThickness, -cornelLMin, 15
			gosub "textureVertical_01"
			del 1

		else
			tempSideDepth1 = sideDepth1 - cooh - doorThickness*bDrawerOrDoor
			tempSideDepth2 = sideDepth2 - cooh - doorThickness*bDrawerOrDoor
			tempDethL = tempSideDepth1/cos(90-beta)
			tempDethR = tempSideDepth2/cos(beta)
			nDrawerTempX = nDrawerHor
			nDrawerTempY = nDrawerVert
			tempDepth = min(tempDethL, tempDethR)-thickness
			doorFullWidthTemp = doorFullWidth[front]
			doorStartX = 0
			doorStartY = 0
			tempSideDepth1 = sideDepth1 - cooh - doorThickness*bDrawerOrDoor
			add tempSideDepth1,  cooh*(gs_lining_m=1 or gs_lining_m=3), 0
			rotz beta
			addx doorThickness/tan(beta)
			gosub "doorCall"
			del 3
		endif
	endif
return


"Doors":
	bMirrored = 0
	gs_full_edit = 1
	bFormMirror = 0
	bSliding = 0
	bAngleEdit = 1
	bDividedDoorWithMirror = 0

	if iCabinetForm = SHAPE_SQUARE then

		nDoorTemp = nDoor
		doorFullWidthTemp = doorFullWidth[front]
		doorStartX = 0
		doorStartY = doorThickness+cooh
		if iTempDoorType = FRONT_DOOR then doorStartX = cabinetStartX+thickness/2
		if iTempDoorType = FRONT_SLIDING  then doorStartX  = cabinetStartX+thickness
		gosub "doorCall"

	else

		if iCabinetForm = SHAPE_CORNER_L then
			bSliding				= 1
			_tempDoorAngle3D		= doorAngle3D
			_temp_bKnob				= bKnob

			! For Hotspot
			if not(bKnob) then knob_d=0
			if gs_knob_type_m=KNOB_STYLE_1 then knob_d=0.025
			if gs_knob_type_m=KNOB_STYLE_2 then knob_d=0.025
			if gs_knob_type_m=KNOB_STYLE_3 then knob_d=0.03
			if gs_knob_type_m=KNOB_STYLE_4 then knob_d=0.024
			if gs_knob_type_m=KNOB_STYLE_5 then knob_d=0.025
			if gs_knob_type_m=KNOB_STYLE_6 then knob_d=0.025
			if gs_knob_type_m=KNOB_STYLE_7 then knob_d=0.03
			if gs_knob_type_m=KNOB_STYLE_8 then knob_d=0.03

			! Door with Knob ------------------------------------------
			doorFullWidthTemp	= doorWidthB[front]
			nDoorTemp			= nDoor
			bAngleEdit			= 0
			doorStartX			= 0
			doorStartY			= 0
			rotz 90
			mulx -1

			! angle type editing, base hotspot
			hotspot -thickness/2 - knob_pl_x, -sideDepth1 + cooh - knob_d + 0.001, knob_pl_y + thickness/2, unID, doorAngle3D, 4+128 : unID=unID+1

			add	-B + sideDepth2 - cooh - doorThickness , -A + thickness/2, 0

			! angle type editing, center of angle
			! angle type editing, reference hotspot
			hotspot 0,					0,	knob_pl_y + thickness/2, unID, doorAngle3D, 6+512	: unID=unID+1
			hotspot 0,					0,	2*knob_pl_y + thickness/2, unID, doorAngle3D, 7		: unID=unID+1


			rotz -doorAngle3D
			add doorThickness, doorWidthA[front] + doorThickness + cooh - (abs(corOverhangR-cooh) > EPS)*cornelLMin,0
			doorAngle3D = 0

			gosub "doorCall"

			! angle type editing, moving hotspot
			hotspot doorFullWidthTemp - knob_pl_x,	-doorThickness -knob_d,	knob_pl_y + thickness/2, unID, doorAngle3D, 5 : unID=unID+1

			del 5

			! Door without Knob ------------------------------------------
			doorAngle3D			= _tempDoorAngle3D
			bAngleEdit			= 0
			gs_full_edit		= 0
			bKnob				= 0
			doorFullWidthTemp	= doorWidthA[front]
			doorStartX			= 0
			doorStartY			= 0
			if iDoorStyle = 15 then
				bDividedDoorWithMirror = 1		!one door with 2 different sides
			endif

			mulx -1
			add	-A + thickness/2 + not(abs(corOverhangR-cooh) > EPS)*cornelLMin, B-sideDepth2 + doorThickness  + cornelLMin, 0

			gosub "doorCall"
			del 2

			doorAngle3D		= _tempDoorAngle3D
			bKnob			= _temp_bKnob
		else

			nDoorTemp = nDoor
			doorFullWidthTemp = doorFullWidth[front]
			doorStartX = 0
			doorStartY = 0
			tempSideDepth1 = sideDepth1 - cooh - doorThickness*bDrawerOrDoor
			add tempSideDepth1,  cooh*(gs_lining_m=1 or gs_lining_m=3), 0
			rotz beta
			addx doorThickness/tan(beta)
			gosub "doorCall"
			del 3
		endif
	endif
return


"Interior":
	if iCabinetForm = SHAPE_SQUARE then
		insideA = A - corOverhangR  - corOverhangL - 2*thickness

		! ----- Vertical Panels -----
		nVerticalPanel=ceil(nDoor/2)-1
		material gs_cabinet_mat

		add corOverhangL+(doorFullWidth[front]/nDoor)+(ceil(nDoor/2)=nDoor/2)*(doorFullWidth[front]/nDoor)+thickness/2*bDrawerOrDoor+thickness*not(bDrawerOrDoor), B-thickness, thickness

		for i=1 to nVerticalPanel
			prism_ 4, tempInteriorHeight,
					thickness/2,0,15,
					-thickness/2,0,15,
					-thickness/2,-b+doorThickness*(iTempDoorType > FRONT_NONE)+cooh+thickness+doorThickness*(iTempDoorType = FRONT_DOOR),15,
					thickness/2,-b+doorThickness*(iTempDoorType > FRONT_NONE)+cooh+thickness+doorThickness*(iTempDoorType = FRONT_DOOR),15
			gosub "textureVertical_01"
			addx (doorFullWidth[front]/nDoor)*2
		next i
		del nVerticalPanel

		! ----- Cut -----
		for i=1 to nVerticalPanel
			cutpolya 4, 1, 0,
					thickness/2,0,15,
					-thickness/2,0,15,
					-thickness/2,-b+doorThickness*(iTempDoorType > FRONT_NONE)+cooh+thickness+doorThickness*(iTempDoorType = FRONT_DOOR),15,
					thickness/2,-b+doorThickness*(iTempDoorType > FRONT_NONE)+cooh+thickness+doorThickness*(iTempDoorType = FRONT_DOOR),15
			addx (doorFullWidth[front]/nDoor)*2
		next i
		del nVerticalPanel
		del 1

		! ----- Interior -----
		if tempFunctions = INTERIOR_COMBINED then
			insideT = insideA
			if nDoor >= 3 then
				if iTempDoorType = FRONT_DOOR then
					insideA = ((insideA-thickness*(nDoor-1))/nDoor)*(nDoor-2)+thickness*(nDoor-3)
				else
					insideA = ((insideA)/nDoor)*(nDoor-2)-thickness/2
				endif
			else
				insideA = (insideA-thickness)/2
			endif
		endif

		if tempFunctions = INTERIOR_SHELVES or tempFunctions = INTERIOR_COMBINED then
			add thickness+corOverhangL, B-thickness,thickness
			gosub "shelves"
			del 1
		endif

		if tempFunctions = INTERIOR_COMBINED and nDoor < 3 then
			add thickness+corOverhangL, B-thickness,thickness
			addx insideA
			material gs_cabinet_mat
			prism_ 4, tempInteriorHeight,
					thickness,0,15,
					thickness,-b+doorThickness+cooh+thickness,15,
					0,-b+doorThickness+cooh+thickness,15,
					0,0,15
			gosub "textureVertical_01"
			del 2
		endif

		if tempFunctions = INTERIOR_HANGER or tempFunctions = INTERIOR_COMBINED then
			if tempFunctions = INTERIOR_HANGER then
				insideTemp = insideA
				addx thickness+corOverhangL
				gosub "hangers"
				del 1
			else
				insideTemp = insideT - insideA -thickness
				addx thickness+corOverhangL+insideA+thickness
				gosub "hangers"
				del 1
			endif
		endif

		for i=1 to nVerticalPanel
			cutend
		next i

	else

		if tempFunctions = INTERIOR_SHELVES then
			gosub "shelves"
		endif
		if tempFunctions = INTERIOR_HANGER then
			gosub "hangers"
		endif
	endif

return


"shelves":
	material gs_shelf_mat
	addz -thickness
	for i=1 to nTempShelves
		addz shelvesDistance
		if iCabinetForm = SHAPE_SQUARE then
			prism_ 4, thickness,
					insideA,0,15,
					insideA,-b+doorThickness+cooh+thickness+doorThickness*(iTempDoorType = FRONT_DOOR or iTempDoorType = FRONT_SLIDING),15,
					0,-b+doorThickness+cooh+thickness+doorThickness*(iTempDoorType = FRONT_DOOR or iTempDoorType = FRONT_SLIDING),15,
					0,0,15
		else
			if iCabinetForm = SHAPE_CORNER_L then
				tempSideDepth1 = sideDepth1 - cooh - doorThickness
				tempSideDepth2 = sideDepth2 - cooh - doorThickness
				prism_ 4, thickness,
					thickness, b-thickness, 15,
					a-thickness-corOverhangR, b-thickness, 15,
					a-thickness-corOverhangR, b-tempSideDepth2, 15,
					tempSideDepth1, b-tempSideDepth2, 8
				gosub "textureHorizontal_02"

				prism_ 4, thickness,
					thickness, b-thickness, 8,
					tempSideDepth1, b-tempSideDepth2, 15,
					tempSideDepth1, thickness+corOverhangL, 15,
					thickness, thickness+corOverhangL, 15
				gosub "textureVertical_02"

			else
				prism_ 5, thickness,
					thickness, b-thickness, 15,
					a-thickness-corOverhangR, b-thickness, 15,
					a-thickness-corOverhangR, b-tempSideDepth2-thickness*tan(beta)+doorThickness/cos(beta), 15,
					tempSideDepth1+thickness/tan(beta)-doorThickness/sin(beta), thickness+corOverhangL, 15,
					thickness, thickness+corOverhangL, 15
				gosub "textureAlha"
			endif
		endif
	next i
	del nTempShelves+1
return


"hangers":
	material gs_hanger_mat
	hangerWidth = 0.03

	if iCabinetForm = SHAPE_CORNER_C then
		cutpolya 4, 1, 0,
				-1, -1, 15,
				-1, b+1, 15,
				thickness, b+1, 15,
				thickness, -1, 15

		cutpolya 4, 1, 0,
				-1, thickness+corOverhangL, 15,
				-1, -1, 15,
				a+1, -1, 15,
				a+1, thickness+corOverhangL, 15

		cutpolya 4, 1, 0,
				-1, b-thickness, 15,
				-1, b+1, 15,
				a+1, b+1, 15,
				a+1, b-thickness, 15

		cutpolya 4, 1, 0,
				a-thickness-corOverhangR, b+1, 15,
				a-thickness-corOverhangR, -1, 15,
				a+1, -1, 15,
				a+1, b+1, 15
	endif

	for i=1 to nTempHangers
		tempSideDepth1 = sideDepth1 - cooh - doorThickness
		tempSideDepth2 = sideDepth2 - cooh - doorThickness
		addz hangerDistance
		if iCabinetForm = SHAPE_SQUARE then
			tube 6,4,1+2+16+32,
					-hangerWidth/2,-hangerWidth/2,1,
					0,-hangerWidth/2,900,
					hangerWidth/2,-hangerWidth/2,3001,
					hangerWidth/2,-hangerWidth*1.5,1,
					0,-hangerWidth*1.5,900,
					0,-180,4001,

					-1, b-tempSideDepth2/2, 0, 0,
					0, b-tempSideDepth2/2, 0, 0,
					insideTemp, b-tempSideDepth2/2, 0, 0,
					insideTemp+1, b-tempSideDepth2/2, 0, 0
			gosub "textureHorizontal_02"
		else
			if iCabinetForm = SHAPE_CORNER_L then
				tube 6,4,1+2+16+32,
						-hangerWidth/2,-hangerWidth/2,1,
						0,-hangerWidth/2,900,
						hangerWidth/2,-hangerWidth/2,3001,
						hangerWidth/2,-hangerWidth*1.5,1,
						0,-hangerWidth*1.5,900,
						0,-180,4001,

						tempSideDepth1/2, thickness+corOverhangL-1, 0, 0,
						tempSideDepth1/2, thickness+corOverhangL, 0, 0,
						tempSideDepth1/2, b-thickness, 0, 0,
						tempSideDepth1/2, b-thickness+1, 0, 0
				gosub "textureVertical_02"

				tube 6,4,1+2+16+32,
						-hangerWidth/2,-hangerWidth/2,1,
						0,-hangerWidth/2,900,
						hangerWidth/2,-hangerWidth/2,3001,
						hangerWidth/2,-hangerWidth*1.5,1,
						0,-hangerWidth*1.5,900,
						0,-180,4001,

						thickness-1, b-tempSideDepth2/2, 0, 0,
						tempSideDepth1/2, b-tempSideDepth2/2, 0, 0,
						a-thickness-corOverhangR, b-tempSideDepth2/2, 0, 0,
						a-thickness-corOverhangR+1, b-tempSideDepth2/2, 0, 0
				gosub "textureHorizontal_02"
			else
				tube 6,4,1+2+16+32,
						-hangerWidth/2,-hangerWidth/2,1,
						0,-hangerWidth/2,900,
						hangerWidth/2,-hangerWidth/2,3001,
						hangerWidth/2,-hangerWidth*1.5,1,
						0,-hangerWidth*1.5,900,
						0,-180,4001,

						0, corOverhangL, 0, 0,
						thickness, thickness+corOverhangL, 0, 0,
						B/tan(beta), B, 0, 0,
						B/tan(beta)+cos(beta), B+sin(beta), 0, 0
				gosub "textureAlha"
			endif
		endif
	next i
	del nTempHangers

	if iCabinetForm = SHAPE_CORNER_C then
		cutend
		cutend
		cutend
		cutend
	endif
return


"doorCall":
	if iTempDoorType = FRONT_DOOR then
		add doorStartX, doorStartY,thickness/2
		for i=1 to nDoorTemp
			if ceil(nDoorTemp/2)=nDoorTemp/2 then
				if ceil(i/2)<>i/2  then
					bMirrored = 0
					bFormMirror = 0
				else
					bMirrored = 1
					if iDoorStyle = 18 and nDoorTemp = 2 then
						bFormMirror = 0
					else
						bFormMirror = 1
					endif
				endif
			else
				if ceil(i/2)<>i/2 and i > 1 then
					bMirrored = 1
					bFormMirror = 0
				else
					bMirrored = 0
					bFormMirror = 1
					if i = 1 then bFormMirror = 0
					if 	bDividedDoorWithMirror = 1 then bFormMirror = 1
				endif
			endif
			if iDoorStyle = 16 then bFormMirror = 0
			call "fa_warddoortyp" parameters all bNotMacro		= 0,
												gs_full_edit	= gs_full_edit,
												bAngleEdit		= bAngleEdit,
												bMirrored		= bMirrored,
												bFormMirror		= bFormMirror,
												bSliding		= bSliding,
												cabdoortyp_unID	= unID,
												doorWidth		= doorFullWidthTemp/nDoorTemp,
												doorHeight		= doorHeight[front],
												bBevel			= bBevel,
												bKnob			= tempbKnob,
												gs_knob_type_m	= iTempKnobType,
												knob_pl_x		= tempKnobPozX,
												knob_pl_y		= tempKnobPozY,
												knob_size		= tempKnobSize,
												xDrawerKnobPos	= tempxDrawerKnobPos,
												zDrawerKnobPos	= tempzDrawerKnobPos,
												nKnobDrawers	= tempnKnobDrawers,
												gs_knob_mat		= tempmatKnob,
												returned_parameters cabdoortyp_unID
			unID = cabdoortyp_unID
			addx doorFullWidthTemp/nDoorTemp
		next i
		del nDoorTemp+1
	endif

	if iTempDoorType = FRONT_SLIDING then
		bSliding = 1
		add doorStartX, doorStartY,thickness
		for i=1 to nDoorTemp
			if ceil(nDoorTemp/2)=nDoorTemp/2 then
				if ceil(i/2)<>i/2 then
					bMirrored = 1
					bFormMirror = 0
					slidingOffset =  doorThickness
					knobOffset = -knob_d
				else
					bMirrored = 0
					if iDoorStyle = 18 and nDoorTemp = 2 then
						bFormMirror = 0
					else
						bFormMirror = 1
					endif
					slidingOffset = 0
					knobOffset = -knob_d - doorThickness
				endif
			else
				if ceil(i/2)<>i/2 then
					bMirrored = 0
					if i = 1 then bMirrored = 1
					bFormMirror = 0
					slidingOffset =  doorThickness
					knobOffset = -knob_d
				else
					bMirrored = 1
					bFormMirror = 1
					slidingOffset = 0
					knobOffset = -knob_d - doorThickness
				endif
			endif
			if iDoorStyle = 16 then bFormMirror = 0

			doorTempWidth = doorFullWidthTemp/nDoorTemp

			doordirection = 0
			if not(bMirrored) then
				hostspotStart = doorTempWidth-knob_pl_x
				doordirection = -1
			else
				hostspotStart = knob_pl_x
				doordirection = 1
			endif
			openingoffset = doorTempWidth * (openingDoor[front][i]/100) * doordirection

			hotspot  hostspotStart, knobOffset, knob_pl_y,   			 unID, openingDoorLength[front][i], 1+128						: unID=unID+1
			hotspot  hostspotStart-doordirection, knobOffset, knob_pl_y, unID, openingDoorLength[front][i], 3							: unID=unID+1
			hotspot  hostspotStart+openingoffset, knobOffset, knob_pl_y, unID, openingDoorLength[front][i], 2, openingDoor[front][i]	: unID=unID+1

			add openingoffset, slidingOffset, 0
			call "fa_warddoortyp" parameters all bNotMacro		= 0,
												gs_full_edit	= gs_full_edit,
												bAngleEdit		= 0,
												doorAngle3D		= 0,
												bMirrored		= bMirrored,
												bFormMirror		= bFormMirror,
												bSliding		= bSliding,
												cabdoortyp_unID	= unID,
												doorWidth		= doorFullWidthTemp/nDoorTemp,
												doorHeight		= doorHeight[front],
												bBevel			= bBevel,
												bKnob			= tempbKnob,
												gs_knob_type_m	= iTempKnobType,
												knob_pl_x		= tempKnobPozX,
												knob_pl_y		= tempKnobPozY,
												knob_size		= tempKnobSize,
												xDrawerKnobPos	= tempxDrawerKnobPos,
												zDrawerKnobPos	= tempzDrawerKnobPos,
												nKnobDrawers	= tempnKnobDrawers,
												gs_knob_mat		= tempmatKnob,
												returned_parameters cabdoortyp_unID
			unID = cabdoortyp_unID
			del 1
			addx doorFullWidthTemp/nDoorTemp
		next i
		del nDoorTemp+1
	endif

!	tempbKnob = 0
!	if tempnKnobDrawers = 2  then
!		tempbKnob = (doorFullWidthTemp/nDrawerTempX)*1/4
!	endif

	if iTempDoorType = FRONT_DRAWER then
		add doorStartX, doorStartY,thickness/2
		for i=1 to nDrawerTempX
			for ii=1 to nDrawerTempY
				call "fa_warddoortyp" parameters all bNotMacro			= 0,
													gs_full_edit		= gs_full_edit,
													!bAngleEdit			= 0,
													doorAngle3D			= 0,
													bDrawer				= 1,
													iDrawerKnobPos		= 1,
													drawerDepth			= tempDepth,
													iDoorStyle			= iDrawerStyle,
													matDoorDecor1		= gs_drawer_mat,
													matDoorFrame		= gs_drawer_mat,
													doorFrameWidth		= drawerFrameWidth,
													nVerticalMullion	= 0,
													nHorizontalMullion	= 0,
													bMirrored			= bMirrored,
													bFormMirror			= bFormMirror,
													bSliding			= bSliding,
													cabdoortyp_unID		= unID,
													doorWidth			= doorFullWidthTemp/nDrawerTempX,
													doorHeight			= doorHeight[front]/nDrawerTempY,
													bBevel				= bBevel,
													bKnob				= tempbKnob,
													gs_knob_type_m		= iTempKnobType,
													knob_pl_x			= tempKnobPozX,
													knob_pl_y			= tempKnobPozY,
													knob_size			= tempKnobSize,
													xDrawerKnobPos		= tempxDrawerKnobPos,
													zDrawerKnobPos		= tempzDrawerKnobPos,
													nKnobDrawers		= tempnKnobDrawers,
													gs_knob_mat			= tempmatKnob,
													returned_parameters cabdoortyp_unID
				unID = cabdoortyp_unID
				addz doorHeight[front]/nDrawerTempY
			next ii
			del nDrawerTempY
			addx doorFullWidthTemp/nDrawerTempX
		next i
		del nDrawerTempX+1
	endif
return


! ======================================================================
! Textures
! ======================================================================
"textureVertical_01":
	roty 90
	vert 0, 0, 0
	vert 1, 0, 0
	vert 0, 1, 0
	vert 0, 0, 1
	del 1

	coor 2, -1, -2, -3, -4

	base

	body -1
return


"textureVertical_02":
	roty 90
	rotz 90
	vert 0, 0, 0
	vert 1, 0, 0
	vert 0, 1, 0
	vert 0, 0, 1
	del 2

	coor 2, -1, -2, -3, -4

	base

	body -1
return


"textureHorizontal_01":
	vert 0, 0, 0
	vert 1, 0, 0
	vert 0, 1, 0
	vert 0, 0, 1

	coor 2, -1, -2, -3, -4

	base

	body -1
return


"textureHorizontal_02":
	rotx 90
	vert 0, 0, 0
	vert 1, 0, 0
	vert 0, 1, 0
	vert 0, 0, 1
	del 1

	coor 2, -1, -2, -3, -4

	base

	body -1
return


"textureAlha":
	rotz beta+90
	roty 90
	vert 0, 0, 0
	vert 1, 0, 0
	vert 0, 1, 0
	vert 0, 0, 1
	del 2

	coor 2, -1, -2, -3, -4

	base

	body -1
return
