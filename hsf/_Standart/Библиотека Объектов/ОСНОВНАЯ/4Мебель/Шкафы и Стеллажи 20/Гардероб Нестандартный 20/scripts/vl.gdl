

!Hide all parameters from UI
hideparameter all  "A", "B", "ZZYZX"

call "FM_types" parameters all

minDist = 0.3
values "a" range [minDist, ]
values "b" range [minDist, ]
values "zzyzx" range [divisionHeight+0.1+bCornice*cot, ]
values "divisionHeight" range [leg_h+0.1, ZZYZX-bCornice*cot-0.1]
values "doorThickness" range [0.02,0.07]

! ==============================================================================
! Cabinet Shape
! ==============================================================================
! ----- Cabinet Shape -----
values "cabinetForm" stCabinetForm		! Square(1), Corner-L(2), Corner-C(3)
values "iCabinetForm"  SHAPE_SQUARE, SHAPE_CORNER_L, SHAPE_CORNER_C
if GLOB_MODPAR_NAME = "cabinetForm" then
	iCabinetForm = 1
	for i = 1 to vardim1(stCabinetForm)
		if cabinetForm= stCabinetForm[i] then	iCabinetForm = i
	next i
	parameters iCabinetForm = iCabinetForm
else
	iCabinetForm = max(min(iCabinetForm,3),1)
	parameters cabinetForm = stCabinetForm[iCabinetForm]
endif

if iTempForm <> iCabinetForm then
	if iCabinetForm = SHAPE_SQUARE then
		B = sideDepth2
		parameters B = B
	else
		if iTempForm = SHAPE_SQUARE then
			B = A
			parameters B = B
		endif
	endif

	iTempForm = iCabinetForm
	parameters iTempForm = iTempForm
endif

if iCabinetForm = SHAPE_SQUARE then
	hideparameter "sideDepth1", "sideDepth2"
	lock "sideDepth1", "sideDepth2"
endif

if iCabinetForm = SHAPE_CORNER_L then
	values "sideDepth1" range [0.1, A]
	values "sideDepth2" range [0.1, B]
endif

if iCabinetForm = SHAPE_CORNER_C then
	values "sideDepth1" range [0.1, A-0.1]
	values "sideDepth2" range [0.1, B-0.1]
endif


! ==============================================================================
! Function Above
! ==============================================================================
! ----- Function Above -----
if iCabinetForm = SHAPE_SQUARE then
	values "frontAbove" stFrontTypes
	values "iFrontAbove"  FRONT_NONE, FRONT_DRAWER, FRONT_SLIDING, FRONT_DOOR
else
	values "frontAbove" stFrontTypes[1], stFrontTypes[3], stFrontTypes[4]
	values "iFrontAbove"  FRONT_NONE, FRONT_DRAWER, FRONT_DOOR
endif
if GLOB_MODPAR_NAME = "frontAbove" then
	iFrontAbove = 0
	for i = 1 to vardim1(stFrontTypes)
		if frontAbove= stFrontTypes[i] then	iFrontAbove = 4-i
	next i
	parameters iFrontAbove = iFrontAbove
else
	iFrontAbove = max(min(iFrontAbove,3),0)
	parameters frontAbove = stFrontTypes[4-iFrontAbove]
endif

! ----- Interior Above -----
if iCabinetForm = SHAPE_SQUARE then
	values "iFunctions" 0,1,2,3
	values "gs_functions" stInteriorType
else
	values "iFunctions" 0,2,3
	values "gs_functions" stInteriorType[1], stInteriorType[2], stInteriorType[4]
endif
if GLOB_MODPAR_NAME = "gs_functions" then
	for i = 1 to vardim1(stInteriorType)
		if gs_functions = stInteriorType[i] then iFunctions = 4 - i
	next i
	parameters iFunctions = iFunctions
else
	iFunctions = max(min(iFunctions,3),0)
	parameters gs_functions = stInteriorType[4-iFunctions]
endif

! ----- Shelves and Hangers and Drawers-----
values "nShelves" range [1, ]
values "nHangers" 1
if iFrontAbove = FRONT_DRAWER then
	lock "gs_functions", "iFunctions", "nHangers", "nShelves"
	hideparameter  "gs_functions", "iFunctions", "nHangers", "nShelves"
else
	if iFunctions = INTERIOR_NONE then
		lock "nHangers", "nShelves"
		hideparameter "nHangers", "nShelves"
	else
		if iFunctions = INTERIOR_SHELVES then
			lock "nHangers"
			hideparameter "nHangers"
		endif
		if iFunctions = INTERIOR_HANGER then
			lock "nShelves"
			hideparameter "nShelves"
		endif
	endif
endif


! ==============================================================================
! Function Under
! ==============================================================================
! ----- Function Under -----
if iCabinetForm = SHAPE_SQUARE then
	values "frontUnder" stFrontTypes
	values "iFrontUnder"  FRONT_NONE, FRONT_DRAWER, FRONT_SLIDING, FRONT_DOOR
else
	values "frontUnder" stFrontTypes[1], stFrontTypes[3], stFrontTypes[4]
	values "iFrontUnder"  FRONT_NONE, FRONT_DRAWER, FRONT_DOOR
endif
if GLOB_MODPAR_NAME = "frontUnder" then
	iFrontUnder = 0
	for i = 1 to vardim1(stFrontTypes)
		if frontUnder= stFrontTypes[i] then	iFrontUnder = 4-i
	next i
	parameters iFrontUnder = iFrontUnder
else
	iFrontUnder = max(min(iFrontUnder,3),0)
	parameters frontUnder = stFrontTypes[4-iFrontUnder]
endif


! ----- Interior Under -----
if iCabinetForm = SHAPE_SQUARE then
	values "iInteriorUnder" 0,1,2,3
	values "interiorUnder" stInteriorType
else
	values "iInteriorUnder" 0,2,3
	values "interiorUnder" stInteriorType[1], stInteriorType[2], stInteriorType[4]
endif
if GLOB_MODPAR_NAME = "interiorUnder" then
	iInteriorUnder = 0
	for i = 1 to vardim1(stInteriorType)
		if interiorUnder= stInteriorType[i] then	iInteriorUnder = 4-i
	next i
	parameters iInteriorUnder = iInteriorUnder
else
	iInteriorUnder = max(min(iInteriorUnder,3),0)
	parameters interiorUnder =stInteriorType[4-iInteriorUnder]
endif

! ----- Shelves and Hangers and Drawers-----
values "nShelvesUnder" range [1, ]
values "nHangersUnder" 1
if iFrontUnder = FRONT_DRAWER then
	lock "interiorUnder", "iInteriorUnder", "nHangersUnder", "nShelvesUnder"
	hideparameter  "interiorUnder", "iInteriorUnder", "nHangersUnder", "nShelvesUnder"
else
	if iInteriorUnder = INTERIOR_NONE then
		lock "nHangersUnder", "nShelvesUnder"
		hideparameter "nHangersUnder", "nShelvesUnder"
	else
		if iInteriorUnder= INTERIOR_SHELVES then
			lock "nHangersUnder"
			hideparameter "nHangersUnder"
		endif
		if iInteriorUnder = INTERIOR_HANGER then
			lock "nShelvesUnder"
			hideparameter "nShelvesUnder"
		endif
	endif
endif
! ==============================================================================
! Shelf and Hanger and Knob and Drawer
! ==============================================================================

if _bLockKnob then
	hideparameter "gs_knob_mat"
	lock "gs_knob_mat"
endif

if _bLockShelf then
	hideparameter "gs_shelf_mat"
	lock "gs_shelf_mat"
endif

if _bLockHanger then
	hideparameter "gs_hanger_mat"
	lock "gs_hanger_mat"
endif

if _bLockDrawer then
	hideparameter "gs_drawer_mat"
	lock "gs_drawer_mat"
endif

! ==============================================================================
! Drawers
! ==============================================================================
! ----- Drawers -----
dim drawerStyleNumber[4]
	drawerStyleNumber[1] = 1
	drawerStyleNumber[2] = 2
	drawerStyleNumber[3] = 3
	drawerStyleNumber[4] = 8

values "drawerStyle" stDrawerTypes
values "iDrawerStyle"  drawerStyleNumber
if GLOB_MODPAR_NAME = "drawerStyle" then
	iDrawerStyle = 1
	for i = 1 to vardim1(stDrawerTypes)
		if drawerStyle= stDrawerTypes[i] then	iDrawerStyle = drawerStyleNumber[i]
	next i
	parameters iDrawerStyle = iDrawerStyle
else
	for i = 1 to vardim1(stDrawerTypes)
		if iDrawerStyle = drawerStyleNumber[i] then drawerStyle = stDrawerTypes[i]
	next i
	parameters drawerStyle = drawerStyle
endif

values "drawerFrameWidth" range [0.03,]
values "nDrawerHor" range [1,]
values "nDrawerVert" range [1,]

if iDrawerStyle = 1 | iDrawerStyle = 8 then
	hideparameter "drawerFrameWidth"
	lock "drawerFrameWidth"
endif

bDrawers = (iFrontUnder = FRONT_DRAWER or iFrontAbove = FRONT_DRAWER)

if not(bDrawers) then
	hideparameter "drawer", "drawerFrameWidth", "nDrawerHor", "nDrawerVert", "iDrawerStyle", "drawerStyle"
	lock "drawer", "drawerFrameWidth", "nDrawerHor", "nDrawerVert", "iDrawerStyle", "drawerStyle"
endif


! ==============================================================================
! Drawer Knob Parameters
! ==============================================================================
values "nKnobDrawers" 1, 2

if gs_knob_type_m = KNOB_STYLE_1 then _knob_size = 0.012
if gs_knob_type_m = KNOB_STYLE_2 then _knob_size = 0.011
if gs_knob_type_m = KNOB_STYLE_3 then _knob_size = 0.020
if gs_knob_type_m  >= 4 & gs_knob_p_m = 1 then _knob_size = knob_size/2

if iKnobTypeAbove = KNOB_STYLE_1 then _knob_size = 0.012
if iKnobTypeAbove = KNOB_STYLE_2 then _knob_size = 0.011
if iKnobTypeAbove = KNOB_STYLE_3 then _knob_size = 0.020
if iKnobTypeAbove  >= 4 & gs_knob_p_m = 1 then _knob_size = knobSizeAbove/2


drawerWidth = (min (doorFullWidth[1], doorFullWidth[2])-cornelLMin*(iCabinetForm = SHAPE_CORNER_L) )/nDrawerHor
drawerHeight = (min (doorHeight[1], doorHeight[2]))/nDrawerVert

if nKnobDrawersAbove = 1 then
	values "xDrawerKnobPosAbove" range [-drawerWidth/2 + 0.02 + _knob_size, drawerWidth/2 - 0.02 - _knob_size]
else
	values "xDrawerKnobPosAbove" range [0.02 + _knob_size, drawerWidth/2 - 0.02 - _knob_size]
endif

if nKnobDrawers = 1 then
	values "xDrawerKnobPos" range [-drawerWidth/2 + 0.02 + _knob_size, drawerWidth/2 - 0.02 - _knob_size]
else
	values "xDrawerKnobPos" range [0.02 + _knob_size, drawerWidth/2 - 0.02 - _knob_size]
endif

if gs_knob_type_m > 3 & gs_knob_p_m = 0 then yKnobPosMod = knob_size/2

values "zDrawerKnobPos" range [-(drawerHeight/2 - 0.02), drawerHeight/2 - 0.02]
values "zDrawerKnobPosAbove" range [-(drawerHeight/2 - 0.02), drawerHeight/2 - 0.02]

if GLOB_MODPAR_NAME = "nKnobDrawers" then
	if nKnobDrawers = 1 then
		xDrawerKnobPos = 0
	else
		xDrawerKnobPos = 0.1225
	endif
	parameters xDrawerKnobPos = xDrawerKnobPos
endif

if GLOB_MODPAR_NAME = "nKnobDrawersAbove" then
	if nKnobDrawersAbove = 1 then
		xDrawerKnobPosAbove = 0
	else
		xDrawerKnobPosAbove = 0.1225
	endif
	parameters xDrawerKnobPosAbove = xDrawerKnobPosAbove
endif


! ==============================================================================
! Door Settings
! ==============================================================================
! ----- Door Style -----
dim doorStyleNumber[12]
	doorStyleNumber[1] = 1
	doorStyleNumber[2] = 13
	doorStyleNumber[3] = 3
	doorStyleNumber[4] = 9
	doorStyleNumber[5] = 4
	doorStyleNumber[6] = 5
	doorStyleNumber[7] = 14
	doorStyleNumber[8] = 15
	doorStyleNumber[9] = 16
	doorStyleNumber[10] = 17
	doorStyleNumber[11] = 18
	doorStyleNumber[12] = 10

values "iDoorStyle" doorStyleNumber
values "doorStyle" stDoorStyle
if GLOB_MODPAR_NAME = "doorStyle" then
	iDoorStyle = 1
	for i = 1 to vardim1(stDoorStyle)
		if doorStyle = stDoorStyle[i] then iDoorStyle = doorStyleNumber[i]
	next i
	parameters iDoorStyle = iDoorStyle
else
	for i = 1 to vardim1(stDoorStyle)
		if iDoorStyle = doorStyleNumber[i] then doorStyle = stDoorStyle[i]
	next i
	parameters doorStyle = doorStyle
endif

if not(bDoor) then
	hideparameter "gs_door", "doorCustomPanelName", "iTempDoorStyle"
	lock "gs_door", "doorCustomPanelName", "iTempDoorStyle"

	hideparameter "nDoor", "doorStyle", "iDoorStyle", "doorThickness", "doorFrameWidth", "mullionWidth", "nVerticalMullion", "nHorizontalMullion", "bBevel", "doorAngle3D"
	lock "nDoor", "doorStyle", "iDoorStyle", "doorThickness", "doorFrameWidth", "mullionWidth", "nVerticalMullion", "nHorizontalMullion", "bBevel", "doorAngle3D"

	hideparameter "matDoorFrame", "matDoorGlass", "matDoorMirror", "matDoorDecor1", "matDoorDecor2"
	lock "matDoorFrame", "matDoorGlass", "matDoorMirror", "matDoorDecor1", "matDoorDecor2"
endif

! ----- Door Number -----
if iCabinetForm = SHAPE_SQUARE then
	tempDoorNumber = 1
	if iFrontUnder = FRONT_SLIDING or iFrontAbove = FRONT_SLIDING then tempDoorNumber = 2
	values "nDoor" range [tempDoorNumber, ]
else
	if iCabinetForm = SHAPE_CORNER_C then
		values "nDoor" range [1, 2]
	else
		values "nDoor" 1
		lock "nDoor"
		hideparameter "nDoor"
	endif
endif

if GLOB_MODPAR_NAME = "frontAbove" | GLOB_MODPAR_NAME = "iFrontAbove" | \
	GLOB_MODPAR_NAME = "frontUnder" | GLOB_MODPAR_NAME = "iFrontUnder " then
	if nDoor = 1 & (iFrontAbove = FRONT_SLIDING | iFrontUnder = FRONT_SLIDING) then
		nDoor = 2
		parameters nDoor = nDoor
	endif
endif

! ----- Door and Knob Parameters Macro -----
	call "fa_warddoortyp" parameters all bNotMacro		= 0,
										gs_full_edit	= 1,
										doorWidth		= (min (doorFullWidth[1], doorFullWidth[2]))/nDoor,
										bBevel			= bBevel,
										gs_knob_type_m	= gs_knob_type_m,
										bKnob			= bKnob,
										knob_pl_x		= knob_pl_x,
										knob_pl_y		= knob_pl_y,
										knob_size		= knob_size,
										xDrawerKnobPos	= xDrawerKnobPos,
										zDrawerKnobPos	= zDrawerKnobPos,
										nKnobDrawers	= nKnobDrawers,
										gs_knob_mat		= gs_knob_mat,
										doorHeight=min (doorHeight[1], doorHeight[2])

if not(bKnobAbove) then
	hideparameter	"iKnobTypeAbove", "xKnobPozAbove", "yKnobPozAbove", "knobSizeAbove", "matKnobAbove",
					"xDrawerKnobPosAbove", "zDrawerKnobPosAbove", "nKnobDrawersAbove"
	lock			"iKnobTypeAbove", "xKnobPozAbove", "yKnobPozAbove", "knobSizeAbove", "matKnobAbove",
					"xDrawerKnobPosAbove", "zDrawerKnobPosAbove", "nKnobDrawersAbove"
endif

if bKnobAbove and iKnobTypeAbove < 4 then
	hideparameter	"knobSizeAbove"
	lock			"knobSizeAbove"
endif

values "knobSizeAbove" range [0.045, )

! ==============================================================================
! Door Opening
! ==============================================================================
openingRange = 0.9
doorTempWidth = (min (doorFullWidth[1], doorFullWidth[2]))/nDoor

knob_w = 0
if gs_knob_type_m >=1 & gs_knob_type_m <=3 then knob_w= 0.02
if gs_knob_type_m >=4 & gs_knob_type_m <=8 then
	if gs_knob_p_m = 1 then	! Horizontal
		knob_w= 0.1
	else
		knob_w= 0.012
	endif
endif

minLengthKnob = knob_pl_x + knob_w
slidingRange = 1 - (minLengthKnob/doorTempWidth)

if GLOB_MODPAR_NAME = "nDoor" then
	for gg = 1 to 2
		for kk = 1 to nDoor
			openingDoor[gg][kk] = 0
			openingDoorLength[gg][kk] = 0
			parameters openingDoorLength[gg][kk] = openingDoorLength[gg][kk], openingDoor[gg][kk] = openingDoor[gg][kk]
		next kk
	next gg
endif

if GLOB_MODPAR_NAME = "openingDoor" then
	for kk = 1 to nDoor
		if (ceil(nDoor/2)<>nDoor/2)  and (kk = 2 and nDoor>2) then
			if openingDoor[1][kk] > openingRange*100 then
				openingDoor[1][kk] = openingRange*100
				parameters openingDoor[1][kk] = openingDoor[1][kk]
			endif

			if openingDoor[1][kk] < -openingRange*100 then
				openingDoor[1][kk] = -openingRange*100
				parameters openingDoor[1][kk] = openingDoor[1][kk]
			endif

			if openingDoor[2][kk] > openingRange*100 then
				openingDoor[2][kk] = openingRange*100
				parameters openingDoor[2][kk] = openingDoor[2][kk]
			endif

			if openingDoor[2][kk] < -openingRange*100 then
				openingDoor[2][kk] = -openingRange*100
				parameters openingDoor[2][kk] = openingDoor[2][kk]
			endif
		else
			if openingDoor[1][kk] > openingRange*100 then
				openingDoor[1][kk] = openingRange*100
				parameters openingDoor[1][kk] = openingDoor[1][kk]
			endif

			if openingDoor[1][kk] < 0 then
				openingDoor[1][kk] = 0
				parameters openingDoor[1][kk] = openingDoor[1][kk]
			endif

			if openingDoor[2][kk] > openingRange*100 then
				openingDoor[2][kk] = openingRange*100
				parameters openingDoor[2][kk] = openingDoor[2][kk]
			endif

			if openingDoor[2][kk] < 0 then
				openingDoor[2][kk] = 0
				parameters openingDoor[2][kk] = openingDoor[2][kk]
			endif
		endif

		openingDoorLength[1][kk] = doorTempWidth * (openingDoor[1][kk]/100)
		openingDoorLength[2][kk] = doorTempWidth * (openingDoor[2][kk]/100)
		parameters openingDoorLength[1][kk] = openingDoorLength[1][kk], openingDoorLength[2][kk] = openingDoorLength[2][kk]
	next kk
else
	! Comment:
	! odd Door Number 	- 1, 2, 3, A, B, A, B ...
	! even Door Number	- A, B, A, B, A, B, A ...

	for iPos = 1 to 2
		for kk = 1 to nDoor
			if (iPos = 1 & iFrontAbove = FRONT_SLIDING) | (iPos = 2 & iFrontUnder = FRONT_SLIDING) then
				if (ceil(nDoor/2)<>nDoor/2)  & nDoor > 2 & (kk >= 1 & kk <= 3) then
					! Maximum Range
					if kk = 1 then	! (1)
						if openingDoorLength[iPos][kk] > (doorTempWidth * slidingRange + openingDoorLength[iPos][kk+1]) then
							openingDoorLength[iPos][kk] = (doorTempWidth * slidingRange + openingDoorLength[iPos][kk+1])
							parameters openingDoorLength[iPos][kk] = openingDoorLength[iPos][kk]
						endif
					endif
					if kk = 2 then	! (2)
						if openingDoorLength[iPos][kk] > (doorTempWidth * slidingRange - openingDoorLength[iPos][kk+1]) then
							openingDoorLength[iPos][kk] = (doorTempWidth * slidingRange - openingDoorLength[iPos][kk+1])
							parameters openingDoorLength[iPos][kk] = openingDoorLength[iPos][kk]
						endif
					endif
					if kk = 3 then	! (3)
						if openingDoorLength[iPos][kk] > (doorTempWidth * slidingRange - openingDoorLength[iPos][kk-1]) then
							openingDoorLength[iPos][kk] = (doorTempWidth * slidingRange - openingDoorLength[iPos][kk-1])
							parameters openingDoorLength[iPos][kk] = openingDoorLength[iPos][kk]
						endif
					endif
					! Minimum Range
					if kk = 2 then	! (2)
						if openingDoorLength[iPos][kk] < -(doorTempWidth * slidingRange - openingDoorLength[iPos][kk-1]) then
							openingDoorLength[iPos][kk] = -(doorTempWidth * slidingRange - openingDoorLength[iPos][kk-1])
							parameters openingDoorLength[iPos][kk] = openingDoorLength[iPos][kk]
						endif
					else	! (1), (3)
						if openingDoorLength[iPos][kk] < eps then
							openingDoorLength[iPos][kk] = 0
							parameters openingDoorLength[iPos][kk] = openingDoorLength[iPos][kk]
						endif
					endif
				else
					! Maximum Range
					if (ceil(kk/2)<>(kk/2)) exor (ceil(nDoor/2)<>(nDoor/2)) then ! (A)
						if openingDoorLength[iPos][kk] > (doorTempWidth * slidingRange - openingDoorLength[iPos][kk+1]) then
							openingDoorLength[iPos][kk] = (doorTempWidth * slidingRange - openingDoorLength[iPos][kk+1])
							parameters openingDoorLength[iPos][kk] = openingDoorLength[iPos][kk]
						endif
					else	! (B)
						if openingDoorLength[iPos][kk] > (doorTempWidth * slidingRange - openingDoorLength[iPos][kk-1]) then
							openingDoorLength[iPos][kk] = (doorTempWidth * slidingRange - openingDoorLength[iPos][kk-1])
							parameters openingDoorLength[iPos][kk] = openingDoorLength[iPos][kk]
						endif
					endif
					! Minimum Range (A), (B)
					if openingDoorLength[iPos][kk] < eps then
						openingDoorLength[iPos][kk] = 0
						parameters openingDoorLength[iPos][kk] = openingDoorLength[iPos][kk]
					endif
				endif
			else
				if (ceil(nDoor/2)<>nDoor/2)  and (kk = 2 and nDoor>2) then
					if openingDoorLength[iPos][kk] > doorTempWidth*slidingRange then
						openingDoorLength[iPos][kk] = doorTempWidth*slidingRange
						parameters openingDoorLength[iPos][kk] = openingDoorLength[iPos][kk]
					endif

					if openingDoorLength[iPos][kk] < -doorTempWidth*slidingRange then
						openingDoorLength[iPos][kk] = -doorTempWidth*slidingRange
						parameters openingDoorLength[iPos][kk] = openingDoorLength[iPos][kk]
					endif
				else
					if openingDoorLength[iPos][kk] > doorTempWidth*slidingRange then
						openingDoorLength[iPos][kk] = doorTempWidth*slidingRange
						parameters openingDoorLength[iPos][kk] = openingDoorLength[iPos][kk]
					endif

					if openingDoorLength[iPos][kk] < 0 then
						openingDoorLength[iPos][kk] = 0
						parameters openingDoorLength[iPos][kk] = openingDoorLength[iPos][kk]
					endif
				endif
			endif

			openingDoor[iPos][kk] = (openingDoorLength[iPos][kk]/doorTempWidth)*100
			parameters openingDoor[iPos][kk] = openingDoor[iPos][kk]
		next kk
	next iPos
endif

! ==============================================================================
! Knob
! ==============================================================================
! ----- Knob Style-----
values{2} "gs_knob_type_m"	KNOB_STYLE_1,	`Стиль 1`,
							KNOB_STYLE_2,	`Стиль 2`,
							KNOB_STYLE_3,	`Стиль 3`,
							KNOB_STYLE_4,	`Стиль 4`,
							KNOB_STYLE_5,	`Стиль 5`,
							KNOB_STYLE_6,	`Стиль 6`,
							KNOB_STYLE_7,	`Стиль 7`,
							KNOB_STYLE_8,	`Стиль 8`
values{2} "iKnobTypeAbove"	KNOB_STYLE_1,	`Стиль 1`,
							KNOB_STYLE_2,	`Стиль 2`,
							KNOB_STYLE_3,	`Стиль 3`,
							KNOB_STYLE_4,	`Стиль 4`,
							KNOB_STYLE_5,	`Стиль 5`,
							KNOB_STYLE_6,	`Стиль 6`,
							KNOB_STYLE_7,	`Стиль 7`,
							KNOB_STYLE_8,	`Стиль 8`


! ----- Knob Placing-----
values "gs_knob_p_m" 0,1
values "gs_knob_p" stKnobPlacing
!if GLOB_MODPAR_NAME = "gs_knob_p" then
!	gs_knob_type_m = KNOB_STYLE_1
!	for i = 1 to vardim1(stKnobPlacing)
!		if gs_knob_p = stKnobPlacing[i] then gs_knob_p_m = i-1
!	next i
!	parameters gs_knob_p_m = gs_knob_p_m
!else
!	gs_knob_p_m = max(min(gs_knob_p_m,1),0)
!	parameters gs_knob_p = stKnobPlacing[gs_knob_p_m+1]
!endif

!if not(bDrawers) and not(bDoor) then
!	hideparameter  "gs_knob_p", "gs_knob_p_m"
!	lock   "gs_knob_p", "gs_knob_p_m"
!endif

if not(iFrontUnder = FRONT_DRAWER) and not(iFrontUnder = FRONT_DOOR) then
	hideparameter "gs_knob_type_m", "knob_pl_x", "knob_pl_y",  "knob_size", "bKnob"
	lock "gs_knob_type_m", "knob_pl_x", "knob_pl_y", "knob_size", "bKnob"
endif

if not(iFrontAbove = FRONT_DRAWER) and not(iFrontAbove = FRONT_DOOR) then
	hideparameter "iKnobTypeAbove", "xKnobPozAbove", "yKnobPozAbove", "knobSizeAbove", "bKnobAbove"
	lock "iKnobTypeAbove", "xKnobPozAbove", "yKnobPozAbove", "knobSizeAbove", "bKnobAbove"
endif

values "nKnobDrawers" 1,2
values "nKnobDrawersAbove" 1,2

if not(iFrontAbove = FRONT_DRAWER) then
	hideparameter "nKnobDrawersAbove", "xDrawerKnobPosAbove", "zDrawerKnobPosAbove"
	lock "nKnobDrawersAbove", "xDrawerKnobPosAbove", "zDrawerKnobPosAbove"
endif

if not(iFrontUnder = FRONT_DRAWER) then
	hideparameter "nKnobDrawers", "xDrawerKnobPos", "zDrawerKnobPos"
	lock "nKnobDrawers", "xDrawerKnobPos", "zDrawerKnobPos"
endif

if not(iFrontAbove = FRONT_DOOR) then
	hideparameter "xKnobPozAbove", "yKnobPozAbove"
	lock "xKnobPozAbove", "yKnobPozAbove"
endif

if not(iFrontUnder = FRONT_DOOR) then
	hideparameter "knob_pl_x", "knob_pl_y"
	lock "knob_pl_x", "knob_pl_y"
endif

if iFrontUnder = FRONT_DOOR and iFrontAbove = FRONT_DOOR then
	if gs_knob_type_m < 4 and iKnobTypeAbove < 4 or not(bKnob) or not(bKnobAbove) then
		hideparameter	"knob_size", "gs_knob_p", "gs_knob_p_m"
		lock			"knob_size", "gs_knob_p", "gs_knob_p_m"
	endif
endif

if iFrontUnder = FRONT_DOOR and iFrontAbove <> FRONT_DOOR then
	if gs_knob_type_m < 4 or not(bKnob) then
		hideparameter	"knob_size", "gs_knob_p", "gs_knob_p_m"
		lock			"knob_size", "gs_knob_p", "gs_knob_p_m"
	endif
else
	if gs_knob_type_m < 4 or not(bKnob) then
		hideparameter	"knob_size"
		lock			"knob_size"
	endif
endif

if iFrontAbove = FRONT_DOOR and iFrontUnder <> FRONT_DOOR then
	if iKnobTypeAbove < 4 or not(bKnobAbove)then
		hideparameter	"knobSizeAbove", "gs_knob_p", "gs_knob_p_m"
		lock			"knobSizeAbove", "gs_knob_p", "gs_knob_p_m"
	endif
else
	if iKnobTypeAbove < 4 or not(bKnobAbove) then
		hideparameter	"knobSizeAbove"
		lock			"knobSizeAbove"
	endif
endif

! ==============================================================================
! Cornice
! ==============================================================================
! ----- Cornice Style -----

values{2} "gs_cornice_type_m"	CORN_STYLE_1,		`Стиль 1`,
								CORN_STYLE_2,		`Стиль 2`,
								CORN_STYLE_3,		`Стиль 3`,
								CORN_STYLE_4,		`Стиль 4`

! ----- Cornice Overhang-----
values "gs_lining" stCorniceOverhang
values "gs_lining_m" 1,2,3,4
if GLOB_MODPAR_NAME = "gs_lining" then
	gs_lining_m = 0
	for i = 1 to vardim1(stCorniceOverhang)
		if gs_lining = stCorniceOverhang[i] then gs_lining_m= 5-i
	next i
	parameters gs_lining_m = gs_lining_m
else
	gs_lining_m = max(min(gs_lining_m,4),1)
	parameters gs_lining = stCorniceOverhang[5-gs_lining_m]
endif


if not(bCornice) then
	hideparameter "gs_cornice_type_m", "gs_lining", "gs_lining_m", "cot", "cooh", "gs_cornice_mat"
	lock "gs_cornice_type_m", "gs_lining", "gs_lining_m", "cot", "cooh", "gs_cornice_mat"

else

	values "cot" range (0,)
	if gs_cornice_type_m=CORN_STYLE_1  then values "cooh" range [0,)
	if gs_cornice_type_m=CORN_STYLE_2 or gs_cornice_type_m=CORN_STYLE_3  then values "cooh" range [1/2*cot,)
	if gs_cornice_type_m=CORN_STYLE_4 then values "cooh" range [3/4*cot,)

endif

! ==============================================================================
! Leg
! ==============================================================================
! ----- Base Style-----
values{2} "gs_leg_type_m" 	LEG_STYLE_1, `Стиль 1`,
							LEG_STYLE_2, `Стиль 2`,
							LEG_STYLE_3, `Стиль 3`,
							LEG_STYLE_4, `Стиль 4`,
							LEG_STYLE_5, `Стиль 5`,
							LEG_STYLE_6, `Стиль 6`

values "leg_h" range [0, mindist]
values "leg_w" range (0, min(a/2, b/2))

if not(bBase) then
	hideparameter	"gs_leg_type_m", "gs_leg_mat", "leg_h", "leg_w"
	lock			"gs_leg_type_m", "gs_leg_mat", "leg_h", "leg_w"
endif


! ==============================================================================
! 2D Style
! ==============================================================================
! ----- 2D Symbol Type -----

if iCabinetForm = SHAPE_SQUARE then
	if iFrontAbove = FRONT_NONE & iFrontUnder = FRONT_NONE then
	
		! Enable only Symbol Types without door and drawer symbol
		iSymbolStyleEnable = 2**1 + 2**2 + 2**3
	else
		if	iFrontAbove = FRONT_DOOR |\ 
			iFrontUnder = FRONT_DOOR then 

			! Enable all Symbol Types
			iSymbolStyleEnable = 2**1 + 2**2 + 2**3 + 2**4 + 2**5 + 2**6 + 2**7 + 2**8 + 2**9
		else
			if	iFrontAbove = FRONT_SLIDING |\
				iFrontUnder = FRONT_SLIDING then

				! Enable only Symbol Types without door opening symbol
				iSymbolStyleEnable = 2**1 + 2**2 + 2**3 + 2**4 + 2**5 + 2**6 + 2**7
			else
				! Enable only Symbol Types without door symbol
				iSymbolStyleEnable = 2**1 + 2**2 + 2**3 + 2**6
			endif
		endif
	endif
else
	if iFrontAbove = FRONT_NONE & iFrontUnder = FRONT_NONE then
	
		! Enable only Symbol Type without door, drawer and cabinet symbol
		iSymbolStyleEnable = 2**1
	else
		if	iFrontAbove = FRONT_DOOR |\ 
			iFrontAbove = FRONT_SLIDING |\
			iFrontUnder = FRONT_DOOR |\ 
			iFrontUnder = FRONT_SLIDING then

			! Enable only Symbol Types without symbols drawn in the cabinet
			iSymbolStyleEnable = 2**1 + 2**6 + 2**7 + 2**8 + 2**9
		else
			! Enable only Symbol Types without door and cabinet symbol
			iSymbolStyleEnable = 2**1 + 2**6
		endif
	endif
endif


call "cabSymbolType" parameters 	iSymbolStyle = iSymbolStyle,
									iSymbolStyleEnable = iSymbolStyleEnable

lock "openingAngle2D"
hideparameter "openingAngle2D"

if (iFrontAbove = FRONT_DRAWER |\
	iFunctions = INTERIOR_NONE |\ 
	iFunctions = INTERIOR_SHELVES) |\
 	iSymbolStyle = 2 |\ 
 	iSymbolStyle = 3 |\ 
 	iSymbolStyle = 4 |\ 
	iSymbolStyle = 5 then			! Lock Hanger Symbol in case of symbols drawn in the cabinet

	hideparameter "bHangers"
	lock "bHangers"
endif

if gs_cont_pen=0 then parameters gs_cont_pen=4
if gs_fill_pen=0 then parameters gs_fill_pen=19


! ==============================================================================
! Minimal Space
! ==============================================================================
values "MSFront" range [0, ]


! ==============================================================================
! 3D Representation
! ==============================================================================
! ----- 3D Representation -----
values "gs_detlevel_3D" stDetlevel3D		! Off(0), Simple(1), Detailed(2)
values "gs_detlevel_3D_m" 0, 1, 2
if GLOB_MODPAR_NAME = "gs_detlevel_3D" then
	gs_detlevel_3D_m = 2
	for i = 1 to vardim1(stDetlevel3D)
		if gs_detlevel_3D = stDetlevel3D[i] then	gs_detlevel_3D_m = 3-i
	next i
	parameters gs_detlevel_3D_m = gs_detlevel_3D_m
else
	gs_detlevel_3D_m = max(min(gs_detlevel_3D_m,2),0)
	parameters gs_detlevel_3D = stDetlevel3D[3-gs_detlevel_3D_m]
endif

values "gs_resol" range [3, )
if gs_resol<3 then parameters gs_resol=3


! =============================================================================
! UI Support
! =============================================================================

if GLOB_UI_BUTTON_ID < 0 then
	parameters gs_ui_current_page = - GLOB_UI_BUTTON_ID
endif

