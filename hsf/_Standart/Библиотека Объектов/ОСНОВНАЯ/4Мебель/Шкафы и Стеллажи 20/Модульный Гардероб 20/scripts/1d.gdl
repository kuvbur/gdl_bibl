
EPS=0.0001

dim stDetlevel3D[3]
	stDetlevel3D[1] = `Детальный`
	stDetlevel3D[2] = `Простой`
	stDetlevel3D[3] = `Откл.`

dim stDoorType[3]
	stDoorType[1] = `Дверь Двойная Раздвижная`
	stDoorType[2] = `Дверь Тройная Раздвижная`
	stDoorType[3] = `Нет`

DOOR_TYPE_NONE			= 0
DOOR_TYPE_TRIPLE_SIDING	= 1
DOOR_TYPE_SLIDING		= 2

dim stDoorStyle[12]
	stDoorStyle[1] = `Стиль 1`
	stDoorStyle[2] = `Стиль 2`
	stDoorStyle[3] = `Стиль 3`
	stDoorStyle[4] = `Стиль 4`
	stDoorStyle[5] = `Стиль 5`
	stDoorStyle[6] = `Стиль 6`
	stDoorStyle[7] = `Стиль 7`
	stDoorStyle[8] = `Стиль 8`
	stDoorStyle[9] = `Стиль 9`
	stDoorStyle[10] = `Стиль 10`
	stDoorStyle[11] = `Стиль 11`
	stDoorStyle[12] = `Спец. панель`

! const values for parameter: gs_knob_type_m
KNOB_STYLE_1	= 1
KNOB_STYLE_2	= 2
KNOB_STYLE_3	= 3
KNOB_STYLE_4	= 4
KNOB_STYLE_5	= 5
KNOB_STYLE_6	= 6
KNOB_STYLE_7	= 7
KNOB_STYLE_8	= 8

dim stKnobPlacing[2]
	stKnobPlacing[1]=`Вертикальный`
	stKnobPlacing[2]=`Горизонтальный`

dim stInteriorType[6]
	stInteriorType[1]=`Полка`
	stInteriorType[2]=`Ящик`
	stInteriorType[3]=`Ящик с Лицевой Стороной`
	stInteriorType[4]=`Сетчатая Корзина`
	stInteriorType[5]=`Штанга`
	stInteriorType[6]=`Нет`

INTERIOR_NONE		= 0
INTERIOR_HANGER		= 1
INTERIOR_WIRE		= 2
INTERIOR_DRAWERFRONT= 3
INTERIOR_DRAWER		= 4
INTERIOR_SHELF		= 5

! const values for parameter: gs_cornice_type_m
CORN_STYLE_1	= 1
CORN_STYLE_2	= 2
CORN_STYLE_3	= 3
CORN_STYLE_4	= 4

dim stCorniceOverhang[4]
	stCorniceOverhang[1]=`Спереди`
	stCorniceOverhang[2]=`Спереди и Слева`
	stCorniceOverhang[3]=`Спереди и Справа`
	stCorniceOverhang[4]=`Спереди и по Бокам`

! const values for parameter: gs_leg_type_m
LEG_STYLE_1		= 1
LEG_STYLE_2		= 2
LEG_STYLE_3		= 3
LEG_STYLE_4		= 4
LEG_STYLE_5		= 5
LEG_STYLE_6		= 6

dim stFrameTypes[3]
	stFrameTypes[1]=`Сплошной`
	stFrameTypes[2]=`Сплошной с Задней Стенкой`
	stFrameTypes[3]=`Каркасный`

FRAME_SOLID		= 1
FRAME_SOLID_BACK= 2
FRAME_WIRE		= 3

dim stDrawerTypes[3]
	stDrawerTypes[1]=`Стиль 1`
	stDrawerTypes[2]=`Стиль 2`
	stDrawerTypes[3]=`Стиль 3`


!-----Definitions-----
if iFrameType = FRAME_WIRE then
	leg_h = 0
endif
minDist = 0.1
nDoor = 1
if iDoorType = DOOR_TYPE_SLIDING then nDoor = 2
if iDoorType = DOOR_TYPE_TRIPLE_SIDING then nDoor = 3
railThickness = 0.005


!-----Fill Array-----
dim moduleWidth[]
dim moduleMatrix[][2]
m = 1
nElement = 7
if nModule >= 1 then
	moduleWidth[1] = modulWidth01
	 moduleMatrix[m][1] = bDivision01
	 moduleMatrix[m][2] = divisionHeight01		: m = m + 1
	 moduleMatrix[m][1] = iInteriorType01
	 moduleMatrix[m][2] = iInteriorTypeUnder01	: m = m + 1
	 moduleMatrix[m][1] = nShelves01
	 moduleMatrix[m][2] = nShelvesUnder01		: m = m + 1
	 moduleMatrix[m][1] = nDrawers01
	 moduleMatrix[m][2] = nDrawersUnder01		: m = m + 1
	 moduleMatrix[m][1] = nDrawersFront01
	 moduleMatrix[m][2] = nDrawersFrontUnder01	: m = m + 1
	 moduleMatrix[m][1] = nWire01
	 moduleMatrix[m][2] = nWireUnder01			: m = m + 1
	 moduleMatrix[m][1] = nHangers01
	 moduleMatrix[m][2] = nHangersUnder01		: m = m + 1
endif

if nModule >= 2 then
	moduleWidth[2] = modulWidth02
	 moduleMatrix[m][1] = bDivision02
	 moduleMatrix[m][2] = divisionHeight02		: m = m + 1
	 moduleMatrix[m][1] = iInteriorType02
	 moduleMatrix[m][2] = iInteriorTypeUnder02	: m = m + 1
	 moduleMatrix[m][1] = nShelves02
	 moduleMatrix[m][2] = nShelvesUnder02		: m = m + 1
	 moduleMatrix[m][1] = nDrawers02
	 moduleMatrix[m][2] = nDrawersUnder02		: m = m + 1
	 moduleMatrix[m][1] = nDrawersFront02
	 moduleMatrix[m][2] = nDrawersFrontUnder02	: m = m + 1
	 moduleMatrix[m][1] = nWire02
	 moduleMatrix[m][2] = nWireUnder02			: m = m + 1
	 moduleMatrix[m][1] = nHangers02
	 moduleMatrix[m][2] = nHangersUnder02		: m = m + 1
endif

if nModule >= 3 then
	moduleWidth[3] = modulWidth03
	 moduleMatrix[m][1] = bDivision03
	 moduleMatrix[m][2] = divisionHeight03		: m = m + 1
	 moduleMatrix[m][1] = iInteriorType03
	 moduleMatrix[m][2] = iInteriorTypeUnder03	: m = m + 1
	 moduleMatrix[m][1] = nShelves03
	 moduleMatrix[m][2] = nShelvesUnder03		: m = m + 1
	 moduleMatrix[m][1] = nDrawers03
	 moduleMatrix[m][2] = nDrawersUnder03		: m = m + 1
	 moduleMatrix[m][1] = nDrawersFront03
	 moduleMatrix[m][2] = nDrawersFrontUnder03	: m = m + 1
	 moduleMatrix[m][1] = nWire03
	 moduleMatrix[m][2] = nWireUnder03			: m = m + 1
	 moduleMatrix[m][1] = nHangers03
	 moduleMatrix[m][2] = nHangersUnder03		: m = m + 1
endif

if nModule >= 4 then
	moduleWidth[4] = modulWidth04
	 moduleMatrix[m][1] = bDivision04
	 moduleMatrix[m][2] = divisionHeight04		: m = m + 1
	 moduleMatrix[m][1] = iInteriorType04
	 moduleMatrix[m][2] = iInteriorTypeUnder04	: m = m + 1
	 moduleMatrix[m][1] = nShelves04
	 moduleMatrix[m][2] = nShelvesUnder04		: m = m + 1
	 moduleMatrix[m][1] = nDrawers04
	 moduleMatrix[m][2] = nDrawersUnder04		: m = m + 1
	 moduleMatrix[m][1] = nDrawersFront04
	 moduleMatrix[m][2] = nDrawersFrontUnder04	: m = m + 1
	 moduleMatrix[m][1] = nWire04
	 moduleMatrix[m][2] = nWireUnder04			: m = m + 1
	 moduleMatrix[m][1] = nHangers04
	 moduleMatrix[m][2] = nHangersUnder04		: m = m + 1
endif

if nModule >= 5 then
	moduleWidth[5] = modulWidth05
	 moduleMatrix[m][1] = bDivision05
	 moduleMatrix[m][2] = divisionHeight05		: m = m + 1
	 moduleMatrix[m][1] = iInteriorType05
	 moduleMatrix[m][2] = iInteriorTypeUnder05	: m = m + 1
	 moduleMatrix[m][1] = nShelves05
	 moduleMatrix[m][2] = nShelvesUnder05		: m = m + 1
	 moduleMatrix[m][1] = nDrawers05
	 moduleMatrix[m][2] = nDrawersUnder05		: m = m + 1
	 moduleMatrix[m][1] = nDrawersFront05
	 moduleMatrix[m][2] = nDrawersFrontUnder05	: m = m + 1
	 moduleMatrix[m][1] = nWire05
	 moduleMatrix[m][2] = nWireUnder05			: m = m + 1
	 moduleMatrix[m][1] = nHangers05
	 moduleMatrix[m][2] = nHangersUnder05		: m = m + 1
endif

if nModule >= 6 then
	moduleWidth[6] = modulWidth06
	 moduleMatrix[m][1] = bDivision06
	 moduleMatrix[m][2] = divisionHeight06		: m = m + 1
	 moduleMatrix[m][1] = iInteriorType06
	 moduleMatrix[m][2] = iInteriorTypeUnder06	: m = m + 1
	 moduleMatrix[m][1] = nShelves06
	 moduleMatrix[m][2] = nShelvesUnder06		: m = m + 1
	 moduleMatrix[m][1] = nDrawers06
	 moduleMatrix[m][2] = nDrawersUnder06		: m = m + 1
	 moduleMatrix[m][1] = nDrawersFront06
	 moduleMatrix[m][2] = nDrawersFrontUnder06	: m = m + 1
	 moduleMatrix[m][1] = nWire06
	 moduleMatrix[m][2] = nWireUnder06			: m = m + 1
	 moduleMatrix[m][1] = nHangers06
	 moduleMatrix[m][2] = nHangersUnder06		: m = m + 1
endif

goto 1000

"findElements":
	!-----Find Element-----
	nDrawersWithFront = 0
	nDrawers = 0
	nHangers = 0
	nShelves = 0
	for i = 1 to nModule
		if moduleMatrix[1+(i-1)*nElement][1] then									!! Horizontal division

			! Above
			if moduleMatrix[2+(i-1)*nElement][1] = INTERIOR_DRAWER then nDrawers = nDrawers + 1
			if moduleMatrix[2+(i-1)*nElement][1] = INTERIOR_DRAWERFRONT then nDrawersWithFront = nDrawersWithFront + 1
			if moduleMatrix[2+(i-1)*nElement][1] = INTERIOR_HANGER then nHangers = nHangers + 1
			if moduleMatrix[2+(i-1)*nElement][1] = INTERIOR_SHELF then nShelves = nShelves + 1

			! Under
			if moduleMatrix[2+(i-1)*nElement][2] = INTERIOR_DRAWER then nDrawers = nDrawers + 1
			if moduleMatrix[2+(i-1)*nElement][2] = INTERIOR_DRAWERFRONT then nDrawersWithFront = nDrawersWithFront + 1
			if moduleMatrix[2+(i-1)*nElement][2] = INTERIOR_HANGER then nHangers = nHangers + 1
			if moduleMatrix[2+(i-1)*nElement][2] = INTERIOR_SHELF then nShelves = nShelves + 1

		else																		!! No Division

			if moduleMatrix[2+(i-1)*nElement][1] = INTERIOR_DRAWER then nDrawers = nDrawers + 1
			if moduleMatrix[2+(i-1)*nElement][1] = INTERIOR_DRAWERFRONT then nDrawersWithFront = nDrawersWithFront + 1
			if moduleMatrix[2+(i-1)*nElement][1] = INTERIOR_HANGER then nHangers = nHangers + 1
			if moduleMatrix[2+(i-1)*nElement][1] = INTERIOR_SHELF then nShelves = nShelves + 1
		endif
	next i
return

1000:


