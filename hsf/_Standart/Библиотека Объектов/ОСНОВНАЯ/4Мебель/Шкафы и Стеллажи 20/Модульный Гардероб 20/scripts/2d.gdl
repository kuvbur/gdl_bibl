
unID = 1
pen gs_cont_pen
fill gs_fill_type
drawindex 20

if  iSymbolStyle = 2 |\ 
 	iSymbolStyle = 3 |\ 
 	iSymbolStyle = 4 |\ 
	iSymbolStyle = 5 then 		! Do not draw Hanger Symbol in case of symbols drawn in the cabinet

	bHangers = 0
endif

! ======================================================================
! HOTSPOTS
! ======================================================================
CALL "Resize_A_B_ZZYZX" Parameters ALL
hotspot2  A/2, B, unID				: unID=unID+1

! ======================================================================
! BODY
! ======================================================================
! ----- Base Polygon -----
poly2_b 5, 1+2+64,gs_fill_pen,gs_back_pen,
	0,0,1,
	A,0,1,
	A,B,1,
	0,B,1,
	0,0,-1

if 	iSymbolStyle = 4 |\
	iSymbolStyle = 5 |\
	iSymbolStyle = 7 then 

	tempDoorWidth = A / nDoor									! Calculate Width of Doors for Symbols depending on Doors
endif

if iSymbolStyle = 4 then										! Draw V

	if iDoorType = 2 then										! Double Sliding Door
		line2 0, 				B, tempDoorWidth,	0
		line2 tempDoorWidth, 	0, A,				B
	endif	
	if iDoorType = 1 then										! Triple Sliding Door
		line2 0, 					0, tempDoorWidth,		B
		line2 tempDoorWidth, 		B, tempDoorWidth * 2,	0
		line2 tempDoorWidth * 2, 	0, A,					B
	endif
endif

if iSymbolStyle = 5 then										! Draw A

	if iDoorType = 2 then										! Double Sliding Door
		line2 0, 				0, tempDoorWidth,	B
		line2 tempDoorWidth, 	B, A,				0
	endif	
	if iDoorType = 1 then										! Triple Sliding Door
		line2 0, 					B, tempDoorWidth,		0
		line2 tempDoorWidth, 		0, tempDoorWidth * 2,	B
		line2 tempDoorWidth * 2, 	B, A,					0
	endif
endif

if 	iSymbolStyle = 6 |\											! Draw Door Thickness
	iSymbolStyle = 7 then 

	line2 0, doorThickness, a, doorThickness
	_depthmod = doorThickness
else
	_depthmod = 0
endif

if iSymbolStyle = 7 then										! Draw Door Number
	tempDoorWidth = A / nDoor
	for i = 1 to nDoor-1
		line2 tempDoorWidth * i, 0, tempDoorWidth * i, doorThickness
	next i
endif

for i = 1 to nModule
	if i > 1 then
		startModulX = frameWidth
		for kk = 1 to i-1
			startModulX = startModulX + moduleWidth[kk]
		next kk
		tempModulWidth = moduleWidth[i]

		if i = 2 then
			hotspot2  startModulX+tempModulWidth, 0, unID								: unID=unID+1
			if not(bUniform) then
				hotspot2  startModulX+tempModulWidth, B/2, unID, modulWidth02, 1+128	: unID=unID+1
				hotspot2  startModulX+tempModulWidth+1, B/2, unID, modulWidth02, 3		: unID=unID+1
				hotspot2  startModulX, B/2, unID, modulWidth02, 2						: unID=unID+1
			endif
		endif

		if i = 3 then
			hotspot2  startModulX+tempModulWidth, 0, unID								: unID=unID+1
			if not(bUniform) then
				hotspot2  startModulX+tempModulWidth, B/2, unID, modulWidth03, 1+128	: unID=unID+1
				hotspot2  startModulX+tempModulWidth+1, B/2, unID, modulWidth03, 3		: unID=unID+1
				hotspot2  startModulX, B/2, unID, modulWidth03, 2						: unID=unID+1
			endif
		endif

		if i = 4 then
			hotspot2  startModulX+tempModulWidth, 0, unID								: unID=unID+1
			if not(bUniform) then
				hotspot2  startModulX+tempModulWidth, B/2, unID, modulWidth04, 1+128	: unID=unID+1
				hotspot2  startModulX+tempModulWidth+1, B/2, unID, modulWidth04, 3		: unID=unID+1
				hotspot2  startModulX, B/2, unID, modulWidth04, 2						: unID=unID+1
			endif
		endif

		if i = 5 then
			hotspot2  startModulX+tempModulWidth, 0, unID								: unID=unID+1
			if not(bUniform) then
				hotspot2  startModulX+tempModulWidth, B/2, unID, modulWidth05, 1+128	: unID=unID+1
				hotspot2  startModulX+tempModulWidth+1, B/2, unID, modulWidth05, 3		: unID=unID+1
				hotspot2  startModulX, B/2, unID, modulWidth05, 2						: unID=unID+1
			endif
		endif

		if i = 6 then
			hotspot2  startModulX+tempModulWidth, 0, unID								: unID=unID+1
			if not(bUniform) then
				hotspot2  startModulX+tempModulWidth, B/2, unID, modulWidth06, 1+128	: unID=unID+1
				hotspot2  startModulX+tempModulWidth+1, B/2, unID, modulWidth06, 3		: unID=unID+1
				hotspot2  startModulX, B/2, unID, modulWidth06, 2						: unID=unID+1
			endif
		endif
	else
		startModulX = 0
		tempModulWidth = moduleWidth[i] + frameWidth
		hotspot2  startModulX+tempModulWidth, 0, unID									: unID=unID+1
	endif

	if i < nModule then
		line2 startModulX+tempModulWidth,_depthmod,startModulX+tempModulWidth,b
	endif

	if iSymbolStyle = 2 then			! Draw X
		line2 startModulX, 0, startModulX + tempModulWidth, b
		line2 startModulX, b, startModulX + tempModulWidth, 0
	endif

	if iSymbolStyle = 3 then			! Draw /
		line2 startModulX, 0, startModulX + tempModulWidth, b
	endif

	tempHangers =  (moduleMatrix[2+(i-1)*nElement][1] = INTERIOR_HANGER)

	! ----- Hangers -----
	if bHangers and tempHangers then
		add2 startModulX, 0
		line2 0,b/2,tempModulWidth,b/2
		gosub "hangers"
		del 1
	endif
next i


! ======================================================================
! Minimal Space
! ======================================================================
if MSFront> EPS then
	reqBMinSpace = 0
	drawindex 10
	success = LIBRARYGLOBAL ("LibraryGlobals13", "showBMinSpace", reqBMinSpace)
	if success > 0 and reqBMinSpace then
		call "fa_minimalspace" parameters all 	MSType 	= 1,
												unID 	= 3000
	endif
endif


END

! ======================================================================
! SubRoutines
! ======================================================================

"hangers":
	add2 0.1, b/2
	hn = tempModulWidth - 2*0.05
	cn=int(hn/0.1)
	for ii=1 to cn
		ff=rnd(.2)
		rot2 ff*100
		line2 -doorThickness, -b/2 + 0.02 + doorThickness , doorThickness, b/2 - 0.02 - doorThickness
		del 1
		add2 0.1, 0
	next ii
	del cn+1
return
