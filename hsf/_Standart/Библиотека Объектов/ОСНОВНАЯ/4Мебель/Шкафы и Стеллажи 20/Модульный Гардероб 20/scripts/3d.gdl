

if not(gs_shadow) then shadow off
if gs_detlevel_3D_m = 2 then	! Detailed
	resol gs_resol
else
	if gs_detlevel_3D_m = 1 then ! Simple
		resol 3
		gs_resol = 6
	else
		END	! Off
	endif
endif

pen gs_cont_pen


!-----Definitions-----
unID = 1
thickness = 0.02
emptyDoorBack = 0.01
plateThicknes = 0.002
hangerWidth = 0.025
hangerOversize = 0.032
wireDiameter = 0.003/2
minWireAlpha = 85
wireMeshDivision = 0.04
wireHandle = 0.1
if iFrameType = FRAME_WIRE then gs_cabinet_mat = matSteelCabinet

if not(bKnob) then knob_d=0
if gs_knob_type_m=KNOB_STYLE_1 then knob_d=0.025
if gs_knob_type_m=KNOB_STYLE_2 then knob_d=0.025
if gs_knob_type_m=KNOB_STYLE_3 then knob_d=0.03
if gs_knob_type_m=KNOB_STYLE_4 then knob_d=0.024
if gs_knob_type_m=KNOB_STYLE_5 then knob_d=0.025
if gs_knob_type_m=KNOB_STYLE_6 then knob_d=0.025
if gs_knob_type_m=KNOB_STYLE_7 then knob_d=0.03
if gs_knob_type_m=KNOB_STYLE_8 then knob_d=0.03

	! ======================================================================
	! Wire Basket Texture
	! ======================================================================

	DIM	tmp_C4D_ChCol_Color[3]
		tmp_C4D_ChCol_Color[1] = 0.642266824085
		tmp_C4D_ChCol_Color[2] = 0.6509023444088
		tmp_C4D_ChCol_Color[3] = 0.6530612244898
	DIM	tmp_C4D_GKRGB_Color_4[3]
		tmp_C4D_GKRGB_Color_4[1] =            1
		tmp_C4D_GKRGB_Color_4[2] =            1
		tmp_C4D_GKRGB_Color_4[3] =            1
	DIM	tmp_C4D_GKRGB_Color_5[3]
		tmp_C4D_GKRGB_Color_5[1] = 0.765306122449
		tmp_C4D_GKRGB_Color_5[2] = 0.765306122449
		tmp_C4D_GKRGB_Color_5[3] = 0.765306122449
	DIM	tmp_C4D_ShNoise_Color1_6[3]
		tmp_C4D_ShNoise_Color1_6[1] = 0.6428571428571
		tmp_C4D_ShNoise_Color1_6[2] = 0.6428571428571
		tmp_C4D_ShNoise_Color1_6[3] = 0.6428571428571
	DIM	tmp_C4D_ShNoise_Color2_6[3]
		tmp_C4D_ShNoise_Color2_6[1] =            1
		tmp_C4D_ShNoise_Color2_6[2] =            1
		tmp_C4D_ShNoise_Color2_6[3] =            1
	DIM	tmp_C4D_ShNoise_RelativeScale_6[3]
		tmp_C4D_ShNoise_RelativeScale_6[1] =            1
		tmp_C4D_ShNoise_RelativeScale_6[2] =            1
		tmp_C4D_ShNoise_RelativeScale_6[3] =            1
	DIM	tmp_C4D_ChLum_Color[3]
		tmp_C4D_ChLum_Color[1] =            1
		tmp_C4D_ChLum_Color[2] =            1
		tmp_C4D_ChLum_Color[3] =            1
	DIM	tmp_C4D_ChTra_Color[3]
		tmp_C4D_ChTra_Color[1] =            1
		tmp_C4D_ChTra_Color[2] =            1
		tmp_C4D_ChTra_Color[3] =            1
	DIM	tmp_C4D_ChTra_AbsorptionColor[3]
		tmp_C4D_ChTra_AbsorptionColor[1] =            1
		tmp_C4D_ChTra_AbsorptionColor[2] =            1
		tmp_C4D_ChTra_AbsorptionColor[3] =            1
	DIM	tmp_C4D_ChRef_Color[3]
		tmp_C4D_ChRef_Color[1] =            1
		tmp_C4D_ChRef_Color[2] =            1
		tmp_C4D_ChRef_Color[3] =            1
	DIM	tmp_C4D_GKRGB_Color_9[3]
		tmp_C4D_GKRGB_Color_9[1] =            1
		tmp_C4D_GKRGB_Color_9[2] =            1
		tmp_C4D_GKRGB_Color_9[3] =            1
	DIM	tmp_C4D_GKRGB_Color_10[3]
		tmp_C4D_GKRGB_Color_10[1] =            0
		tmp_C4D_GKRGB_Color_10[2] =            0
		tmp_C4D_GKRGB_Color_10[3] =            0
	DIM	tmp_C4D_ChEnv_Color[3]
		tmp_C4D_ChEnv_Color[1] =            1
		tmp_C4D_ChEnv_Color[2] =            1
		tmp_C4D_ChEnv_Color[3] =            1
	DIM	tmp_C4D_ChFog_Color[3]
		tmp_C4D_ChFog_Color[1] =            1
		tmp_C4D_ChFog_Color[2] =            1
		tmp_C4D_ChFog_Color[3] =            1
	DIM	tmp_C4D_ShNoise_Color1_12[3]
		tmp_C4D_ShNoise_Color1_12[1] =         0.98
		tmp_C4D_ShNoise_Color1_12[2] =         0.98
		tmp_C4D_ShNoise_Color1_12[3] =         0.98
	DIM	tmp_C4D_ShNoise_Color2_12[3]
		tmp_C4D_ShNoise_Color2_12[1] =            1
		tmp_C4D_ShNoise_Color2_12[2] =            1
		tmp_C4D_ShNoise_Color2_12[3] =            1
	DIM	tmp_C4D_ShNoise_RelativeScale_12[3]
		tmp_C4D_ShNoise_RelativeScale_12[1] =            1
		tmp_C4D_ShNoise_RelativeScale_12[2] =            1
		tmp_C4D_ShNoise_RelativeScale_12[3] =            1
	DIM	tmp_C4D_ShNoise_Color1_13[3]
		tmp_C4D_ShNoise_Color1_13[1] =            0
		tmp_C4D_ShNoise_Color1_13[2] =            0
		tmp_C4D_ShNoise_Color1_13[3] =            0
	DIM	tmp_C4D_ShNoise_Color2_13[3]
		tmp_C4D_ShNoise_Color2_13[1] =            1
		tmp_C4D_ShNoise_Color2_13[2] =            1
		tmp_C4D_ShNoise_Color2_13[3] =            1
	DIM	tmp_C4D_ShNoise_RelativeScale_13[3]
		tmp_C4D_ShNoise_RelativeScale_13[1] =            1
		tmp_C4D_ShNoise_RelativeScale_13[2] =            1
		tmp_C4D_ShNoise_RelativeScale_13[3] =            1
	DIM	tmp_C4D_ChAlp_Color[3]
		tmp_C4D_ChAlp_Color[1] =            1
		tmp_C4D_ChAlp_Color[2] =            1
		tmp_C4D_ChAlp_Color[3] =            1
	DIM	tmp_C4D_ChAlp_Delta[3]
		tmp_C4D_ChAlp_Delta[1] = 0.1000000014901
		tmp_C4D_ChAlp_Delta[2] = 0.1000000014901
		tmp_C4D_ChAlp_Delta[3] = 0.1000000014901
	DIM	tmp_C4D_ChSpe_Color[3]
		tmp_C4D_ChSpe_Color[1] =            1
		tmp_C4D_ChSpe_Color[2] =            1
		tmp_C4D_ChSpe_Color[3] =            1
	DIM	tmp_C4D_ChGlo_Color[3]
		tmp_C4D_ChGlo_Color[1] =            1
		tmp_C4D_ChGlo_Color[2] =            1
		tmp_C4D_ChGlo_Color[3] =            1
	DIM	tmp_C4D_GKRGB_Color_15[3]
		tmp_C4D_GKRGB_Color_15[1] =            0
		tmp_C4D_GKRGB_Color_15[2] =            0
		tmp_C4D_GKRGB_Color_15[3] =            0
	DIM	tmp_C4D_GKRGB_Color_16[3]
		tmp_C4D_GKRGB_Color_16[1] =            1
		tmp_C4D_GKRGB_Color_16[2] =            1
		tmp_C4D_GKRGB_Color_16[3] =            1
	define material	"builtInMatWireBasket" 0,
	  0.642252,   0.650889,   0.653056,
	 0.65,  0.65,   0.9,     0,     11,     0,
	         1,          1,          1,
	         0,          0,          0,     0,
	ADDITIONAL_DATA		C4D_VER_MAIN= 1,
	C4D_VER_SUB =            0,
	C4D_ChCol_State =            1,
	C4D_ChCol_Color = tmp_C4D_ChCol_Color,
	C4D_ChCol_Brightness =          0.5,
	C4D_ChCol_Texture = "1",
	C4D_ShLayer_BlendMode_1 = "Normal",
	C4D_ShLayer_BlendStre_1 =            1,
	C4D_ShLayer_BlurOffset_1 =            0,
	C4D_ShLayer_BlurScale_1 =            0,
	C4D_ShLayer_Shaders_1 = "2,6",
	C4D_ShFresnel_BlendMode_2 = "Multiply",
	C4D_ShFresnel_BlendStre_2 =            1,
	C4D_ShFresnel_BlurOffset_2 =            0,
	C4D_ShFresnel_BlurScale_2 =            0,
	C4D_ShFresnel_UseBump_2 =            1,
	C4D_ShFresnel_Render_2 = "FrontAndBack",
	C4D_ShFresnel_Gradient_2 = "3",
	C4D_GradientRGB_Interpol_3 = "SmoothKnot",
	C4D_GradientRGB_Knots_3 = "4,5",
	C4D_GKRGB_Color_4 = tmp_C4D_GKRGB_Color_4,
	C4D_GKRGB_Intensity_4 =            1,
	C4D_GKRGB_Position_4 =            1,
	C4D_GKRGB_Bias_4 =          0.5,
	C4D_GKRGB_Color_5 = tmp_C4D_GKRGB_Color_5,
	C4D_GKRGB_Intensity_5 =            1,
	C4D_GKRGB_Position_5 =       0.0022,
	C4D_GKRGB_Bias_5 =          0.5,
	C4D_ShFresnel_Physical_2 =            0,
	C4D_ShFresnel_IOR_2 =      1.33283,
	C4D_ShFresnel_Preset_2 = "Water",
	C4D_ShFresnel_Invert_2 =            0,
	C4D_ShNoise_BlendMode_6 = "Normal",
	C4D_ShNoise_BlendStre_6 =            1,
	C4D_ShNoise_BlurOffset_6 =            0,
	C4D_ShNoise_BlurScale_6 =            0,
	C4D_ShNoise_Color1_6 = tmp_C4D_ShNoise_Color1_6,
	C4D_ShNoise_Color2_6 = tmp_C4D_ShNoise_Color2_6,
	C4D_ShNoise_Seed_6 =          610,
	C4D_ShNoise_Noise_6 = "Turbulence",
	C4D_ShNoise_Octaves_6 =            5,
	C4D_ShNoise_Space_6 = "Texture",
	C4D_ShNoise_GlobalScale_6 = 0.002000000094995,
	C4D_ShNoise_RelativeScale_6 = tmp_C4D_ShNoise_RelativeScale_6,
	C4D_ShNoise_Absolute_6 =            0,
	C4D_ShNoise_Cycles_6 =            0,
	C4D_ShNoise_LowClip_6 =            0,
	C4D_ShNoise_HighClip_6 =            1,
	C4D_ShNoise_Brightness_6 =            0,
	C4D_ShNoise_Contrast_6 =            0,
	C4D_ChCol_MixMode = "Multiply",
	C4D_ChCol_MixStrength =            1,
	C4D_ChDif_State =            0,
	C4D_ChDif_Brightness =            1,
	C4D_ChDif_Luminance =            0,
	C4D_ChDif_Specular =            1,
	C4D_ChDif_Reflection =            0,
	C4D_ChDif_MixMode = "Normal",
	C4D_ChDif_MixStrength =            1,
	C4D_ChLum_State =            0,
	C4D_ChLum_Color = tmp_C4D_ChLum_Color,
	C4D_ChLum_Brightness =            1,
	C4D_ChLum_MixMode = "Normal",
	C4D_ChLum_MixStrength =            1,
	C4D_ChTra_State =            0,
	C4D_ChTra_Color = tmp_C4D_ChTra_Color,
	C4D_ChTra_Brightness =            1,
	C4D_ChTra_Refraction =            1,
	C4D_ChTra_InternalReflections =            0,
	C4D_ChTra_ExitReflection =            1,
	C4D_ChTra_FresnelReflectivity =            1,
	C4D_ChTra_Additive =            0,
	C4D_ChTra_MixMode = "Normal",
	C4D_ChTra_MixStrength =            1,
	C4D_ChTra_AbsorptionColor = tmp_C4D_ChTra_AbsorptionColor,
	C4D_ChTra_AbsorptionDistance =          100,
	C4D_ChTra_Blurriness =            0,
	C4D_ChTra_MinSamples =            5,
	C4D_ChTra_MaxSamples =          128,
	C4D_ChTra_Accuracy =          0.5,
	C4D_ChRef_State =            1,
	C4D_ChRef_Color = tmp_C4D_ChRef_Color,
	C4D_ChRef_Brightness =            1,
	C4D_ChRef_Additive =            1,
	C4D_ChRef_Texture = "7",
	C4D_ShFresnel_BlendMode_7 = "Normal",
	C4D_ShFresnel_BlendStre_7 =            1,
	C4D_ShFresnel_BlurOffset_7 =            0,
	C4D_ShFresnel_BlurScale_7 =            0,
	C4D_ShFresnel_UseBump_7 =            1,
	C4D_ShFresnel_Render_7 = "FrontAndBack",
	C4D_ShFresnel_Gradient_7 = "8",
	C4D_GradientRGB_Interpol_8 = "SmoothKnot",
	C4D_GradientRGB_Knots_8 = "9,10",
	C4D_GKRGB_Color_9 = tmp_C4D_GKRGB_Color_9,
	C4D_GKRGB_Intensity_9 =            1,
	C4D_GKRGB_Position_9 =            0,
	C4D_GKRGB_Bias_9 =          0.5,
	C4D_GKRGB_Color_10 = tmp_C4D_GKRGB_Color_10,
	C4D_GKRGB_Intensity_10 =            1,
	C4D_GKRGB_Position_10 =            1,
	C4D_GKRGB_Bias_10 =          0.5,
	C4D_ShFresnel_Physical_7 =            1,
	C4D_ShFresnel_IOR_7 =          2.5,
	C4D_ShFresnel_Preset_7 = "Custom",
	C4D_ShFresnel_Invert_7 =            0,
	C4D_ChRef_MixMode = "Multiply",
	C4D_ChRef_MixStrength =            1,
	C4D_ChRef_Blurriness =          0.2,
	C4D_ChRef_MinSamples =            5,
	C4D_ChRef_MaxSamples =          128,
	C4D_ChRef_Accuracy =          0.5,
	C4D_ChEnv_State =            0,
	C4D_ChEnv_Color = tmp_C4D_ChEnv_Color,
	C4D_ChEnv_Brightness =            1,
	C4D_ChEnv_MixMode = "Multiply",
	C4D_ChEnv_MixStrength =            1,
	C4D_ChEnv_TilesX =            1,
	C4D_ChEnv_TilesY =            1,
	C4D_ChEnv_Exclusive =            1,
	C4D_ChFog_State =            0,
	C4D_ChFog_Color = tmp_C4D_ChFog_Color,
	C4D_ChFog_Brightness =            1,
	C4D_ChFog_Distance =           10,
	C4D_ChBum_State =            1,
	C4D_ChBum_Strength =         0.02,
	C4D_ChBum_MipFalloff =            1,
	C4D_ChBum_Texture = "11",
	C4D_ShLayer_BlendMode_11 = "Normal",
	C4D_ShLayer_BlendStre_11 =            1,
	C4D_ShLayer_BlurOffset_11 =            0,
	C4D_ShLayer_BlurScale_11 =            0,
	C4D_ShLayer_Shaders_11 = "12,13",
	C4D_ShNoise_BlendMode_12 = "Multiply",
	C4D_ShNoise_BlendStre_12 =            1,
	C4D_ShNoise_BlurOffset_12 =            0,
	C4D_ShNoise_BlurScale_12 =            0,
	C4D_ShNoise_Color1_12 = tmp_C4D_ShNoise_Color1_12,
	C4D_ShNoise_Color2_12 = tmp_C4D_ShNoise_Color2_12,
	C4D_ShNoise_Seed_12 =          665,
	C4D_ShNoise_Noise_12 = "Noise",
	C4D_ShNoise_Octaves_12 =            5,
	C4D_ShNoise_Space_12 = "UV",
	C4D_ShNoise_GlobalScale_12 =         0.01,
	C4D_ShNoise_RelativeScale_12 = tmp_C4D_ShNoise_RelativeScale_12,
	C4D_ShNoise_Absolute_12 =            0,
	C4D_ShNoise_Cycles_12 =            0,
	C4D_ShNoise_LowClip_12 =            0,
	C4D_ShNoise_HighClip_12 =            1,
	C4D_ShNoise_Brightness_12 =            0,
	C4D_ShNoise_Contrast_12 =            0,
	C4D_ShNoise_BlendMode_13 = "Normal",
	C4D_ShNoise_BlendStre_13 =            1,
	C4D_ShNoise_BlurOffset_13 =            0,
	C4D_ShNoise_BlurScale_13 =            0,
	C4D_ShNoise_Color1_13 = tmp_C4D_ShNoise_Color1_13,
	C4D_ShNoise_Color2_13 = tmp_C4D_ShNoise_Color2_13,
	C4D_ShNoise_Seed_13 =          665,
	C4D_ShNoise_Noise_13 = "Turbulence",
	C4D_ShNoise_Octaves_13 =            5,
	C4D_ShNoise_Space_13 = "UV",
	C4D_ShNoise_GlobalScale_13 =            8,
	C4D_ShNoise_RelativeScale_13 = tmp_C4D_ShNoise_RelativeScale_13,
	C4D_ShNoise_Absolute_13 =            0,
	C4D_ShNoise_Cycles_13 =            0,
	C4D_ShNoise_LowClip_13 =            0,
	C4D_ShNoise_HighClip_13 =            1,
	C4D_ShNoise_Brightness_13 =            0,
	C4D_ShNoise_Contrast_13 = 0.3199999332428,
	C4D_ChNor_State =            0,
	C4D_ChNor_Strength =            1,
	C4D_ChNor_Method = "Tangent",
	C4D_ChNor_FlipX =            0,
	C4D_ChNor_FlipY =            0,
	C4D_ChNor_FlipZ =            0,
	C4D_ChNor_SwapYZ =            0,
	C4D_ChAlp_State =            0,
	C4D_ChAlp_Color = tmp_C4D_ChAlp_Color,
	C4D_ChAlp_Delta = tmp_C4D_ChAlp_Delta,
	C4D_ChAlp_Invert =            0,
	C4D_ChAlp_Soft =            1,
	C4D_ChAlp_ImageAlpha =            1,
	C4D_ChAlp_PreMultiplied =            0,
	C4D_ChSpe_State =            1,
	C4D_ChSpe_Color = tmp_C4D_ChSpe_Color,
	C4D_ChSpe_Brightness =            1,
	C4D_ChSpe_MixMode = "Normal",
	C4D_ChSpe_MixStrength =            1,
	C4D_ChSpe_Mode = "Colored",
	C4D_ChSpe_Width =          0.7,
	C4D_ChSpe_Height =            2,
	C4D_ChSpe_Falloff =            0,
	C4D_ChSpe_InnerWidth =            0,
	C4D_ChGlo_State =            0,
	C4D_ChGlo_Color = tmp_C4D_ChGlo_Color,
	C4D_ChGlo_Brightness =            1,
	C4D_ChGlo_InnerStrength =            1,
	C4D_ChGlo_OuterStrength =            5,
	C4D_ChGlo_Radius =           10,
	C4D_ChGlo_Random =            0,
	C4D_ChGlo_Frequency =            1,
	C4D_ChGlo_UseMatColor =            1,
	C4D_ChDis_State =            0,
	C4D_ChDis_Strength =            1,
	C4D_ChDis_Height =            5,
	C4D_ChDis_Type = "IntensityCentered",
	C4D_ChDis_SubDivision =            0,
	C4D_ChDis_Level =            4,
	C4D_ChDis_RoundGeometry =            0,
	C4D_ChDis_RoundContour =            1,
	C4D_ChDis_MapRounded =            1,
	C4D_ChDis_MapResult =            0,
	C4D_ChDis_KeepEdges =            1,
	C4D_ChDis_BestDistribution =            1,
	C4D_ChGra_State =            0,
	C4D_ChGra_Color = "14",
	C4D_GradientRGB_Interpol_14 = "SmoothKnot",
	C4D_GradientRGB_Knots_14 = "15,16",
	C4D_GKRGB_Color_15 = tmp_C4D_GKRGB_Color_15,
	C4D_GKRGB_Intensity_15 =            1,
	C4D_GKRGB_Position_15 =            0,
	C4D_GKRGB_Bias_15 =          0.5,
	C4D_GKRGB_Color_16 = tmp_C4D_GKRGB_Color_16,
	C4D_GKRGB_Intensity_16 =            1,
	C4D_GKRGB_Position_16 =            1,
	C4D_GKRGB_Bias_16 =          0.5,
	C4D_ChGra_MixStrength =          0.5,
	C4D_ChGra_Density =            1,
	C4D_ChGra_Length =          0.1,
	C4D_ChGra_Width =        0.005,
	C4D_ChGra_Crinkle =          0.1,
	C4D_ChGra_Bend =          0.6,
	C4D_ChGra_Wetness =         0.05,
	C4D_ChIll_GenerateGI =            1,
	C4D_ChIll_GenGIStrength =            1,
	C4D_ChIll_GenGISaturat =            1,
	C4D_ChIll_ReceiveGI =            1,
	C4D_ChIll_RecGIStrength =            1,
	C4D_ChIll_RecGISaturat =            1,
	C4D_ChIll_GIPortal =            0,
	C4D_ChIll_GILight =            0,
	C4D_ChIll_GenerateCaustics =            1,
	C4D_ChIll_GenCausticsStrength =            1,
	C4D_ChIll_ReceiveCaustics =            1,
	C4D_ChIll_RecCausticsStrength =            1,
	C4D_ChIll_Radius =          0.1,
	C4D_ChIll_CausticsSamples =          100,
	C4D_ChIll_Model = "Blinn",
	C4D_ChIll_DiffuseFalloff =            0,
	C4D_ChIll_DiffuseLevel =            1,
	C4D_ChIll_Roughness =          0.5


! ==============================================================================
! Hotspots
! ==============================================================================
call "Resize_A_B_ZZYZX" parameters ALL

hotspot a/2, b, ZZYZX, unID : unID = unID + 1
hotspot a/2, b, 0, unID 	: unID = unID + 1

!-----Base Height-----
if bBase and iFrameType <> FRAME_WIRE then
	hotspot  0, 0,  0,    unID, leg_h, 1+128				: unID=unID+1
	hotspot  0, 0, -1, 	  unID, leg_h, 3					: unID=unID+1
	hotspot  0, 0, leg_h, unID, leg_h, 2					: unID=unID+1

	hotspot  0, b,  0,    unID, leg_h, 1+128				: unID=unID+1
	hotspot  0, b, -1, 	  unID, leg_h, 3					: unID=unID+1
	hotspot  0, b, leg_h, unID, leg_h, 2					: unID=unID+1

	hotspot  a, b,  0,    unID, leg_h, 1+128				: unID=unID+1
	hotspot  a, b, -1, 	  unID, leg_h, 3					: unID=unID+1
	hotspot  a, b, leg_h, unID, leg_h, 2					: unID=unID+1

	hotspot  a, 0,  0,    unID, leg_h, 1+128				: unID=unID+1
	hotspot  a, 0, -1, 	  unID, leg_h, 3					: unID=unID+1
	hotspot  a, 0, leg_h, unID, leg_h, 2					: unID=unID+1
endif

for i = 1 to nModule
	if i > 1 then
		startModulX = frameWidth
		for kk = 1 to i-1
			startModulX = startModulX + moduleWidth[kk]
		next kk
		tempModulWidth = moduleWidth[i]

		if i = 2 then
			hotspot  startModulX+tempModulWidth, 0, leg_h, unID											: unID=unID+1
			hotspot  startModulX+tempModulWidth, 0, ZZYZX, unID											: unID=unID+1
			if not(bUniform) then
				hotspot  startModulX+tempModulWidth, 0, ZZYZX/2, unID, modulWidth02, 1					: unID=unID+1
				hotspot  startModulX+tempModulWidth+1, 0, ZZYZX/2, unID, modulWidth02, 3				: unID=unID+1
				hotspot  startModulX, 0, ZZYZX/2, unID, modulWidth02, 2									: unID=unID+1
			endif

			if bDivision02 then
				hotspot  startModulX+tempModulWidth/2, 0,  0, unID, divisionHeight02, 1+128				: unID=unID+1
				hotspot  startModulX+tempModulWidth/2, 0, -1, unID, divisionHeight02, 3					: unID=unID+1
				hotspot  startModulX+tempModulWidth/2, 0, divisionHeight02, unID, divisionHeight02, 2	: unID=unID+1
			endif
		endif

		if i = 3 then
			hotspot  startModulX+tempModulWidth, 0, leg_h, unID											: unID=unID+1
			hotspot  startModulX+tempModulWidth, 0, ZZYZX, unID											: unID=unID+1
			if not(bUniform) then
				hotspot  startModulX+tempModulWidth, 0, ZZYZX/2, unID, modulWidth03, 1+128				: unID=unID+1
				hotspot  startModulX+tempModulWidth+1, 0, ZZYZX/2, unID, modulWidth03, 3				: unID=unID+1
				hotspot  startModulX, 0, ZZYZX/2, unID, modulWidth03, 2									: unID=unID+1
			endif

			if bDivision03 then
				hotspot  startModulX+tempModulWidth/2, 0,  0, unID, divisionHeight03, 1+128				: unID=unID+1
				hotspot  startModulX+tempModulWidth/2, 0, -1, unID, divisionHeight03, 3					: unID=unID+1
				hotspot  startModulX+tempModulWidth/2, 0, divisionHeight03, unID, divisionHeight03, 2	: unID=unID+1
			endif
		endif

		if i = 4 then
			hotspot  startModulX+tempModulWidth, 0, leg_h, unID											: unID=unID+1
			hotspot  startModulX+tempModulWidth, 0, ZZYZX, unID											: unID=unID+1
			if not(bUniform) then
				hotspot  startModulX+tempModulWidth, 0, ZZYZX/2, unID, modulWidth04, 1+128				: unID=unID+1
				hotspot  startModulX+tempModulWidth+1, 0, ZZYZX/2, unID, modulWidth04, 3				: unID=unID+1
				hotspot  startModulX, 0, ZZYZX/2, unID, modulWidth04, 2									: unID=unID+1
			endif

			if bDivision04 then
				hotspot  startModulX+tempModulWidth/2, 0,  0, unID, divisionHeight04, 1+128				: unID=unID+1
				hotspot  startModulX+tempModulWidth/2, 0, -1, unID, divisionHeight04, 3					: unID=unID+1
				hotspot  startModulX+tempModulWidth/2, 0, divisionHeight04, unID, divisionHeight04, 2	: unID=unID+1
			endif
		endif

		if i = 5 then
			hotspot  startModulX+tempModulWidth, 0, leg_h, unID											: unID=unID+1
			hotspot  startModulX+tempModulWidth, 0, ZZYZX, unID											: unID=unID+1
			if not(bUniform) then
				hotspot  startModulX+tempModulWidth, 0, ZZYZX/2, unID, modulWidth05, 1+128				: unID=unID+1
				hotspot  startModulX+tempModulWidth+1, 0, ZZYZX/2, unID, modulWidth05, 3				: unID=unID+1
				hotspot  startModulX, 0, ZZYZX/2, unID, modulWidth05, 2									: unID=unID+1
			endif

			if bDivision05 then
				hotspot  startModulX+tempModulWidth/2, 0,  0, unID, divisionHeight05, 1+128				: unID=unID+1
				hotspot  startModulX+tempModulWidth/2, 0, -1, unID, divisionHeight05, 3					: unID=unID+1
				hotspot  startModulX+tempModulWidth/2, 0, divisionHeight05, unID, divisionHeight05, 2	: unID=unID+1
			endif
		endif

		if i = 6 then
			hotspot  startModulX+tempModulWidth, 0, leg_h,unID											: unID=unID+1
			hotspot  startModulX+tempModulWidth, 0, ZZYZX, unID											: unID=unID+1
			if not(bUniform) then
				hotspot  startModulX+tempModulWidth, 0, ZZYZX/2, unID, modulWidth06, 1+128				: unID=unID+1
				hotspot  startModulX+tempModulWidth+1, 0, ZZYZX/2, unID, modulWidth06, 3				: unID=unID+1
				hotspot  startModulX, 0, ZZYZX/2, unID, modulWidth06, 2									: unID=unID+1
			endif

			if bDivision06 then
				hotspot  startModulX+tempModulWidth/2, 0,  0, unID, divisionHeight06, 1+128				: unID=unID+1
				hotspot  startModulX+tempModulWidth/2, 0, -1, unID, divisionHeight06, 3					: unID=unID+1
				hotspot  startModulX+tempModulWidth/2, 0, divisionHeight06, unID, divisionHeight06, 2	: unID=unID+1
			endif
		endif
	else
		startModulX = 0
		tempModulWidth = moduleWidth[i] + frameWidth
		hotspot  startModulX+tempModulWidth, 0, leg_h, unID												: unID=unID+1
		hotspot  startModulX+tempModulWidth, 0, ZZYZX, unID												: unID=unID+1

		if bDivision01 then
			hotspot  startModulX+tempModulWidth/2, 0,  0, unID, divisionHeight01, 1+128					: unID=unID+1
			hotspot  startModulX+tempModulWidth/2, 0, -1, unID, divisionHeight01, 3						: unID=unID+1
			hotspot  startModulX+tempModulWidth/2, 0, divisionHeight01, unID, divisionHeight01, 2		: unID=unID+1
		endif
	endif
next i


! ==============================================================================
! Base
! ==============================================================================
corOverhang  = 0
corOverhangL = 0
corOverhangR = 0
cabinetStartX = 0
if abs(cot)<eps then cooh=0
if not(bCornice) then
	cot=0
	cooh=0
else
	if gs_lining_m=1 then
		corOverhangL = cooh
		corOverhangR = cooh
		cabinetStartX = -cooh
	endif
	if gs_lining_m=2 then
		corOverhangR = cooh
		corOverhangL = 0
		cabinetStartX = 0
	endif
	if gs_lining_m=3 then
		corOverhangR = 0
		corOverhangL = cooh
		cabinetStartX = -cooh
	endif
endif
corOverhang = corOverhangL+corOverhangR


! ----- Frame -----
panelWidth = B-(iFrameType = FRAME_SOLID_BACK)*frameWidth-2*doorThickness*(nDoor>1) - doorThickness*(iFrameType <> FRAME_WIRE) - emptyDoorBack*(iFrameType <> FRAME_WIRE)
panelHeight = ZZYZX-cot-leg_h-frameWidth-frameWidth*(iFrameType <> FRAME_WIRE and leg_h > 0)
if iFrameType = FRAME_WIRE then
	gosub "steelFrames"
else
	gosub "woodFrames"
endif

! -----Panels -----
addx frameWidth
for i = 1 to nModule-1
	addx moduleWidth[i]
	gosub "panels"
next i
del nModule

! -----Divisions -----
addx frameWidth
bPreDiv = 0
for i = 1 to nModule
	tempModulWidth = moduleWidth[i]-frameWidth
	if iFrameType = FRAME_WIRE then
		addz frameWidth
		cprism_ gs_cabinet_mat, gs_cabinet_mat, gs_cabinet_mat,
			4, frameWidth,
			0,b,15,
			0, b-frameWidth,15,
			tempModulWidth, b-frameWidth,15,
			tempModulWidth, b, 15
		gosub "textureHorizontal_01"
		del 1
	endif
	if (moduleMatrix[1+(i-1)*nElement][1]) then

		divisionHeight = moduleMatrix[1+(i-1)*nElement][2]
		gosub "divisions"
		bPreDiv = 1
	else
		bPreDiv = 0
	endif
	addx moduleWidth[i]
next i
del nModule+1


add (a+corOverhang)/2-corOverhangL, b, 0
! ----- Cornices -----
if bCornice then
	mulx -1
	addz zzyzx-cot
	CALL "fa_cornicetyp" PARAMETERS ALL A=A+corOverhang, B=B+cooh, side_overhang = cooh
	del 2
endif

! ----- Legs -----
if bBase then
	CALL "fa_cabinet_legtyp" PARAMETERS A = A+corOverhang,
										B = B+cooh,
										gs_detlevel_3D_m = gs_detlevel_3D_m,
										gs_leg_type_m = gs_leg_type_m,
										leg_h = leg_h,
										leg_w = leg_w,
										cooh=cooh,
										side_overhang = cooh,
										gs_resol = gs_resol,
										gs_leg_mat = gs_leg_mat,
										gs_cont_pen = gs_cont_pen,
										gs_lining_m = gs_lining_m
endif

del 1


! ==============================================================================
! Interior Fittings
! ==============================================================================
addx frameWidth
for i = 1 to nModule
	tempModulWidth = moduleWidth[i]-frameWidth
	bDivision = moduleMatrix[1+(i-1)*nElement][1]
	if bDivision then															!! Horizontal division
		divisionHeight = moduleMatrix[1+(i-1)*nElement][2]

		! Above
		addz divisionHeight
		AboveOrUnder = 1
		tempModulHeight = ZZYZX-cot-frameWidth - divisionHeight
		gosub "interior"
		del 1

		! Under
		addz leg_h+frameWidth*(iFrameType <> FRAME_WIRE and leg_h > 0)
		AboveOrUnder = 2
		tempModulHeight = divisionHeight-leg_h-frameWidth*(iFrameType <> FRAME_WIRE and leg_h > 0) - frameWidth
		gosub "interior"
		del 1
	else																		!! No Division
		addz leg_h+frameWidth*(iFrameType <> FRAME_WIRE and leg_h > 0)
		AboveOrUnder = 1
		tempModulHeight = panelHeight
		gosub "interior"
		del 1
	endif
	addx moduleWidth[i]
next i
del nModule+1



! ==============================================================================
! Door Settings
! ==============================================================================
if iDoorType <> DOOR_TYPE_NONE then

	! Rail
	doorHeight = panelHeight + frameWidth*(iFrameType = FRAME_WIRE)
	doorFullWidth = A-2*frameWidth*(iFrameType <> FRAME_WIRE)
	doorOffsetX = frameWidth*(iFrameType <> FRAME_WIRE)
	doorOffsetZ = leg_h+frameWidth*(iFrameType <> FRAME_WIRE and leg_h > 0)

	rotx 90
	add doorOffsetX, doorOffsetZ, -2*doorThickness - emptyDoorBack*(iFrameType <> FRAME_WIRE)
	cprism_ matSteelCabinet, matSteelCabinet, matSteelCabinet,
			10, 2*doorThickness,
			0, 0, 15,
			doorFullWidth, 0, 15,
			doorFullWidth, doorHeight, 15,
			0, doorHeight, 15,
			0, 0, -1,
			railThickness, railThickness, 15,
			doorFullWidth-railThickness, railThickness, 15,
			doorFullWidth-railThickness, doorHeight-railThickness, 15,
			railThickness, doorHeight-railThickness, 15,
			railThickness, railThickness, -1
	del 2

	! Door
	bMirrored = 0
	gs_full_edit = 0
	bFormMirror = 0
	bSliding = 1
	bAngleEdit = 0
	opening = 0

	doorHeight = doorHeight - 2*railThickness
	doorFullWidth = doorFullWidth - 2*railThickness

	add frameWidth*(iFrameType <> FRAME_WIRE)+railThickness, emptyDoorBack*(iFrameType <> FRAME_WIRE)+doorThickness,doorOffsetZ+railThickness
	for i=1 to nDoor
		if i = 1 then opening = openingDoor1
		if i = 2 then opening = openingDoor2
		if i = 3 then opening = openingDoor3
		if ceil(nDoor/2)=nDoor/2 then
			if ceil(i/2)<>i/2 then
				bMirrored = 1
				bFormMirror = 0
				slidingOffset =  doorThickness
				knobOffset = -knob_d
			else
				bMirrored = 0
				if iDoorStyle = 18 and nDoor= 2 then
					bFormMirror = 0
				else
					bFormMirror = 1
				endif
				slidingOffset = 0
				knobOffset = -knob_d - doorThickness
			endif
		else
			if ceil(i/2)<>i/2 then
				bMirrored = 0
				if i = 1 then bMirrored = 1
				bFormMirror = 0
				slidingOffset =  doorThickness
				knobOffset = -knob_d
			else
				bMirrored = 1
				bFormMirror = 1
				slidingOffset = 0
				knobOffset = -knob_d - doorThickness
			endif
		endif
		if iDoorStyle = 16 then bFormMirror = 0

		doorTempWidth = doorFullWidth/nDoor

		doordirection = 0
		if not(bMirrored) then
			hostspotStart = doorTempWidth-knob_pl_x
			doordirection = -1
		else
			hostspotStart = knob_pl_x
			doordirection = 1
		endif
		openingoffset = doorTempWidth * (opening/100) * doordirection

		if i = 1 then
			hotspot  hostspotStart, knobOffset, knob_pl_y,   			unID, openingDoorLength1, 1+128					: unID=unID+1
			hotspot  hostspotStart-doordirection, knobOffset, knob_pl_y, unID, openingDoorLength1, 3					: unID=unID+1
			hotspot  hostspotStart+openingoffset, knobOffset, knob_pl_y, unID, openingDoorLength1, 2, openingDoor1		: unID=unID+1
		endif

		if i = 2 then
			hotspot  hostspotStart, knobOffset, knob_pl_y,   			unID, openingDoorLength2, 1+128					: unID=unID+1
			hotspot  hostspotStart-doordirection, knobOffset, knob_pl_y, unID, openingDoorLength2, 3					: unID=unID+1
			hotspot  hostspotStart+openingoffset, knobOffset, knob_pl_y, unID, openingDoorLength2, 2, openingDoor2		: unID=unID+1
		endif

		if i = 3 then
			hotspot  hostspotStart, knobOffset, knob_pl_y,   			unID, openingDoorLength3, 1+128					: unID=unID+1
			hotspot  hostspotStart-doordirection, knobOffset, knob_pl_y, unID, openingDoorLength3, 3					: unID=unID+1
			hotspot  hostspotStart+openingoffset, knobOffset, knob_pl_y, unID, openingDoorLength3, 2, openingDoor3		: unID=unID+1
		endif

		add openingoffset, slidingOffset, 0

		if iDoorStyle = 14 or iDoorStyle = 15 then
			_matDoorDecor1 = matDoorInset2
		else
			_matDoorDecor1 = matDoorInset1
		endif

		call "fa_warddoortyp" parameters all	bNotMacro		= 0,
												gs_full_edit	= gs_full_edit,
												bAngleEdit		= 0,
												doorAngle3D		= 0,
												bMirrored		= bMirrored,
												bFormMirror		= bFormMirror,
												doorFrameWidth	= doorFrameWidth,
												bSliding		= bSliding,
												cabdoortyp_unID	= unID,
												doorWidth		= doorTempWidth,
												doorHeight		= doorHeight,
												bBevel			= bBevel,
												matDoorGlass	= matDoorInset1,
												matDoorMirror	= matDoorInset1,
												matDoorDecor1	= _matDoorDecor1,
												matDoorDecor2	= matDoorInset2,
												matDoorFrame	= matDoorFrame,
												returned_parameters cabdoortyp_unID
		unID = cabdoortyp_unID
		del 1
		addx doorTempWidth
	next i
	del nDoor+1
endif


! ======================================================================
! END
! ======================================================================

END

! ======================================================================
! SubRoutines
! ======================================================================
"interior":
	iInteriorType = moduleMatrix[2+(i-1)*nElement][AboveOrUnder]
	tModulWidth = tempModulWidth

	if iInteriorType = INTERIOR_SHELF then
		nTempNumber = moduleMatrix[3+(i-1)*nElement][AboveOrUnder]
		gosub "shelves"
	endif

	if iInteriorType = INTERIOR_DRAWER then
		nTempNumber = moduleMatrix[4+(i-1)*nElement][AboveOrUnder]
		gosub "drawers"
	endif

	if iInteriorType = INTERIOR_DRAWERFRONT then
		nTempNumber = moduleMatrix[5+(i-1)*nElement][AboveOrUnder]
		gosub "drawers"
	endif

	if iInteriorType = INTERIOR_WIRE then
		nTempNumber = moduleMatrix[6+(i-1)*nElement][AboveOrUnder]
		gosub "wireBaskets"
	endif

	if iInteriorType = INTERIOR_HANGER then
		nTempNumber = moduleMatrix[7+(i-1)*nElement][AboveOrUnder]
		gosub "hangers"
	endif
return



! ======================================================================
! Frames Macro
! ======================================================================
"woodFrames":
	addz leg_h
	rotx 90
	addz -b

	if (iFrameType = FRAME_SOLID_BACK) then
		cprism_ gs_cabinet_mat, gs_cabinet_mat, gs_cabinet_mat,
				4, frameWidth,
				a-frameWidth, frameWidth*(leg_h > 0),14+(leg_h < eps),
				frameWidth, frameWidth*(leg_h > 0),14,
				frameWidth, zzyzx-cot-leg_h-frameWidth,14,
				a-frameWidth, zzyzx-cot-leg_h-frameWidth,14
		gosub "textureHorizontal_01"
	endif

	bBack = (iFrameType = FRAME_SOLID)
	if leg_h > 0 then
		cprism_ gs_cabinet_mat, gs_cabinet_mat, gs_cabinet_mat,
			10, B,
			a,0,15,
			0,0,15,
			0, zzyzx-cot-leg_h,15,
			a, zzyzx-cot-leg_h,15,
			a, 0, -1,
			a-frameWidth, frameWidth,14+bBack,
			frameWidth, frameWidth,14+bBack,
			frameWidth, zzyzx-cot-leg_h-frameWidth,14+bBack,
			a-frameWidth, zzyzx-cot-leg_h-frameWidth,14+bBack,
			a-frameWidth, frameWidth,-1

		gosub "textureHorizontal_01"
	else
		cprism_ gs_cabinet_mat, gs_cabinet_mat, gs_cabinet_mat,
			8, B,
			0,0,15,
			0, zzyzx-cot,15,
			a, zzyzx-cot,15,
			a, 0, 15,
			a-frameWidth, 0, 14+bBack,
			a-frameWidth, zzyzx-cot-frameWidth, 14+bBack,
			frameWidth, zzyzx-cot-frameWidth,14+bBack,
			frameWidth, 0, 15

		gosub "textureHorizontal_01"
	endif
	del 3
return


"steelFrames":
	!Horizontal beam
	addz panelHeight
	cprism_ gs_cabinet_mat, gs_cabinet_mat, gs_cabinet_mat,
		4, frameWidth,
		0, b,15,
		a, b, 15,
		a, b-frameWidth, 15,
		0, b-frameWidth, 15
	gosub "textureHorizontal_01"

	cprism_ gs_cabinet_mat, gs_cabinet_mat, gs_cabinet_mat,
		4, frameWidth,
		0, b-panelWidth,15,
		a, b-panelWidth, 15,
		a, b-panelWidth+frameWidth, 15,
		0, b-panelWidth+frameWidth, 15
	gosub "textureHorizontal_01"

	del 1

	addx frameWidth
	gosub "steelFrame"
	addx a-frameWidth
	gosub "steelFrame"
	del 2
return

"steelFrame":
	addy b
	cprism_ gs_cabinet_mat, gs_cabinet_mat, gs_cabinet_mat,
		4, panelHeight,
		0,0,15,
		-frameWidth, 0, 15,
		-frameWidth, -frameWidth, 15,
		0, -frameWidth, 15
	gosub "textureVertical_01"

	cprism_ gs_cabinet_mat, gs_cabinet_mat, gs_cabinet_mat,
		4, panelHeight,
		0,-panelWidth,15,
		-frameWidth, -panelWidth, 15,
		-frameWidth, -panelWidth+frameWidth, 15,
		0, -panelWidth+frameWidth, 15
	gosub "textureVertical_01"

	addz panelHeight
	cprism_ gs_cabinet_mat, gs_cabinet_mat, gs_cabinet_mat,
		4, frameWidth,
		0,-frameWidth,15,
		-frameWidth, -frameWidth, 15,
		-frameWidth, -panelWidth+frameWidth, 15,
		0, -panelWidth+frameWidth, 15
	gosub "textureVertical_02"
	del 1

	addz frameWidth
	cprism_ gs_cabinet_mat, gs_cabinet_mat, gs_cabinet_mat,
		4, frameWidth,
		0,-frameWidth,15,
		-frameWidth, -frameWidth, 15,
		-frameWidth, -panelWidth+frameWidth, 15,
		0, -panelWidth+frameWidth, 15
	gosub "textureVertical_02"
	del 1

	del 1
return


! ======================================================================
! Panels Macro
! ======================================================================
"panels":
	if (iFrameType = FRAME_WIRE) then
		gosub "steelFrame"
	else
		add 0, B-(iFrameType = FRAME_SOLID_BACK)*frameWidth, leg_h + frameWidth*(leg_h > 0)
		cprism_ gs_cabinet_mat, gs_cabinet_mat, gs_cabinet_mat,
			4, panelHeight,
			0,0,15,
			0, -panelWidth,15,
			-frameWidth, -panelWidth,15,
			-frameWidth, 0, 15
		gosub "textureVertical_01"
		del 1
	endif
return


! ======================================================================
! Divisions Macro
! ======================================================================
"divisions":
	if (iFrameType = FRAME_WIRE) then
		addz divisionHeight-frameWidth
		yOffset = 2*doorThickness*(nDoor>1) + doorThickness*(iFrameType <> FRAME_WIRE) + emptyDoorBack*(iFrameType <> FRAME_WIRE)

		cprism_ gs_cabinet_mat, gs_cabinet_mat, gs_cabinet_mat,
			4, frameWidth,
			0,b,15,
			0, b-frameWidth,15,
			tempModulWidth, b-frameWidth,15,
			tempModulWidth, b, 15
		gosub "textureHorizontal_01"

		cprism_ gs_cabinet_mat, gs_cabinet_mat, gs_cabinet_mat,
			4, frameWidth,
			0, yOffset,15,
			0, yOffset+frameWidth,15,
			tempModulWidth, yOffset+frameWidth,15,
			tempModulWidth, yOffset, 15
		gosub "textureHorizontal_01"

		if not(bPreDiv) then
			cprism_ gs_cabinet_mat, gs_cabinet_mat, gs_cabinet_mat,
				4, frameWidth,
				0, b-frameWidth,15,
				-frameWidth, b-frameWidth, 15,
				-frameWidth, b-panelWidth+frameWidth, 15,
				0, b-panelWidth+frameWidth, 15
			gosub "textureVertical_02"
		endif

		cprism_ gs_cabinet_mat, gs_cabinet_mat, gs_cabinet_mat,
			4, frameWidth,
			tempModulWidth, b-frameWidth,15,
			tempModulWidth+frameWidth, b-frameWidth, 15,
			tempModulWidth+frameWidth, b-panelWidth+frameWidth, 15,
			tempModulWidth, b-panelWidth+frameWidth, 15
		gosub "textureVertical_02"

		del 1
	else
		add 0, B-(iFrameType = FRAME_SOLID_BACK)*frameWidth, divisionHeight-frameWidth
		cprism_ gs_cabinet_mat, gs_cabinet_mat, gs_cabinet_mat,
			4, frameWidth,
			0,0,15,
			0, -panelWidth,15,
			tempModulWidth, -panelWidth,15,
			tempModulWidth, 0, 15
		gosub "textureHorizontal_01"
		del 1
	endif
return


! ======================================================================
! Drawers Macro
! ======================================================================
"drawers":
	if iFrameType = FRAME_WIRE then tModulWidth = tempModulWidth - 2*plateThicknes
	doorHeight = (tempModulHeight+bDivision*thickness/2)/nTempNumber
	doorWidth = tModulWidth+thickness/2*(i<>1 and nModule<>1)+thickness/2*(i<>nModule and nModule<>1)
	drawerDepth = panelWidth+thickness

	add -thickness/2*(i<>1), B-(iFrameType = FRAME_SOLID_BACK)*frameWidth-panelWidth, -thickness/2*bDivision*(AboveOrUnder = 1)
	for kk=1 to nTempNumber
		if iInteriorType = INTERIOR_DRAWER then gosub "drawer"
		if iInteriorType = INTERIOR_DRAWERFRONT then gosub "drawerWithFront"
		addz doorHeight
	next kk
	del nTempNumber+1
return

"drawerWithFront":
	call "fa_warddoortyp" parameters all bNotMacro 			= 0,
										gs_full_edit 		= 0,
										bAngleEdit			= 0,
										doorAngle3D			= 0,
										bDrawer				= 1,
										iDrawerKnobPos		= 1,
										drawerDepth			= panelWidth+frameWidth+thickness,
										iDoorStyle			= iDrawerStyle,
										gs_knob_type_m		= gs_knob_type_m,
										bKnob				= bKnob * (iDoorType = DOOR_TYPE_NONE),
										matDoorGlass		= matDrawerInset,
										matDoorFrame		= gs_drawer_mat,
										xDrawerKnobPos		= 0,
										zDrawerKnobPos		= 0,
										doorFrameWidth		= thickness,
										nVerticalMullion	= 0,
										nHorizontalMullion	= 0,
										bMirrored			= 0,
										bFormMirror			= 0,
										bSliding			= 0,
										doorWidth			= doorWidth,
										doorHeight			= doorHeight,
										bBevel				= bBevel

return

"drawer":
	! Front
	drawerCutZ			= 0.03
	drawerCutX			= 0.06
	if doorWidth > drawerCutX and doorHeight > drawerCutZ+thickness*1.5 then
		reducedDoorWidth	= doorWidth -0.001
		reducedDoorHeight	= doorHeight -0.001
		frameHillHeight		= 0.01
		mindistSmall		= 0.01

		add (doorWidth-reducedDoorWidth)/2, 0, (doorHeight-reducedDoorHeight)/2

		addx reducedDoorWidth/2
		rotx 90
		if bBevel then
			fprism_ gs_drawer_mat, gs_drawer_mat, gs_drawer_mat, gs_drawer_mat,
				8,doorThickness,45,frameHillHeight,
				-reducedDoorWidth/2,0,15,
				reducedDoorWidth/2,0,15,
				reducedDoorWidth/2,reducedDoorHeight,15,
				reducedDoorWidth/2-drawerCutX,reducedDoorHeight,15,
				reducedDoorWidth/2-drawerCutX,reducedDoorHeight-drawerCutZ,15,
				-reducedDoorWidth/2+drawerCutX,reducedDoorHeight-drawerCutZ,15,
				-reducedDoorWidth/2+drawerCutX,reducedDoorHeight,15,
				-reducedDoorWidth/2,reducedDoorHeight,15
		else
			cprism_ gs_drawer_mat, gs_drawer_mat, gs_drawer_mat,
				8,doorThickness,
				-reducedDoorWidth/2,0,15,
				reducedDoorWidth/2,0,15,
				reducedDoorWidth/2,reducedDoorHeight,15,
				reducedDoorWidth/2-drawerCutX,reducedDoorHeight,15,
				reducedDoorWidth/2-drawerCutX,reducedDoorHeight-drawerCutZ,15,
				-reducedDoorWidth/2+drawerCutX,reducedDoorHeight-drawerCutZ,15,
				-reducedDoorWidth/2+drawerCutX,reducedDoorHeight,15,
				-reducedDoorWidth/2,reducedDoorHeight,15
		endif

		if reducedDoorHeight>reducedDoorWidth then gosub "textureVertical_02" else gosub "textureHorizontal_01"

		del 3

		! Drawer
		drawerWidth = doorWidth - thickness
		drawerHeight= doorHeight - thickness*1.5
		drawerDepth = panelWidth - mindistSmall

		if drawerWidth<2*thickness+mindistSmall or drawerHeight<2*thickness+mindistSmall or drawerDepth<thickness+mindistSmall then return !!Not draw Drawer

		material gs_drawer_mat
		add thickness/2, 0, thickness/2

		!!Bottom
		prism_ 4, thickness,
			thickness, 0, 15,
			drawerWidth-thickness, 0, 15,
			drawerWidth-thickness, drawerDepth-thickness, 15,
			thickness, drawerDepth-thickness, 15
		gosub "textureHorizontal_02"

		!!Left Side
		prism_ 4, drawerHeight,
			0, 0, 15,
			thickness, 0, 15,
			thickness, drawerDepth, 15,
			0, drawerDepth, 15
		gosub "textureHorizontal_01"

		!!Right Side
		prism_ 4, drawerHeight,
			drawerWidth, 0, 15,
			drawerWidth-thickness, 0, 15,
			drawerWidth-thickness, drawerDepth, 15,
			drawerWidth, drawerDepth, 15
		gosub "textureHorizontal_01"

		!!Back Side
		prism_ 4, drawerHeight,
			thickness, drawerDepth-thickness, 15,
			drawerWidth-thickness, drawerDepth-thickness, 15,
			drawerWidth-thickness, drawerDepth, 15,
			thickness, drawerDepth, 15
		gosub "textureHorizontal_01"

		del 1
	else
		call "fa_warddoortyp" parameters all bNotMacro			= 0,
											gs_full_edit		= 0,
											bAngleEdit			= 0,
											doorAngle3D			= 0,
											bDrawer				= 1,
											iDrawerKnobPos		= 1,
											drawerDepth			= panelWidth+frameWidth+thickness,
											iDoorStyle			= 1,					!!!Simple
											bKnob				= 0,
											gs_knob_type_m		= gs_knob_type_m,
											matDoorGlass		= matDrawerInset,
											matDoorFrame		= gs_drawer_mat,
											xDrawerKnobPos		= 0,
											zDrawerKnobPos		= 0,
											doorFrameWidth		= thickness,
											nVerticalMullion	= 0,
											nHorizontalMullion	= 0,
											bMirrored			= 0,
											bFormMirror			= 0,
											bSliding			= 0,
											doorWidth			= doorWidth,
											doorHeight			= doorHeight,
											bBevel				= bBevel


	endif
return


! ======================================================================
! Shelves Macro
! ======================================================================
"shelves":
	if iFrameType = FRAME_WIRE then
		resol max(3, gs_resol/2)
		tModulDepth = panelWidth
		shelvesDistance=(tempModulHeight+wireDiameter*4)/(nTempNumber+1)

		add 0, B-(iFrameType = FRAME_SOLID_BACK)*frameWidth, -wireDiameter*2
		for kk=1 to nTempNumber
			addz shelvesDistance

			if gs_detlevel_3D_m = 1 or GLOB_CONTEXT = 5 or GLOB_CONTEXT = 4 or (GLOB_CONTEXT > 20 & GLOB_CONTEXT < 50) then
				addz -wireDiameter*2
				cprism_ "builtInMatWireBasket", "builtInMatWireBasket", "builtInMatWireBasket",
					4, wireDiameter*4,
					0,0,15,
					0, -panelWidth,15,
					tempModulWidth, -panelWidth,15,
					tempModulWidth, 0, 15
				gosub "textureHorizontal_01"
				del 1
			else
				addy -panelWidth
				gosub "plates_shelf"

				material matSteelShelf
				add 0.01 + wireDiameter/2, 0.01 + wireDiameter/2, 0

				wireReducedSizeX = tModulWidth - 2* 0.01 - wireDiameter
				wireReducedSizeY = tModulDepth - 2* 0.01 - wireDiameter

				! --- Z direction ----
				iRes = max(3, gs_resol/2)
				iAlpha = 90/iRes
				wireRadius = 0.02

				put  wireReducedSizeX, 0, 0, 0
				put  wireRadius, 0, 0, 0
				for jj=1 to iRes-1
					put wireRadius-sin(jj*iAlpha)*wireRadius, wireRadius-cos(jj*iAlpha)*wireRadius, 0, 0
				next jj
				put 0, wireRadius, 0, 0
				put 0, wireReducedSizeY-wireRadius, 0, 0
				for jj=1 to iRes-1
					put wireRadius-cos(jj*iAlpha)*wireRadius, wireReducedSizeY-wireRadius+sin(jj*iAlpha)*wireRadius, 0, 0
				next jj
				put wireRadius, wireReducedSizeY, 0, 0
				put wireReducedSizeX-wireRadius, wireReducedSizeY, 0, 0
				for jj=1 to iRes-1
					put wireReducedSizeX-wireRadius+sin(jj*iAlpha)*wireRadius, wireReducedSizeY-wireRadius+cos(jj*iAlpha)*wireRadius, 0, 0
				next jj
				put wireReducedSizeX, wireReducedSizeY-wireRadius, 0, 0
				put wireReducedSizeX, wireRadius, 0, 0
				for jj=1 to iRes-1
					put wireReducedSizeX-wireRadius+cos(jj*iAlpha)*wireRadius, wireRadius-sin(jj*iAlpha)*wireRadius,0, 0
				next jj
				put wireReducedSizeX-wireRadius, 0, 0, 0
				put wireRadius, 0, 0, 0
				put wireRadius-sin(iAlpha)*wireRadius, wireRadius-cos(iAlpha)*wireRadius, 0, 0

				tube 2, nsp/4, 1+2,
					0,0,901,
					wireDiameter*4, 360, 4001,
					get(nsp)


				! --- X direction ----
				tempSize = wireReducedSizeY
				tempNumber = int((wireReducedSizeX-2*wireRadius) / wireMeshDivision)

				rotz 90
				add 0, -(tempNumber-1)*wireMeshDivision - ((wireReducedSizeX-(tempNumber-1)*wireMeshDivision)/2), wireDiameter
				for jj = 1 to tempNumber
					tube 2, 4, 1+2+16+32,
						0,0,901,
						wireDiameter, 360, 4001,

						-1, 0, 0, 0,
						0, 0, 0, 0,
						tempSize, 0, 0, 0,
						tempSize+1, 0, 0, 0
					addy wireMeshDivision
				next jj
				del tempNumber
				del 2

				! --- Y direction ----
				tempSize = wireReducedSizeX
				tempNumber = int((wireReducedSizeY-2*wireRadius) / wireMeshDivision)

				add	0, (wireReducedSizeY-(tempNumber-1)*wireMeshDivision)/2, -wireDiameter
				for jj = 1 to tempNumber
					tube 2, 4, 1+2+16+32,
						0,0,901,
						wireDiameter, 360, 4001,

						-1, 0, 0, 0,
						0, 0, 0, 0,
						tempSize, 0, 0, 0,
						tempSize+1, 0, 0, 0
					addy wireMeshDivision
				next jj
				del tempNumber
				del 1


				del 2
			endif
		next kk
		del nTempNumber+1
	else
		shelvesDistance=(tempModulHeight+thickness)/(nTempNumber+1)

		add 0, B-(iFrameType = FRAME_SOLID_BACK)*frameWidth, -thickness
		for kk=1 to nTempNumber
			addz shelvesDistance
			cprism_ gs_shelf_mat, gs_shelf_mat, gs_shelf_mat,
				4, thickness,
				0,0,15,
				0, -panelWidth,15,
				tempModulWidth, -panelWidth,15,
				tempModulWidth, 0, 15
			gosub "textureHorizontal_01"
		next kk
		del nTempNumber+1
	endif
return


! ======================================================================
! WireBasket Macro
! ======================================================================
"wireBaskets":
	resol max(3, gs_resol/4)
	tModulDepth = panelWidth
	wireDistance=(tempModulHeight)/(nTempNumber)

	wireAlpha = max ( atn(wireDistance/0.04), minWireAlpha )

	yOffset = 2*doorThickness*(nDoor>1) + doorThickness*(iFrameType <> FRAME_WIRE)  + emptyDoorBack*(iFrameType <> FRAME_WIRE)

	addy yOffset
	for kk=1 to nTempNumber
		addz wireDistance
		gosub "wireBasket"
	next kk
	del nTempNumber+1
	resol gs_resol
return


"wireBasket":
	wireBasketHeight = wireDistance - 0.03
	if wireBasketHeight < minDist/2 then return

	if gs_detlevel_3D_m = 1 or GLOB_CONTEXT = 5 or GLOB_CONTEXT = 4 or (GLOB_CONTEXT > 20 & GLOB_CONTEXT < 50) then
		material "builtInMatWireBasket"
		wireReducedSizeX = tModulWidth - 2* 0.01 - wireDiameter
		wireReducedSizeY = tModulDepth - 2* 0.01 - wireDiameter

		add 0.01, 0.01, -wireDistance
		block wireReducedSizeX, wireReducedSizeY, wireBasketHeight
		del 1
	else
		material matWireBasket
		gosub "plates_wire"

		wireReducedSizeX = tModulWidth - 2* 0.01 - wireDiameter
		wireReducedSizeY = tModulDepth - 2* 0.01 - wireDiameter

		add 0.01 + wireDiameter/2, 0.01 + wireDiameter/2, -0.03

		! --- X direction ----
		tempWireY = wireBasketHeight - wireDiameter
		tempWireX = tempWireY / tan(wireAlpha)
		tempSize = wireReducedSizeY
		tempNumber = int((wireReducedSizeX-2*tempWireX) / wireMeshDivision)

		if wireReducedSizeX > (wireHandle+wireDiameter+0.01)*2 then
			rotx 90
			cutpolya 6, 0, -tempWireX,
				wireHandle, wireDiameter, 15,
				wireHandle, 0, 15,
				wireHandle+0.01, -0.03, 15,
				wireReducedSizeX-wireHandle-0.01, -0.03, 15,
				wireReducedSizeX-wireHandle, 0, 15,
				wireReducedSizeX-wireHandle, wireDiameter, 15
			del 1
		endif

		rotz 90
		addy -(tempNumber-1)*wireMeshDivision - ((wireReducedSizeX-(tempNumber-1)*wireMeshDivision)/2)
		for jj = 1 to tempNumber
			tube 2, 6, 1+2+16+32,
				0,0,901,
				wireDiameter, 360, 4001,

				-tempWireX, 0, tempWireY, 0,
				0, 0, 0, 0,
				tempWireX, 0, -tempWireY, 0,
				tempSize-tempWireX, 0, -tempWireY, 0,
				tempSize, 0, 0, 0,
				tempSize+tempWireX, 0, tempWireY, 0
			addy wireMeshDivision
		next jj
		del tempNumber
		del 2

		! --- Z direction ----
		tempNumber = int(wireBasketHeight / wireMeshDivision)
		iRes = max(3, gs_resol/2)
		iAlpha = 90/iRes
		wireRadius = 0.02
		for ii = 1 to tempNumber
			tempZ = ii*wireMeshDivision
			tempX = tempZ / tan(wireAlpha)-wireDiameter*2

			put  wireReducedSizeX, tempX, -tempZ, 0
			put  tempX+wireRadius, tempX, -tempZ, 0
			for jj=1 to iRes-1
				put tempX+wireRadius-sin(jj*iAlpha)*wireRadius, tempX+wireRadius-cos(jj*iAlpha)*wireRadius, -tempZ, 0
			next jj
			put tempX, tempX+wireRadius, -tempZ, 0
			put tempX, wireReducedSizeY-wireRadius-tempX, -tempZ, 0
			for jj=1 to iRes-1
				put tempX+wireRadius-cos(jj*iAlpha)*wireRadius, wireReducedSizeY-tempX-wireRadius+sin(jj*iAlpha)*wireRadius, -tempZ, 0
			next jj
			put tempX+wireRadius, wireReducedSizeY-tempX, -tempZ, 0
			put wireReducedSizeX-wireRadius-tempX, wireReducedSizeY-tempX, -tempZ, 0
			for jj=1 to iRes-1
				put wireReducedSizeX-wireRadius-tempX+sin(jj*iAlpha)*wireRadius, wireReducedSizeY-tempX-wireRadius+cos(jj*iAlpha)*wireRadius, -tempZ, 0
			next jj
			put wireReducedSizeX-tempX, wireReducedSizeY-wireRadius-tempX, -tempZ, 0
			put wireReducedSizeX-tempX, tempX+wireRadius, -tempZ, 0
			for jj=1 to iRes-1
				put wireReducedSizeX-wireRadius-tempX+cos(jj*iAlpha)*wireRadius, tempX+wireRadius-sin(jj*iAlpha)*wireRadius, -tempZ, 0
			next jj
			put wireReducedSizeX-wireRadius-tempX, tempX, -tempZ, 0
			put tempX+wireRadius, tempX, -tempZ, 0
			put tempX+wireRadius-sin(iAlpha)*wireRadius, tempX+wireRadius-cos(iAlpha)*wireRadius, -tempZ, 0

			tube 2, nsp/4, 1+2,
				0,0,901,
				wireDiameter, 360, 4001,
				get(nsp)
		next ii

		if wireReducedSizeX > (wireHandle+wireDiameter+0.01)*2 then cutend


		! --- Y direction ----
		tempWireY = wireBasketHeight - 3*wireDiameter
		tempWireX = tempWireY / tan(wireAlpha)
		tempSize = wireReducedSizeX
		tempNumber = int((wireReducedSizeY-2*tempWireX) / wireMeshDivision)

		addy (wireReducedSizeY-(tempNumber-1)*wireMeshDivision)/2
		for jj = 1 to tempNumber
			tube 2, 6, 1+2+16+32,
				0,0,901,
				wireDiameter, 360, 4001,

				-tempWireX, 0, tempWireY, 0,
				0, 0, 0, 0,
				tempWireX, 0, -tempWireY, 0,
				tempSize-tempWireX, 0, -tempWireY, 0,
				tempSize, 0, 0, 0,
				tempSize+tempWireX, 0, tempWireY, 0
			addy wireMeshDivision
		next jj
		del tempNumber
		del 1


		! --- Frame ----
		put  wireRadius+1, 0, 0, 0
		put  wireRadius, 0, 0, 0
		for jj=1 to iRes-1
			put wireRadius-sin(jj*iAlpha)*wireRadius, wireRadius-cos(jj*iAlpha)*wireRadius, 0, 0
		next jj
		put 0, wireRadius, 0, 0
		put 0, wireReducedSizeY-wireRadius, 0, 0
		for jj=1 to iRes-1
			put wireRadius-cos(jj*iAlpha)*wireRadius, wireReducedSizeY-wireRadius+sin(jj*iAlpha)*wireRadius, 0, 0
		next jj
		put wireRadius, wireReducedSizeY, 0, 0
		put wireReducedSizeX-wireRadius, wireReducedSizeY, 0, 0
		for jj=1 to iRes-1
			put wireReducedSizeX-wireRadius+sin(jj*iAlpha)*wireRadius, wireReducedSizeY-wireRadius+cos(jj*iAlpha)*wireRadius, 0, 0
		next jj
		put wireReducedSizeX, wireReducedSizeY-wireRadius, 0, 0
		put wireReducedSizeX, wireRadius, 0, 0
		for jj=1 to iRes-1
			put wireReducedSizeX-wireRadius+cos(jj*iAlpha)*wireRadius, wireRadius-sin(jj*iAlpha)*wireRadius, 0, 0
		next jj
		put wireReducedSizeX-wireRadius, 0, 0, 0
		if wireReducedSizeX > (wireHandle+wireDiameter+0.01)*2 then
			put wireReducedSizeX-wireHandle, 0, 0, 0
			put wireReducedSizeX-wireHandle-0.01, 0.03/tan(wireAlpha), -0.03, 0
			put wireHandle+0.01, 0.03/tan(wireAlpha), -0.03, 0
			put wireHandle, 0, 0, 0
		endif
		put wireRadius, 0, 0, 0
		put wireRadius-sin(iAlpha)*wireRadius, wireRadius-cos(iAlpha)*wireRadius, 0, 0


		tube 2, nsp/4, 1+2+128,
			0, 0, 901,
			wireDiameter*2 , 360, 4001,
			get(nsp)

		del 1
	endif
return


! ======================================================================
! Hanger Macro
! ======================================================================
"hangers":
	resol max(4, gs_resol/2)
	material gs_hanger_mat
	hangerDistance=(tempModulHeight-0.1)/(nTempNumber)
	yOffset = 2*doorThickness*(nDoor>1) + doorThickness*(iFrameType <> FRAME_WIRE)  + emptyDoorBack*(iFrameType <> FRAME_WIRE)
	if iFrameType = FRAME_WIRE then tModulWidth = tempModulWidth - 2*plateThicknes

	addy yOffset + panelWidth/2
	for kk=1 to nTempNumber
		addz hangerDistance
		if iFrameType = FRAME_WIRE then
			plateHeight = 3*hangerWidth
			add 0, -panelWidth/2-yOffset, -plateHeight/2-hangerWidth
			gosub "plates_normal"
			del 1

			addx plateThicknes
			gosub "hanger"
			del 1
		else
			gosub "hanger"
		endif
	next kk
	del nTempNumber+1
	resol gs_resol
return

"hanger":
	rotx 90
	roty 90
	if tModulWidth > 2 * hangerWidth then
		cprism_  gs_hanger_mat, gs_hanger_mat, gs_hanger_mat,
				6, hangerWidth,
				-hangerOversize/2,-hangerWidth/2, 79,
				0,-hangerWidth/2, 900,
				hangerOversize/2,-hangerWidth/2, 3079,
				hangerOversize/2,-hangerWidth*1.5, 79,
				0,-hangerWidth*1.5,900,
				0,-180,4079
		gosub "textureVertical_01"

		addz hangerWidth
		cprism_  gs_hanger_mat, gs_hanger_mat, gs_hanger_mat,
				6, tModulWidth-2*hangerWidth,
				-hangerWidth/2,-hangerWidth/2, 79,
				0,-hangerWidth/2, 900,
				hangerWidth/2,-hangerWidth/2, 3079,
				hangerWidth/2,-hangerWidth*1.5, 79,
				0,-hangerWidth*1.5,900,
				0,-180,4079
		gosub "textureVertical_01"

		addz tModulWidth-2*hangerWidth
		cprism_  gs_hanger_mat, gs_hanger_mat, gs_hanger_mat,
				6, hangerWidth,
				-hangerOversize/2,-hangerWidth/2, 79,
				0,-hangerWidth/2, 900,
				hangerOversize/2,-hangerWidth/2, 3079,
				hangerOversize/2,-hangerWidth*1.5, 79,
				0,-hangerWidth*1.5,900,
				0,-180,4079
		gosub "textureVertical_01"
		del 2
	else
		cprism_  gs_hanger_mat, gs_hanger_mat, gs_hanger_mat,
				6, tModulWidth,
				-hangerWidth/2,-hangerWidth/2, 79,
				0,-hangerWidth/2, 900,
				hangerWidth/2,-hangerWidth/2, 3079,
				hangerWidth/2,-hangerWidth*1.5, 79,
				0,-hangerWidth*1.5,900,
				0,-180,4079
		gosub "textureVertical_01"
	endif
	del 2
return

! ======================================================================
! Plates
! ======================================================================
"plates_normal":
	addy B-(iFrameType = FRAME_SOLID_BACK)*frameWidth
	for jj = 1 to 2
		cprism_ gs_cabinet_mat, gs_cabinet_mat, gs_cabinet_mat,
			4, plateHeight,
			0,0,15,
			0, -panelWidth,15,
			plateThicknes, -panelWidth,15,
			plateThicknes, 0, 15
		gosub "textureHorizontal_01"
		mulx -1
		addx -tempModulWidth
	next jj
	del 1+4
return


"plates_wire":
	plateHeight = 0.02
	addz -0.03+plateHeight-wireDiameter*2
	for jj = 1 to 2
		rotx 90
		addz -panelWidth
		cprism_ gs_cabinet_mat, gs_cabinet_mat, gs_cabinet_mat,
			8, panelWidth,
			0, 0, 15,
			plateThicknes, 0, 15,
			plateThicknes, -plateHeight, 15,
			plateThicknes+0.007, -plateHeight,15,
			plateThicknes+0.007, -plateHeight-plateThicknes,15,
			plateThicknes, -plateHeight-plateThicknes,15,
			plateThicknes, -2*plateHeight,15,
			0, -2*plateHeight,15
		gosub "textureVertical_01"
		del 2
		mulx -1
		addx -tempModulWidth
	next jj
	del 1+4
return


"plates_shelf":
	plateHeight = 0.02
	addz plateHeight-wireDiameter*4
	for jj = 1 to 2
		rotx 90
		addz -panelWidth
		cprism_ gs_cabinet_mat, gs_cabinet_mat, gs_cabinet_mat,
			8, panelWidth,
			0, 0, 15,
			plateThicknes, 0, 15,
			plateThicknes, -plateHeight, 15,
			plateThicknes+0.01, -plateHeight,15,
			plateThicknes+0.01, -plateHeight-plateThicknes,15,
			plateThicknes, -plateHeight-plateThicknes,15,
			plateThicknes, -2*plateHeight,15,
			0, -2*plateHeight,15
		gosub "textureVertical_01"
		del 2
		mulx -1
		addx -tempModulWidth
	next jj
	del 1+4
return


! ======================================================================
! Textures
! ======================================================================
"textureVertical_01":
	roty 90
	vert 0, 0, 0
	vert 1, 0, 0
	vert 0, 1, 0
	vert 0, 0, 1
	del 1

	coor 2, -1, -2, -3, -4

	base

	body -1
return


"textureVertical_02":
	roty 90
	rotz 90
	vert 0, 0, 0
	vert 1, 0, 0
	vert 0, 1, 0
	vert 0, 0, 1
	del 2

	coor 2, -1, -2, -3, -4

	base

	body -1
return


"textureHorizontal_01":
	vert 0, 0, 0
	vert 1, 0, 0
	vert 0, 1, 0
	vert 0, 0, 1

	coor 2, -1, -2, -3, -4

	base

	body -1
return


"textureHorizontal_02":
	rotx 90
	vert 0, 0, 0
	vert 1, 0, 0
	vert 0, 1, 0
	vert 0, 0, 1
	del 1

	coor 2, -1, -2, -3, -4

	base

	body -1
return
