
if gs_detlevel_3D_m = 0 then end

if not(gs_shadow) then SHADOW OFF

if gs_detlevel_3D_m = 0 then
	resol 4
else
	resol gs_resol
endif

pen gs_cont_pen
unID = 1


! -----------------------------------------------------------------------------
! Leg
! -----------------------------------------------------------------------------

if bLeg then
	material gs_leg_mat
	legW = MAX(0.02, gs_frameWidth/2)

	if iLegType = LEG_TOE then
		prism_ 5, gs_legHeight,
			0, 0.01, 15,
			a, 0.01, 15,
			a, b, 15,
			0, b, 15,
			0, 0.01, -1
	else
		add gs_frameWidth/2+bFatFrame*gs_frameWidth/2, b/6, 0
		for i = 1 to 2
			for j = 1 to gs_nCol + 1
				if iLegType = LEG_LEG then
					cylind gs_legHeight/12, wBase
					addz gs_legHeight/12
					cone gs_legHeight/12, wBase, max(wBase/4,0.01), 90, 90
					addz gs_legHeight/12
					cylind gs_legHeight*5/6, max(wBase/4,0.01)
					del 2
				endif

				if iLegType = LEG_ROUND then
					cylind gs_legHeight, wBase
				endif

				if iLegType = LEG_RECT then
					prism_ 5, gs_legHeight,
						-wBase, -wBase, 15,
						wBase, -wBase, 15,
						wBase, wBase, 15,
						-wBase, wBase, 15,
						-wBase, -wBase, -1
				endif

				addx gs_colWidth+(j=1)*bFatFrame*gs_frameWidth/2
			next j
			del gs_nCol + 1
			addy b*4/6
		next i
		del 3
	endif
endif


! -----------------------------------------------------------------------------
! Back Plate
! -----------------------------------------------------------------------------

addz legHeight
material gs_frame_mat
if bBack then
	addy B
	rotx 90
	put 0+bFatFrame * gs_frameWidth + gs_frameWidth, 0+bFatFrame * gs_frameWidth + gs_frameWidth, 15
	currX = bFatFrame*gs_frameWidth+gs_frameWidth
	for i=1 to gs_nRow-1
		if abs(currX - gs_firstShelf[i]) > gs_frameWidth or i=gs_nRow then
			put currX, gs_rowHeight*i, 15
			currX = gs_firstShelf[i]
			put currX, gs_rowHeight*i, 15
		endif
	next i
	for i=gs_nRow-1 to 1 step -1
		put currX, gs_rowHeight*(i+1), 15
		currX = A-gs_lastShelf[i]
		if (currX - A) < EPS then currX = currX - bFatFrame * gs_frameWidth - gs_frameWidth
		put currX, gs_rowHeight*(i+1), 15
	next i
	if abs(currX - A) > EPS then
		put currX, gs_rowHeight*(i+1), 15
		put A - gs_frameWidth - bFatFrame * gs_frameWidth, gs_rowHeight * (i+1), 15
	endif
	put A - gs_frameWidth - bFatFrame * gs_frameWidth, 0 + gs_frameWidth + bFatFrame * gs_frameWidth, 15,
		0 + gs_frameWidth + bFatFrame * gs_frameWidth, 0 + gs_frameWidth + bFatFrame * gs_frameWidth, -1
	prism_ NSP/3, gs_frameWidth, get(NSP)		!0.01
	del 2
endif

! -----------------------------------------------------------------------------
! First Row
! -----------------------------------------------------------------------------

block a, b, bFatFrame * gs_frameWidth + gs_frameWidth

gosub 1000

addz bFatFrame*gs_frameWidth+gs_frameWidth
for i = 1 to gs_nCol + 1
	bShorter=(i<>1 & i<>gs_nCol + 1 & bBack)
	bFat=(i=1 or i=gs_nCol + 1)
	block gs_frameWidth + bFat * bFatFrame * gs_frameWidth, b - (bShorter * gs_frameWidth), gs_rowHeight - gs_frameWidth
	addx gs_colWidth + (i=1) * bFatFrame * gs_frameWidth
next i
roty 90
gosub 1000
del 1
del gs_nCol + 2

addz gs_rowHeight
if bBack then
	addy B-gs_frameWidth
	cutpoly 4,
		bFatFrame*gs_frameWidth+gs_frameWidth+gs_firstShelf[1], 0,
		bFatFrame*gs_frameWidth+gs_frameWidth+gs_firstShelf[1], gs_frameWidth,
		A-bFatFrame*gs_frameWidth-gs_frameWidth-gs_lastShelf[1],  gs_frameWidth,
		A-bFatFrame*gs_frameWidth-gs_frameWidth-gs_lastShelf[1],  0
	del 1
	prism_ 4, gs_frameWidth,
		0, 0, 15,
		A, 0, 15,
		A, B, 15,
		0, B, 15
	cutend
else
	block a, b, gs_frameWidth
endif
gosub 1000


! -----------------------------------------------------------------------------
! Upper Rows
! -----------------------------------------------------------------------------

addz gs_rowHeight

for i = 1 to gs_nRow - 1
	hotspot 0,					 0, gs_frameWidth, unID, gs_firstShelf[i], 1+128 	: unID = unID + 1
	hotspot gs_firstShelf[i],	 0, gs_frameWidth, unID, gs_firstShelf[i], 2 		: unID = unID + 1
	hotspot -1,					 0, gs_frameWidth, unID, gs_firstShelf[i], 3 		: unID = unID + 1

	hotspot a,					 0, gs_frameWidth, unID, gs_lastShelf[i], 1+128 	: unID = unID + 1
	hotspot a - gs_lastShelf[i], 0, gs_frameWidth, unID, gs_lastShelf[i], 2 		: unID = unID + 1
	hotspot a + 1,				 0, gs_frameWidth, unID, gs_lastShelf[i], 3 		: unID = unID + 1

	startDiff = INT((gs_firstShelf[i] +  EPS) / gs_colWidth) * gs_colWidth
	endDiff = INT((gs_lastShelf[i] +  EPS) / gs_colWidth) * gs_colWidth

	if i<>(gs_nRow-1)&bBack then
		addy B-gs_frameWidth
		cutpoly 4,
			bFatFrame * gs_frameWidth + gs_frameWidth + gs_firstShelf[i + 1], 0,
			bFatFrame * gs_frameWidth + gs_frameWidth + gs_firstShelf[i + 1], gs_frameWidth,
			A-bFatFrame * gs_frameWidth - gs_frameWidth - gs_lastShelf[i + 1],  gs_frameWidth,
			A-bFatFrame * gs_frameWidth - gs_frameWidth - gs_lastShelf[i + 1],  0
		del 1
	endif

	prism_ 5, gs_frameWidth+(i=gs_nRow-1)*bFatFrame*gs_frameWidth,
		startDiff, 0, 15,
		startDiff, b, 15,
		a - endDiff, b, 15,
		a - endDiff, 0, 15,
		startDiff, 0, -1

	if i<>(gs_nRow-1)&bBack then cutend
	gosub 1000

	addz -gs_rowHeight + gs_frameWidth
	addx startDiff
	for j = 1 to INT((a - startDiff - endDiff) / gs_colWidth) + 1
		bShorter=(j<>1 & j<>(INT((a - startDiff - endDiff) / gs_colWidth) + 1) & bBack)
		bFat=(j=1 or j=(INT((a - startDiff - endDiff) / gs_colWidth) + 1))
		block bFatFrame * bFat * gs_frameWidth + gs_frameWidth, b - (bShorter * gs_frameWidth), gs_rowHeight - gs_frameWidth
		addx gs_colWidth + (j=1) * bFatFrame * gs_frameWidth
	next j
	roty 90
	gosub 1000
	del 1
	del 3 + INT((a - startDiff - endDiff) / gs_colWidth)

	addz gs_rowHeight
next i


end

1000:
	vert 0, 0, 0
	vert 1, 0, 0
	vert 0, 1, 0
	vert 0, 0, 1

	coor 2, -1, -2, -3, -4
	base

	body -1
return
