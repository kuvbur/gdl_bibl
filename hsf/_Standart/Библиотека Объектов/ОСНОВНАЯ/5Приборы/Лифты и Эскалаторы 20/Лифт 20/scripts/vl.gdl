
call "FM_types" parameters all

! =============================================================================
! Detlevel 3D
! =============================================================================
values "gs_detlevel_3D" stDetail
values "gs_detlevel_3D_m" 2, 1, 0

if GLOB_MODPAR_NAME = "gs_detlevel_3D" then
	gs_detlevel_3D_m = 2
	if gs_detlevel_3D = stDetail[2] then gs_detlevel_3D_m = 1	! Simple
	if gs_detlevel_3D = stDetail[3] then gs_detlevel_3D_m = 0	! Off
	parameters gs_detlevel_3D_m = gs_detlevel_3D_m
else
	gs_detlevel_3D = stDetail[1]
	if gs_detlevel_3D_m = 1 then gs_detlevel_3D = stDetail[2]
	if gs_detlevel_3D_m = 0 then gs_detlevel_3D = stDetail[3]
	parameters gs_detlevel_3D = gs_detlevel_3D
endif


! =============================================================================
! Detlevel 2D
! =============================================================================
values "gs_detlevel_2D" stDetail2D
values "gs_detlevel_2D_m" 1, 2, 3, 4, 5, 6

if GLOB_MODPAR_NAME = "gs_detlevel_2D" then
	for i = 1 to vardim1(stDetail2D)
		if gs_detlevel_2D = stDetail2D[i] then
			gs_detlevel_2D_m = i
			i = 30
		endif
	next i
	parameters gs_detlevel_2D_m = gs_detlevel_2D_m
else
	gs_detlevel_2D = stDetail2D[gs_detlevel_2D_m]
	parameters gs_detlevel_2D = gs_detlevel_2D
endif


! =============================================================================
! Elevator Type
! =============================================================================
values "elevator_type" stElevType
values "elevator_type_m" 1, 2

if GLOB_MODPAR_NAME = "elevator_type" then
	elevator_type_m = 1
	if elevator_type = stElevType[2] then elevator_type_m = 2
	parameters elevator_type_m = elevator_type_m
else
	elevator_type = stElevType[elevator_type_m]
	parameters elevator_type = elevator_type
endif


! =============================================================================
! Second Opening
! =============================================================================
values "dir_second_opening" stDirection
values "dir_second_opening_m" 1, 2, 3, 4

if GLOB_MODPAR_NAME = "dir_second_opening" then
	for i = 1 to vardim1(stDirection)
		if dir_second_opening = stDirection[i] then
			dir_second_opening_m = i
			i = 99
		endif
	next i
	parameters dir_second_opening_m = dir_second_opening_m
else
	dir_second_opening = stDirection[dir_second_opening_m]
	parameters dir_second_opening = dir_second_opening
endif

if GLOB_MODPAR_NAME = "bSplitLevelStories" and bSplitLevelStories then
	parameters dir_second_opening = stDirection[3]
endif

if dir_second_opening_m = SECOND_OPENING_REAR then
	lock "car_depth"
endif
if dir_second_opening_m = SECOND_OPENING_NONE then
	hideparameter	"second_door_pos"
	lock			"second_door_pos"
endif

dim stAvaliablePosition[]
dim iAvaliablePosition[]
j = 1
for i = 1 to 3
	if dir_second_opening_m-1 <> i then
		stAvaliablePosition[j]	= stPosition[i]
		iAvaliablePosition[j]	= i
		j = j + 1
	endif
next i

values "cweight_pos"	stAvaliablePosition
values "cweight_pos_m"	iAvaliablePosition

if GLOB_MODPAR_NAME = "cweight_pos" then
	for i = 1 to 3
		if cweight_pos = stPosition[i] then
			cweight_pos_m = i
			i = 3
		endif
	next i
	parameters cweight_pos_m = cweight_pos_m
else
	cweight_pos_m = max(min(cweight_pos_m, vardim1(stPosition)), 1)
	parameters cweight_pos = stPosition[cweight_pos_m]
endif


! =============================================================================
! Door Style
! =============================================================================
values "elev_door_style" stElevDoorStyle
values "elev_door_style_m" 1, 2

if GLOB_MODPAR_NAME = "elev_door_style" then
	elev_door_style_m = 1
	if elev_door_style = stElevDoorStyle[2] then elev_door_style_m = 2
	parameters elev_door_style_m = elev_door_style_m
else
	elev_door_style = stElevDoorStyle[elev_door_style_m]
	parameters elev_door_style = elev_door_style
endif


values "door_style" stDoorStyle
values "door_style_m" 0, 1, 2, 3, 4, 5

if GLOB_MODPAR_NAME = "door_style" then
	for i = 1 to 6
		if door_style = stDoorStyle[i] then
			door_style_m = i-1
			i = 6
		endif
	next i
	parameters door_style_m = door_style_m
else
	door_style = stDoorStyle[door_style_m+1]
	parameters door_style = door_style
endif


! =============================================================================
! Form
! =============================================================================
values "elevator_form" stElevForm
values "elevator_form_m" 1, 2
values "segment_num" range [3, )

if GLOB_MODPAR_NAME = "elevator_form" then
	elevator_form_m = 1
	if elevator_form = stElevForm[2] then elevator_form_m = 2
	parameters elevator_form_m = elevator_form_m
else
	elevator_form = stElevForm[elevator_form_m]
	parameters elevator_form = elevator_form
endif

if elevator_form_m <> elevator_form_m_prev then
	if elevator_form_m = FORM_RECT then

		elev_shaft_thick	= elev_wall_thick
		bShowElevatorShaft	= bShowElevatorWall
		shaft_inner_width	= A - 2*elev_shaft_thick*bShowElevatorShaft
		shaft_inner_depth	= B - 2*elev_shaft_thick*bShowElevatorShaft

		parameters	shaft_inner_width	= shaft_inner_width,
					shaft_inner_depth	= shaft_inner_depth,
					elev_shaft_thick	= elev_shaft_thick,
					bShowElevatorShaft	= bShowElevatorShaft

	else

		elev_wall_thick		= elev_shaft_thick
		elev_wall_overhang	= 0
		bShowElevatorWall	= bShowElevatorShaft
		car_width			= A - 2*elev_wall_overhang*bShowElevatorWall
		car_depth			= B - segmentedFront - bShowElevatorWall * elev_wall_thick
		parameters	elev_wall_thick		= elev_wall_thick,
					elev_wall_overhang	= elev_wall_overhang,
					bShowElevatorWall	= bShowElevatorWall,
					car_width			= car_width,
					car_depth			= car_depth
	endif
endif

parameters elevator_form_m_prev = elevator_form_m

values "penthouse_height" range(0, )
if not(bPenthouse) then
	hideparameter	"penthouse_height"
	lock			"penthouse_height"
endif

values "pit_depth" range(0, )
if not(bPith) then
	hideparameter	"pit_depth"
	lock			"pit_depth"
endif

values "top_slab_thick" range (0, )
if not(bTopSlab) then
	hideparameter	"top_slab_thick",
					"top_slab_ext_mat",
					"top_slab_int_mat",
					"top_slab_edge_mat"

	lock			"top_slab_thick",
					"top_slab_ext_mat",
					"top_slab_int_mat",
					"top_slab_edge_mat"
endif

values "pit_slab_thick" range (0, )
if not(bPitSlab) then
	hideparameter	"pit_slab_thick",
					"pit_slab_ext_mat",
					"pit_slab_int_mat",
					"pit_slab_edge_mat"

	lock			"pit_slab_thick",
					"pit_slab_ext_mat",
					"pit_slab_int_mat",
					"pit_slab_edge_mat"
endif

lock "edited_story_height"

if elevator_form_m = FORM_RECT then
	lock "segment_num"
	if elevator_type_m = 2 then
		hideparameter	"cweight_pos",
						"cweight_pos_m",
						"cweight_width",
						"cweight_depth"

		lock 			"cweight_pos",
						"cweight_pos_m",
						"cweight_width",
						"cweight_depth"
	endif

	if not(bSplitLevelStories) then
		lock 	"num_SL_stories_below_HS",
				"num_SL_stories_above_HS",
				"dist_SL_story_to_normal_story"

		hideparameter 	"num_SL_stories_below_HS",
						"num_SL_stories_above_HS",
						"dist_SL_story_to_normal_story"
	endif

	if not(bShowElevatorShaft) then
		lock	"bPenthouse",
				"penthouse_height",
				"bPith",
				"pit_depth",
				"elev_shaft_thick",
				"elev_shaft_ext_mat",
				"elev_shaft_int_mat",
				"elev_shaft_edge_mat",
				"bTopSlab",
				"top_slab_thick",
				"top_slab_ext_mat",
				"top_slab_int_mat",
				"top_slab_edge_mat",
				"bPitSlab",
				"pit_slab_thick",
				"pit_slab_ext_mat",
				"pit_slab_int_mat",
				"pit_slab_edge_mat",
				"gs_wall_cont_pen",
				"gs_wall_fill_type",
				"gs_wall_fill_pen",
				"gs_wall_back_pen",
				"gs_opening_fill_type",
				"gs_opening_fill_pen",
				"gs_opening_back_pen"

		hideparameter	"bPenthouse",
						"penthouse_height",
						"bPith",
						"pit_depth",
						"elev_shaft_thick",
						"elev_shaft_ext_mat",
						"elev_shaft_int_mat",
						"elev_shaft_edge_mat",
						"bTopSlab",
						"top_slab_thick",
						"top_slab_ext_mat",
						"top_slab_int_mat",
						"top_slab_edge_mat",
						"bPitSlab",
						"pit_slab_thick",
						"pit_slab_ext_mat",
						"pit_slab_int_mat",
						"pit_slab_edge_mat",
						"gs_wall_cont_pen",
						"gs_wall_fill_type",
						"gs_wall_fill_pen",
						"gs_wall_back_pen",
						"gs_opening_fill_type",
						"gs_opening_fill_pen",
						"gs_opening_back_pen"
	endif

	lock	"car_front_mat",
			"car_back_mat",
			"car_mullion_mat",
			"bShowElevatorWall",
			"elev_wall_thick",
			"elev_wall_overhang",
			"elev_wall_ext_mat",
			"elev_wall_int_mat",
			"elev_wall_edge_mat",
			"bShowMullion"

	hideparameter	"car_front_mat",
					"car_back_mat",
					"car_mullion_mat",
					"bShowElevatorWall",
					"elev_wall_thick",
					"elev_wall_overhang",
					"elev_wall_ext_mat",
					"elev_wall_int_mat",
					"elev_wall_edge_mat",
					"bShowMullion"

	if not(bShowElevatorShaft) then
		lock 	"elev_door_style",
				"elev_shaft_thick",
				"elev_shaft_ext_mat",
				"elev_shaft_int_mat",
				"elev_shaft_edge_mat"

		hideparameter 	"elev_door_style",
						"elev_shaft_thick",
						"elev_shaft_ext_mat",
						"elev_shaft_int_mat",
						"elev_shaft_edge_mat"
	endif

	if not(gs_detlevel_2D_m = 1 | gs_detlevel_2D_m = 2) then
		lock "bShowMechin2D"
		hideparameter "bShowMechin2D"
	endif
else
!"B",
	lock 	"elevator_type",
			"elevator_type_m",
			"dir_second_opening",
			"dir_second_opening_m",
			"cweight_pos",
			"cweight_pos_m",
			"cweight_width",
			"cweight_depth",
			"bSplitLevelStories",
			"num_SL_stories_below_HS",
			"num_SL_stories_above_HS",
			"dist_SL_story_to_normal_story",
			"second_door_pos",
			"bShowElevatorShaft",
			"elev_shaft_thick",
			"elev_shaft_ext_mat",
			"elev_shaft_int_mat",
			"elev_shaft_edge_mat",
			"bShowMechin2D",
			
			"shaft_inner_width",
			"shaft_inner_depth"

!"B",
	hideparameter	"elevator_type",
					"elevator_type_m",
					"dir_second_opening",
					"dir_second_opening_m",
					"cweight_pos",
					"cweight_pos_m",
					"cweight_width",
					"cweight_depth",
					"bSplitLevelStories",
					"num_SL_stories_below_HS",
					"num_SL_stories_above_HS",
					"dist_SL_story_to_normal_story",
					"second_door_pos",
					"bShowElevatorShaft",
					"elev_shaft_thick",
					"elev_shaft_ext_mat",
					"elev_shaft_int_mat",
					"elev_shaft_edge_mat",
					"bShowMechin2D",
					
					"shaft_inner_width",
					"shaft_inner_depth"

	if not(bShowMullion) then
		lock "car_mullion_mat"
		hideparameter "car_mullion_mat"
	endif

	if not(bShowElevatorWall) then
		lock 	"elev_door_style",
				"elev_wall_thick",
				"elev_wall_overhang",
				"elev_wall_ext_mat",
				"elev_wall_int_mat",
				"elev_wall_edge_mat",

				"bTopSlab",
				"top_slab_thick",
				"top_slab_ext_mat",
				"top_slab_int_mat",
				"top_slab_edge_mat",
				"bPitSlab",
				"pit_slab_thick",
				"pit_slab_ext_mat",
				"pit_slab_int_mat",
				"pit_slab_edge_mat",

				"gs_wall_cont_pen",
				"gs_wall_fill_type",
				"gs_wall_fill_pen",
				"gs_wall_back_pen",
				"gs_opening_fill_type",
				"gs_opening_fill_pen",
				"gs_opening_back_pen"

		hideparameter	"elev_door_style",
						"elev_wall_thick",
						"elev_wall_overhang",
						"elev_wall_ext_mat",
						"elev_wall_int_mat",
						"elev_wall_edge_mat",

						"bTopSlab",
						"top_slab_thick",
						"top_slab_ext_mat",
						"top_slab_int_mat",
						"top_slab_edge_mat",
						"bPitSlab",
						"pit_slab_thick",
						"pit_slab_ext_mat",
						"pit_slab_int_mat",
						"pit_slab_edge_mat",

						"gs_wall_cont_pen",
						"gs_wall_fill_type",
						"gs_wall_fill_pen",
						"gs_wall_back_pen",
						"gs_opening_fill_type",
						"gs_opening_fill_pen",
						"gs_opening_back_pen"
	endif
endif

if	not(elevator_form_m = FORM_RECT			& bShowElevatorShaft |\
		elevator_form_m = FORM_SEGMENTED	& bShowElevatorWall) then

	lock "opening_frame_mat", "bControlPanel", "bOpeningFrame",
		"edited_story", "edited_story_m",
		"edited_story_height",
		"edited_story_door_pos", "edited_story_door_pos_m",
		"cpanel_mat", "button_mat",
		"num_stories_above_HS", "gs_max_StrFl_height",
		"bSplitLevelStories", "stories"
	hideparameter "opening_frame_mat",  "bControlPanel", "bOpeningFrame",
		"edited_story", "edited_story_m",
		"edited_story_height",
		"edited_story_door_pos", "edited_story_door_pos_m",
		"cpanel_mat", "button_mat",
		"num_stories_above_HS", "gs_max_StrFl_height",
		"bSplitLevelStories", "stories"
endif

if elevator_form_m = FORM_SEGMENTED then 			! --- Segmented
	lock "gs_gap_fill_type"
	hideparameter "gs_gap_fill_type"
	lock "gs_gap_fill_pen"
	hideparameter "gs_gap_fill_pen"
	lock "gs_gap_back_pen"
	hideparameter "gs_gap_back_pen"
endif


! =============================================================================
! Sizes
! =============================================================================
values "elev_shaft_thick"	range (0, )
values "elev_wall_thick"	range (0, )

values "car_height"	range (0, )

if elevator_form_m = FORM_RECT then
	if cweight_pos_m = CW_POS_NORMAL then
		values "cweight_width" range (0, shaft_inner_width - 2*cweightEPS]
		values "cweight_depth" range [minCwDepth, max(minCwDepth, shaft_inner_depth - 2*carWallThk - car_inner_depth - frontGap - 2*carEPS)]
	else
		values "cweight_width" range (0, shaft_inner_depth - 2*cweightEPS]
		values "cweight_depth" range [minCwDepth, max( minCwDepth, shaft_inner_width - 2*carWallThk - car_inner_width - \
				(2+(dir_second_opening_m = SECOND_OPENING_NONE | dir_second_opening_m = SECOND_OPENING_REAR))*carEPS - \
				(dir_second_opening_m = SECOND_OPENING_SIDE1 | dir_second_opening_m = SECOND_OPENING_SIDE2)*frontGap)]
	endif

	if dir_second_opening_m = SECOND_OPENING_SIDE1 then
		minSide1	= frontGap
	else
		minSide1	= (1+(cweight_pos_m = CW_POS_SIDE1) * (elevator_type_m = 1))*carEPS + minCwDepth*(cweight_pos_m = CW_POS_SIDE1) * (elevator_type_m = 1)
	endif

	if dir_second_opening_m = SECOND_OPENING_SIDE2 then
		minSide2	= frontGap
	else
		minSide2	= (1+(cweight_pos_m = CW_POS_SIDE2) * (elevator_type_m = 1))*carEPS + minCwDepth*(cweight_pos_m = CW_POS_SIDE2) * (elevator_type_m = 1)
	endif

	minFront = frontGap

	if dir_second_opening_m = SECOND_OPENING_REAR then
		minRear			= frontGap
		car_inner_depth	= shaft_inner_depth - 2*carWallThk - minRear - minFront
		parameters car_inner_depth = car_inner_depth
	else
		minRear		= (1+(cweight_pos_m = CW_POS_NORMAL) * (elevator_type_m = 1))*carEPS + minCwDepth*(cweight_pos_m = CW_POS_NORMAL) * (elevator_type_m = 1)
	endif

	values "shaft_inner_width"	range [minSide1 + minSide2 + minCarWidth + 2*carWallThk, ]
	values "shaft_inner_depth"	range [minFront + minRear  + minCarDepth + 2*carWallThk, ]
	values "A"					range [minSide1 + minSide2 + minCarWidth + 2*carWallThk + 2*elev_shaft_thick*bShowElevatorShaft, ]
	values "B"					range [minFront + minRear  + minCarDepth + 2*carWallThk + 2*elev_shaft_thick*bShowElevatorShaft, ]
	values "car_inner_width"	range [minCarWidth, shaft_inner_width - 2*carWallThk - minSide1 - minSide2]
	values "car_inner_depth"	range [minCarDepth, shaft_inner_depth - 2*carWallThk - minFront - minRear ]

	if GLOB_MODPAR_NAME = "A" or GLOB_MODPAR_NAME = "B" then
		shaft_inner_width = A - 2*elev_shaft_thick*bShowElevatorShaft
		shaft_inner_depth = B - 2*elev_shaft_thick*bShowElevatorShaft

		parameters	shaft_inner_width	= shaft_inner_width,
					shaft_inner_depth	= shaft_inner_depth
	else
			A = shaft_inner_width + 2*elev_shaft_thick*bShowElevatorShaft
			B = shaft_inner_depth + 2*elev_shaft_thick*bShowElevatorShaft
			parameters	A			= A,
						B			= B
	endif

	hideparameter	"car_width", "car_depth"
	lock			"car_width", "car_depth"

else

	hideparameter	"car_inner_width", "car_inner_depth"
	lock			"car_inner_width", "car_inner_depth"

	values "car_width"	range [minCarWidth, )
	values "car_depth"	range [minCarDepth, )
	values "A"			range [minCarWidth + 2*elev_wall_overhang*bShowElevatorWall, )
	values "B"			range [minCarDepth + segmentedFront + bShowElevatorWall * elev_wall_thick, )
	values "elev_wall_overhang" range [0,]

	if GLOB_MODPAR_NAME = "A" or GLOB_MODPAR_NAME = "B" then
		car_width = A - 2*elev_wall_overhang*bShowElevatorWall
		car_depth = B - segmentedFront - bShowElevatorWall * elev_wall_thick
		parameters car_width = car_width, car_depth = car_depth
	else
		A = car_width + 2*elev_wall_overhang*bShowElevatorWall
		B = car_depth + segmentedFront + bShowElevatorWall * elev_wall_thick
		parameters A = A, B = B
	endif
endif


! =============================================================================
! Doors
! =============================================================================
doorDivider	= 0.5
if door_style_m = 0 or door_style_m = 3 then
	nSlidingDiv 	= 1
else
	if door_style_m = 1 | door_style_m = 5 then
		nSlidingDiv	= 1.5
		doorDivider	= 1/3
	else
		nSlidingDiv = 2
	endif
endif

if dir_second_opening_m = 3 or dir_second_opening_m = 4 then
	!!values "door_width" range(0, (car_depth-2*(carWallThk+minCarWallFlap)-abs(second_door_pos))/nSlidingDiv]
	values "door_width" range(0, (car_depth-2*(carWallThk+minCarWallFlap))/nSlidingDiv]
else
	!!values "door_width" range(0, (car_width-2*(carWallThk+minCarWallFlap)-abs(door_pos))/nSlidingDiv]
	values "door_width" range(0, (car_width-2*(carWallThk+minCarWallFlap))/nSlidingDiv]
endif
values "door_height" range(0, )
values "door_pos" range[-(car_width/2-carWallThk-door_width*nSlidingDiv*doorDivider-minCarWallFlap), car_width/2-carWallThk-door_width*nSlidingDiv*doorDivider-minCarWallFlap]
if dir_second_opening_m = 3 or dir_second_opening_m = 4 then
	values "second_door_pos" range[-(car_depth/2-carWallThk-door_width*nSlidingDiv*doorDivider-minCarWallFlap), car_depth/2-carWallThk-door_width*nSlidingDiv*doorDivider-minCarWallFlap]
else
	values "second_door_pos" range[-(car_width/2-carWallThk-door_width*nSlidingDiv*doorDivider-minCarWallFlap), car_width/2-carWallThk-door_width*nSlidingDiv*doorDivider-minCarWallFlap]
endif
values "gs_max_StrFl_height" range(0, )
values "opening_in3D" range [0, 100]

if not(bControlPanel) then
	lock 	"cpanel_mat",
			"button_mat"

	hideparameter	"cpanel_mat",
					"button_mat"
endif


! =============================================================================
! Levels
! =============================================================================
ac_bottomlevel = connected_stories_elev[num_connected_stories]-pit_depth*bPith-pit_slab_thick*bPitSlab
parameters ac_bottomlevel = ac_bottomlevel
ac_toplevel = connected_stories_elev[1] + connected_stories_height[1]+penthouse_height*bPenthouse+top_slab_thick*bTopSlab
parameters ac_toplevel = ac_toplevel
ZZYZX = ac_toplevel - ac_bottomlevel
parameters ZZYZX = ZZYZX
lock "ZZYZX"

! =============================================================================
! Onorm list Settings
! =============================================================================
if LibraryLangCode = "AUT" or LibraryLangCode = "CHE" or LibraryLangCode = "GER" then
	rrr = REQUEST ("Name_of_macro", "", LPName)
	call "Onorm_Elevator" parameters all sLibpartName = strsub(LPName,0,strlen(LPName)-4)
else
	hideparameter "gs_onorm_Title"
endif


! =============================================================================
! IFC Parameters
! =============================================================================

ifc_CapacityByWeight	= FM_LiftCapacityNumber
ifc_CapacityByNumber	= FM_TransportablePersons
parameters	ifc_CapacityByWeight	= ifc_CapacityByWeight,
			ifc_CapacityByNumber	= ifc_CapacityByNumber

FM_LiftCapacity = str("%~m", FM_LiftCapacityNumber)
parameters FM_LiftCapacity = FM_LiftCapacity

parameters ifc_optype = 1

values "FM_LiftCapacityNumber" range[0, )

! =============================================================================
! UI
! =============================================================================
values "gs_ui_current_page" 1,2,3,4,5,6,7,8
