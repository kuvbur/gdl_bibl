
! ==============================================================================
! Shower Cabin
! ==============================================================================


call "FM_types" parameters all

dim st_detail3D[4]
	st_detail3D[1] = `Детальный`
	st_detail3D[2] = `Простой`
	st_detail3D[3] = `Упрощенный`
	st_detail3D[4] = `Откл.`

values "gs_detlevel_3D" st_detail3D		!`Detailed`,`Simple`,`Draft`,`Off`
values "gs_detlevel_3D_m" 2, 1, 3, 0

if GLOB_MODPAR_NAME = "gs_detlevel_3D" then
	gs_detlevel_3D_m = 2	! Detailed
	if gs_detlevel_3D = st_detail3D[4] then gs_detlevel_3D_m = 0
	if gs_detlevel_3D = st_detail3D[2] then gs_detlevel_3D_m = 1
	if gs_detlevel_3D = st_detail3D[3] then gs_detlevel_3D_m = 3
	parameters gs_detlevel_3D_m = gs_detlevel_3D_m
else
	gs_detlevel_3D = st_detail3D[1]
	if gs_detlevel_3D_m = 0 then gs_detlevel_3D = st_detail3D[4]
	if gs_detlevel_3D_m = 1 then gs_detlevel_3D = st_detail3D[2]
	if gs_detlevel_3D_m = 3 then gs_detlevel_3D = st_detail3D[3]
	parameters gs_detlevel_3D = gs_detlevel_3D
endif

if gs_cont_pen=0 then parameters gs_cont_pen=75
if gs_fill_pen=0 then parameters gs_fill_pen=19

if gs_detlevel_3D_m = 1 then lock "gs_resol"

dim st_cabinType[4]
	st_cabinType[1] = `Ниша`
	st_cabinType[2] = `Угол`
	st_cabinType[3] = `Полуостров`
	st_cabinType[4] = `Отдельностоящая`

values "cabinType" st_cabinType

if GLOB_MODPAR_NAME = "cabinType" then
	for hi = 1 to vardim1(st_cabinType)
		if cabinType = st_cabinType[hi] then
			iCabinType = hi
		endif
	next hi
	parameters iCabinType = iCabinType
else
	cabinType = st_cabinType[iCabinType]
	parameters cabinType = cabinType
endif

dim st_cabinForm[8]
	st_cabinForm[1] = `Квадратная Ниша`
	st_cabinForm[2] = `Квадратный Угол`
	st_cabinForm[3] = `Скругленный Угол`
	st_cabinForm[4] = `Скошенный Угол`
	st_cabinForm[5] = `Квадратный Полуостров`
	st_cabinForm[6] = `Скругленный Полуостров`
	st_cabinForm[7] = `Квадрат`
	st_cabinForm[8] = `Круглые`

if iCabinType = CABINTYPE_ALCOVE then
	values "cabinForm" st_cabinForm[1]
	values "iCabinForm" 1

	cabinForm = st_cabinForm[1]
	parameters cabinForm = cabinForm
	iCabinForm = 1
	parameters iCabinForm = iCabinForm
	lock "cabinForm", "iCabinForm"
endif
if iCabinType = CABINTYPE_CORNER then
	values "cabinForm" st_cabinForm[2], st_cabinForm[3], st_cabinForm[4]
	values "iCabinForm" 2, 3, 4

	if GLOB_MODPAR_NAME = "cabinForm" then
		iCabinForm = 2
		if cabinForm = st_cabinForm[3] then iCabinForm = 3
		if cabinForm = st_cabinForm[4] then iCabinForm = 4
		parameters iCabinForm = iCabinForm
	else
		cabinForm = st_cabinForm[max(2, min(iCabinForm, vardim1(st_cabinForm)))]
		parameters cabinForm = cabinForm
	endif
endif
if iCabinType = CABINTYPE_PENINSULAR then
	values "cabinForm" st_cabinForm[5], st_cabinForm[6]
	values "iCabinForm" 5, 6

	if GLOB_MODPAR_NAME = "cabinForm" then
		iCabinForm = 5
		if cabinForm = st_cabinForm[6] then iCabinForm = 6
		parameters iCabinForm = iCabinForm
	else
		cabinForm = st_cabinForm[max(5, min(iCabinForm, vardim1(st_cabinForm)))]
		parameters cabinForm = cabinForm
	endif
endif
if iCabinType = CABINTYPE_FREESTANDING then
	values "cabinForm" st_cabinForm[7], st_cabinForm[8]
	values "iCabinForm" 7, 8

	if GLOB_MODPAR_NAME = "cabinForm" then
		iCabinForm = 7
		if cabinForm = st_cabinForm[8] then iCabinForm = 8
		parameters iCabinForm = iCabinForm
	else
		cabinForm = st_cabinForm[max(7, min(iCabinForm, vardim1(st_cabinForm)))]
		parameters cabinForm = cabinForm
	endif
endif

dim st_doorType[11]
	st_doorType[1] = `Одностворчатая Распашная`
	st_doorType[2] = `Двустворчатая Распашная`
	st_doorType[3] = `Одностворчатая с Боковой Панелью`
	st_doorType[4] = `Одностворчатая с Двумя Боковыми Панелями`
	st_doorType[5] = `Двустворчатая с Боковой Панелью`
	st_doorType[6] = `Двустворчатая с Двумя Боковыми Панелями`
	st_doorType[7] = `Складывающаяся`
	st_doorType[8] = `Двустворчатая Складывающаяся`
	st_doorType[9] = `Раздвижная`
	st_doorType[10] = `Двустворчатая Раздвижная`
	st_doorType[11] = `Раздвижная Угловая`

if iCabinForm = CABINFORM_SQUAREDALCOVE then
	values "doorType" 	st_doorType[1], st_doorType[2], st_doorType[3], st_doorType[4], st_doorType[5],\
						st_doorType[6], st_doorType[7], st_doorType[8], st_doorType[9], st_doorType[10]
	values "iDoorType" 1, 2, 3, 4, 5, 6, 7, 8, 9, 10

	if GLOB_MODPAR_NAME = "doorType" then
		for hi = 1 to vardim1(st_doorType) - 1
			if doorType = st_doorType[hi] then
				iDoorType = hi
			endif
		next hi
		parameters iDoorType = iDoorType
	else
		doorType = st_doorType[max(1, min(iDoortype, vardim1(st_doorType)))]
		parameters doorType = doorType
	endif
endif
if iCabinForm = CABINFORM_SQUAREDCORNER | iCabinForm = CABINFORM_SQUAREDPENINSULAR | iCabinForm = CABINFORM_SQUARE then
	values "doorType" 	st_doorType
	values "iDoorType" 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11

	if GLOB_MODPAR_NAME = "doorType" then
		for hi = 1 to vardim1(st_doorType)
			if doorType = st_doorType[hi] then
				iDoorType = hi
			endif
		next hi
		parameters iDoorType = iDoorType
	else
		doorType = st_doorType[max(1, min(iDoortype, vardim1(st_doorType)))]
		parameters doorType = doorType
	endif
endif
if iCabinForm = CABINFORM_ROUNDEDCORNER | iCabinForm = CABINFORM_ROUNDEDPENINSULAR | iCabinForm = CABINFORM_ROUND then
	values "doorType" 	st_doorType[1], st_doorType[2], st_doorType[9], st_doorType[10]
	values "iDoorType" 1, 2, 9, 10

	if GLOB_MODPAR_NAME = "doorType" then
		iDoorType = 1
		if doorType = st_doorType[2] then iDoorType = 2
		if doorType = st_doorType[9] then iDoorType = 9
		if doorType = st_doorType[10] then iDoorType = 10
		parameters iDoorType = iDoorType
	else
		doorType = st_doorType[max(1, min(iDoortype, vardim1(st_doorType)))]
		parameters doorType = doorType
	endif
endif
if iCabinForm = CABINFORM_CHAMFERCORNER then
	values "doorType" 	st_doorType[1], st_doorType[2], st_doorType[7], st_doorType[8]
	values "iDoorType" 1, 2, 7, 8

	if GLOB_MODPAR_NAME = "doorType" then
		iDoorType = 1
		if doorType = st_doorType[2] then iDoorType = 2
		if doorType = st_doorType[7] then iDoorType = 7
		if doorType = st_doorType[8] then iDoorType = 8
		parameters iDoorType = iDoorType
	else
		doorType = st_doorType[max(1, min(iDoortype, vardim1(st_doorType)))]
		parameters doorType = doorType
	endif
endif

dim st_panelType[2]
	st_panelType[1] = `Обрамленная Панель`
	st_panelType[2] = `Полностью Стеклянная`

if iDoorType = DOORTYPE_SIMPLELEAF | iDoorType = DOORTYPE_DOUBLELEAF | iDoorType = DOORTYPE_SIMPLELEAF_SIDEPANEL1\
 | iDoorType = DOORTYPE_SIMPLELEAF_SIDEPANEL2 | iDoorType = DOORTYPE_DOUBLELEAF_SIDEPANEL1 | iDoorType = DOORTYPE_DOUBLELEAF_SIDEPANEL2 then
	values "panelType" 	st_panelType
	values "iPanelType" 1, 2

	if GLOB_MODPAR_NAME = "panelType" then
		iPanelType = 1
		if panelType = st_panelType[2] then	iPanelType = 2
		parameters iPanelType = iPanelType
	else
		panelType = st_panelType[1]
		if iPanelType = 2 then panelType = st_panelType[2]
		parameters panelType = panelType
	endif
else
	panelType = st_panelType[1]
	iPanelType = 1
	parameters panelType = panelType, iPanelType = iPanelType
	lock "panelType"
endif

if iPanelType = PANELTYPE_FRAMED then lock "bBracket"
if iPanelType = PANELTYPE_FRAMED then hideparameter "bBracket"

if iCabinForm = CABINFORM_SQUAREDALCOVE | iCabinForm = CABINFORM_SQUAREDCORNER\
 | iCabinForm = CABINFORM_SQUAREDPENINSULAR | iCabinForm = CABINFORM_SQUARE then
	if iDoorType <> DOORTYPE_SLIDING then
		values "cabinSize" st_cabinSize[1], st_cabinSize[2], st_cabinSize[3], st_cabinSize[7]
	else
		values "cabinSize" st_cabinSize[2], st_cabinSize[3], st_cabinSize[7]
	endif
	values "iCabinSize" 1, 2, 3, 7

gosub "SizeOfCabin"

	if iDoorType = DOORTYPE_SIMPLELEAF_SIDEPANEL1 | iDoorType = DOORTYPE_DOUBLELEAF_SIDEPANEL1 then
		if ((GLOB_MODPAR_NAME = "doorType" | GLOB_MODPAR_NAME = "cabinSize") & cabinSize = st_cabinSize[1])  then doorWidth = defaultDoorWidth2
		if ((GLOB_MODPAR_NAME = "doorType" | GLOB_MODPAR_NAME = "cabinSize") & cabinSize = st_cabinSize[2])  then doorWidth = defaultDoorWidth3
		if ((GLOB_MODPAR_NAME = "doorType" | GLOB_MODPAR_NAME = "cabinSize") & cabinSize = st_cabinSize[3])  then doorWidth = defaultDoorWidth4
	endif
	if iDoorType = DOORTYPE_SIMPLELEAF_SIDEPANEL2 | iDoorType = DOORTYPE_DOUBLELEAF_SIDEPANEL2 | iDoorType = DOORTYPE_SLIDING | iDoorType = DOORTYPE_DOUBLESLIDING then
		if ((GLOB_MODPAR_NAME = "doorType" | GLOB_MODPAR_NAME = "cabinSize") & cabinSize = st_cabinSize[1])  then doorWidth = defaultDoorWidth1
		if ((GLOB_MODPAR_NAME = "doorType" | GLOB_MODPAR_NAME = "cabinSize") & cabinSize = st_cabinSize[2])  then doorWidth = defaultDoorWidth2
		if ((GLOB_MODPAR_NAME = "doorType" | GLOB_MODPAR_NAME = "cabinSize") & cabinSize = st_cabinSize[3])  then doorWidth = defaultDoorWidth4
	endif
	if iDoorType = DOORTYPE_CORNERSLIDING then
		if ((GLOB_MODPAR_NAME = "doorType" | GLOB_MODPAR_NAME = "cabinSize") & cabinSize = st_cabinSize[1])  then doorWidth = defaultDoorWidth5
		if ((GLOB_MODPAR_NAME = "doorType" | GLOB_MODPAR_NAME = "cabinSize") & cabinSize = st_cabinSize[2])  then doorWidth = defaultDoorWidth6
		if ((GLOB_MODPAR_NAME = "doorType" | GLOB_MODPAR_NAME = "cabinSize") & cabinSize = st_cabinSize[3])  then doorWidth = defaultDoorWidth7
	endif
	parameters doorWidth = doorWidth

	if GLOB_MODPAR_NAME = "doorType" then
		if iDoorType = DOORTYPE_SIMPLELEAF_SIDEPANEL1 | iDoorType = DOORTYPE_DOUBLELEAF_SIDEPANEL1 | iDoorType = DOORTYPE_SLIDING then
			sidePanelWidthL = A - doorWidth
			parameters sidePanelWidthL = sidePanelWidthL
		endif
		if iDoorType = DOORTYPE_SIMPLELEAF_SIDEPANEL2 | iDoorType = DOORTYPE_DOUBLELEAF_SIDEPANEL2 | iDoorType = DOORTYPE_DOUBLESLIDING then
			sidePanelWidthL = (A - doorWidth) / 2
			sidePanelWidthR = sidePanelWidthL
			parameters sidePanelWidthL = sidePanelWidthL, sidePanelWidthR = sidePanelWidthR
		endif
	endif
endif
if iCabinForm = CABINFORM_ROUNDEDCORNER | iCabinForm = CABINFORM_CHAMFERCORNER then
	values "cabinSize" st_cabinSize[1], st_cabinSize[2], st_cabinSize[3], st_cabinSize[7]
	values "iCabinSize" 1, 2, 3, 7

gosub "SizeOfCabin"

	if ((GLOB_MODPAR_NAME = "cabinForm" | GLOB_MODPAR_NAME = "cabinSize") & cabinSize = st_cabinSize[1])  then
		doorWidth = defaultDoorWidth5
	endif
	if ((GLOB_MODPAR_NAME = "cabinForm" | GLOB_MODPAR_NAME = "cabinSize") & cabinSize = st_cabinSize[2])  then
		doorWidth = defaultDoorWidth6
	endif
	if ((GLOB_MODPAR_NAME = "cabinForm" | GLOB_MODPAR_NAME = "cabinSize") & cabinSize = st_cabinSize[3])  then
		doorWidth = defaultDoorWidth7
	endif
	parameters doorWidth = doorWidth
endif
if iCabinForm = CABINFORM_ROUNDEDPENINSULAR then
	values "cabinSize" st_cabinSize[1], st_cabinSize[2], st_cabinSize[3], st_cabinSize[7]
	values "iCabinSize" 1, 2, 3, 7

gosub "SizeOfCabin"

	if ((GLOB_MODPAR_NAME = "cabinForm" | GLOB_MODPAR_NAME = "cabinSize") & cabinSize = st_cabinSize[1])  then
		doorWidth = defaultDoorWidth4
	endif
	if ((GLOB_MODPAR_NAME = "cabinForm" | GLOB_MODPAR_NAME = "cabinSize") & cabinSize = st_cabinSize[2])  then
		doorWidth = defaultDoorWidth4
	endif
	if ((GLOB_MODPAR_NAME = "cabinForm" | GLOB_MODPAR_NAME = "cabinSize") & cabinSize = st_cabinSize[3])  then
		doorWidth = defaultDoorWidth4
	endif
	parameters doorWidth = doorWidth
endif
if iCabinForm = CABINFORM_ROUND then
	values "cabinSize" st_cabinSize[4], st_cabinSize[5], st_cabinSize[6], st_cabinSize[7]
	values "iCabinSize" 4, 5, 6, 7

	if GLOB_MODPAR_NAME = "cabinSize" then
		iCabinSize = 4
		if cabinSize = st_cabinSize[5] then iCabinSize = 5
		if cabinSize = st_cabinSize[6] then iCabinSize = 6
		if cabinSize = st_cabinSize[7] then iCabinSize = 7
		parameters iCabinSize = iCabinSize
	else
		cabinSize = st_cabinSize[max(4, min(iCabinSize, vardim1(st_cabinSize)))]
		parameters cabinSize = cabinSize
	endif

	if GLOB_MODPAR_NAME = "A" | GLOB_MODPAR_NAME = "B" then
		cabinSize = st_cabinSize[7]
		if abs(A - defaultCabinSize1) < eps & abs(B - defaultCabinSize1) < eps then
			cabinSize = st_cabinSize[4]
			iCabinSize = 4
		endif
		if abs(A - defaultCabinSize2) < eps & abs(B - defaultCabinSize2) < eps then
			cabinSize = st_cabinSize[5]
			iCabinSize = 5
		endif
		if abs(A - defaultCabinSize3) < eps & abs(B - defaultCabinSize3) < eps then
			cabinSize = st_cabinSize[6]
			iCabinSize = 6
		endif
		parameters cabinSize = cabinSize
		parameters iCabinSize = iCabinSize
	endif

	if (GLOB_MODPAR_NAME = "A" | GLOB_MODPAR_NAME = "doorType" | GLOB_MODPAR_NAME = "cabinSize" | GLOB_MODPAR_NAME = "cabinForm") then
		doorWidth = defaultDoorWidth4
		parameters doorWidth = doorWidth
	endif
endif

if GLOB_MODPAR_NAME = "cabinSize" then
	if cabinSize = st_cabinSize[1] | cabinSize = st_cabinSize[4] then
		A = defaultCabinSize1
		B = defaultCabinSize1
		parameters A = A, B = B
	endif
	if cabinSize = st_cabinSize[2] | cabinSize = st_cabinSize[5] then
		A = defaultCabinSize2
		B = defaultCabinSize2
		parameters A = A, B = B
	endif
	if cabinSize = st_cabinSize[3] | cabinSize = st_cabinSize[6] then
		A = defaultCabinSize3
		B = defaultCabinSize3
		parameters A = A, B = B
	endif
endif

dim st_handleType[8]
	st_handleType[1] = `Стиль 1`
	st_handleType[2] = `Стиль 2`
	st_handleType[3] = `Стиль 3`
	st_handleType[4] = `Стиль 4`
	st_handleType[5] = `Стиль 5`
	st_handleType[6] = `Стиль 6`
	st_handleType[7] = `Стиль 7`
	st_handleType[8] = `Нет`

values "handleType" st_handleType

if GLOB_MODPAR_NAME = "handleType" then
	for hi = 1 to vardim1(st_handleType)
		if handleType = st_handleType[hi] then
			iHandleType = hi
		endif
	next hi
	parameters iHandleType = iHandleType
else
	handleType = st_handleType[max(1, min(iHandleType, vardim1(st_handleType)))]
	parameters handleType = handleType
endif

call "showerCabin_m" parameters all

call "2dDetailLevel" parameters	all enable2dDetLevels	= 2 + 4 + 8 + 16

if iCabinType = CABINTYPE_FREESTANDING then	!! Only gs_tap_type_m 0, 27 are enabled
	enableCustomTaps = 2**2 + 2**29
else										!! gs_tap_type_m 0, 24, 25, 26, 27 are enabled
	enableCustomTaps = 2**2 + 2**26 + 2**27 + 2**28 + 2**29
endif

call "tapType_m" parameters	all	enableTapGroups			= 0,
								enableSingleLevelTaps	= 0,
								enableTwoHandleTaps		= 0,
								enableTraditionalTaps	= 0,
								enableSensorFaucets		= 0,
								enableWallMountedTaps	= 0,
								enableCustomTaps		= enableCustomTaps,
								bEnableTapEdit			= 0,
								bShowerCabin			= 1,
								bShowerCabinFreeStand	= (iCabinType = CABINTYPE_FREESTANDING),
								enableTapSymbols		= 0


! ==============================================================================
! Limitation
! ==============================================================================

values "A" range [0.60, ]
values "B" range [0.46, ]
values "ZZYZX" range [1.8, ]
values "cabinFrameWidth" range (0, 0.1]
values "doorFrameWidth" range (0, 0.1]
values "trayThk" range [0.1, 0.5]
If not(bTray) then lock "trayThk"

if iCabinForm = CABINFORM_SQUAREDALCOVE | iCabinForm = CABINFORM_SQUAREDCORNER\
 | iCabinForm = CABINFORM_SQUAREDPENINSULAR | iCabinForm = CABINFORM_SQUARE then
	if iDoorType = DOORTYPE_SIMPLELEAF_SIDEPANEL1 | iDoorType = DOORTYPE_DOUBLELEAF_SIDEPANEL1 | iDoorType = DOORTYPE_SLIDING then
		doorWidthMin = 0.4
		doorWidthMax = min(A - 3*cabinFrameWidth, 1)
		values "doorWidth" range [doorWidthMin, doorWidthMax]
		values "halfDoorWidth" range [doorWidthMin/2, doorWidthMax/2]
		values "sidePanelWidthL" range [max(3*cabinFrameWidth,A - doorWidthMax), A - doorWidthMin]
		lock "sidePanelWidthR"
		hideparameter "sidePanelWidthR"
	endif
	if iDoorType = DOORTYPE_SIMPLELEAF_SIDEPANEL2 | iDoorType = DOORTYPE_DOUBLELEAF_SIDEPANEL2 | iDoorType = DOORTYPE_DOUBLESLIDING then
		doorWidthMin = 0.4
		doorWidthMax = min(A - 6*cabinFrameWidth, 1)
		values "doorWidth" range [doorWidthMin, doorWidthMax]
		values "halfDoorWidth" range [doorWidthMin/2, doorWidthMax/2]
		values "sidePanelWidthL" range [3*cabinFrameWidth, A - doorWidthMin - 3*cabinFrameWidth]
		values "sidePanelWidthR" range [3*cabinFrameWidth, A - doorWidthMin - 3*cabinFrameWidth]
	endif
	if iDoorType = DOORTYPE_SIMPLELEAF | iDoorType = DOORTYPE_DOUBLELEAF | iDoorType = DOORTYPE_FOLDING | iDoorType = DOORTYPE_DOUBLEFOLDING then
		lock "doorWidth", "sidePanelWidthL", "sidePanelWidthR"
		hideparameter "doorWidth", "sidePanelWidthL", "sidePanelWidthR"
	endif
	if iDoorType = DOORTYPE_FOLDING then values "gs_open3D" range [0, A - 2*cabinFrameWidth - 2*frameThk]
	if iDoorType = DOORTYPE_DOUBLEFOLDING then values "gs_open3D" range [0, A/2 - cabinFrameWidth - 2*frameThk]
	panelThkMod = 0
	if iCabinForm <> CABINFORM_SQUAREDALCOVE then panelThkMod = frameThk
	if iDoorType = DOORTYPE_SLIDING then values "gs_open3D" range [0, min(sidePanelWidthL - doorFrameWidth - panelThkMod, A - sidePanelWidthL)]
	if iDoorType = DOORTYPE_DOUBLESLIDING then values "gs_open3D" range [0, min(doorWidth/2, sidePanelWidthL - doorFrameWidth - panelThkMod, sidePanelWidthR - doorFrameWidth - panelThkMod)]
	if iDoortype = DOORTYPE_CORNERSLIDING then
		doorWidthMin = 0.4
		doorWidthMax = min((A - 5*cabinFrameWidth)/cos(45), 1)
		values "doorWidth" range [doorWidthMin, doorWidthMax]
		values "halfDoorWidth" range [doorWidthMin/2, doorWidthMax/2]
		values "gs_open3D" range [0, min(sidePanelWidthL - doorFrameWidth - panelThkMod, sidePanelWidthR - doorFrameWidth - panelThkMod, A - sidePanelWidthL - panelThkMod)]
	endif
	values "gs_open_3D" range [0, 90]
endif
if iCabinForm = CABINFORM_ROUNDEDCORNER then
	if iDoorType = DOORTYPE_SIMPLELEAF | iDoorType = DOORTYPE_DOUBLELEAF then
		doorWidthMin = 0.4
		doorWidthMax = min((A - 3*cabinFrameWidth)/cos(45), 1)
		values "doorWidth" range [doorWidthMin, doorWidthMax]
		values "halfDoorWidth" range [doorWidthMin/2, doorWidthMax/2]
	endif
	if iDoorType = DOORTYPE_SLIDING | iDoorType = DOORTYPE_DOUBLESLIDING then
		doorWidthMin = 0.4
		doorWidthMax = min((A/2 + cabinFrameWidth)/cos(45), 1)
		values "doorWidth" range [doorWidthMin, doorWidthMax]
		values "halfDoorWidth" range [doorWidthMin/2, doorWidthMax/2]
	endif
	arcRadius = doorWidth*cos(45) - frameThk
	panelWidth = arcRadius * PI / 2
	if iDoorType = DOORTYPE_SLIDING then values "gs_open3D" range [0, panelWidth]
	if iDoorType = DOORTYPE_DOUBLESLIDING then values "gs_open3D" range [0, panelWidth/2]
	if GLOB_MODPAR_NAME = "gs_open3D" then
		gs_open_3D = 2*gs_open3D/A/PI*180
		parameters gs_open_3D = gs_open_3D
	else
		gs_open3D = gs_open_3D/2*A*PI/180
		parameters gs_open3D = gs_open3D
	endif
	values "gs_open_3D" range [0, 90]
	values "sidePanelWidthL" range [3*cabinFrameWidth, A - doorWidthMin*cos(45)]
	values "sidePanelWidthR" range [3*cabinFrameWidth, B - doorWidthMin*cos(45)]
endif
if iCabinForm = CABINFORM_CHAMFERCORNER then
	_sidePanelWidthMin = 0.17
	doorWidthMin = 0.4
	_shorterSide = min (A, B)
	doorWidthMax = min((_shorterSide - _sidePanelWidthMin)/cos(45), 1)
	values "doorWidth" range [doorWidthMin, doorWidthMax]
	values "halfDoorWidth" range [doorWidthMin/2, doorWidthMax/2]
	if iDoorType = DOORTYPE_FOLDING then values "gs_open3D" range [0, doorWidth - 2*cabinFrameWidth - 2*frameThk]
	if iDoorType = DOORTYPE_DOUBLEFOLDING then values "gs_open3D" range [0, doorWidth/2 - cabinFrameWidth - 2*frameThk]
	values "gs_open_3D" range [0, arcAngle]

	if B < A then
		values "sidePanelWidthL" range [_sidePanelWidthMin + A - B,	A - doorWidthMin*cos(45)]
		values "sidePanelWidthR" range [_sidePanelWidthMin,			B - doorWidthMin*cos(45)]
	else !if A <= B
		values "sidePanelWidthL" range [_sidePanelWidthMin,			A - doorWidthMin*cos(45)]
		values "sidePanelWidthR" range [_sidePanelWidthMin + B - A,	B - doorWidthMin*cos(45)]
	endif

	if GLOB_MODPAR_NAME = "sidePanelWidthR" then
		_sidePanelWidthL	= sidePanelWidthR + A - B
		_doorWidth			= (A - _sidePanelWidthL) / cos(45)
		parameters		sidePanelWidthL	= _sidePanelWidthL,
						doorWidth		= _doorWidth
	else
		if GLOB_MODPAR_NAME = "doorWidth" then
			_sidePanelWidthL	= A - doorWidth* cos(45)
			_sidePanelWidthR	= B - doorWidth* cos(45)
			parameters		sidePanelWidthL	= _sidePanelWidthL,
							sidePanelWidthR	= _sidePanelWidthR
		else
			_sidePanelWidthR	= sidePanelWidthL + B - A
			_doorWidth			= (A - _sidePanelWidthL) / cos(45)
			parameters		sidePanelWidthR	= _sidePanelWidthR,
							doorWidth		= _doorWidth
		endif
	endif

endif
if iCabinForm = CABINFORM_ROUNDEDPENINSULAR | iCabinForm = CABINFORM_ROUND then
	B = A
	parameters B = B
	lock "B"
	doorWidthMin = 0.4
	doorWidthMax = min(A * 0.8, 1)
	values "doorWidth" range [doorWidthMin, doorWidthMax]
	values "halfDoorWidth" range [doorWidthMin/2, doorWidthMax/2]
	arcAngle = 2 * asn(doorWidth/A)
	panelWidth = A/2 * PI * arcAngle/180
	if iDoorType = DOORTYPE_SLIDING then values "gs_open3D" range [0, panelWidth]
	if iDoorType = DOORTYPE_DOUBLESLIDING then values "gs_open3D" range [0, panelWidth/2]
	if GLOB_MODPAR_NAME = "gs_open3D" then
		gs_open_3D = 2*gs_open3D/A/PI*180
		parameters gs_open_3D = gs_open_3D
	else
		gs_open3D = gs_open_3D/2*A*PI/180
		parameters gs_open3D = gs_open3D
	endif
	values "gs_open_3D" range [0, arcAngle]
endif

if iDoorType <> DOORTYPE_SIMPLELEAF & iDoorType <> DOORTYPE_SIMPLELEAF_SIDEPANEL1 & iDoorType <> DOORTYPE_SIMPLELEAF_SIDEPANEL2 then
	lock "bMirrorDoor"
	hideparameter "bMirrorDoor"
endif

if iCabinType = CABINTYPE_FREESTANDING then
	xTapPos = A/2
	parameters xTapPos = xTapPos
else
	values "xTapPos" range [0.2, A - 0.3]
endif
if gs_tap_type_m = TAPTYPE_PANEL then
	zTapPos = 1
	parameters zTapPos = zTapPos
else
	values "zTapPos" range [0.4, 1.1]
endif

values "gs_resol" range [12,)
values "MSFront" range [0,)

if iPanelType = 2 then ! Fully Glazed
	lock "cabinFrameWidth", "doorFrameWidth"
	hideparameter "cabinFrameWidth", "doorFrameWidth"
endif

if not(bGrabBar) then lock "bGrabBar2D"
if gs_tap_type_m = TAPTYPE_NONE then lock "bShowShowerKit"

if _iGrabPos = GRAB_NONE then
	hideparameter "bGrabBar2D"
	lock "bGrabBar2D"
	lock "bGrabBar"
	hideparameter "bGrabBar"
endif
! ==============================================================================
! MEP
! ==============================================================================

IF isMEPEnabled THEN

	IF NOT(ConStatus_1) AND NOT(ConStatus_2) AND NOT(ConStatus_3) THEN
		LOCK "gs_con_mat"
		HIDEPARAMETER "gs_con_mat"
	ENDIF

	DIM shape_typ_to_validation[3]
		shape_typ_to_validation[1] = 0		! Rectangle
		shape_typ_to_validation[2] = 1		! Circle
		shape_typ_to_validation[3] = 0		! Oval

					! --- CONNECTIONS --- !

	PARAMETERS MEP_NumberConnections = 3


					! --- 1st CONNECTION --- !

	ConID = 1
	ConName = `Подключение Горячей Воды`

	if gs_tap_type_m <> TAPTYPE_NONE then
		IF ConWidth_1 < 0.001 THEN
			ConWidth_1 = 0.001
			PARAMETERS ConWidth_1 = ConWidth_1
		ENDIF
		IF ConWidth_1 > MIN(A/2, zzyzx/2) THEN
			ConWidth_1 = MIN(A/2, zzyzx/2)
			PARAMETERS ConWidth_1 = ConWidth_1
		ENDIF
		VALUES "ConWidth_1" RANGE (0, MIN(A/2, zzyzx/2)]
		PARAMETERS ConDepth_1 = ConWidth_1
		VALUES "ConLength_1" RANGE [0, ]

		ConDVecX = 0
		ConDVecY = 1
		ConDVecZ = 0

		ConWVecX = -1
		ConWVecY = 0
		ConWVecZ = 0

		! Default Position
		if (GLOB_MODPAR_NAME = "gs_tap_type" | GLOB_MODPAR_NAME = "gs_tap_type_m" | \
		GLOB_MODPAR_NAME = "tapGroup" | GLOB_MODPAR_NAME = "iTapGroup") then
			if gs_tap_type_m = 26 then
				ConPosX_1 = widthTap/4
				ConPosZ_1 = zTapPos
			else
				if gs_tap_type_m = 27 then
					ConPosX_1 = 0
					ConPosZ_1 = zTapPos - 0.05
				else
					ConPosX_1 = posTap + widthTap/2
					ConPosZ_1 = zTapPos
				endif
			endif
			parameters	ConPosX_1 = ConPosX_1,
						ConPosZ_1 = ConPosZ_1
		endif

		! Position in y direction
		if GLOB_MODPAR_NAME = "B" then
			_ConPosY_1 = B / 2
			parameters	ConPosY_1 = _ConPosY_1
		endif

		if gs_tap_type_m > 25 then
			values "ConPosX_1" range [-limit_X + ConWidth_1/2, limit_X - ConWidth_1/2]
			values "ConPosZ_1" range [zTapPos - limit_Y1 + ConWidth_1/2, zTapPos + limit_Y2 - ConWidth_1/2]
		else

			! --- X Range
			values "ConPosX_1"	range [posTap + ConWidth_1/2,posTap+widthTap - ConWidth_1/2],
								range [-(posTap+widthTap - ConWidth_1/2),-(posTap + ConWidth_1/2)]

			! --- Change Connection Side
			if GLOB_MODPAR_NAME = "ConPosX_2" then
				if ConPosX_2 < 0 & ConPosX_1 < 0 then
					ConPosX_1 = posTap + widthTap/2
					parameters 	ConPosX_1 = ConPosX_1
				endif
				if ConPosX_2 > 0 & ConPosX_1 > 0 then
					ConPosX_1 = -(posTap + widthTap/2)
					parameters 	ConPosX_1 = ConPosX_1
				endif
			endif

			ConPosZ_1 = zTapPos
		endif



		parameters 	ConPosX_1 = ConPosX_1,
					ConPosZ_1 = ConPosZ_1

	else
		ConStatus_1 = 0
		lock "ConStatus_1"
		hideparameter "ConStatus_1"
	endif

	CALL "MEP_m_ConnectionsACL_4" PARAMETERS SetProgram = SetProgram,
		gs_Connections = gs_Connections,
		MEP_NumConnectionData = MEP_NumConnectionData,
		MEP_StrConnectionData = MEP_StrConnectionData,
		MEP_NumberConnections = MEP_NumberConnections,
		gs_AddConnections = gs_AddConnections,
		ConName = ConName,
		ConID = ConID,
		ConPosX = ConPosX_1,
		ConPosY = ConPosY_1,
		ConPosZ = ConPosZ_1,
		ConDVecX = ConDVecX,
		ConDVecY = ConDVecY,
		ConDVecZ = ConDVecZ,
		ConWVecX = ConWVecX,
		ConWVecY = ConWVecY,
		ConWVecZ = ConWVecZ,

		ConNominalWidth = ConNominalWidth_1,
		ConNominalDepth = ConNominalDepth_1,
		ConWidth = ConWidth_1,
		ConDepth = ConDepth_1,
		ConLength = ConLength_1,
		ConWallThickness = ConWallThickness_1,
		ConConnectorWidth = ConConnectorWidth_1,
		ConConnectorDepth = ConConnectorDepth_1,
		ConConnectorWidth2 = ConConnectorWidth2_1,
		ConToolType = ConToolType_1,
		ConStatus = ConStatus_1,
		ConType_1 = ConType_1,
		ConConnectorType_1 = ConConnectorType_1,
		ConSystem_1 = ConSystem_1,
		ui_current_con = ui_current_con,
		shape_typ_to_validation = shape_typ_to_validation,
		MEP_enabled_geometry_mod = 1,
		gs_ui = 1


	PARAMETERS MEP_ConInfo[ConID][1] = STR(ConToolType_1, 1, 0)
	PARAMETERS MEP_ConInfo[ConID][2] = ConName
	PARAMETERS MEP_ConInfo[ConID][3] = "0"


					! --- 2nd CONNECTION --- !

	ConID = 2
	ConName = `Подключение Холодной Воды`

	if gs_tap_type_m <> TAPTYPE_NONE then
		IF ConWidth_2 < 0.001 THEN
			ConWidth_2 = 0.001
			PARAMETERS ConWidth_2 = ConWidth_2
		ENDIF
		IF ConWidth_2 > MIN(A/2, zzyzx/2) THEN
			ConWidth_2 = MIN(A/2, zzyzx/2)
			PARAMETERS ConWidth_2 = ConWidth_2
		ENDIF
		VALUES "ConWidth_2" RANGE (0, MIN(A/2, zzyzx/2)]
		PARAMETERS ConDepth_2 = ConWidth_2
		VALUES "ConLength_2" RANGE [0, ]

		ConDVecX = 0
		ConDVecY = 1
		ConDVecZ = 0

		ConWVecX = -1
		ConWVecY = 0
		ConWVecZ = 0

		! Default Position
		if (GLOB_MODPAR_NAME = "gs_tap_type" | GLOB_MODPAR_NAME = "gs_tap_type_m" | \
		GLOB_MODPAR_NAME = "tapGroup" | GLOB_MODPAR_NAME = "iTapGroup") then
			if gs_tap_type_m = 26 then
				ConPosX_2 = -widthTap/4
				ConPosZ_2 = zTapPos
			else
				if gs_tap_type_m = 27 then
					ConPosX_2 = 0
					ConPosZ_2 = zTapPos + 0.05
				else
					ConPosX_2 = -posTap - widthTap/2
					ConPosZ_2 = zTapPos
				endif
			endif
			parameters	ConPosX_2 = ConPosX_2,
						ConPosZ_2 = ConPosZ_2
		endif

		! Position in y direction
		if GLOB_MODPAR_NAME = "B" then
			_ConPosY_2 = B / 2
			parameters	ConPosY_2 = _ConPosY_2
		endif

		if gs_tap_type_m > 25 then
			values "ConPosX_2" range [-limit_X + ConWidth_2/2, limit_X - ConWidth_2/2]
			values "ConPosZ_2" range [zTapPos - limit_Y1 + ConWidth_2/2, zTapPos + limit_Y2 - ConWidth_2/2]
		else
			! --- X Range
			values "ConPosX_2"	range [posTap + ConWidth_2/2,posTap+widthTap - ConWidth_2/2],
								range [-(posTap+widthTap - ConWidth_2/2),-(posTap + ConWidth_2/2)]

			! --- Change Connection Side
			if GLOB_MODPAR_NAME = "ConPosX_1" then
				if ConPosX_1 < 0 & ConPosX_2 < 0 then
					ConPosX_2 = posTap + widthTap/2
					parameters 	ConPosX_2 = ConPosX_2
				endif
				if ConPosX_1 > 0 & ConPosX_2 > 0 then
					ConPosX_2 = -(posTap + widthTap/2)
					parameters 	ConPosX_2 = ConPosX_2
				endif
			endif

			ConPosZ_2 = zTapPos
		endif


		parameters 	ConPosX_2 = ConPosX_2,
					ConPosZ_2 = ConPosZ_2
	else
		ConStatus_2 = 0
		lock "ConStatus_2"
		hideparameter "ConStatus_2"
	endif

	CALL "MEP_m_ConnectionsACL_4" PARAMETERS SetProgram = SetProgram,
		gs_Connections = gs_Connections,
		MEP_NumConnectionData = MEP_NumConnectionData,
		MEP_StrConnectionData = MEP_StrConnectionData,
		MEP_NumberConnections = MEP_NumberConnections,
		gs_AddConnections = gs_AddConnections,
		ConName = ConName,
		ConID = ConID,
		ConPosX = ConPosX_2,
		ConPosY = ConPosY_2,
		ConPosZ = ConPosZ_2,
		ConDVecX = ConDVecX,
		ConDVecY = ConDVecY,
		ConDVecZ = ConDVecZ,
		ConWVecX = ConWVecX,
		ConWVecY = ConWVecY,
		ConWVecZ = ConWVecZ,

		ConNominalWidth = ConNominalWidth_2,
		ConNominalDepth = ConNominalDepth_2,
		ConWidth = ConWidth_2,
		ConDepth = ConDepth_2,
		ConLength = ConLength_2,
		ConWallThickness = ConWallThickness_2,
		ConConnectorWidth = ConConnectorWidth_2,
		ConConnectorDepth = ConConnectorDepth_2,
		ConConnectorWidth2 = ConConnectorWidth2_2,
		ConToolType = ConToolType_2,
		ConStatus = ConStatus_2,
		ConType_2 = ConType_2,
		ConConnectorType_2 = ConConnectorType_2,
		ConSystem_2 = ConSystem_2,
		shape_typ_to_validation = shape_typ_to_validation,
		MEP_enabled_geometry_mod = 1,
		gs_ui = 0


	PARAMETERS MEP_ConInfo[ConID][1] = STR(ConToolType_2, 1, 0)
	PARAMETERS MEP_ConInfo[ConID][2] = ConName
	PARAMETERS MEP_ConInfo[ConID][3] = "0"


					! --- 3rd CONNECTION --- !

	ConID = 3
	ConName = `Подключение Канализации`

	ConDVecX = 0
	ConDVecY = 0
	ConDVecZ = -1

	ConWVecX = -1
	ConWVecY = 0
	ConWVecZ = 0

	IF ConWidth_3 < 0.001 THEN
		ConWidth_3 = 0.001
		PARAMETERS ConWidth_3 = ConWidth_3
	ENDIF
	IF ConWidth_3 > MIN(A/2, B/2) THEN
		ConWidth_3 = MIN(A/2, B/2)
		PARAMETERS ConWidth_3 = ConWidth_3
	ENDIF
	VALUES "ConWidth_3" RANGE (0, MIN(A/2, B/2)]
	PARAMETERS ConDepth_3 = ConWidth_3
	VALUES "ConLength_3" RANGE [0, ]

	if iCabinForm <> CABINFORM_ROUND then
		PARAMETERS ConPosX_3 = -A/2+0.175
	else
		PARAMETERS ConPosX_3 = 0
	endif
	PARAMETERS ConPosY_3 = B/2-0.175
	PARAMETERS ConPosZ_3 = 0


	CALL "MEP_m_ConnectionsACL_4" PARAMETERS SetProgram = SetProgram,
		gs_Connections = gs_Connections,
		MEP_NumConnectionData = MEP_NumConnectionData,
		MEP_StrConnectionData = MEP_StrConnectionData,
		MEP_NumberConnections = MEP_NumberConnections,
		gs_AddConnections = gs_AddConnections,
		ConName = ConName,
		ConID = ConID,
		ConPosX = ConPosX_3,
		ConPosY = ConPosY_3,
		ConPosZ = ConPosZ_3,
		ConDVecX = ConDVecX,
		ConDVecY = ConDVecY,
		ConDVecZ = ConDVecZ,
		ConWVecX = ConWVecX,
		ConWVecY = ConWVecY,
		ConWVecZ = ConWVecZ,

		ConNominalWidth = ConNominalWidth_3,
		ConNominalDepth = ConNominalDepth_3,
		ConWidth = ConWidth_3,
		ConDepth = ConDepth_3,
		ConLength = ConLength_3,
		ConWallThickness = ConWallThickness_3,
		ConConnectorWidth = ConConnectorWidth_3,
		ConConnectorDepth = ConConnectorDepth_3,
		ConConnectorWidth2 = ConConnectorWidth2_3,
		ConToolType = ConToolType_3,
		ConStatus = ConStatus_3,
		ConType_3 = ConType_3,
		ConConnectorType_3 = ConConnectorType_3,
		ConSystem_3 = ConSystem_3,
		shape_typ_to_validation = shape_typ_to_validation,
		MEP_enabled_geometry_mod = 1,
		gs_ui = 0


	PARAMETERS MEP_ConInfo[ConID][1] = STR(ConToolType_3, 1, 0)
	PARAMETERS MEP_ConInfo[ConID][2] = ConName
	PARAMETERS MEP_ConInfo[ConID][3] = "0"

	IF gs_ui_current_page = 4 THEN
		ac_mep_connectionpage_active = 1
	ELSE
		ac_mep_connectionpage_active = 0
	ENDIF
	PARAMETERS ac_mep_connectionpage_active = ac_mep_connectionpage_active

	IF SetProgram THEN
		SetProgram = 0
		PARAMETERS SetProgram = SetProgram
	ENDIF
ELSE
	HIDEPARAMETER "gs_connection", "gs_con_mat", "useSysMat"

	ac_mep_connectionpage_active = 0
	PARAMETERS ac_mep_connectionpage_active = ac_mep_connectionpage_active
ENDIF

call "ui_plumbingfixtures" parameters iObjectType 		= 23,
								gs_ui_current_page = gs_ui_current_page

! =============================================================================
! Onorm list Settings
! =============================================================================
if LibraryLangCode = "AUT" or LibraryLangCode = "CHE" or LibraryLangCode = "GER" then
	call "Onorm_Plumbing" parameters all
else
	hideparameter "gs_onorm_Title"
endif
END


! =============================================================================
"SizeOfCabin":
! =============================================================================
if GLOB_MODPAR_NAME = "cabinSize" then
	iCabinSize = 1
	if cabinSize = st_cabinSize[2] then iCabinSize = 2
	if cabinSize = st_cabinSize[3] then iCabinSize = 3
	if cabinSize = st_cabinSize[7] then iCabinSize = 7
	parameters iCabinSize = iCabinSize
else
	cabinSize = st_cabinSize[max(1, min(iCabinSize, vardim1(st_cabinSize)))]
	parameters cabinSize = cabinSize
endif
if GLOB_MODPAR_NAME = "A" | GLOB_MODPAR_NAME = "B" then
	cabinSize = st_cabinSize[7]
	iCabinSize = 7
	if abs(A - defaultCabinSize1) < eps & abs(B - defaultCabinSize1) < eps then
		cabinSize = st_cabinSize[1]
		iCabinSize = 1
	endif
	if abs(A - defaultCabinSize2) < eps & abs(B - defaultCabinSize2) < eps then
		cabinSize = st_cabinSize[2]
		iCabinSize = 2
	endif
	if abs(A - defaultCabinSize3) < eps & abs(B - defaultCabinSize3) < eps then
		cabinSize = st_cabinSize[3]
		iCabinSize = 3
	endif
	parameters 	cabinSize = cabinSize,
				iCabinSize = iCabinSize
endif
return
