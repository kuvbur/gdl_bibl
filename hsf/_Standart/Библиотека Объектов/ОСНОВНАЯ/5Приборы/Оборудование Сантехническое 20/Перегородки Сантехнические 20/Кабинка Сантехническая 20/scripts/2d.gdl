if GLOB_VIEW_TYPE=9 then
	if SYMB_MIRRORED then mul2 -1,1
	project2 4,270,2
	add2 max_wb+max_wl+0.5,0
	project2 4,0,2
	end
endif

unID=1

reqBMinSpace = 0
call "fa_minimalspace" parameters all MSType = 0,
						returned_parameters reqBMinSpace,
											MSFillType,
											MSFillPen,
											MSFillBackPen,
											MSContLineType,
											MSContLinePen

! ------------------------------------------------------------------------------
! Hotspots
! ------------------------------------------------------------------------------

! --- Full Width editing ------------------------------------------------------
hotspot2 0,					0, unID, a, 1 + 256 	: unID = unID + 1
hotspot2 -1,				0, unID, a, 3			: unID = unID + 1
hotspot2 a,					0, unID, a, 2 			: unID = unID + 1

! --- Stall Width editing ------------------------------------------------------
add2 0, thicknessPanel * (iPartitionType = PARTITION_TYPE_STALL or iPartitionType = PARTITION_TYPE_URINAL_SCREEN)
tempDist = 0
for i = 1 to nStalls
	hotspot2 tempDist,					panelLengths[i]/2, unID, stallWidths[i], 1 + 128 	: unID = unID + 1
	hotspot2 tempDist - 1,				panelLengths[i]/2, unID, stallWidths[i], 3			: unID = unID + 1
	hotspot2 tempDist + stallWidths[i],	panelLengths[i]/2, unID, stallWidths[i], 2 			: unID = unID + 1
	tempDist = tempDist + stallWidths[i]
next i
del 1

! --- Fixture Position Editing -------------------------------------------------
if iFixtureType > 0 then
	for i = 1 to nStalls
		add2 stallWidths[i] / 2,  lp + thicknessPanel * (iPartitionType = PARTITION_TYPE_STALL or iPartitionType = PARTITION_TYPE_URINAL_SCREEN)
		hotspot2  0,						fixturePositions[i][2], 	unID, fixturePositions[i][1], 1 + 128 	: unID = unID + 1
		hotspot2 -1,						fixturePositions[i][2], 	unID, fixturePositions[i][1], 3			: unID = unID + 1
		hotspot2  fixturePositions[i][1],	fixturePositions[i][2], 	unID, fixturePositions[i][1], 2			: unID = unID + 1

		hotspot2 fixturePositions[i][1],  0, 						unID, fixturePositions[i][2], 1 + 128 	: unID = unID + 1
		hotspot2 fixturePositions[i][1], -1, 						unID, fixturePositions[i][2], 3			: unID = unID + 1
		hotspot2 fixturePositions[i][1],  fixturePositions[i][2], 	unID, fixturePositions[i][2], 2			: unID = unID + 1

		del 1
		add2 stallWidths[i], 0
	next i
	del nStalls
else
	unID = unID + 6 * nStalls
endif

! --- Depth editing ------------------------------------------------------
if iPartitionType = PARTITION_TYPE_STALL then
	hotspot2 0,					0, unID, depthStall, 1 +256  	: unID = unID + 1
	hotspot2 0,					-1, unID, depthStall, 3			: unID = unID + 1
	hotspot2 0,					depthStall, unID, depthStall, 2 	+128		: unID = unID + 1

	hotspot2 a,					0, unID, depthStall, 1 + 256 	: unID = unID + 1
	hotspot2 a,					-1, unID, depthStall, 3			: unID = unID + 1
	hotspot2 a,					depthStall, unID, depthStall, 2 +128		: unID = unID + 1
endif
if iPartitionType = PARTITION_TYPE_URINAL_SCREEN then
	hotspot2 0,					0, unID, screenLength, 1 +256  	: unID = unID + 1
	hotspot2 0,					-1, unID, screenLength, 3			: unID = unID + 1
	hotspot2 0,					screenLength, unID, screenLength, 2 	+128		: unID = unID + 1

	hotspot2 a,					0, unID, screenLength, 1 + 256 	: unID = unID + 1
	hotspot2 a,					-1, unID, screenLength, 3			: unID = unID + 1
	hotspot2 a,					screenLength, unID, screenLength, 2 +128		: unID = unID + 1
endif

if iPartitionType = PARTITION_TYPE_STALL or iPartitionType = PARTITION_TYPE_URINAL_SCREEN then
	! --- Panel length Editing -----------------------------------------------------
	if  bEndPanel1 then
		hotspot2 0,		 0,					unID,	lengthEndPanel1 , 1 + 128 	: unID = unID + 1
		hotspot2 0,		-1,					unID,	lengthEndPanel1 , 3			: unID = unID + 1
		hotspot2 0,		 lengthEndPanel1,	unID,	lengthEndPanel1 , 2			: unID = unID + 1
	endif

	for i = 1 to nPanels
		add2 stallWidths[i], 0
		hotspot2 0,	 0, 				unID, panelLengths[i], 1 + 128 	: unID = unID + 1
		hotspot2 0, -1, 				unID, panelLengths[i], 3		: unID = unID + 1
		hotspot2 0,	 panelLengths[i], 	unID, panelLengths[i], 2		: unID = unID + 1
	next i
	del nPanels

	if  bEndPanel2 then
		hotspot2 a,	 0,					unID,	lengthEndPanel2 , 1 + 128  	: unID = unID + 1
		hotspot2 a,	-1,					unID,	lengthEndPanel2 , 3			: unID = unID + 1
		hotspot2 a,	 lengthEndPanel2 ,	unID,	lengthEndPanel2 , 2			: unID = unID + 1
	endif
endif

! --- Fit to Wall --------------------------------------------------------------

if iPartitionType = PARTITION_TYPE_CHINA_DIVISION then
	if bEndPanel1 then
		hotspot2 0, lengthEndPanel1, unID	: unID = unID + 1
	endif

	for i = 1 to nPanels
		add2 stallWidths[i], 0
		hotspot2 0, panelLengths[i], unID	: unID = unID + 1
	next i
	del nPanels

	if bEndPanel2 then
		hotspot2 a, lengthEndPanel2, unID	: unID = unID + 1
	endif
endif


! ------------------------------------------------------------------------------
! Front-sides
! ------------------------------------------------------------------------------

if iPartitionType = PARTITION_TYPE_STALL then
	for i = 1 to nStalls
		if reqBMinSpace <> 0 then
			if (bOutsideOpening and (ms_openingSDepth > EPS)) or (not(bOutsideOpening) and (ms_openingSDepth_in > EPS)) then
				gosub "minimalSpace"
			endif
		endif
		if i = 1 then
			isEndLeft = 1
		else
			isEndLeft = 0
		endif
		if i = nStalls then
			isEndRight = 1
		else
			isEndRight = 0
		endif

		call "fa_StallFrontSide" parameters all	a 	= stallWidths[i],
								isEndLeft			= isEndLeft,
								isEndRight			= isEndRight,
								bFooter 			= bFooter,
								bCeilingMountPanel	= bCeilingMountPanel,
								bTopBracing 		= bTopBracing,
								bBottomBracing 		= bBottomBracing,
								GS_HotspotUnIDBegin = 1000 + i * 100
		add2 stallWidths[i], 0
	next i
	del nStalls
endif

if iPartitionType = PARTITION_TYPE_URINAL_SCREEN and iScreenType = SCREEN_TYPE_FLOOR_MOUNTED then
	line_type lineType2dPanel
	pen gs_cont_pen
	fill gs_fill_type

	if bEndPanel1 then
		poly2_b 4, 1+2+4+32, gs_fill_pen, gs_back_pen,
				0, 											0, 					1,
				screenEndLength / 2 + thicknessPanel / 2, 	0, 					1,
				screenEndLength / 2 + thicknessPanel / 2, 	thicknessPanel, 	1,
				0, 											thicknessPanel, 	1
	endif

	for i = 1 to nPanels
		add2 stallWidths[i], 0
		poly2_b 4, 1+2+4+32, gs_fill_pen, gs_back_pen,
				-screenEndLength / 2, 0, 1,
				screenEndLength / 2, 0, 1,
				screenEndLength / 2, thicknessPanel, 1,
				-screenEndLength / 2, thicknessPanel, 1
	next i
	del nPanels

	if bEndPanel2 then
		poly2_b 4, 1+2+4+32, gs_fill_pen, gs_back_pen,
				a, 0, 1,
				a - screenEndLength / 2 - thicknessPanel / 2, 0, 1,
				a - screenEndLength / 2 - thicknessPanel / 2, thicknessPanel, 1,
				a, thicknessPanel, 1
	endif
endif


! ------------------------------------------------------------------------------
! Side-panels
! ------------------------------------------------------------------------------

bReduceLeftPanelSize = 1- (iPartitionType = PARTITION_TYPE_URINAL_SCREEN and iScreenType = SCREEN_TYPE_WALL_HUNG)
add2 0, thicknessPanel * bReduceLeftPanelSize

if bEndPanel1 then
	add2 thicknessPanel, 0
	rot2 90
	call "fa_PartitionPanel" parameters all 	bFooter = 0,
							bTopBracing 				= bTopBracing,
							bBottomBracing 				= bBottomBracing,
							bottomHeightTopBracing 		= heightPanel,
							bottomHeightPanel			= bottomEndPanel,
							heightPanel					= topEndPanel,
							lengthPanel					= lengthEndPanel1 - thicknessPanel * bReduceLeftPanelSize,
							matPanel					= matSidePanel,
							GS_HotspotUnIDBegin 		= 25000,
							bStandAlone					= 0,
							leftOverhangTopBracing		= 0,
							rightOverhangTopBracing		= 0
	del 2
endif

add2 thicknessPanel / 2, 0
for i = 1 to nPanels
	add2 stallWidths[i], 0
	rot2 90
	call "fa_PartitionPanel" parameters all 	bFooter = 0,
							bTopBracing 				= bTopBracing,
							bBottomBracing 				= bBottom,
							bottomHeightTopBracing 		= heightPanel,
							bottomHeightPanel			= bottomEndPanel,
							heightPanel					= topEndPanel,
							lengthPanel					= panelLengths[i] - thicknessPanel * bReduceLeftPanelSize,
							matPanel					= matSidePanel,
							GS_HotspotUnIDBegin 		= 26000 + i * 100,
							bStandAlone					= 0,
							leftOverhangTopBracing		= 0,
							rightOverhangTopBracing		= 0

	del 1
next i
del nPanels +1

if bEndPanel2 then
	add2 a, 0
	rot2 90
	call "fa_PartitionPanel" parameters all 	bFooter = 0,
							bTopBracing 				= bTopBracing,
							bBottomBracing 				= bBottomBracing,
							bottomHeightTopBracing 		= heightPanel,
							bottomHeightPanel			= bottomEndPanel,
							heightPanel					= topEndPanel,
							lengthPanel					= lengthEndPanel2 - thicknessPanel * bReduceLeftPanelSize,
							matPanel					= matSidePanel,
							GS_HotspotUnIDBegin 		= 25500,
							bStandAlone					= 0,
							leftOverhangTopBracing		= 0,
							rightOverhangTopBracing		= 0
	del 2
endif

add2 0, thicknessPanel * not(bReduceLeftPanelSize)


! ------------------------------------------------------------------------------
! Fixtures
! ------------------------------------------------------------------------------

add2 0, lp
line_type 1
for i = 1 to nStalls
	if iFixtureType = FIXTURE_TYPE_SQUATTING_TOILET then
		add2 stallWidths[i] / 2 + fixturePositions[i][1],  fixturePositions[i][2]
		call "CompleteToiletMacro" parameters all	iWCType 					= 3,
													bowlWidth					= 0.375,
													bowlDepth 					= 0.520,
													bowlHeight					= 0.150,
													distanceFromWall			= 0,
													iSquattingBowlType 			= 1,
													ConStatus_1 				= 0,
													ConStatus_2 				= 0,
													bShowHotspots				= 0,
													gs_cont_pen					= penFixture,
													gs_fill_type				= fillFixture,
													gs_fill_pen					= fillPenFixture,
													gs_back_pen					= fillPenBgFixture
		del 1
	endif

	if iFixtureType = FIXTURE_TYPE_TOILET then
		add2 stallWidths[i] / 2 + fixturePositions[i][1],  fixturePositions[i][2]
		call "CompleteToiletMacro" parameters all	iWCType 					= 1,
													iFloorMountedBowlType 		= 1,
													iWallHungBowlType 			= 1,
													iCisternType				= 3,
													iInWallCarrierButtonType 	= 2,
													bShowInWallCarrier2D 		= 0,
													bShowInWallCarrier3D 		= 0,
													waterConnectionHeight		= 0.755,
													distanceFromWall			= 0,
													ConStatus_1 				= 0,
													ConStatus_2 				= 0,
													bShowHotspots				= 0,
													gs_cont_pen					= penFixture,
													gs_fill_type				= fillFixture,
													gs_fill_pen					= fillPenFixture,
													gs_back_pen					= fillPenBgFixture
		del 1
	endif

	if iFixtureType = FIXTURE_TYPE_URINAL then
		add2 stallWidths[i] / 2 + fixturePositions[i][1], fixturePositions[i][2]- thicknessPanel * (iPartitionType = PARTITION_TYPE_CHINA_DIVISION)

		call "Urinal_macro" parameters all a = 0.4,
					b						= 0.305,
					urinalType				= 5,
					bShowHotspots			= 0,
					gs_detlevel_2D_m		= gs_detlevel_2D_m,
					gs_cont_pen				= penFixture,
					gs_fill_type			= fillFixture,
					gs_fill_pen				= fillPenFixture,
					gs_back_pen				= fillPenBgFixture,
					GS_HotspotUnIDBegin		= 30000 + i * 100
		del 1
	endif
	add2 stallWidths[i], 0
next i

del nStalls

end
!-----------------------------------------------------------------------------------------------------
!end	!end	!end	!end	!end	!end	!end	!end	!end	!end	!end	!end	!end
!-----------------------------------------------------------------------------------------------------


"minimalSpace":
	DRAWINDEX 20
	line_type MSContLineType
	pen MSContLinePen
	fill MSFillType

	add2 widthHingeSidePanel, 0

	if not(bOutsideOpening) then
		sideWidth1 = ms_openingSWidth1_in
		sideWidth2 = ms_openingSWidth2_in
		openingDepth = ms_openingSDepth_in
	else
		sideWidth1 = ms_openingSWidth1
		sideWidth2 = ms_openingSWidth2
		openingDepth = ms_openingSDepth
	endif

	poly2_b 7, 1+2+4+32, MSFillPen, MSFillBackPen,
		0, 					0, 					0,
		-sideWidth1, 	0, 					1,
		-sideWidth1,  	- openingDepth, 	1,
		widthDoor + sideWidth2, -openingDepth, 1,
		widthDoor + sideWidth2, 0, 			0,
		widthDoor, 			0, 					0,
		0, 					0, 					-1

	del 1
return
