
! ==============================================================================
! Commercial Bath Stall
! ==============================================================================

	define material	"builtInMatSemitransBlackPlastic" 0,
	  0.333333,   0.313725,   0.294118,
	  0.3,  0.35,  0.96,   0.3,     32,     0,
	         1,          1,          1,
	         0,          0,          0,     0

if gs_detlevel_3d_m=0 then END
if gs_detlevel_3d_m=1 then res=4

resol res

if not(gs_shadow) then shadow off

unID=1


! ------------------------------------------------------------------------------
! Hotspots
! ------------------------------------------------------------------------------

! --- Full Width editing ------------------------------------------------------
hotspot 0,				0,	0, unID, a, 1 + 256 	: unID = unID + 1
hotspot -1,				0, 	0, unID, a, 3			: unID = unID + 1
hotspot a,				0,	0, unID, a, 2 			: unID = unID + 1

! --- Stall Width editing ------------------------------------------------------
tempDist = 0
for i = 1 to nStalls
	hotspot tempDist ,					panelLengths[i]/2, zzyzx, unID, stallWidths[i], 1 + 128 	: unID = unID + 1
	hotspot tempDist - 1,				panelLengths[i]/2, zzyzx, unID, stallWidths[i], 3			: unID = unID + 1
	hotspot tempDist + stallWidths[i],	panelLengths[i]/2, zzyzx, unID, stallWidths[i], 2			: unID = unID + 1
	tempDist = tempDist + stallWidths[i]
next i

! --- Fixture Position Editing -------------------------------------------------
if iFixtureType > 0 then
	for i = 1 to nStalls
		add stallWidths[i] / 2,  lp + thicknessPanel * (iPartitionType = PARTITION_TYPE_STALL or iPartitionType = PARTITION_TYPE_URINAL_SCREEN), 0
		hotspot  0,							fixturePositions[i][2], 0, unID, fixturePositions[i][1], 1 + 128 	: unID = unID + 1
		hotspot -1,							fixturePositions[i][2], 0, unID, fixturePositions[i][1], 3			: unID = unID + 1
		hotspot  fixturePositions[i][1],	fixturePositions[i][2], 0, unID, fixturePositions[i][1], 2			: unID = unID + 1

		hotspot fixturePositions[i][1],	 0, 						0, unID, fixturePositions[i][2], 1 + 128 	: unID = unID + 1
		hotspot fixturePositions[i][1], -1, 						0, unID, fixturePositions[i][2], 3			: unID = unID + 1
		hotspot fixturePositions[i][1],	 fixturePositions[i][2], 	0, unID, fixturePositions[i][2], 2			: unID = unID + 1

		del 1
		addx stallWidths[i]
	next i
	del nStalls
endif

! --- Depth editing ------------------------------------------------------
if iPartitionType = PARTITION_TYPE_STALL then
	hotspot 0,	 0,				0, unID, depthStall, 1 + 256  	: unID = unID + 1
	hotspot 0,	-1,				0, unID, depthStall, 3			: unID = unID + 1
	hotspot 0,	 depthStall,	0, unID, depthStall, 2 + 128	: unID = unID + 1

	hotspot a,	 0,				0, unID, depthStall, 1 + 256 	: unID = unID + 1
	hotspot a,	-1,				0, unID, depthStall, 3			: unID = unID + 1
	hotspot a,	 depthStall,	0, unID, depthStall, 2 + 128	: unID = unID + 1
endif
if iPartitionType = PARTITION_TYPE_URINAL_SCREEN then
	hotspot 0,	 0,				0, unID, screenLength, 1 + 256  : unID = unID + 1
	hotspot 0,	-1,				0, unID, screenLength, 3		: unID = unID + 1
	hotspot 0,	 screenLength,	0, unID, screenLength, 2 + 128	: unID = unID + 1

	hotspot a,	 0,				0, unID, screenLength, 1 + 256 	: unID = unID + 1
	hotspot a,	-1,				0, unID, screenLength, 3		: unID = unID + 1
	hotspot a,	 screenLength,	0, unID, screenLength, 2 + 128	: unID = unID + 1
endif

if iPartitionType = PARTITION_TYPE_STALL or iPartitionType = PARTITION_TYPE_URINAL_SCREEN then
	! --- Panel length Editing -----------------------------------------------------
	if  bEndPanel1 then
		hotspot 0,	 0,					0, unID, lengthEndPanel1 , 1 + 128 	: unID = unID + 1
		hotspot 0,	-1,					0, unID, lengthEndPanel1 , 3		: unID = unID + 1
		hotspot 0,	 lengthEndPanel1,	0, unID, lengthEndPanel1 , 2		: unID = unID + 1
	endif

	for i = 1 to nPanels
		addx stallWidths[i]
		hotspot 0,  0, 					0, unID, panelLengths[i], 1 + 128 	: unID = unID + 1
		hotspot 0, -1, 					0, unID, panelLengths[i], 3			: unID = unID + 1
		hotspot 0,	panelLengths[i], 	0, unID, panelLengths[i], 2			: unID = unID + 1
	next i
	del nPanels

	if  bEndPanel2 then
		hotspot a,	 0,					0, unID, lengthEndPanel2, 1 + 128	: unID = unID + 1
		hotspot a,	-1,					0, unID, lengthEndPanel2, 3			: unID = unID + 1
		hotspot a,	 lengthEndPanel2,	0, unID, lengthEndPanel2, 2			: unID = unID + 1
	endif
endif


! ------------------------------------------------------------------------------
! Front-sides
! ------------------------------------------------------------------------------

if iPartitionType = PARTITION_TYPE_STALL then
	for i = 1 to nStalls
		if i = 1 then
			isEndLeft = 1
		else
			isEndLeft = 0
		endif
		if i = nStalls then
			isEndRight = 1
		else
			isEndRight = 0
		endif

		if bGraffiti and i = 3 then
			isGraffitiOn = 1
		else
			isGraffitiOn = 0
		endif

		call "fa_StallFrontSide" parameters all	a 	= stallWidths[i],
								isEndLeft			= isEndLeft,
								isEndRight			= isEndRight,
								bFooter 			= bFooter,
								bCeilingMountPanel	= bCeilingMountPanel,
								bTopBracing 		= bTopBracing,
								bBottomBracing 		= bBottomBracing,
								heightPanel			= heightPanel + bottomHeightPanel,
								heightDoor			= heightDoor,
								bGraffiti			= isGraffitiOn,
								GS_HotspotUnIDBegin = unID + 100*i

		addx stallWidths[i]
	next i
	del nStalls
endif

if iPartitionType = PARTITION_TYPE_URINAL_SCREEN and iScreenType = SCREEN_TYPE_FLOOR_MOUNTED then
	if bEndPanel1 then
		cprism_ matFooter, matFooter, matFooter,
				4, bottomHeightPanel,
				0, 0, 15,
				screenEndLength / 2 + thicknessPanel / 2, 0, 15,
				screenEndLength / 2 + thicknessPanel / 2, thicknessPanel, 15,
				0, thicknessPanel, 15

		addz bottomHeightPanel
		cprism_ matPanel, matPanel, matPanel,
				4, heightPanel,
				0, 0, 15,
				screenEndLength / 2 + thicknessPanel / 2, 0, 15,
				screenEndLength / 2 + thicknessPanel / 2, thicknessPanel, 15,
				0, thicknessPanel, 15
		del 1
	endif

	for i = 1 to nPanels
		addx stallWidths[i]
		cprism_ matFooter, matFooter, matFooter,
				4, bottomHeightPanel,
				-screenEndLength / 2, 0, 15,
				screenEndLength / 2, 0, 15,
				screenEndLength / 2, thicknessPanel, 15,
				-screenEndLength / 2, thicknessPanel, 15

		addz bottomHeightPanel
		cprism_ matPanel, matPanel, matPanel,
				4, heightPanel,
				-screenEndLength / 2, 0, 15,
				screenEndLength / 2, 0, 15,
				screenEndLength / 2, thicknessPanel, 15,
				-screenEndLength / 2, thicknessPanel, 15
		del 1
	next i
	del nPanels

	if bEndPanel2 then
		cprism_ matFooter, matFooter, matFooter,
				4, bottomHeightPanel,
				a, 0, 15,
				a - screenEndLength / 2 - thicknessPanel / 2, 0, 15,
				a - screenEndLength / 2 - thicknessPanel / 2, thicknessPanel, 15,
				a, thicknessPanel, 15

		addz bottomHeightPanel
		cprism_ matPanel, matPanel, matPanel,
				4, heightPanel,
				a, 0, 15,
				a - screenEndLength / 2 - thicknessPanel / 2, 0, 15,
				a - screenEndLength / 2 - thicknessPanel / 2, thicknessPanel, 15,
				a, thicknessPanel, 15
		del 1
	endif
endif

! ------------------------------------------------------------------------------
! Side-panels
! ------------------------------------------------------------------------------

bReduceLeftPanelSize = 1- (iPartitionType = PARTITION_TYPE_URINAL_SCREEN and iScreenType = SCREEN_TYPE_WALL_HUNG)
addy thicknessPanel * bReduceLeftPanelSize

if bEndPanel1 then
	addx thicknessPanel

if iFixtureType = bFooter then
	addx -thicknessPanel/2
	material matFooter
	CYLIND bottomHeightPanel, thicknessPanel/2
	addy lengthEndPanel1 - thicknessPanel * bReduceLeftPanelSize-thicknessPanel
	CYLIND bottomHeightPanel, thicknessPanel/2
	del 2
endif
	rotz 90
	call "fa_PartitionPanel" parameters all 	bFooter = 0,
							bTopBracing 				= bTopBracing,
							bBottomBracing 				= bBottomBracing,
							bottomHeightTopBracing 		= heightPanel,
							bottomHeightPanel			= bottomEndPanel,
							heightPanel					= topEndPanel + bottomEndPanel,
							lengthPanel					= lengthEndPanel1 - thicknessPanel * bReduceLeftPanelSize,
							matPanel					= matSidePanel,
							bStandAlone					= 0,
							leftOverhangTopBracing		= 0,
							rightOverhangTopBracing		= 0
	del 2
endif

addx thicknessPanel/2
for i = 1 to nPanels
	addx stallWidths[i]
	rotz 90
	pen 1
if iPartitionType = PARTITION_TYPE_STALL then
	for n=bottomEndPanel to heightPanel+bottomEndPanel-0.2 step 0.2
		lin_ -thicknessPanel,thicknessPanel/2,n, -thicknessPanel,thicknessPanel/2,n+0.1
		lin_ -thicknessPanel,-thicknessPanel/2,n, -thicknessPanel,-thicknessPanel/2,n+0.1
	next n
	lin_ -thicknessPanel,thicknessPanel/2,n-0.2, -thicknessPanel,thicknessPanel/2,heightPanel+bottomEndPanel
	lin_ -thicknessPanel,-thicknessPanel/2,n-0.2, -thicknessPanel,-thicknessPanel/2,heightPanel+bottomEndPanel
endif
	call "fa_PartitionPanel" parameters all 	bFooter = 0,
							bTopBracing 				= bTopBracing,
							bBottomBracing 				= bBottomBracing,
							bottomHeightTopBracing 		= heightPanel,
							bottomHeightPanel			= bottomEndPanel,
							heightPanel					= topEndPanel + bottomEndPanel,
							lengthPanel					= panelLengths[i] - thicknessPanel * bReduceLeftPanelSize,
							matPanel					= matSidePanel,
							bStandAlone					= 0,
							leftOverhangTopBracing		= 0,
							rightOverhangTopBracing		= 0

	del 1
next i

del nPanels + 1

if bEndPanel2 then
	addx a

if iFixtureType = bFooter then
	addx -thicknessPanel/2
	material matFooter
	CYLIND bottomHeightPanel, thicknessPanel/2
	addy lengthEndPanel2 - thicknessPanel * bReduceLeftPanelSize-thicknessPanel
	CYLIND bottomHeightPanel, thicknessPanel/2
	del 2
endif
	rotz 90
	call "fa_PartitionPanel" parameters all 	bFooter = 0,
							bTopBracing 				= bTopBracing,
							bBottomBracing 				= bBottomBracing,
							bottomHeightTopBracing 		= heightPanel,
							bottomHeightPanel			= bottomEndPanel,
							heightPanel					= topEndPanel + bottomEndPanel,
							lengthPanel					= lengthEndPanel2 - thicknessPanel * bReduceLeftPanelSize,
							matPanel					= matSidePanel,
							bStandAlone					= 0,
							leftOverhangTopBracing		= 0,
							rightOverhangTopBracing		= 0
	del 2
endif

addy thicknessPanel * not(bReduceLeftPanelSize)

! ------------------------------------------------------------------------------
! Fixtures
! ------------------------------------------------------------------------------
if bFixture3d and GLOB_VIEW_TYPE<>9 then
	addy lp

	if gs_detlevel_3D = `Откл.` then gs_detlevel_3D_m = 0
	if gs_detlevel_3D = `Простая` then gs_detlevel_3D_m = 1
	if gs_detlevel_3D = `Детальный` then gs_detlevel_3D_m = 2


	for i = 1 to nStalls
		if iFixtureType = FIXTURE_TYPE_SQUATTING_TOILET then
			add stallWidths[i] / 2 + fixturePositions[i][1],  fixturePositions[i][2], 0
			call "CompleteToiletMacro" parameters all	iWCType 					= 3,
														bowlWidth					= 0.375,
														bowlDepth 					= 0.520,
														bowlHeight					= 0.150,
														distanceFromWall			= 0,
														iSquattingBowlType 			= 1,
														ConStatus_1 				= 0,
														ConStatus_2 				= 0,
														bShowHotspots				= 0,
														gs_cont_pen					= penFixture,
														gs_bowl_mat					= matFixture
			del 1
		endif

		if iFixtureType = FIXTURE_TYPE_TOILET then
			add stallWidths[i] / 2 + fixturePositions[i][1],  fixturePositions[i][2], 0
				call "CompleteToiletMacro" parameters all	iWCType 					= 1,
															iFloorMountedBowlType 		= 1,
															iWallHungBowlType 			= 1,
															iCisternType				= 3,
															iInWallCarrierButtonType 	= 2,
															bShowInWallCarrier2D 		= 0,
															bShowInWallCarrier3D 		= 0,
															waterConnectionHeight		= 0.755,
															distanceFromWall			= 0,
															ConStatus_1 				= 0,
															ConStatus_2 				= 0,
															bShowHotspots				= 0,
															gs_cont_pen					= penFixture,
															gs_bowl_mat					= matFixture
			del 1
		endif

		if iFixtureType = FIXTURE_TYPE_URINAL then
			add stallWidths[i] / 2 + fixturePositions[i][1], fixturePositions[i][2] - thicknessPanel * (iPartitionType = PARTITION_TYPE_CHINA_DIVISION), urinalHeight
			call "Urinal_macro" parameters all a	= 0.4,
							b					= 0.305,
							zzyzx				= 0.665,
							urinalType			= 5,
							bShowHotspots		= 0,
							h_stand				= 0.226 - 0.665,
							gs_detlevel_3D_m	= gs_detlevel_3D_m,
							gs_cont_pen			= penFixture,
							gs_bowl_mat			= matFixture,
							gs_resol			= res

			if bMotionDetector then
				addz 0.1
				rotx 90
				gosub "motionDetector"
				del 2
			endif
			del 1
		endif
		addx stallWidths[i]
	next i

	del nStalls + 1
endif

del 1

! ------------------------------------------------------------------------------
end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end !
! ------------------------------------------------------------------------------

"motionDetector":
	addx 0.09 / 2

	material matDetector
	prism_ 10, 0.01,
			0, 0, 15,
			-0.09, 0, 15,
			-0.11, 0.02, 1015,
			-0.11, 0.17, 15,
			-0.09, 0.19, 1015,
			0,	0.19, 15,
			0.02, 0.17, 1015,
			0.02, 0.02, 15,
			0, 0, 1015,
			0, 0, -1

	add -0.01, 0.02, 0.01

	prism_ 16, 0.005,
			0, 0, 15,
			-0.07, 0, 15,
			-0.08, 0.01, 1015,
			-0.08, 0.14, 15,
			-0.07, 0.15, 1015,
			0,	0.15, 15,
			0.01, 0.14, 1015,
			0.01, 0.01, 15,
			0, 0, 1015,
			0, 0, -1,
			-0.045, 0.025, 15,
			-0.045, 0.045, 15,
			-0.025, 0.045, 1015,
			-0.025, 0.025, 15,
			-0.045, 0.025, 1015,
			-0.045, 0.025, -1

	material "builtInMatSemitransBlackPlastic"
	prism_ 6, 0.005,
			-0.045, 0.025, 15,
			-0.045, 0.045, 15,
			-0.025, 0.045, 1015,
			-0.025, 0.025, 15,
			-0.045, 0.025, 1015,
			-0.045, 0.025, -1
	del 2

return
