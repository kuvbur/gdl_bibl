
! ==============================================================================
! Functions:
! - Offered Tools: All Tools exept Independent
! - Content: Material of Surfaces
! - Size: paper size
! ==============================================================================
_isPreview = (GLOB_CONTEXT = 5)
_paperToModel = GLOB_SCALE/1000

! resizing paper size parameters values to model length
widthTextBoxPrefix_mm		= widthTextBoxPrefix_mm * _paperToModel
widthTextBoxContent_mm		= widthTextBoxContent_mm * _paperToModel
widthHead_mm				= widthHead_mm * _paperToModel
heightHead_mm				= heightHead_mm * _paperToModel


gosub "install_label_position"

if not(_isEnabledContent) then
	! - Offered Tools: All Tools exept Independent
	call "label_placeholder" parameters bitAvailableTool 	= 2+4+8+16+32+64+128+256+512+1024+2048+4096+8192+16384+32768+262144+524288+1048576,
										filltypeBackground 	= filltypeBackground
	end
endif

gosub "collect_content"

gosub "position_and_draw_label"

! ==============================================================================
END	!END	!END	!END	!END	!END	!END	!END	!END	!END	!END
! ==============================================================================

! ==============================================================================
"install_label_position":
! ------------------------------------------------------------------------------
! Label positioning - global behavior for Marker form Labels
! - origin is where AC gives, the table begins with top left anchor 
! - orientation is rotated with the parent structure by default
! - without AC Arrow
!		- drawing the full symbol marker form
! 		- the origin is at the arrow peak
! 		- rotating with parent elem direction
! 		- Reference Point is cordinated by user
! - with AC Arrow
!		- drawing only the head text
!		- the origin is at the boundary
!		- handling of rotation is belongs to AC (AC_CustomReadabilty OFF)
!		- Reference Point is cordinated at Pointer tabpage
!
! LABEL_POSITION 	- position of the label
! 					- array[3][2] containing the coordinates of the 3 points defining the label position 
!
! - the other transformations live in the label_marker_macro
! ==============================================================================

	nTrans = 0

	if LABEL_CUSTOM_ARROW then
	
		add2 	LABEL_POSITION [2][1]	+	LABEL_POSITION [3][1],
				LABEL_POSITION [2][2]	+	LABEL_POSITION [3][2]

	endif

return

! ==============================================================================
"collect_content":
! ------------------------------------------------------------------------------
! ==============================================================================
	nTrans = 0

	_nRowLabel = 0
	dim _sRowsOfLabel[][]
		_sRowsOfLabel[1][1] = ""
	dim _sNameOfRow[]
		_sNameOfRow[1] = ""
	dim _sPrefixStringsHead[]
		_sPrefixStringsHead[1] = ""
	dim _sContentStringsHead[][]
		_sContentStringsHead[1][1] = ""

	dim _iUnitLocal[]
	dim _iSelectedContent[]
	dim _sContentTypeNames[]
		for iIni = 1 to _maxContentValues
			_iUnitLocal[iIni] 			= 0	! None
			_iSelectedContent[iIni] 	= 0	! None
			_sContentTypeNames[iIni] 	= ""
		next iIni

	_iUnitLocal[CONTENT_DIM] 	= iWorkUnitLinear
	_iUnitLocal[CONTENT_SURF] 	= iWorkUnitArea
	_iUnitLocal[CONTENT_VOL] 	= iWorkUnitVolume
	_iUnitLocal[CONTENT_AREA] 	= iWorkUnitArea

	_sContentTypeNames[CONTENT_DIM] 			= sDescriptionDimension
	_sContentTypeNames[CONTENT_VOL] 			= sDescriptionVolume
	_sContentTypeNames[CONTENT_SURF] 			= sDescriptionSurfaceArea
	_sContentTypeNames[CONTENT_AREA] 			= sDescriptionProjectedArea

	iRow2D = 1
	for iRow = 1 to vardim1(functionOrder)
		if _iDisplayContentGroup2D[functionOrder[iRow]] = VALID then
			_iSelectedContent[iRow2D] = functionOrder[iRow]
			iRow2D = iRow2D + 1
		endif
	next iRow


	gosub "call_general_label_macro"	! returned text array, _nRowLabel, _sRowsOfLabel
	_sPrefixStringsHead = _sNameOfRow
	_sContentStringsHead = _sRowsOfLabel
	if _nRowLabel = 0 then
		_sContentStringsHead[1][1] = `<нет содержимого>`
	endif
return

! ==============================================================================
"position_and_draw_label":
! ------------------------------------------------------------------------------
! Text Style tabpage:
! LABEL_CUSTOM_ARROW 		- use symbol arrow option
!								- on/off 1 if the Use symbol arrow checkbox is checked, 0 otherwise
! LABEL_ARROW_LINETYPE 		- line type of the line of the arrow
! LABEL_ARROW_PEN 			- pen of the arrow
! LABEL_FONT_NAME 			- font name
! LABEL_TEXT_SIZE			- text size
! LABEL_TEXT_PEN 			- pen of the text
! LABEL_TEXT_BG_PEN			- text box background pen
! 								- 0 if opaque is off, the background pen otherwise
! LABEL_FONT_STYLE2 		- font style in the settings dialog box
!								- 0 - normal, otherwise j1 + 2*j2 + 4*j3 + 32*j6 + 64*j7 + 128*j8, j1 - bold, j2 - italic, j3 - underline, j6 - superscript, j7 - subscript, j8 - strikethrough 
!								- there is strikethrough and this global works well with define style{2} !
! LABEL_FRAME_ON			- label frame on/off 1 if the label frame is checked, 0 otherwise
! LABEL_ROTANGLE 			- rotation angle using by AC (this rotation is not from GDL)
! LABEL_TEXT_ALIGN			- text alignment for full table
!								- 1 - left aligned, 2 - center aligned, 3 - right aligned, 4 - full justified
! LABEL_TEXT_LEADING 		- line spacing factor
! LABEL_TEXT_WIDTH_FACT 	- width factor
! LABEL_TEXT_CHARSPACE_FACT - spacing factor
! ==============================================================================

	_angleParentDirection = 0
	if not(_isPreview) then
		_angleParentDirection = LABEL_ASSOC_ELEM_ORIENTATION
	endif

	call "label_marker_form" parameters AC_CustomReadability = AC_CustomReadability,
		bUseBuiltinPointer			= not(LABEL_CUSTOM_ARROW),
		bAlwaysReadable				= LABEL_ALWAYS_READABLE,

		! Position
		iReferencePoint				= iReferencePoint,
		iLabelOrientation 			= iLabelOrientation,
		anglePosition 				= LABEL_ROTANGLE,
		angleParentPosition			= _angleParentDirection,

		! Paragraph Format
		bEnablePrefixColumn			= 1,
		bUsePrefixColumn			= bUsePrefixColumn,
		bWrapText					= LABEL_TEXT_WRAP,
		widthTextBoxPrefix_mm		= widthTextBoxPrefix_mm,
		widthTextBoxContent_mm		= widthTextBoxContent_mm,
		xFirstIndentParagraph		= 0,
		xLeftIndentParagraph		= 0,
		xRightIndentParagraph		= 0,
		xTabPositionParagraph		= 0,
		widthFactorTextBlock		= LABEL_TEXT_WIDTH_FACT,
		charspaceFactorTextBlock	= LABEL_TEXT_CHARSPACE_FACT,
		iFixedHeightTextBlock		= 0,		! fixed_height 	1: the placed TEXTBLOCK will be scale-independent and all specified length type parameters will mean millimeters, !
										!0: the placed TEXTBLOCK will be scale-dependent and all specified length type parameters will mean meters in model space

		! Head apperance
		sPrefixStringsHead			= _sPrefixStringsHead,
		sContentStringsHead			= _sContentStringsHead,
		bEnableCustomHeaderStyle 	= 0,
		penTextHeader				= LABEL_TEXT_PEN,
		fontTypeHeader				= LABEL_FONT_NAME,
		sizeFontHeader_mm			= LABEL_TEXT_SIZE,
		bBoldStyleHeader			= bittest(LABEL_FONT_STYLE2,0),
		bItalicStyleHeader			= bittest(LABEL_FONT_STYLE2,1),
		bUnderlineStyleHeader		= bittest(LABEL_FONT_STYLE2,2),
		bStrikethroughStyleHeader	= bittest(LABEL_FONT_STYLE2,7),
		iAlignmentHeader			= LABEL_TEXT_ALIGN,	! 1: left aligned, 2: center aligned, 3: right aligned, 4: full justified
		sizeLeadingHeader			= LABEL_TEXT_LEADING,
		widthTextBoxOffset			= LABEL_FRAME_OFFSET * _paperToModel,

		! Body skin list appearance
		bUseTextBoxOnLine				= 0,

		! Label Head Representation
		bEnableHeadSwitch			= 0,							! Enable to switch the Show Label Head ON-OFF
		bShowHead					= 1,
		iShapeHead					= iShapeHead,
		bFitFrameToText				= bFitFrameToText,
		widthHead_mm				= widthHead_mm,
		heightHead_mm				= heightHead_mm,
		bLinkSizes					= bLinkSizes,
		bShowHeadContour			= LABEL_FRAME_ON,
		penHead						= LABEL_ARROW_PEN,
		lineTypeHead				= LABEL_ARROW_LINETYPE,
		bShowFill					= 1,
		fillType					= filltypeBackground,
		penForeground				= LABEL_TEXT_BG_PEN,
		penBackground				= LABEL_TEXT_BG_PEN,

		! Label Line Representation
		distanceLabelHead_mm		= 0,
		bEnableLeaderLine			= 0,

		bDebug						= 0

	del nTrans : nTrans = 0

return

! ==============================================================================
"call_general_label_macro":
! ------------------------------------------------------------------------------
! input: 
!	TODO
!	
! input variable
!	TODO
!
! output variable:
!	TODO
! ==============================================================================
	_nRowLabel = 0
	dim tempsRowsOfLabel[]
		tempsRowsOfLabel[1] = ""

	call "label_content_macro" parameters iSelectedContent 	= _iSelectedContent,
			iContentOrderDim		= iContentOrderDim,
			iUnitLocal				= _iUnitLocal,
			bDecimalOptions			= 1,
			iWorkUnitLinearDecimal	= iWorkUnitLinearDecimal,
			iWorkUnitAreaDecimal	= iWorkUnitAreaDecimal,
			iWorkUnitVolumeDecimal	= iWorkUnitVolumeDecimal,

			bUsePrefixColumn		= bUsePrefixColumn,
			sContentTypeNames		= _sContentTypeNames,
			bUseInSingleRank		= 0,

			bShow2D = 0,

			! for quantity_formatter_macro
			bShowSuperScript		= 1,
			bShowUnit 				= bShowUnit,


			! for Content Dimension
			bShowWidth				= bShowWidth,
			bShowThickness			= bShowThickness,
			bShowLength				= bShowLength,
			bShowHeight				= bShowHeight,
			strSeparator			= sSeparator,

			! for Content Surface
			bAddBottomSurface		= bAddBottomSurface,
			bAddEdgeSurface			= bAddEdgeSurface,
			bAddTopSurface			= bAddTopSurface,
			bAddSideSurface			= bAddSideSurface,
			bAddOppSideSurface		= bAddOppSideSurface,
			bAddRefSideSurface		= bAddRefSideSurface,
			bMorphSurfacePlacehold	= bMorphSurfacePlacehold,

		 returned_parameters _nRowLabel, tempsRowsOfLabel

		! making from one dimensioned array to two dimensioned
		
		dim _sRowsOfLabel[][]
			_sRowsOfLabel[1][1] = ""
		dim _sNameOfRow[]
			_sNameOfRow[1] = ""

		if bUsePrefixColumn then
			dim _temp[]
			_temp = tempsRowsOfLabel
			_numTemp = vardim1(tempsRowsOfLabel)
			for i = 1 to _nRowLabel
				_sNameOfRow[i] = _temp[i]
			next i
			dim tempsRowsOfLabel[]
			idx = 1
			for i = _nRowLabel+1 to _numTemp
				tempsRowsOfLabel[idx] = _temp[i]
				idx = idx + 1
			next i			
		endif
		idx = 0
		for i = 1 to _nRowLabel
			for j = 1 to 30
				_sRowsOfLabel[i][j] = tempsRowsOfLabel[idx + j]
			next j
			idx = idx + 30
		next i


return

