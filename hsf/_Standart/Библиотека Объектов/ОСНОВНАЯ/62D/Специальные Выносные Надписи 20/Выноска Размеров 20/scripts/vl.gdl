

if not(_isEnabledContent) then
	lock all
endif

! =============================================================================
! Appearence
! =============================================================================
values "gs_ui_current_page" 1, 2, 3, 4, 5

call "label_marker_form" parameters AC_CustomReadability = AC_CustomReadability,
	bUseBuiltinPointer			= not(LABEL_CUSTOM_ARROW),

	! Position
	iReferencePoint				= iReferencePoint,
	iLabelOrientation 			= iLabelOrientation,
	anglePosition 				= LABEL_ROTANGLE,

	! Paragraph Format
	bEnablePrefixColumn			= 1,
	bUsePrefixColumn			= bUsePrefixColumn,
	bWrapText					= LABEL_TEXT_WRAP,
	widthTextBoxPrefix_mm		= widthTextBoxPrefix_mm,
	widthTextBoxPrefix_pt		= widthTextBoxPrefix_pt,
	widthTextBoxContent_mm		= widthTextBoxContent_mm,
	widthTextBoxContent_pt		= widthTextBoxContent_pt,
	xFirstIndentParagraph		= 0,
	xLeftIndentParagraph		= 0,
	xRightIndentParagraph		= 0,
	xTabPositionParagraph		= 0,
	widthFactorTextBlock		= LABEL_TEXT_WIDTH_FACT,
	charspaceFactorTextBlock	= LABEL_TEXT_CHARSPACE_FACT,
	iFixedHeightTextBlock		= 0,		! fixed_height 	1: the placed TEXTBLOCK will be scale-independent and all specified length type parameters will mean millimeters, !
												!0: the placed TEXTBLOCK will be scale-dependent and all specified length type parameters will mean meters in model space
	! Head apperance
	bEnableCustomHeaderStyle 	= 0,
	penTextHeader				= LABEL_TEXT_PEN,
	fontTypeHeader				= LABEL_FONT_NAME,
	sizeFontHeader_mm			= LABEL_TEXT_SIZE,
	bBoldStyleHeader			= bittest(LABEL_FONT_STYLE2,0),
	bItalicStyleHeader			= bittest(LABEL_FONT_STYLE2,1),
	bUnderlineStyleHeader		= bittest(LABEL_FONT_STYLE2,2),
	bStrikethroughStyleHeader	= bittest(LABEL_FONT_STYLE2,7),
	iAlignmentHeader			= LABEL_TEXT_ALIGN,	! 1: left aligned, 2: center aligned, 3: right aligned, 4: full justified
	sizeLeadingHeader			= LABEL_TEXT_LEADING,

	! Body skin list appearance
	bUseTextBoxOnLine				= 0,

	! Label Head Representation
	bEnableHeadSwitch			= 0,							! Enable to switch the Show Label Head ON-OFF
	bShowHead					= 1,
	iShapeHead					= iShapeHead,
	bFitFrameToText				= bFitFrameToText,
	widthHead_mm				= widthHead_mm,
	widthHead_pt				= widthHead_pt,
	heightHead_mm				= heightHead_mm,
	heightHead_pt				= heightHead_pt,
	bLinkSizes					= bLinkSizes,
	bShowHeadContour			= LABEL_FRAME_ON,
	penHead						= LABEL_ARROW_PEN,
	lineTypeHead				= LABEL_ARROW_LINETYPE,
	bShowFill					= 1,
	fillType					= filltypeBackground,
	penForeground				= LABEL_TEXT_BG_PEN,
	penBackground				= LABEL_TEXT_BG_PEN,

	! Label Line Representation
	distanceLabelHead_mm		= 0,
	bEnableLeaderLine			= 0,

	! For Link Sizes only at PM scripts
	ratioHeadSizes				= ratioHeadSizes


values{2} "iReferencePoint" 	_valuesRefPoint, _stRefPoint


! ==============================================================================
! Use Label Width
! ==============================================================================
if GLOB_UI_BUTTON_ID = 1000 then

	parameters 	bUseWithWall 	= 1,
				bUseWithSlab	= 1,
				bUseWithRoof	= 1,
				bUseWithShell	= 1,
				bUseWithColumn	= 1,
				bUseWithBeam	= 1,
				bUseWithMesh	= 1,
				bUseWithMorph	= 1,
				bUseWithObject	= 1,
				bUseWithLamp	= 1,
				bUseWithDoor	= 1,
				bUseWithWindow	= 1,
				bUseWithSkylight	= 1,
				bUseWithCW			= 1,
				bUseWithCWMembers	= 1,
				bUseWithFill	= 1
	
endif
if  GLOB_UI_BUTTON_ID = 2000 then

	parameters 	bUseWithWall 	= 0,
				bUseWithSlab	= 0,
				bUseWithRoof	= 0,
				bUseWithShell	= 0,
				bUseWithColumn	= 0,
				bUseWithBeam	= 0,
				bUseWithMesh	= 0,
				bUseWithMorph	= 0,
				bUseWithObject	= 0,
				bUseWithLamp	= 0,
				bUseWithDoor	= 0,
				bUseWithWindow	= 0,
				bUseWithSkylight	= 0,
				bUseWithCW			= 0,
				bUseWithCWMembers	= 0,
				bUseWithFill	= 0
	
endif

! ==============================================================================
! Display Order
! ==============================================================================

isFirstRun = 0
n = APPLICATION_QUERY ("parameter_script", "firstoccasion_in_progress", isFirstRun)

if n and isFirstRun and GLOB_UI_BUTTON_ID > 999 then

	for i = 1 to _maxFunctionOrder
		if GLOB_UI_BUTTON_ID = 1000 + i then		! move down
			dim tempTexts[]
				tempTexts = functionOrder

			tempTexts[i] 	= functionOrder[i+1]
			tempTexts[i+1]	= functionOrder[i]
			functionOrder	= tempTexts

			parameters functionOrder = tempTexts
		endif

		if GLOB_UI_BUTTON_ID = 2000 + i then		! move up
			dim tempTexts[]
				tempTexts = functionOrder

			tempTexts[i] 	= functionOrder[i-1]
			tempTexts[i-1] 	= functionOrder[i]
			functionOrder 	= tempTexts

			parameters functionOrder = tempTexts
		endif
	next i

	for j = 1 to _maxDimensionNum

		if GLOB_UI_BUTTON_ID = 3000 + j then		! move up
			dim tempTexts[]
				tempTexts = iContentOrderDim

			tempTexts[j]		= iContentOrderDim[j-1]
			tempTexts[j-1]		= iContentOrderDim[j]
			iContentOrderDim	= tempTexts

			parameters iContentOrderDim = iContentOrderDim
		endif

	next j
endif

! =============================================================================
! Ordering - precalculated functions ordering
! =============================================================================

_numrow = vardim1(functionOrder)
dim _recalculatedOrder[]
_recalculatedOrder = functionOrder

UNUSED = 99
if _numShownContentGroupUI > EPS then
	if _numrow > _numShownContentGroupUI then
		for iRow = 1 to _numrow
			if 	(_recalculatedOrder[iRow] <> UNUSED and _recalculatedOrder[iRow] <> CONTENT_NONE) then
				if	_iDisplayOrderingGroupUI[_recalculatedOrder[iRow]] = VALID then
				else
					for iDelete = iRow to _numrow-1
						_recalculatedOrder[iDelete] = _recalculatedOrder[iDelete+1]
					next iDelete
					_recalculatedOrder[_numrow] = UNUSED
					iRow = iRow - 1
				endif
			endif
		next iRow
	else
		! find all unused group to paste
		for iContent = 2 to _maxContentValues
			if _iDisplayOrderingGroupUI[iContent] = VALID then
				_iUnused = 0
				for iRow = 1 to _numrow
					if _recalculatedOrder[iRow] <> iContent then
						_iUnused  = iContent
					else
						_iUnused  = 0
						iRow = _numrow	! force loop end
					endif
				next iRow
				if _iUnused <> 0 then
					_numrow = _numrow + 1
					_recalculatedOrder[_numrow] = _iUnused
				endif
			endif
		next iContent
	endif

	dim functionOrder[]
		functionOrder[1] = CONTENT_DIM
	for iRow = 1 to vardim1(_recalculatedOrder)
		if _recalculatedOrder[iRow] <> UNUSED then
			functionOrder[iRow] = _recalculatedOrder[iRow]
		endif
	next iRow
	parameters functionOrder = functionOrder
endif


! ==============================================================================
! Functions
! ==============================================================================

if _iDisplayContentGroupUI[CONTENT_DIM] <= INVALID then
	lock "bShowLinearDimension"
	hideparameter "bShowLinearDimension"
else
	if not(bShowLinearDimension) then
		lock	"bShowWidth",
				"bShowLength",
				"bShowHeight",
				"bShowThickness",
				"sSeparator",
				"sDescriptionDimension"
		hideparameter	"bShowWidth",
						"bShowLength",
						"bShowHeight",
						"bShowThickness",
						"sSeparator",
						"sDescriptionDimension"
	endif
endif


if _iDisplayContentGroupUI[CONTENT_SURF] <= INVALID then
	lock "bShowSurfaceArea"
	hideparameter "bShowSurfaceArea"
else
	if not(bShowSurfaceArea) | iValueSumSurface = SUMSURFACE_ALL then
		lock	"bAddTopSurface",
				"bAddBottomSurface",
				"bAddSideSurface",
				"bAddEdgeSurface",
				"bAddRefSideSurface",
				"bAddOppSideSurface"
		hideparameter	"bAddTopSurface",
						"bAddBottomSurface",
						"bAddSideSurface",
						"bAddEdgeSurface",
						"bAddRefSideSurface",
						"bAddOppSideSurface"
	endif

	if not(bShowSurfaceArea) then
		lock	"iValueSumSurface",
				"sDescriptionSurfaceArea"
		hideparameter	"iValueSumSurface",
						"sDescriptionSurfaceArea"
	endif
endif


if	_iDisplayContentParametersUI[SURF_TOP] <= INVALID &\
	_iDisplayContentParametersUI[SURF_BOTTOM] <= INVALID &\
	_iDisplayContentParametersUI[SURF_SIDE] <= INVALID &\
	_iDisplayContentParametersUI[SURF_EDGE] <= INVALID &\
	_iDisplayContentParametersUI[SURF_REFSIDE] <= INVALID &\
	_iDisplayContentParametersUI[SURF_OPSIDE] <= INVALID then

	values{2} "iValueSumSurface" 	SUMSURFACE_ALL, 		_stValueSumSurface[1]
else
	values{2} "iValueSumSurface" 	SUMSURFACE_ALL, 		_stValueSumSurface[1],
									SUMSURFACE_SELECTED, 	_stValueSumSurface[2]
endif

if iValueSumSurface = SUMSURFACE_ALL then
	lock	"bAddTopSurface",
			"bAddBottomSurface",
			"bAddSideSurface",
			"bAddEdgeSurface",
			"bAddRefSideSurface",
			"bAddOppSideSurface"
endif

if _iDisplayContentGroupUI[CONTENT_AREA] <= INVALID then
	lock "bShowProjectedArea"
	hideparameter "bShowProjectedArea"
else
	if not(bShowProjectedArea) then
		lock "sDescriptionProjectedArea"
		hideparameter "sDescriptionProjectedArea"
	endif
endif

if _iDisplayContentGroupUI[CONTENT_VOL] <= INVALID then
	lock "bShowVolume"
	hideparameter "bShowVolume"
else
	if not(bShowVolume) then
		lock "sDescriptionVolume"
		hideparameter "sDescriptionVolume"
	endif
endif

if not(bUsePrefixColumn) then
	lock 	"sDescriptionDimension",
			"sDescriptionSurfaceArea",
			"sDescriptionProjectedArea",
			"sDescriptionVolume"
	hideparameter 	"sDescriptionDimension",
					"sDescriptionSurfaceArea",
					"sDescriptionProjectedArea",
					"sDescriptionVolume"
endif

values{2} "iWorkUnitLinear"		DIMUNIT_MM,		stUnitFormats[1],
							DIMUNIT_CM,		stUnitFormats[2],
							DIMUNIT_DM,		stUnitFormats[3],
							DIMUNIT_METER,		stUnitFormats[4],
							DIMUNIT_INCH,		stUnitFormats[5],
							DIMUNIT_PROJECT,	stUnitFormats[6]
	
put 0, 1
if iWorkUnitLinear = DIMUNIT_CM		then put 2
if iWorkUnitLinear = DIMUNIT_DM		then put 2, 3
if iWorkUnitLinear = DIMUNIT_METER	then put 2, 3, 4

values "iWorkUnitLinearDecimal" get(NSP)

if _bLockLinearUnitDecimal then
	lock "iWorkUnitLinearDecimal"
endif

values{2} "iWorkUnitArea"	SURFUNIT_SQM,		stUnitFormatsArea[1],
							SURFUNIT_SQCM,		stUnitFormatsArea[2],
							SURFUNIT_SQMM,		stUnitFormatsArea[3],
							SURFUNIT_SQFT,		stUnitFormatsArea[4],
							SURFUNIT_SQINCH,	stUnitFormatsArea[5],
							SURFUNIT_PROJECT,	stUnitFormatsArea[6]
	
put 0, 1
if iWorkUnitArea = SURFUNIT_SQCM	then put 2
if iWorkUnitArea = SURFUNIT_SQM		then put 2, 3, 4

values "iWorkUnitAreaDecimal" get(NSP)

if _bLockAreaUnitDecimal then
	lock "iWorkUnitAreaDecimal"
endif

values{2} "iWorkUnitVolume"	VOLUNIT_CM,		stUnitFormatsVol[1],
							VOLUNIT_L, 		stUnitFormatsVol[2],
							VOLUNIT_CCM,	stUnitFormatsVol[3],
							VOLUNIT_CMM,	stUnitFormatsVol[4],
							VOLUNIT_CFEET,	stUnitFormatsVol[5],
							VOLUNIT_CINCH,	stUnitFormatsVol[6],
							VOLUNIT_CYARD,	stUnitFormatsVol[7],
							VOLUNIT_GAL,	stUnitFormatsVol[8],
							VOLUNIT_PROJECT,stUnitFormatsVol[9]
	
put 0, 1
if iWorkUnitVolume = VOLUNIT_CCM		then put 2
if iWorkUnitVolume = VOLUNIT_L |\
	iWorkUnitVolume = VOLUNIT_CINCH then
	put 2, 3
endif
if iWorkUnitVolume = VOLUNIT_CM |\
	iWorkUnitVolume = VOLUNIT_CFEET |\
	iWorkUnitVolume = VOLUNIT_CYARD |\
	iWorkUnitVolume = VOLUNIT_GAL then
	put 2, 3, 4
endif

values "iWorkUnitVolumeDecimal" get(NSP)

if _bLockVolumeUnitDecimal then
	lock "iWorkUnitVolumeDecimal"
endif


