
! ==============================================================================
! Functions:
! - Offered Tools: Wall, Slab, Roof, Shell, Fill
! - Content: ID and Skin List
! - Size: paper size
! ==============================================================================
_isPreview = (GLOB_CONTEXT = 5)
_paperToModel = GLOB_SCALE/1000

! resizing paper size parameters values to model length
widthTextBoxContent_mm		= widthTextBoxContent_mm * _paperToModel
widthHead_mm				= widthHead_mm * _paperToModel
heightHead_mm				= heightHead_mm * _paperToModel
distanceLabelHead_mm		= distanceLabelHead_mm * _paperToModel
thkLeaderLine_mm 			= thkLeaderLine_mm * _paperToModel
lengthExtensionLine_mm		= lengthExtensionLine_mm * _paperToModel
thkExtensionLine_mm			= thkExtensionLine_mm * _paperToModel
listTextTopDistance_mm		= listTextTopDistance_mm * _paperToModel

gosub "install_label_position"

if not(_isEnabledContent) then
	! - Offered Tools: Wall, Slab, Roof, Shell
	call "label_placeholder" parameters bitAvailableTool 	= 1+32+128+256+512+262144,
										filltypeBackground 	= filltypeBackground
	end
endif

gosub "collect_content"

gosub "position_and_draw_label"

! ==============================================================================
END	!END	!END	!END	!END	!END	!END	!END	!END	!END	!END
! ==============================================================================

! ==============================================================================
"install_label_position":
! ------------------------------------------------------------------------------
! Label positioning - global behavior for Marker form Labels
! - origin is where AC gives, the table begins with top left anchor 
! - orientation is rotated with the parent structure by default
! - without AC Arrow
!		- drawing the full symbol marker form
! 		- the origin is at the arrow peak
! 		- rotating with parent elem direction
! 		- Reference Point is cordinated by user
! - with AC Arrow
!		- drawing only the head text
!		- the origin is at the boundary
!		- handling of rotation is belongs to AC (AC_CustomReadabilty OFF)
!		- Reference Point is cordinated at Pointer tabpage
!
! LABEL_POSITION 	- position of the label
! 					- array[3][2] containing the coordinates of the 3 points defining the label position 
!
! - the other transformations live in the label_marker_macro
! ==============================================================================

	nTrans = 0

	if LABEL_CUSTOM_ARROW then
	
		add2 	LABEL_POSITION [2][1]	+	LABEL_POSITION [3][1],
				LABEL_POSITION [2][2]	+	LABEL_POSITION [3][2]

	endif

return

! ==============================================================================
"collect_content":
! ------------------------------------------------------------------------------
! ==============================================================================
	nTrans = 0

	_nRowLabel = 0
	dim _sRowsOfLabel[][]
		_sRowsOfLabel[1][1] = ""

	dim _sContentStringsHead[][]
		_sContentStringsHead[1][1] = ""
	dim _sContentStringsList[][]
		_sContentStringsList[1][1] = ""

	dim _iSelectedContent[]
	for iIni = 1 to 32
		_iSelectedContent[iIni] = 0
	next iIni
	dim _iUnitLocal[]
	for iIni = 1 to 12
		_iUnitLocal[iIni] = 0
	next iIni
	
	if bShowID & bShowHead then
		_iSelectedContent[1] 	= CONTENT_ID
		_iUnitLocal[CONTENT_ID] = 0	! no need unit


		gosub "call_general_label_macro"	! returned text array, _nRowLabel, _sRowsOfLabel
		_sContentStringsHead = _sRowsOfLabel
	endif


	dim _iSelectedContent[]
	for iIni = 1 to 32
		_iSelectedContent[iIni] = 0
	next iIni
	dim _iUnitLocal[]
	for iIni = 1 to 12
		_iUnitLocal[iIni] = 0
	next iIni

	if bShowID & (not(bShowHead) | not(LABEL_CUSTOM_ARROW)) then
		_iSelectedContent[1] 	= CONTENT_ID
		_iUnitLocal[CONTENT_ID] = 0	! no need unit

		_iSelectedContent[2]		= CONTENT_SKIN
		_iUnitLocal[CONTENT_SKIN]	= iWorkUnitLinear
	else
		_iSelectedContent[1]		= CONTENT_SKIN
		_iUnitLocal[CONTENT_SKIN]	= iWorkUnitLinear
	endif

	gosub "call_general_label_macro"	! returned text array, _nRowLabel, _sRowsOfLabel
	_sContentStringsList = _sRowsOfLabel

return

! ==============================================================================
"position_and_draw_label":
! ------------------------------------------------------------------------------
! Text Style tabpage:
! LABEL_CUSTOM_ARROW 		- use symbol arrow option
!								- on/off 1 if the Use symbol arrow checkbox is checked, 0 otherwise
! LABEL_ARROW_LINETYPE 		- line type of the line of the arrow
! LABEL_ARROW_PEN 			- pen of the arrow
! LABEL_FONT_NAME 			- font name
! LABEL_TEXT_SIZE			- text size
! LABEL_TEXT_PEN 			- pen of the text
! LABEL_TEXT_BG_PEN			- text box background pen
! 								- 0 if opaque is off, the background pen otherwise
! LABEL_FONT_STYLE2 		- font style in the settings dialog box
!								- 0 - normal, otherwise j1 + 2*j2 + 4*j3 + 32*j6 + 64*j7 + 128*j8, j1 - bold, j2 - italic, j3 - underline, j6 - superscript, j7 - subscript, j8 - strikethrough 
!								- there is strikethrough and this global works well with define style{2} !
! LABEL_FRAME_ON			- label frame on/off 1 if the label frame is checked, 0 otherwise
! LABEL_ROTANGLE 			- rotation angle using by AC (this rotation is not from GDL)
! LABEL_TEXT_ALIGN			- text alignment for full table
!								- 1 - left aligned, 2 - center aligned, 3 - right aligned, 4 - full justified
! LABEL_TEXT_LEADING 		- line spacing factor
! LABEL_TEXT_WIDTH_FACT 	- width factor
! LABEL_TEXT_CHARSPACE_FACT - spacing factor
! ==============================================================================

	_angleParentDirection = 0
	if not(_isPreview) then
		_angleParentDirection = LABEL_ASSOC_ELEM_ORIENTATION
	endif

	if 	(not(bShowID) | (iIDText = IDVALUE_CUSTOMTEXT & sIDTextCustom = "")) &\
		(bFitFrameToText & not(LABEL_TEXT_WRAP)) then

		_bShowHead = 0
	else
		_bShowHead = bShowHead
	endif

	call "label_marker_form" parameters AC_CustomReadability = AC_CustomReadability,
		bUseBuiltinPointer			= not(LABEL_CUSTOM_ARROW),
		bAlwaysReadable				= LABEL_ALWAYS_READABLE,

		! Position
		iReferencePoint				= 5,
		iLabelOrientation 			= iLabelOrientation,
		bFlipLabel 					= bFlipLabel,
		bMirrorLabel 				= bMirrorLabel,
		anglePosition 				= LABEL_ROTANGLE,
		angleParentPosition			= _angleParentDirection,

		! Paragraph Format
		bEnablePrefixColumn			= 0,
		bUsePrefixColumn			= 0,
		bWrapText					= LABEL_TEXT_WRAP,
		widthTextBoxContent_mm		= widthTextBoxContent_mm,
		xFirstIndentParagraph		= 0,
		xLeftIndentParagraph		= 0,
		xRightIndentParagraph		= 0,
		xTabPositionParagraph		= 0,
		widthFactorTextBlock		= LABEL_TEXT_WIDTH_FACT,
		charspaceFactorTextBlock	= LABEL_TEXT_CHARSPACE_FACT,
		iFixedHeightTextBlock		= 0,		! fixed_height 	1: the placed TEXTBLOCK will be scale-independent and all specified length type parameters will mean millimeters, !
										!0: the placed TEXTBLOCK will be scale-dependent and all specified length type parameters will mean meters in model space

		! Head apperance
		sContentStringsHead			= _sContentStringsHead,
		bEnableCustomHeaderStyle 	= 1,
		bUseCustomHeaderStyle		= bUseCustomHeaderStyle,
		penTextHeader				= penTextHeader,
		fontTypeHeader				= fontTypeHeader,
		sizeFontHeader_mm			= sizeFontHeader_mm,
		bBoldStyleHeader			= bBoldStyleHeader,
		bItalicStyleHeader			= bItalicStyleHeader,
		bUnderlineStyleHeader		= bUnderlineStyleHeader,
		bStrikethroughStyleHeader	= bStrikethroughStyleHeader,
		iAlignmentHeader			= 2,	! 1: left aligned, 2: center aligned, 3: right aligned, 4: full justified
		sizeLeadingHeader			= 1,
		widthTextBoxOffset			= LABEL_FRAME_OFFSET * _paperToModel,

		! Body skin list appearance
		bUseTextBoxOnLine				= 1,
		sContentStringsList				= _sContentStringsList,
		listTextTopDistance_mm			= listTextTopDistance_mm,
		bShowSeparatorLines				= bShowSeparatorLines,
		bHideTextBoxContour				= bHideTextBoxContour,
		penTextBoxOnLine				= LABEL_TEXT_PEN,
		sTypeFontTextBoxOnLine			= LABEL_FONT_NAME,
		iStyleFontTextBoxOnLine			= LABEL_FONT_STYLE2,
		sizeFontTextBoxOnLine			= LABEL_TEXT_SIZE,
		iAlignmentTextBoxOnLine			= LABEL_TEXT_ALIGN,			! 0: custom, 1: left aligned, 2: center aligned, 3: right aligned, 4: full justified
		sizeLeadingTextBoxOnLine		= LABEL_TEXT_LEADING,

		! Label Head Representation
		bEnableHeadSwitch			= 1,							! Enable to switch the Show Label Head ON-OFF
		bShowHead					= _bShowHead,
		iShapeHead					= iShapeHead,
		bFitFrameToText				= bFitFrameToText,
		widthHead_mm				= widthHead_mm,
		heightHead_mm				= heightHead_mm,
		bLinkSizes					= bLinkSizes,
		bShowHeadContour			= LABEL_FRAME_ON,
		penHead						= LABEL_ARROW_PEN,
		lineTypeHead				= LABEL_ARROW_LINETYPE,
		bShowFill					= 1,
		fillType					= filltypeBackground,
		penForeground				= LABEL_TEXT_BG_PEN,
		penBackground				= LABEL_TEXT_BG_PEN,

		! Leader Line Representation
		distanceLabelHead_mm		= distanceLabelHead_mm,
		bEnableLeaderLine			= 1,
		bShowLeaderLine				= bShowLeaderLine,
		penLeaderLine				= LABEL_ARROW_PEN,
		linetypeLeaderLine			= LABEL_ARROW_LINETYPE,
		iLeaderLineStyle			= iLeaderLineStyle,
		thkLeaderLine_mm			= thkLeaderLine_mm,
		iExtensionLineStyle 		= iExtensionLineStyle,
		lengthExtensionLine_mm		= lengthExtensionLine_mm,
		thkExtensionLine_mm			= thkExtensionLine_mm,

		bDebug						= 0

	del nTrans : nTrans = 0

return

! ==============================================================================
"call_general_label_macro":
! ------------------------------------------------------------------------------
! input: 
!	
!	
! input variable
!
! output variable:
!	_widthTextBlock, _heightTextBlock
! ==============================================================================

	_nRowLabel = 0
	dim tempsRowsOfLabel[]
		tempsRowsOfLabel[1] = ""

	call "label_content_macro" parameters iSelectedContent = _iSelectedContent,
			iUnitLocal					= _iUnitLocal,
			bDecimalOptions				= 1, ! Enable Decimal options
			bUseInSingleRank			= 0,

			bUsePrefixColumn			= 0,

			bShowSuperScript			= 1,
			bShowUnit					= bShowUnit,
			bShow2D						= 0,

			iWorkUnitLinearDecimal		= iWorkUnitLinearDecimal,

			! Content ID
			iIDText						= iIDText,
			sIDTextCustom				= sIDTextCustom,
			sPrefixID					= "",
			sSuffixID					= "",

			! Content Skin Data
			bShowSkinThickness			= bShowSkinThickness,
			bChangeSkinDirection		= bChangeSkinDirection,
			iTypeSkinContent			= iTypeSkinContent,
			dataCustomSkinRow			= dataCustomSkinRow,
			bCustomListContent 			= bCustomListContent,

		 returned_parameters _nRowLabel, tempsRowsOfLabel

		! making from one dimensioned array to two dimensioned
		idx = 0
		dim _sRowsOfLabel[][]
			_sRowsOfLabel[1][1] = ""
		for i = 1 to _nRowLabel
			for j = 1 to 30
				_sRowsOfLabel[i][j] = tempsRowsOfLabel[idx + j]
			next j
			idx = idx + 30
		next i
return

