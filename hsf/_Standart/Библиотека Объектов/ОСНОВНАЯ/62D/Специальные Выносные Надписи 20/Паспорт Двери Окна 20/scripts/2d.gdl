
! ==============================================================================
! Functions:
! - Content: Openings nominal sizes and custom parameters
! - Sizes: in paper size
! ==============================================================================
_isPreview = (GLOB_CONTEXT = 5)
_paperToModel = GLOB_SCALE/1000

! resizing paper size parameters values to model length
widthTextBoxContent_mm	= widthTextBoxContent_mm * _paperToModel
widthTextBoxPrefix_mm	= widthTextBoxPrefix_mm * _paperToModel

gosub "install_label_position"

if not(_isEnabledContent) then
	! - Offered Tools: Door, Window
	call "label_placeholder" parameters bitAvailableTool = 8+16,
		filltypeBackground = filltypeBackground
	end
endif

gosub "collect_content"

gosub "position_and_draw_table"

! ==============================================================================
END	!END	!END	!END	!END	!END	!END	!END	!END	!END	!END
! ==============================================================================

! ==============================================================================
"install_label_position":
! ------------------------------------------------------------------------------
! Label positioning - global behavior for Table form Labels
! - origin is where AC gives, the table begins with top left anchor 
! - orientation is rotated with the parent structure by default
! - without AC Arrow
! 		- the origin is at the arrow peak
! 		- rotating with parent elem direction
! 		- Reference Point is cordinated by user
! - with AC Arrow
!		- the origin is at the boundary
!		- handling of rotation is belongs to AC (AC_CustomReadabilty OFF)
!		- Reference Point is cordinated at Pointer tabpage
!
! LABEL_POSITION 	- position of the label
! 					- array[3][2] containing the coordinates of the 3 points defining the label position 
!
! - the other transformations live in the label_form_macro
! ==============================================================================

	nTrans = 0

	if LABEL_CUSTOM_ARROW then

		add2 	LABEL_POSITION [2][1]	+	LABEL_POSITION [3][1],
				LABEL_POSITION [2][2]	+	LABEL_POSITION [3][2]
	endif

return

! ==============================================================================
"collect_content":
! ------------------------------------------------------------------------------
! ==============================================================================
	nTrans = 0

    ! ==============================================================================
    ! collect content text	- TODO lehet ezt szebben is
    ! ==============================================================================

	dim _sPrefixStrings[]
		_sPrefixStrings[1] = ""
	dim _sContentStrings[][]
		for iIniCells = 1 to 30
			_sContentStrings[1][iIniCells] = ""
		next iIniCells
		_sContentStrings[1][1] = `<нет содержимого>`		! If default Element


	dim	_sSubroutine[15]
		_sSubroutine[CONTENT_NONE]		= ""
		_sSubroutine[CONTENT_ID]		= "getStringID"
		_sSubroutine[CONTENT_WALLHOLE]	= "getStringWallhole"
		_sSubroutine[CONTENT_UNIT]		= "getStringUnit"
		_sSubroutine[CONTENT_REVEAL]	= "getStringReveal"
		_sSubroutine[CONTENT_EGRESS]	= "getStringEgress"
		_sSubroutine[CONTENT_SILL]		= "getStringSill"
		_sSubroutine[CONTENT_THRESHOLD]	= "getStringThreshold"
		_sSubroutine[CONTENT_FIRE]		= "getStringFire"
		_sSubroutine[CONTENT_ACOUSTIC]	= "getStringAcoustic"
		_sSubroutine[CONTENT_UVALUE]	= "getStringUValue"
		_sSubroutine[CONTENT_MATERIAL]	= "getStringMaterial"
		_sSubroutine[CONTENT_HARDWARE]	= "getStringHardware"
		_sSubroutine[CONTENT_CUSTOM1]	= "getStringCustom1"
		_sSubroutine[CONTENT_CUSTOM2]	= "getStringCustom2"

	iContent = 1

	note1	= ""
	note2	= ""
	note3	= ""
	note4	= ""
	_iUnitTypeByContent = 0

	for iRow = 1 to vardim1(functionOrder)
		if _iDisplayContentParameters2D[functionOrder[iRow]] = VALID and _bShowContent[functionOrder[iRow]] then
			if functionOrder[iRow] = CONTENT_SILL | functionOrder[iRow] = CONTENT_THRESHOLD then
				_iWorkUnit			= iWorkUnitSillHgt
				_iWorkUnitDecimal	= iWorkUnitSillHgtDecimal
			else
				_iWorkUnit			= iWorkUnitLinear
				_iWorkUnitDecimal	= iWorkUnitLinearDecimal
			endif

			gosub _sSubroutine[functionOrder[iRow]]

			iContent = iContent + 1
		endif
	next iRow

return

! ==============================================================================
"position_and_draw_table":
! ------------------------------------------------------------------------------
! Text Style tabpage:
! LABEL_CUSTOM_ARROW 		- use symbol arrow option
!								- on/off 1 if the Use symbol arrow checkbox is checked, 0 otherwise
! LABEL_ARROW_LINETYPE 		- line type of the line of the arrow
! LABEL_ARROW_PEN 			- pen of the arrow
! LABEL_FONT_NAME 			- font name
! LABEL_TEXT_SIZE			- text size
! LABEL_TEXT_PEN 			- pen of the text
! LABEL_TEXT_BG_PEN			- text box background pen
! 								- 0 if opaque is off, the background pen otherwise
! LABEL_FONT_STYLE2 		- font style in the settings dialog box
!								- 0 - normal, otherwise j1 + 2*j2 + 4*j3 + 32*j6 + 64*j7 + 128*j8, j1 - bold, j2 - italic, j3 - underline, j6 - superscript, j7 - subscript, j8 - strikethrough 
!								- there is strikethrough and this global works well with define style{2} !
! LABEL_FRAME_ON			- label frame on/off 1 if the label frame is checked, 0 otherwise
! LABEL_ROTANGLE 			- rotation angle using by AC (this rotation is not from GDL)
! LABEL_TEXT_ALIGN			- text alignment for full table
!								- 1 - left aligned, 2 - center aligned, 3 - right aligned, 4 - full justified
! LABEL_TEXT_LEADING 		- line spacing factor
! LABEL_TEXT_WIDTH_FACT 	- width factor
! LABEL_TEXT_CHARSPACE_FACT - spacing factor
! ==============================================================================

	_angleParentDirection = 0
	if not(_isPreview) then
		_angleParentDirection = LABEL_ASSOC_ELEM_ORIENTATION
	endif

	call "label_table_form" parameters AC_CustomReadability = AC_CustomReadability,
		bUseBuiltinPointer			= not(LABEL_CUSTOM_ARROW),
		bAlwaysReadable				= LABEL_ALWAYS_READABLE,

		anglePosition 				= LABEL_ROTANGLE,
		angleParentPosition			= _angleParentDirection,
		bUsePrefixColumn			= bUsePrefixColumn,
		bUseContentColumn			= 1,
		sPrefixStrings				= _sPrefixStrings,
		sContentStrings				= _sContentStrings,
		bWrapText					= LABEL_TEXT_WRAP,
		widthTextBoxPrefix_mm		= widthTextBoxPrefix_mm,
		widthTextBoxContent_mm		= widthTextBoxContent_mm,
		bEnableCustomHeaderStyle 	= 1,
		bUseCustomHeaderStyle		= bUseCustomHeaderStyle,
		xFirstIndentParagraph		= 0,
		xLeftIndentParagraph		= 0,
		xRightIndentParagraph		= 0,
		xTabPositionParagraph		= 0,
		widthFactorTextBlock		= LABEL_TEXT_WIDTH_FACT,
		charspaceFactorTextBlock	= LABEL_TEXT_CHARSPACE_FACT,
		iFixedHeightTextBlock		= 0,		! fixed_height 	1: the placed TEXTBLOCK will be scale-independent and all specified length type parameters will mean millimeters, !
				 												!0: the placed TEXTBLOCK will be scale-dependent and all specified length type parameters will mean meters in model space
		penTextHeader				= penTextHeader,
		fontTypeHeader				= fontTypeHeader,
		sizeFontHeader_mm			= sizeFontHeader_mm,
		sizeFontHeader_pt			= sizeFontHeader_pt,
		bBoldStyleHeader			= bBoldStyleHeader,
		bItalicStyleHeader			= bItalicStyleHeader,
		bUnderlineStyleHeader		= bUnderlineStyleHeader,
		bStrikethroughStyleHeader	= bStrikethroughStyleHeader,
		iAlignmentHeader			= iAlignmentHeader,	! 1: left aligned, 2: center aligned, 3: right aligned, 4: full justified
		iLineSpaceHeader			= iLineSpaceHeader,
		sizeLineSpaceHeader_mm		= sizeLineSpaceHeader_mm,
		sizeLineSpaceHeader_pt		= sizeLineSpaceHeader_pt,

		penTextBody					= LABEL_TEXT_PEN,
		sTypeFontBody				= LABEL_FONT_NAME,
		iStyleFontBody				= LABEL_FONT_STYLE2,
		sizeFontBody				= LABEL_TEXT_SIZE,
		iAlignmentTableColumns		= LABEL_TEXT_ALIGN,			! 0: custom, 1: left aligned, 2: center aligned, 3: right aligned, 4: full justified
		sizeLeadingBody				= LABEL_TEXT_LEADING,
		widthTextBoxOffset			= LABEL_FRAME_OFFSET * _paperToModel,

		bShowFill					= 1,
		filltype					= filltypeBackground,
		penForeground				= LABEL_TEXT_BG_PEN,
		penBackground				= LABEL_TEXT_BG_PEN,
		bShowFrame					= LABEL_FRAME_ON,
		penFrame					= LABEL_ARROW_PEN,
		lineTypeFrame				= LABEL_ARROW_LINETYPE,
		iFrameStyle					= iFrameStyle,
		iReferencePoint				= iReferencePoint,
		iLabelOrientation 			= iLabelOrientation
		
return

! ==============================================================================
"call_quantity_formatter":
! ------------------------------------------------------------------------------
! _sContentForFormatter 	- length values from parent
! LABEL_FONT_NAME 			- font name
! LABEL_TEXT_SIZE			- text size
! LABEL_FONT_STYLE2 		- font style in the settings dialog box
!								- 0 - normal, otherwise j1 + 2*j2 + 4*j3 + 32*j6 + 64*j7 + 128*j8, j1 - bold, j2 - italic, j3 - underline, j6 - superscript, j7 - subscript, j8 - strikethrough 
!								- there is strikethrough and this global works well with define style{2} !
! ------------------------------------------------------------------------------

	! Unit Type --------------------------------------------------------------------
	_custom_form = ""
	if _iWorkUnit = DIMUNIT_MM 		then _custom_form = "%~0." + str(_iWorkUnitDecimal,1,0) + "mm"		!mm
	if _iWorkUnit = DIMUNIT_CM 		then _custom_form = "%~0." + str(_iWorkUnitDecimal,1,0) + "cm"		!cm
	if _iWorkUnit = DIMUNIT_DM 		then
		_custom_form = "%~0." + str(_iWorkUnitDecimal,1,0) + "m"		!dm
		_sContentForFormatter = _sContentForFormatter * 10
	endif
	if _iWorkUnit = DIMUNIT_METER 	then _custom_form = "%~0." + str(_iWorkUnitDecimal,1,0) + "m"			!m
	if _iWorkUnit = DIMUNIT_INCH 	then _custom_form = "%0.64fi"
	if _iWorkUnit = DIMUNIT_PROJECT 	then
		_iUnitType = _iUnitTypeByContent
	else
		_iUnitType = 0		! Custom
	endif

	call "quantity_text_formatter" parameters 	lengthValue				= _sContentForFormatter,
												custom_form				= _custom_form,
												iUnitType				= _iUnitType,		! "Windor_Door_Dimension"
												horizontalAlignment 	= 1,
												verticalAlignment		= 1,
												AC_TextFont				= LABEL_FONT_NAME,
												AC_TextSize				= LABEL_TEXT_SIZE,
												AC_TextStyle			= LABEL_FONT_STYLE2,
												szPrefix				= "",
												bShowText				= 0,
												bShowUnit				= bShowUnit,
												bShowSuperScript		= 1,
							returned_parameters dummy_lengthOfNote1,
												dummy_lengthOfNote2,
												dummy_lengthOfNote3,
												dummy_lengthOfNote4,
												dummy_totalLength,
												dummy_totalHeight,
												dummy_lengthOfUnit,
												dummy_lengthOfIntegerPart,
												note1,				!szPrefix + main
												note2,				!frac,
												note3,				!szUnit,
												note4,				!szUnitIndex,
												szExtraPrecision,
												dummy_iAnchorString

	if bShowUnit & _iWorkUnit = DIMUNIT_DM then note3 = " " + `дм`

return

! ==============================================================================
"getStringID":
! ------------------------------------------------------------------------------
	_sPrefixStrings[iContent] = sDescriptionID

	if iIDText <> IDVALUE_CUSTOMTEXT then
		dim _MasterID[]
		_MasterID[1] = ""
		result = 0
		result = REQUEST("Full_ID_of_parent", "", _MasterID)

		_sContentStrings[iContent][1] = ""
		if result then
			if iIDText = IDVALUE_IDNUMBER then
				_sContentStrings[iContent][1] = _MasterID[vardim1(_MasterID)]
			else
				_end = 1
				if iIDText = IDVALUE_MASTERID then _end = vardim1 (_MasterID) - 1
				if iIDText = IDVALUE_FULLIDNUM then _end = vardim1 (_MasterID)
				for kk = 1 to _end
					_sContentStrings[iContent][1] = _sContentStrings[iContent][1] + _MasterID[kk]
				next kk
			endif
		endif

		if _sContentStrings[iContent][1] = "" then
			if iIDText = IDVALUE_IDNUMBER then
				_sContentStrings[iContent][1] = `<ID>`
			else
				_sContentStrings[iContent][1] = `<Основной ID>`
			endif
		endif
	else
		_sContentStrings[iContent][1] = sIDTextCustom
	endif

return

! ==============================================================================
"getStringWallhole":
! ------------------------------------------------------------------------------
	_sPrefixStrings[iContent] = sDescriptionWallholeDimension

	if iWallholeDimension = DIM_MEASURED then
		_widthValue = 0 : _heightValue = 0
		_iUnitTypeByContent  	= 7		! "Windor_Door_Dimension"
		rrr = request ("ASSOCLP_PARVALUE", "ac_wallhole_width",	index_ww, type_ww, flags_ww, dim1_ww, dim2_ww, _widthValue)
		rrr = request ("ASSOCLP_PARVALUE", "ac_wallhole_height", index_ww, type_ww, flags_ww, dim1_ww, dim2_ww, _heightValue)

		iDimCont = 0

		_sContentStrings[iContent][5] = sSeparatorWallholeDimension

		for iCol = 1 to _maxDimensionNum
			if iContentOrderDim[iCol] = DIM_WDT then
				_sContentForFormatter = _widthValue
				gosub "call_quantity_formatter"
				_sContentStrings[iContent][iDimCont + 1] = note1
				_sContentStrings[iContent][iDimCont + 2] = note2
				_sContentStrings[iContent][iDimCont + 3] = note3
				_sContentStrings[iContent][iDimCont + 4] = note4

				iDimCont = iDimCont + 5
			endif

			if iContentOrderDim[iCol] = DIM_HGT then
				_sContentForFormatter = _heightValue
				gosub "call_quantity_formatter"
				_sContentStrings[iContent][iDimCont + 1] = note1
				_sContentStrings[iContent][iDimCont + 2] = note2
				_sContentStrings[iContent][iDimCont + 3] = note3
				_sContentStrings[iContent][iDimCont + 4] = note4

				iDimCont = iDimCont + 5
			endif
		next iCol
	else
		_sContentStrings[iContent][1]			= sValueWallholeDimension
	endif

return

! ==============================================================================
"getStringUnit":
! ------------------------------------------------------------------------------
	_sPrefixStrings[iContent] = sDescriptionUnitDimension

	if iUnitDimension = DIM_MEASURED then
		_widthValue = 0 : _heightValue = 0
		_iUnitTypeByContent  	= 7		! "Windor_Door_Dimension"
		rrr = request ("ASSOCLP_PARVALUE", "ac_unit_width",	index_ww, type_ww, flags_ww, dim1_ww, dim2_ww, _widthValue)
		rrr = request ("ASSOCLP_PARVALUE", "ac_unit_height", index_ww, type_ww, flags_ww, dim1_ww, dim2_ww, _heightValue)

		iDimCont = 0

		_sContentStrings[iContent][5] = sSeparatorUnitDimension

		for iCol = 1 to _maxDimensionNum
			if iContentOrderDim[iCol] = DIM_WDT then
				_sContentForFormatter = _widthValue
				gosub "call_quantity_formatter"
				_sContentStrings[iContent][iDimCont + 1] = note1
				_sContentStrings[iContent][iDimCont + 2] = note2
				_sContentStrings[iContent][iDimCont + 3] = note3
				_sContentStrings[iContent][iDimCont + 4] = note4

				iDimCont = iDimCont + 5
			endif

			if iContentOrderDim[iCol] = DIM_HGT then
				_sContentForFormatter = _heightValue
				gosub "call_quantity_formatter"
				_sContentStrings[iContent][iDimCont + 1] = note1
				_sContentStrings[iContent][iDimCont + 2] = note2
				_sContentStrings[iContent][iDimCont + 3] = note3
				_sContentStrings[iContent][iDimCont + 4] = note4

				iDimCont = iDimCont + 5
			endif
		next iCol
	else
		_sContentStrings[iContent][1]			= sValueUnitDimension
	endif

return

! ==============================================================================
"getStringReveal":
! ------------------------------------------------------------------------------
	_sPrefixStrings[iContent] = sDescriptionRevealDimension

	if iRevealDimension = DIM_MEASURED then
		_widthValue = 0 : _heightValue = 0
		_iUnitTypeByContent  	= 7		! "Windor_Door_Dimension"
		rrr = request ("ASSOCLP_PARVALUE", "ac_reveal_width",	index_ww, type_ww, flags_ww, dim1_ww, dim2_ww, _widthValue)
		rrr = request ("ASSOCLP_PARVALUE", "ac_reveal_height", index_ww, type_ww, flags_ww, dim1_ww, dim2_ww, _heightValue)

		iDimCont = 0

		_sContentStrings[iContent][5] = sSeparatorRevealDimension

		for iCol = 1 to _maxDimensionNum
			if iContentOrderDim[iCol] = DIM_WDT then
				_sContentForFormatter = _widthValue
				gosub "call_quantity_formatter"
				_sContentStrings[iContent][iDimCont + 1] = note1
				_sContentStrings[iContent][iDimCont + 2] = note2
				_sContentStrings[iContent][iDimCont + 3] = note3
				_sContentStrings[iContent][iDimCont + 4] = note4

				iDimCont = iDimCont + 5
			endif

			if iContentOrderDim[iCol] = DIM_HGT then
				_sContentForFormatter = _heightValue
				gosub "call_quantity_formatter"
				_sContentStrings[iContent][iDimCont + 1] = note1
				_sContentStrings[iContent][iDimCont + 2] = note2
				_sContentStrings[iContent][iDimCont + 3] = note3
				_sContentStrings[iContent][iDimCont + 4] = note4

				iDimCont = iDimCont + 5
			endif
		next iCol
	else
		_sContentStrings[iContent][1]			= sValueRevealDimension
	endif

return

! ==============================================================================
"getStringEgress":
! ------------------------------------------------------------------------------
	_sPrefixStrings[iContent] = sDescriptionEgressDimension

	if iEgressDimension = DIM_MEASURED then
		_widthValue = 0 : _heightValue = 0
		_iUnitTypeByContent  	= 7		! "Windor_Door_Dimension"
		rrr = request ("ASSOCLP_PARVALUE", "ac_egress_width",	index_ww, type_ww, flags_ww, dim1_ww, dim2_ww, _widthValue)
		rrr = request ("ASSOCLP_PARVALUE", "ac_egress_height", index_ww, type_ww, flags_ww, dim1_ww, dim2_ww, _heightValue)

		iDimCont = 0

		_sContentStrings[iContent][5] = sSeparatorEgressDimension

		for iCol = 1 to _maxDimensionNum
			if iContentOrderDim[iCol] = DIM_WDT then
				_sContentForFormatter = _widthValue
				gosub "call_quantity_formatter"
				_sContentStrings[iContent][iDimCont + 1] = note1
				_sContentStrings[iContent][iDimCont + 2] = note2
				_sContentStrings[iContent][iDimCont + 3] = note3
				_sContentStrings[iContent][iDimCont + 4] = note4

				iDimCont = iDimCont + 5
			endif

			if iContentOrderDim[iCol] = DIM_HGT then
				_sContentForFormatter = _heightValue
				gosub "call_quantity_formatter"
				_sContentStrings[iContent][iDimCont + 1] = note1
				_sContentStrings[iContent][iDimCont + 2] = note2
				_sContentStrings[iContent][iDimCont + 3] = note3
				_sContentStrings[iContent][iDimCont + 4] = note4

				iDimCont = iDimCont + 5
			endif
		next iCol
	else
		_sContentStrings[iContent][1]			= sValueEgressDimension
	endif

return

! ==============================================================================
"getStringSill":
! ------------------------------------------------------------------------------
	_sPrefixStrings[iContent] = sDescriptionSillHeight

	if iSillHeight = DIM_MEASURED then
		_iUnitTypeByContent  	= 8		! "Sill_height_dimension"

		if iSillHeightMeasuredTo = SILL_TO_CURRSTORY then
			_sillValue = WALL_POSITION[3] - GLOB_CSTORY_ELEV + GLOB_ELEVATION -  WIDO_SUBFL_THICKNESS
		else
			if iSillHeightMeasuredTo = SILL_TO_WALLBASE then
				_sillValue = WIDO_SILL_HEIGHT - WIDO_SUBFL_THICKNESS
			else	! anchor - default
				_sillValue = WIDO_SILL_HEIGHT - WIDO_SUBFL_THICKNESS
			endif
		endif
		if bSillHeightReduce then
			_sillValue = _sillValue + AC_WIDO_OVERSIZE_B + WIDO_SUBFL_THICKNESS
		endif

		_sContentForFormatter = _sillValue
		gosub "call_quantity_formatter"
		_sContentStrings[iContent][1] = note1
		_sContentStrings[iContent][2] = note2
		_sContentStrings[iContent][3] = note3
		_sContentStrings[iContent][4] = note4
	else
		_sContentStrings[iContent][1]			= sValueSillHeight
	endif

return

! ==============================================================================
"getStringThreshold":
! ------------------------------------------------------------------------------
	_sPrefixStrings[iContent] = sDescriptionThresholdHeight

	if iThresholdHeight = DIM_MEASURED then
		_iUnitTypeByContent  	= 8		! "Sill_height_dimension"

		_thresholdValue = 0
		_bThresholdExists = 0
		_bHasThreshold = request ("ASSOCLP_PARVALUE", "bThreshold", index_ww, type_ww, flags_ww, dim1_ww, dim2_ww, _bThresholdExists)
		if _bHasThreshold > EPS and _bThresholdExists = 1 then
			_bHasThresholdThk = request ("ASSOCLP_PARVALUE", "gs_treshold_thk", index_ww, type_ww, flags_ww, dim1_ww, dim2_ww, _thresholdValue)
			if _bHasThresholdThk = 0 then
				! DACH parameter
				nnn = request ("ASSOCLP_PARVALUE", "thresholdHeight3D", index_ww, type_ww, flags_ww, dim1_ww, dim2_ww, _thresholdValue)
			endif
		endif

		_sContentForFormatter = _thresholdValue
		gosub "call_quantity_formatter"
		_sContentStrings[iContent][1] = note1
		_sContentStrings[iContent][2] = note2
		_sContentStrings[iContent][3] = note3
		_sContentStrings[iContent][4] = note4
	else
		_sContentStrings[iContent][1]			= sValueThresholdHeight
	endif

return

! ==============================================================================
"getStringFire":
! ------------------------------------------------------------------------------
	_sPrefixStrings[iContent] = sDescriptionFireRating

	if iFireRating = VALUE_AUTOMATIC then
		_fireRatingValue = ""
		nnn = request ("ASSOCLP_PARVALUE", "gs_list_firerating", index_ww, type_ww, flags_ww, dim1_ww, dim2_ww, _fireRatingValue)

		_sContentStrings[iContent][1] = _fireRatingValue
	else
		_sContentStrings[iContent][1] = sValueFireRating
	endif

return

! ==============================================================================
"getStringAcoustic":
! ------------------------------------------------------------------------------
	_sPrefixStrings[iContent] = sDescriptionAcousticRating

	if iAcousticRating = VALUE_AUTOMATIC then
		_AcousticRatingValue = ""
		nnn = request ("ASSOCLP_PARVALUE", "gs_list_acousticrating", index_ww, type_ww, flags_ww, dim1_ww, dim2_ww, _AcousticRatingValue)

		_sContentStrings[iContent][1] = _AcousticRatingValue
	else
		_sContentStrings[iContent][1] = sValueAcousticRating
	endif

return

! ==============================================================================
"getStringUValue":
! ------------------------------------------------------------------------------
	_sPrefixStrings[iContent] = sDescriptionUValue

	if iUValue = VALUE_AUTOMATIC then
		_UValueValue = ""
		nnn = request ("ASSOCLP_PARVALUE", "gs_list_heattransfer", index_ww, type_ww, flags_ww, dim1_ww, dim2_ww, _UValueValue)

		_sContentStrings[iContent][1] = _UValueValue
	else
		_sContentStrings[iContent][1] = sValueUValue
	endif

return

! ==============================================================================
"getStringMaterial":
! ------------------------------------------------------------------------------
	_sPrefixStrings[iContent] = sDescriptionMaterial

	if iMaterial <> 4 then
		_sContentStrings[iContent][1] = sMaterials[iMaterial]
	else
		_sContentStrings[iContent][1]			= sValueMaterial
	endif

return

! ==============================================================================
"getStringHardware":
! ------------------------------------------------------------------------------
	_sPrefixStrings[iContent] = sDescriptionHardwareSet

	if iHardwareSet = VALUE_AUTOMATIC then
		_HardwareSetValue = ""
		nnn = request ("ASSOCLP_PARVALUE", "gs_list_hwsetno", index_ww, type_ww, flags_ww, dim1_ww, dim2_ww, _HardwareSetValue)

		_sContentStrings[iContent][1] = _HardwareSetValue
	else
		_sContentStrings[iContent][1] = sValueHardwareSet
	endif

return

! ==============================================================================
"getStringCustom1":
! ------------------------------------------------------------------------------
	_sPrefixStrings[iContent]				= sDescriptionCustomText1
	_sContentStrings[iContent][1]			= sValueCustomText1

return

! ==============================================================================
"getStringCustom2":
! ------------------------------------------------------------------------------
	_sPrefixStrings[iContent]				= sDescriptionCustomText2
	_sContentStrings[iContent][1]			= sValueCustomText2

return
