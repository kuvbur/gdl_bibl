

if not(_isEnabledContent) then
	lock all
endif

! =============================================================================
! Appearence
! =============================================================================

values "gs_ui_current_page"  1, 2, 3, 4, 5

call "label_table_form" parameters AC_CustomReadability = AC_CustomReadability,
	bUseBuiltinPointer			= not(LABEL_CUSTOM_ARROW),
	anglePosition 				= LABEL_ROTANGLE,
	bUsePrefixColumn			= bUsePrefixColumn,
	bUseContentColumn			= 1,
	!sPrefixStrings				= prefixTnC,
	!sContentStrings			= contentTnC,
	bWrapText					= LABEL_TEXT_WRAP,
	widthTextBoxPrefix_mm		= widthTextBoxPrefix_mm,
	widthTextBoxPrefix_pt		= widthTextBoxPrefix_pt,
	widthTextBoxContent_mm		= widthTextBoxContent_mm,
	widthTextBoxContent_pt		= widthTextBoxContent_pt,
	bEnableCustomHeaderStyle 	= 1,
	bUseCustomHeaderStyle		= bUseCustomHeaderStyle,
	xFirstIndentParagraph		= 0,
	xLeftIndentParagraph		= 0,
	xRightIndentParagraph		= 0,
	xTabPositionParagraph		= 0,
	widthFactorTextBlock		= LABEL_TEXT_WIDTH_FACT,
	charspaceFactorTextBlock	= LABEL_TEXT_CHARSPACE_FACT,
	iFixedHeightTextBlock		= 0,

	penTextHeader				= penTextHeader,
	fontTypeHeader				= fontTypeHeader,
	sizeFontHeader_mm			= sizeFontHeader_mm,
	sizeFontHeader_pt			= sizeFontHeader_pt,
	bBoldStyleHeader			= bBoldStyleHeader,
	bItalicStyleHeader			= bItalicStyleHeader,
	bUnderlineStyleHeader		= bUnderlineStyleHeader,
	bStrikethroughStyleHeader	= bStrikethroughStyleHeader,
	iAlignmentHeader			= iAlignmentHeader,	! no need 1: left aligned, 2: center aligned, 3: right aligned, 4: full justified
	iLineSpaceHeader			= iLineSpaceHeader,
	sizeLineSpaceHeader_mm		= sizeLineSpaceHeader_mm,
	sizeLineSpaceHeader_pt		= sizeLineSpaceHeader_pt,

	penTextBody					= LABEL_TEXT_PEN,
	sTypeFontBody				= LABEL_FONT_NAME,
	iStyleFontBody				= LABEL_FONT_STYLE2,
	sizeFontBody				= LABEL_TEXT_SIZE,
	iAlignmentTableColumns		= LABEL_TEXT_ALIGN,			! 0: custom, 1: left aligned, 2: center aligned, 3: right aligned, 4: full justified
	sizeLeadingBody				= LABEL_TEXT_LEADING,

	bShowFill					= 1,
	filltype					= filltypeBackground,
	penForeground				= LABEL_TEXT_BG_PEN,
	penBackground				= LABEL_TEXT_BG_PEN,
	bShowFrame					= LABEL_FRAME_ON,
	penFrame					= LABEL_ARROW_PEN,
	lineTypeFrame				= LABEL_ARROW_LINETYPE,
	iFrameStyle					= iFrameStyle,
	iReferencePoint				= iReferencePoint,
	iLabelOrientation 			= iLabelOrientation

! ==============================================================================
! Display Order
! ==============================================================================

isFirstRun = 0
n = APPLICATION_QUERY ("parameter_script", "firstoccasion_in_progress", isFirstRun)

if n and isFirstRun and GLOB_UI_BUTTON_ID > 999 then

	for i = 1 to _maxFunctionOrder
		if GLOB_UI_BUTTON_ID = 1000 + i then		! move down
			dim tempTexts[]
				tempTexts = functionOrder

			tempTexts[i] 	= functionOrder[i+1]
			tempTexts[i+1]	= functionOrder[i]
			functionOrder	= tempTexts

			parameters functionOrder = tempTexts
		endif

		if GLOB_UI_BUTTON_ID = 2000 + i then		! move up
			dim tempTexts[]
				tempTexts = functionOrder

			tempTexts[i] 	= functionOrder[i-1]
			tempTexts[i-1] 	= functionOrder[i]
			functionOrder 	= tempTexts

			parameters functionOrder = tempTexts
		endif
	next i

	for j = 1 to _maxDimensionNum

		if GLOB_UI_BUTTON_ID = 3000 + j then		! swap
			dim tempTexts[]
				tempTexts = iContentOrderDim

			tempTexts[j]		= iContentOrderDim[j-1]
			tempTexts[j-1]		= iContentOrderDim[j]
			iContentOrderDim	= tempTexts

			parameters iContentOrderDim = iContentOrderDim
		endif

	next j
endif

! =============================================================================
! Ordering - precalculated functions ordering
! =============================================================================

_numrow = vardim1(functionOrder)
dim _recalculatedOrder[]
_recalculatedOrder = functionOrder

UNUSED = 99
if _numShownContentGroupUI > EPS then
	if _numrow > _numShownContentGroupUI then
		for iRow = 1 to _numrow
			if 	(_recalculatedOrder[iRow] <> UNUSED and _recalculatedOrder[iRow] <> CONTENT_NONE) then
				if	_iDisplayOrderingGroupUI[_recalculatedOrder[iRow]] = VALID then
				else
					for iDelete = iRow to _numrow-1
						_recalculatedOrder[iDelete] = _recalculatedOrder[iDelete+1]
					next iDelete
					_recalculatedOrder[_numrow] = UNUSED
					iRow = iRow - 1
				endif
			endif
		next iRow
	else
		! find all unused group to paste
		for iContent = 2 to _maxContentValues
			if _iDisplayOrderingGroupUI[iContent] = VALID then
				_iUnused = 0
				for iRow = 1 to _numrow
					if _recalculatedOrder[iRow] <> iContent then
						_iUnused  = iContent
					else
						_iUnused  = 0
						iRow = _numrow	! force loop end
					endif
				next iRow
				if _iUnused <> 0 then
					_numrow = _numrow + 1
					_recalculatedOrder[_numrow] = _iUnused
				endif
			endif
		next iContent
	endif

	dim functionOrder[]
		functionOrder[1] = CONTENT_ID
	for iRow = 1 to vardim1(_recalculatedOrder)
		if _recalculatedOrder[iRow] <> UNUSED then
			functionOrder[iRow] = _recalculatedOrder[iRow]
		endif
	next iRow
	parameters functionOrder = functionOrder
endif


! ==============================================================================
! Content Setup
! ==============================================================================

if _iDisplayContentParametersUI[CONTENT_ID] <= INVALID then
	lock			"bShowID"
	hideparameter	"bShowID"
else
	if not(bShowID) then 
		lock "iIDText", "sIDTextCustom", "sDescriptionID"
		hideparameter "iIDText", "sIDTextCustom", "sDescriptionID"
	endif
endif

values{2} "iIDText" 	IDVALUE_IDNUMBER, 	sIDTextValues[1],
						IDVALUE_MASTERID,	sIDTextValues[4],
						IDVALUE_FULLIDNUM,	sIDTextValues[3],
				 		IDVALUE_CUSTOMTEXT,	sIDTextValues[2]

if iIDText # IDVALUE_CUSTOMTEXT then
	lock "sIDTextCustom"
	hideparameter "sIDTextCustom"
endif

if _iDisplayContentParametersUI[CONTENT_WALLHOLE] <=  INVALID then
	lock			"bShowWallholeDimension"
	hideparameter	"bShowWallholeDimension"
else
	if not(bShowWallholeDimension) then 
		lock "iWallholeDimension", "sValueWallholeDimension", "sDescriptionWallholeDimension", "sSeparatorWallholeDimension"
		hideparameter "iWallholeDimension", "sValueWallholeDimension", "sDescriptionWallholeDimension", "sSeparatorWallholeDimension"
	endif
endif

values{2} "iWallholeDimension"	DIM_MEASURED,	sMeasuredDimension[1],
								DIM_CUSTOM,		sMeasuredDimension[2]
if iWallholeDimension # DIM_CUSTOM then
	lock "sValueWallholeDimension"
	hideparameter "sValueWallholeDimension"
else
	lock "sSeparatorWallholeDimension"
	hideparameter "sSeparatorWallholeDimension"
endif


if _iDisplayContentParametersUI[CONTENT_UNIT] <= INVALID then
	lock			"bShowUnitDimension"
	hideparameter	"bShowUnitDimension"
else
	if not(bShowUnitDimension) then 
		lock "iUnitDimension", "sValueUnitDimension", "sDescriptionUnitDimension", "sSeparatorUnitDimension"
		hideparameter "iUnitDimension", "sValueUnitDimension", "sDescriptionUnitDimension", "sSeparatorUnitDimension"
	endif
endif

values{2} "iUnitDimension"	DIM_MEASURED,	sMeasuredDimension[1],
								DIM_CUSTOM,		sMeasuredDimension[2]
if iUnitDimension # DIM_CUSTOM then
	lock "sValueUnitDimension"
	hideparameter "sValueUnitDimension"
else
	lock "sSeparatorUnitDimension"
	hideparameter "sSeparatorUnitDimension"
endif

if _iDisplayContentParametersUI[CONTENT_REVEAL] <= INVALID then
	lock			"bShowRevealDimension"
	hideparameter	"bShowRevealDimension"
else
	if not(bShowRevealDimension) then 
		lock "iRevealDimension", "sValueRevealDimension", "sDescriptionRevealDimension", "sSeparatorRevealDimension"
		hideparameter "iRevealDimension", "sValueRevealDimension", "sDescriptionRevealDimension", "sSeparatorRevealDimension"
	endif
endif

values{2} "iRevealDimension"	DIM_MEASURED,	sMeasuredDimension[1],
								DIM_CUSTOM,		sMeasuredDimension[2]

if iRevealDimension # DIM_CUSTOM then
	lock "sValueRevealDimension"
	hideparameter "sValueRevealDimension"
else
	lock "sSeparatorRevealDimension"
	hideparameter "sSeparatorRevealDimension"
endif


if _iDisplayContentParametersUI[CONTENT_EGRESS] <= INVALID then
	lock			"bShowEgressDimension"
	hideparameter	"bShowEgressDimension"
else
	if not(bShowEgressDimension) then 
		lock "iEgressDimension", "sValueEgressDimension", "sDescriptionEgressDimension", "sSeparatorEgressDimension"
		hideparameter "iEgressDimension", "sValueEgressDimension", "sDescriptionEgressDimension", "sSeparatorEgressDimension"
	endif
endif


values{2} "iEgressDimension"	DIM_MEASURED,	sMeasuredDimension[1],
								DIM_CUSTOM,		sMeasuredDimension[2]

if iEgressDimension # DIM_CUSTOM then
	lock "sValueEgressDimension"
	hideparameter "sValueEgressDimension"
else
	lock "sSeparatorEgressDimension"
	hideparameter "sSeparatorEgressDimension"
endif

if _iDisplayContentParametersUI[CONTENT_SILL] <= INVALID then
	lock			"bShowSillHeight"
	hideparameter	"bShowSillHeight"
else
	if not(bShowSillHeight) then 
		lock	"iSillHeight",
				"sValueSillHeight",
				"sDescriptionSillHeight",
				"iSillHeightMeasuredTo"
		hideparameter	"iSillHeight",
						"sValueSillHeight",
						"sDescriptionSillHeight",
						"iSillHeightMeasuredTo"
	endif
endif

values{2} "iSillHeight"	DIM_MEASURED,	sMeasuredDimension[1],
						DIM_CUSTOM,		sMeasuredDimension[2]

if iSillHeight # DIM_CUSTOM then
	lock "sValueSillHeight"
	hideparameter "sValueSillHeight"
else
	lock "iSillHeightMeasuredTo"
	hideparameter "iSillHeightMeasuredTo"
endif

values{2} "iSillHeightMeasuredTo"	SILL_TO_ANCHOR,		sSillToOptions[1],
									SILL_TO_WALLBASE,	sSillToOptions[2],
									SILL_TO_CURRSTORY,	sSillToOptions[3],
									SILL_TO_CUSTOM,		sSillToOptions[4]



if _iDisplayContentParametersUI[CONTENT_THRESHOLD] <= INVALID then
	lock			"bShowThresholdHeight"
	hideparameter	"bShowThresholdHeight"
else
	if not(bShowThresholdHeight) then 
		lock	"iThresholdHeight",
				"sValueThresholdHeight",
				"sDescriptionThresholdHeight"
		hideparameter	"iThresholdHeight",
						"sValueThresholdHeight",
						"sDescriptionThresholdHeight"
	endif
endif

values{2} "iThresholdHeight"	DIM_MEASURED,	sMeasuredDimension[1],
								DIM_CUSTOM,		sMeasuredDimension[2]

if iThresholdHeight # DIM_CUSTOM then
	lock "sValueThresholdHeight"
	hideparameter "sValueThresholdHeight"
endif


if _iDisplayContentParametersUI[CONTENT_FIRE] <= INVALID then
	lock			"bShowFireRating"
	hideparameter	"bShowFireRating"
else
	if not(bShowFireRating) then
		lock	"iFireRating",
				"sValueFireRating",
				"sDescriptionFireRating"
		hideparameter	"iFireRating",
						"sValueFireRating",
						"sDescriptionFireRating"
	endif
endif

values{2} "iFireRating"	VALUE_AUTOMATIC,	sAutoCustom[1],
						VALUE_CUSTOM,		sAutoCustom[2]

if iFireRating # VALUE_CUSTOM then
	lock "sValueFireRating"
	hideparameter "sValueFireRating"
endif


if _iDisplayContentParametersUI[CONTENT_ACOUSTIC] <= INVALID then
	lock			"bShowAcousticRating"
	hideparameter	"bShowAcousticRating"
else
	if not(bShowAcousticRating) then
		lock	"iAcousticRating",
				"sValueAcousticRating",
				"sDescriptionAcousticRating"
		hideparameter	"iAcousticRating",
						"sValueAcousticRating",
						"sDescriptionAcousticRating"
	endif
endif

values{2} "iAcousticRating"	VALUE_AUTOMATIC,	sAutoCustom[1],
							VALUE_CUSTOM,		sAutoCustom[2]

if iAcousticRating # VALUE_CUSTOM then
	lock "sValueAcousticRating"
	hideparameter "sValueAcousticRating"
endif


if _iDisplayContentParametersUI[CONTENT_UVALUE] <= INVALID then
	lock			"bShowUValue"
	hideparameter	"bShowUValue"
else
	if not(bShowUValue) then
		lock	"iUValue",
				"sValueUValue",
				"sDescriptionUValue"
		hideparameter	"iUValue",
						"sValueUValue",
						"sDescriptionUValue"
	endif
endif

values{2} "iUValue"		VALUE_AUTOMATIC,	sAutoCustom[1],
						VALUE_CUSTOM,		sAutoCustom[2]

if iUValue # VALUE_CUSTOM then
	lock "sValueUValue"
	hideparameter "sValueUValue"
endif


if _iDisplayContentParametersUI[CONTENT_MATERIAL] <= INVALID then
	lock			"bShowMaterial"
	hideparameter	"bShowMaterial"
else
	if not(bShowMaterial) then
		lock	"iMaterial",
				"sValueMaterial",
				"sDescriptionMaterial"
		hideparameter	"iMaterial",
						"sValueMaterial",
						"sDescriptionMaterial"
	endif
endif

values{2} "iMaterial"	1,	sMaterials[1],
						2,	sMaterials[2],
						3,	sMaterials[3],
						4,	sMaterials[4]

if iMaterial # 4 then	! Custom
	lock "sValueMaterial"
	hideparameter "sValueMaterial"
endif


if _iDisplayContentParametersUI[CONTENT_HARDWARE] <= INVALID then
	lock			"bShowHardwareSet"
	hideparameter	"bShowHardwareSet"
else
	if not(bShowHardwareSet) then
		lock	"iHardwareSet",
				"sValueHardwareSet",
				"sDescriptionHardwareSet"
		hideparameter	"iHardwareSet",
						"sValueHardwareSet",
						"sDescriptionHardwareSet"
	endif
endif

values{2} "iHardwareSet"	VALUE_AUTOMATIC,	sAutoCustom[1],
							VALUE_CUSTOM,		sAutoCustom[2]

if iHardwareSet # VALUE_CUSTOM then
	lock "sValueHardwareSet"
	hideparameter "sValueHardwareSet"
endif

if _iDisplayContentParametersUI[CONTENT_CUSTOM1] <= INVALID then
	lock			"bShowCustomText1"
	hideparameter	"bShowCustomText1"
else
	if not(bShowCustomText1) then
		lock	"sValueCustomText1",
				"sDescriptionCustomText1"
		hideparameter	"sValueCustomText1",
						"sDescriptionCustomText1"
	endif
endif


if _iDisplayContentParametersUI[CONTENT_CUSTOM2] <= INVALID then
	lock			"bShowCustomText2"
	hideparameter	"bShowCustomText2"
else
	if not(bShowCustomText2) then
		lock	"sValueCustomText2",
				"sDescriptionCustomText2"
		hideparameter	"sValueCustomText2",
						"sDescriptionCustomText2"
	endif
endif



values{2} "iWorkUnitLinear"	DIMUNIT_MM,			stUnitFormats[1],
							DIMUNIT_CM,			stUnitFormats[2],
							DIMUNIT_DM,			stUnitFormats[3],
							DIMUNIT_METER,		stUnitFormats[4],
							DIMUNIT_INCH,		stUnitFormats[5],
							DIMUNIT_PROJECT,	stUnitFormats[6]

put 0, 1
if iWorkUnitLinear = DIMUNIT_CM		then put 2
if iWorkUnitLinear = DIMUNIT_DM		then put 2, 3
if iWorkUnitLinear = DIMUNIT_METER	then put 2, 3, 4

values "iWorkUnitLinearDecimal" get(NSP)

if _bLockLinearUnitDecimal then
	lock "iWorkUnitLinearDecimal"
	hideparameter "iWorkUnitLinearDecimal"
endif


values{2} "iWorkUnitSillHgt"	DIMUNIT_MM,			stUnitFormats[1],
								DIMUNIT_CM,			stUnitFormats[2],
								DIMUNIT_DM,			stUnitFormats[3],
								DIMUNIT_METER,		stUnitFormats[4],
								DIMUNIT_INCH,		stUnitFormats[5],
								DIMUNIT_PROJECT,	stUnitFormats[6]

put 0, 1
if iWorkUnitSillHgt = DIMUNIT_CM	then put 2
if iWorkUnitSillHgt = DIMUNIT_DM	then put 2, 3
if iWorkUnitSillHgt = DIMUNIT_METER	then put 2, 3, 4

values "iWorkUnitSillHgtDecimal" get(NSP)

if _bLockSillHgtUnitDecimal then
	lock "iWorkUnitSillHgtDecimal"
	hideparameter "iWorkUnitSillHgtDecimal"
endif


if iWorkUnitLinear = DIMUNIT_INCH & iWorkUnitSillHgt = DIMUNIT_INCH then
	lock "bShowUnit"
endif


if not(bUsePrefixColumn) then
	lock	"sDescriptionID",
			"sDescriptionWallholeDimension",
			"sDescriptionUnitDimension",
			"sDescriptionRevealDimension",
			"sDescriptionEgressDimension",
			"sDescriptionSillHeight",
			"sDescriptionThresholdHeight",
			"sDescriptionFireRating",
			"sDescriptionAcousticRating",
			"sDescriptionUValue",
			"sDescriptionMaterial",
			"sDescriptionHardwareSet",
			"sDescriptionCustomText1",
			"sDescriptionCustomText2"

	hideparameter	"sDescriptionID",
			"sDescriptionWallholeDimension",
			"sDescriptionUnitDimension",
			"sDescriptionRevealDimension",
			"sDescriptionEgressDimension",
			"sDescriptionSillHeight",
			"sDescriptionThresholdHeight",
			"sDescriptionFireRating",
			"sDescriptionAcousticRating",
			"sDescriptionUValue",
			"sDescriptionMaterial",
			"sDescriptionHardwareSet",
			"sDescriptionCustomText1",
			"sDescriptionCustomText2"
endif


