
name =  ""
n = REQUEST ("ASSOCLP_NAME", "", name)
if filteroff then goto "mna"
!Enjoy true Art. BeArt (beart@inbox.ru)
!Edited by kuvbur@gmail.com
show = 1
if annot[1] = 0 then 
	show  = 1
else
	show = 0
	for i=1 to vardim1(annot)
		if annot[i] = GLOB_SCALE then show = 1
	next i
endif
if show<EPS then end

if upr_n<>-1 then
	if upr_n_1<>-1 then
		if GLOB_STRUCTURE_DISPLAY <> upr_n and GLOB_STRUCTURE_DISPLAY <> upr_n_1 then end
	else
		if GLOB_STRUCTURE_DISPLAY <> upr_n then end
	endif
endif

nd1 = request("Assoclp_parvalue", "param_name_out", namindd1, typed1, flagd1, dim1d1, dim2d1, param_name_out)
if strstr(param_name_out[1],"!!Профиль",0)>0 and strstr(param_name_out[1],"Лист",0)=0 then
	nd1 = request("Assoclp_parvalue", "name_prof_i", namindd1, typed1, flagd1, dim1d1, dim2d1, name_prof_i)
else
	pr1 = strstr(name,"Двутавр") <> 0
	pr2 = strstr(name,"Квадратнопрямоуг") <> 0
	pr3 = strstr(name,"Круглая труба") <> 0
	pr4 = strstr(name,"Ручник") <> 0
	pr5 = strstr(name,"голок") <> 0
	pr6 = strstr(name,"Швеллер") <> 0
	prof = pr1 + pr2 + pr3 + pr4 + pr5 + pr6
endif

!Определение видимости выноски
if param_name = tparam_name[SHOW_STRUCT] or param_name = tparam_name[SHOW_PARAM] or param_name = tparam_name[SHOW_BYMVO] then
	type_spec=""
	nd1 = request("Assoclp_parvalue", "type_spec", namindd1, typed1, flagd1, dim1d1, dim2d1, type_spec)
	if type_spec<>"" then
		success = 0 : ignore_id = "!" : success = LIBRARYGLOBAL ("Libraryflobals-km", "ignore_id", ignore_id)
		if success then
			show_ingore = 1 : success = LIBRARYGLOBAL ("Libraryflobals-km", "show_ingore", show_ingore)
			show_spec = 0 : IF STRSTR (GLOB_ID, ignore_id, 1) > 0 THEN show_spec = 1
			if not(show_ingore) and (type_spec="Не специфицировать" or show_spec) and show then show = 0
			if show<EPS then end
			success = LIBRARYGLOBAL ("Libraryflobals-km", "show_izd", show_izd)
			success = LIBRARYGLOBAL ("Libraryflobals-km", "show_metall", show_metall)
			if type_spec = "Металл" and not(show_metall) then show = 0
			if type_spec = "Изделие" and not(show_izd) then show = 0
			if show<EPS then end
		endif
	endif

	el_type_view = 0
	nd1 = request("Assoclp_parvalue", "el_type_view", namindd1, typed1, flagd1, dim1d1, dim2d1, el_type_view)
	if el_type_view>0 then
		show_if_vert=1 : show_if_gor=1 : show_if_ang=1
		success = LIBRARYGLOBAL ("Libraryflobals-km", "show_if_vert", show_if_vert)
		if success then
			success = LIBRARYGLOBAL ("Libraryflobals-km", "show_if_gor", show_if_gor)
			success = LIBRARYGLOBAL ("Libraryflobals-km", "show_if_ang", show_if_ang)
			if el_type_view=1 and not(show_if_gor) and show then show = 0
			if el_type_view=2 and not(show_if_vert) and show then show = 0
			if el_type_view=3 and not(show_if_ang) and show then show = 0
			if show<EPS then end
		endif
	endif

	dim el_views[20] : el_views[1]=""
	nd1 = request("Assoclp_parvalue", "el_views", namindd1, typed1, flagd1, dim1d1, dim2d1, el_views)
	if nd1 then
		show_el = 1 : call "Показ_по_группам" PARAMETERS ALL el_views=el_views RETURNED_PARAMETERS show_el
		if show_el<EPS then end
	endif

	subpos = ""
	nd1 = request("Assoclp_parvalue", "subpos", namindd1, typed1, flagd1, dim1d1, dim2d1, subpos)
	if subpos<>"" then
		call "Показ_по_сборкам" PARAMETERS ALL subpos=subpos, pos=GLOB_ID RETURNED_PARAMETERS show_subpos, show_marker
		show = show_subpos*show_marker
		if show<EPS then end
	endif

	upr = 1 : nd1 = request("Assoclp_parvalue", "upr", namindd1, typed1, flagd1, dim1d1, dim2d1, upr)
	if nd1 then
		show_connect = 1 : success = LIBRARYGLOBAL ("Libraryflobals-km", "show_connect", show_connect)
		if success then
			if not(show_connect) and upr then show = 0
			if show<EPS then end
		endif
	endif

	syst_name = "*" : show_el = 1
	nd1 = request("Assoclp_parvalue", "syst_name", namindd1, typed1, flagd1, dim1d1, dim2d1, syst_name)
	if nd1 then
		if syst_name = "!!!" or strlen(syst_name)<1 then
			syst_name = "!!!"
			DIM SystemStr[][]
			ConToolType_1 = 0
			nd1 = request("Assoclp_parvalue", "ConToolType_1", namindd1, typed1, flagd1, dim1d1, dim2d1, ConToolType_1)
			if nd1 and ConToolType_1>0 then
				queryStr = "GetMEPSystems (" + STR(ConToolType_1, 1, 0) + ")"
				isSystemQuery = APPLICATION_QUERY ("MEPSystem", queryStr, SystemStr)
				num = VARDIM2(SystemStr)/2
				dim MEP_StrConnectionData[][]
				nd1 = request("Assoclp_parvalue", "MEP_StrConnectionData", namindd1, typed1, flagd1, dim1d1, dim2d1, MEP_StrConnectionData)
				if nd1 then
					FOR i = 2 TO num + 1
						IF MEP_StrConnectionData[1][2] = SystemStr[1][(i-1)*2-1] THEN 
							syst_name = SystemStr[1][(i-1)*2]
							i = num + 1
						endif
					NEXT i
					if syst_name = "!!!" then
						queryStr = "GetMEPSystems (" + STR(2, 1, 0) + ")"
						isSystemQuery = APPLICATION_QUERY ("MEPSystem", queryStr, SystemStr)
						num = VARDIM2(SystemStr)/2
						FOR i = 2 TO num + 1
							IF MEP_StrConnectionData[1][2] = SystemStr[1][(i-1)*2-1] THEN 
								syst_name = SystemStr[1][(i-1)*2]
								i = num + 1
							endif
						NEXT i
					endif
				endif
			endif
		endif
		gosub "show_mep"
		if show_el<EPS then end
	endif
endif

"mna":

if show_by_type = 4 then
	show_by_type = 0
	if GLOB_STRUCTURE_DISPLAY = 2 then show_by_type = 1
	if GLOB_STRUCTURE_DISPLAY = 1 then show_by_type = 2
endif

if param_name = tparam_name[SHOW_BYMVO] then
	gosub "read_mvo"
	if inx_par_mvo<EPS then end
endif

_LABEL_TEXT_ALIGN = 0
_LABEL_CUSTOM_ARROW = 0
aversion = 0 : aname =  ""
LABEL_ALWAYS_READABLE = AC_bLabelAlwaysReadable
_LABEL_TEXT_WRAP = AC_bLabelTextWrap
if AC_LabelTextBgrPen < 0 then AC_LabelTextBgrPen = GLOB_DRAWING_BGD_PEN
_LABEL_TEXT_BG_PEN = AC_bLabelOpaqueFill*AC_LabelTextBgrPen
_LABEL_FRAME_ON = AC_bLabelFrame
_LABEL_FRAME_OFFSET = AC_LabelFrameOffset
arrowpen = AC_LabelPointerPen
_LABEL_ARROW_LINETYPE = AC_LabelPointerLineType
_LABEL_ANCHOR_POS = AC_LabelPointerConnection
_LABEL_TEXT_ALIGN = AC_TextAlignment_1
txtpen = AC_TextPen_1
_LABEL_CUSTOM_ARROW = not(LABEL_HAS_POINTER)
_LABEL_FONT_NAME = AC_TextFont_1
_LABEL_TEXT_SIZE = AC_TextSize_1
_LABEL_FONT_STYLE = AC_TextStyle_1
if _LABEL_CUSTOM_ARROW=0 then
	autod = 1
else
	if _LABEL_TEXT_WRAP then
		autod = 0
	else
		autod = 1
	endif
endif

if type_f>0 then autod = 1

LINE_TYPE AC_LabelPointerLineType
If not(_LABEL_CUSTOM_ARROW) or _LABEL_ARROWHEAD_PEN<1 or _LABEL_ARROWHEAD_PEN>255 Then _LABEL_ARROWHEAD_PEN = LABEL_ARROWHEAD_PEN

if STRSTR(unittype,stringarr[LCODE][77])>0 then
	rr = REQUEST ("Linear_dimension", "",ld)
else
	if unittype = ".0mm" or unittype = "В мм" then
		ld = "%.1mm"
	else
		ld = "%"+unittype
	endif
endif

total_thk = 0
show_prof = 0

If STRSTR(gs_style,"1") then gs_style_m=1
If STRSTR(gs_style,"2") then gs_style_m=2
If STRSTR(gs_style,"3") then gs_style_m=3
If STRSTR(gs_style,"4") then gs_style_m=4
If STRSTR(gs_style,"5") then gs_style_m=5
If STRSTR(gs_style,"6") then gs_style_m=6
If STRSTR(gs_style,"7") then gs_style_m=7
If STRSTR(gs_style,"8") then gs_style_m=8
If STRSTR(gs_style,"9") then gs_style_m=9
anchor=5
If _LABEL_CUSTOM_ARROW Then
	anchor=5
	if _LABEL_TEXT_ALIGN =4 then
		anchor = 7 * (PosA>0) + 9 * (PosA<0)
!		if flag = 1 then anchor = 4 * (PosA>0) + 6 * (PosA<0)
	else
		IF _LABEL_TEXT_ALIGN =1 Then anchor=7
		IF _LABEL_TEXT_ALIGN =2 Then anchor=8
		IF _LABEL_TEXT_ALIGN =3 Then anchor=9
!		if flag = 1 then anchor = 4 * (PosA>0) + 6 * (PosA<0)
	endif
else
	IF _LABEL_TEXT_ALIGN =1 Then anchor=4
	IF _LABEL_TEXT_ALIGN =2 Then anchor=5
	IF _LABEL_TEXT_ALIGN =3 Then anchor=6
	IF _LABEL_TEXT_ALIGN =4 Then anchor=5
endif
if _LABEL_TEXT_ALIGN=2 or _LABEL_TEXT_ALIGN=4 then thk_alg=0

!! Стиль второй строки и/или надписи над флажком
if Shrift_add_param<EPS then 
	Shrift_add_param = _LABEL_FONT_STYLE
else
	Shrift_add_param = Shrift_add_param - 1
endif
if Shrift_add_param_size<EPS then Shrift_add_param_size = _LABEL_TEXT_SIZE

!<-------------------- Получаем ID -------------------------
gl_id="" : full_id="" : master_id = ""
n = REQUEST ("Full_ID_of_parent", "", master_id)
!Удаляем пробелы в начале и конце
if STRSTR(master_id, " ")>EPS then
	mts_in_str = master_id
	call "macro_trim_space" parameters mts_in_str=mts_in_str,
										RETURNED_PARAMETERS mts_out_str
	master_id = mts_out_str
endif
gl_id=GLOB_ID
if vartype(gl_id)=1 then gl_id = str("%.0", gl_id)
!Удаляем пробелы в начале и конце
if STRSTR(gl_id, " ")>EPS then
	mts_in_str = gl_id
	call "macro_trim_space" parameters mts_in_str=mts_in_str,
										RETURNED_PARAMETERS mts_out_str
	gl_id = mts_out_str
endif
if master_id <> "" then
	full_id = master_id + "." + gl_id
else
	full_id = gl_id
endif
if STRSTR(gl_id, ignore_id, 1)>0 then gl_id = ""
if STRSTR(full_id, ignore_id, 1)>0 then full_id = ""
if STRSTR(master_id, ignore_id, 1)>0 then master_id = ""
out_var_n[13] = gl_id
out_var_n[14] = master_id
out_var_n[15] = full_id
!>-------------------- Получаем ID -------------------------

if param_name = tparam_name[SHOW_STRUCT] then
	param_name_t = param_otobr[GLOB_STRUCTURE_DISPLAY+1][2]
else
	if param_name = tparam_name[SHOW_BYMVO] then
		param_name_t = param_otobr[inx_par_mvo][2]
	else
		param_name_t = param_name
	endif
endif

comp_name = ""
if GLOB_ELEM_TYPE=5 then comp_name = WALL_COMPS_NAME
if GLOB_ELEM_TYPE=7 then comp_name = SLAB_COMPS_NAME
if GLOB_ELEM_TYPE=8 then comp_name = ROOF_COMPS_NAME
if GLOB_ELEM_TYPE=18 then comp_name = SHELLBASE_COMPS_NAME
out_var_n[16] = comp_name

!<---------------- Вытаскиваем данные из аксессуаров -----------
pol=0
n_sloi=0
dim strih[] : strih[1] = 0
dim bmatm[] : bmatm[1] = ""
dim bmatinx[] : bmatinx[1] = 0
dim tolsh[] : tolsh[1] = 0
if GLOB_ELEM_TYPE = 1 and param_name = tparam_name[SHOW_FLAG] then
	if (strstr(name,"Пол") <> 0 or strstr(name,"Потолок") <> 0 or strstr(name,"Лестница ЖБ") <> 0) then
		pol = 1
		dim tolsh_min[10]
		dim strih_r[10]
		dim tolsh_r[10]
		dim tolsh_min_r[10]
		if strstr(name,"v2") <> 0 then
			ver = 1
		else
			ver = 0
		endif
		if strstr(name,"Лестница ЖБ") <> 0 then ver = 1
		nd1 = request("Assoclp_parvalue", "n_sloi", namind1, type1, flag1, dim11, dim21, n_sloi)
		if ver = 0 then
			nd1 = request("Assoclp_parvalue", "sloi_n", namindd1, typed1, flagd1, dim1d1, dim2d1, sloi_n)
			j=0
			for i=1 to n_sloi*2 step 2
				j=j+1
				strih[j]=sloi_n[i]
				tolsh[j]=sloi_n[i+1]/100
			next i
			j=j+1
			strih[j]=sloi_n[15]
			tolsh[j]=sloi_n[16]/100
		else
			nd1 = request("Assoclp_parvalue", "strih", namindd1, typed1, flagd1, dim1d1, dim2d1, strih_r)
			nd1 = request("Assoclp_parvalue", "tolsh", namindd1, typed1, flagd1, dim1d1, dim2d1, tolsh_r)
			nd1 = request("Assoclp_parvalue", "tolsh_min", namindd1, typed1, flagd1, dim1d1, dim2d1, tolsh_min_r)
			j=0
			for i=1 to n_sloi+1
				strih[i]=strih_r[i]
				tolsh[i]=tolsh_r[i]
				tolsh_min[i]=tolsh_min_r[i] 
			next i
		endif
		if n_sloi > 0 then vin = 0
	endif
endif
!>---------------- Вытаскиваем данные из аксессуаров -----------
SkiN = WALL_SKINS_NUMBER*(GLOB_ELEM_TYPE=5)+\
	SLAB_SKINS_NUMBER*(GLOB_ELEM_TYPE=7)+\
	ROOF_SKINS_NUMBER*(GLOB_ELEM_TYPE=8)+(GLOB_ELEM_TYPE=18)*SHELLBASE_SKINS_NUMBER+n_sloi*(GLOB_ELEM_TYPE = 1)
SkiN_n = vardim1(WALL_SKINS_PARAMS)*(GLOB_ELEM_TYPE=5)+\
	vardim1(SLAB_SKINS_PARAMS)*(GLOB_ELEM_TYPE=7)+\
	vardim1(ROOF_SKINS_PARAMS)*(GLOB_ELEM_TYPE=8)+vardim1(SHELLBASE_SKINS_PARAMS)*(GLOB_ELEM_TYPE=18)+n_sloi*(GLOB_ELEM_TYPE = 1)
SkiN_ = 0
for i=1 to SkiN_n
	if GLOB_ELEM_TYPE=5 then 
		if WALL_SKINS_PARAMS [i][18]>EPS then SkiN_ = SkiN_ + 1 
	endif
	if GLOB_ELEM_TYPE=7 then 
		if SLAB_SKINS_PARAMS [i][18]>EPS then SkiN_ = SkiN_ + 1 
	endif
	if GLOB_ELEM_TYPE=8 then
		if ROOF_SKINS_PARAMS [i][18]>EPS then SkiN_ = SkiN_ + 1 

	endif
	if GLOB_ELEM_TYPE=18 then
		if SHELLBASE_SKINS_PARAMS [i][18]>EPS then SkiN_ = SkiN_ + 1 
	endif
next i
hasComp = ((GLOB_ELEM_TYPE=5)+(GLOB_ELEM_TYPE=7)+(GLOB_ELEM_TYPE=8)+(GLOB_ELEM_TYPE=18))*(SkiN_>EPS)+(n_sloi > 0)
!!!<---------------- Вытаскиваем данные из свойств -----------
property = 0 : _stPropertyValue = ""
if property_layer_name <> stringarr[LCODE][58] and strlen(property_layer_name)>0 and (property_layer_force or not(hasComp)) and param_name = tparam_name[SHOW_FLAG] then
	call "macro_get_param" parameters mgp_in_str="%"+property_layer_name+"%",
										mgp_prim1=par_prim1,
										mgp_prim2=par_prim2,
										mgp_prim3=par_prim3,
										mgp_prim4=par_prim4,
										mgp_prim5=par_prim5,
										mgp_qty=n_str_px*_LABEL_CUSTOM_ARROW,
										mgp_ld=ld, mgp_ignore_id=ignore_id RETURNED_PARAMETERS mgp_out_str
	if strlen(mgp_out_str)>1 then
		_stPropertyValue = mgp_out_str	
	else
		_stPropertyID = property_layer : gosub "getPropertyValue"	
	endif
else
	if (property_layer_force or not(hasComp)) then
		_stPropertyID = property_layer : gosub "getPropertyValue"	
	endif
endif

if (somestuff_prop_1>0 or somestuff_prop_2>0) and somestuff_read_type>0 and not(strlen(_stPropertyValue)>0 and _stPropertyValue<>" " and (STRSTR(_stPropertyValue, "m[")>0 or STRSTR(_stPropertyValue, "b[")>0) and STRSTR(_stPropertyValue, "]")>0) then
	_stPropertyValue = ""
	if SkiN=0 then
		skinThk = WALL_THICKNESS+SLAB_THICKNESS+ROOF_THICKNESS+SHELLBASE_THICKNESS
		matinx = SHELLBASE_BMAT+FILL_BMAT+SLAB_BMAT+WALL_BMAT+ROOF_BMAT
		isShow = 1
		_stPropertyValue = _stPropertyValue + "b["+str("%.0", matinx)+"]t["+str(ld, skinThk)+"]@"
	else
		for i=1 to SkiN
			matinx = 0
			skinThk = 0
			if GLOB_ELEM_TYPE=5 then 
				skinThk = WALL_SKINS_PARAMS [i][2]
				matinx = WALL_SKINS_PARAMS [i][18]
				isCore = WALL_SKINS_PARAMS [i][6]
				isFinish = WALL_SKINS_PARAMS [i][15]
			endif
			if GLOB_ELEM_TYPE=7 then 
				skinThk = SLAB_SKINS_PARAMS [i][2]
				matinx = SLAB_SKINS_PARAMS [i][18]
				isCore = SLAB_SKINS_PARAMS [i][6]
				isFinish = SLAB_SKINS_PARAMS [i][15]
			endif
			if GLOB_ELEM_TYPE=8 then
				skinThk = ROOF_SKINS_PARAMS [i][2]
				matinx = ROOF_SKINS_PARAMS [i][18]
				isCore = ROOF_SKINS_PARAMS [i][6]
				isFinish = ROOF_SKINS_PARAMS [i][15]
			endif
			if GLOB_ELEM_TYPE=18 then
				skinThk = SHELLBASE_SKINS_PARAMS [i][2]
				matinx = SHELLBASE_SKINS_PARAMS [i][18]
				isCore = SHELLBASE_SKINS_PARAMS [i][6]
				isFinish = SHELLBASE_SKINS_PARAMS [i][15]
			endif
			isShow = 0
			if abs(show_by_type) < EPS then isShow = 1
			if abs(show_by_type - 1) < EPS and abs(isFinish) < EPS then isShow = 1
			if abs(show_by_type - 2) < EPS and isCore > EPS then isShow = 1
			if abs(show_by_type - 3) < EPS and abs(isCore) - 3 < EPS then isShow = 1
			if isShow and matinx > EPS then _stPropertyValue = _stPropertyValue + "b["+str("%.0", matinx)+"]t["+str(ld, skinThk)+"]@"
		next i
	endif
endif

!!!============== Обработка данных от аддона =============================
if somestuff_read_type=2 then
	if somestuff_read then
		elemtxt = _stPropertyValue
		_stPropertyValue = ""
		for i=1 to vardim1(somestuff_out)-1
			if element[i] <> "Пусто" then
				if element[i] = "Родительский элемент" then
					_stPropertyValue = _stPropertyValue + elemtxt
				else
					inx = 0
					for j=1 to vardim1(somestuff_info)
						if element[i] = somestuff_info[j][1] then
							inx = j
							j=vardim1(somestuff_info)
						endif
					next j
					if inx>0 then _stPropertyValue = _stPropertyValue + somestuff_info[inx][2]
				endif
			endif
		next i
	endif
endif

if somestuff_read_type=1 then
	elemtxt = _stPropertyValue
	_stPropertyValue_ = "" : _stPropertyValue = ""
	if somestuff_prop_1 then
		if property_layer_name <> stringarr[LCODE][58] and strlen(somestuff_infostr_1)>0 then
			call "macro_get_param" parameters mgp_in_str="%"+somestuff_infostr_1+"%",
												mgp_prim1=par_prim1,
												mgp_prim2=par_prim2,
												mgp_prim3=par_prim3,
												mgp_prim4=par_prim4,
												mgp_prim5=par_prim5,
												mgp_qty=n_str_px*_LABEL_CUSTOM_ARROW,
												mgp_ld=ld, mgp_ignore_id=ignore_id, RETURNED_PARAMETERS mgp_out_str
			if strlen(mgp_out_str)>1 then
				_stPropertyValue = mgp_out_str	
			else
				_stPropertyID = somestuff_infostr_1 : gosub "getPropertyValue"	
			endif
		else
			_stPropertyID = somestuff_infostr_1 : gosub "getPropertyValue"	
		endif
		_stPropertyValue_ = _stPropertyValue_ + _stPropertyValue
	endif
	_stPropertyValue_ = _stPropertyValue_ + elemtxt
	if somestuff_prop_2 then
		if property_layer_name <> stringarr[LCODE][58] and strlen(somestuff_infostr_2)>0 then
			call "macro_get_param" parameters mgp_in_str="%"+somestuff_infostr_2+"%",
												mgp_prim1=par_prim1,
												mgp_prim2=par_prim2,
												mgp_prim3=par_prim3,
												mgp_prim4=par_prim4,
												mgp_prim5=par_prim5,
												mgp_qty=n_str_px*_LABEL_CUSTOM_ARROW,
												mgp_ld=ld, mgp_ignore_id=ignore_id, RETURNED_PARAMETERS mgp_out_str
			if strlen(mgp_out_str)>1 then
				_stPropertyValue = mgp_out_str	
			else
				_stPropertyID = somestuff_infostr_2 : gosub "getPropertyValue"	
			endif
		else
			_stPropertyID = somestuff_infostr_2 : gosub "getPropertyValue"	
		endif
		_stPropertyValue_ = _stPropertyValue_ + _stPropertyValue
	endif
	_stPropertyValue = _stPropertyValue_
endif
!!!========================================================================

if not(strlen(_stPropertyValue)>0 and _stPropertyValue<>" " and (STRSTR(_stPropertyValue, "m[")>0 or STRSTR(_stPropertyValue, "b[")>0) and STRSTR(_stPropertyValue, "]")>0) then
	if GLOB_ELEM_TYPE = 1 and param_name = tparam_name[SHOW_FLAG] then
		label_layers_out = ""
		nd1 = request("Assoclp_parvalue", "label_layers", namind1, type1, flag1, dim11, dim21, label_layers_out)
		if STRSTR(label_layers_out, "b[")>0 then
			_stPropertyValue = label_layers_out
		else
			nd1 = request("Assoclp_parvalue", "label_layers_out", namind1, type1, flag1, dim11, dim21, label_layers_out)
			if STRSTR(label_layers_out, "b[")>0 then
				_stPropertyValue = label_layers_out
			else
				nd1 = request("Assoclp_parvalue", "label_layers_in", namind1, type1, flag1, dim11, dim21, label_layers_out)
			endif
		endif
	endif
endif

if strlen(_stPropertyValue)>0 and _stPropertyValue<>" " and (STRSTR(_stPropertyValue, "m[")>0 or STRSTR(_stPropertyValue, "b[")>0) and STRSTR(_stPropertyValue, "]")>0 then
	onestring = ""	
	_onestring = ""
	char_start = ""
	char_end = ""
	string_delim = "@"
	n_sloi=0
	bmat_delim = "m["
	if STRSTR(_stPropertyValue, "b[")>0 then bmat_delim = "b["
	for i=1 to max_ins
		if STRSTR(_stPropertyValue, "m[")>0 or STRSTR(_stPropertyValue, "b[")>0 then
			if STRSTR(_stPropertyValue, string_delim)>0 then
				var = _stPropertyValue : char_start = "" : char_end = string_delim : gosub "get_substring" : onestring = var
			else
				onestring = _stPropertyValue
			endif
			_onestring = onestring
			var = onestring : char_start = bmat_delim : char_end = "]" : gosub "get_substring"
			material_txt = var
			in_str = onestring : find_str = char_start+var+char_end : replace_str = "" : gosub "str_replace" : onestring = out_str
			var = onestring : char_start = "t[" : char_end = "]" : gosub "get_substring"
			gosub "tonum"
			th = 0 : if rez>EPS then th = var_num/1000
			_stPropertyValue = STRSUB(_stPropertyValue,strlen(_onestring)+2, strlen(_stPropertyValue))
			if STRLEN(material_txt)>0 then
				property = 1
				vin = 0
				n_sloi=n_sloi+1
				strih[n_sloi] = -1
				bmatm[n_sloi] = material_txt
				bmatinx[n_sloi] = 0
				if bmat_delim = "b[" then
					var = material_txt : gosub "tonum"
					if rez*var_num>EPS then bmatinx[n_sloi] = var_num
				endif
				tolsh[n_sloi] = th
			endif
		else
			i = max_ins
		endif
	next i
endif
!!>---------------- Вытаскиваем данные из свойств -----------

!<---------------- Выноска с параметрами -----------------------
if param_name = tparam_name[SHOW_STRUCT] or param_name = tparam_name[SHOW_PARAM] or param_name = tparam_name[SHOW_BYMVO] then
	334:
	if param_name = tparam_name[SHOW_STRUCT] then
		if inxpar<=vardim1(param_otobr) then
			par_fist_str=param_otobr[inxpar][2]
			par_sec_str=param_otobr[inxpar][3]
		else
			goto 335
		endif
	endif
	if param_name = tparam_name[SHOW_BYMVO] then
		if inxpar<=vardim1(param_otobr) then
			par_fist_str=param_otobr[inxpar][2]
			par_sec_str=param_otobr[inxpar][3]
		else
			goto 335
		endif
	endif
	nd1 = request("Assoclp_parvalue", "param_name_out", namindd1, typed1, flagd1, dim1d1, dim2d1, param_name_out)
	nd1 = request("Assoclp_parvalue", "param_temp_out", namindd1, typed1, flagd1, dim1d1, dim2d1, param_temp_out)
	dim par_str_arr_t[] : i=0
	i=i+1 : par_str_arr_t[i]="%qty_v%"
	i=i+1 : par_str_arr_t[i]="%id%"
	i=i+1 : par_str_arr_t[i]="%m_id%"
	i=i+1 : par_str_arr_t[i]="%f_id%"
	for j=1 to vardim1(param_temp_out)
		i=i+1
		par_str_arr_t[i]=param_temp_out[j]
	next j
	if strstr(param_name_out[1],"!!Профиль",0)>0 and strstr(param_name_out[1],"Лист",0)=0 then
		nd1 = request("Assoclp_parvalue", "name_prof_i", namindd1, typed1, flagd1, dim1d1, dim2d1, name_prof_i)
	else
		pr1 = strstr(name,"Двутавр") <> 0
		pr2 = strstr(name,"Квадратнопрямоуг") <> 0
		pr3 = strstr(name,"Круглая труба") <> 0
		pr4 = strstr(name,"Ручник") <> 0
		pr5 = strstr(name,"голок") <> 0
		pr6 = strstr(name,"Швеллер") <> 0
		prof = pr1 + pr2 + pr3 + pr4 + pr5 + pr6
	endif
	txt_vin = ""
	par_str_arr = par_str_arr_t
	mgp_out_str = ""
	if GLOB_ELEM_TYPE<>0 then
		call "macro_get_param" parameters mgp_in_str=par_fist_str,
											mgp_prim1=par_prim1,
											mgp_prim2=par_prim2,
											mgp_prim3=par_prim3,
											mgp_prim4=par_prim4,
											mgp_prim5=par_prim5,
											mgp_qty=n_str_px*_LABEL_CUSTOM_ARROW,
											mgp_ld=ld, mgp_ignore_id=ignore_id, RETURNED_PARAMETERS mgp_out_str
	else
		mgp_out_str = par_fist_str
	endif
	txt_vin = mgp_out_str
	mgp_out_str = ""
	if GLOB_ELEM_TYPE<>0 then
		call "macro_get_param" parameters mgp_in_str=par_sec_str,
											mgp_prim1=par_prim1,
											mgp_prim2=par_prim2,
											mgp_prim3=par_prim3,
											mgp_prim4=par_prim4,
											mgp_prim5=par_prim5,
											mgp_qty=n_str_px*_LABEL_CUSTOM_ARROW,
											mgp_ld=ld, mgp_ignore_id=ignore_id, RETURNED_PARAMETERS mgp_out_str
	else
		mgp_out_str = par_sec_str
	endif
	second_str = mgp_out_str
	if vartype(txt_vin)=1 then txt_vin=""
	if vartype(second_str)=1 then second_str=""
	if inxpar=1 or vin=0 then
		par_fist_str_out = txt_vin
		par_sec_str_out = second_str 
		vin = 1
	endif
endif
!>---------------- Выноска с параметрами -----------------------


!<---------- Выноска с составом конструкций --------------------
dim kol_vo_str[]
if vin = 0 then
	SkiN=(WALL_SKINS_NUMBER*(GLOB_ELEM_TYPE=5)+\
	SLAB_SKINS_NUMBER*(GLOB_ELEM_TYPE=7)+\
	ROOF_SKINS_NUMBER*(GLOB_ELEM_TYPE=8)+(n_sloi+1)*(pol=1)+(GLOB_ELEM_TYPE=18)*SHELLBASE_SKINS_NUMBER)*(property=0) + (n_sloi)*(property=1)
else
	SkiN=0
endif

if str_format_from_mvo and param_name = tparam_name[SHOW_FLAG] then
	str_format_ = ""
	n = LIBRARYGLOBAL ("Libraryflobals-as", "str_format", str_format_)
	if n>0 and strlen(str_format_)>0 then str_format = str_format_
endif

if GLOB_ELEM_TYPE=0 then min_lay_thk = -1
if GLOB_ELEM_TYPE=0 and SkiN=0 then SkiN=-1
if not(vin) then
	if param_name = tparam_name[SHOW_FLAG] and ((GLOB_ELEM_TYPE=5)+(GLOB_ELEM_TYPE=7)+(GLOB_ELEM_TYPE=8)+(GLOB_ELEM_TYPE=18))>EPS then
		dict compPropInput
		DIM parentComponentProperties[]
		n = REQUEST ("Component_Properties_Of_Parent", "", parentComponentProperties)
		n = 0
		DIM props[]
		for i=1 to vardim1(parentComponentProperties) step 4
			gname = parentComponentProperties[i+2]
			name = parentComponentProperties[i+3]
			full_name = gname + "/" + name
			if strstr(str_format, "%" + full_name + "%")>EPS then
				n = n + 1
				compPropInput.propertyIds[n].id = parentComponentProperties[i]
				props[n] = full_name
			else
				if strstr(str_format, "%" + name + "%")>EPS and strlen(gname)>EPS then
					n = n + 1
					compPropInput.propertyIds[n].id = parentComponentProperties[i]
					props[n] = name
				endif
			endif
		next i
		if n > EPS then
			dict collectComponents : collectComponents.collectMode = 2 : dict outputCompIds
			n = REQUEST ("Component_IDs_Of_Parent", collectComponents, outputCompIds)
			for i=1 to SkiN_n
				if haskey(outputCompIds.componentIds[i].id) then
					if GLOB_ELEM_TYPE=5 then matinx = WALL_SKINS_PARAMS [i][18]
					if GLOB_ELEM_TYPE=7 then matinx = SLAB_SKINS_PARAMS [i][18]
					if GLOB_ELEM_TYPE=8 then matinx = ROOF_SKINS_PARAMS [i][18]
					if GLOB_ELEM_TYPE=18 then matinx = SHELLBASE_SKINS_PARAMS [i][18]
					dict compPropVals
     				compPropInput.componentId.id = outputCompIds.componentIds[i].id
					n = REQUEST ("Component_Property_Values_Of_Parent", compPropInput, compPropVals)
					property_by_inx.mat[i].inx = matinx
					for j=1 to vardim1(compPropVals.propertyValues)
						if j<=vardim1(props) then
							property_by_inx.mat[i].prop[j].name = props[j]
							if abs(compPropVals.propertyValues[j].value_status - 1)>EPS then
								property_by_inx.mat[i].prop[j].val = ""
							else
								_typeValue = compPropVals.propertyValues[j].type
								_value = 0
								for m = 1 to vardim1(compPropVals.propertyValues[j].value)
									_value = compPropVals.propertyValues[j].value[m]
									flag_empty=0
									if vartype(_value)=1 and _typeValue <> 1 then
										_value_num = _value
										if abs(_value)<EPS then
											flag_empty=1
										else
											if _typeValue = 2 then _value = str("%.0", _value)
											if _typeValue = 3 then _value = str("%.2", _value)
											if _typeValue = 5 then _value = str("%.3", _value)
											if _typeValue = 6 then _value = str("%.2", _value)
											if _typeValue = 7 then _value = str("%.2", _value)
										endif
									endif
									if _typeValue = 1 then
										if propOutputVals.propertyValues[j].value[m]>EPS then
											_value = stringarr[LCODE][80]
										else
											_value = stringarr[LCODE][1]
										endif
									endif
									if vartype(_value)=2 then
										if strlen(_value)=0 or _value=" " then
											flag_empty=1
										endif
									endif
									if not(flag_empty) then
										if m > 1 then
											property_by_inx.mat[i].prop[j].val = property_by_inx.mat[i].prop[j].val + "; " + _value
										else
											property_by_inx.mat[i].prop[j].val = _value
										endif
									else
										property_by_inx.mat[i].prop[j].val = ""
									endif
								next m
							endif
						endif
					next j
				endif
			next i
		endif
	endif

	if strlen(add_param)>EPS and add_param<>stringarr[LCODE][1] and GLOB_ELEM_TYPE<>0 then
		out_str = ""
		for kkk=1 to vardim1(out_var)
			if strstr(add_param, out_var_temp[kkk])>0 then
				in_str = add_param : find_str = out_var_temp[kkk] : replace_str = out_var_n[kkk] : gosub "str_replace" : add_param = out_str
			endif
		next kkk
		if vartype(add_param)=2 then
			if STRSTR(add_param, "%")>0 then
				call "macro_get_param" parameters mgp_in_str=add_param,
													mgp_prim1=par_prim1,
													mgp_prim2=par_prim2,
													mgp_prim3=par_prim3,
													mgp_prim4=par_prim4,
													mgp_prim5=par_prim5,
													mgp_qty=n_str_px*_LABEL_CUSTOM_ARROW,
													mgp_ld=ld, mgp_ignore_id=ignore_id, RETURNED_PARAMETERS mgp_out_str
				add_param = mgp_out_str
			endif
		endif
	else
		add_param = ""
	endif
	flag_ins_aft=0
	flag_ins_bef=0
	dim ch_row[][] : n_cha = 0 : n_chd = 0
	for mm=1 to max_ins
		if i_ins_after[mm]>(SkiN+(SkiN<=0)) then flag_ins_aft=flag_ins_aft+1
		if i_ins_after[mm]<0 then flag_ins_bef=flag_ins_bef+1
		if STRSTR(txt_ins_after[mm][1], "-*")<2 and STRSTR(txt_ins_after[mm][1], "-*")>0 and i_ins_after[mm]<>0 then 
			n_chd = n_chd + 1
			ch_row[n_chd][1]=i_ins_after[mm]
		endif
		if STRSTR(txt_ins_after[mm][1], "+*")<2 and STRSTR(txt_ins_after[mm][1], "+*")>0 and i_ins_after[mm]<>0 then 
			n_cha = n_cha + 1
			ch_row[n_cha][2]=i_ins_after[mm]
		endif
	next mm
	if flag_ins_aft>0 or flag_ins_bef>0 then
		dim arr_sort[]
		arr_sort = i_ins_after : gosub "array_num_sorty"
		for mm=1 to max_ins
			if i_ins_after[mm]<0 or i_ins_after[mm]>(SkiN+(SkiN<=0)) then
				inx_sort = 0
				for kk=1 to max_ins
					if arr_sort[kk] = i_ins_after[mm] then
						inx_sort = kk
						kk = max_ins
					endif
				next kk
				if i_ins_after[mm]<0 then
					i_ins_after[mm] = -inx_sort
				else
					if i_ins_after[mm]>(SkiN+(SkiN<=0)) then
						i_ins_after[mm] = SkiN+(SkiN<=0)+inx_sort
					endif
				endif
			endif
		next mm
	endif
	if flag_ins_aft>0 then
		tinx = SkiN+(SkiN<=0)
		for mm=1 to max_ins
			if i_ins_after[mm]>(SkiN+flag_ins_bef+(SkiN<=0)) then
				tinx = tinx + 1
				i_ins_after[mm] = tinx
			endif
		next mm
	endif
	SkinBegin = 1
	SkinFinish = SkiN+flag_ins_aft+flag_ins_bef+(SkiN<=0)
	St=1
	n_rec = 0
	dob_th=0
	old_string = "" : old_thk = 0 : old_thktxt = "" : thk_unit = ""
	!!! - Отключение нумерации для одного слоя
	if abs(SkinBegin - SkinFinish)<EPS then isnum = "Откл"
	for i = SkinBegin to SkinFinish step St
		isShow = -1
		if i>flag_ins_bef and i<=(SkiN+flag_ins_bef+(SkiN<=0)) then
			mun_txt=0
			dob_th = 0
			dob_txt = ""
			matName = "-"
			fill_from_mat = 0
			flag_ch = 0
			matinx = 0
			isFinish = 1
			isCore = 3
			if SkiN=0 then
				SkinPar=WALL_FILL*(GLOB_ELEM_TYPE=5)+SLAB_FILL*(GLOB_ELEM_TYPE=7)+\
						ROOF_FILL*(GLOB_ELEM_TYPE=8)+(GLOB_ELEM_TYPE=18)*SHELLBASE_FILL+(GLOB_ELEM_TYPE=9)*FILL_FILL
				skinThk =WALL_THICKNESS+SLAB_THICKNESS+ROOF_THICKNESS+SHELLBASE_THICKNESS
				matName = SHELLBASE_BMAT_NAME+FILL_BMAT_NAME+SLAB_BMAT_NAME+WALL_BMAT_NAME+ROOF_BMAT_NAME+bmatm[1]
				matinx = SHELLBASE_BMAT+FILL_BMAT+SLAB_BMAT+WALL_BMAT+ROOF_BMAT+bmatinx[1]
				isShow = 1
				if property=1 then
					skinThk = tolsh[1]
					if bmatinx[1]>EPS then
						matName_ = ""
						n = request("Name_of_building_material", bmatinx[1], matName_)
						if strlen(matName_)>0 then
							fill_from_mat = 1
							matName = matName_
							n = REQUEST{2}("Building_Material_info", matName, "gs_bmat_cutFill_properties", bmat_Fill_prop)
							SkinPar = bmat_Fill_prop 
						endif
					endif
				endif
			else
				if property=1 and flag_ch = 0 then
					SkinPar = strih[i-flag_ins_bef]
					skinThk = tolsh[i-flag_ins_bef]
					matName = bmatm[i-flag_ins_bef]
					matinx = bmatinx[i-flag_ins_bef]
					if bmatinx[i-flag_ins_bef]>EPS then
						matName_ = ""
						n = request("Name_of_building_material", bmatinx[i-flag_ins_bef], matName_)
						if strlen(matName_)>0 then
							fill_from_mat = 1
							matName = matName_
							n = REQUEST{2}("Building_Material_info", matName, "gs_bmat_cutFill_properties", bmat_Fill_prop)
							SkinPar = bmat_Fill_prop 
						endif
					endif
					isShow = 1
					flag_ch = 1
				endif
				if GLOB_ELEM_TYPE=1 and pol=1 and flag_ch = 0 then
					SkinPar = strih[i-flag_ins_bef]
					skinThk = tolsh[i-flag_ins_bef]
					if tolsh_min[i-flag_ins_bef]>0 then
						dob_th = min(tolsh[i-flag_ins_bef],tolsh_min[i-flag_ins_bef])
						skinThk = max(tolsh[i-flag_ins_bef],tolsh_min[i-flag_ins_bef])
					endif
					flag_ch = 1
				endif
				if GLOB_ELEM_TYPE=5 and flag_ch = 0 then 
					SkinPar = WALL_SKINS_PARAMS [i-flag_ins_bef][1]
					skinThk = WALL_SKINS_PARAMS [i-flag_ins_bef][2]
					matName = WALL_SKINS_BMAT_NAMES [i-flag_ins_bef][1]
					matinx = WALL_SKINS_PARAMS [i-flag_ins_bef][18]
					isCore = WALL_SKINS_PARAMS [i-flag_ins_bef][6]
					isFinish = WALL_SKINS_PARAMS [i-flag_ins_bef][15]
				endif
				if GLOB_ELEM_TYPE=7 and flag_ch = 0 then 
					SkinPar = SLAB_SKINS_PARAMS [i-flag_ins_bef][1]
					skinThk = SLAB_SKINS_PARAMS [i-flag_ins_bef][2]
					matName = SLAB_SKINS_BMAT_NAMES [i-flag_ins_bef][1]
					matinx = SLAB_SKINS_PARAMS [i-flag_ins_bef][18]
					isCore = SLAB_SKINS_PARAMS [i-flag_ins_bef][6]
					isFinish = SLAB_SKINS_PARAMS [i-flag_ins_bef][15]
				endif
				if GLOB_ELEM_TYPE=8 and flag_ch = 0 then
					SkinPar = ROOF_SKINS_PARAMS [i-flag_ins_bef][1]
					skinThk = ROOF_SKINS_PARAMS [i-flag_ins_bef][2]
					matName = ROOF_SKINS_BMAT_NAMES [i-flag_ins_bef][1]
					matinx = ROOF_SKINS_PARAMS [i-flag_ins_bef][18]
					isCore = ROOF_SKINS_PARAMS [i-flag_ins_bef][6]
					isFinish = ROOF_SKINS_PARAMS [i-flag_ins_bef][15]
				endif
				if GLOB_ELEM_TYPE=18 and flag_ch = 0 then
					SkinPar = SHELLBASE_SKINS_PARAMS [i-flag_ins_bef][1]
					skinThk = SHELLBASE_SKINS_PARAMS [i-flag_ins_bef][2]
					matName = SHELLBASE_SKINS_BMAT_NAMES [i-flag_ins_bef][1]
					isCore = SHELLBASE_SKINS_PARAMS [i-flag_ins_bef][6]
					isFinish = SHELLBASE_SKINS_PARAMS [i-flag_ins_bef][15]
					matinx = SHELLBASE_SKINS_PARAMS [i-flag_ins_bef][18]
				endif
				isShow = 0
				if show_by_type < EPS then isShow = 1
				if abs(show_by_type) - 1 < EPS and isFinish < EPS then isShow = 1
				if abs(show_by_type) - 2 < EPS and isCore > EPS then isShow = 1
				if abs(show_by_type) - 3 < EPS and abs(isCore - 3) < EPS then isShow = 1
			endif
			total_thk = total_thk + skinThk
			bmat_id="" : bmat_surf="" : bmat_desc="" : bmat_man="" : bmat_Fill="" : mat_Fill="" : skin_Fill="" : dens = 0
			n = REQUEST{2}("Building_Material_info", matinx, "gs_bmat_id", bmat_id)
			n = REQUEST{2}("Building_Material_info", matinx, "gs_bmat_surface", bmat_surf)
			n = REQUEST{2}("Building_Material_info", matinx, "gs_bmat_description", bmat_desc)			
			n = REQUEST{2}("Building_Material_info", matinx, "gs_bmat_manufacturer", bmat_man)
			n = REQUEST{2}("Building_Material_info", matinx, "gs_bmat_cutFill_properties", bmat_Fill_prop)
			n = REQUEST{2}("Building_Material_info", matinx, "gs_bmat_physical_properties", thCond, dens, htCap, embodiedEnergy, embodiedCarbon)
			if vartype(bmat_surf)=1 then 
				n = REQUEST{2} ("Material_info", bmat_surf, "gs_mat_fill_ind", mat_fill_ind)
				n = request("Name_of_fill", mat_fill_ind, mat_Fill)
				n = request("Name_of_fill", bmat_Fill_prop, bmat_Fill)
			endif
			if SkinPar>EPS then
				Pos = request("Name_of_fill", SkinPar, skin_Fill)
			else
				skin_Fill = matName
			endif
			out_var_n[1] = bmat_id 
			out_var_n[2] = bmat_surf 
			out_var_n[3] = bmat_desc 
			out_var_n[4] = bmat_man
			out_var_n[5] = matName
			out_var_n[6] = str("%.1",dens)+" кг/м³"
			if LCODE = 2 then out_var_n[6] = str("%.1",dens)+" kg/m³"
			out_var_n[7] = bmat_Fill
			out_var_n[8] = mat_Fill
			out_var_n[9] = skin_Fill
			n_str = i-flag_ins_bef
		else
			mun_txt=1
			for kkk=1 to 9
				out_var_n[kkk]=""
			next kkk
			if i<=flag_ins_bef then
				n_str = -i
			endif
			if i>(SkiN+flag_ins_bef+(SkiN<=0)) then
				n_str = i-flag_ins_bef
			endif
		endif
		if n_cha>0 then
			flag_zap=0
			for mm=1 to n_cha
				if ch_row[mm][2]=n_str then 
					flag_zap=1
					mm=n_cha
				endif
			next mm
		else
			flag_zap=1
			for mm=1 to n_chd
				if ch_row[mm][1]=n_str then 
					flag_zap=0
					mm=n_chd
				endif
			next mm
		endif

		if isShow<EPS then goto 22
		if ((not(flag_zap) or (skinThk*1000-min_lay_thk)<EPS)) and not(mun_txt) then 
			goto 22
		else
			n_rec = n_rec+1
		endif
		flag_ins=0
		for mm=1 to max_ins
			if n_str=i_ins_after[mm] and i_ins_after[mm]<>0 then
				flag_ins=mm
				mm = max_ins
			endif
		next mm
		if flag_ins>0 then
			out_var_n[12] = txt_ins_after[flag_ins][1]
			if use_fil[flag_ins] then
				n = request("Name_of_fill", fil_ins_after[flag_ins], skin_Fill)
				out_var_n[9] = skin_Fill
				out_var_n[7] = skin_Fill
				out_var_n[8] = skin_Fill
			endif
			if use_bmat[flag_ins] then
				n = request("Name_of_building_material", bmat_ins_after[flag_ins], matName)
				matinx = bmat_ins_after[flag_ins]
				bmat_id="" : bmat_surf="" : bmat_desc="" : bmat_man="" : bmat_Fill="" : mat_Fill="" : skin_Fill="" : dens = 0
				n = REQUEST{2}("Building_Material_info", matinx, "gs_bmat_id", bmat_id)
				n = REQUEST{2}("Building_Material_info", matinx, "gs_bmat_surface", bmat_surf)
				n = REQUEST{2}("Building_Material_info", matinx, "gs_bmat_description", bmat_desc)			
				n = REQUEST{2}("Building_Material_info", matinx, "gs_bmat_manufacturer", bmat_man)
				n = REQUEST{2}("Building_Material_info", matinx, "gs_bmat_cutFill_properties", bmat_Fill_prop)
				n = REQUEST{2}("Building_Material_info", matinx, "gs_bmat_physical_properties", thCond, dens, htCap, embodiedEnergy, embodiedCarbon)
				if vartype(bmat_surf)=1 then 
					n = REQUEST{2} ("Material_info", bmat_surf, "gs_mat_fill_ind", mat_fill_ind)
					n = request("Name_of_fill", mat_fill_ind, mat_Fill)
					n = request("Name_of_fill", bmat_Fill_prop, bmat_Fill)
				endif
				n = REQUEST{2}("Building_Material_info", matName, "gs_bmat_cutFill_properties", bmat_Fill_prop)
				Pos = request("Name_of_fill", bmat_Fill_prop , skin_Fill)
				out_var_n[1] = bmat_id 
				out_var_n[2] = bmat_surf 
				out_var_n[3] = bmat_desc 
				out_var_n[4] = bmat_man
				out_var_n[5] = matName
				out_var_n[6] = str("%.1",dens)+" кг/м³"
				if LCODE = 2 then out_var_n[6] = str("%.1",dens)+" kg/m³"
				out_var_n[7] = bmat_Fill
				out_var_n[8] = mat_Fill
				out_var_n[9] = skin_Fill
			endif
		else
			out_var_n[12] = ""
		endif
		out_var_n[18] = out_var_n[3] : out_var_n[27] = out_var_n[3] 
		out_var_n[17] = out_var_n[5] : out_var_n[26] = out_var_n[5]
		out_var_n[22] = out_var_n[10] : out_var_n[23] = out_var_n[10] : out_var_n[23] = out_var_n[10]  : out_var_n[24] = out_var_n[10]
		out_var_n[19] = out_var_n[4] : out_var_n[29] = out_var_n[4]
		out_var_n[20] = out_var_n[6] : out_var_n[28] = out_var_n[6]
		out_var_n[21] = out_var_n[9]

		skinThktxtarr[n_rec]=""
		out_var_n[10] = " "
		out_var_n[11] = "**n**"
		par_fist_str_t = str_format
		if flag_ins>0 then
			if STRSTR(str_format, "%dtxt%")>0 and STRSTR(txt_ins_after[flag_ins][1], "*")=1 then 
				par_fist_str_t = STRSUB (txt_ins_after[flag_ins][1], 2, STRLEN (txt_ins_after[flag_ins][1])-1)
			endif
			if mun_txt then 
				par_fist_str_t = "%dtxt%"
				if STRSTR(isnum,stringarr[LCODE][53])=0 and STRSTR(txt_ins_after[flag_ins][1],"%n%")=0 then par_fist_str_t = isnum + " " + par_fist_str_t
			endif
		endif
		if STRSTR(isnum,stringarr[LCODE][53])=0 and STRSTR(par_fist_str_t,"%n%")=0 then par_fist_str_t = isnum + " " + par_fist_str_t
		npr = 0

		property_by_inx_flag = 0
		if haskey(property_by_inx.mat) then
			for kkk=1 to vardim1(property_by_inx.mat)
				if haskey(property_by_inx.mat[kkk]) then
					if property_by_inx.mat[kkk].inx = matinx then
						property_by_inx_flag = kkk
						kkk = vardim1(property_by_inx.mat)
					endif
				endif
			next kkk
		endif
		if property_by_inx_flag>0 then
			if haskey(property_by_inx.mat[property_by_inx_flag]) then
				for kkk=1 to vardim1(property_by_inx.mat[property_by_inx_flag].prop)
					name = "%"+property_by_inx.mat[property_by_inx_flag].prop[kkk].name+"%"
					if strstr(par_fist_str_t, name) then
						var_param = property_by_inx.mat[property_by_inx_flag].prop[kkk].val
						in_str = par_fist_str_t : find_str = name : replace_str = var_param : gosub "str_replace" : par_fist_str_t = out_str
					endif
				next kkk
			endif
		endif
		43:
		n_sh = STRSTR(par_fist_str_t, "%", 1)
		if n_sh>0 then
			in_str = par_fist_str_t : gosub "get_param_name"
			var_param = ""
			if STRLEN(param_name_str)>0 then
				for kkk=1 to vardim1(out_var)
					if STRTOLOWER(out_var[kkk][1])=STRTOLOWER(param_name_str) then
						var_param = out_var_n[kkk]
						kkk=vardim1(out_var)
					endif
				next kkk
				is_thk = STRSTR(STRTOLOWER(param_name_str),"th")=1 or STRSTR(STRTOLOWER(param_name_str),"толщина")=1 or STRSTR(STRTOLOWER(param_name_str),"layer_thickness")=1
				if is_thk then
					var_param = skinThk
					if mun_txt then var_param = 0
				endif
				if vartype(var_param)=1 then
					if STRLEN(unit_name_str) then
						unstr = "%" + unit_name_str
					else
						unstr = ld
					endif
					if is_thk then
						thk_unit = unstr
						tThk = var_param
						gosub "get_thk_txt"
						var_param = tskinThktxt
						if dob_th>0 then
							skinThk = dob_th
							gosub "get_thk_txt"
							if STRLEN(tskinThktxt)>0 then var_param = tskinThktxt + "..." + var_param
						endif
					else
						var_param = str(unstr, var_param) + Unit
					endif
					if STRLEN(var_param)>0 then var_param = var_param + Unit
					param_name_str = param_name_str + unit_name_str
				endif
				find_str = "%" + param_name_str + "%"
				if is_thk then
					if flag_ins>0 then 
						if STRSTR(txt_ins_after[flag_ins][2], "*")=1 then
							var_param=STRSUB (txt_ins_after[flag_ins][2], 2, STRLEN (txt_ins_after[flag_ins][2]))
						else
							var_param=txt_ins_after[flag_ins][2]+var_param
						endif
					endif
					if STRLEN(var_param)>0 and var_param<>" " then
						skinThktxtarr[n_rec]=thk_prefix+var_param+thk_suffix
					endif
					replace_str = ""
				else
					replace_str = var_param
				endif
				gosub "str_replace"
				par_fist_str_t = out_str
				npr = npr + 1
				if npr<30 then goto 43
			endif
		endif
		if vartype(par_fist_str_t)=2 then
			string = par_fist_str_t
		else
			string = "!!"
		endif
		var = string : gosub "trim_space_end" : string = var
		if old_string = string and abs(old_thk - skinThk)<EPS and old_thktxt = skinThktxtarr[n_rec] then flag_zap = 0
		if not(flag_zap) and merge_eq<>"Не объединять" and n_rec>1 then
			n_rec = n_rec-1
			n_eq=n_eq+1
			old_thk_all = old_thk_all + skinThk
			if not(thk_alg) then
				in_str = str_txt[n_rec][inxpar] : find_str = skinThktxtarr[n_rec] : replace_str = "" : gosub "str_replace" : str_txt[n_rec][inxpar] = out_str
			endif
			out_str="" : find_str = "%ns%" : in_str = merge_eq : replace_str = STR("%.0",n_eq) : gosub "str_replace"
			unstr = thk_unit
			tThk = old_thk_all
			!!!Показывать толщину, только если толщина ОДНОГО слоя больше
			if (skinThk*1000-min_thk)>EPS then gosub "get_thk_txt"
			!!!Показывать толщину, только если толщина СУММЫ слоёв больше
			!!gosub "get_thk_txt"
			var_param = tskinThktxt+Unit
			if flag_ins>0 then 
				if STRSTR(txt_ins_after[flag_ins][2], "*")=1 then
					var_param=STRSUB (txt_ins_after[flag_ins][2], 2, STRLEN (txt_ins_after[flag_ins][2]))
				else
					var_param=txt_ins_after[flag_ins][2]+var_param
				endif
			endif
			str_txt[n_rec][inxpar] = string + out_str
			if STRLEN(tskinThktxt)>0 and tskinThktxt<>" " then
				skinThktxtarr[n_rec]=thk_prefix+var_param+thk_suffix
				str_txt[n_rec][inxpar] = string + out_str
			else
				str_txt[n_rec][inxpar] = string + out_str + str_suffix
			endif
			goto 22
		else
			old_string = string
			old_thk = skinThk
			old_thk_all = skinThk
			old_thktxt = skinThktxtarr[n_rec]
			n_eq=1
		endif
		if skinThktxtarr[n_rec]="" then string = string + str_suffix
		str_txt[n_rec][inxpar] = string
		22:
	next i
else
	n_rec=1+1*(strlen(second_str)>0)
	str_txt[1][inxpar] = txt_vin
	str_txt[2][inxpar] = second_str
endif

if inxpar=1 then StrMax=0
for i = 1 to n_rec
	if not(vin) then
		if chnum then
			n_str = n_rec + 1 - i + numstart - 1
		else
			n_str = i + numstart - 1
		endif
		in_str = str_txt[i][inxpar] : find_str = "**n**" : replace_str = STR("%.0",n_str) : gosub "str_replace" : str_txt[i][inxpar] = out_str
		in_str = str_txt[i][inxpar] : find_str = "-*" : replace_str = "" : gosub "str_replace" : str_txt[i][inxpar] = out_str
		in_str = str_txt[i][inxpar] : find_str = "+*" : replace_str = "" : gosub "str_replace" : str_txt[i][inxpar] = out_str
		if thk_alg then
			in_str = skinThktxtarr[i]
		 	find_str = "." : replace_str = "" : gosub "str_replace"
			in_str = out_str : find_str = "," : replace_str = "" : gosub "str_replace"
			nspace = ""
			for k=1 to strlen(out_str)
				nspace = nspace + "@"
			next k
			str_txt[i][inxpar] = str_txt[i][inxpar] + nspace
		else
			str_txt[i][inxpar] = str_txt[i][inxpar] + skinThktxtarr[i]
			skinThktxtarr[i] = ""
		endif
	endif
	if vartype(str_txt[i][inxpar])=2 then
		if STRSTR (str_txt[i][inxpar], "\n") > 0 then
			one = STRSUB (str_txt[i][inxpar], 1, STRSTR (string, "\n")-1)
			two = STRSUB (str_txt[i][inxpar], strlen(one)+3, STRLEN (str_txt[i][inxpar]) - STRSTR (str_txt[i][inxpar], "\n"))
			str_txt[i][inxpar] = one +" "+ two
		endif
		StrMax = max(StrMax,stw(str_txt[i][inxpar])/1000*GLOB_SCALE)
	endif
	kol_vo_str[i] = 1
next i

if param_name = tparam_name[SHOW_STRUCT] and inxpar<vardim1(param_otobr) then
	inxpar=inxpar+1
	goto 334
endif

if param_name = tparam_name[SHOW_BYMVO] and inxpar<vardim1(param_otobr) then
	inxpar=inxpar+1
	goto 334
endif

335:

if abs(PosA)<EPS Then
	if LABEL_POSITION [2][1]>0 THEN PosA =-StrMax 
	if LABEL_POSITION [2][1]<0 THEN PosA =StrMax
endif

If bo then
	SkinBegin = 1
	SkinFinish = n_rec
	St=1
else
	SkinBegin = n_rec
	SkinFinish = 1
	St=-1
endif

PAPER_TO_MODEL = GLOB_SCALE / 1000
define style  "textstyle"  _LABEL_FONT_NAME, _LABEL_TEXT_SIZE, anchor, _LABEL_FONT_STYLE
rrt1 = "textstyle"
SET STYLE rrt1
rrr = request("Height_of_style",rrt1, txt_hgt)
text_hgt = (txt_hgt*PAPER_TO_MODEL)
StrMax=0 : StrMaxLen = 0
for i = 1 to n_rec
	StrMax = max(StrMax,stw(str_txt[i][1])*PAPER_TO_MODEL)
	StrMaxLen = max(StrMaxLen,strlen(str_txt[i][1]))
next i

sss=request("Height_of_style", rrt1, height, descent, leading)
dx = -(height*AC_TextLeading_1/2-descent-leading-_LABEL_TEXT_SIZE*AC_TextLeading_1/2)*PAPER_TO_MODEL
text_hgt = text_hgt*AC_TextLeading_1+abs(dx)*2
if AC_TextLeading_1<1 then dx = -leading*AC_TextLeading_1

define style  "textstyle_add"  _LABEL_FONT_NAME, Shrift_add_param_size, anchor, Shrift_add_param
rrr = request("Height_of_style","textstyle_add", text_hgt_add)
text_hgt_add = text_hgt_add*PAPER_TO_MODEL
sss=request("Height_of_style", "textstyle_add", height_add, descent_add, leading_add)
dx_add= -(height_add*AC_TextLeading_1/2-descent_add-leading_add-Shrift_add_param_size*AC_TextLeading_1/2)*PAPER_TO_MODEL
text_hgt_add = text_hgt_add*AC_TextLeading_1+abs(dx_add)*2
if AC_TextLeading_1<1 then dx_add = -leading_add*AC_TextLeading_1

if StrMaxLen<EPS then end
!Автоматическое размещение выноски для различных видов
if GLOB_VIEW_TYPE=2 then type_view = 0
dim label_posxy[2]
dim label_posxyz[3]
dim label_posang[2]
label_posxyz[1] = 0: label_posang[1] = 0 : label_posset = 0 : label_posset_prop = 0

!if use_prop then
!	_stPropertyID = prop_pos_x : gosub "getPropertyValue" : label_posxy[1] = _value_num
!	_stPropertyID = prop_pos_y : gosub "getPropertyValue"	 : label_posxy[2] = _value_num
!	_stPropertyID = prop_pos_ang : gosub "getPropertyValue" : ang_rot = _value_num
!	label_posset_prop = 1
!endif

if use_pos and label_posset_prop=0 then
	nd2 = request("Assoclp_parvalue", "label_posset", namindd1, typed1, flagd1, dim1d1, dim2d1, label_posset)
	if label_posset then
		nd1 = request("Assoclp_parvalue", "label_posxyz", namindd1, typed1, flagd1, dim1d1, dim2d1, label_posxyz)
		nd2 = request("Assoclp_parvalue", "label_posang", namindd1, typed1, flagd1, dim1d1, dim2d1, label_posang)
		if type_view = 0 then
			label_posxy[1] = label_posxyz[1]
			label_posxy[2] = label_posxyz[2]
			if parall then ang_rot = label_posang[1]
		endif
		if type_view = 1 then
			label_posxy[1] = label_posxyz[1]
			label_posxy[2] = label_posxyz[3]
			if parall then ang_rot = label_posang[2]
		endif	
		if type_view = 2 then
			label_posxy[1] = label_posxyz[2]
			label_posxy[2] = label_posxyz[3]
			if parall then ang_rot = label_posang[2]
		endif
	endif
else
	if label_posset_prop=0 then
		parall = 0
		chent = 0
	endif
endif

!Читаемость выноски
sgnp = 1 : if SYMB_MIRRORED then sgnp = -1
_totalRotate_ = (SYMB_ROTANGLE*sgnp+label_posang[1]+180*SYMB_MIRRORED) mod 360
r = request ("View_Rotangle", "", _angleViewRot)
_totalRotate	= (LABEL_ROTANGLE + _angleViewRot) MOD 360

flag_mul2 = 0
if label_posset and type_view < 4 and use_pos then
	rot2 -_totalRotate
	if chent then add2 -LABEL_POSITION [1][1], -LABEL_POSITION [1][2]
	if type_view = 0 then
		if chent then add2 SYMB_POS_X, SYMB_POS_Y
		if SYMB_MIRRORED then 
			mul2 -1,1
			flag_mul2 = 1
		endif
		if chent then rot2 SYMB_ROTANGLE*sgnp
		if chent then add2 label_posxy[1],label_posxy[2]
		if SYMB_MIRRORED then 
			mul2 -1,1
			flag_mul2 = 1
		endif
		if parall then rot2 ang_rot
		if (SYMB_ROTANGLE+ang_rot > (90 + EPS) & SYMB_ROTANGLE+ang_rot < (270 + EPS)) then rot2 180
		if zerk_b then rot2 180
	endif
	if type_view = 1 then
		isvert = 1 : if abs(abs(_totalRotate_ mod 180)-90)<EPS then isvert = -1
		if chent then add2 SYMB_POS_X, SYMB_POS_Z
		sgnp1 = 1 : if (_totalRotate_ > (90 + EPS) & _totalRotate_ < (270 + EPS)) then sgnp1 = -1
		sgnp2 = 1 : if (label_posang[1] > (90 + EPS) & label_posang[1] < (270 + EPS)) then sgnp2 = -1
		if chent then add2 label_posxy[1]*sgnp2*sgnp1,label_posxy[2]
		if parall then rot2 ang_rot*sgnp1*(isvert=1)+90*(isvert<>1)
	endif
endif

if param_name = tparam_name[SHOW_STRUCT] then
	inxpar = GLOB_STRUCTURE_DISPLAY+1
	for i=1 to vardim1(str_txt)
		str_txt[i][1] = str_txt[i][inxpar]
	next i
endif

if param_name = tparam_name[SHOW_BYMVO] then
	inxpar = inx_par_mvo
	for i=1 to vardim1(str_txt)
		str_txt[i][1] = str_txt[i][inxpar]
	next i
endif

if strstr(param_name_out[1], "!!Профиль")>0 and (prof_fist_str or prof_sec_str) then show_prof=1
if STRSTR(str_txt[1][1],"t=")>0 or STRSTR(str_txt[2][1],"t=")>0 then show_prof=0
k = show_prof*GLOB_SCALE/7+(show_prof=0)*GLOB_SCALE/20
add_for_prof_r = 0.03*k*show_prof
if abs(add_for_prof_r)<EPS then add_for_prof_r = 0.02*k*(param_name = tparam_name[SHOW_FLAG])

DRAWINDEX 50
if autod then
	if PosA<0 then PosA=-StrMax
	if PosA>0 then PosA=StrMax
	for i = 1 to n_rec
		if STRSTR(str_txt[i][inxpar],"@")>0 then
			space = "@" : var = str_txt[i][1] : gosub "trim_space2" : str_txt[i][1] = var
		endif
	next i
else
	l_max = abs(PosA)+thk_alg_out
	for i = 1 to n_rec
		var = str_txt[i][1] : gosub "peren"
		for m=1 to rs
			str_txt[i][m] = text_r[m]
		next m
		kol_vo_str[i] = rs
		for jj=1 to kol_vo_str[i]
			if STRSTR(str_txt[i][jj],"@")>0 then
				space = "@" : var = str_txt[i][jj] : gosub "trim_space2" : str_txt[i][jj] = var
			endif
		next jj
	next i
endif

n = 0
if n_rec=0 then 
	SkinBegin=1 
	SkinFinish =1
	St=1
else
	if vin and n_rec>1 then n = -text_hgt
endif

If _LABEL_CUSTOM_ARROW Then
	parameters tx=LABEL_POSITION [2][1]
	parameters ty=LABEL_POSITION [2][2]
	parameters PosA=LABEL_POSITION [2][1]*sin(LABEL_ROTANGLE)
	if not(chent) then add2  LABEL_POSITION [2][1]+LABEL_POSITION [3][1],LABEL_POSITION [2][2]+LABEL_POSITION [3][2]
	sizeArrow = sizeArrow*PAPER_TO_MODEL
	if gs_style_m=1 or gs_style_m=3 then j3=0
	if gs_style_m=2 or gs_style_m=4 then j3=4
	PEN arrowpen
	fill  GLOB_FILL_INDEX_SOLID
	gosub "old"
	if not(autod) then
		HOTSPOT2 0,0, unID, PosA, 1+128, PosA:	unID=unID+1
		HOTSPOT2 -1, 0, unID, PosA, 3+128, PosA: unID=unID+1
		HOTSPOT2 PosA, 0, unID, PosA, 2, PosA: unID=unID+1
	endif
	if param_name = tparam_name[SHOW_FLAG] and thk_alg then
		HOTSPOT2 PosA-sgn(PosA)*PAPER_TO_MODEL, 0.1, unID, thk_alg_out, 1+128, thk_alg_out:	unID=unID+1
		HOTSPOT2 -1*sgn(PosA), 0.1, unID, thk_alg_out, 3+128, thk_alg_out: unID=unID+1
		HOTSPOT2 PosA+thk_alg_out*sgn(PosA)-sgn(PosA)*PAPER_TO_MODEL, 0.1, unID, thk_alg_out, 2, thk_alg_out: unID=unID+1
	endif
	If PosA < 0 Then 
		If anchor = 7 Then
			txtPos = PosA
			add_for_prof_sign=0
			ssx = txtPos/2
		endif
		If anchor = 9 Then
			txtPos = 0
			add_for_prof_sign=-0.004*k-StrMax
			ssx = -StrMax/2
		endif
		If anchor = 8 Then
			txtPos = PosA/2
			add_for_prof_sign=-0.004*k-StrMax
			ssx = txtPos
		endif
		If anchor = 6 Then 
			txtPos = 0
			add_for_prof_sign=0
			ssx = txtPos
		endif
		If anchor = 4 Then 
			txtPos = 0
			ssx = txtPos
		endif
		skinThktxtpos = 0
	else
		If anchor = 7 Then 
			txtPos = add_for_prof_r
			add_for_prof_sign=0
			ssx = txtPos+StrMax/2
		endif
		If anchor = 9 Then
			txtPos = PosA+add_for_prof_r
			add_for_prof_sign=-0.004*k-StrMax
			ssx = txtPos/2
		endif
		If anchor = 8 Then 
			txtPos = PosA/2+add_for_prof_r
			add_for_prof_sign=-0.004*k-StrMax
			ssx = txtPos
		endif
		If anchor = 6 Then
			txtPos = 0
			ssx = txtPos
		endif
		If anchor = 4 Then
			txtPos = 0
			ssx = txtPos
		endif
		skinThktxtpos = thk_alg_out
	endif
	PEN arrowpen
	gosub "alg"
	is_add = 0 : if n_rec<>0 then gosub "marker"
	for nPos=SkinBegin to SkinFinish step St
		PEN arrowpen
		if not(napd) and (not(vin) or (nPos=SkinFinish)) and type_f=0 then 
			line2 0,n,PosA+(add_for_prof_r+thk_alg_out-(abs(thk_alg_out)>EPS)*PAPER_TO_MODEL)*sgn(PosA), n
			hotline2 0,n,PosA+(add_for_prof_r+thk_alg_out-(abs(thk_alg_out)>EPS)*PAPER_TO_MODEL)*sgn(PosA), n
		endif
		PEN txtpen
		SET STYLE rrt1
		popr_add = 0
		if vin and nPos>1 then
			SET STYLE "textstyle_add"
			popr_add = text_hgt - text_hgt_add
		endif
		if nPos<=vardim1(kol_vo_str) then
			for nstr = kol_vo_str[nPos] to 1 step -1
				nprof = n
				if param_name = tparam_name[SHOW_PARAM] and strstr(param_name_out[1], "!!Профиль")>0 and nstr = 1 then 
					if nPos=1 and prof_fist_str then gosub "profile"
					if nPos=2 and prof_sec_str then gosub "profile"
				endif
				text2 txtPos+add_for_prof_r*(nstr <> 1)-thk_alg_out*(PosA<0), n+popr_add, str_txt[nPos][nstr]
				if nstr = kol_vo_str[nPos] then
					if param_name = tparam_name[SHOW_FLAG] then text2 PosA*(PosA>0)-stw(skinThktxtarr[nPos])*PAPER_TO_MODEL+skinThktxtpos, n+dx, skinThktxtarr[nPos]
				endif
				n = n + text_hgt
			next nstr
		endif
		SET STYLE rrt1
	next nPos
	PEN arrowpen

	if vin=0 then 
		if AngleT=180 Then					
			if not(napd) then
				line2 0,0,0,n-kol_vo_str[SkinFinish]*text_hgt
				hotline2 0,0,0,n-kol_vo_str[SkinFinish]*text_hgt
			endif
		else
			if n_rec<>1 and not(napd) then
				line2 0,0,0,n-kol_vo_str[SkinFinish]*text_hgt
				hotline2 0,0,0,n-kol_vo_str[SkinFinish]*text_hgt
			endif
		endif
	endif
	if strlen(add_param)>0 and add_param<>" " and param_name = tparam_name[SHOW_FLAG] then
		SET STYLE "textstyle_add" 
		rrr = request("Height_of_style","textstyle_add", txt_hgt_add)
		text_hgt_add = (txt_hgt_add*PAPER_TO_MODEL)
		text_hgt_add = text_hgt_add+text_hgt_add*0.3
		if not(napd) then
			PEN arrowpen
			hotline2 0,n,0, n-kol_vo_str[SkinFinish]*text_hgt
			line2 0,n,0, n-kol_vo_str[SkinFinish]*text_hgt
			if abs(txtPos)>abs(STW(add_param)*PAPER_TO_MODEL) then
				hotline2 0,n,PosA+(add_for_prof_r+thk_alg_out-(abs(thk_alg_out)>EPS)*PAPER_TO_MODEL)*sgn(PosA), n
				line2 0,n,PosA+(add_for_prof_r+thk_alg_out-(abs(thk_alg_out)>EPS)*PAPER_TO_MODEL)*sgn(PosA), n
			else
				hotline2 0,n,add_for_prof_r+STW(add_param)*PAPER_TO_MODEL*sgn(PosA), n
				line2 0,n,add_for_prof_r+STW(add_param)*PAPER_TO_MODEL*sgn(PosA), n
			endif
		endif
		PEN txtpen
		text2 txtPos, n+dx, add_param
		n = n + text_hgt_add
		SET STYLE rrt1
	endif
	if is_add then del 1
else
	SET STYLE rrt1
	PEN arrowpen
	if cos(LABEL_ROTANGLE)>0 then
		If anchor = 4 Then
			txtPos = -(StrMax)*cos(LABEL_ROTANGLE)
			add_for_prof_sign=-add_for_prof_r
		endif
		If anchor = 5 Then
			txtPos = -(StrMax)*cos(LABEL_ROTANGLE)/2
			add_for_prof_sign=-add_for_prof_r
		endif
		If anchor = 6 Then
			txtPos = 0
			add_for_prof_sign=0
		endif
	else
		If anchor = 4 Then
			txtPos = 0
			add_for_prof_sign=add_for_prof_r
		endif
		If anchor = 5 Then
			txtPos = -(StrMax)*cos(LABEL_ROTANGLE)/2
			add_for_prof_sign=add_for_prof_r
		endif
		If anchor = 6 Then
			txtPos = -(StrMax)*cos(LABEL_ROTANGLE)
			add_for_prof_sign=add_for_prof_r
		endif
	endif
	linex = -StrMax*cos(LABEL_ROTANGLE)
	gosub "alg"
	define style  "textstyle_add1"  _LABEL_FONT_NAME, Shrift_add_param_size, anchor, Shrift_add_param
	rrr = request("Height_of_style","textstyle_add1", text_hgt_add)
	text_hgt_add = text_hgt_add*PAPER_TO_MODEL
	sss=request("Height_of_style", "textstyle_add1", height_add, descent_add, leading_add)
	dx_add= -(height_add*AC_TextLeading_1/2-descent_add-leading_add-Shrift_add_param_size*AC_TextLeading_1/2)*PAPER_TO_MODEL
	text_hgt_add = text_hgt_add*AC_TextLeading_1+abs(dx_add)*2
	if AC_TextLeading_1<1 then dx_add = -leading_add*AC_TextLeading_1
	is_add = 0 : if n_rec<>0 then gosub "marker"
	for nPos = SkinBegin to SkinFinish step St
		PEN txtpen
		SET STYLE rrt1
		popr_add = 0
		if vin and nPos>1 then
			SET STYLE "textstyle_add"
			popr_add = text_hgt - text_hgt_add - dx
		endif
		text2 txtPos, n+text_hgt/2-dx+popr_add, str_txt[nPos][1]
		if param_name = tparam_name[SHOW_FLAG] then text2 txtPos*(abs(txtPos)<EPS) - stw(skinThktxtarr[nPos])*PAPER_TO_MODEL, n+text_hgt/2+dx, skinThktxtarr[nPos]
		PEN arrowpen
		if not(vin) then
			line2 0, n, linex+add_for_prof_sign, n
			hotline2 0, n, linex+add_for_prof_sign, n
		endif
		n = n + text_hgt
		SET STYLE rrt1
	next nPos
	if not(vin) then
		PEN arrowpen
		line2 linex+add_for_prof_sign, 0, linex+add_for_prof_sign, n-kol_vo_str[SkinFinish]*text_hgt
		hotline2 linex+add_for_prof_sign, 0, linex+add_for_prof_sign, n-kol_vo_str[SkinFinish]*text_hgt
		if _LABEL_ANCHOR_POS=1 then
			line2 linex+add_for_prof_sign, SkinBegin*text_hgt, linex+add_for_prof_sign, (SkinBegin+St)*text_hgt
			hotline2 linex+add_for_prof_sign, SkinBegin*text_hgt, linex+add_for_prof_sign, (SkinBegin+St)*text_hgt
		endif
	endif

	if strlen(add_param)>0 and add_param<>" " and param_name = tparam_name[SHOW_FLAG] then
		SET STYLE "textstyle_add" 
		rrr = request("Height_of_style","textstyle_add", txt_hgt_add)
		text_hgt_add = (txt_hgt_add*PAPER_TO_MODEL)
		text_hgt_add = text_hgt_add+text_hgt_add*0.3
		if not(napd) then
			PEN arrowpen
			hotline2 linex+add_for_prof_sign,n,linex+add_for_prof_sign, n-kol_vo_str[SkinFinish]*text_hgt
			line2 linex+add_for_prof_sign,n,linex+add_for_prof_sign, n-kol_vo_str[SkinFinish]*text_hgt
			if abs(txtPos)<EPS or anchor=5 or anchor=6 then
				hotline2 0,n,linex+add_for_prof_sign, n
				line2 0,n,linex+add_for_prof_sign, n
			else
				hotline2 linex+add_for_prof_sign,n,linex+add_for_prof_sign-(add_for_prof_r+STW(add_param)*PAPER_TO_MODEL)*sgn(txtPos), n
				line2 linex+add_for_prof_sign,n,linex+add_for_prof_sign-(add_for_prof_r+STW(add_param)*PAPER_TO_MODEL)*sgn(txtPos), n
			endif
		endif
		PEN txtpen
		text2 txtPos, n+text_hgt/2, add_param
		n = n + text_hgt_add
		SET STYLE rrt1
	endif
	if is_add then del 1
endif

_LABEL_FRAME_OFFSET = _LABEL_FRAME_OFFSET*PAPER_TO_MODEL
If _LABEL_CUSTOM_ARROW Then
	x1 = -_LABEL_FRAME_OFFSET*sgn(PosA)
	y1 = n + _LABEL_FRAME_OFFSET
	y2 = 0 - _LABEL_FRAME_OFFSET
	x2 = PosA+(abs(PosA)<EPS)*0.1+(add_for_prof_r+thk_alg_out-(abs(thk_alg_out)>EPS)*PAPER_TO_MODEL)*sgn(PosA)+_LABEL_FRAME_OFFSET*sgn(PosA)
	if n<>0 then y2 = 0 - _LABEL_FRAME_OFFSET
	if vin and str_txt[2][1]<>"" then y2 = -text_hgt_add-_LABEL_FRAME_OFFSET
else
	x1 = 0 : y1 = 0 : y2 = n
	x2 = linex
	if _LABEL_ANCHOR_POS=0 then 
		y1=-text_hgt_add
	else
		if second_str<>"" then 
			y1 = -text_hgt_add
		endif
	endif
	if y2=0 then y2 = -text_hgt
endif

if abs(x1-x2)>EPS and abs(y1-y2)>EPS and (_LABEL_FRAME_ON or AC_bLabelOpaqueFill) and type_f=0 then
	if percentage>0 and percentage<100 and AC_LabelTextBgrPen > 0 then
		percentage = 100-percentage
		DEFINE TRANSLUCENT_FILL gs_fill_type 1, 1, 1, 1, 1, 1, 1, 1, percentage
		fill gs_fill_type
	else
		if AC_LabelTextBgrPen = 0 or percentage = 100 then 
			fill GLOB_FILL_INDEX_BACKGROUND
		else
			fill  GLOB_FILL_INDEX_SOLID
		endif
	endif
	ffil = _LABEL_FRAME_ON + 2 * AC_bLabelOpaqueFill + 4
	hotspot2 x1, y1
	hotspot2 x1, y2
	hotspot2 x2, y2
	hotspot2 x2, y1
	PEN arrowpen
	DRAWINDEX 10
	POLY2_B    5, ffil, _LABEL_TEXT_BG_PEN, 0,
		 x1, y1,_LABEL_FRAME_ON,
		 x1, y2,_LABEL_FRAME_ON,
		 x2, y2,_LABEL_FRAME_ON,
		 x2, y1,_LABEL_FRAME_ON,
		 x1, y1,-1
endif

PEN arrowpen

end

"lin":
	if napd then return
	PosA_ = PosA+(add_for_prof_r+thk_alg_out-(abs(thk_alg_out)>EPS)*PAPER_TO_MODEL)*sgn(PosA)
	for i = 1 to n_str_px
		HOTSPOT2 0, pxx[i][2], unID, pxx[i][1], 1+128: unID=unID+1
		HOTSPOT2 pxx[i][1], pxx[i][2], unID, pxx[i][1], 2: unID=unID+1
		HOTSPOT2 -1, pxx[i][2], unID, pxx[i][1], 3: unID=unID+1
		HOTSPOT2 pxx[i][1], 0, unID, pxx[i][2], 1+128: unID=unID+1
		HOTSPOT2 pxx[i][1], pxx[i][2], unID, pxx[i][2], 2: unID=unID+1
		HOTSPOT2 pxx[i][1], -1, unID, pxx[i][2], 3: unID=unID+1
		if (abs(pxx[i][1]-start_px)>=0.01 or abs(pxx[i][2]-start_py)>=0.01) and (abs(pxx[i][1]-0.005)>=0.01 or abs(pxx[i][2]-0.005)>=0.01) then
			tx_t=tx
			if pxx[i][1]>=tx+PosA_/2 and (PosA_)>0 then tx_t=tx+PosA_-ptx*sgn(PosA_)
			if pxx[i][1]<=tx+PosA_/2 and (PosA_)<0 then tx_t=tx+PosA_-ptx*sgn(PosA_)
			PEN arrowpen
			if type_px = 1 then
				line2 tx_t , ty,pxx[i][1], pxx[i][2]
				hotline2 tx_t , ty,pxx[i][1], pxx[i][2]
				add2 pxx[i][1], pxx[i][2]
				PEN _LABEL_ARROWHEAD_PEN
				txx = tx_t-pxx[i][1] : tyy= ty-pxx[i][2] : gosub "arrw"
				del 1
			endif
			if type_px = 2 then
				line2 pxx[i][1]+tx, ty+pxx[i][2], pxx[i][1], pxx[i][2]
				line2 pxx[i][1]+tx, ty+pxx[i][2], tx_t, ty
				PEN _LABEL_ARROWHEAD_PEN
				add2 pxx[i][1], pxx[i][2]
				txx = tx : tyy= ty : gosub "arrw"
				del 1
			endif
		endif
	next i
return

"alg":
	max_h = 0 
	if n_rec = 0 then
		add2 0,text_hgt
	else
		for nPos=1 to n_rec-1
			for nstr = 1 to kol_vo_str[nPos]
				max_h = max_h + text_hgt
			next nstr
		next nPos
		if not(vin) then
			if _LABEL_ANCHOR_POS=1 then add2 0,-max_h
			if _LABEL_ANCHOR_POS=0 then add2 0,-max_h/2
		endif
	endif
return

"arrw":
	drawindex 0
	if napd then return
	if txx>EPS and tyy>EPS then AngleT=ATN(tyy/txx)
	if txx>EPS and tyy<EPS then AngleT=ATN(tyy/txx)+360
	if txx<EPS and abs(txx)>EPS then AngleT=ATN(tyy/txx)+180
	if abs(txx)<EPS and tyy>EPS then AngleT=90
	if abs(txx)<EPS and tyy<EPS then AngleT=270
	AngleT=AngleT-90
	rot2  AngleT
	PEN _LABEL_ARROWHEAD_PEN
	If gs_style_m=7 or gs_style_m=9 then
		if total_thk<EPS or zast_mun then 
			HOTSPOT2 sizeArrow, zast/2, unID,  PosArrow,  1+128   : unID=unID+1
			HOTSPOT2 sizeArrow, PosArrow+zast/2, unID,  PosArrow,  2    : unID=unID+1
			HOTSPOT2 sizeArrow, -1, unID,  PosArrow,  3    : unID=unID+1
		else
			PosArrow=total_thk
			if gs_style_m=9 then
				HOTSPOT2 sizeArrow/2, PosArrow+zast/2
			else
				HOTSPOT2 sizeArrow, PosArrow+zast/2
			endif
		endif

		if gs_style_m=9 then
			HOTSPOT2 sizeArrow/2, zast/2
			if not(napd) then POLY2  4, 1+2+4, -sizeArrow/2, 0, 
					  -sizeArrow/2, PosArrow+zast,
					  sizeArrow/2, PosArrow+zast,
						sizeArrow/2, 0
		else
			HOTSPOT2 sizeArrow, zast/2
			if not(napd) then line2 sizeArrow,0, sizeArrow, PosArrow+zast
		endif

	endif
	If gs_style_m=1 or gs_style_m=2 then
		if not(napd) then POLY2  3, 1+j3/2+j3,
				-sizeArrow *tan(15), sizeArrow,
				0, 0,
				sizeArrow *tan(15), sizeArrow 
	endif
	If gs_style_m=3 or gs_style_m = 4 then
		if not(napd) then POLY2_  2,1+j3/2+j3, 0, 0, 900,sizeArrow/2, 360, 4001
	endif
	If gs_style_m = 6 then
		if not(napd) then LINE2  0,0, -sizeArrow *tan(15), sizeArrow
		if not(napd) then LINE2 0,0,  sizeArrow*tan(15), sizeArrow
		if not(napd) then line2 0,sizeArrow *2/3,-sizeArrow *tan(15),sizeArrow 
		if not(napd) then line2 0,sizeArrow *2/3,sizeArrow *tan(15),sizeArrow 
		if not(napd) then POLY2_b 5, 2,_LABEL_ARROWHEAD_PEN,gs_back_pen,
				0,0,0,
				sizeArrow *tan(15),sizeArrow,0,
				0,2/3*sizeArrow,0,
				-sizeArrow *tan(15),sizeArrow,0,
				0,0,-1
	endif
	If gs_style_m = 8 and not(napd) then
		del 1
		LINE2  -0.5*sizeArrow *tan(45),-0.5*sizeArrow *tan(45), 0.5*sizeArrow *tan(45), 0.5*sizeArrow *tan(45)
	else
		del 1
	endif
	PEN arrowpen
	drawindex 10
return

"old":
	txx = tx : tyy= ty : gosub "arrw"
	if not(chent) then del 1
	if not(chent) then add2  LABEL_POSITION [2][1]+LABEL_POSITION [3][1],LABEL_POSITION [2][2]+LABEL_POSITION [3][2]
	xn = 0
	yn = 0
	if not(napd) then HOTSPOT2 xn, yn
	if is_diff_hotspot then
		HOTSPOT2 0, mvo_custom_pos[inx_par_mvo][2], unID,  mvo_custom_pos[inx_par_mvo][1],  1+128   : unID=unID+1
		HOTSPOT2  mvo_custom_pos[inx_par_mvo][1], mvo_custom_pos[inx_par_mvo][2], unID,  mvo_custom_pos[inx_par_mvo][1],  2    : unID=unID+1
		HOTSPOT2 -1, mvo_custom_pos[inx_par_mvo][2], unID,  mvo_custom_pos[inx_par_mvo][1],  3    : unID=unID+1
		HOTSPOT2  mvo_custom_pos[inx_par_mvo][1], 0, unID,  mvo_custom_pos[inx_par_mvo][2],  1+128      : unID=unID+1
		HOTSPOT2   mvo_custom_pos[inx_par_mvo][1], mvo_custom_pos[inx_par_mvo][2], unID,  mvo_custom_pos[inx_par_mvo][2],  2       : unID=unID+1
		HOTSPOT2  mvo_custom_pos[inx_par_mvo][1], -1, unID,  mvo_custom_pos[inx_par_mvo][2],  3       : unID=unID+1
		tx = mvo_custom_pos[inx_par_mvo][1]
		ty = mvo_custom_pos[inx_par_mvo][2]
	else
		HOTSPOT2 0, ty, unID,  tx,  1+128   : unID=unID+1
		HOTSPOT2  tx, ty, unID,  tx,  2    : unID=unID+1
		HOTSPOT2 -1, ty, unID,  tx,  3    : unID=unID+1
		HOTSPOT2  tx, 0, unID,  ty,  1+128      : unID=unID+1
		HOTSPOT2   tx, ty, unID,  ty,  2       : unID=unID+1
		HOTSPOT2  tx, -1, unID,  ty,  3       : unID=unID+1
	endif
	PEN arrowpen
	if not(napd) then 
		line2 xn, yn,tx,ty
		hotline2 xn, yn,tx,ty
	endif
	gosub "lin"
	add2 tx,ty
	if not(parall) then
		HOTSPOT2 PosA/2,	0, unID,	ang_rot,	4+128: unID=unID+1
		HOTSPOT2 0,	0,	unID,	ang_rot,	6: unID=unID+1
		HOTSPOT2 PosA*cos(ang_rot)/2,	PosA*sin(ang_rot)/2,	unID,	ang_rot, 5: unID=unID+1
		rot2 ang_rot
	endif
	if chent then add2 -PosA/2,0
	if not(napd) then
		HOTSPOT2 0, 0.1, unID,  ptx,  1+128   : unID=unID+1
		HOTSPOT2  -ptx*sgn(PosA), 0.1, unID,  ptx,  2    : unID=unID+1
		HOTSPOT2 1*sgn(PosA), 0.1, unID,  ptx,  3    : unID=unID+1
		if abs(ptx)>EPS then
			line2 -ptx*sgn(PosA),0,0,0
			hotline2 tx-ptx*sgn(PosA),0,0,0
			add2 -ptx*sgn(PosA),0
		endif
	endif
return

"profile":
if flag_mul2 then 
	add2 -txtPos-add_for_prof_sign, nprof+0.005*k+dx
else
	add2 txtPos+add_for_prof_sign, nprof+0.005*k+dx
endif
!!Прямоугольная труба
	if pr2 or name_prof_i=2 then:
		rect2 0,0,-0.02*k,0.02*k
	endif
!!Уголок
	if pr5 or name_prof_i=5 or name_prof_i=8 then:
		line2 0,0,-0.02*k,0
		line2 -0.02*k,0,-0.02*k,0.02*k
	endif
!!Двутавр
	if pr1 or name_prof_i=4 then:
		line2 0,0,-0.02*k,0
		line2 -0.01*k,0,-0.01*k,0.02*k
		line2 0,0.02*k,-0.02*k,0.02*k
	endif
!!Швеллер
	if pr6 or name_prof_i=3 or name_prof_i=9 then:
		line2 -0.005,0,-0.02*k,0
		line2 -0.02*k,0,-0.02*k,0.02*k
		line2 -0.005,0.02*k,-0.02*k,0.02*k
	endif
!!Круглая труба
	if pr3 or name_prof_i=1 then:
		CIRCLE2 -0.01*k, 0.01*k, 0.01*k
	endif
	del 1
return

"trim_space2":
	if STRSTR(var, space)>0 then
		if vartype(var) = 2 and  vartype(space) = 2 then
			ipr=1
			out_str = ""
			DO
				is_trim = 0
				in_str = var
				find_str = space
				replace_str = ""
				gosub "str_replace2"
				var = out_str
				is_trim = STRSTR (var, space, 1)
				ipr = ipr + 1
			WHILE is_trim <> 0 and ipr<50
		endif
		var = out_str
	endif
return

"str_replace2":
	if vartype(in_str) = 2 and vartype(find_str) = 2 and vartype(replace_str) = 2 then
		mrw_in_str = in_str
		mrw_wordToReplace = find_str
		mrw_newWord = replace_str
		call "macro_replace_word" parameters mrw_in_str=mrw_in_str,
											mrw_newWord=mrw_newWord,
											mrw_wordToReplace = mrw_wordToReplace,
											RETURNED_PARAMETERS mrw_out_str
		out_str = mrw_out_str
	endif
return

"peren":
	mlb_in_str = var : mlb_l_max = l_max
	dim mlb_out_str_arr[]
	call "macro_line_break" parameters mlb_in_str=mlb_in_str, mlb_l_max=mlb_l_max,
										RETURNED_PARAMETERS mlb_n_row, mlb_out_str, mlb_out_str_arr
	text_r = mlb_out_str_arr
	rs = mlb_n_row
	txt = mlb_out_str
return


"show_mep":
var_t=""
show_all_system = 1 : success = LIBRARYGLOBAL ("Libraryflobals-mep", "show_all_system", show_all_system)
if success then
	show_el = 0
	
	if show_all_system then
		show_el = 1
		goto "end_show_mep"
	endif
	
	if strstr(syst_name,"!!!")>EPS then
		show_el = 1
		goto "end_show_mep"
	endif
	
	dim show_system[] : show_system[1] = ""
	success = LIBRARYGLOBAL ("Libraryflobals-mep", "show_system", show_system)
	n_sys=0
	dim syst_name_t[] : syst_name_t[1]=""
	if strlen(syst_name)>1 then
		if STRSTR(syst_name, ",")>EPS then
			txt_var = syst_name
			max_iter = 1000
			for i=1 to max_iter
				n_t = STRSTR(txt_var, ",")
				if n_t<EPS then 
					i=max_iter
					if STRSUB(txt_var, 1, 1) = " " then txt_var = STRSUB(txt_var, 2, STRLEN(txt_var))
					if strlen(txt_var)>0 then
						n_sys = n_sys + 1
						syst_name_t[n_sys]=txt_var
					endif
				else
					var_t = STRSUB(txt_var, 1, n_t-1)
					if STRSUB(var_t, 1, 1) = " " then var_t = STRSUB(var_t, 2, STRLEN(var_t))
					txt_var = STRSUB(txt_var, n_t+1, strlen(txt_var))
					n_sys = n_sys + 1
					syst_name_t[n_sys]=var_t
				endif
			next i
		else
			n_sys = 1
			syst_name_t[n_sys]=syst_name
		endif
	else
		show_el = 1
		goto "end_show_mep"
	endif
	
	for i=1 to vardim1(show_system)
		if strlen(show_system[i])>0 and show_system[i]<>" " then
			for k=1 to n_sys
				sname = syst_name_t[k]
				gosub 33
			next k
		endif
	next i
else
	show_el = 1
	goto "end_show_mep"
endif

"end_show_mep":
return

33:
	usl1 =(show_system[i]=sname)
	if STRSUB(show_system[i], 1, 1) = "*" and not(usl1) then !Если сборка начинается с * - отсекаем, и ищем конец
		findsp = STRSUB(show_system[i], 2, STRLEN(show_system[i]))
		if STRLEN(sname)>=STRLEN(findsp) then !Если имя сборки меньше длины искомого текста - она явно не подходит
			findsp_t = STRSUB(sname,STRLEN(sname)-STRLEN(findsp)+1,STRLEN(findsp))
			usl1 = (findsp_t=findsp)
		else
			usl1 = 0
		endif
	endif
	if STRSUB(show_system[i], STRLEN(show_system[i]), 1) = "*" and not(usl1) then !Если сборка заканчивается на * - отсекаем, и ищем начало
		findsp = STRSUB(show_system[i], 1, STRLEN(show_system[i])-1)
		if STRLEN(sname)>=STRLEN(findsp) then !Если имя сборки меньше длины искомого текста - она явно не подходит
			findsp_t = STRSUB(sname,1,STRLEN(findsp))
			usl1 = (findsp_t=findsp)
		else
			usl1 = 0
		endif
	endif
	if STRSUB(show_system[i], 1, 1) = "*" and STRSUB(show_system[i], STRLEN(show_system[i]), 1) = "*" and not(usl1) then !Ищем вхождение
		findsp = STRSUB(show_system[i], 2, STRLEN(show_system[i])-2)
		usl1 = (STRSTR(sname, findsp, 1)>0)
	endif
	if STRSUB(show_system[i], 1, 1) = "*" and STRLEN(show_system[i])=1 and not(usl1) then !Все сборки
		usl1 = 1
	endif
	if usl1 then 
		show_el = 1
		goto "end_show_mep"
	endif
return


"array_num_sorty":
	nel_sort = vardim1(arr_sort)
	for j_sort=1 to nel_sort-1
		flag_sort = 0
		for i_sort=1 to nel_sort-j_sort
			if (arr_sort[i_sort]-arr_sort[i_sort+1])>EPS then
				ttt = arr_sort[i_sort]
				arr_sort[i_sort] = arr_sort[i_sort+1]
				arr_sort[i_sort+1] = ttt
				flag_sort = 1
			endif
		next i_sort
		if not(flag_sort) then j_sort=nel_sort
	next j_sort
return

"trim_space_end":
	if vartype(var) = 2 then
		!Удаляем пробелы в начале и конце
		if STRSTR(var, " ")>EPS then
			mts_in_str = var
			call "macro_trim_space" parameters mts_in_str=mts_in_str,
												RETURNED_PARAMETERS mts_out_str
			var = mts_out_str
		endif
	endif
return

"str_replace":
	if vartype(in_str) = 2 and vartype(find_str) = 2 and vartype(replace_str) = 2 then
		mrw_in_str = in_str
		mrw_wordToReplace = find_str
		mrw_newWord = replace_str
		call "macro_replace_word" parameters mrw_in_str=mrw_in_str,
											mrw_newWord=mrw_newWord,
											mrw_wordToReplace = mrw_wordToReplace,
											RETURNED_PARAMETERS mrw_out_str
		out_str = mrw_out_str
	endif
return

"get_param_name":
	param_name_str = ""
	unit_name_str = ""
	start_find = STRSTR(in_str, "%", 1)
	if start_find > 0 then
		len_in_str = STRLEN (in_str)
		chapt_1 = STRSUB(in_str, start_find+1, len_in_str)
		start_find_2 = STRSTR(chapt_1, "%", 1)
		if start_find_2 > 0 then
			param_name_str = STRSUB(chapt_1, 1, start_find_2-1)
		endif
	endif
	start_find = STRSTR(param_name_str, ".", 1)
	if STRLEN(param_name_str)>0 and start_find then
		len_in_str = STRLEN(param_name_str)
		unit_name_str = STRSUB(param_name_str, start_find, len_in_str)
		param_name_str = STRSUB(param_name_str, 1, start_find-1)
	endif
return

"get_thk_txt":
	if unstr = "" then unstr = ld
	Unit=""
	if LCODE = 1 then
		if STRSTR (unstr, "m")<>0 then Unit=" м"
		if STRSTR (unstr, "cm")<>0 then Unit=" см"
		if STRSTR (unstr, "mm")<>0 then Unit=" мм"
		nstep = 1
		if Unit = " м" then nstep = 1
		if Unit = " см" then nstep = 100
		if Unit = " мм" then nstep = 1000
	else
		if STRSTR (unstr, "m")<>0 then Unit=" m"
		if STRSTR (unstr, "cm")<>0 then Unit=" sm"
		if STRSTR (unstr, "mm")<>0 then Unit=" mm"
		nstep = 1
		if Unit = " m" then nstep = 1
		if Unit = " sm" then nstep = 100
		if Unit = " mm" then nstep = 1000
	endif
	n = SPLIT(STRSUB(unstr,3,1),"%n", nznak)
	zerostr = ","
	for ii=1 to nznak
		zerostr = zerostr+"0"
	next ii
	tskinThktxt = ""
	if (tThk*1000-min_thk)>EPS then
		tskinThktxt = str(unstr, tThk)
		if STRSTR(tskinThktxt,zerostr)>0 then tskinThktxt = strsub(tskinThktxt, 1, STRLEN(tskinThktxt)-STRLEN(zerostr))
		if tskinThktxt="0" or tskinThktxt="0"+zerostr then tskinThktxt=""
	endif
return

"getPropertyValue":
	_stPropertyValue = "" : _value_num = 0
	propInputIds.propertyIds[1].id = _stPropertyID
	if HASKEY(propOutputVals.propertyValues) then t = REMOVEKEY(propOutputVals.propertyValues)
	n = REQUEST ("Property_Values_Of_Parent", propInputIds, propOutputVals)
	if not(haskey(propOutputVals.propertyValues[1].value_status)) then return
	if propOutputVals.propertyValues[1].value_status = 1 then
		_typeValue = propOutputVals.propertyValues[1].type
		_value = 0
		for j = 1 to vardim1(propOutputVals.propertyValues[1].value)
			_value = propOutputVals.propertyValues[1].value[j]
			flag_empty=0
			if vartype(_value)=1 and _typeValue <> 1 then
				_value_num = _value
				if abs(_value)<EPS then
					flag_empty=1
				else
					if _typeValue = 2 then _value = str("%.0", _value)
					if _typeValue = 3 then _value = str("%.2", _value)
					if _typeValue = 5 then _value = str("%.3", _value)
					if _typeValue = 6 then _value = str("%.2", _value)
					if _typeValue = 7 then _value = str("%.2", _value)
				endif
			endif
			if _typeValue = 1 then
				if propOutputVals.propertyValues[1].value[j]>EPS then
					_value = "Да"
				else
					_value = stringarr[LCODE][1]
				endif
			endif
			if vartype(_value)=2 then
				if strlen(_value)=0 or _value=" " then
					flag_empty=1
				endif
			endif
			if not(flag_empty) then
				if j > 1 then
					_stPropertyValue = _stPropertyValue + "; " + _value
				else
					_stPropertyValue = _value
				endif
			endif
		next j
	endif
	if HASKEY(propInputIds.propertyIds) then t = REMOVEKEY(propInputIds.propertyIds)
return

"tonum":
	var_num = 0
	rez = 0
	if VARTYPE(var) = 2 then
		!Чистим от пробелов-разделителей
		var_t=""
		for ll=1 to STRLEN(var)
			z = strsub(var,ll,1)
			if z="0" or z="1" or z="2" or z="3" or  z="4" or z="5" or  z="6" or z="7" or  z="8" or z="9" or  z="," or z="." then
				var_t = var_t + z
			endif
		next ll
		var = var_t
		!Если дробное - ищем разделитель
		razd_ceil = ""
		if STRSTR(var, ".")> 0 then razd_ceil = "."
		if STRSTR(var, ",")> 0 then razd_ceil = ","
		!Если разделитель найден - делим на части
		if razd_ceil <> "" then
			pos_razd = STRSTR(var, razd_ceil)
			int_var = strsub(var,1,pos_razd-1)
			ceil_var = strsub(var,pos_razd+1,STRLEN(var))
			rez_1 = SPLIT(int_var,"%n",var_num_int)
			rez_2 = SPLIT(ceil_var,"%n",var_num_ceil)
			n_razd = 10 ** STRLEN(ceil_var) !Кол-во знаков даёт знаменатель
			var_num = var_num_int + var_num_ceil / n_razd
			if rez_1*rez_2>EPS then rez = 1
		else
			rez = SPLIT(var,"%n",var_num)
		endif
	else
		var_num = var	
		rez = 1
	endif
return

"get_substring":
	if strlen(char_start)>0 then
		nstart = STRSTR(var, char_start) + strlen(char_start)
	else
		nstart = 1
	endif
	if strlen(char_end)>0 then
		nend = STRSTR(var, char_end)
	else
		nend = STRLEN(var)
	endif
	var = STRSUB(var, nstart, nend-nstart)
return

"read_mvo":
	inx_par_mvo = 0
	is_read = 0
	dim mvo_param_n[][]
	dim mvo_param_t[]
	mvo_filename_ = ""
	for i=1 to vardim1(mvo_values)
		if mvo_filename=mvo_values[i][1] or mvo_filename=mvo_values[i][2] then
			mvo_filename_ = mvo_values[i][2]
			i=vardim1(mvo_values)
		endif
	next i
	for inx_=1 to vardim1(param_otobr)
		type_find = 1
 		var = STRTOLOWER(param_otobr[inx_][1])
		if STRSUB (var, 1, 1) = "*" then
			var = STRSUB (var, 2, STRLEN(var))
			type_find = 2
		endif
		mvo_param_t[inx_] = var
		gosub "tonum"
		if var="-" then rez = 0
		if rez = 0 then
			if STRSUB (var, 1, 3) = stringarr[LCODE][55] then
				var_num = 1
				rez = 1
			endif
			if STRSUB (var, 1, 4) = stringarr[LCODE][56] or STRSUB (var, 1, 4) = stringarr[LCODE][57] then
				var_num = 0
				rez = 1
			endif
		endif
		mvo_param_n[inx_][1] = var_num
		mvo_param_n[inx_][2] = rez
		mvo_param_n[inx_][3] = type_find
	next inx_
	if mvo_paramname=tmvo_paramname[1] then
		is_read_ = 0 : is_read_ = REQUEST ("window_show_dim", "", mvo_var)
		if is_read_ then gosub "find_mvo"
	endif
	if mvo_paramname=tmvo_paramname[2] then
		is_read_ = 0 : is_read_ = REQUEST ("door_show_dim", "", mvo_var)
		if is_read_ then gosub "find_mvo"
	endif
	if mvo_paramname=tmvo_paramname[3] then
		is_read_ = 0 : is_read_ = REQUEST ("Name_of_main", "", mvo_var)
		if is_read_ then gosub "find_mvo"
	endif
	if mvo_paramname=tmvo_paramname[4] then
		is_read_ = 0 : is_read_ = REQUEST ("ID_of_main", "", mvo_var)
		if is_read_ then gosub "find_mvo"
	endif
	if is_read=0 and strlen(mvo_filename)>1 and strlen(mvo_paramname)>1 then
		is_read_ = LIBRARYGLOBAL (mvo_filename_, mvo_paramname, mvo_var)
		if is_read_ then gosub "find_mvo"
	endif
	if is_read=0 then
		if mvo_defult<>tmvo_show[2] then
			for inx_=1 to vardim1(param_otobr)
				if mvo_defult = param_otobr[inx_][1] then
					inx_par_mvo = inx_
					inx_=vardim1(param_otobr)
				endif
			next inx_
		else
			inx_par_mvo = -1
		endif
	else
		if inx_par_mvo>EPS then
			if mvo_show[inx_par_mvo]=tmvo_show[2] then inx_par_mvo = -1
		endif
	endif
	is_diff_hotspot = 0
return

"find_mvo":
	is_text_mvo_var = (vartype(mvo_var)=2)
	for inx_=1 to vardim1(param_otobr)
		if is_text_mvo_var then
			if mvo_param_n[inx_][3] = 1 then
				if mvo_param_t[inx_]=mvo_var then
					inx_par_mvo = inx_
					inx_=vardim1(param_otobr)
					is_read = 1
				endif
			endif
			if mvo_param_n[inx_][3] = 2 then
				if strstr(mvo_param_t[inx_],mvo_var)>EPS then
					inx_par_mvo = inx_
					inx_=vardim1(param_otobr)
					is_read = 1
				endif
			endif
		else
			if abs(mvo_param_n[inx_][1]-mvo_var)<EPS and mvo_param_n[inx_][2]>EPS then
				inx_par_mvo = inx_
				inx_=vardim1(param_otobr)
				is_read = 1
			endif
		endif
	next inx_
return

"marker":
	if type_f>0 then
		SET STYLE rrt1
		rrr = (max((text_hgt+dx)*n_rec, StrMax)/2)+AC_LabelFrameOffset*PAPER_TO_MODEL
		If _LABEL_CUSTOM_ARROW Then is_add = 1
		_LABEL_FRAME_ON = 1
		if percentage>0 and percentage<100 and AC_LabelTextBgrPen > 0 then
			percentage = 100-percentage
			DEFINE TRANSLUCENT_FILL gs_fill_type1 1, 1, 1, 1, 1, 1, 1, 1, percentage
			fill gs_fill_type1
		else
			if AC_LabelTextBgrPen = 0 or percentage = 100 then 
				fill GLOB_FILL_INDEX_BACKGROUND
			else
				fill  GLOB_FILL_INDEX_SOLID
			endif
		endif
		ffil = _LABEL_FRAME_ON + 2 * AC_bLabelOpaqueFill + 4
		PEN arrowpen
		DRAWINDEX 10
		if NSP>3 then ttttttt = max(get(NSP))
		if type_f = 1 then
			if n_rec = 1 then ssy = text_hgt/2
			if n_rec = 2 then ssy = 0
			if is_add then add2 rrr*sgn(PosA)-PosA/2,-ssy
			put ssx, ssy,900+_LABEL_FRAME_ON
			put rrr, 360,4000+_LABEL_FRAME_ON
			if n_rec>1 and type_fline then line2 ssx-rrr, ssy,ssx+rrr, ssy
		endif
		if type_f = 2 then
			if n_rec = 1 then ssy = text_hgt/2
			if n_rec = 2 then ssy = 0
			if is_add then add2 rrr*sgn(PosA)-PosA/2,-ssy
			put -rrr+ssx, -rrr+ssy,_LABEL_FRAME_ON
			put rrr+ssx, -rrr+ssy,_LABEL_FRAME_ON
			put rrr+ssx, rrr+ssy,_LABEL_FRAME_ON
			put -rrr+ssx, rrr+ssy,_LABEL_FRAME_ON
			if n_rec>1 and type_fline then line2 ssx-rrr, ssy,ssx+rrr, ssy
		endif
		if type_f = 3 then 
			ald = text_hgt/2 : if n_rec>1 then ald = ald + text_hgt/2
			rrr1 = rrr * (1 + ald / (0.5*rrr*SQR(3)))
			ssy = -rrr1*SQR(3)/3 : if n_rec<2 then ssy = ssy + text_hgt/2 + dx
			rrr2 = rrr * (1 + (ald - text_hgt/2-dx*2) / (0.5*rrr*SQR(3)))
			if is_add then add2 rrr1*sgn(PosA)-PosA/2, -ssy
			put ssx-rrr1, ssy, _LABEL_FRAME_ON
			put ssx, ssy+rrr1*SQR(3), _LABEL_FRAME_ON
			put ssx+rrr1, ssy, _LABEL_FRAME_ON
		endif
		if type_f = 4 then
			rrr = rrr * SQR(2)
			if n_rec = 1 then ssy = text_hgt/2
			if n_rec = 2 then ssy = 0
			if is_add then add2 rrr*sgn(PosA)-PosA/2,-ssy
			put ssx, -rrr+ssy,_LABEL_FRAME_ON
			put rrr+ssx, ssy,_LABEL_FRAME_ON
			put ssx, rrr+ssy,_LABEL_FRAME_ON
			put -rrr+ssx, ssy,_LABEL_FRAME_ON
			if n_rec>1 and type_fline then line2 ssx-rrr, ssy,ssx+rrr, ssy
		endif
		if NSP>3 then POLY2_B NSP/3, ffil, _LABEL_TEXT_BG_PEN, 0, GET(NSP)
	endif
return
