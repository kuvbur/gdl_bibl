
!!!!DEBUG!!!
tshow_op=0
error_pen = 60
!!!!!!!!!!!!
EPS=0.00001
unID=1 : unIDR=800 : unIDD=4000 : unIDF=6000
is = 1 : ie = 2
ix = 1 : iy = 2 : iz = 3
iv = 1 : in = 2 : ip = 3 : il = 4
tbmat = 0 : jt = 1
n = REQUEST ("Name_of_main", "", name)
is_call = 0 : if name<>"" then is_call = 1
dim pos_weld[2][3]
dim ui_page_name[] : i=0
i=i+1 : ui_page_name[i]="Тип сечения"
i=i+1 : ui_page_name[i]="Спецификация"
i=i+1 : ui_page_name[i]="Построение"
i=i+1 : ui_page_name[i]="Привязка оси"
i=i+1 : ui_page_name[i]="Подрезка"
i=i+1 : ui_page_name[i]="Сварка по граням"
i=i+1 : ui_page_name[i]="Обработка торца начала"
i=i+1 : ui_page_name[i]="Обработка торца конца"
i=i+1 : ui_page_name[i]="Отображение"
i=i+1 : ui_page_name[i]="Проекция на плане"
i=i+1 : ui_page_name[i]="Расчёты"
!--------- Подготовка данных для сварки -------------------
dim tcalltype_weld[]
dim icalltype_weld[] : i=0
i=i+1 : icalltype_weld[i]=0 : tcalltype_weld[i] = "Нет"
i=i+1 : icalltype_weld[i]=1 : tcalltype_weld[i] = "Автоматический угловой"
i=i+1 : icalltype_weld[i]=2 : tcalltype_weld[i] = "Автоматический стыковой"
i=i+1 : icalltype_weld[i]=3 : tcalltype_weld[i] = "Ручной угловой"
i=i+1 : icalltype_weld[i]=4 : tcalltype_weld[i] = "Ручной стыковой"

!!!=============== Параметры базы ========================
TYPE_FIN_NO = 0
TYPE_FIN_ZAGL = 1
TYPE_FIN_PODR = 2
TYPE_FIN_ZAGLFAS = 3
TYPE_FIN_WELD = 4
TYPE_FIN_BASE = 5
TYPE_FIN_SHARN = 6

dim ttype_fin[]
dim itype_fin[] : i=0
i=i+1 : itype_fin[i]=TYPE_FIN_NO : ttype_fin[i] = "Нет"

i=i+1 : itype_fin[i]=TYPE_FIN_ZAGL : ttype_fin[i] = "Заглушка"
i=i+1 : itype_fin[i]=TYPE_FIN_PODR : ttype_fin[i] = "Подрезка"
i=i+1 : itype_fin[i]=TYPE_FIN_ZAGLFAS : ttype_fin[i] = "Заглушка с фасонкой"
i=i+1 : itype_fin[i]=TYPE_FIN_WELD : ttype_fin[i] = "Обварка"
i=i+1 : itype_fin[i]=TYPE_FIN_BASE : ttype_fin[i] = "База"
if name_prof_i = 3 or name_prof_i = 4 or name_prof_i = 9 then
	i=i+1 : itype_fin[i]=TYPE_FIN_SHARN : ttype_fin[i] = "Шарнирный узел крепления"
endif

TYPE_PLATE_RECT = 1
TYPE_PLATE_CIRCLE= 2
dim ttype_base[]
dim itype_base[] : i=0
i=i+1 : itype_base[i]=TYPE_PLATE_RECT : ttype_base[i] = "Прямоугольная"
i=i+1 : itype_base[i]=TYPE_PLATE_CIRCLE : ttype_base[i] = "Круглая"

TYPE_TRAVERSE_0 = 1
TYPE_TRAVERSE_1 = 2
TYPE_TRAVERSE_2 = 3

dim ttype_traverse[]
dim itype_traverse[] : i=0
i=i+1 : itype_traverse[i]=TYPE_TRAVERSE_0 : ttype_traverse[i] = "Нет"
i=i+1 : itype_traverse[i]=TYPE_TRAVERSE_1 : ttype_traverse[i] = "Одна"
i=i+1 : itype_traverse[i]=TYPE_TRAVERSE_2 : ttype_traverse[i] = "Две"

EDGE_N_0 = 1
EDGE_N_2 = 2
EDGE_N_4 = 3
EDGE_N_6 = 4
EDGE_N_8 = 5
EDGE_N_1 = 6
EDGE_N_1_1 = 7
EDGE_N_4_45 = 8

dim tedge_n[]
dim iedge_n[] : i=0
i=i+1 : iedge_n[i]=EDGE_N_0 : tedge_n[i] = "Нет"
i=i+1 : iedge_n[i]=EDGE_N_2 : tedge_n[i] = "Два"
i=i+1 : iedge_n[i]=EDGE_N_4 : tedge_n[i] = "Четыре"
i=i+1 : iedge_n[i]=EDGE_N_6 : tedge_n[i] = "Шесть"
i=i+1 : iedge_n[i]=EDGE_N_8 : tedge_n[i] = "Весемь"
i=i+1 : iedge_n[i]=EDGE_N_1 : tedge_n[i] = "Одно по центру"
i=i+1 : iedge_n[i]=EDGE_N_1_1 : tedge_n[i] = "Два зеркально"
i=i+1 : iedge_n[i]=EDGE_N_4_45 : tedge_n[i] = "Четыре 45 град."
!!!=======================================

!!!=============== Параметры шарнирного узла ========================
!==================== Выбор наличия пластины ====================
TYPE_PLATE_YES = 1
TYPE_PLATE_NO = 2

dim ttype_plate[]
dim itype_plate[] : i=0
i=i+1 : itype_plate[i]=TYPE_PLATE_YES : ttype_plate[i] = "С пластиной"
i=i+1 : itype_plate[i]=TYPE_PLATE_NO : ttype_plate[i] = "Без пластины"

!==================== Выбор наличия сварки ====================
WELD_YES = 1
WELD_NO = 2

dim tweld[]
dim iweld[] : i=0
i=i+1 : iweld[i]=WELD_YES : tweld[i] = "Есть"
i=i+1 : iweld[i]=WELD_NO : tweld[i] = "Нет"

TYPE_CORNER_1 = 1
TYPE_CORNER_2 = 2
TYPE_CORNER_3 = 3
TYPE_CORNER_4 = 4
TYPE_CORNER_5 = 5

dim ves_corner[]
dim ttype_corner[]
dim itype_corner[] : i=0
i=i+1 : itype_corner[i]=TYPE_CORNER_1 : ttype_corner[i] = "L100x7"
i=i+1 : itype_corner[i]=TYPE_CORNER_2 : ttype_corner[i] = "L100x8"
i=i+1 : itype_corner[i]=TYPE_CORNER_3 : ttype_corner[i] = "L110x70x8"
i=i+1 : itype_corner[i]=TYPE_CORNER_4 : ttype_corner[i] = "L100x63x7"
i=i+1 : itype_corner[i]=TYPE_CORNER_5 : ttype_corner[i] = "L100x63x8"

StandingB = 1
TemporaryB = 2
HstrengthB = 3
ChimanchorB = 4
ManchorB = 5
FoundB = 6
dim ibolt_type[]
dim tbolt_type[] : i=0
i=i+1 : ibolt_type[i]=StandingB : tbolt_type[i] = "Постоянный"
i=i+1 : ibolt_type[i]=TemporaryB : tbolt_type[i] = "Временный"
i=i+1 : ibolt_type[i]=HstrengthB : tbolt_type[i] = "Высокопрочный"
i=i+1 : ibolt_type[i]=ManchorB : tbolt_type[i] = "Анкер"
i=i+1 : ibolt_type[i]=ChimanchorB : tbolt_type[i] = "Химанкер"
i=i+1 : ibolt_type[i]=FoundB : tbolt_type[i] = "Фундаментный болт"
!!!=======================================

dim arr_t[]

dim ttype_weld[]
dim itype_weld[] : i=0
i=i+1 : itype_weld[i]=0 : ttype_weld[i] = "Автоматическая"
i=i+1 : itype_weld[i]=1 : ttype_weld[i] = "Ручная"
i=i+1 : itype_weld[i]=2 : ttype_weld[i] = "Нет"

dim ttype_zagf_flange[]
dim itype_zagf_flange[] : i=0
i=i+1 : itype_zagf_flange[i]=0 : ttype_zagf_flange[i] = "Нет"
i=i+1 : itype_zagf_flange[i]=1 : ttype_zagf_flange[i] = "Ребро сверху"
i=i+1 : itype_zagf_flange[i]=2 : ttype_zagf_flange[i] = "Ребро снизу"

dim paramname_coord[2][3]
paramname_coord[is][ix] = "Начало-x"
paramname_coord[is][iy] = "Начало-y"
paramname_coord[is][iz] = "Начало-z"
paramname_coord[ie][ix] = "Конец-x"
paramname_coord[ie][iy] = "Конец-y"
paramname_coord[ie][iz] = "Конец-z"

dim paramname_cut[2][4]
paramname_cut[is][in] = "Подрезка начала-низ"
paramname_cut[is][iv] = "Подрезка начала-верх"
paramname_cut[is][ip] = "Подрезка начала-право"
paramname_cut[is][il] = "Подрезка начала-лево"
paramname_cut[ie][in] = "Подрезка конца-низ"
paramname_cut[ie][iv] = "Подрезка конца-верх"
paramname_cut[ie][ip] = "Подрезка конца-право"
paramname_cut[ie][il] = "Подрезка конца-лево"

dim ttype_anglecut[]
dim itype_anglecut[] : i=0
i=i+1 : itype_anglecut[i]=0 : ttype_anglecut[i] = "Заданный угол"
i=i+1 : itype_anglecut[i]=1 : ttype_anglecut[i] = "Вертикально"
i=i+1 : itype_anglecut[i]=2 : ttype_anglecut[i] = "Горизонтально"

dim ttype_cutf[]
dim itype_cutf[] : i=0
i=i+1 : itype_cutf[i]=1 : ttype_cutf[i] = "Подрезка профиля лево/право"
i=i+1 : itype_cutf[i]=2 : ttype_cutf[i] = "Подрезка профиля низ/верх"
!i=i+1 : itype_cutf[i]=3 : ttype_cutf[i] = "Подрезка профиля в двух плоскостях"

dim ttype_coord[]
dim itype_coord[] : i=0
i=i+1 : itype_coord[i]=1 : ttype_coord[i] = "По координатам начала/конца"
i=i+1 : itype_coord[i]=2 : ttype_coord[i] = "По длине и углам"

dim tname_prof[]
dim iname_prof[] : i=0
i=i+1 : iname_prof[i]=1 : tname_prof[i] = "Круглая труба"
i=i+1 : iname_prof[i]=2 : tname_prof[i] = "Квадратная труба"
i=i+1 : iname_prof[i]=3 : tname_prof[i] = "Швеллер"
i=i+1 : iname_prof[i]=4 : tname_prof[i] = "Двутавр"
i=i+1 : iname_prof[i]=5 : tname_prof[i] = "Уголок"
i=i+1 : iname_prof[i]=8 : tname_prof[i] = "Уголок гнутый"
i=i+1 : iname_prof[i]=9 : tname_prof[i] = "Швеллер гнутый"

dim imirror_axis[]
dim tmirror_axis[] : i=0
i=i+1 : imirror_axis[i]=0 : tmirror_axis[i] = "Нет"
i=i+1 : imirror_axis[i]=1 : tmirror_axis[i] = "По горизонтали"
i=i+1 : imirror_axis[i]=2 : tmirror_axis[i] = "По вертикали"

dim idlin_spec_type[]
dim tdlin_spec_type[] : i=0
i=i+1 : idlin_spec_type[i]=0 : tdlin_spec_type[i] = "Фактическая длина"
i=i+1 : idlin_spec_type[i]=1 : tdlin_spec_type[i] = "Длина линии построения"
i=i+1 : idlin_spec_type[i]=2 : tdlin_spec_type[i] = "Длина без отступов"

dim itype_offset_prof[]
dim ttype_offset_prof[] : i=0
i=i+1 : itype_offset_prof[i]=0 : ttype_offset_prof[i] = "Нет"
i=i+1 : itype_offset_prof[i]=1 : ttype_offset_prof[i] = "Ц.т.сечения"
for i=3 to 8+2
	itype_offset_prof[i]=i-1 : ttype_offset_prof[i] = "точка " + str("%.0",i-1)
next i

if GLOB_PREVIEW_MODE = 0 then
	otm_z = SYMB_POS_Z
	parameters otm_z=otm_z
	if s_by_otm then
		pos_prof[is][iz] = otm_s-otm_z
		parameters pos_prof[is][iz] = otm_s-otm_z
	else
		otm_s = otm_z+ac_bottomlevel
		parameters otm_s = otm_s
		LOCK "otm_s"
	endif
	if e_by_otm then
		pos_prof[ie][iz] = otm_e-otm_z
		parameters pos_prof[ie][iz] = otm_e-otm_z
	else
		otm_e = otm_z+ac_toplevel 
		parameters otm_e = otm_e
		LOCK "otm_e"
	endif
endif

if s_by_otm then
	pos_prof[is][iz] = otm_s-otm_z
else
	otm_s = otm_z+ac_bottomlevel
	parameters otm_s = otm_s
	LOCK "otm_s"
endif
if e_by_otm then
	pos_prof[ie][iz] = otm_e-otm_z
else
	otm_e = otm_z+ac_toplevel 
	parameters otm_e = otm_e
	LOCK "otm_e"
endif
LOCK "otm_z"

!Координаты середины профиля
half_x = (pos_prof[is][ix]+pos_prof[ie][ix])/2
half_y = (pos_prof[is][iy]+pos_prof[ie][iy])/2
half_z = (pos_prof[is][iz]+pos_prof[ie][iz])/2

if swap_axis and (name_prof_i=2 or name_prof_i=5 or name_prof_i=8) then
	tttt = ws
	ws = ds
	ds = tttt
else
	ws = ws
	ds = ds
endif

jt=15
!Максимальные размеры (ширина/высота)
if name_prof_i=1 then
	aa=ds/2000
	bb=aa
	t_sten = ws/1000
	t_sten_1 = t_sten
	ax_y = 0 : ax_x = 0
endif
if name_prof_i=2 then
	aa=ws/2000
	bb=ds/2000
	t_sten = wt/1000
	t_sten_1 = t_sten
	ax_y = 0 : ax_x = 0
endif
if name_prof_i=3 then
	aa=ws/2000
	bb=ds/2000
	t_sten = ft/1000
	t_sten_1 = wt/1000
	ax_y = -aa+ax_y/1000 : ax_x = 0
endif
if name_prof_i=4 then
	aa=ws/2000
	bb=ds/2000
	t_sten = ft/1000
	t_sten_1 = wt/1000
	ax_y = 0 : ax_x = 0
endif
if name_prof_i=5 then
	aa=ws/2000
	bb=ds/2000
	t_sten = wt/1000
	t_sten_1 = t_sten
	ax_y = -aa + dbf/1000 : ax_x = -bb + tr/1000
endif
if name_prof_i=8 then
	aa=ws/2000
	bb=ds/2000
	t_sten = wt/1000
	t_sten_1 = t_sten
	ax_y = 0 : ax_x = 0
endif
if name_prof_i=9 then
	aa=ws/2000
	bb=ds/2000
	t_sten = wt/1000
	t_sten_1 = t_sten
	ax_y = 0 : ax_x = 0
endif

!Для кругляка, квадрата, полосы и подобного не вырезаем внутреннее отверстие
has_hole=1
det_lvl_3d_prof = 0
if strstr(tip_p,"Полоса")>0 then 
	has_hole=0
	det_lvl_3d_prof = 1
endif
if strstr(tip_p,"Кругляк")>0 then
	has_hole=0
	det_lvl_3d_prof = 1
endif
if strstr(tip_p,"Квадрат")>0 then
	has_hole=0
	det_lvl_3d_prof = 1
endif

!Для заглушки с фасонкой подрезка профиля не производится
null_ang_s = 1 : if type_fin_s=3 then null_ang_s = 0
null_ang_e = 1 : if type_fin_e=3 then null_ang_e = 0

z_ang_left_l = null_ang_s*(pos_cutf[is][ip]-pos_cutf[is][il])/2
z_ang_left_n = null_ang_s*(pos_cutf[is][in]-pos_cutf[is][iv])/2
delta_th_left_l = z_th_left*tan(z_ang_left_l)
delta_th_left_n = z_th_left*tan(z_ang_left_n)
z_ang_right_l = null_ang_e*(pos_cutf[ie][ip]-pos_cutf[ie][il])/2
z_ang_right_n = null_ang_e*(pos_cutf[ie][in]-pos_cutf[ie][iv])/2
delta_th_right_l = z_th_right*tan(z_ang_right_l)
delta_th_right_n = z_th_right*tan(z_ang_right_n)


!Углы поворота профиля в местной СК и длина с учётом удлинения
dx = offset_prof[ie][ix] - offset_prof[is][ix]
dy = offset_prof[ie][iy] - offset_prof[is][iy]
dz = l_pos_prof
offset_r = SQR(dz*dz-dx*dx-dy*dy)
offset_ang = atn(dx/l_pos_prof)
offset_ang_pl = atn(dy/l_pos_prof)

!На сколько нужно удлинить основное тело? А вот на сколько:
lsl = bb*tan(null_ang_s*pos_cutf[is][il])
lsp = -bb*tan(null_ang_s*pos_cutf[is][ip])
lsn = -aa*tan(null_ang_s*pos_cutf[is][in])
lsv = aa*tan(null_ang_s*pos_cutf[is][iv])
max_cut_s = max(lsl, lsp, lsn, lsv, 0)
lel = bb*tan(null_ang_e*pos_cutf[ie][il])
lep = -bb*tan(null_ang_e*pos_cutf[ie][ip])
len = -aa*tan(null_ang_e*pos_cutf[ie][in])
lev = aa*tan(null_ang_e*pos_cutf[ie][iv])
max_cut_e = max(lel, lep, len, lev, 0)
max_cut = max_cut_s+max_cut_e

!! Стартовая точка для обсчёта локальной системы координат
dim start_coord[1][3]
dim coord_arr[][3]
start_coord[1][ix] = pos_prof[is][ix] : start_coord[1][iy] = pos_prof[is][iy] : start_coord[1][iz] = pos_prof[is][iz]

!Отступы начала тела профиля
d_z_th_left = z_th_left
d_z_th_right = z_th_right
if abs(cos(null_ang_s*pos_cutf[is][iv]))>EPS and type_cutf_s = 2 then d_z_th_left = z_th_left/cos(null_ang_s*pos_cutf[is][iv])
if abs(cos(null_ang_s*pos_cutf[is][ip]))>EPS and type_cutf_s = 1 then d_z_th_left = z_th_left/cos(null_ang_s*pos_cutf[is][ip])
if abs(cos(null_ang_e*pos_cutf[ie][iv]))>EPS and type_cutf_e = 2 then d_z_th_right = z_th_right/cos(null_ang_e*pos_cutf[ie][iv])
if abs(cos(null_ang_e*pos_cutf[ie][ip]))>EPS and type_cutf_e = 1 then d_z_th_right = z_th_right/cos(null_ang_e*pos_cutf[ie][ip])

offset_body_s = (type_fin_s=1)*(d_z_th_left)+(type_fin_s=3)*(zagf_h_left+z_th_left)+offset_s+cut_axis_s*max(lsl, lsp, lsn, lsv)
offset_body_e = (type_fin_e=1)*(d_z_th_right)+(type_fin_e=3)*(zagf_h_right+z_th_right)+offset_e+cut_axis_e*max(lel, lep, len, lev)

!Обработка отрицательного отступа (т.е. выступа)
add_offset_s = abs(offset_s)*(offset_s<EPS)
add_offset_e = abs(offset_e)*(offset_e<EPS)

start_cut_s = offset_s+(type_fin_s=1)*(d_z_th_left)
start_cut_e = offset_e+(type_fin_e=1)*(d_z_th_right)
offset_body_2d_s = offset_body_s * sin(ang)
offset_body_2d_e = offset_body_e * sin(ang)

if abs(dr)>EPS then
	rad_path_out=rad_path+bb
	d=sqr(rad_path_out*rad_path_out-max_cut_s*max_cut_s/4)
	alp_cut_s = 2*acs(d/rad_path_out)
	max_cutl_s = (pi*rad_path_out*alp_cut_s)/180
	d=sqr(rad_path_out*rad_path_out-max_cut_e*max_cut_e/4)
	alp_cut_e = 2*acs(d/rad_path_out)
	max_cutl_e = (pi*rad_path_out*alp_cut_e)/180
endif

!Массив привязок оси
dim offset_prof_arr[10][2] : i=0
i=1 : offset_prof_arr[i][ix]=0	 : offset_prof_arr[i][iy]=0 		!Нет
i=2 : offset_prof_arr[i][ix]=ax_y	 : offset_prof_arr[i][iy]=ax_x 	!Ц.т.
i=3 : offset_prof_arr[i][ix]=-aa	 : offset_prof_arr[i][iy]=0 	!2
i=4 : offset_prof_arr[i][ix]=-aa	 : offset_prof_arr[i][iy]=bb 	!3
i=5 : offset_prof_arr[i][ix]=0 	 : offset_prof_arr[i][iy]=bb 		!4
i=6 : offset_prof_arr[i][ix]=aa 	 : offset_prof_arr[i][iy]=bb	!5
i=7 : offset_prof_arr[i][ix]=aa  	 : offset_prof_arr[i][iy]=0 	!6
i=8 : offset_prof_arr[i][ix]=aa 	 : offset_prof_arr[i][iy]=-bb 	!7
i=9 : offset_prof_arr[i][ix]=0 	 : offset_prof_arr[i][iy]=-bb 		!8
i=10 : offset_prof_arr[i][ix]=-aa 	 : offset_prof_arr[i][iy]=-bb 	!9


dim axis_coord_arr[][2] : i=0
i=i+1 : axis_coord_arr[i][ix]=ax_y	 : axis_coord_arr[i][iy]=ax_x
if name_prof_i = 3 or name_prof_i = 9 then
	i=i+1 : axis_coord_arr[i][ix]=ax_y	 : axis_coord_arr[i][iy]=bb
	i=i+1 : axis_coord_arr[i][ix]=ax_y	 : axis_coord_arr[i][iy]=-bb
	i=i+1 : axis_coord_arr[i][ix]=-aa	 : axis_coord_arr[i][iy]=ax_x
else
	if name_prof_i = 5 or name_prof_i = 8 then
		i=i+1 : axis_coord_arr[i][ix]=ax_y	 : axis_coord_arr[i][iy]=-bb
		i=i+1 : axis_coord_arr[i][ix]=-aa	 : axis_coord_arr[i][iy]=ax_x
	else
		if name_prof_i = 4 then
			i=i+1 : axis_coord_arr[i][ix]=0	 : axis_coord_arr[i][iy]=bb
			i=i+1 : axis_coord_arr[i][ix]=0	 : axis_coord_arr[i][iy]=-bb
			i=i+1 : axis_coord_arr[i][ix]=t_sten_1	 : axis_coord_arr[i][iy]=0
			i=i+1 : axis_coord_arr[i][ix]=-t_sten_1	 : axis_coord_arr[i][iy]=0
		else
			i=i+1 : axis_coord_arr[i][ix]=0	 : axis_coord_arr[i][iy]=bb
			i=i+1 : axis_coord_arr[i][ix]=0	 : axis_coord_arr[i][iy]=-bb
			i=i+1 : axis_coord_arr[i][ix]=aa	 : axis_coord_arr[i][iy]=0
			i=i+1 : axis_coord_arr[i][ix]=-aa	 : axis_coord_arr[i][iy]=0
		endif
	endif
endif

!Глобальные координаты смещённой оси
dim offset_prof_glob[20][3]
dim coord_arr_[20][3]
for inx_c = 1 to 10
	coord_arr_[inx_c][ix] = offset_prof_arr[inx_c][ix] + offset_prof[is][ix]
	coord_arr_[inx_c][iy] = offset_prof_arr[inx_c][iy] + offset_prof[is][iy]
	coord_arr_[inx_c][iz] = 0
next inx_c
for inx_c = 11 to 20
	coord_arr_[inx_c][ix] = offset_prof_arr[inx_c-10][ix] + offset_prof[ie][ix]
	coord_arr_[inx_c][iy] = offset_prof_arr[inx_c-10][iy] + offset_prof[ie][iy]
	coord_arr_[inx_c][iz] = l_pos_prof
next inx_c
call "macro_rotate" parameters coord_arr = coord_arr_, start_coord = start_coord, axis = 4, ang_pl = -ang_pl, ang_axis = -ang_axis, ang_x = -ang, bDict=0, RETURNED_PARAMETERS offset_prof_glob

!Размеры заглушек с подрезкой
if abs(out_left)<EPS then out_left=-t_sten
if abs(out_left_vn)<EPS then out_left_vn = out_left
if abs(out_left_p)<EPS then out_left_p = out_left
if abs(out_left_v)<EPS then out_left_v = out_left_vn

z_a_left_v = -aa/cos(null_ang_s*pos_cutf[is][iv]) - out_left_v
z_a_left_n = aa/cos(null_ang_s*pos_cutf[is][in]) + out_left_vn
z_b_left_l = -bb/cos(null_ang_s*pos_cutf[is][il]) - out_left_p
z_b_left_p = bb/cos(null_ang_s*pos_cutf[is][ip]) + out_left

if abs(out_right)<EPS then out_right=-t_sten
if abs(out_right_vn)<EPS then out_right_vn = out_right
if abs(out_right_p)<EPS then out_right_p = out_right
if abs(out_right_v)<EPS then out_right_v = out_right_vn

z_a_right_v = -aa/cos(null_ang_e*pos_cutf[ie][iv]) - out_right_v
z_a_right_n = aa/cos(null_ang_e*pos_cutf[ie][in]) + out_right_vn
z_b_right_l = -bb/cos(null_ang_e*pos_cutf[ie][il]) - out_right_p
z_b_right_p = bb/cos(null_ang_e*pos_cutf[ie][ip]) + out_right

k_okr = 400
if z_a_left_v>0.001 then z_a_left_v = round_int(z_a_left_v*k_okr)/k_okr
if z_a_left_n>0.001 then z_a_left_n = round_int(z_a_left_n*k_okr)/k_okr
if z_b_left_l>0.001 then z_b_left_l = round_int(z_b_left_l*k_okr)/k_okr
if z_b_left_p>0.001 then z_b_left_p = round_int(z_b_left_p*k_okr)/k_okr
if z_a_right_v>0.001 then z_a_right_v = round_int(z_a_right_v*k_okr)/k_okr
if z_a_right_n>0.001 then z_a_right_n = round_int(z_a_right_n*k_okr)/k_okr
if z_b_right_l>0.001 then z_b_right_l = round_int(z_b_right_l*k_okr)/k_okr
if z_b_right_p>0.001 then z_b_right_p = round_int(z_b_right_p*k_okr)/k_okr

!Размеры врезных листов
zf_a_left = aa + out_left_vn * (zagf_hoff_left>EPS)
zf_b_left = bb + out_left * (zagf_hoff_left>EPS)
zf_a_right = aa + out_right_vn * (zagf_hoff_right>EPS)
zf_b_right = bb + out_right * (zagf_hoff_right>EPS)


zf_h_left_v = zagf_h_left+aa*tan(pos_cutf[is][iv])+z_th_left
zf_h_left_n = zagf_h_left-aa*tan(pos_cutf[is][in])+z_th_left
zf_h_left_l = zagf_h_left+bb*tan(pos_cutf[is][il])+z_th_left
zf_h_left_p = zagf_h_left-bb*tan(pos_cutf[is][ip])+z_th_left

zf_h_right_v = zagf_h_right+aa*tan(pos_cutf[ie][iv])+z_th_right
zf_h_right_n = zagf_h_right-aa*tan(pos_cutf[ie][in])+z_th_right
zf_h_right_l = zagf_h_right+bb*tan(pos_cutf[ie][il])+z_th_right
zf_h_right_p = zagf_h_right-bb*tan(pos_cutf[ie][ip])+z_th_right

if zf_a_left>0.001 then zf_a_left = round_int(zf_a_left*k_okr)/k_okr
if zf_b_left>0.001 then zf_b_left = round_int(zf_b_left*k_okr)/k_okr
if zf_a_right>0.001 then zf_a_right = round_int(zf_a_right*k_okr)/k_okr
if zf_b_right>0.001 then zf_b_right = round_int(zf_b_right*k_okr)/k_okr
if zf_h_left_v>0.001 then zf_h_left_v = round_int(zf_h_left_v*k_okr)/k_okr
if zf_h_left_n>0.001 then zf_h_left_n = round_int(zf_h_left_n*k_okr)/k_okr
if zf_h_left_l>0.001 then zf_h_left_l = round_int(zf_h_left_l*k_okr)/k_okr
if zf_h_left_p>0.001 then zf_h_left_p = round_int(zf_h_left_p*k_okr)/k_okr
if zf_h_right_v>0.001 then zf_h_right_v = round_int(zf_h_right_v*k_okr)/k_okr
if zf_h_right_n>0.001 then zf_h_right_n = round_int(zf_h_right_n*k_okr)/k_okr
if zf_h_right_l>0.001 then zf_h_right_l = round_int(zf_h_right_l*k_okr)/k_okr
if zf_h_right_p>0.001 then zf_h_right_p = round_int(zf_h_right_p*k_okr)/k_okr

ac_toplevel_t = max(pos_prof[ie][iz], pos_prof[is][iz])
ac_bottomlevel_t = min(pos_prof[ie][iz],pos_prof[is][iz])
if abs(ac_toplevel_t-ac_bottomlevel_t)<EPS then
	ac_toplevel_t = ac_toplevel_t + aa
	ac_bottomlevel_t = ac_bottomlevel_t - aa
endif
ac_toplevel = ac_toplevel_t
ac_bottomlevel = ac_bottomlevel_t

el_type_view = 3
if abs((abs(ang + etta_call) mod 180) - 90)<EPS and el_type_view = 3 then el_type_view = 1
if abs(ang + etta_call) mod 180 < EPS and el_type_view = 3 then el_type_view = 2


!!!!! ================== РАСЧЁТЫ =====================
!==================== Коэффициенты для подбора по гибкости ====================
type_construction_1 = 1
type_construction_2 = 2
type_construction_3 = 3
type_construction_4 = 4
type_construction_5 = 5
type_construction_6 = 6
type_construction_7 = 7
type_construction_8 = 8
type_construction_9 = 9
type_construction_10 = 10
type_construction_11 = 11
type_construction_12 = 12


dim itype_construction [] : dim ttype_construction [] : i = 0
i=i+1 : itype_construction[i]= type_construction_1 : ttype_construction[i] = "Не определено"
i=i+1 : itype_construction[i]= type_construction_2 : ttype_construction[i] = "Основная колонна"
i=i+1 : itype_construction[i]= type_construction_3 : ttype_construction[i] = "Стойка фахверка"
i=i+1 : itype_construction[i]= type_construction_4 : ttype_construction[i] = "Ригели фахверка"
i=i+1 : itype_construction[i]= type_construction_5 : ttype_construction[i] = "Связи крестовые"
i=i+1 : itype_construction[i]= type_construction_6 : ttype_construction[i] = "Связи раскосные"
i=i+1 : itype_construction[i]= type_construction_7 : ttype_construction[i] = "Распорки"
i=i+1 : itype_construction[i]= type_construction_8 : ttype_construction[i] = "ВП фермы"
i=i+1 : itype_construction[i]= type_construction_9 : ttype_construction[i] = "НП фермы"
i=i+1 : itype_construction[i]= type_construction_10 : ttype_construction[i] = "ОП раскос Фермы"
i=i+1 : itype_construction[i]= type_construction_11 : ttype_construction[i] = "РР раскос Фермы"
i=i+1 : itype_construction[i]= type_construction_12 : ttype_construction[i] = "Балки (прогоны)"

error_msg = "" : result_msg = ""
IF type_construction > 1 THEN 
	error_msg_1 = ""
	result_msg_1 = ""
	call "Проверка гибкости" parameters name_prof_i = name_prof_i, type_construction = type_construction, l_pos_prof = l_pos_prof, ds = ds, ws = ws, i_x=i_x, i_y=i_y RETURNED_PARAMETERS error_msg_1, result_msg_1
	error_msg = error_msg + error_msg_1
	result_msg = result_msg + result_msg_1
	error_msg_2 = ""
	result_msg_2 = ""
	call "Расчеты по прочности" PARAMETERS type_construction=type_construction, stal_marka=stal_marka, Nx=Nx, Qx=Qx, Mx=Mx, Ase=Ase, Ix_x=Ix_x, Wx_x=Wx_x, Sx_x=Sx_x, i_x=i_x, Iy_y=Iy_y, Wy_y=Wy_y, i_y=i_y  RETURNED_PARAMETERS error_msg_2 , result_msg_2
	error_msg = error_msg + error_msg_2
	result_msg = result_msg + result_msg_2
endif
