
parameters max_tip_p = 30
parameters max_sloi = 15
parameters is_load = 0
parameters is_save = 0

if IS_FIRST then
	parameters tip_p = arr1_txt
	parameters n_sloi = arr1_num
	parameters s_sloi = arr2_num
	parameters v_sloi = arr2_num
	parameters t_sloi = arr2_num
	parameters h_tip = arr1_num
	parameters mat_tip = arr1_num
	parameters t_sloi_min = arr2_num
	parameters comment = arr1_txt
	parameters germ_pot = arr1_num
	parameters fill_tip = arr1_num
	parameters fill_pen_tip = arr1_num
	parameters fill_bac_tip = arr1_num
	parameters tip_p_plint = arr1_num
endif
!
!if GLOB_MODPAR_NAME = "tip_p_plint" then
!	for ii = 1 to max_tip_p
!		sn = ""
!		rr = request("Name_of_fill", tip_p_plint[ii], sn)
!		if STRSTR(sn, "Тип")=0 or STRSTR(sn, ":")=0 then 
!			tip_p_plint[ii] = 0
!		endif
!	next ii
!	parameters tip_p_plint = tip_p_plint
!endif

values "n_sloi" range[1,14]

if GLOB_MODPAR_NAME = "tip_p" or vardim1(used_tip_p)<2 then
	if not(is_load) then
		km = 0
		for ii = 1 to max_tip_p
			if tip_p[ii]<>"-" then 
				km = km + 1
				used_tip_p[km] = tip_p[ii]
			endif
		next ii
		parameters used_tip = used_tip_p
	endif
endif
values "copy_from" used_tip_p
for i = 1 to min(max_tip_p, vardim2(t_sloi))
	n_s = n_sloi[i]
	s = 0
	for j = 1 to n_s
		if j<=vardim2(t_sloi) and i<=vardim1(t_sloi) then s = s + t_sloi[i][j]
	next j
	h_tip[i] = s
next i
parameters h_tip = h_tip

if GLOB_UI_BUTTON_ID > max_tip_p + 20 and GLOB_UI_BUTTON_ID < max_tip_p*3  then
	inx_to = GLOB_UI_BUTTON_ID - max_tip_p - 20
	inx_from = 0
	for i = 1 to max_tip_p
		if tip_p[i] = copy_from then
			inx_from = i
		endif
	next i
	n_sloi[inx_to] = n_sloi[inx_from]
	mat_tip[inx_to] = mat_tip[inx_from]
	germ_pot[inx_to] = germ_pot[inx_from]
	fill_tip[inx_to] = fill_tip[inx_from]
	fill_pen_tip[inx_to] = fill_pen_tip[inx_from]
	fill_bac_tip[inx_to] = fill_bac_tip[inx_from]
	if n_sloi[inx_to]>0 then
		for j = 1 to min(n_sloi[inx_to]+1,10)
			s_sloi[inx_to][j] = s_sloi[inx_from][j]
			t_sloi[inx_to][j] = t_sloi[inx_from][j]
			t_sloi_min[inx_to][j] = t_sloi_min[inx_from][j]
			v_sloi[inx_to][j] = v_sloi[inx_from][j]
		next j
	endif
	parameters n_sloi = n_sloi
	parameters mat_tip = mat_tip
	parameters s_sloi = s_sloi
	parameters t_sloi = t_sloi
	parameters t_sloi_min = t_sloi_min
	parameters v_sloi = v_sloi
	parameters germ_pot = germ_pot
	parameters fill_tip = fill_tip
	parameters fill_pen_tip = fill_pen_tip
	parameters fill_bac_tip = fill_bac_tip
endif

if GLOB_MODPAR_NAME = "is_load" and is_load then
	parameters is_load = 0
	gosub "load_txt"
	parameters tip_p = tip_p
	parameters n_sloi = n_sloi
	parameters mat_tip = mat_tip
	parameters s_sloi = s_sloi
	parameters t_sloi = t_sloi
	parameters t_sloi_min = t_sloi_min
	parameters v_sloi = v_sloi
	parameters f_info = f_info
	parameters germ_pot = germ_pot
	parameters fill_tip = fill_tip
	parameters fill_pen_tip = fill_pen_tip
	parameters fill_bac_tip = fill_bac_tip
endif

if GLOB_MODPAR_NAME = "is_save" and is_save then
	parameters is_save = 0
	gosub "save_txt"
	parameters f_info = f_info
endif


!!!====================================================================================================================================

! === Design ===
values "i3Dmode" 1, 2

! === Appearance ===

values "gs_detlevel_3d_m", 0, 1, 2
values "gs_detlevel_3d" stDet3d
if GLOB_MODPAR_NAME = "gs_detlevel_3d_m" then
	if gs_detlevel_3d_m = 0 then gs_detlevel_3d = stDet3d[1]
	if gs_detlevel_3d_m = 1 then gs_detlevel_3d = stDet3d[2]
	if gs_detlevel_3d_m = 2 then gs_detlevel_3d = stDet3d[3]
	parameters gs_detlevel_3d = gs_detlevel_3d
endif

values "gs_resol" range [3, )

if gs_detlevel_3d_m = 0 then lock "bShowAcc3d", "gs_shadow", "gs_resol"
if gs_detlevel_3d_m = 1 then lock "gs_resol"

if not(bShowGridX) and not(bShowGridY) then lock "penGrid", "penGrid_num"

if not(bShowPatternSymbol) or not(bShowAccPalette) then lock "penPattSymbol_num", "penPattSymbol"


! == Text Style ===

!if GLOB_CONTEXT = 1 or GLOB_CONTEXT = 5 then
	dim font_tlst[], fontnames[]
	qq= request ("FONTNAMES_LIST", "", font_tlst)
	for w=1 to vardim1 (font_tlst)
		if strsub (font_tlst[w], 1, 1)<>"@" then fontnames[vardim1 (fontnames)+1]= font_tlst[w]
	next w
	gosub "fontlist"
!!	values "fontType" fontnames
!endif

if sizFont < 1 then parameters sizFont = 1
if sizFontImp < conv then parameters sizFontImp = conv

if GLOB_MODPAR_NAME ="sizFont" then
	parameters sizFontImp = sizFont * conv
endif
if GLOB_MODPAR_NAME ="sizFontImp" then
	parameters sizFont = sizFontImp / conv
endif

if not(bOpaque) then lock "penOpaque_num", "penOpaque"
if not(bFrame) then lock "penFrame_num", "penFrame"

values "iAlignment" 0-1, 0, 1
values "textLeading" range [50, 200]

if not(bTextArea) then lock "prfxArea"

for w = 1 to vardim1 (bTextFields)
	iTextFields = bitset (iTextFields, w, bTextFields[w])
next w
parameters iTextFields = iTextFields


! === Pen Index Control ===
if GLOB_MODPAR_NAME = "gs_cont_pen" then
	if gs_cont_pen < 1 or gs_cont_pen > 255 then
		gs_cont_pen = min (max (gs_cont_pen, 1), 255)
		parameters gs_cont_pen = gs_cont_pen
	endif
	parameters gs_cont_pen_num = gs_cont_pen
endif
if GLOB_MODPAR_NAME = "gs_cont_pen_num" then
	if gs_cont_pen_num < 1 or gs_cont_pen_num > 255 then
		gs_cont_pen_num = min (max (gs_cont_pen_num, 1), 255)
		parameters gs_cont_pen_num = gs_cont_pen_num
	endif
	parameters gs_cont_pen = gs_cont_pen_num
endif

if GLOB_MODPAR_NAME = "gs_fill_pen" then
	if gs_fill_pen < 1 or gs_fill_pen > 255 then
		gs_fill_pen = min (max (gs_fill_pen, 1), 255)
		parameters gs_fill_pen = gs_fill_pen
	endif
	parameters gs_fill_pen_num = gs_fill_pen
endif
if GLOB_MODPAR_NAME = "gs_fill_pen_num" then
	if gs_fill_pen_num < 1 or gs_fill_pen_num > 255 then
		gs_fill_pen_num = min (max (gs_fill_pen_num, 1), 255)
		parameters gs_fill_pen_num = gs_fill_pen_num
	endif
	parameters gs_fill_pen = gs_fill_pen_num
endif

if GLOB_MODPAR_NAME = "gs_back_pen" then
	if gs_back_pen < -1 or gs_back_pen > 255 then
		gs_back_pen = min (max (gs_back_pen, -1), 255)
		parameters gs_back_pen = gs_back_pen
	endif
	parameters gs_back_pen_num = gs_back_pen
endif
if GLOB_MODPAR_NAME = "gs_back_pen_num" then
	if gs_back_pen_num < 1 or gs_back_pen_num > 255 then
		gs_back_pen_num = min (max (gs_back_pen_num, 1), 255)
		parameters gs_back_pen_num = gs_back_pen_num
	endif
	parameters gs_back_pen = gs_back_pen_num
endif

if GLOB_MODPAR_NAME = "penGrid" then
	if penGrid < 1 or penGrid > 255 then
		penGrid = min (max (penGrid, 1), 255)
		parameters penGrid = penGrid
	endif
	parameters penGrid_num = penGrid
endif
if GLOB_MODPAR_NAME = "penGrid_num" then
	if penGrid_num < 1 or penGrid_num > 255 then
		penGrid_num = min (max (penGrid_num, 1), 255)
		parameters penGrid_num = penGrid_num
	endif
	parameters penGrid = penGrid_num
endif

if GLOB_MODPAR_NAME = "penPattSymbol" then
	if penPattSymbol < 1 or penPattSymbol > 255 then
		penPattSymbol = min (max (penPattSymbol, 1), 255)
		parameters penPattSymbol = penPattSymbol
	endif
	parameters penPattSymbol_num = penPattSymbol
endif
if GLOB_MODPAR_NAME = "penPattSymbol_num" then
	if penPattSymbol_num < 1 or penPattSymbol_num > 255 then
		penPattSymbol_num = min (max (penPattSymbol_num, 1), 255)
		parameters penPattSymbol_num = penPattSymbol_num
	endif
	parameters penPattSymbol = penPattSymbol_num
endif

if GLOB_MODPAR_NAME = "penCeiPanel3d" then
	if penCeiPanel3d < 1 or penCeiPanel3d > 255 then
		penCeiPanel3d = min (max (penCeiPanel3d, 1), 255)
		parameters penCeiPanel3d = penCeiPanel3d
	endif
	parameters penCeiPanel3d_num = penCeiPanel3d
endif
if GLOB_MODPAR_NAME = "penCeiPanel3d_num" then
	if penCeiPanel3d_num < 1 or penCeiPanel3d_num > 255 then
		penCeiPanel3d_num = min (max (penCeiPanel3d_num, 1), 255)
		parameters penCeiPanel3d_num = penCeiPanel3d_num
	endif
	parameters penCeiPanel3d = penCeiPanel3d_num
endif

if GLOB_MODPAR_NAME = "penText" then
	if penText < 1 or penText > 255 then
		penText = min (max (penText, 1), 255)
		parameters penText = penText
	endif
	parameters penText_num = penText
endif
if GLOB_MODPAR_NAME = "penText_num" then
	if penText_num < 1 or penText_num > 255 then
		penText_num = min (max (penText_num, 1), 255)
		parameters penText_num = penText_num
	endif
	parameters penText = penText_num
endif

if GLOB_MODPAR_NAME = "penOpaque" then
	if penOpaque < -1 or penOpaque > 255 then
		penOpaque = min (max (penOpaque, -1), 255)
		parameters penOpaque = penOpaque
	endif
	parameters penOpaque_num = penOpaque
endif
if GLOB_MODPAR_NAME = "penOpaque_num" then
	if penOpaque_num < -1 or penOpaque_num > 255 then
		penOpaque_num = min (max (penOpaque_num, -1), 255)
		parameters penOpaque_num = penOpaque_num
	endif
	parameters penOpaque = penOpaque_num
endif

if GLOB_MODPAR_NAME = "penFrame" then
	if penFrame < 1 or penFrame > 255 then
		penFrame = min (max (penFrame, 1), 255)
		parameters penFrame = penFrame
	endif
	parameters penFrame_num = penFrame
endif
if GLOB_MODPAR_NAME = "penFrame_num" then
	if penFrame_num < 1 or penFrame_num > 255 then
		penFrame_num = min (max (penFrame_num, 1), 255)
		parameters penFrame_num = penFrame_num
	endif
	parameters penFrame = penFrame_num
endif


!!!!====================================================================================================


end

"save_txt":
	ch1 = OPEN ("DATA", f_name, "SEPARATOR=';', MODE = WA, DIALOG")
	k = 0
	for i = 1 to max_tip_p
		if tip_p[i]<>"-" then 
			key_p = "tp"+tip_p[i]
			k = k + 1
			OUTPUT ch1, "tip_name"+str("%.0",k), 1, tip_p[i]
			OUTPUT ch1, key_p+"n_s", 1, n_sloi[i]
			OUTPUT ch1, key_p+"mat", 1, mat_tip[i]
			OUTPUT ch1, key_p+"comm", 1, comment[i]
			OUTPUT ch1, key_p+"germ", 1, germ_pot[i]
			OUTPUT ch1, key_p+"fill", 1, fill_tip[i]
			OUTPUT ch1, key_p+"fill_pen", 1, fill_pen_tip[i]
			OUTPUT ch1, key_p+"fill_bac", 1, fill_bac_tip[i]
			for j = 1 to max_sloi
				n_row = str("%.0",j)
				OUTPUT ch1, key_p+"s"+n_row, 1, s_sloi[i][j]
				OUTPUT ch1, key_p+"t"+n_row, 1, t_sloi[i][j]*1000
				OUTPUT ch1, key_p+"tmin"+n_row, 1, t_sloi_min[i][j]*1000
				OUTPUT ch1, key_p+"v"+n_row, 1, v_sloi[i][j]
			next j
		endif
	next i
	OUTPUT ch1, "ntip", 1, k
	CLOSE ch1
	f_info = "Сохранено " + str("%.0",k) + " типов"
return

"load_txt":
	ch1 = OPEN ("DATA", f_name, "SEPARATOR=';', MODE = RO, DIALOG")
	n_tip = 0
	n_load = 0
	nr = INPUT (ch1, "ntip", 1, n_tip)
	if nr <> 1 or vartype(n_tip)<>1 then 
		n_tip = 0
		err = err+1
	else
		for k=1 to n_tip
			key = "tip_name"+str("%.0",k)
			t_name = ""
			nr = INPUT (ch1, key, 1, t_name)
			if nr <> 1 then err = err+1
			if err = 0 then gosub "load_tip"
			if err <> 0 then 
				k=n_tip
				n_load = n_load + 1
			endif
		next k
	endif
	CLOSE ch1
	f_info = "Прочитано " + str("%.0",n_load) + " типов из " + str("%.0",n_tip)
	if err then f_info = f_info + ", с ошибками"
return

"load_tip":
	if vartype(t_name)=1 then 
		if t_name=0 then 
			err = err+1
		else
			t_name=str("%.0",t_name)
		endif
	endif
	key_p = "tp"+t_name
	n_sl_load = 0 : nr = INPUT (ch1, key_p+"n_s", 1, n_sl_load)
	if nr <> 1 or vartype(n_sl_load)<>1 then err = err+1
	mat_load = 0 : nr = INPUT (ch1, key_p+"mat", 1, mat_load)
	if nr <> 1 or vartype(mat_load)<>1 then err = err+1
	comment_load = "" : nr = INPUT (ch1, key_p+"comm", 1, comment_load)
	germ_pot_load = 0 : nr = INPUT (ch1, key_p+"germ", 1, germ_pot_load)
	if nr <> 1 or vartype(germ_pot_load)<>1 then err = err+1
	fill_tip_load = 0 : nr = INPUT (ch1, key_p+"fill", 1, fill_tip_load)
	if nr <> 1 or vartype(fill_tip_load)<>1 then err = err+1
	fill_pen_tip_load = 0 : nr = INPUT (ch1, key_p+"fill_pen", 1, fill_pen_tip_load)
	if nr <> 1 or vartype(fill_pen_tip_load)<>1 then err = err+1
	fill_bac_tip_load = 0 : nr = INPUT (ch1, key_p+"fill_bac", 1, fill_bac_tip_load)
	if nr <> 1 or vartype(fill_bac_tip_load)<>1 then err = err+1
	for jj = 1 to max_sloi
		n_row = str("%.0",jj)
		s_tmp = 0
		t_tmp = 0
		tmin_tmp = 0
		v_tmp = 0
		nr = INPUT (ch1, key_p+"s"+n_row, 1, s_tmp)
		if nr <> 1 or vartype(s_tmp)<>1 then err = err+1
		nr = INPUT (ch1, key_p+"t"+n_row, 1, t_tmp)
		if nr <> 1 or vartype(t_tmp)<>1 then err = err+1
		nr = INPUT (ch1, key_p+"tmin"+n_row, 1, tmin_tmp)
		if nr <> 1 or vartype(tmin_tmp)<>1 then err = err+1
		nr = INPUT (ch1, key_p+"v"+n_row, 1, v_tmp)
		if nr <> 1 or vartype(v_tmp)<>1 then err = err+1
		s_load[jj] = s_tmp
		t_load[jj] = t_tmp/1000
		tmin_load[jj] = tmin_tmp/1000
		v_load[jj] = v_tmp
	next jj
	inx_to = 0
	for kl = 1 to max_tip_p
		if tip_p[kl]="-" and inx_to = 0 then inx_to = kl
	next kl
	if inx_to = 0 then err = err+1
	if err = 0 then
		tip_p[inx_to] = t_name
		n_sloi[inx_to] = n_sl_load
		mat_tip[inx_to] = mat_load
		comment[inx_to] = comment_load
		germ_pot[inx_to] = germ_pot_load
		fill_tip[inx_to] = fill_tip_load
		fill_pen_tip[inx_to] = fill_pen_tip_load
		fill_bac_tip[inx_to] = fill_bac_tip_load
		for j = 1 to max_sloi
			s_sloi[inx_to][j] = s_load[j]
			t_sloi[inx_to][j] = t_load[j]
			t_sloi_min[inx_to][j] = tmin_load[j]
			v_sloi[inx_to][j] = v_load[j]
		next j
	endif
return

! ======= Font List ======
"fontlist":
dim fontSep[][], nFontSep[], nSameName[], fontSet[]
fontSep[1][1] = ""
for w=1 to vardim1 (fontnames)
	nFontSep[w]= 1
	fontSep[w][1]= fontnames[w]
	actFont= fontnames[w]+" "
	pos= strstr (actFont, " ")
	ww= 0
	while pos>0 DO
		ww= ww+1
		fontSep[w][ww]= strsub (actFont, 1, pos-1)
		actFont= strsub (actFont, pos+1, 999)
		pos= strstr (actFont, " ")
	endwhile
	nFontSep[w]= ww
next w
for w=1 to vardim1 (fontSep)-1
	n= 0
	sameName= 1
	while n< min (nFontSep[w], nFontSep[w+1]) and n>-0.5 DO
		if fontSep[w][n+1]=fontSep[w+1][n+1] then
			n= n+1
		else
			nSameName[w]= n
			n= -1
		endif
	endwhile
next w

dim fcod[], nFcod[]
fcod[1]= ""
for w=2 to vardim1 (fontnames)
	ftxt= ""
	if nSameName[w-1]>0 then
		for q=nSameName[w-1]+1 to nFontSep[w]
			ftxt= ftxt+" "+fontSep[w][q]
		next q
		ctrl= 0
		for q=1 to vardim1 (fcod)
			if fcod[q]= ftxt then
				ctrl= 1
				nFcod[q]= nFcod[q]+1
			endif
		next q
		if ctrl=0 then
			fcod[vardim1 (nFcod)+1]= ftxt
			nFcod[vardim1 (nFcod)+1]= 1
		endif
	endif
next w

dim fcod2[], nFcod2[], fcod3[], nFcod3[]
ww= 0
for w=1 to vardim1 (fcod)
	if nFcod[w]>1 then
		ww= ww+1
		fcod2[ww]= fcod[w]
		nFcod2[ww]= nFcod[w]
	endif
next w

for w=1 to vardim1 (fcod2)
	for q=w+1 to vardim1 (fcod2)
		if nFcod2[w]<nFcod2[q] then
			qq= nFcod2[w]
			nFcod2[w]= nFcod2[q]
			nFcod2[q]= qq
			qq= fcod2[w]
			fcod2[w]= fcod2[q]
			fcod2[q]= qq
		endif
	next q
next w

for w=1 to vardim1 (fcod2)
	for q=w+1 to vardim1 (fcod2)
		pos= strstr (fcod2[q], fcod2[w])
		if pos>0 then
			fcod2[q]=""
			nFcod2[w]= nFcod2[w]+nFcod2[q]
		endif
	next q
next w
ww= 0
for w=1 to vardim1 (fcod2)
	if fcod2[w]<>"" then
		ww= ww+1
		fcod3[ww]= fcod2[w]
		nFcod3[ww]= nFcod2[w]
	endif
next w

for w=1 to vardim1 (fcod3)
	for q=w+1 to vardim1 (fcod3)
		if nFcod3[w]<nFcod3[q] then
			qq= nFcod3[w]
			nFcod3[w]= nFcod3[q]
			nFcod3[q]= qq
			qq= fcod3[w]
			fcod3[w]= fcod3[q]
			fcod3[q]= qq
		endif
	next q
next w

dim fontset2[]
ww= 0
for w=1 to vardim1 (fontnames)
	for q=1 to vardim1 (fcod3)
		pos= strstr (fontnames[w], fcod3[q])
		if pos>0 then
			fontnames[w]= strsub (fontnames[w], 1, pos-1)
		endif
	next q
next w

actFn= ""
for w=1 to vardim1 (fontnames)
	if actFn<>fontnames[w] then
		ww= ww+1
		actFn= fontnames[w]
		fontset2[ww]= actFn
	endif
next w
values "fontType" fontset2
return
