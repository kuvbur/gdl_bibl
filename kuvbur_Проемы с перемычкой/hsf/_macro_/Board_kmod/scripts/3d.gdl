
! Contact person: <NJ>

! ==============================================================================
! This macro draws the Board
! ------------------------------------------------------------------------------
! Input parameters:
! Geometry ---------------------------------------------------------------------
!	A:						wallhole width (length) (Obsolete)
!	B:						wallhole height (length)
!	refWidth:				reference width in curved walls (length)
!	leftWidth:				wallhole's side distance from the origin at the left side (length)
!	rightWidth:				wallhole's side distance from the origin at the right side (length)
!	AC_Hole_Position_Angle:	Position angle of the window in a curved wall
!	offsY:					for positioning 3D along y (length)
! Functions --------------------------------------------------------------------
!	gs_IsCurved:			Does the window follow the curvature of the wall? (0 / 1)
!	iWindowShape:			Shape of the window (integer)
!								0 = rectangular (default)
!								1 = arched
!							Note: only the rectangular shape can be a Corner Window
! Reveal -----------------------------------------------------------------------
!	iRevealType:
!	gs_reveal_left_angle:
!	gs_reveal_right_angle:
! Corner Function --------------------------------------------------------------
!	bLeftCornerFunction:		Turn macro in Corner Window mode at the left side (0 / 1)
!	leftCornerAngle:		Angle between connected walls in case of Corner Window (angle)
!	leftConnWallThk:		Thickness of the connected wall in case of Corner Window (length)
!	bRightCornerFunction:	Turn macro in Corner Window mode at the right side (0 / 1)
!	rightCornerAngle:		Angle between connected walls in case of Corner Window (angle)
!	rightConnWallThk:		Thickness of the connected wall in case of Corner Window (length)
! Oversize ---------------------------------------------------------------------
!	gs_left_oversize:		Left opening oversize (length)
!	gs_right_oversize:		Right opening oversize (length)
!	gs_lower_oversize:		Lower opening oversize (length)
! Sill -------------------------------------------------------------------------
!	gs_sill_oversize:		Identifies the method as the macro handles the nominal
!								opening sizes when Sill are turned on. (0 / 1)
!	iSillType:				Identifies the type of the Sill.
!								(integer; 1 = Standard Sill, 2 = Brick Sill, 3 = Stone Sill, 4 = Ceramic Sill)
!								(5 = Eternite Sill, 6 = Concrete Tub, 7 = Aluminum Sill)
!	gs_sill_thk:			Thickness of the Sill. (length)
!	gs_board_width:			Width of the Board. (length)
!	gs_board_thk:			Thickness of the Board. (length)
!	gs_board_nosing:		Nosing of the Board. (length)
!	gs_board_angle:			Board slope. (angle)
!	gs_board_ovhg_left:		Board overhang on the left side. (length)
!	gs_board_ovhg_right:	Board overhang on the right side. (length)
!	gs_board_slip_in:		Slip in of the Board. Only effective when iSillType = 2 or iSillType = 3 (length)
!	gs_board_curved:		Board edge is curved or straight. (0 / 1)
!	bShowBoardSplice:		Show or hide the Board's joint line in case of Corner Window  (0 / 1)
! Ganging ----------------------------------------------------------------------
!	gs_stack_left:			Align to door/window on left side (0 / 1)
!	gs_stack_right:			Align to door/window on right side (0 / 1)
!	gs_stack_bottom:		Align to door/window on bottom side (0 / 1)
! 2D Representation ------------------------------------------------------------
!	gs_board_fill:			Type of the fill on the Board. (fill type)
!	gs_board_pen_fg:		Fill pen on the Board. (pen)
!	gs_board_pen_bg:		Fill background pen on the Board. (pen)
! 3D Representation ------------------------------------------------------------
!	lod3D:					Level of detail. Not used. (integer)
!	gs_frame_pen:			Drawing pen of 3D. (pen)
! Materials --------------------------------------------------------------------
!	gs_board_mat:			Board material (material)
!
! Related Global Variables:
!	GLOB_SCRIPT_TYPE
!	GLOB_CONTEXT
!	WALL_THICKNESS
!	WALL_INCL
!	WALL_RESOL
!	WIDO_FRAME_THICKNESS
!	WIDO_SILL
!	WIDO_LEFT_JAMB
!	WIDO_RIGHT_JAMB
!	WIDO_THRES_DEPTH
!	WIDO_HEAD_DEPTH
!	WIDO_ORIG_DIST
!	WIDO_REVEAL_SIDE
!	SYMB_MIRRORED
!	SYMB_ROTANGLE
!	SYMB_FILL
!	SYMB_SECT_PEN
!	SYMB_FILL_PEN
!	SYMB_FBGD_PEN
! ==============================================================================

widoInnerBottomJamb	= 0
if iRevealType = REVEAL_SPLAYED | iRevealType = REVEAL_HISTORIC then
	widoInnerBottomJamb	= gs_reveal_splayed_innerBottom
endif
if iRevealType = REVEAL_DOUBLE then
	widoInnerBottomJamb	= gs_reveal_double_innerBottom
endif

boardLeft_sL	= 0
boardRight_sL	= 0
boardLeft_sR	= 0
boardRight_sR	= 0
boardElevation = -overSizeLower + widoInnerBottomJamb + bBoardElevUsa


! Draw Board -------------------------------------------------------------------

if bDrawBoard & lod3D > 0 & ((WALL_THICKNESS - WIDO_SILL - WIDO_FRAME_THICKNESS + gs_board_nosing) > EPS) & not(gs_stack_bottom) then

! Save the current parameter buffer --------------------------------------------

	dim savedQueueValues[]
	call "SaveQueue_kmod" parameters returned_parameters savedQueueValues

	if gs_board_fill	< 1 then gs_board_fill		= SYMB_FILL
	if gs_board_pen_bg	< 1 then gs_board_pen_bg	= SYMB_FBGD_PEN
	if gs_board_pen_fg	< 1 then gs_board_pen_fg	= SYMB_FILL_PEN
	if gs_board_pen_3D	< 1 then gs_board_pen_3D	= gs_frame_pen		! Compatibility

	rotx -90
	if WIDO_REVEAL_SIDE then
		addy -WIDO_FRAME_THICKNESS
	else
		muly -1
	endif

	resol WALL_RESOL

	if not(gs_turn_plaster_show_3D) then
		thkPlasterAtBoardLeft	= 0
		thkPlasterAtBoardRight	= 0
	endif
	if gs_stack_left then
		thkPlasterAtBoardLeft	= 0
	endif
	if gs_stack_right then
		thkPlasterAtBoardRight	= 0
	endif

! Draw Board -------------------------------------------------------------------

	if bTShapedOpening then
		if gs_board_inside_sl_left & gs_sidelight_left & gs_sidelight_parapet_hgt_left > EPS then
			addz gs_sidelight_parapet_hgt_left + (gs_reveal_double_innerBottom_sL - gs_reveal_double_innerBottom)
			sidelightCutLeft  = 0
			sidelightCutRight = 1
			sidelightCutPosRight = -leftWidth + gs_sidelight_WHole_width_left + bDrawInsideTrim * gs_trim_width_in + gs_reveal_double_innerLeft_sL + thkPlasterAtBoardSlLeft
			gosub "DrawBoard"
			del 1
			boardLeft_sL  = leftWidth + gs_board_ovhg_left - gs_reveal_double_innerLeft_sL - thkPlasterAtBoardSlLeft
			boardRight_sL = -sidelightCutPosRight
		else
			boardLeft_sL  = 0
			boardRight_sL = 0
		endif

		if gs_board_inside_sl_right & gs_sidelight_right & gs_sidelight_parapet_hgt_right > EPS then
			addz gs_sidelight_parapet_hgt_right + (gs_reveal_double_innerBottom_sR - gs_reveal_double_innerBottom)
			sidelightCutLeft  = 1
			sidelightCutRight = 0
			sidelightCutPosLeft = rightWidth - gs_sidelight_WHole_width_right - bDrawInsideTrim * gs_trim_width_in - gs_reveal_double_innerRight_sR - thkPlasterAtBoardSlRight
			gosub "DrawBoard"
			del 1
			boardLeft_sR  = sidelightCutPosLeft
			boardRight_sR = rightWidth  + gs_board_ovhg_right - gs_reveal_double_innerRight_sR - thkPlasterAtBoardSlRight
		else
			boardLeft_sR  = 0
			boardRight_sR = 0
		endif
	else
		sidelightCutLeft  = 0
		sidelightCutRight = 0
		gosub "DrawBoard"

		boardLeft_sL  = 0
		boardRight_sL = 0
		boardLeft_sR  = 0
		boardRight_sR = 0
	endif

! Restore the saved parameter buffer --------------------------------------------

	call "LoadQueue_kmod" parameters savedQueueValues = savedQueueValues
endif


! ==============================================================================
! returning parameters for cutting the casing
! ==============================================================================

dim boardPoly[]
	boardPoly[1] = 0

! --- cutting shape for casing ----------------------------------------------

if iRevealType = REVEAL_DOUBLE_SPLAYED & gs_reveal_bottom_angle > EPS  then
	boardPoly[1] = WIDO_FRAME_THICKNESS - bBoardNnosUsa - EPS	: boardPoly[2] = -boardElevation - EPS * tan(gs_reveal_bottom_angle)
	boardPoly[3] = WIDO_FRAME_THICKNESS - bBoardNnosUsa - EPS 	: boardPoly[4] = -boardElevation - gs_board_thk/cos(gs_reveal_bottom_angle) - EPS * tan(gs_reveal_bottom_angle)
	boardPoly[5] = WALL_THICKNESS + 1							: boardPoly[6] = -boardElevation - gs_board_thk/cos(gs_reveal_bottom_angle) + (WALL_THICKNESS + 1 - WIDO_FRAME_THICKNESS + bBoardNnosUsa + EPS)*tan(gs_reveal_bottom_angle)
	boardPoly[7] = WALL_THICKNESS + 1							: boardPoly[8] = -boardElevation + (WALL_THICKNESS + 1 - WIDO_FRAME_THICKNESS + bBoardNnosUsa + EPS)*tan(gs_reveal_bottom_angle)
	gs_board_angle = gs_reveal_bottom_angle
	boardSideHeight = boardElevation + gs_board_thk / cos(gs_reveal_bottom_angle)
else
	if abs (gs_board_angle) > EPS then
		boardPoly[1] = WIDO_FRAME_THICKNESS - bBoardNnosUsa - EPS 			: boardPoly[2] = -boardElevation
		boardPoly[3] = WIDO_FRAME_THICKNESS - bBoardNnosUsa - EPS 			: boardPoly[4] = -boardElevation - gs_board_thk
		boardPoly[5] = boardPoly[3] + gs_board_thk / tan (gs_board_angle)	: boardPoly[6] = -boardElevation
	else
		boardPoly[1] = WIDO_FRAME_THICKNESS - bBoardNnosUsa - EPS	: boardPoly[2] = -boardElevation
		boardPoly[3] = WIDO_FRAME_THICKNESS - bBoardNnosUsa - EPS 	: boardPoly[4] = -boardElevation - gs_board_thk
		boardPoly[5] = WALL_THICKNESS + 1							: boardPoly[6] = -boardElevation - gs_board_thk
		boardPoly[7] = WALL_THICKNESS + 1							: boardPoly[8] = -boardElevation
	endif
	boardSideHeight = boardElevation + gs_board_thk
endif

end rightRevealPnts[1][1] + gs_board_ovhg_right,	! boardRight
	leftRevealPnts[1][1]  - gs_board_ovhg_left,		! boardLeft
	boardLeft_sL,
	boardRight_sL,
	boardLeft_sR,
	boardRight_sR,
	boardElevation,									! boardBottom
	boardSideHeight,								! boardSideHeight
	gs_board_angle,									! boardSideAngle
	boardPoly										! boardPoly


! ==============================================================================
! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end
! ==============================================================================


! ==============================================================================
! Draw Board
! ==============================================================================

"DrawBoard":
	pen gs_board_pen_3D
	sect_fill gs_board_fill, gs_board_pen_bg, gs_board_pen_fg, gs_board_pen_sectcont

	if iSillType = 1 | not(gs_sill_oversize) then gs_board_slip_in = 0

	if maxBoardAngle > -EPS & gs_board_angle > maxBoardAngle then gs_board_angle = maxBoardAngle
	if gs_board_angle < 0 then gs_board_angle = 0

	addz boardElevation

	if abs(bBoardNnosUsa) > EPS then		! Cut Board with FrameSill
		add 0, leftRevealPnts[idxBoardStartRevealLeft][2] - bBoardNnosUsa, gs_board_thk - gs_rebw_lower
		rotx 90
		roty 90
		cutpoly	4,
			0, 0,
			bBoardNnosUsa, tan(gs_sill_angle) * bBoardNnosUsa,
			bBoardNnosUsa, -0.2,
			0, -0.2
		del 3
	endif

	if iRevealType = REVEAL_DOUBLE_SPLAYED then
		boardAngleTop	 = gs_reveal_bottom_angle
		boardAngleBottom = gs_reveal_bottom_angle
		boardThickness 	 = gs_board_thk / cos(gs_reveal_bottom_angle)
	else
		boardAngleTop	 = gs_board_angle
		boardAngleBottom = 0
		boardThickness	 = gs_board_thk
	endif

	if AC_WallType <> 2 then

		bCurvedAtBoardSide		= (curvedWall & gs_board_curved)
		bCurvedAtWindowFrame	= (curvedWall & gs_IsCurved)

		if not(curvedWall) then

			if sidelightCutLeft then
				py = bpy6 - (bpy6 - bpy7) / (bpx7 - bpx6) * (sidelightCutPosLeft - bpx6)
				put sidelightCutPosLeft,	WIDO_FRAME_THICKNESS,	15, gs_board_mat,
					sidelightCutPosLeft,	py,						15, gs_board_mat
			else
				if thkPlasterAtBoardLeft > EPS then
					startIdx = idxBoardStartPlasterLeft
					endIdx	 = idxBoardEndPlasterLeft
				else
					startIdx = idxBoardStartRevealLeft
					endIdx	 = idxBoardEndRevealLeft
				endif

				if abs(bBoardNnosUsa) > EPS then	! Board Negative Nosing by USA Framesill
					put leftRevealPnts[startIdx][1] + frameWidthLeft,	leftRevealPnts[startIdx][2] - bBoardNnosUsa,	15, gs_board_mat
					put leftRevealPnts[startIdx][1] + frameWidthLeft,	leftRevealPnts[startIdx][2],					15, gs_board_mat
				endif

				for i = startIdx to endIdx
					put leftRevealPnts[i][1], leftRevealPnts[i][2], 8 + 7 * not(gs_stack_left), gs_board_mat	! 15 or 8
				next i

				put	bpx5, bpy5,	 8 + 7 * not(gs_stack_left),							gs_board_mat,	! 15 or 8
					bpx6, bpy6, 13 + 2 * not(gs_stack_left) + bCurvedAtBoardSide * 64,	gs_board_mat	! 15 or 13
			endif

			if sidelightCutRight then
				py = bpy6 - (bpy6 - bpy7) / (bpx7 - bpx6) * (sidelightCutPosRight - bpx6)
				put sidelightCutPosRight,	py,						15, gs_board_mat,
					sidelightCutPosRight,	WIDO_FRAME_THICKNESS,	15, gs_board_mat
			else
				put	bpx7, bpy7,  8 + 7 * not(gs_stack_right),							gs_board_mat,	! 15 or 8
					bpx8, bpy8,  8 + 7 * not(gs_stack_right),							gs_board_mat	! 15 or 8

				if thkPlasterAtBoardRight > EPS then
					startIdx = idxBoardEndPlasterRight
					endIdx	 = idxBoardStartPlasterRight
				else
					startIdx = idxBoardEndRevealRight
					endIdx	 = idxBoardStartRevealRight
				endif

				for i = startIdx to endIdx step -1
					if i = endIdx then
						put rightRevealPnts[i][1], rightRevealPnts[i][2], 13 + 2 * not(gs_stack_right), gs_board_mat	! 15 or 13
					else
						put rightRevealPnts[i][1], rightRevealPnts[i][2],  8 + 7 * not(gs_stack_right), gs_board_mat	! 15 or 8
					endif
				next i

				if abs(bBoardNnosUsa) > EPS then	! Board Negative Nosing by USA Framesill
					put rightRevealPnts[endIdx][1] - frameWidthRight, rightRevealPnts[endIdx][2],					15, gs_board_mat
					put rightRevealPnts[endIdx][1] - frameWidthRight, rightRevealPnts[endIdx][2] - bBoardNnosUsa,	15, gs_board_mat
				endif
			endif
		else
			put 0, WOD, 900, gs_board_mat

			if sidelightCutLeft then
				if bCurvedAtBoardSide then
					py = WOD - iArchSign * sqr((radBoard - iArchSign * gs_board_nosing)^2 - sidelightCutPosLeft^2)
				else
					py = bpy6 - (bpy6 - bpy7) / (bpx7 - bpx6) * (sidelightCutPosLeft - bpx6)
				endif
				put sidelightCutPosLeft,	WIDO_FRAME_THICKNESS,	15,								gs_board_mat,
					sidelightCutPosLeft,	py,						15 + bCurvedAtBoardSide * 64,	gs_board_mat
			else
				if thkPlasterAtBoardLeft > EPS then
					startIdx = idxBoardStartPlasterLeft
					endIdx	 = idxBoardEndPlasterLeft
				else
					startIdx = idxBoardStartRevealLeft
					endIdx	 = idxBoardEndRevealLeft
				endif

				for i = startIdx to endIdx - 1
					put leftRevealPnts[i][1], leftRevealPnts[i][2],	8 + 7 * not(gs_stack_left), gs_board_mat			! 15 or 8
				next i

				if gs_board_ovhg_left > EPS | thkPlasterAtBoardLeft > EPS then
					alfaStart	= -signWallIsLeft * atn(leftRevealPnts[endIdx][1] / (leftRevealPnts[endIdx][2] - WOD))
					alfaEnd		= -signWallIsLeft * atn(bpx5 / (bpy5 - WOD))

					arcRadius	= radBoard
					bMiddlePoints = 1
					firstStatus	= 8 + 7 * not(gs_stack_left) + 64
					lastStatus	= 8 + 7 * not(gs_stack_left) + 64

					if abs(alfaStart - alfaEnd) > EPS then gosub 100
				endif

				put	bpx6, bpy6, 13 + 2 * not(gs_stack_right) + bCurvedAtBoardSide * 64,		gs_board_mat
			endif

			if sidelightCutRight then
				if bCurvedAtBoardSide then
					py = WOD - iArchSign * sqr((radBoard - iArchSign * gs_board_nosing)^2 - sidelightCutPosRight^2)
				else
					py = bpy6 - (bpy6 - bpy7) / (bpx7 - bpx6) * (sidelightCutPosRight - bpx6)
				endif
				put sidelightCutPosRight,	py,						3000 * bCurvedAtBoardSide + 15, gs_board_mat,
					sidelightCutPosRight,	WIDO_FRAME_THICKNESS,	15,								gs_board_mat
			else
				put	bpx7, bpy7, 3000 * bCurvedAtBoardSide + 8 + 7 * not(gs_stack_right),	gs_board_mat	! 15 or 8

				if thkPlasterAtBoardRight > EPS then
					startIdx = idxBoardEndPlasterRight
					endIdx	 = idxBoardStartPlasterRight
				else
					startIdx = idxBoardEndRevealRight
					endIdx	 = idxBoardStartRevealRight
				endif

				if gs_board_ovhg_right > EPS | thkPlasterAtBoardRight > EPS then
					alfaStart	= -signWallIsLeft * atn(bpx8 / (bpy8 - WOD))
					alfaEnd		= -signWallIsLeft * atn(rightRevealPnts[startIdx][1] / (rightRevealPnts[startIdx][2] - WOD))

					arcRadius	= radBoard
					bMiddlePoints = 1
					firstStatus	= 8 + 7 * not(gs_stack_right) + 64
					lastStatus	= 8 + 7 * not(gs_stack_right) + 64

					if abs(alfaStart - alfaEnd) > EPS then gosub 100
				endif

				for i = startIdx - 1 to endIdx step -1
					if i = endIdx then
						put rightRevealPnts[i][1], rightRevealPnts[i][2], 13 + 2 * not(gs_stack_left), gs_board_mat	! 15 or 13
					else
						put rightRevealPnts[i][1], rightRevealPnts[i][2],  8 + 7 * not(gs_stack_right), gs_board_mat	! 15 or 8
					endif
				next i
			endif

			if not(sidelightCutLeft) then
				! Close polygon
				if thkPlasterAtBoardLeft > EPS then
					put leftRevealPnts[idxBoardStartPlasterLeft][1], leftRevealPnts[idxBoardStartPlasterLeft][2], 3000 * (bCurvedAtWindowFrame) + 8 + 7 * not(gs_stack_left), gs_board_mat	! 15 or 8
				else
					put leftRevealPnts[idxBoardStartRevealLeft][1],  leftRevealPnts[idxBoardStartRevealLeft][2],  3000 * (bCurvedAtWindowFrame) + 8 + 7 * not(gs_stack_left), gs_board_mat	! 15 or 8
				endif
			endif
		endif

		sprism_{2} gs_board_mat, gs_board_mat, gs_board_mat,
			nsp/4,
			0,WIDO_FRAME_THICKNESS, 1,WIDO_FRAME_THICKNESS, boardThickness,	boardAngleTop,
			0,WIDO_FRAME_THICKNESS, 1,WIDO_FRAME_THICKNESS, 0,				boardAngleBottom,
			get(nsp)

		if sidelightCutLeft then
			hotspot sidelightCutPosLeft, leftRevealPnts[idxBoardStartRevealLeft][2]  - bBoardNnosUsa, boardThickness, 10061
		else
			hotspot leftRevealPnts[idxBoardStartRevealLeft][1], leftRevealPnts[idxBoardStartRevealLeft][2]  - bBoardNnosUsa, boardThickness, 10002
		endif

		if sidelightCutRight then
			hotspot sidelightCutPosRight, rightRevealPnts[idxBoardStartRevealRight][2] - bBoardNnosUsa, boardThickness, 10060
		else
			hotspot rightRevealPnts[idxBoardStartRevealRight][1], rightRevealPnts[idxBoardStartRevealRight][2] - bBoardNnosUsa, boardThickness, 10003
		endif
	else

		ch = initaddonscope ("PolyOperations", "", "")

! Generate Board Polygon -------------------------------------------------------

		bPolyFor3D = 1
		gosub 2000

! Draw resulting polygons ------------------------------------------------------

		defaultStatusCode = 8
		dim statusCodes[2]
		statusCodes[1] = 15
		statusCodes[2] = 15

		dim resPolyIDArr[]
		numPoly = callfunction (ch, "GetDestinationPolygons", "", resPolyIDArr)

		for i = 1 to numPoly
			polygonID = resPolyIDArr[i]
			gosub 1000	! Get GDL Polygon

			sprism_{2} gs_board_mat, gs_board_mat, gs_board_mat,
				nsp/4,
				0,WIDO_FRAME_THICKNESS, 1,WIDO_FRAME_THICKNESS, boardThickness,	boardAngleTop,
				0,WIDO_FRAME_THICKNESS, 1,WIDO_FRAME_THICKNESS, 0,				boardAngleBottom,
				get(nsp)
		next i

! Close channel ----------------------------------------------------------------

		closeaddonscope ch
	endif

	if abs(bBoardNnosUsa) > EPS then cutend

	del 1

return


! ==============================================================================
! Arch Segmentation
! ------------------------------------------------------------------------------
! Input parameters:
!	alfaStart:		Start angle (angle)
!	alfaEnd:		End angle (angle)
!	arcRadius:		Arc radius (length)
!	bMiddlePoints:	Generate middle points (0 / 1)
!	firstStatus:	Status of the first segment (integer)
!	lastStatus:		Status of the last segment (integer)
! ==============================================================================

100:
	if not(wallIsLeft) then
		alfaStart = 180 - alfaStart
		alfaEnd = 180 - alfaEnd
	endif
	segmentAngle = 360 / WALL_RESOL


	! --- Point at Start Angle ---
	if WIDO_REVEAL_SIDE then
		if SYMB_ROTANGLE < EPS then
			difAngle = (AC_Hole_Position_Angle + alfaStart) mod segmentAngle
		else
			difAngle = -(AC_Hole_Position_Angle - 180 - alfaStart) mod segmentAngle
		endif
	else
		if SYMB_ROTANGLE < EPS then
			difAngle = -(AC_Hole_Position_Angle - alfaStart + 180) mod segmentAngle
		else
			difAngle = (AC_Hole_Position_Angle + alfaStart) mod segmentAngle
		endif
	endif

	difAngle2 = difAngle
	if abs(difAngle) > segmentAngle / 2 then difAngle = -segmentAngle / 2 + abs(difAngle mod (segmentAngle / 2))

	segmentR = arcRadius / cos(difAngle)
	put segmentR * sin(alfaStart), -segmentR * cos(alfaStart) + WOD, firstStatus, gs_board_mat

	if bMiddlePoints then
		! --- Middle Points ---
		segmentR = arcRadius / cos(segmentAngle / 2)

		if alfaStart > alfaEnd then
			alfaActual = alfaStart - difAngle2 + segmentAngle / 2

			if alfaActual > alfaStart then alfaActual = alfaActual - segmentAngle
			if alfaActual > alfaStart then alfaActual = alfaActual - segmentAngle

			if alfaActual < alfaEnd then alfaActual = alfaActual + segmentAngle

			if alfaActual < alfaStart & alfaActual > alfaEnd then
				do
					put segmentR * sin(alfaActual), -segmentR * cos(alfaActual) + WOD, 79, gs_board_mat

					alfaActual = alfaActual - segmentAngle

				while alfaActual > alfaEnd
			endif
		else
			alfaActual = alfaStart - difAngle2 + segmentAngle / 2

			if alfaActual < alfaStart then alfaActual = alfaActual + segmentAngle
			if alfaActual > alfaEnd then alfaActual = alfaActual - segmentAngle

			if alfaActual > alfaStart & alfaActual < alfaEnd then
				do
					put segmentR * sin(alfaActual), -segmentR * cos(alfaActual) + WOD, 79, gs_board_mat

					alfaActual = alfaActual + segmentAngle
				while alfaActual < alfaEnd
			endif
		endif
	endif


	! --- Point at End Angle ---
	if WIDO_REVEAL_SIDE then
		if SYMB_ROTANGLE < EPS then
			difAngle = (AC_Hole_Position_Angle + alfaEnd) mod segmentAngle
		else
			difAngle = -(AC_Hole_Position_Angle + 180 - alfaEnd) mod segmentAngle
		endif
	else
		if SYMB_ROTANGLE < EPS then
			difAngle = -(AC_Hole_Position_Angle - alfaEnd + 180) mod segmentAngle
		else
			difAngle = (AC_Hole_Position_Angle + alfaEnd) mod segmentAngle
		endif
	endif

	if abs(difAngle) > segmentAngle / 2 then difAngle = -segmentAngle / 2 + abs(difAngle mod (segmentAngle / 2))

	segmentR = arcRadius / cos(difAngle)
	put segmentR * sin(alfaEnd), -segmentR * cos(alfaEnd) + WOD, lastStatus, gs_board_mat

return


1000:
! ==============================================================================
! Get GDL Polygon
! ------------------------------------------------------------------------------
! Input variables:
!	ch:					Channel
!	polygonID:			Polygon index
!	defaultStatusCode:	Default status code
!	statusCodes[]:		Status code array
!
! Returned variables:
!	GDL stack:			GDL polygon
! ==============================================================================

	dim resVertices[]
	numVertices = callfunction(ch, "GetVertices", polygonID, resVertices)
	numVertices = numVertices / 3

	dim contArr[]
	numContours = callfunction(ch, "GetContourEnds", polygonID, contArr)

	dim inhEdgeInfos[]
	numEdges = callfunction(ch, "GetInhEdgeInfos", polygonID, inhEdgeInfos)

	for contIndex = 1 to numContours

		if contIndex = 1 then
			begIdx = 0
		else
			begIdx = contArr[contIndex] - 1
		endif
		if contIndex = numContours then
			endIdx = numVertices - 1
		else
			endIdx = contArr[contIndex + 1] - 2
		endif

		bClosed = 0
		bStartWithLast = 0

		index = endIdx * 3
		lastVertX	= resVertices[index + 1]
		lastVertY	= resVertices[index + 2]
		lastVertA	= resVertices[index + 3]
		edgeInfo	= inhEdgeInfos[begIdx + 1]

		if abs(lastVertA) > EPS then
			put lastVertX, lastVertY, 1, gs_board_mat
			bStartWithLast = 1
		endif

		for vertIndex = begIdx to endIdx
			index = vertIndex * 3
			actVertX = resVertices[index + 1]
			actVertY = resVertices[index + 2]
			actVertA = resVertices[index + 3]

			if edgeInfo > 0 & edgeInfo <= vardim1(statusCodes) then
				statusCode = statusCodes[edgeInfo]
			else
				statusCode = defaultStatusCode
			endif

			if vertIndex = begIdx then
				if bStartWithLast then
					ac2gdl_spx = lastVertX
					ac2gdl_spy = lastVertY
				else
					ac2gdl_spx = actVertX
					ac2gdl_spy = actVertY
				endif
			endif

			if abs(lastVertA) > EPS then
				ac2gdl_mx = (actVertX + lastVertX) / 2
				ac2gdl_my = (actVertY + lastVertY) / 2
				ac2gdl_ratio = 1 / 2 / tan (lastVertA / 2)

				ac2gdl_cx = ac2gdl_mx - ac2gdl_ratio * (actVertY - lastVertY)	! Arc center
				ac2gdl_cy = ac2gdl_my + ac2gdl_ratio * (actVertX - lastVertX)

				put ac2gdl_cx,	ac2gdl_cy,	900,					gs_board_mat,
					0,			lastVertA,	4000 + statusCode + 64,	gs_board_mat
			endif

			if vertIndex > begIdx & abs(ac2gdl_spx - actVertX) < EPS & abs(ac2gdl_spy - actVertY) < EPS then
!!!				put actVertX, actVertY, -1, gs_board_mat	! Board polygon never contains holes
				bClosed = 1
			else
				if vertIndex < endIdx | not(bStartWithLast) then
					put actVertX, actVertY, statusCode, gs_board_mat
				endif
			endif

			lastVertX	= actVertX
			lastVertY	= actVertY
			lastVertA	= actVertA
			edgeInfo	= inhEdgeInfos[vertIndex + 2]
		next vertIndex

		if not(bClosed) & numContours > 1 then	! Close the polygon if it has holes
			put ac2gdl_spx, ac2gdl_spy, -1, gs_board_mat
		endif

	next contIndex
return

