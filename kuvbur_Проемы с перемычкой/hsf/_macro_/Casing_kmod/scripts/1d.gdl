
EPS = 0.0001

! iRevealType:
REVEAL_EDGE				= 0
REVEAL_NO				= 1
REVEAL_POSITIVE			= 2
REVEAL_NEGATIVE			= 3
REVEAL_SLANTED			= 4
REVEAL_SPLAYED			= 5
REVEAL_HISTORIC			= 6
REVEAL_DOUBLE			= 7
REVEAL_DOUBLE_SPLAYED	= 8
REVEAL_OUTSIDE_SPLAYED	= 9

! Partial Stucture Display defines:
STRUCTURE_ENTIRE_STRUCTURE	= 0
STRUCTURE_CORE_ONLY			= 1
STRUCTURE_WITHOUT_FINISHES	= 2

! iWindowShape:
SHAPE_RECTANGULAR			= 0
SHAPE_ARCHED				= 1
SHAPE_ROUND					= 2
SHAPE_EYEBROWS				= 3
SHAPE_HALFCIRCLE			= 4 	! straight side is horizontal
SHAPE_MULTISIDE				= 5
SHAPE_OCTAGONAL				= 6
SHAPE_HALFARCH				= 7
SHAPE_PENTAGON				= 8
SHAPE_QUARTERROUND			= 9
SHAPE_HALFROUND				= 10 	! straight side is vertical
SHAPE_TRAPEZOID				= 11
SHAPE_TRIANGLE				= 12
SHAPE_GOTHICARCH			= 13
SHAPE_ELLIPSEARCH			= 14
SHAPE_ROMBUS				= 15
SHAPE_HORSESHOE				= 16
SHAPE_OGEECENTERED			= 17
SHAPE_SARACENIC				= 18
SHAPE_T						= 19
SHAPE_HALF_T_LEFT			= 20
SHAPE_ARCHED_T				= 21
SHAPE_ARCHED_HALF_T_LEFT	= 22
SHAPE_PARALLELOGRAM			= 23
SHAPE_ELLIPSE				= 24
SHAPE_CORNER_TRIANGLE		= 25
SHAPE_QUARTERROUND_NOFRAME	= 26
SHAPE_HALF_T_RIGHT			= 27
SHAPE_ARCHED_HALF_T_RIGHT	= 28

! iCasingWidthControl:
FULL_EDITABLE				= 1
SIDE_AND_BOTTOM_EDITABLE	= 2
SIDE_EDITABLE				= 3

! gs_trimtype_out_int, gs_trimtype_in_int
CASING_NORMAL		= 1
CASING_OVERHANG		= 2
CASING_COMPLEX		= 3		! Only for outside casing

!iCasingHeadTypeOut
CASING_HEAD_RECT			= 1
CASING_HEAD_DECORATIVE_1	= 2
CASING_HEAD_DECORATIVE_2	= 3
CASING_HEAD_DECORATIVE_3	= 4

! iArchitraveCapitalType
ARCH_CAPITAL_SQUARE_ONSIDE		= 1
ARCH_CAPITAL_SQUARE_NEXTSIDE	= 2
ARCH_CAPITAL_DECOR_ONSIDE		= 3
ARCH_CAPITAL_DECOR_NEXTSIDE		= 4

! iNORCasingType
ARCHITRAV_NONE                  = 1
ARCHITRAV_SILL                  = 2
ARCHITRAV_LEFT                  = 3
ARCHITRAV_LEFT_SILL             = 4
ARCHITRAV_RIGHT                 = 5
ARCHITRAV_RIGHT_SILL            = 6
ARCHITRAV_LEFT_RIGHT            = 7
ARCHITRAV_LEFT_RIGHT_SILL       = 8
ARCHITRAV_ENTAB                 = 9
ARCHITRAV_ENTAB_SILL            = 10
ARCHITRAV_ENTAB_LEFT            = 11
ARCHITRAV_ENTAB_LEFT_SILL       = 12
ARCHITRAV_ENTAB_RIGHT           = 13
ARCHITRAV_ENTAB_RIGHT_SILL      = 14
ARCHITRAV_ENTAB_LEFT_RIGHT      = 15
ARCHITRAV_ENTAB_LEFT_RIGHT_SILL = 16
ARCHITRAV_ALL                   = 17
ARCHITRAV_SIMPLE_CASING         = 18


! ==============================================================================
! Get Casing restrictions
! ==============================================================================

call "CasingEnable_kmod" parameters A=A,
	iRevealType			= iRevealType,
	iWindowShape		= iWindowShape,
	gs_frame_style_m	= gs_frame_style_m,
	returned_parameters bInsideCasingNotAvailableByWallType,
						bInsideCasingNotAvailableByReveal,
						bOutsideCasingNotAvailableByReveal,
						bInsideCasingNotAvailableByFrameStyle,
						bOutsideCasingNotAvailableByFrameStyle


! ==============================================================================
! Reveal Points Indexes
! ==============================================================================

idxSillStartRevealLeft		= iRevealPointsIdx[1]
idxSillEndRevealLeft		= iRevealPointsIdx[2]
idxFrameStartRevealLeft		= iRevealPointsIdx[3]
idxFrameEndRevealLeft		= iRevealPointsIdx[4]
idxBoardEndRevealLeft		= iRevealPointsIdx[6]
idxSillStartPlasterLeft		= iRevealPointsIdx[7]
idxSillEndPlasterLeft		= iRevealPointsIdx[8]
idxSillStartRevealRight		= iRevealPointsIdx[11]
idxSillEndRevealRight		= iRevealPointsIdx[12]
idxFrameStartRevealRight	= iRevealPointsIdx[13]
idxFrameEndRevealRight		= iRevealPointsIdx[14]
idxBoardEndRevealRight		= iRevealPointsIdx[16]
idxSillStartPlasterRight	= iRevealPointsIdx[17]
idxSillEndPlasterRight		= iRevealPointsIdx[18]


! ==============================================================================

bTShapedOpening =  (iWindowShape = SHAPE_T |\
					iWindowShape = SHAPE_HALF_T_LEFT |\
					iWindowShape = SHAPE_HALF_T_RIGHT |\
					iWindowShape = SHAPE_ARCHED_T |\
					iWindowShape = SHAPE_ARCHED_HALF_T_LEFT |\
					iWindowShape = SHAPE_ARCHED_HALF_T_RIGHT)

bPShapedLeftOpening =	(iWindowShape = SHAPE_T |\
						iWindowShape = SHAPE_HALF_T_LEFT |\
						iWindowShape = SHAPE_ARCHED_T |\
						iWindowShape = SHAPE_ARCHED_HALF_T_LEFT) &\
						gs_sidelight_parapet_hgt_left > EPS

bPShapedRightOpening =	(iWindowShape = SHAPE_T |\
						iWindowShape = SHAPE_HALF_T_RIGHT |\
						iWindowShape = SHAPE_ARCHED_T |\
						iWindowShape = SHAPE_ARCHED_HALF_T_RIGHT) &\
						gs_sidelight_parapet_hgt_right > EPS


bInclinedWall	= (abs(WALL_INCL) > EPS)
curvedWall		= (abs(WIDO_ORIG_DIST) > EPS)
wallIsLeft		= (SYMB_ROTANGLE > EPS) exor WIDO_REVEAL_SIDE
signWallIsLeft	= wallIsleft - not(wallIsleft)

if bTShapedOpening then
	bDrawLeftSLSill		= gs_sill_outside_sl_left
	bDrawRightSLSill	= gs_sill_outside_sl_right
	bDrawLeftSLBoard	= gs_board_inside_sl_left
	bDrawRightSLBoard	= gs_board_inside_sl_right
else
	bDrawLeftSLSill		= bDrawSill
	bDrawRightSLSill	= bDrawSill
	bDrawLeftSLBoard	= bDrawBoard
	bDrawRightSLBoard	= bDrawBoard
endif


if not(bCasingUSA) then
	if gs_trimtype_out_int = CASING_NORMAL then
		gs_trimov_top_left_out	= 0
		gs_trimov_top_right_out	= 0
		gs_trimov_bot_left_out	= 0
		gs_trimov_bot_right_out	= 0
	endif
	if gs_trimtype_in_int = CASING_NORMAL then
		gs_trimov_top_left_in	= 0
		gs_trimov_top_right_in	= 0
		gs_trimov_bot_left_in	= 0
		gs_trimov_bot_right_in	= 0
	endif
endif


if gs_trimtype_in_int = CASING_OVERHANG then
	gs_trimov_top_left_in	= gs_trimov_top_right_in

	if	isWindow | \
		iWindowShape = SHAPE_T | \
		iWindowShape = SHAPE_ARCHED_T then
		gs_trimov_bot_left_in	= gs_trimov_bot_right_in
	endif
endif

if gs_trimtype_out_int = CASING_OVERHANG then
	gs_trimov_top_left_out	= gs_trimov_top_right_out

	if	isWindow | \
		iWindowShape = SHAPE_T | \
		iWindowShape = SHAPE_ARCHED_T then
		gs_trimov_bot_left_out	= gs_trimov_bot_right_out
	endif
endif


if Suppress_isWindow then isWindow = 0

bShowJambExtension		= 1

bEnableUniformCasing = ((iWindowShape = SHAPE_RECTANGULAR |\
						 iWindowShape = SHAPE_T |\
						 iWindowShape = SHAPE_HALF_T_LEFT |\
						 iWindowShape = SHAPE_HALF_T_RIGHT) &\
						 not(bTerraceDoorNORUI))

if (iWindowShape = SHAPE_RECTANGULAR |\
	iWindowShape = SHAPE_T |\
	iWindowShape = SHAPE_HALF_T_LEFT |\
	iWindowShape = SHAPE_HALF_T_RIGHT) then

	iCasingWidthControl = FULL_EDITABLE
else
	if (iWindowShape = SHAPE_ARCHED |\
		iWindowShape = SHAPE_ELLIPSEARCH |\
		iWindowShape = SHAPE_TRAPEZOID |\
		iWindowShape = SHAPE_HALFCIRCLE |\
		iWindowShape = SHAPE_PENTAGON |\
		iWindowShape = SHAPE_QUARTERROUND) then

		iCasingWidthControl = SIDE_AND_BOTTOM_EDITABLE
	else
		iCasingWidthControl = SIDE_EDITABLE
	endif
endif


! ==============================================================================
! Disable simple overhang and complex casing types according to window shape
! ==============================================================================

if	iWindowShape <> SHAPE_RECTANGULAR & \
	iWindowShape <> SHAPE_T & \
	iWindowShape <> SHAPE_HALF_T_LEFT & \
	iWindowShape <> SHAPE_HALF_T_RIGHT then

	! Inside
	gs_CasingInTypeEnable = bitset( gs_CasingInTypeEnable, 1, 0)


	! Outside
	gs_CasingOutTypeEnable = bitset( gs_CasingOutTypeEnable, 1, 0)
	gs_CasingOutTypeEnable = bitset( gs_CasingOutTypeEnable, 2, 0)
endif


! ==============================================================================

!if SYMB_MIRRORED exor (SYMB_ROTANGLE > EPS) then
!	widoRightJamb	= WIDO_LEFT_JAMB
!	widoLeftJamb	= WIDO_RIGHT_JAMB
!else
!	widoRightJamb	= WIDO_RIGHT_JAMB
!	widoLeftJamb	= WIDO_LEFT_JAMB
!endif

widoLeftJamb	= gs_reveal_left
widoRightJamb	= gs_reveal_right

widoInnerLeftJamb	= revealInnerLeft
widoInnerRightJamb	= revealInnerRight
widoInnerTopJamb	= 0
widoInnerBottomJamb	= 0
if iRevealType = REVEAL_SPLAYED | iRevealType = REVEAL_HISTORIC then
	widoInnerTopJamb	= gs_reveal_splayed_innerTop
	widoInnerBottomJamb	= gs_reveal_splayed_innerBottom
endif
if iRevealType = REVEAL_DOUBLE then
	widoInnerTopJamb	= gs_reveal_double_innerTop
	widoInnerBottomJamb	= gs_reveal_double_innerBottom
endif


! ==============================================================================
! Restrictions for Window Shapes
! ==============================================================================

widoHeadDepth	= gs_reveal_top
widoThresDepth	= gs_reveal_bottom

if	iWindowShape = SHAPE_ARCHED | \
	iWindowShape = SHAPE_ARCHED_T | \
	iWindowShape = SHAPE_ARCHED_HALF_T_LEFT | \
	iWindowShape = SHAPE_ARCHED_HALF_T_RIGHT | \
	iWindowShape = SHAPE_ELLIPSEARCH then
	! --- Arched Window Shape ---

	widoLeftJamb	= widoRightJamb
	widoHeadDepth	= widoRightJamb

	gs_tw_left_in	= gs_tw_right_in
	gs_tw_top_in	= gs_tw_right_in

	gs_tw_left_out	= gs_tw_right_out
	gs_tw_top_out	= gs_tw_right_out
endif

if	iWindowShape = SHAPE_RECTANGULAR |\
	iWindowShape = SHAPE_T |\
	iWindowShape = SHAPE_HALF_T_LEFT |\
	iWindowShape = SHAPE_HALF_T_RIGHT then

	if gs_trim_outside_uniform then
		gs_tw_left_out	= gs_tw_right_out
		gs_tw_top_out	= gs_tw_right_out
		gs_tw_bottom_out = gs_tw_right_out
	endif

	if gs_trim_inside_uniform then
		gs_tw_left_in	= gs_tw_right_in
		gs_tw_top_in	= gs_tw_right_in
		gs_tw_bottom_in = gs_tw_right_in
	endif
endif

if not(isWindow) & not(bTShapedOpening) then
	gs_tw_bottom_in		= 0
	gs_tw_bottom_out	= 0
	gs_stack_bottom		= 0
endif


gs_trim_below_sillLeft		= bCasingBottomOutside
gs_trim_below_sillRight		= bCasingBottomOutside
gs_trim_below_boardLeft		= gs_trim_below_board
gs_trim_below_boardRight	= gs_trim_below_board
if	bPShapedLeftOpening then
	if	( (gs_sidelight_parapet_hgt_left + gs_reveal_double_innerBottom_sL + (gs_trim_width_in - gs_trim_offs_in) * not(bDrawLeftSLBoard)) <= \
			gs_tw_bottom_in ) then gs_trim_below_boardLeft = 0
	if	( (gs_sidelight_parapet_hgt_left + gs_reveal_bottom_sL + (gs_trim_width_out - gs_trim_offs_out) * not(bDrawLeftSLSill) + bDrawLeftSLSill * sillBottomOutside) <= \
			gs_tw_bottom_out ) then gs_trim_below_sillLeft = 0
endif
if	bPShapedRightOpening then
	if	( (gs_sidelight_parapet_hgt_right + gs_reveal_double_innerBottom_sR + (gs_trim_width_in - gs_trim_offs_in) * not(bDrawRightSLBoard)) <= \
			gs_tw_bottom_in ) then gs_trim_below_boardRight = 0
	if	( (gs_sidelight_parapet_hgt_right + gs_reveal_bottom_sR + (gs_trim_width_out - gs_trim_offs_out) * not(bDrawRightSLSill) + bDrawRightSLSill * sillBottomOutside) <= \
			gs_tw_bottom_out ) then gs_trim_below_sillRight = 0
endif

! ==============================================================================
! Calculations for Corner Window
! ==============================================================================

if bRightCornerFunction & abs(rightCornerAngle) > EPS then
	rx = 1 / tan(rightCornerAngle / 2)

	if rightCornerAngle > 180 then
		rightCwDx = WIDO_FRAME_THICKNESS / tan(-rightCornerAngle / 2)
	else
		rightCwDx = 0
	endif

	rightCwDx2 = 0
	if abs(WALL_THICKNESS - rightConnWallThk) > EPS then
		rightCwDx2 = (WALL_THICKNESS - rightConnWallThk) / cos(rightCornerAngle - 90)
	endif
	bFitModeRight = (rightConnWallThk > WALL_THICKNESS + EPS)

!!!	if SYMB_MIRRORED exor WIDO_REVEAL_SIDE then
!!!		! --- Swap Left and Right Attributes
!!!		gs_tw_left_in		= gs_tw_right_in
!!!		gs_tw_left_out		= gs_tw_right_out
!!!		gs_stack_left		= gs_stack_right
!!!		gs_left_oversize	= gs_right_oversize
!!!	endif

	gs_right_oversize = 0
else
	bFitModeRight = 0
endif

if bLeftCornerFunction & abs(leftCornerAngle) > EPS then
	lx = 1 / tan(leftCornerAngle / 2)

	if leftCornerAngle > 180 then
		leftCwDx = WIDO_FRAME_THICKNESS / tan(-leftCornerAngle / 2)
	else
		leftCwDx = 0
	endif

	leftCwDx2 = 0
	if abs(WALL_THICKNESS - leftConnWallThk) > EPS then
		leftCwDx2 = (WALL_THICKNESS - leftConnWallThk) / cos(leftCornerAngle - 90)
	endif
	bFitModeLeft = (leftConnWallThk > WALL_THICKNESS + EPS)

	gs_left_oversize = 0
else
	bFitModeLeft = 0
endif


! ==============================================================================
! Calculations for Inclined Walls
! ==============================================================================

if bInclinedWall then
	bFactor = SYMB_MIRRORED exor WIDO_REVEAL_SIDE exor wallIsLeft
	incFactor = not(bFactor) - bFactor
	incX = incFactor * tan(WALL_INCL)
	incY = incFactor * (1 / cos(WALL_INCL))

	bDir = SYMB_MIRRORED exor (SYMB_ROTANGLE > EPS)
	iDir = not(bDir) - bDir
	incH = cos(WALL_INCL)
	incV = sin(WALL_INCL) * iDir
else
	incX = 0
	incY = 1
	iDir = 0
	incH = 0
	incV = 0
endif


! ==============================================================================
! Calculations for Stack Window
! ==============================================================================

if gs_stack_left then
	overSizeLeft		= gs_left_oversize
	overSizeLeftIn		= gs_left_oversize
	overSizeLeftOut		= gs_left_oversize
	widoLeftJamb		= 0
	gs_reveal_left		= 0
else
	overSizeLeft		= 0
	overSizeLeftIn		= -widoInnerLeftJamb
	overSizeLeftOut		= -widoLeftJamb
	gs_trim_stack_left	= 0
endif

if gs_stack_right then
	overSizeRight		= gs_right_oversize
	overSizeRightIn		= gs_right_oversize
	overSizeRightOut	= gs_right_oversize
	widoRightJamb		= 0
	gs_reveal_right		= 0
else
	overSizeRight		= 0
	overSizeRightIn		= -widoInnerRightJamb
	overSizeRightOut	= -widoRightJamb
	gs_trim_stack_right	= 0
endif
if not(gs_stack_bottom) then gs_trim_stack_bottom = 0
if not(gs_stack_top) 	then gs_trim_stack_top = 0


! ==============================================================================
! Tolerance Offsets
! ==============================================================================

tolerOffsetLeft		= bCasingTolerance * gs_tolerance_left * not(gs_stack_left)
tolerOffsetRight	= bCasingTolerance * gs_tolerance_right * not(gs_stack_right)
tolerOffsetUpper	= bCasingTolerance * gs_tolerance_upper * not(gs_stack_top)
tolerOffsetLower	= bCasingTolerance * gs_tolerance_lower

tolerOffsetLeftIn	= tolerOffsetLeft  * not(gs_trim_atframe_in)
tolerOffsetRightIn	= tolerOffsetRight * not(gs_trim_atframe_in)
tolerOffsetUpperIn	= tolerOffsetUpper * not(gs_trim_atframe_in)
tolerOffsetLowerIn	= tolerOffsetLower * not(gs_trim_atframe_in)

if gs_trim_atframe_out then
	tolerOffsetLeftOut	= 0
	tolerOffsetRightOut	= 0
	tolerOffsetUpperOut = 0
	tolerOffsetLowerOut = 0
else
	tolerOffsetLeftOut	= bCasingTolerance * (gs_tolerance_left  + gs_frame_width * not(gs_casing_nor)) * not(gs_stack_left)
	tolerOffsetRightOut	= bCasingTolerance * (gs_tolerance_right + gs_frame_width * not(gs_casing_nor)) * not(gs_stack_right)
	tolerOffsetUpperOut	= bCasingTolerance * (gs_tolerance_upper + gs_frame_width * not(gs_casing_nor)) * not(gs_stack_top)
	tolerOffsetLowerOut	= bCasingTolerance * (gs_tolerance_lower + gs_frame_width * not(gs_casing_nor)) * not(bDrawSill)
endif

tolerOffsStackCasLeftIn		= bCasingTolerance * gs_tolerance_left * gs_stack_left
tolerOffsStackCasRightIn	= bCasingTolerance * gs_tolerance_right * gs_stack_right
tolerOffsStackCasUpperIn	= bCasingTolerance * gs_tolerance_upper * gs_stack_top
tolerOffsStackCasLowerIn	= bCasingTolerance * gs_tolerance_lower * gs_stack_bottom

tolerOffsStackCasLeftOut	= bCasingTolerance * (gs_tolerance_left + gs_frame_width * not(gs_casing_nor)) * gs_stack_left
tolerOffsStackCasRightOut	= bCasingTolerance * (gs_tolerance_right + gs_frame_width * not(gs_casing_nor)) * gs_stack_right
tolerOffsStackCasUpperOut	= bCasingTolerance * (gs_tolerance_upper + gs_frame_width * not(gs_casing_nor)) * gs_stack_top
tolerOffsStackCasLowerOut	= bCasingTolerance * (gs_tolerance_lower + gs_frame_width * not(gs_casing_nor)) * gs_stack_bottom


! ==============================================================================
! Calculations for Curved Walls
! ==============================================================================

alfaLeft = 0
ySign = 0

if curvedWall & abs(radSill) > EPS & abs(radBoard) > EPS then

	if GLOB_SCRIPT_TYPE = 2 | GLOB_SCRIPT_TYPE = 3 then
		DegRad = PI / 180

		if GLOB_SCRIPT_TYPE <> 2 then
			widoOrigDist = -WIDO_ORIG_DIST
		else
			widoOrigDist = WIDO_ORIG_DIST
		endif

		alfaLeftIn	= abs(atn( leftRevealPnts[idxBoardEndRevealLeft][1]  / ( leftRevealPnts[idxBoardEndRevealLeft][2]  - WOD)))
		alfaRightIn	= abs(atn(rightRevealPnts[idxBoardEndRevealRight][1] / (rightRevealPnts[idxBoardEndRevealRight][2] - WOD)))

		alfaLeftOut	= abs(atn( leftRevealPnts[idxSillEndRevealLeft - 1][1]  / ( leftRevealPnts[idxSillEndRevealLeft - 1][2]  - WOD)))
		alfaRightOut= abs(atn(rightRevealPnts[idxSillEndRevealRight - 1][1] / (rightRevealPnts[idxSillEndRevealRight - 1][2] - WOD)))

		WOD = abs(widoOrigDist) - (SYMB_ROTANGLE > EPS) * WIDO_FRAME_THICKNESS
		WODIn = abs(widoOrigDist) + (SYMB_ROTANGLE < EPS) * WIDO_FRAME_THICKNESS - (SYMB_ROTANGLE > EPS) * WIDO_FRAME_THICKNESS

		alfaLeft	= atn((leftWidth  + overSizeLeft*0)  / WOD)
		alfaRight	= atn((rightWidth + overSizeRight*0) / WOD)

		alfaLeftOs	= atn((leftRevealPnts[idxBoardEndRevealLeft-1][1]  + gs_left_oversize) / WOD)
		alfaRightOs	= atn((rightRevealPnts[idxBoardEndRevealRight-1][1] + gs_right_oversize) / WOD)

		bArchSign = (WIDO_REVEAL_SIDE exor SYMB_ROTANGLE > EPS)
		iArchSign = bArchSign - not(bArchSign)		! 1 / -1

		if WIDO_REVEAL_SIDE then
			WOD = widoOrigDist + WIDO_FRAME_THICKNESS
		else
			WOD = -widoOrigDist
		endif

		if WIDO_REVEAL_SIDE exor SYMB_ROTANGLE < EPS then
			ySign = 1
			if WIDO_REVEAL_SIDE then
				rSill = sqr(refWidth^2 / 4 + WOD^2) - WIDO_SILL
				rBoard = rSill + WALL_THICKNESS
			else
				rSill = sqr(refWidth^2 / 4 + WOD^2) - WIDO_SILL
				rBoard = rSill + WALL_THICKNESS
			endif
		else
			ySign = -1
			if WIDO_REVEAL_SIDE then
				rBoard = sqr(refWidth^2 / 4 + WOD^2) + WIDO_SILL - WALL_THICKNESS
				rSill = rBoard + WALL_THICKNESS
			else
				rSill = sqr(refWidth^2 / 4 + WOD^2) + WIDO_SILL
				rBoard = rSill - WALL_THICKNESS
			endif
		endif

		if leftRevealPnts[idxFrameEndRevealLeft][1] < leftRevealPnts[idxFrameStartRevealLeft][1] then
			idx = idxFrameStartRevealLeft
		else
			idx = idxFrameEndRevealLeft
		endif
		alfaLeftLSL	 = asn(( leftRevealPnts[idx][1] + gs_sidelight_WHole_width_left + gs_reveal_left_sL + gs_trim_width_out - gs_trim_offs_out) / rSill)

		if rightRevealPnts[idxFrameEndRevealRight][1] > rightRevealPnts[idxFrameStartRevealRight][1] then
			idx = idxFrameStartRevealRight
		else
			idx = idxFrameEndRevealRight
		endif
		alfaRightRSL = asn((rightRevealPnts[idx][1] - gs_sidelight_WHole_width_right - gs_reveal_right_sR - gs_trim_width_out + gs_trim_offs_out) / rSill)

		ArcLengthSillToAngle	= 180 / rSill / PI
		ArcLengthBoardToAngle	= 180 / rBoard / PI

		alfaLeftJamb	= widoLeftJamb  * ArcLengthSillToAngle
		alfaRightJamb	= widoRightJamb * ArcLengthSillToAngle
	endif
endif	! curvedWall


! ==============================================================================
! Overhang Control
! ==============================================================================

if abs(WIDO_SILL) > EPS & gs_trim_atframe_out then
	gs_trimov_top_left_out	= 0
	gs_trimov_top_right_out	= 0
	gs_trimov_bot_left_out	= 0
	gs_trimov_bot_right_out	= 0
endif

bTrimovtopleftout 	= 0
bTrimovtoprightout 	= 0
bTrimovbotleftout  	= 0
bTrimovbotrightout  = 0
if abs(gs_trimov_top_left_out)  > EPS then bTrimovtopleftout  = 1
if abs(gs_trimov_top_right_out) > EPS then bTrimovtoprightout = 1
if isWindow then
	if abs(gs_trimov_bot_left_out)  > EPS then bTrimovbotleftout  = 1
	if abs(gs_trimov_bot_right_out) > EPS then bTrimovbotrightout = 1
else
	if bTShapedOpening then
		if (EPS < gs_trimov_bot_left_out & gs_trimov_bot_left_out < gs_sidelight_parapet_hgt_left) then bTrimovbotleftout  = 1
		if (EPS < gs_trimov_bot_right_out & gs_trimov_bot_right_out < gs_sidelight_parapet_hgt_right) then bTrimovbotrightout = 1
	endif
endif

bTrimovtopleftin 	= 0
bTrimovtoprightin 	= 0
bTrimovbotleftin  	= 0
bTrimovbotrightin  	= 0
if abs(gs_trimov_top_left_in)  > EPS then bTrimovtopleftin  = 1
if abs(gs_trimov_top_right_in) > EPS then bTrimovtoprightin = 1
if isWindow then
	if abs(gs_trimov_bot_left_in)  > EPS then bTrimovbotleftin  = 1
	if abs(gs_trimov_bot_right_in) > EPS then bTrimovbotrightin = 1
else
	if bTShapedOpening then
		if (EPS < gs_trimov_bot_left_in & gs_trimov_bot_left_in < gs_sidelight_parapet_hgt_left) then bTrimovbotleftin  = 1
		if (EPS < gs_trimov_bot_right_in & gs_trimov_bot_right_in < gs_sidelight_parapet_hgt_right) then bTrimovbotrightin = 1
	endif
endif


! ==============================================================================
! Apron Control
! ==============================================================================

if gs_apron then
	bBottomtriminmat=gs_apron_mat
	bBottomtriminthk=gs_apron_thk
else
	bBottomtriminmat=gs_trim_in_mat
	bBottomtriminthk=gs_trim_thk_in
endif


! ==============================================================================
! Custom Corner Function Control
! ==============================================================================

if abs(leftCornerAngle mod 360) < EPS then leftCornerAngle = 0
if abs(rightCornerAngle mod 360) < EPS then rightCornerAngle = 0

if bLeftCornerFunction and abs(leftCornerAngle) < EPS then bLeftCornerFunction = 0
if bRightCornerFunction and abs(rightCornerAngle) < EPS then bRightCornerFunction = 0


! ==============================================================================
! Calculation for Corner Column
! ==============================================================================

if gs_corner_column then
	if bRightCornerFunction & abs(rightCornerAngle) > EPS then
		cornerPostXbyWidth	= (-WIDO_FRAME_THICKNESS - gs_cc_pr) * abs(tan(90 - rightCornerAngle / 2)) + gs_cc_width
		cornerPostXbyThk	= (gs_cc_thk - WIDO_FRAME_THICKNESS - gs_cc_pr) * abs(tan(90 - rightCornerAngle / 2))
		pxFrameR = max(cornerPostXbyWidth, cornerPostXbyThk)

		tanAngle = tan(rightCornerAngle / 2)
		if (rightCornerAngle > 180) then
			px1R = -gs_cc_pr / tanAngle
			px2R =  WIDO_FRAME_THICKNESS / tanAngle
			px3R =  -(gs_cc_pr - gs_cc_thk) / tanAngle
		else
			px1R =  gs_cc_pr / tanAngle
			px2R = -WIDO_FRAME_THICKNESS / tanAngle
			px3R =  (gs_cc_pr - gs_cc_thk) / tanAngle
		endif
	endif

	if bLeftCornerFunction & abs(leftCornerAngle) > EPS then
		cornerPostXbyWidth	= (-WIDO_FRAME_THICKNESS - gs_cc_pr) * abs(tan(90 - leftCornerAngle / 2)) + gs_cc_width
		cornerPostXbyThk	= (gs_cc_thk - WIDO_FRAME_THICKNESS - gs_cc_pr) * abs(tan(90 - leftCornerAngle / 2))
		pxFrameL = max(cornerPostXbyWidth, cornerPostXbyThk)

		tanAngle = tan(leftCornerAngle / 2)
		if (leftCornerAngle > 180) then
			px1L = -gs_cc_pr / tanAngle
			px2L =  WIDO_FRAME_THICKNESS / tanAngle
			px3L =  -(gs_cc_pr - gs_cc_thk) / tanAngle
		else
			px1L =  gs_cc_pr / tanAngle
			px2L = -WIDO_FRAME_THICKNESS / tanAngle
			px3L =  (gs_cc_pr - gs_cc_thk) / tanAngle
		endif
	endif

	if (rightCornerAngle > 180) then
		idxL = idxFrameEndRevealLeft
		idxR = idxFrameEndRevealRight
	else
		idxL = idxFrameStartRevealLeft
		idxR = idxFrameStartRevealRight
	endif

	bMirrorRight	= (rightCornerAngle > 180)
	bMirrorLeft		= (leftCornerAngle > 180)
	offsLeftY		= ((leftCornerAngle > 180) exor (rightCornerAngle > 180)) * (2 * gs_cc_pr - gs_cc_thk)
	if abs(leftCornerAngle) > EPS then
		offsLeftX	= -abs(offsLeftY / tan(leftCornerAngle / 2))
	endif
endif


! ==============================================================================
! Calculations for Slanted Reveal
! ==============================================================================

if GLOB_SCRIPT_TYPE = 2 | GLOB_SCRIPT_TYPE = 3 then
	trinfiL = gs_reveal_left_angle
	trinfiR = gs_reveal_right_angle

	trinL = gs_trim_width_in / cos(trinfiL)
	trinR = gs_trim_width_in / cos(trinfiR)

	gi1L=WALL_INCL
	gi2L=90-abs(trinfiL)
	gi3L=180-gi1L-gi2L
	trin2L = trinL/sin(gi3L)*sin(gi2L)

	gi1R=WALL_INCL
	gi2R=90+abs(trinfiR)
	gi3R=180-gi1R-gi2R
	trin2R = trinR/sin(gi3R)*sin(gi2R)

	scLx = gs_trim_thk_in * tan(trinfiL)
	scRx = gs_trim_thk_in * tan(trinfiR)
	sfLx = WIDO_FRAME_THICKNESS * tan(trinfiL)
	sjLx = (WALL_THICKNESS - WIDO_SILL - WIDO_FRAME_THICKNESS) * tan(trinfiL)
	sfjLx = (WALL_THICKNESS - WIDO_SILL) * tan(trinfiL)

	trinfiB = gs_reveal_bottom_angle
	trinB = gs_trim_width_in / cos(trinfiB)
	sfby = WIDO_FRAME_THICKNESS * tan(trinfiB) * (iRevealType = REVEAL_SLANTED)
	sjby = (WALL_THICKNESS - WIDO_SILL - WIDO_FRAME_THICKNESS) * tan(trinfiB)
	scBy = gs_trim_thk_in * tan(trinfiB)

	trinfiT = gs_reveal_top_angle
	trinT = gs_trim_width_in / cos(trinfiT)
	sfty = WIDO_FRAME_THICKNESS * tan(trinfiT) * (iRevealType = REVEAL_SLANTED)
	sjty = (WALL_THICKNESS - WIDO_SILL - WIDO_FRAME_THICKNESS) * tan(trinfiT)
	scTy = gs_trim_thk_in * tan(trinfiT)
else
	trinfiL = 0
	trinfiR = 0

	trinL = 0
	trinR = 0

	gi1L = 0
	gi2L = 0
	gi3L = 0
	trin2L = 0

	gi1R = 0
	gi2R = 0
	gi3R = 0
	trin2R = 0

	scLx = 0
	scRx = 0
	sfLx = 0
	sjLx = 0
	sfjLx = 0

	trinfiB = 0
	trinB = 0
	sfby = 0
	sjby = 0
	scBy = 0

	trinfiT = 0
	trinT = 0
	sfty = 0
	sjty = 0
	scTy = 0
endif


! ==============================================================================
! Set controller parameters for Simple with Overhang
! ==============================================================================

_bPocketDoor = 0
if iDoorType = 6 | iDoorType = 7 then _bPocketDoor = 1

_bEnableOutsideCasingOverhang = bittest(gs_CasingOutTypeEnable, 1)		! Complex with Overhang

if	(_bEnableOutsideCasingOverhang & (gs_trimtype_out_int = CASING_OVERHANG)) |\
	(_bPocketDoor & (gs_frame_wthk | (iRevealType = REVEAL_EDGE))) then

	gs_trim_show_cover_out = 1
endif

_bEnableInsideCasingOverhang = bittest(gs_CasingInTypeEnable, 1)		! Complex with Overhang

if	(_bEnableInsideCasingOverhang & (gs_trimtype_in_int = CASING_OVERHANG)) |\
	(_bPocketDoor & gs_frame_wthk) then

	gs_trim_show_cover_in = 1
endif


! ==============================================================================
! Set controller parameters for Complex Casing
! ==============================================================================

_bArchitraveCapitalOnSide = (iArchitraveCapitalType = ARCH_CAPITAL_SQUARE_ONSIDE |\
							 iArchitraveCapitalType = ARCH_CAPITAL_DECOR_ONSIDE)

_bEnableOutsideCasingComplex = bittest(gs_CasingOutTypeEnable, 2)		! Complex with Overhang

if _bEnableOutsideCasingComplex & (gs_trimtype_out_int = CASING_COMPLEX) then
	gs_trim_show_cover_out = 1
endif


! ==============================================================================
! Enable Switchable Casing Cover
! ==============================================================================

bExtSliding = 0
if iDoorType = 8 | iDoorType = 9 then bExtSliding = 1

_bEnableSwitchableOutCasCover =	(gs_casing_che |\
								 (not(bCasingUSA | gs_casing_nor | bExtSliding) &\ 
								  (iWindowShape = SHAPE_RECTANGULAR |\
								   iWindowShape = SHAPE_ARCHED |\
								   iWindowShape = SHAPE_T |\
								   iWindowShape = SHAPE_HALF_T_LEFT |\
								   iWindowShape = SHAPE_ARCHED_T |\
								   iWindowShape = SHAPE_ARCHED_HALF_T_LEFT |\
								   iWindowShape = SHAPE_HALF_T_RIGHT |\
								   iWindowShape = SHAPE_ARCHED_HALF_T_RIGHT |\
								   iWindowShape = SHAPE_ELLIPSEARCH)))

if not(_bEnableSwitchableOutCasCover) then gs_trim_show_cover_out = 1

_bEnableSwitchableInCasCover =	(gs_casing_che |\
								 (not(bCasingUSA | gs_casing_nor) &\ 
								  (iWindowShape = SHAPE_RECTANGULAR |\
								   iWindowShape = SHAPE_ARCHED |\
								   iWindowShape = SHAPE_T |\
								   iWindowShape = SHAPE_HALF_T_LEFT |\
								   iWindowShape = SHAPE_ARCHED_T |\
								   iWindowShape = SHAPE_ARCHED_HALF_T_LEFT |\
								   iWindowShape = SHAPE_HALF_T_RIGHT |\
								   iWindowShape = SHAPE_ARCHED_HALF_T_RIGHT |\
								   iWindowShape = SHAPE_ELLIPSEARCH)))


! ==============================================================================
! Set Casing Cover in case of Curved Wall
! ==============================================================================

if curvedWall then
	gs_trim_show_cover_out	= 1
	gs_trim_show_cover_in	= 1
endif


! ==============================================================================
! Enable Switchable Bottom Casing
! ==============================================================================

if bEnableSwitchableBottomCasing < 0 then
	bEnableSwitchableBottomCasing = isWindow &\
									(iWindowShape = SHAPE_RECTANGULAR |\
									 iWindowShape = SHAPE_ARCHED |\
									 iWindowShape = SHAPE_EYEBROWS |\
									 iWindowShape = SHAPE_HALFCIRCLE |\
									 iWindowShape = SHAPE_HALFARCH |\
									 iWindowShape = SHAPE_PENTAGON |\
									 iWindowShape = SHAPE_QUARTERROUND |\
									 iWindowShape = SHAPE_TRAPEZOID |\
									 iWindowShape = SHAPE_TRIANGLE |\
									 iWindowShape = SHAPE_GOTHICARCH |\
									 iWindowShape = SHAPE_ELLIPSEARCH |\
									 iWindowShape = SHAPE_HORSESHOE |\
									 iWindowShape = SHAPE_OGEECENTERED |\
									 iWindowShape = SHAPE_SARACENIC |\
									 iWindowShape = SHAPE_CORNER_TRIANGLE |\
									 iWindowShape = SHAPE_QUARTERROUND_NOFRAME)
endif
