
if GLOB_CONTEXT = 6 | GLOB_CONTEXT = 46 then end
if iWindowShape <> SHAPE_RECTANGULAR then end

! ==============================================================================
! Cavity Closure
! ==============================================================================

dim skinCummThkRef[]	! Cummulative skin thickness from the Outside Face (8 +1 skins))
dim skinCummThkOpp[]	! Cummulative skin thickness from the Inside Face (8 + 1 skins)

cumRefThk = 0
cumOppThk = 0

if bCompositeWall then
	for i=1 to WALL_SKINS_NUMBER
		idx = i: gosub 10	! Get proper index

		cumRefThk = cumRefThk + WALL_SKINS_PARAMS[idx][SKIN_THICKNESS]
		skinCummThkRef[idx] = cumRefThk

		idx = WALL_SKINS_NUMBER + 1 - idx	! reorder
		cumOppThk = cumOppThk + WALL_SKINS_PARAMS[idx][SKIN_THICKNESS]
		skinCummThkOpp[idx] = cumOppThk
	next i
endif

! ==============================================================================

if bCompositeWall then

	if curvedWall then
		if WIDO_REVEAL_SIDE then
			mulz -1
			addz -WIDO_FRAME_THICKNESS
		endif
		addz WOD
	else
		if WIDO_REVEAL_SIDE then addz WIDO_FRAME_THICKNESS
		if SYMB_ROTANGLE > EPS then mulz -1
		if wallIsLeft then
			addz WIDO_SILL
		else
			addz WALL_THICKNESS - WIDO_SILL
		endif
		if reorder then
			mulz -1
			addz WALL_THICKNESS
		endif
	endif
	mulz -1

	if bCavityCloserBottom | iClosureType = CLOSURE_VARIABLE | iClosureType = CLOSURE_DUTCH_VARIABLE then

		revealWidth		= gs_reveal_bottom
		revealAngle		= gs_reveal_bottom_angle
		revealSillAngle	= gs_reveal_outerBottom_angle

		addy -gs_lower_oversize
		if	(iClosureType = CLOSURE_VARIABLE | iClosureType = CLOSURE_DUTCH_VARIABLE) &\
			(bCavityCloserBottom | gs_cc_dutch_ShowBottom) & not(gs_stack_bottom) then

			gs_showJoint = gs_cc_dutch_ShowBottom
			bSlantedJointTop = 0
			gosub 2000													! Variable Closure
		endif
		del 1
	endif
	if bCavityCloserTop | iClosureType = CLOSURE_VARIABLE | iClosureType = CLOSURE_DUTCH_VARIABLE then

		revealWidth		= gs_reveal_top
		revealAngle		= gs_reveal_top_angle
		revealSillAngle	= gs_reveal_outerTop_angle

		addy B + gs_upper_oversize
		muly -1
		if	(iClosureType = CLOSURE_VARIABLE | iClosureType = CLOSURE_DUTCH_VARIABLE) &\
			(bCavityCloserTop | gs_cc_dutch_ShowTop) & not(gs_stack_top) then

			gs_showJoint = gs_cc_dutch_ShowTop
			bSlantedJointTop = not(curvedWall)
			gosub 2000													! Variable Closure
		endif
		del 2
	endif

endif

end

! ==============================================================================
! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end
! ==============================================================================


2000:
	if iClosureType = CLOSURE_VARIABLE | iClosureType = CLOSURE_DUTCH_VARIABLE then
		thkJoint = gs_cc_dutch_thkJoint
	else
		thkJoint = gs_thkJoint
	endif

	nSkins = WALL_SKINS_NUMBER - possibleSkinTurnOut - possibleSkinTurnIn
	if nSkins < 3 then return

	if iClosureType = CLOSURE_VARIABLE | iClosureType = CLOSURE_DUTCH_VARIABLE then
		signTurnDir = (gs_cc_dutch_ClosureToSide = 2) - not(gs_cc_dutch_ClosureToSide = 2)

		if gs_cc_dutch_ClosureToSide = 2 then
			idx = WALL_SKINS_NUMBER - possibleSkinTurnOut - gs_cc_dutch_ClosureToSkin: gosub 10	! Get proper index
			idx = max(idx, 1)
			idx = min(idx, WALL_SKINS_NUMBER + 1)
			baseSkinLevel = skinCummThkRef[idx]

			idx = WALL_SKINS_NUMBER - possibleSkinTurnOut:	gosub 10	! Get proper index
			idx = max(idx, 1)
			idx = min(idx, WALL_SKINS_NUMBER)
			baseSkinIdx = idx
		else
			idx = possibleSkinTurnIn + gs_cc_dutch_ClosureToSkin: gosub 10	! Get proper index
			idx = max(idx, 1)
			idx = min(idx, WALL_SKINS_NUMBER + 1)
			baseSkinIdx = idx
			baseSkinLevel = skinCummThkRef[baseSkinIdx]
		endif
	endif

	offsetFromJoint = ((iClosureType = CLOSURE_VARIABLE | iClosureType = CLOSURE_DUTCH_VARIABLE) & not(gs_cc_dutch_TurnToClosure)) * gs_cc_dutch_TurnToClosureOffs
	if iClosureType = CLOSURE_VARIABLE | iClosureType = CLOSURE_DUTCH_VARIABLE then
		signTurnDir2 = (gs_bTurnDir) - not(gs_bTurnDir)
		if (gs_cc_dutch_ClosureToSide = 2) exor gs_bTurnDir then
			lengthSkinTurnIn = baseSkinLevel - signTurnDir2 * gs_bJoint * (offsetFromJoint)
		else
			lengthSkinTurnIn = baseSkinLevel - signTurnDir2 * gs_bJoint * (thkJoint + offsetFromJoint)
		endif
	else
		lengthSkinTurnIn = baseSkinLevel - signTurnDir * gs_bJoint * (thkJoint + offsetFromJoint)
	endif

!!!	idx = nSkinTurnIn + gs_nTurn: gosub 10	! Get proper index
	if gs_bTurnDir then
		idx = possibleSkinTurnIn + gs_nTurn: gosub 10	! Get proper index
		if idx > 0 then
			level_1 = skinCummThkRef[idx]
		else
			level_1 = 0
		endif
	else
		idx = WALL_SKINS_NUMBER - possibleSkinTurnOut - gs_nTurn: gosub 10	! Get proper index
		level_1 = skinCummThkRef[idx]
	endif

!!!	idx = nSkinTurnIn: gosub 10	! Get proper index
	if gs_bTurnDir then
		idx = possibleSkinTurnIn: gosub 10	! Get proper index
		if idx > 0 then
			level_2 = skinCummThkRef[idx]
		else
			level_2 = 0
		endif
	else
		idx = WALL_SKINS_NUMBER - possibleSkinTurnOut: gosub 10	! Get proper index
		level_2 = skinCummThkRef[idx]
	endif

	summThicknessOfTurnedSkins = abs(level_1 - level_2)

	dx = 0
	bCuttedPlug = 0
	bNegativeTurn = 0

	vectS = -sin(revealAngle) * signWallIsLeft
	vectC =  cos(revealAngle)

	if bFirstSkinAtReveal exor not(gs_bTurnDir) then
		if iRevealType = REVEAL_POSITIVE then dx = -revealWidth
		if iRevealType = REVEAL_NEGATIVE then dx = -revealWidth
		if iRevealType = REVEAL_SLANTED  then dx = -revealWidth

		if not(curvedWall) then
			slantX = 0
			vectS = 0
			vectC = 1
		endif

		bCuttedPlug		= 0
		plugLeftDx		= 0
		plugOnWindow	= 0		! GER request

		bIncludeReveal	= 0

		if iRevealType <> REVEAL_NEGATIVE & revealWidth + EPS >= summThicknessOfTurnedSkins & summThicknessOfTurnedSkins + (thkJoint + offsetFromJoint) < WIDO_SILL then
			! note: summThicknessOfTurnedSkins equals the summ width of the turned skins

			if gs_bTurnDir then
				baseSkinLevel = WIDO_SILL
				lengthSkinTurnIn = baseSkinLevel - gs_bJoint * (thkJoint + offsetFromJoint)
			else
				baseSkinLevel = WALL_THICKNESS - WIDO_SILL
				lengthSkinTurnIn = baseSkinLevel + gs_bJoint * (thkJoint + offsetFromJoint)
			endif
			plugOnWindow = 1
		else
			if iRevealType = REVEAL_NEGATIVE & not(iClosureType	= CLOSURE_VARIABLE | iClosureType = CLOSURE_DUTCH_VARIABLE) then
				plugLeftDx = 0

				if gs_bTurnDir then
					if baseSkinLevel - EPS > WIDO_SILL then
						bCuttedPlug = 1
					endif
				else
					if baseSkinLevel - EPS < WALL_THICKNESS - WIDO_SILL then
						bCuttedPlug = 1
					endif
				endif
			else
				if gs_bTurnDir then
					if lengthSkinTurnIn - EPS >= WIDO_SILL then
						if lengthSkinTurnIn < WIDO_SILL + EPS then
							plugLeftDx = revealWidth
						else
							bIncludeReveal = 1
							if bSlantedInnerSide then
								if iRevealType = REVEAL_SLANTED then slantDy = lengthSkinTurnIn - WIDO_SILL
								if iRevealType = REVEAL_SPLAYED then slantDy = lengthSkinTurnIn - WIDO_SILL - WIDO_FRAME_THICKNESS
								dx = slantDy * tan(revealAngle)
							else
								dx = 0
							endif
						endif
					else
						bCuttedPlug = 1
					endif
				else
					if lengthSkinTurnIn + EPS <= WALL_THICKNESS - WIDO_SILL then
						if lengthSkinTurnIn > WALL_THICKNESS - WIDO_SILL + EPS then
							plugLeftDx = revealWidth
						else
							bIncludeReveal = 1
							if bSlantedInnerSide then
								if iRevealType = REVEAL_SLANTED then slantDy = WALL_THICKNESS - lengthSkinTurnIn - WIDO_SILL
								if iRevealType = REVEAL_SPLAYED then slantDy = WALL_THICKNESS - lengthSkinTurnIn - WIDO_SILL - WIDO_FRAME_THICKNESS
								dx = slantDy * tan(revealAngle)
							else
								dx = 0
							endif
						endif
					else
						bCuttedPlug = 1
					endif
				endif
			endif
		endif
		if WIDO_SILL < EPS & (iRevealType = REVEAL_EDGE | iRevealType = REVEAL_NO | iRevealType = REVEAL_POSITIVE | iRevealType = REVEAL_NEGATIVE) then
			bIncludeReveal = 0
		endif
	else

		if iRevealType = REVEAL_NEGATIVE then
			if gs_bTurnDir then
				if baseSkinLevel + EPS >= WALL_THICKNESS - WIDO_SILL & WIDO_SILL < WALL_THICKNESS then
					bIncludeReveal = 1
				endif
			else
				if baseSkinLevel + EPS <= WIDO_SILL & WIDO_SILL < WALL_THICKNESS then
					bIncludeReveal = 1
				endif
			endif
		else
			if gs_bTurnDir then
				if curvedWall & not(bWndCurved) then
					if wallIsLeft then
						sLevel = sqr(bx^2 + (by + WOD)^2) - radBoard
					else
						sLevel = WALL_THICKNESS - sqr(bx^2 + (by + WOD)^2) + radSill
					endif

					if baseSkinLevel - EPS >= sLevel then
						bCuttedPlug = 1
						plugLeftDx = -revealWidth
					endif
				else
					if baseSkinLevel + EPS > WALL_THICKNESS - WIDO_SILL then
						bCuttedPlug = 1
						plugLeftDx = -revealWidth
					endif
				endif
			else
				if curvedWall & not(bWndCurved) then
					if wallIsLeft then
						sLevel = radSill - sqr(bx^2 + (by + WOD)^2)
					else
						sLevel = sqr(bx^2 + (by + WOD)^2) - radSill
					endif

					if baseSkinLevel + EPS <= sLevel then
						bCuttedPlug = 1
						plugLeftDx = -revealWidth
					endif
				else
					if baseSkinLevel + EPS < WIDO_SILL then
						bCuttedPlug = 1
						plugLeftDx = -revealWidth
					endif
				endif
			endif
		endif

		if iRevealType = REVEAL_NEGATIVE then
			if gs_bTurnDir then
				if WALL_THICKNESS - WIDO_SILL < baseSkinLevel + EPS then
					dx = -revealWidth
				endif
			else
				if WIDO_SILL > baseSkinLevel + EPS then
					dx = -revealWidth
				endif
			endif
			bNegativeTurn = 1
		endif
		if iRevealType = REVEAL_SLANTED then slantLength = WALL_THICKNESS - WIDO_SILL
		if iRevealType = REVEAL_SPLAYED then slantLength = WALL_THICKNESS - WIDO_SILL - WIDO_FRAME_THICKNESS

		if not(curvedWall) then
			if bSlantedInnerSide then
				slantX = tan(revealAngle)
				vectS = -sin(revealAngle) * signWallIsLeft
				vectC =  cos(revealAngle)
			else
				slantX = 0
				vectS = 0
				vectC = 1
			endif
		endif
	endif

	if iRevealType = REVEAL_EDGE | iRevealType = REVEAL_NO then
		bCuttedPlug		= 0
		bIncludeReveal	= 0
	endif

	if iClosureType = CLOSURE_VARIABLE | iClosureType = CLOSURE_DUTCH_VARIABLE then
		bCuttedPlug	= 0
		plugLeftDx	= 0

		dx = 0
		if bFirstSkinAtReveal then
			if	iRevealType = REVEAL_POSITIVE | \
				iRevealType = REVEAL_SLANTED then
				refLevelForDxTest = baseSkinLevel + (gs_cc_dutch_ClosureToSide = 1) * thkJoint
				if WIDO_SILL > refLevelForDxTest - EPS then
					dx = -revealWidth
				endif
			endif
			if iRevealType = REVEAL_NEGATIVE then
				refLevelForDxTest = baseSkinLevel - (gs_cc_dutch_ClosureToSide = 2) * thkJoint
				if WIDO_SILL > refLevelForDxTest + EPS then
					dx = -revealWidth
				endif
			endif
		else
			if	iRevealType = REVEAL_POSITIVE | \
				iRevealType = REVEAL_SLANTED then
				refLevelForDxTest = baseSkinLevel - (gs_cc_dutch_ClosureToSide = 2) * thkJoint
				if WALL_THICKNESS - WIDO_SILL < refLevelForDxTest + EPS then
					dx = -revealWidth
				endif
			endif
			if iRevealType = REVEAL_NEGATIVE then
				refLevelForDxTest = baseSkinLevel + (gs_cc_dutch_ClosureToSide = 1) * thkJoint
				if WALL_THICKNESS - WIDO_SILL < refLevelForDxTest - EPS then
					dx = -revealWidth
				endif
			endif
		endif
	endif

	if gs_bJoint then

		if iClosureType = CLOSURE_VARIABLE | iClosureType = CLOSURE_DUTCH_VARIABLE then
			widthJoint = gs_cc_dutch_widthJoint
		else
			widthJoint = summThicknessOfTurnedSkins
		endif

! Draw Insulation Strip ========================================================

		if GLOB_STRUCTURE_DISPLAY = STRUCTURE_CORE_ONLY & not(iClosureType = CLOSURE_VARIABLE | iClosureType = CLOSURE_DUTCH_VARIABLE) then
			gs_showJoint = 0
		endif

		if gs_showJoint then

			if AC_HoleSideMaterial then
				if (baseSkinLevel < WALL_THICKNESS - WIDO_SILL) exor WIDO_REVEAL_SIDE then
					matWallSide = WALL_MAT_A
				else
					matWallSide = WALL_MAT_B
				endif
			else
				matWallSide = WALL_MAT_EDGE
			endif

			if gs_cc_dutch_matJointCustom then
				matSpouwlat = gs_cc_dutch_matJoint
			else
				matSpouwlat = matWallSide
			endif
			bShowEdges = (matWallSide <> matSpouwlat)

			if GLOB_CONTEXT = 3 | GLOB_CONTEXT = 23 then
				pen WALL_VIEW_PEN
			else
				pen gs_penJoint
			endif

! Closure is always placed to inside face of the wall at Dutch Closure =========

			offsetToJoint = 0
			if iClosureType = CLOSURE_DUTCH_VARIABLE then

				offsetToJoint = offsetFromJoint * not(gs_cc_dutch_TurnToClosure)

				if curvedWall & reorder then
					offsetToJoint = -offsetToJoint
				endif
			endif

! End of closure moving to inside face of the wall =============================

			if not(curvedWall) then
				slantedTopDiff = min(widthJoint, bSlantedJointTop * thkJoint * tan(10))
				if (gs_cc_dutch_ClosureToSide = 2 exor (wallIsLeft & not(bInclinedWall)) exor reorder) exor (wallIsLeft & bInclinedWall) then
					slantedTopDiff1 = slantedTopDiff
					slantedTopDiff2 = 0
				else
					slantedTopDiff1 = 0
					slantedTopDiff2 = slantedTopDiff
				endif

				material matSpouwlat
				sect_attrs gs_fillJoint, gs_penJointBg, gs_penJointFg, gs_penJoint, gs_ltJoint

				add 0, -dx, baseSkinLevel + offsetToJoint
				roty 90
				rotz 90
				addz -A/2
				prism_ 4,A,
					 0,								 0,							13 + 2 * bShowEdges,
					 0,								-signTurnDir * thkJoint,	13 + 2 * bShowEdges,
					-widthJoint + slantedTopDiff2,	-signTurnDir * thkJoint,	15,
					-widthJoint + slantedTopDiff1,	 0,							15

				material matWallSide
				wallniche 4, 1, 2,
					0,0,1, A,
					 0,								 0,							29,
					 0,								-signTurnDir * thkJoint,	29,
					-widthJoint + slantedTopDiff2,	-signTurnDir * thkJoint,	31,
					-widthJoint + slantedTopDiff1,	 0,							31
				del 4

			else

				offsArc = iHolePosSign * AC_Hole_Position_Angle / 180 * PI * rBoard
				resol WALL_RESOL

				bCondition = WIDO_REVEAL_SIDE exor SYMB_MIRRORED
				signCondition = (not(bCondition) - bCondition)
				roty signCondition * abs(AC_Hole_Position_Angle) + not(wallIsLeft) * 180

				if reorder exor wallIsLeft then
					rBaseSkinLevel = radSill - signReorder * baseSkinLevel
				else
					rBaseSkinLevel = radBoard - signReorder * baseSkinLevel
				endif
				rBaseSkinLevel = rBaseSkinLevel - offsetToJoint

				offsArc = signWallIsLeft * AC_Hole_Position_Angle / 180 * PI * rBaseSkinLevel

				sideLeft	= leftAlfa  / 180 * PI * rBaseSkinLevel
				sideRight	= rightAlfa / 180 * PI * rBaseSkinLevel

				addz rBaseSkinLevel

				sect_attrs gs_fillJoint, gs_penJointBg, gs_penJointFg, gs_penJoint, gs_ltJoint
				bprism_ matSpouwlat,matSpouwlat,matSpouwlat,
					4,signTurnDir * signReorder * thkJoint, rBaseSkinLevel,
					offsArc - signWallIsLeft * sideLeft,	 0,			 13 + 2 * bShowEdges,
					offsArc - signWallIsLeft * sideLeft,	-widthJoint, 15,
					offsArc + signWallIsLeft * sideRight,	-widthJoint, 15,
					offsArc + signWallIsLeft * sideRight,	 0,			 8 + 7 * bShowEdges

				del 2

				alfaEnd		= -leftAlfa
				alfaStart	= rightAlfa
				arcRadius	= rBaseSkinLevel
				bMiddlePoints = 1
				firstStatus	= 15
				midStatus	= 15
				lastStatus	= 15
				gosub 100

				alfaEnd		= rightAlfa
				alfaStart	= -leftAlfa
				arcRadius	= rBaseSkinLevel + signTurnDir * signReorder * thkJoint
				bMiddlePoints = 1
				firstStatus	= 14
				midStatus	= 14
				lastStatus	= 14
				gosub 100

				addz WOD
				rotx -90

				material matWallSide
				if nsp >= 12 then
					wallniche nsp/3, 1, 2,
						0,0,1, -widthJoint,
						get(nsp)
				else
					for i=1 to nsp
						n = get(1)
					next i
				endif

				del 2

			endif
		endif
	endif

return


! ==============================================================================
! Arch Segmentation
! ------------------------------------------------------------------------------
! Input parameters:
!	alfaStart:		Start angle (angle)
!	alfaEnd:		End angle (angle)
!	arcRadius:		Arc radius (length)
!	bMiddlePoints:	Generate middle points (0 / 1)
!	firstStatus:	Status of the first segment (integer)
!	midStatus:		Status of the middle segments (integer)
!	lastStatus:		Status of the last segment (integer)
! ==============================================================================

100:
	if not(wallIsLeft) then
		alfaStart = 180 - alfaStart
		alfaEnd = 180 - alfaEnd
	endif
	segmentAngle = 360 / WALL_RESOL


	! --- Point at Start Angle ---
	if WIDO_REVEAL_SIDE then
		if SYMB_ROTANGLE < EPS then
			difAngle = (AC_Hole_Position_Angle + alfaStart) mod segmentAngle
		else
			difAngle = -(AC_Hole_Position_Angle - 180 - alfaStart) mod segmentAngle
		endif
	else
		if SYMB_ROTANGLE < EPS then
			difAngle = -(AC_Hole_Position_Angle - alfaStart + 180) mod segmentAngle
		else
			difAngle = (AC_Hole_Position_Angle + alfaStart) mod segmentAngle
		endif
	endif

	difAngle2 = difAngle
	if abs(difAngle) > segmentAngle / 2 then difAngle = -segmentAngle / 2 + abs(difAngle mod (segmentAngle / 2))

	segmentR = arcRadius / cos(difAngle)
	put segmentR * sin(alfaStart), -segmentR * cos(alfaStart) + WOD, firstStatus

	if bMiddlePoints then
		! --- Middle Points ---
		segmentR = arcRadius / cos(segmentAngle / 2)

		if alfaStart > alfaEnd then
			alfaActual = alfaStart - difAngle2 + segmentAngle / 2

			if alfaActual > alfaStart then alfaActual = alfaActual - segmentAngle
			if alfaActual > alfaStart then alfaActual = alfaActual - segmentAngle

			if alfaActual < alfaEnd then alfaActual = alfaActual + segmentAngle

			if alfaActual < alfaStart & alfaActual > alfaEnd then
				do
					put segmentR * sin(alfaActual), -segmentR * cos(alfaActual) + WOD, midStatus + 64

					alfaActual = alfaActual - segmentAngle

				while alfaActual > alfaEnd
			endif
		else
			alfaActual = alfaStart - difAngle2 + segmentAngle / 2

			if alfaActual < alfaStart then alfaActual = alfaActual + segmentAngle
			if alfaActual > alfaEnd then alfaActual = alfaActual - segmentAngle

			if alfaActual > alfaStart & alfaActual < alfaEnd then
				do
					put segmentR * sin(alfaActual), -segmentR * cos(alfaActual) + WOD, midStatus + 64

					alfaActual = alfaActual + segmentAngle
				while alfaActual < alfaEnd
			endif
		endif
	endif


	! --- Point at End Angle ---
	if WIDO_REVEAL_SIDE then
		if SYMB_ROTANGLE < EPS then
			difAngle = (AC_Hole_Position_Angle + alfaEnd) mod segmentAngle
		else
			difAngle = -(AC_Hole_Position_Angle + 180 - alfaEnd) mod segmentAngle
		endif
	else
		if SYMB_ROTANGLE < EPS then
			difAngle = -(AC_Hole_Position_Angle - alfaEnd + 180) mod segmentAngle
		else
			difAngle = (AC_Hole_Position_Angle + alfaEnd) mod segmentAngle
		endif
	endif

	if abs(difAngle) > segmentAngle / 2 then difAngle = -segmentAngle / 2 + abs(difAngle mod (segmentAngle / 2))

	segmentR = arcRadius / cos(difAngle)
	put segmentR * sin(alfaEnd), -segmentR * cos(alfaEnd) + WOD, lastStatus

return


