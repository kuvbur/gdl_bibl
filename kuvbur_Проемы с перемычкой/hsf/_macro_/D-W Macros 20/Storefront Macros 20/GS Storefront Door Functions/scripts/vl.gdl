

! =============================================================================
! Hide All parameters list
! =============================================================================
hideparameter all


! =============================================================================
! 3D Based 2D Symbol Support
! =============================================================================

if AC_Hole_Display_Option = 3 then
	parameters AC_WallContours = 0
else
	parameters AC_WallContours = 1
endif


hideparameter "ac_details"

! =============================================================================
! Dimension Link
! =============================================================================

! Egress Size -> Leaf Size difference
leafDLeft		= bEnableDoorStop * gs_ds_w
leafDRight		= bEnableDoorStop * gs_ds_w
leafDUpper		= bEnableDoorStop * gs_ds_w
leafDLower		= 0

! Egress Size -> Unit Size difference
unitDLeft		= not(gs_sidelight_left)  * gs_fw_side_left  + bEnableDoorStop * gs_ds_w + sidelightLeftWidth
unitDRight		= not(gs_sidelight_right) * gs_fw_side_right + bEnableDoorStop * gs_ds_w + sidelightRightWidth
unitDUpper		= not(gs_door_transom)    * gs_fw_upper + bEnableDoorStop * gs_ds_w + transomHeight
unitDLower		= 0

! Unit Size -> Wallhole Size difference
wallholeDLeft	= gs_tolerance_left
wallholeDRight	= gs_tolerance_right
wallholeDUpper	= gs_tolerance_upper + VentilationProfileHeight * isVentilationOverFrame
wallholeDLower	= gs_tolerance_lower

! Reveal Size -> Wallhole Size difference
revealDLeft		= gs_reveal_left
revealDRight	= gs_reveal_right
revealDUpper	= gs_reveal_top
revealDLower	= gs_reveal_bottom


! =============================================================================
! Show / Hide 2D Fills
! =============================================================================

if not(gs_bFills) then	! Hide
	hideparameter	"gs_wallhole_fill",
					"gs_wallhole_pen_fg",
					"gs_wallhole_pen_bg"

	lock	"gs_wallhole_fill",
			"gs_wallhole_pen_fg",
			"gs_wallhole_pen_bg"
endif


! =============================================================================
! Wall Contour Line Parameter Handling
! =============================================================================

if not(bEnableSill | bEnableThreshold) then
	lock "gs_wcont_hidden_line_out"
	hideparameter "gs_wcont_hidden_line_out"
endif
if not(bEnableThreshold) then
	lock "gs_wcont_hidden_line_in"
	hideparameter "gs_wcont_hidden_line_in"
endif


! =============================================================================
! UK Listing Parameters
! =============================================================================

if bEnableNEDFireRating then
	values "gs_list_firerating"			`Нет`, `Самозакрывающаяся`, `30 минут`, `60 минут`, `30 минут + самозакрывающаяся`, `60 минут + самозакрывающаяся`, CUSTOM

	if GLOB_MODPAR_NAME = "gs_list_firerating" then
		iNEDFireRating = 0
		if gs_list_firerating = `Самозакрывающаяся` then iNEDFireRating = 1
		if gs_list_firerating = `30 минут` then iNEDFireRating = 2
		if gs_list_firerating = `60 минут` then iNEDFireRating = 3
		if gs_list_firerating = `30 минут + самозакрывающаяся` then iNEDFireRating = 4
		if gs_list_firerating = `60 минут + самозакрывающаяся` then iNEDFireRating = 5
		parameters iNEDFireRating = iNEDFireRating
	else
		if iNEDFireRating = 1 then gs_list_firerating = `Самозакрывающаяся`
		if iNEDFireRating = 2 then gs_list_firerating = `30 минут`
		if iNEDFireRating = 3 then gs_list_firerating = `60 минут`
		if iNEDFireRating = 4 then gs_list_firerating = `30 минут + самозакрывающаяся`
		if iNEDFireRating = 5 then gs_list_firerating = `60 минут + самозакрывающаяся`
		parameters gs_list_firerating = gs_list_firerating
	endif
else
	if bEnableDACHFireRating then
		! Fire rating: Self-Closing
		! =============================================================================

		gs_list_FR_expression = ""
		if LibraryLangCode = "AUT" then
			gs_list_FR_expression = "E"
		endif

		if gs_list_bInsulation then
			gs_list_FR_expression = gs_list_FR_expression + "I" + gs_list_FR_indexSelfClosing
		endif
		
		gs_list_FR_expression = gs_list_FR_expression + gs_list_firerating
		
		if gs_list_FR_bSelfClosing | gs_list_bSmokeProtection then
		
			gs_list_FR_expression = gs_list_FR_expression + "-"
		
			if gs_list_FR_bSelfClosing then
				gs_list_FR_expression = gs_list_FR_expression + "C"
			endif
			if gs_list_bSmokeProtection then
				gs_list_FR_expression = gs_list_FR_expression + "S" + gs_list_SmokeTestTemp
			endif
		endif
		parameters gs_list_FR_expression = gs_list_FR_expression
		
		lock "gs_list_FR_expression"
		if not(gs_list_bInsulation) then
			lock "gs_list_FR_indexSelfClosing"
		endif
		if not(gs_list_bSmokeProtection) then
			lock "gs_list_SmokeTestTemp"
		endif

	else
		values "gs_list_firerating"			`Нет`, `FS30`, `FD30SC`, `FS30SC`, `FS60`, `FD60SC`, `FS60SC`, CUSTOM
	endif
endif

if gs_show_UKListParams then
	values "gs_list_acousticrating"		`Нет`, `32 dB/Rw`, `35 dB/Rw`, `38 dB/Rw`, custom
	values "gs_list_finish"				`Нет`, `Облицовка`, `Поливинилхлорид`, `Полированная Сталь`, custom
	values "gs_list_frametype"			`Нет`, `Сталь`, `Алюминий`, `Древесина`, custom
	values "gs_list_firesignage"		`Нет`, `FDKS`, `FDKLS`, `AFDKC`, custom
	values "gs_list_visionpanel_type"	stVisionPanelTypes
endif

if not(bEnableDACHFireRating) then
	lock	"gs_list_FR_bSelfClosing",
			"gs_list_FR_indexSelfClosing",
			"gs_list_FR_expression"
	hideparameter	"gs_list_FR_bSelfClosing",
					"gs_list_FR_indexSelfClosing",
					"gs_list_FR_expression"
endif

! =============================================================================
! Wallhole Structure
! =============================================================================

call "WallholeStructure" parameters all A = A, B = B,
	refWidth 				= refWidth,
	leftWidth				= leftWidth,
	rightWidth				= rightWidth,
	openingHeight			= openingHeight,
	iRevealType				= iRevealType,
	iSillRevealType			= iSillRevealType,
	iBoardRevealType		= iBoardRevealType,
	leftWallholeRevealPnts	= leftWallholeRevealPnts,
	rightWallholeRevealPnts	= rightWallholeRevealPnts,
	iRevealPointsIdx		= iRevealPointsIdx,
	iClosureType			= iClosureType,
! --- Coustom CC Settings ---
	gs_custom_cc_turn_in		= gs_custom_cc_turn_in,
	iCustomCCThicknessType = iCustomCCThicknessType,
	iCustomCCOrientation = iCustomCCOrientation,
	gs_custom_cc_separator		= gs_custom_cc_separator,
	iCustomCCEditJambSide = iCustomCCEditJambSide,
	iCustomCCEditWallSide = iCustomCCEditWallSide,
	iCustomCCEditSkin = iCustomCCEditSkin,
	gs_custom_cc_array_left		= gs_custom_cc_array_left,
	gs_custom_cc_array_right	= gs_custom_cc_array_right,
	gs_custom_cc_thickness		= gs_custom_cc_thickness,
	gs_custom_cc_overhang		= gs_custom_cc_overhang,
	gs_custom_cc_separator_pen	= gs_custom_cc_separator_pen,
! --- Connections ---
	gs_stack_left			= gs_stack_left,
	gs_stack_right			= gs_stack_right,
	gs_stack_top			= 0,
! --- Function Control Parameters
	bEnablePlasterLeftIn	= bEnablePlasterLeftIn,
	bEnablePlasterLeftOut	= bEnablePlasterLeftOut,
	bEnablePlasterRightIn	= bEnablePlasterRightIn,
	bEnablePlasterRightOut	= bEnablePlasterRightOut,
	bEnablePlasterTopIn		= bEnablePlasterTopIn,
	bEnablePlasterTopOut	= bEnablePlasterTopOut,
	bEnablePlasterBottomIn	= bEnablePlasterBottomIn,
	bEnablePlasterBottomOut	= bEnablePlasterBottomOut,
	bEnableParapetInset		= bEnableParapetInset,
	bEnableMasonryArch		= bEnableMasonryArch,
	bEnableFaschen			= bEnableFaschen,
	gs_RevealTypeEnable		= gs_RevealTypeEnable,
	gs_ClosureTypeEnable	= gs_ClosureTypeEnable,
	bEnableWallContourHiddenLine	= bEnableWallContourHiddenLine,
! --- Macro Control Parameters
	isWindow				= 1,
	iWindowShape			= iWindowShape,
	defaultSillDepth		= defaultSillDepth,
! --- Corner Functions
	bLeftCornerFunction		= bLeftCornerFunction,
!	leftCornerAngle			= leftCornerAngle,
!	leftConnWallThk			= leftConnWallThk,
	bRightCornerFunction	= bRightCornerFunction,
!	rightCornerAngle		= rightCornerAngle,
!	rightConnWallThk		= rightConnWallThk,
! --- Casing
	bDrawOutsideTrim		= bDrawOutsideTrim,
	bDrawInsideTrim			= bDrawInsideTrim,
! --- ventialtion over frame wallhole size modification
	includeVentilationHeight		= VentilationProfileHeight * isVentilationOverFrame,
! --- String Resources
	stRevealTypes					= stRevealTypes,
	stRevealTypesBottom				= stRevealTypesBottom,
	stRevealAngleEditBy				= stRevealAngleEditBy,
	stClosureTypes					= stClosureTypes,
	stWallContourLine				= stWallContourLine,
	stCavityClosureSide				= stCavityClosureSide,
	stCavityClosureTurnDir			= stCavityClosureTurnDir,
	stDutchClosureToSide			= stDutchClosureToSide,
	stCavityClosureEditedJambSide	= stCavityClosureEditedJambSide,
	stCavityClosureEditedWallSide	= stCavityClosureEditedWallSide,
	stCavityClosureEditedSkinNumber	= stCavityClosureEditedSkinNumber,
	stCavityClosureTurnInThickness	= stCavityClosureTurnInThickness,
	stCavityClosureHatchOrientation	= stCavityClosureHatchOrientation,
!	stMasonryArchTypes				= stMasonryArchTypes,
!	stMasonryArchStructure			= stMasonryArchStructure,
!	gs_faschen_type 				= gs_faschen_type
! --- Dimension Link Parameters
	unitDLeft	= unitDLeft,
	unitDRight	= unitDRight,
	unitDUpper	= unitDUpper,
	unitDLower	= unitDLower,
	leafDLeft	= leafDLeft,
	leafDRight	= leafDRight,
	leafDUpper	= leafDUpper,
	leafDLower	= leafDLower


! =============================================================================
! Demolition / New construction
! =============================================================================

if gs_bFills = 0 then
	lock "iTypeDemolitionFill"
endif

if gs_bShowDemolitionPar then
	values{2} "iTypeDemolitionFill" 	RENOVATION_FILL_EXIST, `Нет`,
										RENOVATION_FILL_DEMOLISHED, `Демонтаж`,
										RENOVATION_FILL_NEW, `Новая Конструкция - Пустой Символ`,
										RENOVATION_FILL_NEW_FULL, `Новая Конструкция - Полный Символ`

	if iTypeDemolitionFill = RENOVATION_FILL_DEMOLISHED then
		lock "gs_wallhole_fill"
		lock "gs_wallhole_pen_fg"
		lock "gs_wallhole_pen_bg"
	endif

	if	iTypeDemolitionFill = RENOVATION_FILL_NEW |\
		iTypeDemolitionFill = RENOVATION_FILL_NEW_FULL then

		lock "gs_wallhole_fill"
		lock "gs_wallhole_pen_fg"
		lock "gs_wallhole_pen_bg"
	endif
endif


! =============================================================================
! 2D Detail Level
! =============================================================================

if gs_2DDetEnable = 0 then
			values{2} "iDWDet2D"	DETLEVEL_DW2D_MVO,		`по ПМВ`,
									DETLEVEL_DW2D_SCSENS,	`Зависит от Масштаба`,
									DETLEVEL_DW2D_50,		`1:50`,
									DETLEVEL_DW2D_100,		`1:100`,
									DETLEVEL_DW2D_200,		`1:200`,
									DETLEVEL_DW2D_OFF,		`Откл.`
else

	dim n2DScaleValueMask[]
	dim n2DScaleValueMask_m[]

	i=1
	if bittest( gs_2DDetEnable, 8) then                                              ! by MVO, 256
				n2DScaleValueMask[i] = stDetail2D[1]
				n2DScaleValueMask_m[i] = DETLEVEL_DW2D_MVO
				i = i + 1
	endif
	if bittest( gs_2DDetEnable, 0) then                                              ! Scale Sensitive in Value list, 1
				n2DScaleValueMask[i] = stDetail2D[2]
				n2DScaleValueMask_m[i] = DETLEVEL_DW2D_SCSENS
				i = i + 1
	endif
	if bittest( gs_2DDetEnable, 7) then                                              ! 1:20 in Value list,128
				n2DScaleValueMask[i] = stDetail2D[9]
				n2DScaleValueMask_m[i] = DETLEVEL_DW2D_20
				i = i + 1
	endif
	if bittest( gs_2DDetEnable, 1) then                                              ! 1:50 in Value list,2
				n2DScaleValueMask[i] = stDetail2D[3]
				n2DScaleValueMask_m[i] = DETLEVEL_DW2D_50
				i = i + 1
	endif
	if bittest( gs_2DDetEnable, 2) then                                              ! 1:100 in Value list,4
				n2DScaleValueMask[i] = stDetail2D[4]
				n2DScaleValueMask_m[i] = DETLEVEL_DW2D_100
				i = i + 1
	endif
	if bittest( gs_2DDetEnable, 3) then                                              ! 1:200 in Value list,8
				n2DScaleValueMask[i] = stDetail2D[5]
				n2DScaleValueMask_m[i] = DETLEVEL_DW2D_200
				i = i + 1
	endif
	if bittest( gs_2DDetEnable, 9) then                                              ! 1:500 in Value list, 512
				n2DScaleValueMask[i] = stDetail2D[10]
				n2DScaleValueMask_m[i] = DETLEVEL_DW2D_500
				i = i + 1
	endif
	if bittest( gs_2DDetEnable, 4) then                                              ! Off in Value list,16
				n2DScaleValueMask[i] = stDetail2D[6]
				n2DScaleValueMask_m[i] = DETLEVEL_DW2D_OFF
				i = i + 1
	endif
	if bittest( gs_2DDetEnable, 5) then                                              ! Chinese Simple in Value list,32
				n2DScaleValueMask[i] = stDetail2D[7]
				n2DScaleValueMask_m[i] = DETLEVEL_DW2D_CHISMPL
				i = i + 1
	endif
	if bittest( gs_2DDetEnable, 6) then                                              ! Chinese Detailed in Value list,64
				n2DScaleValueMask[i] = stDetail2D[8]
				n2DScaleValueMask_m[i] = DETLEVEL_DW2D_CHIDET
				i = i + 1
	endif

			values{2} "iDWDet2D"  n2DScaleValueMask_m, n2DScaleValueMask
endif


! =============================================================================
! Show Reveal On Symbol
! =============================================================================

if bCanHaveReveal then
	values{2} "iRevealOnSymbol"	SHOWREV_MVO, stRevealOnSymbValues[1],
					SHOWREV_ALWAYS, stRevealOnSymbValues[2],
					SHOWREV_UPTO50, stRevealOnSymbValues[3],
					SHOWREV_UPTO100, stRevealOnSymbValues[4],
					SHOWREV_UPTO200, stRevealOnSymbValues[5],
					SHOWREV_NEVER, stRevealOnSymbValues[6]
					
else
	lock "iRevealOnSymbol"
	hideparameter "iRevealOnSymbol"
endif


! =============================================================================
! UI Support
! =============================================================================

if GLOB_UI_BUTTON_ID < 0 then
	parameters gs_ui_current_page = -GLOB_UI_BUTTON_ID
endif

! =============================================================================
! Opline Parameters
! =============================================================================

call "OpeningOptions" parameters all bWindow 		= 0,
						iLineShapeCategory			= iLineShapeCategory,
						iLineShapeSwingEnable		= iLineShapeSwingEnable,
						gs_leaf_optype_m			= gs_leaf_optype_m,
						b2ColumnsOnOpLineUI			= 1,
						bLockOplineStyle			= bLockOplineStyle,
						bDisable2DOverride			= 0,
						bDisable3DOverride			= 0,
						bDisableSwingType			= 0,
						iOpeningParamType			= 1,
						bEnableSwingLineTurnOff		= bEnableSwingLineTurnOff,
						bEnableSecondaryOpLineTypes	= bEnableSecondaryOpLineTypes,
						gs_bSameLineTypeForLeaves	= gs_bSameLineTypeForLeaves

! =============================================================================
! Minimal Space parameter cotrol
! =============================================================================

	call "dw_minimalspace" parameters A = A,
									B = B,
									ac_wallhole_width = A,
									EgressMSWidth = EgressMSWidth,
									egressOffset = egressOffset,
									msOpeningSideWidth2 = msOpeningSideWidth2,
									msOpeningSideWidth1 = msOpeningSideWidth1,
									ms_openingSDepth = ms_openingSDepth,
									msOppositeSideWidth2 = msOppositeSideWidth2,
									msOppositeSideWidth1 = msOppositeSideWidth1,
									ms_oppositeSDepth = ms_oppositeSDepth,
									ms_slidingWidth = 0,
!									ac_unit_width = ac_unit_width,
!									gs_opside_list = gs_opside_list,
!									gs_opside_list_m = gs_opside_list_m,
									bSlidingSingle = 0,
									bSlidingDouble = 0,
									gs_leaf_optype_m	= gs_leaf_optype_m

! =============================================================================
! Oversize
! =============================================================================

values "gs_left_oversize"  range[0,]
values "gs_right_oversize" range[0,]
values "gs_upper_oversize" range[0,]
values "gs_lower_oversize" range[0,]

! =============================================================================
! Nominal Size Chooser
! =============================================================================
if not(bLanguageUSA) then
	hideparameter "gs_unit_size"
	lock "gs_unit_size"
else
	!! TYPICAL SIZES !!

	if iDoorType = 1 then
		dim bTyp_asize[]
			bTyp_asize[1]=30"
			bTyp_asize[2]=32"
			bTyp_asize[3]=36"

		dim bTyp_bsize[]
			bTyp_bsize[1]=80"
			bTyp_bsize[2]=84"
			bTyp_bsize[3]=96"
	else
		dim bTyp_asize[]
			bTyp_asize[1]=60"
			bTyp_asize[2]=64"
			bTyp_asize[3]=72"

		dim bTyp_bsize[]
			bTyp_bsize[1]=80"
			bTyp_bsize[2]=84"
			bTyp_bsize[3]=96"
	endif

	dim bTypsize[]
		for ib=1 to vardim1(bTyp_bsize)
			for ia=1 to vardim1(bTyp_asize)
				bTypsize[ib+vardim1(bTyp_bsize)*(ia-1)]=str("%0ffi", bTyp_asize[ia])+" x "+str("%0ffi", bTyp_bsize[ib])
			next ia
		next ib

	values "gs_unit_size" `Специальный Размер`, bTypsize

	if not(gs_leaf_nominal) then lock "gs_unit_size"
endif

bSetParams = 0

if GLOB_MODPAR_NAME = "gs_wallhole_nominal" | (gs_reveal_nominal & not(bCanHaveReveal)) then
	gs_wallhole_nominal	= 1
	gs_reveal_nominal	= 0
	gs_unit_nominal		= 0
	gs_egress_nominal	= 0
	gs_leaf_nominal		= 0

	bSetParams = 1
endif

if GLOB_MODPAR_NAME = "gs_reveal_nominal" then
	gs_wallhole_nominal	= 0
	gs_reveal_nominal	= 1
	gs_unit_nominal		= 0
	gs_egress_nominal	= 0
	gs_leaf_nominal		= 0

	bSetParams = 1
endif

if GLOB_MODPAR_NAME = "gs_unit_nominal" then
	gs_wallhole_nominal	= 0
	gs_reveal_nominal	= 0
	gs_unit_nominal		= 1
	gs_egress_nominal	= 0
	gs_leaf_nominal		= 0

	bSetParams = 1
endif

if GLOB_MODPAR_NAME = "gs_egress_nominal" then
	gs_wallhole_nominal	= 0
	gs_reveal_nominal	= 0
	gs_unit_nominal		= 0
	gs_egress_nominal	= 1
	gs_leaf_nominal		= 0

	bSetParams = 1
endif

if GLOB_MODPAR_NAME = "gs_leaf_nominal" then
	gs_wallhole_nominal	= 0
	gs_reveal_nominal	= 0
	gs_unit_nominal		= 0
	gs_egress_nominal	= 0
	gs_leaf_nominal		= 1

	bSetParams = 1
endif

if bSetParams then
	parameters	gs_nominal_size		= gs_wallhole_nominal + 2 * gs_reveal_nominal + 4 * gs_unit_nominal + 8 * gs_egress_nominal + 16 * gs_leaf_nominal,
				gs_wallhole_nominal	= gs_wallhole_nominal,
				gs_reveal_nominal	= gs_reveal_nominal,
				gs_unit_nominal		= gs_unit_nominal,
				gs_egress_nominal	= gs_egress_nominal,
				gs_leaf_nominal		= gs_leaf_nominal
endif


! =============================================================================

bRecalculate	= 	(GLOB_MODPAR_NAME = "gs_frame_width" |		\
					GLOB_MODPAR_NAME = "gs_tolerance_left" |	\
					GLOB_MODPAR_NAME = "gs_tolerance_right" |	\
					GLOB_MODPAR_NAME = "gs_tolerance_upper" |	\
					GLOB_MODPAR_NAME = "gs_tolerance_lower" |	\
					GLOB_MODPAR_NAME = "gs_reveal_left" |		\
					GLOB_MODPAR_NAME = "gs_reveal_right" |		\
					GLOB_MODPAR_NAME = "gs_reveal_top" |		\
					GLOB_MODPAR_NAME = "gs_reveal_bottom"|	\
					GLOB_MODPAR_NAME = "bVentilationProfile"|	\
					GLOB_MODPAR_NAME = "iVentilationProfileType"|	\
					(GLOB_MODPAR_NAME = "VentilationProfileHeight" & isVentilationOverFrame))

bNominalSelectChanged	= (	GLOB_MODPAR_NAME = "gs_wallhole_nominal" |	\
							GLOB_MODPAR_NAME = "gs_reveal_nominal" |	\
							GLOB_MODPAR_NAME = "gs_unit_nominal" |		\
							GLOB_MODPAR_NAME = "gs_egress_nominal" |	\
							GLOB_MODPAR_NAME = "gs_leaf_nominal")

minWallholeWidth	= minUnitWidth	+ wallholeDLeft  + wallholeDRight
minWallholeHeight	= minUnitHeight + wallholeDUpper + wallholeDLower
minRevealWidth		= minUnitWidth	+ wallholeDLeft	 + wallholeDRight - revealDLeft  - revealDRight
minRevealHeight		= minUnitHeight + wallholeDUpper + wallholeDLower - revealDUpper - revealDLower
minEgressWidth		= minUnitWidth	- unitDLeft  - unitDRight
minEgressHeight		= minUnitHeight	- unitDUpper - unitDLower
minLeafWidth		= minEgressWidth  + leafDLeft  + leafDRight
minLeafHeight		= minEgressHeight + leafDUpper + leafDLower

bSizeModified	= 0
gosub 100		! Link Dimensions

if gs_wallhole_nominal then
	minWidth	= minWallholeWidth
	minHeight	= minWallholeHeight
endif
if gs_reveal_nominal then
	minWidth	= minRevealWidth
	minHeight	= minRevealHeight
endif
if gs_unit_nominal then
	minWidth	= minUnitWidth
	minHeight	= minUnitHeight
endif
if gs_egress_nominal then
	minWidth	= minEgressWidth
	minHeight	= minEgressHeight
endif
if gs_leaf_nominal then
	minWidth	= minLeafWidth
	minHeight	= minLeafHeight
endif


values "A" range [minWidth,]
values "B" range [minHeight,]

if bSizeModified | (not(gs_retain_nominal_sizes) & bNominalSelectChanged) then
	if gs_wallhole_nominal then
		if ac_wallhole_width < minWallholeWidth then
						ac_wallhole_width = minWallholeWidth
			parameters	ac_wallhole_width = minWallholeWidth
			bSizeModified = 1
		endif
		if ac_wallhole_height < minWallholeHeight then
						ac_wallhole_height = minWallholeHeight
			parameters	ac_wallhole_height = minWallholeHeight
			bSizeModified = 1
		endif

		parameters A = ac_wallhole_width,	B = ac_wallhole_height
	endif
	if gs_reveal_nominal then
		if ac_reveal_width < minRevealWidth then
						ac_reveal_width = minRevealWidth
			parameters	ac_reveal_width = minRevealWidth
			bSizeModified = 1
		endif
		if ac_reveal_height < minRevealHeight then
						ac_reveal_height = minRevealHeight
			parameters	ac_reveal_height = minRevealHeight
			bSizeModified = 1
		endif

		parameters A = ac_reveal_width,	B = ac_reveal_height
	endif
	if gs_unit_nominal then
		if ac_unit_width < minUnitWidth then
						ac_unit_width = minUnitWidth
			parameters	ac_unit_width = minUnitWidth
			bSizeModified = 1
		endif
		if ac_unit_height < minUnitHeight then
						ac_unit_height = minUnitHeight
			parameters	ac_unit_height = minUnitHeight
			bSizeModified = 1
		endif

		parameters A = ac_unit_width, B = ac_unit_height
	endif
	if gs_egress_nominal then
		if ac_egress_width < minEgressWidth then
						ac_egress_width = minEgressWidth
			parameters	ac_egress_width = minEgressWidth
			bSizeModified = 1
		endif
		if ac_egress_height < minEgressHeight then
						ac_egress_height = minEgressHeight
			parameters	ac_egress_height = minEgressHeight
			bSizeModified = 1
		endif

		parameters A = ac_egress_width, B = ac_egress_height
	endif
	if gs_leaf_nominal then
		if ac_leaf_width < minLeafWidth then
						ac_leaf_width = minLeafWidth
			parameters	ac_leaf_width = minLeafWidth
			bSizeModified = 1
		endif
		if ac_leaf_height < minLeafHeight then
						ac_leaf_height = minLeafHeight
			parameters	ac_leaf_height = minLeafHeight
			bSizeModified = 1
		endif

		parameters A = ac_leaf_width, B = ac_leaf_height
	endif
else
	if A < minWidth then
		A = minWidth
		parameters A = A
	endif
	if B < minHeight then
		B = minHeight
		parameters B = B
	endif

	if gs_wallhole_nominal then
		ac_wallhole_width	= A
		ac_wallhole_height	= B
		parameters ac_wallhole_width = A, ac_wallhole_height = B
	endif
	if gs_reveal_nominal then
		ac_reveal_width  = A
		ac_reveal_height = B
		parameters ac_reveal_width = A, ac_reveal_height = B
	endif
	if gs_unit_nominal then
		ac_unit_width	= A
		ac_unit_height	= B
		parameters ac_unit_width = A, ac_unit_height = B
	endif
	if gs_egress_nominal then
		ac_egress_width  = A
		ac_egress_height = B
		parameters ac_egress_width = A, ac_egress_height = B
	endif
	if gs_leaf_nominal then
		ac_leaf_width	= A
		ac_leaf_height	= B
		parameters ac_leaf_width = A, ac_leaf_height = B
	endif

	bRecalculate = 1
	gosub 100		! Link Dimensions
endif

if	not(bCanHaveReveal)	then
	lock "gs_reveal_nominal", "ac_reveal_width", "ac_reveal_height"
	hideparameter "gs_reveal_nominal", "ac_reveal_width", "ac_reveal_height"
endif


! ====================================================
! 				Door opens to Zone
! ====================================================


values "gs_list_location_as" stLocationAs

if gs_list_location_as <> stLocationAs[3] then
	roomname	= ""
	roomnumber	= ""

	catname = "" : code = ""
	name = ""	: nr = ""
	catname2 = "" : code2 = ""
	name2 = "" 	: nr2 = ""
	rrr = request("Zone_relations","",catname,code,name,nr,catname2,code2,name2,nr2)

	if rrr<>0 then

		outDir = 0
		zzz = request ("WINDOW_DOOR_ZONE_RELEV", "", outDir)

		if rrr=8 then
				if outDir = 1 then
					roomname=name
					roomnumber=nr
				else
					roomname=name2
					roomnumber=nr2
				endif
			else
				if rrr=4 then !this reports if only one zone
					if outDir = 1 then
						roomname=name
						roomnumber=nr
					else
						roomname=name!nullStr
						roomnumber=nr
					endif
				endif
		endif
	endif

	if gs_list_location_as = stLocationAs[1] then
		parameters gs_list_location = roomname
		lock "gs_list_location"
	endif

	if gs_list_location_as = stLocationAs[2] then
		parameters gs_list_location = roomnumber
		lock "gs_list_location"
	endif
endif

! =============================================================================
end
! =============================================================================


100:
! =============================================================================
! Link Dimensions
! =============================================================================
	if bLanguageUSA then
		if gs_unit_size<>`Специальный Размер` then
			nr=split ( gs_unit_size, "%n x %n", a_size, sep, b_size)

			ac_leaf_width=a_size
			ac_leaf_height=b_size
			parameters ac_leaf_width=a_size
			parameters ac_leaf_height=b_size

			ac_egress_width		= ac_leaf_width		- leafDLeft		- leafDRight
			ac_unit_width		= ac_egress_width	+ unitDLeft		+ unitDRight
			ac_wallhole_width	= ac_unit_width		+ wallholeDLeft	+ wallholeDRight
			ac_reveal_width		= ac_wallhole_width	- revealDLeft	- revealDRight
			parameters	ac_wallhole_width	= ac_wallhole_width,
						ac_reveal_width		= ac_reveal_width,
						ac_unit_width		= ac_unit_width,
						ac_egress_width		= ac_egress_width

			ac_egress_height	= ac_leaf_height	- leafDUpper	 - leafDLower
			ac_unit_height		= ac_egress_height	+ unitDUpper	 + unitDLower
			ac_wallhole_height	= ac_unit_height	+ wallholeDUpper + wallholeDLower
			ac_reveal_height	= ac_wallhole_height - revealDUpper		- revealDLower
			parameters	ac_wallhole_height	= ac_wallhole_height,
						ac_reveal_height	= ac_reveal_height,
						ac_unit_height		= ac_unit_height,
						ac_egress_height	= ac_egress_height

			lock "ac_unit_width", "ac_unit_height"
			lock "ac_wallhole_width", "ac_wallhole_height"
			lock "ac_egress_width", "ac_egress_height"
			lock "ac_reveal_width", "ac_reveal_height"

			bSizeModified = 1
		endif
	endif

	if GLOB_MODPAR_NAME = "ac_wallhole_width" | (gs_wallhole_nominal & bRecalculate) then
		if ac_wallhole_width < minWallholeWidth then
						ac_wallhole_width = minWallholeWidth
			parameters	ac_wallhole_width = minWallholeWidth
		endif

		ac_reveal_width	= ac_wallhole_width	- revealDLeft	- revealDRight
		ac_unit_width	= ac_wallhole_width	- wallholeDLeft	- wallholeDRight
		gosub "sidelightSizeModifier"
		ac_leaf_width	= ac_egress_width	+ leafDLeft		+ leafDRight

		parameters	ac_reveal_width	= ac_reveal_width,
					ac_unit_width	= ac_unit_width,
					ac_egress_width	= ac_egress_width,
					ac_leaf_width	= ac_leaf_width

		bSizeModified = 1
	endif
	if GLOB_MODPAR_NAME = "ac_reveal_width" | (gs_reveal_nominal & bRecalculate) then
		if ac_reveal_width < minRevealWidth then
						ac_reveal_width = minRevealWidth
			parameters	ac_reveal_width = minRevealWidth
		endif

		ac_wallhole_width	= ac_reveal_width	+ revealDLeft	+ revealDRight
		ac_unit_width		= ac_wallhole_width	- wallholeDLeft	- wallholeDRight
		gosub "sidelightSizeModifier"
		ac_leaf_width		= ac_egress_width	+ leafDLeft		+ leafDRight

		parameters	ac_wallhole_width	= ac_wallhole_width,
					ac_unit_width		= ac_unit_width,
					ac_egress_width		= ac_egress_width,
					ac_leaf_width		= ac_leaf_width

		bSizeModified = 1
	endif
	if GLOB_MODPAR_NAME = "ac_unit_width" | (gs_unit_nominal & bRecalculate) then
		if ac_unit_width < minUnitWidth then
						ac_unit_width = minUnitWidth
			parameters	ac_unit_width = minUnitWidth
		endif

		ac_wallhole_width	= ac_unit_width		+ wallholeDLeft	+ wallholeDRight
		ac_reveal_width		= ac_wallhole_width	- revealDLeft	- revealDRight
		gosub "sidelightSizeModifier"
		ac_leaf_width		= ac_egress_width	+ leafDLeft		+ leafDRight

		parameters	ac_wallhole_width	= ac_wallhole_width,
					ac_reveal_width		= ac_reveal_width,
					ac_egress_width		= ac_egress_width,
					ac_leaf_width		= ac_leaf_width

		bSizeModified = 1
	endif
	if GLOB_MODPAR_NAME = "ac_egress_width" | (gs_egress_nominal & bRecalculate) then
		if ac_egress_width < minEgressWidth then
						ac_egress_width = minEgressWidth
			parameters	ac_egress_width = minEgressWidth
		endif

		if GLOB_MODPAR_NAME = "ac_egress_width" then gosub "sidelightSizeModifierForLeafEgress"
		ac_leaf_width		= ac_egress_width	+ leafDLeft		+ leafDRight
		ac_unit_width		= ac_egress_width	+ unitDLeft		+ unitDRight
		ac_wallhole_width	= ac_unit_width		+ wallholeDLeft	+ wallholeDRight
		ac_reveal_width		= ac_wallhole_width	- revealDLeft	- revealDRight

		parameters	ac_wallhole_width	= ac_wallhole_width,
					ac_reveal_width		= ac_reveal_width,
					ac_unit_width		= ac_unit_width,
					ac_leaf_width		= ac_leaf_width

		bSizeModified = 1
	endif
	if GLOB_MODPAR_NAME = "ac_leaf_width" | (gs_leaf_nominal & bRecalculate) then
		if ac_leaf_width < minLeafWidth then
						ac_leaf_width = minLeafWidth
			parameters	ac_leaf_width = minLeafWidth
		endif

		ac_egress_width		= ac_leaf_width		- leafDLeft		- leafDRight
		if GLOB_MODPAR_NAME = "ac_leaf_width" then gosub "sidelightSizeModifierForLeafEgress"
		ac_unit_width		= ac_egress_width	+ unitDLeft		+ unitDRight
		ac_wallhole_width	= ac_unit_width		+ wallholeDLeft	+ wallholeDRight
		ac_reveal_width		= ac_wallhole_width	- revealDLeft	- revealDRight

		parameters	ac_wallhole_width	= ac_wallhole_width,
					ac_reveal_width		= ac_reveal_width,
					ac_unit_width		= ac_unit_width,
					ac_egress_width		= ac_egress_width

		bSizeModified = 1
	endif

	! =============================================================================

	if GLOB_MODPAR_NAME = "ac_wallhole_height" | (gs_wallhole_nominal & bRecalculate) then
		if ac_wallhole_height < minWallholeHeight then
						ac_wallhole_height = minWallholeHeight
			parameters	ac_wallhole_height = minWallholeHeight
		endif

		ac_reveal_height	= ac_wallhole_height - revealDUpper		- revealDLower
		ac_unit_height		= ac_wallhole_height - wallholeDUpper	- wallholeDLower
		gosub "transomSizeModifier"
		ac_leaf_height		= ac_egress_height	 + leafDUpper		+ leafDLower

		parameters	ac_reveal_height	= ac_reveal_height,
					ac_unit_height		= ac_unit_height,
					ac_egress_height	= ac_egress_height,
					ac_leaf_height		= ac_leaf_height

		bSizeModified = 1
	endif
	if GLOB_MODPAR_NAME = "ac_reveal_height" | (gs_reveal_nominal & bRecalculate) then
		if ac_reveal_height < minRevealHeight then
						ac_reveal_height = minRevealHeight
			parameters	ac_reveal_height = minRevealHeight
		endif

		ac_wallhole_height	= ac_reveal_height	 + revealDUpper		+ revealDLower
		ac_unit_height		= ac_wallhole_height - wallholeDUpper	- wallholeDLower
		gosub "transomSizeModifier"
		ac_leaf_height		= ac_egress_height	 + leafDUpper		+ leafDLower

		parameters	ac_wallhole_height	= ac_wallhole_height,
					ac_unit_height		= ac_unit_height,
					ac_egress_height	= ac_egress_height,
					ac_leaf_height		= ac_leaf_height

		bSizeModified = 1
	endif
	if GLOB_MODPAR_NAME = "ac_unit_height" | (gs_unit_nominal & bRecalculate) then
		if ac_unit_height < minUnitHeight then
						ac_unit_height = minUnitHeight
			parameters	ac_unit_height = minUnitHeight
		endif

		ac_wallhole_height	= ac_unit_height	+ wallholeDUpper + wallholeDLower
		ac_reveal_height	= ac_wallhole_height - revealDUpper	 - revealDLower
		gosub "transomSizeModifier"
		ac_leaf_height		= ac_egress_height	+ leafDUpper	 + leafDLower

		parameters	ac_wallhole_height	= ac_wallhole_height,
					ac_reveal_height	= ac_reveal_height,
					ac_egress_height	= ac_egress_height,
					ac_leaf_height		= ac_leaf_height

		bSizeModified = 1
	endif
	if GLOB_MODPAR_NAME = "ac_egress_height" | (gs_egress_nominal & bRecalculate) then
		if ac_egress_height < minEgressHeight then
						ac_egress_height = minEgressHeight
			parameters	ac_egress_height = minEgressHeight
		endif

		if GLOB_MODPAR_NAME = "ac_egress_height" then gosub "transomSizeModifierForLeafEgress"
		ac_leaf_height		= ac_egress_height	+ leafDUpper	 + leafDLower
		ac_unit_height		= ac_egress_height	+ unitDUpper	 + unitDLower
		ac_wallhole_height	= ac_unit_height	+ wallholeDUpper + wallholeDLower
		ac_reveal_height	= ac_wallhole_height - revealDUpper		- revealDLower

		parameters	ac_wallhole_height	= ac_wallhole_height,
					ac_reveal_height	= ac_reveal_height,
					ac_unit_height		= ac_unit_height,
					ac_leaf_height		= ac_leaf_height

		bSizeModified = 1
	endif
	if GLOB_MODPAR_NAME = "ac_leaf_height" | (gs_leaf_nominal & bRecalculate) then
		if ac_leaf_height < minLeafHeight then
						ac_leaf_height = minLeafHeight
			parameters	ac_leaf_height = minLeafHeight
		endif

		ac_egress_height	= ac_leaf_height	- leafDUpper	 - leafDLower
		if GLOB_MODPAR_NAME = "ac_leaf_height" then gosub "transomSizeModifierForLeafEgress"
		ac_unit_height		= ac_egress_height	+ unitDUpper	 + unitDLower
		ac_wallhole_height	= ac_unit_height	+ wallholeDUpper + wallholeDLower
		ac_reveal_height	= ac_wallhole_height - revealDUpper		- revealDLower

		parameters	ac_wallhole_height	= ac_wallhole_height,
					ac_reveal_height	= ac_reveal_height,
					ac_unit_height		= ac_unit_height,
					ac_egress_height	= ac_egress_height

		bSizeModified = 1
	endif
return

! =============================================================================

"sidelightSizeModifier":

	if gs_sidelight_left then
		if gs_sidelight_right then
			! sidelights on both sides
			sidelightsTotalWidth = ac_unit_width - ac_egress_width - gs_ds_w * 2
			if GLOB_MODPAR_NAME = "gs_sidelight_width_left" then
				if gs_sidelight_width_left > sidelightsTotalWidth - minSidelightWidthRight then gs_sidelight_width_left = sidelightsTotalWidth - minSidelightWidthRight
				if gs_sidelight_width_left < minSidelightWidthLeft then gs_sidelight_width_left = minSidelightWidthLeft
				gs_sidelight_width_right = sidelightsTotalWidth - gs_sidelight_width_left
			else
				if GLOB_MODPAR_NAME = "gs_sidelight_width_right" then
					if gs_sidelight_width_right > sidelightsTotalWidth - minSidelightWidthLeft then gs_sidelight_width_right = sidelightsTotalWidth - minSidelightWidthLeft
					if gs_sidelight_width_right < minSidelightWidthRight then gs_sidelight_width_right = minSidelightWidthRight
					gs_sidelight_width_left = sidelightsTotalWidth - gs_sidelight_width_right
				else
					sideRatio = gs_sidelight_width_left / (gs_sidelight_width_left + gs_sidelight_width_right)
					gs_sidelight_width_left = sideRatio * sidelightsTotalWidth
					if gs_sidelight_width_left < minSidelightWidthLeft then gs_sidelight_width_left = minSidelightWidthLeft
					gs_sidelight_width_right = sidelightsTotalWidth - gs_sidelight_width_left
					if gs_sidelight_width_right < minSidelightWidthRight then gs_sidelight_width_right = minSidelightWidthRight
				endif
			endif
			parameters gs_sidelight_width_left = gs_sidelight_width_left, gs_sidelight_width_right = gs_sidelight_width_right
			ac_egress_width = ac_unit_width - gs_ds_w * 2 - gs_sidelight_width_left - gs_sidelight_width_right
		else
			! sidelight only on the left
			if	GLOB_MODPAR_NAME <> "gs_sidelight_width_left" then
				gs_sidelight_width_left = ac_unit_width - unitDRight - ac_egress_width - gs_ds_w
			endif
			if gs_sidelight_width_left < minSidelightWidthLeft then gs_sidelight_width_left = minSidelightWidthLeft
			parameters gs_sidelight_width_left = gs_sidelight_width_left
			ac_egress_width = ac_unit_width - gs_ds_w - gs_sidelight_width_left - unitDRight
		endif
	else
		if gs_sidelight_right then
			! sidelight only on the right
			if	GLOB_MODPAR_NAME <> "gs_sidelight_width_right" then
				gs_sidelight_width_right = ac_unit_width - unitDLeft - ac_egress_width - gs_ds_w
			endif
			if gs_sidelight_width_right < minSidelightWidthRight then gs_sidelight_width_right = minSidelightWidthRight
			parameters gs_sidelight_width_right = gs_sidelight_width_right
			ac_egress_width = ac_unit_width - gs_ds_w - gs_sidelight_width_right - unitDLeft
		else
			! no sidelight at all
			ac_egress_width	= ac_unit_width		- unitDLeft		- unitDRight
		endif
	endif
	if ac_egress_width < minEgressWidth then ac_egress_width = minEgressWidth

return


"sidelightSizeModifierForLeafEgress":

	if gs_sidelight_left then
		if gs_sidelight_right then
			! sidelights on both sides
			sidelightsTotalWidth = ac_unit_width - ac_egress_width - gs_ds_w * 2
			sideRatio = gs_sidelight_width_left / (gs_sidelight_width_left + gs_sidelight_width_right)

			gs_sidelight_width_left = sideRatio * sidelightsTotalWidth
			if gs_sidelight_width_left < minSidelightWidthLeft then gs_sidelight_width_left = minSidelightWidthLeft

			gs_sidelight_width_right = sidelightsTotalWidth - gs_sidelight_width_left
			if gs_sidelight_width_right < minSidelightWidthRight then gs_sidelight_width_right = minSidelightWidthRight

			parameters	gs_sidelight_width_left = gs_sidelight_width_left,
						gs_sidelight_width_right = gs_sidelight_width_right
		else
			! sidelight only on the left
			gs_sidelight_width_left = ac_unit_width - unitDRight - ac_egress_width - gs_ds_w

			if gs_sidelight_width_left < minSidelightWidthLeft then gs_sidelight_width_left = minSidelightWidthLeft
			parameters gs_sidelight_width_left = gs_sidelight_width_left
		endif
	else
		if gs_sidelight_right then
			! sidelight only on the right
			gs_sidelight_width_right = ac_unit_width - unitDLeft - ac_egress_width - gs_ds_w

			if gs_sidelight_width_right < minSidelightWidthRight then gs_sidelight_width_right = minSidelightWidthRight
			parameters gs_sidelight_width_right = gs_sidelight_width_right
		else
			! no sidelight at all
		endif
	endif
	if gs_sidelight_left | gs_sidelight_right then gosub "unitSizeDiff"

return


"transomSizeModifier":

	if gs_door_transom then
		! Has Transom
		if	GLOB_MODPAR_NAME <> "gs_transom_height" then
			gs_transom_height = ac_unit_height - unitDLower - ac_egress_height - gs_ds_w
		endif
		if gs_transom_height < minTransomHeight then gs_transom_height = minTransomHeight
		parameters gs_transom_height = gs_transom_height
		ac_egress_height = ac_unit_height - unitDLower - gs_transom_height - gs_ds_w
	else
		! No Transom
		ac_egress_height	= ac_unit_height	 - unitDUpper		- unitDLower
	endif
	if ac_egress_height < minEgressHeight then ac_egress_height = minEgressHeight

return


"transomSizeModifierForLeafEgress":

	if gs_door_transom then
		gs_transom_height = ac_unit_height - unitDLower - ac_egress_height - gs_ds_w

		if gs_transom_height < minTransomHeight then gs_transom_height = minTransomHeight
		parameters gs_transom_height = gs_transom_height

		gosub "unitSizeDiff"
	endif

return


"unitSizeDiff":

	unitDLeft		= not(gs_sidelight_left)  * gs_frame_width_left  + gs_ds_w + gs_sidelight_width_left * gs_sidelight_left
	unitDRight		= not(gs_sidelight_right) * gs_frame_width_right + gs_ds_w + gs_sidelight_width_right * gs_sidelight_right
	unitDUpper		= not(gs_door_transom)    * gs_frame_width_upper + gs_ds_w + gs_transom_height * gs_door_transom
	unitDLower		= 0

return

