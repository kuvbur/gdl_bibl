
! =============================================================================
! 2D detail level settings
! =============================================================================

if iLoD2D = SYMBW_SCALESENS then							! Scale sensitive
	iLoD2D = SYMBW_S_1LINE
	if GLOB_SCALE <= 100 then	iLoD2D = SYMBW_M_2LINE_NOGLASS
	if GLOB_SCALE <=  50 then	iLoD2D = SYMBW_D_SGLASS
endif

if GLOB_CONTEXT > 20 & GLOB_CONTEXT < 40 then bFeedBack = 1

drawindex 20	! Draw Window Function at first

gs_wallhole_fill	= gs_bFills * gs_wallhole_fill


if AC_WallType = 2 then
	id1 = AC_WindowInWallContour[1]
	id2 = AC_WindowInWallContour[2]
	id3 = AC_WindowInWallContour[3]
	id4 = AC_WindowInWallContour[4]

	if id1 > 0 & id2 > 0 & id3 > 0 & id4 > 0 & abs(id1 - id2) = 1 & abs(id3 - id4) = 1 then
		if abs(AC_WallContourPolygon[id1][2] - AC_WallContourPolygon[id2][2]) < EPS & abs(AC_WallContourPolygon[id3][2] - AC_WallContourPolygon[id4][2]) < EPS then
			AC_WallType = 1
		endif
	endif
endif


! =============================================================================
! Request Globals for Opening Lines and Hotspots
! =============================================================================

gs_opLinePen			= 1
gs_iSwingType			= 1
gs_swingLineType		= 1

call "OpeningOptions" parameters	gs_opening_dir_m 			= 2 - bOpeningDirection,
									bWindow						= 1,
									iLineShapeCategory			= iLineShapeCategory,
									bOverride_MVO_2D			= bOverride_MVO_2D,
									or_opLinePen				= or_opLinePen,
									or_iSwingType				= or_iSwingType,
									or_iSlidingType				= or_iSlidingType,
									or_swingLineType			= or_swingLineType,
									bEnableSecondaryOpLineTypes	= 0,
						returned_parameters dummy,
											gs_opLinePen,
											gs_iSwingType,
											gs_iSlidingType,
											gs_swingLineType,
											dummy


! -----------------------------------------------------------------------------
! Hotspot Display Control
! -----------------------------------------------------------------------------
if iLoD2D < SYMBW_D_SGLASS then
	bShowUnitHotspots	= 0
	bShowAddHotspots	= 0
else
	bShowUnitHotspots	= not(gs_lich)
endif

if bShowAddHotspotsForIS then
	bShowUnitHotspots	= 1
	bShowAddHotspots	= 1
endif


! =============================================================================
! Draw the cavity closure and turned plasters
! =============================================================================

drawindex 40	! Draw Cavity Closure at the top

leftWidth	= A / 2
rightWidth	= A / 2
gs_stack_left = 0
gs_stack_right = 0
gs_reveal_left	= 0
gs_reveal_right	= 0

if iRevealType = REVEAL_POSITIVE then
	if SYMB_ROTANGLE > EPS exor SYMB_MIRRORED then
		gs_reveal_left	= WIDO_RIGHT_JAMB
		gs_reveal_right	= WIDO_LEFT_JAMB
	else
		gs_reveal_left	= WIDO_LEFT_JAMB
		gs_reveal_right	= WIDO_RIGHT_JAMB
	endif
endif

bCavityCloserLeft	= (not(gs_stack_left)  & (iCavityClosureSide = CAVITY_SIDE_BOTH | iCavityClosureSide = CAVITY_SIDE_LEFT))
bCavityCloserRight	= (not(gs_stack_right) & (iCavityClosureSide = CAVITY_SIDE_BOTH | iCavityClosureSide = CAVITY_SIDE_RIGHT))

bOutsideAtRefLine = (wallIsLeft exor (AC_Wall_Direction_Type <> 1 & AC_Wall_Direction_Type <> 3))

if bOutsideAtRefLine then
	if bInsideTrim then
		gs_bAutoTurnOut	= 0
		gs_bOverOut		= 0
	endif
	if bOutsideTrim then
		gs_bAutoTurnIn	= 0
		gs_bOverIn		= 0
	endif
else
	if bOutsideTrim then
		gs_bAutoTurnOut	= 0
		gs_bOverOut		= 0
	endif
	if bInsideTrim then
		gs_bAutoTurnIn	= 0
		gs_bOverIn		= 0
	endif
endif

bDrawObjContourIn	= (WALL_SKINS_NUMBER = 0)
bDrawObjContourOut	= (WALL_SKINS_NUMBER = 0)

bDrawFrameContourLeft	= 1
bDrawFrameContourRight	= 1

call "terrace_CavityClosure",
	parameters all	refWidth				= A,
					leftWidth				= leftWidth,
					rightWidth				= rightWidth,
					bWndCurved				= gs_IsCurved,
					bCavityCloserLeft		= bCavityCloserLeft,
					bCavityCloserRight		= bCavityCloserRight,
					bDrawObjContourIn		= bDrawObjContourIn,
					bDrawObjContourOut		= bDrawObjContourOut,
					bDrawFrameContourLeft	= bDrawFrameContourLeft,
					bDrawFrameContourRight	= bDrawFrameContourRight,
					bCornerWindow			= 0,
					fillWallHole			= gs_bFills * gs_wallhole_fill,
					penWallHoleFg			= gs_wallhole_pen_fg,
					penWallHoleBg			= gs_wallhole_pen_bg,
					iWallContourLine		= iWallContourLine,
					gs_wcont_line_in		= gs_wcont_line_in,
					gs_wcont_line_out		= gs_wcont_line_out,
					penWallContour			= gs_pen_2D,
					iRevealType				= iRevealType,
					gs_reveal_left			= gs_reveal_left,
					gs_reveal_right			= gs_reveal_right,
					gs_reveal_left_angle	= 0,
					gs_reveal_right_angle	= 0,
					gs_stack_left			= gs_stack_left,
					gs_stack_right			= gs_stack_right,
					gs_bAutoTurnIn			= gs_bAutoTurnIn,
					gs_bOverIn				= gs_bOverIn,
					gs_bAutoTurnOut			= gs_bAutoTurnOut,
					gs_bOverOut				= gs_bOverOut


! ===============================================================================
!	New Wallhole Symbol (SWE symbol)
! ===============================================================================

openingWidth = A

if gs_bShowNewOnCC & (iTypeDemolitionFill = RENOVATION_FILL_NEW | iTypeDemolitionFill = RENOVATION_FILL_NEW_FULL) then


	fill gs_new_symb_fill

	if abs(WIDO_ORIG_DIST) < EPS then					!!! Straight wall

		if WIDO_REVEAL_SIDE then
			mul2 1, -1
			add2 0, WIDO_FRAME_THICKNESS
		endif


		if abs(WALL_INCL) < EPS then

			WALLBLOCK2 4, 6+16+32, gs_new_symb_pen_Fg, gs_new_symb_pen_Bg,
						0, 0, 0,
						-openingWidth/2, WIDO_SILL, 32,
						-openingWidth/2 - gs_new_symb_width_r, WIDO_SILL, 32,
						-openingWidth/2 - gs_new_symb_width_r, WIDO_SILL-WALL_THICKNESS, 32,
						-openingWidth/2, WIDO_SILL-WALL_THICKNESS, 32
			WALLBLOCK2 4, 6+16+32, gs_new_symb_pen_Fg, gs_new_symb_pen_Bg,
						0, 0, 0,
						openingWidth/2, WIDO_SILL, 32,
						openingWidth/2 + gs_new_symb_width_l, WIDO_SILL, 32,
						openingWidth/2 + gs_new_symb_width_l, WIDO_SILL-WALL_THICKNESS, 32,
						openingWidth/2, WIDO_SILL-WALL_THICKNESS, 32

			if WALL_SKINS_NUMBER = 0 then
				pen WALL_SECT_PEN
				line_type 1
			else
				if abs(SYMB_ROTANGLE-180) < EPS then
					pen WALL_SKINS_PARAMS[1][7]
					line_type WALL_SKINS_PARAMS[1][8]
				else
					pen WALL_SKINS_PARAMS[WALL_SKINS_NUMBER][9]
					line_type WALL_SKINS_PARAMS[WALL_SKINS_NUMBER][10]
				endif
			endif

			line_property 2

			WALLLINE2 openingWidth/2, WIDO_SILL, openingWidth/2 + gs_new_symb_width_l, WIDO_SILL
			WALLLINE2 -openingWidth/2, WIDO_SILL, -openingWidth/2 - gs_new_symb_width_r, WIDO_SILL


			if WALL_SKINS_NUMBER <> 0 then
				if abs(SYMB_ROTANGLE-180) < EPS then
					pen WALL_SKINS_PARAMS[WALL_SKINS_NUMBER][9]
					line_type WALL_SKINS_PARAMS[WALL_SKINS_NUMBER][10]
				else
					pen WALL_SKINS_PARAMS[1][7]
					line_type WALL_SKINS_PARAMS[1][8]
				endif
			endif

			WALLLINE2 openingWidth/2, WIDO_SILL-WALL_THICKNESS, openingWidth/2 + gs_new_symb_width_l, WIDO_SILL-WALL_THICKNESS
			WALLLINE2 -openingWidth/2, WIDO_SILL-WALL_THICKNESS, -openingWidth/2 - gs_new_symb_width_r, WIDO_SILL-WALL_THICKNESS

		else								!!!inclined wall


			if SYMB_MIRRORED exor abs(SYMB_ROTANGLE) < EPS then
				incl_sign = -1
			else
				incl_sign = 1
			endif

			if WIDO_REVEAL_SIDE then
				mul2 1,-1
				add2 0, WALL_THICKNESS - 2*WIDO_SILL
			endif

			WALLBLOCK2 4, 6+16+32, gs_new_symb_pen_Fg, gs_new_symb_pen_Bg,
						0, 0, 0,
						-openingWidth/2, WIDO_SILL + WIDO_REVEAL_SIDE * incl_sign * tan(WALL_INCL) * openingWidth/2, 32,
						-openingWidth/2 - gs_new_symb_width_r, WIDO_SILL + WIDO_REVEAL_SIDE * incl_sign * tan(WALL_INCL) * (openingWidth/2 + gs_new_symb_width_r), 32,
						-openingWidth/2 - gs_new_symb_width_r, WIDO_SILL-WALL_THICKNESS - not(WIDO_REVEAL_SIDE) * incl_sign * tan(WALL_INCL) * (openingWidth/2 + gs_new_symb_width_r), 32,
						-openingWidth/2, WIDO_SILL-WALL_THICKNESS - not(WIDO_REVEAL_SIDE) * incl_sign * tan(WALL_INCL) * openingWidth/2, 32

			WALLBLOCK2 4, 6+16+32, gs_new_symb_pen_Fg, gs_new_symb_pen_Bg,
						0, 0, 0,
						openingWidth/2, WIDO_SILL - WIDO_REVEAL_SIDE * incl_sign * tan(WALL_INCL) * openingWidth/2, 32,
						openingWidth/2 + gs_new_symb_width_l, WIDO_SILL - WIDO_REVEAL_SIDE * incl_sign * tan(WALL_INCL) * (openingWidth/2 + gs_new_symb_width_l), 32,
						openingWidth/2 + gs_new_symb_width_l, WIDO_SILL-WALL_THICKNESS + not(WIDO_REVEAL_SIDE) * incl_sign * tan(WALL_INCL) * (openingWidth/2 + gs_new_symb_width_l), 32,
						openingWidth/2, WIDO_SILL-WALL_THICKNESS + not(WIDO_REVEAL_SIDE) * incl_sign * tan(WALL_INCL) * openingWidth/2, 32

			if WALL_SKINS_NUMBER = 0 then
				pen WALL_SECT_PEN
				line_type 1
			else
				if abs(SYMB_ROTANGLE-180) < EPS then
					pen WALL_SKINS_PARAMS[1][7]
					line_type WALL_SKINS_PARAMS[1][8]
				else
					pen WALL_SKINS_PARAMS[WALL_SKINS_NUMBER][9]
					line_type WALL_SKINS_PARAMS[WALL_SKINS_NUMBER][10]
				endif
			endif

			line_property 2


			WALLLINE2	-openingWidth/2, WIDO_SILL + WIDO_REVEAL_SIDE * incl_sign * tan(WALL_INCL) * openingWidth/2,
						-openingWidth/2 - gs_new_symb_width_r, WIDO_SILL + WIDO_REVEAL_SIDE * incl_sign * tan(WALL_INCL) * (openingWidth/2 + gs_new_symb_width_r)
			WALLLINE2	openingWidth/2, WIDO_SILL - WIDO_REVEAL_SIDE * incl_sign * tan(WALL_INCL) * openingWidth/2,
						openingWidth/2 + gs_new_symb_width_l, WIDO_SILL - WIDO_REVEAL_SIDE * incl_sign * tan(WALL_INCL) * (openingWidth/2 + gs_new_symb_width_l)

			if WALL_SKINS_NUMBER <> 0 then
				if abs(SYMB_ROTANGLE-180) < EPS then
					pen WALL_SKINS_PARAMS[WALL_SKINS_NUMBER][9]
					line_type WALL_SKINS_PARAMS[WALL_SKINS_NUMBER][10]
				else
					pen WALL_SKINS_PARAMS[1][7]
					line_type WALL_SKINS_PARAMS[1][8]
				endif
			endif

			WALLLINE2	-openingWidth/2 - gs_new_symb_width_r, WIDO_SILL-WALL_THICKNESS - not(WIDO_REVEAL_SIDE) * incl_sign * tan(WALL_INCL) * (openingWidth/2 + gs_new_symb_width_r),
						-openingWidth/2, WIDO_SILL-WALL_THICKNESS - not(WIDO_REVEAL_SIDE) * incl_sign * tan(WALL_INCL) * openingWidth/2
			WALLLINE2	openingWidth/2 + gs_new_symb_width_l, WIDO_SILL-WALL_THICKNESS + not(WIDO_REVEAL_SIDE) * incl_sign * tan(WALL_INCL) * (openingWidth/2 + gs_new_symb_width_l),
						openingWidth/2, WIDO_SILL-WALL_THICKNESS + not(WIDO_REVEAL_SIDE) * incl_sign * tan(WALL_INCL) * openingWidth/2

			if WIDO_REVEAL_SIDE then del 2

		endif

		if WIDO_REVEAL_SIDE then del 2
	else									!!!Curved wall

		if WIDO_REVEAL_SIDE exor abs(SYMB_ROTANGLE) < EPS then
			shf_sign = -1
		else
			shf_sign = 1
		endif


		if abs(SYMB_ROTANGLE-180) < EPS then
			shf_sign2 = 1
			frame_shf2 = WIDO_FRAME_THICKNESS
		else
			shf_sign2 = -1
			frame_shf2 = 0
		endif

		leftAlfa	= atn((openingWidth/2) / (WIDO_ORIG_DIST + frame_shf2))
		rightAlfa	= atn((openingWidth/2) / (WIDO_ORIG_DIST + frame_shf2))

		leftnewsymbAlfa	= atn((openingWidth/2 + gs_new_symb_width_r) / (WIDO_ORIG_DIST + frame_shf2))
		rightnewsymbAlfa= atn((openingWidth/2 + gs_new_symb_width_l) / (WIDO_ORIG_DIST + frame_shf2))



		if WIDO_REVEAL_SIDE then
			frame_shf = WIDO_SILL + 2 * WIDO_FRAME_THICKNESS - WIDO_FRAME_THICKNESS / cos(leftAlfa)
		else
			frame_shf = WIDO_SILL
		endif



		radOppSide = sqr( ((openingWidth/2)^2) + (WIDO_ORIG_DIST^2) ) + shf_sign * frame_shf

!		if not (WIDO_REVEAL_SIDE) then
!			mul2 1,-1
!		else
!			add2 0,WIDO_FRAME_THICKNESS
!		endif


		add2 0, WIDO_ORIG_DIST

		WALLBLOCK2 5, 6+16+32, gs_new_symb_pen_Fg, gs_new_symb_pen_Bg,
					0, 0, 0,
					0,0, 901,
					sin(leftAlfa) * (radOppSide - shf_sign * WALL_THICKNESS), shf_sign2 * cos(leftAlfa) * (radOppSide - shf_sign * WALL_THICKNESS), 1,
					sin(leftnewsymbAlfa) * (radOppSide - shf_sign * WALL_THICKNESS), shf_sign2 * cos(leftnewsymbAlfa) * (radOppSide - shf_sign * WALL_THICKNESS), 3001,
					sin(leftnewsymbAlfa) * radOppSide, shf_sign2 * cos(leftnewsymbAlfa) * radOppSide, 1,
					sin(leftAlfa) * radOppSide, shf_sign2 * cos(leftAlfa) * radOppSide, 3001

		WALLBLOCK2 5, 6+16+32, gs_new_symb_pen_Fg, gs_new_symb_pen_Bg,
					0, 0, 0,
					0,0, 901,
					-1 * sin(rightAlfa) * (radOppSide - shf_sign * WALL_THICKNESS), shf_sign2 * cos(rightAlfa) * (radOppSide - shf_sign * WALL_THICKNESS), 1,
					-1 * sin(rightnewsymbAlfa) * (radOppSide - shf_sign * WALL_THICKNESS), shf_sign2 * cos(rightnewsymbAlfa) * (radOppSide - shf_sign * WALL_THICKNESS), 3001,
					-1 * sin(rightnewsymbAlfa) * radOppSide, shf_sign2 * cos(rightnewsymbAlfa) * radOppSide, 1,
					-1 * sin(rightAlfa) * radOppSide, shf_sign2 * cos(rightAlfa) * radOppSide, 3001


			if WALL_SKINS_NUMBER = 0 then
				pen WALL_SECT_PEN
				line_type 1
			else
				if WIDO_REVEAL_SIDE exor abs(SYMB_ROTANGLE) < EPS then
					pen WALL_SKINS_PARAMS[1][7]
					line_type WALL_SKINS_PARAMS[1][8]
				else
					pen WALL_SKINS_PARAMS[WALL_SKINS_NUMBER][9]
					line_type WALL_SKINS_PARAMS[WALL_SKINS_NUMBER][10]
				endif
			endif

			line_property 2

			if abs(SYMB_ROTANGLE-180) < EPS then
				WALLARC2 0, 0, radOppSide - shf_sign * WALL_THICKNESS, shf_sign2 * 90+leftnewsymbAlfa, shf_sign2 * 90+leftAlfa
				WALLARC2 0, 0, radOppSide - shf_sign * WALL_THICKNESS, shf_sign2 * 90-rightAlfa, shf_sign2 * 90-rightnewsymbAlfa
			else
				WALLARC2 0, 0, radOppSide - shf_sign * WALL_THICKNESS, shf_sign2 * 90+leftAlfa, shf_sign2 * 90+leftnewsymbAlfa
				WALLARC2 0, 0, radOppSide - shf_sign * WALL_THICKNESS, shf_sign2 * 90-rightnewsymbAlfa, shf_sign2 * 90-rightAlfa
			endif



			if WALL_SKINS_NUMBER <> 0 then
				if WIDO_REVEAL_SIDE exor abs(SYMB_ROTANGLE) < EPS then
					pen WALL_SKINS_PARAMS[WALL_SKINS_NUMBER][9]
					line_type WALL_SKINS_PARAMS[WALL_SKINS_NUMBER][10]
				else
					pen WALL_SKINS_PARAMS[1][7]
					line_type WALL_SKINS_PARAMS[1][8]
				endif
			endif


			if abs(SYMB_ROTANGLE-180) < EPS then
				WALLARC2 0, 0, radOppSide, shf_sign2 * 90+leftnewsymbAlfa, shf_sign2 * 90+leftAlfa
				WALLARC2 0, 0, radOppSide, shf_sign2 * 90-rightAlfa, shf_sign2 * 90-rightnewsymbAlfa
			else
				WALLARC2 0, 0, radOppSide, shf_sign2 * 90+leftAlfa, shf_sign2 * 90+leftnewsymbAlfa
				WALLARC2 0, 0, radOppSide, shf_sign2 * 90-rightnewsymbAlfa, shf_sign2 * 90-rightAlfa
			endif

			del 1

!			del 1

	endif

endif


! =============================================================================
! NED Fire Rating Symbol
! =============================================================================

if bEnableNEDFireRating then
	_bSuccess = 0
	_bShowSymbol = 0
	_bSuccess = LIBRARYGLOBAL ("LibraryGlobals13", "bShowFireRating", _bShowSymbol)
	if _bSuccess then
		_bSuccess = LIBRARYGLOBAL ("LibraryGlobals13", "fireRatingSymbPen", _fireSymbPen)
	endif

	if _bSuccess and _bShowSymbol and iNEDFireRating > 0 and iNEDFireRating < 6 then

		pen _fireSymbPen

		_dx = 0.08
		_dy1 = 0.5
		_dy2 = 0.3
		_dy3 = 0.16

		hotspot2 0, -_dy1 - _dy3, 10501, NEDFireRatingPos, 1+128
		hotspot2 NEDFireRatingPos, -_dy1 - _dy3, 10502, NEDFireRatingPos, 2
		hotspot2 -1, -_dy1 - _dy3, 10503, NEDFireRatingPos, 3

		hotspot2 0, _dy1 + _dy3, 10504, NEDFireRatingPos, 1+128
		hotspot2 NEDFireRatingPos, _dy1 + _dy3, 10505, NEDFireRatingPos, 2
		hotspot2 -1, _dy1 + _dy3, 10506, NEDFireRatingPos, 3

		add2 NEDFireRatingPos, 0

		if iNEDFireRating = 2 or iNEDFireRating = 3 then
			line2 -_dx,	 _dy1,	 _dx,	 _dy1 + _dy3
			line2 -_dx,	-_dy1,	 _dx,	-_dy1 - _dy3
			line2  _dx,	 _dy1,	-_dx,	 _dy1 + _dy3
			line2  _dx,	-_dy1,	-_dx,	-_dy1 - _dy3
		endif

		if iNEDFireRating = 3 then
			line2 -_dx,	 _dy2,	 _dx,	 _dy2 + _dy3
			line2 -_dx,	-_dy2,	 _dx,	-_dy2 - _dy3
			line2  _dx,	 _dy2,	-_dx,	 _dy2 + _dy3
			line2  _dx,	-_dy2,	-_dx,	-_dy2 - _dy3
		endif

		line2 0, -_dy1 - _dy3, 0, _dy1 + _dy3

		del 1

	endif
endif


drawindex 20	! Draw Window Function at first


! =============================================================================
! Draw Sill and Board
! =============================================================================

drawindex 30	! Draw Window Panel in the Middle


100:
! =============================================================================
! Returned parameters
! =============================================================================

addPrmX = 0
addPrmY = SymbolMid_shiftDy

if bCompositeWall then
	idx = 1: gosub 10	! Get proper index
	penSkinContourIn	= WALL_SKINS_PARAMS[idx][SKIN_UPPER_LINE_PEN]
	ltSkinContourIn		= WALL_SKINS_PARAMS[idx][SKIN_UPPER_LINE_TYPE]

	idx = WALL_SKINS_NUMBER: gosub 10	! Get proper index
	penSkinContourOut	= WALL_SKINS_PARAMS[idx][SKIN_LOWER_LINE_PEN]
	ltSkinContourOut	= WALL_SKINS_PARAMS[idx][SKIN_LOWER_LINE_TYPE]
else
	penSkinContourIn	= WALL_SECT_PEN
	ltSkinContourIn		= WALL_LINETYPE

	penSkinContourOut	= WALL_SECT_PEN
	ltSkinContourOut	= WALL_LINETYPE
endif

thkSkinTurnInLeft = 0
thkSkinTurnInRight = 0
thkSkinTurnOutLeft = 0
thkSkinTurnOutRight = 0

end thkSkinTurnInLeft,	! Thickness of turned plaster skins at the Inside Face
	thkSkinTurnInRight,
	thkSkinTurnOutLeft,	! Thickness of turned plaster skins at the Outside Face
	thkSkinTurnOutRight,
	penSkinContourIn,	! Skin Contour Pen Opp. Side
	penSkinContourOut,	! Skin Contour Pen Ref. Side
	ltSkinContourIn,	! Skin Contour Line Type Opp. Side
	ltSkinContourOut,	! Skin Contour Line Type Ref. Side,

	addPrmX, addPrmY,
	iLoD2D,
	gs_opLinePen,
	gs_iSwingType,
	gs_swingLineType,
	bShowAddHotspots,
	bShowUnitHotspots


! ==============================================================================
!		Calculate proper skin index from parameter 'idx'
! ------------------------------------------------------------------------------
! Input variables:
!	idx:	index of current skin
! Output variables:
!	idx:	index of skin via 'Composite Structures' dialog
! ==============================================================================

10:
	if reorder then
		idx = WALL_SKINS_NUMBER + 1 - idx
	endif
return

