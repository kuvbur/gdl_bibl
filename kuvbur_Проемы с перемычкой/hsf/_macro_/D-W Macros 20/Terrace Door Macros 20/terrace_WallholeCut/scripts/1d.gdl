
EPS = 0.0001

! iRevealType:
REVEAL_EDGE				= 0
REVEAL_NO				= 1
REVEAL_POSITIVE			= 2
REVEAL_NEGATIVE			= 3
REVEAL_SLANTED			= 4
REVEAL_SPLAYED			= 5
REVEAL_HISTORIC			= 6
REVEAL_DOUBLE			= 7
REVEAL_DOUBLE_SPLAYED	= 8
REVEAL_OUTSIDE_SPLAYED	= 9

! ==============================================================================

curvedWall		= abs(WIDO_ORIG_DIST) > EPS
wallIsLeft		= (SYMB_ROTANGLE > EPS) exor WIDO_REVEAL_SIDE
bCornerWindow	= (ac_cw_function & ac_corner_window)


! ==============================================================================
! Compatibility
! ==============================================================================

if refWidth < EPS then refWidth = A
if leftWidth < EPS then leftWidth = A / 2
if rightWidth < EPS then rightWidth = A / 2

openingWidth = leftWidth + rightWidth

if gs_macro_version <= 11 then
	leftCornerFunction		= 0
	leftCornerAngle			= 0
	leftConnWallThk			= 0
	rightCornerFunction		= (ac_cw_function & ac_corner_window)
	rightCornerAngle		= ac_corner_angle
	rightConnWallThk		= ac_con_wall_thk
	bCornerWindow			= 1
endif

! ==============================================================================

overSize = 0

if gs_macro_version = 9 then
	widoRightJamb	= WIDO_RIGHT_JAMB
	widoLeftJamb	= WIDO_LEFT_JAMB
endif

if gs_macro_version >= 10 then
	if SYMB_MIRRORED exor (SYMB_ROTANGLE > EPS) then
		widoRightJamb	= WIDO_LEFT_JAMB
		widoLeftJamb	= WIDO_RIGHT_JAMB
	else
		widoRightJamb	= WIDO_RIGHT_JAMB
		widoLeftJamb	= WIDO_LEFT_JAMB
	endif
endif


! =============================================================================
! Restrictions for Window Shapes
! =============================================================================

widoHeadDepth = WIDO_HEAD_DEPTH

if iWindowShape = 1 then	! Arched Shape
	widoLeftJamb	= widoRightJamb
	widoHeadDepth	= widoRightJamb

	gs_right_oversize	= 0
	gs_left_oversize	= 0
	WIDO_LEFT_JAMB = WIDO_RIGHT_JAMB
endif


if SYMB_MIRRORED exor (SYMB_ROTANGLE > EPS) then
	leftJamb	= WIDO_RIGHT_JAMB
	rightJamb	= WIDO_LEFT_JAMB
else
	leftJamb	= WIDO_LEFT_JAMB
	rightJamb	= WIDO_RIGHT_JAMB
endif

if gs_macro_version >= 12 then
	if iWindowShape = 0 & bCornerWindow & SYMB_MIRRORED then
		temp		= leftJamb
		leftJamb	= rightJamb
		rightJamb	= temp
	endif
endif


! =============================================================================
! Calculations for Stack Window
! =============================================================================

if rightCornerFunction & abs(rightCornerAngle) > EPS then
	beta = atn ((rightConnWallThk * sin(rightCornerAngle)) / (WALL_THICKNESS + rightConnWallThk * cos(rightCornerAngle)))
	rx = 1 / tan(rightCornerAngle / 2)

	if rightCornerAngle > 180 then
		overSizeRight = max (0, WALL_THICKNESS / tan(360 - rightCornerAngle + beta) + WIDO_SILL / tan(rightCornerAngle / 2))
	else
		overSizeRight = (WIDO_FRAME_THICKNESS + WIDO_SILL) * rx + max (0, WALL_THICKNESS * tan(rightCornerAngle - beta - 90))
	endif
	rightJamb = 0
	widoRightJamb = 0
else
	if gs_stack_right then
		overSizeRight	= gs_right_oversize
		rightJamb		= 0
		widoRightJamb	= 0
	else
		overSizeRight	= gs_right_oversize + overSize
	endif
endif

if leftCornerFunction & abs(leftCornerAngle) > EPS then
	beta = atn ((leftConnWallThk * sin(leftCornerAngle)) / (WALL_THICKNESS + leftConnWallThk * cos(leftCornerAngle)))
	lx = 1 / tan(leftCornerAngle / 2)

	if leftCornerAngle > 180 then
		overSizeLeft = max (0, WALL_THICKNESS / tan(360 - leftCornerAngle + beta) + WIDO_SILL / tan(leftCornerAngle / 2))
	else
		overSizeLeft = (WIDO_FRAME_THICKNESS + WIDO_SILL) * lx + max (0, WALL_THICKNESS * tan(leftCornerAngle - beta - 90))
	endif
	leftJamb = 0
	widoLeftJamb = 0
else
	if bCornerWindow & SYMB_MIRRORED then
		if gs_stack_right then
			overSizeLeft	= gs_right_oversize
			leftJamb		= 0
			widoLeftJamb	= 0
		else
			overSizeLeft	= gs_right_oversize + overSize
		endif
	else
		if gs_stack_left then
			overSizeLeft	= gs_left_oversize
			leftJamb		= 0
			widoLeftJamb	= 0
		else
			overSizeLeft	= gs_left_oversize + overSize
		endif
	endif
endif

if gs_stack_top then
	overSizeUpper	= gs_upper_oversize
else
	overSizeUpper	= gs_upper_oversize + overSize
	upperJamb		= WIDO_HEAD_DEPTH
endif

if gs_stack_bottom then
	overSizeLower = gs_lower_oversize
else
	if iSill = 1 then							! Off
		overSizeLower = max(overSize, gs_lower_oversize)
	else
		if iSill = 2 then						! Inside
			overSizeLower = gs_lower_oversize + max(gs_sill_oversize * gs_board_thk, overSize)
		endif
		if iSill = 3 then						! Outside
			if iSillType = 1 then
				overSizeLower = gs_lower_oversize + max(gs_sill_oversize * gs_sill_thk, overSize)
			endif
		endif
		if iSill = 4 then	! Both Sides
			if gs_sill_oversize then
				if iSillType = 1 then
					overSizeLower = gs_lower_oversize + max(gs_sill_thk, gs_board_thk)
				else
					overSizeLower = gs_board_thk
				endif
			else
				overSizeLower = gs_lower_oversize
			endif
		endif
	endif

	lowerJamb = WIDO_THRES_DEPTH
endif


! ==============================================================================
! Calculations for Inclined Walls
! ==============================================================================

if abs(WALL_INCL) > EPS then
	bInclinedWall = 1
	bFactor = SYMB_MIRRORED exor WIDO_REVEAL_SIDE exor wallIsLeft
	incFactor = not(bFactor) - bFactor
	incX = incFactor * tan(WALL_INCL)
	incY = incFactor * (1 / cos(WALL_INCL))

	bDir = SYMB_MIRRORED exor (SYMB_ROTANGLE > EPS)
	iDir = not(bDir) - bDir
	incH = cos(WALL_INCL)
	incV = sin(WALL_INCL) * iDir
	offsD = iDir * offsX * tan(WALL_INCL)
else
	bInclinedWall = 0
	incX = 0
	incY = 1
	incH = 0
	incV = 0
endif


! ==============================================================================
! Calculations for Stack Window
! ==============================================================================

if gs_stack_left then
	widoLeftJamb = 0
	leftJamb	 = 0
endif

if gs_stack_right then
	widoRightJamb = 0
	rightJamb	  = 0
endif


! ==============================================================================
! Calculations for Curved Walls
! ==============================================================================

if curvedWall then

	if GLOB_SCRIPT_TYPE <> 2 then
		widoOrigDist = -WIDO_ORIG_DIST
	else
		widoOrigDist = WIDO_ORIG_DIST
	endif

	WOD = abs(widoOrigDist) - (SYMB_ROTANGLE > EPS) * WIDO_FRAME_THICKNESS

	alfaRefWidth = atn((refWidth + overSize) / WOD)

	alfaLeftOs	= atn((leftWidth  + overSizeLeft)  / WOD)
	alfaRightOs	= atn((rightWidth + overSizeRight) / WOD)

	if WIDO_REVEAL_SIDE then
		WOD = widoOrigDist + WIDO_FRAME_THICKNESS
	else
		WOD = -widoOrigDist
	endif

	if WIDO_REVEAL_SIDE exor SYMB_ROTANGLE < EPS then
		if WIDO_REVEAL_SIDE then
			rSill = sqr(refWidth^2 / 4 + WOD^2) - WIDO_SILL
			rBoard = rSill + WALL_THICKNESS
		else
			rSill = sqr(refWidth^2 / 4 + WOD^2) - WIDO_SILL
			rBoard = rSill + WALL_THICKNESS
		endif
	else
		if WIDO_REVEAL_SIDE then
			rBoard = sqr(refWidth^2 / 4 + WOD^2) + WIDO_SILL - WALL_THICKNESS
			rSill = rBoard + WALL_THICKNESS
		else
			rSill = sqr(refWidth^2 / 4 + WOD^2) + WIDO_SILL
			rBoard = rSill - WALL_THICKNESS
		endif
	endif

	alfaLeftJamb	= 180 * leftJamb  / rSill / PI
	alfaRightJamb	= 180 * rightJamb / rSill / PI

endif	! curvedWall
