
! Contact person: <NJ>

! ==============================================================================
! This macro cuts the wallhole
! ------------------------------------------------------------------------------
! Input parameters:
! Geometry ---------------------------------------------------------------------
!	A:						Window nominal width (length)
!	B:						Window nominal height (length)
!	offsX:					for positioning 2D/3D along x (length)
!	offsY:					for positioning 3D along y (length)
!	archHeight:				Height of the arc (length)
!	nArchResolution:		Arc resolution for arched windows (integer)
!								if nArchResolution < 3 then WALL_RESOL used instead
! Functions --------------------------------------------------------------------
!	iWindowShape:			Shape of the window (integer)
!								0 = rectangular (default)
!								1 = arched
!							Note: only the rectangular shape can be a Corner Window
!	AC_Hole_Hotspot_Control:
!	AC_HoleSideMaterial:
!	AC_HoleMaterialCurved:
! Reveal -----------------------------------------------------------------------
!	iRevealType:
!	gs_reveal_left_angle:
!	gs_reveal_right_angle:
!	gs_reveal_top_angle:
!	gs_reveal_bottom_angle:
! Corner Function --------------------------------------------------------------
!	leftCornerFunction:		Turn macro in Corner Window mode at the left side (0 / 1)
!	leftCornerAngle:		Angle between connected walls in case of Corner Window (angle)
!	leftConnWallThk:		Thickness of the connected wall in case of Corner Window (length)
!	rightCornerFunction:	Turn macro in Corner Window mode at the right side (0 / 1)
!	rightCornerAngle:		Angle between connected walls in case of Corner Window (angle)
!	rightConnWallThk:		Thickness of the connected wall in case of Corner Window (length)
!	bCornerWindow:			Traditional Corner Window
! Oversize ---------------------------------------------------------------------
!	gs_left_oversize:		Left opening oversize (length)
!	gs_right_oversize:		Right opening oversize (length)
!	gs_upper_oversize:		Upper opening oversize (length)
!	gs_lower_oversize:		Lower opening oversize (length)
! Casing -----------------------------------------------------------------------
!	gs_trim_width_in:		Width of inside Trim. (length)
!	gs_trim_width_out:		Width of outside Trim. (length)
! Sill -------------------------------------------------------------------------
!	iSill:					Identifies the sides to be drawn
!								(integer; 1 = none, 2 = inside (board), 3 = outside (sill), 4 = both)
!	gs_sill_oversize:		Identifies the method as the macro handles the nominal
!								opening sizes when Sill are turned on. (0 / 1)
!	iSillType:				Identifies the type of the Sill. Not used yet.
!								(integer; 1 = Standard Sill, 2 = Brick Sill, 3 = Stone Sill, 4 = Ceramic Sill)
!								(5 = Eternite Sill, 6 = Concrete Tub, 7 = Aluminum Sill)
!	iBoardType:				Identifies the type of the Board. Not used yet. (integer)
!	gs_sill_thk:			Thickness of the Sill. (length)
!	gs_sill_nosing:			Nosing of the Sill. (length)
!	gs_sill_angle:			Sill slope. (angle)
!	gs_sill_slip_in:		Slip in of the Sill. Only effective when iSillType = 2 or iSillType = 3 (length)
!	gs_sill_width:			Width of the Brick Sill. Only effective when iSillType = 2 (length)
!	gs_board_thk:			Thickness of the Board. (length)
!	gs_board_slip_in:		Slip in of the Board. Only effective when iSillType = 2 or iSillType = 3 (length)
! Ganging ----------------------------------------------------------------------
!	gs_stack_left:			Align to door/window on left side (0 / 1)
!	gs_stack_right:			Align to door/window on right side (0 / 1)
!	gs_stack_top:			Align to door/window on upper side (0 / 1)
!	gs_stack_bottom:		Align to door/window on bottom side (0 / 1)
!
! Related Global Variables:
!	WALL_THICKNESS
!	WALL_VIEW_PEN
!	WIDO_FRAME_THICKNESS
!	WIDO_SILL
!	WIDO_LEFT_JAMB
!	WIDO_RIGHT_JAMB
!	WIDO_THRES_DEPTH
!	WIDO_HEAD_DEPTH
!	WIDO_ORIG_DIST
!	WIDO_REVEAL_SIDE
!	SYMB_MIRRORED
!	SYMB_ROTANGLE
! ==============================================================================


bHaveSill = iSill = 3 | iSill = 4
bHaveParapetInset = gs_parapet_wall_inset & gs_parapet_inset_thk > EPS

if bHaveSill & (iSillType = 2 | iSillType = 3 | iSillType = 4 | iSillType = 5 | iSillType = 6 | iSillType = 7) then lowerJamb = 0


! === Window Shape related definitions ===[
if nArchResolution < 3 then nArchResolution = WALL_RESOL

if iWindowShape = 1 then
	if archHeight < EPS then
		iWindowShape = 0		! Switch back to rectangular shape
	else
		if archHeight > (openingWidth / 2 - EPS) then
			archHeight = openingWidth / 2
			arcR = archHeight
			bHalfCircle = 1
		else
			arcR = (openingWidth / 2) / sin(2 * atn(archHeight / (openingWidth / 2)))
			bHalfCircle = 0
		endif
	endif
endif
! ]=== Window Shape related definitions ===

pen WALL_VIEW_PEN
resol nArchResolution

if AC_HoleSideMaterial then
	if WIDO_REVEAL_SIDE then
		matRevealSide	= WALL_MAT_A
		matOppositeSide = WALL_MAT_B
	else
		matRevealSide	= WALL_MAT_B
		matOppositeSide = WALL_MAT_A
	endif
else
	matRevealSide	= WALL_MAT_EDGE
	matOppositeSide = WALL_MAT_EDGE
endif

add not(curvedWall) * offsX,-offsY,0


if iRevealType = REVEAL_SLANTED then
	if abs(WIDO_ORIG_DIST) > EPS then
		if wallIsLeft then
			alfa = atn((A / 2) / (WIDO_ORIG_DIST - WIDO_FRAME_THICKNESS))
		else
			alfa = atn((A / 2) / WIDO_ORIG_DIST)
		endif
		if WIDO_REVEAL_SIDE then alfa = -alfa

		if SYMB_MIRRORED = WIDO_REVEAL_SIDE then
			if gs_stack_left  then
				gs_reveal_left_angle  = -alfa
				rightDx = -WIDO_FRAME_THICKNESS * tan(alfa)
			endif
			if gs_stack_right then
				gs_reveal_right_angle = -alfa
				leftDx = WIDO_FRAME_THICKNESS * tan(alfa)
			endif
		else
			if gs_stack_left  then
				gs_reveal_right_angle  = -alfa
				rightDx = -WIDO_FRAME_THICKNESS * tan(alfa)
			endif
			if gs_stack_right then
				gs_reveal_left_angle = -alfa
				leftDx = WIDO_FRAME_THICKNESS * tan(alfa)
			endif
		endif

		if not(wallIsLeft) then
			leftDx = 0
			rightDx = 0
		endif
	endif

	if SYMB_MIRRORED = WIDO_REVEAL_SIDE | gs_macro_version >= 11 then
		temp = gs_reveal_right_angle
		gs_reveal_right_angle = gs_reveal_left_angle
		gs_reveal_left_angle = temp
	endif
endif


! ==============================================================================
! Cut Default Wallhole
! ==============================================================================

if iWindowShape = 0 | iWindowShape = 1 | bHaveParapetInset then

	if not(curvedWall) then

		! ===== Straight Wall =====

		if WIDO_REVEAL_SIDE then
			addz WIDO_SILL - WALL_THICKNESS + WIDO_FRAME_THICKNESS    ! Flip
		else
			addz -WIDO_SILL
		endif

		if WIDO_REVEAL_SIDE then
			mulz -1
			addz -WALL_THICKNESS
		endif

		if WIDO_SILL > EPS then

			! ===== Cut Reveal Side =====

			material matRevealSide

			px1 =  rightWidth - rightJamb + overSizeRight
			px2 = -leftWidth  + leftJamb  - overSizeLeft

			if iWindowShape = 0 then	! Rectangular Shape
				wallniche 4, 1, 2 + 16,
					0,0,1,	WIDO_SILL,
					px1,	lowerJamb - overSizeLower,		31,
					px1,	B - upperJamb + overSizeUpper,	31,
					px2,	B - upperJamb + overSizeUpper,	31,
					px2,	lowerJamb - overSizeLower,		31
			endif
			if iWindowShape = 1 then	! Arched Shape
				if bHalfCircle then
					wallniche 4, 1, 2 + 16,
						0,0,1,	WIDO_SILL,
						px1,	lowerJamb - overSizeLower,	  31,
						px1,	B - archHeight,				  95,
						px2,	B - archHeight,				1095,
						px2,	lowerJamb - overSizeLower,	  31
				else
					wallniche 5, 1, 2 + 16,
						0,0,1,	WIDO_SILL,
						(px1 + px2) / 2,	B - arcR, 900,
						px1,	lowerJamb - overSizeLower,	  31,
						px1,	B - archHeight,				  95,
						px2,	B - archHeight,				3095,
						px2,	lowerJamb - overSizeLower,	  31
				endif
			endif
		endif

		! ===== Cut Inside Face =====

		material matOppositeSide

		addz WALL_THICKNESS

		if iWindowShape = 0 then	! Rectangular Shape
			if iRevealType = REVEAL_SLANTED then
				gosub 1000	! Slanted Reveal cutting body
			else
				wallniche 4, 1, 2 + 8 * (WIDO_SILL < EPS) + 16,
					0,0,-1,	WALL_THICKNESS - WIDO_SILL,
					 rightWidth + overSizeRight,	-overSizeLower,		31,
					 rightWidth + overSizeRight,	 B + overSizeUpper,	31,
					-leftWidth  - overSizeLeft,		 B + overSizeUpper,	31,
					-leftWidth  - overSizeLeft,		-overSizeLower,		31
			endif
		endif
		if iWindowShape = 1 then	! Arched Shape
			px1 =  rightWidth + overSizeRight
			px2 = -leftWidth  - overSizeLeft

			if bHalfCircle then
				wallniche 4, 1, 2 + 8 * (WIDO_SILL < EPS) + 16,
					0,0,-1,	WALL_THICKNESS - WIDO_SILL,
					px1,	-overSizeLower,		31,
					px1,	 B - archHeight,	95,
					px2,	 B - archHeight,	1095,
					px2,	-overSizeLower,		31
			else
				wallniche 5, 1, 2 + 8 * (WIDO_SILL < EPS) + 16,
					0,0,-1,	WALL_THICKNESS - WIDO_SILL,
					(px1 + px2) / 2,	B - arcR, 900,
					px1,	-overSizeLower,		31,
					px1,	 B - archHeight,	95,
					px2,	 B - archHeight,	3095,
					px2,	-overSizeLower,		31
			endif
		endif

		! ===== Cut Wall Inset =====

		if bHaveParapetInset & SYMB_POS_Y > overSizeLower then
			if iRevealType = REVEAL_SLANTED then
				gosub 2000	!Wall Inset cutting body for Slanted Reveal
			else
				if abs(WALL_INCL) > EPS then
					rotx 90

					parapetInset = (gs_parapet_wall_inset * gs_parapet_inset_thk) / cos(WALL_INCL)
					py1 = offsD + incX * (-leftWidth  - overSizeLeft)  + parapetInset
					py2 = offsD + incX * ( rightWidth + overSizeRight) + parapetInset

					wallniche 4, 1, 2,
						0,0,-1,	-SYMB_POS_Y,
						 rightWidth + overSizeRight,	-py1,	31,
						 rightWidth + overSizeRight,	 10,	31,
						-leftWidth  - overSizeLeft,		 10,	31,
						-leftWidth  - overSizeLeft,		-py2,	31

					del 1
				else
					wallniche 4, 1, 2 + 16,
						0,0,-1,	gs_parapet_inset_thk,
						 rightWidth + overSizeRight,	-overSizeLower,		31,
						 rightWidth + overSizeRight,	-SYMB_POS_Y - 1,	31,
						-leftWidth  - overSizeLeft,		-SYMB_POS_Y - 1,	31,
						-leftWidth  - overSizeLeft,		-overSizeLower,		31
				endif
			endif
		endif

		del 2 + WIDO_REVEAL_SIDE * 2

	else

		! ===== Curved Wall =====

		bReveal = WIDO_REVEAL_ON | WIDO_SILL > EPS | not(gs_IsCurved)
		bUniformSideMats	= (matRevealSide = matOppositeSide)
		bOneCUt				= (bUniformSideMats & WIDO_SILL < 0.005)	! Cut the hole with only one wallniche

		if SYMB_ROTANGLE > EPS then addz WIDO_FRAME_THICKNESS
		if WIDO_REVEAL_SIDE then mulz -1

		if wallIsLeft then
			addz -WIDO_FRAME_THICKNESS

			dxL = WIDO_FRAME_THICKNESS * tan(alfaLeftOs)
			dxR = WIDO_FRAME_THICKNESS * tan(alfaRightOs)

			if (WIDO_SILL > EPS | not(gs_IsCurved)) & not(bOneCut) then

				! ===== Cut Reveal Side =====

				leftJamb	= leftWidth  + WOD * tan(alfaLeftOs - alfaLeftJamb) + gs_left_oversize
				rightJamb	= rightWidth + WOD * tan(alfaRightOs - alfaRightJamb) + gs_right_oversize

				if gs_stack_left then leftJamb = leftJamb - overSize
				if gs_stack_right then rightJamb = rightJamb - overSize

				material matRevealSide

				px1 =  leftWidth  - leftJamb  + overSizeLeft  - overSize
				px2 = -rightWidth + rightJamb - overSizeRight + overSize

				if iWindowShape = 0 then	! Rectangular Shape
					py1 = lowerJamb - overSizeLower
					py2 = B - upperJamb + overSizeUpper

					wallniche 4, 3, 2 + 16,
						0,0,WOD, 0,
						px1,	py1,	31,
						px1,	py2,	31,
						px2,	py2,	31,
						px2,	py1,	31
				endif
				if iWindowShape = 1 then	! Arched Shape
					mulRatio = (openingWidth + 2 * overSize - widoLeftJamb - widoLeftJamb) / abs(px1 - px2)
					py = (-B + archHeight + lowerJamb - overSizeLower) / mulRatio

					addy B - archHeight
					muly abs(mulRatio)

					if bHalfCircle then
						wallniche 4, 3, 2 + 16,
							0,0,WOD, 0,
							px1,	py,	  31,
							px1,	0,	  95,
							px2,	0,	1095,
							px2,	py,	  31
					else
						ta = openingWidth / 2 + overSize
						tc = arcR + overSize
						py1 = sqr(tc * tc - ta * ta) - arcR + archHeight

						wallniche 5, 3, 2 + 16,
							0,0,WOD, 0,
							(px1 + px2) / 2,	archHeight * mulRatio - arcR, 900,
							px1,	py,		  31,
							px1,	py1,	  95,
							px2,	py1,	3095,
							px2,	py,		  31
					endif

					del 2
				endif
			endif

			! ===== Cut Inside Face =====

			material matOppositeSide

			px1 =  rightWidth + dxR + overSizeRight
			px2 = -leftWidth  - dxL - overSizeLeft

			status = 2 + (8 + 16) * (not(bReveal) | bOneCUt)

			if iWindowShape = 0 then	! Rectangular Shape
				if iRevealType = REVEAL_SLANTED then
					addz WALL_THICKNESS - WIDO_SILL
					gosub 1000	! Slanted Reveal cutting body
					del 1
				else
					wallniche 4, 3, status,
						0,0,WOD, WOD,
						px1,	-overSizeLower,		31,
						px1,	 B + overSizeUpper,	31,
						px2,	 B + overSizeUpper,	31,
						px2,	-overSizeLower,		31
				endif
			endif
			if iWindowShape = 1 then	! Arched Shape

				mulRatio = (openingWidth + 2 * overSize) / abs(px1 - px2)
				py = (-B + archHeight - overSizeLower) / mulRatio

				addy B - archHeight
				muly abs(mulRatio)

				if bHalfCircle then
					wallniche 4, 3, status,
						0,0,WOD, WOD,
						px1,	py,	  31,
						px1,	0,	  95,
						px2,	0,	1095,
						px2,	py,	  31
				else
					ta = openingWidth / 2 + overSize
					tc = arcR + overSize
					py1 = sqr(tc * tc - ta * ta) - arcR + archHeight

					wallniche 5, 3, status,
						0,0,WOD, WOD,
						(px1 + px2) / 2,	archHeight * mulRatio - arcR, 900,
						px1,	py,		  31,
						px1,	py1,	  95,
						px2,	py1,	3095,
						px2,	py,		  31
				endif

				del 2
			endif

			! ===== Cut Wall Inset =====

			if bHaveParapetInset & SYMB_POS_Y > overSizeLower then
				if iRevealType = REVEAL_SLANTED then
					gosub 2000	!Wall Inset cutting body for Slanted Reveal
				else
					dy = abs(rBoard - abs(WOD)) - gs_parapet_inset_thk

					dxL = dxL - dy * tan(alfaLeftOs)
					dxR = dxR - dy * tan(alfaRightOs)

					px1 =  rightWidth + dxR + overSizeRight
					px2 = -leftWidth  - dxL - overSizeLeft

					addz dy

					wallniche 4, 3, 2,
						0,0,WOD - dy, WALL_THICKNESS,
						px1,	-overSizeLower,		31,
						px1,	-SYMB_POS_Y - 1,	31,
						px2,	-SYMB_POS_Y - 1,	31,
						px2,	-overSizeLower,		31

					del 1
				endif
			endif

			del 1
		else

			if (WIDO_SILL > EPS | not(gs_IsCurved)) & not(bOneCUt) then

				! ===== Cut Reveal Side =====

				leftJamb	= leftWidth  + WOD * tan(alfaLeftOs  - alfaLeftJamb)  + gs_left_oversize
				rightJamb	= rightWidth + WOD * tan(alfaRightOs - alfaRightJamb) + gs_right_oversize

				if gs_stack_left	then leftJamb	= -overSize
				if gs_stack_right	then rightJamb	= -overSize

				material matRevealSide

				px1 =  rightWidth - rightJamb + overSizeRight - overSize
				px2 = -leftWidth  + leftJamb  - overSizeLeft  + overSize

				if iWindowShape = 0 then	! Rectangular Shape
					py1 = lowerJamb - overSizeLower
					py2 = B - upperJamb + overSizeUpper

					wallniche 4, 3, 2,
						0,0,WOD, abs(WOD),
						px1,	py1,	31,
						px1,	py2,	31,
						px2,	py2,	31,
						px2,	py1,	31
				endif
				if iWindowShape = 1 then	! Arched Shape
					mulRatio = (openingWidth + 2 * overSize - widoLeftJamb - widoLeftJamb) / abs(px1 - px2)
					py = (-B + archHeight + lowerJamb - overSizeLower) / mulRatio

					addy B - archHeight
					muly abs(mulRatio)

					if bHalfCircle then
						wallniche 4, 3, 2,
							0,0,WOD, abs(WOD),
							px1,	py,	  31,
							px1,	0,	  95,
							px2,	0,	1095,
							px2,	py,	  31
					else
						ta = openingWidth / 2 + overSize
						tc = arcR + overSize
						py1 = sqr(tc * tc - ta * ta) - arcR + archHeight

						wallniche 5, 3, 2,
							0,0,WOD, abs(WOD),
							(px1 + px2) / 2,	archHeight * mulRatio - arcR, 900,
							px1,	py,		  31,
							px1,	py1,	  95,
							px2,	py1,	3095,
							px2,	py,		  31
					endif

					del 2
				endif
			endif

			! ===== Cut Inside Face =====

			material matOppositeSide

			px1 =  rightWidth + overSizeRight
			px2 = -leftWidth - overSizeLeft

			status = 2 + 8 * (not(bReveal) | bOneCUt) + 16

			if iWindowShape = 0 then	! Rectangular Shape
				if iRevealType = REVEAL_SLANTED then
					addz WALL_THICKNESS - WIDO_SILL
					gosub 1000	! Slanted Reveal cutting body
					del 1
				else
					wallniche 4, 3, status,
						0,0,WOD, 0,
						px1,	-overSizeLower,		31,
						px1,	 B + overSizeUpper,	31,
						px2,	 B + overSizeUpper,	31,
						px2,	-overSizeLower,		31
				endif
			endif
			if iWindowShape = 1 then	! Arched Shape

				mulRatio = (openingWidth + 2 * overSize) / abs(px1 - px2)
				py = (-B + archHeight - overSizeLower) / mulRatio

				addy B - archHeight
				muly abs(mulRatio)

				if bHalfCircle then
					wallniche 4, 3, status,
						0,0,WOD, 0,
						px1,	py,	  31,
						px1,	0,	  95,
						px2,	0,	1095,
						px2,	py,	  31
				else
					ta = openingWidth / 2 + overSize
					tc = arcR + overSize
					py1 = sqr(tc * tc - ta * ta) - arcR + archHeight

					wallniche 5, 3, status,
						0,0,WOD, 0,
						(px1 + px2) / 2,	archHeight * mulRatio - arcR, 900,
						px1,	py,		  31,
						px1,	py1,	  95,
						px2,	py1,	3095,
						px2,	py,		  31
				endif

				del 2
			endif

			! ===== Cut Wall Inset =====

			if bHaveParapetInset & SYMB_POS_Y > overSizeLower then

				if iRevealType = REVEAL_SLANTED then
					gosub 2000	!Wall Inset cutting body for Slanted Reveal
				else

					dy = rBoard * cos(alfaRefWidth) + WOD - gs_parapet_inset_thk

					wallniche 4, 3, 2 + 16,
						0,0,WOD, -dy,
						px1,	-overSizeLower,		31,
						px1,	-SYMB_POS_Y - 1,	31,
						px2,	-SYMB_POS_Y - 1,	31,
						px2,	-overSizeLower,		31
				endif
			endif
		endif

		del (SYMB_ROTANGLE > EPS) + WIDO_REVEAL_SIDE
	endif
endif


! ==============================================================================
! Cut Space for Brick Sill and Stone Sill
! ==============================================================================

if bHaveSill & (iSillType = 2 | iSillType = 3 | iSillType = 4 | iSillType = 5 | iSillType = 6 | iSillType = 7) & not(gs_stack_bottom) then

	if not(curvedWall) then

		! ===== Straight Wall =====

		if iSillType = 2 then	! Brick Sill
			cy = gs_sill_thk / cos(gs_sill_angle) + tan(gs_sill_angle) * (WIDO_SILL + gs_sill_slip_in)
			cx = sin(gs_sill_angle) * gs_sill_thk
		endif
		if iSillType = 3 | iSillType = 4 | iSillType = 5 | iSillType = 6 | iSillType = 7 then	! Stone Sill
			cy = gs_sill_thk
			cx = 0
		endif

		if iSillType = 7 then	! Aluminum Sill
			cy = 3/4*gs_sill_thk
			cx = 0
		endif

		material matRevealSide

		if WIDO_REVEAL_SIDE then
			mulz -1
			addz -WIDO_FRAME_THICKNESS
		endif

		wallniche 4, 1, 2 + 16,
			0,0,1, gs_sill_slip_in + cx,
			 rightWidth - rightJamb + overSizeRight,	 0,		31,
			 rightWidth - rightJamb + overSizeRight,	-cy,	31,
			-leftWidth  + leftJamb  - overSizeLeft,		-cy,	31,
			-leftWidth  + leftJamb  - overSizeLeft,		 0,		31

		if WIDO_REVEAL_SIDE then del 2
	else

		! ===== Curved Wall =====

		if SYMB_ROTANGLE > EPS then addz WIDO_FRAME_THICKNESS
		if WIDO_REVEAL_SIDE then mulz -1

		maxSillLength = max(WIDO_SILL, abs(rSill - abs(WOD)))

		if iSillType = 2 then	! Brick Sill
			cy = gs_sill_thk / cos(gs_sill_angle) + tan(gs_sill_angle) * (maxSillLength + gs_sill_slip_in)
			cx = sin(gs_sill_angle) * gs_sill_thk
		endif
		if iSillType = 3 | iSillType = 4 | iSillType = 5 | iSillType = 6 | iSillType = 7 then	! Stone Sill
			cy = gs_sill_thk
			cx = 0
		endif

		if wallIsLeft then
			addz -WIDO_FRAME_THICKNESS

			leftJamb	= leftWidth  + WOD * tan(alfaLeftOs  - alfaLeftJamb)  + gs_left_oversize
			rightJamb	= rightWidth + WOD * tan(alfaRightOs - alfaRightJamb) + gs_right_oversize

			if gs_stack_left then leftJamb = leftJamb - overSize
			if gs_stack_right then rightJamb = rightJamb - overSize

			material matRevealSide

			wallniche 4, 3, 2 + 16,
				0,0,WOD, gs_sill_slip_in + cx,
				 rightWidth - leftJamb  + overSizeLeft  - overSize,	 0,		31,
				 rightWidth - leftJamb  + overSizeLeft  - overSize,	-cy,	31,
				-leftWidth  + rightJamb - overSizeRight + overSize,	-cy,	31,
				-leftWidth  + rightJamb - overSizeRight + overSize,	 0,		31

			del 1
		else
			dy = gs_sill_slip_in + cx

			dxL = dy * tan(alfaLeftOs - alfaLeftJamb)
			dxR = dy * tan(alfaRightOs - alfaRightJamb)

			leftJamb	= leftWidth  + WOD * tan(alfaLeftOs  - alfaLeftJamb)  + gs_left_oversize
			rightJamb	= rightWidth + WOD * tan(alfaRightOs - alfaRightJamb) + gs_right_oversize

			if gs_stack_left then leftJamb = -overSize
			if gs_stack_right then rightJamb = -overSize

			addz dy

			material matRevealSide

			wallniche 4, 3, 2,
				0,0,WOD - dy, 16 * WIDO_SILL,
				 rightWidth + dxR - rightJamb + overSizeRight - overSize,	 0,		31,
				 rightWidth + dxR - rightJamb + overSizeRight - overSize,	-cy,	31,
				-leftWidth  - dxL + leftJamb  - overSizeLeft  + overSize,	-cy,	31,
				-leftWidth  - dxL + leftJamb  - overSizeLeft  + overSize,	 0,		31

			del 1
		endif

		del (SYMB_ROTANGLE > EPS) + WIDO_REVEAL_SIDE
	endif
endif

end	! ===== end ===== end ===== end ===== end ===== end ===== end ===== end ===== end ===== end =====



1000:
! ==============================================================================
! Slanted Reveal cutting body
! ==============================================================================

	slantedDepth = (WALL_THICKNESS - WIDO_SILL)

	if iWindowShape = 0 then	! Rectangular Shape

		dxl = (slantedDepth) * tan(gs_reveal_left_angle)	! --- Left
		dxr = (slantedDepth) * tan(gs_reveal_right_angle)	! --- Right
		dxt = (slantedDepth) * tan(gs_reveal_top_angle)		! --- Top
		dxb = (slantedDepth) * tan(gs_reveal_bottom_angle)	! --- Bottom

		! --- Horizontal
		if gs_reveal_left_angle > EPS | gs_reveal_right_angle > EPS then
			m = (openingWidth + dxl + dxr) / (tan(gs_reveal_left_angle) + tan(gs_reveal_right_angle))
			midAlpha = (gs_reveal_left_angle - gs_reveal_right_angle) / 2

			rxh = (m - WALL_THICKNESS + WIDO_SILL) * tan(gs_reveal_left_angle) - openingWidth/2
			ryh = 0
			rzh = -m
			dh = -sqr(rxh^2 + rzh^2) * slantedDepth / rzh

			method = 2
		else
			rxh = 0
			ryh = 0
			rzh = -slantedDepth
			dh	=  slantedDepth

			method = 1
		endif

		addy B/2
		wallniche 4, method, 2 + 16,
			-rxh,ryh,rzh, dh,
			 rightWidth + dxl,	-B/2,	31,
			-leftWidth  - dxr,	-B/2,	31,
			-leftWidth  - dxr,	 B/2,	31,
			 rightWidth + dxl,	 B/2,	31
		del 1

		! --- Vertical
		if gs_reveal_top_angle > EPS | gs_reveal_bottom_angle > EPS then
			m = (B + dxt + dxb) / (tan(gs_reveal_top_angle) + tan(gs_reveal_bottom_angle))
			midAlpha = (gs_reveal_top_angle - gs_reveal_bottom_angle) / 2

			rxv = (m - WALL_THICKNESS + WIDO_SILL) * tan(gs_reveal_top_angle) - B/2
			ryv = 0
			rzv = -m
			dv = -sqr(rxv^2 + rzv^2) * slantedDepth / rzv

			method = 2
		else
			rxv = 0
			ryv = 0
			rzv = -slantedDepth
			dv	=  slantedDepth

			method = 1
		endif

		addy B/2
		rotz 90

		wallniche 4, method, 2 + 16,
			-rxv,ryv,rzv, dv,
			 B/2+dxt,	-leftWidth,		31,
			-B/2-dxb,	-leftWidth,		31,
			-B/2-dxb,	 rightWidth,	31,
			 B/2+dxt,	 rightWidth,	31
		del 2


		! --- Top - Left Corner
		if abs(gs_reveal_top_angle) > EPS then
			ratioTL = tan(gs_reveal_left_angle) / tan(gs_reveal_top_angle)
			if openingWidth > B * ratioTL then
				rytl = 2 * B / 3
				rxtl = rytl * ratioTL
			else
				rxtl = 2 * openingWidth / 3
				rytl = rxtl / ratioTL
			endif

			if abs(gs_reveal_left_angle) > EPS then
				rztl = rxtl / tan(gs_reveal_left_angle)
			else
				rztl = rytl / tan(gs_reveal_top_angle)
			endif
		else
			if abs(gs_reveal_left_angle) > EPS then
				rxtl = 3 * openingWidth / 4
				rytl = 0
				rztl = rxtl / tan(gs_reveal_left_angle)
			else
				rxtl = 0
				rytl = 0
				rztl = 1
			endif
		endif

		vx = (slantedDepth) * tan(gs_reveal_left_angle)
		vy = (slantedDepth) * tan(gs_reveal_top_angle)
		vz = (slantedDepth)
		dtl = sqr(vx*vx + vy*vy + vz*vz)

		ratioV = max(1, dtl / sqr(rxtl^2 + rytl^2 + rztl^2) * 2)
		rxtl = rxtl * ratioV
		rytl = rytl * ratioV
		rztl = rztl * ratioV

		add rightWidth + gs_right_oversize + overSize + dxl, B + gs_upper_oversize + overSize + dxt, 0
			wallniche 4, 2, 2 + 16,
				-rxtl,-rytl,-rztl, dtl,
				 leftDx,					 0,				31,
				-3 * openingWidth/4 - dxl,	 0,				31,
				-3 * openingWidth/4 - dxl,	-4*B/4 - dxt,	31,
				 leftDx,					-4*B/4 - dxt,	31
		del 1

		! --- Top - Right Corner
		if abs(gs_reveal_top_angle) > EPS then
			ratioTR = tan(gs_reveal_right_angle) / tan(gs_reveal_top_angle)
			if openingWidth > B * ratioTR then
				rytr = 2 * B / 3
				rxtr = rytr * ratioTR
			else
				rxtr = 2 * openingWidth / 3
				rytr = rxtr / ratioTR
			endif

			if abs(gs_reveal_right_angle) > EPS then
				rztr = rxtr / tan(gs_reveal_right_angle)
			else
				rztr = rytr / tan(gs_reveal_top_angle)
			endif
		else
			if abs(gs_reveal_right_angle) > EPS then
				rxtr = 3 * openingWidth / 4
				rytr = 0
				rztr = rxtr / tan(gs_reveal_right_angle)
			else
				rxtr = 0
				rytr = 0
				rztr = 1
			endif
		endif

		vx = (slantedDepth) * tan(gs_reveal_right_angle)
		vy = (slantedDepth) * tan(gs_reveal_top_angle)
		vz = (slantedDepth)
		dtr = sqr(vx*vx + vy*vy + vz*vz)

		ratioV = max(1, dtr / sqr(rxtr^2 + rytr^2 + rztr^2) * 2)
		rxtr = rxtr * ratioV
		rytr = rytr * ratioV
		rztr = rztr * ratioV

		add -leftWidth - gs_left_oversize - overSize - dxr, B + gs_upper_oversize + overSize + dxt, 0
			if bCornerWindow then
				wallniche 4, 2, 2 + 16,
					rxtr,-rytr,-rztr, dtr,
					 rightDx,			 0,				31,
					 openingWidth + 10,	 0,				31,
					 openingWidth + 10,	-3*B/4 - dxt,	31,
					 rightDx,			-3*B/4 - dxt,	31
			else
				wallniche 4, 2, 2 + 16,
					rxtr,-rytr,-rztr, dtr,
					 rightDx,					 0,				31,
					 3 * openingWidth/4 + dxr,	 0,				31,
					 3 * openingWidth/4 + dxr,	-3*B/4 - dxt,	31,
					 rightDx,					-3*B/4 - dxt,	31
			endif
		del 1

		if abs(gs_reveal_bottom_angle) < EPS then	! Space for Board
			dxb = dxb + overSizeLower
		endif

		! --- Bottom - Left Corner
		if abs(gs_reveal_bottom_angle) > EPS then
			ratioBL = tan(gs_reveal_left_angle) / tan(gs_reveal_bottom_angle)
			if openingWidth > B * ratioBL then
				rybl = 2 * B / 3
				rxbl = rybl * ratioBL
			else
				rxbl = 2 * openingWidth / 3
				rybl = rxbl / ratioBL
			endif

			if abs(gs_reveal_left_angle) > EPS then
				rzbl = rxbl / tan(gs_reveal_left_angle)
			else
				rzbl = rybl / tan(gs_reveal_bottom_angle)
			endif
		else
			if abs(gs_reveal_left_angle) > EPS then
				rxbl = 3 * openingWidth / 4
				rybl = 0
				rzbl = rxbl / tan(gs_reveal_left_angle)
			else
				rxbl = 0
				rybl = 0
				rzbl = 1
			endif
		endif

		vx = (slantedDepth) * tan(gs_reveal_left_angle)
		vy = (slantedDepth) * tan(gs_reveal_bottom_angle)
		vz = (slantedDepth)
		dbl = sqr(vx*vx + vy*vy + vz*vz)

		ratioV = max(1, dbl / sqr(rxbl^2 + rybl^2 + rzbl^2) * 2)
		rxbl = rxbl * ratioV
		rybl = rybl * ratioV
		rzbl = rzbl * ratioV

		add rightWidth + gs_right_oversize + overSize + dxl, -dxb - gs_lower_oversize - overSize, 0
			wallniche 4, 2, 2 + 16,
				-rxbl, rybl,-rzbl, dbl,
				 leftDx,					 0,				31,
				-3 * openingWidth/4 - dxl,	 0,				31,
				-3 * openingWidth/4 - dxl,	 3*B/4 + dxt,	31,
				 leftDx,					 3*B/4 + dxt,	31
		del 1

		! --- Bottom - Right Corner
		if abs(gs_reveal_bottom_angle) > EPS then
			ratioBR = tan(gs_reveal_right_angle) / tan(gs_reveal_bottom_angle)
			if openingWidth > B * ratioBR then
				rybr = 2 * B / 3
				rxbr = rybr * ratioBR
			else
				rxbr = 2 * openingWidth / 3
				rybr = rxbr / ratioBR
			endif

			if abs(gs_reveal_right_angle) > EPS then
				rzbr = rxbr / tan(gs_reveal_right_angle)
			else
				rzbr = rybr / tan(gs_reveal_bottom_angle)
			endif
		else
			if abs(gs_reveal_right_angle) > EPS then
				rxbr = 3 * openingWidth / 4
				rybr = 0
				rzbr = rxbr / tan(gs_reveal_right_angle)
			else
				rxbr = 0
				rybr = 0
				rzbr = 1
			endif
		endif

		vx = (slantedDepth) * tan(gs_reveal_right_angle)
		vy = (slantedDepth) * tan(gs_reveal_bottom_angle)
		vz = (slantedDepth)
		dbr = sqr(vx*vx + vy*vy + vz*vz)

		ratioV = max(1, dbr / sqr(rxbr^2 + rybr^2 + rzbr^2) * 2)
		rxbr = rxbr * ratioV
		rybr = rybr * ratioV
		rzbr = rzbr * ratioV

		add -leftWidth - gs_left_oversize - overSize - dxr, -dxb - gs_lower_oversize - overSize, 0
			if bCornerWindow then
				wallniche 4, 2, 2 + 16,
					 rxbr, rybr,-rzbr, dbr,
					 rightDx,			 0,				31,
					 openingWidth + 10,	 0,				31,
					 openingWidth + 10,	 3*B/4 + dxt,	31,
					 rightDx,			 3*B/4 + dxt,	31
			else
				wallniche 4, 2, 2 + 16,
					 rxbr, rybr,-rzbr, dbr,
					 rightDx,					 0,				31,
					 3 * openingWidth/4 + dxr,	 0,				31,
					 3 * openingWidth/4 + dxr,	 3*B/4 + dxt,	31,
					 rightDx,					 3*B/4 + dxt,	31
			endif
		del 1
	endif

return


2000:
! ==============================================================================
! Wall Inset cutting body for Slanted Reveal
! ==============================================================================

	addz (abs(WIDO_ORIG_DIST) > EPS) * (WALL_THICKNESS - WIDO_SILL)

	dxl = (WALL_THICKNESS - WIDO_SILL) * tan(gs_reveal_left_angle)		! --- Left
	dxr = (WALL_THICKNESS - WIDO_SILL) * tan(gs_reveal_right_angle)		! --- Right

	! --- Left
	if abs(gs_reveal_left_angle) > EPS then
		rxtl = 3 * openingWidth / 4
		rytl = 0
		rztl = rxtl / tan(gs_reveal_left_angle)
	else
		rxtl = 0
		rytl = 0
		rztl = 1
	endif

	vx = gs_parapet_inset_thk * tan(gs_reveal_left_angle)
	vy = 0
	vz = gs_parapet_inset_thk
	dtl = sqr(vx*vx + vy*vy + vz*vz)

	addx rightWidth + dxl
		wallniche 4, 2, 2 + 16,
			-rxtl,-rytl,-rztl, dtl,
			 leftDx,					 0,				31,
			-3 * openingWidth/4 - dxl,   0,				31,
			-3 * openingWidth/4 - dxl,	-SYMB_POS_Y-10,	31,
			 leftDx,					-SYMB_POS_Y-10,	31
	del 1


	! --- Right
	if abs(gs_reveal_right_angle) > EPS then
		rxtr = 3 * openingWidth / 4
		rytr = 0
		rztr = rxtr / tan(gs_reveal_right_angle)
	else
		rxtr = 0
		rytr = 0
		rztr = 1
	endif


	vx = gs_parapet_inset_thk * tan(gs_reveal_right_angle)
	vy = 0
	vz = gs_parapet_inset_thk
	dtr = sqr(vx*vx + vy*vy + vz*vz)

	addx -leftWidth - dxr
		if bCornerWindow then
			wallniche 4, 2, 2 + 16,
				rxtr,-rytr,-rztr, dtr,
				 rightDx,			 0,				31,
				 openingWidth + 10,	 0,				31,
				 openingWidth + 10,	-SYMB_POS_Y-10,	31,
				 rightDx,			-SYMB_POS_Y-10,	31
		else
			wallniche 4, 2, 2 + 16 + 128,
				rxtr,-rytr,-rztr, dtr,
				 rightDx,					 0,				31,
				 3 * openingWidth/4 + dxr,	 0,				31,
				 3 * openingWidth/4 + dxr,	-SYMB_POS_Y-10,	31,
				 rightDx,					-SYMB_POS_Y-10,	31
		endif
	del 1

	del 1
return

