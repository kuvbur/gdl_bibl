
! const values for parameter: iTypeDemolitionFill
RENOVATION_FILL_EXIST		= 1
RENOVATION_FILL_DEMOLISHED	= 2
RENOVATION_FILL_NEW			= 3
RENOVATION_FILL_NEW_FULL	= 4


! const values for parameter: iBoardInPolyWall
BOARD_PARALLEL_WINDOW      = 1
BOARD_PARALLEL_WALLPOLYGON = 2


! const values for parameter: iCustomCCEditWallSide
EDITED_WALL_FACE_OUTSIDE = 1
EDITED_WALL_FACE_INSIDE  = 2


! const values for parameter: iCustomCCEditJambSide
EDITED_JAMB_SIDE_BOTH  = 1
EDITED_JAMB_SIDE_LEFT  = 2
EDITED_JAMB_SIDE_RIGHT = 3


! const values for parameter: iCustomCCThicknessType
THICKNESS_TYPE_ORIGINAL = 1
THICKNESS_TYPE_CUSTOM   = 2


! const values for parameter: iCustomCCEditSkin
EDITED_SKIN_1 = 1
EDITED_SKIN_2 = 2
EDITED_SKIN_3 = 3
EDITED_SKIN_4 = 4


! const values for parameter: iCustomCCOrientation
ORIENTATION_ORIGINAL  = 1
ORIENTATION_TURNED_IN = 2


! const values for parameter: iDWDet3D
DETLEVEL_DW3D_SCALESENS    = 1
DETLEVEL_DW3D_DETAILED     = 2
DETLEVEL_DW3D_SIMPLE       = 3
DETLEVEL_DW3D_OFF          = 4
DETLEVEL_DW3D_CHI_SIMPLE   = 5
DETLEVEL_DW3D_CHI_DETAILED = 6


! const values for parameter: iDWDet2D
DETLEVEL_DW2D_MVO     = 1
DETLEVEL_DW2D_SCSENS  = 2
DETLEVEL_DW2D_50      = 3
DETLEVEL_DW2D_100     = 4
DETLEVEL_DW2D_200     = 5
DETLEVEL_DW2D_OFF     = 6
DETLEVEL_DW2D_CHISMPL = 7
DETLEVEL_DW2D_CHIDET  = 8
DETLEVEL_DW2D_20      = 9


! const values for parameter: iSillType
SILL_TIMBER       = 1
SILL_BRICK        = 2
SILL_STONE        = 3
SILL_CERAMIC      = 4
SILL_ETHERNIT     = 5
SILL_CONCRETE_TUB = 6
SILL_ALUMINIUM    = 7
SILL_SOLID_11     = 8
SILL_SOLID_12     = 9
SILL_SOLID_22     = 10
SILL_METAL_1      = 11
SILL_PARALLEL     = 12
SILL_METAL_2      = 13
SILL_PARALLEL_2   = 14
SILL_SIMPLEBLOCK  = 15
SILL_BLOCK        = 16
SILL_DUTCH        = 17

! Contact person: <NJ>

EPS = 0.0001

! iRevealType:
REVEAL_EDGE				= 0
REVEAL_NO				= 1
REVEAL_POSITIVE			= 2
REVEAL_NEGATIVE			= 3
REVEAL_SLANTED			= 4
REVEAL_SPLAYED			= 5
REVEAL_HISTORIC			= 6
REVEAL_DOUBLE			= 7
REVEAL_DOUBLE_SPLAYED	= 8
REVEAL_OUTSIDE_SPLAYED	= 9

! iRevealOnSymbol
SHOWREV_MVO		= 1
SHOWREV_ALWAYS	= 2
SHOWREV_UPTO50	= 3
SHOWREV_UPTO100	= 4
SHOWREV_UPTO200	= 5
SHOWREV_NEVER	= 6

! iClosureType:
CLOSURE_NO					= 0
CLOSURE_TRADITIONAL			= 1
CLOSURE_PREFABRICATED		= 2
CLOSURE_CUSTOM				= 3
CLOSURE_SOLID_WALL			= 4
CLOSURE_STUD_WALL			= 5
CLOSURE_STUD_WALL_SIDING	= 6
CLOSURE_BRICK_VENEER		= 7
CLOSURE_VARIABLE			= 8
CLOSURE_PLASTER_REVEAL	 			= 9
CLOSURE_INSULATED_REVEAL			= 10
CLOSURE_INSULATED_FOR_RENOVATION	= 11
CLOSURE_FINISH						= 12
CLOSURE_AIR_SPACE					= 13
CLOSURE_DUTCH_VARIABLE				= 14

! Threshold definitions:
TRESHOLD_OFF			= 1
TRESHOLD_NORMAL			= 2
TRESHOLD_EXTENDED		= 3
TRESHOLD_BOTHEXTENDED	= 4
TRESHOLD_BENEATHPANEL	= 5
TRESHOLD_PROFILED		= 6
TRESHOLD_FLAT			= 7		! NOR Flat Terskel
TRESHOLD_ANSLAG			= 8		! NOR Anslagterskel
TRESHOLD_GUMMI			= 9		! NOR Gummiterskel m Slepelist
TRESHOLD_HEVE			= 10	! NOR Heveterskel
TRESHOLD_HC				= 11	! NOR H-C Terskel
TRESHOLD_BRANN			= 12	! NOR Brannterskel
TRESHOLD_BADEROMS		= 13	! NOR Baderomsterskel
TRESHOLD_AKKUSTIKK		= 14	! NOR Akkustikkterskel
TRESHOLD_SIMPLE			= 15	! NED Simple threshold
TRESHOLD_SLOPINGEXT		= 16	! Sloping Extended
TRESHOLD_METAL			= 17	! Metal
TRESHOLD_EXTENDED_SWE	= 18	! SWE Extended to Opening Side

! Partial Stucture Display defines:
STRUCTURE_ENTIRE_STRUCTURE	= 0
STRUCTURE_CORE_ONLY			= 1
STRUCTURE_WITHOUT_FINISHES	= 2

!lod2d
DET2D_FS_OFF				= 0
DET2D_FS_SCALESENS			= -1
DET2D_FS_SIMPLE				= 11
DET2D_FS_MIDDLE				= 21
DET2D_FS_DETAILED			= 30
DET2D_FS_SIMPLE_CHI			= 51
DET2D_FS_DETAILED_CHI		= 52

! iLoD2D
SYMBD_OFF							= 0
SYMBD_SCALESENS						= 1
SYMBD_S_1LINE						= 11
SYMBD_S_2LINE						= 12
SYMBD_S_1LINE_FRAME					= 13
SYMBD_S_1LINECL						= 14
SYMBD_S_5							= 15
SYMBD_S_6							= 16
SYMBD_S_7							= 17
SYMBD_S_8							= 18
SYMBD_S_9							= 19
SYMBD_M_1LINELEAF_2LINE				= 21
SYMBD_M_2LINELEAFCL_GLASS			= 22
SYMBD_M_1LINELEAF_1LINE				= 23
SYMBD_M_4							= 24
SYMBD_M_5							= 25
SYMBD_M_6							= 26
SYMBD_M_7							= 27
SYMBD_M_8							= 28
SYMBD_M_9							= 29
SYMBD_D_2LINELEAFOP_GLASS			= 31
SYMBD_D_2LINELEAFCL_REBATEONGLASS	= 32
SYMBD_D_2LINELEAFOP_2LINE			= 33
SYMBD_D_2LINELEAFOP_SASH			= 34
SYMBD_D_1LINELEAF_GLASS				= 35
SYMBD_D_2LINELEAFCL_SASHWLINE		= 36
SYMBD_D_1LINELEAF_SASHWLINE			= 37
SYMBD_D_2LEAFOPGLASS_GLASS			= 38
SYMBD_D_9							= 39

! iWindowShape:
SHAPE_RECTANGULAR			= 0
SHAPE_ARCHED				= 1
SHAPE_ROUND					= 2
SHAPE_EYEBROWS				= 3
SHAPE_HALFCIRCLE			= 4 	! straight side is horizontal
SHAPE_MULTISIDE				= 5
SHAPE_OCTAGONAL				= 6
SHAPE_HALFARCH				= 7
SHAPE_PENTAGON				= 8
SHAPE_QUARTERROUND			= 9
SHAPE_HALFROUND				= 10 	! straight side is vertical
SHAPE_TRAPEZOID				= 11
SHAPE_TRIANGLE				= 12
SHAPE_GOTHICARCH			= 13
SHAPE_ELLIPSEARCH			= 14
SHAPE_ROMBUS				= 15
SHAPE_HORSESHOE				= 16
SHAPE_OGEECENTERED			= 17
SHAPE_SARACENIC				= 18
SHAPE_T						= 19
SHAPE_HALF_T_LEFT			= 20
SHAPE_ARCHED_T				= 21
SHAPE_ARCHED_HALF_T_LEFT	= 22
SHAPE_PARALLELOGRAM			= 23
SHAPE_ELLIPSE				= 24
SHAPE_CORNER_TRIANGLE		= 25
SHAPE_QUARTERROUND_NOFRAME	= 26
SHAPE_HALF_T_RIGHT			= 27
SHAPE_ARCHED_HALF_T_RIGHT	= 28

! gs_leaf_optype_m:
LEAF_1L_SIDE_HUNG			= 1
LEAF_1L_SIDE_HUNG_M			= 2
LEAF_1L_DOUBLE_ACTING		= 3
LEAF_1L_DOUBLE_ACTING_M		= 4
LEAF_2L_SIDE_HUNG			= 5
LEAF_2L_DOUBLE_ACTING		= 6
LEAF_2L_DOUBLE_EGRESS		= 7
LEAF_2L_DOUBLE_EGRESS_M		= 8
LEAF_1L_PIVOT				= 9
LEAF_1L_PIVOT_M				= 10
LEAF_2L_1SLIDING			= 11
LEAF_2L_1SLIDING_M			= 12
LEAF_2L_2SLIDING			= 13
LEAF_2L_2SLIDING_M			= 14
LEAF_3L_2SLIDING			= 15
LEAF_3L_2SLIDING_M			= 16
LEAF_4L_2SLIDING			= 17
LEAF_4L_3SLIDING			= 18
LEAF_4L_3SLIDING_M			= 19
LEAF_4L_4SLIDING			= 20
LEAF_4L_4SLIDING_M			= 21
LEAF_1L_EXTERNAL_SLIDING	= 22
LEAF_1L_EXTERNAL_SLIDING_M	= 23
LEAF_2L_EXTERNAL_SLIDING	= 24
LEAF_1L_POCKET				= 25
LEAF_1L_POCKET_M			= 26
LEAF_2L_POCKET				= 27
LEAF_1L_MULTIPANEL			= 28
LEAF_1L_MULTIPANEL_M		= 29
LEAF_2L_MULTIPANEL			= 30
LEAF_REVOLVING				= 31
LEAF_3L_2SLIDING_CENTER		= 32
LEAF_GAR_1L_UP_AND_OVER		= 100
LEAF_GAR_1L_UP_SLIDING		= 101
LEAF_GAR_1L_SECTIONAL		= 102
LEAF_GAR_2L_SIDE_HUNG		= 103
LEAF_GAR_2L_ROLLSIDE		= 104
LEAF_GAR_1L_ROLLUP			= 105

! iLineShapeCategory:
LINE_SHAPE_CATEGORY_SWING	= 1
LINE_SHAPE_CATEGORY_SLIDING	= 2

! lodSE - S/E Detail level
LODSE_20	= 1
LODSE_50	= 2
LODSE_100	= 3
LODSE_200	= 4
LODSE_500	= 5

! Opening Direction:
OPENING_DIR_DEFAULT_OUTSIDE	= 1
OPENING_DIR_FLIPPED_INSIDE	= 2
OPENING_DIR_MIDDLESTACKING	= 3

bTShapedOpening =  (iWindowShape = SHAPE_T |\
					iWindowShape = SHAPE_HALF_T_LEFT |\
					iWindowShape = SHAPE_HALF_T_RIGHT |\
					iWindowShape = SHAPE_ARCHED_T |\
					iWindowShape = SHAPE_ARCHED_HALF_T_LEFT |\
					iWindowShape = SHAPE_ARCHED_HALF_T_RIGHT)

bArchedTShapedOpening =		(iWindowShape = SHAPE_ARCHED_T |\
							 iWindowShape = SHAPE_ARCHED_HALF_T_LEFT |\
							 iWindowShape = SHAPE_ARCHED_HALF_T_RIGHT)

gs_pocket_leafs	= 0
if	gs_leaf_optype_m = LEAF_1L_POCKET |\
	gs_leaf_optype_m = LEAF_1L_POCKET_M then gs_pocket_leafs = 1
if	gs_leaf_optype_m = LEAF_2L_POCKET then	 gs_pocket_leafs = 2

gs_slidingext	= 0
gs_pocket		= 0

if	gs_leaf_optype_m = LEAF_1L_EXTERNAL_SLIDING | \
	gs_leaf_optype_m = LEAF_1L_EXTERNAL_SLIDING_M | \
	gs_leaf_optype_m = LEAF_2L_EXTERNAL_SLIDING then
		gs_slidingext	= 1
endif
if	gs_leaf_optype_m = LEAF_1L_POCKET | \
	gs_leaf_optype_m = LEAF_1L_POCKET_M | \
	gs_leaf_optype_m = LEAF_2L_POCKET then
		gs_pocket		= 1
endif

if not(gs_pocket) then
	gs_pocket_door_frame	= 0
endif

! Turn Skin on Side
CAVITY_SIDE_BOTH	= 1
CAVITY_SIDE_LEFT	= 2
CAVITY_SIDE_RIGHT	= 3
CAVITY_SIDE_NONE	= 4

! Wall Contour Line - iWallContourLine
WALL_CONTOUR_OFF		= 1
WALL_CONTOUR_INSIDE		= 2
WALL_CONTOUR_OUTSIDE	= 3
WALL_CONTOUR_BOTHSIDES	= 4

! gs_frame_style_m
FRAME_STYLE_BLOCK				= 1
FRAME_STYLE_DOUBLE_REBATE		= 2
FRAME_STYLE_SIMPLE_REBATE		= 3
FRAME_STYLE_METAL				= 4
FRAME_STYLE_DOUBLE_EGRESS_METAL = 5
FRAME_STYLE_EXTRUSION			= 6
FRAME_STYLE_WRAPPED_EXTRUSION	= 7 

! iVentilationProfileType
VENTPROFILE_OVER_FRAME		= 2
VENTPROFILE_OVER_GLAZING	= 3

! ==============================================================================
! Localization
! ==============================================================================

dim stDetail2D[9]
	stDetail2D[1] = `по ПМВ`
	stDetail2D[2] = `Зависит от Масштаба`
	stDetail2D[3] = `1:50`
	stDetail2D[4] = `1:100`
	stDetail2D[5] = `1:200`
	stDetail2D[6] = `Откл.`
	stDetail2D[7] = `Китайский Простой`
	stDetail2D[8] = `Китайский Детальный`
	stDetail2D[9] = `1:20`

dim stRevealTypes[10]	! gs_reveal_type
	stRevealTypes[ 1] = `Без Четверти - Торец`
	stRevealTypes[ 2] = `Без Четверти`
	stRevealTypes[ 3] = `Четверть`
	stRevealTypes[ 4] = `Отрицательная Четверть`
	stRevealTypes[ 5] = `Четверть с Рассветами`
	stRevealTypes[ 6] = `Четверть с Откосом`
	stRevealTypes[ 7] = `Историческая Четверть`
	stRevealTypes[ 8] = `Специальная Четверть`
	stRevealTypes[ 9] = `Четверть с Двумя Откосами`
	stRevealTypes[10] = `Четверть с Откосом Снаружи`

dim stRevealTypesBottom[4]		! gs_reveal_type_bottom
	stRevealTypesBottom[1] = `Одинаковый`
	stRevealTypesBottom[2] = `Без Четверти`
	stRevealTypesBottom[3] = `Четверть`
	stRevealTypesBottom[4] = `Отрицательная Четверть`

dim stRevealAngleEditBy[2]	! gs_reveal_angle_edit_by
	stRevealAngleEditBy[1] = `Угол и Глубина`
	stRevealAngleEditBy[2] = `Ширина и Глубина`

dim stClosureTypes[15]	! gs_closure_type
	stClosureTypes[ 1] = `Без Замыкания`
	stClosureTypes[ 2] = `Традиционное Замыкание Слоев`
	stClosureTypes[ 3] = `Готовое Замыкание Слоев`
	stClosureTypes[ 4] = `Специальное Замыкание`
	stClosureTypes[ 5] = `Сплошная Стена`
	stClosureTypes[ 6] = `Деревянная Каркасная Стена`
	stClosureTypes[ 7] = `Деревянная Каркасная Стена с Наружной Обшивкой`
	stClosureTypes[ 8] = `Кирпичная Облицовка`
	stClosureTypes[ 9] = `Настраиваемое Замыкание`
	stClosureTypes[10] = `Штукатурная Четверть`
	stClosureTypes[11] = `Утепленная Четверть`
	stClosureTypes[12] = `Утепление при Реконструкции`
	stClosureTypes[13] = `Замыкание Отделкой`
	stClosureTypes[14] = `Замыкание с Воздушной Прослойкой`
	stClosureTypes[15] = `Датское Замыкание`

dim stRevealOnSymbValues[6]
	stRevealOnSymbValues[1] = `по ПМВ`
	stRevealOnSymbValues[2] = `Всегда`
	stRevealOnSymbValues[3] = `До 1:50`
	stRevealOnSymbValues[4] = `До 1:100`
	stRevealOnSymbValues[5] = `До 1:200`
	stRevealOnSymbValues[6] = `Никогда`

dim stWallContourLine[4]	! gs_wcont_line_sl
	stWallContourLine[1] = `Откл.`
	stWallContourLine[2] = `Внутри`
	stWallContourLine[3] = `Снаружи`
	stWallContourLine[4] = `Обе Стороны`

dim stCavityClosureSide[4]		! gs_cavity_side
	stCavityClosureSide[1] = `Обе`
	stCavityClosureSide[2] = `Слева`
	stCavityClosureSide[3] = `Справа`
	stCavityClosureSide[4] = `Нет`

dim stCavityClosureTurnDir[2]	! gs_nTurnDir
	stCavityClosureTurnDir[1] = `Снаружи`
	stCavityClosureTurnDir[2] = `Внутри`

dim stDutchClosureToSide[2]
	stDutchClosureToSide[1] = `Снаружи`
	stDutchClosureToSide[2] = `Внутри`

dim stCavityClosureEditedJambSide[3]
	stCavityClosureEditedJambSide[1] = `Редактирование Обоих Откосов`
	stCavityClosureEditedJambSide[2] = `Редактирование Левого Откоса`
	stCavityClosureEditedJambSide[3] = `Редактирование Правого Откоса`

dim stCavityClosureEditedWallSide[2]
	stCavityClosureEditedWallSide[1] = `Снаружи`
	stCavityClosureEditedWallSide[2] = `Внутри`

dim stCavityClosureEditedSkinNumber[4]
	stCavityClosureEditedSkinNumber[1] = `1. Слой`
	stCavityClosureEditedSkinNumber[2] = `2. Слой`
	stCavityClosureEditedSkinNumber[3] = `3. Слой`
	stCavityClosureEditedSkinNumber[4] = `4. Слой`

dim stCavityClosureTurnInThickness[2]
	stCavityClosureTurnInThickness[1] = `Исходная`
	stCavityClosureTurnInThickness[2] = `Специальный`

dim stCavityClosureHatchOrientation[2]
	stCavityClosureHatchOrientation[1] = `Исходная`
	stCavityClosureHatchOrientation[2] = `Поворот Внутрь`

dim stMasonryArchTypes[7]	! gs_masonry_arch_int
	stMasonryArchTypes[1] = `Откл.`
	stMasonryArchTypes[2] = `Прямая Перемычка`
	stMasonryArchTypes[3] = `Клинчатая Перемычка`
	stMasonryArchTypes[4] = `Клинчатая Перемычка с Замковым Камнем`
	stMasonryArchTypes[5] = `Лучковая Перемычка`
	stMasonryArchTypes[6] = `Лучковая Перемычка с Замковым Камнем`
	stMasonryArchTypes[7] = `Декоративная Арка`

dim gs_faschen_type[2]	! faschen
	gs_faschen_type[1] = `Штукатурка`
	gs_faschen_type[2] = `Кирпичная Кладка`

dim stMasonryArchStructure[2]	! gs_masonry_arch_structure
	stMasonryArchStructure[1] = `Штукатурная`
	stMasonryArchStructure[2] = `Кирпичная`

dim stSillTypes[17]	! gs_sill_type
	stSillTypes[ 1] = `Деревянный Отлив`
	stSillTypes[ 2] = `Кирпичный Отлив`
	stSillTypes[ 3] = `Каменный Отлив`
	stSillTypes[ 4] = `Керамический Отлив`
	stSillTypes[ 5] = `Этернитовый Отлив`
	stSillTypes[ 6] = `Бетонный Отлив`
	stSillTypes[ 7] = `Алюминиевый Отлив`
	stSillTypes[ 8] = `Монолитный Отлив 1.1`	! Massiv-Fensterbank 1.1
	stSillTypes[ 9] = `Монолитный Отлив 1.2`	! Massiv-Fensterbank 1.2
	stSillTypes[10] = `Монолитный Отлив`		! Massiv-Fensterbank 2.2
	stSillTypes[11] = `Металлический Лист`		! Metallfensterbank 1.1
	stSillTypes[12] = `Сплошной Параллельный`	! Massiv parallel
	stSillTypes[13] = `Металлический Лист 2`
	stSillTypes[14] = `Сплошной Параллельный 2`	! Massiv parallel 2
	stSillTypes[15] = `Простой Блок`
	stSillTypes[16] = `Блок Отлив`
	stSillTypes[17] = `Голландский Профилированный Отлив`

dim stThresholdTypes[19]		! gs_door_treshold
	stThresholdTypes[1]  = `Откл.`
	stThresholdTypes[2]  = `Обычный`
	stThresholdTypes[3]  = `Выступающий`
	stThresholdTypes[4]  = `Выступает в Обе Стороны`
	stThresholdTypes[5]  = `Под Панелью`
	stThresholdTypes[6]  = `Профильный`
	stThresholdTypes[7]  = `Стиль 1`
	stThresholdTypes[8]  = ``
	stThresholdTypes[9]  = `Стиль 2`
	stThresholdTypes[10] = ``
	stThresholdTypes[11] = ``
	stThresholdTypes[12] = `Стиль 3`
	stThresholdTypes[13] = ``
	stThresholdTypes[14] = ``
	stThresholdTypes[15] = `Простой`
	stThresholdTypes[16] = `Продленный Наклон`
	stThresholdTypes[17] = `Металл`
	stThresholdTypes[18] = `Выступает со Стороны Открывания`	! SWE
	stThresholdTypes[19] = ``							! Not Available

dim stBsilldetlevel[2]	! gs_brick_sill_detlev
	stBsilldetlevel[1] = `Простой`
	stBsilldetlevel[2] = `Детальный`

dim stBoardInPolyWall[2] ! gs_boardInPolyWall
	stBoardInPolyWall[1] = `Параллельно Окну`
	stBoardInPolyWall[2] = `Параллельно Многоугольнику Стены`

dim stCasingType[3] ! gs_trimtype_in, gs_trimtype_out
	stCasingType[1] = `Простой`
	stCasingType[2] = `Простой с Выступом`
	stCasingType[3] = `Сложный с Выступом`

dim stCasingHeadType[4] ! iCasingHeadTypeOut
	stCasingHeadType[1] = `Прямоугольник`
	stCasingHeadType[2] = `Декоративный 1`
	stCasingHeadType[3] = `Декоративный 2`
	stCasingHeadType[4] = `Декоративный 3`

dim stArchitraveCapitalType[4] ! iArchitraveCapitalType
	stArchitraveCapitalType[1] = `Прямоугольный на Боковом Наличнике`
	stArchitraveCapitalType[2] = `Прямоугольный рядом с Боковым Наличником`
	stArchitraveCapitalType[3] = `Декоративный на Боковом Наличнике`
	stArchitraveCapitalType[4] = `Декоративный рядом с Боковым Наличником`

dim stLocationAs[3]
	stLocationAs[1]		= `Имя Помещения`
	stLocationAs[2]		= `Номер Помещения`
	stLocationAs[3]		= `Специальный`


! =============================================================================

dim stDoorFrame[7]
	stDoorFrame[1] = `Гладкая`
	stDoorFrame[2] = `Двойной Уступ`
	stDoorFrame[3] = `Простой Уступ`
	stDoorFrame[4] = ""	! USA
	stDoorFrame[5] = ""	! USA
	stDoorFrame[6] = `Выступ`
	stDoorFrame[7] = `Завернутый Уступ`

dim stSunShadeTypes[ 9]
	stSunShadeTypes[ 1] = `Нет`
	stSunShadeTypes[ 2] = `Декоративные`
	stSunShadeTypes[ 3] = `Обычные`
	stSunShadeTypes[ 4] = `Складывание к Четверти`
	stSunShadeTypes[ 5] = `Складывание к Поверхности Стены`
	stSunShadeTypes[ 6] = `Раздвижная`
	stSunShadeTypes[ 7] = `Рольставни`
	stSunShadeTypes[ 8] = `Наружные Жалюзи`
	stSunShadeTypes[ 9] = `Жалюзи в Перемычке`

dim stShutterPanelPos[11]
	stShutterPanelPos[ 1] = `Симметрично`
	stShutterPanelPos[ 2] = `Слева`
	stShutterPanelPos[ 3] = `Справа`
	stShutterPanelPos[ 4] = `Обычно Слева`
	stShutterPanelPos[ 5] = `Обычно Справа`
	stShutterPanelPos[ 6] = `Слева Вверху`
	stShutterPanelPos[ 7] = `Слева Внизу`
	stShutterPanelPos[ 8] = `Справа Вверху`
	stShutterPanelPos[ 9] = `Справа Внизу`
	stShutterPanelPos[10] = `Двойное Вверху`
	stShutterPanelPos[11] = `Двойное Внизу`

dim stFoldingShutterStacking[2]
	stFoldingShutterStacking[1] = `Внутри`
	stFoldingShutterStacking[2] = `Снаружи`

dim stSlidingShutterCover[3]
	stSlidingShutterCover[1] = `Нет`
	stSlidingShutterCover[2] = `Z-профиль`
	stSlidingShutterCover[3] = `Корпус`

dim stShutterPanelTypes[11]
	stShutterPanelTypes[ 1] = `Стиль 1`
	stShutterPanelTypes[ 2] = `Стиль 2`
	stShutterPanelTypes[ 3] = `Стиль 3`
	stShutterPanelTypes[ 4] = `Стиль 4`
	stShutterPanelTypes[ 5] = `Стиль 5`
	stShutterPanelTypes[ 6] = `Стиль 6`
	stShutterPanelTypes[ 7] = `Стиль 7`
	stShutterPanelTypes[ 8] = `Стиль 8`
	stShutterPanelTypes[ 9] = `Стиль 9`
	stShutterPanelTypes[10] = `Стиль 10`
	stShutterPanelTypes[11] = `Специальный`

dim stShutRollPlacement[3]
	stShutRollPlacement[1] = `На Фасаде`
	stShutRollPlacement[2] = `Перед Окном`
	stShutRollPlacement[3] = `За Фасадом`

dim stShutRollBoxType[2]
	stShutRollBoxType[1] = `Прямоугольник`
	stShutRollBoxType[2] = `Закругленный`

dim stShutRollBoxDefaultSize[2]
	stShutRollBoxDefaultSize[1] = `По Ширине Четверти`
	stShutRollBoxDefaultSize[2] = `По Ширине Проема`

dim stShutLamPlacement[3]
	stShutLamPlacement[1] = `На Фасаде`
	stShutLamPlacement[2] = `Перед Окном`
	stShutLamPlacement[3] = `За Фасадом`

dim stShutRollRailPos[2]
	stShutRollRailPos[1] = `На Наличнике`
	stShutRollRailPos[2] = `На Стене`

dim stShutLamRailPos[2]
	stShutLamRailPos[1] = `На Наличнике`
	stShutLamRailPos[2] = `На Стене`

dim stVisionPanelTypes[3]	! gs_list_visionpanel_type
	stVisionPanelTypes[1] = `Нет Видеопанели`
	stVisionPanelTypes[2] = `Видеопанель`
	stVisionPanelTypes[3] = `Полностью Стеклянная`


! =============================================================================
! Array index definitions
! =============================================================================

iRevealType = gs_reveal_type_int - 1

if gs_bShowNewOnCC & iTypeDemolitionFill = RENOVATION_FILL_NEW then iRevealType = REVEAL_NO

iSillRevealType  = gs_reveal_doubleOuterTypeInt - 1
iBoardRevealType = gs_reveal_doubleInnerTypeInt - 1


! ==============================================================================
! Function Control
! ==============================================================================

if bEnableParapetInset	< 0 then bEnableParapetInset	= 0
if bEnableMasonryArch	< 0 then bEnableMasonryArch		= (	iWindowShape = SHAPE_RECTANGULAR | \
															iWindowShape = SHAPE_ARCHED | \
															iWindowShape = SHAPE_ROUND | \
															iWindowShape = SHAPE_ELLIPSE | \
															bTShapedOpening)
if bEnableFaschen		< 0 then bEnableFaschen			= 0		! Disabled in INT
if bEnableSill			< 0 then bEnableSill			= 1
if bEnableBoard			< 0 then bEnableBoard			= (bDoorWithSidelightSupport)
if bEnableThreshold		< 0 then bEnableThreshold		= 1
if bEnableCasing		< 0 then bEnableCasing			= 1
if bEnableShutter		< 0 then bEnableShutter			= 1
if bEnableCustomCornerLeft	< 0 then bEnableCustomCornerLeft	= 0
if bEnableCustomCornerRight	< 0 then bEnableCustomCornerRight	= 0
if bEnableGanging		< 0 then bEnableGanging			= 1
if bArchedTop then
	bEnableGanging = 0
endif

bEnableWallContourHiddenLine	= 1

if gs_RevealTypeEnable = 0 then
	gs_RevealTypeEnable	= 1 + 2
	if iWindowShape = SHAPE_RECTANGULAR then
		gs_RevealTypeEnable	= 1 + 2 + 4 + 8 + 16 + 32 + 64 + 128
	endif
	if iWindowShape = SHAPE_ARCHED | bTShapedOpening then
		gs_RevealTypeEnable	= 1 + 2 + 4 + 8 + 128
	endif
	if gs_frame_style_m = FRAME_STYLE_WRAPPED_EXTRUSION then
		gs_RevealTypeEnable	= 1 + 8
	endif
endif
if gs_ClosureTypeEnable = 0 then gs_ClosureTypeEnable = 1 + 2 + 4 + 8 + 256 + 512 + 1024 + 2048
if gs_SillTypeEnable = 0 then
	gs_SillTypeEnable		= 1 + 2 + 4
endif
if bDoorWithSidelightSupport then
	if gs_frame_style_m = FRAME_STYLE_WRAPPED_EXTRUSION then
		gs_sill_outside_sl_left		= 0
		gs_sill_outside_sl_right	= 0
		gs_board_inside_sl_left		= 0
		gs_board_inside_sl_right	= 0
	endif
endif

if gs_TresholdTypeEnable = 0 then
	if	gs_leaf_optype_m = LEAF_1L_PIVOT		|\
		gs_leaf_optype_m = LEAF_1L_PIVOT_M		|\
		gs_leaf_optype_m = LEAF_2L_1SLIDING		|\
		gs_leaf_optype_m = LEAF_2L_1SLIDING_M	|\
		gs_leaf_optype_m = LEAF_2L_2SLIDING		|\
		gs_leaf_optype_m = LEAF_2L_2SLIDING_M	|\
		gs_leaf_optype_m = LEAF_3L_2SLIDING		|\
		gs_leaf_optype_m = LEAF_3L_2SLIDING_M	|\
		gs_leaf_optype_m = LEAF_4L_2SLIDING		|\
		gs_leaf_optype_m = LEAF_4L_3SLIDING		|\
		gs_leaf_optype_m = LEAF_4L_3SLIDING_M	|\
		gs_leaf_optype_m = LEAF_4L_4SLIDING		|\
		gs_leaf_optype_m = LEAF_4L_4SLIDING_M	then

		gs_TresholdTypeEnable	= 4
	else
		gs_TresholdTypeEnable	= 1 + 2 + 4 	! + 8 + 16 no beneath panel and profiled in INT library
	endif

	if bEnableNEDTresholdType then gs_TresholdTypeEnable = gs_TresholdTypeEnable + 8192		! NED Simple Threshold
endif

if (gs_TresholdTypeEnable > 0) & gs_frame_style_m = FRAME_STYLE_WRAPPED_EXTRUSION then 			! Extended tresholds are unavailable at wrapped frame
	gs_TresholdTypeEnable = bitset(gs_TresholdTypeEnable, 1, 0)		! Extended treshold(2)
	gs_TresholdTypeEnable = bitset(gs_TresholdTypeEnable, 2, 0)		! Extended both sides treshold(4)
endif

if gs_CasingOutTypeEnable = 0 then
	gs_CasingOutTypeEnable = 1+2+4
endif
if gs_CasingInTypeEnable = 0 then
	gs_CasingInTypeEnable = 1+2
endif

defaultSillDepth	= 0.120

bCasingTolerance	= 0
bSillPlaneCut		= 1
bBoardPlaneCut		= 1

if bTShapedOpening then
	bCasingBottomOutside	= 1
	gs_trim_below_board		= 1
else
	bCasingBottomOutside	= 0
	gs_trim_below_board		= 0
endif

iLineShapeSwingEnable	= 1
iLineShapeSlidingEnable	= 1

if	gs_leaf_optype_m = LEAF_2L_1SLIDING		|\
	gs_leaf_optype_m = LEAF_2L_1SLIDING_M	|\
	gs_leaf_optype_m = LEAF_2L_2SLIDING		|\
	gs_leaf_optype_m = LEAF_2L_2SLIDING_M	|\
	gs_leaf_optype_m = LEAF_3L_2SLIDING		|\
	gs_leaf_optype_m = LEAF_3L_2SLIDING_M	|\
	gs_leaf_optype_m = LEAF_4L_2SLIDING		|\
	gs_leaf_optype_m = LEAF_4L_3SLIDING		|\
	gs_leaf_optype_m = LEAF_4L_3SLIDING_M	|\
	gs_leaf_optype_m = LEAF_4L_4SLIDING		|\
	gs_leaf_optype_m = LEAF_4L_4SLIDING_M	|\
	gs_leaf_optype_m = LEAF_1L_EXTERNAL_SLIDING		|\
	gs_leaf_optype_m = LEAF_1L_EXTERNAL_SLIDING_M	|\
	gs_leaf_optype_m = LEAF_2L_EXTERNAL_SLIDING		|\
	gs_leaf_optype_m = LEAF_1L_POCKET		|\
	gs_leaf_optype_m = LEAF_1L_POCKET_M		|\
	gs_leaf_optype_m = LEAF_2L_POCKET		then
	iLineShapeCategory 		= LINE_SHAPE_CATEGORY_SLIDING
	if bDoorEmptyPanel then
		iLineShapeSlidingEnable	= 1+4		! None, Opening Axis Line
	else
		iLineShapeSlidingEnable	= 1+2+4		! None, Arrow, Opening Axis Line
	endif
else
	if	(((gs_leaf_optype_m = LEAF_1L_MULTIPANEL | gs_leaf_optype_m = LEAF_1L_MULTIPANEL_M) & (not(gs_opening_leaves | gs_opening_leaves2) | (gs_open2D > EPS)))	|\
		((gs_leaf_optype_m = LEAF_2L_MULTIPANEL) & (not((gs_opening_leaves & (gs_open2D < EPS)) | (gs_opening_leaves2 & (gs_open2D_2 < EPS))))))	then

		iLineShapeCategory		= LINE_SHAPE_CATEGORY_SLIDING
		iLineShapeSlidingEnable	= 1+4		! None, Opening Axis Line
	else
		if	(gs_leaf_optype_m = LEAF_GAR_1L_UP_AND_OVER |\
			 gs_leaf_optype_m = LEAF_GAR_1L_UP_SLIDING	|\
			 ((gs_leaf_optype_m = LEAF_GAR_1L_SECTIONAL) & not(gs_passdoor))	|\
			 gs_leaf_optype_m = LEAF_GAR_2L_ROLLSIDE	|\
			 gs_leaf_optype_m = LEAF_GAR_1L_ROLLUP		|\
			 bDoorEmptyPanel) then

			iLineShapeCategory		= LINE_SHAPE_CATEGORY_SWING
			iLineShapeSwingEnable	= 1+8		! None, Opening Axis Line
		else
			iLineShapeCategory		= LINE_SHAPE_CATEGORY_SWING
			iLineShapeSwingEnable	= 2+4+8		! Curved, Straight, Opening Axis Line

			if	gs_leaf_optype_m = LEAF_2L_SIDE_HUNG		| \
				gs_leaf_optype_m = LEAF_2L_DOUBLE_ACTING	| \
				gs_leaf_optype_m = LEAF_2L_DOUBLE_EGRESS	| \
				gs_leaf_optype_m = LEAF_2L_DOUBLE_EGRESS_M	| \
				gs_leaf_optype_m = LEAF_GAR_2L_SIDE_HUNG	then

				iLineShapeSwingEnable	= 2+4+8+16		! Curved, Straight, Opening Axis Line, Leaf Axis Line
			endif
		endif
	endif
endif

! in case of SUNSHADE_ROLLING and SHUTROLL_BEHIND placement
if bEnableShutter & bSunshade & (gs_sunShade_iType = 6) & (gs_shutRoll_iPlacement = 3) & gs_shutRoll_bIncludeBoxHeight then
	_excludeRevealHeight	= 0
	_excludeCasingHeight	= 0
	
	if iRevealType = REVEAL_POSITIVE | iRevealType = REVEAL_SLANTED | iRevealType = REVEAL_HISTORIC | (iRevealType = REVEAL_DOUBLE & (iSillRevealType = 2 | gs_reveal_doubleOuterTypeInt = 3)) then
		if gs_reveal_uniform then
			_excludeRevealHeight = gs_reveal_right
		else
			_excludeRevealHeight = gs_reveal_top
		endif
	endif
	if (bEnableCasing & gs_trim_outside) then
		_excludeCasingHeight	= gs_trim_width_out
	endif

	_includeBoxHeight = (gs_shutRoll_boxHeight + gs_shutRoll_distFromHead - _excludeRevealHeight - _excludeCasingHeight)
else
	_includeBoxHeight = 0
endif


curvedWall		= abs(WIDO_ORIG_DIST) > EPS
wallIsLeft		= (SYMB_ROTANGLE > EPS) exor WIDO_REVEAL_SIDE


! =============================================================================

bDisableTradDutchClosure = gs_pocket

transomHeight		= (gs_door_transom)    * gs_transom_height
sidelightLeftWidth	= (gs_sidelight_left)  * gs_sidelight_width_left
sidelightRightWidth	= (gs_sidelight_right) * gs_sidelight_width_right

bShowTrimInsideSplice	= 0
bShowTrimOutsideSplice	= 0

bLeftCornerFunction		= 0
bRightCornerFunction	= 0


! =============================================================================
! Show Reveal On Symbol
! =============================================================================

bCanHaveReveal = (bittest(gs_RevealTypeEnable, REVEAL_POSITIVE)			| \
				  bittest(gs_RevealTypeEnable, REVEAL_NEGATIVE)			| \
				  bittest(gs_RevealTypeEnable, REVEAL_SLANTED)			| \
				  bittest(gs_RevealTypeEnable, REVEAL_SPLAYED)			| \
				  bittest(gs_RevealTypeEnable, REVEAL_HISTORIC)			| \
				  bittest(gs_RevealTypeEnable, REVEAL_DOUBLE)			| \
				  bittest(gs_RevealTypeEnable, REVEAL_DOUBLE_SPLAYED)	| \
				  bittest(gs_RevealTypeEnable, REVEAL_OUTSIDE_SPLAYED)	)


! =============================================================================
! Request globals for 2D (MVO Detail Level, MVO Reveal, Hotspots for IS)
! =============================================================================

iMVODetlevel2D			= 0
bMVOCasing2D			= 0
bShowAddHotspots		= 1
bMVODetlevelReveal		= 0
bShowAddHotspotsForIS	= 0

if GLOB_SCRIPT_TYPE = 2 then
	bGetMVOValueDlev2D		= (iDWDet2D = DETLEVEL_DW2D_MVO)
	bGetMVOValueCasing2D	= (bGetMVOValueDlev2D and bNotShowCasingIn2DNOR)
	bGetMVOValueDlevReveal	= (iRevealOnSymbol = SHOWREV_MVO)
	bGetHotspotsForIS		= (GLOB_CONTEXT = 6)

	if bGetMVOValueDlev2D | bGetMVOValueDlevReveal | bGetHotspotsForIS then
		call "GetDWSymbSettings" parameters	bWindow					= 0,
											bGetMVOValueDlev2D		= bGetMVOValueDlev2D,
											bGetMVOValueCasing2D	= bGetMVOValueCasing2D,
											bGetMVOValueDlevReveal	= bGetMVOValueDlevReveal,
											bGetHotspotsForIS		= bGetHotspotsForIS,
						returned_parameters iMVODetlevel2D,
											bMVOCasing2D,
											bMVODetlevelReveal,
											bShowAddHotspotsForIS
	endif
endif


! =============================================================================
! Request globals for 3D (MVO SE Detail Level, Hotspots for IS)
! =============================================================================

if GLOB_SCRIPT_TYPE = 3 then
	iMVODetlevelSE			= 0
	bGetMVOValueDlevSE		= 0					! not used in INT
	bGetHotspotsForIS		= (GLOB_CONTEXT = 6)

	if bGetMVOValueDlevSE | bGetHotspotsForIS then
		call "GetDWSymbSettings" parameters	bWindow					= 0,
											bGetMVOValueDlevSE		= bGetMVOValueDlevSE,
											bGetHotspotsForIS		= bGetHotspotsForIS,
						returned_parameters iMVODetlevelSE,
											bShowAddHotspotsForIS
	endif
endif


! =============================================================================
! 2D detail level settings
! =============================================================================

iLoD2D	= SYMBD_SCALESENS
if GLOB_SCRIPT_TYPE = 2 then
	if bGetMVOValueDlev2D then																		! by MVO
		iLoD2D	= iMVODetlevel2D
		if	iLoD2D = SYMBD_M_1LINELEAF_1LINE |\
			iLoD2D = SYMBD_D_2LINELEAFOP_SASH |\
			iLoD2D = SYMBD_D_2LINELEAFCL_SASHWLINE |\
			iLoD2D = SYMBD_D_1LINELEAF_SASHWLINE then

			iLoD2D = SYMBD_D_2LINELEAFOP_GLASS
			if iMVODetlevel2D < SYMBD_D_2LINELEAFOP_GLASS then		iLoD2D	= SYMBD_M_1LINELEAF_2LINE
			if iMVODetlevel2D < SYMBD_M_1LINELEAF_2LINE then		iLoD2D	= SYMBD_S_1LINE
		endif

		if GLOB_PREVIEW_MODE = 3 then				! in case of 2D-3D Favorite Preview
			iLoD2D = SYMBD_D_2LINELEAFOP_GLASS
		endif
	else
		if iDWDet2D = DETLEVEL_DW2D_50		then	iLoD2D = SYMBD_D_2LINELEAFOP_GLASS					! Detailed --> INT 50
		if iDWDet2D = DETLEVEL_DW2D_100		then	iLoD2D = SYMBD_M_1LINELEAF_2LINE					! Middle --> INT 100
		if iDWDet2D = DETLEVEL_DW2D_200		then	iLoD2D = SYMBD_S_1LINE								! Simple --> INT 200
		if bOpeningSymbDisplay then
			if iDWDet2D = DETLEVEL_DW2D_50	then	iLoD2D = SYMBD_D_2LINELEAFCL_REBATEONGLASS			! Detailed --> NLD 50
			if iDWDet2D = DETLEVEL_DW2D_100	then	iLoD2D = SYMBD_M_2LINELEAFCL_GLASS					! Middle --> NLD 100
		endif
		if iDWDet2D = DETLEVEL_DW2D_OFF		then	iLoD2D = SYMBD_OFF									! Off
		if iDWDet2D = DETLEVEL_DW2D_CHISMPL	then	iLoD2D = SYMBD_S_2LINE								! Chinese Simple
		if iDWDet2D = DETLEVEL_DW2D_CHIDET	then	iLoD2D = SYMBD_D_2LINELEAFOP_2LINE					! Chinese Detailed
		if iDWDet2D = DETLEVEL_DW2D_20		then	iLoD2D = SYMBD_D_2LEAFOPGLASS_GLASS					! Detailed --> DAN 20, INT 50 Storefronts
	endif
endif


! =============================================================================
! Hide Variable Closure Type NED, FLA
! =============================================================================

iClosureType = gs_closure_type_int - 1
if GLOB_SCRIPT_TYPE = 2 then
	if	bHideVariClosTypeInSimple2D &\
		iClosureType = CLOSURE_VARIABLE	&\
		((iLoD2D < SYMBD_M_1LINELEAF_2LINE & iLoD2D > SYMBD_SCALESENS) | (iLoD2D = SYMBD_SCALESENS & GLOB_SCALE > 150)) then
		iClosureType = CLOSURE_NO
	endif
endif


! ==============================================================================
! Symbol at Middle
! ==============================================================================

SymbolMid_shiftDy	= 0
bDWSymbolAtMiddle	= 0

signrevealside = not(WIDO_REVEAL_SIDE) - WIDO_REVEAL_SIDE

if GLOB_SCRIPT_TYPE = 2 then
	if GLOB_CONTEXT = 2 | GLOB_CONTEXT = 22 then
		if iLoD2D = SYMBD_S_2LINE | iLoD2D = SYMBD_D_2LINELEAFOP_2LINE then bDWSymbolAtMiddle = 1
	endif
endif
if GLOB_SCRIPT_TYPE = 3 then
	if GLOB_CONTEXT = 4 | GLOB_CONTEXT = 24 | GLOB_CONTEXT = 6 then
		if lod3D = 5 then bDWSymbolAtMiddle = 1
	endif
endif
if	gs_leaf_optype_m = LEAF_1L_EXTERNAL_SLIDING | \
	gs_leaf_optype_m = LEAF_1L_EXTERNAL_SLIDING_M | \
	gs_leaf_optype_m = LEAF_2L_EXTERNAL_SLIDING | \
	gs_sectgar then bDWSymbolAtMiddle = 0

SymbolMid_shiftDy = bDWSymbolAtMiddle * (WIDO_SILL - WALL_THICKNESS / 2 + WIDO_FRAME_THICKNESS / 2) * signrevealside
signrotangle = (ABS(SYMB_ROTANGLE-180) < EPS) - not(SYMB_ROTANGLE)


! =============================================================================
! Array index definitions
! =============================================================================

if not(bEnableThreshold) then
	bThreshold = 0
endif

if not(bEnableSill) then
	iSillType = SILL_TIMBER	
endif

bBoardInPolyWall = 0
if iBoardInPolyWall = BOARD_PARALLEL_WINDOW then bBoardInPolyWall = 1 ! Parallel to Window


! =============================================================================
! Nominal Size
! =============================================================================

if gs_nominal_size > 0 then
	gs_wallhole_nominal	= 0
	gs_reveal_nominal	= 0
	gs_unit_nominal		= 0
	gs_egress_nominal	= 0
	gs_leaf_nominal		= 0
	bSetParams = 0

	if not(bSetParams) & bittest(gs_nominal_size, 0) then: gs_wallhole_nominal	= 1: bSetParams = 1: endif
	if not(bSetParams) & bittest(gs_nominal_size, 1) then: gs_reveal_nominal	= 1: bSetParams = 1: endif
	if not(bSetParams) & bittest(gs_nominal_size, 2) then: gs_unit_nominal		= 1: bSetParams = 1: endif
	if not(bSetParams) & bittest(gs_nominal_size, 3) then: gs_egress_nominal	= 1: bSetParams = 1: endif
	if not(bSetParams) & bittest(gs_nominal_size, 4) then: gs_leaf_nominal		= 1: bSetParams = 1: endif

	if bSetParams & GLOB_SCRIPT_TYPE = 5 then
		parameters	gs_wallhole_nominal	= gs_wallhole_nominal,
					gs_reveal_nominal	= gs_reveal_nominal,
					gs_unit_nominal		= gs_unit_nominal,
					gs_egress_nominal	= gs_egress_nominal,
					gs_leaf_nominal		= gs_leaf_nominal
	endif
endif


! =============================================================================
! Calculating Unit and Egress Extra Sizes for Pocket Doors
! =============================================================================

if gs_pocket then

	posHole			= 0.005

	gs_unit_extra_left		= 0
	gs_unit_extra_right		= 0
	gs_egress_extra_left	= 0
	gs_egress_extra_right	= 0
	gs_egress_extra_upper	= 0

	_bModifyTolerance	=	(GLOB_MODPAR_NAME = "gs_tolerance_left") | (GLOB_MODPAR_NAME = "gs_tolerance_right")
	_bModifyFrame		=	(GLOB_MODPAR_NAME = "gs_uniform_framewidth") | \
							not(gs_uniform_framewidth) & ((GLOB_MODPAR_NAME = "gs_frame_width_left") | (GLOB_MODPAR_NAME = "gs_frame_width_right")) | \
								gs_uniform_framewidth  & (GLOB_MODPAR_NAME = "gs_frame_width")

	if gs_leaf_optype_m = LEAF_2L_POCKET then
		if gs_pocket_door_frame then
			gs_unit_extra_left	= -ac_wallhole_width/2 + gs_frame_width_right + gs_tolerance_right \
				+ gs_frame_width_left - gs_pocket_frame_thk - posHole
			gs_unit_extra_right	= -ac_wallhole_width/2 + gs_frame_width_right + gs_tolerance_left \
				+ gs_frame_width_left - gs_pocket_frame_thk - posHole
		else
			gs_unit_extra_left	= -ac_wallhole_width/2 - gs_tolerance_left - gs_pocket_frame_thk - posHole
			gs_unit_extra_right	= -ac_wallhole_width/2 - gs_tolerance_right - gs_pocket_frame_thk - posHole
		endif

		if	(GLOB_MODPAR_NAME = "ac_unit_width") | (gs_retain_nominal_sizes & GLOB_MODPAR_NAME = "gs_unit_nominal") | \
			gs_unit_nominal & (_bModifyTolerance | _bModifyFrame) | \
			(GLOB_MODPAR_NAME = "gs_pocket_frame_thk") then

			wallholeDiffLeft	= gs_tolerance_left  + gs_unit_extra_left
			wallholeDiffRight	= gs_tolerance_right + gs_unit_extra_right

			dWallholeWidth = ac_unit_width - (ac_wallhole_width - wallholeDiffLeft	- wallholeDiffRight)

			ac_wallhole_width = ac_wallhole_width + dWallholeWidth/2

			if gs_pocket_door_frame then
				gs_unit_extra_left	= -ac_wallhole_width/2 + gs_frame_width_right + gs_tolerance_right \
					+ gs_frame_width_left - gs_pocket_frame_thk - posHole
				gs_unit_extra_right	= -ac_wallhole_width/2 + gs_frame_width_right + gs_tolerance_left \
					+ gs_frame_width_left - gs_pocket_frame_thk - posHole
			else
				gs_unit_extra_left	= -ac_wallhole_width/2 - gs_tolerance_left - gs_pocket_frame_thk - posHole
				gs_unit_extra_right	= -ac_wallhole_width/2 - gs_tolerance_right - gs_pocket_frame_thk - posHole
			endif
		endif
	else
		if gs_pocket_door_frame then
			gs_unit_extra_left = -ac_wallhole_width + 2*gs_frame_width_right + gs_tolerance_right \
				+ gs_frame_width_left + gs_tolerance_left - gs_pocket_frame_thk - posHole
		else
			gs_unit_extra_left	= -ac_wallhole_width - gs_tolerance_left - gs_tolerance_right - gs_pocket_frame_thk - posHole
		endif

		if	(GLOB_MODPAR_NAME = "ac_unit_width") | (gs_retain_nominal_sizes & GLOB_MODPAR_NAME = "gs_unit_nominal") | \
			(gs_unit_nominal & (_bModifyTolerance | _bModifyFrame)) | \
			(GLOB_MODPAR_NAME = "gs_pocket_frame_thk") then

			wallholeDiffLeft	= gs_tolerance_left  + gs_unit_extra_left
			wallholeDiffRight	= gs_tolerance_right

			dWallholeWidth = ac_unit_width - (ac_wallhole_width - wallholeDiffLeft	- wallholeDiffRight)

			ac_wallhole_width = ac_wallhole_width + dWallholeWidth/2

			if gs_pocket_door_frame then
				gs_unit_extra_left = -ac_wallhole_width + 2*gs_frame_width_right + gs_tolerance_right \
					+ gs_frame_width_left + gs_tolerance_left - gs_pocket_frame_thk - posHole
			else
				gs_unit_extra_left	= -ac_wallhole_width - gs_tolerance_left - gs_tolerance_right - gs_pocket_frame_thk - posHole
			endif
		endif
	endif

	if not(gs_pocket_door_frame) then
		gs_unit_extra_upper		= -gs_tolerance_upper

		gs_egress_extra_left	= gs_frame_width_left
		gs_egress_extra_right	= gs_frame_width_right
		gs_egress_extra_upper	= gs_frame_width_upper
	endif

	if (GLOB_MODPAR_NAME = "gs_pocket_frame" | GLOB_MODPAR_NAME = "gs_pocket_door_frame") & gs_unit_nominal then
		if gs_pocket_frame then
			ac_unit_width = ac_wallhole_width - gs_tolerance_left - gs_tolerance_right - gs_unit_extra_left - gs_unit_extra_right
		else
			ac_unit_width = ac_wallhole_width - gs_tolerance_left - gs_tolerance_right
		endif
		A = ac_unit_width
		parameters A = A, ac_unit_width = ac_unit_width
	endif

	if not(gs_pocket_frame) then
		gs_unit_extra_left	= 0
		gs_unit_extra_right	= 0
	endif
endif


! =============================================================================
! Definitions
! =============================================================================

bDrawOutsideTrim	= (gs_trim_outside)
bDrawInsideTrim		= (gs_trim_inside)
bDrawSill			= (gs_sill_outside)
bDrawBoard			= (gs_board_inside)

isVentilationOverFrame = (bEnableVentilationProfile & bVentilationProfile & (iVentilationProfileType = VENTPROFILE_OVER_FRAME))


! ==============================================================================
! Partial Stucture Display related calculations
! ==============================================================================

if GLOB_SCRIPT_TYPE = 2 | GLOB_SCRIPT_TYPE = 3 then
	if GLOB_STRUCTURE_DISPLAY = STRUCTURE_CORE_ONLY & \
	  (GLOB_CONTEXT = 2 | GLOB_CONTEXT = 22 | \		! Floor plan
	   GLOB_CONTEXT = 3 | GLOB_CONTEXT = 23 | \		! 3D
	   GLOB_CONTEXT = 4 | GLOB_CONTEXT = 24 | \		! Section
	   (GLOB_PREVIEW_MODE = 2) | \	! IS but not surface
	   GLOB_CONTEXT = 8 | GLOB_CONTEXT = 28) then	! Layout
	!	bDrawOutsideTrim = 0	! GER request: do not hide Casing, Sill and Threshold in case of core only display mode
	!	bDrawInsideTrim		= 0
		bDrawSill			= 0
		bDrawBoard			= 0
		bThreshold 			= 0
	endif
endif


! =============================================================================
!	Frame Thickness
! =============================================================================

if not(bBasicDoorSWE) then
	if gs_slidingext | (gs_pocket & not(gs_pocket_door_frame)) then
		if gs_slidingext then
			gs_fthk = 0
		else
			gs_fthk = gs_leaf_thk + 0.005 * 2
		endif
	else
		if gs_frame_wthk then
			gs_fthk = WALL_THICKNESS
		else
			if gs_frame_style_m = FRAME_STYLE_WRAPPED_EXTRUSION then
				if iRevealType = REVEAL_EDGE		then gs_fthk = WALL_THICKNESS + 2*gs_frame_oversize_thk
				if iRevealType = REVEAL_NEGATIVE	then gs_fthk = WALL_THICKNESS - WIDO_SILL + 2*gs_frame_oversize_thk
			else
				gs_fthk = gs_frame_thk
			endif
		endif
	endif
	parameters gs_fthk = gs_fthk
endif


! =============================================================================
! Calculating Trim Parameters
! =============================================================================

if gs_frame_wthk then
	! --- Frame Thickness = Wall Thickness

	if gs_pocket_leafs then
		if gs_pocket_door_frame then
			gs_trim_width_in	= min(gs_frame_width_left, gs_frame_width_right)
			gs_trim_width_out	= min(gs_frame_width_left, gs_frame_width_right)
		endif
	else
		gs_trim_width_in	= min(gs_frame_width_left, gs_frame_width_right)
		gs_trim_width_out	= min(gs_frame_width_left, gs_frame_width_right)
	endif
	bShowJambExtension	= 0
else
	bShowJambExtension	= 1
endif


! =============================================================================
! Door Panel Attributes
! =============================================================================

refWidth	= A
leftWidth	= ac_wallhole_width / 2
rightWidth	= ac_wallhole_width / 2

bMirrored = (bDisabeMirroring & SYMB_MIRRORED)

if gs_sectgar | gs_highspeedgar then
	ac_zone_on_reveal_side = 1
	if not(gs_bOpeningToZone) then
		ac_zone_on_reveal_side = not(ac_zone_on_reveal_side)
	endif
else
	ac_zone_on_reveal_side = 1
	if WIDO_REVEAL_SIDE exor not(gs_bOpeningToZone) then
		ac_zone_on_reveal_side = not(ac_zone_on_reveal_side)
	endif
endif
parameters ac_zone_on_reveal_side = ac_zone_on_reveal_side


! =============================================================================
! Wallhole Oversize
! =============================================================================

overSize = 0

if bMirrored then
	overSizeLeft	= overSize * not(gs_stack_right)
	overSizeRight	= overSize * not(gs_stack_left)
else
	overSizeLeft	= overSize * not(gs_stack_left)
	overSizeRight	= overSize * not(gs_stack_right)
endif

overSizeLower = 0
overSizeUpper	= not(gs_stack_top) * overSize

if bDoorWithSidelightSupport & (gs_sill_outside | gs_sill_outside_sl_left | gs_sill_outside_sl_right) then
	if iSillType = 1 then
		overSize = gs_sill_oversize * gs_sill_thk
		if gs_sill_outside then
			overSizeLower = overSize
			if not(gs_sill_outside_sl_left) then
				gs_sidelight_parapet_hgt_left = gs_sidelight_parapet_hgt_left + overSize
			endif
			if not(gs_sill_outside_sl_right) then
				gs_sidelight_parapet_hgt_right = gs_sidelight_parapet_hgt_right + overSize
			endif
		else
			overSizeLower = 0
			if gs_sill_outside_sl_left then
				gs_sidelight_parapet_hgt_left = gs_sidelight_parapet_hgt_left - overSize
			endif
			if gs_sill_outside_sl_right then
				gs_sidelight_parapet_hgt_right = gs_sidelight_parapet_hgt_right - overSize
			endif
		endif
	endif
endif


! ==============================================================================
! Calculations for Trapezoid Walls
! ==============================================================================

if abs(WALL_INCL) > EPS then
	bInclinedWall = 1
	bInclDir = SYMB_MIRRORED exor (SYMB_ROTANGLE > EPS)	! (0 / 1)
	iInclDir = not(bInclDir) - bInclDir					! (1 / -1)

	incH = cos(WALL_INCL)
	incV = sin(WALL_INCL) * iInclDir

	incHor = tan(WALL_INCL)
else
	bInclinedWall = 0
endif


! ==============================================================================
! Hide Casing in Special Cases
! ==============================================================================

call "CasingEnable" parameters A=A,
	iRevealType			= iRevealType,
	iWindowShape		= iWindowShape,
	gs_frame_style_m	= gs_frame_style_m,
	returned_parameters bInsideCasingNotAvailableByWallType,
						bInsideCasingNotAvailableByReveal,
						bOutsideCasingNotAvailableByReveal,
						bInsideCasingNotAvailableByFrameStyle,
						bOutsideCasingNotAvailableByFrameStyle

if (bInsideCasingNotAvailableByWallType |\
	bInsideCasingNotAvailableByReveal |\
	bInsideCasingNotAvailableByFrameStyle) then
	gs_trim_inside	= 0
	bDrawInsideTrim	= 0
endif
if (bOutsideCasingNotAvailableByReveal |\
	bOutsideCasingNotAvailableByFrameStyle) then
	gs_trim_outside	 = 0
	bDrawOutsideTrim = 0
endif


! ==============================================================================
! Retroactive Logic
! ==============================================================================

if iSillType = 2 | iSillType = 3 | iSillType = 4 | iSillType = 5 | iSillType = 6 | iSillType = 7 | iSillType = 15 | iSillType = 17 then
	if gs_sill_outside			then gs_reveal_bottom = 0
	if gs_sill_outside_sl_left	then gs_reveal_bottom_sL = 0
	if gs_sill_outside_sl_right	then gs_reveal_bottom_sR = 0
endif

if bDoorWithSidelightSupport then
	if gs_sidelight_parapet_hgt_left < EPS then
		gs_reveal_bottom_sL				= gs_reveal_bottom
		gs_reveal_double_innerBottom_sL	= gs_reveal_double_innerBottom
	endif
	if gs_sidelight_parapet_hgt_right < EPS then
		gs_reveal_bottom_sR				= gs_reveal_bottom
		gs_reveal_double_innerBottom_sR	= gs_reveal_double_innerBottom
	endif
endif

bEnablePlasterLeftIn	= 1
bEnablePlasterLeftOut	= 1
bEnablePlasterRightIn	= 1
bEnablePlasterRightOut	= 1
bEnablePlasterTopIn		= 1
bEnablePlasterTopOut	= 1
bEnablePlasterBottomIn	= 1
bEnablePlasterBottomOut	= 1
bEnablePlasterBottomSlLeftIn	= 1
bEnablePlasterBottomSlLeftOut	= 1
bEnablePlasterBottomSlRightIn	= 1
bEnablePlasterBottomSlRightOut	= 1

bOutsideAtRefLine = (wallIsLeft exor (AC_Wall_Direction_Type <> 1 & AC_Wall_Direction_Type <> 3))
if bOutsideAtRefLine then
	if bDrawInsideTrim then
		bEnablePlasterLeftOut	= 0
		bEnablePlasterRightOut	= 0
		bEnablePlasterTopOut	= 0
		bEnablePlasterBottomOut	= 0
	endif
	if bDrawOutsideTrim then
		bEnablePlasterLeftIn	= 0
		bEnablePlasterRightIn	= 0
		bEnablePlasterTopIn		= 0
		bEnablePlasterBottomIn	= 0
	endif
	if bDrawSill then
		bEnablePlasterBottomIn	= 0
	endif
	if gs_sill_outside_sl_left then
		bEnablePlasterBottomSlLeftIn = 0
	endif
	if gs_sill_outside_sl_right then
		bEnablePlasterBottomSlRightIn = 0
	endif
	if bDrawBoard then
		bEnablePlasterBottomOut	= 0
	endif
	if gs_board_inside_sl_left then
		bEnablePlasterBottomSlLeftOut = 0
	endif
	if gs_board_inside_sl_right then
		bEnablePlasterBottomSlRightOut = 0
	endif
	if bEnableMasonryArch & bMasonryArch then
		bEnablePlasterTopIn	= 0
	endif
else
	if bDrawOutsideTrim then
		bEnablePlasterLeftOut	= 0
		bEnablePlasterRightOut	= 0
		bEnablePlasterTopOut	= 0
		bEnablePlasterBottomOut	= 0
	endif
	if bDrawInsideTrim then
		bEnablePlasterLeftIn	= 0
		bEnablePlasterRightIn	= 0
		bEnablePlasterTopIn		= 0
		bEnablePlasterBottomIn	= 0
	endif
	if bDrawSill then
		bEnablePlasterBottomOut	= 0
	endif
	if gs_sill_outside_sl_left then
		bEnablePlasterBottomSlLeftOut = 0
	endif
	if gs_sill_outside_sl_right then
		bEnablePlasterBottomSlRightOut = 0
	endif
	if bDrawBoard then
		bEnablePlasterBottomIn	= 0
	endif
	if gs_board_inside_sl_left then
		bEnablePlasterBottomSlLeftIn = 0
	endif
	if gs_board_inside_sl_right then
		bEnablePlasterBottomSlRightIn = 0
	endif
	if bEnableMasonryArch & bMasonryArch then
		bEnablePlasterTopOut	= 0
	endif
endif


! =============================================================================
! Plaster Geometry
! =============================================================================

call "PlasterGeometry" parameters gs_macro_version = 12,
	AC_Wall_Direction_Type	= AC_Wall_Direction_Type,
	bEnablePlasterLeftIn	= bEnablePlasterLeftIn,
	bEnablePlasterLeftOut	= bEnablePlasterLeftOut,
	bEnablePlasterRightIn	= bEnablePlasterRightIn,
	bEnablePlasterRightOut	= bEnablePlasterRightOut,
	bEnablePlasterTopIn		= bEnablePlasterTopIn,
	bEnablePlasterTopOut	= bEnablePlasterTopOut,
	bEnablePlasterBottomIn	= bEnablePlasterBottomIn,
	bEnablePlasterBottomOut	= bEnablePlasterBottomOut,
	bEnablePlasterBottomSlLeftIn	= bEnablePlasterBottomSlLeftIn,
	bEnablePlasterBottomSlLeftOut	= bEnablePlasterBottomSlLeftOut,
	bEnablePlasterBottomSlRightIn	= bEnablePlasterBottomSlRightIn,
	bEnablePlasterBottomSlRightOut	= bEnablePlasterBottomSlRightOut,
	gs_useWallFinishSkin	= gs_useWallFinishSkin,
	gs_maxPlasterThk		= gs_maxPlasterThk,
	gs_bAutoTurnOut			= gs_bAutoTurnOut,
	gs_bOverOut				= gs_bOverOut,
	gs_bAutoTurnIn			= gs_bAutoTurnIn,
	gs_bOverIn				= gs_bOverIn,
	iClosureType			= iClosureType,
	gs_custom_cc_array_left	= gs_custom_cc_array_left,
	gs_custom_cc_array_right= gs_custom_cc_array_right,
returned_parameters	thkPlasterAtSillLeft,
					thkPlasterAtSillSlLeft,
					thkPlasterAtSillSlLeftBottom,
					thkPlasterAtSillRight,
					thkPlasterAtSillSlRight,
					thkPlasterAtSillSlRightBottom,
					thkPlasterAtSillTop,
					thkPlasterAtSillBottom,
					thkPlasterAtBoardLeft,
					thkPlasterAtBoardSlLeft,
					thkPlasterAtBoardSlLeftBottom,
					thkPlasterAtBoardRight,
					thkPlasterAtBoardSlRight,
					thkPlasterAtBoardSlRightBottom,
					thkPlasterAtBoardTop,
					thkPlasterAtBoardBottom,
					possibleSkinTurnIn,
					possibleSkinTurnOut,
					maxSkinTurnIn,
					maxSkinTurnOut,
					nSkinTurnIn,
					nSkinTurnOut


! =============================================================================
! Show Reveal On Symbol
! =============================================================================

bShowReveal = 1
if GLOB_SCRIPT_TYPE = 2 then
	if bGetMVOValueDlevReveal then																					! by MVO
		bShowReveal = bMVODetlevelReveal
	else
		bShowReveal = 1
		if iRevealOnSymbol = SHOWREV_NEVER												then bShowReveal = 0		! Never
		if iLoD2D = SYMBD_SCALESENS then																			! Scale sensitive
			if iRevealOnSymbol = SHOWREV_UPTO50 & GLOB_SCALE > 75						then bShowReveal = 0		! Up to 1:50
			if iRevealOnSymbol = SHOWREV_UPTO100 & GLOB_SCALE > 150						then bShowReveal = 0		! Up to 1:100
		else
			if iRevealOnSymbol = SHOWREV_UPTO50 & iLoD2D < SYMBD_D_2LINELEAFOP_GLASS	then bShowReveal = 0		! Up to 1:50
			if iRevealOnSymbol = SHOWREV_UPTO100 & iLoD2D < SYMBD_M_1LINELEAF_2LINE		then bShowReveal = 0		! Up to 1:100
		endif
		if iRevealOnSymbol = SHOWREV_UPTO200 & GLOB_SCALE > 200							then bShowReveal = 0		! Up to 1:200
	endif
endif


! =============================================================================
! Wallhole Geometry
! =============================================================================

openingHeight	= ac_wallhole_height
gs_IsCurved = 0


! ==============================================================================
! Calculations for Curved Walls
! ==============================================================================

if curvedWall then
	WOD = abs(WIDO_ORIG_DIST) - (SYMB_ROTANGLE > EPS) * WIDO_FRAME_THICKNESS

	leftAlfa	= atn(leftWidth  / WOD)
	rightAlfa	= atn(rightWidth / WOD)
endif


! =============================================================================
! Wallhole Reveal Geometry
! =============================================================================

origRevealType					= iRevealType
origRevealLeft					= gs_reveal_left
origRevealRight					= gs_reveal_right
origRevealTop					= gs_reveal_top
origRevealBottom				= gs_reveal_bottom
origRevealLeftAngle				= gs_reveal_left_angle
origRevealRightAngle			= gs_reveal_right_angle
origRevealTopAngle				= gs_reveal_top_angle
origRevealBottomAngle			= gs_reveal_bottom_angle
origRevealSplayedInnerLeft		= gs_reveal_splayed_innerLeft
origRevealSplayedInnerRight		= gs_reveal_splayed_innerRight
origRevealSplayedInnerTop		= gs_reveal_splayed_innerTop
origRevealSplayedInnerBottom	= gs_reveal_splayed_innerBottom
origRevealOuterJambDepth		= gs_reveal_outer_jamb_depth
origRevealDoubleInnerLeft		= gs_reveal_double_innerLeft
origRevealDoubleInnerRight		= gs_reveal_double_innerRight
origRevealDoubleInnerTop		= gs_reveal_double_innerTop
origRevealDoubleInnerBottom		= gs_reveal_double_innerBottom
origRevealOuterLeftAngle		= 0 ! gs_reveal_outerLeft_angle
origRevealOuterRightAngle		= 0 ! gs_reveal_outerRight_angle
origRevealOuterTopAngle			= 0 ! gs_reveal_outerTop_angle
origRevealOuterBottomAngle		= 0 ! gs_reveal_outerBottom_angle
origRevealInnerWidthLeft		= 0 ! gs_reveal_innerLeft_width
origRevealInnerWidthRight		= 0 ! gs_reveal_innerRight_width
origRevealInnerWidthTop			= 0 ! gs_reveal_innerTop_width
origRevealInnerWidthBottom		= 0 ! gs_reveal_innerBottom_width
origRevealOuterWidthLeft		= 0 ! gs_reveal_outerLeft_width
origRevealOuterWidthRight		= 0 ! gs_reveal_outerRight_width
origRevealOuterWidthTop			= 0 ! gs_reveal_outerTop_width
origRevealOuterWidthBottom		= 0 ! gs_reveal_outerBottom_width

dim revealPointsArray[]
dim iRevealPointsIdx[20]

dim bAddPoint[4]

dim  leftWallholeRevealPnts[][2]
dim rightWallholeRevealPnts[][2]

call "RevealGeometry" parameters A	= A,
	AC_WallType						= AC_WallType,
	AC_WindowInWallContour			= AC_WindowInWallContour,
	AC_WallContourPolygon			= AC_WallContourPolygon,
	gs_macro_version				= 12,
	iWindowShape					= iWindowShape,
	bDoorWithSidelightSupport		= bDoorWithSidelightSupport,
	refWidth						= refWidth,
	leftWidth						= leftWidth  + gs_left_oversize,
	rightWidth						= rightWidth + gs_right_oversize,
	cornerPostX						= 0,
	bWndCurved						= gs_IsCurved,
	bParalellInCurvedWalls			= bParalellInCurvedWalls,
	bShowReveal						= bShowReveal,
	bDWSymbolAtMiddle				= bDWSymbolAtMiddle,
	iClosureType					= iClosureType,
	iRevealType						= origRevealType,
	gs_reveal_type_bottom_int		= gs_reveal_type_bottom_int,
	iSillRevealType					= iSillRevealType,
	iBoardRevealType				= iBoardRevealType,
	gs_wido_sill					= gs_wido_sill,
	gs_reveal_uniform				= gs_reveal_uniform,
	gs_reveal_left					= origRevealLeft,
	gs_reveal_right					= origRevealRight,
	gs_reveal_top					= origRevealTop,
	gs_reveal_bottom				= origRevealBottom,
	gs_reveal_splayed_innerLeft		= origRevealSplayedInnerLeft,
	gs_reveal_splayed_innerRight	= origRevealSplayedInnerRight,
	gs_reveal_splayed_innerTop		= origRevealSplayedInnerTop,
	gs_reveal_splayed_innerBottom	= origRevealSplayedInnerBottom,
	gs_reveal_double_innerLeft		= origRevealDoubleInnerLeft,
	gs_reveal_double_innerRight		= origRevealDoubleInnerRight,
	gs_reveal_double_innerTop		= origRevealDoubleInnerTop,
	gs_reveal_double_innerBottom	= origRevealDoubleInnerBottom,
	gs_reveal_outer_jamb_depth		= origRevealOuterJambDepth,
	gs_reveal_left_angle			= origRevealLeftAngle,
	gs_reveal_right_angle			= origRevealRightAngle,
	gs_reveal_top_angle				= origRevealTopAngle,
	gs_reveal_bottom_angle			= origRevealBottomAngle,
	gs_reveal_outerLeft_angle		= origRevealOuterLeftAngle,
	gs_reveal_outerRight_angle		= origRevealOuterRightAngle,
	gs_reveal_outerTop_angle		= origRevealOuterTopAngle,
	gs_reveal_outerBottom_angle		= origRevealOuterBottomAngle,
	gs_reveal_angle_edit_by_int		= 1,
	gs_reveal_innerLeft_width		= origRevealInnerWidthLeft,
	gs_reveal_innerRight_width		= origRevealInnerWidthRight,
	gs_reveal_innerTop_width		= origRevealInnerWidthTop,
	gs_reveal_innerBottom_width		= origRevealInnerWidthBottom,
	gs_reveal_outerLeft_width		= origRevealOuterWidthLeft,
	gs_reveal_outerRight_width		= origRevealOuterWidthRight,
	gs_reveal_outerTop_width		= origRevealOuterWidthTop,
	gs_reveal_outerBottom_width		= origRevealOuterWidthBottom,
	gs_reveal_left_sL				= gs_reveal_left_sL,
	gs_reveal_right_sR				= gs_reveal_right_sR,
	gs_reveal_bottom_sL				= gs_reveal_bottom_sL,
	gs_reveal_bottom_sR				= gs_reveal_bottom_sR,
	gs_reveal_double_innerLeft_sL	= gs_reveal_double_innerLeft_sL,
	gs_reveal_double_innerRight_sR	= gs_reveal_double_innerRight_sR,
	gs_reveal_double_innerBottom_sL	= gs_reveal_double_innerBottom_sL,
	gs_reveal_double_innerBottom_sR	= gs_reveal_double_innerBottom_sR,
	gs_mountingFrame				= gs_mountingFrame,
	gs_mountingFrame_depth			= gs_mountingFrame_depth,
	thkPlasterAtSillLeft			= thkPlasterAtSillLeft,
	thkPlasterAtSillRight			= thkPlasterAtSillRight,
	thkPlasterAtBoardLeft			= thkPlasterAtBoardLeft,
	thkPlasterAtBoardRight			= thkPlasterAtBoardRight,
	bLeftCornerFunction				= bLeftCornerFunction,
!	leftCornerAngle					= leftCornerAngle,
!	leftConnWallThk					= leftConnWallThk,
	bRightCornerFunction			= bRightCornerFunction,
!	rightCornerAngle				= rightCornerAngle,
!	rightConnWallThk				= rightConnWallThk,
	bCornerWindow					= 0,
	bGangingLeft					= gs_stack_left,
	bGangingRight					= gs_stack_right,
	gs_unit_nominal					= gs_unit_nominal,
	gs_reveal_nominal				= gs_reveal_nominal,
	gs_egress_nominal				= gs_egress_nominal,
	gs_leaf_nominal					= gs_leaf_nominal,
	gs_tolerance_left				= gs_tolerance_left,
	gs_tolerance_right				= gs_tolerance_right,
	gs_left_oversize				= gs_left_oversize,
	gs_right_oversize				= gs_right_oversize,
returned_parameters	iRevealType,
	iRevealTypeForDisplay,
	iClosureType,
	bShowReveal,
	leftWallholeWidth,
	rightWallholeWidth,
	originalOffsWindowX,
	offsWindowX,
	gs_reveal_left,
	gs_reveal_right,
	revealInnerLeft,
	revealInnerRight,
	gs_reveal_top,
	gs_reveal_bottom,
	gs_reveal_splayed_innerTop,
	gs_reveal_splayed_innerBottom,
	gs_reveal_double_innerLeft,
	gs_reveal_double_innerRight,
	gs_reveal_double_innerTop,
	gs_reveal_double_innerBottom,
	gs_reveal_outer_jamb_depth,
	gs_reveal_left_angle,
	gs_reveal_right_angle,
	gs_reveal_top_angle,
	gs_reveal_bottom_angle,
	gs_reveal_outerLeft_angle,
	gs_reveal_outerRight_angle,
	gs_reveal_outerTop_angle,
	gs_reveal_outerBottom_angle,
	gs_reveal_left_sL,
	gs_reveal_right_sR,
	gs_reveal_bottom_sL,
	gs_reveal_bottom_sR,
	gs_reveal_double_innerLeft_sL,
	gs_reveal_double_innerRight_sR,
	gs_reveal_double_innerBottom_sL,
	gs_reveal_double_innerBottom_sR,
	radSill,
	radBoard,
	WOD,
	iRevealPointsIdx,
	bAddPoint,
	revealPointsArray


for i=1 to iRevealPointsIdx[10]
	idx = 2 * (i - 1) + 1
	leftWallholeRevealPnts[i][1] = revealPointsArray[idx]
	leftWallholeRevealPnts[i][2] = revealPointsArray[idx + 1]
next i

for i=1 to iRevealPointsIdx[20]
	idx = 2 * (iRevealPointsIdx[10] + i - 1) + 1
	rightWallholeRevealPnts[i][1] = revealPointsArray[idx]
	rightWallholeRevealPnts[i][2] = revealPointsArray[idx + 1]
next i


! =============================================================================
! Wall Framing Reveal Geometry
! =============================================================================

dim  leftWallFrameRevealPnts[][2]
dim rightWallFrameRevealPnts[][2]

if abs(gs_left_oversize) > EPS | abs(gs_right_oversize) > EPS then
	if GLOB_SCRIPT_TYPE = 2 | GLOB_SCRIPT_TYPE = 3 | ((GLOB_SCRIPT_TYPE = 4 | GLOB_SCRIPT_TYPE = 5) & gs_sunShade_iType <> 0) then
		call "RevealGeometry" parameters A	= A,
			AC_WallType						= AC_WallType,
			AC_WindowInWallContour			= AC_WindowInWallContour,
			AC_WallContourPolygon			= AC_WallContourPolygon,
			gs_macro_version				= 12,
			iWindowShape					= iWindowShape,
			bDoorWithSidelightSupport		= bDoorWithSidelightSupport,
			refWidth						= refWidth,
			leftWidth						= leftWidth,
			rightWidth						= rightWidth,
			cornerPostX						= 0,
			bWndCurved						= gs_IsCurved,
			bParalellInCurvedWalls			= bParalellInCurvedWalls,
			bShowReveal						= bShowReveal,
			bDWSymbolAtMiddle				= bDWSymbolAtMiddle,
			iClosureType					= iClosureType,
			iRevealType						= origRevealType,
			gs_reveal_type_bottom_int		= gs_reveal_type_bottom_int,
			iSillRevealType					= iSillRevealType,
			iBoardRevealType				= iBoardRevealType,
			gs_wido_sill					= gs_wido_sill,
			gs_reveal_uniform				= gs_reveal_uniform,
			gs_reveal_left					= origRevealLeft,
			gs_reveal_right					= origRevealRight,
			gs_reveal_top					= origRevealTop,
			gs_reveal_bottom				= origRevealBottom,
			gs_reveal_splayed_innerLeft		= origRevealSplayedInnerLeft,
			gs_reveal_splayed_innerRight	= origRevealSplayedInnerRight,
			gs_reveal_splayed_innerTop		= origRevealSplayedInnerTop,
			gs_reveal_splayed_innerBottom	= origRevealSplayedInnerBottom,
			gs_reveal_double_innerLeft		= origRevealDoubleInnerLeft,
			gs_reveal_double_innerRight		= origRevealDoubleInnerRight,
			gs_reveal_double_innerTop		= origRevealDoubleInnerTop,
			gs_reveal_double_innerBottom	= origRevealDoubleInnerBottom,
			gs_reveal_outer_jamb_depth		= origRevealOuterJambDepth,
			gs_reveal_left_angle			= origRevealLeftAngle,
			gs_reveal_right_angle			= origRevealRightAngle,
			gs_reveal_top_angle				= origRevealTopAngle,
			gs_reveal_bottom_angle			= origRevealBottomAngle,
			gs_reveal_outerLeft_angle		= origRevealOuterLeftAngle,
			gs_reveal_outerRight_angle		= origRevealOuterRightAngle,
			gs_reveal_outerTop_angle		= origRevealOuterTopAngle,
			gs_reveal_outerBottom_angle		= origRevealOuterBottomAngle,
			gs_reveal_angle_edit_by_int		= 1,
			gs_reveal_innerLeft_width		= origRevealInnerWidthLeft,
			gs_reveal_innerRight_width		= origRevealInnerWidthRight,
			gs_reveal_innerTop_width		= origRevealInnerWidthTop,
			gs_reveal_innerBottom_width		= origRevealInnerWidthBottom,
			gs_reveal_outerLeft_width		= origRevealOuterWidthLeft,
			gs_reveal_outerRight_width		= origRevealOuterWidthRight,
			gs_reveal_outerTop_width		= origRevealOuterWidthTop,
			gs_reveal_outerBottom_width		= origRevealOuterWidthBottom,
			gs_reveal_left_sL				= gs_reveal_left_sL,
			gs_reveal_right_sR				= gs_reveal_right_sR,
			gs_reveal_bottom_sL				= gs_reveal_bottom_sL,
			gs_reveal_bottom_sR				= gs_reveal_bottom_sR,
			gs_reveal_double_innerLeft_sL	= gs_reveal_double_innerLeft_sL,
			gs_reveal_double_innerRight_sR	= gs_reveal_double_innerRight_sR,
			gs_reveal_double_innerBottom_sL	= gs_reveal_double_innerBottom_sL,
			gs_reveal_double_innerBottom_sR	= gs_reveal_double_innerBottom_sR,
			gs_mountingFrame				= gs_mountingFrame,
			gs_mountingFrame_depth			= gs_mountingFrame_depth,
			thkPlasterAtSillLeft			= thkPlasterAtSillLeft,
			thkPlasterAtSillRight			= thkPlasterAtSillRight,
			thkPlasterAtBoardLeft			= thkPlasterAtBoardLeft,
			thkPlasterAtBoardRight			= thkPlasterAtBoardRight,
			bLeftCornerFunction				= bLeftCornerFunction,
!			leftCornerAngle					= leftCornerAngle,
!			leftConnWallThk					= leftConnWallThk,
			bRightCornerFunction			= bRightCornerFunction,
!			rightCornerAngle				= rightCornerAngle,
!			rightConnWallThk				= rightConnWallThk,
			bCornerWindow					= 0,
			bGangingLeft					= gs_stack_left,
			bGangingRight					= gs_stack_right,
			gs_unit_nominal					= gs_unit_nominal,
			gs_reveal_nominal				= gs_reveal_nominal,
			gs_tolerance_left				= gs_tolerance_left,
			gs_tolerance_right				= gs_tolerance_right,
			gs_left_oversize				= 0,
			gs_right_oversize				= 0,
		returned_parameters	dummyParam,
			dummyParam,
			dummyParam,
			dummyParam,
			leftWidth,
			rightWidth,
			dummyParam,
			dummyParam,
			dummyParam,
			dummyParam,
			dummyParam,
			dummyParam,
			dummyParam,
			dummyParam,
			dummyParam,
			dummyParam,
			dummyParam,
			dummyParam,
			dummyParam,
			dummyParam,
			dummyParam,
			dummyParam,
			dummyParam,
			dummyParam,
			dummyParam,
			dummyParam,
			dummyParam,
			dummyParam,
			dummyParam,
			dummyParam,
			dummyParam,
			dummyParam,
			dummyParam,
			dummyParam,
			dummyParam,
			dummyParam,
			dummyParam,
			dummyParam,
			dummyParam,
			dummyParam,
			iRevealPointsIdx,
			dummyParam,dummyParam,dummyParam,dummyParam,
			revealPointsArray

		for i=1 to iRevealPointsIdx[10]
			idx = 2 * (i - 1) + 1
			leftWallFrameRevealPnts[i][1] = revealPointsArray[idx]
			leftWallFrameRevealPnts[i][2] = revealPointsArray[idx + 1]
		next i

		for i=1 to iRevealPointsIdx[20]
			idx = 2 * (iRevealPointsIdx[10] + i - 1) + 1
			rightWallFrameRevealPnts[i][1] = revealPointsArray[idx]
			rightWallFrameRevealPnts[i][2] = revealPointsArray[idx + 1]
		next i
	endif
else
	 leftWallFrameRevealPnts =  leftWallholeRevealPnts
	rightWallFrameRevealPnts = rightWallholeRevealPnts

	leftWidth	= leftWallholeWidth
	rightWidth	= rightWallholeWidth
endif


! =============================================================================
! Minimal Space Parameters
! =============================================================================
gosub "MSParametersCalculation"


! ==============================================================================
! Reveal Points Indexes
! ==============================================================================

idxFrameStartRevealLeft		= iRevealPointsIdx[3]
idxFrameEndRevealLeft		= iRevealPointsIdx[4]
idxFrameStartRevealRight	= iRevealPointsIdx[13]
idxFrameEndRevealRight		= iRevealPointsIdx[14]


! =============================================================================
! Wall Framing Reveal Geometry
! =============================================================================

dim lineSections[][7]
lineSections[1][1] = 0	! Initialization
lineSections[1][2] = 0
lineSections[1][3] = 0
lineSections[1][4] = 0
lineSections[1][5] = 0
lineSections[1][6] = 0
lineSections[1][7] = 0

if GLOB_SCRIPT_TYPE = 2 then

	bCompositeWall		= (WALL_SKINS_NUMBER > 0)

	bSkinTurnLeft	= 0
	bSkinTurnRight	= 0
	if bCompositeWall then
		if	iClosureType = CLOSURE_TRADITIONAL |\
			iClosureType = CLOSURE_VARIABLE |\
			iClosureType = CLOSURE_DUTCH_VARIABLE |\
			iClosureType = CLOSURE_PREFABRICATED then

			bSkinTurnLeft	= (iCavityClosureSide = CAVITY_SIDE_BOTH | iCavityClosureSide = CAVITY_SIDE_LEFT)
			bSkinTurnRight	= (iCavityClosureSide = CAVITY_SIDE_BOTH | iCavityClosureSide = CAVITY_SIDE_RIGHT)
		endif
		if iClosureType = CLOSURE_CUSTOM then
			bSkinTurnLeft	= 1
			bSkinTurnRight	= 1
		endif

		bPlasterTurnSillLeft	= (thkPlasterAtSillLeft > EPS)
		bPlasterTurnSillRight	= (thkPlasterAtSillRight > EPS)
		bPlasterTurnBoardLeft	= (thkPlasterAtBoardLeft > EPS)
		bPlasterTurnBoardRight	= (thkPlasterAtBoardRight > EPS)
	else
		bPlasterTurnSillLeft	= 0
		bPlasterTurnSillRight	= 0
		bPlasterTurnBoardLeft	= 0
		bPlasterTurnBoardRight	= 0
	endif

	if WIDO_REVEAL_SIDE then
		bSillSideTreshold  = bThreshold & (iThresholdType = TRESHOLD_EXTENDED or iThresholdType = TRESHOLD_BOTHEXTENDED)
		bBoardSideTreshold = bThreshold & (iThresholdType = TRESHOLD_BOTHEXTENDED)
		ovhg_2 = gs_treshold_ovhg
		ovhg = gs_treshold_ovhg_2
	else
		bSillSideTreshold  = bThreshold & (iThresholdType = TRESHOLD_BOTHEXTENDED)
		bBoardSideTreshold = bThreshold & (iThresholdType = TRESHOLD_EXTENDED or iThresholdType = TRESHOLD_BOTHEXTENDED)
		ovhg = gs_treshold_ovhg
		ovhg_2 = gs_treshold_ovhg_2
	endif

	dim tempLineSections[]
	tempLineSections[1] = 0	! Initialization

	call "FramingGeometry" parameters gs_macro_version = 12,
		refWidth				= refWidth,
		leftWidth				= leftWidth  + gs_left_oversize,
		rightWidth				= rightWidth + gs_right_oversize,
		bWndCurved				= gs_IsCurved,
		bParalellInCurvedWalls	= bParalellInCurvedWalls,
		radSill					= radSill,
		radBoard				= radBoard,
		WOD						= WOD,
		bDoorWithSidelightSupport = bDoorWithSidelightSupport,
		bSkinTurnLeft			= bSkinTurnLeft,
		bSkinTurnRight			= bSkinTurnRight,
		bPlasterTurnSillLeft	= bPlasterTurnSillLeft,
		bPlasterTurnSillRight	= bPlasterTurnSillRight,
		bPlasterTurnBoardLeft	= bPlasterTurnBoardLeft,
		bPlasterTurnBoardRight	= bPlasterTurnBoardRight,
		bLeftCornerFunction		= bLeftCornerFunction,
		bRightCornerFunction	= bRightCornerFunction,
		iRevealType				= iRevealTypeForDisplay,
		gs_reveal_left			= gs_reveal_left,
		gs_reveal_right			= gs_reveal_right,
		gs_reveal_left_angle	= gs_reveal_left_angle,
		gs_reveal_right_angle	= gs_reveal_right_angle,
		leftRevealPnts			= leftWallholeRevealPnts,
		rightRevealPnts			= rightWallholeRevealPnts,
		iRevealPointsIdx		= iRevealPointsIdx,
		bGangingLeft			= gs_stack_left,
		bGangingRight			= gs_stack_right,
		gs_sidelight_left				= gs_sidelight_left,
		gs_sidelight_parapet_hgt_left	= gs_sidelight_parapet_hgt_left,
		gs_sidelight_right				= gs_sidelight_right,
		gs_sidelight_parapet_hgt_right	= gs_sidelight_parapet_hgt_right,
		gs_left_oversize		= gs_left_oversize,
		gs_right_oversize		= gs_right_oversize,
		gs_sill_outside			= gs_sill_outside,
		gs_sill_outside_sl_left	= gs_sill_outside_sl_left,
		gs_sill_outside_sl_right= gs_sill_outside_sl_right,
		iSillType				= iSillType,
		gs_sill_nosing			= gs_sill_nosing,
		gs_sill_ovhg_left		= gs_sill_ovhg_left,
		gs_sill_ovhg_right		= gs_sill_ovhg_right,
		gs_board_inside			= gs_board_inside,
		gs_board_inside_sl_left	= gs_board_inside_sl_left,
		gs_board_inside_sl_right= gs_board_inside_sl_right,
		gs_board_ovhg_left		= gs_board_ovhg_left,
		gs_board_ovhg_right		= gs_board_ovhg_right,
		bDrawOutsideTrim		= bDrawOutsideTrim,
		bDrawInsideTrim			= bDrawInsideTrim,
		gs_trim_outside_uniform	= gs_trim_outside_uniform,
		gs_trim_inside_uniform	= gs_trim_inside_uniform,
		gs_trim_width_in		= gs_trim_width_in,
		gs_trim_width_out		= gs_trim_width_out,
		gs_trim_offs_in			= gs_trim_offs_in,
		gs_trim_offs_out		= gs_trim_offs_out,
		gs_trim_thk_in			= gs_trim_thk_in,
		gs_trim_thk_out			= gs_trim_thk_out,
		gs_tw_left_in			= gs_tw_left_in,
		gs_tw_right_in			= gs_tw_right_in,
		gs_tw_left_out			= gs_tw_left_out,
		gs_tw_right_out			= gs_tw_right_out,
		gs_trim_atframe_out		= 0,
		gs_trim_atframe_in		= 0,
		bSillSideTreshold		= bSillSideTreshold,
		bBoardSideTreshold		= bBoardSideTreshold,
		gs_treshold_ovhg		= ovhg,
		gs_treshold_ovhg_2		= ovhg_2,
		msOpeningSideWidth2		= msOpeningSideWidth2,
		msOpeningSideWidth1		= msOpeningSideWidth1,
		msOppositeSideWidth2		= msOppositeSideWidth2,
		msOppositeSideWidth1		= msOppositeSideWidth1,
		EgressMSWidth 			= EgressMSWidth,
		egressOffset 			= egressOffset,
		gs_pocket_leafs			= gs_pocket_leafs,
		widthWallCut			= widthWallCut,
		posLeafy				= posLeafy,
		bReversePocketSide		= 0,
	returned_parameters	tempLineSections

	numLineSections = round_int(vardim1(tempLineSections) / 7)
	idx = 0
	for i=1 to numLineSections
		for j=1 to 7
			lineSections[i][j] = tempLineSections[idx + j]
		next j
		idx = idx + 7
	next i
endif


! =============================================================================
! Frame Overhang Calculations
! =============================================================================

if GLOB_SCRIPT_TYPE = 2 | GLOB_SCRIPT_TYPE = 3 then
	fx1L = -leftWidth
	fx2L = -leftWidth

	fx1L =  rightWidth
	fx2L =  rightWidth

	fx1L = leftWallFrameRevealPnts[idxFrameStartRevealLeft][1]
	fx2L = leftWallFrameRevealPnts[idxFrameEndRevealLeft][1]

	fx1R = rightWallFrameRevealPnts[idxFrameStartRevealRight][1]
	fx2R = rightWallFrameRevealPnts[idxFrameEndRevealRight][1]

	! Curved
	SymbMid_LeftDx = 0
	SymbMid_RightDx = 0
	if GLOB_CONTEXT = 2 | GLOB_CONTEXT = 22 | GLOB_CONTEXT = 4 | GLOB_CONTEXT = 24 | GLOB_CONTEXT = 6 then
		if curvedWall then
			SymbMid_LeftDx = signrotangle * SymbolMid_shiftDy * tan(leftAlfa)
			SymbMid_RightDx = signrotangle * SymbolMid_shiftDy * tan(rightAlfa)
		endif
	endif

	leftFrameOverhang	= bShowReveal * (overSizeLeft + gs_left_oversize + gs_tolerance_left) - SymbMid_LeftDx
	rightFrameOverhang	= bShowReveal * (overSizeRight + gs_right_oversize + gs_tolerance_right) - SymbMid_RightDx

	if WIDO_REVEAL_SIDE then
		gs_frame_ovhg_left_in	= -fx1L - leftWallholeWidth + leftFrameOverhang + not(bShowReveal) * gs_left_oversize
		gs_frame_ovhg_left_out	= -fx2L - leftWallholeWidth + leftFrameOverhang + not(bShowReveal) * gs_left_oversize

		gs_frame_ovhg_right_in	= fx1R - rightWallholeWidth + rightFrameOverhang + not(bShowReveal) * gs_right_oversize
		gs_frame_ovhg_right_out	= fx2R - rightWallholeWidth + rightFrameOverhang + not(bShowReveal) * gs_right_oversize
	else
		gs_frame_ovhg_left_out	= -fx1L - leftWallholeWidth + leftFrameOverhang + not(bShowReveal) * gs_left_oversize
		gs_frame_ovhg_left_in	= -fx2L - leftWallholeWidth + leftFrameOverhang + not(bShowReveal) * gs_left_oversize

		gs_frame_ovhg_right_out	= fx1R - rightWallholeWidth + rightFrameOverhang + not(bShowReveal) * gs_right_oversize
		gs_frame_ovhg_right_in	= fx2R - rightWallholeWidth + rightFrameOverhang + not(bShowReveal) * gs_right_oversize
	endif
endif

goto "MasterScriptEnd"


"MSParametersCalculation":
! =============================================================================
! Minimal Space Parameters
! =============================================================================
	bSlidingSingle = 0
	bSlidingDouble = 0
	bSimplifyMSPoly = 0

	if	gs_leaf_optype_m = LEAF_1L_POCKET | \
		gs_leaf_optype_m = LEAF_1L_POCKET_M | \
		gs_leaf_optype_m = LEAF_1L_EXTERNAL_SLIDING | \
		gs_leaf_optype_m = LEAF_1L_EXTERNAL_SLIDING_M | \
		gs_leaf_optype_m = LEAF_2L_1SLIDING | \
		gs_leaf_optype_m = LEAF_2L_1SLIDING_M | \
		gs_leaf_optype_m = LEAF_2L_2SLIDING | \
		gs_leaf_optype_m = LEAF_2L_2SLIDING_M | \
		gs_leaf_optype_m = LEAF_3L_2SLIDING | \
		gs_leaf_optype_m = LEAF_3L_2SLIDING_M | \
		gs_leaf_optype_m = LEAF_4L_3SLIDING	| \
		gs_leaf_optype_m = LEAF_4L_3SLIDING_M then	bSlidingSingle = 1

	if	gs_leaf_optype_m = LEAF_2L_POCKET | \
		gs_leaf_optype_m = LEAF_2L_EXTERNAL_SLIDING | \
		gs_leaf_optype_m = LEAF_4L_2SLIDING | \
		gs_leaf_optype_m = LEAF_4L_4SLIDING | \
		gs_leaf_optype_m = LEAF_4L_4SLIDING_M | \
		gs_leaf_optype_m = LEAF_2L_MULTIPANEL then bSlidingDouble = 1

	ms_trimWidth_in = gs_trim_width_in * gs_trim_inside
	ms_trimWidth_out = gs_trim_width_out * gs_trim_outside
	ms_trimWidth = max(ms_trimWidth_in, ms_trimWidth_out)

	unitMSWidth = (ac_unit_width - gs_tolerance_left - gs_tolerance_right)/2
	egressOffset = unitMSWidth + gs_tolerance_left - (gs_sidelight_width_right * gs_sidelight_right) - (gs_frame_width_right * not(gs_sidelight_right)) - gs_ds_w
	EgressMSWidth = ac_egress_width

	ms_fthk = gs_fthk
	ms_frame_wthk = gs_frame_wthk
	if gs_sidelight_left then
		ms_leftOffset = gs_frame_width + gs_ds_w
	else
		ms_leftOffset = gs_frame_width_left + gs_ds_w
	endif
	if gs_sidelight_right then
		ms_rightOffset = gs_frame_width + gs_ds_w
	else
		ms_rightOffset = gs_frame_width_right + gs_ds_w
	endif

	! Corrections ------------------------------------------------------------------

	if gs_sectgar | gs_highspeedgar then
		ms_rightOffset = 0! gs_tolerance_right + gs_frame_width_right
		ms_leftOffset = 0! gs_tolerance_left + gs_frame_width_left
		ms_fthk = 0
		ms_frame_wthk = 0
	endif

	if	gs_leaf_optype_m = LEAF_1L_PIVOT | \
		gs_leaf_optype_m = LEAF_1L_PIVOT_M then
		EgressMSWidth = ac_egress_width + gs_sliding_fixpanel_width_right
	endif

	if bSlidingSingle | bSlidingDouble | gs_leaf_optype_m = LEAF_1L_MULTIPANEL_M then
		egressOffset	= egressOffset - gs_sliding_fixpanel_width_right
		ms_rightOffset = 0
	endif

	if	gs_leaf_optype_m = LEAF_1L_EXTERNAL_SLIDING | \
		gs_leaf_optype_m = LEAF_1L_EXTERNAL_SLIDING_M | \
		gs_leaf_optype_m = LEAF_2L_EXTERNAL_SLIDING then
		EgressMSWidth = ac_wallhole_width
		egressOffset = EgressMSWidth/2
		ms_leftOffset = 0
		ms_rightOffset = 0
	endif

	if	gs_leaf_optype_m =  LEAF_1L_POCKET | \
		gs_leaf_optype_m =  LEAF_1L_POCKET_M then
		if gs_pocket_door_frame then
			ms_rightOffset = gs_frame_width_right*gs_pocket_door_frame
			ms_leftOffset = gs_frame_width_left*gs_pocket_door_frame
			egressOffset = ac_wallhole_width/2 - gs_frame_width_right*gs_pocket_door_frame - gs_tolerance_right
		else
			EgressMSWidth = ac_wallhole_width  - 2*ms_trimWidth
			egressOffset = ac_wallhole_width /2 - ms_trimWidth
			ms_leftOffset = ms_trimWidth
			ms_rightOffset = ms_trimWidth
		endif
	endif

	if	gs_leaf_optype_m =  LEAF_2L_POCKET then
		if gs_pocket_door_frame then
			ms_rightOffset = gs_frame_width_right*gs_pocket_door_frame
			ms_leftOffset = gs_frame_width_left*gs_pocket_door_frame
			egressOffset = ac_wallhole_width/2 - gs_frame_width_right*gs_pocket_door_frame - gs_tolerance_right
		else
			EgressMSWidth = ac_wallhole_width  - 2*ms_trimWidth
			egressOffset = ac_wallhole_width/2 - ms_trimWidth
			ms_leftOffset = ms_trimWidth
			ms_rightOffset = ms_trimWidth
		endif
	endif

	if bSlidingDouble or bSlidingSingle then
		msOppositeSideWidth2 = msOpeningSideWidth2
		msOppositeSideWidth1 = msOpeningSideWidth1
	endif
return


"MasterScriptEnd":

