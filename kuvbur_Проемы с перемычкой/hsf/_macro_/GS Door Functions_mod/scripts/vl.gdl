

! =============================================================================
! Hide All parameters list
! =============================================================================
hideparameter all


! =============================================================================
! Dimension Link
! =============================================================================

! Egress Size -> Leaf Size difference
leafDLeft		= gs_ds_w + gs_rebate_width + gs_sliding_fixpanel_width_left
leafDRight		= gs_ds_w + gs_rebate_width + gs_sliding_fixpanel_width_right
leafDUpper		= gs_ds_w + gs_rebate_width
leafDLower		= 0

! Egress Size -> Unit Size difference
gosub "unitSizeDiff"

! Unit Size -> Wallhole Size difference
wallholeDLeft	= gs_tolerance_left  + gs_unit_extra_left
wallholeDRight	= gs_tolerance_right  + gs_unit_extra_right
wallholeDUpper	= gs_tolerance_upper + gs_unit_extra_upper + VentilationProfileHeight * isVentilationOverFrame + _includeBoxHeight
wallholeDLower	= gs_tolerance_lower

! Reveal Size -> Wallhole Size difference
revealDLeft		= gs_reveal_left
revealDRight	= gs_reveal_right
revealDUpper	= gs_reveal_top + _includeBoxHeight
revealDLower	= gs_reveal_bottom

if gs_pocket then
	leafDLeftMod	= (ac_leaf_width - ac_egress_width) / 2
	leafDRightMod	= (ac_leaf_width - ac_egress_width) / 2
else
	leafDLeftMod	= leafDLeft
	leafDRightMod	= leafDRight
endif


! =============================================================================
! Wallhole Structure
! =============================================================================

if bDoorWithSidelightSupport & not(bTShapedOpening) then
	values "iWallContourLineSl" 1,2,3,4
endif

call "WallholeStructure_kmod" parameters all A = A, B = B,
	refWidth 				= refWidth,
	leftWidth				= leftWidth,
	rightWidth				= rightWidth,
	openingHeight			= openingHeight,
	iRevealType				= iRevealType,
	iSillRevealType			= iSillRevealType,
	iBoardRevealType		= iBoardRevealType,
	leftWallholeRevealPnts	= leftWallholeRevealPnts,
	rightWallholeRevealPnts	= rightWallholeRevealPnts,
	iRevealPointsIdx		= iRevealPointsIdx,
	iClosureType			= iClosureType,
! --- Function Control Parameters
	bEnablePlasterLeftIn	= bEnablePlasterLeftIn,
	bEnablePlasterLeftOut	= bEnablePlasterLeftOut,
	bEnablePlasterRightIn	= bEnablePlasterRightIn,
	bEnablePlasterRightOut	= bEnablePlasterRightOut,
	bEnablePlasterTopIn		= bEnablePlasterTopIn,
	bEnablePlasterTopOut	= bEnablePlasterTopOut,
	bEnablePlasterBottomIn	= bEnablePlasterBottomIn,
	bEnablePlasterBottomOut	= bEnablePlasterBottomOut,
	bEnableParapetInset		= bEnableParapetInset,
	bEnableMasonryArch		= bEnableMasonryArch,
	bEnableFaschen			= bEnableFaschen,
	gs_RevealTypeEnable		= gs_RevealTypeEnable,
	gs_ClosureTypeEnable	= gs_ClosureTypeEnable,
	bDisableTradDutchClosure= bDisableTradDutchClosure,
	bEnableWallContourHiddenLine	= bEnableWallContourHiddenLine,
! --- Macro Control Parameters
	isWindow				= 0,
	iWindowShape			= iWindowShape,
	defaultSillDepth		= defaultSillDepth,
! --- Corner Functions
	bLeftCornerFunction		= bLeftCornerFunction,
!	leftCornerAngle			= leftCornerAngle,
!	leftConnWallThk			= leftConnWallThk,
	bRightCornerFunction	= bRightCornerFunction,
!	rightCornerAngle		= rightCornerAngle,
!	rightConnWallThk		= rightConnWallThk,
! --- Casing
	bDrawOutsideTrim		= bDrawOutsideTrim,
	bDrawInsideTrim			= bDrawInsideTrim,
! --- sunShade wallhole size modification
	includeBoxHeight		= _includeBoxHeight,
! --- ventialtion over frame wallhole size modification
	includeVentilationHeight		= VentilationProfileHeight * isVentilationOverFrame,
! --- String Resources
	stRevealTypes					= stRevealTypes,
	stRevealTypesBottom				= stRevealTypesBottom,
	stRevealAngleEditBy				= stRevealAngleEditBy,
	stClosureTypes					= stClosureTypes,
	stWallContourLine				= stWallContourLine,
	stCavityClosureSide				= stCavityClosureSide,
	stCavityClosureTurnDir			= stCavityClosureTurnDir,
	stDutchClosureToSide			= stDutchClosureToSide,
	stCavityClosureEditedJambSide	= stCavityClosureEditedJambSide,
	stCavityClosureEditedWallSide	= stCavityClosureEditedWallSide,
	stCavityClosureEditedSkinNumber	= stCavityClosureEditedSkinNumber,
	stCavityClosureTurnInThickness	= stCavityClosureTurnInThickness,
	stCavityClosureHatchOrientation	= stCavityClosureHatchOrientation,
	stMasonryArchTypes				= stMasonryArchTypes,
	stMasonryArchStructure			= stMasonryArchStructure,
	gs_faschen_type					= gs_faschen_type,
! --- Override Tolerances in case of Pocket Doors
	gs_tolerance_left	= gs_tolerance_left + gs_unit_extra_left,
	gs_tolerance_right	= gs_tolerance_right + gs_unit_extra_right,
	gs_tolerance_upper	= gs_tolerance_upper + gs_unit_extra_upper,
! --- Dimension Link Parameters
	unitDLeft	= unitDLeft,
	unitDRight	= unitDRight,
	unitDUpper	= unitDUpper,
	unitDLower	= unitDLower,
	leafDLeft	= leafDLeftMod,
	leafDRight	= leafDRightMod,
	leafDUpper	= leafDUpper,
	leafDLower	= leafDLower


! =============================================================================
! Wall Contour Line Parameter Handling
! =============================================================================
!
!if not(bEnableSill | bEnableThreshold) then
!	lock "gs_wcont_hidden_line_out"
!	hideparameter "gs_wcont_hidden_line_out"
!endif
!if not(bEnableThreshold) then
!	lock "gs_wcont_hidden_line_in"
!	hideparameter "gs_wcont_hidden_line_in"
!endif
!

! =============================================================================
! Sunshade enable parameters
! =============================================================================

temp_gs_sunShade_typeEnable = gs_sunShade_typeEnable

! Avalilable sunshade types:
! 1 - None (0)
! 2 - Decorative shutter (1)
! 4 - Opening shutter (2)
! 8 - Folding to Reveal shutter (3)
! 16 - Folding to Wall Face shutter (4)
! 32 - Sliding shutter (5)
! 64 - Rolling shutter (6)
! 128 - External venetian (7)
! 256 - Venetian in lintel (8)

gs_sunShade_typeEnable = 2 + 4 + 8 + 16 + 32 + 64

if bLeftCornerFunction | gs_stack_left | bRightCornerFunction | gs_stack_right then
	gs_sunShade_typeEnable = bitset (gs_sunShade_typeEnable , 3, 0)		! Folding to Reveal
	gs_sunShade_typeEnable = bitset (gs_sunShade_typeEnable , 4, 0)		! Folding to Wall Face
endif

if (bLeftCornerFunction | gs_stack_left) & (bRightCornerFunction | gs_stack_right) then
	gs_sunShade_typeEnable = bitset (gs_sunShade_typeEnable , 1, 0)		! Decorative
	gs_sunShade_typeEnable = bitset (gs_sunShade_typeEnable , 2, 0)		! Opening
	gs_sunShade_typeEnable = bitset (gs_sunShade_typeEnable , 5, 0)		! Sliding
endif

if iWindowShape > 0 then			! not rectangular
	gs_sunShade_typeEnable = bitset (gs_sunShade_typeEnable , 3, 0)		! Folding to Reveal
	gs_sunShade_typeEnable = bitset (gs_sunShade_typeEnable , 4, 0)		! Folding to Wall Face
	gs_sunShade_typeEnable = bitset (gs_sunShade_typeEnable , 6, 0)		! Rolling
endif

if gs_sunShade_typeDisableByObject > 0 then
	for i = 1 to 8
		if bittest (gs_sunShade_typeDisableByObject, i) then gs_sunShade_typeEnable = bitset (gs_sunShade_typeEnable, i, 0)
	next i
endif

gs_sunShade_bChangeEnabledTypes = 0
if abs(gs_sunShade_typeEnable - temp_gs_sunShade_typeEnable) > EPS then gs_sunShade_bChangeEnabledTypes = 1

if gs_sunShade_typeEnable = 0 then
	gs_sunShade_typeEnable = 2		! a default value is needed to UI in this case too

	bSunshade = 0
	parameters bSunshade = bSunshade
	lock "bSunshade"
endif

! Available placement types
! 1 - On facade(0)
! 2 - On window(1)
! 4 - Behind facade(2)

gs_shutRoll_placementEnable	= 1 + 2 + 4

gs_shutLam_placementEnable	= 1 + 2 + 4

if gs_sunShade_iType = 6 and gs_shutRoll_iPlacement = 3 then
	if iRevealType = REVEAL_POSITIVE | iRevealType = REVEAL_SLANTED | iRevealType = REVEAL_HISTORIC | (iRevealType = REVEAL_DOUBLE & (iSillRevealType = 2 | gs_reveal_doubleOuterTypeInt = 3)) then
		values "gs_shutRoll_distFromHead" range [(gs_reveal_uniform) * gs_reveal_right + not(gs_reveal_uniform) * gs_reveal_top, )
	else
		values "gs_shutRoll_distFromHead" range [0, )
	endif
endif


! =============================================================================
! Hide Sidelight Sill and Board Switches
! =============================================================================

if bDoorWithSidelightSupport & gs_frame_style_m = FRAME_STYLE_WRAPPED_EXTRUSION then
	lock	"gs_sill_outside_sl_left",
			"gs_sill_outside_sl_right",
			"gs_board_inside_sl_left",
			"gs_board_inside_sl_right"
endif


! =============================================================================
! Hide Threshold Parameter
! =============================================================================

if gs_TresholdTypeEnable = 0 then
	lock "bThreshold"
endif


! =============================================================================
! Wallhole Framing
! =============================================================================

lock "gs_sill_pen_3D"
hideparameter "gs_sill_pen_3D"

call "WallholeFraming_kmod" parameters all A = A,
	iRevealType				= iRevealType,
	leftWallFrameRevealPnts = leftWallFrameRevealPnts,
	rightWallFrameRevealPnts= rightWallFrameRevealPnts,
	iRevealPointsIdx		= iRevealPointsIdx,
! --- Function Control Parameters
	bEnableSill				= bEnableSill,
	bEnableBoard			= bEnableBoard,
	bEnableThreshold		= (bEnableThreshold | bForceToShowThresholdUI),
	bEnableCasing			= bEnableCasing,
	bEnableShutter			= bEnableShutter,
	bEnableCustomCornerLeft		= bEnableCustomCornerLeft,
	bEnableCustomCornerRight	= bEnableCustomCornerRight,
	gs_SillTypeEnable			= gs_SillTypeEnable,
	gs_TresholdTypeEnable		= gs_TresholdTypeEnable,
	bBoardInPolyWall			= bBoardInPolyWall,
	bDoorWithSidelightSupport	= bDoorWithSidelightSupport,
! --- Macro Control Parameters
	isWindow				= 0,
	iWindowShape			= iWindowShape,
	iFrameStyle				= gs_frame_style_m,
	gs_casing_nor			= 0,
! --- Corner Functions
	bLeftCornerFunction		= bLeftCornerFunction,
!	leftCornerAngle			= leftCornerAngle,
!	leftConnWallThk			= leftConnWallThk,
	bRightCornerFunction	= bRightCornerFunction,
!	rightCornerAngle		= rightCornerAngle,
!	rightConnWallThk		= rightConnWallThk,
! --- Sill
	gs_sill_outside			= gs_sill_outside,

	gs_fthk					= gs_fthk,
! --- turn plaster
	gs_turn_plaster_show_3D	= gs_turn_plaster_show_3D,
	thkPlasterAtSillLeft	= thkPlasterAtSillLeft,
	thkPlasterAtSillRight	= thkPlasterAtSillRight,
	thkPlasterAtSillTop		= thkPlasterAtSillTop,
	thkPlasterAtSillBottom	= thkPlasterAtSillBottom,
	thkPlasterAtBoardLeft	= thkPlasterAtBoardLeft,
	thkPlasterAtBoardRight	= thkPlasterAtBoardRight,
	thkPlasterAtBoardTop	= thkPlasterAtBoardTop,
	thkPlasterAtBoardBottom	= thkPlasterAtBoardBottom,
! --- Sunshade parameters
	gs_sunShade_typeEnable	= gs_sunShade_typeEnable,
	gs_sunShade_bChangeEnabledTypes	= gs_sunShade_bChangeEnabledTypes,
	gs_shutRoll_placementEnable	= gs_shutRoll_placementEnable,
	gs_shutLam_placementEnable	= gs_shutLam_placementEnable,
! --- Casing
	gs_trim_below_board		= gs_trim_below_board,
	bCasingBottomOutside	= bCasingBottomOutside,
! --- String Resources
	stSillTypes				= stSillTypes,
	stCasingType			= stCasingType,
	stCasingHeadType		= stCasingHeadType,
	stArchitraveCapitalType	= stArchitraveCapitalType,
	stThresholdTypes		= stThresholdTypes,
	stBsilldetlevel 		= stBsilldetlevel,
	stBoardInPolyWall		= stBoardInPolyWall,

	stSunShadeTypes			= stSunShadeTypes,
	stShutterPanelPos		= stShutterPanelPos,
	stFoldingShutterStacking= stFoldingShutterStacking,
	stSlidingShutterCover	= stSlidingShutterCover,
	stShutterPanelTypes		= stShutterPanelTypes,
	stShutRollPlacement		= stShutRollPlacement,
	stShutRollBoxType		= stShutRollBoxType,
	stShutRollBoxDefaultSize= stShutRollBoxDefaultSize,
	stShutRollRailPos		= stShutRollRailPos,
	stShutLamPlacement		= stShutLamPlacement,
	stShutLamRailPos		= stShutLamRailPos


! =============================================================================
! Demolition / New construction
! =============================================================================

if gs_bFills = 0 then
	lock "iTypeDemolitionFill"
endif

if gs_bShowDemolitionPar then
	values{2} "iTypeDemolitionFill" 	RENOVATION_FILL_EXIST, `Нет`,
										RENOVATION_FILL_DEMOLISHED, `Демонтаж`,
										RENOVATION_FILL_NEW, `Новая Конструкция - Пустой Символ`,
										RENOVATION_FILL_NEW_FULL, `Новая Конструкция - Полный Символ`

	if iTypeDemolitionFill = RENOVATION_FILL_DEMOLISHED then
		lock "gs_wallhole_fill"
		lock "gs_wallhole_pen_fg"
		lock "gs_wallhole_pen_bg"
	endif

	if	iTypeDemolitionFill = RENOVATION_FILL_NEW |\
		iTypeDemolitionFill = RENOVATION_FILL_NEW_FULL then

		lock "gs_wallhole_fill"
		lock "gs_wallhole_pen_fg"
		lock "gs_wallhole_pen_bg"
	endif
endif

if gs_leaf_optype_m = LEAF_GAR_1L_UP_SLIDING | gs_leaf_optype_m = LEAF_GAR_2L_SIDE_HUNG then
	if not(gs_bShowNewOnCC) then
		hideparameter	"gs_new_symb_fill",
						"gs_new_symb_pen_Fg",
						"gs_new_symb_pen_bg",
						"gs_new_symb_width_r",
						"gs_new_symb_width_l"
	endif
endif


! =============================================================================
! 2D Detail Level
! =============================================================================

if gs_2DDetEnable = 0 then
			values{2} "iDWDet2D" 	DETLEVEL_DW2D_MVO,		`по ПМВ`,
									DETLEVEL_DW2D_SCSENS,	`Зависит от Масштаба`,
									DETLEVEL_DW2D_50,		`1:50`,
									DETLEVEL_DW2D_100,		`1:100`,
									DETLEVEL_DW2D_200,		`1:200`,
									DETLEVEL_DW2D_OFF,		`Откл.`
!			values "gs_detlevel_2D_m"         1, 2, 3, 6, 7  !
else

	dim n2DScaleValueMask[]
	dim n2DScaleValueMask_m[]

	i=1
	if bittest( gs_2DDetEnable, 8) then                                              ! by MVO, 256
				n2DScaleValueMask[i] = stDetail2D[1]
				n2DScaleValueMask_m[i] = DETLEVEL_DW2D_MVO
				i = i + 1
	endif
	if bittest( gs_2DDetEnable, 0) then                                              ! Scale Sensitive in Value list, 1
				n2DScaleValueMask[i] = stDetail2D[2]
				n2DScaleValueMask_m[i] = DETLEVEL_DW2D_SCSENS
				i = i + 1
	endif
	if bittest( gs_2DDetEnable, 7) then                                              ! 1:20 in Value list,128
				n2DScaleValueMask[i] = stDetail2D[9]
				n2DScaleValueMask_m[i] = DETLEVEL_DW2D_20
				i = i + 1
	endif
	if bittest( gs_2DDetEnable, 1) then                                              ! 1:50 in Value list,2
				n2DScaleValueMask[i] = stDetail2D[3]
				n2DScaleValueMask_m[i] = DETLEVEL_DW2D_50
				i = i + 1
	endif
	if bittest( gs_2DDetEnable, 2) then                                              ! 1:100 in Value list,4
				n2DScaleValueMask[i] = stDetail2D[4]
				n2DScaleValueMask_m[i] = DETLEVEL_DW2D_100
				i = i + 1
	endif
	if bittest( gs_2DDetEnable, 3) then                                              ! 1:200 in Value list,8
				n2DScaleValueMask[i] = stDetail2D[5]
				n2DScaleValueMask_m[i] = DETLEVEL_DW2D_200
				i = i + 1
	endif
	if bittest( gs_2DDetEnable, 4) then                                              ! Off in Value list,16
				n2DScaleValueMask[i] = stDetail2D[6]
				n2DScaleValueMask_m[i] = DETLEVEL_DW2D_OFF
				i = i + 1
	endif
	if bittest( gs_2DDetEnable, 5) then                                              ! Chinese Simple in Value list,32
				n2DScaleValueMask[i] = stDetail2D[7]
				n2DScaleValueMask_m[i] = DETLEVEL_DW2D_CHISMPL
				i = i + 1
	endif
	if bittest( gs_2DDetEnable, 6) then                                              ! Chinese Detailed in Value list,64
				n2DScaleValueMask[i] = stDetail2D[8]
				n2DScaleValueMask_m[i] = DETLEVEL_DW2D_CHIDET
				i = i + 1
	endif

			values{2} "iDWDet2D"  n2DScaleValueMask_m, n2DScaleValueMask
!			values "gs_detlevel_2D_m"         n2DScaleValueMask_m
endif


! =============================================================================
! Show Reveal On Symbol
! =============================================================================

if bCanHaveReveal then
	values{2} "iRevealOnSymbol"	SHOWREV_MVO, stRevealOnSymbValues[1],
					SHOWREV_ALWAYS, stRevealOnSymbValues[2],
					SHOWREV_UPTO50, stRevealOnSymbValues[3],
					SHOWREV_UPTO100, stRevealOnSymbValues[4],
					SHOWREV_UPTO200, stRevealOnSymbValues[5],
					SHOWREV_NEVER, stRevealOnSymbValues[6]
					
else
	lock "iRevealOnSymbol"
	hideparameter "iRevealOnSymbol"
endif


! =============================================================================
! UI Support
! =============================================================================

if GLOB_UI_BUTTON_ID < 0 then
	parameters gs_ui_current_page = -GLOB_UI_BUTTON_ID
endif


! =============================================================================
! Door Frame
! =============================================================================

if gs_ds_thk < 0 then
	gs_ds_thk = 0
	parameters gs_ds_thk = 0
endif
if gs_ds_w < 0 then
	gs_ds_w = 0
	parameters gs_ds_w = 0
endif
if gs_rebate_width < 0 then
	gs_rebate_width = 0
	parameters gs_rebate_width = 0
endif

if gs_frame_wthk | gs_frame_style_m = FRAME_STYLE_WRAPPED_EXTRUSION then
	lock "gs_frame_thk"
	hideparameter "gs_frame_thk"

	if gs_pocket_leafs then
		if gs_pocket_door_frame then
			lock "gs_trim_width_in", "gs_trim_width_out"
			hideparameter "gs_trim_width_in", "gs_trim_width_out"
		endif
	else
		if gs_trim_inside | gs_trim_outside then
			lock "gs_trim_width_in", "gs_trim_width_out"
			hideparameter "gs_trim_width_in", "gs_trim_width_out"
		endif
	endif
endif
if gs_frame_style_m <> FRAME_STYLE_DOUBLE_REBATE then
	lock "gs_ds_thk", "gs_ds_w"
	hideparameter "gs_ds_thk", "gs_ds_w"
endif
if not(	gs_pivotdoor |\
		gs_slidingext |\
		gs_pocket |\
		gs_garage |\
		gs_highspeedgar |\
		bBombShelter) then

	if (gs_frame_style_m <> FRAME_STYLE_WRAPPED_EXTRUSION) then
		lock "gs_frame_oversize", "gs_frame_oversize_thk"
		hideparameter "gs_frame_oversize", "gs_frame_oversize_thk"
	else
		values "gs_frame_oversize_thk" range(0,]
	endif
endif
if not(isRebateWidth) then
	lock "gs_rebate_width"
	hideparameter "gs_rebate_width"
endif

if gs_frame_wthk then
	parameters	AC_wido_sill = 0,
				gs_wido_sill = 0
	lock	"AC_wido_sill",
			"gs_wido_sill"
endif


! =============================================================================
! Nominal Size
! =============================================================================

!bShowWHoleSizes	= 1
bShowUnitSizes		= 1
bShowEgressSizes	= 1
bShowLeafSizes		= 1

if	gs_leaf_optype_m = LEAF_1L_EXTERNAL_SLIDING		|\
	gs_leaf_optype_m = LEAF_1L_EXTERNAL_SLIDING_M	|\
	gs_leaf_optype_m = LEAF_2L_EXTERNAL_SLIDING		|\
	gs_leaf_optype_m = LEAF_1L_POCKET				|\
	gs_leaf_optype_m = LEAF_1L_POCKET_M				|\
	gs_leaf_optype_m = LEAF_2L_POCKET	then
	bShowUnitSizes		= 0
	bShowEgressSizes	= 0
endif

if	gs_pocket_door_frame | gs_pocket_frame then
	bShowUnitSizes		= 1
	if gs_pocket_door_frame then bShowEgressSizes	= 1
endif

if	gs_leaf_optype_m = LEAF_1L_EXTERNAL_SLIDING		|\
	gs_leaf_optype_m = LEAF_1L_EXTERNAL_SLIDING_M	|\
	gs_leaf_optype_m = LEAF_2L_EXTERNAL_SLIDING		|\
	gs_leaf_optype_m = LEAF_1L_MULTIPANEL			|\
	gs_leaf_optype_m = LEAF_1L_MULTIPANEL_M			|\
	gs_leaf_optype_m = LEAF_2L_MULTIPANEL			|\
	gs_leaf_optype_m = LEAF_GAR_1L_UP_AND_OVER	|\
	gs_leaf_optype_m = LEAF_GAR_1L_UP_SLIDING	|\
	gs_leaf_optype_m = LEAF_GAR_2L_SIDE_HUNG	|\
	gs_leaf_optype_m = LEAF_2L_1SLIDING		|\
	gs_leaf_optype_m = LEAF_2L_1SLIDING_M	|\
	gs_leaf_optype_m = LEAF_2L_2SLIDING		|\
	gs_leaf_optype_m = LEAF_2L_2SLIDING_M	|\
	gs_leaf_optype_m = LEAF_3L_2SLIDING		|\
	gs_leaf_optype_m = LEAF_3L_2SLIDING_M	|\
	gs_leaf_optype_m = LEAF_4L_2SLIDING		|\
	gs_leaf_optype_m = LEAF_4L_3SLIDING		|\
	gs_leaf_optype_m = LEAF_4L_3SLIDING_M	|\
	gs_leaf_optype_m = LEAF_4L_4SLIDING		|\
	gs_leaf_optype_m = LEAF_4L_4SLIDING_M	then

	bShowLeafSizes		= 0
endif

if not(bShowUnitSizes) then
	lock "gs_unit_nominal"
	hideparameter "ac_unit_width", "ac_unit_height", "gs_unit_nominal"
endif

if not(bShowEgressSizes) then
	lock "gs_egress_nominal"
	hideparameter "ac_egress_width", "ac_egress_height", "gs_egress_nominal"
endif

if not(bShowLeafSizes) then
	lock "gs_leaf_nominal"
	hideparameter "ac_leaf_width", "ac_leaf_height", "gs_leaf_nominal"
endif

if (bShowUnitSizes + bShowEgressSizes + bShowLeafSizes) = 0 then
	lock			"gs_retain_nominal_sizes"
	hideparameter	"gs_retain_nominal_sizes", "gs_wallhole_nominal"
endif

! =============================================================================
! Sidelight - Left
! =============================================================================

if gs_sidelight_left then
	values "gs_sidelight_width_left" range[0,]

	if GLOB_MODPAR_NAME = "gs_sidelight_width_left_half" then
		gs_sidelight_width_left = 2 * gs_sidelight_width_left_half
		parameters gs_sidelight_width_left = gs_sidelight_width_left
	else
		gs_sidelight_width_left_half = gs_sidelight_width_left / 2
		parameters gs_sidelight_width_left_half = gs_sidelight_width_left_half
	endif
	parameters gs_sidelight_width_left_orig = gs_sidelight_width_left
else
	lock "gs_sidelight_width_left"
	hideparameter "gs_sidelight_width_left"
endif


! =============================================================================
! Sidelight - Right
! =============================================================================

if gs_sidelight_right then
	values "gs_sidelight_width_right" range[0,]

	if GLOB_MODPAR_NAME = "gs_sidelight_width_right_half" then
		gs_sidelight_width_right = 2 * gs_sidelight_width_right_half
		parameters gs_sidelight_width_right = gs_sidelight_width_right
	else
		gs_sidelight_width_right_half = gs_sidelight_width_right / 2
		parameters gs_sidelight_width_right_half = gs_sidelight_width_right_half
	endif
	parameters gs_sidelight_width_right_orig = gs_sidelight_width_right
else
	lock "gs_sidelight_width_right"
	hideparameter "gs_sidelight_width_right"
endif


! =============================================================================
! Transom
! =============================================================================

if gs_door_transom then
	values "gs_transom_height" range[0,]
else
	lock "gs_transom_height"
	hideparameter "gs_transom_height"
endif


! =============================================================================
! Oversize
! =============================================================================

values "gs_left_oversize"  range[0,]
values "gs_right_oversize" range[0,]
values "gs_upper_oversize" range[0,]
values "gs_lower_oversize" range[0,]


! =============================================================================
! Nominal Size Chooser
! =============================================================================

bSetParams = 0

if GLOB_MODPAR_NAME = "gs_wallhole_nominal" | (gs_reveal_nominal & not(bCanHaveReveal)) then
	gs_wallhole_nominal	= 1
	gs_reveal_nominal	= 0
	gs_unit_nominal		= 0
	gs_egress_nominal	= 0
	gs_leaf_nominal		= 0

	bSetParams = 1
endif

if GLOB_MODPAR_NAME = "gs_reveal_nominal" then
	gs_wallhole_nominal	= 0
	gs_reveal_nominal	= 1
	gs_unit_nominal		= 0
	gs_egress_nominal	= 0
	gs_leaf_nominal		= 0

	bSetParams = 1
endif

if GLOB_MODPAR_NAME = "gs_unit_nominal" then
	gs_wallhole_nominal	= 0
	gs_reveal_nominal	= 0
	gs_unit_nominal		= 1
	gs_egress_nominal	= 0
	gs_leaf_nominal		= 0

	bSetParams = 1
endif

if GLOB_MODPAR_NAME = "gs_egress_nominal" then
	gs_wallhole_nominal	= 0
	gs_reveal_nominal	= 0
	gs_unit_nominal		= 0
	gs_egress_nominal	= 1
	gs_leaf_nominal		= 0

	bSetParams = 1
endif

if GLOB_MODPAR_NAME = "gs_leaf_nominal" then
	gs_wallhole_nominal	= 0
	gs_reveal_nominal	= 0
	gs_unit_nominal		= 0
	gs_egress_nominal	= 0
	gs_leaf_nominal		= 1

	bSetParams = 1
endif

if bSetParams then
	parameters	gs_nominal_size		= gs_wallhole_nominal + 2 * gs_reveal_nominal + 4 * gs_unit_nominal + 8 * gs_egress_nominal + 16 * gs_leaf_nominal,
				gs_wallhole_nominal	= gs_wallhole_nominal,
				gs_reveal_nominal	= gs_reveal_nominal,
				gs_unit_nominal		= gs_unit_nominal,
				gs_egress_nominal	= gs_egress_nominal,
				gs_leaf_nominal		= gs_leaf_nominal
endif


! =============================================================================

bRecalculate	= (	GLOB_MODPAR_NAME = "gs_rebate_width" |		\
					GLOB_MODPAR_NAME = "gs_frame_width" |		\
					GLOB_MODPAR_NAME = "gs_frame_width_left" |	\
					GLOB_MODPAR_NAME = "gs_frame_width_right" |	\
					GLOB_MODPAR_NAME = "gs_frame_width_upper" |	\
					GLOB_MODPAR_NAME = "gs_tolerance_left" |	\
					GLOB_MODPAR_NAME = "gs_tolerance_right" |	\
					GLOB_MODPAR_NAME = "gs_tolerance_upper" |	\
					GLOB_MODPAR_NAME = "gs_tolerance_lower" |	\
					GLOB_MODPAR_NAME = "gs_reveal_left" |		\
					GLOB_MODPAR_NAME = "gs_reveal_right" |		\
					GLOB_MODPAR_NAME = "gs_reveal_top" |		\
					(GLOB_MODPAR_NAME = "gs_pivotOffset" & gs_pivotdoor)|		\
					(GLOB_MODPAR_NAME = "gs_leaf_thk" & gs_pivotdoor)|		\
					GLOB_MODPAR_NAME = "gs_reveal_bottom"|	\
					GLOB_MODPAR_NAME = "bVentilationProfile"|	\
					GLOB_MODPAR_NAME = "iVentilationProfileType"|	\
					(GLOB_MODPAR_NAME = "VentilationProfileHeight" & isVentilationOverFrame) | \
					GLOB_MODPAR_NAME = "gs_sidelight_width_left" | \
					GLOB_MODPAR_NAME = "gs_sidelight_width_right")

bNominalSelectChanged	= (	GLOB_MODPAR_NAME = "gs_wallhole_nominal" |	\
							GLOB_MODPAR_NAME = "gs_reveal_nominal" |	\
							GLOB_MODPAR_NAME = "gs_unit_nominal" |		\
							GLOB_MODPAR_NAME = "gs_egress_nominal" |	\
							GLOB_MODPAR_NAME = "gs_leaf_nominal")

minWallholeWidth	= minUnitWidth	+ wallholeDLeft  + wallholeDRight
minWallholeHeight	= minUnitHeight + wallholeDUpper + wallholeDLower
minRevealWidth		= minUnitWidth	+ wallholeDLeft	 + wallholeDRight - revealDLeft  - revealDRight
minRevealHeight		= minUnitHeight + wallholeDUpper + wallholeDLower - revealDUpper - revealDLower
minEgressWidth		= minUnitWidth	- unitDLeft  - unitDRight
minEgressHeight		= minUnitHeight	- unitDUpper - unitDLower
minLeafWidth		= minEgressWidth  + leafDLeft  + leafDRight
minLeafHeight		= minEgressHeight + leafDUpper + leafDLower

bSizeModified	= 0
gosub 100		! Link Dimensions

if gs_wallhole_nominal then
	minWidth	= minWallholeWidth
	minHeight	= minWallholeHeight
endif
if gs_reveal_nominal then
	minWidth	= minRevealWidth
	minHeight	= minRevealHeight
endif
if gs_unit_nominal then
	minWidth	= minUnitWidth
	minHeight	= minUnitHeight
endif
if gs_egress_nominal then
	minWidth	= minEgressWidth
	minHeight	= minEgressHeight
endif
if gs_leaf_nominal then
	minWidth	= minLeafWidth
	minHeight	= minLeafHeight
endif


values "A" range [minWidth,]
values "B" range [minHeight,]

if bSizeModified | (not(gs_retain_nominal_sizes) & bNominalSelectChanged) then
	if gs_wallhole_nominal then
		if ac_wallhole_width < minWallholeWidth then
						ac_wallhole_width = minWallholeWidth
			parameters	ac_wallhole_width = minWallholeWidth
			bSizeModified = 1
		endif
		if ac_wallhole_height < minWallholeHeight then
						ac_wallhole_height = minWallholeHeight
			parameters	ac_wallhole_height = minWallholeHeight
			bSizeModified = 1
		endif

		parameters A = ac_wallhole_width,	B = ac_wallhole_height
	endif
	if gs_reveal_nominal then
		if ac_reveal_width < minRevealWidth then
						ac_reveal_width = minRevealWidth
			parameters	ac_reveal_width = minRevealWidth
			bSizeModified = 1
		endif
		if ac_reveal_height < minRevealHeight then
						ac_reveal_height = minRevealHeight
			parameters	ac_reveal_height = minRevealHeight
			bSizeModified = 1
		endif

		parameters A = ac_reveal_width,	B = ac_reveal_height
	endif
	if gs_unit_nominal then
		if ac_unit_width < minUnitWidth then
						ac_unit_width = minUnitWidth
			parameters	ac_unit_width = minUnitWidth
			bSizeModified = 1
		endif
		if ac_unit_height < minUnitHeight then
						ac_unit_height = minUnitHeight
			parameters	ac_unit_height = minUnitHeight
			bSizeModified = 1
		endif

		parameters A = ac_unit_width, B = ac_unit_height
	endif
	if gs_egress_nominal then
		if ac_egress_width < minEgressWidth then
						ac_egress_width = minEgressWidth
			parameters	ac_egress_width = minEgressWidth
			bSizeModified = 1
		endif
		if ac_egress_height < minEgressHeight then
						ac_egress_height = minEgressHeight
			parameters	ac_egress_height = minEgressHeight
			bSizeModified = 1
		endif

		parameters A = ac_egress_width, B = ac_egress_height
	endif
	if gs_leaf_nominal then
		if ac_leaf_width < minLeafWidth then
						ac_leaf_width = minLeafWidth
			parameters	ac_leaf_width = minLeafWidth
			bSizeModified = 1
		endif
		if ac_leaf_height < minLeafHeight then
						ac_leaf_height = minLeafHeight
			parameters	ac_leaf_height = minLeafHeight
			bSizeModified = 1
		endif

		parameters A = ac_leaf_width, B = ac_leaf_height
	endif
else
	if A < minWidth then
		A = minWidth
		parameters A = A
	endif
	if B < minHeight then
		B = minHeight
		parameters B = B
	endif

	if gs_wallhole_nominal then
		ac_wallhole_width	= A
		ac_wallhole_height	= B
		parameters ac_wallhole_width = A, ac_wallhole_height = B
	endif
	if gs_reveal_nominal then
		ac_reveal_width  = A
		ac_reveal_height = B
		parameters ac_reveal_width = A, ac_reveal_height = B
	endif
	if gs_unit_nominal then
		ac_unit_width	= A
		ac_unit_height	= B
		parameters ac_unit_width = A, ac_unit_height = B
	endif
	if gs_egress_nominal then
		ac_egress_width  = A
		ac_egress_height = B
		parameters ac_egress_width = A, ac_egress_height = B
	endif
	if gs_leaf_nominal then
		ac_leaf_width	= A
		ac_leaf_height	= B
		parameters ac_leaf_width = A, ac_leaf_height = B
	endif

	bRecalculate = 1
	gosub 100		! Link Dimensions
endif

if	not(bCanHaveReveal)	then
	lock "gs_reveal_nominal"
	hideparameter "gs_reveal_nominal", "ac_reveal_width", "ac_reveal_height"
endif


!! =============================================================================
!! Show / Hide 2D Fills
!! =============================================================================
!
!if not(gs_bFills) then	! Hide
!	hideparameter	"gs_fillFr",
!					"gs_penFr_fg",
!					"gs_penFr_bg",
!					"gs_fillSash",
!					"gs_penSash_fg",
!					"gs_penSash_bg",
!					"gs_fillLeaf",
!					"gs_penLeaf_fg",
!					"gs_penLeaf_bg",
!					"gs_wallhole_fill",
!					"gs_wallhole_pen_fg",
!					"gs_wallhole_pen_bg",
!					"gs_sill_fill",
!					"gs_sill_pen_fg",
!					"gs_sill_pen_bg",
!					"gs_board_fill",
!					"gs_board_pen_fg",
!					"gs_board_pen_bg",
!					"gs_treshold_fill",
!					"gs_treshold_pen_fg",
!					"gs_treshold_pen_bg",
!					"gs_trim_fill_in",
!					"gs_trim_pen_fg_in",
!					"gs_trim_pen_bg_in",
!					"gs_trim_fill_out",
!					"gs_trim_pen_fg_out",
!					"gs_trim_pen_bg_out",
!					"gs_masonry_arch_fill",
!					"gs_masonry_arch_pen_fg",
!					"gs_masonry_arch_pen_bg",
!					"gs_sunShade_cutFillType",
!					"gs_sunShade_cutFillPen",
!					"gs_sunShade_cutFillBackPen"
!
!	lock	"gs_fillFr",
!			"gs_penFr_fg",
!			"gs_penFr_bg",
!			"gs_fillSash",
!			"gs_penSash_fg",
!			"gs_penSash_bg",
!			"gs_fillLeaf",
!			"gs_penLeaf_fg",
!			"gs_penLeaf_bg",
!			"gs_wallhole_fill",
!			"gs_wallhole_pen_fg",
!			"gs_wallhole_pen_bg",
!			"gs_sill_fill",
!			"gs_sill_pen_fg",
!			"gs_sill_pen_bg",
!			"gs_board_fill",
!			"gs_board_pen_fg",
!			"gs_board_pen_bg",
!			"gs_treshold_fill",
!			"gs_treshold_pen_fg",
!			"gs_treshold_pen_bg",
!			"gs_trim_fill_in",
!			"gs_trim_pen_fg_in",
!			"gs_trim_pen_bg_in",
!			"gs_trim_fill_out",
!			"gs_trim_pen_fg_out",
!			"gs_trim_pen_bg_out",
!			"gs_masonry_arch_fill",
!			"gs_masonry_arch_pen_fg",
!			"gs_masonry_arch_pen_bg",
!			"gs_sunShade_cutFillType",
!			"gs_sunShade_cutFillPen",
!			"gs_sunShade_cutFillBackPen"
!
!	if bDoorWithSidelightSupport then
!		hideparameter	"gs_wallhole_fill_sl",
!						"gs_wallhole_pen_sl_fg",
!						"gs_wallhole_pen_sl_bg"
!		lock	"gs_wallhole_fill_sl",
!				"gs_wallhole_pen_sl_fg",
!				"gs_wallhole_pen_sl_bg"
!	endif
!endif


!! =============================================================================
!! UK Listing Parameters
!! =============================================================================
!
!if gs_show_UKListParams then
!	if bEnableNEDFireRating then
!		values "gs_list_firerating"			`Нет`, `Самозакрывающаяся`, `30 минут`, `60 минут`, `30 минут + самозакрывающаяся`, `60 минут + самозакрывающаяся`, CUSTOM
!
!		if GLOB_MODPAR_NAME = "gs_list_firerating" then
!			iNEDFireRating = 0
!			if gs_list_firerating = `Самозакрывающаяся` then iNEDFireRating = 1
!			if gs_list_firerating = `30 минут` then iNEDFireRating = 2
!			if gs_list_firerating = `60 минут` then iNEDFireRating = 3
!			if gs_list_firerating = `30 минут + самозакрывающаяся` then iNEDFireRating = 4
!			if gs_list_firerating = `60 минут + самозакрывающаяся` then iNEDFireRating = 5
!			parameters iNEDFireRating = iNEDFireRating
!		else
!			if iNEDFireRating = 1 then gs_list_firerating = `Самозакрывающаяся`
!			if iNEDFireRating = 2 then gs_list_firerating = `30 минут`
!			if iNEDFireRating = 3 then gs_list_firerating = `60 минут`
!			if iNEDFireRating = 4 then gs_list_firerating = `30 минут + самозакрывающаяся`
!			if iNEDFireRating = 5 then gs_list_firerating = `60 минут + самозакрывающаяся`
!			parameters gs_list_firerating = gs_list_firerating
!		endif
!	else
!		values "gs_list_firerating"			`Нет`, `FS30`, `FD30SC`, `FS30SC`, `FS60`, `FD60SC`, `FS60SC`, CUSTOM
!	endif
!	values "gs_list_acousticrating"		`Нет`, `32 dB/Rw`, `35 dB/Rw`, `38 dB/Rw`, CUSTOM
!	values "gs_list_finish"				`Нет`, `Облицовка`, `Поливинилхлорид`, `Полированная Сталь`, CUSTOM
!	values "gs_list_frametype"			`Нет`, `Сталь`, `Алюминий`, `Древесина`, CUSTOM
!	values "gs_list_firesignage"		`Нет`, `FDKS`, `FDKLS`, `AFDKC`, CUSTOM
!	values "gs_list_visionpanel_type"	stVisionPanelTypes
!
!endif
!
!
!! ====================================================
!! 				Door opens to Zone
!! ====================================================
!
!values "gs_list_location_as" stLocationAs
!
!if gs_list_location_as <> stLocationAs[3] then	! not Custom
!	roomname	= ""
!	roomnumber	= ""
!
!
!	catname = "" : code = ""
!	name = ""	: nr = ""
!	catname2 = "" : code2 = ""
!	name2 = "" 	: nr2 = ""
!	rrr = request("Zone_relations","",catname,code,name,nr,catname2,code2,name2,nr2)
!
!	if rrr <> 0 then
!
!		outDir = 0
!		zzz=REQUEST ("WINDOW_DOOR_ZONE_RELEV", "", outDir)
!
!		If rrr=8 then
!				if outDir = 1 then
!					roomname=name
!					roomnumber=nr
!				else
!					roomname=name2
!					roomnumber=nr2
!				endif
!			else
!				if rrr=4 then !this reports if only one zone
!					if outDir = 1 then
!						roomname=name
!						roomnumber=nr
!					else
!						roomname=name!nullStr
!						roomnumber=nr
!					endif
!				endif
!		endif
!	endif
!
!	if gs_list_location_as = stLocationAs[1] then
!		parameters gs_list_location = roomname
!		lock "gs_list_location"
!	endif
!
!	if gs_list_location_as = stLocationAs[2] then
!		parameters gs_list_location = roomnumber
!		lock "gs_list_location"
!	endif
!
!endif
!
! =============================================================================
! Minimal Space parameter cotrol
! =============================================================================

gosub "MSParametersCalculation"	! recalculate MS parameters

call "dw_minimalspace_kmod" parameters A 					= A,
								B 					= B,
								ac_wallhole_width 	= ac_wallhole_width,
								EgressMSWidth 		= EgressMSWidth,
								egressOffset 		= egressOffset,
								msOpeningSideWidth2 	= msOpeningSideWidth2,
								msOpeningSideWidth1 	= msOpeningSideWidth1,
								ms_openingSDepth 	= ms_openingSDepth,
								msOppositeSideWidth2 	= msOppositeSideWidth2,
								msOppositeSideWidth1 	= msOppositeSideWidth1,
								ms_oppositeSDepth 	= ms_oppositeSDepth,
								ms_slidingWidth 	= ms_slidingWidth,
								ac_unit_width 		= ac_unit_width,
								gs_opside_list 		= gs_opside_list,
								gs_opside_list_m 	= gs_opside_list_m,
								bSlidingSingle 		= bSlidingSingle,
								bSlidingDouble 		= bSlidingDouble,
								gs_leaf_optype_m	= gs_leaf_optype_m


! =============================================================================
! Opline Parameters
! =============================================================================


call "OpeningOptions_kmod" parameters all	bWindow = 0,
										iLineShapeCategory			= iLineShapeCategory,
										iLineShapeSwingEnable		= iLineShapeSwingEnable,
										iLineShapeSlidingEnable		= iLineShapeSlidingEnable,
										gs_leaf_optype_m			= gs_leaf_optype_m,
										bDoorWithSidelightSupport	= bDoorWithSidelightSupport,
										bEnableSecondaryOpLineTypes	= 0

! =============================================================================
end stDetail2D
! =============================================================================


100:
! =============================================================================
! Link Dimensions
! =============================================================================

	if GLOB_MODPAR_NAME = "ac_wallhole_width" | (gs_wallhole_nominal & bRecalculate) then
		if ac_wallhole_width < minWallholeWidth then
						ac_wallhole_width = minWallholeWidth
			parameters	ac_wallhole_width = minWallholeWidth
		endif

		ac_reveal_width	= ac_wallhole_width	- revealDLeft	- revealDRight
		ac_unit_width	= ac_wallhole_width	- wallholeDLeft	- wallholeDRight
		gosub "sidelightSizeModifier"
		if not(gs_pocket) then
			ac_leaf_width	= ac_egress_width	+ leafDLeft		+ leafDRight
		else
			if ac_leaf_width - ac_egress_width < 0 then
				ac_leaf_width	= ac_egress_width
			else
				if ac_leaf_width - 2 * ac_egress_width > 0 then
					ac_leaf_width	= 2 * ac_egress_width
				else
					ac_leaf_width	= ac_leaf_width
				endif
			endif
		endif

		parameters	ac_reveal_width	= ac_reveal_width,
					ac_unit_width	= ac_unit_width,
					ac_egress_width	= ac_egress_width,
					ac_leaf_width	= ac_leaf_width

		bSizeModified = 1
	endif
	if GLOB_MODPAR_NAME = "ac_reveal_width" | (gs_reveal_nominal & bRecalculate) then
		if ac_reveal_width < minRevealWidth then
						ac_reveal_width = minRevealWidth
			parameters	ac_reveal_width = minRevealWidth
		endif

		ac_wallhole_width	= ac_reveal_width	+ revealDLeft	+ revealDRight
		ac_unit_width		= ac_wallhole_width	- wallholeDLeft	- wallholeDRight
		gosub "sidelightSizeModifier"
		ac_leaf_width		= ac_egress_width	+ leafDLeft		+ leafDRight

		parameters	ac_wallhole_width	= ac_wallhole_width,
					ac_unit_width		= ac_unit_width,
					ac_egress_width		= ac_egress_width,
					ac_leaf_width		= ac_leaf_width

		bSizeModified = 1
	endif
	if GLOB_MODPAR_NAME = "ac_unit_width" | (gs_unit_nominal & bRecalculate) then
		if ac_unit_width < minUnitWidth then
						ac_unit_width = minUnitWidth
			parameters	ac_unit_width = minUnitWidth
		endif

		ac_wallhole_width	= ac_unit_width		+ wallholeDLeft	+ wallholeDRight
		ac_reveal_width		= ac_wallhole_width	- revealDLeft	- revealDRight
		gosub "sidelightSizeModifier"
		if not(gs_pocket) then
			ac_leaf_width	= ac_egress_width	+ leafDLeft		+ leafDRight
		else
			if ac_leaf_width - ac_egress_width + leafDLeft		+ leafDRight < 0 then
				ac_leaf_width	= ac_egress_width + leafDLeft		+ leafDRight
			else
				if ac_leaf_width - 2 * ac_egress_width > 0 then
					ac_leaf_width	= 2 * ac_egress_width
				else
					ac_leaf_width	= ac_leaf_width
				endif
			endif
		endif

		parameters	ac_wallhole_width	= ac_wallhole_width,
					ac_reveal_width		= ac_reveal_width,
					ac_egress_width		= ac_egress_width,
					ac_leaf_width		= ac_leaf_width

		bSizeModified = 1
	endif
	if GLOB_MODPAR_NAME = "ac_egress_width" | (gs_egress_nominal & bRecalculate) then
		if ac_egress_width < minEgressWidth then
						ac_egress_width = minEgressWidth
			parameters	ac_egress_width = minEgressWidth
		endif

		if GLOB_MODPAR_NAME = "ac_egress_width" then gosub "sidelightSizeModifierForLeafEgress"
		if not(gs_pocket) then
			ac_leaf_width	= ac_egress_width	+ leafDLeft		+ leafDRight
		else
			if ac_leaf_width - ac_egress_width < 0 then
				ac_leaf_width	= ac_egress_width
			else
				if ac_leaf_width - 2 * ac_egress_width > 0 then
					ac_leaf_width	= 2 * ac_egress_width
				else
					ac_leaf_width	= ac_leaf_width
				endif
			endif
		endif
		ac_unit_width		= ac_egress_width	+ unitDLeft		+ unitDRight
		ac_wallhole_width	= ac_unit_width		+ wallholeDLeft	+ wallholeDRight
		ac_reveal_width		= ac_wallhole_width	- revealDLeft	- revealDRight

		parameters	ac_wallhole_width	= ac_wallhole_width,
					ac_reveal_width		= ac_reveal_width,
					ac_unit_width		= ac_unit_width,
					ac_leaf_width		= ac_leaf_width

		bSizeModified = 1
	endif
	if GLOB_MODPAR_NAME = "ac_leaf_width" | (gs_leaf_nominal & bRecalculate) then
		if ac_leaf_width < minLeafWidth then
						ac_leaf_width = minLeafWidth
			parameters	ac_leaf_width = minLeafWidth
		endif

		if not(gs_pocket) then
			ac_egress_width		= ac_leaf_width		- leafDLeft		- leafDRight
		else
			if ac_leaf_width - ac_egress_width < 0 then
				ac_egress_width	= ac_leaf_width	- leafDLeft - leafDRight
			else
				if ac_leaf_width - 2 * ac_egress_width > 0 then
					ac_egress_width	= ac_leaf_width / 2
				else
					ac_egress_width	= ac_egress_width
				endif
			endif
		endif
		if GLOB_MODPAR_NAME = "ac_leaf_width" then gosub "sidelightSizeModifierForLeafEgress"
		ac_unit_width		= ac_egress_width	+ unitDLeft		+ unitDRight
		ac_wallhole_width	= ac_unit_width		+ wallholeDLeft	+ wallholeDRight
		ac_reveal_width		= ac_wallhole_width	- revealDLeft	- revealDRight

		parameters	ac_wallhole_width	= ac_wallhole_width,
					ac_reveal_width		= ac_reveal_width,
					ac_unit_width		= ac_unit_width,
					ac_egress_width		= ac_egress_width

		bSizeModified = 1
	endif

	! =============================================================================

	if GLOB_MODPAR_NAME = "ac_wallhole_height" | (gs_wallhole_nominal & bRecalculate) then
		if ac_wallhole_height < minWallholeHeight then
						ac_wallhole_height = minWallholeHeight
			parameters	ac_wallhole_height = minWallholeHeight
		endif

		ac_reveal_height	= ac_wallhole_height - revealDUpper		- revealDLower
		ac_unit_height		= ac_wallhole_height - wallholeDUpper	- wallholeDLower
		gosub "transomSizeModifier"
		ac_leaf_height		= ac_egress_height	 + leafDUpper		+ leafDLower

		parameters	ac_reveal_height	= ac_reveal_height,
					ac_unit_height		= ac_unit_height,
					ac_egress_height	= ac_egress_height,
					ac_leaf_height		= ac_leaf_height

		bSizeModified = 1
	endif
	if GLOB_MODPAR_NAME = "ac_reveal_height" | (gs_reveal_nominal & bRecalculate) then
		if ac_reveal_height < minRevealHeight then
						ac_reveal_height = minRevealHeight
			parameters	ac_reveal_height = minRevealHeight
		endif

		ac_wallhole_height	= ac_reveal_height	 + revealDUpper		+ revealDLower
		ac_unit_height		= ac_wallhole_height - wallholeDUpper	- wallholeDLower
		gosub "transomSizeModifier"
		ac_leaf_height		= ac_egress_height	 + leafDUpper		+ leafDLower

		parameters	ac_wallhole_height	= ac_wallhole_height,
					ac_unit_height		= ac_unit_height,
					ac_egress_height	= ac_egress_height,
					ac_leaf_height		= ac_leaf_height

		bSizeModified = 1
	endif
	if GLOB_MODPAR_NAME = "ac_unit_height" | (gs_unit_nominal & bRecalculate) then
		if ac_unit_height < minUnitHeight then
						ac_unit_height = minUnitHeight
			parameters	ac_unit_height = minUnitHeight
		endif

		ac_wallhole_height	= ac_unit_height	+ wallholeDUpper + wallholeDLower
		ac_reveal_height	= ac_wallhole_height - revealDUpper		- revealDLower
		gosub "transomSizeModifier"
		ac_leaf_height		= ac_egress_height	+ leafDUpper	 + leafDLower

		parameters	ac_wallhole_height	= ac_wallhole_height,
					ac_reveal_height	= ac_reveal_height,
					ac_egress_height	= ac_egress_height,
					ac_leaf_height		= ac_leaf_height

		bSizeModified = 1
	endif
	if GLOB_MODPAR_NAME = "ac_egress_height" | (gs_egress_nominal & bRecalculate) then
		if ac_egress_height < minEgressHeight then
						ac_egress_height = minEgressHeight
			parameters	ac_egress_height = minEgressHeight
		endif

		if GLOB_MODPAR_NAME = "ac_egress_height" then gosub "transomSizeModifierForLeafEgress"
		ac_leaf_height		= ac_egress_height	+ leafDUpper	 + leafDLower
		ac_unit_height		= ac_egress_height	+ unitDUpper	 + unitDLower
		ac_wallhole_height	= ac_unit_height	+ wallholeDUpper + wallholeDLower
		ac_reveal_height	= ac_wallhole_height - revealDUpper		- revealDLower

		parameters	ac_wallhole_height	= ac_wallhole_height,
					ac_reveal_height	= ac_reveal_height,
					ac_unit_height		= ac_unit_height,
					ac_leaf_height		= ac_leaf_height

		bSizeModified = 1
	endif
	if GLOB_MODPAR_NAME = "ac_leaf_height" | (gs_leaf_nominal & bRecalculate) then
		if ac_leaf_height < minLeafHeight then
						ac_leaf_height = minLeafHeight
			parameters	ac_leaf_height = minLeafHeight
		endif

		ac_egress_height	= ac_leaf_height	- leafDUpper	 - leafDLower
		if GLOB_MODPAR_NAME = "ac_leaf_height" then gosub "transomSizeModifierForLeafEgress"
		ac_unit_height		= ac_egress_height	+ unitDUpper	 + unitDLower
		ac_wallhole_height	= ac_unit_height	+ wallholeDUpper + wallholeDLower
		ac_reveal_height	= ac_wallhole_height - revealDUpper		- revealDLower

		parameters	ac_wallhole_height	= ac_wallhole_height,
					ac_reveal_height	= ac_reveal_height,
					ac_unit_height		= ac_unit_height,
					ac_egress_height	= ac_egress_height

		bSizeModified = 1
	endif
return


"sidelightSizeModifier":

	bChangeSidelightSize = 1

	if bChangeSidelightSize then
		if gs_sidelight_left then
			if gs_sidelight_right then
				! sidelights on both sides
				sidelightsTotalWidth = ac_unit_width - ac_egress_width - gs_ds_w * 2 - gs_sliding_fixpanel_width_left - gs_sliding_fixpanel_width_right
				if GLOB_MODPAR_NAME = "gs_sidelight_width_left" then
					if gs_sidelight_width_left > sidelightsTotalWidth - minSidelightWidthRight then gs_sidelight_width_left = sidelightsTotalWidth - minSidelightWidthRight
					if gs_sidelight_width_left < minSidelightWidthLeft then gs_sidelight_width_left = minSidelightWidthLeft
					gs_sidelight_width_right = sidelightsTotalWidth - gs_sidelight_width_left
				else
					if GLOB_MODPAR_NAME = "gs_sidelight_width_right" then
						if gs_sidelight_width_right > sidelightsTotalWidth - minSidelightWidthLeft then gs_sidelight_width_right = sidelightsTotalWidth - minSidelightWidthLeft
						if gs_sidelight_width_right < minSidelightWidthRight then gs_sidelight_width_right = minSidelightWidthRight
						gs_sidelight_width_left = sidelightsTotalWidth - gs_sidelight_width_right
					else
						if not(bSlidingOptypeChanged) then
							sideRatio = gs_sidelight_width_left / (gs_sidelight_width_left + gs_sidelight_width_right)
							gs_sidelight_width_left = sideRatio * sidelightsTotalWidth
							if gs_sidelight_width_left < minSidelightWidthLeft then gs_sidelight_width_left = minSidelightWidthLeft
							gs_sidelight_width_right = sidelightsTotalWidth - gs_sidelight_width_left
							if gs_sidelight_width_right < minSidelightWidthRight then gs_sidelight_width_right = minSidelightWidthRight
						endif
					endif
				endif
				parameters gs_sidelight_width_left = gs_sidelight_width_left, gs_sidelight_width_right = gs_sidelight_width_right
				ac_egress_width = ac_unit_width - gs_ds_w * 2 - gs_sidelight_width_left - gs_sidelight_width_right - gs_sliding_fixpanel_width_left - gs_sliding_fixpanel_width_right
			else
				! sidelight only on the left
				if	GLOB_MODPAR_NAME <> "gs_sidelight_width_left" &\
					not(bSlidingOptypeChanged) then
					gs_sidelight_width_left = ac_unit_width - unitDRight - ac_egress_width - gs_ds_w - gs_sliding_fixpanel_width_left
				endif
				if gs_sidelight_width_left < minSidelightWidthLeft then gs_sidelight_width_left = minSidelightWidthLeft
				parameters gs_sidelight_width_left = gs_sidelight_width_left
				ac_egress_width = ac_unit_width - gs_ds_w - gs_sidelight_width_left - unitDRight - gs_sliding_fixpanel_width_left
			endif
		else
			if gs_sidelight_right then
				! sidelight only on the right
				if	GLOB_MODPAR_NAME <> "gs_sidelight_width_right" &\
					not(bSlidingOptypeChanged) then
					gs_sidelight_width_right = ac_unit_width - unitDLeft - ac_egress_width - gs_ds_w - gs_sliding_fixpanel_width_right
				endif
				if gs_sidelight_width_right < minSidelightWidthRight then gs_sidelight_width_right = minSidelightWidthRight
				parameters gs_sidelight_width_right = gs_sidelight_width_right
				ac_egress_width = ac_unit_width - gs_ds_w - gs_sidelight_width_right - unitDLeft - gs_sliding_fixpanel_width_right
			else
				! no sidelight at all
				ac_egress_width	= ac_unit_width		- unitDLeft		- unitDRight
			endif
		endif
	else
		ac_egress_width	= ac_unit_width		- unitDLeft		- unitDRight
	endif
	if ac_egress_width < minEgressWidth then ac_egress_width = minEgressWidth

return


"sidelightSizeModifierForLeafEgress":

	if gs_sidelight_left then
		if gs_sidelight_right then
			! sidelights on both sides
			sidelightsTotalWidth = ac_unit_width - ac_egress_width - gs_ds_w * 2 - gs_sliding_fixpanel_width_left - gs_sliding_fixpanel_width_right
			sideRatio = gs_sidelight_width_left / (gs_sidelight_width_left + gs_sidelight_width_right)

			gs_sidelight_width_left = sideRatio * sidelightsTotalWidth
			if gs_sidelight_width_left < minSidelightWidthLeft then gs_sidelight_width_left = minSidelightWidthLeft

			gs_sidelight_width_right = sidelightsTotalWidth - gs_sidelight_width_left
			if gs_sidelight_width_right < minSidelightWidthRight then gs_sidelight_width_right = minSidelightWidthRight

			parameters	gs_sidelight_width_left = gs_sidelight_width_left,
						gs_sidelight_width_right = gs_sidelight_width_right
		else
			! sidelight only on the left
			gs_sidelight_width_left = ac_unit_width - unitDRight - ac_egress_width - gs_ds_w - gs_sliding_fixpanel_width_left

			if gs_sidelight_width_left < minSidelightWidthLeft then gs_sidelight_width_left = minSidelightWidthLeft
			parameters gs_sidelight_width_left = gs_sidelight_width_left
		endif
	else
		if gs_sidelight_right then
			! sidelight only on the right
			gs_sidelight_width_right = ac_unit_width - unitDLeft - ac_egress_width - gs_ds_w - gs_sliding_fixpanel_width_right

			if gs_sidelight_width_right < minSidelightWidthRight then gs_sidelight_width_right = minSidelightWidthRight
			parameters gs_sidelight_width_right = gs_sidelight_width_right
		else
			! no sidelight at all
		endif
	endif
	if gs_sidelight_left | gs_sidelight_right then gosub "unitSizeDiff"

return


"transomSizeModifier":

	if gs_door_transom then
		! Has Transom
		if	GLOB_MODPAR_NAME <> "gs_transom_height" &\
			not(bSlidingOptypeChanged) then
			gs_transom_height = ac_unit_height - unitDLower - ac_egress_height - gs_ds_w
		endif
		if gs_transom_height < minTransomHeight then gs_transom_height = minTransomHeight
		parameters gs_transom_height = gs_transom_height
		ac_egress_height = ac_unit_height - unitDLower - gs_transom_height - gs_ds_w
	else
		! No Transom
		ac_egress_height	= ac_unit_height	 - unitDUpper		- unitDLower
	endif
	if ac_egress_height < minEgressHeight then ac_egress_height = minEgressHeight

return


"transomSizeModifierForLeafEgress":

	if gs_door_transom then
		gs_transom_height = ac_unit_height - unitDLower - ac_egress_height - gs_ds_w

		if gs_transom_height < minTransomHeight then gs_transom_height = minTransomHeight
		parameters gs_transom_height = gs_transom_height

		gosub "unitSizeDiff"
	endif

return


"unitSizeDiff":

	if gs_pocket then
		unitDLeft		= gs_frame_width_left  - gs_unit_extra_left  - gs_egress_extra_left  - not(gs_pocket_door_frame) * (gs_tolerance_left)
		unitDRight		= gs_frame_width_right - gs_unit_extra_right - gs_egress_extra_right - not(gs_pocket_door_frame) * (gs_tolerance_right)
		unitDUpper		= gs_frame_width_upper - gs_unit_extra_upper - gs_egress_extra_upper - not(gs_pocket_door_frame) * (gs_tolerance_upper)
		unitDLower		= 0
	else
		unitDLeft		= not(gs_sidelight_left)  * gs_frame_width_left  + gs_ds_w + gs_sidelight_width_left * gs_sidelight_left + gs_sliding_fixpanel_width_left
		unitDRight		= not(gs_sidelight_right) * gs_frame_width_right + gs_ds_w + gs_sidelight_width_right * gs_sidelight_right + gs_sliding_fixpanel_width_right
		unitDUpper		= not(gs_door_transom)    * gs_frame_width_upper + gs_ds_w + gs_transom_height * gs_door_transom
		unitDLower		= 0
	endif

return

