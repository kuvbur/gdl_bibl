
! Contact person: <NJ>

! ==============================================================================
! This macro draws the Sill
! ------------------------------------------------------------------------------
! Input parameters:
! Geometry ---------------------------------------------------------------------
!	A:						wallhole width (length) (Obsolete)
!	refWidth:				reference width in curved walls (length)
!	leftWidth:				wallhole's side distance from the origin at the left side (length)
!	rightWidth:				wallhole's side distance from the origin at the right side (length)
! Functions --------------------------------------------------------------------
!	gs_IsCurved:			Does the window follow the curvature of the wall? (0 / 1)
!	bParalellInCurvedWalls:	is the wallhole parallel in curved walls (0 / 1)
! Reveal -----------------------------------------------------------------------
!	iRevealType:
!	gs_reveal_left_angle:
!	gs_reveal_right_angle:
! Corner Function --------------------------------------------------------------
!	bLeftCornerFunction:		Turn macro in Corner Window mode at the left side (0 / 1)
!	leftCornerAngle:		Angle between connected walls in case of Corner Window (angle)
!	leftConnWallThk:		Thickness of the connected wall in case of Corner Window (length)
!	bRightCornerFunction:	Turn macro in Corner Window mode at the right side (0 / 1)
!	rightCornerAngle:		Angle between connected walls in case of Corner Window (angle)
!	rightConnWallThk:		Thickness of the connected wall in case of Corner Window (length)
! Oversize ---------------------------------------------------------------------
!	gs_left_oversize:		Left opening oversize (length)
!	gs_right_oversize:		Right opening oversize (length)
! Sill -------------------------------------------------------------------------
!	iSillType:				Identifies the type of the Sill.
!								(integer; 1 = Standard Sill, 2 = Brick Sill, 3 = Stone Sill, etc.)
!	gs_sill_nosing:			Nosing of the Sill. (length)
!	gs_sill_ovhg_left:		Sill overhang on the left side. (length)
!	gs_sill_ovhg_right:		Sill overhang on the right side. (length)
!	gs_sill_curved:			Sill edge is curved or straight. (0 / 1)
!	bShowSillSplice:		Show or hide the Sill's joint line in case of Corner Window  (0 / 1)
!	bWindowSymbolAtMiddle:	Is the window symbol appears always on the middle of the wall (CHI special) (0 / 1)
! 2D Representation ------------------------------------------------------------
!	lod2D_sillBoard:		Level of detail. (integer, 0..1)
!	gs_pen_2D:				Cotour pen of the Trim, Sill and Board. (pen)
!	gs_bFills:				Use fills (boolean)
!	gs_sill_wallhole_fill:			Type of the fill on the Sill. (fill type)
!	gs_sill_wallhole_pen_fg:		Fill pen on the Sill. (pen)
!	gs_sill_wallhole_pen_bg:		Fill background pen on the Sill. (pen)
!	gs_sill_wallhole_fill_sl:		Type of the fill on the Sill, at the sidelights. (fill type)
!	gs_sill_wallhole_pen_sl_fg:		Fill pen on the Sill, at the sidelights. (pen)
!	gs_sill_wallhole_pen_sl_bg:		Fill background pen on the Sill, at the sidelights. (pen)
! Ganging ----------------------------------------------------------------------
!	gs_stack_left:			Align to door/window on left side (0 / 1)
!	gs_stack_right:			Align to door/window on right side (0 / 1)
!	gs_stack_bottom:		Align to door/window on bottom side (0 / 1)
!
! Related Global Variables:
!	GLOB_SCRIPT_TYPE
!	GLOB_CONTEXT
!	WALL_THICKNESS
!	WALL_INCL
!	WALL_SKINS_NUMBER
!	WALL_SKINS_PARAMS
!	WALL_SKINS_NUMBER
!	WALL_SECT_PEN
!	WIDO_FRAME_THICKNESS
!	WIDO_SILL
!	WIDO_LEFT_JAMB
!	WIDO_RIGHT_JAMB
!	WIDO_ORIG_DIST
!	WIDO_REVEAL_SIDE
!	SYMB_MIRRORED
!	SYMB_ROTANGLE
!
! Hotspot IDs:
!	10000:		Sill left
!	10050:		Left Sidelight Sill at door
!	10001:		Sill right
!	10051:		Right Sidelight Sill at door
!	10052:		Sill at Door left side
!	10053:		Sill at Door right side
! ==============================================================================

LINE_ATTRIBUTES_GDLLINE		= 0			! Draw GDL Line in the section
LINE_ATTRIBUTES_WALLLINE	= 1			! Draw WallLine in the section
LINE_ATTRIBUTES_WALLSIDE	= 2			! The section is on the wall side (it is an arc in curved wall)
LINE_ATTRIBUTES_DRAWCC		= 3			! The section is drawn by CavityClosure macro (otherwise the WallHoleCut macro)
LINE_ATTRIBUTES_CONTOUR		= 4			! The section is contour or inner line
!!!	LINE_ATTRIBUTES_WALLEDGE	= 0			! The section is on the wall edge (always a line)

! Line Property defines:
LINE_PROPERTY_GENERIC	= 0
LINE_PROPERTY_INNER		= 1
LINE_PROPERTY_CONTOUR	= 2


! Draw Sill --------------------------------------------------------------------

if lod2D_sillBoard > 0 & bDrawSill & not(gs_stack_bottom) then

	if gs_sill_pen_2D < 1 then gs_sill_pen_2D = gs_pen_2D	! Compatibility

! Save the current parameter buffer --------------------------------------------

	dim savedQueueValues[]
	call "SaveQueue_kmod" parameters returned_parameters savedQueueValues

	if WIDO_REVEAL_SIDE then
		add2 0,-WIDO_FRAME_THICKNESS
	else
		mul2 1,-1
	endif

	if gs_stack_left then
		gs_sill_ovhg_left = gs_left_oversize
		overSizeLeft = gs_left_oversize
		widoLeftJamb = 0
	endif

	if gs_stack_right then
		gs_sill_ovhg_right = gs_right_oversize
		overSizeRight = gs_right_oversize
		widoRightJamb = 0
	endif

! Draw Sill --------------------------------------------------------------------

	if bTShapedOpening then
		gs_wallhole_fill	= gs_sill_wallhole_fill_sl
		gs_wallhole_pen_fg	= gs_sill_wallhole_pen_sl_fg
		gs_wallhole_pen_bg	= gs_sill_wallhole_pen_sl_bg

		if gs_sill_outside_sl_left & gs_sidelight_left & gs_sidelight_parapet_hgt_left > EPS then
			sidelightCutLeft  = 0
			sidelightCutRight = 1
			sidelightCutPosRight = -leftWidth + gs_sidelight_WHole_width_left + bDrawOutsideTrim * gs_trim_width_out + gs_reveal_left_sL + thkPlasterAtSillLeft
			gosub "DrawSill"
		endif

		if gs_sill_outside_sl_right & gs_sidelight_right & gs_sidelight_parapet_hgt_right > EPS then
			sidelightCutLeft  = 1
			sidelightCutRight = 0
			sidelightCutPosLeft = rightWidth - gs_sidelight_WHole_width_right - bDrawOutsideTrim * gs_trim_width_out - gs_reveal_right_sR - thkPlasterAtSillRight
			gosub "DrawSill"
		endif

		if gs_sill_outside then
			gs_wallhole_fill	= gs_sill_wallhole_fill
			gs_wallhole_pen_fg	= gs_sill_wallhole_pen_fg
			gs_wallhole_pen_bg	= gs_sill_wallhole_pen_bg

			temp_sidelightCutPosLeft = sidelightCutPosLeft
			temp_sidelightCutPosRight = sidelightCutPosRight

			sidelightCutLeft  = 2 * (gs_sidelight_left & gs_sidelight_parapet_hgt_left > EPS)
			sidelightCutRight = 2 * (gs_sidelight_right & gs_sidelight_parapet_hgt_right > EPS)
			if gs_sill_outside_sl_right & gs_sidelight_right & gs_sidelight_parapet_hgt_right > EPS then
				sidelightCutPosRight = temp_sidelightCutPosLeft
			else
				sidelightCutPosRight = rightWidth - gs_sidelight_WHole_width_right - gs_reveal_right_sR - thkPlasterAtSillRight
			endif
			if gs_sill_outside_sl_left & gs_sidelight_left & gs_sidelight_parapet_hgt_left > EPS then
				sidelightCutPosLeft = temp_sidelightCutPosRight
			else
				sidelightCutPosLeft = -leftWidth  + gs_sidelight_WHole_width_left  + gs_reveal_left_sL  + thkPlasterAtSillLeft
			endif
			gosub "DrawSill"
		endif
	else
		gs_wallhole_fill	= gs_sill_wallhole_fill
		gs_wallhole_pen_fg	= gs_sill_wallhole_pen_fg
		gs_wallhole_pen_bg	= gs_sill_wallhole_pen_bg

		sidelightCutLeft  = 0
		sidelightCutRight = 0
		gosub "DrawSill"
	endif

! Restore the saved parameter buffer --------------------------------------------

	call "LoadQueue_kmod" parameters savedQueueValues = savedQueueValues
endif


! ==============================================================================
end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end
! ==============================================================================


! ==============================================================================
!	Draw Sill
! ==============================================================================

"DrawSill":
	set fill gs_wallhole_fill
	line_property 0
	if isWindow then
		line_type 1
	else
		line_type gs_sillTreshold_lineType
	endif
	pen gs_sill_pen_2D

	if AC_WallType <> 2 then
		bIsCurvedSegment		= curvedWall & not(iSillType = SILL_DUTCH)
		bCurvedAtSillSide		= (bIsCurvedSegment & iSillType = SILL_TIMBER & gs_sill_curved)
		bCurvedAtWindowFrame	= (bIsCurvedSegment & gs_IsCurved)

		if bCurvedAtSillSide & not(bCurvedAtWindowFrame) & not(wallIsLeft) then
			if abs(WOD) < radSill - sillNosing + EPS then
				bCurvedAtSillSide = 0
			endif
		endif

		if bIsCurvedSegment then put 0,WOD,900

		if sidelightCutLeft then
			if bCurvedAtSillSide then
				py = WOD - iArchSign * sqr((radSill + iArchSign * gs_sill_nosing)^2 - sidelightCutPosLeft^2)
			else
				py = spy4 - (spy4 - spy5) / (spx5 - spx4) * (sidelightCutPosLeft - spx4)
			endif
			put sidelightCutPosLeft,	0,	1,
				sidelightCutPosLeft,	py,	1
		else
			if abs(bSillNnosUsa) > EPS then	! Sill Negativ Nosing by USA Framesill
				put leftRevealPnts[idxSillEndRevealLeft][1] + frameWidthLeft,	leftRevealPnts[idxSillEndRevealLeft][2] + bSillNnosUsa,	0
				put leftRevealPnts[idxSillEndRevealLeft][1] + frameWidthLeft,	leftRevealPnts[idxSillEndRevealLeft][2],				0
			endif

			for i = idxSillEndPlasterLeft to idxSillStartPlasterLeft step -1
				if not((abs(leftRevealPnts[i][2]) > abs(spy4)) & (iSillType = SILL_DUTCH)) then
					put leftRevealPnts[i][1], leftRevealPnts[i][2], 0
				endif
			next i

			put spx3, spy3, 3000 * bIsCurvedSegment + not(gs_stack_left | bLeftCornerFunction),
				spx4, spy4, 1
		endif

		if sidelightCutRight then
			if bCurvedAtSillSide then
				py = WOD - iArchSign * sqr((radSill + iArchSign * gs_sill_nosing)^2 - sidelightCutPosRight^2)
			else
				py = spy4 - (spy4 - spy5) / (spx5 - spx4) * (sidelightCutPosRight - spx4)
			endif
			put sidelightCutPosRight,	py,	3000 * bCurvedAtSillSide + 1,
				sidelightCutPosRight,	0,	0
		else
			put	spx5, spy5, 3000 * bCurvedAtSillSide + not(gs_stack_right | bRightCornerFunction),
				spx6, spy6, 0

			for i = idxSillStartPlasterRight to idxSillEndPlasterRight
				if not((abs(rightRevealPnts[i][2]) > abs(spy5)) & (iSillType = SILL_DUTCH)) then
					put rightRevealPnts[i][1], rightRevealPnts[i][2], 3000 * bIsCurvedSegment * (i = idxSillStartPlasterRight)
				endif
			next i

			if abs(bSillNnosUsa) > EPS then	! Sill Negativ Nosing by USA Framesill
				put rightRevealPnts[idxSillEndRevealRight][1] - frameWidthRight,	rightRevealPnts[idxSillEndRevealRight][2],				0
				put rightRevealPnts[idxSillEndRevealRight][1] - frameWidthRight,	rightRevealPnts[idxSillEndRevealRight][2] + bSillNnosUsa,	0
			endif

			! Close polygon
			if bIsCurvedSegment & bCurvedAtWindowFrame then
				put leftRevealPnts[idxSillEndPlasterLeft][1], leftRevealPnts[idxSillEndPlasterLeft][2], 3000
			endif
		endif

		penFillFg	= gs_wallhole_pen_fg
		penFillBg	= gs_wallhole_pen_bg
		gosub 300	! Draw wallhole fill

		if bShowAddHotspots then
			if sidelightCutLeft then
				if sidelightCutLeft = 2 then
					hotspot2 sidelightCutPosLeft, spy4, 10053
				else
					hotspot2 sidelightCutPosLeft, spy4, 10051
				endif
			else
				hotspot2 spx4, spy4, 10000
			endif
			if sidelightCutRight then
				if sidelightCutRight = 2 then
					hotspot2 sidelightCutPosRight, spy4, 10052
				else
					hotspot2 sidelightCutPosRight, spy4, 10050
				endif
			else
				hotspot2 spx5, spy5, 10001
			endif
		endif
	else

		ch = initaddonscope ("PolyOperations", "", "")

! Generate Sill Polygon --------------------------------------------------------

		bGetWallCutPolygons = 0
		bPolyFor3D = 0
		gosub 2000

! Draw resulting polygons ------------------------------------------------------

		dim resPolyIDArr[]
		numPoly = callfunction (ch, "GetDestinationPolygons", "", resPolyIDArr)

		for i = 1 to numPoly
			polygonID = resPolyIDArr[i]
			gosub 1000	! Get GDL Polygon

			fill gs_wallhole_fill
			poly2_b nsp/3, 2+4+64, gs_wallhole_pen_fg, gs_wallhole_pen_bg,
				get(nsp)
		next i

! Draw wall contour lines ------------------------------------------------------

		dim lineAttributes[2][4]
		lineAttributes[1][1] = WALL_SECT_PEN
		lineAttributes[1][2] = WALL_LINETYPE
		lineAttributes[1][3] = LINE_PROPERTY_CONTOUR
		lineAttributes[1][4] = bitset(0, LINE_ATTRIBUTES_WALLLINE)

		lineAttributes[2][1] = gs_sill_pen_2D
		lineAttributes[2][2] = 1
		lineAttributes[2][3] = LINE_PROPERTY_GENERIC
		lineAttributes[2][4] = bitset(0, LINE_ATTRIBUTES_GDLLINE)

		bPutHotsopts	= 0

		for i = 1 to numPoly
			polygonID = resPolyIDArr[i]
			gosub 1001	! Draw one polygon contour line
		next i

! Close channel ----------------------------------------------------------------

		closeaddonscope ch
	endif

return


! ==============================================================================
! Direction Angle
! ------------------------------------------------------------------------------
! Input variables:
!	vx, vy:				vector
!
! Returned variables:
!	alpha:				selected intersection point
! ==============================================================================

103:

if abs(vx) < EPS & abs(vy) < EPS then
	angle = 0
	return
endif

if abs(vx) < EPS then
	if vy > 0 then
		angle = 90
	else
		angle = 270
	endif
else
	angle = atn(vy / vx)
	if vx >= 0 then
		if angle < 0 then
			angle = angle + 360
		endif
	else
		angle = 180 + angle
	endif
endif

return

! ==============================================================================
! Draw wallblock with contour
! ------------------------------------------------------------------------------
! Input variables:
!	stack:				wallblock polygon
!	penFillFg			fill foreground pen (pen index)
!	penFillBg			fill background pen (pen index)
! ==============================================================================

300:
	if nsp >= 9 then
		if gs_bFills then
			poly2_b nsp/3, 2+4+64, penFillFg, penFillBg,
				use(nsp)
		endif
	else
		for ii=1 to nsp
			n = get(1)
		next ii
		return
	endif

	bHaveFirst = 0
	numPoints = nsp/3

	for ii=1 to numPoints
		if ii = 1 | not(bHaveFirst) then
			x1 = get(1)
			y1 = get(1)
			s1 = get(1)
			firstX = x1
			firstY = y1
			firstS = s1
			if s1 < 100 then bHaveFirst = 1
		endif
		if ii = numPoints then
			x2 = firstX
			y2 = firstY
			s2 = firstS
		else
			if bHaveFirst then
				x2 = get(1)
				y2 = get(1)
				s2 = get(1)
			endif
		endif

		if bHaveFirst then
			if bittest(s1, 0) & (s1 >= 1000 | s1 < 100) then
				if s2 >= 3000 then
					R = sqr(x2^2 + (y2 - WOD)^2)

					vx = x1
					vy = y1 - WOD
					gosub 103	! Direction Angle
					alpha = angle

					vx = x2
					vy = y2 - WOD
					gosub 103	! Direction Angle
					beta = angle

					if abs(alpha - beta) > EPS then
						arc2 0,WOD, R, min(alpha,beta), max(alpha,beta)
					endif
				else
					if s2 < 100 then
						line2 x1,y1, x2,y2
					endif
				endif
			endif

			if s2 >= 1000 | s2 < 100 then
				x1 = x2
				y1 = y2
				s1 = s2
			endif
		endif
	next ii
return


1000:
! ==============================================================================
! Get GDL Polygon
! ------------------------------------------------------------------------------
! Input variables:
!	ch:						Channel
!	polygonID:			Polygon index
!
! Returned variables:
!	GDL stack:			GDL polygon
! ==============================================================================

	dim resVertices[]
	numVertices = callfunction(ch, "GetVertices", polygonID, resVertices)
	numVertices = numVertices / 3

	dim contArr[]
	numContours = callfunction(ch, "GetContourEnds", polygonID, contArr)

	for contIndex = 1 to numContours

		if contIndex = 1 then
			begIdx = 0
		else
			begIdx = contArr[contIndex] - 1
		endif
		if contIndex = numContours then
			endIdx = numVertices - 1
		else
			endIdx = contArr[contIndex + 1] - 2
		endif

		bClosed = 0
		bStartWithLast = 0

		index = endIdx * 3
		ac2gdl_lpx = resVertices[index + 1]
		ac2gdl_lpy = resVertices[index + 2]
		ac2gdl_lpa = resVertices[index + 3]

		if abs(ac2gdl_lpa) > EPS then
			put ac2gdl_lpx, ac2gdl_lpy, 1
			bStartWithLast = 1
		endif

		for vertIndex = begIdx to endIdx
			index = vertIndex * 3
			ac2gdl_px = resVertices[index + 1]
			ac2gdl_py = resVertices[index + 2]
			ac2gdl_pa = resVertices[index + 3]

			if vertIndex = begIdx then
				if bStartWithLast then
					ac2gdl_spx = ac2gdl_lpx
					ac2gdl_spy = ac2gdl_lpy
				else
					ac2gdl_spx = ac2gdl_px
					ac2gdl_spy = ac2gdl_py
				endif
			endif

			if abs(ac2gdl_lpa) > EPS then
				ac2gdl_mx = (ac2gdl_px + ac2gdl_lpx) / 2
				ac2gdl_my = (ac2gdl_py + ac2gdl_lpy) / 2
				ac2gdl_ratio = 1 / 2 / tan (ac2gdl_lpa / 2)

				ac2gdl_cx = ac2gdl_mx - ac2gdl_ratio * (ac2gdl_py - ac2gdl_lpy)	! Arc center
				ac2gdl_cy = ac2gdl_my + ac2gdl_ratio * (ac2gdl_px - ac2gdl_lpx)

				put ac2gdl_cx,	ac2gdl_cy,	900,
					0,			ac2gdl_lpa,	4001
			endif

			if vertIndex > begIdx & abs(ac2gdl_spx - ac2gdl_px) < EPS & abs(ac2gdl_spy - ac2gdl_py) < EPS then
!!!				put ac2gdl_px, ac2gdl_py, -1	! Sill polygon never contains holes
				bClosed = 1
			else
				if vertIndex < endIdx | not(bStartWithLast) then
					put ac2gdl_px, ac2gdl_py, 1
				endif
			endif

			ac2gdl_lpx = ac2gdl_px
			ac2gdl_lpy = ac2gdl_py
			ac2gdl_lpa = ac2gdl_pa
		next vertIndex

		if not(bClosed) & numContours > 1 then	! Close the polygon if it has holes
			put ac2gdl_spx, ac2gdl_spy, -1
		endif

	next contIndex
return


1001:
! ==============================================================================
! Draw one polygon contour line
! ------------------------------------------------------------------------------
! Input variables:
!	ch:						Channel
!	polygonID:				Polygon ID
!	lineAttributes[][3]:	Line attribute array
!								[][1] = pen color
!								[][2] = line type
!								[][3] = line property
!								[][4] = additional line attributes
! ==============================================================================

	dim resVertices[]
	numVertices = callfunction(ch, "GetVertices", polygonID, resVertices)
	numVertices = numVertices / 3

	dim contArr[]
	numContours = callfunction(ch, "GetContourEnds", polygonID, contArr)

	dim inhEdgeInfos[]
	numEdges = callfunction(ch, "GetInhEdgeInfos", polygonID, inhEdgeInfos)

	for contIndex = 1 to numContours

		if contIndex = 1 then
			begIdx = 0
		else
			begIdx = contArr[contIndex] - 1
		endif
		if contIndex = numContours then
			endIdx = numVertices - 1
		else
			endIdx = contArr[contIndex + 1] - 2
		endif

		bClosed = 0
		bStartWithLast = 0

		index = endIdx * 3
		lastVertX	= resVertices[index + 1]
		lastVertY	= resVertices[index + 2]
		lastVertA	= resVertices[index + 3]
		edgeInfo	= inhEdgeInfos[endIdx + 1]

		for vertIndex = begIdx to endIdx

			index = vertIndex * 3
			actVertX = resVertices[index + 1]
			actVertY = resVertices[index + 2]
			actVertA = resVertices[index + 3]

!!text2	(lastVertX + actVertX) / 2,
!!		(lastVertY + actVertY) / 2,
!!		edgeInfo

!!!ccc=ccc+0.1
!!!circle2 lastVertX, lastVertY, ccc
!!!circle2 actVertX, actVertY, ccc

			if edgeInfo > 0 & edgeInfo <= vardim1(lineAttributes) then

				if lineAttributes[edgeInfo][1] > 0 then
					pen				lineAttributes[edgeInfo][1]
					line_type		lineAttributes[edgeInfo][2]

					line_property	lineAttributes[edgeInfo][3]
					iAttributes = round_int(lineAttributes[edgeInfo][4])

					if abs(lastVertA) > EPS then
						ac2gdl_mx = (actVertX + lastVertX) / 2
						ac2gdl_my = (actVertY + lastVertY) / 2
						ac2gdl_ratio = 1 / 2 / tan (lastVertA / 2)

						ac2gdl_cx = ac2gdl_mx - ac2gdl_ratio * (actVertY - lastVertY)	! Arc center
						ac2gdl_cy = ac2gdl_my + ac2gdl_ratio * (actVertX - lastVertX)
						ac2gdl_rad = sqr((ac2gdl_cx - actVertX)^2 + (ac2gdl_cy - actVertY)^2)

						vx = actVertX - ac2gdl_cx
						vy = actVertY - ac2gdl_cy
						gosub 103	! Direction Angle
						alpha = angle

						vx = lastVertX - ac2gdl_cx
						vy = lastVertY - ac2gdl_cy
						gosub 103	! Direction Angle
						beta = angle

						if abs(alpha - beta) > EPS then
							if abs(alpha - beta) > 180 + EPS then
								angleStart	= max(alpha,beta)
								angleEnd	= min(alpha,beta)
							else
								angleStart	= min(alpha,beta)
								angleEnd	= max(alpha,beta)
							endif
							if bittest(iAttributes, LINE_ATTRIBUTES_GDLLINE) then
								arc2 ac2gdl_cx,	ac2gdl_cy, ac2gdl_rad, angleStart, angleEnd
							endif
							if bittest(iAttributes, LINE_ATTRIBUTES_WALLLINE) then
								wallarc2 ac2gdl_cx,	ac2gdl_cy, ac2gdl_rad, angleStart, angleEnd
							endif
						endif
					else
						if bittest(iAttributes, LINE_ATTRIBUTES_GDLLINE) then
							line2 lastVertX, lastVertY, actVertX, actVertY
						endif
						if bittest(iAttributes, LINE_ATTRIBUTES_WALLLINE) then
							wallline2 lastVertX, lastVertY, actVertX, actVertY
						endif
					endif
				endif
			endif

			if sillNosing > EPS & bShowAddHotspots & abs(actVertY - sillNosingY) < EPS then
				if actVertX < 0 then
					hotspot2 actVertX, actVertY, 10000	! Left
				else
					hotspot2 actVertX, actVertY, 10001	! Right
				endif
			endif

			lastVertX	= actVertX
			lastVertY	= actVertY
			lastVertA	= actVertA
			edgeInfo	= inhEdgeInfos[vertIndex + 1]

		next vertIndex
	next contIndex
return



