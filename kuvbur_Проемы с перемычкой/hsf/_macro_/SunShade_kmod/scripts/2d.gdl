
LOD2D_SUNSHADE_SIMPLE = 1
LOD2D_SUNSHADE_DETAILED = 2

if lod2D_sunShade = 0 | not (gs_sunShade_bShowIn2D) then end

if bSunShadeNotAvailableByWindowShape then end

pen gs_sunShade_cutLinesPen
fill gs_sunShade_cutFillType
line_type gs_sunShade_lineType

if WIDO_REVEAL_SIDE then
	add2 0,-WIDO_FRAME_THICKNESS
else
	mul2 1,-1
endif

if  gs_sunShade_iType = SUNSHADE_ROLLING | gs_sunShade_iType = SUNSHADE_EXTVENETIAN then
	add2 0, -WIDO_SILL
else
	add2 0, -WIDO_SILL - gs_casingThkOnFacade
endif

simpleFoldingModify = 0

if gs_sunShade_iType = SUNSHADE_DECORATIVE								then gosub "Decorative_shutter"
if gs_sunShade_iType = SUNSHADE_SHUTTER									then gosub "Opening_Sliding_shutter"
if gs_sunShade_iType = SUNSHADE_FOLDING	& not (bFoldingWarning)			then gosub "Folding_shutter"
if gs_sunShade_iType = SUNSHADE_OUTFOLDING & not (bOutfoldingWarning)	then gosub "Outfolding_shutter"
if gs_sunShade_iType = SUNSHADE_SLIDING									then gosub "Opening_Sliding_shutter"
if gs_sunShade_iType = SUNSHADE_ROLLING									then gosub "Rolling_shutter"
if gs_sunShade_iType = SUNSHADE_EXTVENETIAN								then gosub "Venetian_shutter"


del 2

! ------------------------------------------------------------------------------
end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end
! ------------------------------------------------------------------------------


! ==============================================================================
"Decorative_shutter":
! ==============================================================================

	panelWidth	= gs_shutPanel_panelWidth

	if bCurvedWall & radSill < radBoard then
		if WIDO_REVEAL_SIDE then
			add2 0, WIDO_ORIG_DIST + WIDO_SILL + WIDO_FRAME_THICKNESS + radSill
		else
			add2 0, -WIDO_ORIG_DIST + WIDO_SILL + radSill
		endif

		if gs_shutter_nPanels = 2 | (gs_shutter_nPanels = 1 & gs_shutter_iPanelPos = PANELPOS_RIGHT) then
			add2 0, -radSill
			rot2 -asn((a/2) / radSill)
			add2 0, radSill - distShutterWall

			rot2 -asn((panelWidth / 2) / radSill)
			gosub "Draw_Panel"
			del 4
		endif

		if gs_shutter_nPanels = 2 | (gs_shutter_nPanels = 1 & gs_shutter_iPanelPos = PANELPOS_LEFT) then
			mul2 -1, 1
			add2 0, -radSill
			rot2 -asn((a/2) / radSill)
			add2 0, radSill - distShutterWall

			rot2 -asn((panelWidth / 2) / radSill)
			gosub "Draw_Panel"
			del 5
		endif

		del 1
	else
		if gs_shutter_nPanels = 1 then
			if gs_shutter_iPanelPos = PANELPOS_LEFT then
				add2 -a/2 - panelWidth, -distShutterWall

				gosub "Draw_Panel"
			else
				add2 a/2, -distShutterWall

				gosub "Draw_Panel"
			endif
		else
			for i = 1 to 2
				add2 a/2, -distShutterWall

				gosub "Draw_Panel"

				del 1
				mul2 -1, 1
			next i
			del 2
		endif
	endif

return


! ==============================================================================
"Opening_Sliding_shutter":
! ==============================================================================

	panelWidth	= a / gs_shutter_nPanels

	if gs_sunShade_iType = SUNSHADE_SHUTTER & bCurvedWall & radSill < radBoard then
		if WIDO_REVEAL_SIDE then
			add2 0, WIDO_ORIG_DIST + WIDO_SILL + WIDO_FRAME_THICKNESS + radSill
		else
			add2 0, -WIDO_ORIG_DIST + WIDO_SILL + radSill
		endif

		if nPanelLeft > 0 then
			mul2 -1, 1
			add2 0, -radSill
			rot2 -asn((a/2) / radSill)
			add2 0, radSill - distShutterWall

			rot2 -asn((panelWidth / 2) / radSill)
			for i = 1 to nPanelLeft
				gosub "Draw_Panel"
				add2 0, -gs_shutPanel_thk
			next i
			del 5 + nPanelLeft
		endif

		if nPanelRight > 0 then
			add2 0, -radSill
			rot2 -asn((a/2) / radSill)
			add2 0, radSill - distShutterWall

			rot2 -asn((panelWidth / 2) / radSill)
			for i = 1 to nPanelRight
				gosub "Draw_Panel"
				add2 0, -gs_shutPanel_thk
			next i
			del 4 + nPanelRight
		endif

		del 1
	else
		if nPanelLeft > 0 then
			add2 -a/2 - panelWidth, -distShutterWall

			for i = 1 to nPanelLeft
				gosub "Draw_Panel"
				add2 0, -gs_shutPanel_thk
			next i
			del 1 + nPanelLeft
		endif
		if nPanelRight > 0 then
			add2 a/2, -distShutterWall

			for i = 1 to nPanelRight
				gosub "Draw_Panel"
				add2 0, -gs_shutPanel_thk
			next i
			del 1 + nPanelRight
		endif
	endif

	if gs_sunShade_bShowOpline & gs_sunShade_iType = SUNSHADE_SHUTTER then
		pen gs_sunShade_unCutLinesPen

		if nPanelLeft > 0 then
			leftRadius = panelWidth * (nPanelLeft + 1) / 2

			arc2 -a/2 - panelWidth + leftRadius, -distShutterWall, leftRadius, 180, 360
		endif

		if nPanelRight > 0 then
			rightRadius = panelWidth * (nPanelRight + 1) / 2

			arc2 a/2 + panelWidth - rightRadius, -distShutterWall, rightRadius, 180, 360
		endif
	endif
return


! ==============================================================================
"Folding_shutter":
! ==============================================================================

	panelWidth	= a / (gs_shutter_nPanels + gs_shutter_nPanels2)

	if gs_foldingShutter_iStacking = STACKING_OUTSIDE then
		add2 0, panelWidth - gs_foldingShutter_ovhg
	else
		mul2 1, -1
	endif

	simpleFoldingModify = gs_shutPanel_thk

	for i = 1 to 2
		if i = 1 then
			nPanel = gs_shutter_nPanels2
		else
			nPanel = gs_shutter_nPanels
		endif

		add2 a/2, 0
		rot2 -93

		for j = 1 to nPanel
			gosub "Draw_Panel"
			add2 panelWidth, -gs_shutPanel_thk
			rot2 6
			mul2 -1, 1
		next j
		del nPanel * 3

		del 2
		mul2 -1, 1
	next i
	del 2

	del 1
return


! ==============================================================================
"Outfolding_shutter":
! ==============================================================================

	for i = 1 to 2
		panelInMax = a/2 - distShutterWall
		if iRevealType = 8 | iRevealType = 9 then
			if i = 2 then
				panelWidthIn = outfolding_innerPanelLeft + distShutterWall * (tan(180 - leftWallAngle/2) + tan((90 - leftWallAngle) / 2))
				actSideAngle = leftWallAngle
			else
				panelWidthIn = outfolding_innerPanelRight + distShutterWall * (tan(180 - rightWallAngle/2) + tan((90 - rightWallAngle) / 2))
				actSideAngle = rightWallAngle
			endif
			panelWidthOut = a / 2 - panelWidthIn - distShutterWall
			panelJoinX = -distShutterWall + panelWidthIn * sin(actSideAngle)
		else
			panelWidthIn = gs_outFoldingShutter_panelIn
			panelWidthOut = a / 2 - panelWidthIn - distShutterWall
			panelJoinX = -distShutterWall
			actSideAngle = 0
		endif

		add2 a/2 + panelJoinX, -distShutterWall

		if panelWidthOut > EPS then
			panelWidth = panelWidthOut
			gosub "Draw_Panel"
		endif

		rot2 90 + actSideAngle
		add2 panelWidthIn, 0
		panelWidth = min(panelInMax, panelWidthIn)
		mul2 -1, -1
		gosub "Draw_Panel"

		del 4

		mul2 -1, 1
	next i
	del 2

	if gs_sunShade_bShowOpline then
		pen gs_sunShade_unCutLinesPen

		oplineRad = (a + 2 * panelWidthOut - distShutterWall*2) / 4

		for i = 1 to 2
			arc2 a/2 + panelWidthOut - oplineRad- distShutterWall, -distShutterWall, oplineRad, 180, 360

			mul2 -1, 1
		next i
		del 2

	endif
return


! ==============================================================================
"Draw_Panel":
! ==============================================================================
	if lod2D_sunShade = LOD2D_SUNSHADE_SIMPLE then
		line2 0, 0, panelWidth, 0 - simpleFoldingModify
	else
		poly2_b 5, 1+2+4+64, gs_sunShade_cutFillPen, gs_sunShade_cutFillBackPen,
			0, 0, 1,
			panelWidth, 0, 1,
			panelWidth, -gs_shutPanel_thk, 1,
			0, -gs_shutPanel_thk, 1,
			0, 0, -1
	endif
return


! ==============================================================================
"Rolling_shutter":
! ==============================================================================

	call "RollingShutter_kmod" parameters a 	= a,
			gs_shutRoll_iPlacement		= gs_shutRoll_iPlacement,
			gs_shutRoll_boxWidth		= gs_shutRoll_boxWidth,
			gs_shutRoll_railDepth		= gs_shutRoll_railDepth,
			gs_shutRoll_distFromWall	= gs_shutRoll_distFromWall,
			gs_shutRoll_boxOffsetLeft	= gs_shutRoll_boxOffsetLeft,
			gs_shutRoll_boxOffsetRight	= gs_shutRoll_boxOffsetRight,

			gs_sunShade_lineType		= gs_sunShade_lineType,
			gs_sunShade_unCutLinesPen	= gs_sunShade_unCutLinesPen,

			gs_casingThkOnFacade		= gs_casingThkOnFacade,
			bLeftCornerFunction			= bLeftCornerFunction,
			bRightCornerFunction		= bRightCornerFunction,
			leftCornerAngle				= leftCornerAngle,
			rightCornerAngle			= rightCornerAngle,
			lod2D_sunShade				= lod2D_sunShade
return


! ==============================================================================
"Venetian_shutter":
! ==============================================================================

	call "VenetianBlinds_kmod" parameters a		= a,
			gs_sunShade_iType				= gs_sunShade_iType,
			gs_shutLam_iPlacement			= gs_shutLam_iPlacement,
			gs_shutLam_boxWidth				= gs_shutLam_boxWidth,
			gs_shutLam_bRail				= gs_shutLam_bRail,
			gs_shutLam_coverWidth			= gs_shutLam_coverWidth,
			gs_shutLam_distFromWall			= gs_shutLam_distFromWall,

			gs_sunShade_lineType			= gs_sunShade_lineType,
			gs_sunShade_unCutLinesPen		= gs_sunShade_unCutLinesPen,

			gs_casingThkOnFacade			= gs_casingThkOnFacade,
			bLeftCornerFunction				= bLeftCornerFunction,
			bRightCornerFunction			= bRightCornerFunction,
			leftCornerAngle					= leftCornerAngle,
			rightCornerAngle				= rightCornerAngle

return
