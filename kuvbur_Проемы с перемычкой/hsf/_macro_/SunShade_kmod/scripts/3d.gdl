
LOD3D_SIMPLEPLANE	= 1
LOD3D_DETAILEDPLANE	= 2
LOD3D_SIMPLEPANEL	= 3
LOD3D_DETAILEDPANEL	= 4

dim sunshadepoly[]
sunshadepoly[1]	= 0
posSunShade		= 0
lengthSunShade	= 0

if lod3D_sunShade	= 0 then end

if bSunShadeNotAvailableByWindowShape then end

a = sunShadeLength3D
b = sunShadeHeight3D

pen gs_sunShade_unCutLinesPen
sect_fill gs_sunShade_cutFillType, gs_sunShade_cutFillBackPen, gs_sunShade_cutFillPen, gs_sunShade_cutLinesPen

bNoThickness = 0
if lod3D_sunShade = LOD3D_SIMPLEPLANE | lod3D_sunShade = LOD3D_DETAILEDPLANE then bNoThickness = 1

bSimplePanel = 0
if lod3D_sunShade = LOD3D_SIMPLEPLANE | lod3D_sunShade = LOD3D_SIMPLEPANEL then bSimplePanel = 1

if bNoThickness then
	panelThk = 0
else
	panelThk = gs_shutPanel_Thk
endif

unID = 10200
bDividerPlaneNeeded = 0
bFoldingDividerPlaneNeeded = 0

if WIDO_REVEAL_SIDE then
	addz WIDO_SILL + WIDO_FRAME_THICKNESS + gs_casingThkOnFacade
	mulz -1
else
	addz -WIDO_SILL - gs_casingThkOnFacade
endif

! ------------------------------------------------------------------------------
! Defining panel shape
! ------------------------------------------------------------------------------

	gs_shutPanel_iShape = PANELSHAPE_RECT

	if gs_sunShade_iType = SUNSHADE_DECORATIVE | gs_sunShade_iType = SUNSHADE_SHUTTER then
		if iWindowShape = SHAPE_ARCHED | iWindowShape = SHAPE_EYEBROWS then
			if gs_shutter_nPanels = 1 then
				gs_shutPanel_iShape = PANELSHAPE_FULLARCH
			else
				if gs_shutter_nPanels = 2 then
					gs_shutPanel_iShape = PANELSHAPE_HALFARCH
				endif
			endif
		endif
		if iWindowShape = SHAPE_HALFARCH & gs_shutter_nPanels = 1 then
			gs_shutPanel_iShape = PANELSHAPE_HALFARCH
		endif
!		if iWindowShape = SHAPE_PENTAGON then
!			if gs_shutter_nPanels = 1 then
!				gs_shutPanel_iShape = PANELSHAPE_PENTAGON
!			else
!				if gs_shutter_nPanels = 2 then
!					gs_shutPanel_iShape = PANELSHAPE_TRAPEZOID
!				endif
!			endif
!		endif
!		if iWindowShape = SHAPE_TRAPEZOID & gs_shutter_nPanels = 1 then
!			gs_shutPanel_iShape = PANELSHAPE_TRAPEZOID
!		endif
		if iWindowShape = SHAPE_ELLIPSEARCH then
			if gs_shutter_nPanels = 1 then
				gs_shutPanel_iShape = PANELSHAPE_ELLIPS
			endif
			if gs_shutter_nPanels = 2 then
				gs_shutPanel_iShape = PANELSHAPE_HALFELLIPS
			endif
		endif
	else
		gs_shutPanel_archHeight = 0			! set to zero in case of rectangular
	endif


! ------------------------------------------------------------------------------
! Going to type-specific subroutines
! ------------------------------------------------------------------------------

if gs_sunShade_iType = SUNSHADE_DECORATIVE								then gosub "Decorative_shutter"
if gs_sunShade_iType = SUNSHADE_SHUTTER									then gosub "Opening_shutter"
if gs_sunShade_iType = SUNSHADE_FOLDING	& not (bFoldingWarning)			then gosub "Folding_shutter"
if gs_sunShade_iType = SUNSHADE_OUTFOLDING & not (bOutfoldingWarning)	then gosub "Outfolding_shutter"
if gs_sunShade_iType = SUNSHADE_SLIDING									then gosub "Sliding_shutter"
if gs_sunShade_iType = SUNSHADE_ROLLING									then gosub "Rolling_shutter"
if gs_sunShade_iType = SUNSHADE_EXTVENETIAN								then gosub "Venetian_Blinds"
if gs_sunShade_iType = SUNSHADE_VENETIAN								then gosub "Venetian_Blinds"

del 1 + WIDO_REVEAL_SIDE


! ------------------------------------------------------------------------------
end posSunShade,
	lengthSunShade,
	sunshadepoly

! ------------------------------------------------------------------------------


! ==============================================================================
"Decorative_shutter":
! ==============================================================================

	if gs_sunShade_bAutomaticHeight then
		panelHeight = b
	else
		panelHeight = gs_sunShade_height
	endif
	panelWidth	= gs_shutPanel_panelWidth
	gs_shutter_innerOffset = 0

	if bCurvedWall & radSill < radBoard then
		if WIDO_REVEAL_SIDE then
			addz -WIDO_ORIG_DIST + WIDO_SILL + WIDO_FRAME_THICKNESS + radSill
		else
			addz WIDO_ORIG_DIST + WIDO_SILL + radSill
		endif

		if gs_shutter_nPanels = 2 | (gs_shutter_nPanels = 1 & gs_shutter_iPanelPos = PANELPOS_LEFT) then
			addz -radSill
			roty -asn((a/2) / radSill)
			addz radSill - distShutterWall

			roty 180-asn((panelWidth / 2) / radSill)
			gosub "callShutterPanel"
			del 4
		endif

		if gs_shutter_nPanels = 2 | (gs_shutter_nPanels = 1 & gs_shutter_iPanelPos = PANELPOS_RIGHT) then
			mulx -1
			addz -radSill
			roty -asn((a/2) / radSill)
			addz radSill - distShutterWall

			roty 180-asn((panelWidth / 2) / radSill)
			gosub "callShutterPanel"
			del 5
		endif

		del 1
	else
		mulz -1
		if gs_shutter_nPanels = 1 then
			if gs_shutter_iPanelPos = PANELPOS_LEFT then
				add -a/2, 0, distShutterWall
				mulx -1
			else	!right
				add a/2, 0, distShutterWall
			endif

			gosub "callShutterPanel"

			del 1 + (gs_shutter_iPanelPos = PANELPOS_LEFT)
		else
			add -a/2, 0, distShutterWall
			mulx -1
			gosub "callShutterPanel"
			del 2

			add a/2, 0, distShutterWall
			gosub "callShutterPanel"
			del 1
		endif
		del 1
	endif

return


! ==============================================================================
"Opening_shutter":
! ==============================================================================

	leftSlantedRevealMod = 0
	rightSlantedRevealMod = 0
	topSlantedRevealMod = 0
	if iRevealType = REVEAL_DOUBLE_SPLAYED | iRevealType = REVEAL_OUTSIDE_SPLAYED then
		leftSlantedRevealMod = min(slantedRevealDepth, gs_shutter_closingDepth + gs_shutter_bExtraFrame * gs_shutter_extraFrameThk) * tan(leftWallAngle)
		rightSlantedRevealMod = min(slantedRevealDepth, gs_shutter_closingDepth + gs_shutter_bExtraFrame * gs_shutter_extraFrameThk) * tan(rightWallAngle)
		topSlantedRevealMod = min(slantedRevealDepth, gs_shutter_closingDepth + gs_shutter_bExtraFrame * gs_shutter_extraFrameThk) * tan(topWallAngle)
		a = a - leftSlantedRevealMod - rightSlantedRevealMod

		addx (leftSlantedRevealMod - rightSlantedRevealMod) / 2
	endif

	if gs_sunShade_bAutomaticHeight then
		panelHeight = b - gs_shutter_innerOffset * 2
	else
		panelHeight = gs_sunShade_height
	endif

	panelWidth	= (a - 2 * gs_shutter_innerOffset) / gs_shutter_nPanels

	axisY = (gs_shutter_closingDepth - distShutterWall - panelThk) / 2
	distY = axisY + distShutterWall

	angleCorrection = 0
	if bCurvedWall & radSill < radBoard then angleCorrection = asn((a/2) / radSill) + asn((panelWidth / 2) / radSill)

	if gs_shutter_opAngle > 180 - angleCorrection then gs_shutter_opAngle = 180 - angleCorrection

	if nPanelLeft > 0 then
		axisX = -a/2 + gs_shutter_innerOffset/2 - leftSlantedRevealMod/2
		distX = gs_shutter_innerOffset/2 + leftSlantedRevealMod/2

		nPanel = nPanelLeft

		sideSign = 1

		gosub "Panel_Opening_Geometry"
	endif

	if nPanelRight > 0 then
		axisX = a/2 - gs_shutter_innerOffset/2 + rightSlantedRevealMod/2
		distX = gs_shutter_innerOffset/2 + rightSlantedRevealMod/2

		nPanel = nPanelRight

		sideSign = -1

		gosub "Panel_Opening_Geometry"
	endif


! --- Extra Frame --------------------------------------------------------------

	if gs_shutter_bExtraFrame & not(bNoThickness) then
		numcuts = 0

		material gs_shutPanel_materialAcc

		if iWindowShape = SHAPE_RECTANGULAR & (iRevealType = REVEAL_DOUBLE_SPLAYED | iRevealType = REVEAL_OUTSIDE_SPLAYED) then
			addy -(gs_shutter_closingDepth + gs_shutter_extraFrameThk) * tan(bottomWallAngle)
			rotx 90-bottomWallAngle
			cutplane
			numCuts = numCuts + 1
			del 2

			if gs_shutter_closingDepth + EPS < slantedRevealDepth then
				if gs_shutter_closingDepth + gs_shutter_extraFrameThk + EPS < slantedRevealDepth then
					add a/2, 0, gs_shutter_closingDepth + gs_shutter_extraFrameThk
					roty 90 - rightWallAngle
					cutplane
					numCuts = numCuts + 1
					del 2

					add -a/2, 0, gs_shutter_closingDepth + gs_shutter_extraFrameThk
					roty -90 + leftWallAngle
					cutplane
					numCuts = numCuts + 1
					del 2

					add 0, b, gs_shutter_closingDepth + gs_shutter_extraFrameThk
					rotx -90 + topWallAngle
					cutplane
					numCuts = numCuts + 1
					del 2
				else
					rotx -90
					cutpolya 5, 1+2, 0,
						a/2, -gs_shutter_closingDepth - gs_shutter_extraFrameThk - 0.01, 15,
						a/2, -slantedRevealDepth, 15,
						a/2 + (slantedRevealDepth - gs_shutter_closingDepth + 0.01) * tan(rightWallAngle), -gs_shutter_closingDepth + 0.01, 15,
						a/2 + rightSlantedRevealMod, -gs_shutter_closingDepth + 0.01, 15,
						a/2 + rightSlantedRevealMod, -gs_shutter_closingDepth - gs_shutter_extraFrameThk - 0.01, 15
					numCuts = numCuts + 1

					cutpolya 5, 1+2, 0,
						-a/2, -gs_shutter_closingDepth - gs_shutter_extraFrameThk - 0.01, 15,
						-a/2, -slantedRevealDepth, 15,
						-a/2 - (slantedRevealDepth - gs_shutter_closingDepth + 0.01) * tan(leftWallAngle), -gs_shutter_closingDepth + 0.01, 15,
						-a/2 - leftSlantedRevealMod, -gs_shutter_closingDepth + 0.01, 15,
						-a/2 - leftSlantedRevealMod, -gs_shutter_closingDepth - gs_shutter_extraFrameThk - 0.01, 15
					numCuts = numCuts + 1

					del 1

					addy b
					roty 90
					rotz -90
					cutpolya 5, 1+2, 0,
						0, -gs_shutter_closingDepth - gs_shutter_extraFrameThk - 0.01, 15,
						0, -slantedRevealDepth, 15,
						-(slantedRevealDepth - gs_shutter_closingDepth + 0.01) * tan(topWallAngle), -gs_shutter_closingDepth + 0.01, 15,
						-topSlantedRevealMod, -gs_shutter_closingDepth + 0.01, 15,
						-topSlantedRevealMod, -gs_shutter_closingDepth - gs_shutter_extraFrameThk - 0.01, 15
					numCuts = numCuts + 1

					del 3
				endif
			else
				leftWallAngle	= 0
				rightWallAngle	= 0
				topWallAngle	= 0
			endif
		endif


		resol nArchResolution

		if iWindowShape = SHAPE_RECTANGULAR then
			addz gs_shutter_closingDepth

			prism_ 5, gs_shutter_extraFrameThk,
				-a/2 - gs_shutter_extraFrameThk * tan(leftWallAngle),  -gs_shutter_extraFrameThk * tan(bottomWallAngle), 15,
				-a/2 + gs_shutter_extraFrameWidth, -gs_shutter_extraFrameThk * tan(bottomWallAngle), 15,
				-a/2 + gs_shutter_extraFrameWidth, b - gs_shutter_extraFrameWidth, 15,
				-a/2 - gs_shutter_extraFrameThk * tan(leftWallAngle), b + gs_shutter_extraFrameThk * tan(topWallAngle), 15,
				-a/2 - gs_shutter_extraFrameThk * tan(leftWallAngle), -gs_shutter_extraFrameThk * tan(bottomWallAngle), -1

			prism_ 5, gs_shutter_extraFrameThk,
				 a/2 + gs_shutter_extraFrameThk * tan(rightWallAngle), -gs_shutter_extraFrameThk * tan(bottomWallAngle), 15,
				 a/2 - gs_shutter_extraFrameWidth, -gs_shutter_extraFrameThk * tan(bottomWallAngle), 15,
				 a/2 - gs_shutter_extraFrameWidth, b - gs_shutter_extraFrameWidth, 15,
				 a/2 + gs_shutter_extraFrameThk * tan(rightWallAngle), b + gs_shutter_extraFrameThk * tan(topWallAngle), 15,
				 a/2 + gs_shutter_extraFrameThk * tan(rightWallAngle), -gs_shutter_extraFrameThk * tan(bottomWallAngle), -1

			rotx 90
			gosub "TextureDirection"
			del 1

			prism_ 5, gs_shutter_extraFrameThk,
				-a/2 - gs_shutter_extraFrameThk * tan(leftWallAngle), b + gs_shutter_extraFrameThk * tan(topWallAngle), 15,
				 a/2 + gs_shutter_extraFrameThk * tan(rightWallAngle), b + gs_shutter_extraFrameThk * tan(topWallAngle), 15,
				 a/2 - gs_shutter_extraFrameWidth, b - gs_shutter_extraFrameWidth, 15,
				-a/2 + gs_shutter_extraFrameWidth, b - gs_shutter_extraFrameWidth, 15,
				-a/2 - gs_shutter_extraFrameThk * tan(leftWallAngle), b + gs_shutter_extraFrameThk * tan(topWallAngle), -1

			roty 90
			gosub "TextureDirection"

			del 2
		endif

		if iWindowShape = SHAPE_ARCHED then
			radOuter = max(a/2, ((a/2)^2 + gs_shutPanel_archHeight^2) / (2 * gs_shutPanel_archHeight))
			radInner = radOuter - gs_shutter_extraFrameWidth
			origY = b - radOuter

			prism_ 11, gs_shutter_extraFrameThk,
				-a/2,								0,																		15,
				-a/2,								origY + sqr(radOuter^2 - (a/2)^2),										79,
				 0,									origY,																	915,
				 a/2,								origY + sqr(radOuter^2 - (a/2)^2),										3015,
				 a/2,								0,																		15,
				 a/2 - gs_shutter_extraFrameWidth,	0,																		15,
				 a/2 - gs_shutter_extraFrameWidth,	origY + sqr(radInner^2 - (a/2 - gs_shutter_extraFrameWidth)^2) - EPS,	15,
				 a/2 - gs_shutter_extraFrameWidth,	origY + sqr(radInner^2 - (a/2 - gs_shutter_extraFrameWidth)^2),			79,
				-a/2 + gs_shutter_extraFrameWidth,	origY + sqr(radInner^2 - (a/2 - gs_shutter_extraFrameWidth)^2),			3015,
				-a/2 + gs_shutter_extraFrameWidth,	0,																		15,
				-a/2,								0,																		-1
		endif

		if iWindowShape = SHAPE_ELLIPSEARCH then
			put -a/2, 0, 15,
				-a/2, b - gs_shutPanel_archHeight, 15

			R1 = smallRadiusEllips
			archHeight = gs_shutPanel_archHeight
			halfAxis = a/2

			R2 = (halfAxis^2 + archHeight^2 - 2 * R1 * halfAxis) / (2 * archHeight - 2 * R1)
			alphaMiddle = abs(atn((halfAxis - R1) / (R2 - archHeight)))
			alphaSide = 90 - alphaMiddle

			put R1, -alphaSide, 2015,
				R2, -alphaMiddle * 2, 2015,
				R1, -alphaSide, 2015

			put	a/2, b - gs_shutPanel_archHeight, 15,
				a/2, 0, 15,
				a/2 - gs_shutter_extraFrameWidth, 0, 15,
				a/2 - gs_shutter_extraFrameWidth, b - gs_shutPanel_archHeight, 15

			archHeight = gs_shutPanel_archHeight - gs_shutter_extraFrameWidth
			halfAxis = a/2 - gs_shutter_extraFrameWidth
			R1 = smallRadiusEllips - gs_shutter_extraFrameWidth
			R2 = (halfAxis^2 + archHeight^2 - 2 * R1 * halfAxis) / (2 * archHeight - 2 * R1)
			alphaMiddle = abs(atn((halfAxis - R1) / (R2 - archHeight)))
			alphaSide = 90 - alphaMiddle

			put R1, alphaSide, 2015,
				R2, alphaMiddle * 2, 2015,
				R1, alphaSide, 2015

			put	-a/2 + gs_shutter_extraFrameWidth, b - gs_shutPanel_archHeight, 15,
				-a/2 + gs_shutter_extraFrameWidth, 0, 15

			prism_ NSP/3, gs_shutter_extraFrameThk,
				get(NSP)

		endif

		for i = 1 to numCuts
			cutend
		next i
	endif



	if iRevealType = REVEAL_DOUBLE_SPLAYED | iRevealType = REVEAL_OUTSIDE_SPLAYED then del 1
return


! ------------------------------------------------------------------------------
"Panel_Opening_Geometry":
! ------------------------------------------------------------------------------

	add axisX, gs_shutter_innerOffset, axisY
	mulx sideSign

	rotationRad = sqr((distY + panelThk / 2)^2 + (distX + panelWidth)^2)
	startAngle = -atn((distY + panelThk / 2) / (distX + panelWidth))

	hotspot panelWidth + distX, b/2,  distY + panelThk / 2, unID, gs_shutter_opAngle, 4 + 128 : unID = unID + 1

	roty startAngle + gs_shutter_opAngle
	hotspot rotationRad, b/2, 0, unID, gs_shutter_opAngle, 5 : unID = unID + 1
	del 1
	hotspot 0,			b/2, 0, unID, gs_shutter_opAngle, 6 : unID = unID + 1
	hotspot 0,			b/2+sideSign, 0, unID, gs_shutter_opAngle, 7 : unID = unID + 1

	roty gs_shutter_opAngle
	add distX, 0, distY

	nTransform = 4

	bFullOpenedNoThk = bNoThickness & (abs(gs_shutter_opAngle - 180) < EPS)

	bDividerPlaneNeeded = 1
	if bNoThickness | abs(gs_shutter_opAngle) > EPS | \
		gs_shutter_nPanels = 1 | gs_shutPanel_iType = PANEL_CUSTOM then

		bDividerPlaneNeeded = 0
	endif

	if not(bFullOpenedNoThk & (nPanel <> 1)) then
		gosub "callShutterPanel"
	endif

	for i = 2 to nPanel
		if (nPanelLeft = 0 | nPanelRight = 0) & i = nPanel then bDividerPlaneNeeded = 0

		if i mod 2 = 0 then
			add panelWidth, 0, panelThk
			roty -gs_shutter_opAngle
			addz -panelThk

			nTransform = nTransform + 3
		else
			addx panelWidth
			roty gs_shutter_opAngle

			nTransform = nTransform + 2
		endif


		if not(bFullOpenedNoThk & (i < nPanel)) then
			gosub "callShutterPanel"
		endif

	next i

	del nTransform
return


! ==============================================================================
"Folding_shutter":
! ==============================================================================

	panelHeight = b - 2 * distShutterWall
	panelWidth = a / (gs_shutter_nPanels + gs_shutter_nPanels2)

	maxOpWidth = a - gs_shutPanel_thk * (gs_shutter_nPanels + gs_shutter_nPanels2)

	if gs_foldingShutter_iStacking = STACKING_OUTSIDE then
		addz panelWidth + panelThk
		mulz -1
	endif

	add -a/2 + gs_shutter_nPanels * gs_shutPanel_thk + maxOpWidth * gs_shutter_nPanels / (gs_shutter_nPanels + gs_shutter_nPanels2), \
			panelHeight/2, \
			panelThk + gs_foldingShutter_ovhg * (gs_foldingShutter_iStacking = STACKING_OUTSIDE)
	hotspot  0,						0, 0, unID, gs_shutter_opLength_1, 1,	gs_shutter_opLength : unID = unID + 1
	hotspot -gs_shutter_opLength_1,	0, 0, unID, gs_shutter_opLength_1, 2,	gs_shutter_opLength : unID = unID + 1
	hotspot  1,						0, 0, unID, gs_shutter_opLength_1, 3,	gs_shutter_opLength : unID = unID + 1

	hotspot  0,						0, 0, unID, gs_shutter_opLength_2, 1,	gs_shutter_opLength : unID = unID + 1
	hotspot  gs_shutter_opLength_2,	0, 0, unID, gs_shutter_opLength_2, 2,	gs_shutter_opLength : unID = unID + 1
	hotspot -1,						0, 0, unID, gs_shutter_opLength_2, 3,	gs_shutter_opLength : unID = unID + 1

	del 1

	add 0, distShutterWall, gs_foldingShutter_ovhg * (gs_foldingShutter_iStacking = STACKING_OUTSIDE)

	bFullOpened = 0
	if abs (gs_shutter_closedLength) < EPS then bFullOpened = 1

	for i = 1 to 2
		add -a/2, 0, panelThk

		if i = 1 then
			openLength = gs_shutter_opLength_1
			nPanels = gs_shutter_nPanels
		else
			openLength = gs_shutter_opLength_2
			nPanels = gs_shutter_nPanels2
		endif

		nTransform = 0

		if bFullOpened and bNoThickness then
			roty -90
			addz -nPanels * gs_shutPanel_thk

			gosub "callShutterPanel"

			plane_ 5,
				0,	0,				0,							15,
				0,	panelHeight,	0,							15,
				0,	panelHeight,	nPanels * gs_shutPanel_thk,	15,
				0,	0,				nPanels * gs_shutPanel_thk,	15,
				0,	0,				0,							-1

			plane_ 5,
				panelWidth,	0,				0,							15,
				panelWidth,	panelHeight,	0,							15,
				panelWidth,	panelHeight,	nPanels * gs_shutPanel_thk,	15,
				panelWidth,	0,				nPanels * gs_shutPanel_thk,	15,
				panelWidth,	0,				0,							-1

			roty 90
			gosub "TextureDirection"

			del 3
		else
			if bFullOpened & gs_shutPanel_iType <> PANEL_CUSTOM & gs_shutPanel_iType <> PANEL_Z then bFoldingDividerPlaneNeeded = 1
			if abs(gs_shutter_opLength) < EPS then bDividerPlaneNeeded = 1
			for j = 1 to nPanels
				if j = nPanels then bFoldingDividerPlaneNeeded = 0

				panelWidthInLine = (a - gs_shutter_opLength) / (gs_shutter_nPanels + gs_shutter_nPanels2)

				if abs(panelWidthInLine - panelWidth) < EPS then
					addz -panelThk
					if gs_foldingShutter_iStacking = STACKING_OUTSIDE then
						addz panelthk
						mulz -1
					endif
					gosub "callShutterPanel"
					if gs_foldingShutter_iStacking = STACKING_OUTSIDE then del 2
					del 1
					addx panelWidth
					nTransform = nTransform + 1
				else

					alpha = acs(panelWidthInLine / sqr(panelWidth^2 + panelThk^2)) + atn (panelThk / panelWidth)

					if j mod 2 = 1 then
						roty -alpha
						addz - panelThk
						if gs_foldingShutter_iStacking = STACKING_OUTSIDE then
							addz panelthk
							mulz -1
						endif
						gosub "callShutterPanel"
						if gs_foldingShutter_iStacking = STACKING_OUTSIDE then del 2
						addx panelWidth
						nTransform = nTransform + 3
					else
						roty 2 * alpha
						if gs_foldingShutter_iStacking = STACKING_OUTSIDE then
							addz panelthk
							mulz -1
						endif
						gosub "callShutterPanel"
						if gs_foldingShutter_iStacking = STACKING_OUTSIDE then del 2
						add panelWidth, 0, panelThk
						roty -alpha
						nTransform = nTransform + 3
					endif
				endif

			next j
		endif

		del nTransform + 1
		mulx -1
	next i
	del 3

	if gs_foldingShutter_iStacking = STACKING_OUTSIDE then del 2

return


! ==============================================================================
"Outfolding_shutter":
! ==============================================================================

	panelHeight = b - 2 * distShutterWall

	if not(gs_shutter_opened) then bDividerPlaneNeeded = 1

	for i = 1 to 2
		panelInMax = a/2 - distShutterWall

		if iRevealType = 8 | iRevealType = 9 then
			if i = 1 then
				panelWidthIn = min(panelInMax, outfolding_innerPanelLeft + distShutterWall * (tan(180 - leftWallAngle/2) + tan((90 - leftWallAngle) / 2)))
				actSideAngle = leftWallAngle
			else
				panelWidthIn = min(panelInMax, outfolding_innerPanelRight + distShutterWall * (tan(180 - rightWallAngle/2) + tan((90 - rightWallAngle) / 2)))
				actSideAngle = rightWallAngle
			endif
			panelWidthOut = a / 2 - panelWidthIn - distShutterWall
			panelStartX = distShutterWall
			axisDepth = -distShutterWall + outfolding_innerPanelLeft * cos(leftWallAngle)
		else
			panelWidthIn = min(panelInMax, gs_outFoldingShutter_panelIn)
			panelWidthOut = a / 2 - panelWidthIn - distShutterWall
			panelStartX = distShutterWall
			actSideAngle = 0
			axisDepth = gs_outFoldingShutter_panelIn - distShutterWall
		endif

		add -a/2 + panelStartX, distShutterWall, axisDepth
		if gs_shutter_opened then roty 90 + actSideAngle
		panelWidth = panelWidthIn

		gosub "callShutterPanel"

		addx panelWidth

		if gs_shutter_opened then roty 90 - actSideAngle

		if panelWidthOut > EPS then
			panelWidth = panelWidthOut

			gosub "callShutterPanel"
		endif

		del 2 + 2 * gs_shutter_opened

		mulx -1
	next i

	del 2

return


! ==============================================================================
"Sliding_shutter":
! ==============================================================================

	if gs_sunShade_bAutomaticHeight then
		panelHeight = b
	else
		panelHeight = gs_sunShade_height
	endif
	panelWidth = a / gs_shutter_nPanels


! --- Rail ---------------------------------------------------------------------

	railLeftEnd		= -a/2 - panelWidth * (nPanelLeft > 0)		! these variables needed
	railRightEnd	= a/2 + panelWidth * (nPanelRight > 0)		! for positioning panels
	railLength		= railRightEnd - railLeftEnd

	if not(bNoThickness) then
		bSecondRail = (nPanelLeft = 2 | nPanelRight = 2)

		railLeftOvhg = 0
		if bLeftCornerFunction then
			railLeftOvhg = - (gs_slidingShutter_panelDist * 2 + panelThk * 3/2 + gs_slidingShutter_railWidth / 2) / tan(leftCornerAngle / 2)
		endif

		railRightOvhg = 0
		if bRightCornerFunction then
			railRightOvhg = (gs_slidingShutter_panelDist * 2 + panelThk * 3/2 + gs_slidingShutter_railWidth / 2) / tan(rightCornerAngle / 2)  + 2
		endif


		add railLeftEnd + railLeftOvhg, panelHeight + gs_slidingShutter_stickLength, -(gs_slidingShutter_panelDist + panelThk/2 - gs_slidingShutter_railWidth/2)
		roty 90

		if bLeftCornerFunction then
			add -(gs_slidingShutter_panelDist + panelThk/2 - gs_slidingShutter_railWidth/2), 0, -railLeftOvhg - (gs_casingThkOnFacade / tan(leftCornerAngle/2)) - gs_casingThkAtWindow
			roty 90 - leftCornerAngle/2
			cutplane 1, 1, 0, 1
			del 2
		endif

		if bRightCornerFunction then
			add -(gs_slidingShutter_panelDist + panelThk/2 - gs_slidingShutter_railWidth/2), 0, railLength + gs_casingThkOnFacade / tan(rightCornerAngle/2) + gs_casingThkAtWindow
			roty rightCornerAngle/2 - 90
			cutplane
			del 2
		endif

		material gs_shutSliding_matRail

		for i = 1 to 1 + bSecondRail
			prism_ 13, railLength - railLeftOvhg + railRightOvhg,
				0, 0, 15,
				gs_slidingShutter_railWidth/3, 0, 15,
				gs_slidingShutter_railWidth/3, gs_slidingShutter_railWidth/6, 15,
				gs_slidingShutter_railWidth/6, gs_slidingShutter_railWidth/6, 15,
				gs_slidingShutter_railWidth/6, gs_slidingShutter_railWidth*5/6, 15,
				gs_slidingShutter_railWidth*5/6, gs_slidingShutter_railWidth*5/6, 15,
				gs_slidingShutter_railWidth*5/6, gs_slidingShutter_railWidth/6, 15,
				gs_slidingShutter_railWidth*2/3, gs_slidingShutter_railWidth/6, 15,
				gs_slidingShutter_railWidth*2/3, 0, 15,
				gs_slidingShutter_railWidth, 0, 15,
				gs_slidingShutter_railWidth, gs_slidingShutter_railWidth, 15,
				0, gs_slidingShutter_railWidth, 15,
				0, 0, -1

			addx gs_slidingShutter_panelDist + panelThk
		next i

		del 3 + bSecondRail

! --- Cover --------------------------------------------------------------------

		coverEndOffset = 0.03

		if gs_slidingShutter_iCover <> COVER_NONE then
			coverThk = 0.005
			coverDepth = gs_slidingShutter_panelDist * 2 + panelThk*3/2 + gs_slidingShutter_railWidth/2 + 0.02

			if bLeftCornerFunction then
				if leftCornerAngle < 180 then
					coverLeftEnd = railLeftEnd - (coverDepth + coverThk) / tan(leftCornerAngle / 2) - (gs_casingThkOnFacade / tan(leftCornerAngle/2)) - gs_casingThkAtWindow
				else
					coverLeftEnd = railLeftEnd - 1
				endif
			else
				coverLeftEnd = railLeftEnd - coverEndOffset
			endif

			if bRightCornerFunction then
				if rightCornerAngle < 180 then
					coverRightEnd = railRightEnd + (coverDepth + coverThk) / tan(rightCornerAngle / 2) + gs_casingThkOnFacade / tan(rightCornerAngle/2) + gs_casingThkAtWindow
				else
					coverRightEnd = railRightEnd + 1
				endif
			else
				coverRightEnd = railRightEnd + coverEndOffset
			endif

			coverLength = coverRightEnd - coverLeftEnd

			add coverLeftEnd,  panelHeight + gs_slidingShutter_stickLength - 0.02, 0
			roty 90

			material gs_shutSliding_matRail

			if gs_slidingShutter_iCover = COVER_Z then
				prism_ 9, coverLength,
					 coverDepth,						0,		15,
					 coverDepth,						0.076,	15,
					-gs_casingThkOnFacade,				0.116,	15,
					-gs_casingThkOnFacade,				0.17,	15,
					-gs_casingThkOnFacade + coverThk,	0.17,	15,
					-gs_casingThkOnFacade + coverThk,	0.12,	15,
					 coverDepth + coverThk,				0.08,	15,
					 coverDepth + coverThk,				0,		15,
					 coverDepth,						0,		-1

				rotz 90
				gosub "TextureDirection"
				del 1
			endif

			if gs_slidingShutter_iCover = COVER_BOX then
				prism_ 7, coverLength,
					 coverDepth,			0,					15,
					 coverDepth,			0.08 - coverThk,	15,
					-gs_casingThkOnFacade,	0.08 - coverThk,	15,
					-gs_casingThkOnFacade,	0.08,				15,
					 coverDepth + coverThk,	0.08,				15,
					 coverDepth + coverThk,	0,					15,
					 coverDepth,			0,					-1

				gosub "TextureDirection"
			endif

			del 2

		endif
	endif

	if bRightCornerFunction then cutend
	if bLeftCornerFunction then cutend

! --- Panels -------------------------------------------------------------------

	maxOpLength = a
	maxWidthLeft = nPanelLeft / gs_shutter_nPanels * maxOpLength
	maxWidthRight = nPanelRight / gs_shutter_nPanels * maxOpLength

	if gs_shutter_opLength_1 + gs_shutter_opLength_2 > maxOplength then
		gs_shutter_opLength_1 = gs_shutter_opLength_1 / (gs_shutter_opLength_1 + gs_shutter_opLength_2) * maxOplength
		gs_shutter_opLength_2 = maxOplength - gs_shutter_opLength_1
	endif

	add -a/2 + maxWidthLeft, panelHeight/2, -panelThk

	if nPanelLeft > 0 then
		hotspot  0,						0, 0, unID, gs_shutter_opLength_1, 1,	gs_shutter_opLength : unID = unID + 1
		hotspot -gs_shutter_opLength_1,	0, 0, unID, gs_shutter_opLength_1, 2,	gs_shutter_opLength : unID = unID + 1
		hotspot  1,						0, 0, unID, gs_shutter_opLength_1, 3,	gs_shutter_opLength : unID = unID + 1
	endif
	if nPanelRight > 0 then
		hotspot  0,						0, 0, unID, gs_shutter_opLength_2, 1,	gs_shutter_opLength : unID = unID + 1
		hotspot  gs_shutter_opLength_2,	0, 0, unID, gs_shutter_opLength_2, 2,	gs_shutter_opLength : unID = unID + 1
		hotspot -1,						0, 0, unID, gs_shutter_opLength_2, 3,	gs_shutter_opLength : unID = unID + 1
	endif

	del 1

	dim leftDiff[2]
	dim rightDiff[2]
	if nPanelLeft = 1 then
		leftDiff[1] = maxWidthLeft - gs_shutter_opLength_1
		leftDiff[2] = 0
	endif
	if nPanelLeft = 2 then
		if gs_shutter_iPanelPos = PANELPOS_LEFTBOTTOM | gs_shutter_iPanelPos = PANELPOS_DOUBLEBOTTOM then
			leftDiff[1] = maxWidthLeft - gs_shutter_opLength_1
			leftDiff[2] = max (0, maxWidthLeft - gs_shutter_opLength_1 - panelWidth)
		else
			leftDiff[1] = max (0, maxWidthLeft - gs_shutter_opLength_1 - panelWidth)
			leftDiff[2] = maxWidthLeft - gs_shutter_opLength_1
		endif
	endif
	if nPanelRight = 1 then
		rightDiff[1] = maxWidthRight - gs_shutter_opLength_2
		rightDiff[2] = 0
	endif
	if nPanelRight = 2 then
		if gs_shutter_iPanelPos = PANELPOS_RIGHTBOTTOM | gs_shutter_iPanelPos = PANELPOS_DOUBLEBOTTOM then
			rightDiff[1] = maxWidthRight - gs_shutter_opLength_2
			rightDiff[2] = max (0, maxWidthRight - gs_shutter_opLength_2 - panelWidth)
		else
			rightDiff[1] = max (0, maxWidthRight - gs_shutter_opLength_2 - panelWidth)
			rightDiff[2] = maxWidthRight - gs_shutter_opLength_2
		endif
	endif

	addz  -gs_slidingShutter_panelDist - panelThk

	for i = 1 to nPanelLeft
		addx railLeftEnd + leftDiff[i]
		if gs_shutPanel_iType = PANEL_Z | gs_shutPanel_iType = PANEL_ROTATEDBOARDS then
			addz panelThk
			mulz -1
		endif
		if gs_shutPanel_iType = PANEL_Z | gs_shutPanel_iType = PANEL_CUSTOM then
			addx panelWidth
			mulx -1
		endif
		gosub "callShutterPanel"
		if gs_shutPanel_iType = PANEL_Z | gs_shutPanel_iType = PANEL_ROTATEDBOARDS then del 2
		if gs_shutPanel_iType = PANEL_Z | gs_shutPanel_iType = PANEL_CUSTOM then del 2
		del 1

		addz -panelThk - gs_slidingShutter_panelDist
	next i

	del nPanelLeft

	for i = 1 to nPanelRight
		addx railRightEnd - panelWidth - rightDiff[i]
		if gs_shutPanel_iType = PANEL_Z | gs_shutPanel_iType = PANEL_ROTATEDBOARDS then
			addz panelThk
			mulz -1
		endif
		gosub "callShutterPanel"
		if gs_shutPanel_iType = PANEL_Z | gs_shutPanel_iType = PANEL_ROTATEDBOARDS then del 2
		del 1

		addz -panelThk - gs_slidingShutter_panelDist
	next i

	del 1 + nPanelRight
return


! ==============================================================================
"callShutterPanel":
! ==============================================================================

	call "ShutterPanels_kmod" parameters a				= panelWidth,
					b								= panelHeight,
					lod3D_sunShade					= lod3D_sunShade,
					gs_shutter_innerOffset			= gs_shutter_innerOffset,
					gs_shutPanel_iShape 			= gs_shutPanel_iShape,
					gs_shutPanel_archHeight			= gs_shutPanel_archHeight,
					gs_shutPanel_iType				= gs_shutPanel_iType,
					gs_cust_shutterPanel			= gs_cust_shutterPanel,
					gs_shutPanel_Thk				= gs_shutPanel_Thk,
					gs_shutPanel_frameWidth			= gs_shutPanel_frameWidth,
					gs_shutPanel_BDiffBottomFrame	= gs_shutPanel_BDiffBottomFrame,
					gs_shutPanel_frameWidthBottom	= gs_shutPanel_frameWidthBottom,
					gs_shutPanel_fieldThk			= gs_shutPanel_fieldThk,
					gs_shutPanel_louverThk			= gs_shutPanel_louverThk,
					gs_shutPanel_louverWidth		= gs_shutPanel_louverWidth,
					gs_shutPanel_louverAngle		= gs_shutPanel_louverAngle,
					gs_shutPanel_midFrameHorW		= gs_shutPanel_midFrameHorW,
					gs_shutPanel_midFrameVertW		= gs_shutPanel_midFrameVertW,
					gs_shutPanel_nHoleHor			= gs_shutPanel_nHoleHor,
					gs_shutPanel_nHoleVert			= gs_shutPanel_nHoleVert,
					gs_shutPanel_holeRadius			= gs_shutPanel_holeRadius,
					gs_shutPanel_ZBoardW			= gs_shutPanel_ZBoardW,
					gs_shutPanel_ZWidth				= gs_shutPanel_ZWidth,
					gs_shutPanel_ZThk				= gs_shutPanel_ZThk,
					gs_shutPanel_boardThkVert		= gs_shutPanel_boardThkVert,
					gs_shutPanel_boardThkHor		= gs_shutPanel_boardThkHor,
					gs_shutPanel_vertBoardW			= gs_shutPanel_vertBoardW,
					gs_shutPanel_horBoardW			= gs_shutPanel_horBoardW,

					gs_sunShade_cutLinesPen			= gs_sunShade_cutLinesPen,
					gs_sunShade_unCutLinesPen		= gs_sunShade_unCutLinesPen,
					gs_sunShade_cutFillType			= gs_sunShade_cutFillType,
					gs_sunShade_cutFillPen			= gs_sunShade_cutFillPen,
					gs_sunShade_cutFillBackPen		= gs_sunShade_cutFillBackPen,

					gs_shutPanel_materialMain		= gs_shutPanel_materialMain,
					gs_shutPanel_materialAcc		= gs_shutPanel_materialAcc,

					nArchResolution					= nArchResolution,
					smallRadiusEllips				= smallRadiusEllips

! --- Contour visibility corrections for s/e -----------------------------------

	if bDividerPlaneNeeded then
		addx panelWidth

		model wire
		planeThk = gs_shutPanel_Thk
		if gs_shutPanel_iType = PANEL_Z then planeThk = gs_shutPanel_boardThkVert

		if bNoThickness then
			lin_ 0, 0, 0, 0, panelHeight, 0
		else
			plane_ 5,
				0, 0,			0,			15,
				0, panelHeight,	0,			15,
				0, panelHeight,	planeThk,	15,
				0, 0,			planeThk,	15,
				0, 0,			0,			-1
		endif

		model solid
		del 1
	endif

	if bFoldingDividerPlaneNeeded then		! Divider for full opened folding
		model wire
		plane_ 5,
			0,			0,				gs_shutPanel_Thk * (j mod 2 = 0),	15,
			panelWidth,	0,				gs_shutPanel_Thk * (j mod 2 = 0),	15,
			panelWidth,	panelHeight,	gs_shutPanel_Thk * (j mod 2 = 0),	15,
			0,			panelHeight,	gs_shutPanel_Thk * (j mod 2 = 0),	15,
			0,			0,				gs_shutPanel_Thk * (j mod 2 = 0),	-1
		model solid
	endif

! --- Hanging sticks for sliding panels ----------------------------------------

	if gs_sunShade_iType = SUNSHADE_SLIDING & not(bNoThickness) then
		material gs_shutSliding_matRail
		add panelWidth/4, panelHeight, panelThk/2

		rotx -90

		cylind gs_slidingShutter_stickLength, gs_slidingShutter_stickRad

		addx panelWidth/2

		cylind gs_slidingShutter_stickLength, gs_slidingShutter_stickRad

		del 3
	endif
return


! ==============================================================================
"TextureDirection":
! ==============================================================================

	base
	vert 0, 0, 0
	vert 1, 0, 0
	vert 0, 1, 0
	vert 0, 0, 1
	coor 2, -1, -2, -3, -4
	body -1

return


! ==============================================================================
"Rolling_shutter":
! ==============================================================================

	call "RollingShutter_kmod" parameters A		= A,
				B							= B,
				AC_HoleSideMaterial			= AC_HoleSideMaterial,
				lod3D_sunShade				= lod3D_sunShade,
				gs_shutter_closedHeight		= gs_shutter_closedHeight,
				gs_shutRoll_iPlacement		= gs_shutRoll_iPlacement,
				gs_shutRoll_iBoxType		= gs_shutRoll_iBoxType,
				gs_shutRoll_cutWallBehind	= gs_shutRoll_cutWallBehind,
				gs_shutRoll_boxHeight		= gs_shutRoll_boxHeight,
				gs_shutRoll_boxWidth		= gs_shutRoll_boxWidth,
				gs_shutRoll_boxAngle		= gs_shutRoll_boxAngle,
				gs_shutRoll_iBoxDefaultSize	= gs_shutRoll_iBoxDefaultSize,
				gs_shutRoll_boxOffsetLeft	= gs_shutRoll_boxOffsetLeft,
				gs_shutRoll_boxOffsetRight	= gs_shutRoll_boxOffsetRight,
				gs_shutRoll_railDepth		= gs_shutRoll_railDepth,
				gs_shutRoll_distFromWall	= gs_shutRoll_distFromWall,
				gs_shutRoll_distFromHead	= gs_shutRoll_distFromHead,
				gs_shutRoll_segmentWidth	= gs_shutRoll_segmentWidth,

				gs_sunShade_cutLinesPen		= gs_sunShade_cutLinesPen,
				gs_sunShade_unCutLinesPen	= gs_sunShade_unCutLinesPen,
				gs_sunShade_cutFillType		= gs_sunShade_cutFillType,
				gs_sunShade_cutFillPen		= gs_sunShade_cutFillPen,
				gs_sunShade_cutFillBackPen	= gs_sunShade_cutFillBackPen,
				gs_sunShade_insFillType		= gs_sunShade_insFillType,
				gs_sunShade_insFillPen		= gs_sunShade_insFillPen,
				gs_sunShade_insFillBackPen	= gs_sunShade_insFillBackPen,

				gs_shutRoll_matBox			= gs_shutRoll_matBox,
				gs_shutRoll_matSegm			= gs_shutRoll_matSegm,
				gs_shutRoll_matRail			= gs_shutRoll_matRail,

				gs_casingThkOnFacade		= gs_casingThkOnFacade,
				bLeftCornerFunction			= bLeftCornerFunction,
				bRightCornerFunction		= bRightCornerFunction,
				leftCornerAngle				= leftCornerAngle,
				rightCornerAngle			= rightCornerAngle,
				returned_parameters posSunShade,
									lengthSunShade,
									sunshadepoly

return


! ==============================================================================
"Venetian_Blinds":
! ==============================================================================

	call "VenetianBlinds_kmod" parameters A 		= A,
				B							= B,
				lod3D_sunShade				= lod3D_sunShade,
				gs_sunShade_iType			= gs_sunShade_iType,
				gs_shutter_closedHeight		= gs_shutter_closedHeight,
				gs_shutLam_iPlacement		= gs_shutLam_iPlacement,
				gs_shutLam_cutWallBehind	= gs_shutLam_cutWallBehind,
				gs_shutLam_boxHeight		= gs_shutLam_boxHeight,
				gs_shutLam_boxWidth			= gs_shutLam_boxWidth,
				gs_shutLam_bOpenBox			= gs_shutLam_bOpenBox,
				gs_shutLam_bRail			= gs_shutLam_bRail,
				gs_shutLam_coverWidth		= gs_shutLam_coverWidth,
				gs_shutLam_distFromWall		= gs_shutLam_distFromWall,
				gs_shutLam_distFromHead		= gs_shutLam_distFromHead,
				gs_shutLam_segmentWidth		= gs_shutLam_segmentWidth,
				gs_shutLam_rotation			= gs_shutLam_rotation,

				gs_shutLam2_boxHeight		= gs_shutLam2_boxHeight,
				gs_shutLam2_boxWidth		= gs_shutLam2_boxWidth,
				gs_shutLam2_distFromWindow	= gs_shutLam2_distFromWindow,
				gs_shutLam2_distFromHead	= gs_shutLam2_distFromHead,
				gs_shutLam2_segmentWidth	= gs_shutLam2_segmentWidth,
				gs_shutLam2_rotation		= gs_shutLam2_rotation,

				gs_sunShade_cutLinesPen		= gs_sunShade_cutLinesPen,
				gs_sunShade_unCutLinesPen	= gs_sunShade_unCutLinesPen,
				gs_sunShade_cutFillType		= gs_sunShade_cutFillType,
				gs_sunShade_cutFillPen		= gs_sunShade_cutFillPen,
				gs_sunShade_cutFillBackPen	= gs_sunShade_cutFillBackPen,
				gs_sunShade_insFillType		= gs_sunShade_insFillType,
				gs_sunShade_insFillPen		= gs_sunShade_insFillPen,
				gs_sunShade_insFillBackPen	= gs_sunShade_insFillBackPen,

				gs_shutLam_matBox			= gs_shutLam_matBox,
				gs_shutLam_matLam			= gs_shutLam_matLam,

				gs_casingThkOnFacade		= gs_casingThkOnFacade,
				gs_casingThkAtWindow		= gs_casingThkAtWindow,
				bLeftCornerFunction			= bLeftCornerFunction,
				bRightCornerFunction		= bRightCornerFunction,
				leftCornerAngle				= leftCornerAngle,
				rightCornerAngle			= rightCornerAngle,
				returned_parameters posSunShade,
									lengthSunShade,
									sunshadepoly
return


