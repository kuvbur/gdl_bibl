
EPS = 0.0001

! iRevealType:
REVEAL_EDGE				= 0
REVEAL_NO				= 1
REVEAL_POSITIVE			= 2
REVEAL_NEGATIVE			= 3
REVEAL_SLANTED			= 4
REVEAL_SPLAYED			= 5
REVEAL_HISTORIC			= 6
REVEAL_DOUBLE			= 7
REVEAL_DOUBLE_SPLAYED	= 8
REVEAL_OUTSIDE_SPLAYED	= 9

! gs_reveal_type_bottom_int
REVEAL_BOTTOM_UNIFORM	= 1
REVEAL_BOTTOM_NO		= 2
REVEAL_BOTTOM_POSITIVE	= 3
REVEAL_BOTTOM_NEGATIVE	= 4

! iWindowShape:
SHAPE_RECTANGULAR			= 0
SHAPE_ARCHED				= 1
SHAPE_ROUND					= 2
SHAPE_EYEBROWS				= 3
SHAPE_HALFCIRCLE			= 4 	! straight side is horizontal
SHAPE_MULTISIDE				= 5
SHAPE_OCTAGONAL				= 6
SHAPE_HALFARCH				= 7
SHAPE_PENTAGON				= 8
SHAPE_QUARTERROUND			= 9
SHAPE_HALFROUND				= 10 	! straight side is vertical
SHAPE_TRAPEZOID				= 11
SHAPE_TRIANGLE				= 12
SHAPE_GOTHICARCH			= 13
SHAPE_ELLIPSEARCH			= 14
SHAPE_ROMBUS				= 15
SHAPE_HORSESHOE				= 16
SHAPE_OGEECENTERED			= 17
SHAPE_SARACENIC				= 18
SHAPE_T						= 19
SHAPE_HALF_T_LEFT			= 20
SHAPE_ARCHED_T				= 21
SHAPE_ARCHED_HALF_T_LEFT	= 22
SHAPE_PARALLELOGRAM			= 23
SHAPE_ELLIPSE				= 24
SHAPE_CORNER_TRIANGLE		= 25
SHAPE_QUARTERROUND_NOFRAME	= 26
SHAPE_HALF_T_RIGHT			= 27
SHAPE_ARCHED_HALF_T_RIGHT	= 28

! Line Property defines:
LINE_PROPERTY_GENERIC	= 0
LINE_PROPERTY_INNER		= 1
LINE_PROPERTY_CONTOUR	= 2

! gs_reveal_set_side:
REVEAL_SET_INSIDE	= 1
REVEAL_SET_OUTSIDE	= 2

! iClosureType:
CLOSURE_NO					= 0
CLOSURE_TRADITIONAL			= 1
CLOSURE_PREFABRICATED		= 2
CLOSURE_CUSTOM				= 3
CLOSURE_SOLID_WALL			= 4
CLOSURE_STUD_WALL			= 5
CLOSURE_STUD_WALL_SIDING	= 6
CLOSURE_BRICK_VENEER		= 7
CLOSURE_VARIABLE			= 8
CLOSURE_PLASTER_REVEAL	 			= 9
CLOSURE_INSULATED_REVEAL			= 10
CLOSURE_INSULATED_FOR_RENOVATION	= 11
CLOSURE_FINISH						= 12
CLOSURE_AIR_SPACE					= 13
CLOSURE_DUTCH_VARIABLE				= 14

! Wall Inset Sizes
PARAPET_SIZE_AUTO	= 1
PARAPET_SIZE_SYMM	= 2
PARAPET_SIZE_ASYMM	= 3

! Wall Inset Bottom at
PARAPET_BOTTOM_CURRENTSTORY	= 1
PARAPET_BOTTOM_WALLBASE		= 2

! iTypeDemolitionFill
RENOVATION_FILL_EXIST		= 1
RENOVATION_FILL_DEMOLISHED	= 2
RENOVATION_FILL_NEW			= 3
RENOVATION_FILL_NEW_FULL	= 4

! =============================================================================
! Reveal Points Indexes
! =============================================================================

idxSillStartRevealLeft		= iRevealPointsIdx[1]
idxSillEndRevealLeft		= iRevealPointsIdx[2]
idxFrameStartRevealLeft		= iRevealPointsIdx[3]
idxFrameEndRevealLeft		= iRevealPointsIdx[4]
idxBoardStartRevealLeft		= iRevealPointsIdx[5]
idxBoardEndRevealLeft		= iRevealPointsIdx[6]
idxSillStartPlasterLeft		= iRevealPointsIdx[7]
idxSillEndPlasterLeft		= iRevealPointsIdx[8]
idxBoardStartPlasterLeft	= iRevealPointsIdx[9]
idxBoardEndPlasterLeft		= iRevealPointsIdx[10]
idxSillStartRevealRight		= iRevealPointsIdx[11]
idxSillEndRevealRight		= iRevealPointsIdx[12]
idxFrameStartRevealRight	= iRevealPointsIdx[13]
idxFrameEndRevealRight		= iRevealPointsIdx[14]
idxBoardStartRevealRight	= iRevealPointsIdx[15]
idxBoardEndRevealRight		= iRevealPointsIdx[16]
idxSillStartPlasterRight	= iRevealPointsIdx[17]
idxSillEndPlasterRight		= iRevealPointsIdx[18]
idxBoardStartPlasterRight	= iRevealPointsIdx[19]
idxBoardEndPlasterRight		= iRevealPointsIdx[20]


! ==============================================================================

bInclinedWall	= (abs(WALL_INCL) > EPS)
curvedWall		= (abs(WIDO_ORIG_DIST) > EPS)
wallIsLeft		= (SYMB_ROTANGLE > EPS) exor WIDO_REVEAL_SIDE
signWallIsLeft	= wallIsleft - not(wallIsleft)

bSlantedInnerSide	= (iRevealType = REVEAL_SLANTED | iRevealType = REVEAL_SPLAYED | iRevealType = REVEAL_HISTORIC | iRevealType = REVEAL_DOUBLE_SPLAYED)
bSlantedOuterSide	= (iRevealType = REVEAL_DOUBLE_SPLAYED | iRevealType = REVEAL_OUTSIDE_SPLAYED)
bHaveMountingFrame	= ((iRevealType = REVEAL_DOUBLE_SPLAYED | iRevealType = REVEAL_OUTSIDE_SPLAYED) & gs_mountingFrame)
bTShapedOpening =  (iWindowShape = SHAPE_T |\
					iWindowShape = SHAPE_HALF_T_LEFT |\
					iWindowShape = SHAPE_HALF_T_RIGHT |\
					iWindowShape = SHAPE_ARCHED_T |\
					iWindowShape = SHAPE_ARCHED_HALF_T_LEFT |\
					iWindowShape = SHAPE_ARCHED_HALF_T_RIGHT)

bHasSidelightLeft = ((iWindowShape = SHAPE_T | \
					  iWindowShape = SHAPE_HALF_T_LEFT | \
					  iWindowShape = SHAPE_ARCHED_T | \
					  iWindowShape = SHAPE_ARCHED_HALF_T_LEFT) & (gs_sidelight_parapet_hgt_left > EPS))

bHasSidelightRight = ((iWindowShape = SHAPE_T | \
					  iWindowShape = SHAPE_HALF_T_RIGHT | \
					  iWindowShape = SHAPE_ARCHED_T | \
					  iWindowShape = SHAPE_ARCHED_HALF_T_RIGHT) & (gs_sidelight_parapet_hgt_right > EPS))

bShapeSameRevealAngles = (iWindowShape = SHAPE_ARCHED |\
						  iWindowShape = SHAPE_ROUND |\
						  iWindowShape = SHAPE_EYEBROWS |\
						  iWindowShape = SHAPE_HALFCIRCLE |\
						  iWindowShape = SHAPE_MULTISIDE |\
						  iWindowShape = SHAPE_OCTAGONAL |\
						  iWindowShape = SHAPE_HALFARCH |\
						  iWindowShape = SHAPE_PENTAGON |\
						  iWindowShape = SHAPE_QUARTERROUND |\
						  iWindowShape = SHAPE_HALFROUND |\
						  iWindowShape = SHAPE_TRAPEZOID |\
						  iWindowShape = SHAPE_TRIANGLE |\
						  iWindowShape = SHAPE_GOTHICARCH |\
						  iWindowShape = SHAPE_ELLIPSEARCH |\
						  iWindowShape = SHAPE_ROMBUS |\
						  iWindowShape = SHAPE_HORSESHOE |\
						  iWindowShape = SHAPE_OGEECENTERED |\
						  iWindowShape = SHAPE_SARACENIC |\
						  iWindowShape = SHAPE_PARALLELOGRAM |\
						  iWindowShape = SHAPE_ELLIPSE |\
						  iWindowShape = SHAPE_CORNER_TRIANGLE |\
						  iWindowShape = SHAPE_QUARTERROUND_NOFRAME)

! ==============================================================================
! Compatibility
! ==============================================================================

openingWidth	= leftWidth + rightWidth
openingHeight	= B


! ==============================================================================

widoLeftJamb	= gs_reveal_left
widoRightJamb	= gs_reveal_right

leftJamb	= gs_reveal_left
rightJamb	= gs_reveal_right


! =============================================================================
! Restrictions for Window Shapes
! =============================================================================

widoHeadDepth = gs_reveal_top

if iWindowShape = SHAPE_ARCHED | iWindowShape = SHAPE_HALFCIRCLE then
	widoLeftJamb	= widoRightJamb
	widoHeadDepth	= widoRightJamb
	leftJamb		= rightJamb

	gs_right_oversize	= 0
	gs_left_oversize	= 0

	thkPlasterAtSillLeft	= thkPlasterAtSillRight
	thkPlasterAtSillTop		= thkPlasterAtSillRight
	thkPlasterAtBoardLeft	= thkPlasterAtBoardRight
	thkPlasterAtBoardTop	= thkPlasterAtBoardRight
endif

if GLOB_SCRIPT_TYPE = 3 then	! Only for 3D
	if iWindowShape = SHAPE_ROUND | iWindowShape = SHAPE_MULTISIDE | \
		iWindowShape = SHAPE_OCTAGONAL | iWindowShape = SHAPE_ELLIPSE  then
		thkPlasterAtSillLeft		= 0
		thkPlasterAtBoardLeft		= 0
	endif

	if iWindowShape = SHAPE_HALFROUND then
		thkPlasterAtSillRight		= 0
		thkPlasterAtBoardRight		= 0
	endif

	if iWindowShape = SHAPE_ROUND | iWindowShape = SHAPE_MULTISIDE | \
		iWindowShape = SHAPE_OCTAGONAL | iWindowShape = SHAPE_ELLIPSE  then
		thkPlasterAtSillTop			= 0
		thkPlasterAtBoardTop		= 0
	endif

	if iWindowShape = SHAPE_ROUND | iWindowShape = SHAPE_MULTISIDE | \
		iWindowShape = SHAPE_OCTAGONAL | iWindowShape = SHAPE_ELLIPSE  then
		thkPlasterAtSillBottom		= 0
		thkPlasterAtBoardBottom		= 0
	endif
endif


! =============================================================================
! Calculations for Corner or horizontally Stacked Window
! =============================================================================

if bRightCornerFunction & abs(rightCornerAngle) > EPS then
	beta = atn ((rightConnWallThk * sin(rightCornerAngle)) / (WALL_THICKNESS + rightConnWallThk * cos(rightCornerAngle)))
	rx = 1 / tan(rightCornerAngle / 2)

	if rightCornerAngle > 180 then
		overSizeRight = max (0, WALL_THICKNESS / tan(360 - rightCornerAngle + beta) + WIDO_SILL / tan(rightCornerAngle / 2))
	else
		overSizeRight = (WIDO_FRAME_THICKNESS + WIDO_SILL) * rx + max (0, WALL_THICKNESS * tan(rightCornerAngle - beta - 90))
	endif
else
	overSizeRight	= gs_right_oversize
endif

if bLeftCornerFunction & abs(leftCornerAngle) > EPS then
	beta = atn ((leftConnWallThk * sin(leftCornerAngle)) / (WALL_THICKNESS + leftConnWallThk * cos(leftCornerAngle)))
	lx = 1 / tan(leftCornerAngle / 2)

	if leftCornerAngle > 180 then
		overSizeLeft = max (0, WALL_THICKNESS / tan(360 - leftCornerAngle + beta) + WIDO_SILL / tan(leftCornerAngle / 2))
	else
		overSizeLeft = (WIDO_FRAME_THICKNESS + WIDO_SILL) * lx + max (0, WALL_THICKNESS * tan(leftCornerAngle - beta - 90))
	endif
else
	overSizeLeft	= gs_left_oversize
endif

if gs_stack_right | (bRightCornerFunction & abs(rightCornerAngle) > EPS) then
	rightJamb				= 0
	widoRightJamb			= 0
	thkPlasterAtSillRight	= 0
	thkPlasterAtBoardRight	= 0
	revealInnerRight		= 0
	gs_reveal_right_angle	= 0
endif

if (bCornerWindow & SYMB_MIRRORED & gs_stack_right) | gs_stack_left | (bLeftCornerFunction & abs(leftCornerAngle) > EPS) then
	leftJamb				= 0
	widoLeftJamb			= 0
	thkPlasterAtSillLeft	= 0
	thkPlasterAtBoardLeft	= 0
	revealInnerLeft			= 0
	gs_reveal_left_angle	= 0
endif

upperJamb = not(gs_stack_top)    * gs_reveal_top
lowerJamb = not(gs_stack_bottom) * gs_reveal_bottom

overSizeLowerOriginal = overSizeLower

overSizeUpper = gs_upper_oversize
overSizeLower = gs_lower_oversize


if iWindowShape = SHAPE_ARCHED then
	overSizeLeft	= 0
	overSizeRight	= 0
	overSizeUpper	= 0
endif

if not(isWindow) then
	thkPlasterAtSillBottom		= 0
	thkPlasterAtBoardBottom		= 0
endif



! ==============================================================================
! Calculations for Inclined Walls
! ==============================================================================

if bInclinedWall then
	bFactor = SYMB_MIRRORED exor WIDO_REVEAL_SIDE exor wallIsLeft
	incFactor = not(bFactor) - bFactor
	incX = incFactor * tan(WALL_INCL)
	incY = incFactor * (1 / cos(WALL_INCL))

	bDir = SYMB_MIRRORED exor (SYMB_ROTANGLE > EPS)
	iDir = not(bDir) - bDir
	incH = cos(WALL_INCL)
	incV = sin(WALL_INCL) * iDir
else
	incX = 0
	incY = 1
	incH = 0
	incV = 0
endif


! ==============================================================================
! Calculations for vertically Stacked Window
! ==============================================================================

if gs_stack_top then
	thkPlasterAtSillTop		= 0
	thkPlasterAtBoardTop	= 0
endif

if gs_stack_bottom then
	thkPlasterAtSillBottom	= 0
	thkPlasterAtBoardBottom	= 0
endif


! ==============================================================================
! Calculations for Curved Walls
! ==============================================================================

if GLOB_SCRIPT_TYPE = 2 | GLOB_SCRIPT_TYPE = 3 then
	if curvedWall & abs(radSill) > EPS then

		if GLOB_SCRIPT_TYPE <> 2 & GLOB_CONTEXT <> 22 then
			widoOrigDist = -WIDO_ORIG_DIST
		else
			widoOrigDist = WIDO_ORIG_DIST
		endif

		tempWOD = abs(widoOrigDist) - (SYMB_ROTANGLE > EPS) * WIDO_FRAME_THICKNESS

		alfaRefWidth = atn(refWidth / tempWOD)

		alfaLeftOs	= atn((leftWidth  + overSizeLeft)  / tempWOD)
		alfaRightOs	= atn((rightWidth + overSizeRight) / tempWOD)

		alfaLeftJamb	= 180 * leftJamb  / radSill / PI
		alfaRightJamb	= 180 * rightJamb / radSill / PI

		alfaLeftInnJamb = atn((leftWidth  + overSizeLeft - (revealInnerLeft * (iRevealType = REVEAL_DOUBLE))) / tempWOD)
		alfaRightInnJamb = atn((rightWidth  + overSizeRight - (revealInnerRight * (iRevealType = REVEAL_DOUBLE))) / tempWOD)

	endif	! curvedWall
endif


! =============================================================================
! Calculations for Parapet dimension
! =============================================================================

gs_parapet_autodim = (iParapetSize = PARAPET_SIZE_AUTO)

parapet_width	= gs_parapet_width
parapet_height	= gs_parapet_height

bParapetWallInset		= (gs_parapet_wall_inset & abs(gs_parapet_inset_thk) > EPS) & bEnableParapetInset
parapetWallInsetDepth	= (gs_parapet_wall_inset & bEnableParapetInset) * gs_parapet_inset_thk


! Elevation of the current story ----------------

if iParapetBottom = PARAPET_BOTTOM_CURRENTSTORY then
	act_st_pos = SYMB_POS_Y - AC_Sill_To_Curr_Story + gs_parapet_botelev - elevationOffset
else
	act_st_pos = gs_parapet_botelev - elevationOffset
endif

if gs_parapet_autodim | (gs_parapet_width < EPS) then
	if GLOB_SCRIPT_TYPE = 2 then
		if vardim1(rightRevealPnts) >= idxBoardEndPlasterRight then
			parapet_width	= sqr ((rightRevealPnts[idxBoardEndPlasterRight][1]-leftRevealPnts[idxBoardEndPlasterLeft][1])^2 + \
			 (rightRevealPnts[idxBoardEndPlasterRight][2]-leftRevealPnts[idxBoardEndPlasterLeft][2])^2)
		endif
	else
		if vardim1(rightRevealPnts) >= idxBoardEndRevealRight then
			parapet_width	= sqr ((rightRevealPnts[idxBoardEndRevealRight][1]-leftRevealPnts[idxBoardEndRevealLeft][1])^2 + \
			 (rightRevealPnts[idxBoardEndRevealRight][2]-leftRevealPnts[idxBoardEndRevealLeft][2])^2)
		endif
	endif
	maxParapetHeight = SYMB_POS_Y - act_st_pos
	parapet_height = maxParapetHeight
else
	maxParapetHeight = SYMB_POS_Y
	if parapet_height > maxParapetHeight then
		parapet_height = maxParapetHeight
	endif
endif

bParapetWallInsetFullHeight	= (bParapetWallInset & (gs_parapet_autodim | parapet_height >= maxParapetHeight - EPS))

! Calc dimensions -------------------------------

idxSL = idxFrameStartRevealLeft
idxSR = idxFrameStartRevealRight

idxEL = idxFrameEndRevealLeft
idxER = idxFrameEndRevealRight

if bInclinedWall then
	revRightX	= min(rightRevealPnts[idxSR][1], rightRevealPnts[idxER][1]) - (rightWidth + overSizeRight)
	revLeftX	= -(max(leftRevealPnts[idxSL][1], leftRevealPnts[idxEL][1]) + (leftWidth  + overSizeLeft))
	revDRight	= revRightX / incH
	revDLeft	= revLeftX  / incH

	revYL	= revDLeft	* incH
	revYR	= revDRight	* incH

	opInner = (rightWidth + overSizeRight + leftWidth + overSizeLeft) / incH + revDLeft + revDRight
else
	revDRight	= min(rightRevealPnts[idxSR][1], rightRevealPnts[idxER][1]) - (rightWidth + overSizeRight)
	revDLeft	= -(max(leftRevealPnts[idxSL][1], leftRevealPnts[idxEL][1]) + (leftWidth  + overSizeLeft))
	revYL	= revDLeft
	revYR	= revDRight

	opInner = rightWidth + overSizeRight + leftWidth + overSizeLeft + revDLeft + revDRight
endif

if iParapetSize = PARAPET_SIZE_ASYMM then
	! Assymetric
	parapetExtendRight	= gs_parapet_right
	parapetExtendLeft	= gs_parapet_left
	parapet_width = opInner + parapetExtendRight + parapetExtendLeft
else
	! Symmetric or Automatic
	parapetExtendRight 	= (parapet_width - opInner) / 2
	parapetExtendLeft	= (parapet_width - opInner) / 2
endif

py1p = -incX * (rightWidth + overSizeRight + revYR + parapetExtendRight * incH)
py2p =  incX * (leftWidth  + overSizeLeft  + revYL + parapetExtendLeft  * incH)

dx = parapetWallInsetDepth * sin(WALL_INCL)
dy = parapetWallInsetDepth * cos(WALL_INCL)

revYPLeft		= parapetWallInsetDepth * tan(gs_reveal_left_angle - WALL_INCL)
if bInclinedWall then
	revSlantXLeft	= dx + revYPLeft * incH
	revSlantYLeft	= dy - revYPLeft * sin(WALL_INCL)
else
	revSlantXLeft	= revYPLeft
	revSlantYLeft	= parapetWallInsetDepth - revYPLeft
endif

revYPRight		= parapetWallInsetDepth * tan(gs_reveal_right_angle - WALL_INCL)
if bInclinedWall then
	revSlantXRight	= -(dx + revYPright * incH)
	revSlantYRight	=   dy - revYPright * sin(WALL_INCL)
else
	revSlantXRight	= -revYPright
	revSlantYRight	=  parapetWallInsetDepth - revYPright
endif

! =============================================================================
! Different Bottom Reveal Types Enable
! =============================================================================

bEnableDifferentBottomReveal = 1

if	iRevealType = REVEAL_EDGE |\
	iRevealType = REVEAL_SPLAYED |\
	iRevealType = REVEAL_DOUBLE_SPLAYED	|\
	iRevealType = REVEAL_OUTSIDE_SPLAYED |\
	iClosureType = CLOSURE_STUD_WALL |\
	iClosureType = CLOSURE_STUD_WALL_SIDING |\
	iClosureType = CLOSURE_BRICK_VENEER  |\
	bForceUniformBottomReveal then

	bEnableDifferentBottomReveal = 0
endif

! =============================================================================
! Uniform Jamb Depth Enable (Reveal Types and USA Stud Wall Closures)
! =============================================================================
bEnableUniformJambDepths = 1
bShowUniformJambDepths = 1

if	iClosureType = CLOSURE_STUD_WALL |\
	iClosureType = CLOSURE_STUD_WALL_SIDING |\
	iClosureType = CLOSURE_BRICK_VENEER |\
	iRevealType = REVEAL_EDGE |\
	iRevealType = REVEAL_NO |\
	(iRevealType = REVEAL_DOUBLE & iSillRevealType = REVEAL_NO & iBoardRevealType = REVEAL_NO) then

	bEnableUniformJambDepths = 0
	bShowUniformJambDepths = 0
endif

if	iRevealType = REVEAL_DOUBLE_SPLAYED |\
	iRevealType = REVEAL_OUTSIDE_SPLAYED then

	bShowUniformJambDepths = 0
endif

if bShapeSameRevealAngles then
	bShowUniformJambDepths = 0
endif

