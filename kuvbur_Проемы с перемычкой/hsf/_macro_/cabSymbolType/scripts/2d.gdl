
fill gs_fill_type
pen gs_cont_pen
line_type gs_line_type

! ----- Base Polygon -----
poly2_b 5, 1+2+64, gs_fill_pen, gs_back_pen,				! Draw the basic rectangle symbol in all case
	0, 0, 1,
	A, 0, 1,
	A, B, 1,
	0, B, 1,
	0, 0, -1

! ----- Compute Width of Modules in the Middle and on the Side -----

if bSeparateModules then								

	middleModuleWidth 	= (A - 2 * frameWidth + vertPanelWidth) / nModules
	sideModuleWidth 	= middleModuleWidth + frameWidth - vertPanelWidth / 2
endif

! ----- Draw the separator line between cabinets -----

if bSeparateCabinets | bSeparateModules then
	if 	iSymbolStyle = 1 |\
		iSymbolStyle = 2 |\
		iSymbolStyle = 3 |\
		iSymbolStyle = 4 |\
		iSymbolStyle = 5 then 							

		if bSeparateCabinets then
			add2 -A/nDoor * 2, 0
				for i=1 to ceil(nDoor/2 - 1)
					line2 A, 0, A, B
					add2 -A/nDoor * 2, 0
				next i
				del ceil(nDoor/2 - 1)
			del 1
		else
			add2 -sideModuleWidth, 0						! Side Module
			line2 A, 0, A, B

			for i = 1 to (nModules - 2)						! Middle Modules
				add2 -middleModuleWidth, 0
				line2 A, 0, A, B
			next i
			del (nModules - 1)
		endif
	endif
endif


! ----- Draw X -----

if iSymbolStyle = 2 then								
	if bSeparateCabinets then
		for i = 1 to int(nDoor/2)
			line2 A,				0,	A - A/nDoor * 2, B
			line2 A - A/nDoor * 2,	0,	A,	B
			add2 - A/nDoor * 2,	0
		next i
		del int(nDoor/2)
	
		if int(nDoor/2)<>nDoor/2 then
			line2 0,		0,	A/nDoor,	B
			line2 A/nDoor,	0,	0,			B
		endif
	else
		if bSeparateModules then
			line2 A, 	B, 	A - sideModuleWidth, 0			! Side Module
			line2 A, 	0, 	A - sideModuleWidth, B
			add2 -sideModuleWidth, 0

			for i = 1 to (nModules-2)						! Middle Modules
				line2 A, 	B, 	A - middleModuleWidth, 0
				line2 A, 	0, 	A - middleModuleWidth, B
				add2 -middleModuleWidth, 0
			next i

			line2 A, 	B, 	A - sideModuleWidth, 0			! Side Module
			line2 A, 	0, 	A - sideModuleWidth, B
			add2 -sideModuleWidth, 0

			del nModules
		else
			line2 0,	0,	A,	B
			line2 A,	0,	0,	B
		endif
	endif
endif

! ----- Draw / -----

if iSymbolStyle = 3 then								
	if bSeparateCabinets then
		for i = 1 to int(nDoor/2)
			line2 A,		B,		A - A/nDoor * 2,	0
			add2 - A/nDoor * 2,	0
		next i
		del int(nDoor/2)
	
		if int(nDoor/2) <> nDoor/2 then	
			line2 0, 0, A/nDoor, B
		endif
	else
		if bSeparateModules then
			line2 A, B, A - sideModuleWidth, 0			! Side Module
			add2 -sideModuleWidth, 0

			for i = 1 to (nModules-2)
				line2 A, B, A - middleModuleWidth, 0	! Middle Modules
				add2 -middleModuleWidth, 0
			next i

			line2 A, B, A - sideModuleWidth, 0			! Side Module
			add2 -sideModuleWidth, 0

			del nModules
		else
			line2 0,	0,	A,	B
		endif
	endif
endif

! ----- Draw V -----

if iSymbolStyle = 4 then
	if bSeparateModules then							! Doors open to the same side
		for i = 1 to nDoor
			line2 A,		B,		A - A/nDoor,		0
			add2 - A/nDoor,	0
		next i
		del nDoor
	else				
		for i = 1 to int(nDoor/2)
			line2 A,		B,		A - A/nDoor,		0
			line2 A - A/nDoor,	0,	A - A/nDoor * 2,	B
			add2 - A/nDoor * 2,	0
		next i
		del int(nDoor/2)
	
		if int(nDoor/2) <> nDoor/2 then	
			line2 0, 0, A/nDoor, B
		endif
	endif
endif

! ----- Draw A -----

if iSymbolStyle = 5 then						
	if bSeparateModules then							! Doors open to the same side
		for i = 1 to nDoor

			line2 A,		0,		A - A/nDoor,		B
			add2 - A/nDoor,	0
		next i
		del nDoor
	else		
		for i = 1 to int(nDoor/2)
			line2 A,		0,		A - A/nDoor,		B
			line2 A - A/nDoor,	B,	A - A/nDoor * 2,	0
			add2 - A/nDoor * 2,	0
		next i
		del int(nDoor/2)
	
		if int(nDoor/2) <> nDoor/2 then	
			line2 0, B, A/nDoor, 0
		endif
	endif
endif

! ----- Draw the door thickness -----

if 	iSymbolStyle = 6 |\
	iSymbolStyle = 7 |\
	iSymbolStyle = 8 then 								

	line2 0, doorThickness, a, doorThickness
endif

! ----- Draw Door Number -----

if iSymbolStyle = 7 | iSymbolStyle = 8 then			
	add2 -A/nDoor,0
		for i = 1 to nDoor
			line2 A,	0,	A,	doorThickness
			add2 -A/nDoor,	0
		next i
		del nDoor
	del 1
endif

! ----- Draw Door Opening Symbol -----

if iSymbolStyle = 8 | iSymbolStyle = 9 then	
	if bSeparateModules then							! Doors open to the same side
		add2 -A/nDoor,	0
		for i = 1 to nDoor
			arc2 	A/nDoor * 2,	0,	A/nDoor,	180,	180 + openingAngle2D
			line2 	A/nDoor * 2,	0,	A/nDoor * 2 - cos(openingAngle2D) * A/nDoor,	0-sin(openingAngle2D) * A/nDoor
	
			add2 A/nDoor,	0
		next i
		del nDoor + 1
	else	
		if int(nDoor/2) <> 	nDoor/2 then	_bEven = 1 
		if int(nDoor/2) =	nDoor/2 then	_bEven = 0
	
		add2 A/nDoor * _bEven,	0
		for i = 1 to int(nDoor/2)
			arc2 	0,	0,	A/nDoor,	360-openingAngle2D,	0
			line2 	0,	0,	cos(openingAngle2D) * A/nDoor,	0 - sin(openingAngle2D) * A/nDoor
	
			arc2 	A/nDoor * 2,	0,	A/nDoor,	180,	180 + openingAngle2D
			line2 	A/nDoor * 2,	0,	A/nDoor * 2 - cos(openingAngle2D) * A/nDoor,	0-sin(openingAngle2D) * A/nDoor
	
			add2 A/nDoor * 2,	0
		next i
		del int(nDoor/2)
		del 1
	
		if int(nDoor/2) <> nDoor/2 then
			arc2 	0,	0,	A/nDoor,	360 - openingAngle2D,	0
			line2 	0,	0,	cos(openingAngle2D) * A/nDoor,	0 - sin(openingAngle2D) * A/nDoor
		endif
	endif
endif



