
! =================================================
! For SWE
! =================================================
if bOpSideValues then
	values "gs_opside_list" stOpeningSideList
	values "gs_opside_list_m" 0, 1, 2, 3, 4

	if GLOB_MODPAR_NAME = "gs_opside_list" then
		gs_opside_list_m = 0
		for i = 1 to 4
			if gs_opside_list= stOpeningSideList[i] then gs_opside_list_m = i
		next i
		parameters gs_opside_list_m = gs_opside_list_m
	else
		gs_opside_list = stOpeningSideList[5]
		for i = 1 to 4
			if gs_opside_list_m = i then gs_opside_list= stOpeningSideList[gs_opside_list_m]
		next i
		parameters gs_opside_list= gs_opside_list
	endif

	if gs_opside_list_m <> 0 then
		if gs_opside_list_m = 1 then
			msOpeningSideWidth2 = 0.3
			ns_openingSDepth = 1.8
		endif
		if gs_opside_list_m = 2 then
			msOpeningSideWidth2 = 0.55
			ms_openingSDepth = 1.6
		endif
		if gs_opside_list_m = 3 then
			msOpeningSideWidth2 = 0.7
			ms_openingSDepth = 1.4
		endif
		if gs_opside_list_m = 4 then
			msOpeningSideWidth2 = 1.115
			ms_openingSDepth = 1.2
		endif

		parameters msOpeningSideWidth2 = msOpeningSideWidth2
		parameters ms_openingSDepth = ms_openingSDepth
		lock "ms_openingSDepth", "msOpeningSideWidth2"
	endif
!else
!	gs_opside_list_m = 0
!	parameters gs_opside_list_m = gs_opside_list_m
!
!	lock "gs_opside_list", "gs_opside_list_m"
!	hideparameter "gs_opside_list", "gs_opside_list_m"
endif


! =================================================
! For ALL
! =================================================

values "ms_openingSDepth" range [0, )
values "ms_oppositeSDepth" range [0, )

if	gs_leaf_optype_m = LEAF_REVOLVING | \
	gs_leaf_optype_m = LEAF_1L_SIDE_HUNG | \
	gs_leaf_optype_m = LEAF_1L_SIDE_HUNG_M | \
	gs_leaf_optype_m = LEAF_1L_DOUBLE_ACTING | \
	gs_leaf_optype_m = LEAF_1L_DOUBLE_ACTING_M | \
	gs_leaf_optype_m = LEAF_1L_PIVOT | \
	gs_leaf_optype_m = LEAF_1L_PIVOT_M | \
	gs_leaf_optype_m = LEAF_1L_MULTIPANEL | \
	gs_leaf_optype_m = LEAF_1L_MULTIPANEL_M then

	values "msOpeningSideWidth2" range [0, )
	values "msOpeningSideWidth1" range [0, )
	values "msOppositeSideWidth2" range [0, )
	values "msOppositeSideWidth1" range [0, )
endif


if bSlidingSingle or bSlidingDouble then			!single sliding/pocket doors
	values "msOpeningSideWidth2" range [max(-(EgressMSWidth + msOpeningSideWidth1), -(EgressMSWidth)), )
	values "msOpeningSideWidth1" range [max(-(EgressMSWidth + msOpeningSideWidth2), -(EgressMSWidth)), )

	if bSlidingSingle then
		if not(bSlidingMirrored) then
			values "ms_slidingWidth" range [msOpeningSideWidth2,)
		else
			values "ms_slidingWidth" range [msOpeningSideWidth1,)
		endif
	else
		values "ms_slidingWidth" range [0,)
	endif

	if GLOB_MODPAR_NAME = "msOpeningSideWidth2" or GLOB_MODPAR_NAME = "msOpeningSideWidth1" then
		ms_slidingWidth = msOpeningSideWidth2 + EgressMSWidth + msOpeningSideWidth1
	else
		if bSlidingSingle then
			if not(bSlidingMirrored) then
				msOpeningSideWidth1 = ms_slidingWidth - msOpeningSideWidth2 - EgressMSWidth
			else
				msOpeningSideWidth2 = ms_slidingWidth - msOpeningSideWidth1- EgressMSWidth
			endif
		endif
	endif

	if GLOB_MODPAR_NAME = "ms_slidingWidth" or GLOB_MODPAR_NAME = "A" then
		if bSlidingDouble then
			msOpeningSideWidth2 = (ms_slidingWidth - EgressMSWidth)/2
			msOpeningSideWidth1 = (ms_slidingWidth - EgressMSWidth)/2
		else
			if not(bSlidingMirrored) then
				msOpeningSideWidth1 = ms_slidingWidth - msOpeningSideWidth2 - EgressMSWidth
			else
				msOpeningSideWidth2 = ms_slidingWidth - msOpeningSideWidth1- EgressMSWidth
			endif
		endif
	endif

	if abs(ms_slidingWidth-(msOpeningSideWidth2+msOpeningSideWidth1+EgressMSWidth)) > EPS then
		ms_slidingWidth = msOpeningSideWidth2+msOpeningSideWidth1+EgressMSWidth
	endif

	msOppositeSideWidth2 = msOpeningSideWidth2
	msOppositeSideWidth1 = msOpeningSideWidth1

	parameters msOppositeSideWidth2 = msOppositeSideWidth2
	parameters msOppositeSideWidth1 = msOppositeSideWidth1
	parameters msOpeningSideWidth2 = msOpeningSideWidth2
	parameters msOpeningSideWidth1 = msOpeningSideWidth1
	parameters ms_slidingWidth = ms_slidingWidth
	hideparameter "msOppositeSideWidth2", "msOppositeSideWidth1"
endif

if bTelescopic then
	values "msOpeningSideWidth2" range [-ac_wallhole_width - msOpeningSideWidth1, )
	values "msOpeningSideWidth1" range [-ac_wallhole_width - msOpeningSideWidth2, )

	values "msOppositeSideWidth2" range [-ac_wallhole_width - msOppositeSideWidth1, )
	values "msOppositeSideWidth1" range [-ac_wallhole_width - msOppositeSideWidth2, )
endif

if	gs_leaf_optype_m = LEAF_1L_DOUBLE_ACTING | \
	gs_leaf_optype_m = LEAF_1L_DOUBLE_ACTING_M | \
	gs_leaf_optype_m = LEAF_2L_DOUBLE_ACTING | \
	gs_leaf_optype_m = LEAF_2L_DOUBLE_EGRESS | \
	gs_leaf_optype_m = LEAF_2L_DOUBLE_EGRESS_M then

	msOppositeSideWidth2 = msOpeningSideWidth2
	parameters msOppositeSideWidth2 = msOppositeSideWidth2

	msOppositeSideWidth1 = msOpeningSideWidth1
	parameters msOppositeSideWidth1 = msOppositeSideWidth1

	hideparameter "msOppositeSideWidth2", "msOppositeSideWidth1"
endif

if	gs_leaf_optype_m = LEAF_2L_SIDE_HUNG | \
	gs_leaf_optype_m = LEAF_2L_SIDE_HUNG | \
	gs_leaf_optype_m = LEAF_GAR_1L_UP_AND_OVER | \
	gs_leaf_optype_m = LEAF_GAR_1L_UP_SLIDING | \
	gs_leaf_optype_m = LEAF_GAR_1L_SECTIONAL | \
	gs_leaf_optype_m = LEAF_GAR_2L_SIDE_HUNG | \
	gs_leaf_optype_m = LEAF_GAR_2L_ROLLSIDE | \
	gs_leaf_optype_m = LEAF_GAR_1L_ROLLUP | \
	gs_leaf_optype_m = LEAF_2L_MULTIPANEL | \
	gs_leaf_optype_m = LEAF_2L_DOUBLE_ACTING | \
	gs_leaf_optype_m = LEAF_2L_DOUBLE_EGRESS | \
	gs_leaf_optype_m = LEAF_2L_DOUBLE_EGRESS_M then

	values "msOpeningSideWidth2" range (max(-(EgressMSWidth + msOpeningSideWidth1), -EgressMSWidth), )
	values "msOpeningSideWidth1" range (max(-(EgressMSWidth + msOpeningSideWidth2), -EgressMSWidth), )
	values "msOppositeSideWidth2" range (max(-(EgressMSWidth + msOppositeSideWidth1), -EgressMSWidth), )
	values "msOppositeSideWidth1" range (max(-(EgressMSWidth + msOppositeSideWidth2), -EgressMSWidth), )
endif
