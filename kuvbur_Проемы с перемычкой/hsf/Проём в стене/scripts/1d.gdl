
EPS = 0.0001
unID=5000
DIM t[]
DIM name_elev[]
DIM size_elev[][]
DIM numb_elev[]
n = REQUEST ("STORY_INFO", "", nelev, t)
FOR i = 1 TO nelev
	numb_elev[i] = t [4 * (i - 1) + 1]
	name_elev[i] = t [4 * (i - 1) + 2]
	size_elev[i][1] = t [4 * (i - 1) + 3]
	size_elev[i][2] = size_elev[i][1] + t [4 * (i - 1) + 4]
NEXT i
n = REQUEST ("Name_of_main", "", main_name)

if GLOB_PREVIEW_MODE = 0 then
	dob_o_txt = "" : if krugl then dob_o_txt="Ось на отм. "
	txt2 = ""
	aaz = wido_sill_height + WALL_POSITION[3] - porog
	if abs(aaz)<EPS then
		az = "0.000"
		znak1 = ""
	 else
		az = str("%.3m", abs(aaz))
		if aaz < EPS then 
			znak1 = "-"
		else
			znak1 = "+"
		endif
	endif
	parameters otm_niz = dob_o_txt + znak1 + az
	aaz = wido_sill_height + WALL_POSITION[3] + ac_wallhole_height
	if abs(aaz)<EPS then
		az = "0.000"
		znak1 = ""
	 else
		az = str("%.3m", abs(aaz))
		if aaz < EPS then 
			znak1 = "-"
		else
			znak1 = "+"
		endif
	endif
	parameters ur_num = aaz
	parameters ur = znak1 + az
	if not(manual_elev) then
		FOR i = 1 TO nelev
			if aaz>=size_elev[i][1] and aaz<size_elev[i][2] then parameters n_elev = numb_elev[i]
		next i
	endif
endif
k=0.1

if GLOB_SCRIPT_TYPE = 2 or GLOB_SCRIPT_TYPE = 3 then
	read_walltype = 0
	show_wallline = ""
	wallline_type = -1
	wallline_type_su = -1
	success_ = 0
	
	if STRSTR(nazn,"Дв") then 
		success_1 = LIBRARYGLOBAL ("Libraryflobals-as", "show_wallline_door", show_wallline)
		success_2 = LIBRARYGLOBAL ("Libraryflobals-as", "wallline_door_type", wallline_type)
		success_3 = LIBRARYGLOBAL ("Libraryflobals-as", "wallline_door_type_su", wallline_type_su)
		success_4 = LIBRARYGLOBAL ("Libraryflobals-as", "wallline_door_diag_type", wallline_diag_type)
		success_5 = LIBRARYGLOBAL ("Libraryflobals-as", "show_empty_door", show_empty)
		success_ = success_1 + success_2 + success_3 + success_4 + success_5
	endif
	
	if STRSTR(nazn,"Ок") and success_=0 then
		success_1 = LIBRARYGLOBAL ("Libraryflobals-as", "show_wallline_wind", show_wallline)
		success_2 = LIBRARYGLOBAL ("Libraryflobals-as", "wallline_wind_type", wallline_type)
		success_3 = LIBRARYGLOBAL ("Libraryflobals-as", "wallline_wind_type_su", wallline_type_su)
		success_4 = LIBRARYGLOBAL ("Libraryflobals-as", "wallline_wind_diag_type", wallline_diag_type)
		success_5 = LIBRARYGLOBAL ("Libraryflobals-as", "show_empty_wind", show_empty)
		success_ = success_1 + success_2 + success_3 + success_4 + success_5
	endif
	
	if success_=0 then
		success_1 = LIBRARYGLOBAL ("Libraryflobals-as", "show_wallline_wind", show_wallline)
		success_2 = LIBRARYGLOBAL ("Libraryflobals-as", "wallline_wind_type", wallline_type)
		success_3 = LIBRARYGLOBAL ("Libraryflobals-as", "wallline_wind_type_su", wallline_type_su)
		success_4 = LIBRARYGLOBAL ("Libraryflobals-as", "wallline_wind_diag_type", wallline_diag_type)
		success_5 = LIBRARYGLOBAL ("Libraryflobals-as", "show_empty_wind", show_empty)
		success_ = success_1 + success_2 + success_3 + success_4 + success_5
	endif
	
	if STRSTR(show_wallline,"Вкл") then gs_wcont_line = "Вкл"
	if STRSTR(show_wallline,"Откл") then gs_wcont_line = "Откл"
	if wallline_type_su > 0 then 
		gs_wcont_line_in = wallline_type
		gs_wcont_hidden_line_in = wallline_diag_type
	endif

	show_asotv = 1 : min_h_otv = 0.01 : min_b_otv = 0.01
	success = LIBRARYGLOBAL ("Libraryflobals-as", "show_asotv", show_asotv)
	success = LIBRARYGLOBAL ("Libraryflobals-as", "min_h_otv", min_h_otv)
	success = LIBRARYGLOBAL ("Libraryflobals-as", "min_b_otv", min_b_otv)
	dim pen_nazn[9] : dim nazn_arr[9]
	pen_eq = 1 : pen_all = 1 : i_pen = 1
	success_1 = LIBRARYGLOBAL ("Libraryflobals-as", "nazn", nazn_arr)
	success_1 = LIBRARYGLOBAL ("Libraryflobals-as", "pen_nazn", pen_nazn)
	success_2 = LIBRARYGLOBAL ("Libraryflobals-as", "pen_eq", pen_eq)
	success_3 = LIBRARYGLOBAL ("Libraryflobals-as", "pen_all", pen_all)
	t_pen = 0
	if pen_eq then
		t_pen = pen_all
	else
		for i=1 to vardim1(pen_nazn)
			if nazn = nazn_arr[i] then t_pen = pen_nazn[i]
		next i
		if t_pen = 0 then
			t_door_pen = pen_nazn[8]
			if STRSTR(GLOB_ID,"ОП") then t_pen = t_door_pen
			if STRSTR(GLOB_ID,"ОК") then t_pen = t_door_pen
			if STRSTR(GLOB_ID,"Ок") then t_pen = t_door_pen
			if STRSTR(GLOB_ID,"Пл") then t_pen = t_door_pen
			if STRSTR(GLOB_ID,"ДП") then t_pen = t_door_pen
			if STRSTR(GLOB_ID,"Д-") then t_pen = t_door_pen
			if STRSTR(GLOB_ID,"В-") then t_pen = t_door_pen
		endif
		if t_pen = 0 then
			t_wind_pen = pen_nazn[9]
			if STRSTR(nazn,"ОП") then t_pen = t_wind_pen
			if STRSTR(nazn,"ОК") then t_pen = t_wind_pen
			if STRSTR(nazn,"Ок") then t_pen = t_wind_pen
		endif
		if t_pen=0 then t_pen = pen_all
	endif
	if t_pen<EPS or t_pen>255 then t_pen = 1
	i_pen = t_pen
	if asotv then
		gs_wallhole_pen_fg = i_pen
		gs_wallhole_pen_bg = i_pen
	endif
endif

if main_name = "" then 
	WALL_COMPS_NAME_ = WALL_COMPS_NAME
	WALL_THICKNESS_ = WALL_THICKNESS
	WALL_SKINS_PARAMS_ = WALL_SKINS_PARAMS
	WALL_SKINS_NUMBER_ = WALL_SKINS_NUMBER
endif

if abs(WALL_THICKNESS_) < EPS then WALL_THICKNESS_ = WALL_THICKNESS

max_t = 0 : otstup_left = 0: otstup_right = 0

if WALL_COMPS_NAME_<>"" then
	for i = 1 to WALL_SKINS_NUMBER_
		t_s = WALL_SKINS_PARAMS_[i][2]
		if t_s > 0 then
			if WALL_SKINS_PARAMS_[i][6] then
				max_t = max_t + t_s
			else
				if abs(max_t)<EPS then otstup_left = otstup_left + t_s
				if abs(max_t)>EPS then otstup_right = otstup_right + t_s
			endif
			t_s = 0
		endif
	next i 
else
	max_t = WALL_THICKNESS_
endif

wall_left = (AC_Wall_Direction_Type=1) or (AC_Wall_Direction_Type=3)
wall_right = (AC_Wall_Direction_Type=0) or (AC_Wall_Direction_Type=2)
bRotated = round_int (SYMB_ROTANGLE) = 180
dtype=0
tot = 0
if wall_right then
	if bRotated=0 and SYMB_MIRRORED=0 and WIDO_REVEAL_SIDE=0 then tot =  - WALL_THICKNESS_
	if bRotated=0 and SYMB_MIRRORED=1 and WIDO_REVEAL_SIDE=0 then tot =  -WALL_THICKNESS_
	if bRotated=1 and SYMB_MIRRORED=0 and WIDO_REVEAL_SIDE=1 then tot =  WALL_THICKNESS_
	if bRotated=1 and SYMB_MIRRORED=1 and WIDO_REVEAL_SIDE=1 then tot =  WALL_THICKNESS_
	if WIDO_REVEAL_SIDE then
		otstup_2 = -WIDO_SILL - WIDO_FRAME_THICKNESS + WALL_THICKNESS_
	else
		otstup_2 = WIDO_SILL - WALL_THICKNESS_
	endif
	otstup_dir = otstup_right
else
	if bRotated=1 and SYMB_MIRRORED=0 and WIDO_REVEAL_SIDE=0 then tot =  - WALL_THICKNESS_
	if bRotated=1 and SYMB_MIRRORED=1 and WIDO_REVEAL_SIDE=0 then tot =  - WALL_THICKNESS_
	if bRotated=0 and SYMB_MIRRORED=0 and WIDO_REVEAL_SIDE=1 then tot =  WALL_THICKNESS_
	if bRotated=0 and SYMB_MIRRORED=1 and WIDO_REVEAL_SIDE=1 then tot =  WALL_THICKNESS_
	if WIDO_REVEAL_SIDE then
		otstup_2 = WALL_THICKNESS_ - WIDO_SILL - WIDO_FRAME_THICKNESS
	else
		otstup_2 = WIDO_SILL - WALL_THICKNESS_
	endif
	otstup_dir = otstup_left
endif
otstup_2 = otstup_2 - tot
z1 = 1
if bRotated=1 and SYMB_MIRRORED=0 and WIDO_REVEAL_SIDE=1 then z1 = -1
if bRotated=1 and SYMB_MIRRORED=1 and WIDO_REVEAL_SIDE=1 then z1 = -1
if bRotated=1 and SYMB_MIRRORED=1 and WIDO_REVEAL_SIDE=0 then z1 = -1
if bRotated=1 and SYMB_MIRRORED=0 and WIDO_REVEAL_SIDE=0 then z1 = -1

!text2 0,0,"bRotated " + str("%.0",bRotated)
!text2 0,-0.2,"SYMB_MIRRORED " + str("%.0",SYMB_MIRRORED)
!text2 0,-0.4,"WIDO_REVEAL_SIDE " + str("%.0",WIDO_REVEAL_SIDE)
!text2 0,-0.6,"wall_left " + str("%.0",wall_left)
!text2 0,-0.8,"wall_righ " + str("%.0",wall_righ)

otstup = abs(max_t/2 + otstup_dir)*z1
if abs(otstup)<EPS then otstup = max_t*z1/2

!!!!
bWndCurved	= 0

if GLOB_SCRIPT_TYPE = 7 | GLOB_SCRIPT_TYPE = 8 then goto "MasterEnd"
! ==============================================================================

leftWidth	= A / 2
rightWidth	= A / 2


! ==============================================================================
! Polygon Wall
! ==============================================================================

if AC_WallType = 2 then
	id1 = AC_WindowInWallContour[1]
	id2 = AC_WindowInWallContour[2]
	id3 = AC_WindowInWallContour[3]
	id4 = AC_WindowInWallContour[4]

	if id1 > vardim1(AC_WallContourPolygon) then id1 = 0
	if id2 > vardim1(AC_WallContourPolygon) then id2 = 0
	if id3 > vardim1(AC_WallContourPolygon) then id3 = 0
	if id4 > vardim1(AC_WallContourPolygon) then id4 = 0

	if id1 > 0 & id2 > 0 & id3 > 0 & id4 > 0 & abs(id1 - id2) = 1 & abs(id3 - id4) = 1 then
		if abs(AC_WallContourPolygon[id1][2] - AC_WallContourPolygon[id2][2]) < EPS & abs(AC_WallContourPolygon[id3][2] - AC_WallContourPolygon[id4][2]) < EPS then
			AC_WallType = 1
		endif
	endif
endif


! =============================================================================
! Reveal
! =============================================================================

bRotAngle180 = SYMB_ROTANGLE > EPS
wallIsLeft	= bRotAngle180 exor WIDO_REVEAL_SIDE
signWallIsLeft	= wallIsleft - not(wallIsleft)

if (SYMB_MIRRORED exor (SYMB_ROTANGLE > EPS)) & (AC_WallType <> 2) then
	temp = WIDO_RIGHT_JAMB
	WIDO_RIGHT_JAMB = WIDO_LEFT_JAMB
	WIDO_LEFT_JAMB = temp
endif

if AC_WallType = 2 & wallIsLeft then
	temp = WIDO_RIGHT_JAMB
	WIDO_RIGHT_JAMB = WIDO_LEFT_JAMB
	WIDO_LEFT_JAMB = temp
endif




! =============================================================================
! Wall Contour Lines
! =============================================================================
gs_wcont_line_int = 1
bContourLineAtBoard	= 0
bContourLineAtSill	= 0


! ==============================================================================
! Calculations for Corner Window
! ==============================================================================

bCornerWindow = 0


! ==============================================================================
! Calculations for Inclined Walls
! ==============================================================================

if abs(WALL_INCL) > EPS then
	bInclinedWall = 1
	bFactor = SYMB_MIRRORED exor WIDO_REVEAL_SIDE exor wallIsLeft
	incFactor = not(bFactor) - bFactor
	incX = incFactor * tan(WALL_INCL)
else
	bInclinedWall = 0
	incX = 0
endif



! ==============================================================================
! Cavity Closure
! ==============================================================================

reorder = (AC_Wall_Direction_Type <> 1 & AC_Wall_Direction_Type <> 3)
signReorder = not(reorder) - reorder

SKIN_FILL				=  1
SKIN_THICKNESS			=  2
SKIN_CONT_PEN			=  3	! Obsolote (old contour pen)
SKIN_FILL_PEN			=  4
SKIN_FILL_BACK_PEN		=  5
SKIN_CORE_STATUS		=  6
SKIN_UPPER_LINE_PEN		=  7 + 2 * reorder
SKIN_UPPER_LINE_TYPE	=  8 + 2 * reorder
SKIN_LOWER_LINE_PEN		=  9 - 2 * reorder
SKIN_LOWER_LINE_TYPE	= 10 - 2 * reorder
SKIN_END_FACE_PEN		= 11
SKIN_FILL_ORIENTATION	= 12	! 0 - global, 1 - local
SKIN_TYPE				= 13	! 0 - cut, 1 - below cutplane, 2 - above cutplane (all skin types are 0 for simple walls)
!	For D/W in complex walls on the floor plan this variable contains the data of all cut skins, for wall ends on the floor plan the data of all skins.
!	For D/W and wall ends in the 3D window contains the data of the skins actually cut by the D/W or wall end
SKIN_END_LINE_TYPE		= 14
SKIN_FINISH_STATUS		= 15
SKIN_FILL_FIT_TO_SKIN	= 16
SKIN_THICKEN_TRAPEZOID	= 17


! Line Property defines:
LINE_PROPERTY_GENERIC	= 0
LINE_PROPERTY_INNER		= 1
LINE_PROPERTY_CONTOUR	= 2


! Partial Stucture Display defines:
STRUCTURE_ENTIRE_STRUCTURE	= 0
STRUCTURE_CORE_ONLY			= 1
STRUCTURE_WITHOUT_FINISHES	= 2


bCompositeWall		= (WALL_SKINS_NUMBER > 0)


! ==============================================================================
! Partial Stucture Display related calculations
! ==============================================================================


if GLOB_SCRIPT_TYPE <> 2 and GLOB_SCRIPT_TYPE <> 3 then goto "MasterEnd"

offsetSill		= 0
offsetBoard		= 0
offsetConnSill	= 0
offsetConnBoard	= 0
bRevealInDisplayedStructure = 1
bOneFillAtRevealSide		= 1

if GLOB_STRUCTURE_DISPLAY <> STRUCTURE_ENTIRE_STRUCTURE then

	if bCompositeWall then

		offsetInside		= 0
		offsetOutside		= 0

		for i = 1 to WALL_SKINS_NUMBER

			bShowSkin = (GLOB_STRUCTURE_DISPLAY = STRUCTURE_WITHOUT_FINISHES & abs(WALL_SKINS_PARAMS[i][SKIN_FINISH_STATUS] - 1) > EPS) | \
						(GLOB_STRUCTURE_DISPLAY = STRUCTURE_CORE_ONLY & WALL_SKINS_PARAMS[i][SKIN_CORE_STATUS] > EPS)

			if not(bShowSkin) then
				offsetInside = offsetInside + WALL_SKINS_PARAMS[i][SKIN_THICKNESS]
			else
				i = WALL_SKINS_NUMBER	! Break loop
				endif
		next i

		for i = WALL_SKINS_NUMBER to 1 step -1

			bShowSkin = (GLOB_STRUCTURE_DISPLAY = STRUCTURE_WITHOUT_FINISHES & abs(WALL_SKINS_PARAMS[i][SKIN_FINISH_STATUS] - 1) > EPS) | \
						(GLOB_STRUCTURE_DISPLAY = STRUCTURE_CORE_ONLY & WALL_SKINS_PARAMS[i][SKIN_CORE_STATUS] > EPS)

			if not(bShowSkin) then
				offsetOutside = offsetOutside + WALL_SKINS_PARAMS[i][SKIN_THICKNESS]
			else
				i = 1	! Break loop
			endif
		next i

		if wallIsLeft then
			offsetSill	= offsetInside
			offsetBoard	= offsetOutside
		else
			offsetSill	= offsetOutside
			offsetBoard	= offsetInside
		endif

		bRevealInDisplayedStructure	= (WIDO_REVEAL_ON & (offsetSill < WIDO_SILL) & (offsetBoard < WALL_THICKNESS - WIDO_SILL))
		bOneFillAtRevealSide		= (WIDO_REVEAL_ON & (offsetSill < WIDO_SILL))
	endif
endif


! ==============================================================================
! Calculations for Curved Walls
! ==============================================================================

curvedWall = abs(WIDO_ORIG_DIST) > EPS

refA = A

if curvedWall then

	if GLOB_CONTEXT <> 2 then
		widoOrigDist = -WIDO_ORIG_DIST
	else
		widoOrigDist = WIDO_ORIG_DIST
	endif

	WOD = abs(widoOrigDist) - (SYMB_ROTANGLE > EPS) * WIDO_FRAME_THICKNESS

	leftAlfa	= atn(leftWidth / WOD)
	rightAlfa	= atn(rightWidth / WOD)

	bArchSign = (WIDO_REVEAL_SIDE exor SYMB_ROTANGLE > EPS)
	iArchSign = bArchSign - not(bArchSign)		! 1 / -1

	alfaLeftRight = atn((refA / 2) / WOD)

	if WIDO_REVEAL_SIDE then
		WOD = widoOrigDist + WIDO_FRAME_THICKNESS
	else
		WOD = -widoOrigDist - WIDO_FRAME_THICKNESS
	endif

	if WIDO_REVEAL_SIDE exor SYMB_ROTANGLE < EPS then
		ySign = 1
		if WIDO_REVEAL_SIDE then
			rSill = sqr(refA * refA / 4 + WOD * WOD) - WIDO_SILL
			rBoard = rSill + WALL_THICKNESS
		else
			rSill = sqr(refA * refA / 4 + WOD * WOD) - WIDO_SILL
			rBoard = rSill + WALL_THICKNESS
		endif
	else
		ySign = -1
		if WIDO_REVEAL_SIDE then
			rBoard = sqr(refA * refA / 4 + WOD * WOD) + WIDO_SILL - WALL_THICKNESS
			rSill = rBoard + WALL_THICKNESS
		else
			rSill = sqr(refA * refA / 4 + WOD * WOD) + WIDO_SILL
			rBoard = rSill - WALL_THICKNESS
		endif
	endif

	rSillLine = rSill - iArchSign * WIDO_SILL	! Radius of the reveal at the Sill depth

	ArcLengthSillToAngle	= 180 / rSill / PI

	alfaLeftJamb	= WIDO_LEFT_JAMB  * ArcLengthSillToAngle
	alfaRightJamb	= WIDO_RIGHT_JAMB * ArcLengthSillToAngle


	! ===== Points for Sill =====

	alfa = -alfaLeftRight + bOneFillAtRevealSide * alfaLeftJamb

	spx2 = (rSill + ySign * offsetSill) * sin(alfa)
	spy2 = (ySign * rSill + offsetSill) * cos(alfa)

	spx1 = (rSill + ySign * WIDO_SILL) * sin(alfa)
	spy1 = (ySign * rSill + WIDO_SILL) * cos(alfa)

	alfa = alfaLeftRight - bOneFillAtRevealSide * alfaRightJamb

	spx7 = (rSill + ySign * offsetSill) * sin(alfa)
	spy7 = (ySign * rSill + offsetSill) * cos(alfa)

	spx8 = (rSill + ySign * WIDO_SILL) * sin(alfa)
	spy8 = (ySign * rSill + WIDO_SILL) * cos(alfa)


	! ===== Points for Board =====

	alfa = -alfaLeftRight + (not(bRevealInDisplayedStructure) & bOneFillAtRevealSide) * alfaLeftJamb

	bpx2 = (rSill + ySign * WIDO_SILL) * sin(alfa)
	bpy2 = ySign * (rSill + ySign * WIDO_SILL) * cos(alfa)

	bpx4 = (rBoard - ySign * offsetBoard) * sin(alfa)
	bpy4 = (ySign * rBoard - offsetBoard) * cos(alfa)

	alfa = alfaLeftRight - (not(bRevealInDisplayedStructure) & bOneFillAtRevealSide) * alfaRightJamb

	bpx9 = (rBoard - ySign * offsetBoard) * sin(alfa)
	bpy9 = (ySign * rBoard - offsetBoard) * cos(alfa)

	bpx11 = (rSill + ySign * WIDO_SILL) * sin(alfa)
	bpy11 = ySign * (rSill + ySign * WIDO_SILL) * cos(alfa)


	bxL = bpx2
	byL = bpy2 + WOD

	bxR = -bpx11
	byR = bpy11 + WOD

	sxL = -rSillLine * sin(leftAlfa - alfaLeftJamb)
	syL = iArchSign * (-abs(WOD) + rSillLine * cos(leftAlfa - alfaLeftJamb))

	sxR = rSillLine * sin(rightAlfa - alfaRightJamb)
	syR = iArchSign * (-abs(WOD) + rSillLine * cos(rightAlfa - alfaRightJamb))
else
	alfaLeftJamb	= 0
	alfaRightJamb	= 0
endif


! ==============================================================================
! Calculations for Straight Walls
! ==============================================================================

if not(curvedWall) then
	bxL = refA / 2
	if wallIsLeft exor reorder then
		byL = WIDO_SILL
	else
		byL = WALL_THICKNESS - WIDO_SILL
	endif

	bxR = refA / 2
	byR = byL

	sxL = refA / 2 - WIDO_LEFT_JAMB
	syL = byL

	sxR = refA / 2 - WIDO_RIGHT_JAMB
	syR = byR
endif	! curvedWall

"MasterEnd":
