
call "Перемычки" parameters all, otstup=otstup, max_t=max_t, otstup_2=otstup_2
call "Жб обрамление проёма" parameters all, otstup=otstup, max_t=max_t, otstup_2=otstup_2
if GLOB_VIEW_TYPE=9 then end
if asotv and ((B+porog)<min_h_otv) and (A<min_b_otv) then end
if asotv and not(show_asotv) then end
if asotv and (GLOB_STRUCTURE_DISPLAY <> upr_n) and (upr_n>-1) then end
flag_pr = 0 : if (GLOB_VIEW_TYPE) <> 9 and ((GLOB_STRUCTURE_DISPLAY = upr_n) or main_name = "") then flag_pr = 1
flag_line = 0 : if (GLOB_STRUCTURE_DISPLAY = upr_n) and show_diag then flag_line = 1
if asotv then
	flag_pr = 1
	flag_line = 0
endif
if show_empty then 
	flag_pr = 1
	flag_line = 1
endif

if WALL_COMPS_NAME_<>"" and ((GLOB_STRUCTURE_DISPLAY <> 0)) then
	wall_thk = WALL_THICKNESS_
	symbol_thk = max_t
	otstup_hole = abs(otstup)
else
	symbol_thk = WALL_THICKNESS_
	wall_thk = WALL_THICKNESS_
	otstup_hole = (WALL_THICKNESS_/2)
endif

if GLOB_STRUCTURE_DISPLAY = upr_n then wall_thk = symbol_thk

del top

add2 0,otstup_2
if abs(otstup)>EPS then mul2 1,SGN(otstup)
if wall_right then mul2 1,-1
add2 0,otstup_hole

hotspot2 0,-symbol_thk/2, unID : unID=unID+1
hotspot2 0,symbol_thk/2, unID : unID=unID+1
hotspot2 A/2,-symbol_thk/2, unID : unID=unID+1
hotspot2 A/2,symbol_thk/2, unID : unID=unID+1
hotspot2 -A/2,-symbol_thk/2, unID : unID=unID+1
hotspot2 -A/2,symbol_thk/2, unID : unID=unID+1
drawindex 10
if gs_wcont_line = "Вкл" then
	pen gs_wcont_line_pen
	LINE_TYPE gs_wcont_line_in
	line2 -A/2, -symbol_thk/2,  A/2, -symbol_thk/2
	line2 -A/2,  symbol_thk/2,  A/2,  symbol_thk/2
endif

if not(bCompositeWall) then
	pen				WALL_SECT_PEN
	line_type		1
	line_property	2
	line2  A/2, -symbol_thk/2, A/2,  symbol_thk/2
	line2  -A/2,  symbol_thk/2, -A/2, -symbol_thk/2
endif

if flag_pr then
	pen i_pen
	if flag_line then
		drawindex 50
		pen i_pen
		LINE_TYPE gs_wcont_hidden_line_in
		line2  A/2, -symbol_thk/2, -A/2,  symbol_thk/2
		line2  A/2,  symbol_thk/2, -A/2, -symbol_thk/2
	endif
else
	end
endif
del top
if AC_WallType = 2 then
	bMirrorSign = (SYMB_MIRRORED exor WIDO_REVEAL_SIDE)
	mirrorSign =  not(bMirrorSign) - bMirrorSign
	id1 = AC_WindowInWallContour[1]
	id2 = AC_WindowInWallContour[2]
	id3 = AC_WindowInWallContour[3]
	id4 = AC_WindowInWallContour[4]
	if id1 > vardim1(AC_WallContourPolygon) then id1 = 0
	if id2 > vardim1(AC_WallContourPolygon) then id2 = 0
	if id3 > vardim1(AC_WallContourPolygon) then id3 = 0
	if id4 > vardim1(AC_WallContourPolygon) then id4 = 0
! Draw Background Fill ---------------------------------------------------------
	if id1 > 0 then
		idLast = id2
		if idLast = 0 then idLast = id3
		if idLast = 0 then idLast = id4
		if idLast > 0 then
			i = id1 - 1
			do
				i = i + 1
				if i > vardim1(AC_WallContourPolygon) then i = 1
				put AC_WallContourPolygon[i][1],
					AC_WallContourPolygon[i][2],
					AC_WallContourPolygon[i][3] * (i <> idLast)
			while i <> idLast
		endif
	endif
	if id2 > 0 & id3 > 0 & abs(WIDO_LEFT_JAMB) > EPS then
		put -mirrorSign * (A/2 - WIDO_LEFT_JAMB),	0,	0,
			-mirrorSign * (A/2),					0,	0
	endif
	if id3 > 0 then
		idLast = id4
		if idLast = 0 then idLast = id1
		if idLast = 0 then idLast = id2
		if idLast > 0 then
			i = id3 - 1
			do
				i = i + 1
				if i > vardim1(AC_WallContourPolygon) then i = 1
				put AC_WallContourPolygon[i][1],
					AC_WallContourPolygon[i][2],
					AC_WallContourPolygon[i][3] * (i <> idLast)
			while i <> idLast
		endif
	endif
	if id4 > 0 & id1 > 0 & abs(WIDO_RIGHT_JAMB) > EPS then
		put mirrorSign * A/2,						0,	0,
			mirrorSign * (A/2 - WIDO_RIGHT_JAMB), 	0,	0
	endif
	gosub 202	! Convert polygon: AC polygon -> GDL polygon
	set fill fillTypeNormal
	poly2_b nsp/3, 1+2+4+64, gs_wallhole_pen_fg, gs_wallhole_pen_bg,
		get(nsp)
endif
! ==============================================================================
!	Turn Skins at Reveal
! ==============================================================================
if bCompositeWall then
	trapezoidCoreSkin = 0
	! --- find the last core skin ---
	for i = 1 to WALL_SKINS_NUMBER
		idx = i: gosub 10	! Get proper index
		if round_int(WALL_SKINS_PARAMS[idx][SKIN_THICKEN_TRAPEZOID]) = 1 then
			trapezoidCoreSkin = i
		endif
	next i
	! --- calculate composite thickness ---
	compositeThickness = 0
	for j = 1 to WALL_SKINS_NUMBER
		idx = j: gosub 10	! Get proper index

		if (j <= trapezoidCoreSkin) then
			compositeThickness = compositeThickness + WALL_SKINS_PARAMS[idx][SKIN_THICKNESS]
		else
			compositeThickness = compositeThickness + WALL_SKINS_PARAMS[idx][SKIN_THICKNESS] / cos (WALL_INCL)
		endif
	next j
endif
! ==============================================================================
dim skinCummThkRef[]	! Cummulative skin thickness from the reference side (8 +1 skins))
dim skinCummThkOpp[]	! Cummulative skin thickness from the opposite side (8 + 1 skins)
cumRefThk = 0
cumOppThk = 0
if bCompositeWall then
	for i=1 to WALL_SKINS_NUMBER
		idx = i: gosub 10	! Get proper index
		cumRefThk = cumRefThk + WALL_SKINS_PARAMS[idx][SKIN_THICKNESS]
		skinCummThkRef[idx] = cumRefThk

		idx = WALL_SKINS_NUMBER + 1 - idx	! reorder
		cumOppThk = cumOppThk + WALL_SKINS_PARAMS[idx][SKIN_THICKNESS]
		skinCummThkOpp[idx] = cumOppThk
	next i
endif
! ==============================================================================
if curvedWall then
	if WIDO_REVEAL_SIDE then
		mul2 1,-1
		add2 0,WIDO_SILL
	endif
else
	if WIDO_REVEAL_SIDE then add2 0,-WIDO_FRAME_THICKNESS
	if SYMB_ROTANGLE > EPS then mul2 1, -1
	if wallIsLeft then
		add2 0, -WIDO_SILL
	else
		add2 0, -WALL_THICKNESS_ + WIDO_SILL
	endif
	if reorder then
		mul2 1,-1
		add2 0, -WALL_THICKNESS_
	endif
endif
if bCompositeWall then
	if abs(WIDO_ORIG_DIST) > EPS then
		tempWOD = abs(WIDO_ORIG_DIST) - (SYMB_ROTANGLE > EPS) * WIDO_FRAME_THICKNESS
		leftAlfa	= atn(A / 2 / tempWOD)
		rightAlfa	= atn(A / 2 / tempWOD)
	else
		leftAlfa	= 0
		rightAlfa	= 0
	endif
	gs_bTurnDir = (wallIsLeft exor reorder)
! Turned skins and wall contours on the left side ==============================
	if not(gs_stack_left) then
		if curvedWall then
			numTrans = 0
		else
			mul2 -1, 1
			numTrans = 1
		endif
		sideSign	= -1
		distanceX	= leftWidth
		alfaX		= leftAlfa
		alfaJamb	= alfaLeftJamb
		revealWidth	= WIDO_LEFT_JAMB
		bx = bxL
		by = byL
		sx = sxL
		sy = syL
		gosub 1000		! Turn skins
		del numTrans
	endif
! Turned skins and wall contours on the right side =============================
	if not(gs_stack_right) & not(bCornerWindow) then
		if curvedWall then
			mul2 -1,1
			numTrans = 1
		else
			numTrans = 0
		endif

		sideSign	= 1
		distanceX	= rightWidth
		alfaX		= rightAlfa
		alfaJamb	= alfaRightJamb
		revealWidth = WIDO_RIGHT_JAMB
		bx = bxR
		by = byR
		sx = sxR
		sy = syR
		gosub 1000		! Turn skins
		del numTrans
	endif
endif

del top
if not(WIDO_REVEAL_SIDE) then mul2 1,-1
if WIDO_REVEAL_SIDE then add2 0,-WIDO_FRAME_THICKNESS

! ==============================================================================
!	Draw Back Fill
! ==============================================================================

if not(curvedWall) then

	if bCornerWindow then
		px = A/2 + WIDO_SILL * rx + offsetSill * tan(ac_corner_angle - 90) - offsetConnSill / cos(ac_corner_angle - 90)
		py = -WIDO_SILL + offsetSill

		put	px, py,	0

		hotspot2 px,py, unID : unID=unID+1		! Wall corner at the Sill

		px = cwDx2 + A/2 - (WALL_THICKNESS - WIDO_SILL) * rx - offsetBoard * tan(ac_corner_angle - 90) + offsetConnBoard / cos(ac_corner_angle - 90)
		py = WALL_THICKNESS - WIDO_SILL - offsetBoard / cos(WALL_INCL)

		put	px, py, 0

		hotspot2 px,py, unID : unID=unID+1		! Wall corner at the Board
	else
		px1 = A/2 - bOneFillAtRevealSide * WIDO_RIGHT_JAMB
		px2 = A/2 - (not(bRevealInDisplayedStructure) & bOneFillAtRevealSide) * WIDO_RIGHT_JAMB

		put	 px1,	-WIDO_SILL + offsetSill,	0

		if bRevealInDisplayedStructure then
			put px1, 0, 0,
				px2, 0, 0
		endif
		put px2, WALL_THICKNESS - WIDO_SILL + incX * A/2 - offsetBoard / cos(WALL_INCL),	0
	endif

	px1 = -A/2 + (not(bRevealInDisplayedStructure) & bOneFillAtRevealSide) * WIDO_LEFT_JAMB
	px2 = -A/2 + bOneFillAtRevealSide * WIDO_LEFT_JAMB

	put	px1,	WALL_THICKNESS - WIDO_SILL + incX * px1 - offsetBoard / cos(WALL_INCL),	0

	if bRevealInDisplayedStructure then
		put px1, 0, 0,
			px2, 0, 0
	endif
	put px2, -WIDO_SILL + offsetSill, 0
else	! not(curvedWall)

	put 0,	  WOD,		  900,
		bpx4, WOD + bpy4, 0
	if bRevealInDisplayedStructure then
		put bpx2, WOD + bpy2, 0,
			spx1, WOD + spy1, 0
	endif
	put spx2, WOD + spy2, 0,
		spx7, WOD + spy7, 3000
	if bRevealInDisplayedStructure then
		put spx8, WOD + spy8, 0,
			bpx11,WOD + bpy11,0
	endif
	put bpx9, WOD + bpy9, 0,
		bpx4, WOD + bpy4, 3000
endif

set fill		fillTypeNormal*asotv
line_type		1
line_property	0
wallhole2 nsp/3, 1 + 2 + 4, i_pen, 0,0,0,0,use(nsp)
poly2_b nsp/3, 1+2+4+64, gs_wallhole_pen_fg, gs_wallhole_pen_bg,
	get(nsp)
! ==============================================================================
end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end
! ==============================================================================


! ==============================================================================
! Turn skins
! ------------------------------------------------------------------------------
! Input variables:
!	possibleSkinTurnIn:		number of possible plaster skins at the reference side
!	possibleSkinTurnOut:	number of possible plaster skins at the opposite side
!	distanceX:				horizontal distance from the original origo
!	alfaX:					alfa x in case of curved walls (alfaX > 0)
!	alfaJamb:				jamb alfa (alfaJamb > 0)
!	revealWidth:			width of the reveal
! ==============================================================================

1000:

	if curvedWall then
		vectS = sin(alfaX - alfaJamb)
		vectC = cos(alfaX - alfaJamb)
	endif

	nSkinTurnJamb = 0	! Need skins to turn because of the width of the jamb
	nSkinTurnSill = 0	! Need skins to turn because of the depth of the sill

	if abs(revealWidth) > EPS then

		sumThk = 0
		if gs_bTurnDir then
			i = 1
			do
				idx = i: gosub 10	! Get proper index
				thisThk = WALL_SKINS_PARAMS[idx][SKIN_THICKNESS]
				if i = trapezoidCoreSkin & abs(WALL_INCL) > EPS then
					skinThkDiff = WALL_THICKNESS + sideSign * incX * distanceX - compositeThickness
					thisThk = thisThk + skinThkDiff
				endif
				sumThk = sumThk + thisThk

				if sumThk < revealWidth - EPS then
					nSkinTurnJamb = i + 1
				endif
				if sumThk < WIDO_SILL - EPS then
					nSkinTurnSill = i
				endif

				i = i + 1
			while i <= WALL_SKINS_NUMBER
		else
			i = WALL_SKINS_NUMBER
			do
				idx = i: gosub 10	! Get proper index
				thisThk = WALL_SKINS_PARAMS[idx][SKIN_THICKNESS]
				if i = trapezoidCoreSkin & abs(WALL_INCL) > EPS then
					skinThkDiff = WALL_THICKNESS + sideSign * incX * distanceX - compositeThickness
					thisThk = thisThk + skinThkDiff
				endif
				sumThk = sumThk + thisThk
				if sumThk < revealWidth - EPS then
					nSkinTurnJamb = WALL_SKINS_NUMBER - i + 2
				endif
				if sumThk < WIDO_SILL - EPS then
					nSkinTurnSill = WALL_SKINS_NUMBER - i + 1
				endif

				i = i - 1
			while i > 0
		endif
		nSkinTurnJamb = max(nSkinTurnJamb, 1)
		nSkinTurnJamb = min(nSkinTurnJamb, WALL_SKINS_NUMBER)
	endif

	nSkinTurn = min(nSkinTurnJamb, nSkinTurnSill)

	if gs_bTurnDir then
		sillLine = WIDO_SILL
	else
		sillLine = WALL_THICKNESS - WIDO_SILL
	endif

	if abs(revealWidth) > EPS then

		if abs(revealWidth) > EPS | abs(alfaJamb) > EPS then
			if gs_bTurnDir then
				lengthSkinTurnIn = WIDO_SILL
			else
				lengthSkinTurnIn = WALL_THICKNESS - WIDO_SILL
			endif
		else
			lengthSkinTurnIn = 0
		endif

		turnThk = 0

		bNeedLastLine = 0

		for i = 1 to max(nSkinTurn, 1)

			if gs_bTurnDir then
				idx = i: gosub 10	! Get proper index
			else
				idx = WALL_SKINS_NUMBER - i + 1: gosub 10	! Get proper index
			endif

			skinThk = WALL_SKINS_PARAMS[idx][SKIN_THICKNESS]
			if i = trapezoidCoreSkin & abs(WALL_INCL) > EPS then
				skinThkDiff = WALL_THICKNESS + sideSign * incX * distanceX - compositeThickness
				thisThk = thisThk + skinThkDiff
			endif

			bFirst	= (i = 1)
			bLast	= (i = max(nSkinTurn, 1))

			if reorder then
				if idx < WALL_SKINS_NUMBER then
					cummThk = skinCummThkRef[idx + 1]
				else
					cummThk = 0
				endif
			else
				if idx > 1 then
					cummThk = skinCummThkRef[idx - 1]
				else
					cummThk = 0
				endif
			endif

! Curved Wall ==================================================================

			if curvedWall then

! p1 point ---------------------------------------------------------------------

				xo = 0
				yo = -WOD
				if gs_bTurnDir then
					refY1 = cummThk + skinThk
				else
					refY1 = cummThk
				endif
				if wallIsLeft exor reorder then
					ro = rSill - signReorder * refY1
				else
					ro = rBoard - signReorder * refY1
				endif

				x2 = -sx * sideSign - (turnThk + skinThk) * vectC
				y2 =  sy - (turnThk + skinThk) * vectS * signWallIsLeft
				x1 = x2 + vectS
				y1 = y2 - vectC * signWallIsLeft

				gosub 101	! Circle - Line intersection
				gosub 102	! Select good intersection point

				pointAlpha = abs(atn(cx / (cy + WOD)))
				limitAlpha = abs(atn(bx / (by + WOD)))
				if pointAlpha > limitAlpha then
					cx = -ro * sin(limitAlpha)
					cy = -ro * cos(limitAlpha) * signWallIsLeft + WOD
				endif

				px1 = cx
				py1 = cy

! p2 point ---------------------------------------------------------------------

				x2 = -sx * sideSign - (turnThk + skinThk) * vectC
				y2 =  sy - (turnThk + skinThk) * vectS * signWallIsLeft
				x1 = x2 + vectS
				y1 = y2 - vectC * signWallIsLeft

				ro = rSillLine

				if bWndCurved then
					xo = 0
					yo = -WOD
					refY2 = lengthSkinTurnIn

					gosub 101	! Circle - Line intersection
					gosub 102	! Select good intersection point
				else
					if alfaJamb < EPS then
						cx = bx
						cy = by
					else
						x11 = x1
						y11 = y1
						x12 = x2
						y12 = y2

						x21 = -sx * sideSign
						y21 =  sy
						x22 = bx
						y22 = by

						gosub 100	! Line - Line intersection
					endif
				endif

				pointAlpha = abs(atn(cx / (cy + WOD)))
				limitAlpha = abs(atn(bx / (by + WOD)))
				if pointAlpha > limitAlpha then
					cx = -ro * sin(limitAlpha)
					cy = -ro * cos(limitAlpha) * signWallIsLeft + WOD
				else
					if bLast then
						bNeedLastLine = 1
						lastLineX = cx
						lastLineY = cy

						if WIDO_SILL < skinCummThkRef[idx] then
							if wallIsLeft then
								lastLineIdx = nSkinTurnSill + 1
							else
								lastLineIdx = WALL_SKINS_NUMBER - nSkinTurnSill
							endif
						else
							lastLineIdx = idx + signWallIsLeft
						endif
						lastLineIdx = max(lastLineIdx, 1)
						lastLineIdx = min(lastLineIdx, WALL_SKINS_NUMBER)
					endif
				endif

				px2 = cx
				py2 = cy

! p3 point ---------------------------------------------------------------------

				x2 = -sx * sideSign - turnThk * vectC
				y2 =  sy - turnThk * vectS * signWallIsLeft
				x1 = x2 + vectS
				y1 = y2 - vectC * signWallIsLeft

				if bWndCurved then
					xo = 0
					yo = -WOD
					refY3 = lengthSkinTurnIn
					ro = rSillLine

					gosub 101	! Circle - Line intersection
					gosub 102	! Select good intersection point
				else
					if alfaJamb < EPS then
						cx = bx
						cy = by
					else
						x11 = x1
						y11 = y1
						x12 = x2
						y12 = y2

						x21 = -sx * sideSign
						y21 =  sy
						x22 = bx
						y22 = by

						gosub 100	! Line - Line intersection
					endif
				endif

				px3 = cx
				py3 = cy

! p4 point ---------------------------------------------------------------------

				xo = 0
				yo = -WOD
				if gs_bTurnDir then
					refY4 = cummThk
				else
					refY4 = cummThk + skinThk
				endif
				if wallIsLeft exor reorder then
					ro = rSill - signReorder * refY4 - signWallIsLeft * offsetSill
				else
					ro = rBoard - signReorder * refY4 - signWallIsLeft * offsetSill
				endif

				x2 = -sx * sideSign - turnThk * vectC
				y2 =  sy - turnThk * vectS * signWallIsLeft
				x1 = x2 + vectS
				y1 = y2 - vectC * signWallIsLeft

				gosub 101	! Circle - Line intersection
				gosub 102	! Select good intersection point
				px4 = cx
				py4 = cy

			else

! Straight Wall, Trapezoid Wall ================================================

				skinLimitThk = min(turnThk + skinThk, revealWidth) - turnThk

! p1 point ---------------------------------------------------------------------

				if gs_bTurnDir then
					py1 = cummThk + skinThk
				else
					py1 = cummThk
				endif
				px1 = distanceX - revealWidth + turnThk + skinLimitThk

				if gs_bTurnDir then
					bSkipThisSkin = (lengthSkinTurnIn < py1 + EPS)
				else
					bSkipThisSkin = (lengthSkinTurnIn > py1 - EPS)
				endif

! p2 point ---------------------------------------------------------------------

				py2 = lengthSkinTurnIn
				if nSkinTurn = 0 & bFirst then
					px2 = distanceX
				else
					px2 = distanceX - revealWidth + turnThk + skinLimitThk
				endif

				if bLast & abs(px2 - distanceX) > EPS then
					bNeedLastLine = 1
					lastLineX = px2
					lastLineY = py2

					if WIDO_SILL < skinCummThkRef[idx] then
						lastLineIdx = idx - signReorder
					else
						lastLineIdx = idx + signWallIsLeft
					endif
					lastLineIdx = max(lastLineIdx, 1)
					lastLineIdx = min(lastLineIdx, WALL_SKINS_NUMBER)
				endif

! p3 point ---------------------------------------------------------------------

				py3 = lengthSkinTurnIn
				px3 = distanceX - revealWidth + turnThk

! p4 point ---------------------------------------------------------------------

				if gs_bTurnDir then
					py4 = cummThk + bFirst * offsetSill
				else
					py4 = cummThk + skinThk - bFirst * offsetSill
				endif
				px4 = distanceX - revealWidth + turnThk

			endif

			bSkipThisSkin = (i > nSkinTurn)


! Draw the turned skins ========================================================

			bShowSkin = not(GLOB_STRUCTURE_DISPLAY <> STRUCTURE_ENTIRE_STRUCTURE & abs(WALL_SKINS_PARAMS[idx][SKIN_FINISH_STATUS] - 1) < EPS)
			bShowSkin = bShowSkin & not(GLOB_STRUCTURE_DISPLAY = STRUCTURE_CORE_ONLY & WALL_SKINS_PARAMS[idx][SKIN_CORE_STATUS] < EPS)

			if not(bSkipThisSkin) & bShowSkin then

				skinFillType		= WALL_SKINS_PARAMS[idx][SKIN_FILL]
				skinFillFgPen		= WALL_SKINS_PARAMS[idx][SKIN_FILL_PEN]
				skinFillBgPen		= WALL_SKINS_PARAMS[idx][SKIN_FILL_BACK_PEN]
				skinFillOrientation	= WALL_SKINS_PARAMS[idx][SKIN_FILL_ORIENTATION]
!!!skinFillType = 64

				fill skinFillType
				bLocalFill	= skinFillOrientation
				penFillFg	= skinFillFgPen
				penFillBg	= skinFillBgPen

				put	px1,	py1,	0,
					px2,	py2,	0,
					px3,	py3,	3000 * curvedWall,
					px4,	py4,	0

				gosub 200	! Draw wallblock

				if gs_bTurnDir then
					tempPen		 = WALL_SKINS_PARAMS[idx][SKIN_LOWER_LINE_PEN]
					tempLineType = WALL_SKINS_PARAMS[idx][SKIN_LOWER_LINE_TYPE]
				else
					tempPen		 = WALL_SKINS_PARAMS[idx][SKIN_UPPER_LINE_PEN]
					tempLineType = WALL_SKINS_PARAMS[idx][SKIN_UPPER_LINE_TYPE]
				endif
				if tempPen > EPS then
					pen				tempPen
					line_type		tempLineType
					line_property	LINE_PROPERTY_INNER
				endif
			endif

			if WALL_SKINS_PARAMS[idx][SKIN_END_FACE_PEN] > EPS then
				pen				WALL_SKINS_PARAMS[idx][SKIN_END_FACE_PEN]
				line_type		1
				line_property	LINE_PROPERTY_CONTOUR
				if (nSkinTurn > 0 | bFirst) & bRevealInDisplayedStructure then line2	px3,py3, px2,py2
				if bFirst & bRevealInDisplayedStructure then line2	px3,py3, px4,py4
			endif

			turnThk = turnThk + skinThk
		next i

		if bNeedLastLine & bRevealInDisplayedStructure then
			if WALL_SKINS_PARAMS[lastLineIdx][SKIN_END_FACE_PEN] > EPS then
				pen				WALL_SKINS_PARAMS[lastLineIdx][SKIN_END_FACE_PEN]
				line_type		1
				line_property	LINE_PROPERTY_CONTOUR
				line2 lastLineX,lastLineY, bx,by
			endif
		endif
	endif


! Draw non turned skin's end face ==============================================

	turnThk		= 0
	skinThkDiff	= 0
	dy			= 0
	for i = nSkinTurn + 1 to WALL_SKINS_NUMBER
		if gs_bTurnDir then
			idx = i: gosub 10	! Get proper index
		else
			idx = WALL_SKINS_NUMBER - i + 1: gosub 10	! Get proper index
		endif

		skinThk = WALL_SKINS_PARAMS[idx][SKIN_THICKNESS]
		if i = trapezoidCoreSkin & bInclinedWall then
			skinThkDiff = WALL_THICKNESS + sideSign * incX * distanceX - compositeThickness
			skinThk = skinThk + skinThkDiff
		endif
		if i > trapezoidCoreSkin & bInclinedWall then
			dy = skinThkDiff
		endif

		if reorder then
			if idx < WALL_SKINS_NUMBER then
				cummThk = skinCummThkRef[idx + 1]
			else
				cummThk = 0
			endif
		else
			if idx > 1 then
				cummThk = skinCummThkRef[idx - 1]
			else
				cummThk = 0
			endif
		endif

		if curvedWall then

! Curved Wall ==================================================================

			refY1 = cummThk
			if reorder then
				px1 = -(refY1 + min(rSill, rBoard)) * sin(alfaX)
				py1 = signWallIsLeft * (refY1 + min(rSill, rBoard)) * cos(alfaX) - WOD
			else
				px1 = -(WALL_THICKNESS - refY1 + min(rSill, rBoard)) * sin(alfaX)
				py1 = signWallIsLeft * (WALL_THICKNESS - refY1 + min(rSill, rBoard)) * cos(alfaX) - WOD
			endif

			refY2 = cummThk + skinThk
			if reorder then
				px2 = -(refY2 + min(rSill, rBoard)) * sin(alfaX)
				py2 = signWallIsLeft * (refY2 + min(rSill, rBoard)) * cos(alfaX) - WOD
			else
				px2 = -(WALL_THICKNESS - refY2 + min(rSill, rBoard)) * sin(alfaX)
				py2 = signWallIsLeft * (WALL_THICKNESS - refY2 + min(rSill, rBoard)) * cos(alfaX) - WOD
			endif
		else

! Straight Wall, Trapezoid Wall ================================================

			refY1 = cummThk + dy
			py1 = refY1
			px1 = distanceX

			refY2 = cummThk + dy + skinThk
			py2 = refY2
			px2 = distanceX
		endif


! Wall End Lines ---------------------------------------------------------------

		bShowSkin = (WALL_SKINS_PARAMS[idx][SKIN_END_FACE_PEN] > EPS)
		bShowSkin = bShowSkin & not(GLOB_STRUCTURE_DISPLAY <> STRUCTURE_ENTIRE_STRUCTURE & abs(WALL_SKINS_PARAMS[idx][SKIN_FINISH_STATUS] - 1) < EPS)
		bShowSkin = bShowSkin & not(GLOB_STRUCTURE_DISPLAY = STRUCTURE_CORE_ONLY & WALL_SKINS_PARAMS[idx][SKIN_CORE_STATUS] < EPS)

		if bShowSkin then
			pen				WALL_SKINS_PARAMS[idx][SKIN_END_FACE_PEN]
			line_type		1
			line_property	LINE_PROPERTY_CONTOUR

			if abs(revealWidth) > EPS then
				if gs_bTurnDir then
					if refY1 > sillLine then
						line2 px1,py1, px2,py2
					else
						if refY2 > sillLine then
							line2 bx,by, px2,py2
						endif
					endif
				else
					if refY2 < sillLine then
						line2 px1,py1, px2,py2
					else
						if refY1 < sillLine then
							line2 px1,py1, bx, by
						endif
					endif
				endif
			else
				line2 px1,py1, px2,py2
			endif
		endif
	next i

return


! ==============================================================================
! Convert polygon: AC polygon -> GDL polygon
! ------------------------------------------------------------------------------
! Input variables:
!	stack:				AC polygon
! Output variables:
!	stack:				GDL polygon
! ==============================================================================

202:

	numPnts = nsp/3
	ac2gdl_lpa = 0
	ac2gdJ = 1

	for ac2gdlI = 1 to numPnts
		ac2gdl_px = get(1)
		ac2gdl_py = get(1)
		ac2gdl_pa = get(1)

		if ac2gdlI = 1 then
			ac2gdl_spx = ac2gdl_px
			ac2gdl_spy = ac2gdl_py
		endif

		if abs(ac2gdl_lpa) > EPS then
			ac2gdl_mx = (ac2gdl_px + ac2gdl_lpx) / 2
			ac2gdl_my = (ac2gdl_py + ac2gdl_lpy) / 2
			ac2gdl_ratio = 1 / 2 / tan (ac2gdl_lpa / 2)

			ac2gdl_cx = ac2gdl_mx - ac2gdl_ratio * (ac2gdl_py - ac2gdl_lpy)	! Arc center
			ac2gdl_cy = ac2gdl_my + ac2gdl_ratio * (ac2gdl_px - ac2gdl_lpx)

			put ac2gdl_cx,	ac2gdl_cy,	900,
				0,			ac2gdl_lpa,	4000		! Was: 4001
		endif

		if ac2gdlI>1 & abs(ac2gdl_spx - ac2gdl_px) < EPS & abs(ac2gdl_spy - ac2gdl_py) < EPS then
			put ac2gdl_px, ac2gdl_py, -1
		else
			put ac2gdl_px, ac2gdl_py, 0		! Was: 1
		endif

		ac2gdl_lpx = ac2gdl_px
		ac2gdl_lpy = ac2gdl_py
		ac2gdl_lpa = ac2gdl_pa
	next ac2gdlI
return


! ==============================================================================
! Draw contour polyline
! ------------------------------------------------------------------------------
! Input variables:
!	stack:				polyline
! ==============================================================================

201:

	numPnts = nsp/3
	ac2gdl_lpa = 0
	ac2gdJ = 1

	for ac2gdlI = 1 to numPnts
		ac2gdl_px = get(1)
		ac2gdl_py = get(1)
		ac2gdl_pa = get(1)

		if ac2gdlI = 1 then
			ac2gdl_spx = ac2gdl_px
			ac2gdl_spy = ac2gdl_py
		endif

		if abs(ac2gdl_lpa) > EPS then
			ac2gdl_mx = (ac2gdl_px + ac2gdl_lpx) / 2
			ac2gdl_my = (ac2gdl_py + ac2gdl_lpy) / 2
			ac2gdl_ratio = 1 / 2 / tan (ac2gdl_lpa / 2)

			ac2gdl_cx = ac2gdl_mx - ac2gdl_ratio * (ac2gdl_py - ac2gdl_lpy)	! Arc center
			ac2gdl_cy = ac2gdl_my + ac2gdl_ratio * (ac2gdl_px - ac2gdl_lpx)

			R = sqr((ac2gdl_px - ac2gdl_cx)^2 + (ac2gdl_py - ac2gdl_cy)^2)

			vx = ac2gdl_lpx - ac2gdl_cx
			vy = ac2gdl_lpy - ac2gdl_cy
			gosub 103	! Direction Angle
			alpha = angle

			vx = ac2gdl_px - ac2gdl_cx
			vy = ac2gdl_py - ac2gdl_cy
			gosub 103	! Direction Angle
			beta = angle

			if abs(alpha - beta) > EPS then
				if SYMB_MIRRORED then
					arc2 ac2gdl_cx,	ac2gdl_cy, R, beta, alpha
				else
					arc2 ac2gdl_cx,	ac2gdl_cy, R, alpha, beta
				endif
			endif
		else
			if ac2gdlI > 1 then
				line2 ac2gdl_lpx, ac2gdl_lpy, ac2gdl_px, ac2gdl_py
			endif
		endif

		ac2gdl_lpx = ac2gdl_px
		ac2gdl_lpy = ac2gdl_py
		ac2gdl_lpa = ac2gdl_pa
	next ac2gdlI
return



! ==============================================================================
!		Calculate proper skin index from parameter 'idx'
! ------------------------------------------------------------------------------
! Input variables:
!	idx:	index of current skin
! Output variables:
!	idx:	index of skin via 'Composite Structures' dialog
! ==============================================================================

10:
	if reorder then
		idx = WALL_SKINS_NUMBER + 1 - idx
	endif
return


! ==============================================================================
! Line - Line intersection
! ------------------------------------------------------------------------------
! Input variables:
!	EPS:				epsylon
!	x11,y11, x12,y12	line #1
!	x21,y21, x22,y22	line #2
!
! Returned variables:
!	state:				0 = no intersection point
!						1 = valid intersection point
!	cx, cy:				intersection point
! ==============================================================================

100:
	lliDiv = (x11-x12) * (y21-y22) - (y11-y12) * (x21-x22)

	if abs(lliDiv) > EPS then
		! Intersection

		temp1 = x11 * y12 - y11 * x12
		temp2 = x21 * y22 - y21 * x22

		tempx = temp1 * (x21-x22) - (x11-x12) * temp2
		tempy = temp1 * (y21-y22) - (y11-y12) * temp2

		state = 1
		cx = (tempx / lliDiv)
		cy = (tempy / lliDiv)
	else
		! No Intersection
		state = 0
		cx = 0
		cy = 0
	endif
return


! ==============================================================================
! Circle - Line intersection
! ------------------------------------------------------------------------------
! Input variables:
!	EPS:				epsylon
!	xo,yo,ro:			circle
!	x1,y1, x2,y2		line
!
! Returned variables:
!	state:				0 = no intersection point
!						1 = one intersection point (tangential line)
!						2 = two intersection points
!	xa, ya:				intersection point #1
!	xb, yb:				intersection point #2
! ==============================================================================

101:
	tempX1 = x1 - xo: tempY1 = y1 - yo
	tempX2 = x2 - xo: tempY2 = y2 - yo

	if abs(tempX2 - tempX1) < EPS then
		if abs(ro - tempX1) < EPS then
			state = 1
			xa = tempX1
			ya = 0
			xb = tempX1
			yb = 0
		else
			state = 2
			xa = tempX1
			ya = sqr(ro^2 - tempX1^2)
			xb = tempX1
			yb = -sqr(ro^2 - tempX1^2)
		endif
	else
		kf = (tempY2 - tempY1) / (tempX2 - tempX1)
		ad = 1 + kf^2
		bd = 2 * tempY1 * kf - 2 * tempX1 * kf^2
		cd = tempY1^2 - 2 * tempX1 * tempY1 * kf + tempX1^2 * kf^2 - ro^2

		if bd^2 - 4 * ad * cd < 0 then
			state = 0: xa = 0: ya = 0: xb = 0: yb = 0
		else
			xa = (-bd + sqr(bd^2 - 4 * ad * cd)) / (2 * ad)
			ya = tempY1 + (xa - tempX1) * kf
			xb = (-bd - sqr(bd^2 - 4 * ad * cd)) / (2 * ad)
			yb = tempY1 + (xb - tempX1) * kf

			if abs(xa - xb) < EPS then state = 1 else state = 2
		endif
	endif

	if state = 2 then
		da = sqr((tempX1 - xa)^2 + (tempY1 - ya)^2)
		db = sqr((tempX1 - xb)^2 + (tempY1 - yb)^2)

		if db < da then
			xxo = xa: yyo = ya
			xa = xb:  ya = yb
			xb = xxo: yb = yyo
		endif
	endif

	xa = xa + xo: ya = ya + yo
	xb = xb + xo: yb = yb + yo
return


! ==============================================================================
! Select good intersection point after Circle - Line intersection
! ------------------------------------------------------------------------------
! Input variables:
!	state:				intersection status
!	wallIsLeft:
!	xa, ya:				intersection point #1
!	xb, yb:				intersection point #2
!
! Returned variables:
!	cx, cy:				selected intersection point
! ==============================================================================

102:
	cx = 0
	cy = 0
	if state = 1 then
		cx = xa
		cy = ya
	endif
	if state = 2 then
		if wallIsLeft then
			if ya > yb then
				cx = xa
				cy = ya
			else
				cx = xb
				cy = yb
			endif
		else
			if ya < yb then
				cx = xa
				cy = ya
			else
				cx = xb
				cy = yb
			endif
		endif
	endif
return


! ==============================================================================
! Direction Angle
! ------------------------------------------------------------------------------
! Input variables:
!	vx, vy:				vector
!
! Returned variables:
!	alpha:				selected intersection point
! ==============================================================================

103:

if abs(vx) < EPS & abs(vy) < EPS then
	angle = 0
	return
endif

if abs(vx) < EPS then
	if vy > 0 then
		angle = 90
	else
		angle = 270
	endif
else
	angle = atn(vy / vx)
	if vx >= 0 then
		if angle < 0 then
			angle = angle + 360
		endif
	else
		angle = 180 + angle
	endif
endif

return


! ==============================================================================
! Draw wallblock with contour
! ------------------------------------------------------------------------------
! Input variables:
!	stack:				wallblock polygon
!	penFillFg			fill foreground pen (pen index)
!	penFillBg			fill background pen (pen index)
!	bLocalFill			fill orientation (0 / 1)
! ==============================================================================

200:
	if nsp >= 9 then
	else
		for ii=1 to nsp
			n = get(1)
		next ii
		return
	endif

	numPoints = nsp/3
	for ii=1 to numPoints
		if ii = 1 then
			x1 = get(1)
			y1 = get(1)
			s1 = get(1)
			firstX = x1
			firstY = y1
			firstS = s1
		endif
		if ii = numPoints then
			x2 = firstX
			y2 = firstY
			s2 = firstS
		else
			x2 = get(1)
			y2 = get(1)
			s2 = get(1)
		endif

		if bittest(s2, 0) then
			if s2 >= 3000 then
				R = sqr(x2^2 + (y2 + WOD)^2)

				vx = x1
				vy = y1 + WOD
				gosub 103	! Direction Angle
				alpha = angle

				vx = x2
				vy = y2 + WOD
				gosub 103	! Direction Angle
				beta = angle

				if abs(alpha - beta) > EPS then
					arc2 0,-WOD, R, min(alpha,beta), max(alpha,beta)
				endif
			else
				line2 x1,y1, x2,y2
			endif
		endif

		x1 = x2
		y1 = y2
		s1 = s2
	next ii
return
