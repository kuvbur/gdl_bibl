<?xml version="1.0" encoding="UTF-8"?>
<Symbol IsArchivable="false" IsPlaceable="false" MainGUID="276DEC8A-144D-9449-8941-D181C1FB5DBA" MigrationValue="Normal" Owner="1196638531" Signature="1196644685" Version="43">
<Ancestry SectVersion="1" SectionFlags="0" SubIdent="0" Template="false">
	<MainGUID>F938E33A-329D-4A36-BE3E-85E126820996</MainGUID>
	<MainGUID>103E8D2C-8230-42E1-9597-46F84CCE28C0</MainGUID>
</Ancestry>

<CalledMacros SectVersion="2" SectionFlags="0" SubIdent="0">
</CalledMacros>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_3D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
!------------------------
! Reinforcement
! 2012, Eptar Kft.
!------------------------
if not(gs_shadow) then shadow off
pen peniron
resol gs_resol
material gs_mat
unidstart=unid
arctoler=0.001
arcdensity=1
arccalc=0
if _iirontype=iron_type_rebar then
ntrans=0
if _ironsubtype=type_rebar_normal then
centerlength=_fulllength-_endlength1-_endlength2-abs(_offset1)-abs(_offset2)
if centerlength<eps&not(bplacedmanual) then
btran=0
if _iendtype1=4|_iendtype1=5|_iendtype1=6 then
btran=1
if _iendtype1=4 then _iendtype1=1
if _iendtype1=5 then _iendtype1=2
if _iendtype1=6 then
_iendtype1=3
if _fulllength/2<_turnbacklength1 then _turnbacklength1=_fulllength/2-0.01
if _turnbacklength1<eps then _iendtype1=2
endif
endif
if _iendtype2=4|_iendtype2=5|_iendtype2=6 then
btran=1
if _iendtype2=4 then _iendtype2=1
if _iendtype2=5 then _iendtype2=2
if _iendtype2=6 then
_iendtype2=3
if _fulllength/2<_turnbacklength2 then _turnbacklength2=_fulllength/2-0.01
if _turnbacklength2<eps then _iendtype2=2
endif
endif
if btran then
ntrans=1
addy max(_endheight1,_endheight2)
endif
endif
dim path[20][2]
pathnum=0
if _iendtype1=1 then
path[1][1]=-1
path[1][2]=0
path[2][1]=0
path[2][2]=0
pathnum=pathnum+2
else
if _iendtype1=2 then
path[1][1]=0
path[1][2]=-_endheight1-(_endheight1>0)+(_endheight1<0)
path[2][1]=0
path[2][2]=-_endheight1
path[3][1]=0
path[3][2]=0
pathnum=pathnum+3
else
if _iendtype1=3 then
path[1][1]=_turnbacklength1+(_turnbacklength1>0)-(_turnbacklength1<0)
path[1][2]=-_endheight1
path[2][1]=_turnbacklength1
path[2][2]=-_endheight1
path[3][1]=0
path[3][2]=-_endheight1
path[4][1]=0
path[4][2]=0
pathnum=pathnum+4
else
if _iendtype1=4 then
path[1][1]=-1
path[1][2]=_offset1
path[2][1]=0
path[2][2]=_offset1
path[3][1]=_endlength1
path[3][2]=_offset1
path[4][1]=_endlength1+abs(_offset1)
path[4][2]=0
pathnum=pathnum+4
else
if _iendtype1=5 then
path[1][1]=0
path[1][2]=_offset1-_endheight1-(_endheight1>0)+(_endheight1<0)
path[2][1]=0
path[2][2]=_offset1-_endheight1
path[3][1]=0
path[3][2]=_offset1
path[4][1]=_endlength1
path[4][2]=_offset1
path[5][1]=_endlength1+abs(_offset1)
path[5][2]=0
pathnum=pathnum+5
else
if _iendtype1=6 then
path[1][1]=_turnbacklength1+(_turnbacklength1>0)-(_turnbacklength1<0)
path[1][2]=_offset1-_endheight1
path[2][1]=_turnbacklength1
path[2][2]=_offset1-_endheight1
path[3][1]=0
path[3][2]=_offset1-_endheight1
path[4][1]=0
path[4][2]=_offset1
path[5][1]=_endlength1
path[5][2]=_offset1
path[6][1]=_endlength1+abs(_offset1)
path[6][2]=0
pathnum=pathnum+6
endif
endif
endif
endif
endif
endif
if _iendtype2=1 then
path[pathnum+1][1]=_fulllength
path[pathnum+1][2]=0
path[pathnum+2][1]=_fulllength+1
path[pathnum+2][2]=0
pathnum=pathnum+2
else
if _iendtype2=2 then
path[pathnum+1][1]=_fulllength
path[pathnum+1][2]=0
path[pathnum+2][1]=_fulllength
path[pathnum+2][2]=-_endheight2
path[pathnum+3][1]=_fulllength
path[pathnum+3][2]=-_endheight2-(_endheight2>0)+(_endheight2<0)
pathnum=pathnum+3
else
if _iendtype2=3 then
path[pathnum+1][1]=_fulllength
path[pathnum+1][2]=0
path[pathnum+2][1]=_fulllength
path[pathnum+2][2]=-_endheight2
path[pathnum+3][1]=_fulllength-_turnbacklength2
path[pathnum+3][2]=-_endheight2
path[pathnum+4][1]=_fulllength-_turnbacklength2-(_turnbacklength2>0)+(_turnbacklength2<0)
path[pathnum+4][2]=-_endheight2
pathnum=pathnum+4
else
if _iendtype2=4 then
path[pathnum+1][1]=_fulllength-_endlength2-abs(_offset2)
path[pathnum+1][2]=0
path[pathnum+2][1]=_fulllength-_endlength2
path[pathnum+2][2]=_offset2
path[pathnum+3][1]=_fulllength
path[pathnum+3][2]=_offset2
path[pathnum+4][1]=_fulllength+1
path[pathnum+4][2]=_offset2
pathnum=pathnum+4
else
if _iendtype2=5 then
path[pathnum+1][1]=_fulllength-_endlength2-abs(_offset2)
path[pathnum+1][2]=0
path[pathnum+2][1]=_fulllength-_endlength2
path[pathnum+2][2]=_offset2
path[pathnum+3][1]=_fulllength
path[pathnum+3][2]=_offset2
path[pathnum+4][1]=_fulllength
path[pathnum+4][2]=_offset2-_endheight2
path[pathnum+5][1]=_fulllength
path[pathnum+5][2]=_offset2-_endheight2-(_endheight2>0)+(_endheight2<0)
pathnum=pathnum+5
else
if _iendtype2=6 then
path[pathnum+1][1]=_fulllength-_endlength2-abs(_offset2)
path[pathnum+1][2]=0
path[pathnum+2][1]=_fulllength-_endlength2
path[pathnum+2][2]=_offset2
path[pathnum+3][1]=_fulllength
path[pathnum+3][2]=_offset2
path[pathnum+4][1]=_fulllength
path[pathnum+4][2]=_offset2-_endheight2
path[pathnum+5][1]=_fulllength-_turnbacklength2
path[pathnum+5][2]=_offset2-_endheight2
path[pathnum+6][1]=_fulllength-_turnbacklength2-(_turnbacklength2>0)+(_turnbacklength2<0)
path[pathnum+6][2]=_offset2-_endheight2
pathnum=pathnum+6
endif
endif
endif
endif
endif
endif
if idetlevel3d=2 then
for i=1 to pathnum
	put path[i][1],path[i][2],0,0
next i
if nsp>15 then
tube 2,nsp/4,1+2+16+32+128,
0,0,901,
_d/2,360,4001,
get(nsp)
else
for i=1 to nsp
eee=get(1)
next i
endif
else
for i=2 to pathnum-2
lin_ path[i][1],path[i][2],0,path[i+1][1],path[i+1][2],0
next i
endif
if benablehsedit then
if _iendtype1=1|_iendtype1=2|_iendtype1=3 then
_leftpos=0
else
_leftpos=_offset1
endif
if _iendtype2=1|_iendtype2=2|_iendtype2=3 then
_rightpos=0
else
_rightpos=_offset2
endif
if _iendtype1=2|_iendtype1=3|_iendtype1=5|_iendtype1=6 then
hotspot 0,_leftpos,0,unid,endheight1,1+128:unid=unid+1
hotspot 0,_leftpos-_endheight1,0,unid,endheight1,2:unid=unid+1
hotspot 0,_leftpos+1,0,unid,endheight1,3:unid=unid+1
if _iendtype1=3|_iendtype1=6 then
hotspot 0,_leftpos-_endheight1,0,unid,turnbacklength1,1+128:unid=unid+1
hotspot _turnbacklength1,_leftpos-_endheight1,0,unid,turnbacklength1,2:unid=unid+1
hotspot-1,_leftpos-_endheight1,0,unid,turnbacklength1,3:unid=unid+1
else
unid=unid+3
endif
else
unid=unid+6
endif
if _iendtype2=2|_iendtype2=3|_iendtype2=5|_iendtype2=6 then
hotspot _fulllength,_rightpos,0,unid,endheight2,1+128:unid=unid+1
hotspot _fulllength,_rightpos-_endheight2,0,unid,endheight2,2:unid=unid+1
hotspot _fulllength,_rightpos+1,0,unid,endheight2,3:unid=unid+1
if _iendtype2=3|_iendtype2=6 then
hotspot _fulllength,_rightpos-_endheight2,0,unid,turnbacklength2,1+128:unid=unid+1
hotspot _fulllength-_turnbacklength2,_rightpos-_endheight2,0,unid,turnbacklength2,2:unid=unid+1
hotspot _fulllength+1,_rightpos-_endheight2,0,unid,turnbacklength2,3:unid=unid+1
else
unid=unid+3
endif
else
unid=unid+6
endif
if _iendtype1=4|_iendtype1=5|_iendtype1=6 then
hotspot 0,_leftpos,0,unid,endlength1,1+128:unid=unid+1
hotspot _endlength1,_leftpos,0,unid,endlength1,2:unid=unid+1
hotspot-1,_leftpos,0,unid,endlength1,3:unid=unid+1
hotspot _endlength1,0,0,unid,offset1,1+128:unid=unid+1
hotspot _endlength1,_offset1,0,unid,offset1,2:unid=unid+1
hotspot _endlength1,-1,0,unid,offset1,3:unid=unid+1
hotspot _endlength1+abs(_offset1),0,0,unid:unid=unid+1
else
unid=unid+7
endif
if _iendtype2=4|_iendtype2=5|_iendtype2=6 then
hotspot _fulllength,_rightpos,0,unid,endlength2,1+128:unid=unid+1
hotspot _fulllength-_endlength2,_rightpos,0,unid,endlength2,2:unid=unid+1
hotspot _fulllength+1,_rightpos,0,unid,endlength2,3:unid=unid+1
hotspot _fulllength-_endlength2,0,0,unid,offset2,1+128:unid=unid+1
hotspot _fulllength-_endlength2,_offset2,0,unid,offset2,2:unid=unid+1
hotspot _fulllength-_endlength2,-1,0,unid,offset2,3:unid=unid+1
hotspot _fulllength-_endlength2-abs(_offset2),0,0,unid:unid=unid+1
else
unid=unid+7
endif
else
for i=2 to pathnum-1
hotspot path[i][1],path[i][2],0,unid:unid=unid+1
next i
endif
endif
if _ironsubtype=type_rebar_polygon then
rotx-90
ntrans=ntrans+1
if benablehsedit then
for i=1 to vardim1(rebarprevcoords)
unid=unidstart+(i-1)*20
hotspot 0,0,rebarprevcoords[i][2],unid,rebarprevcoords[i][1],1+128:unid=unid+1
hotspot-1,0,rebarprevcoords[i][2],unid,rebarprevcoords[i][1],3:unid=unid+1
hotspot rebarprevcoords[i][1],0,rebarprevcoords[i][2],unid,rebarprevcoords[i][1],2:unid=unid+1
hotspot rebarprevcoords[i][1],0,0,unid,rebarprevcoords[i][2],1+128:unid=unid+1
hotspot rebarprevcoords[i][1],0,-1,unid,rebarprevcoords[i][2],3:unid=unid+1
hotspot rebarprevcoords[i][1],0,rebarprevcoords[i][2],unid,rebarprevcoords[i][2],2:unid=unid+1
next i
for i=1 to __nironpoint-not(_bclosedpolygon)
if i<=vardim1(rebararcpoints) then
hotspot _halfpoints[i][1],0,_halfpoints[i][2],unid,rebararcpoints[i],1:unid=unid+1
hotspot _halfpoints[i][5],0,_halfpoints[i][6],unid,rebararcpoints[i],3:unid=unid+1
hotspot _halfpoints[i][3],0,_halfpoints[i][4],unid,rebararcpoints[i],2:unid=unid+1
gosub "arcSign"
endif
if i<=vardim1(rebarnewpoint) then
hotspot 0,0,rebarnewpoint[i][2],unid,rebarnewpoint[i][1],1+128:unid=unid+1
hotspot-1,0,rebarnewpoint[i][2],unid,rebarnewpoint[i][1],3:unid=unid+1
hotspot rebarnewpoint[i][1],0,rebarnewpoint[i][2],unid,rebarnewpoint[i][1],2:unid=unid+1
hotspot rebarnewpoint[i][1],0,0,unid,rebarnewpoint[i][2],1+128:unid=unid+1
hotspot rebarnewpoint[i][1],0,-1,unid,rebarnewpoint[i][2],3:unid=unid+1
hotspot rebarnewpoint[i][1],0,rebarnewpoint[i][2],unid,rebarnewpoint[i][2],2:unid=unid+1
gosub "newPointSign"
endif
next i
else
for i=1 to __nironpoint
unid=unidstart+(i-1)*20
hotspot __ironpointcoords[i][1],0,__ironpointcoords[i][2],unid
next i
endif
gosub "drawPolygonIron"
endif
del ntrans
endif
if _iirontype=iron_type_stirrup then
if _ironsubtype=type_stirrup_normal then
rotx 90
if idetlevel3d=2 then
put _cxr-_bendradius*_s45-_jointlength*2*_s45,_cyt+_bendradius*_s45-_jointlength*2*_s45,0,0
put _cxr-_bendradius*_s45-_jointlength*_s45,_cyt+_bendradius*_s45-_jointlength*_s45,0,0
put _cxr-_bendradius*_s45,_cyt+_bendradius*_s45,0,0
_alfa=-135
_curalfa=135
_cx=_cxr
_cy=_cyt
_cz=0
_radius=_bendradius
_lastpoint=0
gosub "putArc"
put _hoopx,_cyt,0,0
put _hoopx,_cyb,0,0
_alfa=-90
_curalfa=360
_cx=_cxr
_cy=_cyb
_radius=_bendradius
gosub "putArc"
put _cxr,0,0,0
put _cxl,0,0,0
_curalfa=270
_cx=_cxl
gosub "putArc"
put 0,_cyb,0,0
put 0,_cyt,0,0
_curalfa=180
_cy=_cyt
gosub "putArc"
put _cxl,_hoopy,0,0
_cz=_d
put _cxr,_hoopy,_cz,0
_curalfa=90
_alfa=-135
_cx=_cxr
gosub "putArc"
put _cxr+_bendradius*_s45,_cyt-_bendradius*_s45,_cz,0
put _cxr+_bendradius*_s45-_jointlength*_s45,_cyt-_bendradius*_s45-_jointlength*_s45,_cz,0
put _cxr+_bendradius*_s45-_jointlength*2*_s45,_cyt-_bendradius*_s45-_jointlength*2*_s45,_cz,0
!========================================================================================================================
for e=1 to _nstirrup
	addz-(e-1)*_stirrupdist

	if e=_nstirrup then
		tube 2,nsp/4,1+2+16+32+128,
		0,0,901,
		_d/2,360,4001,
		get(nsp)
	else
		tube 2,nsp/4,1+2+16+32+128,
		0,0,901,
		_d/2,360,4001,
		use(nsp)
	endif

	del 1
next e

else
for e=1 to _nstirrup
	addz-(e-1)*_stirrupdist

	lin_ _cxr-_bendradius*_s45-_jointlength*_s45,_cyt+_bendradius*_s45-_jointlength*_s45,0,_cxr-_bendradius*_s45,_cyt+_bendradius*_s45,0
	_alfa=-135
	_curalfa=135
	_cx=_cxr
	_cy=_cyt
	_cz=0
	_radius=_bendradius
	gosub "drawArc"
	lin_ _hoopx,_cyt,0,_hoopx,_cyb,0
	_alfa=-90
	_curalfa=360
	_cx=_cxr
	_cy=_cyb
	_radius=_bendradius
	gosub "drawArc"
	lin_ _cxr,0,0,_cxl,0,0
	_curalfa=270
	_cx=_cxl
	gosub "drawArc"
	lin_ 0,_cyb,0,0,_cyt,0
	_curalfa=180
	_cy=_cyt
	gosub "drawArc"
	lin_ _cxl,_hoopy,0,_cxr,_hoopy,0
	_curalfa=90
	_alfa=-135
	_cx=_cxr
	gosub "drawArc"
	lin_ _cxr+_bendradius*_s45,_cyt-_bendradius*_s45,0,_cxr+_bendradius*_s45-_jointlength*_s45,_cyt-_bendradius*_s45-_jointlength*_s45,0

	del 1
next e
endif
del 1
endif
if _ironsubtype=type_stirrup_polygon then
for e=1 to _nstirrup
	addy(e-1)*_stirrupdist
																									rotz rot_st
	if not(bnullhotspot) then
	if benablehsedit then
	for i=1 to vardim1(stirrupprevcoords)
	unid=unidstart+(i-1)*20
	hotspot 0,0,stirrupprevcoords[i][2],unid,stirrupprevcoords[i][1],1+128:unid=unid+1
	hotspot-1,0,stirrupprevcoords[i][2],unid,stirrupprevcoords[i][1],3:unid=unid+1
	hotspot stirrupprevcoords[i][1],0,stirrupprevcoords[i][2],unid,stirrupprevcoords[i][1],2:unid=unid+1
	hotspot stirrupprevcoords[i][1],0,0,unid,stirrupprevcoords[i][2],1+128:unid=unid+1
	hotspot stirrupprevcoords[i][1],0,-1,unid,stirrupprevcoords[i][2],3:unid=unid+1
	hotspot stirrupprevcoords[i][1],0,stirrupprevcoords[i][2],unid,stirrupprevcoords[i][2],2:unid=unid+1
	next i
	for i=1 to __nironpoint-not(_bclosedpolygon)
	if i<=vardim1(stirruparcpoints) then
	hotspot _halfpoints[i][1],0,_halfpoints[i][2],unid,stirruparcpoints[i],1:unid=unid+1
	hotspot _halfpoints[i][5],0,_halfpoints[i][6],unid,stirruparcpoints[i],3:unid=unid+1
	hotspot _halfpoints[i][3],0,_halfpoints[i][4],unid,stirruparcpoints[i],2:unid=unid+1
	gosub "arcSign"
	endif
	if i<=vardim1(stirrupnewpoint) then
	hotspot 0,0,stirrupnewpoint[i][2],unid,stirrupnewpoint[i][1],1+128:unid=unid+1
	hotspot-1,0,stirrupnewpoint[i][2],unid,stirrupnewpoint[i][1],3:unid=unid+1
	hotspot stirrupnewpoint[i][1],0,stirrupnewpoint[i][2],unid,stirrupnewpoint[i][1],2:unid=unid+1
	hotspot stirrupnewpoint[i][1],0,0,unid,stirrupnewpoint[i][2],1+128:unid=unid+1
	hotspot stirrupnewpoint[i][1],0,-1,unid,stirrupnewpoint[i][2],3:unid=unid+1
	hotspot stirrupnewpoint[i][1],0,stirrupnewpoint[i][2],unid,stirrupnewpoint[i][2],2:unid=unid+1
	gosub "newPointSign"
	endif
	next i
	else
	for i=1 to __nironpoint
	unid=unidstart+(i-1)*20
	hotspot __ironpointcoords[i][1],0,__ironpointcoords[i][2],unid
	next i
	endif
	endif
	gosub "drawPolygonIron"
	del 2
next e
endif
endif
if _iirontype=iron_type_mesh then
endif
end unid
"arcSign":
if glob_context=5 then return
pen penfont
line_type 1
add _halfpoints[i][3],0,_halfpoints[i][4]
roty-_lineangle[i]
mulz-1
add _signsize[i],0,-_signoffset*(_signsize[i]/_signl)
lin_-_signsize[i]*2,0,-_signsize[i],0,0,-_signsize[i]
lin_ 0,0,-_signsize[i],0,0,_signsize[i]
lin_ 0,0,_signsize[i],-_signsize[i]*2,0,_signsize[i]
lin_-_signsize[i]*2,0,_signsize[i],-_signsize[i]*2,0,-_signsize[i]
_curalfa=0
_alfa=180
_radius=_signsize[i]*0.75
_cx=-_signsize[i]
_cy=-_signsize[i]/2
_cz=0
_lastpoint=1
arcdensity=2
rotx 90
gosub "drawArc"
del 5
pen peniron
return
"newPointSign":
if glob_context=5 then return
pen penfont
line_type 1
add __ironnewpoint[i][1],0,__ironnewpoint[i][2]
roty-_lineangle[i]
mulz-1
add-_signsize[i],0,-_signoffset*(_signsize[i]/_signl)
lin_ 0,0,-_signsize[i],_signsize[i]*2,0,-_signsize[i]
lin_ _signsize[i]*2,0,-_signsize[i],_signsize[i]*2,0,_signsize[i]
lin_ _signsize[i]*2,0,_signsize[i],0,0,_signsize[i]
lin_ 0,0,_signsize[i],0,0,-_signsize[i]
addx _signsize[i]
lin_-_signsize[i]*0.75,0,-_signsize[i]/2,0,0,_signsize[i]/2
lin_ _signsize[i]*0.75,0,-_signsize[i]/2,0,0,_signsize[i]/2
del 5
pen peniron
return
"drawPolygonIron":
if arccalc=0 then
gosub "calculateDirection"
gosub "bendCalculation"
arccalc=arccalc+1
endif
rotx 90
if idetlevel3d=2 then
vx=detpoints[2][1]-detpoints[1][1]
vy=detpoints[2][2]-detpoints[1][2]
gosub "directionAngle"
put detpoints[1][1]-cos(angle),detpoints[1][2]-sin(angle),detpoints[1][3],0
put detpoints[1][1],detpoints[1][2],detpoints[1][3],0
for ii=1 to npoint-1
if detisarc[ii] then
vx=detpoints[ii][1]-detarccenter[ii][1]
vy=detpoints[ii][2]-detarccenter[ii][2]
gosub "directionAngle"
_curalfa=angle
_alfa=detarcangle[ii]
_radius=detradiusdist[ii]
_cx=detarccenter[ii][1]
_cy=detarccenter[ii][2]
_cz=detpoints[ii][3]
_lastpoint=0
gosub "putArc"
put detpoints[ii+1][1],detpoints[ii+1][2],detpoints[ii+1][3],0
else
put detpoints[ii+1][1],detpoints[ii+1][2],detpoints[ii+1][3],0
endif
next ii
vx=detpoints[npoint][1]-detpoints[npoint-1][1]
vy=detpoints[npoint][2]-detpoints[npoint-1][2]
gosub "directionAngle"
put detpoints[npoint][1]+cos(angle),detpoints[npoint][2]+sin(angle),detpoints[npoint][3],0
if nsp>15 then
tube 2,nsp/4,1+2+16+32+128,
0,0,901,
_d/2,360,4001,
get(nsp)
else
for e=1 to nsp
eee=get(1)
next e
endif
else
for ii=1 to npoint-1
if detisarc[ii] then
vx=detpoints[ii][1]-detarccenter[ii][1]
vy=detpoints[ii][2]-detarccenter[ii][2]
gosub "directionAngle"
_curalfa=angle
_alfa=detarcangle[ii]
_radius=detradiusdist[ii]
_cx=detarccenter[ii][1]
_cy=detarccenter[ii][2]
_cz=detpoints[ii][3]
arcdensity=1
gosub "drawArc"
else
lin_ detpoints[ii][1],detpoints[ii][2],0,detpoints[ii+1][1],detpoints[ii+1][2],detpoints[ii][3]
endif
next ii
endif
del 1
return
"drawArc":
_res=acs((_radius-arctoler)/_radius)*(2/arcdensity)
_int=max(abs(round_int(abs(_alfa)/_res) ),2)
_delta=_alfa/_int
_curangle=_curalfa
for _i=1 to _int
lin_ _cx+cos(_curangle)*_radius,_cy+sin(_curangle)*_radius,_cz,_cx+cos(_curangle+_delta)*_radius,_cy+sin(_curangle+_delta)*_radius,_cz
_curangle=_curangle+_delta
next _i
return
"putArc":
_res=acs((_radius-arctoler)/_radius)*2
_int=max(abs(round_int(abs(_alfa)/_res) ),2)
_delta=_alfa/_int
_curangle=_curalfa+_delta
_l=(_lastpoint=0)
for _i=1 to _int-_l
put _cx+cos(_curangle)*_radius,_cy+sin(_curangle)*_radius,_cz,0
_curangle=_curangle+_delta
next _i
return
]]>
</Script_3D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_2D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
!------------------------
! Reinforcement
! 2012, Eptar Kft.
!------------------------
define style "styleDimTopAnchor" stylefont,heightfontdim,2,0
define style "styleDimBottomAnchor" stylefont,heightfontdim,8,0
pen peniron
fill filliron
line_type ltiron
unidstart=unid
if _iirontype=iron_type_rebar then
if _ironsubtype=type_rebar_normal then gosub 100+10+iview
if _ironsubtype=type_rebar_polygon then gosub 100+20+iview
endif
if _iirontype=iron_type_stirrup then
if _ironsubtype=type_stirrup_normal then gosub 200+10+iview
if _ironsubtype=type_stirrup_polygon then gosub 200+20+iview
endif
if _iirontype=iron_type_mesh then
gosub 300+iview
endif
end unid
112:
if _iendtype1=1|_iendtype1=2|_iendtype1=3 then
_leftendx=0
else
_leftendx=_endlength1+abs(_offset1)
endif
if _iendtype2=1|_iendtype2=2|_iendtype2=3 then
_rightendx=_fulllength
else
_rightendx=_fulllength-_endlength2-abs(_offset2)
endif
pen peniron
line2 _leftendx,0,_rightendx,0
hotline2 _leftendx,0,_rightendx,0
if bshowdimtext then
style "styleDimBottomAnchor"
pen penfont
!!!!!!text2 _leftendx+(_rightendx-_leftendx)/2,0,str( "%.0mm",abs(_rightendx-_leftendx) )
endif
if _iendtype1=4|_iendtype1=5|_iendtype1=6 then
pen peniron
line2 0,_offset1,_endlength1,_offset1
line2 _endlength1,_offset1,_endlength1+abs(_offset1),0
hotline2 0,_offset1,_endlength1,_offset1
hotline2 _endlength1,_offset1,_endlength1+abs(_offset1),0
if bshowdimtext&sqr(2*_offset1**2)>eps then
style "styleDimBottomAnchor"
pen penfont
text2 _endlength1/2,_offset1,str( "%.0mm",abs(_endlength1) )
add2 _endlength1,_offset1
rot2 45*(1-2*(_offset1>=0) )
text2 sqr(2*_offset1**2)/2,0,str( "%.0mm",sqr(2*_offset1**2) )
pen peniron
del 2
endif
endif
if _iendtype1=5|_iendtype1=6 then add2 0,_offset1
if _iendtype1=2|_iendtype1=3|_iendtype1=5|_iendtype1=6 then
pen peniron
line2 0,0,0,-_endheight1
hotline2 0,0,0,-_endheight1
if bshowdimtext then
style "styleDimBottomAnchor"
rot2 90
pen penfont
text2-_endheight1/2,0,str( "%.0mm",abs(_endheight1) )
del 1
endif
if _iendtype1=3|_iendtype1=6 then
pen peniron
line2 0,-_endheight1,_turnbacklength1,-_endheight1
hotline2 0,-_endheight1,_turnbacklength1,-_endheight1
if bshowdimtext then
style "styleDimTopAnchor"
pen penfont
text2 _turnbacklength1/2,-_endheight1,str( "%.0mm",abs(_turnbacklength1) )
endif
endif
endif
if _iendtype1=5|_iendtype1=6 then del 1
if _iendtype2=4|_iendtype2=5|_iendtype2=6 then
pen peniron
line2 _fulllength,_offset2,_fulllength-_endlength2,_offset2
line2 _fulllength-_endlength2,_offset2,_fulllength-_endlength2-abs(_offset2),0
hotline2 _fulllength,_offset2,_fulllength-_endlength2,_offset2
hotline2 _fulllength-_endlength2,_offset2,_fulllength-_endlength2-abs(_offset2),0
if bshowdimtext&sqr(2*_offset2**2)>eps then
style "styleDimBottomAnchor"
pen penfont
text2 _fulllength-_endlength2/2,_offset2,str( "%.0mm",abs(_endlength2) )
add2 _fulllength-_endlength2,_offset2
rot2-45*(1-2*(_offset2>=0) )
text2-sqr(2*_offset2**2)/2,0,str( "%.0mm",sqr(2*_offset2**2) )
del 2
endif
endif
if _iendtype2=5|_iendtype2=6 then add2 0,_offset2
if _iendtype2=2|_iendtype2=3|_iendtype2=5|_iendtype2=6 then
pen peniron
line2 _fulllength,0,_fulllength,-_endheight2
hotline2 _fulllength,0,_fulllength,-_endheight2
if bshowdimtext then
rot2 90
style "styleDimTopAnchor"
pen penfont
text2-_endheight2/2,-_fulllength,str( "%.0mm",abs(_endheight2) )
del 1
endif
if _iendtype2=3|_iendtype2=6 then
pen peniron
line2 _fulllength,-_endheight2,_fulllength-_turnbacklength2,-_endheight2
hotline2 _fulllength,-_endheight2,_fulllength-_turnbacklength2,-_endheight2
if bshowdimtext then
style "styleDimTopAnchor"
pen penfont
text2 _fulllength-_turnbacklength2+_turnbacklength2/2,-_endheight2,str( "%.0mm",abs(_turnbacklength2) )
endif
endif
endif
if _iendtype2=5|_iendtype2=6 then del 1
if _iendtype1=1|_iendtype1=2|_iendtype1=3 then
_leftpos=0
else
_leftpos=_offset1
endif
if _iendtype2=1|_iendtype2=2|_iendtype2=3 then
_rightpos=0
else
_rightpos=_offset2
endif
if benablehsedit then
if benablefulllengthedit then
hotspot2 0,_rightpos,unid,fulllength,1+128:unid=unid+1
hotspot2 fulllength,_rightpos,unid,fulllength,2:unid=unid+1
hotspot2-1,_rightpos,unid,fulllength,3:unid=unid+1
else
unid=unid+3
endif
if _iendtype1=2|_iendtype1=3|_iendtype1=5|_iendtype1=6 then
hotspot2 0,_leftpos,unid,endheight1,1+128:unid=unid+1
hotspot2 0,_leftpos-_endheight1,unid,endheight1,2:unid=unid+1
hotspot2 0,_leftpos+1,unid,endheight1,3:unid=unid+1
if _iendtype1=3|_iendtype1=6 then
hotspot2 0,_leftpos-_endheight1,unid,turnbacklength1,1+128:unid=unid+1
hotspot2 _turnbacklength1,_leftpos-_endheight1,unid,turnbacklength1,2:unid=unid+1
hotspot2-1,_leftpos-_endheight1,unid,turnbacklength1,3:unid=unid+1
else
unid=unid+3
endif
else
unid=unid+6
endif
if _iendtype2=2|_iendtype2=3|_iendtype2=5|_iendtype2=6 then
hotspot2 _fulllength,_rightpos,unid,endheight2,1+128:unid=unid+1
hotspot2 _fulllength,_rightpos-_endheight2,unid,endheight2,2:unid=unid+1
hotspot2 _fulllength,_rightpos+1,unid,endheight2,3:unid=unid+1
if _iendtype2=3|_iendtype2=6 then
hotspot2 _fulllength,_rightpos-_endheight2,unid,turnbacklength2,1+128:unid=unid+1
hotspot2 _fulllength-_turnbacklength2,_rightpos-_endheight2,unid,turnbacklength2,2:unid=unid+1
hotspot2 _fulllength+1,_rightpos-_endheight2,unid,turnbacklength2,3:unid=unid+1
else
unid=unid+3
endif
else
unid=unid+6
endif
if _iendtype1=4|_iendtype1=5|_iendtype1=6 then
hotspot2 0,_leftpos,unid,endlength1,1+128:unid=unid+1
hotspot2 _endlength1,_leftpos,unid,endlength1,2:unid=unid+1
hotspot2-1,_leftpos,unid,endlength1,3:unid=unid+1
hotspot2 _endlength1,0,unid,offset1,1+128:unid=unid+1
hotspot2 _endlength1,_offset1,unid,offset1,2:unid=unid+1
hotspot2 _endlength1,-1,unid,offset1,3:unid=unid+1
hotspot2 _endlength1+abs(_offset1),0,unid:unid=unid+1
else
unid=unid+7
endif
if _iendtype2=4|_iendtype2=5|_iendtype2=6 then
hotspot2 _fulllength,_rightpos,unid,endlength2,1+128:unid=unid+1
hotspot2 _fulllength-_endlength2,_rightpos,unid,endlength2,2:unid=unid+1
hotspot2 _fulllength+1,_rightpos,unid,endlength2,3:unid=unid+1
hotspot2 _fulllength-_endlength2,0,unid,offset2,1+128:unid=unid+1
hotspot2 _fulllength-_endlength2,_offset2,unid,offset2,2:unid=unid+1
hotspot2 _fulllength-_endlength2,-1,unid,offset2,3:unid=unid+1
hotspot2 _fulllength-_endlength2-abs(_offset2),0,unid:unid=unid+1
else
unid=unid+7
endif
endif
return
122:
if not(bnullhotspot) then
if benablehsedit then
for i=1 to vardim1(rebarprevcoords)
unid=unidstart+(i-1)*20
hotspot2 0,rebarprevcoords[i][2],unid,rebarprevcoords[i][1],1+128:unid=unid+1
hotspot2-1,rebarprevcoords[i][2],unid,rebarprevcoords[i][1],3:unid=unid+1
hotspot2 rebarprevcoords[i][1],rebarprevcoords[i][2],unid,rebarprevcoords[i][1],2:unid=unid+1
hotspot2 rebarprevcoords[i][1],0,unid,rebarprevcoords[i][2],1+128:unid=unid+1
hotspot2 rebarprevcoords[i][1],-1,unid,rebarprevcoords[i][2],3:unid=unid+1
hotspot2 rebarprevcoords[i][1],rebarprevcoords[i][2],unid,rebarprevcoords[i][2],2:unid=unid+1
next i
for i=1 to __nironpoint-not(_bclosedpolygon)
if i<=vardim1(rebararcpoints) then
hotspot2 _halfpoints[i][1],_halfpoints[i][2],unid,rebararcpoints[i],1:unid=unid+1
hotspot2 _halfpoints[i][5],_halfpoints[i][6],unid,rebararcpoints[i],3:unid=unid+1
hotspot2 _halfpoints[i][3],_halfpoints[i][4],unid,rebararcpoints[i],2:unid=unid+1
gosub "arcSign"
endif
if i<=vardim1(rebarnewpoint) then
hotspot2 0,rebarnewpoint[i][2],unid,rebarnewpoint[i][1],1+128:unid=unid+1
hotspot2-1,rebarnewpoint[i][2],unid,rebarnewpoint[i][1],3:unid=unid+1
hotspot2 rebarnewpoint[i][1],rebarnewpoint[i][2],unid,rebarnewpoint[i][1],2:unid=unid+1
hotspot2 rebarnewpoint[i][1],0,unid,rebarnewpoint[i][2],1+128:unid=unid+1
hotspot2 rebarnewpoint[i][1],-1,unid,rebarnewpoint[i][2],3:unid=unid+1
hotspot2 rebarnewpoint[i][1],rebarnewpoint[i][2],unid,rebarnewpoint[i][2],2:unid=unid+1
gosub "newPointSign"
endif
next i
else
for i=1 to __nironpoint
unid=unidstart+(i-1)*20
hotspot2 __ironpointcoords[i][1],__ironpointcoords[i][2],unid
next i
endif
endif
gosub "drawPolygonIron"
return
213:
add2 0,-_hoopy/2*0
if bdetailedsection then
put _cxr-_bendradius*_s45-_jointlength*_s45,_cyt+_bendradius*_s45-_jointlength*_s45,1,
_cxr-_bendradius*_s45,_cyt+_bendradius*_s45,1,
_hoopx,_cyt,1001,
_hoopx,_cyb,1,
_cxr,0,1001,
_cxl,0,1,
0,_cyb,1001,
0,_cyt,1,
_cxl,_hoopy,1001,
_cxr,_hoopy,1,
-1,0,800,
_cxr-sqr(2*_bendradius*_d-_d**2),_hoopy-_d,1001,
_cxl,_hoopy-_d,1,
_d,_cyt,1001,
_d,_cyb,1,
_cxl,_d,1001,
_cxr,_d,1,
_hoopx-_d,_cyb,1001,
_hoopx-_d,_cyt,1,
_cxr-(_bendradius-_d)*_s45,_cyt+(_bendradius-_d)*_s45,1001,
_cxr-_bendradius*_s45-_jointlength*_s45+_d*_s45,_cyt+_bendradius*_s45-_jointlength*_s45-_d*_s45,1
poly2_b(nsp/3),1+2+4,penfilliron,penfillbgiron,
get(nsp)
put _hoopx-_d,_cyt,1,
0,-1,800,
_cxr+(_bendradius-_d)*_s45,_cyt-(_bendradius-_d)*_s45,1001,
_cxr+(_bendradius-_d)*_s45-_jointlength*_s45,_cyt-(_bendradius-_d)*_s45-_jointlength*_s45,1,
_cxr+_bendradius*_s45-_jointlength*_s45,_cyt-_bendradius*_s45-_jointlength*_s45,1,
_cxr+_bendradius*_s45,_cyt-_bendradius*_s45,1,
_hoopx-_d,_cyt-sqr(2*_bendradius*_d-_d**2),1001,
_hoopx-_d,_cyt,1
poly2_b(nsp/3),1+2+4,penfilliron,penfillbgiron,
get(nsp)
else
poly2_b 12,1,0,0,
_cxr-_bendradius*_s45-_jointlength*_s45,_cyt+_bendradius*_s45-_jointlength*_s45,1,
_cxr-_bendradius*_s45,_cyt+_bendradius*_s45,1,
_hoopx,_cyt,1001,
_hoopx,_cyb,1,
_cxr,0,1001,
_cxl,0,1,
0,_cyb,1001,
0,_cyt,1,
_cxl,_hoopy,1001,
_cxr,_hoopy,1,
_cxr+_bendradius*_s45,_cyt-_bendradius*_s45,1001,
_cxr+_bendradius*_s45-_jointlength*_s45,_cyt-_bendradius*_s45-_jointlength*_s45,1
endif
if bshowdimtext then
pen penfont
style "styleDimTopAnchor"
text2 _hoopx/2,0,str( "%.0mm",abs(_hoopx) )
rot2 90
style "styleDimBottomAnchor"
text2 _hoopy/2,0,str( "%.0mm",abs(_hoopy) )
del 1
endif
hotline2 _bendradius,0,_hoopx-_bendradius,0
hotarc2 _hoopx-_bendradius,_bendradius,_bendradius,270,360
hotline2 _hoopx,_bendradius,_hoopx,_hoopy-_bendradius
hotarc2 _hoopx-_bendradius,_hoopy-_bendradius,_bendradius,0,90
hotline2 _hoopx-_bendradius,_hoopy,_bendradius,_hoopy
hotarc2 _bendradius,_hoopy-_bendradius,_bendradius,90,180
hotline2 0,_hoopy-_bendradius,0,_bendradius
hotarc2 _bendradius,_bendradius,_bendradius,180,270
return
223:
if not(bnullhotspot) then
if benablehsedit then
for i=1 to vardim1(stirrupprevcoords)
unid=unidstart+(i-1)*20
hotspot2 0,stirrupprevcoords[i][2],unid,stirrupprevcoords[i][1],1+128:unid=unid+1
hotspot2-1,stirrupprevcoords[i][2],unid,stirrupprevcoords[i][1],3:unid=unid+1
hotspot2 stirrupprevcoords[i][1],stirrupprevcoords[i][2],unid,stirrupprevcoords[i][1],2:unid=unid+1
hotspot2 stirrupprevcoords[i][1],0,unid,stirrupprevcoords[i][2],1+128:unid=unid+1
hotspot2 stirrupprevcoords[i][1],-1,unid,stirrupprevcoords[i][2],3:unid=unid+1
hotspot2 stirrupprevcoords[i][1],stirrupprevcoords[i][2],unid,stirrupprevcoords[i][2],2:unid=unid+1
next i
for i=1 to __nironpoint-not(_bclosedpolygon)
if i<=vardim1(stirruparcpoints) then
hotspot2 _halfpoints[i][1],_halfpoints[i][2],unid,stirruparcpoints[i],1:unid=unid+1
hotspot2 _halfpoints[i][5],_halfpoints[i][6],unid,stirruparcpoints[i],3:unid=unid+1
hotspot2 _halfpoints[i][3],_halfpoints[i][4],unid,stirruparcpoints[i],2:unid=unid+1
gosub "arcSign"
endif
if i<=vardim1(stirrupnewpoint) then
hotspot2 0,stirrupnewpoint[i][2],unid,stirrupnewpoint[i][1],1+128:unid=unid+1
hotspot2-1,stirrupnewpoint[i][2],unid,stirrupnewpoint[i][1],3:unid=unid+1
hotspot2 stirrupnewpoint[i][1],stirrupnewpoint[i][2],unid,stirrupnewpoint[i][1],2:unid=unid+1
hotspot2 stirrupnewpoint[i][1],0,unid,stirrupnewpoint[i][2],1+128:unid=unid+1
hotspot2 stirrupnewpoint[i][1],-1,unid,stirrupnewpoint[i][2],3:unid=unid+1
hotspot2 stirrupnewpoint[i][1],stirrupnewpoint[i][2],unid,stirrupnewpoint[i][2],2:unid=unid+1
gosub "newPointSign"
endif
next i
else
for i=1 to __nironpoint
unid=unidstart+(i-1)*20
hotspot2 __ironpointcoords[i][1],__ironpointcoords[i][2],unid
next i
endif
endif
gosub "drawPolygonIron"
return
301:
add2 0,-_nety/2
if bcalledfromlist then
visibley[1][1]=min(visibley[1][1],_nety-0.01)
visibley[1][2]=min(visibley[1][2],_nety-0.01)
visiblex[1][1]=min(visiblex[1][1],_netx-0.01)
visiblex[1][2]=min(visiblex[1][2],_netx-0.01)
endif
i=1
_yact=_nety*500
while i<10000&_yact>_nety-visibley[1][1]-eps do
_yact=_yact-_nety
i=i+1
endwhile
i=1
while i<10000&_yact<_nety+visibley[1][2]+eps do
line2-visiblex[1][1],_yact,_netx+visiblex[1][2],_yact
_yact=_yact+_nety
i=i+1
endwhile
i=1
_xact=_netx*500
while i<10000&_xact>-visiblex[1][1]-eps+_netx do
_xact=_xact-_netx
i=i+1
endwhile
i=1
while i<10000&_xact<_netx+visiblex[1][2]+eps do
line2 _xact,-visibley[1][1],_xact,_nety+visibley[1][2]
_xact=_xact+_netx
i=i+1
endwhile
if bshowdimtext then
style "styleDimTopAnchor"
pen penfont
text2 _netx/2,0,str( "%.0mm",abs(_netx) )
rot2 90
style "styleDimBottomAnchor"
text2 _nety/2,0,str( "%.0mm",abs(_nety) )
del 1
endif
if benablehsedit then
hotspot2 0,0,unid,netx,1+256:unid=unid+1
hotspot2 _netx,0,unid,netx,2:unid=unid+1
hotspot2-1,0,unid,netx,3:unid=unid+1
hotspot2 0,_nety,unid,netx,1+256:unid=unid+1
hotspot2 _netx,_nety,unid,netx,2:unid=unid+1
hotspot2-1,_nety,unid,netx,3:unid=unid+1
hotspot2 0,0,unid,nety,1+256:unid=unid+1
hotspot2 0,_nety,unid,nety,2:unid=unid+1
hotspot2 0,-1,unid,nety,3:unid=unid+1
hotspot2 _netx,0,unid,nety,1+256:unid=unid+1
hotspot2 _netx,_nety,unid,nety,2:unid=unid+1
hotspot2 _netx,-1,unid,nety,3:unid=unid+1
endif
del 1
return
"drawPolygonIron":
line_type ltiron
style "styleDimBottomAnchor"
if bshowdimtext then
pen penfont
for i=1 to __nironpoint-not(_bclosedpolygon)
add2 _halfpoints[i][3],_halfpoints[i][4]
rot2 _lineangle[i]
text2 0,0,str( "%.0mm",abs(_sidelength[i]) )
del 2
next i
endif
gosub "bendCalculation"
pen peniron
for i=1 to npoint-1
if detisarc[i] then
vx=detpoints[i][1]-detarccenter[i][1]
vy=detpoints[i][2]-detarccenter[i][2]
gosub "directionAngle"
startangle=angle
if detarcangle[i]<0 then startangle=startangle-abs(detarcangle[i])
arc2 detarccenter[i][1],detarccenter[i][2],detradiusdist[i],startangle,startangle+abs(detarcangle[i])
hotarc2 detarccenter[i][1],detarccenter[i][2],detradiusdist[i],startangle,startangle+abs(detarcangle[i])
else
line2 detpoints[i][1],detpoints[i][2],detpoints[i+1][1],detpoints[i+1][2]
hotline2 detpoints[i][1],detpoints[i][2],detpoints[i+1][1],detpoints[i+1][2]
endif
next i
if boffset then
dim offsetedcoords[][2]
gosub "offcetCalculate"
for i=1 to __nironpoint-not(_bclosedpolygon)
if _isarc[i] then
if boffsetdebug then
arc2 _arccenter[i][1],_arccenter[i][2],abs(_radiusdistance[i]+__ironarcpoints[i]+offsetdist),offsetarcangle[i][2],offsetarcangle[i][2]+abs(offsetarcangle[i][1])
endif
hotarc2 _arccenter[i][1],_arccenter[i][2],abs(_radiusdistance[i]+__ironarcpoints[i]+offsetdist),offsetarcangle[i][2],offsetarcangle[i][2]+abs(offsetarcangle[i][1])
else
if i=__nironpoint then
if boffsetdebug then
line2 offsetedcoords[i][1],offsetedcoords[i][2],offsetedcoords[1][1],offsetedcoords[1][2]
endif
hotline2 offsetedcoords[i][1],offsetedcoords[i][2],offsetedcoords[1][1],offsetedcoords[1][2]
else
if boffsetdebug then
line2 offsetedcoords[i][1],offsetedcoords[i][2],offsetedcoords[i+1][1],offsetedcoords[i+1][2]
endif
hotline2 offsetedcoords[i][1],offsetedcoords[i][2],offsetedcoords[i+1][1],offsetedcoords[i+1][2]
endif
endif
next i
endif
return
"arcSign":
pen penfont
line_type 1
add2 _halfpoints[i][3],_halfpoints[i][4]
rot2 _lineangle[i]
add2 _signsize[i],-_signoffset*(_signsize[i]/_signl)
rect2-_signsize[i]*2,-_signsize[i],0,_signsize[i]
arc2-_signsize[i],-_signsize[i]/2,_signsize[i]*0.75,0,180
del 3
return
"newPointSign":
pen penfont
line_type 1
add2 __ironnewpoint[i][1],__ironnewpoint[i][2]
rot2 _lineangle[i]
add2-_signsize[i],-_signoffset*(_signsize[i]/_signl)
rect2 0,-_signsize[i],_signsize[i]*2,_signsize[i]
add2 _signsize[i],0
line2-_signsize[i]*0.75,-_signsize[i]/2,0,_signsize[i]/2
line2 _signsize[i]*0.75,-_signsize[i]/2,0,_signsize[i]/2
del 4
return
]]>
</Script_2D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_1D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
!------------------------
! Reinforcement
! 2012, Eptar Kft.
!------------------------
eps=0.0001
bstirrup=0
boffsetdebug=0
iron_type_rebar=1
iron_type_stirrup=2
iron_type_mesh=3
iron_type_concrete=90
type_rebar_normal=1
type_rebar_polygon=99
type_stirrup_normal=1
type_stirrup_type_2=2
type_stirrup_type_3=3
type_stirrup_type_4=4
type_stirrup_type_5=5
type_stirrup_type_6=6
type_stirrup_type_7=7
type_stirrup_type_8=8
type_stirrup_type_9=9
type_stirrup_type_10=10
type_stirrup_circle=90
type_stirrup_polygon=99
type_mesh_normal=50
type_conc_rectangle=1
type_conc_round=2
type_conc_polygon=99
view_top=1
view_side=2
view_section=3
_iirontype=irontype[ironidx][1]
_ironsubtype=irontype[ironidx][2]
_ndata=irontype[ironidx][3]
_ndatanum=irontype[ironidx][4]
_startdata=2
if buseirondata then
_d=irondata[ironidx][1]
_ironlength=ironextradata[ironidx][6]
_bendradius=ironextradata[ironidx][7]
_jointlength=ironextradata[ironidx][8]
_fiberlength=ironextradata[ironidx][9]
benablehsedit=0
else
_d=d
_bendradius=bendradius
_jointlength=jointlength
_fiberlength=fiberlength
endif
if _iirontype=iron_type_rebar then
_nstirrup=1
_stirrupdist=0
_bclosedpolygon=0
if _ironsubtype=type_rebar_normal then
if buseirondata then
_fulllength=ironextradata[ironidx][1]
_iendtype1=round_int(irondata[ironidx][_startdata])
_iendtype2=round_int(irondata[ironidx][_startdata+1])
_offset1=irondata[ironidx][_startdata+2]
_offset2=irondata[ironidx][_startdata+3]
_endlength1=irondata[ironidx][_startdata+4]
_endlength2=irondata[ironidx][_startdata+5]
_endheight1=irondata[ironidx][_startdata+6]
_endheight2=irondata[ironidx][_startdata+7]
_turnbacklength1=irondata[ironidx][_startdata+8]
_turnbacklength2=irondata[ironidx][_startdata+9]
else
_fulllength=fulllength
_iendtype1=iendtype1
_iendtype2=iendtype2
_offset1=offset1
_offset2=offset2
_endlength1=endlength1
_endlength2=endlength2
_endheight1=endheight1
_endheight2=endheight2
_turnbacklength1=turnbacklength1
_turnbacklength2=turnbacklength2
endif
endif
if _ironsubtype=type_rebar_polygon then
dim __ironpointcoords[][3]
dim __ironprevcoords[][3]
dim __ironarcpoints[]
dim __ironnewpoint[][2]
if buseirondata then
_nelem=0
for i=1 to _ndatanum
__ironpointcoords[i][1]=irondata[ironidx][_startdata+_nelem*4]
__ironpointcoords[i][2]=irondata[ironidx][_startdata+_nelem*4+1]
__ironpointcoords[i][3]=irondata[ironidx][_startdata+_nelem*4+2]
if i<_ndatanum then
__ironarcpoints[i]=irondata[ironidx][_startdata+_nelem*4+3]
endif
_nelem=_nelem+1
next i
__nironpoint=vardim1(__ironpointcoords)
else
__ironpointcoords=rebarpointcoords
__ironprevcoords=rebarprevcoords
__ironarcpoints=rebararcpoints
__ironnewpoint=rebarnewpoint
__nironpoint=min(nrebarpoint,vardim1(rebarpointcoords) )
endif
dim _sidelength[]
dim _halfpoints[][6]
dim _polygondir[]
dim _arcangle[]
dim _lineangle[]
dim _arccenter[][2]
dim _radiusdistance[]
dim _isarc[]
dim _signsize[]
gosub "calculateDirection"
gosub "arcPointsCalculation"
endif
endif
if _iirontype=iron_type_stirrup then
bstirrup=1
if buseirondata then
_nstirrup=round_int(ironextradata[ironidx][2])
_stirrupdist=ironextradata[ironidx][5]
else
_nstirrup=nstirrup
_stirrupdist=stirrupdist
endif
if _ironsubtype=type_stirrup_normal then
_bclosedpolygon=1
if buseirondata then
_hoopx=irondata[ironidx][_startdata]
_hoopy=irondata[ironidx][_startdata+1]
else
_hoopx=hoopx
_hoopy=hoopy
endif
_cxl=_bendradius
_cxr=_hoopx-_bendradius
_cyt=_hoopy-_bendradius
_cyb=_bendradius
_s45=sin(45)
endif
if _ironsubtype=type_stirrup_polygon then
dim __ironpointcoords[][3]
dim __ironprevcoords[][3]
dim __ironarcpoints[]
dim __ironnewpoint[][2]
if buseirondata then
_bclosedpolygon=irondata[ironidx][2]
_bstirrupback1=irondata[ironidx][3]
_bstirrupback2=irondata[ironidx][4]
_stirrupang1=irondata[ironidx][5]
_stirrupang2=irondata[ironidx][6]
_startdata=7
_nelem=0
for i=1 to _ndatanum
__ironpointcoords[i][1]=irondata[ironidx][_startdata+_nelem*4]
__ironpointcoords[i][2]=irondata[ironidx][_startdata+_nelem*4+1]
__ironpointcoords[i][3]=irondata[ironidx][_startdata+_nelem*4+2]
__ironarcpoints[i]=irondata[ironidx][_startdata+_nelem*4+3]
_nelem=_nelem+1
next i
__nironpoint=vardim1(__ironpointcoords)
else
_bclosedpolygon=bclosedpolygon
_bstirrupback1=bstirrupback1
_bstirrupback2=bstirrupback2
_stirrupang1=stirrupang1
_stirrupang2=stirrupang2
__ironpointcoords=stirruppointcoords
for i=vardim1(stirrupprevcoords) to 1 step-1
__ironprevcoords[i][1]=stirrupprevcoords[i][1]
__ironprevcoords[i][2]=stirrupprevcoords[i][2]
__ironprevcoords[i][3]=0
next i
__ironarcpoints=stirruparcpoints
__ironnewpoint=stirrupnewpoint
__nironpoint=min(nstirruppoint,vardim1(stirruppointcoords) )
endif
dim _sidelength[]
dim _halfpoints[][6]
dim _polygondir[]
dim _arcangle[]
dim _lineangle[]
dim _arccenter[][2]
dim _radiusdistance[]
dim _isarc[]
dim _signsize[]
gosub "calculateDirection"
gosub "arcPointsCalculation"
endif
endif
if _iirontype=iron_type_mesh then
if buseirondata then
_netx=irondata[ironidx][_startdata]
_nety=irondata[ironidx][_startdata+1]
else
_netx=netx
_nety=nety
endif
endif
goto "endMasterSript"
"calculateDirection":
pdirection=1
area=0
dim polygon1[][2]
tempnumpnts=__nironpoint+1
polygon1[__nironpoint+1][1]=__ironpointcoords[1][1]
polygon1[__nironpoint+1][2]=__ironpointcoords[1][2]
for i=__nironpoint to 1 step-1
polygon1[i][1]=__ironpointcoords[i][1]
polygon1[i][2]=__ironpointcoords[i][2]
next i
for areai=1 to tempnumpnts-1
area=area+(polygon1[areai+1][1]+polygon1[areai][1])*(polygon1[areai+1][2]-polygon1[areai][2])*0.5
next areai
area=area+(polygon1[1][1]+polygon1[tempnumpnts][1])*(polygon1[1][2]-polygon1[tempnumpnts][2])*0.5
if area<0 then pdirection=-1
return
"arcPointsCalculation":
_signl=0.075/2
_signoffset=0.05
for i=__nironpoint to 1 step-1
if i=__nironpoint then
tempsidex=__ironpointcoords[1][1]-__ironpointcoords[i][1]
tempsidey=__ironpointcoords[1][2]-__ironpointcoords[i][2]
else
tempsidex=__ironpointcoords[i+1][1]-__ironpointcoords[i][1]
tempsidey=__ironpointcoords[i+1][2]-__ironpointcoords[i][2]
endif
_sidelength[i]=sqr(tempsidex^2+tempsidey^2)
_signsize[i]=_signl
if _sidelength[i]/6<=_signsize[i]*2 then
_signsize[i]=(_sidelength[i]/12)*0.8
endif
if abs(_sidelength[i])>eps then
_arcangle[i]=atn(__ironarcpoints[i]/(_sidelength[i]/2) )*4
else
_arcangle[i]=0
endif
_polygondir[i]=1
if tempsidex<-eps then _polygondir[i]=-1
if abs(tempsidex)>eps then
arcalpha1=atn(tempsidey/tempsidex)-90*_polygondir[i]
arcalpha2=atn(tempsidey/tempsidex)+90*_polygondir[i]
_lineangle[i]=atn(tempsidey/tempsidex)
else
if i=__nironpoint then
tempendy=__ironpointcoords[1][2]
else
tempendy=__ironpointcoords[i+1][2]
endif
if __ironpointcoords[i][2]-tempendy>eps then
arcalpha1=180
arcalpha2=0
_lineangle[i]=270
else
arcalpha1=0
arcalpha2=180
_lineangle[i]=90
endif
endif
_halfpoints[i][1]=__ironpointcoords[i][1]+(tempsidex)/2
_halfpoints[i][2]=__ironpointcoords[i][2]+(tempsidey)/2
_halfpoints[i][3]=_halfpoints[i][1]+cos(arcalpha1)*__ironarcpoints[i]
_halfpoints[i][4]=_halfpoints[i][2]+sin(arcalpha1)*__ironarcpoints[i]
_halfpoints[i][5]=_halfpoints[i][1]+cos(arcalpha2)*1
_halfpoints[i][6]=_halfpoints[i][2]+sin(arcalpha2)*1
if abs(__ironarcpoints[i])>eps&abs(sin(_arcangle[i]/4) )>eps then
_isarc[i]=1
_radiusdistance[i]=sqr((_sidelength[i]/2) ^2+__ironarcpoints[i] ^2)/2/sin(_arcangle[i]/4)-__ironarcpoints[i]
_sidelength[i]=abs(((2*abs(__ironarcpoints[i]+_radiusdistance[i])*pi)/360)*_arcangle[i])
else
_isarc[i]=0
_radiusdistance[i]=0
endif
_arccenter[i][1]=_halfpoints[i][1]+cos(arcalpha2)*_radiusdistance[i]
_arccenter[i][2]=_halfpoints[i][2]+sin(arcalpha2)*_radiusdistance[i]
next i
return
"bendCalculation":
dim detpoints[][3]
dim detarcangle[]
dim detarccenter[][2]
dim detradiusdist[]
dim detisarc[]
if bdetailedarc then
np=1
if not(bstirrup)|not(_bstirrupback1) then
detpoints[np][1]=__ironpointcoords[1][1]
detpoints[np][2]=__ironpointcoords[1][2]
detpoints[np][3]=__ironpointcoords[1][3]
else
_dir=1-2*(_stirrupang1<0)
if _bclosedpolygon then
vx=__ironpointcoords[1][1]-__ironpointcoords[2][1]
vy=__ironpointcoords[1][2]-__ironpointcoords[2][2]
gosub "directionAngle"
sang1=angle
vx=__ironpointcoords[1][1]-__ironpointcoords[__nironpoint][1]
vy=__ironpointcoords[1][2]-__ironpointcoords[__nironpoint][2]
gosub "directionAngle"
sang2=angle
szogfelk=(sang1-sang2)/2
if pdirection=-1 then
szogfelk=180+szogfelk
endif
if szogfelk>90 then
szogfelk=szogfelk-180
endif
eidx=2
sidx=1
zz=_d
_stirrupang1=abs(szogfelk)
gosub "startKampo"
else
eidx=2
sidx=1
zz=0
gosub "startKampo"
endif
endif
for i=1 to __nironpoint-1-not(_bclosedpolygon)
if not(_isarc[i])&not(_isarc[i+1]) then
vx=__ironpointcoords[i+1][1]-__ironpointcoords[i][1]
vy=__ironpointcoords[i+1][2]-__ironpointcoords[i][2]
gosub "directionAngle"
ang1=angle
if i=__nironpoint-1 then
vx=__ironpointcoords[i+1][1]-__ironpointcoords[1][1]
vy=__ironpointcoords[i+1][2]-__ironpointcoords[1][2]
else
vx=__ironpointcoords[i+1][1]-__ironpointcoords[i+2][1]
vy=__ironpointcoords[i+1][2]-__ironpointcoords[i+2][2]
endif
gosub "directionAngle"
ang2=angle
szogfel=(ang1-ang2)/2
if abs(tan(szogfel) )>eps then
ivtav=_bendradius/tan(szogfel)
detpoints[np+1][1]=__ironpointcoords[i+1][1]+cos(ang1+180)*abs(ivtav)
detpoints[np+1][2]=__ironpointcoords[i+1][2]+sin(ang1+180)*abs(ivtav)
detpoints[np+1][3]=__ironpointcoords[i+1][3]
detarcangle[np]=0
detarccenter[np][1]=0
detarccenter[np][2]=0
detradiusdist[np]=0
detisarc[np]=0
np=np+1
detpoints[np+1][1]=__ironpointcoords[i+1][1]-cos(ang2)*abs(ivtav)
detpoints[np+1][2]=__ironpointcoords[i+1][2]-sin(ang2)*abs(ivtav)
detpoints[np+1][3]=__ironpointcoords[i+1][3]
x11=__ironpointcoords[i+1][1]
y11=__ironpointcoords[i+1][2]
x12=__ironpointcoords[i+1][1]+cos(szogfel+ang2)
y12=__ironpointcoords[i+1][2]+sin(szogfel+ang2)
x21=detpoints[np+1][1]
y21=detpoints[np+1][2]
x22=detpoints[np+1][1]+cos(ang2+90)
y22=detpoints[np+1][2]+sin(ang2+90)
gosub "intersection_Line_Line"
if state=1 then
vx=cx-detpoints[np][1]
vy=cy-detpoints[np][2]
gosub "directionAngle"
a1=angle
vx=cx-detpoints[np+1][1]
vy=cy-detpoints[np+1][2]
gosub "directionAngle"
a2=angle
if abs(a2-a1)>180 then
if a2-a1>180 then
arca=a2-a1-360
else
arca=360+a2-a1
endif
else
arca=a2-a1
endif
detarcangle[np]=arca
detarccenter[np][1]=cx
detarccenter[np][2]=cy
detradiusdist[np]=abs(_bendradius)
detisarc[np]=1
else
detarcangle[np]=0
detarccenter[np][1]=0
detarccenter[np][2]=0
detradiusdist[np]=0
detisarc[np]=0
endif
np=np+1
else
gosub "addPoint"
endif
else
gosub "addPoint"
endif
next i
if not(bstirrup)|not(_bstirrupback2) then
if _bclosedpolygon then
detpoints[np+1][1]=__ironpointcoords[1][1]
detpoints[np+1][2]=__ironpointcoords[1][2]
detpoints[np+1][3]=__ironpointcoords[__nironpoint][3]
detarcangle[np]=_arcangle[__nironpoint]
detarccenter[np][1]=_arccenter[__nironpoint][1]
detarccenter[np][2]=_arccenter[__nironpoint][2]
detradiusdist[np]=abs(__ironarcpoints[__nironpoint]+_radiusdistance[__nironpoint])
detisarc[np]=_isarc[__nironpoint]
np=np+1
else
detpoints[np+1][1]=__ironpointcoords[__nironpoint][1]
detpoints[np+1][2]=__ironpointcoords[__nironpoint][2]
detpoints[np+1][3]=__ironpointcoords[__nironpoint][3]
detarcangle[np]=_arcangle[__nironpoint-1]
detarccenter[np][1]=_arccenter[__nironpoint-1][1]
detarccenter[np][2]=_arccenter[__nironpoint-1][2]
detradiusdist[np]=abs(__ironarcpoints[__nironpoint-1]+_radiusdistance[__nironpoint-1])
detisarc[np]=_isarc[__nironpoint-1]
np=np+1
endif
else
_dir=1-2*(_stirrupang2<0)
if _bclosedpolygon then
eidx=1
sidx=__nironpoint
zz=0
_stirrupang2=abs(szogfelk)
gosub "endKampo"
else
eidx=__nironpoint
sidx=__nironpoint-1
zz=0
gosub "endKampo"
endif
endif
npoint=vardim1(detpoints)
else
npoint=__nironpoint
detpoints=__ironpointcoords
detarcangle=_arcangle
detarccenter=_arccenter
detisarc=_isarc
for i=vardim1(_radiusdistance) to 1 step-1
detradiusdist[i]=abs(__ironarcpoints[i]+_radiusdistance[i])
next i
if _bclosedpolygon then
detpoints[npoint+1][1]=detpoints[1][1]
detpoints[npoint+1][2]=detpoints[1][2]
detpoints[npoint+1][3]=detpoints[npoint][3]
endif
endif
return
"addPoint":
detpoints[np+1][1]=__ironpointcoords[i+1][1]
detpoints[np+1][2]=__ironpointcoords[i+1][2]
detpoints[np+1][3]=__ironpointcoords[i+1][3]
detarcangle[np]=_arcangle[i]
detarccenter[np][1]=_arccenter[i][1]
detarccenter[np][2]=_arccenter[i][2]
detradiusdist[np]=abs(__ironarcpoints[i]+_radiusdistance[i])
detisarc[np]=_isarc[i]
np=np+1
return
"startKampo":
vx=__ironpointcoords[eidx][1]-__ironpointcoords[sidx][1]
vy=__ironpointcoords[eidx][2]-__ironpointcoords[sidx][2]
gosub "directionAngle"
sang=angle
_kdir=1
if _bclosedpolygon&pdirection=-1 then _kdir=-1
_dir=_dir*_kdir
s1=cos(sang)*_bendradius+cos(sang+90*_dir)*_bendradius
s2=(sin(sang)*_bendradius+sin(sang+90*_dir)*_bendradius)
s3=s1+cos(sang+90*_dir+_stirrupang1*_kdir)*_bendradius
s4=s2+sin(sang+90*_dir+_stirrupang1*_kdir)*_bendradius
detpoints[np][1]=__ironpointcoords[sidx][1]+s3+cos(sang+_stirrupang1*_kdir)*_jointlength
detpoints[np][2]=__ironpointcoords[sidx][2]+s4+sin(sang+_stirrupang1*_kdir)*_jointlength
detpoints[np][3]=__ironpointcoords[sidx][3]
detpoints[np+1][1]=__ironpointcoords[sidx][1]+s3
detpoints[np+1][2]=__ironpointcoords[sidx][2]+s4
detpoints[np+1][3]=__ironpointcoords[sidx][3]
detarcangle[np]=0
detarccenter[np][1]=0
detarccenter[np][2]=0
detradiusdist[np]=0
detisarc[np]=0
np=np+1
if abs(180-_stirrupang1)>180 then
if 180-_stirrupang1>180 then
arca=180-_stirrupang1-360
else
arca=360+180-_stirrupang1
endif
else
arca=180-_stirrupang1
endif
detpoints[np+1][1]=__ironpointcoords[sidx][1]+cos(sang)*_bendradius
detpoints[np+1][2]=__ironpointcoords[sidx][2]+sin(sang)*_bendradius
detpoints[np+1][3]=__ironpointcoords[sidx][3]
detarcangle[np]=arca*_kdir
detarccenter[np][1]=__ironpointcoords[sidx][1]+s1
detarccenter[np][2]=__ironpointcoords[sidx][2]+s2
detradiusdist[np]=abs(_bendradius)
detisarc[np]=1
np=np+1
return
"endKampo":
vx=__ironpointcoords[eidx][1]-__ironpointcoords[sidx][1]
vy=__ironpointcoords[eidx][2]-__ironpointcoords[sidx][2]
gosub "directionAngle"
sang=angle
_kdir=1
if _bclosedpolygon&pdirection=-1 then _kdir=-1
_dir=_dir*_kdir
s1=-cos(sang)*_bendradius+cos(sang+90*_dir)*_bendradius
s2=-sin(sang)*_bendradius+sin(sang+90*_dir)*_bendradius
s3=s1+cos(sang+90*_dir-_stirrupang2*_kdir)*_bendradius
s4=s2+sin(sang+90*_dir-_stirrupang2*_kdir)*_bendradius
detpoints[np+1][1]=__ironpointcoords[eidx][1]-cos(sang)*_bendradius
detpoints[np+1][2]=__ironpointcoords[eidx][2]-sin(sang)*_bendradius
detpoints[np+1][3]=__ironpointcoords[eidx][3]
detarcangle[np]=_arcangle[sidx]
detarccenter[np][1]=_arccenter[sidx][1]
detarccenter[np][2]=_arccenter[sidx][2]
detradiusdist[np]=abs(__ironarcpoints[sidx]+_radiusdistance[sidx])
detisarc[np]=_isarc[sidx]
np=np+1
if abs(180-_stirrupang2)>180 then
if 180-_stirrupang2>180 then
arca=180-_stirrupang2-360
else
arca=360+180-_stirrupang2
endif
else
arca=180-_stirrupang2
endif
detpoints[np+1][1]=__ironpointcoords[eidx][1]+s3
detpoints[np+1][2]=__ironpointcoords[eidx][2]+s4
detpoints[np+1][3]=__ironpointcoords[eidx][3]
detarcangle[np]=arca*_kdir
detarccenter[np][1]=__ironpointcoords[eidx][1]+s1
detarccenter[np][2]=__ironpointcoords[eidx][2]+s2
detradiusdist[np]=abs(_bendradius)
detisarc[np]=1
np=np+1
detpoints[np+1][1]=__ironpointcoords[eidx][1]+s3-cos(sang-_stirrupang2*_kdir)*_jointlength
detpoints[np+1][2]=__ironpointcoords[eidx][2]+s4-sin(sang-_stirrupang2*_kdir)*_jointlength
detpoints[np+1][3]=__ironpointcoords[eidx][3]
detarcangle[np]=0
detarccenter[np][1]=0
detarccenter[np][2]=0
detradiusdist[np]=0
detisarc[np]=0
np=np+1
return
dim offsetedcoords[][]
"offcetCalculate":
offsetdist=-pdirection*rebardist
for i=__nironpoint-not(bclosedpolygon) to 1 step-1
actx1=__ironpointcoords[i][1]
acty1=__ironpointcoords[i][2]
if i=__nironpoint then
actx2=__ironpointcoords[1][1]
acty2=__ironpointcoords[1][2]
else
actx2=__ironpointcoords[i+1][1]
acty2=__ironpointcoords[i+1][2]
endif
if i=1 then
prevx1=__ironpointcoords[__nironpoint][1]
prevy1=__ironpointcoords[__nironpoint][2]
else
prevx1=__ironpointcoords[i-1][1]
prevy1=__ironpointcoords[i-1][2]
endif
prevx2=actx1
prevy2=acty1
actsidex=actx2-actx1
actsidey=acty2-acty1
prevsidex=prevx2-prevx1
prevsidey=prevy2-prevy1
actarccenterx=_arccenter[i][1]
actarccentery=_arccenter[i][2]
actarcdist=_radiusdistance[i]
actarcpoint=__ironarcpoints[i]
if i=1 then
prevarccenterx=_arccenter[__nironpoint][1]
prevarccentery=_arccenter[__nironpoint][2]
prevarcdist=_radiusdistance[__nironpoint]
prevarcpoint=__ironarcpoints[__nironpoint]
else
prevarccenterx=_arccenter[i-1][1]
prevarccentery=_arccenter[i-1][2]
prevarcdist=_radiusdistance[i-1]
prevarcpoint=__ironarcpoints[i-1]
endif
actdir=1
prevdir=1
if actsidex<-eps then actdir=-1
if prevsidex<-eps then prevdir=-1
if abs(actsidex)>eps then
actalpha=atn(actsidey/actsidex)-90
else
if acty1-acty2>eps then
actalpha=180
else
actalpha=0
endif
endif
if abs(prevsidex)>eps then
prevalpha=atn(prevsidey/prevsidex)-90
else
if prevy1-prevy2>eps then
prevalpha=180
else
prevalpha=0
endif
endif
actarcorline=(abs(actarcpoint)>eps)
prevarcorline=(abs(prevarcpoint)>eps)
if i=1&not(bclosedpolygon) then
if actarcorline=0 then
offsetedcoords[i][1]=actx1+actdir*cos(actalpha)*offsetdist
offsetedcoords[i][2]=acty1+actdir*sin(actalpha)*offsetdist
else
vx=actx1-actarccenterx
vy=acty1-actarccentery
gosub "directionAngle"
offsetedcoords[i][1]=actarccenterx+cos(angle)*(_radiusdistance[i]+__ironarcpoints[i]+offsetdist)
offsetedcoords[i][2]=actarccentery+sin(angle)*(_radiusdistance[i]+__ironarcpoints[i]+offsetdist)
endif
else
if actarcorline+prevarcorline=0 then
x11=actx1+actdir*cos(actalpha)*offsetdist
y11=acty1+actdir*sin(actalpha)*offsetdist
x12=actx2+actdir*cos(actalpha)*offsetdist
y12=acty2+actdir*sin(actalpha)*offsetdist
x21=prevx1+prevdir*cos(prevalpha)*offsetdist
y21=prevy1+prevdir*sin(prevalpha)*offsetdist
x22=prevx2+prevdir*cos(prevalpha)*offsetdist
y22=prevy2+prevdir*sin(prevalpha)*offsetdist
gosub "intersection_Line_Line"
if state then
offsetedcoords[i][1]=cx
offsetedcoords[i][2]=cy
else
offsetedcoords[i][1]=x11
offsetedcoords[i][2]=y11
endif
else
if actarcorline+prevarcorline=1 then
if actarcorline then
xo=actarccenterx
yo=actarccentery
ro=abs(actarcdist+actarcpoint+offsetdist)
x1=prevx1+prevdir*cos(prevalpha)*offsetdist
y1=prevy1+prevdir*sin(prevalpha)*offsetdist
x2=prevx2+prevdir*cos(prevalpha)*offsetdist
y2=prevy2+prevdir*sin(prevalpha)*offsetdist
lineisprev=1
gosub "intersection_Circle_Line"
gosub "selectGoodIntersection_Circle_Line":
else
xo=prevarccenterx
yo=prevarccentery
ro=abs(prevarcdist+prevarcpoint+offsetdist)
x1=actx1+actdir*cos(actalpha)*offsetdist
y1=acty1+actdir*sin(actalpha)*offsetdist
x2=actx2+actdir*cos(actalpha)*offsetdist
y2=acty2+actdir*sin(actalpha)*offsetdist
lineisprev=0
gosub "intersection_Circle_Line"
gosub "selectGoodIntersection_Circle_Line":
endif
else
x1=actarccenterx
y1=actarccentery
r1=abs(actarcdist+actarcpoint+offsetdist)
x2=prevarccenterx
y2=prevarccentery
r2=abs(prevarcdist+prevarcpoint+offsetdist)
gosub "intersection_Circle_Circle"
gosub "selectGoodIntersection_Circle_Circle"
endif
endif
endif
if i=__nironpoint-not(bclosedpolygon)&not(bclosedpolygon) then
if actarcorline=0 then
offsetedcoords[__nironpoint][1]=actx2+actdir*cos(actalpha)*offsetdist
offsetedcoords[__nironpoint][2]=acty2+actdir*sin(actalpha)*offsetdist
else
vx=actx2-actarccenterx
vy=acty2-actarccentery
gosub "directionAngle"
offsetedcoords[__nironpoint][1]=actarccenterx+cos(angle)*(_radiusdistance[i]+__ironarcpoints[i]+offsetdist)
offsetedcoords[__nironpoint][2]=actarccentery+sin(angle)*(_radiusdistance[i]+__ironarcpoints[i]+offsetdist)
endif
endif
next i
dim offsetarcangle[][3]
for i=__nironpoint-not(bclosedpolygon) to 1 step-1
if _isarc[i] then
actoffsetx=offsetedcoords[i][1]
actoffsety=offsetedcoords[i][2]
if i=__nironpoint then
nextoffsetx=offsetedcoords[1][1]
nextoffsety=offsetedcoords[1][2]
else
nextoffsetx=offsetedcoords[i+1][1]
nextoffsety=offsetedcoords[i+1][2]
endif
vx=actoffsetx-_arccenter[i][1]
vy=actoffsety-_arccenter[i][2]
gosub "directionAngle"
offsetarcangle[i][2]=angle
vx=nextoffsetx-_arccenter[i][1]
vy=nextoffsety-_arccenter[i][2]
gosub "directionAngle"
offsetarcangle[i][3]=angle
if __ironarcpoints[i]>eps then
offsetarcangle[i][1]=offsetarcangle[i][3]-offsetarcangle[i][2]
if offsetarcangle[i][1]<eps then
offsetarcangle[i][1]=360-offsetarcangle[i][2]+offsetarcangle[i][3]
endif
else
offsetarcangle[i][1]=-(offsetarcangle[i][2]+(360-offsetarcangle[i][3]) )
if offsetarcangle[i][1]<-360 then offsetarcangle[i][1]=offsetarcangle[i][1]+360
endif
if offsetarcangle[i][1]<0 then offsetarcangle[i][2]=offsetarcangle[i][2]-abs(offsetarcangle[i][1])
else
offsetarcangle[i][1]=0
offsetarcangle[i][2]=0
offsetarcangle[i][3]=0
endif
next i
return
"intersection_Line_Line":
v1x=x11-x12
v2x=x21-x22
v1y=y11-y12
v2y=y21-y22
llidiv=v1x*v2y-v1y*v2x
temp1=x11*y12-y11*x12
temp2=x21*y22-y21*x22
if abs(llidiv)>eps then
tempx=temp1*v2x-v1x*temp2
tempy=temp1*v2y-v1y*temp2
state=1
cx=(tempx/llidiv)
cy=(tempy/llidiv)
else
cx=0
cy=0
if abs(abs(temp1)-abs(temp2) )<eps then
state=-1
else
state=0
endif
endif
return
"intersection_Circle_Line":
tempx1=x1-xo:tempy1=y1-yo
tempx2=x2-xo:tempy2=y2-yo
if abs(tempx2-tempx1)<eps then
if abs(ro-abs(tempx1) )<eps then
state=1
xa=tempx1
ya=0
xb=tempx1
yb=0
else
if abs(ro)-abs(tempx1)<0 then
state=0:xa=0:ya=0:xb=0:yb=0
else
state=2
xa=tempx1
ya=sqr(ro^2-tempx1^2)
xb=tempx1
yb=-sqr(ro^2-tempx1^2)
endif
endif
else
kf=(tempy2-tempy1)/(tempx2-tempx1)
ad=1+kf^2
bd=2*tempy1*kf-2*tempx1*kf^2
cd=tempy1^2-2*tempx1*tempy1*kf+tempx1^2*kf^2-ro^2
if bd^2-4*ad*cd<0 then
state=0:xa=0:ya=0:xb=0:yb=0
else
xa=(-bd+sqr(bd^2-4*ad*cd) )/(2*ad)
ya=tempy1+(xa-tempx1)*kf
xb=(-bd-sqr(bd^2-4*ad*cd) )/(2*ad)
yb=tempy1+(xb-tempx1)*kf
if abs(xa-xb)<eps then state=1 else state=2
endif
endif
if state=2 then
da=sqr((tempx1-xa) ^2+(tempy1-ya) ^2)
db=sqr((tempx1-xb) ^2+(tempy1-yb) ^2)
if db<da then
xxo=xa:yyo=ya
xa=xb:ya=yb
xb=xxo:yb=yyo
endif
endif
xa=xa+xo:ya=ya+yo
xb=xb+xo:yb=yb+yo
return
"selectGoodIntersection_Circle_Line":
if state then
if state=2 then
intsectiondistancea=sqr((actx1-xa)**2+(acty1-ya)**2)
intsectiondistanceb=sqr((actx1-xb)**2+(acty1-yb)**2)
if intsectiondistanceb>intsectiondistancea then
offsetedcoords[i][1]=xa
offsetedcoords[i][2]=ya
else
offsetedcoords[i][1]=xb
offsetedcoords[i][2]=yb
endif
else
offsetedcoords[i][1]=xa
offsetedcoords[i][2]=ya
endif
else
if lineisprev then
offsetedcoords[i][1]=x2
offsetedcoords[i][2]=y2
else
offsetedcoords[i][1]=x1
offsetedcoords[i][2]=y1
endif
endif
return
"intersection_Circle_Circle":
vx=x2-x1
vy=y2-y1
gosub "directionAngle"
d=sqr((vx) ^2+(vy) ^2)
if d>(r1+r2)|abs(d)<eps then
state=0
return
endif
if abs(d-(r1+r2) )<eps then
state=1
xa=x1+((x2-x1)*r1)/(r1+r2)
ya=y1+((y2-y1)*r1)/(r1+r2)
xb=xa
yb=ya
return
endif
x=(d^2-r2^2+r1^2)/(2*d)
y=sqr(abs(4*d^2*r1^2-(d^2-r2^2+r1^2) ^2) )/(d*2)
xa=x1+y*sin(-angle)+x*cos(-angle)
ya=y1+y*cos(-angle)-x*sin(-angle)
xb=x1-y*sin(-angle)+x*cos(-angle)
yb=y1-y*cos(-angle)-x*sin(-angle)
state=2
return
"selectGoodIntersection_Circle_Circle":
if state then
if state=2 then
intsectiondistancea=sqr((actx1-xa)**2+(acty1-ya)**2)
intsectiondistanceb=sqr((actx1-xb)**2+(acty1-yb)**2)
if intsectiondistanceb>intsectiondistancea then
offsetedcoords[i][1]=xa
offsetedcoords[i][2]=ya
else
offsetedcoords[i][1]=xb
offsetedcoords[i][2]=yb
endif
else
offsetedcoords[i][1]=xa
offsetedcoords[i][2]=ya
endif
else
vx=actx1-actarccenterx
vy=acty1-actarccentery
gosub "directionAngle"
offsetedcoords[i][1]=actarccenterx+cos(angle)*r1
offsetedcoords[i][2]=actarccentery+sin(angle)*r1
endif
return
"calculatePolygonArea":
area=0
tempnumpnts=nsp/3
dim polygon1[][3]
for p=1to tempnumpnts
polygon1[p][1]=get(1)
polygon1[p][2]=get(1)
polygon1[p][3]=get(1)
next p
for areai=1 to tempnumpnts-1
area=area+(polygon1[areai+1][1]+polygon1[areai][1])*(polygon1[areai+1][2]-polygon1[areai][2])*0.5
next areai
area=area+(polygon1[1][1]+polygon1[tempnumpnts][1])*(polygon1[1][2]-polygon1[tempnumpnts][2])*0.5
return
"directionAngle":
if abs(vx)<eps&abs(vy)<eps then
angle=0
return
endif
if abs(vx)<eps then
if vy>0 then
angle=90
else
angle=270
endif
else
angle=atn(vy/vx)
if vx>=0 then
if angle<0 then
angle=angle+360
endif
else
angle=180+angle
endif
endif
return
"endMasterSript":
]]>
</Script_1D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_PR SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_PR>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_UI SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_UI>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_VL SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_VL>

<Comment SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Comment>

<ParamSection SectVersion="21" SectionFlags="0" SubIdent="0">
	<ParamSectHeader>
		<AutoHotspots>false</AutoHotspots>
		<StatBits>
			<STBit_FixSize/>
		</StatBits>
		<WDLeftFrame>0</WDLeftFrame>
		<WDRightFrame>0</WDRightFrame>
		<WDTopFrame>0</WDTopFrame>
		<WDBotFrame>0</WDBotFrame>
		<LayFlags>65535</LayFlags>
		<WDMirrorThickness>0</WDMirrorThickness>
		<WDWallInset>0</WDWallInset>
	</ParamSectHeader>
	<Parameters>
		<Length Name="A">
			<Description><![CDATA["Dimension 1"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Length>
		<Length Name="B">
			<Description><![CDATA["Dimension 2"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Length>
		<Length Name="ZZYZX">
			<Description><![CDATA["Height"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Length>
		<Boolean Name="AC_show2DHotspotsIn3D">
			<Description><![CDATA["Show 2D Hotspots in 3D"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Length Name="ac_bottomlevel">
			<Description><![CDATA["Bottom Level"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Length>
		<Length Name="ac_toplevel">
			<Description><![CDATA["Top Level"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Integer Name="unID">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1000</Value>
		</Integer>

		<!-- ironIdx: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Integer Name="ironIdx">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Integer Name="iView">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>3</Value>
		</Integer>
		<Integer Name="ironType">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<ArrayValues FirstDimension="1" SecondDimension="4">
				<AVal Column="1" Row="1">2</AVal>
				<AVal Column="2" Row="1">1</AVal>
				<AVal Column="3" Row="1">0</AVal>
				<AVal Column="4" Row="1">0</AVal>
			</ArrayValues>
		</Integer>
		<Length Name="ironData">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<ArrayValues FirstDimension="1" SecondDimension="12">
				<AVal Column="1" Row="1">0</AVal>
				<AVal Column="2" Row="1">0</AVal>
				<AVal Column="3" Row="1">0</AVal>
				<AVal Column="4" Row="1">0</AVal>
				<AVal Column="5" Row="1">0</AVal>
				<AVal Column="6" Row="1">0</AVal>
				<AVal Column="7" Row="1">0</AVal>
				<AVal Column="8" Row="1">0</AVal>
				<AVal Column="9" Row="1">0</AVal>
				<AVal Column="10" Row="1">0</AVal>
				<AVal Column="11" Row="1">0</AVal>
				<AVal Column="12" Row="1">0</AVal>
			</ArrayValues>
		</Length>
		<Length Name="ironExtraData">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<ArrayValues FirstDimension="1" SecondDimension="9">
				<AVal Column="1" Row="1">0</AVal>
				<AVal Column="2" Row="1">0</AVal>
				<AVal Column="3" Row="1">0</AVal>
				<AVal Column="4" Row="1">0</AVal>
				<AVal Column="5" Row="1">0</AVal>
				<AVal Column="6" Row="1">0</AVal>
				<AVal Column="7" Row="1">0</AVal>
				<AVal Column="8" Row="1">0</AVal>
				<AVal Column="9" Row="1">0</AVal>
			</ArrayValues>
		</Length>
		<Boolean Name="bPlacedManual">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>

		<!-- bUseIronData: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Boolean Name="bUseIronData">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_BoldName/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Length Name="d">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.01</Value>
		</Length>
		<Length Name="bendRadius">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.02</Value>
		</Length>
		<Length Name="jointLength">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.1</Value>
		</Length>
		<Length Name="fiberLength">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Length>
		<Length Name="fullLength">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>4</Value>
		</Length>
		<Integer Name="iEndType1">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Integer>
		<Integer Name="iEndType2">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Integer>
		<Length Name="offset1">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="offset2">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="endLength1">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="endLength2">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="endHeight1">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="endHeight2">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="turnBackLength1">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="turnBackLength2">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Integer Name="nStirrup">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>10</Value>
		</Integer>
		<Length Name="stirrupDist">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.2</Value>
		</Length>
		<Length Name="hoopX">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.2</Value>
		</Length>
		<Length Name="hoopY">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.3</Value>
		</Length>
		<Length Name="netX">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="netY">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Integer Name="nRebarPoint">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>2</Value>
		</Integer>
		<Length Name="rebarPointCoords">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<ArrayValues FirstDimension="2" SecondDimension="3">
				<AVal Column="1" Row="1">0</AVal>
				<AVal Column="2" Row="1">0</AVal>
				<AVal Column="3" Row="1">0</AVal>
				<AVal Column="1" Row="2">2</AVal>
				<AVal Column="2" Row="2">0</AVal>
				<AVal Column="3" Row="2">0</AVal>
			</ArrayValues>
		</Length>
		<Length Name="rebarPrevCoords">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<ArrayValues FirstDimension="2" SecondDimension="3">
				<AVal Column="1" Row="1">0</AVal>
				<AVal Column="2" Row="1">0</AVal>
				<AVal Column="3" Row="1">0</AVal>
				<AVal Column="1" Row="2">2</AVal>
				<AVal Column="2" Row="2">0</AVal>
				<AVal Column="3" Row="2">0</AVal>
			</ArrayValues>
		</Length>
		<Length Name="rebarArcPoints">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<ArrayValues FirstDimension="2" SecondDimension="0">
				<AVal Row="1">0</AVal>
				<AVal Row="2">0</AVal>
			</ArrayValues>
		</Length>
		<Length Name="rebarNewPoint">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<ArrayValues FirstDimension="2" SecondDimension="2">
				<AVal Column="1" Row="1">0</AVal>
				<AVal Column="2" Row="1">0</AVal>
				<AVal Column="1" Row="2">0</AVal>
				<AVal Column="2" Row="2">0</AVal>
			</ArrayValues>
		</Length>
		<Integer Name="nStirrupPoint">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>4</Value>
		</Integer>
		<Length Name="stirrupPointCoords">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<ArrayValues FirstDimension="4" SecondDimension="3">
				<AVal Column="1" Row="1">0</AVal>
				<AVal Column="2" Row="1">0</AVal>
				<AVal Column="3" Row="1">0</AVal>
				<AVal Column="1" Row="2">0.2</AVal>
				<AVal Column="2" Row="2">0</AVal>
				<AVal Column="3" Row="2">0</AVal>
				<AVal Column="1" Row="3">0.2</AVal>
				<AVal Column="2" Row="3">0.3</AVal>
				<AVal Column="3" Row="3">0</AVal>
				<AVal Column="1" Row="4">0</AVal>
				<AVal Column="2" Row="4">0.3</AVal>
				<AVal Column="3" Row="4">0</AVal>
			</ArrayValues>
		</Length>
		<Length Name="stirrupPrevCoords">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<ArrayValues FirstDimension="1" SecondDimension="3">
				<AVal Column="1" Row="1">0</AVal>
				<AVal Column="2" Row="1">0</AVal>
				<AVal Column="3" Row="1">0</AVal>
			</ArrayValues>
		</Length>
		<Length Name="stirrupArcPoints">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<ArrayValues FirstDimension="4" SecondDimension="0">
				<AVal Row="1">0</AVal>
				<AVal Row="2">0</AVal>
				<AVal Row="3">0</AVal>
				<AVal Row="4">0</AVal>
			</ArrayValues>
		</Length>
		<Length Name="stirrupNewPoint">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<ArrayValues FirstDimension="4" SecondDimension="2">
				<AVal Column="1" Row="1">0</AVal>
				<AVal Column="2" Row="1">0</AVal>
				<AVal Column="1" Row="2">0</AVal>
				<AVal Column="2" Row="2">0</AVal>
				<AVal Column="1" Row="3">0</AVal>
				<AVal Column="2" Row="3">0</AVal>
				<AVal Column="1" Row="4">0</AVal>
				<AVal Column="2" Row="4">0</AVal>
			</ArrayValues>
		</Length>
		<Boolean Name="bStirrupBack1">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Angle Name="stirrupAng1">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>30</Value>
		</Angle>
		<Boolean Name="bStirrupBack2">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Angle Name="stirrupAng2">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>30</Value>
		</Angle>
		<Length Name="rebarDist">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.02</Value>
		</Length>
		<Length Name="rebarDistDiag">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Boolean Name="bClosedPolygon">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="bDetailedArc">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="bOffset">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Angle Name="rot_st">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Angle>

		<!-- view: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="view">
			<Description><![CDATA[""]]></Description>
		</Title>
		<Boolean Name="bCalledFromList">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="bDetailedSection">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="bEnableHsEdit">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="bNullHotspot">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="bEnableFullLengthEdit">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Length Name="visibleX">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<ArrayValues FirstDimension="1" SecondDimension="2">
				<AVal Column="1" Row="1">0</AVal>
				<AVal Column="2" Row="1">0</AVal>
			</ArrayValues>
		</Length>
		<Length Name="visibleY">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<ArrayValues FirstDimension="1" SecondDimension="2">
				<AVal Column="1" Row="1">0</AVal>
				<AVal Column="2" Row="1">0</AVal>
			</ArrayValues>
		</Length>

		<!-- gs_2D_representation: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_2D_representation">
			<Description><![CDATA[""]]></Description>
		</Title>
		<PenColor Name="penIron">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</PenColor>
		<FillPattern Name="fillIron">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>65</Value>
		</FillPattern>
		<PenColor Name="penFillIron">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>3</Value>
		</PenColor>
		<PenColor Name="penFillBgIron">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>103</Value>
		</PenColor>
		<PenColor Name="penFont">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</PenColor>
		<LineType Name="ltIron">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</LineType>
		<Boolean Name="bShowDimText">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<String Name="styleFont">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Arial"]]></Value>
		</String>
		<RealNum Name="heightFontDim">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>2</Value>
		</RealNum>

		<!-- gs_3D_representation: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_3D_representation">
			<Description><![CDATA[""]]></Description>
		</Title>
		<Integer Name="iDetLevel3D">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>2</Value>
		</Integer>
		<Integer Name="gs_resol">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>12</Value>
		</Integer>
		<Boolean Name="gs_shadow">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Material Name="gs_mat">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Material>
	</Parameters>
</ParamSection>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_FWM SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_FWM>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_BWM SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_BWM>

<Copyright SectVersion="1" SectionFlags="0" SubIdent="0">
	<Author></Author>
	<License>
		<Type>CC0</Type>
		<Version>1.0</Version>
	</License>
</Copyright>

<Keywords SectVersion="1" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Keywords>

</Symbol>
