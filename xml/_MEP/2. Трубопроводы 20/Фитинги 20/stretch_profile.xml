<?xml version="1.0" encoding="UTF-8"?>
<Symbol IsArchivable="false" IsPlaceable="true" MainGUID="3D82BF6A-29B1-4B4A-826F-A1A3BF6ADC51" MigrationValue="Normal" Owner="1196638531" Signature="1196644685" Version="43">
<Ancestry SectVersion="1" SectionFlags="0" SubIdent="0" Template="false">
	<MainGUID>F938E33A-329D-4A36-BE3E-85E126820996</MainGUID>
	<MainGUID>103E8D2C-8230-42E1-9597-46F84CCE28C0</MainGUID>
</Ancestry>

<CalledMacros SectVersion="2" SectionFlags="0" SubIdent="0">
</CalledMacros>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_3D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
for _iComp = 1 to _nComponents
        if _bShowPart[_iComp] then
        	dim _currSurfaces[]
        	n = REQUEST{4} ("Profile_component_info", myProfileIdx, _iComp, "gs_profile_comp_surfaces", _currSurfaces)
         	_bmat = 1
        	_surface = 1
        	_pen = 1
        	n = REQUEST{4} ("Profile_component_info", myProfileIdx, _iComp, "gs_profile_bmat", _bmat)
			n = REQUEST{4} ("Profile_component_info", myProfileIdx, _iComp, "gs_profile_surface", _surface)
			n = REQUEST{4} ("Profile_component_info", myProfileIdx, _iComp, "gs_profile_outlinepen", _pen)
     	    building_material _bmat
     	    pen _pen
		if i3DType = TYPE_TUBE then
			! number of the polyline nodes - all nodes have 5 properties 
			! (x, y, edgeVisible, verticalEdgeVisible, additionalStatus)
			_numPolyNodes = (_idxEndPoints[_iComp] - _idxStartPoints[_iComp] + 1) / 5
			! number of route points - fixed in this example
			_numPathNodes = 7
			put 	_numPolyNodes,	
				_numPathNodes,	
				1 + 2 + 16 + 32 + 256	! mask
			_surfIdx = 1
			for _i = _idxStartPoints[_iComp] to _idxEndPoints[_iComp] step 5
				gosub "set_status_code"	 ! input _profileGeometryRawData, returns tubeStatus
				put 	_profileGeometryRawData[_i], 		! xn
					_profileGeometryRawData[_i + 1], 	! yn
					tubeStatus, 				! sn
					_currSurfaces[_surfIdx]			! surfn
				_surfIdx = _surfIdx + 1
			next _i
			! put points for tube path
			put 	0, 0, -1, 90,
				0, 0, 0, 90,
				0, 0, 1, 90,
				1, 0, 1, 90,
				1, 0, 2, 180,
				1, 1, 2, 180,
				1, 1, 3, 180
			tube{2} _surface, _surface, _surface,
				get (NSP)
		else	! TYPE_CPRISM
			_surfIdx = 1
			for _i = _idxStartPoints[_iComp] to _idxEndPoints[_iComp] step 5

				gosub "set_status_code"	 ! input _profileGeometryRawData, returns prismStatus

				put 	_profileGeometryRawData[_i], 		! xn
					_profileGeometryRawData[_i + 1], 	! yn
					0, 					! angle of sides from the perpendicular plane
					prismStatus, 				! sn
					_currSurfaces[_surfIdx]			! surfn
				_surfIdx = _surfIdx + 1
			next _i
			! info from Manual : CPRISM_, SPRISM_, CROOF, TUBE and REVOLVE commands (versions {3} and above),
			! curved surface can be smooth, the curved segment edges no longer copy the masking settings of the first node of the curved section: 
			 _mask = 8
            		cprism_{3} _surface, _surface, _surface, _mask,
					NSP/5, ZZYZX,
					get(NSP)
		endif
        endif
next _iComp

! ==============================================================================
end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end
! ==============================================================================

! ------------------------------------------------------------------------------
! Set status code for each point
! ------------------------------------------------------------------------------
"set_status_code":

	edgeVisible 		= _profileGeometryRawData[_i + 2]
	verticalEdgeVisible 	= _profileGeometryRawData[_i + 3]
	additionalStatus 	= _profileGeometryRawData[_i + 4]
	
	poly2Status 	= edgeVisible + additionalStatus
	prismStatus 	= additionalStatus
	tubeStatus 	= additionalStatus

	if additionalStatus >= 0 then        ! not contour end
		if edgeVisible then
			prismStatus = prismStatus + 15    ! j1, j2, j3, j4
		endif
		if verticalEdgeVisible = 0 then
			! status code - j2=1 and j7=1: the vertical edge is only visible when it is a contour observed from the current direction of view
			! needed only if mask 8 is not used for cprism_{3}
			prismStatus = prismStatus + 64

			! in tube, lateral edges starting from the node are used for showing the contour
			! needed only if mask 256 is not used for tube_{2}
			tubeStatus = tubeStatus + 1
		endif
	endif
return
]]>
</Script_3D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_2D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
hotspot2 0,0

!!---------------------------start https://gdl.graphisoft.com/gdl_other_docs/profile-modelling-in-2d-with-attributes -------------
for _iComp = 1 to _nComponents
	if _bShowPart[_iComp] then
		! --- Get contour pen ---
		_pen = 1
		n = REQUEST{4} ("Profile_component_info", myProfileIdx, _iComp, "gs_profile_outlinepen", _pen)

		! --- Get building material and cut fill attributes ---
		_bmat = 1
		n = REQUEST{4} ("Profile_component_info", myProfileIdx, _iComp, "gs_profile_bmat", _bmat)
		n = REQUEST{2} ("Building_Material_info", _bmat, "gs_bmat_cutfill_properties", _fillType, _fillPen, _fillBgPen)
		! --- Get the pens and linetypes for the polygon edges ---
		dim _currPens[]
		dim _currLineTypes[]
		n = REQUEST{4} ("Profile_component_info", myProfileIdx, _iComp, "gs_profile_comp_pens", _currPens)
		n = REQUEST{4} ("Profile_component_info", myProfileIdx, _iComp, "gs_profile_comp_linetypes", _currLineTypes)
		fill _fillType
		pen _pen
		! --- Store parameters for the poly command ---
		_penLtIdx = 1
		for _i = _idxStartPoints[_iComp] to _idxEndPoints[_iComp] step 5
			put 	_profileGeometryRawData[_i],		! xn
				_profileGeometryRawData[_i + 1],	! yn
				_profileGeometryRawData[_i + 2] + _profileGeometryRawData[_i + 4],	! status values : edgeVisible + additionalStatus
				_currPens[_penLtIdx],			! pen
				_currLineTypes[_penLtIdx]		! linetype
			_penLtIdx = _penLtIdx + 1
		next _i
		! --- Draw the component ---	
		poly2_b{6} (NSP/5), 1+2+4, 1, 0,	! cut fill, 0 distortion flag
			_fillPen, _fillBgPen,
			0, 0,				! fill origin
			0.1, 0.1, 0.2, 0.2,		! mxx, mxy, myx, myy
			0.1, 				! gradientInnerRadius
			get (NSP)
	endif
next _iComp
!!---------------------------end https://gdl.graphisoft.com/gdl_other_docs/profile-modelling-in-2d-with-attributes -------------
]]>
</Script_2D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_1D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
unID=1
EPS = 0.0001


!!---------------------------start https://gdl.graphisoft.com/gdl_other_docs/get-the-basic-properties-and-geometry -------------
COMPTYPE_CORE = 0
COMPTYPE_FINISH = 1
COMPTYPE_OTHER = 2
if GLOB_SCRIPT_TYPE = 2 or GLOB_SCRIPT_TYPE = 3 then
	! --- Get the number of components and their types ---
	_nComponents = 0
	dim _componentTypes[]
	n = REQUEST ("Profile_components", myProfileIdx, _nComponents, _componentTypes)
	if n then
		dim _bShowPart[]
		_needRequestDetails = 0
		! --- Check the current partial structure display settings and the component types ---
		! ---- is there any part to be drawn by the script?
		! ---- GLOB_STRUCTURE_DISPLAY: 0 – entire structure, 1 – core only, 2 – without finishes
		for _i = 1 to _nComponents
			_bShowPart[_i] = 1    
			  if GLOB_STRUCTURE_DISPLAY = 1 AND _componentTypes[_i] <> COMPTYPE_CORE then _bShowPart[_i] = 0
			  if GLOB_STRUCTURE_DISPLAY = 2 AND _componentTypes[_i] = COMPTYPE_FINISH then _bShowPart[_i] = 0
			  if _bShowPart[_i] then _needRequestDetails = 1
		next _i
		if _needRequestDetails then
			! --- Get the profile components geometry ---
			dim _profileGeometryRawData[]
			n = REQUEST ("Profile_default_geometry", myProfileIdx, _profileGeometryRawData)	 
			! --- calculate indices to split up the original data into components ---
			dim _idxStartPoints[]
			dim _idxEndPoints[]
			_idxStartPoints[1] = _nComponents + 1
			_numPropertybyNodes = 5
			for _i = 2 to _nComponents
				_numCompNodes = _profileGeometryRawData[_i - 1]
				_idxStartPoints[_i] = _idxStartPoints[_i - 1] + _numCompNodes * _numPropertybyNodes
				_idxEndPoints[_i-1] = _idxStartPoints[_i] - 1
			next _i
			_idxEndPoints[_nComponents] = vardim1(_profileGeometryRawData)
		endif
	endif
endif
!!---------------------------end https://gdl.graphisoft.com/gdl_other_docs/get-the-basic-properties-and-geometry -------------


!!! Собственно изменение размеров
!!! Будем искать по типу линии ребро, которое будем удлинять
!!! Затем подменим координаты в profileGeometryRawData для использования в 2д и 3д скриптах
if _nComponents<EPS then goto "m_end"
for _iComp = 1 to _nComponents
	if _bShowPart[_iComp] then
		dim _currLineTypes[]
		n = REQUEST{4} ("Profile_component_info", myProfileIdx, _iComp, "gs_profile_comp_linetypes", _currLineTypes)
		!!! Ищем линию, назначенную перемещаемому ребру
		_penLtIdx = 1
		for _i = _idxStartPoints[_iComp] to _idxEndPoints[_iComp] step 5
			if _currLineTypes[_penLtIdx] = stretch_line then
				!! Нашли) Теперь получим индекс следующей точки (Кноца грани)
				_i_end = _i+5
				if vardim1(_profileGeometryRawData)<(_i+6) then
					_i_end = _idxStartPoints[_iComp]
				else
					_i_end = _i+5
				endif
				!! Теперь можем выбирать - или отредактировать всю линию, или только одну точку
				hotspot2 _profileGeometryRawData[_i], _profileGeometryRawData[_i + 1]
				hotspot2 _profileGeometryRawData[_i_end], _profileGeometryRawData[_i_end + 1]

				!! ------------ Пример для ребра - перемещение по XY ----------------------------
				!! Стартовая точка - центр грани
				xs = (_profileGeometryRawData[_i] + _profileGeometryRawData[_i_end]) / 2
				ys = (_profileGeometryRawData[_i+1] + _profileGeometryRawData[_i_end+1]) / 2

				HOTSPOT2 xs+stretch_edge_x, ys, unID, stretch_edge_y, 1+128: unID=unID+1
				HOTSPOT2 xs+stretch_edge_x, ys+stretch_edge_y, unID, stretch_edge_y, 2: unID=unID+1
				HOTSPOT2 xs+stretch_edge_x, ys-1, unID, stretch_edge_y, 3: unID=unID+1
			
				HOTSPOT2 xs, ys+stretch_edge_y, unID, stretch_edge_x, 1+128: unID=unID+1
				HOTSPOT2 xs+stretch_edge_x, ys+stretch_edge_y, unID, stretch_edge_x, 2: unID=unID+1
				HOTSPOT2 xs-1, ys+stretch_edge_y, unID, stretch_edge_x, 3: unID=unID+1

				!! Прибавим смещение stretch_edge_x и stretch_edge_y к координатам ребра
				_profileGeometryRawData[_i] = _profileGeometryRawData[_i] + stretch_edge_x
				_profileGeometryRawData[_i_end] = _profileGeometryRawData[_i_end] + stretch_edge_x

				_profileGeometryRawData[_i+1] = _profileGeometryRawData[_i+1] + stretch_edge_y
				_profileGeometryRawData[_i_end+1] = _profileGeometryRawData[_i_end+1] + stretch_edge_y

			endif
			_penLtIdx = _penLtIdx + 1
		next _i
	endif
next _iComp

"m_end":

]]>
</Script_1D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_PR SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_PR>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_UI SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_UI>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_VL SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_VL>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_FWM SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_FWM>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_BWM SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_BWM>

<ParamSection SectVersion="27" SectionFlags="0" SubIdent="0">
	<ParamSectHeader>
		<AutoHotspots>false</AutoHotspots>
		<StatBits>
			<STBit_FixSize/>
		</StatBits>
		<WDLeftFrame>0</WDLeftFrame>
		<WDRightFrame>0</WDRightFrame>
		<WDTopFrame>0</WDTopFrame>
		<WDBotFrame>0</WDBotFrame>
		<LayFlags>65535</LayFlags>
		<WDMirrorThickness>0</WDMirrorThickness>
		<WDWallInset>0</WDWallInset>
	</ParamSectHeader>
	<Parameters>
		<Length Name="A">
			<Description><![CDATA["Размер 1"]]></Description>
			<Fix/>
			<Value>1</Value>
		</Length>
		<Length Name="B">
			<Description><![CDATA["Размер 2"]]></Description>
			<Fix/>
			<Value>1</Value>
		</Length>
		<Length Name="ZZYZX">
			<Description><![CDATA["Высота"]]></Description>
			<Fix/>
			<Value>1</Value>
		</Length>
		<Boolean Name="AC_show2DHotspotsIn3D">
			<Description><![CDATA["Показ Узловых 2D Точек в 3D"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Length Name="ac_bottomlevel">
			<Description><![CDATA["Отметка Низа"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Length>
		<Length Name="ac_toplevel">
			<Description><![CDATA["Отметка Верха"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Profile Name="myProfileIdx">
			<Description><![CDATA[""]]></Description>
			<Value>5</Value>
		</Profile>
		<LineType Name="stretch_line">
			<Description><![CDATA["Тип линии для перемещаемого ребра"]]></Description>
			<Value>21</Value>
		</LineType>
		<Length Name="stretch_edge_x">
			<Description><![CDATA[""]]></Description>
			<Value>0</Value>
		</Length>
		<Length Name="stretch_edge_y">
			<Description><![CDATA[""]]></Description>
			<Value>0</Value>
		</Length>
	</Parameters>
</ParamSection>

<Copyright SectVersion="1" SectionFlags="0" SubIdent="0">
	<Author></Author>
	<License>
		<Type>CC BY</Type>
		<Version>4.0</Version>
	</License>
</Copyright>

<Keywords SectVersion="1" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Keywords>

<Comment SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Comment>

</Symbol>
