<?xml version="1.0" encoding="UTF-8"?>
<Symbol IsArchivable="false" IsPlaceable="false" MainGUID="9FC82011-71FA-4945-9DDE-9A013B602A36" MigrationValue="Normal" Owner="1196638531" Signature="1196644685" Version="38">
<Ancestry SectVersion="1" SectionFlags="0" SubIdent="0" Template="false">
	<MainGUID>F938E33A-329D-4A36-BE3E-85E126820996</MainGUID>
	<MainGUID>103E8D2C-8230-42E1-9597-46F84CCE28C0</MainGUID>
	<MainGUID>B2970E4C-8680-4061-8670-2F4B638F3953</MainGUID>
</Ancestry>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_3D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
if show_el<1 then end
IF gs_detlevel_3D_m = 0 THEN END
_pTM = GLOB_SCALE / 1000
lmmza = 1
CALL "MEP_m_RequestSystemGlobals" PARAMETERS ALL returned_parameters gs_cont_pen, sMat, gs_InsMat
if show_axis then MEP_cline_pen = gs_cont_pen
!IF useSysMat AND MEP_StrConnectionData[1][2] <> "0" THEN
	gs_DuctMat = sMat
!	gs_InsMat = sMat
!ENDIF

RESOL res
PEN gs_cont_pen

HptsUnIDBeginForConnEnds = 30000

hceID_1 = HptsUnIDBeginForConnEnds+100
hceID_2 = HptsUnIDBeginForConnEnds+200

XFORM   MEP_Position[2][1], MEP_Position[3][1], dZx, MEP_Position[1][1],
		MEP_Position[2][2], MEP_Position[3][2], dZy, MEP_Position[1][2],
		MEP_Position[2][3], MEP_Position[3][3], dZz, MEP_Position[1][3]

duct_show = not(show_axis)
IF duct_show and not(show_axis) THEN			! -----> duct bend <----- !

	HOTSPOT PointAX, 0, 0, hceID_1
	HOTSPOT PointBX, PointBY, 0, hceID_2
	HOTSPOT PointMX, 0, 0, HptsUnIDBeginForConnEnds

	MATERIAL gs_DuctMat

	halfWidth 	= ductHalfWidthA
	halfHeight 	= ductHalfHeightA
	IF gs_detlevel_3D_m = 1 THEN connectorLengthA = 0

	IF flangeB AND connectorLengthA > 0 THEN
		ADD PointBX-(connectorLengthA-add_l)*COS(bendAngle), PointBY-(connectorLengthA-add_l)*SIN(bendAngle), PointBZ
		ROTz 90+bendAngle
		CUTPLANE 90
		DEL 2
	ENDIF

	IF flangeA AND connectorLengthA > 0 THEN
		ADDx -add_l+connectorLengthA
		ROTz -90
		CUTPLANE 90
		DEL 2
	ENDIF


	GOSUB 20

	IF ABS(shapeTypeA - 1) > EPS OR ABS(shapeTypeB - 1) > EPS THEN
		BASE
		VERT    0,    MEP_BendRadius,    0
		VERT    MEP_BendRadius,    MEP_BendRadius,    0
		VERT    0,    MEP_BendRadius+1,	0
		VERT    0,    MEP_BendRadius,    1
		COOR    4,    -1,   -2,    -3,    -4
	ELSE
		BASE
		VERT    0,    MEP_BendRadius,    0
		VERT    ductHalfWidthA,    MEP_BendRadius,    0
		VERT    0,    MEP_BendRadius+1,    0
		VERT    0,    MEP_BendRadius,    1
		COOR    3,    -1,   -2,    -3,    -4
	ENDIF
	BODY -1

	IF flangeA and gs_detlevel_3D_m = 2 THEN
		addx -add_l
		halfWidthC = connectorHalfWidthA
		halfHeightC = connectorHalfHeightA
		IF connectorLengthA > 0 THEN CUTEND
		GOSUB 30
		del 1
	ENDIF

	IF flangeB and gs_detlevel_3D_m = 2 THEN
		halfWidthC = connectorHalfWidthB
		halfHeightC = connectorHalfHeightB
		IF connectorLengthA > 0 THEN CUTEND
		ADD PointBX, PointBY, PointBZ
		ROTz 180+bendAngle
		GOSUB 30
		DEL 2
	ENDIF
ENDIF

IF MEP_InsShow and show_isol and not(show_axis) THEN			! -----> insulation <----- !
	MATERIAL gs_InsMat
	pen MEP_cline_pen
	halfWidth 	= ductHalfWidthA+MEP_InsThickness
	halfHeight 	= ductHalfHeightA+MEP_InsThickness

	heelRadius = heelRadius_wIns
	heelSegmentLength = heelSegmentLength_wIns

	throatRadius = throatRadius_wIns
	throatSegmentLength = throatSegmentLength_wIns

	GOSUB 20

	IF ABS(shapeTypeA - 1) > EPS OR ABS(shapeTypeB - 1) > EPS THEN
		BASE
		VERT    0,    MEP_BendRadius,    0
		VERT    MEP_BendRadius,    MEP_BendRadius,    0
		VERT    0,    MEP_BendRadius+1,	0
		VERT    0,    MEP_BendRadius,    1
		COOR    4,    -1,   -2,    -3,    -4
	ELSE
		BASE
		VERT    0,    MEP_BendRadius,    0
		VERT    halfWidth,    MEP_BendRadius,    0
		VERT    0,    MEP_BendRadius+1,    0
		VERT    0,    MEP_BendRadius,    1
		COOR    3,    -1,   -2,    -3,    -4
	ENDIF
	BODY -1
ENDIF


IF GLOB_CONTEXT < 41 OR GLOB_CONTEXT > 49 THEN

	IF (MEP_cline_show and show_axis_and) or show_axis THEN		! -----> center line <----- !

		IF add_l THEN
			LIN_ 0, 0, 0, -add_l, 0, 0
			xx = MEP_BendRadius*SIN(bendAngle)
			yy = MEP_BendRadius-MEP_BendRadius*COS(bendAngle)
			LIN_ xx, yy, 0, xx+(ductStraightLengthB+add_l)*COS(bendAngle), yy+(ductStraightLengthB+add_l)*SIN(bendAngle), 0
		ENDIF

!		lin_ -add_l,lmmza*_pTM,0,-add_l,-lmmza*_pTM,0
		ADD PointBX, PointBY, PointBZ
		ROTz 180+bendAngle
!		lin_ 0,lmmza*_pTM,0,0,-lmmza*_pTM,0
		del 2

		IF MEP_ThroatSegments = 1 AND MEP_HeelSegments = 1 OR MEP_HeelSegments = 1 THEN
			RESOL INT(360/(bendAngle/bendRes))
			MODEL WIRE
			MULy -1
			ADD ductStraightLengthA, -MEP_BendRadius, 0
				ARC MEP_BendRadius, 90-bendAngle, 90
			DEL 2
			MODEL SOLID

			IF ductStraightLengthA THEN
				LIN_ 0, 0, 0, ductStraightLengthA, 0, 0
			ENDIF

			IF ductStraightLengthB THEN
				xx = MEP_BendRadius*SIN(bendAngle)
				yy = MEP_BendRadius-MEP_BendRadius*COS(bendAngle)
				LIN_ xx, yy, 0, xx+ductStraightLengthB*COS(bendAngle), yy+ductStraightLengthB*SIN(bendAngle), 0
			ENDIF
		ENDIF

		IF MEP_HeelSegments = 2 THEN
			LIN_ 0, 0, 0, PointMX, PointMY, PointMZ
			LIN_ PointMX, PointMY, PointMZ, PointBX, PointBY, PointBZ
		ENDIF

		IF MEP_HeelSegments > 2 THEN
				segments = MEP_HeelSegments
				Len = MEP_BendRadius*TAN(bendAngle/2)
				rr = Len/(TAN(bendAngle/2)+2*SIN(bendAngle/(2*(segments-2))))
				segmentLen = 2*rr*SIN(bendAngle/(2*(segments-2)))
			MODEL WIRE
				PUT 0, 0, 1
				PUT ductStraightLengthA+segmentLen, 0, 1
				alpha = 0
				FOR i = 1 TO segments-2
					alpha = alpha + bendAngle/(segments-2)
					PUT ductStraightLengthA+segmentLen+rr*SIN(alpha), rr-rr*COS(alpha), 1
				NEXT i
				PUT ductStraightLengthA+segmentLen+rr*SIN(alpha)+(segmentLen+ductStraightLengthB)*COS(bendAngle), rr-rr*COS(alpha)+(segmentLen+ductStraightLengthB)*SIN(bendAngle), 0
			POLY_ NSP/3,

				GET(NSP)

			MODEL SOLID
		ENDIF
	ENDIF
ENDIF

DEL 1

END

10:
	IF ABS(shapeTypeA - 1) < EPS THEN
		IF GLOB_CONTEXT > 40 AND GLOB_CONTEXT < 50 THEN status = status + 3

			if not(show_axis) then TUBE 4, NSP/4, status,
				ww, hh, 1,
				-ww, hh, 1,
				-ww, -hh, 1,
				ww, -hh, 1,

				GET(NSP)
	ENDIF
	IF ABS(shapeTypeA - 2) < EPS THEN
		IF GLOB_CONTEXT > 40 AND GLOB_CONTEXT < 50 THEN status = status + 3

		if not(show_axis) then TUBE 2, NSP/4, status,
			0, 0, 901,
			rr, 360, 4001,

			GET(NSP)
	ENDIF
	IF ABS(shapeTypeA - 3) < EPS THEN
		IF GLOB_CONTEXT > 40 AND GLOB_CONTEXT < 50 THEN status = status + 3

		IF ABS(ww - hh) < EPS THEN
			if not(show_axis) then TUBE 2, NSP/4, status,
				0, 0, 901,
				ww, 360, 4001,

				GET(NSP)
		ENDIF

		IF ww > hh THEN
			if not(show_axis) then TUBE 5, NSP/4, status,
				ww-hh, hh, 1,
				-ww+hh, hh, 1,
				-ww+hh, -hh, 1001,
				ww-hh, -hh, 1,
				ww-hh, hh, 1001,

				GET(NSP)
		ENDIF

		IF ww < hh THEN
			if not(show_axis) then TUBE 5, NSP/4, status,
				ww, hh-ww, 1,
				ww, -hh+ww, 1,
				-ww, -hh+ww, 1001,
				-ww, hh-ww, 1,
				ww, hh-ww, 1001,

				GET(NSP)
		ENDIF
	ENDIF
RETURN

20:
	IF MEP_BendAngle < 0.02 THEN
		PUT -1, 0, 0, 0
		PUT 0, 0, 0, 0
		PUT EPS, 0, 0, 0
		PUT EPS+1, 0, 0, 0

		rr = halfWidth
		ww = halfWidth
		hh = halfHeight
		status = 16+32
		GOSUB 10
	ELSE
		IF ABS(shapeTypeA - 1) < EPS  THEN
			ADD ductStraightLengthA, 0, -halfHeight
			IF ABS(MEP_BendRadius - ductHalfWidth) < EPS THEN MEP_BendRadius = MEP_BendRadius + EPS
			IF GLOB_CONTEXT > 40 AND GLOB_CONTEXT < 50 THEN
				alpha = 0
				PUT -add_l, -halfWidth, 15
				PUT -ductStraightLengthA, -halfWidth, 15
				PUT 0, -halfWidth, 15
				IF MEP_HeelSegments > 1 THEN
					PUT heelSegmentLength, -halfWidth, 15
					FOR i = 1 TO (MEP_HeelSegments-2)
						 alpha = alpha + bendAngle/(MEP_HeelSegments-2)
						PUT heelSegmentLength+heelRadius*SIN(alpha), -halfWidth+heelRadius-heelRadius*COS(alpha), 15
					NEXT i
					PUT (MEP_BendRadius+halfWidth)*SIN(bendAngle), MEP_BendRadius-(MEP_BendRadius+halfWidth)*COS(bendAngle), 15
				ELSE
					PUT 0, MEP_BendRadius, 915
					PUT (MEP_BendRadius+halfWidth)*SIN(bendAngle), MEP_BendRadius-(MEP_BendRadius+halfWidth)*COS(bendAngle), 3015
				ENDIF
				PUT (MEP_BendRadius+halfWidth)*SIN(bendAngle)+(ductStraightLengthB+add_l)*COS(bendAngle), MEP_BendRadius-(MEP_BendRadius+halfWidth)*COS(bendAngle)+(ductStraightLengthB+add_l)*SIN(bendAngle), 15

				PUT (MEP_BendRadius-halfWidth)*SIN(bendAngle)+(ductStraightLengthB+add_l)*COS(bendAngle), MEP_BendRadius-(MEP_BendRadius-halfWidth)*COS(bendAngle)+(ductStraightLengthB+add_l)*SIN(bendAngle), 15
				PUT (MEP_BendRadius-halfWidth)*SIN(bendAngle), MEP_BendRadius-(MEP_BendRadius-halfWidth)*COS(bendAngle), 15
				IF MEP_ThroatSegments > 1 THEN
					alpha = bendAngle
					PUT throatSegmentLength+throatRadius*SIN(alpha), halfWidth+throatRadius-throatRadius*COS(alpha), 15
					FOR i = 1 TO (MEP_ThroatSegments-2)
						 alpha = alpha - bendAngle/(MEP_ThroatSegments-2)
						PUT throatSegmentLength+throatRadius*SIN(alpha), halfWidth+throatRadius-throatRadius*COS(alpha), 15
					NEXT i
					PUT 0, halfWidth, 15
				ELSE
					PUT 0, MEP_BendRadius, 915
					PUT 0, halfWidth, 3015
				ENDIF
				PUT -ductStraightLengthA+0.001, halfWidth, 15
				PUT -add_l+0.001, -halfWidth, 15
			ELSE
				alpha = 0
				PUT -add_l, -halfWidth, 15
				PUT -ductStraightLengthA, -halfWidth, 15
				PUT 0, -halfWidth, 15
				IF MEP_HeelSegments > 1 THEN
					PUT heelSegmentLength-1, -halfWidth, 15
					FOR i = 1 TO (MEP_HeelSegments-2)
						 alpha = alpha + bendAngle/(MEP_HeelSegments-2)
						PUT heelSegmentLength+heelRadius*SIN(alpha), -halfWidth+heelRadius-heelRadius*COS(alpha), 15
					NEXT i
					PUT (MEP_BendRadius+halfWidth)*SIN(bendAngle), MEP_BendRadius-(MEP_BendRadius+halfWidth)*COS(bendAngle), 71+8*NOT(ABS(ductStraightLengthB+add_l) < EPS)
				ELSE
					PUT 0, MEP_BendRadius, 979
					PUT (MEP_BendRadius+halfWidth)*SIN(bendAngle), MEP_BendRadius-(MEP_BendRadius+halfWidth)*COS(bendAngle), 3071+8*NOT(ABS(ductStraightLengthB+add_l) < EPS)
				ENDIF
				PUT (MEP_BendRadius+halfWidth)*SIN(bendAngle)+(ductStraightLengthB+add_l)*COS(bendAngle), MEP_BendRadius-(MEP_BendRadius+halfWidth)*COS(bendAngle)+(ductStraightLengthB+add_l)*SIN(bendAngle), 71

				PUT (MEP_BendRadius-halfWidth)*SIN(bendAngle)+(ductStraightLengthB+add_l)*COS(bendAngle), MEP_BendRadius-(MEP_BendRadius-halfWidth)*COS(bendAngle)+(ductStraightLengthB+add_l)*SIN(bendAngle), 79
				PUT (MEP_BendRadius-halfWidth)*SIN(bendAngle), MEP_BendRadius-(MEP_BendRadius-halfWidth)*COS(bendAngle), 79
				IF MEP_ThroatSegments > 1 THEN
					alpha = bendAngle
					PUT throatSegmentLength+throatRadius*SIN(alpha), halfWidth+throatRadius-throatRadius*COS(alpha), 15
					FOR i = 1 TO (MEP_ThroatSegments-2)
						 alpha = alpha - bendAngle/(MEP_ThroatSegments-2)
						PUT throatSegmentLength+throatRadius*SIN(alpha), halfWidth+throatRadius-throatRadius*COS(alpha), 15
					NEXT i
					PUT 0, halfWidth, 71+8*NOT(ABS(ductStraightLengthA+add_l) < EPS)
				ELSE
					PUT 0, MEP_BendRadius, 979
					PUT 0, halfWidth, 3071+8*NOT(ABS(ductStraightLengthA) < EPS)
				ENDIF
				PUT 0, halfWidth, 15
				PUT -add_l, halfWidth, 15
			ENDIF
			PRISM_ NSP/3, halfHeight*2,
				GET (NSP)

			DEL 1
		ELSE
			IF MEP_ThroatSegments = 1 AND MEP_HeelSegments = 1 THEN
				ADDx ductStraightLengthA
				 alpha_i = bendAngle/bendRes
				PUT -MEP_BendRadius*SIN(alpha_i), MEP_BendRadius-MEP_BendRadius*COS(alpha_i), 0, 0
				FOR i = 1 TO bendRes+1
					PUT MEP_BendRadius*SIN(alpha_i*(i-1)), MEP_BendRadius-MEP_BendRadius*COS(alpha_i*(i-1)), 0, 0
				NEXT i
				PUT MEP_BendRadius*SIN(alpha_i*(bendRes+1)), MEP_BendRadius-MEP_BendRadius*COS(alpha_i*(bendRes+1)), 0, 0

				IF ABS(shapeTypeA - 2) < EPS THEN
					rr = halfWidth*COS(alpha_i/2)
					MULz halfWidth/rr
				ENDIF
				IF ABS(shapeTypeA - 3) < EPS THEN
					ww = halfWidth*COS(alpha_i/2)
					hh = halfHeight*COS(alpha_i/2)
					MULz halfHeight/hh
				ENDIF

				status = 16*NOT(ductStraightLengthA and add_l)+32*NOT(ductStraightLengthB and add_l)+64*(MEP_HeelSegments > 1)
				GOSUB 10

				DEL 2
			ENDIF

			IF MEP_ThroatSegments = 2 AND MEP_HeelSegments = 2 THEN
				ADDx ductStraightLengthA

				dist = MEP_BendRadius*(TAN(bendAngle/2))
				PUT -1, 0, 0, 0
				PUT 0, 0, 0, 0
				PUT dist, 0, 0, 0
				PUT dist*(1+COS(bendAngle)), dist*SIN(bendAngle), 0, 0
				PUT dist*(1+COS(bendAngle))+COS(bendAngle), (dist+1)*SIN(bendAngle), 0, 0

				rr = halfWidth
				ww = halfWidth
				hh = halfHeight

				status = 16*NOT(ductStraightLengthA and add_l)+32*NOT(ductStraightLengthB and add_l)+64*(MEP_HeelSegments > 1)
				GOSUB 10

				DEL 1
			ENDIF

			IF MEP_ThroatSegments > 2 AND MEP_HeelSegments > 2 AND ABS(MEP_ThroatSegments - MEP_HeelSegments) < EPS THEN
				ADDx ductStraightLengthA
				segments = MAX(MEP_ThroatSegments, MEP_HeelSegments)
				Len = MEP_BendRadius*TAN(bendAngle/2)
				rr = Len/(TAN(bendAngle/2)+2*SIN(bendAngle/(2*(segments-2))))
				segmentLen = 2*rr*SIN(bendAngle/(2*(segments-2)))
				PUT -1, 0, 0, 0
				PUT 0, 0, 0, 0
				PUT segmentLen, 0, 0, 0
				alpha = 0
				FOR i = 1 TO segments-2
					alpha = alpha + bendAngle/(segments-2)
					PUT segmentLen+rr*SIN(alpha), rr-rr*COS(alpha), 0, 0
				NEXT i
				PUT segmentLen+rr*SIN(alpha)+segmentLen*COS(bendAngle), rr-rr*COS(alpha)+segmentLen*SIN(bendAngle), 0, 0
				PUT segmentLen+rr*SIN(alpha)+(segmentLen+1)*COS(bendAngle), rr-rr*COS(alpha)+(segmentLen+1)*SIN(bendAngle), 0, 0

				rr = halfWidth
				ww = halfWidth
				hh = halfHeight
				status = 16*NOT(ductStraightLengthA)+32*NOT(ductStraightLengthB)+64*(MEP_HeelSegments > 1)
				GOSUB 10

				DEL 1
			ENDIF
			IF ductStraightLengthA or add_l THEN
				ADDx -add_l
				PUT -1, 0, 0, 0
				PUT 0, 0, 0, 0
				PUT ductStraightLengthA+add_l, 0, 0, 0
				PUT ductStraightLengthA+1, 0, 0, 0
				rr = halfWidth
				ww = halfWidth
				hh = halfHeight
				status = 16
				GOSUB 10
				DEL 1
			ENDIF
			IF ductStraightLengthB or add_l  THEN
				PUT MEP_BendRadius*SIN(bendAngle)-COS(bendAngle), MEP_BendRadius-MEP_BendRadius*COS(bendAngle)-SIN(bendAngle), 0, 0
				PUT MEP_BendRadius*SIN(bendAngle), MEP_BendRadius-MEP_BendRadius*COS(bendAngle), 0, 0
				PUT MEP_BendRadius*SIN(bendAngle)+ductStraightLengthB*COS(bendAngle), MEP_BendRadius-MEP_BendRadius*COS(bendAngle)+(ductStraightLengthB+add_l)*SIN(bendAngle), 0, 0
				PUT MEP_BendRadius*SIN(bendAngle)+(ductStraightLengthB+1)*COS(bendAngle), MEP_BendRadius-MEP_BendRadius*COS(bendAngle)+(ductStraightLengthB+1+add_l)*SIN(bendAngle), 0, 0

				rr = halfWidth
				ww = halfWidth
				hh = halfHeight
				status = 32
				GOSUB 10
			ENDIF
		ENDIF
	ENDIF
RETURN

30:
	ROTy 90
	IF ABS(shapeTypeA - 1) < EPS THEN			! --- ShapeType = Rectangular --- !
		PRISM_ 10, connectorLengthA,
			halfHeightC, halfWidthC, 15,
			-halfHeightC, halfWidthC, 15,
			-halfHeightC, -halfWidthC, 15,
			halfHeightC, -halfWidthC, 15,
			halfHeightC, halfWidthC, -1,
			halfHeight, halfWidth, 15,
			-halfHeight, halfWidth, 15,
			-halfHeight, -halfWidth, 15,
			halfHeight, -halfWidth, 15,
			halfHeight, halfWidth, -1

	ENDIF

	IF ABS(shapeTypeA - 2) < EPS THEN			! --- ShapeType = Circular --- !
		PRISM_ 4, connectorLengthA,
			0, 0, 979,
			halfWidthC, 360, 4079,
			0, 0, 979,
			halfWidth, 360, 4079
	ENDIF

	IF ABS(shapeTypeA - 3) < EPS THEN			! --- ShapeType = Oval --- !
		IF ABS(halfWidth-halfHeight) < EPS THEN
			PRISM_ 4, connectorLengthA,
				0, 0, 979,
				halfWidthC, 360, 4079,
				0, 0, 979,
				halfWidth, 360, 4079
		ENDIF
		IF NOT(ABS(halfWidth-halfHeight) < EPS) AND halfWidth > halfHeight THEN
			rrC = halfHeightC
			rr = halfHeight
			PRISM_ 12, connectorLengthA,
				halfHeightC, -halfWidthC+rrC, 79,
				halfHeightC, halfWidthC-rrC, 79,
				-halfHeightC, halfWidthC-rrC, 1079,
				-halfHeightC, -halfWidthC+rrC, 79,
				halfHeightC, -halfWidthC+rrC, 1079,
				halfHeightC, -halfWidthC+rrC, -1,
				halfHeight, -halfWidth+rr, 79,
				halfHeight, halfWidth-rr, 79,
				-halfHeight, halfWidth-rr, 1079,
				-halfHeight, -halfWidth+rr, 79,
				halfHeight, -halfWidth+rr, 1079,
				halfHeight, -halfWidth+rr, -1
		ENDIF
		IF NOT(ABS(halfWidth-halfHeight) < EPS) AND halfWidth < halfHeight THEN
			rrC = halfWidthC
			rr = halfWidth
			PRISM_ 12, connectorLengthA,
				halfHeightC-rrC, halfWidthC, 79,
				-halfHeightC+rrC, halfWidthC, 79,
				-halfHeightC+rrC, -halfWidthC, 1079,
				halfHeightC-rrC, -halfWidthC, 79,
				halfHeightC-rrC, halfWidthC, 1079,
				halfHeightC-rrC, halfWidthC, -1,
				halfHeight-rr, halfWidth, 79,
				-halfHeight+rr, halfWidth, 79,
				-halfHeight+rr, -halfWidth, 1079,
				halfHeight-rr, -halfWidth, 79,
				halfHeight-rr, halfWidth, 1079,
				halfHeight-rr, halfWidth, -1
		ENDIF
	ENDIF
	DEL 1
	BODY -1
RETURN
]]>
</Script_3D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_2D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
if show_el<1 then end
CALL "MEP_m_RequestSystemGlobals" PARAMETERS ALL returned_parameters gs_cont_pen, gs_fill_type, gs_fill_pen, gs_back_pen, MEP_cline_type, MEP_cline_pen
if show_axis then MEP_cline_pen = gs_cont_pen
_pTM = GLOB_SCALE / 1000
lmmza = 1
PEN gs_cont_pen
IF gs_fill_pen THEN SET FILL gs_fill_type

HptsUnIDBeginForConnEnds = 30000

hceID_1 = HptsUnIDBeginForConnEnds+100
hceID_2 = HptsUnIDBeginForConnEnds+200

HOTSPOT2 MEP_Position[1][1]+outCoords[1][1], MEP_Position[1][2]+outCoords[1][2], hceID_1
HOTSPOT2 MEP_Position[1][1]+outCoords[2][1], MEP_Position[1][2]+outCoords[2][2], HptsUnIDBeginForConnEnds
HOTSPOT2 MEP_Position[1][1]+outCoords[3][1], MEP_Position[1][2]+outCoords[3][2], hceID_2

IF ((MEP_cline_show and show_axis_and) or show_axis) AND MEP_BendAngle > 0.001 THEN		! -----> center line <----- !
	PEN MEP_cline_pen
	SET LINE_TYPE MEP_cline_type
	ADD2 MEP_Position[1][1], MEP_Position[1][2]
	IF MEP_ThroatSegments = 1 AND MEP_HeelSegments = 1 OR MEP_HeelSegments = 1 THEN
		dX = MEP_Position[2][1]
		dY = MEP_Position[2][2]
		length = SQR((dX)^2+(dY)^2)
		IF length THEN
			arc_val = dX/length
			IF arc_val > 1-EPS THEN arc_val = 1
			IF arc_val < -1+EPS THEN arc_val = -1
			alpha = ACS(arc_val)
		ELSE
			dX = outCoords[coordinates][1]
			dY = outCoords[coordinates][2]

			length = SQR((dX)^2+(dY)^2)

			arc_val = dX/length
			IF arc_val > 1-EPS THEN arc_val = 1
			IF arc_val < -1+EPS THEN arc_val = -1
			alpha = ACS(arc_val)
		ENDIF

		IF SGN(dY) = -1 THEN alpha = 360-alpha

		alphaS = alpha
		
		rot2 alpha
		add2 -add_l,0
!		line2 0,lmmza*_pTM,0,-lmmza*_pTM
		del 2

		dX = outCoords[coordinates][1]
		dY = outCoords[coordinates][2]

		length = SQR((dX)^2+(dY)^2)
		IF length THEN
			arc_val = dX/length
			IF arc_val > 1-EPS THEN arc_val = 1
			IF arc_val < -1+EPS THEN arc_val = -1
			alpha = ACS(arc_val)
		ELSE
			dX = MEP_Position[2][1]
			dY = MEP_Position[2][2]

			length = SQR((dX)^2+(dY)^2)

			arc_val = dX/length
			IF arc_val > 1-EPS THEN arc_val = 1
			IF arc_val < -1+EPS THEN arc_val = -1
			alpha = ACS(arc_val)
		ENDIF

		IF SGN(dY) = -1 THEN alpha = 360-alpha

		alphaE = alpha
		alpha_i = (alphaE-alphaS)/(pnum-1)
		alpha = alphaS

		add2 outCoords[3+pnum][1], outCoords[3+pnum][2]
		rot2 alphaE
		add2 add_l,0
!		line2 0,lmmza*_pTM,0,-lmmza*_pTM
		del 3

		if add_l then PUT outCoords[1][1], outCoords[1][2], alpha

		FOR i = 1 TO pnum
			PUT outCoords[3+i][1], outCoords[3+i][2], alpha
			IF i < pnum THEN alpha = alpha + alpha_i
		NEXT i

		if add_l then PUT outCoords[3][1], outCoords[3][2], alpha

		SPLINE2 NSP/3, 2,
				GET(NSP)
	ENDIF

	IF MEP_HeelSegments = 2 THEN
		LINE2 outCoords[1][1], outCoords[1][2], outCoords[2][1], outCoords[2][2]
		LINE2 outCoords[2][1], outCoords[2][2], outCoords[3][1], outCoords[3][2]
	ENDIF

	IF MEP_HeelSegments > 2 THEN

		PUT outCoords[1][1], outCoords[1][2], 1
		FOR i = 1 TO pnum
			PUT outCoords[3+i][1], outCoords[3+i][2], 1
			IF i < pnum THEN alpha = alpha + alpha_i
		NEXT i
		PUT outCoords[3][1], outCoords[3][2], 1

		POLY2_ NSP/3, 1,
				GET(NSP)

	ENDIF
	DEL 1
	PEN gs_cont_pen
	SET LINE_TYPE SYMB_LINETYPE
ENDIF

IF ABS(MEP_Position[2][3]) < EPS AND ABS(MEP_Position[3][3]) < EPS AND ABS(ductHalfWidthA-ductHalfWidthB) < EPS THEN

	 aa = MEP_Position[2][1]
	 bb = MEP_Position[2][2]

	 arCosVal = aa/1
	IF ABS(arCosVal) > 1 AND SGN(arCosVal) = -1 THEN arCosVal = -1
	IF ABS(arCosVal) > 1 AND SGN(arCosVal) = 1 THEN arCosVal = 1
	alpha = ACS(arCosVal)
	IF SGN(bb) = -1 THEN alpha = 360-alpha

	GOSUB 100 						! --- analizing of arc-direction

	ADD2 MEP_Position[1][1], MEP_Position[1][2]
	ROT2 alpha
	MUL2 1, SGN(outCoords[1][2])

	connectorLength = connectorLengthA
	halfWidth = ductHalfWidthA
	halfWidthX = halfWidth*SIN(bendAngle)
	halfWidthY = halfWidth*COS(bendAngle)

									! -----> duct bend <----- !

	IF ABS(shapeTypeA - 1) < EPS THEN GOSUB 10
	IF ABS(shapeTypeA - 2) < EPS AND MEP_HeelSegments < 3 AND MEP_ThroatSegments < 3 AND MEP_ThroatSegments = MEP_HeelSegments THEN GOSUB 10
	IF ABS(shapeTypeA - 3) < EPS AND MEP_HeelSegments < 3 AND MEP_ThroatSegments < 3 AND MEP_ThroatSegments = MEP_HeelSegments THEN GOSUB 10
	IF ABS(shapeTypeA - 2) < EPS AND MEP_HeelSegments > 2 AND MEP_ThroatSegments > 2 AND MEP_ThroatSegments = MEP_HeelSegments THEN GOSUB 20
	IF ABS(shapeTypeA - 3) < EPS AND MEP_HeelSegments > 2 AND MEP_ThroatSegments > 2 AND MEP_ThroatSegments = MEP_HeelSegments THEN GOSUB 20

	IF pp and not(show_axis) THEN
		ADD2 ductStraightLengthA, 0
		POLY2_B NSP/3, 1+2+4+64, gs_fill_pen, gs_back_pen,

			GET (NSP)
		DEL 1
	ENDIF

	IF flangeA and not(show_axis) and gs_detlevel_2D_m = 2  THEN
		add2 -add_l,0
		halfWidthC = connectorHalfWidthA
		GOSUB 30
		del 1
	ENDIF

	IF flangeB and not(show_axis) and gs_detlevel_2D_m = 2  THEN
		ADD2 PointBX, PointBY
		ROT2 180+bendAngle
		halfWidthC = connectorHalfWidthB
		GOSUB 30
		DEL 2
	ENDIF

	IF MEP_InsShow and show_isol and not(show_axis) THEN			! -----> insulation <----- !

		halfWidth = ductHalfWidthA+MEP_InsThickness
		halfWidthX = halfWidth*SIN(bendAngle)
		halfWidthY = halfWidth*COS(bendAngle)

		heelRadius = heelRadius_wIns
		heelSegmentLength = heelSegmentLength_wIns

		throatRadius = throatRadius_wIns
		throatSegmentLength = throatSegmentLength_wIns

		IF ABS(shapeTypeA - 1) < EPS THEN GOSUB 10
		IF ABS(shapeTypeA - 2) < EPS AND MEP_HeelSegments < 3 AND MEP_ThroatSegments < 3 AND MEP_ThroatSegments = MEP_HeelSegments THEN GOSUB 10
		IF ABS(shapeTypeA - 3) < EPS AND MEP_HeelSegments < 3 AND MEP_ThroatSegments < 3 AND MEP_ThroatSegments = MEP_HeelSegments THEN GOSUB 10
		IF ABS(shapeTypeA - 2) < EPS AND MEP_HeelSegments > 2 AND MEP_ThroatSegments > 2 AND MEP_ThroatSegments = MEP_HeelSegments THEN GOSUB 20
		IF ABS(shapeTypeA - 3) < EPS AND MEP_HeelSegments > 2 AND MEP_ThroatSegments > 2 AND MEP_ThroatSegments = MEP_HeelSegments THEN GOSUB 20

		IF pp THEN
			ADD2 ductStraightLengthA, 0
			POLY2_ NSP/3, 1,

				GET (NSP)
			DEL 1
		ENDIF
	ENDIF

	IF MEP_Vanes THEN			! -----> Vanes <----- !
		IF MEP_HeelSegments < 2 AND MEP_ThroatSegments < 2 THEN
			MUL2 1, -1
			dist = ductInnerWidthA/(MEP_VanesNum+1)
			FOR i = 1 TO MEP_VanesNum
				ARC2 ductStraightLengthA, -MEP_BendRadius, MEP_BendRadius-ductInnerWidthA/2+dist*i, 90-MEP_BendAngle, 90
			NEXT i
			DEL 1
		ENDIF
		IF MEP_HeelSegments = 2 AND MEP_ThroatSegments = 2 THEN
			xx = 0
			num = MEP_VanesNum+1
			dist = (ductInnerWidthA/COS(MEP_BendAngle/2))/num
			ADD2 ductStraightLengthA+(MEP_BendRadius-ductHalfWidthA)*TAN(MEP_BendAngle/2), ductHalfWidthA
			ROT2 -90+MEP_BendAngle/2
			FOR jj = 1 TO num-1
				xx = xx+dist
				ADD2 xx - ductInnerWidthA/8, 0
				ROT2 -90+MEP_BendAngle/2
				ARC2 0, 0, ductInnerWidthA/8, 90-MEP_BendAngle, 90
				DEL 2
			NEXT jj
			DEL 2
		ENDIF
	ENDIF

	DEL 3
ELSE
	SET FILL gs_fill_type
	PEN gs_cont_pen
	IF gs_fill_pen THEN PEN gs_fill_pen
	if not(show_axis) then PROJECT2{3} 3, 270, 3+32, 4, gs_back_pen, 0, 0, 0, PARAMETERS duct_show = 1, MEP_InsShow = 0, MEP_cline_show_3D = 0, gs_detlevel_3D_m = gs_detlevel_2D_m
	PEN gs_cont_pen
	if not(show_axis) then PROJECT2{3} 3, 270, 2, 8, 0, 0, 0, 0, PARAMETERS duct_show = 1, MEP_InsShow = 0, MEP_cline_show_3D = 0, gs_detlevel_3D_m = gs_detlevel_2D_m
	IF MEP_InsShow and show_isol and not(show_axis) THEN PROJECT2{3} 3, 270, 2, 8, gs_back_pen, 0, 0, 0, PARAMETERS duct_show = 0, MEP_InsShow = 1, MEP_cline_show_3D = 0, gs_detlevel_3D_m = gs_detlevel_2D_m
ENDIF


END

10:
	if add_l then PUT -add_l, -halfWidth, 1
	PUT 0, -halfWidth, 1
	IF MEP_HeelSegments > 1 THEN
		PUT heelSegmentLength, -halfWidth, 1
		alpha = 0
		FOR i = 1 TO (MEP_HeelSegments-2)
			 alpha = alpha + bendAngle/(MEP_HeelSegments-2)
			PUT heelSegmentLength+heelRadius*SIN(alpha), -halfWidth+heelRadius-heelRadius*COS(alpha), 1
		NEXT i
		PUT (MEP_BendRadius+halfWidth)*SIN(bendAngle), MEP_BendRadius-(MEP_BendRadius+halfWidth)*COS(bendAngle), 1
	ELSE
		PUT 0, MEP_BendRadius, 901
		PUT (MEP_BendRadius+halfWidth)*SIN(bendAngle), MEP_BendRadius-(MEP_BendRadius+halfWidth)*COS(bendAngle), 3001
	ENDIF
	if ductStraightLengthB > EPS then
		PUT (MEP_BendRadius+halfWidth)*SIN(bendAngle)+ductStraightLengthB*COS(bendAngle), MEP_BendRadius-(MEP_BendRadius+halfWidth)*COS(bendAngle)+ductStraightLengthB*SIN(bendAngle), 1
		PUT (MEP_BendRadius-halfWidth)*SIN(bendAngle)+ductStraightLengthB*COS(bendAngle), MEP_BendRadius-(MEP_BendRadius-halfWidth)*COS(bendAngle)+ductStraightLengthB*SIN(bendAngle), 1
	endif

	if add_l>EPS and ductStraightLengthB < EPS then 
		PUT (MEP_BendRadius+halfWidth)*SIN(bendAngle)+add_l*COS(bendAngle), MEP_BendRadius-(MEP_BendRadius+halfWidth)*COS(bendAngle)+add_l*SIN(bendAngle), 1
		PUT (MEP_BendRadius-halfWidth)*SIN(bendAngle)+add_l*COS(bendAngle), MEP_BendRadius-(MEP_BendRadius-halfWidth)*COS(bendAngle)+add_l*SIN(bendAngle), 1
	endif

	coordX = (MEP_BendRadius-halfWidth)*SIN(bendAngle)
	coordY = MEP_BendRadius-(MEP_BendRadius-halfWidth)*COS(bendAngle)
	PUT coordX, coordY, 1
	IF MEP_ThroatSegments > 1 THEN
		alpha = bendAngle
		PUT throatSegmentLength+throatRadius*SIN(alpha), halfWidth+throatRadius-throatRadius*COS(alpha), 1
		FOR i = 1 TO (MEP_ThroatSegments-2)
			 alpha = alpha - bendAngle/(MEP_ThroatSegments-2)
			PUT throatSegmentLength+throatRadius*SIN(alpha), halfWidth+throatRadius-throatRadius*COS(alpha), 1
		NEXT i
		PUT 0, halfWidth, 1
	ELSE
		IF ABS(coordX) > EPS OR ABS(coordY-halfWidth) > EPS THEN
			PUT 0, MEP_BendRadius, 901
			PUT 0, halfWidth, 3001
		ENDIF
	ENDIF
	if ductStraightLengthA > EPS and add_l<EPS then
		PUT -ductStraightLengthA, halfWidth, 1
		PUT -ductStraightLengthA, -halfWidth, 1
	endif

	if add_l>EPS and ductStraightLengthA < EPS then 
		PUT -add_l, halfWidth, 1
		PUT -add_l, -halfWidth, 1
	endif

	if add_l_EPS and ductStraightLengthA > EPS then 
		PUT -ductStraightLengthA, halfWidth, 1
		PUT -add_l, halfWidth, 1
		PUT -add_l, -halfWidth, 1
		PUT -ductStraightLengthA, -halfWidth, 1
	endif

	PUT 0, -halfWidth, -1
	pp = 1

	IF ABS(shapeTypeA - 2) < EPS OR ABS(shapeTypeA - 3) < EPS THEN
		IF MEP_HeelSegments = 2 AND MEP_ThroatSegments = 2 THEN
			LINE2 ductStraightLengthA+throatSegmentLength+throatRadius*SIN(bendAngle), halfWidth+throatRadius-throatRadius*COS(bendAngle), ductStraightLengthA+heelSegmentLength+heelRadius*SIN(bendAngle), -halfWidth+heelRadius-heelRadius*COS(bendAngle)
		ENDIF
		IF MEP_HeelSegments > 2 AND MEP_ThroatSegments > 2 THEN
			alpha = 0
			FOR i = 1 TO (MEP_HeelSegments-1)
				LINE2 throatSegmentLength+throatRadius*SIN(alpha), halfWidth+throatRadius-throatRadius*COS(alpha), heelSegmentLength+heelRadius*SIN(alpha), -halfWidth+heelRadius-heelRadius*COS(alpha)
				alpha = alpha + bendAngle/(MEP_HeelSegments-2)
			NEXT i
		ENDIF
	ENDIF
RETURN

20:
	segments = MAX(MEP_ThroatSegments, MEP_HeelSegments)
	Len = MEP_BendRadius*TAN(bendAngle/2)
	rr = Len/(TAN(bendAngle/2)+2*SIN(bendAngle/(2*(segments-2))))
	segmentLen = 2*rr*SIN(bendAngle/(2*(segments-2)))

	beta = bendAngle/(segments-2)
	halfeBeta = beta/2

	PUT -ductStraightLengthA, -halfWidth, 1
	PUT segmentLen+halfWidth*TAN(beta/4), -halfWidth, 1

	alpha = 0: delta = 0
	FOR i = 1 TO segments-2
		alpha = alpha + bendAngle/(segments-2)
		delta = delta + (beta-(beta/4)*(i = segments-2))
		halfWidthRed = halfWidth/COS(beta/2-(beta/4)*(i = segments-2))
		PUT segmentLen+rr*SIN(alpha)+halfWidthRed*SIN(delta), rr-rr*COS(alpha)-halfWidthRed*COS(delta), 1
	NEXT i
	PUT segmentLen+rr*SIN(alpha)+(segmentLen+ductStraightLengthB)*COS(bendAngle)+halfWidth*SIN(bendAngle), rr-rr*COS(alpha)+(segmentLen+ductStraightLengthB)*SIN(bendAngle)-halfWidth*COS(bendAngle), 1
	PUT segmentLen+rr*SIN(alpha)+(segmentLen+ductStraightLengthB)*COS(bendAngle)-halfWidth*SIN(bendAngle), rr-rr*COS(alpha)+(segmentLen+ductStraightLengthB)*SIN(bendAngle)+halfWidth*COS(bendAngle), 1

	FOR i = 1 TO segments-2
		PUT segmentLen+rr*SIN(alpha)-halfWidthRed*SIN(delta), rr-rr*COS(alpha)+halfWidthRed*COS(delta), 1
		alpha = alpha - bendAngle/(segments-2)
		delta = delta - (beta-(beta/4)*(i = 1))
		halfWidthRed = halfWidth/COS(beta/2)
	NEXT i

	PUT segmentLen-halfWidth*TAN(beta/4), halfWidth, 1
	PUT -ductStraightLengthA, halfWidth, 1
	PUT -ductStraightLengthA, -halfWidth, -1
	pp = 1

	IF MEP_HeelSegments > 2 AND MEP_ThroatSegments > 2 THEN
		LINE2 ductStraightLengthA+segmentLen+halfWidth*TAN(beta/4), -halfWidth, ductStraightLengthA+segmentLen-halfWidth*TAN(beta/4), halfWidth
		alpha = 0: delta = 0
		FOR i = 1 TO (MEP_HeelSegments-2)
			alpha = alpha + bendAngle/(MEP_ThroatSegments-2)
			delta = delta + (beta-(beta/4)*(i = segments-2))
			halfWidthRed = halfWidth/COS(beta/2-(beta/4)*(i = segments-2))
			LINE2 ductStraightLengthA+segmentLen+rr*SIN(alpha)+halfWidthRed*SIN(delta), rr-rr*COS(alpha)-halfWidthRed*COS(delta), ductStraightLengthA+segmentLen+rr*SIN(alpha)-halfWidthRed*SIN(delta), rr-rr*COS(alpha)+halfWidthRed*COS(delta)
		NEXT i
	ENDIF
RETURN

30:
		PUT 0, -halfWidthC, 1
		PUT connectorLength, -halfWidthC, 1
		PUT connectorLength, halfWidthC, 1
		PUT 0, halfWidthC, 1

	POLY2_B NSP/3, 1+2+4+64, gs_fill_pen, gs_back_pen,

		GET (NSP)
RETURN

100:
		DIM MatrixT[2][2]

		MatrixT[1][1] = MEP_Position[2][1]
		MatrixT[1][2] = -MEP_Position[2][2]

		MatrixT[2][1] = -COS(alpha+90)
		MatrixT[2][2] = SIN(alpha+90)

		! --- Input Coordinates

		Coordinates = 1

		DIM inCoords[10][2]

			inCoords[1][1] = MEP_Position[3][1]
			inCoords[1][2] = MEP_Position[3][2]

		! --- the Matrix Operation, what makes the Output-Coordinates

		DIM outCoords[10][2]
		cnum = 1
		outCoords[cnum][1] = inCoords[cnum][1]*MatrixT[1][1]+inCoords[cnum][2]*MatrixT[2][1]
		outCoords[cnum][2] = inCoords[cnum][1]*MatrixT[1][2]+inCoords[cnum][2]*MatrixT[2][2]
RETURN
]]>
</Script_2D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_1D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
ConID = 1
success = LIBRARYGLOBAL ("Libraryflobals-mep", "show_axis", show_axis)
success = LIBRARYGLOBAL ("Libraryflobals-mep", "show_axis_and", show_axis_and)
success = LIBRARYGLOBAL ("Libraryflobals-mep", "show_isol", show_isol)
success = LIBRARYGLOBAL ("Libraryflobals-mep", "show_conventions", show_conventions)
success = LIBRARYGLOBAL ("Libraryflobals-mep", "show_size", show_size)
success = LIBRARYGLOBAL ("Libraryflobals-mep", "gs_detlevel_3D_m", gs_detlevel_3D_m)
success = LIBRARYGLOBAL ("Libraryflobals-mep", "gs_detlevel_2D_m",gs_detlevel_2D_m)
call "Показ_систем" PARAMETERS All RETURNED_PARAMETERS show_el, syst_name

! MEP_m_Duct_Bend
! Zsolt Feke/2007

EPS = 0.00001

bendAngle = ABS(MEP_BendAngle)

res = 24

alpha_Res = 90/(INT(res/3))
bendRes = INT(bendAngle/alpha_Res)+1*(((bendAngle/alpha_Res)-INT(bendAngle/alpha_Res))>=0.5)
IF bendRes < 2 THEN bendRes = 2

IF gs_detlevel_3D_m = 1 THEN
	res = 9
	IF bendAngle > 46 THEN
		bendRes = 2
	ELSE
		bendRes = 1
	ENDIF
ENDIF


ductInnerWidthA			= MEP_NumConnectionData[1][12]
ductHalfWidthA			= MEP_NumConnectionData[1][12]/2+MEP_NumConnectionData[1][14]
ductHalfHeightA			= MEP_NumConnectionData[1][13]/2+MEP_NumConnectionData[1][14]
connectorLengthA		= MEP_NumConnectionData[1][14]
connectorHalfWidthA		= ductHalfWidthA+MEP_NumConnectionData[1][15]
connectorHalfHeightA	= ductHalfHeightA+MEP_NumConnectionData[1][15]
connectedA				= MEP_NumConnectionData[1][18]
shapeTypeA 				= MEP_NumConnectionData[1][21]

ductHalfWidthB			= MEP_NumConnectionData[2][12]/2+MEP_NumConnectionData[1][14]
ductHalfHeightB			= MEP_NumConnectionData[2][13]/2+MEP_NumConnectionData[1][14]
connectorLengthB		= connectorLengthA
connectorHalfWidthB		= ductHalfWidthB+MEP_NumConnectionData[2][15]
connectorHalfHeightB	= ductHalfHeightB+MEP_NumConnectionData[2][15]
connectedB				= MEP_NumConnectionData[2][18]
shapeTypeB 				= MEP_NumConnectionData[2][21]

flangeA = 1
IF MEP_NumConnectionData[1][15] < EPS OR ABS(gs_AddConnections[1][1] - 1) < EPS THEN flangeA = 0

flangeB = 1
IF MEP_NumConnectionData[2][15] < EPS OR ABS(gs_AddConnections[2][1] - 1) < EPS THEN flangeB = 0


IF MEP_BendStyleID = 1 THEN
	flangeThick = MAX(MEP_NumConnectionData[1][15]*flangeA, MEP_NumConnectionData[2][15]*flangeB)
	ductHalfWidth = MAX(ductHalfWidthA, ductHalfWidthB)
	minBendRadius = ductHalfWidth + 0.001
	if minBendRadius_n = 0 then
		VALUES "MEP_BendRadius" RANGE[minBendRadius, ]
		IF MEP_BendRadius < minBendRadius THEN
			MEP_BendRadius = minBendRadius
			PARAMETERS MEP_BendRadius = MEP_BendRadius
		ENDIF
	else
		IF minBendRadius > minBendRadius_n THEN minBendRadius_n = minBendRadius
		PARAMETERS MEP_BendRadius = minBendRadius_n
	endif

	ConThroatLength = (MEP_BendRadius-MEP_NumConnectionData[1][12]/2)*TAN(bendAngle/2)-0.5
	ConThroatLength_1 = ConThroatLength
	PARAMETERS ConThroatLength_1 = ConThroatLength_1
	ConThroatLength_2 = ConThroatLength
	PARAMETERS ConThroatLength_2 = ConThroatLength_2
ENDIF


ductStraightLengthA = 0
ductStraightLengthB = 0
IF MEP_BendStyleID = 2 THEN
	VALUES "ConThroatLength_1" RANGE[MEP_NumConnectionData[2][15]*flangeB+MEP_NumConnectionData[1][14]*2, ]
	VALUES "ConThroatLength_2" RANGE[MEP_NumConnectionData[1][15]*flangeA+MEP_NumConnectionData[1][14]*2, ]

	IF SGN(ConThroatLength_1-ConThroatLength_2) = -1 THEN ductStraightLengthB = ABS(ConThroatLength_1-ConThroatLength_2)
	IF SGN(ConThroatLength_1-ConThroatLength_2) = 1 THEN ductStraightLengthA = ABS(ConThroatLength_1-ConThroatLength_2)
	ConThroatLength = MIN(ConThroatLength_1, ConThroatLength_2)
	MEP_BendRadius = ConThroatLength/TAN(bendAngle/2)+MEP_NumConnectionData[1][12]/2
	PARAMETERS MEP_BendRadius = MEP_BendRadius
	LOCK "MEP_BendRadius"
ENDIF


heelLength = (MEP_BendRadius+ductHalfWidthA)*TAN(bendAngle/2)
IF MEP_HeelSegments > 2 THEN
	heelRadius = heelLength/(TAN(bendAngle/2)+2*SIN(bendAngle/(2*(MEP_HeelSegments-2))))
	heelSegmentLength = 2*heelRadius*SIN(bendAngle/(2*(MEP_HeelSegments-2)))
ELSE
	heelSegmentLength = heelLength
ENDIF

throatLength = (MEP_BendRadius-ductHalfWidthA)*TAN(bendAngle/2)
IF MEP_ThroatSegments > 2 THEN
	throatRadius = throatLength/(TAN(bendAngle/2)+2*SIN(bendAngle/(2*(MEP_ThroatSegments-2))))
	throatSegmentLength = 2*throatRadius*SIN(bendAngle/(2*(MEP_ThroatSegments-2)))
ELSE
	throatSegmentLength = throatLength
ENDIF

heelLength_wIns = (MEP_BendRadius+ductHalfWidthA+MEP_InsThickness)*TAN(bendAngle/2)
heelRadius_wIns = 0
IF MEP_HeelSegments > 2 THEN
	heelRadius_wIns = heelLength_wIns/(TAN(bendAngle/2)+2*SIN(bendAngle/(2*(MEP_HeelSegments-2))))
	heelSegmentLength_wIns = 2*heelRadius_wIns*SIN(bendAngle/(2*(MEP_HeelSegments-2)))
ELSE
	heelSegmentLength_wIns = heelLength_wIns
ENDIF

throatLength_wIns = (MEP_BendRadius-ductHalfWidthA-MEP_InsThickness)*TAN(bendAngle/2)
throatRadius_wIns = 0
IF MEP_ThroatSegments > 2 THEN
	throatRadius_wIns = throatLength_wIns/(TAN(bendAngle/2)+2*SIN(bendAngle/(2*(MEP_ThroatSegments-2))))
	throatSegmentLength_wIns = 2*throatRadius_wIns*SIN(bendAngle/(2*(MEP_ThroatSegments-2)))
ELSE
	throatSegmentLength_wIns = throatLength_wIns
ENDIF


						! ---------------- !
						! --- Z vector --- !
						! ---------------- !

dZx = -MEP_Position[3][2]*MEP_Position[2][3]+MEP_Position[3][3]*MEP_Position[2][2]
dZy = -MEP_Position[3][3]*MEP_Position[2][1]+MEP_Position[3][1]*MEP_Position[2][3]
dZz = -MEP_Position[3][1]*MEP_Position[2][2]+MEP_Position[3][2]*MEP_Position[2][1]


						! ------------------------ !
						! --- 3 points of duct --- !
						! ------------------------ !

! --- x,y,z coordinates of 1st point ---

PointAX = -add_l
PointAY = 0
PointAZ = 0

! --- x,y,z coordinates of middle point ---

PointMX = ductStraightLengthA+MEP_BendRadius*(TAN(bendAngle/2))
PointMY = 0
PointMZ = 0

! --- x,y,z coordinates of 2nd point ---

PointBX = ductStraightLengthA+MEP_BendRadius*SIN(bendAngle)+(ductStraightLengthB+add_l)*COS(bendAngle)
PointBY = MEP_BendRadius-MEP_BendRadius*COS(bendAngle)+(ductStraightLengthB+add_l)*SIN(bendAngle)
PointBZ = 0

vectorX = COS(bendAngle)
vectorY = SIN(bendAngle)
vectorZ = 0


						! ------------------- !
						! --- coordinates --- !
						! ------------------- !

! --- Building of Transformational Matrix

DIM MatrixT[3][3]

MatrixT[1][1] = MEP_Position[2][1]
MatrixT[1][2] = MEP_Position[2][2]
MatrixT[1][3] = MEP_Position[2][3]

MatrixT[2][1] = MEP_Position[3][1]
MatrixT[2][2] = MEP_Position[3][2]
MatrixT[2][3] = MEP_Position[3][3]

MatrixT[3][1] = dZx
MatrixT[3][2] = dZy
MatrixT[3][3] = dZz


! --- Input Coordinates



PUT PointAX, PointAY, PointAZ
PUT PointMX, PointMY, PointMZ
PUT PointBX, PointBY, PointBZ

IF MEP_ThroatSegments = 1 AND MEP_HeelSegments = 1 OR MEP_HeelSegments = 1 THEN

	IF ductStraightLengthA THEN
		PUT PointAX+ductStraightLengthA/2, PointAY, PointAZ
		PUT PointAX+ductStraightLengthA, PointAY, PointAZ
	ENDIF

	pnum = 10+2*(ductStraightLengthA > 0)+2*(ductStraightLengthB > 0)
	alpha = 0: alpha_i = bendAngle/(pnum-1)
	FOR i = 1 TO pnum
		PUT ductStraightLengthA+MEP_BendRadius*SIN(alpha), MEP_BendRadius-MEP_BendRadius*COS(alpha), 0
		alpha = alpha + alpha_i
	NEXT i

	IF ductStraightLengthB THEN
		PUT ductStraightLengthA+MEP_BendRadius*SIN(bendAngle)+((ductStraightLengthB)/2)*COS(bendAngle), MEP_BendRadius-MEP_BendRadius*COS(bendAngle)+((ductStraightLengthB)/2)*SIN(bendAngle), 0
	ENDIF

ENDIF

IF MEP_HeelSegments > 2 THEN
	segments = MEP_HeelSegments
	Len = MEP_BendRadius*TAN(bendAngle/2)
	rr = Len/(TAN(bendAngle/2)+2*SIN(bendAngle/(2*(segments-2))))
	segmentLen = 2*rr*SIN(bendAngle/(2*(segments-2)))
	PUT ductStraightLengthA+segmentLen, 0, 0
	alpha = 0
	FOR i = 1 TO segments-2
		alpha = alpha + bendAngle/(MEP_HeelSegments-2)
		PUT ductStraightLengthA+segmentLen+rr*SIN(alpha), rr-rr*COS(alpha), 0
	NEXT i
	pnum = segments-1
ENDIF

PUT vectorX, vectorY, vectorZ

Coordinates = NSP/3

DIM inCoords[30][3]

FOR cnum = 1 TO Coordinates
	inCoords[cnum][1] = GET(1)
	inCoords[cnum][2] = GET(1)
	inCoords[cnum][3] = GET(1)
NEXT cnum


! --- the Matrix Operation, what makes the Output-Coordinates

DIM outCoords[30][3]

FOR cnum = 1 TO Coordinates
	outCoords[cnum][1] = inCoords[cnum][1]*MatrixT[1][1]+inCoords[cnum][2]*MatrixT[2][1]+inCoords[cnum][3]*MatrixT[3][1]
	outCoords[cnum][2] = inCoords[cnum][1]*MatrixT[1][2]+inCoords[cnum][2]*MatrixT[2][2]+inCoords[cnum][3]*MatrixT[3][2]
	outCoords[cnum][3] = inCoords[cnum][1]*MatrixT[1][3]+inCoords[cnum][2]*MatrixT[2][3]+inCoords[cnum][3]*MatrixT[3][3]
NEXT cnum

file_dependence "MEP_m_Duct_Bend"
]]>
</Script_1D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_PR SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_PR>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_UI SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_UI>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_VL SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
! MEP_m_Duct_Bend
! Zsolt Feke/2007


VALUES "MEP_BendStyleID" 1, 2
VALUES "MEP_VanesNum" RANGE [1,]
]]>
</Script_VL>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Comment SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Comment>

<ParamSection SectVersion="26" SectionFlags="0" SubIdent="0">
	<ParamSectHeader>
		<Version>26</Version>
		<AutoHotspots>false</AutoHotspots>
		<StatBits>
			<STBit_FixSize/>
		</StatBits>
		<WDLeftFrame>0</WDLeftFrame>
		<WDRightFrame>0</WDRightFrame>
		<WDTopFrame>0</WDTopFrame>
		<WDBotFrame>0</WDBotFrame>
		<LayFlags>65535</LayFlags>
		<WDMirrorThickness>0</WDMirrorThickness>
		<WDWallInset>0</WDWallInset>
		<SymbolColor>0</SymbolColor>
	</ParamSectHeader>
	<Parameters>
		<Length Name="A">
			<Description><![CDATA[""]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Length>
		<Length Name="B">
			<Description><![CDATA[""]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Length>
		<Length Name="ZZYZX">
			<Description><![CDATA[""]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Boolean Name="AC_show2DHotspotsIn3D">
			<Description><![CDATA["Show 2D Hotspots in 3D"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Length Name="ac_bottomlevel">
			<Description><![CDATA["Bottom Level"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Length>
		<Length Name="ac_toplevel">
			<Description><![CDATA["Top Level"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Integer Name="MEP_BendStyleID">
			<Description><![CDATA["Bend Type"]]></Description>
			<Value>1</Value>
		</Integer>
		<Length Name="MEP_BendRadius">
			<Description><![CDATA["Bend Radius"]]></Description>
			<Value>0.177</Value>
		</Length>
		<Angle Name="MEP_BendAngle">
			<Description><![CDATA["Bend Angle"]]></Description>
			<Value>90</Value>
		</Angle>
		<Boolean Name="MEP_InsShow">
			<Description><![CDATA["Show Insulation"]]></Description>
			<Value>0</Value>
		</Boolean>
		<Length Name="MEP_InsThickness">
			<Description><![CDATA["Insulation Thickness"]]></Description>
			<Value>0.1</Value>
		</Length>
		<Integer Name="MEP_ThroatSegments">
			<Description><![CDATA["Throat Segment Count"]]></Description>
			<Value>1</Value>
		</Integer>
		<Integer Name="MEP_HeelSegments">
			<Description><![CDATA["Heel Segment Count"]]></Description>
			<Value>1</Value>
		</Integer>
		<Length Name="ConThroatLength_1">
			<Description><![CDATA["Connection Throat Length"]]></Description>
			<Value>-0.448</Value>
		</Length>
		<Length Name="ConThroatLength_2">
			<Description><![CDATA["Connection Throat Length"]]></Description>
			<Value>-0.448</Value>
		</Length>
		<Boolean Name="MEP_Vanes">
			<Description><![CDATA["Vanes"]]></Description>
			<Value>0</Value>
		</Boolean>
		<Integer Name="MEP_VanesNum">
			<Description><![CDATA["Number of Vanes"]]></Description>
			<Value>2</Value>
		</Integer>
		<Length Name="add_l">
			<Description><![CDATA["Удлинение концов"]]></Description>
			<Value>0</Value>
		</Length>
		<Length Name="minBendRadius_n">
			<Description><![CDATA["Минимальный радиус"]]></Description>
			<Value>0</Value>
		</Length>

		<!-- gs_2D_representation: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_2D_representation">
			<Description><![CDATA["2D Representation"]]></Description>
		</Title>
		<Boolean Name="MEP_cline_show">
			<Description><![CDATA["Show Centerline"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<LineType Name="MEP_cline_type">
			<Description><![CDATA["Centerline Line Type"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</LineType>
		<PenColor Name="MEP_cline_pen">
			<Description><![CDATA["Centerline Pen"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>6</Value>
		</PenColor>
		<PenColor Name="gs_cont_pen">
			<Description><![CDATA["Contour Pen"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>7</Value>
		</PenColor>
		<PenColor Name="gs_fill_pen">
			<Description><![CDATA["Fill Pen"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>91</Value>
		</PenColor>
		<PenColor Name="gs_back_pen">
			<Description><![CDATA["Fill Background Pen"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>91</Value>
		</PenColor>
		<FillPattern Name="gs_fill_type">
			<Description><![CDATA["Fill Type"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>64</Value>
		</FillPattern>

		<!-- gs_3D_representation: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_3D_representation">
			<Description><![CDATA["3D Representation"]]></Description>
		</Title>
		<Integer Name="gs_detlevel_3D_m">
			<Description><![CDATA["3D"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>2</Value>
		</Integer>
		<Boolean Name="duct_show">
			<Description><![CDATA["Show Duct"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="MEP_cline_show_3D">
			<Description><![CDATA["Show Centerline in 3D"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Material Name="gs_DuctMat">
			<Description><![CDATA["Surface"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>45</Value>
		</Material>
		<Material Name="gs_InsMat">
			<Description><![CDATA["Insulation Surface"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>6</Value>
		</Material>
		<Boolean Name="useSysMat">
			<Description><![CDATA["Use System Surface"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Material Name="sMat">
			<Description><![CDATA["System Surface"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Material>
		<Length Name="MEP_Position">
			<Description><![CDATA["Position"]]></Description>
			<ArrayValues FirstDimension="3" SecondDimension="3">
				<AVal Column="1" Row="1">0</AVal>
				<AVal Column="2" Row="1">0</AVal>
				<AVal Column="3" Row="1">0</AVal>
				<AVal Column="1" Row="2">1</AVal>
				<AVal Column="2" Row="2">0</AVal>
				<AVal Column="3" Row="2">0</AVal>
				<AVal Column="1" Row="3">0</AVal>
				<AVal Column="2" Row="3">1</AVal>
				<AVal Column="3" Row="3">0</AVal>
			</ArrayValues>
		</Length>
		<String Name="MEP_StrConnectionData">
			<Description><![CDATA[""]]></Description>
			<ArrayValues FirstDimension="2" SecondDimension="2">
				<AVal Column="1" Row="1"><![CDATA[""]]></AVal>
				<AVal Column="2" Row="1"><![CDATA[""]]></AVal>
				<AVal Column="1" Row="2"><![CDATA[""]]></AVal>
				<AVal Column="2" Row="2"><![CDATA[""]]></AVal>
			</ArrayValues>
		</String>
		<Integer Name="MEP_NumberConnections">
			<Description><![CDATA["Number of Connections"]]></Description>
			<Value>2</Value>
		</Integer>
		<Length Name="MEP_NumConnectionData">
			<Description><![CDATA[""]]></Description>
			<ArrayValues FirstDimension="2" SecondDimension="26">
				<AVal Column="1" Row="1">0</AVal>
				<AVal Column="2" Row="1">0</AVal>
				<AVal Column="3" Row="1">0</AVal>
				<AVal Column="4" Row="1">0</AVal>
				<AVal Column="5" Row="1">0</AVal>
				<AVal Column="6" Row="1">0</AVal>
				<AVal Column="7" Row="1">0</AVal>
				<AVal Column="8" Row="1">0</AVal>
				<AVal Column="9" Row="1">0</AVal>
				<AVal Column="10" Row="1">0</AVal>
				<AVal Column="11" Row="1">0</AVal>
				<AVal Column="12" Row="1">0.25</AVal>
				<AVal Column="13" Row="1">0.2</AVal>
				<AVal Column="14" Row="1">0.002</AVal>
				<AVal Column="15" Row="1">0.05</AVal>
				<AVal Column="16" Row="1">0</AVal>
				<AVal Column="17" Row="1">0.152</AVal>
				<AVal Column="18" Row="1">0</AVal>
				<AVal Column="19" Row="1">0</AVal>
				<AVal Column="20" Row="1">2</AVal>
				<AVal Column="21" Row="1">1</AVal>
				<AVal Column="22" Row="1">0</AVal>
				<AVal Column="23" Row="1">0</AVal>
				<AVal Column="24" Row="1">0</AVal>
				<AVal Column="25" Row="1">0</AVal>
				<AVal Column="26" Row="1">0</AVal>
				<AVal Column="1" Row="2">0</AVal>
				<AVal Column="2" Row="2">0</AVal>
				<AVal Column="3" Row="2">0</AVal>
				<AVal Column="4" Row="2">0</AVal>
				<AVal Column="5" Row="2">0</AVal>
				<AVal Column="6" Row="2">0</AVal>
				<AVal Column="7" Row="2">0</AVal>
				<AVal Column="8" Row="2">0</AVal>
				<AVal Column="9" Row="2">0</AVal>
				<AVal Column="10" Row="2">0</AVal>
				<AVal Column="11" Row="2">0</AVal>
				<AVal Column="12" Row="2">0.25</AVal>
				<AVal Column="13" Row="2">0.2</AVal>
				<AVal Column="14" Row="2">0.002</AVal>
				<AVal Column="15" Row="2">0.05</AVal>
				<AVal Column="16" Row="2">0</AVal>
				<AVal Column="17" Row="2">0.152</AVal>
				<AVal Column="18" Row="2">0</AVal>
				<AVal Column="19" Row="2">0</AVal>
				<AVal Column="20" Row="2">2</AVal>
				<AVal Column="21" Row="2">1</AVal>
				<AVal Column="22" Row="2">0</AVal>
				<AVal Column="23" Row="2">0</AVal>
				<AVal Column="24" Row="2">0</AVal>
				<AVal Column="25" Row="2">0</AVal>
				<AVal Column="26" Row="2">0</AVal>
			</ArrayValues>
		</Length>
		<Length Name="gs_AddConnections">
			<Description><![CDATA[""]]></Description>
			<ArrayValues FirstDimension="2" SecondDimension="2">
				<AVal Column="1" Row="1">2</AVal>
				<AVal Column="2" Row="1">0</AVal>
				<AVal Column="1" Row="2">2</AVal>
				<AVal Column="2" Row="2">0</AVal>
			</ArrayValues>
		</Length>
		<Boolean Name="show_el">
			<Description><![CDATA[""]]></Description>
			<Value>-1</Value>
		</Boolean>
		<String Name="syst_name">
			<Description><![CDATA[""]]></Description>
			<Value><![CDATA["!!!"]]></Value>
		</String>
		<Integer Name="ConToolType_1">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Integer>
	</Parameters>
</ParamSection>

<CalledMacros SectVersion="2" SectionFlags="0" SubIdent="0">
	<Macro>
		<MName><![CDATA["Показ_систем"]]></MName>
		<MainGUID>815BEB36-F280-443A-937B-64990DB2FB36</MainGUID>
	</Macro>
	<Macro>
		<MName><![CDATA["MEP_m_RequestSystemGlobals"]]></MName>
		<MainGUID>5DC5ED79-B7C9-4B2A-A7A7-687FB97394F7</MainGUID>
	</Macro>
	<Macro>
		<MName><![CDATA["Libraryflobals-mep"]]></MName>
		<MainGUID>9799A140-EDFF-46BA-ACA1-B5401FE64F3E</MainGUID>
	</Macro>
</CalledMacros>

<Copyright SectVersion="1" SectionFlags="0" SubIdent="0">
	<Author>GRAPHISOFT</Author>
	<License>
		<Type>CC BY-ND</Type>
		<Version>3.0</Version>
	</License>
</Copyright>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_FWM SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_FWM>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_BWM SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_BWM>

<Keywords SectVersion="1" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Keywords>

</Symbol>
