<?xml version="1.0" encoding="UTF-8"?>
<Symbol IsArchivable="false" IsPlaceable="false" MainGUID="5DC5ED79-B7C9-4B2A-A7A7-687FB97394F7" MigrationValue="Normal" Owner="1196638531" Signature="1196644685" Version="43">
<Ancestry SectVersion="1" SectionFlags="0" SubIdent="0" Template="false">
	<MainGUID>F938E33A-329D-4A36-BE3E-85E126820996</MainGUID>
	<MainGUID>103E8D2C-8230-42E1-9597-46F84CCE28C0</MainGUID>
	<MainGUID>B2970E4C-8680-4061-8670-2F4B638F3953</MainGUID>
</Ancestry>

<CalledMacros SectVersion="2" SectionFlags="0" SubIdent="0">
	<Macro>
		<MName><![CDATA["Показ_систем"]]></MName>
		<MainGUID>815BEB36-F280-443A-937B-64990DB2FB36</MainGUID>
	</Macro>
	<Macro>
		<MName><![CDATA["Libraryflobals-mep"]]></MName>
		<MainGUID>9799A140-EDFF-46BA-ACA1-B5401FE64F3E</MainGUID>
	</Macro>
</CalledMacros>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_3D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
EPS = 0.00001
isValidSystem = 0
isavailable = 0
show_el = 1
n = APPLICATION_QUERY ("MEPMODELER", "IsAvailable()", isavailable)
IF isavailable THEN
	if one_ConID>EPS then
		ConID = one_ConID
		gosub 50
	else
		arr = str_arr_out
		gosub "filter_arr3"
		if flag_find_part=0 then
			!!----------- Потом впуск
			arr = str_arr_in
			gosub "filter_arr3"
		endif
		if flag_find_part=0 then
			!!!----------- Ну и остатки
			FOR ConID = 1 TO min(vardim1(MEP_StrConnectionData),MEP_NumberConnections) 
				gosub 50
				if isValidSystem and show_el then ConID = MEP_NumberConnections
			NEXT ConID
		endif
	endif
	success = LIBRARYGLOBAL ("Libraryflobals-mep", "show_axis", show_axis)
	if show_axis then MEP_cline_pen = gs_cont_pen
	END gs_cont_pen, sMat, gs_InsMat, MEP_cline_pen, show_el
ENDIF

goto 30
50:
	isValidSystem = 0
	if isavailable then
		if ConID > vardim1(MEP_StrConnectionData) then ConID = MEP_NumberConnections
		if ConID > vardim1(MEP_StrConnectionData) then ConID = 1
		IF vartype(MEP_StrConnectionData[ConID][2])<>1 THEN
			IF MEP_StrConnectionData[ConID][2]<>"0" THEN
				ConSystemID = MEP_StrConnectionData[ConID][2]
				queryStr = "GetDomain (" + ConSystemID + ")"
				d = 0
				n = APPLICATION_QUERY ("MEPSYSTEM", queryStr, d)
				IF d THEN
					IF d = 1 THEN PUT 1
					IF d = 2 THEN PUT 2
					IF d = 3 THEN PUT 1, 2
					IF d = 4 THEN PUT 3
					IF d = 5 THEN PUT 1, 3
					IF d = 6 THEN PUT 2, 3
					IF d = 7 THEN PUT 1, 2, 3
					num = NSP
					FOR i = 1 TO num
						IF ABS(GET(1) - MEP_NumConnectionData[ConID][19]) < EPS THEN
							isValidSystem = 1
							queryStr = "GetMEPSystems (" + str(MEP_NumConnectionData[ConID][19],1,0) + ")"
							isSystemQuery = APPLICATION_QUERY ("MEPSystem", queryStr, SystemStr)
							num_ = VARDIM2(SystemStr)/2
							FOR ki = 1 TO num_
								if ConSystemID = SystemStr[1][ki*2-1] then
									sname = SystemStr[1][ki*2]: gosub "clear_name3" : syst_name = sname
									ki = num_
								endif
							NEXT ki
							if NSP>EPS then tt=max(get(NSP))
							i = num
						ENDIF
					NEXT i
				ENDIF
			endif
		endif
	ENDIF

	IF isValidSystem THEN
		IF vartype(MEP_StrConnectionData[ConID][2])=1 THEN
			ConSystemID = MEP_StrConnectionData[ConID][2]
			queryStr = "GetDomain (" + ConSystemID + ")"
			n = APPLICATION_QUERY ("MEPSYSTEM", queryStr, d)
			IF d THEN
				IF d = 1 THEN PUT 1
				IF d = 2 THEN PUT 2
				IF d = 3 THEN PUT 1, 2
				IF d = 4 THEN PUT 3
				IF d = 5 THEN PUT 1, 3
				IF d = 6 THEN PUT 2, 3
				IF d = 7 THEN PUT 1, 2, 3
				num = NSP
				FOR i = 1 TO num
					IF ABS(GET(1) - MEP_NumConnectionData[ConID][19]) < EPS THEN
						queryStr = "GetMEPSystems (" + str(MEP_NumConnectionData[ConID][19],1,0) + ")"
						isSystemQuery = APPLICATION_QUERY ("MEPSystem", queryStr, SystemStr)
						num_ = VARDIM2(SystemStr)/2
						FOR ki = 1 TO num_
							if ConSystemID = SystemStr[1][ki*2-1] then
								sname = SystemStr[1][ki*2]: gosub "clear_name3" : syst_name = sname
								ki = num_
							endif
						NEXT ki
						isValidSystem = 1
						if NSP>EPS then tt=max(get(NSP))
						i = num
					ENDIF
				NEXT i
			ENDIF
		endif
	ENDIF
	IF isValidSystem THEN
		call "Показ_систем" PARAMETERS All isMep=0, syst_name=syst_name RETURNED_PARAMETERS show_el
		queryStr = "GetContourPen (" + ConSystemID + ")"
		n = APPLICATION_QUERY ("MEPSystem", queryStr, gs_cont_pen)
		queryStr = "GetSystemMaterial (" + ConSystemID + ")"
		n = APPLICATION_QUERY ("MEPSystem", queryStr, sMat)
		queryStr = "GetInsulationMaterial (" + ConSystemID + ")"
		n = APPLICATION_QUERY ("MEPSystem", queryStr, gs_InsMat)
		queryStr = "GetCenterLinePen (" + ConSystemID + ")"
		n = APPLICATION_QUERY ("MEPSystem", queryStr, MEP_cline_pen)
	ELSE
		if tID<>"" then
			queryStr = "GetContourPen (" + tID + ")"
			n = APPLICATION_QUERY ("MEPSystem", queryStr, gs_cont_pen)
			queryStr = "GetSystemMaterial (" + tID + ")"
			n = APPLICATION_QUERY ("MEPSystem", queryStr, sMat)
			queryStr = "GetInsulationMaterial (" + tID + ")"
			n = APPLICATION_QUERY ("MEPSystem", queryStr, gs_InsMat)
			queryStr = "GetCenterLinePen (" + tID + ")"
			n = APPLICATION_QUERY ("MEPSystem", queryStr, MEP_cline_pen)
		else
			gs_cont_pen = 20!invalidsystem_cont_pen
			gs_InsMat = 0!invalidsystem_InsMat
			sMat = 0!
			MEP_cline_pen  = 20!invalidsystem_cline_pen
		endif
	ENDIF
return

"clear_name3":
	if STRSTR(sname, "(")>0 then sname = STRSUB (sname, 1, STRSTR(sname, "(")-1)
	if STRSTR(sname, " ")>0 then
		_currStr = sname : gosub "replace_text" : sname = _newStr
	endif
return


"replace_text3":
	_charToReplace = " "
	_newChar = ""
    _newStr = ""     ! intialize a new empty string
    _i = 1000        ! creating a "guard" for the while, set the max number of runs
    while _currStr <> "" and _i > 0 do
        _n = STRSTR (_currStr, _charToReplace, 1)   ! check the script for _charToReplace
        if _n > 0 then	
            ! _charToReplace is first found in position _n

            ! add the first part of _currStr to _newStr, plus add _newChar
            _newStr = _newStr + STRSUB (_currStr, 1, _n - 1) + _newChar

            ! get a new _currStr from the chars after position _n
            _currStr = STRSUB (_currStr, _n + 1, STRLEN(_currStr) - _n)	 
        else
            ! if _charToReplace is not found then add _currStr to _newStr
            _newStr = _newStr + _currStr
            ! close the loop with changing _currStr to empty string
            _currStr = ""
        endif
        _i = _i - 1	! decrease the "guard" variable in each run
    endwhile
return

"name_has_part3":
	flag_find_part = 0
	for jj=1 to vardim1(arr)
		if STRSTR(var, arr[jj])>0 then
			flag_find_part = 1
			jj = vardim1(arr)
		endif
	next jj
return

"filter_arr3":
	if vardim2(MEP_StrConnectionData)>2 then
		FOR ConID = 1 TO min(vardim1(MEP_StrConnectionData),MEP_NumberConnections)
			if vartype(MEP_StrConnectionData[ConID][3])=2 then
				if strlen(MEP_StrConnectionData[ConID][3])>0 then
					var = MEP_StrConnectionData[ConID][3] : gosub "name_has_part3"
					if flag_find_part then
						gosub 50
						if isValidSystem and show_el then ConID = MEP_NumberConnections
					endif
				endif
			endif
		NEXT ConID
	endif

return

30:
]]>
</Script_3D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_2D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
EPS = 0.00001
isValidSystem = 0
isavailable = 0
extendAttribute = 1
show_el = 1
d = 0


n = APPLICATION_QUERY ("MEPMODELER", "IsAvailable()", isavailable)
IF isavailable THEN
	if one_ConID>EPS then
		ConID = one_ConID
		gosub 51
	else
		arr = str_arr_out
		gosub "filter_arr2"
		if flag_find_part=0 then
			!!----------- Потом впуск
			arr = str_arr_in
			gosub "filter_arr2"
		endif
		if flag_find_part=0 then
			!!!----------- Ну и остатки
			FOR ConID = 1 TO min(vardim1(MEP_StrConnectionData),MEP_NumberConnections) 
				gosub 51
				if isValidSystem and show_el then ConID = MEP_NumberConnections
			NEXT ConID
		endif
	endif
55:
	success = LIBRARYGLOBAL ("Libraryflobals-mep", "show_axis", show_axis)
	if show_axis then 
		MEP_cline_pen = gs_cont_pen
		MEP_cline_type = 1
	endif
	if gs_cont_pen<1 or gs_cont_pen>255 then gs_cont_pen=1
	if gs_fill_pen<1 or gs_fill_pen>255 then gs_fill_pen=1
	if gs_back_pen>255 then gs_back_pen=19
	if MEP_cline_pen<1 or MEP_cline_pen>255 then MEP_cline_pen=1
	END gs_cont_pen, gs_fill_type, gs_fill_pen, gs_back_pen, MEP_cline_type, MEP_cline_pen, show_el
ENDIF
goto 52
51:
	isValidSystem = 0
	if ConID > vardim1(MEP_StrConnectionData) then ConID = MEP_NumberConnections
	if isavailable then
		IF vartype(MEP_StrConnectionData[ConID][2])<>1 THEN
			IF MEP_StrConnectionData[ConID][2]<>"0" THEN
				ConSystemID = MEP_StrConnectionData[ConID][2]
				queryStr = "GetDomain (" + ConSystemID + ")"
				d = 0
				n = APPLICATION_QUERY ("MEPSYSTEM", queryStr, d)
				IF d THEN
					IF d = 1 THEN PUT 1
					IF d = 2 THEN PUT 2
					IF d = 3 THEN PUT 1, 2
					IF d = 4 THEN PUT 3
					IF d = 5 THEN PUT 1, 3
					IF d = 6 THEN PUT 2, 3
					IF d = 7 THEN PUT 1, 2, 3
					num = NSP
					FOR i = 1 TO num
						IF ABS(GET(1) - MEP_NumConnectionData[ConID][19]) < EPS THEN
							isValidSystem = 1
							queryStr = "GetMEPSystems (" + str(MEP_NumConnectionData[ConID][19],1,0) + ")"
							isSystemQuery = APPLICATION_QUERY ("MEPSystem", queryStr, SystemStr)
							num_ = VARDIM2(SystemStr)/2
							FOR ki = 1 TO num_
								if ConSystemID = SystemStr[1][ki*2-1] then
									sname = SystemStr[1][ki*2]: gosub "clear_name2" : syst_name = sname
									ki = num_
								endif
							NEXT ki
							if NSP>EPS then tt=max(get(NSP))
							i = num
						ENDIF
					NEXT i
				ENDIF
			endif
		endif
	ENDIF

	IF isValidSystem THEN
		call "Показ_систем" PARAMETERS All isMep=0, syst_name=syst_name RETURNED_PARAMETERS show_el
		queryStr = "GetContourPen (" + ConSystemID + ")"
		n = APPLICATION_QUERY ("MEPSystem", queryStr, gs_cont_pen)
		queryStr = "GetFillType (" + ConSystemID + ")"
		n = APPLICATION_QUERY ("MEPSystem", queryStr, gs_fill_type)
		queryStr = "GetFillPen (" + ConSystemID + ")"
		n = APPLICATION_QUERY ("MEPSystem", queryStr, gs_fill_pen)
		queryStr = "GetBackgroundPen (" + ConSystemID + ")"
		n = APPLICATION_QUERY ("MEPSystem", queryStr, gs_back_pen)
		queryStr = "GetCenterLineType (" + ConSystemID + ")"
		n = APPLICATION_QUERY ("MEPSystem", queryStr, MEP_cline_type)
		queryStr = "GetCenterLinePen (" + ConSystemID + ")"
		n = APPLICATION_QUERY ("MEPSystem", queryStr, MEP_cline_pen)
	ELSE
		if tID<>"" then
			queryStr = "GetContourPen (" + tID + ")"
			n = APPLICATION_QUERY ("MEPSystem", queryStr, gs_cont_pen)
			queryStr = "GetFillType (" + tID + ")"
			n = APPLICATION_QUERY ("MEPSystem", queryStr, gs_fill_type)
			queryStr = "GetFillPen (" + tID + ")"
			n = APPLICATION_QUERY ("MEPSystem", queryStr, gs_fill_pen)
			queryStr = "GetBackgroundPen (" + tID + ")"
			n = APPLICATION_QUERY ("MEPSystem", queryStr, gs_back_pen)
			queryStr = "GetCenterLineType (" + tID + ")"
			n = APPLICATION_QUERY ("MEPSystem", queryStr, MEP_cline_type)
			queryStr = "GetCenterLinePen (" + tID + ")"
			n = APPLICATION_QUERY ("MEPSystem", queryStr, MEP_cline_pen)
		else
			gs_cont_pen = 20!invalidsystem_cont_pen
			gs_fill_type= 20!invalidsystem_fill_type
			gs_fill_pen = 20!invalidsystem_fill_pen
			gs_back_pen = 20!invalidsystem_back_pen
			MEP_cline_type = 1!invalidsystem_cline_type
			MEP_cline_pen  = 20!invalidsystem_cline_pen
		endif
	ENDIF
return

"clear_name2":
	if STRSTR(sname, "(")>0 then sname = STRSUB (sname, 1, STRSTR(sname, "(")-1)
	if STRSTR(sname, " ")>0 then
		_currStr = sname : gosub "replace_text" : sname = _newStr
	endif
return

"replace_text2":
	_charToReplace = " "
	_newChar = ""
    _newStr = ""     ! intialize a new empty string
    _i = 1000        ! creating a "guard" for the while, set the max number of runs
    while _currStr <> "" and _i > 0 do
        _n = STRSTR (_currStr, _charToReplace, 1)   ! check the script for _charToReplace
        if _n > 0 then	
            ! _charToReplace is first found in position _n

            ! add the first part of _currStr to _newStr, plus add _newChar
            _newStr = _newStr + STRSUB (_currStr, 1, _n - 1) + _newChar

            ! get a new _currStr from the chars after position _n
            _currStr = STRSUB (_currStr, _n + 1, STRLEN(_currStr) - _n)	 
        else
            ! if _charToReplace is not found then add _currStr to _newStr
            _newStr = _newStr + _currStr
            ! close the loop with changing _currStr to empty string
            _currStr = ""
        endif
        _i = _i - 1	! decrease the "guard" variable in each run
    endwhile
return

"name_has_part2":
	flag_find_part = 0
	for jj=1 to vardim1(arr)
		if STRSTR(var, arr[jj])>0 then
			flag_find_part = 1
			jj = vardim1(arr)
		endif
	next jj
return

"filter_arr2":
	if vardim2(MEP_StrConnectionData)>2 then
		FOR ConID = 1 TO min(vardim1(MEP_StrConnectionData),MEP_NumberConnections)
			if vartype(MEP_StrConnectionData[ConID][3])=2 then
				if strlen(MEP_StrConnectionData[ConID][3])>0 then
					var = MEP_StrConnectionData[ConID][3] : gosub "name_has_part2"
					if flag_find_part then
						gosub 51
						if isValidSystem and show_el then ConID = MEP_NumberConnections
					endif
				endif
			endif
		NEXT ConID
	endif
return

52:
]]>
</Script_2D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_1D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
dim arr[] : var = "" : flag_find_part=0
dim str_arr_in[] : i=0
i=i+1 : str_arr_in[i] = "Вход"
i=i+1 : str_arr_in[i] = "вход"
i=i+1 : str_arr_in[i] = "Впуск"
i=i+1 : str_arr_in[i] = "впуск"
i=i+1 : str_arr_in[i] = "_in"

dim str_arr_out[] : i=0
i=i+1 : str_arr_out[i] = "Выхол"
i=i+1 : str_arr_out[i] = "выход"
i=i+1 : str_arr_out[i] = "Выпуск"
i=i+1 : str_arr_out[i] = "выпуск"
i=i+1 : str_arr_out[i] = "_out"

dim SystemStr[][]

EPS = 0.00001
var_t=""
dim syst_name_t[] : syst_name_t[1]=""
dim epm_t[] : epm_t[1]=""
n_sys=0
show_system_name = ""
tID = ""
if strlen(syst_name)>1 then
	show_all_system = 1 : success = LIBRARYGLOBAL ("Libraryflobals-mep", "show_all_system", show_all_system)
!Разбивка на системы, если они прописаны через запятую
	if STRSTR(syst_name, ",")>EPS then
		txt_var = syst_name
		max_iter = 1000
		for i=1 to max_iter
			n_t = STRSTR(txt_var, ",")
			if n_t<EPS then 
				i=max_iter
				if STRSUB(txt_var, 1, 1) = " " then txt_var = STRSUB(txt_var, 2, STRLEN(txt_var))
				if strlen(txt_var)>0 then
					n_sys = n_sys + 1
					sname = txt_var : gosub "clear_name" : txt_var = sname
					syst_name_t[n_sys]=txt_var
				endif
			else
				var_t = STRSUB(txt_var, 1, n_t-1)
				if STRSUB(var_t, 1, 1) = " " then var_t = STRSUB(var_t, 2, STRLEN(var_t))
				txt_var = STRSUB(txt_var, n_t+1, strlen(txt_var))
				n_sys = n_sys + 1
				syst_name_t[n_sys]=var_t
			endif
		next i
	else
		n_sys = 1
		syst_name_t[n_sys]=syst_name
	endif
	for i=1 to n_sys
		sname = syst_name_t[i] : gosub "clear_name" : syst_name_t[i] = sname
	next i
!Выбор первой видимой системы
	if show_all_system=1 then
		show_system_name = syst_name_t[1]
	else
		dim show_system[] : show_system[1] = ""
		success = LIBRARYGLOBAL ("Libraryflobals-mep", "show_system", show_system)
		for i=1 to vardim1(show_system)
			if strlen(show_system[i])>0 and show_system[i]<>" " then
				if n_sys>EPS then
					for k=1 to n_sys
						sname = syst_name_t[k]
						gosub 33
					next k
				else
					sname = syst_name
					gosub 33
				endif
			endif
		next i
	endif
endif

goto "end_show_system"

33:
	usl1 =(show_system[i]=sname)
	if STRSUB(show_system[i], 1, 1) = "*" and not(usl1) then !Если сборка начинается с * - отсекаем, и ищем конец
		findsp = STRSUB(show_system[i], 2, STRLEN(show_system[i]))
		if STRLEN(sname)>=STRLEN(findsp) then !Если имя сборки меньше длины искомого текста - она явно не подходит
			findsp_t = STRSUB(sname,STRLEN(sname)-STRLEN(findsp)+1,STRLEN(findsp))
			usl1 = (findsp_t=findsp)
		else
			usl1 = 0
		endif
	endif
	if STRSUB(show_system[i], STRLEN(show_system[i]), 1) = "*" and not(usl1) then !Если сборка заканчивается на * - отсекаем, и ищем начало
		findsp = STRSUB(show_system[i], 1, STRLEN(show_system[i])-1)
		if STRLEN(sname)>=STRLEN(findsp) then !Если имя сборки меньше длины искомого текста - она явно не подходит
			findsp_t = STRSUB(sname,1,STRLEN(findsp))
			usl1 = (findsp_t=findsp)
		else
			usl1 = 0
		endif
	endif
	if STRSUB(show_system[i], 1, 1) = "*" and STRSUB(show_system[i], STRLEN(show_system[i]), 1) = "*" and not(usl1) then !Ищем вхождение
		findsp = STRSUB(show_system[i], 2, STRLEN(show_system[i])-2)
		usl1 = (STRSTR(sname, findsp, 1)>0)
	endif
	if STRSUB(show_system[i], 1, 1) = "*" and STRLEN(show_system[i])=1 and not(usl1) then !Все сборки
		usl1 = 1
	endif
	if usl1 then 
		show_system_name = sname
		goto "end_show_system"
	endif
return

"clear_name":
	if STRSTR(sname, "(")>0 then sname = STRSUB (sname, 1, STRSTR(sname, "(")-1)
	if STRSTR(sname, " ")>0 then
		_currStr = sname : gosub "replace_text" : sname = _newStr
	endif
return


"replace_text":
	_charToReplace = " "
	_newChar = ""
    _newStr = ""     ! intialize a new empty string
    _i = 1000        ! creating a "guard" for the while, set the max number of runs
    while _currStr <> "" and _i > 0 do
        _n = STRSTR (_currStr, _charToReplace, 1)   ! check the script for _charToReplace
        if _n > 0 then	
            ! _charToReplace is first found in position _n

            ! add the first part of _currStr to _newStr, plus add _newChar
            _newStr = _newStr + STRSUB (_currStr, 1, _n - 1) + _newChar

            ! get a new _currStr from the chars after position _n
            _currStr = STRSUB (_currStr, _n + 1, STRLEN(_currStr) - _n)	 
        else
            ! if _charToReplace is not found then add _currStr to _newStr
            _newStr = _newStr + _currStr
            ! close the loop with changing _currStr to empty string
            _currStr = ""
        endif
        _i = _i - 1	! decrease the "guard" variable in each run
    endwhile
return

"end_show_system":

if strlen(show_system_name)>1 then
	dim d1[][]
	n = APPLICATION_QUERY ("MEPSYSTEM", "GetMEPSystems(1)", d1)
	FOR ki = 1 TO VARDIM2(d1)/2
		if d1[1][ki*2] = show_system_name then
			tID = d1[1][ki*2-1]
			ki = VARDIM2(d1)/2
		endif
	NEXT ki
	if tID="" then
		dim d2[][]
		n = APPLICATION_QUERY ("MEPSYSTEM", "GetMEPSystems(2)", d2)
		FOR ki = 1 TO VARDIM2(d2)/2
			if d2[1][ki*2] = show_system_name then
				tID = d2[1][ki*2-1]
				ki = VARDIM2(d2)/2
			endif
		NEXT ki
	endif
endif



]]>
</Script_1D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_PR SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_PR>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_UI SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_UI>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_VL SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_VL>

<Comment SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Comment>

<ParamSection SectVersion="27" SectionFlags="0" SubIdent="0">
	<ParamSectHeader>
		<AutoHotspots>false</AutoHotspots>
		<StatBits>
			<STBit_FixSize/>
		</StatBits>
		<WDLeftFrame>0</WDLeftFrame>
		<WDRightFrame>0</WDRightFrame>
		<WDTopFrame>0</WDTopFrame>
		<WDBotFrame>0</WDBotFrame>
		<LayFlags>65535</LayFlags>
		<WDMirrorThickness>0</WDMirrorThickness>
		<WDWallInset>0</WDWallInset>
	</ParamSectHeader>
	<Parameters>
		<Length Name="A">
			<Description><![CDATA["Dimension 1"]]></Description>
			<Fix/>
			<Value>1</Value>
		</Length>
		<Length Name="B">
			<Description><![CDATA["Dimension 2"]]></Description>
			<Fix/>
			<Value>1</Value>
		</Length>
		<Length Name="ZZYZX">
			<Description><![CDATA["Height"]]></Description>
			<Fix/>
			<Value>1</Value>
		</Length>
		<Boolean Name="AC_show2DHotspotsIn3D">
			<Description><![CDATA["Show 2D Hotspots in 3D"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Length Name="ac_bottomlevel">
			<Description><![CDATA["Bottom Level"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Length>
		<Length Name="ac_toplevel">
			<Description><![CDATA["Top Level"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<PenColor Name="gs_cont_pen">
			<Description><![CDATA["Contour Pen"]]></Description>
			<Value>1</Value>
		</PenColor>
		<FillPattern Name="gs_fill_type">
			<Description><![CDATA["Fill Type"]]></Description>
			<Value>0</Value>
		</FillPattern>
		<PenColor Name="gs_fill_pen">
			<Description><![CDATA["Fill Pen"]]></Description>
			<Value>1</Value>
		</PenColor>
		<PenColor Name="gs_back_pen">
			<Description><![CDATA["Fill Background Pen"]]></Description>
			<Value>1</Value>
		</PenColor>
		<LineType Name="MEP_cline_type">
			<Description><![CDATA["Centerline Type"]]></Description>
			<Value>0</Value>
		</LineType>
		<PenColor Name="MEP_cline_Pen">
			<Description><![CDATA["Centerline Pen"]]></Description>
			<Value>1</Value>
		</PenColor>
		<Material Name="sMat">
			<Description><![CDATA["System Surface"]]></Description>
			<Value>0</Value>
		</Material>
		<Material Name="gs_InsMat">
			<Description><![CDATA["Insulation Surface"]]></Description>
			<Value>0</Value>
		</Material>
		<PenColor Name="invalidsystem_cont_pen">
			<Description><![CDATA["Contour Pen for Invalid System"]]></Description>
			<Value>1</Value>
		</PenColor>
		<FillPattern Name="invalidsystem_fill_type">
			<Description><![CDATA["Fill Type for Invalid System"]]></Description>
			<Value>64</Value>
		</FillPattern>
		<PenColor Name="invalidsystem_fill_pen">
			<Description><![CDATA["Fill Pen for Invalid System"]]></Description>
			<Value>1</Value>
		</PenColor>
		<PenColor Name="invalidsystem_back_pen">
			<Description><![CDATA["Fill Background Pen for Invalid System"]]></Description>
			<Value>1</Value>
		</PenColor>
		<LineType Name="invalidsystem_cline_type">
			<Description><![CDATA["Centerline Type for Invalid System"]]></Description>
			<Value>1</Value>
		</LineType>
		<PenColor Name="invalidsystem_cline_pen">
			<Description><![CDATA["Centerline Pen for Invalid System"]]></Description>
			<Value>1</Value>
		</PenColor>
		<Material Name="invalidsystem_sMat">
			<Description><![CDATA["System Surface for Invalid System"]]></Description>
			<Value>72</Value>
		</Material>
		<Material Name="invalidsystem_InsMat">
			<Description><![CDATA["Insulation Surface for Invalid System"]]></Description>
			<Value>72</Value>
		</Material>
		<String Name="MEP_StrConnectionData">
			<Description><![CDATA[""]]></Description>
			<ArrayValues FirstDimension="1" SecondDimension="4">
				<AVal Column="1" Row="1"><![CDATA[""]]></AVal>
				<AVal Column="2" Row="1"><![CDATA[""]]></AVal>
				<AVal Column="3" Row="1"><![CDATA[""]]></AVal>
				<AVal Column="4" Row="1"><![CDATA["1"]]></AVal>
			</ArrayValues>
		</String>
		<Length Name="MEP_NumConnectionData">
			<Description><![CDATA[""]]></Description>
			<ArrayValues FirstDimension="1" SecondDimension="26">
				<AVal Column="1" Row="1">0</AVal>
				<AVal Column="2" Row="1">0</AVal>
				<AVal Column="3" Row="1">0</AVal>
				<AVal Column="4" Row="1">0</AVal>
				<AVal Column="5" Row="1">0</AVal>
				<AVal Column="6" Row="1">0</AVal>
				<AVal Column="7" Row="1">0</AVal>
				<AVal Column="8" Row="1">0</AVal>
				<AVal Column="9" Row="1">0</AVal>
				<AVal Column="10" Row="1">0</AVal>
				<AVal Column="11" Row="1">0</AVal>
				<AVal Column="12" Row="1">0</AVal>
				<AVal Column="13" Row="1">0</AVal>
				<AVal Column="14" Row="1">0</AVal>
				<AVal Column="15" Row="1">0</AVal>
				<AVal Column="16" Row="1">0</AVal>
				<AVal Column="17" Row="1">0</AVal>
				<AVal Column="18" Row="1">0</AVal>
				<AVal Column="19" Row="1">1</AVal>
				<AVal Column="20" Row="1">0</AVal>
				<AVal Column="21" Row="1">0</AVal>
				<AVal Column="22" Row="1">0</AVal>
				<AVal Column="23" Row="1">0</AVal>
				<AVal Column="24" Row="1">0</AVal>
				<AVal Column="25" Row="1">0</AVal>
				<AVal Column="26" Row="1">1</AVal>
			</ArrayValues>
		</Length>
		<Integer Name="MEP_NumberConnections">
			<Description><![CDATA["Number of Connections"]]></Description>
			<Value>1</Value>
		</Integer>
		<Integer Name="one_ConID">
			<Description><![CDATA[""]]></Description>
			<Value>0</Value>
		</Integer>
		<String Name="ConSystem_arr">
			<Description><![CDATA[""]]></Description>
			<ArrayValues FirstDimension="1" SecondDimension="0">
				<AVal Row="1"><![CDATA[""]]></AVal>
			</ArrayValues>
		</String>
		<String Name="ConType_arr">
			<Description><![CDATA[""]]></Description>
			<ArrayValues FirstDimension="1" SecondDimension="0">
				<AVal Row="1"><![CDATA[""]]></AVal>
			</ArrayValues>
		</String>

		<!-- mep_par_h: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="mep_par_h">
			<Description><![CDATA["Скрытые параметры"]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
		</Title>
		<Boolean Name="mun_elev">
			<Description><![CDATA["Ручной этаж"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Integer Name="n_elev">
			<Description><![CDATA["Номер этажа"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Integer>
		<Length Name="otm_elem">
			<Description><![CDATA["Отметка оси элемента"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="otm_elem_abs">
			<Description><![CDATA["Отметка оси элемента абсолютная"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Boolean Name="show_el">
			<Description><![CDATA["Показ элемента"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Integer Name="tConToolType">
			<Description><![CDATA["Тип инструмента"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Integer>

		<!-- mep_par_geom: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="mep_par_geom">
			<Description><![CDATA["Геометрия"]]></Description>
		</Title>
		<Length Name="mep_th_elem">
			<Description><![CDATA["Толщина стенки"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<String Name="mep_razm">
			<Description><![CDATA["Размер сечения (BxH), мм"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="mep_razm_abs">
			<Description><![CDATA["Размер сечения (MAXxMIN), мм"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<RealNum Name="mep_vol">
			<Description><![CDATA["Внутренний объём, куб.м."]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<RealNum Name="mep_s_el">
			<Description><![CDATA["Наружная площадь, кв.м."]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<RealNum Name="mep_s_in">
			<Description><![CDATA["Площадь сечения, кв.м."]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>

		<!-- mep_par_spec: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="mep_par_spec">
			<Description><![CDATA["Спецификация"]]></Description>
		</Title>
		<String Name="type_spec">
			<Description><![CDATA["Тип спецификации"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="syst_name">
			<Description><![CDATA["Имя системы"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="spec_add_param">
			<Description><![CDATA["Доп.параметры в смету"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="subpos">
			<Description><![CDATA["Входит в сборку"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="naen">
			<Description><![CDATA["Наименование"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="obozn">
			<Description><![CDATA["Обозначение"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<Integer Name="eq_code">
			<Description><![CDATA["Код"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Integer>
		<String Name="eq_plant">
			<Description><![CDATA["Завод-изготовитель"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="komment">
			<Description><![CDATA["Единица измерения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<RealNum Name="kol_vo_spec">
			<Description><![CDATA["Кол-во"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<RealNum Name="ves">
			<Description><![CDATA["Масса ед., кг."]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<RealNum Name="mep_m_ves">
			<Description><![CDATA["Вес п.м., кг."]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<RealNum Name="mep_l">
			<Description><![CDATA["Длина, м"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<RealNum Name="mep_s_ins">
			<Description><![CDATA["Площадь изоляции, кв.м."]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<RealNum Name="mep_s_pokr">
			<Description><![CDATA["Площадь покрытия, кв.м."]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<Material Name="mep_m_ins">
			<Description><![CDATA["Материал изоляции"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Material>
		<Material Name="mep_m_pokr">
			<Description><![CDATA["Материал покрытия"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Material>
		<RealNum Name="mep_ra">
			<Description><![CDATA["Расход"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<String Name="mep_m_gost">
			<Description><![CDATA["ГОСТ на материал"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="mep_gost">
			<Description><![CDATA["ГОСТ на элемент"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
	</Parameters>
</ParamSection>

<Copyright SectVersion="1" SectionFlags="0" SubIdent="0">
	<Author>GRAPHISOFT</Author>
	<License>
		<Type>CC BY-ND</Type>
		<Version>3.0</Version>
	</License>
</Copyright>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_FWM SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_FWM>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_BWM SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_BWM>

<Keywords SectVersion="1" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Keywords>

</Symbol>
