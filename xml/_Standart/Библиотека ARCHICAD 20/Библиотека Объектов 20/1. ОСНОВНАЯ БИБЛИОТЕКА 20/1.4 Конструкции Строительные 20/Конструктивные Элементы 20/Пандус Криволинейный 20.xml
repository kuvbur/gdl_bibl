<?xml version="1.0" encoding="UTF-8"?>
<Symbol IsArchivable="true" IsPlaceable="true" MainGUID="FC361E28-D255-481A-9514-961F44CA5274" MigrationValue="Normal" Owner="1196638531" Signature="1196644685" Version="38">
<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_3D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
if gs_detlevel_3d_m = 0 then end

if not (gs_shadow) then shadow off


! --- Ramp route parameters ----------------------------------------------------

if bAscent then
	put   rad*cos(-beta1), rad*sin(-beta1), heightAscent/n1, 0
	dx1=rad
	dy1=0
	dz1=0

	for k=1 to n1
		put   dx1, dy1, dz1, 0
		dx1=dx1-rad*(cos((k-1)*beta1)-cos(k*beta1))
		dy1=dy1+rad*(sin(k*beta1)-sin((k-1)*beta1))
		dz1=dz1+heightAscent/n1
	next k

	dx2=rad*cos(alph1)
	dy2=rad*sin(alph1)
	dz2=heightAscent

	for kk=1 to n2
		put    dx2, dy2, dz2, 0
		dx2=dx2-rad*(cos(alph1+(kk-1)*beta2)-cos(alph1+kk*beta2))
		dy2=dy2+rad*(sin(alph1+kk*beta2)-sin(alph1+(kk-1)*beta2))
		dz2=dz2+h2/n2
	next kk

	dx3=rad*cos(alph1+alph2)
	dy3=rad*sin(alph1+alph2)
	dz3=heightAscent+h2

	for kkk=1 to n1+1
		put    dx3, dy3, dz3, 0
		dx3=dx3-rad*(cos(alph1+alph2+(kkk-1)*beta1)-cos(alph1+alph2+kkk*beta1))
		dy3=dy3+rad*(sin(alph1+alph2+kkk*beta1)-sin(alph1+alph2+(kkk-1)*beta1))
		dz3=dz3+heightAscent/n1
	next kkk

	put    rad*cos(alph+beta1), rad*sin(alph+beta1), zzyzx-heightAscent/n1, 0
else
	dx1=rad
	dy1=0
	dz1=0
	put   rad*cos(-beta0), rad*sin(-beta0), zzyzx/gs_resol, 0

	for j=1 to gs_resol+1
		put   dx1, dy1, dz1, 0
		dx1=dx1-rad*(cos((j-1)*beta0)-cos(j*beta0))
		dy1=dy1+rad*(sin(j*beta0)-sin((j-1)*beta0))
		dz1=dz1+zzyzx/gs_resol
	next j
	put    rad*cos(alph+beta0), rad*sin(alph+beta0), zzyzx-zzyzx/gs_resol, 0
endif


! --- Ramp ---------------------------------------------------------------------

material matRamp
tube    4, nsp/4, 1+2+16+32+128,
		widthUsable/2,			-thicknessRamp,				0,
		widthUsable/2,			0,							0,
		-widthUsable/2,			0,							0,
		-widthUsable/2,			-thicknessRamp,				0,

		use (nsp)


! --- Side Flanges -------------------------------------------------------------

if not (bDiffSides) then
	for jj=1 to 2
		if jj=1 then
			neg=-1
		else
			neg=1
		endif

		if bSideFlange1 and bSideFlange2 then
			material matSideFlange1
			tube    4, nsp/4, 1+2+16+32+128,
			-neg*widthFull/2,									0,							0,
			-neg*widthFull/2,									heightSideFlange1,			0,
			-neg*widthFull/2-neg*widthSideFlange1,				heightSideFlange1,			0,
			-neg*widthFull/2-neg*widthSideFlange1,				0,							0,

			 use (nsp)

		endif

		if bSideFlange1 or bSideFlange2 then
			material matSideFlange2
			tube    4, nsp/4, 1+2+16+32+128,
			-neg*widthUsable/2,										0,							0,
			-neg*widthUsable/2+neg*widthSideFlange2,				0,							0,
			-neg*widthUsable/2+neg*widthSideFlange2,				heightSideFlange2,			0,
			-neg*widthUsable/2,										heightSideFlange2,			0,

			 use (nsp)

		endif
	next jj
else
	if bSideFlange2_out then
			material matSideFlange2_out
			tube    4, nsp/4, 1+2+16+32+128,
			-widthUsable/2, 								0, 								0,
			-widthUsable/2, 								heightSideFlange2_out, 			0,
			-widthUsable/2+widthSideFlange2_out, 			heightSideFlange2_out, 			0,
			-widthUsable/2+widthSideFlange2_out, 			0, 								0,

			 use (nsp)
	endif

	if bSideFlange2_in then
			material matSideFlange2_in
			tube    4, nsp/4, 1+2+16+32+128,
			widthUsable/2, 									0, 								0,
			widthUsable/2, 									heightSideFlange2_in, 			0,
			widthUsable/2-widthSideFlange2_in, 				heightSideFlange2_in, 			0,
			widthUsable/2-widthSideFlange2_in, 				0, 								0,

			 use (nsp)
	endif

	if bSideFlange1_out then
			material matSideFlange1_out
			tube    4, nsp/4, 1+2+16+32+128,
			-widthUsable/2+widthSideFlange2_out*bSideFlange2_out, 							0, 								0,
			-widthUsable/2+widthSideFlange2_out*bSideFlange2_out, 							heightSideFlange1_out, 			0,
			-widthUsable/2+widthSideFlange2_out*bSideFlange2_out+widthSideFlange1_out, 		heightSideFlange1_out, 			0,
			-widthUsable/2+widthSideFlange2_out*bSideFlange2_out+widthSideFlange1_out, 		0, 								0,

			 use (nsp)
	endif

	if bSideFlange1_in then
			material matSideFlange1_in
			tube    4, nsp/4, 1+2+16+32+128,
			widthUsable/2-widthSideFlange2_in*bSideFlange2_in, 								0, 								0,
			widthUsable/2-widthSideFlange2_in*bSideFlange2_in, 								heightSideFlange1_in, 			0,
			widthUsable/2-widthSideFlange2_in*bSideFlange2_in-widthSideFlange1_in, 			heightSideFlange1_in, 			0,
			widthUsable/2-widthSideFlange2_in*bSideFlange2_in-widthSideFlange1_in, 			0, 								0,

			use (nsp)
	endif
endif


! clear internal buffer
for i=1 to nsp
	n = get (1)
next i


end
]]>
</Script_3D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_2D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
dxa		= heightSideFlange1 * sin(ascentPercentage)
dxb		= heightSideFlange2 * sin(ascentPercentage)
dlta	= dxa * 360 / ((inRad + outRad) *pi)
dltb	= dxb * 360 / ((inRad + outRad) *pi)
dxa_i	= heightSideFlange1_in * sin(ascentPercentage)
dxb_i	= heightSideFlange2_in * sin(ascentPercentage)
dlta_i	= dxa_i * 360 / ((inRad + outRad) *pi)
dltb_i	= dxb_i * 360 / ((inRad + outRad) *pi)
dxa_o	= heightSideFlange1_out * sin(ascentPercentage)
dxb_o	= heightSideFlange2_out * sin(ascentPercentage)
dlta_o	= dxa_o * 360 / ((inRad + outRad) *pi)
dltb_o	= dxb_o * 360 / ((inRad + outRad) *pi)

breaklineWidth	= 0.05

gadi1	= asn(breaklineWidth / inRad)
gadi2	= asn(breaklineWidth / (inRad + widthSideFlange2))
gadi3	= asn(breaklineWidth / (inRad + widthSideFlange2 + widthSideFlange1))

gadm	= asn(breaklineWidth / rad)
gad0	= asn((arrowSize / 5) / rad)

gada1	= asn(breaklineWidth / outRad)
gada2	= asn(breaklineWidth / (outRad - widthSideFlange2))
gada3	= asn(breaklineWidth / (outRad - widthSideFlange2 - widthSideFlange1))

! --- Text ---------------------------------------------------------------------

! --- Oriented View ------------------------------ [

angleViewRot = 0
rrr = REQUEST ("View_Rotangle", "", angleViewRot)
totalRotate = (SYMB_ROTANGLE + angleViewRot) MOD 360

format = "%~"
rr	= REQUEST ("Linear_dimension", "", format)
if STRSTR(format, "m") then 
	_Unit = " m"
	formatString = "%m"
endif

if STRSTR(format, "cm") then 
	_Unit = " cm"
	formatString = "%~cm"
endif

if STRSTR(format, "mm") then
	_Unit = " mm"
	formatString = "%~mm"
endif

if STRSTR(format, "ffi") then
	_Unit = ""
	formatString = "%~ffi"
endif

if STRSTR(format, "fdi") then
	_Unit = ""
	formatString = "%~fdi"
endif

if STRSTR(format, "df") then
	_Unit = ""
	formatString = "%~df"
endif

if STRSTR(format, "fi") then
	_Unit = ""
	formatString = "%~fi"
endif

if STRSTR(format, "di") then
	_Unit = ""
	formatString = "%~di"
endif


! --- Oriented View ------------------------------ ]

define style text1 fontType, tx_size*100/GLOB_SCALE, 5, 0

if iFloorPlanDisplayType = DISPLAY_SYMBOLIC then
	if iTextType1 = TEXT_PERCENTAGE then
		gr1 = str (ascentPercentage, 4, 2)
		gr2 = str (percentage, 4, 2)
		gr_tx1 = TextPrefix1 + gr1 + " %"
		gr_tx2 = TextPrefix1 + gr2 + " %"
	else
		if iTextType1 = TEXT_RATIO then
			formatString = "%~"
			gr1 = str (ratioAscentLength, 4, 0)
			gr2 = str ("%~", ratioAscentHeight)
			gr3 = str (ratioLength, 4, 0)
			gr4 = str ("%~", ratioHeight)
			gr_tx1 = TextPrefix1 + gr1 + " : " + gr2
			gr_tx2 = TextPrefix1 + gr3 + " : " + gr4
		else
			if iTextType1 = TEXT_SEGMENTLENGTH then
				if bAscent then
					gr1 = str (formatString, lengthAscent)
					gr2 = str (formatString, lengthFull-lengthAscent*2)
					gr_tx1 = TextPrefix1 + gr1 + _Unit
					gr_tx2 = TextPrefix1 + gr2 + _Unit	
				else
					gr1 = str (formatString, lengthFull)
					gr_tx1 = TextPrefix1 + gr1 + _Unit
					gr_tx2 = TextPrefix1 + gr1 + _Unit
				endif	
			else
				if iTextType1 = TEXT_FULLLENGTH then
					gr1 = str (formatString, lengthFull)
					gr_tx1 = TextPrefix1 + gr1 + _Unit
					gr_tx2 = TextPrefix1 + gr1 + _Unit
				else
					gr_tx1 = TextPrefix1 + CustomText
					gr_tx2 = TextPrefix1 + CustomText
				endif
			endif
		endif
	endif

	if iTextType2 = TEXT_PERCENTAGE then
		gr1 = str (ascentPercentage, 4, 2)
		gr2 = str (percentage, 4, 2)
		gr_tx3 = TextPrefix2 + gr1 + " %"
		gr_tx4 = TextPrefix2 + gr2 + " %"
	else
		if iTextType2 = TEXT_RATIO then
			formatString = "%~"
			gr1 = str (ratioAscentLength, 4, 0)
			gr2 = str ("%~", ratioAscentHeight)
			gr3 = str (ratioLength, 4, 0)
			gr4 = str ("%~", ratioHeight)
			gr_tx3 = TextPrefix2 + gr1 + " : " + gr2
			gr_tx4 = TextPrefix2 + gr3 + " : " + gr4
		else
			if iTextType2 = TEXT_SEGMENTLENGTH then
				if bAscent then
					gr1 = str (formatString, lengthAscent)
					gr2 = str (formatString, lengthFull-lengthAscent*2)
					gr_tx3 = TextPrefix2 + gr1 + _Unit
					gr_tx4 = TextPrefix2 + gr2 + _Unit
				else
					gr1 = str (formatString, lengthFull)
					gr_tx3 = TextPrefix2 + gr1 + _Unit
					gr_tx4 = TextPrefix2 + gr1 + _Unit
				endif
			else
				if iTextType2 = TEXT_FULLLENGTH then
					gr1 = str (formatString, lengthFull)
					gr_tx3 = TextPrefix2 + gr1 + _Unit
					gr_tx4 = TextPrefix2 + gr1 + _Unit
				else
					gr_tx3 = TextPrefix2 + CustomText
					gr_tx4 = TextPrefix2 + CustomText
				endif
			endif
		endif
	endif
else
	gr1 = str (ascentPercentage, 4, 2)
	gr2 = str (percentage, 4, 2)
	gr_tx1 = gr1 + " %"
	gr_tx2 = gr2 + " %"
endif

style text1
rrr = request("Height_of_style","text1", shight1)
yPos = shight1*GLOB_SCALE/2000+0.1

! --- Hotspots -----------------------------------------------------------------
unID  = 1
hotspot2 0,  0,										unID : unID = unID + 1
hotspot2 inRad,  0,									unID : unID = unID + 1
hotspot2 outRad,  0,								unID : unID = unID + 1
hotspot2 inRad * cos(alph), inRad * sin(alph),		unID : unID = unID + 1
hotspot2 outRad * cos(alph), outRad * sin(alph),	unID : unID = unID + 1

StartSymbUNID = 100
EndSymbUNID = 1000

! ==============================================================================
!     2D symbol
! ==============================================================================

rampTextAngle1	= STW(gr_tx1) / 1000 * A_ * alph / lengthFull
rampTextAngle2	= STW(gr_tx2) / 1000 * A_ * alph / lengthFull

floorplanCutplaneHeight	= GLOB_CSTORY_ELEV - GLOB_HSTORY_ELEV + GLOB_CUTPLANES_INFO[1]
floorplanToprangeHeight	= GLOB_CSTORY_ELEV - GLOB_HSTORY_ELEV + GLOB_CUTPLANES_INFO[2]

if iFloorPlanDisplayType = DISPLAY_SYMBOLIC then
	breaklineAngle	= alph / 2
else
	if bAscent then
		rampAngle1		= ATN(zzyzx / (lengthFull - lengthAscent))
		rampAngle2		= rampAngle1 / 2
		if floorplanCutplaneHeight < TAN(rampAngle2) * lengthAscent then
			breaklineDist	= floorplanCutplaneHeight / TAN(rampAngle2)
			breaklineAngle	= breaklineDist * alph1 / lengthAscent
		else
			if floorplanCutplaneHeight < (zzyzx - TAN(rampAngle2) * lengthAscent) then
				breaklineDist	= lengthAscent + (floorplanCutplaneHeight - TAN(rampAngle2) * lengthAscent) / TAN(rampAngle1)
				breaklineAngle	= alph1 + (breaklineDist - lengthAscent) * alph2 / (lengthFull - lengthAscent * 2)
			else
				breaklineDist	= lengthFull - (zzyzx - floorplanCutplaneHeight) / TAN(rampAngle2)
				breaklineAngle	= alph - (lengthFull - breaklineDist) * alph1 / lengthAscent
			endif
		endif
	else
		rampAngle		= ATN(zzyzx / lengthFull)
		breaklineDist	= floorplanCutplaneHeight / TAN(rampAngle)
		breaklineAngle	= breaklineDist * alph / lengthFull
		endif
endif

if iFloorPlanDisplayType = DISPLAY_PROJECTED | iFloorPlanDisplayType = DISPLAY_OVERHEAD_PROJ then
	bShowText							= 1

	if breaklineAngle < eps then
		bShowDetailedSymbol				= 1
		bShowBreakline					= 0

		bSymbolBelowIsOverhead			= 1
		bSymbolAboveIsOverhead			= 1
	else
		bShowDetailedSymbol				= 1

		if breaklineAngle > alph - gadi1 then
			bShowBreakline				= 0
			bShowSymbolBelowBreakline	= 1
			bShowSymbolAboveBreakline	= 1

			bSymbolBelowIsOverhead		= 0
			bSymbolAboveIsOverhead		= 0
		else
			bShowBreakline				= 1
			bShowSymbolBelowBreakline	= 1
			bShowSymbolAboveBreakline	= (iFloorPlanDisplayType = DISPLAY_OVERHEAD_PROJ)

			bSymbolBelowIsOverhead		= 0
			bSymbolAboveIsOverhead		= (iFloorPlanDisplayType = DISPLAY_OVERHEAD_PROJ)
		endif
	endif
endif
if iFloorPlanDisplayType = DISPLAY_SYMBOLIC then
		bShowText					= 1
		bShowDetailedSymbol			= 1
		if bShowBreakline then
			bSymbolAboveIsOverhead	= 1
		else
			bSymbolAboveIsOverhead	= 0
		endif
		bSymbolBelowIsOverhead 		= 0
		bShowSymbolBelowBreakline 	= 1
		bShowSymbolAboveBreakline 	= 1
endif
if iFloorPlanDisplayType = DISPLAY_OUTLINES then
	bShowBreakline				= 0
	bShowDetailedSymbol			= 0
	bShowText					= 1

	bSymbolBelowIsOverhead		= 0
	bSymbolAboveIsOverhead		= 0

	bShowSymbolBelowBreakline	= 1
	bShowSymbolAboveBreakline	= 1
endif
if iFloorPlanDisplayType = DISPLAY_OVERHEAD_ALL then
	bShowBreakline				= 0
	bShowDetailedSymbol			= 1
	bShowText					= 0

	bSymbolBelowIsOverhead		= 1
	bSymbolAboveIsOverhead		= 1

	bShowSymbolBelowBreakline	= 1
	bShowSymbolAboveBreakline	= 1
endif

if bShowBreakline then
	if bShowSymbolBelowBreakline then
		gosub "symbol below breakline"
	endif
	if bShowSymbolAboveBreakline then
		gosub "symbol above breakline"
	endif
else
	gosub "symbol w/o breakline"
endif

!================================================================================
end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end
!================================================================================


"symbol w/o breakline":
	DRAWINDEX 10
	if bSymbolBelowIsOverhead | bSymbolAboveIsOverhead then
		symbolPen		= overheadPen
		symbolLinetype	= lineOverhead
	else
		symbolPen		= gs_cont_pen
		symbolLinetype	= lineCont
	endif

	if iFloorPlanDisplayType = DISPLAY_SYMBOLIC then
		symbolPen 		= gs_cont_pen
		symbolLinetype 	= lineCont
	endif

	pen symbolPen
	line_type symbolLinetype

	for k = 1 to 2

		gosub "radius calculation"

		arc2 0, 0, rd, 0, alph
		if bShowDetailedSymbol then
			if NOT(bDiffSides) then
				if bSideFlange1+bSideFlange2>0 then arc2 0, 0, rd+neg*widthSideFlange2, 0, alph
				if bSideFlange1*bSideFlange2>0 then arc2 0, 0, rd+neg*(widthSideFlange2+widthSideFlange1), 0, alph
			else
				if kabl+kbrd>0 then arc2 0, 0, rd+neg*kb_brd, 0, alph
				if kabl*kbrd>0 then arc2 0, 0, rd+neg*(kb_brd+kb_abl), 0, alph
			endif
		endif

		if bAscent then
			ascentLinePos	= alph1 * (k = 1) + (alph - alph1) * (k = 2)
			gosub "ascent line"
		endif

		gadi1=gada1
		gadi2=gada2
		gadi3=gada3

	next k

	if alph > 360 then
		line_type lineDashed
	else
		line_type symbolLinetype
	endif

	if iFloorPlanDisplayType = DISPLAY_SYMBOLIC then
		line2 inRad, 0, outRad, 0
	else
		line2 inRad, 0, rad-arrowSize/5, 0
		line2 outRad, 0, rad+arrowSize/5, 0
	endif

	line_type symbolLinetype
	line2 inRad*cos(alph), inRad*sin(alph), outRad*cos(alph), outRad*sin(alph)

	! --- Arrow --------------------------------------------------------------------
	if (bWalkingLine and iFloorPlanDisplayType = DISPLAY_SYMBOLIC) or iFloorPlanDisplayType <> DISPLAY_SYMBOLIC then
		DRAWINDEX 20
		if iFloorPlanDisplayType = DISPLAY_SYMBOLIC then
			symbolPen 		= penWalkingBelow
		else
			symbolPen 		= penArrow
		endif

		pen symbolPen

		if iFloorPlanDisplayType = DISPLAY_SYMBOLIC then
			arc2 0, 0, rad, 0, alph
		else
			arc2 0, 0, rad, asn((arrowSize/5)/rad), alph
		endif

		if (bStartSymbol and iFloorPlanDisplayType = DISPLAY_SYMBOLIC and not(bReverse)) or iFloorPlanDisplayType <> DISPLAY_SYMBOLIC then
			DRAWINDEX 30
			penStartSymbol = penStartSymbolBelow
			gosub "StartSymbol"
		endif

		if (bEndSymbol and iFloorPlanDisplayType = DISPLAY_SYMBOLIC) or iFloorPlanDisplayType <> DISPLAY_SYMBOLIC then
			DRAWINDEX 30
			if 	bAscent and iFloorPlanDisplayType = DISPLAY_SYMBOLIC and (lengthAscent > arrowHeight) |\
				bAscent and iFloorPlanDisplayType <> DISPLAY_SYMBOLIC and (lengthAscent > arrowSize) |\
				not(bAscent) and iFloorPlanDisplayType = DISPLAY_SYMBOLIC and (lengthFull > arrowHeight) |\
				not(bAscent) and iFloorPlanDisplayType <> DISPLAY_SYMBOLIC and (lengthFull > arrowSize) then

				arrowPos = alph
				reversePos = alph
				penEndSymbol = penEndSymbolBelow
				gosub "arrow line"
			endif

			if bAscent then
				if 	iFloorPlanDisplayType = DISPLAY_SYMBOLIC and (lengthAscent > arrowHeight) |\
					iFloorPlanDisplayType <> DISPLAY_SYMBOLIC and (lengthAscent > arrowSize)then

					arrowPos = alph1
					reversePos = alph1
					gosub "arrow line"
				endif
			
				if 	iFloorPlanDisplayType = DISPLAY_SYMBOLIC and (lengthFull - lengthAscent*2 > arrowHeight) |\
					iFloorPlanDisplayType <> DISPLAY_SYMBOLIC and (lengthFull - lengthAscent*2 > arrowSize)then

					arrowPos = alph1 + alph2
					reversePos = alph2
					gosub "arrow line"
				endif
			endif
		endif
	endif

	! --- Text ---------------------------------------------------------------------
	pen penText
	if iFloorPlanDisplayType = DISPLAY_SYMBOLIC then
		if bShowText1  and (iTextType1 <> TEXT_FULLLENGTH and iTextType1 <> TEXT_CUSTOM or not(bAscent)) then
			if 	bAscent and (lengthFull - lengthAscent*2 > STW(gr_tx2) / 1000 * GLOB_SCALE) |\
				not(bAscent) and (lengthFull > STW(gr_tx2) / 1000 * GLOB_SCALE) then
	
					textPos		= alph / 2
					textCont	= gr_tx2
					_actyPos	= yPos
					gosub "text rotation"
			endif
		endif
		if bShowText2  and (iTextType2 <> TEXT_FULLLENGTH and iTextType2 <> TEXT_CUSTOM or not(bAscent)) then
			if 	bAscent and (lengthFull - lengthAscent*2 > STW(gr_tx4) / 1000 * GLOB_SCALE) |\
				not(bAscent) and (lengthFull > STW(gr_tx4) / 1000 * GLOB_SCALE) then
					textPos		= alph / 2
					textCont	= gr_tx4
					_actyPos 	= - yPos
					gosub "text rotation"
			endif
		endif

		if bAscent then
			if bShowText1 then
				if lengthAscent > STW(gr_tx1) / 1000 * GLOB_SCALE then
					textPos		= alph1 / 2
					textCont	= gr_tx1
					_actyPos	= yPos
	
					gosub "text rotation"	
					if iTextType1 <> TEXT_FULLLENGTH and iTextType1 <> TEXT_CUSTOM then
						textPos		= alph - alph1 / 2
						textCont	= gr_tx1
	
						gosub "text rotation"
					endif
				endif
			endif

			if bShowText2 then
				if lengthAscent > STW(gr_tx3) / 1000 * GLOB_SCALE then
					_actyPos	= - yPos
					textPos		= alph1 / 2
					textCont	= gr_tx3
	
					gosub "text rotation"
	
					if iTextType2 <> TEXT_FULLLENGTH and iTextType2 <> TEXT_CUSTOM then
						textPos		= alph - alph1 / 2
						textCont	= gr_tx3
						gosub "text rotation"
					endif
				endif
			endif
		endif
	else
		if bShowText then
			DRAWINDEX 40
			textPos		= alph / 2
			textCont	= gr_tx2
			_actyPos	= yPos
			gosub "text rotation"
	
			if bAscent then
				textPos		= alph1 / 2
				textCont	= gr_tx1
				gosub "text rotation"
	
				textPos		= alph - alph1 / 2
				textCont	= gr_tx1
				gosub "text rotation"
			endif
		endif
	endif

	! --- Fill --------------------------------------------------------------------
	if bFill and NOT(bSymbolAboveIsOverhead) then
		DRAWINDEX 10
		alpha = alph
		beta = alph

		fill gs_fill_type
		if beta < 360 then
			poly2_b 7, 2+4+64, gs_fill_pen, gs_back_pen,
				inRad, 0, 0,
				outRad, 0, 0,
				0, 0, 900,
				0, alpha, 4000,
				inRad * cos(beta), inRad * sin(beta), 0,
				0, 0, 900,
				0, -beta, 4000
		else
			poly2_b 4, 2+4+64, gs_fill_pen, gs_back_pen,
				0, 0, 900,
				outRad, 360, 4000,
				0, 0, 900,
				inRad, 360, 4000
		endif
	endif

return


"symbol below breakline":
	DRAWINDEX 10
	if bSymbolBelowIsOverhead then
		symbolPen		= overheadPen
		symbolLinetype	= lineOverhead
	else
		symbolPen		= gs_cont_pen
		symbolLinetype	= lineCont
	endif

	pen symbolPen
	line_type symbolLinetype

	if NOT(bShowSymbolAboveBreakline) then
		hotspot2 inRad * cos(breaklineAngle - gadi1), inRad * sin(breaklineAngle - gadi1),		unID : unID = unID + 1
		hotspot2 outRad * cos(breaklineAngle - gada1), outRad * sin(breaklineAngle - gada1),	unID : unID = unID + 1
	endif

	for k = 1 to 2
		kk = 1
		gosub "radius calculation"

		arc2 0, 0, rd, (breaklineAngle+gadi1)*(kk-1), (breaklineAngle-gadi1)*(2-kk)+alph*(kk-1)
		if bShowDetailedSymbol then
			if bDiffSides = 0 then
				if bSideFlange1+bSideFlange2>0 then arc2 0, 0, rd+neg*widthSideFlange2, (breaklineAngle+gadi2)*(kk-1), (breaklineAngle-gadi2)*(2-kk)+alph*(kk-1)
				if bSideFlange1*bSideFlange2>0 then arc2 0, 0, rd+neg*widthSideFlange2+neg*widthSideFlange1, (breaklineAngle+gadi3)*(kk-1), (breaklineAngle-gadi3)*(2-kk)+alph*(kk-1)
			else
				if kabl+kbrd>0 then arc2 0, 0, rd+neg*kb_brd, (breaklineAngle+kgadi2)*(kk-1), (breaklineAngle-kgadi2)*(2-kk)+alph*(kk-1)
				if kabl*kbrd>0 then arc2 0, 0, rd+neg*kb_brd+neg*kb_abl, (breaklineAngle+kgadi3)*(kk-1), (breaklineAngle-kgadi3)*(2-kk)+alph*(kk-1)
			endif
		endif

		if bAscent then
			ascentLinePos	= alph1 * (k = 1) + (alph - alph1) * (k = 2)
			if k = 1 then
				bDrawAscentline1	= (breaklineAngle > alph1)
				if bDrawAscentline1 then
					gosub "ascent line"
				endif
			else
				bDrawAscentline2	= (breaklineAngle > alph - alph1)
				if bDrawAscentline2 then
					gosub "ascent line"
				endif
			endif
		endif

		gadi1=gada1
		gadi2=gada2
		gadi3=gada3

	next k

	if alph > 360 and bShowSymbolAboveBreakline then
		line_type lineDashed
	else
		line_type symbolLinetype
	endif

	if iFloorPlanDisplayType = DISPLAY_SYMBOLIC then
		line2 inRad, 0, outRad, 0
	else
		line2 inRad, 0, rad-arrowSize/5, 0
		line2 outRad, 0, rad+arrowSize/5, 0
	endif

	rot2 breaklineAngle
	add2 rad, 0

	if iFloorPlanDisplayType = DISPLAY_SYMBOLIC then
		symbolPen 		= penBreakLineBelow
		symbolLinetype 	= ltBreakLineBelow
	endif

	if bShowBreakline then	
		pen symbolPen
		line_type symbolLinetype
		line2 -widthUsable/2, -breaklineWidth, widthUsable/2, -breaklineWidth
	endif
	del 2

	! --- Arrow --------------------------------------------------------------------
	if (bWalkingLine and iFloorPlanDisplayType = DISPLAY_SYMBOLIC) or iFloorPlanDisplayType <> DISPLAY_SYMBOLIC then
		DRAWINDEX 20
		if iFloorPlanDisplayType = DISPLAY_SYMBOLIC then
			symbolPen 		= penWalkingBelow
			symbolLinetype 	= ltWalkingBelow
		else
			symbolPen 		= penArrow
		endif
	
		pen symbolPen
		line_type symbolLinetype

		if iFloorPlanDisplayType = DISPLAY_SYMBOLIC then
			arc2 0, 0, rad, 0, (breaklineAngle-gadm)*(2-kk)+alph*(kk-1)
		else
			arc2 0, 0, rad, gad0+(breaklineAngle+gadm-gad0)*(kk-1), (breaklineAngle-gadm)*(2-kk)+alph*(kk-1)
		endif

		if (bStartSymbol and iFloorPlanDisplayType = DISPLAY_SYMBOLIC and not(bReverse)) or iFloorPlanDisplayType <> DISPLAY_SYMBOLIC then
			DRAWINDEX 30
			penStartSymbol = penStartSymbolBelow
			gosub "StartSymbol"
		endif
	
		if (bEndSymbol and iFloorPlanDisplayType = DISPLAY_SYMBOLIC) or iFloorPlanDisplayType <> DISPLAY_SYMBOLIC then
			DRAWINDEX 30
			if 	bAscent and iFloorPlanDisplayType = DISPLAY_SYMBOLIC and (lengthFull / 2 - lengthAscent - tan(gadm) * outRad/2 > arrowHeight) |\
				bAscent and iFloorPlanDisplayType <> DISPLAY_SYMBOLIC and (lengthFull / 2 - lengthAscent - tan(gadm) * outRad/2 > arrowSize) |\
				not(bAscent) and iFloorPlanDisplayType = DISPLAY_SYMBOLIC and (lengthFull / 2 - tan(gadm) * outRad/2 > arrowHeight) |\
				not(bAscent) and iFloorPlanDisplayType <> DISPLAY_SYMBOLIC and (lengthFull / 2 - tan(gadm) * outRad/2 > arrowSize) then

				arrowPos = breaklineAngle - gadm
				penEndSymbol = penEndSymbolBelow
				reversePos = breaklineAngle - gadm
				gosub "arrow line"
			endif
		
			if bAscent then
				if breaklineAngle > alph1 then
					if 	bAscent and iFloorPlanDisplayType = DISPLAY_SYMBOLIC and (lengthAscent > arrowHeight) |\
						bAscent and iFloorPlanDisplayType <> DISPLAY_SYMBOLIC and (lengthAscent > arrowSize) then

						arrowPos = alph1
						reversePos = alph1
						gosub "arrow line"
					endif
				endif
		
				if breaklineAngle > alph - alph1 then
					if 	bAscent and iFloorPlanDisplayType = DISPLAY_SYMBOLIC and (lengthAscent > arrowHeight) |\
						bAscent and iFloorPlanDisplayType <> DISPLAY_SYMBOLIC and (lengthAscent > arrowSize) then

						arrowPos = alph1 + alph2
						reversePos = alph1
						gosub "arrow line"
					endif
				endif
			endif
		endif
	endif

	! --- Text ---------------------------------------------------------------------
	pen penText
	if iFloorPlanDisplayType = DISPLAY_SYMBOLIC then
		if bAscent then
			if bShowText1 then
				_actyPos	= yPos
				textPos		= MIN(alph / 2, alph1 + (breaklineAngle - alph1) / 2)
				textCont	= gr_tx2
				if breaklineAngle - alph1 > rampTextAngle2 then gosub "text rotation"
				if (iTextType1 <> TEXT_FULLLENGTH and iTextType1 <> TEXT_CUSTOM) then
					textPos		= MIN(alph1, breaklineAngle) / 2
					textCont	= gr_tx1
					if textPos * 2 > rampTextAngle1 then gosub "text rotation"
				endif
			endif

			if bShowText2 then
				_actyPos	= - yPos
				textPos		= MIN(alph / 2, alph1 + (breaklineAngle - alph1) / 2)
				textCont	= gr_tx4
				if breaklineAngle - alph1 > rampTextAngle2 then gosub "text rotation"
				if (iTextType2 <> TEXT_FULLLENGTH and iTextType2 <> TEXT_CUSTOM) then
					textPos		= MIN(alph1, breaklineAngle) / 2
					textCont	= gr_tx3
					if textPos * 2 > rampTextAngle1 then gosub "text rotation"
				endif
			endif
		else
			textPos		= breaklineAngle / 2
			textCont	= gr_tx2
			_actyPos	= yPos
			if breaklineAngle > rampTextAngle1 then gosub "text rotation"

			textPos		= breaklineAngle / 2
			textCont	= gr_tx4
			_actyPos	= - yPos
			if breaklineAngle > rampTextAngle1 then gosub "text rotation"
		endif
	else
		if bShowtext then
			DRAWINDEX 40
			_actyPos	= yPos
			if NOT(bSymbolBelowIsOverhead) then
				if bAscent then
					textPos		= MIN(alph1, breaklineAngle) / 2
					textCont	= gr_tx1
					if textPos * 2 > rampTextAngle1 then gosub "text rotation"
		
					textPos		= MIN(alph / 2, alph1 + (breaklineAngle - alph1) / 2)
					textCont	= gr_tx2
					if breaklineAngle - alph1 > rampTextAngle2 then gosub "text rotation"
		
					textPos		= alph - alph1 + (breaklineAngle + alph1 - alph) / 2
					textCont	= gr_tx1
					if breaklineAngle - (alph - alph1) > rampTextAngle1 then gosub "text rotation"
				else
					textPos		= breaklineAngle / 2
					textCont	= gr_tx2
					if breaklineAngle > rampTextAngle1 then gosub "text rotation"
				endif
			endif
		endif
	endif

	! --- Fill --------------------------------------------------------------------
	if bFill then
		DRAWINDEX 10
		alpha = breaklineAngle - gada1 + gada1 * (bShowSymbolAboveBreakline and NOT(bSymbolAboveIsOverhead))
		gadi1 = asn(breaklineWidth / inRad)
		beta = breaklineAngle - gadi1 + gadi1 * (bShowSymbolAboveBreakline and NOT(bSymbolAboveIsOverhead))

		fill gs_fill_type
		if breaklineAngle < 360-EPS then
			poly2_b 7, 2+4+64, gs_fill_pen, gs_back_pen,
				inRad, 0, 0,
				outRad, 0, 0,
				0, 0, 900,
				0, alpha, 4000,
				inRad * cos(beta), inRad * sin(beta), 0,
				0, 0, 900,
				0, -beta, 4000
		else
			poly2_b 4, 2+4+64, gs_fill_pen, gs_back_pen,
				0, 0, 900,
				outRad, 360, 4000,
				0, 0, 900,
				inRad, 360, 4000
		endif
	endif
return


"symbol above breakline":
	DRAWINDEX 10
	if bSymbolAboveIsOverhead then
		symbolPen		= overheadPen
		symbolLinetype	= lineOverhead
	else
		symbolPen		= gs_cont_pen
		symbolLinetype	= lineCont
	endif

	pen symbolPen
	line_type symbolLinetype

	line2 inRad*cos(alph), inRad*sin(alph), outRad*cos(alph), outRad*sin(alph)

	for k = 1 to 2
		kk = 2
		gosub "radius calculation"

		arc2 0, 0, rd, (breaklineAngle+gadi1)*(kk-1), (breaklineAngle-gadi1)*(2-kk)+alph*(kk-1)

		if bShowDetailedSymbol then
			if bDiffSides = 0 then
				if bSideFlange1+bSideFlange2>0 then arc2 0, 0, rd+neg*widthSideFlange2, (breaklineAngle+gadi2)*(kk-1), (breaklineAngle-gadi2)*(2-kk)+alph*(kk-1)
				if bSideFlange1*bSideFlange2>0 then arc2 0, 0, rd+neg*widthSideFlange2+neg*widthSideFlange1, (breaklineAngle+gadi3)*(kk-1), (breaklineAngle-gadi3)*(2-kk)+alph*(kk-1)
			else
				if kabl+kbrd>0 then arc2 0, 0, rd+neg*kb_brd, (breaklineAngle+kgadi2)*(kk-1), (breaklineAngle-kgadi2)*(2-kk)+alph*(kk-1)
				if kabl*kbrd>0 then arc2 0, 0, rd+neg*kb_brd+neg*kb_abl, (breaklineAngle+kgadi3)*(kk-1), (breaklineAngle-kgadi3)*(2-kk)+alph*(kk-1)
			endif
		endif

		if bAscent then
			if k = 1 then
				bDrawAscentline1	= (breaklineAngle < alph1)
				if bDrawAscentline1 then
					gosub "ascent line"
				endif
			else
				bDrawAscentline2	= (breaklineAngle < alph - alph1)
				if bDrawAscentline2 then
					gosub "ascent line"
				endif
			endif
		endif

		gadi1=gada1
		gadi2=gada2
		gadi3=gada3

	next k

	if bShowBreakline then
		rot2 breaklineAngle
		add2 rad, 0
	
		if iFloorPlanDisplayType = DISPLAY_SYMBOLIC then
			symbolPen 		= penBreakLineAbove
			symbolLinetype 	= ltBreakLineAbove
		endif
	
		pen symbolPen
		line_type symbolLinetype

		line2 -widthUsable/2, breaklineWidth, widthUsable/2, breaklineWidth
		del 2
	endif


	if (bWalkingLine and not(bStop) and iFloorPlanDisplayType = DISPLAY_SYMBOLIC) or iFloorPlanDisplayType <> DISPLAY_SYMBOLIC then
		DRAWINDEX 20
		if iFloorPlanDisplayType = DISPLAY_SYMBOLIC then
			symbolPen 		= penWalkingAbove
			line_type ltWalkingAbove
		else
			symbolPen 		= penArrow
		endif
	
		pen symbolPen
		arc2 0, 0, rad, gad0+(breaklineAngle+gadm-gad0)*(kk-1), (breaklineAngle-gadm)*(2-kk)+alph*(kk-1)

		if bShowAboveBreak then
			DRAWINDEX 30
			rot2 breaklineAngle+gadm
			penStartSymbol = penStartSymbolAbove
				gosub "StartSymbol"
			del 1
		endif
	
		if bEndSymbol or iFloorPlanDisplayType <> DISPLAY_SYMBOLIC then
			DRAWINDEX 30
			if 	bAscent and iFloorPlanDisplayType = DISPLAY_SYMBOLIC and (lengthAscent  > arrowHeight) |\
				bAscent and iFloorPlanDisplayType <> DISPLAY_SYMBOLIC and (lengthAscent  > arrowSize) |\
				not(bAscent) and iFloorPlanDisplayType = DISPLAY_SYMBOLIC and (lengthFull / 2 - tan(gadm) * outRad > arrowHeight) |\
				not(bAscent) and iFloorPlanDisplayType <> DISPLAY_SYMBOLIC and (lengthFull / 2 - tan(gadm) * outRad > arrowSize) then

				arrowPos = alph
				penEndSymbol = penEndSymbolAbove
				reversePos = alph / 2 - gadm
				gosub "arrow line"
			endif
			if bAscent then
				if breaklineAngle < alph1 then
					if 	bAscent and iFloorPlanDisplayType = DISPLAY_SYMBOLIC and (lengthAscent > arrowHeight) |\
						bAscent and iFloorPlanDisplayType <> DISPLAY_SYMBOLIC and (lengthAscent > arrowSize) then

						arrowPos = alph1
						reversePos = alph1
						gosub "arrow line"
					endif
				endif
		
				if breaklineAngle < alph - alph1 then
					if 	bAscent and iFloorPlanDisplayType = DISPLAY_SYMBOLIC and (lengthFull / 2 - lengthAscent - tan(gadm) * outRad > arrowHeight) |\
						bAscent and iFloorPlanDisplayType <> DISPLAY_SYMBOLIC and (lengthFull / 2 - lengthAscent - tan(gadm) * outRad > arrowSize) then

						arrowPos = alph1 + alph2
						reversePos = alph2/2-gadm
						gosub "arrow line"
					endif
				endif
			endif
		endif
	endif

	! --- Text ---------------------------------------------------------------------
	pen penText
	if iFloorPlanDisplayType = DISPLAY_SYMBOLIC then
		if bAscent then
			if bShowText1 and (iTextType1 <> TEXT_FULLLENGTH and iTextType1 <> TEXT_CUSTOM) then
				_actyPos	= yPos
				textPos		= MAX(alph / 2, breaklineAngle + (alph - alph1 - breaklineAngle) / 2)
				textCont	= gr_tx2
				if alph - alph1 - breaklineAngle > rampTextAngle2 then gosub "text rotation"
	
				textPos		= MAX(alph - alph1 + alph1 / 2, alph - (alph - breaklineAngle) / 2)
				textCont	= gr_tx1
				if alph - breaklineAngle > rampTextAngle1 then gosub "text rotation"
			endif
			if bShowText2 and (iTextType2 <> TEXT_FULLLENGTH and iTextType2 <> TEXT_CUSTOM) then
				_actyPos	= - yPos	
				textPos		= MAX(alph / 2, breaklineAngle + (alph - alph1 - breaklineAngle) / 2)
				textCont	= gr_tx4
				if alph - alph1 - breaklineAngle > rampTextAngle2 then gosub "text rotation"
	
				textPos		= MAX(alph - alph1 + alph1 / 2, alph - (alph - breaklineAngle) / 2)
				textCont	= gr_tx3
				if alph - breaklineAngle > rampTextAngle1 then gosub "text rotation"
			endif
		else
			if bShowText1 then
				_actyPos	= yPos
				textPos		= breaklineAngle + (alph - breaklineAngle) / 2
				textCont	= gr_tx2
				if alph - breaklineAngle > rampTextAngle2 then gosub "text rotation"
			endif
			if bShowText2 then
				_actyPos	= - yPos
				textPos		= breaklineAngle + (alph - breaklineAngle) / 2
				textCont	= gr_tx4
				if alph - breaklineAngle > rampTextAngle2 then gosub "text rotation"
			endif
		endif
	else
		if bShowText then
			DRAWINDEX 40
			_actyPos	= yPos	
			if bAscent then
				textPos		= breaklineAngle + (alph1 - breaklineAngle) / 2
				textCont	= gr_tx1
				if alph1 - breaklineAngle > rampTextAngle1 then gosub "text rotation"
		
				textPos		= MAX(alph / 2, breaklineAngle + (alph - alph1 - breaklineAngle) / 2)
				textCont	= gr_tx2
				if alph - alph1 - breaklineAngle > rampTextAngle2 then gosub "text rotation"
		
				textPos		= MAX(alph - alph1 + alph1 / 2, alph - (alph - breaklineAngle) / 2)
				textCont	= gr_tx1
				if alph - breaklineAngle > rampTextAngle1 then gosub "text rotation"
			else
				textPos		= breaklineAngle + (alph - breaklineAngle) / 2
				textCont	= gr_tx2
				if alph - breaklineAngle > rampTextAngle2 then gosub "text rotation"
			endif
		endif
	endif
	! --- Fill --------------------------------------------------------------------
	if bFill and NOT(bSymbolAboveIsOverhead) then
		DRAWINDEX 10
		alph = min(alph, 360)

		alpha = alph - breaklineAngle - gada1 * NOT(bShowSymbolBelowBreakline)
		gadi1 = asn(breaklineWidth / inRad)
		beta = alph - breaklineAngle - gadi1 * NOT(bShowSymbolBelowBreakline)

		rot2 breaklineAngle

	fill gs_fill_type
		poly2_b 7, 2+4+64, gs_fill_pen, gs_back_pen,
			inRad, 0, 0,
			outRad, 0, 0,
			0, 0, 900,
			0, alpha, 4000,
			inRad * cos(beta), inRad * sin(beta), 0,
			0, 0, 900,
			0, -beta, 4000

		del 1
	endif
return


"ascent line":

	if alph > 360 + ascentLinePos and bShowSymbolAboveBreakline then
		line_type lineDashed
	else
		line_type symbolLinetype
	endif

	ascentLinePos	= alph1 * (k = 1) + (alph - alph1) * (k = 2)

	rot2 ascentLinePos
	add2 inRad + (outRad - inRad) / 2, 0

	if NOT(bDiffSides) then
		line2 -(widthUsable / 2 - (widthSideFlange2  * bSideFlange2 + widthSideFlange1 * bSideFlange1) * (bShowDetailedSymbol)), 0,
				(widthUsable / 2 - (widthSideFlange2 * bSideFlange2 + widthSideFlange1 * bSideFlange1) * (bShowDetailedSymbol)), 0
	else
		line2 -(widthUsable / 2 - (widthSideFlange2_in  * bSideFlange2_in + widthSideFlange1_in  * bSideFlange1_in) * (bShowDetailedSymbol)), 0,
				(widthUsable / 2 - (widthSideFlange2_out * bSideFlange2_out + widthSideFlange1_out * bSideFlange1_out) * (bShowDetailedSymbol)), 0
	endif

	del 2

	if bShowDetailedSymbol then
		rot2 ascentLinePos - dltb
		add2 inRad + (outRad - inRad) / 2, 0

		if NOT(bDiffSides) then
			if bSideFlange2 then
				line2 -widthUsable / 2, 0,
						-widthUsable / 2 + widthSideFlange2, 0

				line2 widthUsable / 2, 0,
						widthUsable / 2 - widthSideFlange2, 0
			endif
		else
			if bSideFlange2_in then
				line2 -widthUsable / 2, 0,
						-widthUsable / 2 + widthSideFlange2_in, 0
			endif
			if bSideFlange2_out then
				line2 widthUsable / 2, 0,
						widthUsable / 2 - widthSideFlange2_out, 0
			endif
		endif

		del 2

		rot2 ascentLinePos - dlta
		add2 inRad + (outRad - inRad) / 2, 0

		if NOT(bDiffSides) then
			if bSideFlange1 then
				line2 -widthUsable / 2 + bSideFlange2 * widthSideFlange2, 0,
						-widthUsable / 2 + bSideFlange2 * widthSideFlange2 + widthSideFlange1, 0

				line2 widthUsable / 2 - bSideFlange2 * widthSideFlange2, 0,
						widthUsable / 2 - bSideFlange2 * widthSideFlange2 - widthSideFlange1, 0
			endif
		else
			if bSideFlange1_in then
				line2 -widthUsable / 2 + bSideFlange2_in * widthSideFlange2_in, 0,
						-widthUsable / 2 + bSideFlange2_in * widthSideFlange2_in + widthSideFlange1_in, 0
			endif
			if bSideFlange1_out then
				line2 widthUsable / 2 - bSideFlange2_out * widthSideFlange2_out, 0,
						widthUsable / 2 - bSideFlange2_out * widthSideFlange2_out - widthSideFlange1_out, 0
			endif
		endif

		del 2
	endif

	line_type symbolLinetype

return


"radius calculation":

	if k = 1 then
		rd = inRad
		kbrd = bSideFlange2_in
		kb_brd = widthSideFlange2_in
		kabl = bSideFlange1_in
		kb_abl = widthSideFlange1_in
		kgadi2 = asn(breaklineWidth / (inRad + widthSideFlange2_in))
		kgadi3 = asn(breaklineWidth / (inRad + widthSideFlange2_in + widthSideFlange1_in))
		alp = alph1
		neg = 1
	else
		rd = outRad
		kbrd = bSideFlange2_out
		kb_brd = widthSideFlange2_out
		kabl = bSideFlange1_out
		kb_abl = widthSideFlange1_out
		kgadi2 = asn(breaklineWidth / (outRad - widthSideFlange2_out))
		kgadi3 = asn(breaklineWidth / (outRad - widthSideFlange2_out - widthSideFlange1_out))
		alp = alph1 + alph2
		neg = -1
	endif

return


"arrow line":
	
	if iFloorPlanDisplayType = DISPLAY_SYMBOLIC then
		fill fillEndSymbol
		if iEndSymbol = 1 or iEndSymbol = 3 or iEndSymbol = 5 then
			_actSymbolLength = widthUsable / 2
			_actSymbolHeight = arrowHeight
		endif

		if iEndSymbol = 2 or iEndSymbol = 4 or  iEndSymbol = 6 then
			_actSymbolLength = arrowWidth / 2
			_actSymbolHeight = arrowHeight
		endif

		if iEndSymbol = 1 or iEndSymbol = 2 then
			temp_ArrowMask=0
		else
			temp_ArrowMask=1
		endif

		_gamma = atn(_actSymbolHeight / rad)
		_H = 2 * sin(_gamma / 2) * rad
		_Y = 2 * sin(_gamma / 2) * cos(_gamma / 2) * rad
		_X = sqr((_H *_H) - (_Y * _Y))

		rot2 arrowPos - _gamma

		if bReverse then
			mul2 1, -1
			rot2 -_gamma*2 + reversePos
		endif

		add2 rad, 0

		POLY2_ 5, 1,
			0,					0,		temp_ArrowMask,
			_actSymbolLength,	0, 		1,
			-_X, 				_Y, 	1,
			-_actSymbolLength, 	0, 		temp_ArrowMask,
			0,					0,		- 1


		if iEndSymbol = 3 or iEndSymbol = 4 then
			poly2_B 5, 2, gs_fill_pen, penEndSymbol,
				0,					0,		temp_ArrowMask,
				_actSymbolLength,	0, 		1,
				-_X, 				_Y, 	1,
				-_actSymbolLength, 	0, 		temp_ArrowMask,
				0,					0,		- 1

		else
			if iEndSymbol = 5 or iEndSymbol = 6 then
				poly2_B 4, 2, gs_fill_pen, penEndSymbol,
					0,					0,		temp_ArrowMask,
					_actSymbolLength,	0, 		1,
					-_X, 				_Y, 	temp_ArrowMask,
					0,					0,		-1
			endif
		endif

		hotspot2	-_actSymbolLength,	_actSymbolHeight,		EndSymbUNID, arrowHeight, 1+128	: EndSymbUNID = EndSymbUNID + 1
		hotspot2	-_actSymbolLength,	0,						EndSymbUNID, arrowHeight, 2		: EndSymbUNID = EndSymbUNID + 1
		hotspot2	-_actSymbolLength,	_actSymbolHeight + 1,	EndSymbUNID, arrowHeight, 3		: EndSymbUNID = EndSymbUNID + 1

		hotspot2	_actSymbolLength,	_actSymbolHeight,		EndSymbUNID, arrowHeight, 1+128 : EndSymbUNID = EndSymbUNID + 1
		hotspot2	_actSymbolLength, 	0,						EndSymbUNID, arrowHeight, 2		: EndSymbUNID = EndSymbUNID + 1
		hotspot2	_actSymbolLength, 	_actSymbolHeight + 1,	EndSymbUNID, arrowHeight, 3		: EndSymbUNID = EndSymbUNID + 1

		if iEndSymbol = 2 or iEndSymbol = 4 or iEndSymbol = 6 then
			hotspot2	0,					0,	EndSymbUNID, arrowWidthHalf, 1+128,	arrowWidth	: EndSymbUNID = EndSymbUNID+ 1
			hotspot2	-_actSymbolLength,	0,	EndSymbUNID, arrowWidthHalf, 2,		arrowWidth	: EndSymbUNID = EndSymbUNID+ 1
			hotspot2	_actSymbolLength,	0,	EndSymbUNID, arrowWidthHalf, 3,		arrowWidth	: EndSymbUNID = EndSymbUNID+ 1
	
			hotspot2	0,					0,	EndSymbUNID, arrowWidthHalf, 1+128,	arrowWidth	: EndSymbUNID = EndSymbUNID+ 1
			hotspot2	_actSymbolLength,	0,	EndSymbUNID, arrowWidthHalf, 2,		arrowWidth	: EndSymbUNID = EndSymbUNID+ 1
			hotspot2	-_actSymbolLength,	0,	EndSymbUNID, arrowWidthHalf, 3,		arrowWidth	: EndSymbUNID = EndSymbUNID+ 1
		endif

		if bReverse then
			del 2
		endif

	else
		rot2 arrowPos
		add2 inRad + (outRad - inRad) / 2, 0

		for jjj = 1 to 2
			line2 0, 0, -arrowSize, -arrowSize
			mul2 -1, 1
		next jjj
		del 2
	endif

	del 2

return


"text rotation":

	totalAnglePos = totalRotate + textPos + 90

	rot2 textPos

	add2 rad - _actyPos, 0
	rot2 90

	nTrans = 0
	if typeTextRotation_m = 2 then
		if  (totalAnglePos > (gs_readable_angle + eps) & totalAnglePos < (gs_readable_angle + 180 + eps)) then
			rot2 180
			mul2 -1, 1
			nTrans = nTrans + 2
		endif
	endif

	text2 0, 0, textCont

	del nTrans

	del 2

	del 1

return

"StartSymbol":
	if iFloorPlanDisplayType = DISPLAY_SYMBOLIC then
		add2 rad, 0
		fill fillEndSymbol
		if penStartSymbol <> 0 then
			temp_FillStatus = 2
		else
			temp_FillStatus = 0
		endif

		if iStartSymbol = 1 then	! Style 1
			poly2_b 2, 1+temp_FillStatus, gs_fill_pen, penStartSymbol,
				0,						0, 		901,
				widthStartSymbol / 2,	360, 	4001
		endif

		if iStartSymbol = 2 then	! Style 2
			for k = 1 to 2
				poly2_b 6, 1+temp_FillStatus, gs_fill_pen, penStartSymbol,
					0, 						0, 						1,
					widthStartSymbol / 2, 	0, 						1,
					0,						0,						901,
					0,						90,						4001,
					0,						widthStartSymbol / 2,	0,
					0,						0,						-1
				poly2_b 6, 1, gs_fill_pen, penStartSymbol,
					0,						0,						1,
					0,						widthStartSymbol / 2,	1,
					0,						0,						901,
					0,						90,						4001,
					-widthStartSymbol / 2,	0,						0,
					0,						0,						-1
				rot2 180
			next k
			del 2
		endif

		if iStartSymbol = 3 then	! Style 3
			line2 widthStartSymbol/2, 	- heightStartSymbol/2, 	 widthStartSymbol/2, 	heightStartSymbol/2
			line2 - widthStartSymbol/2, 	- heightStartSymbol/2, 	- widthStartSymbol/2, 	 heightStartSymbol/2
		endif

		if iStartSymbol = 1 or iStartSymbol = 2 then
			for ii=1 to 4
				hotspot2 0, 					0,	StartSymbUNID, widthStartSymbolHalf, 1+128, widthStartSymbol	: StartSymbUNID = StartSymbUNID + 1
				hotspot2 widthStartSymbol / 2, 	0,	StartSymbUNID, widthStartSymbolHalf, 2, 	widthStartSymbol	: StartSymbUNID = StartSymbUNID + 1
				hotspot2 -1, 					0,	StartSymbUNID, widthStartSymbolHalf, 3+128, widthStartSymbol	: StartSymbUNID = StartSymbUNID + 1
				rot2 90
			next ii
			del ii-1
		else
			for ii=1 to 2
				! Symbol Width/2
				hotspot2 0,						- heightStartSymbolHalf, StartSymbUNID, widthStartSymbolHalf, 1+128,	widthStartSymbol	:StartSymbUNID=StartSymbUNID+1
				hotspot2 widthStartSymbolHalf, 	- heightStartSymbolHalf, StartSymbUNID, widthStartSymbolHalf, 2, 		widthStartSymbol	:StartSymbUNID=StartSymbUNID+1
				hotspot2 -1,					- heightStartSymbolHalf, StartSymbUNID, widthStartSymbolHalf, 3, 		widthStartSymbol	:StartSymbUNID=StartSymbUNID+1
	
				hotspot2 0,						heightStartSymbolHalf, StartSymbUNID, widthStartSymbolHalf, 1+128,	widthStartSymbol	:StartSymbUNID=StartSymbUNID+1
				hotspot2 widthStartSymbolHalf, 	heightStartSymbolHalf, StartSymbUNID, widthStartSymbolHalf, 2,		widthStartSymbol	:StartSymbUNID=StartSymbUNID+1
				hotspot2 -1,					heightStartSymbolHalf, StartSymbUNID, widthStartSymbolHalf, 3,		widthStartSymbol	:StartSymbUNID=StartSymbUNID+1
	
				! Symbol Height
				hotspot2 widthStartSymbolHalf, 0,						StartSymbUNID, heightStartSymbolHalf, 1+128, 	heightStartSymbol		:StartSymbUNID=StartSymbUNID+1
				hotspot2 widthStartSymbolHalf, heightStartSymbolHalf, 	StartSymbUNID, heightStartSymbolHalf, 2, 		heightStartSymbol		:StartSymbUNID=StartSymbUNID+1
				hotspot2 widthStartSymbolHalf, -1,						StartSymbUNID, heightStartSymbolHalf, 3, 		heightStartSymbol		:StartSymbUNID=StartSymbUNID+1
	
				hotspot2 widthStartSymbolHalf, 0,						StartSymbUNID, heightStartSymbolHalf, 1+128, 	heightStartSymbol		:StartSymbUNID=StartSymbUNID+1
				hotspot2 widthStartSymbolHalf, - heightStartSymbolHalf,	StartSymbUNID, heightStartSymbolHalf, 2,		heightStartSymbol		:StartSymbUNID=StartSymbUNID+1
				hotspot2 widthStartSymbolHalf, 1,						StartSymbUNID, heightStartSymbolHalf, 3, 		heightStartSymbol		:StartSymbUNID=StartSymbUNID+1
				mul2 -1,1
			next ii
			del ii-1
		endif
		del 1
	else
		circle2 rad, 0, arrowSize / 5
	endif


return
]]>
</Script_2D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_1D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
EPS = 0.00001

!iRampType
RAMP_CURVED = 1
RAMP_STRAIGHT = 2

!------------ Floor Plan Display type integer definitions ----------------------

dim stFloorPlanDisplayType[5]
	stFloorPlanDisplayType[1] = `Сечение и Низ`
	stFloorPlanDisplayType[2] = `Сечение и Верх`
	stFloorPlanDisplayType[3] = `Символический`
	stFloorPlanDisplayType[4] = `Только Контуры`
	stFloorPlanDisplayType[5] = `Вся Проекция`

DISPLAY_PROJECTED					= 1
DISPLAY_OVERHEAD_PROJ				= 2
DISPLAY_SYMBOLIC					= 3
DISPLAY_OUTLINES					= 4
DISPLAY_OVERHEAD_ALL				= 5

SYMBOL_DASHED_OVER_HORIZONTAL_CUT	= 1
SYMBOL_HORIZONTAL_CUT				= 2
SYMBOL_COMPLETE						= 3

! iCalculationMethod
METHOD_RATIO 		= 1
METHOD_PERCENTAGE 	= 2
METHOD_DIMENSIONS 	= 3

! iTextType1, iTextType2
TEXT_PERCENTAGE 	= 1
TEXT_RATIO 			= 2
TEXT_SEGMENTLENGTH 	= 3
TEXT_FULLLENGTH 	= 4
TEXT_CUSTOM			= 0

if bSideFlange1 & not (bSideFlange2) then
	widthSideFlange2	= widthSideFlange1
	heightSideFlange2	= heightSideFlange1
endif
if bSideFlange1_in & not (bSideFlange2_in) then
	widthSideFlange2_in		= widthSideFlange1_in
	heightSideFlange2_in	= heightSideFlange1_in
endif
if bSideFlange1_out & not (bSideFlange2_out) then
	widthSideFlange2_out	= widthSideFlange1_out
	heightSideFlange2_out	= heightSideFlange1_out
endif

if not(bDiffSides) then
	widthUsable = widthFull + 2 * widthSideFlange1 * bSideFlange1 + 2 * widthSideFlange2 * bSideFlange2
else
	widthUsable = widthFull + widthSideFlange1_in * bSideFlange1_in \
							+ widthSideFlange1_out * bSideFlange1_out \
							+ widthSideFlange2_in * bSideFlange2_in \
							+ widthSideFlange2_out * bSideFlange2_out
endif
parameters widthUsable = widthUsable

rad = (inRad + outRad) / 2

_minlengthAscent = (alph/gs_resol * ((inRad+outRad)*pi)) / 360
if lengthAscent < _minlengthAscent then 
	lengthAscent = _minlengthAscent
	parameters lengthAscent = lengthAscent
endif

L2 = lengthFull - 2 * lengthAscent

alph1=lengthAscent*360/((inRad+outRad)*pi)
alph2=L2*360/((inRad+outRad)*pi)

beta0=alph/gs_resol
n1=int(alph1/beta0)
n2=gs_resol-2*n1
if n1 > eps then
	if bAscent then beta1=alph1/n1
endif

beta2=alph2/n2

h2=zzyzx-2*heightAscent

if GLOB_MODPAR_NAME = "ZZYZX" then
	_actZZYZX 	= ZZYZX - (heightAscent * 2 * bAscent)			! Height without Height of Ascent
else
	_actA 		= lengthFull  - (lengthAscent * 2 * bAscent)	! Length without Length of Ascent
endif

if iCalculationMethod = METHOD_RATIO then
	if GLOB_MODPAR_NAME = "ZZYZX" then
		lengthFull  = _actZZYZX / ratioHeight * ratioLength + (lengthAscent * 2 * bAscent)
		parameters lengthFull  = lengthFull 
	else
		ZZYZX = _actA / ratioLength * ratioHeight + (heightAscent * 2 * bAscent)
		parameters ZZYZX = ZZYZX
	endif

	if bAscent then
		if GLOB_MODPAR_NAME = "heightAscent" then
			lengthAscent = heightAscent / ratioAscentHeight * ratioAscentLength
			parameters lengthAscent = lengthAscent
		else
			heightAscent = lengthAscent / ratioAscentLength * ratioAscentHeight
			parameters heightAscent = heightAscent 
		endif
	endif
else
	if iCalculationMethod = METHOD_PERCENTAGE then
		if GLOB_MODPAR_NAME = "ZZYZX" then
			lengthFull = _actZZYZX/ percentage * 100 + (lengthAscent * 2 * bAscent)
			parameters lengthFull = lengthFull
		else
			ZZYZX = _actA * percentage / 100 + (heightAscent * 2 * bAscent)
			parameters ZZYZX = ZZYZX
		endif

		if bAscent then
			if GLOB_MODPAR_NAME = "heightAscent" then
				lengthAscent = heightAscent / ascentPercentage * 100
				parameters lengthAscent = lengthAscent
			else
				heightAscent = lengthAscent * ascentPercentage / 100
				parameters heightAscent = heightAscent 
			endif
		endif
	endif
endif

if GLOB_MODPAR_NAME = "ZZYZX" then
	_actA 		= lengthFull  - (lengthAscent * 2 * bAscent)	! Length without Length of Ascent
else
	_actZZYZX 	= ZZYZX - (heightAscent * 2 * bAscent)			! Height without Height of Ascent
endif

! Greatest common divisor for Ratio calculation
if iCalculationMethod <> METHOD_RATIO then
	dim  GCDArray[]
	if _actZZYZX > _actA then
		GCDArray[1] = _actZZYZX
		GCDArray[2] = _actA
	else
		if _actZZYZX < _actA then
			GCDArray[1] = _actA
			GCDArray[2] = _actZZYZX
		else	! if they are equal
			_gcd = _actZZYZX * 1000
		endif
	endif
	
	if abs(_actZZYZX - _actA) > eps then
		i = 2
		_found = 0
		while not(_found) do
			i = i + 1
			GCDArray[i] = GCDArray[i-2] - int(GCDArray[i-2] / GCDArray[i-1]) * GCDArray[i-1]
			if abs(GCDArray[i]) < eps then 
				_found = 1
				_gcd = GCDArray[i-1]
			endif
		endwhile
	endif

	if bAscent then
		_actheightAscent 	= heightAscent 		! Height without Height of Ascent
		_actlengthAscent 	= lengthAscent 		! Length without Length of Ascent
	
		dim  GCDArray[]
		if _actheightAscent > _actlengthAscent then
			GCDArray[1] = _actheightAscent 
			GCDArray[2] = _actlengthAscent 
		else
			if _actheightAscent < _actlengthAscent then
				GCDArray[1] = _actlengthAscent 
				GCDArray[2] = _actheightAscent 
			else	! if they are equal
				_gcdAscent = _actheightAscent
			endif
		endif
		
		if abs(_actheightAscent - _actlengthAscent ) > eps then
			i = 2
			_found = 0
			while not(_found) do
				i = i + 1
				GCDArray[i] = GCDArray[i-2] - int(GCDArray[i-2] / GCDArray[i-1]) * GCDArray[i-1]
				if abs(GCDArray[i]) < eps then 
					_found = 1
					_gcdAscent = GCDArray[i-1]
				endif
			endwhile
		endif
	endif
endif

if iCalculationMethod = METHOD_RATIO then
	percentage = _actZZYZX / _actA * 100
	parameters percentage = percentage
else
	if iCalculationMethod = METHOD_PERCENTAGE then
		if bAscent then
			ratioAscentLength = lengthAscent / _gcdAscent
			parameters ratioAscentLength = ratioAscentLength

			ratioAscentHeight = heightAscent / _gcdAscent
			parameters ratioAscentHeight = ratioAscentHeight
		endif

		ratioLength = _actA / _gcd
		parameters ratioLength = ratioLength 

		ratioHeight = _actZZYZX / _gcd
		parameters ratioHeight = ratioHeight 

	else	! METHOD_DIMENSIONS
		if GLOB_MODPAR_NAME = "ZZYZX" or GLOB_MODPAR_NAME = "A" or GLOB_MODPAR_NAME = "heightAscent" or GLOB_MODPAR_NAME = "lengthAscent" then
			percentage = _actZZYZX / _actA * 100
			parameters percentage = percentage

			ratioLength = _actA / _gcd
			parameters ratioLength = ratioLength 

			ratioHeight = _actZZYZX / _gcd
			parameters ratioHeight = ratioHeight 
		endif
		if bAscent then
			if GLOB_MODPAR_NAME = "heightAscent" or GLOB_MODPAR_NAME = "lengthAscent" then
				ascentPercentage = INT(heightAscent / lengthAscent * 100)
				parameters ascentPercentage = ascentPercentage

				ratioAscentLength = lengthAscent / _gcdAscent
				parameters ratioAscentLength = ratioAscentLength

				ratioAscentHeight = heightAscent / _gcdAscent
				parameters ratioAscentHeight = ratioAscentHeight
			endif
		endif
	endif
endif

]]>
</Script_1D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_VL SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
call "FM_types" parameters all

hideparameter all "ZZYZX"
lock "A", "B"

values "alph" range (0, )
_minlengthAscent = (alph/gs_resol * ((inRad+outRad)*pi)) / 360
values "lengthAscent" range [_minlengthAscent, lengthFull/2 - 0.1]
values "ratioLength" range (0, )
values "ratioHeight" range (0, ratioLength]
values "percentage" range (0, 100]

values "heightAscent" range (0, ZZYZX / 2)
values "ratioAscentLength" range (0, )
values "ratioAscentHeight" range (0, ratioAscentLength]
values "ascentPercentage" range (0, 100]

values "arrowWidth" range (0, )
values "arrowHeight" range (0, )
values "widthStartSymbol" range (0, )
values "heightStartSymbol" range (0, )

_maxArrowHeight = SQR(outrad*outrad - inrad*inrad) / outrad
values "arrowHeight" range (0, _maxArrowHeight)

parameters ac_bottomlevel	= 0
parameters ac_toplevel		= ZZYZX

values{2} "iCalculationMethod" 	METHOD_RATIO, 		`Соотношение`,
								METHOD_PERCENTAGE, 	`Проценты`,
								METHOD_DIMENSIONS, 	`Размеры`

values{2} "iTextType1" 	TEXT_PERCENTAGE,				`Проценты`,
						TEXT_RATIO,						`Соотношение`,
						TEXT_SEGMENTLENGTH, 			`Длина Сегмента`,
						TEXT_FULLLENGTH, 				`Полная Длина`,
						TEXT_CUSTOM,					`Специальный`	

if iTextType1 = TEXT_PERCENTAGE then
	values{2} "iTextType2" 	TEXT_RATIO,						`Соотношение`,
							TEXT_SEGMENTLENGTH, 			`Длина Сегмента`,
							TEXT_FULLLENGTH, 				`Полная Длина`,
							TEXT_CUSTOM,					`Специальный`
else
	if iTextType1 = TEXT_RATIO then
		values{2} "iTextType2" 	TEXT_PERCENTAGE,				`Проценты`,
								TEXT_SEGMENTLENGTH, 			`Длина Сегмента`,
								TEXT_FULLLENGTH, 				`Полная Длина`,
								TEXT_CUSTOM,					`Специальный`
	else
		if iTextType1 = TEXT_SEGMENTLENGTH then
			values{2} "iTextType2" 	TEXT_PERCENTAGE,				`Проценты`,
									TEXT_RATIO,						`Соотношение`,
									TEXT_FULLLENGTH, 				`Полная Длина`,
									TEXT_CUSTOM,					`Специальный`	

		else
			if iTextType1 = TEXT_FULLLENGTH then
				values{2} "iTextType2" 	TEXT_PERCENTAGE,				`Проценты`,
										TEXT_RATIO,						`Соотношение`,
										TEXT_SEGMENTLENGTH, 			`Длина Сегмента`,
										TEXT_CUSTOM,					`Специальный`
			else	! TEXT_CUSTOM
				values{2} "iTextType2" 	TEXT_PERCENTAGE,				`Проценты`,
										TEXT_RATIO,						`Соотношение`,
										TEXT_SEGMENTLENGTH, 			`Длина Сегмента`,
										TEXT_FULLLENGTH, 				`Полная Длина`
			endif
		endif
	endif
endif

values{2} "iStartSymbol" 	1, 	`Стиль 1`,
							2, 	`Стиль 2`,
							3, 	`Стиль 3`


values{2} "iEndSymbol" 	1, 	`Стиль 1`,
						2, 	`Стиль 2`,
						3, 	`Стиль 3`,
						4, 	`Стиль 4`,
						5, 	`Стиль 5`,
						6, 	`Стиль 6`

if GLOB_MODPAR_NAME = "widthStartSymbolHalf" then
	widthStartSymbol = widthStartSymbolHalf * 2
	parameters widthStartSymbol = widthStartSymbol
else
	if GLOB_MODPAR_NAME = "widthStartSymbol" then
		widthStartSymbolHalf = widthStartSymbol / 2
		parameters widthStartSymbolHalf = widthStartSymbolHalf
	endif
endif

if GLOB_MODPAR_NAME = "heightStartSymbolHalf" then
	heightStartSymbol = heightStartSymbolHalf * 2
	parameters heightStartSymbol = heightStartSymbol
else
	if GLOB_MODPAR_NAME = "heightStartSymbol" then
		heightStartSymbolHalf = heightStartSymbol / 2
		parameters heightStartSymbolHalf = heightStartSymbolHalf
	endif
endif

if GLOB_MODPAR_NAME = "arrowWidthHalf" then
	parameters arrowWidth = arrowWidthHalf * 2
else
	parameters arrowWidthHalf 	= arrowWidth / 2
endif

if GLOB_MODPAR_NAME = "alph" then
	lengthFull = ((inRad+outRad)*alph*pi)/360
	parameters lengthFull = lengthFull
else
	alph = (lengthFull * 360) / (pi * (inRad+outRad))
	parameters alph = alph
endif


! --- 2D symbol type, 3D detail level ------------------------------------------

values "floorPlanDisplayType" stFloorPlanDisplayType
VALUES "iFloorPlanDisplayType" 	DISPLAY_PROJECTED, \
								DISPLAY_OVERHEAD_PROJ, \
								DISPLAY_SYMBOLIC, \
								DISPLAY_OUTLINES, \
								DISPLAY_OVERHEAD_ALL
if GLOB_MODPAR_NAME = "floorPlanDisplayType" then
	for i = 1 to vardim1(stFloorPlanDisplayType)
	   if floorPlanDisplayType = stFloorPlanDisplayType[i]	then iFloorPlanDisplayType = i
	next i
	parameters iFloorPlanDisplayType = iFloorPlanDisplayType
else
	floorPlanDisplayType = stFloorPlanDisplayType[max(min(iFloorPlanDisplayType, vardim1(stFloorPlanDisplayType)), 1)]
	parameters floorPlanDisplayType = floorPlanDisplayType
endif

if iFloorPlanDisplayType = DISPLAY_OUTLINES then
	lock			"lineOverhead",
					"overheadPen"
	hideparameter	"lineOverhead",
					"overheadPen"
endif
if iFloorPlanDisplayType = DISPLAY_OVERHEAD_ALL then
	lock			"gs_cont_pen",
					"penText",
					"fontType",
					"tx_size",
					"tx_size_point",
					"typeTextRotation",
					"typeTextRotation_m",
					"bFill",
					"gs_fill_type",
					"gs_fill_pen",
					"gs_back_pen"
	hideparameter	"gs_cont_pen",
					"penText",
					"fontType",
					"tx_size",
					"tx_size_point",
					"typeTextRotation",
					"typeTextRotation_m",
					"bFill",
					"gs_fill_type",
					"gs_fill_pen",
					"gs_back_pen"
endif
if NOT(bFill) then
	lock			"gs_fill_type",
					"gs_fill_pen",
					"gs_back_pen"
	hideparameter	"gs_fill_type",
					"gs_fill_pen",
					"gs_back_pen"
endif


values "gs_detlevel_3D"  `Детальный`,`Откл.`
values "gs_detlevel_3D_m"  2, 0

if GLOB_MODPAR_NAME = "gs_detlevel_3d" then
	if gs_detlevel_3d = `Детальный`	then gs_detlevel_3d_m = 2
	if gs_detlevel_3d = `Откл.`		then gs_detlevel_3d_m = 0
	parameters gs_detlevel_3d_m = gs_detlevel_3d_m
else
	if gs_detlevel_3d_m = 2		then gs_detlevel_3d = `Детальный`
	if gs_detlevel_3d_m = 0		then gs_detlevel_3d = `Откл.`
	parameters gs_detlevel_3d = gs_detlevel_3d
endif

! --- Hiding unused parameters -------------------------------------------------

if not (bDiffSides) then
	hideparameter	"bSideFlange1_in", "widthSideFlange1_in", "heightSideFlange1_in", "matSideFlange1_in", "bSideFlange2_in", "widthSideFlange2_in", "heightSideFlange2_in", "matSideFlange2_in",
					"bSideFlange1_out", "widthSideFlange1_out", "heightSideFlange1_out", "matSideFlange1_out", "bSideFlange2_out", "widthSideFlange2_out", "heightSideFlange2_out", "matSideFlange2_out"
else
	hideparameter	"bSideFlange1", "widthSideFlange1", "heightSideFlange1", "matSideFlange1", "bSideFlange2", "widthSideFlange2", "heightSideFlange2", "matSideFlange2"
endif

if not (bSideFlange1) then
	lock "matSideFlange1", "widthSideFlange1", "heightSideFlange1"
	hideparameter "matSideFlange1", "widthSideFlange1", "heightSideFlange1"
endif
if not (bSideFlange2) then
	lock "matSideFlange2", "widthSideFlange2", "heightSideFlange2"
	hideparameter "matSideFlange2", "widthSideFlange2", "heightSideFlange2"
endif
if not (bSideFlange1_in) then
	lock "matSideFlange1_in", "widthSideFlange1_in", "heightSideFlange1_in"
	hideparameter "matSideFlange1_in", "widthSideFlange1_in", "heightSideFlange1_in"
endif
if not (bSideFlange2_in) then
	lock "matSideFlange2_in", "widthSideFlange2_in", "heightSideFlange2_in"
	hideparameter "matSideFlange2_in", "widthSideFlange2_in", "heightSideFlange2_in"
endif
if not (bSideFlange1_out) then
	lock "matSideFlange1_out", "widthSideFlange1_out", "heightSideFlange1_out"
	hideparameter "matSideFlange1_out", "widthSideFlange1_out", "heightSideFlange1_out"
endif
if not (bSideFlange2_out) then
	lock "matSideFlange2_out", "widthSideFlange2_out", "heightSideFlange2_out"
	hideparameter "matSideFlange2_out", "widthSideFlange2_out", "heightSideFlange2_out"
endif

if iCalculationMethod = METHOD_RATIO then
	lock "percentage", "ascentPercentage", "lengthFull"
	hideparameter "percentage", "ascentPercentage", "lengthFull"
else
	if iCalculationMethod = METHOD_PERCENTAGE then
		lock "ratioLength", "ratioHeight", "ratioAscentLength", "ratioAscentHeight", "lengthFull"
		hideparameter "ratioLength", "ratioHeight", "ratioAscentLength", "ratioAscentHeight", "lengthFull"
	else	! METHOD_DIMENSIONS
		lock   "percentage", "ascentPercentage", "ratioLength", "ratioHeight", "ratioAscentLength", "ratioAscentHeight", "alph"
		hideparameter  "percentage", "ascentPercentage", "ratioLength", "ratioHeight", "ratioAscentLength", "ratioAscentHeight", "alph"
	endif
endif

if not(bAscent) then
	lock "lengthAscent", "heightAscent", "ascentPercentage", "ratioAscentLength", "ratioAscentHeight"
	hideparameter "lengthAscent", "heightAscent", "ascentPercentage", "ratioAscentLength", "ratioAscentHeight"
endif

if iFloorPlanDisplayType = DISPLAY_SYMBOLIC then
	if not(bShowBreakline) then
		lock 	"overheadPen", "lineDashed", "bShowAboveBreak", "penBreakLineBelow", "penBreakLineAbove",
				"ltBreakLineBelow", "ltBreakLineAbove", "bStop", "penWalkingAbove", "ltWalkingAbove", 
				"bShowAboveBreak", "penStartSymbolAbove", "penEndSymbolAbove"
		hideparameter 	"overheadPen", "lineDashed", "bShowAboveBreak", "penBreakLineBelow", "penBreakLineAbove",
						"ltBreakLineBelow", "ltBreakLineAbove", "bStop", "penWalkingAbove", "ltWalkingAbove",
						"bShowAboveBreak", "penStartSymbolAbove", "penEndSymbolAbove"
	endif
	if not(bWalkingLine) then
		lock 	"iWalkingLineType", "penWalkingBelow", "ltWalkingBelow", "penWalkingAbove", "ltWalkingAbove", "bReverse", "bStop", "bStartSymbol", "iStartSymbol", 
				"bShowAboveBreak", "penStartSymbolBelow", "penStartSymbolAbove", "widthStartSymbol", "bEndSymbol", "iEndSymbol", "penEndSymbolBelow",
				"penEndSymbolAbove", "arrowWidth", "arrowHeight"
		hideparameter 	"iWalkingLineType", "penWalkingBelow", "ltWalkingBelow", "penWalkingAbove", "ltWalkingAbove", "bReverse", "bStop", "bStartSymbol", "iStartSymbol", 
						"bShowAboveBreak", "penStartSymbolBelow", "penStartSymbolAbove", "widthStartSymbol", "bEndSymbol", "iEndSymbol", "penEndSymbolBelow",
						"penEndSymbolAbove", "arrowWidth", "arrowHeight"
	endif
	
	if not(bStartSymbol) then
		lock "iStartSymbol", "bShowAboveBreak", "penStartSymbolBelow", "penStartSymbolAbove", "penStartSymbolBelow", "widthStartSymbol", "heightStartSymbol"
		hideparameter "iStartSymbol", "bShowAboveBreak", "penStartSymbolBelow", "penStartSymbolAbove", "penStartSymbolBelow", "widthStartSymbol", "heightStartSymbol"
	else
		if iStartSymbol <> 3 then
			lock "heightStartSymbol"
			hideparameter "heightStartSymbol"
		else
			lock "penStartSymbolBelow", "penStartSymbolAbove"
			hideparameter "penStartSymbolBelow", "penStartSymbolAbove"
		endif
	endif

	if not(bShowAboveBreak) then
		lock "penStartSymbolAbove"
		hideparameter "penStartSymbolAbove"
	endif

	if not(bEndSymbol) then
		lock "iEndSymbol", "penEndSymbolBelow", "penEndSymbolAbove", "arrowWidth", "arrowHeight"
		hideparameter "iEndSymbol", "penEndSymbolBelow", "penEndSymbolAbove", "arrowWidth", "arrowHeight"
	else
		if iEndSymbol = 1 or iEndSymbol = 3 or iEndSymbol = 5 then
			lock "arrowWidth"
			hideparameter "arrowWidth"
		endif

		if iEndSymbol = 1 or iEndSymbol = 2 then
			lock "penEndSymbolBelow", "penEndSymbolAbove"
			hideparameter "penEndSymbolBelow", "penEndSymbolAbove"
		endif
	endif

	if bStop then
		lock "penWalkingAbove", "ltWalkingAbove", "bShowAboveBreak", "penStartSymbolAbove", "penEndSymbolAbove"
		hideparameter "penWalkingAbove", "ltWalkingAbove", "bShowAboveBreak", "penStartSymbolAbove", "penEndSymbolAbove"
	endif

	if not(bShowText1) then
		lock "iTextType1", "TextPrefix1"
		hideparameter "TextPrefix1", "TextPrefix1"
	endif

	if not(bShowText2) then
		lock "iTextType2", "TextPrefix2"
		hideparameter "TextPrefix2", "TextPrefix2"
	endif

 	if (iTextType1 <> 0 and iTextType2 <> 0) or (not(bShowText1) and iTextType1 = 0) or (not(bShowText2) and iTextType2 = 0) then
		lock "CustomText"
		hideparameter "CustomText"
	endif

	if not(bShowText1) and not(bShowText2)then
		lock "CustomText", "fontType", "tx_size", "tx_size_point", "typeTextRotation_m"
		hideparameter "CustomText", "fontType", "tx_size", "tx_size_point", "typeTextRotation_m"
	endif
else
	lock 	"bShowBreakline", "penBreakLineBelow", "ltBreakLineBelow", "penBreakLineAbove", "ltBreakLineAbove", "bWalkingLine",
			"bReverse", "bStop", "penWalkingBelow", "ltWalkingBelow", "penWalkingAbove", "ltWalkingAbove",
			"bStartSymbol", "bShowAboveBreak", "iStartSymbol", "fillStartSymbol", "penStartSymbolBelow", "penStartSymbolAbove",
			"widthStartSymbol", "widthStartSymbolHalf", "heightStartSymbol", "heightStartSymbolHalf", "bEndSymbol", "iEndSymbol",
			"fillEndSymbol", "penEndSymbolBelow", "penEndSymbolAbove", "arrowWidth", "arrowWidthHalf", "arrowHeight",
			"bShowText1", "iTextType1", "TextPrefix1", "bShowText2", "iTextType2", "TextPrefix2", "CustomText"
	hideparameter  	"bShowBreakline", "penBreakLineBelow", "ltBreakLineBelow", "penBreakLineAbove", "ltBreakLineAbove", "bWalkingLine",
					"bReverse", "bStop", "penWalkingBelow", "ltWalkingBelow", "penWalkingAbove", "ltWalkingAbove",
					"bStartSymbol", "bShowAboveBreak", "iStartSymbol", "fillStartSymbol", "penStartSymbolBelow", "penStartSymbolAbove",
					"widthStartSymbol", "widthStartSymbolHalf", "heightStartSymbol", "heightStartSymbolHalf", "bEndSymbol", "iEndSymbol",
					"fillEndSymbol", "penEndSymbolBelow", "penEndSymbolAbove", "arrowWidth", "arrowWidthHalf", "arrowHeight",
					"bShowText1", "iTextType1", "TextPrefix1", "bShowText2", "iTextType2", "TextPrefix2", "CustomText"
endif

if gs_detlevel_3d_m = 0 then	! Off
	lock "gs_shadow", "gs_resol"
	hideparameter "gs_shadow", "gs_resol"
endif

if	GLOB_MODPAR_NAME = "bDiffSides" | \
	GLOB_MODPAR_NAME = "bSideFlange1" | \
	GLOB_MODPAR_NAME = "bSideFlange2" | \
	GLOB_MODPAR_NAME = "widthSideFlange1" | \
	GLOB_MODPAR_NAME = "widthSideFlange2" | \
	GLOB_MODPAR_NAME = "bSideFlange1_in" | \
	GLOB_MODPAR_NAME = "bSideFlange2_in" | \
	GLOB_MODPAR_NAME = "widthSideFlange1_in" | \
	GLOB_MODPAR_NAME = "widthSideFlange2_in" | \
	GLOB_MODPAR_NAME = "bSideFlange1_out" | \
	GLOB_MODPAR_NAME = "bSideFlange2_out" | \
	GLOB_MODPAR_NAME = "widthSideFlange1_out" | \
	GLOB_MODPAR_NAME = "widthSideFlange2_out" then
		parameters outRad = inRad + widthUsable
endif

if GLOB_MODPAR_NAME = "inRad" then
	parameters outRad = inRad + widthUsable
endif

if GLOB_MODPAR_NAME = "outRad" then
	parameters inRad = outRad - widthUsable
endif

if GLOB_MODPAR_NAME = "widthFull" then
	outRad = inRad + widthUsable
	parameters outRad = outRad
endif

! --- Font Size, Position ----------------------------------------------------------------

values "typeTextRotation" `Читаемый`,`Выровнять по Символу`
values "typeTextRotation_m" 2, 0

if GLOB_MODPAR_NAME = "typeTextRotation" then
	if typeTextRotation = `Читаемый`			then typeTextRotation_m = 2
	if typeTextRotation = `Выровнять по Символу`	then typeTextRotation_m = 0
	parameters typeTextRotation_m = typeTextRotation_m
else
	if typeTextRotation_m = 2					then typeTextRotation = `Читаемый`
	if typeTextRotation_m = 0					then typeTextRotation = `Выровнять по Символу`
	parameters typeTextRotation = typeTextRotation
endif

Dot_in_mm = 25.4 / 72
if GLOB_MODPAR_NAME = "tx_size" then
	parameters tx_size_point = tx_size / Dot_in_mm
	tx_size_point = tx_size / Dot_in_mm
endif
if GLOB_MODPAR_NAME = "tx_size_point" then
	parameters tx_size = tx_size_point * Dot_in_mm
	tx_size = tx_size_point * Dot_in_mm
endif

if GLOB_UI_BUTTON_ID < 0 then
	parameters gs_ui_current_page = -GLOB_UI_BUTTON_ID
endif
]]>
</Script_VL>

<ParamSection SectVersion="26" SectionFlags="0" SubIdent="0">
	<ParamSectHeader>
		<Version>26</Version>
		<AutoHotspots>false</AutoHotspots>
		<StatBits>
			<STBit_UIDefault/>
			<STBit_FixSize/>
			<STBit_UIUseHierarchicalPages/>
		</StatBits>
		<WDLeftFrame>0</WDLeftFrame>
		<WDRightFrame>0</WDRightFrame>
		<WDTopFrame>0</WDTopFrame>
		<WDBotFrame>0</WDBotFrame>
		<LayFlags>65535</LayFlags>
		<WDMirrorThickness>0</WDMirrorThickness>
		<WDWallInset>0</WDWallInset>
		<SymbolColor>0</SymbolColor>
	</ParamSectHeader>
	<Parameters>
		<Length Name="A">
			<Description><![CDATA[""]]></Description>
			<Fix/>
			<Value>1</Value>
		</Length>
		<Length Name="B">
			<Description><![CDATA[""]]></Description>
			<Fix/>
			<Value>1</Value>
		</Length>
		<Length Name="ZZYZX">
			<Description><![CDATA["Высота"]]></Description>
			<Fix/>
			<Value>3</Value>
		</Length>
		<String Name="gs_detlevel_3d">
			<Description><![CDATA["3D-детализация"]]></Description>
			<Value><![CDATA["Детальный"]]></Value>
		</String>
		<Integer Name="gs_detlevel_3d_m">
			<Description><![CDATA["3D"]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>2</Value>
		</Integer>
		<Boolean Name="AC_show2DHotspotsIn3D">
			<Description><![CDATA["Показ Узловых 2D Точек в 3D"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Length Name="ac_bottomlevel">
			<Description><![CDATA["Отметка Низа"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="ac_toplevel">
			<Description><![CDATA["Отметка Верха"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>3</Value>
		</Length>

		<!-- _sp0: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="_sp0">
			<Description><![CDATA["Пандус"]]></Description>
		</Title>
		<Integer Name="iCalculationMethod">
			<Description><![CDATA["Способ Расчета"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>3</Value>
		</Integer>
		<Integer Name="ratioLength">
			<Description><![CDATA["Соотношение Длины"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>5000</Value>
		</Integer>
		<Integer Name="ratioHeight">
			<Description><![CDATA["Соотношение Высоты"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>677</Value>
		</Integer>
		<RealNum Name="percentage">
			<Description><![CDATA["Проценты"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>13.54</Value>
		</RealNum>
		<Length Name="inRad">
			<Description><![CDATA["Малый Радиус"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>3.5</Value>
		</Length>
		<Length Name="outRad">
			<Description><![CDATA["Больший радиус"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>7.6</Value>
		</Length>
		<Length Name="widthFull">
			<Description><![CDATA["Полная Ширина"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>3.2</Value>
		</Length>
		<Length Name="widthUsable">
			<Description><![CDATA["Используемая Ширина"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>4.3</Value>
		</Length>
		<Angle Name="alph">
			<Description><![CDATA["Угол"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>270</Value>
		</Angle>
		<Boolean Name="bAscent">
			<Description><![CDATA["Переход"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Length Name="lengthAscent">
			<Description><![CDATA["Длина Перехода"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>4</Value>
		</Length>
		<Length Name="heightAscent">
			<Description><![CDATA["Высота Перехода"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.2708</Value>
		</Length>
		<Integer Name="ratioAscentLength">
			<Description><![CDATA["Соотношение Длины Перехода"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>10000</Value>
		</Integer>
		<Integer Name="ratioAscentHeight">
			<Description><![CDATA["Соотношение Высоты Перехода"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>677</Value>
		</Integer>
		<RealNum Name="ascentPercentage">
			<Description><![CDATA["Проценты Перехода"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>6.77</Value>
		</RealNum>
		<Length Name="lengthFull">
			<Description><![CDATA["Полная Длина"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>26.1537588411</Value>
		</Length>
		<Length Name="thicknessRamp">
			<Description><![CDATA["Толщина"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.15</Value>
		</Length>
		<Boolean Name="bDiffSides">
			<Description><![CDATA["Различные Стороны"]]></Description>
			<Flags>
				<ParFlg_BoldName/>
			</Flags>
			<Value>0</Value>
		</Boolean>

		<!-- bSideFlange1: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Boolean Name="bSideFlange1">
			<Description><![CDATA["Боковая Кромка 1"]]></Description>
			<Flags>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Length Name="widthSideFlange1">
			<Description><![CDATA["Ширина"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.2</Value>
		</Length>
		<Length Name="heightSideFlange1">
			<Description><![CDATA["Высота"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.2</Value>
		</Length>

		<!-- bSideFlange1_out: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Boolean Name="bSideFlange1_out">
			<Description><![CDATA["Наружная Боковая Кромка 1"]]></Description>
			<Flags>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Length Name="widthSideFlange1_out">
			<Description><![CDATA["Ширина"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.2</Value>
		</Length>
		<Length Name="heightSideFlange1_out">
			<Description><![CDATA["Высота"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.2</Value>
		</Length>

		<!-- bSideFlange1_in: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Boolean Name="bSideFlange1_in">
			<Description><![CDATA["Внутренняя Боковая Кромка 1"]]></Description>
			<Flags>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Length Name="widthSideFlange1_in">
			<Description><![CDATA["Ширина"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.2</Value>
		</Length>
		<Length Name="heightSideFlange1_in">
			<Description><![CDATA["Высота"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.2</Value>
		</Length>

		<!-- bSideFlange2: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Boolean Name="bSideFlange2">
			<Description><![CDATA["Боковая Кромка 2"]]></Description>
			<Flags>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Length Name="widthSideFlange2">
			<Description><![CDATA["Ширина"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.25</Value>
		</Length>
		<Length Name="heightSideFlange2">
			<Description><![CDATA["Высота"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.4</Value>
		</Length>

		<!-- bSideFlange2_out: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Boolean Name="bSideFlange2_out">
			<Description><![CDATA["Наружная Боковая Кромка 2"]]></Description>
			<Flags>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Length Name="widthSideFlange2_out">
			<Description><![CDATA["Ширина"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.25</Value>
		</Length>
		<Length Name="heightSideFlange2_out">
			<Description><![CDATA["Высота"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.4</Value>
		</Length>

		<!-- bSideFlange2_in: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Boolean Name="bSideFlange2_in">
			<Description><![CDATA["Внутренняя Боковая Кромка 2"]]></Description>
			<Flags>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Length Name="widthSideFlange2_in">
			<Description><![CDATA["Ширина"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.25</Value>
		</Length>
		<Length Name="heightSideFlange2_in">
			<Description><![CDATA["Высота"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.4</Value>
		</Length>

		<!-- gs_2D_representation: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_2D_representation">
			<Description><![CDATA["2D-отображение"]]></Description>
			<Fix/>
		</Title>
		<String Name="floorPlanDisplayType">
			<Description><![CDATA["Показ на Плане Этажа"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Символический"]]></Value>
		</String>
		<Integer Name="iFloorPlanDisplayType">
			<Description><![CDATA["Показ на Плане Этажа"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>3</Value>
		</Integer>
		<Boolean Name="bShowBreakline">
			<Description><![CDATA["Линия Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<PenColor Name="penBreakLineBelow">
			<Description><![CDATA["Перо Линии Ниже Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>91</Value>
		</PenColor>
		<LineType Name="ltBreakLineBelow">
			<Description><![CDATA["Тип Линии Ниже Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</LineType>
		<PenColor Name="penBreakLineAbove">
			<Description><![CDATA["Перо Линии Выше Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>91</Value>
		</PenColor>
		<LineType Name="ltBreakLineAbove">
			<Description><![CDATA["Тип Линии Выше Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>4</Value>
		</LineType>
		<Boolean Name="bWalkingLine">
			<Description><![CDATA["Линия Всхода"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="bReverse">
			<Description><![CDATA["Обратное Направление Символа"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="bStop">
			<Description><![CDATA["Не Продлевать за Линию Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<PenColor Name="penWalkingBelow">
			<Description><![CDATA["Перо Основной Линии Ниже Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>71</Value>
		</PenColor>
		<LineType Name="ltWalkingBelow">
			<Description><![CDATA["Тип Линии Основной Линии Ниже Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</LineType>
		<PenColor Name="penWalkingAbove">
			<Description><![CDATA["Перо Основной Линии Выше Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>71</Value>
		</PenColor>
		<LineType Name="ltWalkingAbove">
			<Description><![CDATA["Тип Линии Основной Линии Выше Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>6</Value>
		</LineType>
		<Boolean Name="bStartSymbol">
			<Description><![CDATA["Символ в Начале"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Integer Name="iStartSymbol">
			<Description><![CDATA["Тип Символа в Начале"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Boolean Name="bShowAboveBreak">
			<Description><![CDATA["Показ Выше Линии Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<FillPattern Name="fillStartSymbol">
			<Description><![CDATA["Штриховка Символа в Начале"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>65</Value>
		</FillPattern>
		<PenColor Name="penStartSymbolBelow">
			<Description><![CDATA["Перо Символа в Начале Ниже Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>91</Value>
		</PenColor>
		<PenColor Name="penStartSymbolAbove">
			<Description><![CDATA["Перо Символа в Начале Выше Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</PenColor>
		<Length Name="widthStartSymbol">
			<Description><![CDATA["Ширина Символа в Начале"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.1</Value>
		</Length>
		<Length Name="widthStartSymbolHalf">
			<Description><![CDATA["Половина Ширины Символа в Начале"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Length Name="heightStartSymbol">
			<Description><![CDATA["Высота Символа в Начале"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.3</Value>
		</Length>
		<Length Name="heightStartSymbolHalf">
			<Description><![CDATA["Половина Высоты Символа в Начале"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.15</Value>
		</Length>
		<Boolean Name="bEndSymbol">
			<Description><![CDATA["Символ в Конце"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Integer Name="iEndSymbol">
			<Description><![CDATA["Тип Символа в Конце"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<FillPattern Name="fillEndSymbol">
			<Description><![CDATA["Штриховка Символа Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>65</Value>
		</FillPattern>
		<PenColor Name="penEndSymbolBelow">
			<Description><![CDATA["Перо Символа в Конце Ниже Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>91</Value>
		</PenColor>
		<PenColor Name="penEndSymbolAbove">
			<Description><![CDATA["Перо Символа в Конце Выше Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</PenColor>
		<Length Name="arrowWidth">
			<Description><![CDATA["Ширина Символа в Конце"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>4</Value>
		</Length>
		<Length Name="arrowWidthHalf">
			<Description><![CDATA["Половина Ширины Символа в Конце"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>2</Value>
		</Length>
		<Length Name="arrowHeight">
			<Description><![CDATA["Высота Символа в Конце"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>2</Value>
		</Length>
		<LineType Name="lineCont">
			<Description><![CDATA["Тип Линии Контура"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</LineType>
		<PenColor Name="gs_cont_pen">
			<Description><![CDATA["Перо Контура"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>91</Value>
		</PenColor>
		<LineType Name="lineDashed">
			<Description><![CDATA["Тип Штриховой Линии"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>4</Value>
		</LineType>
		<LineType Name="lineOverhead">
			<Description><![CDATA["Тип Линии Проекции"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>6</Value>
		</LineType>
		<PenColor Name="overheadPen">
			<Description><![CDATA["Перо Линии Проекции"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>91</Value>
		</PenColor>
		<PenColor Name="penArrow">
			<Description><![CDATA["Перо Стрелки"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>76</Value>
		</PenColor>
		<RealNum Name="arrowSize">
			<Description><![CDATA["Размер Стрелки"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.5</Value>
		</RealNum>
		<PenColor Name="penText">
			<Description><![CDATA["Перо Текста"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>86</Value>
		</PenColor>
		<Boolean Name="bShowText1">
			<Description><![CDATA["Показ Текста 1"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Integer Name="iTextType1">
			<Description><![CDATA["Тип Текста 1"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<String Name="TextPrefix1">
			<Description><![CDATA["Префикс 1"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<Boolean Name="bShowText2">
			<Description><![CDATA["Показ Текста 2"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Integer Name="iTextType2">
			<Description><![CDATA["Тип Текста 2"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>3</Value>
		</Integer>
		<String Name="TextPrefix2">
			<Description><![CDATA["Префикс 2"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="CustomText">
			<Description><![CDATA["Специальный Текст"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["‹Специальный Текст›"]]></Value>
		</String>
		<String Name="fontType">
			<Description><![CDATA["Тип Шрифта"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Arial"]]></Value>
		</String>
		<RealNum Name="tx_size">
			<Description><![CDATA["Размер Шрифта (мм)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>3</Value>
		</RealNum>
		<RealNum Name="tx_size_point">
			<Description><![CDATA["Размер Шрифта (пт)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>8.50393700787</Value>
		</RealNum>
		<String Name="typeTextRotation">
			<Description><![CDATA["Ориентация Текста в Символе"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Выровнять по Символу"]]></Value>
		</String>
		<Integer Name="typeTextRotation_m">
			<Description><![CDATA["Ориентация Текста в Символе"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Integer>
		<Boolean Name="bFill">
			<Description><![CDATA["Штриховка"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<FillPattern Name="gs_fill_type">
			<Description><![CDATA["Тип Штриховки"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>65</Value>
		</FillPattern>
		<PenColor Name="gs_fill_pen">
			<Description><![CDATA["Перо Штриховки"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>19</Value>
		</PenColor>
		<PenColor Name="gs_back_pen">
			<Description><![CDATA["Перо Фона Штриховки"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>19</Value>
		</PenColor>

		<!-- gs_3D_representation: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_3D_representation">
			<Description><![CDATA["3D-отображение"]]></Description>
		</Title>
		<Integer Name="gs_resol">
			<Description><![CDATA["Аппроксимация"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>32</Value>
		</Integer>
		<Boolean Name="gs_shadow">
			<Description><![CDATA["Отбрасывание Теней"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>

		<!-- gs_material: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_material">
			<Description><![CDATA["Покрытия"]]></Description>
		</Title>
		<Material Name="matRamp">
			<Description><![CDATA["Пандус"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>53</Value>
		</Material>
		<Material Name="matSideFlange1">
			<Description><![CDATA["Боковая Кромка 1"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>53</Value>
		</Material>
		<Material Name="matSideFlange1_in">
			<Description><![CDATA["Внутренняя Боковая Кромка 1"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>53</Value>
		</Material>
		<Material Name="matSideFlange1_out">
			<Description><![CDATA["Наружная Боковая Кромка 1"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>53</Value>
		</Material>
		<Material Name="matSideFlange2">
			<Description><![CDATA["Боковая Кромка 2"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>53</Value>
		</Material>
		<Material Name="matSideFlange2_in">
			<Description><![CDATA["Внутренняя Боковая Кромка 2"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>53</Value>
		</Material>
		<Material Name="matSideFlange2_out">
			<Description><![CDATA["Наружная Боковая Кромка 2"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>53</Value>
		</Material>
		<Angle Name="gs_readable_angle">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>90</Value>
		</Angle>

		<!-- gs_list: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_list">
			<Description><![CDATA["Параметры Спецификаций"]]></Description>
			<Fix/>
		</Title>
		<RealNum Name="gs_list_cost">
			<Description><![CDATA["Цена"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<String Name="gs_list_manufacturer">
			<Description><![CDATA["Производитель"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_note">
			<Description><![CDATA["Примечания"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_location">
			<Description><![CDATA["Расположение"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_accessories">
			<Description><![CDATA["Аксессуары"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="FM_Type">
			<Description><![CDATA["Тип Группы"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Другой"]]></Value>
		</String>
		<Integer Name="iFMType">
			<Description><![CDATA["Тип Группы"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>25</Value>
		</Integer>
		<String Name="FM_InventoryNumber">
			<Description><![CDATA["Инвентарный Номер"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="FM_SerialNumber">
			<Description><![CDATA["Серийный Номер"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="FM_ProductionYear">
			<Description><![CDATA["Год Производства"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<RealNum Name="FM_ObjectWeight">
			<Description><![CDATA["Вес Изделия"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<String Name="FM_ObjectWeightUnit">
			<Description><![CDATA["Единица Веса"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["кг"]]></Value>
		</String>
		<String Name="gs_list_custom1">
			<Description><![CDATA["Пользовательское Значение 1"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_custom2">
			<Description><![CDATA["Пользовательское Значение 2"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_custom3">
			<Description><![CDATA["Пользовательское Значение 3"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_custom4">
			<Description><![CDATA["Пользовательское Значение 4"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_custom5">
			<Description><![CDATA["Пользовательское Значение 5"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<Integer Name="gs_ui_current_page">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
	</Parameters>
</ParamSection>

<Ancestry SectVersion="1" SectionFlags="0" SubIdent="0" Template="false">
	<MainGUID>F938E33A-329D-4A36-BE3E-85E126820996</MainGUID>
	<MainGUID>103E8D2C-8230-42E1-9597-46F84CCE28C0</MainGUID>
	<MainGUID>784EAEA1-5041-4AA6-B6F4-EF263A891EE7</MainGUID>
	<MainGUID>972791D9-92A6-4ABA-84E9-29E2CBC205A7</MainGUID>
</Ancestry>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_PR SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_PR>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_UI SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
! ==============================================================================
! Curved Ramp
! ==============================================================================


ui_dialog `Параметры Пандуса`

call "ui_ramp" parameters all	iRampType		= RAMP_CURVED
]]>
</Script_UI>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Comment SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[Пандус криволинейный с дополнительными боковыми бортиками.]]>
</Comment>

<Keywords SectVersion="1" SectionFlags="0" SubIdent="0">
<![CDATA[бортик сбоку]]>
</Keywords>

<Picture MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="0" length_in_bytes="13343" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D49484452000000800000
	008008020000004C5CF69C000000097048597300002E2300002E230178A53F76
	00000A396943435050686F746F73686F70204943432070726F66696C65000078
	DA9D96775454D71687CFBD777AA1CD30025286DEBBC000D27B935E4561981960
	28030E3334B121A2021145449A224850C480D150245644B1101454B007240828
	311845542C6F46D68BAEACBCF7F2F2FBE3AC6FEDB3F7B9FBECBDCF5A170092A7
	2F9797064B0190CA13F0833C9CE911915174EC0080011E608029004C5646BA5F
	B07B0810C9CBCD859E2172025F0401F07A58BC0270D3D033804E07FF9FA459E9
	7C81E89800119BB339192C11178838254B902EB6CF8A981A972C66182566BE28
	4111CB893961910D3EFB2CB2A398D9A93CB688C539A7B353D962EE15F1B64C21
	47C488AF880B33B99C2C11DF12B1468A30952BE237E2D8540E33030014496C17
	70588922361131891F12E422E2E500E048095F71DC572CE0640BC49772494BCF
	E173131205741D962EDDD4DA9A41F7E464A5700402C300262B99C967D35DD252
	D399BC1C0016EFFC5932E2DAD24545B634B5B6B434343332FDAA50FF75F36F4A
	DCDB457A19F8B96710ADFF8BEDAFFCD21A0060CC896AB3F38B2DAE0A80CE2D00
	C8DDFB62D3380080A4A86F1DD7BFBA0F4D3C2F890241BA8DB1715656961197C3
	321217F40FFD4F87BFA1AFBE67243EEE8FF2D05D39F14C618A802EAE1B2B2D25
	4DC8A767A433591CBAE19F87F81F07FE751E06419C780E9FC313458489A68CCB
	4B10B59BC7E60AB8693C3A97F79F9AF80FC3FEA4C5B91689D2F81150638C80D4
	752A407EED07280A1120D1FBC55DFFA36FBEF830207E79E12A938B73FFEF37FD
	67C1A5E225839BF039CE252884CE12F23317F7C4CF12A0010148022A9007CA40
	1DE800436006AC802D70046EC01BF8831010095603164804A9800FB2401ED804
	0A4131D809F6806A50071A41336805C741273805CE834BE01AB8016E83FB6014
	4C80676016BC060B10046121324481E421154813D287CC2006640FB941BE5010
	1409C54209100F124279D066A8182A83AAA17AA819FA1E3A099D87AE4083D05D
	680C9A867E87DEC1084C82A9B012AC051BC30CD809F68143E0557002BC06CE85
	0BE01D7025DC001F853BE0F3F035F8363C0A3F83E7108010111AA28A18220CC4
	05F147A29078848FAC478A900AA4016945BA913EE426328ACC206F5118140545
	4719A26C519EA850140BB506B51E5582AA461D4675A07A51375163A859D44734
	19AD88D647DBA0BDD011E8047416BA105D816E42B7A32FA26FA327D0AF31180C
	0DA38DB1C2786222314998B59812CC3E4C1BE61C6610338E99C362B1F2587DAC
	1DD61FCBC40AB085D82AEC51EC59EC107602FB0647C4A9E0CC70EEB8281C0F97
	8FABC01DC19DC10DE126710B7829BC26DE06EF8F67E373F0A5F8467C37FE3A7E
	02BF4090266813EC08218424C2264225A1957091F080F0924824AA11AD898144
	2E7123B192788C789938467C4B9221E9915C48D124216907E910E91CE92EE925
	994CD6223B92A3C802F20E7233F902F911F98D0445C248C24B822DB141A246A2
	436248E2B9245E5253D24972B564AE6485E409C9EB92335278292D291729A6D4
	7AA91AA99352235273D2146953697FE954E912E923D257A4A764B0325A326E32
	6C99029983321764C62908459DE242615136531A29172913540C559BEA454DA2
	1653BFA30E506765656497C986C966CBD6C89E961DA521342D9A172D85564A3B
	4E1BA6BD5BA2B4C4690967C9F625AD4B8696CCCB2D957394E3C815C9B5C9DD96
	7B274F9777934F96DF25DF29FF5001A5A0A710A890A5B05FE1A2C2CC52EA52DB
	A5ACA5454B8F2FBDA7082BEA290629AE553CA8D8AF38A7A4ACE4A194AE54A574
	41694699A6ECA89CA45CAE7C46795A85A262AFC255295739ABF2942E4B77A2A7
	D02BE9BDF4595545554F55A16ABDEA80EA829AB65AA85ABE5A9BDA4375823A43
	3D5EBD5CBD477D564345C34F234FA345E39E265E93A199A8B957B34F735E4B5B
	2B5C6BAB56A7D694B69CB69776AE768BF6031DB28E83CE1A9D069D5BBA185D86
	6EB2EE3EDD1B7AB09E855EA25E8DDE757D58DF529FABBF4F7FD0006D606DC033
	6830183124193A19661AB6188E19D18C7C8DF28D3A8D9E1B6B184719EF32EE33
	FE6862619262D26872DF54C6D4DB34DFB4DBF477333D3396598DD92D73B2B9BB
	F906F32EF317CBF4977196ED5F76C78262E167B1D5A2C7E283A59525DFB2D572
	DA4AC32AD6AAD66A84416504304A1897ADD1D6CED61BAC4F59BFB5B1B411D81C
	B7F9CDD6D036D9F688EDD472EDE59CE58DCBC7EDD4EC9876F576A3F674FB58FB
	03F6A30EAA0E4C870687C78EEA8E6CC726C749275DA724A7A34ECF9D4D9CF9CE
	EDCEF32E362EEB5CCEB922AE1EAE45AE036E326EA16ED56E8FDCD5DC13DC5BDC
	673D2C3CD67A9CF3447BFA78EEF21CF152F26279357BCD7A5B79AFF3EEF521F9
	04FB54FB3CF6D5F3E5FB76FBC17EDE7EBBFD1EACD05CC15BD1E90FFCBDFC77FB
	3F0CD00E5813F06320263020B026F0499069505E505F30253826F848F0EB10E7
	90D290FBA13AA1C2D09E30C9B0E8B0E6B0F970D7F0B2F0D108E3887511D72215
	22B9915D51D8A8B0A8A6A8B9956E2BF7AC9C88B6882E8C1E5EA5BD2A7BD595D5
	0AAB53569F8E918C61C69C8845C786C71E897DCFF4673630E7E2BCE26AE36659
	2EACBDAC676C4776397B9A63C729E34CC6DBC597C54F25D825EC4E984E7448AC
	489CE1BA70ABB92F923C93EA92E693FD930F257F4A094F694BC5A5C6A69EE4C9
	F09279BD69CA69D96983E9FAE985E9A36B6CD6EC5933CBF7E137654019AB32BA
	0454D1CF54BF5047B8453896699F5993F9262B2CEB44B674362FBB3F472F677B
	CE64AE7BEEB76B516B596B7BF254F336E58DAD735A57BF1E5A1FB7BE6783FA86
	820D131B3D361EDE44D894BCE9A77C93FCB2FC579BC337771728156C2C18DFE2
	B1A5A550A2905F38B2D5766BDD36D436EEB681EDE6DBABB67F2C62175D2D3629
	AE287E5FC22AB9FA8DE93795DF7CDA11BF63A0D4B274FF4ECC4EDECEE15D0EBB
	0E974997E5968DEFF6DBDD514E2F2F2A7FB52766CF958A6515757B097B857B47
	2B7D2BBBAA34AA7656BDAF4EACBE5DE35CD356AB58BBBD767E1F7BDFD07EC7FD
	AD754A75C575EF0E700FDCA9F7A8EF68D06AA83888399879F049635863DFB78C
	6F9B9B149A8A9B3E1CE21D1A3D1C74B8B7D9AAB9F988E291D216B845D8327D34
	FAE88DEF5CBFEB6A356CAD6FA3B5151F03C784C79E7E1FFBFDF0719FE33D2718
	275A7FD0FCA1B69DD25ED40175E474CC7626768E7645760D9EF43ED9D36DDBDD
	FEA3D18F874EA99EAA392D7BBAF40CE14CC1994F6773CFCE9D4B3F37733EE1FC
	784F4CCFFD0B11176EF506F60E5CF4B978F992FBA50B7D4E7D672FDB5D3E75C5
	E6CAC9AB8CAB9DD72CAF75F45BF4B7FF64F153FB80E540C775ABEB5D37AC6F74
	0F2E1F3C33E43074FEA6EBCD4BB7BC6E5DBBBDE2F6E070E8F09D91E891D13BEC
	3B537753EEBEB897796FE1FEC607E807450FA51E563C527CD4F0B3EECF6DA396
	A3A7C75CC7FA1F073FBE3FCE1A7FF64BC62FEF270A9E909F544CAA4C364F994D
	9D9A769FBEF174E5D38967E9CF16660A7F95FEB5F6B9CEF31F7E73FCAD7F3662
	76E205FFC5A7DF4B5ECABF3CF46AD9AB9EB980B947AF535F2FCC17BD917F73F8
	2DE36DDFBBF077930B59EFB1EF2B3FE87EE8FEE8F3F1C1A7D44F9FFE050398F3
	FC91C05ADB0000000467414D410000B18E7CFB5193000000206348524D00007A
	25000080830000F9FF000080E9000075300000EA6000003A980000176F925FC5
	46000029464944415478DA62FCFFFF3FC32818380010404CA34130B000208046
	2360800140008D46C0000380001A8D8001060001341A01030C00026834020618
	0004D068040C300008A0D1081860001040A31130C0002080462360800140008D
	46C0000380001A8D8001060001341A01030C000268340206180004D068040C30
	0008A0D1081860001040A31130C0002080462360800140008D46C0000380001A
	8D8001060001341A01030C000268340206180004D068040C30000820A6D17541
	030B0002089403FE830184311A2274060001048A00463080C7013C1A4663850E
	00208010390018077051CC38188D061A0180006281843B5A1CA00537247F4014
	204B21C7D928200F0004100B5A58A3A57D381B571C6046D56898920400028809
	39E0E09900522BA0450C5C0D9A118C4860B4DA20150004101372B022A76E5C81
	088F188862E4526B34F4C900000144543F003943C0A30A4F1184564C8D023C00
	2080504A765C010717C7DA52428B0F3C86A0691CAD3080002080B00416AE7A15
	B91AC01A9A783462AD69D08C1D9900208098701538F06207AD64C76C1D616D02
	C15B4DB89A4C987D8B91596A010410E1C21AB97EC66C0821975DC82515AEEE02
	D646142E9347420400041099B52591BAB0562DC85CACF187565E0DEF28010820
	3287A3D18A295C7D31AC0D535C91875919E08AB6E1040002883ABEC25A15A395
	2D7892F94806000198AD9214006118D8C505D424ADFEFF812DD8168B78B1AE07
	F1A047C1CC71088459201FC6EA51FD8B4D6CB1C65A6BC23084E0638C6E1FEF9D
	EFC769125CACCB9CD2711CDFC1567EAECB4C3221ABBA22C44EB708404800D834
	D02AA5B426A2322FDE6A747FA67FE2FD2600F16593C2200C44E13099408BCB36
	46AADEFF4A2252A8D8B5745329092FBE6CA4172865E06D86F9FD60607E0BE098
	F3BD6DD37D5A9ECB3C3F86715C5F6BFCA4142390600CEF20374EB3CEA9A84879
	0FA926A3E44121402F72B6A28921240380151215998844D4596BD49DB43A57ED
	ADEDBBCE5F7C1D42139AFAEA999011474BDFF7F3BF247601782B831D84412088
	C252D08378AFA944FDFFCFB16D68FD0EA3B1BB386CAF5EED9CD8644976E731E1
	8F00A6C79CA7DC0FF771CEEFE76BE14F91D250087BEFAC53BBE131CCAF157C36
	52634178EBA6CE0420CC8BD1B396E8C2B480413514569D23BBEE2045589439EE
	0050417618707C687CD81DE3E17AB9A5EE7C6ADBD4A518E3BAB55391EAE77FB6
	81BE02D05AED3A08C330D0795AF41FA868FEFF472A31940FA818811D185AD7E9
	39CC6C7051A424B264F9EC3BE5C70DB83DEED3651ACFE33C5F5FEF275E38011C
	516688394567730D96486451DD649555851454926D9B785CE0338A99062BC674
	ADCDC56041411B3E6115F10429906FF2817AD0219F8257475011B9CDA4825458
	BA58164D393333345186524E437FECBB43871EE4061CBEFD2CFE875D00DECA1E
	07611806A3696D87FECCA83BEDFD4F0154DC025811EC3871C2E78A23203265B0
	12C52FDFF36F005CEFB7F37A3A5ED6D7F391AD0A54DDE2551C771D3A8F1E5936
	B554528677720D5C03456691A1EF5A2261DF8BE3616A36E7231AF00D7DBFBACF
	00B7108E828F1A58C8916480347593215B6099F4AD9A1222E0B3A30462840CD7
	9050041014A7AC56AAA1289448328E034C35CFCB7298A7FD0400FDB6FE99898F
	00B4955B0E832010453BF8005941E377D5FDFF579B74337503962A84F4DE21AE
	A0295F042521F771E62703B6F7362FF3FDF9585FAB305F604AE3AC6B2D7B7DC4
	B47F20C981B41A4D996D6DE7B0BABA21E8EB8A8528298764E61CB7A48C08915D
	7003C6483617524BBF514A6C60865E572EA950901E6581C53063D71542802B11
	FFA342F4811DC0AD9C238E134748AA8CE06D1816D3308DB7A1BFF6C882F71E0F
	2D80FAAB0D5F0168B3A21C8441182A9B406189D9E7E20D64BBFD12AFA1F1473D
	C8A47CD8F828F102267E52424AFB5E5F1BF81180FBF3B19ED7CBED0A06E296D6
	3AE4DD4702131170C90C92C21C6218288438386F9BE08ABAEB8CFE457748A22A
	7CAF1D56279E5A310A02A2167DADF8B64A2C777BA4DB002A94503D0936AB3299
	2A4A6D56325221C296BCE145DB81800585F32B17DE366686A93796C881310D30
	60A1A2269EE8384D4B9AD3298D87B1C1003CFE57101F0158338314846128886A
	5AD2D2DA4B58507023F4DA167A13C5BDE821D4F8A3923A3382E05270D552F821
	79933F139A9F05D8EE77FDB0399C8E884E4CABF0BEAE6A30B1685823D600319A
	6606EA208F93097038E19D725F6744A43DFEFDDFE873C9A0C0C533734CE5949C
	B8BF3FF25C445154A0EC04E5F41C0947CDC1D81D27D24FD1AC2EA199398D00D3
	A2053EC2CD4208D7CBD92CA22E2F3CFA1273BBD3C2A2C2262FAB72B55876EBAE
	9DB73048F812BA042F7F97E12580488880EB37AE2F5DB1ECD19347A054F5F72F
	D04D7CBC7CC08217E8975FBF7F014B5A70739C0FE81960810E6D8602BD05B105
	C4FD070E6CF00C0423A805020AE2FFC02006C510583D03A4888754AAD0762CB8
	D26604374899C0C1CC00D10F8A4EA67FE0FA1936170731045445FF63401B7FFD
	07F5C33F70E4FC8734978099F5E797AF9F3F7FF8FCE3D70FA049C0C4C4C6C501
	6C86FDF8FEFDCFAF3FC0161B3B1B8B84A4948589B981BE3E30BF0073033C1AA8
	D57E0508408AB5E4200843C1B6624C0B2ED4AB18899E957827A327012B6CA0CE
	CCD3BD895D92B44967DE7CE84F040CF9D95DBBDBE30EC7805C63DAC45843D568
	F708BC6D53E3F727A526541E340055422898707333041F6C70D4303D31452A14
	957367E31B0CAAAF1256AC450455635FC442E071E64F2C9E6A4E0E0EE33E67CB
	B5EC997529B64FD68512B45085F888682119940BD55344FA3C4F23D2E235F47D
	CE23F6E12E7027643A328CD3B1AE0EFBDDA53D9F8E6D14075816D4FFD3F01680
	3133CA4110068268D120F84381E328785B120F41E28D441A352AD83AB34B941F
	A3FD6E9B763BBB6F27FDFD00EDA16DF60D69751FD275626D01B8B9DEE102599E
	599B431794B0D254F43BB3C1D3E116F39F32893843C06ACE328280A24B2574B5
	B567E644E1BD58A5ACA9C4C0056571F8C8DCA82D63BAE82B7B23943152B34407
	91D80B3FB971125E888119D010CEC0D268FCE3361C4F9DEB7A744CE85061B9C7
	E778BE5CB1C532599565B1DB54F5B68EE9FA40BEF8DB17FAFFE32500E9E59283
	300C03519208890A459446701360CD062E87D87038E0128456084A5B5CC67660
	CB8265D47CA4B13BE3F7A300BBC3FE743EB677CC0BEDB40818B5CBCBF5F16CF2
	89CF8B9065A3AFC04A47DAD43C8E0FDD8B346F9560DDC725D27B98547591E8D4
	AAE7B0AAD2FC46E5D7B665065345493FCB5FD41192402E351AA156BC0E2B9824
	97B067F6B58E2D4D3098E4723E2E8AC3C1C824041C303220B7256C116755798B
	3136750D6CF463DF518FD0408D6053613EDBAE37ABC5123B61477FE6F35B004E
	CC6705611806E3A388AC0C6187799E7D20411F4B10DF73CA60EDDCF4626AF225
	FEB978F1DE8635F9F6CB97FC2C4077EE0EA7E3ED3EA5612A970B4EF73C5FD390
	D8EC34CDDA575E85EC54F4507DF159B7912AF49B95A85136EE3BE5B97C3B6102
	36582020E709042A5EAD1BAB06092BDCC80224EC29AC98E8354ECA4F2670C9BC
	585539C5139A5EE4600F850FFE18811BDE8E8959571EA61EB9436CE3328D31F6
	FD85FD137BBC555DF31C11C7C4CDCB97D526B4FBED2EB4E13D34FC87A3A7007C
	9A4B0E8230144549EB0435C5183663D802D1C531706BC43D587F616A3DF7BD0E
	897328EDBBEF736EC3BA00F36D9EAE133B7A3DDEDD21B5DB7DCE7798A1EF8FA9
	4BB826D2AA6289755B5FC27B62D5801493B10C15EC9B8A3DC493E346A5B810A5
	3101A3AAC4E2560AAECA72F1AB7B0862262D255E91498B8A33D564E60DBBA768
	125F2D23B58D9A5C46F57D5EF62E68E5651FD7F0D5D55271C52D571AD3D5E714
	78E1446B82E9093642BF7DE6FC5916A01AC0C35BC01D1BF06FD70EA7E1329E99
	CF7EF610C2EA3F6D7F84F90940A715E4200CC3B0352D5C76EC184F438847EDC4
	E7800F0083B121B4C3E8C04E0B4208AE952AA5769AD8697F10B0D96DAB75851C
	6CEAD6CF3C4CD3717FB0CE95F312BAD8C4D0C5EA99E98E464E62321DA651FA91
	9B54690C473DC2DAAA659D9A88D0EA992D070DECADC37DE821CE6F3DA414ED18
	700346EA81ADB66360162F796029E3AE07DB06AFBF9B4CB102AF0B0850D36001
	1111C209593069C027A4C1A50E1C3966B2BFB9E122E186407DD9BA9840E42A53
	CD46D31DC6EED2D4A733FC04FA1EAC66776D2905F3BCF0C56AB1848913917FAF
	175F7F7F3ED17E0AC0A615E4200803416941307AB17CC818AFC6F823E3C1C7DA
	968458BC88C4996D31A69103DCBA0D3B9D9DD96D9E00DFF9CBED0AE5ECBC6B8D
	01D4ACB5D19E54F5F297ECE618043ADE914F9980D824D38971448B2AA1E329EA
	13FAB15263F7437886F018E94799149689891D32FE20524D1A1C2F62DDD622FE
	F1E5C1FA8E93D4540862195DCC369EA686E56608AC2C9A47AA884A353BCDA2B9
	7300417A7F520592852043923F8B99DDA4AB170302227DD7DF9D4540B36DDFE3
	0B6763DD6CAA55B9DF1DCEC753767FE7EF7D862C2B1F0108339B1D04612008AB
	058B6DF1D82B3E9D893E8389894F8B72B1FC04A8119CDD5663BC7807D2747767
	BF197E0B70BA9CFBBE43CB036F5229ABB2CCB4B6D662A98A5582C3505F2E6368
	10359B572563208B6EE83BDE8D11BA393F9B28A1A1380CC0E35CDD362D2E88C8
	5CD04B988371F433A7A1B80AB8B83CDFD26DAE25EB3B7D1E7382C7EAAEF1BD27
	77C525A61C3AC50C2490ACE892214F02D390C14CA124D4F5CC0301B142821A0D
	5F185EE6AE80469FE69C83A3607C5ABCADC344E8FA7C0CE3B5BA4197B431462B
	77AF5164A536BBA238EE0F469BBF9BE0FBDFD44B00B6AC6D05412088E635C52C
	45C5A7B0BEAE17BF4CE83F023FC44C88B5364AB4B6B3B31A04BEF8B2BACCCCCE
	CEB9F87700C5B1389525BFB5E8327FED57D519542C4E13941E3911F3F81886AE
	5825CD1D0A5D28B6222677585D01751F65DBCB913EF4780BF218DC9A3186A7A0
	B43A2AAAB3B4B26D96A66912C59EB7423DB59159E8CAABF859F96264F9D8F0FD
	EC5E1C83E02EFFE75CAECDD04BD4B52DD3362D85F3E86F0085EBB8A8146202B3
	4424D2DE51CA4D23594D71D0198849A52D46F08080901E378DD7050D52520F58
	05376D5B56D70D3E8CC21049F0070F820D886B7EC8F7D96E16096681E12B009F
	D6B282201045D53475A1061659DB7097447D50E097046DFAD3522951F0D18BB1
	33F72AB56A33308C30F7E539E75EE67B00F0399C8EA0D73C2F83F92CCB52D8B5
	5806E6D862C9419F8F786CA310410116865E5463DC64B9CDBF2E39A3A2717BBD
	259DBA1EC49C4893849041ADDB4A57B4681D85ABD09B782861852607AC3E39DA
	A2EB23C27BCA02B74E9261E52A2540AF411FF7E72DBF9E71417241B00CC3044F
	734180B42DDB46A38E38C21AA09F64704D17DDA09AC83D44569135D6110AC9D4
	6B3C0B274B58E3929B82AF6FEB065AB1A96A7FEAE3A0284AD77190FF781FEF36
	DB3FCF447E33F111804DB3C9411006A230FE0453406167748D473031FE5CC285
	F1782C3C931C005931B8B705EAEBB4D5C4D8551302292D33EF7B337C2F14B7E2
	5E96446D962D6066899AE56A9D240262C710178C3C746AEDCC272758D3A562BE
	E8B92AC625365E350006694549F5521D1C5B28426A08791F0E138EF9B0DDE5F9
	062966706ED92E37F8F092F6F8A47DB5D3A635DE1F0E031E0699B80DC3E0D443
	22C05108B2AA7E5475857B100186947AA33D511221C230979D347A8EA58F27DA
	57A3F00CCB0BFC0AAE0065141DDAD40D7CD28E83EDD7814D514AB684F14CD379
	1CC7988153A662763D5F4EFBE3DF3FD57E1AE36F01C8349B150481280AAB198D
	19A40BD307086A51BD8041D0DB562F13B52C68672E0A3272A3E274EEBD26510F
	30CE8F33E77EE7CCD8ADE4ED0F47EC195E0EFB9EDD7CDF77FAAA41378B87D9FA
	4EA3D935A010FD714F063B49CD7F446083C37ACADECBA2021A4134AAB280B198
	8E2771BC8468F231B26CA111899DE5269247D4382F71C45F17FD750BFFA2CB5A
	02055A8E8A440607ACAB542F0C478BD9FC9AA6E7CBE9F9C8289E320DF898FC95
	0F3D6FE0BA1494A3EA746AC094E6B4830097FBC367C4E2B1F0988CBE96CC946D
	0A951EE01A1AA1488551A41C9524291C751004801765EACD6E8B69AF57EB9F37
	6DFFA5F82D0059D69283200C44A12502BA102EA09EC105188D47D685275113E2
	050C1BF92C34F253EA9B6925266E5895A4339D99F719F300C7F309B0767F3C7D
	D76BBB1A51FAE309731BDC900D316D1183A2F00A96404FF5CAB8C0EC1CD80696
	2DEED0174D4A2484B2DFB53505688BAAAAA365B48AE3413D7EB3CC4A4A379910
	C3E2050961CEAAB4D8E9596323D5828C3C7A60AA4D165CF8E200AD5C202368D3
	8662564830AA72319F1545995C120C55D7F7ACCE2AC1269B260C02603566370A
	43D0BE0E482E7B5D08D2C8094DA575AF93BF242507FD060E30CD25FF15BF05D3
	10A42BBDA6799643A566F90DE77787BDE38CB6EBCDBF1AF865471F01C8347B1C
	0481200AB39015B22E926067E20524315478652DBC8AD1330836FC1492854010
	9C1FB0B18302023BB3BCEFBD612E4096A6D291ED605C4F81E77695922B09724B
	110B6C6EC47E94228A50509D46BE8DE0EEC4B8E5C37B63E29CC0EA81AC47784F
	588CC634EFBA0E824D74884E49C2110ACFFFF821004B29BEB36CE67C5A6B875C
	3E1C20C990102FA98B4D9770E83FEB0D93E2480618CEBBBE43AEB734C80FE83C
	F429805C5916B7C7BD2C2BA5BCD618008130DCFADA370D7C15078183B64938EC
	D1976C0F2340318F199041A851D06A6095895E27560EAD83DDDE793DB3A2CAB1
	06790EDD73BE5E7CBD8E8FF1FF8F9DBF7A7C05E0D26A521004A2B069B918B308
	8B92BA408B6ED7A2DB445D47E80C860B49C1362E0299B1EFBD6F68D14E4594F1
	CDFBFE9EBE00EAB005CAA76A0E8D863CC47D9F01B3018390E65695B71B08482E
	F0E253E3078232E30074394818BBA32AABF4748CE39931898F8DE443EBFC9132
	5D5B9ED18ACC6DC42EC8BB2271BD111D260EAC655C23E68BD268C25CCF0B25C1
	24D02C2E816A6556293F5E3878570815E85294A12C9FC5A3C0EDF13836ED2B5B
	A106F3BEEF3F5AA75057E82329A29FD37134971C78FCC7F3B15F852E5089C12A
	8B8C8931FB435ED775F7EED6D9A66D9B74B1BCDE6F97F336DFE57F84FC3BFD0A
	20680400D30B300480ED055085C804AC4538408365902282111163A02EFE5F50
	771452173083430F345F08AE7841CD3846B0C3C14B14C07986E9D3D7AF2222C2
	EFDFBF7FFCF03150D385CBE7CD4DCCA1910F0A6EC89C1F880DE9CA434498C129
	11681430F903231254386302667C6D6D5099012C02FF8022021801400678F4FF
	ABA606A78C8CCCA9D327EF3F7AC0C9C9F9E6DD5BFEBF7F0504783F7F82C6C17F
	A6BFE094C1F41FD20A02E75206C8083B036CB411D4C5010F7A438A654648E78E
	11D8DE9590947EFEEC09B09B232A2AF6F2F54B1151914933A6B4D5B73060DB6A
	07640004A0D48C75100462308C82C0890CB8AAF814EAEBDD7B1A121970221807
	168C895FDBC3C1CDE5C204B4FDFB5FDBBFB1F79E27A1C8BE27736D8898156B08
	D1B06FA3956FE316193614243A05E227E2F9B43638DCAA6FAD139E8F0123AA6D
	D575770A7C32621CC7FDEEC03D09A231D8F4781C4DD5A8FA5F22E37611D38594
	17B37EF9F7904B7CB6E48BA96A769CB85BDAE45CF634EAFA08C86E6DCBDB090C
	B82FCB9282ED354DC92AB5565962100A8279990CF4A910A42C6BFA5C14E854B2
	5F3C95624B960F430FAD3AB701798573D7A6B99CCE3F6BFA16868F00B49A3D0B
	C2301884C907550AA693B64BFDFFFFA90E6A9B2EA2A050482C8AF75EA282BB73
	96900B799FCB5D16607F3CF443FF94505B486B29CD002B61AD49E32269A1DF1F
	032CD568939F12EE8925B67C47E8D8E86C94B8308081636CE0FD00168A73F4E3
	58AF3700ADA258486B8102581A5AA38DFE43F46AA51403254A31D722B605B134
	75D3EDBA071F2BEC00F320C4004A6639CCE441A0BF9F2E9F8422E1009C720A41
	E816338FE0D02CD3EFF3E9B2720E4BF710AFD3AD72D5B66DD56F12AB5E02D06A
	6D2B08C330541159DD9BAD2FA2BF22FBFF1F70CC8E817B5287E02E384607F524
	CDFA07E6A1CF6D4E939C9C4400A8EBBBAD4A5AFCA31EC7275B0567B088287B39
	E142DC446E242898C804E21E557A19CAAC65BB01B8E1D9CE4DEFA6D96B932AF5
	78BEBAEEE3665794B61F7AA3C9F0F797D2F7770312211400031C743E9E6C7563
	AE36834DAA64F71D47901CA478A69FBC04E08324CE6C8D64A295A8188BF6E545
	CBE0E4CC8D21A28094A2B635078D13642C2FAED9258B53E558097E02D06AC538
	0CC230708960819897C0FFDFD10AA1A86B06702BAA065097420FDB2C156BD76C
	8EEDBBDC5DAC0131C6700B6048A010EE4D3EEA38F3700FB75B414B85A52DE666
	3B20C9D39194E88178C5AB3C1B50EA342FA02668D18AAAF44A43CF005CBE0F97
	F6CACCD800223A07FA3FB5C1691B32200F18B20BE10D4DB07EC87B5405AD8032
	DC6E0B6A2D6271E9808BA7AAB18250A04DA8056D9B6615FB456479BEA409EB55
	967E1C9F450199F668EAE647977D05E0D58A72100661E8801F3568C8A2D92DE6
	FDAFA046A78B5750CC06624874FBD2473B174FE005A0E13DDAD7D70E0034AED9
	EE36C618E4C1A4ED143048AE191FFF667B36CD10D9F41F63C868D3846D092528
	6D72DDE670492C0A60399B4CFBAEF7DE212DE5CB1CFC8A318647E85ECFABBDD4
	E77A5F1D9C6FD3847931C787F80F0CB8088D2BE859AC8AE3A902A9018CD61AE4
	4061105F1D968DB34CC1FD90E4B686146A62A91A04ABE467E1C99FA46DBD7BF0
	3810FD09E86AED6D5D9680FC37868F00BC5A490EC2300C9412B194562288FE02
	B82178399BF804882BE5867A23891C8A7A40C5F1448817F081C49127F68C3D29
	014CD776C77D392DB548F958C87A5AFC0A0AA056DFD305FBA0EB1CE15BA42856
	63B054410E68199A46EA20110371FC0E6B1F81886B31A761A0FA44C17A22EBBD
	73D7EA76BA9CB7874D08CFC56CFEB7DF900D33465E312A582570C0795EE828D0
	48452FB606CDC57C25612BB5032C9561964C53A5C4734054BB2E928EB66D9A97
	9918EBBC31E37B5DAF97ABDFDB3F02F06A363908C24014564484527EA251ABF1
	20DC7F4FDC91B8426350A3AE8CAD0184FADA024770DB55DB99CE7CEF753A0C65
	8C0584F28FF00975A648D652F1BB6BABB99A013A6D084E692BE7A745708D3166
	E9BF756342E892D4D9417D971FEBAA0721873534C01D0DC22724E9FDE1BE9C30
	8897EB151EBE00A673F146302CD5D9AAB2FADF68A6BE3260529224F9E998EED3
	288A89E7030B20D6F4B7DBA43F994AC1A63642441AD23513BEB273BCA549D656
	DB3252E1E9285ECC8B73F1AD1BCF9909CEB34376B95DB76C336CE02780A02D3C
	7636765363B3278F9F021BCFC03C092C94C1132290B57F90EA950952A480123C
	03236CFC0A3C0E01AAAE99C11D655853F5FF7F589B153A6300CC10C032119809
	807D02456565790579A015EFDEBF79FEE43930F503CB28111111092949615121
	6E7046A1EBFA64B05B39D8393CDD3DB8B9B9806523D0C99C5C5C7FFE811A6CA0
	9530B0C126480B0752DE00C5C15D794670BFF33FA4DB029EE461042653C82837
	E37F266E0E2E7E7EBE4F9F3E73F3F27CFDF61D98CF0E1C3C806C3B4000DEAD65
	05612088ADEC457A904AA59E2BA8BFD01E453FBF07BFA28814BBF4222DFB7032
	29F40FDC3F1866262499EC4AB19BBA19DDE08651E491E0944CF2347B7A2C5607
	73316A087210E2B8FD711DA50389A9E6C48C8161B27C81390BAE4F65270B9165
	DB63599E2FD7EA541587BD10D5FEDD77AF4EA423CC7693909DFDF3472D7D82C0
	F7DBE3E35C881EC1D08D9DBF93F64019B5427F64BC4C4F68CC0CD0C98DB48B50
	7B52C8569702CCC4ECF23CE1B210E0E47BDF3EDB10D709FB0940AC19A6200804
	5118D72035E997D67F97568FA05E27F4E64210A241B53F32ECF966B323740279
	EECC30DFBCF77B80DC98AAACBB4B370E374C7794003E0B6E9AA6171DAD998138
	B1303C41F28D1273C3E501095EF36A95097628C9DF2E227DECDF842ED050C86E
	48D10A2753645A278763B08DAE7D9F6BD39E9B3FE4F4C9537559EDE39D7D5A86
	AA15E4638B4731F138F89DFDD4AB183F5DEE02CE25F57CF737B862BE791563B9
	A269200D63360CA2FBC382CE011F2B947D0410CA3CB2BF8FDFCFEFDF81ED4560
	69055A6BCBC5CDFC0F341C066AE1429709833BE6E03C06B1FEEF3FC85C01B499
	066DAE8297BF3143ABF0FF4CD0B550FF41BD37C8B0232B283240ABA53938F9F8
	7824A5C455959580E58FBDB54D7343D3C0EC5401E76F60201A1B187FFEFA155C
	3980AAB23F7F7F4166E3401301909E01A4310A9E9F86160790D576E06119D06C
	DA7F482500E9C08262859B870B58A7B2B2B3FCF9FB9B9995E5E6AD1BF0080008
	20945EBE9ABA5AA07FE0DBF7EFDEBC7EF5F5F317607F919D9BE30F688CF70F78
	880D36F8055AD2005A590EDE2D0422E0C362A0B63F240AC0AB1F20E37290AC0A
	EE54FF6384CD1A403207B09263052D52667FF9FA95A6BA466951C9806D150203
	60E230D03700F6A14023CFA0A514FF7EFCF809DA6F004E85E0B21F4282D7AD40
	04A1B3170C10DF827431FC67820DDB80E6579898D8418B7F411B46C05525F3CD
	DB37E1FBD401028809D5114C5E1EDE9A2A1A5FBE7E05F68F80CD12606F809D9D
	03325A07195D804CBE80867F81FD357087ED3F78EE14B44C19D261070F6D427A
	3090440252F0EF2FA49DF01F3ADF0D722CA4B104D471F7DE5D5323D3CCB4CC01
	DE2F07CE04C242C2D2D23240FFFE04AD95068DE60213D97F0644570BBE2A123C
	65CDF00F3245F70FBAB60C58E141D218641519645A9F950598E3D9C16CD0FCD3
	F3172FC1C3E62043000288096D5F9DA0A040526222B06CF8F6E327B0447EF7E6
	0D30348105050368F1F71FC8026648F903ECBB43561B40467018410B78204B07
	400513641891093CEDC704EA55B24026C3217336A0640069AF3230DDBA7BDBD5
	C9253A226AE0372C82AB0120435156E13778692E30FC409B7A400109ADFC80DE
	026FDEFC0F5D2B01597DCFC00459E60D998F022F9A62826C7B00CF6282068781
	D9FCEF9F3F40E3C141FFEFD3A74FE0B29D012000F3669403100C0451363E1A57
	E04A04710D89D38A2B88DFC64F5133BBFAE3047A81266DF77566BA954F848889
	EAAA9EA719D7CF1902ECC3BE419C5CCE9558442D3A92AED091DAD96E6BE4B754
	8EFE99D6819F232EF63B915E7AD84543AA427249FD557159D7B119FAB6CBFE31
	8C4210364C4643006BEFF8123D31C74CA805CBAFE1371051C1E9533EAD91D238
	6ACC2E0C1873A8406C032AC180E50F6FE07E0460DE5A52000481688647ABAE11
	D13EEAB81554AB6AEF22309466DE13A21BE45A149171DECFCF05006F29721244
	3474BDD69EC6D6AEF3D89D1368A41F7C90ED8B94032DF85552CFE9F09AD7F861
	B7A0A14A4880B847D24F65A7791ADBBAA98A32FBCD886A31DA655BBDBF853D29
	F70A8142801E13519624CB31316C0C23A7A8F31C0F512446C952B02518185639
	3D3CB859B220DBAACC7B041013E6E65EF012F07F9A9A9A657945C0C6E2E7CF5F
	806A5F02BBAFCF5F0273253B3B68D1D97F50F3E0376825042CDD4356DA42D7F7
	23D6ED4253C71F707F1DE864C892B75FBF7FDDBE7D27272B17D8EC1B3CA1CF08
	5E5DFAE6ED9BAF5FBEBC7BFB9605342AF307B2301B32DCC2006143768D034B27
	68C304CC872E1266808D1181EB03C89E43F09A4126F81255502315D67CFCFF1F
	208098D0FA23908E356452455151B138BF484D45F5FDFBF7C0C4FEFDFBB7E7CF
	9FBD002FEC6167676306AD9400F50C400B37FEFF872D27832CB064807789FFC3
	464C19C163E6C0C8FBF5EBD7FDFB0FCA0A4BF4747419061300A55646C6FD870E
	02430E18019CE0A169765676F0E40B68D40B58A6422625C1653F28D583EB4386
	7FBFC1352268C52AB4E9030E60100DEEB63141A6D4202B4F8185C61FB0246851
	010303400031A1654068AD02E93E31318A8A89A5A5A4FA78FABCFBF8FEEF1FA0
	F58C9F3E7F7EF4F0F18BA72F80A53BB085046C0881F65E817313BCA8844EE131
	41431E26022AFBBF7EF9FAECC993BAAA1A1565954115FA9076E1C3C70F9F3D7F
	F6FCC95350E39AF1FF9FDFBF38B938218BC6E02B1AFE815B20D0A9EF7F0CD041
	7958228334B1C13B12FE839B8EFFA03BA4C08532500F68273313A4350B020001
	C4829609A13B7E401B57208514030F0F8F8F97B7AA8ACAEA35AB1F3F7BCCC3CD
	FB8F89E9FDFB0F9F3E7F043A4E505088978707B29E165C0141321AB0CDFB1732
	8A089A220335CE40D1FAEEFD872F9F3E37D537090A08320C32006914CE5BBC00
	D84B7CFDE295B0A808D083C0E61F17271768AA0EB432139A4641EB0720BBA3C0
	6B67200B1A214BBE219B19FEC3B60B015B46E086E23FF0CEC4FF4CE0C6222B2B
	EBEFBF6C908A0268204000A1440064CF046877F9DF3FE0B2880132D60A4CBC5A
	5A5A05F905870E1FDABA731BB043C1CDC5F9E70FC3C78F9F8108D8661514E2E7
	E3E307F66C81F6808F09F8CF005FB0005DDACAF0EAD55BA0931BEB1A79402B8E
	061D007AF3C7CF1F0F1FDE676562E3E2E102F6D781AD0F694961D06A624644A9
	CAC4025A93F587F10F644126332B23A8C90D9A7802EF4E030D1141D6BF435B95
	C09E26B0640295F97FFE82923EB8F5CDCFC3072A4EC0002080583087A540910C
	5E11C50C2DB5408D2A606B928F97CFDBD35B5F5F7FF7EEDD478E1F03260A6029
	098CABCF3F7E01BB6CECECAF38B838850405B97979805102DACFFEFBF7DF5F7F
	D838D880EC172F9EF171F3951695B2B2B20EC2D08794066FDEBC79F0F091AC94
	B4A898F8DB57AF79387878F8F8C0C99F0558DE03D33223643200BC81E7DF7F68
	FF0B5C683383E38011B24610B4E907DC3C012760D0E2B6BFFF7FC327E48116F1
	707343F7893230000410FAA251C4F29AFFD065C9A0E99A5FBF21DB60200BB881
	55C8FDFBF777EFDD75EAF419A05DDC1C9C906E0864EE05682E0727BB8080E0CF
	3FBF80C9424048F0C3C70F32523285B9050C831800BD06EC1C3D7AFCE8C2850B
	576F5CBD7CF9AA84A48498B898002F1F2B1B3B648101B4A901EECA8326E5C1B5
	28037C1D2F6428F81F74BD09B810862E0EFFF5FBE78FEF3F8081C3C9C501ACAE
	15E515EC6DEDE5E4E438383800028811F3382B48F5F0175455FF03AFF487F6B5
	610B37413601EB2560867DF0E0E1E123878E9F38FEF9F3574E4ED0343764A52D
	A43DC0CDCD0354F9E9F32717479794A41486410FFE835633FEFA0EDA7BFB879B
	9BFBCBD72F67CE9D397FF10290012C88383938215D51603EF80D1AA587AE0964
	802D018134DFC121004EFBF0D5ABFF408B247FFEFA09ECA072F2F0BC7DFBD6C6
	DCCACAD2524C4C0CD8A6070820ECCBA621AD997FD096D45F48ED0AD917066EAB
	41EA18D0AA1BA0F6E72F9E9F3D7BF6F091C3376FDF6402AF3960636103D639C0
	FAEBF5DBD7A1FE21D191510C431C9C3A73EAC4E993C00612F800120E561666C8
	C6716031CB08D9A20B1E8D67842EDA86B466202367FF7FFDF9FDE3DB0FA0083B
	3B3012D9AF5FBF9110136F6860C0C7C7072C90010208DF3655502B08BAAB0A3A
	CE068C7660650059920F5E2E081E6F03B75B8109E7F6DDDBC74F9C3877EEECE3
	278F59405B5318521293FC7CFC188611B876FDDAC933A76EDDBD0D4CA1DC5C5C
	ACAC6C90A5F2904E1C68FEF23F68428909BA971C1470C0DEDC4F60F9C3045A37
	F7F7F7EF4F9F3EC746C6A8AAAA8216B2B3B0000410BE0880D707E0B5568CE08E
	0368B80A52F6C1F7A4318117C330C1162D7DFBFEEDCE9D3B274F9E5454527471
	726118A6E0E9B3A7274E9D387BF11CB088079D62C0CE0ED9110DE9F7806B4A50
	2801ABEEEF3F7EFEFDF71BB4718D95E3EEBD7B3696964E0E4E121212E00DEE4C
	0001843702FEC39683833A6F7FC01BD820CB921921B5313067B0804B21F2560F
	0E0FF0E9CB67602D78FAEC998F1FDF31B3B07273F13042AA65700081163BFEFA
	0D5A97C7CE062C8B2E5DBA909F55A0ABA3C3CFCF0F3984052080883DAC03DAE0
	826D0E8134A120ED24E4ED99231C1C3D71ECC4C9938F9E3C04762338D981250C
	33B02FFD07BC6A1E58FE3F7AF0485F5BCFCBD35356561672181130BB000410B9
	07B742A68118464FDFC60E2E5FB97CF4E4B14B972E7D04F690D880499DF93F13
	C38B972F0BB3F375B475787979812D46C8B8304000517A6419EA911AA300A551
	0B6CCE6EDFB9E3D091C3B76EDD7AFBEE5D727C829DAD1DB0F407361421B36F40
	650001347AD03F6DE300D8387CFFFE3D90BC7AF5AAAEAEAEA8A828FC4C3A881A
	80001A8D007A0C7240E60521FB7FD00EA10308A0D1081860001040A30D980106
	0001341A01030C000268340206180004D068040C300008A0D1081860001040A3
	1130C0002080462360800140008D46C0000380001A8D8001060001341A01030C
	000268340206180004D068040C300008A0D1081860001040A31130C000208046
	2360800140008D46C0000380001A8D8001060001341A01030C00026834020618
	0004D068040C300008A0D1081860001040A31130C0002080462360800140008D
	46C0000380001A8D8001060001341A01030C000268340206180004D068040C30
	0008A0D10818600010600031C65C6C083E26F50000000049454E44AE426082
	]]>
</Picture>

<CalledMacros SectVersion="2" SectionFlags="0" SubIdent="0">
	<Macro>
		<MName><![CDATA["ui_ramp"]]></MName>
		<MainGUID>41B0596B-D42A-4AD7-A96C-81E4B7937150</MainGUID>
	</Macro>
	<Macro>
		<MName><![CDATA["FM_types"]]></MName>
		<MainGUID>2759D2DF-AA8E-44D1-AD1D-261581266B34</MainGUID>
	</Macro>
</CalledMacros>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_FWM SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
actualGUID = FROM_GUID

! ==============================================================================
! Subroutines
! ==============================================================================

	_autoID		= "8D265FA8-010C-43FF-B589-119578081512"
	_startID	= "265F5A1A-DD13-49F7-8D02-97D78666B796"
	_endID		= "FC361E28-D255-481A-9514-961F44CA5274"
gosub "newparameters_FWM"

! ==============================================================================
! Set migration GUID
! ==============================================================================

setmigrationguid actualGUID

! ==============================================================================
end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! en
! ==============================================================================


! ==============================================================================
! newparameters
! ==============================================================================
"newparameters_FWM":
	if actualGuid = _startID | actualGuid = _autoID then

		iCalculationMethod = 3		! Dimensions
		parameters iCalculationMethod = iCalculationMethod

		bHas = 	DELETED_PAR_VALUE	("rise", _rise) &\
				DELETED_PAR_VALUE	("endRise ", _endRise) &\
				STORED_PAR_VALUE	("bAscent", _bAscent) &\
				STORED_PAR_VALUE	("lengthAscent", _lengthAscent)

		if bHas then
			percentage 			= _rise
			ascentPercentage 	= _endRise

			parameters 	percentage			= percentage,
						ascentPercentage 	= ascentPercentage

			heightAscent = _lengthAscent * ((2 - _bAscent) * _rise / 2) / 100

			parameters heightAscent = heightAscent

		endif

		bHas =	STORED_PAR_VALUE("iFloorPlanDisplayType", _iFloorPlanDisplayType)

		if _iFloorPlanDisplayType = 3 then	! Symbolic

			bHas =	STORED_PAR_VALUE("gs_cont_pen", _gs_cont_pen)
	
			if bHas then
				penBreakLineBelow 	= _gs_cont_pen
				penBreakLineAbove 	= _gs_cont_pen
				gs_cont_pen			= _gs_cont_pen
				overheadPen			= _gs_cont_pen

		
				parameters 	penBreakLineBelow 	= penBreakLineBelow,
							penBreakLineAbove 	= penBreakLineAbove,
							gs_cont_pen			= _gs_cont_pen,
							overheadPen			= overheadPen
			endif
	
			bHas =	STORED_PAR_VALUE("penArrow", _penArrow)
			if bHas then
				penStartSymbolBelow = _penArrow
				penStartSymbolAbove = _penArrow
				penEndSymbolBelow 	= _penArrow
				penEndSymbolAbove 	= _penArrow
				penWalkingBelow 	= _penArrow
				penWalkingAbove 	= _penArrow
		
				parameters 	penStartSymbolBelow = penStartSymbolBelow,
							penStartSymbolAbove = penStartSymbolAbove,
							penEndSymbolBelow 	= penEndSymbolBelow,
							penEndSymbolAbove 	= penEndSymbolAbove,
							penWalkingBelow 	= penWalkingBelow,
							penWalkingAbove 	= penWalkingAbove
			endif

			bHas =	DELETED_PAR_VALUE("symbolType2d_m", _symbolType2d_m) &\
					STORED_PAR_VALUE("lineCont", _lineCont) &\
					DELETED_PAR_VALUE("linetyp", _linetyp)

			if bHas then
				if _symbolType2d_m = 1 then	! Dashed over Horizontal Cut
					bShowBreakline 		= 1
					lineCont 			= _lineCont
					lineDashed			= _linetyp
					ltBreakLineBelow 	= _lineCont
					ltBreakLineAbove 	= _linetyp
					ltWalkingBelow 		= _lineCont
					ltWalkingAbove 		= _linetyp
				else
					lineCont 			= _lineCont	
					lineDashed			= _lineCont
					ltBreakLineBelow 	= _lineCont
					ltBreakLineAbove 	= _lineCont
					ltWalkingBelow 		= _lineCont
					ltWalkingAbove 		= _lineCont
	
					if _symbolType2d_m = 2 then ! Horizontal Cut
						bShowBreakline = 1
					else	! Complete
						bShowBreakline = 0
					endif
				endif
			endif

			parameters 	bShowBreakline 		= bShowBreakline,
						lineCont 			= lineCont,
						lineDashed 			= lineDashed,	
						ltBreakLineBelow 	= ltBreakLineBelow,
						ltBreakLineAbove 	= ltBreakLineAbove,
						ltWalkingBelow 		= ltWalkingBelow,
						ltWalkingAbove 		= ltWalkingAbove

			bHas =	STORED_PAR_VALUE("arrowSize", _arrowSize)
			if bHas then
				arrowWidth	= _arrowSize * 2
				arrowHeight	= _arrowSize
				iEndSymbol	= 2

				parameters 	arrowWidth	= arrowWidth,
							arrowHeight	= arrowHeight,
							iEndSymbol	= iEndSymbol
			endif
	
			bHas =	DELETED_PAR_VALUE("res", _res)

			if bHas then
				gs_resol = _res

				parameters gs_resol = gs_resol
			endif
	
		endif

		actualGuid = _endID
	endif
return

]]>
</Script_FWM>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_BWM SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
targetGUID = TO_GUID

! ==============================================================================
! Subroutines
! ==============================================================================

gosub "newparameters_BWM"

! ==============================================================================
! Set migration GUID
! ==============================================================================

setmigrationguid targetGuid

! ==============================================================================
end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! en
! ==============================================================================


! ==============================================================================
! newparameters
! ==============================================================================
"newparameters_BWM":
	if targetGUID # "" then

		if abs(percentage / 2 - ascentPercentage) < eps then
			newparameter "rise", 	"RealNum"
			newparameter "endRise", "RealNum"

			rise = 100* ZZYZX/(lengthFull - lengthAscent * bAscent)
			parameters rise = rise
	
			endRise = rise / 2
			parameters endRise = endRise
		else
			targetGuid = ""
		endif

		newparameter "res", "Integer"
		res = gs_resol
		parameters res = res

		newparameter "linetyp", "LineType"
		linetyp = lineDashed
		parameters linetyp = linetyp

		newparameter "symbolType2d_m", "Integer"

		if not(bShowBreakline) then
			symbolType2d_m = 3
		else
			if 	lineDashed 			= lineCont &\
				gs_cont_pen 		= overheadPen &\
				penEndSymbolBelow 	= penEndSymbolAbove &\
				penWalkingBelow 	= penWalkingAbove &\
				ltWalkingBelow 		= ltWalkingAbove &\
				penBreakLineBelow 	= penBreakLineAbove &\
				ltBreakLineBelow 	= ltBreakLineAbove then

				symbolType2d_m = 2
			else
				symbolType2d_m = 1
			endif
		endif

		parameters symbolType2d_m = symbolType2d_m

		if bShowText1 then
			if iTextType1 <> 1 then
				targetGuid = ""
			endif
		endif

		if bShowText2 then targetGuid = ""

	endif
return

]]>
</Script_BWM>

<MigrationTable SectVersion="1" SectionFlags="0" SubIdent="0">
	<MigrationTableElement>
		<MainGUID>8D265FA8-010C-43FF-B589-119578081512</MainGUID>
		<Version>19</Version>
		<Name><![CDATA[""]]></Name>
		<AutoMigration>false</AutoMigration>
	</MigrationTableElement>
	<MigrationTableElement>
		<MainGUID>265F5A1A-DD13-49F7-8D02-97D78666B796</MainGUID>
		<Version>0</Version>
		<Name><![CDATA[""]]></Name>
		<AutoMigration>false</AutoMigration>
	</MigrationTableElement>
</MigrationTable>

<Copyright SectVersion="1" SectionFlags="0" SubIdent="0">
	<Author>GRAPHISOFT</Author>
	<License>
		<Type>CC BY-ND</Type>
		<Version>3.0</Version>
	</License>
</Copyright>

</Symbol>
