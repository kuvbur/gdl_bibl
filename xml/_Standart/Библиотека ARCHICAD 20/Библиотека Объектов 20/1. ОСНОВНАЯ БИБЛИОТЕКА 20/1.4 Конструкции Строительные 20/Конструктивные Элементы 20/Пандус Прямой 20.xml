<?xml version="1.0" encoding="UTF-8"?>
<Symbol IsArchivable="true" IsPlaceable="true" MainGUID="719387E9-73C2-4B45-87BF-898C67C079FA" MigrationValue="Normal" Owner="1196638531" Signature="1196644685" Version="38">
<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_3D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
if gs_detlevel_3D_m = 0 then end
if not (gs_shadow) then shadow off

rotz -90


! --- Coordinates for ramp route -----------------------------------------------

if bAscent then
	put 0, -lengthAscent,		heightAscent,			0,
		0, 0,					0,						0,
		0, lengthAscent,		heightAscent,			0,
		0, a-lengthAscent,		zzyzx - heightAscent,	0,
		0, a,					zzyzx,					0,
		0, a + lengthAscent,	zzyzx - heightAscent,	0
else
	put 0, -a,		zzyzx,	0,
		0,  0,		0,		0,
		0,  a,		zzyzx,	0,
		0,  2 * a,	0,		0
endif


! --- Ramp ---------------------------------------------------------------------

material matRamp
tube 4, nsp/4, 1+2+16+32,
		b/2, -thicknessRamp,	0,
		b/2, 0,					0,
	   -b/2, 0,					0,
	   -b/2, -thicknessRamp,	0,

		use (nsp)


! --- Side Flanges -------------------------------------------------------------

if bSideFlange1_right then
	material matSideFlange1_right
	addx b / 2 - widthSideFlange2_right * bSideFlange2_right - widthSideFlange1_right / 2
	tube 4, nsp/4, 1+2+16+32,
			widthSideFlange1_right / 2, 0,							0,
			widthSideFlange1_right / 2, heightSideFlange1_right,	0,
		   -widthSideFlange1_right / 2, heightSideFlange1_right,	0,
		   -widthSideFlange1_right / 2, 0,							0,

			use (nsp)
	del 1
endif

if bSideFlange1_left then
	material matSideFlange1_left
	addx -b / 2 + widthSideFlange2_left * bSideFlange2_left + widthSideFlange1_left / 2
	tube 4, nsp/4, 1+2+16+32,
			widthSideFlange1_left / 2, 0,						0,
			widthSideFlange1_left / 2, heightSideFlange1_left,	0,
		   -widthSideFlange1_left / 2, heightSideFlange1_left,	0,
		   -widthSideFlange1_left / 2, 0,						0,

			use (nsp)
	del 1
endif

if bSideFlange2_right then
	material matSideFlange2_right
	addx b / 2 - widthSideFlange2_right / 2
	tube 4, nsp/4, 1+2+16+32,
			widthSideFlange2_right / 2, 0,							0,
			widthSideFlange2_right / 2, heightSideFlange2_right,	0,
		   -widthSideFlange2_right / 2, heightSideFlange2_right,	0,
		   -widthSideFlange2_right / 2, 0,							0,

			use (nsp)
	del 1
endif

if bSideFlange2_left then
	addx -b / 2 + widthSideFlange2_left / 2
	material matSideFlange2_left
	tube 4, nsp/4, 1+2+16+32,
			widthSideFlange2_left / 2, 0,						0,
			widthSideFlange2_left / 2, heightSideFlange2_left,	0,
		   -widthSideFlange2_left / 2, heightSideFlange2_left,	0,
		   -widthSideFlange2_left / 2, 0,						0,

			use (nsp)
	del 1
endif


del 1

end
]]>
</Script_3D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_2D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
! --- Text ---------------------------------------------------------------------

! --- Oriented View ------------------------------ [

angleViewRot = 0
rrr = REQUEST ("View_Rotangle", "", angleViewRot)
totalRotate = (SYMB_ROTANGLE + angleViewRot) MOD 360

format = "%~"
rr	= REQUEST ("Linear_dimension", "", format)
if STRSTR(format, "m") then 
	_Unit = " m"
	formatString = "%m"
endif

if STRSTR(format, "cm") then 
	_Unit = " cm"
	formatString = "%~cm"
endif

if STRSTR(format, "mm") then
	_Unit = " mm"
	formatString = "%~mm"
endif

if STRSTR(format, "ffi") then
	_Unit = ""
	formatString = "%~ffi"
endif

if STRSTR(format, "fdi") then
	_Unit = ""
	formatString = "%~fdi"
endif

if STRSTR(format, "df") then
	_Unit = ""
	formatString = "%~df"
endif

if STRSTR(format, "fi") then
	_Unit = ""
	formatString = "%~fi"
endif

if STRSTR(format, "di") then
	_Unit = ""
	formatString = "%~di"
endif

! --- Oriented View ------------------------------ ]

define style text1 fontType, tx_size*100/GLOB_SCALE, 5, 0

if iFloorPlanDisplayType = DISPLAY_SYMBOLIC then
	if iTextType1 = TEXT_PERCENTAGE then
		gr1 = str (ascentPercentage, 4, 2)
		gr2 = str (percentage, 4, 2)
		gr_tx1 = TextPrefix1 + gr1 + " %"
		gr_tx2 = TextPrefix1 + gr2 + " %"
	else
		if iTextType1 = TEXT_RATIO then
			gr1 = str (ratioAscentLength, 4, 0)
			gr2 = str ("%~", ratioAscentHeight)
			gr3 = str (ratioLength, 4, 0)
			gr4 = str ("%~", ratioHeight)
			gr_tx1 = TextPrefix1 + gr1 + " : " + gr2
			gr_tx2 = TextPrefix1 + gr3 + " : " + gr4
		else
			if iTextType1 = TEXT_SEGMENTLENGTH then
				if bAscent then
					gr1 = str (formatString, lengthAscent)
					gr2 = str (formatString, a-lengthAscent*2)
					gr_tx1 = TextPrefix1 + gr1 + _Unit
					gr_tx2 = TextPrefix1 + gr2 + _Unit
				else
					gr1 = str (formatString, A)
					gr_tx1 = TextPrefix1 + gr1 + _Unit
					gr_tx2 = TextPrefix1 + gr1 + _Unit
				endif	
			else
				if iTextType1 = TEXT_FULLLENGTH then
					gr1 = str (formatString, A)
					gr_tx1 = TextPrefix1 + gr1 + _Unit
					gr_tx2 = TextPrefix1 + gr1 + _Unit
				else
					gr_tx1 = TextPrefix1 + CustomText
					gr_tx2 = TextPrefix1 + CustomText
				endif
			endif
		endif
	endif

	if iTextType2 = TEXT_PERCENTAGE then
		gr1 = str (ascentPercentage, 4, 2)
		gr2 = str (percentage, 4, 2)
		gr_tx3 = TextPrefix2 + gr1 + " %"
		gr_tx4 = TextPrefix2 + gr2 + " %"
	else
		if iTextType2 = TEXT_RATIO then
			formatString = "%~"
			gr1 = str (ratioAscentLength, 4, 0)
			gr2 = str ("%~", ratioAscentHeight)
			gr3 = str (ratioLength, 4, 0)
			gr4 = str ("%~", ratioHeight)
			gr_tx3 = TextPrefix2 + gr1 + " : " + gr2
			gr_tx4 = TextPrefix2 + gr3 + " : " + gr4
		else
			if iTextType2 = TEXT_SEGMENTLENGTH then
				if bAscent then
					gr1 = str (formatString, lengthAscent)
					gr2 = str (formatString, a-lengthAscent*2)
					gr_tx3 = TextPrefix2 + gr1 + _Unit
					gr_tx4 = TextPrefix2 + gr2 + _Unit
				else
					gr1 = str (formatString, A)
					gr_tx3 = TextPrefix2 + gr1 + _Unit
					gr_tx4 = TextPrefix2 + gr1 + _Unit
				endif
			else
				if iTextType2 = TEXT_FULLLENGTH then
					gr1 = str (formatString, A)
					gr_tx3 = TextPrefix2 + gr1 + _Unit
					gr_tx4 = TextPrefix2 + gr1 + _Unit
				else
					gr_tx3 = TextPrefix2 + CustomText
					gr_tx4 = TextPrefix2 + CustomText
				endif
			endif
		endif
	endif
else
	gr1=str (ascentPercentage, 4, 2)
	gr2=str (percentage, 4, 2)
	gr_tx1=gr1 + " %"
	gr_tx2=gr2 + " %"
endif

style text1
rrr = request("Height_of_style","text1", shight1)

if iFloorPlanDisplayType = DISPLAY_SYMBOLIC and iWalkingLineType = WALKINGLINE_TRIANGLE and (not(bShowText1)or not(bShowText2)) then
	yPos = 0
else
	yPos = (shight1*1.5)*GLOB_SCALE/4000
endif

! --- Hotspots -----------------------------------------------------------------
unID  = 1
hotspot2 0,  0,		unID : unID = unID + 1
hotspot2 a,  0,		unID : unID = unID + 1
hotspot2 0,  b/2,	unID : unID = unID + 1
hotspot2 0, -b/2,	unID : unID = unID + 1
hotspot2 a,  b/2,	unID : unID = unID + 1
hotspot2 a, -b/2,	unID : unID = unID + 1
StartSymbUNID 	= 100
EndSymbUNID 	= 1000

! ==============================================================================
!     2D symbol
! ==============================================================================

floorplanCutplaneHeight	= GLOB_CSTORY_ELEV - GLOB_HSTORY_ELEV + GLOB_CUTPLANES_INFO[1]
floorplanToprangeHeight	= GLOB_CSTORY_ELEV - GLOB_HSTORY_ELEV + GLOB_CUTPLANES_INFO[2]

if iFloorPlanDisplayType = DISPLAY_SYMBOLIC then
	breaklineDist	= a / 2
else
	if bAscent then
		rampAngle1		= ATN(zzyzx / (a - lengthAscent))
		rampAngle2		= rampAngle1 / 2
		if floorplanCutplaneHeight < TAN(rampAngle2) * lengthAscent then
			breaklineDist	= floorplanCutplaneHeight / TAN(rampAngle2)
		else
			if floorplanCutplaneHeight < (zzyzx - TAN(rampAngle2) * lengthAscent) then
				breaklineDist	= lengthAscent + (floorplanCutplaneHeight - TAN(rampAngle2) * lengthAscent) / TAN(rampAngle1)
			else
				breaklineDist	= a - (zzyzx - floorplanCutplaneHeight) / TAN(rampAngle2)
			endif
		endif
	else
		rampAngle		= ATN(zzyzx / a)
		breaklineDist	= floorplanCutplaneHeight / TAN(rampAngle)
	endif
endif

if iFloorPlanDisplayType = DISPLAY_PROJECTED | iFloorPlanDisplayType = DISPLAY_OVERHEAD_PROJ then
	bShowText						= 1

	if breaklineDist < (b / 2) * TAN(breaklineAngle) + breaklineWidth then
		bShowDetailedSymbol				= 1
		bShowBreakline					= 0

		bSymbolBelowIsOverhead			= 1
		bSymbolAboveIsOverhead			= 1
	else
		bShowDetailedSymbol				= 1

		if breaklineDist > a - (b / 2) * TAN(breaklineAngle) - breaklineWidth then
			bShowBreakline				= 0
			bShowSymbolBelowBreakline	= 1
			bShowSymbolAboveBreakline	= 1

			bSymbolBelowIsOverhead		= 0
			bSymbolAboveIsOverhead		= 0
		else
			bShowBreakline				= 1
			bShowSymbolBelowBreakline	= 1
			bShowSymbolAboveBreakline	= (iFloorPlanDisplayType = DISPLAY_OVERHEAD_PROJ)

			bSymbolBelowIsOverhead		= 0
			bSymbolAboveIsOverhead		= (iFloorPlanDisplayType = DISPLAY_OVERHEAD_PROJ)
		endif
	endif
endif
if iFloorPlanDisplayType = DISPLAY_SYMBOLIC then
		bShowDetailedSymbol		= 1
		if bShowBreakline then
			bSymbolAboveIsOverhead	= 1
		else
			bSymbolAboveIsOverhead	= 0
		endif
		bSymbolBelowIsOverhead 	= 0
		bShowSymbolBelowBreakline = 1
		bShowSymbolAboveBreakline = 1
endif

if iFloorPlanDisplayType = DISPLAY_OUTLINES then
	bShowBreakline				= 0
	bShowDetailedSymbol			= 0
	bShowText					= 1

	bSymbolBelowIsOverhead		= 0
	bSymbolAboveIsOverhead		= 0

	bShowSymbolBelowBreakline	= 1
	bShowSymbolAboveBreakline	= 1
endif
if iFloorPlanDisplayType = DISPLAY_OVERHEAD_ALL then
	bShowBreakline				= 0
	bShowDetailedSymbol			= 1
	bShowText					= 0

	bSymbolBelowIsOverhead		= 1
	bSymbolAboveIsOverhead		= 1

	bShowSymbolBelowBreakline	= 1
	bShowSymbolAboveBreakline	= 1
endif

if bShowBreakline then
	if bShowSymbolBelowBreakline or iFloorPlanDisplayType = DISPLAY_SYMBOLIC then
		gosub "symbol below breakline"
	endif
	if bShowSymbolAboveBreakline or iFloorPlanDisplayType = DISPLAY_SYMBOLIC then
		gosub "symbol above breakline"
	endif
else
	gosub "symbol w/o breakline"
endif

!================================================================================
end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end
!================================================================================


"symbol w/o breakline":
	DRAWINDEX 10

	if bSymbolBelowIsOverhead | bSymbolAboveIsOverhead then
		symbolPen		= overheadPen
		symbolLinetype	= lineOverhead
	else
		symbolPen		= gs_cont_pen
		symbolLinetype	= lineCont
	endif

	if iFloorPlanDisplayType = DISPLAY_SYMBOLIC then
		symbolPen 		= gs_cont_pen
		symbolLinetype 	= lineCont
	endif
	pen symbolPen
	line_type symbolLinetype

	if iFloorPlanDisplayType = DISPLAY_SYMBOLIC then
		line2 0, -b/2, 0, b/2
	else
		line2 0, -b/2, 0, -arrowSize/5
		line2 0,  b/2, 0,  arrowSize/5
	endif

	line2 a, -b/2, a,  b/2
	line2 0,  b/2, a,  b/2
	line2 0, -b/2, a, -b/2

	if bShowDetailedSymbol then
		if bSideFlange2_right	then line2	0, -b/2 + widthSideFlange2_right,
											a, -b/2 + widthSideFlange2_right
		if bSideFlange2_left	then line2	0,  b/2 - widthSideFlange2_left,
											a,  b/2 - widthSideFlange2_left
		if bSideFlange1_right	then line2	0, -b/2 + widthSideFlange1_right + widthSideFlange2_right * bSideFlange2_right,
											a, -b/2 + widthSideFlange1_right + widthSideFlange2_right * bSideFlange2_right
		if bSideFlange1_left	then line2	0,  b/2 - widthSideFlange1_left - widthSideFlange2_left * bSideFlange2_left,
											a,  b/2 - widthSideFlange1_left - widthSideFlange2_left * bSideFlange2_left
	endif

	if bAscent then

		breakAscentline = 0
		bShowFlangeLinesL	= 1
		bShowFlangeLinesR	= 1
		bDrawPart1 = 1
		bDrawPart2 = 1

		ascentLinePos	= lengthAscent
		bDrawAscentline1	= (breaklineDist > ascentLinePos - (b / 2 - widthSideFlange2_left - widthSideFlange1_left) * TAN(breaklineAngle) + breaklineWidth)
		if bDrawAscentline1 then
			breakAscentline	= 0
			bShowFlangeLinesL	= 1
			bShowFlangeLinesR	= 1!(breaklineDist > ascentLinePos + (b / 2) * TAN(breaklineAngle) + breaklineWidth)
			gosub "ascent line"
		endif

		ascentLinePos	= a - lengthAscent
		bDrawAscentline2	= (breaklineDist < ascentLinePos + (b / 2 - widthSideFlange2_right - widthSideFlange1_right) * TAN(breaklineAngle) - breaklineWidth)
		if bDrawAscentline2 then
			breakAscentline	= 0
			bShowFlangeLinesL	= 1!(breaklineDist < ascentLinePos - (b / 2) * TAN(breaklineAngle) - breaklineWidth)
			bShowFlangeLinesR	= 1
			gosub "ascent line"
		endif

	endif

	! --- Arrow --------------------------------------------------------------------
	if iFloorPlanDisplayType = DISPLAY_SYMBOLIC then
		symbolPen 		= penWalkingBelow
		line_type ltWalkingBelow
	else
		symbolPen 		= penArrow
	endif
	pen symbolPen

	if (bWalkingLine and bStartSymbol and iFloorPlanDisplayType = DISPLAY_SYMBOLIC) or iFloorPlanDisplayType <> DISPLAY_SYMBOLIC then
		DRAWINDEX 30	
		if bReverse then
			_StartSymbolPos = A
		else
			_StartSymbolPos = 0
		endif
		penStartSymbol = penStartSymbolBelow
		gosub "StartSymbol"
	endif

	if (bWalkingLine and iFloorPlanDisplayType = DISPLAY_SYMBOLIC) or iFloorPlanDisplayType <> DISPLAY_SYMBOLIC then
		DRAWINDEX 20
		if iFloorPlanDisplayType = DISPLAY_SYMBOLIC then
			if bReverse then
				mul2 -1,1
				add2 -a, 0
			endif

			if bWalkingLine then
				if iWalkingLineType = WALKINGLINE_SIMPLE then
					line2 0, 0, a, 0
				else
					if not(bDiffSides) then
						if not(bAscent) then
							line2 0, b/2 - (widthSideFlange1 * bSideFlange1) - (widthSideFlange2 * bSideFlange2), a, 0
							line2 0, - b/2 + (widthSideFlange1 * bSideFlange1) + (widthSideFlange2 * bSideFlange2), a, 0
						else
							line2 0, b/2 - (widthSideFlange1 * bSideFlange1) - (widthSideFlange2 * bSideFlange2), lengthAscent, 0
							line2 0, - b/2 + (widthSideFlange1 * bSideFlange1) + (widthSideFlange2 * bSideFlange2), lengthAscent, 0

							line2 lengthAscent, b/2 - (widthSideFlange1 * bSideFlange1) - (widthSideFlange2 * bSideFlange2), A - lengthAscent, 0
							line2 lengthAscent, - b/2 + (widthSideFlange1 * bSideFlange1) + (widthSideFlange2 * bSideFlange2), A - lengthAscent, 0

							line2 A - lengthAscent, b/2 - (widthSideFlange1 * bSideFlange1) - (widthSideFlange2 * bSideFlange2), A, 0
							line2 A - lengthAscent, - b/2 + (widthSideFlange1 * bSideFlange1) + (widthSideFlange2 * bSideFlange2), A, 0
						endif
					else
						if not(bAscent) then
							line2 0, b/2 - (widthSideFlange1_left * bSideFlange1_left) - (widthSideFlange2_left * bSideFlange2_left), a, 0
							line2 0, - b/2 + (widthSideFlange1_right * bSideFlange1_right) + (widthSideFlange2_right * bSideFlange2_right), a, 0
						else
							line2 0, b/2 - (widthSideFlange1_left * bSideFlange1_left) - (widthSideFlange2_left * bSideFlange2_left), lengthAscent, 0
							line2 0, - b/2 + (widthSideFlange1_right * bSideFlange1_right) + (widthSideFlange2_right * bSideFlange2_right), lengthAscent, 0

							line2 lengthAscent, b/2 - (widthSideFlange1_left * bSideFlange1_left) - (widthSideFlange2_left * bSideFlange2_left), A - lengthAscent, 0
							line2 lengthAscent, - b/2 + (widthSideFlange1_right * bSideFlange1_right) + (widthSideFlange2_right * bSideFlange2_right), A - lengthAscent, 0

							line2 A - lengthAscent, b/2 - (widthSideFlange1_left * bSideFlange1_left) - (widthSideFlange2_left * bSideFlange2_left), A, 0
							line2 A - lengthAscent, - b/2 + (widthSideFlange1_right * bSideFlange1_right) + (widthSideFlange2_right * bSideFlange2_right ), A, 0
						endif
					endif
				endif
			endif
			if bReverse then
				del 2
			endif
		else
			line2 0, 0, a, 0
		endif
	endif
	
	if (bWalkingLine and bEndSymbol and iFloorPlanDisplayType = DISPLAY_SYMBOLIC) or iFloorPlanDisplayType <> DISPLAY_SYMBOLIC then
		DRAWINDEX 30
		penEndSymbol = penEndSymbolBelow
		if bAscent then
			arrowPos = lengthAscent
			if lengthAscent > arrowHeight then gosub "arrow line"
	
			arrowPos = a - lengthAscent
			if a - lengthAscent * 2 > arrowHeight then gosub "arrow line"
		endif

		if bReverse then
			arrowPos = 0
		else
			arrowPos = A
		endif
		
		if lengthAscent > arrowHeight then gosub "arrow line"

	endif

	! --- Text ---------------------------------------------------------------------
	DRAWINDEX 40
	pen penText
	if typeTextRotation_m = 2 then gosub "text rotation"

	if iFloorPlanDisplayType = DISPLAY_SYMBOLIC then

		if bAscent then
			if bShowText1 then
				if lengthAscent > 	STW(gr_tx2) / 1000 * GLOB_SCALE 	then text2 A / 2, yPos, gr_tx2
				if iTextType1 <> TEXT_FULLLENGTH and iTextType1 <> TEXT_CUSTOM then
					if lengthAscent 		> STW(gr_tx2) / 1000 * GLOB_SCALE 	then text2 a - lengthAscent / 2, 	yPos, gr_tx1
					if a - lengthAscent * 2 > STW(gr_tx1) / 1000 * GLOB_SCALE 	then text2 lengthAscent / 2, 		yPos, gr_tx1
				endif
			endif
			if bShowText2 then
				if lengthAscent > 	STW(gr_tx4) / 1000 * GLOB_SCALE 	then text2 A/2, -yPos, gr_tx4
				if iTextType2 <> TEXT_FULLLENGTH and iTextType2 <> TEXT_CUSTOM then
					if lengthAscent 			> STW(gr_tx4) / 1000 * GLOB_SCALE 	then text2 A - lengthAscent / 2, 	-yPos, gr_tx3
					if a - lengthAscent * 2 	> STW(gr_tx3) / 1000 * GLOB_SCALE 	then text2 lengthAscent / 2, 		-yPos, gr_tx3
				endif
			endif
		else
			if bShowText1 then
				if a - lengthAscent * 2 > STW(gr_tx1) / 1000 * GLOB_SCALE 	then text2 A / 2, yPos, 	gr_tx2
			endif
			if bShowText2 then
				if a - lengthAscent * 2 > STW(gr_tx3) / 1000 * GLOB_SCALE 	then text2 A / 2, - yPos, 	gr_tx4
			endif
		endif
	else
		if bShowText then	
			text2 a/2, yPos, gr_tx2
			if bAscent then
				text2 lengthAscent / 2, 	yPos, gr_tx1
				text2 a - lengthAscent / 2, yPos, gr_tx1
			endif	
		endif
	endif
	if typeTextRotation_m = 2 then del nTrans

	! --- Fill --------------------------------------------------------------------
	DRAWINDEX 10
	if bFill and NOT(bSymbolAboveIsOverhead) then
		fill gs_fill_type
		poly2_b 4, 2+4+64, gs_fill_pen, gs_back_pen,
			0, -B/2, 	0,
			a, -B/2, 	0,
			a, B/2, 	0,
			0, B/2, 	0
	endif

return


"symbol below breakline":
	DRAWINDEX 10
	if bSymbolBelowIsOverhead then
		symbolPen		= overheadPen
		symbolLinetype	= lineOverhead
	else
		symbolPen		= gs_cont_pen
		symbolLinetype	= lineCont
	endif

	if iFloorPlanDisplayType = DISPLAY_SYMBOLIC then
		symbolPen 		= gs_cont_pen
		symbolLinetype 	= lineCont
	endif

	pen symbolPen
	line_type symbolLinetype

	if NOT(bShowSymbolAboveBreakline) then
		hotspot2 breaklineDist + b/2 * tan (breaklineAngle) - breaklineWidth, b / 2,	unID : unID = unID + 1
		hotspot2 breaklineDist - b/2 * tan (breaklineAngle) - breaklineWidth, -b / 2,	unID : unID = unID + 1
	endif

	if iFloorPlanDisplayType = DISPLAY_SYMBOLIC then
		line2 0, -b/2, 0, b/2
	else
		line2 0, -b/2, 0, -arrowSize/5
		line2 0,  b/2, 0,  arrowSize/5
	endif

	line2 0,  b/2, breaklineDist - breaklineWidth + b/2 * tan (breaklineAngle),  b / 2
	line2 0, -b/2, breaklineDist - breaklineWidth - b/2 * tan (breaklineAngle), -b / 2

	if bShowDetailedSymbol then
		if bSideFlange1_left then
			line2 	0,
					b/2 - widthSideFlange2_left * bSideFlange2_left - widthSideFlange1_left,
					breaklineDist - breaklineWidth + (b/2 - widthSideFlange2_left * bSideFlange2_left - widthSideFlange1_left)  * tan (breaklineAngle),
					b/2 - widthSideFlange2_left * bSideFlange2_left - widthSideFlange1_left
		endif
		if bSideFlange1_right then
			line2 	0,
					-b/2 + widthSideFlange2_right * bSideFlange2_right + widthSideFlange1_right,
					breaklineDist - breaklineWidth - (b/2 - widthSideFlange2_right * bSideFlange2_right - widthSideFlange1_right) * tan (breaklineAngle),
					-b/2 + widthSideFlange2_right * bSideFlange2_right + widthSideFlange1_right
		endif
		if bSideFlange2_left then
				line2 0,  b/2 - widthSideFlange2_left,  breaklineDist - breaklineWidth + (b/2 - widthSideFlange2_left)  * tan (breaklineAngle),  b/2 - widthSideFlange2_left
		endif
		if bSideFlange2_right then
			line2 0, -b/2 + widthSideFlange2_right, breaklineDist - breaklineWidth - (b/2 - widthSideFlange2_right) * tan (breaklineAngle), -b/2 + widthSideFlange2_right
		endif
	endif

	if iFloorPlanDisplayType = DISPLAY_SYMBOLIC then
		symbolPen 		= penBreakLineBelow
		symbolLinetype 	= ltBreakLineBelow
	endif

	if bShowBreakline then
		pen symbolPen
		line_type symbolLinetype

		line2 breaklineDist - breaklineWidth + b/2  * tan (breaklineAngle), b/2, breaklineDist - breaklineWidth - b/2 * tan (breaklineAngle), -b/2
	endif

	if bAscent then
		if iFloorPlanDisplayType = DISPLAY_SYMBOLIC then
			symbolPen 		= gs_cont_pen
			symbolLinetype 	= lineCont
		endif
	
		pen symbolPen
		line_type symbolLinetype

		bDrawPart1 = 1
		bDrawPart2 = 0

		ascentLinePos		= lengthAscent
		bDrawAscentline1	= (breaklineDist > ascentLinePos - (b / 2 - widthSideFlange2_left - widthSideFlange1_left) * TAN(breaklineAngle) + breaklineWidth)
		if bDrawAscentline1 then
			breakAscentline		= (breaklineDist < ascentLinePos + (b / 2 - widthSideFlange2_left - widthSideFlange1_left) * TAN(breaklineAngle) + breaklineWidth)
			bShowFlangeLinesL	= 1
			bShowFlangeLinesR	= (breaklineDist > ascentLinePos + (b / 2) * TAN(breaklineAngle) + breaklineWidth)
			gosub "ascent line"
		endif

		ascentLinePos		= a - lengthAscent
		bDrawAscentline2	= (breaklineDist > ascentLinePos - (b / 2 - widthSideFlange2_left - widthSideFlange1_left) * TAN(breaklineAngle) + breaklineWidth)
		if bDrawAscentline2 then
			breakAscentline		= (breaklineDist < ascentLinePos + (b / 2 - widthSideFlange2_left - widthSideFlange1_left) * TAN(breaklineAngle) + breaklineWidth)
			bShowFlangeLinesL	= 1
			bShowFlangeLinesR	= (breaklineDist > ascentLinePos + (b / 2) * TAN(breaklineAngle) + breaklineWidth)
			gosub "ascent line"
		endif
	endif

	! --- Arrow --------------------------------------------------------------------
	if iFloorPlanDisplayType = DISPLAY_SYMBOLIC then
		symbolPen 		= penWalkingBelow
		symbolLinetype 	= ltWalkingBelow
	else
		symbolPen 		= penArrow
	endif

	pen symbolPen
	line_type symbolLinetype

	if (bStartSymbol and iFloorPlanDisplayType = DISPLAY_SYMBOLIC and not(bReverse)) or iFloorPlanDisplayType <> DISPLAY_SYMBOLIC then
		DRAWINDEX 30
		_StartSymbolPos = 0
		penStartSymbol 	= penStartSymbolBelow
		gosub "StartSymbol"
	endif

	if (bWalkingLine and iFloorPlanDisplayType = DISPLAY_SYMBOLIC) or iFloorPlanDisplayType <> DISPLAY_SYMBOLIC then
		DRAWINDEX 20
		if iFloorPlanDisplayType = DISPLAY_SYMBOLIC then
			if bWalkingLine then
				if iWalkingLineType = WALKINGLINE_SIMPLE then
					line2 0, 0, breaklineDist - breaklineWidth, 0
				else
					if not(bReverse) then
						if not(bAscent) then
							line2 	0, _BLeft/2, 	A/2 - breaklineWidth + _XLeft, _YLeft
							line2 	0, -_BRight/2, 	A/2 - breaklineWidth -_XRight, -_YRight
						else
							line2 	0, 	_BLeft/2,  		lengthAscent, 0
							line2 	0, 	-_BRight/2, 	lengthAscent, 0

							line2 	lengthAscent, 	_BLeft/2, 	A/2 - breaklineWidth + _XLeft,  _YLeft
							line2 	lengthAscent, 	-_BRight/2, A/2 - breaklineWidth - _XRight, -_YRight
						endif
					else
						if not(bAscent) then
							line2 	breaklineWidth, 0, A / 2 - breaklineWidth + _XLeft, 	_YLeft
							line2 	breaklineWidth, 0, A / 2 - breaklineWidth - _XRight, 	-_YRight
						else
							line2 	0, 0, lengthAscent, _BLeft/2
							line2 	0, 0, lengthAscent, -_BRight/2

							line2 	lengthAscent, 	0, A / 2 - breaklineWidth + _XLeft, 	_YLeft
							line2 	lengthAscent, 	0, A / 2 - breaklineWidth - _XRight, 	-_YRight
						endif
					endif
				endif
			endif
		else
			line2 0, 0, breaklineDist - breaklineWidth, 0
		endif
	endif

	if (bEndSymbol and iFloorPlanDisplayType = DISPLAY_SYMBOLIC and bWalkingLine) or iFloorPlanDisplayType <> DISPLAY_SYMBOLIC then
		DRAWINDEX 30
		penEndSymbol = penEndSymbolBelow

		if bReverse and iFloorPlanDisplayType = DISPLAY_SYMBOLIC then
			arrowPos = 0
			if lengthAscent > arrowHeight then gosub "arrow line"
		endif		

		if (not(bReverse) and iFloorPlanDisplayType = DISPLAY_SYMBOLIC) or iFloorPlanDisplayType <> DISPLAY_SYMBOLIC then
			arrowPos = breaklineDist - breaklineWidth
			if (a - lengthAscent * 2) / 2 > arrowHeight then gosub "arrow line"
		endif

		if bAscent then
			if breaklineDist > lengthAscent then
				arrowPos = lengthAscent
				if lengthAscent > arrowHeight then gosub "arrow line"
			endif
			if breaklineDist > a - lengthAscent then
				arrowPos = a - lengthAscent
				if a - lengthAscent * 2 > arrowHeight then gosub "arrow line"
			endif
		endif
	endif

	! --- Text ---------------------------------------------------------------------
	pen penText
	if typeTextRotation_m = 2 then gosub "text rotation"
	DRAWINDEX 40
	if iFloorPlanDisplayType = DISPLAY_SYMBOLIC then
		if bAscent then
			if bShowText1 then
				if breaklineDist-lengthAscent > STW(gr_tx1) / 1000 * GLOB_SCALE then text2 (breaklineDist+lengthAscent)/2 , yPos, gr_tx2
				if iTextType1 <> TEXT_FULLLENGTH and iTextType1 <> TEXT_CUSTOM then
					if lengthAscent > STW(gr_tx2) / 1000 * GLOB_SCALE then text2 lengthAscent/2, yPos, gr_tx1
				endif
			endif

			if bShowText2 then
				if breaklineDist-lengthAscent > STW(gr_tx3) / 1000 * GLOB_SCALE then text2 (breaklineDist+lengthAscent)/2, -yPos, gr_tx4
				if iTextType2 <> TEXT_FULLLENGTH and iTextType2 <> TEXT_CUSTOM then
					if lengthAscent > STW(gr_tx4) / 1000 * GLOB_SCALE then text2 lengthAscent/2, -yPos, gr_tx3
				endif
			endif
		else
			if bShowText1 then
				if breaklineDist > STW(gr_tx1) / 1000 * GLOB_SCALE then text2 breaklineDist / 2 , yPos, gr_tx2
			endif
			if bShowText2 then
				if breaklineDist > STW(gr_tx3) / 1000 * GLOB_SCALE then text2 breaklineDist / 2, - yPos, gr_tx4
			endif
		endif
	else
		if NOT(bSymbolBelowIsOverhead) then	
			if bAscent then
				if MIN(lengthAscent, breaklineDist) > STW(gr_tx1) / 1000 * GLOB_SCALE then text2 MIN(lengthAscent, breaklineDist) / 2, yPos, gr_tx1
				if breaklineDist - lengthAscent > STW(gr_tx2) / 1000 * GLOB_SCALE then text2 MIN(a / 2, lengthAscent + (breaklineDist - lengthAscent) / 2), yPos, gr_tx2
				if breaklineDist - (a - lengthAscent) > STW(gr_tx1) / 1000 * GLOB_SCALE then text2 a - lengthAscent + (breaklineDist + lengthAscent - a) / 2, yPos, gr_tx1
			else
				if breaklineDist > STW(gr_tx2) / 1000 * GLOB_SCALE then text2 breaklineDist / 2, yPos, gr_tx2
			endif
		endif
	endif
	if typeTextRotation_m = 2 then del nTrans

	! --- Fill --------------------------------------------------------------------
	if bFill then
		DRAWINDEX 10
		fill gs_fill_type
		poly2_b 4, 2+4+64, gs_fill_pen, gs_back_pen,
			0, -B/2, 0,
			breaklineDist - breaklineWidth + breaklineWidth * (bShowSymbolAboveBreakline and NOT(bSymbolAboveIsOverhead)) - B/2 * tan (breaklineAngle), -B/2, 0,
			breaklineDist - breaklineWidth + breaklineWidth * (bShowSymbolAboveBreakline and NOT(bSymbolAboveIsOverhead)) + B/2 * tan (breaklineAngle), B/2, 0,
			0, B/2, 0
	endif

return


"symbol above breakline":
	DRAWINDEX 10
	if bSymbolAboveIsOverhead then
		symbolPen		= overheadPen
		symbolLinetype	= lineOverhead
	else
		symbolPen		= gs_cont_pen
		symbolLinetype	= lineCont
	endif

	pen symbolPen
	line_type symbolLinetype

	line2 a, -b/2, a,  b/2
	line2 breaklineDist + breaklineWidth + b/2 * tan (breaklineAngle),  b/2, a,  b/2
	line2 breaklineDist + breaklineWidth - b/2 * tan (breaklineAngle), -b/2, a, -b/2

	if bShowDetailedSymbol then
		if bSideFlange1_left then
			line2 	breaklineDist + breaklineWidth + (b/2 - widthSideFlange2_left * bSideFlange2_left - widthSideFlange1_left)  * tan (breaklineAngle),
					b/2 - widthSideFlange2_left * bSideFlange2_left - widthSideFlange1_left,
					a,
					b/2 - widthSideFlange2_left * bSideFlange2_left - widthSideFlange1_left
		endif
		if bSideFlange1_right then
			line2 	breaklineDist + breaklineWidth - (b/2 - widthSideFlange2_right * bSideFlange2_right - widthSideFlange1_right) * tan (breaklineAngle),
					-b/2 + widthSideFlange2_right * bSideFlange2_right + widthSideFlange1_right,
					a,
					-b/2 + widthSideFlange2_right * bSideFlange2_right + widthSideFlange1_right
		endif
		if bSideFlange2_left then
			line2 breaklineDist + breaklineWidth + (b/2 - widthSideFlange2_left)  * tan (breaklineAngle),  b/2 - widthSideFlange2_left,  a,  b/2 - widthSideFlange2_left
		endif
		if bSideFlange2_right then
			line2 breaklineDist + breaklineWidth - (b/2 - widthSideFlange2_right) * tan (breaklineAngle), -b/2 + widthSideFlange2_right, a, -b/2 + widthSideFlange2_right
		endif
	endif

	if iFloorPlanDisplayType = DISPLAY_SYMBOLIC and bWalkingLine and not(bStop) and bShowAboveBreak then
		DRAWINDEX 30
		pen penWalkingAbove
		penStartSymbol = penStartSymbolAbove
		add2 breaklineDist + breaklineWidth, 0
		gosub "StartSymbol"
		del 1
	endif

	if iFloorPlanDisplayType = DISPLAY_SYMBOLIC then
		symbolPen 		= penBreakLineAbove
		symbolLinetype 	= ltBreakLineAbove
	endif

	pen symbolPen
	line_type symbolLinetype
	DRAWINDEX 10

	if bShowBreakline then
		line2 breaklineDist + breaklineWidth + b/2 * tan (breaklineAngle), b/2, breaklineDist + breaklineWidth - b/2 * tan (breaklineAngle), -b/2
	endif

	if bAscent then
		if iFloorPlanDisplayType = DISPLAY_SYMBOLIC then
			symbolPen		= overheadPen
			symbolLinetype	= lineOverhead
		endif
		
		pen symbolPen
		line_type symbolLinetype
		bDrawPart1 = 0
		bDrawPart2 = 1

		ascentLinePos	= lengthAscent
		bDrawAscentline1	= (breaklineDist < ascentLinePos + (b / 2 - widthSideFlange2_right - widthSideFlange1_right) * TAN(breaklineAngle) - breaklineWidth)
		if bDrawAscentline1 then
			breakAscentline	= (breaklineDist > ascentLinePos - (b / 2 - widthSideFlange2_right - widthSideFlange1_right) * TAN(breaklineAngle) - breaklineWidth)
			bShowFlangeLinesL	= (breaklineDist < ascentLinePos - (b / 2) * TAN(breaklineAngle) - breaklineWidth)
			bShowFlangeLinesR	= 1
			gosub "ascent line"
		endif

		ascentLinePos	= a - lengthAscent
		bDrawAscentline2	= (breaklineDist < ascentLinePos + (b / 2 - widthSideFlange2_right - widthSideFlange1_right) * TAN(breaklineAngle) - breaklineWidth)
		if bDrawAscentline2 then
			breakAscentline	= (breaklineDist > ascentLinePos - (b / 2 - widthSideFlange2_right - widthSideFlange1_right) * TAN(breaklineAngle) - breaklineWidth)
			bShowFlangeLinesL	= (breaklineDist < ascentLinePos - (b / 2) * TAN(breaklineAngle) - breaklineWidth)
			bShowFlangeLinesR	= 1
			gosub "ascent line"
		endif
	endif

	! --- Arrow --------------------------------------------------------------------
	if (bWalkingLine and not(bStop) and iFloorPlanDisplayType = DISPLAY_SYMBOLIC) or iFloorPlanDisplayType <> DISPLAY_SYMBOLIC then
		DRAWINDEX 20

		if iFloorPlanDisplayType = DISPLAY_SYMBOLIC then
			symbolPen 		= penWalkingAbove
			line_type ltWalkingAbove
		else
			symbolPen 		= penArrow
		endif
	
		pen symbolPen

		if iFloorPlanDisplayType = DISPLAY_SYMBOLIC then
			if bWalkingLine then
				if iWalkingLineType = WALKINGLINE_SIMPLE then
					line2 breaklineDist + breaklineWidth, 0, a, 0
				else
					if not(bReverse) then
						if not(bAscent) then
							line2 	_XLeft + A/2 + breaklineWidth, 		_YLeft, 	A, 0
							line2 	-_XRight + A/2 + breaklineWidth,	-_YRight, 	A, 0
						else
							line2 	A-lengthAscent, _BLeft/2,  	A, 0
							line2 	A-lengthAscent, - _BRight/2,  	A, 0

							line2 	_XLeft + a/2+breaklineWidth,  	_YLeft, 	a-lengthAscent, 0
							line2 	-_XRight + a/2+breaklineWidth,  -_YRight, 	a-lengthAscent, 0
						endif
					else
						if not(bAscent) then
							line2 	a / 2 + breaklineWidth + _XLeft, _YLeft, a, _BLeft/2
							line2 	a / 2 + breaklineWidth -_XRight, -_YRight, A, -_BRight/2
						else
							line2 	A - lengthAscent, 0, A, _BLeft/2
							line2 	A - lengthAscent, 0, A, -_BRight/2

							line2 	a / 2 + breaklineWidth + _XLeft, 	_YLeft, 	A - lengthAscent, 	_BLeft/2
							line2 	a / 2 + breaklineWidth - _XRight, 	-_YRight, 	A - lengthAscent, 	-_BRight/2
						endif
					endif
				endif
			endif
		else
			line2 breaklineDist + breaklineWidth, 0, a, 0
		endif

	endif

	if (not(bStop) and bWalkingLine and bEndSymbol and iFloorPlanDisplayType = DISPLAY_SYMBOLIC) or iFloorPlanDisplayType <> DISPLAY_SYMBOLIC then
		DRAWINDEX 30
		penEndSymbol = penEndSymbolAbove

		if (not(bReverse) and iFloorPlanDisplayType = DISPLAY_SYMBOLIC) or iFloorPlanDisplayType <> DISPLAY_SYMBOLIC then
			arrowPos = A
			if lengthAscent > arrowHeight then gosub "arrow line"
		endif		
	
		if bReverse  and iFloorPlanDisplayType = DISPLAY_SYMBOLIC then
			add2 breaklineWidth * 2, 0
			arrowPos = breaklineDist - breaklineWidth
			if (a - lengthAscent * 2) / 2 > arrowHeight then gosub "arrow line"
			del 1
		endif

		if bAscent then
			if breaklineDist < lengthAscent then
				arrowPos = lengthAscent
				if lengthAscent > arrowHeight then gosub "arrow line"
			endif
			if breaklineDist < a - lengthAscent then
				arrowPos = a - lengthAscent
				if a - lengthAscent * 2 > arrowHeight then gosub "arrow line"
			endif
		endif
	endif

	! --- Text ---------------------------------------------------------------------
	pen penText
	if typeTextRotation_m = 2 then gosub "text rotation"
	DRAWINDEX 40
	if iFloorPlanDisplayType = DISPLAY_SYMBOLIC then
		if bAscent then
			if bShowText1 and iTextType1 <> TEXT_FULLLENGTH and iTextType1 <> TEXT_CUSTOM then
				if lengthAscent > STW(gr_tx2) / 1000 * GLOB_SCALE then text2 a - lengthAscent / 2, yPos, gr_tx1
				if breaklineDist - lengthAscent > STW(gr_tx1) / 1000 * GLOB_SCALE then text2 a - (breaklineDist+lengthAscent)/2, yPos, gr_tx2
			endif

			if bShowText2 and iTextType2 <> TEXT_FULLLENGTH and iTextType2 <> TEXT_CUSTOM then
				if lengthAscent > STW(gr_tx4) / 1000 * GLOB_SCALE then text2 a - lengthAscent / 2, -yPos, gr_tx3
				if breaklineDist - lengthAscent > STW(gr_tx3) / 1000 * GLOB_SCALE then text2 a - (breaklineDist+lengthAscent)/2, -yPos, gr_tx4
			endif
		else
			if bShowText1 then
				if breaklineDist > STW(gr_tx1) / 1000 * GLOB_SCALE then text2 a - breaklineDist / 2, yPos, gr_tx2
			endif
			if bShowText2 then
				if breaklineDist > STW(gr_tx3) / 1000 * GLOB_SCALE then text2 a - breaklineDist / 2, -yPos, gr_tx4
			endif
		endif
	else
		if bShowText then
			if NOT(bSymbolBelowIsOverhead) then
				if bAscent then
					if lengthAscent - breaklineDist > STW(gr_tx1) / 1000 * GLOB_SCALE then text2 breaklineDist + (lengthAscent - breaklineDist) / 2, yPos, gr_tx1
					if a - lengthAscent - breaklineDist > STW(gr_tx2) / 1000 * GLOB_SCALE then text2 MAX(a / 2, breaklineDist + (a - lengthAscent - breaklineDist) / 2), yPos, gr_tx2
					if (a - breaklineDist) > STW(gr_tx1) / 1000 * GLOB_SCALE then text2 MAX(breaklineDist + (a - breaklineDist) / 2, a - lengthAscent / 2), yPos, gr_tx1
				else
					if (a - breaklineDist) > STW(gr_tx2) / 1000 * GLOB_SCALE then text2 breaklineDist + (a - breaklineDist) / 2, yPos, gr_tx2
				endif		
			endif
		endif
	endif
	if typeTextRotation_m = 2 then del nTrans

	! --- Fill --------------------------------------------------------------------
	if bFill and NOT(bSymbolAboveIsOverhead) then
		DRAWINDEX 10
		fill gs_fill_type
		poly2_b 4, 2+4+64, gs_fill_pen, gs_back_pen,
				breaklineDist + breaklineWidth * NOT(bShowSymbolBelowBreakline) - B/2 * tan (breaklineAngle), -B/2, 0,
				A, -B/2, 0,
				A, B/2, 0,
				breaklineDist + breaklineWidth * NOT(bShowSymbolBelowBreakline) + B/2 * tan (breaklineAngle), B/2, 0
	endif

return

"ascent line":

	add2 ascentLinePos, 0

	ascentBreakHeight	= breaklineWidth * 2 / TAN(breaklineAngle)

	if breakAscentline then
		if bDrawPart1 then
			line2	0,  b/2 - (widthSideFlange2_left  * bSideFlange2_left + widthSideFlange1_left  * bSideFlange1_left) * bShowDetailedSymbol,
					0, b/2 - (widthSideFlange2_left  * bSideFlange2_left + widthSideFlange1_left  * bSideFlange1_left) * bShowDetailedSymbol\
					-(breaklineDist + (b / 2 - widthSideFlange2_left - widthSideFlange1_left) * TAN(breaklineAngle) - ascentLinePos) / TAN(breaklineAngle) + ascentBreakHeight / 2
		endif
		if bDrawPart2 then
			line2	0, b/2 - (widthSideFlange2_left  * bSideFlange2_left + widthSideFlange1_left  * bSideFlange1_left) * bShowDetailedSymbol\
						-(breaklineDist + (b / 2 - widthSideFlange2_left - widthSideFlange1_left) * TAN(breaklineAngle) - ascentLinePos) / TAN(breaklineAngle) - ascentBreakHeight / 2,
					0, -b/2 + (widthSideFlange2_right * bSideFlange2_right + widthSideFlange1_right * bSideFlange1_right) * bShowDetailedSymbol
		endif
	else
		line2	0,  b/2 - (widthSideFlange2_left  * bSideFlange2_left + widthSideFlange1_left  * bSideFlange1_left) * bShowDetailedSymbol,
				0, -b/2 + (widthSideFlange2_right * bSideFlange2_right + widthSideFlange1_right * bSideFlange1_right) * bShowDetailedSymbol
	endif

	if bShowDetailedSymbol then
		if	(NOT(breakAscentline) and bShowFlangeLinesL) | (breakAscentline and bDrawPart1) then
			if bSideFlange1_left then
				line2	- heightSideFlange1_left * ascentPercentage / 100, b/2 - bSideFlange2_left * widthSideFlange2_left,
						- heightSideFlange1_left * ascentPercentage / 100, b/2 - bSideFlange2_left * widthSideFlange2_left - widthSideFlange1_left
			endif
			if bSideFlange2_left then
				line2	- heightSideFlange2_left * ascentPercentage / 100, b/2,
						- heightSideFlange2_left * ascentPercentage / 100, b/2 - widthSideFlange2_left
			endif
		endif

		if	(NOT(breakAscentline) and bShowFlangeLinesR) | (breakAscentline and bDrawPart2) then
			if bSideFlange1_right then
				line2	- heightSideFlange1_right * ascentPercentage / 100, -b/2 + bSideFlange2_right * widthSideFlange2_right,
						- heightSideFlange1_right * ascentPercentage / 100, -b/2 + bSideFlange2_right * widthSideFlange2_right + widthSideFlange1_right
			endif
			if bSideFlange2_right then
				line2	- heightSideFlange2_right * ascentPercentage / 100, -b/2,
						- heightSideFlange2_right * ascentPercentage / 100, -b/2 + widthSideFlange2_right
			endif
		endif
	endif

	del 1

return

"arrow line":
	add2 arrowPos, 0

	if iFloorPlanDisplayType = DISPLAY_SYMBOLIC then
		fill fillEndSymbol
		if iEndSymbol = 1 or iEndSymbol = 3 or iEndSymbol = 5 then
			_actSymbolLength = b / 2
			_actSymbolHeight = arrowHeight
		endif

		if iEndSymbol = 2 or iEndSymbol = 4 or  iEndSymbol = 6 then
			_actSymbolLength = arrowWidth / 2
			_actSymbolHeight = arrowHeight
		endif

		if iEndSymbol = 1 or iEndSymbol = 2 then
			temp_ArrowMask=0
		else
			temp_ArrowMask=1
		endif

		if bReverse then
			mul2 -1,1
		endif

		POLY2_ 4, 1,
			-_actSymbolHeight,	-_actSymbolLength, 	temp_ArrowMask,
			-_actSymbolHeight,	_actSymbolLength, 	1,
			0,					0, 					1,
			-_actSymbolHeight,	-_actSymbolLength,	-1

		if iEndSymbol = 3 or iEndSymbol = 4 then
			poly2_B 4, 2, gs_fill_pen, penEndSymbol, 
					-_actSymbolHeight,	-_actSymbolLength, 	temp_ArrowMask,
					-_actSymbolHeight,	_actSymbolLength, 	1,
					0,					0, 					1,
					-_actSymbolHeight,	-_actSymbolLength,	-1
		else
			if iEndSymbol = 5 or iEndSymbol = 6 then
				poly2_B 4, 2, gs_fill_pen, penEndSymbol,
						-_actSymbolHeight,	0, 	temp_ArrowMask,
						-_actSymbolHeight,	-_actSymbolLength, 	1,
						0,					0, 					1,
						-_actSymbolHeight,	0,	-1
			endif
		endif

		hotspot2 0,					_actSymbolLength,	EndSymbUNID, arrowHeight, 1+128	: EndSymbUNID = EndSymbUNID+ 1
		hotspot2 -_actSymbolHeight,	_actSymbolLength,	EndSymbUNID, arrowHeight, 2		: EndSymbUNID = EndSymbUNID+ 1
		hotspot2 1,					_actSymbolLength,	EndSymbUNID, arrowHeight, 3		: EndSymbUNID = EndSymbUNID+ 1

		hotspot2 0,					-_actSymbolLength,	EndSymbUNID, arrowHeight, 1+128	: EndSymbUNID = EndSymbUNID+ 1
		hotspot2 -_actSymbolHeight, -_actSymbolLength,	EndSymbUNID, arrowHeight, 2		: EndSymbUNID = EndSymbUNID+ 1
		hotspot2 1, 				-_actSymbolLength,	EndSymbUNID, arrowHeight, 3		: EndSymbUNID = EndSymbUNID+ 1

		if iEndSymbol = 2 or iEndSymbol = 4 or iEndSymbol = 6 then
			hotspot2 -_actSymbolHeight,	0,					EndSymbUNID, arrowWidthHalf, 1+128,	arrowWidth	: EndSymbUNID = EndSymbUNID + 1
			hotspot2 -_actSymbolHeight,	arrowWidth / 2,		EndSymbUNID, arrowWidthHalf, 2,		arrowWidth	: EndSymbUNID = EndSymbUNID + 1
			hotspot2 -_actSymbolHeight,	-1,					EndSymbUNID, arrowWidthHalf, 3,		arrowWidth	: EndSymbUNID = EndSymbUNID + 1
	
			hotspot2 -_actSymbolHeight,	arrowWidth / 2,		EndSymbUNID, arrowWidthHalf, 1+128,	arrowWidth 	: EndSymbUNID = EndSymbUNID + 1
			hotspot2 -_actSymbolHeight,	- arrowWidth / 2,	EndSymbUNID, arrowWidthHalf, 2,		arrowWidth	: EndSymbUNID = EndSymbUNID + 1
			hotspot2 -_actSymbolHeight,	1,					EndSymbUNID, arrowWidthHalf, 3,		arrowWidth	: EndSymbUNID = EndSymbUNID + 1
		endif

		if bReverse then
			del 1
		endif

	else	
		line2 -arrowSize,  arrowSize, 0, 0
		line2 -arrowSize, -arrowSize, 0, 0
	
	endif
	del 1

return


"text rotation":

	nTrans = 0
	if  (totalRotate > (gs_readable_angle + eps) & totalRotate < (gs_readable_angle + 180 + eps)) then
		rot2 180
		mul2 -1, 1
		nTrans = nTrans + 2
	endif

return

"StartSymbol":

	add2 _StartSymbolPos, 0
	if iFloorPlanDisplayType = DISPLAY_SYMBOLIC then
		fill fillStartSymbol
		if penStartSymbol <> 0 then
			temp_FillStatus = 2
		else
			temp_FillStatus = 0
		endif

		if iStartSymbol = 1 then	! Style 1
			poly2_b 2, 1+temp_FillStatus, gs_fill_pen, penStartSymbol,
				0,						0, 		901,
				widthStartSymbol / 2,	360, 	4001
		endif

		if iStartSymbol = 2 then	! Style 2
			for k = 1 to 2
				poly2_b 6, 1+temp_FillStatus, gs_fill_pen, penStartSymbol,
					0, 						0, 						1,
					widthStartSymbol / 2, 	0, 						1,
					0,						0,						901,
					0,						90,						4001,
					0,						widthStartSymbol / 2,	0,
					0,						0,						-1
				poly2_b 6, 1, penStartSymbol, gs_fill_pen,
					0,						0,						1,
					0,						widthStartSymbol / 2,	1,
					0,						0,						901,
					0,						90,						4001,
					-widthStartSymbol / 2,	0,						0,
					0,						0,						-1
				rot2 180
			next k
			del 2
		endif

		if iStartSymbol = 3 then	! Style 3
			line2 widthStartSymbol/2, 	heightStartSymbol/2, 	- widthStartSymbol/2, 	heightStartSymbol/2
			line2 widthStartSymbol/2, 	- heightStartSymbol/2, 	- widthStartSymbol/2, 	- heightStartSymbol/2
		endif

		if iStartSymbol = 1 or iStartSymbol = 2 then
			for kk=1 to 4
				hotspot2 0, 					0,	StartSymbUNID, widthStartSymbolHalf, 1+128, widthStartSymbol	: StartSymbUNID = StartSymbUNID + 1
				hotspot2 widthStartSymbol / 2, 	0,	StartSymbUNID, widthStartSymbolHalf, 2, 	widthStartSymbol	: StartSymbUNID = StartSymbUNID + 1
				hotspot2 -1, 					0,	StartSymbUNID, widthStartSymbolHalf, 3+128, widthStartSymbol	: StartSymbUNID = StartSymbUNID + 1
				rot2 90
			next kk
			del 4
		else
			for kk=1 to 2
				! Symbol Width/2
				hotspot2 0,						- heightStartSymbolHalf, StartSymbUNID, widthStartSymbolHalf, 1+128,	widthStartSymbol	:StartSymbUNID=StartSymbUNID+1
				hotspot2 widthStartSymbolHalf, 	- heightStartSymbolHalf, StartSymbUNID, widthStartSymbolHalf, 2, 		widthStartSymbol	:StartSymbUNID=StartSymbUNID+1
				hotspot2 -1,					- heightStartSymbolHalf, StartSymbUNID, widthStartSymbolHalf, 3, 		widthStartSymbol	:StartSymbUNID=StartSymbUNID+1
	
				hotspot2 0,						heightStartSymbolHalf, StartSymbUNID, widthStartSymbolHalf, 1+128,	widthStartSymbol	:StartSymbUNID=StartSymbUNID+1
				hotspot2 widthStartSymbolHalf, 	heightStartSymbolHalf, StartSymbUNID, widthStartSymbolHalf, 2,		widthStartSymbol	:StartSymbUNID=StartSymbUNID+1
				hotspot2 -1,					heightStartSymbolHalf, StartSymbUNID, widthStartSymbolHalf, 3,		widthStartSymbol	:StartSymbUNID=StartSymbUNID+1
	
				! Symbol Height
				hotspot2 widthStartSymbolHalf, 0,						StartSymbUNID, heightStartSymbolHalf, 1+128, 	heightStartSymbol		:StartSymbUNID=StartSymbUNID+1
				hotspot2 widthStartSymbolHalf, heightStartSymbolHalf, 	StartSymbUNID, heightStartSymbolHalf, 2, 		heightStartSymbol		:StartSymbUNID=StartSymbUNID+1
				hotspot2 widthStartSymbolHalf, -1,						StartSymbUNID, heightStartSymbolHalf, 3, 		heightStartSymbol		:StartSymbUNID=StartSymbUNID+1
	
				hotspot2 widthStartSymbolHalf, 0,						StartSymbUNID, heightStartSymbolHalf, 1+128, 	heightStartSymbol		:StartSymbUNID=StartSymbUNID+1
				hotspot2 widthStartSymbolHalf, - heightStartSymbolHalf,	StartSymbUNID, heightStartSymbolHalf, 2,		heightStartSymbol		:StartSymbUNID=StartSymbUNID+1
				hotspot2 widthStartSymbolHalf, 1,						StartSymbUNID, heightStartSymbolHalf, 3, 		heightStartSymbol		:StartSymbUNID=StartSymbUNID+1
				mul2 -1,1
			next kk
			del kk-1
		endif
	else
		circle2 0, 0, arrowSize/5
	endif
	del 1
return
]]>
</Script_2D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_1D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
EPS = 0.00001

!iRampType
RAMP_CURVED = 1
RAMP_STRAIGHT = 2


!------------ Floor Plan Display type integer definitions ----------------------

dim stFloorPlanDisplayType[5]
	stFloorPlanDisplayType[1] = `Сечение и Низ`
	stFloorPlanDisplayType[2] = `Сечение и Верх`
	stFloorPlanDisplayType[3] = `Символический`
	stFloorPlanDisplayType[4] = `Только Контуры`
	stFloorPlanDisplayType[5] = `Вся Проекция`

DISPLAY_PROJECTED					= 1
DISPLAY_OVERHEAD_PROJ				= 2
DISPLAY_SYMBOLIC					= 3
DISPLAY_OUTLINES					= 4
DISPLAY_OVERHEAD_ALL				= 5

! iCalculationMethod
METHOD_RATIO 		= 1
METHOD_PERCENTAGE 	= 2
METHOD_DIMENSIONS 	= 3

! iTextType1, iTextType2
TEXT_PERCENTAGE 	= 1
TEXT_RATIO 			= 2
TEXT_SEGMENTLENGTH 	= 3
TEXT_FULLLENGTH 	= 4
TEXT_CUSTOM			= 0

! iWalkingLineType
WALKINGLINE_SIMPLE 		= 1
WALKINGLINE_TRIANGLE 	= 2

if GLOB_MODPAR_NAME = "ZZYZX" then
	_actZZYZX = ZZYZX - (heightAscent * 2 * bAscent)	! Height without Height of Ascent
else
	_actA = A - (lengthAscent * 2 * bAscent)			! Length without Length of Ascent
endif


breaklineWidth	= 0.05
breaklineAngle	= 30

if not(bAscent) then
	_tempA = A
else
	_tempA = A - 2 * lengthAscent
endif

if not(bDiffSides) then
	_BLeft = b - ((widthSideFlange1 * bSideFlange1) + (widthSideFlange2 * bSideFlange2)) * 2
	_BRight = b - ((widthSideFlange1 * bSideFlange1) + (widthSideFlange2 * bSideFlange2)) * 2
else
	_BLeft = b - ((widthSideFlange1_left * bSideFlange1_left) + (widthSideFlange2_left * bSideFlange2_left)) * 2
	_BRight = b - ((widthSideFlange1_right * bSideFlange1_right) + (widthSideFlange2_right * bSideFlange2_right)) * 2
endif

if not(bReverse) then
	_XLeft = (_BLeft/4) 	/ (1/ tan (breaklineAngle) + _BLeft / (2 * _tempA))
	_XRight = (_BRight /4) / (1/ tan (breaklineAngle) -  _BRight  / (2 * _tempA))
else
	_XLeft = (_BLeft/4) / (1/ tan (breaklineAngle) - _BLeft / (2 * _tempA))
	_XRight = (_BRight /4) / (1/ tan (breaklineAngle) +  _BRight  / (2 * _tempA))
endif

_YLeft = 1/ tan (breaklineAngle) * _XLeft
_YRight = 1/ tan (breaklineAngle) * _XRight


if iCalculationMethod = METHOD_RATIO then
	if GLOB_MODPAR_NAME = "ZZYZX" then
		A = _actZZYZX / ratioHeight * ratioLength + (lengthAscent * 2 * bAscent)
		parameters A = A
	else
		ZZYZX = _actA / ratioLength * ratioHeight + (heightAscent * 2 * bAscent)
		parameters ZZYZX = ZZYZX
	endif

	if bAscent then
		if GLOB_MODPAR_NAME = "heightAscent" then
			lengthAscent = heightAscent / ratioAscentHeight * ratioAscentLength
			parameters lengthAscent = lengthAscent
		else
			heightAscent = lengthAscent / ratioAscentLength * ratioAscentHeight
			parameters heightAscent = heightAscent 
		endif
	endif
else
	if iCalculationMethod = METHOD_PERCENTAGE then
		if GLOB_MODPAR_NAME = "ZZYZX" then
			A = _actZZYZX/ percentage * 100 + (lengthAscent * 2 * bAscent)
			parameters A = A
		else
			ZZYZX = _actA * percentage / 100 + (heightAscent * 2 * bAscent)
			parameters ZZYZX = ZZYZX
		endif

		if bAscent then
			if GLOB_MODPAR_NAME = "heightAscent" then
				lengthAscent = heightAscent / ascentPercentage * 100
				parameters lengthAscent = lengthAscent
			else
				heightAscent = lengthAscent * ascentPercentage / 100
				parameters heightAscent = heightAscent 
			endif
		endif
	endif
endif

if GLOB_MODPAR_NAME = "ZZYZX" then
	_actA = A - (lengthAscent * 2 * bAscent)			! Length without Length of Ascent
else
	_actZZYZX = ZZYZX - (heightAscent * 2 * bAscent)	! Height without Height of Ascent
endif

! Greatest common divisor for Ratio calculation
if iCalculationMethod <> METHOD_RATIO then
	dim  GCDArray[]
	if _actZZYZX > _actA then
		GCDArray[1] = _actZZYZX
		GCDArray[2] = _actA
	else
		if _actZZYZX < _actA then
			GCDArray[1] = _actA
			GCDArray[2] = _actZZYZX
		else	! if they are equal
			_gcd = _actZZYZX * 1000
		endif
	endif
	
	if abs(_actZZYZX - _actA) > eps then
		i = 2
		_found = 0
		while not(_found) do
			i = i + 1
			GCDArray[i] = GCDArray[i-2] - int(GCDArray[i-2] / GCDArray[i-1]) * GCDArray[i-1]
			if abs(GCDArray[i]) < eps then 
				_found = 1
				_gcd = GCDArray[i-1]
			endif
		endwhile
	endif

	if bAscent then
		_actheightAscent 	= heightAscent 		! Height without Height of Ascent
		_actlengthAscent 	= lengthAscent 		! Length without Length of Ascent
	
		dim  GCDArray[]
		if _actheightAscent > _actlengthAscent then
			GCDArray[1] = _actheightAscent 
			GCDArray[2] = _actlengthAscent 
		else
			if _actheightAscent < _actlengthAscent then
				GCDArray[1] = _actlengthAscent 
				GCDArray[2] = _actheightAscent 
			else	! if they are equal
				_gcdAscent = _actheightAscent
			endif
		endif
		
		if abs(_actheightAscent - _actlengthAscent ) > eps then
			i = 2
			_found = 0
			while not(_found) do
				i = i + 1
				GCDArray[i] = GCDArray[i-2] - int(GCDArray[i-2] / GCDArray[i-1]) * GCDArray[i-1]
				if abs(GCDArray[i]) < eps then 
					_found = 1
					_gcdAscent = GCDArray[i-1]
				endif
			endwhile
		endif
	endif	
endif

if iCalculationMethod = METHOD_RATIO then
	percentage = _actZZYZX / _actA * 100
	parameters percentage = percentage

	if bAscent then
		ascentPercentage = INT(heightAscent / lengthAscent * 100)
		parameters ascentPercentage = ascentPercentage
	endif
else
	if iCalculationMethod = METHOD_PERCENTAGE then
		ratioLength = _actA / _gcd
		parameters ratioLength = ratioLength 

		ratioHeight = _actZZYZX / _gcd
		parameters ratioHeight = ratioHeight 

		if bAscent then
			ratioAscentLength = lengthAscent / _gcdAscent
			parameters ratioAscentLength = ratioAscentLength

			ratioAscentHeight = heightAscent / _gcdAscent
			parameters ratioAscentHeight = ratioAscentHeight
		endif
	else	! METHOD_DIMENSIONS
		if GLOB_MODPAR_NAME = "ZZYZX" or GLOB_MODPAR_NAME = "A" or GLOB_MODPAR_NAME = "heightAscent" or GLOB_MODPAR_NAME = "lengthAscent" then
			percentage = _actZZYZX / _actA * 100
			parameters percentage = percentage

			ratioLength = _actA / _gcd
			parameters ratioLength = ratioLength 

			ratioHeight = _actZZYZX / _gcd
			parameters ratioHeight = ratioHeight 
		endif
		if bAscent then
			if GLOB_MODPAR_NAME = "heightAscent" or GLOB_MODPAR_NAME = "lengthAscent" then
				ascentPercentage = INT(heightAscent / lengthAscent * 100)
				parameters ascentPercentage = ascentPercentage

				ratioAscentLength = lengthAscent / _gcdAscent
				parameters ratioAscentLength = ratioAscentLength

				ratioAscentHeight = heightAscent / _gcdAscent
				parameters ratioAscentHeight = ratioAscentHeight
			endif
		endif
	endif
endif

]]>
</Script_1D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_VL SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
call "FM_types" parameters all

hideparameter all "A", "B", "ZZYZX"

values "thicknessRamp" range (0,)
values "ratioLength" range (0, )
values "ratioHeight" range (0, ratioLength]
values "percentage" range (0, 100]

values "heightAscent" range (0, ZZYZX / 2)
if iFloorPlanDisplayType = DISPLAY_SYMBOLIC and bShowBreakline and iWalkingLineType = WALKINGLINE_TRIANGLE then
	values "lengthAscent" range [heightAscent, a/2 - (B*tan(breaklineAngle)/2) )
else
	values "lengthAscent" range [heightAscent, a/2 - 0.1]
endif

values "ratioAscentLength" range (0, )
values "ratioAscentHeight" range (0, ratioAscentLength]
values "ascentPercentage" range (0, 100]

values "arrowWidth" range (0, )
values "arrowHeight" range (0, )
values "widthStartSymbol" range (0, )
values "heightStartSymbol" range (0, )

values "zzyzx" range (heightAscent * 2, )

parameters ac_bottomlevel	= 0
parameters ac_toplevel		= ZZYZX

if GLOB_MODPAR_NAME = "widthStartSymbolHalf" then
	widthStartSymbol = widthStartSymbolHalf * 2
	parameters widthStartSymbol = widthStartSymbol
else
	if GLOB_MODPAR_NAME = "widthStartSymbol" then
		widthStartSymbolHalf = widthStartSymbol / 2
		parameters widthStartSymbolHalf = widthStartSymbolHalf
	endif
endif

if GLOB_MODPAR_NAME = "heightStartSymbolHalf" then
	heightStartSymbol = heightStartSymbolHalf * 2
	parameters heightStartSymbol = heightStartSymbol
else
	if GLOB_MODPAR_NAME = "heightStartSymbol" then
		heightStartSymbolHalf = heightStartSymbol / 2
		parameters heightStartSymbolHalf = heightStartSymbolHalf
	endif
endif

if GLOB_MODPAR_NAME = "arrowWidthHalf" then
	parameters arrowWidth = arrowWidthHalf * 2
else
	parameters arrowWidthHalf 	= arrowWidth / 2
endif

values{2} "iCalculationMethod" 	METHOD_RATIO, 		`Соотношение`,
								METHOD_PERCENTAGE, 	`Проценты`,
								METHOD_DIMENSIONS, 	`Размеры`

values{2} "iTextType1" 	TEXT_PERCENTAGE,				`Проценты`,
						TEXT_RATIO,						`Соотношение`,
						TEXT_SEGMENTLENGTH, 			`Длина Сегмента`,
						TEXT_FULLLENGTH, 				`Полная Длина`,
						TEXT_CUSTOM,					`Специальный`	

if iTextType1 = TEXT_PERCENTAGE then
	values{2} "iTextType2" 	TEXT_RATIO,						`Соотношение`,
							TEXT_SEGMENTLENGTH, 			`Длина Сегмента`,
							TEXT_FULLLENGTH, 				`Полная Длина`,
							TEXT_CUSTOM,					`Специальный`
else
	if iTextType1 = TEXT_RATIO then
		values{2} "iTextType2" 	TEXT_PERCENTAGE,				`Проценты`,
								TEXT_SEGMENTLENGTH, 			`Длина Сегмента`,
								TEXT_FULLLENGTH, 				`Полная Длина`,
								TEXT_CUSTOM,					`Специальный`
	else
		if iTextType1 = TEXT_SEGMENTLENGTH then
			values{2} "iTextType2" 	TEXT_PERCENTAGE,				`Проценты`,
									TEXT_RATIO,						`Соотношение`,
									TEXT_FULLLENGTH, 				`Полная Длина`,
									TEXT_CUSTOM,					`Специальный`	

		else
			if iTextType1 = TEXT_FULLLENGTH then
				values{2} "iTextType2" 	TEXT_PERCENTAGE,				`Проценты`,
										TEXT_RATIO,						`Соотношение`,
										TEXT_SEGMENTLENGTH, 			`Длина Сегмента`,
										TEXT_CUSTOM,					`Специальный`
			else	! TEXT_CUSTOM
				values{2} "iTextType2" 	TEXT_PERCENTAGE,				`Проценты`,
										TEXT_RATIO,						`Соотношение`,
										TEXT_SEGMENTLENGTH, 			`Длина Сегмента`,
										TEXT_FULLLENGTH, 				`Полная Длина`
			endif
		endif
	endif
endif

values{2} "iWalkingLineType" 	WALKINGLINE_SIMPLE,		`Простая Линия`,
								WALKINGLINE_TRIANGLE,	`Треугольник`

values{2} "iStartSymbol" 	1, 	`Стиль 1`,
							2, 	`Стиль 2`,
							3, 	`Стиль 3`

values{2} "iEndSymbol" 	1, 	`Стиль 1`,
						2, 	`Стиль 2`,
						3, 	`Стиль 3`,
						4, 	`Стиль 4`,
						5, 	`Стиль 5`,
						6, 	`Стиль 6`

! --- Usable width - Full width ------------------------------------------------

if GLOB_MODPAR_NAME = "widthUsable" |\
	GLOB_MODPAR_NAME = "bSideFlange1" or GLOB_MODPAR_NAME = "bSideFlange2" |\
	GLOB_MODPAR_NAME = "bSideFlange1_right" or GLOB_MODPAR_NAME = "bSideFlange1_left" |\
	GLOB_MODPAR_NAME = "bSideFlange2_right" or GLOB_MODPAR_NAME = "bSideFlange2_left"  |\

	GLOB_MODPAR_NAME = "widthSideFlange1" |\
	GLOB_MODPAR_NAME = "widthSideFlange1_right" |\
	GLOB_MODPAR_NAME = "widthSideFlange1_left" |\
	GLOB_MODPAR_NAME = "widthSideFlange2" |\
	GLOB_MODPAR_NAME = "widthSideFlange2_right" |\
	GLOB_MODPAR_NAME = "widthSideFlange2_left" then
	if not (bDiffSides) then
		b = widthUsable + 2*widthSideFlange1*bSideFlange1 + 2*widthSideFlange2*bSideFlange2
	else
		b = widthUsable + widthSideFlange1_right*bSideFlange1_right + widthSideFlange1_left*bSideFlange1_left +\
						  widthSideFlange2_right*bSideFlange2_right + widthSideFlange2_left*bSideFlange2_left
	endif
	parameters b = b
else
	if not (bDiffSides) then
		widthUsable = b - 2*widthSideFlange1*bSideFlange1 - 2*widthSideFlange2*bSideFlange2
	else
		widthUsable = b - widthSideFlange1_right*bSideFlange1_right - widthSideFlange1_left*bSideFlange1_left -\
						  widthSideFlange2_right*bSideFlange2_right - widthSideFlange2_left*bSideFlange2_left
	endif
	parameters widthUsable = widthUsable
endif

! --- Dimension of Side Flanges ------------------------------------------------

if not(bDiffSides) then
	parameters 	bSideFlange1_left 		= bSideFlange1,
				widthSideFlange1_left 	= widthSideFlange1,
				heightSideFlange1_left 	= heightSideFlange1,
				matSideFlange1_left 	= matSideFlange1,
				bSideFlange1_right 		= bSideFlange1,
				widthSideFlange1_right 	= widthSideFlange1,
				heightSideFlange1_right = heightSideFlange1,
				matSideFlange1_right 	= matSideFlange1,
				bSideFlange2_left 		= bSideFlange2,
				widthSideFlange2_left 	= widthSideFlange2,
				heightSideFlange2_left 	= heightSideFlange2,
				matSideFlange2_left 	= matSideFlange2,
				bSideFlange2_right 		= bSideFlange2,
				widthSideFlange2_right 	= widthSideFlange2,
				heightSideFlange2_right = heightSideFlange2,
				matSideFlange2_right 	= matSideFlange2
endif

! --- 2D symbol type, 3D detail level ------------------------------------------

values "floorPlanDisplayType" stFloorPlanDisplayType
VALUES "iFloorPlanDisplayType" 	DISPLAY_PROJECTED, \
								DISPLAY_OVERHEAD_PROJ, \
								DISPLAY_SYMBOLIC, \
								DISPLAY_OUTLINES, \
								DISPLAY_OVERHEAD_ALL

if GLOB_MODPAR_NAME = "floorPlanDisplayType" then
	for i = 1 to vardim1(stFloorPlanDisplayType)
	   if floorPlanDisplayType = stFloorPlanDisplayType[i]	then iFloorPlanDisplayType = i
	next i
	parameters iFloorPlanDisplayType = iFloorPlanDisplayType
else
	floorPlanDisplayType = stFloorPlanDisplayType[max(min(iFloorPlanDisplayType, vardim1(stFloorPlanDisplayType)), 1)]
	parameters floorPlanDisplayType = floorPlanDisplayType
endif

if iFloorPlanDisplayType = DISPLAY_SYMBOLIC then
	if not(bShowBreakline) then
		lock 	"lineDashed", "bShowAboveBreak", "penBreakLineBelow", "penBreakLineAbove",
				"ltBreakLineBelow", "ltBreakLineAbove", "bStop", "penWalkingAbove", "ltWalkingAbove", 
				"bShowAboveBreak", "penStartSymbolAbove", "penEndSymbolAbove"
		hideparameter 	"lineDashed", "bShowAboveBreak", "penBreakLineBelow", "penBreakLineAbove",
						"ltBreakLineBelow", "ltBreakLineAbove", "bStop", "penWalkingAbove", "ltWalkingAbove",
						"bShowAboveBreak", "penStartSymbolAbove", "penEndSymbolAbove"
	endif
	if not(bWalkingLine) then
		lock 	"iWalkingLineType", "penWalkingBelow", "ltWalkingBelow", "penWalkingAbove", "ltWalkingAbove", "bReverse", "bStop", "bStartSymbol", "iStartSymbol", 
				"bShowAboveBreak", "penStartSymbolBelow", "penStartSymbolAbove", "widthStartSymbol", "bEndSymbol", "iEndSymbol", "penEndSymbolBelow",
				"penEndSymbolAbove", "arrowWidth", "arrowHeight"
		hideparameter 	"iWalkingLineType", "penWalkingBelow", "ltWalkingBelow", "penWalkingAbove", "ltWalkingAbove", "bReverse", "bStop", "bStartSymbol", "iStartSymbol", 
						"bShowAboveBreak", "penStartSymbolBelow", "penStartSymbolAbove", "widthStartSymbol", "bEndSymbol", "iEndSymbol", "penEndSymbolBelow",
						"penEndSymbolAbove", "arrowWidth", "arrowHeight"
	endif
	
	if iWalkingLineType = WALKINGLINE_TRIANGLE then
		parameters 	bStartSymbol = 0,
					bEndSymbol = 0
		lock "bStartSymbol", "bEndSymbol"
		hideparameter "bStartSymbol", "bEndSymbol"
	endif

	if not(bStartSymbol) then
		lock "iStartSymbol", "bShowAboveBreak", "penStartSymbolBelow", "penStartSymbolAbove", "penStartSymbolBelow", "widthStartSymbol", "heightStartSymbol"
		hideparameter "iStartSymbol", "bShowAboveBreak", "penStartSymbolBelow", "penStartSymbolAbove", "penStartSymbolBelow", "widthStartSymbol", "heightStartSymbol"
	else
		if iStartSymbol <> 3 then
			lock "heightStartSymbol"
			hideparameter "heightStartSymbol"
		else
			lock "penStartSymbolBelow", "penStartSymbolAbove"
			hideparameter "penStartSymbolBelow", "penStartSymbolAbove"
		endif
	endif

	if not(bShowAboveBreak) then
		lock "penStartSymbolAbove"
		hideparameter "penStartSymbolAbove"
	endif

	if not(bEndSymbol) then
		lock "iEndSymbol", "penEndSymbolBelow", "penEndSymbolAbove", "arrowWidth", "arrowHeight"
		hideparameter "iEndSymbol", "penEndSymbolBelow", "penEndSymbolAbove", "arrowWidth", "arrowHeight"
	else
		if iEndSymbol = 1 or iEndSymbol = 3 or iEndSymbol = 5 then
			lock "arrowWidth"
			hideparameter "arrowWidth"
		endif

		if iEndSymbol = 1 or iEndSymbol = 2 then
			lock "penEndSymbolBelow", "penEndSymbolAbove"
			hideparameter "penEndSymbolBelow", "penEndSymbolAbove"
		endif
	endif

	if bStop then
		lock "penWalkingAbove", "ltWalkingAbove", "bShowAboveBreak", "penStartSymbolAbove", "penEndSymbolAbove"
		hideparameter "penWalkingAbove", "ltWalkingAbove", "bShowAboveBreak", "penStartSymbolAbove", "penEndSymbolAbove"
	endif
	if not(bShowText1) then
		lock "iTextType1", "TextPrefix1"
		hideparameter "TextPrefix1", "TextPrefix1"
	endif

	if not(bShowText2) then
		lock "iTextType2", "TextPrefix2"
		hideparameter "TextPrefix2", "TextPrefix2"
	endif

	if (not(bShowText1) and not(bShowText2)) then
		lock "CustomText", "fontType", "tx_size", "tx_size_point", "typeTextRotation_m"
		hideparameter "CustomText", "fontType", "tx_size", "tx_size_point", "typeTextRotation_m"
	endif

 	if (iTextType1 <> 0 and iTextType2 <> 0) or (not(bShowText1) and iTextType1 = 0) or (not(bShowText2) and iTextType2 = 0) then
		lock "CustomText"
		hideparameter "CustomText"
	endif
else
	lock 	"bShowBreakline", "penBreakLineBelow", "ltBreakLineBelow", "penBreakLineAbove", "ltBreakLineAbove", "bWalkingLine",
			"iWalkingLineType", "bReverse", "bStop", "penWalkingBelow", "ltWalkingBelow", "penWalkingAbove", "ltWalkingAbove",
			"bStartSymbol", "bShowAboveBreak", "iStartSymbol", "fillStartSymbol", "penStartSymbolBelow", "penStartSymbolAbove",
			"widthStartSymbol", "widthStartSymbolHalf", "heightStartSymbol", "heightStartSymbolHalf", "bEndSymbol", "iEndSymbol",
			"fillEndSymbol", "penEndSymbolBelow", "penEndSymbolAbove", "arrowWidth", "arrowWidthHalf", "arrowHeight",
			"bShowText1", "iTextType1", "TextPrefix1", "bShowText2", "iTextType2", "TextPrefix2", "CustomText"
	hideparameter  	"bShowBreakline", "penBreakLineBelow", "ltBreakLineBelow", "penBreakLineAbove", "ltBreakLineAbove", "bWalkingLine",
					"iWalkingLineType", "bReverse", "bStop", "penWalkingBelow", "ltWalkingBelow", "penWalkingAbove", "ltWalkingAbove",
					"bStartSymbol", "bShowAboveBreak", "iStartSymbol", "fillStartSymbol", "penStartSymbolBelow", "penStartSymbolAbove",
					"widthStartSymbol", "widthStartSymbolHalf", "heightStartSymbol", "heightStartSymbolHalf", "bEndSymbol", "iEndSymbol",
					"fillEndSymbol", "penEndSymbolBelow", "penEndSymbolAbove", "arrowWidth", "arrowWidthHalf", "arrowHeight",
					"bShowText1", "iTextType1", "TextPrefix1", "bShowText2", "iTextType2", "TextPrefix2", "CustomText"
endif

if gs_detlevel_3d_m = 0 then	! Off
	lock "gs_shadow"
	hideparameter "gs_shadow"
endif

if iFloorPlanDisplayType = DISPLAY_OUTLINES then
	lock			"lineOverhead",
					"overheadPen"
	hideparameter	"lineOverhead",
					"overheadPen"
endif
if iFloorPlanDisplayType = DISPLAY_OVERHEAD_ALL then
	lock			"lineDashed",
					"gs_cont_pen",
					"penText",
					"fontType",
					"tx_size",
					"tx_size_point",
					"typeTextRotation",
					"typeTextRotation_m",
					"bFill",
					"gs_fill_type",
					"gs_fill_pen",
					"gs_back_pen"
	hideparameter	"lineDashed",
					"gs_cont_pen",
					"penText",
					"fontType",
					"tx_size",
					"tx_size_point",
					"typeTextRotation",
					"typeTextRotation_m",
					"bFill",
					"gs_fill_type",
					"gs_fill_pen",
					"gs_back_pen"
endif
if NOT(bFill) then
	lock			"gs_fill_type",
					"gs_fill_pen",
					"gs_back_pen"
	hideparameter	"gs_fill_type",
					"gs_fill_pen",
					"gs_back_pen"
endif

values "gs_detlevel_3D"  `Детальный`,`Откл.`
values "gs_detlevel_3D_m"  2, 0

if GLOB_MODPAR_NAME = "gs_detlevel_3d" then
	if gs_detlevel_3d = `Детальный`	then gs_detlevel_3d_m = 2
	if gs_detlevel_3d = `Откл.`		then gs_detlevel_3d_m = 0
	parameters gs_detlevel_3d_m = gs_detlevel_3d_m
else
	if gs_detlevel_3d_m = 2		then gs_detlevel_3d = `Детальный`
	if gs_detlevel_3d_m = 0		then gs_detlevel_3d = `Откл.`
	parameters gs_detlevel_3d = gs_detlevel_3d
endif

! --- Hiding unused parameters -------------------------------------------------

if not (bDiffSides) then
	hideparameter	"bSideFlange1_left", "bSideFlange1_right", "widthSideFlange1_left",
					"widthSideFlange1_right", "heightSideFlange1_left", "heightSideFlange1_right",
					"matSideFlange1_left", "matSideFlange1_right",
					"bSideFlange2_left", "bSideFlange2_right", "widthSideFlange2_left",
					"widthSideFlange2_right", "heightSideFlange2_left", "heightSideFlange2_right",
					"matSideFlange2_left", "matSideFlange2_right"
else
	hideparameter	"bSideFlange1", "widthSideFlange1", "heightSideFlange1", "matSideFlange1",
					"bSideFlange2", "widthSideFlange2", "heightSideFlange2", "matSideFlange2"
endif


! --- Hiding unused parameters -------------------------------------------------

if not (bSideFlange1) then
	lock "widthSideFlange1", "heightSideFlange1", "matSideFlange1"
	hideparameter "widthSideFlange1", "heightSideFlange1", "matSideFlange1"
endif
if not (bSideFlange2) then
	lock "widthSideFlange2", "heightSideFlange2", "matSideFlange2"
	hideparameter "widthSideFlange2", "heightSideFlange2", "matSideFlange2"
endif

if not (bSideFlange1_left) then
	lock "widthSideFlange1_left", "heightSideFlange1_left", "matSideFlange1_left"
	hideparameter "widthSideFlange1_left", "heightSideFlange1_left", "matSideFlange1_left"
endif
if not (bSideFlange2_left) then
	lock "widthSideFlange2_left", "heightSideFlange2_left", "matSideFlange2_left"
	hideparameter "widthSideFlange2_left", "heightSideFlange2_left", "matSideFlange2_left"
endif

if not (bSideFlange1_right) then
	lock "widthSideFlange1_right", "heightSideFlange1_right", "matSideFlange1_right"
	hideparameter "widthSideFlange1_right", "heightSideFlange1_right", "matSideFlange1_right"
endif
if not (bSideFlange2_right) then
	lock "widthSideFlange2_right", "heightSideFlange2_right", "matSideFlange2_right"
	hideparameter "widthSideFlange2_right", "heightSideFlange2_right", "matSideFlange2_right"
endif

if iCalculationMethod = METHOD_RATIO then
	lock "percentage", "ascentPercentage"
	hideparameter "percentage", "ascentPercentage"
else
	if iCalculationMethod = METHOD_PERCENTAGE then
		lock "ratioLength", "ratioHeight", "ratioAscentLength", "ratioAscentHeight"
		hideparameter "ratioLength", "ratioHeight", "ratioAscentLength", "ratioAscentHeight"
	else	! METHOD_DIMENSIONS
		lock   "percentage", "ascentPercentage", "ratioLength", "ratioHeight", "ratioAscentLength", "ratioAscentHeight"
		hideparameter  "percentage", "ascentPercentage", "ratioLength", "ratioHeight", "ratioAscentLength", "ratioAscentHeight"
	endif
endif

if not(bAscent) then
	lock "lengthAscent", "heightAscent", "ascentPercentage", "ratioAscentLength", "ratioAscentHeight"
	hideparameter "lengthAscent", "heightAscent", "ascentPercentage", "ratioAscentLength", "ratioAscentHeight"
endif

! --- Font Size, Position ----------------------------------------------------------------

values "typeTextRotation" `Читаемый`,`Выровнять по Символу`
values "typeTextRotation_m" 2, 0

if GLOB_MODPAR_NAME = "typeTextRotation" then
	typeTextRotation_m = 2
	if typeTextRotation = `Выровнять по Символу`	then typeTextRotation_m = 0
	parameters typeTextRotation_m = typeTextRotation_m
else
	typeTextRotation = `Читаемый`
	if typeTextRotation_m = 0					then typeTextRotation = `Выровнять по Символу`
	parameters typeTextRotation = typeTextRotation
endif

Dot_in_mm = 25.4 / 72
if GLOB_MODPAR_NAME = "tx_size" then
	parameters tx_size_point = tx_size / Dot_in_mm
	tx_size_point = tx_size / Dot_in_mm
endif
if GLOB_MODPAR_NAME = "tx_size_point" then
	parameters tx_size = tx_size_point * Dot_in_mm
	tx_size = tx_size_point * Dot_in_mm
endif

if GLOB_UI_BUTTON_ID < 0 then
	parameters gs_ui_current_page = -GLOB_UI_BUTTON_ID
endif

]]>
</Script_VL>

<ParamSection SectVersion="26" SectionFlags="0" SubIdent="0">
	<ParamSectHeader>
		<Version>26</Version>
		<AutoHotspots>false</AutoHotspots>
		<StatBits>
			<STBit_UIDefault/>
			<STBit_FixSize/>
			<STBit_UIUseHierarchicalPages/>
		</StatBits>
		<WDLeftFrame>0</WDLeftFrame>
		<WDRightFrame>0</WDRightFrame>
		<WDTopFrame>0</WDTopFrame>
		<WDBotFrame>0</WDBotFrame>
		<LayFlags>65535</LayFlags>
		<WDMirrorThickness>0</WDMirrorThickness>
		<WDWallInset>0</WDWallInset>
		<SymbolColor>0</SymbolColor>
	</ParamSectHeader>
	<Parameters>
		<Length Name="A">
			<Description><![CDATA[""]]></Description>
			<Fix/>
			<Value>18</Value>
		</Length>
		<Length Name="B">
			<Description><![CDATA[""]]></Description>
			<Fix/>
			<Value>4</Value>
		</Length>
		<Length Name="ZZYZX">
			<Description><![CDATA["Высота"]]></Description>
			<Fix/>
			<Value>2.8</Value>
		</Length>
		<String Name="gs_detlevel_3d">
			<Description><![CDATA["3D-детализация"]]></Description>
			<Value><![CDATA["Детальный"]]></Value>
		</String>
		<Integer Name="gs_detlevel_3d_m">
			<Description><![CDATA["3D"]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>2</Value>
		</Integer>
		<Boolean Name="AC_show2DHotspotsIn3D">
			<Description><![CDATA["Показ Узловых 2D Точек в 3D"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Length Name="ac_bottomlevel">
			<Description><![CDATA["Отметка Низа"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="ac_toplevel">
			<Description><![CDATA["Отметка Верха"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>2.8</Value>
		</Length>

		<!-- _sp1: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="_sp1">
			<Description><![CDATA["Пандус"]]></Description>
		</Title>
		<Integer Name="iCalculationMethod">
			<Description><![CDATA["Способ Расчета"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>3</Value>
		</Integer>
		<Integer Name="ratioLength">
			<Description><![CDATA["Соотношение Длины"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>5</Value>
		</Integer>
		<Integer Name="ratioHeight">
			<Description><![CDATA["Соотношение Высоты"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<RealNum Name="percentage">
			<Description><![CDATA["Проценты"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>20</Value>
		</RealNum>
		<Boolean Name="bAscent">
			<Description><![CDATA["Переход"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Length Name="lengthAscent">
			<Description><![CDATA["Длина Перехода"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>4</Value>
		</Length>
		<Length Name="heightAscent">
			<Description><![CDATA["Высота Перехода"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.4</Value>
		</Length>
		<Integer Name="ratioAscentLength">
			<Description><![CDATA["Соотношение Длины Перехода"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>10</Value>
		</Integer>
		<Integer Name="ratioAscentHeight">
			<Description><![CDATA["Соотношение Высоты Перехода"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<RealNum Name="ascentPercentage">
			<Description><![CDATA["Проценты Перехода"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>10</Value>
		</RealNum>
		<Length Name="thicknessRamp">
			<Description><![CDATA["Толщина"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.2</Value>
		</Length>
		<Length Name="widthUsable">
			<Description><![CDATA["Ширина Внутри"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>3.28</Value>
		</Length>
		<Boolean Name="bDiffSides">
			<Description><![CDATA["Различные Стороны"]]></Description>
			<Flags>
				<ParFlg_BoldName/>
			</Flags>
			<Value>0</Value>
		</Boolean>

		<!-- bSideFlange1: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Boolean Name="bSideFlange1">
			<Description><![CDATA["Боковая Кромка 1"]]></Description>
			<Flags>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Length Name="widthSideFlange1">
			<Description><![CDATA["Ширина"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.2</Value>
		</Length>
		<Length Name="heightSideFlange1">
			<Description><![CDATA["Высота"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.2</Value>
		</Length>

		<!-- bSideFlange1_right: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Boolean Name="bSideFlange1_right">
			<Description><![CDATA["Боковая Кромка 1 Справа"]]></Description>
			<Flags>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Length Name="widthSideFlange1_right">
			<Description><![CDATA["Ширина"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.2</Value>
		</Length>
		<Length Name="heightSideFlange1_right">
			<Description><![CDATA["Высота"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.2</Value>
		</Length>

		<!-- bSideFlange1_left: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Boolean Name="bSideFlange1_left">
			<Description><![CDATA["Боковая Кромка 1 Слева"]]></Description>
			<Flags>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Length Name="widthSideFlange1_left">
			<Description><![CDATA["Ширина"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.2</Value>
		</Length>
		<Length Name="heightSideFlange1_left">
			<Description><![CDATA["Высота"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.2</Value>
		</Length>

		<!-- bSideFlange2: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Boolean Name="bSideFlange2">
			<Description><![CDATA["Боковая Кромка 2"]]></Description>
			<Flags>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Length Name="widthSideFlange2">
			<Description><![CDATA["Ширина"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.16</Value>
		</Length>
		<Length Name="heightSideFlange2">
			<Description><![CDATA["Высота"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.4</Value>
		</Length>

		<!-- bSideFlange2_right: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Boolean Name="bSideFlange2_right">
			<Description><![CDATA["Боковая Кромка 2 Справа"]]></Description>
			<Flags>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Length Name="widthSideFlange2_right">
			<Description><![CDATA["Ширина"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.16</Value>
		</Length>
		<Length Name="heightSideFlange2_right">
			<Description><![CDATA["Высота"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.4</Value>
		</Length>

		<!-- bSideFlange2_left: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Boolean Name="bSideFlange2_left">
			<Description><![CDATA["Боковая Кромка 2 Слева"]]></Description>
			<Flags>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Length Name="widthSideFlange2_left">
			<Description><![CDATA["Ширина"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.16</Value>
		</Length>
		<Length Name="heightSideFlange2_left">
			<Description><![CDATA["Высота"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.4</Value>
		</Length>

		<!-- gs_2D_representation: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_2D_representation">
			<Description><![CDATA["2D-отображение"]]></Description>
			<Fix/>
		</Title>
		<String Name="floorPlanDisplayType">
			<Description><![CDATA["Показ на Плане Этажа"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Символический"]]></Value>
		</String>
		<Integer Name="iFloorPlanDisplayType">
			<Description><![CDATA["Показ на Плане Этажа"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>3</Value>
		</Integer>
		<Boolean Name="bShowBreakline">
			<Description><![CDATA["Линия Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<PenColor Name="penBreakLineBelow">
			<Description><![CDATA["Перо Линии Ниже Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>91</Value>
		</PenColor>
		<LineType Name="ltBreakLineBelow">
			<Description><![CDATA["Тип Линии Ниже Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</LineType>
		<PenColor Name="penBreakLineAbove">
			<Description><![CDATA["Перо Линии Выше Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>91</Value>
		</PenColor>
		<LineType Name="ltBreakLineAbove">
			<Description><![CDATA["Тип Линии Выше Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>4</Value>
		</LineType>
		<Boolean Name="bWalkingLine">
			<Description><![CDATA["Линия Всхода"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Integer Name="iWalkingLineType">
			<Description><![CDATA["Тип Линии Всхода"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Boolean Name="bReverse">
			<Description><![CDATA["Обратное Направление Символа"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="bStop">
			<Description><![CDATA["Не Продлевать за Линию Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<PenColor Name="penWalkingBelow">
			<Description><![CDATA["Перо Основной Линии Ниже Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>71</Value>
		</PenColor>
		<LineType Name="ltWalkingBelow">
			<Description><![CDATA["Тип Линии Основной Линии Ниже Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</LineType>
		<PenColor Name="penWalkingAbove">
			<Description><![CDATA["Перо Основной Линии Выше Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>71</Value>
		</PenColor>
		<LineType Name="ltWalkingAbove">
			<Description><![CDATA["Тип Линии Основной Линии Выше Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>6</Value>
		</LineType>
		<Boolean Name="bStartSymbol">
			<Description><![CDATA["Символ в Начале"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="bShowAboveBreak">
			<Description><![CDATA["Показ Выше Линии Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Integer Name="iStartSymbol">
			<Description><![CDATA["Тип Символа в Начале"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<FillPattern Name="fillStartSymbol">
			<Description><![CDATA["Штриховка Символа в Начале"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>65</Value>
		</FillPattern>
		<PenColor Name="penStartSymbolBelow">
			<Description><![CDATA["Перо Символа в Начале Ниже Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>91</Value>
		</PenColor>
		<PenColor Name="penStartSymbolAbove">
			<Description><![CDATA["Перо Символа в Начале Выше Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</PenColor>
		<Length Name="widthStartSymbol">
			<Description><![CDATA["Ширина Символа в Начале"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.3</Value>
		</Length>
		<Length Name="widthStartSymbolHalf">
			<Description><![CDATA["Половина Ширины Символа в Начале"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.15</Value>
		</Length>
		<Length Name="heightStartSymbol">
			<Description><![CDATA["Высота Символа в Начале"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.1</Value>
		</Length>
		<Length Name="heightStartSymbolHalf">
			<Description><![CDATA["Половина Высоты Символа в Начале"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Boolean Name="bEndSymbol">
			<Description><![CDATA["Символ в Конце"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Integer Name="iEndSymbol">
			<Description><![CDATA["Тип Символа в Конце"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<FillPattern Name="fillEndSymbol">
			<Description><![CDATA["Штриховка Символа Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>65</Value>
		</FillPattern>
		<PenColor Name="penEndSymbolBelow">
			<Description><![CDATA["Перо Символа в Конце Ниже Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>91</Value>
		</PenColor>
		<PenColor Name="penEndSymbolAbove">
			<Description><![CDATA["Перо Символа в Конце Выше Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</PenColor>
		<Length Name="arrowWidth">
			<Description><![CDATA["Ширина Символа в Конце"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>4</Value>
		</Length>
		<Length Name="arrowWidthHalf">
			<Description><![CDATA["Половина Ширины Символа в Конце"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>2</Value>
		</Length>
		<Length Name="arrowHeight">
			<Description><![CDATA["Высота Символа в Конце"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>2</Value>
		</Length>
		<LineType Name="lineCont">
			<Description><![CDATA["Тип Линии Контура"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</LineType>
		<PenColor Name="gs_cont_pen">
			<Description><![CDATA["Перо Контура"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>91</Value>
		</PenColor>
		<LineType Name="lineDashed">
			<Description><![CDATA["Тип Линии Контура Выше Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>4</Value>
		</LineType>
		<LineType Name="lineOverhead">
			<Description><![CDATA["Тип Линии Проекции"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>6</Value>
		</LineType>
		<PenColor Name="overheadPen">
			<Description><![CDATA["Перо Контура Выше Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>91</Value>
		</PenColor>
		<PenColor Name="penArrow">
			<Description><![CDATA["Перо Стрелки"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>20</Value>
		</PenColor>
		<RealNum Name="arrowSize">
			<Description><![CDATA["Размер Стрелки"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.6</Value>
		</RealNum>
		<Boolean Name="bShowText1">
			<Description><![CDATA["Показ Текста 1"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Integer Name="iTextType1">
			<Description><![CDATA["Тип Текста 1"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<String Name="TextPrefix1">
			<Description><![CDATA["Префикс 1"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<Boolean Name="bShowText2">
			<Description><![CDATA["Показ Текста 2"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Integer Name="iTextType2">
			<Description><![CDATA["Тип Текста 2"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>3</Value>
		</Integer>
		<String Name="TextPrefix2">
			<Description><![CDATA["Префикс 2"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="CustomText">
			<Description><![CDATA["Специальный Текст"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["‹Специальный Текст›"]]></Value>
		</String>
		<PenColor Name="penText">
			<Description><![CDATA["Перо Текста"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>86</Value>
		</PenColor>
		<String Name="fontType">
			<Description><![CDATA["Тип Шрифта"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Arial"]]></Value>
		</String>
		<RealNum Name="tx_size">
			<Description><![CDATA["Размер Шрифта (мм)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>3</Value>
		</RealNum>
		<RealNum Name="tx_size_point">
			<Description><![CDATA["Размер Шрифта (пт)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>8.50393700787</Value>
		</RealNum>
		<String Name="typeTextRotation">
			<Description><![CDATA["Ориентация Текста в Символе"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Выровнять по Символу"]]></Value>
		</String>
		<Integer Name="typeTextRotation_m">
			<Description><![CDATA["Ориентация Текста в Символе"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Integer>
		<Boolean Name="bFill">
			<Description><![CDATA["Штриховка"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<FillPattern Name="gs_fill_type">
			<Description><![CDATA["Тип Штриховки"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>65</Value>
		</FillPattern>
		<PenColor Name="gs_fill_pen">
			<Description><![CDATA["Перо Штриховки"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>19</Value>
		</PenColor>
		<PenColor Name="gs_back_pen">
			<Description><![CDATA["Перо Фона Штриховки"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>19</Value>
		</PenColor>

		<!-- gs_3D_representation: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_3D_representation">
			<Description><![CDATA["3D-отображение"]]></Description>
		</Title>
		<Boolean Name="gs_shadow">
			<Description><![CDATA["Отбрасывание Теней"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>

		<!-- gs_material: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_material">
			<Description><![CDATA["Покрытия"]]></Description>
		</Title>
		<Material Name="matRamp">
			<Description><![CDATA["Пандус"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>53</Value>
		</Material>
		<Material Name="matSideFlange1">
			<Description><![CDATA["Боковая Кромка 1"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>53</Value>
		</Material>
		<Material Name="matSideFlange1_left">
			<Description><![CDATA["Боковая Кромка 1 Слева"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>53</Value>
		</Material>
		<Material Name="matSideFlange1_right">
			<Description><![CDATA["Боковая Кромка 1 Справа"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>53</Value>
		</Material>
		<Material Name="matSideFlange2">
			<Description><![CDATA["Боковая Кромка 2"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>53</Value>
		</Material>
		<Material Name="matSideFlange2_left">
			<Description><![CDATA["Боковая Кромка 2 Слева"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>53</Value>
		</Material>
		<Material Name="matSideFlange2_right">
			<Description><![CDATA["Боковая Кромка 2 Справа"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>53</Value>
		</Material>
		<Angle Name="gs_readable_angle">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>90</Value>
		</Angle>

		<!-- gs_list: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_list">
			<Description><![CDATA["Параметры Спецификаций"]]></Description>
			<Fix/>
		</Title>
		<RealNum Name="gs_list_cost">
			<Description><![CDATA["Цена"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<String Name="gs_list_manufacturer">
			<Description><![CDATA["Производитель"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_note">
			<Description><![CDATA["Примечания"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_location">
			<Description><![CDATA["Расположение"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_accessories">
			<Description><![CDATA["Аксессуары"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="FM_Type">
			<Description><![CDATA["Тип Группы"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Другой"]]></Value>
		</String>
		<Integer Name="iFMType">
			<Description><![CDATA["Тип Группы"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>25</Value>
		</Integer>
		<String Name="FM_InventoryNumber">
			<Description><![CDATA["Инвентарный Номер"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="FM_SerialNumber">
			<Description><![CDATA["Серийный Номер"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="FM_ProductionYear">
			<Description><![CDATA["Год Производства"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<RealNum Name="FM_ObjectWeight">
			<Description><![CDATA["Вес Изделия"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<String Name="FM_ObjectWeightUnit">
			<Description><![CDATA["Единица Веса"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["кг"]]></Value>
		</String>
		<String Name="gs_list_custom1">
			<Description><![CDATA["Пользовательское Значение 1"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_custom2">
			<Description><![CDATA["Пользовательское Значение 2"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_custom3">
			<Description><![CDATA["Пользовательское Значение 3"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_custom4">
			<Description><![CDATA["Пользовательское Значение 4"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_custom5">
			<Description><![CDATA["Пользовательское Значение 5"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<Integer Name="gs_ui_current_page">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
	</Parameters>
</ParamSection>

<Ancestry SectVersion="1" SectionFlags="0" SubIdent="0" Template="false">
	<MainGUID>F938E33A-329D-4A36-BE3E-85E126820996</MainGUID>
	<MainGUID>103E8D2C-8230-42E1-9597-46F84CCE28C0</MainGUID>
	<MainGUID>784EAEA1-5041-4AA6-B6F4-EF263A891EE7</MainGUID>
	<MainGUID>972791D9-92A6-4ABA-84E9-29E2CBC205A7</MainGUID>
</Ancestry>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_PR SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_PR>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_UI SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
! ==============================================================================
! Curved Ramp
! ==============================================================================


ui_dialog `Параметры Пандуса`

call "ui_ramp" parameters all	iRampType		= RAMP_STRAIGHT
]]>
</Script_UI>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Comment SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[Пандус прямой с дополнительными боковыми бортиками.]]>
</Comment>

<Keywords SectVersion="1" SectionFlags="0" SubIdent="0">
<![CDATA[бортик сбоку]]>
</Keywords>

<Picture MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="0" length_in_bytes="14826" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D49484452000000800000
	008008020000004C5CF69C000000097048597300002E2300002E230178A53F76
	00000A396943435050686F746F73686F70204943432070726F66696C65000078
	DA9D96775454D71687CFBD777AA1CD30025286DEBBC000D27B935E4561981960
	28030E3334B121A2021145449A224850C480D150245644B1101454B007240828
	311845542C6F46D68BAEACBCF7F2F2FBE3AC6FEDB3F7B9FBECBDCF5A170092A7
	2F9797064B0190CA13F0833C9CE911915174EC0080011E608029004C5646BA5F
	B07B0810C9CBCD859E2172025F0401F07A58BC0270D3D033804E07FF9FA459E9
	7C81E89800119BB339192C11178838254B902EB6CF8A981A972C66182566BE28
	4111CB893961910D3EFB2CB2A398D9A93CB688C539A7B353D962EE15F1B64C21
	47C488AF880B33B99C2C11DF12B1468A30952BE237E2D8540E33030014496C17
	70588922361131891F12E422E2E500E048095F71DC572CE0640BC49772494BCF
	E173131205741D962EDDD4DA9A41F7E464A5700402C300262B99C967D35DD252
	D399BC1C0016EFFC5932E2DAD24545B634B5B6B434343332FDAA50FF75F36F4A
	DCDB457A19F8B96710ADFF8BEDAFFCD21A0060CC896AB3F38B2DAE0A80CE2D00
	C8DDFB62D3380080A4A86F1DD7BFBA0F4D3C2F890241BA8DB1715656961197C3
	321217F40FFD4F87BFA1AFBE67243EEE8FF2D05D39F14C618A802EAE1B2B2D25
	4DC8A767A433591CBAE19F87F81F07FE751E06419C780E9FC313458489A68CCB
	4B10B59BC7E60AB8693C3A97F79F9AF80FC3FEA4C5B91689D2F81150638C80D4
	752A407EED07280A1120D1FBC55DFFA36FBEF830207E79E12A938B73FFEF37FD
	67C1A5E225839BF039CE252884CE12F23317F7C4CF12A0010148022A9007CA40
	1DE800436006AC802D70046EC01BF8831010095603164804A9800FB2401ED804
	0A4131D809F6806A50071A41336805C741273805CE834BE01AB8016E83FB6014
	4C80676016BC060B10046121324481E421154813D287CC2006640FB941BE5010
	1409C54209100F124279D066A8182A83AAA17AA819FA1E3A099D87AE4083D05D
	680C9A867E87DEC1084C82A9B012AC051BC30CD809F68143E0557002BC06CE85
	0BE01D7025DC001F853BE0F3F035F8363C0A3F83E7108010111AA28A18220CC4
	05F147A29078848FAC478A900AA4016945BA913EE426328ACC206F5118140545
	4719A26C519EA850140BB506B51E5582AA461D4675A07A51375163A859D44734
	19AD88D647DBA0BDD011E8047416BA105D816E42B7A32FA26FA327D0AF31180C
	0DA38DB1C2786222314998B59812CC3E4C1BE61C6610338E99C362B1F2587DAC
	1DD61FCBC40AB085D82AEC51EC59EC107602FB0647C4A9E0CC70EEB8281C0F97
	8FABC01DC19DC10DE126710B7829BC26DE06EF8F67E373F0A5F8467C37FE3A7E
	02BF4090266813EC08218424C2264225A1957091F080F0924824AA11AD898144
	2E7123B192788C789938467C4B9221E9915C48D124216907E910E91CE92EE925
	994CD6223B92A3C802F20E7233F902F911F98D0445C248C24B822DB141A246A2
	436248E2B9245E5253D24972B564AE6485E409C9EB92335278292D291729A6D4
	7AA91AA99352235273D2146953697FE954E912E923D257A4A764B0325A326E32
	6C99029983321764C62908459DE242615136531A29172913540C559BEA454DA2
	1653BFA30E506765656497C986C966CBD6C89E961DA521342D9A172D85564A3B
	4E1BA6BD5BA2B4C4690967C9F625AD4B8696CCCB2D957394E3C815C9B5C9DD96
	7B274F9777934F96DF25DF29FF5001A5A0A710A890A5B05FE1A2C2CC52EA52DB
	A5ACA5454B8F2FBDA7082BEA290629AE553CA8D8AF38A7A4ACE4A194AE54A574
	41694699A6ECA89CA45CAE7C46795A85A262AFC255295739ABF2942E4B77A2A7
	D02BE9BDF4595545554F55A16ABDEA80EA829AB65AA85ABE5A9BDA4375823A43
	3D5EBD5CBD477D564345C34F234FA345E39E265E93A199A8B957B34F735E4B5B
	2B5C6BAB56A7D694B69CB69776AE768BF6031DB28E83CE1A9D069D5BBA185D86
	6EB2EE3EDD1B7AB09E855EA25E8DDE757D58DF529FABBF4F7FD0006D606DC033
	6830183124193A19661AB6188E19D18C7C8DF28D3A8D9E1B6B184719EF32EE33
	FE6862619262D26872DF54C6D4DB34DFB4DBF477333D3396598DD92D73B2B9BB
	F906F32EF317CBF4977196ED5F76C78262E167B1D5A2C7E283A59525DFB2D572
	DA4AC32AD6AAD66A84416504304A1897ADD1D6CED61BAC4F59BFB5B1B411D81C
	B7F9CDD6D036D9F688EDD472EDE59CE58DCBC7EDD4EC9876F576A3F674FB58FB
	03F6A30EAA0E4C870687C78EEA8E6CC726C749275DA724A7A34ECF9D4D9CF9CE
	EDCEF32E362EEB5CCEB922AE1EAE45AE036E326EA16ED56E8FDCD5DC13DC5BDC
	673D2C3CD67A9CF3447BFA78EEF21CF152F26279357BCD7A5B79AFF3EEF521F9
	04FB54FB3CF6D5F3E5FB76FBC17EDE7EBBFD1EACD05CC15BD1E90FFCBDFC77FB
	3F0CD00E5813F06320263020B026F0499069505E505F30253826F848F0EB10E7
	90D290FBA13AA1C2D09E30C9B0E8B0E6B0F970D7F0B2F0D108E3887511D72215
	22B9915D51D8A8B0A8A6A8B9956E2BF7AC9C88B6882E8C1E5EA5BD2A7BD595D5
	0AAB53569F8E918C61C69C8845C786C71E897DCFF4673630E7E2BCE26AE36659
	2EACBDAC676C4776397B9A63C729E34CC6DBC597C54F25D825EC4E984E7448AC
	489CE1BA70ABB92F923C93EA92E693FD930F257F4A094F694BC5A5C6A69EE4C9
	F09279BD69CA69D96983E9FAE985E9A36B6CD6EC5933CBF7E137654019AB32BA
	0454D1CF54BF5047B8453896699F5993F9262B2CEB44B674362FBB3F472F677B
	CE64AE7BEEB76B516B596B7BF254F336E58DAD735A57BF1E5A1FB7BE6783FA86
	820D131B3D361EDE44D894BCE9A77C93FCB2FC579BC337771728156C2C18DFE2
	B1A5A550A2905F38B2D5766BDD36D436EEB681EDE6DBABB67F2C62175D2D3629
	AE287E5FC22AB9FA8DE93795DF7CDA11BF63A0D4B274FF4ECC4EDECEE15D0EBB
	0E974997E5968DEFF6DBDD514E2F2F2A7FB52766CF958A6515757B097B857B47
	2B7D2BBBAA34AA7656BDAF4EACBE5DE35CD356AB58BBBD767E1F7BDFD07EC7FD
	AD754A75C575EF0E700FDCA9F7A8EF68D06AA83888399879F049635863DFB78C
	6F9B9B149A8A9B3E1CE21D1A3D1C74B8B7D9AAB9F988E291D216B845D8327D34
	FAE88DEF5CBFEB6A356CAD6FA3B5151F03C784C79E7E1FFBFDF0719FE33D2718
	275A7FD0FCA1B69DD25ED40175E474CC7626768E7645760D9EF43ED9D36DDBDD
	FEA3D18F874EA99EAA392D7BBAF40CE14CC1994F6773CFCE9D4B3F37733EE1FC
	784F4CCFFD0B11176EF506F60E5CF4B978F992FBA50B7D4E7D672FDB5D3E75C5
	E6CAC9AB8CAB9DD72CAF75F45BF4B7FF64F153FB80E540C775ABEB5D37AC6F74
	0F2E1F3C33E43074FEA6EBCD4BB7BC6E5DBBBDE2F6E070E8F09D91E891D13BEC
	3B537753EEBEB897796FE1FEC607E807450FA51E563C527CD4F0B3EECF6DA396
	A3A7C75CC7FA1F073FBE3FCE1A7FF64BC62FEF270A9E909F544CAA4C364F994D
	9D9A769FBEF174E5D38967E9CF16660A7F95FEB5F6B9CEF31F7E73FCAD7F3662
	76E205FFC5A7DF4B5ECABF3CF46AD9AB9EB980B947AF535F2FCC17BD917F73F8
	2DE36DDFBBF077930B59EFB1EF2B3FE87EE8FEE8F3F1C1A7D44F9FFE050398F3
	FC91C05ADB0000000467414D410000B18E7CFB5193000000206348524D00007A
	25000080830000F9FF000080E9000075300000EA6000003A980000176F925FC5
	4600002F114944415478DA62FCFFFF3FC32818380010404CA34130B000208046
	2360800140008D46C0000380001A8D8001060001341A01030C00026834020618
	0004D068040C300008A0D1081860001040A31130C00020805846830017F80F03
	A074CA044AA98C8C8C54B70520804623001FF8F3E7CFC78F1F7FFEFC292424C4
	CECE0E8C00484C50110004D068118433F9FFFBF7EFFEC3FBB1E98933E7CCBC7F
	FF3E301AFEC1001507D00002683402B00360623F7DEE744D7303C3AF3F77EFDD
	DF7760DFB367CFBE7FFF0ECC1390B8819090A8A2C42280001A2D82B083759B36
	2C5BB9ECCFCF5F323232CC2C6CBBF6EC121715373030E0E3E3E3E4E464636363
	0203601C30820124CE8000181F2455150001341A0158C0D459D3F6ECD9034CD8
	D2B232C062FFC1BD072C2CACA7CE9F7DFFF983B4A434304AF878788171C00214
	656585308081CECCCC8C1C196824BC6483E730080320801847E70390C1DFFFFF
	9ADB5B2E5CB8C0C2C8242BAFF0EDFBD7674F9EF00BF0CB2B2871B0B1FDF9FFF7
	DF9F7F7FFEFF66FCCF2C2E2A2A0684A2A232D2D21C6C1CC0980046033032800C
	6630604402F04087B7AC80B90722051040A3118000CF5E3C6BEFED7A78FF0137
	17B78CACCC9BD76FDEBE792D2121212327CBC1C1C1C4C4CCF0EF3F132B33A8EC
	FFFBFFCFDF5F3F7EFEFE0B02BF599858C4C4C5C58445C5C5C4A5A4A4D8401903
	9433209903121F907087D7E140114839061040A3110005E72E9E9F3475D2BB37
	EF0505F84524449F3F7EF9FDEB171905590949090E0E4E602206A5DF7FFF81ED
	D07F0CFF8039059C9C1918991981B1F20718097F7FFFFAF9F3CF2F10839D955D
	5A524A5A5A5A5E4E9E9F978F150C803101A9B42F5CBE088CE6E97D9365656581
	7100104043B80E80241DE47A0F4D84F8FA70F3F62D8B972DFDF1EDAB84949480
	80C083FBF7FEFCFAA7A8AA2C2E2ECECAC6C2044CBF7F41463332313200031D68
	2A0B900132FADF7F6025CCC00C54C1C2CCCAC2CAC00D6EBFFEFDFBE6DD9B27CF
	9F1D3E7E848D8D5D565A5A465246465A8683837DDBCEEDB7EEDCE666E700C607
	30EF00A3042080588662B8A3053A9C0B2F64E1918159E9618259F367EFDAB5FB
	DFDF3FB2B2F21CECECB7AEDF02869486A6AA809010B03C076904063AD37F4606
	26A0290CFFFE3240B302C87066462660810292656404BB80095CBC3001AB0276
	0EF6BFFF7880B1F1E2E58BBB77EF026B172E2EAE1F5FBFFFFAF603588773F370
	435C0510402C4334C923072E1A171EDCB8D423AB69EE6C397BF602309C959494
	7EFFFE73FBF61D7E015E0505057E0101601B870154F280D432FC63FACF00D60E
	AC3C817C20071807403381C2C0180046CD3F904AA0DC3F50F4409432B0308162
	85818D91899F999383F3F5AB57EFDEBDFFFDE7370F1F2F3B1B3BA4ED0410402C
	833999232770E486047220625580AC061EFA706510935FBD79D5D1D77DFFDE5D
	0E764E7939D90F9FDE3F7FFA525454445E519E97870FA80E14D20CC0140D2CB8
	41453F90048535282380B20490FA072A8E1880753330D441D9032403C92F8CD0
	186064F8FBE70FC3BF7F5C1C9CCF5FBC7CFFE60DD080576FDF1446C5003B13C0
	7A18A804208058066D4A474BDA58CB10CCE20859319E58B978E5D2E4E953DEBD
	7AC3CBC3036CE43C7BF6FCDDDB37D240969C2C17270723AC8D080D690606883B
	C071C0002C778019035CFE8032C87F60510ECA11C00A021409C0F802C6DC5FB0
	5B20042B07FB8B672FDEBF7B07E4BC7CFDAABCA8CCD6C606DE0C0508A0C1D20A
	420B387870A315239803067832045A34C04576EED9B568E9E2AF9FBF8B080B88
	4A883DBAFFF0DBB7EFB2F272C0A627B059C2C8082E4880491E54ED02CB937F20
	8A091CFE40DE1F609A676406650AA045CC906006356F60D630822201C4FCF3EB
	CFDFFF7F8195F0D3674F3FBC7B0F147EFEE2455951A9BDAD1DBCC6022A0308A0
	41110168CD15CC40C7AC6F31E30C331AB0E69E351BD7AC59B5E6D7EF5F121292
	7C7C7C77EEDC05B664949414C52524D8D95881610A6C6382E30094AAC141094C
	AA200623A8AC01357B18203902D40805114069A02038B9FF03379318414DFD3F
	7F806D5360EBF3E9D3A71F3F7C049664AF5FBF2E2B2CB7B1B646F33B40000DAE
	08400E625C0E43CB1C24E50F60E8AF5DBB1ED862079635CC6C2C776FDF616767
	575452161116013578989940C1CB042A74FE021B3BA03C002CF34165CB3F6864
	80CB77F0602850F4EF1F608833800A1D462648ACFC03374EFFFCFC0D8A0C66E6
	A74F9E7EFEFCF1EFDFFFAFDFBCAEA9A8B63033C7742440000DC68E185AFAC555
	BCE069F563D5B86EE3BAD5EBD7FEFAFE03D8C801D69FF7EFDE0536F9E59514F9
	F9F881250F03ACDE040626B0AFCA00350D5CBA338063025C2500031918A0CC4C
	8CA0B60F24F841153324BB804632FEFDFEC7C00CEA2B3C7AF4F0EB97AF4091B7
	6FDF5695565A989B63F52C40000DC64A18ADBEC5AC42D14A793C4D1D8846207B
	F586B5EBD6AFFBFDF3B782A21250F4EE9D5B62A2628ACA4A3CC0F638788E055A
	2E439A38A04287015C0D8002175E0183A20294B2C131035600EC3D003B06C0C2
	09A8ECCFBF7FA0360FB847F0E8F183AFDFBE01A3E3FDC7F70DD575468646B83C
	0B104083BA1F803C8C853FAFA0B582D00AA8D5EBD6ACDBB0F6F78FDF728AF2C0
	A0BA7DE78EA8A8980228F479806D4126507206B57640A5CB3F50370ADCC06484
	D6A9E0340EAA7441053C280E20B903D8E201766541B1C00CE99FFDFFF3E737B0
	D30C947DF8F0E1B7EFDF808D2360D3B6B6BC1A4FE8030140000DE1B120CCAA02
	930B2457AD5DBD7EE3BA9F3F80695F0ED87EB975EBB68888A8928A2237371713
	130B330BB80B0B2A4318C02D7C58D083A31254FA034B7350E904EA10403A07D0
	1E1828F9FF0315FBE0BCF1F3E72F165065C174FF01B04DF5F5EFDF3FC01C5059
	5C6E686088BF250D1040C367300EB34E063256AD5FB365CBA62F5FBFC9CBCA02
	43FFEEBD3B8282424ACACABCBCBCE061062644DB91113CB0030E68609E40E93B
	835BA0601E387A18A132E0DC01D2F5FBF72F666616A0C6FB0F1E7CFFF6EDEFEF
	BFDF7E7EAF2C29D7D7D3879460686D3CE41A0B208086CF9424F2C83B84BB62CD
	CA4D9B36FDF8F6534E468E8D95EDEEBD7B8242C24A4ACABC7C3CC07207180090
	E63BAC8C07B531810C6670E83342480648B5002EF059405360A0DEF03F503C01
	B30C6860991154F2B0B1B202D90FEE3FF8FEF5EBDFDF7F7EFEFA595154A6A3A5
	03CE4E8CC81515664B01208086DB8C18BC4A58B976D596AD5B7F7CFF262B2B07
	6C8FDFBC759B5F805F490958EE733183CA1D06C8480252A9C5081E6F600037E9
	19FEFFFD0F4EBBE061057006812863666201CF08FF03378D1881810D4AFB0C0C
	F7EFDFFFF1EDDBEF3FA0E1E8CAD20A6525E5BFFFFE323133618E94A075F50102
	68784ECAAF5CB77AF3B64DDFBE7F919691616165BE79EB261F3F9F8AB232370F
	0F0B0B2B13B83A85246D60F8FC87B67BFE436B03A02C68F509331303746C1954
	3B33827307346640610A6C5FFEFEF90B58AC31B330DFBF7BFFC7F7EFD0D02F2E
	57905780AE236260C42CF7D17A9D0001340C230058EB6ED9BAF9CBC72FB2D2B2
	EC6CEC776EDDE10786BE0A28F49998C1C33CA090070F9E31812A5550D5C908ED
	7381D327A86A05756E1920633E0CFFA19D3070E5FB1FBC34E83FC3EF5FBF8166
	B071B03D7AF80858EBFEFEFD07186555A5157272720CE0240FAAC0C1935F6823
	83C833F8400640000DB70858B56EF5A62DC0D0FF2C2F2FCFC9CD75EBE64D607D
	ABA2ACC2C3C7CBC20ACC0CCC905E2B6884073A84030A94BF903A978101BAE207
	3CF40C49E9E041B3FF90D2FC1F38528015EFAF3FBF80D21C1C9C4F1E3FFEF4F1
	E3EFDFBF81A15F5A502C2325C3001E9C00F724FEA34DCA230FBEC12306208086
	551DB07CF5F2CD9B377FFBF64D4E5E81938BE3C68DEB7C7C7C4A6AE092075852
	80AA50F0F0CD7F48FF96099A069940210B2A65FE211A8B4C900150702B13DC31
	06924095CCC032E9D7AF5FC072898B8BEBF9F3E76FDFBCFD0B9A92FC53965F26
	2E2EFE1F3A1EFD1F929198D998919B3D987D14200008A0E1930396AE5ABE7113
	24F4E5B9B8B96E5CBFC1CDC5A3A8A4C4CF27009A196782B4FC203EFF0719E984
	7468FF814A752684003433400A707081C3C4086D73FEFBFBEB2730B9FFE1E2E2
	7EF3E6F58BE7CF8151F9E9D3C7CCD44C4909497051C6C8CCC40CD1C5C6C60629
	82302B61643640000D930858B17A05B0E4F9F1FD07B008E6E5E1B971ED163085
	AA28ABF20BF2B38083E51F78C60AD29F0507103374780D9A26FF02B9C02CC2CC
	0C8922E8E42250C15F5075F08F091C1DC0CEEDEFBF7F803DB8F7EFDF3F79F204
	A8E6DDFBF7A989C9EA6AEAE00C06AADD81A632838726E06B4FB0B67FE0B10210
	40C3A1085AB96ED5F61D3B7E7EFB262323CBCDCB73FDDA756E6E4E1515150121
	60E8B300D32423525714D43A6400B78310A53DB818028D43FC03B74519C105CE
	5FF0AA3750C39F091C197FFFFE0736F0393938BE7FFFFEF0D12360CA7EF3FA55
	5868B8B1B109683403D46C62029B04623183AB7BE42A17D7C4064000B10CFDD0
	5FBD6DDBF6F7EF3FC8C848F30043FFEA354E764E05606F8B5F00D846040F6DFE
	03377C18A1A912D2DE87B428FFFD636664860E3DFC8374774115331324B53280
	C6DDFEFD054F00FFFDF7E7CF2F760EF63F7FFEDEBF771FC8F9F8E593AB8B9BAB
	B32B1B1B2BA41DCBCC020C4C50F207853F38F1A3F5BCB00E9F0004D0D08E8015
	6B576EDFB6FDEDFB7772D232C096FECDDB37D9D9399554950405045859C04394
	E0040D6A9930838303CC068FE1FC872CEE840CAC816759409D00D0F80F03B4EB
	059404AA640055CEFF7EFFF9C30C1ABB60BA7BFFDEF79F3F80FD3B035D83E080
	200E767606C87215702D01EC6400CB22489309D75C051A17208086700400FBBA
	DBB7EF0086BEB4A414BFA0C0CD9B375858D85555550405055981A912DCD5FA0F
	4B737FFF811B90C0FA1632A0006ED743FA63E09207D6ED6582F48141138E9001
	3A6015F0FB17B0BBCB0C0CDA5BB76E7DFDFAE5CF9F3F5292D23191519C9C9CA0
	EC052A734063AAA06A0014DF4C0C8C0CB8E6EF3087D9010268A84600B0BDBF75
	C78E776FDECA4A4B0B8808DEBC7E0B1844AA2A4A02C0D0676101873123A298FF
	076E9C333081570832C0863911132910A590FE00A417C5C0002C7A98C069FF17
	D0340E4E8EDBB76E7FF9FAE5DFFFBFECECECA9892902FC0240B3595959219D5E
	66508F9805EBA008D659557894000410D3104DFB5BB66FFFF0FA8DB4B4A480B0
	E0CD6BC0B4CFA4A2AA242C2CC2C6CA0A9E59047A0EBC660D5C06FD07274AF064
	222C4418A1F35CE07801F5BFFE82E7041898A0A39CA0953EFF41A10F0C265636
	B6870F1F7EFCF0115852FDFCF93B33255D425212B2301D12B2C00C07596342CC
	50155A35001040432F0296AF5E096CF300435F524A5A4454ECE68D5BC094ADA4
	AC2C242C0CACFD2073B8E03D5D204FFE05C704B80BF60FDA9F8244CE3FF01A43
	D024225011A80462865600CCD0A40A2C8AFEFC014A737270BD7CF9EADDEBB7C0
	5CF3E5DBA7CC943445454560770C14E82CC064CF025E5FC544FC9E00B48E3140
	000DB10858BE66C5F69D3BDEBD7C232129212C2672F3C6756050A9AA288B8A88
	B030B3829AF1E06E2D78351530F4C0490C91E6FFC3C7C6204B959940291E240E
	6CE0FF8774B6C0E307C08209280284EC9C9CEFDEBD7DF502D8E16278F3EE4D6C
	78ACB6963630B8D9D9D88151CCCAC20A2ED7989848DFBC078F0680001A4A75C0
	BA4DEB77ECDEF5E1DD5B5129711131D13B376E0213B2AAAAB2A8A80833641921
	0378510323643A8B8105940D40428C90B525A068017502C0398411D4C3029737
	CC900584A02628785121A8F3F507D8E3E5E2E2FCFCF9F393A74F80B26FDEBE0E
	F60DB430B780B4F721EBCB812CB4729F0C001040432602366EDDB479EBD6F7AF
	DF898A8A89898ADCB9791B58A6004B1E6029C4029ADB02D7B28CD0211C485304
	18C24CF04E1878490F789D3E23389CC1B91FDA48820CB4FD834CBAFF07CD70FD
	0636F97FFEFCF5F8C963608FECE3A7CF0ED6F62E4E2EC02A17A40DD4D4670637
	7CA8507E0004D0D088804DDB36AF5DBFE6C3BB2FA262A212E2E2C006C9AFDF7F
	9455958151012C78807D205073063C000919898484FE7F48D8830B1946D03032
	6440E23F3837FC83CF15FE874EEB82878580CD9E5FBF81B5EEBFBF7FEFDFBF07
	EC767DFBFA4347433BC03F808D9D0D58BEB1B1824860144096D652EE35800062
	1922A1BFEEE3FBCFA2A2C262A262776EDFFEF3FBB7928A22B0E4616365012D0E
	01AF470317F30CE0B94260F1CF005959F21F5ABA3042E2013CCA065D65081979
	038638786600ACE40F68941F54B53231DEB9F7E0D74F20F8058CE3E888286E2E
	6E68C7E2FF7FC86E006A6DDA0608A0C15E096FDABA69CDBA756FDFBE17151196
	9494B87BE70E308C149415C5C4C44049123AF808E9F93080D76C82F601813304
	A41C62020F7682E2E02FA8B9039EF9824CABFFFBFF0F96F841BC3FFFBEFDF80E
	CC25EC6C6CE0D9DD6FBFFEFC6663634D8A4B04F6B19920A10EEE72B1B2B23131
	522DDC0002886970A7FD4D6BD6AF07B643C4C544C5A5246FDDBEF3E3F74F0545
	051160DA07853E74A938A49FF51F5CAEFC8774702019029CCC21E340A0062613
	33744C1EA987C4C40859E1FFFFD79F9FC094CFC1CEFEE0C1C38F9F3F039B40BF
	FFFC4B494C151713870C5AB0B282767B814A1EAAFA112080066F11B4712BA8DC
	7FFFEEA3B8B0A8A4A4E4DDDBB77F7CFFA6ACAC2C2A2E0E4C98E0B29E05BC900A
	1CC80CD06584A0553B8CC0DE006823D73F48978A09BA960A1AEAA0EED85FF05C
	232374E4E12FE39FBFBF81B1C8CDCDF5E4C9B30F1FDE0123E9F397AF1929690A
	0AF20CE0FDA7C0C803363A21830ED4F52640000DD208D8B065E3BA0DEB3F7CF8
	2422242226050AFDAFDFBE2B2929494848B2B2B33333C1A655C1AD7E06E87E69
	7059CF041E5BFB0B1A4966024FE04257F4409797334047DFFEFF058F7D3282CB
	9E3F40F55C3C5CAF818DCDD7AF80EDD4F71FDF4687C7A8ABAB03439C053CB001
	29F45958A81F5C000134188BA08DC0D0DFB8FEC3BB0FC242C25252920F1FDCFF
	FAEDAB828282B884040BA82000CF2C8292F51F06C81A06682D0B1E54068D2AFC
	078D4180079E61A32E9091084606584E004B017B5BC066CE3F60F8737272BD7F
	FFE1D9D32740C3DE7E7CEFE3E16B6E66060E6E4648870B98F0A10BD3A90D0002
	8865F0A5FD4D1B366DFAF8EEBD88B0B08484F8BDFB77BF7EFD2A2BAF00AC8141
	83BDACD0817D48990362FD0536EFC14BC6C14D1926586F169CC699C033BD9041
	1B4648F083C788C0E311E0D92E60838A939BFBDBB72FCF1E3F0116541F3F7FB1
	B1B076727464636367008D02B1425A9C546CF6A0018000621964E5FEA68D9B37
	BD7BF35A484858424AEADEBDBBDFBE7E950786BE9424302C404B7540DDA8FF90
	F17D48DF1552B54282F7EFDFBFE0FA1224015E6408520E1D7784D7CAFF99610B
	3A41A1CFC1CEF9EBC78F7B0F1E00F3CE8FEF3F3454547DBC7C60474180BA0E90
	22888ACD1E340010402C832AF4376CDA082C8681258FA494D4FDBB77BF7C0196
	3CF2C092071822CCE08E0F6C1C0BDCEC04EF966680F45E21E529640D09B8E080
	2D3864042FAA85B484208B3BC199E6FFBF5F3F7FB1B373FCFEFBFBDEDDBBC016
	CFAF3F7F04858423C2C2393939C146819AB1C0A40F397A8076BE060820A6C153
	F2ACDFB4F1F54B50E84BCBC8DCBD77EFF3A7CF727232C05A9793931DDCE987CC
	2642960432409B9AE015B5FFFEC3173A41BA62A04AFA1F6491C97FE8262350B0
	FF852EF701C617683133A864677AF2E81130267E838E1B608A8F89E5E3E7070A
	8247F9995961073FD0D4E3000134282260D37660C9B3F1CDEBD72222C0D097BE
	7BFF2E28F415E4646464D839D8C093DCCC90DD8A90D60F1378CF1C13643728A8
	A9C3086DE080C3FD1FB86E6580EE6B61808C4B43B65383E617FFFEFFF50B18FA
	A06523A085FCDFBE01F3D1EFDFBF12E31285854440D38ACC2C90B3059898A830
	D64610000410D32048FB1B376ED8F8F6E56B217E0160E8DFBF77FFE3FB4FB2B2
	B2C052880DB4A59F19B247978909D28664808EFD82F744FC67804D6EFCFF0759
	3EC802D9ADC200DBA9FB1F3A2E04A90180B9E5E7AF9FC0E8E3E4E07EF4E4D187
	8F1F81D1F9E5D3A7D8C838191969502F97057AAE0390CD0EDAB744730010404C
	035EF26CDABA0558F208080AC8CACA3D7A009A78929591969693E1E0E4626286
	7676C1FD26D00CD73F5060324217DD333140FB53C8FBBBE03D600658B3FF1F03
	3378A12D50E7CF5FBF80025C9CDC2F5FBEF8F0E13D3067BDFBF03E3424545D55
	8D1552E200439F15D8D765A443DA870080006219D8D007B679DEBE7EC3C72F20
	272FFFE0E1FD776FDEC9C9C949CA4873737282C71C19A08BF4C1CB1740839DA0
	F8802D216482AC66004FA9FF87EE62019542A05E18A457CC0059DC095E57F21F
	58D0FF052DABE27EF3F6CDCB972F81A26F3FBCF174F13032346263071D2D0319
	69808C7752FD703E5C002080062C02D66FD9B079F3D6B72FDF0808F3C9CACA3F
	79F2E4DDDB773272B2C0D0E7E2E262040F6482560CFE870C23FC83CE3242C78D
	C18D20F0921D70B7F61FB4990F199263029FD600A9AD414B944153907FFE804E
	5AE2E6E6F9F4E9C3F3E7CF81AA3F7FFA62616C6E676B073DD28789891DD4D602
	CDA9D12DF903014000B10C54B9BF6DC7B637AF5F024B1E7939C5C74F1EBF7AF5
	525252464A46067C8802A4E50DAD6341E3F8E0FD288C88E59BFF21A30C9015E5
	D075E3FFE15B4A610B228035EE5FD0E669609EF8FDE737B0E4F9FEFDDBB327CF
	80823F7FFC505454F2F6F2069DD8C3CC0219E70156F6A01E00235D8B6580001A
	8008D8B865E3D61D5B9F3F7B21C0C727232FFBE8E1A3D7AF5E4A494BC9C84A71
	72B043965842C66D20CB2B21752923A4BE859DC10099CF6284164F9042093ACA
	0C0A787063F43F648EE50F680F17B0C9FFEBF78FC78F1E03F303B0FF2520C01F
	1A1C0ACC6A90556CC05E1E18D23BF48100208058E89FF6B76CDFF6EAF90B3E1E
	3E3979C5E7CF9EBD7CFD12D8F801B63881E50368A4E11F627932A44001F57B99
	20A30890B19D7FA02930F08A59C8E211C8691A2035FF20BB1C21A1F80F72BAE4
	9FDFBF40C53A03C3A3478F7FFEFE05AC0680F1151311CDC7CB0B8C3E760E7620
	00E60048EF97FEC911208098E89BF6376DDBB9E3C5F3E7BCBCBCF27272CF9F3F
	79FEECB9B424B0E091E1E2E6840CAB81B706FD8306357860F33F2324D5438772
	40A3CD907DEC90C627B887058AA67FE0DDEB4C2C90A122D0590DFFFEFDFAF593
	19D49D6579F8F0C1CF9F3FFEFEF90B6CF8C7C7C58B888802CB1D0E0E0EC8401B
	7C7D15FD01400031D133F48125CFB3A74F79B97981B5EE73603C3C7F0EECE802
	5B9CDC5CDCA0F92666C8563848BF16DC7B05357220535AE0F13370B3063C7B08
	6BA53082C73E99202B1EFE412605A039071807BF7F83861358599E3C7EF2EDC7
	37604DF0F1F37B60DA97959605460A305BB0409AFDAC6CB4186726120004109D
	2260C3D64DDB776E7BF1EC253F0FAFBC82FC2B603BFCC5730971497979192E4E
	4E602A6480745A21E507746DE53FC8AE214626D80A4BE8790D8CE095557FA1C3
	42B03DBE8CE0C510A0511E508C01D3FE6FA066764E8E172F5E7EFAFC11A8FCDD
	877721FEA16AAA6AE0595F50CDCBC1CEC10C8A09D6016C8B0304100B1DCBFDE7
	BC3CBCB20AF26F5EBE01E60309692960939F8B871BD4D705EFF8FF07DE3A04DE
	3ACA0C0D722606F8203CB8ADFF0F725400A41BCCC8045E03C4C8086C8F825B42
	B035B7FF197F033B5C0CFF39B938DEBC7EF3E1DD07A0AECF5F3EB83ABB191A18
	42DAFBC0B616B0FC01A6FF810D7D200008209A47C0961DDBC0A1FF92939B5B56
	4EEEF5EB378F9F3E121317939505B63839589820BBA8A007AEC1A64BC09DA87F
	8C501E741729302B30FF879E9AF19F899909BA7717BA1B1A620E6455CF9F7FA0
	F945EEF71F3FBC7EFD0AC8F9FAF58BB18189A39D03B0C6656303D7BB1CECE03E
	D700873E100004106D8BA09D7B766DDAB2E1F5F3573CDCDC0A72F2AFDFBC7EFA
	F891B8988482820217271768470378B70AF83C422678031E722A03648728E4C8
	18F0F13B1029702A879CEC009F9884267C50F003431F58D3028BB52F5F3EBF7C
	F61CB4BCF9F74F4505256F0F2F70A1CF0A8C0266F0EC3A903B18062201028886
	3960E7DE9D6B37AE7DF1E415173787AC9CCCFBF7EF9F3E7B22222A222B27CB03
	2C7980A9EF3F74091BE48406D811549021676079F217D2D1822C5B6384EC4D87
	1C2003EE73015B394CF0715030001D63FBE70F2717D78F9FA0263F302A7EFFFA
	CDCDC9151A18C4C1C9093940951D9C09585906CB44084000B1D02EEDAFDBB0EE
	C5B3175CDC5CF20A8A6FDFBF7BF2E8A18890889CAC3C3037308107D9415D5CF0
	9E21601832810F7A01EDA36002AFE484C6041364A909640317F4E036C80955B0
	3151706EF9F7FF2F48C19F5FBF81010D6CED3C7AF4E8F7DF3F90B39462A3E378
	78788121CE012AF63940C73BB30CA269288000A2895356AF5FB363D7AEE7CF9F
	F170F2C829C8BF7DF7EEC9E38742C2427272F23CBC3CC0CE3F6CAF1603645D02
	F82400F03205709F0A3C7EF01F793F2703E4705406666051FFEFEF5F06E83676
	26F0FE5EC8EE6AD06003E8E02B46C6FB0FEEFDFA096A027DFFFE352521555444
	1498E841BD2DF05027E87CDBC104000288FA11306DF6F413A74EBF79F98A8F9B
	475641F6DDFB77C04E9098B01830F47941DBD5992137B230B13042D667FE879C
	5205AE7B81A996859509B26B023473053EA813D2D0FC0FAA93FF410E7280AC3E
	01D7B8A09800D2C0100776239859989E3C7AFCE3C74FA09A8F1F3FC647C7C8C9
	814E2B00460C270727A4FC611864002080A81901C02678676FD795CB57DEBFFD
	C02FC42B2D2DFBE1DDFB470F1F8A8888C82AC8F1F0F1824B1EE8D638D028C13F
	C8D42B74F734B0086261816C66FFF79F0936EBC8088D05E8B24ED09803645212
	3662C1044AFC40338141FCF8F1E32FDFBE020D7CF3FE4D906F80BAAA1AB8C467
	E3E4E402D183A3D64503000144B50878F1EAE5A4A9931FDCBFF7E9D327215161
	492949D038CFF3E7C2C2A2B2F2723CBCA05218DC85850C183082CF45821C43C5
	045EC9093EAD077640306C4323B86700DB38011ED8078DBC8176D68166D6412A
	7F02D33BB0C9CFCDF5FCF98B8F9F3F016B914F5F3F3BDB3B191B19B3810A1E50
	F1036AEF320FD225680001441D675DB97665CE8279CF1E3EFDF6F3ABB8B884B0
	8808B02878FDF68D98981830F4F978F918216B3C20076530C297A7810B7868B3
	920932C3CE003A038F11BED20A34A0FFFF2F33686813B2F60132F0001E0562FC
	FFE7D71F6006E1E2E27EF7F63DB08D0B8CB6AFDFBE1A68EB39DA039BFCA0463F
	305B004BA0411BFA400010405470D9C1C30757AC5BFDF2E98BDFBFFFCAC8C8F1
	F3F3DDBDFBE0CB870F92D2E2B2B2F2C00E117846103AB508293DC027E9334202
	1ABC3E133CA8095E4BF81F7C562DA87F063EB3FC3F78C8015C1F4000B86903AE
	187E013B5CFFFF727070028BFB172F5E0095FEF8F9534652C6D3DD930DDCDDE2
	E6E2069283ADD645030001446904ACDDB86EE7EE5DC0E626305CE5E4819D5BEE
	9B376FFDF8F64D5A4E565A460A34E00E5ED40D3E9F8A09B205115CA433C156EE
	FCFFF787017E26CC7F7881F30FB2DE073ADBFB0F36120D597802CC00C016FE9F
	DFFF3838D87F7CFBFEECD933D084D7DFBFBC5C3C11A161DC3CDC3C3C3CA02627
	27C7200F7D200008208A2260D6BCD967CE9D79F1E4250B1B8BACAC2CB070B879
	E3DADFBFFF65151464242539B839C0A50E64792CE84880FF90338021CB16206D
	50C8DC3A7C090F7815C93F58ED0A56FE0FBC200EB1BC1648FEF9F30B580500DB
	F4C06ED793278F7FFFFC05DE15F03F36324640400018FAC0B40F1AEA611902DB
	4F0002887C2776F475DEBA75F3C5B357C0A6BD9CACCC8F1FBFEEDDBCC3C2C6A6
	A8282D262E0ECCFBA0D0879DE90B49EF901007D7C0A0417CC8FE2DF0D23526C8
	51264C90233B613D2CD0221460D3127C3E18647605B48D05D4DDFDCBC6C106E4
	3E7AF2F8E7EFDFC08AF9CBD71F6909491212129CC03CC8CD0D9AD7646266180A
	002080C8890060EDDA3FA5FFE1FD47EF3FBC151410969291FCF8E1C3FD078F78
	79B8E4E4E58505859859599960AD4546C8DA28D8121148AB1E345F081ADA8476
	A32087F383DAFAFFA12B79C0BB5CC0E51568A71D03744C027268C6AFDFECA02B
	75981E3D78F0E3FB0FA09A8F9FBE44874500B320B0CCE101A57F1E86A1030002
	88E408B87EF3FAECF9739F3E7BFEF9E37B6121312919A957CF9F3F7DF2545050
	405A465648588095850D3CCFCACC00DD84080E6366C8CC22EC906BF0B802784F
	2968933F64171DB8470C1D8E63801EA9060A7150CE009D5A029A61FFFDFB172B
	3B1BB03BFBE8C9A32F5F404DFE771F3FF87AF8A8ABA9717172019B5BC0F06718
	52002080488B80A3C78F2D5BBDECE5F317DFBEFD9614971215177DF4E8F1BBD7
	6F45444564E4647879F8C0AB689921DBAE2083F5902555B0C360C041CE0069DE
	408F6866F807BDF283898911B6A29F112A0D9E0003EA058D3083677781BD5960
	C5FBF4D9B38FEF3F020BAC0F1F3FDA5BD919191A02533DBF8000B0F021F522BB
	010700014442046CD8B271C7AE9D2F9E3F0326463919297E7E8107F71E008340
	445C4446569697878715BCA68C1152B53240CF81071F3D021E3E839DE202DDC7
	0E6FEA43378B4277B0303242C68518A083CED035FD0C7FFF00439F0558B83F7D
	FCF4EDBBB740C92FDFBEE8E9E83AD8D9F3F2F0F2F1F1718157350FADD0070280
	00223602662F9873F2E4C957AF5F3231B0C8CAC8727171DEBE7307D8DC149710
	979692E2E6E56101267CD8FC14646E1D7CC617A8CFC48C746A0BF8C01806C8BA
	5AE81003F8B871E829E590A30AC1D506686414528A31804EC5636101DD4BF4EC
	E9D377EFDF02757DFBF653465CCADBD30B58E6080A0A02C92117F41000104044
	4540F784DE6BD7AFBD7DFE1AD8AB9492930176AC6EDEBAF1EFCF3F4969196929
	09604F9F05B2900ABC96EA1FA4B5FE1FB27E9F8119723EF33FD8D1D8A0995B66
	C8900EE33FD87C0AE44854F0166A600B073AF30B5905F40FB4BE01683C3B3BFB
	B327CFDEBFFF0054FCF3D76F60633F2830989F8F5F485808D8E8A4DD85CBB406
	0001442002DE7F7CDF3769C283BBF75FBF79C7C3CD292B2BF3EBEFDF7BB7EF00
	834F464E4E5C5C949D831354E843A64A4047E9438EBB63801E74C7C4043BA40E
	D2CA074508E4360A660648C48007A699C0CB4FC0BB5F206BA1FF81230FD8FA04
	B679206B1780D5FE870FEF818A7EFFF90D04F1D1B1426000AC7BC15DE8FF03B5
	AE8442001040F822E0D6DDDBB3E6CD79F1ECE9BB771FF8F9B96565E5BF7EFB7C
	FFC1430E1636593959111111567676E8BE59583F96195A70836A546666C8D16C
	D005CD90A36298C0E747822E9163062758701DFB0F586A81BB5DB04A82819985
	11B47DEEEF5F66D00D99AC2F9EBFF8F0EE3DA8F7F0FB37B0E9191B192D2E262E
	2428085A450A3DFB73A81EFF0810403823E0F8A913CB57AD78F3F2D5E72F9F85
	858424A5245FBF7D0B6C6F024B5B60C1232C045AD8040C4D700B9311B2730534
	5BF2EF3F23F4E00C06C8753690C59CD0B38D606BFB199999E1E3A0B023E2415B
	47C1D300A0AE16E4AA1090FB5859806DDC8F1F3F4196147EFFFE2D322C425E4E
	1ED8E702BA04B2857A8896FE10001040D82360CB8EAD3B77ED78FEFCE58FEFDF
	C424C44545449F3E7D069A6311E49791911110E087DEA00B9E3E846CFAFC075D
	96095915F80FBCA0195C9B32410FE9873472FE4172CB5F483B8801717027A4EE
	005F4B019A9901ED27626065630136793F7DFE0454002C76BE7DFF161E18AA28
	AF282929091EE36386DFC6357423002080B044C0BC450B4E9D39F5EAE58B3FBF
	FF484A4A0B08F2033BBD1FDE7F101601ED5C14E0E363656383EECE0517EDE063
	18FE33332185336C8F0AE42C92FF0CF07B10C0C313E0156EA07570FF11C79A40
	1A41E0B40F3AB204B43D8889F9E58B971F3F7E0487FE9FEFDFBF870404292A2A
	02F3220FE8107416E8B187431C0004107A04F44DEABB71F3E6AB97AF81012223
	23C7C9CD79F7EEBD1F5FBF89498A48494AF1F0F2B23043EFB7849FB8005ED900
	6BC880A7CF9960077382CFC6039D02F6F7DF3F46F81D67FF415B56E0C7FA423A
	0C9065CFA0B4FFEF2F787B22D3CB172F80A1FF17B4D0E7CFE7AF5F82FD039595
	948111C0C1C10149FBC320F4810020801011F0F1D3A7AE095D406FBF7EF19A95
	99554A560A180CB76FDFFDF7EB97982430D94970717103C305B207147CE61A68
	F800729504036C7D1403E4D2574646F07C0913F8D65146D079608CD0DD15902D
	2FFFA0A7E7FD872D69069DA10A6AF6FCFD073EDB90F9D9D3E79F412766800EEC
	FCF6F973806F809AAA9A9C9C1C68392D78E7E2502F79E0002080586045F0FF5D
	BB769DBF7081858105D8A5949296FAF5FBD7BD5B778052E2C0B09710075F79C3
	04DFE40F1D326082F47BFF41CEB8FE0FBBC6127E422A78C61672083C789B2913
	E4D878E8095520F22F62D5FFDFBF7FC06780313D7B06DAC0058C0860B9FFE5CB
	97001F7F4D4D4DD071F4C00E07B8E41936A10F040001048D006070F0F3F3FFF9
	F5474C54444C4AFCE3874F8F9F3E6661620176B444444538383861E3634C9005
	68E063D79861E76080F2C4DFBFFFE00D7EE8200FACED033A85ED2F645D3F6415
	2823B4610AAD29C09DB6BFBF417B14D9806D9E671FDEBF0346E0EF5FBFBE7EFE
	E2EFE3ABADA5054CFBC0D0876D60671A36A10F040001C4C2005B56C6C6CEFAFE
	D307311191B76FDF3D7FF61498D9A5A5A5858485810CE82572C0506366005F99
	023BFE0576F835E47C66F07511E0BB109859C0CB95E12310FF21B2D0E60EB4C1
	043E1BF80F28DE80A10F5AB4C3CCFAF8F1E30F1F3F8062E5CFBFCF9F3F0578F9
	191A1802DB3CC0F6FE302B79E0002080A0F518D0575A1A5AF919B9FCFC82576F
	5C06B6C06564644544C5404B9DA073589053F121BBA5C1C7AE419BF4D0D207B2
	B013183DA0356EB0E63FA46CF9073E8F90117A57D17F70031F5C5BFF019640A0
	3D14A0728799F9D1E347EF3F7E00AD6DFEFBF7EDBBF77E1E3EFAFAFA903916C8
	DEDD213AD8801F000410F4846FD09151BF7E7D8380EFDFAE5CB972EAFC596072
	E6E5E183F81C3CB18E68B84352347CB806DC156302CFB7408E22FC071DCD87DF
	4887749919E44C01D08E763004752998989E3C79F2E9F30786BF0C7FFEFD7BF7
	F64DA07F90899131A4B7052979A0313DEC004000A15C6902A91B9960772B5EBD
	7E6DEB8E6DEF3FBCE7E3E563636305F78FFE33B14037A143EE5481CC2F42CE72
	F8F70F9E42914EACFEFF1F36160D6BBA8247804027A3FEFDCDCECE09D4FBF8E1
	43709BE7EF9FBF7F5EBF791F16186C626C0C2C7920E53EA4E41996A10F040001
	44F826BDE72F9EAFDFBCF1E183073CBC3CECEC1CE0E0861E4502DF060D5ED8F9
	1F9645A0371D8366BAFE41DB9EE0559FFF20D35D9015857FFEFC626367676604
	953C9F3F7D021D5FF2E3D7D72F5F4343C30CF50DC4C4C490437FF8953C700010
	40C45E65F8E3E78FB5EBD75DBA76998B0358237241320A3324E143630032FA09
	EC49410EE684B655A15D2DC8C1B5E0EDA4E0EB8E7FB3814EFF657CF4E8D1B7AF
	DF80529F3E7D666361090F0D57575717161686D7BAC335E1C3014000917C97E4
	B61DDB8F9C38026C32F2F381B67942A65F60ED4E06E825DDFF1818E177C43230
	C0EA01F011CDFFFF43421F28066CF37CFDFA159843DEBE7D232E2E1E1218AAA4
	A8282020000FFD6159EBA201800022F332CFA3C78FED39B0E7D7AFDF7CBCBCA0
	740A1E6C806E7181AC9A058D373083C6D4C0C34490D556A03DD37F7EB3B37100
	2B0560DAFFFAE50BB0B9F4F2F5331D2D3D3F2F1F292929212121C87A9E1112FA
	4000104014DDA67AFDE6F5ADDBB7BEFBF01ED856616765839CD00059750BE965
	FDF9FB17524F808EF10195FB7F38D939FE30FC7DFAE8F1E7AF5F81763F7BF6CC
	C1CEC1D5D9159803787979D9C1130CC3ACAF8B1F00041015AEB37DF1EAC5864D
	1B1F3E7EC0CDCDC3C9CE09BDFE185129FF8785FE6F60EA066694678F9F7CFE02
	6CF3FC7FF5FA858F878FBDAD3D30E1F3F1F101431F3EC2CC306200400051ED3E
	E19FBF7EAEDBB4FEC2C50B9C1C9CDCA0892A26D8710F7F419B85FEFD65636703
	E680A74F9E7DFDFEF5D7F71FEF3F7D8C080E037674454545C1B7FBB28EC0D007
	028000A2FE85CE5BB76F3B7EEA18B067CBC3C5033E311B743C1EE8B80C0E8E17
	CF9E7FFBFEFDCBA7CF7FFFFF8D0A8BD2D2D2023678B8B9B987EB300331002080
	6875A3F6D1134777EDD9FD0BBC86199819DEBC7A0D3E799FF1ED9BB7FC028211
	21614A8A4AC0920732CC3062431F0800028856110031F6ECF97393264F7C053A
	138B8F9383E3EDFB77AA4ACAFE3EFE727272828282F0E1E561DFD8C703000288
	8677CA437A5E6FDEBC59B868E1E933A75FBE79E3EAE8ECE9E101ECE5021BFBC8
	55EEC84CFB10001040348C000670A7F7D7AF5F1F3F7E7CF2E4C9E3274F343534
	E0BD5C78C21FC9A10F04000144DB08800E3F80170231C04EB68587FB080F7A08
	000820DA4600727D807CA3E868B8C3014000D1230246011E0010404CA34130B0
	002080462360800140008D46C0000380001A8D8001060001341A01030C000268
	340206180004D068040C300008A0D1081860001060008261EEBCB6067AB50000
	000049454E44AE426082
	]]>
</Picture>

<CalledMacros SectVersion="2" SectionFlags="0" SubIdent="0">
	<Macro>
		<MName><![CDATA["ui_ramp"]]></MName>
		<MainGUID>41B0596B-D42A-4AD7-A96C-81E4B7937150</MainGUID>
	</Macro>
	<Macro>
		<MName><![CDATA["FM_types"]]></MName>
		<MainGUID>2759D2DF-AA8E-44D1-AD1D-261581266B34</MainGUID>
	</Macro>
</CalledMacros>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_FWM SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
actualGUID = FROM_GUID

! ==============================================================================
! Subroutines
! ==============================================================================

	_autoID		= "2CF93B07-9957-4611-9CB4-15170506A575"
	_startID	= "52FFEB90-0CCF-42E3-8ADA-81C1BF5C7195"
	_endID		= "719387E9-73C2-4B45-87BF-898C67C079FA"
gosub "newparameters_FWM"

! ==============================================================================
! Set migration GUID
! ==============================================================================

setmigrationguid actualGUID

! ==============================================================================
end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! en
! ==============================================================================


! ==============================================================================
! newparameters
! ==============================================================================
"newparameters_FWM":
	if actualGuid = _startID | actualGuid = _autoID then

		bHas =	STORED_PAR_VALUE	("bDiffSides", _bDiffSides) &\

				STORED_PAR_VALUE	("widthUsable", _widthUsable) &\
				STORED_PAR_VALUE	("widthSideFlange1", _widthSideFlange1) &\
				STORED_PAR_VALUE	("bSideFlange1", _bSideFlange1) &\
				STORED_PAR_VALUE	("widthSideFlange2", _widthSideFlange2) &\

				STORED_PAR_VALUE	("widthSideFlange1_right", _widthSideFlange1_right) &\
				STORED_PAR_VALUE	("bSideFlange1_right", _bSideFlange1_right) &\
				STORED_PAR_VALUE	("widthSideFlange1_left", _widthSideFlange1_left) &\
				STORED_PAR_VALUE	("bSideFlange1_left", _bSideFlange1_left) &\

				STORED_PAR_VALUE	("widthSideFlange2_right", _widthSideFlange2_right) &\
				STORED_PAR_VALUE	("bSideFlange2_right", _bSideFlange2_right) &\
				STORED_PAR_VALUE	("widthSideFlange2_left", _widthSideFlange2_left) &\
				STORED_PAR_VALUE	("bSideFlange2_left", _bSideFlange2_left)
		if bHas then
			if not (bDiffSides) then
				B = _widthUsable + 2 * widthSideFlange1 * bSideFlange1 + 2 * widthSideFlange2 * bSideFlange2
			else
				B = _widthUsable + widthSideFlange1_right * bSideFlange1_right + widthSideFlange1_left * bSideFlange1_left +\
								  widthSideFlange2_right * bSideFlange2_right + widthSideFlange2_left * bSideFlange2_left
			endif
			parameters B = B
		endif

		iCalculationMethod = 3		! Dimensions
		parameters iCalculationMethod = iCalculationMethod

		bHas = 	DELETED_PAR_VALUE	("rise", _rise) &\
				DELETED_PAR_VALUE	("endRise ", _endRise) &\
				STORED_PAR_VALUE	("bAscent", _bAscent) &\
				STORED_PAR_VALUE	("lengthAscent", _lengthAscent)

		if bHas then
			percentage 			= _rise
			ascentPercentage 	= _endRise

			parameters 	percentage			= percentage,
						ascentPercentage 	= ascentPercentage

			heightAscent = _lengthAscent * ((2 - _bAscent) * _rise / 2) / 100

			parameters heightAscent = heightAscent

		endif

		bHas =	STORED_PAR_VALUE("iFloorPlanDisplayType", _iFloorPlanDisplayType)

		if _iFloorPlanDisplayType = 3 then	! Symbolic

			bHas =	STORED_PAR_VALUE("gs_cont_pen", _gs_cont_pen)
	
			if bHas then
				penBreakLineBelow 	= _gs_cont_pen
				penBreakLineAbove 	= _gs_cont_pen
				gs_cont_pen			= _gs_cont_pen
				overheadPen			= _gs_cont_pen

		
				parameters 	penBreakLineBelow 	= penBreakLineBelow,
							penBreakLineAbove 	= penBreakLineAbove,
							gs_cont_pen			= _gs_cont_pen,
							overheadPen			= overheadPen
			endif
	
			bHas =	STORED_PAR_VALUE("penArrow", _penArrow)
			if bHas then
				penStartSymbolBelow = _penArrow
				penStartSymbolAbove = _penArrow
				penEndSymbolBelow 	= _penArrow
				penEndSymbolAbove 	= _penArrow
				penWalkingBelow 	= _penArrow
				penWalkingAbove 	= _penArrow
		
				parameters 	penStartSymbolBelow = penStartSymbolBelow,
							penStartSymbolAbove = penStartSymbolAbove,
							penEndSymbolBelow 	= penEndSymbolBelow,
							penEndSymbolAbove 	= penEndSymbolAbove,
							penWalkingBelow 	= penWalkingBelow,
							penWalkingAbove 	= penWalkingAbove
			endif

			bHas =	DELETED_PAR_VALUE("symbolType2d_m", _symbolType2d_m) &\
					STORED_PAR_VALUE("lineCont", _lineCont) &\
					STORED_PAR_VALUE("lineDashed", _lineDashed)

			if bHas then
				if _symbolType2d_m = 1 then	! Dashed over Horizontal Cut
					bShowBreakline 		= 1
					lineCont 			= _lineCont	
					lineDashed 			= _lineDashed
					ltBreakLineBelow 	= _lineCont
					ltBreakLineAbove 	= _lineDashed
					ltWalkingBelow 		= _lineCont
					ltWalkingAbove 		= _lineDashed
				else
					lineCont 			= _lineCont	
					lineDashed 			= _lineCont
					ltBreakLineBelow 	= _lineCont
					ltBreakLineAbove 	= _lineCont
					ltWalkingBelow 		= _lineCont
					ltWalkingAbove 		= _lineCont
	
					if _symbolType2d_m = 2 then ! Horizontal Cut
						bShowBreakline = 1
					else	! Complete
						bShowBreakline = 0
					endif
				endif
			endif

			parameters 	bShowBreakline 		= bShowBreakline,
						lineCont 			= lineCont,
						lineDashed 			= lineDashed,	
						ltBreakLineBelow 	= ltBreakLineBelow,
						ltBreakLineAbove 	= ltBreakLineAbove,
						ltWalkingBelow 		= ltWalkingBelow,
						ltWalkingAbove 		= ltWalkingAbove

			bHas =	STORED_PAR_VALUE("arrowSize", _arrowSize)
			if bHas then
				arrowWidth	= _arrowSize * 2
				arrowHeight	= _arrowSize
				iEndSymbol	= 2

				parameters 	arrowWidth	= arrowWidth,
							arrowHeight	= arrowHeight,
							iEndSymbol	= iEndSymbol
			endif
		endif



		actualGuid = _endID
	endif
return

]]>
</Script_FWM>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_BWM SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
targetGUID = TO_GUID

! ==============================================================================
! Subroutines
! ==============================================================================

gosub "newparameters_BWM"

! ==============================================================================
! Set migration GUID
! ==============================================================================

setmigrationguid targetGuid

! ==============================================================================
end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! en
! ==============================================================================


! ==============================================================================
! newparameters
! ==============================================================================
"newparameters_BWM":
	if targetGUID # "" then

		if abs(percentage / 2 - ascentPercentage) < eps then
			newparameter "rise", 	"RealNum"
			newparameter "endRise", "RealNum"	

			rise = 100* ZZYZX/(a - lengthAscent * bAscent)
			parameters rise = rise
	
			endRise = rise/2
			parameters endRise = endRise
		else
			targetGuid = ""
		endif

		if iFloorPlanDisplayType = 3 then
			newparameter "symbolType2d_m", "Integer"

			if not(bShowBreakline) then
				symbolType2d_m = 3
			else
				if 	lineDashed 			= lineCont &\
					gs_cont_pen 		= overheadPen &\
					penEndSymbolBelow 	= penEndSymbolAbove &\
					penWalkingBelow 	= penWalkingAbove &\
					ltWalkingBelow 		= ltWalkingAbove &\
					penBreakLineBelow 	= penBreakLineAbove &\
					ltBreakLineBelow 	= ltBreakLineAbove then
	
					symbolType2d_m = 2
				else
					symbolType2d_m = 1
				endif
			endif
	
			parameters symbolType2d_m = symbolType2d_m
		endif

		parameters symbolType2d_m = symbolType2d_m

		if bShowText1 then
			if iTextType1 <> 1 then
				targetGuid = ""
			endif
		endif

		if bShowText2 then targetGuid = ""

	endif
return

]]>
</Script_BWM>

<MigrationTable SectVersion="1" SectionFlags="0" SubIdent="0">
	<MigrationTableElement>
		<MainGUID>2CF93B07-9957-4611-9CB4-15170506A575</MainGUID>
		<Version>19</Version>
		<Name><![CDATA[""]]></Name>
		<AutoMigration>false</AutoMigration>
	</MigrationTableElement>
	<MigrationTableElement>
		<MainGUID>52FFEB90-0CCF-42E3-8ADA-81C1BF5C7195</MainGUID>
		<Version>0</Version>
		<Name><![CDATA[""]]></Name>
		<AutoMigration>false</AutoMigration>
	</MigrationTableElement>
</MigrationTable>

<Copyright SectVersion="1" SectionFlags="0" SubIdent="0">
	<Author>GRAPHISOFT</Author>
	<License>
		<Type>CC BY-ND</Type>
		<Version>3.0</Version>
	</License>
</Copyright>

</Symbol>
