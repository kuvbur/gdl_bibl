<?xml version="1.0" encoding="UTF-8"?>
<Symbol IsArchivable="true" IsPlaceable="true" MainGUID="8BE008D2-89CE-4C9B-9499-57F482CC6000" MigrationValue="Normal" Owner="1196638531" Signature="1196644685" Version="43">
<Ancestry SectVersion="1" SectionFlags="0" SubIdent="0" Template="false">
	<MainGUID>F938E33A-329D-4A36-BE3E-85E126820996</MainGUID>
	<MainGUID>103E8D2C-8230-42E1-9597-46F84CCE28C0</MainGUID>
	<MainGUID>784EAEA1-5041-4AA6-B6F4-EF263A891EE7</MainGUID>
	<MainGUID>57B7C584-5C0D-11D6-A0D8-036F034B6792</MainGUID>
</Ancestry>

<MigrationTable SectVersion="1" SectionFlags="0" SubIdent="0">
	<MigrationTableElement>
		<MainGUID>6B0825C1-D6E5-41F2-9B77-1CE1AB0C80B6</MainGUID>
		<Version>19</Version>
		<Name><![CDATA[""]]></Name>
		<AutoMigration>true</AutoMigration>
	</MigrationTableElement>
</MigrationTable>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_3D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
if gs_detlevel_3D_m = 0 then END
if not(gs_shadow) then SHADOW OFF

pen gs_cont_pen

! ==============================================================================
! HOTSPOTS
! ==============================================================================
unID = 1

HOTSPOT 0,			gapToFirstTread,0,		unID,	flightWidth,1+128	: unID=unID+1
HOTSPOT -0.1,		gapToFirstTread,0,		unID,	flightWidth,3		: unID=unID+1
HOTSPOT flightWidth,gapToFirstTread,0,		unID,	flightWidth,2		: unID=unID+1

HOTSPOT a,			0,				0,		unID,	a,			1+128	: unID=unID+1
HOTSPOT a+0.1,		0,				0,		unID,	a,			3		: unID=unID+1
HOTSPOT 0,			0,				0,		unID,	a,			2		: unID=unID+1

HOTSPOT a,			0,				zzyzx,	unID,	b,			1+128	: unID=unID+1
HOTSPOT a,			-0.1,			zzyzx,	unID,	b,			3		: unID=unID+1
HOTSPOT a,			b,				zzyzx,	unID,	b,			2		: unID=unID+1

HOTSPOT 0,			b,				0,		unID,	b,			1+128	: unID=unID+1
HOTSPOT 0,			b+0.1,			0,		unID,	b,			3		: unID=unID+1
HOTSPOT 0,			0,				0,		unID,	b,			2		: unID=unID+1

HOTSPOT flightWidth+nRisers2ndRun*treadDepth,	b,				nRisers*treadHeight,unID,flightWidth,1+128	: unID=unID+1
HOTSPOT flightWidth+nRisers2ndRun*treadDepth,	b+0.1,			nRisers*treadHeight,unID,flightWidth,3		: unID=unID+1
HOTSPOT flightWidth+nRisers2ndRun*treadDepth,	b-flightWidth,	nRisers*treadHeight,unID,flightWidth,2		: unID=unID+1

HOTSPOT 0,			0,		nRisers1stRun*treadHeight,	unID,	b,	1+128	: unID=unID+1
HOTSPOT 0,			-0.1,	nRisers1stRun*treadHeight,	unID,	b,	3		: unID=unID+1
HOTSPOT 0,			b,		nRisers1stRun*treadHeight,	unID,	b,	2		: unID=unID+1

HOTSPOT a,			b,		nRisers1stRun*treadHeight,	unID,	a,	1+128	: unID=unID+1
HOTSPOT a+0.1,		b,		nRisers1stRun*treadHeight,	unID,	a,	3		: unID=unID+1
HOTSPOT 0,			b,		nRisers1stRun*treadHeight,	unID,	a,	2		: unID=unID+1

HOTSPOT a,	b,	0,		unID,	zzyzx,1+128	: unID=unID+1
HOTSPOT a,	b,	-0.1,	unID,	zzyzx,3		: unID=unID+1
HOTSPOT a,	b,	zzyzx,	unID,	zzyzx,2		: unID=unID+1

! ==============================================================================
! Concrete Base
! ==============================================================================

addy gapToFirstTread

if stairBaseType_m = 1 | stairBaseType_m = 3 THEN	! Concrete, None
	MATERIAL matBase
	SECT_FILL typeFillStringer, penBackFillStringer, penFillStringer, penLineStringer

	ROTx 90
	ROTy 90

	IF stairBaseType_m = 1 THEN		! Concrete
		PUT riserCoverThk,0,15
		FOR i=1 to nRisers1stRun-1
			PUT (i-1)*treadDepth+riserCoverThk,i*treadHeight-treadThickness,15,
				(i)*treadDepth+riserCoverThk,i*treadHeight-treadThickness,15
		NEXT i

		PUT (nRisers1stRun-1)*treadDepth+riserCoverThk,(nRisers1stRun-1)*treadHeight-treadThickness,10,
			(nRisers1stRun-1)*treadDepth+riserCoverThk,(nRisers1stRun)*treadHeight-treadThickness-stairSlabThk,8,
			nRisers1stRun*treadDepth+stairSlabThk*tan(ang/2),nRisers1stRun*treadHeight-treadThickness-stairSlabThk,15,
			(treadThickness+stairSlabThk)/sin(ang),0,15

		PRISM_ nsp/3,flightWidth,
			get(nsp)
	ENDIF

	IF ABS(riserCoverThk)>0.001 THEN
		FOR t=1 to nRisers1stRun
		ADD (t-1)*treadDepth,(t-1)*treadHeight,0
		MATERIAL matRiser
		SECT_FILL typeFillRiser, penBackFillRiser, penFillRiser, penLineRiser

		prism_ 4,flightWidth,
			0,0,15,
			riserCoverThk,0,15,
			riserCoverThk,treadHeight-treadThickness,15,
			0,treadHeight-treadThickness,15
		DEL 1
		Next t
		MATERIAL matBase
	ENDIF

	DEL 2

	! --- LANDING --------------------------------------------------------------
	IF stairBaseType_m = 1 THEN		! Concrete
		ADD 0,(nRisers1stRun-1)*treadDepth,(nRisers1stRun)*treadHeight-treadThickness-stairSlabThk
		SECT_FILL typeFillStringer, penBackFillStringer, penFillStringer, penLineStringer

		PRISM_ 6,stairSlabThk-treadHeight,
			0,riserCoverThk,8,
			flightWidth,riserCoverThk,8,
			flightWidth,stairSlabThk*tan(ang/2)+treadDepth,9,
			flightWidth,flightWidth,9,
			riserCoverThk,flightWidth,11,
			0,stairSlabThk*tan(ang/2)+treadDepth,8
		ADDz stairSlabThk-treadHeight
		PRISM_ 4,treadHeight,
			0,riserCoverThk,14,
			flightWidth,riserCoverThk,14,
			flightWidth,flightWidth,12,
			0,flightWidth,14
		DEL 2
	ENDIF

	! --- 2nd RUN --------------------------------------------------------------

	ADD flightWidth,(nRisers1stRun-1)*treadDepth,nRisers1stRun*treadHeight-treadThickness
	ROTx 90
	ADDz -flightWidth

	IF stairBaseType_m = 1 THEN		! Concrete
		PUT 0,-stairSlabThk,8,
			0,0,15,
			riserCoverThk,0,15

		covthicky_t=riserCoverThk
		FOR i=1 TO nRisers2ndRun-1
			PUT (i-1)*treadDepth+covthicky_t,i*treadHeight,15,
				(i)*treadDepth+covthicky_t,i*treadHeight,15
		NEXT i

		PUT (i-1)*treadDepth+covthicky_t,i*treadHeight,15,
			(i)*treadDepth,i*treadHeight,15

		PUT (nRisers2ndRun)*treadDepth,(nRisers2ndRun)*treadHeight-treadThickness-stairSlabThk,8,
			nRisers2ndRun*treadDepth,nRisers2ndRun*treadHeight-treadThickness-stairSlabThk,15

		PRISM_ nsp/3,flightWidth,
			get(nsp)
	ENDIF

	IF ABS(riserCoverThk)>0.001 THEN
		FOR t=1 to nRisers2ndRun
		ADD (t-1)*treadDepth,(t-1)*treadHeight+treadThickness,0
		MATERIAL matRiser
		SECT_FILL typeFillRiser, penBackFillRiser, penFillRiser, penLineRiser

		prism_ 4,flightWidth,
			0,0,15,
			riserCoverThk,0,15,
			riserCoverThk,treadHeight-treadThickness,15,
			0,treadHeight-treadThickness,15
		DEL 1
		Next t
		MATERIAL matBase
	ENDIF

	DEL 3
ENDIF

! ==============================================================================
! Wood Base
! ==============================================================================

IF stairBaseType_m = 2 THEN		! Wood
	MATERIAL matBase
	SECT_FILL typeFillStringer, penBackFillStringer, penFillStringer, penLineStringer

	ROTx 90
	ROTy 90

	PUT 0,0,15
	FOR i=1 to nRisers1stRun-1
		PUT (i-1)*treadDepth+riserCoverThk,i*treadHeight-treadThickness,15,
			(i)*treadDepth+riserCoverThk,i*treadHeight-treadThickness,15
	NEXT i

	PUT (nRisers1stRun-1)*treadDepth+riserCoverThk,(nRisers1stRun-1)*treadHeight-treadThickness,10,
		(nRisers1stRun-1)*treadDepth+riserCoverThk,(nRisers1stRun)*treadHeight-treadThickness-stairSlabThk,8,
		nRisers1stRun*treadDepth+stairSlabThk*tan(ang/2),nRisers1stRun*treadHeight-treadThickness-stairSlabThk,15,
		(treadThickness+stairSlabThk)/sin(ang),0,15

	ADDz woodBaseOffset
	PRISM_ nsp/3,woodBaseThk,
		use(nsp)
	DEL 1

	ADDz flightWidth-woodBaseOffset-woodBaseThk
	PRISM_ nsp/3,woodBaseThk,
		get(nsp)
	DEL 1

	IF ABS(riserCoverThk)>0.001 THEN
		FOR t=1 to nRisers1stRun
		ADD (t-1)*treadDepth,(t-1)*treadHeight,0
		MATERIAL matRiser
		SECT_FILL typeFillRiser, penBackFillRiser, penFillRiser, penLineRiser

		prism_ 4,flightWidth,
			0,0,15,
			riserCoverThk,0,15,
			riserCoverThk,treadHeight-treadThickness,15,
			0,treadHeight-treadThickness,15
		DEL 1
		Next t
		MATERIAL matBase
	ENDIF

	DEL 2

	! --- LANDING --------------------------------------------------------------

	SECT_FILL typeFillStringer, penBackFillStringer, penFillStringer, penLineStringer

	ADD 0,(nRisers1stRun-1)*treadDepth,(nRisers1stRun)*treadHeight-treadThickness-stairSlabThk
	PRISM_ 6,stairSlabThk-treadHeight,
		woodBaseOffset,0,8,
		woodBaseOffset+woodBaseThk,0,8,
		woodBaseOffset+woodBaseThk,stairSlabThk*tan(ang/2)+treadDepth,9,
		woodBaseOffset+woodBaseThk,flightWidth,11,
		woodBaseOffset,flightWidth,11,
		woodBaseOffset,stairSlabThk*tan(ang/2)+treadDepth,8

	PRISM_ 6,stairSlabThk-treadHeight,
		flightWidth-woodBaseOffset-woodBaseThk,0,8,
		flightWidth-woodBaseOffset,0,8,
		flightWidth-woodBaseOffset,stairSlabThk*tan(ang/2)+treadDepth,9,
		flightWidth-woodBaseOffset,flightWidth,11,
		flightWidth-woodBaseOffset-woodBaseThk,flightWidth,11,
		flightWidth-woodBaseOffset-woodBaseThk,stairSlabThk*tan(ang/2)+treadDepth,8

	ADDz stairSlabThk-treadHeight
	PRISM_ 4,treadHeight,
		woodBaseOffset,+riserCoverThk,14,
		woodBaseOffset+woodBaseThk,+riserCoverThk,14,
		woodBaseOffset+woodBaseThk,flightWidth,14,
		woodBaseOffset,flightWidth,14

	PRISM_ 4,treadHeight,
		flightWidth-woodBaseOffset-woodBaseThk,+riserCoverThk,14,
		flightWidth-woodBaseOffset,+riserCoverThk,14,
		flightWidth-woodBaseOffset,flightWidth,14,
		flightWidth-woodBaseOffset-woodBaseThk,flightWidth,14

	DEL 2

	! --- 2nd RUN --------------------------------------------------------------

	ADD flightWidth,(nRisers1stRun-1)*treadDepth,nRisers1stRun*treadHeight-treadThickness
	ROTx 90
	ADDz -flightWidth

	PUT 0,-stairSlabThk,15,
		-woodBaseOffset,-stairSlabThk,15,
		-woodBaseOffset,0,15,
		0,0,15

	covthicky_t=riserCoverThk
	FOR i=1 TO nRisers2ndRun-1
		PUT (i-1)*treadDepth+covthicky_t,i*treadHeight,15,
			(i)*treadDepth+covthicky_t,i*treadHeight,15
	NEXT i
	PUT (i-1)*treadDepth+covthicky_t,i*treadHeight,15,
		(i)*treadDepth,i*treadHeight,15

	PUT (nRisers2ndRun)*treadDepth,(nRisers2ndRun)*treadHeight-treadThickness-stairSlabThk,8,
		nRisers2ndRun*treadDepth,nRisers2ndRun*treadHeight-treadThickness-stairSlabThk,15

	ADDz woodBaseOffset
	PRISM_ nsp/3,woodBaseThk,
		use(nsp)
	DEL 1
	ADDz flightWidth-woodBaseOffset-woodBaseThk
	PRISM_ nsp/3,woodBaseThk,
		get(nsp)
	DEL 1

	IF ABS(riserCoverThk)>0.001 THEN
		FOR t=1 to nRisers2ndRun
		ADD (t-1)*treadDepth,(t-1)*treadHeight+treadThickness,0
		MATERIAL matRiser
		SECT_FILL typeFillRiser, penBackFillRiser, penFillRiser, penLineRiser

		prism_ 4,flightWidth,
			0,0,15,
			riserCoverThk,0,15,
			riserCoverThk,treadHeight-treadThickness,15,
			0,treadHeight-treadThickness,15
		DEL 1
		Next t
		MATERIAL matBase
	ENDIF

	DEL 3
ENDIF


! ==============================================================================
! Treads
! ==============================================================================

SECT_FILL typeFillTread, penBackFillTread, penFillTread, penLineTread
MATERIAL matTread

if treadThickness > EPS then
	! --- 1st run --------------------------------------------------------------
	for i = 1 to nRisers1stRun-1
		ADD 0,-nosing+(i-1)*treadDepth,(i*treadHeight)-treadThickness
		base
		BLOCK flightWidth,treadDepth+nosing+riserCoverThk,treadThickness
		vert 0, 0, 0 !#1
		vert 1, 0, 0 !#2
		vert 0, 1, 0 !#3
		vert 0, 0, 1 !#4
		coor 2, -1, -2,-3, -4
		body -1

		DEL 1
	next i

	! --- treads on Landing ----------------------------------------------------

	ADD 0,-nosing+(nRisers1stRun-1)*treadDepth,nRisers1stRun*treadHeight-treadThickness
	base
	BLOCK flightWidth+riserCoverThk,flightWidth+nosing,treadThickness
	vert 0, 0, 0 !#1
	vert 1, 0, 0 !#2
	vert 0, 1, 0 !#3
	vert 0, 0, 1 !#4
	coor 2, -1, -2,-3, -4
	body -1
	DEL 1

	! --- 2nd run --------------------------------------------------------------

	ADD flightWidth,b-gapToFirstTread,(nRisers1stRun)*treadHeight-treadThickness
	ROTz -90
	covthicky_t=riserCoverThk
	for i = 1 to nRisers2ndRun
		if i = nRisers2ndRun then covthicky_t=0
		ADD 0,-nosing+(i-1)*treadDepth,(i*treadHeight)
		base
		BLOCK flightWidth,treadDepth+nosing+covthicky_t,treadThickness
		vert 0, 0, 0 !#1
		vert 1, 0, 0 !#2
		vert 0, 1, 0 !#3
		vert 0, 0, 1 !#4
		coor 2, -1, -2,-3, -4
		body -1
		del 1
	next i
	del 2
ENDIF


! ==============================================================================
! HANDRAILS
! ==============================================================================

material matPost

! ------------------------------------------------------------------------------
! Left rail
! ------------------------------------------------------------------------------

IF rail_m = 3 | rail_m = 1 then		! Left, Both
	if bSameRails then
		leftRailType_m = rightRailType_m
		leftWireType_m = rightWireType_m
	endif

	ADD leftRailOffset+leftRailFrameThk/2,-leftRailOvhgBottom,-leftRailOvhgBottom*tan(ang)+treadHeight
	ROTz 90

	lraSimple=(nRisers1stRun-1)*treadDepth+leftRailOvhgBottom
	lraComplex=(nRisers1stRun-2)*treadDepth
	additionXComplex=leftRailOvhgBottom+treadDepth/2
	additionZComplex=leftRailOvhgBottom*tan(ang)
	hrovL=treadDepth/2+leftRailOvhgBottom
	hrovR=treadDepth/2
	postNumber = int(nRisers1stRun/2+EPS)
	railAngle	= ang
	side = SIDE_LEFT
	gosub "callRailsForStair"

	DEL 2


	! --- POST & Rail on the landing (left side_1) -----------------------------

	ADD leftRailOffset+leftRailFrameThk/2,(nRisers1stRun-1)*treadDepth,(nRisers1stRun)*treadHeight
	ROTz 90

	lraSimple=flightWidth-leftRailOffset-leftRailFrameThk
	lraComplex=flightWidth-leftRailOffset-leftRailFrameThk
	hrovL=leftRailPostSize/2
	hrovR=-leftRailPostSize/2
	postNumber = (flightWidth-leftRailOffset-leftRailFrameThk)*2 + 1
	side = SIDE_LEFT
	railAngle	= ang
	gosub "callRailsForLanding"

	DEL 2


	! --- POST & Rail on the landing (left side_2) -----------------------------

	ADD leftRailOffset,b-leftRailOffset-leftRailFrameThk/2-gapToFirstTread,(nRisers1stRun)*treadHeight

	lraSimple=flightWidth-leftRailOffset-treadDepth
	lraComplex=flightWidth-leftRailOffset-treadDepth-leftRailPostSize
	hrovL=leftRailPostSize/2
	hrovR=leftRailPostSize/2
	postNumber = (flightWidth-leftRailOffset-treadDepth)*2 + 1
	side = SIDE_LEFT
	railAngle	= ang
	gosub "callRailsForLanding"

	DEL 1


	! ---  Rail on 2nd Run -----------------------------------------------------

	ADD flightWidth-treadDepth,b-leftRailOffset-leftRailFrameThk/2-gapToFirstTread,(nRisers1stRun)*treadHeight

	lraSimple=(nRisers2ndRun+1)*treadDepth+leftRailOvhgTop
	lraComplex=(nRisers2ndRun)*treadDepth
	additionXComplex=treadDepth/2
	additionZComplex=0
	hrovL=treadDepth/2
	hrovR=treadDepth/2+leftRailOvhgTop
	postNumber = int(nRisers2ndRun/2+EPS) + 1
	side = SIDE_LEFT
	railAngle	= ang
	gosub "callRailsForStair"

	DEL 1


	! ---   HOTSPOTS -----------------------------------------------------------
	if bSameRails then
		! Bottom side
		HOTSPOT rightRailFrameThk/2+rightRailOffset,0,treadHeight+rightRailDist+rightRailHeight-rightRailOvhgBottom*tan(ang),unID,rightRailOvhgBottom, 1+128		: unID=unID+1
		HOTSPOT rightRailFrameThk/2+rightRailOffset,flightWidth-rightRailFrameThk/2-rightRailOffset,treadHeight+rightRailDist+rightRailHeight-rightRailOvhgBottom*tan(ang),unID,rightRailOvhgBottom, 3		: unID=unID+1
		HOTSPOT rightRailFrameThk/2+rightRailOffset,-rightRailOvhgBottom,treadHeight+rightRailDist+rightRailHeight-rightRailOvhgBottom*tan(ang),unID,rightRailOvhgBottom, 2		: unID=unID+1

		HOTSPOT rightRailFrameThk/2,-rightRailOvhgBottom,treadHeight+rightRailDist-rightRailOvhgBottom*tan(ang),unID,rightRailOffset, 1+128		: unID=unID+1
		HOTSPOT rightRailFrameThk/2+0.1,-rightRailOvhgBottom,treadHeight+rightRailDist-rightRailOvhgBottom*tan(ang),unID,rightRailOffset, 3		: unID=unID+1
		HOTSPOT rightRailFrameThk/2+rightRailOffset,-rightRailOvhgBottom,treadHeight+rightRailDist-rightRailOvhgBottom*tan(ang),unID,rightRailOffset, 2		: unID=unID+1

		HOTSPOT rightRailFrameThk/2+rightRailOffset,-rightRailOvhgBottom,treadHeight-rightRailOvhgBottom*tan(ang),unID,rightRailDist, 1+128		: unID=unID+1
		HOTSPOT rightRailFrameThk/2+rightRailOffset,-rightRailOvhgBottom,treadHeight-0.1-rightRailOvhgBottom*tan(ang),unID,rightRailDist, 3		: unID=unID+1
		HOTSPOT rightRailFrameThk/2+rightRailOffset,-rightRailOvhgBottom,treadHeight+rightRailDist-rightRailOvhgBottom*tan(ang),unID,rightRailDist, 2		: unID=unID+1

		HOTSPOT rightRailFrameThk/2+rightRailOffset,-rightRailOvhgBottom,treadHeight-rightRailOvhgBottom*tan(ang)+rightRailDist,unID,rightRailHeight, 1+128		: unID=unID+1
		HOTSPOT rightRailFrameThk/2+rightRailOffset,-rightRailOvhgBottom,treadHeight-rightRailOvhgBottom*tan(ang)+rightRailDist-0.1,unID,rightRailHeight, 3		: unID=unID+1
		HOTSPOT rightRailFrameThk/2+rightRailOffset,-rightRailOvhgBottom,treadHeight-rightRailOvhgBottom*tan(ang)+rightRailDist+rightRailHeight,unID,rightRailHeight, 2	: unID=unID+1

		! Top side
		HOTSPOT flightWidth+nRisers2ndRun*treadDepth,b-gapToFirstTread-rightRailFrameThk/2-rightRailOffset,(nRisers+1)*treadHeight+rightRailOvhgTop*tan(ang)+rightRailHeight+rightRailDist,unID,rightRailOvhgTop, 1+128			: unID=unID+1
		HOTSPOT flightWidth+nRisers2ndRun*treadDepth-0.1,b-gapToFirstTread-rightRailFrameThk/2-rightRailOffset,(nRisers+1)*treadHeight+rightRailOvhgTop*tan(ang)+rightRailHeight+rightRailDist,unID,rightRailOvhgTop, 3			: unID=unID+1
		HOTSPOT flightWidth+nRisers2ndRun*treadDepth+rightRailOvhgTop,b-gapToFirstTread-rightRailFrameThk/2-rightRailOffset,(nRisers+1)*treadHeight+rightRailOvhgTop*tan(ang)+rightRailHeight+rightRailDist,unID,rightRailOvhgTop, 2			: unID=unID+1

		HOTSPOT flightWidth+nRisers2ndRun*treadDepth+rightRailOvhgTop,b-gapToFirstTread-rightRailFrameThk/2,(nRisers+1)*treadHeight+rightRailDist+rightRailOvhgTop*tan(ang),unID,rightRailOffset, 1+128		: unID=unID+1
		HOTSPOT flightWidth+nRisers2ndRun*treadDepth+rightRailOvhgTop,b-gapToFirstTread-rightRailFrameThk/2-0.1,(nRisers+1)*treadHeight+rightRailDist+rightRailOvhgTop*tan(ang),unID,rightRailOffset, 3		: unID=unID+1
		HOTSPOT flightWidth+nRisers2ndRun*treadDepth+rightRailOvhgTop,b-gapToFirstTread-rightRailFrameThk/2-rightRailOffset,(nRisers+1)*treadHeight+rightRailDist+rightRailOvhgTop*tan(ang),unID,rightRailOffset, 2		: unID=unID+1

		HOTSPOT flightWidth+nRisers2ndRun*treadDepth+rightRailOvhgTop,b-gapToFirstTread-rightRailFrameThk/2-rightRailOffset,(nRisers+1)*treadHeight+(rightRailOvhgTop)*tan(ang),unID,rightRailDist, 1+128		: unID=unID+1
		HOTSPOT flightWidth+nRisers2ndRun*treadDepth+rightRailOvhgTop,b-gapToFirstTread-rightRailFrameThk/2-rightRailOffset,(nRisers+1)*treadHeight+(rightRailOvhgTop)*tan(ang)-0.1,unID,rightRailDist, 3		: unID=unID+1
		HOTSPOT flightWidth+nRisers2ndRun*treadDepth+rightRailOvhgTop,b-gapToFirstTread-rightRailFrameThk/2-rightRailOffset,(nRisers+1)*treadHeight+(rightRailOvhgTop)*tan(ang)+rightRailDist,unID,rightRailDist, 2		: unID=unID+1

		HOTSPOT flightWidth+nRisers2ndRun*treadDepth+rightRailOvhgTop,b-gapToFirstTread-rightRailFrameThk/2-rightRailOffset,(nRisers+1)*treadHeight+rightRailOvhgTop*tan(ang)+rightRailDist,unID,rightRailHeight, 1+128			: unID=unID+1
		HOTSPOT flightWidth+nRisers2ndRun*treadDepth+rightRailOvhgTop,b-gapToFirstTread-rightRailFrameThk/2-rightRailOffset,(nRisers+1)*treadHeight+rightRailOvhgTop*tan(ang)+rightRailDist-0.1,unID,rightRailHeight, 3			: unID=unID+1
		HOTSPOT flightWidth+nRisers2ndRun*treadDepth+rightRailOvhgTop,b-gapToFirstTread-rightRailFrameThk/2-rightRailOffset,(nRisers+1)*treadHeight+rightRailOvhgTop*tan(ang)+rightRailHeight+rightRailDist,unID,rightRailHeight, 2			: unID=unID+1
	else
		! Bottom side
		HOTSPOT leftRailFrameThk/2+leftRailOffset,0,treadHeight+leftRailDist+leftRailHeight-leftRailOvhgBottom*tan(ang),unID,leftRailOvhgBottom, 1+128		: unID=unID+1
		HOTSPOT leftRailFrameThk/2+leftRailOffset,flightWidth-leftRailFrameThk/2-leftRailOffset,treadHeight+leftRailDist+leftRailHeight-leftRailOvhgBottom*tan(ang),unID,leftRailOvhgBottom, 3		: unID=unID+1
		HOTSPOT leftRailFrameThk/2+leftRailOffset,-leftRailOvhgBottom,treadHeight+leftRailDist+leftRailHeight-leftRailOvhgBottom*tan(ang),unID,leftRailOvhgBottom, 2		: unID=unID+1

		HOTSPOT leftRailFrameThk/2,-leftRailOvhgBottom,treadHeight+leftRailDist-leftRailOvhgBottom*tan(ang),unID,leftRailOffset, 1+128		: unID=unID+1
		HOTSPOT leftRailFrameThk/2+0.1,-leftRailOvhgBottom,treadHeight+leftRailDist-leftRailOvhgBottom*tan(ang),unID,leftRailOffset, 3		: unID=unID+1
		HOTSPOT leftRailFrameThk/2+leftRailOffset,-leftRailOvhgBottom,treadHeight+leftRailDist-leftRailOvhgBottom*tan(ang),unID,leftRailOffset, 2		: unID=unID+1

		HOTSPOT leftRailFrameThk/2+leftRailOffset,-leftRailOvhgBottom,treadHeight-leftRailOvhgBottom*tan(ang),unID,leftRailDist, 1+128		: unID=unID+1
		HOTSPOT leftRailFrameThk/2+leftRailOffset,-leftRailOvhgBottom,treadHeight-0.1-leftRailOvhgBottom*tan(ang),unID,leftRailDist, 3		: unID=unID+1
		HOTSPOT leftRailFrameThk/2+leftRailOffset,-leftRailOvhgBottom,treadHeight+leftRailDist-leftRailOvhgBottom*tan(ang),unID,leftRailDist, 2		: unID=unID+1

		HOTSPOT leftRailFrameThk/2+leftRailOffset,-leftRailOvhgBottom,treadHeight-leftRailOvhgBottom*tan(ang)+leftRailDist,unID,leftRailHeight, 1+128		: unID=unID+1
		HOTSPOT leftRailFrameThk/2+leftRailOffset,-leftRailOvhgBottom,treadHeight-leftRailOvhgBottom*tan(ang)+leftRailDist-0.1,unID,leftRailHeight, 3		: unID=unID+1
		HOTSPOT leftRailFrameThk/2+leftRailOffset,-leftRailOvhgBottom,treadHeight-leftRailOvhgBottom*tan(ang)+leftRailDist+leftRailHeight,unID,leftRailHeight, 2	: unID=unID+1

		! Top side
		HOTSPOT flightWidth+nRisers2ndRun*treadDepth,b-gapToFirstTread-leftRailFrameThk/2-leftRailOffset,(nRisers+1)*treadHeight+leftRailOvhgTop*tan(ang)+leftRailHeight+leftRailDist,unID,leftRailOvhgTop, 1+128			: unID=unID+1
		HOTSPOT flightWidth+nRisers2ndRun*treadDepth-0.1,b-gapToFirstTread-leftRailFrameThk/2-leftRailOffset,(nRisers+1)*treadHeight+leftRailOvhgTop*tan(ang)+leftRailHeight+leftRailDist,unID,leftRailOvhgTop, 3			: unID=unID+1
		HOTSPOT flightWidth+nRisers2ndRun*treadDepth+leftRailOvhgTop,b-gapToFirstTread-leftRailFrameThk/2-leftRailOffset,(nRisers+1)*treadHeight+leftRailOvhgTop*tan(ang)+leftRailHeight+leftRailDist,unID,leftRailOvhgTop, 2			: unID=unID+1

		HOTSPOT flightWidth+nRisers2ndRun*treadDepth+leftRailOvhgTop,b-gapToFirstTread-leftRailFrameThk/2,(nRisers+1)*treadHeight+leftRailDist+leftRailOvhgTop*tan(ang),unID,leftRailOffset, 1+128		: unID=unID+1
		HOTSPOT flightWidth+nRisers2ndRun*treadDepth+leftRailOvhgTop,b-gapToFirstTread-leftRailFrameThk/2-0.1,(nRisers+1)*treadHeight+leftRailDist+leftRailOvhgTop*tan(ang),unID,leftRailOffset, 3		: unID=unID+1
		HOTSPOT flightWidth+nRisers2ndRun*treadDepth+leftRailOvhgTop,b-gapToFirstTread-leftRailFrameThk/2-leftRailOffset,(nRisers+1)*treadHeight+leftRailDist+leftRailOvhgTop*tan(ang),unID,leftRailOffset, 2		: unID=unID+1

		HOTSPOT flightWidth+nRisers2ndRun*treadDepth+leftRailOvhgTop,b-gapToFirstTread-leftRailFrameThk/2-leftRailOffset,(nRisers+1)*treadHeight+(leftRailOvhgTop)*tan(ang),unID,leftRailDist, 1+128		: unID=unID+1
		HOTSPOT flightWidth+nRisers2ndRun*treadDepth+leftRailOvhgTop,b-gapToFirstTread-leftRailFrameThk/2-leftRailOffset,(nRisers+1)*treadHeight+(leftRailOvhgTop)*tan(ang)-0.1,unID,leftRailDist, 3		: unID=unID+1
		HOTSPOT flightWidth+nRisers2ndRun*treadDepth+leftRailOvhgTop,b-gapToFirstTread-leftRailFrameThk/2-leftRailOffset,(nRisers+1)*treadHeight+(leftRailOvhgTop)*tan(ang)+leftRailDist,unID,leftRailDist, 2		: unID=unID+1

		HOTSPOT flightWidth+nRisers2ndRun*treadDepth+leftRailOvhgTop,b-gapToFirstTread-leftRailFrameThk/2-leftRailOffset,(nRisers+1)*treadHeight+leftRailOvhgTop*tan(ang)+leftRailDist,unID,leftRailHeight, 1+128			: unID=unID+1
		HOTSPOT flightWidth+nRisers2ndRun*treadDepth+leftRailOvhgTop,b-gapToFirstTread-leftRailFrameThk/2-leftRailOffset,(nRisers+1)*treadHeight+leftRailOvhgTop*tan(ang)+leftRailDist-0.1,unID,leftRailHeight, 3			: unID=unID+1
		HOTSPOT flightWidth+nRisers2ndRun*treadDepth+leftRailOvhgTop,b-gapToFirstTread-leftRailFrameThk/2-leftRailOffset,(nRisers+1)*treadHeight+leftRailOvhgTop*tan(ang)+leftRailHeight+leftRailDist,unID,leftRailHeight, 2			: unID=unID+1
	endif
ENDIF


! ------------------------------------------------------------------------------
! Right rail
! ------------------------------------------------------------------------------

IF rail_m = 2 | rail_m = 1 then		! Right, Both

	ADD flightWidth-rightRailOffset-rightRailFrameThk/2,-rightRailOvhgBottom,-rightRailOvhgBottom*tan(ang)+treadHeight
	ROTz 90

	lraSimple=(nRisers1stRun-1)*treadDepth+rightRailOvhgBottom+min(0,rightRailOffset)
	lraComplex=(nRisers1stRun-2)*treadDepth+min(0,rightRailOffset)
	additionXComplex=rightRailOvhgBottom+treadDepth/2
	additionZComplex=rightRailOvhgBottom*tan(ang)
	hrovL=treadDepth/2+rightRailOvhgBottom
	hrovR=treadDepth/2
	postNumber = int(nRisers1stRun/2+EPS)
	railAngle	= ang
	side = SIDE_RIGHT
	gosub "callRailsForStair"

	DEL 2

	! --- POST & Rail on the landing (right side_1) ----------------------------

	IF rightRailOffset<rightRailFrameThk then
		ADD flightWidth-rightRailFrameThk-rightRailOffset,(nRisers1stRun-1)*treadDepth+rightRailOffset,(nRisers1stRun)*treadHeight+min(0,rightRailOffset*tan(ang))
		MATERIAL matPost
		BLOCK rightRailFrameThk,rightRailFrameThk,rightRailHeight+2*treadDepth*tan(ang)-min(rightRailOffset*tan(ang),treadHeight)-min(0,rightRailOffset*tan(ang))
		DEL 1
	ENDIF

	IF rightRailOffset>0.05 THEN
		IF rightRailOffset<0.2 THEN
			IF rightRailType_m = 3 | rightRailType_m = 7 | rightRailType_m = 8 | rightRailType_m = 9 | rightRailType_m = 10 THEN
				hight=rightRailFrameThk
				if rightRailType_m = 3 then hight=0.025
				ADD flightWidth-rightRailOffset,(nRisers1stRun-1)*treadDepth,(nRisers1stRun)*treadHeight+rightRailHeight+rightRailDist-hight
				ROTz 90
				MATERIAL matHandrail
				BLOCK rightRailOffset,rightRailFrameThk,hight
				DEL 2
			ELSE
				IF rightRailType_m = 2 THEN
					ADD flightWidth-rightRailOffset-rightRailFrameThk/2,(nRisers1stRun-1)*treadDepth,(nRisers1stRun)*treadHeight
					ROTz 90
					lraSimple=rightRailOffset
					lraComplex=rightRailOffset
					additionXComplex=0
					additionZComplex=0
					hrovL=0
					hrovR=0
					postNumber = int(nRisers1stRun/2+EPS)
					railAngle	= ang
					side = SIDE_RIGHT
					gosub "callRailsForStair"
					DEL 2
				ELSE
					ADD flightWidth-rightRailOffset,(nRisers1stRun-1)*treadDepth,(nRisers1stRun)*treadHeight+rightRailDist
					ROTz 90
					MATERIAL matHandrail
					BLOCK rightRailOffset,rightRailFrameThk,rightRailHeight
					DEL 2
				ENDIF
			ENDIF
		ELSE
			ADD flightWidth-rightRailOffset-rightRailFrameThk/2,(nRisers1stRun-1)*treadDepth,(nRisers1stRun)*treadHeight
			ROTz 90
			IF rightRailType_m = 1 & not(rightRailOffset>0.1) THEN
				! nothing !
			ELSE
				IF rightRailType_m = 8 | rightRailType_m = 9 | rightRailType_m = 10 THEN
					ADD 0,-rightRailFrameThk/2,rightRailDist+rightRailHeight-rightRailFrameThk
					MATERIAL matHandrail
					IF rightRailOffset>0 then BLOCK rightRailOffset,rightRailFrameThk,rightRailFrameThk
					DEL 1
				ELSE
					lraSimple=rightRailOffset
					lraComplex=rightRailOffset
					hrovL=rightRailPostSize/2
					hrovR=-rightRailPostSize/2
					postNumber = rightRailOffset*2
					railAngle	= ang
					side = SIDE_RIGHT
					gosub "callRailsForLanding"
				ENDIF
			ENDIF
			DEL 2
		ENDIF
	ENDIF

	! --- POST & Rail on the landing (right side_2) ----------------------------

	IF rightRailOffset*tan(ang)>treadHeight THEN
		IF rightRailOffset<0.2 & rightRailOffset>0.05 THEN
			IF rightRailType_m = 3 | rightRailType_m = 7 | rightRailType_m = 8 | rightRailType_m = 9 | rightRailType_m = 10 THEN
				hight=rightRailFrameThk
				if rightRailType_m = 3 then hight=0.025
				ADD flightWidth-rightRailOffset,(nRisers1stRun-1)*treadDepth+rightRailOffset,(nRisers1stRun)*treadHeight+rightRailHeight+rightRailDist-hight
				ROTz 0
				MATERIAL matHandrail
				BLOCK rightRailOffset,rightRailFrameThk,hight
				DEL 2
			ELSE
				IF rightRailType_m = 2 THEN
					ADD flightWidth-rightRailOffset-rightRailFrameThk/2,(nRisers1stRun-1)*treadDepth,(nRisers1stRun)*treadHeight
					ROTz 90
					lraSimple=rightRailOffset-treadDepth
					lraComplex=rightRailOffset-treadDepth
					additionXComplex=0
					additionZComplex=0
					hrovL=0
					hrovR=0
					postNumber = int(nRisers1stRun/2+EPS)
					railAngle	= ang
					side = SIDE_RIGHT
					gosub "callRailsForStair"
					DEL 2
				ELSE
					ADD flightWidth-rightRailOffset,(nRisers1stRun-1)*treadDepth,(nRisers1stRun)*treadHeight+rightRailDist
					ROTz 90
					MATERIAL matHandrail
					BLOCK rightRailOffset,rightRailFrameThk,rightRailHeight
					DEL 2
				ENDIF
			ENDIF
		ELSE
			ADD flightWidth-rightRailOffset,(nRisers1stRun-1)*treadDepth+rightRailOffset+rightRailFrameThk/2,(nRisers1stRun)*treadHeight
			ROTz 0
			IF rightRailOffset>treadDepth+0.08 & rightRailOffset-treadDepth>2*rightRailFrameThk+0.001 then
				IF rightRailType_m = 8 | rightRailType_m = 9 | rightRailType_m = 10 THEN
					ADD 0,-rightRailFrameThk/2,rightRailDist+rightRailHeight-rightRailFrameThk
					MATERIAL matHandrail
					BLOCK rightRailOffset-treadDepth,rightRailFrameThk,rightRailFrameThk
					DEL 1
				else
					lraSimple=rightRailOffset	! rightRailOffset-treadDepth ???
					lraComplex=rightRailOffset-treadDepth
					hrovL=-rightRailPostSize/2
					hrovR=rightRailPostSize/2
					postNumber = rightRailOffset*2
					railAngle	= ang
					side = SIDE_RIGHT
					gosub "callRailsForLanding"
				ENDIF
			ENDIF
			DEL 2
		ENDIF
	ENDIF


	! --- Railing on the 2nd run -----------------------------------------------

	ADD flightWidth-min(rightRailOffset,treadDepth),(nRisers1stRun-1)*treadDepth+rightRailFrameThk/2+rightRailOffset,(nRisers1stRun+1)*treadHeight-min(rightRailOffset,treadDepth)*tan(ang)
	ROTz 0

	lraSimple=(nRisers2ndRun)*treadDepth+min(rightRailOffset,treadDepth)+rightRailOvhgTop
	lraComplex=(nRisers2ndRun-1)*treadDepth
	additionXComplex=treadDepth/2+min(rightRailOffset,treadDepth)
	additionZComplex=min(rightRailOffset*tan(ang),treadHeight)
	hrovL=treadDepth/2+min(rightRailOffset,treadDepth)
	hrovR=treadDepth/2+rightRailOvhgTop
	postNumber = int(nRisers2ndRun/2+EPS) + 1
	railAngle	= ang
	side = SIDE_RIGHT
	gosub "callRailsForStair"

	DEL 2


	! --- HOTSPOTS -------------------------------------------------------------

	! Bottom side
	HOTSPOT flightWidth-rightRailFrameThk/2-rightRailOffset,0,treadHeight+rightRailDist+rightRailHeight-rightRailOvhgBottom*tan(ang),unID,rightRailOvhgBottom, 1+128		: unID=unID+1
	HOTSPOT flightWidth-rightRailFrameThk/2-rightRailOffset,0+0.1,treadHeight+rightRailDist+rightRailHeight-rightRailOvhgBottom*tan(ang),unID,rightRailOvhgBottom, 3		: unID=unID+1
	HOTSPOT flightWidth-rightRailFrameThk/2-rightRailOffset,0-rightRailOvhgBottom,treadHeight+rightRailDist+rightRailHeight-rightRailOvhgBottom*tan(ang),unID,rightRailOvhgBottom, 2		: unID=unID+1

	HOTSPOT flightWidth-rightRailFrameThk/2,0-rightRailOvhgBottom,treadHeight+rightRailDist-rightRailOvhgBottom*tan(ang),unID,rightRailOffset, 1+128		: unID=unID+1
	HOTSPOT flightWidth-rightRailFrameThk/2-0.1,0-rightRailOvhgBottom,treadHeight+rightRailDist-rightRailOvhgBottom*tan(ang),unID,rightRailOffset, 3		: unID=unID+1
	HOTSPOT flightWidth-rightRailFrameThk/2-rightRailOffset,0-rightRailOvhgBottom,treadHeight+rightRailDist-rightRailOvhgBottom*tan(ang),unID,rightRailOffset, 2		: unID=unID+1

	HOTSPOT flightWidth-rightRailFrameThk/2-rightRailOffset,0-rightRailOvhgBottom,treadHeight-rightRailOvhgBottom*tan(ang),unID,rightRailDist, 1+128		: unID=unID+1
	HOTSPOT flightWidth-rightRailFrameThk/2-rightRailOffset,0-rightRailOvhgBottom,treadHeight-0.1-rightRailOvhgBottom*tan(ang),unID,rightRailDist, 3		: unID=unID+1
	HOTSPOT flightWidth-rightRailFrameThk/2-rightRailOffset,0-rightRailOvhgBottom,treadHeight+rightRailDist-rightRailOvhgBottom*tan(ang),unID,rightRailDist, 2		: unID=unID+1

	HOTSPOT flightWidth-rightRailFrameThk/2-rightRailOffset,0-rightRailOvhgBottom,treadHeight-rightRailOvhgBottom*tan(ang)+rightRailDist,unID,rightRailHeight, 1+128		: unID=unID+1
	HOTSPOT flightWidth-rightRailFrameThk/2-rightRailOffset,0-rightRailOvhgBottom,treadHeight-rightRailOvhgBottom*tan(ang)+rightRailDist-0.1,unID,rightRailHeight, 3		: unID=unID+1
	HOTSPOT flightWidth-rightRailFrameThk/2-rightRailOffset,0-rightRailOvhgBottom,treadHeight-rightRailOvhgBottom*tan(ang)+rightRailDist+rightRailHeight,unID,rightRailHeight, 2	: unID=unID+1

	! Top side
	HOTSPOT flightWidth+nRisers2ndRun*treadDepth,b-flightWidth+rightRailFrameThk/2+rightRailOffset-gapToFirstTread,(nRisers+1)*treadHeight+rightRailOvhgTop*tan(ang)+rightRailHeight+rightRailDist,unID,rightRailOvhgTop, 1+128			: unID=unID+1
	HOTSPOT flightWidth+nRisers2ndRun*treadDepth-0.1,b-flightWidth+rightRailFrameThk/2+rightRailOffset-gapToFirstTread,(nRisers+1)*treadHeight+rightRailOvhgTop*tan(ang)+rightRailHeight+rightRailDist,unID,rightRailOvhgTop, 3			: unID=unID+1
	HOTSPOT flightWidth+nRisers2ndRun*treadDepth+rightRailOvhgTop,b-flightWidth+rightRailFrameThk/2+rightRailOffset-gapToFirstTread,(nRisers+1)*treadHeight+rightRailOvhgTop*tan(ang)+rightRailHeight+rightRailDist,unID,rightRailOvhgTop, 2			: unID=unID+1

	HOTSPOT flightWidth+nRisers2ndRun*treadDepth+rightRailOvhgTop,b-flightWidth+rightRailFrameThk/2-gapToFirstTread,(nRisers+1)*treadHeight+rightRailDist+rightRailOvhgTop*tan(ang),unID,rightRailOffset, 1+128		: unID=unID+1
	HOTSPOT flightWidth+nRisers2ndRun*treadDepth+rightRailOvhgTop,b-flightWidth+rightRailFrameThk/2+0.1-gapToFirstTread,(nRisers+1)*treadHeight+rightRailDist+rightRailOvhgTop*tan(ang),unID,rightRailOffset, 3		: unID=unID+1
	HOTSPOT flightWidth+nRisers2ndRun*treadDepth+rightRailOvhgTop,b-flightWidth+rightRailFrameThk/2+rightRailOffset-gapToFirstTread,(nRisers+1)*treadHeight+rightRailDist+rightRailOvhgTop*tan(ang),unID,rightRailOffset, 2		: unID=unID+1

	HOTSPOT flightWidth+nRisers2ndRun*treadDepth+rightRailOvhgTop,b-flightWidth+rightRailFrameThk/2+rightRailOffset-gapToFirstTread,(nRisers+1)*treadHeight+(rightRailOvhgTop)*tan(ang),unID,rightRailDist, 1+128		: unID=unID+1
	HOTSPOT flightWidth+nRisers2ndRun*treadDepth+rightRailOvhgTop,b-flightWidth+rightRailFrameThk/2+rightRailOffset-gapToFirstTread,(nRisers+1)*treadHeight+(rightRailOvhgTop)*tan(ang)-0.1,unID,rightRailDist, 3		: unID=unID+1
	HOTSPOT flightWidth+nRisers2ndRun*treadDepth+rightRailOvhgTop,b-flightWidth+rightRailFrameThk/2+rightRailOffset-gapToFirstTread,(nRisers+1)*treadHeight+(rightRailOvhgTop)*tan(ang)+rightRailDist,unID,rightRailDist, 2		: unID=unID+1

	HOTSPOT flightWidth+nRisers2ndRun*treadDepth+rightRailOvhgTop,b-flightWidth+rightRailFrameThk/2+rightRailOffset-gapToFirstTread,(nRisers+1)*treadHeight+rightRailOvhgTop*tan(ang)+rightRailDist,unID,rightRailHeight, 1+128			: unID=unID+1
	HOTSPOT flightWidth+nRisers2ndRun*treadDepth+rightRailOvhgTop,b-flightWidth+rightRailFrameThk/2+rightRailOffset-gapToFirstTread,(nRisers+1)*treadHeight+rightRailOvhgTop*tan(ang)+rightRailDist-0.1,unID,rightRailHeight, 3			: unID=unID+1
	HOTSPOT flightWidth+nRisers2ndRun*treadDepth+rightRailOvhgTop,b-flightWidth+rightRailFrameThk/2+rightRailOffset-gapToFirstTread,(nRisers+1)*treadHeight+rightRailOvhgTop*tan(ang)+rightRailHeight+rightRailDist,unID,rightRailHeight, 2			: unID=unID+1

ENDIF

DEL 1


end


! ==============================================================================
"callRailsForStair":
! ------------------------------------------------------------------------------
!	lraSimple
!	lraComplex
!	additionXComplex
!	additionZComplex
!	hrovL: rail overhang start
!	hrovR: rail overhang end
!	postNumber:   number of posts
!	side: SIDE_LEFT or SIDE_RIGHT
! ==============================================================================
	ani = railAngle
	additionXComplex = additionXComplex
	additionZComplex = additionZComplex
	if side = SIDE_LEFT then
		dsComplex = leftRailDist+treadDepth/2*tan(ang)
	else
		dsComplex = rightRailDist+treadDepth/2*tan(ang)
	endif

	gosub "callRails"
return


! ==============================================================================
"callRailsForLanding":
! ------------------------------------------------------------------------------
!	lraSimple
!	lraComplex
!	hrovL: rail overhang start
!	hrovR: rail overhang end
!	postNumber:   number of posts
!	side: SIDE_LEFT or SIDE_RIGHT
! ==============================================================================
	ani = 0
	additionZComplex = 0
	if side = SIDE_LEFT then
		additionXComplex = leftRailPostSize/2
		dsComplex = leftRailDist
	else
		additionXComplex = rightRailPostSize/2
		dsComplex = rightRailDist
	endif

	gosub "callRails"
return


! ==============================================================================
"callRails":
! ------------------------------------------------------------------------------
!	ani
!	additionXComplex
!	additionZComplex
!	dsComplex
!  ------------------
!	side: SIDE_LEFT or SIDE_RIGHT
!	lraSimple
!	lraComplex
!	hrovL: rail overhang start
!	hrovR: rail overhang end
!	postNumber:   number of posts
! ==============================================================================
	if side = SIDE_LEFT then
		railBarDepth		= leftRailBarDepth
		railBarDiam			= railBarDepth
		railHeight			= leftRailHeight
		railBarFillThk		= leftRailBarThk
		railFrameThk		= leftRailFrameThk
		railDist			= leftRailDist
		railType_m			= leftRailType_m
		railPostSize		= leftRailPostSize
		barNumber			= nBarsLeftRail
		railWireType		= leftWireType_m
		if leftRailType_m = RAIL_WIRED then
			railBarThk		= leftRailWireThk
			railBarDepth	= leftRailWireDepth
			railBarDiam		= leftRailWireDiam
		endif
	else
		railBarDepth		= rightRailBarDepth
		railBarDiam			= railBarDepth
		railHeight			= rightRailHeight
		railBarFillThk		= rightRailBarThk
		railFrameThk		= rightRailFrameThk
		railDist			= rightRailDist
		railType_m			= rightRailType_m
		railPostSize		= rightRailPostSize
		barNumber			= nBarsRightRail
		railWireType		= rightWireType_m
		if rightRailType_m = RAIL_WIRED then
			railBarThk		= rightRailWireThk
			railBarDepth	= rightRailWireDepth
			railBarDiam		= rightRailWireDiam
		endif
	endif

	call "stairRails_m" parameters	railType_m				= railType_m,
									iStairType				= 1,
									bEnableWired02Rail		= 0,
									bEnableNonVerticalRail	= 0,
									additionXComplex		= additionXComplex,
									additionZComplex		= additionZComplex,
									ptyp_m					= 1,
									ani						= ani,
									ab						= 0,
									rb						= 0,
									rom_m					= 1,
									rmm_m					= 1,
									lraSimple				= lraSimple,
									lraComplex				= lraComplex,
									railHeight				= railHeight,
									railHeightComplex		= dsComplex,
									railDist				= railDist,
									gs_detlevel_3D_m		= gs_detlevel_3D_m,
									gs_cont_pen				= gs_cont_pen,
									res						= res,
									rescs					= rescs,
									gs_shadow				= gs_shadow,

									railFrameThk			= railFrameThk,
									railBarDepth			= railBarDepth,
									railBarFillThk			= railBarFillThk,
									railBarDiam				= railBarDiam,
									balusterDist			= treadDepth,
									railFrameMat			= matBar,
									railBaluFillMat			= matSurface,
									barNumber				= barNumber,
									hrovL					= hrovL,
									hrovR					= hrovR,
									railHandrailMat			= matHandrail,
									iBalusterStyle			= railWireType,
									railPostDiam			= railPostSize,
									railPostWidth			= railPostSize,
									railPostThk				= railFrameThk,
									postNumber				= postNumber,
									railPostMat				= matPost

return
]]>
</Script_3D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_2D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[

! ---------- Hotspots ----------[
	unID = 1
	FlightUNID		= 2
	RailUNID		= 100
	StartSymbUNID	= 200
	ArrowUNID		= 300
	RiseRunUNID		= 400
	UpDownUNID		= 500
	NumUnID			= 600

hotspot2 0,0, unID: unID=unID+1

! ---------- Hotspots ----------]

dim drawPart[3] ! 1 - lower,  2 - upper,  3 - full
dim drawDashed[3] ! 1 - lower,  2 - upper,  3 - full
dim drawSteps[3] ! 1 - lower,  2 - upper,  3 - full
dim drawDetails[3] ! 1 - lower,  2 - upper,  3 - full

drawPart[1] = 0		! Lower
drawPart[2] = 0		! Upper
drawPart[3] = 0		! Full
drawDashed[1] = 0	! Lower
drawDashed[2] = 0	! Upper
drawDashed[3] = 0	! Full
drawSteps[1] = 0	! Lower
drawSteps[2] = 0	! Upper
drawSteps[3] = 0	! Full
drawDetails[1] = 0	! Lower
drawDetails[2] = 0	! Upper
drawDetails[3] = 0	! Full
drawNum = 0


abovestory = 0
belowstory = 0
if bStorySensitive then
	if GLOB_CH_STORY_DIST > EPS  then
		abovestory = 1
	else
		if GLOB_CH_STORY_DIST < -EPS  then
			belowstory = 1
		endif
	endif
endif

bCarriageLineExist		= bShowCarriage and bEnableCarriageLine and (GLOB_SCALE <= iShowCarriageUpTo | iShowCarriageUpTo = 1)

! ---------- Settings of 2D Symbol Type ----------
_iSymbolType = 1
_bShowRailIn2D = 1
if gs_detlevel_2D_m = DET2D_SCALESENSITIVE then
	if GLOB_SCALE <= _iScaleMD then									!! Detailed Scale
		_iSymbolType = iEnabledSymbolTypes[iSymbolGroup][3]
	else
		if GLOB_SCALE > _iScaleMD & GLOB_SCALE <= _iScaleSM then	!! Middle Scale
			_iSymbolType = iEnabledSymbolTypes[iSymbolGroup][2]
		else														!! Simple Scale
			_iSymbolType = iEnabledSymbolTypes[iSymbolGroup][1]
			_bShowRailIn2D = 0
		endif
	endif
else
	_iSymbolType = gs_SymbolType_m
endif

IF _iSymbolType = 1 THEN		! Type 1
	drawPart[3]	= 1		! Full
	drawDashed[3] = 1	! Full
ENDIF

IF _iSymbolType = 2 THEN		! Type 2
	drawPart[3]	= 1		! Full
ENDIF

IF _iSymbolType = 3 THEN		! Type 3
	drawPart[1]	= 1		! Lower
ENDIF

IF _iSymbolType = 4 THEN		! Type 4
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
	drawDashed[2] = 1	! Upper
ENDIF

IF _iSymbolType = 5 THEN		! Type 5
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
ENDIF

IF _iSymbolType = 6 THEN		! Type 6
	drawPart[3]	= 1		! Full
	drawDashed[3] = 1	! Full
	drawSteps[3] = 1	! Full
	drawNum = bShowNumbering
ENDIF

IF _iSymbolType = 7 THEN		! Type 7
	drawPart[3]	= 1		! Full
	drawSteps[3] = 1	! Full
	drawNum = bShowNumbering
ENDIF

IF _iSymbolType = 8 THEN		! Type 8
	drawPart[1]	= 1		! Lower
	drawSteps[1] = 1	! Lower
ENDIF

IF _iSymbolType = 9 THEN		! Type 9
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
	drawDashed[2] = 1	! Upper
	drawSteps[1] = 1	! Lower
ENDIF

IF _iSymbolType = 10 THEN		! Type 10
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
	drawSteps[1] = 1	! Lower
ENDIF

IF _iSymbolType = 11 THEN		! Type 11
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
	drawDashed[2] = 1	! Upper
	drawSteps[1] = 1	! Lower
	drawSteps[2] = 1	! Upper
	drawNum = bShowNumbering
ENDIF

IF _iSymbolType = 12 THEN		! Type 12
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
	drawSteps[1] = 1	! Lower
	drawSteps[2] = 1	! Upper
	drawNum = bShowNumbering
ENDIF

IF _iSymbolType = 13 THEN		! Type 13
	drawPart[3]	= 1		! Full
	drawDashed[3] = 1	! Full
	drawSteps[3] = 1	! Full
	drawDetails[3] = 1	! Full

	drawNum = bShowNumbering
ENDIF

IF _iSymbolType = 14 THEN		! Type 14
	drawPart[3]	= 1		! Full
	drawSteps[3] = 1	! Full
	drawDetails[3] = 1	! Full

	drawNum = bShowNumbering
ENDIF

IF _iSymbolType = 15 THEN		! Type 15
	drawPart[1]	= 1		! Lower
	drawSteps[1] = 1	! Lower
	drawDetails[1] = 1	! Lower
	drawSteps[2] = 1	! Upper
!	drawDetails[2] = 1	! Upper ! COMP
ENDIF

IF _iSymbolType = 16 THEN		! Type 16
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
	drawDashed[2] = 1	! Upper
	drawSteps[1] = 1	! Lower
	drawDetails[1] = 1	! Lower
ENDIF

IF _iSymbolType = 17 THEN		! Type 17
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
	drawSteps[1] = 1	! Lower
	drawDetails[1] = 1	! Lower
ENDIF

IF _iSymbolType = 18 THEN		! Type 18
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
	drawDashed[2] = 1	! Upper
	drawSteps[1] = 1	! Lower
	drawSteps[2] = 1	! Upper
	drawDetails[1] = 1	! Lower
	drawDetails[2] = 1	! Upper
	drawNum = bShowNumbering
ENDIF

IF _iSymbolType = 19 THEN		! Type 19
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
	drawDashed[2] = 1	! Upper
	drawSteps[1] = 1	! Lower
	drawSteps[2] = 1	! Upper
	drawDetails[1] = 1	! Lower
	drawNum = bShowNumbering
ENDIF

IF _iSymbolType = 20 THEN		! Type 20
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
	drawSteps[1] = 1	! Lower
	drawSteps[2] = 1	! Upper
	drawDetails[1] = 1	! Lower
	drawDetails[2] = 1	! Upper
	drawNum = bShowNumbering
ENDIF

! ---------- Stories below the home story ---------- [

bBackgroundFill = 1
if belowstory then
	drawPart[3]		= 1
	drawDashed[3]	= 1

	drawSteps[1] = 0
	drawSteps[2] = 0
	drawSteps[3] = 0

	drawDetails[1] = 0
	drawDetails[2] = 0
	drawDetails[3] = 0

	drawNum = 0
endif

! ---------- Stories below the home story ---------- ]

! ---------- Stories above the home story ---------- [
if abovestory then
	drawPart[1] = 0
	drawPart[2] = 0
	drawPart[3] = 0

	if gs_TreadStUp then
		drawSteps[1] = 1
		drawSteps[2] = 1
		drawSteps[3] = 1

		if drawDetails[1] | drawDetails[3] then
			drawDetails[1] = 1
			drawDetails[2] = 1
			drawDetails[3] = 1
		endif

	else
		drawSteps[1] = 0
		drawSteps[2] = 0
		drawSteps[3] = 0

		drawDetails[1] = 0
		drawDetails[2] = 0
		drawDetails[3] = 0
	endif

	if gs_BreaklineStUp = 0 then
		drawPart[3] = 1
	else
		if gs_LowerPartStUp then
			drawPart[1] = 1
		endif
		if gs_UpperPartStUp then
			drawPart[2] = 1
		endif
	endif

	if gs_numaStUp & gs_TreadStUp & ((drawPart[1] & drawPart[2]) | drawPart[3]) then
		drawNum = 1
	else
		drawNum = 0
	endif
endif

add2 0,gapToFirstTread

hasBreak1st = 0
hasBreak2nd	= 0
	NumStline = INT (gs_BreakHeight/treadHeight)
	NumStline = max(1,NumStline)

FOR iFlight = 1 TO 2
	DRAWINDEX 10
	PEN gs_cont_pen
	FILL gs_fill_type

	if iFlight = 1 then
		RNU_temp = nRisers1stRun-1
		if drawPart[3] then
			bBackgroundFill	= 1
			drawBreakLine = 0
		else
			IF nRisers1stRun > NumStline+1 THEN
				drawBreakLine = 1
				hasBreak1st = 1
				bBackgroundFill	= gs_FillAbove
			else
				drawBreakLine = 0
				bBackgroundFill	= 1
			ENDIF
		endif
	endif
	if iFlight = 2 then
		RNU_temp	= nRisers2ndRun
		if drawPart[3] then
			bBackgroundFill = 1
			drawBreakLine = 0
		else
			if nRisers1stRun <= (NumStline+1) then
				drawBreakLine = 1
				hasBreak2nd = 1
				NumStline = max(1,(NumStline-nRisers1stRun))
				bBackgroundFill	= gs_FillAbove
			else
				drawBreakLine = 0
				bBackgroundFill	= gs_FillAbove
			endif
		endif
	ENDIF
	if belowStory then bBackgroundFill	= 0

	! ==========================================================================
	! CONTOUR LINES
	! ==========================================================================

	IF not(drawBreakLine) THEN
		IF (iFlight = 1 & drawPart[1]) | (iFlight=2 & drawPart[2]) | drawPart[3] THEN
			if aboveStory then
				PEN gs_LinePenStUp
				LINE_TYPE gs_LineTypeStUp
			else
				if drawDashed[iFlight] | drawDashed[3] then
					PEN gs_DashLinePen
					LINE_TYPE dash_line
				else
					PEN gs_cont_pen
					LINE_TYPE solid_line
				endif
			endif

			mask = 1
			if iFlight = 1 then xNosing = nosing * (drawDetails[1]|drawDetails[3])
			if iFlight = 2 then
				xNosing = nosing * (drawDetails[2]|drawDetails[3])
				mask = 0
			endif

			! ---------- Contour of Landing ----------
			if iFlight = 1 then
				POLY2_b 5, 1+2*bBackgroundFill+4+64, gs_fill_pen, gs_back_pen,
					flightWidth,(RNU_temp)*treadDepth-xNosing, 1,
					flightWidth,(RNU_temp)*treadDepth, 0,
					flightWidth,(RNU_temp)*treadDepth+flightWidth, 1,
					0,			(RNU_temp)*treadDepth+flightWidth, 1,
					0,			(RNU_temp)*treadDepth-xNosing, 0

				HOTLINE2 flightWidth, (RNU_temp)*treadDepth-xNosing,		flightWidth,	(RNU_temp)*treadDepth+flightWidth
				HOTLINE2 flightWidth, (RNU_temp)*treadDepth+flightWidth,	0,				(RNU_temp)*treadDepth+flightWidth
				HOTLINE2 0,			(RNU_temp)*treadDepth+flightWidth,	0,				(RNU_temp)*treadDepth-xNosing
				HOTLINE2 0,			(RNU_temp)*treadDepth-xNosing,		flightWidth,	(RNU_temp)*treadDepth-xNosing
			endif

			POLY2_b 4, 1+2*bBackgroundFill+4+64, gs_fill_pen, gs_back_pen,
				0,			-xNosing, 1,
				flightWidth,-xNosing, 1,
				flightWidth,(RNU_temp)*treadDepth-xNosing*mask, 1,
				0,			(RNU_temp)*treadDepth-xNosing*mask, 1

			HOTLINE2 0, -xNosing, flightWidth, -xNosing
			HOTLINE2 flightWidth, -xNosing, flightWidth, (RNU_temp)*treadDepth-xNosing
			HOTLINE2 flightWidth, (RNU_temp)*treadDepth-xNosing,0, (RNU_temp)*treadDepth-xNosing
			HOTLINE2 0, (RNU_temp)*treadDepth-xNosing,0, -xNosing

		endif
	ELSE

! with Break Line
! ---------------------------------------------------------------------------------------------
		if breakline_style_m = 2 then		! Zig Zag
			angle_breakline=ATN(2*treadDepth/flightWidth)
			ZigZag1Y=(2/5*flightWidth)*tan(angle_breakline)
			ZigZag2Y=(7/20*flightWidth)*tan(angle_breakline)
		else
			if breakline_style_m = 3 then		! Zig Zag CHI
				angle_breakline=ATN(2*treadDepth/flightWidth)
				ZigZag1Y=(2/5*flightWidth)*tan(angle_breakline)
				ZigZag2Y=(2/5*flightWidth)*tan(angle_breakline)
			endif
		endif

		IF drawPart[1] THEN
			if aboveStory then
				PEN gs_LinePenStUp
				LINE_TYPE gs_LineTypeStUp
			else
				if drawDashed[1] then
					PEN gs_DashLinePen
					LINE_TYPE dash_line
				else
					PEN gs_cont_pen
					LINE_TYPE solid_line
				endif
			endif

			xNosing = nosing * drawDetails[1]

			if breakline_style_m = 2 then
				! ---------- Zig Zag ----------
				POLY2_b 8, 1+2+4+64, gs_fill_pen, gs_back_pen,
						0, -xNosing, 1,
						flightWidth, -xNosing, 1,
						flightWidth, (NumStline+1)*treadDepth-xNosing, 1,
						6/10*flightWidth,(NumStline+1)*treadDepth-xNosing-ZigZag1Y, 1,
						6/10*flightWidth,(NumStline-1)*treadDepth-xNosing+ZigZag1Y, 1,
						4/10*flightWidth,(NumStline+1)*treadDepth-xNosing-ZigZag1Y, 1,
						4/10*flightWidth,(NumStline-1)*treadDepth-xNosing+ZigZag1Y, 1,
						0, (NumStline-1)*treadDepth-xNosing, 1
			else
				if breakline_style_m = 3 then
					! ---------- Zig Zag CHI ----------
					POLY2_b 9, 1+2+64, gs_fill_pen, gs_back_pen,
							0, -xNosing, 1,
							flightWidth, -xNosing, 1,
							flightWidth, (NumStline+1)*treadDepth-xNosing, 1,
							6/10*flightWidth,(NumStline+1)*treadDepth-xNosing-ZigZag1Y, 1,
							6/10*flightWidth,(NumStline-1)*treadDepth-xNosing+ZigZag1Y, 1,
							4/10*flightWidth,(NumStline+1)*treadDepth-xNosing-ZigZag1Y+breakLineWidth, 1,
							4/10*flightWidth,(NumStline-1)*treadDepth-xNosing+ZigZag1Y, 1,
							0, (NumStline-1)*treadDepth-xNosing, 1,
							0, -xNosing, -1
				else
					! ---------- Straight ----------
					POLY2_b 4, 1+2+4+64, gs_fill_pen, gs_back_pen,
							0, -xNosing, 1,
							flightWidth, -xNosing, 1,
							flightWidth, (NumStline+1)*treadDepth-xNosing, 1,
							0, (NumStline-1)*treadDepth-xNosing, 1
				endif
			endif


			HOTSPOT2 flightWidth/2,(NumStline)*treadDepth-xNosing, FlightUNID: FlightUNID=FlightUNID+1
			HOTSPOT2 0,			(NumStline-1)*treadDepth-xNosing, FlightUNID: FlightUNID=FlightUNID+1
			HOTSPOT2 flightWidth,	(NumStline+1)*treadDepth-xNosing, FlightUNID: FlightUNID=FlightUNID+1

			HOTLINE2 0, -xNosing, flightWidth, -xNosing
			HOTLINE2 flightWidth, -xNosing, flightWidth, (NumStline+1)*treadDepth-xNosing
			HOTLINE2 flightWidth, (NumStline+1)*treadDepth-xNosing,0, (NumStline-1)*treadDepth-xNosing
			HOTLINE2 0, (NumStline-1)*treadDepth-xNosing,0, -xNosing
		ENDIF

		IF drawPart[2] THEN
			if aboveStory then
				PEN gs_LinePenStUp
				LINE_TYPE gs_LineTypeStUp
			else
				if drawDashed[2] then
					PEN gs_DashLinePen
					LINE_TYPE dash_line
				else
					PEN gs_cont_pen
					LINE_TYPE solid_line
				endif
			endif

			if iFlight = 2 then	mask = 0 else mask = 1
			xNosing = nosing * drawDetails[2]


			! ---------- Contour of Landing ----------
			if iFlight = 1 then
				POLY2_b 5, 1+2*bBackgroundFill+4+64, gs_fill_pen, gs_back_pen,
						flightWidth, (RNU_temp)*treadDepth-xNosing, 1,
						flightWidth, (RNU_temp)*treadDepth, 0,
						flightWidth, (RNU_temp)*treadDepth+flightWidth, 1,
						0, (RNU_temp)*treadDepth+flightWidth, 1,
						0, (RNU_temp)*treadDepth-xNosing, 0

				HOTLINE2 flightWidth, (RNU_temp)*treadDepth-xNosing,flightWidth, (RNU_temp)*treadDepth+flightWidth
				HOTLINE2 flightWidth, (RNU_temp)*treadDepth+flightWidth,0, (RNU_temp)*treadDepth+flightWidth
				HOTLINE2 0, (RNU_temp)*treadDepth+flightWidth,0, (RNU_temp)*treadDepth-xNosing
				HOTLINE2 0, (RNU_temp)*treadDepth-xNosing,flightWidth, (RNU_temp)*treadDepth-xNosing
			endif

			if breakline_style_m = 2 then
				! ---------- Zig Zag ----------
				POLY2_b 8, 1+2*bBackgroundFill+4+64, gs_fill_pen, gs_back_pen,
						0, (NumStline-1)*treadDepth-xNosing+ breakLineWidth, 1,
						7/20*flightWidth, (NumStline-1)*treadDepth -xNosing+ breakLineWidth +ZigZag2Y, 1,
						7/20*flightWidth, (NumStline-1)*treadDepth -xNosing+ breakLineWidth +ZigZag2Y+2*(treadDepth-ZigZag1Y), 1,
						11/20*flightWidth, (NumStline-1)*treadDepth -xNosing+ breakLineWidth +ZigZag2Y, 1,
						11/20*flightWidth, (NumStline-1)*treadDepth -xNosing+ breakLineWidth +ZigZag2Y+2*(treadDepth-ZigZag1Y), 1,
						flightWidth, (NumStline+1)*treadDepth-xNosing+ breakLineWidth, 1,
						flightWidth, (RNU_temp)*treadDepth-xNosing*mask, 1,
						0, (RNU_temp)*treadDepth-xNosing*mask, 1
			else
				if breakline_style_m = 3 then
					! ---------- Zig Zag CHI ----------
					POLY2_b 8, 1+2*bBackgroundFill+4+64, gs_fill_pen, gs_back_pen,
							0, (NumStline-1)*treadDepth-xNosing+ breakLineWidth, 1,
							4/10*flightWidth, (NumStline-1)*treadDepth -xNosing+ breakLineWidth +ZigZag2Y, 1,
							4/10*flightWidth, (NumStline+1)*treadDepth-xNosing-ZigZag1Y+breakLineWidth, 1,
							6/10*flightWidth, (NumStline-1)*treadDepth-xNosing+ZigZag1Y, 1,
							6/10*flightWidth, (NumStline-1)*treadDepth -xNosing+ breakLineWidth +ZigZag2Y+2*(treadDepth-ZigZag1Y), 1,
							flightWidth, (NumStline+1)*treadDepth-xNosing+ breakLineWidth, 1,
							flightWidth, (RNU_temp)*treadDepth-xNosing*mask, 1,
							0, (RNU_temp)*treadDepth-xNosing*mask, 1
				else
					! ---------- Straight ----------
					POLY2_b 4, 1+2*bBackgroundFill+4+64, gs_fill_pen, gs_back_pen,
							0, (NumStline-1)*treadDepth-xNosing+breakLineWidth, 1,
							flightWidth, (NumStline+1)*treadDepth-xNosing+breakLineWidth, 1,
							flightWidth, (RNU_temp)*treadDepth-xNosing*mask, 1,
							0, (RNU_temp)*treadDepth-xNosing*mask, 1
				endif
			endif

			HOTLINE2 0, (NumStline-1)*treadDepth-xNosing+breakLineWidth, flightWidth, (NumStline+1)*treadDepth-xNosing+breakLineWidth
			HOTLINE2 flightWidth, (NumStline+1)*treadDepth-xNosing+breakLineWidth,flightWidth, (RNU_temp)*treadDepth-xNosing*mask
			HOTLINE2 flightWidth, (RNU_temp)*treadDepth-xNosing*mask,0, (RNU_temp)*treadDepth-xNosing*mask
			HOTLINE2 0, (RNU_temp)*treadDepth-xNosing*mask,0, (NumStline-1)*treadDepth-xNosing+breakLineWidth

			! BREAK LINE
			HOTSPOT2 flightWidth/2,		(NumStline)*treadDepth-xNosing,					FlightUNID, breakLineWidth, 1+128	: FlightUNID=FlightUNID+1
			HOTSPOT2 flightWidth/2,		(NumStline)*treadDepth-xNosing-1,				FlightUNID, breakLineWidth, 3		: FlightUNID=FlightUNID+1
			HOTSPOT2 flightWidth/2,		(NumStline)*treadDepth-xNosing+breakLineWidth,	FlightUNID, breakLineWidth, 2		: FlightUNID=FlightUNID+1

			HOTSPOT2 0, (NumStline-1)*treadDepth-xNosing+breakLineWidth,				FlightUNID: FlightUNID=FlightUNID+1
			HOTSPOT2 flightWidth, (NumStline+1)*treadDepth-xNosing+breakLineWidth,	FlightUNID: FlightUNID=FlightUNID+1
		endif
	endif

	! ==========================================================================
	! TREADS
	! ==========================================================================
	DRAWINDEX 20

	if not(drawBreakLine) then
		if (iFlight = 1 & drawPart[1] & drawSteps[1]) | \
			(iFlight = 2 & drawPart[2] & drawSteps[2]) | \
			(drawPart[3] & drawSteps[3])  then

			if aboveStory then
				PEN gs_LinePenStUp
				LINE_TYPE gs_LineTypeStUp
			else
				if drawDashed[iFlight] | drawDashed[3] then
					PEN gs_DashLinePen
					LINE_TYPE dash_line
				else
					PEN gs_cont_pen
					LINE_TYPE solid_line
				endif
			endif

			FOR numTread = 1 to RNU_temp
				LINE2 0,-xNosing, flightWidth, -xNosing
				HOTLINE2 0,-xNosing, flightWidth, -xNosing
				ADD2 0,treadDepth
			NEXT numTread
			DEL RNU_temp

			IF drawDetails[iFlight] | drawDetails[3] THEN
				PEN gs_DashLinePen
				LINE_TYPE dash_line

				FOR numTread = 1 to RNU_temp+mask
					LINE2 0, 0, flightWidth, 0
					HOTLINE2 0, 0, flightWidth, 0
					ADD2 0,treadDepth
				NEXT numTread
				DEL numTread -1
			endif
		endif
	else
		if drawPart[1] & drawSteps[1] then

			xNosing = nosing * drawDetails[1]


			FOR numTread = 1 to NumStline+1
				if aboveStory then
					PEN gs_LinePenStUp
					LINE_TYPE gs_LineTypeStUp
				else
					if drawDashed[1] then
						PEN gs_DashLinePen
						LINE_TYPE dash_line
					else
						PEN gs_cont_pen
						LINE_TYPE solid_line
					endif
				endif

				StartSolid = 0
				IF breakline_style_m = 1 THEN
					IF numTread=NumStline THEN StartSolid=flightWidth/2
				ELSE
					IF numTread=NumStline THEN StartSolid=flightWidth*6/10
				ENDIF

				IF numTread<=NumStline THEN
					LINE2 StartSolid,treadDepth-xNosing, flightWidth, treadDepth-xNosing
					HOTLINE2 StartSolid,treadDepth-xNosing, flightWidth, treadDepth-xNosing
				ENDIF

				if drawDetails[1] THEN
					PEN gs_DashLinePen
					LINE_TYPE dash_line

					StartDashed=0
					if breakline_style_m = 1 then	! Straight
						IF ABS(numTread-NumStline-1)<0.001 THEN StartDashed=flightWidth/2+xNosing/tan(bet)
					ELSE
						IF distZigZag >= 4/10*flightWidth THEN
							distZigZag = 4/10*flightWidth
						ELSE
							distZigZag=(flightWidth*(treadDepth-xNosing))/(2*treadDepth)
						ENDIF

						IF numTread=NumStline+1 THEN StartDashed=max(0,leftRailOffset+leftRailFrameThk,flightWidth-distZigZag)
					ENDIF

					IF ABS(numTread-(NumStline))<0.01 THEN StartDashed=max(0,xNosing/tan(bet))

					LINE2 StartDashed,0,flightWidth,0
					HOTLINE2 StartDashed,0,flightWidth,0
				ENDIF
				ADD2 0,treadDepth
			NEXT numTread
			DEL numTread-1
		endif

		IF drawPart[2] & drawSteps[2] THEN

			xNosing = nosing * drawDetails[2]

			ADD2 0,(NumStline)*treadDepth
			FOR numTread = 1 to RNU_temp-NumStline+mask
				if aboveStory then
					PEN gs_LinePenStUp
					LINE_TYPE gs_LineTypeStUp
				else
					if drawDashed[2] then
						PEN gs_DashLinePen
						LINE_TYPE dash_line
					else
						PEN gs_cont_pen
						LINE_TYPE solid_line
					endif
				endif

				EndSolid=flightWidth
				if breakline_style_m = 1 then	! Straight
					IF numTread=1 THEN EndSolid=Min(flightWidth,(treadDepth-breakLineWidth)/tan(bet))
					IF numTread=2 THEN EndSolid=Min(flightWidth,(2*treadDepth-breakLineWidth)/tan(bet))
				else
					if breakline_style_m = 3 then	! Zigzag CHI
						ZigZagCorrection = 4/10
					else
						ZigZagCorrection = 7/20
					endif
					IF numTread=1 THEN EndSolid=Min(ZigZagCorrection*flightWidth,(treadDepth-breakLineWidth)/tan(bet))
					IF numTread=2 THEN
						IF ZigZag2Y+2*(treadDepth-ZigZag1Y)<2*treadDepth-breakLineWidth-xNosing THEN EndSolid=Min(flightWidth,(2*treadDepth-breakLineWidth)/tan(bet))
						IF ZigZag2Y+2*(treadDepth-ZigZag1Y)>=2*treadDepth-breakLineWidth-xNosing THEN EndSolid=Min(flightWidth,ZigZagCorrection*flightWidth)
					ENDIF
				ENDIF

				LINE2 0,-xNosing,EndSolid,-xNosing
				HOTLINE2 0,-xNosing,EndSolid,-xNosing

				IF drawDetails[2] THEN
					PEN gs_DashLinePen
					LINE_TYPE dash_line

					EndDashed=flightWidth
					if breakline_style_m = 1 then	! Straight
						IF numTread=1 THEN EndDashed=Min(flightWidth,(treadDepth-breakLineWidth+xNosing)/tan(bet))
						IF numTread=2 THEN EndDashed=Min(flightWidth,(2*treadDepth-breakLineWidth+xNosing)/tan(bet))
					ELSE
						IF distZigZag <= ZigZagCorrection*flightWidth THEN
							distZigZag = ZigZagCorrection*flightWidth
						ELSE
							distZigZag=(flightWidth*(treadDepth/2+xNosing))/(2*treadDepth)
						ENDIF

						IF numTread=1 THEN EndDashed=Min(ZigZagCorrection*flightWidth,(treadDepth-breakLineWidth+xNosing)/tan(bet))
						IF numTread=2 THEN
							IF ZigZag2Y+2*(treadDepth-ZigZag1Y)<2*treadDepth+xNosing-breakLineWidth THEN EndDashed=Min(flightWidth,(2*treadDepth+xNosing-breakLineWidth)/tan(bet))
							IF ZigZag2Y+2*(treadDepth-ZigZag1Y)>=2*treadDepth+xNosing-breakLineWidth THEN EndDashed=Min(flightWidth,ZigZagCorrection*flightWidth)
						ENDIF
					ENDIF

					LINE2 0,0,EndDashed,0
					HOTLINE2 0,0,EndDashed,0
				ENDIF

				ADD2 0,treadDepth
			NEXT numTread
			DEL numTread-1
			DEL 1
		endif
	endif

	! ==========================================================================
	! WALKING LINE / ARROWHEAD / START END SYMBOL
	! ==========================================================================
	reverseWalkline = 0
	if walkingDirUPDN_m = 3 | walkingDirUPDN_m = 4 | (walkingDirUPDN_m = 6 & abovestory) then
		reverseWalkline = 1
	endif

	if bShowWalkLine & not(belowStory) then

		PEN gs_wLinePen
		FILL gs_ArrowFill

		for i = 1 to 3
			DRAWINDEX 40
			drawWalkLine = 1
			if not(bShowWalkLineAboveBreakline) & i = 2 then drawWalkLine = 0

			if drawPart[i] & drawWalkLine then
				xNosing = nosing * drawDetails[i]
				startLine = -xNosing
				endLine = (RNU_temp)*treadDepth
				penFillArrow = gs_ArrowFillPen
				if i = 1 then
					if drawBreakline then
						endLine = (NumStline)*treadDepth-xNosing
					else
						if iFlight = 1 then
							endLine = (RNU_temp)*treadDepth
						else
							drawWalkLine = 0
						endif
					endif
				endif
				if i = 2 then
					if drawBreakline then
						startLine = startLine + (NumStline)*treadDepth+breakLineWidth
					else
						if iFlight = 1 then
							drawWalkLine = 0
						else
							endLine = (RNU_temp)*treadDepth
						endif
					endif
					penFillArrow = gs_ArrowFillPenAbove
					if walkingDirUPDN_m = 5 then reverseWalkline = 1
				endif

				if aboveStory then
					LINE_TYPE gs_wLineTypeStUp
				else
					if (drawDashed[i]) then
						LINE_TYPE gs_wLineTypeAbove
					else
						LINE_TYPE gs_wLineType1
					endif
				endif

				IF i = 3 & walkingDirUPDN_m = 5 THEN
					if iFlight = 1 then
					! Up Down Both - UP
					endLine = endLine -(MAX(1, INT(RNU_temp/3)))*treadDepth + startLine
					ADD2 flightWidth/2, endLine
					GOSUB "Arrowhead Symbol"
					DEL 1
					endLine = endLine-lengthArrowHead

					line2 flightWidth/2, startLine, flightWidth/2, endLine

					ADD2 flightWidth/2, startLine
					GOSUB "Start End Symbol"
					DEL 1
					endif

					if iFlight = 2 then
					! Up Down Both - Down
					endLine = (RNU_temp)*treadDepth
					startLine = startLine+(MAX(1, INT(RNU_temp/3)))*treadDepth
					ADD2 flightWidth/2, startLine
					MUL2 1, -1
					GOSUB "Arrowhead Symbol"
					DEL 2
					startLine = startLine+lengthArrowHead

					ADD2 flightWidth/2, endLine
					GOSUB "Start End Symbol"
					DEL 1
					endif
				else

					! Arrow Head below Break Line
					if not(reverseWalkline)	& (((i=3|i=2) & iFlight=2) | (i=1 & drawBreakLine)) then
						ADD2 flightWidth/2, endLine
						GOSUB "Arrowhead Symbol"
						DEL 1
						endLine = endLine-lengthArrowHead
					endif

					if not(reverseWalkline) & ((i=3|i=1) & iFlight=1) then
						ADD2 flightWidth/2, startLine
						GOSUB "Start End Symbol"
						DEL 1
					endif

					! Arrow Head on Start
					if reverseWalkline & (((i=3|i=1) & iFlight=1) | (i=2 & drawBreakLine))then
						ADD2 flightWidth/2, startLine
						MUL2 1, -1
						GOSUB "Arrowhead Symbol"
						DEL 2
						startLine = startLine+lengthArrowHead
					endif

					if reverseWalkline & ((i=3|i=2) & iFlight=2) then
						ADD2 flightWidth/2, endLine
						GOSUB "Start End Symbol"
						DEL 1
					endif
				endif

				! Walking Line
				if drawWalkLine then line2 flightWidth/2, startLine, flightWidth/2, endLine
			endif
		next i

		if drawBreakLine then
			HOTSPOT2 flightWidth/2,(NumStline)*treadDepth-xNosing,					FlightUNID,breakLineWidth,1+128		:FlightUNID=FlightUNID+1
			HOTSPOT2 flightWidth/2,(NumStline)*treadDepth-0.1-xNosing,				FlightUNID,breakLineWidth,3			:FlightUNID=FlightUNID+1
			HOTSPOT2 flightWidth/2,(NumStline)*treadDepth+breakLineWidth-xNosing,	FlightUNID,breakLineWidth,2			:FlightUNID=FlightUNID+1
		endif

		if 	(iFlight = 1 & ((not(hasBreak1st) & drawPart[1]) | (hasBreak1st & drawPart[2] & bShowWalkLineAboveBreakline) | (drawPart[3] & (walkingDirUPDN_m <> 5) ))) then
			if aboveStory then
				LINE_TYPE gs_wLineTypeStUp
			else
			if 	(iFlight = 1 & ((not(hasBreak1st) & drawDashed[1]) | (hasBreak1st & drawDashed[2]) | (drawDashed[3] & (walkingDirUPDN_m <> 5) ))) then
					LINE_TYPE gs_wLineTypeAbove
				else
					LINE_TYPE gs_wLineType1
				endif
			endif
			LINE2 flightWidth/2,(RNU_temp)*treadDepth,flightWidth/2,(RNU_temp)*treadDepth+flightWidth/2
			LINE2 flightWidth/2,(RNU_temp)*treadDepth+flightWidth/2,flightWidth,(RNU_temp)*treadDepth+flightWidth/2
		ENDIF
	ENDIF

	DRAWINDEX 10
	ADD2 flightWidth,RNU_temp*treadDepth+flightWidth
	ROT2 -90
NEXT iFlight
DEL 2*2


!===============================================================================
! --- Carriage Line ---
!===============================================================================

if bCarriageLineExist & not(belowStory) then
	fill gs_fill_type

	bShowCarriagePart1	= 0
	bShowCarriagePart2	= 0

	beamNum				= 2
	beamThk				= woodBaseThk
	beamOffsetRight		= woodBaseOffset
	beamOffsetLeft		= woodBaseOffset
	carriageBaseDist	= flightWidth
	carrBreakLineWidth	= breakLineWidth

	if drawPart[3] then
		!!!!!******************************      1st RUN + LANDING 1.
		add2 0, bRiserCover * riserCoverThk
			beamLength			= (nRisers1stRun - 1) * treadDepth + flightWidth - bRiserCover * riserCoverThk
			bCarrAboveBreakLine	= 0
			bBreakCarriageLine	= 0
			gosub "carriage"
		del 1

		!!!!!******************************      2nd RUN
		add2 flightWidth - woodBaseOffset, flightWidth + (nRisers1stRun - 1) * treadDepth
		rot2 -90
			beamLength			= nRisers2ndRun*treadDepth + woodBaseOffset
			bCarrAboveBreakLine	= 0
			bBreakCarriageLine	= 0
			gosub "carriage"
		del 2
	else
		if hasBreak1st then
			if drawPart[1] then
				!!!!!******************************      1st RUN + LANDING 1.
				add2 0, bRiserCover * riserCoverThk
					beamLength			= (nRisers1stRun - 1) * treadDepth + flightWidth - bRiserCover * riserCoverThk
					bCarrAboveBreakLine	= 0
					bBreakCarriageLine	= 1
					bShowCarriagePart1	= 1
					bShowCarriagePart2	= 0
					brLineAngle			= bet
					xNosing				= nosing * drawDetails[1]
					carrBreakLineDist	= NumStline * treadDepth - xNosing + (flightWidth / 2 - woodBaseOffset - woodBaseThk / 2) * tan(brLineAngle) - bRiserCover * riserCoverThk
					gosub "carriage"
				del 1
			endif

			if drawPart[2] then
				!!!!!******************************      1st RUN + LANDING 1.
				add2 0, bRiserCover * riserCoverThk
					beamLength			= (nRisers1stRun - 1) * treadDepth + flightWidth - bRiserCover * riserCoverThk
					bCarrAboveBreakLine	= 1
					bBreakCarriageLine	= 1
					bShowCarriagePart1	= 0
					bShowCarriagePart2	= 1
					brLineAngle			= bet
					xNosing				= nosing * drawDetails[2]
					carrBreakLineDist	= NumStline * treadDepth - xNosing + (flightWidth / 2 - woodBaseOffset - woodBaseThk / 2) * tan(brLineAngle) - bRiserCover * riserCoverThk
					gosub "carriage"
				del 1

				!!!!!******************************      2nd RUN
				add2 flightWidth - woodBaseOffset, flightWidth + (nRisers1stRun - 1) * treadDepth
				rot2 -90
					beamLength			= nRisers2ndRun*treadDepth + woodBaseOffset
					bCarrAboveBreakLine	= 1
					bBreakCarriageLine	= 0
					gosub "carriage"
				del 2
			endif
		else
			if drawPart[1] then
				!!!!!******************************      1st RUN + LANDING 1.
				add2 0, bRiserCover * riserCoverThk
					beamLength			= (nRisers1stRun - 1) * treadDepth + flightWidth - bRiserCover * riserCoverThk
					bCarrAboveBreakLine	= 0
					bBreakCarriageLine	= 0
					gosub "carriage"
				del 1

				!!!!!******************************      2nd RUN
				add2 flightWidth - woodBaseOffset, flightWidth + (nRisers1stRun - 1) * treadDepth
				rot2 -90
					beamLength			= nRisers2ndRun*treadDepth + woodBaseOffset
					bCarrAboveBreakLine	= 0
					bBreakCarriageLine	= 1
					bShowCarriagePart1	= 1
					bShowCarriagePart2	= 0
					brLineAngle			= bet
					xNosing				= nosing * drawDetails[1]
					carrBreakLineDist	= treadDepth + (NumStline - 1) * treadDepth - xNosing + (flightWidth / 2 - beamOffsetRight - beamThk / 2) * tan(brLineAngle) + woodBaseOffset
					gosub "carriage"
				del 2
			endif

			if drawPart[2] then
				!!!!!******************************      2nd RUN
				add2 flightWidth - woodBaseOffset, flightWidth + (nRisers1stRun - 1) * treadDepth
				rot2 -90
					beamLength			= nRisers2ndRun*treadDepth + woodBaseOffset
					bCarrAboveBreakLine	= 1
					bBreakCarriageLine	= 1
					bShowCarriagePart1	= 0
					bShowCarriagePart2	= 1
					brLineAngle			= bet
					xNosing				= nosing * drawDetails[2]
					carrBreakLineDist	= treadDepth + (NumStline - 1) * treadDepth - xNosing + (flightWidth / 2 - beamOffsetRight - beamThk / 2) * tan(brLineAngle) + woodBaseOffset
					gosub "carriage"
				del 2
			endif
		endif
	endif
endif

!===============================================================================
! --- Railings ---
!===============================================================================

if _bShowRailIn2D & not(belowStory) then
	bShowRailPart1			= 0
	bShowRailPart2			= 0
	breakLineW				= breakLineWidth
	breakLineDist			= 0
	brLineAngle				= bet

	bShowRailOn1stRun		= 0
	bShowRailOn1stLanding1	= 0
	bShowRailOn1stLanding2	= 0
	bShowRailOn2ndRun		= 0
	bShowRailOn2ndLanding1	= 0
	bShowRailOn2ndLanding2	= 0
	bShowRailOn3rdRun		= 0

	drawindex 30
	fill gs_fill_type

	! --- Left Rail ----------------------------------------------------------------
	if rail_m = 3 | rail_m = 1 then		! Left, Both
		if bSameRails then
			leftRailType_m = rightRailType_m
			leftWireType_m = rightWireType_m
		endif

		if drawPart[3] then
			if bShowRailOnFloorPlan then
				pen railPen
				if aboveStory then
					LINE_TYPE railLineType
				else
					if (drawDashed[3]) then
						LINE_TYPE dash_line
					else
						LINE_TYPE railLineType
					endif
				endif
				xNosing = 0 ! COMP nosing * drawDetails[3]

				if bSymbolic2D then
					bShowRailOn1stRun		= 1
					bShowRailOn1stLanding1	= 1
					bShowRailOn1stLanding2	= 1
					bShowRailOn2ndRun		= 1
					bBreakRailLine			= 0
					bRailAboveBreakLine		= 0
					gosub "left rail"
				else
					poly2_b 7, 1+2+64, gs_fill_pen, gs_back_pen,
						leftRailOffset+leftRailFrameThk,						-xNosing -leftRailOvhgBottom,										1,
						leftRailOffset,											-xNosing -leftRailOvhgBottom,										1,
						leftRailOffset,											(nRisers1stRun-1)*treadDepth+flightWidth-leftRailOffset,	1,
						flightWidth+nRisers2ndRun*treadDepth+leftRailOvhgTop,	(nRisers1stRun-1)*treadDepth+flightWidth-leftRailOffset,	1,
						flightWidth+nRisers2ndRun*treadDepth+leftRailOvhgTop,	(nRisers1stRun-1)*treadDepth+flightWidth-leftRailOffset-leftRailFrameThk,1,
						leftRailOffset+leftRailFrameThk,						(nRisers1stRun-1)*treadDepth+flightWidth-leftRailOffset-leftRailFrameThk,1,
						leftRailOffset+leftRailFrameThk,						-xNosing -leftRailOvhgBottom,-1
				endif
			endif

			if bShowRailAxis then
				line_type railAxisLineType
				pen gs_RailAxisPen
				line2 leftRailOffset+leftRailFrameThk/2, (nRisers1stRun-1)*treadDepth+flightWidth-leftRailOffset-leftRailFrameThk/2,leftRailOffset+leftRailFrameThk/2,-leftRailOvhgBottom
				line2 leftRailOffset+leftRailFrameThk/2, (nRisers1stRun-1)*treadDepth+flightWidth-leftRailOffset-leftRailFrameThk/2,flightWidth+nRisers2ndRun*treadDepth+leftRailOvhgTop,(nRisers1stRun-1)*treadDepth+flightWidth-leftRailOffset-leftRailFrameThk/2
			endif
		else		! Break Line - Railing
			if hasBreak1st then
				if drawPart[1] & bShowRailOnFloorPlan then
					pen railPen
					if aboveStory then
						SET LINE_TYPE railLineType
					else
						if (drawDashed[1]) then
							SET LINE_TYPE dash_line
						else
							SET LINE_TYPE railLineType
						endif
					endif
					xNosing =  nosing * drawDetails[1]

					if bSymbolic2D then
						bShowRailOn1stRun		= 1
						bShowRailOn1stLanding1	= 0
						bShowRailOn1stLanding2	= 0
						bShowRailOn2ndRun		= 0
						bBreakRailLine			= 1
						brLineAngle				= bet
						bShowRailPart1			= 1
						breakLineDist			= leftRailOvhgBottom - xNosing + (NumStline - 1) * treadDepth + (leftRailOffset + leftRailFrameThk) * TAN(bet)
						breakLineW				= breakLineWidth + xNosing
						bRailAboveBreakLine		= 0
						gosub "left rail"
					else
						poly2_b 5, 1+2+64, gs_fill_pen, gs_back_pen,
							leftRailOffset,						-leftRailOvhgBottom,1,
							leftRailOffset+leftRailFrameThk,	-leftRailOvhgBottom,1,
							leftRailOffset+leftRailFrameThk,	-xNosing+(NumStline-1)*treadDepth+(leftRailOffset+leftRailFrameThk)*tan(bet),1,
							leftRailOffset,						-xNosing+(NumStline-1)*treadDepth+(leftRailOffset)*tan(bet),1,
							leftRailOffset,						-leftRailOvhgBottom,-1
					endif
				endif

				if drawPart[2] & bShowRailOnFloorPlan and bShowRailAboveBreakLine then
					pen railPen
					if aboveStory then
						LINE_TYPE railLineType
					else
						if (drawDashed[2]) then
							LINE_TYPE dash_line
						else
							LINE_TYPE railLineType
						endif
					endif

					if bSymbolic2D then
						xNosing =  nosing * NOT(drawDetails[2])
						bShowRailOn1stRun		= 1
						bShowRailOn1stLanding1	= 0
						bShowRailOn1stLanding2	= 0
						bShowRailOn2ndRun		= 0
						bBreakRailLine			= 1
						brLineAngle				= bet
						bShowRailPart2			= 1
						breakLineDist			= leftRailOvhgBottom - nosing + (NumStline - 1) * treadDepth + (leftRailOffset + leftRailFrameThk) * TAN(bet)
						breakLineW				= breakLineWidth + xNosing
						bRailAboveBreakLine		= 1
						gosub "left rail"

						bShowRailOn1stRun		= 0
						bShowRailOn1stLanding1	= 1
						bShowRailOn1stLanding2	= 1
						bShowRailOn2ndRun		= 1
						bBreakRailLine			= 0
						bRailAboveBreakLine		= 1
						gosub "left rail"
					else
						xNosing = nosing * drawDetails[2]
						poly2_b 7, 1 + 2 * gs_FillAbove+64, gs_fill_pen, gs_back_pen,
							leftRailOffset,(nRisers1stRun-1)*treadDepth+flightWidth-leftRailOffset,1,
							flightWidth+nRisers2ndRun*treadDepth+leftRailOvhgTop,(nRisers1stRun-1)*treadDepth+flightWidth-leftRailOffset,1,
							flightWidth+nRisers2ndRun*treadDepth+leftRailOvhgTop,(nRisers1stRun-1)*treadDepth+flightWidth-leftRailOffset-leftRailFrameThk,1,
							leftRailOffset+leftRailFrameThk,(nRisers1stRun-1)*treadDepth+flightWidth-leftRailOffset-leftRailFrameThk,1,
							leftRailOffset+leftRailFrameThk,(NumStline-1)*treadDepth+breakLineWidth-xNosing+(leftRailOffset+leftRailFrameThk)*tan(bet),1,
							leftRailOffset,(NumStline-1)*treadDepth+breakLineWidth-xNosing+(leftRailOffset)*tan(bet),1,
							leftRailOffset,(nRisers1stRun-1)*treadDepth+flightWidth-leftRailOffset,-1
					endif
				endif

				if bShowRailAxis then
					line_type railAxisLineType
					pen gs_RailAxisPen

					if drawPart[1] then
						xNosing =  nosing * drawDetails[1]
						line2 leftRailOffset+leftRailFrameThk/2, -xNosing+(NumStline-1)*treadDepth+(leftRailOffset+leftRailFrameThk/2)*tan(bet),leftRailOffset+leftRailFrameThk/2,-leftRailOvhgBottom
					endif

					if drawPart[2] then
						xNosing = nosing * drawDetails[2]
						line2 leftRailOffset+leftRailFrameThk/2, (NumStline-1)*treadDepth-xNosing+breakLineWidth+(leftRailOffset+leftRailFrameThk/2)*tan(bet),leftRailOffset+leftRailFrameThk/2,(nRisers1stRun-1)*treadDepth+flightWidth-leftRailOffset-leftRailFrameThk/2
						line2 leftRailOffset+leftRailFrameThk/2, (nRisers1stRun-1)*treadDepth+flightWidth-leftRailOffset-leftRailFrameThk/2,flightWidth+nRisers2ndRun*treadDepth+leftRailOvhgTop,(nRisers1stRun-1)*treadDepth+flightWidth-leftRailOffset-leftRailFrameThk/2
					endif
				endif
			else
				if drawPart[1] & bShowRailOnFloorPlan then
					pen railPen
					if aboveStory then
						LINE_TYPE railLineType
					else
						if (drawDashed[1]) then
							LINE_TYPE dash_line
						else
							LINE_TYPE railLineType
						endif
					endif
					xNosing =  nosing * drawDetails[1]

					if bSymbolic2D then
						bShowRailOn1stRun		= 1
						bShowRailOn1stLanding1	= 1
						bShowRailOn1stLanding2	= 1
						bShowRailOn2ndRun		= 0
						bBreakRailLine			= 0
						bRailAboveBreakLine		= 0
						gosub "left rail"

						bShowRailOn1stRun		= 0
						bShowRailOn1stLanding1	= 0
						bShowRailOn1stLanding2	= 0
						bShowRailOn2ndRun		= 1
						bBreakRailLine			= 1
						brLineAngle				= bet
						bShowRailPart1			= 1
						breakLineDist			= treadDepth - xNosing + (NumStline - 1) * treadDepth + (leftRailOffset + leftRailFrameThk) * TAN(bet)
						breakLineW				= breakLineWidth + xNosing
						bRailAboveBreakLine		= 0
						gosub "left rail"
					else
						poly2_b  7, 1+2+4+64, gs_fill_pen, gs_back_pen,
							leftRailOffset+leftRailFrameThk,	-leftRailOvhgBottom,1,
							leftRailOffset,						-leftRailOvhgBottom,1,
							leftRailOffset,(nRisers1stRun-1)*treadDepth+flightWidth-leftRailOffset,1,
							flightWidth+(NumStline-1)*treadDepth-xNosing+leftRailOffset*tan(bet),(nRisers1stRun-1)*treadDepth+flightWidth-leftRailOffset,1,
							flightWidth+(NumStline-1)*treadDepth-xNosing+(leftRailOffset+leftRailFrameThk)*tan(bet),(nRisers1stRun-1)*treadDepth+flightWidth-leftRailOffset-leftRailFrameThk,1,
							leftRailOffset+leftRailFrameThk,(nRisers1stRun-1)*treadDepth+flightWidth-leftRailOffset-leftRailFrameThk,1,
							leftRailOffset+leftRailFrameThk,-leftRailOvhgBottom,-1
					endif
				endif

				if drawPart[2] & bShowRailOnFloorPlan and bShowRailAboveBreakLine then
					pen railPen
					if aboveStory then
						LINE_TYPE railLineType
					else
						if (drawDashed[2]) then
							LINE_TYPE dash_line
						else
							LINE_TYPE railLineType
						endif
					endif

					if bSymbolic2D then
						xNosing = nosing * NOT(drawDetails[2])
						bShowRailOn1stRun		= 0
						bShowRailOn1stLanding1	= 0
						bShowRailOn1stLanding2	= 0
						bShowRailOn2ndRun		= 1
						bBreakRailLine			= 1
						brLineAngle				= bet
						bShowRailPart2			= 1
						breakLineDist			= treadDepth - nosing + (NumStline - 1) * treadDepth + (leftRailOffset + leftRailFrameThk) * TAN(bet)
						breakLineW				= breakLineWidth + xNosing
						bRailAboveBreakLine		= 1
						gosub "left rail"
					else
						xNosing = nosing * drawDetails[2]
						poly2_b 5, 1 + 2 * gs_FillAbove+64, gs_fill_pen, gs_back_pen,
							flightWidth+(NumStline-1)*treadDepth-xNosing+leftRailOffset*tan(bet)+breakLineWidth,(nRisers1stRun-1)*treadDepth+flightWidth-leftRailOffset,1,
							flightWidth+(NumStline-1)*treadDepth-xNosing+(leftRailOffset+leftRailFrameThk)*tan(bet)+breakLineWidth,(nRisers1stRun-1)*treadDepth+flightWidth-leftRailOffset-leftRailFrameThk,1,
							flightWidth+nRisers2ndRun*treadDepth+leftRailOvhgTop,(nRisers1stRun-1)*treadDepth+flightWidth-leftRailOffset-leftRailFrameThk,1,
							flightWidth+nRisers2ndRun*treadDepth+leftRailOvhgTop,(nRisers1stRun-1)*treadDepth+flightWidth-leftRailOffset,1,
							flightWidth+(NumStline-1)*treadDepth-xNosing+leftRailOffset*tan(bet)+breakLineWidth,(nRisers1stRun-1)*treadDepth+flightWidth-leftRailOffset,-1
					endif
				endif

				if bShowRailAxis then
					line_type railAxisLineType
					pen gs_RailAxisPen
					if drawPart[1] then
						xNosing = nosing * drawDetails[1]
						line2 leftRailOffset+leftRailFrameThk/2, (nRisers1stRun-1)*treadDepth+flightWidth-leftRailOffset-leftRailFrameThk/2,leftRailOffset+leftRailFrameThk/2,-leftRailOvhgBottom
						line2 leftRailOffset+leftRailFrameThk/2, (nRisers1stRun-1)*treadDepth+flightWidth-leftRailOffset-leftRailFrameThk/2,\
								flightWidth+(NumStline-1)*treadDepth-xNosing+(leftRailOffset+leftRailFrameThk/2)*tan(bet), (nRisers1stRun-1)*treadDepth+flightWidth-leftRailOffset-leftRailFrameThk/2
					endif

					if drawPart[2] then
						xNosing = nosing * drawDetails[2]
						line2 flightWidth+nRisers2ndRun*treadDepth+leftRailOvhgTop, (nRisers1stRun-1)*treadDepth+flightWidth-leftRailOffset-leftRailFrameThk/2,\
							flightWidth+(NumStline-1)*treadDepth-xNosing+(leftRailOffset+leftRailFrameThk/2)*tan(bet)+breakLineWidth, (nRisers1stRun-1)*treadDepth+flightWidth-leftRailOffset-leftRailFrameThk/2
					endif
				endif
			endif
		endif
	endif

	! --- Right Rail ---------------------------------------------------------------
	pen gs_cont_pen
	if rail_m = 2 | rail_m = 1 then		! Right, Both
		if drawPart[3] then
			if bShowRailOnFloorPlan then
				pen railPen
				if aboveStory then
					LINE_TYPE railLineType
				else
					if (drawDashed[3]) then
						LINE_TYPE dash_line
					else
						LINE_TYPE railLineType
					endif
				endif
				xNosing =  0 ! COMP nosing * drawDetails[3]

				if bSymbolic2D then
					bShowRailOn1stRun		= 1
					bShowRailOn1stLanding1	= 1
					bShowRailOn1stLanding2	= 1
					bShowRailOn2ndRun		= 1
					bBreakRailLine			= 0
					bRailAboveBreakLine		= 0
					gosub "right rail"
				else
					poly2_b 7, 1+2+64, gs_fill_pen, gs_back_pen,
						flightWidth-rightRailOffset,	-xNosing -rightRailOvhgBottom,1,
						flightWidth-rightRailOffset-rightRailFrameThk,-xNosing -rightRailOvhgBottom,1,
						flightWidth-rightRailOffset-rightRailFrameThk,(nRisers1stRun-1)*treadDepth+rightRailOffset+rightRailFrameThk,1,
						flightWidth+nRisers2ndRun*treadDepth+rightRailOvhgTop,(nRisers1stRun-1)*treadDepth+rightRailOffset+rightRailFrameThk,1,
						flightWidth+nRisers2ndRun*treadDepth+rightRailOvhgTop,(nRisers1stRun-1)*treadDepth+rightRailOffset,1,
						flightWidth-rightRailOffset,(nRisers1stRun-1)*treadDepth+rightRailOffset,1,
						flightWidth-rightRailOffset,-xNosing -rightRailOvhgBottom,-1
				endif
			endif

			if bShowRailAxis then
				line_type railAxisLineType
				pen gs_RailAxisPen
				line2 flightWidth-rightRailOffset-rightRailFrameThk/2, (nRisers1stRun-1)*treadDepth+rightRailOffset+rightRailFrameThk/2,flightWidth-rightRailOffset-rightRailFrameThk/2,-rightRailOvhgBottom
				line2 flightWidth+nRisers2ndRun*treadDepth+rightRailOvhgTop, (nRisers1stRun-1)*treadDepth+rightRailOffset+rightRailFrameThk/2,flightWidth-rightRailOffset-rightRailFrameThk/2,(nRisers1stRun-1)*treadDepth+rightRailOffset+rightRailFrameThk/2
			endif
		else
			if hasBreak1st then
				if drawPart[1] & bShowRailOnFloorPlan then
					pen railPen
					if aboveStory then
						LINE_TYPE railLineType
					else
						if (drawDashed[1]) then
							LINE_TYPE dash_line
						else
							LINE_TYPE railLineType
						endif
					endif
					xNosing = nosing * drawDetails[1]

					if bSymbolic2D then
						bShowRailOn1stRun		= 1
						bShowRailOn1stLanding1	= 0
						bShowRailOn1stLanding2	= 0
						bShowRailOn2ndRun		= 0
						bBreakRailLine			= 1
						brLineAngle				= bet
						bShowRailPart1			= 1
						breakLineDist			= rightRailOvhgBottom - xNosing + (NumStline + 1) * treadDepth - rightRailOffset * TAN(bet)
						breakLineW				= breakLineWidth + xNosing
						bRailAboveBreakLine		= 0
						gosub "right rail"
					else
						poly2_b 5, 1+2+64, gs_fill_pen, gs_back_pen,
							flightWidth-rightRailOffset,					-rightRailOvhgBottom,1,
							flightWidth-rightRailOffset-rightRailFrameThk,	-rightRailOvhgBottom,1,
							flightWidth-rightRailOffset-rightRailFrameThk,	-xNosing+(NumStline+1)*treadDepth-(rightRailOffset+rightRailFrameThk)*tan(bet),1,
							flightWidth-rightRailOffset,					-xNosing+(NumStline+1)*treadDepth-(rightRailOffset)*tan(bet),1,
							flightWidth-rightRailOffset,					-rightRailOvhgBottom,-1
					endif
				endif

				if drawPart[2] & bShowRailOnFloorPlan and bShowRailAboveBreakLine then
					pen railPen
					if aboveStory then
						LINE_TYPE railLineType
					else
						if (drawDashed[2]) then
							LINE_TYPE dash_line
						else
							LINE_TYPE railLineType
						endif
					endif

					if bSymbolic2D then
						xNosing = nosing * NOT(drawDetails[2])
						bShowRailOn1stRun		= 1
						bShowRailOn1stLanding1	= 0
						bShowRailOn1stLanding2	= 0
						bShowRailOn2ndRun		= 0
						bBreakRailLine			= 1
						brLineAngle				= bet
						bShowRailPart2			= 1
						breakLineDist			= rightRailOvhgBottom - nosing + (NumStline + 1) * treadDepth - rightRailOffset * TAN(bet)
						breakLineW				= breakLineWidth + xNosing
						bRailAboveBreakLine		= 1
						gosub "right rail"

						bShowRailOn1stRun		= 0
						bShowRailOn1stLanding1	= 1
						bShowRailOn1stLanding2	= 1
						bShowRailOn2ndRun		= 1
						bBreakRailLine			= 0
						bRailAboveBreakLine		= 1
						gosub "right rail"
					else
						xNosing = nosing * drawDetails[2]
						poly2_b 7, 1 + 2 * gs_FillAbove+64, gs_fill_pen, gs_back_pen,
							flightWidth-rightRailOffset,(nRisers1stRun-1)*treadDepth+rightRailOffset,1,
							flightWidth+nRisers2ndRun*treadDepth+rightRailOvhgTop,(nRisers1stRun-1)*treadDepth+rightRailOffset,1,
							flightWidth+nRisers2ndRun*treadDepth+rightRailOvhgTop,(nRisers1stRun-1)*treadDepth+rightRailOffset+rightRailFrameThk,1,
							flightWidth-rightRailOffset-rightRailFrameThk,(nRisers1stRun-1)*treadDepth+rightRailOffset+rightRailFrameThk,1,
							flightWidth-rightRailOffset-rightRailFrameThk,(NumStline+1)*treadDepth-xNosing+breakLineWidth-(rightRailOffset+rightRailFrameThk)*tan(bet),1,
							flightWidth-rightRailOffset,(NumStline+1)*treadDepth-xNosing+breakLineWidth-(rightRailOffset)*tan(bet),1,
							flightWidth-rightRailOffset,(nRisers1stRun-1)*treadDepth+rightRailOffset,-1
					endif
				endif

				if bShowRailAxis then
					line_type railAxisLineType
					pen gs_RailAxisPen
					if drawPart[1] then
						xNosing = nosing * drawDetails[1]

						line2 flightWidth-rightRailOffset-rightRailFrameThk/2, -xNosing + (NumStline+1)*treadDepth-(rightRailOffset+rightRailFrameThk/2)*tan(bet),flightWidth-rightRailOffset-rightRailFrameThk/2,-rightRailOvhgBottom
					endif
					if drawPart[2] then
						xNosing = nosing * drawDetails[2]
						line2 flightWidth-rightRailOffset-rightRailFrameThk/2, (NumStline+1)*treadDepth-xNosing+breakLineWidth-(rightRailOffset+rightRailFrameThk/2)*tan(bet),\
							flightWidth-rightRailOffset-rightRailFrameThk/2,(nRisers1stRun-1)*treadDepth+rightRailOffset+rightRailFrameThk/2
						line2 flightWidth+nRisers2ndRun*treadDepth+rightRailOvhgTop, (nRisers1stRun-1)*treadDepth+rightRailOffset+rightRailFrameThk/2,flightWidth-rightRailOffset-rightRailFrameThk/2,(nRisers1stRun-1)*treadDepth+rightRailOffset+rightRailFrameThk/2
					endif
				endif
			else
				if drawPart[1] & bShowRailOnFloorPlan then
					pen railPen
					if aboveStory then
						LINE_TYPE railLineType
					else
						if (drawDashed[1]) then
							LINE_TYPE dash_line
						else
							LINE_TYPE railLineType
						endif
					endif
					xNosing = nosing * drawDetails[1]

					if bSymbolic2D then
						bShowRailOn1stRun		= 1
						bShowRailOn1stLanding1	= 1
						bShowRailOn1stLanding2	= 1
						bShowRailOn2ndRun		= 0
						bBreakRailLine			= 0
						bRailAboveBreakLine		= 0
						gosub "right rail"

						bShowRailOn1stRun		= 0
						bShowRailOn1stLanding1	= 0
						bShowRailOn1stLanding2	= 0
						bShowRailOn2ndRun		= 1
						bBreakRailLine			= 1
						brLineAngle				= bet
						bShowRailPart1			= 1
						breakLineDist			= min(rightRailOffset,treadDepth) - xNosing + (NumStline + 1) * treadDepth - (rightRailOffset) * TAN(bet)
						breakLineW				= breakLineWidth + xNosing
						bRailAboveBreakLine		= 0
						gosub "right rail"
					else
						poly2_b 7, 1+2+4+64, gs_fill_pen, gs_back_pen,
							flightWidth-rightRailOffset,					-rightRailOvhgBottom,1,
							flightWidth-rightRailOffset-rightRailFrameThk,	-rightRailOvhgBottom,1,
							flightWidth-rightRailOffset-rightRailFrameThk,(nRisers1stRun-1)*treadDepth+rightRailOffset+rightRailFrameThk,1,
							flightWidth+(NumStline+1)*treadDepth-xNosing-(rightRailOffset+rightRailFrameThk)*tan(bet),(nRisers1stRun-1)*treadDepth+rightRailOffset+rightRailFrameThk,1,
							flightWidth+(NumStline+1)*treadDepth-xNosing-(rightRailOffset)*tan(bet),(nRisers1stRun-1)*treadDepth+rightRailOffset,1,
							flightWidth-rightRailOffset,(nRisers1stRun-1)*treadDepth+rightRailOffset,1,
							flightWidth-rightRailOffset,-rightRailOvhgBottom,-1
					endif
				endif

				if drawPart[2] & bShowRailOnFloorPlan and bShowRailAboveBreakLine then
					pen railPen
					if aboveStory then
						LINE_TYPE railLineType
					else
						if (drawDashed[2]) then
							LINE_TYPE dash_line
						else
							LINE_TYPE railLineType
						endif
					endif

					if bSymbolic2D then
						xNosing = nosing * NOT(drawDetails[2])
						bShowRailOn1stRun		= 0
						bShowRailOn1stLanding1	= 0
						bShowRailOn1stLanding2	= 0
						bShowRailOn2ndRun		= 1
						bBreakRailLine			= 1
						brLineAngle				= bet
						bShowRailPart2			= 1
						breakLineDist			= min(rightRailOffset,treadDepth) - nosing + (NumStline + 1) * treadDepth - (rightRailOffset) * TAN(bet)
						breakLineW				= breakLineWidth + xNosing
						bRailAboveBreakLine		= 1
						gosub "right rail"
					else
						xNosing = nosing * drawDetails[2]
						poly2_b 5, 1+2*gs_FillAbove+64, gs_fill_pen, gs_back_pen,
							flightWidth+(NumStline+1)*treadDepth-xNosing-(rightRailOffset+rightRailFrameThk)*tan(bet)+breakLineWidth,(nRisers1stRun-1)*treadDepth+rightRailOffset+rightRailFrameThk,1,
							flightWidth+(NumStline+1)*treadDepth-xNosing-(rightRailOffset)*tan(bet)+breakLineWidth,(nRisers1stRun-1)*treadDepth+rightRailOffset,1,
							flightWidth+nRisers2ndRun*treadDepth+rightRailOvhgTop,(nRisers1stRun-1)*treadDepth+rightRailOffset,1,
							flightWidth+nRisers2ndRun*treadDepth+rightRailOvhgTop,(nRisers1stRun-1)*treadDepth+rightRailOffset+rightRailFrameThk,1,
							flightWidth+(NumStline+1)*treadDepth-xNosing-(rightRailOffset+rightRailFrameThk)*tan(bet)+breakLineWidth,(nRisers1stRun-1)*treadDepth+rightRailOffset+rightRailFrameThk,-1
					endif
				endif

				if bShowRailAxis then
					line_type railAxisLineType
					pen gs_RailAxisPen
					if drawPart[1] then
						xNosing = nosing * drawDetails[1]
						line2 flightWidth-rightRailOffset-rightRailFrameThk/2, (nRisers1stRun-1)*treadDepth+rightRailOffset+rightRailFrameThk/2,flightWidth-rightRailOffset-rightRailFrameThk/2,-rightRailOvhgBottom
						line2 flightWidth-rightRailOffset-rightRailFrameThk/2, (nRisers1stRun-1)*treadDepth+rightRailOffset+rightRailFrameThk/2,\
								flightWidth+(NumStline+1)*treadDepth-xNosing-(rightRailOffset+rightRailFrameThk/2)*tan(bet), (nRisers1stRun-1)*treadDepth+rightRailOffset+rightRailFrameThk/2
					endif
					if drawPart[2] then
						xNosing = nosing * drawDetails[2]
						line2 flightWidth+(NumStline+1)*treadDepth-xNosing-(rightRailOffset+rightRailFrameThk/2)*tan(bet)+breakLineWidth, \
								(nRisers1stRun-1)*treadDepth+rightRailOffset+rightRailFrameThk/2,flightWidth+nRisers2ndRun*treadDepth+rightRailOvhgTop, (nRisers1stRun-1)*treadDepth+rightRailOffset+rightRailFrameThk/2
					endif
				endif
			endif
		endif
	endif
endif


! ==============================================================================
! Text / Up - Down Text / Numbering
! ==============================================================================

! --- Oriented View ------------------------------------------------------------
angleViewRot = 0
if bShowRiseAndRunText | walkingDirUPDN_m <> 1 | drawNum | gs_description <> "" then
	rrr = REQUEST ("View_Rotangle", "", angleViewRot)
endif
totalRotate = (SYMB_ROTANGLE + angleViewRot) MOD 360


! --- Define Font Style --------------------------------------------------------

define style "UPDN" fontType, UPDNfontsize, 5, 0		  	! UP/DN

define style "stepnum" fontType, gs_NumTextSize, 1, 0		! Numbering

define style "description" fontType, gs_desc_text_size, 4, 0	! Description

! --- Rise & Run Text -------------------------------------------------------

if bShowRiseAndRunText & bShowWalkLine & not(belowStory) then
	call "Stair_RiseRun_Text" PARAMETERS ALL	totalRotate	= totalRotate,
												iRotateType = 1,
												iRiseRunTextPosition = 1,
												RiseRunUNID	= RiseRunUNID
endif


! --- Up & Down Text ---------------------------------------------------------
iReadable = 0
if walkingDirUPDN_m <> 1 & bShowWalkLine & not(belowStory) then		! None
	DRAWINDEX 50
	PEN UPDNfontpen
	xNosing = nosing * (drawDetails[1]|drawDetails[3])

	if (walkingDirUPDN_m = 2 | walkingDirUPDN_m = 5 | (walkingDirUPDN_m = 6 & not(abovestory) & not(belowstory) )) & (drawPart[1]|drawPart[3]) then
		nTransUPDN = 0
		set style "UPDN"
		add2 flightWidth/2+DirUPDN_X,DirUPDN_Y-xNosing
		nTransUPDN = nTransUPDN + 1
		! Text Rotation - Readable / Parallel with Walking Line / Align with Symbol
		! ----------------------------------------------------------------------
		if typeTextRotation_UpDn_m = 2 then									! Readable
			if (totalRotate > (gs_readable_angle + eps) & totalRotate < (gs_readable_angle + 180 + eps)) then
				rot2 180
				nTransUPDN = nTransUPDN + 1
			endif
		else
			if typeTextRotation_UpDn_m = 1 then								! Parallel with Walking Line
				if not(SYMB_MIRRORED) then
					iReadable = (totalRotate > (gs_readable_angle - 90 + eps) & totalRotate < (gs_readable_angle + 180 - 90 + eps))- not(totalRotate > (gs_readable_angle - 90 + eps) & totalRotate < (gs_readable_angle + 180 - 90 + eps))
				else
					iReadable = (totalRotate < (gs_readable_angle - 90 + eps) | totalRotate > (gs_readable_angle + 180 - 90 + eps))- not(totalRotate < (gs_readable_angle - 90 + eps) | totalRotate > (gs_readable_angle + 180 - 90 + eps))
				endif
				rot2 -90 * iReadable
				nTransUPDN = nTransUPDN + 1
			endif
		endif
		! ----------------------------------------------------------------------
		rot2 AngUPDN
		nTransUPDN = nTransUPDN + 1

		string1	= `ВВЕРХ`
		text2 0,0, string1

		del nTransUPDN

		width1	= STW (string1)/1000*GLOB_SCALE
		rb		= width1/2
	endif

	if walkingDirUPDN_m = 3 & (drawPart[1]|drawPart[3]) then ! Down at Bottom
		nTransUPDN = 0
		set style "UPDN"
		add2 flightWidth/2+DirUPDN_X,DirUPDN_Y-xNosing
		nTransUPDN = nTransUPDN + 1

		! Text Rotation - Readable / Parallel with Walking Line / Align with Symbol
		! ----------------------------------------------------------------------
		if typeTextRotation_UpDn_m = 2 then									! Readable
			if (totalRotate > (gs_readable_angle + eps) & totalRotate < (gs_readable_angle + 180 + eps)) then
				rot2 180
				nTransUPDN = nTransUPDN + 1
			endif
		else
			if typeTextRotation_UpDn_m = 1 then								! Parallel with Walking Line
				if not(SYMB_MIRRORED) then
					iReadable = (totalRotate > (gs_readable_angle - 90 + eps) & totalRotate < (gs_readable_angle + 180 - 90 + eps))- not(totalRotate > (gs_readable_angle - 90 + eps) & totalRotate < (gs_readable_angle + 180 - 90 + eps))
				else
					iReadable = (totalRotate < (gs_readable_angle - 90 + eps) | totalRotate > (gs_readable_angle + 180 - 90 + eps))- not(totalRotate < (gs_readable_angle - 90 + eps) | totalRotate > (gs_readable_angle + 180 - 90 + eps))
				endif
				rot2 -90 * iReadable
				nTransUPDN = nTransUPDN + 1
			endif
		endif
		! ----------------------------------------------------------------------
		rot2 AngUPDN
		nTransUPDN = nTransUPDN + 1

		text2 0,0, gs_CustomText_Down

		del nTransUPDN

		string2	= gs_CustomText_Down
		width2	= STW (string2)/1000*GLOB_SCALE
		rb		= width2/2
	endif

	if (walkingDirUPDN_m = 2 | walkingDirUPDN_m = 5 | walkingDirUPDN_m = 3 | (walkingDirUPDN_m = 6 & not(abovestory) & not(belowstory))) & (drawPart[1]|drawPart[3]) then
		nTransHotspot = 0
		add2 flightWidth/2+DirUPDN_X,DirUPDN_Y-xNosing
		nTransHotspot = nTransHotspot  + 1
		if typeTextRotation_UpDn_m = 1 then
			rot2 -90 * iReadable
			nTransHotspot = nTransHotspot  + 1
		endif
		HOTSPOT2 0,					0,				UpDownUNID,	AngUPDN,	6		: UpDownUNID=UpDownUNID+1
		HOTSPOT2 rb,				0,				UpDownUNID,	AngUPDN,	4+128	: UpDownUNID=UpDownUNID+1
		HOTSPOT2 rb*cos(AngUPDN),	rb*sin(AngUPDN),UpDownUNID,	AngUPDN,	5		: UpDownUNID=UpDownUNID+1
		DEL nTransHotspot
	endif

	if (walkingDirUPDN_m = 4 | walkingDirUPDN_m = 5 | (walkingDirUPDN_m = 6 & abovestory)) & (drawPart[2]|drawPart[3]) then
		nTransUPDN = 0
		set style "UPDN"
		add2 A+DirUPDN_X_top,B-flightWidth/2-DirUPDN_Y_top
		nTransUPDN = nTransUPDN + 1

		! Text Rotation - Readable / Parallel with Walking Line / Align with Symbol
		! ----------------------------------------------------------------------
		if typeTextRotation_UpDn_m = 2 then									! Readable
			if ((totalRotate > (gs_readable_angle - 90 + eps) & totalRotate < (gs_readable_angle + 180 - 90 + eps)) & not(SYMB_MIRRORED)) | \
				((totalRotate < (gs_readable_angle - 90 + eps) | totalRotate > (gs_readable_angle + 180 - 90 + eps)) & SYMB_MIRRORED) then
				rot2 180
				nTransUPDN = nTransUPDN + 1
			endif
		else
			if typeTextRotation_UpDn_m = 1 then								! Parallel with Walking Line
				iReadable = not(totalRotate > (gs_readable_angle + eps) & totalRotate < (gs_readable_angle + 180 + eps))- (totalRotate > (gs_readable_angle + eps) & totalRotate < (gs_readable_angle + 180 + eps))
				rot2 -90 * iReadable
				nTransUPDN = nTransUPDN + 1
			endif
		endif
		! ----------------------------------------------------------------------
		rot2 AngUPDN_top + 90
		nTransUPDN = nTransUPDN + 1

		text2 0,0, gs_CustomText_Down

		del nTransUPDN

		string2	= gs_CustomText_Down
		width2	= STW (string2)/1000*GLOB_SCALE
		rb		= width2/2
	endif

	if (walkingDirUPDN_m = 4 | walkingDirUPDN_m = 5 | (walkingDirUPDN_m = 6 & abovestory)) & (drawPart[2]|drawPart[3]) then
		nTransHotspot = 0
		add2 A+DirUPDN_X_top,B-flightWidth/2-DirUPDN_Y_top
		nTransHotspot = nTransHotspot  + 1
		if typeTextRotation_UpDn_m = 1 then
			rot2 -90 * iReadable
			nTransHotspot = nTransHotspot  + 1
		endif
		rot2 90
		nTransHotspot = nTransHotspot  + 1
		HOTSPOT2 0,						0,					UpDownUNID,	AngUPDN_top,	6		: UpDownUNID=UpDownUNID+1
		HOTSPOT2 rb,					0,					UpDownUNID,	AngUPDN_top,	4+128	: UpDownUNID=UpDownUNID+1
		HOTSPOT2 rb*cos(AngUPDN_top),	rb*sin(AngUPDN_top),UpDownUNID,	AngUPDN_top,	5		: UpDownUNID=UpDownUNID+1
		DEL nTransHotspot
	endif
endif

! --- Numbering ----------------------------------------------------------------

if drawNum & not(belowStory) then
	startNumber	= 1
	endNumber	= nRisers1stRun
	xNosing = nosing * (drawDetails[1]|drawDetails[3])

	for iNumFlight = 1 to 2
		DRAWINDEX 50

		set style "stepnum"
		nnn = REQUEST ("Height_of_style", "stepnum", strHeight)
		strHeight = strHeight / 1000 * GLOB_SCALE
		add2 DirNumText_X, DirNumText_Y - treadDepth/2- xNosing

		bReadable = 0
		if iNumFlight = 1 then
			bReadable = (totalRotate > (gs_readable_angle + eps) & totalRotate < (gs_readable_angle + 180 + eps))
		else
			if SYMB_MIRRORED then
				bReadable = (totalRotate > (gs_readable_angle - 90 + eps) & totalRotate < (gs_readable_angle + 180 - 90 + eps))
			else
				bReadable = (totalRotate < (gs_readable_angle - 90 + eps) | totalRotate > (gs_readable_angle + 180 - 90 + eps))
			endif
		endif

		for iNumStep = startNumber to endNumber
			add2 0, treadDepth
			pen gs_NumTextPen
			nTextTransformations = 0
			! Text Rotation - Readable / Align with Symbol
			! ----------------------------------------------------------------------
			if typeTextRotation_Num_m = 2 & bReadable = 1 then								! Readable
				rot2 180
				strWidth = STW(str("%.0", iNumStep + nStartNumbering-1)) / 1000 * GLOB_SCALE
				add2 -strWidth, strHeight
				nTextTransformations = 2
			endif
			! ----------------------------------------------------------------------

			text2 0,0,iNumStep + nStartNumbering-1
			if nTextTransformations > 0 then del nTextTransformations
		next iNumStep
		del (endNumber - startNumber + 1) + 1
			startNumber = nRisers1stRun + 1
		endNumber	= nRisers1stRun + nRisers2ndRun
		add2 flightWidth, (nRisers1stRun-1) * treadDepth + flightWidth
		rot2 -90
	next iNumFlight
	del 4

	HOTSPOT2 0,				DirNumText_Y- xNosing,	NumUnID, DirNumText_X,	1+128	:NumUnID=NumUnID+1
	HOTSPOT2 -1,			DirNumText_Y- xNosing,	NumUnID, DirNumText_X,	3		:NumUnID=NumUnID+1
	HOTSPOT2 DirNumText_X,	DirNumText_Y- xNosing,	NumUnID, DirNumText_X,	2		:NumUnID=NumUnID+1

	HOTSPOT2 DirNumText_X, 0- xNosing,				NumUnID, DirNumText_Y, 1+128	:NumUnID=NumUnID+1
	HOTSPOT2 DirNumText_X, -1- xNosing,				NumUnID, DirNumText_Y, 3		:NumUnID=NumUnID+1
	HOTSPOT2 DirNumText_X, DirNumText_Y- xNosing,	NumUnID, DirNumText_Y,	2		:NumUnID=NumUnID+1

endif

! --- Description ----------------------------------------------------------------

if STRLEN(gs_description) <> 0 & not(belowStory) then
	dim gs_description_bpos[3][3]
	lengthWalkLine = A+B-flightWidth
	if lengthWalkLine/2 < (treadDepth * (nRisers1stRun-1) + flightWidth/2) then
		gs_description_bpos[1][1] = flightWidth/2
		gs_description_bpos[1][2] = lengthWalkLine/2
	else
		gs_description_bpos[1][1] = lengthWalkLine/2 - treadDepth * (nRisers1stRun-1)
		gs_description_bpos[1][2] = (treadDepth * (nRisers1stRun-1) + flightWidth/2)
	endif

	gs_description_bpos[1][3] = 0

	style "description"
	pen gs_desc_text_pen
	add2 (gs_description_bpos[1][1] + gs_description_pos[1][1]), (gs_description_bpos[1][2] + gs_description_pos[1][2])

	textangle = (gs_description_bpos[1][3] + gs_description_pos[1][3])

	reversedText = 0
	angleFull = (totalRotate + textangle) MOD 360

	if angleFull < 0 then
		angleFull = angleFull + 360
	endif
	if angleFull > (gs_readable_angle+eps) & angleFull < (gs_readable_angle + 180 +eps) then
		reversedText = 1
		textangle = textangle + 180
	endif
	rot2 textangle

	if reversedText then
		text2 -STW(gs_description) / 1000 * GLOB_SCALE, 0, gs_description
	else
		text2 0,0, gs_description
	endif

	del 2
	hotspot2 gs_description_bpos[1][1], gs_description_bpos[1][2] + gs_description_pos[1][2], 40000+1, gs_description_pos[1][1], 1 + 128
	posRel = gs_description_pos[1][1]
	if abs(posRel) < 0.00001 then
		posRel = 0.0001
	else
		posRel = 0
	endif
	hotspot2 gs_description_bpos[1][1] - posRel, gs_description_bpos[1][2] + gs_description_pos[1][2], 40000+2, gs_description_pos[1][1], 3 + 128
	hotspot2 gs_description_bpos[1][1] + gs_description_pos[1][1], gs_description_bpos[1][2] + gs_description_pos[1][2], 40000+3, gs_description_pos[1][1], 2

	hotspot2 gs_description_bpos[1][1] + gs_description_pos[1][1], gs_description_bpos[1][2], 40000+4, gs_description_pos[1][2], 1 + 128
	posRel = gs_description_pos[1][2]
	if abs(posRel) < 0.00001 then
		posRel = 0.0001
	else
		posRel = 0
	endif
	hotspot2 gs_description_bpos[1][1] + gs_description_pos[1][1], gs_description_bpos[1][2] - posRel, 40000+5, gs_description_pos[1][2], 3 + 128
	hotspot2 gs_description_bpos[1][1] + gs_description_pos[1][1], gs_description_bpos[1][2] + gs_description_pos[1][2], 40000+6, gs_description_pos[1][2], 2

	!angle edit
	HOTSPOT2 gs_description_bpos[1][1] + gs_description_pos[1][1],
				gs_description_bpos[1][2] + gs_description_pos[1][2],
				40000+7, gs_description_pos[1][3], 6 + 128

	HOTSPOT2 gs_description_bpos[1][1] + gs_description_pos[1][1] + GLOB_SCALE*0.5*COS(gs_description_bpos[1][3])*gs_desc_text_size/1000,
				gs_description_bpos[1][2] + gs_description_pos[1][2] + GLOB_SCALE*0.5*SIN(gs_description_bpos[1][3])*gs_desc_text_size/1000,
				40000+8, gs_description_pos[1][3], 4 + 128

	HOTSPOT2 gs_description_bpos[1][1] + gs_description_pos[1][1] + GLOB_SCALE*0.5*gs_desc_text_size*COS(gs_description_bpos[1][3] + gs_description_pos[1][3])/1000,
				gs_description_bpos[1][2] + gs_description_pos[1][2] + GLOB_SCALE*0.5*gs_desc_text_size*SIN(gs_description_bpos[1][3] + gs_description_pos[1][3])/1000,
				40000+9, gs_description_pos[1][3], 5
endif

!===================================================================
! HOTSPOT EDITING in 2D
!===================================================================
DRAWINDEX 50
!-- FLIGHT WIDTH ---------------------------------------------------
FlightUNID = 50
xNosing = nosing * (drawDetails[1]|drawDetails[3])

HOTSPOT2 0,0,			FlightUNID, flightWidth, 1+128	: FlightUNID=FlightUNID+1
HOTSPOT2 flightWidth,0, FlightUNID, flightWidth, 2		: FlightUNID=FlightUNID+1
HOTSPOT2 -0.1,0,		FlightUNID, flightWidth, 3		: FlightUNID=FlightUNID+1

HOTSPOT2 flightWidth+nRisers2ndRun*treadDepth,(nRisers1stRun-1)*treadDepth+flightWidth,		FlightUNID, flightWidth, 1+128	: FlightUNID=FlightUNID+1
HOTSPOT2 flightWidth+nRisers2ndRun*treadDepth,(nRisers1stRun-1)*treadDepth,					FlightUNID, flightWidth, 2		: FlightUNID=FlightUNID+1
HOTSPOT2 flightWidth+nRisers2ndRun*treadDepth,(nRisers1stRun-1)*treadDepth+flightWidth+0.1,	FlightUNID, flightWidth, 3		: FlightUNID=FlightUNID+1

HOTSPOT2 a,-gapToFirstTread,	FlightUNID, b, 1+128	: FlightUNID=FlightUNID+1
HOTSPOT2 a,b-gapToFirstTread,	FlightUNID, b, 2		: FlightUNID=FlightUNID+1
HOTSPOT2 a,-1,					FlightUNID, b, 3		: FlightUNID=FlightUNID+1

HOTSPOT2 0,-gapToFirstTread,	FlightUNID, b, 1+256	: FlightUNID=FlightUNID+1
HOTSPOT2 0,b-gapToFirstTread,	FlightUNID, b, 2		: FlightUNID=FlightUNID+1
HOTSPOT2 0,-1,					FlightUNID, b, 3		: FlightUNID=FlightUNID+1

HOTSPOT2 0,b-gapToFirstTread,	FlightUNID, a, 1+256	: FlightUNID=FlightUNID+1
HOTSPOT2 a,b-gapToFirstTread,	FlightUNID, a, 2		: FlightUNID=FlightUNID+1
HOTSPOT2 0,-1,					FlightUNID, a, 3		: FlightUNID=FlightUNID+1

!-- UP/DOWN TEXT ---------------------------------------------------
IF bShowWalkLine & not(belowStory) THEN
	IF (walkingDirUPDN_m = 2 | walkingDirUPDN_m = 3 | walkingDirUPDN_m = 5) & bShowWalkLine then
		HOTSPOT2 flightWidth/2,			DirUPDN_Y-xNosing,		UpDownUNID, DirUPDN_X, 1+128	: UpDownUNID=UpDownUNID+1
		HOTSPOT2 flightWidth/2-1,		DirUPDN_Y-xNosing,		UpDownUNID, DirUPDN_X, 3		: UpDownUNID=UpDownUNID+1
		HOTSPOT2 flightWidth/2+DirUPDN_X,	DirUPDN_Y-xNosing,	UpDownUNID, DirUPDN_X, 2		: UpDownUNID=UpDownUNID+1

		HOTSPOT2 flightWidth/2+DirUPDN_X,	0-xNosing,		UpDownUNID, DirUPDN_Y, 1+128		: UpDownUNID=UpDownUNID+1
		HOTSPOT2 flightWidth/2+DirUPDN_X,	-1-xNosing,		UpDownUNID, DirUPDN_Y, 3			: UpDownUNID=UpDownUNID+1
		HOTSPOT2 flightWidth/2+DirUPDN_X,DirUPDN_Y-xNosing, UpDownUNID, DirUPDN_Y, 2			: UpDownUNID=UpDownUNID+1
	ENDIF

	IF (walkingDirUPDN_m = 4 | walkingDirUPDN_m = 5) & bShowWalkLine then
		HOTSPOT2 A,					B - flightWidth/2 - DirUPDN_Y_top, UpDownUNID, DirUPDN_X_top, 1+128 : UpDownUNID=UpDownUNID+1
		HOTSPOT2 A-1,				B - flightWidth/2 - DirUPDN_Y_top, UpDownUNID, DirUPDN_X_top, 3 : UpDownUNID=UpDownUNID+1
		HOTSPOT2 A+DirUPDN_X_top,	B - flightWidth/2 - DirUPDN_Y_top, UpDownUNID, DirUPDN_X_top, 2 : UpDownUNID=UpDownUNID+1

		HOTSPOT2 A+DirUPDN_X_top,	B - flightWidth/2 + 0,				UpDownUNID, DirUPDN_Y_top, 1+128	: UpDownUNID=UpDownUNID+1
		HOTSPOT2 A+DirUPDN_X_top,	B - flightWidth/2 + 1,				UpDownUNID, DirUPDN_Y_top, 3		: UpDownUNID=UpDownUNID+1
		HOTSPOT2 A+DirUPDN_X_top,	B - flightWidth/2 - DirUPDN_Y_top,	UpDownUNID, DirUPDN_Y_top, 2		: UpDownUNID=UpDownUNID+1
	ENDIF
endif

!-- RAILING  ---------------------------------------------------
if _bShowRailIn2D & bShowRailOnFloorPlan & not(belowStory) then
xNosing = 0 ! COMP nosing * (drawDetails[1]|drawDetails[3])

IF rail_m = 2 | rail_m = 1 THEN		! Right, Both
	!!! RAIL OFFSET - right
	HOTSPOT2 flightWidth-rightRailFrameThk/2,					-xNosing-rightRailOvhgBottom, RailUNID, rightRailOffset, 1+128	: RailUNID=RailUNID+1
	HOTSPOT2 flightWidth-rightRailFrameThk/2-rightRailOffset,	-xNosing-rightRailOvhgBottom, RailUNID, rightRailOffset, 2		: RailUNID=RailUNID+1
	HOTSPOT2 flightWidth-rightRailFrameThk/2-0.1,				-xNosing-rightRailOvhgBottom, RailUNID, rightRailOffset, 3		: RailUNID=RailUNID+1

	!!! RAIL TOP OVERHANG
	HOTSPOT2 flightWidth+nRisers2ndRun*treadDepth+rightRailOvhgTop,		(nRisers1stRun-1)*treadDepth+rightRailFrameThk/2, RailUNID, rightRailOffset, 1+128 : RailUNID=RailUNID+1
	HOTSPOT2 flightWidth+nRisers2ndRun*treadDepth+rightRailOvhgTop,		(nRisers1stRun-1)*treadDepth+rightRailFrameThk/2+0.1, RailUNID, rightRailOffset, 3 : RailUNID=RailUNID+1
	HOTSPOT2 flightWidth+nRisers2ndRun*treadDepth+rightRailOvhgTop,		(nRisers1stRun-1)*treadDepth+rightRailFrameThk/2+rightRailOffset, RailUNID, rightRailOffset, 2 : RailUNID=RailUNID+1

	!!! RAIL BOTTOM OVERHANG
	HOTSPOT2 flightWidth-rightRailFrameThk/2-rightRailOffset,		-xNosing,						RailUNID, rightRailOvhgBottom, 1+128 : RailUNID=RailUNID+1
	HOTSPOT2 flightWidth-rightRailFrameThk/2-rightRailOffset,		0+1,					RailUNID, rightRailOvhgBottom, 3 : RailUNID=RailUNID+1
	HOTSPOT2 flightWidth-rightRailFrameThk/2-rightRailOffset,		-xNosing-rightRailOvhgBottom,	RailUNID, rightRailOvhgBottom, 2 : RailUNID=RailUNID+1

	!!! RAIL TOP OVERHANG
	HOTSPOT2 flightWidth+nRisers2ndRun*treadDepth,					(nRisers1stRun-1)*treadDepth+rightRailOffset+rightRailFrameThk/2, RailUNID, rightRailOvhgTop, 1+128 : RailUNID=RailUNID+1
	HOTSPOT2 flightWidth+nRisers2ndRun*treadDepth-1,				(nRisers1stRun-1)*treadDepth+rightRailOffset+rightRailFrameThk/2, RailUNID, rightRailOvhgTop, 3		: RailUNID=RailUNID+1
	HOTSPOT2 flightWidth+nRisers2ndRun*treadDepth+rightRailOvhgTop,	(nRisers1stRun-1)*treadDepth+rightRailOffset+rightRailFrameThk/2, RailUNID, rightRailOvhgTop, 2		: RailUNID=RailUNID+1
ENDIF

IF rail_m = 3 | rail_m = 1 THEN		! Left,	Both
	if bSameRails then
		!!! RAIL OFFSET - right
		HOTSPOT2 rightRailFrameThk/2,		-xNosing-rightRailOvhgBottom,			RailUNID, rightRailOffset, 1+128 : RailUNID=RailUNID+1
		HOTSPOT2 rightRailFrameThk/2+rightRailOffset,	-xNosing-rightRailOvhgBottom,	RailUNID, rightRailOffset, 2		: RailUNID=RailUNID+1
		HOTSPOT2 rightRailFrameThk/2+0.1,	-xNosing-rightRailOvhgBottom,			RailUNID, rightRailOffset, 3		: RailUNID=RailUNID+1

		!!! RAIL TOP OVERHANG
		HOTSPOT2 flightWidth+nRisers2ndRun*treadDepth+rightRailOvhgTop,		(nRisers1stRun-1)*treadDepth+flightWidth-rightRailFrameThk/2,				RailUNID, rightRailOffset, 1+128 : RailUNID=RailUNID+1
		HOTSPOT2 flightWidth+nRisers2ndRun*treadDepth+rightRailOvhgTop,		(nRisers1stRun-1)*treadDepth+flightWidth-rightRailFrameThk/2-0.1,			RailUNID, rightRailOffset, 3		: RailUNID=RailUNID+1
		HOTSPOT2 flightWidth+nRisers2ndRun*treadDepth+rightRailOvhgTop,		(nRisers1stRun-1)*treadDepth+flightWidth-rightRailFrameThk/2-rightRailOffset,	RailUNID, rightRailOffset, 2		: RailUNID=RailUNID+1

		!!! RAIL BOTTOM OVERHANG
		HOTSPOT2 rightRailFrameThk/2+rightRailOffset,		-xNosing,						RailUNID, rightRailOvhgBottom, 1+128 : RailUNID=RailUNID+1
		HOTSPOT2 rightRailFrameThk/2+rightRailOffset,		1,								RailUNID, rightRailOvhgBottom, 3		: RailUNID=RailUNID+1
		HOTSPOT2 rightRailFrameThk/2+rightRailOffset,		-xNosing-rightRailOvhgBottom,	RailUNID, rightRailOvhgBottom, 2		: RailUNID=RailUNID+1

		!!! RAIL TOP OVERHANG
		HOTSPOT2 flightWidth+nRisers2ndRun*treadDepth,					(nRisers1stRun-1)*treadDepth+flightWidth-rightRailOffset-rightRailFrameThk/2, RailUNID, rightRailOvhgTop, 1+128: RailUNID=RailUNID+1
		HOTSPOT2 flightWidth+nRisers2ndRun*treadDepth-1,				(nRisers1stRun-1)*treadDepth+flightWidth-rightRailOffset-rightRailFrameThk/2, RailUNID, rightRailOvhgTop, 3	: RailUNID=RailUNID+1
		HOTSPOT2 flightWidth+nRisers2ndRun*treadDepth+rightRailOvhgTop,	(nRisers1stRun-1)*treadDepth+flightWidth-rightRailOffset-rightRailFrameThk/2, RailUNID, rightRailOvhgTop, 2	: RailUNID=RailUNID+1
	else
		!!! RAIL OFFSET - left
		HOTSPOT2 leftRailFrameThk/2,		-xNosing-leftRailOvhgBottom,			RailUNID, leftRailOffset, 1+128 : RailUNID=RailUNID+1
		HOTSPOT2 leftRailFrameThk/2+leftRailOffset,	-xNosing-leftRailOvhgBottom,	RailUNID, leftRailOffset, 2		: RailUNID=RailUNID+1
		HOTSPOT2 leftRailFrameThk/2+0.1,	-xNosing-leftRailOvhgBottom,			RailUNID, leftRailOffset, 3		: RailUNID=RailUNID+1

		!!! RAIL TOP OVERHANG
		HOTSPOT2 flightWidth+nRisers2ndRun*treadDepth+leftRailOvhgTop,		(nRisers1stRun-1)*treadDepth+flightWidth-leftRailFrameThk/2,				RailUNID, leftRailOffset, 1+128 : RailUNID=RailUNID+1
		HOTSPOT2 flightWidth+nRisers2ndRun*treadDepth+leftRailOvhgTop,		(nRisers1stRun-1)*treadDepth+flightWidth-leftRailFrameThk/2-0.1,			RailUNID, leftRailOffset, 3		: RailUNID=RailUNID+1
		HOTSPOT2 flightWidth+nRisers2ndRun*treadDepth+leftRailOvhgTop,		(nRisers1stRun-1)*treadDepth+flightWidth-leftRailFrameThk/2-leftRailOffset,	RailUNID, leftRailOffset, 2		: RailUNID=RailUNID+1

		!!! RAIL BOTTOM OVERHANG
		HOTSPOT2 leftRailFrameThk/2+leftRailOffset,		-xNosing,						RailUNID, leftRailOvhgBottom, 1+128 : RailUNID=RailUNID+1
		HOTSPOT2 leftRailFrameThk/2+leftRailOffset,		1,								RailUNID, leftRailOvhgBottom, 3		: RailUNID=RailUNID+1
		HOTSPOT2 leftRailFrameThk/2+leftRailOffset,		-xNosing-leftRailOvhgBottom,	RailUNID, leftRailOvhgBottom, 2		: RailUNID=RailUNID+1

		!!! RAIL TOP OVERHANG
		HOTSPOT2 flightWidth+nRisers2ndRun*treadDepth,					(nRisers1stRun-1)*treadDepth+flightWidth-leftRailOffset-leftRailFrameThk/2, RailUNID, leftRailOvhgTop, 1+128: RailUNID=RailUNID+1
		HOTSPOT2 flightWidth+nRisers2ndRun*treadDepth-1,				(nRisers1stRun-1)*treadDepth+flightWidth-leftRailOffset-leftRailFrameThk/2, RailUNID, leftRailOvhgTop, 3	: RailUNID=RailUNID+1
		HOTSPOT2 flightWidth+nRisers2ndRun*treadDepth+leftRailOvhgTop,	(nRisers1stRun-1)*treadDepth+flightWidth-leftRailOffset-leftRailFrameThk/2, RailUNID, leftRailOvhgTop, 2	: RailUNID=RailUNID+1
	endif
ENDIF
endif

END


"Start End Symbol":
	DRAWINDEX 45
	fill gs_StartEndFill

	if gs_StartEndFillPen <> 0 then
		temp_FillStatus = 2
	else
		temp_FillStatus = 0
	endif

	add2 0, +xNosing
	IF gs_StartEndStyle_m = 1 THEN		! Style 1
		POLY2_B 2, 1+temp_FillStatus, gs_StartEndFillPen, gs_fill_pen,
		0,-xNosing,901,
		gs_CircleRadius,360,4001
	ENDIF

	IF gs_StartEndStyle_m = 2 THEN		! Style 2
		FOR kk=1 TO 2
			POLY2_B 6, 1+temp_FillStatus, gs_StartEndFillPen, gs_fill_pen,
				0,-xNosing,1,
				0+gs_CircleRadius,-xNosing,1,
				0,-xNosing,901,
				0,90,4001,
				0,-xNosing+gs_CircleRadius,0,
				0,-xNosing,-1

			POLY2_B 6, 1, gs_StartEndFillPen, gs_fill_pen,
				0,-xNosing,1,
				0,-xNosing+gs_CircleRadius,1,
				0,-xNosing,901,
				0,90,4001,
				0-gs_CircleRadius,-xNosing,0,
				0,-xNosing,-1
		ROT2 180
		ADD2 0, 2*xNosing
		NEXT kk
		DEL 4
	ENDIF

	IF gs_StartEndStyle_m = 3 THEN		! Style 3
		LINE2 0+gs_StartWidth,-xNosing-gs_StartHeight,0+gs_StartWidth,-xNosing+gs_StartHeight
		LINE2 0-gs_StartWidth,-xNosing-gs_StartHeight,0-gs_StartWidth,-xNosing+gs_StartHeight
	ENDIF

	! --- Hotspots of StartEnd Symbol
	IF gs_StartEndStyle_m = 1 | gs_StartEndStyle_m = 2 THEN		! Style 1-2
		ADD2 0,-xNosing
			FOR kk=1 to 4
				HOTSPOT2 0, 0,					StartSymbUNID, gs_CircleRadius, 1+128	:StartSymbUNID=StartSymbUNID+1
				HOTSPOT2 -1, 0,					StartSymbUNID, gs_CircleRadius, 3+128	:StartSymbUNID=StartSymbUNID+1
				HOTSPOT2 gs_CircleRadius, 0,	StartSymbUNID, gs_CircleRadius,2		:StartSymbUNID=StartSymbUNID+1

				ROT2 90
			NEXT KK
			DEL 4
		DEL 1
	ENDIF

	IF gs_StartEndStyle_m = 3 THEN		! Style 3
		FOR kk=1 to 2
			ADD2 0, -xNosing
				! Symbol Width/2
				HOTSPOT2 0,				-gs_StartHeight, StartSymbUNID, gs_StartWidth, 1+128:StartSymbUNID=StartSymbUNID+1
				HOTSPOT2 -1,			-gs_StartHeight, StartSymbUNID, gs_StartWidth, 3	:StartSymbUNID=StartSymbUNID+1
				HOTSPOT2 gs_StartWidth, -gs_StartHeight, StartSymbUNID, gs_StartWidth, 2	:StartSymbUNID=StartSymbUNID+1

				HOTSPOT2 0,				gs_StartHeight, StartSymbUNID, gs_StartWidth, 1+128	:StartSymbUNID=StartSymbUNID+1
				HOTSPOT2 -1,			gs_StartHeight, StartSymbUNID, gs_StartWidth, 3		:StartSymbUNID=StartSymbUNID+1
				HOTSPOT2 gs_StartWidth, gs_StartHeight, StartSymbUNID, gs_StartWidth,2		:StartSymbUNID=StartSymbUNID+1
			DEL 1

			ADD2 0, -xNosing
				! Symbol Height
				HOTSPOT2 gs_StartWidth, 0,				StartSymbUNID, gs_StartHeight, 1+128:StartSymbUNID=StartSymbUNID+1
				HOTSPOT2 gs_StartWidth, -1,				StartSymbUNID, gs_StartHeight, 3	:StartSymbUNID=StartSymbUNID+1
				HOTSPOT2 gs_StartWidth, gs_StartHeight, StartSymbUNID, gs_StartHeight, 2	:StartSymbUNID=StartSymbUNID+1

				HOTSPOT2 gs_StartWidth, 0,					StartSymbUNID, gs_StartHeight, 1+128:StartSymbUNID=StartSymbUNID+1
				HOTSPOT2 gs_StartWidth, 1,					StartSymbUNID, gs_StartHeight, 3	:StartSymbUNID=StartSymbUNID+1
				HOTSPOT2 gs_StartWidth, -gs_StartHeight,	StartSymbUNID, gs_StartHeight, 2	:StartSymbUNID=StartSymbUNID+1
			DEL 1

		MUL2 -1,1
		NEXT kk
		DEL 2
	ENDIF
	del 1

	DRAWINDEX 40
RETURN


"Arrowhead Symbol":
	IF arrow_style_m = 1 | arrow_style_m = 4 | arrow_style_m = 7 THEN
		temp_ArrowDist = flightWidth/2
		temp_ArrowHeight = treadDepth
		if not(reverseWalkLine) & (i = 2 | i = 3) & walkingDirUPDN_m <> 5 then temp_ArrowHeight = treadDepth + xNosing
	ENDIF

	IF arrow_style_m = 2 | arrow_style_m = 5 | arrow_style_m = 8 THEN
		temp_ArrowDist = flightWidth/4
		temp_ArrowHeight = treadDepth
		if not(reverseWalkLine) & (i = 2 | i = 3) & walkingDirUPDN_m <> 5 then temp_ArrowHeight = treadDepth + xNosing
	ENDIF

	IF arrow_style_m = 3 | arrow_style_m = 6 | arrow_style_m = 9 THEN
		temp_ArrowDist = gs_ArrowHalfWidth
		temp_ArrowHeight = gs_ArrowHeight
	ENDIF

	if arrow_style_m = 1 | arrow_style_m = 2 | arrow_style_m = 3 then
		temp_ArrowMask=0
	else
		temp_ArrowMask=1
	endif

	POLY2_b 4, 1, penFillArrow, gs_fill_pen,
		-temp_ArrowDist,-temp_ArrowHeight, temp_ArrowMask,
		temp_ArrowDist,-temp_ArrowHeight, 1,
		0,0, 1,
		-temp_ArrowDist,-temp_ArrowHeight, -1

	! --- Arrowhead Fill Contour Points Conditions
	IF arrow_style_m = 4 | arrow_style_m = 5 | arrow_style_m = 6 THEN
		temp_1XFill=temp_ArrowDist
		lengthArrowHead = temp_ArrowHeight
	else
		lengthArrowHead = 0
	ENDIF

	IF arrow_style_m = 7 | arrow_style_m = 8 | arrow_style_m = 9 THEN
		temp_1XFill=0
	ENDIF

	if penFillArrow <> 0 then
		IF arrow_style_m <> 1 & arrow_style_m <> 2 & arrow_style_m <> 3 THEN
			fill gs_ArrowFill ! Always 64 (Foreground)
			POLY2_b 4, 2, penFillArrow, gs_fill_pen,
				-temp_1XFill,-temp_ArrowHeight, temp_ArrowMask,
				temp_ArrowDist,-temp_ArrowHeight, 1,
				0,0, 1,
				-temp_1XFill,-temp_ArrowHeight, -1
		ENDIF
	endif

	HOTSPOT2	0,0,	ArrowUNID: ArrowUNID=ArrowUNID+1

	! --- Hotspot editing of Height & Width of Arrowhead
	IF arrow_style_m = 3 | arrow_style_m = 6 | arrow_style_m = 9 THEN
		HOTSPOT2 gs_ArrowHalfWidth,0,				ArrowUNID, gs_ArrowHeight, 1+128	: ArrowUNID=ArrowUNID+1
		HOTSPOT2 gs_ArrowHalfWidth,-gs_ArrowHeight,	ArrowUNID, gs_ArrowHeight, 2		: ArrowUNID=ArrowUNID+1
		HOTSPOT2 gs_ArrowHalfWidth,1,				ArrowUNID, gs_ArrowHeight, 3		: ArrowUNID=ArrowUNID+1

		HOTSPOT2 -gs_ArrowHalfWidth,0,					ArrowUNID, gs_ArrowHeight, 1+128	: ArrowUNID=ArrowUNID+1
		HOTSPOT2 -gs_ArrowHalfWidth,-gs_ArrowHeight,	ArrowUNID, gs_ArrowHeight, 2		: ArrowUNID=ArrowUNID+1
		HOTSPOT2 -gs_ArrowHalfWidth,1,					ArrowUNID, gs_ArrowHeight, 3		: ArrowUNID=ArrowUNID+1

		HOTSPOT2 0,					-gs_ArrowHeight,	ArrowUNID, gs_ArrowHalfWidth, 1+128	: ArrowUNID=ArrowUNID+1
		HOTSPOT2 gs_ArrowHalfWidth,	-gs_ArrowHeight,	ArrowUNID, gs_ArrowHalfWidth, 2		: ArrowUNID=ArrowUNID+1
		HOTSPOT2 -1,				-gs_ArrowHeight,	ArrowUNID, gs_ArrowHalfWidth, 3		: ArrowUNID=ArrowUNID+1

		HOTSPOT2 0,					-gs_ArrowHeight,	ArrowUNID, gs_ArrowHalfWidth, 1+128 : ArrowUNID=ArrowUNID+1
		HOTSPOT2 -gs_ArrowHalfWidth,-gs_ArrowHeight,	ArrowUNID, gs_ArrowHalfWidth, 2		: ArrowUNID=ArrowUNID+1
		HOTSPOT2 1,					-gs_ArrowHeight,	ArrowUNID, gs_ArrowHalfWidth, 3		: ArrowUNID=ArrowUNID+1
	ENDIF
RETURN


"left rail":

	if bShowRailOn1stRun then
		ADD2 leftRailOffset+leftRailFrameThk/2,-leftRailOvhgBottom
		ROT2 90

		lraSimple=(nRisers1stRun-1)*treadDepth+leftRailOvhgBottom
		lraComplex=(nRisers1stRun-2)*treadDepth
		additionXComplex=leftRailOvhgBottom+treadDepth/2
		additionZComplex=leftRailOvhgBottom*tan(ang)
		hrovL=treadDepth/2+leftRailOvhgBottom
		hrovR=treadDepth/2
		postNumber = int(nRisers1stRun/2+EPS)
		railAngle	= ang
		side = SIDE_LEFT
		gosub "callRailsForStair"

		DEL 2
	endif

	! --- POST & Rail on the landing (left side_1) -----------------------------
	if bShowRailOn1stLanding1 then
		ADD2 leftRailOffset+leftRailFrameThk/2,(nRisers1stRun-1)*treadDepth
		ROT2 90

		lraSimple=flightWidth-leftRailOffset-leftRailFrameThk
		lraComplex=flightWidth-leftRailOffset-leftRailFrameThk
		hrovL=leftRailPostSize/2
		hrovR=-leftRailPostSize/2
		postNumber = (flightWidth-leftRailOffset-leftRailFrameThk)*2 + 1
		railAngle	= ang
		side = SIDE_LEFT
		gosub "callRailsForLanding"

		DEL 2
	endif

	! --- POST & Rail on the landing (left side_2) -----------------------------
	if bShowRailOn1stLanding2 then
	ADD2 leftRailOffset,b-leftRailOffset-leftRailFrameThk/2-gapToFirstTread

		lraSimple=flightWidth-leftRailOffset-treadDepth
		lraComplex=flightWidth-leftRailOffset-treadDepth-leftRailPostSize
		hrovL=leftRailPostSize/2
		hrovR=leftRailPostSize/2
		postNumber = (flightWidth-leftRailOffset-treadDepth)*2 + 1
		railAngle	= ang
		side = SIDE_LEFT
		gosub "callRailsForLanding"

		DEL 1
	endif

	! ---  Rail on 2nd Run -----------------------------------------------------
	if bShowRailOn2ndRun then
		ADD2 flightWidth-treadDepth,b-leftRailOffset-leftRailFrameThk/2-gapToFirstTread

		lraSimple=(nRisers2ndRun+1)*treadDepth+leftRailOvhgTop
		lraComplex=(nRisers2ndRun)*treadDepth
		additionXComplex=treadDepth/2
		additionZComplex=0
		hrovL=treadDepth/2
		hrovR=treadDepth/2+leftRailOvhgTop
		postNumber = int(nRisers2ndRun/2+EPS) + 1
		railAngle	= ang
		side = SIDE_LEFT
		gosub "callRailsForStair"

		DEL 1
	endif

return


"right rail":

	if bShowRailOn1stRun then
		ADD2 flightWidth-rightRailOffset-rightRailFrameThk/2,-rightRailOvhgBottom
		ROT2 90

		lraSimple=(nRisers1stRun-1)*treadDepth+rightRailOvhgBottom+min(0,rightRailOffset)
		lraComplex=(nRisers1stRun-2)*treadDepth+min(0,rightRailOffset)
		additionXComplex=rightRailOvhgBottom+treadDepth/2
		additionZComplex=rightRailOvhgBottom*tan(ang)
		hrovL=treadDepth/2+rightRailOvhgBottom
		hrovR=treadDepth/2
		postNumber = int(nRisers1stRun/2+EPS)
		railAngle	= ang
		side = SIDE_RIGHT
		gosub "callRailsForStair"

		DEL 2
	endif

	! --- POST & Rail on the landing (right side_1) ----------------------------
	if bShowRailOn1stLanding1 then
		IF rightRailOffset<rightRailFrameThk then
			ADD2 flightWidth-rightRailFrameThk-rightRailOffset,(nRisers1stRun-1)*treadDepth+rightRailOffset
			poly2_b 4, 1 + 2 * (NOT(bRailAboveBreakLine) + bRailAboveBreakLine * gs_FillAbove) + 4+64, gs_fill_pen, gs_back_pen,
				0, 0, 1,
				rightRailFrameThk, 0, 1,
				rightRailFrameThk, rightRailFrameThk, 1,
				0, rightRailFrameThk, 1
			DEL 1
		ENDIF

		IF rightRailOffset>0.05 THEN
			IF rightRailOffset<0.2 THEN
				ADD2 flightWidth-rightRailOffset,(nRisers1stRun-1)*treadDepth
				ROT2 90
				poly2_b 4, 1 + 2 * (NOT(bRailAboveBreakLine) + bRailAboveBreakLine * gs_FillAbove) + 4+64, gs_fill_pen, gs_back_pen,
					0, 0, 1,
					rightRailOffset, 0, 1,
					rightRailOffset, rightRailFrameThk, 1,
					0, rightRailFrameThk, 1
				DEL 2
			ELSE
				ADD2 flightWidth-rightRailOffset-rightRailFrameThk/2,(nRisers1stRun-1)*treadDepth
				ROT2 90
				IF rightRailType_m = 1 & not(rightRailOffset>0.1) THEN
					! nothing !
				ELSE
					IF rightRailType_m = 8 | rightRailType_m = 9 | rightRailType_m = 10 THEN
						ADD2 0,-rightRailFrameThk/2
						IF rightRailOffset>0 then
							poly2_b 4, 1 + 2 * (NOT(bRailAboveBreakLine) + bRailAboveBreakLine * gs_FillAbove) + 4+64, gs_fill_pen, gs_back_pen,
								0, 0, 1,
								rightRailOffset, 0, 1,
								rightRailOffset, rightRailFrameThk, 1,
								0, rightRailFrameThk, 1
						endif
						DEL 1
					ELSE
						lraSimple=rightRailOffset
						lraComplex=rightRailOffset
						hrovL=rightRailPostSize/2
						hrovR=-rightRailPostSize/2
						postNumber = rightRailOffset*2
						railAngle	= ang
						side = SIDE_RIGHT
						gosub "callRailsForLanding"
					ENDIF
				ENDIF
				DEL 2
			ENDIF
		ENDIF
	endif

	! --- POST & Rail on the landing (right side_2) ----------------------------
	if bShowRailOn1stLanding2 then
		IF rightRailOffset*tan(ang)>treadHeight THEN
			IF rightRailOffset<0.2 & rightRailOffset>0.05 THEN
				ADD2 flightWidth-rightRailOffset,(nRisers1stRun-1)*treadDepth+rightRailOffset
				ROT2 0
				poly2_b 4, 1 + 2 * (NOT(bRailAboveBreakLine) + bRailAboveBreakLine * gs_FillAbove) + 4+64, gs_fill_pen, gs_back_pen,
					0, 0, 1,
					rightRailOffset, 0, 1,
					rightRailOffset, rightRailFrameThk, 1,
					0, rightRailFrameThk, 1
				DEL 2
			ELSE
				ADD2 flightWidth-rightRailOffset,(nRisers1stRun-1)*treadDepth+rightRailOffset+rightRailFrameThk/2
				ROT2 0
				IF rightRailOffset>treadDepth+0.08 & rightRailOffset-treadDepth>2*rightRailFrameThk+0.001 then
					IF rightRailType_m = 8 | rightRailType_m = 9 | rightRailType_m = 10 THEN
						ADD2 0,-rightRailFrameThk/2
						poly2_b 4, 1 + 2 * (NOT(bRailAboveBreakLine) + bRailAboveBreakLine * gs_FillAbove) + 4+64, gs_fill_pen, gs_back_pen,
							0, 0, 1,
							rightRailOffset-treadDepth, 0, 1,
							rightRailOffset-treadDepth, rightRailFrameThk, 1,
							0, rightRailFrameThk, 1
						DEL 1
					else
						lraSimple=rightRailOffset	! rightRailOffset-treadDepth ???
						lraComplex=rightRailOffset-treadDepth
						hrovL=-rightRailPostSize/2
						hrovR=rightRailPostSize/2
						postNumber = rightRailOffset*2
						railAngle	= ang
						side = SIDE_RIGHT
						gosub "callRailsForLanding"
					ENDIF
				ENDIF
				DEL 2
			ENDIF
		ENDIF
	endif

	! --- Railing on the 2nd run -----------------------------------------------
	if bShowRailOn2ndRun then
		ADD2 flightWidth-min(rightRailOffset,treadDepth),(nRisers1stRun-1)*treadDepth+rightRailFrameThk/2+rightRailOffset
		ROT2 0

		lraSimple=(nRisers2ndRun)*treadDepth+min(rightRailOffset,treadDepth)+rightRailOvhgTop
		lraComplex=(nRisers2ndRun-1)*treadDepth
		additionXComplex=treadDepth/2+min(rightRailOffset,treadDepth)
		additionZComplex=min(rightRailOffset*tan(ang),treadHeight)
		hrovL=treadDepth/2+min(rightRailOffset,treadDepth)
		hrovR=treadDepth/2+rightRailOvhgTop
		postNumber = int(nRisers2ndRun/2+EPS) + 1
		railAngle	= ang
		side = SIDE_RIGHT
		gosub "callRailsForStair"

		DEL 2
	endif

return


"callRailsForStair":
! ------------------------------------------------------------------------------
!	lraSimple
!	lraComplex
!	additionXComplex
!	additionZComplex
!	hrovL: rail overhang start
!	hrovR: rail overhang end
!	postNumber:   number of posts
!	side: SIDE_LEFT or SIDE_RIGHT
! ==============================================================================
	ani = railAngle
	additionXComplex = additionXComplex
	additionZComplex = additionZComplex
	if side = SIDE_LEFT then
		dsComplex = leftRailDist+treadDepth/2*tan(ang)
	else
		dsComplex = rightRailDist+treadDepth/2*tan(ang)
	endif

	gosub "callRails"
return


! ==============================================================================
"callRailsForLanding":
! ------------------------------------------------------------------------------
!	lraSimple
!	lraComplex
!	hrovL: rail overhang start
!	hrovR: rail overhang end
!	postNumber:   number of posts
!	side: SIDE_LEFT or SIDE_RIGHT
! ==============================================================================
	ani = 0
	additionZComplex = 0
	if side = SIDE_LEFT then
		additionXComplex = leftRailPostSize/2
		dsComplex = leftRailDist
	else
		additionXComplex = rightRailPostSize/2
		dsComplex = rightRailDist
	endif

	gosub "callRails"
return


! ==============================================================================
"callRails":
! ------------------------------------------------------------------------------
!	ani
!	additionXComplex
!	additionZComplex
!	dsComplex
!  ------------------
!	side: SIDE_LEFT or SIDE_RIGHT
!	lraSimple
!	lraComplex
!	hrovL: rail overhang start
!	hrovR: rail overhang end
!	postNumber:   number of posts
! ==============================================================================
	if side = SIDE_LEFT then
		railBarDepth		= leftRailBarDepth
		railBarDiam			= railBarDepth
		railHeight			= leftRailHeight
		railBarThk			= leftRailBarThk
		railFrameThk		= leftRailFrameThk
		railDist			= leftRailDist
		railType_m			= leftRailType_m
		railPostSize		= leftRailPostSize
		nBarsRail			= nBarsLeftRail
		if rightRailType_m = RAIL_WIRED then
			railBarThk		= leftRailWireThk
			railBarDepth	= leftRailWireDepth
			railBarDiam		= leftRailWireDiam
		endif
		bComplexRail		= bComplexRailLeft
	else
		railBarDepth		= rightRailBarDepth
		railBarDiam			= railBarDepth
		railHeight			= rightRailHeight
		railBarThk			= rightRailBarThk
		railFrameThk		= rightRailFrameThk
		railDist			= rightRailDist
		railType_m			= rightRailType_m
		railPostSize		= rightRailPostSize
		nBarsRail			= nBarsRightRail
		if rightRailType_m = RAIL_WIRED then
			railBarThk		= rightRailWireThk
			railBarDepth	= rightRailWireDepth
			railBarDiam		= rightRailWireDiam
		endif
		bComplexRail		= bComplexRailRight
	endif

	add2 additionXComplex * bComplexRail, 0
	call "railSymbol2D_m" parameters all	cfs					= 1,
											bEnable2DPosts		= bComplexRail,
											ptyp_m				= 1,
											ani					= ani,
											rom_m				= 1,
											rmm_m				= 1,
											LengthSize			= 0,
											lra					= lraSimple * NOT(bComplexRail) + lraComplex * (bComplexRail),
											hr					= railHeight,
											hrPerp				= railHeight,
											ab					= 0,
											rb					= 0,
											ds					= railDist,
											gs_AngleL			= 90,
											gs_AngleR			= 90,
											iHandRailStyle		= 1,
											handRailDiameter	= railFrameThk,
											handRailWidth		= railFrameThk,
											hroL				= hrovL,
											hroR				= hrovR,
											np					= postNumber,
											pd					= railPostSize,
											pw					= railPostSize,
											pth					= railFrameThk,
											gs_cont_pen			= railPen,
											sa					= 0,
											bBreakRailLine		= bBreakRailLine,
											breakLineAngle		= brLineAngle,
											breakLineDist		= breakLineDist,
											breakLineWidth		= breakLineW,
											bRailAboveBreakLine	= bRailAboveBreakLine,
											bShowRailBelowBrL	= bShowRailPart1,
											bShowRailAboveBrL	= bShowRailPart2,
											bPostNoCalculation	= (railType_m = 9),
											pit_m				= 2,
											dp					= treadDepth
	del 1

	bShowRailPart1			= 0
	bShowRailPart2			= 0

return

"carriage":

	drawindex 10

	if beamNum = 1 then
		add2 carriageBaseDist / 2 - beamThk / 2 - beamOffsetRight, 0
	else
		add2 carriageBaseDist - beamThk - beamOffsetRight, 0
	endif
	for wb = 1 to beamNum
		if bBreakCarriageLine then
			lengthMod	= -(carriageBaseDist - beamOffsetLeft - beamOffsetRight - beamThk) * tan(brLineAngle) * (wb = 2)
			if bShowCarriagePart1 then
				pen carriagePen
				if aboveStory then
					LINE_TYPE carriageLineType
				else
					if	(drawPart[1] and drawDashed[1]) then
						LINE_TYPE dash_line
					else
						LINE_TYPE carriageLineType
					endif
				endif

				poly2_b 4, 1+2+4+64, gs_fill_pen, gs_back_pen,
					0, 0, 1,
					beamThk, 0, 1,
					beamThk, carrBreakLineDist + beamThk * tan(brLineAngle) / 2 + lengthMod, 1,
					0, carrBreakLineDist - beamThk * tan(brLineAngle) / 2 + lengthMod, 1
			endif

			if bShowCarriagePart2 then
				pen carriagePen
				if aboveStory then
					LINE_TYPE carriageLineType
				else
					if	(drawPart[2] and drawDashed[2]) then
						LINE_TYPE dash_line
					else
						LINE_TYPE carriageLineType
					endif
				endif

				poly2_b 4, 1 + 2 * gs_FillAbove + 4+64, gs_fill_pen, gs_back_pen,
					0, carrBreakLineDist - beamThk * tan(brLineAngle) / 2 + lengthMod + carrBreakLineWidth, 1,
					beamThk, carrBreakLineDist + beamThk * tan(brLineAngle) / 2 + lengthMod + carrBreakLineWidth, 1,
					beamThk, beamLength, 1,
					0, beamLength, 1
			endif
		else
			if aboveStory then
				LINE_TYPE carriageLineType
			else
			pen carriagePen
				if drawPart[3] then
					if (drawDashed[3]) then
						LINE_TYPE dash_line
					else
						LINE_TYPE carriageLineType
					endif
				else
					if	(NOT(bCarrAboveBreakLine) and drawDashed[1]) or\
						((bCarrAboveBreakLine) and drawDashed[2]) then
						LINE_TYPE dash_line
					else
						LINE_TYPE carriageLineType
					endif
				endif
			endif

			poly2_b 4, 1 + 2 * (NOT(bCarrAboveBreakLine) + bCarrAboveBreakLine * gs_FillAbove) + 4+64, gs_fill_pen, gs_back_pen,
				0, 0, 1,
				beamThk, 0, 1,
				beamThk, beamLength, 1,
				0, beamLength, 1
		endif
		add2 -carriageBaseDist + beamThk + beamOffsetLeft + beamOffsetRight, 0
	next wb
	del beamNum + 1

return

]]>
</Script_2D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_1D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
EPS=0.0001

SIDE_LEFT				= 1
SIDE_RIGHT				= 2

DET2D_SCALESENSITIVE	= 1
DET2D_CUSTOM			= 2

DET3D_OFF      = 0
DET3D_SIMPLE   = 1
DET3D_DETAILED = 2
DET3D_DRAFT    = 3

dim stArrowHeadStyles[9]
	stArrowHeadStyles[1] =  `Стиль 1`
	stArrowHeadStyles[2] =  `Стиль 2`
	stArrowHeadStyles[3] =  `Стиль 3`
	stArrowHeadStyles[4] =  `Стиль 4`
	stArrowHeadStyles[5] =  `Стиль 5`
	stArrowHeadStyles[6] =  `Стиль 6`
	stArrowHeadStyles[7] =  `Стиль 7`
	stArrowHeadStyles[8] =  `Стиль 8`
	stArrowHeadStyles[9] =  `Стиль 9`

dim stStartSymbolStyles[4]
	stStartSymbolStyles[1] = `Стиль 1`
	stStartSymbolStyles[2] = `Стиль 2`
	stStartSymbolStyles[3] = `Стиль 3`
	stStartSymbolStyles[4] = `Нет`

dim stPostSymbolType[5]
	stPostSymbolType[1] = `Тип 1`
	stPostSymbolType[2] = `Тип 2`
	stPostSymbolType[3] = `Тип 3`
	stPostSymbolType[4] = `Тип 4`
	stPostSymbolType[5] = `Нет`

dim stRailPosition[4]
	stRailPosition[1] = `Оба`
	stRailPosition[2] = `Справа`
	stRailPosition[3] = `Слева`
	stRailPosition[4] = `Нет`

dim stRailTypes[11]
	stRailTypes[ 1] = `Балюстрада Ограждения`
	stRailTypes[ 2] = `Параллельные Прутья`
	stRailTypes[ 3] = `Простой Брусок`
	stRailTypes[ 4] = `Объемная Рама с Панелью`
	stRailTypes[ 5] = `Объемная Рама`
	stRailTypes[ 6] = `Панель Ограждения`
	stRailTypes[ 7] = `Стойки Ограждения с Балясинами`
	stRailTypes[ 8] = `Стойки с Леерами`
	stRailTypes[ 9] = `Деревянная Балюстрада`
	stRailTypes[10] = `Стойки Ограждения с Брусками`
	stRailTypes[11] = `Как и Правое`

dim stShowCarriageValues[5]
	stShowCarriageValues[1]	= `Всегда`
	stShowCarriageValues[2]	= `До 1:20`
	stShowCarriageValues[3]	= `До 1:50`
	stShowCarriageValues[4]	= `До 1:100`
	stShowCarriageValues[5]	= `До 1:200`

RAILPOS_BOTH				= 1
RAILPOS_RIGHT				= 2
RAILPOS_LEFT				= 3
RAILPOS_NONE				= 4

RAIL_BALUSTRADE				= 1
RAIL_PARALLEL_BARS			= 2
RAIL_SIMPLE_BAR				= 3
RAIL_SOLID_FRAME_FILLED		= 4
RAIL_SOLID_FRAME			= 5
RAIL_SOLID					= 6
RAIL_POST_WITH_BALUSTERS	= 7
RAIL_WIRED					= 8
RAIL_WOODEN_BALUSTRADE		= 9
RAIL_POST_WITH_BARS			= 10
RAIL_SAMERAILS				= 11

RECTANGULAR					= 1
ROUND						= 2

dim stDetlevel2D[2]
	stDetlevel2D[1] = `Зависит от Масштаба`
	stDetlevel2D[2] = `Специальный`

dim stDetlevel3D[3]
	stDetlevel3D[1] = `Откл.`
	stDetlevel3D[2] = `Простой`
	stDetlevel3D[3] = `Детальный`

dim stParameterType[2]
	stParameterType[1] = `Высота Ступени`
	stParameterType[2] = `Кол-во Подступенков на Марш`

dim stTopTreadLevel[2]
	stTopTreadLevel[1] = `Верхняя Ступень на Уровне Пола`
	stTopTreadLevel[2] = `Верхняя Ступень Ниже Уровня Пола`

dim stStairBaseType[3]
	stStairBaseType[1] = `Бетон`
	stStairBaseType[2] = `Дерево`
	stStairBaseType[3] = `Нет`

dim stRiseRunText[7]
	stRiseRunText[1] = `Кол-во x Подступенок = Высота Марша`
	stRiseRunText[2] = `Кол-во Проступей/Подступенок @`
	stRiseRunText[3] = `Кол-во х Проступь х Подступенок`
	stRiseRunText[4] = `Кол-во х Подступенок х Проступь`
	stRiseRunText[5] = `Кол-во <текст подступенка> Подступенок / Проступь`
	stRiseRunText[6] = `Кол-во <текст подступенка> // Подступенок / Проступь`
	stRiseRunText[7] = `Специальный Текст`


dim stTextOrientation[3]
	stTextOrientation[1] = `Выровнять по Символу`
	stTextOrientation[2] = `Параллельно Линии Всхода`
	stTextOrientation[3] = `Читаемый`

dim stWalkingDirUPDN[6]
	stWalkingDirUPDN[1] = `Нет`
	stWalkingDirUPDN[2] = `Вверху`
	stWalkingDirUPDN[3] = `Вниз в Нижней Части`
	stWalkingDirUPDN[4] = `Вниз в Верхней Части`
	stWalkingDirUPDN[5] = `Оба`
	stWalkingDirUPDN[6] = `Оба, Зависит от Этажа`

dim stLineTypeAboveBreak[2]
	stLineTypeAboveBreak[1] = `Штриховая`
	stLineTypeAboveBreak[2] = `Сплошная`

dim stBreaklineStyle[3]
	stBreaklineStyle[1]= `Прямой`
	stBreaklineStyle[2]= `Зигзаг`
	stBreaklineStyle[3]= `Зигзаг CHI`

dim stWireType[2]
	stWireType[1]= `Прямоугольные`
	stWireType[2]= `Круглые`


woodBaseThk	= 0.07		! wood base thickness
bet=atn((2*treadDepth)/flightWidth)
ang=ATN(treadHeight/treadDepth)
ftw=0.05
res=16
rescs=12
IF bRiserCover<0.5 THEN riserCoverThk=0

! -------------- 2D Symbol variables --------------

! gs_SymbolType_m
SYMBOL_TYPE1	= 1
SYMBOL_TYPE2	= 2
SYMBOL_TYPE3	= 3
SYMBOL_TYPE4	= 4
SYMBOL_TYPE5	= 5
SYMBOL_TYPE6	= 6
SYMBOL_TYPE7	= 7
SYMBOL_TYPE8	= 8
SYMBOL_TYPE9	= 9
SYMBOL_TYPE10	= 10
SYMBOL_TYPE11	= 11
SYMBOL_TYPE12	= 12
SYMBOL_TYPE13	= 13
SYMBOL_TYPE14	= 14
SYMBOL_TYPE15	= 15
SYMBOL_TYPE16	= 16
SYMBOL_TYPE17	= 17
SYMBOL_TYPE18	= 18
SYMBOL_TYPE19	= 19
SYMBOL_TYPE20	= 20

dim stStairSymbolTypes[20]
	stStairSymbolTypes[ 1] = `Тип 1`
	stStairSymbolTypes[ 2] = `Тип 2`
	stStairSymbolTypes[ 3] = `Тип 3`
	stStairSymbolTypes[ 4] = `Тип 4`
	stStairSymbolTypes[ 5] = `Тип 5`
	stStairSymbolTypes[ 6] = `Тип 6`
	stStairSymbolTypes[ 7] = `Тип 7`
	stStairSymbolTypes[ 8] = `Тип 8`
	stStairSymbolTypes[ 9] = `Тип 9`
	stStairSymbolTypes[10] = `Тип 10`
	stStairSymbolTypes[11] = `Тип 11`
	stStairSymbolTypes[12] = `Тип 12`
	stStairSymbolTypes[13] = `Тип 13`
	stStairSymbolTypes[14] = `Тип 14`
	stStairSymbolTypes[15] = `Тип 15`
	stStairSymbolTypes[16] = `Тип 16`
	stStairSymbolTypes[17] = `Тип 17`
	stStairSymbolTypes[18] = `Тип 18`
	stStairSymbolTypes[19] = `Тип 19`
	stStairSymbolTypes[20] = `Тип 20`

! iSymbolGroup
SYMBOLGROUP_TYPE1	= 1
SYMBOLGROUP_TYPE2	= 2
SYMBOLGROUP_TYPE3	= 3
SYMBOLGROUP_TYPE4	= 4
SYMBOLGROUP_TYPE5	= 5
SYMBOLGROUP_TYPE6	= 6
SYMBOLGROUP_TYPE7	= 7
SYMBOLGROUP_TYPE8	= 8

dim stSymbolGroup[8]
	stSymbolGroup[1] = `Тип 1`
	stSymbolGroup[2] = `Тип 2`
	stSymbolGroup[3] = `Тип 3`
	stSymbolGroup[4] = `Тип 4`
	stSymbolGroup[5] = `Тип 5`
	stSymbolGroup[6] = `Тип 6`
	stSymbolGroup[7] = `Тип 7`
	stSymbolGroup[8] = `Тип 8`

dim	iEnabledSymbolTypes[8][3]
	iEnabledSymbolTypes[1][1] = 1
	iEnabledSymbolTypes[1][2] = 6
	iEnabledSymbolTypes[1][3] = 13

	iEnabledSymbolTypes[2][1] = 2
	iEnabledSymbolTypes[2][2] = 7
	iEnabledSymbolTypes[2][3] = 14

	iEnabledSymbolTypes[3][1] = 3
	iEnabledSymbolTypes[3][2] = 8
	iEnabledSymbolTypes[3][3] = 15

	iEnabledSymbolTypes[4][1] = 4
	iEnabledSymbolTypes[4][2] = 9
	iEnabledSymbolTypes[4][3] = 16

	iEnabledSymbolTypes[5][1] = 5
	iEnabledSymbolTypes[5][2] = 10
	iEnabledSymbolTypes[5][3] = 17

	iEnabledSymbolTypes[6][1] = 4
	iEnabledSymbolTypes[6][2] = 11
	iEnabledSymbolTypes[6][3] = 18

	iEnabledSymbolTypes[7][1] = 4
	iEnabledSymbolTypes[7][2] = 11
	iEnabledSymbolTypes[7][3] = 19

	iEnabledSymbolTypes[8][1] = 5
	iEnabledSymbolTypes[8][2] = 12
	iEnabledSymbolTypes[8][3] = 20


! iScaleType
SCALE_10		= 10
SCALE_20		= 20
SCALE_50		= 50
SCALE_100		= 100
SCALE_200		= 200
SCALE_500		= 500

SCALE_1_1		= 1
SCALE_1_4		= 4
SCALE_1_8		= 8
SCALE_1_16		= 16
SCALE_1_24		= 24
SCALE_1_48		= 48
SCALE_1_96		= 96
SCALE_1_192		= 192
SCALE_CUSTOM	= 999

dim	iScaleType[15]
	iScaleType[1]	= SCALE_10
	iScaleType[2]	= SCALE_20
	iScaleType[3]	= SCALE_50
	iScaleType[4]	= SCALE_100
	iScaleType[5]	= SCALE_200
	iScaleType[6]	= SCALE_500
	iScaleType[7]	= SCALE_1_1
	iScaleType[8]	= SCALE_1_4
	iScaleType[9]	= SCALE_1_8
	iScaleType[10]	= SCALE_1_16
	iScaleType[11]	= SCALE_1_24
	iScaleType[12]	= SCALE_1_48
	iScaleType[13]	= SCALE_1_96
	iScaleType[14]	= SCALE_1_192
	iScaleType[15]	= SCALE_CUSTOM

dim stScaleType[15]
	stScaleType[1]	= `1:10`
	stScaleType[2]	= `1:20`
	stScaleType[3]	= `1:50`
	stScaleType[4]	= `1:100`
	stScaleType[5]	= `1:200`
	stScaleType[6]	= `1:500`

	stScaleType[7]	= `1'=1'-0"`
	stScaleType[8]	= `3"=1'-0"`
	stScaleType[9]	= `1 1/2"=1'-0"`
	stScaleType[10]	= `3/4"=1'-0"`
	stScaleType[11]	= `1/2"=1'-0"`
	stScaleType[12]	= `1/4"=1'-0"`
	stScaleType[13]	= `1/8"=1'-0"`
	stScaleType[14]	= `1/16"=1'-0"`
	stScaleType[15]	= `Специальный Масштаб`

if iScaleChangeSM = SCALE_CUSTOM then
	_iScaleSM = gs_ScaleChangeSM
else
	_iScaleSM = iScaleChangeSM
endif
if iScaleChangeMD = SCALE_CUSTOM then
	_iScaleMD = gs_ScaleChangeMD
else
	_iScaleMD = iScaleChangeMD
endif

! -------------- End of 2D Symbol variables --------------

if nRisers1stRun<1 then nRisers1stRun=1
if nRisers2ndRun<1 then nRisers2ndRun=1

! ---------- Dimension Definition ----------

IF parameterType_m = 2 THEN		! No. of Risers per Run

  A_c=nRisers2ndRun*treadDepth+flightWidth
  B_c=(nRisers1stRun-1)*treadDepth+flightWidth
  zzyzx_c=(nRisers1stRun+nRisers2ndRun)*treadHeight

  VALUES "A" A_c
	A=A_c
  VALUES "B" B_c
	B=B_c
  VALUES "zzyzx" zzyzx_c
	zzyzx=zzyzx_c

  MAXflw=MIN((a-0.6),(b-0.6))

  VALUES "stairSlabThk" RANGE (0,)
  VALUES "treadThickness" RANGE [0,treadHeight-0.02]

  IF ABS(treadThickness)<EPS THEN LOCK "nosing"		!!!treadThickness=0

  maxns=MIN(.1,treadDepth)
  VALUES "nosing" RANGE [0,maxns]
  VALUES "flightWidth" RANGE (0.5,]

  PARAMETERS thd=2*treadHeight+treadDepth
  PARAMETERS nRisers=nRisers1stRun+nRisers2ndRun
  LOCK "preferredTreadHeight", "thd", "nRisers"


ELSE	! Tread height

  Len1=b
  Len2=a
  zzyzx=zzyzx

  totlen=Len1+Len2-2*flightWidth
  nRisers=(zzyzx/preferredTreadHeight)+1
  tdp=totlen/(nRisers-1) 			!! prefered tread depth

  nRisers1stRun=INT((Len1-flightWidth+tdp)/tdp)
  nRisers2ndRun=INT((Len2-flightWidth)/tdp)
  treadDepth=min((Len1-flightWidth)/(nRisers1stRun-1),(Len2-flightWidth)/nRisers2ndRun)   !! real tread depth
  treadHeight=zzyzx/(nRisers1stRun+nRisers2ndRun) 									!! real tread height

  gapToFirstTread=b-flightWidth-(nRisers1stRun-1)*treadDepth
  PARAMETERS gapToFirstTread=gapToFirstTread

  gapAfterLastTread=a-flightWidth-(nRisers2ndRun)*treadDepth
  PARAMETERS gapAfterLastTread=gapAfterLastTread

  PARAMETERS nRisers1stRun=nRisers1stRun
  nRisers1stRun=nRisers1stRun
  PARAMETERS nRisers2ndRun=nRisers2ndRun
  nRisers2ndRun=nRisers2ndRun
  PARAMETERS treadHeight=treadHeight

  LOCK "nRisers1stRun","nRisers2ndRun"

!!!!!!!!!!!!!!!
  VALUES "A" RANGE [flightWidth+0.6,)

  IF A<flightWidth+0.6 THEN
   PARAMETERS A=flightWidth+0.6
   A=flightWidth+0.6
  ENDIF

  VALUES "B" RANGE [flightWidth+0.6,)

  minz=MAX(1,2*treadHeight)
  VALUES "zzyzx" RANGE [minz,)
  IF zzyzx<minz THEN
   PARAMETERS zzyzx=minz
   zzyzx=minz
  ENDIF

  MAXflw=MIN((a-0.6),(b-0.6))

  VALUES "treadHeight"  RANGE [0.03,0.5]
  VALUES "stairSlabThk" RANGE (0,)
  VALUES "flightWidth" RANGE (0.5,MAXflw]
  VALUES "treadThickness" RANGE [0,treadHeight-0.02]

  IF ABS(treadThickness)<EPS THEN LOCK "nosing"	!!!treadThickness=0
  minsz=treadDepth
  maxns=MIN(0.1,minsz)
  VALUES "nosing" RANGE [0,maxns]
!!!!!!!!!!!!!!!

  PARAMETERS treadDepth=treadDepth
  treadDepth=treadDepth

  PARAMETERS nRisers=nRisers1stRun+nRisers2ndRun
  nRisers=nRisers1stRun+nRisers2ndRun

  LOCK "treadHeight" ,"treadDepth", "nRisers", "thd"

ENDIF

if parameterType_m = 2 then gapToFirstTread = 0		! No. of Risers per Run

! --- Rails --------------------------------------------------------------

rightRailOffset = -rightRailOffset
leftRailOffset = -leftRailOffset

IF bSameRails THEN
	leftRailHeight		= rightRailHeight
	leftRailDist		= rightRailDist
	leftRailOffset		= rightRailOffset
	leftRailOvhgBottom	= rightRailOvhgBottom
	leftRailOvhgTop		= rightRailOvhgTop
	leftRailPostSize	= rightRailPostSize
	leftRailFrameThk	= rightRailFrameThk
	nBarsLeftRail		= nBarsRightRail
	leftRailBarThk		= rightRailBarThk
	leftRailBarDepth	= rightRailBarDepth
	leftWireType_m		= rightWireType_m
	leftRailWireThk		= rightRailWireThk
	leftRailWireDepth	= rightRailWireDepth
	leftRailWireDiam	= rightRailWireDiam
ENDIF

bComplexRailRight		= (rightRailType_m > 6)
if bSameRails then
	bComplexRailLeft 	= (rightRailType_m > 6)
else
	bComplexRailLeft 	= (leftRailType_m > 6)
endif

bEnableCarriageLine		= (stairBaseType_m = 2)

]]>
</Script_1D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_VL SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
call "FM_types" parameters all
call "ui_stairs" parameters gs_ui_current_page	= gs_ui_current_page

! ---------- Length Unit ----------
w_units_form = ""
rrr					= request("Linear_dimension", "", w_units_form)
bLinearDimIsMetric	= (strstr(w_units_form, "m") > 0)


! ---------- 3D detail level ----------
values{2} "gs_detlevel_3D_m" 	DET3D_OFF,			stDetlevel3D[1],
								DET3D_SIMPLE,		stDetlevel3D[2],
								DET3D_DETAILED,		stDetlevel3D[3]

if gs_detlevel_3D_m = DET3D_SIMPLE then
	lock "gs_resol"
	hideparameter "gs_resol"
endif

if gs_detlevel_3D_m = DET3D_OFF then
	lock "gs_resol", "gs_shadow"
	hideparameter "gs_resol", "gs_shadow"
endif


!! ---------- 2D detail level ----------
values{2} "gs_detlevel_2D_m"	DET2D_SCALESENSITIVE,	stDetlevel2D[1],
								DET2D_CUSTOM,			stDetlevel2D[2]

!! ---------- Symbol Type ----------
if gs_detlevel_2D_m = DET2D_SCALESENSITIVE then
	values{2} "iSymbolGroup"	SYMBOLGROUP_TYPE1,	stSymbolGroup[1],
								SYMBOLGROUP_TYPE2,	stSymbolGroup[2],
								SYMBOLGROUP_TYPE3,	stSymbolGroup[3],
								SYMBOLGROUP_TYPE4,	stSymbolGroup[4],
								SYMBOLGROUP_TYPE5,	stSymbolGroup[5],
								SYMBOLGROUP_TYPE6,	stSymbolGroup[6],
								SYMBOLGROUP_TYPE7,	stSymbolGroup[7],
								SYMBOLGROUP_TYPE8,	stSymbolGroup[8]

	lock			"gs_SymbolType_m"
	hideparameter	"gs_SymbolType_m"


	!! ----------------- Simple to Middle Scale -----------------
	if bLinearDimIsMetric then
		_iEnableScaleSMTypes	= 2 + 4 + 8 + 16 + 32 + 64
	else
		_iEnableScaleSMTypes	= 128 + 256 + 512 + 1024 + 2048 + 4096 + 8192 + 16384
	endif

	dim _iEnableScaleSMTypeValueList[]
	dim _stEnableScaleSMTypeValueList[]
	j = 1
	for i = 1 to vardim1(iScaleType)
		if bittest(_iEnableScaleSMTypes, i) then
			_iEnableScaleSMTypeValueList[j] = iScaleType[i]
			_stEnableScaleSMTypeValueList[j] = stScaleType[i]
			j = j + 1
		endif
	next i
	_iEnableScaleSMTypeValueList[j] = iScaleType[15]
	_stEnableScaleSMTypeValueList[j] = stScaleType[15]
	values{2} "iScaleChangeSM" _iEnableScaleSMTypeValueList, _stEnableScaleSMTypeValueList
	if iScaleChangeSM = SCALE_CUSTOM then
		values "gs_ScaleChangeSM"	range (1,)
	else
		gs_ScaleChangeSM = iScaleChangeSM
		parameters	gs_ScaleChangeSM = gs_ScaleChangeSM

		lock			"gs_ScaleChangeSM"
		hideparameter	"gs_ScaleChangeSM"
	endif

	
	!! ----------------- Middle to Detailed Scale -----------------
	if bLinearDimIsMetric then
		_iEnableScaleMDTypes	= 2 + 4 + 8 + 16 + 32 + 64
	else
		_iEnableScaleMDTypes	= 128 + 256 + 512 + 1024 + 2048 + 4096 + 8192 + 16384
	endif

	dim _iEnableScaleMDTypeValueList[]
	dim _stEnableScaleMDTypeValueList[]
	j = 1
	for i = 1 to vardim1(iScaleType)
		if bittest(_iEnableScaleMDTypes, i) then
			if iScaleChangeSM = SCALE_CUSTOM then
				if gs_ScaleChangeSM > iScaleType[i] then
					_iEnableScaleMDTypeValueList[j] = iScaleType[i]
					_stEnableScaleMDTypeValueList[j] = stScaleType[i]
					j = j + 1
				else
					i = vardim1(iScaleType)
				endif
			else
				_iEnableScaleMDTypeValueList[j] = iScaleType[i]
				_stEnableScaleMDTypeValueList[j] = stScaleType[i]

				if gs_ScaleChangeSM = _iEnableScaleSMTypeValueList[j] then
					i = vardim1(iScaleType)
				else
					j = j + 1
				endif
			endif
		endif
	next i
	_iEnableScaleMDTypeValueList[j] = iScaleType[15]
	_stEnableScaleMDTypeValueList[j] = stScaleType[15]
	values{2} "iScaleChangeMD" _iEnableScaleMDTypeValueList, _stEnableScaleMDTypeValueList

	if iScaleChangeMD = SCALE_CUSTOM then
		values "gs_ScaleChangeMD"	range (, _iScaleSM)
	else
		gs_ScaleChangeMD = iScaleChangeMD
		parameters	gs_ScaleChangeMD = gs_ScaleChangeMD

		lock			"gs_ScaleChangeMD"
		hideparameter	"gs_ScaleChangeMD"
	endif
	if (gs_ScaleChangeMD >= gs_ScaleChangeSM)  then
		gs_ScaleChangeMD = gs_ScaleChangeSM - 1
		parameters	gs_ScaleChangeMD = gs_ScaleChangeMD
	endif
else
	values{2} "gs_SymbolType_m"	SYMBOL_TYPE1,	stStairSymbolTypes[1],
								SYMBOL_TYPE2,	stStairSymbolTypes[2],
								SYMBOL_TYPE3,	stStairSymbolTypes[3],
								SYMBOL_TYPE4,	stStairSymbolTypes[4],
								SYMBOL_TYPE5,	stStairSymbolTypes[5],
								SYMBOL_TYPE6,	stStairSymbolTypes[6],
								SYMBOL_TYPE7,	stStairSymbolTypes[7],
								SYMBOL_TYPE8,	stStairSymbolTypes[8],
								SYMBOL_TYPE9,	stStairSymbolTypes[9],
								SYMBOL_TYPE10,	stStairSymbolTypes[10],
								SYMBOL_TYPE11,	stStairSymbolTypes[11],
								SYMBOL_TYPE12,	stStairSymbolTypes[12],
								SYMBOL_TYPE13,	stStairSymbolTypes[13],
								SYMBOL_TYPE14,	stStairSymbolTypes[14],
								SYMBOL_TYPE15,	stStairSymbolTypes[15],
								SYMBOL_TYPE16,	stStairSymbolTypes[16],
								SYMBOL_TYPE17,	stStairSymbolTypes[17],
								SYMBOL_TYPE18,	stStairSymbolTypes[18],
								SYMBOL_TYPE19,	stStairSymbolTypes[19],
								SYMBOL_TYPE20,	stStairSymbolTypes[20]

	lock			"iSymbolGroup",
					"gs_ScaleChangeSM",
					"iScaleChangeSM",
					"gs_ScaleChangeMD",
					"iScaleChangeMD"
	hideparameter	"iSymbolGroup",
					"gs_ScaleChangeSM",
					"iScaleChangeSM",
					"gs_ScaleChangeMD",
					"iScaleChangeMD"
endif

! ====================================================================
! Base
! ====================================================================

VALUES "parameterType" stParameterType				! Tread Height, No. of Risers per Run
if GLOB_MODPAR_NAME = "parameterType" then
	for i = 1 to vardim1(stParameterType)
	   if parameterType = stParameterType[i]	then parameterType_m = i
	next i
	parameters parameterType_m = parameterType_m
else
	parameters parameterType = stParameterType[parameterType_m]
endif

values "topTreadLevel"	stTopTreadLevel			! Top Tread at Floor Level, Top Tread below Floor Level
if GLOB_MODPAR_NAME = "topTreadLevel" then
	for i = 1 to vardim1(stTopTreadLevel)
	   if topTreadLevel = stTopTreadLevel[i]	then topTreadLevel_m = i
	next i
	parameters topTreadLevel_m = topTreadLevel_m
else
	parameters topTreadLevel = stTopTreadLevel[topTreadLevel_m]
endif

values "stairBaseType"	stStairBaseType			! Concrete, Wood, None
values "stairBaseType_m" 1, 2, 3
if GLOB_MODPAR_NAME = "stairBaseType" then
	stairBaseType_m = 1
	for i = 1 to vardim1(stStairBaseType)
	   if stairBaseType = stStairBaseType[i]	then stairBaseType_m = i
	next i
	parameters stairBaseType_m = stairBaseType_m
else
	stairBaseType_m = max(1, min(stairBaseType_m, vardim1(stStairBaseType)))
	stairBaseType = stStairBaseType[stairBaseType_m]
	parameters stairBaseType = stairBaseType, stairBaseType_m = stairBaseType_m
endif

! ====================================================================
! 2D Text
! ====================================================================

! ---------- Rise & Run Text ----------

values "gs_RiseRunText" stRiseRunText
values "iRiseRunText" 1, 2, 3, 4, 5, 6, 99

if GLOB_MODPAR_NAME = "gs_RiseRunText" then
	for i = 1 to vardim1(stRiseRunText)
	   if gs_RiseRunText = stRiseRunText[i]	then iRiseRunText = i
	next i
	if gs_RiseRunText = stRiseRunText[7]	then iRiseRunText = 99
	parameters iRiseRunText = iRiseRunText
else
	if iRiseRunText = 99 then
		gs_RiseRunText = stRiseRunText[7]
	else
		gs_RiseRunText = stRiseRunText[max(1, min(iRiseRunText, vardim1(stRiseRunText)) )]
	endif
	parameters gs_RiseRunText = gs_RiseRunText
endif

values "typeTextRotation_RiseRun" stTextOrientation[3],stTextOrientation[1]	! Readable, Align with Symbol
if GLOB_MODPAR_NAME = "typeTextRotation_RiseRun" then
	for i = 1 to 3
		if typeTextRotation_RiseRun = stTextOrientation[i]	then typeTextRotation_RiseRun_m = i-1
	next i
	parameters typeTextRotation_RiseRun_m = typeTextRotation_RiseRun_m
else
	parameters typeTextRotation_RiseRun = stTextOrientation[typeTextRotation_RiseRun_m+1]
endif

! ---------- Numbering ----------

values "typeTextRotation_Num" stTextOrientation[3],stTextOrientation[1]	! Readable, Align with Symbol
if GLOB_MODPAR_NAME = "typeTextRotation_Num" then
	for i = 1 to 3
		if typeTextRotation_Num = stTextOrientation[i]	then typeTextRotation_Num_m = i-1
	next i
	parameters typeTextRotation_Num_m = typeTextRotation_Num_m
else
	parameters typeTextRotation_Num = stTextOrientation[typeTextRotation_Num_m+1]
endif

! ---------- UP & Down ----------

values "walkingDirUPDN" stWalkingDirUPDN			! None, Up, Down at Bottom, Down at Top, Both, Both Sensitive
values "walkingDirUPDN_m" 1, 2, 3, 4, 5, 6
if GLOB_MODPAR_NAME = "walkingDirUPDN" then
	walkingDirUPDN_m = 1
	for i = 1 to vardim1(stWalkingDirUPDN)
	   if walkingDirUPDN = stWalkingDirUPDN[i]	then walkingDirUPDN_m = i
	next i
	parameters walkingDirUPDN_m = walkingDirUPDN_m
else
	walkingDirUPDN_m = max(1, min(walkingDirUPDN_m, vardim1(stWalkingDirUPDN)))
	walkingDirUPDN = stWalkingDirUPDN[walkingDirUPDN_m]
	parameters walkingDirUPDN = walkingDirUPDN, walkingDirUPDN_m = walkingDirUPDN_m
endif

values "typeTextRotation_UpDn" stTextOrientation[3],stTextOrientation[2],stTextOrientation[1]	! Readable, Parallel with, Align with Symbol
if GLOB_MODPAR_NAME = "typeTextRotation_UpDn" then
	for i = 1 to 3
		if typeTextRotation_UpDn = stTextOrientation[i]	then typeTextRotation_UpDn_m = i-1
	next i
	parameters typeTextRotation_UpDn_m = typeTextRotation_UpDn_m
else
	parameters typeTextRotation_UpDn = stTextOrientation[typeTextRotation_UpDn_m+1]
endif


VALUES "lineTypeAboveBreak" stLineTypeAboveBreak
if GLOB_MODPAR_NAME = "lineTypeAboveBreak" then
	for i = 1 to vardim1(stLineTypeAboveBreak)
	   if lineTypeAboveBreak = stLineTypeAboveBreak[i]	then lineTypeAboveBreak_m = i
	next i
	parameters lineTypeAboveBreak_m = lineTypeAboveBreak_m
else
	parameters lineTypeAboveBreak = stLineTypeAboveBreak[lineTypeAboveBreak_m]
endif

VALUES "arrow_style" 	stArrowHeadStyles		! Style 1 - 9
values "arrow_style_m" 1, 2, 3, 4, 5, 6, 7, 8, 9
if GLOB_MODPAR_NAME = "arrow_style" then
	for i = 1 to vardim1(stArrowHeadStyles)
	   if arrow_style = stArrowHeadStyles[i]	then arrow_style_m = i
	next i
	parameters arrow_style_m = arrow_style_m
else
	parameters arrow_style = stArrowHeadStyles[arrow_style_m]
endif

values "gs_StartEndStyle"	stStartSymbolStyles			! Style 1, Style 2, Style 3, None
values "gs_StartEndStyle_m" 1, 2, 3, 4
if GLOB_MODPAR_NAME = "gs_StartEndStyle" then
	gs_StartEndStyle_m = 1
	for i = 1 to vardim1(stStartSymbolStyles)
	   if gs_StartEndStyle = stStartSymbolStyles[i]	then gs_StartEndStyle_m = i
	next i
	parameters gs_StartEndStyle_m = gs_StartEndStyle_m
else
	gs_StartEndStyle_m = max(1, min(gs_StartEndStyle_m, vardim1(stStartSymbolStyles)))
	gs_StartEndStyle = stStartSymbolStyles[gs_StartEndStyle_m]
	parameters gs_StartEndStyle = gs_StartEndStyle, gs_StartEndStyle_m = gs_StartEndStyle_m
endif

if bSimpleZigZag then
	VALUES "breakline_style" stBreaklineStyle[1],stBreaklineStyle[3]	! Straight, Zigzag CHI
	values "breakline_style_m" 1, 3
else
	VALUES "breakline_style" stBreaklineStyle[1],stBreaklineStyle[2]	! Straight, Zigzag
	values "breakline_style_m" 1, 2
endif
if GLOB_MODPAR_NAME = "breakline_style" then
	for i = 1 to vardim1(stBreaklineStyle)
	   if breakline_style = stBreaklineStyle[i]	then breakline_style_m = i
	next i
	parameters breakline_style_m = breakline_style_m
else
	parameters breakline_style = stBreaklineStyle[breakline_style_m]
endif

!values "gs_BreakHeight" range (0,ZZYZX - treadDepth)
VALUES "breakLineWidth"	RANGE (0,treadDepth]

! ====================================================================
! Rail
! ====================================================================

values "rail_m" 1, 2, 3, 4
if GLOB_MODPAR_NAME = "bRightRail" or GLOB_MODPAR_NAME = "bLeftRail" then
	if bRightRail then
		if bLeftRail then
			rail_m = RAILPOS_BOTH
		else
			rail_m = RAILPOS_RIGHT
		endif
	else
		if bLeftRail then
			rail_m = RAILPOS_LEFT
		else
			rail_m = RAILPOS_NONE
		endif
	endif
	parameters rail_m = rail_m
else
	if rail_m = 1 then
		bRightRail	= 1
		bLeftRail	= 1
	endif
	if rail_m = 2 then
		bRightRail	= 1
		bLeftRail	= 0
	endif
	if rail_m = 3 then
		bRightRail	= 0
		bLeftRail	= 1
	endif
	if rail_m = 4 then
		bRightRail	= 0
		bLeftRail	= 0
	endif
	parameters bRightRail	= bRightRail
	parameters bLeftRail	= bLeftRail
endif

if NOT(bRightRail) then
	lock			"rightRailType"
	hideparameter	"rightRailType"
endif
if NOT(bLeftRail) then
	lock			"leftRailType"
	hideparameter	"leftRailType"
endif

VALUES "rightRailType" 	stRailTypes[1],
						stRailTypes[2],
						stRailTypes[3],
						stRailTypes[4],
						stRailTypes[5],
						stRailTypes[6],
						stRailTypes[7],
						stRailTypes[8],
						stRailTypes[9],
						stRailTypes[10]

if GLOB_MODPAR_NAME = "rightRailType" then
	for i = 1 to vardim1(stRailTypes)
	   if rightRailType = stRailTypes[i]	then rightRailType_m = i
	next i
	parameters rightRailType_m = rightRailType_m
else
	parameters rightRailType = stRailTypes[rightRailType_m]
endif

if rail_m = RAILPOS_BOTH then		! Both
	VALUES "leftRailType" 	stRailTypes
else
	VALUES "leftRailType" 	stRailTypes[1],
							stRailTypes[2],
							stRailTypes[3],
							stRailTypes[4],
							stRailTypes[5],
							stRailTypes[6],
							stRailTypes[7],
							stRailTypes[8],
							stRailTypes[9],
							stRailTypes[10]
endif
if GLOB_MODPAR_NAME = "leftRailType" then
	for i = 1 to vardim1(stRailTypes)
	   if leftRailType = stRailTypes[i]	then leftRailType_m = i
	next i
	parameters leftRailType_m = leftRailType_m
else
	parameters leftRailType = stRailTypes[leftRailType_m]
endif
bSameRails = (leftRailType_m = RAIL_SAMERAILS)
parameters bSameRails = bSameRails

values "rightWireType" stWireType	! Rectangular, Round
values "leftWireType" stWireType	! Rectangular, Round

if GLOB_MODPAR_NAME = "leftWireType" then
	for i = 1 to vardim1(stWireType)
	   if leftWireType = stWireType[i]	then leftWireType_m = i
	next i
	parameters leftWireType_m = leftWireType_m
else
	parameters leftWireType = stWireType[leftWireType_m]
endif

if GLOB_MODPAR_NAME = "rightWireType" then
	for i = 1 to vardim1(stWireType)
	   if rightWireType = stWireType[i]	then rightWireType_m = i
	next i
	parameters rightWireType_m = rightWireType_m
else
	parameters rightWireType = stWireType[rightWireType_m]
endif

if rightRailType_m = 2 THEN
	values "nBarsRightRail" 2,3,4,5,6
else
	values "nBarsRightRail" 1,2,3,4,5,6
endif
if leftRailType_m = 2 | bSameRails & rightRailType_m = 2 THEN
	values "nBarsLeftRail" 2,3,4,5,6
else
	values "nBarsLeftRail" 1,2,3,4,5,6
endif

! --- HIDE RAILING PARAMETERS ---

LOCK "ggr","sgr","ggl","sgl"

IF leftRailType_m = RAIL_BALUSTRADE THEN
	HIDEPARAMETER	"leftRailPostSize",
					"nBarsLeftRail"
ENDIF
IF leftRailType_m = RAIL_PARALLEL_BARS THEN
	HIDEPARAMETER	"leftRailBarThk",
					"leftRailPostSize"
ENDIF
IF leftRailType_m = RAIL_SIMPLE_BAR THEN
	HIDEPARAMETER	"leftRailBarThk",
					"leftRailPostSize",
					"nBarsLeftRail"
ENDIF
IF leftRailType_m = RAIL_SOLID_FRAME_FILLED THEN
	HIDEPARAMETER	"leftRailPostSize",
					"leftRailBarDepth",
					"nBarsLeftRail"
ENDIF
IF leftRailType_m = RAIL_SOLID_FRAME THEN
	HIDEPARAMETER	"leftRailPostSize",
					"leftRailBarDepth",
					"nBarsLeftRail",
					"leftRailBarThk"
ENDIF
IF leftRailType_m = RAIL_SOLID THEN
	HIDEPARAMETER	"leftRailPostSize",
					"leftRailBarDepth",
					"nBarsLeftRail",
					"leftRailBarThk"
ENDIF
IF leftRailType_m = RAIL_WIRED THEN
	HIDEPARAMETER	"leftRailBarDepth"
	if leftWireType_m = 1 then HIDEPARAMETER	"leftRailWireDiam"
	if leftWireType_m = 2 then HIDEPARAMETER	"leftRailWireThk",
												"leftRailWireDepth"
else
	HIDEPARAMETER	"leftWireType",
					"leftRailWireThk",
					"leftRailWireDepth",
					"leftRailWireDiam"
ENDIF
IF leftRailType_m = RAIL_WOODEN_BALUSTRADE THEN
	HIDEPARAMETER	"leftRailPostSize",
					"leftRailBarDepth",
					"nBarsLeftRail",
					"leftRailBarThk"
ENDIF



IF rightRailType_m = RAIL_BALUSTRADE THEN
	HIDEPARAMETER	"rightRailPostSize",
					"nBarsRightRail"
ENDIF
IF rightRailType_m = RAIL_PARALLEL_BARS THEN
	HIDEPARAMETER	"rightRailBarThk",
					"rightRailPostSize"
ENDIF
IF rightRailType_m = RAIL_SIMPLE_BAR THEN
	HIDEPARAMETER	"rightRailBarThk",
					"rightRailPostSize",
					"nBarsRightRail"
ENDIF
IF rightRailType_m = RAIL_SOLID_FRAME_FILLED THEN
	HIDEPARAMETER	"rightRailPostSize",
					"rightRailBarDepth",
					"nBarsRightRail"
ENDIF
IF rightRailType_m = RAIL_SOLID_FRAME THEN
	HIDEPARAMETER	"rightRailPostSize",
					"rightRailBarDepth",
					"nBarsRightRail",
					"rightRailBarThk"
ENDIF
IF rightRailType_m = RAIL_SOLID THEN
	HIDEPARAMETER	"rightRailPostSize",
					"rightRailBarDepth",
					"nBarsRightRail",
					"rightRailBarThk"
ENDIF
IF rightRailType_m = RAIL_WIRED THEN
	HIDEPARAMETER	"rightRailBarDepth"
	if rightWireType_m = 1 then HIDEPARAMETER	"rightRailWireDiam"
	if rightWireType_m = 2 then HIDEPARAMETER	"rightRailWireThk",
												"rightRailWireDepth"
else
	HIDEPARAMETER	"rightWireType",
					"rightRailWireThk",
					"rightRailWireDepth",
					"rightRailWireDiam"
ENDIF
IF rightRailType_m = RAIL_WOODEN_BALUSTRADE THEN
	HIDEPARAMETER	"rightRailPostSize",
					"rightRailBarDepth",
					"nBarsRightRail",
					"rightRailBarThk"
ENDIF

IF rail_m = RAILPOS_NONE | rail_m = RAILPOS_LEFT THEN		! None, Left
	HIDEPARAMETER "rightRailType", "ggr", "rightRailHeight", "rightRailDist", "rightRailOffset", "sgr",
		"rightRailFrameThk", "rightRailBarThk"
ENDIF
IF rail_m = RAILPOS_NONE | rail_m = RAILPOS_RIGHT THEN		! None, Right
	HIDEPARAMETER "leftRailType", "ggl", "leftRailHeight", "leftRailDist", "leftRailOffset", "sgl",
		"leftRailFrameThk", "leftRailBarThk"
ENDIF

IF rail_m = RAILPOS_NONE THEN HIDEPARAMETER "matPost","matHandrail","matSurface","matBar"		! None

IF bSameRails or NOT(bLeftRail) THEN
	HIDEPARAMETER	"ggl",
					"leftRailHeight",
					"leftRailDist",
					"leftRailOffset",
					"sgl",
					"leftRailHeight",
					"leftRailDist",
					"leftRailOffset",
					"leftRailOvhgBottom",
					"leftRailWireDiam",
					"leftWireType",
					"leftRailWireThk",
					"leftRailWireDepth",
					"leftRailOvhgTop",
					"leftRailPostSize",
					"leftRailFrameThk",
					"nBarsLeftRail",
					"leftRailBarThk",
					"leftRailBarDepth"
ENDIF
IF NOT(bRightRail) THEN
	HIDEPARAMETER	"ggr",
					"rightRailHeight",
					"rightRailDist",
					"rightRailOffset",
					"sgr",
					"rightRailHeight",
					"rightRailDist",
					"rightRailOffset",
					"rightRailOvhgBottom",
					"rightRailWireDiam",
					"rightWireType",
					"rightRailWireThk",
					"rightRailWireDepth",
					"rightRailOvhgTop",
					"rightRailPostSize",
					"rightRailFrameThk",
					"nBarsRightRail",
					"rightRailBarThk",
					"rightRailBarDepth"
ENDIF

! ==============================================================================
! Symbolic 2D
! ==============================================================================

values "postSymbolType" stPostSymbolType
values "iPostSymbolType" 1, 2, 3, 4, 0
if GLOB_MODPAR_NAME = "postSymbolType" then
	iPostSymbolType = 1
	if postSymbolType = stPostSymbolType[2] then iPostSymbolType = 2
	if postSymbolType = stPostSymbolType[3] then iPostSymbolType = 3
	if postSymbolType = stPostSymbolType[4] then iPostSymbolType = 4
	if postSymbolType = stPostSymbolType[5] then iPostSymbolType = 0
	parameters iPostSymbolType = iPostSymbolType
else
	postSymbolType = stPostSymbolType[1]
	if iPostSymbolType = 2 then postSymbolType = stPostSymbolType[2]
	if iPostSymbolType = 3 then postSymbolType = stPostSymbolType[3]
	if iPostSymbolType = 4 then postSymbolType = stPostSymbolType[4]
	if iPostSymbolType = 0 then postSymbolType = stPostSymbolType[5]
	parameters postSymbolType = postSymbolType
endif

if NOT(bShowRailOnFloorPlan) then
	lock			"railLineType",
					"railPen",
					"bSymbolic2D",
					"postSymbolType",
					"iPostSymbolType",
					"postLineType",
					"postPen",
					"bShowRailAboveBreakLine"
	hideparameter	"railLineType",
					"railPen",
					"bSymbolic2D",
					"postSymbolType",
					"iPostSymbolType",
					"postLineType",
					"postPen",
					"bShowRailAboveBreakLine"
endif
if NOT(iPostSymbolType) then
	lock			"postLineType",
					"postPen"
	hideparameter	"postLineType",
					"postPen"
endif
if NOT(bSymbolic2D) then
	lock			"postSymbolType",
					"iPostSymbolType",
					"postLineType",
					"postPen"
	hideparameter	"postSymbolType",
					"iPostSymbolType",
					"postLineType",
					"postPen"
endif
if not(bShowRailAxis) then
	lock 			"railAxisLineType",
					"gs_RailAxisPen"
	hideparameter	"railAxisLineType",
					"gs_RailAxisPen"
endif
if	gs_detlevel_2D_m = DET2D_CUSTOM &\
	(gs_SymbolType_m = 3 |\
	gs_SymbolType_m = 8 |\
	gs_SymbolType_m = 15) then
	lock			"bShowRailAboveBreakLine"
	hideparameter	"bShowRailAboveBreakLine"
endif
if NOT(bShowCarriage) then
	lock			"iShowCarriageUpTo",
					"stShowCarriageUpTo",
					"carriageLineType",
					"carriagePen"
	hideparameter	"stShowCarriageUpTo",
					"carriageLineType",
					"carriagePen"
endif
if NOT(bEnableCarriageLine) then
	lock			"bShowCarriage",
					"iShowCarriageUpTo",
					"stShowCarriageUpTo",
					"carriageLineType",
					"carriagePen"
	hideparameter	"bShowCarriage",
					"stShowCarriageUpTo",
					"carriageLineType",
					"carriagePen"
endif

values "stShowCarriageUpTo" stShowCarriageValues
values "iShowCarriageUpTo" 1, 20, 50, 100, 200

if GLOB_MODPAR_NAME = "stShowCarriageUpTo" then
	iShowCarriageUpTo = 1
	if stShowCarriageUpTo = stShowCarriageValues[2]	then iShowCarriageUpTo = 20
	if stShowCarriageUpTo = stShowCarriageValues[3]	then iShowCarriageUpTo = 50
	if stShowCarriageUpTo = stShowCarriageValues[4]	then iShowCarriageUpTo = 100
	if stShowCarriageUpTo = stShowCarriageValues[5]	then iShowCarriageUpTo = 200
	parameters iShowCarriageUpTo = iShowCarriageUpTo
else
	stShowCarriageUpTo = stShowCarriageValues[1]
	if iShowCarriageUpTo = 20	then stShowCarriageUpTo = stShowCarriageValues[2]
	if iShowCarriageUpTo = 50	then stShowCarriageUpTo = stShowCarriageValues[3]
	if iShowCarriageUpTo = 100	then stShowCarriageUpTo = stShowCarriageValues[4]
	if iShowCarriageUpTo = 200	then stShowCarriageUpTo = stShowCarriageValues[5]
	parameters stShowCarriageUpTo = stShowCarriageUpTo
endif

! ====================================================================
! End Of Rail
! ====================================================================

! --- Pens ---

dim iPenNumber[255]
for i=1 to 255
	iPenNumber[i]=i
next i

values "gs_cont_pen"		iPenNumber
values "gs_DashLinePen"		iPenNumber
values "railPen"			iPenNumber
values "gs_RailAxisPen"		iPenNumber
values "postPen"			iPenNumber
values "carriagePen"		iPenNumber
values "gs_fill_pen"		iPenNumber
values "gs_wLinePen"		iPenNumber
values "gs_NumTextPen"		iPenNumber
values "gs_text_pen"		iPenNumber
values "UPDNfontpen"		iPenNumber
values "gs_desc_text_pen"	iPenNumber
values "gs_LinePenStUp"		iPenNumber
values "penLineStringer" 	iPenNumber
values "penFillStringer" 	iPenNumber
values "penLineTread" 		iPenNumber
values "penFillTread" 		iPenNumber
values "penLineRiser" 		iPenNumber
values "penFillRiser" 		iPenNumber

values "stairSlabThk" range (0,)
values "rightRailHeight" range [0.3,]
values "leftRailHeight" range [0.3,]
values "rightRailDist" range [0,]
values "leftRailDist" range [0,]
values "rightRailOffset" range [-flightWidth/3,flightWidth/3]
values "leftRailOffset" range [-flightWidth/3,]
values "woodBaseOffset" range [0,flightWidth/2-0.05)


IF stairBaseType_m <> 2 THEN HIDEPARAMETER "woodBaseOffset"		! Wood
IF stairBaseType_m = 3 THEN HIDEPARAMETER "stairSlabThk"		! None

! --- HIDE MATERIAL PARAMETERS ---

! None
IF stairBaseType_m = 3 THEN HIDEPARAMETER 	"matBase",	
											"penLineStringer",
											"typeFillStringer",
											"penFillStringer",
											"penBackFillStringer"

IF treadThickness<EPS THEN HIDEPARAMETER "matTread",
											"penLineTread",
											"typeFillTread",
											"penFillTread",
											"penBackFillTread"

! ==============================================================================
! Settings of 2D Symbol Type
! ==============================================================================

IF bRiserCover=0 THEN HIDEPARAMETER "riserCoverThk","matRiser",
									"penLineRiser",
									"typeFillRiser",
									"penFillRiser",
									"penBackFillRiser"

! --- GENERAL SETTINGS ---
	LOCK	"gs_ArrowFill","gs_ArrowHeight","gs_ArrowHalfWidth",
			"gs_StartEndFill","gs_StartWidth","gs_StartHeight",
			"DirNumText_X","DirNumText_Y",
			"DirUPDN_X","DirUPDN_Y","AngUPDN",
			"bSameRails","breakLineWidth"

	IF bShowWalkLine=0 THEN
		 HIDEPARAMETER 	"gs_wLineType1","gs_wLineTypeAbove",
						"gs_wLinePen","arrow_style","gs_ArrowFillPen","gs_ArrowFillPenAbove", "bShowWalkLineAboveBreakline", "gs_circleRadius",
						"gs_StartEndStyle","gs_StartEndFillPen","bShowRiseAndRunText","walkingDirUPDN","UPDNfontsize","gs_text_size_pt_UpDn"

		 LOCK	"gs_wLineType1","gs_wLineTypeAbove",
				"gs_wLinePen","arrow_style","gs_ArrowFillPen","gs_ArrowFillPenAbove", "bShowWalkLineAboveBreakline", "gs_circleRadius",
				"gs_StartEndStyle","gs_StartEndFillPen","bShowRiseAndRunText","walkingDirUPDN","UPDNfontsize","gs_text_size_pt_UpDn"
	ENDIF

	IF arrow_style_m = 1 | arrow_style_m = 2 | arrow_style_m = 3 THEN
		 lock 	"gs_ArrowFillPen","gs_ArrowFillPenAbove"
		 HIDEPARAMETER 	"gs_ArrowFillPen","gs_ArrowFillPenAbove"
	ENDIF

	IF gs_StartEndStyle_m = 3 | gs_StartEndStyle_m = 4  THEN		! Style 3, None
		 HIDEPARAMETER 	"gs_StartEndFillPen"
	ENDIF

	if not(bShowNumbering)  then
		 lock 	"nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen", "typeTextRotation_Num"
		 hideparameter 	"nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen", "typeTextRotation_Num"
	endif

	if not(bShowRiseAndRunText) then
		lock 	"gs_RiseRunText","gs_CustomText1","gs_CustomText2","gs_customText_rise", "fontsize", "gs_text_size_pt", "typeTextRotation_RiseRun", "gs_text_pen", "bUseACLinearUnit"
		hideparameter 	"gs_RiseRunText","gs_CustomText1","gs_CustomText2", "gs_customText_rise", "fontsize", "gs_text_size_pt", "typeTextRotation_RiseRun", "gs_text_pen", "bUseACLinearUnit"
	endif

	if iRiseRunText < 99 then
		hideparameter 	"gs_CustomText1","gs_CustomText2"
		lock		 	"gs_CustomText1","gs_CustomText2"
	else
		if bLinearDimIsMetric then
			hideparameter 	"gs_CustomText2"
			lock		 	"gs_CustomText2"
		endif
	endif

	if iRiseRunText <> 5 & iRiseRunText <> 6 then
		lock "gs_customText_rise"
		hideparameter "gs_customText_rise"
	endif

	if walkingDirUPDN_m = 1 then	! None
		 lock 	"UPDNfontsize","gs_text_size_pt_UpDn", "UPDNfontpen","AngUPDN", "typeTextRotation_UpDn"
		 hideparameter 	"UPDNfontsize", "gs_text_size_pt_UpDn", "UPDNfontpen","AngUPDN", "typeTextRotation_UpDn"
	endif
	if walkingDirUPDN_m = 1 | walkingDirUPDN_m = 2 then	! None, Up
		lock "gs_CustomText_Down"
		hideparameter "gs_CustomText_Down"
	endif

	! --- SETTINGS BY SYMBOL TYPES ---

	if gs_detlevel_2D_m = DET2D_CUSTOM then
		IF gs_SymbolType_m = 1 THEN		! Type 1
			HIDEPARAMETER	"bShowNumbering","nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen",
							"gs_ArrowFillPenAbove","gs_FillAbove"

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=0
				PARAMETERS gs_BreaklineStUp=0
				PARAMETERS gs_TreadStUp=0
				PARAMETERS gs_numaStUp=0
			ENDIF

		ENDIF

		IF gs_SymbolType_m = 2 THEN		! Type 2
			HIDEPARAMETER 	"bShowNumbering","nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen",
							"gs_ArrowFillPenAbove","gs_FillAbove"

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=0
				PARAMETERS gs_BreaklineStUp=0
				PARAMETERS gs_TreadStUp=0
				PARAMETERS gs_numaStUp=0
			ENDIF

		ENDIF

		IF gs_SymbolType_m = 3 THEN		! Type 3
			HIDEPARAMETER 	"bShowNumbering","nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen",
							"gs_ArrowFillPenAbove","gs_FillAbove"

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=0
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=0
				PARAMETERS gs_numaStUp=0
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 4 THEN		! Type 4
			HIDEPARAMETER 	"bShowNumbering","nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen"

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=0
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=0
				PARAMETERS gs_numaStUp=0
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 5 THEN		! Type 5
			HIDEPARAMETER 	"bShowNumbering","nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen"

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=0
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=0
				PARAMETERS gs_numaStUp=0
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 6 THEN		! Type 6
			HIDEPARAMETER "gs_ArrowFillPenAbove","gs_FillAbove"

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=0
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 7 THEN		! Type 7
			HIDEPARAMETER 	"gs_ArrowFillPenAbove","gs_FillAbove"
			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=0
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 8 THEN		! Type 8
			HIDEPARAMETER 	"bShowNumbering","nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen",
							"gs_ArrowFillPenAbove","gs_FillAbove"

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 9 THEN		! Type 9
			HIDEPARAMETER 	"bShowNumbering","nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen"

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 10 THEN		! Type 10
			HIDEPARAMETER 	"bShowNumbering","nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen"
			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 11 THEN		! Type 11

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 12 THEN		! Type 12

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 13 THEN		! Type 13
			HIDEPARAMETER 	"gs_FillAbove"
			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=0
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 14 THEN		! Type 14
			HIDEPARAMETER 	"gs_FillAbove"
			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=0
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 15 THEN		! Type 15
			HIDEPARAMETER 	"bShowNumbering","nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen",
							"gs_FillAbove"

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 16 THEN		! Type 16
			HIDEPARAMETER 	"bShowNumbering","nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen"

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 17 THEN		! Type 17
			HIDEPARAMETER 	"bShowNumbering","nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen"

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 18 THEN		! Type 18

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 19 THEN		! Type 19

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 20 THEN		! Type 20
			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF
	endif
	
! ======================================================================
! Above Home Story
! ======================================================================
IF not(bStorySensitive) THEN
	HIDEPARAMETER "gs_AboveHomeStory"
ELSE
	IF not(gs_BreaklineStUp) THEN HIDEPARAMETER "gs_LowerPartStUp","gs_UpperPartStUp"
	IF gs_BreaklineStUp | not(gs_TreadStUp) THEN HIDEPARAMETER "gs_numaStUp"
	IF not(gs_LowerPartStUp) & not(gs_UpperPartStUp) & gs_BreaklineStUp THEN HIDEPARAMETER "gs_TreadStUp"
ENDIF

! ==============================================================================
! mm / point conversion
! ==============================================================================

MM_IN_A_DOT = 25.4 / 72

if GLOB_MODPAR_NAME = "gs_text_size_pt_UpDn" then
	UPDNfontsize = gs_text_size_pt_UpDn * MM_IN_A_DOT
	parameters UPDNfontsize = UPDNfontsize
else
	gs_text_size_pt_UpDn = UPDNfontsize / MM_IN_A_DOT
	parameters gs_text_size_pt_UpDn = gs_text_size_pt_UpDn
endif

if GLOB_MODPAR_NAME = "gs_text_size_pt" then
	fontsize = gs_text_size_pt * MM_IN_A_DOT
	parameters fontsize = fontsize
else
	gs_text_size_pt = fontsize / MM_IN_A_DOT
	parameters gs_text_size_pt = gs_text_size_pt
endif

if GLOB_MODPAR_NAME = "gs_text_size_pt_num" then
	gs_NumTextSize = gs_text_size_pt_num * MM_IN_A_DOT
	parameters gs_NumTextSize = gs_NumTextSize
else
	gs_text_size_pt_num = gs_NumTextSize / MM_IN_A_DOT
	parameters gs_text_size_pt_num = gs_text_size_pt_num
endif

if GLOB_MODPAR_NAME = "gs_desc_text_size_pt" then
	gs_desc_text_size = gs_desc_text_size_pt * MM_IN_A_DOT
	parameters gs_desc_text_size = gs_desc_text_size
else
	gs_desc_text_size_pt = gs_desc_text_size / MM_IN_A_DOT
	parameters gs_desc_text_size_pt = gs_desc_text_size_pt
endif

! --- Connecting integer and section pencolor type parameters ---

for i = 1 to 255
	put i
next i

values "penLineStringer" use(nsp)
values "penFillStringer" use(nsp)

if GLOB_MODPAR_NAME = "penLineStringer_m" then
	if penLineStringer_m < -1 | penLineStringer_m > 255 then
		penLineStringer_m = 1
		parameters penLineStringer_m = penLineStringer_m
	endif
	parameters penLineStringer = penLineStringer_m
else
	if penLineStringer_m > -9999 then
		parameters penLineStringer_m = penLineStringer
	endif
endif
if GLOB_MODPAR_NAME = "penFillStringer_m" then
	if penFillStringer_m < -1 | penFillStringer_m > 255 then
		penFillStringer_m = 1
		parameters penFillStringer_m = penFillStringer_m
	endif
	parameters penFillStringer = penFillStringer_m
else
	parameters penFillStringer_m = penFillStringer
endif

values "penLineTread" use(nsp)
values "penFillTread" use(nsp)

if GLOB_MODPAR_NAME = "penLineTread_m" then
	if penLineTread_m < 1 | penLineTread_m > 255 then
		penLineTread_m = 1
		parameters penLineTread_m = penLineTread_m
	endif
	parameters penLineTread = penLineTread_m
else
	parameters penLineTread_m = penLineTread
endif
if GLOB_MODPAR_NAME = "penFillTread_m" then
	if penFillTread_m < 1 | penFillTread_m > 255 then
		penFillTread_m = 1
		parameters penFillTread_m = penFillTread_m
	endif
	parameters penFillTread = penFillTread_m
else
	parameters penFillTread_m = penFillTread
endif

values "penLineRiser" use(nsp)
values "penFillRiser" get(nsp)

if GLOB_MODPAR_NAME = "penLineRiser_m" then
	if penLineRiser_m < 1 | penLineRiser_m > 255 then
		penLineRiser_m = 1
		parameters penLineRiser_m = penLineRiser_m
	endif
	parameters penLineRiser = penLineRiser_m
else
	parameters penLineRiser_m = penLineRiser
endif
if GLOB_MODPAR_NAME = "penFillRiser_m" then
	if penFillRiser_m < 1 | penFillRiser_m > 255 then
		penFillRiser_m = 1
		parameters penFillRiser_m = penFillRiser_m
	endif
	parameters penFillRiser = penFillRiser_m
else
	parameters penFillRiser_m = penFillRiser
endif


if GLOB_MODPAR_NAME = "penBackFillStringer_m" then
	if penBackFillStringer_m < -1 | penBackFillStringer_m > 255 then
		penBackFillStringer_m = 1
		parameters penBackFillStringer_m = penBackFillStringer_m
	endif
	parameters penBackFillStringer = penBackFillStringer_m
else
	parameters penBackFillStringer_m = penBackFillStringer
endif

if GLOB_MODPAR_NAME = "penBackFillTread_m" then
	if penBackFillTread_m < -1 | penBackFillTread_m > 255 then
		penBackFillTread_m = 1
		parameters penBackFillTread_m = penBackFillTread_m
	endif
	parameters penBackFillTread = penBackFillTread_m
else
	parameters penBackFillTread_m = penBackFillTread
endif

if GLOB_MODPAR_NAME = "penBackFillRiser_m" then
	if penBackFillRiser_m < -1 | penBackFillRiser_m > 255 then
		penBackFillRiser_m = 1
		parameters penBackFillRiser_m = penBackFillRiser_m
	endif
	parameters penBackFillRiser = penBackFillRiser_m
else
	parameters penBackFillRiser_m = penBackFillRiser
endif


! =============================================================================
! Onorm list Settings
! =============================================================================

if LibraryLangCode = "AUT" or LibraryLangCode = "CHE" or LibraryLangCode = "GER" then
	call "Onorm_Stair" parameters all
else
	hideparameter "gs_onorm_Title", "gs_list_soundinsul"
endif

! =============================================================================
! IFC2x3 Property Set for Stairs
! =============================================================================

QUARTER_TURN_STAIR = 4
parameters ifc_StairType 		= QUARTER_TURN_STAIR
parameters ifc_NumberOfRiser 	= nRisers
! unused "firstTreadLevel" and "topTreadLevel" parameters
parameters ifc_NumberOfTreads 	= nRisers
parameters ifc_RiserHeight		= treadHeight
parameters ifc_TreadLength		= treadDepth


]]>
</Script_VL>

<ParamSection SectVersion="22" SectionFlags="0" SubIdent="0">
	<ParamSectHeader>
		<AutoHotspots>false</AutoHotspots>
		<StatBits>
			<STBit_UIDefault/>
			<STBit_FixSize/>
			<STBit_UIUseHierarchicalPages/>
		</StatBits>
		<WDLeftFrame>0</WDLeftFrame>
		<WDRightFrame>0</WDRightFrame>
		<WDTopFrame>0</WDTopFrame>
		<WDBotFrame>0</WDBotFrame>
		<LayFlags>0</LayFlags>
		<WDMirrorThickness>0</WDMirrorThickness>
		<WDWallInset>0</WDWallInset>
	</ParamSectHeader>
	<Parameters>
		<Length Name="A">
			<Description><![CDATA["Общая Ширина"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Unique/>
			</Flags>
			<Value>4.5</Value>
		</Length>
		<Length Name="B">
			<Description><![CDATA["Общая Глубина"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Unique/>
			</Flags>
			<Value>2.4</Value>
		</Length>
		<Length Name="zzyzx">
			<Description><![CDATA["Общая Высота"]]></Description>
			<Fix/>
			<Value>3.1</Value>
		</Length>
		<Integer Name="gs_detlevel_3D_m">
			<Description><![CDATA["3D"]]></Description>
			<Value>2</Value>
		</Integer>
		<String Name="parameterType">
			<Description><![CDATA["Тип Параметра"]]></Description>
			<Flags>
				<ParFlg_Unique/>
			</Flags>
			<Value><![CDATA["Высота Ступени"]]></Value>
		</String>
		<String Name="firstTreadLevel">
			<Description><![CDATA["Уровень Первой Ступени"]]></Description>
			<Flags>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<Value><![CDATA["Первая Ступень над Уровнем Пола"]]></Value>
		</String>
		<String Name="topTreadLevel">
			<Description><![CDATA["Уровень Верхней Ступени"]]></Description>
			<Flags>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<Value><![CDATA["Верхняя Ступень Ниже Уровня Пола"]]></Value>
		</String>
		<Length Name="flightWidth">
			<Description><![CDATA["Ширина Марша"]]></Description>
			<Value>1.2</Value>
		</Length>

		<!-- gs_tread: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_tread">
			<Description><![CDATA["Размеры Подступенков и Проступей"]]></Description>
		</Title>
		<Integer Name="nRisers">
			<Description><![CDATA["Количество Подступенков"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>18</Value>
		</Integer>
		<Integer Name="nRisers1stRun">
			<Description><![CDATA["Количество Подступенков в 1 Марше"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>5</Value>
		</Integer>
		<Integer Name="nRisers2ndRun">
			<Description><![CDATA["Количество Подступенков во 2 Марше"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>13</Value>
		</Integer>
		<Length Name="preferredTreadHeight">
			<Description><![CDATA["Предпочтительная Высота Ступени"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0.17</Value>
		</Length>
		<Length Name="treadHeight">
			<Description><![CDATA["Реальная Высота Ступени"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0.172222222222</Value>
		</Length>
		<Length Name="treadDepth">
			<Description><![CDATA["Глубина Ступени"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0.253846153846</Value>
		</Length>
		<Length Name="thd">
			<Description><![CDATA["Две Высоты Подступенка + Проступь"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0.627941176471</Value>
		</Length>
		<Length Name="treadThickness">
			<Description><![CDATA["Толщина Подступенка (0-Нет)"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Length Name="nosing">
			<Description><![CDATA["Выступ"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0.02</Value>
		</Length>
		<Boolean Name="bRiserCover">
			<Description><![CDATA["Защитный Слой Подступенка"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Length Name="riserCoverThk">
			<Description><![CDATA["Толщина Защитного Слоя Подступенка"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0.03</Value>
		</Length>

		<!-- _sp0: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="_sp0">
			<Description><![CDATA["Плита Лестницы и Площадки"]]></Description>
		</Title>
		<String Name="stairBaseType">
			<Description><![CDATA["Тип Основания Лестницы"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value><![CDATA["Бетон"]]></Value>
		</String>
		<Integer Name="stairBaseType_m">
			<Description><![CDATA["Тип Основания Лестницы"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Length Name="stairSlabThk">
			<Description><![CDATA["Толщина Плиты Лестницы"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0.2</Value>
		</Length>
		<Length Name="woodBaseOffset">
			<Description><![CDATA["Смещение Деревянного Основания"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<String Name="topJunctionType">
			<Description><![CDATA["Тип Стыка Вверху"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<Length Name="topLandingThk">
			<Description><![CDATA["Толщина Верхней Площадки"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="lowerLandingThk">
			<Description><![CDATA["Толщина Нижней Площадки"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.15</Value>
		</Length>
		<Integer Name="rail_m">
			<Description><![CDATA["Ограждение"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>

		<!-- bRightRail: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Boolean Name="bRightRail">
			<Description><![CDATA["Ограждение Справа"]]></Description>
			<Flags>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<String Name="rightRailType">
			<Description><![CDATA["Тип Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Балюстрада Ограждения"]]></Value>
		</String>
		<Integer Name="rightRailType_m">
			<Description><![CDATA["Ограждение Справа"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<String Name="ggr">
			<Description><![CDATA["Конструктивные Размеры"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<Length Name="rightRailHeight">
			<Description><![CDATA["Высота Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.8</Value>
		</Length>
		<Length Name="rightRailDist">
			<Description><![CDATA["Расстояние от Лестницы"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.1</Value>
		</Length>
		<Length Name="rightRailOffset">
			<Description><![CDATA["Смещение Правого Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="rightRailOvhgBottom">
			<Description><![CDATA["Выступ Ограждения Внизу"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="rightRailOvhgTop">
			<Description><![CDATA["Выступ Ограждения Вверху"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<String Name="sgr">
			<Description><![CDATA["Размеры Элементов Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<Length Name="rightRailPostSize">
			<Description><![CDATA["Размер Стоек"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.06</Value>
		</Length>
		<Length Name="rightRailFrameThk">
			<Description><![CDATA["Толщина Рамы"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.04</Value>
		</Length>
		<Length Name="rightRailBarThk">
			<Description><![CDATA["Толщина Брусков"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.02</Value>
		</Length>
		<Length Name="rightRailBarDepth">
			<Description><![CDATA["Глубина Брусков"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.02</Value>
		</Length>
		<String Name="rightWireType">
			<Description><![CDATA["Тип Леера"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA["Прямоугольные"]]></Value>
		</String>
		<Integer Name="nBarsRightRail">
			<Description><![CDATA["Количество Брусков"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>4</Value>
		</Integer>
		<Length Name="rightRailWireDiam">
			<Description><![CDATA["Диаметр Леера"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.005</Value>
		</Length>
		<Length Name="rightRailWireThk">
			<Description><![CDATA["Толщина Леера"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.005</Value>
		</Length>
		<Length Name="rightRailWireDepth">
			<Description><![CDATA["Глубина Леера"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.005</Value>
		</Length>

		<!-- bLeftRail: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Boolean Name="bLeftRail">
			<Description><![CDATA["Ограждение Слева"]]></Description>
			<Flags>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<String Name="leftRailType">
			<Description><![CDATA["Тип Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Как и Правое"]]></Value>
		</String>
		<Integer Name="leftRailType_m">
			<Description><![CDATA["Ограждение Слева"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>11</Value>
		</Integer>
		<Boolean Name="bSameRails">
			<Description><![CDATA["Как и Правое Ограждение"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<String Name="ggl">
			<Description><![CDATA["Конструктивные Размеры"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<Length Name="leftRailHeight">
			<Description><![CDATA["Высота Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.8</Value>
		</Length>
		<Length Name="leftRailDist">
			<Description><![CDATA["Расстояние от Перекрытия/Лестницы"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.1</Value>
		</Length>
		<Length Name="leftRailOffset">
			<Description><![CDATA["Смещение Левого Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="leftRailOvhgBottom">
			<Description><![CDATA["Выступ Ограждения Внизу"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="leftRailOvhgTop">
			<Description><![CDATA["Выступ Ограждения Вверху"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<String Name="sgl">
			<Description><![CDATA["Размеры Элементов Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<Length Name="leftRailPostSize">
			<Description><![CDATA["Размер Стоек"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.06</Value>
		</Length>
		<Length Name="leftRailFrameThk">
			<Description><![CDATA["Толщина Рамы"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.04</Value>
		</Length>
		<Length Name="leftRailBarThk">
			<Description><![CDATA["Толщина Брусков"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Length Name="leftRailBarDepth">
			<Description><![CDATA["Глубина Брусков"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.02</Value>
		</Length>
		<String Name="leftWireType">
			<Description><![CDATA["Тип Леера"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA["Прямоугольные"]]></Value>
		</String>
		<Integer Name="nBarsLeftRail">
			<Description><![CDATA["Количество Брусков"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>4</Value>
		</Integer>
		<Length Name="leftRailWireDiam">
			<Description><![CDATA["Диаметр Леера"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.005</Value>
		</Length>
		<Length Name="leftRailWireThk">
			<Description><![CDATA["Толщина Леера"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.005</Value>
		</Length>
		<Length Name="leftRailWireDepth">
			<Description><![CDATA["Глубина Леера"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.005</Value>
		</Length>

		<!-- gs_3D_representation: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_3D_representation">
			<Description><![CDATA["3D-отображение"]]></Description>
		</Title>
		<Boolean Name="gs_shadow">
			<Description><![CDATA["Отбрасывание Теней"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>

		<!-- gs_2D_representation: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_2D_representation">
			<Description><![CDATA["2D-отображение"]]></Description>
			<Fix/>
		</Title>
		<Integer Name="gs_detlevel_2D_m">
			<Description><![CDATA["2D-детализация"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Integer Name="iScaleChangeSM">
			<Description><![CDATA["Простой/Средний Масштаб изменяется в"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>999</Value>
		</Integer>
		<Integer Name="gs_ScaleChangeSM">
			<Description><![CDATA["Простой/Средний Масштаб изменяется в"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>100</Value>
		</Integer>
		<Integer Name="iScaleChangeMD">
			<Description><![CDATA["Средний/Детальный Масштаб изменяется в"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>999</Value>
		</Integer>
		<Integer Name="gs_ScaleChangeMD">
			<Description><![CDATA["Средний/Детальный Масштаб изменяется в"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>50</Value>
		</Integer>

		<!-- Symbol2D: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="Symbol2D">
			<Description><![CDATA["2D-символ"]]></Description>
		</Title>
		<Integer Name="gs_SymbolType_m">
			<Description><![CDATA["Тип 2D-символа"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>11</Value>
		</Integer>
		<Integer Name="iSymbolGroup">
			<Description><![CDATA["Тип Группы Символа"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>6</Value>
		</Integer>
		<PenColor Name="gs_cont_pen">
			<Description><![CDATA["Перо Линий Видимых Конструкций"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>91</Value>
		</PenColor>
		<PenColor Name="gs_DashLinePen">
			<Description><![CDATA["Перо Линий Невидимых Конструкций"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>91</Value>
		</PenColor>
		<LineType Name="solid_line">
			<Description><![CDATA["Тип Линий Видимых Конструкций"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</LineType>
		<LineType Name="dash_line">
			<Description><![CDATA["Тип Линий Невидимых Конструкций"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>4</Value>
		</LineType>
		<Boolean Name="bShowRailOnFloorPlan">
			<Description><![CDATA["Показать Ограждение на Плане"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<LineType Name="railLineType">
			<Description><![CDATA["Тип Линии Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</LineType>
		<PenColor Name="railPen">
			<Description><![CDATA["Перо Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>82</Value>
		</PenColor>
		<Boolean Name="bShowRailAxis">
			<Description><![CDATA["Показать Ось Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<LineType Name="railAxisLineType">
			<Description><![CDATA["Тип Линии Оси Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>6</Value>
		</LineType>
		<PenColor Name="gs_RailAxisPen">
			<Description><![CDATA["Перо Линии Оси Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>71</Value>
		</PenColor>
		<Boolean Name="bSymbolic2D">
			<Description><![CDATA["Символический 2D"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<String Name="postSymbolType">
			<Description><![CDATA["Тип Символа Стойки"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Тип 1"]]></Value>
		</String>
		<Integer Name="iPostSymbolType">
			<Description><![CDATA["Тип Символа Стойки"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<LineType Name="postLineType">
			<Description><![CDATA["Тип Линии Стойки"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</LineType>
		<PenColor Name="postPen">
			<Description><![CDATA["Перо Линии Стойки"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>23</Value>
		</PenColor>
		<Boolean Name="bShowRailAboveBreakLine">
			<Description><![CDATA["Показать Ограждение выше Линии Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="bShowCarriage">
			<Description><![CDATA["Показать Тетиву на Плане Этажа"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<String Name="stShowCarriageUpTo">
			<Description><![CDATA["Показать Тетиву"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["До 1:50"]]></Value>
		</String>
		<Integer Name="iShowCarriageUpTo">
			<Description><![CDATA["Показать Тетиву"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>50</Value>
		</Integer>
		<LineType Name="carriageLineType">
			<Description><![CDATA["Линия Невидимой Тетивы"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</LineType>
		<PenColor Name="carriagePen">
			<Description><![CDATA["Перо Невидимой Тетивы"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>23</Value>
		</PenColor>
		<FillPattern Name="gs_fill_type">
			<Description><![CDATA["Штриховка Фона"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>65</Value>
		</FillPattern>
		<PenColor Name="gs_fill_pen">
			<Description><![CDATA["Перо Штриховки"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>19</Value>
		</PenColor>
		<PenColor Name="gs_back_pen">
			<Description><![CDATA["Перо Фона Штриховки"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>19</Value>
		</PenColor>
		<Boolean Name="gs_FillAbove">
			<Description><![CDATA["Штриховка Выше Линии Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<String Name="breakline_style">
			<Description><![CDATA["Стиль Линии Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA["Прямой"]]></Value>
		</String>
		<Boolean Name="bSimpleZigZag">
			<Description><![CDATA["Линия Разрыва в виде Простого Зигзага"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Length Name="gs_BreakHeight">
			<Description><![CDATA["Расположение Линии Разрыва (Высота)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1.4</Value>
		</Length>
		<Length Name="breakLineWidth">
			<Description><![CDATA["Ширина Линии Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.2</Value>
		</Length>
		<String Name="lineTypeAboveBreak">
			<Description><![CDATA["Тип Линии выше Линии Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
				<ParFlg_Hidden/>
			</Flags>
			<Value><![CDATA["Сплошная"]]></Value>
		</String>
		<Boolean Name="bShowWalkLine">
			<Description><![CDATA["Показать Линию Всхода"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="bShowWalkLineAboveBreakline">
			<Description><![CDATA["Линия Всхода выше Линии Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<LineType Name="gs_wLineType1">
			<Description><![CDATA["Тип Видимой Линии"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</LineType>
		<LineType Name="gs_wLineType2">
			<Description><![CDATA["Тип Линии"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>6</Value>
		</LineType>
		<LineType Name="gs_wLineTypeAbove">
			<Description><![CDATA["Тип Невидимой Линии"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>6</Value>
		</LineType>
		<PenColor Name="gs_wLinePen">
			<Description><![CDATA["Перо Линии"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>71</Value>
		</PenColor>
		<String Name="arrow_style">
			<Description><![CDATA["Стиль Стрелки"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA["Стиль 3"]]></Value>
		</String>
		<FillPattern Name="gs_ArrowFill">
			<Description><![CDATA["Тип Штриховки Стрелки"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>64</Value>
		</FillPattern>
		<PenColor Name="gs_ArrowFillPen">
			<Description><![CDATA["Перо Штриховки (0 - нет)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>91</Value>
		</PenColor>
		<PenColor Name="gs_ArrowFillPenAbove">
			<Description><![CDATA["Перо Штриховки Выше (0 - Нет)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</PenColor>
		<Length Name="gs_ArrowHeight">
			<Description><![CDATA["Высота Стрелки"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.2</Value>
		</Length>
		<Length Name="gs_ArrowHalfWidth">
			<Description><![CDATA["Половина Ширины Стрелки"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.2</Value>
		</Length>
		<String Name="gs_StartEndStyle">
			<Description><![CDATA["Символ в Начале"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA["Стиль 1"]]></Value>
		</String>
		<Integer Name="gs_StartEndStyle_m">
			<Description><![CDATA["Символ в Начале"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<FillPattern Name="gs_StartEndFill">
			<Description><![CDATA["Тип Штриховки Символа"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>64</Value>
		</FillPattern>
		<PenColor Name="gs_StartEndFillPen">
			<Description><![CDATA["Перо Штриховки (0 - нет)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</PenColor>
		<Length Name="gs_CircleRadius">
			<Description><![CDATA["Радиус Окружности"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.1</Value>
		</Length>
		<Length Name="gs_StartWidth">
			<Description><![CDATA["Половина Ширины Символа"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Length Name="gs_StartHeight">
			<Description><![CDATA["Половина Высоты Символа"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.15</Value>
		</Length>
		<Boolean Name="bShowNumbering">
			<Description><![CDATA["Показать Нумерацию"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Integer Name="nStartNumbering">
			<Description><![CDATA["Начать Нумерацию с"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<RealNum Name="gs_NumTextSize">
			<Description><![CDATA["Размер Шрифта (мм)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</RealNum>
		<RealNum Name="gs_text_size_pt_num">
			<Description><![CDATA["Размер Шрифта (пт)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>2.83</Value>
		</RealNum>
		<PenColor Name="gs_NumTextPen">
			<Description><![CDATA["Перо Текста"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>86</Value>
		</PenColor>
		<Length Name="DirNumText_X">
			<Description><![CDATA["Расположение Нумерации по X"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.1</Value>
		</Length>
		<Length Name="DirNumText_Y">
			<Description><![CDATA["Расположение Нумерации по Y"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<String Name="typeTextRotation_Num">
			<Description><![CDATA["Ориентация Текста в Символе"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Выровнять по Символу"]]></Value>
		</String>
		<Integer Name="typeTextRotation_Num_m">
			<Description><![CDATA["Ориентация Текста в Символе"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Integer>
		<Boolean Name="bShowRiseAndRunText">
			<Description><![CDATA["Текст Подступенков и Проступей"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<String Name="gs_RiseRunText">
			<Description><![CDATA["Текст"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Кол-во x Подступенок = Высота Марша"]]></Value>
		</String>
		<Integer Name="iRiseRunText">
			<Description><![CDATA["Текст"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<String Name="gs_CustomText1">
			<Description><![CDATA["Специальный Текст_1"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Специальный Текст_1"]]></Value>
		</String>
		<String Name="gs_CustomText2">
			<Description><![CDATA["Специальный Текст_2"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Специальный Текст_2"]]></Value>
		</String>
		<String Name="gs_customText_rise">
			<Description><![CDATA["Текст Подступенка"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["П"]]></Value>
		</String>
		<RealNum Name="fontsize">
			<Description><![CDATA["Размер Шрифта (мм)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</RealNum>
		<RealNum Name="gs_text_size_pt">
			<Description><![CDATA["Размер Шрифта (пт)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>2.83</Value>
		</RealNum>
		<PenColor Name="gs_text_pen">
			<Description><![CDATA["Перо Шрифта"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>86</Value>
		</PenColor>
		<Boolean Name="bUseACLinearUnit">
			<Description><![CDATA["Единицы Измерения Рабочей Среды Проекта"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Length Name="DirRiseRunText_X">
			<Description><![CDATA["Текст Подступенков и Проступей по X"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="DirRiseRunText_Y">
			<Description><![CDATA["Текст Подступенков и Проступей по Y"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.8</Value>
		</Length>
		<Angle Name="DirRiseRunAngle">
			<Description><![CDATA["Угол Поворота Текста Подступенков и Проступей"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Angle>
		<String Name="typeTextRotation_RiseRun">
			<Description><![CDATA["Ориентация Текста в Символе"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Читаемый"]]></Value>
		</String>
		<Integer Name="typeTextRotation_RiseRun_m">
			<Description><![CDATA["Ориентация Текста в Символе"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>2</Value>
		</Integer>
		<String Name="walkingDirUPDN">
			<Description><![CDATA["Размер Текста ВВЕРХ/ВНИЗ"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA["Нет"]]></Value>
		</String>
		<Integer Name="walkingDirUPDN_m">
			<Description><![CDATA["Размер Текста ВВЕРХ/ВНИЗ"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<String Name="gs_CustomText_Down">
			<Description><![CDATA["Текст Спуска"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["ВНИЗ"]]></Value>
		</String>
		<RealNum Name="UPDNfontsize">
			<Description><![CDATA["Размер Текста ВВЕРХ/ВНИЗ (мм)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>2</Value>
		</RealNum>
		<RealNum Name="gs_text_size_pt_UpDn">
			<Description><![CDATA["Размер Текста ВВЕРХ/ВНИЗ (точки)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>5.66</Value>
		</RealNum>
		<PenColor Name="UPDNfontpen">
			<Description><![CDATA["Текст ВВЕРХ/ВНИЗ"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>86</Value>
		</PenColor>
		<Length Name="DirUPDN_X">
			<Description><![CDATA["Горизонтальное Смещение Текста"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="DirUPDN_Y">
			<Description><![CDATA["Вертикальное Смещение Текста"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>-0.25</Value>
		</Length>
		<Angle Name="AngUPDN">
			<Description><![CDATA["Угол Текста ВВЕРХ/ВНИЗ"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Angle>
		<Length Name="DirUPDN_X_top">
			<Description><![CDATA["Горизонтальное Смещение Текста"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.25</Value>
		</Length>
		<Length Name="DirUPDN_Y_top">
			<Description><![CDATA["Вертикальное Смещение Текста"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Angle Name="AngUPDN_top">
			<Description><![CDATA["Угол Текста ВВЕРХ/ВНИЗ"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Angle>
		<String Name="typeTextRotation_UpDn">
			<Description><![CDATA["Ориентация Текста в Символе"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Выровнять по Символу"]]></Value>
		</String>
		<Integer Name="typeTextRotation_UpDn_m">
			<Description><![CDATA["Ориентация Текста в Символе"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Integer>
		<String Name="gs_description">
			<Description><![CDATA["Описание"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<RealNum Name="gs_desc_text_size">
			<Description><![CDATA["Размер Шрифта (мм)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</RealNum>
		<RealNum Name="gs_desc_text_size_pt">
			<Description><![CDATA["Размер Шрифта (пт)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>2.83</Value>
		</RealNum>
		<PenColor Name="gs_desc_text_pen">
			<Description><![CDATA["Перо Текста"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>23</Value>
		</PenColor>
		<String Name="fontType">
			<Description><![CDATA["Тип Шрифта"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA["Arial"]]></Value>
		</String>
		<Boolean Name="bStorySensitive">
			<Description><![CDATA["Зависит от Этажа"]]></Description>
			<Flags>
				<ParFlg_BoldName/>
			</Flags>
			<Value>0</Value>
		</Boolean>

		<!-- gs_AboveHomeStory: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_AboveHomeStory">
			<Description><![CDATA["2D выше Собственного Этажа"]]></Description>
		</Title>
		<Boolean Name="gs_BreaklineStUp">
			<Description><![CDATA["Линия Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="gs_LowerPartStUp">
			<Description><![CDATA["Нижняя Часть"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="gs_UpperPartStUp">
			<Description><![CDATA["Верхняя Часть"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="gs_TreadStUp">
			<Description><![CDATA["Показать Проступи"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<LineType Name="gs_LineTypeStUp">
			<Description><![CDATA["Тип Линии"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</LineType>
		<PenColor Name="gs_LinePenStUp">
			<Description><![CDATA["Перо Линии"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>71</Value>
		</PenColor>
		<LineType Name="gs_wLineTypeStUp">
			<Description><![CDATA["Тип Линии Всхода"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</LineType>
		<Boolean Name="gs_numaStUp">
			<Description><![CDATA["Показать Нумерацию"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="gs_txStUp">
			<Description><![CDATA["Текст Подступенков и Проступей"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Boolean>

		<!-- gs_section_attributes: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_section_attributes">
			<Description><![CDATA["Реквизиты Сечения"]]></Description>
		</Title>
		<PenColor Name="penLineStringer">
			<Description><![CDATA["Перо Контура Сечения Конструкций"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>29</Value>
		</PenColor>
		<Integer Name="penLineStringer_m">
			<Description><![CDATA["Перо Контура Сечения Конструкций"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>29</Value>
		</Integer>
		<FillPattern Name="typeFillStringer">
			<Description><![CDATA["Штриховка Сечения Конструкций"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>24</Value>
		</FillPattern>
		<PenColor Name="penFillStringer">
			<Description><![CDATA["Перо Штриховки Сечения Конструкций"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>109</Value>
		</PenColor>
		<Integer Name="penFillStringer_m">
			<Description><![CDATA["Перо Штриховки Сечения Конструкций"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>109</Value>
		</Integer>
		<PenColor Name="penBackFillStringer">
			<Description><![CDATA["Перо Фона Штриховки Сечения Конструкций"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</PenColor>
		<Integer Name="penBackFillStringer_m">
			<Description><![CDATA["Перо Фона Штриховки Сечения Конструкций"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Integer>
		<PenColor Name="penLineTread">
			<Description><![CDATA["Перо Контура Сечения Проступи"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1</Value>
		</PenColor>
		<Integer Name="penLineTread_m">
			<Description><![CDATA["Перо Контура Сечения Проступи"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<FillPattern Name="typeFillTread">
			<Description><![CDATA["Штриховка Сечения Проступи"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>23</Value>
		</FillPattern>
		<PenColor Name="penFillTread">
			<Description><![CDATA["Перо Штриховки Сечения Проступи"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>109</Value>
		</PenColor>
		<Integer Name="penFillTread_m">
			<Description><![CDATA["Перо Штриховки Сечения Проступи"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>109</Value>
		</Integer>
		<PenColor Name="penBackFillTread">
			<Description><![CDATA["Перо Фона Штриховки Сечения Проступи"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>-1</Value>
		</PenColor>
		<Integer Name="penBackFillTread_m">
			<Description><![CDATA["Перо Фона Штриховки Сечения Проступи"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>-1</Value>
		</Integer>
		<PenColor Name="penLineRiser">
			<Description><![CDATA["Перо Контура Сечения Подступенка"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1</Value>
		</PenColor>
		<Integer Name="penLineRiser_m">
			<Description><![CDATA["Перо Контура Сечения Подступенка"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<FillPattern Name="typeFillRiser">
			<Description><![CDATA["Штриховка Сечения Подступенка"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>23</Value>
		</FillPattern>
		<PenColor Name="penFillRiser">
			<Description><![CDATA["Перо Штриховки Сечения Подступенка"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>109</Value>
		</PenColor>
		<Integer Name="penFillRiser_m">
			<Description><![CDATA["Перо Штриховки Сечения Подступенка"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>109</Value>
		</Integer>
		<PenColor Name="penBackFillRiser">
			<Description><![CDATA["Перо Фона Штриховки Сечения Подступенка"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>-1</Value>
		</PenColor>
		<Integer Name="penBackFillRiser_m">
			<Description><![CDATA["Перо Фона Штриховки Сечения Подступенка"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>-1</Value>
		</Integer>

		<!-- gs_material: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_material">
			<Description><![CDATA["Покрытия"]]></Description>
		</Title>
		<Material Name="matBase">
			<Description><![CDATA["Основание Лестницы"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>4</Value>
		</Material>
		<Material Name="matTread">
			<Description><![CDATA["Проступь"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>14</Value>
		</Material>
		<Material Name="matRiser">
			<Description><![CDATA["Подступенок"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>14</Value>
		</Material>
		<Material Name="matPost">
			<Description><![CDATA["Стойка"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>59</Value>
		</Material>
		<Material Name="matHandrail">
			<Description><![CDATA["Поручень"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>59</Value>
		</Material>
		<Material Name="matSurface">
			<Description><![CDATA["Панели Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>14</Value>
		</Material>
		<Material Name="matBar">
			<Description><![CDATA["Прутья"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>59</Value>
		</Material>
		<Boolean Name="AC_show2DHotspotsIn3D">
			<Description><![CDATA["Показ Узловых 2D Точек в 3D"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Length Name="ac_bottomlevel">
			<Description><![CDATA["Отметка Низа"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Length>
		<Length Name="ac_toplevel">
			<Description><![CDATA["Отметка Верха"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="gapToFirstTread">
			<Description><![CDATA["Промежуток перед Первой Ступенью"]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.1</Value>
		</Length>
		<Length Name="gapAfterLastTread">
			<Description><![CDATA["Промежуток после Последней Ступени"]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Integer Name="parameterType_m">
			<Description><![CDATA["Определение Размера"]]></Description>
			<Flags>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Integer Name="topTreadLevel_m">
			<Description><![CDATA["Верхняя Ступень"]]></Description>
			<Flags>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>2</Value>
		</Integer>
		<Integer Name="lineTypeAboveBreak_m">
			<Description><![CDATA["Тип Линии выше Линии Разрыва"]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>2</Value>
		</Integer>
		<Integer Name="arrow_style_m">
			<Description><![CDATA["Стиль Стрелки"]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>3</Value>
		</Integer>
		<Integer Name="breakline_style_m">
			<Description><![CDATA["Стиль Линии Разрыва"]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Integer Name="rightWireType_m">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Integer Name="leftWireType_m">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Integer Name="gs_ui_current_page">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Angle Name="gs_readable_angle">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>90</Value>
		</Angle>
		<RealNum Name="gs_description_pos">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<ArrayValues FirstDimension="1" SecondDimension="3">
				<AVal Column="1" Row="1">0</AVal>
				<AVal Column="2" Row="1">0</AVal>
				<AVal Column="3" Row="1">0</AVal>
			</ArrayValues>
		</RealNum>

		<!-- gs_list: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_list">
			<Description><![CDATA["Параметры Спецификаций"]]></Description>
			<Fix/>
		</Title>
		<RealNum Name="gs_list_cost">
			<Description><![CDATA["Цена"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<String Name="gs_list_manufacturer">
			<Description><![CDATA["Производитель"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_note">
			<Description><![CDATA["Примечания"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_location">
			<Description><![CDATA["Расположение"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_accessories">
			<Description><![CDATA["Аксессуары"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_soundinsul">
			<Description><![CDATA["Звукоизоляция"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="FM_Type">
			<Description><![CDATA["Тип Группы"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Лестницы"]]></Value>
		</String>
		<Integer Name="iFMType">
			<Description><![CDATA["Тип Группы"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>6</Value>
		</Integer>
		<String Name="FM_InventoryNumber">
			<Description><![CDATA["Инвентарный Номер"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="FM_SerialNumber">
			<Description><![CDATA["Серийный Номер"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="FM_ProductionYear">
			<Description><![CDATA["Год Производства"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<RealNum Name="FM_ObjectWeight">
			<Description><![CDATA["Вес Изделия"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<String Name="FM_ObjectWeightUnit">
			<Description><![CDATA["Единица Веса"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["кг"]]></Value>
		</String>
		<RealNum Name="FM_Stories">
			<Description><![CDATA["Количество Этажей"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<RealNum Name="FM_HalfLandings">
			<Description><![CDATA["Количество Промежуточных Площадок"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<RealNum Name="FM_LevelHeight">
			<Description><![CDATA["Высота Уровней"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<RealNum Name="FM_HeadRoom">
			<Description><![CDATA["Высота Помещения"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<String Name="FM_BearingStructure">
			<Description><![CDATA["Несущая Конструкция"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<RealNum Name="FM_BearingCapacity">
			<Description><![CDATA["Несущая Способность"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<Boolean Name="FM_SmokeFree">
			<Description><![CDATA["Незадымляемая Лестница"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<RealNum Name="FM_StepsLength">
			<Description><![CDATA["Длина Проступей"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<String Name="FM_MaterialFootstep">
			<Description><![CDATA["Покрытие Проступей"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="FM_MaterialStairRailing">
			<Description><![CDATA["Покрытие Ограждения Лестницы"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="FM_MaterialHandhold">
			<Description><![CDATA["Покрытие Поручней"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_custom1">
			<Description><![CDATA["Пользовательское Значение 1"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_custom2">
			<Description><![CDATA["Пользовательское Значение 2"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_custom3">
			<Description><![CDATA["Пользовательское Значение 3"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_custom4">
			<Description><![CDATA["Пользовательское Значение 4"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_custom5">
			<Description><![CDATA["Пользовательское Значение 5"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>

		<!-- gs_onorm_Title: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_onorm_Title">
			<Description><![CDATA["Дополнительные Параметры Спецификаций"]]></Description>
			<Fix/>
		</Title>
		<String Name="gs_onorm_treadnumber">
			<Description><![CDATA["Количество Ступеней"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_treadriser">
			<Description><![CDATA["Глубина Проступи / Высота Подступенка"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_person">
			<Description><![CDATA["Количество Людей"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_bardist_auto">
			<Description><![CDATA["Значение Чистой Ширины между Прутьями Ограждения"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_bardist">
			<Description><![CDATA["Чистая Ширина между Прутьями Ограждения"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_botlevheight_auto">
			<Description><![CDATA["Значение Отметки Нижнего Уровня"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_botlevheight">
			<Description><![CDATA["Отметка Нижнего Уровня"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_toplevheight_auto">
			<Description><![CDATA["Значение Отметки Верхнего Уровня"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_toplevheight">
			<Description><![CDATA["Отметка Верхнего Уровня"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_construction">
			<Description><![CDATA["Конструкция"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_soundinsul">
			<Description><![CDATA["Звукоизоляция"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_mat1">
			<Description><![CDATA["Дополнительный Материал 1"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_finish1_value">
			<Description><![CDATA["Значение Отделки 1"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_finish1">
			<Description><![CDATA["Отделка 1"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_customtext1">
			<Description><![CDATA["Дополнительная Информация 1"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_customtext2">
			<Description><![CDATA["Дополнительная Информация 2"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_aks">
			<Description><![CDATA["Номер AKS"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_product">
			<Description><![CDATA["Продукт"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_leistungbuch">
			<Description><![CDATA["Коллекция ID Спецификаций"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_description">
			<Description><![CDATA["Дополнительное Описание"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_number">
			<Description><![CDATA["Дополнительный Номер"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_id">
			<Description><![CDATA["Номер ID"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_admission">
			<Description><![CDATA["Дата Приема"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_modification">
			<Description><![CDATA["Дата Изменения"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_tozonenumber">
			<Description><![CDATA["Номер Зоны"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>

		<!-- ifc_Title: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="ifc_Title">
			<Description><![CDATA["IFC2x3 Набор Свойств для Лестниц"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
		</Title>
		<Integer Name="ifc_StairType">
			<Description><![CDATA["Тип Лестницы"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0</Value>
		</Integer>
		<Integer Name="ifc_NumberOfRiser">
			<Description><![CDATA["Количество Подступенков"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0</Value>
		</Integer>
		<Integer Name="ifc_NumberOfTreads">
			<Description><![CDATA["Количество Проступей"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0</Value>
		</Integer>
		<Length Name="ifc_RiserHeight">
			<Description><![CDATA["Высота Подступенка"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="ifc_TreadLength">
			<Description><![CDATA["Длина Проступи"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0</Value>
		</Length>
		<String Name="LibraryLangCode">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value><![CDATA["RUS"]]></Value>
		</String>
	</Parameters>
</ParamSection>

<Picture MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="0" length_in_bytes="5147" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D49484452000000800000
	00800803000000F4E091F90000010B504C5445FEFEFEFEFCECFEFCDBAB9363C2
	A273BB9C73EBFDFDBBA373B3925CC39D6BA38A62A27B4CCBA26BAB9473B28C5C
	FEF2CCBBA26ACBBB9CDDCBAB9B75436B655CCBCBAAA29A5CCBBCA29A7B53B29C
	839B8254736C63AB9D839A8563AC8A5BD1BD9C9B937BECECEBC3AC8AF3ECE3C1
	9C73D3D3B3FDECCBBBAC92B2946B7A746AE3D2BAACA28AB48B62E1C49BB4A283
	9B8D74AAA37BC1A35CE1E0AB7B6B5BEDE4CBD2AB798A734CCCB28BCACDB4A18C
	72C2935BD3D3D38B82648B8274DBC39CA37D53FCEDD2936D3B9C8B4CDCDAC572
	62428B6C3D9B9B8AA4824BB7B581656A62DBCDB3D2B48A837463836D4CE2D5C1
	817B72E3D3AB7C7C7B83745B7B735B918C84D3CEC2A29C95FCE5B4E1CDC98C91
	2388000012C149444154785EBD5BE5B2DB5890569F236636333333F3650CCCFB
	3FC9B69CDC99CC56EDAF91B7EDD82E576E7D9F1AE1C8CC7F15807F7F82C2F595
	F95FC207DFDD44FEC00784E10B4C2E924330FE7FC133808F5B0BE013CA91CA21
	80FB8302FF9BC1CD0510DF8AFDF87140AC3F5570737CF8B2320C2D5A36AC2DE4
	02D4EB035DA270531FF8D311216775E94F627D873F345F08D06F2B5F504CD9EA
	4ED606B11EFEC10452CE0132809B3340293C64A96119467B01FF18E7A5F2004C
	8EE16F4E0080580D8B121BC05AFC36CC167EDAA90AD2B9A57C393C614A59CB48
	128F803544801C5328C08BA6B5DBF52041DCDC010B60DFDDD9E41B9480B71688
	073980FA2367DB9917725B0DE47EBD1B8D3B52224938001F09945E589017AEDA
	6AD5332F4891BF2D83029061835A24B2FD5198F2505904F667EA6DA1DC7A7BCB
	D76F9C84F9ABAF37265E894CE1CCFCD200408E68498BB4DEEA48E06F7CB895FF
	D7595AB61F0ADFA1035380CA10809069766811DBAE3F960193117F430600F53B
	7A07F60333850A3C20810310F0B24B6241C67EFBB706206C741E16C4A094D8FC
	74C1AC49D62811A84CB7DB87F37009F6B05EAF67D0076EE185F03B012F9852C3
	A786CD4CA7601B59526A74CEDB42A4E3912CF148DDAE5B876B9F701BDFBB7AC0
	A45B6A007AE09439F0BED1BDB3859F8FED89070D988265D7F37F0103FCAD5220
	3060D13564C12BFF35E50F8C29668961719C6044480559D9F57AFE0180BF51F8
	E5B60CDC6587A58000F1A6CC3447BB75F25314FD47E3002B7E0A6BBB9FAF1306
	6E528081D932C4CBDE31D3C29978E02D20D2E8D68D72CB147B6CCB8315332556
	EBEDB10E709BEA0BC820D2113CC0FCB37DE0A7A5924987CCCF8CEA8BAA69B6BD
	C6D682F5A435AA1380F0F1F9A0C7209199E5F591C0ACF0C02FFA0DB3C56C6DCE
	6445D314B4A85669134150AB7528DC26FF02449229522A196B68300BB0BA9490
	EDCBC49727D818697E9C154575B27E64CB810FF0B7A84195A455370E25C32667
	6661584B83C036B6A694A66694B2175564598EEAF9FA16E0260DF8B09124A5AD
	6741A99084A9D535800C296D9929ED35991AA8FB5E4F5553D17C3E560F3F015F
	F1CF9114B489E5C103FC2016F5103F2BD091A9253BC9D9F3C5E9F544858B3533
	C964A5C0E7426E82085E7F839C4909FA7D7220DA847A040EDD2AA5AAF8C8CEA2
	B3685551C5A85CC9C4F256A712662DE0AFFE87F86D0F34522296C51F0835EF00
	72675FA074A4721C378BA5D4AAB43B466333EE39F11E09FE2A5C15D8569BD824
	0B53282D8CBBEBF58395A52EA68091A257AB2CCD17B9E763A253FB1874DC081F
	76046E23A90CB108D620380C0DEADF11209586F1391E8BBAA4CCAB69968D3513
	B3A4B65C7E446BEF8BF034C007C2FCE4E8A404533E8BFF2CCBE85A5037D6BE38
	327DDF8FC6363297CF17F59DAE577D7FBFBA7F3FF021DA3FC0CF51DF100EB0E0
	CFF01DFA13C122A47C27AA3D95556333279690E5A2D4DC5555C957CDF8FD6A1A
	B2FD19A3AD61EC1FC8816F8065F405CB00D2C604AC8E58959B258A4EA2D88E1E
	3B187DABD5FBFBFB22E404C0300D3AB461EAC101CE48607247C8304235362040
	A35C5AD0265ADA75074F89FB77D4FF22CC020840C098D0254C99C894F7165998
	F85DA34CEE1AA9A89036D96A51CEEB222620FFE48C3F1289D7FBC4B7DFCC43AB
	3F7027F4BBDBEF410718816EC914EB5B62B5DB5C94739A9B4D7133F7117F7FA9
	B2B3C1EBEBEB7D25C4F547004FCAB6D8028D0934C07860D23B83BCD4B5F8840A
	45AEE938DC49ECA9E245621FD9587E9648C4F86B25CE85D2005CE76D5B1BAD61
	C92CF84584B10D4A0DE325C6A504B3CA16639CA32BC791A42B529ECD4FB44E34
	910C631281BFF18760D872C658336766480E0B06C7E13A016255598155D9A2DE
	8CE992DE9B3DBBCF89E4EB6BADF65EE1F95C08C62FE47E51580058B1A66D58CC
	992F41690ADDAE6130A880B16FB2A62E359B925E54A5A38B09F8F5E9FEFDFECC
	E7723C1FDE00C8405DB33238809033601AF41A5983C030C966AA177FEF2B4564
	502CFAE9C126210F0689D53D5E3F1F16811C3E01CA598ED84800821AE4656B88
	7F486A8F799D9A8E729414A9C856E3A928179B259FDE13671E25AC1A00050018
	662D9BD81924B0241EF1967740A63FA83F9A4B98F89C53D369B25C3C59E128C7
	C5521F4F5F0BC29024D840685B9B64EA6882AC617BD90621A54A9236476A26DF
	1C70B294AE8AC78F6443A0B2FC71EC3CE0D01816033E5760CA95B695229172DD
	266802833505344A65E99B1755959A31D9926392EAB8C7D50ABDBF565B4D839A
	15CE4C1A587111A95426758D58C4F6604ABA2DD33472306D986367AE17377244
	8ECD5896EE8FA98040ED7EB508FEEE3FE31B0640B9BCB5F329A1D1680CC919B1
	232512211AB58801305C74A9D394A35139D62CC68ABA139DB4B56C0D2BE0F4BF
	F81EFCFD6674B79175FC43D33CCB228D122001F0BC9CFDC2550821C352A4114B
	70C56822112DA2281B8EE5BA96752D80B9504E2026DDCE0FAD4D8965585E4020
	4B02028650A9A06ACFC9A460F6E68A18DD3407C5581084F9BC5569345678FD21
	9C8000BEF5CD6FDF04634926867567584820883EEF27976450DEDB6DD1EFCD7D
	519E7152ACA89C4EB22C77281A6011E48D5034D0A7911F728A5A1332E91BD912
	C98267F4275D7A75EFC4A0DAD32FCED8D7F562B3283D1F9D44EADBD3EA5C8BF0
	E1E00330FDBBEF5870688AB2DDBE7137245962138F76AFC3EEE2D5B9F47451F4
	2F3A96C16634BA89C94FA955EDF5C7D5FB995C181AB08443C1B2653BEEFB93C9
	A44F28B1FB134A78428C752B3DF6D5FDE9A4601E2C4AB23CB3CEC9F379B5AAFC
	4EDCF8F8AF3EC0A306FE828C1D7D13D6028DFB774696ACBBB4C42F4A114A45DF
	14D8CB51D921BEAEC845AB51894C11FFCBFFC2D00012786132B6D3A28FFDB831
	4EC5BBF48E1A063954CE9AA022FE5AD8715883A59D82F35F23E880B10085B67E
	0726D0402163A7337EABB537E2F65DBCDD358D3E0FB51A2798A2B9B6B42887F1
	2FE9CAC6597E66DDF75528B5EF0BFF4AE0AA01A7B5F68DFDDB9B26C4A98F2A70
	6BAB6FC94871349A2B8AAC28CA48DA4457CBDA2AC00F93C197066C7FADEE8DF1
	1B15DAFE9BAF968D41E2F5359168E647F3B9A2A31425EE69B9BCFF75FD7C8826
	B0AF3E106D555BECDED8B7393B3D31C6A2AF52AEF39A9037C591AA6220EA8A8E
	4D287E1338DE22B42398E0A57ED580F326B65AFE244E05A36DB2177FAEC7B81F
	C9D940D75B98897D519FCFABB14CA2F31D02067C3816F832C1E297064CD6F7E3
	9A65D089EF8BA238D775F43CBD3A12C68EA25FC4FD319D8F6D7F371FB91035D0
	9F041A882A7E5CF4D7BEB5360473EC5F7C717E150C43F9B851F4BD783A624352
	28208350253886C88C14DD19E7A9211BD1B73511AC533C7EC1D9477D6405C162
	69A088C1F2C955F2CAE396044D488E844940D3257D34B1D736191BE9BA4D8476
	8A9EF48BDEAA56276D6192C1616423C79783815E4EFB1609A60002A111C8413D
	26A715F5ADC5B68C7439BE1E57B9C938BA47AFD7F31B2E4886661002CBA5F3B8
	823DD7FDC9F0003CCF87B888CABCD547FAC67F6CBDC58574358DABA76AF5742D
	BFDC20EA0B3D74C8DEE57349B14AC40D4A796601E1E133C0D42BB8FB2F579574
	1AD1D3AA936647CA45D195B92E61FADD551FC5713CD6362716F9349644D01E0D
	0895003C58AD8C7C3A39692CFABA9FD62FEAE832D7956BEE1B898ECA56C7C70F
	CEEF7B08BF246F365D33B95035F0F2838BC9B1B473729C2AA262CA5177F8DE43
	0A735D55A5359B1AB8ABF6DA22BE5123B67D11872420C0874520D2495A33AE58
	953627653747DDF77A3B7D8EA2E32B1278ACBE76BE319306EE070D0AB637DA37
	E0377A3855A9729FE8CC62DCACC9A5510D687A354017E73D3D10154B81A00D81
	AF2C8DBD41CB9EED796316482EB49D502EF23A180C5EA35C9EAB56D1068AA2CE
	F55EC042C23A3CC765BC20741B360F7E7F697C183612F04D1BFE9E89F8FF3E92
	47CE89C420717CD2AC197210E78F2AE2AA1709F3D30E8D3062EF046AF1BC477D
	238E044AA5096BF619F85A0B852291C4E0293A18A4B8D8282FA92D8C41559114
	A480C630FD717C895318B1523FA9E1A1F4FBE60800103E2457CC159002CE5A83
	C4E0A312CB67469298EEA10BA0434A475D54B5A754640BCC820AA881FEBA6F7B
	6BBF0C05C2847B5ABCA8240683A7A714972FE6D9AAD8531465B7534E69878B71
	B1C80359303FE359E2F55BEB52C948775E80D986B518FA921CAAA1832CB8B626
	9F44D509BAA093729AABD59114A796CD9CA937EAB76CDB866527B6854298F0BF
	33CB22F21A8D3E3DCB83D3295F94A3E9A6381F8B223AA2E937923C7F67B610BF
	6EC353B91321859BDC35B2B8AF0DDCE347D4D914838EA84AF7F24552252135C0
	69F5701EAD5B2886069FCD16DA00CB22F084844A23821BF04E47E61C698E8120
	6BB2ACE873E9787C8D21DAD0C7D6B13F821AC98E8A65C447819009302B77D549
	C662C58D24297A9A1B471D0753C2E923B2DD0258FE1A198046B2C3D4A40F80F8
	0107080F3EC72C6A89D5B7583E8FD72FCD8FE2F3068BB222EE535AD663C0C89A
	AA5D2F77E0131A7E0B7814089700CAC17DAAA59EA2F249C10BD777E90DA6647D
	6E725D7F5982613CFBF2B04D9127F04CBF4F800F246C237CC34388E820BA3BCD
	E727315A948294247274DF6D9C01AC543D4252908212BB17EA087C7503265CC1
	996CF5D139393B74C49D84F1A0EFA426DB8DBB9F06810A158C3DE910CF437318
	E55F560899402EB15A753AC53C06223E375C73D37474713C768F040A8CEF2381
	9A61615614ED9FD75D31844D2072BF3AFFD0B86A3A684A36E9A8BC39E290941E
	EF0961E06D3FF28D31B14A8796A8F7016E71DF00BF7ABF5F699DAAA8CCA5B4B3
	39C9CD13BA213585ACB50043D8FB864FBCC3B4D5BA481074C94CF8E2D66AEE32
	FAE19CE6FA4E77369B9DA28B3DD66C3C35B23998D03E12887C5FD7D77BC1B8CD
	ED4B53D7756BC7D3EEA4A8CA4696B04F552E3D56C8B61BD905632C7B6338441E
	6C7BDDF2D73751400E7BC59A5BFBDC3B988875A589DB3A05FB44369E725D6080
	F817E2D99987078B60970C00A11328303CEEE33F939C39473750C4CB7EDE9B3B
	A23AFE44023900D3AF5B19FBC5B388E25BC0E442C666F802A2B8EF8D7357C01E
	1519682ECE2DC7DDDC1C7F8E27069F231DBDD59A944ADE96FB2BFD48F8F0D0BF
	5EB63CBF401BD0BCD44306CEE7B1B9D34FCAC5EF8D29FDF486DBBADEB3FB5EC9
	8628287102CC0D84E7CFEEFDBD1B754FAE633E3F73D1A6B20BFA65D3C46769D1
	12B132B71E0A2B70E2D51621F8FF6FC0E01E63E178748F1B6E2337257DAE883D
	152988F10818E21CDBB3089325FE9BDEFA596698AFAAC84358B1C84FEFEFEF8F
	C7606CBC162405E7B58B2908B4F619E17390D6EBF508B3CAC944D7D7AD3F6EAD
	87D09C81AFDCBBABA446D38E325776C19CE238D4EC7EBAD775F15FC9627D0A2B
	C81AA3119DF05F971E6E69C23EF95B32D59625494202A8859DE34B173F5E396C
	0B50D16CCBC8C28AB10D53F87DF07AB544981931E1BAA9278D8B3AD81EED1494
	9D8E2B1421DBFD3605E80A5D5243021698ECD7EE8D0FF9CECEEFEED1FD70DD67
	D7E18AA7606DA1606A5455DFA78D06E97FE2BC4856700053BCD20D5103B92F57
	A85CC3E0E3D94D714AB033D0AF23ABE8D34F8B18FD7D97921533E54DF5EB2738
	E1B7272B77E08ED3A2B2C15915292081AA96CF9FDC4F0FA1EEBA63D4418457C5
	003B741F08A4F0E2BA1F0DB52AE91731B080A88CE5E798751CB891C0E8A9BDF1
	395C30BD1E227F59800F153F18556AD946B7CDC9DC089D50DF39D5A354DC449F
	B31E61C80B157C63CA4BBDEBA8780B0DA09C5DF733956F3BCFBA8AD9F8A428C7
	22C7513FDB38575E60423F4984E9CD999BE40114C831B0BA5FBDBB2BEC4F6429
	88C3F9352562209CCF67185A741821920AFFDC090EE14FACEFF7785CFE717CDE
	F4F42010829B88F662962E3FDD1C21D98A3754FFD400DCA03DC2E624AEB59B0E
	A207D2538FAE7F8FAC5C8265BBB13454F59ABCBF8A512154F440AFC9CF5485E3
	58CE51AF2BCCD1DE75717CC26A1DF89C45FB92142033BFF16F20807E48B35413
	E2FAE8249D621696E9415496539C5D2E0F85B6696EBF706F82CF80E77EBA9F7E
	FCC389626B70CA445DB7C3C5F2ED664C9633E5B2CC0A407EE9006E43208709D1
	450EE3E3C9917052CC9F76BA24554D2ACCB48A973B0802C04D7FF1C733106483
	A3830C82D3ACDEEE32374DD1D4287A0301104C20087F3B132083E93DE6648DAA
	F14B0FF7A7A72ACB723475550BEA27D0C08D7F6FC86365762B5ADBAC5EC4DE3C
	736ACAA9E8607C3C2205607821466EEB84392800F3EADE277FC4382E5D1D55DC
	01CA47EA188D73B38E55AFB499DBFED48BE4828DEE00D7DADA93723C8E92EED3
	D3D3529E69B15972169B7156056E1C8684017483C42B52783E1DAB827BF4D394
	FA71BF2AA6D37A35B64064FE862A00B856E6CA2BAE729F9F77ACE822BA4FABBE
	2FFAE6E8ED670102FC1BCA579A0D0854B9F8441DFB22A55D4ADBA53201F86A05
	6E88FFB54D76DD7696525344A1746D1302880F8429C05715B8AD1A168B20F2BB
	5A8AAB3C30CCBFD50EFF2F46804F64A079DBC2557EE9069FC107B8A90AAE07F7
	3940390F177FF3C9F1FF6208B723000506021D430E5191CEF5E812E537BBAF48
	E1FFAF5BBCFF0761AD84B581BF55AA0000000049454E44AE426082
	]]>
</Picture>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_PR SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_PR>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_UI SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
bCustom2dDetlevel = (gs_detlevel_2D_m = DET2D_CUSTOM)

dim stStairUI[128]
	stStairUI[1] = `2D-детализация`
	stStairUI[2] = `Масштаб`
	stStairUI[3] = `Тип Маркера Разрыва`
	stStairUI[4] = `Видимые Конструкции`
	stStairUI[5] = `Штриховка Фона`
	stStairUI[6] = `Перо Линии`
	stStairUI[7] = `Тип Линии`
	stStairUI[8] = `Перо Штриховки`
	stStairUI[9] = `Перо Фона Штриховки`
	stStairUI[10] = `Невидимые Конструкции`
	stStairUI[11] = `Перо Линии Всхода`
	stStairUI[12] = `Тип Линии Всхода`
	stStairUI[13] = `Конец Линии Всхода`
	stStairUI[14] = `Начало Линии Всхода`
	stStairUI[15] = `Перо Штриховки (0 - нет)`
	stStairUI[16] = `Перо Штрих. Выше (0 - нет)`
	stStairUI[17] = `Тип Шрифта`
	stStairUI[18] = `Начать с`
	stStairUI[19] = `Формат`
	stStairUI[20] = `Размер Шрифта`
	stStairUI[21] = `Специальный Текст 1`
	stStairUI[22] = `Перо Текста`
	stStairUI[23] = `Специальный Текст 2`
	stStairUI[24] = `Текст Подъема и Спуска`
	stStairUI[25] = `Текст`
	stStairUI[26] = `Тип Символа Стойки`
	stStairUI[27] = `Тип Линии Стойки`
	stStairUI[28] = `Перо Линии Стойки`
	stStairUI[29] = `Линия Невидимой Тетивы`
	stStairUI[30] = `Перо Невидимой Тетивы`
	stStairUI[31] = `2D выше Собственного Этажа`
	stStairUI[32] = `Лестница`
	stStairUI[33] = `Ограждение`
	stStairUI[34] = `Основание`
	stStairUI[35] = `Панели Ограждения`
	stStairUI[36] = `Проступь`
	stStairUI[37] = `Обвязка`
	stStairUI[38] = `Подступенок`
	stStairUI[39] = `Стойка`
	stStairUI[40] = `Поручень`
	stStairUI[41] = `Штриховка выше Линии Разрыва`
	stStairUI[42] = `Показ Линии Всхода`
	stStairUI[43] = `Стрелка к Линии Разрыва`
	stStairUI[44] = `Показ Нумерации`
	stStairUI[45] = `Текст Подступенков/Проступей`
	stStairUI[46] = `Читаемый Текст`
	stStairUI[47] = `Показ Ограждения на Плане`
	stStairUI[48] = `Показ Осей Ограждения`
	stStairUI[49] = `Показ Тетивы на Плане Этажа`
	stStairUI[50] = `Символ Зависит от Этажа`
	stStairUI[51] = `Линия Разрыва`
	stStairUI[52] = `Показ 2D ниже Линии Разрыва`
	stStairUI[53] = `Показ 2D выше Линии Разрыва`
	stStairUI[54] = `Отбрасывание Теней`
	stStairUI[55] = `Единицы Измерения Рабочей Среды Проекта`
	stStairUI[56] = `Ориентация`
	stStairUI[57] = `Ориентация Текста в Символе`
for i = 58 to 79
	stStairUI[i] = ""
next i
	stStairUI[80] = `Показ Проступей`
	stStairUI[81] = `Линия Всхода выше Линии Разрыва`
for i = 82 to 85
	stStairUI[i] = ""
next i
	stStairUI[86] = `Описание`
	stStairUI[87] = `Текст Спуска`
	stStairUI[88] = `Тип Видимой Линии`
	stStairUI[89] = `Тип Невидимой Линии`
	stStairUI[90] = `Размер Символа`
	stStairUI[91] = `Текст Подступенка`
	stStairUI[92] = `мм`
	stStairUI[93] = `п.`

	stStairUI[94] = `Перо Контура`
	stStairUI[95] = `Тип Штриховки`
	stStairUI[96] = `Перо Штриховки`
	stStairUI[97] = `Перо Фона Штриховки`
	stStairUI[98] = `Подступенок`

	stStairUI[99] = `Показ Ограждения выше Линии Разрыва`
	stStairUI[100] = `2D-символ`
	stStairUI[101] = stPostSymbolType[1]
	stStairUI[102] = stPostSymbolType[2]
	stStairUI[103] = stPostSymbolType[3]
	stStairUI[104] = stPostSymbolType[4]
	stStairUI[105] = stPostSymbolType[5]

	stStairUI[106] = stDetlevel2D[1]
	stStairUI[107] = stDetlevel2D[2]

	stStairUI[108] = stBreaklineStyle[1]
	if bSimpleZigZag then
		stStairUI[109] = stBreaklineStyle[3]
	else
		stStairUI[109] = stBreaklineStyle[2]
	endif

	stStairUI[110] = stWalkingDirUPDN[1]
	stStairUI[111] = stWalkingDirUPDN[2]
	stStairUI[112] = stWalkingDirUPDN[3]
	stStairUI[113] = stWalkingDirUPDN[4]
	stStairUI[114] = stWalkingDirUPDN[5]
	stStairUI[115] = stWalkingDirUPDN[6]

	stStairUI[116] = stTextOrientation[3]
	stStairUI[117] = stTextOrientation[2]
	stStairUI[118] = stTextOrientation[1]

	stStairUI[119] = stRiseRunText[1]
	stStairUI[120] = stRiseRunText[2]
	stStairUI[121] = stRiseRunText[3]
	stStairUI[122] = stRiseRunText[4]
	stStairUI[123] = stRiseRunText[5]
	stStairUI[124] = stRiseRunText[6]
	stStairUI[125] = stRiseRunText[7]

	stStairUI[126] = `Ограждение Справа`
	stStairUI[127] = `Ограждение Слева`
	stStairUI[128] = `Показ Тетивы`

dim stRailTypesForUI[11]
	stRailTypesForUI[ 1] = `Балюстрада`
	stRailTypesForUI[ 2] = `Параллельные Прутья`
	stRailTypesForUI[ 3] = `Простой Брусок`
	stRailTypesForUI[ 4] = `Объемная Рама с Панелью`
	stRailTypesForUI[ 5] = `Объемная Рама`
	stRailTypesForUI[ 6] = `Панель`
	stRailTypesForUI[ 7] = `Стойки с Балясинами`
	stRailTypesForUI[ 8] = `Стойки с Прутьями`
	stRailTypesForUI[ 9] = `Деревянная Балюстрада`
	stRailTypesForUI[10] = `Стойки с Брусками`
	stRailTypesForUI[11] = `Как и Правое`

dim stStairUITabNames[14]
	stStairUITabNames[1] = `Типы 2D-символа`
	stStairUITabNames[2] = `Реквизиты 2D-символа`
	stStairUITabNames[3] = `Символ Линии Всхода`
	stStairUITabNames[4] = `Подъем и Спуск, Нумерация`
	stStairUITabNames[5] = `Ограждение и Тетива в Символе`
	stStairUITabNames[6] = `Зависимость от Этажа и 2D над Собственным`
	stStairUITabNames[7] = `Покрытия`
	stStairUITabNames[8] = `Тип Ограждения - Справа`
	stStairUITabNames[9] = `Тип Ограждения - Слева`

for i = 10 to 12
	stStairUITabNames[i] = ""
next i
	stStairUITabNames[13] = `Подъем и Спуск, Описание`
	stStairUITabNames[14] = `Реквизиты Сечения`

call "ui_stairs" parameters gs_ui_current_page		= gs_ui_current_page,
! --- 2D symbol type ---
			gs_detlevel_2D_m		= gs_detlevel_2D_m,
			gs_ScaleChangeSM		= gs_ScaleChangeSM,
			iScaleChangeSM			= iScaleChangeSM,
			gs_ScaleChangeMD		= gs_ScaleChangeMD,
			iScaleChangeMD			= iScaleChangeMD,
			stScaleType				= stScaleType,
			bCustom2dDetlevel		= bCustom2dDetlevel,
			gs_SymbolType_m			= gs_SymbolType_m,
			iSymbolGroup			= iSymbolGroup,
! --- 2D symbol attributes ---
			bEnableBreakLineStyle	= 1,
			breakline_style			= breakline_style,
			gs_cont_pen				= gs_cont_pen,
			gs_DashLinePen			= gs_DashLinePen,
			solid_line				= solid_line,
			dash_line				= dash_line,
			gs_fill_type			= gs_fill_type,
			gs_fill_pen				= gs_fill_pen,
			gs_back_pen				= gs_back_pen,
			gs_FillAbove			= gs_FillAbove,
! --- Walkline ---
			bShowWalkLine				= bShowWalkLine,
			bShowWalkLineAboveBreakline	= bShowWalkLineAboveBreakline,
			gs_wLinePen					= gs_wLinePen,
			gs_wLineType1				= gs_wLineType1,
			arrow_style					= arrow_style,
			gs_ArrowFillPen				= gs_ArrowFillPen,
			gs_ArrowFillPenAbove		= gs_ArrowFillPenAbove,
			gs_StartEndStyle			= gs_StartEndStyle,
			gs_StartEndFillPen			= gs_StartEndFillPen,
! --- Text Display ---
			fontType				= fontType,
			bShowNumbering			= bShowNumbering,
			bShowRiseAndRunText		= bShowRiseAndRunText,
			nStartNumbering			= nStartNumbering,
			gs_NumTextSize			= gs_NumTextSize,
			gs_text_size_pt_num 	= gs_text_size_pt_num,
			gs_NumTextPen			= gs_NumTextPen,
			gs_RiseRunText			= gs_RiseRunText,
			iRiseRunText			= iRiseRunText,
			gs_CustomText1			= gs_CustomText1,
			gs_CustomText2			= gs_CustomText2,
			gs_customText_rise		= gs_customText_rise,
			fontsize				= fontsize,
			gs_text_size_pt			= gs_text_size_pt,
			gs_text_pen				= gs_text_pen,
			walkingDirUPDN			= walkingDirUPDN,
			bEnableCustomDownText	= 1,
			gs_CustomText_Down 		= gs_CustomText_Down,
			UPDNfontsize			= UPDNfontsize,
			gs_text_size_pt_UpDn	= gs_text_size_pt_UpDn,
			UPDNfontpen				= UPDNfontpen,
			typeTextRotation_RiseRun 	= typeTextRotation_RiseRun,
			typeTextRotation_Num 		= typeTextRotation_Num,
			typeTextRotation_UpDn 		= typeTextRotation_UpDn,
			bEnableDescription		= 1,
			gs_description			= gs_description,
			gs_desc_text_size		= gs_desc_text_size,
			gs_desc_text_size_pt	= gs_desc_text_size_pt,
			gs_desc_text_pen		= gs_desc_text_pen,
! --- Rail & Carriage 2D ---
			bShowRailOnFloorPlan	= bShowRailOnFloorPlan,
			railLineType			= railLineType,
			railPen					= railPen,
			bShowRailAxis			= bShowRailAxis,
			railAxisLineType		= railAxisLineType,
			gs_RailAxisPen			= gs_RailAxisPen,
			bSymbolic2D				= bSymbolic2D,
			postSymbolType			= postSymbolType,
			iPostSymbolType			= iPostSymbolType,
			postLineType			= postLineType,
			postPen					= postPen,
			bEnableCarriageLine		= bEnableCarriageLine,
			bShowCarriage			= bShowCarriage,
			carriageLineType		= carriageLineType,
			carriagePen				= carriagePen,
! --- Story Sensitivity ---
			bStorySensitive			= bStorySensitive,
			gs_BreaklineStUp		= gs_BreaklineStUp,
			gs_LowerPartStUp		= gs_LowerPartStUp,
			gs_UpperPartStUp		= gs_UpperPartStUp,
			gs_TreadStUp			= gs_TreadStUp,
			gs_LineTypeStUp			= gs_LineTypeStUp,
			gs_LinePenStUp			= gs_LinePenStUp,
			gs_wLineTypeStUp		= gs_wLineTypeStUp,
! --- Section Attributes ---
			bRiserCover				= bRiserCover,
			bTreadCover				= (treadThickness > 0.0001),
			penLineStringer 		= penLineStringer,
			penLineStringer_m 		= penLineStringer_m,
			typeFillStringer		= typeFillStringer,
			penFillStringer			= penFillStringer,
			penFillStringer_m		= penFillStringer_m,
			penBackFillStringer		= penBackFillStringer,
			penBackFillStringer_m	= penBackFillStringer_m,
			penLineTread			= penLineTread,
			penLineTread_m			= penLineTread_m,
			typeFillTread			= typeFillTread,
			penFillTread			= penFillTread,
			penFillTread_m			= penFillTread_m,
			penBackFillTread		= penBackFillTread,
			penBackFillTread_m		= penBackFillTread_m,
			penLineRiser			= penLineRiser,
			penLineRiser_m 			= penLineRiser_m,
			typeFillRiser			= typeFillRiser,
			penFillRiser			= penFillRiser,
			penFillRiser_m			= penFillRiser_m,
			penBackFillRiser		= penBackFillRiser,
			penBackFillRiser_m		= penBackFillRiser_m,
! --- 3D materials ---
			gs_shadow				= gs_shadow,
			matBase					= matBase,
			matTread				= matTread,
			matRiser				= matRiser,
			matPost					= matPost,
			matHandrail				= matHandrail,
			matSurface				= matSurface,
			matBar					= matBar,
! --- Rail Types ---
			bRightRail				= bRightRail,
			bLeftRail				= bLeftRail,
			leftRailType			= leftRailType,
			rightRailType			= rightRailType,
! --- String resources ---
			stStairUITabNames		= stStairUITabNames,
			stStairSymbolTypes		= stStairSymbolTypes,
			stSymbolGroup			= stSymbolGroup,
			stArrowHeadStyles		= stArrowHeadStyles,
			stStartSymbolStyles		= stStartSymbolStyles,
			stPostSymbolType		= stPostSymbolType,
			stRailPosition			= stRailPosition,
			stRailTypesForUI		= stRailTypesForUI,
			stRailTypes				= stRailTypes,
			stStairUI				= stStairUI,
! --- Stair Type ---
			iStairType				= 1		! Strair L-Shape
end


]]>
</Script_UI>

<Comment SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Comment>

<CalledMacros SectVersion="2" SectionFlags="0" SubIdent="0">
	<Macro>
		<MName><![CDATA["Stair_RiseRun_Text"]]></MName>
		<MainGUID>E42F5F06-4225-4F32-A64C-ADCF1D4F9EDC</MainGUID>
	</Macro>
	<Macro>
		<MName><![CDATA["railSymbol2D_m"]]></MName>
		<MainGUID>C5C904E6-1706-4CD1-BC8D-6C294B5B40F7</MainGUID>
	</Macro>
	<Macro>
		<MName><![CDATA["stairRails_m"]]></MName>
		<MainGUID>4A3DDA4A-B43E-4039-B45A-463905CF42AD</MainGUID>
	</Macro>
	<Macro>
		<MName><![CDATA["ui_stairs"]]></MName>
		<MainGUID>D8D2E274-0A82-4EF4-845A-78AD6980E72F</MainGUID>
	</Macro>
	<Macro>
		<MName><![CDATA["FM_types"]]></MName>
		<MainGUID>2759D2DF-AA8E-44D1-AD1D-261581266B34</MainGUID>
	</Macro>
	<Macro>
		<MName><![CDATA["Onorm_Stair"]]></MName>
		<MainGUID>F021AF23-E4F7-4961-964D-C9BCAFB786DD</MainGUID>
	</Macro>
</CalledMacros>

<Copyright SectVersion="1" SectionFlags="0" SubIdent="0">
	<Author>GRAPHISOFT</Author>
	<License>
		<Type>CC BY-ND</Type>
		<Version>3.0</Version>
	</License>
</Copyright>

</Symbol>
