<?xml version="1.0" encoding="UTF-8"?>
<Symbol IsArchivable="true" IsPlaceable="true" MainGUID="27C4A831-FC61-4B1C-9E0B-A6C51D2539AF" MigrationValue="Normal" Owner="1196638531" Signature="1196644685" Version="38">
<Ancestry SectVersion="1" SectionFlags="0" SubIdent="0" Template="false">
	<MainGUID>F938E33A-329D-4A36-BE3E-85E126820996</MainGUID>
	<MainGUID>103E8D2C-8230-42E1-9597-46F84CCE28C0</MainGUID>
	<MainGUID>784EAEA1-5041-4AA6-B6F4-EF263A891EE7</MainGUID>
	<MainGUID>57B7C584-5C0D-11D6-A0D8-036F034B6792</MainGUID>
</Ancestry>

<MigrationTable SectVersion="1" SectionFlags="0" SubIdent="0">
	<MigrationTableElement>
		<MainGUID>F9A36900-638C-42D7-8DF9-DC0AA34415CE</MainGUID>
		<Version>19</Version>
		<Name><![CDATA[""]]></Name>
		<AutoMigration>true</AutoMigration>
	</MigrationTableElement>
</MigrationTable>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_3D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
if gs_detlevel_3D_m = 0 then END
if not(gs_shadow) then SHADOW OFF

if 2*flightWidth>b then flightWidth=b/2
n=int(((A-flightWidth)*2)/treadDepth)

dx = 0
if nRisers1stRun=0 | nRisers1stRun=int(n/2) then
	n=int(((a-flightWidth)*2)/treadDepth)
	if n/2=int(n/2) then
		dx=((a-flightWidth)*2)/n
		n=n/2
		nn=n
	else
		dx=(a-flightWidth)/(n-int(n/2))
		nn=INT(n/2)+1
		n=INT(n/2)
	endif
	dy=zzyzx/(n+nn)
endif
if nRisers1stRun>0 then   	!!!  & nRisers1stRun<int(n/2)
	n=nRisers1stRun   		!!! int((a-flightWidth)/treadDepth)+
	nn=nRisers2ndRun
	dx=(a-flightWidth)/max(nRisers1stRun,nRisers2ndRun)
	dy=zzyzx/(n+nn)
endif

if A < flightWidth+dx then end

pen gs_cont_pen
rotx 90
mulz -1

alf=atn(dy/dx)
y=stairSlabThk/cos(alf)
x=stairSlabThk/sin(alf)

bet=(90-alf)/2
ang=ATN(dy/dx)

zzy=n*dy
kx=a-flightWidth-n*dx

! ==============================================================================
! MAIN HOTSPOTS
! ==============================================================================
unID = 1
HOTSPOT 0,nRisers1stRun*dy,0,unID,a, 1+128		: unID=unID+1
HOTSPOT -0.1,nRisers1stRun*dy,0,unID,a, 3		: unID=unID+1
HOTSPOT a,nRisers1stRun*dy,0,unID,a, 2			: unID=unID+1

HOTSPOT a,0,0,unID,a, 1+128		: unID=unID+1
HOTSPOT a+0.1,0,0,unID,a, 3		: unID=unID+1
HOTSPOT 0,0,0,unID,a, 2			: unID=unID+1

HOTSPOT 0,nRisers1stRun*dy,b,unID,a, 1+128		: unID=unID+1
HOTSPOT -0.1,nRisers1stRun*dy,b,unID,a, 3		: unID=unID+1
HOTSPOT a,nRisers1stRun*dy,b,unID,a, 2			: unID=unID+1

HOTSPOT a,(nRisers1stRun+nRisers2ndRun)*dy,b,unID,a, 1+128		: unID=unID+1
HOTSPOT a+0.1,(nRisers1stRun+nRisers2ndRun)*dy,b,unID,a, 3		: unID=unID+1
HOTSPOT 0,(nRisers1stRun+nRisers2ndRun)*dy,b,unID,a, 2			: unID=unID+1

HOTSPOT a,0,b,unID,a, 1+128		: unID=unID+1
HOTSPOT a+0.1,0,b,unID,a, 3		: unID=unID+1
HOTSPOT 0,0,b,unID,a, 2			: unID=unID+1

HOTSPOT a,nRisers1stRun*dy,0,unID,b, 1+256		: unID=unID+1
HOTSPOT a,nRisers1stRun*dy,-0.1,unID,b, 3		: unID=unID+1
HOTSPOT a,nRisers1stRun*dy,b,unID,b, 2			: unID=unID+1

HOTSPOT 0,0,0,unID,b, 1+256		: unID=unID+1
HOTSPOT 0,0,-0.1,unID,b, 3		: unID=unID+1
HOTSPOT 0,0,b,unID,b, 2			: unID=unID+1

HOTSPOT a-flightWidth-nRisers1stRun*treadDepth,0,0,unID,flightWidth, 1+256		: unID=unID+1
HOTSPOT a-flightWidth-nRisers1stRun*treadDepth,0,-0.1,unID,flightWidth, 3		: unID=unID+1
HOTSPOT a-flightWidth-nRisers1stRun*treadDepth,0,flightWidth,unID,flightWidth, 2			: unID=unID+1

HOTSPOT a-flightWidth-nRisers2ndRun*treadDepth,(nRisers1stRun+nRisers2ndRun)*dy,b,unID,flightWidth, 1+256		: unID=unID+1
HOTSPOT a-flightWidth-nRisers2ndRun*treadDepth,(nRisers1stRun+nRisers2ndRun)*dy,b+0.1,unID,flightWidth, 3		: unID=unID+1
HOTSPOT a-flightWidth-nRisers2ndRun*treadDepth,(nRisers1stRun+nRisers2ndRun)*dy,b-flightWidth,unID,flightWidth, 2			: unID=unID+1

! ==============================================================================
! base
! ==============================================================================
material matBase
SECT_FILL typeFillStringer, penBackFillStringer, penFillStringer, penLineStringer

! --- concrete
if stairBaseType_m = 1 then		! Concrete

	for i=1 to n
		put kx+(i-1)*dx+riserCoverThk,i*dy-treadThickness,15
		put kx+i*dx+riserCoverThk,i*dy-treadThickness,15
	next i

	prism_ 5+(2*n),flightWidth,
		kx+riserCoverThk,0,15,
		get (nsp-1),9,
		a,zzy-treadThickness,11,
		a,zzy-treadThickness-stairSlabThk,11,
		a-flightWidth+stairSlabThk*tan(alf/2),zzy-treadThickness-stairSlabThk,15,
		kx+x,0,15
		ver=get(1)

	addz flightWidth
	prism_ 5,b-2*flightWidth,
		a,zzy-treadThickness,10,
		a,zzy-treadThickness-stairSlabThk,10,
		a-flightWidth+stairSlabThk*tan(alf/2),zzy-treadThickness-stairSlabThk,9,
		a-flightWidth,zzy-treadThickness-stairSlabThk,11,
		a-flightWidth,zzy-treadThickness,10
	addz b-2*flightWidth
	prism_ 4,flightWidth,
		a,zzy-treadThickness,14,
		a,zzy-treadThickness-stairSlabThk,14,
		a-flightWidth,zzy-treadThickness-stairSlabThk,9,
		a-flightWidth,zzy-treadThickness,14

	del 2

	add a-flightWidth,nRisers1stRun*dy,b-flightWidth
	mulx -1

	covthicky_t=riserCoverThk

	for i=1 to nn
		if i=nn then covthicky_t=0
		put (i-1)*dx+riserCoverThk,i*dy-treadThickness,15
		put i*dx+covthicky_t,i*dy-treadThickness,15
	next i

	prism_ 6+(2*(nn)),flightWidth,
		0,-treadThickness,15,
		riserCoverThk,-treadThickness,15,
		get (nsp-1),9,
		nn*dx,zzyzx-zzy-treadThickness,15,
		nn*dx,zzyzx-zzy-treadThickness-stairSlabThk/cos(alf),15,
		stairSlabThk*tan(alf/2),-treadThickness-stairSlabThk,15,
		0,-treadThickness-stairSlabThk,8
		ver=get(1)

	del 2
endif

! --- wood
if stairBaseType_m = 2 then		! Wood

	for i=1 to n
	  put kx+(i-1)*dx+riserCoverThk,i*dy-treadThickness,15
	  put kx+i*dx+riserCoverThk,i*dy-treadThickness,15
	next i

	addz woodBaseOffset
	prism_ 5+(2*n),woodBaseThk,
		kx+riserCoverThk,0,15,
		use (nsp),
		a-flightWidth+0.1,zzy-treadThickness,15,
		a-flightWidth+0.1,zzy-treadThickness-stairSlabThk,15,
		a-flightWidth+stairSlabThk*tan(alf/2),zzy-treadThickness-stairSlabThk,15,
		kx+x+riserCoverThk,0,15
	del 1

	addz flightWidth-woodBaseOffset-woodBaseThk
	prism_ 5+(2*n),woodBaseThk,
		kx+riserCoverThk,0,15,
		get (nsp),
		a-flightWidth+0.1,zzy-treadThickness,15,
		a-flightWidth+0.1,zzy-treadThickness-stairSlabThk,15,
		a-flightWidth+stairSlabThk*tan(alf/2),zzy-treadThickness-stairSlabThk,15,
		kx+x+riserCoverThk,0,15
	del 1

	prism_ 4,b,
		a-flightWidth+0.1,zzy-treadThickness-stairSlabThk,15,
		a-flightWidth+0.15,zzy-treadThickness-stairSlabThk,15,
		a-flightWidth+0.15,zzy-treadThickness,15,
		a-flightWidth+0.1,zzy-treadThickness,15

	prism_ 4,b,
		a-woodBaseOffset-woodBaseThk,zzy-treadThickness-stairSlabThk,15,
		a-woodBaseOffset,zzy-treadThickness-stairSlabThk,15,
		a-woodBaseOffset,zzy-treadThickness,15,
		a-woodBaseOffset-woodBaseThk,zzy-treadThickness,15

  add a-flightWidth,nRisers1stRun*dy,b-flightWidth+woodBaseOffset
  mulx -1
	for i=1 to nn
		put (i-1)*dx+riserCoverThk,i*dy-treadThickness,15
		put i*dx+riserCoverThk,i*dy-treadThickness,15
	next i

	prism_ 6+(2*(nn)),woodBaseThk,
		+riserCoverThk,-treadThickness,15,
		use (nsp-1),9,
		a-flightWidth,zzyzx-zzy-treadThickness,15,
		a-flightWidth,zzyzx-zzy-treadThickness-stairSlabThk/cos(alf),15,
		stairSlabThk*tan(alf/2),-treadThickness-stairSlabThk,15,
		-0.1,-treadThickness-stairSlabThk,15,
		-0.1,-treadThickness,15

  addz flightWidth-2*woodBaseOffset-woodBaseThk
	prism_ 6+(2*(nn)),woodBaseThk,
		+riserCoverThk,-treadThickness,15,
		get (nsp-1),9,
		a-flightWidth,zzyzx-zzy-treadThickness,15,
		a-flightWidth,zzyzx-zzy-treadThickness-stairSlabThk/cos(alf),15,
		stairSlabThk*tan(alf/2),-treadThickness-stairSlabThk,15,
		-0.1,-treadThickness-stairSlabThk,15,
		-0.1,-treadThickness,15
		ver=get(1)
  del 3
endif

! ==============================================================================
! Risers
! ==============================================================================
IF ABS(riserCoverThk)>0.001 THEN
	FOR t=1 to n
	ADD kx+(t-1)*dx,(t-1)*dy,0
	MATERIAL matRiser
	SECT_FILL typeFillRiser, penBackFillRiser, penFillRiser, penLineRiser

	prism_ 4,flightWidth,
		0,0,15,
		riserCoverThk,0,15,
		riserCoverThk,dy-treadThickness,15,
		0,dy-treadThickness,15
	DEL 1
	Next t

	add a-flightWidth,nRisers1stRun*dy,b-flightWidth
	mulx -1

	FOR t=1 to nn
	ADD (t-1)*dx,(t-1)*dy,0
	prism_ 4,flightWidth,
		0,0,15,
		riserCoverThk,0,15,
		riserCoverThk,dy-treadThickness,15,
		0,dy-treadThickness,15
	DEL 1
	Next t

	del 2
ENDIF


! ==============================================================================
! Treads
! ==============================================================================

SECT_FILL typeFillTread, penBackFillTread, penFillTread, penLineTread
MATERIAL matTread

IF treadThickness>0.0001 THEN
	covthicky_t=riserCoverThk
	for i=1 to n
		if i=nn then covthicky_t=0
		put kx+(i-1)*dx-nosing,i*dy-treadThickness,15
		put kx+i*dx+covthicky_t,i*dy-treadThickness,15
		put kx+i*dx+covthicky_t,i*dy,15
		put kx+(i-1)*dx-nosing,i*dy,15
	next i

	for k=1 to n
		base
		prism_ 4,flightWidth,
				get (12)
		vert 0, 0, 0 !#1
		vert 0, 0, 1 !#2
		vert 0, 1, 0 !#3
		vert -1, 0, 0 !#4
		coor 2, -1, -2,-3, -4
		body -1

	next k

	base
	prism_ 4,b-flightWidth,
			a-flightWidth,zzy-treadThickness,11,
			a-flightWidth,zzy,11,
			a,zzy,11,
			a,zzy-treadThickness,11
	vert 0, 0, 0 !#1
	vert 0, 0, 1 !#2
	vert 0, 1, 0 !#3
	vert -1, 0, 0 !#4
	coor 2, -1, -2,-3, -4
	body -1


	ADDz b-flightWidth
	base
	prism_ 4,flightWidth,
		a-flightWidth-riserCoverThk,zzy-treadThickness,14,
		a-flightWidth-riserCoverThk,zzy,14,
		a,zzy,14,
		a,zzy-treadThickness,14
	vert 0, 0, 0 !#1
	vert 0, 0, 1 !#2
	vert 0, 1, 0 !#3
	vert -1, 0, 0 !#4
	coor 2, -1, -2,-3, -4
	body -1
	DEL 1

	add a-flightWidth,nRisers1stRun*dy,b-flightWidth
	mulx -1

	covthicky_t=riserCoverThk
	for i=1 to nn
		if i=nn then covthicky_t=0
		put (i-1)*dx-nosing,i*dy-treadThickness,15
		put i*dx+covthicky_t,i*dy-treadThickness,15
		put i*dx+covthicky_t,i*dy,15
		put (i-1)*dx-nosing,i*dy,15
	next i

	for k=1 to nn
		base
		prism_ 4,flightWidth,
				get (12)
		vert 0, 0, 0 !#1
		vert 0, 0, 1 !#2
		vert 0, 1, 0 !#3
		vert -1, 0, 0 !#4
		coor 2, -1, -2,-3, -4
		body -1
	next k
	del 2
ENDIF


! ==============================================================================
! LEFT RAILS
! ==============================================================================
material matPost

IF rail_m = 3 | rail_m = 1 then		! Left, Both
	if bSameRails then
		leftRailType_m = rightRailType_m
		leftWireType_m = rightWireType_m
	endif

	rotx -90

	ADD a-flightWidth-nRisers1stRun*treadDepth-leftRailOvhgBottom,-flightWidth+leftRailOffset+leftRailFrameThk/2,-leftRailOvhgBottom*tan(ang)+dy

	lraSimple=(nRisers1stRun-1)*treadDepth+leftRailOvhgBottom
	lraComplex=(nRisers1stRun-1)*treadDepth
	additionXComplex=leftRailOvhgBottom+treadDepth/2
	additionZComplex=leftRailOvhgBottom*tan(ang)
	hrovL=treadDepth/2+leftRailOvhgBottom
	hrovR=0
	postNumber = ((nRisers-1))/4
	railAngle	= ang
	side = SIDE_LEFT
	gosub "callRailsForStair"

	DEL 1

	! --- Rails on the landing (left side_1) -------------------------------------
	ADD a-flightWidth-treadDepth,-flightWidth+leftRailOffset+leftRailFrameThk/2,nRisers1stRun*dy

	IF bComplexRailLeft THEN
		ADDx treadDepth/2 - leftRailPostSize/2*0
	endif

	lraSimple=treadDepth+leftRailOffset
	lraComplex=treadDepth/2+leftRailOffset-leftRailPostSize/2+leftRailFrameThk
	hrovL=0
	hrovR=leftRailPostSize/2
	postNumber = (flightWidth+treadDepth/2-leftRailOffset-leftRailPostSize/2)/(3*treadDepth)+1
	side = SIDE_LEFT
	gosub "callRailsForLanding"

	IF bComplexRailLeft THEN del 1

	DEL 1


	! --- Rails on the landing (back) ---
	ADD a-flightWidth+leftRailFrameThk/2+leftRailOffset,-flightWidth+leftRailOffset+leftRailFrameThk,nRisers1stRun*dy
	ROTz -90

	IF b-2*flightWidth+2*leftRailOffset+leftRailFrameThk>=0.05 THEN
		IF leftRailType_m < 7 THEN
			gamma=max(0,ATN(((treadDepth-leftRailFrameThk)*tan(ang)-leftRailOffset*tan(ang))/(b-2*flightWidth+2*leftRailOffset+leftRailFrameThk)))
		else
			gamma=max(0,ATN(((treadDepth/2-leftRailFrameThk)*tan(ang)-leftRailOffset*tan(ang))/(b-2*flightWidth+2*leftRailOffset+leftRailFrameThk)))
		endif

		IF leftRailType_m < 7 or (leftRailType_m > 6 and gamma <= 45) then
			lraSimple=b-2*flightWidth+2*leftRailOffset+leftRailFrameThk
			lraComplex=b-2*flightWidth+2*leftRailOffset + (leftRailFrameThk-leftRailPostSize/2)
			additionXComplex=0
			additionZComplex=-leftRailFrameThk*tan(gamma) * bComplexRailLeft
			hrovL=-leftRailFrameThk * bComplexRailLeft
			hrovR=leftRailPostSize/2 * bComplexRailLeft
			postNumber = max(2,(b-2*leftRailOffset-2*leftRailFrameThk+leftRailPostSize)/(3*treadDepth))
			railAngle	= gamma
			side = SIDE_LEFT
			gosub "callRailsForStair"
		endif
	ENDIF

	DEL 2

	! --- Rails on the landing (right side_2) ------------------------------------
	IF leftRailOffset>=treadDepth-leftRailFrameThk THEN
		ADD a-flightWidth+treadDepth,-b+flightWidth-leftRailOffset-leftRailFrameThk/2,nRisers1stRun*dy
		IF leftRailOffset-treadDepth+leftRailFrameThk<=0.1 THEN
			ADDy leftRailFrameThk/2
			ROTx 90
			IF leftRailType_m = 1 | leftRailType_m = 4 | leftRailType_m = 5 | leftRailType_m = 6 THEN
				PRISM_	4, leftRailFrameThk,
					0,leftRailDist,15,
					leftRailOffset-treadDepth+leftRailFrameThk,leftRailDist,015,
					leftRailOffset-treadDepth+leftRailFrameThk,leftRailHeight+leftRailDist,015,
					0,leftRailHeight+leftRailDist,15
			ENDIF
			DEL 2

			IF leftRailType_m = 2 | leftRailType_m = 3 THEN
				lraSimple=leftRailOffset-treadDepth+leftRailFrameThk
				lraComplex=leftRailOffset-treadDepth+leftRailFrameThk
				hrovL=0
				hrovR=0
				postNumber = 2
				side = SIDE_LEFT
				gosub "callRailsForLanding"
			endif
		ELSE
			IF leftRailType_m > 0 and leftRailType_m < 7 THEN
				lraSimple=leftRailOffset-treadDepth+leftRailFrameThk
				lraComplex=leftRailOffset-treadDepth+leftRailFrameThk
				hrovL=0
				hrovR=0
				postNumber = 2
				side = SIDE_LEFT
				gosub "callRailsForLanding"
			endif
		ENDIF
		DEL 1
	ENDIF

	IF leftRailOffset>=treadDepth/2-leftRailFrameThk THEN
		ADD a-flightWidth+leftRailOffset+leftRailFrameThk,-b+flightWidth-leftRailOffset-leftRailFrameThk/2,nRisers1stRun*dy
		IF leftRailOffset+leftRailFrameThk-min(leftRailOffset,treadDepth/2)<=0.2 THEN
			ADDy  leftRailFrameThk/2
			ROTx 90
			IF leftRailType_m = 7 | leftRailType_m = 8 | leftRailType_m = 9 | leftRailType_m = 10 THEN
				PRISM_	4, leftRailFrameThk,
					0,leftRailHeight+leftRailDist+(treadDepth/2)*tan(ang),15,
					-leftRailOffset-leftRailFrameThk+min(leftRailOffset,treadDepth/2),leftRailHeight+leftRailDist+(treadDepth/2)*tan(ang),015,
					-leftRailOffset-leftRailFrameThk+min(leftRailOffset,treadDepth/2),leftRailHeight+leftRailDist+(treadDepth/2)*tan(ang)-leftRailFrameThk,015,
					0,leftRailHeight+leftRailDist+(treadDepth/2)*tan(ang)-leftRailFrameThk,15
			ENDIF

			DEL 2
		ELSE
			IF leftRailType_m = 7 | leftRailType_m = 8 | leftRailType_m = 9 | leftRailType_m = 10 THEN
				ADDx -leftRailPostSize/2
				MULx -1

				lraSimple=leftRailOffset-min(leftRailOffset,treadDepth/2)
				lraComplex=leftRailOffset-min(leftRailOffset,treadDepth/2)
				hrovL=leftRailPostSize/2
				hrovR=leftRailPostSize/2
				postNumber = (flightWidth+treadDepth/2-leftRailOffset)/(3*treadDepth)+1
				side = SIDE_LEFT
				gosub "callRailsForLanding"

				del 2
			endif
		ENDIF
		DEL 1
	ENDIF

	! --- Rails on the 2nd Arm ---
	if bComplexRailLeft then
		ADD a-flightWidth-treadDepth/2,-b+flightWidth-leftRailOffset-leftRailFrameThk/2,(nRisers1stRun+1)*dy
	else
		ADD a-flightWidth+leftRailFrameThk+min(leftRailOffset,treadDepth-leftRailFrameThk),-b+flightWidth-leftRailOffset-leftRailFrameThk/2,(nRisers1stRun+1)*dy-leftRailFrameThk*tan(ang)-min((leftRailOffset)*tan(ang),(treadDepth-leftRailFrameThk)*tan(ang))
	endif
	ROTz 180

	IF leftRailOffset-treadDepth+leftRailFrameThk < eps THEN
		lraSimple=leftRailOffset+(nRisers2ndRun)*treadDepth+leftRailOvhgTop+leftRailFrameThk
	else
		lraSimple=(nRisers2ndRun+1)*treadDepth+leftRailOvhgTop
	endif
	lraComplex=(nRisers2ndRun)*treadDepth-treadDepth
	additionXComplex=0
	additionZComplex=0
	hrovL=treadDepth/2+leftRailFrameThk+min(leftRailOffset,treadDepth/2-leftRailFrameThk)
	hrovR=treadDepth/2+leftRailOvhgTop
	postNumber = ((nRisers2ndRun-1))/2+1
	railAngle	= ang
	side = SIDE_LEFT
	gosub "callRailsForStair"

	DEL 2

	DEL 1
	! Bottom side

	HOTSPOT a-flightWidth-nRisers1stRun*treadDepth,dy+leftRailDist+leftRailHeight-leftRailOvhgBottom*tan(ang),flightWidth-leftRailFrameThk/2-leftRailOffset,unID,leftRailOvhgBottom, 1+128		: unID=unID+1
	HOTSPOT a-flightWidth-nRisers1stRun*treadDepth+0.1,dy+leftRailDist+leftRailHeight-leftRailOvhgBottom*tan(ang),flightWidth-leftRailFrameThk/2-leftRailOffset,unID,leftRailOvhgBottom, 3		: unID=unID+1
	HOTSPOT a-flightWidth-nRisers1stRun*treadDepth-leftRailOvhgBottom,dy+leftRailDist+leftRailHeight-leftRailOvhgBottom*tan(ang),flightWidth-leftRailFrameThk/2-leftRailOffset,unID,leftRailOvhgBottom, 2		: unID=unID+1

	HOTSPOT a-flightWidth-nRisers1stRun*treadDepth-leftRailOvhgBottom,dy+leftRailDist-leftRailOvhgBottom*tan(ang),flightWidth-leftRailFrameThk/2,unID,leftRailOffset, 1+128		: unID=unID+1
	HOTSPOT a-flightWidth-nRisers1stRun*treadDepth-leftRailOvhgBottom,dy+leftRailDist-leftRailOvhgBottom*tan(ang),flightWidth-leftRailFrameThk/2-0.1,unID,leftRailOffset, 3		: unID=unID+1
	HOTSPOT a-flightWidth-nRisers1stRun*treadDepth-leftRailOvhgBottom,dy+leftRailDist-leftRailOvhgBottom*tan(ang),flightWidth-leftRailFrameThk/2-leftRailOffset,unID,leftRailOffset, 2		: unID=unID+1

	HOTSPOT a-flightWidth-nRisers1stRun*treadDepth-leftRailOvhgBottom,dy-leftRailOvhgBottom*tan(ang),flightWidth-leftRailFrameThk/2-leftRailOffset,unID,leftRailDist, 1+128		: unID=unID+1
	HOTSPOT a-flightWidth-nRisers1stRun*treadDepth-leftRailOvhgBottom,dy-0.1-leftRailOvhgBottom*tan(ang),flightWidth-leftRailFrameThk/2-leftRailOffset,unID,leftRailDist, 3		: unID=unID+1
	HOTSPOT a-flightWidth-nRisers1stRun*treadDepth-leftRailOvhgBottom,dy+leftRailDist-leftRailOvhgBottom*tan(ang),flightWidth-leftRailFrameThk/2-leftRailOffset,unID,leftRailDist, 2		: unID=unID+1

	HOTSPOT a-flightWidth-nRisers1stRun*treadDepth-leftRailOvhgBottom,dy-leftRailOvhgBottom*tan(ang)+leftRailDist,flightWidth-leftRailFrameThk/2-leftRailOffset,unID,leftRailHeight, 1+128		: unID=unID+1
	HOTSPOT a-flightWidth-nRisers1stRun*treadDepth-leftRailOvhgBottom,dy-leftRailOvhgBottom*tan(ang)+leftRailDist-0.1,flightWidth-leftRailFrameThk/2-leftRailOffset,unID,leftRailHeight, 3		: unID=unID+1
	HOTSPOT a-flightWidth-nRisers1stRun*treadDepth-leftRailOvhgBottom,dy-leftRailOvhgBottom*tan(ang)+leftRailDist+leftRailHeight,flightWidth-leftRailFrameThk/2-leftRailOffset,unID,leftRailHeight, 2	: unID=unID+1

	! Top side
	HOTSPOT a-flightWidth-nRisers2ndRun*treadDepth,(nRisers)*dy+(leftRailOvhgTop+treadDepth)*tan(ang)+leftRailDist+leftRailHeight,b-flightWidth+leftRailFrameThk/2+leftRailOffset,unID,leftRailOvhgTop, 1+128			: unID=unID+1
	HOTSPOT a-flightWidth-nRisers2ndRun*treadDepth+0.1,(nRisers)*dy+(leftRailOvhgTop+treadDepth)*tan(ang)+leftRailDist+leftRailHeight,b-flightWidth+leftRailFrameThk/2+leftRailOffset,unID,leftRailOvhgTop, 3			: unID=unID+1
	HOTSPOT a-flightWidth-nRisers2ndRun*treadDepth-leftRailOvhgTop,(nRisers)*dy+(leftRailOvhgTop+treadDepth)*tan(ang)+leftRailDist+leftRailHeight,b-flightWidth+leftRailFrameThk/2+leftRailOffset,unID,leftRailOvhgTop, 2			: unID=unID+1

	HOTSPOT a-flightWidth-nRisers2ndRun*treadDepth-leftRailOvhgTop,(nRisers)*dy+(leftRailOvhgTop+treadDepth)*tan(ang)+leftRailDist,b-flightWidth+leftRailFrameThk/2,unID,leftRailOffset, 1+128		: unID=unID+1
	HOTSPOT a-flightWidth-nRisers2ndRun*treadDepth-leftRailOvhgTop,(nRisers)*dy+(leftRailOvhgTop+treadDepth)*tan(ang)+leftRailDist,b-flightWidth+leftRailFrameThk/2+0.1,unID,leftRailOffset, 3		: unID=unID+1
	HOTSPOT a-flightWidth-nRisers2ndRun*treadDepth-leftRailOvhgTop,(nRisers)*dy+(leftRailOvhgTop+treadDepth)*tan(ang)+leftRailDist,b-flightWidth+leftRailFrameThk/2+leftRailOffset,unID,leftRailOffset, 2		: unID=unID+1

	HOTSPOT a-flightWidth-nRisers2ndRun*treadDepth-leftRailOvhgTop,(nRisers)*dy+(leftRailOvhgTop+treadDepth)*tan(ang),b-flightWidth+leftRailFrameThk/2+leftRailOffset,unID,leftRailDist, 1+128		: unID=unID+1
	HOTSPOT a-flightWidth-nRisers2ndRun*treadDepth-leftRailOvhgTop,(nRisers)*dy+(leftRailOvhgTop+treadDepth)*tan(ang)-0.1,b-flightWidth+leftRailFrameThk/2+leftRailOffset,unID,leftRailDist, 3		: unID=unID+1
	HOTSPOT a-flightWidth-nRisers2ndRun*treadDepth-leftRailOvhgTop,(nRisers)*dy+(leftRailOvhgTop+treadDepth)*tan(ang)+leftRailDist,b-flightWidth+leftRailFrameThk/2+leftRailOffset,unID,leftRailDist, 2		: unID=unID+1

	HOTSPOT a-flightWidth-nRisers2ndRun*treadDepth-leftRailOvhgTop,(nRisers)*dy+(leftRailOvhgTop+treadDepth)*tan(ang)+leftRailDist,b-flightWidth+leftRailFrameThk/2+leftRailOffset,unID,leftRailHeight, 1+128			: unID=unID+1
	HOTSPOT a-flightWidth-nRisers2ndRun*treadDepth-leftRailOvhgTop,(nRisers)*dy+(leftRailOvhgTop+treadDepth)*tan(ang)+leftRailDist-0.1,b-flightWidth+leftRailFrameThk/2+leftRailOffset,unID,leftRailHeight, 3			: unID=unID+1
	HOTSPOT a-flightWidth-nRisers2ndRun*treadDepth-leftRailOvhgTop,(nRisers)*dy+(leftRailOvhgTop+treadDepth)*tan(ang)+leftRailHeight+leftRailDist,b-flightWidth+leftRailFrameThk/2+leftRailOffset,unID,leftRailHeight, 2			: unID=unID+1

ENDIF


! ==============================================================================
! RIGHT RAILS
! ==============================================================================
rightRailOffset = rightRailOffset
leftRailOffset = leftRailOffset
treadDepth=dx
material matPost

IF rail_m = 2 | rail_m = 1 then	! Right, Both
	rotx -90

	ADD a-flightWidth-nRisers1stRun*treadDepth-rightRailOvhgBottom,-rightRailOffset-rightRailFrameThk/2,-rightRailOvhgBottom*tan(ang)+dy

	lraSimple=(nRisers1stRun-1)*treadDepth+rightRailOvhgBottom
	lraComplex=(nRisers1stRun-1)*treadDepth
	additionXComplex=rightRailOvhgBottom+treadDepth/2
	additionZComplex=rightRailOvhgBottom*tan(ang)
	hrovL=treadDepth/2+rightRailOvhgBottom
	hrovR=0
	postNumber = ((nRisers-1))/4
	railAngle	= ang
	side = SIDE_RIGHT
	gosub "callRailsForStair"

	DEL 1

	! --- Rails on the landing (right side_1) ------------------------------------
	ADD a-flightWidth-treadDepth,-rightRailOffset-rightRailFrameThk/2,nRisers1stRun*dy

	IF rightRailType_m = 7 | rightRailType_m = 8 | rightRailType_m = 9 | rightRailType_m = 10 THEN
		ADDx treadDepth/2 - rightRailPostSize/2*0
	endif

	lraSimple=flightWidth+treadDepth-rightRailOffset
	lraComplex=flightWidth+treadDepth/2-rightRailOffset-rightRailPostSize/2
	hrovL=0
	hrovR=rightRailPostSize/2
	postNumber = (flightWidth+treadDepth/2-rightRailOffset-rightRailPostSize/2)/(3*treadDepth)+1
	side = SIDE_RIGHT
	gosub "callRailsForLanding"

	IF rightRailType_m = 7 | rightRailType_m = 8 | rightRailType_m = 9 | rightRailType_m = 10 THEN del 1

	DEL 1

	! --- Rails on the landing (back) ---
	ADD a-rightRailOffset-rightRailFrameThk/2,-rightRailOffset-rightRailFrameThk,nRisers1stRun*dy
	ROTz -90

	IF rightRailType_m = 7 | rightRailType_m = 8 | rightRailType_m = 9 THEN
		IF rightRailType_m = 7 | rightRailType_m = 8 THEN
			ADDx -rightRailPostSize/2 - rightRailPostSize/2*0
		else
			ADDx treadDepth/2 - rightRailPostSize/2*0
		endif
	endif

	lraSimple=b-2*rightRailOffset-2*rightRailFrameThk
	lraComplex=b-2*rightRailOffset-2*rightRailFrameThk - treadDepth * (rightRailType_m = 9) + rightRailPostSize * (rightRailType_m = 7 | rightRailType_m = 8)
	hrovL=treadDepth/2 * (rightRailType_m = 9) - rightRailPostSize/2 * (rightRailType_m = 7 | rightRailType_m = 8)
	hrovR=treadDepth/2 * (rightRailType_m = 9) - rightRailPostSize/2 * (rightRailType_m = 7 | rightRailType_m = 8)
	postNumber = (b-2*rightRailOffset-2*rightRailFrameThk+rightRailPostSize)/(3*treadDepth)+1
	side = SIDE_RIGHT
	gosub "callRailsForLanding"

	IF rightRailType_m = 7 | rightRailType_m = 8 | rightRailType_m = 9 THEN del 1

	DEL 2

	! --- Rails on the landing (right side_2) ------------------------------------
	ADD a-flightWidth+treadDepth,-b+rightRailOffset+rightRailFrameThk/2,nRisers1stRun*dy

	IF bComplexRailRight THEN
		ADDx -treadDepth/2 - rightRailPostSize/2*0
	endif

	lraSimple=flightWidth-treadDepth-rightRailOffset
	lraComplex=flightWidth-treadDepth/2-rightRailOffset-rightRailPostSize/2
	hrovL=0
	hrovR=rightRailPostSize/2
	postNumber = (flightWidth+treadDepth/2-rightRailOffset)/(3*treadDepth)+1
	side = SIDE_RIGHT
	gosub "callRailsForLanding"

	IF bComplexRailRight THEN del 1

	DEL 1

	! --- Rails on the 2nd Arm ---
	ADD a-flightWidth+treadDepth,-b+rightRailOffset+rightRailFrameThk/2,nRisers1stRun*dy
	ROTz 180

	lraSimple=(nRisers2ndRun+1)*treadDepth+rightRailOvhgTop
	lraComplex=(nRisers2ndRun)*treadDepth
	additionXComplex=treadDepth/2
	additionZComplex=0
	hrovL=0
	hrovR=treadDepth/2+rightRailOvhgTop
	postNumber = ((nRisers2ndRun-1))/2+1
	railAngle	= ang
	side = SIDE_RIGHT
	gosub "callRailsForStair"

	DEL 2

	DEL 1
	! Bottom side

	HOTSPOT a-flightWidth-nRisers1stRun*treadDepth,dy+rightRailDist+rightRailHeight-rightRailOvhgBottom*tan(ang),rightRailFrameThk/2+rightRailOffset,unID,rightRailOvhgBottom, 1+128		: unID=unID+1
	HOTSPOT a-flightWidth-nRisers1stRun*treadDepth+0.1,dy+rightRailDist+rightRailHeight-rightRailOvhgBottom*tan(ang),rightRailFrameThk/2+rightRailOffset,unID,rightRailOvhgBottom, 3		: unID=unID+1
	HOTSPOT a-flightWidth-nRisers1stRun*treadDepth-rightRailOvhgBottom,dy+rightRailDist+rightRailHeight-rightRailOvhgBottom*tan(ang),rightRailFrameThk/2+rightRailOffset,unID,rightRailOvhgBottom, 2		: unID=unID+1

	HOTSPOT a-flightWidth-nRisers1stRun*treadDepth-rightRailOvhgBottom,dy+rightRailDist-rightRailOvhgBottom*tan(ang),rightRailFrameThk/2,unID,rightRailOffset, 1+128		: unID=unID+1
	HOTSPOT a-flightWidth-nRisers1stRun*treadDepth-rightRailOvhgBottom,dy+rightRailDist-rightRailOvhgBottom*tan(ang),rightRailFrameThk/2+0.1,unID,rightRailOffset, 3		: unID=unID+1
	HOTSPOT a-flightWidth-nRisers1stRun*treadDepth-rightRailOvhgBottom,dy+rightRailDist-rightRailOvhgBottom*tan(ang),rightRailFrameThk/2+rightRailOffset,unID,rightRailOffset, 2		: unID=unID+1

	HOTSPOT a-flightWidth-nRisers1stRun*treadDepth-rightRailOvhgBottom,dy-rightRailOvhgBottom*tan(ang),rightRailFrameThk/2+rightRailOffset,unID,rightRailDist, 1+128		: unID=unID+1
	HOTSPOT a-flightWidth-nRisers1stRun*treadDepth-rightRailOvhgBottom,dy-0.1-rightRailOvhgBottom*tan(ang),rightRailFrameThk/2+rightRailOffset,unID,rightRailDist, 3		: unID=unID+1
	HOTSPOT a-flightWidth-nRisers1stRun*treadDepth-rightRailOvhgBottom,dy+rightRailDist-rightRailOvhgBottom*tan(ang),rightRailFrameThk/2+rightRailOffset,unID,rightRailDist, 2		: unID=unID+1

	HOTSPOT a-flightWidth-nRisers1stRun*treadDepth-rightRailOvhgBottom,dy-rightRailOvhgBottom*tan(ang)+rightRailDist,rightRailFrameThk/2+rightRailOffset,unID,rightRailHeight, 1+128		: unID=unID+1
	HOTSPOT a-flightWidth-nRisers1stRun*treadDepth-rightRailOvhgBottom,dy-rightRailOvhgBottom*tan(ang)+rightRailDist-0.1,rightRailFrameThk/2+rightRailOffset,unID,rightRailHeight, 3		: unID=unID+1
	HOTSPOT a-flightWidth-nRisers1stRun*treadDepth-rightRailOvhgBottom,dy-rightRailOvhgBottom*tan(ang)+rightRailDist+rightRailHeight,rightRailFrameThk/2+rightRailOffset,unID,rightRailHeight, 2	: unID=unID+1

	!!!!Top side
	HOTSPOT a-flightWidth-nRisers2ndRun*treadDepth,(nRisers)*dy+(rightRailOvhgTop+treadDepth)*tan(ang)+rightRailDist+rightRailHeight,b-rightRailFrameThk/2-rightRailOffset,unID,rightRailOvhgTop, 1+128			: unID=unID+1
	HOTSPOT a-flightWidth-nRisers2ndRun*treadDepth+0.1,(nRisers)*dy+(rightRailOvhgTop+treadDepth)*tan(ang)+rightRailDist+rightRailHeight,b-rightRailFrameThk/2-rightRailOffset,unID,rightRailOvhgTop, 3			: unID=unID+1
	HOTSPOT a-flightWidth-nRisers2ndRun*treadDepth-rightRailOvhgTop,(nRisers)*dy+(rightRailOvhgTop+treadDepth)*tan(ang)+rightRailDist+rightRailHeight,b-rightRailFrameThk/2-rightRailOffset,unID,rightRailOvhgTop, 2			: unID=unID+1

	HOTSPOT a-flightWidth-nRisers2ndRun*treadDepth-rightRailOvhgTop,(nRisers)*dy+(rightRailOvhgTop+treadDepth)*tan(ang)+rightRailDist,b-rightRailFrameThk/2,unID,rightRailOffset, 1+128		: unID=unID+1
	HOTSPOT a-flightWidth-nRisers2ndRun*treadDepth-rightRailOvhgTop,(nRisers)*dy+(rightRailOvhgTop+treadDepth)*tan(ang)+rightRailDist,b-rightRailFrameThk/2-0.1,unID,rightRailOffset, 3		: unID=unID+1
	HOTSPOT a-flightWidth-nRisers2ndRun*treadDepth-rightRailOvhgTop,(nRisers)*dy+(rightRailOvhgTop+treadDepth)*tan(ang)+rightRailDist,b-rightRailFrameThk/2-rightRailOffset,unID,rightRailOffset, 2		: unID=unID+1

	HOTSPOT a-flightWidth-nRisers2ndRun*treadDepth-rightRailOvhgTop,(nRisers)*dy+(rightRailOvhgTop+treadDepth)*tan(ang),b-rightRailFrameThk/2-rightRailOffset,unID,rightRailDist, 1+128		: unID=unID+1
	HOTSPOT a-flightWidth-nRisers2ndRun*treadDepth-rightRailOvhgTop,(nRisers)*dy+(rightRailOvhgTop+treadDepth)*tan(ang)-0.1,b-rightRailFrameThk/2-rightRailOffset,unID,rightRailDist, 3		: unID=unID+1
	HOTSPOT a-flightWidth-nRisers2ndRun*treadDepth-rightRailOvhgTop,(nRisers)*dy+(rightRailOvhgTop+treadDepth)*tan(ang)+rightRailDist,b-rightRailFrameThk/2-rightRailOffset,unID,rightRailDist, 2		: unID=unID+1

	HOTSPOT a-flightWidth-nRisers2ndRun*treadDepth-rightRailOvhgTop,(nRisers)*dy+(rightRailOvhgTop+treadDepth)*tan(ang)+rightRailDist,b-rightRailFrameThk/2-rightRailOffset,unID,rightRailHeight, 1+128			: unID=unID+1
	HOTSPOT a-flightWidth-nRisers2ndRun*treadDepth-rightRailOvhgTop,(nRisers)*dy+(rightRailOvhgTop+treadDepth)*tan(ang)+rightRailDist-0.1,b-rightRailFrameThk/2-rightRailOffset,unID,rightRailHeight, 3			: unID=unID+1
	HOTSPOT a-flightWidth-nRisers2ndRun*treadDepth-rightRailOvhgTop,(nRisers)*dy+(rightRailOvhgTop+treadDepth)*tan(ang)+rightRailHeight+rightRailDist,b-rightRailFrameThk/2-rightRailOffset,unID,rightRailHeight, 2			: unID=unID+1
ENDIF

end


! ==============================================================================
"callRailsForStair":
! ------------------------------------------------------------------------------
!	lraSimple
!	lraComplex
!	additionXComplex
!	additionZComplex
!	hrovL: rail overhang start
!	hrovR: rail overhang end
!	postNumber:   number of posts
!	side: SIDE_LEFT or SIDE_RIGHT
! ==============================================================================
	ani = railAngle
	additionXComplex = additionXComplex
	additionZComplex = additionZComplex
	if side = SIDE_LEFT then
		dsComplex = leftRailDist+treadDepth/2*tan(ang)
	else
		dsComplex = rightRailDist+treadDepth/2*tan(ang)
	endif

	gosub "callRails"
return


! ==============================================================================
"callRailsForLanding":
! ------------------------------------------------------------------------------
!	lraSimple
!	lraComplex
!	hrovL: rail overhang start
!	hrovR: rail overhang end
!	postNumber:   number of posts
!	side: SIDE_LEFT or SIDE_RIGHT
! ==============================================================================
	ani = 0
	additionZComplex = 0
	if side = SIDE_LEFT then
		additionXComplex = leftRailPostSize/2*0
		dsComplex = leftRailDist + treadDepth/2*tan(ang)
	else
		additionXComplex = rightRailPostSize/2*0
		dsComplex = rightRailDist + treadDepth/2*tan(ang)
	endif

	gosub "callRails"
return


! ==============================================================================
"callRails":
! ------------------------------------------------------------------------------
!	ani
!	additionXComplex
!	additionZComplex
!	dsComplex
!  ------------------
!	side: SIDE_LEFT or SIDE_RIGHT
!	lraSimple
!	lraComplex
!	hrovL: rail overhang start
!	hrovR: rail overhang end
!	postNumber:   number of posts
! ==============================================================================
	if side = SIDE_LEFT then
		railBarDepth		= leftRailBarDepth
		railBarDiam			= railBarDepth
		railHeight			= leftRailHeight
		railBarFillThk		= leftRailBarThk
		railFrameThk		= leftRailFrameThk
		railDist			= leftRailDist
		railType_m			= leftRailType_m
		railPostSize		= leftRailPostSize
		barNumber			= nBarsLeftRail
		railWireType		= leftWireType_m
		if leftRailType_m = RAIL_WIRED then
			railBarThk		= leftRailWireThk
			railBarDepth	= leftRailWireDepth
			railBarDiam		= leftRailWireDiam
		endif
	else
		railBarDepth		= rightRailBarDepth
		railBarDiam			= railBarDepth
		railHeight			= rightRailHeight
		railBarFillThk		= rightRailBarThk
		railFrameThk		= rightRailFrameThk
		railDist			= rightRailDist
		railType_m			= rightRailType_m
		railPostSize		= rightRailPostSize
		barNumber			= nBarsRightRail
		railWireType		= rightWireType_m
		if rightRailType_m = RAIL_WIRED then
			railBarThk		= rightRailWireThk
			railBarDepth	= rightRailWireDepth
			railBarDiam		= rightRailWireDiam
		endif
	endif

	call "stairRails_m" parameters	railType_m				= railType_m,
									iStairType				= 1,
									bEnableWired02Rail		= 0,
									bEnableNonVerticalRail	= 0,
									additionXComplex		= additionXComplex,
									additionZComplex		= additionZComplex,
									ptyp_m					= 1,
									ani						= ani,
									ab						= 0,
									rb						= 0,
									rom_m					= 1,
									rmm_m					= 1,
									lraSimple				= lraSimple,
									lraComplex				= lraComplex,
									railHeight				= railHeight,
									railHeightComplex		= dsComplex,
									railDist				= railDist,
									gs_detlevel_3D_m		= gs_detlevel_3D_m,
									gs_cont_pen				= gs_cont_pen,
									res						= res,
									rescs					= rescs,
									gs_shadow				= gs_shadow,

									railFrameThk			= railFrameThk,
									railBarDepth			= railBarDepth,
									railBarFillThk			= railBarFillThk,
									railBarDiam				= railBarDiam,
									balusterDist			= treadDepth,
									railFrameMat			= matBar,
									railBaluFillMat			= matSurface,
									barNumber				= barNumber,
									hrovL					= hrovL,
									hrovR					= hrovR,
									railHandrailMat			= matHandrail,
									iBalusterStyle			= railWireType,
									railPostDiam			= railPostSize,
									railPostWidth			= railPostSize,
									railPostThk				= railFrameThk,
									postNumber				= postNumber,
									railPostMat				= matPost

return


]]>
</Script_3D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_2D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[

! ---------- Hotspots ----------[
	unID = 1
	FlightUNID		= 50
	RailUNID		= 100
	StartSymbUNID	= 200
	ArrowUNID		= 300
	RiseRunUNID		= 400
	UpDownUNID		= 500
	NumUnID			= 600

hotspot2 0,0, unID: unID=unID+1

! ---------- Hotspots ----------]

dim drawPart[3] ! 1 - lower,  2 - upper,  3 - full
dim drawDashed[3] ! 1 - lower,  2 - upper,  3 - full
dim drawSteps[3] ! 1 - lower,  2 - upper,  3 - full
dim drawDetails[3] ! 1 - lower,  2 - upper,  3 - full


drawPart[1] = 0		! Lower
drawPart[2] = 0		! Upper
drawPart[3] = 0		! Full
drawDashed[1] = 0	! Lower
drawDashed[2] = 0	! Upper
drawDashed[3] = 0	! Full
drawSteps[1] = 0	! Lower
drawSteps[2] = 0	! Upper
drawSteps[3] = 0	! Full
drawDetails[1] = 0	! Lower
drawDetails[2] = 0	! Upper
drawDetails[3] = 0	! Full
drawNum = 0


abovestory = 0
belowstory = 0
if bStorySensitive then
	if GLOB_CH_STORY_DIST > EPS  then
		abovestory = 1
	else
		if GLOB_CH_STORY_DIST < -EPS  then
			belowstory = 1
		endif
	endif
endif

bCarriageLineExist		= bShowCarriage and bEnableCarriageLine and (GLOB_SCALE <= iShowCarriageUpTo | iShowCarriageUpTo = 1)

! ---------- Settings of 2D Symbol Type ----------
_iSymbolType = 1
_bShowRailIn2D = 1
if gs_detlevel_2D_m = DET2D_SCALESENSITIVE then
	if GLOB_SCALE <= _iScaleMD then									!! Detailed Scale
		_iSymbolType = iEnabledSymbolTypes[iSymbolGroup][3]
	else
		if GLOB_SCALE > _iScaleMD & GLOB_SCALE <= _iScaleSM then	!! Middle Scale
			_iSymbolType = iEnabledSymbolTypes[iSymbolGroup][2]
		else														!! Simple Scale
			_iSymbolType = iEnabledSymbolTypes[iSymbolGroup][1]
			_bShowRailIn2D = 0
		endif
	endif
else
	_iSymbolType = gs_SymbolType_m
endif

IF _iSymbolType = 1 THEN		! Type 1
	drawPart[3]	= 1		! Full
	drawDashed[3] = 1	! Full
ENDIF

IF _iSymbolType = 2 THEN		! Type 2
	drawPart[3]	= 1		! Full
ENDIF

IF _iSymbolType = 3 THEN		! Type 3
	drawPart[1]	= 1		! Lower
ENDIF

IF _iSymbolType = 4 THEN		! Type 4
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
	drawDashed[2] = 1	! Upper
ENDIF

IF _iSymbolType = 5 THEN		! Type 5
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
ENDIF

IF _iSymbolType = 6 THEN		! Type 6
	drawPart[3]	= 1		! Full
	drawDashed[3] = 1	! Full
	drawSteps[3] = 1	! Full
	drawNum = bShowNumbering
ENDIF

IF _iSymbolType = 7 THEN		! Type 7
	drawPart[3]	= 1		! Full
	drawSteps[3] = 1	! Full
	drawNum = bShowNumbering
ENDIF

IF _iSymbolType = 8 THEN		! Type 8
	drawPart[1]	= 1		! Lower
	drawSteps[1] = 1	! Lower
ENDIF

IF _iSymbolType = 9 THEN		! Type 9
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
	drawDashed[2] = 1	! Upper
	drawSteps[1] = 1	! Lower
ENDIF

IF _iSymbolType = 10 THEN		! Type 10
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
	drawSteps[1] = 1	! Lower
ENDIF

IF _iSymbolType = 11 THEN		! Type 11
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
	drawDashed[2] = 1	! Upper
	drawSteps[1] = 1	! Lower
	drawSteps[2] = 1	! Upper
	drawNum = bShowNumbering
ENDIF

IF _iSymbolType = 12 THEN		! Type 12
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
	drawSteps[1] = 1	! Lower
	drawSteps[2] = 1	! Upper
	drawNum = bShowNumbering
ENDIF

IF _iSymbolType = 13 THEN		! Type 13
	drawPart[3]	= 1		! Full
	drawDashed[3] = 1	! Full
	drawSteps[3] = 1	! Full
	drawDetails[3] = 1	! Full

	drawNum = bShowNumbering
ENDIF

IF _iSymbolType = 14 THEN		! Type 14
	drawPart[3]	= 1		! Full
	drawSteps[3] = 1	! Full
	drawDetails[3] = 1	! Full

	drawNum = bShowNumbering
ENDIF

IF _iSymbolType = 15 THEN		! Type 15
	drawPart[1]	= 1		! Lower
	drawSteps[1] = 1	! Lower
	drawDetails[1] = 1	! Lower
	drawSteps[2] = 1	! Upper
!	drawDetails[2] = 1	! Upper ! COMP
ENDIF

IF _iSymbolType = 16 THEN		! Type 16
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
	drawDashed[2] = 1	! Upper
	drawSteps[1] = 1	! Lower
	drawDetails[1] = 1	! Lower
ENDIF

IF _iSymbolType = 17 THEN		! Type 17
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
	drawSteps[1] = 1	! Lower
	drawDetails[1] = 1	! Lower
ENDIF

IF _iSymbolType = 18 THEN		! Type 18
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
	drawDashed[2] = 1	! Upper
	drawSteps[1] = 1	! Lower
	drawSteps[2] = 1	! Upper
	drawDetails[1] = 1	! Lower
	drawDetails[2] = 1	! Upper
	drawNum = bShowNumbering
ENDIF

IF _iSymbolType = 19 THEN		! Type 19
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
	drawDashed[2] = 1	! Upper
	drawSteps[1] = 1	! Lower
	drawSteps[2] = 1	! Upper
	drawDetails[1] = 1	! Lower
	drawNum = bShowNumbering
ENDIF

IF _iSymbolType = 20 THEN		! Type 20
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
	drawSteps[1] = 1	! Lower
	drawSteps[2] = 1	! Upper
	drawDetails[1] = 1	! Lower
	drawDetails[2] = 1	! Upper
	drawNum = bShowNumbering
ENDIF

! ---------- Stories below the home story ---------- [

bBackgroundFill = 1
if belowstory then
	drawPart[3]		= 1
	drawDashed[3]	= 1

	drawSteps[1] = 0
	drawSteps[2] = 0
	drawSteps[3] = 0

	drawDetails[1] = 0
	drawDetails[2] = 0
	drawDetails[3] = 0

	drawNum = 0
endif

! ---------- Stories below the home story ---------- ]

! ---------- Stories above the home story ---------- [
if abovestory then
	drawPart[1] = 0
	drawPart[2] = 0
	drawPart[3] = 0

	if gs_TreadStUp then
		drawSteps[1] = 1
		drawSteps[2] = 1
		drawSteps[3] = 1

		if drawDetails[1] | drawDetails[3] then
			drawDetails[1] = 1
			drawDetails[2] = 1
			drawDetails[3] = 1
		endif

	else
		drawSteps[1] = 0
		drawSteps[2] = 0
		drawSteps[3] = 0

		drawDetails[1] = 0
		drawDetails[2] = 0
		drawDetails[3] = 0
	endif

	if gs_BreaklineStUp = 0 then
		drawPart[3] = 1
	else
		if gs_LowerPartStUp then
			drawPart[1] = 1
		endif
		if gs_UpperPartStUp then
			drawPart[2] = 1
		endif
	endif

	if gs_numaStUp & gs_TreadStUp & ((drawPart[1] & drawPart[2]) | drawPart[3]) then
		drawNum = 1
	else
		drawNum = 0
	endif
endif

ROT2 -90
ADD2 -flightWidth,0
ADD2 0,max(nRisers2ndRun-nRisers1stRun,0)*treadDepth

hasBreak1st = 0
hasBreak2nd	= 0
	NumStline = INT (gs_BreakHeight/treadHeight)
	NumStline = max(1,NumStline)

FOR iFlight = 1 TO 2
	DRAWINDEX 10
	PEN gs_cont_pen
	FILL gs_fill_type

	if iFlight = 1 then
		RNU_temp = nRisers1stRun-1
		if drawPart[3] then
			bBackgroundFill	= 1
			drawBreakLine = 0
		else
			IF nRisers1stRun > NumStline+1 THEN
				drawBreakLine = 1
				hasBreak1st = 1
				bBackgroundFill	= gs_FillAbove
			else
				drawBreakLine = 0
				bBackgroundFill	= 1
			ENDIF
		endif
	endif
	if iFlight = 2 then
		RNU_temp	= nRisers2ndRun
		if drawPart[3] then
			bBackgroundFill = 1
			drawBreakLine = 0
		else
			if nRisers1stRun <= (NumStline+1) then
				drawBreakLine = 1
				hasBreak2nd = 1
				NumStline = max(1,(NumStline-nRisers1stRun))
				bBackgroundFill	= gs_FillAbove
			else
				drawBreakLine = 0
				bBackgroundFill	= gs_FillAbove
			endif
		endif
	ENDIF
	if belowStory then bBackgroundFill	= 0

	! ==========================================================================
	! CONTOUR LINES
	! ==========================================================================

	IF not(drawBreakLine) THEN
		IF (iFlight = 1 & drawPart[1]) | (iFlight=2 & drawPart[2]) | drawPart[3] THEN
			if aboveStory then
				PEN gs_LinePenStUp
				LINE_TYPE gs_LineTypeStUp
			else
				if drawDashed[iFlight] | drawDashed[3] then
					PEN gs_DashLinePen
					LINE_TYPE dash_line
				else
					PEN gs_cont_pen
					LINE_TYPE solid_line
				endif
			endif

			mask = 1
			if iFlight = 1 then xNosing = nosing * (drawDetails[1]|drawDetails[3])
			if iFlight = 2 then
				xNosing = nosing * (drawDetails[2]|drawDetails[3])
				mask = 0
			endif

			! ---------- Contour of Landing ----------
			if iFlight = 1 then
				POLY2_b 7, 1+2*bBackgroundFill+4+64, gs_fill_pen, gs_back_pen,
					flightWidth, (RNU_temp)*treadDepth-xNosing, 1,
					flightWidth, (RNU_temp+1)*treadDepth+flightWidth, 1,
					-b+flightWidth, (RNU_temp+1)*treadDepth+flightWidth, 1,
					-b+flightWidth, (RNU_temp+1)*treadDepth, 0,
					-b+2*flightWidth, (RNU_temp+1)*treadDepth, 1,
					0, (RNU_temp+1)*treadDepth, 1,
					0, (RNU_temp)*treadDepth-xNosing, 0

				HOTLINE2 flightWidth, (RNU_temp+1)*treadDepth-xNosing, flightWidth, (RNU_temp+1)*treadDepth+flightWidth
				HOTLINE2 flightWidth, (RNU_temp+1)*treadDepth+flightWidth, -b+flightWidth, (RNU_temp+1)*treadDepth+flightWidth
				HOTLINE2 -b+flightWidth, (RNU_temp+1)*treadDepth+flightWidth,-b+flightWidth, (RNU_temp)*treadDepth
				HOTLINE2 -b+flightWidth, (RNU_temp+1)*treadDepth,flightWidth, (RNU_temp+1)*treadDepth
			endif

			POLY2_b 4, 1+2*bBackgroundFill+4+64, gs_fill_pen, gs_back_pen,
				0,			-xNosing, 1,
				flightWidth,-xNosing, 1,
				flightWidth,(RNU_temp)*treadDepth-xNosing*mask, 1,
				0,			(RNU_temp)*treadDepth-xNosing*mask, 1

			HOTLINE2 0, -xNosing, flightWidth, -xNosing
			HOTLINE2 flightWidth, -xNosing, flightWidth, (RNU_temp)*treadDepth-xNosing
			HOTLINE2 flightWidth, (RNU_temp)*treadDepth-xNosing,0, (RNU_temp)*treadDepth-xNosing
			HOTLINE2 0, (RNU_temp)*treadDepth-xNosing,0, -xNosing

		ENDIF
	ELSE

! with Break Line
! ---------------------------------------------------------------------------------------------
		if breakline_style_m = 2 then		! Zig Zag
			angle_breakline=ATN(2*treadDepth/flightWidth)
			ZigZag1Y=(2/5*flightWidth)*tan(angle_breakline)
			ZigZag2Y=(7/20*flightWidth)*tan(angle_breakline)
		else
			if breakline_style_m = 3 then		! Zig Zag CHI
				angle_breakline=ATN(2*treadDepth/flightWidth)
				ZigZag1Y=(2/5*flightWidth)*tan(angle_breakline)
				ZigZag2Y=(2/5*flightWidth)*tan(angle_breakline)
			endif
		endif

		IF drawPart[1] THEN
			if aboveStory then
				PEN gs_LinePenStUp
				LINE_TYPE gs_LineTypeStUp
			else
				if drawDashed[1] then
					PEN gs_DashLinePen
					LINE_TYPE dash_line
				else
					PEN gs_cont_pen
					LINE_TYPE solid_line
				endif
			endif

			xNosing = nosing * drawDetails[1]

			if breakline_style_m = 2 then
				! ---------- Zig Zag ----------
				POLY2_b 8, 1+2+4+64, gs_fill_pen, gs_back_pen,
						0, -xNosing, 1,
						flightWidth, -xNosing, 1,
						flightWidth, (NumStline+1)*treadDepth-xNosing, 1,
						6/10*flightWidth,(NumStline+1)*treadDepth-xNosing-ZigZag1Y, 1,
						6/10*flightWidth,(NumStline-1)*treadDepth-xNosing+ZigZag1Y, 1,
						4/10*flightWidth,(NumStline+1)*treadDepth-xNosing-ZigZag1Y, 1,
						4/10*flightWidth,(NumStline-1)*treadDepth-xNosing+ZigZag1Y, 1,
						0, (NumStline-1)*treadDepth-xNosing, 1
			else
				if breakline_style_m = 3 then
					! ---------- Zig Zag CHI ----------
					POLY2_b 9, 1+2+64, gs_fill_pen, gs_back_pen,
							0, -xNosing, 1,
							flightWidth, -xNosing, 1,
							flightWidth, (NumStline+1)*treadDepth-xNosing, 1,
							6/10*flightWidth,(NumStline+1)*treadDepth-xNosing-ZigZag1Y, 1,
							6/10*flightWidth,(NumStline-1)*treadDepth-xNosing+ZigZag1Y, 1,
							4/10*flightWidth,(NumStline+1)*treadDepth-xNosing-ZigZag1Y+breakLineWidth, 1,
							4/10*flightWidth,(NumStline-1)*treadDepth-xNosing+ZigZag1Y, 1,
							0, (NumStline-1)*treadDepth-xNosing, 1,
							0, -xNosing, -1
				else
					! ---------- Straight ----------
					POLY2_b 4, 1+2+4+64, gs_fill_pen, gs_back_pen,
							0, -xNosing, 1,
							flightWidth, -xNosing, 1,
							flightWidth, (NumStline+1)*treadDepth-xNosing, 1,
							0, (NumStline-1)*treadDepth-xNosing, 1
				endif
			endif


			HOTSPOT2 flightWidth/2,(NumStline)*treadDepth-xNosing, FlightUNID: FlightUNID=FlightUNID+1
			HOTSPOT2 0,			(NumStline-1)*treadDepth-xNosing, FlightUNID: FlightUNID=FlightUNID+1
			HOTSPOT2 flightWidth,	(NumStline+1)*treadDepth-xNosing, FlightUNID: FlightUNID=FlightUNID+1

			HOTLINE2 0, -xNosing, flightWidth, -xNosing
			HOTLINE2 flightWidth, -xNosing, flightWidth, (NumStline+1)*treadDepth-xNosing
			HOTLINE2 flightWidth, (NumStline+1)*treadDepth-xNosing,0, (NumStline-1)*treadDepth-xNosing
			HOTLINE2 0, (NumStline-1)*treadDepth-xNosing,0, -xNosing
		ENDIF

		IF drawPart[2] THEN
			if aboveStory then
				PEN gs_LinePenStUp
				LINE_TYPE gs_LineTypeStUp
			else
				if drawDashed[2] then
					PEN gs_DashLinePen
					LINE_TYPE dash_line
				else
					PEN gs_cont_pen
					LINE_TYPE solid_line
				endif
			endif

			if iFlight = 2 then	mask = 0 else mask = 1
			xNosing = nosing * drawDetails[2]


			! ---------- Contour of Landing ----------
			if iFlight = 1 then
				POLY2_b 7, 1+2*bBackgroundFill+4+64, gs_fill_pen, gs_back_pen,
					flightWidth, (RNU_temp)*treadDepth-xNosing, 1,
					flightWidth, (RNU_temp+1)*treadDepth+flightWidth, 1,
					-b+flightWidth, (RNU_temp+1)*treadDepth+flightWidth, 1,
					-b+flightWidth, (RNU_temp+1)*treadDepth, 0,
					-b+2*flightWidth, (RNU_temp+1)*treadDepth, 1,
					0, (RNU_temp+1)*treadDepth, 1,
					0, (RNU_temp)*treadDepth-xNosing, 0

				HOTLINE2 flightWidth, (RNU_temp+1)*treadDepth-xNosing, flightWidth, (RNU_temp+1)*treadDepth+flightWidth
				HOTLINE2 flightWidth, (RNU_temp+1)*treadDepth+flightWidth, -b+flightWidth, (RNU_temp+1)*treadDepth+flightWidth
				HOTLINE2 -b+flightWidth, (RNU_temp+1)*treadDepth+flightWidth,-b+flightWidth, (RNU_temp)*treadDepth
				HOTLINE2 -b+flightWidth, (RNU_temp+1)*treadDepth,flightWidth, (RNU_temp+1)*treadDepth
			endif

			if breakline_style_m = 2 then
				! ---------- Zig Zag ----------
				POLY2_b 8, 1+2*bBackgroundFill+4+64, gs_fill_pen, gs_back_pen,
						0, (NumStline-1)*treadDepth-xNosing+ breakLineWidth, 1,
						7/20*flightWidth, (NumStline-1)*treadDepth -xNosing+ breakLineWidth +ZigZag2Y, 1,
						7/20*flightWidth, (NumStline-1)*treadDepth -xNosing+ breakLineWidth +ZigZag2Y+2*(treadDepth-ZigZag1Y), 1,
						11/20*flightWidth, (NumStline-1)*treadDepth -xNosing+ breakLineWidth +ZigZag2Y, 1,
						11/20*flightWidth, (NumStline-1)*treadDepth -xNosing+ breakLineWidth +ZigZag2Y+2*(treadDepth-ZigZag1Y), 1,
						flightWidth, (NumStline+1)*treadDepth-xNosing+ breakLineWidth, 1,
						flightWidth, (RNU_temp)*treadDepth-xNosing*mask, 1,
						0, (RNU_temp)*treadDepth-xNosing*mask, 1
			else
				if breakline_style_m = 3 then
					! ---------- Zig Zag CHI ----------
					POLY2_b 8, 1+2*bBackgroundFill+4+64, gs_fill_pen, gs_back_pen,
							0, (NumStline-1)*treadDepth-xNosing+ breakLineWidth, 1,
							4/10*flightWidth, (NumStline-1)*treadDepth -xNosing+ breakLineWidth +ZigZag2Y, 1,
							4/10*flightWidth, (NumStline+1)*treadDepth-xNosing-ZigZag1Y+breakLineWidth, 1,
							6/10*flightWidth, (NumStline-1)*treadDepth-xNosing+ZigZag1Y, 1,
							6/10*flightWidth, (NumStline-1)*treadDepth -xNosing+ breakLineWidth +ZigZag2Y+2*(treadDepth-ZigZag1Y), 1,
							flightWidth, (NumStline+1)*treadDepth-xNosing+ breakLineWidth, 1,
							flightWidth, (RNU_temp)*treadDepth-xNosing*mask, 1,
							0, (RNU_temp)*treadDepth-xNosing*mask, 1
				else
					! ---------- Straight ----------
					POLY2_b 4, 1+2*bBackgroundFill+4+64, gs_fill_pen, gs_back_pen,
							0, (NumStline-1)*treadDepth-xNosing+breakLineWidth, 1,
							flightWidth, (NumStline+1)*treadDepth-xNosing+breakLineWidth, 1,
							flightWidth, (RNU_temp)*treadDepth-xNosing*mask, 1,
							0, (RNU_temp)*treadDepth-xNosing*mask, 1
				endif
			endif

			HOTLINE2 0, (NumStline-1)*treadDepth-xNosing+breakLineWidth, flightWidth, (NumStline+1)*treadDepth-xNosing+breakLineWidth
			HOTLINE2 flightWidth, (NumStline+1)*treadDepth-xNosing+breakLineWidth,flightWidth, (RNU_temp)*treadDepth-xNosing*mask
			HOTLINE2 flightWidth, (RNU_temp)*treadDepth-xNosing*mask,0, (RNU_temp)*treadDepth-xNosing*mask
			HOTLINE2 0, (RNU_temp)*treadDepth-xNosing*mask,0, (NumStline-1)*treadDepth-xNosing+breakLineWidth

			! BREAK LINE
			HOTSPOT2 flightWidth/2,		(NumStline)*treadDepth-xNosing,					FlightUNID, breakLineWidth, 1+128	: FlightUNID=FlightUNID+1
			HOTSPOT2 flightWidth/2,		(NumStline)*treadDepth-xNosing-1,				FlightUNID, breakLineWidth, 3		: FlightUNID=FlightUNID+1
			HOTSPOT2 flightWidth/2,		(NumStline)*treadDepth-xNosing+breakLineWidth,	FlightUNID, breakLineWidth, 2		: FlightUNID=FlightUNID+1

			HOTSPOT2 0, (NumStline-1)*treadDepth-xNosing+breakLineWidth,				FlightUNID: FlightUNID=FlightUNID+1
			HOTSPOT2 flightWidth, (NumStline+1)*treadDepth-xNosing+breakLineWidth,	FlightUNID: FlightUNID=FlightUNID+1
		endif
	endif

	! ==========================================================================
	! TREADS
	! ==========================================================================
	DRAWINDEX 20

	if not(drawBreakLine) then
		if (iFlight = 1 & drawPart[1] & drawSteps[1]) | \
			(iFlight = 2 & drawPart[2] & drawSteps[2]) | \
			(drawPart[3] & drawSteps[3])  then

			if aboveStory then
				PEN gs_LinePenStUp
				LINE_TYPE gs_LineTypeStUp
			else
				if drawDashed[iFlight] | drawDashed[3] then
					PEN gs_DashLinePen
					LINE_TYPE dash_line
				else
					PEN gs_cont_pen
					LINE_TYPE solid_line
				endif
			endif

			FOR numTread = 1 to RNU_temp
				LINE2 0,-xNosing, flightWidth, -xNosing
				HOTLINE2 0,-xNosing, flightWidth, -xNosing
				ADD2 0,treadDepth
			NEXT numTread
			DEL RNU_temp

			IF drawDetails[iFlight] | drawDetails[3] THEN
				PEN gs_DashLinePen
				LINE_TYPE dash_line

				FOR numTread = 1 to RNU_temp+mask
					LINE2 0, 0, flightWidth, 0
					HOTLINE2 0, 0, flightWidth, 0
					ADD2 0,treadDepth
				NEXT numTread
				DEL numTread -1
			endif
		endif
	else
		if drawPart[1] & drawSteps[1] then

			xNosing = nosing * drawDetails[1]


			FOR numTread = 1 to NumStline+1
				if aboveStory then
					PEN gs_LinePenStUp
					LINE_TYPE gs_LineTypeStUp
				else
					if drawDashed[1] then
						PEN gs_DashLinePen
						LINE_TYPE dash_line
					else
						PEN gs_cont_pen
						LINE_TYPE solid_line
					endif
				endif

				StartSolid = 0
				IF breakline_style_m = 1 THEN
					IF numTread=NumStline THEN StartSolid=flightWidth/2
				ELSE
					IF numTread=NumStline THEN StartSolid=flightWidth*6/10
				ENDIF

				IF numTread<=NumStline THEN
					LINE2 StartSolid,treadDepth-xNosing, flightWidth, treadDepth-xNosing
					HOTLINE2 StartSolid,treadDepth-xNosing, flightWidth, treadDepth-xNosing
				ENDIF

				if drawDetails[1] THEN
					PEN gs_DashLinePen
					LINE_TYPE dash_line

					StartDashed=0
					if breakline_style_m = 1 then	! Straight
						IF ABS(numTread-NumStline-1)<0.001 THEN StartDashed=flightWidth/2+xNosing/tan(bet)
					ELSE
						IF distZigZag >= 4/10*flightWidth THEN
							distZigZag = 4/10*flightWidth
						ELSE
							distZigZag=(flightWidth*(treadDepth-xNosing))/(2*treadDepth)
						ENDIF

						IF numTread=NumStline+1 THEN StartDashed=max(0,leftRailOffset+leftRailFrameThk,flightWidth-distZigZag)
					ENDIF

					IF ABS(numTread-(NumStline))<0.01 THEN StartDashed=max(0,xNosing/tan(bet))

					LINE2 StartDashed,0,flightWidth,0
					HOTLINE2 StartDashed,0,flightWidth,0
				ENDIF
				ADD2 0,treadDepth
			NEXT numTread
			DEL numTread-1
		endif

		IF drawPart[2] & drawSteps[2] THEN

			xNosing = nosing * drawDetails[2]

			ADD2 0,(NumStline)*treadDepth
			FOR numTread = 1 to RNU_temp-NumStline+mask
				if aboveStory then
					PEN gs_LinePenStUp
					LINE_TYPE gs_LineTypeStUp
				else
					if drawDashed[2] then
						PEN gs_DashLinePen
						LINE_TYPE dash_line
					else
						PEN gs_cont_pen
						LINE_TYPE solid_line
					endif
				endif

				EndSolid=flightWidth
				if breakline_style_m = 1 then	! Straight
					IF numTread=1 THEN EndSolid=Max(0,Min(flightWidth,(treadDepth-breakLineWidth)/tan(bet)))
					IF numTread=2 THEN EndSolid=Max(0,Min(flightWidth,flightWidth-(breakLineWidth)/tan(bet)))
					IF numTread=3 THEN EndSolid=Max(0,Min(flightWidth,flightWidth-(breakLineWidth-treadDepth)/tan(bet)))
				else
					if breakline_style_m = 3 then	! Zigzag CHI
						ZigZagCorrection = 4/10
					else
						ZigZagCorrection = 7/20
					endif
					IF numTread=1 THEN EndSolid=min(ZigZagCorrection*flightWidth,(treadDepth-breakLineWidth)/tan(bet))
					IF numTread=2 THEN
						IF ZigZag2Y+2*(treadDepth-ZigZag1Y)<2*treadDepth-breakLineWidth-xNosing THEN EndSolid=Min(flightWidth,(2*treadDepth-breakLineWidth)/tan(bet))
						IF ZigZag2Y+2*(treadDepth-ZigZag1Y)>=2*treadDepth-breakLineWidth-xNosing THEN EndSolid=Min(flightWidth,ZigZagCorrection*flightWidth)
					ENDIF
					IF numTread=3 THEN EndSolid=Min(flightWidth,(3*treadDepth-breakLineWidth-xNosing)/tan(bet))

				ENDIF

				LINE2 0,-xNosing,EndSolid,-xNosing
				HOTLINE2 0,-xNosing,EndSolid,-xNosing

				IF drawDetails[2] THEN
					PEN gs_DashLinePen
					LINE_TYPE dash_line

					EndDashed=flightWidth
					if breakline_style_m = 1 then	! Straight
						IF numTread=1 THEN EndDashed=Min(flightWidth,(treadDepth+xNosing-breakLineWidth)/tan(bet))
						IF numTread=2 THEN EndDashed=Min(flightWidth,flightWidth+(xNosing-breakLineWidth)/tan(bet))
					ELSE
						IF distZigZag <= ZigZagCorrection*flightWidth THEN
							distZigZag = ZigZagCorrection*flightWidth
						ELSE
							distZigZag=(flightWidth*(breakLineWidth+xNosing))/(2*treadDepth)
						ENDIF
						IF numTread=1 THEN EndDashed=Min(ZigZagCorrection*flightWidth,(treadDepth+nosing-breakLineWidth)/tan(bet))
						IF numTread=2 THEN EndDashed=Min(flightWidth,flightWidth-(flightWidth*(breakLineWidth)-nosing)/(2*treadDepth))
					ENDIF

					LINE2 0,0,EndDashed,0
					HOTLINE2 0,0,EndDashed,0
				ENDIF

				ADD2 0,treadDepth
			NEXT numTread
			DEL numTread-1
			DEL 1
		endif
	endif

	! ==========================================================================
	! WALKING LINE / ARROWHEAD / START END SYMBOL
	! ==========================================================================
	reverseWalkline = 0
	if walkingDirUPDN_m = 3 | walkingDirUPDN_m = 4 | (walkingDirUPDN_m = 6 & abovestory) then
		reverseWalkline = 1
	endif

	if bShowWalkLine & not(belowStory) then

		PEN gs_wLinePen
		FILL gs_ArrowFill

		for i = 1 to 3
			DRAWINDEX 40
			drawWalkLine = 1
			if not(bShowWalkLineAboveBreakline) & i = 2 then drawWalkLine = 0

			if drawPart[i] & drawWalkLine then
				xNosing = nosing * drawDetails[i]
				startLine = -xNosing
				endLine = (RNU_temp)*treadDepth
				penFillArrow = gs_ArrowFillPen
				if i = 1 then
					if drawBreakline then
						endLine = (NumStline)*treadDepth-xNosing
					else
						if iFlight = 1 then
							endLine = (RNU_temp)*treadDepth
						else
							drawWalkLine = 0
						endif
					endif
				endif
				if i = 2 then
					if drawBreakline then
						startLine = startLine + (NumStline)*treadDepth+breakLineWidth
					else
						if iFlight = 1 then
							drawWalkLine = 0
						else
							endLine = (RNU_temp)*treadDepth
						endif
					endif
					penFillArrow = gs_ArrowFillPenAbove
					if walkingDirUPDN_m = 5 then reverseWalkline = 1
				endif

				if aboveStory then
					LINE_TYPE gs_wLineTypeStUp
				else
					if (drawDashed[i]) then
						LINE_TYPE gs_wLineTypeAbove
					else
						LINE_TYPE gs_wLineType1
					endif
				endif

				IF i = 3 & walkingDirUPDN_m = 5 THEN
					if iFlight = 1 then
					! Up Down Both - UP
					endLine = endLine -(MAX(1, INT(RNU_temp/3)))*treadDepth + startLine
					ADD2 flightWidth/2, endLine
					GOSUB "Arrowhead Symbol"
					DEL 1
					endLine = endLine-lengthArrowHead

					line2 flightWidth/2, startLine, flightWidth/2, endLine

					ADD2 flightWidth/2, startLine
					GOSUB "Start End Symbol"
					DEL 1
					endif

					if iFlight = 2 then
					! Up Down Both - Down
					endLine = (RNU_temp)*treadDepth
					startLine = startLine+(MAX(1, INT(RNU_temp/3)))*treadDepth
					ADD2 flightWidth/2, startLine
					MUL2 1, -1
					GOSUB "Arrowhead Symbol"
					DEL 2
					startLine = startLine+lengthArrowHead

					ADD2 flightWidth/2, endLine
					GOSUB "Start End Symbol"
					DEL 1
					endif
				else

					! Arrow Head below Break Line
					if not(reverseWalkline)	& (((i=3|i=2) & iFlight=2) | (i=1 & drawBreakLine)) then
						ADD2 flightWidth/2, endLine
						GOSUB "Arrowhead Symbol"
						DEL 1
						endLine = endLine-lengthArrowHead
					endif

					if not(reverseWalkline) & ((i=3|i=1) & iFlight=1) then
						ADD2 flightWidth/2, startLine
						GOSUB "Start End Symbol"
						DEL 1
					endif

					! Arrow Head on Start
					if reverseWalkline & (((i=3|i=1) & iFlight=1) | (i=2 & drawBreakLine))then
						ADD2 flightWidth/2, startLine
						MUL2 1, -1
						GOSUB "Arrowhead Symbol"
						DEL 2
						startLine = startLine+lengthArrowHead
					endif

					if reverseWalkline & ((i=3|i=2) & iFlight=2) then
						ADD2 flightWidth/2, endLine
						GOSUB "Start End Symbol"
						DEL 1
					endif
				endif

				! Walking Line
				if drawWalkLine then line2 flightWidth/2, startLine, flightWidth/2, endLine
			endif
		next i

		if drawBreakLine then
			HOTSPOT2 flightWidth/2,(NumStline)*treadDepth-xNosing,					FlightUNID,breakLineWidth,1+128		:FlightUNID=FlightUNID+1
			HOTSPOT2 flightWidth/2,(NumStline)*treadDepth-0.1-xNosing,				FlightUNID,breakLineWidth,3			:FlightUNID=FlightUNID+1
			HOTSPOT2 flightWidth/2,(NumStline)*treadDepth+breakLineWidth-xNosing,	FlightUNID,breakLineWidth,2			:FlightUNID=FlightUNID+1
		endif

		if 	(iFlight = 1 & ((not(hasBreak1st) & drawPart[1]) | (hasBreak1st & drawPart[2] & bShowWalkLineAboveBreakline) | (drawPart[3] & (walkingDirUPDN_m <> 5) ))) then
			if aboveStory then
				LINE_TYPE gs_wLineTypeStUp
			else
			if 	(iFlight = 1 & ((not(hasBreak1st) & drawDashed[1]) | (hasBreak1st & drawDashed[2]) | (drawDashed[3] & (walkingDirUPDN_m <> 5) ))) then
					LINE_TYPE gs_wLineTypeAbove
				else
					LINE_TYPE gs_wLineType1
				endif
			endif
			LINE2 flightWidth/2,(RNU_temp)*treadDepth,flightWidth/2,(RNU_temp+1)*treadDepth+flightWidth/2
			LINE2 -b+3*flightWidth/2,(RNU_temp+1)*treadDepth,-b+3*flightWidth/2,(RNU_temp+1)*treadDepth+flightWidth/2
			LINE2 flightWidth/2,(RNU_temp+1)*treadDepth+flightWidth/2,-b+3*flightWidth/2,(RNU_temp+1)*treadDepth+flightWidth/2
		ENDIF
	ENDIF

	DRAWINDEX 10
	ADD2 -b+2*flightWidth,(nRisers1stRun)*treadDepth
	ROT2 180
NEXT iFlight
DEL 2*2


!===============================================================================
! --- Carriage Line ---
!===============================================================================

if bCarriageLineExist and not(belowStory) then
	fill gs_fill_type

	bShowCarriagePart1	= 0
	bShowCarriagePart2	= 0

	beamNum				= 2
	beamThk				= woodBaseThk
	beamOffsetRight		= woodBaseOffset
	beamOffsetLeft		= woodBaseOffset
	carriageBaseDist	= flightWidth
	carrBreakLineWidth	= breakLineWidth

	if drawPart[3] then
		!!!!!******************************      1st RUN
		add2 0, bRiserCover * riserCoverThk
			beamLength			= a - flightWidth + 0.1 - woodBaseOffset - bRiserCover * riserCoverThk + woodBaseOffset - max(nRisers2ndRun - nRisers1stRun, 0) * treadDepth
			bCarrAboveBreakLine	= 0
			bBreakCarriageLine	= 0
			gosub "carriage"
		del 1

		!!!!!******************************      LANDING 1.
		add2 flightWidth, a - flightWidth + 0.1 - woodBaseOffset - max(nRisers2ndRun - nRisers1stRun, 0) * treadDepth
		rot2 90
			beamLength			= b
			carriageBaseDist	= flightWidth - 0.1 + woodBaseOffset
			bCarrAboveBreakLine	= 0
			bBreakCarriageLine	= 0
			gosub "carriage"
		del 2

		!!!!!******************************      2nd RUN
		add2 flightWidth * 2 - b, a - flightWidth + 0.1 - max(nRisers2ndRun - nRisers1stRun, 0) * treadDepth
		rot2 -180
			beamLength			= a - flightWidth + 0.1
			carriageBaseDist	= flightWidth
			bCarrAboveBreakLine	= 0
			bBreakCarriageLine	= 0
			gosub "carriage"
		del 2
	else
		if hasBreak1st then
			if drawPart[1] then
				!!!!!******************************      1st RUN
				add2 0, bRiserCover * riserCoverThk
					beamLength			= a - flightWidth + 0.1 - woodBaseOffset - bRiserCover * riserCoverThk + woodBaseOffset
					carriageBaseDist	= flightWidth
					bCarrAboveBreakLine	= 0
					bBreakCarriageLine	= 1
					bShowCarriagePart1	= 1
					brLineAngle			= bet
					xNosing				= nosing * drawDetails[1]
					carrBreakLineDist	= NumStline * treadDepth - xNosing + (flightWidth / 2 - beamOffsetRight - beamThk / 2) * tan(brLineAngle) - bRiserCover * riserCoverThk
					gosub "carriage"
				del 1
			endif

			if drawPart[2] then
				!!!!!******************************      1st RUN
				add2 0, bRiserCover * riserCoverThk
					beamLength			= a - flightWidth + 0.1 - woodBaseOffset - bRiserCover * riserCoverThk + woodBaseOffset - max(nRisers2ndRun - nRisers1stRun, 0) * treadDepth
					carriageBaseDist	= flightWidth
					bCarrAboveBreakLine	= 1
					bBreakCarriageLine	= 1
					bShowCarriagePart2	= 1
					brLineAngle			= bet
					xNosing				= nosing * drawDetails[2]
					carrBreakLineDist	= NumStline * treadDepth - xNosing + (flightWidth / 2 - beamOffsetRight - beamThk / 2) * tan(brLineAngle) - bRiserCover * riserCoverThk
					gosub "carriage"
				del 1

				!!!!!******************************      LANDING 1.
				add2 flightWidth, a - flightWidth + 0.1 - woodBaseOffset - max(nRisers2ndRun - nRisers1stRun, 0) * treadDepth
				rot2 90
					beamLength			= b
					carriageBaseDist	= flightWidth - 0.1 + woodBaseOffset
					bCarrAboveBreakLine	= 1
					bBreakCarriageLine	= 0
					gosub "carriage"
				del 2

				!!!!!******************************      2nd RUN
				add2 flightWidth * 2 - b, a - flightWidth + 0.1 - max(nRisers2ndRun - nRisers1stRun, 0) * treadDepth
				rot2 -180
					beamLength			= a - flightWidth + 0.1
					carriageBaseDist	= flightWidth
					bCarrAboveBreakLine	= 1
					bBreakCarriageLine	= 0
					brLineAngle			= bet
					xNosing				= nosing * drawDetails[2]
					carrBreakLineDist	= a - flightWidth - xNosing - ((nRisers1stRun - 1) - (NumStline - 1)) * treadDepth - (flightWidth / 2 - beamOffsetRight - beamThk / 2) * tan(brLineAngle) + woodBaseOffset + 0.1
					gosub "carriage"
				del 2
			endif
		else
			if drawPart[1] then
				!!!!!******************************      1st RUN
				add2 0, bRiserCover * riserCoverThk
					beamLength			= a - flightWidth + 0.1 - woodBaseOffset - bRiserCover * riserCoverThk + woodBaseOffset - max(nRisers2ndRun - nRisers1stRun, 0) * treadDepth
					carriageBaseDist	= flightWidth
					bCarrAboveBreakLine	= 0
					bBreakCarriageLine	= 0
					gosub "carriage"
				del 1

				!!!!!******************************      LANDING 1.
				add2 flightWidth, a - flightWidth + 0.1 - woodBaseOffset - max(nRisers2ndRun - nRisers1stRun, 0) * treadDepth
				rot2 90
					beamLength			= b
					carriageBaseDist	= flightWidth - 0.1 + woodBaseOffset
					bCarrAboveBreakLine	= 0
					bBreakCarriageLine	= 0
					gosub "carriage"
				del 2

				!!!!!******************************      2nd RUN
				add2 flightWidth * 2 - b, a - flightWidth + 0.1 - max(nRisers2ndRun - nRisers1stRun, 0) * treadDepth
				rot2 -180
					beamLength			= a - flightWidth + 0.1
					carriageBaseDist	= flightWidth
					bCarrAboveBreakLine	= 0
					bBreakCarriageLine	= 1
					bShowCarriagePart1	= 1
					brLineAngle			= bet
					xNosing				= nosing * drawDetails[1]
					carrBreakLineDist	= a - flightWidth - xNosing - ((nRisers1stRun - 1) - (NumStline - 1)) * treadDepth + (flightWidth / 2 - beamOffsetRight - beamThk / 2) * tan(brLineAngle) + 0.1 - max(nRisers2ndRun - nRisers1stRun, 0) * treadDepth
					gosub "carriage"
				del 2
			endif

			if drawPart[2] then
				!!!!!******************************      2nd RUN
				add2 flightWidth * 2 - b, a - flightWidth + 0.1 - max(nRisers2ndRun - nRisers1stRun, 0) * treadDepth
				rot2 -180
					beamLength			= a - flightWidth + 0.1
					carriageBaseDist	= flightWidth
					bCarrAboveBreakLine	= 1
					bBreakCarriageLine	= 1
					bShowCarriagePart2	= 1
					brLineAngle			= bet
					xNosing				= nosing * drawDetails[2]
					carrBreakLineDist	= a - flightWidth - xNosing - ((nRisers1stRun - 1) - (NumStline - 1)) * treadDepth + (flightWidth / 2 - beamOffsetRight - beamThk / 2) * tan(brLineAngle) + 0.1 - max(nRisers2ndRun - nRisers1stRun, 0) * treadDepth
					gosub "carriage"
				del 2
			endif
		endif
	endif
endif


!===============================================================================
! --- Railings ---
!===============================================================================

if _bShowRailIn2D & not(belowStory) then
	bShowRailPart1			= 0
	bShowRailPart2			= 0
	breakLineW				= breakLineWidth
	breakLineDist			= 0
	brLineAngle				= bet

	bShowRailOn1stRun		= 0
	bShowRailOn1stLanding1	= 0
	bShowRailOn1stLanding2	= 0
	bShowRailOn2ndRun		= 0
	bShowRailOn2ndLanding1	= 0
	bShowRailOn2ndLanding2	= 0
	bShowRailOn3rdRun		= 0

	drawindex 30
	fill gs_fill_type

	! --- Left Rail ----------------------------------------------------------------
	if rail_m = 3 | rail_m = 1 then		! Left, Both
		if bSameRails then
			leftRailType_m = rightRailType_m
			leftWireType_m = rightWireType_m
		endif

		if drawPart[3] then
			if bShowRailOnFloorPlan then
				pen railPen
				if aboveStory then
					LINE_TYPE railLineType
				else
					if (drawDashed[3]) then
						LINE_TYPE dash_line
					else
						LINE_TYPE railLineType
					endif
				endif

				if bSymbolic2D then
					bShowRailOn1stRun		= 1
					bShowRailOn1stLanding1	= 1
					bShowRailOn1stLanding2	= 1
					bShowRailOn1stLanding3	= 1
					bShowRailOn2ndRun		= 1
					bBreakRailLine			= 0
					bRailAboveBreakLine		= 0
					gosub "left rail"
				else
					poly2_b 9, 1+2+64, gs_fill_pen, gs_back_pen,
						leftRailOffset+leftRailFrameThk,					-leftRailOvhgBottom,												1,
						leftRailOffset,										-leftRailOvhgBottom,												1,
						leftRailOffset,										 (nRisers1stRun)*treadDepth+leftRailOffset,					1,
						-b+2*flightWidth-leftRailOffset,					 (nRisers1stRun)*treadDepth+leftRailOffset,					1,
						-b+2*flightWidth-leftRailOffset,					 (nRisers1stRun-nRisers2ndRun)*treadDepth-leftRailOvhgTop,			1,
						-b+2*flightWidth-leftRailOffset-leftRailFrameThk,	 (nRisers1stRun-nRisers2ndRun)*treadDepth-leftRailOvhgTop,			1,
						-b+2*flightWidth-leftRailOffset-leftRailFrameThk,	 (nRisers1stRun)*treadDepth+leftRailOffset+leftRailFrameThk,	1,
						leftRailOffset+leftRailFrameThk,					 (nRisers1stRun)*treadDepth+leftRailOffset+leftRailFrameThk,	1,
						leftRailOffset+leftRailFrameThk,					-leftRailOvhgBottom,												-1
				endif
			endif

			if bShowRailAxis then
				line_type railAxisLineType
				pen gs_RailAxisPen
				line2 leftRailOffset+leftRailFrameThk/2, (nRisers1stRun)*treadDepth+leftRailOffset+leftRailFrameThk/2,leftRailOffset+leftRailFrameThk/2,-leftRailOvhgBottom
				line2 -b+2*flightWidth-leftRailOffset-leftRailFrameThk/2, (nRisers1stRun)*treadDepth+leftRailOffset+leftRailFrameThk/2,leftRailOffset+leftRailFrameThk/2,(nRisers1stRun)*treadDepth+leftRailOffset+leftRailFrameThk/2
				line2 -b+2*flightWidth-leftRailOffset-leftRailFrameThk/2, (nRisers1stRun)*treadDepth+leftRailOffset+leftRailFrameThk/2,-b+2*flightWidth-leftRailOffset-leftRailFrameThk/2,(nRisers1stRun-nRisers2ndRun)*treadDepth-leftRailOvhgTop
			endif
		else		! BREAK LINE - Railing
			if hasBreak1st then
				if drawPart[1] & bShowRailOnFloorPlan then
					pen railPen
					if aboveStory then
						SET LINE_TYPE railLineType
					else
						if (drawDashed[1]) then
							SET LINE_TYPE dash_line
						else
							SET LINE_TYPE railLineType
						endif
					endif
					xNosing = nosing * drawDetails[1]

					if bSymbolic2D then
						bShowRailOn1stRun		= 1
						bShowRailOn1stLanding1	= 0
						bShowRailOn1stLanding2	= 0
						bShowRailOn1stLanding3	= 0
						bShowRailOn2ndRun		= 0
						bBreakRailLine			= 1
						brLineAngle				= -bet
						bShowRailPart1			= 1
						breakLineDist			= leftRailOvhgBottom - xNosing + (NumStline - 1) * treadDepth + (leftRailOffset) * TAN(bet)
						breakLineW				= breakLineWidth + xNosing
						bRailAboveBreakLine		= 0
						gosub "left rail"
					else
						poly2_b 5, 1+2+64, gs_fill_pen, gs_back_pen,
							leftRailOffset,					-leftRailOvhgBottom,1,
							leftRailOffset+leftRailFrameThk,-leftRailOvhgBottom,1,
							leftRailOffset+leftRailFrameThk,-xNosing + (NumStline-1)*treadDepth+(leftRailOffset+leftRailFrameThk)*tan(bet),1,
							leftRailOffset,					-xNosing + (NumStline-1)*treadDepth+(leftRailOffset)*tan(bet),1,
							leftRailOffset,					-leftRailOvhgBottom,-1
					endif
				endif

				if drawPart[2] & bShowRailOnFloorPlan and bShowRailAboveBreakLine then
					pen railPen
					if aboveStory then
						LINE_TYPE railLineType
					else
						if (drawDashed[2]) then
							LINE_TYPE dash_line
						else
							LINE_TYPE railLineType
						endif
					endif
					xNosing = nosing * drawDetails[2]

					if bSymbolic2D then
						xNosing =  nosing * NOT(drawDetails[2])
						bShowRailOn1stRun		= 1
						bShowRailOn1stLanding1	= 0
						bShowRailOn1stLanding2	= 0
						bShowRailOn1stLanding3	= 0
						bShowRailOn2ndRun		= 0
						bBreakRailLine			= 1
						brLineAngle				= -bet
						bShowRailPart2			= 1
						breakLineDist			= leftRailOvhgBottom - nosing + (NumStline - 1) * treadDepth + (leftRailOffset) * TAN(bet)
						breakLineW				= breakLineWidth + xNosing
						bRailAboveBreakLine		= 1
						gosub "left rail"

						bShowRailOn1stRun		= 0
						bShowRailOn1stLanding1	= 1
						bShowRailOn1stLanding2	= 1
						bShowRailOn1stLanding3	= 1
						bShowRailOn2ndRun		= 1
						bBreakRailLine			= 0
						bRailAboveBreakLine		= 1
						gosub "left rail"
					else
						POLY2_b 9, 1 + 2 * gs_FillAbove+64, gs_fill_pen, gs_back_pen,
							leftRailOffset,(nRisers1stRun)*treadDepth-xNosing+leftRailOffset,1,
							-b+2*flightWidth-leftRailOffset,(nRisers1stRun)*treadDepth-xNosing+leftRailOffset,1,
							-b+2*flightWidth-leftRailOffset,(nRisers1stRun-nRisers2ndRun)*treadDepth-leftRailOvhgTop,1,
							-b+2*flightWidth-leftRailOffset-leftRailFrameThk,(nRisers1stRun-nRisers2ndRun)*treadDepth-leftRailOvhgTop,1,
							-b+2*flightWidth-leftRailOffset-leftRailFrameThk,(nRisers1stRun)*treadDepth-xNosing+leftRailOffset+leftRailFrameThk,1,
							leftRailOffset+leftRailFrameThk,(nRisers1stRun)*treadDepth-xNosing+leftRailOffset+leftRailFrameThk,1,
							leftRailOffset+leftRailFrameThk,				-xNosing + (NumStline-1)*treadDepth+breakLineWidth+(leftRailOffset+leftRailFrameThk)*tan(bet),1,
							leftRailOffset,									-xNosing + (NumStline-1)*treadDepth+breakLineWidth+(leftRailOffset)*tan(bet),1,
							leftRailOffset,(nRisers1stRun)*treadDepth-xNosing+leftRailOffset,-1
					endif
				endif

				if bShowRailAxis then
					line_type railAxisLineType
					pen gs_RailAxisPen

					if drawPart[1] then
						xNosing = nosing * drawDetails[1]
						LINE2 leftRailOffset+leftRailFrameThk/2, -xNosing + (NumStline-1)*treadDepth+(leftRailOffset+leftRailFrameThk/2)*tan(bet),leftRailOffset+leftRailFrameThk/2,-leftRailOvhgBottom
					endif

					if drawPart[2] then
						xNosing = nosing * drawDetails[2]
						LINE2 leftRailOffset+leftRailFrameThk/2, -xNosing + (NumStline-1)*treadDepth+breakLineWidth+(leftRailOffset+leftRailFrameThk/2)*tan(bet),leftRailOffset+leftRailFrameThk/2,(nRisers1stRun)*treadDepth+leftRailOffset+leftRailFrameThk/2
						LINE2 -b+2*flightWidth-leftRailOffset-leftRailFrameThk/2, (nRisers1stRun)*treadDepth+leftRailOffset+leftRailFrameThk/2,leftRailOffset+leftRailFrameThk/2,(nRisers1stRun)*treadDepth+leftRailOffset+leftRailFrameThk/2
						LINE2 -b+2*flightWidth-leftRailOffset-leftRailFrameThk/2, (nRisers1stRun)*treadDepth+leftRailOffset+leftRailFrameThk/2,-b+2*flightWidth-leftRailOffset-leftRailFrameThk/2,(nRisers1stRun-nRisers2ndRun)*treadDepth-leftRailOvhgTop
					endif
				endif
			else
				if drawPart[1] & bShowRailOnFloorPlan then
					pen railPen
					if aboveStory then
						LINE_TYPE railLineType
					else
						if (drawDashed[1]) then
							LINE_TYPE dash_line
						else
							LINE_TYPE railLineType
						endif
					endif
					xNosing = nosing * drawDetails[1]

					if bSymbolic2D then
						bShowRailOn1stRun		= 1
						bShowRailOn1stLanding1	= 1
						bShowRailOn1stLanding2	= 1
						bShowRailOn1stLanding3	= 1
						bShowRailOn2ndRun		= 0
						bBreakRailLine			= 0
						bRailAboveBreakLine		= 0
						gosub "left rail"

						bShowRailOn1stRun		= 0
						bShowRailOn1stLanding1	= 0
						bShowRailOn1stLanding2	= 0
						bShowRailOn1stLanding3	= 0
						bShowRailOn2ndRun		= 1
						bBreakRailLine			= 1
						brLineAngle				= -bet
						bShowRailPart1			= 1
						if bComplexRailLeft then
							breakLineDist		= a-flightWidth-treadDepth/2 - xNosing + (treadDepth/2+leftRailFrameThk+min(leftRailOffset,treadDepth/2-leftRailFrameThk)) - ((nRisers1stRun)*treadDepth-(NumStline-1)*treadDepth-(leftRailFrameThk*0+leftRailOffset)*tan(bet))\
												-max(nRisers2ndRun - nRisers1stRun, 0) * treadDepth
						else
							breakLineDist		= a-flightWidth+leftRailFrameThk+min(leftRailOffset,treadDepth-leftRailFrameThk) - xNosing - ((nRisers1stRun)*treadDepth-(NumStline-1)*treadDepth-(leftRailFrameThk*0+leftRailOffset)*tan(bet))\
												-max(nRisers2ndRun - nRisers1stRun, 0) * treadDepth
						endif
						breakLineW				= breakLineWidth + xNosing
						bRailAboveBreakLine		= 0
						gosub "left rail"
					else
						POLY2_b 9, 1+2+4+64, gs_fill_pen, gs_back_pen,
							leftRailOffset,-leftRailOvhgBottom,1,
							leftRailOffset+leftRailFrameThk,-leftRailOvhgBottom,1,
							leftRailOffset+leftRailFrameThk,(nRisers1stRun)*treadDepth-xNosing+leftRailOffset+leftRailFrameThk,1,
							-b+2*flightWidth-leftRailOffset-leftRailFrameThk,(nRisers1stRun)*treadDepth-xNosing+leftRailOffset+leftRailFrameThk,1,
							-b+2*flightWidth-leftRailOffset-leftRailFrameThk,(nRisers1stRun)*treadDepth-(NumStline-1)*treadDepth-(leftRailFrameThk+leftRailOffset)*tan(bet),1,
							-b+2*flightWidth-leftRailOffset,(nRisers1stRun)*treadDepth-(NumStline-1)*treadDepth-(leftRailOffset)*tan(bet),1,
							-b+2*flightWidth-leftRailOffset,(nRisers1stRun)*treadDepth-xNosing+leftRailOffset,1,
							leftRailOffset,(nRisers1stRun)*treadDepth-xNosing+leftRailOffset,1,
							leftRailOffset,-leftRailOvhgBottom,-1
					endif
				endif

				if drawPart[2] & bShowRailOnFloorPlan and bShowRailAboveBreakLine then
					pen railPen
					if aboveStory then
						LINE_TYPE railLineType
					else
						if (drawDashed[2]) then
							LINE_TYPE dash_line
						else
							LINE_TYPE railLineType
						endif
					endif

					if bSymbolic2D then
						xNosing = nosing * NOT(drawDetails[2])
						bShowRailOn1stRun		= 0
						bShowRailOn1stLanding1	= 0
						bShowRailOn1stLanding2	= 0
						bShowRailOn1stLanding3	= 0
						bShowRailOn2ndRun		= 1
						bBreakRailLine			= 1
						brLineAngle				= -bet
						bShowRailPart2			= 1
						if bComplexRailLeft then
							breakLineDist		= a-flightWidth-treadDepth/2 - nosing + (treadDepth/2+leftRailFrameThk+min(leftRailOffset,treadDepth/2-leftRailFrameThk)) - ((nRisers1stRun)*treadDepth-(NumStline-1)*treadDepth-(leftRailFrameThk*0+leftRailOffset)*tan(bet))\
												-max(nRisers2ndRun - nRisers1stRun, 0) * treadDepth
						else
							breakLineDist		= a-flightWidth+leftRailFrameThk+min(leftRailOffset,treadDepth-leftRailFrameThk) - nosing - ((nRisers1stRun)*treadDepth-(NumStline-1)*treadDepth-(leftRailFrameThk*0+leftRailOffset)*tan(bet))\
												-max(nRisers2ndRun - nRisers1stRun, 0) * treadDepth
						endif
						breakLineW				= breakLineWidth + xNosing
						bRailAboveBreakLine		= 1
						gosub "left rail"
					else
						xNosing = nosing * drawDetails[2]
						POLY2_b 5, 1+2*gs_FillAbove+4+64, gs_fill_pen, gs_back_pen,
							-b+2*flightWidth-leftRailOffset,					(nRisers1stRun)*treadDepth-(NumStline-1)*treadDepth-(leftRailOffset)*tan(bet)-breakLineWidth,1,
							-b+2*flightWidth-leftRailOffset-leftRailFrameThk,	(nRisers1stRun)*treadDepth-(NumStline-1)*treadDepth-(leftRailFrameThk+leftRailOffset)*tan(bet)-breakLineWidth,1,
							-b+2*flightWidth-leftRailOffset-leftRailFrameThk,	(nRisers1stRun)*treadDepth-nRisers2ndRun*treadDepth-leftRailOvhgTop,1,
							-b+2*flightWidth-leftRailOffset,					(nRisers1stRun)*treadDepth-nRisers2ndRun*treadDepth-leftRailOvhgTop,1,
							-b+2*flightWidth-leftRailOffset,					(nRisers1stRun)*treadDepth-(NumStline-1)*treadDepth-(leftRailOffset)*tan(bet)-breakLineWidth,-1
					endif
				endif

				if bShowRailAxis then
					line_type railAxisLineType
					pen gs_RailAxisPen

					if drawPart[1] then
						xNosing = nosing * drawDetails[1]
						LINE2 leftRailOffset+leftRailFrameThk/2,-leftRailOvhgBottom,
								leftRailOffset+leftRailFrameThk/2,(nRisers1stRun)*treadDepth-xNosing+leftRailOffset+leftRailFrameThk
						LINE2 -b+2*flightWidth-leftRailOffset-leftRailFrameThk/2,(nRisers1stRun)*treadDepth-xNosing+leftRailOffset+leftRailFrameThk,
								leftRailOffset+leftRailFrameThk/2,(nRisers1stRun)*treadDepth-xNosing+leftRailOffset+leftRailFrameThk
						LINE2 -b+2*flightWidth-leftRailOffset-leftRailFrameThk/2, (nRisers1stRun)*treadDepth-(NumStline-1)*treadDepth + nosing -(leftRailFrameThk/2+leftRailOffset)*tan(bet),
								-b+2*flightWidth-leftRailOffset-leftRailFrameThk/2,(nRisers1stRun)*treadDepth-xNosing+leftRailOffset+leftRailFrameThk
					endif
					if drawPart[2] and drawPart[2] and bShowRailAboveBreakLine then
						xNosing = nosing * drawDetails[2]
						LINE2 -b+2*flightWidth-leftRailOffset-leftRailFrameThk/2, (nRisers1stRun)*treadDepth-(NumStline-1)*treadDepth + xNosing -(leftRailFrameThk/2+leftRailOffset)*tan(bet)-breakLineWidth,
								-b+2*flightWidth-leftRailOffset-leftRailFrameThk/2,(nRisers1stRun)*treadDepth-nRisers2ndRun*treadDepth-leftRailOvhgTop
					endif
				endif
			endif
		endif
	endif

	! --- Right Rail ---------------------------------------------------------------
	pen gs_cont_pen
	if rail_m = 2 | rail_m = 1 then		! Right, Both
		if drawPart[3] then
			if bShowRailOnFloorPlan then
				pen railPen
				if aboveStory then
					LINE_TYPE railLineType
				else
					if (drawDashed[3]) then
						LINE_TYPE dash_line
					else
						LINE_TYPE railLineType
					endif
				endif

				if bSymbolic2D then
					bShowRailOn1stRun		= 1
					bShowRailOn1stLanding1	= 1
					bShowRailOn1stLanding2	= 1
					bShowRailOn1stLanding3	= 1
					bShowRailOn2ndRun		= 1
					bBreakRailLine			= 0
					bRailAboveBreakLine		= 0
					gosub "right rail"
				else
					POLY2_b 9, 1+2+64, gs_fill_pen, gs_back_pen,
						flightWidth-rightRailOffset-rightRailFrameThk,-rightRailOvhgBottom,1,
						flightWidth-rightRailOffset,-rightRailOvhgBottom,1,
						flightWidth-rightRailOffset,(nRisers1stRun)*treadDepth+flightWidth-rightRailOffset,1,
						-b+flightWidth+rightRailOffset,(nRisers1stRun)*treadDepth+flightWidth-rightRailOffset,1,
						-b+flightWidth+rightRailOffset,(nRisers1stRun-nRisers2ndRun)*treadDepth-rightRailOvhgTop,1,
						-b+flightWidth+rightRailOffset+rightRailFrameThk,(nRisers1stRun-nRisers2ndRun)*treadDepth-rightRailOvhgTop,1,
						-b+flightWidth+rightRailOffset+rightRailFrameThk,(nRisers1stRun)*treadDepth+flightWidth-rightRailOffset-rightRailFrameThk,1,
						flightWidth-rightRailOffset-rightRailFrameThk,(nRisers1stRun)*treadDepth+flightWidth-rightRailOffset-rightRailFrameThk,1,
						flightWidth-rightRailOffset-rightRailFrameThk,-rightRailOvhgBottom,-1
				endif
			endif

			if bShowRailAxis then
				line_type railAxisLineType
				pen gs_RailAxisPen

				LINE2 flightWidth-rightRailOffset-rightRailFrameThk/2, (nRisers1stRun)*treadDepth+flightWidth-rightRailOffset-rightRailFrameThk/2,flightWidth-rightRailOffset-rightRailFrameThk/2,-rightRailOvhgBottom
				LINE2 -b+flightWidth+rightRailOffset+rightRailFrameThk/2, (nRisers1stRun)*treadDepth+flightWidth-rightRailOffset-rightRailFrameThk/2,\
					flightWidth-rightRailOffset-rightRailFrameThk/2,(nRisers1stRun)*treadDepth+flightWidth-rightRailOffset-rightRailFrameThk/2
				LINE2 -b+flightWidth+rightRailOffset+rightRailFrameThk/2, (nRisers1stRun)*treadDepth+flightWidth-rightRailOffset-rightRailFrameThk/2,-b+flightWidth+rightRailOffset+rightRailFrameThk/2,(nRisers1stRun-nRisers2ndRun)*treadDepth-rightRailOvhgTop
			endif
		else
			if hasBreak1st then
				if drawPart[1] & bShowRailOnFloorPlan then
					pen railPen
					if aboveStory then
						LINE_TYPE railLineType
					else
						if (drawDashed[1]) then
							LINE_TYPE dash_line
						else
							LINE_TYPE railLineType
						endif
					endif
					xNosing = nosing * drawDetails[1]

					if bSymbolic2D then
						bShowRailOn1stRun		= 1
						bShowRailOn1stLanding1	= 0
						bShowRailOn1stLanding2	= 0
						bShowRailOn1stLanding3	= 0
						bShowRailOn2ndRun		= 0
						bBreakRailLine			= 1
						brLineAngle				= -bet
						bShowRailPart1			= 1
						breakLineDist			= rightRailOvhgBottom - xNosing + (NumStline + 1) * treadDepth - (rightRailOffset + rightRailFrameThk) * TAN(bet)
						breakLineW				= breakLineWidth + xNosing
						bRailAboveBreakLine		= 0
						gosub "right rail"
					else
						poly2_b 5, 1+2+64, gs_fill_pen, gs_back_pen,
							flightWidth-rightRailOffset,					-rightRailOvhgBottom,1,
							flightWidth-rightRailOffset-rightRailFrameThk,	-rightRailOvhgBottom,1,
							flightWidth-rightRailOffset-rightRailFrameThk,	-xNosing + (NumStline+1)*treadDepth-(rightRailOffset+rightRailFrameThk)*tan(bet),1,
							flightWidth-rightRailOffset,					-xNosing + (NumStline+1)*treadDepth-(rightRailOffset)*tan(bet),1,
							flightWidth-rightRailOffset,					-rightRailOvhgBottom,-1
					endif
				endif

				if drawPart[2] & bShowRailOnFloorPlan and bShowRailAboveBreakLine then
					pen railPen
					if aboveStory then
						LINE_TYPE railLineType
					else
						if (drawDashed[2]) then
							LINE_TYPE dash_line
						else
							LINE_TYPE railLineType
						endif
					endif
					xNosing = nosing * drawDetails[2]

					if bSymbolic2D then
						xNosing = nosing * NOT(drawDetails[2])
						bShowRailOn1stRun		= 1
						bShowRailOn1stLanding1	= 0
						bShowRailOn1stLanding2	= 0
						bShowRailOn1stLanding3	= 0
						bShowRailOn2ndRun		= 0
						bBreakRailLine			= 1
						brLineAngle				= -bet
						bShowRailPart2			= 1
						breakLineDist			= rightRailOvhgBottom - nosing + (NumStline + 1) * treadDepth - (rightRailOffset + rightRailFrameThk) * TAN(bet)
						breakLineW				= breakLineWidth + xNosing
						bRailAboveBreakLine		= 1
						gosub "right rail"

						bShowRailOn1stRun		= 0
						bShowRailOn1stLanding1	= 1
						bShowRailOn1stLanding2	= 1
						bShowRailOn1stLanding3	= 1
						bShowRailOn2ndRun		= 1
						bBreakRailLine			= 0
						bRailAboveBreakLine		= 1
						gosub "right rail"
					else
						POLY2_b 9, 1+2*gs_FillAbove+64, gs_fill_pen, gs_back_pen,
							flightWidth-rightRailOffset,						(nRisers1stRun)*treadDepth+flightWidth-rightRailOffset,1,
							-b+flightWidth+rightRailOffset,						(nRisers1stRun)*treadDepth+flightWidth-rightRailOffset,1,
							-b+flightWidth+rightRailOffset,						(nRisers1stRun-nRisers2ndRun)*treadDepth-rightRailOvhgTop,1,
							-b+flightWidth+rightRailOffset+rightRailFrameThk,	(nRisers1stRun-nRisers2ndRun)*treadDepth-rightRailOvhgTop,1,
							-b+flightWidth+rightRailOffset+rightRailFrameThk,	(nRisers1stRun)*treadDepth+flightWidth-rightRailOffset-rightRailFrameThk,1,
							flightWidth-rightRailOffset-rightRailFrameThk,		(nRisers1stRun)*treadDepth+flightWidth-rightRailOffset-rightRailFrameThk,1,
							flightWidth-rightRailOffset-rightRailFrameThk,		(NumStline+1)*treadDepth-xNosing+breakLineWidth-(rightRailOffset+rightRailFrameThk)*tan(bet),1,
							flightWidth-rightRailOffset,						(NumStline+1)*treadDepth-xNosing+breakLineWidth-(rightRailOffset)*tan(bet),1,
							flightWidth-rightRailOffset,						(nRisers1stRun)*treadDepth+flightWidth-rightRailOffset,-1
					endif
				endif

				if bShowRailAxis then
					line_type railAxisLineType
					pen gs_RailAxisPen

					if drawPart[1] then
						xNosing = nosing * drawDetails[1]

						LINE2 flightWidth-rightRailOffset-rightRailFrameThk/2,-rightRailOvhgBottom,flightWidth-rightRailOffset-rightRailFrameThk/2,-xNosing + (NumStline+1)*treadDepth-(rightRailOffset+rightRailFrameThk/2)*tan(bet)
					endif
					if drawPart[2] then
						xNosing = nosing * drawDetails[2]
						LINE2 flightWidth-rightRailOffset-rightRailFrameThk/2, -xNosing + (NumStline+1)*treadDepth+breakLineWidth-(rightRailOffset+rightRailFrameThk/2)*tan(bet),\
						flightWidth-rightRailOffset-rightRailFrameThk/2,(nRisers1stRun)*treadDepth+flightWidth-rightRailOffset-rightRailFrameThk/2
						LINE2 -b+flightWidth+rightRailOffset+rightRailFrameThk/2, (nRisers1stRun)*treadDepth+flightWidth-rightRailOffset-rightRailFrameThk/2,\
						flightWidth-rightRailOffset-rightRailFrameThk/2,(nRisers1stRun)*treadDepth+flightWidth-rightRailOffset-rightRailFrameThk/2
						LINE2 -b+flightWidth+rightRailOffset+rightRailFrameThk/2, (nRisers1stRun)*treadDepth+flightWidth-rightRailOffset-rightRailFrameThk/2,-b+flightWidth+rightRailOffset+rightRailFrameThk/2,(nRisers1stRun-nRisers2ndRun)*treadDepth-rightRailOvhgTop
					ENDIF
				ENDIF
			else
				if drawPart[1] & bShowRailOnFloorPlan then
					pen railPen
					if aboveStory then
						LINE_TYPE railLineType
					else
						if (drawDashed[1]) then
							LINE_TYPE dash_line
						else
							LINE_TYPE railLineType
						endif
					endif
					xNosing = nosing * drawDetails[1]

					if bSymbolic2D then
						bShowRailOn1stRun		= 1
						bShowRailOn1stLanding1	= 1
						bShowRailOn1stLanding2	= 1
						bShowRailOn1stLanding3	= 1
						bShowRailOn2ndRun		= 0
						bBreakRailLine			= 0
						bRailAboveBreakLine		= 0
						gosub "right rail"

						bShowRailOn1stRun		= 0
						bShowRailOn1stLanding1	= 0
						bShowRailOn1stLanding2	= 0
						bShowRailOn1stLanding3	= 0
						bShowRailOn2ndRun		= 1
						bBreakRailLine			= 1
						brLineAngle				= -bet
						bShowRailPart1			= 1
						if bComplexRailRight then
							breakLineDist		= a-flightWidth+treadDepth/2 - xNosing - ((nRisers1stRun)*treadDepth-(NumStline+1)*treadDepth+(rightRailFrameThk+rightRailOffset)*tan(bet))\
												-max(nRisers2ndRun - nRisers1stRun, 0) * treadDepth
						else
							breakLineDist		= a-flightWidth+treadDepth - xNosing - ((nRisers1stRun)*treadDepth-(NumStline+1)*treadDepth+(rightRailFrameThk+rightRailOffset)*tan(bet))\
												-max(nRisers2ndRun - nRisers1stRun, 0) * treadDepth
						endif
						breakLineW				= breakLineWidth + xNosing
						bRailAboveBreakLine		= 0
						gosub "right rail"
					else
						POLY2_b 9, 1+2+4+64, gs_fill_pen, gs_back_pen,
							flightWidth-rightRailOffset,-rightRailOvhgBottom,1,
							flightWidth-rightRailOffset-rightRailFrameThk,-rightRailOvhgBottom,1,
							flightWidth-rightRailOffset-rightRailFrameThk,(nRisers1stRun)*treadDepth+flightWidth-rightRailOffset-rightRailFrameThk,1,
							-b+flightWidth+rightRailOffset+rightRailFrameThk,(nRisers1stRun)*treadDepth+flightWidth-rightRailOffset-rightRailFrameThk,1,
							-b+flightWidth+rightRailOffset+rightRailFrameThk,(nRisers1stRun)*treadDepth-(NumStline+1)*treadDepth+(rightRailFrameThk+rightRailOffset)*tan(bet),1,
							-b+flightWidth+rightRailOffset,(nRisers1stRun)*treadDepth-(NumStline+1)*treadDepth+(rightRailOffset)*tan(bet),1,
							-b+flightWidth+rightRailOffset,(nRisers1stRun)*treadDepth+flightWidth-rightRailOffset,1,
							flightWidth-rightRailOffset,(nRisers1stRun)*treadDepth+flightWidth-rightRailOffset,1,
							flightWidth-rightRailOffset,-rightRailOvhgBottom,-1
					endif
				endif

				if drawPart[2] & bShowRailOnFloorPlan and bShowRailAboveBreakLine then
					pen railPen
					if aboveStory then
						LINE_TYPE railLineType
					else
						if (drawDashed[2]) then
							LINE_TYPE dash_line
						else
							LINE_TYPE railLineType
						endif
					endif

					if bSymbolic2D then
						xNosing = nosing * NOT(drawDetails[2])
						bShowRailOn1stRun		= 0
						bShowRailOn1stLanding1	= 0
						bShowRailOn1stLanding2	= 0
						bShowRailOn1stLanding3	= 0
						bShowRailOn2ndRun		= 1
						bBreakRailLine			= 1
						brLineAngle				= -bet
						bShowRailPart2			= 1
						if bComplexRailRight then
							breakLineDist		= a-flightWidth+treadDepth/2 - nosing - ((nRisers1stRun)*treadDepth-(NumStline+1)*treadDepth+(rightRailFrameThk+rightRailOffset)*tan(bet))\
												-max(nRisers2ndRun - nRisers1stRun, 0) * treadDepth
						else
							breakLineDist		= a-flightWidth+treadDepth - nosing - ((nRisers1stRun)*treadDepth-(NumStline+1)*treadDepth+(rightRailFrameThk+rightRailOffset)*tan(bet))\
												-max(nRisers2ndRun - nRisers1stRun, 0) * treadDepth
						endif
						breakLineW				= breakLineWidth + xNosing
						bRailAboveBreakLine		= 1
						gosub "right rail"
					else
						xNosing = nosing * drawDetails[2]
						POLY2_b 5, 1+2*gs_FillAbove+4+64, gs_fill_pen, gs_back_pen,
							-b+flightWidth+rightRailOffset,(nRisers1stRun)*treadDepth-(NumStline+1)*treadDepth+(rightRailOffset)*tan(bet)-breakLineWidth,1,
							-b+flightWidth+rightRailOffset+rightRailFrameThk,(nRisers1stRun)*treadDepth-(NumStline+1)*treadDepth+(rightRailFrameThk+rightRailOffset)*tan(bet)-breakLineWidth,1,
							-b+flightWidth+rightRailOffset+rightRailFrameThk,(nRisers1stRun)*treadDepth-nRisers2ndRun*treadDepth-rightRailOvhgTop,1,
							-b+flightWidth+rightRailOffset,(nRisers1stRun)*treadDepth-nRisers2ndRun*treadDepth-rightRailOvhgTop,1,
							-b+flightWidth+rightRailOffset,(nRisers1stRun)*treadDepth-(NumStline+1)*treadDepth+(rightRailOffset)*tan(bet)-breakLineWidth,-1
					endif
				endif

				if bShowRailAxis then
					line_type railAxisLineType
					pen gs_RailAxisPen

					if drawPart[1] then
						xNosing = nosing * drawDetails[1]
						LINE2 flightWidth-rightRailOffset-rightRailFrameThk/2, (nRisers1stRun)*treadDepth+flightWidth-rightRailOffset-rightRailFrameThk/2,
							flightWidth-rightRailOffset-rightRailFrameThk/2,-rightRailOvhgBottom
						LINE2 -b+flightWidth+rightRailOffset+rightRailFrameThk/2, (nRisers1stRun)*treadDepth+flightWidth-rightRailOffset-rightRailFrameThk/2,\
							flightWidth-rightRailOffset-rightRailFrameThk/2,(nRisers1stRun)*treadDepth+flightWidth-rightRailOffset-rightRailFrameThk/2
						LINE2 -b+flightWidth+rightRailOffset+rightRailFrameThk/2, (nRisers1stRun)*treadDepth+xNosing-(NumStline+1)*treadDepth+(rightRailFrameThk/2+rightRailOffset)*tan(bet),\
							-b+flightWidth+rightRailOffset+rightRailFrameThk/2,(nRisers1stRun)*treadDepth+flightWidth-rightRailOffset-rightRailFrameThk/2
					endif
					if drawPart[2] then
						xNosing = nosing * drawDetails[2]
						LINE2 -b+flightWidth+rightRailOffset+rightRailFrameThk/2, (nRisers1stRun)*treadDepth+xnosing-(NumStline+1)*treadDepth+(rightRailFrameThk/2+rightRailOffset)*tan(bet)-breakLineWidth,\
							-b+flightWidth+rightRailOffset+rightRailFrameThk/2,(nRisers1stRun)*treadDepth-nRisers2ndRun*treadDepth-rightRailOvhgTop
					endif
				endif
			endif
		endif
	endif
endif


! ==============================================================================
! Text / Up - Down Text / Numbering
! ==============================================================================

! --- Oriented View ------------------------------------------------------------
angleViewRot = 0
if bShowRiseAndRunText | walkingDirUPDN_m <> 1 | drawNum | gs_description <> "" then
	rrr = REQUEST ("View_Rotangle", "", angleViewRot)
endif
totalRotate = (SYMB_ROTANGLE + angleViewRot) MOD 360


! --- Define Font Style --------------------------------------------------------

define style "UPDN" fontType, UPDNfontsize, 5, 0		  	! UP/DN

define style "stepnum" fontType, gs_NumTextSize, 1, 0		! Numbering

define style "description" fontType, gs_desc_text_size, 4, 0	! Description

! --- Rise & Run Text -------------------------------------------------------

if bShowRiseAndRunText & bShowWalkLine & not(belowStory) then
	call "Stair_RiseRun_Text" PARAMETERS ALL	totalRotate	= totalRotate,
												iRotateType = 2,
												iRiseRunTextPosition = 1,
												RiseRunUNID	= RiseRunUNID
endif


! --- Up & Down Text ---------------------------------------------------------
iReadable = 0
if walkingDirUPDN_m <> 1 & bShowWalkLine & not(belowStory) then		! None
	DRAWINDEX 50
	PEN UPDNfontpen
	xNosing = nosing * (drawDetails[1]|drawDetails[3])

	if (walkingDirUPDN_m = 2 | walkingDirUPDN_m = 5 | (walkingDirUPDN_m = 6 & not(abovestory) & not(belowstory) )) & (drawPart[1]|drawPart[3]) then
		nTransUPDN = 0
		set style "UPDN"
		add2 flightWidth/2+DirUPDN_X,DirUPDN_Y-xNosing
		nTransUPDN = nTransUPDN + 1
		! Text Rotation - Readable / Parallel with Walking Line / Align with Symbol
		! ----------------------------------------------------------------------
		if typeTextRotation_UpDn_m = 2 then									! Readable
			if ((totalRotate  > (gs_readable_angle - 90 + eps) & totalRotate < (gs_readable_angle + 180 - 90 + eps)) & SYMB_MIRRORED) | \
				((totalRotate  < (gs_readable_angle - 90 + eps) | totalRotate > (gs_readable_angle + 180 - 90 + eps)) & not(SYMB_MIRRORED)) then
				rot2 180
				nTransUPDN = nTransUPDN + 1
			endif
		else
			if typeTextRotation_UpDn_m = 1 then								! Parallel with Walking Line
				iReadable = (totalRotate > (gs_readable_angle + eps) & totalRotate < (gs_readable_angle + 180 + eps))- not(totalRotate > (gs_readable_angle + eps) & totalRotate < (gs_readable_angle + 180 + eps))
				rot2 -90 * iReadable
				nTransUPDN = nTransUPDN + 1
			endif
		endif
		! ----------------------------------------------------------------------
		rot2 AngUPDN
		nTransUPDN = nTransUPDN + 1

		string1	= `ВВЕРХ`
		text2 0,0, string1

		del nTransUPDN

		width1	= STW (string1)/1000*GLOB_SCALE
		rb		= width1/2
	endif

	if walkingDirUPDN_m = 3 & (drawPart[1]|drawPart[3]) then ! Down at Bottom
		nTransUPDN = 0
		set style "UPDN"
		add2 flightWidth/2+DirUPDN_X,DirUPDN_Y-xNosing
		nTransUPDN = nTransUPDN + 1

		! Text Rotation - Readable / Parallel with Walking Line / Align with Symbol
		! ----------------------------------------------------------------------
		if typeTextRotation_UpDn_m = 2 then									! Readable
			if ((totalRotate  > (gs_readable_angle - 90 + eps) & totalRotate < (gs_readable_angle + 180 - 90 + eps)) & SYMB_MIRRORED) | \
				((totalRotate  < (gs_readable_angle - 90 + eps) | totalRotate > (gs_readable_angle + 180 - 90 + eps)) & not(SYMB_MIRRORED)) then
				rot2 180
				nTransUPDN = nTransUPDN + 1
			endif
		else
			if typeTextRotation_UpDn_m = 1 then								! Parallel with Walking Line
				iReadable = (totalRotate > (gs_readable_angle + eps) & totalRotate < (gs_readable_angle + 180 + eps))- not(totalRotate > (gs_readable_angle + eps) & totalRotate < (gs_readable_angle + 180 + eps))
				rot2 -90 * iReadable
				nTransUPDN = nTransUPDN + 1
			endif
		endif
		! ----------------------------------------------------------------------
		rot2 AngUPDN
		nTransUPDN = nTransUPDN + 1

		text2 0,0, gs_CustomText_Down

		del nTransUPDN

		string2	= gs_CustomText_Down
		width2	= STW (string2)/1000*GLOB_SCALE
		rb		= width2/2
	endif

	if (walkingDirUPDN_m = 2 | walkingDirUPDN_m = 5 | walkingDirUPDN_m = 3 | (walkingDirUPDN_m = 6 & not(abovestory) & not(belowstory))) & (drawPart[1]|drawPart[3]) then
		nTransHotspot = 0
		add2 flightWidth/2+DirUPDN_X,DirUPDN_Y-xNosing
		nTransHotspot = nTransHotspot  + 1
		if typeTextRotation_UpDn_m = 1 then
			rot2 -90 * iReadable
			nTransHotspot = nTransHotspot  + 1
		endif
		HOTSPOT2 0,					0,				UpDownUNID,	AngUPDN,	6		: UpDownUNID=UpDownUNID+1
		HOTSPOT2 rb,				0,				UpDownUNID,	AngUPDN,	4+128	: UpDownUNID=UpDownUNID+1
		HOTSPOT2 rb*cos(AngUPDN),	rb*sin(AngUPDN),UpDownUNID,	AngUPDN,	5		: UpDownUNID=UpDownUNID+1
		DEL nTransHotspot
	endif

	if (walkingDirUPDN_m = 4 | walkingDirUPDN_m = 5 | (walkingDirUPDN_m = 6 & abovestory)) & (drawPart[2]|drawPart[3]) then
		nTransUPDN = 0
		set style "UPDN"
		add2 -B+3*flightWidth/2+DirUPDN_X_top,DirUPDN_Y_top
		nTransUPDN = nTransUPDN + 1

		! Text Rotation - Readable / Parallel with Walking Line / Align with Symbol
		! ----------------------------------------------------------------------
		if typeTextRotation_UpDn_m = 2 then									! Readable
			if ((totalRotate  > (gs_readable_angle - 90 + eps) & totalRotate < (gs_readable_angle + 180 - 90 + eps)) & SYMB_MIRRORED) | \
				((totalRotate  < (gs_readable_angle - 90 + eps) | totalRotate > (gs_readable_angle + 180 - 90 + eps)) & not(SYMB_MIRRORED)) then
				rot2 180
				nTransUPDN = nTransUPDN + 1
			endif
		else
			if typeTextRotation_UpDn_m = 1 then								! Parallel with Walking Line
				iReadable = (totalRotate > (gs_readable_angle + eps) & totalRotate < (gs_readable_angle + 180 + eps))- not(totalRotate > (gs_readable_angle + eps) & totalRotate < (gs_readable_angle + 180 + eps))
				rot2 -90 * iReadable
				nTransUPDN = nTransUPDN + 1
			endif
		endif
		! ----------------------------------------------------------------------
		rot2 AngUPDN_top
		nTransUPDN = nTransUPDN + 1

		text2 0,0, gs_CustomText_Down

		del nTransUPDN

		string2	= gs_CustomText_Down
		width2	= STW (string2)/1000*GLOB_SCALE
		rb		= width2/2
	endif

	if (walkingDirUPDN_m = 4 | walkingDirUPDN_m = 5 | (walkingDirUPDN_m = 6 & abovestory)) & (drawPart[2]|drawPart[3]) then
		nTransHotspot = 0
		ADD2 -B+3*flightWidth/2+DirUPDN_X_top,DirUPDN_Y_top
		nTransHotspot = nTransHotspot  + 1
		if typeTextRotation_UpDn_m = 1 then
			rot2 -90 * iReadable
			nTransHotspot = nTransHotspot  + 1
		endif
		HOTSPOT2 0,						0,					UpDownUNID,	AngUPDN_top,	6		: UpDownUNID=UpDownUNID+1
		HOTSPOT2 rb,					0,					UpDownUNID,	AngUPDN_top,	4+128	: UpDownUNID=UpDownUNID+1
		HOTSPOT2 rb*cos(AngUPDN_top),	rb*sin(AngUPDN_top),UpDownUNID,	AngUPDN_top,	5		: UpDownUNID=UpDownUNID+1
		DEL nTransHotspot
	endif
endif

! --- Numbering ----------------------------------------------------------------

if drawNum & not(belowStory) then
	startNumber	= 1
	endNumber	= nRisers1stRun

	xNosing = nosing * (drawDetails[1]|drawDetails[3])

	for iNumFlight = 1 to 2
		DRAWINDEX 50

		set style "stepnum"
		nnn = REQUEST ("Height_of_style", "stepnum", strHeight)
		strHeight = strHeight / 1000 * GLOB_SCALE

		add2 DirNumText_X, DirNumText_Y - treadDepth/2- xNosing

		for iNumStep = startNumber to endNumber
			add2 0, treadDepth
			pen gs_NumTextPen
			nTextTransformations = 0
			! Text Rotation - Readable / Align with Symbol
			! ----------------------------------------------------------------------
			if typeTextRotation_Num_m = 2 then								! Readable

				doRotate = 0
				if (iNumFlight = 1) exor SYMB_MIRRORED then
					if totalRotate < (gs_readable_angle - 90 + eps) | totalRotate > (gs_readable_angle + 180 - 90 + eps) then doRotate = 1
				else
					if totalRotate > (gs_readable_angle - 90 + eps) & totalRotate < (gs_readable_angle + 180 - 90 + eps) then doRotate = 1
				endif

				if doRotate = 1 then
					rot2 180
					strWidth = STW(str("%.0", iNumStep + nStartNumbering-1)) / 1000 * GLOB_SCALE
					add2 -strWidth, strHeight
					nTextTransformations = 2
				endif
			endif
			! ----------------------------------------------------------------------
			text2 0,0,iNumStep + nStartNumbering-1
			if nTextTransformations > 0 then del nTextTransformations
		next iNumStep
		del (endNumber - startNumber + 1) + 1

		startNumber = nRisers1stRun + 1
		endNumber = nRisers1stRun + nRisers2ndRun
		add2 -b + 2 * flightWidth,(nRisers1stRun) * treadDepth
		rot2 180
	next iNumFlight
	del 4

	hotspot2 0,				DirNumText_Y-xNosing,	unID, DirNumText_X, 1+128	:unID=unID+1
	hotspot2 -1,			DirNumText_Y-xNosing,	unID, DirNumText_X, 3		:unID=unID+1
	hotspot2 DirNumText_X,	DirNumText_Y-xNosing,	unID, DirNumText_X, 2		:unID=unID+1

	hotspot2 DirNumText_X, -xNosing,				unID, DirNumText_Y, 1+128	:unID=unID+1
	hotspot2 DirNumText_X, -1-xNosing,				unID, DirNumText_Y, 3		:unID=unID+1
	hotspot2 DirNumText_X, DirNumText_Y-xNosing,	unID, DirNumText_Y, 2		:unID=unID+1
endif

! --- Description ----------------------------------------------------------------

if STRLEN(gs_description) <> 0 & not(belowStory) then

	dim gs_description_bpos[3][3]
	gs_description_bpos[1][1] = flightWidth - B/2
	gs_description_bpos[1][2] = A-flightWidth/2
	gs_description_bpos[1][3] = 0

	style "description"
	pen gs_desc_text_pen
	add2 (gs_description_bpos[1][1] + gs_description_pos[1][1]), (gs_description_bpos[1][2] + gs_description_pos[1][2])

	textangle = (gs_description_bpos[1][3] + gs_description_pos[1][3])

	reversedText = 0
	angleFull = (totalRotate + textangle) MOD 360

	if angleFull < 0 then
		angleFull = angleFull + 360
	endif
	if angleFull > (gs_readable_angle+eps) & angleFull < (gs_readable_angle + 180 +eps) then
		reversedText = 1
		textangle = textangle + 180
	endif
	rot2 textangle

	if reversedText then
		text2 -STW(gs_description) / 1000 * GLOB_SCALE, 0, gs_description
	else
		text2 0,0, gs_description
	endif

	del 2
	hotspot2 gs_description_bpos[1][1], gs_description_bpos[1][2] + gs_description_pos[1][2], 40000+1, gs_description_pos[1][1], 1 + 128
	posRel = gs_description_pos[1][1]
	if abs(posRel) < 0.00001 then
		posRel = 0.0001
	else
		posRel = 0
	endif
	hotspot2 gs_description_bpos[1][1] - posRel, gs_description_bpos[1][2] + gs_description_pos[1][2], 40000+2, gs_description_pos[1][1], 3 + 128
	hotspot2 gs_description_bpos[1][1] + gs_description_pos[1][1], gs_description_bpos[1][2] + gs_description_pos[1][2], 40000+3, gs_description_pos[1][1], 2

	hotspot2 gs_description_bpos[1][1] + gs_description_pos[1][1], gs_description_bpos[1][2], 40000+4, gs_description_pos[1][2], 1 + 128
	posRel = gs_description_pos[1][2]
	if abs(posRel) < 0.00001 then
		posRel = 0.0001
	else
		posRel = 0
	endif
	hotspot2 gs_description_bpos[1][1] + gs_description_pos[1][1], gs_description_bpos[1][2] - posRel, 40000+5, gs_description_pos[1][2], 3 + 128
	hotspot2 gs_description_bpos[1][1] + gs_description_pos[1][1], gs_description_bpos[1][2] + gs_description_pos[1][2], 40000+6, gs_description_pos[1][2], 2

	!angle edit
	HOTSPOT2 gs_description_bpos[1][1] + gs_description_pos[1][1],
				gs_description_bpos[1][2] + gs_description_pos[1][2],
				40000+7, gs_description_pos[1][3], 6 + 128

	HOTSPOT2 gs_description_bpos[1][1] + gs_description_pos[1][1] + GLOB_SCALE*0.5*COS(gs_description_bpos[1][3])*gs_desc_text_size/1000,
				gs_description_bpos[1][2] + gs_description_pos[1][2] + GLOB_SCALE*0.5*SIN(gs_description_bpos[1][3])*gs_desc_text_size/1000,
				40000+8, gs_description_pos[1][3], 4 + 128

	HOTSPOT2 gs_description_bpos[1][1] + gs_description_pos[1][1] + GLOB_SCALE*0.5*gs_desc_text_size*COS(gs_description_bpos[1][3] + gs_description_pos[1][3])/1000,
				gs_description_bpos[1][2] + gs_description_pos[1][2] + GLOB_SCALE*0.5*gs_desc_text_size*SIN(gs_description_bpos[1][3] + gs_description_pos[1][3])/1000,
				40000+9, gs_description_pos[1][3], 5
endif

!===================================================================
! HOTSPOT EDITING in 2D
!===================================================================
DRAWINDEX 50
!-- FLIGHT WIDTH ---------------------------------------------------
DEL 1
xNosing = nosing * (drawDetails[1]|drawDetails[3])

HOTSPOT2 flightWidth,	a-flightWidth-nRisers1stRun*treadDepth,	FlightUNID, flightWidth, 1+256	: FlightUNID=FlightUNID+1
HOTSPOT2 0,				a-flightWidth-nRisers1stRun*treadDepth, FlightUNID, flightWidth, 2		: FlightUNID=FlightUNID+1
HOTSPOT2 flightWidth+1,	a-flightWidth-nRisers1stRun*treadDepth,	FlightUNID, flightWidth, 3		: FlightUNID=FlightUNID+1

HOTSPOT2 -b+flightWidth,	a-flightWidth-nRisers2ndRun*treadDepth,	FlightUNID, flightWidth, 1+128	: FlightUNID=FlightUNID+1
HOTSPOT2 -b+2*flightWidth,	a-flightWidth-nRisers2ndRun*treadDepth, FlightUNID, flightWidth, 2		: FlightUNID=FlightUNID+1
HOTSPOT2 -b+flightWidth-1,	a-flightWidth-nRisers2ndRun*treadDepth,	FlightUNID, flightWidth, 3		: FlightUNID=FlightUNID+1

HOTSPOT2 flightWidth,		a,	FlightUNID, b, 1+256	: FlightUNID=FlightUNID+1
HOTSPOT2 -b+flightWidth,	a,	FlightUNID, b, 2		: FlightUNID=FlightUNID+1
HOTSPOT2 b+1,				a,	FlightUNID, b, 3		: FlightUNID=FlightUNID+1

HOTSPOT2 flightWidth,		a-flightWidth-nRisers1stRun*treadDepth,	FlightUNID, b, 1+256	: FlightUNID=FlightUNID+1
HOTSPOT2 -b+flightWidth,	a-flightWidth-nRisers1stRun*treadDepth, FlightUNID, b, 2		: FlightUNID=FlightUNID+1
HOTSPOT2 b+1,				a-flightWidth-nRisers1stRun*treadDepth,	FlightUNID, b, 3		: FlightUNID=FlightUNID+1

HOTSPOT2 flightWidth,		a-flightWidth-nRisers1stRun*treadDepth,		FlightUNID, a, 1+256	: FlightUNID=FlightUNID+1
HOTSPOT2 flightWidth,		a,											FlightUNID, a, 2		: FlightUNID=FlightUNID+1
HOTSPOT2 flightWidth,		a-flightWidth-nRisers1stRun*treadDepth-1,	FlightUNID, a, 3		: FlightUNID=FlightUNID+1

HOTSPOT2 -b+flightWidth,	a-flightWidth-nRisers2ndRun*treadDepth,		FlightUNID, a, 1+256	: FlightUNID=FlightUNID+1
HOTSPOT2 -b+flightWidth,	a,											FlightUNID, a, 2		: FlightUNID=FlightUNID+1
HOTSPOT2 -b+flightWidth,	a-flightWidth-nRisers2ndRun*treadDepth-1,	FlightUNID, a, 3		: FlightUNID=FlightUNID+1

!!! UP/DOWN TEXT !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
IF bShowWalkLine & not(belowStory) THEN
IF walkingDirUPDN_m = 2 | walkingDirUPDN_m = 3 | walkingDirUPDN_m = 5 then
	HOTSPOT2 flightWidth/2,				DirUPDN_Y-xNosing, UpDownUNID, DirUPDN_X, 1+128 : UpDownUNID=UpDownUNID+1
	HOTSPOT2 flightWidth/2-1,			DirUPDN_Y-xNosing, UpDownUNID, DirUPDN_X, 3		: UpDownUNID=UpDownUNID+1
	HOTSPOT2 flightWidth/2+DirUPDN_X,	DirUPDN_Y-xNosing, UpDownUNID, DirUPDN_X, 2		: UpDownUNID=UpDownUNID+1

	HOTSPOT2 flightWidth/2+DirUPDN_X,	0,			UpDownUNID, DirUPDN_Y, 1+128	: UpDownUNID=UpDownUNID+1
	HOTSPOT2 flightWidth/2+DirUPDN_X,	-1,			UpDownUNID, DirUPDN_Y, 3		: UpDownUNID=UpDownUNID+1
	HOTSPOT2 flightWidth/2+DirUPDN_X,	DirUPDN_Y-xNosing,	UpDownUNID, DirUPDN_Y, 2		: UpDownUNID=UpDownUNID+1
ENDIF
IF walkingDirUPDN_m = 4 | walkingDirUPDN_m = 5 then
	HOTSPOT2 -B+3*flightWidth/2,		DirUPDN_Y_top,			UpDownUNID, DirUPDN_X_top, 1+128	: UpDownUNID=UpDownUNID+1
	HOTSPOT2 -B+3*flightWidth/2-1,		DirUPDN_Y_top,			UpDownUNID, DirUPDN_X_top, 3		: UpDownUNID=UpDownUNID+1
	HOTSPOT2 -B+3*flightWidth/2+DirUPDN_X_top,	DirUPDN_Y_top,	UpDownUNID, DirUPDN_X_top, 2		: UpDownUNID=UpDownUNID+1

	HOTSPOT2 -B+3*flightWidth/2+DirUPDN_X_top,	0,			UpDownUNID, DirUPDN_Y_top, 1+128: UpDownUNID=UpDownUNID+1
	HOTSPOT2 -B+3*flightWidth/2+DirUPDN_X_top,	-1,			UpDownUNID, DirUPDN_Y_top, 3	: UpDownUNID=UpDownUNID+1
	HOTSPOT2 -B+3*flightWidth/2+DirUPDN_X_top,DirUPDN_Y_top,UpDownUNID, DirUPDN_Y_top, 2	: UpDownUNID=UpDownUNID+1
ENDIF
endif

!-- RAILING  ---------------------------------------------------
if _bShowRailIn2D & bShowRailOnFloorPlan & not(belowStory) then
xNosing = 0 ! COMP nosing * (drawDetails[1]|drawDetails[3])

IF rail_m = 2 | rail_m = 1 THEN		! Right, Both

	!!! RAIL OFFSET - right
	HOTSPOT2 -b+flightWidth+rightRailFrameThk/2,				a-flightWidth-nRisers2ndRun*treadDepth-rightRailOvhgTop, RailUNID, rightRailOffset, 1+128 : RailUNID=RailUNID+1
	HOTSPOT2 -b+flightWidth+rightRailFrameThk/2+rightRailOffset,a-flightWidth-nRisers2ndRun*treadDepth-rightRailOvhgTop, RailUNID, rightRailOffset, 2 : RailUNID=RailUNID+1
	HOTSPOT2 -b+flightWidth+rightRailFrameThk/2,				a-flightWidth-nRisers2ndRun*treadDepth-rightRailOvhgTop, RailUNID, rightRailOffset, 3 : RailUNID=RailUNID+1

	HOTSPOT2 flightWidth-rightRailFrameThk/2,					a-flightWidth-nRisers1stRun*treadDepth-rightRailOvhgBottom-xNosing, RailUNID, rightRailOffset, 1+128 : RailUNID=RailUNID+1
	HOTSPOT2 flightWidth-rightRailFrameThk/2-rightRailOffset,	a-flightWidth-nRisers1stRun*treadDepth-rightRailOvhgBottom-xNosing, RailUNID, rightRailOffset, 2 : RailUNID=RailUNID+1
	HOTSPOT2 flightWidth-rightRailFrameThk/2-0.1,				a-flightWidth-nRisers1stRun*treadDepth-rightRailOvhgBottom-xNosing, RailUNID, rightRailOffset, 3 : RailUNID=RailUNID+1

	! RAIL BOTTOM OVERHANG
	HOTSPOT2 flightWidth-rightRailFrameThk/2-rightRailOffset,		a-flightWidth-nRisers1stRun*treadDepth-xNosing,						RailUNID, rightRailOvhgBottom, 1+128 : RailUNID=RailUNID+1
	HOTSPOT2 flightWidth-rightRailFrameThk/2-rightRailOffset,		a-flightWidth-nRisers1stRun*treadDepth+1-xNosing,					RailUNID, rightRailOvhgBottom, 3 : RailUNID=RailUNID+1
	HOTSPOT2 flightWidth-rightRailFrameThk/2-rightRailOffset,		a-flightWidth-nRisers1stRun*treadDepth-rightRailOvhgBottom-xNosing, RailUNID, rightRailOvhgBottom, 2 : RailUNID=RailUNID+1

	!!! RAIL TOP OVERHANG
	HOTSPOT2 -b+flightWidth+rightRailFrameThk/2+rightRailOffset,	a-flightWidth-nRisers2ndRun*treadDepth,					RailUNID, rightRailOvhgTop, 1+128 : RailUNID=RailUNID+1
	HOTSPOT2 -b+flightWidth+rightRailFrameThk/2+rightRailOffset,	a-flightWidth-nRisers2ndRun*treadDepth+1,				RailUNID, rightRailOvhgTop, 3 : RailUNID=RailUNID+1
	HOTSPOT2 -b+flightWidth+rightRailFrameThk/2+rightRailOffset,	a-flightWidth-nRisers2ndRun*treadDepth-rightRailOvhgTop,RailUNID, rightRailOvhgTop, 2 : RailUNID=RailUNID+1
ENDIF

IF rail_m = 3 | rail_m = 1 THEN		! Left, Both

	!!! RAIL OFFSET - left
	HOTSPOT2 -b+2*flightWidth-leftRailFrameThk/2,				a-flightWidth-nRisers2ndRun*treadDepth-leftRailOvhgTop, RailUNID, leftRailOffset, 1+128 : RailUNID=RailUNID+1
	HOTSPOT2 -b+2*flightWidth-leftRailFrameThk/2-leftRailOffset,a-flightWidth-nRisers2ndRun*treadDepth-leftRailOvhgTop, RailUNID, leftRailOffset, 2 : RailUNID=RailUNID+1
	HOTSPOT2 -b+2*flightWidth-leftRailFrameThk/2-0.1,			a-flightWidth-nRisers2ndRun*treadDepth-leftRailOvhgTop, RailUNID, leftRailOffset, 3 : RailUNID=RailUNID+1

	HOTSPOT2 leftRailFrameThk/2,				a-flightWidth-nRisers1stRun*treadDepth-leftRailOvhgBottom-xNosing, RailUNID, leftRailOffset, 1+128 : RailUNID=RailUNID+1
	HOTSPOT2 leftRailFrameThk/2+leftRailOffset,	a-flightWidth-nRisers1stRun*treadDepth-leftRailOvhgBottom-xNosing, RailUNID, leftRailOffset, 2 : RailUNID=RailUNID+1
	HOTSPOT2 leftRailFrameThk/2+0.1,			a-flightWidth-nRisers1stRun*treadDepth-leftRailOvhgBottom-xNosing, RailUNID, leftRailOffset, 3 : RailUNID=RailUNID+1

	! RAIL BOTTOM OVERHANG
	HOTSPOT2 leftRailFrameThk/2+leftRailOffset,	a-flightWidth-nRisers1stRun*treadDepth-xNosing,						RailUNID, leftRailOvhgBottom, 1+128 : RailUNID=RailUNID+1
	HOTSPOT2 leftRailFrameThk/2+leftRailOffset,	a-flightWidth-nRisers1stRun*treadDepth+1-xNosing,					RailUNID, leftRailOvhgBottom, 3		: RailUNID=RailUNID+1
	HOTSPOT2 leftRailFrameThk/2+leftRailOffset,	a-flightWidth-nRisers1stRun*treadDepth-leftRailOvhgBottom-xNosing,	RailUNID, leftRailOvhgBottom, 2		: RailUNID=RailUNID+1


	!!! RAIL TOP OVERHANG
	HOTSPOT2 -b+2*flightWidth-leftRailFrameThk/2-leftRailOffset,		a-flightWidth-nRisers2ndRun*treadDepth,					RailUNID, leftRailOvhgTop, 1+128: RailUNID=RailUNID+1
	HOTSPOT2 -b+2*flightWidth-leftRailFrameThk/2-leftRailOffset,		a-flightWidth-nRisers2ndRun*treadDepth+1,				RailUNID, leftRailOvhgTop, 3	: RailUNID=RailUNID+1
	HOTSPOT2 -b+2*flightWidth-leftRailFrameThk/2-leftRailOffset,		a-flightWidth-nRisers2ndRun*treadDepth-leftRailOvhgTop, RailUNID, leftRailOvhgTop, 2	: RailUNID=RailUNID+1
ENDIF
endif

del 1

END


"Start End Symbol":
	DRAWINDEX 45
	fill gs_StartEndFill

	if gs_StartEndFillPen <> 0 then
		temp_FillStatus = 2
	else
		temp_FillStatus = 0
	endif

	add2 0, +xNosing
	IF gs_StartEndStyle_m = 1 THEN		! Style 1
		POLY2_B 2, 1+temp_FillStatus, gs_StartEndFillPen, gs_fill_pen,
		0,-xNosing,901,
		gs_CircleRadius,360,4001
	ENDIF

	IF gs_StartEndStyle_m = 2 THEN		! Style 2
		FOR kk=1 TO 2
			POLY2_B 6, 1+temp_FillStatus, gs_StartEndFillPen, gs_fill_pen,
				0,-xNosing,1,
				0+gs_CircleRadius,-xNosing,1,
				0,-xNosing,901,
				0,90,4001,
				0,-xNosing+gs_CircleRadius,0,
				0,-xNosing,-1

			POLY2_B 6, 1, gs_StartEndFillPen, gs_fill_pen,
				0,-xNosing,1,
				0,-xNosing+gs_CircleRadius,1,
				0,-xNosing,901,
				0,90,4001,
				0-gs_CircleRadius,-xNosing,0,
				0,-xNosing,-1
		ROT2 180
		ADD2 0, 2*xNosing
		NEXT kk
		DEL 4
	ENDIF

	IF gs_StartEndStyle_m = 3 THEN		! Style 3
		LINE2 0+gs_StartWidth,-xNosing-gs_StartHeight,0+gs_StartWidth,-xNosing+gs_StartHeight
		LINE2 0-gs_StartWidth,-xNosing-gs_StartHeight,0-gs_StartWidth,-xNosing+gs_StartHeight
	ENDIF

	! --- Hotspots of StartEnd Symbol
	IF gs_StartEndStyle_m = 1 | gs_StartEndStyle_m = 2 THEN		! Style 1-2
		ADD2 0,-xNosing
			FOR kk=1 to 4
				HOTSPOT2 0, 0,					StartSymbUNID, gs_CircleRadius, 1+128	:StartSymbUNID=StartSymbUNID+1
				HOTSPOT2 -1, 0,					StartSymbUNID, gs_CircleRadius, 3+128	:StartSymbUNID=StartSymbUNID+1
				HOTSPOT2 gs_CircleRadius, 0,	StartSymbUNID, gs_CircleRadius,2		:StartSymbUNID=StartSymbUNID+1

				ROT2 90
			NEXT KK
			DEL 4
		DEL 1
	ENDIF

	IF gs_StartEndStyle_m = 3 THEN		! Style 3
		FOR kk=1 to 2
			ADD2 0, -xNosing
				! Symbol Width/2
				HOTSPOT2 0,				-gs_StartHeight, StartSymbUNID, gs_StartWidth, 1+128:StartSymbUNID=StartSymbUNID+1
				HOTSPOT2 -1,			-gs_StartHeight, StartSymbUNID, gs_StartWidth, 3	:StartSymbUNID=StartSymbUNID+1
				HOTSPOT2 gs_StartWidth, -gs_StartHeight, StartSymbUNID, gs_StartWidth, 2	:StartSymbUNID=StartSymbUNID+1

				HOTSPOT2 0,				gs_StartHeight, StartSymbUNID, gs_StartWidth, 1+128	:StartSymbUNID=StartSymbUNID+1
				HOTSPOT2 -1,			gs_StartHeight, StartSymbUNID, gs_StartWidth, 3		:StartSymbUNID=StartSymbUNID+1
				HOTSPOT2 gs_StartWidth, gs_StartHeight, StartSymbUNID, gs_StartWidth,2		:StartSymbUNID=StartSymbUNID+1
			DEL 1

			ADD2 0, -xNosing
				! Symbol Height
				HOTSPOT2 gs_StartWidth, 0,				StartSymbUNID, gs_StartHeight, 1+128:StartSymbUNID=StartSymbUNID+1
				HOTSPOT2 gs_StartWidth, -1,				StartSymbUNID, gs_StartHeight, 3	:StartSymbUNID=StartSymbUNID+1
				HOTSPOT2 gs_StartWidth, gs_StartHeight, StartSymbUNID, gs_StartHeight, 2	:StartSymbUNID=StartSymbUNID+1

				HOTSPOT2 gs_StartWidth, 0,					StartSymbUNID, gs_StartHeight, 1+128:StartSymbUNID=StartSymbUNID+1
				HOTSPOT2 gs_StartWidth, 1,					StartSymbUNID, gs_StartHeight, 3	:StartSymbUNID=StartSymbUNID+1
				HOTSPOT2 gs_StartWidth, -gs_StartHeight,	StartSymbUNID, gs_StartHeight, 2	:StartSymbUNID=StartSymbUNID+1
			DEL 1

		MUL2 -1,1
		NEXT kk
		DEL 2
	ENDIF
	del 1

	DRAWINDEX 40
RETURN


"Arrowhead Symbol":
	IF arrow_style_m = 1 | arrow_style_m = 4 | arrow_style_m = 7 THEN
		temp_ArrowDist = flightWidth/2
		temp_ArrowHeight = treadDepth
		if not(reverseWalkLine) & (i = 2 | i = 3) & walkingDirUPDN_m <> 5 then temp_ArrowHeight = treadDepth + xNosing
	ENDIF

	IF arrow_style_m = 2 | arrow_style_m = 5 | arrow_style_m = 8 THEN
		temp_ArrowDist = flightWidth/4
		temp_ArrowHeight = treadDepth
		if not(reverseWalkLine) & (i = 2 | i = 3) & walkingDirUPDN_m <> 5 then temp_ArrowHeight = treadDepth + xNosing
	ENDIF

	IF arrow_style_m = 3 | arrow_style_m = 6 | arrow_style_m = 9 THEN
		temp_ArrowDist = gs_ArrowHalfWidth
		temp_ArrowHeight = gs_ArrowHeight
	ENDIF

	if arrow_style_m = 1 | arrow_style_m = 2 | arrow_style_m = 3 then
		temp_ArrowMask=0
	else
		temp_ArrowMask=1
	endif

	POLY2_b 4, 1, penFillArrow, gs_fill_pen,
		-temp_ArrowDist,-temp_ArrowHeight, temp_ArrowMask,
		temp_ArrowDist,-temp_ArrowHeight, 1,
		0,0, 1,
		-temp_ArrowDist,-temp_ArrowHeight, -1

	! --- Arrowhead Fill Contour Points Conditions
	IF arrow_style_m = 4 | arrow_style_m = 5 | arrow_style_m = 6 THEN
		temp_1XFill=temp_ArrowDist
		lengthArrowHead = temp_ArrowHeight
	else
		lengthArrowHead = 0
	ENDIF

	IF arrow_style_m = 7 | arrow_style_m = 8 | arrow_style_m = 9 THEN
		temp_1XFill=0
	ENDIF

	if penFillArrow <> 0 then
		IF arrow_style_m <> 1 & arrow_style_m <> 2 & arrow_style_m <> 3 THEN
			fill gs_ArrowFill ! Always 64 (Foreground)
			POLY2_b 4, 2, penFillArrow, gs_fill_pen,
				-temp_1XFill,-temp_ArrowHeight, temp_ArrowMask,
				temp_ArrowDist,-temp_ArrowHeight, 1,
				0,0, 1,
				-temp_1XFill,-temp_ArrowHeight, -1
		ENDIF
	endif

	HOTSPOT2	0,0,	ArrowUNID: ArrowUNID=ArrowUNID+1

	! --- Hotspot editing of Height & Width of Arrowhead
	IF arrow_style_m = 3 | arrow_style_m = 6 | arrow_style_m = 9 THEN
		HOTSPOT2 gs_ArrowHalfWidth,0,				ArrowUNID, gs_ArrowHeight, 1+128	: ArrowUNID=ArrowUNID+1
		HOTSPOT2 gs_ArrowHalfWidth,-gs_ArrowHeight,	ArrowUNID, gs_ArrowHeight, 2		: ArrowUNID=ArrowUNID+1
		HOTSPOT2 gs_ArrowHalfWidth,1,				ArrowUNID, gs_ArrowHeight, 3		: ArrowUNID=ArrowUNID+1

		HOTSPOT2 -gs_ArrowHalfWidth,0,					ArrowUNID, gs_ArrowHeight, 1+128	: ArrowUNID=ArrowUNID+1
		HOTSPOT2 -gs_ArrowHalfWidth,-gs_ArrowHeight,	ArrowUNID, gs_ArrowHeight, 2		: ArrowUNID=ArrowUNID+1
		HOTSPOT2 -gs_ArrowHalfWidth,1,					ArrowUNID, gs_ArrowHeight, 3		: ArrowUNID=ArrowUNID+1

		HOTSPOT2 0,					-gs_ArrowHeight,	ArrowUNID, gs_ArrowHalfWidth, 1+128	: ArrowUNID=ArrowUNID+1
		HOTSPOT2 gs_ArrowHalfWidth,	-gs_ArrowHeight,	ArrowUNID, gs_ArrowHalfWidth, 2		: ArrowUNID=ArrowUNID+1
		HOTSPOT2 -1,				-gs_ArrowHeight,	ArrowUNID, gs_ArrowHalfWidth, 3		: ArrowUNID=ArrowUNID+1

		HOTSPOT2 0,					-gs_ArrowHeight,	ArrowUNID, gs_ArrowHalfWidth, 1+128 : ArrowUNID=ArrowUNID+1
		HOTSPOT2 -gs_ArrowHalfWidth,-gs_ArrowHeight,	ArrowUNID, gs_ArrowHalfWidth, 2		: ArrowUNID=ArrowUNID+1
		HOTSPOT2 1,					-gs_ArrowHeight,	ArrowUNID, gs_ArrowHalfWidth, 3		: ArrowUNID=ArrowUNID+1
	ENDIF
RETURN


"left rail":

	mul2 -1, 1
	rot2 90
	add2 -max(nRisers2ndRun - nRisers1stRun, 0) * treadDepth, flightWidth

	if bShowRailOn1stRun then
		ADD2 a-flightWidth-nRisers1stRun*treadDepth-leftRailOvhgBottom, -flightWidth+leftRailOffset+leftRailFrameThk/2

		lraSimple=(nRisers1stRun-1)*treadDepth+leftRailOvhgBottom
		lraComplex=(nRisers1stRun-1)*treadDepth
		additionXComplex=leftRailOvhgBottom+treadDepth/2
		additionZComplex=leftRailOvhgBottom*tan(ang)
		hrovL=treadDepth/2+leftRailOvhgBottom
		hrovR=0
		postNumber = ((nRisers-1))/4
		railAngle	= ang
		side = SIDE_LEFT
		gosub "callRailsForStair"

		DEL 1
	endif

	! --- Rails on the landing (left side_1) -------------------------------------
	if bShowRailOn1stLanding1 then
		ADD2 a-flightWidth-treadDepth,-flightWidth+leftRailOffset+leftRailFrameThk/2

		IF leftRailType_m = 7 | leftRailType_m = 8 | leftRailType_m = 9 | leftRailType_m = 10 THEN
			ADD2 treadDepth/2, 0
		endif

		lraSimple=treadDepth+leftRailOffset
		lraComplex=treadDepth/2+leftRailOffset-leftRailPostSize/2+leftRailFrameThk
		hrovL=0
		hrovR=leftRailPostSize/2
		postNumber = (flightWidth+treadDepth/2-leftRailOffset-leftRailPostSize/2)/(3*treadDepth)+1
		side = SIDE_LEFT
		gosub "callRailsForLanding"

		IF leftRailType_m = 7 | leftRailType_m = 8 | leftRailType_m = 9 | leftRailType_m = 10 THEN del 1

		DEL 1
	endif

	! --- Rails on the landing (back) ---
	if bShowRailOn1stLanding2 then
		ADD2 a-flightWidth+leftRailFrameThk/2+leftRailOffset,-flightWidth+leftRailOffset+leftRailFrameThk
		ROT2 -90

		IF b-2*flightWidth+2*leftRailOffset+leftRailFrameThk>=0.05 THEN
			IF leftRailType_m < 7 THEN
				gamma=max(0,ATN(((treadDepth-leftRailFrameThk)*tan(ang)-leftRailOffset*tan(ang))/(b-2*flightWidth+2*leftRailOffset+leftRailFrameThk)))
			else
				gamma=max(0,ATN(((treadDepth/2-leftRailFrameThk)*tan(ang)-leftRailOffset*tan(ang))/(b-2*flightWidth+2*leftRailOffset+leftRailFrameThk)))
			endif

			IF leftRailType_m < 7 or (leftRailType_m > 6 and gamma <= 45) then
				lraSimple=b-2*flightWidth+2*leftRailOffset+leftRailFrameThk
				lraComplex=b-2*flightWidth+2*leftRailOffset + (leftRailFrameThk-leftRailPostSize/2) * (leftRailType_m = 7 or leftRailType_m = 8) - 0.1 * (leftRailType_m = 9)
				additionXComplex=leftRailFrameThk * (leftRailType_m = 9 or leftRailType_m = 10)
				additionZComplex=-leftRailFrameThk*tan(gamma) * (leftRailType_m = 7 or leftRailType_m = 8)
				hrovL=0.05 * (leftRailType_m = 9) - leftRailFrameThk * (leftRailType_m = 7 or leftRailType_m = 8)
				hrovR=0.05 * (leftRailType_m = 9) + leftRailPostSize/2 * (leftRailType_m = 7 or leftRailType_m = 8)
				postNumber = max(2,(b-2*leftRailOffset-2*leftRailFrameThk+leftRailPostSize)/(3*treadDepth))
				railAngle	= gamma
				side = SIDE_LEFT
				gosub "callRailsForStair"
			endif
		ENDIF

		DEL 2
	endif

	! --- Rails on the landing (right side_2) ------------------------------------
	if bShowRailOn1stLanding3 then
		IF leftRailOffset>=treadDepth-leftRailFrameThk THEN
			ADD2 a-flightWidth+treadDepth,-b+flightWidth-leftRailOffset-leftRailFrameThk/2
			IF leftRailOffset-treadDepth+leftRailFrameThk<=0.1 THEN
				ADD2 0, -leftRailFrameThk/2
				IF leftRailType_m = 1 | leftRailType_m = 4 | leftRailType_m = 5 | leftRailType_m = 6 THEN
					poly2_b 4, 1 + 2 * (NOT(bRailAboveBreakLine) + bRailAboveBreakLine * gs_FillAbove) + 4+64, gs_fill_pen, gs_back_pen,
						0, 0, 1,
						leftRailOffset-treadDepth+leftRailFrameThk, 0, 1,
						leftRailOffset-treadDepth+leftRailFrameThk, leftRailFrameThk, 1,
						0, leftRailFrameThk, 1
				ENDIF
				DEL 1

				IF leftRailType_m = 2 | leftRailType_m = 3 THEN
					lraSimple=leftRailOffset-treadDepth+leftRailFrameThk
					lraComplex=leftRailOffset-treadDepth+leftRailFrameThk
					hrovL=0
					hrovR=0
					postNumber = 2
					side = SIDE_LEFT
					gosub "callRailsForLanding"
				endif
			ELSE
				IF leftRailType_m > 0 and leftRailType_m < 7 THEN
					lraSimple=leftRailOffset-treadDepth+leftRailFrameThk
					lraComplex=leftRailOffset-treadDepth+leftRailFrameThk
					hrovL=0
					hrovR=0
					postNumber = 2
					side = SIDE_LEFT
					gosub "callRailsForLanding"
				endif
			ENDIF
			DEL 1
		ENDIF

		IF leftRailOffset>=treadDepth/2-leftRailFrameThk THEN
			ADD2 a-flightWidth+leftRailOffset+leftRailFrameThk,-b+flightWidth-leftRailOffset-leftRailFrameThk/2
			IF leftRailOffset+leftRailFrameThk-min(leftRailOffset,treadDepth/2)<=0.2 THEN
				ADD2  0, -leftRailFrameThk/2
				IF leftRailType_m = 7 | leftRailType_m = 8 | leftRailType_m = 9 | leftRailType_m = 10 THEN
					poly2_b 4, 1 + 2 * (NOT(bRailAboveBreakLine) + bRailAboveBreakLine * gs_FillAbove) + 4+64, gs_fill_pen, gs_back_pen,
						0, 0, 1,
						-leftRailOffset-leftRailFrameThk+min(leftRailOffset,treadDepth/2), 0, 1,
						-leftRailOffset-leftRailFrameThk+min(leftRailOffset,treadDepth/2), leftRailFrameThk, 1,
						0, leftRailFrameThk, 1
				ENDIF
				DEL 1
			ELSE
				IF leftRailType_m = 7 | leftRailType_m = 8 | leftRailType_m = 9 | leftRailType_m = 10 THEN
					ADD2 -leftRailPostSize/2, 0
					MUL2 -1, 1

					lraSimple=leftRailOffset-min(leftRailOffset,treadDepth/2)
					lraComplex=leftRailOffset-min(leftRailOffset,treadDepth/2)
					hrovL=leftRailPostSize/2
					hrovR=leftRailPostSize/2
					postNumber = (flightWidth+treadDepth/2-leftRailOffset)/(3*treadDepth)+1
					side = SIDE_LEFT
					gosub "callRailsForLanding"

					del 2
				endif
			ENDIF
			DEL 1
		ENDIF
	endif

	! --- Rails on the 2nd Arm ---
	if bShowRailOn2ndRun then
		if bComplexRailLeft then
			ADD2 a-flightWidth-treadDepth/2,-b+flightWidth-leftRailOffset-leftRailFrameThk/2
		else
			ADD2 a-flightWidth+leftRailFrameThk+min(leftRailOffset,treadDepth-leftRailFrameThk), -b+flightWidth-leftRailOffset-leftRailFrameThk/2
		endif
		ROT2 180

		IF leftRailOffset-treadDepth+leftRailFrameThk < eps THEN
			lraSimple=leftRailOffset+(nRisers2ndRun)*treadDepth+leftRailOvhgTop+leftRailFrameThk
		else
			lraSimple=(nRisers2ndRun+1)*treadDepth+leftRailOvhgTop
		endif
		lraComplex=(nRisers2ndRun)*treadDepth-treadDepth
		additionXComplex=0
		additionZComplex=0
		hrovL=treadDepth/2+leftRailFrameThk+min(leftRailOffset,treadDepth/2-leftRailFrameThk)
		hrovR=treadDepth/2+leftRailOvhgTop
		postNumber = ((nRisers2ndRun-1))/2+1
		railAngle	= ang
		side = SIDE_LEFT
		gosub "callRailsForStair"

		del 2
	endif

	del 3
return


"right rail":

	mul2 -1, 1
	rot2 90
	add2 -max(nRisers2ndRun - nRisers1stRun, 0) * treadDepth, flightWidth

	if bShowRailOn1stRun then
		ADD2 a-flightWidth-nRisers1stRun*treadDepth-rightRailOvhgBottom,-rightRailOffset-rightRailFrameThk/2

		lraSimple=(nRisers1stRun-1)*treadDepth+rightRailOvhgBottom
		lraComplex=(nRisers1stRun-1)*treadDepth
		additionXComplex=rightRailOvhgBottom+treadDepth/2
		additionZComplex=rightRailOvhgBottom*tan(ang)
		hrovL=treadDepth/2+rightRailOvhgBottom
		hrovR=0
		postNumber = ((nRisers-1))/4
		railAngle	= ang
		side = SIDE_RIGHT
		gosub "callRailsForStair"

		DEL 1
	endif

	! --- Rails on the landing (right side_1) ------------------------------------
	if bShowRailOn1stLanding1 then
		ADD2 a-flightWidth-treadDepth,-rightRailOffset-rightRailFrameThk/2

		IF rightRailType_m = 7 | rightRailType_m = 8 | rightRailType_m = 9 | rightRailType_m = 10 THEN
			ADD2 treadDepth/2, 0
		endif

		lraSimple=flightWidth+treadDepth-rightRailOffset
		lraComplex=flightWidth+treadDepth/2-rightRailOffset-rightRailPostSize/2
		hrovL=0
		hrovR=rightRailPostSize/2
		postNumber = (flightWidth+treadDepth/2-rightRailOffset-rightRailPostSize/2)/(3*treadDepth)+1
		side = SIDE_RIGHT
		gosub "callRailsForLanding"

		IF rightRailType_m = 7 | rightRailType_m = 8 | rightRailType_m = 9 | rightRailType_m = 10 THEN del 1

		DEL 1
	endif

	! --- Rails on the landing (back) ---
	if bShowRailOn1stLanding2 then
		ADD2 a-rightRailOffset-rightRailFrameThk/2,-rightRailOffset-rightRailFrameThk
		ROT2 -90

		IF rightRailType_m = 7 | rightRailType_m = 8 | rightRailType_m = 9 THEN
			IF rightRailType_m = 7 | rightRailType_m = 8 THEN
				ADD2 -rightRailPostSize/2, 0
			else
				ADD2 treadDepth/2, 0
			endif
		endif

		lraSimple=b-2*rightRailOffset-2*rightRailFrameThk
		lraComplex=b-2*rightRailOffset-2*rightRailFrameThk - treadDepth * (rightRailType_m = 9) + rightRailPostSize * (rightRailType_m = 7 | rightRailType_m = 8)
		hrovL=treadDepth/2 * (rightRailType_m = 9) - rightRailPostSize/2 * (rightRailType_m = 7 | rightRailType_m = 8)
		hrovR=treadDepth/2 * (rightRailType_m = 9) - rightRailPostSize/2 * (rightRailType_m = 7 | rightRailType_m = 8)
		postNumber = (b-2*rightRailOffset-2*rightRailFrameThk+rightRailPostSize)/(3*treadDepth)+1
		side = SIDE_RIGHT
		gosub "callRailsForLanding"

		IF rightRailType_m = 7 | rightRailType_m = 8 | rightRailType_m = 9 THEN del 1

		DEL 2
	endif

	! --- Rails on the landing (right side_2) ------------------------------------
	if bShowRailOn1stLanding3 then
		ADD2 a-flightWidth+treadDepth,-b+rightRailOffset+rightRailFrameThk/2

		IF bComplexRailRight THEN ADD2 -treadDepth/2, 0

		lraSimple=flightWidth-treadDepth-rightRailOffset
		lraComplex=flightWidth-treadDepth/2-rightRailOffset-rightRailPostSize/2 + rightRailPostSize/2 * (rightRailType_m = 9)
		hrovL=0
		hrovR=rightRailPostSize/2
		postNumber = (flightWidth+treadDepth/2-rightRailOffset)/(3*treadDepth)+1
		side = SIDE_RIGHT
		gosub "callRailsForLanding"

		IF bComplexRailRight THEN del 1

		DEL 1
	endif

	! --- Rails on the 2nd Arm ---
	if bShowRailOn2ndRun then
		ADD2 a-flightWidth+treadDepth,-b+rightRailOffset+rightRailFrameThk/2
		ROT2 180

		lraSimple=(nRisers2ndRun+1)*treadDepth+rightRailOvhgTop
		lraComplex=(nRisers2ndRun)*treadDepth
		additionXComplex=treadDepth/2
		additionZComplex=0
		hrovL=0
		hrovR=treadDepth/2+rightRailOvhgTop
		postNumber = ((nRisers2ndRun-1))/2+1
		railAngle	= ang
		side = SIDE_RIGHT
		gosub "callRailsForStair"

		DEL 2
	endif

	del 3

return


! ==============================================================================
"callRailsForStair":
! ------------------------------------------------------------------------------
!	lraSimple
!	lraComplex
!	additionXComplex
!	additionZComplex
!	hrovL: rail overhang start
!	hrovR: rail overhang end
!	postNumber:   number of posts
!	side: SIDE_LEFT or SIDE_RIGHT
! ==============================================================================
	ani = railAngle
	additionXComplex = additionXComplex
	additionZComplex = additionZComplex
	if side = SIDE_LEFT then
		dsComplex = leftRailDist+treadDepth/2*tan(ang)
	else
		dsComplex = rightRailDist+treadDepth/2*tan(ang)
	endif

	gosub "callRails"
return


! ==============================================================================
"callRailsForLanding":
! ------------------------------------------------------------------------------
!	lraSimple
!	lraComplex
!	hrovL: rail overhang start
!	hrovR: rail overhang end
!	postNumber:   number of posts
!	side: SIDE_LEFT or SIDE_RIGHT
! ==============================================================================
	ani = 0
	additionZComplex = 0
	if side = SIDE_LEFT then
		additionXComplex = leftRailPostSize/2*0
		dsComplex = leftRailDist + treadDepth/2*tan(ang)
	else
		additionXComplex = rightRailPostSize/2*0
		dsComplex = rightRailDist + treadDepth/2*tan(ang)
	endif

	gosub "callRails"
return


! ==============================================================================
"callRails":
! ------------------------------------------------------------------------------
!	ani
!	additionXComplex
!	additionZComplex
!	dsComplex
!  ------------------
!	side: SIDE_LEFT or SIDE_RIGHT
!	lraSimple
!	lraComplex
!	hrovL: rail overhang start
!	hrovR: rail overhang end
!	postNumber:   number of posts
! ==============================================================================
	if side = SIDE_LEFT then
		railBarDepth		= leftRailBarDepth
		railBarDiam			= railBarDepth
		railHeight			= leftRailHeight
		railBarThk			= leftRailBarThk
		railFrameThk		= leftRailFrameThk
		railDist			= leftRailDist
		railType_m			= leftRailType_m
		railPostSize		= leftRailPostSize
		nBarsRail			= nBarsLeftRail
		if rightRailType_m = RAIL_WIRED then
			railBarThk		= leftRailWireThk
			railBarDepth	= leftRailWireDepth
			railBarDiam		= leftRailWireDiam
		endif
		bComplexRail		= bComplexRailLeft
	else
		railBarDepth		= rightRailBarDepth
		railBarDiam			= railBarDepth
		railHeight			= rightRailHeight
		railBarThk			= rightRailBarThk
		railFrameThk		= rightRailFrameThk
		railDist			= rightRailDist
		railType_m			= rightRailType_m
		railPostSize		= rightRailPostSize
		nBarsRail			= nBarsRightRail
		if rightRailType_m = RAIL_WIRED then
			railBarThk		= rightRailWireThk
			railBarDepth	= rightRailWireDepth
			railBarDiam		= rightRailWireDiam
		endif
		bComplexRail		= bComplexRailRight
	endif

	add2 additionXComplex * bComplexRail, 0
	call "railSymbol2D_m" parameters all	cfs					= 1,
											bEnable2DPosts		= bComplexRail,
											ptyp_m				= 1,
											ani					= ani,
											rom_m				= 1,
											rmm_m				= 1,
											LengthSize			= 0,
											lra					= lraSimple * NOT(bComplexRail) + lraComplex * (bComplexRail),
											hr					= railHeight,
											hrPerp				= railHeight,
											ab					= 0,
											rb					= 0,
											ds					= railDist,
											gs_AngleL			= 90,
											gs_AngleR			= 90,
											iHandRailStyle		= 1,
											handRailDiameter	= railFrameThk,
											handRailWidth		= railFrameThk,
											hroL				= hrovL,
											hroR				= hrovR,
											np					= postNumber,
											pd					= railPostSize,
											pw					= railPostSize,
											pth					= railFrameThk,
											gs_cont_pen			= railPen,
											sa					= 0,
											bBreakRailLine		= bBreakRailLine,
											breakLineAngle		= brLineAngle,
											breakLineDist		= breakLineDist,
											breakLineWidth		= breakLineW,
											bRailAboveBreakLine	= bRailAboveBreakLine,
											bShowRailBelowBrL	= bShowRailPart1,
											bShowRailAboveBrL	= bShowRailPart2,
											bPostNoCalculation	= (railType_m = 9),
											pit_m				= 2,
											dp					= treadDepth
	del 1

	bShowRailPart1			= 0
	bShowRailPart2			= 0

return

"carriage":

	if beamNum = 1 then
		add2 carriageBaseDist / 2 - beamThk / 2 - beamOffsetRight, 0
	else
		add2 carriageBaseDist - beamThk - beamOffsetRight, 0
	endif
	for wb = 1 to beamNum
		if bBreakCarriageLine then
			lengthMod	= -(carriageBaseDist - beamOffsetLeft - beamOffsetRight - beamThk) * tan(brLineAngle) * (wb = 2)
			if bShowCarriagePart1 then
				pen carriagePen
				if aboveStory then
					LINE_TYPE carriageLineType
				else
					if	(drawPart[1] and drawDashed[1]) then
						LINE_TYPE dash_line
					else
						LINE_TYPE carriageLineType
					endif
				endif

				poly2_b 4, 1+2+4+64, gs_fill_pen, gs_back_pen,
					0, 0, 1,
					beamThk, 0, 1,
					beamThk, carrBreakLineDist + beamThk * tan(brLineAngle) / 2 + lengthMod, 1,
					0, carrBreakLineDist - beamThk * tan(brLineAngle) / 2 + lengthMod, 1
			endif

			if bShowCarriagePart2 then
				pen carriagePen
				if aboveStory then
					LINE_TYPE carriageLineType
				else
					if	(drawPart[2] and drawDashed[2]) then
						LINE_TYPE dash_line
					else
						LINE_TYPE carriageLineType
					endif
				endif


				poly2_b 4, 1 + 2 * gs_FillAbove + 4+64, gs_fill_pen, gs_back_pen,
					0, carrBreakLineDist - beamThk * tan(brLineAngle) / 2 + lengthMod + carrBreakLineWidth, 1,
					beamThk, carrBreakLineDist + beamThk * tan(brLineAngle) / 2 + lengthMod + carrBreakLineWidth, 1,
					beamThk, beamLength, 1,
					0, beamLength, 1
			endif
		else
			if aboveStory then
				LINE_TYPE carriageLineType
			else
			pen carriagePen
				if drawPart[3] then
					if (drawDashed[3]) then
						LINE_TYPE dash_line
					else
						LINE_TYPE carriageLineType
					endif
				else
					if	(NOT(bCarrAboveBreakLine) and drawDashed[1]) or\
						((bCarrAboveBreakLine) and drawDashed[2]) then
						LINE_TYPE dash_line
					else
						LINE_TYPE carriageLineType
					endif
				endif
			endif

			poly2_b 4, 1 + 2 * (NOT(bCarrAboveBreakLine) + bCarrAboveBreakLine * gs_FillAbove) + 4+64, gs_fill_pen, gs_back_pen,
				0, 0, 1,
				beamThk, 0, 1,
				beamThk, beamLength, 1,
				0, beamLength, 1
		endif
		add2 -carriageBaseDist + beamThk + beamOffsetLeft + beamOffsetRight, 0
	next wb
	del beamNum + 1

	bShowCarriagePart1	= 0
	bShowCarriagePart2	= 0

return

]]>
</Script_2D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_1D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
EPS=0.0001

SIDE_LEFT				= 1
SIDE_RIGHT				= 2

DET2D_SCALESENSITIVE	= 1
DET2D_CUSTOM			= 2

DET3D_OFF      = 0
DET3D_SIMPLE   = 1
DET3D_DETAILED = 2
DET3D_DRAFT    = 3

dim stArrowHeadStyles[9]
	stArrowHeadStyles[1] =  `Стиль 1`
	stArrowHeadStyles[2] =  `Стиль 2`
	stArrowHeadStyles[3] =  `Стиль 3`
	stArrowHeadStyles[4] =  `Стиль 4`
	stArrowHeadStyles[5] =  `Стиль 5`
	stArrowHeadStyles[6] =  `Стиль 6`
	stArrowHeadStyles[7] =  `Стиль 7`
	stArrowHeadStyles[8] =  `Стиль 8`
	stArrowHeadStyles[9] =  `Стиль 9`

dim stStartSymbolStyles[4]
	stStartSymbolStyles[1] = `Стиль 1`
	stStartSymbolStyles[2] = `Стиль 2`
	stStartSymbolStyles[3] = `Стиль 3`
	stStartSymbolStyles[4] = `Нет`

dim stPostSymbolType[5]
	stPostSymbolType[1] = `Тип 1`
	stPostSymbolType[2] = `Тип 2`
	stPostSymbolType[3] = `Тип 3`
	stPostSymbolType[4] = `Тип 4`
	stPostSymbolType[5] = `Нет`

dim stRailPosition[4]
	stRailPosition[1] = `Оба`
	stRailPosition[2] = `Справа`
	stRailPosition[3] = `Слева`
	stRailPosition[4] = `Нет`

dim stRailTypes[11]
	stRailTypes[ 1] = `Балюстрада Ограждения`
	stRailTypes[ 2] = `Параллельные Прутья`
	stRailTypes[ 3] = `Простой Брусок`
	stRailTypes[ 4] = `Объемная Рама с Панелью`
	stRailTypes[ 5] = `Объемная Рама`
	stRailTypes[ 6] = `Панель Ограждения`
	stRailTypes[ 7] = `Стойки Ограждения с Балясинами`
	stRailTypes[ 8] = `Стойки с Леерами`
	stRailTypes[ 9] = `Деревянная Балюстрада`
	stRailTypes[10] = `Стойки Ограждения с Брусками`
	stRailTypes[11] = `Как и Правое`

dim stShowCarriageValues[5]
	stShowCarriageValues[1]	= `Всегда`
	stShowCarriageValues[2]	= `До 1:20`
	stShowCarriageValues[3]	= `До 1:50`
	stShowCarriageValues[4]	= `До 1:100`
	stShowCarriageValues[5]	= `До 1:200`

RAILPOS_BOTH				= 1
RAILPOS_RIGHT				= 2
RAILPOS_LEFT				= 3
RAILPOS_NONE				= 4

RAIL_BALUSTRADE				= 1
RAIL_PARALLEL_BARS			= 2
RAIL_SIMPLE_BAR				= 3
RAIL_SOLID_FRAME_FILLED		= 4
RAIL_SOLID_FRAME			= 5
RAIL_SOLID					= 6
RAIL_POST_WITH_BALUSTERS	= 7
RAIL_WIRED					= 8
RAIL_WOODEN_BALUSTRADE		= 9
RAIL_POST_WITH_BARS			= 10
RAIL_SAMERAILS				= 11

RECTANGULAR					= 1
ROUND						= 2

dim stDetlevel2D[2]
	stDetlevel2D[1] = `Зависит от Масштаба`
	stDetlevel2D[2] = `Специальный`

dim stDetlevel3D[3]
	stDetlevel3D[1] = `Откл.`
	stDetlevel3D[2] = `Простой`
	stDetlevel3D[3] = `Детальный`

dim stParameterType[2]
	stParameterType[1] = `Высота Ступени`
	stParameterType[2] = `Кол-во Подступенков на Марш`

dim stStairBaseType[3]
	stStairBaseType[1] = `Бетон`
	stStairBaseType[2] = `Дерево`
	stStairBaseType[3] = `Нет`

dim stRiseRunText[7]
	stRiseRunText[1] = `Кол-во x Подступенок = Высота Марша`
	stRiseRunText[2] = `Кол-во Проступей/Подступенок @`
	stRiseRunText[3] = `Кол-во х Проступь х Подступенок`
	stRiseRunText[4] = `Кол-во х Подступенок х Проступь`
	stRiseRunText[5] = `Кол-во <текст подступенка> Подступенок / Проступь`
	stRiseRunText[6] = `Кол-во <текст подступенка> // Подступенок / Проступь`
	stRiseRunText[7] = `Специальный Текст`

dim stTextOrientation[3]
	stTextOrientation[1] = `Выровнять по Символу`
	stTextOrientation[2] = `Параллельно Линии Всхода`
	stTextOrientation[3] = `Читаемый`

dim stWalkingDirUPDN[6]
	stWalkingDirUPDN[1] = `Нет`
	stWalkingDirUPDN[2] = `Вверху`
	stWalkingDirUPDN[3] = `Вниз в Нижней Части`
	stWalkingDirUPDN[4] = `Вниз в Верхней Части`
	stWalkingDirUPDN[5] = `Оба`
	stWalkingDirUPDN[6] = `Оба, Зависит от Этажа`

dim stLineTypeAboveBreak[2]
	stLineTypeAboveBreak[1] = `Штриховая`
	stLineTypeAboveBreak[2] = `Сплошная`

dim stBreaklineStyle[3]
	stBreaklineStyle[1]= `Прямой`
	stBreaklineStyle[2]= `Зигзаг`
	stBreaklineStyle[3]= `Зигзаг CHI`

dim stWireType[2]
	stWireType[1]= `Прямоугольные`
	stWireType[2]= `Круглые`


woodBaseThk	= 0.05
res=16
rescs=12
ftw=0.05
IF bRiserCover<0.5 THEN riserCoverThk=0

! -------------- 2D Symbol variables --------------

! gs_SymbolType_m
SYMBOL_TYPE1	= 1
SYMBOL_TYPE2	= 2
SYMBOL_TYPE3	= 3
SYMBOL_TYPE4	= 4
SYMBOL_TYPE5	= 5
SYMBOL_TYPE6	= 6
SYMBOL_TYPE7	= 7
SYMBOL_TYPE8	= 8
SYMBOL_TYPE9	= 9
SYMBOL_TYPE10	= 10
SYMBOL_TYPE11	= 11
SYMBOL_TYPE12	= 12
SYMBOL_TYPE13	= 13
SYMBOL_TYPE14	= 14
SYMBOL_TYPE15	= 15
SYMBOL_TYPE16	= 16
SYMBOL_TYPE17	= 17
SYMBOL_TYPE18	= 18
SYMBOL_TYPE19	= 19
SYMBOL_TYPE20	= 20

dim stStairSymbolTypes[20]
	stStairSymbolTypes[ 1] = `Тип 1`
	stStairSymbolTypes[ 2] = `Тип 2`
	stStairSymbolTypes[ 3] = `Тип 3`
	stStairSymbolTypes[ 4] = `Тип 4`
	stStairSymbolTypes[ 5] = `Тип 5`
	stStairSymbolTypes[ 6] = `Тип 6`
	stStairSymbolTypes[ 7] = `Тип 7`
	stStairSymbolTypes[ 8] = `Тип 8`
	stStairSymbolTypes[ 9] = `Тип 9`
	stStairSymbolTypes[10] = `Тип 10`
	stStairSymbolTypes[11] = `Тип 11`
	stStairSymbolTypes[12] = `Тип 12`
	stStairSymbolTypes[13] = `Тип 13`
	stStairSymbolTypes[14] = `Тип 14`
	stStairSymbolTypes[15] = `Тип 15`
	stStairSymbolTypes[16] = `Тип 16`
	stStairSymbolTypes[17] = `Тип 17`
	stStairSymbolTypes[18] = `Тип 18`
	stStairSymbolTypes[19] = `Тип 19`
	stStairSymbolTypes[20] = `Тип 20`

! iSymbolGroup
SYMBOLGROUP_TYPE1	= 1
SYMBOLGROUP_TYPE2	= 2
SYMBOLGROUP_TYPE3	= 3
SYMBOLGROUP_TYPE4	= 4
SYMBOLGROUP_TYPE5	= 5
SYMBOLGROUP_TYPE6	= 6
SYMBOLGROUP_TYPE7	= 7
SYMBOLGROUP_TYPE8	= 8

dim stSymbolGroup[8]
	stSymbolGroup[1] = `Тип 1`
	stSymbolGroup[2] = `Тип 2`
	stSymbolGroup[3] = `Тип 3`
	stSymbolGroup[4] = `Тип 4`
	stSymbolGroup[5] = `Тип 5`
	stSymbolGroup[6] = `Тип 6`
	stSymbolGroup[7] = `Тип 7`
	stSymbolGroup[8] = `Тип 8`

dim	iEnabledSymbolTypes[8][3]
	iEnabledSymbolTypes[1][1] = 1
	iEnabledSymbolTypes[1][2] = 6
	iEnabledSymbolTypes[1][3] = 13

	iEnabledSymbolTypes[2][1] = 2
	iEnabledSymbolTypes[2][2] = 7
	iEnabledSymbolTypes[2][3] = 14

	iEnabledSymbolTypes[3][1] = 3
	iEnabledSymbolTypes[3][2] = 8
	iEnabledSymbolTypes[3][3] = 15

	iEnabledSymbolTypes[4][1] = 4
	iEnabledSymbolTypes[4][2] = 9
	iEnabledSymbolTypes[4][3] = 16

	iEnabledSymbolTypes[5][1] = 5
	iEnabledSymbolTypes[5][2] = 10
	iEnabledSymbolTypes[5][3] = 17

	iEnabledSymbolTypes[6][1] = 4
	iEnabledSymbolTypes[6][2] = 11
	iEnabledSymbolTypes[6][3] = 18

	iEnabledSymbolTypes[7][1] = 4
	iEnabledSymbolTypes[7][2] = 11
	iEnabledSymbolTypes[7][3] = 19

	iEnabledSymbolTypes[8][1] = 5
	iEnabledSymbolTypes[8][2] = 12
	iEnabledSymbolTypes[8][3] = 20


! iScaleType
SCALE_10		= 10
SCALE_20		= 20
SCALE_50		= 50
SCALE_100		= 100
SCALE_200		= 200
SCALE_500		= 500

SCALE_1_1		= 1
SCALE_1_4		= 4
SCALE_1_8		= 8
SCALE_1_16		= 16
SCALE_1_24		= 24
SCALE_1_48		= 48
SCALE_1_96		= 96
SCALE_1_192		= 192
SCALE_CUSTOM	= 999

dim	iScaleType[15]
	iScaleType[1]	= SCALE_10
	iScaleType[2]	= SCALE_20
	iScaleType[3]	= SCALE_50
	iScaleType[4]	= SCALE_100
	iScaleType[5]	= SCALE_200
	iScaleType[6]	= SCALE_500
	iScaleType[7]	= SCALE_1_1
	iScaleType[8]	= SCALE_1_4
	iScaleType[9]	= SCALE_1_8
	iScaleType[10]	= SCALE_1_16
	iScaleType[11]	= SCALE_1_24
	iScaleType[12]	= SCALE_1_48
	iScaleType[13]	= SCALE_1_96
	iScaleType[14]	= SCALE_1_192
	iScaleType[15]	= SCALE_CUSTOM

dim stScaleType[15]
	stScaleType[1]	= `1:10`
	stScaleType[2]	= `1:20`
	stScaleType[3]	= `1:50`
	stScaleType[4]	= `1:100`
	stScaleType[5]	= `1:200`
	stScaleType[6]	= `1:500`
	
	stScaleType[7]	= `1'=1'-0"`
	stScaleType[8]	= `3"=1'-0"`
	stScaleType[9]	= `1 1/2"=1'-0"`
	stScaleType[10]	= `3/4"=1'-0"`
	stScaleType[11]	= `1/2"=1'-0"`
	stScaleType[12]	= `1/4"=1'-0"`
	stScaleType[13]	= `1/8"=1'-0"`
	stScaleType[14]	= `1/16"=1'-0"`
	stScaleType[15]	= `Специальный Масштаб`

if iScaleChangeSM = SCALE_CUSTOM then
	_iScaleSM = gs_ScaleChangeSM
else
	_iScaleSM = iScaleChangeSM
endif
if iScaleChangeMD = SCALE_CUSTOM then
	_iScaleMD = gs_ScaleChangeMD
else
	_iScaleMD = iScaleChangeMD
endif

! -------------- End of 2D Symbol variables --------------

if b<2*flightWidth THEN b=2*flightWidth

! ==============================================================================
! nRisers calculation
! ==============================================================================

if 2*flightWidth>b then flightWidth=b/2

IF parameterType_m = 1 THEN		! Tread Height

	IF nRisers1stRun<0.5 then LOCK "nRisers2ndRun","treadHeight","treadDepth"

	IF ABS(nRisers1stRun)>0.001 THEN
		n=nRisers1stRun+nRisers2ndRun
		treadHeight=zzyzx/(n)

		treadDepth=(a-flightWidth)/max(nRisers1stRun,nRisers2ndRun)
		nRisers1stRun=nRisers1stRun
		nRisers2ndRun=nRisers2ndRun
		PARAMETERS preferredTreadHeight=treadHeight
		LOCK "preferredTreadHeight"
	ENDIF

	IF ABS(nRisers1stRun)<0.001 THEN
		n=INT(zzyzx/(preferredTreadHeight))
		treadHeight=zzyzx/(n+1)

		nRisers2ndRun=INT(zzyzx/(2*treadHeight))
		nRisers1stRun=nRisers2ndRun
		treadDepth=(a-flightWidth)/nRisers2ndRun
		nRisers1stRun=nRisers1stRun
		nRisers2ndRun=nRisers2ndRun
		PARAMETERS nRisers2ndRun=nRisers2ndRun
	ENDIF

	IF 2*flightWidth<=b THEN flightWidthOffset=b-2*flightWidth
	IF 2*flightWidth>b THEN
		flightWidthOffset=0
		flightWidth=b/2
	ENDIF

	nRisers=nRisers1stRun+nRisers2ndRun
	PARAMETERS thd=2*treadHeight+treadDepth, treadHeight=treadHeight, treadDepth=treadDepth, nRisers=nRisers,flightWidthOffset=b-2*flightWidth
	LOCK "flightWidthOffset"
	VALUES "B" RANGE (1,)
	VALUES "flightWidth" RANGE (0.5,)
ENDIF

IF parameterType_m = 2 THEN		! No. of Risers per Run

	IF GLOB_MODPAR_NAME="parameterType" & nRisers1stRun<0.5 then
		PARAMETERS nRisers1stRun=nRisers2ndRun
		nRisers1stRun=nRisers2ndRun
	ENDIF

	VALUES "nRisers1stRun" RANGE [3,]

	zzyzx=preferredTreadHeight*(nRisers1stRun+nRisers2ndRun+1)
	a=max(nRisers1stRun,nRisers2ndRun)*treadDepth+flightWidth
	b=2*flightWidth+flightWidthOffset
	nRisers1stRun=nRisers1stRun
	nRisers2ndRun=nRisers2ndRun
	nRisers=nRisers1stRun+nRisers2ndRun

	PARAMETERS thd=2*treadHeight+treadDepth, treadHeight=preferredTreadHeight,b=b,nRisers=nRisers,a=a,zzyzx=zzyzx
	LOCK "thd","treadHeight","b","a"
	HIDEPARAMETER "treadHeight"
	VALUES "flightWidth" RANGE (0.5,)
	VALUES "B" RANGE (1,)
ENDIF

! --- Rails --------------------------------------------------------------

rightRailOffset = -rightRailOffset
leftRailOffset = -leftRailOffset

IF bSameRails THEN
	leftRailHeight		= rightRailHeight
	leftRailDist		= rightRailDist
	leftRailOffset		= rightRailOffset
	leftRailOvhgBottom	= rightRailOvhgBottom
	leftRailOvhgTop		= rightRailOvhgTop
	leftRailPostSize	= rightRailPostSize
	leftRailFrameThk	= rightRailFrameThk
	nBarsLeftRail		= nBarsRightRail
	leftRailBarThk		= rightRailBarThk
	leftRailBarDepth	= rightRailBarDepth
	leftWireType_m		= rightWireType_m
	leftRailWireThk		= rightRailWireThk
	leftRailWireDepth	= rightRailWireDepth
	leftRailWireDiam	= rightRailWireDiam
ENDIF

bComplexRailRight		= (rightRailType_m > 6)
if bSameRails then
	bComplexRailLeft 	= (rightRailType_m > 6)
else
	bComplexRailLeft 	= (leftRailType_m > 6)
endif

bEnableCarriageLine		= (stairBaseType_m = 2)

bet=atn((2*treadDepth)/flightWidth)
ang=ATN(treadHeight/treadDepth)

]]>
</Script_1D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_VL SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
call "FM_types" parameters all
call "ui_stairs" parameters gs_ui_current_page	= gs_ui_current_page

! ---------- Length Unit ----------
w_units_form = ""
rrr					= request("Linear_dimension", "", w_units_form)
bLinearDimIsMetric	= (strstr(w_units_form, "m") > 0)


! ---------- 3D detail level ----------
values{2} "gs_detlevel_3D_m" 	DET3D_OFF,			stDetlevel3D[1],
								DET3D_SIMPLE,		stDetlevel3D[2],
								DET3D_DETAILED,		stDetlevel3D[3]

if gs_detlevel_3D_m = DET3D_SIMPLE then
	lock "gs_resol"
	hideparameter "gs_resol"
endif

if gs_detlevel_3D_m = DET3D_OFF then
	lock "gs_resol", "gs_shadow"
	hideparameter "gs_resol", "gs_shadow"
endif


!! ---------- 2D detail level ----------
values{2} "gs_detlevel_2D_m"	DET2D_SCALESENSITIVE,	stDetlevel2D[1],
								DET2D_CUSTOM,			stDetlevel2D[2]

!! ---------- Symbol Type ----------
if gs_detlevel_2D_m = DET2D_SCALESENSITIVE then
	values{2} "iSymbolGroup"	SYMBOLGROUP_TYPE1,	stSymbolGroup[1],
								SYMBOLGROUP_TYPE2,	stSymbolGroup[2],
								SYMBOLGROUP_TYPE3,	stSymbolGroup[3],
								SYMBOLGROUP_TYPE4,	stSymbolGroup[4],
								SYMBOLGROUP_TYPE5,	stSymbolGroup[5],
								SYMBOLGROUP_TYPE6,	stSymbolGroup[6],
								SYMBOLGROUP_TYPE7,	stSymbolGroup[7],
								SYMBOLGROUP_TYPE8,	stSymbolGroup[8]

	lock			"gs_SymbolType_m"
	hideparameter	"gs_SymbolType_m"


	!! ----------------- Simple to Middle Scale -----------------
	if bLinearDimIsMetric then
		_iEnableScaleSMTypes	= 2 + 4 + 8 + 16 + 32 + 64
	else
		_iEnableScaleSMTypes	= 128 + 256 + 512 + 1024 + 2048 + 4096 + 8192 + 16384
	endif

	dim _iEnableScaleSMTypeValueList[]
	dim _stEnableScaleSMTypeValueList[]
	j = 1
	for i = 1 to vardim1(iScaleType)
		if bittest(_iEnableScaleSMTypes, i) then
			_iEnableScaleSMTypeValueList[j] = iScaleType[i]
			_stEnableScaleSMTypeValueList[j] = stScaleType[i]
			j = j + 1
		endif
	next i
	_iEnableScaleSMTypeValueList[j] = iScaleType[15]
	_stEnableScaleSMTypeValueList[j] = stScaleType[15]
	values{2} "iScaleChangeSM" _iEnableScaleSMTypeValueList, _stEnableScaleSMTypeValueList
	if iScaleChangeSM = SCALE_CUSTOM then
		values "gs_ScaleChangeSM"	range (1,)
	else
		gs_ScaleChangeSM = iScaleChangeSM
		parameters	gs_ScaleChangeSM = gs_ScaleChangeSM

		lock			"gs_ScaleChangeSM"
		hideparameter	"gs_ScaleChangeSM"
	endif

	
	!! ----------------- Middle to Detailed Scale -----------------
	if bLinearDimIsMetric then
		_iEnableScaleMDTypes	= 2 + 4 + 8 + 16 + 32 + 64
	else
		_iEnableScaleMDTypes	= 128 + 256 + 512 + 1024 + 2048 + 4096 + 8192 + 16384
	endif

	dim _iEnableScaleMDTypeValueList[]
	dim _stEnableScaleMDTypeValueList[]
	j = 1
	for i = 1 to vardim1(iScaleType)
		if bittest(_iEnableScaleMDTypes, i) then
			if iScaleChangeSM = SCALE_CUSTOM then
				if gs_ScaleChangeSM > iScaleType[i] then
					_iEnableScaleMDTypeValueList[j] = iScaleType[i]
					_stEnableScaleMDTypeValueList[j] = stScaleType[i]
					j = j + 1
				else
					i = vardim1(iScaleType)
				endif
			else
				_iEnableScaleMDTypeValueList[j] = iScaleType[i]
				_stEnableScaleMDTypeValueList[j] = stScaleType[i]

				if gs_ScaleChangeSM = _iEnableScaleSMTypeValueList[j] then
					i = vardim1(iScaleType)
				else
					j = j + 1
				endif
			endif
		endif
	next i
	_iEnableScaleMDTypeValueList[j] = iScaleType[15]
	_stEnableScaleMDTypeValueList[j] = stScaleType[15]
	values{2} "iScaleChangeMD" _iEnableScaleMDTypeValueList, _stEnableScaleMDTypeValueList

	if iScaleChangeMD = SCALE_CUSTOM then
		values "gs_ScaleChangeMD"	range (, _iScaleSM)
	else
		gs_ScaleChangeMD = iScaleChangeMD
		parameters	gs_ScaleChangeMD = gs_ScaleChangeMD

		lock			"gs_ScaleChangeMD"
		hideparameter	"gs_ScaleChangeMD"
	endif
	if (gs_ScaleChangeMD >= gs_ScaleChangeSM)  then
		gs_ScaleChangeMD = gs_ScaleChangeSM - 1
		parameters	gs_ScaleChangeMD = gs_ScaleChangeMD
	endif
else
	values{2} "gs_SymbolType_m"	SYMBOL_TYPE1,	stStairSymbolTypes[1],
								SYMBOL_TYPE2,	stStairSymbolTypes[2],
								SYMBOL_TYPE3,	stStairSymbolTypes[3],
								SYMBOL_TYPE4,	stStairSymbolTypes[4],
								SYMBOL_TYPE5,	stStairSymbolTypes[5],
								SYMBOL_TYPE6,	stStairSymbolTypes[6],
								SYMBOL_TYPE7,	stStairSymbolTypes[7],
								SYMBOL_TYPE8,	stStairSymbolTypes[8],
								SYMBOL_TYPE9,	stStairSymbolTypes[9],
								SYMBOL_TYPE10,	stStairSymbolTypes[10],
								SYMBOL_TYPE11,	stStairSymbolTypes[11],
								SYMBOL_TYPE12,	stStairSymbolTypes[12],
								SYMBOL_TYPE13,	stStairSymbolTypes[13],
								SYMBOL_TYPE14,	stStairSymbolTypes[14],
								SYMBOL_TYPE15,	stStairSymbolTypes[15],
								SYMBOL_TYPE16,	stStairSymbolTypes[16],
								SYMBOL_TYPE17,	stStairSymbolTypes[17],
								SYMBOL_TYPE18,	stStairSymbolTypes[18],
								SYMBOL_TYPE19,	stStairSymbolTypes[19],
								SYMBOL_TYPE20,	stStairSymbolTypes[20]

	lock			"iSymbolGroup",
					"gs_ScaleChangeSM",
					"iScaleChangeSM",
					"gs_ScaleChangeMD",
					"iScaleChangeMD"
	hideparameter	"iSymbolGroup",
					"gs_ScaleChangeSM",
					"iScaleChangeSM",
					"gs_ScaleChangeMD",
					"iScaleChangeMD"
endif


! ====================================================================
! Base
! ====================================================================

VALUES "parameterType" stParameterType			! Tread Height, No. of Risers per Run
if GLOB_MODPAR_NAME = "parameterType" then
	for i = 1 to vardim1(stParameterType)
	   if parameterType = stParameterType[i]	then parameterType_m = i
	next i
	parameters parameterType_m = parameterType_m
else
	parameters parameterType = stParameterType[parameterType_m]
endif

values "stairBaseType"	stStairBaseType			! Concrete, Wood, None
values "stairBaseType_m" 1, 2, 3
if GLOB_MODPAR_NAME = "stairBaseType" then
	stairBaseType_m = 1
	for i = 1 to vardim1(stStairBaseType)
	   if stairBaseType = stStairBaseType[i]	then stairBaseType_m = i
	next i
	parameters stairBaseType_m = stairBaseType_m
else
	stairBaseType_m = max(1, min(stairBaseType_m, vardim1(stStairBaseType)))
	stairBaseType = stStairBaseType[stairBaseType_m]
	parameters stairBaseType = stairBaseType, stairBaseType_m = stairBaseType_m
endif

! ====================================================================
! 2D Text
! ====================================================================

! ---------- Rise & Run Text ----------

values "gs_RiseRunText" stRiseRunText
values "iRiseRunText" 1, 2, 3, 4, 5, 6, 99

if GLOB_MODPAR_NAME = "gs_RiseRunText" then
	for i = 1 to vardim1(stRiseRunText)
	   if gs_RiseRunText = stRiseRunText[i]	then iRiseRunText = i
	next i
	if gs_RiseRunText = stRiseRunText[7]	then iRiseRunText = 99
	parameters iRiseRunText = iRiseRunText
else
	if iRiseRunText = 99 then
		gs_RiseRunText = stRiseRunText[7]
	else
		gs_RiseRunText = stRiseRunText[max(1, min(iRiseRunText, vardim1(stRiseRunText)) )]
	endif
	parameters gs_RiseRunText = gs_RiseRunText
endif

values "typeTextRotation_RiseRun" stTextOrientation[3],stTextOrientation[1]	! Readable, Align with Symbol
if GLOB_MODPAR_NAME = "typeTextRotation_RiseRun" then
	for i = 1 to 3
		if typeTextRotation_RiseRun = stTextOrientation[i]	then typeTextRotation_RiseRun_m = i-1
	next i
	parameters typeTextRotation_RiseRun_m = typeTextRotation_RiseRun_m
else
	parameters typeTextRotation_RiseRun = stTextOrientation[typeTextRotation_RiseRun_m+1]
endif

! ---------- Numbering ----------

values "typeTextRotation_Num" stTextOrientation[3],stTextOrientation[1]	! Readable, Align with Symbol
if GLOB_MODPAR_NAME = "typeTextRotation_Num" then
	for i = 1 to 3
		if typeTextRotation_Num = stTextOrientation[i]	then typeTextRotation_Num_m = i-1
	next i
	parameters typeTextRotation_Num_m = typeTextRotation_Num_m
else
	parameters typeTextRotation_Num = stTextOrientation[typeTextRotation_Num_m+1]
endif

! ---------- UP & Down ----------

values "walkingDirUPDN" stWalkingDirUPDN			! None, Up, Down at Bottom, Down at Top, Both, Both Sensitive
values "walkingDirUPDN_m" 1, 2, 3, 4, 5, 6
if GLOB_MODPAR_NAME = "walkingDirUPDN" then
	walkingDirUPDN_m = 1
	for i = 1 to vardim1(stWalkingDirUPDN)
	   if walkingDirUPDN = stWalkingDirUPDN[i]	then walkingDirUPDN_m = i
	next i
	parameters walkingDirUPDN_m = walkingDirUPDN_m
else
	walkingDirUPDN_m = max(1, min(walkingDirUPDN_m, vardim1(stWalkingDirUPDN)))
	walkingDirUPDN = stWalkingDirUPDN[walkingDirUPDN_m]
	parameters walkingDirUPDN = walkingDirUPDN, walkingDirUPDN_m = walkingDirUPDN_m
endif

values "typeTextRotation_UpDn" stTextOrientation[3],stTextOrientation[2],stTextOrientation[1]	! Readable, Parallel with, Align with Symbol
if GLOB_MODPAR_NAME = "typeTextRotation_UpDn" then
	for i = 1 to 3
		if typeTextRotation_UpDn = stTextOrientation[i]	then typeTextRotation_UpDn_m = i-1
	next i
	parameters typeTextRotation_UpDn_m = typeTextRotation_UpDn_m
else
	parameters typeTextRotation_UpDn = stTextOrientation[typeTextRotation_UpDn_m+1]
endif

VALUES "lineTypeAboveBreak" stLineTypeAboveBreak
if GLOB_MODPAR_NAME = "lineTypeAboveBreak" then
	for i = 1 to vardim1(stLineTypeAboveBreak)
	   if lineTypeAboveBreak = stLineTypeAboveBreak[i]	then lineTypeAboveBreak_m = i
	next i
	parameters lineTypeAboveBreak_m = lineTypeAboveBreak_m
else
	parameters lineTypeAboveBreak = stLineTypeAboveBreak[lineTypeAboveBreak_m]
endif

VALUES "arrow_style" 	stArrowHeadStyles		! Style 1 - 9
values "arrow_style_m" 1, 2, 3, 4, 5, 6, 7, 8, 9
if GLOB_MODPAR_NAME = "arrow_style" then
	for i = 1 to vardim1(stArrowHeadStyles)
	   if arrow_style = stArrowHeadStyles[i]	then arrow_style_m = i
	next i
	parameters arrow_style_m = arrow_style_m
else
	parameters arrow_style = stArrowHeadStyles[arrow_style_m]
endif

values "gs_StartEndStyle"	stStartSymbolStyles			! Style 1, Style 2, Style 3, None
values "gs_StartEndStyle_m" 1, 2, 3, 4
if GLOB_MODPAR_NAME = "gs_StartEndStyle" then
	gs_StartEndStyle_m = 1
	for i = 1 to vardim1(stStartSymbolStyles)
	   if gs_StartEndStyle = stStartSymbolStyles[i]	then gs_StartEndStyle_m = i
	next i
	parameters gs_StartEndStyle_m = gs_StartEndStyle_m
else
	gs_StartEndStyle_m = max(1, min(gs_StartEndStyle_m, vardim1(stStartSymbolStyles)))
	gs_StartEndStyle = stStartSymbolStyles[gs_StartEndStyle_m]
	parameters gs_StartEndStyle = gs_StartEndStyle, gs_StartEndStyle_m = gs_StartEndStyle_m
endif

if bSimpleZigZag then
	VALUES "breakline_style" stBreaklineStyle[1],stBreaklineStyle[3]	! Straight, Zigzag CHI
	values "breakline_style_m" 1, 3
else
	VALUES "breakline_style" stBreaklineStyle[1],stBreaklineStyle[2]	! Straight, Zigzag
	values "breakline_style_m" 1, 2
endif
if GLOB_MODPAR_NAME = "breakline_style" then
	for i = 1 to vardim1(stBreaklineStyle)
	   if breakline_style = stBreaklineStyle[i]	then breakline_style_m = i
	next i
	parameters breakline_style_m = breakline_style_m
else
	parameters breakline_style = stBreaklineStyle[breakline_style_m]
endif

!values "gs_BreakHeight" range (0,ZZYZX - treadDepth)
VALUES "breakLineWidth"	RANGE (0,treadDepth]

! ====================================================================
! Rail
! ====================================================================

values "rail_m" 1, 2, 3, 4
if GLOB_MODPAR_NAME = "bRightRail" or GLOB_MODPAR_NAME = "bLeftRail" then
	if bRightRail then
		if bLeftRail then
			rail_m = RAILPOS_BOTH
		else
			rail_m = RAILPOS_RIGHT
		endif
	else
		if bLeftRail then
			rail_m = RAILPOS_LEFT
		else
			rail_m = RAILPOS_NONE
		endif
	endif
	parameters rail_m = rail_m
else
	if rail_m = 1 then
		bRightRail	= 1
		bLeftRail	= 1
	endif
	if rail_m = 2 then
		bRightRail	= 1
		bLeftRail	= 0
	endif
	if rail_m = 3 then
		bRightRail	= 0
		bLeftRail	= 1
	endif
	if rail_m = 4 then
		bRightRail	= 0
		bLeftRail	= 0
	endif
	parameters bRightRail	= bRightRail
	parameters bLeftRail	= bLeftRail
endif

if NOT(bRightRail) then
	lock			"rightRailType"
	hideparameter	"rightRailType"
endif
if NOT(bLeftRail) then
	lock			"leftRailType"
	hideparameter	"leftRailType"
endif

VALUES "rightRailType" 	stRailTypes[1],
						stRailTypes[2],
						stRailTypes[3],
						stRailTypes[4],
						stRailTypes[5],
						stRailTypes[6],
						stRailTypes[7],
						stRailTypes[8],
						stRailTypes[9],
						stRailTypes[10]

if GLOB_MODPAR_NAME = "rightRailType" then
	for i = 1 to vardim1(stRailTypes)
	   if rightRailType = stRailTypes[i]	then rightRailType_m = i
	next i
	parameters rightRailType_m = rightRailType_m
else
	parameters rightRailType = stRailTypes[rightRailType_m]
endif

if rail_m = RAILPOS_BOTH then		! Both
	VALUES "leftRailType" 	stRailTypes
else
	VALUES "leftRailType" 	stRailTypes[1],
							stRailTypes[2],
							stRailTypes[3],
							stRailTypes[4],
							stRailTypes[5],
							stRailTypes[6],
							stRailTypes[7],
							stRailTypes[8],
							stRailTypes[9],
							stRailTypes[10]
endif
if GLOB_MODPAR_NAME = "leftRailType" then
	for i = 1 to vardim1(stRailTypes)
	   if leftRailType = stRailTypes[i]	then leftRailType_m = i
	next i
	parameters leftRailType_m = leftRailType_m
else
	parameters leftRailType = stRailTypes[leftRailType_m]
endif
bSameRails = (leftRailType_m = RAIL_SAMERAILS)
parameters bSameRails = bSameRails

values "rightWireType" stWireType	! Rectangular, Round
values "leftWireType" stWireType	! Rectangular, Round

if GLOB_MODPAR_NAME = "leftWireType" then
	for i = 1 to vardim1(stWireType)
	   if leftWireType = stWireType[i]	then leftWireType_m = i
	next i
	parameters leftWireType_m = leftWireType_m
else
	parameters leftWireType = stWireType[leftWireType_m]
endif

if GLOB_MODPAR_NAME = "rightWireType" then
	for i = 1 to vardim1(stWireType)
	   if rightWireType = stWireType[i]	then rightWireType_m = i
	next i
	parameters rightWireType_m = rightWireType_m
else
	parameters rightWireType = stWireType[rightWireType_m]
endif

if rightRailType_m = 2 THEN
	values "nBarsRightRail" 2,3,4,5,6
else
	values "nBarsRightRail" 1,2,3,4,5,6
endif
if leftRailType_m = 2 | bSameRails & rightRailType_m = 2 THEN
	values "nBarsLeftRail" 2,3,4,5,6
else
	values "nBarsLeftRail" 1,2,3,4,5,6
endif

! --- HIDE RAILING PARAMETERS ---

LOCK "ggr","sgr","ggl","sgl"

IF leftRailType_m = RAIL_BALUSTRADE THEN
	HIDEPARAMETER	"leftRailPostSize",
					"nBarsLeftRail"
ENDIF
IF leftRailType_m = RAIL_PARALLEL_BARS THEN
	HIDEPARAMETER	"leftRailBarThk",
					"leftRailPostSize"
ENDIF
IF leftRailType_m = RAIL_SIMPLE_BAR THEN
	HIDEPARAMETER	"leftRailBarThk",
					"leftRailPostSize",
					"nBarsLeftRail"
ENDIF
IF leftRailType_m = RAIL_SOLID_FRAME_FILLED THEN
	HIDEPARAMETER	"leftRailPostSize",
					"leftRailBarDepth",
					"nBarsLeftRail"
ENDIF
IF leftRailType_m = RAIL_SOLID_FRAME THEN
	HIDEPARAMETER	"leftRailPostSize",
					"leftRailBarDepth",
					"nBarsLeftRail",
					"leftRailBarThk"
ENDIF
IF leftRailType_m = RAIL_SOLID THEN
	HIDEPARAMETER	"leftRailPostSize",
					"leftRailBarDepth",
					"nBarsLeftRail",
					"leftRailBarThk"
ENDIF
IF leftRailType_m = RAIL_WIRED THEN
	HIDEPARAMETER	"leftRailBarDepth"
	if leftWireType_m = 1 then HIDEPARAMETER	"leftRailWireDiam"
	if leftWireType_m = 2 then HIDEPARAMETER	"leftRailWireThk",
												"leftRailWireDepth"
else
	HIDEPARAMETER	"leftWireType",
					"leftRailWireThk",
					"leftRailWireDepth",
					"leftRailWireDiam"
ENDIF
IF leftRailType_m = RAIL_WOODEN_BALUSTRADE THEN
	HIDEPARAMETER	"leftRailPostSize",
					"leftRailBarDepth",
					"nBarsLeftRail",
					"leftRailBarThk"
ENDIF



IF rightRailType_m = RAIL_BALUSTRADE THEN
	HIDEPARAMETER	"rightRailPostSize",
					"nBarsRightRail"
ENDIF
IF rightRailType_m = RAIL_PARALLEL_BARS THEN
	HIDEPARAMETER	"rightRailBarThk",
					"rightRailPostSize"
ENDIF
IF rightRailType_m = RAIL_SIMPLE_BAR THEN
	HIDEPARAMETER	"rightRailBarThk",
					"rightRailPostSize",
					"nBarsRightRail"
ENDIF
IF rightRailType_m = RAIL_SOLID_FRAME_FILLED THEN
	HIDEPARAMETER	"rightRailPostSize",
					"rightRailBarDepth",
					"nBarsRightRail"
ENDIF
IF rightRailType_m = RAIL_SOLID_FRAME THEN
	HIDEPARAMETER	"rightRailPostSize",
					"rightRailBarDepth",
					"nBarsRightRail",
					"rightRailBarThk"
ENDIF
IF rightRailType_m = RAIL_SOLID THEN
	HIDEPARAMETER	"rightRailPostSize",
					"rightRailBarDepth",
					"nBarsRightRail",
					"rightRailBarThk"
ENDIF
IF rightRailType_m = RAIL_WIRED THEN
	HIDEPARAMETER	"rightRailBarDepth"
	if rightWireType_m = 1 then HIDEPARAMETER	"rightRailWireDiam"
	if rightWireType_m = 2 then HIDEPARAMETER	"rightRailWireThk",
												"rightRailWireDepth"
else
	HIDEPARAMETER	"rightWireType",
					"rightRailWireThk",
					"rightRailWireDepth",
					"rightRailWireDiam"
ENDIF
IF rightRailType_m = RAIL_WOODEN_BALUSTRADE THEN
	HIDEPARAMETER	"rightRailPostSize",
					"rightRailBarDepth",
					"nBarsRightRail",
					"rightRailBarThk"
ENDIF

IF rail_m = RAILPOS_NONE | rail_m = RAILPOS_LEFT THEN		! None, Left
	HIDEPARAMETER "rightRailType", "ggr", "rightRailHeight", "rightRailDist", "rightRailOffset", "sgr",
		"rightRailFrameThk", "rightRailBarThk"
ENDIF
IF rail_m = RAILPOS_NONE | rail_m = RAILPOS_RIGHT THEN		! None, Right
	HIDEPARAMETER "leftRailType", "ggl", "leftRailHeight", "leftRailDist", "leftRailOffset", "sgl",
		"leftRailFrameThk", "leftRailBarThk"
ENDIF

IF rail_m = RAILPOS_NONE THEN HIDEPARAMETER "matPost","matHandrail","matSurface","matBar"		! None

IF bSameRails or NOT(bLeftRail) THEN
	HIDEPARAMETER	"ggl",
					"leftRailHeight",
					"leftRailDist",
					"leftRailOffset",
					"sgl",
					"leftRailHeight",
					"leftRailDist",
					"leftRailOffset",
					"leftRailOvhgBottom",
					"leftRailWireDiam",
					"leftWireType",
					"leftRailWireThk",
					"leftRailWireDepth",
					"leftRailOvhgTop",
					"leftRailPostSize",
					"leftRailFrameThk",
					"nBarsLeftRail",
					"leftRailBarThk",
					"leftRailBarDepth"
ENDIF
IF NOT(bRightRail) THEN
	HIDEPARAMETER	"ggr",
					"rightRailHeight",
					"rightRailDist",
					"rightRailOffset",
					"sgr",
					"rightRailHeight",
					"rightRailDist",
					"rightRailOffset",
					"rightRailOvhgBottom",
					"rightRailWireDiam",
					"rightWireType",
					"rightRailWireThk",
					"rightRailWireDepth",
					"rightRailOvhgTop",
					"rightRailPostSize",
					"rightRailFrameThk",
					"nBarsRightRail",
					"rightRailBarThk",
					"rightRailBarDepth"
ENDIF

! ==============================================================================
! Symbolic 2D
! ==============================================================================

values "postSymbolType" stPostSymbolType
values "iPostSymbolType" 1, 2, 3, 4, 0
if GLOB_MODPAR_NAME = "postSymbolType" then
	iPostSymbolType = 1
	if postSymbolType = stPostSymbolType[2] then iPostSymbolType = 2
	if postSymbolType = stPostSymbolType[3] then iPostSymbolType = 3
	if postSymbolType = stPostSymbolType[4] then iPostSymbolType = 4
	if postSymbolType = stPostSymbolType[5] then iPostSymbolType = 0
	parameters iPostSymbolType = iPostSymbolType
else
	postSymbolType = stPostSymbolType[1]
	if iPostSymbolType = 2 then postSymbolType = stPostSymbolType[2]
	if iPostSymbolType = 3 then postSymbolType = stPostSymbolType[3]
	if iPostSymbolType = 4 then postSymbolType = stPostSymbolType[4]
	if iPostSymbolType = 0 then postSymbolType = stPostSymbolType[5]
	parameters postSymbolType = postSymbolType
endif

if NOT(bShowRailOnFloorPlan) then
	lock			"railLineType",
					"railPen",
					"bSymbolic2D",
					"postSymbolType",
					"iPostSymbolType",
					"postLineType",
					"postPen",
					"bShowRailAboveBreakLine"
	hideparameter	"railLineType",
					"railPen",
					"bSymbolic2D",
					"postSymbolType",
					"iPostSymbolType",
					"postLineType",
					"postPen",
					"bShowRailAboveBreakLine"
endif
if NOT(iPostSymbolType) then
	lock			"postLineType",
					"postPen"
	hideparameter	"postLineType",
					"postPen"
endif
if NOT(bSymbolic2D) then
	lock			"postSymbolType",
					"iPostSymbolType",
					"postLineType",
					"postPen"
	hideparameter	"postSymbolType",
					"iPostSymbolType",
					"postLineType",
					"postPen"
endif
if not(bShowRailAxis) then
	lock 			"railAxisLineType",
					"gs_RailAxisPen"
	hideparameter	"railAxisLineType",
					"gs_RailAxisPen"
endif
if	gs_detlevel_2D_m = DET2D_CUSTOM &\
	(gs_SymbolType_m = 3 |\
	gs_SymbolType_m = 8 |\
	gs_SymbolType_m = 15) then
	lock			"bShowRailAboveBreakLine"
	hideparameter	"bShowRailAboveBreakLine"
endif
if NOT(bShowCarriage) then
	lock			"iShowCarriageUpTo",
					"stShowCarriageUpTo",
					"carriageLineType",
					"carriagePen"
	hideparameter	"stShowCarriageUpTo",
					"carriageLineType",
					"carriagePen"
endif
if NOT(bEnableCarriageLine) then
	lock			"bShowCarriage",
					"iShowCarriageUpTo",
					"stShowCarriageUpTo",
					"carriageLineType",
					"carriagePen"
	hideparameter	"bShowCarriage",
					"stShowCarriageUpTo",
					"carriageLineType",
					"carriagePen"
endif

values "stShowCarriageUpTo" stShowCarriageValues
values "iShowCarriageUpTo" 1, 20, 50, 100, 200

if GLOB_MODPAR_NAME = "stShowCarriageUpTo" then
	iShowCarriageUpTo = 1
	if stShowCarriageUpTo = stShowCarriageValues[2]	then iShowCarriageUpTo = 20
	if stShowCarriageUpTo = stShowCarriageValues[3]	then iShowCarriageUpTo = 50
	if stShowCarriageUpTo = stShowCarriageValues[4]	then iShowCarriageUpTo = 100
	if stShowCarriageUpTo = stShowCarriageValues[5]	then iShowCarriageUpTo = 200
	parameters iShowCarriageUpTo = iShowCarriageUpTo
else
	stShowCarriageUpTo = stShowCarriageValues[1]
	if iShowCarriageUpTo = 20	then stShowCarriageUpTo = stShowCarriageValues[2]
	if iShowCarriageUpTo = 50	then stShowCarriageUpTo = stShowCarriageValues[3]
	if iShowCarriageUpTo = 100	then stShowCarriageUpTo = stShowCarriageValues[4]
	if iShowCarriageUpTo = 200	then stShowCarriageUpTo = stShowCarriageValues[5]
	parameters stShowCarriageUpTo = stShowCarriageUpTo
endif

! ====================================================================
! End Of Rail
! ====================================================================

values "gs_ArrowHeight" RANGE[max(treadDepth/8,0.03),]
values "gs_ArrowHalfWidth" RANGE[max(treadDepth/10,0.02),]

VALUES "stairSlabThk" RANGE (0,)
values "rightRailHeight" range [0.3,]
values "leftRailHeight" range [0.3,]
values "rightRailDist" range [0,]
values "leftRailDist" range [0,]
values "rightRailOffset" range [-flightWidth/3,flightWidth/3]
values "leftRailOffset" range [-flightWidth/3,min(0.1,(b-2*flightWidth)/2)]
values "woodBaseOffset" range [0,flightWidth/2-0.05)
values "nosing"  range [0,treadDepth/2)



IF stairBaseType_m <> 2 THEN HIDEPARAMETER "woodBaseOffset"		! Wood
IF stairBaseType_m = 3 THEN HIDEPARAMETER "stairSlabThk"		! None

dim iPenNumber[255]
for i=1 to 255
	iPenNumber[i]=i
next i

values "gs_cont_pen"		iPenNumber
values "gs_DashLinePen"		iPenNumber
values "railPen"			iPenNumber
values "gs_RailAxisPen"		iPenNumber
values "postPen"			iPenNumber
values "carriagePen"		iPenNumber
values "gs_fill_pen"		iPenNumber
values "gs_wLinePen"		iPenNumber
values "gs_NumTextPen"		iPenNumber
values "gs_text_pen"		iPenNumber
values "UPDNfontpen"		iPenNumber
values "gs_desc_text_pen"	iPenNumber
values "gs_LinePenStUp"		iPenNumber

!!!!!! *** 2D REPRESENTATION  *** !!!!!!!

! --- HIDE MATERIAL PARAMETERS ---

! None
IF stairBaseType_m = 3 THEN HIDEPARAMETER 	"matBase",	
											"penLineStringer",
											"typeFillStringer",
											"penFillStringer",
											"penBackFillStringer"

IF treadThickness<0.0001 THEN HIDEPARAMETER "matTread",
											"penLineTread",
											"typeFillTread",
											"penFillTread",
											"penBackFillTread"

IF bRiserCover=0 THEN HIDEPARAMETER "riserCoverThk","matRiser",
									"penLineRiser",
									"typeFillRiser",
									"penFillRiser",
									"penBackFillRiser"

! ==============================================================================
! Settings of 2D Symbol Type
! ==============================================================================

	LOCK "nRisers"

	LOCK	"gs_ArrowFill","gs_ArrowHeight","gs_ArrowHalfWidth",
			"gs_StartEndFill","gs_StartWidth","gs_StartHeight",
			"DirNumText_X","DirNumText_Y",
			"DirUPDN_X","DirUPDN_Y","AngUPDN",
			"bSameRails","breakLineWidth"

	IF bShowWalkLine=0 THEN
		 HIDEPARAMETER 	"gs_wLineType1","gs_wLineTypeAbove",
						"gs_wLinePen","arrow_style","gs_ArrowFillPen","gs_ArrowFillPenAbove", "bShowWalkLineAboveBreakline", "gs_circleRadius",
						"gs_StartEndStyle","gs_StartEndFillPen","bShowRiseAndRunText","walkingDirUPDN","UPDNfontsize"

		 LOCK	"gs_wLineType1","gs_wLineTypeAbove",
				"gs_wLinePen","arrow_style","gs_ArrowFillPen","gs_ArrowFillPenAbove", "bShowWalkLineAboveBreakline", "gs_circleRadius",
				"gs_StartEndStyle","gs_StartEndFillPen","bShowRiseAndRunText","walkingDirUPDN","UPDNfontsize"
	ENDIF

	IF arrow_style_m = 1 | arrow_style_m = 2 | arrow_style_m = 3 THEN
		 lock 	"gs_ArrowFillPen","gs_ArrowFillPenAbove"
		 HIDEPARAMETER 	"gs_ArrowFillPen","gs_ArrowFillPenAbove"
	ENDIF

	IF gs_StartEndStyle_m = 3 | gs_StartEndStyle_m = 4  THEN		! Style 3, None
		 HIDEPARAMETER 	"gs_StartEndFillPen"
	ENDIF

	if not(bShowNumbering)  then
		 lock 	"nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen", "typeTextRotation_Num"
		 hideparameter 	"nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen", "typeTextRotation_Num"
	endif

	if not(bShowRiseAndRunText) then
		lock 	"gs_RiseRunText","gs_CustomText1","gs_CustomText2","gs_customText_rise", "fontsize", "gs_text_size_pt", "typeTextRotation_RiseRun", "gs_text_pen", "bUseACLinearUnit"
		hideparameter 	"gs_RiseRunText","gs_CustomText1","gs_CustomText2", "gs_customText_rise", "fontsize", "gs_text_size_pt", "typeTextRotation_RiseRun", "gs_text_pen", "bUseACLinearUnit"
	endif

	if iRiseRunText < 99 then
		hideparameter 	"gs_CustomText1","gs_CustomText2"
		lock		 	"gs_CustomText1","gs_CustomText2"
	else
		if bLinearDimIsMetric then
			hideparameter 	"gs_CustomText2"
			lock		 	"gs_CustomText2"
		endif
	endif

	if iRiseRunText <> 5 & iRiseRunText <> 6 then
		lock "gs_customText_rise"
		hideparameter "gs_customText_rise"
	endif

	if walkingDirUPDN_m = 1 then	! None
		 lock 	"UPDNfontsize","gs_text_size_pt_UpDn", "UPDNfontpen","AngUPDN", "typeTextRotation_UpDn"
		 hideparameter 	"UPDNfontsize", "gs_text_size_pt_UpDn", "UPDNfontpen","AngUPDN", "typeTextRotation_UpDn"
	endif
	if walkingDirUPDN_m = 1 | walkingDirUPDN_m = 2 then	! None, Up
		lock "gs_CustomText_Down"
		hideparameter "gs_CustomText_Down"
	endif

	! --- SETTINGS BY SYMBOL TYPES ---

	if gs_detlevel_2D_m = DET2D_CUSTOM then
		IF gs_SymbolType_m = 1 THEN		! Type 1
			HIDEPARAMETER	"bShowNumbering","nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen",
							"gs_ArrowFillPenAbove","gs_FillAbove"

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=0
				PARAMETERS gs_BreaklineStUp=0
				PARAMETERS gs_TreadStUp=0
				PARAMETERS gs_numaStUp=0
			ENDIF

		ENDIF

		IF gs_SymbolType_m = 2 THEN		! Type 2
			HIDEPARAMETER 	"bShowNumbering","nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen",
							"gs_ArrowFillPenAbove","gs_FillAbove"

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=0
				PARAMETERS gs_BreaklineStUp=0
				PARAMETERS gs_TreadStUp=0
				PARAMETERS gs_numaStUp=0
			ENDIF

		ENDIF

		IF gs_SymbolType_m = 3 THEN		! Type 3
			HIDEPARAMETER 	"bShowNumbering","nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen",
							"gs_ArrowFillPenAbove","gs_FillAbove"

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=0
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=0
				PARAMETERS gs_numaStUp=0
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 4 THEN		! Type 4
			HIDEPARAMETER 	"bShowNumbering","nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen"

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=0
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=0
				PARAMETERS gs_numaStUp=0
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 5 THEN		! Type 5
			HIDEPARAMETER 	"bShowNumbering","nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen"

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=0
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=0
				PARAMETERS gs_numaStUp=0
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 6 THEN		! Type 6
			HIDEPARAMETER "gs_ArrowFillPenAbove","gs_FillAbove"

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=0
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 7 THEN		! Type 7
			HIDEPARAMETER 	"gs_ArrowFillPenAbove","gs_FillAbove"
			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=0
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 8 THEN		! Type 8
			HIDEPARAMETER 	"bShowNumbering","nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen",
							"gs_ArrowFillPenAbove","gs_FillAbove"

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 9 THEN		! Type 9
			HIDEPARAMETER 	"bShowNumbering","nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen"

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 10 THEN		! Type 10
			HIDEPARAMETER 	"bShowNumbering","nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen"
			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 11 THEN		! Type 11

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 12 THEN		! Type 12

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 13 THEN		! Type 13
			HIDEPARAMETER 	"gs_FillAbove"
			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=0
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 14 THEN		! Type 14
			HIDEPARAMETER 	"gs_FillAbove"
			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=0
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 15 THEN		! Type 15
			HIDEPARAMETER 	"bShowNumbering","nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen",
							"gs_FillAbove"

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 16 THEN		! Type 16
			HIDEPARAMETER 	"bShowNumbering","nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen"

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 17 THEN		! Type 17
			HIDEPARAMETER 	"bShowNumbering","nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen"

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 18 THEN		! Type 18

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 19 THEN		! Type 19

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 20 THEN		! Type 20
			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF
	endif
	
! ======================================================================
! Above Home Story
! ======================================================================
IF not(bStorySensitive) THEN
	HIDEPARAMETER "gs_AboveHomeStory"
ELSE
	IF not(gs_BreaklineStUp) THEN HIDEPARAMETER "gs_LowerPartStUp","gs_UpperPartStUp"
	IF gs_BreaklineStUp | not(gs_TreadStUp) THEN HIDEPARAMETER "gs_numaStUp"
	IF not(gs_LowerPartStUp) & not(gs_UpperPartStUp) & gs_BreaklineStUp THEN HIDEPARAMETER "gs_TreadStUp"
ENDIF

! ==============================================================================
! mm / point conversion
! ==============================================================================

MM_IN_A_DOT = 25.4 / 72

if GLOB_MODPAR_NAME = "gs_text_size_pt_UpDn" then
	UPDNfontsize = gs_text_size_pt_UpDn * MM_IN_A_DOT
	parameters UPDNfontsize = UPDNfontsize
else
	gs_text_size_pt_UpDn = UPDNfontsize / MM_IN_A_DOT
	parameters gs_text_size_pt_UpDn = gs_text_size_pt_UpDn
endif

if GLOB_MODPAR_NAME = "gs_text_size_pt" then
	fontsize = gs_text_size_pt * MM_IN_A_DOT
	parameters fontsize = fontsize
else
	gs_text_size_pt = fontsize / MM_IN_A_DOT
	parameters gs_text_size_pt = gs_text_size_pt
endif

if GLOB_MODPAR_NAME = "gs_text_size_pt_num" then
	gs_NumTextSize = gs_text_size_pt_num * MM_IN_A_DOT
	parameters gs_NumTextSize = gs_NumTextSize
else
	gs_text_size_pt_num = gs_NumTextSize / MM_IN_A_DOT
	parameters gs_text_size_pt_num = gs_text_size_pt_num
endif

if GLOB_MODPAR_NAME = "gs_desc_text_size_pt" then
	gs_desc_text_size = gs_desc_text_size_pt * MM_IN_A_DOT
	parameters gs_desc_text_size = gs_desc_text_size
else
	gs_desc_text_size_pt = gs_desc_text_size / MM_IN_A_DOT
	parameters gs_desc_text_size_pt = gs_desc_text_size_pt
endif

! --- Connecting integer and section pencolor type parameters ---

for i = 1 to 255
	put i
next i

values "penLineStringer" use(nsp)
values "penFillStringer" use(nsp)

if GLOB_MODPAR_NAME = "penLineStringer_m" then
	if penLineStringer_m < -1 | penLineStringer_m > 255 then
		penLineStringer_m = 1
		parameters penLineStringer_m = penLineStringer_m
	endif
	parameters penLineStringer = penLineStringer_m
else
	parameters penLineStringer_m = penLineStringer
endif
if GLOB_MODPAR_NAME = "penFillStringer_m" then
	if penFillStringer_m < -1 | penFillStringer_m > 255 then
		penFillStringer_m = 1
		parameters penFillStringer_m = penFillStringer_m
	endif
	parameters penFillStringer = penFillStringer_m
else
	parameters penFillStringer_m = penFillStringer
endif

values "penLineTread" use(nsp)
values "penFillTread" use(nsp)

if GLOB_MODPAR_NAME = "penLineTread_m" then
	if penLineTread_m < 1 | penLineTread_m > 255 then
		penLineTread_m = 1
		parameters penLineTread_m = penLineTread_m
	endif
	parameters penLineTread = penLineTread_m
else
	parameters penLineTread_m = penLineTread
endif
if GLOB_MODPAR_NAME = "penFillTread_m" then
	if penFillTread_m < 1 | penFillTread_m > 255 then
		penFillTread_m = 1
		parameters penFillTread_m = penFillTread_m
	endif
	parameters penFillTread = penFillTread_m
else
	parameters penFillTread_m = penFillTread
endif

values "penLineRiser" use(nsp)
values "penFillRiser" get(nsp)

if GLOB_MODPAR_NAME = "penLineRiser_m" then
	if penLineRiser_m < 1 | penLineRiser_m > 255 then
		penLineRiser_m = 1
		parameters penLineRiser_m = penLineRiser_m
	endif
	parameters penLineRiser = penLineRiser_m
else
	parameters penLineRiser_m = penLineRiser
endif
if GLOB_MODPAR_NAME = "penFillRiser_m" then
	if penFillRiser_m < 1 | penFillRiser_m > 255 then
		penFillRiser_m = 1
		parameters penFillRiser_m = penFillRiser_m
	endif
	parameters penFillRiser = penFillRiser_m
else
	parameters penFillRiser_m = penFillRiser
endif


if GLOB_MODPAR_NAME = "penBackFillStringer_m" then
	if penBackFillStringer_m < -1 | penBackFillStringer_m > 255 then
		penBackFillStringer_m = 1
		parameters penBackFillStringer_m = penBackFillStringer_m
	endif
	parameters penBackFillStringer = penBackFillStringer_m
else
	parameters penBackFillStringer_m = penBackFillStringer
endif

if GLOB_MODPAR_NAME = "penBackFillTread_m" then
	if penBackFillTread_m < -1 | penBackFillTread_m > 255 then
		penBackFillTread_m = 1
		parameters penBackFillTread_m = penBackFillTread_m
	endif
	parameters penBackFillTread = penBackFillTread_m
else
	parameters penBackFillTread_m = penBackFillTread
endif

if GLOB_MODPAR_NAME = "penBackFillRiser_m" then
	if penBackFillRiser_m < -1 | penBackFillRiser_m > 255 then
		penBackFillRiser_m = 1
		parameters penBackFillRiser_m = penBackFillRiser_m
	endif
	parameters penBackFillRiser = penBackFillRiser_m
else
	parameters penBackFillRiser_m = penBackFillRiser
endif

! =============================================================================
! Onorm list Settings
! =============================================================================

if LibraryLangCode = "AUT" or LibraryLangCode = "CHE" or LibraryLangCode = "GER" then
	call "Onorm_Stair" parameters all
else
	hideparameter "gs_onorm_Title", "gs_list_soundinsul"
endif

! =============================================================================
! IFC2x3 Property Set for Stairs
! =============================================================================

HALF_TURN_STAIR = 6
parameters ifc_StairType 		= HALF_TURN_STAIR
parameters ifc_NumberOfRiser 	= nRisers
! unused "firstTreadLevel" and "topTreadLevel" parameters
parameters ifc_NumberOfTreads 	= nRisers
parameters ifc_RiserHeight		= treadHeight
parameters ifc_TreadLength		= treadDepth

]]>
</Script_VL>

<ParamSection SectVersion="26" SectionFlags="0" SubIdent="0">
	<ParamSectHeader>
		<Version>26</Version>
		<AutoHotspots>false</AutoHotspots>
		<StatBits>
			<STBit_UIDefault/>
			<STBit_FixSize/>
			<STBit_UIUseHierarchicalPages/>
		</StatBits>
		<WDLeftFrame>0</WDLeftFrame>
		<WDRightFrame>0</WDRightFrame>
		<WDTopFrame>0</WDTopFrame>
		<WDBotFrame>0</WDBotFrame>
		<LayFlags>65534</LayFlags>
		<WDMirrorThickness>0</WDMirrorThickness>
		<WDWallInset>0</WDWallInset>
		<SymbolColor>0</SymbolColor>
	</ParamSectHeader>
	<Parameters>
		<Length Name="A">
			<Description><![CDATA["Общая Ширина"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Unique/>
			</Flags>
			<Value>3.6</Value>
		</Length>
		<Length Name="B">
			<Description><![CDATA["Общая Глубина"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Unique/>
			</Flags>
			<Value>2.6</Value>
		</Length>
		<Length Name="zzyzx">
			<Description><![CDATA["Общая Высота"]]></Description>
			<Fix/>
			<Value>3.1</Value>
		</Length>
		<Integer Name="gs_detlevel_3D_m">
			<Description><![CDATA["3D"]]></Description>
			<Value>2</Value>
		</Integer>
		<String Name="parameterType">
			<Description><![CDATA["Тип Параметра"]]></Description>
			<Flags>
				<ParFlg_Unique/>
			</Flags>
			<Value><![CDATA["Высота Ступени"]]></Value>
		</String>
		<Length Name="flightWidth">
			<Description><![CDATA["Ширина Марша"]]></Description>
			<Value>1.2</Value>
		</Length>
		<Length Name="flightWidthOffset">
			<Description><![CDATA["Смещение Маршей"]]></Description>
			<Flags>
				<ParFlg_Unique/>
			</Flags>
			<Value>0.2</Value>
		</Length>

		<!-- gs_tread: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_tread">
			<Description><![CDATA["Размеры Подступенков и Проступей"]]></Description>
		</Title>
		<Integer Name="nRisers">
			<Description><![CDATA["Количество Подступенков"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>18</Value>
		</Integer>
		<Integer Name="nRisers1stRun">
			<Description><![CDATA["Количество Подступенков в 1 Марше"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>9</Value>
		</Integer>
		<Integer Name="nRisers2ndRun">
			<Description><![CDATA["Количество Подступенков во 2 Марше"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>9</Value>
		</Integer>
		<Length Name="preferredTreadHeight">
			<Description><![CDATA["Предпочтительная Высота Ступени"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0.172222222222</Value>
		</Length>
		<Length Name="treadHeight">
			<Description><![CDATA["Реальная Высота Ступени"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0.172222222222</Value>
		</Length>
		<Length Name="treadDepth">
			<Description><![CDATA["Глубина Ступени"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0.266666666667</Value>
		</Length>
		<Length Name="thd">
			<Description><![CDATA["Две Высоты Подступенка + Проступь"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0.611111111111</Value>
		</Length>
		<Length Name="treadThickness">
			<Description><![CDATA["Толщина Подступенка (0-Нет)"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Length Name="nosing">
			<Description><![CDATA["Выступ"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0.02</Value>
		</Length>
		<Boolean Name="bRiserCover">
			<Description><![CDATA["Защитный Слой Подступенка"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Length Name="riserCoverThk">
			<Description><![CDATA["Толщина Защитного Слоя Подступенка"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0.03</Value>
		</Length>

		<!-- _sp7: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="_sp7">
			<Description><![CDATA["Плита Лестницы и Площадки"]]></Description>
		</Title>
		<String Name="stairBaseType">
			<Description><![CDATA["Тип Основания Лестницы"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value><![CDATA["Бетон"]]></Value>
		</String>
		<Integer Name="stairBaseType_m">
			<Description><![CDATA["Тип Основания Лестницы"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Length Name="stairSlabThk">
			<Description><![CDATA["Толщина Плиты Лестницы"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0.21</Value>
		</Length>
		<Length Name="woodBaseOffset">
			<Description><![CDATA["Смещение Деревянного Основания"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0.15</Value>
		</Length>
		<String Name="topJunctionType">
			<Description><![CDATA["Тип Стыка Вверху"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<Length Name="topLandingThk">
			<Description><![CDATA["Толщина Верхней Площадки"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.15</Value>
		</Length>
		<Length Name="lowerLandingThk">
			<Description><![CDATA["Толщина Нижней Площадки"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.2</Value>
		</Length>
		<Integer Name="rail_m">
			<Description><![CDATA["Ограждение"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>

		<!-- bRightRail: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Boolean Name="bRightRail">
			<Description><![CDATA["Ограждение Справа"]]></Description>
			<Flags>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<String Name="rightRailType">
			<Description><![CDATA["Тип Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Балюстрада Ограждения"]]></Value>
		</String>
		<Integer Name="rightRailType_m">
			<Description><![CDATA["Ограждение Справа"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<String Name="ggr">
			<Description><![CDATA["Конструктивные Размеры"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<Length Name="rightRailHeight">
			<Description><![CDATA["Высота Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.8</Value>
		</Length>
		<Length Name="rightRailDist">
			<Description><![CDATA["Расстояние от Лестницы"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.1</Value>
		</Length>
		<Length Name="rightRailOffset">
			<Description><![CDATA["Смещение Правого Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="rightRailOvhgBottom">
			<Description><![CDATA["Выступ Ограждения Внизу"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="rightRailOvhgTop">
			<Description><![CDATA["Выступ Ограждения Вверху"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<String Name="sgr">
			<Description><![CDATA["Размеры Элементов Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<Length Name="rightRailPostSize">
			<Description><![CDATA["Размер Стоек"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.06</Value>
		</Length>
		<Length Name="rightRailFrameThk">
			<Description><![CDATA["Толщина Рамы"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.04</Value>
		</Length>
		<Length Name="rightRailBarThk">
			<Description><![CDATA["Толщина Брусков"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Length Name="rightRailBarDepth">
			<Description><![CDATA["Глубина Брусков"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.02</Value>
		</Length>
		<String Name="rightWireType">
			<Description><![CDATA["Тип Леера"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA["Прямоугольные"]]></Value>
		</String>
		<Integer Name="nBarsRightRail">
			<Description><![CDATA["Количество Брусков"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>4</Value>
		</Integer>
		<Length Name="rightRailWireDiam">
			<Description><![CDATA["Диаметр Леера"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.005</Value>
		</Length>
		<Length Name="rightRailWireThk">
			<Description><![CDATA["Толщина Леера"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.005</Value>
		</Length>
		<Length Name="rightRailWireDepth">
			<Description><![CDATA["Глубина Леера"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.005</Value>
		</Length>

		<!-- bLeftRail: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Boolean Name="bLeftRail">
			<Description><![CDATA["Ограждение Слева"]]></Description>
			<Flags>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<String Name="leftRailType">
			<Description><![CDATA["Тип Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Как и Правое"]]></Value>
		</String>
		<Integer Name="leftRailType_m">
			<Description><![CDATA["Ограждение Слева"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>11</Value>
		</Integer>
		<Boolean Name="bSameRails">
			<Description><![CDATA["Как и Правое Ограждение"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<String Name="ggl">
			<Description><![CDATA["Конструктивные Размеры"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<Length Name="leftRailHeight">
			<Description><![CDATA["Высота Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.8</Value>
		</Length>
		<Length Name="leftRailDist">
			<Description><![CDATA["Расстояние от Перекрытия/Лестницы"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.1</Value>
		</Length>
		<Length Name="leftRailOffset">
			<Description><![CDATA["Смещение Левого Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="leftRailOvhgBottom">
			<Description><![CDATA["Выступ Ограждения Внизу"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="leftRailOvhgTop">
			<Description><![CDATA["Выступ Ограждения Вверху"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<String Name="sgl">
			<Description><![CDATA["Размеры Элементов Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<Length Name="leftRailPostSize">
			<Description><![CDATA["Размер Стоек"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.06</Value>
		</Length>
		<Length Name="leftRailFrameThk">
			<Description><![CDATA["Толщина Рамы/Бруска"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.04</Value>
		</Length>
		<Length Name="leftRailBarThk">
			<Description><![CDATA["Толщина Брусков"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Length Name="leftRailBarDepth">
			<Description><![CDATA["Глубина Брусков"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.02</Value>
		</Length>
		<String Name="leftWireType">
			<Description><![CDATA["Тип Леера"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA["Прямоугольные"]]></Value>
		</String>
		<Integer Name="nBarsLeftRail">
			<Description><![CDATA["Количество Брусков"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>4</Value>
		</Integer>
		<Length Name="leftRailWireDiam">
			<Description><![CDATA["Диаметр Леера"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.005</Value>
		</Length>
		<Length Name="leftRailWireThk">
			<Description><![CDATA["Толщина Леера"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.005</Value>
		</Length>
		<Length Name="leftRailWireDepth">
			<Description><![CDATA["Глубина Леера"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.005</Value>
		</Length>

		<!-- gs_3D_representation: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_3D_representation">
			<Description><![CDATA["3D-отображение"]]></Description>
		</Title>
		<Boolean Name="gs_shadow">
			<Description><![CDATA["Отбрасывание Теней"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>

		<!-- gs_2D_representation: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_2D_representation">
			<Description><![CDATA["2D-отображение"]]></Description>
			<Fix/>
		</Title>
		<Integer Name="gs_detlevel_2D_m">
			<Description><![CDATA["2D-детализация"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Integer Name="iScaleChangeSM">
			<Description><![CDATA["Простой/Средний Масштаб изменяется в"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>999</Value>
		</Integer>
		<Integer Name="gs_ScaleChangeSM">
			<Description><![CDATA["Простой/Средний Масштаб изменяется в"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>100</Value>
		</Integer>
		<Integer Name="iScaleChangeMD">
			<Description><![CDATA["Средний/Детальный Масштаб изменяется в"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>999</Value>
		</Integer>
		<Integer Name="gs_ScaleChangeMD">
			<Description><![CDATA["Средний/Детальный Масштаб изменяется в"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>50</Value>
		</Integer>

		<!-- Symbol2D: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="Symbol2D">
			<Description><![CDATA["2D-символ"]]></Description>
		</Title>
		<Integer Name="gs_SymbolType_m">
			<Description><![CDATA["Тип 2D-символа"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>11</Value>
		</Integer>
		<Integer Name="iSymbolGroup">
			<Description><![CDATA["Тип Группы Символа"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>6</Value>
		</Integer>
		<PenColor Name="gs_cont_pen">
			<Description><![CDATA["Перо Линий Видимых Конструкций"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>91</Value>
		</PenColor>
		<PenColor Name="gs_DashLinePen">
			<Description><![CDATA["Перо Линий Невидимых Конструкций"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>91</Value>
		</PenColor>
		<LineType Name="solid_line">
			<Description><![CDATA["Тип Линий Видимых Конструкций"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</LineType>
		<LineType Name="dash_line">
			<Description><![CDATA["Тип Линий Невидимых Конструкций"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>4</Value>
		</LineType>
		<Boolean Name="bShowRailOnFloorPlan">
			<Description><![CDATA["Показать Ограждение на Плане"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<LineType Name="railLineType">
			<Description><![CDATA["Тип Линии Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</LineType>
		<PenColor Name="railPen">
			<Description><![CDATA["Перо Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>82</Value>
		</PenColor>
		<Boolean Name="bShowRailAxis">
			<Description><![CDATA["Показать Ось Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<LineType Name="railAxisLineType">
			<Description><![CDATA["Тип Линии Оси Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>6</Value>
		</LineType>
		<PenColor Name="gs_RailAxisPen">
			<Description><![CDATA["Перо Линии Оси Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>71</Value>
		</PenColor>
		<Boolean Name="bSymbolic2D">
			<Description><![CDATA["Символический 2D"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<String Name="postSymbolType">
			<Description><![CDATA["Тип Символа Стойки"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Тип 1"]]></Value>
		</String>
		<Integer Name="iPostSymbolType">
			<Description><![CDATA["Тип Символа Стойки"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<LineType Name="postLineType">
			<Description><![CDATA["Тип Линии Стойки"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</LineType>
		<PenColor Name="postPen">
			<Description><![CDATA["Перо Линии Стойки"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>23</Value>
		</PenColor>
		<Boolean Name="bShowRailAboveBreakLine">
			<Description><![CDATA["Показать Ограждение выше Линии Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="bShowCarriage">
			<Description><![CDATA["Показать Тетиву на Плане Этажа"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<String Name="stShowCarriageUpTo">
			<Description><![CDATA["Показать Тетиву"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["До 1:50"]]></Value>
		</String>
		<Integer Name="iShowCarriageUpTo">
			<Description><![CDATA["Показать Тетиву"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>50</Value>
		</Integer>
		<LineType Name="carriageLineType">
			<Description><![CDATA["Линия Невидимой Тетивы"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</LineType>
		<PenColor Name="carriagePen">
			<Description><![CDATA["Перо Невидимой Тетивы"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>23</Value>
		</PenColor>
		<FillPattern Name="gs_fill_type">
			<Description><![CDATA["Штриховка Фона"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>65</Value>
		</FillPattern>
		<PenColor Name="gs_fill_pen">
			<Description><![CDATA["Перо Штриховки"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>19</Value>
		</PenColor>
		<PenColor Name="gs_back_pen">
			<Description><![CDATA["Перо Фона Штриховки"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>19</Value>
		</PenColor>
		<Boolean Name="gs_FillAbove">
			<Description><![CDATA["Штриховка Выше Линии Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<String Name="breakline_style">
			<Description><![CDATA["Стиль Линии Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA["Прямой"]]></Value>
		</String>
		<Boolean Name="bSimpleZigZag">
			<Description><![CDATA["Линия Разрыва в виде Простого Зигзага"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Length Name="gs_BreakHeight">
			<Description><![CDATA["Расположение Линии Разрыва (Высота)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Length>
		<Length Name="breakLineWidth">
			<Description><![CDATA["Ширина Линии Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.2</Value>
		</Length>
		<String Name="lineTypeAboveBreak">
			<Description><![CDATA["Тип Линии выше Линии Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
				<ParFlg_Hidden/>
			</Flags>
			<Value><![CDATA["Штриховая"]]></Value>
		</String>
		<Boolean Name="bShowWalkLine">
			<Description><![CDATA["Показать Линию Всхода"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="bShowWalkLineAboveBreakline">
			<Description><![CDATA["Линия Всхода выше Линии Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<LineType Name="gs_wLineType1">
			<Description><![CDATA["Тип Видимой Линии"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</LineType>
		<LineType Name="gs_wLineType2">
			<Description><![CDATA["Тип Линии"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>6</Value>
		</LineType>
		<LineType Name="gs_wLineTypeAbove">
			<Description><![CDATA["Тип Невидимой Линии"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>6</Value>
		</LineType>
		<PenColor Name="gs_wLinePen">
			<Description><![CDATA["Перо Линии"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>71</Value>
		</PenColor>
		<String Name="arrow_style">
			<Description><![CDATA["Стиль Стрелки"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA["Стиль 3"]]></Value>
		</String>
		<FillPattern Name="gs_ArrowFill">
			<Description><![CDATA["Тип Штриховки Стрелки"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>64</Value>
		</FillPattern>
		<PenColor Name="gs_ArrowFillPen">
			<Description><![CDATA["Перо Штриховки (0 - нет)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>91</Value>
		</PenColor>
		<PenColor Name="gs_ArrowFillPenAbove">
			<Description><![CDATA["Перо Штриховки Выше (0 - Нет)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</PenColor>
		<Length Name="gs_ArrowHeight">
			<Description><![CDATA["Высота Стрелки"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.25</Value>
		</Length>
		<Length Name="gs_ArrowHalfWidth">
			<Description><![CDATA["Половина Ширины Стрелки"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.2</Value>
		</Length>
		<String Name="gs_StartEndStyle">
			<Description><![CDATA["Символ в Начале"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA["Стиль 1"]]></Value>
		</String>
		<Integer Name="gs_StartEndStyle_m">
			<Description><![CDATA["Символ в Начале"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<FillPattern Name="gs_StartEndFill">
			<Description><![CDATA["Тип Штриховки Символа"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>64</Value>
		</FillPattern>
		<PenColor Name="gs_StartEndFillPen">
			<Description><![CDATA["Перо Штриховки (0 - нет)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</PenColor>
		<Length Name="gs_CircleRadius">
			<Description><![CDATA["Радиус Окружности"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.1</Value>
		</Length>
		<Length Name="gs_StartWidth">
			<Description><![CDATA["Половина Ширины Символа"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Length Name="gs_StartHeight">
			<Description><![CDATA["Половина Высоты Символа"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.15</Value>
		</Length>
		<Boolean Name="bShowNumbering">
			<Description><![CDATA["Показать Нумерацию"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Integer Name="nStartNumbering">
			<Description><![CDATA["Начать Нумерацию с"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<RealNum Name="gs_NumTextSize">
			<Description><![CDATA["Размер Шрифта (мм)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</RealNum>
		<RealNum Name="gs_text_size_pt_num">
			<Description><![CDATA["Размер Шрифта (пт)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>2.83</Value>
		</RealNum>
		<PenColor Name="gs_NumTextPen">
			<Description><![CDATA["Перо Текста"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>86</Value>
		</PenColor>
		<Length Name="DirNumText_X">
			<Description><![CDATA["Расположение Нумерации по X"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.1</Value>
		</Length>
		<Length Name="DirNumText_Y">
			<Description><![CDATA["Расположение Нумерации по Y"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<String Name="typeTextRotation_Num">
			<Description><![CDATA["Ориентация Текста в Символе"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Выровнять по Символу"]]></Value>
		</String>
		<Integer Name="typeTextRotation_Num_m">
			<Description><![CDATA["Ориентация Текста в Символе"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Integer>
		<Boolean Name="bShowRiseAndRunText">
			<Description><![CDATA["Текст Подступенков и Проступей"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<String Name="gs_RiseRunText">
			<Description><![CDATA["Текст"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Кол-во x Подступенок = Высота Марша"]]></Value>
		</String>
		<Integer Name="iRiseRunText">
			<Description><![CDATA["Текст"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<String Name="gs_CustomText1">
			<Description><![CDATA["Специальный Текст_1"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Специальный Текст_1"]]></Value>
		</String>
		<String Name="gs_CustomText2">
			<Description><![CDATA["Специальный Текст_2"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Специальный Текст_2"]]></Value>
		</String>
		<String Name="gs_customText_rise">
			<Description><![CDATA["Текст Подступенка"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["П"]]></Value>
		</String>
		<RealNum Name="fontsize">
			<Description><![CDATA["Размер Шрифта (мм)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</RealNum>
		<RealNum Name="gs_text_size_pt">
			<Description><![CDATA["Размер Шрифта (пт)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>2.83</Value>
		</RealNum>
		<PenColor Name="gs_text_pen">
			<Description><![CDATA["Перо Шрифта"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>86</Value>
		</PenColor>
		<Boolean Name="bUseACLinearUnit">
			<Description><![CDATA["Единицы Измерения Рабочей Среды Проекта"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Length Name="DirRiseRunText_X">
			<Description><![CDATA["Текст Подступенков и Проступей по X"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="DirRiseRunText_Y">
			<Description><![CDATA["Текст Подступенков и Проступей по Y"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.8</Value>
		</Length>
		<Angle Name="DirRiseRunAngle">
			<Description><![CDATA["Угол Поворота Текста Подступенков и Проступей"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Angle>
		<String Name="typeTextRotation_RiseRun">
			<Description><![CDATA["Ориентация Текста в Символе"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Читаемый"]]></Value>
		</String>
		<Integer Name="typeTextRotation_RiseRun_m">
			<Description><![CDATA["Ориентация Текста в Символе"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>2</Value>
		</Integer>
		<String Name="walkingDirUPDN">
			<Description><![CDATA["Размер Текста ВВЕРХ/ВНИЗ"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA["Нет"]]></Value>
		</String>
		<Integer Name="walkingDirUPDN_m">
			<Description><![CDATA["Размер Текста ВВЕРХ/ВНИЗ"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<String Name="gs_CustomText_Down">
			<Description><![CDATA["Текст Спуска"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["ВНИЗ"]]></Value>
		</String>
		<RealNum Name="UPDNfontsize">
			<Description><![CDATA["Размер Текста ВВЕРХ/ВНИЗ (мм)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>2</Value>
		</RealNum>
		<RealNum Name="gs_text_size_pt_UpDn">
			<Description><![CDATA["Размер Текста ВВЕРХ/ВНИЗ (точки)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>5.66</Value>
		</RealNum>
		<PenColor Name="UPDNfontpen">
			<Description><![CDATA["Текст ВВЕРХ/ВНИЗ"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>86</Value>
		</PenColor>
		<Length Name="DirUPDN_X">
			<Description><![CDATA["Горизонтальное Смещение Текста"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="DirUPDN_Y">
			<Description><![CDATA["Вертикальное Смещение Текста"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>-0.25</Value>
		</Length>
		<Angle Name="AngUPDN">
			<Description><![CDATA["Угол Текста ВВЕРХ/ВНИЗ"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Angle>
		<Length Name="DirUPDN_X_top">
			<Description><![CDATA["Горизонтальное Смещение Текста"]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="DirUPDN_Y_top">
			<Description><![CDATA["Вертикальное Смещение Текста"]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>-0.25</Value>
		</Length>
		<Angle Name="AngUPDN_top">
			<Description><![CDATA["Угол Текста ВВЕРХ/ВНИЗ"]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Angle>
		<String Name="typeTextRotation_UpDn">
			<Description><![CDATA["Ориентация Текста в Символе"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Выровнять по Символу"]]></Value>
		</String>
		<Integer Name="typeTextRotation_UpDn_m">
			<Description><![CDATA["Ориентация Текста в Символе"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Integer>
		<String Name="gs_description">
			<Description><![CDATA["Описание"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<RealNum Name="gs_desc_text_size">
			<Description><![CDATA["Размер Шрифта (мм)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</RealNum>
		<RealNum Name="gs_desc_text_size_pt">
			<Description><![CDATA["Размер Шрифта (пт)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>2.83</Value>
		</RealNum>
		<PenColor Name="gs_desc_text_pen">
			<Description><![CDATA["Перо Текста"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>23</Value>
		</PenColor>
		<String Name="fontType">
			<Description><![CDATA["Тип Шрифта"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA["Arial"]]></Value>
		</String>
		<Boolean Name="bStorySensitive">
			<Description><![CDATA["Зависит от Этажа"]]></Description>
			<Flags>
				<ParFlg_BoldName/>
			</Flags>
			<Value>0</Value>
		</Boolean>

		<!-- gs_AboveHomeStory: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_AboveHomeStory">
			<Description><![CDATA["2D выше Собственного Этажа"]]></Description>
		</Title>
		<Boolean Name="gs_BreaklineStUp">
			<Description><![CDATA["Линия Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="gs_LowerPartStUp">
			<Description><![CDATA["Нижняя Часть"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="gs_UpperPartStUp">
			<Description><![CDATA["Верхняя Часть"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="gs_TreadStUp">
			<Description><![CDATA["Показать Проступи"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<LineType Name="gs_LineTypeStUp">
			<Description><![CDATA["Тип Линии"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</LineType>
		<PenColor Name="gs_LinePenStUp">
			<Description><![CDATA["Перо Линии"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>71</Value>
		</PenColor>
		<LineType Name="gs_wLineTypeStUp">
			<Description><![CDATA["Тип Линии Всхода"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</LineType>
		<Boolean Name="gs_numaStUp">
			<Description><![CDATA["Показать Нумерацию"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="gs_txStUp">
			<Description><![CDATA["Текст Подступенков и Проступей"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Boolean>

		<!-- gs_section_attributes: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_section_attributes">
			<Description><![CDATA["Реквизиты Сечения"]]></Description>
		</Title>
		<PenColor Name="penLineStringer">
			<Description><![CDATA["Перо Контура Сечения Конструкций"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>29</Value>
		</PenColor>
		<Integer Name="penLineStringer_m">
			<Description><![CDATA["Перо Контура Сечения Конструкций"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>29</Value>
		</Integer>
		<FillPattern Name="typeFillStringer">
			<Description><![CDATA["Штриховка Сечения Конструкций"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>24</Value>
		</FillPattern>
		<PenColor Name="penFillStringer">
			<Description><![CDATA["Перо Штриховки Сечения Конструкций"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>109</Value>
		</PenColor>
		<Integer Name="penFillStringer_m">
			<Description><![CDATA["Перо Штриховки Сечения Конструкций"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>109</Value>
		</Integer>
		<PenColor Name="penBackFillStringer">
			<Description><![CDATA["Перо Фона Штриховки Сечения Конструкций"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</PenColor>
		<Integer Name="penBackFillStringer_m">
			<Description><![CDATA["Перо Фона Штриховки Сечения Конструкций"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Integer>
		<PenColor Name="penLineTread">
			<Description><![CDATA["Перо Контура Сечения Проступи"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1</Value>
		</PenColor>
		<Integer Name="penLineTread_m">
			<Description><![CDATA["Перо Контура Сечения Проступи"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<FillPattern Name="typeFillTread">
			<Description><![CDATA["Штриховка Сечения Проступи"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>23</Value>
		</FillPattern>
		<PenColor Name="penFillTread">
			<Description><![CDATA["Перо Штриховки Сечения Проступи"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>109</Value>
		</PenColor>
		<Integer Name="penFillTread_m">
			<Description><![CDATA["Перо Штриховки Сечения Проступи"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>109</Value>
		</Integer>
		<PenColor Name="penBackFillTread">
			<Description><![CDATA["Перо Фона Штриховки Сечения Проступи"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>-1</Value>
		</PenColor>
		<Integer Name="penBackFillTread_m">
			<Description><![CDATA["Перо Фона Штриховки Сечения Проступи"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>-1</Value>
		</Integer>
		<PenColor Name="penLineRiser">
			<Description><![CDATA["Перо Контура Сечения Подступенка"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1</Value>
		</PenColor>
		<Integer Name="penLineRiser_m">
			<Description><![CDATA["Перо Контура Сечения Подступенка"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<FillPattern Name="typeFillRiser">
			<Description><![CDATA["Штриховка Сечения Подступенка"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>23</Value>
		</FillPattern>
		<PenColor Name="penFillRiser">
			<Description><![CDATA["Перо Штриховки Сечения Подступенка"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>109</Value>
		</PenColor>
		<Integer Name="penFillRiser_m">
			<Description><![CDATA["Перо Штриховки Сечения Подступенка"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>109</Value>
		</Integer>
		<PenColor Name="penBackFillRiser">
			<Description><![CDATA["Перо Фона Штриховки Сечения Подступенка"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>-1</Value>
		</PenColor>
		<Integer Name="penBackFillRiser_m">
			<Description><![CDATA["Перо Фона Штриховки Сечения Подступенка"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>-1</Value>
		</Integer>

		<!-- gs_material: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_material">
			<Description><![CDATA["Покрытия"]]></Description>
		</Title>
		<Material Name="matBase">
			<Description><![CDATA["Основание Лестницы"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>4</Value>
		</Material>
		<Material Name="matTread">
			<Description><![CDATA["Проступь"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>14</Value>
		</Material>
		<Material Name="matRiser">
			<Description><![CDATA["Подступенок"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>14</Value>
		</Material>
		<Material Name="matPost">
			<Description><![CDATA["Стойка"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>59</Value>
		</Material>
		<Material Name="matHandrail">
			<Description><![CDATA["Поручень"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>59</Value>
		</Material>
		<Material Name="matSurface">
			<Description><![CDATA["Панели Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>14</Value>
		</Material>
		<Material Name="matBar">
			<Description><![CDATA["Прутья"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>59</Value>
		</Material>
		<Boolean Name="AC_show2DHotspotsIn3D">
			<Description><![CDATA["Показ Узловых 2D Точек в 3D"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Length Name="ac_bottomlevel">
			<Description><![CDATA["Отметка Низа"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Length>
		<Length Name="ac_toplevel">
			<Description><![CDATA["Отметка Верха"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Integer Name="parameterType_m">
			<Description><![CDATA["Определение Размера"]]></Description>
			<Flags>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Integer Name="lineTypeAboveBreak_m">
			<Description><![CDATA["Тип Линии выше Линии Разрыва"]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Integer Name="arrow_style_m">
			<Description><![CDATA["Стиль Стрелки"]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>3</Value>
		</Integer>
		<Integer Name="breakline_style_m">
			<Description><![CDATA["Стиль Линии Разрыва"]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Integer Name="rightWireType_m">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Integer Name="leftWireType_m">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Integer Name="gs_ui_current_page">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Angle Name="gs_readable_angle">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>90</Value>
		</Angle>
		<RealNum Name="gs_description_pos">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<ArrayValues FirstDimension="1" SecondDimension="3">
				<AVal Column="1" Row="1">0</AVal>
				<AVal Column="2" Row="1">0</AVal>
				<AVal Column="3" Row="1">0</AVal>
			</ArrayValues>
		</RealNum>

		<!-- gs_list: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_list">
			<Description><![CDATA["Параметры Спецификаций"]]></Description>
			<Fix/>
		</Title>
		<RealNum Name="gs_list_cost">
			<Description><![CDATA["Цена"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<String Name="gs_list_manufacturer">
			<Description><![CDATA["Производитель"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_note">
			<Description><![CDATA["Примечания"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_location">
			<Description><![CDATA["Расположение"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_accessories">
			<Description><![CDATA["Аксессуары"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_soundinsul">
			<Description><![CDATA["Звукоизоляция"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="FM_Type">
			<Description><![CDATA["Тип Группы"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Лестницы"]]></Value>
		</String>
		<Integer Name="iFMType">
			<Description><![CDATA["Тип Группы"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>6</Value>
		</Integer>
		<String Name="FM_InventoryNumber">
			<Description><![CDATA["Инвентарный Номер"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="FM_SerialNumber">
			<Description><![CDATA["Серийный Номер"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="FM_ProductionYear">
			<Description><![CDATA["Год Производства"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<RealNum Name="FM_ObjectWeight">
			<Description><![CDATA["Вес Изделия"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<String Name="FM_ObjectWeightUnit">
			<Description><![CDATA["Единица Веса"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["кг"]]></Value>
		</String>
		<RealNum Name="FM_Stories">
			<Description><![CDATA["Количество Этажей"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<RealNum Name="FM_HalfLandings">
			<Description><![CDATA["Количество Промежуточных Площадок"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<RealNum Name="FM_LevelHeight">
			<Description><![CDATA["Высота Уровней"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<RealNum Name="FM_HeadRoom">
			<Description><![CDATA["Высота Помещения"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<String Name="FM_BearingStructure">
			<Description><![CDATA["Несущая Конструкция"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<RealNum Name="FM_BearingCapacity">
			<Description><![CDATA["Несущая Способность"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<Boolean Name="FM_SmokeFree">
			<Description><![CDATA["Незадымляемая Лестница"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<RealNum Name="FM_StepsLength">
			<Description><![CDATA["Длина Проступей"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<String Name="FM_MaterialFootstep">
			<Description><![CDATA["Покрытие Проступей"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="FM_MaterialStairRailing">
			<Description><![CDATA["Покрытие Ограждения Лестницы"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="FM_MaterialHandhold">
			<Description><![CDATA["Покрытие Поручней"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_custom1">
			<Description><![CDATA["Пользовательское Значение 1"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_custom2">
			<Description><![CDATA["Пользовательское Значение 2"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_custom3">
			<Description><![CDATA["Пользовательское Значение 3"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_custom4">
			<Description><![CDATA["Пользовательское Значение 4"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_custom5">
			<Description><![CDATA["Пользовательское Значение 5"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>

		<!-- gs_onorm_Title: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_onorm_Title">
			<Description><![CDATA["Дополнительные Параметры Спецификаций"]]></Description>
			<Fix/>
		</Title>
		<String Name="gs_onorm_treadnumber">
			<Description><![CDATA["Количество Ступеней"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_treadriser">
			<Description><![CDATA["Глубина Проступи / Высота Подступенка"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_person">
			<Description><![CDATA["Количество Людей"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_bardist_auto">
			<Description><![CDATA["Значение Чистой Ширины между Прутьями Ограждения"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_bardist">
			<Description><![CDATA["Чистая Ширина между Прутьями Ограждения"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_botlevheight_auto">
			<Description><![CDATA["Значение Отметки Нижнего Уровня"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_botlevheight">
			<Description><![CDATA["Отметка Нижнего Уровня"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_toplevheight_auto">
			<Description><![CDATA["Значение Отметки Верхнего Уровня"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_toplevheight">
			<Description><![CDATA["Отметка Верхнего Уровня"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_construction">
			<Description><![CDATA["Конструкция"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_soundinsul">
			<Description><![CDATA["Звукоизоляция"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_mat1">
			<Description><![CDATA["Дополнительный Материал 1"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_finish1_value">
			<Description><![CDATA["Значение Отделки 1"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_finish1">
			<Description><![CDATA["Отделка 1"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_customtext1">
			<Description><![CDATA["Дополнительная Информация 1"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_customtext2">
			<Description><![CDATA["Дополнительная Информация 2"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_aks">
			<Description><![CDATA["Номер AKS"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_product">
			<Description><![CDATA["Продукт"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_leistungbuch">
			<Description><![CDATA["Коллекция ID Спецификаций"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_description">
			<Description><![CDATA["Дополнительное Описание"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_number">
			<Description><![CDATA["Дополнительный Номер"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_id">
			<Description><![CDATA["Номер ID"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_admission">
			<Description><![CDATA["Дата Приема"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_modification">
			<Description><![CDATA["Дата Изменения"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_tozonenumber">
			<Description><![CDATA["Номер Зоны"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>

		<!-- ifc_Title: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="ifc_Title">
			<Description><![CDATA["IFC2x3 Набор Свойств для Лестниц"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
		</Title>
		<Integer Name="ifc_StairType">
			<Description><![CDATA["Тип Лестницы"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0</Value>
		</Integer>
		<Integer Name="ifc_NumberOfRiser">
			<Description><![CDATA["Количество Подступенков"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0</Value>
		</Integer>
		<Integer Name="ifc_NumberOfTreads">
			<Description><![CDATA["Количество Проступей"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0</Value>
		</Integer>
		<Length Name="ifc_RiserHeight">
			<Description><![CDATA["Высота Подступенка"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="ifc_TreadLength">
			<Description><![CDATA["Длина Проступи"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0</Value>
		</Length>
		<String Name="LibraryLangCode">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value><![CDATA["RUS"]]></Value>
		</String>
	</Parameters>
</ParamSection>

<Picture MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="0" length_in_bytes="5031" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D49484452000000800000
	00800803000000F4E091F900000102504C5445FEFEFEFEFCEBFEFBDCBBA37CBB
	9B73A39374CBB493D3B38B8A6C42937B5A8B7352C2AB8B9B8C73ECDCC4EAE2C3
	C39C6AAB8C63DBBB92E4CBAABBA384847B63AB9B6B92744ABBB293A3A3A37A6B
	44CCC3A2E4E4E4C3BBA3B3925CFDEAC27B6B53938263FCECD4E3C49B4C4C4CB3
	946BDCC4A3D3B37CDBC29CAB9B84C4A36C6A625BC4AB93D1AB74B38D5AFDDAAC
	937B62826C536363638C826BF2ECE47B7153F4E2BBEDF3F36A5B52BBAB9A8273
	4B9B927B7C724AD4BAA4B48E6382633AB29C847373735B5B5BA27C439B9B9B63
	554BC29B739B9483AC915CC3A373FDF3CBCBB38BAA834B53524BA3845BEADCBC
	DBD3C2D2D3D39C835C7C6C63BCA26B6C614CAAA29212CF955600001256494441
	54785EC55BD57223C192EDAA6666163233338319E7FF7F65B3DBDE991BF769C7
	6379536A8DF530714E9D3C9559911522FE4F31FACFBF51166344FC748CFE7091
	E97A8B4011A99FA181FE9B495DD0E54F46E8C7D70FB8A376DB90FB9102FF3F11
	129D8E2EA3EC6F423F4F80E39706FA516814C5EF7C8702CF3764FC9302F49F8B
	E11FBF215EE32839FB9302B856319B0506E10700D7510D5A866F2824463FC103
	79962B23F47B57F2FCB2D54EC0F79F3202B63A460A21348AE14640A0D9EA8801
	11FBE227A2EF77168F18FDDEF93CA7B684449045103F22017EE51C2A4580021F
	1270ED654B48B90150FB911C8428BDF2CD72ACC0670AD4D6340CF68F715A7E20
	D03BE718B7CA0718D06803016EE8EEDD2CEAFF481F40BEF3306402E57FF71CDF
	59B6D2A92070E5FE0FB5C3F43479C3CE1484211FF0D5170AADB65C948300A3F0
	4708F8D3B7A11E3018876834C2C41C08F0591707C27396087F220583A93DD465
	134C17979E41AF30E465437103138F7E42023C58D92926EBCE948F9D3018502D
	5E4EE080F15CF9474C389FD2D9851CF4022516DC1A90A94E2B910A5CDC53F08F
	2830A7B20939E1BA4F714798C529785418E5661EA47E42815AA4403FF1A40438
	DA0909EBA5EC0C21050A7E278BE8EAF8048E5290C82614D40BA2D2130CE6F674
	B8C8BA8FD81E9A7D84AEBF0BE61101CF48D9760A0E0609616ECF15A803846CE2
	F780807284AE4C800702725D418299C044D11E9045E1A6282F9E10A94CF73222
	E4EB2A807B532D5B97EBC68D7D5368D9FEA0373899B3407E9289D38DA0B821BA
	B207508FA364435E1837E7965F74A683975E6D3090C097D90A9A13891013D9EB
	966273601B0B43CFE5CE6F7EA155A5CD4DEFDD7D4F25E4FE24DBC309132408AF
	9A8260CA51548BBCBC25C99D5A2A254EDD6DF7C9641672BF824FC8DC3C5ED985
	C89DFA0FFC6DA1544D562FACD3A2AD6E577A52ECB50C2920B1FBE43E5F330521
	10701CF1A1FC56AD564BACBADAC9DD6E77F384497E884C3CC309E8CBD71400F5
	83414F306D86648AA4699A0F47437A7DAD3CDDE069EE86C612F1FC14CC0C1CF5
	C9EB38218B2AE9F78130208580999926C353F58565CD4C5B29B3F825BB26DC30
	B06FA30A793527EEBBE36E6D003BDF35E1CDEB9441B5DBBDF9DC1E302628E0E1
	80B1DDE8B078AD23B2D7ED8E6B1BF7A430E6643D598A946650746630EF09BD19
	AE1081E22AA1A91068741D0661E86DB7DDB1E44D4446148F2CA7534B43D4995F
	D6FDAFC04564F8F4FCF888DE151C02FC35188C4640006C3F99D06B9115D9A50E
	496825CCF47DED449C8A3322C05E11DB3D055DAD108D36DD6E4D322714753C36
	1ABC0E24342373485B7B34B16DEC3E2BCF78A6984AACD735F04761B7763F735D
	46637555D48CA5BEB48B54776C7959040482307844F6CD4C01AED79A926DDEDF
	B7BDDECCCC30226B252ABAF66216FD71059A8172B909B01B221BBF93CF71D5BA
	023E4638BF7D7FB7E6BD8C26AE698F4ED836B59EBC5A569B2C9DDDE03908891E
	1C0F8388ED35084078F96D179C709226132B412F3491E48D0EDDEE7099696F16
	060A9A61E1C67CEA5FA516F589FE8880FEB7DD589E575958139AB16F455E37D6
	92D621A7F61C054F40E005FD9A5CB12B3E6F37DDCD2691A8786D91D235966D2E
	F5BAE1A5F352A2F2081E2081C22DF988AFC520242CC0DF24BC499BAFD3BA9D63
	613BC8D4213DB6E470F60BA319D89029BBF81AE0FDB8C43D77BBE9F49AD5A91D
	ABEACB5CA9AA72627DBCDDEE13C40C8AD00914B8B4CCE00AF8F8731CE96DD216
	4D1DC526ABB25520505DBD3C8231F6CF845253D02F50801D9AE6358F66DB7CB7
	0B46A02991D5D85B9211264CE5D5DA8BAD9B327343A62A9851944110BB60748D
	F961DC93203A5A9BB1CBA6696626A7A062091C97A17C2383681CDCB86EA01008
	E0AF33BFB4BA1103CB938A95C0344592D58EB966D3B2A45A8FCE200927944061
	988FCB94AB3078CE030370DDDE35995B53BFB04B35C7362696E4D3A75F290931
	0A835D3340D79A6187C47E0B0424AF2E55985B92A5D8255B6A954EDBCDF6F424
	F5230265A5FCE286579C1C017E779F70CD4CF1F672141B6A4EADB636DDDEF617
	71F22AC84DB10A43064544E0EB08104687B3ED7A21D63583BDE8FA5AD4B58CD1
	ABF5AC0A42160D1E280FCB36FEF598953F2BE2E81A3ED43A94C6165AE282AAAF
	99D9CC0CDEAD8D19A2440512C0DC98244AD3B35F6EF60AF061DC12BA5117E679
	8D32D7093A21CDCCE24381A7A97AAA1232A90008E01A2D548A085FC98AFBBC65
	750E1C2DC0FA2795E22C700B86B6E479DA4A675CCC28818DE68F50A2FAD9AB75
	C52DF4C5AE5B491822B5D6B5327957CAA99A46B72D7A20BB4A30C3353C371904
	04AE734AF7BA806F79155A5FEB4B96644B6AB3D530A8B4DF79ECE140010FBC63
	8BD2F16735B8427B8686B0E97ACC5A13C5A5AE4257625943F3D39DB45C84421C
	D0A877D3B3996CA4C05576E22804052477515FB2D016615AD028392C2D4E0E95
	04B2A4C8033524F09A1C9BF01AD7CBA3D17EDBB526A2AE8BFA51BFE4A02FBE64
	7A93A2B52F124F82AC4B440D0F38A11E2B006F74051F7637699E07E7ABA26197
	4992EC99BDD953CD738B68223364B84582CF5BC56F17E08F981654645081AEF0
	8B759D2149E7CD391A0F8EF3E2241FD6141EDC0C8479CB4C7C5E34867FFEF7E8
	5BF0FBD012007FFB2AD195055D9C5CDE5E28E8CB772BC771563CF780E6783E9D
	2A423BE3C9317C084FFF1B2500025E3E92404AD006BDA89BB7CE65776CB10FB6
	EFBF172B26B290359FDE0803DAB43201C611F76C1FE16FBBE5EC83A81B20F06A
	D52774448075F4DD25974B50EF8783CC48FD57F0C074284C31E3E2C1E0F414A2
	3E914DC03FDF650104BB11BA62773159536D5D14758E6D5673973534AAF17368
	BA161A4CA7ADE9D48071BE8DE733695D4C3142A07CD72C0F455A82049657AF8B
	D097C5BADAA8AA39DD93A04405C4D3C6420278C07919328A42E2399A9834E74F
	130A8E0C81BEAB2B0298B5168F475E67F586AAAE72EC7A0CA45C02CDFC1B20D0
	72A6CAED0D9AA1594A1F1A9496D165F43DF0231CEF6F6F6B6DDA6B6AC9B194AE
	2EABBB9CBE1E8FBB9BFDE96938C84DA3143843E611D188C68CCEB222AFCBF8DF
	F147F1C7C793DFA4DB94C1A9475DD3960D2020721DBE6D59995E0FF01DF0C0B0
	5C244CBC2E97738D8BCE1BF2B715A5F81AFF99B0C6DA1AFC77CE5D8EEA7167E8
	FA85CAB4DB9A05E3BBA9336F392FAD7A362BD5277A94A41C10C0DF04FF390F94
	A534B75EEAAC564A5E6CB082DE102FB7B740A12BE101E80F59288B17EA6253C6
	115EBC91ED7F4B298AE123018885C58B9C419EABCE5B53DC19B94BA9CC2EF84E
	7A6B853D613E74CEE4E5D29A9E810050885280BE031EF5D1C73EE82F40018DD7
	45F272BE241B3B83D58B8159797D4D7737C460FA923B97AAF6B9E5DF254D8382
	C6A92DFEDD037D229178CA12FD9881FCBA5EB48F7C8EB473E74BF308263419F7
	24BDA65FC71692EC5BF6EEFC964CB6A6C973A440436FFFBB0700F9F53521A398
	C1D346AE1B2B8A33324299AFEED45D2EE7799E0BF5A97B906CFB32CD39776FE7
	BB9C937C3317473DF2808C10FA5702F971028E5A1072B7D237163CD529FA02E5
	348080A1273C770FA735CF74EDF9D9A9CEDF800178E04C8202548E2F2A38B610
	FACAA0F2131F1FFC76DD4059248F653A5B8C083C76D2B455A748DEA8D71730BF
	A1AA55721A1D10AA4EF27C2EB456776FA621EA7A9402E28BFD7014C6A52F44A8
	7DF07D9F17268B433A5B414546A808F5749BEE30362918FA62AD8B6CF20EC02F
	53DB29DF25C9B764CB3927D786081A74E4AFEF82183E249055F10FFE21D73AF8
	9AD5A7538FE529F962F89D35774BBD3939563C1ABAF892BC23055320A743927C
	39DBADE91D29EAA2C11AFFB40D47F104D67A150F077F997AF4F543A7C3CB6459
	207D8383810979BE9C4B25680A3C752E4DC93939B5A737E55BDB3EE7A676A1BE
	A0744AD780C09719C4F892F4ABEEAF0E4D91A319BF536FF30FB767483D2F1E79
	16AEB372C9D28AE27529C1CFD2196136C545A5FC68DB3E4D510B312E445F6F46
	61F4DE48845BE7562BFE626875ADA31B225FE01FB82547E50AA552A95AAA3AAB
	0595D0161DBA470B74E68619BA2D46D6357FBD16595DE775E5AB0AA0284E9513
	AA30E041954F5140A0AEB33CAB26578EBFD41B709D989C26EF563A9DA82C3A5A
	87F6CD8C413F9A2966C8D859513C6A2A94AC14FEB20021E88F243CD1FDD56AA7
	0E1D43E3C5057B6C3D541D7DA5B26A049FBCBB5DD5E985B4B0E8CEDA675EEA9A
	6817A994CE63AACF1ACB0727A7FC7D0A46F183303A497B2C4DB4628783FE9F2A
	E8906C435F52BC7A28AD766C7395F4CF363D49D769BD5DE728BEC0515AE165C9
	8905B6B0C454F668A8AC535630FAFBDCC70490340B41818A49F12BFE58482D41
	010308B0FE6ED55C35D9A6BFF4D7564C60D2D63BAC2316288E722E7C61557868
	1EF9BA6A0CD9F9ADF25513E29929E1199A09B4F0B2E21A8561C1A0C0840B8EDD
	F12BC84909081CD65205086817FE5260777042D8B13B15D8C1A336583187D979
	51F95B7C14775D2294CC70866737B4D0D379C7395E620516751D08ACFC95FFC0
	3679CDAF48D224CDD0B70E7B2E351BBB929ADBA94D75A7AA6C9303960F778740
	417F5988FB7D42061A524D81F503055B30A68EB3BCA4C805DF5EAC177E67C9FB
	AA0F0A184B8E6E5728EE7266EF2EE76AB2D484D7AEBA2B351A4DE070549B8EDD
	4E3CC7007F25033040D22F5741A432C3764F28739C435D529ADE692F260BDF78
	68AE863E8065971AADD1EBE9C5818A78072FB5DA84CAA83677BB2AE0171AE251
	5C4F9EFE163F1B848890C67D062B2794C192609B2F53E77249090BCD5AACD775
	83A70EC30328D06A6A4BBEA93A009D641FA2CFAA5A2DA9BB26DCF7AB0DA0D0A8
	8B93CA5F2BB0F11284B45FC8EE23EA6148C14B0F52C03D68297FB106029D4347
	7BF0872B105B6DF26AB3990402EC1DDB8C08E4AA4D15A2A10283127B54696AE2
	25FE023F66E9BF8805490E94C913A2918432994C99E7788EC37EB1AEF1477EA7
	2E1B60739505F086BA5C369C12BCAA49F6526A349B509BA377836527BF3C6FBF
	DF7B7F3B0940F3F7179346AE9250D0094B88CEB4759E073CC6AA53EB25BB6B82
	CD57CD5801701A75BCAC2E6FD5BB6A947B552D45F8E003F64801BA172FFF6F19
	4CE7CED0C4EE8DAB601A99B8420B02C7ED349E5D150A4DAEB1DC2D8FEA6AC91D
	0DC06B2ED9237F5775003309B2478B070A97FAA45289E0E3F4FFBD02D3CBB087
	630568F0809011289EDFF12AE7EC0A4D28C05C530578BED100251A2AAF569D6A
	2B52402D7DC48504F40AA0875F1C05F8737238438C12298033C8EF098F1CCFF3
	4B107EB703D901FFC8893E1579806DEE1AA5AAEA5423E1A3E5C3F0EC74DA83FA
	9FDA877FDF0488F9DC562A385018255AFFCD20E39B3E77E19B50E0AA8DDD6EC5
	35A9A34FF9471DEC0EF0CDC878109100B94B7552F1A4DFABFFAA0276EB844D0C
	0A08F8DD7CEFD504215DA72691E03BC0840A1B1F48D8B8E0C6C6830A04E8AC5E
	F7269EF7E1FBF0CBF8285600B9510A7A6860F57AFEE160F974FBA842C261BD90
	7C20C1A96CA9FAB9EB62051A3045AF7BDE22460E47A3F01F1478533284FBE8BA
	446F268D06D6F8FE90DE1ED29D769BA235ED4241AB6DAE56CDEA0EEC00514D26
	2F6571BDDEEFADBD17FE394E7D159F98BF93C313720337150EB6AE0543F2C3F8
	10475AE069537B78583641825DF503BE9ABC98A424553CEB3F328FBE44E03371
	FE9454847EF094F028291CD7C69B57980D8EBBE37C3E7F7F38BC5B74463B442D
	BFA17E1070CDD3292A3AE1C77834FCE7819C3F174C8B708384252174BF050500
	7EBB050287FBFBBC7F9FF6794E6D4025549BE03D92EC45FB2E882EBAE1F9A3E6
	D719CCE72F8C44243C5A22B293FC7D3E0DB34120908FA2769FBFBFBF3FF8561A
	7601D4FB4B06567FF29E6074F11DB338F4494060C6C8B5E88974A8DDA7F35D08
	80DFE66BC0E03D0FF8A0453E3DA9531A0D35EF97172F3CC64744F80D43516E20
	30567FD2F3FDF4FB00565C037C100038C0E7F3732F1F7138E4BBD21E028C07F0
	A36F9DCBBF0B73E6753220CCFBF7F93BA4BD16C1E7630E560CE049F7F9717EB3
	87C543B7F9C4FFAF9F3C7C89533C85427D612080FF08B487D4776B35F8C8E7BB
	3189CDEF23BB0BB680D57FFBA54CAC42A79DE6DA28A86DE2E4772301BAF92805
	D69F7585C4B37BA51FF76589CEA16D499DB1D5FD8C48FC2E3C9B18F953842BA1
	C712743A6DE3908602F4890FEB8FF37F55F83FC6E9F7D35687F0F3072B468FDE
	B1FF361FD25FFD9776806059692D7F38DC7FCA1FC347F8E1A703C3ABA562F4A1
	71DA7AB5A0D2FC2610C9B0FF04FD811484AF30754D1F2205B61F0134F6E17F40
	5F3B0BDEF8D5B2C6500041F98FB747FC6878E3F1765CABDD47B5171E29247E38
	BCEEF6001CE2F603DA8FFE887EF540318AD71D8F6B800FE14171FC84FE111DFA
	1F04E0F893DFC241E4F90B9BED3B2E289FA52DC07BA38FABDFD14F52E87FF6D6
	D0F3502CFE9F18FD107EF88114FF7175D0FF01D029EF841A0CD2B70000000049
	454E44AE426082
	]]>
</Picture>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_PR SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_PR>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_UI SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[

bCustom2dDetlevel = (gs_detlevel_2D_m = DET2D_CUSTOM)

dim stStairUI[128]
	stStairUI[1] = `2D-детализация`
	stStairUI[2] = `Масштаб`
	stStairUI[3] = `Тип Маркера Разрыва`
	stStairUI[4] = `Видимые Конструкции`
	stStairUI[5] = `Штриховка Фона`
	stStairUI[6] = `Перо Линии`
	stStairUI[7] = `Тип Линии`
	stStairUI[8] = `Перо Штриховки`
	stStairUI[9] = `Перо Фона Штриховки`
	stStairUI[10] = `Невидимые Конструкции`
	stStairUI[11] = `Перо Линии Всхода`
	stStairUI[12] = `Тип Линии Всхода`
	stStairUI[13] = `Конец Линии Всхода`
	stStairUI[14] = `Начало Линии Всхода`
	stStairUI[15] = `Перо Штриховки (0 - нет)`
	stStairUI[16] = `Перо Штрих. Выше (0 - нет)`
	stStairUI[17] = `Тип Шрифта`
	stStairUI[18] = `Начать с`
	stStairUI[19] = `Формат`
	stStairUI[20] = `Размер Шрифта`
	stStairUI[21] = `Специальный Текст 1`
	stStairUI[22] = `Перо Текста`
	stStairUI[23] = `Специальный Текст 2`
	stStairUI[24] = `Текст Подъема и Спуска`
	stStairUI[25] = `Текст`
	stStairUI[26] = `Тип Символа Стойки`
	stStairUI[27] = `Тип Линии Стойки`
	stStairUI[28] = `Перо Линии Стойки`
	stStairUI[29] = `Линия Невидимой Тетивы`
	stStairUI[30] = `Перо Невидимой Тетивы`
	stStairUI[31] = `2D выше Собственного Этажа`
	stStairUI[32] = `Лестница`
	stStairUI[33] = `Ограждение`
	stStairUI[34] = `Основание`
	stStairUI[35] = `Панели Ограждения`
	stStairUI[36] = `Проступь`
	stStairUI[37] = `Обвязка`
	stStairUI[38] = `Подступенок`
	stStairUI[39] = `Стойка`
	stStairUI[40] = `Поручень`
	stStairUI[41] = `Штриховка выше Линии Разрыва`
	stStairUI[42] = `Показ Линии Всхода`
	stStairUI[43] = `Стрелка к Линии Разрыва`
	stStairUI[44] = `Показ Нумерации`
	stStairUI[45] = `Текст Подступенков/Проступей`
	stStairUI[46] = `Читаемый Текст`
	stStairUI[47] = `Показ Ограждения на Плане`
	stStairUI[48] = `Показ Осей Ограждения`
	stStairUI[49] = `Показ Тетивы на Плане Этажа`
	stStairUI[50] = `Символ Зависит от Этажа`
	stStairUI[51] = `Линия Разрыва`
	stStairUI[52] = `Показ 2D ниже Линии Разрыва`
	stStairUI[53] = `Показ 2D выше Линии Разрыва`
	stStairUI[54] = `Отбрасывание Теней`
	stStairUI[55] = `Единицы Измерения Рабочей Среды Проекта`
	stStairUI[56] = `Ориентация`
	stStairUI[57] = `Ориентация Текста в Символе`
for i = 58 to 79
	stStairUI[i] = ""
next i
	stStairUI[80] = `Показ Проступей`
	stStairUI[81] = `Линия Всхода выше Линии Разрыва`
for i = 82 to 85
	stStairUI[i] = ""
next i
	stStairUI[86] = `Описание`
	stStairUI[87] = `Текст Спуска`
	stStairUI[88] = `Тип Видимой Линии`
	stStairUI[89] = `Тип Невидимой Линии`
	stStairUI[90] = `Размер Символа`
	stStairUI[91] = `Текст Подступенка`
	stStairUI[92] = `мм`
	stStairUI[93] = `п.`

	stStairUI[94] = `Перо Контура`
	stStairUI[95] = `Тип Штриховки`
	stStairUI[96] = `Перо Штриховки`
	stStairUI[97] = `Перо Фона Штриховки`
	stStairUI[98] = `Подступенок`

	stStairUI[99] = `Показ Ограждения выше Линии Разрыва`
	stStairUI[100] = `2D-символ`
	stStairUI[101] = stPostSymbolType[1]
	stStairUI[102] = stPostSymbolType[2]
	stStairUI[103] = stPostSymbolType[3]
	stStairUI[104] = stPostSymbolType[4]
	stStairUI[105] = stPostSymbolType[5]

	stStairUI[106] = stDetlevel2D[1]
	stStairUI[107] = stDetlevel2D[2]

	stStairUI[108] = stBreaklineStyle[1]
	if bSimpleZigZag then
		stStairUI[109] = stBreaklineStyle[3]
	else
		stStairUI[109] = stBreaklineStyle[2]
	endif

	stStairUI[110] = stWalkingDirUPDN[1]
	stStairUI[111] = stWalkingDirUPDN[2]
	stStairUI[112] = stWalkingDirUPDN[3]
	stStairUI[113] = stWalkingDirUPDN[4]
	stStairUI[114] = stWalkingDirUPDN[5]
	stStairUI[115] = stWalkingDirUPDN[6]

	stStairUI[116] = stTextOrientation[3]
	stStairUI[117] = stTextOrientation[2]
	stStairUI[118] = stTextOrientation[1]

	stStairUI[119] = stRiseRunText[1]
	stStairUI[120] = stRiseRunText[2]
	stStairUI[121] = stRiseRunText[3]
	stStairUI[122] = stRiseRunText[4]
	stStairUI[123] = stRiseRunText[5]
	stStairUI[124] = stRiseRunText[6]
	stStairUI[125] = stRiseRunText[7]

	stStairUI[126] = `Ограждение Справа`
	stStairUI[127] = `Ограждение Слева`
	stStairUI[128] = `Показ Тетивы`

dim stRailTypesForUI[11]
	stRailTypesForUI[ 1] = `Балюстрада`
	stRailTypesForUI[ 2] = `Параллельные Прутья`
	stRailTypesForUI[ 3] = `Простой Брусок`
	stRailTypesForUI[ 4] = `Объемная Рама с Панелью`
	stRailTypesForUI[ 5] = `Объемная Рама`
	stRailTypesForUI[ 6] = `Панель`
	stRailTypesForUI[ 7] = `Стойки с Балясинами`
	stRailTypesForUI[ 8] = `Стойки с Прутьями`
	stRailTypesForUI[ 9] = `Деревянная Балюстрада`
	stRailTypesForUI[10] = `Стойки с Брусками`
	stRailTypesForUI[11] = `Как и Правое`

dim stStairUITabNames[14]
	stStairUITabNames[1] = `Типы 2D-символа`
	stStairUITabNames[2] = `Реквизиты 2D-символа`
	stStairUITabNames[3] = `Символ Линии Всхода`
	stStairUITabNames[4] = `Подъем и Спуск, Нумерация`
	stStairUITabNames[5] = `Ограждение и Тетива в Символе`
	stStairUITabNames[6] = `Зависимость от Этажа и 2D над Собственным`
	stStairUITabNames[7] = `Покрытия`
	stStairUITabNames[8] = `Тип Ограждения - Справа`
	stStairUITabNames[9] = `Тип Ограждения - Слева`

for i = 10 to 12
	stStairUITabNames[i] = ""
next i
	stStairUITabNames[13] = `Подъем и Спуск, Описание`
	stStairUITabNames[14] = `Реквизиты Сечения`

call "ui_stairs" parameters gs_ui_current_page		= gs_ui_current_page,
! --- 2D symbol type ---
			gs_detlevel_2D_m		= gs_detlevel_2D_m,
			gs_ScaleChangeSM		= gs_ScaleChangeSM,
			iScaleChangeSM			= iScaleChangeSM,
			gs_ScaleChangeMD		= gs_ScaleChangeMD,
			iScaleChangeMD			= iScaleChangeMD,
			stScaleType				= stScaleType,
			bCustom2dDetlevel		= bCustom2dDetlevel,
			gs_SymbolType_m			= gs_SymbolType_m,
			iSymbolGroup			= iSymbolGroup,
! --- 2D symbol attributes ---
			bEnableBreakLineStyle	= 1,
			breakline_style			= breakline_style,
			gs_cont_pen				= gs_cont_pen,
			gs_DashLinePen			= gs_DashLinePen,
			solid_line				= solid_line,
			dash_line				= dash_line,
			gs_fill_type			= gs_fill_type,
			gs_fill_pen				= gs_fill_pen,
			gs_back_pen				= gs_back_pen,
			gs_FillAbove			= gs_FillAbove,
! --- Walkline ---
			bShowWalkLine				= bShowWalkLine,
			bShowWalkLineAboveBreakline	= bShowWalkLineAboveBreakline,
			gs_wLinePen					= gs_wLinePen,
			gs_wLineType1				= gs_wLineType1,
			arrow_style					= arrow_style,
			gs_ArrowFillPen				= gs_ArrowFillPen,
			gs_ArrowFillPenAbove		= gs_ArrowFillPenAbove,
			gs_StartEndStyle			= gs_StartEndStyle,
			gs_StartEndFillPen			= gs_StartEndFillPen,
! --- Text Display ---
			fontType				= fontType,
			bShowNumbering			= bShowNumbering,
			bShowRiseAndRunText		= bShowRiseAndRunText,
			nStartNumbering			= nStartNumbering,
			gs_NumTextSize			= gs_NumTextSize,
			gs_text_size_pt_num 	= gs_text_size_pt_num,
			gs_NumTextPen			= gs_NumTextPen,
			gs_RiseRunText			= gs_RiseRunText,
			iRiseRunText			= iRiseRunText,
			gs_CustomText1			= gs_CustomText1,
			gs_CustomText2			= gs_CustomText2,
			gs_customText_rise		= gs_customText_rise,
			fontsize				= fontsize,
			gs_text_size_pt			= gs_text_size_pt,
			gs_text_pen				= gs_text_pen,
			walkingDirUPDN			= walkingDirUPDN,
			bEnableCustomDownText	= 1,
			gs_CustomText_Down 		= gs_CustomText_Down,
			UPDNfontsize			= UPDNfontsize,
			gs_text_size_pt_UpDn	= gs_text_size_pt_UpDn,
			UPDNfontpen				= UPDNfontpen,
			typeTextRotation_RiseRun 	= typeTextRotation_RiseRun,
			typeTextRotation_Num 		= typeTextRotation_Num,
			typeTextRotation_UpDn 		= typeTextRotation_UpDn,
			bEnableDescription		= 1,
			gs_description			= gs_description,
			gs_desc_text_size		= gs_desc_text_size,
			gs_desc_text_size_pt	= gs_desc_text_size_pt,
			gs_desc_text_pen		= gs_desc_text_pen,
! --- Rail & Carriage 2D ---
			bShowRailOnFloorPlan	= bShowRailOnFloorPlan,
			railLineType			= railLineType,
			railPen					= railPen,
			bShowRailAxis			= bShowRailAxis,
			railAxisLineType		= railAxisLineType,
			gs_RailAxisPen			= gs_RailAxisPen,
			bSymbolic2D				= bSymbolic2D,
			postSymbolType			= postSymbolType,
			iPostSymbolType			= iPostSymbolType,
			postLineType			= postLineType,
			postPen					= postPen,
			bEnableCarriageLine		= bEnableCarriageLine,
			bShowCarriage			= bShowCarriage,
			carriageLineType		= carriageLineType,
			carriagePen				= carriagePen,
! --- Story Sensitivity ---
			bStorySensitive			= bStorySensitive,
			gs_BreaklineStUp		= gs_BreaklineStUp,
			gs_LowerPartStUp		= gs_LowerPartStUp,
			gs_UpperPartStUp		= gs_UpperPartStUp,
			gs_TreadStUp			= gs_TreadStUp,
			gs_LineTypeStUp			= gs_LineTypeStUp,
			gs_LinePenStUp			= gs_LinePenStUp,
			gs_wLineTypeStUp		= gs_wLineTypeStUp,
! --- Section Attributes ---
			bRiserCover				= bRiserCover,
			bTreadCover				= (treadThickness > 0.0001),
			penLineStringer 		= penLineStringer,
			penLineStringer_m 		= penLineStringer_m,
			typeFillStringer		= typeFillStringer,
			penFillStringer			= penFillStringer,
			penFillStringer_m		= penFillStringer_m,
			penBackFillStringer		= penBackFillStringer,
			penBackFillStringer_m	= penBackFillStringer_m,
			penLineTread			= penLineTread,
			penLineTread_m			= penLineTread_m,
			typeFillTread			= typeFillTread,
			penFillTread			= penFillTread,
			penFillTread_m			= penFillTread_m,
			penBackFillTread		= penBackFillTread,
			penBackFillTread_m		= penBackFillTread_m,
			penLineRiser			= penLineRiser,
			penLineRiser_m 			= penLineRiser_m,
			typeFillRiser			= typeFillRiser,
			penFillRiser			= penFillRiser,
			penFillRiser_m			= penFillRiser_m,
			penBackFillRiser		= penBackFillRiser,
			penBackFillRiser_m		= penBackFillRiser_m,
! --- 3D materials ---
			gs_shadow				= gs_shadow,
			matBase					= matBase,
			matTread				= matTread,
			matRiser				= matRiser,
			matPost					= matPost,
			matHandrail				= matHandrail,
			matSurface				= matSurface,
			matBar					= matBar,
! --- Rail Types ---
			bRightRail				= bRightRail,
			bLeftRail				= bLeftRail,
			leftRailType			= leftRailType,
			rightRailType			= rightRailType,
! --- String resources ---
			stStairUITabNames		= stStairUITabNames,
			stStairSymbolTypes		= stStairSymbolTypes,
			stSymbolGroup			= stSymbolGroup,
			stArrowHeadStyles		= stArrowHeadStyles,
			stStartSymbolStyles		= stStartSymbolStyles,
			stPostSymbolType		= stPostSymbolType,
			stRailPosition			= stRailPosition,
			stRailTypesForUI		= stRailTypesForUI,
			stRailTypes				= stRailTypes,
			stStairUI				= stStairUI,
! --- Stair Type ---
			iStairType				= 4		! Stair TwoLandings

end


]]>
</Script_UI>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Comment SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Comment>

<CalledMacros SectVersion="2" SectionFlags="0" SubIdent="0">
	<Macro>
		<MName><![CDATA["Stair_RiseRun_Text"]]></MName>
		<MainGUID>E42F5F06-4225-4F32-A64C-ADCF1D4F9EDC</MainGUID>
	</Macro>
	<Macro>
		<MName><![CDATA["railSymbol2D_m"]]></MName>
		<MainGUID>C5C904E6-1706-4CD1-BC8D-6C294B5B40F7</MainGUID>
	</Macro>
	<Macro>
		<MName><![CDATA["stairRails_m"]]></MName>
		<MainGUID>4A3DDA4A-B43E-4039-B45A-463905CF42AD</MainGUID>
	</Macro>
	<Macro>
		<MName><![CDATA["ui_stairs"]]></MName>
		<MainGUID>D8D2E274-0A82-4EF4-845A-78AD6980E72F</MainGUID>
	</Macro>
	<Macro>
		<MName><![CDATA["FM_types"]]></MName>
		<MainGUID>2759D2DF-AA8E-44D1-AD1D-261581266B34</MainGUID>
	</Macro>
	<Macro>
		<MName><![CDATA["Onorm_Stair"]]></MName>
		<MainGUID>F021AF23-E4F7-4961-964D-C9BCAFB786DD</MainGUID>
	</Macro>
</CalledMacros>

<Copyright SectVersion="1" SectionFlags="0" SubIdent="0">
	<Author>GRAPHISOFT</Author>
	<License>
		<Type>CC BY-ND</Type>
		<Version>3.0</Version>
	</License>
</Copyright>

</Symbol>
