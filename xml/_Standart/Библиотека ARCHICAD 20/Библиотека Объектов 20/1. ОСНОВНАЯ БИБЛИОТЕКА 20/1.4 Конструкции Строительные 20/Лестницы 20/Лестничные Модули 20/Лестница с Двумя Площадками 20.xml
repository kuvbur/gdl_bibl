<?xml version="1.0" encoding="UTF-8"?>
<Symbol IsArchivable="true" IsPlaceable="true" MainGUID="B4FD8A42-A0D9-42CC-890A-13E40F5FD8F7" MigrationValue="Normal" Owner="1196638531" Signature="1196644685" Version="43">
<Ancestry SectVersion="1" SectionFlags="0" SubIdent="0" Template="false">
	<MainGUID>F938E33A-329D-4A36-BE3E-85E126820996</MainGUID>
	<MainGUID>103E8D2C-8230-42E1-9597-46F84CCE28C0</MainGUID>
	<MainGUID>784EAEA1-5041-4AA6-B6F4-EF263A891EE7</MainGUID>
	<MainGUID>57B7C584-5C0D-11D6-A0D8-036F034B6792</MainGUID>
</Ancestry>

<MigrationTable SectVersion="1" SectionFlags="0" SubIdent="0">
	<MigrationTableElement>
		<MainGUID>23843FE8-AF5B-40E7-9B7A-6B2704F9B5FB</MainGUID>
		<Version>19</Version>
		<Name><![CDATA[""]]></Name>
		<AutoMigration>true</AutoMigration>
	</MigrationTableElement>
</MigrationTable>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_3D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
!! Stairs TwoLandings.gsm
if gs_detlevel_3D_m = 0 then END
if not(gs_shadow) then SHADOW OFF

pen gs_cont_pen

gapToFirstTread = 0

! ==============================================================================
! HOTSPOTS
! ==============================================================================
unID = 1

HOTSPOT 0,gapToFirstTread,0,unID,flightWidth,1+128	: unID=unID+1
HOTSPOT -0.1,gapToFirstTread,0,unID,flightWidth,3		: unID=unID+1
HOTSPOT flightWidth,gapToFirstTread,0,unID,flightWidth,2		: unID=unID+1

HOTSPOT a,0,0,unID,a,1+128	: unID=unID+1
HOTSPOT a+0.1,0,0,unID,a,3		: unID=unID+1
HOTSPOT 0,0,0,unID,a,2		: unID=unID+1

HOTSPOT a,0,(nRisers1stRun+nRisers2ndRun)*treadHeight,unID,b,1+128	: unID=unID+1
HOTSPOT a,-0.1,(nRisers1stRun+nRisers2ndRun)*treadHeight,unID,b,3		: unID=unID+1
HOTSPOT a,b,(nRisers1stRun+nRisers2ndRun)*treadHeight,unID,b,2		: unID=unID+1

HOTSPOT 0,b,0,unID,b,1+128	: unID=unID+1
HOTSPOT 0,b+0.1,0,unID,b,3		: unID=unID+1
HOTSPOT 0,0,0,unID,b,2		: unID=unID+1

HOTSPOT flightWidth+(nRisers2ndRun-1)*td2,b,(nRisers1stRun+nRisers2ndRun)*treadHeight,unID,flightWidth,1+128	: unID=unID+1
HOTSPOT flightWidth+(nRisers2ndRun-1)*td2,b+0.1,(nRisers1stRun+nRisers2ndRun)*treadHeight,unID,flightWidth,3		: unID=unID+1
HOTSPOT flightWidth+(nRisers2ndRun-1)*td2,b-flightWidth,(nRisers1stRun+nRisers2ndRun)*treadHeight,unID,flightWidth,2		: unID=unID+1

HOTSPOT flightWidth,b,nRisers1stRun*treadHeight,unID,flightWidth,1+128	: unID=unID+1
HOTSPOT flightWidth,b+0.1,nRisers1stRun*treadHeight,unID,flightWidth,3		: unID=unID+1
HOTSPOT flightWidth,b-flightWidth,nRisers1stRun*treadHeight,unID,flightWidth,2		: unID=unID+1

HOTSPOT 0,0,(nRisers1stRun)*treadHeight,unID,b,1+128		: unID=unID+1
HOTSPOT 0,-0.1,(nRisers1stRun)*treadHeight,unID,b,3		: unID=unID+1
HOTSPOT 0,b,(nRisers1stRun)*treadHeight,unID,b,2		: unID=unID+1

HOTSPOT a,b,nRisers1stRun*treadHeight,unID,a,1+128		: unID=unID+1
HOTSPOT a+0.1,b,nRisers1stRun*treadHeight,unID,a,3		: unID=unID+1
HOTSPOT 0,b,nRisers1stRun*treadHeight,unID,a,2		: unID=unID+1

HOTSPOT a,b-flightWidth-nRisers3rdRun*treadDepth,0,unID,zzyzx,1+128		: unID=unID+1
HOTSPOT a,b-flightWidth-nRisers3rdRun*treadDepth,-0.1,unID,zzyzx,3		: unID=unID+1
HOTSPOT a,b-flightWidth-nRisers3rdRun*treadDepth,zzyzx,unID,zzyzx,2		: unID=unID+1

HOTSPOT a,b-flightWidth-nRisers3rdRun*treadDepth,zzyzx,unID,flightWidth,1+128		: unID=unID+1
HOTSPOT a+0.1,b-flightWidth-nRisers3rdRun*treadDepth,zzyzx,unID,flightWidth,3		: unID=unID+1
HOTSPOT a-flightWidth,b-flightWidth-nRisers3rdRun*treadDepth,zzyzx,unID,flightWidth,2		: unID=unID+1

! ==============================================================================
! Concrete Base
! ==============================================================================

addy gapToFirstTread

IF stairBaseType_m = 1 THEN				! Concrete
	MATERIAL matBase
	SECT_FILL typeFillStringer, penBackFillStringer, penFillStringer, penLineStringer

	ROTx 90
	ROTy 90

	PUT riserCoverThk,0,15
	FOR i=1 to nRisers1stRun-1
		PUT (i-1)*treadDepth+riserCoverThk,i*treadHeight-treadThickness,15,
			(i)*treadDepth+riserCoverThk,i*treadHeight-treadThickness,15
	NEXT i

	PUT (nRisers1stRun-1)*treadDepth+riserCoverThk,(nRisers1stRun-1)*treadHeight-treadThickness,10,
		(nRisers1stRun-1)*treadDepth+riserCoverThk,(nRisers1stRun)*treadHeight-treadThickness-stairSlabThk,8,
		nRisers1stRun*treadDepth+stairSlabThk*tan(ang/2),nRisers1stRun*treadHeight-treadThickness-stairSlabThk,15,
		(treadThickness+stairSlabThk)/sin(ang),0,15

	PRISM_ nsp/3,flightWidth,
		get(nsp)

	IF ABS(riserCoverThk)>0.001 THEN
		FOR t=1 to nRisers1stRun
		ADD (t-1)*treadDepth,(t-1)*treadHeight,0
		MATERIAL matRiser
		SECT_FILL typeFillRiser, penBackFillRiser, penFillRiser, penLineRiser

		prism_ 4,flightWidth,
			0,0,15,
			riserCoverThk,0,15,
			riserCoverThk,treadHeight-treadThickness,15,
			0,treadHeight-treadThickness,15
		DEL 1
		Next t
		MATERIAL matBase
		SECT_FILL typeFillStringer, penBackFillStringer, penFillStringer, penLineStringer
	ENDIF



	DEL 2
	!!!!!******************************      LANDING 1.

	ADD 0,(nRisers1stRun-1)*treadDepth,(nRisers1stRun)*treadHeight-treadThickness-stairSlabThk
	PRISM_ 6,stairSlabThk-treadHeight,
		0,				riserCoverThk,8,
		flightWidth,	riserCoverThk,9,
		flightWidth,	stairSlabThk*tan(ang/2)+treadDepth,9,
		flightWidth,	flightWidth,9,
		0,				flightWidth,11,
		0,				stairSlabThk*tan(ang/2)+treadDepth,8
	ADDz stairSlabThk-treadHeight
	PRISM_ 4,treadHeight,
		0,+riserCoverThk,14,
		flightWidth,+riserCoverThk,14,
		flightWidth,flightWidth,12,
		0,flightWidth,14
	DEL 2
	!!!!!******************************      2nd RUN

	ADD flightWidth,(nRisers1stRun-1)*treadDepth,nRisers1stRun*treadHeight-treadThickness
	ROTx 90
	ADDz -flightWidth

	PUT 0,-stairSlabThk,8,
		0,0,15,
		riserCoverThk,0,15


	FOR i=1 to nRisers2ndRun-1
		PUT (i-1)*td2+riserCoverThk,i*treadHeight,15,
			(i)*td2+riserCoverThk,i*treadHeight,15
	NEXT i

	PUT (nRisers2ndRun-1)*td2+riserCoverThk,(nRisers2ndRun-1)*treadHeight,8,
		(nRisers2ndRun-1)*td2+riserCoverThk,(nRisers2ndRun)*treadHeight-stairSlabThk,8,
		(nRisers2ndRun)*td2+stairSlabThk*tan(ang/2),(nRisers2ndRun)*treadHeight-stairSlabThk,15

	PRISM_ nsp/3,flightWidth,
		get(nsp)

	IF ABS(riserCoverThk)>0.001 THEN
		FOR t=1 to nRisers2ndRun
		ADD (t-1)*td2,(t-1)*treadHeight+treadThickness,0
		MATERIAL matRiser
		SECT_FILL typeFillRiser, penBackFillRiser, penFillRiser, penLineRiser

		prism_ 4,flightWidth,
			0,0,15,
			riserCoverThk,0,15,
			riserCoverThk,treadHeight-treadThickness,15,
			0,treadHeight-treadThickness,15
		DEL 1
		Next t
		MATERIAL matBase
		SECT_FILL typeFillStringer, penBackFillStringer, penFillStringer, penLineStringer
	ENDIF


	DEL 3

	!!!!!******************************      LANDING 2.

	ADD flightWidth+(nRisers2ndRun-1)*td2,(nRisers1stRun-1)*treadDepth+flightWidth,(nRisers1stRun+nRisers2ndRun)*treadHeight-treadThickness-stairSlabThk
	ROTz -90
	PRISM_ 6,stairSlabThk-treadHeight,
		0,				riserCoverThk,	8,
		flightWidth,	riserCoverThk,	9,
		flightWidth,	treadDepth,		9,
		flightWidth,	flightWidth,	9,
		0,				flightWidth,	11,
		0,				treadDepth,		8
	ADDz stairSlabThk-treadHeight
	PRISM_ 4,treadHeight,
		0,+riserCoverThk,14,
		flightWidth,+riserCoverThk,14,
		flightWidth,flightWidth,12,
		0,flightWidth,14
	DEL 3

	!!!!!******************************      3rd RUN

	ADD flightWidth+(nRisers2ndRun-1)*td2,(nRisers1stRun-1)*treadDepth,(nRisers1stRun+nRisers2ndRun)*treadHeight-treadThickness
	ROTx 90
	ROTy -90
	ADDz -flightWidth

	PUT 0,-stairSlabThk,8,
		0,0,15,
		riserCoverThk,0,15

	covthicky_t=riserCoverThk
	FOR i=1 to nRisers3rdRun
		if i=nRisers3rdRun then covthicky_t=0
		PUT (i-1)*treadDepth+riserCoverThk,i*treadHeight,15,
			(i)*treadDepth+covthicky_t,i*treadHeight,15
	NEXT i

	PUT (nRisers3rdRun)*treadDepth+covthicky_t,(nRisers3rdRun)*treadHeight,15,
		(nRisers3rdRun)*treadDepth+covthicky_t,(nRisers3rdRun)*treadHeight-stairSlabThk-(stairSlabThk*tan(ang/2))*tan(ang),15

	PRISM_ nsp/3,flightWidth,
		get(nsp)

	IF ABS(riserCoverThk)>0.001 THEN
		FOR t=1 to nRisers3rdRun
		ADD (t-1)*treadDepth,(t-1)*treadHeight+treadThickness,0
		MATERIAL matRiser
		SECT_FILL typeFillRiser, penBackFillRiser, penFillRiser, penLineRiser
		prism_ 4,flightWidth,
			0,0,15,
			riserCoverThk,0,15,
			riserCoverThk,treadHeight-treadThickness,15,
			0,treadHeight-treadThickness,15
		DEL 1
		Next t
		MATERIAL matBase
		SECT_FILL typeFillStringer, penBackFillStringer, penFillStringer, penLineStringer
	ENDIF

	DEL 4


ENDIF

! ==============================================================================
! Wood Base
! ==============================================================================

IF stairBaseType_m = 2 | stairBaseType_m = 3 THEN		! Wood, None
	MATERIAL matBase
	SECT_FILL typeFillStringer, penBackFillStringer, penFillStringer, penLineStringer

	ROTx 90
	ROTy 90

	IF stairBaseType_m = 2 THEN		! Wood
		PUT riserCoverThk,0,15
		FOR i=1 to nRisers1stRun-1
			PUT (i-1)*treadDepth+riserCoverThk,i*treadHeight-treadThickness,15,
				(i)*treadDepth+riserCoverThk,i*treadHeight-treadThickness,15
		NEXT i

		PUT (nRisers1stRun-1)*treadDepth+riserCoverThk,(nRisers1stRun-1)*treadHeight-treadThickness,10,
			(nRisers1stRun-1)*treadDepth+riserCoverThk,(nRisers1stRun)*treadHeight-treadThickness-stairSlabThk,8,
			nRisers1stRun*treadDepth+stairSlabThk*tan(ang/2),nRisers1stRun*treadHeight-treadThickness-stairSlabThk,15,
			(treadThickness+stairSlabThk)/sin(ang),0,15

		ADDz woodBaseOffset
		PRISM_ nsp/3,woodBaseThk,
			use(nsp)
		DEL 1

		ADDz flightWidth-woodBaseOffset-woodBaseThk
		PRISM_ nsp/3,woodBaseThk,
			get(nsp)
		DEL 1
	ENDIF

	IF ABS(riserCoverThk)>0.001 THEN
		FOR t=1 to nRisers1stRun
		ADD (t-1)*treadDepth,(t-1)*treadHeight,0
		MATERIAL matRiser
		SECT_FILL typeFillRiser, penBackFillRiser, penFillRiser, penLineRiser

		prism_ 4,flightWidth,
			0,0,15,
			riserCoverThk,0,15,
			riserCoverThk,treadHeight-treadThickness,15,
			0,treadHeight-treadThickness,15
		DEL 1
		Next t
		MATERIAL matBase
		SECT_FILL typeFillStringer, penBackFillStringer, penFillStringer, penLineStringer
	ENDIF

	DEL 2
	!!!!!******************************      LANDING 1.

	IF stairBaseType_m = 2 THEN		! Wood
		ADD 0,(nRisers1stRun-1)*treadDepth,(nRisers1stRun)*treadHeight-treadThickness-stairSlabThk
		PRISM_ 6,stairSlabThk-treadHeight,
			woodBaseOffset,+riserCoverThk,8,
			woodBaseOffset+woodBaseThk,+riserCoverThk,8,
			woodBaseOffset+woodBaseThk,stairSlabThk*tan(ang/2)+treadDepth,9,
			woodBaseOffset+woodBaseThk,flightWidth,11,
			woodBaseOffset,flightWidth,11,
			woodBaseOffset,stairSlabThk*tan(ang/2)+treadDepth,8

		PRISM_ 6,stairSlabThk-treadHeight,
			flightWidth-woodBaseOffset-woodBaseThk,+riserCoverThk,8,
			flightWidth-woodBaseOffset,+riserCoverThk,8,
			flightWidth-woodBaseOffset,stairSlabThk*tan(ang/2)+treadDepth,9,
			flightWidth-woodBaseOffset,flightWidth,11,
			flightWidth-woodBaseOffset-woodBaseThk,flightWidth,11,
			flightWidth-woodBaseOffset-woodBaseThk,stairSlabThk*tan(ang/2)+treadDepth,8

		ADDz stairSlabThk-treadHeight
		PRISM_ 4,treadHeight,
			woodBaseOffset,+riserCoverThk,14,
			woodBaseOffset+woodBaseThk,+riserCoverThk,14,
			woodBaseOffset+woodBaseThk,flightWidth,14,
			woodBaseOffset,flightWidth,14

		PRISM_ 4,treadHeight,
			flightWidth-woodBaseOffset-woodBaseThk,+riserCoverThk,14,
			flightWidth-woodBaseOffset,+riserCoverThk,14,
			flightWidth-woodBaseOffset,flightWidth,14,
			flightWidth-woodBaseOffset-woodBaseThk,flightWidth,14

		DEL 2
	ENDIF
	!!!!!******************************      2nd RUN
	ADD flightWidth,(nRisers1stRun-1)*treadDepth,nRisers1stRun*treadHeight-treadThickness
	ROTx 90
	ADDz -flightWidth

	IF stairBaseType_m = 2 THEN		! Wood
		PUT 0,-stairSlabThk,15,
			-woodBaseOffset,-stairSlabThk,15,
			-woodBaseOffset,0,15,
			riserCoverThk,0,15

		FOR i=1 to nRisers2ndRun
			PUT (i-1)*td2+riserCoverThk,i*treadHeight,15,
				(i)*td2+riserCoverThk,i*treadHeight,15
		NEXT i

		PUT (nRisers2ndRun)*td2,(nRisers2ndRun)*treadHeight,13,
			(nRisers2ndRun-1)*td2+flightWidth,(nRisers2ndRun)*treadHeight,15,
			(nRisers2ndRun-1)*td2+flightWidth,(nRisers2ndRun)*treadHeight-stairSlabThk,15,
			(nRisers2ndRun)*td2+stairSlabThk*tan(ang/2),(nRisers2ndRun)*treadHeight-stairSlabThk,15,
			(nRisers2ndRun)*td2,(nRisers2ndRun)*treadHeight-stairSlabThk,15

		ADDz woodBaseOffset
		PRISM_ nsp/3,woodBaseThk,
			use(nsp)
		DEL 1
		ADDz flightWidth-woodBaseOffset-woodBaseThk
		PRISM_ nsp/3,woodBaseThk,
			get(nsp)
		DEL 1
	ENDIF

	IF ABS(riserCoverThk)>0.001 THEN
		FOR t=1 to nRisers2ndRun
		ADD (t-1)*td2,(t-1)*treadHeight+treadThickness,0
		MATERIAL matRiser
		SECT_FILL typeFillRiser, penBackFillRiser, penFillRiser, penLineRiser

		prism_ 4,flightWidth,
			0,0,15,
			riserCoverThk,0,15,
			riserCoverThk,treadHeight-treadThickness,15,
			0,treadHeight-treadThickness,15
		DEL 1
		Next t
		MATERIAL matBase
		SECT_FILL typeFillStringer, penBackFillStringer, penFillStringer, penLineStringer
	ENDIF

	DEL 3

	!!!!!******************************      3rd RUN
	ADD a-flightWidth,(nRisers1stRun-1)*treadDepth,(nRisers1stRun+nRisers2ndRun)*treadHeight-treadThickness
	ROTx 90
	ROTy -90
	ADDz -flightWidth

	IF stairBaseType_m = 2 THEN		! Wood
		PUT 0,-stairSlabThk,15,
			-woodBaseOffset,-stairSlabThk,15,
			-woodBaseOffset,0,15,
			riserCoverThk,0,15

		covthicky_t=riserCoverThk
		FOR i=1 to nRisers3rdRun
			if i=nRisers3rdRun then covthicky_t=0
			PUT (i-1)*treadDepth+riserCoverThk,i*treadHeight,15,
				(i)*treadDepth+covthicky_t,i*treadHeight,15
		NEXT i



		PUT (nRisers3rdRun)*treadDepth+covthicky_t,(nRisers3rdRun)*treadHeight,15,
			(nRisers3rdRun)*treadDepth+covthicky_t,(nRisers3rdRun)*treadHeight-stairSlabThk,15

		ADDz woodBaseOffset
		PRISM_ nsp/3,woodBaseThk,
			use(nsp)
		DEL 1
		ADDz flightWidth-woodBaseOffset-woodBaseThk
		PRISM_ nsp/3,woodBaseThk,
			get(nsp)
		DEL 1
	ENDIF

	IF ABS(riserCoverThk)>0.001 THEN
		FOR t=1 to nRisers3rdRun
		ADD (t-1)*treadDepth,(t-1)*treadHeight+treadThickness,0
		MATERIAL matRiser
		SECT_FILL typeFillRiser, penBackFillRiser, penFillRiser, penLineRiser
		prism_ 4,flightWidth,
			0,0,15,
			riserCoverThk,0,15,
			riserCoverThk,treadHeight-treadThickness,15,
			0,treadHeight-treadThickness,15
		DEL 1
		Next t
		MATERIAL matBase
		SECT_FILL typeFillStringer, penBackFillStringer, penFillStringer, penLineStringer
	ENDIF
	DEL 4

ENDIF

DEL 1

! ==============================================================================
! Treads
! ==============================================================================
MATERIAL matTread
SECT_FILL typeFillTread, penBackFillTread, penFillTread, penLineTread


IF treadThickness>0.0001 THEN
	!!!!!******************************    1st run
	FOR i=1 TO nRisers1stRun-1
	  ADD 0,-nosing+(i-1)*treadDepth,(i*treadHeight)-treadThickness
		base
		BLOCK flightWidth,treadDepth+nosing+riserCoverThk,treadThickness
		vert 0, 0, 0 !#1
		vert 1, 0, 0 !#2
		vert 0, 1, 0 !#3
		vert 0, 0, 1 !#4
		coor 2, -1, -2,-3, -4
		body -1
	  DEL 1
	NEXT i

	!!!!!******************************    treads on Landing 1.

	ADD 0,-nosing+(nRisers1stRun-1)*treadDepth,nRisers1stRun*treadHeight-treadThickness
	base
	BLOCK flightWidth+riserCoverThk,flightWidth+nosing,treadThickness
	vert 0, 0, 0 !#1
	vert 1, 0, 0 !#2
	vert 0, 1, 0 !#3
	vert 0, 0, 1 !#4
	coor 2, -1, -2,-3, -4
	body -1
	DEL 1

	!!!!!******************************    2nd run
	ADD flightWidth,b-gapToFirstTread,(nRisers1stRun)*treadHeight-treadThickness
	ROTz -90
	 FOR i=1 TO nRisers2ndRun-1
	  ADD 0,-nosing+(i-1)*td2,(i*treadHeight)
		base
		BLOCK flightWidth,td2+nosing+riserCoverThk,treadThickness
		vert 0, 0, 0 !#1
		vert 1, 0, 0 !#2
		vert 0, 1, 0 !#3
		vert 0, 0, 1 !#4
		coor 2, -1, -2,-3, -4
		body -1
	  DEL 1
	 NEXT i
	DEL 2

	!!!!!******************************    treads on Landing 2.

	ADD a-flightWidth-nosing,b-flightWidth-riserCoverThk,(nRisers1stRun+nRisers2ndRun)*treadHeight-treadThickness
	base
	BLOCK flightWidth+nosing,flightWidth+riserCoverThk,treadThickness
	vert 0, 0, 0 !#1
	vert 1, 0, 0 !#2
	vert 0, 1, 0 !#3
	vert 0, 0, 1 !#4
	coor 2, -1, -2,-3, -4
	body -1
	DEL 1

	!!!!!******************************    3rd run
	ADD a,b-flightWidth,(nRisers1stRun+nRisers2ndRun)*treadHeight-treadThickness
	ROTz 180
	covthicky_t=riserCoverThk
	 FOR i=1 TO nRisers3rdRun
	  if i=nRisers3rdRun then covthicky_t=0
	  ADD 0,-nosing+(i-1)*treadDepth,(i*treadHeight)
		base
		BLOCK flightWidth,treadDepth+nosing+covthicky_t,treadThickness
		vert 0, 0, 0 !#1
		vert 1, 0, 0 !#2
		vert 0, 1, 0 !#3
		vert 0, 0, 1 !#4
		coor 2, -1, -2,-3, -4
		body -1
	  DEL 1
	 NEXT i
	DEL 2
ENDIF


! ==============================================================================
! HANDRAILS
! ==============================================================================
rightRailOffset = rightRailOffset
leftRailOffset = leftRailOffset
material matPost

! ------------------------------------------------------------------------------
! Left rail
! ------------------------------------------------------------------------------

IF rail_m = 3 | rail_m = 1 then		! Left, Both
	if bSameRails then
		leftRailType_m = rightRailType_m
		leftWireType_m = rightWireType_m
	endif

	ADD leftRailOffset+leftRailFrameThk/2,-leftRailOvhgBottom,-leftRailOvhgBottom*tan(ang)+treadHeight
	ROTz 90

	lraSimple=(nRisers1stRun-1)*treadDepth+leftRailOvhgBottom
	lraComplex=(nRisers1stRun-2)*treadDepth
	additionXComplex=leftRailOvhgBottom+treadDepth/2
	additionZComplex=leftRailOvhgBottom*tan(ang)
	hrovL=treadDepth/2+leftRailOvhgBottom
	hrovR=treadDepth/2
	postNumber = max(2,(nRisers1stRun)/2+1)
	railAngle	= ang
	side = SIDE_LEFT
	gosub "callRailsForStair"

	DEL 2

	! ------------ POST & Rail on the landing (left side_1) ------------

	ADD leftRailOffset+leftRailFrameThk/2,(nRisers1stRun-1)*treadDepth,(nRisers1stRun)*treadHeight
	ROTz 90

	lraSimple=flightWidth-leftRailOffset-leftRailFrameThk
	lraComplex=flightWidth-leftRailOffset-leftRailFrameThk
	hrovL=leftRailPostSize/2
	hrovR=-leftRailPostSize/2
	postNumber = max(2,(flightWidth-leftRailOffset-treadDepth)/0.5+1)
	side = SIDE_LEFT
	gosub "callRailsForLanding"

	DEL 2

	! ------------ POST & Rail on the landing (left side_2) ------------
	ADD leftRailOffset,b-leftRailOffset-leftRailFrameThk/2-gapToFirstTread,(nRisers1stRun)*treadHeight

	IF flightWidth-leftRailOffset-td2>2*leftRailFrameThk then
		IF leftRailType_m > 0 and leftRailType_m < 7 THEN
			lraSimple=flightWidth-leftRailOffset-td2
			lraComplex=flightWidth-leftRailOffset-leftRailFrameThk
			hrovL=leftRailPostSize/2
			hrovR=-leftRailPostSize/2
			postNumber = max(2,(flightWidth-leftRailOffset-treadDepth)/0.5+1)
			side = SIDE_LEFT
			gosub "callRailsForLanding"
		endif
	ENDIF

	IF leftRailType_m = 7 | leftRailType_m = 8 | leftRailType_m = 9 | leftRailType_m = 10 THEN
		if leftRailType_m = 9 and (flightWidth-leftRailOffset-leftRailPostSize-td2<max(treadDepth/2,0.2)) then
			add 0,-leftRailFrameThk/2,leftRailHeight+leftRailDist-leftRailFrameThk
			block flightWidth-leftRailOffset-td2,leftRailFrameThk,leftRailFrameThk
			del 1
		else
			lraSimple=flightWidth-leftRailOffset-leftRailPostSize-td2
			lraComplex=flightWidth-leftRailOffset-leftRailPostSize-td2
			hrovL=leftRailPostSize/2
			hrovR=leftRailPostSize/2
			postNumber = max(2,(flightWidth-leftRailOffset-treadDepth)/0.5+1)
			side = SIDE_LEFT
			gosub "callRailsForLanding"
		endif
	endif

	DEL 1

	! ------------ Rail on 2nd Run ------------

	ADD flightWidth-td2,b-leftRailOffset-leftRailFrameThk/2-gapToFirstTread,(nRisers1stRun)*treadHeight

	lraSimple=(nRisers2ndRun)*td2
	lraComplex=(nRisers2ndRun-1)*td2
	additionXComplex=td2/2
	additionZComplex=0
	hrovL=td2/2
	hrovR=td2/2
	postNumber = max(2,(nRisers2ndRun-1)/2+1)
	railAngle	= ang2
	side = SIDE_LEFT
	gosub "callRailsForStair"

	DEL 1

	! ------------ POST & Rail on the landing (left side_1) ------------

	ADD a-flightWidth,b-leftRailOffset-leftRailFrameThk/2,(nRisers1stRun+nRisers2ndRun)*treadHeight
	ROTz 0

	lraSimple=flightWidth-leftRailOffset-leftRailFrameThk
	lraComplex=flightWidth-leftRailOffset-leftRailFrameThk
	hrovL=leftRailPostSize/2
	hrovR=-leftRailPostSize/2
	postNumber = max(2,(flightWidth-leftRailOffset-leftRailFrameThk)/0.5+1)
	side = SIDE_LEFT
	gosub "callRailsForLanding"

	DEL 2

	! ------------ POST & Rail on the landing (left side_2) ------------

	ADD a-leftRailOffset-leftRailFrameThk/2,b-leftRailOffset,(nRisers1stRun+nRisers2ndRun)*treadHeight
	ROTz -90

	IF flightWidth-leftRailOffset-treadDepth>2*leftRailFrameThk THEN
		IF leftRailType_m > 0 and leftRailType_m < 8 THEN
			lraSimple=flightWidth-leftRailOffset-treadDepth
			lraComplex=flightWidth-leftRailOffset-treadDepth-leftRailPostSize
			hrovL=leftRailPostSize/2
			hrovR=leftRailPostSize/2
			postNumber = max(2,(flightWidth-leftRailOffset-treadDepth)/0.5+1)
			side = SIDE_LEFT
			gosub "callRailsForLanding"
		endif
	endif
	IF leftRailType_m = 8 | leftRailType_m = 9 | leftRailType_m = 10 THEN
		if leftRailType_m = 9 and (flightWidth-leftRailOffset-leftRailPostSize-td2<max(treadDepth/2,0.2)) then
			add 0,-leftRailFrameThk/2,leftRailHeight+leftRailDist-leftRailFrameThk
			block flightWidth-leftRailOffset-treadDepth,leftRailFrameThk,leftRailFrameThk
			del 1
		else
			lraSimple=flightWidth-leftRailOffset-leftRailPostSize-treadDepth
			lraComplex=flightWidth-leftRailOffset-leftRailPostSize-treadDepth
			hrovL=leftRailPostSize/2
			hrovR=leftRailPostSize/2
			postNumber = max(2,(flightWidth-leftRailOffset-treadDepth)/0.5+1)
			side = SIDE_LEFT
			gosub "callRailsForLanding"
		endif
	endif

	DEL 2

	! ------------ Rail on 3rd Run ------------

	ADD a-leftRailOffset-leftRailFrameThk/2,b-flightWidth+treadDepth,(nRisers1stRun+nRisers2ndRun)*treadHeight
	ROTz -90

	lraSimple=(nRisers3rdRun+1)*treadDepth+leftRailOvhgTop
	lraComplex=(nRisers3rdRun)*treadDepth
	additionXComplex=treadDepth/2
	additionZComplex=0
	hrovL=treadDepth/2
	hrovR=treadDepth/2+leftRailOvhgTop
	postNumber = max(2,(nRisers3rdRun)/2+1)
	railAngle	= ang
	side = SIDE_LEFT
	gosub "callRailsForStair"

	DEL 2

	!!!!!!!!!!******** HOTSPOTS

	!!!!Bottom side
	HOTSPOT leftRailFrameThk/2+leftRailOffset,0,treadHeight+leftRailDist+leftRailHeight-leftRailOvhgBottom*tan(ang),unID,leftRailOvhgBottom, 1+128		: unID=unID+1
	HOTSPOT leftRailFrameThk/2+leftRailOffset,flightWidth-leftRailFrameThk/2-leftRailOffset,treadHeight+leftRailDist+leftRailHeight-leftRailOvhgBottom*tan(ang),unID,leftRailOvhgBottom, 3		: unID=unID+1
	HOTSPOT leftRailFrameThk/2+leftRailOffset,-leftRailOvhgBottom,treadHeight+leftRailDist+leftRailHeight-leftRailOvhgBottom*tan(ang),unID,leftRailOvhgBottom, 2		: unID=unID+1

	HOTSPOT leftRailFrameThk/2,-leftRailOvhgBottom,treadHeight+leftRailDist-leftRailOvhgBottom*tan(ang),unID,leftRailOffset, 1+128		: unID=unID+1
	HOTSPOT leftRailFrameThk/2+0.1,-leftRailOvhgBottom,treadHeight+leftRailDist-leftRailOvhgBottom*tan(ang),unID,leftRailOffset, 3		: unID=unID+1
	HOTSPOT leftRailFrameThk/2+leftRailOffset,-leftRailOvhgBottom,treadHeight+leftRailDist-leftRailOvhgBottom*tan(ang),unID,leftRailOffset, 2		: unID=unID+1

	HOTSPOT leftRailFrameThk/2+leftRailOffset,-leftRailOvhgBottom,treadHeight-leftRailOvhgBottom*tan(ang),unID,leftRailDist, 1+128		: unID=unID+1
	HOTSPOT leftRailFrameThk/2+leftRailOffset,-leftRailOvhgBottom,treadHeight-0.1-leftRailOvhgBottom*tan(ang),unID,leftRailDist, 3		: unID=unID+1
	HOTSPOT leftRailFrameThk/2+leftRailOffset,-leftRailOvhgBottom,treadHeight+leftRailDist-leftRailOvhgBottom*tan(ang),unID,leftRailDist, 2		: unID=unID+1

	HOTSPOT leftRailFrameThk/2+leftRailOffset,-leftRailOvhgBottom,treadHeight-leftRailOvhgBottom*tan(ang)+leftRailDist,unID,leftRailHeight, 1+128		: unID=unID+1
	HOTSPOT leftRailFrameThk/2+leftRailOffset,-leftRailOvhgBottom,treadHeight-leftRailOvhgBottom*tan(ang)+leftRailDist-0.1,unID,leftRailHeight, 3		: unID=unID+1
	HOTSPOT leftRailFrameThk/2+leftRailOffset,-leftRailOvhgBottom,treadHeight-leftRailOvhgBottom*tan(ang)+leftRailDist+leftRailHeight,unID,leftRailHeight, 2	: unID=unID+1

	!!!!Top side
	HOTSPOT a-leftRailOffset-leftRailFrameThk/2,b-flightWidth-nRisers3rdRun*treadDepth,(nRisers+1)*treadHeight+leftRailOvhgTop*tan(ang)+leftRailHeight+leftRailDist,unID,leftRailOvhgTop, 1+128			: unID=unID+1
	HOTSPOT a-leftRailOffset-leftRailFrameThk/2,b-flightWidth-nRisers3rdRun*treadDepth+0.1,(nRisers+1)*treadHeight+leftRailOvhgTop*tan(ang)+leftRailHeight+leftRailDist,unID,leftRailOvhgTop, 3			: unID=unID+1
	HOTSPOT a-leftRailOffset-leftRailFrameThk/2,b-flightWidth-nRisers3rdRun*treadDepth-leftRailOvhgTop,(nRisers+1)*treadHeight+leftRailOvhgTop*tan(ang)+leftRailHeight+leftRailDist,unID,leftRailOvhgTop, 2			: unID=unID+1

	HOTSPOT a-leftRailFrameThk/2,b-flightWidth-nRisers3rdRun*treadDepth-leftRailOvhgTop,(nRisers+1)*treadHeight+leftRailDist+leftRailOvhgTop*tan(ang),unID,leftRailOffset, 1+128		: unID=unID+1
	HOTSPOT a-leftRailFrameThk/2-0.1,b-flightWidth-nRisers3rdRun*treadDepth-leftRailOvhgTop,(nRisers+1)*treadHeight+leftRailDist+leftRailOvhgTop*tan(ang),unID,leftRailOffset, 3		: unID=unID+1
	HOTSPOT a-leftRailFrameThk/2-leftRailOffset,b-flightWidth-nRisers3rdRun*treadDepth-leftRailOvhgTop,(nRisers+1)*treadHeight+leftRailDist+leftRailOvhgTop*tan(ang),unID,leftRailOffset, 2		: unID=unID+1

	HOTSPOT a-leftRailOffset-leftRailFrameThk/2,b-flightWidth-nRisers3rdRun*treadDepth-leftRailOvhgTop,(nRisers+1)*treadHeight+(leftRailOvhgTop)*tan(ang),unID,leftRailDist, 1+128		: unID=unID+1
	HOTSPOT a-leftRailOffset-leftRailFrameThk/2,b-flightWidth-nRisers3rdRun*treadDepth-leftRailOvhgTop,(nRisers+1)*treadHeight+(leftRailOvhgTop)*tan(ang)-0.1,unID,leftRailDist, 3		: unID=unID+1
	HOTSPOT a-leftRailOffset-leftRailFrameThk/2,b-flightWidth-nRisers3rdRun*treadDepth-leftRailOvhgTop,(nRisers+1)*treadHeight+(leftRailOvhgTop)*tan(ang)+leftRailDist,unID,leftRailDist, 2		: unID=unID+1

	HOTSPOT a-leftRailOffset-leftRailFrameThk/2,b-flightWidth-nRisers3rdRun*treadDepth-leftRailOvhgTop,(nRisers+1)*treadHeight+leftRailOvhgTop*tan(ang)+leftRailDist,unID,leftRailHeight, 1+128			: unID=unID+1
	HOTSPOT a-leftRailOffset-leftRailFrameThk/2,b-flightWidth-nRisers3rdRun*treadDepth-leftRailOvhgTop,(nRisers+1)*treadHeight+leftRailOvhgTop*tan(ang)+leftRailDist-0.1,unID,leftRailHeight, 3			: unID=unID+1
	HOTSPOT a-leftRailOffset-leftRailFrameThk/2,b-flightWidth-nRisers3rdRun*treadDepth-leftRailOvhgTop,(nRisers+1)*treadHeight+leftRailOvhgTop*tan(ang)+leftRailHeight+leftRailDist,unID,leftRailHeight, 2			: unID=unID+1
ENDIF


! ------------------------------------------------------------------------------
! Right rail
! ------------------------------------------------------------------------------

IF rail_m = 2 | rail_m = 1 then		! Right, Both
	ADD flightWidth-rightRailOffset-rightRailFrameThk/2,-rightRailOvhgBottom,-rightRailOvhgBottom*tan(ang)+treadHeight
	ROTz 90

	lraSimple=(nRisers1stRun-1)*treadDepth+rightRailOvhgBottom+min(0,rightRailOffset)
	lraComplex=(nRisers1stRun-2)*treadDepth+min(0,rightRailOffset)
	additionXComplex=rightRailOvhgBottom+treadDepth/2
	additionZComplex=rightRailOvhgBottom*tan(ang)
	hrovL=treadDepth/2+rightRailOvhgBottom
	hrovR=treadDepth/2+min(0,rightRailOffset)*0
	postNumber = ((nRisers-1))/4
	railAngle	= ang
	side = SIDE_RIGHT
	gosub "callRailsForStair"

	DEL 2

	! ---------- POST & Rail on the landing (right side_1) ------------
	ADD flightWidth-rightRailFrameThk-rightRailOffset,(nRisers1stRun-1)*treadDepth+rightRailOffset,(nRisers1stRun)*treadHeight+min(0,rightRailOffset*tan(ang))
		BLOCK rightRailFrameThk,rightRailFrameThk,rightRailDist+rightRailHeight+treadDepth*tan(ang)-min(rightRailOffset*tan(ang),treadHeight)
	DEL 1

	IF rightRailOffset>0.05 THEN
		IF rightRailOffset<0.2 THEN
			IF rightRailType_m = 3 | rightRailType_m = 7 | rightRailType_m = 8 | rightRailType_m = 9 | rightRailType_m = 10 THEN
			  hight=rightRailFrameThk
			  if rightRailType_m = 3 then hight=0.025
			  ADD flightWidth-rightRailOffset,(nRisers1stRun-1)*treadDepth,(nRisers1stRun)*treadHeight+rightRailHeight+rightRailDist-hight
			  ROTz 90
			  MATERIAL matHandrail
				BLOCK rightRailOffset,rightRailFrameThk,hight
			  DEL 2
			ELSE
				IF rightRailType_m = 2 THEN
				  ADD flightWidth-rightRailOffset-rightRailFrameThk/2,(nRisers1stRun-1)*treadDepth,(nRisers1stRun)*treadHeight
				  ROTz 90
					lraSimple=rightRailOffset
					lraComplex=rightRailOffset
					hrovL=rightRailPostSize/2
					hrovR=-rightRailPostSize/2
					postNumber = max(2,rightRailOffset/0.5)
					side = SIDE_RIGHT
					gosub "callRailsForLanding"
				DEL 2
				ELSE
					ADD flightWidth-rightRailOffset,(nRisers1stRun-1)*treadDepth,(nRisers1stRun)*treadHeight+rightRailDist
					ROTz 90
					MATERIAL matHandrail
					BLOCK rightRailOffset,rightRailFrameThk,rightRailHeight
					DEL 2
				ENDIF
			ENDIF
		ELSE
			ADD flightWidth-rightRailOffset-rightRailFrameThk/2,(nRisers1stRun-1)*treadDepth,(nRisers1stRun)*treadHeight
			ROTz 90

			IF rightRailType_m = 8 | rightRailType_m = 9 | rightRailType_m = 10 THEN
				ADD 0,-rightRailFrameThk/2,rightRailDist+rightRailHeight-rightRailFrameThk
				MATERIAL matHandrail
				IF rightRailOffset>0 then BLOCK rightRailOffset,rightRailFrameThk,rightRailFrameThk
				DEL 1
			else
				lraSimple=rightRailOffset
				lraComplex=rightRailOffset
				hrovL=rightRailPostSize/2
				hrovR=-rightRailPostSize/2
				postNumber = max(2,rightRailOffset/0.5)
				side = SIDE_RIGHT
				gosub "callRailsForLanding"
			ENDIF

			DEL 2
		ENDIF
	ENDIF

	! ------------ POST & Rail on the landing (right side_2) ------------
	IF rightRailOffset*tan(ang)>treadHeight THEN
		IF rightRailOffset<0.2 & rightRailOffset>0.05 THEN
			IF rightRailType_m = 3 | rightRailType_m = 7 | rightRailType_m = 8 | rightRailType_m = 9 | rightRailType_m = 10 THEN
				hight=rightRailFrameThk
				if rightRailType_m = 3 then hight=0.025
				ADD flightWidth-rightRailOffset,(nRisers1stRun-1)*treadDepth+rightRailOffset,(nRisers1stRun)*treadHeight+rightRailHeight+rightRailDist-hight
				ROTz 0
				MATERIAL matHandrail
				BLOCK rightRailOffset,rightRailFrameThk,hight
				DEL 2
			ELSE
				IF rightRailType_m = 2 THEN
					ADD flightWidth-rightRailOffset-rightRailFrameThk/2,(nRisers1stRun-1)*treadDepth,(nRisers1stRun)*treadHeight
					ROTz 90

					lraSimple=rightRailOffset-treadDepth
					lraComplex=rightRailOffset
					hrovL=rightRailPostSize/2
					hrovR=-rightRailPostSize/2
					postNumber = max(2,rightRailOffset/0.5)
					side = SIDE_RIGHT
					gosub "callRailsForLanding"

					DEL 2
				ELSE
					ADD flightWidth-rightRailOffset,(nRisers1stRun-1)*treadDepth,(nRisers1stRun)*treadHeight+rightRailDist
					ROTz 90
					MATERIAL matHandrail
					BLOCK rightRailOffset,rightRailFrameThk,rightRailHeight
					DEL 2
				ENDIF
			ENDIF
		ELSE
			ADD flightWidth-rightRailOffset,(nRisers1stRun-1)*treadDepth+rightRailOffset+rightRailFrameThk/2,(nRisers1stRun)*treadHeight
			ROTz 0

			IF rightRailOffset>treadDepth+0.08 & rightRailOffset-treadDepth>2*rightRailFrameThk+0.001 then
				IF rightRailType_m = 8 | rightRailType_m = 9 | rightRailType_m = 10 THEN
					ADD 0,-rightRailFrameThk/2,rightRailDist+rightRailHeight-rightRailFrameThk
					MATERIAL matHandrail
					BLOCK rightRailOffset-treadDepth,rightRailFrameThk,rightRailFrameThk
					DEL 1
				else
					lraSimple=rightRailOffset-treadDepth
					lraComplex=rightRailOffset-treadDepth
					hrovL=-rightRailPostSize/2
					hrovR=rightRailPostSize/2
					postNumber = max(2,rightRailOffset/0.5)
					side = SIDE_RIGHT
					gosub "callRailsForLanding"
				ENDIF
			ENDIF

			DEL 2
		ENDIF
	ENDIF

	!!!!!!!!!!******** Railing on the 2nd run
	ADD flightWidth-min(rightRailOffset,td2),(nRisers1stRun-1)*treadDepth+rightRailFrameThk/2+rightRailOffset,(nRisers1stRun+1)*treadHeight-min(rightRailOffset,td2)*tan(ang)
	ROTz 0

	lraSimple=(nRisers2ndRun-1)*td2+min(rightRailOffset,td2)+min(0,rightRailOffset)
	lraComplex=(nRisers2ndRun-2)*td2+min(0,rightRailOffset)
	additionXComplex=td2/2+min(rightRailOffset,td2)
	additionZComplex=min(rightRailOffset*tan(ang2),treadHeight)
	hrovL=td2/2+min(rightRailOffset,td2)
	hrovR=td2/2
	postNumber=max(2,(nRisers2ndRun-2)/2)
	railAngle	= ang2
	side = SIDE_RIGHT
	gosub "callRailsForStair"

	DEL 2

	! ------------ POST & Rail on the landing 2. (right side_1) ------------
	ADD a-flightWidth+rightRailOffset,(nRisers1stRun-1)*treadDepth+rightRailOffset,(nRisers1stRun+nRisers2ndRun)*treadHeight+min(0,rightRailOffset*tan(ang))
		BLOCK rightRailFrameThk,rightRailFrameThk,rightRailDist+rightRailHeight+treadDepth*tan(ang)-min(rightRailOffset*tan(ang),treadHeight)
	DEL 1

	IF rightRailOffset>0.05 THEN
		IF rightRailOffset<0.2 THEN
			IF rightRailType_m = 3 | rightRailType_m = 7 | rightRailType_m = 8 | rightRailType_m = 9 | rightRailType_m = 10 THEN
				hight=rightRailFrameThk
				if rightRailType_m = 3 then hight=0.025
				ADD a-flightWidth,(nRisers1stRun-1)*treadDepth+rightRailOffset,(nRisers1stRun+nRisers2ndRun)*treadHeight+rightRailHeight+rightRailDist-hight
				ROTz 0
				MATERIAL matHandrail
				BLOCK rightRailOffset,rightRailFrameThk,hight
				DEL 2
			ELSE
				IF rightRailType_m = 2 THEN
				  ADD a-flightWidth,(nRisers1stRun-1)*treadDepth+rightRailOffset+rightRailFrameThk/2,(nRisers1stRun+nRisers2ndRun)*treadHeight
				  ROTz 0
					lraSimple=rightRailOffset
					lraComplex=rightRailOffset
					hrovL=rightRailPostSize/2
					hrovR=-rightRailPostSize/2
					postNumber = max(2,rightRailOffset/0.5)
					side = SIDE_RIGHT
					gosub "callRailsForLanding"
				DEL 2
				ELSE
					ADD a-flightWidth,(nRisers1stRun-1)*treadDepth+rightRailOffset,(nRisers1stRun+nRisers2ndRun)*treadHeight+rightRailDist+treadThickness
					ROTz 0
					MATERIAL matHandrail
					BLOCK rightRailOffset,rightRailFrameThk,rightRailHeight
					DEL 2
				ENDIF
			ENDIF
		ELSE
			ADD a-flightWidth+rightRailOffset,(nRisers1stRun-1)*treadDepth+rightRailOffset+rightRailFrameThk/2,(nRisers1stRun+nRisers2ndRun)*treadHeight
			ROTz 180

			IF rightRailType_m = 8 | rightRailType_m = 9 | rightRailType_m = 10 THEN
				ADD 0,-rightRailFrameThk/2,rightRailDist+rightRailHeight-rightRailFrameThk
				MATERIAL matHandrail
				IF rightRailOffset>0 then BLOCK rightRailOffset,rightRailFrameThk,rightRailFrameThk
				DEL 1
			ELSE
				lraSimple=rightRailOffset
				lraComplex=rightRailOffset
				hrovL=rightRailPostSize/2
				hrovR=-rightRailPostSize/2
				postNumber = max(2,rightRailOffset/0.5)
				side = SIDE_RIGHT
				gosub "callRailsForLanding"
			ENDIF

			DEL 2
		ENDIF
	ENDIF

	! ------------ POST & Rail on the landing (right side_2) ------------
	IF rightRailOffset*tan(ang)>treadHeight THEN
		IF rightRailOffset<0.2 & rightRailOffset>0.05 THEN
			IF rightRailType_m = 3 | rightRailType_m = 7 | rightRailType_m = 8 | rightRailType_m = 9 | rightRailType_m = 10 THEN
			  hight=rightRailFrameThk
			  if rightRailType_m = 3 then hight=0.025
			  ADD flightWidth-rightRailOffset,(nRisers1stRun-1)*treadDepth+rightRailOffset,(nRisers1stRun)*treadHeight+rightRailHeight+rightRailDist-hight
			  ROTz 0
			  MATERIAL matHandrail
				BLOCK rightRailOffset,rightRailFrameThk,hight
			  DEL 2
			ELSE
				IF rightRailType_m = 2 THEN
				  ADD flightWidth-rightRailOffset-rightRailFrameThk/2,(nRisers1stRun-1)*treadDepth,(nRisers1stRun)*treadHeight
				  ROTz 90
					lraSimple=rightRailOffset-treadDepth
					lraComplex=rightRailOffset
					hrovL=rightRailPostSize/2
					hrovR=-rightRailPostSize/2
					postNumber = max(2,rightRailOffset/0.5)
					side = SIDE_RIGHT
					gosub "callRailsForLanding"
				DEL 2
				ELSE
					ADD flightWidth-rightRailOffset,(nRisers1stRun-1)*treadDepth,(nRisers1stRun)*treadHeight+rightRailDist
					ROTz 90
					MATERIAL matHandrail
					 BLOCK rightRailOffset,rightRailFrameThk,rightRailHeight
					DEL 2
				ENDIF
			ENDIF
		ELSE
			ADD flightWidth-rightRailOffset,(nRisers1stRun-1)*treadDepth+rightRailOffset+rightRailFrameThk/2,(nRisers1stRun)*treadHeight
			ROTz 0

			IF rightRailOffset>treadDepth+0.08 & rightRailOffset-treadDepth>2*rightRailFrameThk+0.001 then
				IF rightRailType_m = 8 | rightRailType_m = 9 | rightRailType_m = 10 THEN
					ADD 0,-rightRailFrameThk/2,rightRailDist+rightRailHeight-rightRailFrameThk
					MATERIAL matHandrail
					BLOCK rightRailOffset-treadDepth,rightRailFrameThk,rightRailFrameThk
					DEL 1
				else
					lraSimple=rightRailOffset-treadDepth
					lraComplex=rightRailOffset-treadDepth
					hrovL=-rightRailPostSize/2
					hrovR=rightRailPostSize/2
					postNumber = max(2,rightRailOffset/0.5)
					side = SIDE_RIGHT
					gosub "callRailsForLanding"
				ENDIF
			ENDIF

			DEL 2
		ENDIF
	ENDIF

	!!!!!!!!!!******** Railing on the 3rd run

	ADD a-flightWidth+rightRailOffset+rightRailFrameThk/2,(nRisers1stRun-1)*treadDepth+min(rightRailOffset,treadDepth),(nRisers1stRun+nRisers2ndRun+1)*treadHeight-min(rightRailOffset,treadDepth)*tan(ang)
	ROTz -90

	lraSimple=(nRisers3rdRun)*treadDepth+min(rightRailOffset,treadDepth)+rightRailOvhgTop
	lraComplex=(nRisers3rdRun-1)*treadDepth
	additionXComplex=treadDepth/2+min(rightRailOffset,treadDepth)
	additionZComplex=min(rightRailOffset*tan(ang),treadHeight)
	hrovL=treadDepth/2+min(rightRailOffset,treadDepth)
	hrovR=treadDepth/2+rightRailOvhgTop
	postNumber = max(2,(nRisers3rdRun-1)/(3*treadDepth))
	railAngle	= ang
	side = SIDE_RIGHT
	gosub "callRailsForStair"

	DEL 2

	!!!!!!!!!!******** HOTSPOTS

	!!!!Bottom side
	HOTSPOT flightWidth-rightRailFrameThk/2-rightRailOffset,gapToFirstTread,treadHeight+rightRailDist+rightRailHeight-rightRailOvhgBottom*tan(ang),unID,rightRailOvhgBottom, 1+128		: unID=unID+1
	HOTSPOT flightWidth-rightRailFrameThk/2-rightRailOffset,gapToFirstTread+0.1,treadHeight+rightRailDist+rightRailHeight-rightRailOvhgBottom*tan(ang),unID,rightRailOvhgBottom, 3		: unID=unID+1
	HOTSPOT flightWidth-rightRailFrameThk/2-rightRailOffset,gapToFirstTread-rightRailOvhgBottom,treadHeight+rightRailDist+rightRailHeight-rightRailOvhgBottom*tan(ang),unID,rightRailOvhgBottom, 2		: unID=unID+1

	HOTSPOT flightWidth-rightRailFrameThk/2,gapToFirstTread-rightRailOvhgBottom,treadHeight+rightRailDist-rightRailOvhgBottom*tan(ang),unID,rightRailOffset, 1+128		: unID=unID+1
	HOTSPOT flightWidth-rightRailFrameThk/2-0.1,gapToFirstTread-rightRailOvhgBottom,treadHeight+rightRailDist-rightRailOvhgBottom*tan(ang),unID,rightRailOffset, 3		: unID=unID+1
	HOTSPOT flightWidth-rightRailFrameThk/2-rightRailOffset,gapToFirstTread-rightRailOvhgBottom,treadHeight+rightRailDist-rightRailOvhgBottom*tan(ang),unID,rightRailOffset, 2		: unID=unID+1

	HOTSPOT flightWidth-rightRailFrameThk/2-rightRailOffset,gapToFirstTread-rightRailOvhgBottom,treadHeight-rightRailOvhgBottom*tan(ang),unID,rightRailDist, 1+128		: unID=unID+1
	HOTSPOT flightWidth-rightRailFrameThk/2-rightRailOffset,gapToFirstTread-rightRailOvhgBottom,treadHeight-0.1-rightRailOvhgBottom*tan(ang),unID,rightRailDist, 3		: unID=unID+1
	HOTSPOT flightWidth-rightRailFrameThk/2-rightRailOffset,gapToFirstTread-rightRailOvhgBottom,treadHeight+rightRailDist-rightRailOvhgBottom*tan(ang),unID,rightRailDist, 2		: unID=unID+1

	HOTSPOT flightWidth-rightRailFrameThk/2-rightRailOffset,gapToFirstTread-rightRailOvhgBottom,treadHeight-rightRailOvhgBottom*tan(ang)+rightRailDist,unID,rightRailHeight, 1+128		: unID=unID+1
	HOTSPOT flightWidth-rightRailFrameThk/2-rightRailOffset,gapToFirstTread-rightRailOvhgBottom,treadHeight-rightRailOvhgBottom*tan(ang)+rightRailDist-0.1,unID,rightRailHeight, 3		: unID=unID+1
	HOTSPOT flightWidth-rightRailFrameThk/2-rightRailOffset,gapToFirstTread-rightRailOvhgBottom,treadHeight-rightRailOvhgBottom*tan(ang)+rightRailDist+rightRailHeight,unID,rightRailHeight, 2	: unID=unID+1

	!!!!Top side
	HOTSPOT a-flightWidth+rightRailOffset+rightRailFrameThk/2,b-flightWidth-nRisers3rdRun*treadDepth,(nRisers+1)*treadHeight+rightRailOvhgTop*tan(ang)+rightRailHeight+rightRailDist,unID,rightRailOvhgTop, 1+128			: unID=unID+1
	HOTSPOT a-flightWidth+rightRailOffset+rightRailFrameThk/2,b-flightWidth-nRisers3rdRun*treadDepth+0.1,(nRisers+1)*treadHeight+rightRailOvhgTop*tan(ang)+rightRailHeight+rightRailDist,unID,rightRailOvhgTop, 3			: unID=unID+1
	HOTSPOT a-flightWidth+rightRailOffset+rightRailFrameThk/2,b-flightWidth-nRisers3rdRun*treadDepth-rightRailOvhgTop,(nRisers+1)*treadHeight+rightRailOvhgTop*tan(ang)+rightRailHeight+rightRailDist,unID,rightRailOvhgTop, 2			: unID=unID+1

	HOTSPOT a-flightWidth+rightRailFrameThk/2,b-flightWidth-nRisers3rdRun*treadDepth-rightRailOvhgTop,(nRisers+1)*treadHeight+rightRailDist+rightRailOvhgTop*tan(ang),unID,rightRailOffset, 1+128		: unID=unID+1
	HOTSPOT a-flightWidth+rightRailFrameThk/2+0.1,b-flightWidth-nRisers3rdRun*treadDepth-rightRailOvhgTop,(nRisers+1)*treadHeight+rightRailDist+rightRailOvhgTop*tan(ang),unID,rightRailOffset, 3		: unID=unID+1
	HOTSPOT a-flightWidth+rightRailFrameThk/2+rightRailOffset,b-flightWidth-nRisers3rdRun*treadDepth-rightRailOvhgTop,(nRisers+1)*treadHeight+rightRailDist+rightRailOvhgTop*tan(ang),unID,rightRailOffset, 2		: unID=unID+1

	HOTSPOT a-flightWidth+rightRailFrameThk/2+rightRailOffset,b-flightWidth-nRisers3rdRun*treadDepth-rightRailOvhgTop,(nRisers+1)*treadHeight+(rightRailOvhgTop)*tan(ang),unID,rightRailDist, 1+128		: unID=unID+1
	HOTSPOT a-flightWidth+rightRailFrameThk/2+rightRailOffset,b-flightWidth-nRisers3rdRun*treadDepth-rightRailOvhgTop,(nRisers+1)*treadHeight+(rightRailOvhgTop)*tan(ang)-0.1,unID,rightRailDist, 3		: unID=unID+1
	HOTSPOT a-flightWidth+rightRailFrameThk/2+rightRailOffset,b-flightWidth-nRisers3rdRun*treadDepth-rightRailOvhgTop,(nRisers+1)*treadHeight+(rightRailOvhgTop)*tan(ang)+rightRailDist,unID,rightRailDist, 2		: unID=unID+1

	HOTSPOT a-flightWidth+rightRailFrameThk/2+rightRailOffset,b-flightWidth-nRisers3rdRun*treadDepth-rightRailOvhgTop,(nRisers+1)*treadHeight+rightRailOvhgTop*tan(ang)+rightRailDist,unID,rightRailHeight, 1+128			: unID=unID+1
	HOTSPOT a-flightWidth+rightRailFrameThk/2+rightRailOffset,b-flightWidth-nRisers3rdRun*treadDepth-rightRailOvhgTop,(nRisers+1)*treadHeight+rightRailOvhgTop*tan(ang)+rightRailDist-0.1,unID,rightRailHeight, 3			: unID=unID+1
	HOTSPOT a-flightWidth+rightRailFrameThk/2+rightRailOffset,b-flightWidth-nRisers3rdRun*treadDepth-rightRailOvhgTop,(nRisers+1)*treadHeight+rightRailOvhgTop*tan(ang)+rightRailHeight+rightRailDist,unID,rightRailHeight, 2			: unID=unID+1

ENDIF

end


! ==============================================================================
"callRailsForStair":
! ------------------------------------------------------------------------------
!	lraSimple
!	lraComplex
!	additionXComplex
!	additionZComplex
!	hrovL: rail overhang start
!	hrovR: rail overhang end
!	postNumber:   number of posts
!	side: SIDE_LEFT or SIDE_RIGHT
! ==============================================================================
	ani = railAngle
	additionXComplex = additionXComplex
	additionZComplex = additionZComplex
	if side = SIDE_LEFT then
		dsComplex = leftRailDist+treadDepth/2*tan(ang)
	else
		dsComplex = rightRailDist+treadDepth/2*tan(ang)
	endif

	gosub "callRails"
return


! ==============================================================================
"callRailsForLanding":
! ------------------------------------------------------------------------------
!	lraSimple
!	lraComplex
!	hrovL: rail overhang start
!	hrovR: rail overhang end
!	postNumber:   number of posts
!	side: SIDE_LEFT or SIDE_RIGHT
! ==============================================================================
	ani = 0
	additionZComplex = 0
	if side = SIDE_LEFT then
		additionXComplex = leftRailPostSize/2
		dsComplex = leftRailDist
	else
		additionXComplex = rightRailPostSize/2
		dsComplex = rightRailDist
	endif

	gosub "callRails"
return


! ==============================================================================
"callRails":
! ------------------------------------------------------------------------------
!	ani
!	additionXComplex
!	additionZComplex
!	dsComplex
!  ------------------
!	side: SIDE_LEFT or SIDE_RIGHT
!	lraSimple
!	lraComplex
!	hrovL: rail overhang start
!	hrovR: rail overhang end
!	postNumber:   number of posts
! ==============================================================================
	if side = SIDE_LEFT then
		railBarDepth		= leftRailBarDepth
		railBarDiam			= railBarDepth
		railHeight			= leftRailHeight
		railBarFillThk		= leftRailBarThk
		railFrameThk		= leftRailFrameThk
		railDist			= leftRailDist
		railType_m			= leftRailType_m
		railPostSize		= leftRailPostSize
		barNumber			= nBarsLeftRail
		railWireType		= leftWireType_m
		if leftRailType_m = RAIL_WIRED then
			railBarThk		= leftRailWireThk
			railBarDepth	= leftRailWireDepth
			railBarDiam		= leftRailWireDiam
		endif
	else
		railBarDepth		= rightRailBarDepth
		railBarDiam			= railBarDepth
		railHeight			= rightRailHeight
		railBarFillThk		= rightRailBarThk
		railFrameThk		= rightRailFrameThk
		railDist			= rightRailDist
		railType_m			= rightRailType_m
		railPostSize		= rightRailPostSize
		barNumber			= nBarsRightRail
		railWireType		= rightWireType_m
		if rightRailType_m = RAIL_WIRED then
			railBarThk		= rightRailWireThk
			railBarDepth	= rightRailWireDepth
			railBarDiam		= rightRailWireDiam
		endif
	endif

	call "stairRails_m" parameters	railType_m				= railType_m,
									iStairType				= 1,
									bEnableWired02Rail		= 0,
									bEnableNonVerticalRail	= 0,
									additionXComplex		= additionXComplex,
									additionZComplex		= additionZComplex,
									ptyp_m					= 1,
									ani						= ani,
									ab						= 0,
									rb						= 0,
									rom_m					= 1,
									rmm_m					= 1,
									lraSimple				= lraSimple,
									lraComplex				= lraComplex,
									railHeight				= railHeight,
									railHeightComplex		= dsComplex,
									railDist				= railDist,
									gs_detlevel_3D_m		= gs_detlevel_3D_m,
									gs_cont_pen				= gs_cont_pen,
									res						= res,
									rescs					= rescs,
									gs_shadow				= gs_shadow,

									railFrameThk			= railFrameThk,
									railBarDepth			= railBarDepth,
									railBarFillThk			= railBarFillThk,
									railBarDiam				= railBarDiam,
									balusterDist			= treadDepth,
									railFrameMat			= matBar,
									railBaluFillMat			= matSurface,
									barNumber				= barNumber,
									hrovL					= hrovL,
									hrovR					= hrovR,
									railHandrailMat			= matHandrail,
									iBalusterStyle			= railWireType,
									railPostDiam			= railPostSize,
									railPostWidth			= railPostSize,
									railPostThk				= railFrameThk,
									postNumber				= postNumber,
									railPostMat				= matPost

return



]]>
</Script_3D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_2D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[

! ---------- Hotspots ----------[
	unID = 1
	FlightUNID		= 50
	RailUNID		= 100
	StartSymbUNID	= 200
	ArrowUNID		= 300
	RiseRunUNID		= 400
	UpDownUNID		= 500
	NumUnID			= 600

HOTSPOT2 0,0, unID: unID=unID+1

! ---------- Hotspots ----------]

dim drawPart[3] ! 1 - lower,  2 - upper,  3 - full
dim drawDashed[3] ! 1 - lower,  2 - upper,  3 - full
dim drawSteps[3] ! 1 - lower,  2 - upper,  3 - full
dim drawDetails[3] ! 1 - lower,  2 - upper,  3 - full


drawPart[1] = 0		! Lower
drawPart[2] = 0		! Upper
drawPart[3] = 0		! Full
drawDashed[1] = 0	! Lower
drawDashed[2] = 0	! Upper
drawDashed[3] = 0	! Full
drawSteps[1] = 0	! Lower
drawSteps[2] = 0	! Upper
drawSteps[3] = 0	! Full
drawDetails[1] = 0	! Lower
drawDetails[2] = 0	! Upper
drawDetails[3] = 0	! Full
drawNum = 0


abovestory = 0
belowstory = 0
if bStorySensitive then
	if GLOB_CH_STORY_DIST > EPS  then
		abovestory = 1
	else
		if GLOB_CH_STORY_DIST < -EPS  then
			belowstory = 1
		endif
	endif
endif

bCarriageLineExist		= bShowCarriage and bEnableCarriageLine and (GLOB_SCALE <= iShowCarriageUpTo | iShowCarriageUpTo = 1)

! ---------- Settings of 2D Symbol Type ----------
_iSymbolType = 1
_bShowRailIn2D = 1
if gs_detlevel_2D_m = DET2D_SCALESENSITIVE then
	if GLOB_SCALE <= _iScaleMD then									!! Detailed Scale
		_iSymbolType = iEnabledSymbolTypes[iSymbolGroup][3]
	else
		if GLOB_SCALE > _iScaleMD & GLOB_SCALE <= _iScaleSM then	!! Middle Scale
			_iSymbolType = iEnabledSymbolTypes[iSymbolGroup][2]
		else														!! Simple Scale
			_iSymbolType = iEnabledSymbolTypes[iSymbolGroup][1]
			_bShowRailIn2D = 0
		endif
	endif
else
	_iSymbolType = gs_SymbolType_m
endif

IF _iSymbolType = 1 THEN		! Type 1
	drawPart[3]	= 1		! Full
	drawDashed[3] = 1	! Full
ENDIF

IF _iSymbolType = 2 THEN		! Type 2
	drawPart[3]	= 1		! Full
ENDIF

IF _iSymbolType = 3 THEN		! Type 3
	drawPart[1]	= 1		! Lower
ENDIF

IF _iSymbolType = 4 THEN		! Type 4
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
	drawDashed[2] = 1	! Upper
ENDIF

IF _iSymbolType = 5 THEN		! Type 5
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
ENDIF

IF _iSymbolType = 6 THEN		! Type 6
	drawPart[3]	= 1		! Full
	drawDashed[3] = 1	! Full
	drawSteps[3] = 1	! Full
	drawNum = bShowNumbering
ENDIF

IF _iSymbolType = 7 THEN		! Type 7
	drawPart[3]	= 1		! Full
	drawSteps[3] = 1	! Full
	drawNum = bShowNumbering
ENDIF

IF _iSymbolType = 8 THEN		! Type 8
	drawPart[1]	= 1		! Lower
	drawSteps[1] = 1	! Lower
ENDIF

IF _iSymbolType = 9 THEN		! Type 9
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
	drawDashed[2] = 1	! Upper
	drawSteps[1] = 1	! Lower
ENDIF

IF _iSymbolType = 10 THEN		! Type 10
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
	drawSteps[1] = 1	! Lower
ENDIF

IF _iSymbolType = 11 THEN		! Type 11
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
	drawDashed[2] = 1	! Upper
	drawSteps[1] = 1	! Lower
	drawSteps[2] = 1	! Upper
	drawNum = bShowNumbering
ENDIF

IF _iSymbolType = 12 THEN		! Type 12
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
	drawSteps[1] = 1	! Lower
	drawSteps[2] = 1	! Upper
	drawNum = bShowNumbering
ENDIF

IF _iSymbolType = 13 THEN		! Type 13
	drawPart[3]	= 1		! Full
	drawDashed[3] = 1	! Full
	drawSteps[3] = 1	! Full
	drawDetails[3] = 1	! Full

	drawNum = bShowNumbering
ENDIF

IF _iSymbolType = 14 THEN		! Type 14
	drawPart[3]	= 1		! Full
	drawSteps[3] = 1	! Full
	drawDetails[3] = 1	! Full

	drawNum = bShowNumbering
ENDIF

IF _iSymbolType = 15 THEN		! Type 15
	drawPart[1]	= 1		! Lower
	drawSteps[1] = 1	! Lower
	drawDetails[1] = 1	! Lower
	drawSteps[2] = 1	! Upper
!	drawDetails[2] = 1	! Upper ! COMP
ENDIF

IF _iSymbolType = 16 THEN		! Type 16
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
	drawDashed[2] = 1	! Upper
	drawSteps[1] = 1	! Lower
	drawDetails[1] = 1	! Lower
ENDIF

IF _iSymbolType = 17 THEN		! Type 17
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
	drawSteps[1] = 1	! Lower
	drawDetails[1] = 1	! Lower
ENDIF

IF _iSymbolType = 18 THEN		! Type 18
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
	drawDashed[2] = 1	! Upper
	drawSteps[1] = 1	! Lower
	drawSteps[2] = 1	! Upper
	drawDetails[1] = 1	! Lower
	drawDetails[2] = 1	! Upper
	drawNum = bShowNumbering
ENDIF

IF _iSymbolType = 19 THEN		! Type 19
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
	drawDashed[2] = 1	! Upper
	drawSteps[1] = 1	! Lower
	drawSteps[2] = 1	! Upper
	drawDetails[1] = 1	! Lower
	drawNum = bShowNumbering
ENDIF

IF _iSymbolType = 20 THEN		! Type 20
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
	drawSteps[1] = 1	! Lower
	drawSteps[2] = 1	! Upper
	drawDetails[1] = 1	! Lower
	drawDetails[2] = 1	! Upper
	drawNum = bShowNumbering
ENDIF

! ---------- Stories below the home story ---------- [

bBackgroundFill = 1
if belowstory then
	drawPart[3]		= 1
	drawDashed[3]	= 1

	drawSteps[1] = 0
	drawSteps[2] = 0
	drawSteps[3] = 0

	drawDetails[1] = 0
	drawDetails[2] = 0
	drawDetails[3] = 0

	drawNum = 0
endif

! ---------- Stories below the home story ---------- ]

! ---------- Stories above the home story ---------- [
if abovestory then
	drawPart[1] = 0
	drawPart[2] = 0
	drawPart[3] = 0

	if gs_TreadStUp then
		drawSteps[1] = 1
		drawSteps[2] = 1
		drawSteps[3] = 1

		if drawDetails[1] | drawDetails[3] then
			drawDetails[1] = 1
			drawDetails[2] = 1
			drawDetails[3] = 1
		endif

	else
		drawSteps[1] = 0
		drawSteps[2] = 0
		drawSteps[3] = 0

		drawDetails[1] = 0
		drawDetails[2] = 0
		drawDetails[3] = 0
	endif

	if gs_BreaklineStUp = 0 then
		drawPart[3] = 1
	else
		if gs_LowerPartStUp then
			drawPart[1] = 1
		endif
		if gs_UpperPartStUp then
			drawPart[2] = 1
		endif
	endif

	if gs_numaStUp & gs_TreadStUp & ((drawPart[1] & drawPart[2]) | drawPart[3]) then
		drawNum = 1
	else
		drawNum = 0
	endif
endif


td_t=treadDepth
bet_t=bet

hasBreak1st = 0
hasBreak2nd	= 0
hasBreak3rd	= 0
	NumStline = INT (gs_BreakHeight/treadHeight)
	NumStline = max(1,NumStline)

FOR iFlight = 1 TO 3
	DRAWINDEX 10
	PEN gs_cont_pen
	FILL gs_fill_type

	if iFlight = 1 then
		RNU_temp = nRisers1stRun-1
		if drawPart[3] then
			bBackgroundFill	= 1
			drawBreakLine = 0
		else
			IF nRisers1stRun > NumStline+1 THEN
				drawBreakLine = 1
				hasBreak1st = 1
				bBackgroundFill	= gs_FillAbove
			else
				drawBreakLine = 0
				bBackgroundFill	= 1
			ENDIF
		endif

		treadDepth = td_t
		FILL_above = gs_FillAbove
	endif


	if iFlight = 2 then
		RNU_temp	= nRisers2ndRun-1
		if drawPart[3] then
			bBackgroundFill = 1
			drawBreakLine = 0
		else
			if nRisers1stRun <= (NumStline+1) & (nRisers1stRun+nRisers2ndRun) > (NumStline+1) then
				drawBreakLine = 1
				hasBreak2nd = 1
				NumStline = max(1,(NumStline-nRisers1stRun))
				bBackgroundFill	= gs_FillAbove
			else
				drawBreakLine = 0
				if hasBreak1st then
					bBackgroundFill	= gs_FillAbove
				else
					bBackgroundFill	= 1
				endif
			endif
		endif

		treadDepth=td2
		ang=ang2
		bet=bet2
	endif

	if iFlight = 3 then
		RNU_temp	= nRisers3rdRun
		if drawPart[3] then
			bBackgroundFill = 1
			drawBreakLine = 0
		else
			if (nRisers1stRun+nRisers2ndRun) <= (NumStline+1) then
				drawBreakLine = 1
				hasBreak3rd	= 1
				NumStline = max(1,(NumStline-(nRisers1stRun+nRisers2ndRun)))
				bBackgroundFill	= gs_FillAbove
			else
				drawBreakLine = 0
				if hasBreak1st | hasBreak2nd then
				bBackgroundFill	= gs_FillAbove
				else
					bBackgroundFill	= 1
				endif
			endif
		endif

		treadDepth=td_t
		ang=ATN(treadHeight/treadDepth)
		bet=bet_t
	ENDIF
	if belowStory then bBackgroundFill	= 0

	! ==========================================================================
	! CONTOUR LINES
	! ==========================================================================

	IF not(drawBreakLine) THEN
		IF	((iFlight = 1 | (iFlight = 2 & not(hasBreak1st) & not(hasBreak2nd))) & drawPart[1]) | \
			(iFlight = 2 & hasBreak1st & drawPart[2]) | \
			(iFlight = 3 & drawPart[2]) | \
			(drawPart[3]) then

			if aboveStory then
				PEN gs_LinePenStUp
				LINE_TYPE gs_LineTypeStUp
			else
				IF	((iFlight = 1 | (iFlight = 2 & not(hasBreak1st) & not(hasBreak2nd))) & drawDashed[1]) | \
					(iFlight = 2 & hasBreak1st & drawDashed[2]) | \
					(iFlight = 3 & drawDashed[2]) | \
					(drawDashed[3]) then
					PEN gs_DashLinePen
					LINE_TYPE dash_line
				else
					PEN gs_cont_pen
					LINE_TYPE solid_line
				endif
			endif

			mask = 1
			if iFlight = 1 then xNosing = nosing * (drawDetails[1]|drawDetails[3])
			if iFlight = 2 then xNosing = nosing * ((not(hasBreak1st) & not(hasBreak2nd) & drawDetails[1])| (hasBreak1st & drawDetails[2]) | drawDetails[3])
			if iFlight = 3 then
				xNosing = nosing * (drawDetails[2]|drawDetails[3])
				mask = 0
			endif

			! ---------- Contour of Landing ----------
			if iFlight = 1 | iFlight = 2 then
				POLY2_b 5, 1+2*bBackgroundFill+4+64, gs_fill_pen, gs_back_pen,
					flightWidth,(RNU_temp)*treadDepth-xNosing, 1,
					flightWidth,(RNU_temp)*treadDepth, 0,
					flightWidth,(RNU_temp)*treadDepth+flightWidth, 1,
					0,			(RNU_temp)*treadDepth+flightWidth, 1,
					0,			(RNU_temp)*treadDepth-xNosing, 0

				HOTLINE2 flightWidth, (RNU_temp)*treadDepth-xNosing,		flightWidth,	(RNU_temp)*treadDepth+flightWidth
				HOTLINE2 flightWidth, (RNU_temp)*treadDepth+flightWidth,	0,				(RNU_temp)*treadDepth+flightWidth
				HOTLINE2 0,			(RNU_temp)*treadDepth+flightWidth,	0,				(RNU_temp)*treadDepth-xNosing
				HOTLINE2 0,			(RNU_temp)*treadDepth-xNosing,		flightWidth,	(RNU_temp)*treadDepth-xNosing
			endif

			POLY2_b 4, 1+2*bBackgroundFill+4+64, gs_fill_pen, gs_back_pen,
				0,			-xNosing, 1,
				flightWidth,-xNosing, 1,
				flightWidth,(RNU_temp)*treadDepth-xNosing*mask, 1,
				0,			(RNU_temp)*treadDepth-xNosing*mask, 1

			HOTLINE2 0, -xNosing, flightWidth, -xNosing
			HOTLINE2 flightWidth, -xNosing, flightWidth, (RNU_temp)*treadDepth-xNosing
			HOTLINE2 flightWidth, (RNU_temp)*treadDepth-xNosing,0, (RNU_temp)*treadDepth-xNosing
			HOTLINE2 0, (RNU_temp)*treadDepth-xNosing,0, -xNosing

		ENDIF
	ELSE

! with Break Line
! ---------------------------------------------------------------------------------------------
		if breakline_style_m = 2 then		! Zig Zag
			angle_breakline=ATN(2*treadDepth/flightWidth)
			ZigZag1Y=(2/5*flightWidth)*tan(angle_breakline)
			ZigZag2Y=(7/20*flightWidth)*tan(angle_breakline)
		else
			if breakline_style_m = 3 then		! Zig Zag CHI
				angle_breakline=ATN(2*treadDepth/flightWidth)
				ZigZag1Y=(2/5*flightWidth)*tan(angle_breakline)
				ZigZag2Y=(2/5*flightWidth)*tan(angle_breakline)
			endif
		endif

		IF drawPart[1] THEN
			if aboveStory then
				PEN gs_LinePenStUp
				LINE_TYPE gs_LineTypeStUp
			else
				if drawDashed[1] then
					PEN gs_DashLinePen
					LINE_TYPE dash_line
				else
					PEN gs_cont_pen
					LINE_TYPE solid_line
				endif
			endif

			xNosing = nosing * drawDetails[1]

			if breakline_style_m = 2 then
				! ---------- Zig Zag ----------
				POLY2_b 8, 1+2+4+64, gs_fill_pen, gs_back_pen,
						0, -xNosing, 1,
						flightWidth, -xNosing, 1,
						flightWidth, (NumStline+1)*treadDepth-xNosing, 1,
						6/10*flightWidth,(NumStline+1)*treadDepth-xNosing-ZigZag1Y, 1,
						6/10*flightWidth,(NumStline-1)*treadDepth-xNosing+ZigZag1Y, 1,
						4/10*flightWidth,(NumStline+1)*treadDepth-xNosing-ZigZag1Y, 1,
						4/10*flightWidth,(NumStline-1)*treadDepth-xNosing+ZigZag1Y, 1,
						0, (NumStline-1)*treadDepth-xNosing, 1
			else
				if breakline_style_m = 3 then
					! ---------- Zig Zag CHI ----------
					POLY2_b 9, 1+2+64, gs_fill_pen, gs_back_pen,
							0, -xNosing, 1,
							flightWidth, -xNosing, 1,
							flightWidth, (NumStline+1)*treadDepth-xNosing, 1,
							6/10*flightWidth,(NumStline+1)*treadDepth-xNosing-ZigZag1Y, 1,
							6/10*flightWidth,(NumStline-1)*treadDepth-xNosing+ZigZag1Y, 1,
							4/10*flightWidth,(NumStline+1)*treadDepth-xNosing-ZigZag1Y+breakLineWidth, 1,
							4/10*flightWidth,(NumStline-1)*treadDepth-xNosing+ZigZag1Y, 1,
							0, (NumStline-1)*treadDepth-xNosing, 1,
							0, -xNosing, -1
				else
					! ---------- Straight ----------
					POLY2_b 4, 1+2+4+64, gs_fill_pen, gs_back_pen,
							0, -xNosing, 1,
							flightWidth, -xNosing, 1,
							flightWidth, (NumStline+1)*treadDepth-xNosing, 1,
							0, (NumStline-1)*treadDepth-xNosing, 1
				endif
			endif


			HOTSPOT2 flightWidth/2,(NumStline)*treadDepth-xNosing, FlightUNID: FlightUNID=FlightUNID+1
			HOTSPOT2 0,			(NumStline-1)*treadDepth-xNosing, FlightUNID: FlightUNID=FlightUNID+1
			HOTSPOT2 flightWidth,	(NumStline+1)*treadDepth-xNosing, FlightUNID: FlightUNID=FlightUNID+1

			HOTLINE2 0, -xNosing, flightWidth, -xNosing
			HOTLINE2 flightWidth, -xNosing, flightWidth, (NumStline+1)*treadDepth-xNosing
			HOTLINE2 flightWidth, (NumStline+1)*treadDepth-xNosing,0, (NumStline-1)*treadDepth-xNosing
			HOTLINE2 0, (NumStline-1)*treadDepth-xNosing,0, -xNosing
		ENDIF

		IF drawPart[2] THEN
			if aboveStory then
				PEN gs_LinePenStUp
				LINE_TYPE gs_LineTypeStUp
			else
				if drawDashed[2] then
					PEN gs_DashLinePen
					LINE_TYPE dash_line
				else
					PEN gs_cont_pen
					LINE_TYPE solid_line
				endif
			endif

			if iFlight = 3 then	mask = 0 else mask = 1
			xNosing = nosing * drawDetails[2]


			! ---------- Contour of Landing ----------
			if iFlight = 1 | iFlight = 2 THEN
				POLY2_b 5, 1+2*bBackgroundFill+4+64, gs_fill_pen, gs_back_pen,
						flightWidth, (RNU_temp)*treadDepth-xNosing, 1,
						flightWidth, (RNU_temp)*treadDepth, 0,
						flightWidth, (RNU_temp)*treadDepth+flightWidth, 1,
						0, (RNU_temp)*treadDepth+flightWidth, 1,
						0, (RNU_temp)*treadDepth-xNosing, 0

				HOTLINE2 flightWidth, (RNU_temp)*treadDepth-xNosing,flightWidth, (RNU_temp)*treadDepth+flightWidth
				HOTLINE2 flightWidth, (RNU_temp)*treadDepth+flightWidth,0, (RNU_temp)*treadDepth+flightWidth
				HOTLINE2 0, (RNU_temp)*treadDepth+flightWidth,0, (RNU_temp)*treadDepth-xNosing
				HOTLINE2 0, (RNU_temp)*treadDepth-xNosing,flightWidth, (RNU_temp)*treadDepth-xNosing
			endif

			if breakline_style_m = 2 then
				! ---------- Zig Zag ----------
				POLY2_b 8, 1+2*bBackgroundFill+4+64, gs_fill_pen, gs_back_pen,
						0, (NumStline-1)*treadDepth-xNosing+ breakLineWidth, 1,
						7/20*flightWidth, (NumStline-1)*treadDepth -xNosing+ breakLineWidth +ZigZag2Y, 1,
						7/20*flightWidth, (NumStline-1)*treadDepth -xNosing+ breakLineWidth +ZigZag2Y+2*(treadDepth-ZigZag1Y), 1,
						11/20*flightWidth, (NumStline-1)*treadDepth -xNosing+ breakLineWidth +ZigZag2Y, 1,
						11/20*flightWidth, (NumStline-1)*treadDepth -xNosing+ breakLineWidth +ZigZag2Y+2*(treadDepth-ZigZag1Y), 1,
						flightWidth, (NumStline+1)*treadDepth-xNosing+ breakLineWidth, 1,
						flightWidth, (RNU_temp)*treadDepth-xNosing*mask, 1,
						0, (RNU_temp)*treadDepth-xNosing*mask, 1
			else
				if breakline_style_m = 3 then
					! ---------- Zig Zag CHI ----------
					POLY2_b 8, 1+2*bBackgroundFill+4+64, gs_fill_pen, gs_back_pen,
							0, (NumStline-1)*treadDepth-xNosing+ breakLineWidth, 1,
							4/10*flightWidth, (NumStline-1)*treadDepth -xNosing+ breakLineWidth +ZigZag2Y, 1,
							4/10*flightWidth, (NumStline+1)*treadDepth-xNosing-ZigZag1Y+breakLineWidth, 1,
							6/10*flightWidth, (NumStline-1)*treadDepth-xNosing+ZigZag1Y, 1,
							6/10*flightWidth, (NumStline-1)*treadDepth -xNosing+ breakLineWidth +ZigZag2Y+2*(treadDepth-ZigZag1Y), 1,
							flightWidth, (NumStline+1)*treadDepth-xNosing+ breakLineWidth, 1,
							flightWidth, (RNU_temp)*treadDepth-xNosing*mask, 1,
							0, (RNU_temp)*treadDepth-xNosing*mask, 1
				else
					! ---------- Straight ----------
					POLY2_b 4, 1+2*bBackgroundFill+4+64, gs_fill_pen, gs_back_pen,
							0, (NumStline-1)*treadDepth-xNosing+breakLineWidth, 1,
							flightWidth, (NumStline+1)*treadDepth-xNosing+breakLineWidth, 1,
							flightWidth, (RNU_temp)*treadDepth-xNosing*mask, 1,
							0, (RNU_temp)*treadDepth-xNosing*mask, 1
				endif
			endif

			HOTLINE2 0, (NumStline-1)*treadDepth-xNosing+breakLineWidth, flightWidth, (NumStline+1)*treadDepth-xNosing+breakLineWidth
			HOTLINE2 flightWidth, (NumStline+1)*treadDepth-xNosing+breakLineWidth,flightWidth, (RNU_temp)*treadDepth-xNosing*mask
			HOTLINE2 flightWidth, (RNU_temp)*treadDepth-xNosing*mask,0, (RNU_temp)*treadDepth-xNosing*mask
			HOTLINE2 0, (RNU_temp)*treadDepth-xNosing*mask,0, (NumStline-1)*treadDepth-xNosing+breakLineWidth

			! BREAK LINE
			HOTSPOT2 flightWidth/2,		(NumStline)*treadDepth-xNosing,					FlightUNID, breakLineWidth, 1+128	: FlightUNID=FlightUNID+1
			HOTSPOT2 flightWidth/2,		(NumStline)*treadDepth-xNosing-1,				FlightUNID, breakLineWidth, 3		: FlightUNID=FlightUNID+1
			HOTSPOT2 flightWidth/2,		(NumStline)*treadDepth-xNosing+breakLineWidth,	FlightUNID, breakLineWidth, 2		: FlightUNID=FlightUNID+1

			HOTSPOT2 0, (NumStline-1)*treadDepth-xNosing+breakLineWidth,				FlightUNID: FlightUNID=FlightUNID+1
			HOTSPOT2 flightWidth, (NumStline+1)*treadDepth-xNosing+breakLineWidth,	FlightUNID: FlightUNID=FlightUNID+1
		endif
	endif

	! ==========================================================================
	! TREADS
	! ==========================================================================
	DRAWINDEX 20

	if not(drawBreakLine) then
		IF	((iFlight = 1|(iFlight = 2 & not(hasBreak1st) & not(hasBreak2nd))) & drawPart[1] & drawSteps[1]) | \
			(iFlight = 2 & (hasBreak1st & drawPart[2] & drawSteps[2])) | \
			(iFlight = 3 & drawPart[2] & drawSteps[2]) | \
			(drawPart[3] & drawSteps[3]) then

			if aboveStory then
				PEN gs_LinePenStUp
				LINE_TYPE gs_LineTypeStUp
			else
				IF	((iFlight = 1 | (iFlight = 2 & not(hasBreak1st) & not(hasBreak2nd))) & drawDashed[1]) | \
					(iFlight = 2 & hasBreak1st & drawDashed[2]) | \
					(iFlight = 3 & drawDashed[2]) | \
					(drawDashed[3]) then
					PEN gs_DashLinePen
					LINE_TYPE dash_line
				else
					PEN gs_cont_pen
					LINE_TYPE solid_line
				endif
			endif

			FOR numTread = 1 to RNU_temp
				LINE2 0,-xNosing, flightWidth, -xNosing
				HOTLINE2 0,-xNosing, flightWidth, -xNosing
				ADD2 0,treadDepth
			NEXT numTread
			DEL RNU_temp

			IF	((iFlight = 1 | (iFlight = 2 & not(hasBreak1st) & not(hasBreak2nd))) & drawDetails[1]) | \
				(iFlight = 2 & hasBreak1st & drawDetails[2]) | \
				(iFlight = 3 & drawDetails[2]) | \
				(drawDetails[3]) then

				PEN gs_DashLinePen
				LINE_TYPE dash_line

				FOR numTread = 1 to RNU_temp+mask
					LINE2 0, 0, flightWidth, 0
					HOTLINE2 0, 0, flightWidth, 0
					ADD2 0,treadDepth
				NEXT numTread
				DEL numTread -1
			endif
		endif
	else
		if drawPart[1] & drawSteps[1] then

			xNosing = nosing * drawDetails[1]


			FOR numTread = 1 to NumStline+1
				if aboveStory then
					PEN gs_LinePenStUp
					LINE_TYPE gs_LineTypeStUp
				else
					if drawDashed[1] then
						PEN gs_DashLinePen
						LINE_TYPE dash_line
					else
						PEN gs_cont_pen
						LINE_TYPE solid_line
					endif
				endif

				StartSolid = 0
				IF breakline_style_m = 1 THEN
					IF numTread=NumStline THEN StartSolid=flightWidth/2
				ELSE
					IF numTread=NumStline THEN StartSolid=flightWidth*6/10
				ENDIF

				IF numTread<=NumStline THEN
					LINE2 StartSolid,treadDepth-xNosing, flightWidth, treadDepth-xNosing
					HOTLINE2 StartSolid,treadDepth-xNosing, flightWidth, treadDepth-xNosing
				ENDIF

				if drawDetails[1] THEN
					PEN gs_DashLinePen
					LINE_TYPE dash_line

					StartDashed=0
					if breakline_style_m = 1 then	! Straight
						IF ABS(numTread-NumStline-1)<0.001 THEN StartDashed=flightWidth/2+xNosing/tan(bet)
					ELSE
						IF distZigZag >= 4/10*flightWidth THEN
							distZigZag = 4/10*flightWidth
						ELSE
							distZigZag=(flightWidth*(treadDepth-xNosing))/(2*treadDepth)
						ENDIF

						IF numTread=NumStline+1 THEN StartDashed=max(0,leftRailOffset+leftRailFrameThk,flightWidth-distZigZag)
					ENDIF

					IF ABS(numTread-(NumStline))<0.01 THEN StartDashed=max(0,xNosing/tan(bet))

					LINE2 StartDashed,0,flightWidth,0
					HOTLINE2 StartDashed,0,flightWidth,0
				ENDIF
				ADD2 0,treadDepth
			NEXT numTread
			DEL numTread-1
		endif

		IF drawPart[2] & drawSteps[2] THEN

			xNosing = nosing * drawDetails[2]

			ADD2 0,(NumStline)*treadDepth
			FOR numTread = 1 to RNU_temp-NumStline+mask
				if aboveStory then
					PEN gs_LinePenStUp
					LINE_TYPE gs_LineTypeStUp
				else
					if drawDashed[2] then
						PEN gs_DashLinePen
						LINE_TYPE dash_line
					else
						PEN gs_cont_pen
						LINE_TYPE solid_line
					endif
				endif

				EndSolid=flightWidth
				if breakline_style_m = 1 then	! Straight
					IF numTread=1 THEN EndSolid=Max(0,Min(flightWidth,(treadDepth-breakLineWidth)/tan(bet)))
					IF numTread=2 THEN EndSolid=Max(0,Min(flightWidth,(2*treadDepth-breakLineWidth)/tan(bet)))
					IF numTread=3 THEN EndSolid=Max(0,Min(flightWidth,(3*treadDepth-breakLineWidth)/tan(bet)))
				else
					if breakline_style_m = 3 then	! Zigzag CHI
						ZigZagCorrection = 4/10
					else
						ZigZagCorrection = 7/20
					endif

					IF numTread=1 THEN EndSolid=Max(0,Min(ZigZagCorrection*flightWidth,(treadDepth-breakLineWidth)/tan(bet)))
					IF numTread=2 THEN
						IF ZigZag2Y+2*(treadDepth-ZigZag1Y)<2*treadDepth-breakLineWidth THEN EndSolid=Max(0,Min(flightWidth,(2*treadDepth-breakLineWidth)/tan(bet)))
						IF ZigZag2Y+2*(treadDepth-ZigZag1Y)>=2*treadDepth-breakLineWidth THEN EndSolid=Max(0,Min(flightWidth,ZigZagCorrection*flightWidth))
					ENDIF
					IF numTread=3 THEN EndSolid=Max(0,Min(flightWidth,(3*treadDepth-breakLineWidth)/tan(bet)))
				ENDIF

				LINE2 0,-xNosing,EndSolid,-xNosing
				HOTLINE2 0,-xNosing,EndSolid,-xNosing

				IF drawDetails[2] THEN
					PEN gs_DashLinePen
					LINE_TYPE dash_line

					EndDashed=flightWidth
					if breakline_style_m = 1 then	! Straight
						IF numTread=1 THEN EndDashed=Max(0,Min(flightWidth,(treadDepth-breakLineWidth+xNosing)/tan(bet)))
						IF numTread=2 THEN EndDashed=Max(0,Min(flightWidth,(2*treadDepth-breakLineWidth+xNosing)/tan(bet)))
					ELSE
						IF distZigZag <= ZigZagCorrection*flightWidth THEN
							distZigZag = ZigZagCorrection*flightWidth
						ELSE
							distZigZag=(flightWidth*(treadDepth/2+xNosing))/(2*treadDepth)
						ENDIF

						IF numTread=1 THEN EndDashed=Max(0,Min(ZigZagCorrection*flightWidth,(treadDepth-breakLineWidth+xNosing)/tan(bet)))
						IF numTread=2 THEN
							IF ZigZag2Y+2*(treadDepth-ZigZag1Y)<2*treadDepth+xNosing-breakLineWidth THEN EndDashed=Max(0,Min(flightWidth,(2*treadDepth+xNosing-breakLineWidth)/tan(bet)))
							IF ZigZag2Y+2*(treadDepth-ZigZag1Y)>=2*treadDepth+xNosing-breakLineWidth THEN EndDashed=Max(0,Min(flightWidth,ZigZagCorrection*flightWidth))
						ENDIF
						IF numTread=3 THEN EndDashed=Max(0,Min(flightWidth,(3*treadDepth-breakLineWidth+xNosing)/tan(bet)))
					ENDIF

					LINE2 0,0,EndDashed,0
					HOTLINE2 0,0,EndDashed,0
				ENDIF

				ADD2 0,treadDepth
			NEXT numTread
			DEL numTread-1
			DEL 1
		endif
	endif

	! ==========================================================================
	! WALKING LINE / ARROWHEAD / START END SYMBOL
	! ==========================================================================
	reverseWalkline = 0
	if walkingDirUPDN_m = 3 | walkingDirUPDN_m = 4 | (walkingDirUPDN_m = 6 & abovestory) then
		reverseWalkline = 1
	endif

	if bShowWalkLine & not(belowStory) then

		PEN gs_wLinePen
		FILL gs_ArrowFill

		for i = 1 to 3
			DRAWINDEX 40
			drawWalkLine = 1
			if not(bShowWalkLineAboveBreakline) & i = 2 then drawWalkLine = 0

			if drawPart[i] & drawWalkLine then
				xNosing = nosing * drawDetails[i]
				startLine = -xNosing
				endLine = (RNU_temp)*treadDepth
				penFillArrow = gs_ArrowFillPen
				if i = 1 then
					if drawBreakline then
						endLine = (NumStline)*treadDepth-xNosing
					else
						if (iFlight = 1) | (iFlight = 2 & not(hasBreak1st)) then
							endLine = (RNU_temp)*treadDepth
						else
							drawWalkLine = 0
						endif
					endif
				endif
				if i = 2 then
					if drawBreakline then
						startLine = startLine + (NumStline)*treadDepth+breakLineWidth
					else
						if (iFlight = 1) | (iFlight = 2 & not(hasBreak1st)) then
							drawWalkLine = 0
						else
							endLine = (RNU_temp)*treadDepth
						endif
					endif
					penFillArrow = gs_ArrowFillPenAbove
					if walkingDirUPDN_m = 5 then reverseWalkline = 1
				endif

				if aboveStory then
					LINE_TYPE gs_wLineTypeStUp
				else
					if (drawDashed[i]) then
						LINE_TYPE gs_wLineTypeAbove
					else
						LINE_TYPE gs_wLineType1
					endif
				endif

				IF i = 3 & walkingDirUPDN_m = 5 THEN
					if iFlight = 1 then
					! Up Down Both - UP
						endLine = startLine + (RNU_temp)*treadDepth
						ADD2 flightWidth/2, endLine
						GOSUB "Arrowhead Symbol"
						DEL 1
						endLine = endLine-lengthArrowHead

						line2 flightWidth/2, startLine, flightWidth/2, endLine

						ADD2 flightWidth/2, startLine
						GOSUB "Start End Symbol"
						DEL 1
					endif

					if iFlight = 2 then drawWalkLine = 0

					if iFlight = 3 then
					! Up Down Both - Down
						endLine = (RNU_temp)*treadDepth
						startLine = startLine
						ADD2 flightWidth/2, startLine
						MUL2 1, -1
						GOSUB "Arrowhead Symbol"
						DEL 2
						startLine = startLine+lengthArrowHead

						ADD2 flightWidth/2, endLine
						GOSUB "Start End Symbol"
						DEL 1
					endif
				else

					! Arrow Head below Break Line
					if not(reverseWalkline)	& (((i=3|i=2) & iFlight=3) | (i=1 & drawBreakLine)) then
						ADD2 flightWidth/2, endLine
						GOSUB "Arrowhead Symbol"
						DEL 1
						endLine = endLine-lengthArrowHead
					endif

					if not(reverseWalkline) & ((i=3|i=1) & iFlight=1) then
						ADD2 flightWidth/2, startLine
						GOSUB "Start End Symbol"
						DEL 1
					endif

					! Arrow Head on Start
					if reverseWalkline & (((i=3|i=1) & iFlight=1) | (i=2 & drawBreakLine))then
						ADD2 flightWidth/2, startLine
						MUL2 1, -1
						GOSUB "Arrowhead Symbol"
						DEL 2
						startLine = startLine+lengthArrowHead
					endif

					if reverseWalkline & ((i=3|i=2) & iFlight=3) then
						ADD2 flightWidth/2, endLine
						GOSUB "Start End Symbol"
						DEL 1
					endif
				endif

				! Walking Line
				if drawWalkLine then line2 flightWidth/2, startLine, flightWidth/2, endLine
			endif
		next i

		if drawBreakLine then
			HOTSPOT2 flightWidth/2,(NumStline)*treadDepth-xNosing,					FlightUNID,breakLineWidth,1+128		:FlightUNID=FlightUNID+1
			HOTSPOT2 flightWidth/2,(NumStline)*treadDepth-0.1-xNosing,				FlightUNID,breakLineWidth,3			:FlightUNID=FlightUNID+1
			HOTSPOT2 flightWidth/2,(NumStline)*treadDepth+breakLineWidth-xNosing,	FlightUNID,breakLineWidth,2			:FlightUNID=FlightUNID+1
		endif

		if 	(iFlight = 1 & ((not(hasBreak1st) & drawPart[1]) | (hasBreak1st & drawPart[2] & bShowWalkLineAboveBreakline) | (drawPart[3] & (walkingDirUPDN_m <> 5) ))) | \
			(iFlight = 2 & ((not(hasBreak1st) & not(hasBreak2nd) & drawPart[1]) | ((hasBreak1st|hasBreak2nd) & drawPart[2] & bShowWalkLineAboveBreakline) | (drawPart[3] & (walkingDirUPDN_m <> 5) ))) then
			if aboveStory then
				LINE_TYPE gs_wLineTypeStUp
			else
			if 	(iFlight = 1 & ((not(hasBreak1st) & drawDashed[1]) | (hasBreak1st & drawDashed[2]) | (drawDashed[3] & (walkingDirUPDN_m <> 5) ))) | \
				(iFlight = 2 & ((not(hasBreak1st) & not(hasBreak2nd) & drawDashed[1]) | ((hasBreak1st|hasBreak2nd) & drawDashed[2]) | (drawDashed[3] & (walkingDirUPDN_m <> 5) ))) then
					LINE_TYPE gs_wLineTypeAbove
				else
					LINE_TYPE gs_wLineType1
				endif
			endif
			LINE2 flightWidth/2,(RNU_temp)*treadDepth,flightWidth/2,(RNU_temp)*treadDepth+flightWidth/2
			LINE2 flightWidth/2,(RNU_temp)*treadDepth+flightWidth/2,flightWidth,(RNU_temp)*treadDepth+flightWidth/2
		ENDIF
	ENDIF

	DRAWINDEX 10
	ADD2 flightWidth,RNU_temp*treadDepth+flightWidth
	ROT2 -90
NEXT iFlight
DEL 3*2

treadDepth=td_t
bet=bet_t


!===============================================================================
! --- Carriage Line ---
!===============================================================================

if bCarriageLineExist and not(belowStory) then
	fill gs_fill_type

	bShowCarriagePart1	= 0
	bShowCarriagePart2	= 0

	beamNum				= 2
	beamThk				= woodBaseThk
	beamOffsetRight		= woodBaseOffset
	beamOffsetLeft		= woodBaseOffset
	carriageBaseDist	= flightWidth
	carrBreakLineWidth	= breakLineWidth

	if drawPart[3] then
		!!!!!******************************      1st RUN + LANDING 1.
		add2 0, bRiserCover * riserCoverThk
			beamLength			= (nRisers1stRun - 1) * treadDepth + flightWidth - bRiserCover * riserCoverThk
			bCarrAboveBreakLine	= 0
			bBreakCarriageLine	= 0
			gosub "carriage"
		del 1

		!!!!!******************************      2nd RUN + LANDING 2.
		add2 flightWidth - woodBaseOffset, flightWidth + (nRisers1stRun - 1) * treadDepth
		rot2 -90
			beamLength			= (nRisers2ndRun - 1) * td2 + flightWidth + woodBaseOffset
			bCarrAboveBreakLine	= 0
			bBreakCarriageLine	= 0
			gosub "carriage"
		del 2

		!!!!!******************************      3rd RUN
		add2 a, (nRisers1stRun-1)*treadDepth + woodBaseOffset
		rot2 -180
			beamLength			= nRisers3rdRun * treadDepth + woodBaseOffset
			bCarrAboveBreakLine	= 0
			bBreakCarriageLine	= 0
			gosub "carriage"
		del 2
	else
		if hasBreak1st then
			if drawPart[1] then
				!!!!!******************************      1st RUN + LANDING 1.
				add2 0, bRiserCover * riserCoverThk
					beamLength			= (nRisers1stRun - 1) * treadDepth + flightWidth - bRiserCover * riserCoverThk
					bCarrAboveBreakLine	= 0
					bBreakCarriageLine	= 1
					bShowCarriagePart1	= 1
					bShowCarriagePart2	= 0
					brLineAngle			= bet
					xNosing				= nosing * drawDetails[1]
					carrBreakLineDist	= NumStline * treadDepth - xNosing + (flightWidth / 2 - beamOffsetRight - beamThk / 2) * tan(brLineAngle) - bRiserCover * riserCoverThk
					gosub "carriage"
				del 1
			endif

			if drawPart[2] then
				!!!!!******************************      1st RUN + LANDING 1.
				add2 0, bRiserCover * riserCoverThk
					beamLength			= (nRisers1stRun - 1) * treadDepth + flightWidth - bRiserCover * riserCoverThk
					bCarrAboveBreakLine	= 1
					bBreakCarriageLine	= 1
					bShowCarriagePart1	= 0
					bShowCarriagePart2	= 1
					brLineAngle			= bet
					xNosing				= nosing * drawDetails[2]
					carrBreakLineDist	= NumStline * treadDepth - xNosing + (flightWidth / 2 - beamOffsetRight - beamThk / 2) * tan(brLineAngle) - bRiserCover * riserCoverThk
					gosub "carriage"
				del 1

				!!!!!******************************      2nd RUN + LANDING 2.
				add2 flightWidth - woodBaseOffset, flightWidth + (nRisers1stRun - 1) * treadDepth
				rot2 -90
					beamLength			= (nRisers2ndRun - 1) * td2 + flightWidth + woodBaseOffset
					bCarrAboveBreakLine	= 1
					bBreakCarriageLine	= 0
					gosub "carriage"
				del 2

				!!!!!******************************      3rd RUN
				add2 a, (nRisers1stRun-1)*treadDepth + woodBaseOffset
				rot2 -180
					beamLength			= nRisers3rdRun * treadDepth + woodBaseOffset
					bCarrAboveBreakLine	= 1
					bBreakCarriageLine	= 0
					gosub "carriage"
				del 2
			endif
		endif
		if hasBreak2nd then
			if drawPart[1] then
				!!!!!******************************      1st RUN + LANDING 1.
				add2 0, bRiserCover * riserCoverThk
					beamLength			= (nRisers1stRun - 1) * treadDepth + flightWidth - bRiserCover * riserCoverThk
					bCarrAboveBreakLine	= 0
					bBreakCarriageLine	= 0
					gosub "carriage"
				del 1

				!!!!!******************************      2nd RUN + LANDING 2.
				add2 flightWidth - woodBaseOffset, flightWidth + (nRisers1stRun - 1) * treadDepth
				rot2 -90
					beamLength			= (nRisers2ndRun - 1) * td2 + flightWidth + woodBaseOffset
					bCarrAboveBreakLine	= 0
					bBreakCarriageLine	= 1
					bShowCarriagePart1	= 1
					bShowCarriagePart2	= 0
					brLineAngle			= bet2
					xNosing				= nosing * drawDetails[1]
					carrBreakLineDist	= td2 + (NumStline - 1) * td2 - xNosing + (flightWidth / 2 - beamOffsetRight - beamThk / 2) * tan(brLineAngle) + beamOffsetRight
					gosub "carriage"
				del 2
			endif

			if drawPart[2] then
				!!!!!******************************      2nd RUN + LANDING 2.
				add2 flightWidth - woodBaseOffset, flightWidth + (nRisers1stRun - 1) * treadDepth
				rot2 -90
					beamLength			= (nRisers2ndRun - 1) * td2 + flightWidth + woodBaseOffset
					bCarrAboveBreakLine	= 1
					bBreakCarriageLine	= 1
					bShowCarriagePart1	= 0
					bShowCarriagePart2	= 1
					brLineAngle			= bet2
					xNosing				= nosing * drawDetails[2]
					carrBreakLineDist	= td2 + (NumStline - 1) * td2 - xNosing + (flightWidth / 2 - beamOffsetRight - beamThk / 2) * tan(brLineAngle) + beamOffsetRight
					gosub "carriage"
				del 2

				!!!!!******************************      3rd RUN
				add2 a, (nRisers1stRun-1)*treadDepth + woodBaseOffset
				rot2 -180
					beamLength			= nRisers3rdRun * treadDepth + woodBaseOffset
					bCarrAboveBreakLine	= 1
					bBreakCarriageLine	= 0
					gosub "carriage"
				del 2
			endif
		endif
		if hasBreak3rd then
			if drawPart[1] then
				!!!!!******************************      1st RUN + LANDING 1.
				add2 0, bRiserCover * riserCoverThk
					beamLength			= (nRisers1stRun - 1) * treadDepth + flightWidth - bRiserCover * riserCoverThk
					bCarrAboveBreakLine	= 0
					bBreakCarriageLine	= 0
					gosub "carriage"
				del 1

				!!!!!******************************      2nd RUN + LANDING 2.
				add2 flightWidth - woodBaseOffset, flightWidth + (nRisers1stRun - 1) * treadDepth
				rot2 -90
					beamLength			= (nRisers2ndRun - 1) * td2 + flightWidth + woodBaseOffset
					bCarrAboveBreakLine	= 0
					bBreakCarriageLine	= 0
					gosub "carriage"
				del 2

				!!!!!******************************      3rd RUN
				add2 a, (nRisers1stRun-1)*treadDepth + woodBaseOffset
				rot2 -180
					beamLength			= nRisers3rdRun * treadDepth + woodBaseOffset
					bCarrAboveBreakLine	= 0
					bBreakCarriageLine	= 1
					bShowCarriagePart1	= 1
					bShowCarriagePart2	= 0
					brLineAngle			= bet
					xNosing				= nosing * drawDetails[1]
					carrBreakLineDist	= b - flightWidth + treadDepth - xNosing - ((nRisers1stRun - 1) - (NumStline - 1)) * treadDepth + (flightWidth / 2 - beamOffsetRight - beamThk / 2) * tan(brLineAngle) + woodBaseOffset
					gosub "carriage"
				del 2
			endif

			if drawPart[2] then
				!!!!!******************************      3rd RUN
				add2 a, (nRisers1stRun-1)*treadDepth + woodBaseOffset
				rot2 -180
					beamLength			= nRisers3rdRun * treadDepth + woodBaseOffset
					bCarrAboveBreakLine	= 1
					bBreakCarriageLine	= 1
					bShowCarriagePart1	= 0
					bShowCarriagePart2	= 1
					brLineAngle			= bet
					xNosing				= nosing * drawDetails[2]
					carrBreakLineDist	= b - flightWidth + treadDepth - xNosing - ((nRisers1stRun - 1) - (NumStline - 1)) * treadDepth + (flightWidth / 2 - beamOffsetRight - beamThk / 2) * tan(brLineAngle) + woodBaseOffset
					gosub "carriage"
				del 2
			endif
		endif
	endif
endif

!===============================================================================
! --- Railings ---
!===============================================================================

gapToFirstTread = 0

if _bShowRailIn2D & not(belowStory) then
	bShowRailPart1			= 0
	bShowRailPart2			= 0
	breakLineW				= breakLineWidth
	breakLineDist			= 0
	brLineAngle				= bet

	bShowRailOn1stRun		= 0
	bShowRailOn1stLanding1	= 0
	bShowRailOn1stLanding2	= 0
	bShowRailOn2ndRun		= 0
	bShowRailOn2ndLanding1	= 0
	bShowRailOn2ndLanding2	= 0
	bShowRailOn3rdRun		= 0

	drawindex 30
	fill gs_fill_type

	! --- Left Rail ----------------------------------------------------------------
	if rail_m = 3 | rail_m = 1 then		! Left, Both
		if bSameRails then
			leftRailType_m = rightRailType_m
			leftWireType_m = rightWireType_m
		endif

		if drawPart[3] then
			if bShowRailOnFloorPlan then
				pen railPen
				if aboveStory then
					LINE_TYPE railLineType
				else
					if (drawDashed[3]) then
						LINE_TYPE dash_line
					else
						LINE_TYPE railLineType
					endif
				endif

				if bSymbolic2D then
					bShowRailOn1stRun		= 1
					bShowRailOn1stLanding1	= 1
					bShowRailOn1stLanding2	= 1
					bShowRailOn2ndRun		= 1
					bShowRailOn2ndLanding1	= 1
					bShowRailOn2ndLanding2	= 1
					bShowRailOn3rdRun		= 1
					bBreakRailLine			= 0
					bRailAboveBreakLine		= 0
					gosub "left rail"
				else
					poly2_b 9, 1+2+64, gs_fill_pen, gs_back_pen,
						leftRailOffset+leftRailFrameThk,-leftRailOvhgBottom,1,
						leftRailOffset,-leftRailOvhgBottom,1,
						leftRailOffset,(nRisers1stRun-1)*treadDepth+flightWidth-leftRailOffset,1,
						(nRisers2ndRun-1)*td2+2*flightWidth-leftRailOffset,(nRisers1stRun-1)*treadDepth+flightWidth-leftRailOffset,1,
						(nRisers2ndRun-1)*td2+2*flightWidth-leftRailOffset,(nRisers1stRun-1)*treadDepth-nRisers3rdRun*treadDepth-leftRailOvhgTop,1,
						(nRisers2ndRun-1)*td2+2*flightWidth-leftRailOffset-leftRailFrameThk,(nRisers1stRun-1)*treadDepth-nRisers3rdRun*treadDepth-leftRailOvhgTop,1,
						(nRisers2ndRun-1)*td2+2*flightWidth-leftRailOffset-leftRailFrameThk,(nRisers1stRun-1)*treadDepth+flightWidth-leftRailOffset-leftRailFrameThk,1,
						leftRailOffset+leftRailFrameThk,(nRisers1stRun-1)*treadDepth+flightWidth-leftRailOffset-leftRailFrameThk,1,
						leftRailOffset+leftRailFrameThk,-leftRailOvhgBottom,-1
				endif
			endif

			if bShowRailAxis then
				line_type railAxisLineType
				pen gs_RailAxisPen
				line2 leftRailOffset+leftRailFrameThk/2, (nRisers1stRun-1)*treadDepth+flightWidth-leftRailOffset-leftRailFrameThk/2,leftRailOffset+leftRailFrameThk/2,-leftRailOvhgBottom
				line2 leftRailOffset+leftRailFrameThk/2, (nRisers1stRun-1)*treadDepth+flightWidth-leftRailOffset-leftRailFrameThk/2,a-leftRailOffset-leftRailFrameThk/2,(nRisers1stRun-1)*treadDepth+flightWidth-leftRailOffset-leftRailFrameThk/2
				line2 a-leftRailOffset-leftRailFrameThk/2,(nRisers1stRun-1)*treadDepth+flightWidth-leftRailOffset-leftRailFrameThk/2,a-leftRailOffset-leftRailFrameThk/2,b-flightWidth-nRisers3rdRun*treadDepth-leftRailOvhgTop
			endif
		else		! BREAK LINE - Railing
			if hasBreak1st then
				if drawPart[1] & bShowRailOnFloorPlan then
					pen railPen
					if aboveStory then
						SET LINE_TYPE railLineType
					else
						if (drawDashed[1]) then
							SET LINE_TYPE dash_line
						else
							SET LINE_TYPE railLineType
						endif
					endif
					xNosing = nosing * drawDetails[1]

					if bSymbolic2D then
						bShowRailOn1stRun		= 1
						bShowRailOn1stLanding1	= 0
						bShowRailOn1stLanding2	= 0
						bShowRailOn2ndRun		= 0
						bShowRailOn2ndLanding1	= 0
						bShowRailOn2ndLanding2	= 0
						bShowRailOn3rdRun		= 0
						bBreakRailLine			= 1
						brLineAngle				= bet
						bShowRailPart1			= 1
						breakLineDist			= leftRailOvhgBottom + (NumStline-1)*treadDepth-xNosing+(leftRailOffset+leftRailFrameThk)*tan(bet)
						breakLineW				= breakLineWidth + xNosing
						bRailAboveBreakLine		= 0
						gosub "left rail"
					else
						poly2_b 5, 1+2+64, gs_fill_pen, gs_back_pen,
							leftRailOffset,-leftRailOvhgBottom,1,
							leftRailOffset+leftRailFrameThk,-leftRailOvhgBottom,1,
							leftRailOffset+leftRailFrameThk,(NumStline-1)*treadDepth-xNosing+(leftRailOffset+leftRailFrameThk)*tan(bet),1,
							leftRailOffset,(NumStline-1)*treadDepth-xNosing+(leftRailOffset)*tan(bet),1,
							leftRailOffset,-leftRailOvhgBottom,-1
					endif
				endif

				if drawPart[2] & bShowRailOnFloorPlan and bShowRailAboveBreakLine then
					pen railPen
					if aboveStory then
						LINE_TYPE railLineType
					else
						if (drawDashed[2]) | drawBreakLine then
							LINE_TYPE dash_line
						else
							LINE_TYPE railLineType
						endif
					endif

					xNosing = nosing * drawDetails[2]

					if bSymbolic2D then
						xNosing =  nosing * NOT(drawDetails[2])
						bShowRailOn1stRun		= 1
						bShowRailOn1stLanding1	= 0
						bShowRailOn1stLanding2	= 0
						bShowRailOn2ndRun		= 0
						bShowRailOn2ndLanding1	= 0
						bShowRailOn2ndLanding2	= 0
						bShowRailOn3rdRun		= 0
						bBreakRailLine			= 1
						brLineAngle				= bet
						bShowRailPart2			= 1
						breakLineDist			= leftRailOvhgBottom + (NumStline-1)*treadDepth-nosing+(leftRailOffset+leftRailFrameThk)*tan(bet)
						breakLineW				= breakLineWidth + xNosing
						bRailAboveBreakLine		= 1
						gosub "left rail"

						bShowRailOn1stRun		= 0
						bShowRailOn1stLanding1	= 1
						bShowRailOn1stLanding2	= 1
						bShowRailOn2ndRun		= 1
						bShowRailOn2ndLanding1	= 1
						bShowRailOn2ndLanding2	= 1
						bShowRailOn3rdRun		= 1
						bBreakRailLine			= 0
						bRailAboveBreakLine		= 1
						gosub "left rail"
					else
						poly2_b 9, 1+2*gs_FillAbove+64, gs_fill_pen, gs_back_pen,
							leftRailOffset+leftRailFrameThk,(NumStline-1)*treadDepth+breakLineWidth-xNosing+(leftRailOffset+leftRailFrameThk)*tan(bet),1,
							leftRailOffset,(NumStline-1)*treadDepth+breakLineWidth-xNosing+(leftRailOffset)*tan(bet),1,
							leftRailOffset,(nRisers1stRun-1)*treadDepth+flightWidth-leftRailOffset,1,
							(nRisers2ndRun-1)*td2+2*flightWidth-leftRailOffset,(nRisers1stRun-1)*treadDepth+flightWidth-leftRailOffset,1,
							(nRisers2ndRun-1)*td2+2*flightWidth-leftRailOffset,(nRisers1stRun-1)*treadDepth-nRisers3rdRun*treadDepth-leftRailOvhgTop,1,
							(nRisers2ndRun-1)*td2+2*flightWidth-leftRailOffset-leftRailFrameThk,(nRisers1stRun-1)*treadDepth-nRisers3rdRun*treadDepth-leftRailOvhgTop,1,
							(nRisers2ndRun-1)*td2+2*flightWidth-leftRailOffset-leftRailFrameThk,(nRisers1stRun-1)*treadDepth+flightWidth-leftRailOffset-leftRailFrameThk,1,
							leftRailOffset+leftRailFrameThk,(nRisers1stRun-1)*treadDepth+flightWidth-leftRailOffset-leftRailFrameThk,1,
							leftRailOffset+leftRailFrameThk,(NumStline-1)*treadDepth+breakLineWidth-xNosing+(leftRailOffset+leftRailFrameThk)*tan(bet),-1
					endif
				endif

				if bShowRailAxis then
					line_type railAxisLineType
					pen gs_RailAxisPen

					if drawPart[1] then
						xNosing = nosing * drawDetails[1]
						line2 leftRailOffset+leftRailFrameThk/2, (NumStline-1)*treadDepth-xNosing+(leftRailOffset+leftRailFrameThk/2)*tan(bet),leftRailOffset+leftRailFrameThk/2,-leftRailOvhgBottom
					endif

					if drawPart[2] then
						xNosing = nosing * drawDetails[2]
						LINE2 leftRailOffset+leftRailFrameThk/2, (NumStline-1)*treadDepth+breakLineWidth-xNosing+(leftRailOffset+leftRailFrameThk/2)*tan(bet),leftRailOffset+leftRailFrameThk/2,(nRisers1stRun-1)*treadDepth+flightWidth-leftRailOffset-leftRailFrameThk/2
						LINE2 leftRailOffset+leftRailFrameThk/2, (nRisers1stRun-1)*treadDepth+flightWidth-leftRailOffset-leftRailFrameThk/2,a-leftRailOffset-leftRailFrameThk/2,(nRisers1stRun-1)*treadDepth+flightWidth-leftRailOffset-leftRailFrameThk/2
						LINE2 a-leftRailOffset-leftRailFrameThk/2,(nRisers1stRun-1)*treadDepth+flightWidth-leftRailOffset-leftRailFrameThk/2,a-leftRailOffset-leftRailFrameThk/2,b-flightWidth-nRisers3rdRun*treadDepth-leftRailOvhgTop
					endif
				endif
			endif

			if hasBreak2nd then
				if drawPart[1] & bShowRailOnFloorPlan then
					pen railPen
					if aboveStory then
						LINE_TYPE railLineType
					else
						if (drawDashed[1]) then
							LINE_TYPE dash_line
						else
							LINE_TYPE railLineType
						endif
					endif
					xNosing = nosing * drawDetails[1]

					if bSymbolic2D then
						bShowRailOn1stRun		= 1
						bShowRailOn1stLanding1	= 1
						bShowRailOn1stLanding2	= 1
						bShowRailOn2ndRun		= 0
						bShowRailOn2ndLanding1	= 0
						bShowRailOn2ndLanding2	= 0
						bShowRailOn3rdRun		= 0
						bBreakRailLine			= 0
						bRailAboveBreakLine		= 0
						gosub "left rail"

						bShowRailOn1stRun		= 0
						bShowRailOn1stLanding1	= 0
						bShowRailOn1stLanding2	= 0
						bShowRailOn2ndRun		= 1
						bShowRailOn2ndLanding1	= 0
						bShowRailOn2ndLanding2	= 0
						bShowRailOn3rdRun		= 0
						bBreakRailLine			= 1
						brLineAngle				= bet2
						bShowRailPart1			= 1
						breakLineDist			= td2+(NumStline-1)*td2-xNosing+(leftRailOffset+leftRailFrameThk)*tan(bet2)
						breakLineW				= breakLineWidth + xNosing
						bRailAboveBreakLine		= 0
						gosub "left rail"
					else
						poly2_b  7, 1+2+4+64, gs_fill_pen, gs_back_pen,
							leftRailOffset+leftRailFrameThk,	-leftRailOvhgBottom,1,
							leftRailOffset,						-leftRailOvhgBottom,1,
							leftRailOffset,						(nRisers1stRun-1)*treadDepth+flightWidth-leftRailOffset,1,
							flightWidth+(NumStline-1)*td2-xNosing+leftRailOffset*tan(bet2),	(nRisers1stRun-1)*treadDepth+flightWidth-leftRailOffset,1,
							flightWidth+(NumStline-1)*td2-xNosing+(leftRailOffset+leftRailFrameThk)*tan(bet2),	(nRisers1stRun-1)*treadDepth+flightWidth-leftRailOffset-leftRailFrameThk,1,
							leftRailOffset+leftRailFrameThk,(nRisers1stRun-1)*treadDepth+flightWidth-leftRailOffset-leftRailFrameThk,1,
							leftRailOffset+leftRailFrameThk,-leftRailOvhgBottom,-1
					endif
				endif

				if drawPart[2] & bShowRailOnFloorPlan and bShowRailAboveBreakLine then
					pen railPen
					if aboveStory then
						LINE_TYPE railLineType
					else
						if (drawDashed[2]) | drawBreakLine then
							LINE_TYPE dash_line
						else
							LINE_TYPE railLineType
						endif
					endif

					if bSymbolic2D then
						xNosing = nosing * NOT(drawDetails[2])
						bShowRailOn1stRun		= 0
						bShowRailOn1stLanding1	= 0
						bShowRailOn1stLanding2	= 0
						bShowRailOn2ndRun		= 1
						bShowRailOn2ndLanding1	= 0
						bShowRailOn2ndLanding2	= 0
						bShowRailOn3rdRun		= 0
						bBreakRailLine			= 1
						brLineAngle				= bet2
						bShowRailPart2			= 1
						breakLineDist			= td2+(NumStline-1)*td2-nosing+(leftRailOffset+leftRailFrameThk)*tan(bet2)
						breakLineW				= breakLineWidth + xNosing
						bRailAboveBreakLine		= 1
						gosub "left rail"

						bShowRailOn1stRun		= 0
						bShowRailOn1stLanding1	= 0
						bShowRailOn1stLanding2	= 0
						bShowRailOn2ndRun		= 0
						bShowRailOn2ndLanding1	= 1
						bShowRailOn2ndLanding2	= 1
						bShowRailOn3rdRun		= 1
						bBreakRailLine			= 0
						bRailAboveBreakLine		= 1
						gosub "left rail"
					else
						xNosing = nosing * drawDetails[2]
						poly2_b 7, 1+2*gs_FillAbove+64, gs_fill_pen, gs_back_pen,
							flightWidth+(NumStline-1)*td2-xNosing+leftRailOffset*tan(bet2)+breakLineWidth,(nRisers1stRun-1)*treadDepth+flightWidth-leftRailOffset,1,
							flightWidth+(NumStline-1)*td2-xNosing+(leftRailOffset+leftRailFrameThk)*tan(bet2)+breakLineWidth,(nRisers1stRun-1)*treadDepth+flightWidth-leftRailOffset-leftRailFrameThk,1,
							(nRisers2ndRun-1)*td2+2*flightWidth-leftRailOffset-leftRailFrameThk,(nRisers1stRun-1)*treadDepth+flightWidth-leftRailOffset-leftRailFrameThk,1,
							(nRisers2ndRun-1)*td2+2*flightWidth-leftRailOffset-leftRailFrameThk,(nRisers1stRun-1)*treadDepth-nRisers3rdRun*treadDepth-leftRailOvhgTop,1,
							(nRisers2ndRun-1)*td2+2*flightWidth-leftRailOffset,(nRisers1stRun-1)*treadDepth-nRisers3rdRun*treadDepth-leftRailOvhgTop,1,
							(nRisers2ndRun-1)*td2+2*flightWidth-leftRailOffset,(nRisers1stRun-1)*treadDepth+flightWidth-leftRailOffset,1,
							flightWidth+(NumStline-1)*td2-xNosing+leftRailOffset*tan(bet2)+breakLineWidth,(nRisers1stRun-1)*treadDepth+flightWidth-leftRailOffset,-1
					endif
				endif

				if bShowRailAxis then
					line_type railAxisLineType
					pen gs_RailAxisPen
					angleBreak = atn((2*td2)/flightWidth)

					if drawPart[1] then
						xNosing = nosing * drawDetails[1]
						line2 leftRailOffset+leftRailFrameThk/2, (nRisers1stRun-1)*treadDepth+flightWidth-leftRailOffset-leftRailFrameThk/2,leftRailOffset+leftRailFrameThk/2,-leftRailOvhgBottom
						line2 leftRailOffset+leftRailFrameThk/2, (nRisers1stRun-1)*treadDepth+flightWidth-leftRailOffset-leftRailFrameThk/2, \
								flightWidth+(NumStline-1)*td2-xNosing+(leftRailOffset+leftRailFrameThk/2)*tan(angleBreak),(nRisers1stRun-1)*treadDepth+flightWidth-leftRailOffset-leftRailFrameThk/2
					endif

					if drawPart[2] then
						xNosing = nosing * drawDetails[2]
						line2 a-leftRailOffset-leftRailFrameThk/2, (nRisers1stRun-1)*treadDepth+flightWidth-leftRailOffset-leftRailFrameThk/2,\
							flightWidth+(NumStline-1)*td2-xNosing+(leftRailOffset+leftRailFrameThk/2)*tan(angleBreak)+breakLineWidth, (nRisers1stRun-1)*treadDepth+flightWidth-leftRailOffset-leftRailFrameThk/2
						line2 a-leftRailOffset-leftRailFrameThk/2, (nRisers1stRun-1)*treadDepth+flightWidth-leftRailOffset-leftRailFrameThk/2,a-leftRailOffset-leftRailFrameThk/2,b-flightWidth-nRisers3rdRun*treadDepth-leftRailOvhgTop
					endif
				endif
			endif

			if hasBreak3rd then
				if drawPart[1] & bShowRailOnFloorPlan then
					pen railPen
					if aboveStory then
						LINE_TYPE railLineType
					else
						if (drawDashed[1]) then
							LINE_TYPE dash_line
						else
							LINE_TYPE railLineType
						endif
					endif
					xNosing = nosing * drawDetails[1]

					if bSymbolic2D then
						bShowRailOn1stRun		= 1
						bShowRailOn1stLanding1	= 1
						bShowRailOn1stLanding2	= 1
						bShowRailOn2ndRun		= 1
						bShowRailOn2ndLanding1	= 1
						bShowRailOn2ndLanding2	= 1
						bShowRailOn3rdRun		= 0
						bBreakRailLine			= 0
						bRailAboveBreakLine		= 0
						gosub "left rail"

						bShowRailOn1stRun		= 0
						bShowRailOn1stLanding1	= 0
						bShowRailOn1stLanding2	= 0
						bShowRailOn2ndRun		= 0
						bShowRailOn2ndLanding1	= 0
						bShowRailOn2ndLanding2	= 0
						bShowRailOn3rdRun		= 1
						bBreakRailLine			= 1
						brLineAngle				= bet
						bShowRailPart1			= 1
						breakLineDist			= b-flightWidth+treadDepth - (((nRisers1stRun-1)-(NumStline-1))*treadDepth-(leftRailOffset+leftRailFrameThk)*tan(bet)+xNosing)
						breakLineW				= breakLineWidth + xNosing
						bRailAboveBreakLine		= 0
						gosub "left rail"
					else
						poly2_b  9, 1+2+4+64, gs_fill_pen, gs_back_pen,
							leftRailOffset+leftRailFrameThk,					-leftRailOvhgBottom,1,
							leftRailOffset,										-leftRailOvhgBottom,1,
							leftRailOffset,										(nRisers1stRun-1)*treadDepth+flightWidth-leftRailOffset,1,
							(nRisers2ndRun-1)*td2+2*flightWidth-leftRailOffset,	(nRisers1stRun-1)*treadDepth+flightWidth-leftRailOffset,1,
							(nRisers2ndRun-1)*td2+2*flightWidth-leftRailOffset,	(nRisers1stRun-1)*treadDepth-(NumStline-1)*treadDepth+xNosing-(leftRailOffset)*tan(bet),1,
							(nRisers2ndRun-1)*td2+2*flightWidth-leftRailOffset-leftRailFrameThk,(nRisers1stRun-1)*treadDepth-(NumStline-1)*treadDepth+xNosing-(leftRailOffset+leftRailFrameThk)*tan(bet),1,
							(nRisers2ndRun-1)*td2+2*flightWidth-leftRailOffset-leftRailFrameThk,(nRisers1stRun-1)*treadDepth+flightWidth-leftRailOffset-leftRailFrameThk,1,
							leftRailOffset+leftRailFrameThk,					(nRisers1stRun-1)*treadDepth+flightWidth-leftRailOffset-leftRailFrameThk,1,
							leftRailOffset+leftRailFrameThk,					-leftRailOvhgBottom,-1
					endif
				endif

				if drawPart[2] & bShowRailOnFloorPlan and bShowRailAboveBreakLine then
					pen railPen
					if aboveStory then
						LINE_TYPE railLineType
					else
						if (drawDashed[2]) | drawBreakLine then
							LINE_TYPE dash_line
						else
							LINE_TYPE railLineType
						endif
					endif

					if bSymbolic2D then
						xNosing = nosing * NOT(drawDetails[2])
						bShowRailOn1stRun		= 0
						bShowRailOn1stLanding1	= 0
						bShowRailOn1stLanding2	= 0
						bShowRailOn2ndRun		= 0
						bShowRailOn2ndLanding1	= 0
						bShowRailOn2ndLanding2	= 0
						bShowRailOn3rdRun		= 1
						bBreakRailLine			= 1
						brLineAngle				= bet
						bShowRailPart2			= 1
						breakLineDist			= b-flightWidth+treadDepth - (((nRisers1stRun-1)-(NumStline-1))*treadDepth-(leftRailOffset+leftRailFrameThk)*tan(bet)+nosing)
						breakLineW				= breakLineWidth + xNosing
						bRailAboveBreakLine		= 1
						gosub "left rail"
					else
						xNosing = nosing * drawDetails[2]
						poly2_b 5, 1+2*gs_FillAbove+64, gs_fill_pen, gs_back_pen,
							(nRisers2ndRun-1)*td2+2*flightWidth-leftRailOffset-leftRailFrameThk,(nRisers1stRun-1)*treadDepth-nRisers3rdRun*treadDepth-leftRailOvhgTop,1,
							(nRisers2ndRun-1)*td2+2*flightWidth-leftRailOffset,(nRisers1stRun-1)*treadDepth-nRisers3rdRun*treadDepth-leftRailOvhgTop,1,
							(nRisers2ndRun-1)*td2+2*flightWidth-leftRailOffset,(nRisers1stRun-1)*treadDepth-(NumStline-1)*treadDepth+xNosing-(leftRailOffset)*tan(bet)-breakLineWidth,1,
							(nRisers2ndRun-1)*td2+2*flightWidth-leftRailOffset-leftRailFrameThk,(nRisers1stRun-1)*treadDepth-(NumStline-1)*treadDepth+xNosing-(leftRailOffset+leftRailFrameThk)*tan(bet)-breakLineWidth,1,
							(nRisers2ndRun-1)*td2+2*flightWidth-leftRailOffset-leftRailFrameThk,(nRisers1stRun-1)*treadDepth-nRisers3rdRun*treadDepth-leftRailOvhgTop,-1
					endif
				endif

				if bShowRailAxis then
					line_type railAxisLineType
					pen gs_RailAxisPen
					if drawPart[1] then
						xNosing = nosing * drawDetails[1]
							line2 leftRailOffset+leftRailFrameThk/2, (nRisers1stRun-1)*treadDepth+flightWidth-leftRailOffset-leftRailFrameThk/2,leftRailOffset+leftRailFrameThk/2,-leftRailOvhgBottom
						line2 leftRailOffset+leftRailFrameThk/2, (nRisers1stRun-1)*treadDepth+flightWidth-leftRailOffset-leftRailFrameThk/2,\
							(nRisers2ndRun-1)*td2+2*flightWidth-leftRailOffset-leftRailFrameThk/2, (nRisers1stRun-1)*treadDepth+flightWidth-leftRailOffset-leftRailFrameThk/2
						line2 (nRisers2ndRun-1)*td2+2*flightWidth-leftRailOffset-leftRailFrameThk/2, (nRisers1stRun-1)*treadDepth+flightWidth-leftRailOffset-leftRailFrameThk/2,\
							(nRisers2ndRun-1)*td2+2*flightWidth-leftRailOffset-leftRailFrameThk/2, ((nRisers1stRun-1)-(NumStline-1))*treadDepth-(leftRailOffset+leftRailFrameThk/2)*tan(bet)+xNosing
					endif
					if drawPart[2] then
						xNosing = nosing * drawDetails[2]
						line2 (nRisers2ndRun-1)*td2+2*flightWidth-leftRailOffset-leftRailFrameThk/2, -leftRailOvhgTop,(nRisers2ndRun-1)*td2+2*flightWidth-leftRailOffset-leftRailFrameThk/2, \
							((nRisers1stRun-1)-(NumStline-1))*treadDepth-(leftRailOffset+leftRailFrameThk/2)*tan(bet)+xNosing-breakLineWidth
					endif
				endif
			endif
		endif
	endif

	! --- Right Rail ---------------------------------------------------------------
	pen gs_cont_pen
	if rail_m = 2 | rail_m = 1 then		! Right, Both
		if drawPart[3] then
			if bShowRailOnFloorPlan then
				pen railPen
				if aboveStory then
					LINE_TYPE railLineType
				else
					if (drawDashed[3]) then
						LINE_TYPE dash_line
					else
						LINE_TYPE railLineType
					endif
				endif

				if bSymbolic2D then
					bShowRailOn1stRun		= 1
					bShowRailOn1stLanding1	= 1
					bShowRailOn1stLanding2	= 1
					bShowRailOn2ndRun		= 1
					bShowRailOn2ndLanding1	= 1
					bShowRailOn2ndLanding2	= 1
					bShowRailOn3rdRun		= 1
					bBreakRailLine			= 0
					bRailAboveBreakLine		= 0
					gosub "right rail"
				else
					poly2_b 9, 1+2+64, gs_fill_pen, gs_back_pen,
						flightwidth-rightrailoffset,-rightrailovhgbottom,1,
						flightwidth-rightrailoffset-rightrailframethk,-rightrailovhgbottom,1,
						flightwidth-rightrailoffset-rightrailframethk,(nrisers1strun-1)*treaddepth+rightrailoffset+rightrailframethk,1,
						flightwidth+(nrisers2ndrun-1)*td2+rightrailoffset+rightrailframethk,(nrisers1strun-1)*treaddepth+rightrailoffset+rightrailframethk,1,
						flightwidth+(nrisers2ndrun-1)*td2+rightrailoffset+rightrailframethk,(nrisers1strun-1-nrisers3rdrun)*treaddepth-rightrailovhgtop,1,
						flightwidth+(nrisers2ndrun-1)*td2+rightrailoffset,(nrisers1strun-1-nrisers3rdrun)*treaddepth-rightrailovhgtop,1,
						flightwidth+(nrisers2ndrun-1)*td2+rightrailoffset,(nrisers1strun-1)*treaddepth+rightrailoffset,1,
						flightwidth-rightrailoffset,(nrisers1strun-1)*treaddepth+rightrailoffset,1,
						flightwidth-rightrailoffset,-rightrailovhgbottom,-1
				endif
			endif

			if bShowRailAxis then
				line_type railAxisLineType
				pen gs_RailAxisPen
				line2 flightWidth-rightRailOffset-rightRailFrameThk/2, (nRisers1stRun-1)*treadDepth+rightRailOffset+rightRailFrameThk/2,
						flightWidth-rightRailOffset-rightRailFrameThk/2,-rightRailOvhgBottom
				line2 flightWidth+(nRisers2ndRun-1)*td2+rightRailFrameThk/2+rightRailOffset, (nRisers1stRun-1)*treadDepth+rightRailOffset+rightRailFrameThk/2,
						flightWidth-rightRailOffset-rightRailFrameThk/2,(nRisers1stRun-1)*treadDepth+rightRailOffset+rightRailFrameThk/2
				line2 flightWidth+(nRisers2ndRun-1)*td2+rightRailFrameThk/2+rightRailOffset, (nRisers1stRun-1)*treadDepth+rightRailOffset+rightRailFrameThk/2,\
						flightWidth+(nRisers2ndRun-1)*td2+rightRailFrameThk/2+rightRailOffset,b-flightWidth-nRisers3rdRun*treadDepth-rightRailOvhgTop
			endif
		else
			if hasBreak1st then
				if drawPart[1] & bShowRailOnFloorPlan then
					pen railPen
					if aboveStory then
						LINE_TYPE railLineType
					else
						if (drawDashed[1]) then
							LINE_TYPE dash_line
						else
							LINE_TYPE railLineType
						endif
					endif
					xNosing = nosing * drawDetails[1]

					if bSymbolic2D then
						bShowRailOn1stRun		= 1
						bShowRailOn1stLanding1	= 0
						bShowRailOn1stLanding2	= 0
						bShowRailOn2ndRun		= 0
						bShowRailOn2ndLanding1	= 0
						bShowRailOn2ndLanding2	= 0
						bShowRailOn3rdRun		= 0
						bBreakRailLine			= 1
						brLineAngle				= bet
						bShowRailPart1			= 1
						breakLineDist			= rightRailOvhgBottom - xNosing + (NumStline + 1) * treadDepth - rightRailOffset * TAN(bet)
						breakLineW				= breakLineWidth + xNosing
						bRailAboveBreakLine		= 0
						gosub "right rail"
					else
						if drawPart[2] and bShowRailAboveBreakLine then
							poly2_b 5, 1+2+64, gs_fill_pen, gs_back_pen,
								flightWidth-rightRailOffset,-rightRailOvhgBottom,1,
								flightWidth-rightRailOffset-rightRailFrameThk,-rightRailOvhgBottom,1,
								flightWidth-rightRailOffset-rightRailFrameThk,(NumStline+1)*treadDepth-xNosing-(rightRailOffset+rightRailFrameThk)*tan(bet),1,
								flightWidth-rightRailOffset,(NumStline+1)*treadDepth-xNosing-(rightRailOffset)*tan(bet),1,
								flightWidth-rightRailOffset,-rightRailOvhgBottom,-1
						endif
					endif
				endif

				if drawPart[2] & bShowRailOnFloorPlan and bShowRailAboveBreakLine then
					pen railPen
					if aboveStory then
						LINE_TYPE railLineType
					else
						if (drawDashed[2]) | drawBreakLine then
							LINE_TYPE dash_line
						else
							LINE_TYPE railLineType
						endif
					endif
					xNosing = nosing * drawDetails[2]

					if bSymbolic2D then
						xNosing = nosing * NOT(drawDetails[2])
						bShowRailOn1stRun		= 1
						bShowRailOn1stLanding1	= 0
						bShowRailOn1stLanding2	= 0
						bShowRailOn2ndRun		= 0
						bShowRailOn2ndLanding1	= 0
						bShowRailOn2ndLanding2	= 0
						bShowRailOn3rdRun		= 0
						bBreakRailLine			= 1
						brLineAngle				= bet
						bShowRailPart2			= 1
						breakLineDist			= rightRailOvhgBottom - nosing + (NumStline + 1) * treadDepth - rightRailOffset * TAN(bet)
						breakLineW				= breakLineWidth + xNosing
						bRailAboveBreakLine		= 1
						gosub "right rail"

						bShowRailOn1stRun		= 0
						bShowRailOn1stLanding1	= 1
						bShowRailOn1stLanding2	= 1
						bShowRailOn2ndRun		= 1
						bShowRailOn2ndLanding1	= 1
						bShowRailOn2ndLanding2	= 1
						bShowRailOn3rdRun		= 1
						bBreakRailLine			= 0
						bRailAboveBreakLine		= 1
						gosub "right rail"
					else
						poly2_b 9, 1+2*gs_FillAbove+64, gs_fill_pen, gs_back_pen,
							flightWidth-rightRailOffset,(nRisers1stRun-1)*treadDepth+rightRailOffset,1,
							flightWidth+(nRisers2ndRun-1)*td2+rightRailOffset,(nRisers1stRun-1)*treadDepth+rightRailOffset,1,
							flightWidth+(nRisers2ndRun-1)*td2+rightRailOffset,(nRisers1stRun-1-nRisers3rdRun)*treadDepth-rightRailOvhgTop,1,
							flightWidth+(nRisers2ndRun-1)*td2+rightRailOffset+rightRailFrameThk,(nRisers1stRun-1-nRisers3rdRun)*treadDepth-rightRailOvhgTop,1,
							flightWidth+(nRisers2ndRun-1)*td2+rightRailOffset+rightRailFrameThk,(nRisers1stRun-1)*treadDepth+rightRailOffset+rightRailFrameThk,1,
							flightWidth-rightRailOffset-rightRailFrameThk,(nRisers1stRun-1)*treadDepth+rightRailOffset+rightRailFrameThk,1,
							flightWidth-rightRailOffset-rightRailFrameThk,(NumStline+1)*treadDepth-xNosing+breakLineWidth-(rightRailOffset+rightRailFrameThk)*tan(bet),1,
							flightWidth-rightRailOffset,(NumStline+1)*treadDepth-xNosing+breakLineWidth-(rightRailOffset)*tan(bet),1,
							flightWidth-rightRailOffset,(nRisers1stRun-1)*treadDepth+rightRailOffset,-1
					endif
				endif

				if bShowRailAxis then
					line_type railAxisLineType
					pen gs_RailAxisPen
					if drawPart[1] then
						xNosing = nosing * drawDetails[1]
						line2 flightWidth-rightRailOffset-rightRailFrameThk/2, (NumStline+1)*treadDepth-xNosing-(rightRailOffset+rightRailFrameThk/2)*tan(bet),flightWidth-rightRailOffset-rightRailFrameThk/2,-rightRailOvhgBottom
					endif

					if drawPart[2] then
						xNosing = nosing * drawDetails[2]
						line2 flightWidth-rightRailOffset-rightRailFrameThk/2, (NumStline+1)*treadDepth-xNosing+breakLineWidth-(rightRailOffset+rightRailFrameThk/2)*tan(bet),\
								flightWidth-rightRailOffset-rightRailFrameThk/2,(nRisers1stRun-1)*treadDepth+rightRailOffset+rightRailFrameThk/2
						line2 flightWidth+(nRisers2ndRun-1)*td2+rightRailFrameThk/2+rightRailOffset, (nRisers1stRun-1)*treadDepth+rightRailOffset+rightRailFrameThk/2,\
								flightWidth-rightRailOffset-rightRailFrameThk/2,(nRisers1stRun-1)*treadDepth+rightRailOffset+rightRailFrameThk/2
						line2 flightWidth+(nRisers2ndRun-1)*td2+rightRailFrameThk/2+rightRailOffset, (nRisers1stRun-1)*treadDepth+rightRailOffset+rightRailFrameThk/2,\
								flightWidth+(nRisers2ndRun-1)*td2+rightRailFrameThk/2+rightRailOffset,b-flightWidth-nRisers3rdRun*treadDepth-rightRailOvhgTop
					endif
				endif
			endif

			if hasBreak2nd then
				if drawPart[1] & bShowRailOnFloorPlan then
					pen railPen
					if aboveStory then
						LINE_TYPE railLineType
					else
						if (drawDashed[1]) then
							LINE_TYPE dash_line
						else
							LINE_TYPE railLineType
						endif
					endif
					xNosing = nosing * drawDetails[1]

					if bSymbolic2D then
						bShowRailOn1stRun		= 1
						bShowRailOn1stLanding1	= 1
						bShowRailOn1stLanding2	= 1
						bShowRailOn2ndRun		= 0
						bShowRailOn2ndLanding1	= 0
						bShowRailOn2ndLanding2	= 0
						bShowRailOn3rdRun		= 0
						bBreakRailLine			= 0
						bRailAboveBreakLine		= 0
						gosub "right rail"

						bShowRailOn1stRun		= 0
						bShowRailOn1stLanding1	= 0
						bShowRailOn1stLanding2	= 0
						bShowRailOn2ndRun		= 1
						bShowRailOn2ndLanding1	= 0
						bShowRailOn2ndLanding2	= 0
						bShowRailOn3rdRun		= 0
						bBreakRailLine			= 1
						brLineAngle				= bet2
						bShowRailPart1			= 1
						breakLineDist			= min(rightRailOffset,td2)+(NumStline+1)*td2-xNosing-(rightRailOffset)*tan(bet2)
						breakLineW				= breakLineWidth + xNosing
						bRailAboveBreakLine		= 0
						gosub "right rail"
					else
						poly2_b 7, 1+2+4+64, gs_fill_pen, gs_back_pen,
							flightWidth-rightRailOffset-rightRailFrameThk,-rightRailOvhgBottom,1,
							flightWidth-rightRailOffset,-rightRailOvhgBottom,1,
							flightWidth-rightRailOffset,(nRisers1stRun-1)*treadDepth+rightRailOffset,1,
							flightWidth+(NumStline+1)*td2-xNosing-(rightRailOffset)*tan(bet2),(nRisers1stRun-1)*treadDepth+rightRailOffset,1,
							flightWidth+(NumStline+1)*td2-xNosing-(rightRailOffset+rightRailFrameThk)*tan(bet2),(nRisers1stRun-1)*treadDepth+rightRailOffset+rightRailFrameThk,1,
							flightWidth-rightRailOffset-rightRailFrameThk,(nRisers1stRun-1)*treadDepth+rightRailOffset+rightRailFrameThk,1,
							flightWidth-rightRailOffset-rightRailFrameThk,-rightRailOvhgBottom,-1
					endif
				endif

				if drawPart[2] & bShowRailOnFloorPlan and bShowRailAboveBreakLine then
					pen railPen
					if aboveStory then
						LINE_TYPE railLineType
					else
						if (drawDashed[2]) | drawBreakLine then
							LINE_TYPE dash_line
						else
							LINE_TYPE railLineType
						endif
					endif

					if bSymbolic2D then
						xNosing = nosing * NOT(drawDetails[2])
						bShowRailOn1stRun		= 0
						bShowRailOn1stLanding1	= 0
						bShowRailOn1stLanding2	= 0
						bShowRailOn2ndRun		= 1
						bShowRailOn2ndLanding1	= 0
						bShowRailOn2ndLanding2	= 0
						bShowRailOn3rdRun		= 0
						bBreakRailLine			= 1
						brLineAngle				= bet2
						bShowRailPart2			= 1
						breakLineDist			= min(rightRailOffset,td2)+(NumStline+1)*td2-nosing-(rightRailOffset)*tan(bet2)
						breakLineW				= breakLineWidth + xNosing
						bRailAboveBreakLine		= 1
						gosub "right rail"

						bShowRailOn1stRun		= 0
						bShowRailOn1stLanding1	= 0
						bShowRailOn1stLanding2	= 0
						bShowRailOn2ndRun		= 0
						bShowRailOn2ndLanding1	= 1
						bShowRailOn2ndLanding2	= 1
						bShowRailOn3rdRun		= 1
						bBreakRailLine			= 0
						bRailAboveBreakLine		= 1
						gosub "right rail"
					else
						xNosing = nosing * drawDetails[2]
						poly2_b 7, 1+2*gs_FillAbove+64, gs_fill_pen, gs_back_pen,
							flightWidth+(NumStline+1)*td2-xNosing-rightRailOffset*tan(bet2)+breakLineWidth,(nRisers1stRun-1)*treadDepth+rightRailOffset,1,
							flightWidth+(NumStline+1)*td2-xNosing-(rightRailOffset+rightRailFrameThk)*tan(bet2)+breakLineWidth,(nRisers1stRun-1)*treadDepth+rightRailOffset+rightRailFrameThk,1,
							(nRisers2ndRun-1)*td2+flightWidth+rightRailOffset+rightRailFrameThk,(nRisers1stRun-1)*treadDepth+rightRailOffset+rightRailFrameThk,1,
							(nRisers2ndRun-1)*td2+flightWidth+rightRailOffset+rightRailFrameThk,(nRisers1stRun-1)*treadDepth-nRisers3rdRun*treadDepth-rightRailOvhgTop,1,
							(nRisers2ndRun-1)*td2+flightWidth+rightRailOffset,(nRisers1stRun-1)*treadDepth-nRisers3rdRun*treadDepth-rightRailOvhgTop,1,
							(nRisers2ndRun-1)*td2+flightWidth+rightRailOffset,(nRisers1stRun-1)*treadDepth+rightRailOffset,1,
							flightWidth+(NumStline+1)*td2-xNosing-rightRailOffset*tan(bet2)+breakLineWidth,(nRisers1stRun-1)*treadDepth+rightRailOffset,-1
					endif
				endif

				if bShowRailAxis then
					line_type railAxisLineType
					pen gs_RailAxisPen
					angleBreak = atn((2*td2)/flightWidth)

					if drawPart[1] then
						xNosing = nosing * drawDetails[1]
						line2 flightWidth-rightRailOffset-rightRailFrameThk/2, (nRisers1stRun-1)*treadDepth+rightRailOffset+rightRailFrameThk/2,flightWidth-rightRailOffset-rightRailFrameThk/2,-rightRailOvhgBottom
						line2 flightWidth+(NumStline+1)*td2-xNosing-(rightRailOffset+rightRailFrameThk/2)*tan(angleBreak), \
								(nRisers1stRun-1)*treadDepth+rightRailOffset+rightRailFrameThk/2,flightWidth-rightRailOffset-rightRailFrameThk/2,(nRisers1stRun-1)*treadDepth+rightRailOffset+rightRailFrameThk/2
					endif
					if drawPart[2] then
						xNosing = nosing * drawDetails[2]
						line2 flightWidth+(nRisers2ndRun-1)*td2+rightRailFrameThk/2+rightRailOffset, (nRisers1stRun-1)*treadDepth+rightRailOffset+rightRailFrameThk/2,\
								flightWidth+(NumStline+1)*td2-xNosing-(rightRailOffset+rightRailFrameThk/2)*tan(angleBreak)+breakLineWidth,(nRisers1stRun-1)*treadDepth+rightRailOffset+rightRailFrameThk/2
						line2 flightWidth+(nRisers2ndRun-1)*td2+rightRailFrameThk/2+rightRailOffset, (nRisers1stRun-1)*treadDepth+rightRailOffset+rightRailFrameThk/2,\
								flightWidth+(nRisers2ndRun-1)*td2+rightRailFrameThk/2+rightRailOffset,b-flightWidth-nRisers3rdRun*treadDepth-rightRailOvhgTop
					endif
				endif
			endif

			if hasBreak3rd then
				if drawPart[1] & bShowRailOnFloorPlan then
					pen railPen
					if aboveStory then
						LINE_TYPE railLineType
					else
						if (drawDashed[1]) then
							LINE_TYPE dash_line
						else
							LINE_TYPE railLineType
						endif
					endif
					xNosing = nosing * drawDetails[1]

					if bSymbolic2D then
						bShowRailOn1stRun		= 1
						bShowRailOn1stLanding1	= 1
						bShowRailOn1stLanding2	= 1
						bShowRailOn2ndRun		= 1
						bShowRailOn2ndLanding1	= 1
						bShowRailOn2ndLanding2	= 1
						bShowRailOn3rdRun		= 0
						bBreakRailLine			= 0
						bRailAboveBreakLine		= 0
						gosub "right rail"

						bShowRailOn1stRun		= 0
						bShowRailOn1stLanding1	= 0
						bShowRailOn1stLanding2	= 0
						bShowRailOn2ndRun		= 0
						bShowRailOn2ndLanding1	= 0
						bShowRailOn2ndLanding2	= 0
						bShowRailOn3rdRun		= 1
						bBreakRailLine			= 1
						brLineAngle				= bet
						bShowRailPart1			= 1
						breakLineDist			= (nRisers1stRun-1)*treadDepth+min(rightRailOffset,treadDepth) - ((nRisers1stRun-1)*treadDepth-(NumStline+1)*treadDepth+xNosing+(rightRailOffset)*tan(bet))
						breakLineW				= breakLineWidth + xNosing
						bRailAboveBreakLine		= 0
						gosub "right rail"
					else
						poly2_b 9, 1+2+4+64, gs_fill_pen, gs_back_pen,
							flightWidth-rightRailOffset,-rightRailOvhgBottom,1,
							flightWidth-rightRailOffset-rightRailFrameThk,-rightRailOvhgBottom,1,
							flightWidth-rightRailOffset-rightRailFrameThk,(nRisers1stRun-1)*treadDepth+rightRailOffset+rightRailFrameThk,1,
							flightWidth+(nRisers2ndRun-1)*td2+rightRailOffset+rightRailFrameThk,(nRisers1stRun-1)*treadDepth+rightRailOffset+rightRailFrameThk,1,
							flightWidth+(nRisers2ndRun-1)*td2+rightRailOffset+rightRailFrameThk,((nRisers1stRun-1)-(NumStline+1))*treadDepth+xNosing+(rightRailOffset+rightRailFrameThk)*tan(bet),1,
							flightWidth+(nRisers2ndRun-1)*td2+rightRailOffset,((nRisers1stRun-1)-(NumStline+1))*treadDepth+xNosing+(rightRailOffset)*tan(bet),1,
							flightWidth+(nRisers2ndRun-1)*td2+rightRailOffset,(nRisers1stRun-1)*treadDepth+rightRailOffset,1,
							flightWidth-rightRailOffset,(nRisers1stRun-1)*treadDepth+rightRailOffset,1,
							flightWidth-rightRailOffset,-rightRailOvhgBottom,-1
					endif
				endif

				if drawPart[2] & bShowRailOnFloorPlan and bShowRailAboveBreakLine then
					pen railPen
					if aboveStory then
						LINE_TYPE railLineType
					else
						if (drawDashed[2]) | drawBreakLine then
							LINE_TYPE dash_line
						else
							LINE_TYPE railLineType
						endif
					endif

					if bSymbolic2D then
						xNosing = nosing * NOT(drawDetails[2])
						bShowRailOn1stRun		= 0
						bShowRailOn1stLanding1	= 0
						bShowRailOn1stLanding2	= 0
						bShowRailOn2ndRun		= 0
						bShowRailOn2ndLanding1	= 0
						bShowRailOn2ndLanding2	= 0
						bShowRailOn3rdRun		= 1
						bBreakRailLine			= 1
						brLineAngle				= bet
						bShowRailPart2			= 1
						breakLineDist			= (nRisers1stRun-1)*treadDepth+min(rightRailOffset,treadDepth) - ((nRisers1stRun-1)*treadDepth-(NumStline+1)*treadDepth+nosing+(rightRailOffset)*tan(bet))
						breakLineW				= breakLineWidth + xNosing
						bRailAboveBreakLine		= 1
						gosub "right rail"
					else
						xNosing = nosing * drawDetails[2]
						poly2_b 5, 1+2*gs_FillAbove+64, gs_fill_pen, gs_back_pen,
							(nRisers2ndRun-1)*td2+flightWidth+rightRailOffset+rightRailFrameThk,(nRisers1stRun-1)*treadDepth-nRisers3rdRun*treadDepth-rightRailOvhgTop,1,
							(nRisers2ndRun-1)*td2+flightWidth+rightRailOffset,(nRisers1stRun-1)*treadDepth-nRisers3rdRun*treadDepth-rightRailOvhgTop,1,
							(nRisers2ndRun-1)*td2+flightWidth+rightRailOffset,(nRisers1stRun-1)*treadDepth-(NumStline+1)*treadDepth+xNosing+(rightRailOffset)*tan(bet)-breakLineWidth,1,
							(nRisers2ndRun-1)*td2+flightWidth+rightRailOffset+rightRailFrameThk,(nRisers1stRun-1)*treadDepth-(NumStline+1)*treadDepth+xNosing+(rightRailOffset+rightRailFrameThk)*tan(bet)-breakLineWidth,1,
							(nRisers2ndRun-1)*td2+flightWidth+rightRailOffset+rightRailFrameThk,(nRisers1stRun-1)*treadDepth-nRisers3rdRun*treadDepth-rightRailOvhgTop,-1
					endif
				endif
				if bShowRailAxis then
					line_type railAxisLineType
					pen gs_RailAxisPen
					if drawPart[1] then
						xNosing = nosing * drawDetails[1]
						line2 flightWidth-rightRailOffset-rightRailFrameThk/2, (nRisers1stRun-1)*treadDepth+rightRailOffset+rightRailFrameThk/2,\
								flightWidth-rightRailOffset-rightRailFrameThk/2,-rightRailOvhgBottom
						line2 flightWidth+(nRisers2ndRun-1)*td2+rightRailFrameThk/2+rightRailOffset, (nRisers1stRun-1)*treadDepth+rightRailOffset+rightRailFrameThk/2,\
								flightWidth-rightRailOffset-rightRailFrameThk/2,(nRisers1stRun-1)*treadDepth+rightRailOffset+rightRailFrameThk/2
						line2 (nRisers2ndRun-1)*td2+flightWidth+rightRailOffset+rightRailFrameThk/2,(nRisers1stRun-1)*treadDepth-(NumStline+1)*treadDepth+xNosing+(rightRailOffset + rightRailFrameThk/2)*tan(bet),\
								(nRisers2ndRun-1)*td2+flightWidth+rightRailOffset+rightRailFrameThk/2, (nRisers1stRun-1)*treadDepth+rightRailOffset+rightRailFrameThk/2
					endif
					if drawPart[2] then
						xNosing = nosing * drawDetails[2]
						line2 (nRisers2ndRun-1)*td2+flightWidth+rightRailOffset+rightRailFrameThk/2,(nRisers1stRun-1)*treadDepth-(NumStline+1)*treadDepth+xNosing+(rightRailOffset + rightRailFrameThk/2)*tan(bet)-breakLineWidth,\
								(nRisers2ndRun-1)*td2+flightWidth+rightRailOffset+rightRailFrameThk/2, -rightRailOvhgTop
					endif
				endif
			endif
		endif
	endif
endif


! ==============================================================================
! Text / Up - Down Text / Numbering
! ==============================================================================

! --- Oriented View ------------------------------------------------------------
angleViewRot = 0
if bShowRiseAndRunText | walkingDirUPDN_m <> 1 | drawNum | gs_description <> "" then
	rrr = REQUEST ("View_Rotangle", "", angleViewRot)
endif
totalRotate = (SYMB_ROTANGLE + angleViewRot) MOD 360


! --- Define Font Style --------------------------------------------------------

define style "UPDN" fontType, UPDNfontsize, 5, 0		  	! UP/DN

define style "stepnum" fontType, gs_NumTextSize, 1, 0		! Numbering

define style "description" fontType, gs_desc_text_size, 4, 0	! Description

! --- Rise & Run Text -------------------------------------------------------

if bShowRiseAndRunText & bShowWalkLine & not(belowStory) then
	call "Stair_RiseRun_Text" PARAMETERS ALL	totalRotate	= totalRotate,
												iRotateType = 1,
												iRiseRunTextPosition = 1,
												RiseRunUNID	= RiseRunUNID
endif


! --- Up & Down Text ---------------------------------------------------------
iReadable = 0
if walkingDirUPDN_m <> 1 & bShowWalkLine & not(belowStory) then		! None
	DRAWINDEX 50
	PEN UPDNfontpen
	xNosing = nosing * (drawDetails[1]|drawDetails[3])

	if (walkingDirUPDN_m = 2 | walkingDirUPDN_m = 5 | (walkingDirUPDN_m = 6 & not(abovestory) & not(belowstory) )) & (drawPart[1]|drawPart[3]) then
		nTransUPDN = 0
		set style "UPDN"
		add2 flightWidth/2+DirUPDN_X,DirUPDN_Y-xNosing
		nTransUPDN = nTransUPDN + 1
		! Text Rotation - Readable / Parallel with Walking Line / Align with Symbol
		! ----------------------------------------------------------------------
		if typeTextRotation_UpDn_m = 2 then									! Readable
			if (totalRotate > (gs_readable_angle + eps) & totalRotate < (gs_readable_angle + 180 + eps)) then
				rot2 180
				nTransUPDN = nTransUPDN + 1
			endif
		else
			if typeTextRotation_UpDn_m = 1 then								! Parallel with Walking Line
				if SYMB_MIRRORED then
					iReadable = not(totalRotate > (gs_readable_angle - 90 + eps) & totalRotate < (gs_readable_angle + 180 - 90 + eps)) - (totalRotate > (gs_readable_angle - 90 + eps) & totalRotate < (gs_readable_angle + 180 - 90 + eps))
				else
					iReadable = not(totalRotate < (gs_readable_angle - 90 + eps) | totalRotate > (gs_readable_angle + 180 - 90 + eps)) - (totalRotate < (gs_readable_angle - 90 + eps) | totalRotate > (gs_readable_angle + 180 - 90 + eps))
				endif
				rot2 -90 * iReadable
				nTransUPDN = nTransUPDN + 1
			endif
		endif
		! ----------------------------------------------------------------------
		rot2 AngUPDN
		nTransUPDN = nTransUPDN + 1

		string1	= `ВВЕРХ`
		text2 0,0, string1

		del nTransUPDN

		width1	= STW (string1)/1000*GLOB_SCALE
		rb		= width1/2
	endif

	if walkingDirUPDN_m = 3 & (drawPart[1]|drawPart[3]) then ! Down at Bottom
		nTransUPDN = 0
		set style "UPDN"
		add2 flightWidth/2+DirUPDN_X,DirUPDN_Y-xNosing
		nTransUPDN = nTransUPDN + 1

		! Text Rotation - Readable / Parallel with Walking Line / Align with Symbol
		! ----------------------------------------------------------------------
		if typeTextRotation_UpDn_m = 2 then									! Readable
			if (totalRotate > (gs_readable_angle + eps) & totalRotate < (gs_readable_angle + 180 + eps)) then
				rot2 180
				nTransUPDN = nTransUPDN + 1
			endif
		else
			if typeTextRotation_UpDn_m = 1 then								! Parallel with Walking Line
				if SYMB_MIRRORED then
					iReadable = not(totalRotate > (gs_readable_angle - 90 + eps) & totalRotate < (gs_readable_angle + 180 - 90 + eps)) - (totalRotate > (gs_readable_angle - 90 + eps) & totalRotate < (gs_readable_angle + 180 - 90 + eps))
				else
					iReadable = not(totalRotate < (gs_readable_angle - 90 + eps) | totalRotate > (gs_readable_angle + 180 - 90 + eps)) - (totalRotate < (gs_readable_angle - 90 + eps) | totalRotate > (gs_readable_angle + 180 - 90 + eps))
				endif
				rot2 -90 * iReadable
				nTransUPDN = nTransUPDN + 1
			endif
		endif
		! ----------------------------------------------------------------------
		rot2 AngUPDN
		nTransUPDN = nTransUPDN + 1

		text2 0,0, gs_CustomText_Down

		del nTransUPDN

		string2	= gs_CustomText_Down
		width2	= STW (string2)/1000*GLOB_SCALE
		rb		= width2/2
	endif

	if (walkingDirUPDN_m = 2 | walkingDirUPDN_m = 5 | walkingDirUPDN_m = 3 | (walkingDirUPDN_m = 6 & not(abovestory) & not(belowstory))) & (drawPart[1]|drawPart[3]) then
		nTransHotspot = 0
		add2 flightWidth/2+DirUPDN_X,DirUPDN_Y-xNosing
		nTransHotspot = nTransHotspot  + 1
		if typeTextRotation_UpDn_m = 1 then
			rot2 -90 * iReadable
			nTransHotspot = nTransHotspot  + 1
		endif
		HOTSPOT2 0,					0,				UpDownUNID,	AngUPDN,	6		: UpDownUNID=UpDownUNID+1
		HOTSPOT2 rb,				0,				UpDownUNID,	AngUPDN,	4+128	: UpDownUNID=UpDownUNID+1
		HOTSPOT2 rb*cos(AngUPDN),	rb*sin(AngUPDN),UpDownUNID,	AngUPDN,	5		: UpDownUNID=UpDownUNID+1
		DEL nTransHotspot
	endif

	if (walkingDirUPDN_m = 4 | walkingDirUPDN_m = 5 | (walkingDirUPDN_m = 6 & abovestory)) & (drawPart[2]|drawPart[3]) then
		nTransUPDN = 0
		set style "UPDN"
		add2 A-flightWidth/2+DirUPDN_X_top,DirUPDN_Y_top
		nTransUPDN = nTransUPDN + 1

		! Text Rotation - Readable / Parallel with Walking Line / Align with Symbol
		! ----------------------------------------------------------------------
		if typeTextRotation_UpDn_m = 2 then									! Readable
			if (totalRotate > (gs_readable_angle + eps) & totalRotate < (gs_readable_angle + 180 + eps)) then
				rot2 180
				nTransUPDN = nTransUPDN + 1
			endif
		else
			if typeTextRotation_UpDn_m = 1 then								! Parallel with Walking Line
				if SYMB_MIRRORED then
					iReadable = not(totalRotate > (gs_readable_angle - 90 + eps) & totalRotate < (gs_readable_angle + 180 - 90 + eps)) - (totalRotate > (gs_readable_angle - 90 + eps) & totalRotate < (gs_readable_angle + 180 - 90 + eps))
				else
					iReadable = not(totalRotate < (gs_readable_angle - 90 + eps) | totalRotate > (gs_readable_angle + 180 - 90 + eps)) - (totalRotate < (gs_readable_angle - 90 + eps) | totalRotate > (gs_readable_angle + 180 - 90 + eps))
				endif
				rot2 -90 * iReadable
				nTransUPDN = nTransUPDN + 1
			endif
		endif
		! ----------------------------------------------------------------------
		ROT2 AngUPDN_top
		nTransUPDN = nTransUPDN + 1

		text2 0,0, gs_CustomText_Down

		del nTransUPDN

		string2	= gs_CustomText_Down
		width2	= STW (string2)/1000*GLOB_SCALE
		rb		= width2/2
	endif

	if (walkingDirUPDN_m = 4 | walkingDirUPDN_m = 5 | (walkingDirUPDN_m = 6 & abovestory)) & (drawPart[2]|drawPart[3]) then
		nTransHotspot = 0
		ADD2 A-flightWidth/2+DirUPDN_X_top,DirUPDN_Y_top
		nTransHotspot = nTransHotspot  + 1
		if typeTextRotation_UpDn_m = 1 then
			rot2 -90 * iReadable
			nTransHotspot = nTransHotspot  + 1
		endif
		HOTSPOT2 0,						0,					UpDownUNID,	AngUPDN_top,	6		: UpDownUNID=UpDownUNID+1
		HOTSPOT2 rb,					0,					UpDownUNID,	AngUPDN_top,	4+128	: UpDownUNID=UpDownUNID+1
		HOTSPOT2 rb*cos(AngUPDN_top),	rb*sin(AngUPDN_top),UpDownUNID,	AngUPDN_top,	5		: UpDownUNID=UpDownUNID+1
		DEL nTransHotspot
	endif
endif

! --- Numbering ----------------------------------------------------------------

if drawNum & not(belowStory) then
	startNumber	= 1
	endNumber	= nRisers1stRun
	td_t = treadDepth

	xNosing = nosing * (drawDetails[1]|drawDetails[3])

	FOR iNumFlight = 1 to 3
		if iNumFlight = 1 | iNumFlight = 3 then treadDepth = treadDepth
		if iNumFlight = 2 then treadDepth = td2
		DRAWINDEX 50

		set style "stepnum"
		nnn = REQUEST ("Height_of_style", "stepnum", strHeight)
		strHeight = strHeight / 1000 * GLOB_SCALE
		add2 DirNumText_X, DirNumText_Y - treadDepth/2- xNosing

		bReadable = 0
		if iNumFlight = 1 then
			bReadable = (totalRotate > (gs_readable_angle + eps) & totalRotate < (gs_readable_angle + 180 + eps))
		else
			if iNumFlight = 2 then
				if SYMB_MIRRORED then
					bReadable = (totalRotate > (gs_readable_angle - 90 + eps) & totalRotate < (gs_readable_angle + 180 - 90 + eps))
				else
					bReadable = (totalRotate < (gs_readable_angle - 90 + eps) | totalRotate > (gs_readable_angle + 180 - 90 + eps))
				endif
			else
				bReadable = (totalRotate < (gs_readable_angle + eps) | totalRotate > (gs_readable_angle + 180 + eps))
			endif
		endif

		for iNumStep = startNumber to endNumber
			add2 0, treadDepth
			pen gs_NumTextPen
			nTextTransformations = 0
			! Text Rotation - Readable / Align with Symbol
			! ----------------------------------------------------------------------
			if typeTextRotation_Num_m = 2 & bReadable = 1 then								! Readable
				rot2 180
				strWidth = STW(str("%.0", iNumStep + nStartNumbering-1)) / 1000 * GLOB_SCALE
				add2 -strWidth, strHeight
				nTextTransformations = 2
			endif
			! ----------------------------------------------------------------------

			text2 0,0,iNumStep + nStartNumbering-1
			if nTextTransformations > 0 then del nTextTransformations
			pen gs_cont_pen
		next iNumStep
		del (endNumber - startNumber + 1) + 1

		treadDepth = td_t

		if iNumFlight = 1 then
			startNumber = nRisers1stRun + 1
			endNumber	= nRisers1stRun + nRisers2ndRun
			add2 flightWidth,(nRisers1stRun-1)*treadDepth+flightWidth
			rot2 -90
		endif
		if iNumFlight = 2 then
			startNumber = nRisers1stRun + nRisers2ndRun + 1
			endNumber = nRisers
			add2 flightWidth,(nRisers2ndRun-1)*td2+flightWidth
			rot2 -90
		endif
	next iNumFlight
	del 4

	hotspot2 0,				DirNumText_Y- xNosing,	NumUnID, DirNumText_X,	1+128	:NumUnID=NumUnID+1
	hotspot2 -1,			DirNumText_Y- xNosing,	NumUnID, DirNumText_X,	3		:NumUnID=NumUnID+1
	hotspot2 DirNumText_X,	DirNumText_Y- xNosing,	NumUnID, DirNumText_X,	2		:NumUnID=NumUnID+1

	hotspot2 DirNumText_X, - xNosing,				NumUnID, DirNumText_Y, 1+128	:NumUnID=NumUnID+1
	hotspot2 DirNumText_X, -1,				NumUnID, DirNumText_Y, 3		:NumUnID=NumUnID+1
	hotspot2 DirNumText_X, DirNumText_Y- xNosing,	NumUnID, DirNumText_Y,	2		:NumUnID=NumUnID+1
endif

! --- Description ----------------------------------------------------------------

if STRLEN(gs_description) <> 0 & not(belowStory) then
	lengthWalkLine = A+2*(B-flightWidth)

	dim gs_description_bpos[3][3]
	gs_description_bpos[1][1] = flightWidth + lengthWalkLine/2 - B
	gs_description_bpos[1][2] = B-flightWidth/2
	gs_description_bpos[1][3] = 0

	style "description"
	pen gs_desc_text_pen
	add2 (gs_description_bpos[1][1] + gs_description_pos[1][1]), (gs_description_bpos[1][2] + gs_description_pos[1][2])

	textangle = (gs_description_bpos[1][3] + gs_description_pos[1][3])

	reversedText = 0
	angleFull = (totalRotate + textangle) MOD 360

	if angleFull < 0 then
		angleFull = angleFull + 360
	endif
	if angleFull > (gs_readable_angle+eps) & angleFull < (gs_readable_angle + 180 +eps) then
		reversedText = 1
		textangle = textangle + 180
	endif
	rot2 textangle

	if reversedText then
		text2 -STW(gs_description) / 1000 * GLOB_SCALE, 0, gs_description
	else
		text2 0,0, gs_description
	endif

	del 2
	hotspot2 gs_description_bpos[1][1], gs_description_bpos[1][2] + gs_description_pos[1][2], 40000+1, gs_description_pos[1][1], 1 + 128
	posRel = gs_description_pos[1][1]
	if abs(posRel) < 0.00001 then
		posRel = 0.0001
	else
		posRel = 0
	endif
	hotspot2 gs_description_bpos[1][1] - posRel, gs_description_bpos[1][2] + gs_description_pos[1][2], 40000+2, gs_description_pos[1][1], 3 + 128
	hotspot2 gs_description_bpos[1][1] + gs_description_pos[1][1], gs_description_bpos[1][2] + gs_description_pos[1][2], 40000+3, gs_description_pos[1][1], 2

	hotspot2 gs_description_bpos[1][1] + gs_description_pos[1][1], gs_description_bpos[1][2], 40000+4, gs_description_pos[1][2], 1 + 128
	posRel = gs_description_pos[1][2]
	if abs(posRel) < 0.00001 then
		posRel = 0.0001
	else
		posRel = 0
	endif
	hotspot2 gs_description_bpos[1][1] + gs_description_pos[1][1], gs_description_bpos[1][2] - posRel, 40000+5, gs_description_pos[1][2], 3 + 128
	hotspot2 gs_description_bpos[1][1] + gs_description_pos[1][1], gs_description_bpos[1][2] + gs_description_pos[1][2], 40000+6, gs_description_pos[1][2], 2

	!angle edit
	HOTSPOT2 gs_description_bpos[1][1] + gs_description_pos[1][1],
				gs_description_bpos[1][2] + gs_description_pos[1][2],
				40000+7, gs_description_pos[1][3], 6 + 128

	HOTSPOT2 gs_description_bpos[1][1] + gs_description_pos[1][1] + GLOB_SCALE*0.5*COS(gs_description_bpos[1][3])*gs_desc_text_size/1000,
				gs_description_bpos[1][2] + gs_description_pos[1][2] + GLOB_SCALE*0.5*SIN(gs_description_bpos[1][3])*gs_desc_text_size/1000,
				40000+8, gs_description_pos[1][3], 4 + 128

	HOTSPOT2 gs_description_bpos[1][1] + gs_description_pos[1][1] + GLOB_SCALE*0.5*gs_desc_text_size*COS(gs_description_bpos[1][3] + gs_description_pos[1][3])/1000,
				gs_description_bpos[1][2] + gs_description_pos[1][2] + GLOB_SCALE*0.5*gs_desc_text_size*SIN(gs_description_bpos[1][3] + gs_description_pos[1][3])/1000,
				40000+9, gs_description_pos[1][3], 5
endif

!===================================================================
! HOTSPOT EDITING in 2D
!===================================================================
DRAWINDEX 50
!-- FLIGHT WIDTH ---------------------------------------------------
xNosing = nosing * (drawDetails[1]|drawDetails[3])

	HOTSPOT2 0,				0,	FlightUNID, flightWidth, 1+128	: FlightUNID=FlightUNID+1
	HOTSPOT2 flightWidth,	0,	FlightUNID, flightWidth, 2		: FlightUNID=FlightUNID+1
	HOTSPOT2 -0.1,			0,	FlightUNID, flightWidth, 3		: FlightUNID=FlightUNID+1

	HOTSPOT2 a,				0,	FlightUNID, flightWidth, 1+128	: FlightUNID=FlightUNID+1
	HOTSPOT2 a-flightWidth,	0,	FlightUNID, flightWidth, 2		: FlightUNID=FlightUNID+1
	HOTSPOT2 a+0.1,			0,	FlightUNID, flightWidth, 3		: FlightUNID=FlightUNID+1

	HOTSPOT2 flightWidth,(nRisers1stRun-1)*treadDepth+flightWidth,		FlightUNID, flightWidth, 1+128	: FlightUNID=FlightUNID+1
	HOTSPOT2 flightWidth,(nRisers1stRun-1)*treadDepth,					FlightUNID, flightWidth, 2		: FlightUNID=FlightUNID+1
	HOTSPOT2 flightWidth,(nRisers1stRun-1)*treadDepth+flightWidth+0.1,	FlightUNID, flightWidth, 3		: FlightUNID=FlightUNID+1

	HOTSPOT2 flightWidth+(nRisers2ndRun-1)*td2,(nRisers1stRun-1)*treadDepth+flightWidth,	FlightUNID, flightWidth, 1+128 : FlightUNID=FlightUNID+1
	HOTSPOT2 flightWidth+(nRisers2ndRun-1)*td2,(nRisers1stRun-1)*treadDepth,				FlightUNID, flightWidth, 2		: FlightUNID=FlightUNID+1
	HOTSPOT2 flightWidth+(nRisers2ndRun-1)*td2,(nRisers1stRun-1)*treadDepth+flightWidth+0.1,FlightUNID, flightWidth, 3		: FlightUNID=FlightUNID+1

	HOTSPOT2 a,	0,	FlightUNID, b, 1+256	: FlightUNID=FlightUNID+1
	HOTSPOT2 a,	b,	FlightUNID, b, 2		: FlightUNID=FlightUNID+1
	HOTSPOT2 a,	-1,	FlightUNID, b, 3		: FlightUNID=FlightUNID+1

	HOTSPOT2 0,0,	FlightUNID, b, 1+256	: FlightUNID=FlightUNID+1
	HOTSPOT2 0,b,	FlightUNID, b, 2		: FlightUNID=FlightUNID+1
	HOTSPOT2 0,-1,	FlightUNID, b, 3		: FlightUNID=FlightUNID+1

	HOTSPOT2 0,b,	FlightUNID, a, 1+256	: FlightUNID=FlightUNID+1
	HOTSPOT2 a,b,	FlightUNID, a, 2		: FlightUNID=FlightUNID+1
	HOTSPOT2 0,-1,	FlightUNID, a, 3		: FlightUNID=FlightUNID+1

!!! UP/DOWN TEXT !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
IF bShowWalkLine & not(belowStory) THEN
	IF (walkingDirUPDN_m = 2 | walkingDirUPDN_m = 3 | walkingDirUPDN_m = 5) & bShowWalkLine then
		HOTSPOT2 flightWidth/2,				DirUPDN_Y-xNosing, UpDownUNID, DirUPDN_X, 1+128		: UpDownUNID=UpDownUNID+1
		HOTSPOT2 flightWidth/2-1,			DirUPDN_Y-xNosing, UpDownUNID, DirUPDN_X, 3			: UpDownUNID=UpDownUNID+1
		HOTSPOT2 flightWidth/2+DirUPDN_X,	DirUPDN_Y-xNosing, UpDownUNID, DirUPDN_X, 2			: UpDownUNID=UpDownUNID+1

		HOTSPOT2 flightWidth/2+DirUPDN_X,	0-xNosing,			UpDownUNID, DirUPDN_Y, 1+128	: UpDownUNID=UpDownUNID+1
		HOTSPOT2 flightWidth/2+DirUPDN_X,	-1,			UpDownUNID, DirUPDN_Y, 3		: UpDownUNID=UpDownUNID+1
		HOTSPOT2 flightWidth/2+DirUPDN_X,	DirUPDN_Y-xNosing,	UpDownUNID, DirUPDN_Y, 2		: UpDownUNID=UpDownUNID+1
	ENDIF
	IF (walkingDirUPDN_m = 4 | walkingDirUPDN_m = 5) & bShowWalkLine then
		HOTSPOT2 A-flightWidth/2,				DirUPDN_Y_top, UpDownUNID, DirUPDN_X_top, 1+128		: UpDownUNID=UpDownUNID+1
		HOTSPOT2 A-flightWidth/2-1,				DirUPDN_Y_top, UpDownUNID, DirUPDN_X_top, 3			: UpDownUNID=UpDownUNID+1
		HOTSPOT2 A-flightWidth/2+DirUPDN_X_top,	DirUPDN_Y_top, UpDownUNID, DirUPDN_X_top, 2			: UpDownUNID=UpDownUNID+1

		HOTSPOT2 A-flightWidth/2+DirUPDN_X_top,	0,				UpDownUNID, DirUPDN_Y_top, 1+128	: UpDownUNID=UpDownUNID+1
		HOTSPOT2 A-flightWidth/2+DirUPDN_X_top,	-1,				UpDownUNID, DirUPDN_Y_top, 3		: UpDownUNID=UpDownUNID+1
		HOTSPOT2 A-flightWidth/2+DirUPDN_X_top,DirUPDN_Y_top,	UpDownUNID, DirUPDN_Y_top, 2		: UpDownUNID=UpDownUNID+1
	ENDIF
endif

!-- RAILING  ---------------------------------------------------
if _bShowRailIn2D & bShowRailOnFloorPlan & not(belowStory) then
xNosing = 0 ! COMP nosing * (drawDetails[1]|drawDetails[3])

IF rail_m = 2 | rail_m = 1 THEN		! Right, Both

		!!! RAIL OFFSET - right
		HOTSPOT2 flightWidth-rightRailFrameThk/2,					-rightRailOvhgBottom, RailUNID, rightRailOffset, 1+128 : RailUNID=RailUNID+1
		HOTSPOT2 flightWidth-rightRailFrameThk/2-rightRailOffset,	-rightRailOvhgBottom, RailUNID, rightRailOffset, 2 : RailUNID=RailUNID+1
		HOTSPOT2 flightWidth-rightRailFrameThk/2-0.1,				-rightRailOvhgBottom, RailUNID, rightRailOffset, 3 : RailUNID=RailUNID+1

		HOTSPOT2 flightWidth+(nRisers2ndRun-1)*td2+rightRailFrameThk/2,					(nRisers1stRun-1-nRisers3rdRun)*treadDepth-rightRailOvhgTop, RailUNID, rightRailOffset, 1+128 : RailUNID=RailUNID+1
		HOTSPOT2 flightWidth+(nRisers2ndRun-1)*td2+rightRailFrameThk/2+0.1,				(nRisers1stRun-1-nRisers3rdRun)*treadDepth-rightRailOvhgTop, RailUNID, rightRailOffset, 3 : RailUNID=RailUNID+1
		HOTSPOT2 flightWidth+(nRisers2ndRun-1)*td2+rightRailOffset+rightRailFrameThk/2,	(nRisers1stRun-1-nRisers3rdRun)*treadDepth-rightRailOvhgTop, RailUNID, rightRailOffset, 2 : RailUNID=RailUNID+1

		!!! RAIL BOTTOM OVERHANG
		HOTSPOT2 flightWidth-rightRailFrameThk/2-rightRailOffset,		0,						RailUNID, rightRailOvhgBottom, 1+128	: RailUNID=RailUNID+1
		HOTSPOT2 flightWidth-rightRailFrameThk/2-rightRailOffset,		0+1,					RailUNID, rightRailOvhgBottom, 3		: RailUNID=RailUNID+1
		HOTSPOT2 flightWidth-rightRailFrameThk/2-rightRailOffset,		0-rightRailOvhgBottom,	RailUNID, rightRailOvhgBottom, 2		: RailUNID=RailUNID+1

		!!! RAIL TOP OVERHANG
		HOTSPOT2 flightWidth+(nRisers2ndRun-1)*td2+rightRailOffset+rightRailFrameThk/2,		(nRisers1stRun-1-nRisers3rdRun)*treadDepth,		RailUNID, rightRailOvhgTop, 1+128 : RailUNID=RailUNID+1
		HOTSPOT2 flightWidth+(nRisers2ndRun-1)*td2+rightRailOffset+rightRailFrameThk/2,		(nRisers1stRun-1-nRisers3rdRun)*treadDepth+0.1, RailUNID, rightRailOvhgTop, 3 : RailUNID=RailUNID+1
		HOTSPOT2 flightWidth+(nRisers2ndRun-1)*td2+rightRailOffset+rightRailFrameThk/2,		(nRisers1stRun-1-nRisers3rdRun)*treadDepth-rightRailOvhgTop, RailUNID, rightRailOvhgTop, 2 : RailUNID=RailUNID+1
ENDIF

IF rail_m = 3 | rail_m = 1 THEN		! Left, Both

		!!! RAIL OFFSET - left
		HOTSPOT2 leftRailFrameThk/2,				-leftRailOvhgBottom, RailUNID, leftRailOffset, 1+128 : RailUNID=RailUNID+1
		HOTSPOT2 leftRailFrameThk/2+leftRailOffset,	-leftRailOvhgBottom, RailUNID, leftRailOffset, 2 : RailUNID=RailUNID+1
		HOTSPOT2 leftRailFrameThk/2+0.1,			-leftRailOvhgBottom, RailUNID, leftRailOffset, 3 : RailUNID=RailUNID+1

		HOTSPOT2 2*flightWidth+(nRisers2ndRun-1)*td2-leftRailFrameThk/2,				(nRisers1stRun-1-nRisers3rdRun)*treadDepth-leftRailOvhgTop, RailUNID, leftRailOffset, 1+128 : RailUNID=RailUNID+1
		HOTSPOT2 2*flightWidth+(nRisers2ndRun-1)*td2-leftRailFrameThk/2-0.1,			(nRisers1stRun-1-nRisers3rdRun)*treadDepth-leftRailOvhgTop, RailUNID, leftRailOffset, 3 : RailUNID=RailUNID+1
		HOTSPOT2 2*flightWidth+(nRisers2ndRun-1)*td2-leftRailOffset-leftRailFrameThk/2,	(nRisers1stRun-1-nRisers3rdRun)*treadDepth-leftRailOvhgTop, RailUNID, leftRailOffset, 2 : RailUNID=RailUNID+1

		!!! RAIL BOTTOM OVERHANG
		HOTSPOT2 leftRailFrameThk/2+leftRailOffset,		0,					RailUNID, leftRailOvhgBottom, 1+128 : RailUNID=RailUNID+1
		HOTSPOT2 leftRailFrameThk/2+leftRailOffset,		1,					RailUNID, leftRailOvhgBottom, 3		: RailUNID=RailUNID+1
		HOTSPOT2 leftRailFrameThk/2+leftRailOffset,		-leftRailOvhgBottom,RailUNID, leftRailOvhgBottom, 2		: RailUNID=RailUNID+1

		!!! RAIL TOP OVERHANG
		HOTSPOT2 2*flightWidth+(nRisers2ndRun-1)*td2-leftRailOffset-leftRailFrameThk/2,		(nRisers1stRun-1-nRisers3rdRun)*treadDepth,					RailUNID, leftRailOvhgTop, 1+128 : RailUNID=RailUNID+1
		HOTSPOT2 2*flightWidth+(nRisers2ndRun-1)*td2-leftRailOffset-leftRailFrameThk/2,		(nRisers1stRun-1-nRisers3rdRun)*treadDepth+0.1,				RailUNID, leftRailOvhgTop, 3 : RailUNID=RailUNID+1
		HOTSPOT2 2*flightWidth+(nRisers2ndRun-1)*td2-leftRailOffset-leftRailFrameThk/2,		(nRisers1stRun-1-nRisers3rdRun)*treadDepth-leftRailOvhgTop, RailUNID, leftRailOvhgTop, 2 : RailUNID=RailUNID+1
ENDIF
endif

END


"Start End Symbol":
	DRAWINDEX 45
	fill gs_StartEndFill

	if gs_StartEndFillPen <> 0 then
		temp_FillStatus = 2
	else
		temp_FillStatus = 0
	endif

	add2 0, +xNosing
	IF gs_StartEndStyle_m = 1 THEN		! Style 1
		POLY2_B 2, 1+temp_FillStatus, gs_StartEndFillPen, gs_fill_pen,
		0,-xNosing,901,
		gs_CircleRadius,360,4001
	ENDIF

	IF gs_StartEndStyle_m = 2 THEN		! Style 2
		FOR kk=1 TO 2
			POLY2_B 6, 1+temp_FillStatus, gs_StartEndFillPen, gs_fill_pen,
				0,-xNosing,1,
				0+gs_CircleRadius,-xNosing,1,
				0,-xNosing,901,
				0,90,4001,
				0,-xNosing+gs_CircleRadius,0,
				0,-xNosing,-1

			POLY2_B 6, 1, gs_StartEndFillPen, gs_fill_pen,
				0,-xNosing,1,
				0,-xNosing+gs_CircleRadius,1,
				0,-xNosing,901,
				0,90,4001,
				0-gs_CircleRadius,-xNosing,0,
				0,-xNosing,-1
		ROT2 180
		ADD2 0, 2*xNosing
		NEXT kk
		DEL 4
	ENDIF

	IF gs_StartEndStyle_m = 3 THEN		! Style 3
		LINE2 0+gs_StartWidth,-xNosing-gs_StartHeight,0+gs_StartWidth,-xNosing+gs_StartHeight
		LINE2 0-gs_StartWidth,-xNosing-gs_StartHeight,0-gs_StartWidth,-xNosing+gs_StartHeight
	ENDIF

	! --- Hotspots of StartEnd Symbol
	IF gs_StartEndStyle_m = 1 | gs_StartEndStyle_m = 2 THEN		! Style 1-2
		ADD2 0,-xNosing
			FOR kk=1 to 4
				HOTSPOT2 0, 0,					StartSymbUNID, gs_CircleRadius, 1+128	:StartSymbUNID=StartSymbUNID+1
				HOTSPOT2 -1, 0,					StartSymbUNID, gs_CircleRadius, 3+128	:StartSymbUNID=StartSymbUNID+1
				HOTSPOT2 gs_CircleRadius, 0,	StartSymbUNID, gs_CircleRadius,2		:StartSymbUNID=StartSymbUNID+1

				ROT2 90
			NEXT KK
			DEL 4
		DEL 1
	ENDIF

	IF gs_StartEndStyle_m = 3 THEN		! Style 3
		FOR kk=1 to 2
			ADD2 0, -xNosing
				! Symbol Width/2
				HOTSPOT2 0,				-gs_StartHeight, StartSymbUNID, gs_StartWidth, 1+128:StartSymbUNID=StartSymbUNID+1
				HOTSPOT2 -1,			-gs_StartHeight, StartSymbUNID, gs_StartWidth, 3	:StartSymbUNID=StartSymbUNID+1
				HOTSPOT2 gs_StartWidth, -gs_StartHeight, StartSymbUNID, gs_StartWidth, 2	:StartSymbUNID=StartSymbUNID+1

				HOTSPOT2 0,				gs_StartHeight, StartSymbUNID, gs_StartWidth, 1+128	:StartSymbUNID=StartSymbUNID+1
				HOTSPOT2 -1,			gs_StartHeight, StartSymbUNID, gs_StartWidth, 3		:StartSymbUNID=StartSymbUNID+1
				HOTSPOT2 gs_StartWidth, gs_StartHeight, StartSymbUNID, gs_StartWidth,2		:StartSymbUNID=StartSymbUNID+1
			DEL 1

			ADD2 0, -xNosing
				! Symbol Height
				HOTSPOT2 gs_StartWidth, 0,				StartSymbUNID, gs_StartHeight, 1+128:StartSymbUNID=StartSymbUNID+1
				HOTSPOT2 gs_StartWidth, -1,				StartSymbUNID, gs_StartHeight, 3	:StartSymbUNID=StartSymbUNID+1
				HOTSPOT2 gs_StartWidth, gs_StartHeight, StartSymbUNID, gs_StartHeight, 2	:StartSymbUNID=StartSymbUNID+1

				HOTSPOT2 gs_StartWidth, 0,					StartSymbUNID, gs_StartHeight, 1+128:StartSymbUNID=StartSymbUNID+1
				HOTSPOT2 gs_StartWidth, 1,					StartSymbUNID, gs_StartHeight, 3	:StartSymbUNID=StartSymbUNID+1
				HOTSPOT2 gs_StartWidth, -gs_StartHeight,	StartSymbUNID, gs_StartHeight, 2	:StartSymbUNID=StartSymbUNID+1
			DEL 1

		MUL2 -1,1
		NEXT kk
		DEL 2
	ENDIF
	del 1

	DRAWINDEX 40
RETURN


"Arrowhead Symbol":
	IF arrow_style_m = 1 | arrow_style_m = 4 | arrow_style_m = 7 THEN
		temp_ArrowDist = flightWidth/2
		temp_ArrowHeight = treadDepth
		if not(reverseWalkLine) & (i = 2 | i = 3) & walkingDirUPDN_m <> 5 then temp_ArrowHeight = treadDepth + xNosing
	ENDIF

	IF arrow_style_m = 2 | arrow_style_m = 5 | arrow_style_m = 8 THEN
		temp_ArrowDist = flightWidth/4
		temp_ArrowHeight = treadDepth
		if not(reverseWalkLine) & (i = 2 | i = 3) & walkingDirUPDN_m <> 5 then temp_ArrowHeight = treadDepth + xNosing
	ENDIF

	IF arrow_style_m = 3 | arrow_style_m = 6 | arrow_style_m = 9 THEN
		temp_ArrowDist = gs_ArrowHalfWidth
		temp_ArrowHeight = gs_ArrowHeight
	ENDIF

	if arrow_style_m = 1 | arrow_style_m = 2 | arrow_style_m = 3 then
		temp_ArrowMask=0
	else
		temp_ArrowMask=1
	endif

	POLY2_b 4, 1, penFillArrow, gs_fill_pen,
		-temp_ArrowDist,-temp_ArrowHeight, temp_ArrowMask,
		temp_ArrowDist,-temp_ArrowHeight, 1,
		0,0, 1,
		-temp_ArrowDist,-temp_ArrowHeight, -1

	! --- Arrowhead Fill Contour Points Conditions
	IF arrow_style_m = 4 | arrow_style_m = 5 | arrow_style_m = 6 THEN
		temp_1XFill=temp_ArrowDist
		lengthArrowHead = temp_ArrowHeight
	else
		lengthArrowHead = 0
	ENDIF

	IF arrow_style_m = 7 | arrow_style_m = 8 | arrow_style_m = 9 THEN
		temp_1XFill=0
	ENDIF

	if penFillArrow <> 0 then
		IF arrow_style_m <> 1 & arrow_style_m <> 2 & arrow_style_m <> 3 THEN
			fill gs_ArrowFill ! Always 64 (Foreground)
			POLY2_b 4, 2, penFillArrow, gs_fill_pen,
				-temp_1XFill,-temp_ArrowHeight, temp_ArrowMask,
				temp_ArrowDist,-temp_ArrowHeight, 1,
				0,0, 1,
				-temp_1XFill,-temp_ArrowHeight, -1
		ENDIF
	endif

	HOTSPOT2	0,0,	ArrowUNID: ArrowUNID=ArrowUNID+1

	! --- Hotspot editing of Height & Width of Arrowhead
	IF arrow_style_m = 3 | arrow_style_m = 6 | arrow_style_m = 9 THEN
		HOTSPOT2 gs_ArrowHalfWidth,0,				ArrowUNID, gs_ArrowHeight, 1+128	: ArrowUNID=ArrowUNID+1
		HOTSPOT2 gs_ArrowHalfWidth,-gs_ArrowHeight,	ArrowUNID, gs_ArrowHeight, 2		: ArrowUNID=ArrowUNID+1
		HOTSPOT2 gs_ArrowHalfWidth,1,				ArrowUNID, gs_ArrowHeight, 3		: ArrowUNID=ArrowUNID+1

		HOTSPOT2 -gs_ArrowHalfWidth,0,					ArrowUNID, gs_ArrowHeight, 1+128	: ArrowUNID=ArrowUNID+1
		HOTSPOT2 -gs_ArrowHalfWidth,-gs_ArrowHeight,	ArrowUNID, gs_ArrowHeight, 2		: ArrowUNID=ArrowUNID+1
		HOTSPOT2 -gs_ArrowHalfWidth,1,					ArrowUNID, gs_ArrowHeight, 3		: ArrowUNID=ArrowUNID+1

		HOTSPOT2 0,					-gs_ArrowHeight,	ArrowUNID, gs_ArrowHalfWidth, 1+128	: ArrowUNID=ArrowUNID+1
		HOTSPOT2 gs_ArrowHalfWidth,	-gs_ArrowHeight,	ArrowUNID, gs_ArrowHalfWidth, 2		: ArrowUNID=ArrowUNID+1
		HOTSPOT2 -1,				-gs_ArrowHeight,	ArrowUNID, gs_ArrowHalfWidth, 3		: ArrowUNID=ArrowUNID+1

		HOTSPOT2 0,					-gs_ArrowHeight,	ArrowUNID, gs_ArrowHalfWidth, 1+128 : ArrowUNID=ArrowUNID+1
		HOTSPOT2 -gs_ArrowHalfWidth,-gs_ArrowHeight,	ArrowUNID, gs_ArrowHalfWidth, 2		: ArrowUNID=ArrowUNID+1
		HOTSPOT2 1,					-gs_ArrowHeight,	ArrowUNID, gs_ArrowHalfWidth, 3		: ArrowUNID=ArrowUNID+1
	ENDIF
RETURN


"left rail":

	if bShowRailOn1stRun then
		ADD2 leftRailOffset+leftRailFrameThk/2,-leftRailOvhgBottom
		ROT2 90

		lraSimple=(nRisers1stRun-1)*treadDepth+leftRailOvhgBottom
		lraComplex=(nRisers1stRun-2)*treadDepth
		additionXComplex=leftRailOvhgBottom+treadDepth/2
		additionZComplex=leftRailOvhgBottom*tan(ang)
		hrovL=treadDepth/2+leftRailOvhgBottom
		hrovR=treadDepth/2
		postNumber = max(2,(nRisers1stRun)/2+1)
		railAngle	= ang
		side = SIDE_LEFT
		gosub "callRailsForStair"

		DEL 2
	endif

	! ------------ POST & Rail on the landing (left side_1) ------------
	if bShowRailOn1stLanding1 then
		ADD2 leftRailOffset+leftRailFrameThk/2,(nRisers1stRun-1)*treadDepth
		ROT2 90

		lraSimple=flightWidth-leftRailOffset-leftRailFrameThk
		lraComplex=flightWidth-leftRailOffset-leftRailFrameThk
		hrovL=leftRailPostSize/2
		hrovR=-leftRailPostSize/2
		postNumber = max(2,(flightWidth-leftRailOffset-treadDepth)/0.5+1)
		side = SIDE_LEFT
		gosub "callRailsForLanding"

		DEL 2
	endif

	! ------------ POST & Rail on the landing (left side_2) ------------
	if bShowRailOn1stLanding2 then
		ADD2 leftRailOffset,b-leftRailOffset-leftRailFrameThk/2-gapToFirstTread

		IF flightWidth-leftRailOffset-td2>2*leftRailFrameThk then
			IF leftRailType_m > 0 and leftRailType_m < 7 THEN
				lraSimple=flightWidth-leftRailOffset-td2
				lraComplex=flightWidth-leftRailOffset-leftRailFrameThk
				hrovL=leftRailPostSize/2
				hrovR=-leftRailPostSize/2
				postNumber = max(2,(flightWidth-leftRailOffset-treadDepth)/0.5+1)
				side = SIDE_LEFT
				gosub "callRailsForLanding"
			endif
		ENDIF

		IF bComplexRailLeft THEN
			if leftRailType_m = 9 and (flightWidth-leftRailOffset-leftRailPostSize-td2<max(treadDepth/2,0.2)) then
				add2 0,-leftRailFrameThk/2
				poly2_b 4, 1 + 2 * (NOT(bRailAboveBreakLine) + bRailAboveBreakLine * gs_FillAbove) + 4 + 64, gs_fill_pen, gs_back_pen,
					0, 0, 1,
					flightWidth-leftRailOffset-td2, 0, 1,
					flightWidth-leftRailOffset-td2, leftRailFrameThk, 1,
					0, leftRailFrameThk, 1
				del 1
			else
				lraSimple=flightWidth-leftRailOffset-leftRailPostSize-td2
				lraComplex=flightWidth-leftRailOffset-leftRailPostSize-td2
				hrovL=leftRailPostSize/2
				hrovR=leftRailPostSize/2
				postNumber = max(2,(flightWidth-leftRailOffset-treadDepth)/0.5+1)
				side = SIDE_LEFT
				gosub "callRailsForLanding"
			endif
		endif

		DEL 1
	endif

	! ------------ Rail on 2nd Run ------------
	if bShowRailOn2ndRun then
		ADD2 flightWidth-td2,b-leftRailOffset-leftRailFrameThk/2-gapToFirstTread

		lraSimple=(nRisers2ndRun)*td2
		lraComplex=(nRisers2ndRun-1)*td2
		additionXComplex=td2/2
		additionZComplex=0
		hrovL=td2/2
		hrovR=td2/2
		postNumber = max(2,(nRisers2ndRun-1)/2+1)
		railAngle	= ang2
		side = SIDE_LEFT
		gosub "callRailsForStair"

		DEL 1
	endif

	! ------------ POST & Rail on the landing (left side_1) ------------
	if bShowRailOn2ndLanding1 then
		ADD2 a-flightWidth,b-leftRailOffset-leftRailFrameThk/2
		ROT2 0

		lraSimple=flightWidth-leftRailOffset-leftRailFrameThk
		lraComplex=flightWidth-leftRailOffset-leftRailFrameThk
		hrovL=leftRailPostSize/2
		hrovR=-leftRailPostSize/2
		postNumber = max(2,(flightWidth-leftRailOffset-leftRailFrameThk)/0.5+1)
		side = SIDE_LEFT
		gosub "callRailsForLanding"

		DEL 2
	endif

	! ------------ POST & Rail on the landing (left side_2) ------------
	if bShowRailOn2ndLanding2 then
		ADD2 a-leftRailOffset-leftRailFrameThk/2,b-leftRailOffset
		ROT2 -90

		IF flightWidth-leftRailOffset-treadDepth>2*leftRailFrameThk THEN
			IF leftRailType_m > 0 and leftRailType_m < 8 THEN
				lraSimple=flightWidth-leftRailOffset-treadDepth
				lraComplex=flightWidth-leftRailOffset-treadDepth-leftRailPostSize
				hrovL=leftRailPostSize/2
				hrovR=leftRailPostSize/2
				postNumber = max(2,(flightWidth-leftRailOffset-treadDepth)/0.5+1)
				side = SIDE_LEFT
				gosub "callRailsForLanding"
			endif
		endif
		IF leftRailType_m = 8 | leftRailType_m = 9 | leftRailType_m = 10 THEN
			if leftRailType_m = 9 and (flightWidth-leftRailOffset-leftRailPostSize-td2<max(treadDepth/2,0.2)) then
				add2 0,-leftRailFrameThk/2
				poly2_b 4, 1 + 2 * (NOT(bRailAboveBreakLine) + bRailAboveBreakLine * gs_FillAbove) + 4 + 64, gs_fill_pen, gs_back_pen,
					0, 0, 1,
					flightWidth-leftRailOffset-treadDepth, 0, 1,
					flightWidth-leftRailOffset-treadDepth, leftRailFrameThk, 1,
					0, leftRailFrameThk, 1
				del 1
			else
				lraSimple=flightWidth-leftRailOffset-leftRailPostSize-treadDepth
				lraComplex=flightWidth-leftRailOffset-leftRailPostSize-treadDepth
				hrovL=leftRailPostSize/2
				hrovR=leftRailPostSize/2
				postNumber = max(2,(flightWidth-leftRailOffset-treadDepth)/0.5+1)
				side = SIDE_LEFT
				gosub "callRailsForLanding"
			endif
		endif

		DEL 2
	endif

	! ------------ Rail on 3rd Run ------------
	if bShowRailOn3rdRun then
		ADD2 a-leftRailOffset-leftRailFrameThk/2,b-flightWidth+treadDepth
		ROT2 -90

		lraSimple=(nRisers3rdRun+1)*treadDepth+leftRailOvhgTop
		lraComplex=(nRisers3rdRun)*treadDepth
		additionXComplex=treadDepth/2
		additionZComplex=0
		hrovL=treadDepth/2
		hrovR=treadDepth/2+leftRailOvhgTop
		postNumber = max(2,(nRisers3rdRun)/2+1)
		railAngle	= ang
		side = SIDE_LEFT
		gosub "callRailsForStair"

		DEL 2
	endif

return


"right rail":

	if bShowRailOn1stRun then
		ADD2 flightWidth-rightRailOffset-rightRailFrameThk/2,-rightRailOvhgBottom
		ROT2 90

		lraSimple=(nRisers1stRun-1)*treadDepth+rightRailOvhgBottom+min(0,rightRailOffset)
		lraComplex=(nRisers1stRun-2)*treadDepth+min(0,rightRailOffset)
		additionXComplex=rightRailOvhgBottom+treadDepth/2
		additionZComplex=rightRailOvhgBottom*tan(ang)
		hrovL=treadDepth/2+rightRailOvhgBottom
		hrovR=treadDepth/2+min(0,rightRailOffset)*0
		postNumber = ((nRisers-1))/4
		railAngle	= ang
		side = SIDE_RIGHT
		gosub "callRailsForStair"

		DEL 2
	endif

	! ---------- POST & Rail on the landing (right side_1) ------------
	if bShowRailOn1stLanding1 then
		ADD2 flightWidth-rightRailFrameThk-rightRailOffset,(nRisers1stRun-1)*treadDepth+rightRailOffset
			poly2_b 4, 1 + 2 * (NOT(bRailAboveBreakLine) + bRailAboveBreakLine * gs_FillAbove) + 4 + 64, gs_fill_pen, gs_back_pen,
				0, 0, 1,
				rightRailFrameThk, 0, 1,
				rightRailFrameThk, rightRailFrameThk, 1,
				0, rightRailFrameThk, 1
		DEL 1

		IF rightRailOffset>0.05 THEN
			IF rightRailOffset<0.2 THEN
				IF rightRailType_m = 3 | rightRailType_m = 7 | rightRailType_m = 8 | rightRailType_m = 9 | rightRailType_m = 10 THEN
					hight=rightRailFrameThk
					if rightRailType_m = 3 then hight=0.025
					ADD2 flightWidth-rightRailOffset,(nRisers1stRun-1)*treadDepth
					ROT2 90
					poly2_b 4, 1 + 2 * (NOT(bRailAboveBreakLine) + bRailAboveBreakLine * gs_FillAbove) + 4 + 64, gs_fill_pen, gs_back_pen,
						0, 0, 1,
						rightRailOffset, 0, 1,
						rightRailOffset, rightRailFrameThk, 1,
						0, rightRailFrameThk, 1
					DEL 2
				ELSE
					ADD2 flightWidth-rightRailOffset,(nRisers1stRun-1)*treadDepth
					ROT2 90
					poly2_b 4, 1 + 2 * (NOT(bRailAboveBreakLine) + bRailAboveBreakLine * gs_FillAbove) + 4 + 64, gs_fill_pen, gs_back_pen,
						0, 0, 1,
						rightRailOffset, 0, 1,
						rightRailOffset, rightRailFrameThk, 1,
						0, rightRailFrameThk, 1
					DEL 2
				ENDIF
			ELSE
				ADD2 flightWidth-rightRailOffset-rightRailFrameThk/2,(nRisers1stRun-1)*treadDepth
				ROT2 90

				IF rightRailType_m = 8 | rightRailType_m = 9 | rightRailType_m = 10 THEN
					ADD2 0,-rightRailFrameThk/2
					IF rightRailOffset>0 then
						poly2_b 4, 1 + 2 * (NOT(bRailAboveBreakLine) + bRailAboveBreakLine * gs_FillAbove) + 4 + 64, gs_fill_pen, gs_back_pen,
							0, 0, 1,
							rightRailOffset, 0, 1,
							rightRailOffset, rightRailFrameThk, 1,
							0, rightRailFrameThk, 1
					endif
					DEL 1
				else
					lraSimple=rightRailOffset
					lraComplex=rightRailOffset
					hrovL=rightRailPostSize/2
					hrovR=-rightRailPostSize/2
					postNumber = max(2,rightRailOffset/0.5)
					side = SIDE_RIGHT
					gosub "callRailsForLanding"
				ENDIF

				DEL 2
			ENDIF
		ENDIF
	endif

	! ------------ POST & Rail on the landing (right side_2) ------------
	if bShowRailOn1stLanding2 then
		IF rightRailOffset*tan(ang)>treadHeight THEN
			IF rightRailOffset<0.2 & rightRailOffset>0.05 THEN
				IF rightRailType_m = 3 | rightRailType_m = 7 | rightRailType_m = 8 | rightRailType_m = 9 | rightRailType_m = 10 THEN
					hight=rightRailFrameThk
					if rightRailType_m = 3 then hight=0.025
					ADD2 flightWidth-rightRailOffset,(nRisers1stRun-1)*treadDepth+rightRailOffset
					ROT2 0
					poly2_b 4, 1 + 2 * (NOT(bRailAboveBreakLine) + bRailAboveBreakLine * gs_FillAbove) + 4 + 64, gs_fill_pen, gs_back_pen,
						0, 0, 1,
						rightRailOffset, 0, 1,
						rightRailOffset, rightRailFrameThk, 1,
						0, rightRailFrameThk, 1
					DEL 2
				ELSE
					ADD2 flightWidth-rightRailOffset,(nRisers1stRun-1)*treadDepth
					ROT2 90
					poly2_b 4, 1 + 2 * (NOT(bRailAboveBreakLine) + bRailAboveBreakLine * gs_FillAbove) + 4 + 64, gs_fill_pen, gs_back_pen,
						0, 0, 1,
						rightRailOffset, 0, 1,
						rightRailOffset, rightRailFrameThk, 1,
						0, rightRailFrameThk, 1
					DEL 2
				ENDIF
			ELSE
				ADD2 flightWidth-rightRailOffset,(nRisers1stRun-1)*treadDepth+rightRailOffset+rightRailFrameThk/2
				ROT2 0

				IF rightRailOffset>treadDepth+0.08 & rightRailOffset-treadDepth>2*rightRailFrameThk+0.001 then
					IF rightRailType_m = 8 | rightRailType_m = 9 | rightRailType_m = 10 THEN
						ADD2 0,-rightRailFrameThk/2
						poly2_b 4, 1 + 2 * (NOT(bRailAboveBreakLine) + bRailAboveBreakLine * gs_FillAbove) + 4 + 64, gs_fill_pen, gs_back_pen,
							0, 0, 1,
							rightRailOffset-treadDepth, 0, 1,
							rightRailOffset-treadDepth, rightRailFrameThk, 1,
							0, rightRailFrameThk, 1
						DEL 1
					else
						lraSimple=rightRailOffset-treadDepth
						lraComplex=rightRailOffset-treadDepth
						hrovL=-rightRailPostSize/2
						hrovR=rightRailPostSize/2
						postNumber = max(2,rightRailOffset/0.5)
						side = SIDE_RIGHT
						gosub "callRailsForLanding"
					ENDIF
				ENDIF

				DEL 2
			ENDIF
		ENDIF
	endif

	!!!!!!!!!!******** Railing on the 2nd run
	if bShowRailOn2ndRun then
		ADD2 flightWidth-min(rightRailOffset,td2),(nRisers1stRun-1)*treadDepth+rightRailFrameThk/2+rightRailOffset
		ROT2 0

		lraSimple=(nRisers2ndRun-1)*td2+min(rightRailOffset,td2)+min(0,rightRailOffset)
		lraComplex=(nRisers2ndRun-2)*td2+min(0,rightRailOffset)
		additionXComplex=td2/2+min(rightRailOffset,td2)
		additionZComplex=min(rightRailOffset*tan(ang2),treadHeight)
		hrovL=td2/2+min(rightRailOffset,td2)
		hrovR=td2/2
		postNumber=max(2,(nRisers2ndRun-2)/2)
		railAngle	= ang2
		side = SIDE_RIGHT
		gosub "callRailsForStair"

		DEL 2
	endif

	! ------------ POST & Rail on the landing 2. (right side_1) ------------
	if bShowRailOn2ndLanding1 then
		ADD2 a-flightWidth+rightRailOffset,(nRisers1stRun-1)*treadDepth+rightRailOffset
		poly2_b 4, 1 + 2 * (NOT(bRailAboveBreakLine) + bRailAboveBreakLine * gs_FillAbove) + 4 + 64, gs_fill_pen, gs_back_pen,
			0, 0, 1,
			rightRailFrameThk, 0, 1,
			rightRailFrameThk, rightRailFrameThk, 1,
			0, rightRailFrameThk, 1
		DEL 1

		IF rightRailOffset>0.05 THEN
			IF rightRailOffset<0.2 THEN
				IF rightRailType_m = 3 | rightRailType_m = 7 | rightRailType_m = 8 | rightRailType_m = 9 | rightRailType_m = 10 THEN
					hight=rightRailFrameThk
					if rightRailType_m = 3 then hight=0.025
					ADD2 a-flightWidth,(nRisers1stRun-1)*treadDepth+rightRailOffset
					ROT2 0
					poly2_b 4, 1 + 2 * (NOT(bRailAboveBreakLine) + bRailAboveBreakLine * gs_FillAbove) + 4 + 64, gs_fill_pen, gs_back_pen,
						0, 0, 1,
						rightRailOffset, 0, 1,
						rightRailOffset, rightRailFrameThk, 1,
						0, rightRailFrameThk, 1
					DEL 2
				ELSE
					ADD2 a-flightWidth,(nRisers1stRun-1)*treadDepth+rightRailOffset
					ROT2 0
					poly2_b 4, 1 + 2 * (NOT(bRailAboveBreakLine) + bRailAboveBreakLine * gs_FillAbove) + 4 + 64, gs_fill_pen, gs_back_pen,
						0, 0, 1,
						rightRailOffset, 0, 1,
						rightRailOffset, rightRailFrameThk, 1,
						0, rightRailFrameThk, 1
					DEL 2
				ENDIF
			ELSE
				ADD2 a-flightWidth+rightRailOffset,(nRisers1stRun-1)*treadDepth+rightRailOffset+rightRailFrameThk/2
				ROT2 180

				IF rightRailType_m = 8 | rightRailType_m = 9 | rightRailType_m = 10 THEN
					ADD2 0,-rightRailFrameThk/2
					IF rightRailOffset>0 then
						poly2_b 4, 1 + 2 * (NOT(bRailAboveBreakLine) + bRailAboveBreakLine * gs_FillAbove) + 4 + 64, gs_fill_pen, gs_back_pen,
							0, 0, 1,
							rightRailOffset, 0, 1,
							rightRailOffset, rightRailFrameThk, 1,
							0, rightRailFrameThk, 1
					endif
					DEL 1
				ELSE
					lraSimple=rightRailOffset
					lraComplex=rightRailOffset
					hrovL=rightRailPostSize/2
					hrovR=-rightRailPostSize/2
					postNumber = max(2,rightRailOffset/0.5)
					side = SIDE_RIGHT
					gosub "callRailsForLanding"
				ENDIF

				DEL 2
			ENDIF
		ENDIF
	endif

	! ------------ POST & Rail on the landing (right side_2) ------------
	if bShowRailOn2ndLanding2 then
		IF rightRailOffset*tan(ang)>treadHeight THEN
			IF rightRailOffset<0.2 & rightRailOffset>0.05 THEN
				IF rightRailType_m = 3 | rightRailType_m = 7 | rightRailType_m = 8 | rightRailType_m = 9 | rightRailType_m = 10 THEN
					hight=rightRailFrameThk
					if rightRailType_m = 3 then hight=0.025
					ADD2 flightWidth-rightRailOffset,(nRisers1stRun-1)*treadDepth+rightRailOffset
					ROT2 0
					poly2_b 4, 1 + 2 * (NOT(bRailAboveBreakLine) + bRailAboveBreakLine * gs_FillAbove) + 4 + 64, gs_fill_pen, gs_back_pen,
						0, 0, 1,
						rightRailOffset, 0, 1,
						rightRailOffset, rightRailFrameThk, 1,
						0, rightRailFrameThk, 1
					DEL 2
				ELSE
					ADD2 flightWidth-rightRailOffset,(nRisers1stRun-1)*treadDepth
					ROT2 90
					poly2_b 4, 1 + 2 * (NOT(bRailAboveBreakLine) + bRailAboveBreakLine * gs_FillAbove) + 4 + 64, gs_fill_pen, gs_back_pen,
						0, 0, 1,
						rightRailOffset, 0, 1,
						rightRailOffset, rightRailFrameThk, 1,
						0, rightRailFrameThk, 1
					DEL 2
				ENDIF
			ELSE
				ADD2 flightWidth-rightRailOffset,(nRisers1stRun-1)*treadDepth+rightRailOffset+rightRailFrameThk/2
				ROT2 0

				IF rightRailOffset>treadDepth+0.08 & rightRailOffset-treadDepth>2*rightRailFrameThk+0.001 then
					IF rightRailType_m = 8 | rightRailType_m = 9 | rightRailType_m = 10 THEN
						ADD2 0,-rightRailFrameThk/2
						poly2_b 4, 1 + 2 * (NOT(bRailAboveBreakLine) + bRailAboveBreakLine * gs_FillAbove) + 4 + 64, gs_fill_pen, gs_back_pen,
							0, 0, 1,
							rightRailOffset-treadDepth, 0, 1,
							rightRailOffset-treadDepth, rightRailFrameThk, 1,
							0, rightRailFrameThk, 1
						DEL 1
					else
						lraSimple=rightRailOffset-treadDepth
						lraComplex=rightRailOffset-treadDepth
						hrovL=-rightRailPostSize/2
						hrovR=rightRailPostSize/2
						postNumber = max(2,rightRailOffset/0.5)
						side = SIDE_RIGHT
						gosub "callRailsForLanding"
					ENDIF
				ENDIF

				DEL 2
			ENDIF
		ENDIF
	endif

	!!!!!!!!!!******** Railing on the 3rd run
	if bShowRailOn3rdRun then
		ADD2 a-flightWidth+rightRailOffset+rightRailFrameThk/2,(nRisers1stRun-1)*treadDepth+min(rightRailOffset,treadDepth)
		ROT2 -90

		lraSimple=(nRisers3rdRun)*treadDepth+min(rightRailOffset,treadDepth)+rightRailOvhgTop
		lraComplex=(nRisers3rdRun-1)*treadDepth
		additionXComplex=treadDepth/2+min(rightRailOffset,treadDepth)
		additionZComplex=min(rightRailOffset*tan(ang),treadHeight)
		hrovL=treadDepth/2+min(rightRailOffset,treadDepth)
		hrovR=treadDepth/2+rightRailOvhgTop
		postNumber = max(2,(nRisers3rdRun-1)/(3*treadDepth))
		railAngle	= ang
		side = SIDE_RIGHT
		gosub "callRailsForStair"

		DEL 2
	endif

return


"callRailsForStair":
! ------------------------------------------------------------------------------
!	lraSimple
!	lraComplex
!	additionXComplex
!	additionZComplex
!	hrovL: rail overhang start
!	hrovR: rail overhang end
!	postNumber:   number of posts
!	side: SIDE_LEFT or SIDE_RIGHT
! ==============================================================================
	ani = railAngle
	additionXComplex = additionXComplex
	additionZComplex = additionZComplex
	if side = SIDE_LEFT then
		dsComplex = leftRailDist+treadDepth/2*tan(ang)
	else
		dsComplex = rightRailDist+treadDepth/2*tan(ang)
	endif

	gosub "callRails"
return


! ==============================================================================
"callRailsForLanding":
! ------------------------------------------------------------------------------
!	lraSimple
!	lraComplex
!	hrovL: rail overhang start
!	hrovR: rail overhang end
!	postNumber:   number of posts
!	side: SIDE_LEFT or SIDE_RIGHT
! ==============================================================================
	ani = 0
	additionZComplex = 0
	if side = SIDE_LEFT then
		additionXComplex = leftRailPostSize/2
		dsComplex = leftRailDist
	else
		additionXComplex = rightRailPostSize/2
		dsComplex = rightRailDist
	endif

	gosub "callRails"
return


! ==============================================================================
"callRails":
! ------------------------------------------------------------------------------
!	ani
!	additionXComplex
!	additionZComplex
!	dsComplex
!  ------------------
!	side: SIDE_LEFT or SIDE_RIGHT
!	lraSimple
!	lraComplex
!	hrovL: rail overhang start
!	hrovR: rail overhang end
!	postNumber:   number of posts
! ==============================================================================
	if side = SIDE_LEFT then
		railBarDepth		= leftRailBarDepth
		railBarDiam			= railBarDepth
		railHeight			= leftRailHeight
		railBarThk			= leftRailBarThk
		railFrameThk		= leftRailFrameThk
		railDist			= leftRailDist
		railType_m			= leftRailType_m
		railPostSize		= leftRailPostSize
		nBarsRail			= nBarsLeftRail
		if rightRailType_m = RAIL_WIRED then
			railBarThk		= leftRailWireThk
			railBarDepth	= leftRailWireDepth
			railBarDiam		= leftRailWireDiam
		endif
		bComplexRail		= bComplexRailLeft
	else
		railBarDepth		= rightRailBarDepth
		railBarDiam			= railBarDepth
		railHeight			= rightRailHeight
		railBarThk			= rightRailBarThk
		railFrameThk		= rightRailFrameThk
		railDist			= rightRailDist
		railType_m			= rightRailType_m
		railPostSize		= rightRailPostSize
		nBarsRail			= nBarsRightRail
		if rightRailType_m = RAIL_WIRED then
			railBarThk		= rightRailWireThk
			railBarDepth	= rightRailWireDepth
			railBarDiam		= rightRailWireDiam
		endif
		bComplexRail		= bComplexRailRight
	endif

	add2 additionXComplex * bComplexRail, 0
	call "railSymbol2D_m" parameters all	cfs					= 1,
											bEnable2DPosts		= bComplexRail,
											ptyp_m				= 1,
											ani					= ani,
											rom_m				= 1,
											rmm_m				= 1,
											LengthSize			= 0,
											lra					= lraSimple * NOT(bComplexRail) + lraComplex * (bComplexRail),
											hr					= railHeight,
											hrPerp				= railHeight,
											ab					= 0,
											rb					= 0,
											ds					= railDist,
											gs_AngleL			= 90,
											gs_AngleR			= 90,
											iHandRailStyle		= 1,
											handRailDiameter	= railFrameThk,
											handRailWidth		= railFrameThk,
											hroL				= hrovL,
											hroR				= hrovR,
											np					= postNumber,
											pd					= railPostSize,
											pw					= railPostSize,
											pth					= railFrameThk,
											gs_cont_pen			= railPen,
											al					= railLineType,
											sa					= 0,
											bBreakRailLine		= bBreakRailLine,
											breakLineAngle		= brLineAngle,
											breakLineDist		= breakLineDist,
											breakLineWidth		= breakLineW,
											bRailAboveBreakLine	= bRailAboveBreakLine,
											bShowRailBelowBrL	= bShowRailPart1,
											bShowRailAboveBrL	= bShowRailPart2,
											bPostNoCalculation	= (railType_m = 9),
											pit_m				= 2,
											dp					= treadDepth
	del 1

	bShowRailPart1			= 0
	bShowRailPart2			= 0

return

"carriage":

	if beamNum = 1 then
		add2 carriageBaseDist / 2 - beamThk / 2 - beamOffsetRight, 0
	else
		add2 carriageBaseDist - beamThk - beamOffsetRight, 0
	endif
	for wb = 1 to beamNum
		if bBreakCarriageLine then
			lengthMod	= -(carriageBaseDist - beamOffsetLeft - beamOffsetRight - beamThk) * tan(brLineAngle) * (wb = 2)
			if bShowCarriagePart1 then
				pen carriagePen
				if aboveStory then
					LINE_TYPE carriageLineType
				else
					if	(drawPart[1] and drawDashed[1]) then
						LINE_TYPE dash_line
					else
						LINE_TYPE carriageLineType
					endif
				endif

				poly2_b 4, 1+2+4+64, gs_fill_pen, gs_back_pen,
					0, 0, 1,
					beamThk, 0, 1,
					beamThk, carrBreakLineDist + beamThk * tan(brLineAngle) / 2 + lengthMod, 1,
					0, carrBreakLineDist - beamThk * tan(brLineAngle) / 2 + lengthMod, 1
			endif

			if bShowCarriagePart2 then
				pen carriagePen
				if aboveStory then
					LINE_TYPE carriageLineType
				else
					if	(drawPart[2] and drawDashed[2]) then
						LINE_TYPE dash_line
					else
						LINE_TYPE carriageLineType
					endif
				endif


				poly2_b 4, 1 + 2 * gs_FillAbove + 4 + 64, gs_fill_pen, gs_back_pen,
					0, carrBreakLineDist - beamThk * tan(brLineAngle) / 2 + lengthMod + carrBreakLineWidth, 1,
					beamThk, carrBreakLineDist + beamThk * tan(brLineAngle) / 2 + lengthMod + carrBreakLineWidth, 1,
					beamThk, beamLength, 1,
					0, beamLength, 1
			endif
		else
			if aboveStory then
				LINE_TYPE carriageLineType
			else
			pen carriagePen
				if drawPart[3] then
					if (drawDashed[3]) then
						LINE_TYPE dash_line
					else
						LINE_TYPE carriageLineType
					endif
				else
					if	(NOT(bCarrAboveBreakLine) and drawDashed[1]) or\
						((bCarrAboveBreakLine) and drawDashed[2]) then
						LINE_TYPE dash_line
					else
						LINE_TYPE carriageLineType
					endif
				endif
			endif

			poly2_b 4, 1 + 2 * (NOT(bCarrAboveBreakLine) + bCarrAboveBreakLine * gs_FillAbove) + 4 + 64, gs_fill_pen, gs_back_pen,
				0, 0, 1,
				beamThk, 0, 1,
				beamThk, beamLength, 1,
				0, beamLength, 1
		endif
		add2 -carriageBaseDist + beamThk + beamOffsetLeft + beamOffsetRight, 0
	next wb
	del beamNum + 1

return

]]>
</Script_2D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_1D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
EPS=0.0001

SIDE_LEFT				= 1
SIDE_RIGHT				= 2

DET2D_SCALESENSITIVE	= 1
DET2D_CUSTOM			= 2

DET3D_OFF      = 0
DET3D_SIMPLE   = 1
DET3D_DETAILED = 2
DET3D_DRAFT    = 3

dim stArrowHeadStyles[9]
	stArrowHeadStyles[1] =  `Стиль 1`
	stArrowHeadStyles[2] =  `Стиль 2`
	stArrowHeadStyles[3] =  `Стиль 3`
	stArrowHeadStyles[4] =  `Стиль 4`
	stArrowHeadStyles[5] =  `Стиль 5`
	stArrowHeadStyles[6] =  `Стиль 6`
	stArrowHeadStyles[7] =  `Стиль 7`
	stArrowHeadStyles[8] =  `Стиль 8`
	stArrowHeadStyles[9] =  `Стиль 9`

dim stStartSymbolStyles[4]
	stStartSymbolStyles[1] = `Стиль 1`
	stStartSymbolStyles[2] = `Стиль 2`
	stStartSymbolStyles[3] = `Стиль 3`
	stStartSymbolStyles[4] = `Нет`

dim stPostSymbolType[5]
	stPostSymbolType[1] = `Тип 1`
	stPostSymbolType[2] = `Тип 2`
	stPostSymbolType[3] = `Тип 3`
	stPostSymbolType[4] = `Тип 4`
	stPostSymbolType[5] = `Нет`

dim stRailPosition[4]
	stRailPosition[1] = `Оба`
	stRailPosition[2] = `Справа`
	stRailPosition[3] = `Слева`
	stRailPosition[4] = `Нет`

dim stRailTypes[11]
	stRailTypes[ 1] = `Балюстрада Ограждения`
	stRailTypes[ 2] = `Параллельные Прутья`
	stRailTypes[ 3] = `Простой Брусок`
	stRailTypes[ 4] = `Объемная Рама с Панелью`
	stRailTypes[ 5] = `Объемная Рама`
	stRailTypes[ 6] = `Панель Ограждения`
	stRailTypes[ 7] = `Стойки Ограждения с Балясинами`
	stRailTypes[ 8] = `Стойки с Леерами`
	stRailTypes[ 9] = `Деревянная Балюстрада`
	stRailTypes[10] = `Стойки Ограждения с Брусками`
	stRailTypes[11] = `Как и Правое`

dim stShowCarriageValues[5]
	stShowCarriageValues[1]	= `Всегда`
	stShowCarriageValues[2]	= `До 1:20`
	stShowCarriageValues[3]	= `До 1:50`
	stShowCarriageValues[4]	= `До 1:100`
	stShowCarriageValues[5]	= `До 1:200`

RAILPOS_BOTH				= 1
RAILPOS_RIGHT				= 2
RAILPOS_LEFT				= 3
RAILPOS_NONE				= 4

RAIL_BALUSTRADE				= 1
RAIL_PARALLEL_BARS			= 2
RAIL_SIMPLE_BAR				= 3
RAIL_SOLID_FRAME_FILLED		= 4
RAIL_SOLID_FRAME			= 5
RAIL_SOLID					= 6
RAIL_POST_WITH_BALUSTERS	= 7
RAIL_WIRED					= 8
RAIL_WOODEN_BALUSTRADE		= 9
RAIL_POST_WITH_BARS			= 10
RAIL_SAMERAILS				= 11

RECTANGULAR					= 1
ROUND						= 2

dim stDetlevel2D[2]
	stDetlevel2D[1] = `Зависит от Масштаба`
	stDetlevel2D[2] = `Специальный`

dim stDetlevel3D[3]
	stDetlevel3D[1] = `Откл.`
	stDetlevel3D[2] = `Простой`
	stDetlevel3D[3] = `Детальный`

dim stParameterType[2]
	stParameterType[1] = `Высота Ступени`
	stParameterType[2] = `Кол-во Подступенков на Марш`

dim stStairBaseType[3]
	stStairBaseType[1] = `Бетон`
	stStairBaseType[2] = `Дерево`
	stStairBaseType[3] = `Нет`

dim stRiseRunText[7]
	stRiseRunText[1] = `Кол-во x Подступенок = Высота Марша`
	stRiseRunText[2] = `Кол-во Проступей/Подступенок @`
	stRiseRunText[3] = `Кол-во х Проступь х Подступенок`
	stRiseRunText[4] = `Кол-во х Подступенок х Проступь`
	stRiseRunText[5] = `Кол-во <текст подступенка> Подступенок / Проступь`
	stRiseRunText[6] = `Кол-во <текст подступенка> // Подступенок / Проступь`
	stRiseRunText[7] = `Специальный Текст`

dim stTextOrientation[3]
	stTextOrientation[1] = `Выровнять по Символу`
	stTextOrientation[2] = `Параллельно Линии Всхода`
	stTextOrientation[3] = `Читаемый`

dim stWalkingDirUPDN[6]
	stWalkingDirUPDN[1] = `Нет`
	stWalkingDirUPDN[2] = `Вверху`
	stWalkingDirUPDN[3] = `Вниз в Нижней Части`
	stWalkingDirUPDN[4] = `Вниз в Верхней Части`
	stWalkingDirUPDN[5] = `Оба`
	stWalkingDirUPDN[6] = `Оба, Зависит от Этажа`

dim stLineTypeAboveBreak[2]
	stLineTypeAboveBreak[1] = `Штриховая`
	stLineTypeAboveBreak[2] = `Сплошная`

dim stBreaklineStyle[3]
	stBreaklineStyle[1]= `Прямой`
	stBreaklineStyle[2]= `Зигзаг`
	stBreaklineStyle[3]= `Зигзаг CHI`

dim stWireType[2]
	stWireType[1]= `Прямоугольные`
	stWireType[2]= `Круглые`


woodBaseThk	= 0.05
ftw=0.05
res=16
rescs=12
IF bRiserCover<0.5 THEN riserCoverThk=0

! -------------- 2D Symbol variables --------------

! gs_SymbolType_m
SYMBOL_TYPE1	= 1
SYMBOL_TYPE2	= 2
SYMBOL_TYPE3	= 3
SYMBOL_TYPE4	= 4
SYMBOL_TYPE5	= 5
SYMBOL_TYPE6	= 6
SYMBOL_TYPE7	= 7
SYMBOL_TYPE8	= 8
SYMBOL_TYPE9	= 9
SYMBOL_TYPE10	= 10
SYMBOL_TYPE11	= 11
SYMBOL_TYPE12	= 12
SYMBOL_TYPE13	= 13
SYMBOL_TYPE14	= 14
SYMBOL_TYPE15	= 15
SYMBOL_TYPE16	= 16
SYMBOL_TYPE17	= 17
SYMBOL_TYPE18	= 18
SYMBOL_TYPE19	= 19
SYMBOL_TYPE20	= 20

dim stStairSymbolTypes[20]
	stStairSymbolTypes[ 1] = `Тип 1`
	stStairSymbolTypes[ 2] = `Тип 2`
	stStairSymbolTypes[ 3] = `Тип 3`
	stStairSymbolTypes[ 4] = `Тип 4`
	stStairSymbolTypes[ 5] = `Тип 5`
	stStairSymbolTypes[ 6] = `Тип 6`
	stStairSymbolTypes[ 7] = `Тип 7`
	stStairSymbolTypes[ 8] = `Тип 8`
	stStairSymbolTypes[ 9] = `Тип 9`
	stStairSymbolTypes[10] = `Тип 10`
	stStairSymbolTypes[11] = `Тип 11`
	stStairSymbolTypes[12] = `Тип 12`
	stStairSymbolTypes[13] = `Тип 13`
	stStairSymbolTypes[14] = `Тип 14`
	stStairSymbolTypes[15] = `Тип 15`
	stStairSymbolTypes[16] = `Тип 16`
	stStairSymbolTypes[17] = `Тип 17`
	stStairSymbolTypes[18] = `Тип 18`
	stStairSymbolTypes[19] = `Тип 19`
	stStairSymbolTypes[20] = `Тип 20`

! iSymbolGroup
SYMBOLGROUP_TYPE1	= 1
SYMBOLGROUP_TYPE2	= 2
SYMBOLGROUP_TYPE3	= 3
SYMBOLGROUP_TYPE4	= 4
SYMBOLGROUP_TYPE5	= 5
SYMBOLGROUP_TYPE6	= 6
SYMBOLGROUP_TYPE7	= 7
SYMBOLGROUP_TYPE8	= 8

dim stSymbolGroup[8]
	stSymbolGroup[1] = `Тип 1`
	stSymbolGroup[2] = `Тип 2`
	stSymbolGroup[3] = `Тип 3`
	stSymbolGroup[4] = `Тип 4`
	stSymbolGroup[5] = `Тип 5`
	stSymbolGroup[6] = `Тип 6`
	stSymbolGroup[7] = `Тип 7`
	stSymbolGroup[8] = `Тип 8`

dim	iEnabledSymbolTypes[8][3]
	iEnabledSymbolTypes[1][1] = 1
	iEnabledSymbolTypes[1][2] = 6
	iEnabledSymbolTypes[1][3] = 13

	iEnabledSymbolTypes[2][1] = 2
	iEnabledSymbolTypes[2][2] = 7
	iEnabledSymbolTypes[2][3] = 14

	iEnabledSymbolTypes[3][1] = 3
	iEnabledSymbolTypes[3][2] = 8
	iEnabledSymbolTypes[3][3] = 15

	iEnabledSymbolTypes[4][1] = 4
	iEnabledSymbolTypes[4][2] = 9
	iEnabledSymbolTypes[4][3] = 16

	iEnabledSymbolTypes[5][1] = 5
	iEnabledSymbolTypes[5][2] = 10
	iEnabledSymbolTypes[5][3] = 17

	iEnabledSymbolTypes[6][1] = 4
	iEnabledSymbolTypes[6][2] = 11
	iEnabledSymbolTypes[6][3] = 18

	iEnabledSymbolTypes[7][1] = 4
	iEnabledSymbolTypes[7][2] = 11
	iEnabledSymbolTypes[7][3] = 19

	iEnabledSymbolTypes[8][1] = 5
	iEnabledSymbolTypes[8][2] = 12
	iEnabledSymbolTypes[8][3] = 20


! iScaleType
SCALE_10		= 10
SCALE_20		= 20
SCALE_50		= 50
SCALE_100		= 100
SCALE_200		= 200
SCALE_500		= 500

SCALE_1_1		= 1
SCALE_1_4		= 4
SCALE_1_8		= 8
SCALE_1_16		= 16
SCALE_1_24		= 24
SCALE_1_48		= 48
SCALE_1_96		= 96
SCALE_1_192		= 192
SCALE_CUSTOM	= 999

dim	iScaleType[15]
	iScaleType[1]	= SCALE_10
	iScaleType[2]	= SCALE_20
	iScaleType[3]	= SCALE_50
	iScaleType[4]	= SCALE_100
	iScaleType[5]	= SCALE_200
	iScaleType[6]	= SCALE_500
	iScaleType[7]	= SCALE_1_1
	iScaleType[8]	= SCALE_1_4
	iScaleType[9]	= SCALE_1_8
	iScaleType[10]	= SCALE_1_16
	iScaleType[11]	= SCALE_1_24
	iScaleType[12]	= SCALE_1_48
	iScaleType[13]	= SCALE_1_96
	iScaleType[14]	= SCALE_1_192
	iScaleType[15]	= SCALE_CUSTOM

dim stScaleType[15]
	stScaleType[1]	= `1:10`
	stScaleType[2]	= `1:20`
	stScaleType[3]	= `1:50`
	stScaleType[4]	= `1:100`
	stScaleType[5]	= `1:200`
	stScaleType[6]	= `1:500`
	
	stScaleType[7]	= `1'=1'-0"`
	stScaleType[8]	= `3"=1'-0"`
	stScaleType[9]	= `1 1/2"=1'-0"`
	stScaleType[10]	= `3/4"=1'-0"`
	stScaleType[11]	= `1/2"=1'-0"`
	stScaleType[12]	= `1/4"=1'-0"`
	stScaleType[13]	= `1/8"=1'-0"`
	stScaleType[14]	= `1/16"=1'-0"`
	stScaleType[15]	= `Специальный Масштаб`

if iScaleChangeSM = SCALE_CUSTOM then
	_iScaleSM = gs_ScaleChangeSM
else
	_iScaleSM = iScaleChangeSM
endif
if iScaleChangeMD = SCALE_CUSTOM then
	_iScaleMD = gs_ScaleChangeMD
else
	_iScaleMD = iScaleChangeMD
endif

! -------------- End of 2D Symbol variables --------------

IF parameterType_m = 2 THEN		! No. of Risers per Run
	a=(nRisers2ndRun-1)*treadDepth2+2*flightWidth
	b=(nRisers1stRun-1)*treadDepth+flightWidth
	nRisers=nRisers1stRun+nRisers2ndRun+nRisers3rdRun
	treadHeight=preferredTreadHeight
	zzyzx=nRisers*preferredTreadHeight

	VALUES "nRisers1stRun" RANGE [1,)
	VALUES "nRisers2ndRun" RANGE [1,)

	pa=a
	VALUES "flightWidth" RANGE (0.5,]
	VALUES "treadThickness" RANGE [0,treadHeight-0.02)
	VALUES "stairSlabThk" RANGE (0,)
	VALUES "topLandingThk" RANGE [0,stairSlabThk]
	VALUES "nosing" RANGE [0,min(treadDepth/2,treadDepth2/2))
	VALUES "lowerLandingThk" RANGE [0,stairSlabThk]
	VALUES "endSlabThickness" RANGE (0,)

	PARAMETERS a=a,b=b
	PARAMETERS treadHeight=preferredTreadHeight
	PARAMETERS nRisers=nRisers1stRun+nRisers2ndRun+nRisers3rdRun
	PARAMETERS thd=2*treadHeight+treadDepth

	IF ABS(treadThickness)<EPS THEN LOCK "nosing"					!!!treadThickness=0
	LOCK "rth", "treadHeight","nRisers", "thd", "a", "b"

	td2=treadDepth2
	ang=ATN(treadHeight/treadDepth)
	ang2=ATN(treadHeight/treadDepth2)
	bet=atn((2*treadDepth)/flightWidth)
	bet2=atn((2*treadDepth2)/flightWidth)
ELSE   !!!!!!!!*************** Tread height
	VALUES "flightWidth" RANGE (0.5,)
	mina=2*flightWidth+0.3
	VALUES "a" RANGE [mina,)
	IF a<mina THEN
		PARAMETERS a=mina
		a=mina
	ENDIF

	minb=flightWidth+0.6
	VALUES "b" RANGE [minb,]
	IF b<minb THEN
		PARAMETERS b=minb
		b=minb
	ENDIF

	VALUES "treadHeight" RANGE (0.03,0.5)
	minzzyzx=MAX(1,treadHeight*3)
	VALUES "zzyzx" RANGE [minzzyzx,)
	IF zzyzx<minzzyzx THEN
		PARAMETERS zzyzx=minzzyzx
		zzyzx=minzzyzx
	ENDIF

	LEN=a+2*b-4*flightWidth
	rnu_t=INT(zzyzx/preferredTreadHeight)+1
	tdO=LEN/(rnu_t)

	nRisers2ndRun=((a-2*flightWidth)/tdO)+1
	if nRisers2ndRun-INT(nRisers2ndRun)<0.5 THEN
		nRisers2ndRun=INT(nRisers2ndRun)
	else
		nRisers2ndRun=INT(nRisers2ndRun)+1
	endif

	rnu11=((b-flightWidth)/tdO)+1
	rnu12=(rnu_t-nRisers2ndRun)/2
	nRisers1stRun=min(rnu11,rnu12)
	nRisers1stRun=INT(nRisers1stRun)+1
	nRisers3rdRun=nRisers1stRun-1

	nRisers=nRisers1stRun+nRisers2ndRun+nRisers3rdRun

	treadHeight=zzyzx/nRisers
	treadDepth=(b-flightWidth)/(nRisers1stRun-1)

	VALUES "treadThickness" RANGE [0,treadHeight)

	VALUES "stairSlabThk" RANGE (0,)
	! VALUES "topLandingThk" RANGE [MAX(0,0,0),MIN(h,h,h)]

	td2=(a-2*flightWidth)/(nRisers2ndRun-1)
	minsz=MIN(treadDepth,td2)
	minns=MIN(minsz,.1)
	VALUES "nosing" RANGE [0,minns)
	VALUES "lowerLandingThk" RANGE (0,)
	VALUES "endSlabThickness" RANGE (0,)

	PARAMETERS treadDepth=treadDepth

	PARAMETERS treadHeight=treadHeight
	PARAMETERS nRisers1stRun=nRisers1stRun
	PARAMETERS nRisers2ndRun=nRisers2ndRun
	PARAMETERS nRisers3rdRun=nRisers3rdRun
	PARAMETERS thd=2*treadHeight+treadDepth

	IF ABS(treadThickness)<EPS THEN LOCK "nosing"			!!treadThickness=0
	LOCK "treadDepth", "treadDepth2","treadHeight","nRisers1stRun","nRisers2ndRun","nRisers3rdRun", "nRisers", "thd"
	HIDEPARAMETER "treadDepth2"

	ang=ATN(treadHeight/treadDepth)
	ang2=ATN(treadHeight/td2)
	bet=atn((2*treadDepth)/flightWidth)
	bet2=atn((2*td2)/flightWidth)
ENDIF

! --- Rails --------------------------------------------------------------

leftRailOffset=-leftRailOffset
rightRailOffset=-rightRailOffset

IF bSameRails THEN
	leftRailHeight		= rightRailHeight
	leftRailDist		= rightRailDist
	leftRailOffset		= rightRailOffset
	leftRailOvhgBottom	= rightRailOvhgBottom
	leftRailOvhgTop		= rightRailOvhgTop
	leftRailPostSize	= rightRailPostSize
	leftRailFrameThk	= rightRailFrameThk
	nBarsLeftRail		= nBarsRightRail
	leftRailBarThk		= rightRailBarThk
	leftRailBarDepth	= rightRailBarDepth
	leftWireType_m		= rightWireType_m
	leftRailWireThk		= rightRailWireThk
	leftRailWireDepth	= rightRailWireDepth
	leftRailWireDiam	= rightRailWireDiam
ENDIF

bComplexRailRight		= (rightRailType_m > 6)
if bSameRails then
	bComplexRailLeft 	= (rightRailType_m > 6)
else
	bComplexRailLeft 	= (leftRailType_m > 6)
endif

bEnableCarriageLine		= (stairBaseType_m = 2)

]]>
</Script_1D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_VL SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
call "FM_types" parameters all
call "ui_stairs" parameters gs_ui_current_page	= gs_ui_current_page

! ---------- Length Unit ----------
w_units_form = ""
rrr					= request("Linear_dimension", "", w_units_form)
bLinearDimIsMetric	= (strstr(w_units_form, "m") > 0)


! ---------- 3D detail level ----------
values{2} "gs_detlevel_3D_m" 	DET3D_OFF,			stDetlevel3D[1],
								DET3D_SIMPLE,		stDetlevel3D[2],
								DET3D_DETAILED,		stDetlevel3D[3]

if gs_detlevel_3D_m = DET3D_SIMPLE then
	lock "gs_resol"
	hideparameter "gs_resol"
endif

if gs_detlevel_3D_m = DET3D_OFF then
	lock "gs_resol", "gs_shadow"
	hideparameter "gs_resol", "gs_shadow"
endif


!! ---------- 2D detail level ----------
values{2} "gs_detlevel_2D_m"	DET2D_SCALESENSITIVE,	stDetlevel2D[1],
								DET2D_CUSTOM,			stDetlevel2D[2]

!! ---------- Symbol Type ----------
if gs_detlevel_2D_m = DET2D_SCALESENSITIVE then
	values{2} "iSymbolGroup"	SYMBOLGROUP_TYPE1,	stSymbolGroup[1],
								SYMBOLGROUP_TYPE2,	stSymbolGroup[2],
								SYMBOLGROUP_TYPE3,	stSymbolGroup[3],
								SYMBOLGROUP_TYPE4,	stSymbolGroup[4],
								SYMBOLGROUP_TYPE5,	stSymbolGroup[5],
								SYMBOLGROUP_TYPE6,	stSymbolGroup[6],
								SYMBOLGROUP_TYPE7,	stSymbolGroup[7],
								SYMBOLGROUP_TYPE8,	stSymbolGroup[8]

	lock			"gs_SymbolType_m"
	hideparameter	"gs_SymbolType_m"


	!! ----------------- Simple to Middle Scale -----------------
	if bLinearDimIsMetric then
		_iEnableScaleSMTypes	= 2 + 4 + 8 + 16 + 32 + 64
	else
		_iEnableScaleSMTypes	= 128 + 256 + 512 + 1024 + 2048 + 4096 + 8192 + 16384
	endif

	dim _iEnableScaleSMTypeValueList[]
	dim _stEnableScaleSMTypeValueList[]
	j = 1
	for i = 1 to vardim1(iScaleType)
		if bittest(_iEnableScaleSMTypes, i) then
			_iEnableScaleSMTypeValueList[j] = iScaleType[i]
			_stEnableScaleSMTypeValueList[j] = stScaleType[i]
			j = j + 1
		endif
	next i
	_iEnableScaleSMTypeValueList[j] = iScaleType[15]
	_stEnableScaleSMTypeValueList[j] = stScaleType[15]
	values{2} "iScaleChangeSM" _iEnableScaleSMTypeValueList, _stEnableScaleSMTypeValueList
	if iScaleChangeSM = SCALE_CUSTOM then
		values "gs_ScaleChangeSM"	range (1,)
	else
		gs_ScaleChangeSM = iScaleChangeSM
		parameters	gs_ScaleChangeSM = gs_ScaleChangeSM

		lock			"gs_ScaleChangeSM"
		hideparameter	"gs_ScaleChangeSM"
	endif

	
	!! ----------------- Middle to Detailed Scale -----------------
	if bLinearDimIsMetric then
		_iEnableScaleMDTypes	= 2 + 4 + 8 + 16 + 32 + 64
	else
		_iEnableScaleMDTypes	= 128 + 256 + 512 + 1024 + 2048 + 4096 + 8192 + 16384
	endif

	dim _iEnableScaleMDTypeValueList[]
	dim _stEnableScaleMDTypeValueList[]
	j = 1
	for i = 1 to vardim1(iScaleType)
		if bittest(_iEnableScaleMDTypes, i) then
			if iScaleChangeSM = SCALE_CUSTOM then
				if gs_ScaleChangeSM > iScaleType[i] then
					_iEnableScaleMDTypeValueList[j] = iScaleType[i]
					_stEnableScaleMDTypeValueList[j] = stScaleType[i]
					j = j + 1
				else
					i = vardim1(iScaleType)
				endif
			else
				_iEnableScaleMDTypeValueList[j] = iScaleType[i]
				_stEnableScaleMDTypeValueList[j] = stScaleType[i]

				if gs_ScaleChangeSM = _iEnableScaleSMTypeValueList[j] then
					i = vardim1(iScaleType)
				else
					j = j + 1
				endif
			endif
		endif
	next i
	_iEnableScaleMDTypeValueList[j] = iScaleType[15]
	_stEnableScaleMDTypeValueList[j] = stScaleType[15]
	values{2} "iScaleChangeMD" _iEnableScaleMDTypeValueList, _stEnableScaleMDTypeValueList

	if iScaleChangeMD = SCALE_CUSTOM then
		values "gs_ScaleChangeMD"	range (, _iScaleSM)
	else
		gs_ScaleChangeMD = iScaleChangeMD
		parameters	gs_ScaleChangeMD = gs_ScaleChangeMD

		lock			"gs_ScaleChangeMD"
		hideparameter	"gs_ScaleChangeMD"
	endif
	if (gs_ScaleChangeMD >= gs_ScaleChangeSM)  then
		gs_ScaleChangeMD = gs_ScaleChangeSM - 1
		parameters	gs_ScaleChangeMD = gs_ScaleChangeMD
	endif
else
	values{2} "gs_SymbolType_m"	SYMBOL_TYPE1,	stStairSymbolTypes[1],
								SYMBOL_TYPE2,	stStairSymbolTypes[2],
								SYMBOL_TYPE3,	stStairSymbolTypes[3],
								SYMBOL_TYPE4,	stStairSymbolTypes[4],
								SYMBOL_TYPE5,	stStairSymbolTypes[5],
								SYMBOL_TYPE6,	stStairSymbolTypes[6],
								SYMBOL_TYPE7,	stStairSymbolTypes[7],
								SYMBOL_TYPE8,	stStairSymbolTypes[8],
								SYMBOL_TYPE9,	stStairSymbolTypes[9],
								SYMBOL_TYPE10,	stStairSymbolTypes[10],
								SYMBOL_TYPE11,	stStairSymbolTypes[11],
								SYMBOL_TYPE12,	stStairSymbolTypes[12],
								SYMBOL_TYPE13,	stStairSymbolTypes[13],
								SYMBOL_TYPE14,	stStairSymbolTypes[14],
								SYMBOL_TYPE15,	stStairSymbolTypes[15],
								SYMBOL_TYPE16,	stStairSymbolTypes[16],
								SYMBOL_TYPE17,	stStairSymbolTypes[17],
								SYMBOL_TYPE18,	stStairSymbolTypes[18],
								SYMBOL_TYPE19,	stStairSymbolTypes[19],
								SYMBOL_TYPE20,	stStairSymbolTypes[20]

	lock			"iSymbolGroup",
					"gs_ScaleChangeSM",
					"iScaleChangeSM",
					"gs_ScaleChangeMD",
					"iScaleChangeMD"
	hideparameter	"iSymbolGroup",
					"gs_ScaleChangeSM",
					"iScaleChangeSM",
					"gs_ScaleChangeMD",
					"iScaleChangeMD"
endif


! ====================================================================
! Base
! ====================================================================

VALUES "parameterType" stParameterType				! Tread Height, No. of Risers per Run
if GLOB_MODPAR_NAME = "parameterType" then
	for i = 1 to vardim1(stParameterType)
	   if parameterType = stParameterType[i]	then parameterType_m = i
	next i
	parameters parameterType_m = parameterType_m
else
	parameters parameterType = stParameterType[parameterType_m]
endif

values "stairBaseType"	stStairBaseType			! Concrete, Wood, None
values "stairBaseType_m" 1, 2, 3
if GLOB_MODPAR_NAME = "stairBaseType" then
	stairBaseType_m = 1
	for i = 1 to vardim1(stStairBaseType)
	   if stairBaseType = stStairBaseType[i]	then stairBaseType_m = i
	next i
	parameters stairBaseType_m = stairBaseType_m
else
	stairBaseType_m = max(1, min(stairBaseType_m, vardim1(stStairBaseType)))
	stairBaseType = stStairBaseType[stairBaseType_m]
	parameters stairBaseType = stairBaseType, stairBaseType_m = stairBaseType_m
endif

! ====================================================================
! 2D Text
! ====================================================================

! ---------- Rise & Run Text ----------

values "gs_RiseRunText" stRiseRunText
values "iRiseRunText" 1, 2, 3, 4, 5, 6, 99

if GLOB_MODPAR_NAME = "gs_RiseRunText" then
	for i = 1 to vardim1(stRiseRunText)
	   if gs_RiseRunText = stRiseRunText[i]	then iRiseRunText = i
	next i
	if gs_RiseRunText = stRiseRunText[7]	then iRiseRunText = 99
	parameters iRiseRunText = iRiseRunText
else
	if iRiseRunText = 99 then
		gs_RiseRunText = stRiseRunText[7]
	else
		gs_RiseRunText = stRiseRunText[max(1, min(iRiseRunText, vardim1(stRiseRunText)) )]
	endif
	parameters gs_RiseRunText = gs_RiseRunText
endif

values "typeTextRotation_RiseRun" stTextOrientation[3],stTextOrientation[1]	! Readable, Align with Symbol
if GLOB_MODPAR_NAME = "typeTextRotation_RiseRun" then
	for i = 1 to 3
		if typeTextRotation_RiseRun = stTextOrientation[i]	then typeTextRotation_RiseRun_m = i-1
	next i
	parameters typeTextRotation_RiseRun_m = typeTextRotation_RiseRun_m
else
	parameters typeTextRotation_RiseRun = stTextOrientation[typeTextRotation_RiseRun_m+1]
endif

! ---------- Numbering ----------

values "typeTextRotation_Num" stTextOrientation[3],stTextOrientation[1]	! Readable, Align with Symbol
if GLOB_MODPAR_NAME = "typeTextRotation_Num" then
	for i = 1 to 3
		if typeTextRotation_Num = stTextOrientation[i]	then typeTextRotation_Num_m = i-1
	next i
	parameters typeTextRotation_Num_m = typeTextRotation_Num_m
else
	parameters typeTextRotation_Num = stTextOrientation[typeTextRotation_Num_m+1]
endif

! ---------- UP & Down ----------

values "walkingDirUPDN" stWalkingDirUPDN			! None, Up, Down at Bottom, Down at Top, Both, Both Sensitive
values "walkingDirUPDN_m" 1, 2, 3, 4, 5, 6
if GLOB_MODPAR_NAME = "walkingDirUPDN" then
	walkingDirUPDN_m = 1
	for i = 1 to vardim1(stWalkingDirUPDN)
	   if walkingDirUPDN = stWalkingDirUPDN[i]	then walkingDirUPDN_m = i
	next i
	parameters walkingDirUPDN_m = walkingDirUPDN_m
else
	walkingDirUPDN_m = max(1, min(walkingDirUPDN_m, vardim1(stWalkingDirUPDN)))
	walkingDirUPDN = stWalkingDirUPDN[walkingDirUPDN_m]
	parameters walkingDirUPDN = walkingDirUPDN, walkingDirUPDN_m = walkingDirUPDN_m
endif

values "typeTextRotation_UpDn" stTextOrientation[3],stTextOrientation[2],stTextOrientation[1]	! Readable, Parallel with, Align with Symbol
if GLOB_MODPAR_NAME = "typeTextRotation_UpDn" then
	for i = 1 to 3
		if typeTextRotation_UpDn = stTextOrientation[i]	then typeTextRotation_UpDn_m = i-1
	next i
	parameters typeTextRotation_UpDn_m = typeTextRotation_UpDn_m
else
	parameters typeTextRotation_UpDn = stTextOrientation[typeTextRotation_UpDn_m+1]
endif

VALUES "lineTypeAboveBreak" stLineTypeAboveBreak
if GLOB_MODPAR_NAME = "lineTypeAboveBreak" then
	for i = 1 to vardim1(stLineTypeAboveBreak)
	   if lineTypeAboveBreak = stLineTypeAboveBreak[i]	then lineTypeAboveBreak_m = i
	next i
	parameters lineTypeAboveBreak_m = lineTypeAboveBreak_m
else
	parameters lineTypeAboveBreak = stLineTypeAboveBreak[lineTypeAboveBreak_m]
endif

VALUES "arrow_style" 	stArrowHeadStyles		! Style 1 - 9
values "arrow_style_m" 1, 2, 3, 4, 5, 6, 7, 8, 9
if GLOB_MODPAR_NAME = "arrow_style" then
	for i = 1 to vardim1(stArrowHeadStyles)
	   if arrow_style = stArrowHeadStyles[i]	then arrow_style_m = i
	next i
	parameters arrow_style_m = arrow_style_m
else
	parameters arrow_style = stArrowHeadStyles[arrow_style_m]
endif

values "gs_StartEndStyle"	stStartSymbolStyles			! Style 1, Style 2, Style 3, None
values "gs_StartEndStyle_m" 1, 2, 3, 4
if GLOB_MODPAR_NAME = "gs_StartEndStyle" then
	gs_StartEndStyle_m = 1
	for i = 1 to vardim1(stStartSymbolStyles)
	   if gs_StartEndStyle = stStartSymbolStyles[i]	then gs_StartEndStyle_m = i
	next i
	parameters gs_StartEndStyle_m = gs_StartEndStyle_m
else
	gs_StartEndStyle_m = max(1, min(gs_StartEndStyle_m, vardim1(stStartSymbolStyles)))
	gs_StartEndStyle = stStartSymbolStyles[gs_StartEndStyle_m]
	parameters gs_StartEndStyle = gs_StartEndStyle, gs_StartEndStyle_m = gs_StartEndStyle_m
endif

if bSimpleZigZag then
	VALUES "breakline_style" stBreaklineStyle[1],stBreaklineStyle[3]	! Straight, Zigzag CHI
	values "breakline_style_m" 1, 3
else
	VALUES "breakline_style" stBreaklineStyle[1],stBreaklineStyle[2]	! Straight, Zigzag
	values "breakline_style_m" 1, 2
endif
if GLOB_MODPAR_NAME = "breakline_style" then
	for i = 1 to vardim1(stBreaklineStyle)
	   if breakline_style = stBreaklineStyle[i]	then breakline_style_m = i
	next i
	parameters breakline_style_m = breakline_style_m
else
	parameters breakline_style = stBreaklineStyle[breakline_style_m]
endif

!values "gs_BreakHeight" range (0,ZZYZX - treadDepth)
VALUES "breakLineWidth"	RANGE (0,treadDepth]

! ====================================================================
! Rail
! ====================================================================

values "rail_m" 1, 2, 3, 4
if GLOB_MODPAR_NAME = "bRightRail" or GLOB_MODPAR_NAME = "bLeftRail" then
	if bRightRail then
		if bLeftRail then
			rail_m = RAILPOS_BOTH
		else
			rail_m = RAILPOS_RIGHT
		endif
	else
		if bLeftRail then
			rail_m = RAILPOS_LEFT
		else
			rail_m = RAILPOS_NONE
		endif
	endif
	parameters rail_m = rail_m
else
	if rail_m = 1 then
		bRightRail	= 1
		bLeftRail	= 1
	endif
	if rail_m = 2 then
		bRightRail	= 1
		bLeftRail	= 0
	endif
	if rail_m = 3 then
		bRightRail	= 0
		bLeftRail	= 1
	endif
	if rail_m = 4 then
		bRightRail	= 0
		bLeftRail	= 0
	endif
	parameters bRightRail	= bRightRail
	parameters bLeftRail	= bLeftRail
endif

if NOT(bRightRail) then
	lock			"rightRailType"
	hideparameter	"rightRailType"
endif
if NOT(bLeftRail) then
	lock			"leftRailType"
	hideparameter	"leftRailType"
endif

VALUES "rightRailType" 	stRailTypes[1],
						stRailTypes[2],
						stRailTypes[3],
						stRailTypes[4],
						stRailTypes[5],
						stRailTypes[6],
						stRailTypes[7],
						stRailTypes[8],
						stRailTypes[9],
						stRailTypes[10]

if GLOB_MODPAR_NAME = "rightRailType" then
	for i = 1 to vardim1(stRailTypes)
	   if rightRailType = stRailTypes[i]	then rightRailType_m = i
	next i
	parameters rightRailType_m = rightRailType_m
else
	parameters rightRailType = stRailTypes[rightRailType_m]
endif

if rail_m = RAILPOS_BOTH then		! Both
	VALUES "leftRailType" 	stRailTypes
else
	VALUES "leftRailType" 	stRailTypes[1],
							stRailTypes[2],
							stRailTypes[3],
							stRailTypes[4],
							stRailTypes[5],
							stRailTypes[6],
							stRailTypes[7],
							stRailTypes[8],
							stRailTypes[9],
							stRailTypes[10]
endif
if GLOB_MODPAR_NAME = "leftRailType" then
	for i = 1 to vardim1(stRailTypes)
	   if leftRailType = stRailTypes[i]	then leftRailType_m = i
	next i
	parameters leftRailType_m = leftRailType_m
else
	parameters leftRailType = stRailTypes[leftRailType_m]
endif
bSameRails = (leftRailType_m = RAIL_SAMERAILS)
parameters bSameRails = bSameRails

values "rightWireType" stWireType	! Rectangular, Round
values "leftWireType" stWireType	! Rectangular, Round

if GLOB_MODPAR_NAME = "leftWireType" then
	for i = 1 to vardim1(stWireType)
	   if leftWireType = stWireType[i]	then leftWireType_m = i
	next i
	parameters leftWireType_m = leftWireType_m
else
	parameters leftWireType = stWireType[leftWireType_m]
endif

if GLOB_MODPAR_NAME = "rightWireType" then
	for i = 1 to vardim1(stWireType)
	   if rightWireType = stWireType[i]	then rightWireType_m = i
	next i
	parameters rightWireType_m = rightWireType_m
else
	parameters rightWireType = stWireType[rightWireType_m]
endif

if rightRailType_m = 2 THEN
	values "nBarsRightRail" 2,3,4,5,6
else
	values "nBarsRightRail" 1,2,3,4,5,6
endif
if leftRailType_m = 2 | bSameRails & rightRailType_m = 2 THEN
	values "nBarsLeftRail" 2,3,4,5,6
else
	values "nBarsLeftRail" 1,2,3,4,5,6
endif

! --- HIDE RAILING PARAMETERS ---

LOCK "ggr","sgr","ggl","sgl"

IF leftRailType_m = RAIL_BALUSTRADE THEN
	HIDEPARAMETER	"leftRailPostSize",
					"nBarsLeftRail"
ENDIF
IF leftRailType_m = RAIL_PARALLEL_BARS THEN
	HIDEPARAMETER	"leftRailBarThk",
					"leftRailPostSize"
ENDIF
IF leftRailType_m = RAIL_SIMPLE_BAR THEN
	HIDEPARAMETER	"leftRailBarThk",
					"leftRailPostSize",
					"nBarsLeftRail"
ENDIF
IF leftRailType_m = RAIL_SOLID_FRAME_FILLED THEN
	HIDEPARAMETER	"leftRailPostSize",
					"leftRailBarDepth",
					"nBarsLeftRail"
ENDIF
IF leftRailType_m = RAIL_SOLID_FRAME THEN
	HIDEPARAMETER	"leftRailPostSize",
					"leftRailBarDepth",
					"nBarsLeftRail",
					"leftRailBarThk"
ENDIF
IF leftRailType_m = RAIL_SOLID THEN
	HIDEPARAMETER	"leftRailPostSize",
					"leftRailBarDepth",
					"nBarsLeftRail",
					"leftRailBarThk"
ENDIF
IF leftRailType_m = RAIL_WIRED THEN
	HIDEPARAMETER	"leftRailBarDepth"
	if leftWireType_m = 1 then HIDEPARAMETER	"leftRailWireDiam"
	if leftWireType_m = 2 then HIDEPARAMETER	"leftRailWireThk",
												"leftRailWireDepth"
else
	HIDEPARAMETER	"leftWireType",
					"leftRailWireThk",
					"leftRailWireDepth",
					"leftRailWireDiam"
ENDIF
IF leftRailType_m = RAIL_WOODEN_BALUSTRADE THEN
	HIDEPARAMETER	"leftRailPostSize",
					"leftRailBarDepth",
					"nBarsLeftRail",
					"leftRailBarThk"
ENDIF



IF rightRailType_m = RAIL_BALUSTRADE THEN
	HIDEPARAMETER	"rightRailPostSize",
					"nBarsRightRail"
ENDIF
IF rightRailType_m = RAIL_PARALLEL_BARS THEN
	HIDEPARAMETER	"rightRailBarThk",
					"rightRailPostSize"
ENDIF
IF rightRailType_m = RAIL_SIMPLE_BAR THEN
	HIDEPARAMETER	"rightRailBarThk",
					"rightRailPostSize",
					"nBarsRightRail"
ENDIF
IF rightRailType_m = RAIL_SOLID_FRAME_FILLED THEN
	HIDEPARAMETER	"rightRailPostSize",
					"rightRailBarDepth",
					"nBarsRightRail"
ENDIF
IF rightRailType_m = RAIL_SOLID_FRAME THEN
	HIDEPARAMETER	"rightRailPostSize",
					"rightRailBarDepth",
					"nBarsRightRail",
					"rightRailBarThk"
ENDIF
IF rightRailType_m = RAIL_SOLID THEN
	HIDEPARAMETER	"rightRailPostSize",
					"rightRailBarDepth",
					"nBarsRightRail",
					"rightRailBarThk"
ENDIF
IF rightRailType_m = RAIL_WIRED THEN
	HIDEPARAMETER	"rightRailBarDepth"
	if rightWireType_m = 1 then HIDEPARAMETER	"rightRailWireDiam"
	if rightWireType_m = 2 then HIDEPARAMETER	"rightRailWireThk",
												"rightRailWireDepth"
else
	HIDEPARAMETER	"rightWireType",
					"rightRailWireThk",
					"rightRailWireDepth",
					"rightRailWireDiam"
ENDIF
IF rightRailType_m = RAIL_WOODEN_BALUSTRADE THEN
	HIDEPARAMETER	"rightRailPostSize",
					"rightRailBarDepth",
					"nBarsRightRail",
					"rightRailBarThk"
ENDIF

IF rail_m = RAILPOS_NONE | rail_m = RAILPOS_LEFT THEN		! None, Left
	HIDEPARAMETER "rightRailType", "ggr", "rightRailHeight", "rightRailDist", "rightRailOffset", "sgr",
		"rightRailFrameThk", "rightRailBarThk"
ENDIF
IF rail_m = RAILPOS_NONE | rail_m = RAILPOS_RIGHT THEN		! None, Right
	HIDEPARAMETER "leftRailType", "ggl", "leftRailHeight", "leftRailDist", "leftRailOffset", "sgl",
		"leftRailFrameThk", "leftRailBarThk"
ENDIF

IF rail_m = RAILPOS_NONE THEN HIDEPARAMETER "matPost","matHandrail","matSurface","matBar"		! None

IF bSameRails or NOT(bLeftRail) THEN
	HIDEPARAMETER	"ggl",
					"leftRailHeight",
					"leftRailDist",
					"leftRailOffset",
					"sgl",
					"leftRailHeight",
					"leftRailDist",
					"leftRailOffset",
					"leftRailOvhgBottom",
					"leftRailWireDiam",
					"leftWireType",
					"leftRailWireThk",
					"leftRailWireDepth",
					"leftRailOvhgTop",
					"leftRailPostSize",
					"leftRailFrameThk",
					"nBarsLeftRail",
					"leftRailBarThk",
					"leftRailBarDepth"
ENDIF
IF NOT(bRightRail) THEN
	HIDEPARAMETER	"ggr",
					"rightRailHeight",
					"rightRailDist",
					"rightRailOffset",
					"sgr",
					"rightRailHeight",
					"rightRailDist",
					"rightRailOffset",
					"rightRailOvhgBottom",
					"rightRailWireDiam",
					"rightWireType",
					"rightRailWireThk",
					"rightRailWireDepth",
					"rightRailOvhgTop",
					"rightRailPostSize",
					"rightRailFrameThk",
					"nBarsRightRail",
					"rightRailBarThk",
					"rightRailBarDepth"
ENDIF

! ==============================================================================
! Symbolic 2D
! ==============================================================================

values "postSymbolType" stPostSymbolType
values "iPostSymbolType" 1, 2, 3, 4, 0
if GLOB_MODPAR_NAME = "postSymbolType" then
	iPostSymbolType = 1
	if postSymbolType = stPostSymbolType[2] then iPostSymbolType = 2
	if postSymbolType = stPostSymbolType[3] then iPostSymbolType = 3
	if postSymbolType = stPostSymbolType[4] then iPostSymbolType = 4
	if postSymbolType = stPostSymbolType[5] then iPostSymbolType = 0
	parameters iPostSymbolType = iPostSymbolType
else
	postSymbolType = stPostSymbolType[1]
	if iPostSymbolType = 2 then postSymbolType = stPostSymbolType[2]
	if iPostSymbolType = 3 then postSymbolType = stPostSymbolType[3]
	if iPostSymbolType = 4 then postSymbolType = stPostSymbolType[4]
	if iPostSymbolType = 0 then postSymbolType = stPostSymbolType[5]
	parameters postSymbolType = postSymbolType
endif

if NOT(bShowRailOnFloorPlan) then
	lock			"railLineType",
					"railPen",
					"bSymbolic2D",
					"postSymbolType",
					"iPostSymbolType",
					"postLineType",
					"postPen",
					"bShowRailAboveBreakLine"
	hideparameter	"railLineType",
					"railPen",
					"bSymbolic2D",
					"postSymbolType",
					"iPostSymbolType",
					"postLineType",
					"postPen",
					"bShowRailAboveBreakLine"
endif
if NOT(iPostSymbolType) then
	lock			"postLineType",
					"postPen"
	hideparameter	"postLineType",
					"postPen"
endif
if NOT(bSymbolic2D) then
	lock			"postSymbolType",
					"iPostSymbolType",
					"postLineType",
					"postPen"
	hideparameter	"postSymbolType",
					"iPostSymbolType",
					"postLineType",
					"postPen"
endif
if not(bShowRailAxis) then
	lock 			"railAxisLineType",
					"gs_RailAxisPen"
	hideparameter	"railAxisLineType",
					"gs_RailAxisPen"
endif
if	gs_detlevel_2D_m = DET2D_CUSTOM &\
	(gs_SymbolType_m = 3 |\
	gs_SymbolType_m = 8 |\
	gs_SymbolType_m = 15) then
	lock			"bShowRailAboveBreakLine"
	hideparameter	"bShowRailAboveBreakLine"
endif
if NOT(bShowCarriage) then
	lock			"iShowCarriageUpTo",
					"stShowCarriageUpTo",
					"carriageLineType",
					"carriagePen"
	hideparameter	"stShowCarriageUpTo",
					"carriageLineType",
					"carriagePen"
endif
if NOT(bEnableCarriageLine) then
	lock			"bShowCarriage",
					"iShowCarriageUpTo",
					"stShowCarriageUpTo",
					"carriageLineType",
					"carriagePen"
	hideparameter	"bShowCarriage",
					"stShowCarriageUpTo",
					"carriageLineType",
					"carriagePen"
endif

values "stShowCarriageUpTo" stShowCarriageValues
values "iShowCarriageUpTo" 1, 20, 50, 100, 200

if GLOB_MODPAR_NAME = "stShowCarriageUpTo" then
	iShowCarriageUpTo = 1
	if stShowCarriageUpTo = stShowCarriageValues[2]	then iShowCarriageUpTo = 20
	if stShowCarriageUpTo = stShowCarriageValues[3]	then iShowCarriageUpTo = 50
	if stShowCarriageUpTo = stShowCarriageValues[4]	then iShowCarriageUpTo = 100
	if stShowCarriageUpTo = stShowCarriageValues[5]	then iShowCarriageUpTo = 200
	parameters iShowCarriageUpTo = iShowCarriageUpTo
else
	stShowCarriageUpTo = stShowCarriageValues[1]
	if iShowCarriageUpTo = 20	then stShowCarriageUpTo = stShowCarriageValues[2]
	if iShowCarriageUpTo = 50	then stShowCarriageUpTo = stShowCarriageValues[3]
	if iShowCarriageUpTo = 100	then stShowCarriageUpTo = stShowCarriageValues[4]
	if iShowCarriageUpTo = 200	then stShowCarriageUpTo = stShowCarriageValues[5]
	parameters stShowCarriageUpTo = stShowCarriageUpTo
endif

! ====================================================================
! End Of Rail
! ====================================================================

values "rightRailHeight" range [0.3,]
values "leftRailHeight" range [0.3,]
values "rightRailDist" range [0,]
values "leftRailDist" range [0,]
values "rightRailOffset" range [-flightWidth/3,flightWidth/3]
values "leftRailOffset" range [-flightWidth/3,]
values "woodBaseOffset" range [0,flightWidth/2-0.05)


IF stairBaseType_m <> 2 THEN HIDEPARAMETER "woodBaseOffset"		! Wood
IF stairBaseType_m = 3 THEN HIDEPARAMETER "stairSlabThk"		! None

dim iPenNumber[255]
for i=1 to 255
	iPenNumber[i]=i
next i

values "gs_cont_pen"		iPenNumber
values "gs_DashLinePen"		iPenNumber
values "railPen"			iPenNumber
values "gs_RailAxisPen"		iPenNumber
values "postPen"			iPenNumber
values "carriagePen"		iPenNumber
values "gs_fill_pen"		iPenNumber
values "gs_wLinePen"		iPenNumber
values "gs_NumTextPen"		iPenNumber
values "gs_text_pen"		iPenNumber
values "UPDNfontpen"		iPenNumber
values "gs_desc_text_pen"	iPenNumber
values "gs_LinePenStUp"		iPenNumber

VALUES "gs_ScaleChangeSM"	RANGE (1,)
VALUES "gs_ScaleChangeMD"	RANGE (,gs_ScaleChangeSM)

! --- HIDE MATERIAL PARAMETERS ---

! None
IF stairBaseType_m = 3 THEN HIDEPARAMETER 	"matBase",	
											"penLineStringer",
											"typeFillStringer",
											"penFillStringer",
											"penBackFillStringer"

IF treadThickness<0.0001 THEN HIDEPARAMETER "matTread",
											"penLineTread",
											"typeFillTread",
											"penFillTread",
											"penBackFillTread"

IF bRiserCover=0 THEN HIDEPARAMETER "riserCoverThk","matRiser",
									"penLineRiser",
									"typeFillRiser",
									"penFillRiser",
									"penBackFillRiser"

! ==============================================================================
! Settings of 2D Symbol Type
! ==============================================================================

	LOCK	"gs_ArrowFill","gs_ArrowHeight","gs_ArrowHalfWidth",
			"gs_StartEndFill","gs_StartWidth","gs_StartHeight",
			"DirNumText_X","DirNumText_Y",
			"DirUPDN_X","DirUPDN_Y","AngUPDN",
			"bSameRails","breakLineWidth"

	IF bShowWalkLine=0 THEN
		 HIDEPARAMETER 	"gs_wLineType1","gs_wLineTypeAbove",
						"gs_wLinePen","arrow_style","gs_ArrowFillPen","gs_ArrowFillPenAbove", "bShowWalkLineAboveBreakline", "gs_circleRadius",
						"gs_StartEndStyle","gs_StartEndFillPen","bShowRiseAndRunText","walkingDirUPDN","UPDNfontsize","gs_text_size_pt_UpDn"

		 LOCK	"gs_wLineType1","gs_wLineTypeAbove",
				"gs_wLinePen","arrow_style","gs_ArrowFillPen","gs_ArrowFillPenAbove", "bShowWalkLineAboveBreakline", "gs_circleRadius",
				"gs_StartEndStyle","gs_StartEndFillPen","bShowRiseAndRunText","walkingDirUPDN","UPDNfontsize","gs_text_size_pt_UpDn"
	ENDIF

	IF arrow_style_m = 1 | arrow_style_m = 2 | arrow_style_m = 3 THEN
		 lock 	"gs_ArrowFillPen","gs_ArrowFillPenAbove"
		 HIDEPARAMETER 	"gs_ArrowFillPen","gs_ArrowFillPenAbove"
	ENDIF

	IF gs_StartEndStyle_m = 3 | gs_StartEndStyle_m = 4  THEN		! Style 3, None
		 HIDEPARAMETER 	"gs_StartEndFillPen"
	ENDIF

	if not(bShowNumbering)  then
		 lock 	"nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen", "typeTextRotation_Num"
		 hideparameter 	"nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen", "typeTextRotation_Num"
	endif

	if not(bShowRiseAndRunText) then
		lock 	"gs_RiseRunText","gs_CustomText1","gs_CustomText2","gs_customText_rise", "fontsize", "gs_text_size_pt", "typeTextRotation_RiseRun", "gs_text_pen", "bUseACLinearUnit"
		hideparameter 	"gs_RiseRunText","gs_CustomText1","gs_CustomText2", "gs_customText_rise", "fontsize", "gs_text_size_pt", "typeTextRotation_RiseRun", "gs_text_pen", "bUseACLinearUnit"
	endif

	if iRiseRunText < 99 then
		hideparameter 	"gs_CustomText1","gs_CustomText2"
		lock		 	"gs_CustomText1","gs_CustomText2"
	else
		if bLinearDimIsMetric then
			hideparameter 	"gs_CustomText2"
			lock		 	"gs_CustomText2"
		endif
	endif

	if iRiseRunText <> 5 & iRiseRunText <> 6 then
		lock "gs_customText_rise"
		hideparameter "gs_customText_rise"
	endif

	if walkingDirUPDN_m = 1 then	! None
		 lock 	"UPDNfontsize","gs_text_size_pt_UpDn", "UPDNfontpen","AngUPDN", "typeTextRotation_UpDn"
		 hideparameter 	"UPDNfontsize", "gs_text_size_pt_UpDn", "UPDNfontpen","AngUPDN", "typeTextRotation_UpDn"
	endif
	if walkingDirUPDN_m = 1 | walkingDirUPDN_m = 2 then	! None, Up
		lock "gs_CustomText_Down"
		hideparameter "gs_CustomText_Down"
	endif

	! --- SETTINGS BY SYMBOL TYPES ---

	if gs_detlevel_2D_m = DET2D_CUSTOM then
		IF gs_SymbolType_m = 1 THEN		! Type 1
			HIDEPARAMETER	"bShowNumbering","nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen",
							"gs_ArrowFillPenAbove","gs_FillAbove"

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=0
				PARAMETERS gs_BreaklineStUp=0
				PARAMETERS gs_TreadStUp=0
				PARAMETERS gs_numaStUp=0
			ENDIF

		ENDIF

		IF gs_SymbolType_m = 2 THEN		! Type 2
			HIDEPARAMETER 	"bShowNumbering","nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen",
							"gs_ArrowFillPenAbove","gs_FillAbove"

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=0
				PARAMETERS gs_BreaklineStUp=0
				PARAMETERS gs_TreadStUp=0
				PARAMETERS gs_numaStUp=0
			ENDIF

		ENDIF

		IF gs_SymbolType_m = 3 THEN		! Type 3
			HIDEPARAMETER 	"bShowNumbering","nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen",
							"gs_ArrowFillPenAbove","gs_FillAbove"

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=0
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=0
				PARAMETERS gs_numaStUp=0
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 4 THEN		! Type 4
			HIDEPARAMETER 	"bShowNumbering","nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen"

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=0
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=0
				PARAMETERS gs_numaStUp=0
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 5 THEN		! Type 5
			HIDEPARAMETER 	"bShowNumbering","nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen"

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=0
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=0
				PARAMETERS gs_numaStUp=0
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 6 THEN		! Type 6
			HIDEPARAMETER "gs_ArrowFillPenAbove","gs_FillAbove"

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=0
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 7 THEN		! Type 7
			HIDEPARAMETER 	"gs_ArrowFillPenAbove","gs_FillAbove"
			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=0
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 8 THEN		! Type 8
			HIDEPARAMETER 	"bShowNumbering","nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen",
							"gs_ArrowFillPenAbove","gs_FillAbove"

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 9 THEN		! Type 9
			HIDEPARAMETER 	"bShowNumbering","nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen"

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 10 THEN		! Type 10
			HIDEPARAMETER 	"bShowNumbering","nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen"
			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 11 THEN		! Type 11

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 12 THEN		! Type 12

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 13 THEN		! Type 13
			HIDEPARAMETER 	"gs_FillAbove"
			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=0
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 14 THEN		! Type 14
			HIDEPARAMETER 	"gs_FillAbove"
			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=0
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 15 THEN		! Type 15
			HIDEPARAMETER 	"bShowNumbering","nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen",
							"gs_FillAbove"

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 16 THEN		! Type 16
			HIDEPARAMETER 	"bShowNumbering","nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen"

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 17 THEN		! Type 17
			HIDEPARAMETER 	"bShowNumbering","nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen"

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 18 THEN		! Type 18

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 19 THEN		! Type 19

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 20 THEN		! Type 20
			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF
	endif
	
! ======================================================================
! Above Home Story
! ======================================================================
IF not(bStorySensitive) THEN
	HIDEPARAMETER "gs_AboveHomeStory"
ELSE
	IF not(gs_BreaklineStUp) THEN HIDEPARAMETER "gs_LowerPartStUp","gs_UpperPartStUp"
	IF gs_BreaklineStUp | not(gs_TreadStUp) THEN HIDEPARAMETER "gs_numaStUp"
	IF not(gs_LowerPartStUp) & not(gs_UpperPartStUp) & gs_BreaklineStUp THEN HIDEPARAMETER "gs_TreadStUp"
ENDIF

! ==============================================================================
! mm / point conversion
! ==============================================================================

MM_IN_A_DOT = 25.4 / 72

if GLOB_MODPAR_NAME = "gs_text_size_pt_UpDn" then
	UPDNfontsize = gs_text_size_pt_UpDn * MM_IN_A_DOT
	parameters UPDNfontsize = UPDNfontsize
else
	gs_text_size_pt_UpDn = UPDNfontsize / MM_IN_A_DOT
	parameters gs_text_size_pt_UpDn = gs_text_size_pt_UpDn
endif

if GLOB_MODPAR_NAME = "gs_text_size_pt" then
	fontsize = gs_text_size_pt * MM_IN_A_DOT
	parameters fontsize = fontsize
else
	gs_text_size_pt = fontsize / MM_IN_A_DOT
	parameters gs_text_size_pt = gs_text_size_pt
endif

if GLOB_MODPAR_NAME = "gs_text_size_pt_num" then
	gs_NumTextSize = gs_text_size_pt_num * MM_IN_A_DOT
	parameters gs_NumTextSize = gs_NumTextSize
else
	gs_text_size_pt_num = gs_NumTextSize / MM_IN_A_DOT
	parameters gs_text_size_pt_num = gs_text_size_pt_num
endif

if GLOB_MODPAR_NAME = "gs_desc_text_size_pt" then
	gs_desc_text_size = gs_desc_text_size_pt * MM_IN_A_DOT
	parameters gs_desc_text_size = gs_desc_text_size
else
	gs_desc_text_size_pt = gs_desc_text_size / MM_IN_A_DOT
	parameters gs_desc_text_size_pt = gs_desc_text_size_pt
endif

! --- Connecting integer and section pencolor type parameters ---

for i = 1 to 255
	put i
next i

values "penLineStringer" use(nsp)
values "penFillStringer" use(nsp)

if GLOB_MODPAR_NAME = "penLineStringer_m" then
	if penLineStringer_m < -1 | penLineStringer_m > 255 then
		penLineStringer_m = 1
		parameters penLineStringer_m = penLineStringer_m
	endif
	parameters penLineStringer = penLineStringer_m
else
	parameters penLineStringer_m = penLineStringer
endif
if GLOB_MODPAR_NAME = "penFillStringer_m" then
	if penFillStringer_m < -1 | penFillStringer_m > 255 then
		penFillStringer_m = 1
		parameters penFillStringer_m = penFillStringer_m
	endif
	parameters penFillStringer = penFillStringer_m
else
	parameters penFillStringer_m = penFillStringer
endif

values "penLineTread" use(nsp)
values "penFillTread" use(nsp)

if GLOB_MODPAR_NAME = "penLineTread_m" then
	if penLineTread_m < 1 | penLineTread_m > 255 then
		penLineTread_m = 1
		parameters penLineTread_m = penLineTread_m
	endif
	parameters penLineTread = penLineTread_m
else
	parameters penLineTread_m = penLineTread
endif
if GLOB_MODPAR_NAME = "penFillTread_m" then
	if penFillTread_m < 1 | penFillTread_m > 255 then
		penFillTread_m = 1
		parameters penFillTread_m = penFillTread_m
	endif
	parameters penFillTread = penFillTread_m
else
	parameters penFillTread_m = penFillTread
endif

values "penLineRiser" use(nsp)
values "penFillRiser" get(nsp)

if GLOB_MODPAR_NAME = "penLineRiser_m" then
	if penLineRiser_m < 1 | penLineRiser_m > 255 then
		penLineRiser_m = 1
		parameters penLineRiser_m = penLineRiser_m
	endif
	parameters penLineRiser = penLineRiser_m
else
	parameters penLineRiser_m = penLineRiser
endif
if GLOB_MODPAR_NAME = "penFillRiser_m" then
	if penFillRiser_m < 1 | penFillRiser_m > 255 then
		penFillRiser_m = 1
		parameters penFillRiser_m = penFillRiser_m
	endif
	parameters penFillRiser = penFillRiser_m
else
	parameters penFillRiser_m = penFillRiser
endif


if GLOB_MODPAR_NAME = "penBackFillStringer_m" then
	if penBackFillStringer_m < -1 | penBackFillStringer_m > 255 then
		penBackFillStringer_m = 1
		parameters penBackFillStringer_m = penBackFillStringer_m
	endif
	parameters penBackFillStringer = penBackFillStringer_m
else
	parameters penBackFillStringer_m = penBackFillStringer
endif

if GLOB_MODPAR_NAME = "penBackFillTread_m" then
	if penBackFillTread_m < -1 | penBackFillTread_m > 255 then
		penBackFillTread_m = 1
		parameters penBackFillTread_m = penBackFillTread_m
	endif
	parameters penBackFillTread = penBackFillTread_m
else
	parameters penBackFillTread_m = penBackFillTread
endif

if GLOB_MODPAR_NAME = "penBackFillRiser_m" then
	if penBackFillRiser_m < -1 | penBackFillRiser_m > 255 then
		penBackFillRiser_m = 1
		parameters penBackFillRiser_m = penBackFillRiser_m
	endif
	parameters penBackFillRiser = penBackFillRiser_m
else
	parameters penBackFillRiser_m = penBackFillRiser
endif

! =============================================================================
! Onorm list Settings
! =============================================================================

if LibraryLangCode = "AUT" or LibraryLangCode = "CHE" or LibraryLangCode = "GER" then
	call "Onorm_Stair" parameters all
else
	hideparameter "gs_onorm_Title", "gs_list_soundinsul"
endif

! =============================================================================
! IFC2x3 Property Set for Stairs
! =============================================================================

TWOQUARTER_TURN_STAIR = 8
parameters ifc_StairType 		= TWOQUARTER_TURN_STAIR
parameters ifc_NumberOfRiser 	= nRisers
! unused "firstTreadLevel" and "topTreadLevel" parameters
parameters ifc_NumberOfTreads 	= nRisers
parameters ifc_RiserHeight		= treadHeight
parameters ifc_TreadLength		= treadDepth
]]>
</Script_VL>

<ParamSection SectVersion="22" SectionFlags="0" SubIdent="0">
	<ParamSectHeader>
		<AutoHotspots>false</AutoHotspots>
		<StatBits>
			<STBit_UIDefault/>
			<STBit_FixSize/>
			<STBit_UIUseHierarchicalPages/>
		</StatBits>
		<WDLeftFrame>0</WDLeftFrame>
		<WDRightFrame>0</WDRightFrame>
		<WDTopFrame>0</WDTopFrame>
		<WDBotFrame>0</WDBotFrame>
		<LayFlags>0</LayFlags>
		<WDMirrorThickness>0</WDMirrorThickness>
		<WDWallInset>0</WDWallInset>
	</ParamSectHeader>
	<Parameters>
		<Length Name="A">
			<Description><![CDATA[""]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Unique/>
			</Flags>
			<Value>3.9</Value>
		</Length>
		<Length Name="B">
			<Description><![CDATA[""]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Unique/>
			</Flags>
			<Value>2.45</Value>
		</Length>
		<Length Name="zzyzx">
			<Description><![CDATA["Общая Высота"]]></Description>
			<Fix/>
			<Value>3.1</Value>
		</Length>
		<Integer Name="gs_detlevel_3D_m">
			<Description><![CDATA["3D"]]></Description>
			<Value>2</Value>
		</Integer>
		<String Name="parameterType">
			<Description><![CDATA["Тип Параметра"]]></Description>
			<Flags>
				<ParFlg_Unique/>
			</Flags>
			<Value><![CDATA["Высота Ступени"]]></Value>
		</String>
		<String Name="firstTreadLevel">
			<Description><![CDATA["Уровень Первой Ступени"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<Value><![CDATA["Первая Ступень над Уровнем Пола"]]></Value>
		</String>
		<String Name="topTreadLevel">
			<Description><![CDATA["Уровень Верхней Ступени"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<Value><![CDATA["Верхняя Ступень Ниже Уровня Пола"]]></Value>
		</String>
		<Length Name="flightWidth">
			<Description><![CDATA["Ширина Марша"]]></Description>
			<Flags>
				<ParFlg_Unique/>
			</Flags>
			<Value>1.2</Value>
		</Length>

		<!-- gs_tread: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_tread">
			<Description><![CDATA["Размеры Подступенков и Проступей"]]></Description>
		</Title>
		<Integer Name="nRisers">
			<Description><![CDATA["Количество Подступенков"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>18</Value>
		</Integer>
		<Integer Name="nRisers1stRun">
			<Description><![CDATA["Количество Подступенков в 1 Марше"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>6</Value>
		</Integer>
		<Integer Name="nRisers2ndRun">
			<Description><![CDATA["Количество Подступенков во 2 Марше"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>8</Value>
		</Integer>
		<Integer Name="nRisers3rdRun">
			<Description><![CDATA["Количество Подступенков в 3 марше"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>5</Value>
		</Integer>
		<Length Name="preferredTreadHeight">
			<Description><![CDATA["Предпочтительная Высота Ступени"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0.17</Value>
		</Length>
		<Length Name="treadHeight">
			<Description><![CDATA["Высота Ступени"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0.163157894737</Value>
		</Length>
		<Length Name="thd">
			<Description><![CDATA["Две Высоты Подступенка + Проступь"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0.576315789474</Value>
		</Length>
		<Length Name="treadDepth">
			<Description><![CDATA["Глубина Ступени"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0.25</Value>
		</Length>
		<Length Name="treadDepth2">
			<Description><![CDATA["Глубина Ступени 2."]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0.3</Value>
		</Length>
		<Length Name="treadThickness">
			<Description><![CDATA["Толщина Подступенка (0-Нет)"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Length Name="nosing">
			<Description><![CDATA["Выступ"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0.02</Value>
		</Length>
		<Boolean Name="bRiserCover">
			<Description><![CDATA["Защитный Слой Подступенка"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Length Name="riserCoverThk">
			<Description><![CDATA["Толщина Защитного Слоя Подступенка"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0.03</Value>
		</Length>

		<!-- _sp0: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="_sp0">
			<Description><![CDATA["Плита Лестницы и Площадки"]]></Description>
		</Title>
		<String Name="stairBaseType">
			<Description><![CDATA["Тип Основания Лестницы"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value><![CDATA["Бетон"]]></Value>
		</String>
		<Integer Name="stairBaseType_m">
			<Description><![CDATA["Тип Основания Лестницы"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Length Name="stairSlabThk">
			<Description><![CDATA["Толщина Плиты Лестницы"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0.21</Value>
		</Length>
		<Length Name="woodBaseOffset">
			<Description><![CDATA["Смещение Деревянного Основания"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<String Name="topJunctionType">
			<Description><![CDATA["Тип Стыка Вверху"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<Length Name="topLandingThk">
			<Description><![CDATA["Толщина Верхней Площадки"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="lowerLandingThk">
			<Description><![CDATA["Толщина Нижней Площадки"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.2</Value>
		</Length>
		<Length Name="endSlabThickness">
			<Description><![CDATA["Толщина Плиты в Конце"]]></Description>
			<Flags>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Integer Name="rail_m">
			<Description><![CDATA["Ограждение"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>

		<!-- bRightRail: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Boolean Name="bRightRail">
			<Description><![CDATA["Ограждение Справа"]]></Description>
			<Flags>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<String Name="rightRailType">
			<Description><![CDATA["Тип Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Балюстрада Ограждения"]]></Value>
		</String>
		<Integer Name="rightRailType_m">
			<Description><![CDATA["Ограждение Справа"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<String Name="ggr">
			<Description><![CDATA["Конструктивные Размеры"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<Length Name="rightRailHeight">
			<Description><![CDATA["Высота Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.8</Value>
		</Length>
		<Length Name="rightRailDist">
			<Description><![CDATA["Расстояние от Лестницы"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.1</Value>
		</Length>
		<Length Name="rightRailOffset">
			<Description><![CDATA["Смещение Правого Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="rightRailOvhgBottom">
			<Description><![CDATA["Выступ Ограждения Внизу"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="rightRailOvhgTop">
			<Description><![CDATA["Выступ Ограждения Вверху"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<String Name="sgr">
			<Description><![CDATA["Размеры Элементов Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<Length Name="rightRailPostSize">
			<Description><![CDATA["Размер Стоек"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.06</Value>
		</Length>
		<Length Name="rightRailFrameThk">
			<Description><![CDATA["Толщина Рамы"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.04</Value>
		</Length>
		<Length Name="rightRailBarThk">
			<Description><![CDATA["Толщина Брусков"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Length Name="rightRailBarDepth">
			<Description><![CDATA["Глубина Брусков"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.02</Value>
		</Length>
		<String Name="rightWireType">
			<Description><![CDATA["Тип Леера"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA["Прямоугольные"]]></Value>
		</String>
		<Integer Name="nBarsRightRail">
			<Description><![CDATA["Количество Брусков"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>4</Value>
		</Integer>
		<Length Name="rightRailWireDiam">
			<Description><![CDATA["Диаметр Леера"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.005</Value>
		</Length>
		<Length Name="rightRailWireThk">
			<Description><![CDATA["Толщина Леера"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.005</Value>
		</Length>
		<Length Name="rightRailWireDepth">
			<Description><![CDATA["Глубина Леера"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.005</Value>
		</Length>

		<!-- bLeftRail: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Boolean Name="bLeftRail">
			<Description><![CDATA["Ограждение Слева"]]></Description>
			<Flags>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<String Name="leftRailType">
			<Description><![CDATA["Тип Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Как и Правое"]]></Value>
		</String>
		<Integer Name="leftRailType_m">
			<Description><![CDATA["Ограждение Слева"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>11</Value>
		</Integer>
		<Boolean Name="bSameRails">
			<Description><![CDATA["Как и Правое Ограждение"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<String Name="ggl">
			<Description><![CDATA["Конструктивные Размеры"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<Length Name="leftRailHeight">
			<Description><![CDATA["Высота Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.8</Value>
		</Length>
		<Length Name="leftRailDist">
			<Description><![CDATA["Расстояние от Лестницы"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.1</Value>
		</Length>
		<Length Name="leftRailOffset">
			<Description><![CDATA["Смещение Левого Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="leftRailOvhgBottom">
			<Description><![CDATA["Выступ Ограждения Внизу"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="leftRailOvhgTop">
			<Description><![CDATA["Выступ Ограждения Вверху"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<String Name="sgl">
			<Description><![CDATA["Размеры Элементов Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<Length Name="leftRailPostSize">
			<Description><![CDATA["Размер Стоек"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.06</Value>
		</Length>
		<Length Name="leftRailFrameThk">
			<Description><![CDATA["Толщина Рамы"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.04</Value>
		</Length>
		<Length Name="leftRailBarThk">
			<Description><![CDATA["Толщина Брусков"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Length Name="leftRailBarDepth">
			<Description><![CDATA["Глубина Брусков"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.02</Value>
		</Length>
		<String Name="leftWireType">
			<Description><![CDATA["Тип Леера"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA["Прямоугольные"]]></Value>
		</String>
		<Integer Name="nBarsLeftRail">
			<Description><![CDATA["Количество Брусков"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>4</Value>
		</Integer>
		<Length Name="leftRailWireDiam">
			<Description><![CDATA["Диаметр Леера"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.005</Value>
		</Length>
		<Length Name="leftRailWireThk">
			<Description><![CDATA["Толщина Леера"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.005</Value>
		</Length>
		<Length Name="leftRailWireDepth">
			<Description><![CDATA["Глубина Леера"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.005</Value>
		</Length>

		<!-- gs_3D_representation: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_3D_representation">
			<Description><![CDATA["3D-отображение"]]></Description>
		</Title>
		<Boolean Name="gs_shadow">
			<Description><![CDATA["Отбрасывание Теней"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>

		<!-- gs_2D_representation: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_2D_representation">
			<Description><![CDATA["2D-отображение"]]></Description>
			<Fix/>
		</Title>
		<Integer Name="gs_detlevel_2D_m">
			<Description><![CDATA["2D-детализация"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Integer Name="iScaleChangeSM">
			<Description><![CDATA["Простой/Средний Масштаб изменяется в"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>999</Value>
		</Integer>
		<Integer Name="gs_ScaleChangeSM">
			<Description><![CDATA["Простой/Средний Масштаб изменяется в"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>100</Value>
		</Integer>
		<Integer Name="iScaleChangeMD">
			<Description><![CDATA["Средний/Детальный Масштаб изменяется в"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>999</Value>
		</Integer>
		<Integer Name="gs_ScaleChangeMD">
			<Description><![CDATA["Средний/Детальный Масштаб изменяется в"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>50</Value>
		</Integer>

		<!-- Symbol2D: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="Symbol2D">
			<Description><![CDATA["2D-символ"]]></Description>
		</Title>
		<Integer Name="gs_SymbolType_m">
			<Description><![CDATA["Тип 2D-символа"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>11</Value>
		</Integer>
		<Integer Name="iSymbolGroup">
			<Description><![CDATA["Тип Группы Символа"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>6</Value>
		</Integer>
		<PenColor Name="gs_cont_pen">
			<Description><![CDATA["Перо Линий Видимых Конструкций"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>91</Value>
		</PenColor>
		<PenColor Name="gs_DashLinePen">
			<Description><![CDATA["Перо Линий Невидимых Конструкций"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>91</Value>
		</PenColor>
		<LineType Name="solid_line">
			<Description><![CDATA["Тип Линий Видимых Конструкций"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</LineType>
		<LineType Name="dash_line">
			<Description><![CDATA["Тип Линий Невидимых Конструкций"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>4</Value>
		</LineType>
		<Boolean Name="bShowRailOnFloorPlan">
			<Description><![CDATA["Показать Ограждение на Плане"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<LineType Name="railLineType">
			<Description><![CDATA["Тип Линии Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</LineType>
		<PenColor Name="railPen">
			<Description><![CDATA["Перо Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>82</Value>
		</PenColor>
		<Boolean Name="bShowRailAxis">
			<Description><![CDATA["Показать Ось Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<LineType Name="railAxisLineType">
			<Description><![CDATA["Тип Линии Оси Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>6</Value>
		</LineType>
		<PenColor Name="gs_RailAxisPen">
			<Description><![CDATA["Перо Линии Оси Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>71</Value>
		</PenColor>
		<Boolean Name="bSymbolic2D">
			<Description><![CDATA["Символический 2D"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<String Name="postSymbolType">
			<Description><![CDATA["Тип Символа Стойки"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Тип 1"]]></Value>
		</String>
		<Integer Name="iPostSymbolType">
			<Description><![CDATA["Тип Символа Стойки"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<LineType Name="postLineType">
			<Description><![CDATA["Тип Линии Стойки"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</LineType>
		<PenColor Name="postPen">
			<Description><![CDATA["Перо Линии Стойки"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>23</Value>
		</PenColor>
		<Boolean Name="bShowRailAboveBreakLine">
			<Description><![CDATA["Показать Ограждение выше Линии Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="bShowCarriage">
			<Description><![CDATA["Показать Тетиву на Плане Этажа"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<String Name="stShowCarriageUpTo">
			<Description><![CDATA["Показать Тетиву"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["До 1:50"]]></Value>
		</String>
		<Integer Name="iShowCarriageUpTo">
			<Description><![CDATA["Показать Тетиву"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>50</Value>
		</Integer>
		<LineType Name="carriageLineType">
			<Description><![CDATA["Линия Невидимой Тетивы"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</LineType>
		<PenColor Name="carriagePen">
			<Description><![CDATA["Перо Невидимой Тетивы"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>23</Value>
		</PenColor>
		<FillPattern Name="gs_fill_type">
			<Description><![CDATA["Штриховка Фона"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>65</Value>
		</FillPattern>
		<PenColor Name="gs_fill_pen">
			<Description><![CDATA["Перо Штриховки"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>19</Value>
		</PenColor>
		<PenColor Name="gs_back_pen">
			<Description><![CDATA["Перо Фона Штриховки"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>19</Value>
		</PenColor>
		<Boolean Name="gs_FillAbove">
			<Description><![CDATA["Штриховка Выше Линии Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<String Name="breakline_style">
			<Description><![CDATA["Стиль Линии Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA["Прямой"]]></Value>
		</String>
		<Boolean Name="bSimpleZigZag">
			<Description><![CDATA["Линия Разрыва в виде Простого Зигзага"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Length Name="gs_BreakHeight">
			<Description><![CDATA["Расположение Линии Разрыва (Высота)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1.4</Value>
		</Length>
		<Length Name="breakLineWidth">
			<Description><![CDATA["Ширина Линии Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.2</Value>
		</Length>
		<String Name="lineTypeAboveBreak">
			<Description><![CDATA["Тип Линии выше Линии Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
				<ParFlg_Hidden/>
			</Flags>
			<Value><![CDATA["Сплошная"]]></Value>
		</String>
		<Boolean Name="bShowWalkLine">
			<Description><![CDATA["Показать Линию Всхода"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="bShowWalkLineAboveBreakline">
			<Description><![CDATA["Линия Всхода выше Линии Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<LineType Name="gs_wLineType1">
			<Description><![CDATA["Тип Видимой Линии"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</LineType>
		<LineType Name="gs_wLineType2">
			<Description><![CDATA["Тип Линии"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>6</Value>
		</LineType>
		<LineType Name="gs_wLineTypeAbove">
			<Description><![CDATA["Тип Невидимой Линии"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>6</Value>
		</LineType>
		<PenColor Name="gs_wLinePen">
			<Description><![CDATA["Перо Линии"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>71</Value>
		</PenColor>
		<String Name="arrow_style">
			<Description><![CDATA["Стиль Стрелки"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA["Стиль 3"]]></Value>
		</String>
		<FillPattern Name="gs_ArrowFill">
			<Description><![CDATA["Тип Штриховки Стрелки"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>64</Value>
		</FillPattern>
		<PenColor Name="gs_ArrowFillPen">
			<Description><![CDATA["Перо Штриховки (0 - нет)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>91</Value>
		</PenColor>
		<PenColor Name="gs_ArrowFillPenAbove">
			<Description><![CDATA["Перо Штриховки Выше (0 - Нет)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</PenColor>
		<Length Name="gs_ArrowHeight">
			<Description><![CDATA["Высота Стрелки"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.2</Value>
		</Length>
		<Length Name="gs_ArrowHalfWidth">
			<Description><![CDATA["Половина Ширины Стрелки"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.2</Value>
		</Length>
		<String Name="gs_StartEndStyle">
			<Description><![CDATA["Символ в Начале"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA["Стиль 1"]]></Value>
		</String>
		<Integer Name="gs_StartEndStyle_m">
			<Description><![CDATA["Символ в Начале"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<FillPattern Name="gs_StartEndFill">
			<Description><![CDATA["Тип Штриховки Символа"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>64</Value>
		</FillPattern>
		<PenColor Name="gs_StartEndFillPen">
			<Description><![CDATA["Перо Штриховки (0 - нет)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</PenColor>
		<Length Name="gs_CircleRadius">
			<Description><![CDATA["Радиус Окружности"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.1</Value>
		</Length>
		<Length Name="gs_StartWidth">
			<Description><![CDATA["Половина Ширины Символа"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Length Name="gs_StartHeight">
			<Description><![CDATA["Половина Высоты Символа"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.15</Value>
		</Length>
		<Boolean Name="bShowNumbering">
			<Description><![CDATA["Показать Нумерацию"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Integer Name="nStartNumbering">
			<Description><![CDATA["Начать Нумерацию с"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<RealNum Name="gs_NumTextSize">
			<Description><![CDATA["Размер Шрифта (мм)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</RealNum>
		<RealNum Name="gs_text_size_pt_num">
			<Description><![CDATA["Размер Шрифта (пт)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>2.83</Value>
		</RealNum>
		<PenColor Name="gs_NumTextPen">
			<Description><![CDATA["Перо Текста"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>86</Value>
		</PenColor>
		<Length Name="DirNumText_X">
			<Description><![CDATA["Расположение Нумерации по X"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="DirNumText_Y">
			<Description><![CDATA["Расположение Нумерации по Y"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<String Name="typeTextRotation_Num">
			<Description><![CDATA["Ориентация Текста в Символе"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Выровнять по Символу"]]></Value>
		</String>
		<Integer Name="typeTextRotation_Num_m">
			<Description><![CDATA["Ориентация Текста в Символе"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Integer>
		<Boolean Name="bShowRiseAndRunText">
			<Description><![CDATA["Текст Подступенков и Проступей"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<String Name="gs_RiseRunText">
			<Description><![CDATA["Текст"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Кол-во x Подступенок = Высота Марша"]]></Value>
		</String>
		<Integer Name="iRiseRunText">
			<Description><![CDATA["Текст"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<String Name="gs_CustomText1">
			<Description><![CDATA["Специальный Текст_1"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Специальный Текст_1"]]></Value>
		</String>
		<String Name="gs_CustomText2">
			<Description><![CDATA["Специальный Текст_2"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Специальный Текст_2"]]></Value>
		</String>
		<String Name="gs_customText_rise">
			<Description><![CDATA["Текст Подступенка"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["П"]]></Value>
		</String>
		<RealNum Name="fontsize">
			<Description><![CDATA["Размер Шрифта (мм)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</RealNum>
		<RealNum Name="gs_text_size_pt">
			<Description><![CDATA["Размер Шрифта (пт)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>2.83</Value>
		</RealNum>
		<PenColor Name="gs_text_pen">
			<Description><![CDATA["Перо Шрифта"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>86</Value>
		</PenColor>
		<Boolean Name="bUseACLinearUnit">
			<Description><![CDATA["Единицы Измерения Рабочей Среды Проекта"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Length Name="DirRiseRunText_X">
			<Description><![CDATA["Текст Подступенков и Проступей по X"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="DirRiseRunText_Y">
			<Description><![CDATA["Текст Подступенков и Проступей по Y"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.8</Value>
		</Length>
		<Angle Name="DirRiseRunAngle">
			<Description><![CDATA["Угол Поворота Текста Подступенков и Проступей"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Angle>
		<String Name="typeTextRotation_RiseRun">
			<Description><![CDATA["Ориентация Текста в Символе"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Читаемый"]]></Value>
		</String>
		<Integer Name="typeTextRotation_RiseRun_m">
			<Description><![CDATA["Ориентация Текста в Символе"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>2</Value>
		</Integer>
		<String Name="walkingDirUPDN">
			<Description><![CDATA["Размер Текста ВВЕРХ/ВНИЗ"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA["Нет"]]></Value>
		</String>
		<Integer Name="walkingDirUPDN_m">
			<Description><![CDATA["Размер Текста ВВЕРХ/ВНИЗ"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<String Name="gs_CustomText_Down">
			<Description><![CDATA["Текст Спуска"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["ВНИЗ"]]></Value>
		</String>
		<RealNum Name="UPDNfontsize">
			<Description><![CDATA["Размер Текста ВВЕРХ/ВНИЗ (мм)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>2</Value>
		</RealNum>
		<RealNum Name="gs_text_size_pt_UpDn">
			<Description><![CDATA["Размер Текста ВВЕРХ/ВНИЗ (точки)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>5.66</Value>
		</RealNum>
		<PenColor Name="UPDNfontpen">
			<Description><![CDATA["Текст ВВЕРХ/ВНИЗ"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>86</Value>
		</PenColor>
		<Length Name="DirUPDN_X">
			<Description><![CDATA["Горизонтальное Смещение Текста"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="DirUPDN_Y">
			<Description><![CDATA["Вертикальное Смещение Текста"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>-0.25</Value>
		</Length>
		<Angle Name="AngUPDN">
			<Description><![CDATA["Угол Текста ВВЕРХ/ВНИЗ"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Angle>
		<Length Name="DirUPDN_X_top">
			<Description><![CDATA["Горизонтальное Смещение Текста"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="DirUPDN_Y_top">
			<Description><![CDATA["Вертикальное Смещение Текста"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>-0.25</Value>
		</Length>
		<Angle Name="AngUPDN_top">
			<Description><![CDATA["Угол Текста ВВЕРХ/ВНИЗ"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Angle>
		<String Name="typeTextRotation_UpDn">
			<Description><![CDATA["Ориентация Текста в Символе"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Выровнять по Символу"]]></Value>
		</String>
		<Integer Name="typeTextRotation_UpDn_m">
			<Description><![CDATA["Ориентация Текста в Символе"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Integer>
		<String Name="gs_description">
			<Description><![CDATA["Описание"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<RealNum Name="gs_desc_text_size">
			<Description><![CDATA["Размер Шрифта (мм)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</RealNum>
		<RealNum Name="gs_desc_text_size_pt">
			<Description><![CDATA["Размер Шрифта (пт)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>2.83</Value>
		</RealNum>
		<PenColor Name="gs_desc_text_pen">
			<Description><![CDATA["Перо Текста"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>23</Value>
		</PenColor>
		<String Name="fontType">
			<Description><![CDATA["Тип Шрифта"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA["Arial"]]></Value>
		</String>
		<Boolean Name="bStorySensitive">
			<Description><![CDATA["Зависит от Этажа"]]></Description>
			<Flags>
				<ParFlg_BoldName/>
			</Flags>
			<Value>0</Value>
		</Boolean>

		<!-- gs_AboveHomeStory: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_AboveHomeStory">
			<Description><![CDATA["2D выше Собственного Этажа"]]></Description>
		</Title>
		<Boolean Name="gs_BreaklineStUp">
			<Description><![CDATA["Линия Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="gs_LowerPartStUp">
			<Description><![CDATA["Нижняя Часть"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="gs_UpperPartStUp">
			<Description><![CDATA["Верхняя Часть"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="gs_TreadStUp">
			<Description><![CDATA["Показать Проступи"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<LineType Name="gs_LineTypeStUp">
			<Description><![CDATA["Тип Линии"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</LineType>
		<PenColor Name="gs_LinePenStUp">
			<Description><![CDATA["Перо Линии"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>71</Value>
		</PenColor>
		<LineType Name="gs_wLineTypeStUp">
			<Description><![CDATA["Тип Линии Всхода"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</LineType>
		<Boolean Name="gs_numaStUp">
			<Description><![CDATA["Показать Нумерацию"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="gs_txStUp">
			<Description><![CDATA["Текст Подступенков и Проступей"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Boolean>

		<!-- gs_section_attributes: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_section_attributes">
			<Description><![CDATA["Реквизиты Сечения"]]></Description>
		</Title>
		<PenColor Name="penLineStringer">
			<Description><![CDATA["Перо Контура Сечения Конструкций"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>29</Value>
		</PenColor>
		<Integer Name="penLineStringer_m">
			<Description><![CDATA["Перо Контура Сечения Конструкций"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>29</Value>
		</Integer>
		<FillPattern Name="typeFillStringer">
			<Description><![CDATA["Штриховка Сечения Конструкций"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>24</Value>
		</FillPattern>
		<PenColor Name="penFillStringer">
			<Description><![CDATA["Перо Штриховки Сечения Конструкций"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>109</Value>
		</PenColor>
		<Integer Name="penFillStringer_m">
			<Description><![CDATA["Перо Штриховки Сечения Конструкций"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>109</Value>
		</Integer>
		<PenColor Name="penBackFillStringer">
			<Description><![CDATA["Перо Фона Штриховки Сечения Конструкций"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</PenColor>
		<Integer Name="penBackFillStringer_m">
			<Description><![CDATA["Перо Фона Штриховки Сечения Конструкций"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Integer>
		<PenColor Name="penLineTread">
			<Description><![CDATA["Перо Контура Сечения Проступи"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1</Value>
		</PenColor>
		<Integer Name="penLineTread_m">
			<Description><![CDATA["Перо Контура Сечения Проступи"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<FillPattern Name="typeFillTread">
			<Description><![CDATA["Штриховка Сечения Проступи"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>23</Value>
		</FillPattern>
		<PenColor Name="penFillTread">
			<Description><![CDATA["Перо Штриховки Сечения Проступи"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>109</Value>
		</PenColor>
		<Integer Name="penFillTread_m">
			<Description><![CDATA["Перо Штриховки Сечения Проступи"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>109</Value>
		</Integer>
		<PenColor Name="penBackFillTread">
			<Description><![CDATA["Перо Фона Штриховки Сечения Проступи"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>-1</Value>
		</PenColor>
		<Integer Name="penBackFillTread_m">
			<Description><![CDATA["Перо Фона Штриховки Сечения Проступи"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>-1</Value>
		</Integer>
		<PenColor Name="penLineRiser">
			<Description><![CDATA["Перо Контура Сечения Подступенка"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1</Value>
		</PenColor>
		<Integer Name="penLineRiser_m">
			<Description><![CDATA["Перо Контура Сечения Подступенка"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<FillPattern Name="typeFillRiser">
			<Description><![CDATA["Штриховка Сечения Подступенка"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>23</Value>
		</FillPattern>
		<PenColor Name="penFillRiser">
			<Description><![CDATA["Перо Штриховки Сечения Подступенка"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>109</Value>
		</PenColor>
		<Integer Name="penFillRiser_m">
			<Description><![CDATA["Перо Штриховки Сечения Подступенка"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>109</Value>
		</Integer>
		<PenColor Name="penBackFillRiser">
			<Description><![CDATA["Перо Фона Штриховки Сечения Подступенка"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>-1</Value>
		</PenColor>
		<Integer Name="penBackFillRiser_m">
			<Description><![CDATA["Перо Фона Штриховки Сечения Подступенка"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>-1</Value>
		</Integer>

		<!-- gs_material: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_material">
			<Description><![CDATA["Покрытия"]]></Description>
		</Title>
		<Material Name="matBase">
			<Description><![CDATA["Основание Лестницы"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>4</Value>
		</Material>
		<Material Name="matTread">
			<Description><![CDATA["Проступь"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>14</Value>
		</Material>
		<Material Name="matRiser">
			<Description><![CDATA["Подступенок"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>14</Value>
		</Material>
		<Material Name="matPost">
			<Description><![CDATA["Стойка"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>59</Value>
		</Material>
		<Material Name="matHandrail">
			<Description><![CDATA["Поручень"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>59</Value>
		</Material>
		<Material Name="matSurface">
			<Description><![CDATA["Панели Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>14</Value>
		</Material>
		<Material Name="matBar">
			<Description><![CDATA["Прутья"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>59</Value>
		</Material>
		<Boolean Name="AC_show2DHotspotsIn3D">
			<Description><![CDATA["Показ Узловых 2D Точек в 3D"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Length Name="ac_bottomlevel">
			<Description><![CDATA["Отметка Низа"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Length>
		<Length Name="ac_toplevel">
			<Description><![CDATA["Отметка Верха"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Integer Name="parameterType_m">
			<Description><![CDATA["Определение Размера"]]></Description>
			<Flags>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Integer Name="topTreadLevel_m">
			<Description><![CDATA["Верхняя Ступень"]]></Description>
			<Flags>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>2</Value>
		</Integer>
		<Integer Name="lineTypeAboveBreak_m">
			<Description><![CDATA["Тип Линии выше Линии Разрыва"]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Integer Name="arrow_style_m">
			<Description><![CDATA["Стиль Стрелки"]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>3</Value>
		</Integer>
		<Integer Name="breakline_style_m">
			<Description><![CDATA["Стиль Линии Разрыва"]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Integer Name="rightWireType_m">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Integer Name="leftWireType_m">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Integer Name="gs_ui_current_page">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Angle Name="gs_readable_angle">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>90</Value>
		</Angle>
		<RealNum Name="gs_description_pos">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<ArrayValues FirstDimension="1" SecondDimension="3">
				<AVal Column="1" Row="1">0</AVal>
				<AVal Column="2" Row="1">0</AVal>
				<AVal Column="3" Row="1">0</AVal>
			</ArrayValues>
		</RealNum>

		<!-- gs_list: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_list">
			<Description><![CDATA["Параметры Спецификаций"]]></Description>
			<Fix/>
		</Title>
		<RealNum Name="gs_list_cost">
			<Description><![CDATA["Цена"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<String Name="gs_list_manufacturer">
			<Description><![CDATA["Производитель"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_note">
			<Description><![CDATA["Примечания"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_location">
			<Description><![CDATA["Расположение"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_accessories">
			<Description><![CDATA["Аксессуары"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_soundinsul">
			<Description><![CDATA["Звукоизоляция"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="FM_Type">
			<Description><![CDATA["Тип Группы"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Лестницы"]]></Value>
		</String>
		<Integer Name="iFMType">
			<Description><![CDATA["Тип Группы"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>6</Value>
		</Integer>
		<String Name="FM_InventoryNumber">
			<Description><![CDATA["Инвентарный Номер"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="FM_SerialNumber">
			<Description><![CDATA["Серийный Номер"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="FM_ProductionYear">
			<Description><![CDATA["Год Производства"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<RealNum Name="FM_ObjectWeight">
			<Description><![CDATA["Вес Изделия"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<String Name="FM_ObjectWeightUnit">
			<Description><![CDATA["Единица Веса"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["кг"]]></Value>
		</String>
		<RealNum Name="FM_Stories">
			<Description><![CDATA["Количество Этажей"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<RealNum Name="FM_HalfLandings">
			<Description><![CDATA["Количество Промежуточных Площадок"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<RealNum Name="FM_LevelHeight">
			<Description><![CDATA["Высота Уровней"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<RealNum Name="FM_HeadRoom">
			<Description><![CDATA["Высота Помещения"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<String Name="FM_BearingStructure">
			<Description><![CDATA["Несущая Конструкция"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<RealNum Name="FM_BearingCapacity">
			<Description><![CDATA["Несущая Способность"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<Boolean Name="FM_SmokeFree">
			<Description><![CDATA["Незадымляемая Лестница"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<RealNum Name="FM_StepsLength">
			<Description><![CDATA["Длина Проступей"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<String Name="FM_MaterialFootstep">
			<Description><![CDATA["Покрытие Проступей"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="FM_MaterialStairRailing">
			<Description><![CDATA["Покрытие Ограждения Лестницы"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="FM_MaterialHandhold">
			<Description><![CDATA["Покрытие Поручней"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_custom1">
			<Description><![CDATA["Пользовательское Значение 1"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_custom2">
			<Description><![CDATA["Пользовательское Значение 2"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_custom3">
			<Description><![CDATA["Пользовательское Значение 3"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_custom4">
			<Description><![CDATA["Пользовательское Значение 4"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_custom5">
			<Description><![CDATA["Пользовательское Значение 5"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>

		<!-- gs_onorm_Title: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_onorm_Title">
			<Description><![CDATA["Дополнительные Параметры Спецификаций"]]></Description>
			<Fix/>
		</Title>
		<String Name="gs_onorm_treadnumber">
			<Description><![CDATA["Количество Ступеней"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_treadriser">
			<Description><![CDATA["Глубина Проступи / Высота Подступенка"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_person">
			<Description><![CDATA["Количество Людей"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_bardist_auto">
			<Description><![CDATA["Значение Чистой Ширины между Прутьями Ограждения"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_bardist">
			<Description><![CDATA["Чистая Ширина между Прутьями Ограждения"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_botlevheight_auto">
			<Description><![CDATA["Значение Отметки Нижнего Уровня"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_botlevheight">
			<Description><![CDATA["Отметка Нижнего Уровня"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_toplevheight_auto">
			<Description><![CDATA["Значение Отметки Верхнего Уровня"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_toplevheight">
			<Description><![CDATA["Отметка Верхнего Уровня"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_construction">
			<Description><![CDATA["Конструкция"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_soundinsul">
			<Description><![CDATA["Звукоизоляция"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_mat1">
			<Description><![CDATA["Дополнительный Материал 1"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_finish1_value">
			<Description><![CDATA["Значение Отделки 1"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_finish1">
			<Description><![CDATA["Отделка 1"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_customtext1">
			<Description><![CDATA["Дополнительная Информация 1"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_customtext2">
			<Description><![CDATA["Дополнительная Информация 2"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_aks">
			<Description><![CDATA["Номер AKS"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_product">
			<Description><![CDATA["Продукт"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_leistungbuch">
			<Description><![CDATA["Коллекция ID Спецификаций"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_description">
			<Description><![CDATA["Дополнительное Описание"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_number">
			<Description><![CDATA["Дополнительный Номер"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_id">
			<Description><![CDATA["Номер ID"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_admission">
			<Description><![CDATA["Дата Приема"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_modification">
			<Description><![CDATA["Дата Изменения"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_tozonenumber">
			<Description><![CDATA["Номер Зоны"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>

		<!-- ifc_Title: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="ifc_Title">
			<Description><![CDATA["IFC2x3 Набор Свойств для Лестниц"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
		</Title>
		<Integer Name="ifc_StairType">
			<Description><![CDATA["Тип Лестницы"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0</Value>
		</Integer>
		<Integer Name="ifc_NumberOfRiser">
			<Description><![CDATA["Количество Подступенков"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0</Value>
		</Integer>
		<Integer Name="ifc_NumberOfTreads">
			<Description><![CDATA["Количество Проступей"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0</Value>
		</Integer>
		<Length Name="ifc_RiserHeight">
			<Description><![CDATA["Высота Подступенка"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="ifc_TreadLength">
			<Description><![CDATA["Длина Проступи"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0</Value>
		</Length>
		<String Name="LibraryLangCode">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value><![CDATA["RUS"]]></Value>
		</String>
	</Parameters>
</ParamSection>

<Picture MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="0" length_in_bytes="3663" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D49484452000000800000
	00800803000000F4E091F90000013B504C5445FFFFFFAE8852B08A526B53328C
	6E419D7C4BDEAD68E4E6E530312BBB93588D764CA4804DC6CBC9EBE2D3C59A5C
	81643B725C3A957D51A17E4BB4A998CCA060C3A67DECD6B3DBC7AAA28C6DB6B7
	B0857A616E6F62707064EDC992DBB9889B8560BC8A497C613A989895756442EB
	B86E827258DAD4CBC99E609E80509E804FACACA45C4B30CCB99D907E65A49C8B
	CCAD81CAC6BE606055F0EAD9E9DDCC7D735CE8C28DDADBD7505047AB95734E49
	3B403A2DD3CBBB736D62BCA47C805D316F7063614623B399745D5136333832D4
	9D549293895F5F55C5B6A1BFAD8FBDBAAD4F5047A6A096E0AF69CFB083CB8D41
	776F5BC0BCB2E1C9A68D8069BA9A63ABA18BBFB1994D422ED7AD77D1BFA6998F
	7DB0ADA3D2BC98918E80AC946EA06F33CED2D197703CC9944FBDC0BE7954279E
	A6A29A907E8F8B78BB823C94672F44C3C3DD00000CC549444154785EED99E572
	244B9285C38392B9901984CC0CCDCC17616616DFFF09D63D4B29D5BD633BA6DE
	AE946CCDFA941459DDFA71BEF270F7F4C862DFA8EFFAAEEFFA2EEF81ED8BCA2F
	3FA07F1902E117D61E2A0AEF9D207144B2D92ABC7E0804EFB5AA3D675A24CC2D
	69BFFC009B3F5C672E1B100073CB8870DF9BBF6A1868ADA700C656CB6F79F769
	9F18A81900C3BBBF54A0CDFF99FD15C04853A1307DB54AA5F23F6B4E782D472C
	323703783503C04A8362A95C7A8F2AFD52A265E7D58DB41EE08FAF926F8DBED3
	FDC4DCFF0D40276C3D43A32523C3D54D2FCCF94680A66C1BC6BF04707305684A
	C1FE15C0AB9C019A201E14A0E98F9C5900C65CCF0F3BE5FC01327F97DD02E075
	973D7382A4E99F78F702B0E9EF1B33009EC13E3BDD84FEB023DA5EFE005EA16D
	CC02184745FBC388B12D4448B4B59C37C0666168CC02786B760DED59F9BF7C1F
	3BDFC0B2CAC9FB967F515E3BFAE56979B9FCACBCBCECCD116073DC36660112A0
	E8D340F4C6B7FCF7A5E5524BFBC59DC240A36849D7C1AB42C1D7BEFA6600FAFC
	6C062071820F845574ECF3BFC701D823DA9202147E7B665459D5A8FE915E70F9
	77A36A949C6F06D81CECBBB700476BB29D469F0761A8FFEE74C5A5F8E0A1C767
	6DC1C74961F271B25CFE547EBCBCBC5AFECF5F1E2FB71CDC8EE5A4FCC9CB00BE
	DEBFC26E012E6C41F69EA3BA817A54108E105DB0619FA2FC196F82A5A4F47919
	2FAFF1FD0EB42CAD1DDA8FE9CBFF3F0134A57B0B20C474F32110810A0A4238DD
	C9040116269FDD99DCF76EDE33DC826F535356A7008C00DA84740252A0944F9F
	DF56538089EDCD14DFFC009A816B641168CA74F341A1BB54BE1F2242184C269D
	21023843481BD27302A8CE0DA029DF191940CB417F0F5488EEA0941F28D042A8
	9B08C0D0D95F2FDAF0C9D8EF7717D9E7FE8745F649141DB62C5E3236A2C6314A
	465FEBBF7553434D6BC4BC93380C630029D420049B0082EB1C58B0C1B69C05C0
	CB24FD2F058E726CEE3B2700BC5804AEF68B00B2FC55FEFE22C57E44002D1FFD
	9D6E1877D05E5A0365C3B0A385B4D502BE414F7476263300B4E0CB77385CEBFA
	CDDD119A85D14D1F1D5994FE2F25277B80812227D0C20952D32900503E748633
	001401F88BE4E8CE37C0E72C03D82CA4CD6FD15C227BD08172D41480722003B0
	ED990844B7119895FAD2BB73035E713380F531D59FB776615E5DF52DD052298E
	1F1501FC2E58BE65014C1654DF59C02B285A2298D0D60CFF1201250ECDDE9DFD
	5906B0697D407B2A7F7960BA9BAFE475EA2300073A09002C3896AF07FACFC23F
	F97A16401E5C990870D71B7006B03EA861F92BB4071EB5B79A32D9BFCE302D02
	00650BD2B90A82AE1DD80A7F1DC79636F0C0E61C9482549C0707E69E699AEE5D
	07900C60D3BA606C2DEC2AF40A4F41C3BA613C05185A2940A72B02BB2B61C1C6
	BCF85BA002BC9E771146208D105D2904AD52A90ABBB3BC35753BFB6C0D2E08E9
	8BC5A3D330063D966A19C3525A70EC42E1FCDF6C05B10254873B1C2C07AFC0B9
	433FF8DE01929452AC8CBEE6F4D915B700AD80910E4C1102E77AACA228C220B0
	E7AD49A11B741CD5559C0358C053A5E57EFB9E67A5F77567EF99E9AF19107A11
	0ECC2B11713E0E3926B85AC059D82BF43BFF7D380C14441FC9275D7C0EBC6D71
	9EFEABF31B27042E93AF3BFCBE9B99FE9AC45EA6FC97074F58498711808AA8D2
	F7B135B4FFF665AFE1C46FEB35E0B858B05D47F78D06DAD66B150BDED62C0EAA
	32FA9AC36F589D9DFE5EA3BF47F6005CD69ABF8B52C423F29F5856B7CC1AE6C6
	1EFE6E341A8D8D8D7AA3317C7286CB5EE3EC032E8DA1DC383B6ECBC3AF3AFCFE
	079B1D3F9BE4EF50F95111727E1A32770D22EA72832E4071DBDC3EA81F346E75
	76F6A70BAA5E37EF1C7D2B18327716E0A440C1EBC9580A828037BF9FD3B07D82
	1BA015A0B87862D65F6C905F6A975AFE19E7ECF8CE00BAD07AFA27003C0D4E6F
	00075F4EA739FD28E634758C60309936D62BB3575D5CACFEB36628EA7706F00B
	E3F20CC0A890A4451199E6D512D9F3375C4304D8055A12001C71486D6D7ED24E
	B2ACFD7206B065ADA4678F309487E62E2B71D4A380032234BBA32AD826CA65F3
	05787ED4F28B5B04107AB28DF671284EC340C6180B638DBF79148E91E0A3BCF0
	AA2FC8BFC7E60C5035DC23ED172902619BB1B52EB5F18E3A15AAE831B6F9C3A3
	73AEF9B81F034CE8B652677306F819015C8FF6C1096BC47418F27404E2005064
	ECFDA390F735477FE02AF5CF21022EFEB4B455B9BE01F44110445A043F361F89
	524569CA477180FE730778E9A600CF94BDE3BFF6B69EC1927965D664EA4E0C9D
	47E18F41057C1EE060F184CD1FE073D5F8C31D4DC4B6C13015AC4048B5F4848D
	5624B9030188F027E36D5F2B33077F36705E568D7FB4D5B68B65F0C951880000
	1597B1AD500170A00884BF19F5ABA5B1DC602C97087C722E47D8078E1CBB2B94
	E63C14E129CD23494831E8601540F4D6BCDAD36BB900E0912A7199B17EB2D0BD
	748612061C247DF21FD16045A639C0154498194F79310700459BEF32B41776B7
	7B291CED731270EA02EE4A8C39C0231C8CCD45B6C5BDB903ECF82747067BE6D8
	974288CB6E1F7C2DF534FF01528453CC8125BC33B818A69D1C084A1A96A11FA0
	7BDFB61D450050B819EDCA8CAD9E737975654E0FDFCD1C083C4B5B36DA4F1CC7
	E63601F0E198433669BE7F7F7E28C555D54801D80F7327283B16688B46E2E9D1
	738C000AF4741388E3CDEFE65598DC3CFF68CD3911D780844198884BDBB68614
	01C480691E00AEFCD4348B613503F0F49C092616900A1A701F820504A04C5093
	319F468006A03A5B11378FA39EEA93B9029C9DB533042B7D083508B80D51E4A7
	FE7168923F7584D13580EBFA738D010D94568A60E90208E168E50C3B10718B73
	2E71FE329742CABB569001189BBC3C4F82C738D6D65202C7D21FC1D121287C81
	4DB7E755F350C43C6D08BA960178BF58732D85DDC718054A856914B4107D8822
	2E7FFAC1F276C380A3A45C619E6EDF3C11DC4182B9229CA1E07A1FB4400209ED
	452C392E3B9CC7F23C0C69561DB73300D682F912B06A960A0EE08A083DB47A1B
	FA5C49BA378A7412F5E04306806C6430EF54D8B62CC772B4B54DC1FE55F463A9
	E350C6A778273A1E51DB865106C0B27690432A28DFF18C6AD817A848C732B932
	CDC3D398127107163380ADC2DC099897A682FD127D7EEA2A5B2E8908625E64EE
	E174442E13C1E81AC038D2F327F8E38CD46389450FC4F8A5809A77C42F56E890
	48048AB196BD780D606C59F9C4A0DEB63914A033E44BE163B45AE3314F158955
	6A48B50CC05BB7BC3C6270DD0F40A95FD1251152F354F2F08A4A6153576EBE15
	CBDAC19C5B429B13816553C68B70494648009286A25ADB4B1FE66500AC950301
	D6420D2C6897F9DA622D04294288C6BCC29E5C1D8692D35D001FA16600D80E72
	21C0273E3D56E27D05915C0A2359C384DF15D3930A78CC832403602DCE722168
	F412A50122802521578D775A9E2A9E4A55A8212D66005BFA2417826D45130207
	C5F712B4FA35CB441E5053A676400039B5034AC4E94C3A8E64E5676654859011
	27512AF61811A89BAF953C3F0F82C6B042089D67CCDDAD85124B61CC795CA1F1
	44C832B5836E06C0D6AD721E04DB354BD63C7D310C1566625F72CD9FB29EB924
	214D4456D8BF0128E5D20EEAF5FA468F5574C423907B2292D51DFE74E534068E
	820BE665DFADE0B223D8DC5525829A54E41645425057E4378FC4C588BE5DAA65
	00A51C00D8E37A7D6AE647917A8B2EAB428EA7FEC18149069B563B47002268F0
	8F68A7A1F2CE658B2B540A1A0162AC043349880016F303208246A346A5B7E3AF
	FF5C13D0A75AD4BCB26A9A341FA4F3C9C2284F00D6A81F37DAA2C7764044C30E
	968202395EC3BD08398A1076E05D9E00BBF5B3E37ABDE78A8FC0151F8A5024AE
	CB2F42C5534185B1965CCF118008EA0D8956053EE47049757701FC5AF20B4B1B
	528E004450E7E46815943344FBD1B188C663B28FF1D046069EAEE40940316873
	22D02786317ADB157B6929C4E121A5E2854704C33C01A81D1C57383665EB62B5
	2F795F84106BDC8BBA29BA948834215510204F82B38DF68B1EDB0709430288A4
	4E185B091427C153E681CC13808E4CF517C71781B6402180A8319D2422CE5271
	C4584909962F413DE2540A96CD87B5AAC1B49099FD619A893BF902EC36362A16
	02701F623C95BC5BD1D79F5F512A8E468C9433C1311DDEB96C155DE365185F47
	A0B27A8595106222E62E7A7E30FC4DF43CDD167D801440268CB922ED8A50BE17
	828D27BDDDFD028042806E8CF62C1159536E3352CEA5D0D8EB2BB0C6930902B4
	5DFAF872A629DF0781DF01000B1000A33F5A09F954B1304D96BF683A407780B1
	5541809A3C0FE3E93965C47A75763F046735808576D3D2B55042782E799A8AF7
	A73354FBA0C79A3A20EB50F2F81EEDB387792F8E7F0AB44C014E31FAF72A9A4F
	CEDE42870350EEADECA2C1BD136C589CDCD3CD7F1055CF6A15CE69F31F4C8FB7
	DB9658650FA8DD5FEB4F7AEC41557DE1B2FFDFFAAEEFFAAEEFFA1FFD2C795F29
	F667B70000000049454E44AE426082
	]]>
</Picture>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_PR SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_PR>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_UI SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[

bCustom2dDetlevel = (gs_detlevel_2D_m = DET2D_CUSTOM)

dim stStairUI[128]
	stStairUI[1] = `2D-детализация`
	stStairUI[2] = `Масштаб`
	stStairUI[3] = `Тип Маркера Разрыва`
	stStairUI[4] = `Видимые Конструкции`
	stStairUI[5] = `Штриховка Фона`
	stStairUI[6] = `Перо Линии`
	stStairUI[7] = `Тип Линии`
	stStairUI[8] = `Перо Штриховки`
	stStairUI[9] = `Перо Фона Штриховки`
	stStairUI[10] = `Невидимые Конструкции`
	stStairUI[11] = `Перо Линии Всхода`
	stStairUI[12] = `Тип Линии Всхода`
	stStairUI[13] = `Конец Линии Всхода`
	stStairUI[14] = `Начало Линии Всхода`
	stStairUI[15] = `Перо Штриховки (0 - нет)`
	stStairUI[16] = `Перо Штрих. Выше (0 - нет)`
	stStairUI[17] = `Тип Шрифта`
	stStairUI[18] = `Начать с`
	stStairUI[19] = `Формат`
	stStairUI[20] = `Размер Шрифта`
	stStairUI[21] = `Специальный Текст 1`
	stStairUI[22] = `Перо Текста`
	stStairUI[23] = `Специальный Текст 2`
	stStairUI[24] = `Текст Подъема и Спуска`
	stStairUI[25] = `Текст`
	stStairUI[26] = `Тип Символа Стойки`
	stStairUI[27] = `Тип Линии Стойки`
	stStairUI[28] = `Перо Линии Стойки`
	stStairUI[29] = `Линия Невидимой Тетивы`
	stStairUI[30] = `Перо Невидимой Тетивы`
	stStairUI[31] = `2D выше Собственного Этажа`
	stStairUI[32] = `Лестница`
	stStairUI[33] = `Ограждение`
	stStairUI[34] = `Основание`
	stStairUI[35] = `Панели Ограждения`
	stStairUI[36] = `Проступь`
	stStairUI[37] = `Обвязка`
	stStairUI[38] = `Подступенок`
	stStairUI[39] = `Стойка`
	stStairUI[40] = `Поручень`
	stStairUI[41] = `Штриховка выше Линии Разрыва`
	stStairUI[42] = `Показ Линии Всхода`
	stStairUI[43] = `Стрелка к Линии Разрыва`
	stStairUI[44] = `Показ Нумерации`
	stStairUI[45] = `Текст Подступенков/Проступей`
	stStairUI[46] = `Читаемый Текст`
	stStairUI[47] = `Показ Ограждения на Плане`
	stStairUI[48] = `Показ Осей Ограждения`
	stStairUI[49] = `Показ Тетивы на Плане Этажа`
	stStairUI[50] = `Символ Зависит от Этажа`
	stStairUI[51] = `Линия Разрыва`
	stStairUI[52] = `Показ 2D ниже Линии Разрыва`
	stStairUI[53] = `Показ 2D выше Линии Разрыва`
	stStairUI[54] = `Отбрасывание Теней`
	stStairUI[55] = `Единицы Измерения Рабочей Среды Проекта`
	stStairUI[56] = `Ориентация`
	stStairUI[57] = `Ориентация Текста в Символе`
for i = 58 to 79
	stStairUI[i] = ""
next i
	stStairUI[80] = `Показ Проступей`
	stStairUI[81] = `Линия Всхода выше Линии Разрыва`
for i = 82 to 85
	stStairUI[i] = ""
next i
	stStairUI[86] = `Описание`
	stStairUI[87] = `Текст Спуска`
	stStairUI[88] = `Тип Видимой Линии`
	stStairUI[89] = `Тип Невидимой Линии`
	stStairUI[90] = `Размер Символа`
	stStairUI[91] = `Текст Подступенка`
	stStairUI[92] = `мм`
	stStairUI[93] = `п.`

	stStairUI[94] = `Перо Контура`
	stStairUI[95] = `Тип Штриховки`
	stStairUI[96] = `Перо Штриховки`
	stStairUI[97] = `Перо Фона Штриховки`
	stStairUI[98] = `Подступенок`

	stStairUI[99] = `Показ Ограждения выше Линии Разрыва`
	stStairUI[100] = `2D-символ`
	stStairUI[101] = stPostSymbolType[1]
	stStairUI[102] = stPostSymbolType[2]
	stStairUI[103] = stPostSymbolType[3]
	stStairUI[104] = stPostSymbolType[4]
	stStairUI[105] = stPostSymbolType[5]

	stStairUI[106] = stDetlevel2D[1]
	stStairUI[107] = stDetlevel2D[2]

	stStairUI[108] = stBreaklineStyle[1]
	if bSimpleZigZag then
		stStairUI[109] = stBreaklineStyle[3]
	else
		stStairUI[109] = stBreaklineStyle[2]
	endif

	stStairUI[110] = stWalkingDirUPDN[1]
	stStairUI[111] = stWalkingDirUPDN[2]
	stStairUI[112] = stWalkingDirUPDN[3]
	stStairUI[113] = stWalkingDirUPDN[4]
	stStairUI[114] = stWalkingDirUPDN[5]
	stStairUI[115] = stWalkingDirUPDN[6]

	stStairUI[116] = stTextOrientation[3]
	stStairUI[117] = stTextOrientation[2]
	stStairUI[118] = stTextOrientation[1]

	stStairUI[119] = stRiseRunText[1]
	stStairUI[120] = stRiseRunText[2]
	stStairUI[121] = stRiseRunText[3]
	stStairUI[122] = stRiseRunText[4]
	stStairUI[123] = stRiseRunText[5]
	stStairUI[124] = stRiseRunText[6]
	stStairUI[125] = stRiseRunText[7]

	stStairUI[126] = `Ограждение Справа`
	stStairUI[127] = `Ограждение Слева`
	stStairUI[128] = `Показ Тетивы`

dim stRailTypesForUI[11]
	stRailTypesForUI[ 1] = `Балюстрада`
	stRailTypesForUI[ 2] = `Параллельные Прутья`
	stRailTypesForUI[ 3] = `Простой Брусок`
	stRailTypesForUI[ 4] = `Объемная Рама с Панелью`
	stRailTypesForUI[ 5] = `Объемная Рама`
	stRailTypesForUI[ 6] = `Панель`
	stRailTypesForUI[ 7] = `Стойки с Балясинами`
	stRailTypesForUI[ 8] = `Стойки с Прутьями`
	stRailTypesForUI[ 9] = `Деревянная Балюстрада`
	stRailTypesForUI[10] = `Стойки с Брусками`
	stRailTypesForUI[11] = `Как и Правое`

dim stStairUITabNames[14]
	stStairUITabNames[1] = `Типы 2D-символа`
	stStairUITabNames[2] = `Реквизиты 2D-символа`
	stStairUITabNames[3] = `Символ Линии Всхода`
	stStairUITabNames[4] = `Подъем и Спуск, Нумерация`
	stStairUITabNames[5] = `Ограждение и Тетива в Символе`
	stStairUITabNames[6] = `Зависимость от Этажа и 2D над Собственным`
	stStairUITabNames[7] = `Покрытия`
	stStairUITabNames[8] = `Тип Ограждения - Справа`
	stStairUITabNames[9] = `Тип Ограждения - Слева`

for i = 10 to 12
	stStairUITabNames[i] = ""
next i
	stStairUITabNames[13] = `Подъем и Спуск, Описание`
	stStairUITabNames[14] = `Реквизиты Сечения`

call "ui_stairs" parameters gs_ui_current_page		= gs_ui_current_page,
! --- 2D symbol type ---
			gs_detlevel_2D_m		= gs_detlevel_2D_m,
			gs_ScaleChangeSM		= gs_ScaleChangeSM,
			iScaleChangeSM			= iScaleChangeSM,
			gs_ScaleChangeMD		= gs_ScaleChangeMD,
			iScaleChangeMD			= iScaleChangeMD,
			stScaleType				= stScaleType,
			bCustom2dDetlevel		= bCustom2dDetlevel,
			gs_SymbolType_m			= gs_SymbolType_m,
			iSymbolGroup			= iSymbolGroup,
! --- 2D symbol attributes ---
			bEnableBreakLineStyle	= 1,
			breakline_style			= breakline_style,
			gs_cont_pen				= gs_cont_pen,
			gs_DashLinePen			= gs_DashLinePen,
			solid_line				= solid_line,
			dash_line				= dash_line,
			gs_fill_type			= gs_fill_type,
			gs_fill_pen				= gs_fill_pen,
			gs_back_pen				= gs_back_pen,
			gs_FillAbove			= gs_FillAbove,
! --- Walkline ---
			bShowWalkLine				= bShowWalkLine,
			bShowWalkLineAboveBreakline	= bShowWalkLineAboveBreakline,
			gs_wLinePen					= gs_wLinePen,
			gs_wLineType1				= gs_wLineType1,
			arrow_style					= arrow_style,
			gs_ArrowFillPen				= gs_ArrowFillPen,
			gs_ArrowFillPenAbove		= gs_ArrowFillPenAbove,
			gs_StartEndStyle			= gs_StartEndStyle,
			gs_StartEndFillPen			= gs_StartEndFillPen,
! --- Text Display ---
			fontType				= fontType,
			bShowNumbering			= bShowNumbering,
			bShowRiseAndRunText		= bShowRiseAndRunText,
			nStartNumbering			= nStartNumbering,
			gs_NumTextSize			= gs_NumTextSize,
			gs_text_size_pt_num 	= gs_text_size_pt_num,
			gs_NumTextPen			= gs_NumTextPen,
			gs_RiseRunText			= gs_RiseRunText,
			iRiseRunText			= iRiseRunText,
			gs_CustomText1			= gs_CustomText1,
			gs_CustomText2			= gs_CustomText2,
			gs_customText_rise		= gs_customText_rise,
			fontsize				= fontsize,
			gs_text_size_pt			= gs_text_size_pt,
			gs_text_pen				= gs_text_pen,
			walkingDirUPDN			= walkingDirUPDN,
			bEnableCustomDownText	= 1,
			gs_CustomText_Down 		= gs_CustomText_Down,
			UPDNfontsize			= UPDNfontsize,
			gs_text_size_pt_UpDn	= gs_text_size_pt_UpDn,
			UPDNfontpen				= UPDNfontpen,
			typeTextRotation_RiseRun 	= typeTextRotation_RiseRun,
			typeTextRotation_Num 		= typeTextRotation_Num,
			typeTextRotation_UpDn 		= typeTextRotation_UpDn,
			bEnableDescription		= 1,
			gs_description			= gs_description,
			gs_desc_text_size		= gs_desc_text_size,
			gs_desc_text_size_pt	= gs_desc_text_size_pt,
			gs_desc_text_pen		= gs_desc_text_pen,
! --- Rail & Carriage 2D ---
			bShowRailOnFloorPlan	= bShowRailOnFloorPlan,
			railLineType			= railLineType,
			railPen					= railPen,
			bShowRailAxis			= bShowRailAxis,
			railAxisLineType		= railAxisLineType,
			gs_RailAxisPen			= gs_RailAxisPen,
			bSymbolic2D				= bSymbolic2D,
			postSymbolType			= postSymbolType,
			iPostSymbolType			= iPostSymbolType,
			postLineType			= postLineType,
			postPen					= postPen,
			bEnableCarriageLine		= bEnableCarriageLine,
			bShowCarriage			= bShowCarriage,
			carriageLineType		= carriageLineType,
			carriagePen				= carriagePen,
! --- Story Sensitivity ---
			bStorySensitive			= bStorySensitive,
			gs_BreaklineStUp		= gs_BreaklineStUp,
			gs_LowerPartStUp		= gs_LowerPartStUp,
			gs_UpperPartStUp		= gs_UpperPartStUp,
			gs_TreadStUp			= gs_TreadStUp,
			gs_LineTypeStUp			= gs_LineTypeStUp,
			gs_LinePenStUp			= gs_LinePenStUp,
			gs_wLineTypeStUp		= gs_wLineTypeStUp,
! --- Section Attributes ---
			bRiserCover				= bRiserCover,
			bTreadCover				= (treadThickness > 0.0001),
			penLineStringer 		= penLineStringer,
			penLineStringer_m 		= penLineStringer_m,
			typeFillStringer		= typeFillStringer,
			penFillStringer			= penFillStringer,
			penFillStringer_m		= penFillStringer_m,
			penBackFillStringer		= penBackFillStringer,
			penBackFillStringer_m	= penBackFillStringer_m,
			penLineTread			= penLineTread,
			penLineTread_m			= penLineTread_m,
			typeFillTread			= typeFillTread,
			penFillTread			= penFillTread,
			penFillTread_m			= penFillTread_m,
			penBackFillTread		= penBackFillTread,
			penBackFillTread_m		= penBackFillTread_m,
			penLineRiser			= penLineRiser,
			penLineRiser_m 			= penLineRiser_m,
			typeFillRiser			= typeFillRiser,
			penFillRiser			= penFillRiser,
			penFillRiser_m			= penFillRiser_m,
			penBackFillRiser		= penBackFillRiser,
			penBackFillRiser_m		= penBackFillRiser_m,
! --- 3D materials ---
			gs_shadow				= gs_shadow,
			matBase					= matBase,
			matTread				= matTread,
			matRiser				= matRiser,
			matPost					= matPost,
			matHandrail				= matHandrail,
			matSurface				= matSurface,
			matBar					= matBar,
! --- Rail Types ---
			bRightRail				= bRightRail,
			bLeftRail				= bLeftRail,
			leftRailType			= leftRailType,
			rightRailType			= rightRailType,
! --- String resources ---
			stStairUITabNames		= stStairUITabNames,
			stStairSymbolTypes		= stStairSymbolTypes,
			stSymbolGroup			= stSymbolGroup,
			stArrowHeadStyles		= stArrowHeadStyles,
			stStartSymbolStyles		= stStartSymbolStyles,
			stPostSymbolType		= stPostSymbolType,
			stRailPosition			= stRailPosition,
			stRailTypesForUI		= stRailTypesForUI,
			stRailTypes				= stRailTypes,
			stStairUI				= stStairUI,
! --- Stair Type ---
			iStairType				= 3		! Stair TwoLandings

end


]]>
</Script_UI>

<Comment SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Comment>

<CalledMacros SectVersion="2" SectionFlags="0" SubIdent="0">
	<Macro>
		<MName><![CDATA["Stair_RiseRun_Text"]]></MName>
		<MainGUID>E42F5F06-4225-4F32-A64C-ADCF1D4F9EDC</MainGUID>
	</Macro>
	<Macro>
		<MName><![CDATA["railSymbol2D_m"]]></MName>
		<MainGUID>C5C904E6-1706-4CD1-BC8D-6C294B5B40F7</MainGUID>
	</Macro>
	<Macro>
		<MName><![CDATA["stairRails_m"]]></MName>
		<MainGUID>4A3DDA4A-B43E-4039-B45A-463905CF42AD</MainGUID>
	</Macro>
	<Macro>
		<MName><![CDATA["ui_stairs"]]></MName>
		<MainGUID>D8D2E274-0A82-4EF4-845A-78AD6980E72F</MainGUID>
	</Macro>
	<Macro>
		<MName><![CDATA["FM_types"]]></MName>
		<MainGUID>2759D2DF-AA8E-44D1-AD1D-261581266B34</MainGUID>
	</Macro>
	<Macro>
		<MName><![CDATA["Onorm_Stair"]]></MName>
		<MainGUID>F021AF23-E4F7-4961-964D-C9BCAFB786DD</MainGUID>
	</Macro>
</CalledMacros>

<Copyright SectVersion="1" SectionFlags="0" SubIdent="0">
	<Author>GRAPHISOFT</Author>
	<License>
		<Type>CC BY-ND</Type>
		<Version>3.0</Version>
	</License>
</Copyright>

</Symbol>
