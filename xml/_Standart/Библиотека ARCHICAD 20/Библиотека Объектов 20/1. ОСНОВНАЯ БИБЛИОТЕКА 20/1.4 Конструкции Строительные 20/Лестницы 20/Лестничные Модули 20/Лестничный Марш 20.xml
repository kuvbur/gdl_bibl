<?xml version="1.0" encoding="UTF-8"?>
<Symbol IsArchivable="true" IsPlaceable="true" MainGUID="EAF3EE37-5DC8-4346-B782-F1A5CFD5261D" MigrationValue="Normal" Owner="1196638531" Signature="1196644685" Version="43">
<Ancestry SectVersion="1" SectionFlags="0" SubIdent="0" Template="false">
	<MainGUID>F938E33A-329D-4A36-BE3E-85E126820996</MainGUID>
	<MainGUID>103E8D2C-8230-42E1-9597-46F84CCE28C0</MainGUID>
	<MainGUID>784EAEA1-5041-4AA6-B6F4-EF263A891EE7</MainGUID>
	<MainGUID>57B7C584-5C0D-11D6-A0D8-036F034B6792</MainGUID>
</Ancestry>

<MigrationTable SectVersion="1" SectionFlags="0" SubIdent="0">
	<MigrationTableElement>
		<MainGUID>B6DD7EF5-8CE8-49A6-A901-28C830B7326E</MainGUID>
		<Version>19</Version>
		<Name><![CDATA[""]]></Name>
		<AutoMigration>true</AutoMigration>
	</MigrationTableElement>
</MigrationTable>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_3D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
if gs_detlevel_3D_m = 0 then END
if not(gs_shadow) then SHADOW OFF

! --- Contour Hotspots ---------------------------------------------------------

unID = 1

HOTSPOT 0,0,			0,unID,b,1+256	: unID=unID+1
HOTSPOT 0,-0.1,			0,unID,b,3		: unID=unID+1
HOTSPOT 0,flightWidth,	0,unID,b,2		: unID=unID+1

HOTSPOT a,0,			nRisers*treadHeight,unID,b,1+256	: unID=unID+1
HOTSPOT a,-0.1,			nRisers*treadHeight,unID,b,3		: unID=unID+1
HOTSPOT a,flightWidth,	nRisers*treadHeight,unID,b,2		: unID=unID+1

HOTSPOT a,flightWidth,	0,		unID,zzyzx,1+128	: unID=unID+1
HOTSPOT a,flightWidth,	-0.1,	unID,zzyzx,3		: unID=unID+1
HOTSPOT a,flightWidth,	zzyzx,	unID,zzyzx,2		: unID=unID+1

HOTSPOT a,	0,	0,		unID,zzyzx,1+128	: unID=unID+1
HOTSPOT a,	0,	-0.1,	unID,zzyzx,3		: unID=unID+1
HOTSPOT a,	0,	zzyzx,	unID,zzyzx,2		: unID=unID+1

pen gs_cont_pen
rotx 90
mulz -1

n=int(a/treadDepth)
dx=a/n
dy=zzyzx/n

alf=atn(zzyzx/a)
y=stairSlabThk/cos(alf)
x=stairSlabThk/sin(alf)

bet=(90-alf)/2


! --- base ---------------------------------------------------------------------
material matBase
SECT_FILL typeFillStringer, penBackFillStringer, penFillStringer, penLineStringer

! --- concrete ---
if stairBaseType_m = 1 | stairBaseType_m = 3 then

	if stairBaseType_m = 1 then
		covthicky_t=riserCoverThk
		for i=1 to n
			if i=n then covthicky_t=0
			put (i-1)*dx+riserCoverThk,i*dy-treadThickness,15
			put i*dx+covthicky_t,i*dy-treadThickness,15
		next i

		prism_ 4+(2*n),b,
				riserCoverThk,0,15,
				get (nsp),
				a,zzyzx-treadThickness,15,
				a,zzyzx-y,15,
				x,0,15
	endif

	IF ABS(riserCoverThk)>0.001 THEN
		FOR t=1 to n
		ADD (t-1)*dx,(t-1)*dy,0
		MATERIAL matRiser
		SECT_FILL typeFillRiser, penBackFillRiser, penFillRiser, penLineRiser

		prism_ 4,b,
			0,0,15,
			riserCoverThk,0,15,
			riserCoverThk,dy-treadThickness,15,
			0,dy-treadThickness,15
		DEL 1
		Next t
	ENDIF
endif

! --- wood ---
if stairBaseType_m = 2 then
	covthicky_t=riserCoverThk
	for i=1 to n
		if i=n then covthicky_t=0
		put (i-1)*dx+riserCoverThk,i*dy-treadThickness,15
		put i*dx+covthicky_t,i*dy-treadThickness,15
	next i

	dxx0=flightWidth/2 * (ABS(nWoodCarriages-1)<0.001)
	addz dxx0+woodCarriageOffsetRight
	prism_ 4+(2*n),woodBaseThk,
			riserCoverThk,0,15,
			use (nsp),
			a,zzyzx-treadThickness,15,
			a,zzyzx-y,15,
			x,0,15
	del 1

	IF nWoodCarriages > 1 THEN
		addz b-woodCarriageOffsetLeft-woodBaseThk
		prism_ 4+(2*n),woodBaseThk,
				0,0,15,
				get (nsp),
				a,zzyzx-treadThickness,15,
				a,zzyzx-y,15,
				x,0,15
		del 1
	ELSE
		for i=1 to nsp
			temp=get(1)
		next i
	ENDIF

	IF ABS(riserCoverThk)>0.001 THEN
		FOR t=1 to n
		ADD (t-1)*dx,(t-1)*dy,0
		MATERIAL matRiser
		SECT_FILL typeFillRiser, penBackFillRiser, penFillRiser, penLineRiser

		prism_ 4,b,
			0,0,15,
			riserCoverThk,0,15,
			riserCoverThk,dy-treadThickness,15,
			0,dy-treadThickness,15
		DEL 1
		Next t
	ENDIF

endif

! --- Treads -------------------------------------------------------------------
material matTread
SECT_FILL typeFillTread, penBackFillTread, penFillTread, penLineTread

IF treadThickness > EPS THEN
	covthicky_t=riserCoverThk
	for i=1 to n
		if i = n then covthicky_t=0
		put (i-1)*dx-nosing,i*dy-treadThickness,15
		put i*dx+covthicky_t,i*dy-treadThickness,15
		put i*dx+covthicky_t,i*dy,15
		put (i-1)*dx-nosing,i*dy,15
	next i

	for k=1 to n
		base
		prism_ 4,b,
				get (12)

		vert 0, 0, 0 !#1
		vert 0, 0, 1 !#2
		vert 0, 1, 0 !#3
		vert -1, 0, 0 !#4
		coor 2, -1, -2,-3, -4
		body -1
	next k

ENDIF

DEL 2


! --- RAILS --------------------------------------------------------------------
material matPost

! --- Left rail ---
if rail_m = 3 | rail_m = 1 then		! Left, Both
	if bSameRails then
		leftRailType_m = rightRailType_m
		leftWireType_m = rightWireType_m
	endif

	ADD -leftRailOvhgBottom-nosing*0,flightWidth-leftRailOffset-leftRailFrameThk/2,-leftRailOvhgBottom*tan(ang)+treadHeight

	lraSimple=a+leftRailOvhgBottom+leftRailOvhgTop
	lraComplex=a-treadDepth
	additionXComplex=leftRailOvhgBottom+treadDepth/2
	additionZComplex=leftRailOvhgBottom*tan(ang)
	hrovL=treadDepth/2+leftRailOvhgBottom
	hrovR=treadDepth/2+leftRailOvhgTop
	IF leftRailType_m = 10 THEN	! Rail Post with Bars
		postNumber=max(2,(a-treadDepth)/(3*treadDepth))
	else
		postNumber=(a+leftRailOvhgBottom+leftRailOvhgTop)/(3*treadDepth)+1
	endif
	railAngle	= ang
	side = SIDE_LEFT
	gosub "callRailsForStair"

	DEL 1

	! Bottom side
	add -nosing*0, flightWidth - leftRailOffset - railFrameThk/2, 0
	HOTSPOT 0,0,treadHeight+railDist+railHeight-leftRailOvhgBottom*tan(ang),unID,leftRailOvhgBottom, 1+128		: unID=unID+1
	HOTSPOT 0.1,0,treadHeight+railDist+railHeight-leftRailOvhgBottom*tan(ang),unID,leftRailOvhgBottom, 3		: unID=unID+1
	HOTSPOT -leftRailOvhgBottom,0,treadHeight+railDist+railHeight-leftRailOvhgBottom*tan(ang),unID,leftRailOvhgBottom, 2		: unID=unID+1

	HOTSPOT -leftRailOvhgBottom,leftRailOffset,treadHeight+railDist-leftRailOvhgBottom*tan(ang),unID,leftRailOffset, 1+128		: unID=unID+1
	HOTSPOT -leftRailOvhgBottom,leftRailOffset-0.1,treadHeight+railDist-leftRailOvhgBottom*tan(ang),unID,leftRailOffset, 3		: unID=unID+1
	HOTSPOT -leftRailOvhgBottom,0,treadHeight+railDist-leftRailOvhgBottom*tan(ang),unID,leftRailOffset, 2		: unID=unID+1

	HOTSPOT -leftRailOvhgBottom,0,treadHeight-leftRailOvhgBottom*tan(ang),unID,leftRailDist, 1+128		: unID=unID+1
	HOTSPOT -leftRailOvhgBottom,0,treadHeight-0.1-leftRailOvhgBottom*tan(ang),unID,leftRailDist, 3		: unID=unID+1
	HOTSPOT -leftRailOvhgBottom,0,treadHeight+railDist-leftRailOvhgBottom*tan(ang),unID,leftRailDist, 2		: unID=unID+1

	HOTSPOT -leftRailOvhgBottom,0,treadHeight-leftRailOvhgBottom*tan(ang)+railDist,unID,leftRailHeight, 1+128		: unID=unID+1
	HOTSPOT -leftRailOvhgBottom,0,treadHeight-leftRailOvhgBottom*tan(ang)+railDist-0.1,unID,leftRailHeight, 3		: unID=unID+1
	HOTSPOT -leftRailOvhgBottom,0,treadHeight-leftRailOvhgBottom*tan(ang)+railDist+railHeight,unID,leftRailHeight, 2	: unID=unID+1

	! Top side
	HOTSPOT nRisers*treadDepth,0,(nRisers+1)*treadHeight+leftRailOvhgTop*tan(ang)+railHeight+railDist,unID,leftRailOvhgTop, 1+128			: unID=unID+1
	HOTSPOT nRisers*treadDepth-0.1,0,(nRisers+1)*treadHeight+leftRailOvhgTop*tan(ang)+railHeight+railDist,unID,leftRailOvhgTop, 3			: unID=unID+1
	HOTSPOT nRisers*treadDepth+leftRailOvhgTop,0,(nRisers+1)*treadHeight+leftRailOvhgTop*tan(ang)+railHeight+railDist,unID,leftRailOvhgTop, 2			: unID=unID+1

	HOTSPOT nRisers*treadDepth+leftRailOvhgTop,leftRailOffset,(nRisers+1)*treadHeight+railDist+leftRailOvhgTop*tan(ang),unID,leftRailOffset, 1+128		: unID=unID+1
	HOTSPOT nRisers*treadDepth+leftRailOvhgTop,leftRailOffset-0.1,(nRisers+1)*treadHeight+railDist+leftRailOvhgTop*tan(ang),unID,leftRailOffset, 3		: unID=unID+1
	HOTSPOT nRisers*treadDepth+leftRailOvhgTop,0,(nRisers+1)*treadHeight+railDist+leftRailOvhgTop*tan(ang),unID,leftRailOffset, 2		: unID=unID+1

	HOTSPOT nRisers*treadDepth+leftRailOvhgTop,0,(nRisers+1)*treadHeight+(leftRailOvhgTop)*tan(ang),unID,leftRailDist, 1+128		: unID=unID+1
	HOTSPOT nRisers*treadDepth+leftRailOvhgTop,0,(nRisers+1)*treadHeight+(leftRailOvhgTop)*tan(ang)-0.1,unID,leftRailDist, 3		: unID=unID+1
	HOTSPOT nRisers*treadDepth+leftRailOvhgTop,0,(nRisers+1)*treadHeight+(leftRailOvhgTop)*tan(ang)+railDist,unID,leftRailDist, 2		: unID=unID+1

	HOTSPOT nRisers*treadDepth+leftRailOvhgTop,0,(nRisers+1)*treadHeight+leftRailOvhgTop*tan(ang)+railDist,unID,leftRailHeight, 1+128			: unID=unID+1
	HOTSPOT nRisers*treadDepth+leftRailOvhgTop,0,(nRisers+1)*treadHeight+leftRailOvhgTop*tan(ang)+railDist-0.1,unID,leftRailHeight, 3			: unID=unID+1
	HOTSPOT nRisers*treadDepth+leftRailOvhgTop,0,(nRisers+1)*treadHeight+leftRailOvhgTop*tan(ang)+railDist+railHeight,unID,leftRailHeight, 2			: unID=unID+1
	del 1
ENDIF

! --- Right rail ---
if rail_m = 2 | rail_m = 1 then		! Right, Both
	ADD -rightRailOvhgBottom-nosing*0,rightRailOffset+rightRailFrameThk/2,-rightRailOvhgBottom*tan(ang)+treadHeight

	lraSimple=a+rightRailOvhgBottom+rightRailOvhgTop
	lraComplex=a-treadDepth
	additionXComplex=rightRailOvhgBottom+treadDepth/2
	additionZComplex=rightRailOvhgBottom*tan(ang)
	hrovL=treadDepth/2+rightRailOvhgBottom
	hrovR=treadDepth/2+rightRailOvhgTop
	IF rightRailType_m = 10 THEN	! Rail Post with Bars
		postNumber=max(2,(a-treadDepth)/(3*treadDepth))
	else
		postNumber=(a+rightRailOvhgBottom+rightRailOvhgTop)/(3*treadDepth)+1
	endif
	railAngle	= ang
	side = SIDE_RIGHT
	gosub "callRailsForStair"

	DEL 1

	! Bottom side
	add -nosing*0, rightRailOffset + railFrameThk/2, 0
	HOTSPOT 0,0,treadHeight+railDist+railHeight-rightRailOvhgBottom*tan(ang),unID,rightRailOvhgBottom, 1+128		: unID=unID+1
	HOTSPOT -0.1,0,treadHeight+railDist+railHeight-rightRailOvhgBottom*tan(ang),unID,rightRailOvhgBottom, 3		: unID=unID+1
	HOTSPOT -rightRailOvhgBottom,0,treadHeight+railDist+railHeight-rightRailOvhgBottom*tan(ang),unID,rightRailOvhgBottom, 2		: unID=unID+1

	HOTSPOT -rightRailOvhgBottom,-rightRailOffset,treadHeight+leftRailDist-rightRailOvhgBottom*tan(ang),unID,rightRailOffset, 1+128		: unID=unID+1
	HOTSPOT -rightRailOvhgBottom,-rightRailOffset+0.1,treadHeight+leftRailDist-rightRailOvhgBottom*tan(ang),unID,rightRailOffset, 3		: unID=unID+1
	HOTSPOT -rightRailOvhgBottom,0,treadHeight+leftRailDist-rightRailOvhgBottom*tan(ang),unID,rightRailOffset, 2		: unID=unID+1

	HOTSPOT -rightRailOvhgBottom,0,treadHeight-rightRailOvhgBottom*tan(ang),unID,rightRailDist, 1+128		: unID=unID+1
	HOTSPOT -rightRailOvhgBottom,0,treadHeight-0.1-rightRailOvhgBottom*tan(ang),unID,rightRailDist, 3		: unID=unID+1
	HOTSPOT -rightRailOvhgBottom,0,treadHeight+leftRailDist-rightRailOvhgBottom*tan(ang),unID,rightRailDist, 2		: unID=unID+1

	HOTSPOT -rightRailOvhgBottom,0,treadHeight-rightRailOvhgBottom*tan(ang)+railDist,unID,rightRailHeight, 1+128		: unID=unID+1
	HOTSPOT -rightRailOvhgBottom,0,treadHeight-rightRailOvhgBottom*tan(ang)+railDist-0.1,unID,rightRailHeight, 3		: unID=unID+1
	HOTSPOT -rightRailOvhgBottom,0,treadHeight-rightRailOvhgBottom*tan(ang)+railDist+railHeight,unID,rightRailHeight, 2	: unID=unID+1

	! Top side
	HOTSPOT nRisers*treadDepth,0,(nRisers+1)*treadHeight+rightRailOvhgTop*tan(ang)+railDist+railHeight,unID,rightRailOvhgTop, 1+128			: unID=unID+1
	HOTSPOT nRisers*treadDepth+0.1,0,(nRisers+1)*treadHeight+rightRailOvhgTop*tan(ang)+railDist+railHeight,unID,rightRailOvhgTop, 3			: unID=unID+1
	HOTSPOT nRisers*treadDepth+rightRailOvhgTop,0,(nRisers+1)*treadHeight+rightRailOvhgTop*tan(ang)+railDist+railHeight,unID,rightRailOvhgTop, 2			: unID=unID+1

	HOTSPOT nRisers*treadDepth+rightRailOvhgTop,-rightRailOffset,(nRisers+1)*treadHeight+railDist+rightRailOvhgTop*tan(ang),unID,rightRailOffset, 1+128		: unID=unID+1
	HOTSPOT nRisers*treadDepth+rightRailOvhgTop,-rightRailOffset+0.1,(nRisers+1)*treadHeight+railDist+rightRailOvhgTop*tan(ang),unID,rightRailOffset, 3		: unID=unID+1
	HOTSPOT nRisers*treadDepth+rightRailOvhgTop,0,(nRisers+1)*treadHeight+railDist+rightRailOvhgTop*tan(ang),unID,rightRailOffset, 2		: unID=unID+1

	HOTSPOT nRisers*treadDepth+rightRailOvhgTop,0,(nRisers+1)*treadHeight+(rightRailOvhgTop)*tan(ang),unID,rightRailDist, 1+128		: unID=unID+1
	HOTSPOT nRisers*treadDepth+rightRailOvhgTop,0,(nRisers+1)*treadHeight+(rightRailOvhgTop)*tan(ang)-0.1,unID,rightRailDist, 3		: unID=unID+1
	HOTSPOT nRisers*treadDepth+rightRailOvhgTop,0,(nRisers+1)*treadHeight+(rightRailOvhgTop)*tan(ang)+railDist,unID,rightRailDist, 2		: unID=unID+1

	HOTSPOT nRisers*treadDepth+rightRailOvhgTop,0,(nRisers+1)*treadHeight+rightRailOvhgTop*tan(ang)+railDist,unID,rightRailHeight, 1+128			: unID=unID+1
	HOTSPOT nRisers*treadDepth+rightRailOvhgTop,0,(nRisers+1)*treadHeight+rightRailOvhgTop*tan(ang)+railDist-0.1,unID,rightRailHeight, 3			: unID=unID+1
	HOTSPOT nRisers*treadDepth+rightRailOvhgTop,0,(nRisers+1)*treadHeight+rightRailOvhgTop*tan(ang)+railDist+railHeight,unID,rightRailHeight, 2			: unID=unID+1
	del 1
ENDIF





! ==============================================================================
! top below floor level - currently unused
! ==============================================================================


IF topTreadLevel_m = 2 THEN		! Top Tread below Floor Level

	n=int(a/treadDepth)
	dx=a/n
	dy=zzyzx/n

	alf=atn(zzyzx/a)
	y=stairSlabThk/cos(alf)
	x=stairSlabThk/sin(alf)

	bet=(90-alf)/2

	n=n-1

	! --- base ---------------------------------------------------------------------
	material bmat
	SECT_FILL typeFillStringer, penBackFillStringer, penFillStringer, penLineStringer

	! --- concrete ---
	if stairBaseType_m = 1 then		! Concrete

		for i=1 to n
			put (i-1)*dx,i*dy-treadThickness,15
			put i*dx,i*dy-treadThickness,15
		next i

		prism_ 4+(2*n),b,
				0,0,15,
				get (nsp),
				a-dx,zzyzx-treadThickness-dy,15,
				a-dx,zzyzx-y-dy,15,
				x,0,15
	endif

	! --- wood ---
	if stairBaseType_m = 2 then		! Wood

		for i=1 to n
			put (i-1)*dx,i*dy-treadThickness,15
			put i*dx,i*dy-treadThickness,15
		next i

		addz 0.15
		prism_ 4+(2*n),woodBaseThk,
				0,0,15,
				use (nsp),
				a,zzyzx-treadThickness,15,
				a,zzyzx-y,15,
				x,0,15
		del 1

		addz b-0.2
		prism_ 4+(2*n),woodBaseThk,
				0,0,15,
				get (nsp),
				a,zzyzx-treadThickness,15,
				a,zzyzx-y,15,
				x,0,15
		del 1
	endif

	! --- Treads -------------------------------------------------------------------
	material matTread
	SECT_FILL typeFillTread, penBackFillTread, penFillTread, penLineTread

	for i=1 to n
		put (i-1)*dx-nosing,i*dy-treadThickness,15
		put i*dx,i*dy-treadThickness,15
		put i*dx,i*dy,15
		put (i-1)*dx-nosing,i*dy,15
	next i

	for k=1 to n
		base
		prism_ 4,b,
				get (12)

		vert 0, 0, 0 !#1
		vert 0, 0, 1 !#2
		vert 0, 1, 0 !#3
		vert -1, 0, 0 !#4
		coor 2, -1, -2,-3, -4
		body -1
	next k


	! --- RAILS --------------------------------------------------------------------
	material matPost

	! --- Right rail ---
	if rail_m = 2 | rail_m = 1 then		! Right, Both
		bLeftSide = 0
		railBarDepth = rightRailBarDepth
		railBarThk = rightRailBarThk
		railWireDepth = rightRailWireDepth
		railWireThk = rightRailWireThk
		RailWireDiam = rightRailWireDiam
		gosub "one_rail_simple"
	endif
	! --- Left rail ---
	if rail_m = 3 | rail_m = 1 then		! Left, Both
		addz b-0.09
		bLeftSide = 1
		railBarDepth = leftRailBarDepth
		railBarThk = leftRailBarThk
		railWireDepth = leftRailWireDepth
		railWireThk = leftRailWireThk
		RailWireDiam = leftRailWireDiam
		gosub "one_rail_simple"
		del 1
	endif

ENDIF

end

! ==============================================================================
"callRailsForStair":
! ------------------------------------------------------------------------------
!	lraSimple
!	lraComplex
!	additionXComplex
!	additionZComplex
!	hrovL: rail overhang start
!	hrovR: rail overhang end
!	postNumber:   number of posts
!	side: SIDE_LEFT or SIDE_RIGHT
! ==============================================================================
	ani = railAngle
	additionXComplex = additionXComplex
	additionZComplex = additionZComplex
	if side = SIDE_LEFT then
		dsComplex = leftRailDist+treadDepth/2*tan(ang)
	else
		dsComplex = rightRailDist+treadDepth/2*tan(ang)
	endif

	gosub "callRails"
return


! ==============================================================================
"callRails":
! ------------------------------------------------------------------------------
!	ani
!	additionXComplex
!	additionZComplex
!	dsComplex
!  ------------------
!	side: SIDE_LEFT or SIDE_RIGHT
!	lraSimple
!	lraComplex
!	hrovL: rail overhang start
!	hrovR: rail overhang end
!	postNumber:   number of posts
! ==============================================================================
	if side = SIDE_LEFT then
		railBarDepth		= leftRailBarDepth
		railBarDiam			= railBarDepth
		railHeight			= leftRailHeight
		railBarFillThk		= leftRailBarThk
		railFrameThk		= leftRailFrameThk
		railDist			= leftRailDist
		railType_m			= leftRailType_m
		railPostSize		= leftRailPostSize
		barNumber			= nBarsLeftRail
		railWireType		= leftWireType_m
		if leftRailType_m = RAIL_WIRED then
			railBarThk		= leftRailWireThk
			railBarDepth	= leftRailWireDepth
			railBarDiam		= leftRailWireDiam
		endif
	else
		railBarDepth		= rightRailBarDepth
		railBarDiam			= railBarDepth
		railHeight			= rightRailHeight
		railBarFillThk		= rightRailBarThk
		railFrameThk		= rightRailFrameThk
		railDist			= rightRailDist
		railType_m			= rightRailType_m
		railPostSize		= rightRailPostSize
		barNumber			= nBarsRightRail
		railWireType		= rightWireType_m
		if rightRailType_m = RAIL_WIRED then
			railBarThk		= rightRailWireThk
			railBarDepth	= rightRailWireDepth
			railBarDiam		= rightRailWireDiam
		endif
	endif

	call "stairRails_m" parameters	railType_m				= railType_m,
									iStairType				= 1,
									bEnableWired02Rail		= 0,
									bEnableNonVerticalRail	= 0,
									additionXComplex		= additionXComplex,
									additionZComplex		= additionZComplex,
									ptyp_m					= 1,
									ani						= ani,
									ab						= 0,
									rb						= 0,
									rom_m					= 1,
									rmm_m					= 1,
									lraSimple				= lraSimple,
									lraComplex				= lraComplex,
									railHeight				= railHeight,
									railHeightComplex		= dsComplex,
									railDist				= railDist,
									gs_detlevel_3D_m		= gs_detlevel_3D_m,
									gs_cont_pen				= gs_cont_pen,
									res						= res,
									rescs					= rescs,
									gs_shadow				= gs_shadow,

									railFrameThk			= railFrameThk,
									railBarDepth			= railBarDepth,
									railBarFillThk			= railBarFillThk,
									railBarDiam				= railBarDiam,
									balusterDist			= treadDepth,
									railFrameMat			= matBar,
									railBaluFillMat			= matSurface,
									barNumber				= barNumber,
									hrovL					= hrovL,
									hrovR					= hrovR,
									railHandrailMat			= matHandrail,
									iBalusterStyle			= railWireType,
									railPostDiam			= railPostSize,
									railPostWidth			= railPostSize,
									railPostThk				= railFrameThk,
									postNumber				= postNumber,
									railPostMat				= matPost

return

! ==============================================================================
! one side of the railing with simple representation
!	bLeftSide =
!	railBarDepth =
!	railBarThk =
! ==============================================================================
"one_rail_simple":
	material matSurface
	if rightRailType_m = 6 then
		addz 0.03
		poly_ 6,
				dx/2,dy+0.05+dy/2,1,
				dx/2,dy+1,1,
				a-dx/2,zzyzx+1,1,
				a,zzyzx+1,1,
				a,zzyzx+0.05+dy/2,1,
				a-dx/2,zzyzx+0.05+dy/2,1
		del 1
	endif

	material matHandrail
	if rightRailType_m = 5 then
		addz 0.01
		prism_ 14,0.05,
				dx/2,dy+0.05+dy/2,15,
				dx/2,dy+1,15,
				a-dx/2,zzyzx+1,15,
				a,zzyzx+1,15,
				a,zzyzx+0.05+dy/2,15,
				a-dx/2,zzyzx+0.05+dy/2,15,
				dx/2,dy+0.05+dy/2,-1,

				dx/2+0.03,dy+0.05+dy/2+0.03/tan(bet),15,
				dx/2+0.03,dy+1-0.03*tan(bet),15,
				a-dx/2+0.03*tan(alf/2),zzyzx+0.97,15,
				a-0.03,zzyzx+0.97,15,
				a-0.03,zzyzx+0.08+dy/2,15,
				a-dx/2-tan(alf/2)*0.03,zzyzx+0.08+dy/2,15,
				dx/2+0.03,dy+0.05+dy/2+0.03/tan(bet),-1
		del 1
	endif

	if rightRailType_m = 6 then
		addz 0.01
		prism_ 14,0.05,
				dx/2,dy+0.05+dy/2,15,
				dx/2,dy+1,15,
				a-dx/2,zzyzx+1,15,
				a,zzyzx+1,15,
				a,zzyzx+0.05+dy/2,15,
				a-dx/2,zzyzx+0.05+dy/2,15,
				dx/2,dy+0.05+dy/2,-1,

				dx/2+0.03,dy+0.05+dy/2+0.03/tan(bet),15,
				dx/2+0.03,dy+1-0.03*tan(bet),15,
				a-dx/2+0.03*tan(alf/2),zzyzx+0.97,15,
				a-0.03,zzyzx+0.97,15,
				a-0.03,zzyzx+0.08+dy/2,15,
				a-dx/2-tan(alf/2)*0.03,zzyzx+0.08+dy/2,15,
				dx/2+0.03,dy+0.05+dy/2+0.03/tan(bet),-1

		addz 0.025

		material matSurface
		poly_ 6,
				dx/2+0.03,dy+0.05+dy/2+0.03/tan(bet),1,
				dx/2+0.03,dy+1-0.03*tan(bet),1,
				a-dx/2+0.03*tan(alf/2),zzyzx+0.97,1,
				a-0.03,zzyzx+0.97,1,
				a-0.03,zzyzx+0.08+dy/2,1,
				a-dx/2-tan(alf/2)*0.03,zzyzx+0.08+dy/2,1

		del 2
	endif

	if rightRailType_m = 1 then
		addz 0.02
		MATERIAL matHandrail
		prism_ 14,0.05,
				dx/2,dy+0.05+dy/2,15,
				dx/2,dy+1,15,
				a-dx/2,zzyzx+1,15,
				a,zzyzx+1,15,
				a,zzyzx+0.05+dy/2,15,
				a-dx/2,zzyzx+0.05+dy/2,15,
				dx/2,dy+0.05+dy/2,-1,

				dx/2+0.03,dy+0.05+dy/2+0.03/tan(bet),15,
				dx/2+0.03,dy+1-0.03/tan((90+alf)/2),15,
				a-dx/2+0.03*tan(alf/2),zzyzx+0.97,15,
				a-0.03,zzyzx+0.97,15,
				a-0.03,zzyzx+0.08+dy/2,15,
				a-dx/2-tan(alf/2)*0.03,zzyzx+0.08+dy/2,15,
				dx/2+0.03,dy+0.05+dy/2+0.03/tan(bet),-1

		add dx/2,dy/2,0.01

		for u=1 to (n)*2-1
			add dx/2,dy/2,0
			MATERIAL matBar
			prism_ 4,0.03,
					-0.015,dy+0.05-0.015*tan(alf)+0.03/cos(alf),15,
					-0.015,dy/2+1-0.03/cos(alf)-0.015*tan(alf),15,
					0.015,dy/2+1-0.03/cos(alf)+0.015*tan(alf),15,
					0.015,dy+0.05+0.015*tan(alf)+0.03/cos(alf),15
		next u
		del (n)*2
		del 1

		MATERIAL matPost
		prism_ 4,0.09,
				a-dx/2-tan(alf/2)*0.03,zzyzx,15,
				a-dx/2-tan(alf/2)*0.03+0.09,zzyzx,15,
				a-dx/2-0.03*tan(alf/2)+0.09,zzyzx+1.1,15,
				a-dx/2-0.03*tan(alf/2),zzyzx+1.1,15

		prism_ 4,0.09,
				dx/2,dy,15,
				dx/2-0.09,dy,15,
				dx/2-0.09,dy+1.1,15,
				dx/2,dy+1.1,15

	endif

	if rightRailType_m = 2 then
		if bLeftSide then addz 0.05-railBarDepth
		addz 0.02
		barDistance = (0.95-railBarThk-dy/2)/(nBarsRightRail-1)
		for u=1 to nBarsRightRail
			MATERIAL matBar
			prism_ 6,railBarDepth,
					dx/2,dy+0.05+dy/2,15,
					dx/2,dy+0.05+dy/2+bth,15,
					a-dx/2,zzyzx+0.05+dy/2+bth,15,
					a-railBarDepth-0.04,zzyzx+0.05+dy/2+bth,15,
					a-railBarDepth-0.04,zzyzx+dy/2+0.05,15,
					a-dx/2,zzyzx+dy/2+0.05,15
			addy barDistance
		next u

		del nBarsRightRail+1

		MATERIAL matPost
		prism_ 4,railBarDepth+0.04,
				a,zzyzx,15,
				a-railBarDepth-0.04,zzyzx,15,
				a-railBarDepth-0.04,zzyzx+1.1,15,
				a,zzyzx+1.1,15

		prism_ 4,railBarDepth+0.04,
				dx/2,dy,15,
				dx/2-railBarDepth-0.04,dy,15,
				dx/2-railBarDepth-0.04,dy+1.1,15,
				dx/2,dy+1.1,15

		if bLeftSide then del 1
	endif

return
]]>
</Script_3D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_2D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[

! ---------- Hotspots ----------[
	unID = 1
	FlightUNID		= 2
	RailUNID		= 100
	StartSymbUNID	= 200
	ArrowUNID		= 300
	RiseRunUNID		= 400
	UpDownUNID		= 500
	NumUnID			= 600

hotspot2 0,0, unID: unID=unID+1

! ---------- Hotspots ----------]

dim drawPart[3] ! 1 - lower,  2 - upper,  3 - full
dim drawDashed[3] ! 1 - lower,  2 - upper,  3 - full
dim drawSteps[3] ! 1 - lower,  2 - upper,  3 - full
dim drawDetails[3] ! 1 - lower,  2 - upper,  3 - full


drawPart[1] = 0		! Lower
drawPart[2] = 0		! Upper
drawPart[3] = 0		! Full
drawDashed[1] = 0	! Lower
drawDashed[2] = 0	! Upper
drawDashed[3] = 0	! Full
drawSteps[1] = 0	! Lower
drawSteps[2] = 0	! Upper
drawSteps[3] = 0	! Full
drawDetails[1] = 0	! Lower
drawDetails[2] = 0	! Upper
drawDetails[3] = 0	! Full
drawNum = 0


abovestory = 0
belowstory = 0
if bStorySensitive then
	if GLOB_CH_STORY_DIST > EPS  then
		abovestory = 1
	else
		if GLOB_CH_STORY_DIST < -EPS  then
			belowstory = 1
		endif
	endif
endif

bCarriageLineExist		= bShowCarriage and bEnableCarriageLine and (GLOB_SCALE <= iShowCarriageUpTo | iShowCarriageUpTo = 1)

! ---------- Settings of 2D Symbol Type ----------
_iSymbolType = 1
_bShowRailIn2D = 1
if gs_detlevel_2D_m = DET2D_SCALESENSITIVE then
	if GLOB_SCALE <= _iScaleMD then									!! Detailed Scale
		_iSymbolType = iEnabledSymbolTypes[iSymbolGroup][3]
	else
		if GLOB_SCALE > _iScaleMD & GLOB_SCALE <= _iScaleSM then	!! Middle Scale
			_iSymbolType = iEnabledSymbolTypes[iSymbolGroup][2]
		else														!! Simple Scale
			_iSymbolType = iEnabledSymbolTypes[iSymbolGroup][1]
			_bShowRailIn2D = 0
		endif
	endif
else
	_iSymbolType = gs_SymbolType_m
endif

IF _iSymbolType = 1 THEN		! Type 1
	drawPart[3]	= 1		! Full
	drawDashed[3] = 1	! Full
ENDIF

IF _iSymbolType = 2 THEN		! Type 2
	drawPart[3]	= 1		! Full
ENDIF

IF _iSymbolType = 3 THEN		! Type 3
	drawPart[1]	= 1		! Lower
ENDIF

IF _iSymbolType = 4 THEN		! Type 4
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
	drawDashed[2] = 1	! Upper
ENDIF

IF _iSymbolType = 5 THEN		! Type 5
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
ENDIF

IF _iSymbolType = 6 THEN		! Type 6
	drawPart[3]	= 1		! Full
	drawDashed[3] = 1	! Full
	drawSteps[3] = 1	! Full
	drawNum = bShowNumbering
ENDIF

IF _iSymbolType = 7 THEN		! Type 7
	drawPart[3]	= 1		! Full
	drawSteps[3] = 1	! Full
	drawNum = bShowNumbering
ENDIF

IF _iSymbolType = 8 THEN		! Type 8
	drawPart[1]	= 1		! Lower
	drawSteps[1] = 1	! Lower
ENDIF

IF _iSymbolType = 9 THEN		! Type 9
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
	drawDashed[2] = 1	! Upper
	drawSteps[1] = 1	! Lower
ENDIF

IF _iSymbolType = 10 THEN		! Type 10
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
	drawSteps[1] = 1	! Lower
ENDIF

IF _iSymbolType = 11 THEN		! Type 11
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
	drawDashed[2] = 1	! Upper
	drawSteps[1] = 1	! Lower
	drawSteps[2] = 1	! Upper
	drawNum = bShowNumbering
ENDIF

IF _iSymbolType = 12 THEN		! Type 12
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
	drawSteps[1] = 1	! Lower
	drawSteps[2] = 1	! Upper
	drawNum = bShowNumbering
ENDIF

IF _iSymbolType = 13 THEN		! Type 13
	drawPart[3]	= 1		! Full
	drawDashed[3] = 1	! Full
	drawSteps[3] = 1	! Full
	drawDetails[3] = 1	! Full

	drawNum = bShowNumbering
ENDIF

IF _iSymbolType = 14 THEN		! Type 14
	drawPart[3]	= 1		! Full
	drawSteps[3] = 1	! Full
	drawDetails[3] = 1	! Full

	drawNum = bShowNumbering
ENDIF

IF _iSymbolType = 15 THEN		! Type 15
	drawPart[1]	= 1		! Lower
	drawSteps[1] = 1	! Lower
	drawDetails[1] = 1	! Lower
	drawSteps[2] = 1	! Upper
!	drawDetails[2] = 1	! Upper ! COMP
ENDIF

IF _iSymbolType = 16 THEN		! Type 16
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
	drawDashed[2] = 1	! Upper
	drawSteps[1] = 1	! Lower
	drawDetails[1] = 1	! Lower
ENDIF

IF _iSymbolType = 17 THEN		! Type 17
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
	drawSteps[1] = 1	! Lower
	drawDetails[1] = 1	! Lower
ENDIF

IF _iSymbolType = 18 THEN		! Type 18
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
	drawDashed[2] = 1	! Upper
	drawSteps[1] = 1	! Lower
	drawSteps[2] = 1	! Upper
	drawDetails[1] = 1	! Lower
	drawDetails[2] = 1	! Upper
	drawNum = bShowNumbering
ENDIF

IF _iSymbolType = 19 THEN		! Type 19
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
	drawDashed[2] = 1	! Upper
	drawSteps[1] = 1	! Lower
	drawSteps[2] = 1	! Upper
	drawDetails[1] = 1	! Lower
	drawNum = bShowNumbering
ENDIF

IF _iSymbolType = 20 THEN		! Type 20
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
	drawSteps[1] = 1	! Lower
	drawSteps[2] = 1	! Upper
	drawDetails[1] = 1	! Lower
	drawDetails[2] = 1	! Upper
	drawNum = bShowNumbering
ENDIF

! ---------- Stories below the home story ---------- [

bBackgroundFill = 1
if belowstory then
	drawPart[3]		= 1
	drawDashed[3]	= 1

	drawSteps[1] = 0
	drawSteps[2] = 0
	drawSteps[3] = 0

	drawDetails[1] = 0
	drawDetails[2] = 0
	drawDetails[3] = 0

	drawNum = 0
endif

! ---------- Stories below the home story ---------- ]

! ---------- Stories above the home story ---------- [
if abovestory then
	drawPart[1] = 0
	drawPart[2] = 0
	drawPart[3] = 0

	if gs_TreadStUp then
		drawSteps[1] = 1
		drawSteps[2] = 1
		drawSteps[3] = 1

		if drawDetails[1] | drawDetails[3] then
			drawDetails[1] = 1
			drawDetails[2] = 1
			drawDetails[3] = 1
		endif

	else
		drawSteps[1] = 0
		drawSteps[2] = 0
		drawSteps[3] = 0

		drawDetails[1] = 0
		drawDetails[2] = 0
		drawDetails[3] = 0
	endif

	if gs_BreaklineStUp = 0 then
		drawPart[3] = 1
	else
		if gs_LowerPartStUp then
			drawPart[1] = 1
		endif
		if gs_UpperPartStUp then
			drawPart[2] = 1
		endif
	endif

	if gs_numaStUp & gs_TreadStUp & ((drawPart[1] & drawPart[2]) | drawPart[3]) then
		drawNum = 1
	else
		drawNum = 0
	endif
endif

ROT2 -90
ADD2 -flightWidth,0

NumStline = INT (gs_BreakHeight/treadHeight)
NumStline = max(1,NumStline)

DRAWINDEX 10
PEN gs_cont_pen
FILL gs_fill_type

if belowStory then bBackgroundFill	= 0
! ==========================================================================
! CONTOUR LINES
! ==========================================================================


if not(drawPart[3]) then
	drawBreakLine = 1
else
	drawBreakLine = 0
endif

IF not(drawBreakLine) THEN
	if aboveStory then
		PEN gs_LinePenStUp
		LINE_TYPE gs_LineTypeStUp
	else
		if drawDashed[3] then
			PEN gs_DashLinePen
			LINE_TYPE dash_line
		else
			PEN gs_cont_pen
			LINE_TYPE solid_line
		endif
	endif

	xNosing = nosing * (drawDetails[3])

	POLY2_b 4,1+2*bBackgroundFill+4+64, gs_fill_pen, gs_back_pen,
		0, -xNosing, 1,
		flightWidth, -xNosing, 1,
		flightWidth, (nRisers)*treadDepth, 1,
		0, (nRisers)*treadDepth, 1

	HOTLINE2 0, -xNosing, flightWidth, -xNosing
	HOTLINE2 flightWidth, -xNosing,flightWidth, (nRisers)*treadDepth
	HOTLINE2 flightWidth, (nRisers)*treadDepth,0, (nRisers)*treadDepth
	HOTLINE2 0, (nRisers)*treadDepth,0, -xNosing

ELSE

! with Break Line
! ---------------------------------------------------------------------------------------------
	if breakline_style_m = 2 then		! Zig Zag
		angle_breakline=ATN(2*treadDepth/flightWidth)
		ZigZag1Y=(2/5*flightWidth)*tan(angle_breakline)
		ZigZag2Y=(7/20*flightWidth)*tan(angle_breakline)
	else
		if breakline_style_m = 3 then		! Zig Zag CHI
			angle_breakline=ATN(2*treadDepth/flightWidth)
			ZigZag1Y=(2/5*flightWidth)*tan(angle_breakline)
			ZigZag2Y=(2/5*flightWidth)*tan(angle_breakline)
		endif
	endif

	IF drawPart[1] THEN
		if aboveStory then
			PEN gs_LinePenStUp
			LINE_TYPE gs_LineTypeStUp
		else
			if drawDashed[1] then
				PEN gs_DashLinePen
				LINE_TYPE dash_line
			else
				PEN gs_cont_pen
				LINE_TYPE solid_line
			endif
		endif

		xNosing = nosing * drawDetails[1]

		if breakline_style_m = 2 then
			! ---------- Zig Zag ----------
				POLY2_b 8, 1+2+4+64, gs_fill_pen, gs_back_pen,
				0, -xNosing, 1,
				flightWidth, -xNosing, 1,
				flightWidth, (NumStline+1)*treadDepth-xNosing, 1,
				6/10*flightWidth,(NumStline+1)*treadDepth-xNosing-ZigZag1Y, 1,
				6/10*flightWidth,(NumStline-1)*treadDepth-xNosing+ZigZag1Y, 1,
				4/10*flightWidth,(NumStline+1)*treadDepth-xNosing-ZigZag1Y, 1,
				4/10*flightWidth,(NumStline-1)*treadDepth-xNosing+ZigZag1Y, 1,
						0, (NumStline-1)*treadDepth-xNosing, 1
		else
			if breakline_style_m = 3 then
				! ---------- Zig Zag CHI ----------
				POLY2_b 9, 1+2+64, gs_fill_pen, gs_back_pen,
							0, -xNosing, 1,
							flightWidth, -xNosing, 1,
							flightWidth, (NumStline+1)*treadDepth-xNosing, 1,
							6/10*flightWidth,(NumStline+1)*treadDepth-xNosing-ZigZag1Y, 1,
							6/10*flightWidth,(NumStline-1)*treadDepth-xNosing+ZigZag1Y, 1,
							4/10*flightWidth,(NumStline+1)*treadDepth-xNosing-ZigZag1Y+breakLineWidth, 1,
							4/10*flightWidth,(NumStline-1)*treadDepth-xNosing+ZigZag1Y, 1,
							0, (NumStline-1)*treadDepth-xNosing, 1,
							0, -xNosing, -1
			else
				! ---------- Straight ----------
					POLY2_b 4, 1+2+4+64, gs_fill_pen, gs_back_pen,
							0, -xNosing, 1,
							flightWidth, -xNosing, 1,
							flightWidth, (NumStline+1)*treadDepth-xNosing, 1,
							0, (NumStline-1)*treadDepth-xNosing, 1
			endif
		endif


			HOTSPOT2 flightWidth/2,(NumStline)*treadDepth-xNosing, FlightUNID: FlightUNID=FlightUNID+1
			HOTSPOT2 0,			(NumStline-1)*treadDepth-xNosing, FlightUNID: FlightUNID=FlightUNID+1
			HOTSPOT2 flightWidth,	(NumStline+1)*treadDepth-xNosing, FlightUNID: FlightUNID=FlightUNID+1

			HOTLINE2 0, -xNosing, flightWidth, -xNosing
			HOTLINE2 flightWidth, -xNosing, flightWidth, (NumStline+1)*treadDepth-xNosing
			HOTLINE2 flightWidth, (NumStline+1)*treadDepth-xNosing,0, (NumStline-1)*treadDepth-xNosing
			HOTLINE2 0, (NumStline-1)*treadDepth-xNosing,0, -xNosing
	ENDIF

	IF drawPart[2] THEN
		if aboveStory then
			PEN gs_LinePenStUp
			LINE_TYPE gs_LineTypeStUp
		else
			if drawDashed[2] then
				PEN gs_DashLinePen
				LINE_TYPE dash_line
			else
				PEN gs_cont_pen
				LINE_TYPE solid_line
			endif
		endif

		xNosing = nosing * drawDetails[2]

		if breakline_style_m = 2  then
			! ---------- Zig Zag ----------
			POLY2_b 8, 1+2*gs_FillAbove+4+64, gs_fill_pen, gs_back_pen,
					0, (NumStline-1)*treadDepth-xNosing+breakLineWidth , 1,
					7/20*flightWidth, (NumStline-1)*treadDepth -xNosing + breakLineWidth +ZigZag2Y, 1,
					7/20*flightWidth, (NumStline-1)*treadDepth -xNosing + breakLineWidth +ZigZag2Y+2*(treadDepth-ZigZag1Y), 1,
					11/20*flightWidth, (NumStline-1)*treadDepth -xNosing+ breakLineWidth +ZigZag2Y, 1,
					11/20*flightWidth, (NumStline-1)*treadDepth -xNosing+ breakLineWidth +ZigZag2Y+2*(treadDepth-ZigZag1Y), 1,
					flightWidth, (NumStline+1)*treadDepth-xNosing+breakLineWidth , 1,
					flightWidth, (nRisers)*treadDepth, 1,
					0, (nRisers)*treadDepth, 1
		else
			if breakline_style_m = 3 then
				POLY2_b 8, 1+2*gs_FillAbove+4+64, gs_fill_pen, gs_back_pen,
					0, (NumStline-1)*treadDepth-xNosing+breakLineWidth , 1,
					4/10*flightWidth, (NumStline-1)*treadDepth -xNosing + breakLineWidth +ZigZag2Y, 1,
					4/10*flightWidth, (NumStline+1)*treadDepth-xNosing-ZigZag1Y+breakLineWidth, 1,
					6/10*flightWidth, (NumStline-1)*treadDepth-xNosing+ZigZag1Y, 1,
					6/10*flightWidth, (NumStline-1)*treadDepth -xNosing+ breakLineWidth +ZigZag2Y+2*(treadDepth-ZigZag1Y), 1,
					flightWidth, (NumStline+1)*treadDepth-xNosing+breakLineWidth , 1,
					flightWidth, (nRisers)*treadDepth, 1,
					0, (nRisers)*treadDepth, 1
			else
				POLY2_b 4, 1+2*gs_FillAbove+4+64, gs_fill_pen, gs_back_pen,
					0, (NumStline-1)*treadDepth-xNosing+breakLineWidth, 1,
					flightWidth, (NumStline+1)*treadDepth-xNosing+breakLineWidth, 1,
					flightWidth, (nRisers)*treadDepth, 1,
					0, (nRisers)*treadDepth, 1
			endif
		endif

		HOTLINE2 0, (NumStline-1)*treadDepth-xNosing+breakLineWidth,flightWidth, (NumStline+1)*treadDepth-xNosing+breakLineWidth
		HOTLINE2 flightWidth, (NumStline+1)*treadDepth-xNosing+breakLineWidth,flightWidth, (nRisers)*treadDepth
		HOTLINE2 flightWidth, (nRisers)*treadDepth,0, (nRisers)*treadDepth
		HOTLINE2 0, (nRisers)*treadDepth,0, (NumStline-1)*treadDepth-xNosing+breakLineWidth

		! BREAK LINE
			HOTSPOT2 flightWidth/2,		(NumStline)*treadDepth-xNosing,					FlightUNID, breakLineWidth, 1+128	: FlightUNID=FlightUNID+1
			HOTSPOT2 flightWidth/2,		(NumStline)*treadDepth-xNosing-1,				FlightUNID, breakLineWidth, 3		: FlightUNID=FlightUNID+1
			HOTSPOT2 flightWidth/2,		(NumStline)*treadDepth-xNosing+breakLineWidth,	FlightUNID, breakLineWidth, 2		: FlightUNID=FlightUNID+1

			HOTSPOT2 0, (NumStline-1)*treadDepth-xNosing+breakLineWidth,				FlightUNID: FlightUNID=FlightUNID+1
			HOTSPOT2 flightWidth, (NumStline+1)*treadDepth-xNosing+breakLineWidth,	FlightUNID: FlightUNID=FlightUNID+1
		endif
	endif

! ==============================================================================
! TREADS
! ==============================================================================
DRAWINDEX 20

IF not(drawBreakline) THEN
	if drawPart[3] & drawSteps[3] then
		if aboveStory then
			PEN gs_LinePenStUp
			LINE_TYPE gs_LineTypeStUp
		else
			if drawDashed[3] then
				PEN gs_DashLinePen
				LINE_TYPE dash_line
			else
				PEN gs_cont_pen
				LINE_TYPE solid_line
			endif
		endif

		FOR numTread=1 to nRisers
			LINE2 0,-xNosing, flightWidth, -xNosing
			HOTLINE2 0,-xNosing, flightWidth, -xNosing
			ADD2 0,treadDepth
		NEXT numTread
		DEL numTread-1

		IF drawDetails[3] THEN
			PEN gs_DashLinePen
			LINE_TYPE dash_line

			FOR numTread=1 to nRisers
				LINE2 0, 0, flightWidth, 0
				HOTLINE2 0, 0, flightWidth, 0
				ADD2 0,treadDepth
			NEXT numTread
			DEL numTread-1
		endif
	endif
else
	if drawPart[1] & drawSteps[1] then

		xNosing = nosing * drawDetails[1]


		FOR numTread=1 to NumStline+1
			if aboveStory then
				PEN gs_LinePenStUp
				LINE_TYPE gs_LineTypeStUp
			else
				if drawDashed[1] then
					PEN gs_DashLinePen
					LINE_TYPE dash_line
				else
					PEN gs_cont_pen
					LINE_TYPE solid_line
				endif
			endif

			StartSolid=0
			if breakline_style_m = 1 then	! Straight
				IF numTread=NumStline+1 THEN StartSolid=StartSolid+flightWidth/2
			ELSE
				IF numTread=NumStline+1 THEN StartSolid=StartSolid+flightWidth*6/10
			ENDIF

			LINE2 StartSolid,-xNosing,flightWidth,-xNosing
			HOTLINE2 StartSolid,-xNosing,flightWidth,-xNosing

			if drawDetails[1] THEN
				PEN gs_DashLinePen
				LINE_TYPE dash_line

				StartDashed=0
				if breakline_style_m = 1 then	! Straight
					IF ABS(numTread-NumStline-1)<0.001 THEN StartDashed=flightWidth/2+xNosing/tan(bet)
				ELSE
					IF distZigZag >= 4/10*flightWidth THEN
						distZigZag = 4/10*flightWidth
					ELSE
						distZigZag=(flightWidth*(treadDepth-xNosing))/(2*treadDepth)
					ENDIF
					IF numTread=NumStline+1 THEN StartDashed=max(0,leftRailOffset+leftRailFrameThk,flightWidth-distZigZag)
				ENDIF

				IF ABS(numTread-(NumStline))<0.01 THEN StartDashed=xNosing/tan(bet)

				LINE2 StartDashed,0,flightWidth,0
				HOTLINE2 StartDashed,0,flightWidth,0
			ENDIF
			ADD2 0,treadDepth
		NEXT numTread
		DEL numTread-1
	endif

	IF drawPart[2] & drawSteps[2] THEN

		xNosing = nosing * drawDetails[2]

		ADD2 0,(NumStline)*treadDepth
		FOR numTread=1 to nRisers-NumStline
			if aboveStory then
				PEN gs_LinePenStUp
				LINE_TYPE gs_LineTypeStUp
			else
				if drawDashed[2] then
					PEN gs_DashLinePen
					LINE_TYPE dash_line
				else
					PEN gs_cont_pen
					LINE_TYPE solid_line
				endif
			endif

			EndSolid=flightWidth
			IF breakline_style_m = 1 THEN
				IF numTread=1 THEN EndSolid=(treadDepth-breakLineWidth)/tan(bet)
				IF numTread=2 THEN EndSolid=(2*treadDepth-breakLineWidth)/tan(bet)
			ELSE
				if breakline_style_m = 3 then
					ZigZagCorrection = 4/10
				else
					ZigZagCorrection = 7/20
				endif
				IF numTread=1 THEN EndSolid=Min(ZigZagCorrection *flightWidth,(treadDepth-breakLineWidth)/tan(bet))
				IF numTread=2 THEN
					IF ZigZag2Y+2*(treadDepth-ZigZag1Y)<2*treadDepth-breakLineWidth THEN EndSolid=(2*treadDepth-breakLineWidth)/tan(bet)
					IF ZigZag2Y+2*(treadDepth-ZigZag1Y)>=2*treadDepth-breakLineWidth THEN EndSolid=ZigZagCorrection *flightWidth
				ENDIF
			ENDIF

			LINE2 0,-xNosing,EndSolid,-xNosing
			HOTLINE2 0,-xNosing,EndSolid,-xNosing

			IF drawDetails[2] THEN
				PEN gs_DashLinePen
				LINE_TYPE dash_line

				EndDashed=flightWidth
				if breakline_style_m = 1 then	! Straight
					IF numTread=1 THEN EndDashed=Min(flightWidth,(treadDepth-breakLineWidth+xNosing)/tan(bet))
					IF numTread=2 THEN EndDashed=Min(flightWidth,(2*treadDepth-breakLineWidth+xNosing)/tan(bet))
				ELSE
					IF distZigZag <= ZigZagCorrection *flightWidth THEN
						distZigZag = ZigZagCorrection *flightWidth
					ELSE
						distZigZag=(flightWidth*(treadDepth/2+xNosing))/(2*treadDepth)
					ENDIF

						IF numTread=1 THEN EndDashed=Min(ZigZagCorrection*flightWidth,(treadDepth-breakLineWidth+xNosing)/tan(bet))
					IF numTread=2 THEN
							IF ZigZag2Y+2*(treadDepth-ZigZag1Y)<2*treadDepth+xNosing-breakLineWidth THEN EndDashed=Min(flightWidth,(2*treadDepth+xNosing-breakLineWidth)/tan(bet))
							IF ZigZag2Y+2*(treadDepth-ZigZag1Y)>=2*treadDepth+xNosing-breakLineWidth THEN EndDashed=Min(flightWidth,ZigZagCorrection*flightWidth)
					ENDIF
				ENDIF

				LINE2 0,0,EndDashed,0
				HOTLINE2 0,0,EndDashed,0
			ENDIF

			ADD2 0,treadDepth
		NEXT numTread
		DEL numTread-1
		DEL 1
		endif
	endif

! ==============================================================================
! WALKING LINE / ARROWHEAD / START END SYMBOL
! ==========================================================================
reverseWalkline = 0
if walkingDirUPDN_m = 3 | walkingDirUPDN_m = 4 | (walkingDirUPDN_m = 6 & abovestory) then
	reverseWalkline = 1
endif

if bShowWalkLine & not(belowStory) then

	PEN gs_wLinePen
	FILL gs_ArrowFill

	for i = 1 to 3
		DRAWINDEX 40
		drawWalkLine = 1
		if not(bShowWalkLineAboveBreakline) & i = 2 then drawWalkLine = 0

		if drawPart[i] & drawWalkLine then
			xNosing = nosing * drawDetails[i]

			startLine = -xNosing
			endLine = (nRisers)*treadDepth
			penFillArrow = gs_ArrowFillPen
			if i = 1 then endLine = (NumStline)*treadDepth-xNosing
			if i = 2 then
				startLine = startLine + (NumStline)*treadDepth+breakLineWidth
				penFillArrow = gs_ArrowFillPenAbove
				if walkingDirUPDN_m = 5 then reverseWalkline = 1
			endif

			if aboveStory then
				LINE_TYPE gs_wLineTypeStUp
			else
				if (drawDashed[i]) then
					LINE_TYPE gs_wLineTypeAbove
				else
					LINE_TYPE gs_wLineType1
				endif
			endif

			IF i = 3 & walkingDirUPDN_m = 5 THEN
				! Up Down Both - UP
				endLine = startLine + (INT(nRisers/3))*treadDepth
				ADD2 flightWidth/2, endLine
				GOSUB "Arrowhead Symbol"
				DEL 1
				endLine = endLine-lengthArrowHead

				line2 flightWidth/2, startLine, flightWidth/2, endLine

				ADD2 flightWidth/2, startLine
				GOSUB "Start End Symbol"
				DEL 1

				! Up Down Both - Down
				endLine = (nRisers)*treadDepth
				startLine = startLine + endLine - (MAX(1, INT(nRisers/3)))*treadDepth
				ADD2 flightWidth/2, startLine
				MUL2 1, -1
				GOSUB "Arrowhead Symbol"
				DEL 2
				startLine = startLine+lengthArrowHead

				ADD2 flightWidth/2, endLine
				GOSUB "Start End Symbol"
				DEL 1
			else
				! Arrow Head below Break Line
				if not(reverseWalkline)	then
					ADD2 flightWidth/2, endLine
					GOSUB "Arrowhead Symbol"
					DEL 1
					endLine = endLine-lengthArrowHead

					if i <> 2 then
						ADD2 flightWidth/2, startLine
						GOSUB "Start End Symbol"
						DEL 1
					endif
				endif

				! Arrow Head on Start
				if reverseWalkline then
					ADD2 flightWidth/2, startLine
					MUL2 1, -1
					GOSUB "Arrowhead Symbol"
					DEL 2
					startLine = startLine+lengthArrowHead

					if i <> 1 then
						ADD2 flightWidth/2, endLine
						GOSUB "Start End Symbol"
						DEL 1
					endif
				endif
			endif

			! Walking Line
			if drawWalkLine then line2 flightWidth/2, startLine, flightWidth/2, endLine
		endif
	next i
ENDIF

! ==============================================================================
! Text / Up - Down Text / Numbering
! ==============================================================================

! --- Oriented View ------------------------------------------------------------
angleViewRot = 0
if bShowRiseAndRunText | walkingDirUPDN_m <> 1 | drawNum | gs_description <> "" then
	rrr = REQUEST ("View_Rotangle", "", angleViewRot)
endif
totalRotate = (SYMB_ROTANGLE + angleViewRot) MOD 360


! --- Define Font Style --------------------------------------------------------

define style "UPDN" fontType, UPDNfontsize, 5, 0		  	! UP/DN

define style "stepnum" fontType, gs_NumTextSize, 1, 0		! Numbering

define style "description" fontType, gs_desc_text_size, 4, 0	! Description

! --- Rise & Run Text -------------------------------------------------------

if bShowRiseAndRunText & bShowWalkLine & not(belowStory) then
	call "Stair_RiseRun_Text" PARAMETERS ALL	totalRotate	= totalRotate,
												iRotateType = 2,
												iRiseRunTextPosition = 1,
												RiseRunUNID	= RiseRunUNID
endif


! --- Up & Down Text ---------------------------------------------------------
iReadable = 0
if walkingDirUPDN_m <> 1 & bShowWalkLine & not(belowStory) then		! None
	DRAWINDEX 50
	PEN UPDNfontpen
	xNosing = nosing * (drawDetails[1]|drawDetails[3])

	if (walkingDirUPDN_m = 2 | walkingDirUPDN_m = 5 | (walkingDirUPDN_m = 6 & not(abovestory) & not(belowstory) )) & (drawPart[1]|drawPart[3]) then
		nTransUPDN = 0
		set style "UPDN"
		add2 flightWidth/2+DirUPDN_X,DirUPDN_Y-xNosing
		nTransUPDN = nTransUPDN + 1
		! Text Rotation - Readable / Parallel with Walking Line / Align with Symbol
		! ----------------------------------------------------------------------
		if typeTextRotation_UpDn_m = 2 then									! Readable
			if ((totalRotate > (gs_readable_angle - 90 + eps) & totalRotate < (gs_readable_angle + 180 - 90 + eps)) & SYMB_MIRRORED) | \
				((totalRotate < (gs_readable_angle - 90 + eps) | totalRotate > (gs_readable_angle + 180 - 90 + eps)) & not(SYMB_MIRRORED)) then
				rot2 180
				nTransUPDN = nTransUPDN + 1
			endif
		else
			if typeTextRotation_UpDn_m = 1 then								! Parallel with Walking Line
				iReadable = (totalRotate > (gs_readable_angle + eps) & totalRotate < (gs_readable_angle + 180 + eps))- not(totalRotate > (gs_readable_angle + eps) & totalRotate < (gs_readable_angle + 180 + eps))
				rot2 -90 * iReadable
				nTransUPDN = nTransUPDN + 1
			endif
		endif
		! ----------------------------------------------------------------------
		rot2 AngUPDN
		nTransUPDN = nTransUPDN + 1

		string1	= `ВВЕРХ`
		text2 0,0, string1

		del nTransUPDN

		width1	= STW (string1)/1000*GLOB_SCALE
		rb		= width1/2
	endif

	if walkingDirUPDN_m = 3 & (drawPart[1]|drawPart[3]) then ! Down at Bottom
		nTransUPDN = 0
		set style "UPDN"
		add2 flightWidth/2+DirUPDN_X,DirUPDN_Y-xNosing
		nTransUPDN = nTransUPDN + 1

		! Text Rotation - Readable / Parallel with Walking Line / Align with Symbol
		! ----------------------------------------------------------------------
		if typeTextRotation_UpDn_m = 2 then									! Readable
			if ((totalRotate > (gs_readable_angle - 90 + eps) & totalRotate < (gs_readable_angle + 180 - 90 + eps)) & SYMB_MIRRORED) | \
				((totalRotate < (gs_readable_angle - 90 + eps) | totalRotate > (gs_readable_angle + 180 - 90 + eps)) & not(SYMB_MIRRORED)) then
				rot2 180
				nTransUPDN = nTransUPDN + 1
			endif
		else
			if typeTextRotation_UpDn_m = 1 then								! Parallel with Walking Line
				iReadable = (totalRotate > (gs_readable_angle + eps) & totalRotate < (gs_readable_angle + 180 + eps))- not(totalRotate > (gs_readable_angle + eps) & totalRotate < (gs_readable_angle + 180 + eps))
				rot2 -90 * iReadable
				nTransUPDN = nTransUPDN + 1
			endif
		endif
		! ----------------------------------------------------------------------
		rot2 AngUPDN
		nTransUPDN = nTransUPDN + 1

		text2 0,0, gs_CustomText_Down

		del nTransUPDN

		string2	= gs_CustomText_Down
		width2	= STW (string2)/1000*GLOB_SCALE
		rb		= width2/2
	endif

	if (walkingDirUPDN_m = 2 | walkingDirUPDN_m = 5 | walkingDirUPDN_m = 3 | (walkingDirUPDN_m = 6 & not(abovestory) & not(belowstory))) & (drawPart[1]|drawPart[3]) then
		nTransHotspot = 0
		add2 flightWidth/2+DirUPDN_X,DirUPDN_Y-xNosing
		nTransHotspot = nTransHotspot  + 1
		if typeTextRotation_UpDn_m = 1 then
			rot2 -90 * iReadable
			nTransHotspot = nTransHotspot  + 1
		endif
		HOTSPOT2 0,					0,				UpDownUNID,	AngUPDN,	6		: UpDownUNID=UpDownUNID+1
		HOTSPOT2 rb,				0,				UpDownUNID,	AngUPDN,	4+128	: UpDownUNID=UpDownUNID+1
		HOTSPOT2 rb*cos(AngUPDN),	rb*sin(AngUPDN),UpDownUNID,	AngUPDN,	5		: UpDownUNID=UpDownUNID+1
		DEL nTransHotspot
	endif

	if (walkingDirUPDN_m = 4 | walkingDirUPDN_m = 5 | (walkingDirUPDN_m = 6 & abovestory)) & (drawPart[2]|drawPart[3]) then
		nTransUPDN = 0
		set style "UPDN"
		add2 flightWidth/2+DirUPDN_X_top, DirUPDN_Y_top + A
		nTransUPDN = nTransUPDN + 1

		! Text Rotation - Readable / Parallel with Walking Line / Align with Symbol
		! ----------------------------------------------------------------------
		if typeTextRotation_UpDn_m = 2 then									! Readable
			if ((totalRotate > (gs_readable_angle - 90 + eps) & totalRotate < (gs_readable_angle + 180 - 90 + eps)) & SYMB_MIRRORED) | \
				((totalRotate < (gs_readable_angle - 90 + eps) | totalRotate > (gs_readable_angle + 180 - 90 + eps)) & not(SYMB_MIRRORED)) then
				rot2 180
				nTransUPDN = nTransUPDN + 1
			endif
		else
			if typeTextRotation_UpDn_m = 1 then								! Parallel with Walking Line
				iReadable = (totalRotate > (gs_readable_angle + eps) & totalRotate < (gs_readable_angle + 180 + eps))- not(totalRotate > (gs_readable_angle + eps) & totalRotate < (gs_readable_angle + 180 + eps))
				rot2 -90 * iReadable
				nTransUPDN = nTransUPDN + 1
			endif
		endif
		! ----------------------------------------------------------------------
		rot2 AngUPDN_top
		nTransUPDN = nTransUPDN + 1

		text2 0,0, gs_CustomText_Down

		del nTransUPDN

		string2	= gs_CustomText_Down
		width2	= STW (string2)/1000*GLOB_SCALE
		rb		= width2/2
	endif

	if (walkingDirUPDN_m = 4 | walkingDirUPDN_m = 5 | (walkingDirUPDN_m = 6 & abovestory)) & (drawPart[2]|drawPart[3]) then
		nTransHotspot = 0
		add2 flightWidth/2+DirUPDN_X_top, DirUPDN_Y_top+A
		nTransHotspot = nTransHotspot  + 1
		if typeTextRotation_UpDn_m = 1 then
			rot2 -90 * iReadable
			nTransHotspot = nTransHotspot  + 1
		endif
		HOTSPOT2 0,						0,					UpDownUNID,	AngUPDN_top,	6		: UpDownUNID=UpDownUNID+1
		HOTSPOT2 rb,					0,					UpDownUNID,	AngUPDN_top,	4+128	: UpDownUNID=UpDownUNID+1
		HOTSPOT2 rb*cos(AngUPDN_top),	rb*sin(AngUPDN_top),UpDownUNID,	AngUPDN_top,	5		: UpDownUNID=UpDownUNID+1
		DEL nTransHotspot
	endif
endif

! --- Numbering ----------------------------------------------------------------

if drawNum & not(belowStory) then
	DRAWINDEX 50
	set style "stepnum"
	nnn = REQUEST ("Height_of_style", "stepnum", strHeight)
	strHeight = strHeight / 1000 * GLOB_SCALE

	xNosing = nosing * (drawDetails[1]|drawDetails[3])
	add2 DirNumText_X, DirNumText_Y - treadDepth/2 - xNosing

	for iNumStep = 1 to nRisers
		add2 0,treadDepth
		pen gs_NumTextPen
		nTextTransformations = 0
		! Text Rotation - Readable / Align with Symbol
		! ----------------------------------------------------------------------
		if typeTextRotation_Num_m = 2 then								! Readable
			if ((totalRotate > (gs_readable_angle - 90 + eps) & totalRotate < (gs_readable_angle + 180 - 90 + eps)) & SYMB_MIRRORED) | \
				((totalRotate < (gs_readable_angle - 90 + eps) | totalRotate > (gs_readable_angle + 180 - 90 + eps)) & not(SYMB_MIRRORED)) then
				rot2 180
				strWidth = stw(str("%.0", iNumStep + nStartNumbering-1)) / 1000 * GLOB_SCALE
				add2 -strWidth, strHeight
				nTextTransformations = 2
			endif
		endif
		! ----------------------------------------------------------------------

		text2 0,0, iNumStep + nStartNumbering - 1
		if nTextTransformations > 0 then del nTextTransformations
		pen gs_cont_pen
	next iNumStep
	del nRisers +1

	hotspot2 0,				DirNumText_Y- xNosing,	NumUnID, DirNumText_X, 1+128	:NumUnID=NumUnID+1
	hotspot2 -1,			DirNumText_Y- xNosing,	NumUnID, DirNumText_X, 3		:NumUnID=NumUnID+1
	hotspot2 DirNumText_X,	DirNumText_Y- xNosing,	NumUnID, DirNumText_X,	2		:NumUnID=NumUnID+1

	hotspot2 DirNumText_X, 0- xNosing,				NumUnID, DirNumText_Y, 1+128	:NumUnID=NumUnID+1
	hotspot2 DirNumText_X, -1- xNosing,				NumUnID, DirNumText_Y, 3		:NumUnID=NumUnID+1
	hotspot2 DirNumText_X, DirNumText_Y- xNosing,	NumUnID, DirNumText_Y, 2		:NumUnID=NumUnID+1
endif

! --- Description ----------------------------------------------------------------

if STRLEN(gs_description) <> 0 & not(belowStory) then
	lengthWalkLine = A

	! --- positioning ---
	rot2	90
	nTransDes = 1

	dim gs_description_bpos[3][3]
	gs_description_bpos[1][1] = lengthWalkLine/2
	gs_description_bpos[1][2] = -flightwidth/2
	gs_description_bpos[1][3] = 0

	style "description"
	pen gs_desc_text_pen
	add2 (gs_description_bpos[1][1] + gs_description_pos[1][1]), (gs_description_bpos[1][2] + gs_description_pos[1][2])

	textangle = (gs_description_bpos[1][3] + gs_description_pos[1][3])

	reversedText = 0
	angleFull = (totalRotate + textangle) MOD 360

	if angleFull < 0 then
		angleFull = angleFull + 360
	endif
	if angleFull > (gs_readable_angle+eps) & angleFull < (gs_readable_angle + 180 +eps) then
		reversedText = 1
		textangle = textangle + 180
	endif
	rot2 textangle

	if reversedText then
		text2 -STW(gs_description) / 1000 * GLOB_SCALE, 0, gs_description
	else
		text2 0,0, gs_description
	endif

	del 2
	hotspot2 gs_description_bpos[1][1], gs_description_bpos[1][2] + gs_description_pos[1][2], 40000+1, gs_description_pos[1][1], 1 + 128
	posRel = gs_description_pos[1][1]
	if abs(posRel) < 0.00001 then
		posRel = 0.0001
	else
		posRel = 0
	endif
	hotspot2 gs_description_bpos[1][1] - posRel, gs_description_bpos[1][2] + gs_description_pos[1][2], 40000+2, gs_description_pos[1][1], 3 + 128
	hotspot2 gs_description_bpos[1][1] + gs_description_pos[1][1], gs_description_bpos[1][2] + gs_description_pos[1][2], 40000+3, gs_description_pos[1][1], 2

	hotspot2 gs_description_bpos[1][1] + gs_description_pos[1][1], gs_description_bpos[1][2], 40000+4, gs_description_pos[1][2], 1 + 128
	posRel = gs_description_pos[1][2]
	if abs(posRel) < 0.00001 then
		posRel = 0.0001
	else
		posRel = 0
	endif
	hotspot2 gs_description_bpos[1][1] + gs_description_pos[1][1], gs_description_bpos[1][2] - posRel, 40000+5, gs_description_pos[1][2], 3 + 128
	hotspot2 gs_description_bpos[1][1] + gs_description_pos[1][1], gs_description_bpos[1][2] + gs_description_pos[1][2], 40000+6, gs_description_pos[1][2], 2

	!angle edit
	HOTSPOT2 gs_description_bpos[1][1] + gs_description_pos[1][1],
				gs_description_bpos[1][2] + gs_description_pos[1][2],
				40000+7, gs_description_pos[1][3], 6 + 128

	HOTSPOT2 gs_description_bpos[1][1] + gs_description_pos[1][1] + GLOB_SCALE*0.5*COS(gs_description_bpos[1][3])*gs_desc_text_size/1000,
				gs_description_bpos[1][2] + gs_description_pos[1][2] + GLOB_SCALE*0.5*SIN(gs_description_bpos[1][3])*gs_desc_text_size/1000,
				40000+8, gs_description_pos[1][3], 4 + 128

	HOTSPOT2 gs_description_bpos[1][1] + gs_description_pos[1][1] + GLOB_SCALE*0.5*gs_desc_text_size*COS(gs_description_bpos[1][3] + gs_description_pos[1][3])/1000,
				gs_description_bpos[1][2] + gs_description_pos[1][2] + GLOB_SCALE*0.5*gs_desc_text_size*SIN(gs_description_bpos[1][3] + gs_description_pos[1][3])/1000,
				40000+9, gs_description_pos[1][3], 5
	del nTransDes

endif

!===============================================================================
! --- Carriage Line ---
!===============================================================================

if bCarriageLineExist and not(belowStory) then
	fill gs_fill_type

	bShowCarriagePart1	= 0
	bShowCarriagePart2	= 0

	beamNum				= nWoodCarriages
	beamThk				= woodBaseThk
	beamOffsetRight		= woodCarriageOffsetRight
	beamOffsetLeft		= woodCarriageOffsetLeft
	carriageBaseDist	= flightWidth
	carrBreakLineWidth	= breakLineWidth

	if drawPart[3] then
		!!!!!******************************      1st RUN
		add2 0, bRiserCover * riserCoverThk
			beamLength			= a - bRiserCover * riserCoverThk
			bCarrAboveBreakLine	= 0
			bBreakCarriageLine	= 0
			gosub "carriage"
		del 1
	else
		if drawPart[1] then
			!!!!!******************************      1st RUN
			add2 0, bRiserCover * riserCoverThk
				beamLength			= a - bRiserCover * riserCoverThk
				bCarrAboveBreakLine	= 0
				bBreakCarriageLine	= 1
				bShowCarriagePart1	= 1
				bShowCarriagePart2	= 0
				brLineAngle			= bet
				xNosing				= nosing * drawDetails[1]
				if beamNum = 1 then
					carrBreakLineDist	= NumStline * treadDepth - xNosing - beamOffsetRight * tan(brLineAngle) - bRiserCover * riserCoverThk
				else
					carrBreakLineDist	= NumStline * treadDepth - xNosing + (flightWidth / 2 - beamOffsetRight - beamThk / 2) * tan(brLineAngle) - bRiserCover * riserCoverThk
				endif
				gosub "carriage"
			del 1
		endif

		if drawPart[2] then
			!!!!!******************************      1st RUN
			add2 0, bRiserCover * riserCoverThk
				beamLength			= a - bRiserCover * riserCoverThk
				bCarrAboveBreakLine	= 1
				bBreakCarriageLine	= 1
				bShowCarriagePart1	= 0
				bShowCarriagePart2	= 1
				brLineAngle			= bet
				xNosing				= nosing * drawDetails[2]
				if beamNum = 1 then
					carrBreakLineDist	= NumStline * treadDepth - xNosing - beamOffsetRight * tan(brLineAngle) - bRiserCover * riserCoverThk
				else
					carrBreakLineDist	= NumStline * treadDepth - xNosing + (flightWidth / 2 - beamOffsetRight - beamThk / 2) * tan(brLineAngle) - bRiserCover * riserCoverThk
				endif
				gosub "carriage"
			del 1
		endif
	endif
endif

!===============================================================================
! --- Railings ---
!===============================================================================

if _bShowRailIn2D & not(belowStory) then
	bShowRailPart1			= 0
	bShowRailPart2			= 0
	breakLineW				= breakLineWidth
	breakLineDist			= 0
	brLineAngle				= bet

	bShowRailOn1stRun		= 0

	drawindex 30
	fill gs_fill_type

	! --- Left Rail ----------------------------------------------------------------
	if rail_m = 3 | rail_m = 1 then	! Left, Both
		if bSameRails then
			leftRailType_m = rightRailType_m
			leftWireType_m = rightWireType_m
		endif

		if drawBreakline then
			if drawPart[1] & bShowRailOnFloorPlan then
				pen railPen
				if aboveStory then
					SET LINE_TYPE railLineType
				else
					if (drawDashed[1]) then
						SET LINE_TYPE dash_line
					else
						SET LINE_TYPE railLineType
					endif
				endif

				if bSymbolic2D then
					xNosing =  nosing * NOT(drawDetails[2])
					bShowRailOn1stRun		= 1
					bBreakRailLine			= 1
					brLineAngle				= bet
					bShowRailPart1			= 1
					breakLineDist			= leftRailOvhgBottom - nosing + (NumStline - 1) * treadDepth + (leftRailOffset+leftRailFrameThk) * TAN(bet)
					breakLineW				= breakLineWidth + xNosing
					bRailAboveBreakLine		= 0
					gosub "left rail"
				else
					xNosing = nosing * drawDetails[1]
					poly2_b 5, 1+2+64, gs_fill_pen, gs_back_pen,
						leftRailOffset,					-leftRailOvhgBottom,1,
						leftRailOffset+leftRailFrameThk,-leftRailOvhgBottom,1,
						leftRailOffset+leftRailFrameThk,-xNosing+(NumStline-1)*treadDepth+(leftRailOffset+leftRailFrameThk)*tan(bet),1,
						leftRailOffset,					-xNosing+(NumStline-1)*treadDepth+(leftRailOffset)*tan(bet),1,
						leftRailOffset,					-leftRailOvhgBottom,1
				endif
			endif

			if drawPart[2] & bShowRailOnFloorPlan and bShowRailAboveBreakLine then
				pen railPen
				if aboveStory then
					SET LINE_TYPE railLineType
				else
					if (drawDashed[2]) then
						SET LINE_TYPE dash_line
					else
						SET LINE_TYPE railLineType
					endif
				endif
				xNosing = nosing * drawDetails[2]

				if bSymbolic2D then
					xNosing =  nosing * NOT(drawDetails[2])
					bShowRailOn1stRun		= 1
					bBreakRailLine			= 1
					brLineAngle				= bet
					bShowRailPart2			= 1
					breakLineDist			= leftRailOvhgBottom - nosing + (NumStline - 1) * treadDepth + (leftRailOffset+leftRailFrameThk) * TAN(bet)
					breakLineW				= breakLineWidth + xNosing
					bRailAboveBreakLine		= 1
					gosub "left rail"
				else
					poly2_b 5, 1+2*gs_FillAbove+64, gs_fill_pen, gs_back_pen,
						leftRailOffset,					(nRisers)*treadDepth+leftRailOvhgTop,1,
						leftRailOffset+leftRailFrameThk,(nRisers)*treadDepth+leftRailOvhgTop,1,
						leftRailOffset+leftRailFrameThk,-xNosing+(NumStline-1)*treadDepth+breakLineWidth+(leftRailOffset+leftRailFrameThk)*tan(bet),1,
						leftRailOffset,					-xNosing+(NumStline-1)*treadDepth+breakLineWidth+(leftRailOffset)*tan(bet),1,
						leftRailOffset,					(nRisers)*treadDepth+leftRailOvhgTop,1
				endif
			endif

			if bShowRailAxis then
				line_type railAxisLineType
				pen gs_RailAxisPen
				if drawPart[1] then
					xNosing = nosing * drawDetails[1]
					line2 leftRailOffset+leftRailFrameThk/2, -xNosing+(NumStline-1)*treadDepth+(leftRailOffset+leftRailFrameThk/2)*tan(bet),leftRailOffset+leftRailFrameThk/2,-leftRailOvhgBottom
				endif
				if drawPart[2] then
					xNosing = nosing * drawDetails[2]
					line2 leftRailOffset+leftRailFrameThk/2, -xNosing+(NumStline-1)*treadDepth+breakLineWidth+(leftRailOffset+leftRailFrameThk/2)*tan(bet),leftRailOffset+leftRailFrameThk/2,(nRisers)*treadDepth+leftRailOvhgTop
				endif
			endif
		else
			if drawPart[3] & bShowRailOnFloorPlan then
				pen railPen
				if aboveStory then
					LINE_TYPE railLineType
				else
					if (drawDashed[3]) then
						LINE_TYPE dash_line
					else
						LINE_TYPE railLineType
					endif
				endif
				xNosing =  0 ! COMP nosing * drawDetails[3]

				if bSymbolic2D then
					bShowRailOn1stRun		= 1
					bBreakRailLine			= 0
					bRailAboveBreakLine		= 0
					gosub "left rail"
				else
					poly2_b 5, 1+2+64, gs_fill_pen, gs_back_pen,
						leftRailOffset,					-xNosing-leftRailOvhgBottom,1,
						leftRailOffset+leftRailFrameThk,-xNosing-leftRailOvhgBottom,1,
						leftRailOffset+leftRailFrameThk,(nRisers)*treadDepth+leftRailOvhgTop,1,
						leftRailOffset,					(nRisers)*treadDepth+leftRailOvhgTop,1,
						leftRailOffset,					-xNosing-leftRailOvhgBottom,1
				endif
			endif

			if bShowRailAxis then
				line_type railAxisLineType
				pen gs_RailAxisPen
				xNosing =  0 ! COMP nosing * drawDetails[3]
				line2 leftRailOffset+leftRailFrameThk/2, (nRisers)*treadDepth+leftRailOvhgTop,leftRailOffset+leftRailFrameThk/2,-xNosing-leftRailOvhgBottom
			endif
		endif
	endif

	! --- Right Rail ---------------------------------------------------------------
	if rail_m = 2 | rail_m = 1 then		! Right, Both
		if drawBreakline then
			if drawPart[1] & bShowRailOnFloorPlan then
				pen railPen
				if aboveStory then
					LINE_TYPE railLineType
				else
					if (drawDashed[1]) then
						LINE_TYPE dash_line
					else
						LINE_TYPE railLineType
					endif
				endif

				if bSymbolic2D then
					xNosing =  nosing * NOT(drawDetails[2])
					bShowRailOn1stRun		= 1
					bBreakRailLine			= 1
					brLineAngle				= bet
					bShowRailPart1			= 1
					breakLineDist			= rightRailOvhgBottom - nosing + (NumStline + 1) * treadDepth - (rightRailOffset + rightRailFrameThk*0) * TAN(bet)
					breakLineW				= breakLineWidth + xNosing
					bRailAboveBreakLine		= 0
					gosub "right rail"
				else
					xNosing = nosing * drawDetails[1]
					poly2_b 5, 1+2+64, gs_fill_pen, gs_back_pen,
						flightWidth-rightRailOffset-rightRailFrameThk,	-rightRailOvhgBottom,1,
						flightWidth-rightRailOffset,					-rightRailOvhgBottom,1,
						flightWidth-rightRailOffset,					-xNosing+(NumStline+1)*treadDepth-rightRailOffset*tan(bet),1,
						flightWidth-rightRailOffset-rightRailFrameThk,	-xNosing+(NumStline+1)*treadDepth-(rightRailOffset+rightRailFrameThk)*tan(bet),1,
						flightWidth-rightRailOffset-rightRailFrameThk,	-rightRailOvhgBottom,1
				endif
			endif

			if drawPart[2] & bShowRailOnFloorPlan and bShowRailAboveBreakLine then
				pen railPen
				if aboveStory then
					LINE_TYPE railLineType
				else
					if (drawDashed[2]) then
						LINE_TYPE dash_line
					else
						LINE_TYPE railLineType
					endif
				endif
				xNosing = nosing * drawDetails[2]

				if bSymbolic2D then
					xNosing =  nosing * NOT(drawDetails[2])
					bShowRailOn1stRun		= 1
					bBreakRailLine			= 1
					brLineAngle				= bet
					bShowRailPart2			= 1
					breakLineDist			= rightRailOvhgBottom - nosing + (NumStline + 1) * treadDepth - (rightRailOffset + rightRailFrameThk*0) * TAN(bet)
					breakLineW				= breakLineWidth + xNosing
					bRailAboveBreakLine		= 1
					gosub "right rail"
				else
					poly2_b 5, 1 + 2 * gs_FillAbove+64, gs_fill_pen, gs_back_pen,
						flightWidth-rightRailOffset-rightRailFrameThk,	(nRisers)*treadDepth+rightRailOvhgTop,1,
						flightWidth-rightRailOffset,					(nRisers)*treadDepth+rightRailOvhgTop,1,
						flightWidth-rightRailOffset,					-xNosing+(NumStline+1)*treadDepth+breakLineWidth-rightRailOffset*tan(bet),1,
						flightWidth-rightRailOffset-rightRailFrameThk,	-xNosing+(NumStline+1)*treadDepth+breakLineWidth-(rightRailOffset+rightRailFrameThk)*tan(bet),1,
						flightWidth-rightRailOffset-rightRailFrameThk,	(nRisers)*treadDepth+rightRailOvhgTop,1
				endif
			endif

			if bShowRailAxis then
				line_type railAxisLineType
				pen gs_RailAxisPen
				if drawPart[1]then
					xNosing = nosing * drawDetails[1]
					line2 flightWidth-rightRailOffset-rightRailFrameThk/2, -xNosing+(NumStline+1)*treadDepth-(rightRailOffset+rightRailFrameThk/2)*tan(bet),flightWidth-rightRailOffset-rightRailFrameThk/2,-rightRailOvhgBottom
				endif
				if drawPart[2] then
					xNosing = nosing * drawDetails[2]
					line2 flightWidth-rightRailOffset-rightRailFrameThk/2, -xNosing+(NumStline+1)*treadDepth+breakLineWidth-(rightRailOffset+rightRailFrameThk/2)*tan(bet),flightWidth-rightRailOffset-rightRailFrameThk/2,(nRisers)*treadDepth+rightRailOvhgTop
				endif
			endif
		else
			if drawPart[3] & bShowRailOnFloorPlan then
				pen railPen
				if aboveStory then
					LINE_TYPE railLineType
				else
					if (drawDashed[3]) then
						LINE_TYPE dash_line
					else
						LINE_TYPE railLineType
					endif
				endif
				xNosing =  0 ! COMP nosing * drawDetails[3]

				if bSymbolic2D then
					bShowRailOn1stRun		= 1
					bBreakRailLine			= 0
					bRailAboveBreakLine		= 0
					gosub "right rail"
				else
					poly2_b 5, 1+2+64, gs_fill_pen, gs_back_pen,
						flightWidth-rightRailOffset,					-xNosing-rightRailOvhgBottom,1,
						flightWidth-rightRailOffset-rightRailFrameThk,	-xNosing-rightRailOvhgBottom,1,
						flightWidth-rightRailOffset-rightRailFrameThk,	(nRisers)*treadDepth+rightRailOvhgTop,1,
						flightWidth-rightRailOffset,					(nRisers)*treadDepth+rightRailOvhgTop,1,
						flightWidth-rightRailOffset,					-xNosing-rightRailOvhgBottom,1
				endif
			endif

			if bShowRailAxis then
				line_type railAxisLineType
				pen gs_RailAxisPen
				xNosing =  0 ! COMP nosing * drawDetails[3]
				line2 flightWidth-rightRailOffset-rightRailFrameThk/2, (nRisers)*treadDepth+rightRailOvhgTop,flightWidth-rightRailOffset-rightRailFrameThk/2,-xNosing-rightRailOvhgBottom
			endif
		endif
	endif
endif

!===============================================================================
! --- Hotspot Editing 2D ---
!===============================================================================

drawindex 50
pen gs_cont_pen
! --- Flight Width -------------------------------------------------------------
xNosing = 0!nosing * (drawDetails[1] | drawDetails[3])

HOTSPOT2 flightWidth,	xNosing,	FlightUNID, b, 1+256 : FlightUNID=FlightUNID+1
HOTSPOT2 0,				xNosing,	FlightUNID, b, 2	: FlightUNID=FlightUNID+1
HOTSPOT2 flightWidth+1,	0,		FlightUNID, b, 3	: FlightUNID=FlightUNID+1

HOTSPOT2 flightWidth,	(nRisers)*treadDepth+xNosing,	FlightUNID, b, 1+256: FlightUNID=FlightUNID+1
HOTSPOT2 0,				(nRisers)*treadDepth+xNosing,	FlightUNID, b, 2	: FlightUNID=FlightUNID+1
HOTSPOT2 flightWidth+1,	(nRisers)*treadDepth+xNosing,	FlightUNID, b, 3	: FlightUNID=FlightUNID+1

HOTSPOT2 0,	xNosing,		FlightUNID, a, 1+256: FlightUNID=FlightUNID+1
HOTSPOT2 0,	a+xNosing,	FlightUNID, a, 2	: FlightUNID=FlightUNID+1
HOTSPOT2 0,	-1,			FlightUNID, a, 3	: FlightUNID=FlightUNID+1

HOTSPOT2 flightWidth,	xNosing,		FlightUNID, a, 1+256 : FlightUNID=FlightUNID+1
HOTSPOT2 flightWidth,	a+xNosing,	FlightUNID, a, 2	: FlightUNID=FlightUNID+1
HOTSPOT2 flightWidth,	-1,			FlightUNID, a, 3	: FlightUNID=FlightUNID+1

! --- UP/DOWN TEXT -------------------------------------------------------------
if bShowWalkLine & not(belowstory) then
	IF walkingDirUPDN_m = 2 | walkingDirUPDN_m = 3 | walkingDirUPDN_m = 5 then
		HOTSPOT2 flightWidth/2,			DirUPDN_Y-xNosing ,		UpDownUNID, DirUPDN_X, 1+128 : UpDownUNID = UpDownUNID+1
		HOTSPOT2 flightWidth/2-1,		DirUPDN_Y-xNosing ,		UpDownUNID, DirUPDN_X, 3	: UpDownUNID = UpDownUNID+1
		HOTSPOT2 flightWidth/2+DirUPDN_X,	DirUPDN_Y-xNosing ,	UpDownUNID, DirUPDN_X, 2	: UpDownUNID = UpDownUNID+1

		HOTSPOT2 flightWidth/2+DirUPDN_X,	0,			UpDownUNID, DirUPDN_Y, 1+128 : UpDownUNID = UpDownUNID+1
		HOTSPOT2 flightWidth/2+DirUPDN_X,	-1,			UpDownUNID, DirUPDN_Y, 3	: UpDownUNID = UpDownUNID+1
		HOTSPOT2 flightWidth/2+DirUPDN_X,DirUPDN_Y-xNosing ,		UpDownUNID, DirUPDN_Y, 2	: UpDownUNID = UpDownUNID+1
	ENDIF

	IF walkingDirUPDN_m = 4  | walkingDirUPDN_m = 5 then
		HOTSPOT2 flightWidth/2,			DirUPDN_Y_top+A,		UpDownUNID, DirUPDN_X_top, 1+128 : UpDownUNID = UpDownUNID+1
		HOTSPOT2 flightWidth/2-1,		DirUPDN_Y_top+A,		UpDownUNID, DirUPDN_X_top, 3	: UpDownUNID = UpDownUNID+1
		HOTSPOT2 flightWidth/2+DirUPDN_X_top,	DirUPDN_Y_top+A,UpDownUNID, DirUPDN_X_top, 2	: UpDownUNID = UpDownUNID+1

		HOTSPOT2 flightWidth/2+DirUPDN_X_top,	0+A,			UpDownUNID, DirUPDN_Y_top, 1+128 : UpDownUNID = UpDownUNID+1
		HOTSPOT2 flightWidth/2+DirUPDN_X_top,	-1+A,			UpDownUNID, DirUPDN_Y_top, 3	: UpDownUNID = UpDownUNID+1
		HOTSPOT2 flightWidth/2+DirUPDN_X_top,DirUPDN_Y_top+A,	UpDownUNID, DirUPDN_Y_top, 2	: UpDownUNID = UpDownUNID+1
	ENDIF
endif

!-- RAILING  ---------------------------------------------------
if _bShowRailIn2D & bShowRailOnFloorPlan & not(belowStory) then
xNosing = 0 ! COMP nosing * (drawDetails[1] | drawDetails[3])

IF rail_m = 2 | rail_m = 1 THEN		! Right, Both

	! RAIL OFFSET - right
	HOTSPOT2 flightWidth-rightRailFrameThk/2,					(nRisers)*treadDepth+rightRailOvhgTop, RailUnID, rightRailOffset, 1+128 : RailUnID=RailUnID+1
	HOTSPOT2 flightWidth-rightRailFrameThk/2-rightRailOffset,	(nRisers)*treadDepth+rightRailOvhgTop, RailUnID, rightRailOffset, 2 : RailUnID=RailUnID+1
	HOTSPOT2 flightWidth-rightRailFrameThk/2-0.1,				(nRisers)*treadDepth+rightRailOvhgTop, RailUnID, rightRailOffset, 3 : RailUnID=RailUnID+1

	HOTSPOT2 flightWidth-rightRailFrameThk/2,					-xNosing-rightRailOvhgBottom, RailUnID, rightRailOffset, 1+128 : RailUnID=RailUnID+1
	HOTSPOT2 flightWidth-rightRailFrameThk/2-rightRailOffset,	-xNosing-rightRailOvhgBottom, RailUnID, rightRailOffset, 2 : RailUnID=RailUnID+1
	HOTSPOT2 flightWidth-rightRailFrameThk/2-0.1,				-xNosing-rightRailOvhgBottom, RailUnID, rightRailOffset, 3 : RailUnID=RailUnID+1

	! RAIL BOTTOM OVERHANG
	HOTSPOT2 flightWidth-rightRailFrameThk/2-rightRailOffset,-xNosing,					RailUnID, rightRailOvhgBottom, 1+128 : RailUnID=RailUnID+1
	HOTSPOT2 flightWidth-rightRailFrameThk/2-rightRailOffset,-xNosing+1,					RailUnID, rightRailOvhgBottom, 3 : RailUnID=RailUnID+1
	HOTSPOT2 flightWidth-rightRailFrameThk/2-rightRailOffset,-xNosing-rightRailOvhgBottom,RailUnID, rightRailOvhgBottom, 2 : RailUnID=RailUnID+1

	! RAIL TOP OVERHANG
	HOTSPOT2 flightWidth-rightRailFrameThk/2-rightRailOffset,treadDepth*(nRisers),					RailUnID, rightRailOvhgTop, 1+128 : RailUnID=RailUnID+1
	HOTSPOT2 flightWidth-rightRailFrameThk/2-rightRailOffset,treadDepth*(nRisers)-1,						RailUnID, rightRailOvhgTop, 3 : RailUnID=RailUnID+1
	HOTSPOT2 flightWidth-rightRailFrameThk/2-rightRailOffset,treadDepth*(nRisers)+rightRailOvhgTop,	RailUnID, rightRailOvhgTop, 2 : RailUnID=RailUnID+1
ENDIF

IF rail_m = 3 | rail_m = 1 THEN		! Left, Both
	! RAIL OFFSET - left
	HOTSPOT2 leftRailFrameThk/2,				(nRisers)*treadDepth+leftRailOvhgTop, RailUnID, leftRailOffset, 1+128 : RailUnID=RailUnID+1
	HOTSPOT2 leftRailFrameThk/2+leftRailOffset,	(nRisers)*treadDepth+leftRailOvhgTop, RailUnID, leftRailOffset, 2 : RailUnID=RailUnID+1
	HOTSPOT2 leftRailFrameThk/2+0.1,			(nRisers)*treadDepth+leftRailOvhgTop, RailUnID, leftRailOffset, 3 : RailUnID=RailUnID+1

	HOTSPOT2 leftRailFrameThk/2,				-xNosing-leftRailOvhgBottom, RailUnID, leftRailOffset, 1+128 : RailUnID=RailUnID+1
	HOTSPOT2 leftRailFrameThk/2+leftRailOffset,	-xNosing-leftRailOvhgBottom, RailUnID, leftRailOffset, 2 : RailUnID=RailUnID+1
	HOTSPOT2 leftRailFrameThk/2+0.1,			-xNosing-leftRailOvhgBottom, RailUnID, leftRailOffset, 3 : RailUnID=RailUnID+1

	! RAIL BOTTOM OVERHANG
	HOTSPOT2 leftRailFrameThk/2+leftRailOffset,		-xNosing,						RailUnID, leftRailOvhgBottom, 1+128 : RailUnID=RailUnID+1
	HOTSPOT2 leftRailFrameThk/2+leftRailOffset,		-xNosing+1,					RailUnID, leftRailOvhgBottom, 3 : RailUnID=RailUnID+1
	HOTSPOT2 leftRailFrameThk/2+leftRailOffset,		-xNosing-leftRailOvhgBottom,	RailUnID, leftRailOvhgBottom, 2 : RailUnID=RailUnID+1

	! RAIL TOP OVERHANG
	HOTSPOT2 leftRailFrameThk/2+leftRailOffset,		treadDepth*(nRisers),				RailUnID, leftRailOvhgTop, 1+128 : RailUnID=RailUnID+1
	HOTSPOT2 leftRailFrameThk/2+leftRailOffset,		treadDepth*(nRisers)-1,						RailUnID, leftRailOvhgTop, 3 : RailUnID=RailUnID+1
	HOTSPOT2 leftRailFrameThk/2+leftRailOffset,		treadDepth*(nRisers)+leftRailOvhgTop,RailUnID, leftRailOvhgTop, 2 : RailUnID=RailUnID+1
ENDIF
endif

END


"Start End Symbol":
	DRAWINDEX 45
	fill gs_StartEndFill

	if gs_StartEndFillPen <> 0 then
		temp_FillStatus = 2
	else
		temp_FillStatus = 0
	endif

	add2 0, +xNosing
	IF gs_StartEndStyle_m = 1 THEN		! Style 1
		POLY2_B 2, 1+temp_FillStatus, gs_StartEndFillPen, gs_fill_pen,
		0,-xNosing,901,
		gs_CircleRadius,360,4001
	ENDIF

	IF gs_StartEndStyle_m = 2 THEN		! Style 2
		FOR kk=1 TO 2
			POLY2_B 6, 1+temp_FillStatus, gs_StartEndFillPen, gs_fill_pen,
				0,-xNosing,1,
				0+gs_CircleRadius,-xNosing,1,
				0,-xNosing,901,
				0,90,4001,
				0,-xNosing+gs_CircleRadius,0,
				0,-xNosing,-1

			POLY2_B 6, 1, gs_StartEndFillPen, gs_fill_pen,
				0,-xNosing,1,
				0,-xNosing+gs_CircleRadius,1,
				0,-xNosing,901,
				0,90,4001,
				0-gs_CircleRadius,-xNosing,0,
				0,-xNosing,-1
		ROT2 180
		ADD2 0, 2*xNosing
		NEXT kk
		DEL 4
	ENDIF

	IF gs_StartEndStyle_m = 3 THEN		! Style 3
		LINE2 0+gs_StartWidth,-xNosing-gs_StartHeight,0+gs_StartWidth,-xNosing+gs_StartHeight
		LINE2 0-gs_StartWidth,-xNosing-gs_StartHeight,0-gs_StartWidth,-xNosing+gs_StartHeight
	ENDIF

	! --- Hotspots of StartEnd Symbol
	IF gs_StartEndStyle_m = 1 | gs_StartEndStyle_m = 2 THEN		! Style 1-2
		ADD2 0,-xNosing
			FOR kk=1 to 4
				HOTSPOT2 0, 0,					StartSymbUNID, gs_CircleRadius, 1+128	:StartSymbUNID=StartSymbUNID+1
				HOTSPOT2 -1, 0,					StartSymbUNID, gs_CircleRadius, 3+128	:StartSymbUNID=StartSymbUNID+1
				HOTSPOT2 gs_CircleRadius, 0,	StartSymbUNID, gs_CircleRadius,2		:StartSymbUNID=StartSymbUNID+1

				ROT2 90
			NEXT KK
			DEL 4
		DEL 1
	ENDIF

	IF gs_StartEndStyle_m = 3 THEN		! Style 3
		FOR kk=1 to 2
			ADD2 0, -xNosing
				! Symbol Width/2
				HOTSPOT2 0,				-gs_StartHeight, StartSymbUNID, gs_StartWidth, 1+128:StartSymbUNID=StartSymbUNID+1
				HOTSPOT2 -1,			-gs_StartHeight, StartSymbUNID, gs_StartWidth, 3	:StartSymbUNID=StartSymbUNID+1
				HOTSPOT2 gs_StartWidth, -gs_StartHeight, StartSymbUNID, gs_StartWidth, 2	:StartSymbUNID=StartSymbUNID+1

				HOTSPOT2 0,				gs_StartHeight, StartSymbUNID, gs_StartWidth, 1+128	:StartSymbUNID=StartSymbUNID+1
				HOTSPOT2 -1,			gs_StartHeight, StartSymbUNID, gs_StartWidth, 3		:StartSymbUNID=StartSymbUNID+1
				HOTSPOT2 gs_StartWidth, gs_StartHeight, StartSymbUNID, gs_StartWidth,2		:StartSymbUNID=StartSymbUNID+1
			DEL 1

			ADD2 0, -xNosing
				! Symbol Height
				HOTSPOT2 gs_StartWidth, 0,				StartSymbUNID, gs_StartHeight, 1+128:StartSymbUNID=StartSymbUNID+1
				HOTSPOT2 gs_StartWidth, -1,				StartSymbUNID, gs_StartHeight, 3	:StartSymbUNID=StartSymbUNID+1
				HOTSPOT2 gs_StartWidth, gs_StartHeight, StartSymbUNID, gs_StartHeight, 2	:StartSymbUNID=StartSymbUNID+1

				HOTSPOT2 gs_StartWidth, 0,					StartSymbUNID, gs_StartHeight, 1+128:StartSymbUNID=StartSymbUNID+1
				HOTSPOT2 gs_StartWidth, 1,					StartSymbUNID, gs_StartHeight, 3	:StartSymbUNID=StartSymbUNID+1
				HOTSPOT2 gs_StartWidth, -gs_StartHeight,	StartSymbUNID, gs_StartHeight, 2	:StartSymbUNID=StartSymbUNID+1
			DEL 1

		MUL2 -1,1
		NEXT kk
		DEL 2
	ENDIF
	del 1

	DRAWINDEX 40
RETURN


"Arrowhead Symbol":
	IF arrow_style_m = 1 | arrow_style_m = 4 | arrow_style_m = 7 THEN
		temp_ArrowDist = flightWidth/2
		temp_ArrowHeight = treadDepth
		if not(reverseWalkLine) & (i = 2 | i = 3) & walkingDirUPDN_m <> 5 then temp_ArrowHeight = treadDepth + xNosing
	ENDIF

	IF arrow_style_m = 2 | arrow_style_m = 5 | arrow_style_m = 8 THEN
		temp_ArrowDist = flightWidth/4
		temp_ArrowHeight = treadDepth
		if not(reverseWalkLine) & (i = 2 | i = 3) & walkingDirUPDN_m <> 5 then temp_ArrowHeight = treadDepth + xNosing
	ENDIF

	IF arrow_style_m = 3 | arrow_style_m = 6 | arrow_style_m = 9 THEN
		temp_ArrowDist = gs_ArrowHalfWidth
		temp_ArrowHeight = gs_ArrowHeight
	ENDIF

	if arrow_style_m = 1 | arrow_style_m = 2 | arrow_style_m = 3 then
		temp_ArrowMask=0
	else
		temp_ArrowMask=1
	endif

	POLY2_b 4, 1, penFillArrow, gs_fill_pen,
		-temp_ArrowDist,-temp_ArrowHeight, temp_ArrowMask,
		temp_ArrowDist,-temp_ArrowHeight, 1,
		0,0, 1,
		-temp_ArrowDist,-temp_ArrowHeight, -1

	! --- Arrowhead Fill Contour Points Conditions
	IF arrow_style_m = 4 | arrow_style_m = 5 | arrow_style_m = 6 THEN
		temp_1XFill=temp_ArrowDist
		lengthArrowHead = temp_ArrowHeight
	else
		lengthArrowHead = 0
	ENDIF

	IF arrow_style_m = 7 | arrow_style_m = 8 | arrow_style_m = 9 THEN
		temp_1XFill=0
	ENDIF

	if penFillArrow <> 0 then
		IF arrow_style_m <> 1 & arrow_style_m <> 2 & arrow_style_m <> 3 THEN
			fill gs_ArrowFill ! Always 64 (Foreground)
			POLY2_b 4, 2, penFillArrow, gs_fill_pen,
				-temp_1XFill,-temp_ArrowHeight, temp_ArrowMask,
				temp_ArrowDist,-temp_ArrowHeight, 1,
				0,0, 1,
				-temp_1XFill,-temp_ArrowHeight, -1
		ENDIF
	endif

	HOTSPOT2	0,0,	ArrowUNID: ArrowUNID=ArrowUNID+1

	! --- Hotspot editing of Height & Width of Arrowhead
	IF arrow_style_m = 3 | arrow_style_m = 6 | arrow_style_m = 9 THEN
		HOTSPOT2 gs_ArrowHalfWidth,0,				ArrowUNID, gs_ArrowHeight, 1+128	: ArrowUNID=ArrowUNID+1
		HOTSPOT2 gs_ArrowHalfWidth,-gs_ArrowHeight,	ArrowUNID, gs_ArrowHeight, 2		: ArrowUNID=ArrowUNID+1
		HOTSPOT2 gs_ArrowHalfWidth,1,				ArrowUNID, gs_ArrowHeight, 3		: ArrowUNID=ArrowUNID+1

		HOTSPOT2 -gs_ArrowHalfWidth,0,					ArrowUNID, gs_ArrowHeight, 1+128	: ArrowUNID=ArrowUNID+1
		HOTSPOT2 -gs_ArrowHalfWidth,-gs_ArrowHeight,	ArrowUNID, gs_ArrowHeight, 2		: ArrowUNID=ArrowUNID+1
		HOTSPOT2 -gs_ArrowHalfWidth,1,					ArrowUNID, gs_ArrowHeight, 3		: ArrowUNID=ArrowUNID+1

		HOTSPOT2 0,					-gs_ArrowHeight,	ArrowUNID, gs_ArrowHalfWidth, 1+128	: ArrowUNID=ArrowUNID+1
		HOTSPOT2 gs_ArrowHalfWidth,	-gs_ArrowHeight,	ArrowUNID, gs_ArrowHalfWidth, 2		: ArrowUNID=ArrowUNID+1
		HOTSPOT2 -1,				-gs_ArrowHeight,	ArrowUNID, gs_ArrowHalfWidth, 3		: ArrowUNID=ArrowUNID+1

		HOTSPOT2 0,					-gs_ArrowHeight,	ArrowUNID, gs_ArrowHalfWidth, 1+128 : ArrowUNID=ArrowUNID+1
		HOTSPOT2 -gs_ArrowHalfWidth,-gs_ArrowHeight,	ArrowUNID, gs_ArrowHalfWidth, 2		: ArrowUNID=ArrowUNID+1
		HOTSPOT2 1,					-gs_ArrowHeight,	ArrowUNID, gs_ArrowHalfWidth, 3		: ArrowUNID=ArrowUNID+1
	ENDIF
RETURN


"left rail":

	if bSameRails then
		leftRailType_m = rightRailType_m
		leftWireType_m = rightWireType_m
	endif

	rot2 90
	add2 0, -flightWidth

	if bShowRailOn1stRun then
		ADD2 -leftRailOvhgBottom-nosing*0,flightWidth-leftRailOffset-leftRailFrameThk/2

		lraSimple=a+leftRailOvhgBottom+leftRailOvhgTop
		lraComplex=a-treadDepth
		additionXComplex=leftRailOvhgBottom+treadDepth/2
		additionZComplex=leftRailOvhgBottom*tan(ang)
		hrovL=treadDepth/2+leftRailOvhgBottom
		hrovR=treadDepth/2+leftRailOvhgTop
		IF leftRailType_m = 10 THEN	! Rail Post with Bars
			postNumber=max(2,(a-treadDepth)/(3*treadDepth))
		else
			postNumber=(a+leftRailOvhgBottom+leftRailOvhgTop)/(3*treadDepth)+1
		endif
		side = SIDE_LEFT
		gosub "callRailsForStair"

		DEL 1
	endif

	del 2

return


"right rail":

	rot2 90
	add2 0, -flightWidth

	if bShowRailOn1stRun then
		ADD2 -rightRailOvhgBottom-nosing*0,rightRailOffset+rightRailFrameThk/2

		lraSimple=a+rightRailOvhgBottom+rightRailOvhgTop
		lraComplex=a-treadDepth
		additionXComplex=rightRailOvhgBottom+treadDepth/2
		additionZComplex=rightRailOvhgBottom*tan(ang)
		hrovL=treadDepth/2+rightRailOvhgBottom
		hrovR=treadDepth/2+rightRailOvhgTop
		IF rightRailType_m = 10 THEN	! Rail Post with Bars
			postNumber=max(2,(a-treadDepth)/(3*treadDepth))
		else
			postNumber=(a+rightRailOvhgBottom+rightRailOvhgTop)/(3*treadDepth)+1
		endif
		side = SIDE_RIGHT
		gosub "callRailsForStair"

		DEL 1
	endif

	del 2

return


"callRailsForStair":
! ------------------------------------------------------------------------------
!	lraSimple
!	lraComplex
!	additionXComplex
!	additionZComplex
!	hrovL: rail overhang start
!	hrovR: rail overhang end
!	postNumber:   number of posts
!	side: SIDE_LEFT or SIDE_RIGHT
! ==============================================================================
	ani = ang
	additionXComplex = additionXComplex
	additionZComplex = additionZComplex
	if side = SIDE_LEFT then
		dsComplex = leftRailDist+treadDepth/2*tan(ang)
	else
		dsComplex = rightRailDist+treadDepth/2*tan(ang)
	endif

	gosub "callRails"
return


! ==============================================================================
"callRails":
! ------------------------------------------------------------------------------
!	ani
!	additionXComplex
!	additionZComplex
!	dsComplex
!  ------------------
!	side: SIDE_LEFT or SIDE_RIGHT
!	lraSimple
!	lraComplex
!	hrovL: rail overhang start
!	hrovR: rail overhang end
!	postNumber:   number of posts
! ==============================================================================
	if side = SIDE_LEFT then
		railBarDepth		= leftRailBarDepth
		railBarDiam			= railBarDepth
		railHeight			= leftRailHeight
		railBarThk			= leftRailBarThk
		railFrameThk		= leftRailFrameThk
		railDist			= leftRailDist
		railType_m			= leftRailType_m
		railPostSize		= leftRailPostSize
		nBarsRail			= nBarsLeftRail
		if rightRailType_m = RAIL_WIRED then
			railBarThk		= leftRailWireThk
			railBarDepth	= leftRailWireDepth
			railBarDiam		= leftRailWireDiam
		endif
		bComplexRail		= bComplexRailLeft
	else
		railBarDepth		= rightRailBarDepth
		railBarDiam			= railBarDepth
		railHeight			= rightRailHeight
		railBarThk			= rightRailBarThk
		railFrameThk		= rightRailFrameThk
		railDist			= rightRailDist
		railType_m			= rightRailType_m
		railPostSize		= rightRailPostSize
		nBarsRail			= nBarsRightRail
		if rightRailType_m = RAIL_WIRED then
			railBarThk		= rightRailWireThk
			railBarDepth	= rightRailWireDepth
			railBarDiam		= rightRailWireDiam
		endif
		bComplexRail		= bComplexRailRight
	endif

	add2 additionXComplex * bComplexRail, 0
	call "railSymbol2D_m" parameters all	cfs					= 1,
											bEnable2DPosts		= bComplexRail,
											ptyp_m				= 1,
											ani					= ani,
											rom_m				= 1,
											rmm_m				= 1,
											LengthSize			= 0,
											lra					= lraSimple * NOT(bComplexRail) + lraComplex * (bComplexRail),
											hr					= railHeight,
											hrPerp				= railHeight,
											ab					= 0,
											rb					= 0,
											ds					= railDist,
											gs_AngleL			= 90,
											gs_AngleR			= 90,
											iHandRailStyle		= 1,
											handRailDiameter	= railFrameThk,
											handRailWidth		= railFrameThk,
											hroL				= hrovL,
											hroR				= hrovR,
											np					= postNumber,
											pd					= railPostSize,
											pw					= railPostSize,
											pth					= railFrameThk,
											gs_cont_pen			= railPen,
											sa					= 0,
											bBreakRailLine		= bBreakRailLine,
											breakLineAngle		= brLineAngle,
											breakLineDist		= breakLineDist,
											breakLineWidth		= breakLineW,
											bRailAboveBreakLine	= bRailAboveBreakLine,
											bShowRailBelowBrL	= bShowRailPart1,
											bShowRailAboveBrL	= bShowRailPart2,
											bPostNoCalculation	= (railType_m = 9),
											pit_m				= 2,
											dp					= treadDepth
	del 1

	bShowRailPart1			= 0
	bShowRailPart2			= 0

return

"carriage":

	drawindex 10

	if beamNum = 1 then
		add2 carriageBaseDist / 2 - beamThk / 2 - beamOffsetRight, 0
	else
		add2 carriageBaseDist - beamThk - beamOffsetRight, 0
	endif
	for wb = 1 to beamNum
		if bBreakCarriageLine then
			lengthMod	= -(carriageBaseDist - beamOffsetLeft - beamOffsetRight - beamThk) * tan(brLineAngle) * (wb = 2)
			if bShowCarriagePart1 then
				pen carriagePen
				if aboveStory then
					LINE_TYPE carriageLineType
				else
					if	(drawPart[1] and drawDashed[1]) then
						LINE_TYPE dash_line
					else
						LINE_TYPE carriageLineType
					endif
				endif

				poly2_b 4, 1+2+4+64, gs_fill_pen, gs_back_pen,
					0, 0, 1,
					beamThk, 0, 1,
					beamThk, carrBreakLineDist + beamThk * tan(brLineAngle) / 2 + lengthMod, 1,
					0, carrBreakLineDist - beamThk * tan(brLineAngle) / 2 + lengthMod, 1
			endif

			if bShowCarriagePart2 then
				pen carriagePen
				if aboveStory then
					LINE_TYPE carriageLineType
				else
					if	(drawPart[2] and drawDashed[2]) then
						LINE_TYPE dash_line
					else
						LINE_TYPE carriageLineType
					endif
				endif


				poly2_b 4, 1 + 2 * gs_FillAbove + 4+64, gs_fill_pen, gs_back_pen,
					0, carrBreakLineDist - beamThk * tan(brLineAngle) / 2 + lengthMod + carrBreakLineWidth, 1,
					beamThk, carrBreakLineDist + beamThk * tan(brLineAngle) / 2 + lengthMod + carrBreakLineWidth, 1,
					beamThk, beamLength, 1,
					0, beamLength, 1
			endif
		else
			if aboveStory then
				LINE_TYPE carriageLineType
			else
			pen carriagePen
				if drawPart[3] then
					if (drawDashed[3]) then
						LINE_TYPE dash_line
					else
						LINE_TYPE carriageLineType
					endif
				else
					if	(NOT(bCarrAboveBreakLine) and drawDashed[1]) or\
						((bCarrAboveBreakLine) and drawDashed[2]) then
						LINE_TYPE dash_line
					else
						LINE_TYPE carriageLineType
					endif
				endif
			endif

			poly2_b 4, 1 + 2 * (NOT(bCarrAboveBreakLine) + bCarrAboveBreakLine * gs_FillAbove) + 4+64, gs_fill_pen, gs_back_pen,
				0, 0, 1,
				beamThk, 0, 1,
				beamThk, beamLength, 1,
				0, beamLength, 1
		endif
		add2 -carriageBaseDist + beamThk + beamOffsetLeft + beamOffsetRight, 0
	next wb
	del beamNum + 1

return

]]>
</Script_2D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_1D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
EPS=0.0001

SIDE_LEFT				= 1
SIDE_RIGHT				= 2

DET2D_SCALESENSITIVE	= 1
DET2D_CUSTOM			= 2

DET3D_OFF      = 0
DET3D_SIMPLE   = 1
DET3D_DETAILED = 2
DET3D_DRAFT    = 3

dim stArrowHeadStyles[9]
	stArrowHeadStyles[1] =  `Стиль 1`
	stArrowHeadStyles[2] =  `Стиль 2`
	stArrowHeadStyles[3] =  `Стиль 3`
	stArrowHeadStyles[4] =  `Стиль 4`
	stArrowHeadStyles[5] =  `Стиль 5`
	stArrowHeadStyles[6] =  `Стиль 6`
	stArrowHeadStyles[7] =  `Стиль 7`
	stArrowHeadStyles[8] =  `Стиль 8`
	stArrowHeadStyles[9] =  `Стиль 9`

dim stStartSymbolStyles[4]
	stStartSymbolStyles[1] = `Стиль 1`
	stStartSymbolStyles[2] = `Стиль 2`
	stStartSymbolStyles[3] = `Стиль 3`
	stStartSymbolStyles[4] = `Нет`

dim stPostSymbolType[5]
	stPostSymbolType[1] = `Тип 1`
	stPostSymbolType[2] = `Тип 2`
	stPostSymbolType[3] = `Тип 3`
	stPostSymbolType[4] = `Тип 4`
	stPostSymbolType[5] = `Нет`

dim stRailPosition[4]
	stRailPosition[1] = `Оба`
	stRailPosition[2] = `Справа`
	stRailPosition[3] = `Слева`
	stRailPosition[4] = `Нет`

dim stRailTypes[11]
	stRailTypes[ 1] = `Балюстрада Ограждения`
	stRailTypes[ 2] = `Параллельные Прутья`
	stRailTypes[ 3] = `Простой Брусок`
	stRailTypes[ 4] = `Объемная Рама с Панелью`
	stRailTypes[ 5] = `Объемная Рама`
	stRailTypes[ 6] = `Панель Ограждения`
	stRailTypes[ 7] = `Стойки Ограждения с Балясинами`
	stRailTypes[ 8] = `Стойки с Леерами`
	stRailTypes[ 9] = `Деревянная Балюстрада`
	stRailTypes[10] = `Стойки Ограждения с Брусками`
	stRailTypes[11] = `Как и Правое`

dim stShowCarriageValues[5]
	stShowCarriageValues[1]	= `Всегда`
	stShowCarriageValues[2]	= `До 1:20`
	stShowCarriageValues[3]	= `До 1:50`
	stShowCarriageValues[4]	= `До 1:100`
	stShowCarriageValues[5]	= `До 1:200`

RAILPOS_BOTH				= 1
RAILPOS_RIGHT				= 2
RAILPOS_LEFT				= 3
RAILPOS_NONE				= 4

RAIL_BALUSTRADE				= 1
RAIL_PARALLEL_BARS			= 2
RAIL_SIMPLE_BAR				= 3
RAIL_SOLID_FRAME_FILLED		= 4
RAIL_SOLID_FRAME			= 5
RAIL_SOLID					= 6
RAIL_POST_WITH_BALUSTERS	= 7
RAIL_WIRED					= 8
RAIL_WOODEN_BALUSTRADE		= 9
RAIL_POST_WITH_BARS			= 10
RAIL_SAMERAILS				= 11

RECTANGULAR					= 1
ROUND						= 2

dim stDetlevel2D[2]
	stDetlevel2D[1] = `Зависит от Масштаба`
	stDetlevel2D[2] = `Специальный`

dim stDetlevel3D[3]
	stDetlevel3D[1] = `Откл.`
	stDetlevel3D[2] = `Простой`
	stDetlevel3D[3] = `Детальный`

dim stParameterType[2]
	stParameterType[1] = `На Основе Размеров`
	stParameterType[2] = `На Основе Кол-ва Подступенков`

dim stTopTreadLevel[2]
	stTopTreadLevel[1] = `Верхняя Ступень на Уровне Пола`
	stTopTreadLevel[2] = `Верхняя Ступень Ниже Уровня Пола`

dim stStairBaseType[3]
	stStairBaseType[1] = `Бетон`
	stStairBaseType[2] = `Дерево`
	stStairBaseType[3] = `Нет`

dim stRiseRunText[7]
	stRiseRunText[1] = `Кол-во x Подступенок = Высота Марша`
	stRiseRunText[2] = `Кол-во Проступей/Подступенок @`
	stRiseRunText[3] = `Кол-во х Проступь х Подступенок`
	stRiseRunText[4] = `Кол-во х Подступенок х Проступь`
	stRiseRunText[5] = `Кол-во <текст подступенка> Подступенок / Проступь`
	stRiseRunText[6] = `Кол-во <текст подступенка> // Подступенок / Проступь`
	stRiseRunText[7] = `Специальный Текст`

dim stTextOrientation[3]
	stTextOrientation[1] = `Выровнять по Символу`
	stTextOrientation[2] = `Параллельно Линии Всхода`
	stTextOrientation[3] = `Читаемый`

dim stWalkingDirUPDN[6]
	stWalkingDirUPDN[1] = `Нет`
	stWalkingDirUPDN[2] = `Вверху`
	stWalkingDirUPDN[3] = `Вниз в Нижней Части`
	stWalkingDirUPDN[4] = `Вниз в Верхней Части`
	stWalkingDirUPDN[5] = `Оба`
	stWalkingDirUPDN[6] = `Оба, Зависит от Этажа`

dim stLineTypeAboveBreak[2]
	stLineTypeAboveBreak[1] = `Штриховая`
	stLineTypeAboveBreak[2] = `Сплошная`

dim stBreaklineStyle[3]
	stBreaklineStyle[1]= `Прямой`
	stBreaklineStyle[2]= `Зигзаг`
	stBreaklineStyle[3]= `Зигзаг CHI`

dim stWireType[2]
	stWireType[1]= `Прямоугольные`
	stWireType[2]= `Круглые`


woodBaseThk	= 0.05
flightWidth=b
res=16
rescs=12
ftw=0.05
IF bRiserCover<0.5 THEN riserCoverThk=0

! -------------- 2D Symbol variables --------------

! gs_SymbolType_m
SYMBOL_TYPE1	= 1
SYMBOL_TYPE2	= 2
SYMBOL_TYPE3	= 3
SYMBOL_TYPE4	= 4
SYMBOL_TYPE5	= 5
SYMBOL_TYPE6	= 6
SYMBOL_TYPE7	= 7
SYMBOL_TYPE8	= 8
SYMBOL_TYPE9	= 9
SYMBOL_TYPE10	= 10
SYMBOL_TYPE11	= 11
SYMBOL_TYPE12	= 12
SYMBOL_TYPE13	= 13
SYMBOL_TYPE14	= 14
SYMBOL_TYPE15	= 15
SYMBOL_TYPE16	= 16
SYMBOL_TYPE17	= 17
SYMBOL_TYPE18	= 18
SYMBOL_TYPE19	= 19
SYMBOL_TYPE20	= 20

dim stStairSymbolTypes[20]
	stStairSymbolTypes[ 1] = `Тип 1`
	stStairSymbolTypes[ 2] = `Тип 2`
	stStairSymbolTypes[ 3] = `Тип 3`
	stStairSymbolTypes[ 4] = `Тип 4`
	stStairSymbolTypes[ 5] = `Тип 5`
	stStairSymbolTypes[ 6] = `Тип 6`
	stStairSymbolTypes[ 7] = `Тип 7`
	stStairSymbolTypes[ 8] = `Тип 8`
	stStairSymbolTypes[ 9] = `Тип 9`
	stStairSymbolTypes[10] = `Тип 10`
	stStairSymbolTypes[11] = `Тип 11`
	stStairSymbolTypes[12] = `Тип 12`
	stStairSymbolTypes[13] = `Тип 13`
	stStairSymbolTypes[14] = `Тип 14`
	stStairSymbolTypes[15] = `Тип 15`
	stStairSymbolTypes[16] = `Тип 16`
	stStairSymbolTypes[17] = `Тип 17`
	stStairSymbolTypes[18] = `Тип 18`
	stStairSymbolTypes[19] = `Тип 19`
	stStairSymbolTypes[20] = `Тип 20`

! iSymbolGroup
SYMBOLGROUP_TYPE1	= 1
SYMBOLGROUP_TYPE2	= 2
SYMBOLGROUP_TYPE3	= 3
SYMBOLGROUP_TYPE4	= 4
SYMBOLGROUP_TYPE5	= 5
SYMBOLGROUP_TYPE6	= 6
SYMBOLGROUP_TYPE7	= 7
SYMBOLGROUP_TYPE8	= 8

dim stSymbolGroup[8]
	stSymbolGroup[1] = `Тип 1`
	stSymbolGroup[2] = `Тип 2`
	stSymbolGroup[3] = `Тип 3`
	stSymbolGroup[4] = `Тип 4`
	stSymbolGroup[5] = `Тип 5`
	stSymbolGroup[6] = `Тип 6`
	stSymbolGroup[7] = `Тип 7`
	stSymbolGroup[8] = `Тип 8`

dim	iEnabledSymbolTypes[8][3]
	iEnabledSymbolTypes[1][1] = 1
	iEnabledSymbolTypes[1][2] = 6
	iEnabledSymbolTypes[1][3] = 13

	iEnabledSymbolTypes[2][1] = 2
	iEnabledSymbolTypes[2][2] = 7
	iEnabledSymbolTypes[2][3] = 14

	iEnabledSymbolTypes[3][1] = 3
	iEnabledSymbolTypes[3][2] = 8
	iEnabledSymbolTypes[3][3] = 15

	iEnabledSymbolTypes[4][1] = 4
	iEnabledSymbolTypes[4][2] = 9
	iEnabledSymbolTypes[4][3] = 16

	iEnabledSymbolTypes[5][1] = 5
	iEnabledSymbolTypes[5][2] = 10
	iEnabledSymbolTypes[5][3] = 17

	iEnabledSymbolTypes[6][1] = 4
	iEnabledSymbolTypes[6][2] = 11
	iEnabledSymbolTypes[6][3] = 18

	iEnabledSymbolTypes[7][1] = 4
	iEnabledSymbolTypes[7][2] = 11
	iEnabledSymbolTypes[7][3] = 19

	iEnabledSymbolTypes[8][1] = 5
	iEnabledSymbolTypes[8][2] = 12
	iEnabledSymbolTypes[8][3] = 20


! iScaleType
SCALE_10		= 10
SCALE_20		= 20
SCALE_50		= 50
SCALE_100		= 100
SCALE_200		= 200
SCALE_500		= 500

SCALE_1_1		= 1
SCALE_1_4		= 4
SCALE_1_8		= 8
SCALE_1_16		= 16
SCALE_1_24		= 24
SCALE_1_48		= 48
SCALE_1_96		= 96
SCALE_1_192		= 192
SCALE_CUSTOM	= 999

dim	iScaleType[15]
	iScaleType[1]	= SCALE_10
	iScaleType[2]	= SCALE_20
	iScaleType[3]	= SCALE_50
	iScaleType[4]	= SCALE_100
	iScaleType[5]	= SCALE_200
	iScaleType[6]	= SCALE_500
	iScaleType[7]	= SCALE_1_1
	iScaleType[8]	= SCALE_1_4
	iScaleType[9]	= SCALE_1_8
	iScaleType[10]	= SCALE_1_16
	iScaleType[11]	= SCALE_1_24
	iScaleType[12]	= SCALE_1_48
	iScaleType[13]	= SCALE_1_96
	iScaleType[14]	= SCALE_1_192
	iScaleType[15]	= SCALE_CUSTOM

dim stScaleType[15]
	stScaleType[1]	= `1:10`
	stScaleType[2]	= `1:20`
	stScaleType[3]	= `1:50`
	stScaleType[4]	= `1:100`
	stScaleType[5]	= `1:200`
	stScaleType[6]	= `1:500`
	
	stScaleType[7]	= `1'=1'-0"`
	stScaleType[8]	= `3"=1'-0"`
	stScaleType[9]	= `1 1/2"=1'-0"`
	stScaleType[10]	= `3/4"=1'-0"`
	stScaleType[11]	= `1/2"=1'-0"`
	stScaleType[12]	= `1/4"=1'-0"`
	stScaleType[13]	= `1/8"=1'-0"`
	stScaleType[14]	= `1/16"=1'-0"`
	stScaleType[15]	= `Специальный Масштаб`

if iScaleChangeSM = SCALE_CUSTOM then
	_iScaleSM = gs_ScaleChangeSM
else
	_iScaleSM = iScaleChangeSM
endif
if iScaleChangeMD = SCALE_CUSTOM then
	_iScaleMD = gs_ScaleChangeMD
else
	_iScaleMD = iScaleChangeMD
endif

! -------------- End of 2D Symbol variables --------------

if parameterType_m = 1 then	! Based on Sizes
	treadHeight=(zzyzx/nRisers)
	treadDepth=a/nRisers
endif
ang=atn(treadHeight/treadDepth)	! Pitch ang of Stair
bet=atn((2*treadDepth)/flightWidth)

! --- Rails --------------------------------------------------------------

rightRailOffset = -rightRailOffset
leftRailOffset = -leftRailOffset

IF bSameRails THEN
	leftRailHeight		= rightRailHeight
	leftRailDist		= rightRailDist
	leftRailOffset		= rightRailOffset
	leftRailOvhgBottom	= rightRailOvhgBottom
	leftRailOvhgTop		= rightRailOvhgTop
	leftRailPostSize	= rightRailPostSize
	leftRailFrameThk	= rightRailFrameThk
	nBarsLeftRail		= nBarsRightRail
	leftRailBarThk		= rightRailBarThk
	leftRailBarDepth	= rightRailBarDepth
	leftWireType_m		= rightWireType_m
	leftRailWireThk		= rightRailWireThk
	leftRailWireDepth	= rightRailWireDepth
	leftRailWireDiam	= rightRailWireDiam
ENDIF

bComplexRailRight		= (rightRailType_m > 6)
if bSameRails then
	bComplexRailLeft 	= (rightRailType_m > 6)
else
	bComplexRailLeft 	= (leftRailType_m > 6)
endif

bEnableCarriageLine		= (stairBaseType_m = 2)

]]>
</Script_1D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_VL SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
call "FM_types" parameters all
call "ui_stairs" parameters gs_ui_current_page	= gs_ui_current_page

! ---------- Length Unit ----------
w_units_form = ""
rrr					= request("Linear_dimension", "", w_units_form)
bLinearDimIsMetric	= (strstr(w_units_form, "m") > 0)


! ---------- 3D detail level ----------
values{2} "gs_detlevel_3D_m" 	DET3D_OFF,			stDetlevel3D[1],
								DET3D_SIMPLE,		stDetlevel3D[2],
								DET3D_DETAILED,		stDetlevel3D[3]

if gs_detlevel_3D_m = DET3D_SIMPLE then
	lock "gs_resol"
	hideparameter "gs_resol"
endif

if gs_detlevel_3D_m = DET3D_OFF then
	lock "gs_resol", "gs_shadow"
	hideparameter "gs_resol", "gs_shadow"
endif


!! ---------- 2D detail level ----------
values{2} "gs_detlevel_2D_m"	DET2D_SCALESENSITIVE,	stDetlevel2D[1],
								DET2D_CUSTOM,			stDetlevel2D[2]

!! ---------- Symbol Type ----------
if gs_detlevel_2D_m = DET2D_SCALESENSITIVE then
	values{2} "iSymbolGroup"	SYMBOLGROUP_TYPE1,	stSymbolGroup[1],
								SYMBOLGROUP_TYPE2,	stSymbolGroup[2],
								SYMBOLGROUP_TYPE3,	stSymbolGroup[3],
								SYMBOLGROUP_TYPE4,	stSymbolGroup[4],
								SYMBOLGROUP_TYPE5,	stSymbolGroup[5],
								SYMBOLGROUP_TYPE6,	stSymbolGroup[6],
								SYMBOLGROUP_TYPE7,	stSymbolGroup[7],
								SYMBOLGROUP_TYPE8,	stSymbolGroup[8]

	lock			"gs_SymbolType_m"
	hideparameter	"gs_SymbolType_m"


	!! ----------------- Simple to Middle Scale -----------------
	if bLinearDimIsMetric then
		_iEnableScaleSMTypes	= 2 + 4 + 8 + 16 + 32 + 64
	else
		_iEnableScaleSMTypes	= 128 + 256 + 512 + 1024 + 2048 + 4096 + 8192 + 16384
	endif

	dim _iEnableScaleSMTypeValueList[]
	dim _stEnableScaleSMTypeValueList[]
	j = 1
	for i = 1 to vardim1(iScaleType)
		if bittest(_iEnableScaleSMTypes, i) then
			_iEnableScaleSMTypeValueList[j] = iScaleType[i]
			_stEnableScaleSMTypeValueList[j] = stScaleType[i]
			j = j + 1
		endif
	next i
	_iEnableScaleSMTypeValueList[j] = iScaleType[15]
	_stEnableScaleSMTypeValueList[j] = stScaleType[15]
	values{2} "iScaleChangeSM" _iEnableScaleSMTypeValueList, _stEnableScaleSMTypeValueList
	if iScaleChangeSM = SCALE_CUSTOM then
		values "gs_ScaleChangeSM"	range (1,)
	else
		gs_ScaleChangeSM = iScaleChangeSM
		parameters	gs_ScaleChangeSM = gs_ScaleChangeSM

		lock			"gs_ScaleChangeSM"
		hideparameter	"gs_ScaleChangeSM"
	endif

	
	!! ----------------- Middle to Detailed Scale -----------------
	if bLinearDimIsMetric then
		_iEnableScaleMDTypes	= 2 + 4 + 8 + 16 + 32 + 64
	else
		_iEnableScaleMDTypes	= 128 + 256 + 512 + 1024 + 2048 + 4096 + 8192 + 16384
	endif

	dim _iEnableScaleMDTypeValueList[]
	dim _stEnableScaleMDTypeValueList[]
	j = 1
	for i = 1 to vardim1(iScaleType)
		if bittest(_iEnableScaleMDTypes, i) then
			if iScaleChangeSM = SCALE_CUSTOM then
				if gs_ScaleChangeSM > iScaleType[i] then
					_iEnableScaleMDTypeValueList[j] = iScaleType[i]
					_stEnableScaleMDTypeValueList[j] = stScaleType[i]
					j = j + 1
				else
					i = vardim1(iScaleType)
				endif
			else
				_iEnableScaleMDTypeValueList[j] = iScaleType[i]
				_stEnableScaleMDTypeValueList[j] = stScaleType[i]

				if gs_ScaleChangeSM = _iEnableScaleSMTypeValueList[j] then
					i = vardim1(iScaleType)
				else
					j = j + 1
				endif
			endif
		endif
	next i
	_iEnableScaleMDTypeValueList[j] = iScaleType[15]
	_stEnableScaleMDTypeValueList[j] = stScaleType[15]
	values{2} "iScaleChangeMD" _iEnableScaleMDTypeValueList, _stEnableScaleMDTypeValueList

	if iScaleChangeMD = SCALE_CUSTOM then
		values "gs_ScaleChangeMD"	range (, _iScaleSM)
	else
		gs_ScaleChangeMD = iScaleChangeMD
		parameters	gs_ScaleChangeMD = gs_ScaleChangeMD

		lock			"gs_ScaleChangeMD"
		hideparameter	"gs_ScaleChangeMD"
	endif
	if (gs_ScaleChangeMD >= gs_ScaleChangeSM)  then
		gs_ScaleChangeMD = gs_ScaleChangeSM - 1
		parameters	gs_ScaleChangeMD = gs_ScaleChangeMD
	endif
else
	values{2} "gs_SymbolType_m"	SYMBOL_TYPE1,	stStairSymbolTypes[1],
								SYMBOL_TYPE2,	stStairSymbolTypes[2],
								SYMBOL_TYPE3,	stStairSymbolTypes[3],
								SYMBOL_TYPE4,	stStairSymbolTypes[4],
								SYMBOL_TYPE5,	stStairSymbolTypes[5],
								SYMBOL_TYPE6,	stStairSymbolTypes[6],
								SYMBOL_TYPE7,	stStairSymbolTypes[7],
								SYMBOL_TYPE8,	stStairSymbolTypes[8],
								SYMBOL_TYPE9,	stStairSymbolTypes[9],
								SYMBOL_TYPE10,	stStairSymbolTypes[10],
								SYMBOL_TYPE11,	stStairSymbolTypes[11],
								SYMBOL_TYPE12,	stStairSymbolTypes[12],
								SYMBOL_TYPE13,	stStairSymbolTypes[13],
								SYMBOL_TYPE14,	stStairSymbolTypes[14],
								SYMBOL_TYPE15,	stStairSymbolTypes[15],
								SYMBOL_TYPE16,	stStairSymbolTypes[16],
								SYMBOL_TYPE17,	stStairSymbolTypes[17],
								SYMBOL_TYPE18,	stStairSymbolTypes[18],
								SYMBOL_TYPE19,	stStairSymbolTypes[19],
								SYMBOL_TYPE20,	stStairSymbolTypes[20]

	lock			"iSymbolGroup",
					"gs_ScaleChangeSM",
					"iScaleChangeSM",
					"gs_ScaleChangeMD",
					"iScaleChangeMD"
	hideparameter	"iSymbolGroup",
					"gs_ScaleChangeSM",
					"iScaleChangeSM",
					"gs_ScaleChangeMD",
					"iScaleChangeMD"
endif


! ====================================================================
! Base
! ====================================================================

VALUES "parameterType" stParameterType			! Based on Sizes, Based on Risers No.
if GLOB_MODPAR_NAME = "parameterType" then
	for i = 1 to vardim1(stParameterType)
	   if parameterType = stParameterType[i]	then parameterType_m = i
	next i
	parameters parameterType_m = parameterType_m
else
	parameters parameterType = stParameterType[parameterType_m]
endif

values "topTreadLevel"	stTopTreadLevel			! Top Tread at Floor Level, Top Tread below Floor Level
if GLOB_MODPAR_NAME = "topTreadLevel" then
	for i = 1 to vardim1(stTopTreadLevel)
	   if topTreadLevel = stTopTreadLevel[i]	then topTreadLevel_m = i
	next i
	parameters topTreadLevel_m = topTreadLevel_m
else
	parameters topTreadLevel = stTopTreadLevel[topTreadLevel_m]
endif

values "stairBaseType"	stStairBaseType			! Concrete, Wood, None
values "stairBaseType_m" 1, 2, 3
if GLOB_MODPAR_NAME = "stairBaseType" then
	stairBaseType_m = 1
	for i = 1 to vardim1(stStairBaseType)
	   if stairBaseType = stStairBaseType[i]	then stairBaseType_m = i
	next i
	parameters stairBaseType_m = stairBaseType_m
else
	stairBaseType_m = max(1, min(stairBaseType_m, vardim1(stStairBaseType)))
	stairBaseType = stStairBaseType[stairBaseType_m]
	parameters stairBaseType = stairBaseType, stairBaseType_m = stairBaseType_m
endif

VALUES "nWoodCarriages" 1,2

! ====================================================================
! 2D Text
! ====================================================================

! ---------- Rise & Run Text ----------

values "gs_RiseRunText" stRiseRunText
values "iRiseRunText" 1, 2, 3, 4, 5, 6, 99

if GLOB_MODPAR_NAME = "gs_RiseRunText" then
	for i = 1 to vardim1(stRiseRunText)
	   if gs_RiseRunText = stRiseRunText[i]	then iRiseRunText = i
	next i
	if gs_RiseRunText = stRiseRunText[7]	then iRiseRunText = 99
	parameters iRiseRunText = iRiseRunText
else
	if iRiseRunText = 99 then
		gs_RiseRunText = stRiseRunText[7]
	else
		gs_RiseRunText = stRiseRunText[max(1, min(iRiseRunText, vardim1(stRiseRunText)) )]
	endif
	parameters gs_RiseRunText = gs_RiseRunText
endif

values "typeTextRotation_RiseRun" stTextOrientation[3],stTextOrientation[1]	! Readable, Align with Symbol
if GLOB_MODPAR_NAME = "typeTextRotation_RiseRun" then
	for i = 1 to 3
		if typeTextRotation_RiseRun = stTextOrientation[i]	then typeTextRotation_RiseRun_m = i-1
	next i
	parameters typeTextRotation_RiseRun_m = typeTextRotation_RiseRun_m
else
	parameters typeTextRotation_RiseRun = stTextOrientation[typeTextRotation_RiseRun_m+1]
endif

! ---------- Numbering ----------

values "typeTextRotation_Num" stTextOrientation[3],stTextOrientation[1]	! Readable, Align with Symbol
if GLOB_MODPAR_NAME = "typeTextRotation_Num" then
	for i = 1 to 3
		if typeTextRotation_Num = stTextOrientation[i]	then typeTextRotation_Num_m = i-1
	next i
	parameters typeTextRotation_Num_m = typeTextRotation_Num_m
else
	parameters typeTextRotation_Num = stTextOrientation[typeTextRotation_Num_m+1]
endif

! ---------- UP & Down ----------

values "walkingDirUPDN" stWalkingDirUPDN			! None, Up, Down at Bottom, Down at Top, Both, Both Sensitive
values "walkingDirUPDN_m" 1, 2, 3, 4, 5, 6
if GLOB_MODPAR_NAME = "walkingDirUPDN" then
	walkingDirUPDN_m = 1
	for i = 1 to vardim1(stWalkingDirUPDN)
	   if walkingDirUPDN = stWalkingDirUPDN[i]	then walkingDirUPDN_m = i
	next i
	parameters walkingDirUPDN_m = walkingDirUPDN_m
else
	walkingDirUPDN_m = max(1, min(walkingDirUPDN_m, vardim1(stWalkingDirUPDN)))
	walkingDirUPDN = stWalkingDirUPDN[walkingDirUPDN_m]
	parameters walkingDirUPDN = walkingDirUPDN, walkingDirUPDN_m = walkingDirUPDN_m
endif

values "typeTextRotation_UpDn" stTextOrientation[3],stTextOrientation[2],stTextOrientation[1]	! Readable, Parallel with, Align with Symbol
if GLOB_MODPAR_NAME = "typeTextRotation_UpDn" then
	for i = 1 to 3
		if typeTextRotation_UpDn = stTextOrientation[i]	then typeTextRotation_UpDn_m = i-1
	next i
	parameters typeTextRotation_UpDn_m = typeTextRotation_UpDn_m
else
	parameters typeTextRotation_UpDn = stTextOrientation[typeTextRotation_UpDn_m+1]
endif

VALUES "lineTypeAboveBreak" stLineTypeAboveBreak
if GLOB_MODPAR_NAME = "lineTypeAboveBreak" then
	for i = 1 to vardim1(stLineTypeAboveBreak)
	   if lineTypeAboveBreak = stLineTypeAboveBreak[i]	then lineTypeAboveBreak_m = i
	next i
	parameters lineTypeAboveBreak_m = lineTypeAboveBreak_m
else
	parameters lineTypeAboveBreak = stLineTypeAboveBreak[lineTypeAboveBreak_m]
endif

VALUES "arrow_style" 	stArrowHeadStyles		! Style 1 - 9
values "arrow_style_m" 1, 2, 3, 4, 5, 6, 7, 8, 9
if GLOB_MODPAR_NAME = "arrow_style" then
	for i = 1 to vardim1(stArrowHeadStyles)
	   if arrow_style = stArrowHeadStyles[i]	then arrow_style_m = i
	next i
	parameters arrow_style_m = arrow_style_m
else
	parameters arrow_style = stArrowHeadStyles[arrow_style_m]
endif

values "gs_StartEndStyle"	stStartSymbolStyles			! Style 1, Style 2, Style 3, None
values "gs_StartEndStyle_m" 1, 2, 3, 4
if GLOB_MODPAR_NAME = "gs_StartEndStyle" then
	gs_StartEndStyle_m = 1
	for i = 1 to vardim1(stStartSymbolStyles)
	   if gs_StartEndStyle = stStartSymbolStyles[i]	then gs_StartEndStyle_m = i
	next i
	parameters gs_StartEndStyle_m = gs_StartEndStyle_m
else
	gs_StartEndStyle_m = max(1, min(gs_StartEndStyle_m, vardim1(stStartSymbolStyles)))
	gs_StartEndStyle = stStartSymbolStyles[gs_StartEndStyle_m]
	parameters gs_StartEndStyle = gs_StartEndStyle, gs_StartEndStyle_m = gs_StartEndStyle_m
endif

if bSimpleZigZag then
	VALUES "breakline_style" stBreaklineStyle[1],stBreaklineStyle[3]	! Straight, Zigzag CHI
	values "breakline_style_m" 1, 3
else
	VALUES "breakline_style" stBreaklineStyle[1],stBreaklineStyle[2]	! Straight, Zigzag
	values "breakline_style_m" 1, 2
endif
if GLOB_MODPAR_NAME = "breakline_style" then
	for i = 1 to vardim1(stBreaklineStyle)
	   if breakline_style = stBreaklineStyle[i]	then breakline_style_m = i
	next i
	parameters breakline_style_m = breakline_style_m
else
	parameters breakline_style = stBreaklineStyle[breakline_style_m]
endif

!values "gs_BreakHeight" range (0,ZZYZX - treadDepth)
VALUES "breakLineWidth"	RANGE (0,treadDepth]

! ====================================================================
! Rail
! ====================================================================

values "rail_m" 1, 2, 3, 4
if GLOB_MODPAR_NAME = "bRightRail" or GLOB_MODPAR_NAME = "bLeftRail" then
	if bRightRail then
		if bLeftRail then
			rail_m = RAILPOS_BOTH
		else
			rail_m = RAILPOS_RIGHT
		endif
	else
		if bLeftRail then
			rail_m = RAILPOS_LEFT
		else
			rail_m = RAILPOS_NONE
		endif
	endif
	parameters rail_m = rail_m
else
	if rail_m = 1 then
		bRightRail	= 1
		bLeftRail	= 1
	endif
	if rail_m = 2 then
		bRightRail	= 1
		bLeftRail	= 0
	endif
	if rail_m = 3 then
		bRightRail	= 0
		bLeftRail	= 1
	endif
	if rail_m = 4 then
		bRightRail	= 0
		bLeftRail	= 0
	endif
	parameters bRightRail	= bRightRail
	parameters bLeftRail	= bLeftRail
endif

if NOT(bRightRail) then
	lock			"rightRailType"
	hideparameter	"rightRailType"
endif
if NOT(bLeftRail) then
	lock			"leftRailType"
	hideparameter	"leftRailType"
endif

VALUES "rightRailType" 	stRailTypes[1],
						stRailTypes[2],
						stRailTypes[3],
						stRailTypes[4],
						stRailTypes[5],
						stRailTypes[6],
						stRailTypes[7],
						stRailTypes[8],
						stRailTypes[9],
						stRailTypes[10]

if GLOB_MODPAR_NAME = "rightRailType" then
	for i = 1 to vardim1(stRailTypes)
	   if rightRailType = stRailTypes[i]	then rightRailType_m = i
	next i
	parameters rightRailType_m = rightRailType_m
else
	parameters rightRailType = stRailTypes[rightRailType_m]
endif

if rail_m = RAILPOS_BOTH then		! Both
	VALUES "leftRailType" 	stRailTypes
else
	VALUES "leftRailType" 	stRailTypes[1],
							stRailTypes[2],
							stRailTypes[3],
							stRailTypes[4],
							stRailTypes[5],
							stRailTypes[6],
							stRailTypes[7],
							stRailTypes[8],
							stRailTypes[9],
							stRailTypes[10]
endif
if GLOB_MODPAR_NAME = "leftRailType" then
	for i = 1 to vardim1(stRailTypes)
	   if leftRailType = stRailTypes[i]	then leftRailType_m = i
	next i
	parameters leftRailType_m = leftRailType_m
else
	parameters leftRailType = stRailTypes[leftRailType_m]
endif
bSameRails = (leftRailType_m = RAIL_SAMERAILS)
parameters bSameRails = bSameRails

values "rightWireType" stWireType	! Rectangular, Round
values "leftWireType" stWireType	! Rectangular, Round

if GLOB_MODPAR_NAME = "leftWireType" then
	for i = 1 to vardim1(stWireType)
	   if leftWireType = stWireType[i]	then leftWireType_m = i
	next i
	parameters leftWireType_m = leftWireType_m
else
	parameters leftWireType = stWireType[leftWireType_m]
endif

if GLOB_MODPAR_NAME = "rightWireType" then
	for i = 1 to vardim1(stWireType)
	   if rightWireType = stWireType[i]	then rightWireType_m = i
	next i
	parameters rightWireType_m = rightWireType_m
else
	parameters rightWireType = stWireType[rightWireType_m]
endif

if rightRailType_m = 2 THEN
	values "nBarsRightRail" 2,3,4,5,6
else
	values "nBarsRightRail" 1,2,3,4,5,6
endif
if leftRailType_m = 2 | bSameRails & rightRailType_m = 2 THEN
	values "nBarsLeftRail" 2,3,4,5,6
else
	values "nBarsLeftRail" 1,2,3,4,5,6
endif

! --- HIDE RAILING PARAMETERS ---

LOCK "ggr","sgr","ggl","sgl"

IF leftRailType_m = RAIL_BALUSTRADE THEN
	HIDEPARAMETER	"leftRailPostSize",
					"nBarsLeftRail"
ENDIF
IF leftRailType_m = RAIL_PARALLEL_BARS THEN
	HIDEPARAMETER	"leftRailBarThk",
					"leftRailPostSize"
ENDIF
IF leftRailType_m = RAIL_SIMPLE_BAR THEN
	HIDEPARAMETER	"leftRailBarThk",
					"leftRailPostSize",
					"nBarsLeftRail"
ENDIF
IF leftRailType_m = RAIL_SOLID_FRAME_FILLED THEN
	HIDEPARAMETER	"leftRailPostSize",
					"leftRailBarDepth",
					"nBarsLeftRail"
ENDIF
IF leftRailType_m = RAIL_SOLID_FRAME THEN
	HIDEPARAMETER	"leftRailPostSize",
					"leftRailBarDepth",
					"nBarsLeftRail",
					"leftRailBarThk"
ENDIF
IF leftRailType_m = RAIL_SOLID THEN
	HIDEPARAMETER	"leftRailPostSize",
					"leftRailBarDepth",
					"nBarsLeftRail",
					"leftRailBarThk"
ENDIF
IF leftRailType_m = RAIL_WIRED THEN
	HIDEPARAMETER	"leftRailBarDepth"
	if leftWireType_m = 1 then HIDEPARAMETER	"leftRailWireDiam"
	if leftWireType_m = 2 then HIDEPARAMETER	"leftRailWireThk",
												"leftRailWireDepth"
else
	HIDEPARAMETER	"leftWireType",
					"leftRailWireThk",
					"leftRailWireDepth",
					"leftRailWireDiam"
ENDIF
IF leftRailType_m = RAIL_WOODEN_BALUSTRADE THEN
	HIDEPARAMETER	"leftRailPostSize",
					"leftRailBarDepth",
					"nBarsLeftRail",
					"leftRailBarThk"
ENDIF



IF rightRailType_m = RAIL_BALUSTRADE THEN
	HIDEPARAMETER	"rightRailPostSize",
					"nBarsRightRail"
ENDIF
IF rightRailType_m = RAIL_PARALLEL_BARS THEN
	HIDEPARAMETER	"rightRailBarThk",
					"rightRailPostSize"
ENDIF
IF rightRailType_m = RAIL_SIMPLE_BAR THEN
	HIDEPARAMETER	"rightRailBarThk",
					"rightRailPostSize",
					"nBarsRightRail"
ENDIF
IF rightRailType_m = RAIL_SOLID_FRAME_FILLED THEN
	HIDEPARAMETER	"rightRailPostSize",
					"rightRailBarDepth",
					"nBarsRightRail"
ENDIF
IF rightRailType_m = RAIL_SOLID_FRAME THEN
	HIDEPARAMETER	"rightRailPostSize",
					"rightRailBarDepth",
					"nBarsRightRail",
					"rightRailBarThk"
ENDIF
IF rightRailType_m = RAIL_SOLID THEN
	HIDEPARAMETER	"rightRailPostSize",
					"rightRailBarDepth",
					"nBarsRightRail",
					"rightRailBarThk"
ENDIF
IF rightRailType_m = RAIL_WIRED THEN
	HIDEPARAMETER	"rightRailBarDepth"
	if rightWireType_m = 1 then HIDEPARAMETER	"rightRailWireDiam"
	if rightWireType_m = 2 then HIDEPARAMETER	"rightRailWireThk",
												"rightRailWireDepth"
else
	HIDEPARAMETER	"rightWireType",
					"rightRailWireThk",
					"rightRailWireDepth",
					"rightRailWireDiam"
ENDIF
IF rightRailType_m = RAIL_WOODEN_BALUSTRADE THEN
	HIDEPARAMETER	"rightRailPostSize",
					"rightRailBarDepth",
					"nBarsRightRail",
					"rightRailBarThk"
ENDIF

IF rail_m = RAILPOS_NONE | rail_m = RAILPOS_LEFT THEN		! None, Left
	HIDEPARAMETER "rightRailType", "ggr", "rightRailHeight", "rightRailDist", "rightRailOffset", "sgr",
		"rightRailFrameThk", "rightRailBarThk"
ENDIF
IF rail_m = RAILPOS_NONE | rail_m = RAILPOS_RIGHT THEN		! None, Right
	HIDEPARAMETER "leftRailType", "ggl", "leftRailHeight", "leftRailDist", "leftRailOffset", "sgl",
		"leftRailFrameThk", "leftRailBarThk"
ENDIF

IF rail_m = RAILPOS_NONE THEN HIDEPARAMETER "matPost","matHandrail","matSurface","matBar"		! None

IF bSameRails or NOT(bLeftRail) THEN
	HIDEPARAMETER	"ggl",
					"leftRailHeight",
					"leftRailDist",
					"leftRailOffset",
					"sgl",
					"leftRailHeight",
					"leftRailDist",
					"leftRailOffset",
					"leftRailOvhgBottom",
					"leftRailWireDiam",
					"leftWireType",
					"leftRailWireThk",
					"leftRailWireDepth",
					"leftRailOvhgTop",
					"leftRailPostSize",
					"leftRailFrameThk",
					"nBarsLeftRail",
					"leftRailBarThk",
					"leftRailBarDepth"
ENDIF
IF NOT(bRightRail) THEN
	HIDEPARAMETER	"ggr",
					"rightRailHeight",
					"rightRailDist",
					"rightRailOffset",
					"sgr",
					"rightRailHeight",
					"rightRailDist",
					"rightRailOffset",
					"rightRailOvhgBottom",
					"rightRailWireDiam",
					"rightWireType",
					"rightRailWireThk",
					"rightRailWireDepth",
					"rightRailOvhgTop",
					"rightRailPostSize",
					"rightRailFrameThk",
					"nBarsRightRail",
					"rightRailBarThk",
					"rightRailBarDepth"
ENDIF

! ==============================================================================
! Symbolic 2D
! ==============================================================================

values "postSymbolType" stPostSymbolType
values "iPostSymbolType" 1, 2, 3, 4, 0
if GLOB_MODPAR_NAME = "postSymbolType" then
	iPostSymbolType = 1
	if postSymbolType = stPostSymbolType[2] then iPostSymbolType = 2
	if postSymbolType = stPostSymbolType[3] then iPostSymbolType = 3
	if postSymbolType = stPostSymbolType[4] then iPostSymbolType = 4
	if postSymbolType = stPostSymbolType[5] then iPostSymbolType = 0
	parameters iPostSymbolType = iPostSymbolType
else
	postSymbolType = stPostSymbolType[1]
	if iPostSymbolType = 2 then postSymbolType = stPostSymbolType[2]
	if iPostSymbolType = 3 then postSymbolType = stPostSymbolType[3]
	if iPostSymbolType = 4 then postSymbolType = stPostSymbolType[4]
	if iPostSymbolType = 0 then postSymbolType = stPostSymbolType[5]
	parameters postSymbolType = postSymbolType
endif

if NOT(bShowRailOnFloorPlan) then
	lock			"railLineType",
					"railPen",
					"bSymbolic2D",
					"postSymbolType",
					"iPostSymbolType",
					"postLineType",
					"postPen",
					"bShowRailAboveBreakLine"
	hideparameter	"railLineType",
					"railPen",
					"bSymbolic2D",
					"postSymbolType",
					"iPostSymbolType",
					"postLineType",
					"postPen",
					"bShowRailAboveBreakLine"
endif
if NOT(iPostSymbolType) then
	lock			"postLineType",
					"postPen"
	hideparameter	"postLineType",
					"postPen"
endif
if NOT(bSymbolic2D) then
	lock			"postSymbolType",
					"iPostSymbolType",
					"postLineType",
					"postPen"
	hideparameter	"postSymbolType",
					"iPostSymbolType",
					"postLineType",
					"postPen"
endif
if not(bShowRailAxis) then
	lock 			"railAxisLineType",
					"gs_RailAxisPen"
	hideparameter	"railAxisLineType",
					"gs_RailAxisPen"
endif
if	gs_detlevel_2D_m = DET2D_CUSTOM &\
	(gs_SymbolType_m = 3 |\
	gs_SymbolType_m = 8 |\
	gs_SymbolType_m = 15) then
	lock			"bShowRailAboveBreakLine"
	hideparameter	"bShowRailAboveBreakLine"
endif
if NOT(bShowCarriage) then
	lock			"iShowCarriageUpTo",
					"stShowCarriageUpTo",
					"carriageLineType",
					"carriagePen"
	hideparameter	"stShowCarriageUpTo",
					"carriageLineType",
					"carriagePen"
endif
if NOT(bEnableCarriageLine) then
	lock			"bShowCarriage",
					"iShowCarriageUpTo",
					"stShowCarriageUpTo",
					"carriageLineType",
					"carriagePen"
	hideparameter	"bShowCarriage",
					"stShowCarriageUpTo",
					"carriageLineType",
					"carriagePen"
endif

values "stShowCarriageUpTo" stShowCarriageValues
values "iShowCarriageUpTo" 1, 20, 50, 100, 200

if GLOB_MODPAR_NAME = "stShowCarriageUpTo" then
	iShowCarriageUpTo = 1
	if stShowCarriageUpTo = stShowCarriageValues[2]	then iShowCarriageUpTo = 20
	if stShowCarriageUpTo = stShowCarriageValues[3]	then iShowCarriageUpTo = 50
	if stShowCarriageUpTo = stShowCarriageValues[4]	then iShowCarriageUpTo = 100
	if stShowCarriageUpTo = stShowCarriageValues[5]	then iShowCarriageUpTo = 200
	parameters iShowCarriageUpTo = iShowCarriageUpTo
else
	stShowCarriageUpTo = stShowCarriageValues[1]
	if iShowCarriageUpTo = 20	then stShowCarriageUpTo = stShowCarriageValues[2]
	if iShowCarriageUpTo = 50	then stShowCarriageUpTo = stShowCarriageValues[3]
	if iShowCarriageUpTo = 100	then stShowCarriageUpTo = stShowCarriageValues[4]
	if iShowCarriageUpTo = 200	then stShowCarriageUpTo = stShowCarriageValues[5]
	parameters stShowCarriageUpTo = stShowCarriageUpTo
endif

! ====================================================================
! End Of Rail
! ====================================================================

! --- Pens ---

dim iPenNumber[255]
for i=1 to 255
	iPenNumber[i]=i
next i

values "gs_cont_pen"		iPenNumber
values "gs_DashLinePen"		iPenNumber
values "railPen"			iPenNumber
values "gs_RailAxisPen"		iPenNumber
values "postPen"			iPenNumber
values "carriagePen"		iPenNumber
values "gs_fill_pen"		iPenNumber
values "gs_wLinePen"		iPenNumber
values "gs_NumTextPen"		iPenNumber
values "gs_text_pen"		iPenNumber
values "UPDNfontpen"		iPenNumber
values "gs_desc_text_pen"	iPenNumber
values "gs_LinePenStUp"		iPenNumber

! --- CALCULATE TREADS PARAMETERS ---
IF parameterType_m = 1 THEN	! Based on Sizes
	treadHeight=(zzyzx/nRisers)
	treadDepth=a/nRisers
	Parameters treadDepth=treadDepth,treadHeight=treadHeight
	LOCK "treadDepth","treadHeight"
ENDIF

IF parameterType_m = 2 THEN	! Based on Risers No.
	a=nRisers*treadDepth
	zzyzx=nRisers*treadHeight
	Parameters a=a,zzyzx=zzyzx
	LOCK "a","zzyzx"
ENDIF

! --- CONTROLED PARAMETERS ---

VALUES "stairSlabThk" RANGE (0,)
VALUES "treadHeight"		RANGE [0.05,)
VALUES "treadDepth" 	RANGE [0.1, )
VALUES "nosing" RANGE [0,treadDepth/2)
VALUES "B" RANGE (0,)


IF NOT(bEnableCarriageLine) THEN
	HIDEPARAMETER "woodCarriageOffsetRight","woodCarriageOffsetLeft","nWoodCarriages"
ELSE
	IF nWoodCarriages=1 THEN HIDEPARAMETER "woodCarriageOffsetLeft"
ENDIF

IF stairBaseType_m = 3 THEN HIDEPARAMETER "stairSlabThk"

IF bRiserCover=0 THEN HIDEPARAMETER "riserCoverThk","matRiser",
									"penLineRiser",
									"typeFillRiser",
									"penFillRiser",
									"penBackFillRiser"

! --- HIDE MATERIAL PARAMETERS ---

! None
IF stairBaseType_m = 3 THEN HIDEPARAMETER "matBase",		
										"penLineStringer",
										"typeFillStringer",
										"penFillStringer",
										"penBackFillStringer"

IF treadThickness<0.0001 THEN HIDEPARAMETER "matTread",
											"penLineTread",
											"typeFillTread",
											"penFillTread",
											"penBackFillTread"

! ==============================================================================
! Settings of 2D Symbol Type
! ==============================================================================

! --- GENERAL SETTINGS ---
	LOCK	"gs_ArrowFill","gs_ArrowHeight","gs_ArrowHalfWidth",
			"gs_StartEndFill","gs_StartWidth","gs_StartHeight",
			"DirNumText_X","DirNumText_Y",
			"DirUPDN_X","DirUPDN_Y","AngUPDN",
			"bSameRails","breakLineWidth"

	IF bShowWalkLine=0 THEN
		 HIDEPARAMETER 	"gs_wLineType1","gs_wLineTypeAbove",
						"gs_wLinePen","arrow_style","gs_ArrowFillPen","gs_ArrowFillPenAbove", "bShowWalkLineAboveBreakline", "gs_circleRadius",
						"gs_StartEndStyle","gs_StartEndFillPen","bShowRiseAndRunText","walkingDirUPDN","UPDNfontsize","gs_text_size_pt_UpDn"

		 LOCK	"gs_wLineType1","gs_wLineTypeAbove",
				"gs_wLinePen","arrow_style","gs_ArrowFillPen","gs_ArrowFillPenAbove", "bShowWalkLineAboveBreakline", "gs_circleRadius",
				"gs_StartEndStyle","gs_StartEndFillPen","bShowRiseAndRunText","walkingDirUPDN","UPDNfontsize","gs_text_size_pt_UpDn"
	ENDIF

	IF arrow_style_m = 1 | arrow_style_m = 2 | arrow_style_m = 3 THEN
		 lock 	"gs_ArrowFillPen","gs_ArrowFillPenAbove"
		 HIDEPARAMETER 	"gs_ArrowFillPen","gs_ArrowFillPenAbove"
	ENDIF

	IF gs_StartEndStyle_m = 3 | gs_StartEndStyle_m = 4  THEN		! Style 3, None
		 HIDEPARAMETER 	"gs_StartEndFillPen"
	ENDIF

	if not(bShowNumbering)  then
		 lock 	"nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen", "typeTextRotation_Num"
		 hideparameter 	"nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen", "typeTextRotation_Num"
	endif

	if not(bShowRiseAndRunText) then
		lock 	"gs_RiseRunText","gs_CustomText1","gs_CustomText2","gs_customText_rise", "fontsize", "gs_text_size_pt", "typeTextRotation_RiseRun", "gs_text_pen", "bUseACLinearUnit"
		hideparameter 	"gs_RiseRunText","gs_CustomText1","gs_CustomText2", "gs_customText_rise", "fontsize", "gs_text_size_pt", "typeTextRotation_RiseRun", "gs_text_pen", "bUseACLinearUnit"
	endif

	if iRiseRunText < 99 then
		hideparameter 	"gs_CustomText1","gs_CustomText2"
		lock		 	"gs_CustomText1","gs_CustomText2"
	else
		if bLinearDimIsMetric then
			hideparameter 	"gs_CustomText2"
			lock		 	"gs_CustomText2"
		endif
	endif

	if iRiseRunText <> 5 & iRiseRunText <> 6 then
		lock "gs_customText_rise"
		hideparameter "gs_customText_rise"
	endif

	if walkingDirUPDN_m = 1 then	! None
		 lock 	"UPDNfontsize","gs_text_size_pt_UpDn", "UPDNfontpen","AngUPDN", "typeTextRotation_UpDn"
		 hideparameter 	"UPDNfontsize", "gs_text_size_pt_UpDn", "UPDNfontpen","AngUPDN", "typeTextRotation_UpDn"
	endif
	if walkingDirUPDN_m = 1 | walkingDirUPDN_m = 2 then	! None, Up
		lock "gs_CustomText_Down"
		hideparameter "gs_CustomText_Down"
	endif

	! --- SETTINGS BY SYMBOL TYPES ---

	if gs_detlevel_2D_m = DET2D_CUSTOM then
		IF gs_SymbolType_m = 1 THEN		! Type 1
			HIDEPARAMETER	"bShowNumbering","nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen",
							"gs_ArrowFillPenAbove","gs_FillAbove"

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=0
				PARAMETERS gs_BreaklineStUp=0
				PARAMETERS gs_TreadStUp=0
				PARAMETERS gs_numaStUp=0
			ENDIF

		ENDIF

		IF gs_SymbolType_m = 2 THEN		! Type 2
			HIDEPARAMETER 	"bShowNumbering","nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen",
							"gs_ArrowFillPenAbove","gs_FillAbove"

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=0
				PARAMETERS gs_BreaklineStUp=0
				PARAMETERS gs_TreadStUp=0
				PARAMETERS gs_numaStUp=0
			ENDIF

		ENDIF

		IF gs_SymbolType_m = 3 THEN		! Type 3
			HIDEPARAMETER 	"bShowNumbering","nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen",
							"gs_ArrowFillPenAbove","gs_FillAbove"

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=0
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=0
				PARAMETERS gs_numaStUp=0
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 4 THEN		! Type 4
			HIDEPARAMETER 	"bShowNumbering","nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen"

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=0
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=0
				PARAMETERS gs_numaStUp=0
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 5 THEN		! Type 5
			HIDEPARAMETER 	"bShowNumbering","nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen"

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=0
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=0
				PARAMETERS gs_numaStUp=0
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 6 THEN		! Type 6
			HIDEPARAMETER "gs_ArrowFillPenAbove","gs_FillAbove"

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=0
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 7 THEN		! Type 7
			HIDEPARAMETER 	"gs_ArrowFillPenAbove","gs_FillAbove"
			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=0
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 8 THEN		! Type 8
			HIDEPARAMETER 	"bShowNumbering","nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen",
							"gs_ArrowFillPenAbove","gs_FillAbove"

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 9 THEN		! Type 9
			HIDEPARAMETER 	"bShowNumbering","nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen"

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 10 THEN		! Type 10
			HIDEPARAMETER 	"bShowNumbering","nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen"
			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 11 THEN		! Type 11

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 12 THEN		! Type 12

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 13 THEN		! Type 13
			HIDEPARAMETER 	"gs_FillAbove"
			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=0
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 14 THEN		! Type 14
			HIDEPARAMETER 	"gs_FillAbove"
			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=0
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 15 THEN		! Type 15
			HIDEPARAMETER 	"bShowNumbering","nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen",
							"gs_FillAbove"

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 16 THEN		! Type 16
			HIDEPARAMETER 	"bShowNumbering","nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen"

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 17 THEN		! Type 17
			HIDEPARAMETER 	"bShowNumbering","nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen"

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 18 THEN		! Type 18

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 19 THEN		! Type 19

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 20 THEN		! Type 20
			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF
	endif
	
! ======================================================================
! Above Home Story
! ======================================================================
IF not(bStorySensitive) THEN
	HIDEPARAMETER "gs_AboveHomeStory"
ELSE
	IF not(gs_BreaklineStUp) THEN HIDEPARAMETER "gs_LowerPartStUp","gs_UpperPartStUp"
	IF gs_BreaklineStUp | not(gs_TreadStUp) THEN HIDEPARAMETER "gs_numaStUp"
	IF not(gs_LowerPartStUp) & not(gs_UpperPartStUp) & gs_BreaklineStUp THEN HIDEPARAMETER "gs_TreadStUp"
ENDIF

! ==============================================================================
! mm / point conversion
! ==============================================================================

MM_IN_A_DOT = 25.4 / 72

if GLOB_MODPAR_NAME = "gs_text_size_pt_UpDn" then
	UPDNfontsize = gs_text_size_pt_UpDn * MM_IN_A_DOT
	parameters UPDNfontsize = UPDNfontsize
else
	gs_text_size_pt_UpDn = UPDNfontsize / MM_IN_A_DOT
	parameters gs_text_size_pt_UpDn = gs_text_size_pt_UpDn
endif

if GLOB_MODPAR_NAME = "gs_text_size_pt" then
	fontsize = gs_text_size_pt * MM_IN_A_DOT
	parameters fontsize = fontsize
else
	gs_text_size_pt = fontsize / MM_IN_A_DOT
	parameters gs_text_size_pt = gs_text_size_pt
endif

if GLOB_MODPAR_NAME = "gs_text_size_pt_num" then
	gs_NumTextSize = gs_text_size_pt_num * MM_IN_A_DOT
	parameters gs_NumTextSize = gs_NumTextSize
else
	gs_text_size_pt_num = gs_NumTextSize / MM_IN_A_DOT
	parameters gs_text_size_pt_num = gs_text_size_pt_num
endif

if GLOB_MODPAR_NAME = "gs_desc_text_size_pt" then
	gs_desc_text_size = gs_desc_text_size_pt * MM_IN_A_DOT
	parameters gs_desc_text_size = gs_desc_text_size
else
	gs_desc_text_size_pt = gs_desc_text_size / MM_IN_A_DOT
	parameters gs_desc_text_size_pt = gs_desc_text_size_pt
endif

! --- Connecting integer and section pencolor type parameters ---

for i = 1 to 255
	put i
next i

values "penLineStringer" use(nsp)
values "penFillStringer" use(nsp)

if GLOB_MODPAR_NAME = "penLineStringer_m" then
	if penLineStringer_m < -1 | penLineStringer_m > 255 then
		penLineStringer_m = 1
		parameters penLineStringer_m = penLineStringer_m
	endif
	parameters penLineStringer = penLineStringer_m
else
	parameters penLineStringer_m = penLineStringer
endif
if GLOB_MODPAR_NAME = "penFillStringer_m" then
	if penFillStringer_m < -1 | penFillStringer_m > 255 then
		penFillStringer_m = 1
		parameters penFillStringer_m = penFillStringer_m
	endif
	parameters penFillStringer = penFillStringer_m
else
	parameters penFillStringer_m = penFillStringer
endif

values "penLineTread" use(nsp)
values "penFillTread" use(nsp)

if GLOB_MODPAR_NAME = "penLineTread_m" then
	if penLineTread_m < 1 | penLineTread_m > 255 then
		penLineTread_m = 1
		parameters penLineTread_m = penLineTread_m
	endif
	parameters penLineTread = penLineTread_m
else
	parameters penLineTread_m = penLineTread
endif
if GLOB_MODPAR_NAME = "penFillTread_m" then
	if penFillTread_m < 1 | penFillTread_m > 255 then
		penFillTread_m = 1
		parameters penFillTread_m = penFillTread_m
	endif
	parameters penFillTread = penFillTread_m
else
	parameters penFillTread_m = penFillTread
endif

values "penLineRiser" use(nsp)
values "penFillRiser" get(nsp)

if GLOB_MODPAR_NAME = "penLineRiser_m" then
	if penLineRiser_m < 1 | penLineRiser_m > 255 then
		penLineRiser_m = 1
		parameters penLineRiser_m = penLineRiser_m
	endif
	parameters penLineRiser = penLineRiser_m
else
	parameters penLineRiser_m = penLineRiser
endif
if GLOB_MODPAR_NAME = "penFillRiser_m" then
	if penFillRiser_m < 1 | penFillRiser_m > 255 then
		penFillRiser_m = 1
		parameters penFillRiser_m = penFillRiser_m
	endif
	parameters penFillRiser = penFillRiser_m
else
	parameters penFillRiser_m = penFillRiser
endif


if GLOB_MODPAR_NAME = "penBackFillStringer_m" then
	if penBackFillStringer_m < -1 | penBackFillStringer_m > 255 then
		penBackFillStringer_m = 1
		parameters penBackFillStringer_m = penBackFillStringer_m
	endif
	parameters penBackFillStringer = penBackFillStringer_m
else
	parameters penBackFillStringer_m = penBackFillStringer
endif

if GLOB_MODPAR_NAME = "penBackFillTread_m" then
	if penBackFillTread_m < -1 | penBackFillTread_m > 255 then
		penBackFillTread_m = 1
		parameters penBackFillTread_m = penBackFillTread_m
	endif
	parameters penBackFillTread = penBackFillTread_m
else
	parameters penBackFillTread_m = penBackFillTread
endif

if GLOB_MODPAR_NAME = "penBackFillRiser_m" then
	if penBackFillRiser_m < -1 | penBackFillRiser_m > 255 then
		penBackFillRiser_m = 1
		parameters penBackFillRiser_m = penBackFillRiser_m
	endif
	parameters penBackFillRiser = penBackFillRiser_m
else
	parameters penBackFillRiser_m = penBackFillRiser
endif


! =============================================================================
! Onorm list Settings
! =============================================================================

if LibraryLangCode = "AUT" or LibraryLangCode = "CHE" or LibraryLangCode = "GER" then
	call "Onorm_Stair" parameters all
else
	hideparameter "gs_onorm_Title", "gs_list_soundinsul"
endif

! =============================================================================
! IFC2x3 Property Set for Stairs
! =============================================================================

STRAIGHT_RUN_STAIR = 1
parameters ifc_StairType 		= STRAIGHT_RUN_STAIR
parameters ifc_NumberOfRiser 	= nRisers
! unused "topTreadLevel" parameter
parameters ifc_NumberOfTreads 	= nRisers
parameters ifc_RiserHeight		= treadHeight
parameters ifc_TreadLength		= treadDepth

]]>
</Script_VL>

<ParamSection SectVersion="22" SectionFlags="0" SubIdent="0">
	<ParamSectHeader>
		<AutoHotspots>false</AutoHotspots>
		<StatBits>
			<STBit_UIDefault/>
			<STBit_FixSize/>
			<STBit_UIUseHierarchicalPages/>
		</StatBits>
		<WDLeftFrame>0</WDLeftFrame>
		<WDRightFrame>0</WDRightFrame>
		<WDTopFrame>0</WDTopFrame>
		<WDBotFrame>0</WDBotFrame>
		<LayFlags>65534</LayFlags>
		<WDMirrorThickness>0</WDMirrorThickness>
		<WDWallInset>0</WDWallInset>
	</ParamSectHeader>
	<Parameters>
		<Length Name="A">
			<Description><![CDATA["Длина Марша"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Unique/>
			</Flags>
			<Value>5</Value>
		</Length>
		<Length Name="B">
			<Description><![CDATA["Ширина Марша"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Unique/>
			</Flags>
			<Value>1.2</Value>
		</Length>
		<Length Name="zzyzx">
			<Description><![CDATA["Общая Высота"]]></Description>
			<Fix/>
			<Value>3.1</Value>
		</Length>
		<Integer Name="gs_detlevel_3D_m">
			<Description><![CDATA["3D"]]></Description>
			<Value>2</Value>
		</Integer>
		<String Name="parameterType">
			<Description><![CDATA["Определение Размера"]]></Description>
			<Flags>
				<ParFlg_Unique/>
			</Flags>
			<Value><![CDATA["На Основе Размеров"]]></Value>
		</String>
		<String Name="topTreadLevel">
			<Description><![CDATA["Верхняя Ступень"]]></Description>
			<Flags>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<Value><![CDATA["Верхняя Ступень на Уровне Пола"]]></Value>
		</String>

		<!-- gs_tread: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_tread">
			<Description><![CDATA["Размеры Подступенков и Проступей"]]></Description>
		</Title>
		<Integer Name="nRisers">
			<Description><![CDATA["Количество Подступенков"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>18</Value>
		</Integer>
		<Length Name="treadDepth">
			<Description><![CDATA["Глубина Ступени"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0.277777777778</Value>
		</Length>
		<Length Name="treadHeight">
			<Description><![CDATA["Высота Ступени"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0.172222222222</Value>
		</Length>
		<Length Name="treadThickness">
			<Description><![CDATA["Толщина Ступени"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Length Name="nosing">
			<Description><![CDATA["Выступ"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0.02</Value>
		</Length>
		<Boolean Name="bRiserCover">
			<Description><![CDATA["Защитный Слой Подступенка"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Length Name="riserCoverThk">
			<Description><![CDATA["Толщина Защитного Слоя Подступенка"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0.03</Value>
		</Length>

		<!-- _sp6: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="_sp6">
			<Description><![CDATA["Плита Лестницы"]]></Description>
		</Title>
		<String Name="stairBaseType">
			<Description><![CDATA["Тип Основания Лестницы"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value><![CDATA["Бетон"]]></Value>
		</String>
		<Integer Name="stairBaseType_m">
			<Description><![CDATA["Тип Основания Лестницы"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Length Name="stairSlabThk">
			<Description><![CDATA["Толщина Плиты Лестницы"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0.255</Value>
		</Length>
		<Integer Name="nWoodCarriages">
			<Description><![CDATA["Номер Основания"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>2</Value>
		</Integer>
		<Length Name="woodCarriageOffsetRight">
			<Description><![CDATA["Смещение Основания Лестницы - Справа"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0.15</Value>
		</Length>
		<Length Name="woodCarriageOffsetLeft">
			<Description><![CDATA["Смещение Основания Лестницы - Слева"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0.15</Value>
		</Length>
		<Integer Name="rail_m">
			<Description><![CDATA["Ограждение"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>

		<!-- bRightRail: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Boolean Name="bRightRail">
			<Description><![CDATA["Ограждение Справа"]]></Description>
			<Flags>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<String Name="rightRailType">
			<Description><![CDATA["Тип Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Балюстрада Ограждения"]]></Value>
		</String>
		<Integer Name="rightRailType_m">
			<Description><![CDATA["Ограждение Справа"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<String Name="ggr">
			<Description><![CDATA["Конструктивные Размеры"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<Length Name="rightRailHeight">
			<Description><![CDATA["Высота Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.8</Value>
		</Length>
		<Length Name="rightRailDist">
			<Description><![CDATA["Расстояние от Лестницы"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.1</Value>
		</Length>
		<Length Name="rightRailOffset">
			<Description><![CDATA["Смещение Правого Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="rightRailOvhgBottom">
			<Description><![CDATA["Выступ Ограждения Внизу"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="rightRailOvhgTop">
			<Description><![CDATA["Выступ Ограждения Вверху"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<String Name="sgr">
			<Description><![CDATA["Размеры Элементов Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<Length Name="rightRailPostSize">
			<Description><![CDATA["Размер Стоек"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Length Name="rightRailFrameThk">
			<Description><![CDATA["Толщина Рамы"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.04</Value>
		</Length>
		<Length Name="rightRailBarThk">
			<Description><![CDATA["Толщина Брусков"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.025</Value>
		</Length>
		<Length Name="rightRailBarDepth">
			<Description><![CDATA["Глубина Брусков"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.02</Value>
		</Length>
		<String Name="rightWireType">
			<Description><![CDATA["Тип Леера"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA["Прямоугольные"]]></Value>
		</String>
		<Integer Name="nBarsRightRail">
			<Description><![CDATA["Количество Брусков"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>4</Value>
		</Integer>
		<Length Name="rightRailWireDiam">
			<Description><![CDATA["Диаметр Леера"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.005</Value>
		</Length>
		<Length Name="rightRailWireThk">
			<Description><![CDATA["Толщина Леера"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.005</Value>
		</Length>
		<Length Name="rightRailWireDepth">
			<Description><![CDATA["Глубина Леера"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.005</Value>
		</Length>

		<!-- bLeftRail: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Boolean Name="bLeftRail">
			<Description><![CDATA["Ограждение Слева"]]></Description>
			<Flags>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<String Name="leftRailType">
			<Description><![CDATA["Тип Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Как и Правое"]]></Value>
		</String>
		<Integer Name="leftRailType_m">
			<Description><![CDATA["Ограждение Слева"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>11</Value>
		</Integer>
		<Boolean Name="bSameRails">
			<Description><![CDATA["Как и Правое Ограждение"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<String Name="ggl">
			<Description><![CDATA["Конструктивные Размеры"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<Length Name="leftRailHeight">
			<Description><![CDATA["Высота Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.8</Value>
		</Length>
		<Length Name="leftRailDist">
			<Description><![CDATA["Расстояние от Перекрытия/Лестницы"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.1</Value>
		</Length>
		<Length Name="leftRailOffset">
			<Description><![CDATA["Смещение Левого Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="leftRailOvhgBottom">
			<Description><![CDATA["Выступ Ограждения Внизу"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="leftRailOvhgTop">
			<Description><![CDATA["Выступ Ограждения Вверху"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<String Name="sgl">
			<Description><![CDATA["Размеры Элементов Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<Length Name="leftRailPostSize">
			<Description><![CDATA["Размер Стоек"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Length Name="leftRailFrameThk">
			<Description><![CDATA["Толщина Рамы"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.04</Value>
		</Length>
		<Length Name="leftRailBarThk">
			<Description><![CDATA["Толщина Брусков"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.025</Value>
		</Length>
		<Length Name="leftRailBarDepth">
			<Description><![CDATA["Глубина Брусков"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.02</Value>
		</Length>
		<String Name="leftWireType">
			<Description><![CDATA["Тип Леера"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA["Прямоугольные"]]></Value>
		</String>
		<Integer Name="nBarsLeftRail">
			<Description><![CDATA["Количество Брусков"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>4</Value>
		</Integer>
		<Length Name="leftRailWireDiam">
			<Description><![CDATA["Диаметр Леера"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.005</Value>
		</Length>
		<Length Name="leftRailWireThk">
			<Description><![CDATA["Толщина Леера"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.005</Value>
		</Length>
		<Length Name="leftRailWireDepth">
			<Description><![CDATA["Глубина Леера"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.005</Value>
		</Length>

		<!-- gs_3D_representation: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_3D_representation">
			<Description><![CDATA["3D-отображение"]]></Description>
		</Title>
		<Boolean Name="gs_shadow">
			<Description><![CDATA["Отбрасывание Теней"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>

		<!-- gs_2D_representation: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_2D_representation">
			<Description><![CDATA["2D-отображение"]]></Description>
			<Fix/>
		</Title>
		<Integer Name="gs_detlevel_2D_m">
			<Description><![CDATA["2D-детализация"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Integer Name="iScaleChangeSM">
			<Description><![CDATA["Простой/Средний Масштаб изменяется в"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>999</Value>
		</Integer>
		<Integer Name="gs_ScaleChangeSM">
			<Description><![CDATA["Простой/Средний Масштаб изменяется в"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>100</Value>
		</Integer>
		<Integer Name="iScaleChangeMD">
			<Description><![CDATA["Средний/Детальный Масштаб изменяется в"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>999</Value>
		</Integer>
		<Integer Name="gs_ScaleChangeMD">
			<Description><![CDATA["Средний/Детальный Масштаб изменяется в"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>50</Value>
		</Integer>

		<!-- Symbol2D: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="Symbol2D">
			<Description><![CDATA["2D-символ"]]></Description>
		</Title>
		<Integer Name="gs_SymbolType_m">
			<Description><![CDATA["Тип 2D-символа"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>11</Value>
		</Integer>
		<Integer Name="iSymbolGroup">
			<Description><![CDATA["Тип Группы Символа"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>6</Value>
		</Integer>
		<PenColor Name="gs_cont_pen">
			<Description><![CDATA["Перо Линий Видимых Конструкций"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>91</Value>
		</PenColor>
		<PenColor Name="gs_DashLinePen">
			<Description><![CDATA["Перо Линий Невидимых Конструкций"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>91</Value>
		</PenColor>
		<LineType Name="solid_line">
			<Description><![CDATA["Тип Линий Видимых Конструкций"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</LineType>
		<LineType Name="dash_line">
			<Description><![CDATA["Тип Линий Невидимых Конструкций"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>4</Value>
		</LineType>
		<Boolean Name="bShowRailOnFloorPlan">
			<Description><![CDATA["Показать Ограждение на Плане"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<LineType Name="railLineType">
			<Description><![CDATA["Тип Линии Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</LineType>
		<PenColor Name="railPen">
			<Description><![CDATA["Перо Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>82</Value>
		</PenColor>
		<Boolean Name="bShowRailAxis">
			<Description><![CDATA["Показать Ось Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<LineType Name="railAxisLineType">
			<Description><![CDATA["Тип Линии Оси Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>6</Value>
		</LineType>
		<PenColor Name="gs_RailAxisPen">
			<Description><![CDATA["Перо Линии Оси Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>71</Value>
		</PenColor>
		<Boolean Name="bSymbolic2D">
			<Description><![CDATA["Символический 2D"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<String Name="postSymbolType">
			<Description><![CDATA["Тип Символа Стойки"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Тип 1"]]></Value>
		</String>
		<Integer Name="iPostSymbolType">
			<Description><![CDATA["Тип Символа Стойки"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<LineType Name="postLineType">
			<Description><![CDATA["Тип Линии Стойки"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</LineType>
		<PenColor Name="postPen">
			<Description><![CDATA["Перо Линии Стойки"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>23</Value>
		</PenColor>
		<Boolean Name="bShowRailAboveBreakLine">
			<Description><![CDATA["Показать Ограждение выше Линии Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="bShowCarriage">
			<Description><![CDATA["Показать Тетиву на Плане Этажа"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<String Name="stShowCarriageUpTo">
			<Description><![CDATA["Показать Тетиву"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["До 1:50"]]></Value>
		</String>
		<Integer Name="iShowCarriageUpTo">
			<Description><![CDATA["Показать Тетиву"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>50</Value>
		</Integer>
		<LineType Name="carriageLineType">
			<Description><![CDATA["Линия Невидимой Тетивы"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</LineType>
		<PenColor Name="carriagePen">
			<Description><![CDATA["Перо Невидимой Тетивы"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>23</Value>
		</PenColor>
		<FillPattern Name="gs_fill_type">
			<Description><![CDATA["Штриховка Фона"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>65</Value>
		</FillPattern>
		<PenColor Name="gs_fill_pen">
			<Description><![CDATA["Перо Штриховки"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>19</Value>
		</PenColor>
		<PenColor Name="gs_back_pen">
			<Description><![CDATA["Перо Фона Штриховки"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>19</Value>
		</PenColor>
		<Boolean Name="gs_FillAbove">
			<Description><![CDATA["Штриховка Выше Линии Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<String Name="breakline_style">
			<Description><![CDATA["Стиль Линии Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA["Прямой"]]></Value>
		</String>
		<Boolean Name="bSimpleZigZag">
			<Description><![CDATA["Линия Разрыва в виде Простого Зигзага"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Length Name="gs_BreakHeight">
			<Description><![CDATA["Расположение Линии Разрыва (Высота)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Length>
		<Length Name="breakLineWidth">
			<Description><![CDATA["Ширина Линии Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.2</Value>
		</Length>
		<String Name="lineTypeAboveBreak">
			<Description><![CDATA["Тип Линии выше Линии Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
				<ParFlg_Hidden/>
			</Flags>
			<Value><![CDATA["Штриховая"]]></Value>
		</String>
		<Boolean Name="bShowWalkLine">
			<Description><![CDATA["Показать Линию Всхода"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="bShowWalkLineAboveBreakline">
			<Description><![CDATA["Линия Всхода выше Линии Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<LineType Name="gs_wLineType1">
			<Description><![CDATA["Тип Видимой Линии"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</LineType>
		<LineType Name="gs_wLineType2">
			<Description><![CDATA["Тип Линии"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>6</Value>
		</LineType>
		<LineType Name="gs_wLineTypeAbove">
			<Description><![CDATA["Тип Невидимой Линии"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>6</Value>
		</LineType>
		<PenColor Name="gs_wLinePen">
			<Description><![CDATA["Перо Линии"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>71</Value>
		</PenColor>
		<String Name="arrow_style">
			<Description><![CDATA["Стиль Стрелки"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA["Стиль 3"]]></Value>
		</String>
		<FillPattern Name="gs_ArrowFill">
			<Description><![CDATA["Тип Штриховки Стрелки"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>64</Value>
		</FillPattern>
		<PenColor Name="gs_ArrowFillPen">
			<Description><![CDATA["Перо Штриховки (0 - нет)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>91</Value>
		</PenColor>
		<PenColor Name="gs_ArrowFillPenAbove">
			<Description><![CDATA["Перо Штриховки Выше (0 - Нет)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>91</Value>
		</PenColor>
		<Length Name="gs_ArrowHeight">
			<Description><![CDATA["Высота Стрелки"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.2</Value>
		</Length>
		<Length Name="gs_ArrowHalfWidth">
			<Description><![CDATA["Половина Ширины Стрелки"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.2</Value>
		</Length>
		<String Name="gs_StartEndStyle">
			<Description><![CDATA["Символ в Начале"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA["Стиль 1"]]></Value>
		</String>
		<Integer Name="gs_StartEndStyle_m">
			<Description><![CDATA["Символ в Начале"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<FillPattern Name="gs_StartEndFill">
			<Description><![CDATA["Тип Штриховки Символа"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>64</Value>
		</FillPattern>
		<PenColor Name="gs_StartEndFillPen">
			<Description><![CDATA["Перо Штриховки (0 - нет)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</PenColor>
		<Length Name="gs_CircleRadius">
			<Description><![CDATA["Радиус Окружности"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.1</Value>
		</Length>
		<Length Name="gs_StartWidth">
			<Description><![CDATA["Половина Ширины Символа"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Length Name="gs_StartHeight">
			<Description><![CDATA["Половина Высоты Символа"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.15</Value>
		</Length>
		<Boolean Name="bShowNumbering">
			<Description><![CDATA["Показать Нумерацию"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Integer Name="nStartNumbering">
			<Description><![CDATA["Начать Нумерацию с"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<RealNum Name="gs_NumTextSize">
			<Description><![CDATA["Размер Шрифта (мм)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</RealNum>
		<RealNum Name="gs_text_size_pt_num">
			<Description><![CDATA["Размер Шрифта (пт)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>2.83</Value>
		</RealNum>
		<PenColor Name="gs_NumTextPen">
			<Description><![CDATA["Перо Текста"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>86</Value>
		</PenColor>
		<Length Name="DirNumText_X">
			<Description><![CDATA["Расположение Нумерации по X"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.1</Value>
		</Length>
		<Length Name="DirNumText_Y">
			<Description><![CDATA["Расположение Нумерации по Y"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<String Name="typeTextRotation_Num">
			<Description><![CDATA["Ориентация Текста в Символе"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Выровнять по Символу"]]></Value>
		</String>
		<Integer Name="typeTextRotation_Num_m">
			<Description><![CDATA["Ориентация Текста в Символе"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Integer>
		<Boolean Name="bShowRiseAndRunText">
			<Description><![CDATA["Текст Подступенков и Проступей"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<String Name="gs_RiseRunText">
			<Description><![CDATA["Текст"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Кол-во x Подступенок = Высота Марша"]]></Value>
		</String>
		<Integer Name="iRiseRunText">
			<Description><![CDATA["Текст"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<String Name="gs_CustomText1">
			<Description><![CDATA["Специальный Текст_1"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Специальный Текст_1"]]></Value>
		</String>
		<String Name="gs_CustomText2">
			<Description><![CDATA["Специальный Текст_2"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Специальный Текст_2"]]></Value>
		</String>
		<String Name="gs_customText_rise">
			<Description><![CDATA["Текст Подступенка"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["П"]]></Value>
		</String>
		<RealNum Name="fontsize">
			<Description><![CDATA["Размер Шрифта (мм)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</RealNum>
		<RealNum Name="gs_text_size_pt">
			<Description><![CDATA["Размер Шрифта (пт)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>2.83</Value>
		</RealNum>
		<PenColor Name="gs_text_pen">
			<Description><![CDATA["Перо Шрифта"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>86</Value>
		</PenColor>
		<Boolean Name="bUseACLinearUnit">
			<Description><![CDATA["Единицы Измерения Рабочей Среды Проекта"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Length Name="DirRiseRunText_X">
			<Description><![CDATA["Текст Подступенков и Проступей по X"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="DirRiseRunText_Y">
			<Description><![CDATA["Текст Подступенков и Проступей по Y"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.8</Value>
		</Length>
		<Angle Name="DirRiseRunAngle">
			<Description><![CDATA["Угол Поворота Текста Подступенков и Проступей"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Angle>
		<String Name="typeTextRotation_RiseRun">
			<Description><![CDATA["Ориентация Текста в Символе"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Читаемый"]]></Value>
		</String>
		<Integer Name="typeTextRotation_RiseRun_m">
			<Description><![CDATA["Ориентация Текста в Символе"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>2</Value>
		</Integer>
		<String Name="walkingDirUPDN">
			<Description><![CDATA["Размер Текста ВВЕРХ/ВНИЗ"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA["Нет"]]></Value>
		</String>
		<Integer Name="walkingDirUPDN_m">
			<Description><![CDATA["Размер Текста ВВЕРХ/ВНИЗ"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<String Name="gs_CustomText_Down">
			<Description><![CDATA["Текст Спуска"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["ВНИЗ"]]></Value>
		</String>
		<RealNum Name="UPDNfontsize">
			<Description><![CDATA["Размер Текста ВВЕРХ/ВНИЗ (мм)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>2</Value>
		</RealNum>
		<RealNum Name="gs_text_size_pt_UpDn">
			<Description><![CDATA["Размер Текста ВВЕРХ/ВНИЗ (точки)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>5.66</Value>
		</RealNum>
		<PenColor Name="UPDNfontpen">
			<Description><![CDATA["Текст ВВЕРХ/ВНИЗ"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>86</Value>
		</PenColor>
		<Length Name="DirUPDN_X">
			<Description><![CDATA["Горизонтальное Смещение Текста"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="DirUPDN_Y">
			<Description><![CDATA["Вертикальное Смещение Текста"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>-0.25</Value>
		</Length>
		<Angle Name="AngUPDN">
			<Description><![CDATA["Угол Текста ВВЕРХ/ВНИЗ"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Angle>
		<Length Name="DirUPDN_X_top">
			<Description><![CDATA["Горизонтальное Смещение Текста"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="DirUPDN_Y_top">
			<Description><![CDATA["Вертикальное Смещение Текста"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.25</Value>
		</Length>
		<Angle Name="AngUPDN_top">
			<Description><![CDATA["Угол Текста ВВЕРХ/ВНИЗ"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Angle>
		<String Name="typeTextRotation_UpDn">
			<Description><![CDATA["Ориентация Текста в Символе"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Выровнять по Символу"]]></Value>
		</String>
		<Integer Name="typeTextRotation_UpDn_m">
			<Description><![CDATA["Ориентация Текста в Символе"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Integer>
		<String Name="gs_description">
			<Description><![CDATA["Описание"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<RealNum Name="gs_desc_text_size">
			<Description><![CDATA["Размер Шрифта (мм)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</RealNum>
		<RealNum Name="gs_desc_text_size_pt">
			<Description><![CDATA["Размер Шрифта (пт)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>2.83</Value>
		</RealNum>
		<PenColor Name="gs_desc_text_pen">
			<Description><![CDATA["Перо Текста"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>23</Value>
		</PenColor>
		<String Name="fontType">
			<Description><![CDATA["Тип Шрифта"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA["Arial"]]></Value>
		</String>
		<Boolean Name="bStorySensitive">
			<Description><![CDATA["Зависит от Этажа"]]></Description>
			<Flags>
				<ParFlg_BoldName/>
			</Flags>
			<Value>0</Value>
		</Boolean>

		<!-- gs_AboveHomeStory: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_AboveHomeStory">
			<Description><![CDATA["2D выше Собственного Этажа"]]></Description>
		</Title>
		<Boolean Name="gs_BreaklineStUp">
			<Description><![CDATA["Линия Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="gs_LowerPartStUp">
			<Description><![CDATA["Нижняя Часть"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="gs_UpperPartStUp">
			<Description><![CDATA["Верхняя Часть"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="gs_TreadStUp">
			<Description><![CDATA["Показать Проступи"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<LineType Name="gs_LineTypeStUp">
			<Description><![CDATA["Тип Линии"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</LineType>
		<PenColor Name="gs_LinePenStUp">
			<Description><![CDATA["Перо Линии"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>71</Value>
		</PenColor>
		<LineType Name="gs_wLineTypeStUp">
			<Description><![CDATA["Тип Линии Всхода"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</LineType>
		<Boolean Name="gs_numaStUp">
			<Description><![CDATA["Показать Нумерацию"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="gs_txStUp">
			<Description><![CDATA["Текст Подступенков и Проступей"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Boolean>

		<!-- gs_section_attributes: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_section_attributes">
			<Description><![CDATA["Реквизиты Сечения"]]></Description>
		</Title>
		<PenColor Name="penLineStringer">
			<Description><![CDATA["Перо Контура Сечения Конструкций"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>29</Value>
		</PenColor>
		<Integer Name="penLineStringer_m">
			<Description><![CDATA["Перо Контура Сечения Конструкций"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>29</Value>
		</Integer>
		<FillPattern Name="typeFillStringer">
			<Description><![CDATA["Штриховка Сечения Конструкций"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>24</Value>
		</FillPattern>
		<PenColor Name="penFillStringer">
			<Description><![CDATA["Перо Штриховки Сечения Конструкций"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>109</Value>
		</PenColor>
		<Integer Name="penFillStringer_m">
			<Description><![CDATA["Перо Штриховки Сечения Конструкций"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>109</Value>
		</Integer>
		<PenColor Name="penBackFillStringer">
			<Description><![CDATA["Перо Фона Штриховки Сечения Конструкций"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</PenColor>
		<Integer Name="penBackFillStringer_m">
			<Description><![CDATA["Перо Фона Штриховки Сечения Конструкций"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Integer>
		<PenColor Name="penLineTread">
			<Description><![CDATA["Перо Контура Сечения Проступи"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1</Value>
		</PenColor>
		<Integer Name="penLineTread_m">
			<Description><![CDATA["Перо Контура Сечения Проступи"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<FillPattern Name="typeFillTread">
			<Description><![CDATA["Штриховка Сечения Проступи"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>23</Value>
		</FillPattern>
		<PenColor Name="penFillTread">
			<Description><![CDATA["Перо Штриховки Сечения Проступи"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>109</Value>
		</PenColor>
		<Integer Name="penFillTread_m">
			<Description><![CDATA["Перо Штриховки Сечения Проступи"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>109</Value>
		</Integer>
		<PenColor Name="penBackFillTread">
			<Description><![CDATA["Перо Фона Штриховки Сечения Проступи"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>-1</Value>
		</PenColor>
		<Integer Name="penBackFillTread_m">
			<Description><![CDATA["Перо Фона Штриховки Сечения Проступи"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>-1</Value>
		</Integer>
		<PenColor Name="penLineRiser">
			<Description><![CDATA["Перо Контура Сечения Подступенка"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1</Value>
		</PenColor>
		<Integer Name="penLineRiser_m">
			<Description><![CDATA["Перо Контура Сечения Подступенка"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<FillPattern Name="typeFillRiser">
			<Description><![CDATA["Штриховка Сечения Подступенка"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>23</Value>
		</FillPattern>
		<PenColor Name="penFillRiser">
			<Description><![CDATA["Перо Штриховки Сечения Подступенка"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>109</Value>
		</PenColor>
		<Integer Name="penFillRiser_m">
			<Description><![CDATA["Перо Штриховки Сечения Подступенка"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>109</Value>
		</Integer>
		<PenColor Name="penBackFillRiser">
			<Description><![CDATA["Перо Фона Штриховки Сечения Подступенка"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>-1</Value>
		</PenColor>
		<Integer Name="penBackFillRiser_m">
			<Description><![CDATA["Перо Фона Штриховки Сечения Подступенка"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>-1</Value>
		</Integer>

		<!-- gs_material: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_material">
			<Description><![CDATA["Покрытия"]]></Description>
		</Title>
		<Material Name="matBase">
			<Description><![CDATA["Основание Лестницы"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>4</Value>
		</Material>
		<Material Name="matTread">
			<Description><![CDATA["Проступь"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>14</Value>
		</Material>
		<Material Name="matRiser">
			<Description><![CDATA["Подступенок"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>14</Value>
		</Material>
		<Material Name="matPost">
			<Description><![CDATA["Стойка"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>59</Value>
		</Material>
		<Material Name="matHandrail">
			<Description><![CDATA["Поручень"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>59</Value>
		</Material>
		<Material Name="matSurface">
			<Description><![CDATA["Панели Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>14</Value>
		</Material>
		<Material Name="matBar">
			<Description><![CDATA["Прутья"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>59</Value>
		</Material>
		<Boolean Name="AC_show2DHotspotsIn3D">
			<Description><![CDATA["Показ Узловых 2D Точек в 3D"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Length Name="ac_bottomlevel">
			<Description><![CDATA["Отметка Низа"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Length>
		<Length Name="ac_toplevel">
			<Description><![CDATA["Отметка Верха"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Integer Name="parameterType_m">
			<Description><![CDATA["Определение Размера"]]></Description>
			<Flags>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Integer Name="topTreadLevel_m">
			<Description><![CDATA["Верхняя Ступень"]]></Description>
			<Flags>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Integer Name="lineTypeAboveBreak_m">
			<Description><![CDATA["Тип Линии выше Линии Разрыва"]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Integer Name="arrow_style_m">
			<Description><![CDATA["Стиль Стрелки"]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>3</Value>
		</Integer>
		<Integer Name="breakline_style_m">
			<Description><![CDATA["Стиль Линии Разрыва"]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Integer Name="rightWireType_m">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Integer Name="leftWireType_m">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Integer Name="gs_ui_current_page">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Angle Name="gs_readable_angle">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>90</Value>
		</Angle>
		<RealNum Name="gs_description_pos">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<ArrayValues FirstDimension="1" SecondDimension="3">
				<AVal Column="1" Row="1">0</AVal>
				<AVal Column="2" Row="1">0</AVal>
				<AVal Column="3" Row="1">0</AVal>
			</ArrayValues>
		</RealNum>

		<!-- gs_list: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_list">
			<Description><![CDATA["Параметры Спецификаций"]]></Description>
			<Fix/>
		</Title>
		<RealNum Name="gs_list_cost">
			<Description><![CDATA["Цена"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<String Name="gs_list_manufacturer">
			<Description><![CDATA["Производитель"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_note">
			<Description><![CDATA["Примечания"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_location">
			<Description><![CDATA["Расположение"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_accessories">
			<Description><![CDATA["Аксессуары"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_soundinsul">
			<Description><![CDATA["Звукоизоляция"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="FM_Type">
			<Description><![CDATA["Тип Группы"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Лестницы"]]></Value>
		</String>
		<Integer Name="iFMType">
			<Description><![CDATA["Тип Группы"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>6</Value>
		</Integer>
		<String Name="FM_InventoryNumber">
			<Description><![CDATA["Инвентарный Номер"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="FM_SerialNumber">
			<Description><![CDATA["Серийный Номер"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="FM_ProductionYear">
			<Description><![CDATA["Год Производства"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<RealNum Name="FM_ObjectWeight">
			<Description><![CDATA["Вес Изделия"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<String Name="FM_ObjectWeightUnit">
			<Description><![CDATA["Единица Веса"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["кг"]]></Value>
		</String>
		<RealNum Name="FM_Stories">
			<Description><![CDATA["Кол-во Этажей"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<RealNum Name="FM_HalfLandings">
			<Description><![CDATA["Кол-во Промежуточных Площадок"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<RealNum Name="FM_LevelHeight">
			<Description><![CDATA["Высота Уровня"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<RealNum Name="FM_HeadRoom">
			<Description><![CDATA["Высота Помещения"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<String Name="FM_BearingStructure">
			<Description><![CDATA["Несущая Конструкция"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<RealNum Name="FM_BearingCapacity">
			<Description><![CDATA["Несущая Способность"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<Boolean Name="FM_SmokeFree">
			<Description><![CDATA["Незадымляемая Лестница"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<RealNum Name="FM_StepsLength">
			<Description><![CDATA["Длина Проступей"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<String Name="FM_MaterialFootstep">
			<Description><![CDATA["Покрытие Проступей"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="FM_MaterialStairRailing">
			<Description><![CDATA["Покрытие Ограждения Лестницы"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="FM_MaterialHandhold">
			<Description><![CDATA["Покрытие Поручней"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_custom1">
			<Description><![CDATA["Пользовательское Значение 1"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_custom2">
			<Description><![CDATA["Пользовательское Значение 2"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_custom3">
			<Description><![CDATA["Пользовательское Значение 3"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_custom4">
			<Description><![CDATA["Пользовательское Значение 4"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_custom5">
			<Description><![CDATA["Пользовательское Значение 5"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>

		<!-- gs_onorm_Title: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_onorm_Title">
			<Description><![CDATA["Дополнительные Параметры Спецификаций"]]></Description>
			<Fix/>
		</Title>
		<String Name="gs_onorm_treadnumber">
			<Description><![CDATA["Количество Ступеней"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_treadriser">
			<Description><![CDATA["Глубина Проступи / Высота Подступенка"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_person">
			<Description><![CDATA["Количество Людей"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_bardist_auto">
			<Description><![CDATA["Значение Чистой Ширины между Прутьями Ограждения"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_bardist">
			<Description><![CDATA["Чистая Ширина между Прутьями Ограждения"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_botlevheight_auto">
			<Description><![CDATA["Значение Отметки Нижнего Уровня"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_botlevheight">
			<Description><![CDATA["Отметка Нижнего Уровня"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_toplevheight_auto">
			<Description><![CDATA["Значение Отметки Верхнего Уровня"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_toplevheight">
			<Description><![CDATA["Отметка Верхнего Уровня"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_construction">
			<Description><![CDATA["Конструкция"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_soundinsul">
			<Description><![CDATA["Звукоизоляция"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_mat1">
			<Description><![CDATA["Дополнительный Материал 1"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_finish1_value">
			<Description><![CDATA["Значение Отделки 1"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_finish1">
			<Description><![CDATA["Отделка 1"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_customtext1">
			<Description><![CDATA["Дополнительная Информация 1"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_customtext2">
			<Description><![CDATA["Дополнительная Информация 2"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_aks">
			<Description><![CDATA["Номер AKS"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_product">
			<Description><![CDATA["Продукт"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_leistungbuch">
			<Description><![CDATA["Коллекция ID Спецификаций"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_description">
			<Description><![CDATA["Дополнительное Описание"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_number">
			<Description><![CDATA["Дополнительный Номер"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_id">
			<Description><![CDATA["Номер ID"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_admission">
			<Description><![CDATA["Дата Приема"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_modification">
			<Description><![CDATA["Дата Изменения"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_tozonenumber">
			<Description><![CDATA["Номер Зоны"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>

		<!-- ifc_Title: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="ifc_Title">
			<Description><![CDATA["IFC2x3 Набор Свойств для Лестниц"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
		</Title>
		<Integer Name="ifc_StairType">
			<Description><![CDATA["Тип Лестницы"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0</Value>
		</Integer>
		<Integer Name="ifc_NumberOfRiser">
			<Description><![CDATA["Количество Подступенков"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0</Value>
		</Integer>
		<Integer Name="ifc_NumberOfTreads">
			<Description><![CDATA["Количество Проступей"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0</Value>
		</Integer>
		<Length Name="ifc_RiserHeight">
			<Description><![CDATA["Высота Подступенка"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="ifc_TreadLength">
			<Description><![CDATA["Длина Проступи"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0</Value>
		</Length>
		<String Name="LibraryLangCode">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value><![CDATA["RUS"]]></Value>
		</String>
	</Parameters>
</ParamSection>

<Picture MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="0" length_in_bytes="4685" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D49484452000000800000
	00800803000000F4E091F900000117504C5445FEFEFEFDFDECFEFCDBEDFBFDF2
	EEEA745C3B432B1BBA9C73FEE4BBCCC3A3676A57C3A473B2945BCDC59E836A44
	BA9B6BA2845BFEEBC3FDEDD3D4BD9B83633BEADAC292754A7B704BBDA273EDF4
	EB93835B241A0C342A23D3B37AF1CB8BEDEBE5F1ECFDBBB2A2FEF4C2E3CBA392
	7C543A2B138C7B52CAB48CECE3CBFFF2BB8B734BD2B383836C547B746243230D
	D3CBB2736B5AC5BD95B3A3829C8C73F3DBB3AA9A829B9374C1B4A3735C43E3DB
	BC74633BAA955C9D8B636B522BAB9363DAC39B8B723B7A725AE3C38BECEDF2A3
	957B9A9384BCB395A07A53433223EBDBAB9D926D7B6D62F4CC92837963EAEBD2
	321B047C6C4AECD39CCBAC82D4C3A29C9B91C2BCB3AA8D6BD3C28BA18C73DBD2
	ACEBCA9B3C2303F3D5A37AF3F7B7000010E749444154785EC55AD5761CDB0E6C
	ED66661864666630323324FFFF1D573D76629FF37ADB3E6A272BE33CEC5AA552
	6D493D545441873F7F03A81F0F1AE33F3B1F200654ECCBE79F45007F9340FF17
	08907820EE6C66BD63F86FC29D8C06227CA11D7E500C480098F64BB36751F027
	0BF093E5802722005E1B0195FD9A830F283F4101814281D79A84F9AA023A7C00
	E38752A06B4DEB5F22DC476ADC5995FAFE2096207B4E19B2FFAE03708F2A65F1
	DB01C4A0BA17F7BC26F36F0500E38A1B29F7FD0CE467C1CE4EBDF9CE007C2260
	C0BC7F731EBEDF07ABAF8B45BD7E0EFFAE3AA0869BE7B9B4FFCD001828F455A5
	5C6F51FF6480028B0C0B7B8EB4FD90F94606987BBFB62ED7CF190A21007C4106
	435D61A56F39F4F3B289C1693C2E54FC7AEBF3FFB61224242FFCD678F61CBE05
	00507F7CCFAC183B422A5E6EC1170018A44A4EF963FD58FA0E2F82BFB906323B
	68EC087BF57A0880FE0B80A6089C6E8A7C51EB52F08D2D0015737B15215EDB43
	1102FD0EE9030821A741833F66A52FB28CFAF82CA188BBEC093BC2733DBE0BFF
	B44122BCFABF75648081EF6CC5AAFD3202A83D7FD1C007354488B3C386A67D6A
	00A2A49FA6DFEFE10902F85DAF7D6AE0139AB853FF5DD0D866D43D01FCEDFE80
	B2DCD37E113520DC969101FA1FDCBC8E2BF5E105FB85010AA254006200B0DC22
	19F54211C6430D7C5200E00A815017DE8ED92E445F011F1C00CC7A1AE137B5B8
	20C4E3D2978318CA22E34A0D53E0B112C0F75420C4C0EA0C6EACFE3DA660EF9F
	556051E604C559170A9E860C7C8708C304807B3F6E92CA7D6D9B82EEA7061880
	4E5F5385B579E17912F55D0C80208AE22EE98700849D2D03185B8B2656AFF754
	1102D3F63C6400BE4184409158553D9A75A1BF7917A1F45784A8804ED1D46D93
	1F160C277A0D7C12B02B0A12840C087F18F8284FB77743787BC89B85A2267D8F
	069001B1E2AB4482CAE64F19D27F32E07606ACC9DB2602A87B913340D3400164
	B3B5CD58CA5DF9A4AF0A9E908EFFD500B1C015A51BCB6E8400CA65E90BF4C800
	1092A54ECFDC56AE2A91E05930D282176F917705B870E58E2653D37E4F415382
	E827911850309BADC17FB42412FA40AD512E1F7E488098B3DC91C5C25B284204
	F0D90F408429409DF7FA6499B3B00C7B9882F8B29CFBA801E2BA4BB12A59A71B
	612BC26EF40CE039206C2E27E44074CFA1D7338B7CF3F2F2CF04640EFBDDA3AA
	94EFD85B009E14FDF9A1AC5F83D1842C1EAF240AD5BE6C169797B98F3BD2BC1F
	947355160A0820B4E2C83B223C2403448D8B8F643931A52CDF19165FF8CBE223
	60500085C67D5DBCDA259D9E19986FDA719762A236229A0231A8752666BF77D5
	CCA2E1143B7C713021143000CC9B41CAE24C221DDBBC1BBE79C79791B7034864
	55F0F3B3098C2AE67956E69FF45EAFD96C6AFADD8610A131CF2FC5D94DB5703F
	BC13F4E2F123150E8DD9E810C470F0AF8D7DE2F6E040AD9E83AE6B9AC64EF1AF
	E2D341FFEED471C8FA4890E05E1578EC498B39C01C64232C054228F7489540E8
	31D80CA1089DA76273DAE4F93B5E96E5B760671E9C0562DD3CAD987CFDF86999
	FBD85644164068779CEF42BE4F0D54B30B415D20C462BB8561434EED093B8B9D
	B375AB52EFBFDD15F49BBB66F91118261BA506087173624CA2AA15184DAE6ECC
	832086FC96388E3B3E962F168BF87C1D94D5FAFA4D79332AFD650B53403151AA
	10AEF2AD233807F3080EC5AA7FB49C013014C7B1ED76BB71BB1308FEE66CFDBC
	AAFC361A86BD1C94A549C4A3397155FF881E506E8EAC1F5DBF1EE698DE3F4926
	39CEBBE09D8AB0CA9F05A73B7BB7B263387569F44865F18930AA351F7D7F6431
	93FCC123E3FBEFC426398C8BA13E574F7D12576B5E3B6D385E79E95200CCFFEF
	03F0B97A04A1A28EDDD80332000715D357F310CB208093134E1BBECC6E7AD539
	595784F9EA8DE5DAC987681712D9EDC453AE5572B1432A9333CFEC465CA044F7
	8AA24E92DCC99D7D00527F3627CBCDD0F36CF6844B3E46E5BE7F1A4E80EA661E
	1B8BD461ACDAA70EFA07079B654B2A77BB5389737EAFE5FC932D48F9B38AA9D9
	1AC72524041DED3A8022B3F80D3912E190AAE6C8C1657977EE4B97D3E6CBE04E
	0E6EE7419EE7677EFEA0F75B33588E3BE950110781AA1A2F13518C1D82750423
	E9F0B0B55B5FF66D9ED71541313C45D74FD9BCDE30358D6B97BA98B46803403C
	3ABD21620EFA6847D6E8F20A28C2167BB68D2E98F20C4FD7BD800DD606CE84DC
	AF9309EA3F1325FF40AC40ADFA30EBC321B8F7EE206C429844896BB79D54DA48
	298AA21F37585D370A9A1EDC4C33D1EE0791CEFC4CAA08E5AA28C218AC5C4E0A
	0F6092A5364625C5D652CAC5F153CA910DD9D0F8D1F25CCA419402040BAA7D5F
	1596610A96600ECE27DBEE24C9254FB8E076C7AF0977F0C2171C59D61C6D2A75
	736E583B51A6C07D0D7CB53A06710203E25EB21464B036B72E7CBA89CFF342DF
	1A4DD22C6BB018DC04A27D8B0516E65E0C2AC218AB808C6176E35601208300D8
	D258D81524CC0A8CFA846DCBDA75A234DD428F45388D52A6E893F191700008E0
	904C96D45547449A93C952297FA4565940773E44068CF8AA5D4A889081482B90
	906AC0C27232D349284271F7A8BCBCECB6A6E52EE72F36F1605607B7C72C7BA6
	636B895F0969DB06D191110014A9BEEE4E2DDE9EF164824E382EEFEEB2E5DDEE
	61510E2AB781AF175E2CB707CBDE906DAE4ABF92A17D67A2D40090D74A7C974C
	3A439D6CD0095BAAEA97FD4AE540965372DAF0B0F4785B3F0D82A136E512C901
	82468566B211EE444FCF6653AB836308A6A0AA8E0921F99517BF4DA752E994A1
	78D89EDB757D112F34D952A984FC874F144E14DB0E8316B93D7B7DF5C1B6CD83
	9AAABEFAD5588CA61349744156DE8BA78C456AADCB7159316C56E7FB072244FA
	C5006ADF1AAA7EA5D665ECC26C9DDFACCB634223B26482E37EADF6D4792DBE16
	D6CF48842EB38A61DCDC4847D19DBF65801482B99897AC826D0E486FD9BA8AD1
	A1099E244BD7DE5E7C550BD4CD19B9AF2C0CD67134763489781C8FA10704BE78
	35650AB6FB02B6B46480425ED0034FB85365B1226A508B83906AEB2CBB62AF21
	E2153D0D70FF942F8B19091A8D02CFD85D0B8062C266BCDD3684F5A904817A1A
	A75C757EE07089442EDA3600A50C57C19C0C7257A88186F5301CF08C9B1B3D76
	B20880BD3D53F3123270BA6032FDDED335B2C2E02C14E13DC0E0352C9ECDC981
	B83F4506CC03FBE6325E9E76D995C3B29EF21B4701D652554C81391AB0A544B2
	4945BB18630077A23B7318E4322D68ECCDD6BE5F4799B3C5A2ACC8CAED7A15BC
	3589A2DE2EA033982713C92495CD44F982D0B2A0AA96D53005FB1269A485C017
	703AD6EDFB14F661E9B477832E20A794BD45DE5CADB812CE0210592704F8C330
	57A4A23E3BCC432ED385742A3F3E2204D689952EDFA6D36959891BA985925A04
	8B60E3EF244B12436510778C8E88812BF4B54959DDF8E64844008DD4E4320654
	E630B92A850A149C82BE482D42335C3C2F7C25C8E5722E0DD12DC6998EFDE4EF
	FAAAE0302364C04AEBAD1C95C950A36469D56EB3BF752FAF20FB7B7B4A45A9C4
	E33B2DA925B9801063919C8FF178E169DAF4A88A1A401F306DEFD2A232FBD443
	221CC82F4C568303357C63A1C88B95EFAF5A3917AD1B32117D318DA1A0232B5A
	6F7732D4C858BCBA8134BB6DF5F61F38F4006DD8B08B642704904AC517FEEAD7
	2F098FCF84E340246D70484127A5B08D6EC7EC9A03B12A9977C7400087D107EC
	84B942A13164611C9C9E81AAC69555A99414C31D56368236E05DC3C0503602B0
	BB3D6B4ACEC4EA4D476FE4C5C3C35CEE5CE21BECC5B16DD6C958AD0E04554DAD
	92A5844F53D92C22F87F865280AF1F482F2D6BC3F38ED534CFD4DA3C3879BAD4
	2EBBDAC0295C18EC71D1367785B17ABA105272DC4F944A224D47D503020D5B00
	CF69E3A58300EA647D58F35745569B6A455D972FD2065B3CC75998D4D59A97DF
	9BEFFC4A94243A0A00F00904A82D03EEF923299B6391F87EAC3F19F11D7B68A4
	D38AE3B17CC35FAC838D223C3B2C02C8D1110D42D9BF44E4D5B452ECB43A79CC
	B528F82AC5C04BB2A46B2904C02A8EA1EEC4D70BD9901B86C395589A62F6A37A
	29F5018154D2A966A72592BA75201E8D4986820197C4124413666547DFDB910D
	03EF826343BE1B5DE69848DCE70F0C7ACBC09EDC125B6EBE7E353E6C55438A1F
	C2F3D9908194270B4E4A31DE14DDF18AD3E9F900AD231A02B2F0410451F72ABE
	18324096AD8718A199ECE87D2577A13885E382A911A3A13FB53DB6390DF7116E
	14147C4D44A8815DB725D6EAE640AAD2E1462E0430E50B055D2B343B44130CDB
	309C6BF6FA85026C043291A460EB22B17706D2725944003BE6CB3846F240AC10
	40C9E42FF8A2DDEC585D41BFBB2BB289EB0413D2BF1F19011F0C2000A5D54100
	8E5D1467EA523AE70708A068360A7AD33E478B1E3EF5EC66824B0CA888F601F0
	B50E91815B2CC34B64E0653A9ACEA5D58DC6B2BA364CCB698F2D4C6DD440F1AE
	C9612B9C85EC7688886E1D10DB32B0B9D09B9DCB5EADA83525C9F7CB9EA2F30D
	1E7B30AC025BEB0975F369AA9D5CBF13402380E87CE083810B43B777C57C39DC
	8FB7C6EAE6596EF03A2F8765E869FCDBCE50D756D7D7090A32EF19884884F047
	841B74C2C9AEF8BA1B16D861E2D72AEE140AB2ACECA565C7F30CD5D175BC1ED8
	91B9DD07301111F0A9C55084C7F7923A1E870A3F4A26DABFB8AE650D6F31058E
	71ACCB9EEC1CF377E5D60800B6CC456AC540E16D28FBAFBB63299FC50C1F9638
	9CFD3B8CC5FCDE4B1B1A5FD42F1C8FF5D085BA7D062808FF44E50340D1EF0CA4
	14A7D16A1DD12446651E9218D23E4A8D54F664F682E5644FD39ADD13978A2E62
	D45706F2D80F6885568BC408D0F416408E8EEDD3F9E75BE5F8C2710C96C5121C
	44BB90FEA706F614F6F83C4713915870984C24A634E0D061E2EFA7B6E7A41CAE
	9DE0F623DD46519F550014C125B4F3749E11CFCA12FBF272F2EB97082464A0F2
	5B2F4E3CBEA17189D2E3D682E9E819A0B70CC80E5B6CB2D27CC7F3745D960B85
	6A9E22F94ADA28DA5DBE89AA3C41A4D98835F0E903C880C75EB6760359E1C3D7
	1206AF9F05FD4E6A2FAD343BC52E12907099D037A3D540F6EF752CA6158F6728
	F32868142E1A0841E795B3B38A82003C7DC7E7F06ACE46FB0D01F8CA00453629
	65050C43CEDAEDB676CC5FE05A701D601B9846278CEFC475477AA4E01341C42D
	196CAB40B2F0E321AE5F39EE9C6186C35755AD545229C361E786A29F37250609
	8B5603D93F4985BCFA1CB00CC350239CBB92894ED6B208C9E77133900A37728E
	C64AB9C710341D3D034023B3A1134EAD2C43A1052413D27E1647AFF0305C4DA0
	0739737680BF42C4DFA1010C264C81DE0C53F0801E94CCEE67C282C7A796920D
	96BB6E27DC6C98FF0C50D157C176D39317F70CA7E032560FB73F033C2C466569
	B49DBC8C16CD5E27A42CA60799CA44EF03B0CD6A7E830769DD9797833A9740BF
	8118B24D67B3A491764213EC64A314E0BFA7631A32B320252BBA1E7A508AE7ED
	022114C40032422AA514A789E4BB09465A869F19A01182F08C05CFDFF1E8C1C6
	1DCF1F1C8C73A210A3A016F684C98418262ACCC2B7054DE52DBEC9BBB6DDE031
	74A4637DA628A9B00C1D6E0C407D7B64B349AED46635CDB6D3B26228CA429165
	849092E7F32A64BF1F41B813E7AEAF399E610A96D9B8AD0478BC62A00FACE6EC
	09F5FDC13038895D736D8B210CB1485E106E53A9B42CA71CA99C0BE5F2DD0159
	8EDB765DE1F20DCB1D08F01CEB187CBBBFDDC6FD440A4AB87E420FA2DFBF4D69
	317C1BE3FA3AAC80FD9F40C02592278F1F6FAF4208D40835D14E8C2043D13FC2
	8038DA16E43630E9901D604EAE1340853BDB1F8CCFB633BC98120F99ED4A9EFE
	9163E1F3FCD0F9464944700554EC0734F0EF911F60CBC0C9284B8504D0CC0F00
	A0BF8EACC0501F2B9C18D0F07399872F5715F3F10F1A41FCF8F95FD7173484D0
	B23F58035F1630D9D0167FF27CD88A712B872F73582400FE073FD11D407E19F1
	580000000049454E44AE426082
	]]>
</Picture>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_PR SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_PR>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_UI SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[

bCustom2dDetlevel = (gs_detlevel_2D_m = DET2D_CUSTOM)

dim stStairUI[128]
	stStairUI[1] = `2D-детализация`
	stStairUI[2] = `Масштаб`
	stStairUI[3] = `Тип Маркера Разрыва`
	stStairUI[4] = `Видимые Конструкции`
	stStairUI[5] = `Штриховка Фона`
	stStairUI[6] = `Перо Линии`
	stStairUI[7] = `Тип Линии`
	stStairUI[8] = `Перо Штриховки`
	stStairUI[9] = `Перо Фона Штриховки`
	stStairUI[10] = `Невидимые Конструкции`
	stStairUI[11] = `Перо Линии Всхода`
	stStairUI[12] = `Тип Линии Всхода`
	stStairUI[13] = `Конец Линии Всхода`
	stStairUI[14] = `Начало Линии Всхода`
	stStairUI[15] = `Перо Штриховки (0 - нет)`
	stStairUI[16] = `Перо Штрих. Выше (0 - нет)`
	stStairUI[17] = `Тип Шрифта`
	stStairUI[18] = `Начать с`
	stStairUI[19] = `Формат`
	stStairUI[20] = `Размер Шрифта`
	stStairUI[21] = `Специальный Текст 1`
	stStairUI[22] = `Перо Текста`
	stStairUI[23] = `Специальный Текст 2`
	stStairUI[24] = `Текст Подъема и Спуска`
	stStairUI[25] = `Текст`
	stStairUI[26] = `Тип Символа Стойки`
	stStairUI[27] = `Тип Линии Стойки`
	stStairUI[28] = `Перо Линии Стойки`
	stStairUI[29] = `Линия Невидимой Тетивы`
	stStairUI[30] = `Перо Невидимой Тетивы`
	stStairUI[31] = `2D выше Собственного Этажа`
	stStairUI[32] = `Лестница`
	stStairUI[33] = `Ограждение`
	stStairUI[34] = `Основание`
	stStairUI[35] = `Панели Ограждения`
	stStairUI[36] = `Проступь`
	stStairUI[37] = `Обвязка`
	stStairUI[38] = `Подступенок`
	stStairUI[39] = `Стойка`
	stStairUI[40] = `Поручень`
	stStairUI[41] = `Штриховка выше Линии Разрыва`
	stStairUI[42] = `Показ Линии Всхода`
	stStairUI[43] = `Стрелка к Линии Разрыва`
	stStairUI[44] = `Показ Нумерации`
	stStairUI[45] = `Текст Подступенков/Проступей`
	stStairUI[46] = `Читаемый Текст`
	stStairUI[47] = `Показ Ограждения на Плане`
	stStairUI[48] = `Показ Осей Ограждения`
	stStairUI[49] = `Показ Тетивы на Плане Этажа`
	stStairUI[50] = `Символ Зависит от Этажа`
	stStairUI[51] = `Линия Разрыва`
	stStairUI[52] = `Показ 2D ниже Линии Разрыва`
	stStairUI[53] = `Показ 2D выше Линии Разрыва`
	stStairUI[54] = `Отбрасывание Теней`
	stStairUI[55] = `Единицы Измерения Рабочей Среды Проекта`
	stStairUI[56] = `Ориентация`
	stStairUI[57] = `Ориентация Текста в Символе`
for i = 58 to 79
	stStairUI[i] = ""
next i
	stStairUI[80] = `Показ Проступей`
	stStairUI[81] = `Линия Всхода выше Линии Разрыва`
for i = 82 to 85
	stStairUI[i] = ""
next i
	stStairUI[86] = `Описание`
	stStairUI[87] = `Текст Спуска`
	stStairUI[88] = `Тип Видимой Линии`
	stStairUI[89] = `Тип Невидимой Линии`
	stStairUI[90] = `Размер Символа`
	stStairUI[91] = `Текст Подступенка`
	stStairUI[92] = `мм`
	stStairUI[93] = `п.`

	stStairUI[94] = `Перо Контура`
	stStairUI[95] = `Тип Штриховки`
	stStairUI[96] = `Перо Штриховки`
	stStairUI[97] = `Перо Фона Штриховки`
	stStairUI[98] = `Подступенок`

	stStairUI[99] = `Показ Ограждения выше Линии Разрыва`
	stStairUI[100] = `2D-символ`
	stStairUI[101] = stPostSymbolType[1]
	stStairUI[102] = stPostSymbolType[2]
	stStairUI[103] = stPostSymbolType[3]
	stStairUI[104] = stPostSymbolType[4]
	stStairUI[105] = stPostSymbolType[5]

	stStairUI[106] = stDetlevel2D[1]
	stStairUI[107] = stDetlevel2D[2]

	stStairUI[108] = stBreaklineStyle[1]
	if bSimpleZigZag then
		stStairUI[109] = stBreaklineStyle[3]
	else
		stStairUI[109] = stBreaklineStyle[2]
	endif

	stStairUI[110] = stWalkingDirUPDN[1]
	stStairUI[111] = stWalkingDirUPDN[2]
	stStairUI[112] = stWalkingDirUPDN[3]
	stStairUI[113] = stWalkingDirUPDN[4]
	stStairUI[114] = stWalkingDirUPDN[5]
	stStairUI[115] = stWalkingDirUPDN[6]

	stStairUI[116] = stTextOrientation[3]
	stStairUI[117] = stTextOrientation[2]
	stStairUI[118] = stTextOrientation[1]

	stStairUI[119] = stRiseRunText[1]
	stStairUI[120] = stRiseRunText[2]
	stStairUI[121] = stRiseRunText[3]
	stStairUI[122] = stRiseRunText[4]
	stStairUI[123] = stRiseRunText[5]
	stStairUI[124] = stRiseRunText[6]
	stStairUI[125] = stRiseRunText[7]

	stStairUI[126] = `Ограждение Справа`
	stStairUI[127] = `Ограждение Слева`
	stStairUI[128] = `Показ Тетивы`

dim stRailTypesForUI[11]
	stRailTypesForUI[ 1] = `Балюстрада`
	stRailTypesForUI[ 2] = `Параллельные Прутья`
	stRailTypesForUI[ 3] = `Простой Брусок`
	stRailTypesForUI[ 4] = `Объемная Рама с Панелью`
	stRailTypesForUI[ 5] = `Объемная Рама`
	stRailTypesForUI[ 6] = `Панель`
	stRailTypesForUI[ 7] = `Стойки с Балясинами`
	stRailTypesForUI[ 8] = `Стойки с Прутьями`
	stRailTypesForUI[ 9] = `Деревянная Балюстрада`
	stRailTypesForUI[10] = `Стойки с Брусками`
	stRailTypesForUI[11] = `Как и Правое`

dim stStairUITabNames[14]
	stStairUITabNames[1] = `Типы 2D-символа`
	stStairUITabNames[2] = `Реквизиты 2D-символа`
	stStairUITabNames[3] = `Символ Линии Всхода`
	stStairUITabNames[4] = `Подъем и Спуск, Нумерация`
	stStairUITabNames[5] = `Ограждение и Тетива в Символе`
	stStairUITabNames[6] = `Зависимость от Этажа и 2D над Собственным`
	stStairUITabNames[7] = `Покрытия`
	stStairUITabNames[8] = `Тип Ограждения - Справа`
	stStairUITabNames[9] = `Тип Ограждения - Слева`

for i = 10 to 12
	stStairUITabNames[i] = ""
next i
	stStairUITabNames[13] = `Подъем и Спуск, Описание`
	stStairUITabNames[14] = `Реквизиты Сечения`

call "ui_stairs" parameters gs_ui_current_page		= gs_ui_current_page,
! --- 2D symbol type ---
			gs_detlevel_2D_m		= gs_detlevel_2D_m,
			gs_ScaleChangeSM		= gs_ScaleChangeSM,
			iScaleChangeSM			= iScaleChangeSM,
			gs_ScaleChangeMD		= gs_ScaleChangeMD,
			iScaleChangeMD			= iScaleChangeMD,
			stScaleType				= stScaleType,
			bCustom2dDetlevel		= bCustom2dDetlevel,
			gs_SymbolType_m			= gs_SymbolType_m,
			iSymbolGroup			= iSymbolGroup,
! --- 2D symbol attributes ---
			bEnableBreakLineStyle	= 1,
			breakline_style			= breakline_style,
			gs_cont_pen				= gs_cont_pen,
			gs_DashLinePen			= gs_DashLinePen,
			solid_line				= solid_line,
			dash_line				= dash_line,
			gs_fill_type			= gs_fill_type,
			gs_fill_pen				= gs_fill_pen,
			gs_back_pen				= gs_back_pen,
			gs_FillAbove			= gs_FillAbove,
! --- Walkline ---
			bShowWalkLine				= bShowWalkLine,
			bShowWalkLineAboveBreakline	= bShowWalkLineAboveBreakline,
			gs_wLinePen					= gs_wLinePen,
			gs_wLineType1				= gs_wLineType1,
			arrow_style					= arrow_style,
			gs_ArrowFillPen				= gs_ArrowFillPen,
			gs_ArrowFillPenAbove		= gs_ArrowFillPenAbove,
			gs_StartEndStyle			= gs_StartEndStyle,
			gs_StartEndFillPen			= gs_StartEndFillPen,
! --- Text Display ---
			fontType				= fontType,
			bShowNumbering			= bShowNumbering,
			bShowRiseAndRunText		= bShowRiseAndRunText,
			nStartNumbering			= nStartNumbering,
			gs_NumTextSize			= gs_NumTextSize,
			gs_text_size_pt_num 	= gs_text_size_pt_num,
			gs_NumTextPen			= gs_NumTextPen,
			gs_RiseRunText			= gs_RiseRunText,
			iRiseRunText			= iRiseRunText,
			gs_CustomText1			= gs_CustomText1,
			gs_CustomText2			= gs_CustomText2,
			gs_customText_rise		= gs_customText_rise,
			fontsize				= fontsize,
			gs_text_size_pt			= gs_text_size_pt,
			gs_text_pen				= gs_text_pen,
			walkingDirUPDN			= walkingDirUPDN,
			bEnableCustomDownText	= 1,
			gs_CustomText_Down 		= gs_CustomText_Down,
			UPDNfontsize			= UPDNfontsize,
			gs_text_size_pt_UpDn	= gs_text_size_pt_UpDn,
			UPDNfontpen				= UPDNfontpen,
			typeTextRotation_RiseRun 	= typeTextRotation_RiseRun,
			typeTextRotation_Num 		= typeTextRotation_Num,
			typeTextRotation_UpDn 		= typeTextRotation_UpDn,
			bEnableDescription		= 1,
			gs_description			= gs_description,
			gs_desc_text_size		= gs_desc_text_size,
			gs_desc_text_size_pt	= gs_desc_text_size_pt,
			gs_desc_text_pen		= gs_desc_text_pen,
! --- Rail & Carriage 2D ---
			bShowRailOnFloorPlan	= bShowRailOnFloorPlan,
			railLineType			= railLineType,
			railPen					= railPen,
			bShowRailAxis			= bShowRailAxis,
			railAxisLineType		= railAxisLineType,
			gs_RailAxisPen			= gs_RailAxisPen,
			bSymbolic2D				= bSymbolic2D,
			postSymbolType			= postSymbolType,
			iPostSymbolType			= iPostSymbolType,
			postLineType			= postLineType,
			postPen					= postPen,
			bEnableCarriageLine		= bEnableCarriageLine,
			bShowCarriage			= bShowCarriage,
			carriageLineType		= carriageLineType,
			carriagePen				= carriagePen,
! --- Story Sensitivity ---
			bStorySensitive			= bStorySensitive,
			gs_BreaklineStUp		= gs_BreaklineStUp,
			gs_LowerPartStUp		= gs_LowerPartStUp,
			gs_UpperPartStUp		= gs_UpperPartStUp,
			gs_TreadStUp			= gs_TreadStUp,
			gs_LineTypeStUp			= gs_LineTypeStUp,
			gs_LinePenStUp			= gs_LinePenStUp,
			gs_wLineTypeStUp		= gs_wLineTypeStUp,
! --- 3D & Section Attributes ---
			bRiserCover				= bRiserCover,
			bTreadCover				= (treadThickness > 0.0001),
			penLineStringer 		= penLineStringer,
			penLineStringer_m 		= penLineStringer_m,
			typeFillStringer		= typeFillStringer,
			penFillStringer			= penFillStringer,
			penFillStringer_m		= penFillStringer_m,
			penBackFillStringer		= penBackFillStringer,
			penBackFillStringer_m	= penBackFillStringer_m,
			penLineTread			= penLineTread,
			penLineTread_m			= penLineTread_m,
			typeFillTread			= typeFillTread,
			penFillTread			= penFillTread,
			penFillTread_m			= penFillTread_m,
			penBackFillTread		= penBackFillTread,
			penBackFillTread_m		= penBackFillTread_m,
			penLineRiser			= penLineRiser,
			penLineRiser_m 			= penLineRiser_m,
			typeFillRiser			= typeFillRiser,
			penFillRiser			= penFillRiser,
			penFillRiser_m			= penFillRiser_m,
			penBackFillRiser		= penBackFillRiser,
			penBackFillRiser_m		= penBackFillRiser_m,
! --- Materials ---
			gs_shadow				= gs_shadow,
			matBase					= matBase,
			matTread				= matTread,
			matRiser				= matRiser,
			matPost					= matPost,
			matHandrail				= matHandrail,
			matSurface				= matSurface,
			matBar					= matBar,
! --- Rail Types ---
			bRightRail				= bRightRail,
			bLeftRail				= bLeftRail,
			leftRailType			= leftRailType,
			rightRailType			= rightRailType,
! --- String resources ---
			stStairUITabNames		= stStairUITabNames,
			stStairSymbolTypes		= stStairSymbolTypes,
			stSymbolGroup			= stSymbolGroup,
			stArrowHeadStyles		= stArrowHeadStyles,
			stStartSymbolStyles		= stStartSymbolStyles,
			stPostSymbolType		= stPostSymbolType,
			stRailPosition			= stRailPosition,
			stRailTypesForUI		= stRailTypesForUI,
			stRailTypes				= stRailTypes,
			stStairUI				= stStairUI,
! --- Stair Type ---
			iStairType				= 2		! Straight

end


]]>
</Script_UI>

<Comment SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Comment>

<CalledMacros SectVersion="2" SectionFlags="0" SubIdent="0">
	<Macro>
		<MName><![CDATA["Stair_RiseRun_Text"]]></MName>
		<MainGUID>E42F5F06-4225-4F32-A64C-ADCF1D4F9EDC</MainGUID>
	</Macro>
	<Macro>
		<MName><![CDATA["railSymbol2D_m"]]></MName>
		<MainGUID>C5C904E6-1706-4CD1-BC8D-6C294B5B40F7</MainGUID>
	</Macro>
	<Macro>
		<MName><![CDATA["stairRails_m"]]></MName>
		<MainGUID>4A3DDA4A-B43E-4039-B45A-463905CF42AD</MainGUID>
	</Macro>
	<Macro>
		<MName><![CDATA["ui_stairs"]]></MName>
		<MainGUID>D8D2E274-0A82-4EF4-845A-78AD6980E72F</MainGUID>
	</Macro>
	<Macro>
		<MName><![CDATA["FM_types"]]></MName>
		<MainGUID>2759D2DF-AA8E-44D1-AD1D-261581266B34</MainGUID>
	</Macro>
	<Macro>
		<MName><![CDATA["Onorm_Stair"]]></MName>
		<MainGUID>F021AF23-E4F7-4961-964D-C9BCAFB786DD</MainGUID>
	</Macro>
</CalledMacros>

<Copyright SectVersion="1" SectionFlags="0" SubIdent="0">
	<Author>GRAPHISOFT</Author>
	<License>
		<Type>CC BY-ND</Type>
		<Version>3.0</Version>
	</License>
</Copyright>

</Symbol>
