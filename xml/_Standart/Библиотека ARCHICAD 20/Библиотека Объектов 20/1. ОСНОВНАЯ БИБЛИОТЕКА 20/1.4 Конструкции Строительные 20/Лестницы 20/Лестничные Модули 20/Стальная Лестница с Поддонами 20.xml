<?xml version="1.0" encoding="UTF-8"?>
<Symbol IsArchivable="true" IsPlaceable="true" MainGUID="3A62D75D-AAF5-454E-B33A-11208930AD2B" MigrationValue="Normal" Owner="1196638531" Signature="1196644685" Version="43">
<Ancestry SectVersion="1" SectionFlags="0" SubIdent="0" Template="false">
	<MainGUID>F938E33A-329D-4A36-BE3E-85E126820996</MainGUID>
	<MainGUID>103E8D2C-8230-42E1-9597-46F84CCE28C0</MainGUID>
	<MainGUID>784EAEA1-5041-4AA6-B6F4-EF263A891EE7</MainGUID>
	<MainGUID>57B7C584-5C0D-11D6-A0D8-036F034B6792</MainGUID>
</Ancestry>

<MigrationTable SectVersion="1" SectionFlags="0" SubIdent="0">
	<MigrationTableElement>
		<MainGUID>8C0BDD9A-6DEF-416B-B4DB-189C3799367F</MainGUID>
		<Version>19</Version>
		<Name><![CDATA[""]]></Name>
		<AutoMigration>true</AutoMigration>
	</MigrationTableElement>
</MigrationTable>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_3D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
if gs_detlevel_3D_m = 0 then END
if not(gs_shadow) then SHADOW OFF



! Contour Hotspots
! ------------------------------------------------------------------
unID = 1

HOTSPOT 0,	0,				0,						unID,b,1+256	: unID=unID+1
HOTSPOT 0,	-0.1,			0,						unID,b,3		: unID=unID+1
HOTSPOT 0,	flightWidth,	0,						unID,b,2		: unID=unID+1

HOTSPOT a,	0,				nRisers*treadHeight,	unID,b,1+256	: unID=unID+1
HOTSPOT a,	-0.1,			nRisers*treadHeight,	unID,b,3		: unID=unID+1
HOTSPOT a,	flightWidth,	nRisers*treadHeight,	unID,b,2		: unID=unID+1

HOTSPOT a,	flightWidth,	0,						unID,zzyzx,1+128	: unID=unID+1
HOTSPOT a,	flightWidth,	-0.1,					unID,zzyzx,3		: unID=unID+1
HOTSPOT a,	flightWidth,	zzyzx,					unID,zzyzx,2		: unID=unID+1

HOTSPOT a,	0,				0,						unID,zzyzx,1+128	: unID=unID+1
HOTSPOT a,	0,				-0.1,					unID,zzyzx,3		: unID=unID+1
HOTSPOT a,	0,				zzyzx,					unID,zzyzx,2		: unID=unID+1


pen gs_cont_pen
! ======================================================================
! Riser
! ======================================================================

intTreadNum		= int(A/treadDepth)
distTreadCover	= treadThickness/tan(angleRiser)
distTread		= (treadThickness + thickPan)/tan(angleRiser)
xRiser 			= thickRiser/sin(angleRiser)
xTreadCover		= treadDepth + widthOverlapTread - xRiser

if typeStringer_m = 7 then					! Channel Inside Open - Stringer
	widthTotalTread	= b - thickStringer * 2
else
	widthTotalTread	= widthFreeFlight
endif
bet	= atn((2*treadDepth)/widthTotalTread)

! Point of Riser
! ----------------------------------------------------------------------
dim pointRiser[][3]
i = 1

if bRiser then
	pointRiser[i][1] = widthOverlapTread
	pointRiser[i][2] = 0
	pointRiser[i][3] = 15
else
	pointRiser[i][1] = distTread
	pointRiser[i][2] = treadHeight - treadThickness - thickPan
	pointRiser[i][3] = 15
endif
i = i + 1

if typeNose = stTypeNose[1] then
	pointRiser[i][1] = 0
	pointRiser[i][2] = treadHeight
	pointRiser[i][3] = 15
	i = i + 1
endif

if typeNose = stTypeNose[2] then
	pointRiser[i][1] = radiusFillet * (1 + sin(90-angleRiser)) / tan(angleRiser)
	pointRiser[i][2] = treadHeight - radiusFillet * (1 + sin(90-angleRiser))
	pointRiser[i][3] = 79
	i = i + 1
	pointRiser[i][1] = radiusFillet * ((1 + sin(90-angleRiser)) / tan(angleRiser) + cos((90-angleRiser)))
	pointRiser[i][2] = treadHeight - radiusFillet
	pointRiser[i][3] = 979
	i = i + 1
	pointRiser[i][1] = radiusFillet * ((1 + sin(90-angleRiser)) / tan(angleRiser) + cos((90-angleRiser)))
	pointRiser[i][2] = treadHeight
	pointRiser[i][3] = 3079
	i = i + 1
endif
if typeNose = stTypeNose[3] then
	pointRiser[i][1] = depthChamfer/(1 + tan(angleRiser)*tan(angleChamfer-90))
	pointRiser[i][2] = treadHeight - depthChamfer/(1/tan(angleRiser)+tan(angleChamfer-90))
	pointRiser[i][3] = 15
	i = i + 1
	pointRiser[i][1] = depthChamfer
	pointRiser[i][2] = treadHeight
	pointRiser[i][3] = 15
	i = i + 1
endif
iStartTread = i
pointRiser[i][1] = lengthNose
pointRiser[i][2] = treadHeight
pointRiser[i][3] = 15
i = i + 1

pointRiser[i][1] = lengthNose
pointRiser[i][2] = treadHeight - thickRiser
pointRiser[i][3] = 15
i = i + 1

if typeNose = stTypeNose[1] then
	pointRiser[i][1] = thickRiser/tan(angleRiser/2)
	pointRiser[i][2] = treadHeight - thickRiser
	pointRiser[i][3] = 15
	i = i + 1
endif
if typeNose = stTypeNose[2] then
	pointRiser[i][1] = radiusFillet * ((1 + sin(90-angleRiser)) / tan(angleRiser) + cos((90-angleRiser)))
	pointRiser[i][2] = treadHeight - thickRiser
	pointRiser[i][3] = 79
	i = i + 1
	pointRiser[i][1] = radiusFillet * ((1 + sin(90-angleRiser)) / tan(angleRiser) + cos((90-angleRiser)))
	pointRiser[i][2] = treadHeight - radiusFillet
	pointRiser[i][3] = 979
	i = i + 1
	pointRiser[i][1] = (radiusFillet-thickRiser) * (1 + sin(90-angleRiser)) / tan(angleRiser)
	pointRiser[i][2] = treadHeight - radiusFillet * (1 + sin(90-angleRiser))
	pointRiser[i][3] = 3079
	i = i + 1
endif
if typeNose = stTypeNose[3] then
	pointRiser[i][1] = depthChamfer + thickRiser/tan(angleChamfer/2)
	pointRiser[i][2] = treadHeight - thickRiser
	pointRiser[i][3] = 15
	i = i + 1
	pointRiser[i][1] = depthChamfer/(1 + tan(angleRiser)*tan(angleChamfer-90)) + sin(180-((angleRiser+angleChamfer)/2)) * thickRiser/sin((angleRiser-angleChamfer+180)/2)
	pointRiser[i][2] = treadHeight - depthChamfer/(1/tan(angleRiser)+tan(angleChamfer-90)) - cos(180-((angleRiser+angleChamfer)/2)) * thickRiser/sin((angleRiser-angleChamfer+180)/2)
	pointRiser[i][3] = 15
	i = i + 1
endif
pointRiser[i][1] = distTreadCover + xRiser
pointRiser[i][2] = treadHeight - treadThickness
pointRiser[i][3] = 15
i = i + 1
pointRiser[i][1] = treadDepth + distTreadCover + widthOverlapTread
pointRiser[i][2] = treadHeight - treadThickness
pointRiser[i][3] = 15
i = i + 1

iEndTread = i
pointRiser[i][1] = treadDepth + widthOverlapTread
pointRiser[i][2] = treadHeight
pointRiser[i][3] = 15
i = i + 1

!-----------------------------------------------------------------

pointRiser[i][1] = widthOverlapTread + treadDepth + xRiser
pointRiser[i][2] = treadHeight
pointRiser[i][3] = 15
i = i + 1
pointRiser[i][1] = widthOverlapTread + treadDepth + xRiser + distTread
pointRiser[i][2] = treadHeight - treadThickness - thickPan
pointRiser[i][3] = 15
i = i + 1
pointRiser[i][1] = distTread + xRiser
pointRiser[i][2] = treadHeight - treadThickness - thickPan
pointRiser[i][3] = 15
i = i + 1

if bRiser then
	pointRiser[i][1] = widthOverlapTread + xRiser
	pointRiser[i][2] = 0
	pointRiser[i][3] = 15
	i = i + 1

	pointRiser[i][1] = widthOverlapTread
	pointRiser[i][2] = 0
	pointRiser[i][3] = -1
else
	pointRiser[i][1] = distTread
	pointRiser[i][2] = treadHeight - treadThickness - thickPan
	pointRiser[i][3] = 15
	i = i + 1

	pointRiser[i][1] = distTread
	pointRiser[i][2] = treadHeight - treadThickness - thickPan
	pointRiser[i][3] = -1
endif


for j = 1 to i
	put pointRiser[j][1], pointRiser[j][2], pointRiser[j][3]
next j


! ----- Draw the Riser -----
material matRiser
if GLOB_CONTEXT = 4 then SECT_FILL typeFillRiser, penBackFillRiser, penFillRiser, penLineRiser

rotx 90
mulz -1
addz (B-widthTotalTread)/2

! CutPlane for the last Tread
! ------------------------------[
	addx A : rotz 90
	cutplane{2} 90, 2
	del 2
! ------------------------------]

for n = 0 to intTreadNum-1
	add n * treadDepth, n * treadHeight,0
	if n <> intTreadNum-1 then
		prism_ nsp/3, widthTotalTread,
			use (nsp)
	else
		prism_ nsp/3, widthTotalTread,
			get (nsp)
	endif
	del 1
next n

cutend

! ======================================================================
! Treads
! ======================================================================

material matTread
if GLOB_CONTEXT = 4 then SECT_FILL typeFillTread, penBackFillTread, penFillTread, penLineTread

if treadThickness > EPS then
	for j = iStartTread to iEndTread
		put pointRiser[j][1], pointRiser[j][2], pointRiser[j][3]
	next j

	! CutPlane for the last Tread
	! ------------------------------[
		addx A : rotz 90
		cutplane{2} 90, 2
		del 2
	! ------------------------------]

	for iTread = 0 to intTreadNum-1
		base
		add iTread  * treadDepth, iTread  * treadHeight,0
		if iTread  <> intTreadNum-1 then
			prism_ nsp/3, widthTotalTread,
				use (nsp)
		else
			prism_ nsp/3, widthTotalTread,
				get (nsp)
		endif
		del 1

		vert 0, 0, 0 !#1
		vert 0, 0, 1 !#2
		vert 0, 1, 0 !#3
		vert -1, 0, 0 !#4
		coor 2, -1, -2,-3, -4
		body -1
	next iTread

	cutend
endif

DEL 3

! ======================================================================
! Stringer
! ======================================================================

material matBase
if GLOB_CONTEXT = 4 then SECT_FILL typeFillStringer, penBackFillStringer, penFillStringer, penLineStringer

if typeStringer_m = 1 | typeStringer_m = 2 then
	toeRadius = 0.0001
	toeRadius2 = 0.0001
endif
if typeStringer_m = 3 | typeStringer_m = 4 then
	toeRadius = radiusStringer
	toeRadius2 = radiusStringer-thickStringer
endif
if typeStringer_m = 5 | typeStringer_m = 6 then
	toeRadius = widthStringer/2
	toeRadius2 = widthStringer/2-thickStringer
endif

nTrans = 0
numPoint = 0

addx widthOverlapTread-cutDistLowerEnd
rotz -90
cutplane 180-cutAngleLowerEnd
del 2

add a, 0, zzyzx+cutDistUpperEnd
rotz -90
cutplane -90+cutAngleUpperEnd
del 2

for i = 1 to 2
	if typeStringer_m <> 7 & typeStringer_m <> 8 then

		! ----- Solid Bar, Solid Tube, Rounded Rectangle -----

		numPoint = 13

		put toeRadius,						0, 							79
		put toeRadius,						toeRadius, 					979
		put 0,								toeRadius,					3079

		put 0,								widthStringer-toeRadius, 	79
		put toeRadius,						widthStringer-toeRadius, 	979
		put toeRadius,						widthStringer,				3079

		put heightStringer-toeRadius,		widthStringer,				79
		put heightStringer-toeRadius,		widthStringer-toeRadius, 	979
		put heightStringer,					widthStringer-toeRadius, 	3079

		put heightStringer,					toeRadius,					79
		put heightStringer	- toeRadius,	toeRadius,					979
		put heightStringer - toeRadius,		0,							3079

		put toeRadius,						0, 							-1

		! ----- Hollow Core Bar, Hollow  Core Tube, Hollow Rounded Rectangle -----

		if typeStringer_m = 2 | typeStringer_m = 4 | typeStringer_m = 6 then
			numPoint = 26

			put toeRadius2+thickStringer,				thickStringer, 							79
			put toeRadius2+thickStringer,				toeRadius2+thickStringer, 				979
			put +thickStringer,							toeRadius2+thickStringer,				3079

			put +thickStringer,							widthStringer-toeRadius2-thickStringer, 79
			put toeRadius2+thickStringer,				widthStringer-toeRadius2-thickStringer, 979
			put toeRadius2+thickStringer,				widthStringer-thickStringer,			3079

			put heightStringer-toeRadius2-thickStringer,widthStringer-thickStringer,			79
			put heightStringer-toeRadius2-thickStringer,widthStringer-toeRadius2-thickStringer, 979
			put heightStringer-thickStringer,			widthStringer-toeRadius2-thickStringer, 3079

			put heightStringer-thickStringer,			toeRadius2+thickStringer,				79
			put heightStringer-toeRadius2-thickStringer,toeRadius2+thickStringer,				979
			put heightStringer-toeRadius2-thickStringer,thickStringer,							3079

			put toeRadius2+thickStringer,				thickStringer,	 						-1
		endif
	else
		numPoint = 9

		put 0,							 	0, 							15
		put 0,							 	widthStringer, 				15
		put heightStringer, 			 	widthStringer,				15

		put heightStringer,				 	0,							15
		put heightStringer-thickStringer,	0, 							15
		put heightStringer-thickStringer,	widthStringer-thickStringer,15

		put thickStringer,					widthStringer-thickStringer,15
		put thickStringer,					0,							15
		put 0,							 	0, 							15

		if typeStringer_m = 7 then
			muly -1
			addy -widthStringer
			nTrans = 2
		endif
	endif

	! CutPlane
	! ------------------------------[
		cutplane{2} 180, 2	! By Start Horizontal
		addx A : rotz 90
		cutplane{2} 90, 2	! By Finish Vertical
		del 2
	! ------------------------------]

	addx -treadHeight/tan(ang) - distNoseStringer/sin(ang)
	roty 90-ang

	PRISM_ numPoint , zzyzx/sin(ang) + (treadHeight + distNoseStringer/cos(ang))/sin(ang),
			get (nsp)

	cutend
	cutend
	del 2 + nTrans

	addy b
	muly -1
next i
del 2*2
cutend
cutend

! --- RAILS --------------------------------------------------------------------
material matPost

! --- Left rail ---
if rail_m = 3 | rail_m = 1 then		! Left, Both
	if bSameRails then
		leftRailType_m = rightRailType_m
		leftWireType_m = rightWireType_m
	endif

	isCuttingOnLeftSide = ((widthStringer-leftRailFrameThk*0.75) > leftRailOffset)
	if isCuttingOnLeftSide then
		addx -treadHeight/tan(ang) - distNoseStringer/sin(ang)
		roty -ang
		cutplane{2} 180, 2
		del 2
	endif

	ADD -leftRailOvhgBottom,flightWidth-leftRailOffset-leftRailFrameThk/2,-leftRailOvhgBottom*tan(ang)+treadHeight

	lraSimple=a+leftRailOvhgBottom+leftRailOvhgTop
	lraComplex=a-treadDepth
	additionXComplex=leftRailOvhgBottom+treadDepth/2
	additionZComplex=leftRailOvhgBottom*tan(ang)
	hrovL=treadDepth/2+leftRailOvhgBottom
	hrovR=treadDepth/2+leftRailOvhgTop
	IF leftRailType_m = 10 THEN	! Rail Post with Bars
		postNumber=max(2,(a-treadDepth)/(3*treadDepth))
	else
		postNumber=(a+leftRailOvhgBottom+leftRailOvhgTop)/(3*treadDepth)+1
	endif
	railAngle	= ang
	side = SIDE_LEFT
	gosub "callRailsForStair"

	DEL 1

	! Bottom side
	add 0, flightWidth - leftRailOffset - railFrameThk/2, 0
	HOTSPOT 0,0,treadHeight+railDist+railHeight-leftRailOvhgBottom*tan(ang),unID,leftRailOvhgBottom, 1+128		: unID=unID+1
	HOTSPOT 0.1,0,treadHeight+railDist+railHeight-leftRailOvhgBottom*tan(ang),unID,leftRailOvhgBottom, 3		: unID=unID+1
	HOTSPOT -leftRailOvhgBottom,0,treadHeight+railDist+railHeight-leftRailOvhgBottom*tan(ang),unID,leftRailOvhgBottom, 2		: unID=unID+1

	HOTSPOT -leftRailOvhgBottom,leftRailOffset,treadHeight+railDist-leftRailOvhgBottom*tan(ang),unID,leftRailOffset, 1+128		: unID=unID+1
	HOTSPOT -leftRailOvhgBottom,leftRailOffset-0.1,treadHeight+railDist-leftRailOvhgBottom*tan(ang),unID,leftRailOffset, 3		: unID=unID+1
	HOTSPOT -leftRailOvhgBottom,0,treadHeight+railDist-leftRailOvhgBottom*tan(ang),unID,leftRailOffset, 2		: unID=unID+1

	HOTSPOT -leftRailOvhgBottom,0,treadHeight-leftRailOvhgBottom*tan(ang),unID,leftRailDist, 1+128		: unID=unID+1
	HOTSPOT -leftRailOvhgBottom,0,treadHeight-0.1-leftRailOvhgBottom*tan(ang),unID,leftRailDist, 3		: unID=unID+1
	HOTSPOT -leftRailOvhgBottom,0,treadHeight+railDist-leftRailOvhgBottom*tan(ang),unID,leftRailDist, 2		: unID=unID+1

	HOTSPOT -leftRailOvhgBottom,0,treadHeight-leftRailOvhgBottom*tan(ang)+railDist,unID,leftRailHeight, 1+128		: unID=unID+1
	HOTSPOT -leftRailOvhgBottom,0,treadHeight-leftRailOvhgBottom*tan(ang)+railDist-0.1,unID,leftRailHeight, 3		: unID=unID+1
	HOTSPOT -leftRailOvhgBottom,0,treadHeight-leftRailOvhgBottom*tan(ang)+railDist+railHeight,unID,leftRailHeight, 2	: unID=unID+1

	! Top side
	HOTSPOT nRisers*treadDepth,0,(nRisers+1)*treadHeight+leftRailOvhgTop*tan(ang)+railHeight+railDist,unID,leftRailOvhgTop, 1+128			: unID=unID+1
	HOTSPOT nRisers*treadDepth-0.1,0,(nRisers+1)*treadHeight+leftRailOvhgTop*tan(ang)+railHeight+railDist,unID,leftRailOvhgTop, 3			: unID=unID+1
	HOTSPOT nRisers*treadDepth+leftRailOvhgTop,0,(nRisers+1)*treadHeight+leftRailOvhgTop*tan(ang)+railHeight+railDist,unID,leftRailOvhgTop, 2			: unID=unID+1

	HOTSPOT nRisers*treadDepth+leftRailOvhgTop,leftRailOffset,(nRisers+1)*treadHeight+railDist+leftRailOvhgTop*tan(ang),unID,leftRailOffset, 1+128		: unID=unID+1
	HOTSPOT nRisers*treadDepth+leftRailOvhgTop,leftRailOffset-0.1,(nRisers+1)*treadHeight+railDist+leftRailOvhgTop*tan(ang),unID,leftRailOffset, 3		: unID=unID+1
	HOTSPOT nRisers*treadDepth+leftRailOvhgTop,0,(nRisers+1)*treadHeight+railDist+leftRailOvhgTop*tan(ang),unID,leftRailOffset, 2		: unID=unID+1

	HOTSPOT nRisers*treadDepth+leftRailOvhgTop,0,(nRisers+1)*treadHeight+(leftRailOvhgTop)*tan(ang),unID,leftRailDist, 1+128		: unID=unID+1
	HOTSPOT nRisers*treadDepth+leftRailOvhgTop,0,(nRisers+1)*treadHeight+(leftRailOvhgTop)*tan(ang)-0.1,unID,leftRailDist, 3		: unID=unID+1
	HOTSPOT nRisers*treadDepth+leftRailOvhgTop,0,(nRisers+1)*treadHeight+(leftRailOvhgTop)*tan(ang)+railDist,unID,leftRailDist, 2		: unID=unID+1

	HOTSPOT nRisers*treadDepth+leftRailOvhgTop,0,(nRisers+1)*treadHeight+leftRailOvhgTop*tan(ang)+railDist,unID,leftRailHeight, 1+128			: unID=unID+1
	HOTSPOT nRisers*treadDepth+leftRailOvhgTop,0,(nRisers+1)*treadHeight+leftRailOvhgTop*tan(ang)+railDist-0.1,unID,leftRailHeight, 3			: unID=unID+1
	HOTSPOT nRisers*treadDepth+leftRailOvhgTop,0,(nRisers+1)*treadHeight+leftRailOvhgTop*tan(ang)+railDist+railHeight,unID,leftRailHeight, 2			: unID=unID+1
	del 1

	if isCuttingOnLeftSide then cutend
ENDIF

! --- Right rail ---
if rail_m = 2 | rail_m = 1 then		! Right, Both
	isCuttingOnRightSide = ((widthStringer-rightRailFrameThk*0.75) > rightRailOffset)
	if isCuttingOnRightSide then
		addx -treadHeight/tan(ang) - distNoseStringer/sin(ang)
		roty -ang
		cutplane{2} 180, 2
		del 2
	endif

	ADD -rightRailOvhgBottom-nosing*0,rightRailOffset+rightRailFrameThk/2,-rightRailOvhgBottom*tan(ang)+treadHeight

	lraSimple=a+rightRailOvhgBottom+rightRailOvhgTop
	lraComplex=a-treadDepth
	additionXComplex=rightRailOvhgBottom+treadDepth/2
	additionZComplex=rightRailOvhgBottom*tan(ang)
	hrovL=treadDepth/2+rightRailOvhgBottom
	hrovR=treadDepth/2+rightRailOvhgTop
	IF rightRailType_m = 10 THEN	! Rail Post with Bars
		postNumber=max(2,(a-treadDepth)/(3*treadDepth))
	else
		postNumber=(a+rightRailOvhgBottom+rightRailOvhgTop)/(3*treadDepth)+1
	endif
	railAngle	= ang
	side = SIDE_RIGHT
	gosub "callRailsForStair"

	DEL 1

	! Bottom side
	add -nosing*0, rightRailOffset + railFrameThk/2, 0
	HOTSPOT 0,0,treadHeight+railDist+railHeight-rightRailOvhgBottom*tan(ang),unID,rightRailOvhgBottom, 1+128		: unID=unID+1
	HOTSPOT -0.1,0,treadHeight+railDist+railHeight-rightRailOvhgBottom*tan(ang),unID,rightRailOvhgBottom, 3		: unID=unID+1
	HOTSPOT -rightRailOvhgBottom,0,treadHeight+railDist+railHeight-rightRailOvhgBottom*tan(ang),unID,rightRailOvhgBottom, 2		: unID=unID+1

	HOTSPOT -rightRailOvhgBottom,-rightRailOffset,treadHeight+leftRailDist-rightRailOvhgBottom*tan(ang),unID,rightRailOffset, 1+128		: unID=unID+1
	HOTSPOT -rightRailOvhgBottom,-rightRailOffset+0.1,treadHeight+leftRailDist-rightRailOvhgBottom*tan(ang),unID,rightRailOffset, 3		: unID=unID+1
	HOTSPOT -rightRailOvhgBottom,0,treadHeight+leftRailDist-rightRailOvhgBottom*tan(ang),unID,rightRailOffset, 2		: unID=unID+1

	HOTSPOT -rightRailOvhgBottom,0,treadHeight-rightRailOvhgBottom*tan(ang),unID,rightRailDist, 1+128		: unID=unID+1
	HOTSPOT -rightRailOvhgBottom,0,treadHeight-0.1-rightRailOvhgBottom*tan(ang),unID,rightRailDist, 3		: unID=unID+1
	HOTSPOT -rightRailOvhgBottom,0,treadHeight+leftRailDist-rightRailOvhgBottom*tan(ang),unID,rightRailDist, 2		: unID=unID+1

	HOTSPOT -rightRailOvhgBottom,0,treadHeight-rightRailOvhgBottom*tan(ang)+railDist,unID,rightRailHeight, 1+128		: unID=unID+1
	HOTSPOT -rightRailOvhgBottom,0,treadHeight-rightRailOvhgBottom*tan(ang)+railDist-0.1,unID,rightRailHeight, 3		: unID=unID+1
	HOTSPOT -rightRailOvhgBottom,0,treadHeight-rightRailOvhgBottom*tan(ang)+railDist+railHeight,unID,rightRailHeight, 2	: unID=unID+1

	! Top side
	HOTSPOT nRisers*treadDepth,0,(nRisers+1)*treadHeight+rightRailOvhgTop*tan(ang)+railDist+railHeight,unID,rightRailOvhgTop, 1+128			: unID=unID+1
	HOTSPOT nRisers*treadDepth+0.1,0,(nRisers+1)*treadHeight+rightRailOvhgTop*tan(ang)+railDist+railHeight,unID,rightRailOvhgTop, 3			: unID=unID+1
	HOTSPOT nRisers*treadDepth+rightRailOvhgTop,0,(nRisers+1)*treadHeight+rightRailOvhgTop*tan(ang)+railDist+railHeight,unID,rightRailOvhgTop, 2			: unID=unID+1

	HOTSPOT nRisers*treadDepth+rightRailOvhgTop,-rightRailOffset,(nRisers+1)*treadHeight+railDist+rightRailOvhgTop*tan(ang),unID,rightRailOffset, 1+128		: unID=unID+1
	HOTSPOT nRisers*treadDepth+rightRailOvhgTop,-rightRailOffset+0.1,(nRisers+1)*treadHeight+railDist+rightRailOvhgTop*tan(ang),unID,rightRailOffset, 3		: unID=unID+1
	HOTSPOT nRisers*treadDepth+rightRailOvhgTop,0,(nRisers+1)*treadHeight+railDist+rightRailOvhgTop*tan(ang),unID,rightRailOffset, 2		: unID=unID+1

	HOTSPOT nRisers*treadDepth+rightRailOvhgTop,0,(nRisers+1)*treadHeight+(rightRailOvhgTop)*tan(ang),unID,rightRailDist, 1+128		: unID=unID+1
	HOTSPOT nRisers*treadDepth+rightRailOvhgTop,0,(nRisers+1)*treadHeight+(rightRailOvhgTop)*tan(ang)-0.1,unID,rightRailDist, 3		: unID=unID+1
	HOTSPOT nRisers*treadDepth+rightRailOvhgTop,0,(nRisers+1)*treadHeight+(rightRailOvhgTop)*tan(ang)+railDist,unID,rightRailDist, 2		: unID=unID+1

	HOTSPOT nRisers*treadDepth+rightRailOvhgTop,0,(nRisers+1)*treadHeight+rightRailOvhgTop*tan(ang)+railDist,unID,rightRailHeight, 1+128			: unID=unID+1
	HOTSPOT nRisers*treadDepth+rightRailOvhgTop,0,(nRisers+1)*treadHeight+rightRailOvhgTop*tan(ang)+railDist-0.1,unID,rightRailHeight, 3			: unID=unID+1
	HOTSPOT nRisers*treadDepth+rightRailOvhgTop,0,(nRisers+1)*treadHeight+rightRailOvhgTop*tan(ang)+railDist+railHeight,unID,rightRailHeight, 2			: unID=unID+1
	del 1

	if isCuttingOnRightSide then cutend
ENDIF

! ==============================================================================
! top below floor level
! ==============================================================================

if topTreadLevel_m = 2 then		! Top Tread below Floor Level	! currently unused!

	intTreadNum	= int(a/treadDepth)
	widthTread	= a/intTreadNum
	heightTread	= zzyzx/intTreadNum

	ang=atn(zzyzx/a)
	y=stairSlabThk/cos(ang)
	x=stairSlabThk/sin(ang)

	intTreadNum = intTreadNum-1

! --- base ---------------------------------------------------------------------
	material bmat

	! --- concrete ---
	if stairBaseType_m = 1 then		! Concrete

		for i=1 to intTreadNum
			put (i-1)*widthTread,i*heightTread-treadThickness,15
			put i*widthTread,i*heightTread-treadThickness,15
		next i

		prism_ 4+(2*intTreadNum),b,
				0,0,15,
				get (nsp),
				a-widthTread,zzyzx-treadThickness-heightTread,15,
				a-widthTread,zzyzx-y-heightTread,15,
				x,0,15
	endif

	! --- wood ---
	if stairBaseType_m = 2 then		! Wood

		for i=1 to intTreadNum
			put (i-1)*widthTread,i*heightTread-treadThickness,15
			put i*widthTread,i*heightTread-treadThickness,15
		next i

		addz 0.15
		prism_ 4+(2*intTreadNum),0.05,
				0,0,15,
				use (nsp),
				a,zzyzx-treadThickness,15,
				a,zzyzx-y,15,
				x,0,15
		del 1

		addz b-0.2
		prism_ 4+(2*intTreadNum),0.05,
				0,0,15,
				get (nsp),
				a,zzyzx-treadThickness,15,
				a,zzyzx-y,15,
				x,0,15
		del 1
	endif

	! --- Treads -------------------------------------------------------------------
	material matTread

	for i=1 to intTreadNum
		put (i-1)*widthTread-nosing,i*heightTread-treadThickness,15
		put i*widthTread,i*heightTread-treadThickness,15
		put i*widthTread,i*heightTread,15
		put (i-1)*widthTread-nosing,i*heightTread,15
	next i

	for k=1 to intTreadNum
		base
		prism_ 4,b,
				get (12)

		vert 0, 0, 0 !#1
		vert 0, 0, 1 !#2
		vert 0, 1, 0 !#3
		vert -1, 0, 0 !#4
		coor 2, -1, -2,-3, -4
		body -1
	next k


	! --- RAILS --------------------------------------------------------------------
	material matPost

	! --- Right rail ---
	if rail_m = 2 | rail_m = 1 then		! Right, Both
		bLeftSide = 0
		railBarDepth = rightRailBarDepth
		railBarThk = rightRailBarThk
		railWireDepth = rightRailWireDepth
		railWireThk = rightRailWireThk
		RailWireDiam = rightRailWireDiam
		gosub "one_rail_simple"
	endif
	! --- Left rail ---
	if rail_m = 3 | rail_m = 1 then		! Left, Both
		addz b-0.09
		bLeftSide = 1
		railBarDepth = leftRailBarDepth
		railBarThk = leftRailBarThk
		railWireDepth = leftRailWireDepth
		railWireThk = leftRailWireThk
		RailWireDiam = leftRailWireDiam
		gosub "one_rail_simple"
		del 1
	endif

endif


end
! ==============================================================================
"callRailsForStair":
! ------------------------------------------------------------------------------
!	lraSimple
!	lraComplex
!	additionXComplex
!	additionZComplex
!	hrovL: rail overhang start
!	hrovR: rail overhang end
!	postNumber:   number of posts
!	side: SIDE_LEFT or SIDE_RIGHT
! ==============================================================================
	ani = railAngle
	additionXComplex = additionXComplex
	additionZComplex = additionZComplex
	if side = SIDE_LEFT then
		dsComplex = leftRailDist+treadDepth/2*tan(ang)
	else
		dsComplex = rightRailDist+treadDepth/2*tan(ang)
	endif

	gosub "callRails"
return


! ==============================================================================
"callRails":
! ------------------------------------------------------------------------------
!	ani
!	additionXComplex
!	additionZComplex
!	dsComplex
!  ------------------
!	side: SIDE_LEFT or SIDE_RIGHT
!	lraSimple
!	lraComplex
!	hrovL: rail overhang start
!	hrovR: rail overhang end
!	postNumber:   number of posts
! ==============================================================================
	if side = SIDE_LEFT then
		railBarDepth		= leftRailBarDepth
		railBarDiam			= railBarDepth
		railHeight			= leftRailHeight
		railBarFillThk		= leftRailBarThk
		railFrameThk		= leftRailFrameThk
		railDist			= leftRailDist
		railType_m			= leftRailType_m
		railPostSize		= leftRailPostSize
		barNumber			= nBarsLeftRail
		railWireType		= leftWireType_m
		if leftRailType_m = RAIL_WIRED then
			railBarThk		= leftRailWireThk
			railBarDepth	= leftRailWireDepth
			railBarDiam		= leftRailWireDiam
		endif
	else
		railBarDepth		= rightRailBarDepth
		railBarDiam			= railBarDepth
		railHeight			= rightRailHeight
		railBarFillThk		= rightRailBarThk
		railFrameThk		= rightRailFrameThk
		railDist			= rightRailDist
		railType_m			= rightRailType_m
		railPostSize		= rightRailPostSize
		barNumber			= nBarsRightRail
		railWireType		= rightWireType_m
		if rightRailType_m = RAIL_WIRED then
			railBarThk		= rightRailWireThk
			railBarDepth	= rightRailWireDepth
			railBarDiam		= rightRailWireDiam
		endif
	endif

	call "stairRails_m" parameters	railType_m				= railType_m,
									iStairType				= 1,
									bEnableWired02Rail		= 0,
									bEnableNonVerticalRail	= 0,
									additionXComplex		= additionXComplex,
									additionZComplex		= additionZComplex,
									ptyp_m					= 1,
									ani						= ani,
									ab						= 0,
									rb						= 0,
									rom_m					= 1,
									rmm_m					= 1,
									lraSimple				= lraSimple,
									lraComplex				= lraComplex,
									railHeight				= railHeight,
									railHeightComplex		= dsComplex,
									railDist				= railDist,
									gs_detlevel_3D_m		= gs_detlevel_3D_m,
									gs_cont_pen				= gs_cont_pen,
									res						= res,
									rescs					= rescs,
									gs_shadow				= gs_shadow,

									railFrameThk			= railFrameThk,
									railBarDepth			= railBarDepth,
									railBarFillThk			= railBarFillThk,
									railBarDiam				= railBarDiam,
									balusterDist			= treadDepth,
									railFrameMat			= matBar,
									railBaluFillMat			= matSurface,
									barNumber				= barNumber,
									hrovL					= hrovL,
									hrovR					= hrovR,
									railHandrailMat			= matHandrail,
									iBalusterStyle			= railWireType,
									railPostDiam			= railPostSize,
									railPostWidth			= railPostSize,
									railPostThk				= railFrameThk,
									postNumber				= postNumber,
									railPostMat				= matPost

return

! ==============================================================================
! one side of the railing with simple representation
!	bLeftSide =
!	railBarDepth =
!	railBarThk =
! ==============================================================================
"one_rail_simple":
	material matSurface
	if rightRailType_m = 6 then
		addz 0.03
		poly_ 6,
				widthTread/2,heightTread+0.05+heightTread/2,1,
				widthTread/2,heightTread+1,1,
				a-widthTread/2,zzyzx+1,1,
				a,zzyzx+1,1,
				a,zzyzx+0.05+heightTread/2,1,
				a-widthTread/2,zzyzx+0.05+heightTread/2,1
		del 1
	endif

	material matHandrail
	if rightRailType_m = 5 then
		addz 0.01
		prism_ 14,0.05,
				widthTread/2,heightTread+0.05+heightTread/2,15,
				widthTread/2,heightTread+1,15,
				a-widthTread/2,zzyzx+1,15,
				a,zzyzx+1,15,
				a,zzyzx+0.05+heightTread/2,15,
				a-widthTread/2,zzyzx+0.05+heightTread/2,15,
				widthTread/2,heightTread+0.05+heightTread/2,-1,

				widthTread/2+0.03,heightTread+0.05+heightTread/2+0.03/tan(bet),15,
				widthTread/2+0.03,heightTread+1-0.03*tan(bet),15,
				a-widthTread/2+0.03*tan(ang/2),zzyzx+0.97,15,
				a-0.03,zzyzx+0.97,15,
				a-0.03,zzyzx+0.08+heightTread/2,15,
				a-widthTread/2-tan(ang/2)*0.03,zzyzx+0.08+heightTread/2,15,
				widthTread/2+0.03,heightTread+0.05+heightTread/2+0.03/tan(bet),-1
		del 1
	endif

	if rightRailType_m = 6 then
		addz 0.01
		prism_ 14,0.05,
				widthTread/2,heightTread+0.05+heightTread/2,15,
				widthTread/2,heightTread+1,15,
				a-widthTread/2,zzyzx+1,15,
				a,zzyzx+1,15,
				a,zzyzx+0.05+heightTread/2,15,
				a-widthTread/2,zzyzx+0.05+heightTread/2,15,
				widthTread/2,heightTread+0.05+heightTread/2,-1,

				widthTread/2+0.03,heightTread+0.05+heightTread/2+0.03/tan(bet),15,
				widthTread/2+0.03,heightTread+1-0.03*tan(bet),15,
				a-widthTread/2+0.03*tan(ang/2),zzyzx+0.97,15,
				a-0.03,zzyzx+0.97,15,
				a-0.03,zzyzx+0.08+heightTread/2,15,
				a-widthTread/2-tan(ang/2)*0.03,zzyzx+0.08+heightTread/2,15,
				widthTread/2+0.03,heightTread+0.05+heightTread/2+0.03/tan(bet),-1

		addz 0.025

		material matSurface
		poly_ 6,
				widthTread/2+0.03,heightTread+0.05+heightTread/2+0.03/tan(bet),1,
				widthTread/2+0.03,heightTread+1-0.03*tan(bet),1,
				a-widthTread/2+0.03*tan(ang/2),zzyzx+0.97,1,
				a-0.03,zzyzx+0.97,1,
				a-0.03,zzyzx+0.08+heightTread/2,1,
				a-widthTread/2-tan(ang/2)*0.03,zzyzx+0.08+heightTread/2,1

		del 2
	endif

	if rightRailType_m = 1 then
		addz 0.02
		MATERIAL matHandrail
		prism_ 14,0.05,
				widthTread/2,heightTread+0.05+heightTread/2,15,
				widthTread/2,heightTread+1,15,
				a-widthTread/2,zzyzx+1,15,
				a,zzyzx+1,15,
				a,zzyzx+0.05+heightTread/2,15,
				a-widthTread/2,zzyzx+0.05+heightTread/2,15,
				widthTread/2,heightTread+0.05+heightTread/2,-1,

				widthTread/2+0.03,heightTread+0.05+heightTread/2+0.03/tan(bet),15,
				widthTread/2+0.03,heightTread+1-0.03/tan((90+ang)/2),15,
				a-widthTread/2+0.03*tan(ang/2),zzyzx+0.97,15,
				a-0.03,zzyzx+0.97,15,
				a-0.03,zzyzx+0.08+heightTread/2,15,
				a-widthTread/2-tan(ang/2)*0.03,zzyzx+0.08+heightTread/2,15,
				widthTread/2+0.03,heightTread+0.05+heightTread/2+0.03/tan(bet),-1

		add widthTread/2,heightTread/2,0.01

		for u=1 to (intTreadNum)*2-1
			add widthTread/2,heightTread/2,0
			MATERIAL matBar
			prism_ 4,0.03,
					-0.015,heightTread+0.05-0.015*tan(ang)+0.03/cos(ang),15,
					-0.015,heightTread/2+1-0.03/cos(ang)-0.015*tan(ang),15,
					0.015,heightTread/2+1-0.03/cos(ang)+0.015*tan(ang),15,
					0.015,heightTread+0.05+0.015*tan(ang)+0.03/cos(ang),15
		next u
		del (intTreadNum)*2
		del 1

		MATERIAL matPost
		prism_ 4,0.09,
				a-widthTread/2-tan(ang/2)*0.03,zzyzx,15,
				a-widthTread/2-tan(ang/2)*0.03+0.09,zzyzx,15,
				a-widthTread/2-0.03*tan(ang/2)+0.09,zzyzx+1.1,15,
				a-widthTread/2-0.03*tan(ang/2),zzyzx+1.1,15

		prism_ 4,0.09,
				widthTread/2,heightTread,15,
				widthTread/2-0.09,heightTread,15,
				widthTread/2-0.09,heightTread+1.1,15,
				widthTread/2,heightTread+1.1,15

	endif

	if rightRailType_m = 2 then
		if bLeftSide then addz 0.05-railBarDepth
		addz 0.02
		barDistance = (0.95-railBarThk-heightTread/2)/(nBarsRightRail-1)
		for u=1 to nBarsRightRail
			MATERIAL matBar
			prism_ 6,railBarDepth,
					widthTread/2,heightTread+0.05+heightTread/2,15,
					widthTread/2,heightTread+0.05+heightTread/2+bth,15,
					a-widthTread/2,zzyzx+0.05+heightTread/2+bth,15,
					a-railBarDepth-0.04,zzyzx+0.05+heightTread/2+bth,15,
					a-railBarDepth-0.04,zzyzx+heightTread/2+0.05,15,
					a-widthTread/2,zzyzx+heightTread/2+0.05,15
			addy barDistance
		next u

		del nBarsRightRail+1

		MATERIAL matPost
		prism_ 4,railBarDepth+0.04,
				a,zzyzx,15,
				a-railBarDepth-0.04,zzyzx,15,
				a-railBarDepth-0.04,zzyzx+1.1,15,
				a,zzyzx+1.1,15

		prism_ 4,railBarDepth+0.04,
				widthTread/2,heightTread,15,
				widthTread/2-railBarDepth-0.04,heightTread,15,
				widthTread/2-railBarDepth-0.04,heightTread+1.1,15,
				widthTread/2,heightTread+1.1,15

		if bLeftSide then del 1
	endif

return

]]>
</Script_3D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_2D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[

! ---------- Hotspots ----------[
	unID = 1
	FlightUNID		= 2
	RailUNID		= 100
	StartSymbUNID	= 200
	ArrowUNID		= 300
	RiseRunUNID		= 400
	UpDownUNID		= 500
	NumUnID			= 600

hotspot2 0,0, unID: unID=unID+1

! ---------- Hotspots ----------]

dim drawPart[3] ! 1 - lower,  2 - upper,  3 - full
dim drawDashed[3] ! 1 - lower,  2 - upper,  3 - full
dim drawSteps[3] ! 1 - lower,  2 - upper,  3 - full
dim drawDetails[3] ! 1 - lower,  2 - upper,  3 - full


drawPart[1] = 0		! Lower
drawPart[2] = 0		! Upper
drawPart[3] = 0		! Full
drawDashed[1] = 0	! Lower
drawDashed[2] = 0	! Upper
drawDashed[3] = 0	! Full
drawSteps[1] = 0	! Lower
drawSteps[2] = 0	! Upper
drawSteps[3] = 0	! Full
drawDetails[1] = 0	! Lower
drawDetails[2] = 0	! Upper
drawDetails[3] = 0	! Full
drawNum = 0


abovestory = 0
belowstory = 0
if bStorySensitive then
	if GLOB_CH_STORY_DIST > EPS  then
		abovestory = 1
	else
		if GLOB_CH_STORY_DIST < -EPS  then
			belowstory = 1
		endif
	endif
endif

bCarriageLineExist		= bShowCarriage and bEnableCarriageLine and (GLOB_SCALE <= iShowCarriageUpTo | iShowCarriageUpTo = 1)

! ---------- Settings of 2D Symbol Type ----------
_iSymbolType = 1
_bShowRailIn2D = 1
if gs_detlevel_2D_m = DET2D_SCALESENSITIVE then
	if GLOB_SCALE <= _iScaleMD then									!! Detailed Scale
		_iSymbolType = iEnabledSymbolTypes[iSymbolGroup][3]
	else
		if GLOB_SCALE > _iScaleMD & GLOB_SCALE <= _iScaleSM then	!! Middle Scale
			_iSymbolType = iEnabledSymbolTypes[iSymbolGroup][2]
		else														!! Simple Scale
			_iSymbolType = iEnabledSymbolTypes[iSymbolGroup][1]
			_bShowRailIn2D = 0
		endif
	endif
else
	_iSymbolType = gs_SymbolType_m
endif

IF _iSymbolType = 1 THEN		! Type 1
	drawPart[3]	= 1		! Full
	drawDashed[3] = 1	! Full
ENDIF

IF _iSymbolType = 2 THEN		! Type 2
	drawPart[3]	= 1		! Full
ENDIF

IF _iSymbolType = 3 THEN		! Type 3
	drawPart[1]	= 1		! Lower
ENDIF

IF _iSymbolType = 4 THEN		! Type 4
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
	drawDashed[2] = 1	! Upper
ENDIF

IF _iSymbolType = 5 THEN		! Type 5
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
ENDIF

IF _iSymbolType = 6 THEN		! Type 6
	drawPart[3]	= 1		! Full
	drawDashed[3] = 1	! Full
	drawSteps[3] = 1	! Full
	drawNum = bShowNumbering
ENDIF

IF _iSymbolType = 7 THEN		! Type 7
	drawPart[3]	= 1		! Full
	drawSteps[3] = 1	! Full
	drawNum = bShowNumbering
ENDIF

IF _iSymbolType = 8 THEN		! Type 8
	drawPart[1]	= 1		! Lower
	drawSteps[1] = 1	! Lower
ENDIF

IF _iSymbolType = 9 THEN		! Type 9
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
	drawDashed[2] = 1	! Upper
	drawSteps[1] = 1	! Lower
ENDIF

IF _iSymbolType = 10 THEN		! Type 10
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
	drawSteps[1] = 1	! Lower
ENDIF

IF _iSymbolType = 11 THEN		! Type 11
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
	drawDashed[2] = 1	! Upper
	drawSteps[1] = 1	! Lower
	drawSteps[2] = 1	! Upper
	drawNum = bShowNumbering
ENDIF

IF _iSymbolType = 12 THEN		! Type 12
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
	drawSteps[1] = 1	! Lower
	drawSteps[2] = 1	! Upper
	drawNum = bShowNumbering
ENDIF

IF _iSymbolType = 13 THEN		! Type 13
	drawPart[3]	= 1		! Full
	drawDashed[3] = 1	! Full
	drawSteps[3] = 1	! Full
	drawDetails[3] = 1	! Full

	drawNum = bShowNumbering
ENDIF

IF _iSymbolType = 14 THEN		! Type 14
	drawPart[3]	= 1		! Full
	drawSteps[3] = 1	! Full
	drawDetails[3] = 1	! Full

	drawNum = bShowNumbering
ENDIF

IF _iSymbolType = 15 THEN		! Type 15
	drawPart[1]	= 1		! Lower
	drawSteps[1] = 1	! Lower
	drawDetails[1] = 1	! Lower
	drawSteps[2] = 1	! Upper
!	drawDetails[2] = 1	! Upper ! COMP
ENDIF

IF _iSymbolType = 16 THEN		! Type 16
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
	drawDashed[2] = 1	! Upper
	drawSteps[1] = 1	! Lower
	drawDetails[1] = 1	! Lower
ENDIF

IF _iSymbolType = 17 THEN		! Type 17
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
	drawSteps[1] = 1	! Lower
	drawDetails[1] = 1	! Lower
ENDIF

IF _iSymbolType = 18 THEN		! Type 18
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
	drawDashed[2] = 1	! Upper
	drawSteps[1] = 1	! Lower
	drawSteps[2] = 1	! Upper
	drawDetails[1] = 1	! Lower
	drawDetails[2] = 1	! Upper
	drawNum = bShowNumbering
ENDIF

IF _iSymbolType = 19 THEN		! Type 19
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
	drawDashed[2] = 1	! Upper
	drawSteps[1] = 1	! Lower
	drawSteps[2] = 1	! Upper
	drawDetails[1] = 1	! Lower
	drawNum = bShowNumbering
ENDIF

IF _iSymbolType = 20 THEN		! Type 20
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
	drawSteps[1] = 1	! Lower
	drawSteps[2] = 1	! Upper
	drawDetails[1] = 1	! Lower
	drawDetails[2] = 1	! Upper
	drawNum = bShowNumbering
ENDIF

! ---------- Stories below the home story ---------- [

bBackgroundFill = 1
if belowstory then
	drawPart[3]		= 1
	drawDashed[3]	= 1

	drawSteps[1] = 0
	drawSteps[2] = 0
	drawSteps[3] = 0

	drawDetails[1] = 0
	drawDetails[2] = 0
	drawDetails[3] = 0

	drawNum = 0
endif

! ---------- Stories below the home story ---------- ]

! ---------- Stories above the home story ---------- [
if abovestory then
	drawPart[1] = 0
	drawPart[2] = 0
	drawPart[3] = 0

	if gs_TreadStUp then
		drawSteps[1] = 1
		drawSteps[2] = 1
		drawSteps[3] = 1

		if drawDetails[1] | drawDetails[3] then
			drawDetails[1] = 1
			drawDetails[2] = 1
			drawDetails[3] = 1
		endif

	else
		drawSteps[1] = 0
		drawSteps[2] = 0
		drawSteps[3] = 0

		drawDetails[1] = 0
		drawDetails[2] = 0
		drawDetails[3] = 0
	endif

	if gs_BreaklineStUp = 0 then
		drawPart[3] = 1
	else
		if gs_LowerPartStUp then
			drawPart[1] = 1
		endif
		if gs_UpperPartStUp then
			drawPart[2] = 1
		endif
	endif

	if gs_numaStUp & gs_TreadStUp & ((drawPart[1] & drawPart[2]) | drawPart[3]) then
		drawNum = 1
	else
		drawNum = 0
	endif
endif

if bShowCarriage then
	if typeStringer_m = 7 then					! Channel Inside Open - Stringer
		widthTotalTread	= b - thickStringer * 2
	else
		widthTotalTread	= widthFreeFlight
	endif
else
	widthTotalTread		=  flightWidth
endif
bet	= atn((2*treadDepth)/widthTotalTread)

ROT2 -90
ADD2 -b + (b - widthTotalTread) / 2, 0

NumStline = INT (gs_BreakHeight/treadHeight)
NumStline = max(1,NumStline)

DRAWINDEX 10
PEN gs_cont_pen
FILL gs_fill_type

if belowStory then bBackgroundFill	= 0
! ==========================================================================
! CONTOUR LINES
! ==========================================================================


if not(drawPart[3]) then
	drawBreakLine = 1
else
	drawBreakLine = 0
endif

IF not(drawBreakLine) THEN
	if aboveStory then
		PEN gs_LinePenStUp
		LINE_TYPE gs_LineTypeStUp
	else
		if drawDashed[3] then
			PEN gs_DashLinePen
			LINE_TYPE dash_line
		else
			PEN gs_cont_pen
			LINE_TYPE solid_line
		endif
	endif

	xNosing = nosing * (drawDetails[3])

	POLY2_b 4,1+2*bBackgroundFill+4+64, gs_fill_pen, gs_back_pen,
		0, -xNosing, 1,
		widthTotalTread, -xNosing, 1,
		widthTotalTread, (nRisers)*treadDepth, 1,
		0, (nRisers)*treadDepth, 1

	HOTLINE2 0, -xNosing, widthTotalTread, -xNosing
	HOTLINE2 widthTotalTread, -xNosing,widthTotalTread, (nRisers)*treadDepth
	HOTLINE2 widthTotalTread, (nRisers)*treadDepth,0, (nRisers)*treadDepth
	HOTLINE2 0, (nRisers)*treadDepth,0, -xNosing

ELSE

! with Break Line
! ---------------------------------------------------------------------------------------------
	if breakline_style_m = 2 then		! Zig Zag
		angle_breakline=ATN(2*treadDepth/widthTotalTread)
		ZigZag1Y=(2/5*widthTotalTread)*tan(angle_breakline)
		ZigZag2Y=(7/20*widthTotalTread)*tan(angle_breakline)
	else
		if breakline_style_m = 3 then		! Zig Zag CHI
			angle_breakline=ATN(2*treadDepth/widthTotalTread)
			ZigZag1Y=(2/5*widthTotalTread)*tan(angle_breakline)
			ZigZag2Y=(2/5*widthTotalTread)*tan(angle_breakline)
		endif
	endif

	IF drawPart[1] THEN
		if aboveStory then
			PEN gs_LinePenStUp
			LINE_TYPE gs_LineTypeStUp
		else
			if drawDashed[1] then
				PEN gs_DashLinePen
				LINE_TYPE dash_line
			else
				PEN gs_cont_pen
				LINE_TYPE solid_line
			endif
		endif

		xNosing = nosing * drawDetails[1]

		if breakline_style_m = 2 then
			! ---------- Zig Zag ----------
				POLY2_b 8, 1+2+4+64, gs_fill_pen, gs_back_pen,
				0, -xNosing, 1,
				widthTotalTread, -xNosing, 1,
				widthTotalTread, (NumStline+1)*treadDepth-xNosing, 1,
				6/10*widthTotalTread,(NumStline+1)*treadDepth-xNosing-ZigZag1Y, 1,
				6/10*widthTotalTread,(NumStline-1)*treadDepth-xNosing+ZigZag1Y, 1,
				4/10*widthTotalTread,(NumStline+1)*treadDepth-xNosing-ZigZag1Y, 1,
				4/10*widthTotalTread,(NumStline-1)*treadDepth-xNosing+ZigZag1Y, 1,
						0, (NumStline-1)*treadDepth-xNosing, 1
		else
			if breakline_style_m = 3 then
				! ---------- Zig Zag CHI ----------
				POLY2_b 9, 1+2+64, gs_fill_pen, gs_back_pen,
							0, -xNosing, 1,
							widthTotalTread, -xNosing, 1,
							widthTotalTread, (NumStline+1)*treadDepth-xNosing, 1,
							6/10*widthTotalTread,(NumStline+1)*treadDepth-xNosing-ZigZag1Y, 1,
							6/10*widthTotalTread,(NumStline-1)*treadDepth-xNosing+ZigZag1Y, 1,
							4/10*widthTotalTread,(NumStline+1)*treadDepth-xNosing-ZigZag1Y+breakLineWidth, 1,
							4/10*widthTotalTread,(NumStline-1)*treadDepth-xNosing+ZigZag1Y, 1,
							0, (NumStline-1)*treadDepth-xNosing, 1,
							0, -xNosing, -1
			else
				! ---------- Straight ----------
					POLY2_b 4, 1+2+4+64, gs_fill_pen, gs_back_pen,
							0, -xNosing, 1,
							widthTotalTread, -xNosing, 1,
							widthTotalTread, (NumStline+1)*treadDepth-xNosing, 1,
							0, (NumStline-1)*treadDepth-xNosing, 1
			endif
		endif


			HOTSPOT2 widthTotalTread/2,(NumStline)*treadDepth-xNosing, FlightUNID: FlightUNID=FlightUNID+1
			HOTSPOT2 0,			(NumStline-1)*treadDepth-xNosing, FlightUNID: FlightUNID=FlightUNID+1
			HOTSPOT2 widthTotalTread,	(NumStline+1)*treadDepth-xNosing, FlightUNID: FlightUNID=FlightUNID+1

			HOTLINE2 0, -xNosing, widthTotalTread, -xNosing
			HOTLINE2 widthTotalTread, -xNosing, widthTotalTread, (NumStline+1)*treadDepth-xNosing
			HOTLINE2 widthTotalTread, (NumStline+1)*treadDepth-xNosing,0, (NumStline-1)*treadDepth-xNosing
			HOTLINE2 0, (NumStline-1)*treadDepth-xNosing,0, -xNosing
	ENDIF

	IF drawPart[2] THEN
		if aboveStory then
			PEN gs_LinePenStUp
			LINE_TYPE gs_LineTypeStUp
		else
			if drawDashed[2] then
				PEN gs_DashLinePen
				LINE_TYPE dash_line
			else
				PEN gs_cont_pen
				LINE_TYPE solid_line
			endif
		endif

		xNosing = nosing * drawDetails[2]

		if breakline_style_m = 2  then
			! ---------- Zig Zag ----------
			POLY2_b 8, 1+2*gs_FillAbove+4+64, gs_fill_pen, gs_back_pen,
					0, (NumStline-1)*treadDepth-xNosing+breakLineWidth , 1,
					7/20*widthTotalTread, (NumStline-1)*treadDepth -xNosing + breakLineWidth +ZigZag2Y, 1,
					7/20*widthTotalTread, (NumStline-1)*treadDepth -xNosing + breakLineWidth +ZigZag2Y+2*(treadDepth-ZigZag1Y), 1,
					11/20*widthTotalTread, (NumStline-1)*treadDepth -xNosing+ breakLineWidth +ZigZag2Y, 1,
					11/20*widthTotalTread, (NumStline-1)*treadDepth -xNosing+ breakLineWidth +ZigZag2Y+2*(treadDepth-ZigZag1Y), 1,
					widthTotalTread, (NumStline+1)*treadDepth-xNosing+breakLineWidth , 1,
					widthTotalTread, (nRisers)*treadDepth, 1,
					0, (nRisers)*treadDepth, 1
		else
			if breakline_style_m = 3 then
				POLY2_b 8, 1+2*gs_FillAbove+4+64, gs_fill_pen, gs_back_pen,
					0, (NumStline-1)*treadDepth-xNosing+breakLineWidth , 1,
					4/10*widthTotalTread, (NumStline-1)*treadDepth -xNosing + breakLineWidth +ZigZag2Y, 1,
					4/10*widthTotalTread, (NumStline+1)*treadDepth-xNosing-ZigZag1Y+breakLineWidth, 1,
					6/10*widthTotalTread, (NumStline-1)*treadDepth-xNosing+ZigZag1Y, 1,
					6/10*widthTotalTread, (NumStline-1)*treadDepth -xNosing+ breakLineWidth +ZigZag2Y+2*(treadDepth-ZigZag1Y), 1,
					widthTotalTread, (NumStline+1)*treadDepth-xNosing+breakLineWidth , 1,
					widthTotalTread, (nRisers)*treadDepth, 1,
					0, (nRisers)*treadDepth, 1
			else
				POLY2_b 4, 1+2*gs_FillAbove+4+64, gs_fill_pen, gs_back_pen,
					0, (NumStline-1)*treadDepth-xNosing+breakLineWidth, 1,
					widthTotalTread, (NumStline+1)*treadDepth-xNosing+breakLineWidth, 1,
					widthTotalTread, (nRisers)*treadDepth, 1,
					0, (nRisers)*treadDepth, 1
			endif
		endif

		HOTLINE2 0, (NumStline-1)*treadDepth-xNosing+breakLineWidth,widthTotalTread, (NumStline+1)*treadDepth-xNosing+breakLineWidth
		HOTLINE2 widthTotalTread, (NumStline+1)*treadDepth-xNosing+breakLineWidth,widthTotalTread, (nRisers)*treadDepth
		HOTLINE2 widthTotalTread, (nRisers)*treadDepth,0, (nRisers)*treadDepth
		HOTLINE2 0, (nRisers)*treadDepth,0, (NumStline-1)*treadDepth-xNosing+breakLineWidth

		! BREAK LINE
			HOTSPOT2 widthTotalTread/2,		(NumStline)*treadDepth-xNosing,					FlightUNID, breakLineWidth, 1+128	: FlightUNID=FlightUNID+1
			HOTSPOT2 widthTotalTread/2,		(NumStline)*treadDepth-xNosing-1,				FlightUNID, breakLineWidth, 3		: FlightUNID=FlightUNID+1
			HOTSPOT2 widthTotalTread/2,		(NumStline)*treadDepth-xNosing+breakLineWidth,	FlightUNID, breakLineWidth, 2		: FlightUNID=FlightUNID+1

			HOTSPOT2 0, (NumStline-1)*treadDepth-xNosing+breakLineWidth,				FlightUNID: FlightUNID=FlightUNID+1
			HOTSPOT2 widthTotalTread, (NumStline+1)*treadDepth-xNosing+breakLineWidth,	FlightUNID: FlightUNID=FlightUNID+1
		endif
	endif

! ==============================================================================
! TREADS
! ==============================================================================
DRAWINDEX 20

IF not(drawBreakline) THEN
	if drawPart[3] & drawSteps[3] then
		if aboveStory then
			PEN gs_LinePenStUp
			LINE_TYPE gs_LineTypeStUp
		else
			if drawDashed[3] then
				PEN gs_DashLinePen
				LINE_TYPE dash_line
			else
				PEN gs_cont_pen
				LINE_TYPE solid_line
			endif
		endif

		FOR numTread=1 to nRisers
			LINE2 0,-xNosing, widthTotalTread, -xNosing
			HOTLINE2 0,-xNosing, widthTotalTread, -xNosing
			ADD2 0,treadDepth
		NEXT numTread
		DEL numTread-1

		IF drawDetails[3] THEN
			PEN gs_DashLinePen
			LINE_TYPE dash_line

			FOR numTread=1 to nRisers
				LINE2 0, 0, widthTotalTread, 0
				HOTLINE2 0, 0, widthTotalTread, 0
				ADD2 0,treadDepth
			NEXT numTread
			DEL numTread-1
		endif
	endif
else
	if drawPart[1] & drawSteps[1] then

		xNosing = nosing * drawDetails[1]


		FOR numTread=1 to NumStline+1
			if aboveStory then
				PEN gs_LinePenStUp
				LINE_TYPE gs_LineTypeStUp
			else
				if drawDashed[1] then
					PEN gs_DashLinePen
					LINE_TYPE dash_line
				else
					PEN gs_cont_pen
					LINE_TYPE solid_line
				endif
			endif

			StartSolid=0
			if breakline_style_m = 1 then	! Straight
				IF numTread=NumStline+1 THEN StartSolid=StartSolid+widthTotalTread/2
			ELSE
				IF numTread=NumStline+1 THEN StartSolid=StartSolid+widthTotalTread*6/10
			ENDIF

			LINE2 StartSolid,-xNosing,widthTotalTread,-xNosing
			HOTLINE2 StartSolid,-xNosing,widthTotalTread,-xNosing

			if drawDetails[1] THEN
				PEN gs_DashLinePen
				LINE_TYPE dash_line

				StartDashed=0
				if breakline_style_m = 1 then	! Straight
					IF ABS(numTread-NumStline-1)<0.001 THEN StartDashed=widthTotalTread/2+xNosing/tan(bet)
				ELSE
					IF distZigZag >= 4/10*widthTotalTread THEN
						distZigZag = 4/10*widthTotalTread
					ELSE
						distZigZag=(widthTotalTread*(treadDepth-xNosing))/(2*treadDepth)
					ENDIF
					IF numTread=NumStline+1 THEN StartDashed=max(0,leftRailOffset+leftRailFrameThk,widthTotalTread-distZigZag)
				ENDIF

				IF ABS(numTread-(NumStline))<0.01 THEN StartDashed=xNosing/tan(bet)

				LINE2 StartDashed,0,widthTotalTread,0
				HOTLINE2 StartDashed,0,widthTotalTread,0
			ENDIF
			ADD2 0,treadDepth
		NEXT numTread
		DEL numTread-1
	endif

	IF drawPart[2] & drawSteps[2] THEN

		xNosing = nosing * drawDetails[2]

		ADD2 0,(NumStline)*treadDepth
		FOR numTread=1 to nRisers-NumStline
			if aboveStory then
				PEN gs_LinePenStUp
				LINE_TYPE gs_LineTypeStUp
			else
				if drawDashed[2] then
					PEN gs_DashLinePen
					LINE_TYPE dash_line
				else
					PEN gs_cont_pen
					LINE_TYPE solid_line
				endif
			endif

			EndSolid=widthTotalTread
			IF breakline_style_m = 1 THEN
				IF numTread=1 THEN EndSolid=(treadDepth-breakLineWidth)/tan(bet)
				IF numTread=2 THEN EndSolid=(2*treadDepth-breakLineWidth)/tan(bet)
			ELSE
				if breakline_style_m = 3 then
					ZigZagCorrection = 4/10
				else
					ZigZagCorrection = 7/20
				endif
				IF numTread=1 THEN EndSolid=Min(ZigZagCorrection *widthTotalTread,(treadDepth-breakLineWidth)/tan(bet))
				IF numTread=2 THEN
					IF ZigZag2Y+2*(treadDepth-ZigZag1Y)<2*treadDepth-breakLineWidth THEN EndSolid=(2*treadDepth-breakLineWidth)/tan(bet)
					IF ZigZag2Y+2*(treadDepth-ZigZag1Y)>=2*treadDepth-breakLineWidth THEN EndSolid=ZigZagCorrection *widthTotalTread
				ENDIF
			ENDIF

			LINE2 0,-xNosing,EndSolid,-xNosing
			HOTLINE2 0,-xNosing,EndSolid,-xNosing

			IF drawDetails[2] THEN
				PEN gs_DashLinePen
				LINE_TYPE dash_line

				EndDashed=widthTotalTread
				if breakline_style_m = 1 then	! Straight
					IF numTread=1 THEN EndDashed=Min(widthTotalTread,(treadDepth-breakLineWidth+xNosing)/tan(bet))
					IF numTread=2 THEN EndDashed=Min(widthTotalTread,(2*treadDepth-breakLineWidth+xNosing)/tan(bet))
				ELSE
					IF distZigZag <= ZigZagCorrection *widthTotalTread THEN
						distZigZag = ZigZagCorrection *widthTotalTread
					ELSE
						distZigZag=(widthTotalTread*(treadDepth/2+xNosing))/(2*treadDepth)
					ENDIF

						IF numTread=1 THEN EndDashed=Min(ZigZagCorrection*widthTotalTread,(treadDepth-breakLineWidth+xNosing)/tan(bet))
					IF numTread=2 THEN
							IF ZigZag2Y+2*(treadDepth-ZigZag1Y)<2*treadDepth+xNosing-breakLineWidth THEN EndDashed=Min(widthTotalTread,(2*treadDepth+xNosing-breakLineWidth)/tan(bet))
							IF ZigZag2Y+2*(treadDepth-ZigZag1Y)>=2*treadDepth+xNosing-breakLineWidth THEN EndDashed=Min(widthTotalTread,ZigZagCorrection*widthTotalTread)
					ENDIF
				ENDIF

				LINE2 0,0,EndDashed,0
				HOTLINE2 0,0,EndDashed,0
			ENDIF

			ADD2 0,treadDepth
		NEXT numTread
		DEL numTread-1
		DEL 1
		endif
	endif

! ==============================================================================
! WALKING LINE / ARROWHEAD / START END SYMBOL
! ==========================================================================
reverseWalkline = 0
if walkingDirUPDN_m = 3 | walkingDirUPDN_m = 4 | (walkingDirUPDN_m = 6 & abovestory) then
	reverseWalkline = 1
endif

if bShowWalkLine & not(belowStory) then

	PEN gs_wLinePen
	FILL gs_ArrowFill

	for i = 1 to 3
		DRAWINDEX 40
		drawWalkLine = 1
		if not(bShowWalkLineAboveBreakline) & i = 2 then drawWalkLine = 0

		if drawPart[i] & drawWalkLine then
			xNosing = nosing * drawDetails[i]

			startLine = -xNosing
			endLine = (nRisers)*treadDepth
			penFillArrow = gs_ArrowFillPen
			if i = 1 then endLine = (NumStline)*treadDepth-xNosing
			if i = 2 then
				startLine = startLine + (NumStline)*treadDepth+breakLineWidth
				penFillArrow = gs_ArrowFillPenAbove
				if walkingDirUPDN_m = 5 then reverseWalkline = 1
			endif

			if aboveStory then
				LINE_TYPE gs_wLineTypeStUp
			else
				if (drawDashed[i]) then
					LINE_TYPE gs_wLineTypeAbove
				else
					LINE_TYPE gs_wLineType1
				endif
			endif

			IF i = 3 & walkingDirUPDN_m = 5 THEN
				! Up Down Both - UP
				endLine = startLine + (INT(nRisers/3))*treadDepth
				ADD2 widthTotalTread/2, endLine
				GOSUB "Arrowhead Symbol"
				DEL 1
				endLine = endLine-lengthArrowHead

				line2 widthTotalTread/2, startLine, widthTotalTread/2, endLine

				ADD2 widthTotalTread/2, startLine
				GOSUB "Start End Symbol"
				DEL 1

				! Up Down Both - Down
				endLine = (nRisers)*treadDepth
				startLine = startLine + endLine - (MAX(1, INT(nRisers/3)))*treadDepth
				ADD2 widthTotalTread/2, startLine
				MUL2 1, -1
				GOSUB "Arrowhead Symbol"
				DEL 2
				startLine = startLine+lengthArrowHead

				ADD2 widthTotalTread/2, endLine
				GOSUB "Start End Symbol"
				DEL 1
			else
				! Arrow Head below Break Line
				if not(reverseWalkline)	then
					ADD2 widthTotalTread/2, endLine
					GOSUB "Arrowhead Symbol"
					DEL 1
					endLine = endLine-lengthArrowHead

					if i <> 2 then
						ADD2 widthTotalTread/2, startLine
						GOSUB "Start End Symbol"
						DEL 1
					endif
				endif

				! Arrow Head on Start
				if reverseWalkline then
					ADD2 widthTotalTread/2, startLine
					MUL2 1, -1
					GOSUB "Arrowhead Symbol"
					DEL 2
					startLine = startLine+lengthArrowHead

					if i <> 1 then
						ADD2 widthTotalTread/2, endLine
						GOSUB "Start End Symbol"
						DEL 1
					endif
				endif
			endif

			! Walking Line
			if drawWalkLine then line2 widthTotalTread/2, startLine, widthTotalTread/2, endLine
		endif
	next i
ENDIF

! ==============================================================================
! Text / Up - Down Text / Numbering
! ==============================================================================

! --- Oriented View ------------------------------------------------------------
angleViewRot = 0
if bShowRiseAndRunText | walkingDirUPDN_m <> 1 | drawNum | gs_description <> "" then
	rrr = REQUEST ("View_Rotangle", "", angleViewRot)
endif
totalRotate = (SYMB_ROTANGLE + angleViewRot) MOD 360


! --- Define Font Style --------------------------------------------------------

define style "UPDN" fontType, UPDNfontsize, 5, 0		  	! UP/DN

define style "stepnum" fontType, gs_NumTextSize, 1, 0		! Numbering

define style "description" fontType, gs_desc_text_size, 4, 0	! Description

! --- Rise & Run Text -------------------------------------------------------

if bShowRiseAndRunText & bShowWalkLine & not(belowStory) then
	call "Stair_RiseRun_Text" PARAMETERS ALL	totalRotate	= totalRotate,
												iRotateType = 2,
												iRiseRunTextPosition = 1,
												RiseRunUNID	= RiseRunUNID
endif


! --- Up & Down Text ---------------------------------------------------------
iReadable = 0
if walkingDirUPDN_m <> 1 & bShowWalkLine & not(belowStory) then		! None
	DRAWINDEX 50
	PEN UPDNfontpen
	xNosing = nosing * (drawDetails[1]|drawDetails[3])

	if (walkingDirUPDN_m = 2 | walkingDirUPDN_m = 5 | (walkingDirUPDN_m = 6 & not(abovestory) & not(belowstory) )) & (drawPart[1]|drawPart[3]) then
		nTransUPDN = 0
		set style "UPDN"
		add2 widthTotalTread/2+DirUPDN_X,DirUPDN_Y-xNosing
		nTransUPDN = nTransUPDN + 1
		! Text Rotation - Readable / Parallel with Walking Line / Align with Symbol
		! ----------------------------------------------------------------------
		if typeTextRotation_UpDn_m = 2 then									! Readable
			if ((totalRotate > (gs_readable_angle - 90 + eps) & totalRotate < (gs_readable_angle + 180 - 90 + eps)) & SYMB_MIRRORED) | \
				((totalRotate < (gs_readable_angle - 90 + eps) | totalRotate > (gs_readable_angle + 180 - 90 + eps)) & not(SYMB_MIRRORED)) then
				rot2 180
				nTransUPDN = nTransUPDN + 1
			endif
		else
			if typeTextRotation_UpDn_m = 1 then								! Parallel with Walking Line
				iReadable = (totalRotate > (gs_readable_angle + eps) & totalRotate < (gs_readable_angle + 180 + eps))- not(totalRotate > (gs_readable_angle + eps) & totalRotate < (gs_readable_angle + 180 + eps))
				rot2 -90 * iReadable
				nTransUPDN = nTransUPDN + 1
			endif
		endif
		! ----------------------------------------------------------------------
		rot2 AngUPDN
		nTransUPDN = nTransUPDN + 1

		string1=`ВВЕРХ`
		text2 0,0, string1

		del nTransUPDN

		width1	= STW (string1)/1000*GLOB_SCALE
		rb		= width1/2
	endif

	if walkingDirUPDN_m = 3 & (drawPart[1]|drawPart[3]) then ! Down at Bottom
		nTransUPDN = 0
		set style "UPDN"
		add2 widthTotalTread/2+DirUPDN_X,DirUPDN_Y-xNosing
		nTransUPDN = nTransUPDN + 1

		! Text Rotation - Readable / Parallel with Walking Line / Align with Symbol
		! ----------------------------------------------------------------------
		if typeTextRotation_UpDn_m = 2 then									! Readable
			if ((totalRotate > (gs_readable_angle - 90 + eps) & totalRotate < (gs_readable_angle + 180 - 90 + eps)) & SYMB_MIRRORED) | \
				((totalRotate < (gs_readable_angle - 90 + eps) | totalRotate > (gs_readable_angle + 180 - 90 + eps)) & not(SYMB_MIRRORED)) then
				rot2 180
				nTransUPDN = nTransUPDN + 1
			endif
		else
			if typeTextRotation_UpDn_m = 1 then								! Parallel with Walking Line
				iReadable = (totalRotate > (gs_readable_angle + eps) & totalRotate < (gs_readable_angle + 180 + eps))- not(totalRotate > (gs_readable_angle + eps) & totalRotate < (gs_readable_angle + 180 + eps))
				rot2 -90 * iReadable
				nTransUPDN = nTransUPDN + 1
			endif
		endif
		! ----------------------------------------------------------------------
		rot2 AngUPDN
		nTransUPDN = nTransUPDN + 1

		text2 0,0, gs_CustomText_Down

		del nTransUPDN

		string2	= gs_CustomText_Down
		width2	= STW (string2)/1000*GLOB_SCALE
		rb		= width2/2
	endif

	if (walkingDirUPDN_m = 2 | walkingDirUPDN_m = 5 | walkingDirUPDN_m = 3 | (walkingDirUPDN_m = 6 & not(abovestory) & not(belowstory))) & (drawPart[1]|drawPart[3]) then
		nTransHotspot = 0
		add2 widthTotalTread/2+DirUPDN_X,DirUPDN_Y-xNosing
		nTransHotspot = nTransHotspot  + 1
		if typeTextRotation_UpDn_m = 1 then
			rot2 -90 * iReadable
			nTransHotspot = nTransHotspot  + 1
		endif
		HOTSPOT2 0,					0,				UpDownUNID,	AngUPDN,	6		: UpDownUNID=UpDownUNID+1
		HOTSPOT2 rb,				0,				UpDownUNID,	AngUPDN,	4+128	: UpDownUNID=UpDownUNID+1
		HOTSPOT2 rb*cos(AngUPDN),	rb*sin(AngUPDN),UpDownUNID,	AngUPDN,	5		: UpDownUNID=UpDownUNID+1
		DEL nTransHotspot
	endif

	if (walkingDirUPDN_m = 4 | walkingDirUPDN_m = 5 | (walkingDirUPDN_m = 6 & abovestory)) & (drawPart[2]|drawPart[3]) then
		nTransUPDN = 0
		set style "UPDN"
		add2 widthTotalTread/2+DirUPDN_X_top, DirUPDN_Y_top + A
		nTransUPDN = nTransUPDN + 1

		! Text Rotation - Readable / Parallel with Walking Line / Align with Symbol
		! ----------------------------------------------------------------------
		if typeTextRotation_UpDn_m = 2 then									! Readable
			if ((totalRotate > (gs_readable_angle - 90 + eps) & totalRotate < (gs_readable_angle + 180 - 90 + eps)) & SYMB_MIRRORED) | \
				((totalRotate < (gs_readable_angle - 90 + eps) | totalRotate > (gs_readable_angle + 180 - 90 + eps)) & not(SYMB_MIRRORED)) then
				rot2 180
				nTransUPDN = nTransUPDN + 1
			endif
		else
			if typeTextRotation_UpDn_m = 1 then								! Parallel with Walking Line
				iReadable = (totalRotate > (gs_readable_angle + eps) & totalRotate < (gs_readable_angle + 180 + eps))- not(totalRotate > (gs_readable_angle + eps) & totalRotate < (gs_readable_angle + 180 + eps))
				rot2 -90 * iReadable
				nTransUPDN = nTransUPDN + 1
			endif
		endif
		! ----------------------------------------------------------------------
		rot2 AngUPDN_top
		nTransUPDN = nTransUPDN + 1

		text2 0,0, gs_CustomText_Down

		del nTransUPDN

		string2	= gs_CustomText_Down
		width2	= STW (string2)/1000*GLOB_SCALE
		rb		= width2/2
	endif

	if (walkingDirUPDN_m = 4 | walkingDirUPDN_m = 5 | (walkingDirUPDN_m = 6 & abovestory)) & (drawPart[2]|drawPart[3]) then
		nTransHotspot = 0
		add2 widthTotalTread/2+DirUPDN_X_top, DirUPDN_Y_top+A
		nTransHotspot = nTransHotspot  + 1
		if typeTextRotation_UpDn_m = 1 then
			rot2 -90 * iReadable
			nTransHotspot = nTransHotspot  + 1
		endif
		HOTSPOT2 0,						0,					UpDownUNID,	AngUPDN_top,	6		: UpDownUNID=UpDownUNID+1
		HOTSPOT2 rb,					0,					UpDownUNID,	AngUPDN_top,	4+128	: UpDownUNID=UpDownUNID+1
		HOTSPOT2 rb*cos(AngUPDN_top),	rb*sin(AngUPDN_top),UpDownUNID,	AngUPDN_top,	5		: UpDownUNID=UpDownUNID+1
		DEL nTransHotspot
	endif
endif

! --- Numbering ----------------------------------------------------------------

if drawNum & not(belowStory) then
	DRAWINDEX 50
	set style "stepnum"
	nnn = REQUEST ("Height_of_style", "stepnum", strHeight)
	strHeight = strHeight / 1000 * GLOB_SCALE

	xNosing = nosing * (drawDetails[1]|drawDetails[3])
	add2 DirNumText_X, DirNumText_Y - treadDepth/2 - xNosing

	for iNumStep = 1 to nRisers
		add2 0,treadDepth
		pen gs_NumTextPen
		nTextTransformations = 0
		! Text Rotation - Readable / Align with Symbol
		! ----------------------------------------------------------------------
		if typeTextRotation_Num_m = 2 then								! Readable
			if ((totalRotate > (gs_readable_angle - 90 + eps) & totalRotate < (gs_readable_angle + 180 - 90 + eps)) & SYMB_MIRRORED) | \
				((totalRotate < (gs_readable_angle - 90 + eps) | totalRotate > (gs_readable_angle + 180 - 90 + eps)) & not(SYMB_MIRRORED)) then
				rot2 180
				strWidth = stw(str("%.0", iNumStep + nStartNumbering-1)) / 1000 * GLOB_SCALE
				add2 -strWidth, strHeight
				nTextTransformations = 2
			endif
		endif
		! ----------------------------------------------------------------------

		text2 0,0, iNumStep + nStartNumbering - 1
		if nTextTransformations > 0 then del nTextTransformations
		pen gs_cont_pen
	next iNumStep
	del nRisers +1

	hotspot2 0,				DirNumText_Y- xNosing,	NumUnID, DirNumText_X, 1+128	:NumUnID=NumUnID+1
	hotspot2 -1,			DirNumText_Y- xNosing,	NumUnID, DirNumText_X, 3		:NumUnID=NumUnID+1
	hotspot2 DirNumText_X,	DirNumText_Y- xNosing,	NumUnID, DirNumText_X,	2		:NumUnID=NumUnID+1

	hotspot2 DirNumText_X, 0- xNosing,				NumUnID, DirNumText_Y, 1+128	:NumUnID=NumUnID+1
	hotspot2 DirNumText_X, -1- xNosing,				NumUnID, DirNumText_Y, 3		:NumUnID=NumUnID+1
	hotspot2 DirNumText_X, DirNumText_Y- xNosing,	NumUnID, DirNumText_Y, 2		:NumUnID=NumUnID+1
endif

! --- Description ----------------------------------------------------------------

if STRLEN(gs_description) <> 0 & not(belowStory) then
	lengthWalkLine = A

	! --- positioning ---
	rot2	90
	nTransDes = 1

	dim gs_description_bpos[3][3]
	gs_description_bpos[1][1] = lengthWalkLine/2
	gs_description_bpos[1][2] = -widthTotalTread/2
	gs_description_bpos[1][3] = 0

	style "description"
	pen gs_desc_text_pen
	add2 (gs_description_bpos[1][1] + gs_description_pos[1][1]), (gs_description_bpos[1][2] + gs_description_pos[1][2])

	textangle = (gs_description_bpos[1][3] + gs_description_pos[1][3])

	reversedText = 0
	angleFull = (totalRotate + textangle) MOD 360

	if angleFull < 0 then
		angleFull = angleFull + 360
	endif
	if angleFull > (gs_readable_angle+eps) & angleFull < (gs_readable_angle + 180 +eps) then
		reversedText = 1
		textangle = textangle + 180
	endif
	rot2 textangle

	if reversedText then
		text2 -STW(gs_description) / 1000 * GLOB_SCALE, 0, gs_description
	else
		text2 0,0, gs_description
	endif

	del 2
	hotspot2 gs_description_bpos[1][1], gs_description_bpos[1][2] + gs_description_pos[1][2], 40000+1, gs_description_pos[1][1], 1 + 128
	posRel = gs_description_pos[1][1]
	if abs(posRel) < 0.00001 then
		posRel = 0.0001
	else
		posRel = 0
	endif
	hotspot2 gs_description_bpos[1][1] - posRel, gs_description_bpos[1][2] + gs_description_pos[1][2], 40000+2, gs_description_pos[1][1], 3 + 128
	hotspot2 gs_description_bpos[1][1] + gs_description_pos[1][1], gs_description_bpos[1][2] + gs_description_pos[1][2], 40000+3, gs_description_pos[1][1], 2

	hotspot2 gs_description_bpos[1][1] + gs_description_pos[1][1], gs_description_bpos[1][2], 40000+4, gs_description_pos[1][2], 1 + 128
	posRel = gs_description_pos[1][2]
	if abs(posRel) < 0.00001 then
		posRel = 0.0001
	else
		posRel = 0
	endif
	hotspot2 gs_description_bpos[1][1] + gs_description_pos[1][1], gs_description_bpos[1][2] - posRel, 40000+5, gs_description_pos[1][2], 3 + 128
	hotspot2 gs_description_bpos[1][1] + gs_description_pos[1][1], gs_description_bpos[1][2] + gs_description_pos[1][2], 40000+6, gs_description_pos[1][2], 2

	!angle edit
	HOTSPOT2 gs_description_bpos[1][1] + gs_description_pos[1][1],
				gs_description_bpos[1][2] + gs_description_pos[1][2],
				40000+7, gs_description_pos[1][3], 6 + 128

	HOTSPOT2 gs_description_bpos[1][1] + gs_description_pos[1][1] + GLOB_SCALE*0.5*COS(gs_description_bpos[1][3])*gs_desc_text_size/1000,
				gs_description_bpos[1][2] + gs_description_pos[1][2] + GLOB_SCALE*0.5*SIN(gs_description_bpos[1][3])*gs_desc_text_size/1000,
				40000+8, gs_description_pos[1][3], 4 + 128

	HOTSPOT2 gs_description_bpos[1][1] + gs_description_pos[1][1] + GLOB_SCALE*0.5*gs_desc_text_size*COS(gs_description_bpos[1][3] + gs_description_pos[1][3])/1000,
				gs_description_bpos[1][2] + gs_description_pos[1][2] + GLOB_SCALE*0.5*gs_desc_text_size*SIN(gs_description_bpos[1][3] + gs_description_pos[1][3])/1000,
				40000+9, gs_description_pos[1][3], 5
	del nTransDes

endif

!===============================================================================
! --- Carriage Line ---
!===============================================================================

if bCarriageLineExist and not(belowStory) then
	drawindex 10
	fill gs_fill_type

	bShowCarriagePart1	= 0
	bShowCarriagePart2	= 0

	beamNum				= 2
	beamThk				= widthStringer
	beamOffsetRight		= 0
	beamOffsetLeft		= 0
	carriageBaseDist	= flightWidth
	carrBreakLineWidth	= breakLineWidth

	if drawPart[3] then
		!!!!!******************************      1st RUN
		add2 -(b - widthTotalTread) / 2, (widthOverlapTread - cutDistLowerEnd)
			beamLength			= a - (widthOverlapTread - cutDistLowerEnd)
			bCarrAboveBreakLine	= 0
			bBreakCarriageLine	= 0
			gosub "carriage"
		del 1
	else
		if drawPart[1] then
			!!!!!******************************      1st RUN
			add2 -(b - widthTotalTread) / 2, (widthOverlapTread - cutDistLowerEnd)
				beamLength			= a - (widthOverlapTread - cutDistLowerEnd)
				bCarrAboveBreakLine	= 0
				bBreakCarriageLine	= 1
				bShowCarriagePart1	= 1
				bShowCarriagePart2	= 0
				brLineAngle			= bet
				xNosing				= nosing * drawDetails[1]
				carrBreakLineDist	= NumStline * treadDepth - xNosing + (flightWidth / 2 - beamOffsetRight - beamThk / 2) * tan(brLineAngle) - (widthOverlapTread - cutDistLowerEnd)
				gosub "carriage"
			del 1
		endif

		if drawPart[2] then
			!!!!!******************************      1st RUN
			add2 -(b - widthTotalTread) / 2, (widthOverlapTread - cutDistLowerEnd)
				beamLength			= a - (widthOverlapTread - cutDistLowerEnd)
				bCarrAboveBreakLine	= 1
				bBreakCarriageLine	= 1
				bShowCarriagePart1	= 0
				bShowCarriagePart2	= 1
				brLineAngle			= bet
				xNosing				= nosing * drawDetails[2]
				carrBreakLineDist	= NumStline * treadDepth - xNosing + (flightWidth / 2 - beamOffsetRight - beamThk / 2) * tan(brLineAngle) - (widthOverlapTread - cutDistLowerEnd)
				gosub "carriage"
			del 1
		endif
	endif
endif

!===============================================================================
! --- Railings ---
!===============================================================================
if _bShowRailIn2D & not(belowStory) then
	bShowRailPart1	= 0
	bShowRailPart2	= 0
	breakLineW		= breakLineWidth
	breakLineDist	= 0
	brLineAngle		= bet

	drawindex 30
	fill gs_fill_type


	! --- Left Rail ----------------------------------------------------------------
	if rail_m = 3 | rail_m = 1 then	! Left, Both
		if bSameRails then
			leftRailType_m = rightRailType_m
			leftWireType_m = rightWireType_m
		endif

		add2 -(b - widthTotalTread) / 2, 0

		if drawBreakline then
			if drawPart[1] & bShowRailOnFloorPlan then
				pen railPen
				if aboveStory then
					SET LINE_TYPE railLineType
				else
					if (drawDashed[1]) then
						SET LINE_TYPE dash_line
					else
						SET LINE_TYPE railLineType
					endif
				endif
				xNosing = nosing * drawDetails[1]

				if bSymbolic2D then
					bShowRailOn1stRun		= 1
					bBreakRailLine			= 1
					brLineAngle				= bet
					bShowRailPart1			= 1
					breakLineDist			= leftRailOvhgBottom - xNosing + (NumStline - 1) * treadDepth + (leftRailOffset+leftRailFrameThk - (b - widthTotalTread) / 2) * TAN(bet)
					breakLineW				= breakLineWidth + xNosing
					bRailAboveBreakLine		= 0
					gosub "left rail"
				else
					poly2_b 5, 1+2+64, gs_fill_pen, gs_back_pen,
						leftRailOffset,					-leftRailOvhgBottom,1,
						leftRailOffset+leftRailFrameThk,-leftRailOvhgBottom,1,
						leftRailOffset+leftRailFrameThk,-xNosing+(NumStline-1)*treadDepth+(leftRailOffset+leftRailFrameThk - (b - widthTotalTread) / 2)*tan(bet),1,
						leftRailOffset,					-xNosing+(NumStline-1)*treadDepth+(leftRailOffset - (b - widthTotalTread) / 2)*tan(bet),1,
						leftRailOffset,					-leftRailOvhgBottom,1
				endif
			endif

			if drawPart[2] & bShowRailOnFloorPlan and bShowRailAboveBreakLine then
				pen railPen
				if aboveStory then
					SET LINE_TYPE railLineType
				else
					if (drawDashed[2]) then
						SET LINE_TYPE dash_line
					else
						SET LINE_TYPE railLineType
					endif
				endif
				xNosing = nosing * drawDetails[2]

				if bSymbolic2D then
					xNosing =  nosing * NOT(drawDetails[2])
					bShowRailOn1stRun		= 1
					bBreakRailLine			= 1
					brLineAngle				= bet
					bShowRailPart2			= 1
					breakLineDist			= leftRailOvhgBottom - nosing + (NumStline - 1) * treadDepth + (leftRailOffset+leftRailFrameThk-(b - widthTotalTread) / 2) * TAN(bet)
					breakLineW				= breakLineWidth + xNosing
					bRailAboveBreakLine		= 1
					gosub "left rail"
				else
					poly2_b 5, 1+2*gs_FillAbove+64, gs_fill_pen, gs_back_pen,
						leftRailOffset,					(nRisers)*treadDepth+leftRailOvhgTop,1,
						leftRailOffset+leftRailFrameThk,(nRisers)*treadDepth+leftRailOvhgTop,1,
						leftRailOffset+leftRailFrameThk,-xNosing+(NumStline-1)*treadDepth+breakLineWidth+(leftRailOffset+leftRailFrameThk - (b - widthTotalTread) / 2)*tan(bet),1,
						leftRailOffset,					-xNosing+(NumStline-1)*treadDepth+breakLineWidth+(leftRailOffset - (b - widthTotalTread) / 2)*tan(bet),1,
						leftRailOffset,					(nRisers)*treadDepth+leftRailOvhgTop,1
				endif
			endif

			if bShowRailAxis then
				line_type railAxisLineType
				pen gs_RailAxisPen
				if drawPart[1] then
					xNosing = nosing * drawDetails[1]
					line2 leftRailOffset+leftRailFrameThk/2, -xNosing+(NumStline-1)*treadDepth+(leftRailOffset+leftRailFrameThk/2 - (b - widthTotalTread) / 2)*tan(bet),leftRailOffset+leftRailFrameThk/2,-leftRailOvhgBottom
				endif
				if drawPart[2] then
					xNosing = nosing * drawDetails[2]
					line2 leftRailOffset+leftRailFrameThk/2, -xNosing+(NumStline-1)*treadDepth+breakLineWidth+(leftRailOffset+leftRailFrameThk/2 - (b - widthTotalTread) / 2)*tan(bet),leftRailOffset+leftRailFrameThk/2,(nRisers)*treadDepth+leftRailOvhgTop
				endif
			endif
		else
			if drawPart[3] & bShowRailOnFloorPlan then
				pen railPen
				if aboveStory then
					LINE_TYPE railLineType
				else
					if (drawDashed[3]) then
						LINE_TYPE dash_line
					else
						LINE_TYPE railLineType
					endif
				endif
				xNosing =  0 ! COMP nosing * drawDetails[3]

				if bSymbolic2D then
					bShowRailOn1stRun		= 1
					bBreakRailLine			= 0
					bRailAboveBreakLine		= 0
					gosub "left rail"
				else
					poly2_b 5, 1+2+64, gs_fill_pen, gs_back_pen,
						leftRailOffset,					-xNosing-leftRailOvhgBottom,1,
						leftRailOffset+leftRailFrameThk,-xNosing-leftRailOvhgBottom,1,
						leftRailOffset+leftRailFrameThk,(nRisers)*treadDepth+leftRailOvhgTop,1,
						leftRailOffset,					(nRisers)*treadDepth+leftRailOvhgTop,1,
						leftRailOffset,					-xNosing-leftRailOvhgBottom,1
				endif
			endif

			if bShowRailAxis then
				line_type railAxisLineType
				pen gs_RailAxisPen
				xNosing =  0 ! COMP nosing * drawDetails[3]
				line2 leftRailOffset+leftRailFrameThk/2, (nRisers)*treadDepth+leftRailOvhgTop,leftRailOffset+leftRailFrameThk/2,-xNosing-leftRailOvhgBottom
			endif
		endif

		del 1
	endif

	! --- Right Rail ---------------------------------------------------------------
	if rail_m = 2 | rail_m = 1 then		! Right, Both
		add2 -(b - widthTotalTread) / 2, 0

		if drawBreakline then
			if drawPart[1] & bShowRailOnFloorPlan then
				pen railPen
				if aboveStory then
					LINE_TYPE railLineType
				else
					if (drawDashed[1]) then
						LINE_TYPE dash_line
					else
						LINE_TYPE railLineType
					endif
				endif
				xNosing = nosing * drawDetails[1]

				if bSymbolic2D then
					bShowRailOn1stRun		= 1
					bBreakRailLine			= 1
					brLineAngle				= bet
					bShowRailPart1			= 1
					breakLineDist			= rightRailOvhgBottom - xNosing + (NumStline + 1) * treadDepth - (rightRailOffset - (b - widthTotalTread) / 2) * TAN(bet)
					breakLineW				= breakLineWidth + xNosing
					bRailAboveBreakLine		= 0
					gosub "right rail"
				else
					poly2_b 5, 1+2+64, gs_fill_pen, gs_back_pen,
						flightWidth-rightRailOffset-rightRailFrameThk,	-rightRailOvhgBottom,1,
						flightWidth-rightRailOffset,					-rightRailOvhgBottom,1,
						flightWidth-rightRailOffset,					-xNosing+(NumStline+1)*treadDepth-(rightRailOffset - (b - widthTotalTread) / 2)*tan(bet),1,
						flightWidth-rightRailOffset-rightRailFrameThk,	-xNosing+(NumStline+1)*treadDepth-(rightRailOffset+rightRailFrameThk - (b - widthTotalTread) / 2)*tan(bet),1,
						flightWidth-rightRailOffset-rightRailFrameThk,	-rightRailOvhgBottom,1
				endif
			endif

			if drawPart[2] & bShowRailOnFloorPlan and bShowRailAboveBreakLine then
				pen railPen
				if aboveStory then
					LINE_TYPE railLineType
				else
					if (drawDashed[2]) then
						LINE_TYPE dash_line
					else
						LINE_TYPE railLineType
					endif
				endif
				xNosing = nosing * drawDetails[2]

				if bSymbolic2D then
					xNosing =  nosing * NOT(drawDetails[2])
					bShowRailOn1stRun		= 1
					bBreakRailLine			= 1
					brLineAngle				= bet
					bShowRailPart2			= 1
					breakLineDist			= rightRailOvhgBottom - nosing + (NumStline + 1) * treadDepth - (rightRailOffset - (b - widthTotalTread) / 2) * TAN(bet)
					breakLineW				= breakLineWidth + xNosing
					bRailAboveBreakLine		= 1
					gosub "right rail"
				else
					poly2_b 5, 1 + 2 * gs_FillAbove+64, gs_fill_pen, gs_back_pen,
						flightWidth-rightRailOffset-rightRailFrameThk,	(nRisers)*treadDepth+rightRailOvhgTop,1,
						flightWidth-rightRailOffset,					(nRisers)*treadDepth+rightRailOvhgTop,1,
						flightWidth-rightRailOffset,					-xNosing+(NumStline+1)*treadDepth+breakLineWidth-(rightRailOffset - (b - widthTotalTread) / 2)*tan(bet),1,
						flightWidth-rightRailOffset-rightRailFrameThk,	-xNosing+(NumStline+1)*treadDepth+breakLineWidth-(rightRailOffset+rightRailFrameThk - (b - widthTotalTread) / 2)*tan(bet),1,
						flightWidth-rightRailOffset-rightRailFrameThk,	(nRisers)*treadDepth+rightRailOvhgTop,1
				endif
			endif

			if bShowRailAxis then
				line_type railAxisLineType
				pen gs_RailAxisPen
				if drawPart[1]then
					xNosing = nosing * drawDetails[1]
					line2 flightWidth-rightRailOffset-rightRailFrameThk/2, -xNosing+(NumStline+1)*treadDepth-(rightRailOffset+rightRailFrameThk/2 - (b - widthTotalTread) / 2)*tan(bet),
						flightWidth-rightRailOffset-rightRailFrameThk/2,-rightRailOvhgBottom
				endif
				if drawPart[2] then
					xNosing = nosing * drawDetails[2]
					line2 flightWidth-rightRailOffset-rightRailFrameThk/2, -xNosing+(NumStline+1)*treadDepth+breakLineWidth-(rightRailOffset+rightRailFrameThk/2 - (b - widthTotalTread) / 2)*tan(bet),
						flightWidth-rightRailOffset-rightRailFrameThk/2,(nRisers)*treadDepth+rightRailOvhgTop
				endif
			endif
		else
			if drawPart[3] & bShowRailOnFloorPlan then
				pen railPen
				if aboveStory then
					LINE_TYPE railLineType
				else
					if (drawDashed[3]) then
						LINE_TYPE dash_line
					else
						LINE_TYPE railLineType
					endif
				endif
				xNosing =  0 ! COMP nosing * drawDetails[3]

				if bSymbolic2D then
					bShowRailOn1stRun		= 1
					bBreakRailLine			= 0
					bRailAboveBreakLine		= 0
					gosub "right rail"
				else
					poly2_b 5, 1+2+64, gs_fill_pen, gs_back_pen,
						flightWidth-rightRailOffset,					-xNosing-rightRailOvhgBottom,1,
						flightWidth-rightRailOffset-rightRailFrameThk,	-xNosing-rightRailOvhgBottom,1,
						flightWidth-rightRailOffset-rightRailFrameThk,	(nRisers)*treadDepth+rightRailOvhgTop,1,
						flightWidth-rightRailOffset,					(nRisers)*treadDepth+rightRailOvhgTop,1,
						flightWidth-rightRailOffset,					-xNosing-rightRailOvhgBottom,1
				endif
			endif

			if bShowRailAxis then
				line_type railAxisLineType
				pen gs_RailAxisPen
				xNosing =  0 ! COMP nosing * drawDetails[3]
				line2 flightWidth-rightRailOffset-rightRailFrameThk/2, (nRisers)*treadDepth+rightRailOvhgTop,flightWidth-rightRailOffset-rightRailFrameThk/2,-xNosing-rightRailOvhgBottom
			endif
		endif

		del 1
	endif
endif

!===============================================================================
! --- Hotspot Editing 2D ---
!===============================================================================

drawindex 50
pen gs_cont_pen
! --- Flight Width -------------------------------------------------------------
xNosing = 0!nosing * (drawDetails[1] | drawDetails[3])

add2 -(b - widthTotalTread) / 2, 0
	HOTSPOT2 flightWidth,	xNosing,	FlightUNID, b, 1+256 : FlightUNID=FlightUNID+1
	HOTSPOT2 0,				xNosing,	FlightUNID, b, 2	: FlightUNID=FlightUNID+1
	HOTSPOT2 flightWidth+1,	0,			FlightUNID, b, 3	: FlightUNID=FlightUNID+1

	HOTSPOT2 flightWidth,	(nRisers)*treadDepth+xNosing,	FlightUNID, b, 1+256: FlightUNID=FlightUNID+1
	HOTSPOT2 0,				(nRisers)*treadDepth+xNosing,	FlightUNID, b, 2	: FlightUNID=FlightUNID+1
	HOTSPOT2 flightWidth+1,	(nRisers)*treadDepth+xNosing,	FlightUNID, b, 3	: FlightUNID=FlightUNID+1

	HOTSPOT2 0,	xNosing,	FlightUNID, a, 1+256: FlightUNID=FlightUNID+1
	HOTSPOT2 0,	a+xNosing,	FlightUNID, a, 2	: FlightUNID=FlightUNID+1
	HOTSPOT2 0,	-1,			FlightUNID, a, 3	: FlightUNID=FlightUNID+1

	HOTSPOT2 flightWidth,	xNosing,	FlightUNID, a, 1+256 : FlightUNID=FlightUNID+1
	HOTSPOT2 flightWidth,	a+xNosing,	FlightUNID, a, 2	: FlightUNID=FlightUNID+1
	HOTSPOT2 flightWidth,	-1,			FlightUNID, a, 3	: FlightUNID=FlightUNID+1
del 1

! --- UP/DOWN TEXT -------------------------------------------------------------
if bShowWalkLine & not(belowstory) then
	IF walkingDirUPDN_m = 2 | walkingDirUPDN_m = 3 | walkingDirUPDN_m = 5 then
		HOTSPOT2 widthTotalTread/2,			DirUPDN_Y-xNosing ,		UpDownUNID, DirUPDN_X, 1+128 : UpDownUNID = UpDownUNID+1
		HOTSPOT2 widthTotalTread/2-1,		DirUPDN_Y-xNosing ,		UpDownUNID, DirUPDN_X, 3	: UpDownUNID = UpDownUNID+1
		HOTSPOT2 widthTotalTread/2+DirUPDN_X,	DirUPDN_Y-xNosing ,	UpDownUNID, DirUPDN_X, 2	: UpDownUNID = UpDownUNID+1

		HOTSPOT2 widthTotalTread/2+DirUPDN_X,	0,			UpDownUNID, DirUPDN_Y, 1+128 : UpDownUNID = UpDownUNID+1
		HOTSPOT2 widthTotalTread/2+DirUPDN_X,	-1,			UpDownUNID, DirUPDN_Y, 3	: UpDownUNID = UpDownUNID+1
		HOTSPOT2 widthTotalTread/2+DirUPDN_X,DirUPDN_Y-xNosing ,		UpDownUNID, DirUPDN_Y, 2	: UpDownUNID = UpDownUNID+1
	ENDIF

	IF walkingDirUPDN_m = 4  | walkingDirUPDN_m = 5 then
		HOTSPOT2 widthTotalTread/2,			DirUPDN_Y_top+A,		UpDownUNID, DirUPDN_X_top, 1+128 : UpDownUNID = UpDownUNID+1
		HOTSPOT2 widthTotalTread/2-1,		DirUPDN_Y_top+A,		UpDownUNID, DirUPDN_X_top, 3	: UpDownUNID = UpDownUNID+1
		HOTSPOT2 widthTotalTread/2+DirUPDN_X_top,	DirUPDN_Y_top+A,UpDownUNID, DirUPDN_X_top, 2	: UpDownUNID = UpDownUNID+1

		HOTSPOT2 widthTotalTread/2+DirUPDN_X_top,	0+A,			UpDownUNID, DirUPDN_Y_top, 1+128 : UpDownUNID = UpDownUNID+1
		HOTSPOT2 widthTotalTread/2+DirUPDN_X_top,	-1+A,			UpDownUNID, DirUPDN_Y_top, 3	: UpDownUNID = UpDownUNID+1
		HOTSPOT2 widthTotalTread/2+DirUPDN_X_top,DirUPDN_Y_top+A,	UpDownUNID, DirUPDN_Y_top, 2	: UpDownUNID = UpDownUNID+1
	ENDIF
endif

!-- RAILING  ---------------------------------------------------
if _bShowRailIn2D & bShowRailOnFloorPlan & not(belowStory) then
	xNosing = 0 ! COMP nosing * (drawDetails[1] | drawDetails[3])

	IF rail_m = 2 | rail_m = 1 THEN		! Right, Both
		adx = flightWidth
		gosub "right_rail_hotspots"
	ENDIF

	IF rail_m = 1 & bSameRails THEN			! --- SAME RAILING ON BOTH SIDES ---
		MUL2 -1, 1
		adx = 0
		gosub "right_rail_hotspots"
		DEL 1
	ENDIF

	IF rail_m = 3 | rail_m = 1 & NOT(bSameRails) THEN		! Left, Both
		add2 -(b - widthTotalTread) / 2, 0
			! RAIL OFFSET - left
			HOTSPOT2 leftRailFrameThk/2,				(nRisers)*treadDepth+leftRailOvhgTop, RailUnID, leftRailOffset, 1+128 : RailUnID=RailUnID+1
			HOTSPOT2 leftRailFrameThk/2+leftRailOffset,	(nRisers)*treadDepth+leftRailOvhgTop, RailUnID, leftRailOffset, 2 : RailUnID=RailUnID+1
			HOTSPOT2 leftRailFrameThk/2+0.1,			(nRisers)*treadDepth+leftRailOvhgTop, RailUnID, leftRailOffset, 3 : RailUnID=RailUnID+1

			HOTSPOT2 leftRailFrameThk/2,				-xNosing-leftRailOvhgBottom, RailUnID, leftRailOffset, 1+128 : RailUnID=RailUnID+1
			HOTSPOT2 leftRailFrameThk/2+leftRailOffset,	-xNosing-leftRailOvhgBottom, RailUnID, leftRailOffset, 2 : RailUnID=RailUnID+1
			HOTSPOT2 leftRailFrameThk/2+0.1,			-xNosing-leftRailOvhgBottom, RailUnID, leftRailOffset, 3 : RailUnID=RailUnID+1

			! RAIL BOTTOM OVERHANG
			HOTSPOT2 leftRailFrameThk/2+leftRailOffset,		-xNosing,						RailUnID, leftRailOvhgBottom, 1+128 : RailUnID=RailUnID+1
			HOTSPOT2 leftRailFrameThk/2+leftRailOffset,		-xNosing+1,					RailUnID, leftRailOvhgBottom, 3 : RailUnID=RailUnID+1
			HOTSPOT2 leftRailFrameThk/2+leftRailOffset,		-xNosing-leftRailOvhgBottom,	RailUnID, leftRailOvhgBottom, 2 : RailUnID=RailUnID+1

			! RAIL TOP OVERHANG
			HOTSPOT2 leftRailFrameThk/2+leftRailOffset,		treadDepth*(nRisers),				RailUnID, leftRailOvhgTop, 1+128 : RailUnID=RailUnID+1
			HOTSPOT2 leftRailFrameThk/2+leftRailOffset,		treadDepth*(nRisers)-1,						RailUnID, leftRailOvhgTop, 3 : RailUnID=RailUnID+1
			HOTSPOT2 leftRailFrameThk/2+leftRailOffset,		treadDepth*(nRisers)+leftRailOvhgTop,RailUnID, leftRailOvhgTop, 2 : RailUnID=RailUnID+1
		del 1
	ENDIF
endif

del 2

end

"right_rail_hotspots":
	add2 -(b - widthTotalTread) / 2, 0
		! RAIL OFFSET - right
		HOTSPOT2 adx-rightRailFrameThk/2,					(nRisers)*treadDepth+rightRailOvhgTop, RailUnID, rightRailOffset, 1+128 : RailUnID=RailUnID+1
		HOTSPOT2 adx-rightRailFrameThk/2-rightRailOffset,	(nRisers)*treadDepth+rightRailOvhgTop, RailUnID, rightRailOffset, 2 : RailUnID=RailUnID+1
		HOTSPOT2 adx-rightRailFrameThk/2-0.1,				(nRisers)*treadDepth+rightRailOvhgTop, RailUnID, rightRailOffset, 3 : RailUnID=RailUnID+1

		HOTSPOT2 adx-rightRailFrameThk/2,					-xNosing-rightRailOvhgBottom, RailUnID, rightRailOffset, 1+128 : RailUnID=RailUnID+1
		HOTSPOT2 adx-rightRailFrameThk/2-rightRailOffset,	-xNosing-rightRailOvhgBottom, RailUnID, rightRailOffset, 2 : RailUnID=RailUnID+1
		HOTSPOT2 adx-rightRailFrameThk/2-0.1,				-xNosing-rightRailOvhgBottom, RailUnID, rightRailOffset, 3 : RailUnID=RailUnID+1

		! RAIL BOTTOM OVERHANG
		HOTSPOT2 adx-rightRailFrameThk/2-rightRailOffset,-xNosing,					RailUnID, rightRailOvhgBottom, 1+128 : RailUnID=RailUnID+1
		HOTSPOT2 adx-rightRailFrameThk/2-rightRailOffset,-xNosing+1,					RailUnID, rightRailOvhgBottom, 3 : RailUnID=RailUnID+1
		HOTSPOT2 adx-rightRailFrameThk/2-rightRailOffset,-xNosing-rightRailOvhgBottom,RailUnID, rightRailOvhgBottom, 2 : RailUnID=RailUnID+1

		! RAIL TOP OVERHANG
		HOTSPOT2 adx-rightRailFrameThk/2-rightRailOffset,treadDepth*(nRisers),					RailUnID, rightRailOvhgTop, 1+128 : RailUnID=RailUnID+1
		HOTSPOT2 adx-rightRailFrameThk/2-rightRailOffset,treadDepth*(nRisers)-1,						RailUnID, rightRailOvhgTop, 3 : RailUnID=RailUnID+1
		HOTSPOT2 adx-rightRailFrameThk/2-rightRailOffset,treadDepth*(nRisers)+rightRailOvhgTop,	RailUnID, rightRailOvhgTop, 2 : RailUnID=RailUnID+1
	del 1
return

"Start End Symbol":
	DRAWINDEX 45
	fill gs_StartEndFill

	if gs_StartEndFillPen <> 0 then
		temp_FillStatus = 2
	else
		temp_FillStatus = 0
	endif

	add2 0, +xNosing
	IF gs_StartEndStyle_m = 1 THEN		! Style 1
		POLY2_B 2, 1+temp_FillStatus, gs_StartEndFillPen, gs_fill_pen,
		0,-xNosing,901,
		gs_CircleRadius,360,4001
	ENDIF

	IF gs_StartEndStyle_m = 2 THEN		! Style 2
		FOR kk=1 TO 2
			POLY2_B 6, 1+temp_FillStatus, gs_StartEndFillPen, gs_fill_pen,
				0,-xNosing,1,
				0+gs_CircleRadius,-xNosing,1,
				0,-xNosing,901,
				0,90,4001,
				0,-xNosing+gs_CircleRadius,0,
				0,-xNosing,-1

			POLY2_B 6, 1, gs_StartEndFillPen, gs_fill_pen,
				0,-xNosing,1,
				0,-xNosing+gs_CircleRadius,1,
				0,-xNosing,901,
				0,90,4001,
				0-gs_CircleRadius,-xNosing,0,
				0,-xNosing,-1
		ROT2 180
		ADD2 0, 2*xNosing
		NEXT kk
		DEL 4
	ENDIF

	IF gs_StartEndStyle_m = 3 THEN		! Style 3
		LINE2 0+gs_StartWidth,-xNosing-gs_StartHeight,0+gs_StartWidth,-xNosing+gs_StartHeight
		LINE2 0-gs_StartWidth,-xNosing-gs_StartHeight,0-gs_StartWidth,-xNosing+gs_StartHeight
	ENDIF

	! --- Hotspots of StartEnd Symbol
	IF gs_StartEndStyle_m = 1 | gs_StartEndStyle_m = 2 THEN		! Style 1-2
		ADD2 0,-xNosing
			FOR kk=1 to 4
				HOTSPOT2 0, 0,					StartSymbUNID, gs_CircleRadius, 1+128	:StartSymbUNID=StartSymbUNID+1
				HOTSPOT2 -1, 0,					StartSymbUNID, gs_CircleRadius, 3+128	:StartSymbUNID=StartSymbUNID+1
				HOTSPOT2 gs_CircleRadius, 0,	StartSymbUNID, gs_CircleRadius,2		:StartSymbUNID=StartSymbUNID+1

				ROT2 90
			NEXT KK
			DEL 4
		DEL 1
	ENDIF

	IF gs_StartEndStyle_m = 3 THEN		! Style 3
		FOR kk=1 to 2
			ADD2 0, -xNosing
				! Symbol Width/2
				HOTSPOT2 0,				-gs_StartHeight, StartSymbUNID, gs_StartWidth, 1+128:StartSymbUNID=StartSymbUNID+1
				HOTSPOT2 -1,			-gs_StartHeight, StartSymbUNID, gs_StartWidth, 3	:StartSymbUNID=StartSymbUNID+1
				HOTSPOT2 gs_StartWidth, -gs_StartHeight, StartSymbUNID, gs_StartWidth, 2	:StartSymbUNID=StartSymbUNID+1

				HOTSPOT2 0,				gs_StartHeight, StartSymbUNID, gs_StartWidth, 1+128	:StartSymbUNID=StartSymbUNID+1
				HOTSPOT2 -1,			gs_StartHeight, StartSymbUNID, gs_StartWidth, 3		:StartSymbUNID=StartSymbUNID+1
				HOTSPOT2 gs_StartWidth, gs_StartHeight, StartSymbUNID, gs_StartWidth,2		:StartSymbUNID=StartSymbUNID+1
			DEL 1

			ADD2 0, -xNosing
				! Symbol Height
				HOTSPOT2 gs_StartWidth, 0,				StartSymbUNID, gs_StartHeight, 1+128:StartSymbUNID=StartSymbUNID+1
				HOTSPOT2 gs_StartWidth, -1,				StartSymbUNID, gs_StartHeight, 3	:StartSymbUNID=StartSymbUNID+1
				HOTSPOT2 gs_StartWidth, gs_StartHeight, StartSymbUNID, gs_StartHeight, 2	:StartSymbUNID=StartSymbUNID+1

				HOTSPOT2 gs_StartWidth, 0,					StartSymbUNID, gs_StartHeight, 1+128:StartSymbUNID=StartSymbUNID+1
				HOTSPOT2 gs_StartWidth, 1,					StartSymbUNID, gs_StartHeight, 3	:StartSymbUNID=StartSymbUNID+1
				HOTSPOT2 gs_StartWidth, -gs_StartHeight,	StartSymbUNID, gs_StartHeight, 2	:StartSymbUNID=StartSymbUNID+1
			DEL 1

		MUL2 -1,1
		NEXT kk
		DEL 2
	ENDIF
	del 1

	DRAWINDEX 40
RETURN


"Arrowhead Symbol":
	IF arrow_style_m = 1 | arrow_style_m = 4 | arrow_style_m = 7 THEN
		temp_ArrowDist = widthTotalTread/2
		temp_ArrowHeight = treadDepth
		if not(reverseWalkLine) & (i = 2 | i = 3) & walkingDirUPDN_m <> 5 then temp_ArrowHeight = treadDepth + xNosing
	ENDIF

	IF arrow_style_m = 2 | arrow_style_m = 5 | arrow_style_m = 8 THEN
		temp_ArrowDist = widthTotalTread/4
		temp_ArrowHeight = treadDepth
		if not(reverseWalkLine) & (i = 2 | i = 3) & walkingDirUPDN_m <> 5 then temp_ArrowHeight = treadDepth + xNosing
	ENDIF

	IF arrow_style_m = 3 | arrow_style_m = 6 | arrow_style_m = 9 THEN
		temp_ArrowDist = gs_ArrowHalfWidth
		temp_ArrowHeight = gs_ArrowHeight
	ENDIF

	if arrow_style_m = 1 | arrow_style_m = 2 | arrow_style_m = 3 then
		temp_ArrowMask=0
	else
		temp_ArrowMask=1
	endif

	POLY2_b 4, 1, penFillArrow, gs_fill_pen,
		-temp_ArrowDist,-temp_ArrowHeight, temp_ArrowMask,
		temp_ArrowDist,-temp_ArrowHeight, 1,
		0,0, 1,
		-temp_ArrowDist,-temp_ArrowHeight, -1

	! --- Arrowhead Fill Contour Points Conditions
	IF arrow_style_m = 4 | arrow_style_m = 5 | arrow_style_m = 6 THEN
		temp_1XFill=temp_ArrowDist
		lengthArrowHead = temp_ArrowHeight
	else
		lengthArrowHead = 0
	ENDIF

	IF arrow_style_m = 7 | arrow_style_m = 8 | arrow_style_m = 9 THEN
		temp_1XFill=0
	ENDIF

	if penFillArrow <> 0 then
		IF arrow_style_m <> 1 & arrow_style_m <> 2 & arrow_style_m <> 3 THEN
			fill gs_ArrowFill ! Always 64 (Foreground)
			POLY2_b 4, 2, penFillArrow, gs_fill_pen,
				-temp_1XFill,-temp_ArrowHeight, temp_ArrowMask,
				temp_ArrowDist,-temp_ArrowHeight, 1,
				0,0, 1,
				-temp_1XFill,-temp_ArrowHeight, -1
		ENDIF
	endif

	HOTSPOT2	0,0,	ArrowUNID: ArrowUNID=ArrowUNID+1

	! --- Hotspot editing of Height & Width of Arrowhead
	IF arrow_style_m = 3 | arrow_style_m = 6 | arrow_style_m = 9 THEN
		HOTSPOT2 gs_ArrowHalfWidth,0,				ArrowUNID, gs_ArrowHeight, 1+128	: ArrowUNID=ArrowUNID+1
		HOTSPOT2 gs_ArrowHalfWidth,-gs_ArrowHeight,	ArrowUNID, gs_ArrowHeight, 2		: ArrowUNID=ArrowUNID+1
		HOTSPOT2 gs_ArrowHalfWidth,1,				ArrowUNID, gs_ArrowHeight, 3		: ArrowUNID=ArrowUNID+1

		HOTSPOT2 -gs_ArrowHalfWidth,0,					ArrowUNID, gs_ArrowHeight, 1+128	: ArrowUNID=ArrowUNID+1
		HOTSPOT2 -gs_ArrowHalfWidth,-gs_ArrowHeight,	ArrowUNID, gs_ArrowHeight, 2		: ArrowUNID=ArrowUNID+1
		HOTSPOT2 -gs_ArrowHalfWidth,1,					ArrowUNID, gs_ArrowHeight, 3		: ArrowUNID=ArrowUNID+1

		HOTSPOT2 0,					-gs_ArrowHeight,	ArrowUNID, gs_ArrowHalfWidth, 1+128	: ArrowUNID=ArrowUNID+1
		HOTSPOT2 gs_ArrowHalfWidth,	-gs_ArrowHeight,	ArrowUNID, gs_ArrowHalfWidth, 2		: ArrowUNID=ArrowUNID+1
		HOTSPOT2 -1,				-gs_ArrowHeight,	ArrowUNID, gs_ArrowHalfWidth, 3		: ArrowUNID=ArrowUNID+1

		HOTSPOT2 0,					-gs_ArrowHeight,	ArrowUNID, gs_ArrowHalfWidth, 1+128 : ArrowUNID=ArrowUNID+1
		HOTSPOT2 -gs_ArrowHalfWidth,-gs_ArrowHeight,	ArrowUNID, gs_ArrowHalfWidth, 2		: ArrowUNID=ArrowUNID+1
		HOTSPOT2 1,					-gs_ArrowHeight,	ArrowUNID, gs_ArrowHalfWidth, 3		: ArrowUNID=ArrowUNID+1
	ENDIF
RETURN


"left rail":

	rot2 90
	add2 0, 0

	if bShowRailOn1stRun then
		ADD2 -leftRailOvhgBottom-nosing*0, -leftRailOffset-leftRailFrameThk/2

		lraSimple=a+leftRailOvhgBottom+leftRailOvhgTop
		lraComplex=a-treadDepth
		additionXComplex=leftRailOvhgBottom+treadDepth/2
		additionZComplex=leftRailOvhgBottom*tan(ang)
		hrovL=treadDepth/2+leftRailOvhgBottom
		hrovR=treadDepth/2+leftRailOvhgTop
		IF leftRailType_m = 10 THEN	! Rail Post with Bars
			postNumber=max(2,(a-treadDepth)/(3*treadDepth))
		else
			postNumber=(a+leftRailOvhgBottom+leftRailOvhgTop)/(3*treadDepth)+1
		endif
		side = SIDE_LEFT
		gosub "callRailsForStair"

		DEL 1
	endif

	del 2

return


"right rail":

	rot2 90
	add2 0, -flightWidth

	if bShowRailOn1stRun then
		ADD2 -rightRailOvhgBottom-nosing*0,	rightRailOffset+rightRailFrameThk/2

		lraSimple=a+rightRailOvhgBottom+rightRailOvhgTop
		lraComplex=a-treadDepth
		additionXComplex=rightRailOvhgBottom+treadDepth/2
		additionZComplex=rightRailOvhgBottom*tan(ang)
		hrovL=treadDepth/2+rightRailOvhgBottom
		hrovR=treadDepth/2+rightRailOvhgTop
		IF rightRailType_m = 10 THEN	! Rail Post with Bars
			postNumber=max(2,(a-treadDepth)/(3*treadDepth))
		else
			postNumber=(a+rightRailOvhgBottom+rightRailOvhgTop)/(3*treadDepth)+1
		endif
		side = SIDE_RIGHT
		gosub "callRailsForStair"

		DEL 1
	endif

	del 2

return


"callRailsForStair":
! ------------------------------------------------------------------------------
!	lraSimple
!	lraComplex
!	additionXComplex
!	additionZComplex
!	hrovL: rail overhang start
!	hrovR: rail overhang end
!	postNumber:   number of posts
!	side: SIDE_LEFT or SIDE_RIGHT
! ==============================================================================
	ani = ang
	additionXComplex = additionXComplex
	additionZComplex = additionZComplex
	if side = SIDE_LEFT then
		dsComplex = leftRailDist+treadDepth/2*tan(ang)
	else
		dsComplex = rightRailDist+treadDepth/2*tan(ang)
	endif

	gosub "callRails"
return


! ==============================================================================
"callRails":
! ------------------------------------------------------------------------------
!	ani
!	additionXComplex
!	additionZComplex
!	dsComplex
!  ------------------
!	side: SIDE_LEFT or SIDE_RIGHT
!	lraSimple
!	lraComplex
!	hrovL: rail overhang start
!	hrovR: rail overhang end
!	postNumber:   number of posts
! ==============================================================================
	if side = SIDE_LEFT then
		railBarDepth		= leftRailBarDepth
		railBarDiam			= railBarDepth
		railHeight			= leftRailHeight
		railBarThk			= leftRailBarThk
		railFrameThk		= leftRailFrameThk
		railDist			= leftRailDist
		railType_m			= leftRailType_m
		railPostSize		= leftRailPostSize
		nBarsRail			= nBarsLeftRail
		if rightRailType_m = RAIL_WIRED then
			railBarThk		= leftRailWireThk
			railBarDepth	= leftRailWireDepth
			railBarDiam		= leftRailWireDiam
		endif
		bComplexRail		= bComplexRailLeft
	else
		railBarDepth		= rightRailBarDepth
		railBarDiam			= railBarDepth
		railHeight			= rightRailHeight
		railBarThk			= rightRailBarThk
		railFrameThk		= rightRailFrameThk
		railDist			= rightRailDist
		railType_m			= rightRailType_m
		railPostSize		= rightRailPostSize
		nBarsRail			= nBarsRightRail
		if rightRailType_m = RAIL_WIRED then
			railBarThk		= rightRailWireThk
			railBarDepth	= rightRailWireDepth
			railBarDiam		= rightRailWireDiam
		endif
		bComplexRail		= bComplexRailRight
	endif

	add2 additionXComplex * bComplexRail, 0
	call "railSymbol2D_m" parameters all	cfs					= 1,
											bEnable2DPosts		= bComplexRail,
											ptyp_m				= 1,
											ani					= ani,
											rom_m				= 1,
											rmm_m				= 1,
											LengthSize			= 0,
											lra					= lraSimple * NOT(bComplexRail) + lraComplex * (bComplexRail),
											hr					= railHeight,
											hrPerp				= railHeight,
											ab					= 0,
											rb					= 0,
											ds					= railDist,
											gs_AngleL			= 90,
											gs_AngleR			= 90,
											iHandRailStyle		= 1,
											handRailDiameter	= railFrameThk,
											handRailWidth		= railFrameThk,
											hroL				= hrovL,
											hroR				= hrovR,
											np					= postNumber,
											pd					= railPostSize,
											pw					= railPostSize,
											pth					= railFrameThk,
											gs_cont_pen			= railPen,
											sa					= 0,
											bBreakRailLine		= bBreakRailLine,
											breakLineAngle		= brLineAngle,
											breakLineDist		= breakLineDist,
											breakLineWidth		= breakLineW,
											bRailAboveBreakLine	= bRailAboveBreakLine,
											bShowRailBelowBrL	= bShowRailPart1,
											bShowRailAboveBrL	= bShowRailPart2,
											bPostNoCalculation	= (railType_m = 9),
											pit_m				= 2,
											dp					= treadDepth
	del 1

	bShowRailPart1			= 0
	bShowRailPart2			= 0

return

"carriage":

	if beamNum = 1 then
		add2 carriageBaseDist / 2 - beamThk / 2 - beamOffsetRight, 0
	else
		add2 carriageBaseDist - beamThk - beamOffsetRight, 0
	endif
	for wb = 1 to beamNum
		if bBreakCarriageLine then
			lengthMod	= -(carriageBaseDist - beamOffsetLeft - beamOffsetRight - beamThk) * tan(brLineAngle) * (wb = 2)
			if bShowCarriagePart1 then
				pen carriagePen
				if aboveStory then
					LINE_TYPE carriageLineType
				else
					if	(drawPart[1] and drawDashed[1]) then
						LINE_TYPE dash_line
					else
						LINE_TYPE carriageLineType
					endif
				endif

				poly2_b 4, 1+2+4+64, gs_fill_pen, gs_back_pen,
					0, 0, 1,
					beamThk, 0, 1,
					beamThk, carrBreakLineDist + beamThk * tan(brLineAngle) / 2 + lengthMod, 1,
					0, carrBreakLineDist - beamThk * tan(brLineAngle) / 2 + lengthMod, 1
			endif

			if bShowCarriagePart2 then
				pen carriagePen
				if aboveStory then
					LINE_TYPE carriageLineType
				else
					if	(drawPart[2] and drawDashed[2]) then
						LINE_TYPE dash_line
					else
						LINE_TYPE carriageLineType
					endif
				endif


				poly2_b 4, 1 + 2 * gs_FillAbove + 4+64, gs_fill_pen, gs_back_pen,
					0, carrBreakLineDist - beamThk * tan(brLineAngle) / 2 + lengthMod + carrBreakLineWidth, 1,
					beamThk, carrBreakLineDist + beamThk * tan(brLineAngle) / 2 + lengthMod + carrBreakLineWidth, 1,
					beamThk, beamLength, 1,
					0, beamLength, 1
			endif
		else
			if aboveStory then
				LINE_TYPE carriageLineType
			else
			pen carriagePen
				if drawPart[3] then
					if (drawDashed[3]) then
						LINE_TYPE dash_line
					else
						LINE_TYPE carriageLineType
					endif
				else
					if	(NOT(bCarrAboveBreakLine) and drawDashed[1]) or\
						((bCarrAboveBreakLine) and drawDashed[2]) then
						LINE_TYPE dash_line
					else
						LINE_TYPE carriageLineType
					endif
				endif
			endif

			poly2_b 4, 1 + 2 * (NOT(bCarrAboveBreakLine) + bCarrAboveBreakLine * gs_FillAbove) + 4+64, gs_fill_pen, gs_back_pen,
				0, 0, 1,
				beamThk, 0, 1,
				beamThk, beamLength, 1,
				0, beamLength, 1
		endif
		add2 -carriageBaseDist + beamThk + beamOffsetLeft + beamOffsetRight, 0
	next wb
	del beamNum + 1

return

]]>
</Script_2D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_1D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
EPS=0.0001

SIDE_LEFT				= 1
SIDE_RIGHT				= 2

DET2D_SCALESENSITIVE	= 1
DET2D_CUSTOM			= 2

DET3D_OFF      = 0
DET3D_SIMPLE   = 1
DET3D_DETAILED = 2
DET3D_DRAFT    = 3

dim stArrowHeadStyles[9]
	stArrowHeadStyles[1] =  `Стиль 1`
	stArrowHeadStyles[2] =  `Стиль 2`
	stArrowHeadStyles[3] =  `Стиль 3`
	stArrowHeadStyles[4] =  `Стиль 4`
	stArrowHeadStyles[5] =  `Стиль 5`
	stArrowHeadStyles[6] =  `Стиль 6`
	stArrowHeadStyles[7] =  `Стиль 7`
	stArrowHeadStyles[8] =  `Стиль 8`
	stArrowHeadStyles[9] =  `Стиль 9`

dim stStartSymbolStyles[4]
	stStartSymbolStyles[1] = `Стиль 1`
	stStartSymbolStyles[2] = `Стиль 2`
	stStartSymbolStyles[3] = `Стиль 3`
	stStartSymbolStyles[4] = `Нет`

dim stPostSymbolType[5]
	stPostSymbolType[1] = `Тип 1`
	stPostSymbolType[2] = `Тип 2`
	stPostSymbolType[3] = `Тип 3`
	stPostSymbolType[4] = `Тип 4`
	stPostSymbolType[5] = `Нет`

dim stRailPosition[4]
	stRailPosition[1] = `Оба`
	stRailPosition[2] = `Справа`
	stRailPosition[3] = `Слева`
	stRailPosition[4] = `Нет`

dim stRailTypes[11]
	stRailTypes[ 1] = `Балюстрада Ограждения`
	stRailTypes[ 2] = `Параллельные Прутья`
	stRailTypes[ 3] = `Простой Брусок`
	stRailTypes[ 4] = `Объемная Рама с Панелью`
	stRailTypes[ 5] = `Объемная Рама`
	stRailTypes[ 6] = `Панель Ограждения`
	stRailTypes[ 7] = `Стойки Ограждения с Балясинами`
	stRailTypes[ 8] = `Стойки с Леерами`
	stRailTypes[ 9] = `Деревянная Балюстрада`
	stRailTypes[10] = `Стойки Ограждения с Брусками`
	stRailTypes[11] = `Как и Правое`

dim stShowCarriageValues[5]
	stShowCarriageValues[1]	= `Всегда`
	stShowCarriageValues[2]	= `До 1:20`
	stShowCarriageValues[3]	= `До 1:50`
	stShowCarriageValues[4]	= `До 1:100`
	stShowCarriageValues[5]	= `До 1:200`

RAILPOS_BOTH				= 1
RAILPOS_RIGHT				= 2
RAILPOS_LEFT				= 3
RAILPOS_NONE				= 4

RAIL_BALUSTRADE				= 1
RAIL_PARALLEL_BARS			= 2
RAIL_SIMPLE_BAR				= 3
RAIL_SOLID_FRAME_FILLED		= 4
RAIL_SOLID_FRAME			= 5
RAIL_SOLID					= 6
RAIL_POST_WITH_BALUSTERS	= 7
RAIL_WIRED					= 8
RAIL_WOODEN_BALUSTRADE		= 9
RAIL_POST_WITH_BARS			= 10
RAIL_SAMERAILS				= 11

RECTANGULAR					= 1
ROUND						= 2

dim stTypeNose[3]
	stTypeNose[1] = `Острый`
	stTypeNose[2] = `Скругленный`
	stTypeNose[3] = `Скошенный`

dim stTypeStringer[8]
	stTypeStringer[1] = `Цельный Стержень`
	stTypeStringer[2] = `Стержень с Полым Сердечником`
	stTypeStringer[3] = `Скругленный Прямоугольник`
	stTypeStringer[4] = `Скругленный Полый Прямоугольник`
	stTypeStringer[5] = `Монолитная Труба`
	stTypeStringer[6] = `Труба с Полым Сердечником`
	stTypeStringer[7] = `Канал открывается внутрь`
	stTypeStringer[8] = `Канал открывается наружу`

dim stDetlevel2D[2]
	stDetlevel2D[1] = `Зависит от Масштаба`
	stDetlevel2D[2] = `Специальный`

dim stDetlevel3D[3]
	stDetlevel3D[1] = `Откл.`
	stDetlevel3D[2] = `Простой`
	stDetlevel3D[3] = `Детальный`

dim stParameterType[2]
	stParameterType[1] = `На Основе Размеров`
	stParameterType[2] = `На Основе Кол-ва Подступенков`

dim stTopTreadLevel[2]
	stTopTreadLevel[1] = `Верхняя Ступень на Уровне Пола`
	stTopTreadLevel[2] = `Верхняя Ступень Ниже Уровня Пола`

dim stStairBaseType[3]
	stStairBaseType[1] = `Бетон`
	stStairBaseType[2] = `Дерево`
	stStairBaseType[3] = `Нет`

dim stRiseRunText[7]
	stRiseRunText[1] = `Кол-во x Подступенок = Высота Марша`
	stRiseRunText[2] = `Кол-во Проступей/Подступенок @`
	stRiseRunText[3] = `Кол-во х Проступь х Подступенок`
	stRiseRunText[4] = `Кол-во х Подступенок х Проступь`
	stRiseRunText[5] = `Кол-во <текст подступенка> Подступенок / Проступь`
	stRiseRunText[6] = `Кол-во <текст подступенка> // Подступенок / Проступь`
	stRiseRunText[7] = `Специальный Текст`

dim stTextOrientation[3]
	stTextOrientation[1] = `Выровнять по Символу`
	stTextOrientation[2] = `Параллельно Линии Всхода`
	stTextOrientation[3] = `Читаемый`

dim stWalkingDirUPDN[6]
	stWalkingDirUPDN[1] = `Нет`
	stWalkingDirUPDN[2] = `Вверху`
	stWalkingDirUPDN[3] = `Вниз в Нижней Части`
	stWalkingDirUPDN[4] = `Вниз в Верхней Части`
	stWalkingDirUPDN[5] = `Оба`
	stWalkingDirUPDN[6] = `Оба, Зависит от Этажа`

dim stLineTypeAboveBreak[2]
	stLineTypeAboveBreak[1] = `Штриховая`
	stLineTypeAboveBreak[2] = `Сплошная`

dim stBreaklineStyle[3]
	stBreaklineStyle[1]= `Прямой`
	stBreaklineStyle[2]= `Зигзаг`
	stBreaklineStyle[3]= `Зигзаг CHI`

dim stWireType[2]
	stWireType[1]= `Прямоугольные`
	stWireType[2]= `Круглые`


! --- CALCULATE TREADS PARAMETERS ---
if parameterType_m = 1 then	! Based on Sizes
	Parameters treadHeight	= (zzyzx/nRisers)
	Parameters treadDepth	= a/nRisers
	ang	= atn(treadHeight/treadDepth)	! Pitch ang of Stair
	LOCK "treadDepth","treadHeight"
else
	Parameters a			= nRisers*treadDepth
	Parameters zzyzx		= nRisers*treadHeight
	ang	= atn(zzyzx/a)	! Pitch ang of Stair
	LOCK "a","zzyzx"
ENDIF


flightWidth	= b
res			= 16
rescs		= 12
ftw			= 0.05
IF bRiserCover<0.5 THEN riserCoverThk = 0

! -------------- 2D Symbol variables --------------

! gs_SymbolType_m
SYMBOL_TYPE1	= 1
SYMBOL_TYPE2	= 2
SYMBOL_TYPE3	= 3
SYMBOL_TYPE4	= 4
SYMBOL_TYPE5	= 5
SYMBOL_TYPE6	= 6
SYMBOL_TYPE7	= 7
SYMBOL_TYPE8	= 8
SYMBOL_TYPE9	= 9
SYMBOL_TYPE10	= 10
SYMBOL_TYPE11	= 11
SYMBOL_TYPE12	= 12
SYMBOL_TYPE13	= 13
SYMBOL_TYPE14	= 14
SYMBOL_TYPE15	= 15
SYMBOL_TYPE16	= 16
SYMBOL_TYPE17	= 17
SYMBOL_TYPE18	= 18
SYMBOL_TYPE19	= 19
SYMBOL_TYPE20	= 20

dim stStairSymbolTypes[20]
	stStairSymbolTypes[ 1] = `Тип 1`
	stStairSymbolTypes[ 2] = `Тип 2`
	stStairSymbolTypes[ 3] = `Тип 3`
	stStairSymbolTypes[ 4] = `Тип 4`
	stStairSymbolTypes[ 5] = `Тип 5`
	stStairSymbolTypes[ 6] = `Тип 6`
	stStairSymbolTypes[ 7] = `Тип 7`
	stStairSymbolTypes[ 8] = `Тип 8`
	stStairSymbolTypes[ 9] = `Тип 9`
	stStairSymbolTypes[10] = `Тип 10`
	stStairSymbolTypes[11] = `Тип 11`
	stStairSymbolTypes[12] = `Тип 12`
	stStairSymbolTypes[13] = `Тип 13`
	stStairSymbolTypes[14] = `Тип 14`
	stStairSymbolTypes[15] = `Тип 15`
	stStairSymbolTypes[16] = `Тип 16`
	stStairSymbolTypes[17] = `Тип 17`
	stStairSymbolTypes[18] = `Тип 18`
	stStairSymbolTypes[19] = `Тип 19`
	stStairSymbolTypes[20] = `Тип 20`

! iSymbolGroup
SYMBOLGROUP_TYPE1	= 1
SYMBOLGROUP_TYPE2	= 2
SYMBOLGROUP_TYPE3	= 3
SYMBOLGROUP_TYPE4	= 4
SYMBOLGROUP_TYPE5	= 5
SYMBOLGROUP_TYPE6	= 6
SYMBOLGROUP_TYPE7	= 7
SYMBOLGROUP_TYPE8	= 8

dim stSymbolGroup[8]
	stSymbolGroup[1] = `Тип 1`
	stSymbolGroup[2] = `Тип 2`
	stSymbolGroup[3] = `Тип 3`
	stSymbolGroup[4] = `Тип 4`
	stSymbolGroup[5] = `Тип 5`
	stSymbolGroup[6] = `Тип 6`
	stSymbolGroup[7] = `Тип 7`
	stSymbolGroup[8] = `Тип 8`

dim	iEnabledSymbolTypes[8][3]
	iEnabledSymbolTypes[1][1] = 1
	iEnabledSymbolTypes[1][2] = 6
	iEnabledSymbolTypes[1][3] = 13

	iEnabledSymbolTypes[2][1] = 2
	iEnabledSymbolTypes[2][2] = 7
	iEnabledSymbolTypes[2][3] = 14

	iEnabledSymbolTypes[3][1] = 3
	iEnabledSymbolTypes[3][2] = 8
	iEnabledSymbolTypes[3][3] = 15

	iEnabledSymbolTypes[4][1] = 4
	iEnabledSymbolTypes[4][2] = 9
	iEnabledSymbolTypes[4][3] = 16

	iEnabledSymbolTypes[5][1] = 5
	iEnabledSymbolTypes[5][2] = 10
	iEnabledSymbolTypes[5][3] = 17

	iEnabledSymbolTypes[6][1] = 4
	iEnabledSymbolTypes[6][2] = 11
	iEnabledSymbolTypes[6][3] = 18

	iEnabledSymbolTypes[7][1] = 4
	iEnabledSymbolTypes[7][2] = 11
	iEnabledSymbolTypes[7][3] = 19

	iEnabledSymbolTypes[8][1] = 5
	iEnabledSymbolTypes[8][2] = 12
	iEnabledSymbolTypes[8][3] = 20


! iScaleType
SCALE_10		= 10
SCALE_20		= 20
SCALE_50		= 50
SCALE_100		= 100
SCALE_200		= 200
SCALE_500		= 500

SCALE_1_1		= 1
SCALE_1_4		= 4
SCALE_1_8		= 8
SCALE_1_16		= 16
SCALE_1_24		= 24
SCALE_1_48		= 48
SCALE_1_96		= 96
SCALE_1_192		= 192
SCALE_CUSTOM	= 999

dim	iScaleType[15]
	iScaleType[1]	= SCALE_10
	iScaleType[2]	= SCALE_20
	iScaleType[3]	= SCALE_50
	iScaleType[4]	= SCALE_100
	iScaleType[5]	= SCALE_200
	iScaleType[6]	= SCALE_500
	iScaleType[7]	= SCALE_1_1
	iScaleType[8]	= SCALE_1_4
	iScaleType[9]	= SCALE_1_8
	iScaleType[10]	= SCALE_1_16
	iScaleType[11]	= SCALE_1_24
	iScaleType[12]	= SCALE_1_48
	iScaleType[13]	= SCALE_1_96
	iScaleType[14]	= SCALE_1_192
	iScaleType[15]	= SCALE_CUSTOM

dim stScaleType[15]
	stScaleType[1]	= `1:10`
	stScaleType[2]	= `1:20`
	stScaleType[3]	= `1:50`
	stScaleType[4]	= `1:100`
	stScaleType[5]	= `1:200`
	stScaleType[6]	= `1:500`
	
	stScaleType[7]	= `1'=1'-0"`
	stScaleType[8]	= `3"=1'-0"`
	stScaleType[9]	= `1 1/2"=1'-0"`
	stScaleType[10]	= `3/4"=1'-0"`
	stScaleType[11]	= `1/2"=1'-0"`
	stScaleType[12]	= `1/4"=1'-0"`
	stScaleType[13]	= `1/8"=1'-0"`
	stScaleType[14]	= `1/16"=1'-0"`
	stScaleType[15]	= `Специальный Масштаб`

if iScaleChangeSM = SCALE_CUSTOM then
	_iScaleSM = gs_ScaleChangeSM
else
	_iScaleSM = iScaleChangeSM
endif
if iScaleChangeMD = SCALE_CUSTOM then
	_iScaleMD = gs_ScaleChangeMD
else
	_iScaleMD = iScaleChangeMD
endif

! -------------- End of 2D Symbol variables --------------

! --- Rails --------------------------------------------------------------

rightRailOffset = -rightRailOffset
leftRailOffset = -leftRailOffset

IF bSameRails THEN
	leftRailHeight		= rightRailHeight
	leftRailDist		= rightRailDist
	leftRailOffset		= rightRailOffset
	leftRailOvhgBottom	= rightRailOvhgBottom
	leftRailOvhgTop		= rightRailOvhgTop
	leftRailPostSize	= rightRailPostSize
	leftRailFrameThk	= rightRailFrameThk
	nBarsLeftRail		= nBarsRightRail
	leftRailBarThk		= rightRailBarThk
	leftRailBarDepth	= rightRailBarDepth
	leftWireType_m		= rightWireType_m
	leftRailWireThk		= rightRailWireThk
	leftRailWireDepth	= rightRailWireDepth
	leftRailWireDiam	= rightRailWireDiam
ENDIF

bComplexRailRight		= (rightRailType_m > 6)
if bSameRails then
	bComplexRailLeft 	= (rightRailType_m > 6)
else
	bComplexRailLeft 	= (leftRailType_m > 6)
endif

bEnableCarriageLine		= 1

]]>
</Script_1D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_VL SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
call "FM_types" parameters all
call "ui_stairs" parameters gs_ui_current_page	= gs_ui_current_page

! ---------- Length Unit ----------
w_units_form = ""
rrr					= request("Linear_dimension", "", w_units_form)
bLinearDimIsMetric	= (strstr(w_units_form, "m") > 0)


! ---------- 3D detail level ----------
values{2} "gs_detlevel_3D_m" 	DET3D_OFF,			stDetlevel3D[1],
								DET3D_SIMPLE,		stDetlevel3D[2],
								DET3D_DETAILED,		stDetlevel3D[3]

if gs_detlevel_3D_m = DET3D_SIMPLE then
	lock "gs_resol"
	hideparameter "gs_resol"
endif

if gs_detlevel_3D_m = DET3D_OFF then
	lock "gs_resol", "gs_shadow"
	hideparameter "gs_resol", "gs_shadow"
endif


!! ---------- 2D detail level ----------
values{2} "gs_detlevel_2D_m"	DET2D_SCALESENSITIVE,	stDetlevel2D[1],
								DET2D_CUSTOM,			stDetlevel2D[2]

!! ---------- Symbol Type ----------
if gs_detlevel_2D_m = DET2D_SCALESENSITIVE then
	values{2} "iSymbolGroup"	SYMBOLGROUP_TYPE1,	stSymbolGroup[1],
								SYMBOLGROUP_TYPE2,	stSymbolGroup[2],
								SYMBOLGROUP_TYPE3,	stSymbolGroup[3],
								SYMBOLGROUP_TYPE4,	stSymbolGroup[4],
								SYMBOLGROUP_TYPE5,	stSymbolGroup[5],
								SYMBOLGROUP_TYPE6,	stSymbolGroup[6],
								SYMBOLGROUP_TYPE7,	stSymbolGroup[7],
								SYMBOLGROUP_TYPE8,	stSymbolGroup[8]

	lock			"gs_SymbolType_m"
	hideparameter	"gs_SymbolType_m"


	!! ----------------- Simple to Middle Scale -----------------
	if bLinearDimIsMetric then
		_iEnableScaleSMTypes	= 2 + 4 + 8 + 16 + 32 + 64
	else
		_iEnableScaleSMTypes	= 128 + 256 + 512 + 1024 + 2048 + 4096 + 8192 + 16384
	endif

	dim _iEnableScaleSMTypeValueList[]
	dim _stEnableScaleSMTypeValueList[]
	j = 1
	for i = 1 to vardim1(iScaleType)
		if bittest(_iEnableScaleSMTypes, i) then
			_iEnableScaleSMTypeValueList[j] = iScaleType[i]
			_stEnableScaleSMTypeValueList[j] = stScaleType[i]
			j = j + 1
		endif
	next i
	_iEnableScaleSMTypeValueList[j] = iScaleType[15]
	_stEnableScaleSMTypeValueList[j] = stScaleType[15]
	values{2} "iScaleChangeSM" _iEnableScaleSMTypeValueList, _stEnableScaleSMTypeValueList
	if iScaleChangeSM = SCALE_CUSTOM then
		values "gs_ScaleChangeSM"	range (1,)
	else
		gs_ScaleChangeSM = iScaleChangeSM
		parameters	gs_ScaleChangeSM = gs_ScaleChangeSM

		lock			"gs_ScaleChangeSM"
		hideparameter	"gs_ScaleChangeSM"
	endif

	
	!! ----------------- Middle to Detailed Scale -----------------
	if bLinearDimIsMetric then
		_iEnableScaleMDTypes	= 2 + 4 + 8 + 16 + 32 + 64
	else
		_iEnableScaleMDTypes	= 128 + 256 + 512 + 1024 + 2048 + 4096 + 8192 + 16384
	endif

	dim _iEnableScaleMDTypeValueList[]
	dim _stEnableScaleMDTypeValueList[]
	j = 1
	for i = 1 to vardim1(iScaleType)
		if bittest(_iEnableScaleMDTypes, i) then
			if iScaleChangeSM = SCALE_CUSTOM then
				if gs_ScaleChangeSM > iScaleType[i] then
					_iEnableScaleMDTypeValueList[j] = iScaleType[i]
					_stEnableScaleMDTypeValueList[j] = stScaleType[i]
					j = j + 1
				else
					i = vardim1(iScaleType)
				endif
			else
				_iEnableScaleMDTypeValueList[j] = iScaleType[i]
				_stEnableScaleMDTypeValueList[j] = stScaleType[i]

				if gs_ScaleChangeSM = _iEnableScaleSMTypeValueList[j] then
					i = vardim1(iScaleType)
				else
					j = j + 1
				endif
			endif
		endif
	next i
	_iEnableScaleMDTypeValueList[j] = iScaleType[15]
	_stEnableScaleMDTypeValueList[j] = stScaleType[15]
	values{2} "iScaleChangeMD" _iEnableScaleMDTypeValueList, _stEnableScaleMDTypeValueList

	if iScaleChangeMD = SCALE_CUSTOM then
		values "gs_ScaleChangeMD"	range (, _iScaleSM)
	else
		gs_ScaleChangeMD = iScaleChangeMD
		parameters	gs_ScaleChangeMD = gs_ScaleChangeMD

		lock			"gs_ScaleChangeMD"
		hideparameter	"gs_ScaleChangeMD"
	endif
	if (gs_ScaleChangeMD >= gs_ScaleChangeSM)  then
		gs_ScaleChangeMD = gs_ScaleChangeSM - 1
		parameters	gs_ScaleChangeMD = gs_ScaleChangeMD
	endif
else
	values{2} "gs_SymbolType_m"	SYMBOL_TYPE1,	stStairSymbolTypes[1],
								SYMBOL_TYPE2,	stStairSymbolTypes[2],
								SYMBOL_TYPE3,	stStairSymbolTypes[3],
								SYMBOL_TYPE4,	stStairSymbolTypes[4],
								SYMBOL_TYPE5,	stStairSymbolTypes[5],
								SYMBOL_TYPE6,	stStairSymbolTypes[6],
								SYMBOL_TYPE7,	stStairSymbolTypes[7],
								SYMBOL_TYPE8,	stStairSymbolTypes[8],
								SYMBOL_TYPE9,	stStairSymbolTypes[9],
								SYMBOL_TYPE10,	stStairSymbolTypes[10],
								SYMBOL_TYPE11,	stStairSymbolTypes[11],
								SYMBOL_TYPE12,	stStairSymbolTypes[12],
								SYMBOL_TYPE13,	stStairSymbolTypes[13],
								SYMBOL_TYPE14,	stStairSymbolTypes[14],
								SYMBOL_TYPE15,	stStairSymbolTypes[15],
								SYMBOL_TYPE16,	stStairSymbolTypes[16],
								SYMBOL_TYPE17,	stStairSymbolTypes[17],
								SYMBOL_TYPE18,	stStairSymbolTypes[18],
								SYMBOL_TYPE19,	stStairSymbolTypes[19],
								SYMBOL_TYPE20,	stStairSymbolTypes[20]

	lock			"iSymbolGroup",
					"gs_ScaleChangeSM",
					"iScaleChangeSM",
					"gs_ScaleChangeMD",
					"iScaleChangeMD"
	hideparameter	"iSymbolGroup",
					"gs_ScaleChangeSM",
					"iScaleChangeSM",
					"gs_ScaleChangeMD",
					"iScaleChangeMD"
endif

! ====================================================================
! Base
! ====================================================================

VALUES "parameterType" stParameterType			! Based on Sizes, Based on Risers No.
if GLOB_MODPAR_NAME = "parameterType" then
	for i = 1 to vardim1(stParameterType)
	   if parameterType = stParameterType[i]	then parameterType_m = i
	next i
	parameters parameterType_m = parameterType_m
else
	parameters parameterType = stParameterType[parameterType_m]
endif

values "topTreadLevel"	stTopTreadLevel			! Top Tread at Floor Level, Top Tread below Floor Level
if GLOB_MODPAR_NAME = "topTreadLevel" then
	for i = 1 to vardim1(stTopTreadLevel)
	   if topTreadLevel = stTopTreadLevel[i]	then topTreadLevel_m = i
	next i
	parameters topTreadLevel_m = topTreadLevel_m
else
	parameters topTreadLevel = stTopTreadLevel[topTreadLevel_m]
endif

values "stairBaseType"	stStairBaseType			! Concrete, Wood, None
values "stairBaseType_m" 1, 2, 3
if GLOB_MODPAR_NAME = "stairBaseType" then
	stairBaseType_m = 1
	for i = 1 to vardim1(stStairBaseType)
	   if stairBaseType = stStairBaseType[i]	then stairBaseType_m = i
	next i
	parameters stairBaseType_m = stairBaseType_m
else
	stairBaseType_m = max(1, min(stairBaseType_m, vardim1(stStairBaseType)))
	stairBaseType = stStairBaseType[stairBaseType_m]
	parameters stairBaseType = stairBaseType, stairBaseType_m = stairBaseType_m
endif

! ====================================================================
! 2D Text
! ====================================================================

! ---------- Rise & Run Text ----------

values "gs_RiseRunText" stRiseRunText
values "iRiseRunText" 1, 2, 3, 4, 5, 6, 99

if GLOB_MODPAR_NAME = "gs_RiseRunText" then
	for i = 1 to vardim1(stRiseRunText)
	   if gs_RiseRunText = stRiseRunText[i]	then iRiseRunText = i
	next i
	if gs_RiseRunText = stRiseRunText[7]	then iRiseRunText = 99
	parameters iRiseRunText = iRiseRunText
else
	if iRiseRunText = 99 then
		gs_RiseRunText = stRiseRunText[7]
	else
		gs_RiseRunText = stRiseRunText[max(1, min(iRiseRunText, vardim1(stRiseRunText)) )]
	endif
	parameters gs_RiseRunText = gs_RiseRunText
endif

values "typeTextRotation_RiseRun" stTextOrientation[3],stTextOrientation[1]	! Readable, Align with Symbol
if GLOB_MODPAR_NAME = "typeTextRotation_RiseRun" then
	for i = 1 to 3
		if typeTextRotation_RiseRun = stTextOrientation[i]	then typeTextRotation_RiseRun_m = i-1
	next i
	parameters typeTextRotation_RiseRun_m = typeTextRotation_RiseRun_m
else
	parameters typeTextRotation_RiseRun = stTextOrientation[typeTextRotation_RiseRun_m+1]
endif

! ---------- Numbering ----------

values "typeTextRotation_Num" stTextOrientation[3],stTextOrientation[1]	! Readable, Align with Symbol
if GLOB_MODPAR_NAME = "typeTextRotation_Num" then
	for i = 1 to 3
		if typeTextRotation_Num = stTextOrientation[i]	then typeTextRotation_Num_m = i-1
	next i
	parameters typeTextRotation_Num_m = typeTextRotation_Num_m
else
	parameters typeTextRotation_Num = stTextOrientation[typeTextRotation_Num_m+1]
endif

! ---------- UP & Down ----------

values "walkingDirUPDN" stWalkingDirUPDN			! None, Up, Down at Bottom, Down at Top, Both, Both Sensitive
values "walkingDirUPDN_m" 1, 2, 3, 4, 5, 6
if GLOB_MODPAR_NAME = "walkingDirUPDN" then
	walkingDirUPDN_m = 1
	for i = 1 to vardim1(stWalkingDirUPDN)
	   if walkingDirUPDN = stWalkingDirUPDN[i]	then walkingDirUPDN_m = i
	next i
	parameters walkingDirUPDN_m = walkingDirUPDN_m
else
	walkingDirUPDN_m = max(1, min(walkingDirUPDN_m, vardim1(stWalkingDirUPDN)))
	walkingDirUPDN = stWalkingDirUPDN[walkingDirUPDN_m]
	parameters walkingDirUPDN = walkingDirUPDN, walkingDirUPDN_m = walkingDirUPDN_m
endif

values "typeTextRotation_UpDn" stTextOrientation[3],stTextOrientation[2],stTextOrientation[1]	! Readable, Parallel with, Align with Symbol
if GLOB_MODPAR_NAME = "typeTextRotation_UpDn" then
	for i = 1 to 3
		if typeTextRotation_UpDn = stTextOrientation[i]	then typeTextRotation_UpDn_m = i-1
	next i
	parameters typeTextRotation_UpDn_m = typeTextRotation_UpDn_m
else
	parameters typeTextRotation_UpDn = stTextOrientation[typeTextRotation_UpDn_m+1]
endif

VALUES "lineTypeAboveBreak" stLineTypeAboveBreak
if GLOB_MODPAR_NAME = "lineTypeAboveBreak" then
	for i = 1 to vardim1(stLineTypeAboveBreak)
	   if lineTypeAboveBreak = stLineTypeAboveBreak[i]	then lineTypeAboveBreak_m = i
	next i
	parameters lineTypeAboveBreak_m = lineTypeAboveBreak_m
else
	parameters lineTypeAboveBreak = stLineTypeAboveBreak[lineTypeAboveBreak_m]
endif

VALUES "arrow_style" 	stArrowHeadStyles		! Style 1 - 9
values "arrow_style_m" 1, 2, 3, 4, 5, 6, 7, 8, 9
if GLOB_MODPAR_NAME = "arrow_style" then
	for i = 1 to vardim1(stArrowHeadStyles)
	   if arrow_style = stArrowHeadStyles[i]	then arrow_style_m = i
	next i
	parameters arrow_style_m = arrow_style_m
else
	parameters arrow_style = stArrowHeadStyles[arrow_style_m]
endif

values "gs_StartEndStyle"	stStartSymbolStyles			! Style 1, Style 2, Style 3, None
values "gs_StartEndStyle_m" 1, 2, 3, 4
if GLOB_MODPAR_NAME = "gs_StartEndStyle" then
	gs_StartEndStyle_m = 1
	for i = 1 to vardim1(stStartSymbolStyles)
	   if gs_StartEndStyle = stStartSymbolStyles[i]	then gs_StartEndStyle_m = i
	next i
	parameters gs_StartEndStyle_m = gs_StartEndStyle_m
else
	gs_StartEndStyle_m = max(1, min(gs_StartEndStyle_m, vardim1(stStartSymbolStyles)))
	gs_StartEndStyle = stStartSymbolStyles[gs_StartEndStyle_m]
	parameters gs_StartEndStyle = gs_StartEndStyle, gs_StartEndStyle_m = gs_StartEndStyle_m
endif

if bSimpleZigZag then
	VALUES "breakline_style" stBreaklineStyle[1],stBreaklineStyle[3]	! Straight, Zigzag CHI
	values "breakline_style_m" 1, 3
else
	VALUES "breakline_style" stBreaklineStyle[1],stBreaklineStyle[2]	! Straight, Zigzag
	values "breakline_style_m" 1, 2
endif
if GLOB_MODPAR_NAME = "breakline_style" then
	for i = 1 to vardim1(stBreaklineStyle)
	   if breakline_style = stBreaklineStyle[i]	then breakline_style_m = i
	next i
	parameters breakline_style_m = breakline_style_m
else
	parameters breakline_style = stBreaklineStyle[breakline_style_m]
endif

!values "gs_BreakHeight" range (0,ZZYZX - treadDepth)
VALUES "breakLineWidth"	RANGE (0,treadDepth]

! ====================================================================
! Rail
! ====================================================================

values "rail_m" 1, 2, 3, 4
if GLOB_MODPAR_NAME = "bRightRail" or GLOB_MODPAR_NAME = "bLeftRail" then
	if bRightRail then
		if bLeftRail then
			rail_m = RAILPOS_BOTH
		else
			rail_m = RAILPOS_RIGHT
		endif
	else
		if bLeftRail then
			rail_m = RAILPOS_LEFT
		else
			rail_m = RAILPOS_NONE
		endif
	endif
	parameters rail_m = rail_m
else
	if rail_m = 1 then
		bRightRail	= 1
		bLeftRail	= 1
	endif
	if rail_m = 2 then
		bRightRail	= 1
		bLeftRail	= 0
	endif
	if rail_m = 3 then
		bRightRail	= 0
		bLeftRail	= 1
	endif
	if rail_m = 4 then
		bRightRail	= 0
		bLeftRail	= 0
	endif
	parameters bRightRail	= bRightRail
	parameters bLeftRail	= bLeftRail
endif

if NOT(bRightRail) then
	lock			"rightRailType"
	hideparameter	"rightRailType"
endif
if NOT(bLeftRail) then
	lock			"leftRailType"
	hideparameter	"leftRailType"
endif

VALUES "rightRailType" 	stRailTypes[1],
						stRailTypes[2],
						stRailTypes[3],
						stRailTypes[4],
						stRailTypes[5],
						stRailTypes[6],
						stRailTypes[7],
						stRailTypes[8],
						stRailTypes[9],
						stRailTypes[10]

if GLOB_MODPAR_NAME = "rightRailType" then
	for i = 1 to vardim1(stRailTypes)
	   if rightRailType = stRailTypes[i]	then rightRailType_m = i
	next i
	parameters rightRailType_m = rightRailType_m
else
	parameters rightRailType = stRailTypes[rightRailType_m]
endif

if rail_m = RAILPOS_BOTH then		! Both
	VALUES "leftRailType" 	stRailTypes
else
	VALUES "leftRailType" 	stRailTypes[1],
							stRailTypes[2],
							stRailTypes[3],
							stRailTypes[4],
							stRailTypes[5],
							stRailTypes[6],
							stRailTypes[7],
							stRailTypes[8],
							stRailTypes[9],
							stRailTypes[10]
endif
if GLOB_MODPAR_NAME = "leftRailType" then
	for i = 1 to vardim1(stRailTypes)
	   if leftRailType = stRailTypes[i]	then leftRailType_m = i
	next i
	parameters leftRailType_m = leftRailType_m
else
	parameters leftRailType = stRailTypes[leftRailType_m]
endif
bSameRails = (leftRailType_m = RAIL_SAMERAILS)
parameters bSameRails = bSameRails

values "rightWireType" stWireType	! Rectangular, Round
values "leftWireType" stWireType	! Rectangular, Round

if GLOB_MODPAR_NAME = "leftWireType" then
	for i = 1 to vardim1(stWireType)
	   if leftWireType = stWireType[i]	then leftWireType_m = i
	next i
	parameters leftWireType_m = leftWireType_m
else
	parameters leftWireType = stWireType[leftWireType_m]
endif

if GLOB_MODPAR_NAME = "rightWireType" then
	for i = 1 to vardim1(stWireType)
	   if rightWireType = stWireType[i]	then rightWireType_m = i
	next i
	parameters rightWireType_m = rightWireType_m
else
	parameters rightWireType = stWireType[rightWireType_m]
endif

if rightRailType_m = 2 THEN
	values "nBarsRightRail" 2,3,4,5,6
else
	values "nBarsRightRail" 1,2,3,4,5,6
endif
if leftRailType_m = 2 | bSameRails & rightRailType_m = 2 THEN
	values "nBarsLeftRail" 2,3,4,5,6
else
	values "nBarsLeftRail" 1,2,3,4,5,6
endif

! --- HIDE RAILING PARAMETERS ---

LOCK "ggr","sgr","ggl","sgl"

IF leftRailType_m = RAIL_BALUSTRADE THEN
	HIDEPARAMETER	"leftRailPostSize",
					"nBarsLeftRail"
ENDIF
IF leftRailType_m = RAIL_PARALLEL_BARS THEN
	HIDEPARAMETER	"leftRailBarThk",
					"leftRailPostSize"
ENDIF
IF leftRailType_m = RAIL_SIMPLE_BAR THEN
	HIDEPARAMETER	"leftRailBarThk",
					"leftRailPostSize",
					"nBarsLeftRail"
ENDIF
IF leftRailType_m = RAIL_SOLID_FRAME_FILLED THEN
	HIDEPARAMETER	"leftRailPostSize",
					"leftRailBarDepth",
					"nBarsLeftRail"
ENDIF
IF leftRailType_m = RAIL_SOLID_FRAME THEN
	HIDEPARAMETER	"leftRailPostSize",
					"leftRailBarDepth",
					"nBarsLeftRail",
					"leftRailBarThk"
ENDIF
IF leftRailType_m = RAIL_SOLID THEN
	HIDEPARAMETER	"leftRailPostSize",
					"leftRailBarDepth",
					"nBarsLeftRail",
					"leftRailBarThk"
ENDIF
IF leftRailType_m = RAIL_WIRED THEN
	HIDEPARAMETER	"leftRailBarDepth"
	if leftWireType_m = 1 then HIDEPARAMETER	"leftRailWireDiam"
	if leftWireType_m = 2 then HIDEPARAMETER	"leftRailWireThk",
												"leftRailWireDepth"
else
	HIDEPARAMETER	"leftWireType",
					"leftRailWireThk",
					"leftRailWireDepth",
					"leftRailWireDiam"
ENDIF
IF leftRailType_m = RAIL_WOODEN_BALUSTRADE THEN
	HIDEPARAMETER	"leftRailPostSize",
					"leftRailBarDepth",
					"nBarsLeftRail",
					"leftRailBarThk"
ENDIF



IF rightRailType_m = RAIL_BALUSTRADE THEN
	HIDEPARAMETER	"rightRailPostSize",
					"nBarsRightRail"
ENDIF
IF rightRailType_m = RAIL_PARALLEL_BARS THEN
	HIDEPARAMETER	"rightRailBarThk",
					"rightRailPostSize"
ENDIF
IF rightRailType_m = RAIL_SIMPLE_BAR THEN
	HIDEPARAMETER	"rightRailBarThk",
					"rightRailPostSize",
					"nBarsRightRail"
ENDIF
IF rightRailType_m = RAIL_SOLID_FRAME_FILLED THEN
	HIDEPARAMETER	"rightRailPostSize",
					"rightRailBarDepth",
					"nBarsRightRail"
ENDIF
IF rightRailType_m = RAIL_SOLID_FRAME THEN
	HIDEPARAMETER	"rightRailPostSize",
					"rightRailBarDepth",
					"nBarsRightRail",
					"rightRailBarThk"
ENDIF
IF rightRailType_m = RAIL_SOLID THEN
	HIDEPARAMETER	"rightRailPostSize",
					"rightRailBarDepth",
					"nBarsRightRail",
					"rightRailBarThk"
ENDIF
IF rightRailType_m = RAIL_WIRED THEN
	HIDEPARAMETER	"rightRailBarDepth"
	if rightWireType_m = 1 then HIDEPARAMETER	"rightRailWireDiam"
	if rightWireType_m = 2 then HIDEPARAMETER	"rightRailWireThk",
												"rightRailWireDepth"
else
	HIDEPARAMETER	"rightWireType",
					"rightRailWireThk",
					"rightRailWireDepth",
					"rightRailWireDiam"
ENDIF
IF rightRailType_m = RAIL_WOODEN_BALUSTRADE THEN
	HIDEPARAMETER	"rightRailPostSize",
					"rightRailBarDepth",
					"nBarsRightRail",
					"rightRailBarThk"
ENDIF

IF rail_m = RAILPOS_NONE | rail_m = RAILPOS_LEFT THEN		! None, Left
	HIDEPARAMETER "rightRailType", "ggr", "rightRailHeight", "rightRailDist", "rightRailOffset", "sgr",
		"rightRailFrameThk", "rightRailBarThk"
ENDIF
IF rail_m = RAILPOS_NONE | rail_m = RAILPOS_RIGHT THEN		! None, Right
	HIDEPARAMETER "leftRailType", "ggl", "leftRailHeight", "leftRailDist", "leftRailOffset", "sgl",
		"leftRailFrameThk", "leftRailBarThk"
ENDIF

IF rail_m = RAILPOS_NONE THEN HIDEPARAMETER "matPost","matHandrail","matSurface","matBar"		! None

IF bSameRails or NOT(bLeftRail) THEN
	HIDEPARAMETER	"ggl",
					"leftRailHeight",
					"leftRailDist",
					"leftRailOffset",
					"sgl",
					"leftRailHeight",
					"leftRailDist",
					"leftRailOffset",
					"leftRailOvhgBottom",
					"leftRailWireDiam",
					"leftWireType",
					"leftRailWireThk",
					"leftRailWireDepth",
					"leftRailOvhgTop",
					"leftRailPostSize",
					"leftRailFrameThk",
					"nBarsLeftRail",
					"leftRailBarThk",
					"leftRailBarDepth"
ENDIF
IF NOT(bRightRail) THEN
	HIDEPARAMETER	"ggr",
					"rightRailHeight",
					"rightRailDist",
					"rightRailOffset",
					"sgr",
					"rightRailHeight",
					"rightRailDist",
					"rightRailOffset",
					"rightRailOvhgBottom",
					"rightRailWireDiam",
					"rightWireType",
					"rightRailWireThk",
					"rightRailWireDepth",
					"rightRailOvhgTop",
					"rightRailPostSize",
					"rightRailFrameThk",
					"nBarsRightRail",
					"rightRailBarThk",
					"rightRailBarDepth"
ENDIF

! ==============================================================================
! Symbolic 2D
! ==============================================================================

values "postSymbolType" stPostSymbolType
values "iPostSymbolType" 1, 2, 3, 4, 0
if GLOB_MODPAR_NAME = "postSymbolType" then
	iPostSymbolType = 1
	if postSymbolType = stPostSymbolType[2] then iPostSymbolType = 2
	if postSymbolType = stPostSymbolType[3] then iPostSymbolType = 3
	if postSymbolType = stPostSymbolType[4] then iPostSymbolType = 4
	if postSymbolType = stPostSymbolType[5] then iPostSymbolType = 0
	parameters iPostSymbolType = iPostSymbolType
else
	postSymbolType = stPostSymbolType[1]
	if iPostSymbolType = 2 then postSymbolType = stPostSymbolType[2]
	if iPostSymbolType = 3 then postSymbolType = stPostSymbolType[3]
	if iPostSymbolType = 4 then postSymbolType = stPostSymbolType[4]
	if iPostSymbolType = 0 then postSymbolType = stPostSymbolType[5]
	parameters postSymbolType = postSymbolType
endif

if NOT(bShowRailOnFloorPlan) then
	lock			"railLineType",
					"railPen",
					"bSymbolic2D",
					"postSymbolType",
					"iPostSymbolType",
					"postLineType",
					"postPen",
					"bShowRailAboveBreakLine"
	hideparameter	"railLineType",
					"railPen",
					"bSymbolic2D",
					"postSymbolType",
					"iPostSymbolType",
					"postLineType",
					"postPen",
					"bShowRailAboveBreakLine"
endif
if NOT(iPostSymbolType) then
	lock			"postLineType",
					"postPen"
	hideparameter	"postLineType",
					"postPen"
endif
if NOT(bSymbolic2D) then
	lock			"postSymbolType",
					"iPostSymbolType",
					"postLineType",
					"postPen"
	hideparameter	"postSymbolType",
					"iPostSymbolType",
					"postLineType",
					"postPen"
endif
if not(bShowRailAxis) then
	lock 			"railAxisLineType",
					"gs_RailAxisPen"
	hideparameter	"railAxisLineType",
					"gs_RailAxisPen"
endif
if	gs_detlevel_2D_m = DET2D_CUSTOM &\
	(gs_SymbolType_m = 3 |\
	gs_SymbolType_m = 8 |\
	gs_SymbolType_m = 15) then
	lock			"bShowRailAboveBreakLine"
	hideparameter	"bShowRailAboveBreakLine"
endif
if NOT(bShowCarriage) then
	lock			"iShowCarriageUpTo",
					"stShowCarriageUpTo",
					"carriageLineType",
					"carriagePen"
	hideparameter	"stShowCarriageUpTo",
					"carriageLineType",
					"carriagePen"
endif
if NOT(bEnableCarriageLine) then
	lock			"bShowCarriage",
					"iShowCarriageUpTo",
					"stShowCarriageUpTo",
					"carriageLineType",
					"carriagePen"
	hideparameter	"bShowCarriage",
					"stShowCarriageUpTo",
					"carriageLineType",
					"carriagePen"
endif

values "stShowCarriageUpTo" stShowCarriageValues
values "iShowCarriageUpTo" 1, 20, 50, 100, 200

if GLOB_MODPAR_NAME = "stShowCarriageUpTo" then
	iShowCarriageUpTo = 1
	if stShowCarriageUpTo = stShowCarriageValues[2]	then iShowCarriageUpTo = 20
	if stShowCarriageUpTo = stShowCarriageValues[3]	then iShowCarriageUpTo = 50
	if stShowCarriageUpTo = stShowCarriageValues[4]	then iShowCarriageUpTo = 100
	if stShowCarriageUpTo = stShowCarriageValues[5]	then iShowCarriageUpTo = 200
	parameters iShowCarriageUpTo = iShowCarriageUpTo
else
	stShowCarriageUpTo = stShowCarriageValues[1]
	if iShowCarriageUpTo = 20	then stShowCarriageUpTo = stShowCarriageValues[2]
	if iShowCarriageUpTo = 50	then stShowCarriageUpTo = stShowCarriageValues[3]
	if iShowCarriageUpTo = 100	then stShowCarriageUpTo = stShowCarriageValues[4]
	if iShowCarriageUpTo = 200	then stShowCarriageUpTo = stShowCarriageValues[5]
	parameters stShowCarriageUpTo = stShowCarriageUpTo
endif

! ====================================================================
! End Of Rail
! ====================================================================

! --- CONTROLED PARAMETERS ---

VALUES "treadHeight"	RANGE [0.05,)
VALUES "treadDepth" 	RANGE [0.1, )
VALUES "B" RANGE (0,)

! -------- Pen Settings --------
dim iPenNumber[255]
for i=1 to 255
	iPenNumber[i]=i
next i

values "gs_cont_pen"		iPenNumber
values "gs_DashLinePen"		iPenNumber
values "railPen"			iPenNumber
values "gs_RailAxisPen"		iPenNumber
values "postPen"			iPenNumber
values "carriagePen"		iPenNumber
values "gs_fill_pen"		iPenNumber
values "gs_wLinePen"		iPenNumber
values "gs_NumTextPen"		iPenNumber
values "gs_text_pen"		iPenNumber
values "UPDNfontpen"		iPenNumber
values "gs_desc_text_pen"	iPenNumber
values "gs_LinePenStUp"		iPenNumber

IF bRiserCover=0 THEN HIDEPARAMETER "riserCoverThk","matRiser"

IF treadThickness<0.0001 THEN HIDEPARAMETER "matTread"

! ==============================================================================
! Settings of 2D Symbol Type
! ==============================================================================

! --- GENERAL SETTINGS ---
!"DirRiseRunText_X","DirRiseRunText_Y","DirRiseRunAngle",
	LOCK	"gs_ArrowFill","gs_ArrowHeight","gs_ArrowHalfWidth",
			"gs_StartEndFill","gs_StartWidth","gs_StartHeight",
			"DirNumText_X","DirNumText_Y",
			
			"DirUPDN_X","DirUPDN_Y","AngUPDN",
			"bSameRails","breakLineWidth"

	IF bShowWalkLine=0 THEN
		 HIDEPARAMETER 	"gs_wLineType1","gs_wLineTypeAbove",
						"gs_wLinePen","arrow_style","gs_ArrowFillPen","gs_ArrowFillPenAbove", "bShowWalkLineAboveBreakline", "gs_circleRadius",
						"gs_StartEndStyle","gs_StartEndFillPen","bShowRiseAndRunText","walkingDirUPDN","UPDNfontsize","gs_text_size_pt_UpDn"

		 LOCK	"gs_wLineType1","gs_wLineTypeAbove",
				"gs_wLinePen","arrow_style","gs_ArrowFillPen","gs_ArrowFillPenAbove", "bShowWalkLineAboveBreakline", "gs_circleRadius",
				"gs_StartEndStyle","gs_StartEndFillPen","bShowRiseAndRunText","walkingDirUPDN","UPDNfontsize","gs_text_size_pt_UpDn"
	ENDIF

	IF arrow_style_m = 1 | arrow_style_m = 2 | arrow_style_m = 3 THEN
		 lock 	"gs_ArrowFillPen","gs_ArrowFillPenAbove"
		 HIDEPARAMETER 	"gs_ArrowFillPen","gs_ArrowFillPenAbove"
	ENDIF

	IF gs_StartEndStyle_m = 3 | gs_StartEndStyle_m = 4  THEN		! Style 3, None
		 HIDEPARAMETER 	"gs_StartEndFillPen"
	ENDIF

	if not(bShowNumbering)  then
		 lock 	"nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen", "typeTextRotation_Num"
		 hideparameter 	"nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen", "typeTextRotation_Num"
	endif

	if not(bShowRiseAndRunText) then
		lock 	"gs_RiseRunText","gs_CustomText1","gs_CustomText2","gs_customText_rise", "fontsize", "gs_text_size_pt", "typeTextRotation_RiseRun", "gs_text_pen", "bUseACLinearUnit"
		hideparameter 	"gs_RiseRunText","gs_CustomText1","gs_CustomText2", "gs_customText_rise", "fontsize", "gs_text_size_pt", "typeTextRotation_RiseRun", "gs_text_pen", "bUseACLinearUnit"
	endif

	if iRiseRunText < 99 then
		hideparameter 	"gs_CustomText1","gs_CustomText2"
		lock		 	"gs_CustomText1","gs_CustomText2"
	else
		if bLinearDimIsMetric then
			hideparameter 	"gs_CustomText2"
			lock		 	"gs_CustomText2"
		endif
	endif

	if iRiseRunText <> 5 & iRiseRunText <> 6 then
		lock "gs_customText_rise"
		hideparameter "gs_customText_rise"
	endif

	if walkingDirUPDN_m = 1 then	! None
		 lock 	"UPDNfontsize","gs_text_size_pt_UpDn", "UPDNfontpen","AngUPDN", "typeTextRotation_UpDn"
		 hideparameter 	"UPDNfontsize", "gs_text_size_pt_UpDn", "UPDNfontpen","AngUPDN", "typeTextRotation_UpDn"
	endif
	if walkingDirUPDN_m = 1 | walkingDirUPDN_m = 2 then	! None, Up
		lock "gs_CustomText_Down"
		hideparameter "gs_CustomText_Down"
	endif

	! --- SETTINGS BY SYMBOL TYPES ---

	if gs_detlevel_2D_m = DET2D_CUSTOM then
		IF gs_SymbolType_m = 1 THEN		! Type 1
			HIDEPARAMETER	"bShowNumbering","nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen",
							"gs_ArrowFillPenAbove","gs_FillAbove"

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=0
				PARAMETERS gs_BreaklineStUp=0
				PARAMETERS gs_TreadStUp=0
				PARAMETERS gs_numaStUp=0
			ENDIF

		ENDIF

		IF gs_SymbolType_m = 2 THEN		! Type 2
			HIDEPARAMETER 	"bShowNumbering","nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen",
							"gs_ArrowFillPenAbove","gs_FillAbove"

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=0
				PARAMETERS gs_BreaklineStUp=0
				PARAMETERS gs_TreadStUp=0
				PARAMETERS gs_numaStUp=0
			ENDIF

		ENDIF

		IF gs_SymbolType_m = 3 THEN		! Type 3
			HIDEPARAMETER 	"bShowNumbering","nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen",
							"gs_ArrowFillPenAbove","gs_FillAbove"

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=0
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=0
				PARAMETERS gs_numaStUp=0
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 4 THEN		! Type 4
			HIDEPARAMETER 	"bShowNumbering","nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen"

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=0
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=0
				PARAMETERS gs_numaStUp=0
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 5 THEN		! Type 5
			HIDEPARAMETER 	"bShowNumbering","nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen"

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=0
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=0
				PARAMETERS gs_numaStUp=0
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 6 THEN		! Type 6
			HIDEPARAMETER "gs_ArrowFillPenAbove","gs_FillAbove"

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=0
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 7 THEN		! Type 7
			HIDEPARAMETER 	"gs_ArrowFillPenAbove","gs_FillAbove"
			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=0
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 8 THEN		! Type 8
			HIDEPARAMETER 	"bShowNumbering","nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen",
							"gs_ArrowFillPenAbove","gs_FillAbove"

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 9 THEN		! Type 9
			HIDEPARAMETER 	"bShowNumbering","nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen"

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 10 THEN		! Type 10
			HIDEPARAMETER 	"bShowNumbering","nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen"
			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 11 THEN		! Type 11

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 12 THEN		! Type 12

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 13 THEN		! Type 13
			HIDEPARAMETER 	"gs_FillAbove"
			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=0
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 14 THEN		! Type 14
			HIDEPARAMETER 	"gs_FillAbove"
			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=0
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 15 THEN		! Type 15
			HIDEPARAMETER 	"bShowNumbering","nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen",
							"gs_FillAbove"

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 16 THEN		! Type 16
			HIDEPARAMETER 	"bShowNumbering","nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen"

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 17 THEN		! Type 17
			HIDEPARAMETER 	"bShowNumbering","nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen"

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 18 THEN		! Type 18

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 19 THEN		! Type 19

			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF

		IF gs_SymbolType_m = 20 THEN		! Type 20
			IF GLOB_MODPAR_NAME="gs_SymbolType" THEN
				PARAMETERS bShowNumbering=1
				PARAMETERS gs_BreaklineStUp=1
				PARAMETERS gs_LowerPartStUp=0
				PARAMETERS gs_UpperPartStUp=1
				PARAMETERS gs_TreadStUp=1
				PARAMETERS gs_numaStUp=1
			ENDIF
		ENDIF
	endif
	
! ======================================================================
! Above Home Story
! ======================================================================
IF not(bStorySensitive) THEN
	HIDEPARAMETER "gs_AboveHomeStory"
ELSE
	IF not(gs_BreaklineStUp) THEN HIDEPARAMETER "gs_LowerPartStUp","gs_UpperPartStUp"
	IF gs_BreaklineStUp | not(gs_TreadStUp) THEN HIDEPARAMETER "gs_numaStUp"
	IF not(gs_LowerPartStUp) & not(gs_UpperPartStUp) & gs_BreaklineStUp THEN HIDEPARAMETER "gs_TreadStUp"
ENDIF

! ==============================================================================
! mm / point conversion
! ==============================================================================

MM_IN_A_DOT = 25.4 / 72

if GLOB_MODPAR_NAME = "gs_text_size_pt_UpDn" then
	UPDNfontsize = gs_text_size_pt_UpDn * MM_IN_A_DOT
	parameters UPDNfontsize = UPDNfontsize
else
	gs_text_size_pt_UpDn = UPDNfontsize / MM_IN_A_DOT
	parameters gs_text_size_pt_UpDn = gs_text_size_pt_UpDn
endif

if GLOB_MODPAR_NAME = "gs_text_size_pt" then
	fontsize = gs_text_size_pt * MM_IN_A_DOT
	parameters fontsize = fontsize
else
	gs_text_size_pt = fontsize / MM_IN_A_DOT
	parameters gs_text_size_pt = gs_text_size_pt
endif

if GLOB_MODPAR_NAME = "gs_text_size_pt_num" then
	gs_NumTextSize = gs_text_size_pt_num * MM_IN_A_DOT
	parameters gs_NumTextSize = gs_NumTextSize
else
	gs_text_size_pt_num = gs_NumTextSize / MM_IN_A_DOT
	parameters gs_text_size_pt_num = gs_text_size_pt_num
endif

if GLOB_MODPAR_NAME = "gs_desc_text_size_pt" then
	gs_desc_text_size = gs_desc_text_size_pt * MM_IN_A_DOT
	parameters gs_desc_text_size = gs_desc_text_size
else
	gs_desc_text_size_pt = gs_desc_text_size / MM_IN_A_DOT
	parameters gs_desc_text_size_pt = gs_desc_text_size_pt
endif

! ---------------------------------------------------------------------------------------------------------------------
values "widthOverlapTread" range [0,treadDepth]
values "angleRiser" range [atn(treadHeight/treadDepth),90]

if 	(parameterType_m = 1 & (GLOB_MODPAR_NAME = "nRisers" | GLOB_MODPAR_NAME = "A" | GLOB_MODPAR_NAME = "ZZYZX")) | \
	(parameterType_m = 2 & (GLOB_MODPAR_NAME = "nRisers" | GLOB_MODPAR_NAME = "treadHeight" | GLOB_MODPAR_NAME = "treadDepth")) then
	angleRiser = atn(treadHeight/widthOverlapTread)
endif
if GLOB_MODPAR_NAME = "angleRiser" then
	widthOverlapTread = treadHeight/tan(angleRiser)
endif
if GLOB_MODPAR_NAME = "B" | GLOB_MODPAR_NAME = "widthStringer" then
	widthFreeFlight = B - widthStringer*2
endif
if GLOB_MODPAR_NAME = "widthFreeFlight" then
	B =  widthFreeFlight + widthStringer*2
endif

parameters 	angleRiser 			= angleRiser,
			widthOverlapTread 	= widthOverlapTread ,
			widthFreeFlight 	= widthFreeFlight ,
			B 					= B
if typeNose = stTypeNose[3] then
	values "lengthNose" range [max(thickRiser/sin(angleRiser)+thickRiser/tan(angleRiser),depthChamfer+thickRiser), )
else
	values "lengthNose" range [thickRiser/sin(angleRiser)+thickRiser/tan(angleRiser), )
endif
values "typeStringer"	stTypeStringer
values "typeStringer_m" 1, 2, 3, 4, 5, 6, 7, 8

if GLOB_MODPAR_NAME = "typeStringer" then
	typeStringer_m = 1
	for i = 2 to 8
		if typeStringer = stTypeStringer[i] then typeStringer_m = i
	next i
	parameters typeStringer_m = typeStringer_m
else
	typeStringer = stTypeStringer[max(1, min(typeStringer_m, vardim1(stTypeStringer)))]
	parameters typeStringer = typeStringer
endif

values "thickStringer"	range [0, widthStringer]
values "widthStringer"	range [2*thickStringer, ]
values "thickPan" range (0, treadHeight-thickRiser)
values "thickRiser" range (0,treadThickness)
values "heightStringer"	range [(treadHeight+treadThickness+thickPan)/sin(angleRiser)*sin(180-angleRiser-atn(zzyzx/a))+distNoseStringer, ]
values "radiusStringer" range (thickStringer, widthStringer/2]
values "treadThickness" range (thickRiser ,treadHeight-thickPan]

values "radiusFillet"	range [thickRiser/sin(angleRiser), min( treadThickness/(sin(150-2*angleRiser)+1), treadThickness , lengthNose/(2*cos(angleRiser-30)))]
if thickRiser/sin(angleRiser) >= min( treadThickness/(sin(150-2*angleRiser)+1), treadThickness, lengthNose/(2*cos(angleRiser-30))) then
	values "typeNose"		stTypeNose[1],stTypeNose[3]
	values "typeNose_m" 1, 3
else
	values "typeNose"		stTypeNose
	values "typeNose_m" 1, 2, 3
endif

if GLOB_MODPAR_NAME = "typeNose" then
	typeNose_m = 1
	if typeNose = stTypeNose[2] then typeNose_m = 2
	if typeNose = stTypeNose[3] then typeNose_m = 3
	parameters typeNose_m = typeNose_m
else
	typeNose = stTypeNose[max(1, min(typeNose_m, vardim1(stTypeNose)))]
	parameters typeNose = typeNose
endif



maxAngleChamfer	= 180
if angleChamfer < maxAngleChamfer then
	values "depthChamfer"	range [thickRiser*(1/tan(angleRiser)+1/tan(180-angleChamfer)), treadDepth]
else
	values "depthChamfer"	range [thickRiser*(1/tan(angleRiser)), treadDepth]
endif
values "angleChamfer"	range [atn(depthChamfer/treadThickness-1/tan(angleRiser))+90, 180]



if typeNose_m <> 2 then hideparameter "radiusFillet"
if typeNose_m <> 3 then hideparameter "angleChamfer", "depthChamfer"

if typeStringer_m = 1 | typeStringer_m = 3 | typeStringer_m = 5 then
	lock "thickStringer"
	hideparameter "thickStringer"
endif
if typeStringer_m < 3 | typeStringer_m > 4 then hideparameter "radiusStringer"


! --- Connecting integer and section pencolor type parameters ---

for i = 1 to 255
	put i
next i

values "penLineStringer" use(nsp)
values "penFillStringer" use(nsp)

if GLOB_MODPAR_NAME = "penLineStringer_m" then
	if penLineStringer_m < -1 | penLineStringer_m > 255 then
		penLineStringer_m = 1
		parameters penLineStringer_m = penLineStringer_m
	endif
	parameters penLineStringer = penLineStringer_m
else
	parameters penLineStringer_m = penLineStringer
endif
if GLOB_MODPAR_NAME = "penFillStringer_m" then
	if penFillStringer_m < -1 | penFillStringer_m > 255 then
		penFillStringer_m = 1
		parameters penFillStringer_m = penFillStringer_m
	endif
	parameters penFillStringer = penFillStringer_m
else
	parameters penFillStringer_m = penFillStringer
endif

values "penLineTread" use(nsp)
values "penFillTread" use(nsp)

if GLOB_MODPAR_NAME = "penLineTread_m" then
	if penLineTread_m < 1 | penLineTread_m > 255 then
		penLineTread_m = 1
		parameters penLineTread_m = penLineTread_m
	endif
	parameters penLineTread = penLineTread_m
else
	parameters penLineTread_m = penLineTread
endif
if GLOB_MODPAR_NAME = "penFillTread_m" then
	if penFillTread_m < 1 | penFillTread_m > 255 then
		penFillTread_m = 1
		parameters penFillTread_m = penFillTread_m
	endif
	parameters penFillTread = penFillTread_m
else
	parameters penFillTread_m = penFillTread
endif

values "penLineRiser" use(nsp)
values "penFillRiser" get(nsp)

if GLOB_MODPAR_NAME = "penLineRiser_m" then
	if penLineRiser_m < 1 | penLineRiser_m > 255 then
		penLineRiser_m = 1
		parameters penLineRiser_m = penLineRiser_m
	endif
	parameters penLineRiser = penLineRiser_m
else
	parameters penLineRiser_m = penLineRiser
endif
if GLOB_MODPAR_NAME = "penFillRiser_m" then
	if penFillRiser_m < 1 | penFillRiser_m > 255 then
		penFillRiser_m = 1
		parameters penFillRiser_m = penFillRiser_m
	endif
	parameters penFillRiser = penFillRiser_m
else
	parameters penFillRiser_m = penFillRiser
endif


if GLOB_MODPAR_NAME = "penBackFillStringer_m" then
	if penBackFillStringer_m < -1 | penBackFillStringer_m > 255 then
		penBackFillStringer_m = 1
		parameters penBackFillStringer_m = penBackFillStringer_m
	endif
	parameters penBackFillStringer = penBackFillStringer_m
else
	parameters penBackFillStringer_m = penBackFillStringer
endif

if GLOB_MODPAR_NAME = "penBackFillTread_m" then
	if penBackFillTread_m < -1 | penBackFillTread_m > 255 then
		penBackFillTread_m = 1
		parameters penBackFillTread_m = penBackFillTread_m
	endif
	parameters penBackFillTread = penBackFillTread_m
else
	parameters penBackFillTread_m = penBackFillTread
endif

if GLOB_MODPAR_NAME = "penBackFillRiser_m" then
	if penBackFillRiser_m < -1 | penBackFillRiser_m > 255 then
		penBackFillRiser_m = 1
		parameters penBackFillRiser_m = penBackFillRiser_m
	endif
	parameters penBackFillRiser = penBackFillRiser_m
else
	parameters penBackFillRiser_m = penBackFillRiser
endif

! =============================================================================
! Onorm list Settings
! =============================================================================

if LibraryLangCode = "AUT" or LibraryLangCode = "CHE" or LibraryLangCode = "GER" then
	call "Onorm_Stair" parameters all
else
	hideparameter "gs_onorm_Title", "gs_list_soundinsul"
endif

! =============================================================================
! IFC2x3 Property Set for Stairs
! =============================================================================

STRAIGHT_RUN_STAIR = 1
parameters ifc_StairType 		= STRAIGHT_RUN_STAIR
parameters ifc_NumberOfRiser 	= nRisers
! unused "topTreadLevel" parameter
parameters ifc_NumberOfTreads 	= nRisers
parameters ifc_RiserHeight		= treadHeight
parameters ifc_TreadLength		= treadDepth

]]>
</Script_VL>

<ParamSection SectVersion="22" SectionFlags="0" SubIdent="0">
	<ParamSectHeader>
		<AutoHotspots>false</AutoHotspots>
		<StatBits>
			<STBit_UIDefault/>
			<STBit_FixSize/>
			<STBit_UIUseHierarchicalPages/>
		</StatBits>
		<WDLeftFrame>0</WDLeftFrame>
		<WDRightFrame>0</WDRightFrame>
		<WDTopFrame>0</WDTopFrame>
		<WDBotFrame>0</WDBotFrame>
		<LayFlags>65534</LayFlags>
		<WDMirrorThickness>0</WDMirrorThickness>
		<WDWallInset>0</WDWallInset>
	</ParamSectHeader>
	<Parameters>
		<Length Name="A">
			<Description><![CDATA["Длина Марша"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Unique/>
			</Flags>
			<Value>5</Value>
		</Length>
		<Length Name="B">
			<Description><![CDATA["Ширина Марша"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Unique/>
			</Flags>
			<Value>1.2</Value>
		</Length>
		<Length Name="zzyzx">
			<Description><![CDATA["Общая Высота"]]></Description>
			<Fix/>
			<Value>3.1</Value>
		</Length>
		<Integer Name="gs_detlevel_3D_m">
			<Description><![CDATA["3D"]]></Description>
			<Value>2</Value>
		</Integer>
		<String Name="parameterType">
			<Description><![CDATA["Определение Размера"]]></Description>
			<Flags>
				<ParFlg_Unique/>
			</Flags>
			<Value><![CDATA["На Основе Размеров"]]></Value>
		</String>
		<String Name="topTreadLevel">
			<Description><![CDATA["Верхняя Ступень"]]></Description>
			<Flags>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<Value><![CDATA["Верхняя Ступень на Уровне Пола"]]></Value>
		</String>

		<!-- gs_tread: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_tread">
			<Description><![CDATA["Размеры Подступенков и Проступей"]]></Description>
		</Title>
		<Integer Name="nRisers">
			<Description><![CDATA["Количество Подступенков"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>18</Value>
		</Integer>
		<Length Name="treadDepth">
			<Description><![CDATA["Глубина Ступени"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0.277777777778</Value>
		</Length>
		<Length Name="treadHeight">
			<Description><![CDATA["Высота Ступени"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0.166666666667</Value>
		</Length>
		<Length Name="treadThickness">
			<Description><![CDATA["Толщина Защитного Слоя Проступи"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0.03</Value>
		</Length>
		<Length Name="nosing">
			<Description><![CDATA["Выступ"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Length Name="widthOverlapTread">
			<Description><![CDATA["Выступ Проступи"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0.0293878301181</Value>
		</Length>
		<Boolean Name="bRiser">
			<Description><![CDATA["Подступенок"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Angle Name="angleRiser">
			<Description><![CDATA["Угол Подступенка"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>80</Value>
		</Angle>
		<Boolean Name="bRiserCover">
			<Description><![CDATA["Защитный Слой Подступенка"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Length Name="riserCoverThk">
			<Description><![CDATA["Толщина Защитного Слоя Подступенка"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.02</Value>
		</Length>
		<String Name="stairBaseType">
			<Description><![CDATA["Тип Основания Лестницы"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<Value><![CDATA["Бетон"]]></Value>
		</String>
		<Integer Name="stairBaseType_m">
			<Description><![CDATA["Тип Основания Лестницы"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Length Name="stairSlabThk">
			<Description><![CDATA["Толщина Плиты Лестницы"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.2</Value>
		</Length>
		<Integer Name="nWoodCarriages">
			<Description><![CDATA["Номер Основания"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>2</Value>
		</Integer>
		<Length Name="woodCarriageOffsetRight">
			<Description><![CDATA["Смещение Основания Лестницы - Справа"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.15</Value>
		</Length>
		<Length Name="woodCarriageOffsetLeft">
			<Description><![CDATA["Смещение Основания Лестницы - Слева"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.15</Value>
		</Length>

		<!-- gs_metal_structure: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_metal_structure">
			<Description><![CDATA["Металлическая Конструкция"]]></Description>
		</Title>
		<Length Name="thickRiser">
			<Description><![CDATA["Толщина Ступени"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.01</Value>
		</Length>
		<Length Name="thickPan">
			<Description><![CDATA["Толщина Поддона"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.01</Value>
		</Length>
		<Length Name="lengthNose">
			<Description><![CDATA["Длина Выступа"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.02</Value>
		</Length>
		<String Name="typeNose">
			<Description><![CDATA["Выступ"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Острый"]]></Value>
		</String>
		<Integer Name="typeNose_m">
			<Description><![CDATA["Выступ"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Length Name="radiusFillet">
			<Description><![CDATA["Радиус Скругления"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.01</Value>
		</Length>
		<Angle Name="angleChamfer">
			<Description><![CDATA["Угол Скоса"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>100</Value>
		</Angle>
		<Length Name="depthChamfer">
			<Description><![CDATA["Расстояние Скоса"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.01</Value>
		</Length>
		<String Name="typeStringer">
			<Description><![CDATA["Тетива"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Цельный Стержень"]]></Value>
		</String>
		<Integer Name="typeStringer_m">
			<Description><![CDATA["Тетива"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Length Name="widthStringer">
			<Description><![CDATA["Ширина Тетивы"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.1</Value>
		</Length>
		<Length Name="heightStringer">
			<Description><![CDATA["Высота Тетивы"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.25</Value>
		</Length>
		<Length Name="thickStringer">
			<Description><![CDATA["Толщина Тетивы"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.01</Value>
		</Length>
		<Length Name="radiusStringer">
			<Description><![CDATA["Радиус Тетивы"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.02</Value>
		</Length>
		<Length Name="distNoseStringer">
			<Description><![CDATA["Выступ -Расстояние Вверху Тетивы"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.024</Value>
		</Length>
		<Length Name="widthFreeFlight">
			<Description><![CDATA["Свободная Ширина Марша"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Length>
		<Angle Name="cutAngleUpperEnd">
			<Description><![CDATA["Угол Подрезки Верхнего Конца"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>90</Value>
		</Angle>
		<Length Name="cutDistUpperEnd">
			<Description><![CDATA["Расстояние Скоса от Ступени"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.1</Value>
		</Length>
		<Angle Name="cutAngleLowerEnd">
			<Description><![CDATA["Угол Подрезки Нижнего Конца"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>90</Value>
		</Angle>
		<Length Name="cutDistLowerEnd">
			<Description><![CDATA["Расстояние Скоса от Подступенка"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.1</Value>
		</Length>
		<Integer Name="rail_m">
			<Description><![CDATA["Ограждение"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>

		<!-- bRightRail: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Boolean Name="bRightRail">
			<Description><![CDATA["Ограждение Справа"]]></Description>
			<Flags>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<String Name="rightRailType">
			<Description><![CDATA["Тип Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Балюстрада Ограждения"]]></Value>
		</String>
		<Integer Name="rightRailType_m">
			<Description><![CDATA["Ограждение Справа"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<String Name="ggr">
			<Description><![CDATA["Конструктивные Размеры"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<Length Name="rightRailHeight">
			<Description><![CDATA["Высота Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.8</Value>
		</Length>
		<Length Name="rightRailDist">
			<Description><![CDATA["Расстояние от Лестницы"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.1</Value>
		</Length>
		<Length Name="rightRailOffset">
			<Description><![CDATA["Смещение Правого Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="rightRailOvhgBottom">
			<Description><![CDATA["Выступ Ограждения Внизу"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="rightRailOvhgTop">
			<Description><![CDATA["Выступ Ограждения Вверху"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<String Name="sgr">
			<Description><![CDATA["Размеры Элементов Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<Length Name="rightRailPostSize">
			<Description><![CDATA["Размер Стоек"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Length Name="rightRailFrameThk">
			<Description><![CDATA["Толщина Рамы"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.04</Value>
		</Length>
		<Length Name="rightRailBarThk">
			<Description><![CDATA["Толщина Брусков"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.025</Value>
		</Length>
		<Length Name="rightRailBarDepth">
			<Description><![CDATA["Глубина Брусков"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.02</Value>
		</Length>
		<String Name="rightWireType">
			<Description><![CDATA["Тип Леера"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA["Прямоугольные"]]></Value>
		</String>
		<Integer Name="nBarsRightRail">
			<Description><![CDATA["Количество Брусков"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>4</Value>
		</Integer>
		<Length Name="rightRailWireDiam">
			<Description><![CDATA["Диаметр Леера"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.005</Value>
		</Length>
		<Length Name="rightRailWireThk">
			<Description><![CDATA["Толщина Леера"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.005</Value>
		</Length>
		<Length Name="rightRailWireDepth">
			<Description><![CDATA["Глубина Леера"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.005</Value>
		</Length>

		<!-- bLeftRail: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Boolean Name="bLeftRail">
			<Description><![CDATA["Ограждение Слева"]]></Description>
			<Flags>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<String Name="leftRailType">
			<Description><![CDATA["Тип Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Как и Правое"]]></Value>
		</String>
		<Integer Name="leftRailType_m">
			<Description><![CDATA["Ограждение Слева"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>11</Value>
		</Integer>
		<Boolean Name="bSameRails">
			<Description><![CDATA["Как и Правое Ограждение"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<String Name="ggl">
			<Description><![CDATA["Конструктивные Размеры"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<Length Name="leftRailHeight">
			<Description><![CDATA["Высота Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.8</Value>
		</Length>
		<Length Name="leftRailDist">
			<Description><![CDATA["Расстояние от Перекрытия/Лестницы"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.1</Value>
		</Length>
		<Length Name="leftRailOffset">
			<Description><![CDATA["Смещение Левого Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="leftRailOvhgBottom">
			<Description><![CDATA["Выступ Ограждения Внизу"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="leftRailOvhgTop">
			<Description><![CDATA["Выступ Ограждения Вверху"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<String Name="sgl">
			<Description><![CDATA["Размеры Элементов Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<Length Name="leftRailPostSize">
			<Description><![CDATA["Размер Стоек"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Length Name="leftRailFrameThk">
			<Description><![CDATA["Толщина Рамы"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.04</Value>
		</Length>
		<Length Name="leftRailBarThk">
			<Description><![CDATA["Толщина Брусков"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.025</Value>
		</Length>
		<Length Name="leftRailBarDepth">
			<Description><![CDATA["Глубина Брусков"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.02</Value>
		</Length>
		<String Name="leftWireType">
			<Description><![CDATA["Тип Леера"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA["Прямоугольные"]]></Value>
		</String>
		<Integer Name="nBarsLeftRail">
			<Description><![CDATA["Количество Брусков"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>4</Value>
		</Integer>
		<Length Name="leftRailWireDiam">
			<Description><![CDATA["Диаметр Леера"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.005</Value>
		</Length>
		<Length Name="leftRailWireThk">
			<Description><![CDATA["Толщина Леера"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.005</Value>
		</Length>
		<Length Name="leftRailWireDepth">
			<Description><![CDATA["Глубина Леера"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.005</Value>
		</Length>

		<!-- gs_3D_representation: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_3D_representation">
			<Description><![CDATA["3D-отображение"]]></Description>
		</Title>
		<Boolean Name="gs_shadow">
			<Description><![CDATA["Отбрасывание Теней"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>

		<!-- gs_2D_representation: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_2D_representation">
			<Description><![CDATA["2D-отображение"]]></Description>
			<Fix/>
		</Title>
		<Integer Name="gs_detlevel_2D_m">
			<Description><![CDATA["2D-детализация"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Integer Name="iScaleChangeSM">
			<Description><![CDATA["Простой/Средний Масштаб изменяется в"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>999</Value>
		</Integer>
		<Integer Name="gs_ScaleChangeSM">
			<Description><![CDATA["Простой/Средний Масштаб изменяется в"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>100</Value>
		</Integer>
		<Integer Name="iScaleChangeMD">
			<Description><![CDATA["Средний/Детальный Масштаб изменяется в"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>999</Value>
		</Integer>
		<Integer Name="gs_ScaleChangeMD">
			<Description><![CDATA["Средний/Детальный Масштаб изменяется в"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>50</Value>
		</Integer>

		<!-- Symbol2D: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="Symbol2D">
			<Description><![CDATA["2D-символ"]]></Description>
		</Title>
		<Integer Name="gs_SymbolType_m">
			<Description><![CDATA["Тип 2D-символа"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>11</Value>
		</Integer>
		<Integer Name="iSymbolGroup">
			<Description><![CDATA["Тип Группы Символа"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>6</Value>
		</Integer>
		<PenColor Name="gs_cont_pen">
			<Description><![CDATA["Перо Линий Видимых Конструкций"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>91</Value>
		</PenColor>
		<PenColor Name="gs_DashLinePen">
			<Description><![CDATA["Перо Линий Невидимых Конструкций"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>91</Value>
		</PenColor>
		<LineType Name="solid_line">
			<Description><![CDATA["Тип Линий Видимых Конструкций"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</LineType>
		<LineType Name="dash_line">
			<Description><![CDATA["Тип Линий Невидимых Конструкций"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>4</Value>
		</LineType>
		<Boolean Name="bShowRailOnFloorPlan">
			<Description><![CDATA["Показать Ограждение на Плане"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<LineType Name="railLineType">
			<Description><![CDATA["Тип Линии Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</LineType>
		<PenColor Name="railPen">
			<Description><![CDATA["Перо Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>82</Value>
		</PenColor>
		<Boolean Name="bShowRailAxis">
			<Description><![CDATA["Показать Ось Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<LineType Name="railAxisLineType">
			<Description><![CDATA["Тип Линии Оси Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>6</Value>
		</LineType>
		<PenColor Name="gs_RailAxisPen">
			<Description><![CDATA["Перо Линии Оси Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>71</Value>
		</PenColor>
		<Boolean Name="bSymbolic2D">
			<Description><![CDATA["Символический 2D"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<String Name="postSymbolType">
			<Description><![CDATA["Тип Символа Стойки"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Тип 1"]]></Value>
		</String>
		<Integer Name="iPostSymbolType">
			<Description><![CDATA["Тип Символа Стойки"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<LineType Name="postLineType">
			<Description><![CDATA["Тип Линии Стойки"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</LineType>
		<PenColor Name="postPen">
			<Description><![CDATA["Перо Линии Стойки"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>23</Value>
		</PenColor>
		<Boolean Name="bShowRailAboveBreakLine">
			<Description><![CDATA["Показать Ограждение выше Линии Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="bShowCarriage">
			<Description><![CDATA["Показать Тетиву на Плане Этажа"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<String Name="stShowCarriageUpTo">
			<Description><![CDATA["Показать Тетиву"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["До 1:50"]]></Value>
		</String>
		<Integer Name="iShowCarriageUpTo">
			<Description><![CDATA["Показать Тетиву"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>50</Value>
		</Integer>
		<LineType Name="carriageLineType">
			<Description><![CDATA["Линия Невидимой Тетивы"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</LineType>
		<PenColor Name="carriagePen">
			<Description><![CDATA["Перо Невидимой Тетивы"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>23</Value>
		</PenColor>
		<FillPattern Name="gs_fill_type">
			<Description><![CDATA["Штриховка Фона"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>65</Value>
		</FillPattern>
		<PenColor Name="gs_fill_pen">
			<Description><![CDATA["Перо Штриховки"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>19</Value>
		</PenColor>
		<PenColor Name="gs_back_pen">
			<Description><![CDATA["Перо Фона Штриховки"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>19</Value>
		</PenColor>
		<Boolean Name="gs_FillAbove">
			<Description><![CDATA["Штриховка Выше Линии Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<String Name="breakline_style">
			<Description><![CDATA["Стиль Линии Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA["Прямой"]]></Value>
		</String>
		<Boolean Name="bSimpleZigZag">
			<Description><![CDATA["Линия Разрыва в виде Простого Зигзага"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Length Name="gs_BreakHeight">
			<Description><![CDATA["Расположение Линии Разрыва (Высота)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Length>
		<Length Name="breakLineWidth">
			<Description><![CDATA["Ширина Линии Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.2</Value>
		</Length>
		<String Name="lineTypeAboveBreak">
			<Description><![CDATA["Тип Линии выше Линии Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
				<ParFlg_Hidden/>
			</Flags>
			<Value><![CDATA["Штриховая"]]></Value>
		</String>
		<Boolean Name="bShowWalkLine">
			<Description><![CDATA["Показать Линию Всхода"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="bShowWalkLineAboveBreakline">
			<Description><![CDATA["Линия Всхода выше Линии Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<LineType Name="gs_wLineType1">
			<Description><![CDATA["Тип Видимой Линии"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</LineType>
		<LineType Name="gs_wLineType2">
			<Description><![CDATA["Тип Линии"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>6</Value>
		</LineType>
		<LineType Name="gs_wLineTypeAbove">
			<Description><![CDATA["Тип Невидимой Линии"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>6</Value>
		</LineType>
		<PenColor Name="gs_wLinePen">
			<Description><![CDATA["Перо Линии"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>71</Value>
		</PenColor>
		<String Name="arrow_style">
			<Description><![CDATA["Стиль Стрелки"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA["Стиль 3"]]></Value>
		</String>
		<FillPattern Name="gs_ArrowFill">
			<Description><![CDATA["Тип Штриховки Стрелки"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>64</Value>
		</FillPattern>
		<PenColor Name="gs_ArrowFillPen">
			<Description><![CDATA["Перо Штриховки (0 - нет)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>91</Value>
		</PenColor>
		<PenColor Name="gs_ArrowFillPenAbove">
			<Description><![CDATA["Перо Штриховки Выше (0 - Нет)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>91</Value>
		</PenColor>
		<Length Name="gs_ArrowHeight">
			<Description><![CDATA["Высота Стрелки"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.2</Value>
		</Length>
		<Length Name="gs_ArrowHalfWidth">
			<Description><![CDATA["Половина Ширины Стрелки"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.2</Value>
		</Length>
		<String Name="gs_StartEndStyle">
			<Description><![CDATA["Символ в Начале"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA["Стиль 1"]]></Value>
		</String>
		<Integer Name="gs_StartEndStyle_m">
			<Description><![CDATA["Символ в Начале"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<FillPattern Name="gs_StartEndFill">
			<Description><![CDATA["Тип Штриховки Символа"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>64</Value>
		</FillPattern>
		<PenColor Name="gs_StartEndFillPen">
			<Description><![CDATA["Перо Штриховки (0 - нет)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</PenColor>
		<Length Name="gs_CircleRadius">
			<Description><![CDATA["Радиус Окружности"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.1</Value>
		</Length>
		<Length Name="gs_StartWidth">
			<Description><![CDATA["Половина Ширины Символа"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Length Name="gs_StartHeight">
			<Description><![CDATA["Половина Высоты Символа"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.15</Value>
		</Length>
		<Boolean Name="bShowNumbering">
			<Description><![CDATA["Показать Нумерацию"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Integer Name="nStartNumbering">
			<Description><![CDATA["Начать Нумерацию с"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<RealNum Name="gs_NumTextSize">
			<Description><![CDATA["Размер Шрифта (мм)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</RealNum>
		<RealNum Name="gs_text_size_pt_num">
			<Description><![CDATA["Размер Шрифта (пт)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>2.83</Value>
		</RealNum>
		<PenColor Name="gs_NumTextPen">
			<Description><![CDATA["Перо Текста"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>86</Value>
		</PenColor>
		<Length Name="DirNumText_X">
			<Description><![CDATA["Расположение Нумерации по X"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.1</Value>
		</Length>
		<Length Name="DirNumText_Y">
			<Description><![CDATA["Расположение Нумерации по Y"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<String Name="typeTextRotation_Num">
			<Description><![CDATA["Ориентация Текста в Символе"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Выровнять по Символу"]]></Value>
		</String>
		<Integer Name="typeTextRotation_Num_m">
			<Description><![CDATA["Ориентация Текста в Символе"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Integer>
		<Boolean Name="bShowRiseAndRunText">
			<Description><![CDATA["Текст Подступенков и Проступей"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<String Name="gs_RiseRunText">
			<Description><![CDATA["Текст"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Кол-во x Подступенок = Высота Марша"]]></Value>
		</String>
		<Integer Name="iRiseRunText">
			<Description><![CDATA["Текст"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<String Name="gs_CustomText1">
			<Description><![CDATA["Специальный Текст_1"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Специальный Текст_1"]]></Value>
		</String>
		<String Name="gs_CustomText2">
			<Description><![CDATA["Специальный Текст_2"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Специальный Текст_2"]]></Value>
		</String>
		<String Name="gs_customText_rise">
			<Description><![CDATA["Текст Подступенка"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["П"]]></Value>
		</String>
		<RealNum Name="fontsize">
			<Description><![CDATA["Размер Шрифта (мм)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</RealNum>
		<RealNum Name="gs_text_size_pt">
			<Description><![CDATA["Размер Шрифта (пт)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>2.83</Value>
		</RealNum>
		<PenColor Name="gs_text_pen">
			<Description><![CDATA["Перо Шрифта"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>86</Value>
		</PenColor>
		<Boolean Name="bUseACLinearUnit">
			<Description><![CDATA["Единицы Измерения Рабочей Среды Проекта"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Length Name="DirRiseRunText_X">
			<Description><![CDATA["Текст Подступенков и Проступей по X"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="DirRiseRunText_Y">
			<Description><![CDATA["Текст Подступенков и Проступей по Y"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.8</Value>
		</Length>
		<Angle Name="DirRiseRunAngle">
			<Description><![CDATA["Угол Поворота Текста Подступенков и Проступей"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Angle>
		<String Name="typeTextRotation_RiseRun">
			<Description><![CDATA["Ориентация Текста в Символе"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Читаемый"]]></Value>
		</String>
		<Integer Name="typeTextRotation_RiseRun_m">
			<Description><![CDATA["Ориентация Текста в Символе"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>2</Value>
		</Integer>
		<String Name="walkingDirUPDN">
			<Description><![CDATA["Размер Текста ВВЕРХ/ВНИЗ"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA["Нет"]]></Value>
		</String>
		<Integer Name="walkingDirUPDN_m">
			<Description><![CDATA["Размер Текста ВВЕРХ/ВНИЗ"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<String Name="gs_CustomText_Down">
			<Description><![CDATA["Текст Спуска"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["ВНИЗ"]]></Value>
		</String>
		<RealNum Name="UPDNfontsize">
			<Description><![CDATA["Размер Текста ВВЕРХ/ВНИЗ (мм)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>2</Value>
		</RealNum>
		<RealNum Name="gs_text_size_pt_UpDn">
			<Description><![CDATA["Размер Текста ВВЕРХ/ВНИЗ (точки)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>5.66</Value>
		</RealNum>
		<PenColor Name="UPDNfontpen">
			<Description><![CDATA["Текст ВВЕРХ/ВНИЗ"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>86</Value>
		</PenColor>
		<Length Name="DirUPDN_X">
			<Description><![CDATA["Горизонтальное Смещение Текста"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="DirUPDN_Y">
			<Description><![CDATA["Вертикальное Смещение Текста"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>-0.25</Value>
		</Length>
		<Angle Name="AngUPDN">
			<Description><![CDATA["Угол Текста ВВЕРХ/ВНИЗ"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Angle>
		<Length Name="DirUPDN_X_top">
			<Description><![CDATA["Горизонтальное Смещение Текста"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="DirUPDN_Y_top">
			<Description><![CDATA["Вертикальное Смещение Текста"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.25</Value>
		</Length>
		<Angle Name="AngUPDN_top">
			<Description><![CDATA["Угол Текста ВВЕРХ/ВНИЗ"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Angle>
		<String Name="typeTextRotation_UpDn">
			<Description><![CDATA["Ориентация Текста в Символе"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Выровнять по Символу"]]></Value>
		</String>
		<Integer Name="typeTextRotation_UpDn_m">
			<Description><![CDATA["Ориентация Текста в Символе"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Integer>
		<String Name="gs_description">
			<Description><![CDATA["Описание"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<RealNum Name="gs_desc_text_size">
			<Description><![CDATA["Размер Шрифта (мм)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</RealNum>
		<RealNum Name="gs_desc_text_size_pt">
			<Description><![CDATA["Размер Шрифта (пт)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>2.83</Value>
		</RealNum>
		<PenColor Name="gs_desc_text_pen">
			<Description><![CDATA["Перо Текста"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>23</Value>
		</PenColor>
		<String Name="fontType">
			<Description><![CDATA["Тип Шрифта"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA["Arial"]]></Value>
		</String>
		<Boolean Name="bStorySensitive">
			<Description><![CDATA["Зависит от Этажа"]]></Description>
			<Flags>
				<ParFlg_BoldName/>
			</Flags>
			<Value>0</Value>
		</Boolean>

		<!-- gs_AboveHomeStory: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_AboveHomeStory">
			<Description><![CDATA["2D выше Собственного Этажа"]]></Description>
		</Title>
		<Boolean Name="gs_BreaklineStUp">
			<Description><![CDATA["Линия Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="gs_LowerPartStUp">
			<Description><![CDATA["Нижняя Часть"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="gs_UpperPartStUp">
			<Description><![CDATA["Верхняя Часть"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="gs_TreadStUp">
			<Description><![CDATA["Показать Проступи"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<LineType Name="gs_LineTypeStUp">
			<Description><![CDATA["Тип Линии"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</LineType>
		<PenColor Name="gs_LinePenStUp">
			<Description><![CDATA["Перо Линии"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>71</Value>
		</PenColor>
		<LineType Name="gs_wLineTypeStUp">
			<Description><![CDATA["Тип Линии Всхода"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</LineType>
		<Boolean Name="gs_numaStUp">
			<Description><![CDATA["Показать Нумерацию"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="gs_txStUp">
			<Description><![CDATA["Текст Подступенков и Проступей"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Boolean>

		<!-- gs_section_attributes: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_section_attributes">
			<Description><![CDATA["Реквизиты Сечения"]]></Description>
		</Title>
		<PenColor Name="penLineStringer">
			<Description><![CDATA["Перо Линии Сечения Тетивы"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>29</Value>
		</PenColor>
		<Integer Name="penLineStringer_m">
			<Description><![CDATA["Перо Линии Сечения Тетивы"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>29</Value>
		</Integer>
		<FillPattern Name="typeFillStringer">
			<Description><![CDATA["Штриховка Сечения Тетивы"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>24</Value>
		</FillPattern>
		<PenColor Name="penFillStringer">
			<Description><![CDATA["Перо Штриховки Сечения Тетивы"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>109</Value>
		</PenColor>
		<Integer Name="penFillStringer_m">
			<Description><![CDATA["Перо Штриховки Тетивы в Сечении"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>109</Value>
		</Integer>
		<PenColor Name="penBackFillStringer">
			<Description><![CDATA["Перо Фона Штриховки Сечения Тетивы"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</PenColor>
		<Integer Name="penBackFillStringer_m">
			<Description><![CDATA["Перо Фона Штриховки Сечения Конструкций"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Integer>
		<PenColor Name="penLineTread">
			<Description><![CDATA["Перо Линии Сечения Проступи"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1</Value>
		</PenColor>
		<Integer Name="penLineTread_m">
			<Description><![CDATA["Перо Контура Сечения Проступи"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<FillPattern Name="typeFillTread">
			<Description><![CDATA["Штриховка Сечения Проступи"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>23</Value>
		</FillPattern>
		<PenColor Name="penFillTread">
			<Description><![CDATA["Перо Штриховки Сечения Проступи"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>109</Value>
		</PenColor>
		<Integer Name="penFillTread_m">
			<Description><![CDATA["Перо Штриховки Сечения Проступи"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>109</Value>
		</Integer>
		<PenColor Name="penBackFillTread">
			<Description><![CDATA["Перо Фона Штриховки Сечения Проступи"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>-1</Value>
		</PenColor>
		<Integer Name="penBackFillTread_m">
			<Description><![CDATA["Перо Фона Штриховки Сечения Проступи"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>-1</Value>
		</Integer>
		<PenColor Name="penLineRiser">
			<Description><![CDATA["Перо Линии Сечения Подступенка и Поддона"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1</Value>
		</PenColor>
		<Integer Name="penLineRiser_m">
			<Description><![CDATA["Перо Контура Сечения Подступенка"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<FillPattern Name="typeFillRiser">
			<Description><![CDATA["Штриховка Сечения Подступенка и Поддона"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>23</Value>
		</FillPattern>
		<PenColor Name="penFillRiser">
			<Description><![CDATA["Перо Штриховки Сечения Подступенка и Поддона"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>109</Value>
		</PenColor>
		<Integer Name="penFillRiser_m">
			<Description><![CDATA["Перо Штриховки Сечения Подступенка"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>109</Value>
		</Integer>
		<PenColor Name="penBackFillRiser">
			<Description><![CDATA["Перо Фона Штриховки Сечения Подступенка и Поддона"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>-1</Value>
		</PenColor>
		<Integer Name="penBackFillRiser_m">
			<Description><![CDATA["Перо Фона Штриховки Сечения Подступенка"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>-1</Value>
		</Integer>

		<!-- gs_material: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_material">
			<Description><![CDATA["Покрытия"]]></Description>
		</Title>
		<Material Name="matBase">
			<Description><![CDATA["Тетива"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>11</Value>
		</Material>
		<Material Name="matTread">
			<Description><![CDATA["Защитный Слой Проступи"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>14</Value>
		</Material>
		<Material Name="matRiser">
			<Description><![CDATA["Защитный Слой Подступенка"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>11</Value>
		</Material>
		<Material Name="matStringer">
			<Description><![CDATA["Тетива"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>14</Value>
		</Material>
		<Material Name="matPost">
			<Description><![CDATA["Стойка"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>59</Value>
		</Material>
		<Material Name="matHandrail">
			<Description><![CDATA["Поручень"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>59</Value>
		</Material>
		<Material Name="matSurface">
			<Description><![CDATA["Панели Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>14</Value>
		</Material>
		<Material Name="matBar">
			<Description><![CDATA["Прутья"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>59</Value>
		</Material>
		<Boolean Name="AC_show2DHotspotsIn3D">
			<Description><![CDATA["Показ Узловых 2D Точек в 3D"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Length Name="ac_bottomlevel">
			<Description><![CDATA["Отметка Низа"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Length>
		<Length Name="ac_toplevel">
			<Description><![CDATA["Отметка Верха"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Integer Name="parameterType_m">
			<Description><![CDATA["Определение Размера"]]></Description>
			<Flags>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Integer Name="topTreadLevel_m">
			<Description><![CDATA["Верхняя Ступень"]]></Description>
			<Flags>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Integer Name="lineTypeAboveBreak_m">
			<Description><![CDATA["Тип Линии выше Линии Разрыва"]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Integer Name="arrow_style_m">
			<Description><![CDATA["Стиль Стрелки"]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>3</Value>
		</Integer>
		<Integer Name="breakline_style_m">
			<Description><![CDATA["Стиль Линии Разрыва"]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Integer Name="rightWireType_m">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Integer Name="leftWireType_m">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Integer Name="gs_ui_current_page">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Angle Name="gs_readable_angle">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>90</Value>
		</Angle>
		<RealNum Name="gs_description_pos">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<ArrayValues FirstDimension="1" SecondDimension="3">
				<AVal Column="1" Row="1">0</AVal>
				<AVal Column="2" Row="1">0</AVal>
				<AVal Column="3" Row="1">0</AVal>
			</ArrayValues>
		</RealNum>

		<!-- gs_list: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_list">
			<Description><![CDATA["Параметры Спецификаций"]]></Description>
			<Fix/>
		</Title>
		<RealNum Name="gs_list_cost">
			<Description><![CDATA["Цена"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<String Name="gs_list_manufacturer">
			<Description><![CDATA["Производитель"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_note">
			<Description><![CDATA["Примечания"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_location">
			<Description><![CDATA["Расположение"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_accessories">
			<Description><![CDATA["Аксессуары"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_soundinsul">
			<Description><![CDATA["Звукоизоляция"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="FM_Type">
			<Description><![CDATA["Тип Группы"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Лестницы"]]></Value>
		</String>
		<Integer Name="iFMType">
			<Description><![CDATA["Тип Группы"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>6</Value>
		</Integer>
		<String Name="FM_InventoryNumber">
			<Description><![CDATA["Инвентарный Номер"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="FM_SerialNumber">
			<Description><![CDATA["Серийный Номер"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="FM_ProductionYear">
			<Description><![CDATA["Год Производства"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<RealNum Name="FM_ObjectWeight">
			<Description><![CDATA["Вес Изделия"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<String Name="FM_ObjectWeightUnit">
			<Description><![CDATA["Единица Веса"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["кг"]]></Value>
		</String>
		<RealNum Name="FM_Stories">
			<Description><![CDATA["Кол-во Этажей"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<RealNum Name="FM_HalfLandings">
			<Description><![CDATA["Кол-во Промежуточных Площадок"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<RealNum Name="FM_LevelHeight">
			<Description><![CDATA["Высота Уровня"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<RealNum Name="FM_HeadRoom">
			<Description><![CDATA["Высота Помещения"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<String Name="FM_BearingStructure">
			<Description><![CDATA["Несущая Конструкция"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<RealNum Name="FM_BearingCapacity">
			<Description><![CDATA["Несущая Способность"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<Boolean Name="FM_SmokeFree">
			<Description><![CDATA["Незадымляемая Лестница"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<RealNum Name="FM_StepsLength">
			<Description><![CDATA["Длина Проступей"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<String Name="FM_MaterialFootstep">
			<Description><![CDATA["Покрытие Проступей"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="FM_MaterialStairRailing">
			<Description><![CDATA["Покрытие Ограждения Лестницы"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="FM_MaterialHandhold">
			<Description><![CDATA["Покрытие Поручней"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_custom1">
			<Description><![CDATA["Пользовательское Значение 1"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_custom2">
			<Description><![CDATA["Пользовательское Значение 2"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_custom3">
			<Description><![CDATA["Пользовательское Значение 3"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_custom4">
			<Description><![CDATA["Пользовательское Значение 4"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_custom5">
			<Description><![CDATA["Пользовательское Значение 5"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>

		<!-- gs_onorm_Title: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_onorm_Title">
			<Description><![CDATA["Дополнительные Параметры Спецификаций"]]></Description>
			<Fix/>
		</Title>
		<String Name="gs_onorm_treadnumber">
			<Description><![CDATA["Количество Ступеней"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_treadriser">
			<Description><![CDATA["Глубина Проступи / Высота Подступенка"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_person">
			<Description><![CDATA["Количество Людей"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_bardist_auto">
			<Description><![CDATA["Значение Чистой Ширины между Прутьями Ограждения"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_bardist">
			<Description><![CDATA["Чистая Ширина между Прутьями Ограждения"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_botlevheight_auto">
			<Description><![CDATA["Значение Отметки Нижнего Уровня"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_botlevheight">
			<Description><![CDATA["Отметка Нижнего Уровня"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_toplevheight_auto">
			<Description><![CDATA["Значение Отметки Верхнего Уровня"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_toplevheight">
			<Description><![CDATA["Отметка Верхнего Уровня"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_construction">
			<Description><![CDATA["Конструкция"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_soundinsul">
			<Description><![CDATA["Звукоизоляция"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_mat1">
			<Description><![CDATA["Дополнительный Материал 1"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_finish1_value">
			<Description><![CDATA["Значение Отделки 1"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_finish1">
			<Description><![CDATA["Отделка 1"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_customtext1">
			<Description><![CDATA["Дополнительная Информация 1"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_customtext2">
			<Description><![CDATA["Дополнительная Информация 2"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_aks">
			<Description><![CDATA["Номер AKS"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_product">
			<Description><![CDATA["Продукт"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_leistungbuch">
			<Description><![CDATA["Коллекция ID Спецификаций"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_description">
			<Description><![CDATA["Дополнительное Описание"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_number">
			<Description><![CDATA["Дополнительный Номер"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_id">
			<Description><![CDATA["Номер ID"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_admission">
			<Description><![CDATA["Дата Приема"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_modification">
			<Description><![CDATA["Дата Изменения"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_tozonenumber">
			<Description><![CDATA["Номер Зоны"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>

		<!-- ifc_Title: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="ifc_Title">
			<Description><![CDATA["IFC2x3 Набор Свойств для Лестниц"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
		</Title>
		<Integer Name="ifc_StairType">
			<Description><![CDATA["Тип Лестницы"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0</Value>
		</Integer>
		<Integer Name="ifc_NumberOfRiser">
			<Description><![CDATA["Количество Подступенков"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0</Value>
		</Integer>
		<Integer Name="ifc_NumberOfTreads">
			<Description><![CDATA["Количество Проступей"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0</Value>
		</Integer>
		<Length Name="ifc_RiserHeight">
			<Description><![CDATA["Высота Подступенка"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="ifc_TreadLength">
			<Description><![CDATA["Длина Проступи"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0</Value>
		</Length>
		<String Name="LibraryLangCode">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value><![CDATA["RUS"]]></Value>
		</String>
	</Parameters>
</ParamSection>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_PR SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_PR>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_UI SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[

bCustom2dDetlevel = (gs_detlevel_2D_m = DET2D_CUSTOM)

dim stStairUI[128]
	stStairUI[1] = `2D-детализация`
	stStairUI[2] = `Масштаб`
	stStairUI[3] = `Тип Маркера Разрыва`
	stStairUI[4] = `Видимые Конструкции`
	stStairUI[5] = `Штриховка Фона`
	stStairUI[6] = `Перо Линии`
	stStairUI[7] = `Тип Линии`
	stStairUI[8] = `Перо Штриховки`
	stStairUI[9] = `Перо Фона Штриховки`
	stStairUI[10] = `Невидимые Конструкции`
	stStairUI[11] = `Перо Линии Всхода`
	stStairUI[12] = `Тип Линии Всхода`
	stStairUI[13] = `Конец Линии Всхода`
	stStairUI[14] = `Начало Линии Всхода`
	stStairUI[15] = `Перо Штриховки (0 - нет)`
	stStairUI[16] = `Перо Штрих. Выше (0 - нет)`
	stStairUI[17] = `Тип Шрифта`
	stStairUI[18] = `Начать с`
	stStairUI[19] = `Формат`
	stStairUI[20] = `Размер Шрифта`
	stStairUI[21] = `Специальный Текст 1`
	stStairUI[22] = `Перо Текста`
	stStairUI[23] = `Специальный Текст 2`
	stStairUI[24] = `Текст Подъема и Спуска`
	stStairUI[25] = `Текст`
	stStairUI[26] = `Тип Символа Стойки`
	stStairUI[27] = `Тип Линии Стойки`
	stStairUI[28] = `Перо Линии Стойки`
	stStairUI[29] = `Линия Невидимой Тетивы`
	stStairUI[30] = `Перо Невидимой Тетивы`
	stStairUI[31] = `2D выше Собственного Этажа`
	stStairUI[32] = `Лестница`
	stStairUI[33] = `Ограждение`
	stStairUI[34] = `Тетива`
	stStairUI[35] = `Панели Ограждения`
	stStairUI[36] = `Защитный Слой Проступи`
	stStairUI[37] = `Обвязка`
	stStairUI[38] = `Подступенок`
	stStairUI[39] = `Стойка`
	stStairUI[40] = `Поручень`
	stStairUI[41] = `Штриховка выше Линии Разрыва`
	stStairUI[42] = `Показ Линии Всхода`
	stStairUI[43] = `Стрелка к Линии Разрыва`
	stStairUI[44] = `Показ Нумерации`
	stStairUI[45] = `Текст Подступенков/Проступей`
	stStairUI[46] = `Читаемый Текст`
	stStairUI[47] = `Показ Ограждения на Плане`
	stStairUI[48] = `Показ Осей Ограждения`
	stStairUI[49] = `Показ Тетивы на Плане Этажа`
	stStairUI[50] = `Символ Зависит от Этажа`
	stStairUI[51] = `Линия Разрыва`
	stStairUI[52] = `Показ 2D ниже Линии Разрыва`
	stStairUI[53] = `Показ 2D выше Линии Разрыва`
	stStairUI[54] = `Отбрасывание Теней`
	stStairUI[55] = `Единицы Измерения Рабочей Среды Проекта`
	stStairUI[56] = `Ориентация`
	stStairUI[57] = `Ориентация Текста в Символе`
	stStairUI[58] = `Длина Выступа`
	stStairUI[59] = `Глубина Ступени`
	stStairUI[60] = `Высота Ступени`
	stStairUI[61] = `Толщина Защитного Слоя Проступи`
	stStairUI[62] = `Толщина Подступенка`
	stStairUI[63] = `Толщина Поддона`
	stStairUI[64] = `Выступ Ступени`
	stStairUI[65] = `Выступ - Расстояние Вверху Тетивы`
	stStairUI[66] = `Угол Подступенка`
	stStairUI[67] = `Тип Выступа`
	stStairUI[68] = `Радиус Скругления`
	stStairUI[69] = `Расстояние Скоса`
	stStairUI[70] = `Угол Скоса`
	stStairUI[71] = `Тип Тетивы`
	stStairUI[72] = `Геометрия Тетивы`
	stStairUI[73] = `Толщина Тетивы`
	stStairUI[74] = `Свободная Ширина Марша`
	stStairUI[75] = `Ширина Тетивы`
	stStairUI[76] = `Высота Тетивы`
	stStairUI[77] = `Радиус Тетивы`
	stStairUI[78] = `Ширина Марша`
	stStairUI[79] = `Радиус:`
	stStairUI[80] = `Показ Проступей`
	stStairUI[81] = `Линия Всхода выше Линии Разрыва`
	stStairUI[82] = `Угол Подрезки Верхнего Конца`
	stStairUI[83] = `Расстояние Скоса от Ступени`
	stStairUI[84] = `Угол Подрезки Нижнего Конца`
	stStairUI[85] = `Расстояние Скоса от Подступенка`
	stStairUI[86] = `Описание`
	stStairUI[87] = `Текст Спуска`
	stStairUI[88] = `Тип Видимой Линии`
	stStairUI[89] = `Тип Невидимой Линии`
	stStairUI[90] = `Размер Символа`
	stStairUI[91] = `Текст Подступенка`
	stStairUI[92] = `мм`
	stStairUI[93] = `п.`

	stStairUI[94] = `Перо Контура`
	stStairUI[95] = `Тип Штриховки`
	stStairUI[96] = `Перо Штриховки`
	stStairUI[97] = `Перо Фона Штриховки`
	if bRiser then
		stStairUI[98] = `Подступенок и Поддон`
	else
		stStairUI[98] = `Поддон`
	endif

	stStairUI[99] = `Показ Ограждения выше Линии Разрыва`
	stStairUI[100] = `2D-символ`
	stStairUI[101] = stPostSymbolType[1]
	stStairUI[102] = stPostSymbolType[2]
	stStairUI[103] = stPostSymbolType[3]
	stStairUI[104] = stPostSymbolType[4]
	stStairUI[105] = stPostSymbolType[5]

	stStairUI[106] = stDetlevel2D[1]
	stStairUI[107] = stDetlevel2D[2]

	stStairUI[108] = stBreaklineStyle[1]
	if bSimpleZigZag then
		stStairUI[109] = stBreaklineStyle[3]
	else
		stStairUI[109] = stBreaklineStyle[2]
	endif

	stStairUI[110] = stWalkingDirUPDN[1]
	stStairUI[111] = stWalkingDirUPDN[2]
	stStairUI[112] = stWalkingDirUPDN[3]
	stStairUI[113] = stWalkingDirUPDN[4]
	stStairUI[114] = stWalkingDirUPDN[5]
	stStairUI[115] = stWalkingDirUPDN[6]

	stStairUI[116] = stTextOrientation[3]
	stStairUI[117] = stTextOrientation[2]
	stStairUI[118] = stTextOrientation[1]

	stStairUI[119] = stRiseRunText[1]
	stStairUI[120] = stRiseRunText[2]
	stStairUI[121] = stRiseRunText[3]
	stStairUI[122] = stRiseRunText[4]
	stStairUI[123] = stRiseRunText[5]
	stStairUI[124] = stRiseRunText[6]
	stStairUI[125] = stRiseRunText[7]

	stStairUI[126] = `Ограждение Справа`
	stStairUI[127] = `Ограждение Слева`
	stStairUI[128] = `Показ Тетивы`

dim stRailTypesForUI[11]
	stRailTypesForUI[ 1] = `Балюстрада`
	stRailTypesForUI[ 2] = `Параллельные Прутья`
	stRailTypesForUI[ 3] = `Простой Брусок`
	stRailTypesForUI[ 4] = `Объемная Рама с Панелью`
	stRailTypesForUI[ 5] = `Объемная Рама`
	stRailTypesForUI[ 6] = `Панель`
	stRailTypesForUI[ 7] = `Стойки с Балясинами`
	stRailTypesForUI[ 8] = `Стойки с Прутьями`
	stRailTypesForUI[ 9] = `Деревянная Балюстрада`
	stRailTypesForUI[10] = `Стойки с Брусками`
	stRailTypesForUI[11] = `Как и Правое`

dim stStairUITabNames[14]
	stStairUITabNames[1] = `Типы 2D-символа`
	stStairUITabNames[2] = `Реквизиты 2D-символа`
	stStairUITabNames[3] = `Символ Линии Всхода`
	stStairUITabNames[4] = `Подъем и Спуск, Нумерация`
	stStairUITabNames[5] = `Ограждение и Тетива в Символе`
	stStairUITabNames[6] = `Зависимость от Этажа и 2D над Собственным`
	stStairUITabNames[7] = `Покрытия`
	stStairUITabNames[8] = `Тип Ограждения - Справа`
	stStairUITabNames[9] = `Тип Ограждения - Слева`
	stStairUITabNames[10] = `Параметры Проступи`
	stStairUITabNames[11] = `Параметры Тетивы`
	stStairUITabNames[12] = `Параметры Тетивы - Редактирование`
	stStairUITabNames[13] = `Подъем и Спуск, Описание`
	stStairUITabNames[14] = `Реквизиты Сечения`

call "ui_stairs" parameters gs_ui_current_page		= gs_ui_current_page,
! --- 2D symbol type ---
			gs_detlevel_2D_m		= gs_detlevel_2D_m,
			gs_ScaleChangeSM		= gs_ScaleChangeSM,
			iScaleChangeSM			= iScaleChangeSM,
			gs_ScaleChangeMD		= gs_ScaleChangeMD,
			iScaleChangeMD			= iScaleChangeMD,
			stScaleType				= stScaleType,
			bCustom2dDetlevel		= bCustom2dDetlevel,
			gs_SymbolType_m			= gs_SymbolType_m,
			iSymbolGroup			= iSymbolGroup,
! --- 2D symbol attributes ---
			bEnableBreakLineStyle	= 1,
			breakline_style			= breakline_style,
			gs_cont_pen				= gs_cont_pen,
			gs_DashLinePen			= gs_DashLinePen,
			solid_line				= solid_line,
			dash_line				= dash_line,
			gs_fill_type			= gs_fill_type,
			gs_fill_pen				= gs_fill_pen,
			gs_back_pen				= gs_back_pen,
			gs_FillAbove			= gs_FillAbove,
! --- Walkline ---
			bShowWalkLine				= bShowWalkLine,
			bShowWalkLineAboveBreakline	= bShowWalkLineAboveBreakline,
			gs_wLinePen					= gs_wLinePen,
			gs_wLineType1				= gs_wLineType1,
			arrow_style					= arrow_style,
			gs_ArrowFillPen				= gs_ArrowFillPen,
			gs_ArrowFillPenAbove		= gs_ArrowFillPenAbove,
			gs_StartEndStyle			= gs_StartEndStyle,
			gs_StartEndFillPen			= gs_StartEndFillPen,
! --- Text Display ---
			fontType				= fontType,
			bShowNumbering			= bShowNumbering,
			bShowRiseAndRunText		= bShowRiseAndRunText,
			nStartNumbering			= nStartNumbering,
			gs_NumTextSize			= gs_NumTextSize,
			gs_text_size_pt_num 	= gs_text_size_pt_num,
			gs_NumTextPen			= gs_NumTextPen,
			gs_RiseRunText			= gs_RiseRunText,
			iRiseRunText			= iRiseRunText,
			gs_CustomText1			= gs_CustomText1,
			gs_CustomText2			= gs_CustomText2,
			gs_customText_rise		= gs_customText_rise,
			fontsize				= fontsize,
			gs_text_size_pt			= gs_text_size_pt,
			gs_text_pen				= gs_text_pen,
			walkingDirUPDN			= walkingDirUPDN,
			bEnableCustomDownText	= 1,
			gs_CustomText_Down 		= gs_CustomText_Down,
			UPDNfontsize			= UPDNfontsize,
			gs_text_size_pt_UpDn	= gs_text_size_pt_UpDn,
			UPDNfontpen				= UPDNfontpen,
			typeTextRotation_RiseRun 	= typeTextRotation_RiseRun,
			typeTextRotation_Num 		= typeTextRotation_Num,
			typeTextRotation_UpDn 		= typeTextRotation_UpDn,
			bEnableDescription		= 1,
			gs_description			= gs_description,
			gs_desc_text_size		= gs_desc_text_size,
			gs_desc_text_size_pt	= gs_desc_text_size_pt,
			gs_desc_text_pen		= gs_desc_text_pen,
! --- Rail & Carriage 2D ---
			bShowRailOnFloorPlan	= bShowRailOnFloorPlan,
			railLineType			= railLineType,
			railPen					= railPen,
			bShowRailAxis			= bShowRailAxis,
			railAxisLineType		= railAxisLineType,
			gs_RailAxisPen			= gs_RailAxisPen,
			bSymbolic2D				= bSymbolic2D,
			postSymbolType			= postSymbolType,
			iPostSymbolType			= iPostSymbolType,
			postLineType			= postLineType,
			postPen					= postPen,
			bEnableCarriageLine		= bEnableCarriageLine,
			bShowCarriage			= bShowCarriage,
			carriageLineType		= carriageLineType,
			carriagePen				= carriagePen,
! --- Story Sensitivity ---
			bStorySensitive			= bStorySensitive,
			gs_BreaklineStUp		= gs_BreaklineStUp,
			gs_LowerPartStUp		= gs_LowerPartStUp,
			gs_UpperPartStUp		= gs_UpperPartStUp,
			gs_TreadStUp			= gs_TreadStUp,
			gs_LineTypeStUp			= gs_LineTypeStUp,
			gs_LinePenStUp			= gs_LinePenStUp,
			gs_wLineTypeStUp		= gs_wLineTypeStUp,
! --- Section Attributes ---
			bRiserCover				= 1,
			bTreadCover				= (treadThickness > 0.0001),
			penLineStringer 		= penLineStringer,
			penLineStringer_m 		= penLineStringer_m,
			typeFillStringer		= typeFillStringer,
			penFillStringer			= penFillStringer,
			penFillStringer_m		= penFillStringer_m,
			penBackFillStringer		= penBackFillStringer,
			penBackFillStringer_m	= penBackFillStringer_m,
			penLineTread			= penLineTread,
			penLineTread_m			= penLineTread_m,
			typeFillTread			= typeFillTread,
			penFillTread			= penFillTread,
			penFillTread_m			= penFillTread_m,
			penBackFillTread		= penBackFillTread,
			penBackFillTread_m		= penBackFillTread_m,
			penLineRiser			= penLineRiser,
			penLineRiser_m 			= penLineRiser_m,
			typeFillRiser			= typeFillRiser,
			penFillRiser			= penFillRiser,
			penFillRiser_m			= penFillRiser_m,
			penBackFillRiser		= penBackFillRiser,
			penBackFillRiser_m		= penBackFillRiser_m,
! --- 3D attributes ---
			gs_shadow				= gs_shadow,
			matBase					= matBase,
			matTread				= matTread,
			matRiser				= matRiser,
			matPost					= matPost,
			matHandrail				= matHandrail,
			matSurface				= matSurface,
			matBar					= matBar,
! --- Rail Types ---
			bRightRail				= bRightRail,
			bLeftRail				= bLeftRail,
			leftRailType			= leftRailType,
			rightRailType			= rightRailType,
! --- String resources ---
			stStairUITabNames		= stStairUITabNames,
			stStairSymbolTypes		= stStairSymbolTypes,
			stSymbolGroup			= stSymbolGroup,
			stArrowHeadStyles		= stArrowHeadStyles,
			stStartSymbolStyles		= stStartSymbolStyles,
			stPostSymbolType		= stPostSymbolType,
			stRailPosition			= stRailPosition,
			stRailTypesForUI		= stRailTypesForUI,
			stRailTypes				= stRailTypes,
			stStairUI				= stStairUI,
			stTypeNose				= stTypeNose,
			stTypeStringer			= stTypeStringer,
! --- Metal Structure ---
			bRiser		= bRiser,
			widthFreeFlight		= widthFreeFlight,
			lengthNose			= lengthNose,
			treadDepth			= treadDepth,
			treadHeight			= treadHeight,
			angleRiser			= angleRiser,
			treadThickness		= treadThickness,
			thickRiser			= thickRiser,
			thickPan			= thickPan,
			widthOverlapTread	= widthOverlapTread,
			distNoseStringer	= distNoseStringer,
			typeNose			= typeNose,
			radiusFillet		= radiusFillet,
			depthChamfer		= depthChamfer,
			angleChamfer		= angleChamfer,
			typeStringer		= typeStringer,
! --- Stair Type ---
			iStairType				= 5		! Steel Pan Stair

end


]]>
</Script_UI>

<Picture MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="0" length_in_bytes="4441" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D49484452000000800000
	008008020000004C5CF69C000011164944415478DAED9D8957145716C6E73F11
	05519393E864269993C5B88DB8E11235B2F45AD50B8B12444065935D64DF6905
	1A837403B289ECC8A2AC2AE382ED18130399D1688C93C4E464C638C68C33B7EA
	D1EFF54A41C64ED7395575EEE9231A31E7FDB8DFFDDE7BF776FFEEBFE2E3D647
	04200298FFF3F8DBAFBFFCDB67FFFAF10711807B1E58FD2BE3038FBE7E280270
	C3033FF89F9A26F4278A7A7B7B45006E781E3DB87BF3CA8846A51401B8537F56
	AC58EE3A00CF9E3D05CC506944008EF56778A0E3D5575F751D00587A48B27B5F
	DC160138D69FF10BDDBAE25C00E0BA7FC57465B8BEB64604E0587F0A73335C07
	00F4E78BCF4CEDCDB5BB77EF160138D09F4BC3E72A8F172300AED39FEACAD2E2
	A242118003FD7970F7F3DE8E1604C075FA53529065ACA9160138D09F0BE70731
	00D7E94F5E567A9D51AC018EF4677A7A1A037091FE9CAAD29D6D328A001CEB0F
	FC1A037091FE1C2FC96B6FA9130138D61F970120FA939B755404E0547F5C0380
	E84FF369C3E8D08008C0A9FEB80600D19FFEBE9EA93BB745008EF5C7650088FE
	8C8F8F8B009CEA8FCB0010FDF9E5975F44004EF5C7650088FEC0AF45008EF5C7
	1E802BF44704C0A13F96005CA13F22000EFD8167A0B71D017085FE880038F407
	72627262A828EFD8EDDBB75FBAFE880038F407E74477C71957E88F0880437F70
	4E8C8C0CB9427F44001CFA837B52EA0CD58FBEBAF7F3CFCF5EA2FE8800E6AA3F
	3726862E0FF78E9FEFBAF3E9AD97A93F04FC9DE181CE81FE73C204C0AD3FA383
	9D00A0ADD9D0DDDDFDB2F587E4447F7FBF300170EB4F53ED49F8F14F4E385C55
	55F552F587E4444B83E1E9D3A7EE04C07FFDD9EABB0900BC54FD2139D1DDD1FA
	FCF9CF4203C0AD3F572F12FD59B66C19007091FE9497E54FDFB9254400447FC6
	FA0707FA6D72A25257D068D4C38F7F52FCC13FAC78A5B52CFCEE58E5C31B67BE
	9B1AF9E7C34F9EFDF8E8C57F9EFFFFFA7371A8A7B5B1E6FBC7DF0A100059EB8B
	43BD535353CEF4272336A8AB30F046ADE686518D03BE34D5057DD27A68AA3FEB
	DE45FD4353EB77D304CCDCF507FE95EB13C32F5EBC101C00EEFDD740070038DB
	58B373DBA6308D7F6284242F4E5699AA389DA3EC2EA5C7AAD493B5DA1B38EAD8
	00481000E6CCC1A9BE4C266326216386EF4DDF82B5EEED6AE3D01F810120FA33
	60A73F1565050DACFE24C444AD7CEF1DA5CC5FA30CC4A1520450F2002D151819
	2A493E20CD8B9357A6291A72282B3028630CAAC9DA20D3C420ACF5F1C4002663
	FAB2EE8DEBEFDEBE64A93F6E03C07FFDF159BFF6AD37FF880070843D98582663
	7A6BB3E01B1AF5454315344E14D3E0C796FAE33600FCD71F0F0F0F0E005C0195
	1CD67AFFBE203318D9A9EC60D3C480A5FE081000D19FF383B6FAA307FF53CBE8
	4F626CD4A2850B766F7EBB2255911F2F4F899445854A82E979AC7E885A7EF522
	A33FDBB66CC0BF9991128BF5E79B7F3C122200A23FC3BDD3D34EF567CBC67521
	7EEF5EAB51A1EA6A9A1110EDF8494D4F99AA2197D2A729F3E39C81216B5D5290
	290BD8857FF3B4A102E9CF9986538F1F3F1626006EFDE9EB68D2066EACCF924D
	32BE9301C0BA9D200813BC3281CDCF4C8C6130E94A3663A45D2DA760AD23C282
	2C72427665BC1FE94FCCC108C102E0F63F4753E2376FF409D8B353ADF08B0C09
	4C8A90E6C6CA2AD294A773A8AE527AB40AF140485060F3A331FBD1909BACFF89
	09DA8A33A6B92A13EBCF9AD5EFBB1300FFFDCFFA756B1C965F5AEE2F97ECD128
	FD23432456604AA851BD6A1200A09C684B856F58A7CFBB6E24A8C0FF60FD59BA
	74A93B01F0DFFF60005C41C028247BB4CA000466B4A716D6BA202D82CD1835B3
	FAF5A1372706B0FE080C00B7FF21E73FE07F167A2C58BBFA7DB0F6BFCE7D8668
	88FF99014305D457665BEA8F3B01F0DFFFBCB6CCB33C61674F29CD6AB7C2EC76
	A4411C3694D3FF10FD111C00EEFB2F567FDA9A6AFC36FFA935D71F0A290E6C81
	E068C1CA86C63B060399348BFF391CB57FF1E2C500E0E2E8851F7F782C90FB00
	6EFF83F4A7283743E1EFDB98AB38A7638A2A01406C8FD6DE8342ED1DD5AB3B4B
	5475D954714A28D29F1DBE1BB49483FD179C2F792E5AB465F386F10B5D10B7FF
	7ACD0D0078EB7F223E0A9104EC81F28BDC0E68376B43258CDB614F433B4B2828
	AAB0E8687766221834284CC4FF68C0020DEB350066A8CB88F4A7E574B5979717
	00488C8B46001E3D7CE00600BCF53FCB962EDDE6BB09CAEFEC6E27C80E0CD8D0
	113DCD9EB555C35AD7E6EF436018FF739AF89F43911FC1EA0382F66623AC3EE4
	04DC13080500B9FF727EFEBC60C1828D3EEB7E85F34119931EA3BD31711ED67A
	D79655F5D9902EF4885E35DA94E946FD2100F8EF7F36F9ACF35CB8C067DDFB48
	BB3982C3FFECC660EAAACBDDA83F0400FFFD8FB797877AD7DB57AA55D70CEAA1
	0A5547315597AD3C91A2C889911D899046044BB8C00438F23F72F03FEED21F02
	80C7FA938FFC8FAE283346B5E6063E7DC337C0C4896AAF415135BB9D72164CA2
	0598108DC3F3E73837EA0F01C07FFF93141B91111DA84B92D667B315B592BE5A
	83569F981CD67DE22F099B6B06CD70057DAE2E07BEA1BE34EB50F04E0C06F65F
	6ED41F0280FFFE07CE1EE4123FF03F58BB210EB0073BF0935E9E2267C0B04515
	8131B321E982CEDA8C79FB30B60B27C3262F0F72E88F0000E0FD57DF2CFEC7E9
	ED2385C30E4C2C02A3E82AA646AAC3D1F9B321FD43A457E84CD4BDFA4300F0FF
	FCF9F5D75FA3E55C000809DB484F8A41FE67BFD68FCD180564CCA5DE1AF7EA0F
	01C073FFE3E5E9B1CC7BD1B1A83D4EDD0E5977C70CACFC0F05C10BFF4300F0CF
	FF90FBF7A4B8A837977BB764FBE12B2DA6A8EAD51DACDB3991A2CC899123300E
	92C0CEFF60007CF03F04009FF5273D6E5F5FA9D484CAA9DD0D3004323FD88612
	30B1004606607485C7F0FE0B8369E081FF2100F8EC7F7C37F984A9FD8FEC9720
	B7039BAFB622EA42A51A969B01808FDBC8F52F8244804DF4D7C35A976584D765
	D3E52C98F498200BFD09B7D71F810020FE671EFD87D4CC899B4AEE1F1E14181F
	2EC93C24D525CB8D590086BE50A1BA56C39A4E0CA02EC4EC7FF6E06B7A537B9A
	8DFEF8BA437F0800FEF71F72391F876064BA24798F91E93F345416F5942A518A
	A0FB770EFD712700FEF71F525C41FEB319FF13BE57AB52CC80D11F0B325D1EE0
	83FE1000BCED3F84E34FE9F6776BB394E0DCB1DB991B003BFF4311FFC313FD21
	0078DD7F6850DBDC005F356807CA358D7934B4B9E1C6D010952500B2D6C8FFC8
	C1FFA03FE293FF210078A83FB0FFA2FD7C0C191200607FF069D37F887E317652
	8D6FE40B5830A4FF9022FB2FFEF81F02804FFE271FFB9F1DDBB640FF212DF30B
	D706C67F14086EE77892DC98C9DA50703B467CFC899B735138E93F6433A6F964
	267FF48700E075FF2191752BB7838AEA91FDE8E2570E17BFB8FF701265CCD914
	7CFF0E6078E87F0800BEF71F529C41C0406328BA919FE93F4C8D60C0A0F9A4FA
	50D3048FFC0F01C0CFFEC3D5ABDEB36A80A0E61E56FE078381FE435EE90F01C0
	43FFB3E2552F5DDC074CFF618ED2DC7F28C56E872BC8FDBB3C90BFFE8700E0DB
	F9B37CC73B6800D8FAFA17024A2B9AB65037E43AB4A156E7CF072CFD8F8677FE
	8700E083FF21FD8779196AC9B6C65C659F0E15551B036A3B008C026A2F0CA276
	B31953921A82F4E783AD1B8269FEEEBF0800DEF61F2AACA62D509B1BD589DC8E
	E5ADAFF500F08DB3C933FEC7A081DA8B326698A3FFD0AD00F8D97FC8E57602AC
	C1201B4A4F1A5433F7EFA8FF106DD9EA436EF2CFFF10007CE8FFB1EC3F842638
	8E32EB1C4C42A47AA6FFD0772DCA18E896186AE0E3FE8B00E051FFE106A6FF70
	B3CF1AACDDF30DD07A6BFFC3DD7FE87E00FCF13F4BBC3C34BBDEBE5AA34245D5
	62DA4281A62D38C1D8FB9F205AF297B13E1EEA0F01E0F6FE67CBFE43BBE917EB
	9953660C466BB6A1188C048109C5FB2F5F72FE9C9270909FFA4300F0C4FFC445
	87C5ECF3CF3E2CA99C29AAE61146887A78D542D81F855ADAD0FED36CFF6119F4
	1FEE62C0EC858CE1D87F0905C0F7DF7D73BEF7ECED9B57E6D27F685954B514EB
	760E58D85004069D833241D2C53C7F11863366BC3AF4FAA541A23F9EB6FA2314
	005FDDBF07EF83AAAFD039F13FA4FF708E6E2788B2B5A17D1561F8FEDD84EFDF
	CF265AE98FA7ADFE080B401500E0E83FC400E61DE9C933FD87A12A3F9C31177B
	0D56FAE369A53F820370B252E7CCFF2CF6F47865896746E487A4A99F23E6ED7F
	ECF547B81960DF7FF8D68A259603C0D7F1B4450E5D9E0ADD548AC408D9EC60DA
	5B6A9BEBAB6DFC0FA7FE08B106D8EB4F724CD8991C66F5F10C0C04323936EF40
	83664B3BC8188C1C670CACBEAE38D71200F81F0EFD1126007BFFB37DEB664ABA
	272238303D4A6A9EB6A0D8690BC04000E00160FC25C91883A6BDE9140090ED5A
	8F3226395ACDA13F420540FC8F4DFFA1BDDBA1E57E07180F2A83864EA6A93FC7
	0CC6C0984E9B61B1CE660600BC8D048B87DBFF081780BDFFE130A08EC1A0F924
	6979B20C654C7B530D06000167A29CFA23C422ECB8FF901B0077A01AB07DCB9F
	216350FF21A7FE08D186CED27F78C2B2A8FE6A004C11E6F63FC2CD00DBFBAF7D
	1A388083931C9B1B60760C46D3310F1B4A5CD05CFC8F706B804DFFA1DFF635C3
	954C533F3AD221E1E4FD9FA1FC0E55AA3B8A69B0A1D663F20400E7FE4BB80074
	C57936FE07BAAF24FEBBC183B26E07CD962AEA996B2CD5885E7DB586C0B06543
	D24505AF576B880D6DA9CAE0D01FC1022829C876D67FA86582E88996753B306D
	61B6A168B69462A7B119813259E815A2826CE889840F66F73F420760E37F9C02
	40AFB641C090311873C76E5B2303E0C8DE6DA6CBFD1CFA235800A585D9A8FF10
	FB9F35AB563A6B80D0CE39D0E6A0A98EA90161A11A0EFD113280B2C26CAC3FBE
	1BD7BDF1DA62FD919D5084515145238CD8ED580517155C8433521366D11FA103
	484F8EC3FE47B1E39DEEC24056CA51580D005F3306316FE856AA463694804124
	9C03801BE659F447E80014527FF3FB1F1E55056EABCF9277975017CA6928AAA4
	857F26B48887CD0030B81D3663A8BA2CAA2C4991162D8FDE2B0D55590198457F
	840E005607E9CFFEB060CBFE433CC2987558763C5961CCC2633056FB00131900
	4641B08D7FAC6D636DA84216C8A13FC204F0D34F4F86FA191DC0FD87BE5B3602
	0067826E03C63C9FA4682B540298EB06BC33D0A29E09C0806C28BCE7EA7CF547
	408D59D0208EFB0F37AC5F0BFEC71980B982392C2B4F53C2FC17EC0F5006BCF1
	C6EF9DE98FD001B08710FD96FD87218C76BF94203634584B5BE8CF41AC3F4207
	800E410100DB7FB830D4EF3D34008CFA0F519B5B01B4B945C998A2AA96CC1300
	29C28CFE4439D01FA1034087A0D72F9FD7EBF28E68D74D1ACC4708CCABDA7E00
	98791B6E9DBA31CF0C2652161D2A993D637A3B9A067B5A9DE98FD00180FE0000
	88D4F848B6FF50F67106DD5A489FD3D14C533FBA8227417CA7EDA7C140C694AA
	1AD1343602B3571AA29244EF0F86FD177C7F87FA237400487F607506BA5BD6AE
	59259706686845B08686505372A58C19608F8FA08F1EA2F313E8EA63AAD62275
	DF7115F9D0913AEBE34FD491C8F2C078463B2A518699F5C7CB527F840E00E90F
	445A521CDC3E520A292CBDF3206082D5F2B808EAE8212A3F81AA868C29A0D937
	AEA74966E016C4B1B30C804BE71DEA8FD00160FDD9B471FD126F6F1525E300C0
	05264463913199EADE9A949BACFE9C6D32D8EB8FD00160FD810AE9EDEDBD7CF9
	F22A7D65415E4E42DCE17DA1DAF901701215BA4204382126DA7BF1E2EDDBB77F
	72EBE6977F9FBAFBC51DD01FA103C0FA732C2D71E5CA95B76EDDC27F049F9609
	1FD532F5F99DCB972E7675B6D7549F9C0113323F30E77B19FD8122BC6EED6AB5
	5AFDE4C913CBFF01A103C0FA73F5F2D8FDFBF7B9FFC23CC11C8C0C47FE070E41
	6363639F3F673EB55904602541F0C1D510F059C9F3FFDBDC60CE75B620C00FEE
	CECCDE88007EEBB7FE40FAF3ECDF4F45001C8FEB2A3CBC427E88007EEB07940D
	E90F947AF85204F05B3F505770811101888F084004203E22001180F888004400
	E2338FE77F07B9C468341162480000000049454E44AE426082
	]]>
</Picture>

<Comment SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Comment>

<CalledMacros SectVersion="2" SectionFlags="0" SubIdent="0">
	<Macro>
		<MName><![CDATA["Stair_RiseRun_Text"]]></MName>
		<MainGUID>E42F5F06-4225-4F32-A64C-ADCF1D4F9EDC</MainGUID>
	</Macro>
	<Macro>
		<MName><![CDATA["railSymbol2D_m"]]></MName>
		<MainGUID>C5C904E6-1706-4CD1-BC8D-6C294B5B40F7</MainGUID>
	</Macro>
	<Macro>
		<MName><![CDATA["stairRails_m"]]></MName>
		<MainGUID>4A3DDA4A-B43E-4039-B45A-463905CF42AD</MainGUID>
	</Macro>
	<Macro>
		<MName><![CDATA["ui_stairs"]]></MName>
		<MainGUID>D8D2E274-0A82-4EF4-845A-78AD6980E72F</MainGUID>
	</Macro>
	<Macro>
		<MName><![CDATA["FM_types"]]></MName>
		<MainGUID>2759D2DF-AA8E-44D1-AD1D-261581266B34</MainGUID>
	</Macro>
	<Macro>
		<MName><![CDATA["Onorm_Stair"]]></MName>
		<MainGUID>F021AF23-E4F7-4961-964D-C9BCAFB786DD</MainGUID>
	</Macro>
</CalledMacros>

<Copyright SectVersion="1" SectionFlags="0" SubIdent="0">
	<Author>GRAPHISOFT</Author>
	<License>
		<Type>CC BY-ND</Type>
		<Version>3.0</Version>
	</License>
</Copyright>

</Symbol>
