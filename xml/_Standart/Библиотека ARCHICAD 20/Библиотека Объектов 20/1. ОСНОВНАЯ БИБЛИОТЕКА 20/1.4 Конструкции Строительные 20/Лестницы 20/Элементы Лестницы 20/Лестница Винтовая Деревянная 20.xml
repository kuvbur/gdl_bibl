<?xml version="1.0" encoding="UTF-8"?>
<Symbol IsArchivable="true" IsPlaceable="true" MainGUID="479D5BFC-93E4-4C57-94C1-E14128A18FC4" MigrationValue="Normal" Owner="1196638531" Signature="1196644685" Version="38">
<Ancestry SectVersion="1" SectionFlags="0" SubIdent="0" Template="false">
	<MainGUID>F938E33A-329D-4A36-BE3E-85E126820996</MainGUID>
	<MainGUID>103E8D2C-8230-42E1-9597-46F84CCE28C0</MainGUID>
	<MainGUID>784EAEA1-5041-4AA6-B6F4-EF263A891EE7</MainGUID>
	<MainGUID>57B7C584-5C0D-11D6-A0D8-036F034B6792</MainGUID>
</Ancestry>

<MigrationTable SectVersion="1" SectionFlags="0" SubIdent="0">
	<MigrationTableElement>
		<MainGUID>3AB35E69-131E-40A7-9757-2AE6973C28F0</MainGUID>
		<Version>19</Version>
		<Name><![CDATA[""]]></Name>
		<AutoMigration>true</AutoMigration>
	</MigrationTableElement>
</MigrationTable>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_3D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
! RC Spiral Wooden

IF gs_detlevel_3D_m = DET3D_OFF THEN END

IF GLOB_CONTEXT>20 and GLOB_CONTEXT<40 THEN 		!! FOR Simple Model and in 3D Windoow
	gs_detlevel_3D_m = DET3D_SIMPLE
ENDIF

IF not(gs_shadow) THEN SHADOW OFF

ROTz fokszog
PEN gs_cont_PEN
FILL gs_FILL_type


!!!!!!!!!!!!!!!!!!!!!!!!! *** HOTSPOTs RailUNID *** !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

	FlightUNID=1			!!! 1-15
	!!! RailUNID=1000		!!! 1000,1100,1200

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

IF iFirstTread = FIRSTTREAD_AT_FLOOR_LEVEL THEN stt=-1 ELSE stt=0
IF iTopTread = TOPTREAD_AT_FLOOR_LEVEL THEN ett=rnu ELSE ett=rnu-1

!!! Height in origo
HOTSPOT 0,0,0, FlightUNID, zzyzx, 1+128 :FlightUNID=FlightUNID+1
HOTSPOT 0,0,-1, FlightUNID, zzyzx, 3 :FlightUNID=FlightUNID+1
HOTSPOT 0,0,zzyzx, FlightUNID, zzyzx, 2 :FlightUNID=FlightUNID+1

!!! Flight Width/ Bottom Step/ Left
kr=r-flw
HOTSPOT (r)*cos(fokszog*stt),(r)*sin(fokszog*stt),0, FlightUNID, flw, 1+128 :FlightUNID=FlightUNID+1
HOTSPOT (r+1)*cos(fokszog*stt),(r+1)*sin(fokszog*stt),0, FlightUNID, flw, 3 :FlightUNID=FlightUNID+1
HOTSPOT (r-flw)*cos(fokszog*stt),(r-flw)*sin(fokszog*stt),0, FlightUNID, flw, 2 :FlightUNID=FlightUNID+1

!!! Flight Width/ Bottom Step/ Right
HOTSPOT 0,0,0, FlightUNID, r, 1+128 :FlightUNID=FlightUNID+1
HOTSPOT (r)*cos(fokszog*stt),(r)*sin(fokszog*stt),0, FlightUNID, r, 2 :FlightUNID=FlightUNID+1
HOTSPOT (-1)*cos(fokszog*stt),(-1)*sin(fokszog*stt),0, FlightUNID, r, 3 :FlightUNID=FlightUNID+1

!!! Flight Width/ Top Step/ Left
HOTSPOT (r)*cos(fokszog*ett),(r)*sin(fokszog*ett),zzyzx, FlightUNID, flw, 1+128 :FlightUNID=FlightUNID+1
HOTSPOT (r+1)*cos(fokszog*ett),(r+1)*sin(fokszog*ett),zzyzx, FlightUNID, flw, 3 :FlightUNID=FlightUNID+1
HOTSPOT (r-flw)*cos(fokszog*ett),(r-flw)*sin(fokszog*ett),zzyzx, FlightUNID, flw, 2 :FlightUNID=FlightUNID+1

!!! Flight Width/ Top Step/ Right
HOTSPOT 0,0,zzyzx, FlightUNID, r, 1+128 :FlightUNID=FlightUNID+1
HOTSPOT (r)*cos(ett*fokszog),(r)*sin(ett*fokszog),zzyzx, FlightUNID, r, 2 :FlightUNID=FlightUNID+1
HOTSPOT (-1)*cos(ett*fokszog),(-1)*sin(ett*fokszog),zzyzx, FlightUNID, r, 3 :FlightUNID=FlightUNID+1


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

addz -rt

GROUP "treadcutsoff"
!!!!		FIRST & TOP TREAD CUT		!!!!
	MATERIAL matsoff
	SECT_FILL typeFillSoffit, penBackFillSoffit, penFillSoffit, penLineSoffit

	rk=(r-flw)/2
!!!!	FIRST
	IF iFirstTread = FIRSTTREAD_AT_FLOOR_LEVEL THEN stp=-3 ELSE stp=-2
	ADDz -sh
	PRISM_ 5,
		2*sh+th,
		rk*cos((stp)*fokszog), rk*sin((stp)*fokszog), 15,
		(r+1)*cos((stp)*fokszog), (r+1)*sin((stp)*fokszog), 15,
		(r+1)*cos((stp+2)*fokszog), (r+1)*sin((stp+2)*fokszog), 15,
		rk*cos((stp+2)*fokszog), rk*sin((stp+2)*fokszog), 15,
		rk*cos((stp)*fokszog), rk*sin((stp)*fokszog), 15
	DEL 1
!!!!	TOP
	IF iTopTread = TOPTREAD_AT_FLOOR_LEVEL THEN
		stp=rnu
		ADDz sh-pd+(rnu)*th-lst
	ELSE
		ADDz sh-pd+rnu*th-lst
		stp=rnu-1
	ENDIF
	PRISM_ 5,
		2*sh+th,
		rk*cos((stp+2)*fokszog), rk*sin((stp+2)*fokszog),15,
		(r+1)*cos((stp+2)*fokszog), (r+1)*sin((stp+2)*fokszog),15,
		(r+1)*cos((stp)*fokszog), (r+1)*sin((stp)*fokszog),15,
		rk*cos((stp)*fokszog), rk*sin((stp)*fokszog),15,
		rk*cos((stp+2)*fokszog), rk*sin((stp+2)*fokszog),15
	DEL 1
ENDGROUP

GROUP "treadcutstr"
!!!!		FIRST & TOP TREAD CUT		!!!!
	MATERIAL matstr
	SECT_FILL typeFillStringer, penBackFillStringer, penFillStringer, penLineStringer

	rk=(r-flw)/2
!!!!	FIRST
	IF iFirstTread = FIRSTTREAD_AT_FLOOR_LEVEL THEN stp=-3 ELSE stp=-2
	ADDz -sh
	PRISM_ 5,
		2*sh+th,
		rk*cos((stp)*fokszog), rk*sin((stp)*fokszog), 15,
		(r+1)*cos((stp)*fokszog), (r+1)*sin((stp)*fokszog), 15,
		(r+1)*cos((stp+2)*fokszog), (r+1)*sin((stp+2)*fokszog), 15,
		rk*cos((stp+2)*fokszog), rk*sin((stp+2)*fokszog), 15,
		rk*cos((stp)*fokszog), rk*sin((stp)*fokszog), 15
	DEL 1
!!!!	TOP
	IF iTopTread = TOPTREAD_AT_FLOOR_LEVEL THEN
		stp=rnu
		ADDz sh-pd+(rnu)*th-lst
	ELSE
		ADDz sh-pd+rnu*th-lst
		stp=rnu-1
	ENDIF
	PRISM_ 5,
		2*sh+th,
		rk*cos((stp+2)*fokszog), rk*sin((stp+2)*fokszog),15,
		(r+1)*cos((stp+2)*fokszog), (r+1)*sin((stp+2)*fokszog),15,
		(r+1)*cos((stp)*fokszog), (r+1)*sin((stp)*fokszog),15,
		rk*cos((stp)*fokszog), rk*sin((stp)*fokszog),15,
		rk*cos((stp+2)*fokszog), rk*sin((stp+2)*fokszog),15
	DEL 1
ENDGROUP


!!!!!!!!!!!!!!!!!!!! *** STRINGS *** !!!!!!!!!!!!!!!!!!!!
GROUP "strings"

IF iLowerJunctionType = LOWERJUNCTION_GROUND_FLOOR THEN
	ADDz sh-pd+rt
	MATERIAL mat_tread
	SECT_FILL typeFillTread, penBackFillTread, penFillTread, penLineTread

	cutplane 180
	DEL 1
ENDIF

!!!!		Right String		!!!!

	pontszam=0
	IF iFirstTread = FIRSTTREAD_AT_FLOOR_LEVEL THEN dc=-2*res-1 ELSE dc=-1*res
	IF iTopTread = TOPTREAD_AT_FLOOR_LEVEL THEN endp=2*res+1 ELSE endp=res+1
	WHILE dc <= fordul*resolka+endp do
!		put r*cos((360/resolka)*dc), r*sin((360/resolka)*dc), (dc)*stepup
		put (r-st)*cos((360/resolka)*dc), (r-st)*sin((360/resolka)*dc), (dc)*stepup

		pontszam=pontszam+1
		dc=dc+1
	ENDWHILE

	MATERIAL matstr
	SECT_FILL typeFillStringer, penBackFillStringer, penFillStringer, penLineStringer

	TUBEA 5, pontszam, 1+2+16+32,
		FlightWidth/3,0,0,
		-st,0,0,
		-st,sh,0,
		FlightWidth/3,sh,0,
		FlightWidth/3,0,0,
!	TUBEA 5, pontszam, 1+2+16+32,
!		flw/3,0,0,
!		-st,0,0,
!		-st,sh,0,
!		flw/3,sh,0,
!		flw/3,0,0,

		get(pontszam*3)

!!!!		Left String			!!!!

	pontszam=0
	IF iFirstTread = FIRSTTREAD_AT_FLOOR_LEVEL THEN dc=-2*res ELSE dc=-1*res
	IF iTopTread = TOPTREAD_AT_FLOOR_LEVEL THEN endp=2*res+1 ELSE endp=res+1
	WHILE dc <= fordul*resolka+endp do
		put (r-flw+st)*cos((360/resolka)*dc), (r-flw+st)*sin((360/resolka)*dc),
			(dc)*stepup
!		put (r-flw)*cos((360/resolka)*dc), (r-flw)*sin((360/resolka)*dc),
!			(dc)*stepup
		pontszam=pontszam+1
		dc=dc+1
	ENDWHILE

	MATERIAL matstr
	SECT_FILL typeFillStringer, penBackFillStringer, penFillStringer, penLineStringer

	TUBEA 5, pontszam, 1+2+16+32,
		-FlightWidth/3,0,0,
		st,0,0,
		st,sh,0,
		-FlightWidth/3,sh,0,
		-FlightWidth/3,0,0,

!	TUBEA 5, pontszam, 1+2+16+32,
!		-flw/3,0,0,
!		st,0,0,
!		st,sh,0,
!		-flw/3,sh,0,
!		-flw/3,0,0,

		get(pontszam*3)


IF iLowerJunctionType = LOWERJUNCTION_GROUND_FLOOR THEN CUTEND
ENDGROUP

GROUP "cutrings"
!!!!		OUTER RING		!!!!

	pontszam=0
	dc=0
	WHILE dc <= resolka do
!		put (r+1)*cos((360/resolka)*dc), (r+1)*sin((360/resolka)*dc),15
		put (r-st+1)*cos((360/resolka)*dc), (r-st+1)*sin((360/resolka)*dc),15
		pontszam=pontszam+1
		dc=dc+1
	ENDWHILE
	dc=0
!	put (r+1)*cos((360/resolka)*dc), (r+1)*sin((360/resolka)*dc),-1
	put (r-st+1)*cos((360/resolka)*dc), (r-st+1)*sin((360/resolka)*dc),-1
	pontszam=pontszam+1

	dc=0
	WHILE dc <= resolka do
!		put (r)*cos((360/resolka)*dc), (r)*sin((360/resolka)*dc),15
		put (r-st)*cos((360/resolka)*dc), (r-st)*sin((360/resolka)*dc),15
		pontszam=pontszam+1
		dc=dc+1
	ENDWHILE
	dc=0
!	put (r)*cos((360/resolka)*dc), (r)*sin((360/resolka)*dc),-1
	put (r-st)*cos((360/resolka)*dc), (r-st)*sin((360/resolka)*dc),-1
	pontszam=pontszam+1

	MATERIAL mat_tread
	SECT_FILL typeFillTread, penBackFillTread, penFillTread, penLineTread

	ADDz -1-sh
	PRISM_ pontszam, zzyzx+2+2*sh,

		get(pontszam*3)
	DEL 1

!!!!		INNER CYLINDER			!!!!

	pontszam=0
	WHILE dc <= resolka do
!		put (r-flw)*cos((360/resolka)*dc), (r-flw)*sin((360/resolka)*dc)
		put (r-flw+st)*cos((360/resolka)*dc), (r-flw+st)*sin((360/resolka)*dc)

		pontszam=pontszam+1
		dc=dc+1
	ENDWHILE
	dc=0
!	put (r-flw)*cos((360/resolka)*dc), (r-flw)*sin((360/resolka)*dc)
	put (r-flw+st)*cos((360/resolka)*dc), (r-flw+st)*sin((360/resolka)*dc)

	pontszam=pontszam+1

	MATERIAL mat_tread
	SECT_FILL typeFillTread, penBackFillTread, penFillTread, penLineTread

	ADDz -1-sh
	PRISM pontszam, zzyzx+2+2*sh,
		get(pontszam*2)

	DEL 1
ENDGROUP


GROUP "cutringsstr"
!!!!		OUTER RING		!!!!

	pontszam=0
	dc=0
	WHILE dc <= resolka do
!		put (r)*cos((360/resolka)*dc), (r)*sin((360/resolka)*dc),1+4+8
		put (r-st)*cos((360/resolka)*dc), (r-st)*sin((360/resolka)*dc),1+4+8
		pontszam=pontszam+1
		dc=dc+1
	ENDWHILE
	dc=0
!	put (r)*cos((360/resolka)*dc), (r)*sin((360/resolka)*dc),-1
	put (r-st)*cos((360/resolka)*dc), (r-st)*sin((360/resolka)*dc),-1
	pontszam=pontszam+1

	dc=0
	WHILE dc <= resolka do
!		put (r-flw)*cos((360/resolka)*dc), (r-flw)*sin((360/resolka)*dc),1+4+8
		put (r-flw+st)*cos((360/resolka)*dc), (r-flw+st)*sin((360/resolka)*dc),1+4+8

		pontszam=pontszam+1
		dc=dc+1
	ENDWHILE
	dc=0
!	put (r-flw)*cos((360/resolka)*dc), (r-flw)*sin((360/resolka)*dc),-1
	put (r-flw+st)*cos((360/resolka)*dc), (r-flw+st)*sin((360/resolka)*dc),-1

	pontszam=pontszam+1

	MATERIAL matstr
	SECT_FILL typeFillStringer, penBackFillStringer, penFillStringer, penLineStringer

	ADDz -1-sh
	PRISM_ pontszam, zzyzx+2+2*sh,

		get(pontszam*3)
	DEL 1
ENDGROUP

!!!!	SOFFIT
GROUP "soffit"
IF soffit THEN
	pontszam=0
	resolkaSoffit = 4 *resolka
	stepupSoffit = stepup / 4
	IF iFirstTread = FIRSTTREAD_AT_FLOOR_LEVEL THEN dc=-2*res ELSE dc=-1*res
	IF iTopTread = TOPTREAD_AT_FLOOR_LEVEL THEN endp=2*res+1 ELSE endp=res+1

	WHILE dc <= fordul*resolkaSoffit+endp do
		put (r-flw)*cos((360/resolkaSoffit)*dc), (r-flw)*sin((360/resolkaSoffit)*dc),
			(dc)*stepupSoffit
		pontszam=pontszam+1
		dc=dc+1
	ENDWHILE

	MATERIAL matsoff
	SECT_FILL typeFillSoffit, penBackFillSoffit, penFillSoffit, penLineSoffit


	stl=(r-flw)/2
	stn=-0.5
	TUBEA 5, pontszam, 1+2+16+32,
		stl,0,0,
		stn-flw,0,0,
		stn-flw,softh,0,
		stl,softh,0,
		stl,0,0,

		get(pontszam*3)
ENDIF
ENDGROUP

GROUP "treads"
!!!!		BATTENS		!!!!
	IF bt_m <> BATTEN_NONE THEN
		MATERIAL mat_tread
		ADDz rt+sh-pd
		rkk=(r-flw)/2
		IF bt_m = BATTEN_NOSING THEN
			btts=th*2/3-rt
			bttl=th/3
		ENDIF
		IF bt_m = BATTEN_INTERM THEN
			btts=(th)/3-rt/2
			bttl=th/3
		ENDIF
		IF bt_m = BATTEN_TREAD THEN
			btts=0
			bttl=th/3
		ENDIF
		IF bt_m = BATTEN_FULL THEN
			btts=0
			bttl=th-rt
		ENDIF
		IF iTopTread = TOPTREAD_AT_FLOOR_LEVEL THEN endp=rnu ELSE endp=rnu+1
		IF iFirstTread = FIRSTTREAD_AT_FLOOR_LEVEL THEN strt=1 ELSE strt=1
		FOR i=strt to endp
			dx=rt*sin(i*fokszog)
			dy=-rt*cos(i*fokszog)
			ii=i-1
			ADDz th*ii+btts
			IF not(i=endp and iTopTread = TOPTREAD_BELOW_FLOOR_LEVEL) THEN
				MATERIAL mat_riser
				SECT_FILL typeFillRiser, penBackFillRiser, penFillRiser, penLineRiser

				PRISM 5, bttl,		!th-rt,
					rkk*cos(ii*fokszog),rkk*sin(ii*fokszog),
					(r+0.5)*cos(ii*fokszog), (r+0.5)*sin(ii*fokszog),
					(r+0.5)*cos(ii*fokszog)+dx, (r+0.5)*sin(ii*fokszog)+dy,
					rkk*cos(ii*fokszog)+dx, rkk*sin(ii*fokszog)+dy,
					rkk*cos(ii*fokszog),rkk*sin(ii*fokszog)
			ENDIF
			DEL 1
		NEXT i
		DEL 1
	ENDIF

!!!!		TREADS			!!!!
	ADDz sh-pd-th
	rkk=(r-flw)/2
	IF iFirstTread = FIRSTTREAD_AT_FLOOR_LEVEL THEN strt=0 ELSE strt=1
	IF iTopTread = TOPTREAD_AT_FLOOR_LEVEL THEN endp=rnu ELSE endp=rnu-1
	FOR i=strt to endp
		dx=(rt+ns)*sin(i*fokszog)
		dy=(rt+ns)*cos(i*fokszog)*(-1)
		ADDz (i+1)*th
		IF not ((i=0 and iFirstTread = FIRSTTREAD_ABOVE_FLOOR_LEVEL) or (i=rnu and iTopTread = TOPTREAD_BELOW_FLOOR_LEVEL)) THEN
			IF i=0 THEN
				dx=(rt)*sin(i*fokszog)
				dy=(rt)*cos(i*fokszog)*(-1)
			ENDIF
			MATERIAL mat_tread
			SECT_FILL typeFillTread, penBackFillTread, penFillTread, penLineTread

			PRISM 5, rt,
				rkk*cos((i-1)*fokszog)+dx, rkk*sin((i-1)*fokszog)+dy,
				(r+0.5)*cos((i-1)*fokszog)+dx, (r+0.5)*sin((i-1)*fokszog)+dy,
				(r+0.5)*cos(i*fokszog), (r+0.5)*sin(i*fokszog),
				rkk*cos(i*fokszog), rkk*sin(i*fokszog),
				rkk*cos((i-1)*fokszog)+dx, rkk*sin((i-1)*fokszog)+dy
		ENDIF
		DEL 1
	NEXT i
	DEL 1
ENDGROUP


ADDz -(sh-pd)

IF iLowerJunctionType = LOWERJUNCTION_GROUND_FLOOR THEN		!!!Cut Soffit at Bottom Step
	ADDz sh-pd
	MATERIAL mat_tread
	cutplane 180
	DEL 1
ENDIF


PLACEGROUP subgroup(subgroup("soffit","treadcutsoff"),"cutrings")
PLACEGROUP subgroup(subgroup("strings","treadcutstr"),"cutringsstr")
PLACEGROUP subgroup("treads","cutrings")



IF iLowerJunctionType = LOWERJUNCTION_GROUND_FLOOR THEN cutend


DEL 1

KILLGROUP "treads"
KILLGROUP "strings"
KILLGROUP "cutrings"
KILLGROUP "cutringsstr"
KILLGROUP "soffit"
KILLGROUP "treadcutsoff"
KILLGROUP "treadcutstr"


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! *** RAILING *** !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

IF rail_m <> RAILPOS_NONE THEN
	fordul=fordul*1.00241
	IF iTopTread = TOPTREAD_AT_FLOOR_LEVEL THEN
		zzz=zzyzx
	ELSE
		zzz=zzyzx-th
		fordul=fordul-fokszog/360
	ENDIF

	IF iFirstTread = FIRSTTREAD_AT_FLOOR_LEVEL THEN
		fordul=fokszog/360+fordul
		zz=zzz+th
	ELSE
		zz=zzz
	ENDIF

	ker	= 2*pi*(r-flw+st-roffl)
	k	= 2*pi*(r-st/2+roffr)
	nlra=sqr(k*k*fordul*fordul+zz*zz)
	klra=sqr(ker*ker*fordul*fordul+zz*zz)

	ann=atn(zz/(k*fordul))
	ank=atn(zz/(ker*fordul))

	IF iFirstTread = FIRSTTREAD_ABOVE_FLOOR_LEVEL THEN
		hsz=0
	ELSE
		ADDz -th
		ROTz -fokszog
	ENDIF

	ADDz pd
	hsz=hsz+pd

	rr=r-st/2+roffr			!!!Right Railing
	kr=r-flw+st/2-roffl		!!!Left Railing
	res=res*360/fokszog

	! ------------------------------------------------------------------------------
	! Right rail
	! ------------------------------------------------------------------------------

	if rail_m = RAILPOS_RIGHT or rail_m = RAILPOS_BOTH then
		ADDx rr
		ROTz 90

		RailUNID=1000

		!!! Rail Offset/Bottom Step/ Right
		ADDy roffr
		HOTSPOT 0, 0, dsr, RailUNID, roffr, 1+128 :RailUNID=RailUNID+1
		HOTSPOT 0, -roffr, dsr, RailUNID, roffr, 2 :RailUNID=RailUNID+1
		HOTSPOT 0, 1, dsr, RailUNID, roffr, 3 :RailUNID=RailUNID+1
		DEL 1

		!!! Distance of String/Bottom Step/ Right
		HOTSPOT 0,0,0, RailUNID, dsr, 1+128 :RailUNID=RailUNID+1
		HOTSPOT 0,0,dsr, RailUNID, dsr, 2 :RailUNID=RailUNID+1
		HOTSPOT 0,0,-1, RailUNID, dsr, 3 :RailUNID=RailUNID+1

		!!! Railing Height/Bottom Step/ Right
		HOTSPOT 0,0,dsr, RailUNID, hrr, 1+128 :RailUNID=RailUNID+1
		HOTSPOT 0,0,dsr+hrr, RailUNID, hrr, 2 :RailUNID=RailUNID+1
		HOTSPOT 0,0,dsr-1, RailUNID, hrr, 3 :RailUNID=RailUNID+1

		lraSimple=nlra
		lraComplex=nlra
		additionXComplex=0
		additionZComplex=0
		hrovL=hror
		hrovR=hror
		postNumber = npr
		side = SIDE_RIGHT
		gosub "callRailsForStair"

		del 2
	ENDIF

	! ------------------------------------------------------------------------------
	! Left rail
	! ------------------------------------------------------------------------------

	if rail_m = RAILPOS_LEFT or rail_m = RAILPOS_BOTH then
		if bSameRails then
			leftRailType_m = rightRailType_m
		endif

		ADDx kr
		ROTz 90

		IF not(bSameRails) THEN
			RailUNID=1100

			ADDy -roffl
			HOTSPOT 0,0,dsl, RailUNID, roffl, 1+128 :RailUNID=RailUNID+1
			HOTSPOT 0,roffl,dsl, RailUNID, roffl, 2 :RailUNID=RailUNID+1
			HOTSPOT 0,-1,dsl, RailUNID, roffl, 3 :RailUNID=RailUNID+1
			DEL 1

			HOTSPOT 0,0,0, RailUNID, dsl, 1+128 :RailUNID=RailUNID+1
			HOTSPOT 0,0,dsl, RailUNID, dsl, 2 :RailUNID=RailUNID+1
			HOTSPOT 0,0,-1, RailUNID, dsl, 3 :RailUNID=RailUNID+1

			HOTSPOT 0,0,dsl, RailUNID, hrl, 1+128 :RailUNID=RailUNID+1
			HOTSPOT 0,0,dsl+hrl, RailUNID, hrl, 2 :RailUNID=RailUNID+1
			HOTSPOT 0,0,dsl-1, RailUNID, hrl, 3 :RailUNID=RailUNID+1
		ELSE

			RailUNID=1200

			ADDy -roffr
			HOTSPOT 0,0,dsr, RailUNID, roffr, 1+128 :RailUNID=RailUNID+1
			HOTSPOT 0,roffr,dsr, RailUNID, roffr, 2 :RailUNID=RailUNID+1
			HOTSPOT 0,-1,dsr, RailUNID, roffr, 3 :RailUNID=RailUNID+1
			DEL 1

			HOTSPOT 0,0,0, RailUNID, dsr, 1+128 :RailUNID=RailUNID+1
			HOTSPOT 0,0,dsr, RailUNID, dsr, 2 :RailUNID=RailUNID+1
			HOTSPOT 0,0,-1, RailUNID, dsr, 3 :RailUNID=RailUNID+1

			HOTSPOT 0,0,dsr, RailUNID, hrr, 1+128 :RailUNID=RailUNID+1
			HOTSPOT 0,0,dsr+hrr, RailUNID, hrr, 2 :RailUNID=RailUNID+1
			HOTSPOT 0,0,dsr-1, RailUNID, hrr, 3 :RailUNID=RailUNID+1
		ENDIF

		lraSimple=klra
		lraComplex=klra
		additionXComplex=0
		additionZComplex=0
		hrovL=hrol
		hrovR=hrol
		postNumber = npl
		side = SIDE_LEFT
		gosub "callRailsForStair"

		DEL 2
	ENDIF

	DEL 1
	IF iFirstTread = FIRSTTREAD_AT_FLOOR_LEVEL THEN DEL 2
ENDIF
DEL 1

END

! ==============================================================================
"callRailsForStair":
! ------------------------------------------------------------------------------
!	lraSimple
!	lraComplex
!	additionXComplex
!	additionZComplex
!	hrovL: rail overhang start
!	hrovR: rail overhang end
!	postNumber:   number of posts
!	side: SIDE_LEFT or SIDE_RIGHT
! ==============================================================================
	additionXComplex = additionXComplex
	additionZComplex = additionZComplex
	gosub "callRails"
return

! ==============================================================================
"callRails":
! ------------------------------------------------------------------------------
!	ani
!	additionXComplex
!	additionZComplex
!	dsComplex
!  ------------------
!	side: SIDE_LEFT or SIDE_RIGHT
!	lraSimple
!	lraComplex
!	hrovL: rail overhang start
!	hrovR: rail overhang end
!	postNumber:   number of posts
! ==============================================================================
	if side = SIDE_LEFT then
		railBarDepth	= bwl
		railBarDiam		= bdl
		railHeight		= hrl
		railBarThk		= fthl
		railBarType		= btypl_m
		railFrameThk	= fthl
		railDist		= dsl
		railType_m		= leftRailType_m
		railPostDiam	= pdl
		railPostWidth	= pwl
		railPostThk		= pthl
		railPostType	= ptl_m
		barNumber		= nbl
		iBalusterStyle	= btl_m
		railFramesWSide	= fswl
		railFramesWTop	= ftwl
		railFramesWBot	= fbwl
		railBarHeight	= bhl
		railBarFillThk	= bthl
		balusterDist	= abdistl
		railFrameMat	= fmatl
		railBaluFillMat	= bmatl
		railPostMat		= pmatl
		balusterNumber	= nbtl
		railFillDist	= fdfl
!!!		railPostBaseType= gs_PostBaseTypeL_m
		railDistFromHr	= sbhl
!!!		railPostBaseOv	= gs_PostBaseOverhangL
		handRailType	= hrtl_m
		handRailWidth	= hrwl
		handRailDiam	= hrdl
		handRailHeight	= hrhl
		ani				= ank
		rb				= kr
	else
		railBarDepth	= bwr
		railBarDiam		= bdr
		railHeight		= hrr
		railBarThk		= fthr
		railBarType		= btypr_m
		railFrameThk	= fthr
		railDist		= dsr
		railType_m		= rightRailType_m
		railPostDiam	= pdr
		railPostWidth	= pwr
		railPostThk		= pthr
		railPostType	= ptr_m
		barNumber		= nbr
		iBalusterStyle	= btr_m
		railFramesWSide	= fswr
		railFramesWTop	= ftwr
		railFramesWBot	= fbwr
		railBarHeight	= bhr
		railBarFillThk	= bthr
		balusterDist	= abdistr
		railFrameMat	= fmatr
		railBaluFillMat	= bmatr
		railPostMat		= pmatr
		balusterNumber	= nbtr
		railFillDist	= fdfr
!!!		railPostBaseType= gs_PostBaseTypeR_m
		railDistFromHr	= sbhr
!!!		railPostBaseOv	= gs_PostBaseOverhangR
		handRailType	= hrtr_m
		handRailWidth	= hrwr
		handRailDiam	= hrdr
		handRailHeight	= hrhr
		ani				= ann
		rb				= rr
	endif

	call "stairRails_m" parameters	railType_m				= railType_m,
									iStairType				= 2,
									bEnableWired02Rail		= 0,
									bEnableNonVerticalRail	= 0,
									additionXComplex		= additionXComplex,
									additionZComplex		= additionZComplex,
									ptyp_m					= 3,
									ani						= ani,
									ab						= fordul*360,
									rb						= rb,
									rom_m					= 1,
									rmm_m					= 1,
									lraSimple				= lraSimple,
									lraComplex				= lraComplex,
									railHeight				= railHeight,
									railDist				= railDist,
									gs_detlevel_3D_m		= gs_detlevel_3D_m,
									gs_cont_pen				= gs_cont_pen,
									res						= res,
									rescs					= rescs,
									gs_shadow				= gs_shadow,
									railFrameThk			= railFrameThk,
									railFramesWSide			= railFramesWSide,
									railFramesWTop			= railFramesWTop,
									railFramesWBot			= railFramesWBot,
									railBarType				= railBarType,
									railBarDepth			= railBarDepth,
									railBarFillThk			= railBarFillThk,
									railBarDiam				= railBarDiam,
									balusterDist			= balusterDist,
									railFrameMat			= railFrameMat,
									railBaluFillMat			= railBaluFillMat,
									barNumber				= barNumber,
									railBarHeight			= railBarHeight,
									railFillDist			= railFillDist,
									handRailType			= handRailType,
									handRailDiam			= handRailDiam,
									handRailWidth			= handRailWidth,
									handRailHeight			= handRailHeight,
									hrovL					= hrovL,
									hrovR					= hrovR,
									iBalusterStyle			= iBalusterStyle,
									railPostDiam			= railPostDiam,
									railPostWidth			= railPostWidth,
									railPostThk				= railPostThk,
									railPostType			= railPostType,
									postNumber				= postNumber,
									railPostMat				= railPostMat,
									iParamInputType			= 1,
									balusterNumber			= balusterNumber,
!!!									railPostBaseType		= railPostBaseType,
!!!									railPostBaseOv			= railPostBaseOv,
									railDistFromHr			= railDistFromHr
return

]]>
</Script_3D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_2D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[

! ---------- Hotspots ----------[

	! FlightUNID=1			! 1,100,200,300,400
	! RailUNID=1000			! 1000-1800
	! BreakUNID=2000		! NO
	! StartSymbUNID=3000	! 3000,3100
	! ArrowUNID=4000		! 4000,4100,4200,4300
	! RiseRunUNID=5000		! 5000
	! UpDownUNID=6000		! 6000
	! NumUNID=7000			! NO

! ==============================================================================
! Settings of 2D Symbol Type
! Stories, where the object is placed on
! ==============================================================================

dim drawPart[3]		! 1 - lower,  2 - upper,  3 - full
dim drawDashed[3]	! 1 - lower,  2 - upper,  3 - full
dim drawSteps[3]	! 1 - lower,  2 - upper,  3 - full
dim drawDetails[3]	! 1 - lower,  2 - upper,  3 - full
dim drawNum[3]		! 1 - lower,  2 - upper,  3 - full

drawPart[1] 	= 0	! Lower
drawPart[2] 	= 0	! Upper
drawPart[3] 	= 0	! Full
drawDashed[1] 	= 0	! Lower
drawDashed[2] 	= 0	! Upper
drawDashed[3] 	= 0	! Full
drawSteps[1] 	= 0	! Lower
drawSteps[2] 	= 0	! Upper
drawSteps[3] 	= 0	! Full
drawDetails[1] 	= 0	! Lower
drawDetails[2] 	= 0	! Upper
drawDetails[3]	= 0	! Full
drawNum[1] 		= 0	! Lower
drawNum[2] 		= 0	! Upper
drawNum[3]		= 0	! Full

! ---------- Story Sensitive ----------[

abovestory = 0
belowstory = 0
homeStory = 0
if gs_StorySensitive then
	if GLOB_CH_STORY_DIST > EPS  then
		abovestory = 1
	else
		if GLOB_CH_STORY_DIST < -EPS  then
			belowstory = 1
		endif
	endif
endif
if not(abovestory) & not(belowstory) then homeStory = 1

! ---------- Story Sensitive ----------]

bCarriageLineExist		= bShowCarriage and bEnableCarriageLine and (GLOB_SCALE <= iShowCarriageUpTo | iShowCarriageUpTo = 1)

! ---------- Settings of 2D Symbol Type ----------
_iSymbolType = 1
if gs_detlevel_2D_m = DET2D_SCALESENSITIVE then
	if GLOB_SCALE <= _iScaleMD then									!! Detailed Scale
		_iSymbolType = iEnabledSymbolTypes[iSymbolGroup][3]
	else
		if GLOB_SCALE > _iScaleMD & GLOB_SCALE <= _iScaleSM then	!! Middle Scale
			_iSymbolType = iEnabledSymbolTypes[iSymbolGroup][2]
		else														!! Simple Scale
			_iSymbolType = iEnabledSymbolTypes[iSymbolGroup][1]
		endif
	endif
else
	_iSymbolType = gs_SymbolType_m
endif

if _iSymbolType = 1 then
	drawPart[3]		= 1		! Full
	drawDashed[3] 	= 1		! Full
	! Railing
	rail_m = RAILPOS_NONE
endif

if _iSymbolType = 2 then
	drawPart[3]	= 1		! Full
	! Railing
	rail_m = RAILPOS_NONE
ENDIF

if _iSymbolType = 3 then
	drawPart[1]	= 1
	! Railing
	rail_m = RAILPOS_NONE
ENDIF

if _iSymbolType = 4 then
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
	drawDashed[2] = 1	! Upper
	! Railing
	rail_m = RAILPOS_NONE
ENDIF

if _iSymbolType = 5 then
	drawPart[1]	= 1	! Lower
	drawPart[2]	= 1	! Upper
	! Railing
	rail_m = RAILPOS_NONE
ENDIF

if _iSymbolType = 6 then
	drawPart[3]	= 1		! Full
	drawDashed[3] = 1	! Full
	drawSteps[3] = 1	! Full
	! Railing
	rail_m = RAILPOS_NONE
ENDIF

if _iSymbolType = 7 then
	drawPart[3]	= 1		! Full
	drawSteps[3] = 1	! Full
	! Railing
	rail_m = RAILPOS_NONE
ENDIF

if _iSymbolType = 8 then
	drawPart[1]	= 1		! Lower
	drawSteps[1] = 1	! Lower
	! Railing
	rail_m = RAILPOS_NONE
ENDIF

if _iSymbolType = 9 then
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
	drawDashed[2] = 1	! Upper
	drawSteps[1] = 1	! Lower
	! Railing
	rail_m = RAILPOS_NONE
ENDIF

if _iSymbolType = 10 then
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
	drawSteps[1] = 1	! Lower
	! Railing
	rail_m = RAILPOS_NONE
ENDIF

if _iSymbolType = 11 then
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
	drawDashed[2] = 1	! Upper
	drawSteps[1] = 1	! Lower
	drawSteps[2] = 1	! Upper
	! Railing
	rail_m = RAILPOS_NONE
ENDIF

if _iSymbolType = 12 then
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
	drawSteps[1] = 1	! Lower
	drawSteps[2] = 1	! Upper
	! Railing
	rail_m = RAILPOS_NONE
ENDIF

if _iSymbolType = 13 then
	drawPart[3]	= 1		! Full
	drawDashed[3] = 1	! Full
	drawSteps[3] = 1	! Full
	drawDetails[3] = 1	! Full
ENDIF

if _iSymbolType = 14 then
	drawPart[3]	= 1		! Full
	drawSteps[3] = 1	! Full
	drawDetails[3] = 1	! Full
ENDIF

if _iSymbolType = 15 then
	drawPart[1]	= 1		! Lower
	drawSteps[1] = 1	! Lower
	drawDetails[1] = 1	! Lower
	drawSteps[2] = 1	! Upper
endif

if _iSymbolType = 16 then
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
	drawDashed[2] = 1	! Upper
	drawSteps[1] = 1	! Lower
	drawDetails[1] = 1	! Lower
ENDIF

if _iSymbolType = 17 then
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
	drawSteps[1] = 1	! Lower
	drawDetails[1] = 1	! Lower
ENDIF

if _iSymbolType = 18 then
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
	drawDashed[2] = 1	! Upper
	drawSteps[1] = 1	! Lower
	drawSteps[2] = 1	! Upper
	drawDetails[1] = 1	! Lower
	drawDetails[2] = 1	! Upper
ENDIF

if _iSymbolType = 19 then
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
	drawDashed[2] = 1	! Upper
	drawSteps[1] = 1	! Lower
	drawSteps[2] = 1	! Upper
	drawDetails[1] = 1	! Lower
ENDIF

if _iSymbolType = 20 then
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
	drawSteps[1] = 1	! Lower
	drawSteps[2] = 1	! Upper
	drawDetails[1] = 1	! Lower
	drawDetails[2] = 1	! Upper
endif

! Numbering
if bShowNumbering then
	drawNum[1]		= drawPart[1] & (not(drawPart[2]) | (drawPart[2] & gs_NumBelow))
	drawNum[2]		= drawPart[2] & (not(drawPart[1]) | (drawPart[1] & gs_NumAbove))
	drawNum[3]		= drawPart[3]
endif

! Nosing
! Buggy !!!!!!!!!!!!!!!!!!!!!!!!!!
if not(drawDetails[1]) & not(drawDetails[2]) & not(drawDetails[3]) then
	ns = 0	! Nosing Length
	rt = 0	! Riser Thickness
endif
! Buggy !!!!!!!!!!!!!!!!!!!!!!!!!!

if bCarriageLineExist then
else
	st = 0
endif

! ---------- Stories below the home story ---------- [

if belowstory then
	drawPart[1]		= 0
	drawPart[2]		= 0
	drawPart[3]		= 1

	drawDashed[1]		= 0
	drawDashed[2]		= 0
	drawDashed[3]		= 1

	drawSteps[1] = 0
	drawSteps[2] = 0
	drawSteps[3] = 0

	drawDetails[1] = 0
	drawDetails[2] = 0
	drawDetails[3] = 0

	drawNum[1] = 0
	drawNum[2] = 0
	drawNum[3] = 0

	walkl			= 0
	gs_fill_type	= 65
	gs_back_pen		= 0
	rail_m = RAILPOS_NONE
	bShowRiseAndRunText				= 0

endif

! ---------- Stories above the home story ---------- [
if aboveStory then
	drawPart[1] = 0
	drawPart[2] = 0
	drawPart[3] = 0

	if gs_TreadStUp then
		drawSteps[1] = 1
		drawSteps[2] = 1
		drawSteps[3] = 1

		if drawDetails[1] | drawDetails[3] then
			drawDetails[1] = 1
			drawDetails[2] = 1
			drawDetails[3] = 1
		endif

	else
		drawSteps[1] = 0
		drawSteps[2] = 0
		drawSteps[3] = 0

		drawDetails[1] = 0
		drawDetails[2] = 0
		drawDetails[3] = 0
	endif

	if gs_BreaklineStUp = 0 then
		drawPart[3] = 1
	else
		if gs_LowerPartStUp then
			drawPart[1] = 1
		endif
		if gs_UpperPartStUp then
			drawPart[2] = 1
		endif
	endif

	if gs_numaStUp then
		drawNum[1]		= drawPart[1] & (not(drawPart[2]) | drawPart[2])
		drawNum[2]		= drawPart[2] & (not(drawPart[1]) | drawPart[1])
		drawNum[3]		= drawPart[3]
	else
		drawNum[1] = 0
		drawNum[2] = 0
		drawNum[3] = 0
	endif

	if gs_txStUp then
		bShowRiseAndRunText = 1
	else
		bShowRiseAndRunText = 0
	endif

endif


	! Arrow Size
	IF td> 0.26 THEN
		ArrowDist=0.2
	ELSE
		ArrowDist=td*SIN(45)
	ENDIF


	PEN gs_cont_pen
	FILL gs_fill_type

	IF rnu*fokszog <= 360 | \
		(_iSymbolType = 3 & drawPart[1] & not(drawPart[2]) ) | \
		(_iSymbolType = 8 & drawPart[1] & not(drawPart[2]) ) | \
		(_iSymbolType = 15 & drawPart[1] & not(drawPart[2]) ) THEN


		IF iFirstTread = FIRSTTREAD_ABOVE_FLOOR_LEVEL THEN
			fsz=fokszog
			temp_wldofsz=0
		ELSE
			fsz=0
			temp_wldofsz=fokszog
		ENDIF

		! Number of Steps
		temp_rnu=rnu
!		IF iFirstTread = FIRSTTREAD_AT_FLOOR_LEVEL AND iTopTread = TOPTREAD_BELOW_FLOOR_LEVEL THEN temp_rnu=rnu-1
		IF iFirstTread = FIRSTTREAD_ABOVE_FLOOR_LEVEL AND iTopTread = TOPTREAD_AT_FLOOR_LEVEL THEN temp_rnu=rnu
		IF iFirstTread = FIRSTTREAD_ABOVE_FLOOR_LEVEL AND iTopTread = TOPTREAD_BELOW_FLOOR_LEVEL THEN temp_rnu=rnu-1
		temp_wldornu=temp_rnu
		IF iTopTread = TOPTREAD_AT_FLOOR_LEVEL THEN temp_wldornu=temp_rnu-1

		! --- F L I G H T ---

		FlightUNID=1

		! Bottom Step/Right
		HOTSPOT2 0,0, FlightUNID, r,1 : FlightUNID=FlightUNID+1
		HOTSPOT2 -r*COS(fsz),-r*SIN(fsz), FlightUNID, r,3 : FlightUNID=FlightUNID+1
		HOTSPOT2 r*COS(fsz),r*SIN(fsz), FlightUNID, r,2 : FlightUNID=FlightUNID+1

		! Bottom Step/Left
		HOTSPOT2 (r)*COS(fsz),(r)*SIN(fsz), FlightUNID, flw,1 : FlightUNID=FlightUNID+1
		HOTSPOT2 (r+1)*COS(fsz),(r+1)*SIN(fsz), FlightUNID, flw,3 : FlightUNID=FlightUNID+1
		HOTSPOT2 (r-flw)*COS(fsz),(r-flw)*SIN(fsz), FlightUNID, flw,2 : FlightUNID=FlightUNID+1

		! Top Step/Right
		ROT2 (temp_rnu)*fokszog
			HOTSPOT2 0,0, FlightUNID, r,1 : FlightUNID=FlightUNID+1
			HOTSPOT2 -r*COS(fsz),-r*SIN(fsz), FlightUNID, r,3 : FlightUNID=FlightUNID+1
			HOTSPOT2 r*COS(fsz),r*SIN(fsz), FlightUNID, r,2 : FlightUNID=FlightUNID+1
		DEL 1

		! Top Step/Left
		ROT2 (temp_rnu)*fokszog
			HOTSPOT2 (r)*COS(fsz),(r)*SIN(fsz), FlightUNID, flw,1 : FlightUNID=FlightUNID+1
			HOTSPOT2 (r+1)*COS(fsz),(r+1)*SIN(fsz), FlightUNID, flw,3 : FlightUNID=FlightUNID+1
			HOTSPOT2 (r-flw)*COS(fsz),(r-flw)*SIN(fsz), FlightUNID, flw,2 : FlightUNID=FlightUNID+1
		DEL 1

		! --- S T R I N G S ---

		IF ABS(st) > EPS THEN

		FlightUNID=100

		! Bottom Step/Right
			HOTSPOT2 (r)*COS(fsz),(r)*SIN(fsz), FlightUNID, st,1 : FlightUNID=FlightUNID+1
			HOTSPOT2 (r+1)*COS(fsz),(r+1)*SIN(fsz), FlightUNID, st,3 : FlightUNID=FlightUNID+1
			HOTSPOT2 (r-st)*COS(fsz),(r-st)*SIN(fsz), FlightUNID, st,2 : FlightUNID=FlightUNID+1

		! Bottom Step/Left
			HOTSPOT2 (r-flw)*COS(fsz),(r-flw)*SIN(fsz), FlightUNID, st,1 : FlightUNID=FlightUNID+1
			HOTSPOT2 (r-flw-1)*COS(fsz),(r-flw-1)*SIN(fsz), FlightUNID, st,3 : FlightUNID=FlightUNID+1
			HOTSPOT2 (r-flw+st)*COS(fsz),(r-flw+st)*SIN(fsz), FlightUNID, st,2 : FlightUNID=FlightUNID+1

		IF drawPart[2] THEN

			FlightUNID=200

			! Top Step/Right
			ROT2 (temp_rnu)*fokszog
				HOTSPOT2 (r)*COS(fsz),(r)*SIN(fsz), FlightUNID, st,1 : FlightUNID=FlightUNID+1
				HOTSPOT2 (r+1)*COS(fsz),(r+1)*SIN(fsz), FlightUNID, st,3 : FlightUNID=FlightUNID+1
				HOTSPOT2 (r-st)*COS(fsz),(r-st)*SIN(fsz), FlightUNID, st,2 : FlightUNID=FlightUNID+1
			DEL 1

			! Top Step/Left
			ROT2 (temp_rnu)*fokszog
				HOTSPOT2 (r-flw)*COS(fsz),(r-flw)*SIN(fsz), FlightUNID, st,1 : FlightUNID=FlightUNID+1
				HOTSPOT2 (r-flw-1)*COS(fsz),(r-flw-1)*SIN(fsz), FlightUNID, st,3 : FlightUNID=FlightUNID+1
				HOTSPOT2 (r-flw+st)*COS(fsz),(r-flw+st)*SIN(fsz), FlightUNID, st,2 : FlightUNID=FlightUNID+1
			DEL 1
		ENDIF
		ENDIF

		! --- W A L K I N G_L I N E S ---

		FlightUNID=300

		! Walking Line at Bottom Step
		ROT2 temp_wldofsz
			HOTSPOT2 0,0, FlightUNID, wldo,1 : FlightUNID=FlightUNID+1
			HOTSPOT2 -wldo*COS(fsz),-wldo*SIN(fsz), FlightUNID, wldo,3 : FlightUNID=FlightUNID+1
			HOTSPOT2 wldo*COS(fsz),wldo*SIN(fsz), FlightUNID, wldo,2 : FlightUNID=FlightUNID+1
		DEL 1

		! Walking Line at Top Step
		ROT2 (temp_wldornu)*fokszog
			HOTSPOT2 0,0, FlightUNID, wldo,1 : FlightUNID=FlightUNID+1
			HOTSPOT2 -wldo*COS(fsz),-wldo*SIN(fsz), FlightUNID, wldo,3 : FlightUNID=FlightUNID+1
			HOTSPOT2 wldo*COS(fsz),wldo*SIN(fsz), FlightUNID, wldo,2 : FlightUNID=FlightUNID+1
		DEL 1

	ELSE

		fsz=fokszog
		IF iTopTread = TOPTREAD_AT_FLOOR_LEVEL THEN temp_rnu360=rnu
		IF iTopTread = TOPTREAD_BELOW_FLOOR_LEVEL THEN temp_rnu360=rnu-1

		FlightUNID=400

		! Bottom Step/Right
		HOTSPOT2 0,0, FlightUNID, r,1 : FlightUNID=FlightUNID+1
		HOTSPOT2 -r*COS(fsz),-r*SIN(fsz), FlightUNID, r,3 : FlightUNID=FlightUNID+1
		HOTSPOT2 r*COS(fsz),r*SIN(fsz), FlightUNID, r,2 : FlightUNID=FlightUNID+1

		! Bottom Step/Left
		HOTSPOT2 (r)*COS(fsz),(r)*SIN(fsz), FlightUNID, flw,1 : FlightUNID=FlightUNID+1
		HOTSPOT2 (r+1)*COS(fsz),(r+1)*SIN(fsz), FlightUNID, flw,3 : FlightUNID=FlightUNID+1
		HOTSPOT2 (r-flw)*COS(fsz),(r-flw)*SIN(fsz), FlightUNID, flw,2 : FlightUNID=FlightUNID+1

		! Top Step/Right
		ROT2 (temp_rnu360)*fokszog
			HOTSPOT2 0,0, FlightUNID, r,1 : FlightUNID=FlightUNID+1
			HOTSPOT2 -r*COS(fsz),-r*SIN(fsz), FlightUNID, r,3 : FlightUNID=FlightUNID+1
			HOTSPOT2 r*COS(fsz),r*SIN(fsz), FlightUNID, r,2 : FlightUNID=FlightUNID+1

!			SET LINE_TYPE solid_line
!			LINE2 r*COS(fsz),r*SIN(fsz),(r-flw)*COS(fsz),(r-flw)*SIN(fsz)
		DEL 1

		! Top Step/Left
		ROT2 (temp_rnu360)*fokszog
			HOTSPOT2 (r)*COS(fsz),(r)*SIN(fsz), FlightUNID, flw,1 : FlightUNID=FlightUNID+1
			HOTSPOT2 (r+1)*COS(fsz),(r+1)*SIN(fsz), FlightUNID, flw,3 : FlightUNID=FlightUNID+1
			HOTSPOT2 (r-flw)*COS(fsz),(r-flw)*SIN(fsz), FlightUNID, flw,2 : FlightUNID=FlightUNID+1
		DEL 1

		! Walking Line at Bottom Step
		ROT2 fokszog
			HOTSPOT2 0,0, FlightUNID, wldo,1 : FlightUNID=FlightUNID+1
			HOTSPOT2 -1,0, FlightUNID, wldo,3 : FlightUNID=FlightUNID+1
			HOTSPOT2 wldo,0, FlightUNID, wldo,2 : FlightUNID=FlightUNID+1
		DEL 1
	ENDIF


	! ------------------------------------------------------------------------------
	! Nosing Length
	! ------------------------------------------------------------------------------

	Nosing = ns+rt
	! ns=Nosing
	! rt=Riser Thickness

	! ------------------------------------------------------------------------------
	! BREAK LINE Position
	! ------------------------------------------------------------------------------

	IF iFirstTread = FIRSTTREAD_ABOVE_FLOOR_LEVEL AND rnu*fokszog <= 360 THEN
		numSteptoBreakRight=INT(gs_BreakHeight/th) 	! Num. of Steps on Right Side
		i1ZZYZX=INT(ZZYZX/th)		! Num. of Steps if value of ZZYZX is less than BREAK LINE
	ELSE
		numSteptoBreakRight=INT(gs_BreakHeight/th)+1 ! Num. of Steps on Right Side
		i1ZZYZX=INT(ZZYZX/th)+1		! Num. of Steps if value of ZZYZX is less than BREAK LINE
	ENDIF
	i2=numSteptoBreakRight+1						! Num. of Steps on Left Side

	BreakNum=INT(gs_BreakHeight/th)

	if ZZYZX <= (BreakNum)*th & not(drawPart[3]) then
		drawPart[3] = 1		! IF value of ZZYZX is less than BREAK LINE
		drawPart[1] = 0
		drawPart[2] = 0

		drawSteps[3] = drawSteps[1]		! IF value of ZZYZX is less than BREAK LINE
		drawSteps[1] = 0
		drawSteps[2] = 0

		drawDetails[3] = drawDetails[1]		! IF value of ZZYZX is less than BREAK LINE
		drawDetails[1] = 0
		drawDetails[2] = 0

		drawNum[3] = drawNum[1]	| (aboveStory & not(drawPart[1]) & drawNum[2])	! IF value of ZZYZX is less than BREAK LINE
		drawNum[1] = 0
		drawNum[2] = 0
	endif

	! ------------------------------------------------------------------------------
	! Stair Slab Contour And Fill
	! ------------------------------------------------------------------------------

	! Fill above Break Line
	IF gs_FillAbove=1 THEN
		FullFill=2+64
		temp_FillTypeAbove=gs_fill_type
		temp_BackPen=gs_back_pen
	ELSE
		FullFill=0
		temp_FillTypeAbove=gs_FillTypeAbove		! because of Area Fill Selection
		temp_BackPen=0							! because of Area Fill Selection
	ENDIF

	! Nosing Values
	! Angle
	NosingOuterAngle=360*(Nosing)/(2*(r)*pi)
	NosingInnerAngle=360*(Nosing)/(2*(r-flw)*pi)

	! Nosing Coordinates at First Step
	NosingInnerY=(r-flw)*SIN(NosingInnerAngle)
	IF NosingInnerAngle = 0 THEN
		NosingInnerX=0
		ELSE
		NosingInnerX=NosingInnerY/TAN(NosingInnerAngle)
	ENDIF
	NosingOuterY=(r)*SIN(NosingOuterAngle)
	IF NosingOuterAngle = 0 THEN
		NosingOuterX=0
		ELSE
		NosingOuterX=NosingOuterY/TAN(NosingOuterAngle)
	ENDIF


	! ==========================================================================
	! Stair Slab Contour
	! ==========================================================================

	DRAWINDEX 10


	! --------------------------------------------------------------------------
	! ANGLE <= 360
	! --------------------------------------------------------------------------
	IF rnu*fokszog <= 360 | \
		(_iSymbolType = 3 & drawPart[1] & not(drawPart[2]) ) | \
		(_iSymbolType = 8 & drawPart[1] & not(drawPart[2]) ) | \
		(_iSymbolType = 15 & drawPart[1] & not(drawPart[2]) ) THEN

			IF iFirstTread = FIRSTTREAD_ABOVE_FLOOR_LEVEL THEN ROT2 fokszog

			IF iTopTread = TOPTREAD_BELOW_FLOOR_LEVEL THEN rnu=rnu-1


			PEN gs_cont_pen
			FILL gs_fill_type

			! Stair Slab FILL
			IF drawPart[3] THEN

					if aboveStory then
						PEN gs_LinePenStUp
						LINE_TYPE gs_LineTypeStUp
					else
						if drawDashed[3] then
							PEN gs_DashLinePen
							LINE_TYPE dash_line
						else
							PEN gs_cont_pen
							LINE_TYPE solid_line
						endif
					endif
					POLY2_b 9, 1+2+64, gs_fill_pen, gs_back_pen,
						r-flw+st,0,1,
						0,0,900,
						0,rnu*fokszog, 4000,
						(r-flw+st)*COS(rnu*fokszog),(r-flw+st)*SIN(rnu*fokszog),0,
						(r-st)*COS(rnu*fokszog),(r-st)*SIN(rnu*fokszog),1,
						0,0,900,
						0,-rnu*fokszog,4000,
						r-st,0,0,
						r-flw+st,0,-1

					IF not(drawDetails[3]) THEN
						LINE2 r-flw+st,0,r-st,0
						LINE2 (r-flw+st)*COS(rnu*fokszog),(r-flw+st)*SIN(rnu*fokszog),(r-st)*COS(rnu*fokszog),(r-st)*SIN(rnu*fokszog)
					ENDIF


					! S T R I N G S

					if bCarriageLineExist and ABS(st) > EPS then
						if aboveStory then
							PEN gs_LinePenStUp
							LINE_TYPE gs_LineTypeStUp
						else
							if drawDashed[3] then
								PEN carriagePen
								LINE_TYPE dash_line
							else
								PEN carriagePen
								LINE_TYPE carriageLineType
							endif
						endif

						! OUTER STRING
						POLY2_b 9, 1+2+64, gs_fill_pen, gs_back_pen,
							r-st,0,1,
							0,0,900,
							0,rnu*fokszog, 4000,
							(r-st)*COS(rnu*fokszog),(r-st)*SIN(rnu*fokszog),1,
							(r)*COS(rnu*fokszog),(r)*SIN(rnu*fokszog),1,
							0,0,900,
							0,-rnu*fokszog,4000,
							r,0,1,
							r-st,0,-1

						! INNER STRING
						POLY2_b 9, 1+2+64, gs_fill_pen, gs_back_pen,
							r-flw,0,1,
							0,0,900,
							0,rnu*fokszog, 4000,
							(r-flw)*COS(rnu*fokszog),(r-flw)*SIN(rnu*fokszog),1,
							(r-flw+st)*COS(rnu*fokszog),(r-flw+st)*SIN(rnu*fokszog),1,
							0,0,900,
							0,-rnu*fokszog,4000,
							r-flw+st,0,1,
							r-flw,0,-1
					ENDIF

					HOTLINE2 r-flw,0,(r),0
					HOTLINE2 (r-flw)*COS(rnu*fokszog),(r-flw)*SIN(rnu*fokszog),(r)*COS(rnu*fokszog),(r)*SIN(rnu*fokszog)

			ELSE

				IF drawPart[1] THEN
					if aboveStory then
						PEN gs_LinePenStUp
						LINE_TYPE gs_LineTypeStUp
					else
						if drawDashed[1] then
							PEN gs_DashLinePen
							LINE_TYPE dash_line
						else
							PEN gs_cont_pen
							LINE_TYPE solid_line
						endif
					endif

						POLY2_b 7, 1+2+4+64, gs_fill_pen, gs_back_pen,
							r-flw+st,0,1,
							0,0,900,
							0,numSteptoBreakRight*fokszog, 4000,
							(r-st)*COS(numSteptoBreakRight*fokszog), (r-st)*SIN(numSteptoBreakRight*fokszog),1,
							0,0,900,
							0,-numSteptoBreakRight*fokszog,4000,
							r-flw+st,0,-1

						IF not(drawSteps[1]) THEN LINE2 (r-flw+st)*COS(numSteptoBreakRight*fokszog), (r-flw+st)*SIN(numSteptoBreakRight*fokszog),(r-st)*COS(numSteptoBreakRight*fokszog), (r-st)*SIN(numSteptoBreakRight*fokszog)
						IF not(drawDetails[1]) THEN LINE2 r-flw+st,0,(r-st),0  !!Type<13 Line at Bottom Step

						! S T R I N G S

						if bCarriageLineExist and ABS(st) > EPS then
							if aboveStory then
								PEN gs_LinePenStUp
								LINE_TYPE gs_LineTypeStUp
							else
								if drawDashed[1] then
									PEN carriagePen
									LINE_TYPE dash_line
								else
									PEN carriagePen
									LINE_TYPE carriageLineType
								endif
							endif

							! OUTER STRING
							POLY2_b 7, 1+2+64, gs_fill_pen, gs_back_pen,
								r-st,0,1,
								0,0,900,
								0,numSteptoBreakRight*fokszog, 4001,
								(r)*COS(numSteptoBreakRight*fokszog),(r)*SIN(numSteptoBreakRight*fokszog),1,
								0,0,900,
								0,-numSteptoBreakRight*fokszog,4001,
								r-st,0,-1

							! INNER STRING
							POLY2_b 7, 1+2+64, gs_fill_pen, gs_back_pen,
								r-flw,0,1,
								0,0,900,
								0,numSteptoBreakRight*fokszog, 4001,
								(r-flw+st)*COS(numSteptoBreakRight*fokszog),(r-flw+st)*SIN(numSteptoBreakRight*fokszog),1,
								0,0,900,
								0,-numSteptoBreakRight*fokszog,4001,
								r-flw,0,-1
						ENDIF

						HOTLINE2 r-flw,0,(r),0
						HOTLINE2 (r-flw)*COS(numSteptoBreakRight*fokszog),(r-flw)*SIN(numSteptoBreakRight*fokszog),(r)*COS(numSteptoBreakRight*fokszog),(r)*SIN(numSteptoBreakRight*fokszog)
				ENDIF

				IF drawPart[2] THEN

						if aboveStory then
							PEN gs_LinePenStUp
							LINE_TYPE gs_LineTypeStUp
						else
							if drawDashed[2] then
								PEN gs_DashLinePen
								LINE_TYPE dash_line
							else
								PEN gs_cont_pen
								LINE_TYPE solid_line
							endif
						endif

						FILL temp_FillTypeAbove

						POLY2_b 9, 1+FullFill, gs_fill_pen, temp_BackPen,
							(r-flw+st)*COS(numSteptoBreakRight*fokszog), (r-flw+st)*SIN(numSteptoBreakRight*fokszog),1,
							0,0,900,
							0,(rnu-numSteptoBreakRight)*fokszog, 4000,
							(r-flw+st)*COS(rnu*fokszog),(r-flw+st)*SIN(rnu*fokszog),1,
							(r-st)*COS(rnu*fokszog),(r-st)*SIN(rnu*fokszog),1,
							0,0,900,
							0,-(rnu-numSteptoBreakRight)*fokszog,4000,
							(r-st)*COS(numSteptoBreakRight*fokszog), (r-st)*SIN(numSteptoBreakRight*fokszog),not(drawPart[1]),
							(r-flw+st)*COS(numSteptoBreakRight*fokszog), (r-flw+st)*SIN(numSteptoBreakRight*fokszog),-1

						IF not(drawDetails[2]) THEN LINE2 (r-flw+st)*COS(rnu*fokszog),(r-flw+st)*SIN(rnu*fokszog),(r-st)*COS(rnu*fokszog),(r-st)*SIN(rnu*fokszog)

						! S T R I N G S

						if bCarriageLineExist and ABS(st) > EPS then
							if aboveStory then
								PEN gs_LinePenStUp
								LINE_TYPE gs_LineTypeStUp
							else
								if drawDashed[2] then
									PEN carriagePen
									LINE_TYPE dash_line
								else
									PEN carriagePen
									LINE_TYPE carriageLineType
								endif
							endif

							! OUTER STRING
							POLY2_b 9, 1+FullFill, gs_fill_pen, temp_BackPen,
								(r-st)*COS(numSteptoBreakRight*fokszog), (r-st)*SIN(numSteptoBreakRight*fokszog),1,
								0,0,900,
								0,(rnu-numSteptoBreakRight)*fokszog, 4000,
								(r-st)*COS(rnu*fokszog),(r-st)*SIN(rnu*fokszog),1,
								(r)*COS(rnu*fokszog),(r)*SIN(rnu*fokszog),1,
								0,0,900,
								0,-(rnu-numSteptoBreakRight)*fokszog,4000,
								(r)*COS(numSteptoBreakRight*fokszog), (r)*SIN(numSteptoBreakRight*fokszog),1,
								(r-st)*COS(numSteptoBreakRight*fokszog), (r-st)*SIN(numSteptoBreakRight*fokszog),-1

							! INNER STRING
							POLY2_b 9, 1+FullFill, gs_fill_pen, temp_BackPen,
								(r-flw)*COS(numSteptoBreakRight*fokszog), (r-flw)*SIN(numSteptoBreakRight*fokszog),1,
								0,0,900,
								0,(rnu-numSteptoBreakRight)*fokszog, 4000,
								(r-flw)*COS(rnu*fokszog),(r-flw)*SIN(rnu*fokszog),1,
								(r-flw+st)*COS(rnu*fokszog),(r-flw+st)*SIN(rnu*fokszog),1,
								0,0,900,
								0,-(rnu-numSteptoBreakRight)*fokszog,4000,
								(r-flw+st)*COS(numSteptoBreakRight*fokszog), (r-flw+st)*SIN(numSteptoBreakRight*fokszog),1,
								(r-flw)*COS(numSteptoBreakRight*fokszog), (r-flw)*SIN(numSteptoBreakRight*fokszog),-1
						ENDIF

						HOTLINE2 (r-flw)*COS(rnu*fokszog),(r-flw)*SIN(rnu*fokszog),(r)*COS(rnu*fokszog),(r)*SIN(rnu*fokszog)

					FILL gs_fill_type
				ENDIF

			ENDIF

			! Nosing
			IF (drawPart[1] & drawDetails[1]) | (drawPart[3] & drawDetails[3]) THEN

				if aboveStory then
					PEN gs_LinePenStUp
					LINE_TYPE gs_LineTypeStUp
				else
					if drawDashed[1] | drawDashed[3] then
						PEN gs_DashLinePen
						LINE_TYPE dash_line
					else
						PEN gs_cont_pen
						LINE_TYPE solid_line
					endif
				endif
				POLY2_b 7, 1+2+64, gs_fill_pen, gs_back_pen,
					r-flw+st,0,1,
					0,0,900,
					0,-NosingInnerAngle, 4001,
					((r-st))*COS(NosingOuterAngle),-((r-st))*SIN(NosingOuterAngle),1,
					0,0,900,
					0,NosingOuterAngle,4000,
					r-flw+st,0,-1
			ENDIF

			endp=rnu

		! CONTOUR HOTLINE

		IF drawPart[2] THEN
			HOTARC2 0,0,(r-flw+st),0,rnu*fokszog
			HOTARC2 0,0,(r-st),0,rnu*fokszog
			ELSE
			HOTARC2 0,0,(r-flw+st),0,numSteptoBreakRight*fokszog
			HOTARC2 0,0,(r-st),0,numSteptoBreakRight*fokszog
		ENDIF

		IF iFirstTread = FIRSTTREAD_ABOVE_FLOOR_LEVEL THEN DEL 1

	! --------------------------------------------------------------------------
	! ANGLE > 360
	! --------------------------------------------------------------------------
	ELSE	! IF 2D Symbol is a Circle


		PEN gs_cont_pen
		FILL gs_fill_type

		IF drawPart[3] THEN

			if aboveStory then
				PEN gs_LinePenStUp
				LINE_TYPE gs_LineTypeStUp
			else
				if drawDashed[3] then
					PEN gs_DashLinePen
					LINE_TYPE dash_line
				else
					PEN gs_cont_pen
					LINE_TYPE solid_line
				endif
			endif
			!!! rnu*fokszog > 360 THEN
			POLY2_b 3, 1+2+64, gs_fill_pen, gs_back_pen,
				0,0,900,
				(r-st),360,4001,
				r-flw+st,360,4079
			LINE2 (r-flw+st)*COS(fokszog),(r-flw+st)*SIN(fokszog),((r-st))*COS(fokszog),((r-st))*SIN(fokszog)

			! S T R I N G S

			if bCarriageLineExist and ABS(st) > EPS then
				if aboveStory then
					PEN gs_LinePenStUp
					LINE_TYPE gs_LineTypeStUp
				else
					if drawDashed[3] then
						PEN carriagePen
						LINE_TYPE dash_line
					else
						PEN carriagePen
						LINE_TYPE carriageLineType
					endif
				endif

				! OUTER STRING
				POLY2_b 3, 1+2+64, gs_fill_pen, gs_back_pen,
					0,0,900,
					(r),360,4001,
					r-st,360,4079

				! INNER STRING
				POLY2_b 3, 1+2+64, gs_fill_pen, gs_back_pen,
					0,0,900,
					(r-flw+st),360,4001,
					r-flw,360,4079
			ENDIF

		ELSE

			IF drawPart[1] THEN
				if aboveStory then
					PEN gs_LinePenStUp
					LINE_TYPE gs_LineTypeStUp
				else
					if drawDashed[1] then
						PEN gs_DashLinePen
						LINE_TYPE dash_line
					else
						PEN gs_cont_pen
						LINE_TYPE solid_line
					endif
				endif

					POLY2_b 9, 1+2+64, gs_fill_pen, gs_back_pen,
						(r-flw+st)*COS(fokszog),(r-flw+st)*SIN(fokszog),1,
						0,0,900,
						0,(numSteptoBreakRight-1)*fokszog, 4000,
						(r-flw+st)*COS(numSteptoBreakRight*fokszog), (r-flw+st)*SIN(numSteptoBreakRight*fokszog),0,
						(r-st)*COS(numSteptoBreakRight*fokszog), (r-st)*SIN(numSteptoBreakRight*fokszog),1,
						0,0,900,
						0,-(numSteptoBreakRight-1)*fokszog,4000,
						((r-st))*COS(fokszog),((r-st))*SIN(fokszog),0,
						(r-flw+st)*COS(fokszog),(r-flw+st)*SIN(fokszog),-1

					IF not(drawSteps[1]) THEN
						LINE2 (r-flw+st)*COS(fokszog),(r-flw+st)*SIN(fokszog),((r-st))*COS(fokszog),((r-st))*SIN(fokszog)
						LINE2 (r-flw+st)*COS(numSteptoBreakRight*fokszog), (r-flw+st)*SIN(numSteptoBreakRight*fokszog),(r-st)*COS(numSteptoBreakRight*fokszog), (r-st)*SIN(numSteptoBreakRight*fokszog)
					ENDIF

					! S T R I N G S

					if bCarriageLineExist and ABS(st) > EPS then
						if aboveStory then
							PEN gs_LinePenStUp
							LINE_TYPE gs_LineTypeStUp
						else
							if drawDashed[1] then
								PEN carriagePen
								LINE_TYPE dash_line
							else
								PEN carriagePen
								LINE_TYPE carriageLineType
							endif
						endif

						! OUTER STRING
						POLY2_b 9, 1+2+64, gs_fill_pen, gs_back_pen,
							(r-st)*COS(fokszog),(r-st)*SIN(fokszog),1,
							0,0,900,
							0,(numSteptoBreakRight-1)*fokszog, 4000,
							(r-st)*COS(numSteptoBreakRight*fokszog), (r-st)*SIN(numSteptoBreakRight*fokszog),1,
							(r)*COS(numSteptoBreakRight*fokszog), (r)*SIN(numSteptoBreakRight*fokszog),1,
							0,0,900,
							0,-(numSteptoBreakRight-1)*fokszog,4000,
							((r))*COS(fokszog),((r))*SIN(fokszog),1,
							(r-st)*COS(fokszog),(r-st)*SIN(fokszog),-1

						! INNER STRING
						POLY2_b 9, 1+2+64, gs_fill_pen, gs_back_pen,
							(r-flw)*COS(fokszog),(r-flw)*SIN(fokszog),1,
							0,0,900,
							0,(numSteptoBreakRight-1)*fokszog, 4000,
							(r-flw)*COS(numSteptoBreakRight*fokszog), (r-flw)*SIN(numSteptoBreakRight*fokszog),1,
							(r-flw+st)*COS(numSteptoBreakRight*fokszog), (r-flw+st)*SIN(numSteptoBreakRight*fokszog),1,
							0,0,900,
							0,-(numSteptoBreakRight-1)*fokszog,4000,
							((r-flw+st))*COS(fokszog),((r-flw+st))*SIN(fokszog),1,
							(r-flw)*COS(fokszog),(r-flw)*SIN(fokszog),-1
					ENDIF

			ENDIF

			IF drawPart[2] THEN
				if aboveStory then
					PEN gs_LinePenStUp
					LINE_TYPE gs_LineTypeStUp
				else
					if drawDashed[2] then
						PEN gs_DashLinePen
						LINE_TYPE dash_line
					else
						PEN gs_cont_pen
						LINE_TYPE solid_line
					endif
				endif

					FILL temp_FillTypeAbove

				alphaStart =  fokszog
				alphaBegin =  numSteptoBreakRight * fokszog
				alphaEnd	= rnu * fokszog

				if abs(alphaEnd-alphaBegin) < 360 - eps | drawPart[1] then
					if not(drawPart[1]) then
						alphaUpperPart = alphaEnd - alphaBegin
						alphaClosedLine = alphaEnd
						mask = 1
					else
						alphaUpperPart = 360 - alphaBegin + alphaStart
						alphaClosedLine = fokszog
						mask = 0
					endif

					POLY2_b 9, 1+FullFill, gs_fill_pen, temp_BackPen,
						(r-flw+st)*COS(alphaBegin), (r-flw+st)*SIN(alphaBegin),1,
						0,0,900,
						0,alphaUpperPart, 4000,
						(r-flw+st)*COS(alphaClosedLine),(r-flw+st)*SIN(alphaClosedLine), mask,
						((r-st))*COS(alphaClosedLine),((r-st))*SIN(alphaClosedLine),1,
						0,0,900,
						0,-alphaUpperPart,4000,
						((r-st))*COS(alphaBegin), ((r-st))*SIN(alphaBegin),0,
						(r-flw+st)*COS(alphaBegin), (r-flw+st)*SIN(alphaBegin),-1

					if not(drawPart[1]) then line2 (r-flw+st)*COS(alphaBegin),(r-flw+st)*SIN(alphaBegin),(r-st)*COS(alphaBegin),(r-st)*SIN(alphaBegin)

					! S T R I N G S

					if bCarriageLineExist and ABS(st) > EPS then
						if aboveStory then
							PEN gs_LinePenStUp
							LINE_TYPE gs_LineTypeStUp
						else
							if drawDashed[2] then
								PEN carriagePen
								LINE_TYPE dash_line
							else
								PEN carriagePen
								LINE_TYPE carriageLineType
							endif
						endif

						! OUTER STRING
						POLY2_b 9, 1+FullFill, gs_fill_pen, temp_BackPen,
							(r-st)*COS(alphaBegin), (r-st)*SIN(alphaBegin),1,
							0,0,900,
							0,alphaUpperPart, 4000,
							(r-st)*COS(alphaClosedLine),(r-st)*SIN(alphaClosedLine),0,
							((r))*COS(alphaClosedLine),((r))*SIN(alphaClosedLine),1,
							0,0,900,
							0,-alphaUpperPart,4000,
							((r))*COS(alphaBegin), ((r))*SIN(alphaBegin),0,
							(r-st)*COS(alphaBegin), (r-st)*SIN(alphaBegin),-1


						! INNER STRING
						POLY2_b 9, 1+FullFill, gs_fill_pen, temp_BackPen,
							(r-flw)*COS(alphaBegin), (r-flw)*SIN(alphaBegin),1,
							0,0,900,
							0,alphaUpperPart, 4000,
							(r-flw)*COS(alphaClosedLine),(r-flw)*SIN(alphaClosedLine),0,
							((r-flw+st))*COS(alphaClosedLine),((r-flw+st))*SIN(alphaClosedLine),1,
							0,0,900,
							0,-alphaUpperPart,4000,
							((r-flw+st))*COS(alphaBegin), ((r-flw+st))*SIN(alphaBegin),0,
							(r-flw)*COS(alphaBegin), (r-flw)*SIN(alphaBegin),-1
					ENDIF

				else
					POLY2_b 3, 1+FullFill, gs_fill_pen, temp_BackPen,
						0,0,900,
						r-st,360,4001,
						r-flw+st,360,4079

					if not(drawSteps[2]) then line2 (r-flw+st)*COS(alphaEnd),(r-flw+st)*SIN(alphaEnd),(r-st)*COS(alphaEnd),(r-st)*SIN(alphaEnd)

					if bCarriageLineExist and ABS(st) > EPS then
						if aboveStory then
							PEN gs_LinePenStUp
							LINE_TYPE gs_LineTypeStUp
						else
							if drawDashed[2] then
								PEN carriagePen
								LINE_TYPE dash_line
							else
								PEN carriagePen
								LINE_TYPE carriageLineType
							endif
						endif

						! OUTER STRING
						POLY2_b 3, 1+FullFill, gs_fill_pen, temp_BackPen,
							0,0,900,
							r,360,4001,
							r-st,360,4079

						! INNER STRING
						POLY2_b 3, 1+FullFill, gs_fill_pen, temp_BackPen,
							0,0,900,
							r-flw,360,4001,
							r-flw+st,360,4079
					ENDIF
				endif
			ENDIF

		ENDIF

			HOTARC2 0,0,(r-flw+st),0,360
			HOTARC2 0,0,(r-st),0,360
	ENDIF


	! ==========================================================================
	! T R E A D S
	! ==========================================================================
	cns=Nosing

	! --------------------------------------------------------------------------
	! ANGLE <= 360
	! --------------------------------------------------------------------------
	IF rnu*fokszog <= 360 | \
		(_iSymbolType = 3 & drawPart[1] & not(drawPart[2]) ) | \
		(_iSymbolType = 8 & drawPart[1] & not(drawPart[2]) ) | \
		(_iSymbolType = 15 & drawPart[1] & not(drawPart[2]) ) THEN

	IF iFirstTread = FIRSTTREAD_ABOVE_FLOOR_LEVEL THEN ROT2 fokszog
	IF drawPart[3] THEN

		IF drawSteps[3] THEN

			! T R E A D S
			if aboveStory then
				PEN gs_LinePenStUp
				LINE_TYPE gs_LineTypeStUp
			else
				if drawDashed[3] then
					PEN gs_DashLinePen
					LINE_TYPE dash_line
				else
					PEN gs_cont_pen
					LINE_TYPE solid_line
				endif
			endif
			FOR i=1 to endp-1
				dx=-(cns)*SIN(-i*fokszog)
				dy=-(cns)*COS(-i*fokszog)

				LINE2 ((r-flw+st))*COS(i*fokszog)+dx, ((r-flw+st))*SIN(i*fokszog)+dy,
					(r-st)*COS(i*fokszog)+dx, (r-st)*SIN(i*fokszog)+dy

				HOTLINE2 ((r-flw+st))*COS(i*fokszog)+dx, ((r-flw+st))*SIN(i*fokszog)+dy,
					(r-st)*COS(i*fokszog)+dx, (r-st)*SIN(i*fokszog)+dy
			NEXT i


			! N O S I N G
			IF drawDetails[3] THEN
				PEN gs_DashLinePen
				LINE_TYPE dash_line

				FOR i=0 to endp
					IF i=endp THEN
						if aboveStory then
							PEN gs_LinePenStUp
							LINE_TYPE gs_LineTypeStUp
						else
							if drawDashed[3] then
								PEN gs_DashLinePen
								LINE_TYPE dash_line
							else
								PEN gs_cont_pen
								LINE_TYPE solid_line
							endif
						endif
					endif

					LINE2 ((r-flw+st))*COS(i*fokszog), ((r-flw+st))*SIN(i*fokszog),
						(r-st)*COS(i*fokszog), (r-st)*SIN(i*fokszog)

				NEXT i
			ENDIF
		ENDIF

	ELSE

		IF (drawPart[1] & drawSteps[1]) THEN

			! T R E A D S
			if aboveStory then
				PEN gs_LinePenStUp
				LINE_TYPE gs_LineTypeStUp
			else
				if drawDashed[1] then
					PEN gs_DashLinePen
					LINE_TYPE dash_line
				else
					PEN gs_cont_pen
					LINE_TYPE solid_line
				endif
			endif
			FOR i=1 to numSteptoBreakRight
				dx=-(cns)*SIN(-i*fokszog)
				dy=-(cns)*COS(-i*fokszog)

				LINE2 ((r-flw+st))*COS(i*fokszog)+dx, ((r-flw+st))*SIN(i*fokszog)+dy,
					(r-st)*COS(i*fokszog)+dx, (r-st)*SIN(i*fokszog)+dy

				HOTLINE2 ((r-flw+st))*COS(i*fokszog)+dx, ((r-flw+st))*SIN(i*fokszog)+dy,
					(r-st)*COS(i*fokszog)+dx, (r-st)*SIN(i*fokszog)+dy
			NEXT i


			! N O S I N G
			IF drawDetails[1] THEN
				PEN gs_DashLinePen
				LINE_TYPE dash_line
				FOR i=0 to numSteptoBreakRight

					LINE2 ((r-flw+st))*COS(i*fokszog), ((r-flw+st))*SIN(i*fokszog),
						(r-st)*COS(i*fokszog), (r-st)*SIN(i*fokszog)

				NEXT i
			ENDIF
		ENDIF

		IF (drawPart[2] & drawSteps[2]) THEN

			! T R E A D S
			if aboveStory then
				PEN gs_LinePenStUp
				LINE_TYPE gs_LineTypeStUp
			else
				if drawDashed[2] then
					PEN gs_DashLinePen
					LINE_TYPE dash_line
				else
					PEN gs_cont_pen
					LINE_TYPE solid_line
				endif
			endif

			! Buggy !!!!!!!!!!!!
			if _iSymbolType <> 19 then
			! Buggy !!!!!!!!!!!!
				FOR i=i2 to endp-1
					dx=-(cns)*SIN(-i*fokszog)
					dy=-(cns)*COS(-i*fokszog)

					LINE2 ((r-flw+st))*COS(i*fokszog)+dx, ((r-flw+st))*SIN(i*fokszog)+dy,
						(r-st)*COS(i*fokszog)+dx, (r-st)*SIN(i*fokszog)+dy

					HOTLINE2 ((r-flw+st))*COS(i*fokszog)+dx, ((r-flw+st))*SIN(i*fokszog)+dy,
						(r-st)*COS(i*fokszog)+dx, (r-st)*SIN(i*fokszog)+dy
				NEXT i
			ENDIF


			IF drawDetails[2] | _iSymbolType = 19 THEN
				! N O S I N G

				FOR i=i2 to endp
					PEN gs_DashLinePen
					LINE_TYPE dash_line


					IF i = endp THEN
						if aboveStory then
							PEN gs_LinePenStUp
							LINE_TYPE gs_LineTypeStUp
						else
							if drawDashed[2] then
								PEN gs_DashLinePen
								LINE_TYPE dash_line
							else
								PEN gs_cont_pen
								LINE_TYPE solid_line
							endif
						endif
					endif

					LINE2 ((r-flw+st))*COS(i*fokszog), ((r-flw+st))*SIN(i*fokszog),
						(r-st)*COS(i*fokszog), (r-st)*SIN(i*fokszog)

				NEXT i
			ENDIF
		ENDIF
	ENDIF
	IF iFirstTread = FIRSTTREAD_ABOVE_FLOOR_LEVEL THEN DEL 1

	! --------------------------------------------------------------------------
	! ANGLE > 360
	! --------------------------------------------------------------------------
ELSE	! IF 2D Symbol is a Circle


	IF FRA(360/fokszog) >0.5 THEN ! Last Step
		temp_360End=1
		ELSE
		temp_360End=0
	ENDIF

	IF drawPart[3] THEN

		IF drawSteps[3] THEN
			! T R E A D S
			if aboveStory then
				PEN gs_LinePenStUp
				LINE_TYPE gs_LineTypeStUp
			else
				if drawDashed[3] then
					PEN gs_DashLinePen
					LINE_TYPE dash_line
				else
					PEN gs_cont_pen
					LINE_TYPE solid_line
				endif
			endif
			FOR i=1 to 360/fokszog+temp_360End
				dx=-(cns)*SIN(-i*fokszog)
				dy=-(cns)*COS(-i*fokszog)

				LINE2 ((r-flw+st))*COS(i*fokszog)+dx, ((r-flw+st))*SIN(i*fokszog)+dy,
					(r-st)*COS(i*fokszog)+dx, (r-st)*SIN(i*fokszog)+dy

				HOTLINE2 ((r-flw+st))*COS(i*fokszog)+dx, ((r-flw+st))*SIN(i*fokszog)+dy,
					(r-st)*COS(i*fokszog)+dx, (r-st)*SIN(i*fokszog)+dy
			NEXT i

			! N O S I N G
			IF drawDetails[3] THEN
				PEN gs_DashLinePen
				LINE_TYPE dash_line
				FOR i=1 to 360/fokszog+temp_360End
					IF i=360/fokszog+temp_360End THEN PEN NosingPen
					IF i=360/fokszog+temp_360End THEN SET LINE_TYPE NosingLine

					LINE2 ((r-flw+st))*COS(i*fokszog), ((r-flw+st))*SIN(i*fokszog),
						(r-st)*COS(i*fokszog), (r-st)*SIN(i*fokszog)

				NEXT i
			ENDIF
		ENDIF

	ELSE

		IF drawPart[1] & drawSteps[1] THEN

			! T R E A D S
			if aboveStory then
				PEN gs_LinePenStUp
				LINE_TYPE gs_LineTypeStUp
			else
				if drawDashed[1] then
					PEN gs_DashLinePen
					LINE_TYPE dash_line
				else
					PEN gs_cont_pen
					LINE_TYPE solid_line
				endif
			endif
			FOR i=1 to numSteptoBreakRight
				dx=-(cns)*SIN(-i*fokszog)
				dy=-(cns)*COS(-i*fokszog)

				LINE2 ((r-flw+st))*COS(i*fokszog)+dx, ((r-flw+st))*SIN(i*fokszog)+dy,
					(r-st)*COS(i*fokszog)+dx, (r-st)*SIN(i*fokszog)+dy

				HOTLINE2 ((r-flw+st))*COS(i*fokszog)+dx, ((r-flw+st))*SIN(i*fokszog)+dy,
					(r-st)*COS(i*fokszog)+dx, (r-st)*SIN(i*fokszog)+dy
			NEXT i


			! N O S I N G
			IF drawDetails[1] THEN
				PEN gs_DashLinePen
				LINE_TYPE dash_line
				FOR i=1 to numSteptoBreakRight

					LINE2 ((r-flw+st))*COS(i*fokszog), ((r-flw+st))*SIN(i*fokszog),
						(r-st)*COS(i*fokszog), (r-st)*SIN(i*fokszog)

				NEXT i
			ENDIF
		ENDIF

		IF drawPart[2] & drawSteps[2] THEN
			! T R E A D S
			if aboveStory then
				PEN gs_LinePenStUp
				LINE_TYPE gs_LineTypeStUp
			else
				if drawDashed[2] then
					PEN gs_DashLinePen
					LINE_TYPE dash_line
				else
					PEN gs_cont_pen
					LINE_TYPE solid_line
				endif
			endif

			alphaStart =  fokszog
			alphaBegin =  numSteptoBreakRight * fokszog
			alphaEnd	= rnu * fokszog

			if abs(alphaEnd-alphaBegin) < 360 - eps | drawPart[1] then
				if not(drawPart[1]) then
					treadBegin = numSteptoBreakRight + 1
					treadEnd = rnu
				else
					treadBegin = numSteptoBreakRight + 1
					treadEnd = 360/fokszog
				endif
			else
				treadBegin = 1
				treadEnd = 360/fokszog
			endif

			! Buggy !!!!!!!!!!!!
			if _iSymbolType <> 19 then
			! Buggy !!!!!!!!!!!!

				FOR i = treadBegin to treadEnd

					dx=-(cns)*SIN(-i*fokszog)
					dy=-(cns)*COS(-i*fokszog)

					LINE2 ((r-flw+st))*COS(i*fokszog)+dx, ((r-flw+st))*SIN(i*fokszog)+dy,
						(r-st)*COS(i*fokszog)+dx, (r-st)*SIN(i*fokszog)+dy

					HOTLINE2 ((r-flw+st))*COS(i*fokszog)+dx, ((r-flw+st))*SIN(i*fokszog)+dy,
						(r-st)*COS(i*fokszog)+dx, (r-st)*SIN(i*fokszog)+dy
				NEXT i

			! Buggy !!!!!!!!!!!!
			endif
			! Buggy !!!!!!!!!!!!

				! N O S I N G
				IF drawDetails[2] | _iSymbolType = 19 THEN
					PEN gs_DashLinePen
					LINE_TYPE dash_line

					FOR i = treadBegin to treadEnd

						LINE2 ((r-flw+st))*COS(i*fokszog), ((r-flw+st))*SIN(i*fokszog),
							(r-st)*COS(i*fokszog), (r-st)*SIN(i*fokszog)

					NEXT i
				ENDIF
		ENDIF
	ENDIF

ENDIF


! ==============================================================================
! ARROWHEAD / WALKING LINE / START END SYMBOL
! ==============================================================================

IF walkl THEN
	DRAWINDEX 40

	IF rnu*fokszog <= 360| \
		(_iSymbolType = 3 & drawPart[1] & not(drawPart[2]) ) | \
		(_iSymbolType = 8 & drawPart[1] & not(drawPart[2]) ) | \
		(_iSymbolType = 15 & drawPart[1] & not(drawPart[2]) ) THEN


		IF iFirstTread = FIRSTTREAD_ABOVE_FLOOR_LEVEL THEN ROT2 fokszog

		! Start Point of Walking Lines
		IF iFirstTread = FIRSTTREAD_ABOVE_FLOOR_LEVEL THEN
			temp_fokszog=0
			temp_StartEndFokszog=0
		ELSE
			temp_fokszog=fokszog
			temp_StartEndFokszog=fokszog
		ENDIF

		IF iTopTread = TOPTREAD_BELOW_FLOOR_LEVEL THEN
			temp_endp=endp
		ELSE
			temp_endp=endp-1
		ENDIF
	ELSE
		temp_StartEndFokszog=fokszog
		temp_fokszog=fokszog
		temp_endp=rnu
	ENDIF



	! --------------------------------------------------------------------------
	! ARROWHEAD
	! --------------------------------------------------------------------------

	ArrowDist=gs_ArrowHalfWidth

	! Arrowhead Contour Conditions
	IF arrow_style_m = ARROW_STYLE_1 OR arrow_style_m = ARROW_STYLE_2 OR arrow_style_m = ARROW_STYLE_3 THEN
		temp_ArrowMask=0
	else
		temp_ArrowMask=1
	ENDIF

	! Arrowhead Contour Points Conditions
	IF arrow_style_m = ARROW_STYLE_1 OR arrow_style_m = ARROW_STYLE_4 OR arrow_style_m = ARROW_STYLE_7 THEN
		temp_HeadBelowX=(wldo)*COS((numSteptoBreakRight)*fokszog)
		temp_HeadBelowY=(wldo)*SIN((numSteptoBreakRight)*fokszog)
		temp_InnerBelowX=((r-flw+st))*COS((numSteptoBreakRight-1)*fokszog)
		temp_InnerBelowY=((r-flw+st))*SIN((numSteptoBreakRight-1)*fokszog)
		temp_OuterBelowX=((r-st))*COS((numSteptoBreakRight-1)*fokszog)
		temp_OuterBelowY=((r-st))*SIN((numSteptoBreakRight-1)*fokszog)

		temp_HeadAboveX=(wldo)*COS(INT(temp_endp)*fokszog)
		temp_HeadAboveY=(wldo)*SIN(INT(temp_endp)*fokszog)
		temp_InnerAboveX=((r-flw+st))*COS((INT(temp_endp)-1)*fokszog)
		temp_InnerAboveY=((r-flw+st))*SIN((INT(temp_endp)-1)*fokszog)
		temp_OuterAboveX=((r-st))*COS((INT(temp_endp)-1)*fokszog)
		temp_OuterAboveY=((r-st))*SIN((INT(temp_endp)-1)*fokszog)
	ENDIF

	IF arrow_style_m = ARROW_STYLE_2 OR arrow_style_m = ARROW_STYLE_5 OR arrow_style_m = ARROW_STYLE_8 THEN
		temp_HeadBelowX=(wldo)*COS((numSteptoBreakRight)*fokszog)
		temp_HeadBelowY=(wldo)*SIN((numSteptoBreakRight)*fokszog)
		temp_InnerBelowX=((wldo+(r-flw+st))/2)*COS((numSteptoBreakRight-1)*fokszog)
		temp_InnerBelowY=((wldo+(r-flw+st))/2)*SIN((numSteptoBreakRight-1)*fokszog)
		temp_OuterBelowX=((wldo+(r-st))/2)*COS((numSteptoBreakRight-1)*fokszog)
		temp_OuterBelowY=((wldo+(r-st))/2)*SIN((numSteptoBreakRight-1)*fokszog)

		temp_HeadAboveX=(wldo)*COS(INT(temp_endp)*fokszog)
		temp_HeadAboveY=(wldo)*SIN(INT(temp_endp)*fokszog)
		temp_InnerAboveX=((wldo+(r-flw+st))/2)*COS((INT(temp_endp)-1)*fokszog)
		temp_InnerAboveY=((wldo+(r-flw+st))/2)*SIN((INT(temp_endp)-1)*fokszog)
		temp_OuterAboveX=((wldo+(r-st))/2)*COS((INT(temp_endp)-1)*fokszog)
		temp_OuterAboveY=((wldo+(r-st))/2)*SIN((INT(temp_endp)-1)*fokszog)
	ENDIF

	IF arrow_style_m = ARROW_STYLE_3 OR arrow_style_m = ARROW_STYLE_6 OR arrow_style_m = ARROW_STYLE_9 THEN
		temp_HeadX=0
		temp_HeadY=0
		temp_InnerX=-ArrowDist
		temp_InnerY=-gs_ArrowHeight
		temp_OuterX=ArrowDist
		temp_OuterY=-gs_ArrowHeight
	ENDIF

	! Arrowhead Fill Contour Points Conditions

	IF arrow_style_m = ARROW_STYLE_4 OR arrow_style_m = ARROW_STYLE_5 THEN
		temp_InnerBelowXFill=temp_InnerBelowX
		temp_InnerBelowYFill=temp_InnerBelowY
		temp_InnerAboveXFill=temp_InnerAboveX
		temp_InnerAboveYFill=temp_InnerAboveY
	ENDIF

	IF arrow_style_m = ARROW_STYLE_7 OR arrow_style_m = ARROW_STYLE_8 THEN
		temp_InnerBelowXFill=(wldo)*COS((numSteptoBreakRight-1)*fokszog)
		temp_InnerBelowYFill=(wldo)*SIN((numSteptoBreakRight-1)*fokszog)
		temp_InnerAboveXFill=(wldo)*COS(INT(temp_endp-1)*fokszog)
		temp_InnerAboveYFill=(wldo)*SIN(INT(temp_endp-1)*fokszog)
	ENDIF

	IF arrow_style_m = ARROW_STYLE_6 THEN
		temp_InnerXFill=temp_InnerX
	ENDIF

	IF arrow_style_m = ARROW_STYLE_9 THEN
		temp_InnerXFill=0
	ENDIF


	! Arrowhead Symbols/ Contour and Fill

	pen gs_wLinePen
	fill gs_ArrowFill

	! --- Above Break Line ---
	IF drawPart[3] | drawPart[2] THEN

		if aboveStory then
			LINE_TYPE gs_wLineTypeStUp
		else
			if drawDashed[3] | drawDashed[2] then
				LINE_TYPE gs_wLineTypeAbove
			else
				LINE_TYPE gs_wLineType1
			endif
		endif

		IF arrow_style_m <> ARROW_STYLE_3 AND arrow_style_m <> ARROW_STYLE_6 AND arrow_style_m <> ARROW_STYLE_9 THEN
			! Arrow Style=1,2,4,5,7,8
			! Geometry of ArrowHead Contour
			POLY2_b 4, 1, gs_ArrowFillPenAbove, gs_fill_pen,
					temp_HeadAboveX,temp_HeadAboveY, 1,
					temp_InnerAboveX,temp_InnerAboveY, temp_ArrowMask,
					temp_OuterAboveX,temp_OuterAboveY, 1,
					temp_HeadAboveX,temp_HeadAboveY, -1

			IF gs_ArrowFillPenAbove<>0 THEN
				IF arrow_style_m <> ARROW_STYLE_1 AND arrow_style_m <> ARROW_STYLE_2 THEN
					! Geometry of ArrowHead Fill
					POLY2_b 4, 1+2, gs_ArrowFillPenAbove, gs_fill_pen,
							temp_HeadAboveX,temp_HeadAboveY, 1,
							temp_InnerAboveXFill,temp_InnerAboveYFill, 0,
							temp_OuterAboveX,temp_OuterAboveY, 0,
							temp_HeadAboveX,temp_HeadAboveY, -1
				ENDIF
			ENDIF
		ELSE
			! Arrow Style=3,6,9
			! Geometry of ArrowHead Contour

			ROT2 temp_endp*fokszog
			ADD2 wldo,0
			POLY2_b 4, 1, gs_ArrowFillPen, gs_fill_pen,
					temp_HeadX,temp_HeadY, 1,
					temp_InnerX,temp_InnerY, temp_ArrowMask,
					temp_OuterX,temp_OuterY, 1,
					temp_HeadX,temp_HeadY, -1

			IF gs_ArrowFillPenAbove<>0 THEN
				IF arrow_style_m <> ARROW_STYLE_3 THEN
					! Geometry of ArrowHead Fill
					POLY2_b 4, 1+2, gs_ArrowFillPenAbove, gs_fill_pen,
							temp_HeadX,temp_HeadY, 1,
							temp_InnerXFill,temp_InnerY, 0,
							temp_OuterX,temp_OuterY, 0,
							temp_HeadX,temp_HeadY, -1
				ENDIF
			ENDIF
			DEL 2
		ENDIF
	ENDIF

	! --- Below Break Line ---
	IF drawPart[1] THEN

		if aboveStory then
			LINE_TYPE gs_wLineTypeStUp
		else
			if drawDashed[1] then
				LINE_TYPE gs_wLineTypeAbove
			else
				LINE_TYPE gs_wLineType1
			endif
		endif

		IF arrow_style_m <> ARROW_STYLE_3 AND arrow_style_m <> ARROW_STYLE_6 AND arrow_style_m <> ARROW_STYLE_9 THEN
			! Arrow Style=1,2,4,5,7,8
			! Geometry of ArrowHead Contour
			POLY2_b 4, 1, gs_ArrowFillPen, gs_fill_pen,
					temp_HeadBelowX,temp_HeadBelowY, 1,
					temp_InnerBelowX,temp_InnerBelowY, temp_ArrowMask,
					temp_OuterBelowX,temp_OuterBelowY, 1,
					temp_HeadBelowX,temp_HeadBelowY, -1

			IF gs_ArrowFillPen<>0 THEN
				IF arrow_style_m <> ARROW_STYLE_1 AND arrow_style_m <> ARROW_STYLE_2 THEN
					! Geometry of ArrowHead Fill
					POLY2_b 4, 1+2, gs_ArrowFillPen, gs_fill_pen,
							temp_HeadBelowX,temp_HeadBelowY, 1,
							temp_InnerBelowXFill,temp_InnerBelowYFill, 0,
							temp_OuterBelowX,temp_OuterBelowY, 0,
							temp_HeadBelowX,temp_HeadBelowY, -1
				ENDIF
			ENDIF
		ELSE
			! Arrow Style=3,6,9
			! Geometry of ArrowHead Contour

			ROT2 numSteptoBreakRight*fokszog
			ADD2 wldo,0
			POLY2_b 4, 1, gs_ArrowFillPen, gs_fill_pen,
					temp_HeadX,temp_HeadY, 1,
					temp_InnerX,temp_InnerY, temp_ArrowMask,
					temp_OuterX,temp_OuterY, 1,
					temp_HeadX,temp_HeadY, -1

			IF gs_ArrowFillPen<>0 THEN
				IF arrow_style_m <> ARROW_STYLE_3 THEN
					! Geometry of ArrowHead Fill
					POLY2_b 4, 1+2, gs_ArrowFillPen, gs_fill_pen,
							temp_HeadX,temp_HeadY, 1,
							temp_InnerXFill,temp_InnerY, 0,
							temp_OuterX,temp_OuterY, 0,
							temp_HeadX,temp_HeadY, -1
				ENDIF
			ENDIF
			DEL 2
		ENDIF
	ENDIF

	! --- Hotspots of StartEnd Symbol ---
	IF drawPart[1] THEN
		ROT2 numSteptoBreakRight*fokszog

		ArrowUNID=4000
		HOTSPOT2 wldo,0,ArrowUNID: ArrowUNID=ArrowUNID+1

		IF arrow_style_m = ARROW_STYLE_3 OR arrow_style_m = ARROW_STYLE_6 OR arrow_style_m = ARROW_STYLE_9 THEN
			ADD2 wldo,0
			ROT2 180

			ArrowUNID=4100

			HOTSPOT2 -ArrowDist,0,	ArrowUNID, gs_ArrowHeight, 1+128 : ArrowUNID=ArrowUNID+1
			HOTSPOT2 -ArrowDist,gs_ArrowHeight, ArrowUNID, gs_ArrowHeight, 2 : ArrowUNID=ArrowUNID+1
			HOTSPOT2 -ArrowDist,-1,	ArrowUNID, gs_ArrowHeight, 3: ArrowUNID=ArrowUNID+1

			HOTSPOT2 ArrowDist,0,	ArrowUNID, gs_ArrowHeight, 1+128 : ArrowUNID=ArrowUNID+1
			HOTSPOT2 ArrowDist,gs_ArrowHeight, ArrowUNID, gs_ArrowHeight, 2 : ArrowUNID=ArrowUNID+1
			HOTSPOT2 ArrowDist,-1,	ArrowUNID, gs_ArrowHeight, 3: ArrowUNID=ArrowUNID+1

			HOTSPOT2 0,gs_ArrowHeight,	ArrowUNID, gs_ArrowHalfWidth, 1+128 : ArrowUNID=ArrowUNID+1
			HOTSPOT2 gs_ArrowHalfWidth,gs_ArrowHeight, ArrowUNID, gs_ArrowHalfWidth, 2 : ArrowUNID=ArrowUNID+1
			HOTSPOT2 -1,gs_ArrowHeight,	ArrowUNID, gs_ArrowHalfWidth, 3: ArrowUNID=ArrowUNID+1

			HOTSPOT2 0,gs_ArrowHeight,	ArrowUNID, gs_ArrowHalfWidth, 1+128 : ArrowUNID=ArrowUNID+1
			HOTSPOT2 -gs_ArrowHalfWidth,gs_ArrowHeight, ArrowUNID, gs_ArrowHalfWidth, 2 : ArrowUNID=ArrowUNID+1
			HOTSPOT2 1,gs_ArrowHeight,	ArrowUNID, gs_ArrowHalfWidth, 3: ArrowUNID=ArrowUNID+1

			DEL 2
		ENDIF

		DEL 1
	ENDIF

	IF drawPart[2] THEN

		ROT2 temp_endp*fokszog

		ArrowUNID=4200
		HOTSPOT2 wldo,0,ArrowUNID: ArrowUNID=ArrowUNID+1

		IF arrow_style_m = ARROW_STYLE_3 OR arrow_style_m = ARROW_STYLE_6 OR arrow_style_m = ARROW_STYLE_9 THEN
			ADD2 wldo,0
			ROT2 180

			ArrowUNID=4300

			HOTSPOT2 -ArrowDist,0,	ArrowUNID, gs_ArrowHeight, 1+128 : ArrowUNID=ArrowUNID+1
			HOTSPOT2 -ArrowDist,gs_ArrowHeight, ArrowUNID, gs_ArrowHeight, 2 : ArrowUNID=ArrowUNID+1
			HOTSPOT2 -ArrowDist,-1,	ArrowUNID, gs_ArrowHeight, 3: ArrowUNID=ArrowUNID+1

			HOTSPOT2 ArrowDist,0,	ArrowUNID, gs_ArrowHeight, 1+128 : ArrowUNID=ArrowUNID+1
			HOTSPOT2 ArrowDist,gs_ArrowHeight, ArrowUNID, gs_ArrowHeight, 2 : ArrowUNID=ArrowUNID+1
			HOTSPOT2 ArrowDist,-1,	ArrowUNID, gs_ArrowHeight, 3: ArrowUNID=ArrowUNID+1

			HOTSPOT2 0,gs_ArrowHeight,	ArrowUNID, gs_ArrowHalfWidth, 1+128 : ArrowUNID=ArrowUNID+1
			HOTSPOT2 gs_ArrowHalfWidth,gs_ArrowHeight, ArrowUNID, gs_ArrowHalfWidth, 2 : ArrowUNID=ArrowUNID+1
			HOTSPOT2 -1,gs_ArrowHeight,	ArrowUNID, gs_ArrowHalfWidth, 3: ArrowUNID=ArrowUNID+1

			HOTSPOT2 0,gs_ArrowHeight,	ArrowUNID, gs_ArrowHalfWidth, 1+128 : ArrowUNID=ArrowUNID+1
			HOTSPOT2 -gs_ArrowHalfWidth,gs_ArrowHeight, ArrowUNID, gs_ArrowHalfWidth, 2 : ArrowUNID=ArrowUNID+1
			HOTSPOT2 1,gs_ArrowHeight,	ArrowUNID, gs_ArrowHalfWidth, 3: ArrowUNID=ArrowUNID+1
			DEL 2
		ENDIF
		DEL 1
	ENDIF


	! --------------------------------------------------------------------------
	! WALKING LINE
	! --------------------------------------------------------------------------
	DRAWINDEX 30
	PEN gs_wLinePen

	IF drawPart[3] THEN

		if aboveStory then
			LINE_TYPE gs_wLineTypeStUp
		else
			if drawDashed[3] then
				LINE_TYPE gs_wLineTypeAbove
			else
				LINE_TYPE gs_wLineType1
			endif
		endif
		ARC2 0,0,wldo, temp_fokszog, INT(temp_endp)*fokszog
	ELSE
		IF drawPart[1] THEN
			if aboveStory then
				LINE_TYPE gs_wLineTypeStUp
			else
				if drawDashed[1] then
					LINE_TYPE gs_wLineTypeAbove
				else
					LINE_TYPE gs_wLineType1
				endif
			endif
			ARC2 0,0,wldo, temp_fokszog, numSteptoBreakRight*fokszog
		ENDIF

		IF drawPart[2] THEN
			if aboveStory then
				LINE_TYPE gs_wLineTypeStUp
			else
				if drawDashed[2] then
					LINE_TYPE gs_wLineTypeAbove
				else
					LINE_TYPE gs_wLineType1
				endif
			endif
			ARC2 0,0,wldo, numSteptoBreakRight*fokszog, INT(temp_endp)*fokszog
		ENDIF
	ENDIF


	! --- START END SYMBOL ---
	DRAWINDEX 40


	fill gs_StartEndFill

	IF gs_StartEndFillPen<>0 THEN temp_FillStatus=2
	IF gs_StartEndFillPen=0 THEN temp_FillStatus=0

	ROT2 temp_StartEndFokszog
	ADD2 wldo,0
	IF drawPart[1] | drawPart[3] THEN
		if aboveStory then
			LINE_TYPE gs_wLineTypeStUp
		else
			if drawDashed[1] | drawDashed[3] then
				LINE_TYPE gs_wLineTypeAbove
			else
				LINE_TYPE gs_wLineType1
			endif
		endif
		IF gs_StartEndStyle_m = STARTSYMB_STYLE1 THEN
			POLY2_B 2, 1+temp_FillStatus, gs_StartEndFillPen, gs_fill_pen,
					0,0,901,
					gs_CircleRadius,360,4001
		ENDIF

		IF gs_StartEndStyle_m = STARTSYMB_STYLE2 THEN
			FOR kk=1 TO 2
				POLY2_B 6, 1+temp_FillStatus, gs_StartEndFillPen, gs_fill_pen,
						0,0,1,
						0+gs_CircleRadius,0,1,
						0,0,901,
						0,90,4001,
						0,0+gs_CircleRadius,0,
						0,0,-1

				POLY2_B 6, 1, gs_StartEndFillPen, gs_fill_pen,
						0,0,1,
						0,0+gs_CircleRadius,1,
						0,0,901,
						0,90,4001,
						0-gs_CircleRadius,0,0,
						0,0,-1
				ROT2 180
				ADD2 0,2*(0)
			NEXT kk
			DEL 4
		ENDIF

		IF gs_StartEndStyle_m = STARTSYMB_STYLE3 THEN
			LINE2 0+gs_StartWidth,0-gs_StartHeight,0+gs_StartWidth,0+gs_StartHeight
			LINE2 0-gs_StartWidth,0-gs_StartHeight,0-gs_StartWidth,0+gs_StartHeight
		ENDIF

	ENDIF


	! Hotspots of StartEnd Symbol

	IF gs_StartEndStyle_m = STARTSYMB_STYLE1 OR gs_StartEndStyle_m = STARTSYMB_STYLE2 THEN
		StartSymbUNID=3000

		FOR kk=1 to 4
			HOTSPOT2 0, 0, StartSymbUNID, gs_CircleRadius, 1+128		:StartSymbUNID=StartSymbUNID+1
			HOTSPOT2 -1, 0, StartSymbUNID, gs_CircleRadius, 3+128	:StartSymbUNID=StartSymbUNID+1
			HOTSPOT2 gs_CircleRadius, 0, StartSymbUNID, gs_CircleRadius,2	:StartSymbUNID=StartSymbUNID+1
			ROT2 90
		NEXT KK
		DEL 4
	ENDIF

	IF gs_StartEndStyle_m = STARTSYMB_STYLE3 THEN

		StartSymbUNID=3100

		FOR kk=1 to 2
			ADD2 0, 0
			! Symbol Width/2
			HOTSPOT2 0, -gs_StartHeight, StartSymbUNID, gs_StartWidth, 1+128		:StartSymbUNID=StartSymbUNID+1
			HOTSPOT2 -1, -gs_StartHeight, StartSymbUNID, gs_StartWidth, 3	:StartSymbUNID=StartSymbUNID+1
			HOTSPOT2 gs_StartWidth, -gs_StartHeight, StartSymbUNID, gs_StartWidth,2	:StartSymbUNID=StartSymbUNID+1

			HOTSPOT2 0, gs_StartHeight, StartSymbUNID, gs_StartWidth, 1+128		:StartSymbUNID=StartSymbUNID+1
			HOTSPOT2 -1, gs_StartHeight, StartSymbUNID, gs_StartWidth, 3	:StartSymbUNID=StartSymbUNID+1
			HOTSPOT2 gs_StartWidth, gs_StartHeight, StartSymbUNID, gs_StartWidth,2	:StartSymbUNID=StartSymbUNID+1
			DEL 1

			ADD2 0, 0
			! Symbol Height
			HOTSPOT2 gs_StartWidth, 0, StartSymbUNID, gs_StartHeight, 1+128		:StartSymbUNID=StartSymbUNID+1
			HOTSPOT2 gs_StartWidth, -1, StartSymbUNID, gs_StartHeight, 3	:StartSymbUNID=StartSymbUNID+1
			HOTSPOT2 gs_StartWidth, gs_StartHeight, StartSymbUNID, gs_StartHeight,2	:StartSymbUNID=StartSymbUNID+1

			HOTSPOT2 gs_StartWidth, 0, StartSymbUNID, gs_StartHeight, 1+128		:StartSymbUNID=StartSymbUNID+1
			HOTSPOT2 gs_StartWidth, 1, StartSymbUNID, gs_StartHeight, 3	:StartSymbUNID=StartSymbUNID+1
			HOTSPOT2 gs_StartWidth, -gs_StartHeight, StartSymbUNID, gs_StartHeight,2	:StartSymbUNID=StartSymbUNID+1
			DEL 1

			MUL2 -1,1
		NEXT kk
		DEL 2
	ENDIF

	DEL 2

		IF rnu*fokszog <= 360| \
			(_iSymbolType = 3 & drawPart[1] & not(drawPart[2]) ) | \
			(_iSymbolType = 8 & drawPart[1] & not(drawPart[2]) ) | \
			(_iSymbolType = 15 & drawPart[1] & not(drawPart[2]) ) THEN

		IF iFirstTread = FIRSTTREAD_ABOVE_FLOOR_LEVEL THEN DEL 1
	ENDIF

ENDIF		! if walkl


!===============================================================================
! --- Text / Up-Down Text / Numbering ---
!===============================================================================

! --- Oriented View ------------------------------ [

angleViewRot = 0
if bShowRiseAndRunText | walkingDirUPDN_m <> WALKDIRSTR_NONE | (drawNum[1]|drawNum[2]|drawNum[3])  then
	rrr = REQUEST ("View_Rotangle", "", angleViewRot)
endif
totalRotate = (SYMB_ROTANGLE + angleViewRot) MOD 360

! --- Oriented View ------------------------------ ]

! --- Define Font Style --------------------------------------------------------


DEFINE STYLE "UPDN" fontType, UPDNfontsize, 5, 0		  	!!- UP/DN
SET STYLE "UPDN"

DEFINE STYLE "stepnum_tread" fontType, fontsize, 5, 0		!!- riser and number
define style{2} "rnrTextfrac" fontType, fontsize, 32		! rise & run text with superscript
SET STYLE "stepnum_tread"

DEFINE STYLE "stepnum" fontType, gs_NumTextSize, 5, 0		!! - Numbering
SET STYLE "stepnum"

DEFINE STYLE myfs fontType,tdfs,5,0
SET STYLE myfs

! --- Rise and Run Text -------------------------------------------------------
DRAWINDEX 50

pen gs_text_pen

! Z DIMENSION
IF rnu*fokszog <= 360 THEN
	IF iTopTread = TOPTREAD_BELOW_FLOOR_LEVEL THEN rnuu=rnu ELSE rnuu=rnu
	IF iFirstTread = FIRSTTREAD_AT_FLOOR_LEVEL THEN rnuu=rnuu-1
ELSE
	IF iTopTread = TOPTREAD_BELOW_FLOOR_LEVEL THEN rnuu=rnu-1 ELSE rnuu=rnu
	IF iFirstTread = FIRSTTREAD_AT_FLOOR_LEVEL THEN rnuu=rnuu-1
ENDIF

if bShowRiseAndRunText then
	add2 COS(60) * wldo, SIN(60) * wldo
	rot2 -30
		call "Stair_RiseRun_Text" PARAMETERS ALL	totalRotate				= totalRotate - 30,
													iRotateType 			= 2,
													iRiseRunTextPosition	= 2,
													treadHeight				= th,
													treadDepth				= td,
													nRisers					= rnuu,
													flightWidth				= 0,
													RiseRunUNID				= 5000
	del 2
endif

! --- Up and Down Text -------------------------------------------------------
iReadable = 0
if iFirstTread = FIRSTTREAD_ABOVE_FLOOR_LEVEL then rot2 fokszog
if walkingDirUPDN_m <> WALKDIRSTR_NONE and walkl then
	set style "UPDN"
	pen UPDNfontpen

	nTransUPDN = 0
	nTransHotspot = 0
	add2 wldo+DirUPDN_X,DirUPDN_Y
	nTransUPDN = nTransUPDN + 1
	! Text Rotation - Readable / Parallel with Walking Line / Align with Symbol
	! ----------------------------------------------------------------------
	if typeTextRotation_UpDn_m = 2 then									! Readable
		if (totalRotate > (gs_readable_angle + eps) & totalRotate < (gs_readable_angle + 180 + eps)) then
			rot2 180
			nTransUPDN = nTransUPDN + 1
		endif
	else
		if typeTextRotation_UpDn_m = 1 then								! Parallel with Walking Line
			if SYMB_MIRRORED then
				iReadable = not(totalRotate > (gs_readable_angle - 90 + eps) & totalRotate < (gs_readable_angle + 180 - 90 + eps)) - (totalRotate > (gs_readable_angle - 90 + eps) & totalRotate < (gs_readable_angle + 180 - 90 + eps))
			else
				iReadable = not(totalRotate < (gs_readable_angle - 90 + eps) | totalRotate > (gs_readable_angle + 180 - 90 + eps)) - (totalRotate < (gs_readable_angle - 90 + eps) | totalRotate > (gs_readable_angle + 180 - 90 + eps))
			endif
			rot2 -90 * iReadable
			nTransUPDN = nTransUPDN + 1
		endif
	endif
	! ----------------------------------------------------------------------
	rot2 AngUPDN
	nTransUPDN = nTransUPDN + 1

	text2 0,0, walkingDirUPDN
	del nTransUPDN

	width	= STW (walkingDirUPDN)/1000*GLOB_SCALE
	rb		= width/2


	UpDownUNID=6000
	HOTSPOT2 wldo,			DirUPDN_Y, UpDownUNID, DirUPDN_X, 1+128 : UpDownUNID=UpDownUNID+1
	HOTSPOT2 wldo-1,		DirUPDN_Y, UpDownUNID, DirUPDN_X, 3		: UpDownUNID=UpDownUNID+1
	HOTSPOT2 wldo+DirUPDN_X,DirUPDN_Y, UpDownUNID, DirUPDN_X, 2		: UpDownUNID=UpDownUNID+1

	HOTSPOT2 wldo+DirUPDN_X,0,			UpDownUNID, DirUPDN_Y, 1+128: UpDownUNID=UpDownUNID+1
	HOTSPOT2 wldo+DirUPDN_X,-1,			UpDownUNID, DirUPDN_Y, 3	: UpDownUNID=UpDownUNID+1
	HOTSPOT2 wldo+DirUPDN_X,DirUPDN_Y,	UpDownUNID, DirUPDN_Y, 2	: UpDownUNID=UpDownUNID+1

	add2 wldo+DirUPDN_X,DirUPDN_Y
	nTransHotspot = nTransHotspot +1
	if typeTextRotation_UpDn_m = 1 then	! Parallel with Walking Line
		rot2 -90 * iReadable
		nTransHotspot = nTransHotspot +1
	endif
	HOTSPOT2 0,					0,				UpDownUNID,AngUPDN,6	: UpDownUNID=UpDownUNID+1
	HOTSPOT2 rb,				0,				UpDownUNID,AngUPDN,4+128: UpDownUNID=UpDownUNID+1
	HOTSPOT2 rb*COS(AngUPDN),	rb*SIN(AngUPDN),UpDownUNID,AngUPDN,5	: UpDownUNID=UpDownUNID+1
	del nTransHotspot
endif

if iFirstTread = FIRSTTREAD_ABOVE_FLOOR_LEVEL then del 1

! --- Numbering -------------------------------------------------------


IF rnu*fokszog > 360 AND bShowNumbering=1 THEN iFirstTread = FIRSTTREAD_ABOVE_FLOOR_LEVEL
IF iFirstTread = FIRSTTREAD_ABOVE_FLOOR_LEVEL THEN ROT2 fokszog

if (drawNum[1] | drawNum[2] | drawNum[3])  then
	if ZZYZX <= (BreakNum)*th THEN
		startNumber = i1ZZYZX
	else
		startNumber = numSteptoBreakRight
	endif

	if iTopTread = TOPTREAD_BELOW_FLOOR_LEVEL then rnu = rnu + 1
	txtd = 0.1
	fp = fokszog/3

	set style "stepnum"
	pen gs_NumTextPen
	poss = 0
	nTextTransformations = 0

	if drawNum[1] | drawNum[3] then
		for iNumStep = 1 to startNumber
			poss = poss + 1
			if not(iNumStep = rnu & iTopTread = TOPTREAD_BELOW_FLOOR_LEVEL) then
				numTextTread = iNumStep + nStartNumbering - 1

				add2 (r-txtd)*COS((poss-1)*fokszog+fp), (r-txtd)*SIN((poss-1)*fokszog+fp)

				! Text Rotation - Readable / Align with Symbol
				! ----------------------------------------------------------------------
				if typeTextRotation_Num_m = 2 then								! Readable
					if (totalRotate > (gs_readable_angle + eps) & totalRotate < (gs_readable_angle + 180 + eps)) then
						rot2 180
						nTextTransformations = 1
					endif
				endif
				! ----------------------------------------------------------------------

				text2 0,0, numTextTread
				if nTextTransformations > 0 then del nTextTransformations
				del 1
			endif
		next iNumStep
	endif

	if drawNum[2] | drawNum[3] then
		if rnu * fokszog <= 360 then
			endNumber = rnu
		else
			if iTopTread = TOPTREAD_BELOW_FLOOR_LEVEL then endNumber = rnu-2
			if iTopTread = TOPTREAD_AT_FLOOR_LEVEL then endNumber = rnu-1
		endif

		for iNumStep = numSteptoBreakRight+1 to endNumber
			if iNumStep = INT(360/fokszog)+1 then txtd = txtd+tdfs/6
			if not(iNumStep = rnu and iTopTread = TOPTREAD_BELOW_FLOOR_LEVEL) then
				add2 (r-txtd)*COS((iNumStep-1)*fokszog+fp), (r-txtd)*SIN((iNumStep-1)*fokszog+fp)

				numTextTread = iNumStep + nStartNumbering - 1

				! Text Rotation - Readable / Align with Symbol
				! ----------------------------------------------------------------------
				if typeTextRotation_Num_m = 2 then								! Readable
					if (totalRotate > (gs_readable_angle + eps) & totalRotate < (gs_readable_angle + 180 + eps)) then
						rot2 180
						nTextTransformations = 1
					endif
				endif
				! ----------------------------------------------------------------------
				text2 0,0, numTextTread
				if nTextTransformations > 0 then del nTextTransformations
				del 1
			endif
		next iNumStep
	endif
endif

if iFirstTread = FIRSTTREAD_ABOVE_FLOOR_LEVEL then del 1
pen gs_cont_pen

!===============================================================================
! --- Railings ---
!===============================================================================

_bShowRailIn2D = 1
if _bShowRailIn2D then
	IF iTopTread = TOPTREAD_BELOW_FLOOR_LEVEL THEN
		rnu=rnu-1
	ENDIF

	fordul=fordul*1.00241
	IF iTopTread = TOPTREAD_AT_FLOOR_LEVEL THEN
		zzz=zzyzx
	ELSE
		zzz=zzyzx-th
		fordul=fordul-fokszog/360
	ENDIF

	IF iFirstTread = FIRSTTREAD_AT_FLOOR_LEVEL THEN
		fordul=fokszog/360+fordul
		zz=zzz+th
	ELSE
		zz=zzz
	ENDIF

	ker	= 2*pi*(r-flw+st-roffl)
	k	= 2*pi*(r-st/2+roffr)
	nlra=sqr(k*k*fordul*fordul+zz*zz)
	klra=sqr(ker*ker*fordul*fordul+zz*zz)

	ann=atn(zz/(k*fordul))
	ank=atn(zz/(ker*fordul))

	IF iFirstTread = FIRSTTREAD_ABOVE_FLOOR_LEVEL THEN
		hsz=0
		rot2 fokszog
	ELSE
		ROT2 -fokszog
	ENDIF

	hsz=hsz+pd

	rr=r-st/2+roffr			!!!Right Railing
	kr=r-flw+st/2-roffl		!!!Left Railing
	res=res*360/fokszog

	bShowRailPart1		= 0
	bShowRailPart2		= 0
	breakLineDistAngle	= 50
	breakLineWidthAngle	= 0
	brLineAngle			= 90

	drawindex 30
	fill gs_fill_type

	! --- Left Rail ----------------------------------------------------------------
	if rail_m = 3 | rail_m = 1 then		! Left, Both
		if bSameRails then
			leftRailType_m = rightRailType_m
		endif

		handRailOvAngleL = hrol * 360 / (2 * (r-flw+st/2-roffl) * pi) * bComplexRailLeft
		if rnu * fokszog < 360 then
			tempRailAngleL	= fordul * 360
		else
			tempRailAngleL	= 360 - EPS * 100 - 2 * handRailOvAngleL * bSymbolic2D
		endif

		if drawPart[3] then
			if bShowRailOnFloorPlan then
				if aboveStory then
					railPen	= gs_LinePenStUp
					LINE_TYPE railLineType
				else
					if drawDashed[3] then
						LINE_TYPE dash_line
					else
						LINE_TYPE solid_line
					endif
				endif
				pen railPen

				if bSymbolic2D then
					bShowRailOn1stRun		= 1
					bBreakRailLine			= 0
					bRailAboveBreakLine		= 0
					gosub "left rail"
				else
					POLY2_b 9, 1+2+64, gs_fill_pen, gs_back_pen,
						r-flw+st/2-handRailWidthL /2-roffl,0,1,
						0,0,900,
						0,tempRailAngleL, 4000,
						(r-flw+st/2-handRailWidthL /2-roffl)*COS(tempRailAngleL),(r-flw+st/2-handRailWidthL /2-roffl)*SIN(tempRailAngleL),1,
						(r-flw+st/2+handRailWidthL /2-roffl)*COS(tempRailAngleL),(r-flw+st/2+handRailWidthL /2-roffl)*SIN(tempRailAngleL),1,
						0,0,900,
						0,-tempRailAngleL,4000,
						r-flw+st/2+handRailWidthL /2-roffl,0,1,
						r-flw+st/2-handRailWidthL /2-roffl,0,-1
				endif
			endif

			if bShowRailAxis then
				line_type railAxisLineType
				pen gs_RailAxisPen
				ARC2 0,0,r-flw+st/2-roffl,-handRailOvAngleL,tempRailAngleL + handRailOvAngleL
			endif
		else		! Break Line - Railing
			if drawPart[1] & bShowRailOnFloorPlan then
				if aboveStory then
					railPen	= gs_LinePenStUp
					LINE_TYPE railLineType
				else
					if drawDashed[1] then
						LINE_TYPE dash_line
					else
						LINE_TYPE solid_line
					endif
				endif
				pen railPen

				if bSymbolic2D then
					bShowRailOn1stRun		= 1
					bBreakRailLine			= 1
					brLineAngle				= 90
					bShowRailPart1			= 1
					breakLineDistAngle		= numSteptoBreakRight*fokszog + handRailOvAngleL
					breakLineWidthAngle		= 20
					bRailAboveBreakLine		= 0
					gosub "left rail"
				else
					POLY2_b 9, 1+2+64, gs_fill_pen, gs_back_pen,
						r-flw+st/2-handRailWidthL /2-roffl,0,1,
						0,0,900,
						0,numSteptoBreakRight*fokszog, 4000,
						(r-flw+st/2-handRailWidthL /2-roffl)*COS(numSteptoBreakRight*fokszog),(r-flw+st/2-handRailWidthL /2-roffl)*SIN(numSteptoBreakRight*fokszog),1,
						(r-flw+st/2+handRailWidthL /2-roffl)*COS(numSteptoBreakRight*fokszog),(r-flw+st/2+handRailWidthL /2-roffl)*SIN(numSteptoBreakRight*fokszog),1,
						0,0,900,
						0,-numSteptoBreakRight*fokszog,4000,
						r-flw+st/2+handRailWidthL /2-roffl,0,1,
						r-flw+st/2-handRailWidthL /2-roffl,0,-1
				endif
			endif

			if drawPart[2] & bShowRailOnFloorPlan and bShowRailAboveBreakLine then
				if aboveStory then
					railPen	= gs_LinePenStUp
					LINE_TYPE railLineType
				else
					if drawDashed[2] then
						LINE_TYPE dash_line
					else
						LINE_TYPE solid_line
					endif
				endif
				pen railPen
				FILL temp_FillTypeAbove

				if bSymbolic2D then
					bShowRailOn1stRun		= 1
					bBreakRailLine			= 1
					brLineAngle				= 90
					bShowRailPart2			= 1
					breakLineDistAngle		= numSteptoBreakRight*fokszog + handRailOvAngleL
					breakLineWidthAngle		= 0
					bRailAboveBreakLine		= 1
					gosub "left rail"
				else
					POLY2_b 9, 1+FullFill, gs_fill_pen, temp_BackPen,
						(r-flw+st/2-handRailWidthL /2-roffl)*COS(numSteptoBreakRight*fokszog), (r-flw+st/2-handRailWidthL /2-roffl)*SIN(numSteptoBreakRight*fokszog),1,
						0,0,900,
						0,tempRailAngleL - numSteptoBreakRight * fokszog, 4000,
						(r-flw+st/2-handRailWidthL /2-roffl)*COS(tempRailAngleL),(r-flw+st/2-handRailWidthL /2-roffl)*SIN(tempRailAngleL),1,
						(r-flw+st/2+handRailWidthL /2-roffl)*COS(tempRailAngleL),(r-flw+st/2+handRailWidthL /2-roffl)*SIN(tempRailAngleL),1,
						0,0,900,
						0,-tempRailAngleL + numSteptoBreakRight * fokszog,4000,
						(r-flw+st/2+handRailWidthL /2-roffl)*COS(numSteptoBreakRight*fokszog), (r-flw+st/2+handRailWidthL /2-roffl)*SIN(numSteptoBreakRight*fokszog),0,
						(r-flw+st/2-handRailWidthL /2-roffl)*COS(numSteptoBreakRight*fokszog), (r-flw+st/2-handRailWidthL /2-roffl)*SIN(numSteptoBreakRight*fokszog),-1
				endif
			endif

			if bShowRailAxis then
				line_type railAxisLineType
				pen gs_RailAxisPen

				if drawPart[1] then
					ARC2 0,0,r-flw+st/2-roffl,-handRailOvAngleL,numSteptoBreakRight*fokszog
				endif

				if drawPart[2] and bShowRailAboveBreakLine then
					ARC2 0,0,r-flw+st/2-roffl,numSteptoBreakRight*fokszog,tempRailAngleL + handRailOvAngleL
				endif
			endif
		endif

		if bShowRailOnFloorPlan then
			if bSameRails then
				RailUNID=1400

				HOTSPOT2 r-flw+st/2, 	0,		RailUNID, roffr, 1+128: RailUNID=RailUNID+1
				HOTSPOT2 r-flw+st/2-roffr,0,	RailUNID, roffr, 2: RailUNID=RailUNID+1
				HOTSPOT2 r-flw+st/2+1,	0,	RailUNID, roffr, 3: RailUNID=RailUNID+1

				RailUNID=1500
				ROT2 tempRailAngleL
					HOTSPOT2 r-flw+st/2, 	0,		RailUNID, roffr, 1+128: RailUNID=RailUNID+1
					HOTSPOT2 r-flw+st/2-roffr,0,	RailUNID, roffr, 2: RailUNID=RailUNID+1
					HOTSPOT2 r-flw+st/2+1,	0,	RailUNID, roffr, 3: RailUNID=RailUNID+1
				DEL 1
			else
				RailUNID=1200

				HOTSPOT2 r-flw+st/2, 	0,		RailUNID, roffl, 1+128: RailUNID=RailUNID+1
				HOTSPOT2 r-flw+st/2-roffl,0,	RailUNID, roffl, 2: RailUNID=RailUNID+1
				HOTSPOT2 r-flw+st/2+1,	0,	RailUNID, roffl, 3: RailUNID=RailUNID+1

				RailUNID=1300
				ROT2 tempRailAngleL
					HOTSPOT2 r-flw+st/2, 	0,		RailUNID, roffl, 1+128: RailUNID=RailUNID+1
					HOTSPOT2 r-flw+st/2-roffl,0,	RailUNID, roffl, 2: RailUNID=RailUNID+1
					HOTSPOT2 r-flw+st/2+1,	0,	RailUNID, roffl, 3: RailUNID=RailUNID+1
				DEL 1
			endif
		endif
	endif

	! --- Right Rail ----------------------------------------------------------------
	if rail_m = 2 | rail_m = 1 then		! Right, Both
		handRailOvAngleR = hror * 360 / (2 * (r-handRailWidthR / 2 +roffr) * pi) * bComplexRailRight
		if rnu * fokszog < 360 then
			tempRailAngleR	= fordul * 360
		else
			tempRailAngleR	= 360 - EPS * 100 - 2 * handRailOvAngleR * bSymbolic2D
		endif

		if drawPart[3] then
			if bShowRailOnFloorPlan then
				if aboveStory then
					railPen	= gs_LinePenStUp
					LINE_TYPE railLineType
				else
					if drawDashed[3] then
						LINE_TYPE dash_line
					else
						LINE_TYPE solid_line
					endif
				endif
				pen railPen

				if bSymbolic2D then
					bShowRailOn1stRun		= 1
					bBreakRailLine			= 0
					bRailAboveBreakLine		= 0
					gosub "right rail"
				else
					POLY2_b 9, 1+2+64, gs_fill_pen, gs_back_pen,
						r-st/2+handRailWidthR/2+roffr,0,1,
						0,0,900,
						0,tempRailAngleR, 4000,
						(r-st/2+handRailWidthR/2+roffr)*COS(tempRailAngleR),(r-st/2+handRailWidthR/2+roffr)*SIN(tempRailAngleR),1,
						(r-st/2-handRailWidthR/2+roffr)*COS(tempRailAngleR),(r-st/2-handRailWidthR/2+roffr)*SIN(tempRailAngleR),1,
						0,0,900,
						0,-tempRailAngleR,4000,
						r-st/2-handRailWidthR/2+roffr,0,1,
						r-st/2+handRailWidthR/2+roffr,0,-1
				endif
			endif

			if bShowRailAxis then
				line_type railAxisLineType
				pen gs_RailAxisPen
				ARC2 0,0,r-st/2+roffr,-handRailOvAngleR,tempRailAngleR + handRailOvAngleR
			endif
		else		! Break Line - Railing
			if drawPart[1] & bShowRailOnFloorPlan then
				if aboveStory then
					railPen	= gs_LinePenStUp
					LINE_TYPE railLineType
				else
					if drawDashed[1] then
						LINE_TYPE dash_line
					else
						LINE_TYPE solid_line
					endif
				endif
				pen railPen

				if bSymbolic2D then
					bShowRailOn1stRun		= 1
					bBreakRailLine			= 1
					brLineAngle				= 90
					bShowRailPart1			= 1
					breakLineDistAngle		= numSteptoBreakRight*fokszog + handRailOvAngleR
					breakLineWidthAngle		= 0
					bRailAboveBreakLine		= 0
					gosub "right rail"
				else
					POLY2_b 9, 1+2+64, gs_fill_pen, gs_back_pen,
						r-st/2-handRailWidthR/2+roffr,0,1,
						0,0,900,
						0,numSteptoBreakRight*fokszog, 4000,
						(r-st/2-handRailWidthR/2+roffr)*COS(numSteptoBreakRight*fokszog),(r-st/2-handRailWidthR/2+roffr)*SIN(numSteptoBreakRight*fokszog),1,
						(r-st/2+handRailWidthR/2+roffr)*COS(numSteptoBreakRight*fokszog),(r-st/2+handRailWidthR/2+roffr)*SIN(numSteptoBreakRight*fokszog),1,
						0,0,900,
						0,-numSteptoBreakRight*fokszog,4000,
						r-st/2+handRailWidthR/2+roffr,0,1,
						r-st/2-handRailWidthR/2+roffr,0,-1
				endif
			endif

			if drawPart[2] & bShowRailOnFloorPlan and bShowRailAboveBreakLine then
				if aboveStory then
					railPen	= gs_LinePenStUp
					LINE_TYPE railLineType
				else
					if drawDashed[2] then
						LINE_TYPE dash_line
					else
						LINE_TYPE solid_line
					endif
				endif
				pen railPen
				FILL temp_FillTypeAbove

				if bSymbolic2D then
					bShowRailOn1stRun		= 1
					bBreakRailLine			= 1
					brLineAngle				= 90
					bShowRailPart2			= 1
					breakLineDistAngle		= numSteptoBreakRight*fokszog + handRailOvAngleR
					breakLineWidthAngle		= 0
					bRailAboveBreakLine		= 1
					gosub "right rail"
				else
					POLY2_b 9, 1+FullFill, gs_fill_pen, temp_BackPen,
						(r-st/2-handRailWidthR/2+roffr)*COS(numSteptoBreakRight*fokszog), (r-st/2-handRailWidthR/2+roffr)*SIN(numSteptoBreakRight*fokszog),1,
						0,0,900,
						0,tempRailAngleR - numSteptoBreakRight * fokszog, 4000,
						(r-st/2-handRailWidthR/2+roffr)*COS(tempRailAngleR),(r-st/2-handRailWidthR/2+roffr)*SIN(tempRailAngleR),1,
						(r-st/2+handRailWidthR/2+roffr)*COS(tempRailAngleR),(r-st/2+handRailWidthR/2+roffr)*SIN(tempRailAngleR),1,
						0,0,900,
						0,-tempRailAngleR + numSteptoBreakRight * fokszog,4000,
						(r-st/2+handRailWidthR/2+roffr)*COS(numSteptoBreakRight*fokszog), (r-st/2+handRailWidthR/2+roffr)*SIN(numSteptoBreakRight*fokszog),0,
						(r-st/2-handRailWidthR/2+roffr)*COS(numSteptoBreakRight*fokszog), (r-st/2-handRailWidthR/2+roffr)*SIN(numSteptoBreakRight*fokszog),-1
				endif
			endif

			if bShowRailAxis then
				line_type railAxisLineType
				pen gs_RailAxisPen

				if drawPart[1] then
					ARC2 0,0,r-st/2+roffr,-handRailOvAngleR,numSteptoBreakRight*fokszog
				endif

				if drawPart[2] and bShowRailAboveBreakLine then
					ARC2 0,0,r-st/2+roffr,numSteptoBreakRight*fokszog,tempRailAngleR + handRailOvAngleR
				endif
			endif
		endif

		if bShowRailOnFloorPlan then
			RailUNID=1000

			HOTSPOT2 r-st/2, 	0,		RailUNID, roffr, 1+128: RailUNID=RailUNID+1
			HOTSPOT2 r-st/2+roffr,0,	RailUNID, roffr, 2: RailUNID=RailUNID+1
			HOTSPOT2 r-st/2-1,	0,	RailUNID, roffr, 3: RailUNID=RailUNID+1

			RailUNID=1100

			ROT2 tempRailAngleR
			RailStartRY = 0
			HOTSPOT2 r-st/2, 		RailStartRY,	RailUNID, roffr, 1+128: RailUNID=RailUNID+1
			HOTSPOT2 r-st/2+roffr,RailStartRY,	RailUNID, roffr, 2: RailUNID=RailUNID+1
			HOTSPOT2 r-st/2-1,	RailStartRY,	RailUNID, roffr, 3: RailUNID=RailUNID+1
			DEL 1
		endif
	endif

	del 1
endif

END

"left rail":

	! ---  Rail on 1st Run -----------------------------------------------------
	if bShowRailOn1stRun then
		ADD2 kr, 0
		ROT2 90

		lraSimple=klra
		lraComplex=klra
		additionXComplex=0
		additionZComplex=0
		hrovL=hrol
		hrovR=hrol
		postNumber = npl
		side = SIDE_LEFT
		gosub "callRailsForStair"

		del 2
	endif

return

"right rail":

	! ---  Rail on 1st Run -----------------------------------------------------
	if bShowRailOn1stRun then
		ADD2 rr, 0
		ROT2 90

		lraSimple=nlra
		lraComplex=nlra
		additionXComplex=0
		additionZComplex=0
		hrovL=hror
		hrovR=hror
		postNumber = npr
		side = SIDE_RIGHT
		gosub "callRailsForStair"

		del 2
	endif

return

"callRailsForStair":
! ------------------------------------------------------------------------------
!	lraSimple
!	lraComplex
!	additionXComplex
!	additionZComplex
!	hrovL: rail overhang start
!	hrovR: rail overhang end
!	postNumber:   number of posts
!	side: SIDE_LEFT or SIDE_RIGHT
! ==============================================================================
	additionXComplex = additionXComplex
	additionZComplex = additionZComplex
	gosub "callRails"
return

! ==============================================================================
"callRails":
! ------------------------------------------------------------------------------
!	ani
!	additionXComplex
!	additionZComplex
!	dsComplex
!  ------------------
!	side: SIDE_LEFT or SIDE_RIGHT
!	lraSimple
!	lraComplex
!	hrovL: rail overhang start
!	hrovR: rail overhang end
!	postNumber:   number of posts
! ==============================================================================
	if side = SIDE_LEFT then
		railBarDepth	= bwl
		railBarDiam		= bdl
		railHeight		= hrl
		railBarThk		= fthl
		handRailWidth	= handRailWidthL
		railDist		= dsl
		railType_m		= leftRailType_m
		railPostDia		= pdl
		railPostWidth	= pwl
		railPostThk		= pthl
		railPostType	= ptl_m
		nBarsRail		= nbl
		bt_m			= btl_m
		railFramesWSide	= fswl
		railFramesWTop	= ftwl
		railFramesWBot	= fbwl
		railBarHeight	= bhl
		railBarFillThk	= bthl
		abdist			= abdistl
		railFrameMat	= fmatl
		railBaluFillMat	= bmatl
		railPostMat		= pmatl
		nbt				= nbtl
		railFillDist	= fdfl
		bComplexRail	= bComplexRailLeft
		ani				= ank
		rb				= kr
		tempRailAngle	= tempRailAngleL
	else
		railBarDepth	= bwr
		railBarDiam		= bdr
		railHeight		= hrr
		railBarThk		= fthr
		handRailWidth	= handRailWidthR
		railDist		= dsr
		railType_m		= rightRailType_m
		railPostDia		= pdr
		railPostWidth	= pwr
		railPostThk		= pthr
		railPostType	= ptr_m
		nBarsRail		= nbr
		bt_m			= btr_m
		railFramesWSide	= fswr
		railFramesWTop	= ftwr
		railFramesWBot	= fbwr
		railBarHeight	= bhr
		railBarFillThk	= bthr
		abdist			= abdistr
		railFrameMat	= fmatr
		railBaluFillMat	= bmatr
		railPostMat		= pmatr
		nbt				= nbtr
		railFillDist	= fdfr
		bComplexRail	= bComplexRailRight
		ani				= ann
		rb				= rr
		tempRailAngle	= tempRailAngleR
	endif

	add2 additionXComplex * bComplexRail, 0
	call "railSymbol2D_m" parameters all	cfs					= 1,
											bEnable2DPosts		= bComplexRail,
											ptyp_m				= 3,
											ani					= ani,
											ab					= tempRailAngle,
											rb					= rb,
											rom_m				= 1,
											rmm_m				= 1,
											LengthSize			= 0,
											lra					= lraSimple * NOT(bComplexRail) + lraComplex * (bComplexRail),
											hr					= railHeight,
											hrPerp				= railHeight,
											ds					= railDist,
											gs_AngleL			= 90,
											gs_AngleR			= 90,
											iHandRailStyle		= 1,
											handRailDiameter	= handRailWidth,
											handRailWidth		= handRailWidth,
											hroL				= hrovL,
											hroR				= hrovR,
											np					= postNumber,
											pd					= railPostDia,
											pw					= railPostWidth,
											pth					= railPostThk,
											gs_cont_pen			= railPen,
											sa					= 0,
											bBreakRailLine		= bBreakRailLine,
											breakLineAngle		= brLineAngle,
											breakLineDistAngle	= breakLineDistAngle,
											breakLineWidthAngle	= breakLineWidthAngle,
											bRailAboveBreakLine	= bRailAboveBreakLine,
											bShowRailBelowBrL	= bShowRailPart1,
											bShowRailAboveBrL	= bShowRailPart2,
											bPostNoCalculation	= (railType_m = 9),
											pit_m				= 1,
											dp					= abdist,
											nbt					= nbt
	del 1

	bShowRailPart1			= 0
	bShowRailPart2			= 0

return


]]>
</Script_2D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_1D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
EPS = 0.0001

SIDE_LEFT				= 1
SIDE_RIGHT				= 2

dim stRiseRunText[7]
	stRiseRunText[1] = `Кол-во x Подступенок = Высота Марша`
	stRiseRunText[2] = `Кол-во Проступей/Подступенок @`
	stRiseRunText[3] = `Кол-во х Проступь х Подступенок`
	stRiseRunText[4] = `Кол-во х Подступенок х Проступь`
	stRiseRunText[5] = `Кол-во <текст подступенка> Подступенок / Проступь`
	stRiseRunText[6] = `Кол-во <текст подступенка> // Подступенок / Проступь`
	stRiseRunText[7] = `Специальный Текст`

dim stStartSymbolStyles[4]
	stStartSymbolStyles[1] = `Стиль 1`
	stStartSymbolStyles[2] = `Стиль 2`
	stStartSymbolStyles[3] = `Стиль 3`
	stStartSymbolStyles[4] = `Нет`

! gs_StartEndStyle_m
STARTSYMB_STYLE1	= 1
STARTSYMB_STYLE2	= 2
STARTSYMB_STYLE3	= 3
STARTSYMB_NONE		= 4

dim stWalkingDirUPDN[3]
	stWalkingDirUPDN[1] = `Нет`
	stWalkingDirUPDN[2] = `ВВЕРХ`
	stWalkingDirUPDN[3] = `ВНИЗ`

! walkingDirUPDN_m
WALKDIRSTR_NONE			= 1
WALKDIRSTR_UP			= 2
WALKDIRSTR_DOWN			= 3

dim stRailPosition[4]
	stRailPosition[1] = `Оба`
	stRailPosition[2] = `Справа`
	stRailPosition[3] = `Слева`
	stRailPosition[4] = `Нет`

! rail_m
RAILPOS_BOTH	= 1
RAILPOS_RIGHT	= 2
RAILPOS_LEFT	= 3
RAILPOS_NONE	= 4

dim stDetlevel2D[2]
	stDetlevel2D[1] = `Зависит от Масштаба`
	stDetlevel2D[2] = `Специальный`

DET2D_SCALESENSITIVE	= 1
DET2D_CUSTOM			= 2

dim stDetlevel3D[3]
	stDetlevel3D[1] = `Детальный`
	stDetlevel3D[2] = `Простой`
	stDetlevel3D[3] = `Откл.`

! gs_detlevel_3D_m
DET3D_OFF		= 0
DET3D_SIMPLE	= 1
DET3D_DETAILED	= 2

dim stRailTypes[11]
	stRailTypes[ 1] = `Балюстрада Ограждения`
	stRailTypes[ 2] = `Параллельные Прутья`
	stRailTypes[ 3] = `Простой Брусок`
	stRailTypes[ 4] = `Объемная Рама с Панелью`
	stRailTypes[ 5] = `Объемная Рама`
	stRailTypes[ 6] = `Панель Ограждения`
	stRailTypes[ 7] = `Стойки Ограждения с Балясинами`
	stRailTypes[ 8] = `Стойки с Леерами`
	stRailTypes[ 9] = `Деревянная Балюстрада`
	stRailTypes[10] = `Стойки Ограждения с Брусками`
	stRailTypes[11] = `Как и Правое`

dim stShowCarriageValues[5]
	stShowCarriageValues[1]	= `Всегда`
	stShowCarriageValues[2]	= `До 1:20`
	stShowCarriageValues[3]	= `До 1:50`
	stShowCarriageValues[4]	= `До 1:100`
	stShowCarriageValues[5]	= `До 1:200`

! leftRailType_m, rightRailType_m
RAIL_BALUSTRADE				= 1
RAIL_PARALLEL_BARS			= 2
RAIL_SIMPLE_BAR				= 3
RAIL_SOLID_FRAME_FILLED		= 4
RAIL_SOLID_FRAME			= 5
RAIL_SOLID					= 6
RAIL_POST_WITH_BALUSTERS	= 7
RAIL_WIRED					= 8
RAIL_WOODEN_BALUSTRADE		= 9
RAIL_POST_WITH_BARS			= 10
RAIL_SAMERAILS				= 11

dim stPostSymbolType[5]
	stPostSymbolType[1] = `Тип 1`
	stPostSymbolType[2] = `Тип 2`
	stPostSymbolType[3] = `Тип 3`
	stPostSymbolType[4] = `Тип 4`
	stPostSymbolType[5] = `Нет`

dim stBattenStyle[5]
	stBattenStyle[1] = `Нет`
	stBattenStyle[2] = `Выступ`
	stBattenStyle[3] = `Промежуточный`
	stBattenStyle[4] = `Проступь`
	stBattenStyle[5] = `Сплошная`

BATTEN_NONE		= 1
BATTEN_NOSING	= 2
BATTEN_INTERM	= 3
BATTEN_TREAD	= 4
BATTEN_FULL		= 5

dim stTopTread[2]
	stTopTread[1] = `на Уровне Пола`
	stTopTread[2] = `Ниже Уровня Пола`

! iTopTread
TOPTREAD_AT_FLOOR_LEVEL		= 1
TOPTREAD_BELOW_FLOOR_LEVEL	= 2

dim stFirstTread[2]
	stFirstTread[1] = `на Уровне Пола`
	stFirstTread[2] = `Выше Уровня Пола`

! iFirstTread
FIRSTTREAD_AT_FLOOR_LEVEL		= 1
FIRSTTREAD_ABOVE_FLOOR_LEVEL	= 2

dim stFlightSectionType[2]
	stFlightSectionType[1] = `без Софита`
	stFlightSectionType[2] = `с Софитом`

! iFlightSectionType
FLIGHTSECTION_WITHOUT_SOFFIT	= 1
FLIGHTSECTION_WITH_SOFFIT		= 2

dim stLowerJunctionType[2]
	stLowerJunctionType[1] = `Первый Этаж`
	stLowerJunctionType[2] = `Пол или Площадка`

! iLowerJunctionType
LOWERJUNCTION_GROUND_FLOOR		= 1
LOWERJUNCTION_FLOOR_OR_LANDING	= 2

dim stHandrailStyle[2]
	stHandrailStyle[1] = `Прямоугольные`
	stHandrailStyle[2] = `Круглые`

! hrtr_m, hrtl_m
HANDRAIL_RECTANGULAR	= 1
HANDRAIL_ROUND			= 2

dim stBarStyle[2]
	stBarStyle[1] = `Прямоугольные`
	stBarStyle[2] = `Круглые`

! btypr_m, btypl_m
BAR_RECTANGULAR	= 1
BAR_ROUND		= 2

dim stPostStyle[2]
	stPostStyle[1] = `Прямоугольные`
	stPostStyle[2] = `Круглые`

! ptr_m, ptl_m
POST_RECTANGULAR	= 1
POST_ROUND			= 2

dim stBoardStyle[2]
	stBoardStyle[1] = `Прямоугольные`
	stBoardStyle[2] = `Круглые`

! btr_m, btl_m
BOARD_RECTANGULAR	= 1
BOARD_ROUND			= 2

dim stCalculationMode[2]
	stCalculationMode[1] = `Кол-во Подступенков`
	stCalculationMode[2] = `Высота Ступени`

! iCalculationMode
CALCMODE_NO_OF_RISERS	= 1
CALCMODE_TREAD_HEIGHT	= 2

dim stArrowStyle[9]
	stArrowStyle[1] = `Стиль 1`
	stArrowStyle[2] = `Стиль 2`
	stArrowStyle[3] = `Стиль 3`
	stArrowStyle[4] = `Стиль 4`
	stArrowStyle[5] = `Стиль 5`
	stArrowStyle[6] = `Стиль 6`
	stArrowStyle[7] = `Стиль 7`
	stArrowStyle[8] = `Стиль 8`
	stArrowStyle[9] = `Стиль 9`

! arrow_style_m
ARROW_STYLE_1 = 1
ARROW_STYLE_2 = 2
ARROW_STYLE_3 = 3
ARROW_STYLE_4 = 4
ARROW_STYLE_5 = 5
ARROW_STYLE_6 = 6
ARROW_STYLE_7 = 7
ARROW_STYLE_8 = 8
ARROW_STYLE_9 = 9

! -------------- 2D Symbol variables --------------

! gs_SymbolType_m
SYMBOL_TYPE1	= 1
SYMBOL_TYPE2	= 2
SYMBOL_TYPE3	= 3
SYMBOL_TYPE4	= 4
SYMBOL_TYPE5	= 5
SYMBOL_TYPE6	= 6
SYMBOL_TYPE7	= 7
SYMBOL_TYPE8	= 8
SYMBOL_TYPE9	= 9
SYMBOL_TYPE10	= 10
SYMBOL_TYPE11	= 11
SYMBOL_TYPE12	= 12
SYMBOL_TYPE13	= 13
SYMBOL_TYPE14	= 14
SYMBOL_TYPE15	= 15
SYMBOL_TYPE16	= 16
SYMBOL_TYPE17	= 17
SYMBOL_TYPE18	= 18
SYMBOL_TYPE19	= 19
SYMBOL_TYPE20	= 20

dim stStairSymbolTypes[20]
	stStairSymbolTypes[ 1] = `Тип 1`
	stStairSymbolTypes[ 2] = `Тип 2`
	stStairSymbolTypes[ 3] = `Тип 3`
	stStairSymbolTypes[ 4] = `Тип 4`
	stStairSymbolTypes[ 5] = `Тип 5`
	stStairSymbolTypes[ 6] = `Тип 6`
	stStairSymbolTypes[ 7] = `Тип 7`
	stStairSymbolTypes[ 8] = `Тип 8`
	stStairSymbolTypes[ 9] = `Тип 9`
	stStairSymbolTypes[10] = `Тип 10`
	stStairSymbolTypes[11] = `Тип 11`
	stStairSymbolTypes[12] = `Тип 12`
	stStairSymbolTypes[13] = `Тип 13`
	stStairSymbolTypes[14] = `Тип 14`
	stStairSymbolTypes[15] = `Тип 15`
	stStairSymbolTypes[16] = `Тип 16`
	stStairSymbolTypes[17] = `Тип 17`
	stStairSymbolTypes[18] = `Тип 18`
	stStairSymbolTypes[19] = `Тип 19`
	stStairSymbolTypes[20] = `Тип 20`

! iSymbolGroup
SYMBOLGROUP_TYPE1	= 1
SYMBOLGROUP_TYPE2	= 2
SYMBOLGROUP_TYPE3	= 3
SYMBOLGROUP_TYPE4	= 4
SYMBOLGROUP_TYPE5	= 5
SYMBOLGROUP_TYPE6	= 6
SYMBOLGROUP_TYPE7	= 7
SYMBOLGROUP_TYPE8	= 8

dim stSymbolGroup[8]
	stSymbolGroup[1] = `Тип 1`
	stSymbolGroup[2] = `Тип 2`
	stSymbolGroup[3] = `Тип 3`
	stSymbolGroup[4] = `Тип 4`
	stSymbolGroup[5] = `Тип 5`
	stSymbolGroup[6] = `Тип 6`
	stSymbolGroup[7] = `Тип 7`
	stSymbolGroup[8] = `Тип 8`

dim	iEnabledSymbolTypes[8][3]
	iEnabledSymbolTypes[1][1] = 1
	iEnabledSymbolTypes[1][2] = 6
	iEnabledSymbolTypes[1][3] = 13

	iEnabledSymbolTypes[2][1] = 2
	iEnabledSymbolTypes[2][2] = 7
	iEnabledSymbolTypes[2][3] = 14

	iEnabledSymbolTypes[3][1] = 3
	iEnabledSymbolTypes[3][2] = 8
	iEnabledSymbolTypes[3][3] = 15

	iEnabledSymbolTypes[4][1] = 4
	iEnabledSymbolTypes[4][2] = 9
	iEnabledSymbolTypes[4][3] = 16

	iEnabledSymbolTypes[5][1] = 5
	iEnabledSymbolTypes[5][2] = 10
	iEnabledSymbolTypes[5][3] = 17

	iEnabledSymbolTypes[6][1] = 4
	iEnabledSymbolTypes[6][2] = 11
	iEnabledSymbolTypes[6][3] = 18

	iEnabledSymbolTypes[7][1] = 4
	iEnabledSymbolTypes[7][2] = 11
	iEnabledSymbolTypes[7][3] = 19

	iEnabledSymbolTypes[8][1] = 5
	iEnabledSymbolTypes[8][2] = 12
	iEnabledSymbolTypes[8][3] = 20


! iScaleType
SCALE_10		= 10
SCALE_20		= 20
SCALE_50		= 50
SCALE_100		= 100
SCALE_200		= 200
SCALE_500		= 500

SCALE_1_1		= 1
SCALE_1_4		= 4
SCALE_1_8		= 8
SCALE_1_16		= 16
SCALE_1_24		= 24
SCALE_1_48		= 48
SCALE_1_96		= 96
SCALE_1_192		= 192
SCALE_CUSTOM	= 999

dim	iScaleType[15]
	iScaleType[1]	= SCALE_10
	iScaleType[2]	= SCALE_20
	iScaleType[3]	= SCALE_50
	iScaleType[4]	= SCALE_100
	iScaleType[5]	= SCALE_200
	iScaleType[6]	= SCALE_500
	iScaleType[7]	= SCALE_1_1
	iScaleType[8]	= SCALE_1_4
	iScaleType[9]	= SCALE_1_8
	iScaleType[10]	= SCALE_1_16
	iScaleType[11]	= SCALE_1_24
	iScaleType[12]	= SCALE_1_48
	iScaleType[13]	= SCALE_1_96
	iScaleType[14]	= SCALE_1_192
	iScaleType[15]	= SCALE_CUSTOM

dim stScaleType[15]
	stScaleType[1]	= `1:10`
	stScaleType[2]	= `1:20`
	stScaleType[3]	= `1:50`
	stScaleType[4]	= `1:100`
	stScaleType[5]	= `1:200`
	stScaleType[6]	= `1:500`
	
	stScaleType[7]	= `1'=1'-0"`
	stScaleType[8]	= `3"=1'-0"`
	stScaleType[9]	= `1 1/2"=1'-0"`
	stScaleType[10]	= `3/4"=1'-0"`
	stScaleType[11]	= `1/2"=1'-0"`
	stScaleType[12]	= `1/4"=1'-0"`
	stScaleType[13]	= `1/8"=1'-0"`
	stScaleType[14]	= `1/16"=1'-0"`
	stScaleType[15]	= `Специальный Масштаб`

if iScaleChangeSM = SCALE_CUSTOM then
	_iScaleSM = gs_ScaleChangeSM
else
	_iScaleSM = iScaleChangeSM
endif
if iScaleChangeMD = SCALE_CUSTOM then
	_iScaleMD = gs_ScaleChangeMD
else
	_iScaleMD = iScaleChangeMD
endif

! -------------- End of 2D Symbol variables --------------


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
FlightWidth=flw-2*st			!!! StringWidth is in Total Width
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

parameters cfs=1

if iFlightSectionType = FLIGHTSECTION_WITH_SOFFIT then soffit=1 else soffit=0
if thd<2*pth then parameters thd=2*pth+td


if r < st+flw+0.05 then
	parameters r=st+flw+0.05
endif

if wldo<=0 then
	parameters wldo=r-flw/2
endif

if ad then
	IF iCalculationMode = CALCMODE_TREAD_HEIGHT THEN

		_rnu= int(zzyzx/pth)

		if fra(zzyzx/pth) > 0.5 then
			_rnu = _rnu+1
		endif

		_th = zzyzx/_rnu
		_td = abs(thd - 2 * _th)


!		values "rnu" _rnu, CUSTOM
		parameters rnu=_rnu

!		values "th" _th, CUSTOM
		parameters th=_th

!		values "td" _td, CUSTOM
		parameters td=_td

		lock "rnu", "td", "th"
	else								    !No. of Risers
		_th = zzyzx/rnu
		_pth= _th
		_td = abs(thd-2*_th)
		values "th" _th, CUSTOM
		values "pth" _pth, CUSTOM
		values "td" _td, CUSTOM
		parameters th=_th, pth=_pth, td=_td
		lock "td", "th"
	endif
else
	lock "pth", "thd"
endif

if roffl > abs(r)-abs(flw)-abs(st)-0.05 then
	parameters roffl = r-flw-st-0.05
endif

nRiser = rnu
if iTopTread = TOPTREAD_AT_FLOOR_LEVEL then
	numTread = rnu
else	! Below Floor Level
	numTread = rnu - 1
endif
if iFirstTread = FIRSTTREAD_AT_FLOOR_LEVEL then numTread = numTread + 1

!				OTHER
k=2*r*pi
mtd=td*r/wldo
ktd=td*(r-st-flw)/wldo

parameters tdor=mtd
lock "tdor"

fordul=mtd*rnu/k
fokszog=2*asn(mtd/(2*r))

resolka=(360.0/fokszog)*res

stepup = (zzyzx)/(resolka*fordul)

coss= td / sqr(th*th+td*td)

!rescs=int(res*360.0/fokszog)/2
!if rescs<3 then rescs=3

if bSameRails then
!!!	depthTreadOut			= depthTreadIn
	roffl					= roffr
	hrl						= hrr
	dsl						= dsr
	fswl					= fswr
	fthl					= fthr
	ftwl					= ftwr
	fbwl					= fbwr
	bwl						= bwr
	bthl					= bthr
	abdistl					= abdistr
	pmatl					= pmatr
	fmatl					= fmatr
	bmatl					= bmatr
	bhl						= bhr
	nbl						= nbr
	btypl_m					= btypr_m
	bdl						= bdr
	fdfl					= fdfr
	hrtl_m					= hrtr_m
	hrdl					= hrdr
	hrwl					= hrwr
	hrhl					= hrhr
	hrol					= hror
	ptl_m					= ptr_m
	npl						= npr
	pdl						= pdr
	pwl						= pwr
	pthl					= pthr
	btl_m					= btr_m
	nbtl					= nbtr
	sbhl					= sbhr
!!!	gs_PostBaseTypeL_m		= gs_PostBaseTypeR_m
!!!	gs_PostBaseOverhangL	= gs_PostBaseOverhangR
!!!	OverhangLBottom			= OverhangRBottom
!!!	OverhangLTop			= OverhangRTop
!!!	roml					= romr
!!!	roml_m					= romr_m
!!!	rmml_m					= romr_m
endif

bComplexRailRight		= (rightRailType_m > 6)
if bSameRails then
	bComplexRailLeft 	= (rightRailType_m > 6)
else
	bComplexRailLeft 	= (leftRailType_m > 6)
endif

if NOT(bComplexRailLeft) then
	handRailWidthL = fthl
else
	IF hrtl_m = HANDRAIL_ROUND THEN
		handRailWidthL = hrdl
	ELSE
		handRailWidthL = hrwl
	ENDIF
endif
if NOT(bComplexRailRight) then
	handRailWidthR = fthr
else
	IF hrtr_m = HANDRAIL_ROUND THEN
		handRailWidthR = hrdr
	ELSE
		handRailWidthR = hrwr
	ENDIF
endif

bEnableCarriageLine		= 1

]]>
</Script_1D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_PR SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_PR>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_UI SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
ui_dialog `Параметры Лестницы`

bCustom2dDetlevel = (gs_detlevel_2D_m = DET2D_CUSTOM)

dim stStairUI[128]
	for i = 1 to 128
		stStairUI[i] = ""
	next i

	stStairUI[1] = `2D-детализация`
	stStairUI[2] = `Масштаб`
	stStairUI[3] = `Тип Маркера Разрыва`
	stStairUI[4] = `Видимые Конструкции`
	stStairUI[5] = `Штриховка Фона`
	stStairUI[6] = `Перо Линии`
	stStairUI[7] = `Тип Линии`
	stStairUI[8] = `Перо Штриховки`
	stStairUI[9] = `Перо Фона Штриховки`
	stStairUI[10] = `Невидимые Конструкции`
	stStairUI[11] = `Перо Линии Всхода`
	stStairUI[12] = `Тип Линии Всхода`
	stStairUI[13] = `Конец Линии Всхода`
	stStairUI[14] = `Начало Линии Всхода`
	stStairUI[15] = `Перо Штриховки (0 - нет)`
	stStairUI[16] = `Перо Штрих. Выше (0 - нет)`
	stStairUI[17] = `Тип Шрифта`
	stStairUI[18] = `Начать с`
	stStairUI[19] = `Формат`
	stStairUI[20] = `Размер Шрифта`
	stStairUI[21] = `Специальный Текст 1`
	stStairUI[22] = `Перо Текста`
	stStairUI[23] = `Специальный Текст 2`
	stStairUI[24] = `Текст Подъема и Спуска`
	stStairUI[25] = `Текст`
	stStairUI[26] = `Тип Символа Стойки`
	stStairUI[27] = `Тип Линии Стойки`
	stStairUI[28] = `Перо Линии Стойки`
	stStairUI[29] = `Линия Невидимой Тетивы`
	stStairUI[30] = `Перо Невидимой Тетивы`
	stStairUI[31] = `2D выше Собственного Этажа`
	stStairUI[32] = `Лестница`
	stStairUI[33] = `Ограждение`
	stStairUI[34] = `Основание`
	stStairUI[35] = `Панели Ограждения`
	stStairUI[36] = `Проступь`
	stStairUI[37] = `Обвязка`
	stStairUI[38] = `Подступенок`
	stStairUI[39] = `Стойка`
	stStairUI[40] = `Поручень`
	stStairUI[41] = `Штриховка выше Линии Разрыва`
	stStairUI[42] = `Показ Линии Всхода`
	stStairUI[43] = `Стрелка к Линии Разрыва`
	stStairUI[44] = `Показ Нумерации`
	stStairUI[45] = `Текст Подступенков/Проступей`
	stStairUI[46] = `Читаемый Текст`
	stStairUI[47] = `Показ Ограждения на Плане`
	stStairUI[48] = `Показ Осей Ограждения`
	stStairUI[49] = `Показ Тетивы на Плане Этажа`
	stStairUI[50] = `Символ Зависит от Этажа`
	stStairUI[51] = `Линия Разрыва`
	stStairUI[52] = `Показ 2D ниже Линии Разрыва`
	stStairUI[53] = `Показ 2D выше Линии Разрыва`
	stStairUI[54] = `Отбрасывание Теней`
	stStairUI[55] = `Единицы Измерения Рабочей Среды Проекта`
	stStairUI[56] = `Ориентация`
	stStairUI[57] = `Ориентация Текста в Символе`

	stStairUI[80] = `Показ Проступей`
	stStairUI[81] = `Линия Всхода выше Линии Разрыва`

	stStairUI[86] = `Описание`
	stStairUI[87] = `Текст Спуска`
	stStairUI[88] = `Тип Видимой Линии`
	stStairUI[89] = `Тип Невидимой Линии`
	stStairUI[90] = `Размер Символа`
	stStairUI[91] = `Текст Подступенка`
	stStairUI[92] = `мм`
	stStairUI[93] = `п.`

	stStairUI[94] = `Перо Контура`
	stStairUI[95] = `Тип Штриховки`
	stStairUI[96] = `Перо Штриховки`
	stStairUI[97] = `Перо Фона Штриховки`
	stStairUI[98] = `Подступенок`

	stStairUI[99] = `Показ Ограждения выше Линии Разрыва`
	stStairUI[100] = `2D-символ`
	stStairUI[101] = stPostSymbolType[1]
	stStairUI[102] = stPostSymbolType[2]
	stStairUI[103] = stPostSymbolType[3]
	stStairUI[104] = stPostSymbolType[4]
	stStairUI[105] = stPostSymbolType[5]

	stStairUI[106] = stDetlevel2D[1]
	stStairUI[107] = stDetlevel2D[2]

	stStairUI[110] = stWalkingDirUPDN[1]
	stStairUI[111] = stWalkingDirUPDN[2]
	stStairUI[112] = stWalkingDirUPDN[3]

	stStairUI[116] = `Выровнять по Символу`
	stStairUI[117] = `Параллельно Линии Всхода`
	stStairUI[118] = `Читаемый`

	stStairUI[119] = stRiseRunText[1]
	stStairUI[120] = stRiseRunText[2]
	stStairUI[121] = stRiseRunText[3]
	stStairUI[122] = stRiseRunText[4]
	stStairUI[123] = stRiseRunText[5]
	stStairUI[124] = stRiseRunText[6]
	stStairUI[125] = stRiseRunText[7]

	stStairUI[126] = `Ограждение Справа`
	stStairUI[127] = `Ограждение Слева`
	stStairUI[128] = `Показ Тетивы`

dim stRailTypesForUI[11]
	stRailTypesForUI[ 1] = `Балюстрада`
	stRailTypesForUI[ 2] = `Параллельные Прутья`
	stRailTypesForUI[ 3] = `Простой Брусок`
	stRailTypesForUI[ 4] = `Объемная Рама с Панелью`
	stRailTypesForUI[ 5] = `Объемная Рама`
	stRailTypesForUI[ 6] = `Панель`
	stRailTypesForUI[ 7] = `Стойки с Балясинами`
	stRailTypesForUI[ 8] = `Стойки с Прутьями`
	stRailTypesForUI[ 9] = `Деревянная Балюстрада`
	stRailTypesForUI[10] = `Стойки с Брусками`
	stRailTypesForUI[11] = `Как и Правое`

dim stStairUITabNames[15]
	for i = 1 to 15
		stStairUITabNames[i] = ""
	next i

	stStairUITabNames[1] = `Типы 2D-символа`
	stStairUITabNames[2] = `Реквизиты 2D-символа`
	stStairUITabNames[4] = `Подъем и Спуск, Нумерация`
	stStairUITabNames[5] = `Ограждение и Тетива в Символе`
	stStairUITabNames[8] = `Тип Ограждения - Справа`
	stStairUITabNames[9] = `Тип Ограждения - Слева`
	stStairUITabNames[13] = `Спуск и Подъем`
	stStairUITabNames[15] = `Стили Стрелки и Начальной Точки`

call "ui_stairs" parameters gs_ui_current_page		= gs_ui_current_page,
! --- 2D symbol type ---
			gs_detlevel_2D_m		= gs_detlevel_2D_m,
			gs_ScaleChangeSM		= gs_ScaleChangeSM,
			iScaleChangeSM			= iScaleChangeSM,
			gs_ScaleChangeMD		= gs_ScaleChangeMD,
			iScaleChangeMD			= iScaleChangeMD,
			stScaleType				= stScaleType,
			bCustom2dDetlevel		= bCustom2dDetlevel,
			gs_SymbolType_m			= gs_SymbolType_m,
			iSymbolGroup			= iSymbolGroup,
! --- 2D symbol attributes ---
			bEnableBreakLineStyle	= 0,
			gs_cont_pen				= gs_cont_pen,
			gs_DashLinePen			= gs_DashLinePen,
			solid_line				= solid_line,
			dash_line				= dash_line,
			gs_fill_type			= gs_fill_type,
			gs_fill_pen				= gs_fill_pen,
			gs_back_pen				= gs_back_pen,
			gs_FillAbove			= gs_FillAbove,
! --- Walkline ---
			arrow_style				= arrow_style,
			gs_StartEndStyle		= gs_StartEndStyle,
! --- Text Display ---
			fontType				= fontType,
			bShowNumbering			= bShowNumbering,
			bShowRiseAndRunText		= bShowRiseAndRunText,
			nStartNumbering			= nStartNumbering,
			gs_NumTextSize			= gs_NumTextSize,
			gs_text_size_pt_num 	= gs_text_size_pt_num,
			gs_NumTextPen			= gs_NumTextPen,
			gs_RiseRunText			= gs_RiseRunText,
			iRiseRunText			= iRiseRunText,
			gs_CustomText1			= gs_CustomText1,
			gs_CustomText2			= gs_CustomText2,
			gs_customText_rise		= gs_customText_rise,
			fontsize				= fontsize,
			gs_text_size_pt			= gs_text_size_pt,
			gs_text_pen				= gs_text_pen,
			walkingDirUPDN			= walkingDirUPDN,
			bEnableCustomDownText	= 0,
			UPDNfontsize			= UPDNfontsize,
			gs_text_size_pt_UpDn	= gs_text_size_pt_UpDn,
			UPDNfontpen				= UPDNfontpen,
			typeTextRotation_RiseRun 	= typeTextRotation_RiseRun,
			typeTextRotation_Num 		= typeTextRotation_Num,
			typeTextRotation_UpDn 		= typeTextRotation_UpDn,
			bEnableDescription		= 0,
! --- Rail & Carriage 2D ---
			bShowRailOnFloorPlan	= bShowRailOnFloorPlan,
			railLineType			= railLineType,
			railPen					= railPen,
			bShowRailAxis			= bShowRailAxis,
			railAxisLineType		= railAxisLineType,
			gs_RailAxisPen			= gs_RailAxisPen,
			bSymbolic2D				= bSymbolic2D,
			postSymbolType			= postSymbolType,
			iPostSymbolType			= iPostSymbolType,
			postLineType			= postLineType,
			postPen					= postPen,
			bEnableCarriageLine		= bEnableCarriageLine,
			bShowCarriage			= bShowCarriage,
			carriageLineType		= carriageLineType,
			carriagePen				= carriagePen,
! --- Rail Types ---
			bRightRail				= bRightRail,
			bLeftRail				= bLeftRail,
			leftRailType			= leftRailType,
			rightRailType			= rightRailType,
			leftRailType_m			= leftRailType_m,
			rightRailType_m			= rightRailType_m,
! --- String resources ---
			stStairUITabNames		= stStairUITabNames,
			stStairSymbolTypes		= stStairSymbolTypes,
			stSymbolGroup			= stSymbolGroup,
			stRailTypesForUI		= stRailTypesForUI,
			stRailTypes				= stRailTypes,
			stStairUI				= stStairUI,
			bEnableWired02Rail		= 0,
! --- Stair Type ---
			iStairType				= 8		! Spiral Wood




]]>
</Script_UI>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_VL SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
call "FM_types" parameters all
call "ui_stairs" parameters gs_ui_current_page	= gs_ui_current_page

! ---------- Length Unit ----------
w_units_form = ""
rrr					= request("Linear_dimension", "", w_units_form)
bLinearDimIsMetric	= (strstr(w_units_form, "m") > 0)


! ---------- 3D detail level ----------
values{2} "gs_detlevel_3D_m" 	DET3D_DETAILED,		stDetlevel3D[1],
								DET3D_SIMPLE,		stDetlevel3D[2],
								DET3D_OFF,			stDetlevel3D[3]

if gs_detlevel_3D_m = DET3D_SIMPLE then
	lock "gs_resol"
	hideparameter "gs_resol"
endif

if gs_detlevel_3D_m = DET3D_OFF then
	lock "gs_resol", "gs_shadow"
	hideparameter "gs_resol", "gs_shadow"
endif


!! ---------- 2D detail level ----------
values{2} "gs_detlevel_2D_m"	DET2D_SCALESENSITIVE,	stDetlevel2D[1],
								DET2D_CUSTOM,			stDetlevel2D[2]

!! ---------- Symbol Type ----------
if gs_detlevel_2D_m = DET2D_SCALESENSITIVE then
	values{2} "iSymbolGroup"	SYMBOLGROUP_TYPE1,	stSymbolGroup[1],
								SYMBOLGROUP_TYPE2,	stSymbolGroup[2],
								SYMBOLGROUP_TYPE3,	stSymbolGroup[3],
								SYMBOLGROUP_TYPE4,	stSymbolGroup[4],
								SYMBOLGROUP_TYPE5,	stSymbolGroup[5],
								SYMBOLGROUP_TYPE6,	stSymbolGroup[6],
								SYMBOLGROUP_TYPE7,	stSymbolGroup[7],
								SYMBOLGROUP_TYPE8,	stSymbolGroup[8]

	lock			"gs_SymbolType_m"
	hideparameter	"gs_SymbolType_m"


	!! ----------------- Simple to Middle Scale -----------------
	if bLinearDimIsMetric then
		_iEnableScaleSMTypes	= 2 + 4 + 8 + 16 + 32 + 64
	else
		_iEnableScaleSMTypes	= 128 + 256 + 512 + 1024 + 2048 + 4096 + 8192 + 16384
	endif

	dim _iEnableScaleSMTypeValueList[]
	dim _stEnableScaleSMTypeValueList[]
	j = 1
	for i = 1 to vardim1(iScaleType)
		if bittest(_iEnableScaleSMTypes, i) then
			_iEnableScaleSMTypeValueList[j] = iScaleType[i]
			_stEnableScaleSMTypeValueList[j] = stScaleType[i]
			j = j + 1
		endif
	next i
	_iEnableScaleSMTypeValueList[j] = iScaleType[15]
	_stEnableScaleSMTypeValueList[j] = stScaleType[15]
	values{2} "iScaleChangeSM" _iEnableScaleSMTypeValueList, _stEnableScaleSMTypeValueList
	if iScaleChangeSM = SCALE_CUSTOM then
		values "gs_ScaleChangeSM"	range (1,)
	else
		gs_ScaleChangeSM = iScaleChangeSM
		parameters	gs_ScaleChangeSM = gs_ScaleChangeSM

		lock			"gs_ScaleChangeSM"
		hideparameter	"gs_ScaleChangeSM"
	endif

	
	!! ----------------- Middle to Detailed Scale -----------------
	if bLinearDimIsMetric then
		_iEnableScaleMDTypes	= 2 + 4 + 8 + 16 + 32 + 64
	else
		_iEnableScaleMDTypes	= 128 + 256 + 512 + 1024 + 2048 + 4096 + 8192 + 16384
	endif

	dim _iEnableScaleMDTypeValueList[]
	dim _stEnableScaleMDTypeValueList[]
	j = 1
	for i = 1 to vardim1(iScaleType)
		if bittest(_iEnableScaleMDTypes, i) then
			if iScaleChangeSM = SCALE_CUSTOM then
				if gs_ScaleChangeSM > iScaleType[i] then
					_iEnableScaleMDTypeValueList[j] = iScaleType[i]
					_stEnableScaleMDTypeValueList[j] = stScaleType[i]
					j = j + 1
				else
					i = vardim1(iScaleType)
				endif
			else
				_iEnableScaleMDTypeValueList[j] = iScaleType[i]
				_stEnableScaleMDTypeValueList[j] = stScaleType[i]

				if gs_ScaleChangeSM = _iEnableScaleSMTypeValueList[j] then
					i = vardim1(iScaleType)
				else
					j = j + 1
				endif
			endif
		endif
	next i
	_iEnableScaleMDTypeValueList[j] = iScaleType[15]
	_stEnableScaleMDTypeValueList[j] = stScaleType[15]
	values{2} "iScaleChangeMD" _iEnableScaleMDTypeValueList, _stEnableScaleMDTypeValueList

	if iScaleChangeMD = SCALE_CUSTOM then
		values "gs_ScaleChangeMD"	range (, _iScaleSM)
	else
		gs_ScaleChangeMD = iScaleChangeMD
		parameters	gs_ScaleChangeMD = gs_ScaleChangeMD

		lock			"gs_ScaleChangeMD"
		hideparameter	"gs_ScaleChangeMD"
	endif
	if (gs_ScaleChangeMD >= gs_ScaleChangeSM)  then
		gs_ScaleChangeMD = gs_ScaleChangeSM - 1
		parameters	gs_ScaleChangeMD = gs_ScaleChangeMD
	endif
else
	values{2} "gs_SymbolType_m"	SYMBOL_TYPE1,	stStairSymbolTypes[1],
								SYMBOL_TYPE2,	stStairSymbolTypes[2],
								SYMBOL_TYPE3,	stStairSymbolTypes[3],
								SYMBOL_TYPE4,	stStairSymbolTypes[4],
								SYMBOL_TYPE5,	stStairSymbolTypes[5],
								SYMBOL_TYPE6,	stStairSymbolTypes[6],
								SYMBOL_TYPE7,	stStairSymbolTypes[7],
								SYMBOL_TYPE8,	stStairSymbolTypes[8],
								SYMBOL_TYPE9,	stStairSymbolTypes[9],
								SYMBOL_TYPE10,	stStairSymbolTypes[10],
								SYMBOL_TYPE11,	stStairSymbolTypes[11],
								SYMBOL_TYPE12,	stStairSymbolTypes[12],
								SYMBOL_TYPE13,	stStairSymbolTypes[13],
								SYMBOL_TYPE14,	stStairSymbolTypes[14],
								SYMBOL_TYPE15,	stStairSymbolTypes[15],
								SYMBOL_TYPE16,	stStairSymbolTypes[16],
								SYMBOL_TYPE17,	stStairSymbolTypes[17],
								SYMBOL_TYPE18,	stStairSymbolTypes[18],
								SYMBOL_TYPE19,	stStairSymbolTypes[19],
								SYMBOL_TYPE20,	stStairSymbolTypes[20]

	lock			"iSymbolGroup",
					"gs_ScaleChangeSM",
					"iScaleChangeSM",
					"gs_ScaleChangeMD",
					"iScaleChangeMD"
	hideparameter	"iSymbolGroup",
					"gs_ScaleChangeSM",
					"iScaleChangeSM",
					"gs_ScaleChangeMD",
					"iScaleChangeMD"
endif


VALUES "res" RANGE [1,500]

values "jntl" stLowerJunctionType
values "iLowerJunctionType" LOWERJUNCTION_GROUND_FLOOR, LOWERJUNCTION_FLOOR_OR_LANDING

if GLOB_MODPAR_NAME = "jntl" then
	n = vardim1(stLowerJunctionType)
	iLowerJunctionType = LOWERJUNCTION_GROUND_FLOOR
	for i = 1 to n
		if jntl = stLowerJunctionType[i] then
			iLowerJunctionType = i
			i = n
		endif
	next i
	parameters iLowerJunctionType = iLowerJunctionType
else
	iLowerJunctionType = max(1, min(iLowerJunctionType, vardim1(stLowerJunctionType)))
	jntl = stLowerJunctionType[iLowerJunctionType]
	parameters	jntl = jntl,
				iLowerJunctionType = iLowerJunctionType
endif


values "tt" stTopTread
values "iTopTread" TOPTREAD_AT_FLOOR_LEVEL, TOPTREAD_BELOW_FLOOR_LEVEL

if GLOB_MODPAR_NAME = "tt" then
	n = vardim1(stTopTread)
	iTopTread = TOPTREAD_AT_FLOOR_LEVEL
	for i = 1 to n
		if tt = stTopTread[i] then
			iTopTread = i
			i = n
		endif
	next i
	parameters iTopTread = iTopTread
else
	iTopTread = max(1, min(iTopTread, vardim1(stTopTread)))
	tt = stTopTread[iTopTread]
	parameters	tt = tt,
				iTopTread = iTopTread
endif


if iLowerJunctionType = LOWERJUNCTION_GROUND_FLOOR then
	values "ft" stFirstTread[2]
else
	values "ft" stFirstTread
endif
values "iFirstTread" FIRSTTREAD_AT_FLOOR_LEVEL, FIRSTTREAD_ABOVE_FLOOR_LEVEL

if GLOB_MODPAR_NAME = "ft" then
	n = vardim1(stFirstTread)
	iFirstTread = FIRSTTREAD_AT_FLOOR_LEVEL
	for i = 1 to n
		if ft = stFirstTread[i] then
			iFirstTread = i
			i = n
		endif
	next i
	parameters iFirstTread = iFirstTread
else
	iFirstTread = max(1, min(iFirstTread, vardim1(stFirstTread)))
	ft = stFirstTread[iFirstTread]
	parameters	ft = ft,
				iFirstTread = iFirstTread
endif


values "fst" stFlightSectionType
values "iFlightSectionType" FLIGHTSECTION_WITHOUT_SOFFIT, FLIGHTSECTION_WITH_SOFFIT

if GLOB_MODPAR_NAME = "fst" then
	n = vardim1(stFlightSectionType)
	iFlightSectionType = FLIGHTSECTION_WITHOUT_SOFFIT
	for i = 1 to n
		if fst = stFlightSectionType[i] then
			iFlightSectionType = i
			i = n
		endif
	next i
	parameters iFlightSectionType = iFlightSectionType
else
	iFlightSectionType = max(1, min(iFlightSectionType, vardim1(stFlightSectionType)))
	fst = stFlightSectionType[iFlightSectionType]
	parameters	fst = fst,
				iFlightSectionType = iFlightSectionType
endif


values "PTYP" stCalculationMode
values "iCalculationMode" CALCMODE_NO_OF_RISERS, CALCMODE_TREAD_HEIGHT

if GLOB_MODPAR_NAME = "PTYP" then
	n = vardim1(stCalculationMode)
	iCalculationMode = CALCMODE_NO_OF_RISERS
	for i = 1 to n
		if PTYP = stCalculationMode[i] then
			iCalculationMode = i
			i = n
		endif
	next i
	parameters iCalculationMode = iCalculationMode
else
	iCalculationMode = max(1, min(iCalculationMode, vardim1(stCalculationMode)))
	PTYP = stCalculationMode[iCalculationMode]
	parameters	PTYP = PTYP,
				iCalculationMode = iCalculationMode
endif


values "bt" stBattenStyle		! None, Nosing, Intermediate, Tread, Full
values "bt_m" BATTEN_NONE, BATTEN_NOSING, BATTEN_INTERM, BATTEN_TREAD, BATTEN_FULL

if GLOB_MODPAR_NAME = "bt" then
	bt_m = 1
	for i = 1 to vardim1(stBattenStyle)
		if bt = stBattenStyle[i] then
			bt_m = i
			i = vardim1(stBattenStyle)
		endif
	next i
	parameters bt_m = bt_m
else
	bt_m = max(1, min(bt_m, vardim1(stBattenStyle)))
	bt = stBattenStyle[bt_m]
	parameters bt_m = bt_m, bt = bt
endif

values "arrow_style" stArrowStyle
values "arrow_style_m"	ARROW_STYLE_1,
						ARROW_STYLE_2,
						ARROW_STYLE_3,
						ARROW_STYLE_4,
						ARROW_STYLE_5,
						ARROW_STYLE_6,
						ARROW_STYLE_7,
						ARROW_STYLE_8,
						ARROW_STYLE_9

if GLOB_MODPAR_NAME = "arrow_style" then
	n = vardim1(stArrowStyle)
	arrow_style_m = ARROW_STYLE_1
	for i = 1 to n
		if arrow_style = stArrowStyle[i] then
			arrow_style_m = i
			i = n
		endif
	next i
	parameters arrow_style_m = arrow_style_m
else
	arrow_style_m = max(1, min(arrow_style_m, vardim1(stArrowStyle)))
	arrow_style = stArrowStyle[arrow_style_m]
	parameters	arrow_style = arrow_style,
				arrow_style_m = arrow_style_m
endif

values "gs_StartEndStyle" stStartSymbolStyles		! Style 1, Style 2, Style 3, None
values "gs_StartEndStyle_m" STARTSYMB_STYLE1, STARTSYMB_STYLE2, STARTSYMB_STYLE3, STARTSYMB_NONE

if GLOB_MODPAR_NAME = "gs_StartEndStyle" then
	gs_StartEndStyle_m = 1
	for i = 1 to vardim1(stStartSymbolStyles)
		if gs_StartEndStyle = stStartSymbolStyles[i] then
			gs_StartEndStyle_m = i
			i = vardim1(stStartSymbolStyles)
		endif
	next i
	parameters gs_StartEndStyle_m = gs_StartEndStyle_m
else
	gs_StartEndStyle_m = max(1, min(gs_StartEndStyle_m, vardim1(stStartSymbolStyles)))
	gs_StartEndStyle = stStartSymbolStyles[gs_StartEndStyle_m]
	parameters	gs_StartEndStyle_m	= gs_StartEndStyle_m,
				gs_StartEndStyle	= gs_StartEndStyle
endif


! ---------- Rise and Run Text ----------

values "gs_RiseRunText" stRiseRunText
values "iRiseRunText" 1, 2, 3, 4, 5, 6, 99

if GLOB_MODPAR_NAME = "gs_RiseRunText" then
	for i = 1 to vardim1(stRiseRunText)
	   if gs_RiseRunText = stRiseRunText[i]	then iRiseRunText = i
	next i
	if gs_RiseRunText = stRiseRunText[7]	then iRiseRunText = 99
	parameters iRiseRunText = iRiseRunText
else
	if iRiseRunText = 99 then
		gs_RiseRunText = stRiseRunText[7]
	else
		gs_RiseRunText = stRiseRunText[max(1, min(iRiseRunText, vardim1(stRiseRunText)) )]
	endif
	parameters gs_RiseRunText = gs_RiseRunText
endif

values "typeTextRotation_RiseRun" `Читаемый`,`Выровнять по Символу`
values "typeTextRotation_RiseRun_m" 2, 0

if GLOB_MODPAR_NAME = "typeTextRotation_RiseRun" then
	if typeTextRotation_RiseRun = `Читаемый`			then typeTextRotation_RiseRun_m = 2
	if typeTextRotation_RiseRun = `Выровнять по Символу`	then typeTextRotation_RiseRun_m = 0
	parameters typeTextRotation_RiseRun_m = typeTextRotation_RiseRun_m
else
	if typeTextRotation_RiseRun_m = 2					then typeTextRotation_RiseRun = `Читаемый`
	if typeTextRotation_RiseRun_m = 0					then typeTextRotation_RiseRun = `Выровнять по Символу`
	parameters typeTextRotation_RiseRun = typeTextRotation_RiseRun
endif

if not(bShowRiseAndRunText) then
	lock			"gs_RiseRunText","gs_CustomText1", "gs_CustomText2", "gs_customText_rise",
					"fontsize","gs_text_size_pt", "typeTextRotation_RiseRun","gs_text_pen","bUseACLinearUnit"
	hideparameter	"gs_RiseRunText","gs_CustomText1", "gs_CustomText2", "gs_customText_rise",
					"fontsize","gs_text_size_pt", "typeTextRotation_RiseRun","gs_text_pen","bUseACLinearUnit"
endif

if iRiseRunText <> 99 then
	lock 	"gs_CustomText1","gs_CustomText2"
	hideparameter 	"gs_CustomText1","gs_CustomText2"
endif

if iRiseRunText <> 5 & iRiseRunText <> 6 then
	lock "gs_customText_rise"
	hideparameter "gs_customText_rise"
endif

if iRiseRunText = 99 then		! Custom
	if bLinearDimIsMetric then hideparameter	"gs_CustomText2"
endif

! ---------- Numbering ----------

values "typeTextRotation_Num" `Читаемый`,`Выровнять по Символу`
values "typeTextRotation_Num_m" 2, 0

if GLOB_MODPAR_NAME = "typeTextRotation_Num" then
	if typeTextRotation_Num = `Читаемый`			then typeTextRotation_Num_m = 2
	if typeTextRotation_Num = `Выровнять по Символу`	then typeTextRotation_Num_m = 0
	parameters typeTextRotation_Num_m = typeTextRotation_Num_m
else
	if typeTextRotation_Num_m = 2					then typeTextRotation_Num = `Читаемый`
	if typeTextRotation_Num_m = 0					then typeTextRotation_Num = `Выровнять по Символу`
	parameters typeTextRotation_Num= typeTextRotation_Num
endif

if not(bShowNumbering) then
	 lock			"nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen","gs_NumBelow","gs_NumAbove", "typeTextRotation_Num"
	 hideparameter	"nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen","gs_NumBelow","gs_NumAbove", "typeTextRotation_Num"
endif

! ---------- UP and Down ----------
values "walkingDirUPDN" stWalkingDirUPDN		! None, UP, DOWN
values "walkingDirUPDN_m" WALKDIRSTR_NONE, WALKDIRSTR_UP, WALKDIRSTR_DOWN

if GLOB_MODPAR_NAME = "walkingDirUPDN" then
	walkingDirUPDN_m = 1
	for i = 1 to vardim1(stWalkingDirUPDN)
		if walkingDirUPDN = stWalkingDirUPDN[i] then
			walkingDirUPDN_m = i
			i = vardim1(stWalkingDirUPDN)
		endif
	next i
	parameters walkingDirUPDN_m = walkingDirUPDN_m
else
	walkingDirUPDN_m = max(1, min(walkingDirUPDN_m, vardim1(stWalkingDirUPDN)))
	walkingDirUPDN = stWalkingDirUPDN[walkingDirUPDN_m]
	parameters	walkingDirUPDN_m	= walkingDirUPDN_m,
				walkingDirUPDN		= walkingDirUPDN
endif

values "typeTextRotation_UpDn" `Читаемый`,`Параллельно Линии Всхода`,`Выровнять по Символу`
values "typeTextRotation_UpDn_m" 2, 1, 0

if GLOB_MODPAR_NAME = "typeTextRotation_UpDn" then
	if typeTextRotation_UpDn = `Читаемый`					then typeTextRotation_UpDn_m = 2
	if typeTextRotation_UpDn = `Параллельно Линии Всхода`	then typeTextRotation_UpDn_m = 1
	if typeTextRotation_UpDn = `Выровнять по Символу`			then typeTextRotation_UpDn_m = 0
	parameters typeTextRotation_UpDn_m = typeTextRotation_UpDn_m
else
	if typeTextRotation_UpDn_m = 2					then typeTextRotation_UpDn = `Читаемый`
	if typeTextRotation_UpDn_m = 1					then typeTextRotation_UpDn = `Параллельно Линии Всхода`
	if typeTextRotation_UpDn_m = 0					then typeTextRotation_UpDn = `Выровнять по Символу`
	parameters typeTextRotation_UpDn = typeTextRotation_UpDn
endif

if walkingDirUPDN_m = WALKDIRSTR_NONE  then
	 lock			"UPDNfontsize", "gs_text_size_pt_UpDn", "UPDNfontpen","AngUPDN", "typeTextRotation_UpDn"
	 HIDEPARAMETER	"UPDNfontsize", "gs_text_size_pt_UpDn", "UPDNfontpen","AngUPDN", "typeTextRotation_UpDn"
endif

!!! *** RANGE PARAMETERS *** !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

VALUES "ZZYZX" RANGE [2*th,)
VALUES "r" RANGE (0,)
VALUES "flw" RANGE [2*st,)
VALUES "lst" RANGE [0,)
VALUES "softh" RANGE [0.03,)
VALUES "sh" RANGE (0,)
VALUES "st" RANGE [0,)

VALUES "wldo" RANGE [r-flw+st,r-st]
VALUES "pth" RANGE [0.05,)
VALUES "th" RANGE (0,)
VALUES "td" RANGE (0,)
VALUES "thd" RANGE (0,)
VALUES "rnu" RANGE (0,)
VALUES "rt" RANGE (0,)
VALUES "ns" RANGE (0,)

VALUES "gs_BreakHeight" 	RANGE [th,INT(360/fokszog)*th]
VALUES "gs_ArrowHeight" 	RANGE (0,)
VALUES "gs_ArrowHalfWidth" 	RANGE (0,)
VALUES "gs_CircleRadius" 	RANGE (0,)
VALUES "gs_StartWidth" 		RANGE (0,)
VALUES "gs_StartHeight" 	RANGE (0,)

VALUES "rescs" RANGE [3,)


!!! *** RAILING PARAMETERS *** !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

values "rail_m" 1, 2, 3, 4
if GLOB_MODPAR_NAME = "bRightRail" or GLOB_MODPAR_NAME = "bLeftRail" then
	if bRightRail then
		if bLeftRail then
			rail_m = RAILPOS_BOTH
		else
			rail_m = RAILPOS_RIGHT
		endif
	else
		if bLeftRail then
			rail_m = RAILPOS_LEFT
		else
			rail_m = RAILPOS_NONE
		endif
	endif
	parameters rail_m = rail_m
else
	if rail_m = 1 then
		bRightRail	= 1
		bLeftRail	= 1
	endif
	if rail_m = 2 then
		bRightRail	= 1
		bLeftRail	= 0
	endif
	if rail_m = 3 then
		bRightRail	= 0
		bLeftRail	= 1
	endif
	if rail_m = 4 then
		bRightRail	= 0
		bLeftRail	= 0
	endif
	parameters bRightRail	= bRightRail
	parameters bLeftRail	= bLeftRail
endif

if NOT(bRightRail) then
	lock			"rightRailType"
	hideparameter	"rightRailType"
endif
if NOT(bLeftRail) then
	lock			"leftRailType"
	hideparameter	"leftRailType"
endif

values "btypr" stBarStyle
values "btypr_m" BAR_RECTANGULAR, BAR_ROUND

if GLOB_MODPAR_NAME = "btypr" then
	btypr_m = BAR_RECTANGULAR
	if btypr = stBarStyle[2] then btypr_m = BAR_ROUND
	parameters btypr_m = btypr_m
else
	btypr = stBarStyle[1]
	if btypr_m = BAR_ROUND then btypr = stBarStyle[2]
	parameters btypr = btypr
endif

values "btypl" stBarStyle
values "btypl_m" BAR_RECTANGULAR, BAR_ROUND

if GLOB_MODPAR_NAME = "btypl" then
	btypl_m = BAR_RECTANGULAR
	if btypl = stBarStyle[2] then btypl_m = BAR_ROUND
	parameters btypl_m = btypl_m
else
	btypl = stBarStyle[1]
	if btypl_m = BAR_ROUND then btypl = stBarStyle[2]
	parameters btypl = btypl
endif

VALUES "rightRailType" 	stRailTypes[1],
						stRailTypes[2],
						stRailTypes[3],
						stRailTypes[4],
						stRailTypes[5],
						stRailTypes[6],
						stRailTypes[7],
						stRailTypes[8],
						stRailTypes[9],
						stRailTypes[10]

if GLOB_MODPAR_NAME = "rightRailType" then
	for i = 1 to vardim1(stRailTypes)
	   if rightRailType = stRailTypes[i]	then rightRailType_m = i
	next i
	parameters rightRailType_m = rightRailType_m
else
	parameters rightRailType = stRailTypes[rightRailType_m]
endif

if rail_m = RAILPOS_BOTH then		! Both
	VALUES "leftRailType" 	stRailTypes[11],
							stRailTypes[1],
							stRailTypes[2],
							stRailTypes[3],
							stRailTypes[4],
							stRailTypes[5],
							stRailTypes[6],
							stRailTypes[7],
							stRailTypes[8],
							stRailTypes[9],
							stRailTypes[10]
else
	VALUES "leftRailType" 	stRailTypes[1],
							stRailTypes[2],
							stRailTypes[3],
							stRailTypes[4],
							stRailTypes[5],
							stRailTypes[6],
							stRailTypes[7],
							stRailTypes[8],
							stRailTypes[9],
							stRailTypes[10]
endif
if GLOB_MODPAR_NAME = "leftRailType" then
	for i = 1 to vardim1(stRailTypes)
	   if leftRailType = stRailTypes[i]	then leftRailType_m = i
	next i
	parameters leftRailType_m = leftRailType_m
else
	parameters leftRailType = stRailTypes[leftRailType_m]
endif
bSameRails = (leftRailType_m = RAIL_SAMERAILS)
parameters bSameRails = bSameRails

if GLOB_MODPAR_NAME = "rightRailType" or GLOB_MODPAR_NAME = "rightRailType_m" then
	if rightRailType_m = RAIL_WIRED then
		bwr		= 0.005
		bthr	= 0.005
		bdr		= 0.005
	else
		bwr		= 0.025
		bthr	= 0.025
		bdr		= 0.05
	endif

	parameters bwr = bwr
	parameters bthr = bthr
	parameters bdr = bdr
endif

if GLOB_MODPAR_NAME = "leftRailType" or GLOB_MODPAR_NAME = "leftRailType_m" then
	if leftRailType_m = RAIL_WIRED then
		bwl		= 0.005
		bthl	= 0.005
		bdl		= 0.005
	else
		bwl		= 0.025
		bthl	= 0.025
		bdl		= 0.05
	endif

	parameters bwl = bwr
	parameters bthl = bthr
	parameters bdl = bdr
endif

! ==============================================================================
! Symbolic 2D
! ==============================================================================

values "postSymbolType" stPostSymbolType
values "iPostSymbolType" 1, 2, 3, 4, 0
if GLOB_MODPAR_NAME = "postSymbolType" then
	iPostSymbolType = 1
	if postSymbolType = stPostSymbolType[2] then iPostSymbolType = 2
	if postSymbolType = stPostSymbolType[3] then iPostSymbolType = 3
	if postSymbolType = stPostSymbolType[4] then iPostSymbolType = 4
	if postSymbolType = stPostSymbolType[5] then iPostSymbolType = 0
	parameters iPostSymbolType = iPostSymbolType
else
	postSymbolType = stPostSymbolType[1]
	if iPostSymbolType = 2 then postSymbolType = stPostSymbolType[2]
	if iPostSymbolType = 3 then postSymbolType = stPostSymbolType[3]
	if iPostSymbolType = 4 then postSymbolType = stPostSymbolType[4]
	if iPostSymbolType = 0 then postSymbolType = stPostSymbolType[5]
	parameters postSymbolType = postSymbolType
endif

if NOT(bShowRailOnFloorPlan) then
	lock			"railLineType",
					"railPen",
					"bSymbolic2D",
					"postSymbolType",
					"iPostSymbolType",
					"postLineType",
					"postPen",
					"bShowRailAboveBreakLine"
	hideparameter	"railLineType",
					"railPen",
					"bSymbolic2D",
					"postSymbolType",
					"iPostSymbolType",
					"postLineType",
					"postPen",
					"bShowRailAboveBreakLine"
endif
if NOT(iPostSymbolType) then
	lock			"postLineType",
					"postPen"
	hideparameter	"postLineType",
					"postPen"
endif
if NOT(bSymbolic2D) then
	lock			"postSymbolType",
					"iPostSymbolType",
					"postLineType",
					"postPen"
	hideparameter	"postSymbolType",
					"iPostSymbolType",
					"postLineType",
					"postPen"
endif
if not(bShowRailAxis) then
	lock 			"railAxisLineType",
					"gs_RailAxisPen"
	hideparameter	"railAxisLineType",
					"gs_RailAxisPen"
endif
if	gs_detlevel_2D_m = DET2D_CUSTOM &\
	(gs_SymbolType_m = 3 |\
	gs_SymbolType_m = 8 |\
	gs_SymbolType_m = 15) then
	lock			"bShowRailAboveBreakLine"
	hideparameter	"bShowRailAboveBreakLine"
endif
if NOT(bShowCarriage) then
	lock			"iShowCarriageUpTo",
					"stShowCarriageUpTo",
					"carriageLineType",
					"carriagePen"
	hideparameter	"stShowCarriageUpTo",
					"carriageLineType",
					"carriagePen"
endif
if NOT(bEnableCarriageLine) then
	lock			"bShowCarriage",
					"iShowCarriageUpTo",
					"stShowCarriageUpTo",
					"carriageLineType",
					"carriagePen"
	hideparameter	"bShowCarriage",
					"stShowCarriageUpTo",
					"carriageLineType",
					"carriagePen"
endif

values "stShowCarriageUpTo" stShowCarriageValues
values "iShowCarriageUpTo" 1, 20, 50, 100, 200

if GLOB_MODPAR_NAME = "stShowCarriageUpTo" then
	iShowCarriageUpTo = 1
	if stShowCarriageUpTo = stShowCarriageValues[2]	then iShowCarriageUpTo = 20
	if stShowCarriageUpTo = stShowCarriageValues[3]	then iShowCarriageUpTo = 50
	if stShowCarriageUpTo = stShowCarriageValues[4]	then iShowCarriageUpTo = 100
	if stShowCarriageUpTo = stShowCarriageValues[5]	then iShowCarriageUpTo = 200
	parameters iShowCarriageUpTo = iShowCarriageUpTo
else
	stShowCarriageUpTo = stShowCarriageValues[1]
	if iShowCarriageUpTo = 20	then stShowCarriageUpTo = stShowCarriageValues[2]
	if iShowCarriageUpTo = 50	then stShowCarriageUpTo = stShowCarriageValues[3]
	if iShowCarriageUpTo = 100	then stShowCarriageUpTo = stShowCarriageValues[4]
	if iShowCarriageUpTo = 200	then stShowCarriageUpTo = stShowCarriageValues[5]
	parameters stShowCarriageUpTo = stShowCarriageUpTo
endif

!!! *** HIDE RAILING PARAMETERS *** !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

LOCK "ggr","sgr","ggl","sgl"

IF leftRailType_m = RAIL_BALUSTRADE THEN
	HIDEPARAMETER "fdfl", "bhl", "nbl", "btypl", "bdl", "hrtl", "hrdl"
	HIDEPARAMETER "hrwl", "hrhl", "hrol", "ptl", "npl"
	HIDEPARAMETER "nbtl", "pdl", "pwl", "pthl", "sbhl", "btl"
	HIDEPARAMETER "pmatl"
ENDIF

IF leftRailType_m = RAIL_PARALLEL_BARS THEN
	HIDEPARAMETER "fswl", "ftwl", "fbwl", "bwl", "bthl", "abdistl"
	HIDEPARAMETER "fdfl", "btypl", "bdl", "hrtl", "hrdl"
	HIDEPARAMETER "hrwl", "hrhl", "hrol", "ptl", "npl"
	HIDEPARAMETER "nbtl", "pdl", "pwl", "pthl", "sbhl", "btl"
	HIDEPARAMETER "bmatl","pmatl"
ENDIF

IF leftRailType_m = RAIL_SIMPLE_BAR THEN
	HIDEPARAMETER "fswl", "ftwl", "fbwl", "bwl", "bthl", "abdistl"
	HIDEPARAMETER "fdfl", "nbl", "hrtl", "hrdl"
	HIDEPARAMETER "hrwl", "hrhl", "hrol", "ptl", "npl"
	HIDEPARAMETER "nbtl", "pdl", "pwl", "pthl", "sbhl", "btl"
	HIDEPARAMETER "bmatl","pmatl"
ENDIF

IF leftRailType_m = RAIL_SOLID_FRAME_FILLED THEN
	HIDEPARAMETER "bhl", "nbl", "btypl", "bdl", "hrtl", "hrdl"
	HIDEPARAMETER "hrwl", "hrhl", "hrol", "ptl", "npl", "btl"
	HIDEPARAMETER "nbtl", "pdl", "pwl", "pthl", "sbhl", "bwl", "abdistl"
	HIDEPARAMETER "pmatl"
ENDIF

IF leftRailType_m = RAIL_SOLID_FRAME THEN
	HIDEPARAMETER "bthl", "fdfl", "bhl", "nbl", "btypl", "bdl", "hrtl", "hrdl"
	HIDEPARAMETER "hrwl", "hrhl", "hrol", "ptl", "npl", "btl"
	HIDEPARAMETER "nbtl", "pdl", "pwl", "pthl", "sbhl", "bwl", "abdistl"
	HIDEPARAMETER "bmatl","pmatl"
ENDIF

IF leftRailType_m = RAIL_SOLID THEN
	HIDEPARAMETER "fswl", "ftwl", "fbwl", "bthl", "fdfl"
	HIDEPARAMETER "bthl", "fdfl", "bhl", "nbl", "btypl", "bdl", "hrtl", "hrdl"
	HIDEPARAMETER "hrwl", "hrhl", "hrol", "ptl", "npl", "btl"
	HIDEPARAMETER "nbtl", "pdl", "pwl", "pthl", "sbhl", "bwl", "abdistl"
	HIDEPARAMETER "bmatl","pmatl"
ENDIF

IF leftRailType_m = RAIL_POST_WITH_BALUSTERS THEN
	HIDEPARAMETER "ggl","sgl"
	HIDEPARAMETER "fswl", "ftwl", "fbwl", "fdfl", "fthl"
	HIDEPARAMETER "fdfl", "bhl", "btypl"
	HIDEPARAMETER "nbtl", "sbhl", "abdistl"
ENDIF

IF leftRailType_m = RAIL_WIRED THEN
	HIDEPARAMETER "ggl","sgl"
	HIDEPARAMETER "fswl", "ftwl", "fbwl", "fdfl", "fthl"
	HIDEPARAMETER "fdfl", "bhl", "btypl"
	HIDEPARAMETER "sbhl"
	HIDEPARAMETER "nbtl", "abdistl"
ENDIF

IF leftRailType_m = RAIL_WOODEN_BALUSTRADE THEN
	HIDEPARAMETER "ggl","sgl"
	HIDEPARAMETER "fswl", "ftwl", "fbwl", "bthl", "fdfl", "fthl"
	HIDEPARAMETER "bthl", "fdfl", "bhl", "btypl"
	HIDEPARAMETER "sbhl", "abdistl", "ptl", "npl", "pwl"
	HIDEPARAMETER "pthl", "btl", "nbl"
	HIDEPARAMETER "bmatl"
ENDIF

IF leftRailType_m = RAIL_POST_WITH_BARS THEN
	HIDEPARAMETER "ggl","sgl"
	HIDEPARAMETER "fswl", "ftwl", "fbwl", "fdfl", "fthl"
	HIDEPARAMETER "bhl", "btypl"
	HIDEPARAMETER "nbtl", "abdistl"
ENDIF

IF rightRailType_m = RAIL_BALUSTRADE THEN
	HIDEPARAMETER "fdfr", "bhr", "nbr", "btypr", "bdr", "hrtr", "hrdr"
	HIDEPARAMETER "hrwr", "hrhr", "hror", "ptr", "npr"
	HIDEPARAMETER "nbtr", "pdr", "pwr", "pthr", "sbhr", "btr"
	HIDEPARAMETER "pmatr"
ENDIF

IF rightRailType_m = RAIL_PARALLEL_BARS THEN
	HIDEPARAMETER "fswr", "ftwr", "fbwr", "bwr", "bthr", "abdistr"
	HIDEPARAMETER "fdfr", "btypr", "bdr", "hrtr", "hrdr"
	HIDEPARAMETER "hrwr", "hrhr", "hror", "ptr", "npr"
	HIDEPARAMETER "nbtr", "pdr", "pwr", "pthr", "sbhr", "btr"
	HIDEPARAMETER "bmatr","pmatr"
ENDIF

IF rightRailType_m = RAIL_SIMPLE_BAR THEN
	HIDEPARAMETER "fswr", "ftwr", "fbwr", "bwr", "bthr", "abdistr"
	HIDEPARAMETER "fdfr", "nbr", "hrtr", "hrdr"
	HIDEPARAMETER "hrwr", "hrhr", "hror", "ptr", "npr"
	HIDEPARAMETER "nbtr", "pdr", "pwr", "pthr", "sbhr", "btr"
	HIDEPARAMETER "bmatr","pmatr"
ENDIF

IF rightRailType_m = RAIL_SOLID_FRAME_FILLED THEN
	HIDEPARAMETER "bhr", "nbr", "btypr", "bdr", "hrtr", "hrdr"
	HIDEPARAMETER "hrwr", "hrhr", "hror", "ptr", "npr", "btr"
	HIDEPARAMETER "nbtr", "pdr", "pwr", "pthr", "sbhr", "bwr", "abdistr"
	HIDEPARAMETER "pmatr"
ENDIF

IF rightRailType_m = RAIL_SOLID_FRAME THEN
	HIDEPARAMETER "bthr", "fdfr", "bhr", "nbr", "btypr", "bdr", "hrtr", "hrdr"
	HIDEPARAMETER "hrwr", "hrhr", "hror", "ptr", "npr", "btr"
	HIDEPARAMETER "nbtr", "pdr", "pwr", "pthr", "sbhr", "bwr", "abdistr"
	HIDEPARAMETER "bmatr","pmatr"
ENDIF

IF rightRailType_m = RAIL_SOLID THEN
	HIDEPARAMETER "fswr", "ftwr", "fbwr", "bthr", "fdfr"
	HIDEPARAMETER "bthr", "fdfr", "bhr", "nbr", "btypr", "bdr", "hrtr", "hrdr"
	HIDEPARAMETER "hrwr", "hrhr", "hror", "ptr", "npr", "btr"
	HIDEPARAMETER "nbtr", "pdr", "pwr", "pthr", "sbhr", "bwr", "abdistr"
	HIDEPARAMETER "bmatr","pmatr"
ENDIF

IF rightRailType_m = RAIL_POST_WITH_BALUSTERS THEN
	HIDEPARAMETER "ggr","sgr"
	HIDEPARAMETER "fswr", "ftwr", "fbwr", "fdfr", "fthr"
	HIDEPARAMETER "fdfr", "bhr", "btypr"
	HIDEPARAMETER "nbtr", "sbhr", "abdistr"
ENDIF

IF rightRailType_m = RAIL_WIRED THEN
	HIDEPARAMETER "ggr","sgr"
	HIDEPARAMETER "fswr", "ftwr", "fbwr", "fdfr", "fthr"
	HIDEPARAMETER "fdfr", "bhr", "btypr"
	HIDEPARAMETER "sbhr"
	HIDEPARAMETER "nbtr", "abdistr"
ENDIF

IF rightRailType_m = RAIL_WOODEN_BALUSTRADE THEN
	HIDEPARAMETER "ggr","sgr"
	HIDEPARAMETER "fswr", "ftwr", "fbwr", "bthr", "fdfr", "fthr"
	HIDEPARAMETER "bthr", "fdfr", "bhr", "btypr"
	HIDEPARAMETER "sbhr", "abdistr", "ptr", "npr", "pwr"
	HIDEPARAMETER "pthr", "btr", "nbr"
	HIDEPARAMETER "bmatr"
ENDIF

IF rightRailType_m = RAIL_POST_WITH_BARS THEN
	HIDEPARAMETER "ggr","sgr"
	HIDEPARAMETER "fswr", "ftwr", "fbwr", "fdfr", "fthr"
	HIDEPARAMETER "bhr", "btypr"
	HIDEPARAMETER "nbtr", "abdistr"
ENDIF

!!! *** FULL HIDE OF RAILING PARAMETERS *** !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

IF rail_m = RAILPOS_NONE or rail_m = RAILPOS_LEFT THEN
	HIDEPARAMETER "ggr", "hrr", "dsr", "roffr", "sgr", "fswr",
		"fthr", "ftwr", "fbwr", "bwr", "bthr", "abdistr", "fdfr",
		"bhr", "bdr", "nbr", "btypr", "fmatr", "bmatr", "romr", "rmmr",
		"hrtr","hrdr","hrwr","hrhr","hror",
		"ptr","npr","nbtr","pdr","pwr","pthr",
		"btr","nbr","bwr","bthr","bdr","sbhr",
		"bmatr","fmatr","pmatr"
ENDIF
IF rail_m = RAILPOS_NONE or rail_m = RAILPOS_RIGHT THEN
	HIDEPARAMETER "ggl", "hrl", "dsl", "roffl", "sgl", "fswl",
		"fthl", "ftwl", "fbwl", "bwl", "bthl", "abdistl", "fdfl",
		"bhl", "bdl", "nbl", "btypl", "fmatl", "bmatl", "rmml",
		"hrtl","hrdl","hrwl","hrhl","hrol",
		"ptl","npl","nbtl","pdl","pwl","pthl",
		"btl","nbl","bwl","bthl","bdl","sbhl",
		"bmatl","fmatl","pmatl"
ENDIF

!!! *** RIGHT RAIL STRUCTURAL DIMENSION PARAMETERS *** !!!!!!!!!!!!!!!!!!!!!!!!!

values "hrtr" stHandrailStyle
values "hrtr_m" HANDRAIL_RECTANGULAR, HANDRAIL_ROUND

if GLOB_MODPAR_NAME = "hrtr" then
	hrtr_m = HANDRAIL_RECTANGULAR
	if hrtr = stHandrailStyle[2] then hrtr_m = HANDRAIL_ROUND
	parameters hrtr_m = hrtr_m
else
	hrtr = stHandrailStyle[1]
	if hrtr_m = HANDRAIL_ROUND then hrtr = stHandrailStyle[2]
	parameters hrtr = hrtr
endif

IF hrtr_m = HANDRAIL_ROUND THEN
	HIDEPARAMETER "hrwr"
	HIDEPARAMETER "hrhr"
ELSE
	HIDEPARAMETER "hrdr"
ENDIF

values "ptr" stPostStyle
values "ptr_m" POST_RECTANGULAR, POST_ROUND

if GLOB_MODPAR_NAME = "ptr" then
	ptr_m = POST_RECTANGULAR
	if ptr = stPostStyle[2] then ptr_m = POST_ROUND
	parameters ptr_m = ptr_m
else
	ptr = stPostStyle[1]
	if ptr_m = POST_ROUND then ptr = stPostStyle[2]
	parameters ptr = ptr
endif

IF ptr_m = POST_ROUND THEN
	HIDEPARAMETER "pwr"
	HIDEPARAMETER "pthr"
ELSE
	HIDEPARAMETER "pdr"
ENDIF

values "btr" stBoardStyle
values "btr_m" BOARD_RECTANGULAR, BOARD_ROUND

if GLOB_MODPAR_NAME = "btr" then
	btr_m = BOARD_RECTANGULAR
	if btr = stBoardStyle[2] then btr_m = BOARD_ROUND
	parameters btr_m = btr_m
else
	btr = stBoardStyle[1]
	if btr_m = BOARD_ROUND then btr = stBoardStyle[2]
	parameters btr = btr
endif

IF rightRailType_m <> RAIL_SIMPLE_BAR THEN
	IF btr_m = BOARD_ROUND THEN
		HIDEPARAMETER "bwr"
		HIDEPARAMETER "bthr"
	ELSE
		HIDEPARAMETER "bdr"
	ENDIF
ELSE
	IF btypr_m = BAR_ROUND THEN
		HIDEPARAMETER "bhr"
		HIDEPARAMETER "fthr"
	ELSE
		HIDEPARAMETER "bdr"
	ENDIF
ENDIF

values "btl" stBoardStyle
values "btl_m" BOARD_RECTANGULAR, BOARD_ROUND

if GLOB_MODPAR_NAME = "btl" then
	btl_m = BOARD_RECTANGULAR
	if btl = stBoardStyle[2] then btl_m = BOARD_ROUND
	parameters btl_m = btl_m
else
	btl = stBoardStyle[1]
	if btl_m = BOARD_ROUND then btl = stBoardStyle[2]
	parameters btl = btl
endif

IF leftRailType_m <> RAIL_SIMPLE_BAR THEN
	IF btl_m = BOARD_ROUND THEN
		HIDEPARAMETER "bwl"
		HIDEPARAMETER "bthl"
	ELSE
		HIDEPARAMETER "bdl"
	ENDIF
ELSE
	IF btypl_m = BAR_ROUND THEN
		HIDEPARAMETER "bhl"
		HIDEPARAMETER "fthl"
	ELSE
		HIDEPARAMETER "bdl"
	ENDIF
ENDIF

!!! *** LEFT RAIL STRUCTURAL DIMENSION PARAMETERS *** !!!!!!!!!!!!!!!!!!!!!!!!!!

IF bSameRails THEN
	HIDEPARAMETER "ggl","hrl","dsl","roffl",
	"sgl","fswl","fthl","ftwl","fbwl","abdistl","fdfl","bhl","btypl",
	"hrtl","hrdl","hrwl","hrhl","hrol",
	"ptl","npl","nbtl","pdl","pwl","pthl",
	"btl","nbl","bwl","bthl","bdl","sbhl",
	"bmatl","fmatl","pmatl"
ENDIF

values "hrtl" stHandrailStyle
values "hrtl_m" HANDRAIL_RECTANGULAR, HANDRAIL_ROUND

if GLOB_MODPAR_NAME = "hrtl" then
	hrtl_m = HANDRAIL_RECTANGULAR
	if hrtl = stHandrailStyle[2] then hrtl_m = HANDRAIL_ROUND
	parameters hrtl_m = hrtl_m
else
	hrtl = stHandrailStyle[1]
	if hrtl_m = HANDRAIL_ROUND then hrtl = stHandrailStyle[2]
	parameters hrtl = hrtl
endif

IF hrtl_m = HANDRAIL_ROUND THEN
	HIDEPARAMETER "hrwl"
	HIDEPARAMETER "hrhl"
ELSE
	HIDEPARAMETER "hrdl"
ENDIF

values "ptl" stPostStyle
values "ptl_m" POST_RECTANGULAR, POST_ROUND

if GLOB_MODPAR_NAME = "ptl" then
	ptl_m = POST_RECTANGULAR
	if ptl = stPostStyle[2] then ptl_m = POST_ROUND
	parameters ptl_m = ptl_m
else
	ptl = stPostStyle[1]
	if ptl_m = POST_ROUND then ptl = stPostStyle[2]
	parameters ptl = ptl
endif

IF ptl_m = POST_ROUND THEN
	HIDEPARAMETER "pwl"
	HIDEPARAMETER "pthl"
ELSE
	HIDEPARAMETER "pdl"
ENDIF

!!! End of RAILING !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

IF bt_m = BATTEN_NONE THEN HIDEPARAMETER "mat_riser", "penLineRiser", "typeFillRiser",
					"penFillRiser", "penBackFillRiser"


IF iFlightSectionType <> FLIGHTSECTION_WITH_SOFFIT THEN
	LOCK "softh"
	HIDEPARAMETER "matsoff", "penLineSoffit", "typeFillSoffit",
					"penFillSoffit", "penBackFillSoffit"

ENDIF

! ------ Story Sensitive ------------------------------

if not(gs_StorySensitive) then
	hideparameter "gs_AboveHomeStory"
else
	if not(gs_BreaklineStUp) then
		hideparameter "gs_LowerPartStUp","gs_UpperPartStUp"
	endif
	if not(gs_LowerPartStUp) & not(gs_UpperPartStUp) & gs_BreaklineStUp then
		hideparameter "gs_TreadStUp"
	endif
endif

! ------ for 2D above Home Story ------------------------------[
if	(GLOB_MODPAR_NAME = "gs_SymbolType" | GLOB_MODPAR_NAME = "gs_SymbolType_m" |\
	GLOB_MODPAR_NAME = "gs_detlevel_2D" | GLOB_MODPAR_NAME = "gs_detlevel_2D_m") &\
	gs_detlevel_2D_m = DET2D_CUSTOM then
	if gs_SymbolType_m  = 1 | gs_SymbolType_m  = 2 then
		parameters	gs_BreaklineStUp	= 0,
					gs_TreadStUp		= 0
	endif
	if gs_SymbolType_m  = 3 | gs_SymbolType_m  = 4 | gs_SymbolType_m  = 5 then
		parameters	gs_BreaklineStUp	= 1,
					gs_LowerPartStUp	= 0,
					gs_UpperPartStUp	= 1,
					gs_TreadStUp		= 0
	endif
	if gs_SymbolType_m  = 6 | gs_SymbolType_m  = 7 | \
		gs_SymbolType_m  = 13 | gs_SymbolType_m  = 14 then
		parameters	gs_BreaklineStUp	= 0,
					gs_TreadStUp		= 1
	endif
	if gs_SymbolType_m  = 8 | gs_SymbolType_m  = 9 | gs_SymbolType_m  = 10 | \
		gs_SymbolType_m  = 11 | gs_SymbolType_m  = 12 | \
		gs_SymbolType_m  = 15 | gs_SymbolType_m  = 16 | gs_SymbolType_m  = 17 | \
		gs_SymbolType_m  = 18 | gs_SymbolType_m  = 19 | gs_SymbolType_m  = 20 then
		parameters	gs_BreaklineStUp = 1,
					gs_LowerPartStUp = 0,
					gs_UpperPartStUp = 1,
					gs_TreadStUp = 1
	endif
endif
! ------ for 2D above Home Story ------------------------------]

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!! Settings of 2D Symbol Type *** !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

	LOCK	"gs_2DTread","gs_2DTreadAbove","gs_2DRiserAbove","gs_2DContourAbove",
			"gs_2DContourBelow","brk",
			"gs_ArrowFill","gs_ArrowHeight","gs_ArrowHalfWidth",
			"gs_StartEndFill","gs_CircleRadius","gs_StartWidth","gs_StartHeight","tdfs",
			"DirNumText_X","DirNumText_Y",
			"DirUPDN_X","DirUPDN_Y","AngUPDN",
			"bSameRails","gs_FillTypeAbove"


	IF walkl=0 THEN
		 HIDEPARAMETER 	"gs_wLineType1","gs_wLineType2","gs_wLineTypeAbove",
						"gs_wLinePen","arrow_style","gs_ArrowFillPen","gs_ArrowFillPenAbove",
						"gs_StartEndStyle","gs_StartEndFillPen",
						"gs_RiseRunText","gs_CustomText1","gs_CustomText2","bShowRiseAndRunText","fontsize","typeTextRotation_RiseRun", "gs_text_pen","bUseACLinearUnit",
						"walkingDirUPDN","UPDNfontsize","UPDNfontpen", "typeTextRotation_UpDn"
	ENDIF

	IF arrow_style_m = ARROW_STYLE_1 OR arrow_style_m = ARROW_STYLE_2 OR arrow_style_m = ARROW_STYLE_3 THEN
		 HIDEPARAMETER 	"gs_ArrowFillPen","gs_ArrowFillPenAbove"
	ENDIF

	IF gs_StartEndStyle_m = STARTSYMB_STYLE3 OR gs_StartEndStyle_m = STARTSYMB_NONE THEN
		 HIDEPARAMETER 	"gs_StartEndFillPen"
	ENDIF

	IF bShowNumbering=0  THEN
		 HIDEPARAMETER 	"nStartNumbering","gs_NumTextSize","gs_NumTextPen","gs_NumBelow","gs_NumAbove"
	ENDIF

	IF bShowRailAxis=0  THEN
		 HIDEPARAMETER 	"railAxisLineType","gs_RailAxisPen"
	ENDIF

	!!! SETTINGS BY SYMBOL TYPES ON HOME STORY !!!!!!!!!!!!!!!!!!!
	!!! ******************************************************* !!


	if gs_detlevel_2D_m = DET2D_CUSTOM then
		IF gs_SymbolType_m = 1 THEN
			HIDEPARAMETER	"gs_wLineType1","gs_wLineTypeAbove",
							"gs_ArrowFillPenAbove","gs_NumBelow","gs_NumAbove",
							"gs_FillAbove","gs_cont_pen","solid_line",
							"bShowRailAxis","railAxisLineType","gs_RailAxisPen","gs_BreakHeight"

			IF bShowRiseAndRunText=0 AND walkingDirUPDN_m = WALKDIRSTR_NONE OR walkl=0 THEN HIDEPARAMETER "fontType"
			if not(gs_StorySensitive) | (gs_StorySensitive & not(gs_BreaklineStUp)) then
				hideparameter "gs_BreakHeight"
			endif
		ENDIF

		IF gs_SymbolType_m = 2 THEN
			HIDEPARAMETER	"gs_wLineType2","gs_wLineTypeAbove",
							"gs_ArrowFillPenAbove","gs_NumBelow","gs_NumAbove",
							"gs_FillAbove","gs_DashLinePen","dash_line",
							"bShowRailAxis","railAxisLineType","gs_RailAxisPen","gs_BreakHeight"

			IF bShowRiseAndRunText=0 AND walkingDirUPDN_m = WALKDIRSTR_NONE OR walkl=0 THEN HIDEPARAMETER "fontType"
			if not(gs_StorySensitive) | (gs_StorySensitive & not(gs_BreaklineStUp)) then
				hideparameter "gs_BreakHeight"
			endif
		ENDIF


		IF gs_SymbolType_m = 3 THEN
			HIDEPARAMETER	"gs_wLineType2","gs_wLineTypeAbove",
							"gs_ArrowFillPenAbove","gs_NumBelow","gs_NumAbove",
							"gs_FillAbove","gs_DashLinePen","dash_line",
							"bShowRailAxis","railAxisLineType","gs_RailAxisPen"

			IF bShowRiseAndRunText=0 AND walkingDirUPDN_m = WALKDIRSTR_NONE OR walkl=0 THEN HIDEPARAMETER "fontType"
		ENDIF


		IF gs_SymbolType_m = 4 THEN
			HIDEPARAMETER	"gs_wLineType2","bShowRailAxis","railAxisLineType","gs_RailAxisPen"

			IF bShowRiseAndRunText=0 AND walkingDirUPDN_m = WALKDIRSTR_NONE OR walkl=0 THEN HIDEPARAMETER "fontType"
		ENDIF


		IF gs_SymbolType_m = 5 THEN
			HIDEPARAMETER	"gs_wLineType2","gs_wLineTypeAbove",
							"gs_DashLinePen","dash_line",
							"bShowRailAxis","railAxisLineType","gs_RailAxisPen"

			IF bShowRiseAndRunText=0 AND walkingDirUPDN_m = WALKDIRSTR_NONE OR walkl=0 THEN HIDEPARAMETER "fontType"
		ENDIF


		IF gs_SymbolType_m = 6 THEN
			HIDEPARAMETER	"gs_wLineType1","gs_wLineTypeAbove",
							"gs_ArrowFillPenAbove","gs_NumBelow","gs_NumAbove",
							"gs_FillAbove","gs_cont_pen","solid_line",
							"bShowRailAxis","railAxisLineType","gs_RailAxisPen","gs_BreakHeight"

			IF bShowRiseAndRunText=0 AND walkingDirUPDN_m = WALKDIRSTR_NONE and bShowNumbering=0 OR walkl=0 and bShowNumbering=0 THEN HIDEPARAMETER "fontType"
			if not(gs_StorySensitive) | (gs_StorySensitive & not(gs_BreaklineStUp)) then
				hideparameter "gs_BreakHeight"
			endif
		ENDIF


		IF gs_SymbolType_m = 7 THEN
			HIDEPARAMETER	"gs_wLineType2","gs_wLineTypeAbove",
							"gs_ArrowFillPenAbove","gs_NumBelow","gs_NumAbove",
							"gs_FillAbove","gs_DashLinePen","dash_line",
							"bShowRailAxis","railAxisLineType","gs_RailAxisPen","gs_BreakHeight"

			IF bShowRiseAndRunText=0 AND walkingDirUPDN_m = WALKDIRSTR_NONE and bShowNumbering=0 OR walkl=0 and bShowNumbering=0 THEN HIDEPARAMETER "fontType"
			if not(gs_StorySensitive) | (gs_StorySensitive & not(gs_BreaklineStUp)) then
				hideparameter "gs_BreakHeight"
			endif
		ENDIF


		IF gs_SymbolType_m = 8 THEN
			HIDEPARAMETER	"gs_wLineType2","gs_wLineTypeAbove",
							"gs_ArrowFillPenAbove","gs_NumBelow","gs_NumAbove",
							"gs_FillAbove","gs_DashLinePen","dash_line",
							"bShowRailAxis","railAxisLineType","gs_RailAxisPen"

			IF bShowRiseAndRunText=0 AND walkingDirUPDN_m = WALKDIRSTR_NONE OR walkl=0 THEN HIDEPARAMETER "fontType"
		ENDIF


		IF gs_SymbolType_m = 9 THEN
			HIDEPARAMETER	"gs_wLineType2",
							"bShowRailAxis","railAxisLineType","gs_RailAxisPen"

			IF bShowRiseAndRunText=0 AND walkingDirUPDN_m = WALKDIRSTR_NONE OR walkl=0 THEN HIDEPARAMETER "fontType"
		ENDIF


		IF gs_SymbolType_m = 10 THEN
			HIDEPARAMETER	"gs_wLineType2","gs_wLineTypeAbove","gs_DashLinePen","dash_line",
							"bShowRailAxis","railAxisLineType","gs_RailAxisPen"

			IF bShowRiseAndRunText=0 AND walkingDirUPDN_m = WALKDIRSTR_NONE OR walkl=0 THEN HIDEPARAMETER "fontType"
		ENDIF

		IF gs_SymbolType_m = 11 THEN
			HIDEPARAMETER	"gs_wLineType2","bShowRailAxis","railAxisLineType","gs_RailAxisPen"

			IF bShowRiseAndRunText=0 AND walkingDirUPDN_m = WALKDIRSTR_NONE and bShowNumbering=0 OR walkl=0 and bShowNumbering=0 THEN HIDEPARAMETER "fontType"
		ENDIF


		IF gs_SymbolType_m = 12 THEN
			HIDEPARAMETER	"gs_wLineType2","gs_wLineTypeAbove","gs_DashLinePen","dash_line",
							"bShowRailAxis","railAxisLineType","gs_RailAxisPen"

			IF bShowRiseAndRunText=0 AND walkingDirUPDN_m = WALKDIRSTR_NONE and bShowNumbering=0 OR walkl=0 and bShowNumbering=0 THEN HIDEPARAMETER "fontType"
		ENDIF


		IF gs_SymbolType_m = 13 THEN
			HIDEPARAMETER	"gs_wLineType1","gs_wLineTypeAbove",
							"gs_ArrowFillPenAbove","gs_NumBelow","gs_NumAbove",
							"gs_FillAbove","gs_cont_pen","solid_line","gs_BreakHeight"

			IF bShowRiseAndRunText=0 AND walkingDirUPDN_m = WALKDIRSTR_NONE and bShowNumbering=0 OR walkl=0 and bShowNumbering=0 THEN HIDEPARAMETER "fontType"
			if not(gs_StorySensitive) | (gs_StorySensitive & not(gs_BreaklineStUp)) then
				hideparameter "gs_BreakHeight"
			endif
		ENDIF


		IF gs_SymbolType_m = 14 THEN
			HIDEPARAMETER	"gs_wLineType2","gs_wLineTypeAbove",
							"gs_ArrowFillPenAbove","gs_NumBelow","gs_NumAbove",
							"gs_FillAbove","gs_BreakHeight"

			IF bShowRiseAndRunText=0 AND walkingDirUPDN_m = WALKDIRSTR_NONE and bShowNumbering=0 OR walkl=0 and bShowNumbering=0 THEN HIDEPARAMETER "fontType"
			if not(gs_StorySensitive) | (gs_StorySensitive & not(gs_BreaklineStUp)) then
				hideparameter "gs_BreakHeight"
			endif
		ENDIF


		IF gs_SymbolType_m = 15 THEN
			HIDEPARAMETER	"gs_wLineType2","gs_wLineTypeAbove",
							"gs_ArrowFillPenAbove","gs_NumBelow","gs_NumAbove",
							"gs_FillAbove"

			IF bShowRiseAndRunText=0 AND walkingDirUPDN_m = WALKDIRSTR_NONE OR walkl=0 THEN HIDEPARAMETER "fontType"
		ENDIF


		IF gs_SymbolType_m = 16 THEN
			HIDEPARAMETER	"gs_wLineType2"

			IF bShowRiseAndRunText=0 AND walkingDirUPDN_m = WALKDIRSTR_NONE OR walkl=0 THEN HIDEPARAMETER "fontType"
		ENDIF


		IF gs_SymbolType_m = 17 THEN
			HIDEPARAMETER	"gs_wLineType2","gs_wLineTypeAbove"

			IF bShowRiseAndRunText=0 AND walkingDirUPDN_m = WALKDIRSTR_NONE OR walkl=0 THEN HIDEPARAMETER "fontType"
		ENDIF


		IF gs_SymbolType_m = 18 THEN
			HIDEPARAMETER	"gs_wLineType2"

			IF bShowRiseAndRunText=0 AND walkingDirUPDN_m = WALKDIRSTR_NONE and bShowNumbering=0 OR walkl=0 and bShowNumbering=0 THEN HIDEPARAMETER "fontType"
		ENDIF


		IF gs_SymbolType_m = 19 THEN
			HIDEPARAMETER	"gs_wLineType2"

			IF bShowRiseAndRunText=0 AND walkingDirUPDN_m = WALKDIRSTR_NONE and bShowNumbering=0 OR walkl=0 and bShowNumbering=0 THEN HIDEPARAMETER "fontType"
		ENDIF


		IF gs_SymbolType_m = 20 THEN
			HIDEPARAMETER	"gs_wLineType2","gs_wLineTypeAbove"

			IF bShowRiseAndRunText=0 AND walkingDirUPDN_m = WALKDIRSTR_NONE and bShowNumbering=0 OR walkl=0 and bShowNumbering=0 THEN HIDEPARAMETER "fontType"
		ENDIF
	endif

! ==============================================================================
! mm / point conversion
! ==============================================================================

MM_IN_A_DOT = 25.4 / 72

if GLOB_MODPAR_NAME = "gs_text_size_pt_UpDn" then
	UPDNfontsize = gs_text_size_pt_UpDn * MM_IN_A_DOT
	parameters UPDNfontsize = UPDNfontsize
else
	gs_text_size_pt_UpDn = UPDNfontsize / MM_IN_A_DOT
	parameters gs_text_size_pt_UpDn = gs_text_size_pt_UpDn
endif

if GLOB_MODPAR_NAME = "gs_text_size_pt" then
	fontsize = gs_text_size_pt * MM_IN_A_DOT
	parameters fontsize = fontsize
else
	gs_text_size_pt = fontsize / MM_IN_A_DOT
	parameters gs_text_size_pt = gs_text_size_pt
endif

if GLOB_MODPAR_NAME = "gs_text_size_pt_num" then
	gs_NumTextSize = gs_text_size_pt_num * MM_IN_A_DOT
	parameters gs_NumTextSize = gs_NumTextSize
else
	gs_text_size_pt_num = gs_NumTextSize / MM_IN_A_DOT
	parameters gs_text_size_pt_num = gs_text_size_pt_num
endif

! --- Connecting integer and section pencolor type parameters ---

dim iPenNumber[255]
for i=1 to 255
	iPenNumber[i]=i
next i

values "gs_cont_pen"		iPenNumber
values "gs_DashLinePen"		iPenNumber
values "railPen"			iPenNumber
values "gs_RailAxisPen"		iPenNumber
values "postPen"			iPenNumber
values "carriagePen"		iPenNumber
values "gs_fill_pen"		iPenNumber
values "gs_wLinePen"		iPenNumber
values "gs_NumTextPen"		iPenNumber
values "gs_text_pen"		iPenNumber
values "UPDNfontpen"		iPenNumber
values "gs_LinePenStUp"		iPenNumber
values "penLineStringer" 	iPenNumber
values "penFillStringer" 	iPenNumber
values "penLineTread" 		iPenNumber
values "penFillTread" 		iPenNumber
values "penLineRiser" 		iPenNumber
values "penFillRiser" 		iPenNumber
values "penLineSoffit" 		iPenNumber
values "penFillSoffit" 		iPenNumber

if GLOB_MODPAR_NAME = "penLineStringer_m" then
	if penLineStringer_m < -1 | penLineStringer_m > 255 then
		penLineStringer_m = 1
		parameters penLineStringer_m = penLineStringer_m
	endif
	parameters penLineStringer = penLineStringer_m
else
	parameters penLineStringer_m = penLineStringer
endif
if GLOB_MODPAR_NAME = "penFillStringer_m" then
	if penFillStringer_m < -1 | penFillStringer_m > 255 then
		penFillStringer_m = 1
		parameters penFillStringer_m = penFillStringer_m
	endif
	parameters penFillStringer = penFillStringer_m
else
	parameters penFillStringer_m = penFillStringer
endif

if GLOB_MODPAR_NAME = "penLineTread_m" then
	if penLineTread_m < 1 | penLineTread_m > 255 then
		penLineTread_m = 1
		parameters penLineTread_m = penLineTread_m
	endif
	parameters penLineTread = penLineTread_m
else
	parameters penLineTread_m = penLineTread
endif
if GLOB_MODPAR_NAME = "penFillTread_m" then
	if penFillTread_m < 1 | penFillTread_m > 255 then
		penFillTread_m = 1
		parameters penFillTread_m = penFillTread_m
	endif
	parameters penFillTread = penFillTread_m
else
	parameters penFillTread_m = penFillTread
endif

if GLOB_MODPAR_NAME = "penLineRiser_m" then
	if penLineRiser_m < 1 | penLineRiser_m > 255 then
		penLineRiser_m = 1
		parameters penLineRiser_m = penLineRiser_m
	endif
	parameters penLineRiser = penLineRiser_m
else
	parameters penLineRiser_m = penLineRiser
endif
if GLOB_MODPAR_NAME = "penFillRiser_m" then
	if penFillRiser_m < 1 | penFillRiser_m > 255 then
		penFillRiser_m = 1
		parameters penFillRiser_m = penFillRiser_m
	endif
	parameters penFillRiser = penFillRiser_m
else
	parameters penFillRiser_m = penFillRiser
endif

if GLOB_MODPAR_NAME = "penLineSoffit_m" then
	if penLineSoffit_m < 1 | penLineSoffit_m > 255 then
		penLineSoffit_m = 1
		parameters penLineSoffit_m = penLineSoffit_m
	endif
	parameters penLineSoffit = penLineSoffit_m
else
	parameters penLineSoffit_m = penLineSoffit
endif
if GLOB_MODPAR_NAME = "penFillSoffit_m" then
	if penFillSoffit_m < 1 | penFillSoffit_m > 255 then
		penFillSoffit_m = 1
		parameters penFillSoffit_m = penFillSoffit_m
	endif
	parameters penFillSoffit = penFillSoffit_m
else
	parameters penFillSoffit_m = penFillSoffit
endif


if GLOB_MODPAR_NAME = "penBackFillStringer_m" then
	if penBackFillStringer_m < -1 | penBackFillStringer_m > 255 then
		penBackFillStringer_m = 1
		parameters penBackFillStringer_m = penBackFillStringer_m
	endif
	parameters penBackFillStringer = penBackFillStringer_m
else
	parameters penBackFillStringer_m = penBackFillStringer
endif

if GLOB_MODPAR_NAME = "penBackFillTread_m" then
	if penBackFillTread_m < -1 | penBackFillTread_m > 255 then
		penBackFillTread_m = 1
		parameters penBackFillTread_m = penBackFillTread_m
	endif
	parameters penBackFillTread = penBackFillTread_m
else
	parameters penBackFillTread_m = penBackFillTread
endif

if GLOB_MODPAR_NAME = "penBackFillRiser_m" then
	if penBackFillRiser_m < -1 | penBackFillRiser_m > 255 then
		penBackFillRiser_m = 1
		parameters penBackFillRiser_m = penBackFillRiser_m
	endif
	parameters penBackFillRiser = penBackFillRiser_m
else
	parameters penBackFillRiser_m = penBackFillRiser
endif

if GLOB_MODPAR_NAME = "penBackFillSoffit_m" then
	if penBackFillSoffit_m < -1 | penBackFillSoffit_m > 255 then
		penBackFillSoffit_m = 1
		parameters penBackFillSoffit_m = penBackFillSoffit_m
	endif
	parameters penBackFillSoffit = penBackFillSoffit_m
else
	parameters penBackFillSoffit_m = penBackFillSoffit
endif


! =============================================================================
! Onorm list Settings
! =============================================================================

if LibraryLangCode = "AUT" or LibraryLangCode = "CHE" or LibraryLangCode = "GER" then
	call "Onorm_Stair" parameters all matTread = mat_tread
else
	hideparameter "gs_onorm_Title", "gs_list_soundinsul"
endif

! =============================================================================
! IFC2x3 Property Set for Stairs
! =============================================================================

SPIRAL_STAIR = 11
parameters ifc_StairType 		= SPIRAL_STAIR
parameters ifc_NumberOfRiser 	= nRiser
parameters ifc_NumberOfTreads 	= numTread
parameters ifc_RiserHeight		= th
parameters ifc_TreadLength		= PI/180 * (r - flw/3) * (fokszog)
]]>
</Script_VL>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Comment SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Comment>

<ParamSection SectVersion="26" SectionFlags="0" SubIdent="0">
	<ParamSectHeader>
		<Version>26</Version>
		<AutoHotspots>false</AutoHotspots>
		<StatBits>
			<STBit_UIDefault/>
			<STBit_FixSize/>
			<STBit_UIUseHierarchicalPages/>
		</StatBits>
		<WDLeftFrame>0</WDLeftFrame>
		<WDRightFrame>0</WDRightFrame>
		<WDTopFrame>0</WDTopFrame>
		<WDBotFrame>0</WDBotFrame>
		<LayFlags>65535</LayFlags>
		<WDMirrorThickness>0</WDMirrorThickness>
		<WDWallInset>0</WDWallInset>
		<SymbolColor>0</SymbolColor>
	</ParamSectHeader>
	<Parameters>
		<Length Name="A">
			<Description><![CDATA["Размер 1"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Unique/>
			</Flags>
			<Value>3.6</Value>
		</Length>
		<Length Name="B">
			<Description><![CDATA["Размер 2"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Unique/>
			</Flags>
			<Value>3.6</Value>
		</Length>
		<Length Name="ZZYZX">
			<Description><![CDATA["Высота"]]></Description>
			<Fix/>
			<Value>3.1</Value>
		</Length>
		<Integer Name="gs_detlevel_3D_m">
			<Description><![CDATA["3D"]]></Description>
			<Value>2</Value>
		</Integer>
		<Boolean Name="cfs">
			<Description><![CDATA["Вызов как Макрос из Лестницы"]]></Description>
			<Flags>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="ad">
			<Description><![CDATA["Ступени Вычисляются на основе Высоты Лестницы"]]></Description>
			<Flags>
				<ParFlg_Unique/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<String Name="PTYP">
			<Description><![CDATA["Способ Вычисления"]]></Description>
			<Flags>
				<ParFlg_Unique/>
			</Flags>
			<Value><![CDATA["Высота Ступени"]]></Value>
		</String>
		<Integer Name="iCalculationMode">
			<Description><![CDATA["Способ Вычисления"]]></Description>
			<Flags>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>2</Value>
		</Integer>

		<!-- generalflight: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="generalflight">
			<Description><![CDATA["Параметры Марша"]]></Description>
		</Title>
		<Length Name="r">
			<Description><![CDATA["Радиус"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1.8</Value>
		</Length>
		<Length Name="flw">
			<Description><![CDATA["Ширина Марша"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1.2</Value>
		</Length>
		<String Name="jntl">
			<Description><![CDATA["Тип Стыка Внизу"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value><![CDATA["Первый Этаж"]]></Value>
		</String>
		<Integer Name="iLowerJunctionType">
			<Description><![CDATA["Тип Стыка Внизу"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Length Name="lst">
			<Description><![CDATA["Толщина Верхней Площадки"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0.3</Value>
		</Length>
		<String Name="fst">
			<Description><![CDATA["Тип Секции Марша"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value><![CDATA["без Софита"]]></Value>
		</String>
		<Integer Name="iFlightSectionType">
			<Description><![CDATA["Тип Секции Марша"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Length Name="softh">
			<Description><![CDATA["Толщина Софита"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Length Name="sh">
			<Description><![CDATA["Высота Бруса"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0.6</Value>
		</Length>
		<Length Name="st">
			<Description><![CDATA["Толщина Бруса (0-Нет)"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Length Name="Pd">
			<Description><![CDATA["Расстояние Линии Уклона"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0.35</Value>
		</Length>

		<!-- WoodenSpir_sp1: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="WoodenSpir_sp1">
			<Description><![CDATA["Размеры Подступенков и Проступей"]]></Description>
		</Title>
		<Length Name="wldo">
			<Description><![CDATA["Радиус Линии Всхода"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1.2</Value>
		</Length>
		<Length Name="pth">
			<Description><![CDATA["Предпочтительная Высота Ступени"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0.172222222222</Value>
		</Length>
		<Integer Name="rnu">
			<Description><![CDATA["Количество Подступенков"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>18</Value>
		</Integer>
		<Length Name="th">
			<Description><![CDATA["Высота Ступени"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0.172222222222</Value>
		</Length>
		<Length Name="td">
			<Description><![CDATA["Глубина Ступени"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0.275555555556</Value>
		</Length>
		<Length Name="tdor">
			<Description><![CDATA["Глубина Ступени на Радиусе"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0.413333333333</Value>
		</Length>
		<Length Name="thd">
			<Description><![CDATA["Две Высоты Подступенка + Проступь"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0.62</Value>
		</Length>
		<String Name="bt">
			<Description><![CDATA["Стиль Планки"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value><![CDATA["Нет"]]></Value>
		</String>
		<Integer Name="bt_m">
			<Description><![CDATA["Стиль Планки"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<String Name="ft">
			<Description><![CDATA["Первая Ступень"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value><![CDATA["Выше Уровня Пола"]]></Value>
		</String>
		<Integer Name="iFirstTread">
			<Description><![CDATA["Первая Ступень"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>2</Value>
		</Integer>
		<String Name="tt">
			<Description><![CDATA["Верхняя Ступень"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value><![CDATA["на Уровне Пола"]]></Value>
		</String>
		<Integer Name="iTopTread">
			<Description><![CDATA["Верхняя Ступень"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Length Name="rt">
			<Description><![CDATA["Толщина Ступени"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0.03</Value>
		</Length>
		<Length Name="ns">
			<Description><![CDATA["Выступ"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0.02</Value>
		</Length>
		<Integer Name="rail_m">
			<Description><![CDATA["Ограждение"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>

		<!-- bRightRail: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Boolean Name="bRightRail">
			<Description><![CDATA["Ограждение Справа"]]></Description>
			<Flags>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<String Name="rightRailType">
			<Description><![CDATA["Тип Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Параллельные Прутья"]]></Value>
		</String>
		<Integer Name="rightRailType_m">
			<Description><![CDATA["Тип Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>2</Value>
		</Integer>
		<String Name="ggr">
			<Description><![CDATA["Конструктивные Размеры"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<Length Name="hrr">
			<Description><![CDATA["Высота Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.8</Value>
		</Length>
		<Length Name="dsr">
			<Description><![CDATA["Расстояние от Бруса"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.1</Value>
		</Length>
		<Length Name="roffr">
			<Description><![CDATA["Смещение Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<String Name="sgr">
			<Description><![CDATA["Размеры Элементов Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<Length Name="fswr">
			<Description><![CDATA["Ширина Рамы по Бокам"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.1</Value>
		</Length>
		<Length Name="fthr">
			<Description><![CDATA["Толщина Рамы"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.04</Value>
		</Length>
		<Length Name="ftwr">
			<Description><![CDATA["Ширина Рамы Вверху"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Length Name="fbwr">
			<Description><![CDATA["Ширина Рамы Внизу"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Length Name="abdistr">
			<Description><![CDATA["Приблизительный Шаг Балясин"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.15</Value>
		</Length>
		<Length Name="fdfr">
			<Description><![CDATA["Расстояние от Рамы до Экрана"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Length Name="bhr">
			<Description><![CDATA["Высота Бруска"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.1</Value>
		</Length>
		<String Name="btypr">
			<Description><![CDATA["Стиль Бруска"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Прямоугольные"]]></Value>
		</String>
		<String Name="Hrtr">
			<Description><![CDATA["Стиль Поручня"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA["Прямоугольные"]]></Value>
		</String>
		<Length Name="hrdr">
			<Description><![CDATA["Диаметр Поручня"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.06</Value>
		</Length>
		<Length Name="hrwr">
			<Description><![CDATA["Ширина Поручня"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Length Name="hrhr">
			<Description><![CDATA["Толщина Поручня"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.025</Value>
		</Length>
		<Length Name="hror">
			<Description><![CDATA["Выступ Поручня"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.15</Value>
		</Length>
		<String Name="ptr">
			<Description><![CDATA["Стиль Стоек"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA["Прямоугольные"]]></Value>
		</String>
		<Integer Name="npr">
			<Description><![CDATA["Кол-во Стоек"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>3</Value>
		</Integer>
		<Integer Name="nbtr">
			<Description><![CDATA["Количество Балясин"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>18</Value>
		</Integer>
		<Length Name="pdr">
			<Description><![CDATA["Диаметр Стойки"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.035</Value>
		</Length>
		<Length Name="pwr">
			<Description><![CDATA["Ширина Стоек"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.035</Value>
		</Length>
		<Length Name="pthr">
			<Description><![CDATA["Толщина Стоек"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.035</Value>
		</Length>
		<String Name="btr">
			<Description><![CDATA["Стиль Доски"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA["Прямоугольные"]]></Value>
		</String>
		<Integer Name="nbr">
			<Description><![CDATA["Количество Брусков"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>4</Value>
		</Integer>
		<Length Name="bwr">
			<Description><![CDATA["Ширина Балясины"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.025</Value>
		</Length>
		<Length Name="bthr">
			<Description><![CDATA["Толщина Балясины/Панели"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.025</Value>
		</Length>
		<Length Name="bdr">
			<Description><![CDATA["Диаметр Бруска"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Length Name="sbhr">
			<Description><![CDATA["Высота суб-доски"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.15</Value>
		</Length>

		<!-- bLeftRail: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Boolean Name="bLeftRail">
			<Description><![CDATA["Ограждение Слева"]]></Description>
			<Flags>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<String Name="leftRailType">
			<Description><![CDATA["Тип Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Как и Правое"]]></Value>
		</String>
		<Integer Name="leftRailType_m">
			<Description><![CDATA["Тип Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>11</Value>
		</Integer>
		<Boolean Name="bSameRails">
			<Description><![CDATA["Как и Правое Ограждение"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<String Name="ggl">
			<Description><![CDATA["Конструктивные Размеры"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<Length Name="hrl">
			<Description><![CDATA["Высота Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.8</Value>
		</Length>
		<Length Name="dsl">
			<Description><![CDATA["Расстояние от Перекрытия/Лестницы"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.1</Value>
		</Length>
		<Length Name="roffl">
			<Description><![CDATA["Смещение Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<String Name="sgl">
			<Description><![CDATA["Размеры Элементов Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<Length Name="fswl">
			<Description><![CDATA["Ширина Рамы по Бокам"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.1</Value>
		</Length>
		<Length Name="fthl">
			<Description><![CDATA["Толщина Рамы/Бруска"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.04</Value>
		</Length>
		<Length Name="ftwl">
			<Description><![CDATA["Ширина Рамы Вверху"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Length Name="fbwl">
			<Description><![CDATA["Ширина Рамы Внизу"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Length Name="abdistl">
			<Description><![CDATA["Приблизительный Шаг Балясин"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.15</Value>
		</Length>
		<Length Name="fdfl">
			<Description><![CDATA["Расстояние от Рамы до Экрана"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Length Name="bhl">
			<Description><![CDATA["Высота Бруска"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.1</Value>
		</Length>
		<String Name="btypl">
			<Description><![CDATA["Стиль Бруска"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Прямоугольные"]]></Value>
		</String>
		<String Name="hrtl">
			<Description><![CDATA["Стиль Поручня"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA["Прямоугольные"]]></Value>
		</String>
		<Length Name="hrdl">
			<Description><![CDATA["Диаметр Поручня"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.06</Value>
		</Length>
		<Length Name="hrwl">
			<Description><![CDATA["Ширина Поручня"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Length Name="hrhl">
			<Description><![CDATA["Толщина Поручня"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.025</Value>
		</Length>
		<Length Name="hrol">
			<Description><![CDATA["Выступ Поручня"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.15</Value>
		</Length>
		<String Name="ptl">
			<Description><![CDATA["Стиль Стоек"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA["Прямоугольные"]]></Value>
		</String>
		<Integer Name="npl">
			<Description><![CDATA["Кол-во Стоек"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>3</Value>
		</Integer>
		<Integer Name="nbtl">
			<Description><![CDATA["Количество Балясин"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>18</Value>
		</Integer>
		<Length Name="pdl">
			<Description><![CDATA["Диаметр Стойки"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.035</Value>
		</Length>
		<Length Name="pwl">
			<Description><![CDATA["Ширина Стоек"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.035</Value>
		</Length>
		<Length Name="pthl">
			<Description><![CDATA["Толщина Стоек"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.035</Value>
		</Length>
		<String Name="btl">
			<Description><![CDATA["Стиль Доски"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA["Прямоугольные"]]></Value>
		</String>
		<Integer Name="nbl">
			<Description><![CDATA["Количество Брусков"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>4</Value>
		</Integer>
		<Length Name="bwl">
			<Description><![CDATA["Ширина Балясины"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.025</Value>
		</Length>
		<Length Name="bthl">
			<Description><![CDATA["Толщина Балясины/Панели"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.025</Value>
		</Length>
		<Length Name="bdl">
			<Description><![CDATA["Диаметр Бруска"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Length Name="sbhl">
			<Description><![CDATA["Высота суб-доски"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.15</Value>
		</Length>

		<!-- gs_3D_representation: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_3D_representation">
			<Description><![CDATA["3D-отображение"]]></Description>
		</Title>
		<Integer Name="res">
			<Description><![CDATA["Аппроксимация/Ступень"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Integer Name="rescs">
			<Description><![CDATA["Аппроксимация Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>8</Value>
		</Integer>
		<Boolean Name="gs_shadow">
			<Description><![CDATA["Отбрасывание Теней"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="AC_show2DHotspotsIn3D">
			<Description><![CDATA["Показ Узловых 2D Точек в 3D"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Length Name="ac_bottomlevel">
			<Description><![CDATA["Отметка Низа"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Length>
		<Length Name="ac_toplevel">
			<Description><![CDATA["Отметка Верха"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>

		<!-- gs_2D_representation: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_2D_representation">
			<Description><![CDATA["2D-отображение"]]></Description>
			<Fix/>
		</Title>
		<Integer Name="gs_detlevel_2D_m">
			<Description><![CDATA["2D-детализация"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Integer Name="iScaleChangeSM">
			<Description><![CDATA["Простой/Средний Масштаб изменяется в"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>999</Value>
		</Integer>
		<Integer Name="gs_ScaleChangeSM">
			<Description><![CDATA["Простой/Средний Масштаб изменяется в"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>100</Value>
		</Integer>
		<Integer Name="iScaleChangeMD">
			<Description><![CDATA["Средний/Детальный Масштаб изменяется в"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>999</Value>
		</Integer>
		<Integer Name="gs_ScaleChangeMD">
			<Description><![CDATA["Средний/Детальный Масштаб изменяется в"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>50</Value>
		</Integer>

		<!-- Symbol2D: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="Symbol2D">
			<Description><![CDATA["2D-символ"]]></Description>
		</Title>
		<Integer Name="gs_SymbolType_m">
			<Description><![CDATA["Тип 2D-символа"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>11</Value>
		</Integer>
		<Integer Name="iSymbolGroup">
			<Description><![CDATA["Тип Группы Символа"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>6</Value>
		</Integer>
		<Boolean Name="gs_2DTread">
			<Description><![CDATA["Показать Проступи"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="gs_2DTreadAbove">
			<Description><![CDATA["Показать Проступи Выше"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="gs_2DRiserAbove">
			<Description><![CDATA["Показать Подступенки Выше"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="gs_2DContourAbove">
			<Description><![CDATA["Показать Линию Контура Выше"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="gs_2DContourBelow">
			<Description><![CDATA["Показать Линию Контура Ниже"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<PenColor Name="gs_cont_pen">
			<Description><![CDATA["Перо Линий Видимых Конструкций"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>91</Value>
		</PenColor>
		<PenColor Name="gs_DashLinePen">
			<Description><![CDATA["Перо Линий Невидимых Конструкций"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>91</Value>
		</PenColor>
		<LineType Name="solid_line">
			<Description><![CDATA["Тип Линий Видимых Конструкций"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</LineType>
		<LineType Name="dash_line">
			<Description><![CDATA["Тип Линий Невидимых Конструкций"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>4</Value>
		</LineType>
		<Boolean Name="bShowRailOnFloorPlan">
			<Description><![CDATA["Показать Ограждение на Плане"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<LineType Name="railLineType">
			<Description><![CDATA["Тип Линии Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</LineType>
		<PenColor Name="railPen">
			<Description><![CDATA["Перо Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>91</Value>
		</PenColor>
		<Boolean Name="bSymbolic2D">
			<Description><![CDATA["Символический 2D"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<String Name="postSymbolType">
			<Description><![CDATA["Тип Символа Стойки"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Тип 1"]]></Value>
		</String>
		<Integer Name="iPostSymbolType">
			<Description><![CDATA["Тип Символа Стойки"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<LineType Name="postLineType">
			<Description><![CDATA["Тип Линии Стойки"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</LineType>
		<PenColor Name="postPen">
			<Description><![CDATA["Перо Линии Стойки"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>23</Value>
		</PenColor>
		<Boolean Name="bShowRailAboveBreakLine">
			<Description><![CDATA["Показать Ограждение выше Линии Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="bShowCarriage">
			<Description><![CDATA["Показать Тетиву на Плане Этажа"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<String Name="stShowCarriageUpTo">
			<Description><![CDATA["Показать Тетиву"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["До 1:50"]]></Value>
		</String>
		<Integer Name="iShowCarriageUpTo">
			<Description><![CDATA["Показать Тетиву"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>50</Value>
		</Integer>
		<LineType Name="carriageLineType">
			<Description><![CDATA["Линия Невидимой Тетивы"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</LineType>
		<PenColor Name="carriagePen">
			<Description><![CDATA["Перо Невидимой Тетивы"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>23</Value>
		</PenColor>
		<FillPattern Name="gs_fill_type">
			<Description><![CDATA["Штриховка Фона"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>65</Value>
		</FillPattern>
		<FillPattern Name="gs_FillTypeAbove">
			<Description><![CDATA["Штриховка Фона"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>65</Value>
		</FillPattern>
		<PenColor Name="gs_fill_pen">
			<Description><![CDATA["Перо Штриховки"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>19</Value>
		</PenColor>
		<PenColor Name="gs_back_pen">
			<Description><![CDATA["Перо Фона Штриховки"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>19</Value>
		</PenColor>
		<Boolean Name="gs_FillAbove">
			<Description><![CDATA["Штриховка Выше Линии Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="brk">
			<Description><![CDATA["Линия Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Length Name="gs_BreakHeight">
			<Description><![CDATA["Расположение Линии Разрыва (Высота)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Length>
		<Boolean Name="walkl">
			<Description><![CDATA["Показать Линию Всхода"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<LineType Name="gs_wLineType1">
			<Description><![CDATA["Тип Линии"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</LineType>
		<LineType Name="gs_wLineType2">
			<Description><![CDATA["Тип Линии"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>6</Value>
		</LineType>
		<LineType Name="gs_wLineTypeAbove">
			<Description><![CDATA["Тип Линии выше Линии Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>6</Value>
		</LineType>
		<PenColor Name="gs_wLinePen">
			<Description><![CDATA["Перо Линии"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>71</Value>
		</PenColor>
		<String Name="arrow_style">
			<Description><![CDATA["Стиль Стрелки"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA["Стиль 3"]]></Value>
		</String>
		<Integer Name="arrow_style_m">
			<Description><![CDATA["Стиль Стрелки"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>3</Value>
		</Integer>
		<FillPattern Name="gs_ArrowFill">
			<Description><![CDATA["Тип Штриховки Стрелки"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>64</Value>
		</FillPattern>
		<PenColor Name="gs_ArrowFillPen">
			<Description><![CDATA["Перо Штриховки (0 - нет)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>19</Value>
		</PenColor>
		<PenColor Name="gs_ArrowFillPenAbove">
			<Description><![CDATA["Перо Штриховки Выше (0 - Нет)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</PenColor>
		<Length Name="gs_ArrowHeight">
			<Description><![CDATA["Высота Стрелки"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.2</Value>
		</Length>
		<Length Name="gs_ArrowHalfWidth">
			<Description><![CDATA["Половина Ширины Стрелки"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.2</Value>
		</Length>
		<String Name="gs_StartEndStyle">
			<Description><![CDATA["Символ в Начале"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA["Стиль 1"]]></Value>
		</String>
		<Integer Name="gs_StartEndStyle_m">
			<Description><![CDATA["Символ в Начале"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<FillPattern Name="gs_StartEndFill">
			<Description><![CDATA["Тип Штриховки Символа"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>64</Value>
		</FillPattern>
		<PenColor Name="gs_StartEndFillPen">
			<Description><![CDATA["Перо Штриховки (0 - нет)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</PenColor>
		<Length Name="gs_CircleRadius">
			<Description><![CDATA["Радиус Окружности"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.1</Value>
		</Length>
		<Length Name="gs_StartWidth">
			<Description><![CDATA["Половина Ширины Символа"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Length Name="gs_StartHeight">
			<Description><![CDATA["Половина Высоты Символа"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.2</Value>
		</Length>
		<Boolean Name="bShowNumbering">
			<Description><![CDATA["Показать Нумерацию"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Integer Name="nStartNumbering">
			<Description><![CDATA["Начать Нумерацию с"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Boolean Name="gs_NumBelow">
			<Description><![CDATA["Нумерация ниже Линии Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="gs_NumAbove">
			<Description><![CDATA["Нумерация выше Линии Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<RealNum Name="gs_NumTextSize">
			<Description><![CDATA["Размер Шрифта (мм)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</RealNum>
		<RealNum Name="gs_text_size_pt_num">
			<Description><![CDATA["Размер Шрифта (пт)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>2.83</Value>
		</RealNum>
		<PenColor Name="gs_NumTextPen">
			<Description><![CDATA["Перо Текста"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>86</Value>
		</PenColor>
		<Length Name="DirNumText_X">
			<Description><![CDATA["Расположение Нумерации по X"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.1</Value>
		</Length>
		<Length Name="DirNumText_Y">
			<Description><![CDATA["Расположение Нумерации по Y"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<String Name="typeTextRotation_Num">
			<Description><![CDATA["Ориентация Текста в Символе"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Выровнять по Символу"]]></Value>
		</String>
		<Integer Name="typeTextRotation_Num_m">
			<Description><![CDATA["Ориентация Текста в Символе"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Integer>
		<Boolean Name="bShowRiseAndRunText">
			<Description><![CDATA["Текст Подступенков и Проступей"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<String Name="gs_RiseRunText">
			<Description><![CDATA["Текст"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Текст Подступенков/Проступей"]]></Value>
		</String>
		<Integer Name="iRiseRunText">
			<Description><![CDATA["Текст"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<String Name="gs_CustomText1">
			<Description><![CDATA["Специальный Текст_1"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Специальный Текст_1"]]></Value>
		</String>
		<String Name="gs_CustomText2">
			<Description><![CDATA["Специальный Текст_2"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Специальный Текст_2"]]></Value>
		</String>
		<String Name="gs_customText_rise">
			<Description><![CDATA["Текст Подступенка"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["П"]]></Value>
		</String>
		<RealNum Name="tdfs">
			<Description><![CDATA["Размер Шрифта (мм)"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</RealNum>
		<RealNum Name="fontsize">
			<Description><![CDATA["Размер Шрифта (мм)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</RealNum>
		<RealNum Name="gs_text_size_pt">
			<Description><![CDATA["Размер Шрифта (пт)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>2.83</Value>
		</RealNum>
		<PenColor Name="gs_text_pen">
			<Description><![CDATA["Перо Текста"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>86</Value>
		</PenColor>
		<Boolean Name="bUseACLinearUnit">
			<Description><![CDATA["Единицы Измерения Рабочей Среды Проекта"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Length Name="DirRiseRunText_X">
			<Description><![CDATA["Текст Подступенков и Проступей по X"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="DirRiseRunText_Y">
			<Description><![CDATA["Текст Подступенков и Проступей по Y"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Angle Name="DirRiseRunAngle">
			<Description><![CDATA["Угол Поворота Текста Подступенков и Проступей"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Angle>
		<String Name="typeTextRotation_RiseRun">
			<Description><![CDATA["Ориентация Текста в Символе"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Читаемый"]]></Value>
		</String>
		<Integer Name="typeTextRotation_RiseRun_m">
			<Description><![CDATA["Ориентация Текста в Символе"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>2</Value>
		</Integer>
		<String Name="walkingDirUPDN">
			<Description><![CDATA["Размер Текста ВВЕРХ/ВНИЗ"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA["Нет"]]></Value>
		</String>
		<Integer Name="walkingDirUPDN_m">
			<Description><![CDATA["Размер Текста ВВЕРХ/ВНИЗ"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<RealNum Name="UPDNfontsize">
			<Description><![CDATA["Размер Текста ВВЕРХ/ВНИЗ (мм)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>2</Value>
		</RealNum>
		<RealNum Name="gs_text_size_pt_UpDn">
			<Description><![CDATA["Размер Текста ВВЕРХ/ВНИЗ (точки)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>5.66</Value>
		</RealNum>
		<PenColor Name="UPDNfontpen">
			<Description><![CDATA["Текст ВВЕРХ/ВНИЗ"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>86</Value>
		</PenColor>
		<Length Name="DirUPDN_X">
			<Description><![CDATA["Горизонтальное Смещение Текста"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="DirUPDN_Y">
			<Description><![CDATA["Вертикальное Смещение Текста"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>-0.2</Value>
		</Length>
		<Angle Name="AngUPDN">
			<Description><![CDATA["Угол Текста ВВЕРХ/ВНИЗ"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Angle>
		<String Name="typeTextRotation_UpDn">
			<Description><![CDATA["Ориентация Текста в Символе"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Выровнять по Символу"]]></Value>
		</String>
		<Integer Name="typeTextRotation_UpDn_m">
			<Description><![CDATA["Ориентация Текста в Символе"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Integer>
		<String Name="fontType">
			<Description><![CDATA["Тип Шрифта"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA["Arial"]]></Value>
		</String>
		<Boolean Name="bShowRailAxis">
			<Description><![CDATA["Показать Ось Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<LineType Name="railAxisLineType">
			<Description><![CDATA["Тип Линии Оси Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>6</Value>
		</LineType>
		<PenColor Name="gs_RailAxisPen">
			<Description><![CDATA["Перо Линии Оси Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>71</Value>
		</PenColor>
		<Boolean Name="gs_StorySensitive">
			<Description><![CDATA["Зависит от Этажа"]]></Description>
			<Flags>
				<ParFlg_BoldName/>
			</Flags>
			<Value>0</Value>
		</Boolean>

		<!-- gs_AboveHomeStory: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_AboveHomeStory">
			<Description><![CDATA["2D выше Собственного Этажа"]]></Description>
		</Title>
		<Boolean Name="gs_BreaklineStUp">
			<Description><![CDATA["Линия Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="gs_LowerPartStUp">
			<Description><![CDATA["Нижняя Часть"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="gs_UpperPartStUp">
			<Description><![CDATA["Верхняя Часть"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="gs_TreadStUp">
			<Description><![CDATA["Показать Проступи"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<LineType Name="gs_LineTypeStUp">
			<Description><![CDATA["Тип Линии"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</LineType>
		<PenColor Name="gs_LinePenStUp">
			<Description><![CDATA["Перо Линии"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>71</Value>
		</PenColor>
		<LineType Name="gs_wLineTypeStUp">
			<Description><![CDATA["Тип Линии Всхода"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</LineType>
		<Boolean Name="gs_numaStUp">
			<Description><![CDATA["Показать Нумерацию"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="gs_txStUp">
			<Description><![CDATA["Текст Подступенков и Проступей"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>

		<!-- gs_section_attributes: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_section_attributes">
			<Description><![CDATA["Реквизиты Сечения"]]></Description>
		</Title>
		<PenColor Name="penLineStringer">
			<Description><![CDATA["Перо Контура Сечения Тетивы"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>29</Value>
		</PenColor>
		<Integer Name="penLineStringer_m">
			<Description><![CDATA["Перо Контура Сечения Тетивы"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>29</Value>
		</Integer>
		<FillPattern Name="typeFillStringer">
			<Description><![CDATA["Штриховка Сечения Тетивы"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>24</Value>
		</FillPattern>
		<PenColor Name="penFillStringer">
			<Description><![CDATA["Перо Штриховки Сечения Тетивы"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>109</Value>
		</PenColor>
		<Integer Name="penFillStringer_m">
			<Description><![CDATA["Перо Штриховки Сечения Тетивы"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>109</Value>
		</Integer>
		<PenColor Name="penBackFillStringer">
			<Description><![CDATA["Перо Фона Штриховки Сечения Тетивы"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</PenColor>
		<Integer Name="penBackFillStringer_m">
			<Description><![CDATA["Перо Фона Штриховки Сечения Тетивы"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Integer>
		<PenColor Name="penLineTread">
			<Description><![CDATA["Перо Контура Сечения Проступи"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1</Value>
		</PenColor>
		<Integer Name="penLineTread_m">
			<Description><![CDATA["Перо Контура Сечения Проступи"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<FillPattern Name="typeFillTread">
			<Description><![CDATA["Штриховка Сечения Проступи"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>23</Value>
		</FillPattern>
		<PenColor Name="penFillTread">
			<Description><![CDATA["Перо Штриховки Сечения Проступи"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>109</Value>
		</PenColor>
		<Integer Name="penFillTread_m">
			<Description><![CDATA["Перо Штриховки Сечения Проступи"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>109</Value>
		</Integer>
		<PenColor Name="penBackFillTread">
			<Description><![CDATA["Перо Фона Штриховки Сечения Проступи"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>-1</Value>
		</PenColor>
		<Integer Name="penBackFillTread_m">
			<Description><![CDATA["Перо Фона Штриховки Сечения Проступи"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>-1</Value>
		</Integer>
		<PenColor Name="penLineRiser">
			<Description><![CDATA["Перо Контура Сечения Подступенка"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1</Value>
		</PenColor>
		<Integer Name="penLineRiser_m">
			<Description><![CDATA["Перо Контура Сечения Подступенка"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<FillPattern Name="typeFillRiser">
			<Description><![CDATA["Штриховка Сечения Подступенка"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>23</Value>
		</FillPattern>
		<PenColor Name="penFillRiser">
			<Description><![CDATA["Перо Штриховки Сечения Подступенка"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>109</Value>
		</PenColor>
		<Integer Name="penFillRiser_m">
			<Description><![CDATA["Перо Штриховки Сечения Подступенка"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>109</Value>
		</Integer>
		<PenColor Name="penBackFillRiser">
			<Description><![CDATA["Перо Фона Штриховки Сечения Подступенка"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>-1</Value>
		</PenColor>
		<Integer Name="penBackFillRiser_m">
			<Description><![CDATA["Перо Фона Штриховки Сечения Подступенка"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>-1</Value>
		</Integer>
		<PenColor Name="penLineSoffit">
			<Description><![CDATA["Перо Контура Сечения Софита"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1</Value>
		</PenColor>
		<Integer Name="penLineSoffit_m">
			<Description><![CDATA["Перо Контура Сечения Софита"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<FillPattern Name="typeFillSoffit">
			<Description><![CDATA["Штриховка Сечения Софита"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>23</Value>
		</FillPattern>
		<PenColor Name="penFillSoffit">
			<Description><![CDATA["Перо Штриховки Сечения Софита"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>109</Value>
		</PenColor>
		<Integer Name="penFillSoffit_m">
			<Description><![CDATA["Перо Штриховки Сечения Софита"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>109</Value>
		</Integer>
		<PenColor Name="penBackFillSoffit">
			<Description><![CDATA["Перо Фона Штриховки Сечения Софита"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>-1</Value>
		</PenColor>
		<Integer Name="penBackFillSoffit_m">
			<Description><![CDATA["Перо Фона Штриховки Сечения Софита"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>-1</Value>
		</Integer>

		<!-- gs_materials: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_materials">
			<Description><![CDATA["Покрытия"]]></Description>
		</Title>
		<Material Name="mat_tread">
			<Description><![CDATA["Проступь"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>15</Value>
		</Material>
		<Material Name="mat_riser">
			<Description><![CDATA["Подступенок"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>15</Value>
		</Material>
		<Material Name="matstr">
			<Description><![CDATA["Тетива"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>15</Value>
		</Material>
		<Material Name="matsoff">
			<Description><![CDATA["Софит"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>15</Value>
		</Material>
		<Material Name="pmatr">
			<Description><![CDATA["Стойка Справа"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>15</Value>
		</Material>
		<Material Name="fmatr">
			<Description><![CDATA["Рама Справа"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>15</Value>
		</Material>
		<Material Name="bmatr">
			<Description><![CDATA["Балясина/Панель Справа"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>15</Value>
		</Material>
		<Material Name="pmatl">
			<Description><![CDATA["Стойка Слева"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>15</Value>
		</Material>
		<Material Name="fmatl">
			<Description><![CDATA["Рама Слева"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>15</Value>
		</Material>
		<Material Name="bmatl">
			<Description><![CDATA["Балясина/Панель Слева"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>15</Value>
		</Material>
		<Integer Name="hrtr_m">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Integer Name="hrtl_m">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Integer Name="btypr_m">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Integer Name="btypl_m">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Integer Name="ptr_m">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Integer Name="ptl_m">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Integer Name="btr_m">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Integer Name="btl_m">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Length Name="lra">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="fth">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="bh">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="bd">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="hrd">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="hrw">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="hrh">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="pw">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="bth">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="bw">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="sbh">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Angle Name="gs_readable_angle">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>90</Value>
		</Angle>

		<!-- gs_list: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_list">
			<Description><![CDATA["Параметры Спецификаций"]]></Description>
			<Fix/>
		</Title>
		<RealNum Name="gs_list_cost">
			<Description><![CDATA["Цена"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<String Name="gs_list_manufacturer">
			<Description><![CDATA["Производитель"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_note">
			<Description><![CDATA["Примечания"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_location">
			<Description><![CDATA["Расположение"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_accessories">
			<Description><![CDATA["Аксессуары"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_soundinsul">
			<Description><![CDATA["Звукоизоляция"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="FM_Type">
			<Description><![CDATA["Тип Группы"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Лестницы"]]></Value>
		</String>
		<Integer Name="iFMType">
			<Description><![CDATA["Тип Группы"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>6</Value>
		</Integer>
		<String Name="FM_InventoryNumber">
			<Description><![CDATA["Инвентарный Номер"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="FM_SerialNumber">
			<Description><![CDATA["Серийный Номер"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="FM_ProductionYear">
			<Description><![CDATA["Год Производства"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<RealNum Name="FM_ObjectWeight">
			<Description><![CDATA["Вес Изделия"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<String Name="FM_ObjectWeightUnit">
			<Description><![CDATA["Единица Веса"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["кг"]]></Value>
		</String>
		<RealNum Name="FM_Stories">
			<Description><![CDATA["Кол-во Этажей"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<RealNum Name="FM_HalfLandings">
			<Description><![CDATA["Кол-во Промежуточных Площадок"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<RealNum Name="FM_LevelHeight">
			<Description><![CDATA["Высота Уровня"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<RealNum Name="FM_HeadRoom">
			<Description><![CDATA["Высота Помещения"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<String Name="FM_BearingStructure">
			<Description><![CDATA["Несущая Конструкция"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<RealNum Name="FM_BearingCapacity">
			<Description><![CDATA["Опорная Способность"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<Boolean Name="FM_SmokeFree">
			<Description><![CDATA["Незадымляемая Лестница"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<RealNum Name="FM_StepsLength">
			<Description><![CDATA["Длина Проступей"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<String Name="FM_MaterialFootstep">
			<Description><![CDATA["Покрытие Проступей"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="FM_MaterialStairRailing">
			<Description><![CDATA["Покрытие Ограждения"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="FM_MaterialHandhold">
			<Description><![CDATA["Покрытие Поручней"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_custom1">
			<Description><![CDATA["Пользовательское Значение 1"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_custom2">
			<Description><![CDATA["Пользовательское Значение 2"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_custom3">
			<Description><![CDATA["Пользовательское Значение 3"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_custom4">
			<Description><![CDATA["Пользовательское Значение 4"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_custom5">
			<Description><![CDATA["Пользовательское Значение 5"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>

		<!-- gs_onorm_Title: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_onorm_Title">
			<Description><![CDATA["Дополнительные Параметры Спецификаций"]]></Description>
			<Fix/>
		</Title>
		<String Name="gs_onorm_treadnumber">
			<Description><![CDATA["Количество Ступеней"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_treadriser">
			<Description><![CDATA["Глубина Проступи / Высота Подступенка"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_person">
			<Description><![CDATA["Количество Людей"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_bardist_auto">
			<Description><![CDATA["Значение Чистой Ширины между Прутьями Ограждения"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_bardist">
			<Description><![CDATA["Чистая Ширина между Прутьями Ограждения"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_botlevheight_auto">
			<Description><![CDATA["Значение Отметки Нижнего Уровня"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_botlevheight">
			<Description><![CDATA["Отметка Нижнего Уровня"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_toplevheight_auto">
			<Description><![CDATA["Значение Отметки Верхнего Уровня"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_toplevheight">
			<Description><![CDATA["Отметка Верхнего Уровня"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_construction">
			<Description><![CDATA["Конструкция"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_soundinsul">
			<Description><![CDATA["Звукоизоляция"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_mat1">
			<Description><![CDATA["Дополнительный Материал 1"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_finish1_value">
			<Description><![CDATA["Значение Отделки 1"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_finish1">
			<Description><![CDATA["Отделка 1"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_customtext1">
			<Description><![CDATA["Дополнительная Информация 1"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_customtext2">
			<Description><![CDATA["Дополнительная Информация 2"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_aks">
			<Description><![CDATA["Номер AKS"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_product">
			<Description><![CDATA["Продукт"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_leistungbuch">
			<Description><![CDATA["Коллекция ID Спецификаций"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_description">
			<Description><![CDATA["Дополнительное Описание"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_number">
			<Description><![CDATA["Дополнительный Номер"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_id">
			<Description><![CDATA["Номер ID"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_admission">
			<Description><![CDATA["Дата Приема"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_modification">
			<Description><![CDATA["Дата Изменения"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_tozonenumber">
			<Description><![CDATA["Номер Зоны"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>

		<!-- ifc_Title: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="ifc_Title">
			<Description><![CDATA["IFC2x3 Набор Свойств для Лестниц"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
		</Title>
		<Integer Name="ifc_StairType">
			<Description><![CDATA["Тип Лестницы"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0</Value>
		</Integer>
		<Integer Name="ifc_NumberOfRiser">
			<Description><![CDATA["Количество Подступенков"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0</Value>
		</Integer>
		<Integer Name="ifc_NumberOfTreads">
			<Description><![CDATA["Количество Проступей"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0</Value>
		</Integer>
		<Length Name="ifc_RiserHeight">
			<Description><![CDATA["Высота Подступенка"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="ifc_TreadLength">
			<Description><![CDATA["Длина Проступи"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0</Value>
		</Length>
		<String Name="LibraryLangCode">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value><![CDATA["RUS"]]></Value>
		</String>
		<Integer Name="gs_ui_current_page">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
	</Parameters>
</ParamSection>

<CalledMacros SectVersion="2" SectionFlags="0" SubIdent="0">
	<Macro>
		<MName><![CDATA["Stair_RiseRun_Text"]]></MName>
		<MainGUID>E42F5F06-4225-4F32-A64C-ADCF1D4F9EDC</MainGUID>
	</Macro>
	<Macro>
		<MName><![CDATA["railSymbol2D_m"]]></MName>
		<MainGUID>C5C904E6-1706-4CD1-BC8D-6C294B5B40F7</MainGUID>
	</Macro>
	<Macro>
		<MName><![CDATA["stairRails_m"]]></MName>
		<MainGUID>4A3DDA4A-B43E-4039-B45A-463905CF42AD</MainGUID>
	</Macro>
	<Macro>
		<MName><![CDATA["ui_stairs"]]></MName>
		<MainGUID>D8D2E274-0A82-4EF4-845A-78AD6980E72F</MainGUID>
	</Macro>
	<Macro>
		<MName><![CDATA["FM_types"]]></MName>
		<MainGUID>2759D2DF-AA8E-44D1-AD1D-261581266B34</MainGUID>
	</Macro>
	<Macro>
		<MName><![CDATA["Onorm_Stair"]]></MName>
		<MainGUID>F021AF23-E4F7-4961-964D-C9BCAFB786DD</MainGUID>
	</Macro>
</CalledMacros>

<Picture MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="0" length_in_bytes="3251" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000007F0000
	007F0803000000F163ED210000010E504C5445FFFFFF937345725935B48D54C9
	9D5E8B6D41D2A4626B5432A17E4B81653CECE4D4D5C3A8664F30A8834EC1A57C
	AB8650BC9358EEEEEDE9DED1CBAD81634D2EE5CDAECCBBA3DAD4CBAC9572B89E
	789280667D613A5D492BB2A695C19A63E9D1B0A38D6E7B6442E1D9CDDBB9899C
	7D51B39264CDA061DACDBAA59681CDB89BACA3948E795BBCA17AF0C4768C7B63
	9B8E7BD1BB9DEDBC718F7043D1BFA5F0F0EFA08E75D3CBC0907E65E0AF69ECD2
	ABE9B56DC4BCB0CFB083B0A28DD5B17DF0EEECE3C59CAD916A9C815AEDE3CDCB
	C1B3806E55F7E489F6DB857C6B53B7AEA29D907CD2AC73BBB1A3F9F4A3F9F29C
	B19F86EBC184F8EE938E806DDBC099C0AE95BFB19DE4BF8CDDD0BC6F5E45F3CF
	8322366C1E00000B5649444154785EED96D572E4DA928657E662311433839119
	9A61339D33F0FE2F3229A9ECEAEE3DBDA3A1349E0BFF2A4545D817DFFF652EC9
	665F9CA73CE5294F89078F8B8FE463E21DE08FCA0F5B113C22BEB13D128FC89F
	B703E731F983D6FF153F71DCCB60FCC9A3E658B76C7ECD75D334E0A22782F178
	D6FAA4945F3A3F0C0142903019349707EA13FF7AF9FC31F71B70804BBCB5D228
	3B395DD692F8811FB93B25F3D3089AE082DB76A0DE9FBDECCAFD090DA3513BCB
	4B4469D9FE3791C9F948FCEAAC556F30B69DD4060363C246AD1EC91D6756B6FF
	4EE12FC9BF91F19BF9A7D1BC9DFA917DB12C7BFF6635FFA37A55B592E63DDFAD
	D157F4128E04A4F3B84CFFE0C1BFD7A8B772F84EC1DF899AD016D0E43C38A897
	B8FFB53FF1EFFD8F190BA2064C058C96FD83998896F3B8DCF95F7EEA4F7C23B8
	1EB88CD5E6FD40F0747EB2E9F97FB2FF73C606C45FF9F326F7B7CF7483EA3874
	1F044204F3B8ACFD5F8AD3CCBFB5F6E7082FF7180E1B71C6AF3AECE4E6A7ACC2
	26F91FF8CF06397FED6F350693853D78BF7D40FCBC037BD6BF53BD837873F327
	FFA3822FEEF98D953F5406697424DDC604EAC4CEF98C5D3ACF9508FEF36433E7
	0F9A86FC31E3F7EEF9AD953FB468E3476DB751EF1EBD5EF9E7F7C9F84EA90367
	53FE7003377C2A546B44E401F157FE78DE1302AC7B5AAF0E5AB5CB359F5DB257
	D52B35FEEE06A1312634613808766E1CC9D6FE4BE237B50E57FE6E70327D99F3
	D7F74EFFF7DD71FDFBF83F74B7CECF879EA6EC2D74BD46E46204DD2EF1AD97F1
	A5FB82F88CC176F2119F7E343ADC1D276C03A9D7BB5B7F6E7B1A87ADC975B24F
	FC9FA986452E842CFC19E3B7DCB967F7733EDDAF76DF8D47DFCF8F1DC7759B8B
	B8DE5DEC69C497B7A793F7150BB41E7ED4AEB60AFEAB91197CE49F3FA99787BB
	D3D7DFCA4D8E8FDD344DA7828B4884A7F928E64DF0AD26BAEF1B00247FE23789
	EFB000BAF7E78FD8450767B994AAF58D4F239890F328834791E02FCFD216EA0A
	62455BDFF7098E5A4BE9B646EE79CEAFBABDDBB57F71D7A9D2EF522FBF89EF13
	9E135C08D1135C02843917C85C520DC25BC0F4E599FB8231EB30B77A225A6EEE
	5FF05BE45F63EC366EBDBDFB968398E9133D8BEA45E45DD128C9DC9239C13DD2
	87E1B9B5663A62E0B06E954DB66D4CFE059B350B3E55E9BFDB3D38F9167E94E3
	7B4AA9A85DE96804B044A73564D11AA0C55AB70B0921B8F1BFABECCF44D2B2FB
	2BFECE03DF593E7F7B38FA7A7E54F095128AFCDB323327F5077F2E27CF4E47AC
	956C5980417072CEFA6A7A72EF1FACF935F66A77F7E6D957F239E7828B2251DB
	B631C36BDA4311ADED500F5E8C584AB34EBA06607BEE4EEF26EEDFF9F4A3C1E5
	61F07505202B10F1288B08DBA80B775CD5A8785E1BA4958DEBD57F65490DC17F
	511BDA35FFE4C19FBD60A3ABA9F3557C3026CCC3FDD06F67F48A57F9209D0ACA
	0850C2F656333F76E7CF6E118E60F9C07FE53EF837188BEEA2F957F02580A14F
	76191FDAB975E69FDD79152AD08EB8F4ACDFC6E18F8B9CDA7ADD02D5AC9FAFCF
	FF6A0CC46FC48733F7CBF92829905D14E2E7584AE5C3402401A56D5BC46137E3
	B3A47120B4EEC66CEF81FF6AC5678E527F3DFB623EA2CDAE2C4428DCB3A0C6BC
	85E7D110A4A50A5A463C1BD03655A877D9737FA8A9CD7AFF05BFC99C83E717C1
	97BE0934AE4276E447F88F47402BA0543444515B87110220B671B2F8815DAAC0
	D947BD885FADCF7FE1EFB2BBABF117F23D8F541FAEE2ECAF2B105C53A8011A63
	25021A65E99BB27F737C71C0E20662ABBBF25FF383402DBFF4EFFED975776BEF
	7CA81FF0EB907D8ECF6F194AA9510A0BDC865263380CC488B1F8C7B66EC48D8F
	FD83D1EFBDF9D7FF07D23D3FCFFD1F6AD0FAF57D10C148D4D24A2E6700214750
	CD9800F1BEA787F17AFF19DF7144CF61DF92FA75B735C4550AF7E2554CEE1242
	AD896F7B3E2885920B58140D309C7F38FFB4EEA48ACEE037A75EDBDFC63662EE
	8FD99535B020D14334162C70F2B76286FAC7B3ACF5364C1FF8C72C4D9CDA48DD
	9DB0EF495CEB6EAF069027FB267E05251A406D5082DD051BDABD3A01B6205CC6
	0FFB27BE2354957D77F6BD8F1F8AEC85E059C213DF0208612289B61B53DD3F61
	7ABFFFB44EFCE57375F2DDFC78BFF27101CFD3F4526E238608D60F95E112293F
	13E06739A1113CF06BAE72D9F7E7345B01AE43FE1AADD4E05930207AB29DF71A
	D6B3B210E5FC1DA7E0F74ED80656A029B80EE9A3B19EF1DAB602B06B2B45BBA8
	414B78BD1D8ED6FE73D1671BC8CFE8E51B18627BB5036D2D42A50DC4BF020F31
	FBC52CD45B314BDE98F1310B327FD71D899FD82692E0FD04ECAA002218CF5A0F
	40092CA20CC749CCE23726653B85BFC3D5886D22F1FB75015235E069E0152BC9
	5FA87B7EA8E0BFC239633FC274A7F07782BB3BB691C4FB1F16104256B4B4391F
	0EA1784528A314B5FA17635B9217FE49309EB10D658BCE3D169142088202480F
	4CC6EF78DED0007021B5889A31BB6E4FFBF9FC839B886D2AD78526E987AA4705
	2AD64804800BE3A1040013CAACD24C84094B8EA6053F150EDB54EA983DF914A1
	2E94EAE170122E88AB3884204323A99DDFC37036E335F6DAEED0FE9320E86D8E
	CF92F7544063BBA72E2ED48570CE26120CA81EB91B9B37334AA29ACDA25BB605
	41E1DF679B4BFC262B20C9FFEAEA42A50B348683501CB088060536A4D97097B5
	FC83CC5F54D926B347A75086425CECEE5E29EEC99C2F8739DD6B430860B0A784
	08E76CC80387F801DB68F63D8DC617E2F0DDEEA1921E27FE98B11F5053170354
	002BBE88442FAAC5C893209DDDB04D1740305CA8C35FA98006D1EC8D597D81D2
	8094A194E0590320443475EA701004B31ADB7088053401B5FBCBDBC39FBA3C50
	D3BD9C09460248D4ED36B6690262EA2C78908A8DF3D9B5B5F9047EFDE58FABB9
	995E70F090E8202780889AAECC9F2690409A469BE7B3395A6B386DE097778728
	2E8CF5485CC269EDB4C06B93F90BFE5B4304DC659B4FD75A808836F0CB210825
	B527DFFC7696FF82FC6DC5FA7E24E8E2AF41F12A2B210BB460847AF7EB1F3D23
	86FBB5B800244B09806D3F0B277EDA1086F82515F0857AFBEBEE9529361CBBE9
	444A901E86615834E051C0C9BF94EC230217877FBCBDB0C43FDB927044700939
	DEF8BEF1017824AC2889FF6C1B2D70B5FB56D9C11E400525D94BF46408218044
	D49AF8E151AF243E4B10AD1157FFAD2C62A891E880F24DEBF8CC61317A9AC2B9
	404EFE25E5DA4369C4A1B212ACB6B2717C96ACBB6994C08541511E9F2D3402BF
	52686AF33A5BC719D5D21761684C28AC1551797C36D4D6F4943D7D209FD54EB7
	6568F22B0C39479F97C93FEBA0150A9B34F07AF7742025EA3610993E741BE287
	91F88B9597858746D970CF23B2B5D6D340E4A200277D8E9C8BA0447EAC3D5038
	F41091DC89CEE94AD3D49DBB89F39BE41E70F12F5662AE3BA8D06278DED85F76
	6B8EE37C083825BE10355666D053F6331376AADCF379AF512A7FABA374730D48
	92647E7C9C369BFCFEFCF1B4547EAC556550EF76BB7B7BE768B283EF13B97802
	737ED864A5664B75C0F3B4A72DC1732C89673D0A7F214BE6C70A416B2DF9DF13
	71E43D2899CF949CD4EB75E7833C5BDD23FEA66945A36C3EEC7D06E070E9032F
	DBFFF9DFF98993D0C7A972C4302ADBBFEF772A150BFE47295EC1DC4301A7A5FB
	2340F861889E37E0BC63421894BD7F9C5C56C7E3714F44118F38F173790AE7A4
	0FAD92F9917ED87F4C87BEDFAFFE351E0742F048F0D000EC95CCE79DCF10E811
	EC0160E97C3D6CEEA435D71D254EFCC9D18C0074D97C61FCE2D4ADB2B3B3B33C
	3E9E27CE289E8580DE7ED97C98FED48B382FE8E1BA4B180990D8D92A7DFEAD6C
	D7FDE7632122BE42E77C2E48BF735636DFEBAECF7FBF3A9E518BE21D2038E977
	92D2FD3F9DB033AAFE47F6007241FA1D56BAFFF5FF0A709C94EB4EE77DE9FC4A
	FC19409F93FE5EE9FC21FB2CBFD3E9FC50363F5AFC233F2EDD3FFE27FE162B3B
	2EFB273E7BC4107FEB91F9F1E3F21F559F8D02F6FF254F79CA539EF294FF01AC
	B00CED31E7800F0000000049454E44AE426082
	]]>
</Picture>

<Copyright SectVersion="1" SectionFlags="0" SubIdent="0">
	<Author>GRAPHISOFT</Author>
	<License>
		<Type>CC BY-ND</Type>
		<Version>3.0</Version>
	</License>
</Copyright>

</Symbol>
