<?xml version="1.0" encoding="UTF-8"?>
<Symbol IsArchivable="true" IsPlaceable="true" MainGUID="529BF903-1648-4AFB-8A74-3595071187ED" MigrationValue="Normal" Owner="1196638531" Signature="1196644685" Version="38">
<Ancestry SectVersion="1" SectionFlags="0" SubIdent="0" Template="false">
	<MainGUID>F938E33A-329D-4A36-BE3E-85E126820996</MainGUID>
	<MainGUID>103E8D2C-8230-42E1-9597-46F84CCE28C0</MainGUID>
	<MainGUID>784EAEA1-5041-4AA6-B6F4-EF263A891EE7</MainGUID>
	<MainGUID>57B7C584-5C0D-11D6-A0D8-036F034B6792</MainGUID>
</Ancestry>

<MigrationTable SectVersion="1" SectionFlags="0" SubIdent="0">
	<MigrationTableElement>
		<MainGUID>3ACD5C88-22BA-4839-B3AB-06F9D1A47459</MainGUID>
		<Version>19</Version>
		<Name><![CDATA[""]]></Name>
		<AutoMigration>true</AutoMigration>
	</MigrationTableElement>
</MigrationTable>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_3D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
if gs_detlevel_3D_m = DET3D_OFF then end

if GLOB_CONTEXT>20 and GLOB_CONTEXT<40 then 		!! for Simple Model and in 3D Windoow
	gs_detlevel_3D_m = DET3D_SIMPLE
endif

if not(gs_shadow) then SHADOW OFF
pen gs_cont_pen

!!!!!!!!!!!!!!!!!!! *** HOTSPOTs UNID *** !!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

	FlightUNID=1		! 1-15
	! RailUNID=1000		! 1000,1100,1200

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

if iFirstTread = FIRSTTREAD_AT_FLOOR_LEVEL then
	stt=0
else
	stt=1
endif

HOTSPOT r*cos(stt*fokszog),	r*sin(stt*fokszog), 0, FlightUNID, flw, 1+128 : FlightUNID=FlightUNID+1
HOTSPOT (r+1)*cos(stt*fokszog),	(r+1)*sin(stt*fokszog), 0, FlightUNID, flw, 3 : FlightUNID=FlightUNID+1
HOTSPOT (r-flw)*cos(stt*fokszog), (r-flw)*sin(stt*fokszog), 0, FlightUNID, flw, 2 : FlightUNID=FlightUNID+1

HOTSPOT 0,	0, 0, FlightUNID, r, 1+128 : FlightUNID=FlightUNID+1
HOTSPOT (r)*cos(stt*fokszog), (r)*sin(stt*fokszog), 0, FlightUNID, r, 2 : FlightUNID=FlightUNID+1
HOTSPOT (-1)*cos(stt*fokszog), (-1)*sin(stt*fokszog), 0, FlightUNID, r, 3 : FlightUNID=FlightUNID+1

addz -sst

HOTSPOT 0,	0, sst, FlightUNID, zzyzx, 1+128 : FlightUNID=FlightUNID+1
HOTSPOT 0,	0, -1, FlightUNID, zzyzx, 3 : FlightUNID=FlightUNID+1
HOTSPOT 0, 0, sst+zzyzx, FlightUNID, zzyzx, 2 : FlightUNID=FlightUNID+1

if iTopTread = TOPTREAD_AT_FLOOR_LEVEL then stps=rnu else stps=rnu-1


HOTSPOT 0,	0, zzyzx+sst, FlightUNID, r, 1+128 : FlightUNID=FlightUNID+1
HOTSPOT (r)*cos(stps*fokszog), (r)*sin(stps*fokszog), zzyzx+sst, FlightUNID, r, 2 : FlightUNID=FlightUNID+1
HOTSPOT (-1)*cos(stps*fokszog), (-1)*sin(stps*fokszog), zzyzx+sst, FlightUNID, r, 3 : FlightUNID=FlightUNID+1

HOTSPOT (r)*cos(stps*fokszog), (r)*sin(stps*fokszog), zzyzx+sst, FlightUNID, flw, 1 : FlightUNID=FlightUNID+1
HOTSPOT (r-flw)*cos(stps*fokszog), (r-flw)*sin(stps*fokszog), zzyzx+sst, FlightUNID, flw, 2 : FlightUNID=FlightUNID+1
HOTSPOT (2*r)*cos(stps*fokszog), (2*r)*sin(stps*fokszog), zzyzx+sst, FlightUNID, flw, 3 : FlightUNID=FlightUNID+1


covthick = covthick*cover
addz -covthick

if iNoseType = NOSE_ROUNDED then
	mat_riser=mat_tread
	SECT_FILL typeFillTread, penBackFillTread, penFillTread, penLineTread

	covthicky=0
endif

group "csiga"
	corrtube=0.03
	material matb
	SECT_FILL typeFillStringer, penBackFillStringer, penFillStringer, penLineStringer
	put r,  -r,0
	put r,	-r/r, 0
	put r*cos(0), r*sin(0), 0
	pontszam=3

	i=1
	dc=-3
	if 1/resolka=0 then resolka=1/0.001
	while dc <= fordul*resolka do
		put r*cos((360/resolka)*i), r*sin((360/resolka)*i), (i-1)*stepup
		pontszam=pontszam+1
		dc=dc+1
		i=i+1
	endwhile

	addz th*rnu+sst-th
	cutplane
	del 1
	put r*cos(360/resolka*i), r*sin(360/resolka*i), (i-3)*stepup
	pontszam=pontszam+1
	psy=pontszam*3
	if iFlightSectionType = FLIGHTSECTION_WITH_SPINEBEAM then
		if iLowerJunctionType = LOWERJUNCTION_GROUND_FLOOR then
			if iFirstTread = FIRSTTREAD_AT_FLOOR_LEVEL then
				addz sst-th
			else addz sst
			cutplane 180
				del 1
				tubea 11, pontszam, 1+2+16+32,
					-corrtube,0,0,
					0,0,0,
					flw/2-beamx/2, -rfthickness,0,
					flw/2-beamx/2, -rfthickness-beamy,0,
					flw/2+beamx/2, -rfthickness-beamy,0,
					flw/2+beamx/2, -rfthickness,0,
					flw,0,0,
					flw+corrtube,0,0,
					flw+corrtube,sst+th,0,
					-corrtube,sst+th,0,
					-corrtube,0,0,

					get(psy)
			cutend
		else
			tubea 11, pontszam, 1+2+16+32,
					-corrtube,0,0,
					0,0,0,
				flw/2-beamx/2, -rfthickness,0,
				flw/2-beamx/2, -rfthickness-beamy,0,
				flw/2+beamx/2, -rfthickness-beamy,0,
				flw/2+beamx/2, -rfthickness,0,
				flw,0,0,
				flw+corrtube,0,0,
				flw+corrtube,sst+th,0,
				-corrtube,sst+th,0,
				-corrtube,0,0,

				get(psy)
		endif
	else
		if iLowerJunctionType = LOWERJUNCTION_GROUND_FLOOR then
			if iFirstTread = FIRSTTREAD_AT_FLOOR_LEVEL then
				addz sst-th
			else addz sst
			cutplane 180
				del 1
				tubea 5, pontszam, 1+2+16+32,
					-corrtube,0,0,
					flw+corrtube,0,0,
					flw+corrtube,sst+th,0,
					-corrtube,sst+th,0,
					-corrtube,0,0,

					get(psy)
			cutend
		else
			tubea 5, pontszam, 1+2+16+32,
				-corrtube,0,0,
				flw+corrtube,0,0,
				flw+corrtube,sst+th,0,
				-corrtube,sst+th,0,
				-corrtube,0,0,

				get(psy)
		endif
	endif
	cutend
endgroup

group "coveringy"
	if covery and iNoseType = NOSE_NORMAL and gs_detlevel_3D_m = DET3D_DETAILED then
		material mat_riser
		SECT_FILL typeFillRiser, penBackFillRiser, penFillRiser, penLineRiser

		addz sst+covthick
		rk=(r-flw)/2
		for i=1 to rnu-1
			dx=covthicky*sin(i*fokszog)
			dy=-covthicky*cos(i*fokszog)
			if not(i=rnu-1 and iTopTread = TOPTREAD_BELOW_FLOOR_LEVEL) then
				prism 5, th-covthick,
					rk*cos(i*fokszog),rk*sin(i*fokszog),
					(r+1)*cos(i*fokszog), (r+1)*sin(i*fokszog),
					(r+1)*cos(i*fokszog)+dx, (r+1)*sin(i*fokszog)+dy,
					rk*cos(i*fokszog)+dx, rk*sin(i*fokszog)+dy,
					rk*cos(i*fokszog),rk*sin(i*fokszog)
			endif
			addz th
		next i
		i=i-1
		del i
		del 1
	endif
endgroup

group "coveringx"
	if cover and gs_detlevel_3D_m = DET3D_DETAILED then
		addz sst-th
		rk=(r-flw)/2
		material mat_tread
		SECT_FILL typeFillTread, penBackFillTread, penFillTread, penLineTread

		kx=covthick*tproj/th
		for i=1 to rnu
			dx=(covthicky+ns)*sin(i*fokszog)
			dy=(covthicky+ns)*cos(i*fokszog)*(-1)
			addz th
			if not ((i=1 and iFirstTread = FIRSTTREAD_ABOVE_FLOOR_LEVEL) or (i=rnu and iTopTread = TOPTREAD_BELOW_FLOOR_LEVEL)) then
				if iNoseType = NOSE_ROUNDED then
					prism_ 5, covthick,
						rk*cos((i-1)*fokszog)+dx, rk*sin((i-1)*fokszog)+dy,13,
						(r+1)*cos((i-1)*fokszog)+dx, (r+1)*sin((i-1)*fokszog)+dy,13,
						(r+1)*cos(i*fokszog), (r+1)*sin(i*fokszog),8,
						rk*cos(i*fokszog), rk*sin(i*fokszog),8,
						rk*cos((i-1)*fokszog)+dx, rk*sin((i-1)*fokszog)+dy,13
				else
					prism_ 5, covthick,
						rk*cos((i-1)*fokszog)+dx, rk*sin((i-1)*fokszog)+dy,15,
						(r+1)*cos((i-1)*fokszog)+dx, (r+1)*sin((i-1)*fokszog)+dy,15,
						(r+1)*cos(i*fokszog), (r+1)*sin(i*fokszog),15,
						rk*cos(i*fokszog), rk*sin(i*fokszog),15,
						rk*cos((i-1)*fokszog)+dx, rk*sin((i-1)*fokszog)+dy,15
				endif
			endif
		next i
		i=i-1
		del i
		del 1
	endif
endgroup

group "harap"
	material matb
	SECT_FILL typeFillStringer, penBackFillStringer, penFillStringer, penLineStringer

	if iFlightSectionType = FLIGHTSECTION_WITH_SPINEBEAM then
		addz -rfthickness-beamy
		prism 5, sst+th+rfthickness+beamy,
			0,0,
			(r+1)*cos(0),0,
			(r+1)*cos(0),-1,
			0,-1,
			0,0
		del 1
	else
		prism 5, sst+th*5,
			0,0,
			(r+1)*cos(0),0,
			(r+1)*cos(0),-1,
			0,-1,
			0,0
	endif

	addz sst
	material matb
	for i=1 to rnu+1
		addz (i-1)*th
		if i=1 and iFirstTread = FIRSTTREAD_ABOVE_FLOOR_LEVEL then
			addz -lst2
			prism 4, th*2+lst2,
				0,0,
				(r+1)*cos(fokszog*(i-2)),(r+1)*sin(fokszog*(i-2)),
				(r+1)*cos(fokszog*(i)),(r+1)*sin(fokszog*(i)),
				0,0
			del 1
		else
			if i=rnu+1 then
				if iTopTread = TOPTREAD_BELOW_FLOOR_LEVEL then
					addz -lst-th
					prism 4, th*2+lst,
						0,0,
						(r+1)*cos(fokszog*(i-2)),(r+1)*sin(fokszog*(i-2)),
						(r+1)*cos(fokszog*(i)),(r+1)*sin(fokszog*(i)),
						0,0
					del 1
				else
					addz -lst-th
					prism 4, th*2+lst,
						0,0,
						(r+1)*cos(fokszog*(i-1)),(r+1)*sin(fokszog*(i-1)),
						(r+1)*cos(fokszog*(i+1)),(r+1)*sin(fokszog*(i+1)),
						0,0
					del 1
				endif
			else
				if gs_detlevel_3D_m = DET3D_SIMPLE then
					ddx=(covthicky+ns)*cos(i*fokszog)
					ddy=(covthicky+ns)*sin(i*fokszog)
					addz covhick
				else
					ddx=0
					ddy=0
					addz 0
				endif
				prism 4, th+sst/2,
						0,0,
						(r+1)*cos(fokszog*(i-1)),(r+1)*sin(fokszog*(i-1)),
						(r+1)*cos(fokszog*(i))+ddx,(r+1)*sin(fokszog*(i))+ddy,
						0,0
				del 1

				if iNoseType = NOSE_ROUNDED then

					dx=-tproj*sin(i*fokszog)
					dy=tproj*cos(i*fokszog)
					extrude 5,-dx,-dy,th,1+2+4+16+32,
						0,0,1,
						dx,dy,1,
						(r+1)*cos(fokszog*(i))+dx,(r+1)*sin(fokszog*(i))+dy,1,
						(r+1)*cos(fokszog*(i)),(r+1)*sin(fokszog*(i)),1,
						0,0,1
				endif
			endif
		endif
		del 1
	next i
	del 1
	if iTopTread = TOPTREAD_BELOW_FLOOR_LEVEL then i=i-1
	if iFlightSectionType = FLIGHTSECTION_WITH_SPINEBEAM then hcorr=th+sst+rfthickness+beamy else hcorr=th+sst
	addz (i+1)*th-hcorr
	prism 4, hcorr+th*5,
		0,0,
		(r*r)*cos(fokszog*(i-1)),(r*r)*sin(fokszog*(i-1)),
		(r*r)*cos(fokszog*(i+2)),(r*r)*sin(fokszog*(i+2)),
		0,0
	del 1
endgroup



!					ABS
group "rece"
	if gs_detlevel_3D_m = DET3D_DETAILED and recefice then
		material mat_tread
		SECT_FILL typeFillTread, penBackFillTread, penFillTread, penLineTread

		reclen=0.005
		recnum=5
		addz sst+covthick-reclen
		for i=0 to rnu -1
			dx=-reclen*sin(i*fokszog)
			dy=reclen*cos(i*fokszog)
			addz (i)*th
			for nn=1 to recnum
				prism 5, reclen,
					2*nn*dx,2*nn*dy,
					(r+1)*cos(i*fokszog)+2*nn*dx,(r+1)*sin(i*fokszog)+2*nn*dy,
					(r+1)*cos(i*fokszog)+(2*nn+1)*dx,(r+1)*sin(i*fokszog)+(2*nn+1)*dy,
					(2*nn+1)*dx,(2*nn+1)*dy,
					2*nn*dx,2*nn*dy
			next nn
			del 1
		next i

		del 1
	endif
endgroup


!			CUTTING CYLYNDERS  body - cover vert - cover horz
group "ringcut"
	material matb
	SECT_FILL typeFillStringer, penBackFillStringer, penFillStringer, penLineStringer

	addz -1-lst2
	resol 360/fokszog*res
	extrude 3,0,0,th*rnu+2+lst2,1+2+4+16+32,
		0,0,901,
		r+2,360,4001,
		r,360,4001
	if r>flw then
		extrude 2,0,0,th*rnu+2+lst2,1+2+4+16+32,
			0,0,901,
			r-flw,360,4001
	endif
	del 1
endgroup

group "ringcutcx"
	material mat_tread
	SECT_FILL typeFillTread, penBackFillTread, penFillTread, penLineTread

	addz -1-lst2
	resol 360/fokszog*res
	extrude 3,0,0,th*rnu+2+lst2,1+2+4+16+32,
		0,0,901,
		r+2,360,4001,
		r,360,4001
	if r>flw then
		extrude 2,0,0,th*rnu+2+lst2,1+2+4+16+32,
			0,0,901,
			r-flw,360,4001
	endif
	del 1
endgroup

group "ringcutcy"
	material mat_riser
	SECT_FILL typeFillRiser, penBackFillRiser, penFillRiser, penLineRiser

	addz -1-lst2
	resol 360/fokszog*res
	extrude 3,0,0,th*rnu+2+lst2,1+2+4+16+32,
		0,0,901,
		r+2,360,4001,
		r,360,4001

	if r>flw then
		extrude 2,0,0,th*rnu+2+lst2,1+2+4+16+32,
			0,0,901,
			r-flw,360,4001
	endif
	del 1
endgroup

!			ROUNDED COVER
group "roundcover"
	if iNoseType = NOSE_ROUNDED and cover and gs_detlevel_3D_m = DET3D_DETAILED then
		SECT_FILL typeFillTread, penBackFillTread, penFillTread, penLineTread

		resol 9
		addz sst
		kx=covthick*tproj/th
		if iFirstTread = FIRSTTREAD_AT_FLOOR_LEVEL then sti=2 else sti=3
		if iTopTread = TOPTREAD_AT_FLOOR_LEVEL then endi=rnu else endi=rnu-1
		for i=sti to endi
			addz th*(i-1)
			addx (r-flw)/2*cos((i-1)*fokszog)
			addy (r-flw)/2*sin((i-1)*fokszog)
			rotx 90
			roty 90+(i-1)*fokszog
			dx=-tproj*sin(i*fokszog)
			dy=tproj*cos(i*fokszog)
			prism_ 9,flw+1+(r-flw)/2,
				0,0,13,
				0,covthick,79,
				0,0,979,
				0,atn(th/0.037),4079,
				tproj-covthick-kx,-th+covthick,13,
				0,-th+covthick,13,
				0,-th,13,
				tproj,-th,13,
				0,0,13
			del 5
		next i
		del 1
		resol 360/fokszog*res
	endif
endgroup


!			GROUNDFLOOR
group "groundfloorbox"
	if iLowerJunctionType = LOWERJUNCTION_GROUND_FLOOR and iFirstTread = FIRSTTREAD_AT_FLOOR_LEVEL then
		i=1
		material matb
		SECT_FILL typeFillStringer, penBackFillStringer, penFillStringer, penLineStringer

		addz -lst2+sst
		prism 4, lst2-th,
			0,0,
			(r+1)*cos(fokszog*(i-1)),(r+1)*sin(fokszog*(i-1)),
			(r+1)*cos(fokszog*(i)),(r+1)*sin(fokszog*(i)),
			0,0
		del 1
	endif
endgroup


placegroup subgroup(subgroup("csiga","harap"),"ringcut")
if iLowerJunctionType = LOWERJUNCTION_GROUND_FLOOR and iFirstTread = FIRSTTREAD_AT_FLOOR_LEVEL then
	placegroup subgroup(subgroup("groundfloorbox","ringcut"),"ringcut")
endif
placegroup subgroup(subgroup("coveringx","ringcutcx"),"rece")
if covery and covthicky<>0 then placegroup subgroup("coveringy","ringcutcy")
placegroup subgroup("roundcover", "ringcutcx")
!placegroup "csiga"
!placegroup "ringcut"
del 1

killgroup "groundfloorbox"
killgroup "csiga"
killgroup "harap"
killgroup "ringcut"
killgroup "ringcutcx"
killgroup "ringcutcy"
killgroup "coveringx"
killgroup "coveringy"

del top

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! *** Railing ** !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

if rail_m <> RAILPOS_NONE then
	addz -covthick

	fordul=fordul*1.00241
	fordul=fordul-fokszog/360

	if iFirstTread = FIRSTTREAD_ABOVE_FLOOR_LEVEL then
		fordul=fordul-fokszog/360
		zz=zzyzx-th
	else
		zz=zzyzx
	endif

	ker	= 2*pi*(r-flw-roffl)
	k	= 2*pi*(r+roffr)
	nlra=sqr(k*k*fordul*fordul+zz*zz)
	klra=sqr(ker*ker*fordul*fordul+zz*zz)

	ann=atn(zz/(k*fordul))
	ank=atn(zz/(ker*fordul))

	if iFirstTread = FIRSTTREAD_ABOVE_FLOOR_LEVEL then
		rotz fokszog
		addz th
	endif

	if cover then addz covthick

	kr=r-flw-roffl+handRailWidthL /2
	rr=r+roffr-handRailWidthR/2
	res=res*360/fokszog

	! ------------------------------------------------------------------------------
	! Right rail
	! ------------------------------------------------------------------------------

	if rail_m = RAILPOS_RIGHT or rail_m = RAILPOS_BOTH then
		if bComplexRailRight then rotz fokszog/2*0
		addx r+roffr-handRailWidthR/2
		rotz 90

		RailUNID=1000

		addy roffr
		HOTSPOT 0, 0, dsr, RailUNID, roffr, 1+128: RailUNID=RailUNID+1
		HOTSPOT 0, -roffr, dsr, RailUNID, roffr, 2: RailUNID=RailUNID+1
		HOTSPOT 0, 1, dsr, RailUNID, roffr, 3: RailUNID=RailUNID+1
		del 1

		HOTSPOT 0,0,0, RailUNID, dsr, 1+128: RailUNID=RailUNID+1
		HOTSPOT 0,0,dsr, RailUNID, dsr, 2: RailUNID=RailUNID+1
		HOTSPOT 0,0,-1, RailUNID, dsr, 3: RailUNID=RailUNID+1

		HOTSPOT 0,0,dsr, RailUNID, hrr, 1+128: RailUNID=RailUNID+1
		HOTSPOT 0,0,dsr+hrr, RailUNID, hrr, 2: RailUNID=RailUNID+1
		HOTSPOT 0,0,dsr-1, RailUNID, hrr, 3: RailUNID=RailUNID+1

		lraSimple=nlra
		lraComplex=nlra
		additionXComplex=0
		additionZComplex=0
		hrovL=hror
		hrovR=hror
		postNumber = npr
		side = SIDE_RIGHT
		gosub "callRailsForStair"

		del 2
		if bComplexRailRight then del 1
	endif



	! ------------------------------------------------------------------------------
	! Left rail
	! ------------------------------------------------------------------------------

	if rail_m = RAILPOS_LEFT or rail_m = RAILPOS_BOTH then
		if bSameRails then
			leftRailType_m = rightRailType_m
		endif

		if bComplexRailLeft then rotz fokszog/2*0
		addx r-flw-roffl+handRailWidthL /2
		rotz 90

		if not(bSameRails) then
			addy -roffl
				RailUNID=1100
				HOTSPOT 0,0,dsl, RailUNID, roffl, 1+128: RailUNID=RailUNID+1
				HOTSPOT 0,roffl,dsl, RailUNID, roffl, 2: RailUNID=RailUNID+1
				HOTSPOT 0,-1,dsl, RailUNID, roffl, 3: RailUNID=RailUNID+1
			del 1

			RailUNID=1200
			HOTSPOT 0,0,0, RailUNID, dsl, 1+128: RailUNID=RailUNID+1
			HOTSPOT 0,0,dsl, RailUNID, dsl, 2: RailUNID=RailUNID+1
			HOTSPOT 0,0,-1, RailUNID, dsl, 3: RailUNID=RailUNID+1

			HOTSPOT 0,0,dsl, RailUNID, hrl, 1+128: RailUNID=RailUNID+1
			HOTSPOT 0,0,dsl+hrl, RailUNID, hrl, 2: RailUNID=RailUNID+1
			HOTSPOT 0,0,dsl-1, RailUNID, hrl, 3: RailUNID=RailUNID+1
		else
			addy -roffl
				RailUNID=1100
				HOTSPOT 0,0,dsl, RailUNID, roffr, 1+128: RailUNID=RailUNID+1
				HOTSPOT 0,roffl,dsl, RailUNID, roffr, 2: RailUNID=RailUNID+1
				HOTSPOT 0,-1,dsl, RailUNID, roffr, 3: RailUNID=RailUNID+1
			del 1

			RailUNID=1200
			HOTSPOT 0,0,0, RailUNID, dsr, 1+128: RailUNID=RailUNID+1
			HOTSPOT 0,0,dsl, RailUNID, dsr, 2: RailUNID=RailUNID+1
			HOTSPOT 0,0,-1, RailUNID, dsr, 3: RailUNID=RailUNID+1

			HOTSPOT 0,0,dsl, RailUNID, hrr, 1+128: RailUNID=RailUNID+1
			HOTSPOT 0,0,dsl+hrl, RailUNID, hrr, 2: RailUNID=RailUNID+1
			HOTSPOT 0,0,dsl-1, RailUNID, hrr, 3: RailUNID=RailUNID+1
		endif

		lraSimple=klra
		lraComplex=klra
		additionXComplex=0
		additionZComplex=0
		hrovL=hrol
		hrovR=hrol
		postNumber = npl
		side = SIDE_LEFT
		gosub "callRailsForStair"

		del 2
		if bComplexRailLeft then del 1
	endif
	if cover then del 1
	if iFirstTread = FIRSTTREAD_ABOVE_FLOOR_LEVEL then del 2

	del 1
endif

END

! ==============================================================================
"callRailsForStair":
! ------------------------------------------------------------------------------
!	lraSimple
!	lraComplex
!	additionXComplex
!	additionZComplex
!	hrovL: rail overhang start
!	hrovR: rail overhang end
!	postNumber:   number of posts
!	side: SIDE_LEFT or SIDE_RIGHT
! ==============================================================================
	additionXComplex = additionXComplex
	additionZComplex = additionZComplex
	gosub "callRails"
return

! ==============================================================================
"callRails":
! ------------------------------------------------------------------------------
!	ani
!	additionXComplex
!	additionZComplex
!	dsComplex
!  ------------------
!	side: SIDE_LEFT or SIDE_RIGHT
!	lraSimple
!	lraComplex
!	hrovL: rail overhang start
!	hrovR: rail overhang end
!	postNumber:   number of posts
! ==============================================================================
	if side = SIDE_LEFT then
		railBarDepth	= bwl
		railBarDiam		= bdl
		railHeight		= hrl
		railBarThk		= fthl
		railBarType		= btypl_m
		railFrameThk	= fthl
		railDist		= dsl
		railType_m		= leftRailType_m
		railPostDiam	= pdl
		railPostWidth	= pwl
		railPostThk		= pthl
		railPostType	= ptl_m
		barNumber		= nbl
		iBalusterStyle	= btl_m
		railFramesWSide	= fswl
		railFramesWTop	= ftwl
		railFramesWBot	= fbwl
		railBarHeight	= bhl
		railBarFillThk	= bthl
		balusterDist	= abdistl
		railFrameMat	= fmatl
		railBaluFillMat	= bmatl
		railPostMat		= pmatl
		balusterNumber	= nbtl
		railFillDist	= fdfl
!!!		railPostBaseType= gs_PostBaseTypeL_m
		railDistFromHr	= sbhl
!!!		railPostBaseOv	= gs_PostBaseOverhangL
		handRailType	= hrtl_m
		handRailWidth	= hrwl
		handRailDiam	= hrdl
		handRailHeight	= hrhl
		ani				= ank
		rb				= kr
	else
		railBarDepth	= bwr
		railBarDiam		= bdr
		railHeight		= hrr
		railBarThk		= fthr
		railBarType		= btypr_m
		railFrameThk	= fthr
		railDist		= dsr
		railType_m		= rightRailType_m
		railPostDiam	= pdr
		railPostWidth	= pwr
		railPostThk		= pthr
		railPostType	= ptr_m
		barNumber		= nbr
		iBalusterStyle	= btr_m
		railFramesWSide	= fswr
		railFramesWTop	= ftwr
		railFramesWBot	= fbwr
		railBarHeight	= bhr
		railBarFillThk	= bthr
		balusterDist	= abdistr
		railFrameMat	= fmatr
		railBaluFillMat	= bmatr
		railPostMat		= pmatr
		balusterNumber	= nbtr
		railFillDist	= fdfr
!!!		railPostBaseType= gs_PostBaseTypeR_m
		railDistFromHr	= sbhr
!!!		railPostBaseOv	= gs_PostBaseOverhangR
		handRailType	= hrtr_m
		handRailWidth	= hrwr
		handRailDiam	= hrdr
		handRailHeight	= hrhr
		ani				= ann
		rb				= rr
	endif

	call "stairRails_m" parameters	railType_m				= railType_m,
									iStairType				= 2,
									bEnableWired02Rail		= 0,
									bEnableNonVerticalRail	= 0,
									additionXComplex		= additionXComplex,
									additionZComplex		= additionZComplex,
									ptyp_m					= 3,
									ani						= ani,
									ab						= fordul*360,
									rb						= rb,
									rom_m					= 1,
									rmm_m					= 1,
									lraSimple				= lraSimple,
									lraComplex				= lraComplex,
									railHeight				= railHeight,
									railDist				= railDist,
									gs_detlevel_3D_m		= gs_detlevel_3D_m,
									gs_cont_pen				= gs_cont_pen,
									res						= res,
									rescs					= rescs,
									gs_shadow				= gs_shadow,
									railFrameThk			= railFrameThk,
									railFramesWSide			= railFramesWSide,
									railFramesWTop			= railFramesWTop,
									railFramesWBot			= railFramesWBot,
									railBarType				= railBarType,
									railBarDepth			= railBarDepth,
									railBarFillThk			= railBarFillThk,
									railBarDiam				= railBarDiam,
									balusterDist			= balusterDist,
									railFrameMat			= railFrameMat,
									railBaluFillMat			= railBaluFillMat,
									barNumber				= barNumber,
									railBarHeight			= railBarHeight,
									railFillDist			= railFillDist,
									handRailType			= handRailType,
									handRailDiam			= handRailDiam,
									handRailWidth			= handRailWidth,
									handRailHeight			= handRailHeight,
									hrovL					= hrovL,
									hrovR					= hrovR,
									iBalusterStyle			= iBalusterStyle,
									railPostDiam			= railPostDiam,
									railPostWidth			= railPostWidth,
									railPostThk				= railPostThk,
									railPostType			= railPostType,
									postNumber				= postNumber,
									railPostMat				= railPostMat,
									iParamInputType			= 1,
									balusterNumber			= balusterNumber,
!!!									railPostBaseType		= railPostBaseType,
!!!									railPostBaseOv			= railPostBaseOv,
									railDistFromHr			= railDistFromHr
return


]]>
</Script_3D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_2D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[

! ---------- Hotspots ----------[

		!!! FlightUNID=1		!!! 1,100
		!!! RailUNID=1000		!!! 1000,1100,1200,1300,1400,1500
		!!! BreakUNID=2000		!!! NO
		!!! StartSymbUNID=3000	!!! 3000,3100
		!!! ArrowUNID=4000		!!! 4000,4100
		!!! RiseRunUNID=5000	!!! 5000
		!!! UpDownUNID=6000		!!! 6000
		!!! NumUNID=7000		!!! NO

! ---------- Hotspots ----------]

! ==============================================================================
! Settings of 2D Symbol Type
! Stories, where the object is placed on
! ==============================================================================

dim drawPart[3]		! 1 - lower,  2 - upper,  3 - full
dim drawDashed[3]	! 1 - lower,  2 - upper,  3 - full
dim drawSteps[3]	! 1 - lower,  2 - upper,  3 - full
dim drawDetails[3]	! 1 - lower,  2 - upper,  3 - full
dim drawNum[3]		! 1 - lower,  2 - upper,  3 - full

drawPart[1] 	= 0	! Lower
drawPart[2] 	= 0	! Upper
drawPart[3] 	= 0	! Full
drawDashed[1] 	= 0	! Lower
drawDashed[2] 	= 0	! Upper
drawDashed[3] 	= 0	! Full
drawSteps[1] 	= 0	! Lower
drawSteps[2] 	= 0	! Upper
drawSteps[3] 	= 0	! Full
drawDetails[1] 	= 0	! Lower
drawDetails[2] 	= 0	! Upper
drawDetails[3]	= 0	! Full
drawNum[1] 		= 0	! Lower
drawNum[2] 		= 0	! Upper
drawNum[3]		= 0	! Full

! ---------- Story Sensitive ----------[

abovestory = 0
belowstory = 0
homeStory = 0
if gs_StorySensitive then
	if GLOB_CH_STORY_DIST > EPS  then
		abovestory = 1
	else
		if GLOB_CH_STORY_DIST < -EPS  then
			belowstory = 1
		endif
	endif
endif
if not(abovestory) & not(belowstory) then homeStory = 1

bCarriageLineExist		= bShowCarriage and bEnableCarriageLine and (GLOB_SCALE <= iShowCarriageUpTo | iShowCarriageUpTo = 1)

! ---------- Story Sensitive ----------]

_iSymbolType = 1
if gs_detlevel_2D_m = DET2D_SCALESENSITIVE then
	if GLOB_SCALE <= _iScaleMD then									!! Detailed Scale
		_iSymbolType = iEnabledSymbolTypes[iSymbolGroup][3]
	else
		if GLOB_SCALE > _iScaleMD & GLOB_SCALE <= _iScaleSM then	!! Middle Scale
			_iSymbolType = iEnabledSymbolTypes[iSymbolGroup][2]
		else														!! Simple Scale
			_iSymbolType = iEnabledSymbolTypes[iSymbolGroup][1]
		endif
	endif
else
	_iSymbolType = gs_SymbolType_m
endif

if _iSymbolType = 1 then
	drawPart[3]		= 1		! Full
	drawDashed[3] 	= 1		! Full
	! Railing
	rail_m = RAILPOS_NONE
endif

if _iSymbolType = 2 then
	drawPart[3]	= 1		! Full
	! Railing
	rail_m = RAILPOS_NONE
ENDIF

if _iSymbolType = 3 then
	drawPart[1]	= 1
	! Railing
	rail_m = RAILPOS_NONE
ENDIF

if _iSymbolType = 4 then
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
	drawDashed[2] = 1	! Upper
	! Railing
	rail_m = RAILPOS_NONE
ENDIF

if _iSymbolType = 5 then
	drawPart[1]	= 1	! Lower
	drawPart[2]	= 1	! Upper
	! Railing
	rail_m = RAILPOS_NONE
ENDIF

if _iSymbolType = 6 then
	drawPart[3]	= 1		! Full
	drawDashed[3] = 1	! Full
	drawSteps[3] = 1	! Full
	! Railing
	rail_m = RAILPOS_NONE
ENDIF

if _iSymbolType = 7 then
	drawPart[3]	= 1		! Full
	drawSteps[3] = 1	! Full
	! Railing
	rail_m = RAILPOS_NONE
ENDIF

if _iSymbolType = 8 then
	drawPart[1]	= 1		! Lower
	drawSteps[1] = 1	! Lower
	! Railing
	rail_m = RAILPOS_NONE
ENDIF

if _iSymbolType = 9 then
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
	drawDashed[2] = 1	! Upper
	drawSteps[1] = 1	! Lower
	! Railing
	rail_m = RAILPOS_NONE
ENDIF

if _iSymbolType = 10 then
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
	drawSteps[1] = 1	! Lower
	! Railing
	rail_m = RAILPOS_NONE
ENDIF

if _iSymbolType = 11 then
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
	drawDashed[2] = 1	! Upper
	drawSteps[1] = 1	! Lower
	drawSteps[2] = 1	! Upper
	! Railing
	rail_m = RAILPOS_NONE
ENDIF

if _iSymbolType = 12 then
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
	drawSteps[1] = 1	! Lower
	drawSteps[2] = 1	! Upper
	! Railing
	rail_m = RAILPOS_NONE
ENDIF

if _iSymbolType = 13 then
	drawPart[3]	= 1		! Full
	drawDashed[3] = 1	! Full
	drawSteps[3] = 1	! Full
	drawDetails[3] = 1	! Full
ENDIF

if _iSymbolType = 14 then
	drawPart[3]	= 1		! Full
	drawSteps[3] = 1	! Full
	drawDetails[3] = 1	! Full
ENDIF

if _iSymbolType = 15 then
	drawPart[1]	= 1		! Lower
	drawSteps[1] = 1	! Lower
	drawDetails[1] = 1	! Lower
	drawSteps[2] = 1	! Upper
endif

if _iSymbolType = 16 then
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
	drawDashed[2] = 1	! Upper
	drawSteps[1] = 1	! Lower
	drawDetails[1] = 1	! Lower
ENDIF

if _iSymbolType = 17 then
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
	drawSteps[1] = 1	! Lower
	drawDetails[1] = 1	! Lower
ENDIF

if _iSymbolType = 18 then
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
	drawDashed[2] = 1	! Upper
	drawSteps[1] = 1	! Lower
	drawSteps[2] = 1	! Upper
	drawDetails[1] = 1	! Lower
	drawDetails[2] = 1	! Upper
ENDIF

if _iSymbolType = 19 then
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
	drawDashed[2] = 1	! Upper
	drawSteps[1] = 1	! Lower
	drawSteps[2] = 1	! Upper
	drawDetails[1] = 1	! Lower
ENDIF

if _iSymbolType = 20 then
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
	drawSteps[1] = 1	! Lower
	drawSteps[2] = 1	! Upper
	drawDetails[1] = 1	! Lower
	drawDetails[2] = 1	! Upper
endif

! Numbering
if bShowNumbering then
	drawNum[1]		= drawPart[1] & (not(drawPart[2]) | (drawPart[2] & gs_NumBelow))
	drawNum[2]		= drawPart[2] & (not(drawPart[1]) | (drawPart[1] & gs_NumAbove))
	drawNum[3]		= drawPart[3]
endif

! Nosing
if not(covery) & ( not(cover) | ABS(ns) < EPS) then
	drawDetails[1] = 0
	drawDetails[2] = 0
	drawDetails[3] = 0
endif

! Buggy !!!!!!!!!!!!!!!!!!!!!!!!!!
if not(drawDetails[1]) & not(drawDetails[2]) & not(drawDetails[3]) then
	cover = 0		! Tread Cover
	covery = 0		! Riser Cover
	ns = 0			! Nosing Length
	covthicky = 0	! Riser Thickness
endif
! Buggy !!!!!!!!!!!!!!!!!!!!!!!!!!

! ---------- Stories below the home story ---------- [

if belowstory then
	drawPart[1]		= 0
	drawPart[2]		= 0
	drawPart[3]		= 1

	drawDashed[1]		= 0
	drawDashed[2]		= 0
	drawDashed[3]		= 1

	drawSteps[1] = 0
	drawSteps[2] = 0
	drawSteps[3] = 0

	drawDetails[1] = 0
	drawDetails[2] = 0
	drawDetails[3] = 0

	drawNum[1] = 0
	drawNum[2] = 0
	drawNum[3] = 0

	walkl			= 0
	gs_fill_type	= 65
	gs_back_pen		= 0
	rail_m = RAILPOS_NONE
	bShowRiseAndRunText				= 0

endif

! ---------- Stories above the home story ---------- [
if aboveStory then
	drawPart[1] = 0
	drawPart[2] = 0
	drawPart[3] = 0

	if gs_TreadStUp then
		drawSteps[1] = 1
		drawSteps[2] = 1
		drawSteps[3] = 1

		if drawDetails[1] | drawDetails[3] then
			drawDetails[1] = 1
			drawDetails[2] = 1
			drawDetails[3] = 1
		endif

	else
		drawSteps[1] = 0
		drawSteps[2] = 0
		drawSteps[3] = 0

		drawDetails[1] = 0
		drawDetails[2] = 0
		drawDetails[3] = 0
	endif

	if gs_BreaklineStUp = 0 then
		drawPart[3] = 1
	else
		if gs_LowerPartStUp then
			drawPart[1] = 1
		endif
		if gs_UpperPartStUp then
			drawPart[2] = 1
		endif
	endif

	if gs_numaStUp then
		drawNum[1]		= drawPart[1] & (not(drawPart[2]) | drawPart[2])
		drawNum[2]		= drawPart[2] & (not(drawPart[1]) | drawPart[1])
		drawNum[3]		= drawPart[3]
	else
		drawNum[1] = 0
		drawNum[2] = 0
		drawNum[3] = 0
	endif

	if gs_txStUp then
		bShowRiseAndRunText = 1
	else
		bShowRiseAndRunText = 0
	endif

endif


	! Arrow Size
		IF td> 0.26 THEN
		ArrowDist=0.2
		ELSE
		ArrowDist=td*SIN(45)
		ENDIF


	PEN gs_cont_pen
	FILL gs_fill_type

	IF rnu*fokszog <= 360 | \
		(_iSymbolType = 3 & drawPart[1] & not(drawPart[2]) ) | \
		(_iSymbolType = 8 & drawPart[1] & not(drawPart[2]) ) | \
		(_iSymbolType = 15 & drawPart[1] & not(drawPart[2]) ) THEN

		IF iFirstTread = FIRSTTREAD_ABOVE_FLOOR_LEVEL THEN
			fsz=fokszog
			temp_wldofsz=0
		ELSE
			fsz=0
			temp_wldofsz=fokszog
		ENDIF

		! Number of Steps
		temp_rnu=rnu
		IF iFirstTread = FIRSTTREAD_AT_FLOOR_LEVEL AND iTopTread = TOPTREAD_BELOW_FLOOR_LEVEL THEN temp_rnu=rnu-1
		IF iFirstTread = FIRSTTREAD_ABOVE_FLOOR_LEVEL AND iTopTread = TOPTREAD_AT_FLOOR_LEVEL THEN temp_rnu=rnu-1
		IF iFirstTread = FIRSTTREAD_ABOVE_FLOOR_LEVEL AND iTopTread = TOPTREAD_BELOW_FLOOR_LEVEL THEN temp_rnu=rnu-2
		temp_wldornu=temp_rnu
		IF iTopTread = TOPTREAD_AT_FLOOR_LEVEL THEN temp_wldornu=temp_rnu-1

		FlightUNID=1

		! Bottom Step/Right
		HOTSPOT2 0,0, FlightUNID, r,1 : FlightUNID=FlightUNID+1
		HOTSPOT2 -r*COS(fsz),-r*SIN(fsz), FlightUNID, r,3 : FlightUNID=FlightUNID+1
		HOTSPOT2 r*COS(fsz),r*SIN(fsz), FlightUNID, r,2 : FlightUNID=FlightUNID+1

		! Bottom Step/Left
		HOTSPOT2 (r)*COS(fsz),(r)*SIN(fsz), FlightUNID, flw,1 : FlightUNID=FlightUNID+1
		HOTSPOT2 (r+1)*COS(fsz),(r+1)*SIN(fsz), FlightUNID, flw,3 : FlightUNID=FlightUNID+1
		HOTSPOT2 (r-flw)*COS(fsz),(r-flw)*SIN(fsz), FlightUNID, flw,2 : FlightUNID=FlightUNID+1

		! Top Step/Right
		ROT2 (temp_rnu)*fokszog
			HOTSPOT2 0,0, FlightUNID, r,1 : FlightUNID=FlightUNID+1
			HOTSPOT2 -r*COS(fsz),-r*SIN(fsz), FlightUNID, r,3 : FlightUNID=FlightUNID+1
			HOTSPOT2 r*COS(fsz),r*SIN(fsz), FlightUNID, r,2 : FlightUNID=FlightUNID+1
		DEL 1

		! Top Step/Left
		ROT2 (temp_rnu)*fokszog
			HOTSPOT2 (r)*COS(fsz),(r)*SIN(fsz), FlightUNID, flw,1 : FlightUNID=FlightUNID+1
			HOTSPOT2 (r+1)*COS(fsz),(r+1)*SIN(fsz), FlightUNID, flw,3 : FlightUNID=FlightUNID+1
			HOTSPOT2 (r-flw)*COS(fsz),(r-flw)*SIN(fsz), FlightUNID, flw,2 : FlightUNID=FlightUNID+1
		DEL 1

		! Walking Line at Bottom Step
		ROT2 temp_wldofsz
			HOTSPOT2 0,0, FlightUNID, wldo,1 : FlightUNID=FlightUNID+1
			HOTSPOT2 -wldo*COS(fsz),-wldo*SIN(fsz), FlightUNID, wldo,3 : FlightUNID=FlightUNID+1
			HOTSPOT2 wldo*COS(fsz),wldo*SIN(fsz), FlightUNID, wldo,2 : FlightUNID=FlightUNID+1
		DEL 1

		! Walking Line at Top Step
		ROT2 (temp_wldornu)*fokszog
			HOTSPOT2 0,0, FlightUNID, wldo,1 : FlightUNID=FlightUNID+1
			HOTSPOT2 -wldo*COS(fsz),-wldo*SIN(fsz), FlightUNID, wldo,3 : FlightUNID=FlightUNID+1
			HOTSPOT2 wldo*COS(fsz),wldo*SIN(fsz), FlightUNID, wldo,2 : FlightUNID=FlightUNID+1
		DEL 1

	ELSE
		fsz=fokszog
		IF iTopTread = TOPTREAD_AT_FLOOR_LEVEL THEN temp_rnu360=rnu-1
		IF iTopTread = TOPTREAD_BELOW_FLOOR_LEVEL THEN temp_rnu360=rnu-2

		FlightUNID=100

		! Bottom Step/Right
		HOTSPOT2 0,0, FlightUNID, r,1 : FlightUNID=FlightUNID+1
		HOTSPOT2 -r*COS(fsz),-r*SIN(fsz), FlightUNID, r,3 : FlightUNID=FlightUNID+1
		HOTSPOT2 r*COS(fsz),r*SIN(fsz), FlightUNID, r,2 : FlightUNID=FlightUNID+1

		! Bottom Step/Left
		HOTSPOT2 (r)*COS(fsz),(r)*SIN(fsz), FlightUNID, flw,1 : FlightUNID=FlightUNID+1
		HOTSPOT2 (r+1)*COS(fsz),(r+1)*SIN(fsz), FlightUNID, flw,3 : FlightUNID=FlightUNID+1
		HOTSPOT2 (r-flw)*COS(fsz),(r-flw)*SIN(fsz), FlightUNID, flw,2 : FlightUNID=FlightUNID+1

		! Top Step/Right
		ROT2 (temp_rnu360)*fokszog
			HOTSPOT2 0,0, FlightUNID, r,1 : FlightUNID=FlightUNID+1
			HOTSPOT2 -r*COS(fsz),-r*SIN(fsz), FlightUNID, r,3 : FlightUNID=FlightUNID+1
			HOTSPOT2 r*COS(fsz),r*SIN(fsz), FlightUNID, r,2 : FlightUNID=FlightUNID+1

!			SET LINE_TYPE solid_line
!			LINE2 r*COS(fsz),r*SIN(fsz),(r-flw)*COS(fsz),(r-flw)*SIN(fsz)
		DEL 1

		! Top Step/Left
		ROT2 (temp_rnu360)*fokszog
			HOTSPOT2 (r)*COS(fsz),(r)*SIN(fsz), FlightUNID, flw,1 : FlightUNID=FlightUNID+1
			HOTSPOT2 (r+1)*COS(fsz),(r+1)*SIN(fsz), FlightUNID, flw,3 : FlightUNID=FlightUNID+1
			HOTSPOT2 (r-flw)*COS(fsz),(r-flw)*SIN(fsz), FlightUNID, flw,2 : FlightUNID=FlightUNID+1
		DEL 1

		! Walking Line at Bottom Step
		ROT2 fokszog
			HOTSPOT2 0,0, FlightUNID, wldo,1 : FlightUNID=FlightUNID+1
			HOTSPOT2 -1,0, FlightUNID, wldo,3 : FlightUNID=FlightUNID+1
			HOTSPOT2 wldo,0, FlightUNID, wldo,2 : FlightUNID=FlightUNID+1
		DEL 1

	ENDIF


	! ------------------------------------------------------------------------------
	! Nosing Length
	! ------------------------------------------------------------------------------

	Nosing = ns * cover + covthicky * covery
	! cover		! Tread Cover
	! covery	! Riser Cover
	! ns		! Nosing Length
	! covthicky	! Riser Thickness

	! ------------------------------------------------------------------------------
	! BREAK LINE Position
	! ------------------------------------------------------------------------------

	IF iFirstTread = FIRSTTREAD_ABOVE_FLOOR_LEVEL AND rnu*fokszog <= 360 THEN
		numSteptoBreakRight=INT(gs_BreakHeight/th) 	!!! Num. of Steps on Right Side
		i1ZZYZX=INT(ZZYZX/th)		!!! Num. of Steps if value of ZZYZX is less than BREAK LINE
		ELSE
		numSteptoBreakRight=INT(gs_BreakHeight/th)+1 !!! Num. of Steps on Right Side
		i1ZZYZX=INT(ZZYZX/th)+1		!!! Num. of Steps if value of ZZYZX is less than BREAK LINE
	ENDIF
	numSteptoBreakLeft=numSteptoBreakRight+1						!!! Num. of Steps on Left Side

	BreakNum=INT(gs_BreakHeight/th)

	if ZZYZX <= (BreakNum)*th & not(drawPart[3]) then
		drawPart[3] = 1		! IF value of ZZYZX is less than BREAK LINE
		drawPart[1] = 0
		drawPart[2] = 0

		drawSteps[3] = drawSteps[1]		! IF value of ZZYZX is less than BREAK LINE
		drawSteps[1] = 0
		drawSteps[2] = 0

		drawDetails[3] = drawDetails[1]		! IF value of ZZYZX is less than BREAK LINE
		drawDetails[1] = 0
		drawDetails[2] = 0

		drawNum[3] = drawNum[1]	| (aboveStory & not(drawPart[1]) & drawNum[2])	! IF value of ZZYZX is less than BREAK LINE
		drawNum[1] = 0
		drawNum[2] = 0
	endif

	! ------------------------------------------------------------------------------
	! Stair Slab Contour And Fill
	! ------------------------------------------------------------------------------

	! Fill above Break Line
	IF gs_FillAbove=1 THEN
		FullFill=2+64
		temp_FillTypeAbove=gs_fill_type
		temp_BackPen=gs_back_pen
	ELSE
		FullFill=0
		temp_FillTypeAbove=gs_FillTypeAbove	! because of Area Fill Selection
		temp_BackPen=0						! because of Area Fill Selection
	ENDIF

	! Nosing Values
	! Angle
	NosingOuterAngle=360*(Nosing)/(2*r*pi)
	NosingInnerAngle=360*(Nosing)/(2*(r-flw)*pi)

	! Nosing Coordinates at First Step
	NosingInnerY=(r-flw)*SIN(NosingInnerAngle)
	IF NosingInnerAngle = 0 THEN
		NosingInnerX=0
		ELSE
		NosingInnerX=NosingInnerY/TAN(NosingInnerAngle)
	ENDIF
	NosingOuterY=(r)*SIN(NosingOuterAngle)
	IF NosingOuterAngle = 0 THEN
		NosingOuterX=0
		ELSE
		NosingOuterX=NosingOuterY/TAN(NosingOuterAngle)
	ENDIF


	! ==========================================================================
	! Stair Slab Contour
	! ==========================================================================

	DRAWINDEX 10


	! --------------------------------------------------------------------------
	! ANGLE <= 360
	! --------------------------------------------------------------------------
	IF rnu*fokszog <= 360 | \
		(_iSymbolType = 3 & drawPart[1] & not(drawPart[2]) ) | \
		(_iSymbolType = 8 & drawPart[1] & not(drawPart[2]) ) | \
		(_iSymbolType = 15 & drawPart[1] & not(drawPart[2]) ) THEN

			IF iFirstTread = FIRSTTREAD_ABOVE_FLOOR_LEVEL THEN ROT2 fokszog

			IF iFirstTread = FIRSTTREAD_ABOVE_FLOOR_LEVEL THEN rnu=rnu-1
			IF iTopTread = TOPTREAD_BELOW_FLOOR_LEVEL THEN rnu=rnu-1


			PEN gs_cont_pen
			FILL gs_fill_type

			! Stair Slab FILL
			IF drawPart[3] THEN

					if aboveStory then
						PEN gs_LinePenStUp
						LINE_TYPE gs_LineTypeStUp
					else
						if drawDashed[3] then
							PEN gs_DashLinePen
							LINE_TYPE dash_line
						else
							PEN gs_cont_pen
							LINE_TYPE solid_line
						endif
					endif
					POLY2_b 9, 1+2+64, gs_fill_pen, gs_back_pen,
						r-flw,0,1,
						0,0,900,
						0,rnu*fokszog, 4000,
						(r-flw)*COS(rnu*fokszog),(r-flw)*SIN(rnu*fokszog),0,
						(r)*COS(rnu*fokszog),(r)*SIN(rnu*fokszog),1,
						0,0,900,
						0,-rnu*fokszog,4000,
						r,0,0,
						r-flw,0,-1

					IF not(drawDetails[3]) THEN
						LINE2 r-flw,0,r,0
						LINE2 (r-flw)*COS(rnu*fokszog),(r-flw)*SIN(rnu*fokszog),(r)*COS(rnu*fokszog),(r)*SIN(rnu*fokszog)
					ENDIF

					HOTLINE2 r-flw,0,r,0
					HOTLINE2 (r-flw)*COS(rnu*fokszog),(r-flw)*SIN(rnu*fokszog),(r)*COS(rnu*fokszog),(r)*SIN(rnu*fokszog)

			ELSE

				IF drawPart[1] THEN
					if aboveStory then
						PEN gs_LinePenStUp
						LINE_TYPE gs_LineTypeStUp
					else
						if drawDashed[1] then
							PEN gs_DashLinePen
							LINE_TYPE dash_line
						else
							PEN gs_cont_pen
							LINE_TYPE solid_line
						endif
					endif
					POLY2_b 7, 1+2+64, gs_fill_pen, gs_back_pen,
						r-flw,0,1,
						0,0,900,
						0,numSteptoBreakRight*fokszog, 4000,
						r*COS(numSteptoBreakRight*fokszog), r*SIN(numSteptoBreakRight*fokszog),1,
						0,0,900,
						0,-numSteptoBreakRight*fokszog,4000,
						r-flw,0,-1

					IF not(drawSteps[1]) THEN LINE2 (r-flw)*COS(numSteptoBreakRight*fokszog), (r-flw)*SIN(numSteptoBreakRight*fokszog),r*COS(numSteptoBreakRight*fokszog), r*SIN(numSteptoBreakRight*fokszog)
					IF not(drawDetails[1]) THEN LINE2 r-flw,0,r,0  !!Type<13 Line at Bottom Step
					HOTLINE2 r-flw,0,r,0
					HOTLINE2 (r-flw)*COS(numSteptoBreakRight*fokszog),(r-flw)*SIN(numSteptoBreakRight*fokszog),(r)*COS(numSteptoBreakRight*fokszog),(r)*SIN(numSteptoBreakRight*fokszog)
				ENDIF

				IF drawPart[2] THEN

						if aboveStory then
							PEN gs_LinePenStUp
							LINE_TYPE gs_LineTypeStUp
						else
							if drawDashed[2] then
								PEN gs_DashLinePen
								LINE_TYPE dash_line
							else
								PEN gs_cont_pen
								LINE_TYPE solid_line
							endif
						endif

						FILL temp_FillTypeAbove

						POLY2_b 9, 1+FullFill+64, gs_fill_pen, temp_BackPen,
							(r-flw)*COS(numSteptoBreakRight*fokszog), (r-flw)*SIN(numSteptoBreakRight*fokszog),1,
							0,0,900,
							0,(rnu-numSteptoBreakRight)*fokszog, 4000,
							(r-flw)*COS(rnu*fokszog),(r-flw)*SIN(rnu*fokszog),1,
							(r)*COS(rnu*fokszog),(r)*SIN(rnu*fokszog),1,
							0,0,900,
							0,-(rnu-numSteptoBreakRight)*fokszog,4000,
							(r)*COS(numSteptoBreakRight*fokszog), (r)*SIN(numSteptoBreakRight*fokszog),0,
							(r-flw)*COS(numSteptoBreakRight*fokszog), (r-flw)*SIN(numSteptoBreakRight*fokszog),-1

						IF not(drawDetails[2]) THEN LINE2 (r-flw)*COS(rnu*fokszog),(r-flw)*SIN(rnu*fokszog),(r)*COS(rnu*fokszog),(r)*SIN(rnu*fokszog)
						HOTLINE2 (r-flw)*COS(rnu*fokszog),(r-flw)*SIN(rnu*fokszog),(r)*COS(rnu*fokszog),(r)*SIN(rnu*fokszog)

						IF not(drawPart[1]) then LINE2 (r-flw)*COS(numSteptoBreakRight*fokszog), (r-flw)*SIN(numSteptoBreakRight*fokszog),r*COS(numSteptoBreakRight*fokszog), r*SIN(numSteptoBreakRight*fokszog)

					FILL gs_fill_type
				ENDIF

			ENDIF

			! Nosing
			IF (drawPart[1] & drawDetails[1]) | (drawPart[3] & drawDetails[3]) THEN

				if aboveStory then
					PEN gs_LinePenStUp
					LINE_TYPE gs_LineTypeStUp
				else
					if drawDashed[1] | drawDashed[3] then
						PEN gs_DashLinePen
						LINE_TYPE dash_line
					else
						PEN gs_cont_pen
						LINE_TYPE solid_line
					endif
				endif
				POLY2_b 7, 1+2+64, gs_fill_pen, gs_back_pen,
					r-flw,0,1,
					0,0,900,
					0,-NosingInnerAngle, 4000,
					(r)*COS(NosingOuterAngle),-(r)*SIN(NosingOuterAngle),1,
					0,0,900,
					0,NosingOuterAngle,4000,
					r-flw,0,-1
			ENDIF

			endp=rnu

		! CONTOUR HOTLINE

		IF drawPart[2] THEN
			HOTARC2 0,0,(r-flw),0,rnu*fokszog
			HOTARC2 0,0,r,0,rnu*fokszog
			ELSE
			HOTARC2 0,0,(r-flw),0,numSteptoBreakRight*fokszog
			HOTARC2 0,0,r,0,numSteptoBreakRight*fokszog
		ENDIF

		IF iFirstTread = FIRSTTREAD_ABOVE_FLOOR_LEVEL THEN DEL 1

	! --------------------------------------------------------------------------
	! ANGLE > 360
	! --------------------------------------------------------------------------
	ELSE	! IF 2D Symbol is a Circle


		PEN gs_cont_pen
		FILL gs_fill_type

		IF drawPart[3] THEN

			if aboveStory then
				PEN gs_LinePenStUp
				LINE_TYPE gs_LineTypeStUp
			else
				if drawDashed[3] then
					PEN gs_DashLinePen
					LINE_TYPE dash_line
				else
					PEN gs_cont_pen
					LINE_TYPE solid_line
				endif
			endif
			!!! rnu*fokszog > 360 THEN
			POLY2_b 3, 1+2+64, gs_fill_pen, gs_back_pen,
				0,0,900,
				r,360,4001,
				r-flw,360,4079
			LINE2 (r-flw)*COS(fokszog),(r-flw)*SIN(fokszog),(r)*COS(fokszog),(r)*SIN(fokszog)

		ELSE

			IF drawPart[1] THEN
				if aboveStory then
					PEN gs_LinePenStUp
					LINE_TYPE gs_LineTypeStUp
				else
					if drawDashed[1] then
						PEN gs_DashLinePen
						LINE_TYPE dash_line
					else
						PEN gs_cont_pen
						LINE_TYPE solid_line
					endif
				endif

				FILL gs_fill_type

				POLY2_b 9, 1+2+64, gs_fill_pen, gs_back_pen,
					(r-flw)*COS(fokszog),(r-flw)*SIN(fokszog),1,
					0,0,900,
					0,(numSteptoBreakRight-1)*fokszog, 4000,
					(r-flw)*COS(numSteptoBreakRight*fokszog), (r-flw)*SIN(numSteptoBreakRight*fokszog),0,
					r*COS(numSteptoBreakRight*fokszog), r*SIN(numSteptoBreakRight*fokszog),1,
					0,0,900,
					0,-(numSteptoBreakRight-1)*fokszog,4000,
					(r)*COS(fokszog),(r)*SIN(fokszog),0,
					(r-flw)*COS(fokszog),(r-flw)*SIN(fokszog),-1

				IF not(drawSteps[1]) THEN
					LINE2 (r-flw)*COS(fokszog),(r-flw)*SIN(fokszog),(r)*COS(fokszog),(r)*SIN(fokszog)
					LINE2 (r-flw)*COS(numSteptoBreakRight*fokszog), (r-flw)*SIN(numSteptoBreakRight*fokszog),r*COS(numSteptoBreakRight*fokszog), r*SIN(numSteptoBreakRight*fokszog)
				ENDIF
			ENDIF

			IF drawPart[2] THEN
				if aboveStory then
					PEN gs_LinePenStUp
					LINE_TYPE gs_LineTypeStUp
				else
					if drawDashed[2] then
						PEN gs_DashLinePen
						LINE_TYPE dash_line
					else
						PEN gs_cont_pen
						LINE_TYPE solid_line
					endif
				endif

				FILL temp_FillTypeAbove

				alphaStart =  fokszog
				alphaBegin =  numSteptoBreakRight * fokszog
				alphaEnd	= rnu * fokszog

				if abs(alphaEnd-alphaBegin) < 360 - eps | drawPart[1] then
					if not(drawPart[1]) then
						alphaUpperPart = alphaEnd - alphaBegin
						alphaClosedLine = alphaEnd
						mask = 1
					else
						alphaUpperPart = 360 - alphaBegin + alphaStart
						alphaClosedLine = fokszog
						mask = 0
					endif

					POLY2_b 9, 1+FullFill+64, gs_fill_pen, temp_BackPen,
						(r-flw)*COS(alphaBegin),(r-flw)*SIN(alphaBegin),	1,
						0,						0,							900,
						0,						alphaUpperPart,				4000,
						(r-flw)*COS(alphaClosedLine),	(r-flw)*SIN(alphaClosedLine),		mask,
						(r)*COS(alphaClosedLine),		(r)*SIN(alphaClosedLine),			1,
						0,						0,							900,
						0,						-alphaUpperPart,			4000,
						(r)*COS(alphaBegin),	(r)*SIN(alphaBegin),		0,
						(r-flw)*COS(alphaBegin),(r-flw)*SIN(alphaBegin),	-1

					if not(drawPart[1]) then line2 (r-flw)*COS(alphaBegin),(r-flw)*SIN(alphaBegin),(r)*COS(alphaBegin),(r)*SIN(alphaBegin)

				else
					POLY2_b 3, 1+FullFill+64, gs_fill_pen, temp_BackPen,
						0,0,900,
						r,360,4001,
						r-flw,360,4079

					if not(drawSteps[2]) then line2 (r-flw)*COS(alphaEnd),(r-flw)*SIN(alphaEnd),(r)*COS(alphaEnd),(r)*SIN(alphaEnd)
				endif
			ENDIF

		ENDIF

		HOTARC2 0,0,(r-flw),0,360
		HOTARC2 0,0,r,0,360
	ENDIF


	!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	!!!!!!!!!!!!!!!!!!!!!!!!!! *** T R E A D S *** !!!!!!!!!!!!!!!!!!!!!!!

	IF iNoseType = NOSE_NORMAL THEN cns=Nosing ELSE cns=covthick

	!!!!!!!!!!!!!!!!!!!!!! *** ANGLE <= 360 *** !!!!!!!!!!!!!!!!!!!!
	!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	IF rnu*fokszog <= 360 | \
		(_iSymbolType = 3 & drawPart[1] & not(drawPart[2]) ) | \
		(_iSymbolType = 8 & drawPart[1] & not(drawPart[2]) ) | \
		(_iSymbolType = 15 & drawPart[1] & not(drawPart[2]) ) THEN

	IF iFirstTread = FIRSTTREAD_ABOVE_FLOOR_LEVEL THEN ROT2 fokszog
	IF drawPart[3] THEN

		IF drawSteps[3] THEN

			!!! *** T R E A D S
			if aboveStory then
				PEN gs_LinePenStUp
				LINE_TYPE gs_LineTypeStUp
			else
				if drawDashed[3] then
					PEN gs_DashLinePen
					LINE_TYPE dash_line
				else
					PEN gs_cont_pen
					LINE_TYPE solid_line
				endif
			endif
			FOR i=1 to endp-1
				dx=-(cns)*SIN(-i*fokszog)
				dy=-(cns)*COS(-i*fokszog)

				LINE2 (r-flw)*COS(i*fokszog)+dx, (r-flw)*SIN(i*fokszog)+dy,
					r*COS(i*fokszog)+dx, r*SIN(i*fokszog)+dy

				HOTLINE2 (r-flw)*COS(i*fokszog)+dx, (r-flw)*SIN(i*fokszog)+dy,
					r*COS(i*fokszog)+dx, r*SIN(i*fokszog)+dy
			NEXT i

			!!! *** N O S I N G
			IF drawDetails[3] THEN
				PEN gs_DashLinePen
				LINE_TYPE dash_line

				FOR i=0 to endp
					IF i=endp THEN
						if aboveStory then
							PEN gs_LinePenStUp
							LINE_TYPE gs_LineTypeStUp
						else
							if drawDashed[3] then
								PEN gs_DashLinePen
								LINE_TYPE dash_line
							else
								PEN gs_cont_pen
								LINE_TYPE solid_line
							endif
						endif
					endif

					LINE2 (r-flw)*COS(i*fokszog), (r-flw)*SIN(i*fokszog),
						r*COS(i*fokszog), r*SIN(i*fokszog)

				NEXT i
			ENDIF
		ENDIF

	ELSE

		IF (drawPart[1] & drawSteps[1]) THEN
			!!! *** T R E A D S
			if aboveStory then
				PEN gs_LinePenStUp
				LINE_TYPE gs_LineTypeStUp
			else
				if drawDashed[1] then
					PEN gs_DashLinePen
					LINE_TYPE dash_line
				else
					PEN gs_cont_pen
					LINE_TYPE solid_line
				endif
			endif
			FOR i=1 to numSteptoBreakRight
				dx=-(cns)*SIN(-i*fokszog)
				dy=-(cns)*COS(-i*fokszog)

				LINE2 (r-flw)*COS(i*fokszog)+dx, (r-flw)*SIN(i*fokszog)+dy,
					r*COS(i*fokszog)+dx, r*SIN(i*fokszog)+dy

				HOTLINE2 (r-flw)*COS(i*fokszog)+dx, (r-flw)*SIN(i*fokszog)+dy,
					r*COS(i*fokszog)+dx, r*SIN(i*fokszog)+dy
			NEXT i

			!!! *** N O S I N G
			IF drawDetails[1] THEN
				PEN gs_DashLinePen
				LINE_TYPE dash_line
				FOR i=0 to numSteptoBreakRight

					LINE2 (r-flw)*COS(i*fokszog), (r-flw)*SIN(i*fokszog),
						r*COS(i*fokszog), r*SIN(i*fokszog)

				NEXT i
			ENDIF
		ENDIF

		IF (drawPart[2] & drawSteps[2]) THEN

			!!! *** T R E A D S
			if aboveStory then
				PEN gs_LinePenStUp
				LINE_TYPE gs_LineTypeStUp
			else
				if drawDashed[2] then
					PEN gs_DashLinePen
					LINE_TYPE dash_line
				else
					PEN gs_cont_pen
					LINE_TYPE solid_line
				endif
			endif

			! Buggy !!!!!!!!!!!!
			if _iSymbolType <> 19 then
			! Buggy !!!!!!!!!!!!

				FOR i=numSteptoBreakLeft to endp-1
					dx=-(cns)*SIN(-i*fokszog)
					dy=-(cns)*COS(-i*fokszog)


					LINE2 (r-flw)*COS(i*fokszog)+dx, (r-flw)*SIN(i*fokszog)+dy,
						r*COS(i*fokszog)+dx, r*SIN(i*fokszog)+dy

					HOTLINE2 (r-flw)*COS(i*fokszog)+dx, (r-flw)*SIN(i*fokszog)+dy,
						r*COS(i*fokszog)+dx, r*SIN(i*fokszog)+dy
				NEXT i

			endif

			IF drawDetails[2] | _iSymbolType = 19 THEN
				!!! *** N O S I N G
				FOR i=numSteptoBreakLeft to endp
					PEN gs_DashLinePen
					LINE_TYPE dash_line


					IF i = endp THEN
						if aboveStory then
							PEN gs_LinePenStUp
							LINE_TYPE gs_LineTypeStUp
						else
							if drawDashed[2] then
								PEN gs_DashLinePen
								LINE_TYPE dash_line
							else
								PEN gs_cont_pen
								LINE_TYPE solid_line
							endif
						endif
					endif

					LINE2 (r-flw)*COS(i*fokszog), (r-flw)*SIN(i*fokszog),
						r*COS(i*fokszog), r*SIN(i*fokszog)

				NEXT i
			ENDIF

		ENDIF
	ENDIF
	IF iFirstTread = FIRSTTREAD_ABOVE_FLOOR_LEVEL THEN DEL 1

	!!!!!!!!!!!!!!!!!!!!!! *** ANGLE > 360 *** !!!!!!!!!!!!!!!!!!!!!
	!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	ELSE	!!! IF 2D Symbol is a Circle

	IF FRA(360/fokszog) >0.5 THEN !!! Last Step
		temp_360End=1
		ELSE
		temp_360End=0
	ENDIF

	IF drawPart[3] THEN

		IF drawSteps[3] THEN
			!!! *** T R E A D S
			if aboveStory then
				PEN gs_LinePenStUp
				LINE_TYPE gs_LineTypeStUp
			else
				if drawDashed[3] then
					PEN gs_DashLinePen
					LINE_TYPE dash_line
				else
					PEN gs_cont_pen
					LINE_TYPE solid_line
				endif
			endif
			FOR i=1 to 360/fokszog+temp_360End
				dx=-(cns)*SIN(-i*fokszog)
				dy=-(cns)*COS(-i*fokszog)

				LINE2 (r-flw)*COS(i*fokszog)+dx, (r-flw)*SIN(i*fokszog)+dy,
					r*COS(i*fokszog)+dx, r*SIN(i*fokszog)+dy

				HOTLINE2 (r-flw)*COS(i*fokszog)+dx, (r-flw)*SIN(i*fokszog)+dy,
					r*COS(i*fokszog)+dx, r*SIN(i*fokszog)+dy
			NEXT i

			!!! *** N O S I N G

			IF drawDetails[3] THEN
				PEN gs_DashLinePen
				LINE_TYPE dash_line
				FOR i=1 to 360/fokszog+temp_360End
					IF i=360/fokszog+temp_360End THEN PEN NosingPen
					IF i=360/fokszog+temp_360End THEN SET LINE_TYPE NosingLine

					LINE2 (r-flw)*COS(i*fokszog), (r-flw)*SIN(i*fokszog),
						r*COS(i*fokszog), r*SIN(i*fokszog)

				NEXT i
			ENDIF
		ENDIF

	ELSE

		IF drawPart[1] & drawSteps[1] THEN

			!!! *** T R E A D S
			if aboveStory then
				PEN gs_LinePenStUp
				LINE_TYPE gs_LineTypeStUp
			else
				if drawDashed[1] then
					PEN gs_DashLinePen
					LINE_TYPE dash_line
				else
					PEN gs_cont_pen
					LINE_TYPE solid_line
				endif
			endif
			FOR i=1 to numSteptoBreakRight
				dx=-(cns)*SIN(-i*fokszog)
				dy=-(cns)*COS(-i*fokszog)

				LINE2 (r-flw)*COS(i*fokszog)+dx, (r-flw)*SIN(i*fokszog)+dy,
					r*COS(i*fokszog)+dx, r*SIN(i*fokszog)+dy

				HOTLINE2 (r-flw)*COS(i*fokszog)+dx, (r-flw)*SIN(i*fokszog)+dy,
					r*COS(i*fokszog)+dx, r*SIN(i*fokszog)+dy
			NEXT i

			!!! *** N O S I N G
			IF drawDetails[1] THEN
				PEN gs_DashLinePen
				LINE_TYPE dash_line
				FOR i=1 to numSteptoBreakRight

					LINE2 (r-flw)*COS(i*fokszog), (r-flw)*SIN(i*fokszog),
						r*COS(i*fokszog), r*SIN(i*fokszog)

				NEXT i
			ENDIF
		ENDIF

		IF drawPart[2] & drawSteps[2] THEN
			! T R E A D S
			if aboveStory then
				PEN gs_LinePenStUp
				LINE_TYPE gs_LineTypeStUp
			else
				if drawDashed[2] then
					PEN gs_DashLinePen
					LINE_TYPE dash_line
				else
					PEN gs_cont_pen
					LINE_TYPE solid_line
				endif
			endif

			alphaStart =  fokszog
			alphaBegin =  numSteptoBreakRight * fokszog
			alphaEnd	= rnu * fokszog

			if abs(alphaEnd-alphaBegin) < 360 - eps | drawPart[1] then
				if not(drawPart[1]) then
					treadBegin = numSteptoBreakRight + 1
					treadEnd = rnu
				else
					treadBegin = numSteptoBreakRight + 1
					treadEnd = 360/fokszog
				endif
			else
				treadBegin = 1
				treadEnd = 360/fokszog
			endif

			! Buggy !!!!!!!!!!!!
			if _iSymbolType <> 19 then
			! Buggy !!!!!!!!!!!!

				FOR i = treadBegin to treadEnd

					dx=-(cns)*SIN(-i*fokszog)
					dy=-(cns)*COS(-i*fokszog)

					LINE2 (r-flw)*COS(i*fokszog)+dx, (r-flw)*SIN(i*fokszog)+dy,
						r*COS(i*fokszog)+dx, r*SIN(i*fokszog)+dy

					HOTLINE2 (r-flw)*COS(i*fokszog)+dx, (r-flw)*SIN(i*fokszog)+dy,
						r*COS(i*fokszog)+dx, r*SIN(i*fokszog)+dy
				NEXT i

			! Buggy !!!!!!!!!!!!
			endif
			! Buggy !!!!!!!!!!!!

			!!! *** N O S I N G

			IF drawDetails[2] | _iSymbolType = 19 THEN
				PEN gs_DashLinePen
				LINE_TYPE dash_line

				FOR i= treadBegin to treadEnd

					LINE2 (r-flw)*COS(i*fokszog), (r-flw)*SIN(i*fokszog),
						r*COS(i*fokszog), r*SIN(i*fokszog)

				NEXT i
			ENDIF

		ENDIF
	ENDIF

	ENDIF


	!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	!!!!!!!!*** ARROWHEAD / WALKING LINE / START END SYMBOL*** !!!!!!!!!
	!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

	IF walkl THEN
	DRAWINDEX 40

	IF rnu*fokszog <= 360| \
		(_iSymbolType = 3 & drawPart[1] & not(drawPart[2]) ) | \
		(_iSymbolType = 8 & drawPart[1] & not(drawPart[2]) ) | \
		(_iSymbolType = 15 & drawPart[1] & not(drawPart[2]) ) THEN


		IF iFirstTread = FIRSTTREAD_ABOVE_FLOOR_LEVEL THEN ROT2 fokszog

		!!! Start Point of Walking Lines
		IF iFirstTread = FIRSTTREAD_ABOVE_FLOOR_LEVEL THEN
			temp_fokszog=0
			temp_StartEndFokszog=0
		ELSE
			temp_fokszog=fokszog
			temp_StartEndFokszog=fokszog
		ENDIF

		IF iTopTread = TOPTREAD_BELOW_FLOOR_LEVEL THEN
			temp_endp=endp
		ELSE
			temp_endp=endp-1
		ENDIF

	ELSE
		temp_StartEndFokszog=fokszog
		temp_fokszog=fokszog
		temp_endp=rnu-1

	ENDIF



		!!!!!!!!!!!!!!!!!!!!!! ***	ARROWHEAD *** !!!!!!!!!!!!!!!!!!!!!!!!!!

		ArrowDist=gs_ArrowHalfWidth

		!!! ********** Arrowhead Contour Conditions
		IF arrow_style_m = ARROW_STYLE_1 OR arrow_style_m = ARROW_STYLE_2 OR arrow_style_m = ARROW_STYLE_3 THEN
			temp_ArrowMask=0
		else
			temp_ArrowMask=1
		ENDIF

		!!! ********** Arrowhead Contour Points Conditions
		IF arrow_style_m = ARROW_STYLE_1 OR arrow_style_m = ARROW_STYLE_4 OR arrow_style_m = ARROW_STYLE_7 THEN

			temp_HeadBelowX=(wldo)*COS((numSteptoBreakRight)*fokszog)
			temp_HeadBelowY=(wldo)*SIN((numSteptoBreakRight)*fokszog)
			temp_InnerBelowX=(r-flw)*COS((numSteptoBreakRight-1)*fokszog)
			temp_InnerBelowY=(r-flw)*SIN((numSteptoBreakRight-1)*fokszog)
			temp_OuterBelowX=(r)*COS((numSteptoBreakRight-1)*fokszog)
			temp_OuterBelowY=(r)*SIN((numSteptoBreakRight-1)*fokszog)

			temp_HeadAboveX=(wldo)*COS(INT(temp_endp)*fokszog)
			temp_HeadAboveY=(wldo)*SIN(INT(temp_endp)*fokszog)
			temp_InnerAboveX=(r-flw)*COS((INT(temp_endp)-1)*fokszog)
			temp_InnerAboveY=(r-flw)*SIN((INT(temp_endp)-1)*fokszog)
			temp_OuterAboveX=(r)*COS((INT(temp_endp)-1)*fokszog)
			temp_OuterAboveY=(r)*SIN((INT(temp_endp)-1)*fokszog)
		ENDIF

		IF arrow_style_m = ARROW_STYLE_2 OR arrow_style_m = ARROW_STYLE_5 OR arrow_style_m = ARROW_STYLE_8 THEN

			temp_HeadBelowX=(wldo)*COS((numSteptoBreakRight)*fokszog)
			temp_HeadBelowY=(wldo)*SIN((numSteptoBreakRight)*fokszog)
			temp_InnerBelowX=((wldo+R-flw)/2)*COS((numSteptoBreakRight-1)*fokszog)
			temp_InnerBelowY=((wldo+R-flw)/2)*SIN((numSteptoBreakRight-1)*fokszog)
			temp_OuterBelowX=((wldo+R)/2)*COS((numSteptoBreakRight-1)*fokszog)
			temp_OuterBelowY=((wldo+R)/2)*SIN((numSteptoBreakRight-1)*fokszog)

			temp_HeadAboveX=(wldo)*COS(INT(temp_endp)*fokszog)
			temp_HeadAboveY=(wldo)*SIN(INT(temp_endp)*fokszog)
			temp_InnerAboveX=((wldo+R-flw)/2)*COS((INT(temp_endp)-1)*fokszog)
			temp_InnerAboveY=((wldo+R-flw)/2)*SIN((INT(temp_endp)-1)*fokszog)
			temp_OuterAboveX=((wldo+R)/2)*COS((INT(temp_endp)-1)*fokszog)
			temp_OuterAboveY=((wldo+R)/2)*SIN((INT(temp_endp)-1)*fokszog)
		ENDIF

		IF arrow_style_m = ARROW_STYLE_3 OR arrow_style_m = ARROW_STYLE_6 OR arrow_style_m = ARROW_STYLE_9 THEN

			temp_HeadX=0
			temp_HeadY=0
			temp_InnerX=-ArrowDist
			temp_InnerY=-gs_ArrowHeight
			temp_OuterX=ArrowDist
			temp_OuterY=-gs_ArrowHeight
		ENDIF

		!!! ********** Arrowhead Fill Contour Points Conditions

		IF arrow_style_m = ARROW_STYLE_4 OR arrow_style_m = ARROW_STYLE_5 THEN
			temp_InnerBelowXFill=temp_InnerBelowX
			temp_InnerBelowYFill=temp_InnerBelowY
			temp_InnerAboveXFill=temp_InnerAboveX
			temp_InnerAboveYFill=temp_InnerAboveY
		ENDIF

		IF arrow_style_m = ARROW_STYLE_7 OR arrow_style_m = ARROW_STYLE_8 THEN
			temp_InnerBelowXFill=(wldo)*COS((numSteptoBreakRight-1)*fokszog)
			temp_InnerBelowYFill=(wldo)*SIN((numSteptoBreakRight-1)*fokszog)
			temp_InnerAboveXFill=(wldo)*COS(INT(temp_endp-1)*fokszog)
			temp_InnerAboveYFill=(wldo)*SIN(INT(temp_endp-1)*fokszog)
		ENDIF

		IF arrow_style_m = ARROW_STYLE_6 THEN
			temp_InnerXFill=temp_InnerX
		ENDIF

		IF arrow_style_m = ARROW_STYLE_9 THEN
			temp_InnerXFill=0
		ENDIF


		!!! ********** Arrowhead Symbols/ Contour and Fill

		PEN gs_wLinePen
		Fill gs_ArrowFill

		IF drawPart[3] | drawPart[2] THEN		!!! Above Break Line

			if aboveStory then
				LINE_TYPE gs_wLineTypeStUp
			else
				if drawDashed[3] | drawDashed[2] then
					LINE_TYPE gs_wLineTypeAbove
				else
					LINE_TYPE gs_wLineType1
				endif
			endif

			IF arrow_style_m <> ARROW_STYLE_3 AND arrow_style_m <> ARROW_STYLE_6 AND arrow_style_m <> ARROW_STYLE_9 THEN
			!!! ********* Arrow Style=1,2,4,5,7,8
			!!! ********* Geometry of ArrowHead Contour
				POLY2_b 4, 1, gs_ArrowFillPenAbove, gs_fill_pen,
					temp_HeadAboveX,temp_HeadAboveY, 1,
					temp_InnerAboveX,temp_InnerAboveY, temp_ArrowMask,
					temp_OuterAboveX,temp_OuterAboveY, 1,
					temp_HeadAboveX,temp_HeadAboveY, -1

				IF gs_ArrowFillPenAbove<>0 THEN
					IF arrow_style_m <> ARROW_STYLE_1 AND arrow_style_m <> ARROW_STYLE_2 THEN
						!!! Geometry of ArrowHead Fill
						POLY2_b 4, 1+2, gs_ArrowFillPenAbove, gs_fill_pen,
							temp_HeadAboveX,temp_HeadAboveY, 1,
							temp_InnerAboveXFill,temp_InnerAboveYFill, 0,
							temp_OuterAboveX,temp_OuterAboveY, 0,
							temp_HeadAboveX,temp_HeadAboveY, -1

					ENDIF
				ENDIF
			ELSE


			!!! ********* Arrow Style=3,6,9
			!!! ********* Geometry of ArrowHead Contour


				ROT2 temp_endp*fokszog
				ADD2 wldo,0
				POLY2_b 4, 1, gs_ArrowFillPen, gs_fill_pen,
					temp_HeadX,temp_HeadY, 1,
					temp_InnerX,temp_InnerY, temp_ArrowMask,
					temp_OuterX,temp_OuterY, 1,
					temp_HeadX,temp_HeadY, -1

				IF gs_ArrowFillPenAbove<>0 THEN
					IF arrow_style_m <> ARROW_STYLE_3 THEN
						!! Geometry of ArrowHead Fill
						POLY2_b 4, 1+2, gs_ArrowFillPenAbove, gs_fill_pen,
							temp_HeadX,temp_HeadY, 1,
							temp_InnerXFill,temp_InnerY, 0,
							temp_OuterX,temp_OuterY, 0,
							temp_HeadX,temp_HeadY, -1

					ENDIF
				ENDIF
				DEL 2
			ENDIF
		ENDIF

		IF drawPart[1] THEN		!!! Below Break Line


			if aboveStory then
				LINE_TYPE gs_wLineTypeStUp
			else
				if drawDashed[1] then
					LINE_TYPE gs_wLineTypeAbove
				else
					LINE_TYPE gs_wLineType1
				endif
			endif

			IF arrow_style_m <> ARROW_STYLE_3 AND arrow_style_m <> ARROW_STYLE_6 AND arrow_style_m <> ARROW_STYLE_9 THEN
			!!! ********* Arrow Style=1,2,4,5,7,8
			!!! ********* Geometry of ArrowHead Contour
				POLY2_b 4, 1, gs_ArrowFillPen, gs_fill_pen,
					temp_HeadBelowX,temp_HeadBelowY, 1,
					temp_InnerBelowX,temp_InnerBelowY, temp_ArrowMask,
					temp_OuterBelowX,temp_OuterBelowY, 1,
					temp_HeadBelowX,temp_HeadBelowY, -1

				IF gs_ArrowFillPen<>0 THEN
					IF arrow_style_m <> ARROW_STYLE_1 AND arrow_style_m <> ARROW_STYLE_2 THEN
						!!! Geometry of ArrowHead Fill
						POLY2_b 4, 1+2, gs_ArrowFillPen, gs_fill_pen,
							temp_HeadBelowX,temp_HeadBelowY, 1,
							temp_InnerBelowXFill,temp_InnerBelowYFill, 0,
							temp_OuterBelowX,temp_OuterBelowY, 0,
							temp_HeadBelowX,temp_HeadBelowY, -1
					ENDIF
				ENDIF


			ELSE
			!!! ********* Arrow Style=3,6,9
			!!! ********* Geometry of ArrowHead Contour

				ROT2 numSteptoBreakRight*fokszog
				ADD2 wldo,0
				POLY2_b 4, 1, gs_ArrowFillPen, gs_fill_pen,
					temp_HeadX,temp_HeadY, 1,
					temp_InnerX,temp_InnerY, temp_ArrowMask,
					temp_OuterX,temp_OuterY, 1,
					temp_HeadX,temp_HeadY, -1

				IF gs_ArrowFillPen<>0 THEN
					IF arrow_style_m <> ARROW_STYLE_3 THEN
						!!! Geometry of ArrowHead Fill
						POLY2_b 4, 1+2, gs_ArrowFillPen, gs_fill_pen,
							temp_HeadX,temp_HeadY, 1,
							temp_InnerXFill,temp_InnerY, 0,
							temp_OuterX,temp_OuterY, 0,
							temp_HeadX,temp_HeadY, -1

					ENDIF
				ENDIF
				DEL 2
			ENDIF

		ENDIF

		!!! ********* Hotspots of StartEnd Symbol
		IF drawPart[1] THEN
			ROT2 numSteptoBreakRight*fokszog

				ArrowUNID=4000
				HOTSPOT2 wldo,0,ArrowUNID: ArrowUNID=ArrowUNID+1

				IF arrow_style_m = ARROW_STYLE_3 OR arrow_style_m = ARROW_STYLE_6 OR arrow_style_m = ARROW_STYLE_9 THEN
					ADD2 wldo,0
					ROT2 180

						ArrowUNID=4001

						HOTSPOT2 -ArrowDist,0,	ArrowUNID, gs_ArrowHeight, 1+128 : ArrowUNID=ArrowUNID+1
						HOTSPOT2 -ArrowDist,gs_ArrowHeight, ArrowUNID, gs_ArrowHeight, 2 : ArrowUNID=ArrowUNID+1
						HOTSPOT2 -ArrowDist,-1,	ArrowUNID, gs_ArrowHeight, 3: ArrowUNID=ArrowUNID+1

						HOTSPOT2 ArrowDist,0,	ArrowUNID, gs_ArrowHeight, 1+128 : ArrowUNID=ArrowUNID+1
						HOTSPOT2 ArrowDist,gs_ArrowHeight, ArrowUNID, gs_ArrowHeight, 2 : ArrowUNID=ArrowUNID+1
						HOTSPOT2 ArrowDist,-1,	ArrowUNID, gs_ArrowHeight, 3: ArrowUNID=ArrowUNID+1

						HOTSPOT2 0,gs_ArrowHeight,	ArrowUNID, gs_ArrowHalfWidth, 1+128 : ArrowUNID=ArrowUNID+1
						HOTSPOT2 gs_ArrowHalfWidth,gs_ArrowHeight, ArrowUNID, gs_ArrowHalfWidth, 2 : ArrowUNID=ArrowUNID+1
						HOTSPOT2 -1,gs_ArrowHeight,	ArrowUNID, gs_ArrowHalfWidth, 3: ArrowUNID=ArrowUNID+1

						HOTSPOT2 0,gs_ArrowHeight,	ArrowUNID, gs_ArrowHalfWidth, 1+128 : ArrowUNID=ArrowUNID+1
						HOTSPOT2 -gs_ArrowHalfWidth,gs_ArrowHeight, ArrowUNID, gs_ArrowHalfWidth, 2 : ArrowUNID=ArrowUNID+1
						HOTSPOT2 1,gs_ArrowHeight,	ArrowUNID, gs_ArrowHalfWidth, 3: ArrowUNID=ArrowUNID+1

					DEL 2
				ENDIF

			DEL 1
		ENDIF

		IF drawPart[2] THEN
			ROT2 temp_endp*fokszog

			ArrowUNID=4100
			HOTSPOT2 wldo,0,ArrowUNID: ArrowUNID=ArrowUNID+1

				IF arrow_style_m = ARROW_STYLE_3 OR arrow_style_m = ARROW_STYLE_6 OR arrow_style_m = ARROW_STYLE_9 THEN
					ADD2 wldo,0
					ROT2 180

						ArrowUNID=4014

						HOTSPOT2 -ArrowDist,0,	ArrowUNID, gs_ArrowHeight, 1+128 : ArrowUNID=ArrowUNID+1
						HOTSPOT2 -ArrowDist,gs_ArrowHeight, ArrowUNID, gs_ArrowHeight, 2 : ArrowUNID=ArrowUNID+1
						HOTSPOT2 -ArrowDist,-1,	ArrowUNID, gs_ArrowHeight, 3: ArrowUNID=ArrowUNID+1

						HOTSPOT2 ArrowDist,0,	ArrowUNID, gs_ArrowHeight, 1+128 : ArrowUNID=ArrowUNID+1
						HOTSPOT2 ArrowDist,gs_ArrowHeight, ArrowUNID, gs_ArrowHeight, 2 : ArrowUNID=ArrowUNID+1
						HOTSPOT2 ArrowDist,-1,	ArrowUNID, gs_ArrowHeight, 3: ArrowUNID=ArrowUNID+1

						HOTSPOT2 0,gs_ArrowHeight,	ArrowUNID, gs_ArrowHalfWidth, 1+128 : ArrowUNID=ArrowUNID+1
						HOTSPOT2 gs_ArrowHalfWidth,gs_ArrowHeight, ArrowUNID, gs_ArrowHalfWidth, 2 : ArrowUNID=ArrowUNID+1
						HOTSPOT2 -1,gs_ArrowHeight,	ArrowUNID, gs_ArrowHalfWidth, 3: ArrowUNID=ArrowUNID+1

						HOTSPOT2 0,gs_ArrowHeight,	ArrowUNID, gs_ArrowHalfWidth, 1+128 : ArrowUNID=ArrowUNID+1
						HOTSPOT2 -gs_ArrowHalfWidth,gs_ArrowHeight, ArrowUNID, gs_ArrowHalfWidth, 2 : ArrowUNID=ArrowUNID+1
						HOTSPOT2 1,gs_ArrowHeight,	ArrowUNID, gs_ArrowHalfWidth, 3: ArrowUNID=ArrowUNID+1
					DEL 2
				ENDIF
			DEL 1
		ENDIF


		!!!!!!!!!!!!!!!!!!!!!! ***	WALKING LINE *** !!!!!!!!!!!!!!!!!!!!!!!!!!
		DRAWINDEX 30
		PEN gs_wLinePen

		IF drawPart[3] THEN

			if aboveStory then
				LINE_TYPE gs_wLineTypeStUp
			else
				if drawDashed[3] then
					LINE_TYPE gs_wLineTypeAbove
				else
					LINE_TYPE gs_wLineType1
				endif
			endif
			ARC2 0,0,wldo, temp_fokszog, INT(temp_endp)*fokszog
		ELSE
			IF drawPart[1] THEN
				if aboveStory then
					LINE_TYPE gs_wLineTypeStUp
				else
					if drawDashed[1] then
						LINE_TYPE gs_wLineTypeAbove
					else
						LINE_TYPE gs_wLineType1
					endif
				endif
				ARC2 0,0,wldo, temp_fokszog, numSteptoBreakRight*fokszog
			ENDIF

			IF drawPart[2] THEN
				if aboveStory then
					LINE_TYPE gs_wLineTypeStUp
				else
					if drawDashed[2] then
						LINE_TYPE gs_wLineTypeAbove
					else
						LINE_TYPE gs_wLineType1
					endif
				endif
				ARC2 0,0,wldo, numSteptoBreakRight*fokszog, INT(temp_endp)*fokszog
			ENDIF
		ENDIF


		!!!!!!!!!!!!!!!!!!!!!!!!!! *** START END SYMBOL *** !!!!!!!!!!!!!!!!!!
		DRAWINDEX 40


		fill gs_StartEndFill

		IF gs_StartEndFillPen<>0 THEN temp_FillStatus=2
		IF gs_StartEndFillPen=0 THEN temp_FillStatus=0

		ROT2 temp_StartEndFokszog
		ADD2 wldo,0
			IF drawPart[1] | drawPart[3] THEN
				if aboveStory then
					LINE_TYPE gs_wLineTypeStUp
				else
					if drawDashed[1] | drawDashed[3] then
						LINE_TYPE gs_wLineTypeAbove
					else
						LINE_TYPE gs_wLineType1
					endif
				endif
				IF gs_StartEndStyle_m = STARTSYMB_STYLE1 THEN
					POLY2_B 2, 1+temp_FillStatus, gs_StartEndFillPen, gs_fill_pen,
					0,0,901,
					gs_CircleRadius,360,4001
				ENDIF

				IF gs_StartEndStyle_m = STARTSYMB_STYLE2 THEN
					FOR kk=1 TO 2
						POLY2_B 6, 1+temp_FillStatus, gs_StartEndFillPen, gs_fill_pen,
							0,0,1,
							0+gs_CircleRadius,0,1,
							0,0,901,
							0,90,4001,
							0,0+gs_CircleRadius,0,
							0,0,-1

						POLY2_B 6, 1, gs_StartEndFillPen, gs_fill_pen,
							0,0,1,
							0,0+gs_CircleRadius,1,
							0,0,901,
							0,90,4001,
							0-gs_CircleRadius,0,0,
							0,0,-1
					ROT2 180
					ADD2 0,2*(0)
					NEXT kk
					DEL 4
				ENDIF

				IF gs_StartEndStyle_m = STARTSYMB_STYLE3 THEN
					LINE2 0+gs_StartWidth,0-gs_StartHeight,0+gs_StartWidth,0+gs_StartHeight
					LINE2 0-gs_StartWidth,0-gs_StartHeight,0-gs_StartWidth,0+gs_StartHeight
				ENDIF

			ENDIF


			!!! ********* Hotspots of StartEnd Symbol

			IF gs_StartEndStyle_m = STARTSYMB_STYLE1 OR gs_StartEndStyle_m = STARTSYMB_STYLE2 THEN

					StartSymbUNID=3000
					FOR kk=1 to 4
						HOTSPOT2 0, 0, StartSymbUNID, gs_CircleRadius, 1+128		:StartSymbUNID=StartSymbUNID+1
						HOTSPOT2 -1, 0, StartSymbUNID, gs_CircleRadius, 3+128	:StartSymbUNID=StartSymbUNID+1
						HOTSPOT2 gs_CircleRadius, 0, StartSymbUNID, gs_CircleRadius,2	:StartSymbUNID=StartSymbUNID+1

						ROT2 90
					NEXT KK
					DEL 4
			ENDIF

			IF gs_StartEndStyle_m = STARTSYMB_STYLE3 THEN

					StartSymbUNID=3100
					FOR kk=1 to 2
						ADD2 0, 0
							!!! Symbol Width/2
							HOTSPOT2 0, -gs_StartHeight, StartSymbUNID, gs_StartWidth, 1+128		:StartSymbUNID=StartSymbUNID+1
							HOTSPOT2 -1, -gs_StartHeight, StartSymbUNID, gs_StartWidth, 3	:StartSymbUNID=StartSymbUNID+1
							HOTSPOT2 gs_StartWidth, -gs_StartHeight, StartSymbUNID, gs_StartWidth,2	:StartSymbUNID=StartSymbUNID+1

							HOTSPOT2 0, gs_StartHeight, StartSymbUNID, gs_StartWidth, 1+128		:StartSymbUNID=StartSymbUNID+1
							HOTSPOT2 -1, gs_StartHeight, StartSymbUNID, gs_StartWidth, 3	:StartSymbUNID=StartSymbUNID+1
							HOTSPOT2 gs_StartWidth, gs_StartHeight, StartSymbUNID, gs_StartWidth,2	:StartSymbUNID=StartSymbUNID+1
						DEL 1

						ADD2 0, 0
							!!! Symbol Height
							HOTSPOT2 gs_StartWidth, 0, StartSymbUNID, gs_StartHeight, 1+128		:StartSymbUNID=StartSymbUNID+1
							HOTSPOT2 gs_StartWidth, -1, StartSymbUNID, gs_StartHeight, 3	:StartSymbUNID=StartSymbUNID+1
							HOTSPOT2 gs_StartWidth, gs_StartHeight, StartSymbUNID, gs_StartHeight,2	:StartSymbUNID=StartSymbUNID+1

							HOTSPOT2 gs_StartWidth, 0, StartSymbUNID, gs_StartHeight, 1+128		:StartSymbUNID=StartSymbUNID+1
							HOTSPOT2 gs_StartWidth, 1, StartSymbUNID, gs_StartHeight, 3	:StartSymbUNID=StartSymbUNID+1
							HOTSPOT2 gs_StartWidth, -gs_StartHeight, StartSymbUNID, gs_StartHeight,2	:StartSymbUNID=StartSymbUNID+1
						DEL 1

					MUL2 -1,1
					NEXT kk
					DEL 2
			ENDIF

		DEL 2

		IF rnu*fokszog <= 360| \
			(_iSymbolType = 3 & drawPart[1] & not(drawPart[2]) ) | \
			(_iSymbolType = 8 & drawPart[1] & not(drawPart[2]) ) | \
			(_iSymbolType = 15 & drawPart[1] & not(drawPart[2]) ) THEN

			IF iFirstTread = FIRSTTREAD_ABOVE_FLOOR_LEVEL THEN DEL 1
		ENDIF

	ENDIF		!!!! End of walkl


!===============================================================================
! --- Text / Up-Down Text / Numbering ---
!===============================================================================

! --- Oriented View --------------------------------------------------------------

angleViewRot = 0
if bShowRiseAndRunText | walkingDirUPDN_m <> WALKDIRSTR_NONE | (drawNum[1] | drawNum[2] | drawNum[3])  then
	rrr = REQUEST ("View_Rotangle", "", angleViewRot)
endif
totalRotate = (SYMB_ROTANGLE + angleViewRot) MOD 360

! --- Define Font Style --------------------------------------------------------

DEFINE STYLE "UPDN" fontType, UPDNfontsize, 5, 0		  	!!- UP/DN
SET STYLE "UPDN"

DEFINE STYLE "stepnum" fontType, gs_NumTextSize, 5, 0		!! - Numbering
SET STYLE "stepnum"

DEFINE STYLE myfs fontType,tdfs,5,0
SET STYLE myfs

! --- Rise and Run Text -------------------------------------------------------
DRAWINDEX 50

pen gs_text_pen

! Z DIMENSION
IF rnu*fokszog <= 360 THEN
	IF iTopTread = TOPTREAD_BELOW_FLOOR_LEVEL THEN rnuu=rnu ELSE rnuu=rnu
	IF iFirstTread = FIRSTTREAD_AT_FLOOR_LEVEL THEN rnuu=rnuu-1
ELSE
	IF iTopTread = TOPTREAD_BELOW_FLOOR_LEVEL THEN rnuu=rnu-2 ELSE rnuu=rnu-1
	IF iFirstTread = FIRSTTREAD_AT_FLOOR_LEVEL THEN rnuu=rnuu-2
ENDIF

if bShowRiseAndRunText then
	add2 COS(60) * wldo, SIN(60) * wldo
	rot2 -30
		call "Stair_RiseRun_Text" PARAMETERS ALL	totalRotate				= totalRotate - 30,
													iRotateType 			= 2,
													iRiseRunTextPosition	= 2,
													treadHeight				= th,
													treadDepth				= td,
													nRisers					= rnuu,
													flightWidth				= 0,
													RiseRunUNID				= 5000
	del 2
endif

! --- Up and Down Text -------------------------------------------------------
iReadable = 0
if iFirstTread = FIRSTTREAD_ABOVE_FLOOR_LEVEL then rot2 fokszog
if walkingDirUPDN_m <> WALKDIRSTR_NONE and walkl then
	set style "UPDN"
	pen UPDNfontpen

	nTransUPDN = 0
	nTransHotspot = 0
	add2 wldo+DirUPDN_X,DirUPDN_Y
	nTransUPDN = nTransUPDN + 1
	! Text Rotation - Readable / Parallel with Walking Line / Align with Symbol
	! ----------------------------------------------------------------------
	if typeTextRotation_UpDn_m = 2 then									! Readable
		if (totalRotate > (gs_readable_angle + eps) & totalRotate < (gs_readable_angle + 180 + eps)) then
			rot2 180
			nTransUPDN = nTransUPDN + 1
		endif
	else
		if typeTextRotation_UpDn_m = 1 then								! Parallel with Walking Line
			if SYMB_MIRRORED then
				iReadable = not(totalRotate > (gs_readable_angle - 90 + eps) & totalRotate < (gs_readable_angle + 180 - 90 + eps)) - (totalRotate > (gs_readable_angle - 90 + eps) & totalRotate < (gs_readable_angle + 180 - 90 + eps))
			else
				iReadable = not(totalRotate < (gs_readable_angle - 90 + eps) | totalRotate > (gs_readable_angle + 180 - 90 + eps)) - (totalRotate < (gs_readable_angle - 90 + eps) | totalRotate > (gs_readable_angle + 180 - 90 + eps))
			endif
			rot2 -90 * iReadable
			nTransUPDN = nTransUPDN + 1
		endif
	endif
	! ----------------------------------------------------------------------
	rot2 AngUPDN
	nTransUPDN = nTransUPDN + 1

	text2 0,0, walkingDirUPDN
	del nTransUPDN

	width	= STW (walkingDirUPDN)/1000*GLOB_SCALE
	rb		= width/2


	UpDownUNID=6000
	HOTSPOT2 wldo,			DirUPDN_Y, UpDownUNID, DirUPDN_X, 1+128 : UpDownUNID=UpDownUNID+1
	HOTSPOT2 wldo-1,		DirUPDN_Y, UpDownUNID, DirUPDN_X, 3		: UpDownUNID=UpDownUNID+1
	HOTSPOT2 wldo+DirUPDN_X,DirUPDN_Y, UpDownUNID, DirUPDN_X, 2		: UpDownUNID=UpDownUNID+1

	HOTSPOT2 wldo+DirUPDN_X,0,			UpDownUNID, DirUPDN_Y, 1+128: UpDownUNID=UpDownUNID+1
	HOTSPOT2 wldo+DirUPDN_X,-1,			UpDownUNID, DirUPDN_Y, 3	: UpDownUNID=UpDownUNID+1
	HOTSPOT2 wldo+DirUPDN_X,DirUPDN_Y,	UpDownUNID, DirUPDN_Y, 2	: UpDownUNID=UpDownUNID+1

	add2 wldo+DirUPDN_X,DirUPDN_Y
	nTransHotspot = nTransHotspot +1
	if typeTextRotation_UpDn_m = 1 then	! Parallel with Walking Line
		rot2 -90 * iReadable
		nTransHotspot = nTransHotspot +1
	endif
	HOTSPOT2 0,					0,				UpDownUNID,AngUPDN,6	: UpDownUNID=UpDownUNID+1
	HOTSPOT2 rb,				0,				UpDownUNID,AngUPDN,4+128: UpDownUNID=UpDownUNID+1
	HOTSPOT2 rb*COS(AngUPDN),	rb*SIN(AngUPDN),UpDownUNID,AngUPDN,5	: UpDownUNID=UpDownUNID+1
	del nTransHotspot
endif

if iFirstTread = FIRSTTREAD_ABOVE_FLOOR_LEVEL then del 1

! --- Numbering -------------------------------------------------------


IF rnu*fokszog > 360 AND bShowNumbering=1 THEN iFirstTread = FIRSTTREAD_ABOVE_FLOOR_LEVEL
IF iFirstTread = FIRSTTREAD_ABOVE_FLOOR_LEVEL THEN ROT2 fokszog

if (drawNum[1] | drawNum[2] | drawNum[3])  then
	if ZZYZX <= (BreakNum)*th THEN
		startNumber = i1ZZYZX
	else
		startNumber = numSteptoBreakRight
	endif

	if iTopTread = TOPTREAD_BELOW_FLOOR_LEVEL then rnu = rnu + 1
	txtd = 0.1
	fp = fokszog/3

	set style "stepnum"
	pen gs_NumTextPen
	poss = 0
	nTextTransformations = 0

	if drawNum[1] | drawNum[3] then
		for iNumStep = 1 to startNumber
			poss = poss + 1
			if not(iNumStep = rnu & iTopTread = TOPTREAD_BELOW_FLOOR_LEVEL) then
				if iFirstTread = FIRSTTREAD_AT_FLOOR_LEVEL then
					numTextTread = iNumStep + nStartNumbering - 1
				else
					numTextTread = iNumStep + nStartNumbering
				endif
				add2 (r-txtd)*COS((poss-1)*fokszog+fp), (r-txtd)*SIN((poss-1)*fokszog+fp)

				! Text Rotation - Readable / Align with Symbol
				! ----------------------------------------------------------------------
				if typeTextRotation_Num_m = 2 then								! Readable
					if (totalRotate > (gs_readable_angle + eps) & totalRotate < (gs_readable_angle + 180 + eps)) then
						rot2 180
						nTextTransformations = 1
					endif
				endif
				! ----------------------------------------------------------------------

				text2 0,0, numTextTread
				if nTextTransformations > 0 then del nTextTransformations
				del 1
			endif
		next iNumStep
	endif

	if drawNum[2] | drawNum[3] then
		if rnu * fokszog <= 360 then
			endNumber = rnu
		else
			if iTopTread = TOPTREAD_BELOW_FLOOR_LEVEL then endNumber = rnu-2
			if iTopTread = TOPTREAD_AT_FLOOR_LEVEL then endNumber = rnu-1
		endif

		for iNumStep = numSteptoBreakRight+1 to endNumber
			if iNumStep = INT(360/fokszog)+1 then txtd = txtd+tdfs/6
			if not(iNumStep = rnu and iTopTread = TOPTREAD_BELOW_FLOOR_LEVEL) then
				add2 (r-txtd)*COS((iNumStep-1)*fokszog+fp), (r-txtd)*SIN((iNumStep-1)*fokszog+fp)
				if iFirstTread = FIRSTTREAD_AT_FLOOR_LEVEL then
					numTextTread = iNumStep + nStartNumbering - 1
				else
					numTextTread = iNumStep + nStartNumbering
				endif
				! Text Rotation - Readable / Align with Symbol
				! ----------------------------------------------------------------------
				if typeTextRotation_Num_m = 2 then								! Readable
					if (totalRotate > (gs_readable_angle + eps) & totalRotate < (gs_readable_angle + 180 + eps)) then
						rot2 180
						nTextTransformations = 1
					endif
				endif
				! ----------------------------------------------------------------------
				text2 0,0, numTextTread
				if nTextTransformations > 0 then del nTextTransformations
				del 1
			endif
		next iNumStep
	endif
endif

if iFirstTread = FIRSTTREAD_ABOVE_FLOOR_LEVEL then del 1
pen gs_cont_pen

!===============================================================================
! --- Carriage Line ---
!===============================================================================

if bCarriageLineExist then
	fill gs_fill_type

	bShowCarriagePart1	= 0
	bShowCarriagePart2	= 0
	angle_breakline		= 90

	beamNum				= 1
	beamThk				= beamx
	beamOffsetRight		= 0
	beamOffsetLeft		= 0
	carriageBaseDist	= flw
	carrBreakLineWidth	= 20

	beamRadIn			= r - carriageBaseDist / 2 - beamThk / 2
	beamRadOut			= r - carriageBaseDist / 2 + beamThk / 2

	carrStartAngle		= 0
	if rnu * fokszog < 360 then
		carrEndAngle		= rnu * fokszog
	else
		carrEndAngle		= 360
	endif

	if drawPart[3] then
		!!!!!******************************      1st RUN
		rot2 0
			bCarrAboveBreakLine	= 0
			bBreakCarriageLine	= 0
			gosub "carriage"
		del 1
	else
		if drawPart[1] then
			!!!!!******************************      1st RUN
			rot2 carrStartAngle
				bCarrAboveBreakLine	= 0
				bBreakCarriageLine	= 1
				bShowCarriagePart1	= 1
				bShowCarriagePart2	= 0
				brLineAngle			= angle_breakline
				carrBreakLineDistAngle	= numSteptoBreakRight*fokszog - carrStartAngle
				gosub "carriage"
			del 1
		endif

		if drawPart[2] then
			!!!!!******************************      1st RUN
			rot2 numSteptoBreakRight*fokszog
				bCarrAboveBreakLine	= 1
				bBreakCarriageLine	= 1
				bShowCarriagePart1	= 0
				bShowCarriagePart2	= 1
				brLineAngle			= angle_breakline
				carrBreakLineDistAngle	= numSteptoBreakRight*fokszog
				gosub "carriage"
			del 1
		endif
	endif
endif

!===============================================================================
! --- Railings ---
!===============================================================================

_bShowRailIn2D = 1
if _bShowRailIn2D then
	IF iTopTread = TOPTREAD_AT_FLOOR_LEVEL THEN
		IF bComplexRailRight=0 OR bComplexRailLeft=0 THEN
			rnu=rnu-1
		ELSE
			rnu=rnu
		ENDIF
	ENDIF
	IF iTopTread = TOPTREAD_BELOW_FLOOR_LEVEL THEN
		IF bComplexRailRight=0 OR bComplexRailLeft=0 THEN
			rnu=rnu
		ELSE
			rnu=rnu+1
		ENDIF
	ENDIF

	fordul=fordul*1.00241
	fordul=fordul-fokszog/360

	if iFirstTread = FIRSTTREAD_ABOVE_FLOOR_LEVEL then
		fordul=fordul-fokszog/360
		zz=zzyzx-th
	else
		zz=zzyzx
	endif

	ker	= 2*pi*(r-flw-roffl)
	k	= 2*pi*(r+roffr)
	nlra=sqr(k*k*fordul*fordul+zz*zz)
	klra=sqr(ker*ker*fordul*fordul+zz*zz)

	ann=atn(zz/(k*fordul))
	ank=atn(zz/(ker*fordul))

	kr=r-flw-roffl+handRailWidthL /2
	rr=r+roffr-handRailWidthR/2
	res=res*360/fokszog

	bShowRailPart1		= 0
	bShowRailPart2		= 0
	breakLineDistAngle	= 50
	breakLineWidthAngle	= 0
	brLineAngle			= 90

	drawindex 30
	fill gs_fill_type

	if iFirstTread = FIRSTTREAD_ABOVE_FLOOR_LEVEL then rot2 fokszog

	! --- Left Rail ----------------------------------------------------------------
	if rail_m = 3 | rail_m = 1 then		! Left, Both
		if bSameRails then
			leftRailType_m = rightRailType_m
		endif

		handRailOvAngleL = hrol * 360 / (2 * (r-flw-roffl+ handRailWidthL / 2) * pi) * bComplexRailLeft
		if rnu * fokszog < 360 then
			tempRailAngleL	= fordul * 360
		else
			tempRailAngleL	= 360 - EPS * 100 - 2 * handRailOvAngleL
		endif

		if drawPart[3] then
			if bShowRailOnFloorPlan then
				if aboveStory then
					railPen	= gs_LinePenStUp
					LINE_TYPE railLineType
				else
					if drawDashed[3] then
						LINE_TYPE dash_line
					else
						LINE_TYPE solid_line
					endif
				endif
				pen railPen

				if bSymbolic2D then
					bShowRailOn1stRun		= 1
					bBreakRailLine			= 0
					bRailAboveBreakLine		= 0
					gosub "left rail"
				else
					rot2 -handRailOvAngleL
						POLY2_b 9, 1+2+64, gs_fill_pen, gs_back_pen,
							r-flw-roffl,0,1,
							0,0,900,
							0,tempRailAngleL + handRailOvAngleL * 2, 4000,
							(r-flw-roffl)*COS(tempRailAngleL + handRailOvAngleL * 2),(r-flw-roffl)*SIN(tempRailAngleL + handRailOvAngleL * 2),1,
							(r-flw+handRailWidthL -roffl)*COS(tempRailAngleL + handRailOvAngleL * 2),(r-flw+handRailWidthL -roffl)*SIN(tempRailAngleL + handRailOvAngleL * 2),1,
							0,0,900,
							0,-(tempRailAngleL + handRailOvAngleL * 2),4000,
							r-flw+handRailWidthL -roffl,0,1,
							r-flw-roffl,0,-1
					del 1
				endif
			endif

			if bShowRailAxis then
				line_type railAxisLineType
				pen gs_RailAxisPen
				ARC2 0,0,r-flw-roffl+handRailWidthL /2,-handRailOvAngleL,tempRailAngleL + handRailOvAngleL
			endif
		else		! Break Line - Railing
			if drawPart[1] & bShowRailOnFloorPlan then
				if aboveStory then
					railPen	= gs_LinePenStUp
					LINE_TYPE railLineType
				else
					if drawDashed[1] then
						LINE_TYPE dash_line
					else
						LINE_TYPE solid_line
					endif
				endif
				pen railPen

				if bSymbolic2D then
					bShowRailOn1stRun		= 1
					bBreakRailLine			= 1
					brLineAngle				= 90
					bShowRailPart1			= 1
					breakLineDistAngle		= numSteptoBreakRight*fokszog + handRailOvAngleL
					breakLineWidthAngle		= 0
					bRailAboveBreakLine		= 0
					gosub "left rail"
				else
					rot2 -handRailOvAngleL
						POLY2_b 9, 1+2+64, gs_fill_pen, gs_back_pen,
							r-flw-roffl,0,1,
							0,0,900,
							0,(numSteptoBreakRight*fokszog + handRailOvAngleL), 4000,
							(r-flw-roffl)*COS((numSteptoBreakRight*fokszog + handRailOvAngleL)),(r-flw-roffl)*SIN((numSteptoBreakRight*fokszog + handRailOvAngleL)),1,
							(r-flw+handRailWidthL -roffl)*COS((numSteptoBreakRight*fokszog + handRailOvAngleL)),(r-flw+handRailWidthL -roffl)*SIN((numSteptoBreakRight*fokszog + handRailOvAngleL)),1,
							0,0,900,
							0,-(numSteptoBreakRight*fokszog + handRailOvAngleL),4000,
							r-flw+handRailWidthL -roffl,0,1,
							r-flw-roffl,0,-1
					del 1
				endif
			endif

			if drawPart[2] & bShowRailOnFloorPlan and bShowRailAboveBreakLine then
				if aboveStory then
					railPen	= gs_LinePenStUp
					LINE_TYPE railLineType
				else
					if drawDashed[2] then
						LINE_TYPE dash_line
					else
						LINE_TYPE solid_line
					endif
				endif
				pen railPen
				FILL temp_FillTypeAbove

				if bSymbolic2D then
					bShowRailOn1stRun		= 1
					bBreakRailLine			= 1
					brLineAngle				= 90
					bShowRailPart2			= 1
					breakLineDistAngle		= numSteptoBreakRight*fokszog + handRailOvAngleL
					breakLineWidthAngle		= 0
					bRailAboveBreakLine		= 1
					gosub "left rail"
				else
					POLY2_b 9, 1+FullFill+64, gs_fill_pen, temp_BackPen,
						(r-flw-roffl)*COS(numSteptoBreakRight*fokszog), (r-flw-roffl)*SIN(numSteptoBreakRight*fokszog),1,
						0,0,900,
						0,tempRailAngleL + handRailOvAngleL - numSteptoBreakRight * fokszog, 4000,
						(r-flw-roffl)*COS(tempRailAngleL + handRailOvAngleL),(r-flw-roffl)*SIN(tempRailAngleL + handRailOvAngleL),1,
						(r-flw+handRailWidthL -roffl)*COS(tempRailAngleL + handRailOvAngleL),(r-flw+handRailWidthL -roffl)*SIN(tempRailAngleL + handRailOvAngleL),1,
						0,0,900,
						0,-tempRailAngleL + handRailOvAngleL + numSteptoBreakRight * fokszog,4000,
						(r-flw+handRailWidthL -roffl)*COS(numSteptoBreakRight*fokszog), (r-flw+handRailWidthL -roffl)*SIN(numSteptoBreakRight*fokszog),0,
						(r-flw-roffl)*COS(numSteptoBreakRight*fokszog), (r-flw-roffl)*SIN(numSteptoBreakRight*fokszog),-1
				endif
			endif

			if bShowRailAxis then
				line_type railAxisLineType
				pen gs_RailAxisPen

				if drawPart[1] then
					ARC2 0,0,r-flw-roffl+handRailWidthL /2,-handRailOvAngleL,numSteptoBreakRight*fokszog
				endif

				if drawPart[2] and bShowRailAboveBreakLine then
					ARC2 0,0,r-flw-roffl+handRailWidthL /2,numSteptoBreakRight*fokszog,tempRailAngleL + handRailOvAngleL
				endif
			endif
		endif

		if bShowRailOnFloorPlan then
			if bSameRails then
				RailUNID=1200

				HOTSPOT2 r-flw+handRailWidthL/2, 	0,		RailUNID, roffr, 1+128: RailUNID=RailUNID+1
				HOTSPOT2 r-flw+handRailWidthL/2-roffl,0,	RailUNID, roffr, 2: RailUNID=RailUNID+1
				HOTSPOT2 r-flw+handRailWidthL/2+1,	0,		RailUNID, roffr, 3: RailUNID=RailUNID+1

				ROT2 tempRailAngleL
					HOTSPOT2 r-flw+handRailWidthL/2, 	0,		RailUNID, roffr, 1+128: RailUNID=RailUNID+1
					HOTSPOT2 r-flw+handRailWidthL/2-roffl,0,	RailUNID, roffr, 2: RailUNID=RailUNID+1
					HOTSPOT2 r-flw+handRailWidthL/2+1,	0,		RailUNID, roffr, 3: RailUNID=RailUNID+1
				DEL 1
			else
				RailUNID=1100

				HOTSPOT2 r-flw+handRailWidthL/2, 	0,		RailUNID, roffl, 1+128: RailUNID=RailUNID+1
				HOTSPOT2 r-flw+handRailWidthL/2-roffl,0,	RailUNID, roffl, 2: RailUNID=RailUNID+1
				HOTSPOT2 r-flw+handRailWidthL/2+1,	0,		RailUNID, roffl, 3: RailUNID=RailUNID+1

				ROT2 tempRailAngleL
					HOTSPOT2 r-flw+handRailWidthL/2, 	0,		RailUNID, roffl, 1+128: RailUNID=RailUNID+1
					HOTSPOT2 r-flw+handRailWidthL/2-roffl,0,	RailUNID, roffl, 2: RailUNID=RailUNID+1
					HOTSPOT2 r-flw+handRailWidthL/2+1,	0,		RailUNID, roffl, 3: RailUNID=RailUNID+1
				DEL 1
			endif
		endif
	endif

	! --- Right Rail ----------------------------------------------------------------
	if rail_m = 2 | rail_m = 1 then		! Right, Both
		handRailOvAngleR = hror * 360 / (2 * (r-handRailWidthR / 2+roffr) * pi) * bComplexRailRight
		if rnu * fokszog < 360 then
			tempRailAngleR	= fordul * 360
		else
			tempRailAngleR	= 360 - EPS * 100 - 2 * handRailOvAngleR
		endif

		if drawPart[3] then
			if bShowRailOnFloorPlan then
				if aboveStory then
					railPen	= gs_LinePenStUp
					LINE_TYPE railLineType
				else
					if drawDashed[3] then
						LINE_TYPE dash_line
					else
						LINE_TYPE solid_line
					endif
				endif
				pen railPen

				if bSymbolic2D then
					bShowRailOn1stRun		= 1
					bBreakRailLine			= 0
					bRailAboveBreakLine		= 0
					gosub "right rail"
				else
					rot2 -handRailOvAngleR
						POLY2_b 9, 1+2+64, gs_fill_pen, gs_back_pen,
							r-handRailWidthR+roffr,0,1,
							0,0,900,
							0,tempRailAngleR + handRailOvAngleR * 2, 4000,
							(r-handRailWidthR+roffr)*COS(tempRailAngleR + handRailOvAngleR * 2),(r-handRailWidthR+roffr)*SIN(tempRailAngleR + handRailOvAngleR * 2),1,
							(r+roffr)*COS(tempRailAngleR + handRailOvAngleR * 2),(r+roffr)*SIN(tempRailAngleR + handRailOvAngleR * 2),1,
							0,0,900,
							0,-(tempRailAngleR + handRailOvAngleR * 2),4000,
							r+roffr,0,1,
							r-handRailWidthR+roffr,0,-1
					del 1
				endif
			endif

			if bShowRailAxis then
				line_type railAxisLineType
				pen gs_RailAxisPen
				ARC2 0,0,r+roffr-handRailWidthR/2,-handRailOvAngleR,tempRailAngleR + handRailOvAngleR
			endif
		else		! Break Line - Railing
			if drawPart[1] & bShowRailOnFloorPlan then
				if aboveStory then
					railPen	= gs_LinePenStUp
					LINE_TYPE railLineType
				else
					if drawDashed[1] then
						LINE_TYPE dash_line
					else
						LINE_TYPE solid_line
					endif
				endif
				pen railPen

				if bSymbolic2D then
					bShowRailOn1stRun		= 1
					bBreakRailLine			= 1
					brLineAngle				= 90
					bShowRailPart1			= 1
					breakLineDistAngle		= numSteptoBreakRight*fokszog + handRailOvAngleR
					breakLineWidthAngle		= 0
					bRailAboveBreakLine		= 0
					gosub "right rail"
				else
					rot2 -handRailOvAngleR
						POLY2_b 9, 1+2+64, gs_fill_pen, gs_back_pen,
							r-handRailWidthR+roffr,0,1,
							0,0,900,
							0,(numSteptoBreakRight*fokszog + handRailOvAngleR), 4000,
							(r-handRailWidthR+roffr)*COS((numSteptoBreakRight*fokszog + handRailOvAngleR)),(r-handRailWidthR+roffr)*SIN((numSteptoBreakRight*fokszog + handRailOvAngleR)),1,
							(r+roffr)*COS((numSteptoBreakRight*fokszog + handRailOvAngleR)),(r+roffr)*SIN((numSteptoBreakRight*fokszog + handRailOvAngleR)),1,
							0,0,900,
							0,-(numSteptoBreakRight*fokszog + handRailOvAngleR),4000,
							r+roffr,0,1,
							r-handRailWidthR+roffr,0,-1
					del 1
				endif
			endif

			if drawPart[2] & bShowRailOnFloorPlan and bShowRailAboveBreakLine then
				if aboveStory then
					railPen	= gs_LinePenStUp
					LINE_TYPE railLineType
				else
					if drawDashed[2] then
						LINE_TYPE dash_line
					else
						LINE_TYPE solid_line
					endif
				endif
				pen railPen
				FILL temp_FillTypeAbove

				if bSymbolic2D then
					bShowRailOn1stRun		= 1
					bBreakRailLine			= 1
					brLineAngle				= 90
					bShowRailPart2			= 1
					breakLineDistAngle		= numSteptoBreakRight*fokszog + handRailOvAngleR
					breakLineWidthAngle		= 0
					bRailAboveBreakLine		= 1
					gosub "right rail"
				else
					POLY2_b 9, 1+FullFill+64, gs_fill_pen, temp_BackPen,
						(r-handRailWidthR+roffr)*COS(numSteptoBreakRight*fokszog), (r-handRailWidthR+roffr)*SIN(numSteptoBreakRight*fokszog),1,
						0,0,900,
						0,tempRailAngleR + handRailOvAngleR - numSteptoBreakRight * fokszog, 4000,
						(r-handRailWidthR+roffr)*COS(tempRailAngleR + handRailOvAngleR),(r-handRailWidthR+roffr)*SIN(tempRailAngleR + handRailOvAngleR),1,
						(r+roffr)*COS(tempRailAngleR + handRailOvAngleR),(r+roffr)*SIN(tempRailAngleR + handRailOvAngleR),1,
						0,0,900,
						0,-tempRailAngleR + handRailOvAngleR + numSteptoBreakRight * fokszog,4000,
						(r+roffr)*COS(numSteptoBreakRight*fokszog), (r+roffr)*SIN(numSteptoBreakRight*fokszog),0,
						(r-handRailWidthR+roffr)*COS(numSteptoBreakRight*fokszog), (r-handRailWidthR+roffr)*SIN(numSteptoBreakRight*fokszog),-1
				endif
			endif

			if bShowRailAxis then
				line_type railAxisLineType
				pen gs_RailAxisPen

				if drawPart[1] then
					ARC2 0,0,r+roffr-handRailWidthR/2,-handRailOvAngleR,numSteptoBreakRight*fokszog
				endif

				if drawPart[2] and bShowRailAboveBreakLine then
					ARC2 0,0,r+roffr-handRailWidthR/2,numSteptoBreakRight*fokszog,tempRailAngleR + handRailOvAngleR
				endif
			endif
		endif

		if bShowRailOnFloorPlan then
			RailUNID=1000

			HOTSPOT2 r-handRailWidthR/2, 	0,	RailUNID, roffr, 1+128: RailUNID=RailUNID+1
			HOTSPOT2 r-handRailWidthR/2+roffr,0,	RailUNID, roffr, 2: RailUNID=RailUNID+1
			HOTSPOT2 r-handRailWidthR/2-1,	0,	RailUNID, roffr, 3: RailUNID=RailUNID+1

			ROT2 tempRailAngleR
			RailStartRY = 0
			HOTSPOT2 r-handRailWidthR/2, 	RailStartRY,	RailUNID, roffr, 1+128: RailUNID=RailUNID+1
			HOTSPOT2 r-handRailWidthR/2+roffr,RailStartRY,	RailUNID, roffr, 2: RailUNID=RailUNID+1
			HOTSPOT2 r-handRailWidthR/2-1,	RailStartRY,	RailUNID, roffr, 3: RailUNID=RailUNID+1
			DEL 1
		endif
	endif

	if iFirstTread = FIRSTTREAD_ABOVE_FLOOR_LEVEL then del 1
endif

END

"left rail":

	! ---  Rail on 1st Run -----------------------------------------------------
	if bShowRailOn1stRun then
		if bComplexRailLeft then rot2 fokszog/2*0
		add2 r-flw-roffl+handRailWidthL /2, 0
		rot2 90

		lraSimple=klra
		lraComplex=klra
		additionXComplex=0
		additionZComplex=0
		hrovL=hrol
		hrovR=hrol
		postNumber = npl
		side = SIDE_LEFT
		gosub "callRailsForStair"

		del 2
		if bComplexRailLeft then del 1
	endif

return

"right rail":

	! ---  Rail on 1st Run -----------------------------------------------------
	if bShowRailOn1stRun then
		if bComplexRailRight then rot2 fokszog/2*0
		add2 r+roffr-handRailWidthR/2, 0
		rot2 90

		lraSimple=nlra
		lraComplex=nlra
		additionXComplex=0
		additionZComplex=0
		hrovL=hror
		hrovR=hror
		postNumber = npr
		side = SIDE_RIGHT
		gosub "callRailsForStair"

		del 2
		if bComplexRailRight then del 1
	endif

return

"callRailsForStair":
! ------------------------------------------------------------------------------
!	lraSimple
!	lraComplex
!	additionXComplex
!	additionZComplex
!	hrovL: rail overhang start
!	hrovR: rail overhang end
!	postNumber:   number of posts
!	side: SIDE_LEFT or SIDE_RIGHT
! ==============================================================================
	additionXComplex = additionXComplex
	additionZComplex = additionZComplex
	gosub "callRails"
return

! ==============================================================================
"callRails":
! ------------------------------------------------------------------------------
!	ani
!	additionXComplex
!	additionZComplex
!	dsComplex
!  ------------------
!	side: SIDE_LEFT or SIDE_RIGHT
!	lraSimple
!	lraComplex
!	hrovL: rail overhang start
!	hrovR: rail overhang end
!	postNumber:   number of posts
! ==============================================================================
	if side = SIDE_LEFT then
		railBarDepth	= bwl
		railBarDiam		= bdl
		railHeight		= hrl
		railBarThk		= fthl
		handRailWidth	= handRailWidthL
		railDist		= dsl
		railType_m		= leftRailType_m
		railPostDia		= pdl
		railPostWidth	= pwl
		railPostThk		= pthl
		railPostType	= ptl_m
		nBarsRail		= nbl
		bt_m			= btl_m
		railFramesWSide	= fswl
		railFramesWTop	= ftwl
		railFramesWBot	= fbwl
		railBarHeight	= bhl
		railBarFillThk	= bthl
		abdist			= abdistl
		railFrameMat	= fmatl
		railBaluFillMat	= bmatl
		railPostMat		= pmatl
		nbt				= nbtl
		railFillDist	= fdfl
		bComplexRail	= bComplexRailLeft
		ani				= ank
		rb				= kr
		tempRailAngle	= tempRailAngleL
	else
		railBarDepth	= bwr
		railBarDiam		= bdr
		railHeight		= hrr
		railBarThk		= fthr
		handRailWidth	= handRailWidthR
		railDist		= dsr
		railType_m		= rightRailType_m
		railPostDia		= pdr
		railPostWidth	= pwr
		railPostThk		= pthr
		railPostType	= ptr_m
		nBarsRail		= nbr
		bt_m			= btr_m
		railFramesWSide	= fswr
		railFramesWTop	= ftwr
		railFramesWBot	= fbwr
		railBarHeight	= bhr
		railBarFillThk	= bthr
		abdist			= abdistr
		railFrameMat	= fmatr
		railBaluFillMat	= bmatr
		railPostMat		= pmatr
		nbt				= nbtr
		railFillDist	= fdfr
		bComplexRail	= bComplexRailRight
		ani				= ann
		rb				= rr
		tempRailAngle	= tempRailAngleR
	endif

	add2 additionXComplex * bComplexRail, 0
	call "railSymbol2D_m" parameters all	cfs					= 1,
											bEnable2DPosts		= bComplexRail,
											ptyp_m				= 3,
											ani					= ani,
											ab					= tempRailAngle,
											rb					= rb,
											rom_m				= 1,
											rmm_m				= 1,
											LengthSize			= 0,
											lra					= lraSimple * NOT(bComplexRail) + lraComplex * (bComplexRail),
											hr					= railHeight,
											hrPerp				= railHeight,
											ds					= railDist,
											gs_AngleL			= 90,
											gs_AngleR			= 90,
											iHandRailStyle		= 1,
											handRailDiameter	= handRailWidth,
											handRailWidth		= handRailWidth,
											hroL				= hrovL,
											hroR				= hrovR,
											np					= postNumber,
											pd					= railPostDia,
											pw					= railPostWidth,
											pth					= railPostThk,
											gs_cont_pen			= railPen,
											sa					= 0,
											bBreakRailLine		= bBreakRailLine,
											breakLineAngle		= brLineAngle,
											breakLineDistAngle	= breakLineDistAngle,
											breakLineWidthAngle	= breakLineWidthAngle,
											bRailAboveBreakLine	= bRailAboveBreakLine,
											bShowRailBelowBrL	= bShowRailPart1,
											bShowRailAboveBrL	= bShowRailPart2,
											bPostNoCalculation	= (railType_m = 9),
											pit_m				= 1,
											dp					= abdist,
											nbt					= nbt
	del 1

	bShowRailPart1			= 0
	bShowRailPart2			= 0

return

"carriage":

	drawindex 10

	if bBreakCarriageLine then
		if bShowCarriagePart1 then
			pen carriagePen
			if aboveStory then
				LINE_TYPE carriageLineType
			else
				if	(drawPart[1] and drawDashed[1]) then
					LINE_TYPE dash_line
				else
					LINE_TYPE carriageLineType
				endif
			endif

			poly2_b 9, 1+2+4+64, gs_fill_pen, gs_back_pen,
				beamRadIn,0,1,
				0,0,900,
				0,carrBreakLineDistAngle, 4000,
				beamRadIn*COS(carrBreakLineDistAngle),beamRadIn*SIN(carrBreakLineDistAngle),1,
				beamRadOut*COS(carrBreakLineDistAngle),beamRadOut*SIN(carrBreakLineDistAngle),1,
				0,0,900,
				0,-carrBreakLineDistAngle,4000,
				beamRadOut,0,1,
				beamRadIn,0,-1
		endif

		if bShowCarriagePart2 then
			pen carriagePen
			if aboveStory then
				LINE_TYPE carriageLineType
			else
				if	(drawPart[2] and drawDashed[2]) then
					LINE_TYPE dash_line
				else
					LINE_TYPE carriageLineType
				endif
			endif

			poly2_b 9, 1 + 2 * gs_FillAbove + 4+64, gs_fill_pen, gs_back_pen,
				beamRadIn,0,1,
				0,0,900,
				0,carrEndAngle - carrBreakLineDistAngle, 4000,
				beamRadIn*COS(carrEndAngle - carrBreakLineDistAngle),beamRadIn*SIN(carrEndAngle - carrBreakLineDistAngle),1,
				beamRadOut*COS(carrEndAngle - carrBreakLineDistAngle),beamRadOut*SIN(carrEndAngle - carrBreakLineDistAngle),1,
				0,0,900,
				0,-(carrEndAngle - carrBreakLineDistAngle),4000,
				beamRadOut,0,1,
				beamRadIn,0,-1
		endif
	else
		if aboveStory then
			LINE_TYPE carriageLineType
		else
		pen carriagePen
			if drawPart[3] then
				if (drawDashed[3]) then
					LINE_TYPE dash_line
				else
					LINE_TYPE carriageLineType
				endif
			else
				if	(NOT(bCarrAboveBreakLine) and drawDashed[1]) or\
					((bCarrAboveBreakLine) and drawDashed[2]) then
					LINE_TYPE dash_line
				else
					LINE_TYPE carriageLineType
				endif
			endif
		endif

		if rnu * fokszog < 360 then
			poly2_b 9, 1 + 2 * (NOT(bCarrAboveBreakLine) + bCarrAboveBreakLine * gs_FillAbove) + 4+64, gs_fill_pen, gs_back_pen,
				beamRadIn,0,1,
				0,0,900,
				0,carrEndAngle, 4000,
				beamRadIn*COS(carrEndAngle),beamRadIn*SIN(carrEndAngle),1,
				beamRadOut*COS(carrEndAngle),beamRadOut*SIN(carrEndAngle),1,
				0,0,900,
				0,-carrEndAngle,4000,
				beamRadOut,0,1,
				beamRadIn,0,-1
		else
			poly2_b 10, 1 + 2 * (NOT(bCarrAboveBreakLine) + bCarrAboveBreakLine * gs_FillAbove) + 4+64, gs_fill_pen, gs_back_pen,
				beamRadOut, 0, 1,
				0, 0, 900,
				0, 180, 4001,
				0, 180, 4001,
				beamRadOut, 0, -1,

				beamRadIn, 0, 1,
				0, 0, 900,
				0, 180, 4001,
				0, 180, 4001,
				beamRadIn, 0, -1
		endif
	endif

return

]]>
</Script_2D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_1D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
EPS = 0.0001

dim stNoseTypes[2]
	stNoseTypes[1] = `Обычные`
	stNoseTypes[2] = `Скругленные`

NOSE_NORMAL 			= 1
NOSE_ROUNDED			= 2

SIDE_LEFT				= 1
SIDE_RIGHT				= 2

dim stRiseRunText[7]
	stRiseRunText[1] = `Кол-во x Подступенок = Высота Марша`
	stRiseRunText[2] = `Кол-во Проступей/Подступенок @`
	stRiseRunText[3] = `Кол-во х Проступь х Подступенок`
	stRiseRunText[4] = `Кол-во х Подступенок х Проступь`
	stRiseRunText[5] = `Кол-во <текст подступенка> Подступенок / Проступь`
	stRiseRunText[6] = `Кол-во <текст подступенка> // Подступенок / Проступь`
	stRiseRunText[7] = `Специальный Текст`

dim stStartSymbolStyles[4]
	stStartSymbolStyles[1] = `Стиль 1`
	stStartSymbolStyles[2] = `Стиль 2`
	stStartSymbolStyles[3] = `Стиль 3`
	stStartSymbolStyles[4] = `Нет`

! gs_StartEndStyle_m
STARTSYMB_STYLE1	= 1
STARTSYMB_STYLE2	= 2
STARTSYMB_STYLE3	= 3
STARTSYMB_NONE		= 4

dim stWalkingDirUPDN[3]
	stWalkingDirUPDN[1] = `Нет`
	stWalkingDirUPDN[2] = `ВВЕРХ`
	stWalkingDirUPDN[3] = `ВНИЗ`

! walkingDirUPDN_m
WALKDIRSTR_NONE			= 1
WALKDIRSTR_UP			= 2
WALKDIRSTR_DOWN			= 3

dim stRailPosition[4]
	stRailPosition[1] = `Оба`
	stRailPosition[2] = `Справа`
	stRailPosition[3] = `Слева`
	stRailPosition[4] = `Нет`

! rail_m
RAILPOS_BOTH	= 1
RAILPOS_RIGHT	= 2
RAILPOS_LEFT	= 3
RAILPOS_NONE	= 4

dim stDetlevel2D[2]
	stDetlevel2D[1] = `Зависит от Масштаба`
	stDetlevel2D[2] = `Специальный`

DET2D_SCALESENSITIVE	= 1
DET2D_CUSTOM			= 2

dim stDetlevel3D[3]
	stDetlevel3D[1] = `Детальный`
	stDetlevel3D[2] = `Простой`
	stDetlevel3D[3] = `Откл.`

! gs_detlevel_3D_m
DET3D_OFF		= 0
DET3D_SIMPLE	= 1
DET3D_DETAILED	= 2

dim stRailTypes[11]
	stRailTypes[ 1] = `Балюстрада Ограждения`
	stRailTypes[ 2] = `Параллельные Прутья`
	stRailTypes[ 3] = `Простой Брусок`
	stRailTypes[ 4] = `Объемная Рама с Панелью`
	stRailTypes[ 5] = `Объемная Рама`
	stRailTypes[ 6] = `Панель Ограждения`
	stRailTypes[ 7] = `Стойки Ограждения с Балясинами`
	stRailTypes[ 8] = `Стойки с Леерами`
	stRailTypes[ 9] = `Деревянная Балюстрада`
	stRailTypes[10] = `Стойки Ограждения с Брусками`
	stRailTypes[11] = `Как и Правое`

dim stShowCarriageValues[5]
	stShowCarriageValues[1]	= `Всегда`
	stShowCarriageValues[2]	= `До 1:20`
	stShowCarriageValues[3]	= `До 1:50`
	stShowCarriageValues[4]	= `До 1:100`
	stShowCarriageValues[5]	= `До 1:200`

! leftRailType_m, rightRailType_m
RAIL_BALUSTRADE				= 1
RAIL_PARALLEL_BARS			= 2
RAIL_SIMPLE_BAR				= 3
RAIL_SOLID_FRAME_FILLED		= 4
RAIL_SOLID_FRAME			= 5
RAIL_SOLID					= 6
RAIL_POST_WITH_BALUSTERS	= 7
RAIL_WIRED					= 8
RAIL_WOODEN_BALUSTRADE		= 9
RAIL_POST_WITH_BARS			= 10
RAIL_SAMERAILS				= 11

dim stPostSymbolType[5]
	stPostSymbolType[1] = `Тип 1`
	stPostSymbolType[2] = `Тип 2`
	stPostSymbolType[3] = `Тип 3`
	stPostSymbolType[4] = `Тип 4`
	stPostSymbolType[5] = `Нет`

dim stTopTread[2]
	stTopTread[1] = `на Уровне Пола`
	stTopTread[2] = `Ниже Уровня Пола`

! iTopTread
TOPTREAD_AT_FLOOR_LEVEL		= 1
TOPTREAD_BELOW_FLOOR_LEVEL	= 2

dim stFirstTread[2]
	stFirstTread[1] = `на Уровне Пола`
	stFirstTread[2] = `Выше Уровня Пола`

! iFirstTread
FIRSTTREAD_AT_FLOOR_LEVEL		= 1
FIRSTTREAD_ABOVE_FLOOR_LEVEL	= 2

dim stFlightSectionType[2]
	stFlightSectionType[1] = `без Косоура`
	stFlightSectionType[2] = `с Косоуром`

! iFlightSectionType
FLIGHTSECTION_WITHOUT_SPINEBEAM	= 1
FLIGHTSECTION_WITH_SPINEBEAM	= 2

dim stLowerJunctionType[2]
	stLowerJunctionType[1] = `Первый Этаж`
	stLowerJunctionType[2] = `Пол или Площадка`

! iLowerJunctionType
LOWERJUNCTION_GROUND_FLOOR		= 1
LOWERJUNCTION_FLOOR_OR_LANDING	= 2

dim stHandrailStyle[2]
	stHandrailStyle[1] = `Прямоугольные`
	stHandrailStyle[2] = `Круглые`

! hrtr_m, hrtl_m
HANDRAIL_RECTANGULAR	= 1
HANDRAIL_ROUND			= 2

dim stBarStyle[2]
	stBarStyle[1] = `Прямоугольные`
	stBarStyle[2] = `Круглые`

! btypr_m, btypl_m
BAR_RECTANGULAR	= 1
BAR_ROUND		= 2

dim stPostStyle[2]
	stPostStyle[1] = `Прямоугольные`
	stPostStyle[2] = `Круглые`

! ptr_m, ptl_m
POST_RECTANGULAR	= 1
POST_ROUND			= 2

dim stBoardStyle[2]
	stBoardStyle[1] = `Прямоугольные`
	stBoardStyle[2] = `Круглые`

! btr_m, btl_m
BOARD_RECTANGULAR	= 1
BOARD_ROUND			= 2

dim stCalculationMode[2]
	stCalculationMode[1] = `Кол-во Подступенков`
	stCalculationMode[2] = `Высота Ступени`

! iCalculationMode
CALCMODE_NO_OF_RISERS	= 1
CALCMODE_TREAD_HEIGHT	= 2

dim stArrowStyle[9]
	stArrowStyle[1] = `Стиль 1`
	stArrowStyle[2] = `Стиль 2`
	stArrowStyle[3] = `Стиль 3`
	stArrowStyle[4] = `Стиль 4`
	stArrowStyle[5] = `Стиль 5`
	stArrowStyle[6] = `Стиль 6`
	stArrowStyle[7] = `Стиль 7`
	stArrowStyle[8] = `Стиль 8`
	stArrowStyle[9] = `Стиль 9`

! arrow_style_m
ARROW_STYLE_1 = 1
ARROW_STYLE_2 = 2
ARROW_STYLE_3 = 3
ARROW_STYLE_4 = 4
ARROW_STYLE_5 = 5
ARROW_STYLE_6 = 6
ARROW_STYLE_7 = 7
ARROW_STYLE_8 = 8
ARROW_STYLE_9 = 9

! -------------- 2D Symbol variables --------------

! gs_SymbolType_m
SYMBOL_TYPE1	= 1
SYMBOL_TYPE2	= 2
SYMBOL_TYPE3	= 3
SYMBOL_TYPE4	= 4
SYMBOL_TYPE5	= 5
SYMBOL_TYPE6	= 6
SYMBOL_TYPE7	= 7
SYMBOL_TYPE8	= 8
SYMBOL_TYPE9	= 9
SYMBOL_TYPE10	= 10
SYMBOL_TYPE11	= 11
SYMBOL_TYPE12	= 12
SYMBOL_TYPE13	= 13
SYMBOL_TYPE14	= 14
SYMBOL_TYPE15	= 15
SYMBOL_TYPE16	= 16
SYMBOL_TYPE17	= 17
SYMBOL_TYPE18	= 18
SYMBOL_TYPE19	= 19
SYMBOL_TYPE20	= 20

dim stStairSymbolTypes[20]
	stStairSymbolTypes[ 1] = `Тип 1`
	stStairSymbolTypes[ 2] = `Тип 2`
	stStairSymbolTypes[ 3] = `Тип 3`
	stStairSymbolTypes[ 4] = `Тип 4`
	stStairSymbolTypes[ 5] = `Тип 5`
	stStairSymbolTypes[ 6] = `Тип 6`
	stStairSymbolTypes[ 7] = `Тип 7`
	stStairSymbolTypes[ 8] = `Тип 8`
	stStairSymbolTypes[ 9] = `Тип 9`
	stStairSymbolTypes[10] = `Тип 10`
	stStairSymbolTypes[11] = `Тип 11`
	stStairSymbolTypes[12] = `Тип 12`
	stStairSymbolTypes[13] = `Тип 13`
	stStairSymbolTypes[14] = `Тип 14`
	stStairSymbolTypes[15] = `Тип 15`
	stStairSymbolTypes[16] = `Тип 16`
	stStairSymbolTypes[17] = `Тип 17`
	stStairSymbolTypes[18] = `Тип 18`
	stStairSymbolTypes[19] = `Тип 19`
	stStairSymbolTypes[20] = `Тип 20`

! iSymbolGroup
SYMBOLGROUP_TYPE1	= 1
SYMBOLGROUP_TYPE2	= 2
SYMBOLGROUP_TYPE3	= 3
SYMBOLGROUP_TYPE4	= 4
SYMBOLGROUP_TYPE5	= 5
SYMBOLGROUP_TYPE6	= 6
SYMBOLGROUP_TYPE7	= 7
SYMBOLGROUP_TYPE8	= 8

dim stSymbolGroup[8]
	stSymbolGroup[1] = `Тип 1`
	stSymbolGroup[2] = `Тип 2`
	stSymbolGroup[3] = `Тип 3`
	stSymbolGroup[4] = `Тип 4`
	stSymbolGroup[5] = `Тип 5`
	stSymbolGroup[6] = `Тип 6`
	stSymbolGroup[7] = `Тип 7`
	stSymbolGroup[8] = `Тип 8`

dim	iEnabledSymbolTypes[8][3]
	iEnabledSymbolTypes[1][1] = 1
	iEnabledSymbolTypes[1][2] = 6
	iEnabledSymbolTypes[1][3] = 13

	iEnabledSymbolTypes[2][1] = 2
	iEnabledSymbolTypes[2][2] = 7
	iEnabledSymbolTypes[2][3] = 14

	iEnabledSymbolTypes[3][1] = 3
	iEnabledSymbolTypes[3][2] = 8
	iEnabledSymbolTypes[3][3] = 15

	iEnabledSymbolTypes[4][1] = 4
	iEnabledSymbolTypes[4][2] = 9
	iEnabledSymbolTypes[4][3] = 16

	iEnabledSymbolTypes[5][1] = 5
	iEnabledSymbolTypes[5][2] = 10
	iEnabledSymbolTypes[5][3] = 17

	iEnabledSymbolTypes[6][1] = 4
	iEnabledSymbolTypes[6][2] = 11
	iEnabledSymbolTypes[6][3] = 18

	iEnabledSymbolTypes[7][1] = 4
	iEnabledSymbolTypes[7][2] = 11
	iEnabledSymbolTypes[7][3] = 19

	iEnabledSymbolTypes[8][1] = 5
	iEnabledSymbolTypes[8][2] = 12
	iEnabledSymbolTypes[8][3] = 20


! iScaleType
SCALE_10		= 10
SCALE_20		= 20
SCALE_50		= 50
SCALE_100		= 100
SCALE_200		= 200
SCALE_500		= 500

SCALE_1_1		= 1
SCALE_1_4		= 4
SCALE_1_8		= 8
SCALE_1_16		= 16
SCALE_1_24		= 24
SCALE_1_48		= 48
SCALE_1_96		= 96
SCALE_1_192		= 192
SCALE_CUSTOM	= 999

dim	iScaleType[15]
	iScaleType[1]	= SCALE_10
	iScaleType[2]	= SCALE_20
	iScaleType[3]	= SCALE_50
	iScaleType[4]	= SCALE_100
	iScaleType[5]	= SCALE_200
	iScaleType[6]	= SCALE_500
	iScaleType[7]	= SCALE_1_1
	iScaleType[8]	= SCALE_1_4
	iScaleType[9]	= SCALE_1_8
	iScaleType[10]	= SCALE_1_16
	iScaleType[11]	= SCALE_1_24
	iScaleType[12]	= SCALE_1_48
	iScaleType[13]	= SCALE_1_96
	iScaleType[14]	= SCALE_1_192
	iScaleType[15]	= SCALE_CUSTOM

dim stScaleType[15]
	stScaleType[1]	= `1:10`
	stScaleType[2]	= `1:20`
	stScaleType[3]	= `1:50`
	stScaleType[4]	= `1:100`
	stScaleType[5]	= `1:200`
	stScaleType[6]	= `1:500`
	
	stScaleType[7]	= `1'=1'-0"`
	stScaleType[8]	= `3"=1'-0"`
	stScaleType[9]	= `1 1/2"=1'-0"`
	stScaleType[10]	= `3/4"=1'-0"`
	stScaleType[11]	= `1/2"=1'-0"`
	stScaleType[12]	= `1/4"=1'-0"`
	stScaleType[13]	= `1/8"=1'-0"`
	stScaleType[14]	= `1/16"=1'-0"`
	stScaleType[15]	= `Специальный Масштаб`

if iScaleChangeSM = SCALE_CUSTOM then
	_iScaleSM = gs_ScaleChangeSM
else
	_iScaleSM = iScaleChangeSM
endif
if iScaleChangeMD = SCALE_CUSTOM then
	_iScaleMD = gs_ScaleChangeMD
else
	_iScaleMD = iScaleChangeMD
endif

! -------------- End of 2D Symbol variables --------------


PARAMETERS cfs=1


IF thd < pth*2 THEN PARAMETERS thd=2*pth+td

IF r < flw+0.05 THEN
	PARAMETERS r=flw+0.05
ENDIF

IF wldo<0.05 THEN
	PARAMETERS wldo=0.05
ENDIF


!! *** T R E A D  S T Y L E  and P A R A M E T E R S
IF iNoseType = NOSE_ROUNDED THEN		!! no riser
	covery=0
	covthicky=0
	ns=0
ENDIF

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

IF ad THEN
	IF iCalculationMode = CALCMODE_TREAD_HEIGHT THEN

		_rnu= int(zzyzx/pth)

		IF fra(zzyzx/pth) > 0.5 THEN
			_rnu = _rnu+1
		ENDIF

		_th = zzyzx/_rnu
		_td = abs(thd - 2 * _th)


!		values "rnu" _rnu, CUSTOM
		PARAMETERS rnu=_rnu

!		values "th" _th, CUSTOM
		PARAMETERS th=_th

!		values "td" _td, CUSTOM
		PARAMETERS td=_td

		lock "rnu", "td", "th"
	else								    !No. of Risers
		_th = zzyzx/rnu
		_pth= _th
		_td = abs(thd-2*_th)
		values "th" _th, CUSTOM
		values "pth" _pth, CUSTOM
		values "td" _td, CUSTOM
		PARAMETERS th=_th, pth=_pth, td=_td
		lock "td", "th"
	ENDIF
else
	lock "pth", "thd"
ENDIF

nRiser = rnu
if iTopTread = TOPTREAD_AT_FLOOR_LEVEL then
	numTread = rnu
else	! Below Floor Level
	numTread = rnu - 1
endif
if iFirstTread = FIRSTTREAD_AT_FLOOR_LEVEL then numTread = numTread + 1

!				OTHER
rnu=rnu+1
k=2*r*pi
sst=sst+th
mtd=td*r/wldo

PARAMETERS tdor=mtd
lock "tdor"

fordul=mtd*rnu/k
fokszog=2*asn(mtd/(2*r))

resolka=(360.0/fokszog)*res

stepup = (th*rnu)/(resolka*fordul)

coss= td / sqr(th*th+td*td)

!rescs=int(res*360/fokszog)/2
!IF rescs < 3 THEN rescs=3

if bSameRails then
!!!	depthTreadOut			= depthTreadIn
	roffl					= roffr
	hrl						= hrr
	dsl						= dsr
	fswl					= fswr
	fthl					= fthr
	ftwl					= ftwr
	fbwl					= fbwr
	bwl						= bwr
	bthl					= bthr
	abdistl					= abdistr
	pmatl					= pmatr
	fmatl					= fmatr
	bmatl					= bmatr
	bhl						= bhr
	nbl						= nbr
	btypl_m					= btypr_m
	bdl						= bdr
	fdfl					= fdfr
	hrtl_m					= hrtr_m
	hrdl					= hrdr
	hrwl					= hrwr
	hrhl					= hrhr
	hrol					= hror
	ptl_m					= ptr_m
	npl						= npr
	pdl						= pdr
	pwl						= pwr
	pthl					= pthr
	btl_m					= btr_m
	nbtl					= nbtr
	sbhl					= sbhr
!!!	gs_PostBaseTypeL_m		= gs_PostBaseTypeR_m
!!!	gs_PostBaseOverhangL	= gs_PostBaseOverhangR
!!!	OverhangLBottom			= OverhangRBottom
!!!	OverhangLTop			= OverhangRTop
!!!	roml					= romr
!!!	roml_m					= romr_m
!!!	rmml_m					= romr_m
endif

bComplexRailRight		= (rightRailType_m > 6)
if bSameRails then
	bComplexRailLeft 	= (rightRailType_m > 6)
else
	bComplexRailLeft 	= (leftRailType_m > 6)
endif

if NOT(bComplexRailLeft) then
	handRailWidthL = fthl
else
	IF hrtl_m = HANDRAIL_ROUND THEN
		handRailWidthL = hrdl
	ELSE
		handRailWidthL = hrwl
	ENDIF
endif
if NOT(bComplexRailRight) then
	handRailWidthR = fthr
else
	IF hrtr_m = HANDRAIL_ROUND THEN
		handRailWidthR = hrdr
	ELSE
		handRailWidthR = hrwr
	ENDIF
endif

bEnableCarriageLine		= (iFlightSectionType = FLIGHTSECTION_WITH_SPINEBEAM)

]]>
</Script_1D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_PR SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_PR>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_UI SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
ui_dialog `Параметры Лестницы`

bCustom2dDetlevel = (gs_detlevel_2D_m = DET2D_CUSTOM)

dim stStairUI[128]
	for i = 1 to 127
		stStairUI[i] = ""
	next i

	stStairUI[1] = `2D-детализация`
	stStairUI[2] = `Масштаб`
	stStairUI[3] = `Тип Маркера Разрыва`
	stStairUI[4] = `Видимые Конструкции`
	stStairUI[5] = `Штриховка Фона`
	stStairUI[6] = `Перо Линии`
	stStairUI[7] = `Тип Линии`
	stStairUI[8] = `Перо Штриховки`
	stStairUI[9] = `Перо Фона Штриховки`
	stStairUI[10] = `Невидимые Конструкции`
	stStairUI[11] = `Перо Линии Всхода`
	stStairUI[12] = `Тип Линии Всхода`
	stStairUI[13] = `Конец Линии Всхода`
	stStairUI[14] = `Начало Линии Всхода`
	stStairUI[15] = `Перо Штриховки (0 - нет)`
	stStairUI[16] = `Перо Штрих. Выше (0 - нет)`
	stStairUI[17] = `Тип Шрифта`
	stStairUI[18] = `Начать с`
	stStairUI[19] = `Формат`
	stStairUI[20] = `Размер Шрифта`
	stStairUI[21] = `Специальный Текст 1`
	stStairUI[22] = `Перо Текста`
	stStairUI[23] = `Специальный Текст 2`
	stStairUI[24] = `Текст Подъема и Спуска`
	stStairUI[25] = `Текст`
	stStairUI[26] = `Тип Символа Стойки`
	stStairUI[27] = `Тип Линии Стойки`
	stStairUI[28] = `Перо Линии Стойки`
	stStairUI[29] = `Линия Невидимой Тетивы`
	stStairUI[30] = `Перо Невидимой Тетивы`
	stStairUI[31] = `2D выше Собственного Этажа`
	stStairUI[32] = `Лестница`
	stStairUI[33] = `Ограждение`
	stStairUI[34] = `Основание`
	stStairUI[35] = `Панели Ограждения`
	stStairUI[36] = `Проступь`
	stStairUI[37] = `Обвязка`
	stStairUI[38] = `Подступенок`
	stStairUI[39] = `Стойка`
	stStairUI[40] = `Поручень`
	stStairUI[41] = `Штриховка выше Линии Разрыва`
	stStairUI[42] = `Показ Линии Всхода`
	stStairUI[43] = `Стрелка к Линии Разрыва`
	stStairUI[44] = `Показ Нумерации`
	stStairUI[45] = `Текст Подступенков/Проступей`
	stStairUI[46] = `Читаемый Текст`
	stStairUI[47] = `Показ Ограждения на Плане`
	stStairUI[48] = `Показ Осей Ограждения`
	stStairUI[49] = `Показ Тетивы на Плане Этажа`
	stStairUI[50] = `Символ Зависит от Этажа`
	stStairUI[51] = `Линия Разрыва`
	stStairUI[52] = `Показ 2D ниже Линии Разрыва`
	stStairUI[53] = `Показ 2D выше Линии Разрыва`
	stStairUI[54] = `Отбрасывание Теней`
	stStairUI[55] = `Единицы Измерения Рабочей Среды Проекта`
	stStairUI[56] = `Ориентация`
	stStairUI[57] = `Ориентация Текста в Символе`

	stStairUI[80] = `Показ Проступей`
	stStairUI[81] = `Линия Всхода выше Линии Разрыва`

	stStairUI[86] = `Описание`
	stStairUI[87] = `Текст Спуска`
	stStairUI[88] = `Тип Видимой Линии`
	stStairUI[89] = `Тип Невидимой Линии`
	stStairUI[90] = `Размер Символа`
	stStairUI[91] = `Текст Подступенка`
	stStairUI[92] = `мм`
	stStairUI[93] = `п.`

	stStairUI[94] = `Перо Контура`
	stStairUI[95] = `Тип Штриховки`
	stStairUI[96] = `Перо Штриховки`
	stStairUI[97] = `Перо Фона Штриховки`
	stStairUI[98] = `Подступенок`

	stStairUI[99] = `Показ Ограждения выше Линии Разрыва`
	stStairUI[100] = `2D-символ`
	stStairUI[101] = stPostSymbolType[1]
	stStairUI[102] = stPostSymbolType[2]
	stStairUI[103] = stPostSymbolType[3]
	stStairUI[104] = stPostSymbolType[4]
	stStairUI[105] = stPostSymbolType[5]

	stStairUI[106] = stDetlevel2D[1]
	stStairUI[107] = stDetlevel2D[2]

	stStairUI[110] = stWalkingDirUPDN[1]
	stStairUI[111] = stWalkingDirUPDN[2]
	stStairUI[112] = stWalkingDirUPDN[3]

	stStairUI[116] = `Выровнять по Символу`
	stStairUI[117] = `Параллельно Линии Всхода`
	stStairUI[118] = `Читаемый`

	stStairUI[119] = stRiseRunText[1]
	stStairUI[120] = stRiseRunText[2]
	stStairUI[121] = stRiseRunText[3]
	stStairUI[122] = stRiseRunText[4]
	stStairUI[123] = stRiseRunText[5]
	stStairUI[124] = stRiseRunText[6]
	stStairUI[125] = stRiseRunText[7]

	stStairUI[126] = `Ограждение Справа`
	stStairUI[127] = `Ограждение Слева`
	stStairUI[128] = `Показ Тетивы`

dim stRailTypesForUI[11]
	stRailTypesForUI[ 1] = `Балюстрада`
	stRailTypesForUI[ 2] = `Параллельные Прутья`
	stRailTypesForUI[ 3] = `Простой Брусок`
	stRailTypesForUI[ 4] = `Объемная Рама с Панелью`
	stRailTypesForUI[ 5] = `Объемная Рама`
	stRailTypesForUI[ 6] = `Панель`
	stRailTypesForUI[ 7] = `Стойки с Балясинами`
	stRailTypesForUI[ 8] = `Стойки с Прутьями`
	stRailTypesForUI[ 9] = `Деревянная Балюстрада`
	stRailTypesForUI[10] = `Стойки с Брусками`
	stRailTypesForUI[11] = `Как и Правое`

dim stStairUITabNames[15]
	for i = 1 to 15
		stStairUITabNames[i] = ""
	next i

	stStairUITabNames[1] = `Типы 2D-символа`
	stStairUITabNames[2] = `Реквизиты 2D-символа`
	stStairUITabNames[4] = `Подъем и Спуск, Нумерация`
	stStairUITabNames[5] = `Ограждение и Тетива в Символе`
	stStairUITabNames[8] = `Тип Ограждения - Справа`
	stStairUITabNames[9] = `Тип Ограждения - Слева`
	stStairUITabNames[13] = `Спуск и Подъем`
	stStairUITabNames[15] = `Стили Стрелки и Начальной Точки`

call "ui_stairs" parameters gs_ui_current_page		= gs_ui_current_page,
! --- 2D symbol type ---
			gs_detlevel_2D_m		= gs_detlevel_2D_m,
			gs_ScaleChangeSM		= gs_ScaleChangeSM,
			iScaleChangeSM			= iScaleChangeSM,
			gs_ScaleChangeMD		= gs_ScaleChangeMD,
			iScaleChangeMD			= iScaleChangeMD,
			stScaleType				= stScaleType,
			bCustom2dDetlevel		= bCustom2dDetlevel,
			gs_SymbolType_m			= gs_SymbolType_m,
			iSymbolGroup			= iSymbolGroup,
! --- 2D symbol attributes ---
			bEnableBreakLineStyle	= 0,
			gs_cont_pen				= gs_cont_pen,
			gs_DashLinePen			= gs_DashLinePen,
			solid_line				= solid_line,
			dash_line				= dash_line,
			gs_fill_type			= gs_fill_type,
			gs_fill_pen				= gs_fill_pen,
			gs_back_pen				= gs_back_pen,
			gs_FillAbove			= gs_FillAbove,
! --- Walkline ---
			arrow_style				= arrow_style,
			gs_StartEndStyle		= gs_StartEndStyle,
! --- Text Display ---
			fontType				= fontType,
			bShowNumbering			= bShowNumbering,
			bShowRiseAndRunText		= bShowRiseAndRunText,
			nStartNumbering			= nStartNumbering,
			gs_NumTextSize			= gs_NumTextSize,
			gs_text_size_pt_num 	= gs_text_size_pt_num,
			gs_NumTextPen			= gs_NumTextPen,
			gs_RiseRunText			= gs_RiseRunText,
			iRiseRunText			= iRiseRunText,
			gs_CustomText1			= gs_CustomText1,
			gs_CustomText2			= gs_CustomText2,
			gs_customText_rise		= gs_customText_rise,
			fontsize				= fontsize,
			gs_text_size_pt			= gs_text_size_pt,
			gs_text_pen				= gs_text_pen,
			walkingDirUPDN			= walkingDirUPDN,
			bEnableCustomDownText	= 0,
			UPDNfontsize			= UPDNfontsize,
			gs_text_size_pt_UpDn	= gs_text_size_pt_UpDn,
			UPDNfontpen				= UPDNfontpen,
			typeTextRotation_RiseRun 	= typeTextRotation_RiseRun,
			typeTextRotation_Num 		= typeTextRotation_Num,
			typeTextRotation_UpDn 		= typeTextRotation_UpDn,
			bEnableDescription		= 0,
! --- Rail & Carriage 2D ---
			bShowRailOnFloorPlan	= bShowRailOnFloorPlan,
			railLineType			= railLineType,
			railPen					= railPen,
			bShowRailAxis			= bShowRailAxis,
			railAxisLineType		= railAxisLineType,
			gs_RailAxisPen			= gs_RailAxisPen,
			bSymbolic2D				= bSymbolic2D,
			postSymbolType			= postSymbolType,
			iPostSymbolType			= iPostSymbolType,
			postLineType			= postLineType,
			postPen					= postPen,
			bEnableCarriageLine		= bEnableCarriageLine,
			bShowCarriage			= bShowCarriage,
			carriageLineType		= carriageLineType,
			carriagePen				= carriagePen,
! --- Rail Types ---
			bRightRail				= bRightRail,
			bLeftRail				= bLeftRail,
			leftRailType			= leftRailType,
			rightRailType			= rightRailType,
			leftRailType_m			= leftRailType_m,
			rightRailType_m			= rightRailType_m,
! --- String resources ---
			stStairUITabNames		= stStairUITabNames,
			stStairSymbolTypes		= stStairSymbolTypes,
			stSymbolGroup			= stSymbolGroup,
			stRailTypesForUI		= stRailTypesForUI,
			stRailTypes				= stRailTypes,
			stStairUI				= stStairUI,
			bEnableWired02Rail		= 0,
! --- Stair Type ---
			iStairType				= 7		! Spiral RC
end


]]>
</Script_UI>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_VL SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
call "FM_types" parameters all
call "ui_stairs" parameters gs_ui_current_page	= gs_ui_current_page

! ---------- Length Unit ----------
w_units_form = ""
rrr					= request("Linear_dimension", "", w_units_form)
bLinearDimIsMetric	= (strstr(w_units_form, "m") > 0)


! ---------- 3D detail level ----------
values{2} "gs_detlevel_3D_m" 	DET3D_DETAILED,		stDetlevel3D[1],
								DET3D_SIMPLE,		stDetlevel3D[2],
								DET3D_OFF,			stDetlevel3D[3]

if gs_detlevel_3D_m = DET3D_SIMPLE then
	lock "gs_resol"
	hideparameter "gs_resol"
endif

if gs_detlevel_3D_m = DET3D_OFF then
	lock "gs_resol", "gs_shadow"
	hideparameter "gs_resol", "gs_shadow"
endif


!! ---------- 2D detail level ----------
values{2} "gs_detlevel_2D_m"	DET2D_SCALESENSITIVE,	stDetlevel2D[1],
								DET2D_CUSTOM,			stDetlevel2D[2]

!! ---------- Symbol Type ----------
if gs_detlevel_2D_m = DET2D_SCALESENSITIVE then
	values{2} "iSymbolGroup"	SYMBOLGROUP_TYPE1,	stSymbolGroup[1],
								SYMBOLGROUP_TYPE2,	stSymbolGroup[2],
								SYMBOLGROUP_TYPE3,	stSymbolGroup[3],
								SYMBOLGROUP_TYPE4,	stSymbolGroup[4],
								SYMBOLGROUP_TYPE5,	stSymbolGroup[5],
								SYMBOLGROUP_TYPE6,	stSymbolGroup[6],
								SYMBOLGROUP_TYPE7,	stSymbolGroup[7],
								SYMBOLGROUP_TYPE8,	stSymbolGroup[8]

	lock			"gs_SymbolType_m"
	hideparameter	"gs_SymbolType_m"


	!! ----------------- Simple to Middle Scale -----------------
	if bLinearDimIsMetric then
		_iEnableScaleSMTypes	= 2 + 4 + 8 + 16 + 32 + 64
	else
		_iEnableScaleSMTypes	= 128 + 256 + 512 + 1024 + 2048 + 4096 + 8192 + 16384
	endif

	dim _iEnableScaleSMTypeValueList[]
	dim _stEnableScaleSMTypeValueList[]
	j = 1
	for i = 1 to vardim1(iScaleType)
		if bittest(_iEnableScaleSMTypes, i) then
			_iEnableScaleSMTypeValueList[j] = iScaleType[i]
			_stEnableScaleSMTypeValueList[j] = stScaleType[i]
			j = j + 1
		endif
	next i
	_iEnableScaleSMTypeValueList[j] = iScaleType[15]
	_stEnableScaleSMTypeValueList[j] = stScaleType[15]
	values{2} "iScaleChangeSM" _iEnableScaleSMTypeValueList, _stEnableScaleSMTypeValueList
	if iScaleChangeSM = SCALE_CUSTOM then
		values "gs_ScaleChangeSM"	range (1,)
	else
		gs_ScaleChangeSM = iScaleChangeSM
		parameters	gs_ScaleChangeSM = gs_ScaleChangeSM

		lock			"gs_ScaleChangeSM"
		hideparameter	"gs_ScaleChangeSM"
	endif

	
	!! ----------------- Middle to Detailed Scale -----------------
	if bLinearDimIsMetric then
		_iEnableScaleMDTypes	= 2 + 4 + 8 + 16 + 32 + 64
	else
		_iEnableScaleMDTypes	= 128 + 256 + 512 + 1024 + 2048 + 4096 + 8192 + 16384
	endif

	dim _iEnableScaleMDTypeValueList[]
	dim _stEnableScaleMDTypeValueList[]
	j = 1
	for i = 1 to vardim1(iScaleType)
		if bittest(_iEnableScaleMDTypes, i) then
			if iScaleChangeSM = SCALE_CUSTOM then
				if gs_ScaleChangeSM > iScaleType[i] then
					_iEnableScaleMDTypeValueList[j] = iScaleType[i]
					_stEnableScaleMDTypeValueList[j] = stScaleType[i]
					j = j + 1
				else
					i = vardim1(iScaleType)
				endif
			else
				_iEnableScaleMDTypeValueList[j] = iScaleType[i]
				_stEnableScaleMDTypeValueList[j] = stScaleType[i]

				if gs_ScaleChangeSM = _iEnableScaleSMTypeValueList[j] then
					i = vardim1(iScaleType)
				else
					j = j + 1
				endif
			endif
		endif
	next i
	_iEnableScaleMDTypeValueList[j] = iScaleType[15]
	_stEnableScaleMDTypeValueList[j] = stScaleType[15]
	values{2} "iScaleChangeMD" _iEnableScaleMDTypeValueList, _stEnableScaleMDTypeValueList

	if iScaleChangeMD = SCALE_CUSTOM then
		values "gs_ScaleChangeMD"	range (, _iScaleSM)
	else
		gs_ScaleChangeMD = iScaleChangeMD
		parameters	gs_ScaleChangeMD = gs_ScaleChangeMD

		lock			"gs_ScaleChangeMD"
		hideparameter	"gs_ScaleChangeMD"
	endif
	if (gs_ScaleChangeMD >= gs_ScaleChangeSM)  then
		gs_ScaleChangeMD = gs_ScaleChangeSM - 1
		parameters	gs_ScaleChangeMD = gs_ScaleChangeMD
	endif
else
	values{2} "gs_SymbolType_m"	SYMBOL_TYPE1,	stStairSymbolTypes[1],
								SYMBOL_TYPE2,	stStairSymbolTypes[2],
								SYMBOL_TYPE3,	stStairSymbolTypes[3],
								SYMBOL_TYPE4,	stStairSymbolTypes[4],
								SYMBOL_TYPE5,	stStairSymbolTypes[5],
								SYMBOL_TYPE6,	stStairSymbolTypes[6],
								SYMBOL_TYPE7,	stStairSymbolTypes[7],
								SYMBOL_TYPE8,	stStairSymbolTypes[8],
								SYMBOL_TYPE9,	stStairSymbolTypes[9],
								SYMBOL_TYPE10,	stStairSymbolTypes[10],
								SYMBOL_TYPE11,	stStairSymbolTypes[11],
								SYMBOL_TYPE12,	stStairSymbolTypes[12],
								SYMBOL_TYPE13,	stStairSymbolTypes[13],
								SYMBOL_TYPE14,	stStairSymbolTypes[14],
								SYMBOL_TYPE15,	stStairSymbolTypes[15],
								SYMBOL_TYPE16,	stStairSymbolTypes[16],
								SYMBOL_TYPE17,	stStairSymbolTypes[17],
								SYMBOL_TYPE18,	stStairSymbolTypes[18],
								SYMBOL_TYPE19,	stStairSymbolTypes[19],
								SYMBOL_TYPE20,	stStairSymbolTypes[20]

	lock			"iSymbolGroup",
					"gs_ScaleChangeSM",
					"iScaleChangeSM",
					"gs_ScaleChangeMD",
					"iScaleChangeMD"
	hideparameter	"iSymbolGroup",
					"gs_ScaleChangeSM",
					"iScaleChangeSM",
					"gs_ScaleChangeMD",
					"iScaleChangeMD"
endif

if iNoseType = NOSE_NORMAL then lock "tproj"

VALUES "tproj" RANGE (0.005,.3 )

values "tt" stTopTread
values "iTopTread" TOPTREAD_AT_FLOOR_LEVEL, TOPTREAD_BELOW_FLOOR_LEVEL

if GLOB_MODPAR_NAME = "tt" then
	n = vardim1(stTopTread)
	iTopTread = TOPTREAD_AT_FLOOR_LEVEL
	for i = 1 to n
		if tt = stTopTread[i] then
			iTopTread = i
			i = n
		endif
	next i
	parameters iTopTread = iTopTread
else
	iTopTread = max(1, min(iTopTread, vardim1(stTopTread)))
	tt = stTopTread[iTopTread]
	parameters	tt = tt,
				iTopTread = iTopTread
endif


values "ft" stFirstTread
values "iFirstTread" FIRSTTREAD_AT_FLOOR_LEVEL, FIRSTTREAD_ABOVE_FLOOR_LEVEL

if GLOB_MODPAR_NAME = "ft" then
	n = vardim1(stFirstTread)
	iFirstTread = FIRSTTREAD_AT_FLOOR_LEVEL
	for i = 1 to n
		if ft = stFirstTread[i] then
			iFirstTread = i
			i = n
		endif
	next i
	parameters iFirstTread = iFirstTread
else
	iFirstTread = max(1, min(iFirstTread, vardim1(stFirstTread)))
	ft = stFirstTread[iFirstTread]
	parameters	ft = ft,
				iFirstTread = iFirstTread
endif


values "fst" stFlightSectionType
values "iFlightSectionType" FLIGHTSECTION_WITHOUT_SPINEBEAM, FLIGHTSECTION_WITH_SPINEBEAM

if GLOB_MODPAR_NAME = "fst" then
	n = vardim1(stFlightSectionType)
	iFlightSectionType = FLIGHTSECTION_WITHOUT_SPINEBEAM
	for i = 1 to n
		if fst = stFlightSectionType[i] then
			iFlightSectionType = i
			i = n
		endif
	next i
	parameters iFlightSectionType = iFlightSectionType
else
	iFlightSectionType = max(1, min(iFlightSectionType, vardim1(stFlightSectionType)))
	fst = stFlightSectionType[iFlightSectionType]
	parameters	fst = fst,
				iFlightSectionType = iFlightSectionType
endif


values "jntl" stLowerJunctionType
values "iLowerJunctionType" LOWERJUNCTION_GROUND_FLOOR, LOWERJUNCTION_FLOOR_OR_LANDING

if GLOB_MODPAR_NAME = "jntl" then
	n = vardim1(stLowerJunctionType)
	iLowerJunctionType = LOWERJUNCTION_GROUND_FLOOR
	for i = 1 to n
		if jntl = stLowerJunctionType[i] then
			iLowerJunctionType = i
			i = n
		endif
	next i
	parameters iLowerJunctionType = iLowerJunctionType
else
	iLowerJunctionType = max(1, min(iLowerJunctionType, vardim1(stLowerJunctionType)))
	jntl = stLowerJunctionType[iLowerJunctionType]
	parameters	jntl = jntl,
				iLowerJunctionType = iLowerJunctionType
endif

values "noseType" stNoseTypes
values "iNoseType" NOSE_NORMAL, NOSE_ROUNDED

if GLOB_MODPAR_NAME = "noseType" then
	iNoseType = NOSE_NORMAL
	if noseType = stNoseTypes[2] then iNoseType = NOSE_ROUNDED
	parameters iNoseType = iNoseType
else
	noseType = stNoseTypes[1]
	if iNoseType = NOSE_ROUNDED then noseType = stNoseTypes[2]
	parameters noseType = noseType
endif


values "PTYP" stCalculationMode
values "iCalculationMode" CALCMODE_NO_OF_RISERS, CALCMODE_TREAD_HEIGHT

if GLOB_MODPAR_NAME = "PTYP" then
	n = vardim1(stCalculationMode)
	iCalculationMode = CALCMODE_NO_OF_RISERS
	for i = 1 to n
		if PTYP = stCalculationMode[i] then
			iCalculationMode = i
			i = n
		endif
	next i
	parameters iCalculationMode = iCalculationMode
else
	iCalculationMode = max(1, min(iCalculationMode, vardim1(stCalculationMode)))
	PTYP = stCalculationMode[iCalculationMode]
	parameters	PTYP = PTYP,
				iCalculationMode = iCalculationMode
endif


values "arrow_style" stArrowStyle
values "arrow_style_m"	ARROW_STYLE_1,
						ARROW_STYLE_2,
						ARROW_STYLE_3,
						ARROW_STYLE_4,
						ARROW_STYLE_5,
						ARROW_STYLE_6,
						ARROW_STYLE_7,
						ARROW_STYLE_8,
						ARROW_STYLE_9

if GLOB_MODPAR_NAME = "arrow_style" then
	n = vardim1(stArrowStyle)
	arrow_style_m = ARROW_STYLE_1
	for i = 1 to n
		if arrow_style = stArrowStyle[i] then
			arrow_style_m = i
			i = n
		endif
	next i
	parameters arrow_style_m = arrow_style_m
else
	arrow_style_m = max(1, min(arrow_style_m, vardim1(stArrowStyle)))
	arrow_style = stArrowStyle[arrow_style_m]
	parameters	arrow_style = arrow_style,
				arrow_style_m = arrow_style_m
endif

values "gs_StartEndStyle" stStartSymbolStyles		! Style 1, Style 2, Style 3, None
values "gs_StartEndStyle_m" STARTSYMB_STYLE1, STARTSYMB_STYLE2, STARTSYMB_STYLE3, STARTSYMB_NONE

if GLOB_MODPAR_NAME = "gs_StartEndStyle" then
	gs_StartEndStyle_m = 1
	for i = 1 to vardim1(stStartSymbolStyles)
		if gs_StartEndStyle = stStartSymbolStyles[i] then
			gs_StartEndStyle_m = i
			i = vardim1(stStartSymbolStyles)
		endif
	next i
	parameters gs_StartEndStyle_m = gs_StartEndStyle_m
else
	gs_StartEndStyle_m = max(1, min(gs_StartEndStyle_m, vardim1(stStartSymbolStyles)))
	gs_StartEndStyle = stStartSymbolStyles[gs_StartEndStyle_m]
	parameters	gs_StartEndStyle_m	= gs_StartEndStyle_m,
				gs_StartEndStyle	= gs_StartEndStyle
endif


! ---------- Rise and Run Text ----------

values "gs_RiseRunText" stRiseRunText
values "iRiseRunText" 1, 2, 3, 4, 5, 6, 99

if GLOB_MODPAR_NAME = "gs_RiseRunText" then
	for i = 1 to vardim1(stRiseRunText)
	   if gs_RiseRunText = stRiseRunText[i]	then iRiseRunText = i
	next i
	if gs_RiseRunText = stRiseRunText[7]	then iRiseRunText = 99
	parameters iRiseRunText = iRiseRunText
else
	if iRiseRunText = 99 then
		gs_RiseRunText = stRiseRunText[7]
	else
		gs_RiseRunText = stRiseRunText[max(1, min(iRiseRunText, vardim1(stRiseRunText)) )]
	endif
	parameters gs_RiseRunText = gs_RiseRunText
endif

values "typeTextRotation_RiseRun" `Читаемый`,`Выровнять по Символу`
values "typeTextRotation_RiseRun_m" 2, 0

if GLOB_MODPAR_NAME = "typeTextRotation_RiseRun" then
	if typeTextRotation_RiseRun = `Читаемый`			then typeTextRotation_RiseRun_m = 2
	if typeTextRotation_RiseRun = `Выровнять по Символу`	then typeTextRotation_RiseRun_m = 0
	parameters typeTextRotation_RiseRun_m = typeTextRotation_RiseRun_m
else
	if typeTextRotation_RiseRun_m = 2					then typeTextRotation_RiseRun = `Читаемый`
	if typeTextRotation_RiseRun_m = 0					then typeTextRotation_RiseRun = `Выровнять по Символу`
	parameters typeTextRotation_RiseRun = typeTextRotation_RiseRun
endif

if not(bShowRiseAndRunText) then
	lock			"gs_RiseRunText","gs_CustomText1", "gs_CustomText2", "gs_customText_rise",
					"fontsize","gs_text_size_pt", "typeTextRotation_RiseRun","gs_text_pen","bUseACLinearUnit"
	hideparameter	"gs_RiseRunText","gs_CustomText1", "gs_CustomText2", "gs_customText_rise",
					"fontsize","gs_text_size_pt", "typeTextRotation_RiseRun","gs_text_pen","bUseACLinearUnit"
endif

if iRiseRunText <> 99 then
	lock 	"gs_CustomText1","gs_CustomText2"
	hideparameter 	"gs_CustomText1","gs_CustomText2"
endif

if iRiseRunText <> 5 & iRiseRunText <> 6 then
	lock "gs_customText_rise"
	hideparameter "gs_customText_rise"
endif

if iRiseRunText = 99 then		! Custom
	if bLinearDimIsMetric then hideparameter	"gs_CustomText2"
endif

! ---------- Numbering ----------

values "typeTextRotation_Num" `Читаемый`,`Выровнять по Символу`
values "typeTextRotation_Num_m" 2, 0

if GLOB_MODPAR_NAME = "typeTextRotation_Num" then
	if typeTextRotation_Num = `Читаемый`			then typeTextRotation_Num_m = 2
	if typeTextRotation_Num = `Выровнять по Символу`	then typeTextRotation_Num_m = 0
	parameters typeTextRotation_Num_m = typeTextRotation_Num_m
else
	if typeTextRotation_Num_m = 2					then typeTextRotation_Num = `Читаемый`
	if typeTextRotation_Num_m = 0					then typeTextRotation_Num = `Выровнять по Символу`
	parameters typeTextRotation_Num= typeTextRotation_Num
endif

if not(bShowNumbering) then
	 lock			"nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen","gs_NumBelow","gs_NumAbove", "typeTextRotation_Num"
	 hideparameter	"nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen","gs_NumBelow","gs_NumAbove", "typeTextRotation_Num"
endif

! ---------- UP and Down ----------
values "walkingDirUPDN" stWalkingDirUPDN		! None, UP, DOWN
values "walkingDirUPDN_m" WALKDIRSTR_NONE, WALKDIRSTR_UP, WALKDIRSTR_DOWN

if GLOB_MODPAR_NAME = "walkingDirUPDN" then
	walkingDirUPDN_m = 1
	for i = 1 to vardim1(stWalkingDirUPDN)
		if walkingDirUPDN = stWalkingDirUPDN[i] then
			walkingDirUPDN_m = i
			i = vardim1(stWalkingDirUPDN)
		endif
	next i
	parameters walkingDirUPDN_m = walkingDirUPDN_m
else
	walkingDirUPDN_m = max(1, min(walkingDirUPDN_m, vardim1(stWalkingDirUPDN)))
	walkingDirUPDN = stWalkingDirUPDN[walkingDirUPDN_m]
	parameters	walkingDirUPDN_m	= walkingDirUPDN_m,
				walkingDirUPDN		= walkingDirUPDN
endif

values "typeTextRotation_UpDn" `Читаемый`,`Параллельно Линии Всхода`,`Выровнять по Символу`
values "typeTextRotation_UpDn_m" 2, 1, 0

if GLOB_MODPAR_NAME = "typeTextRotation_UpDn" then
	if typeTextRotation_UpDn = `Читаемый`					then typeTextRotation_UpDn_m = 2
	if typeTextRotation_UpDn = `Параллельно Линии Всхода`	then typeTextRotation_UpDn_m = 1
	if typeTextRotation_UpDn = `Выровнять по Символу`			then typeTextRotation_UpDn_m = 0
	parameters typeTextRotation_UpDn_m = typeTextRotation_UpDn_m
else
	if typeTextRotation_UpDn_m = 2					then typeTextRotation_UpDn = `Читаемый`
	if typeTextRotation_UpDn_m = 1					then typeTextRotation_UpDn = `Параллельно Линии Всхода`
	if typeTextRotation_UpDn_m = 0					then typeTextRotation_UpDn = `Выровнять по Символу`
	parameters typeTextRotation_UpDn = typeTextRotation_UpDn
endif

if walkingDirUPDN_m = WALKDIRSTR_NONE  then
	 lock			"UPDNfontsize", "gs_text_size_pt_UpDn", "UPDNfontpen","AngUPDN", "typeTextRotation_UpDn"
	 HIDEPARAMETER	"UPDNfontsize", "gs_text_size_pt_UpDn", "UPDNfontpen","AngUPDN", "typeTextRotation_UpDn"
endif

!!! *** RANGE PARAMETERS *** !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

VALUES "ZZYZX" RANGE [2*th,)
VALUES "r" RANGE (0,)
VALUES "flw" range (0,)
VALUES "sst" range (0,)
VALUES "lst" range [0,)
VALUES "lst2" range [0,)
VALUES "beamx" range (0,)
VALUES "beamy" range (0,)

VALUES "wldo" range [r-flw,r]
VALUES "pth" RANGE [0.05,)
VALUES "th" range (0,)
VALUES "td" range (0,)
VALUES "thd" range (0,)
VALUES "rnu" range (0,)
VALUES "covthick" range (0,)
VALUES "covthicky" range (0,)
VALUES "ns" range (0,)

VALUES "gs_BreakHeight" 	RANGE [th,INT(360/fokszog)*th]
VALUES "gs_ArrowHeight" 	RANGE (0,)
VALUES "gs_ArrowHalfWidth" 	RANGE (0,)
VALUES "gs_CircleRadius" 	RANGE (0,)
VALUES "gs_StartWidth" 		RANGE (0,)
VALUES "gs_StartHeight" 	RANGE (0,)

VALUES "res" RANGE [1,500]
VALUES "rescs" range[3,)

!!! A, B, ZZYZX !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

	PARAMETERS A=2*R
	LOCK "A"
	PARAMETERS B=2*R
	LOCK "B"

!!! *** RAILING PARAMETERS *** !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

values "rail_m" 1, 2, 3, 4
if GLOB_MODPAR_NAME = "bRightRail" or GLOB_MODPAR_NAME = "bLeftRail" then
	if bRightRail then
		if bLeftRail then
			rail_m = RAILPOS_BOTH
		else
			rail_m = RAILPOS_RIGHT
		endif
	else
		if bLeftRail then
			rail_m = RAILPOS_LEFT
		else
			rail_m = RAILPOS_NONE
		endif
	endif
	parameters rail_m = rail_m
else
	if rail_m = 1 then
		bRightRail	= 1
		bLeftRail	= 1
	endif
	if rail_m = 2 then
		bRightRail	= 1
		bLeftRail	= 0
	endif
	if rail_m = 3 then
		bRightRail	= 0
		bLeftRail	= 1
	endif
	if rail_m = 4 then
		bRightRail	= 0
		bLeftRail	= 0
	endif
	parameters bRightRail	= bRightRail
	parameters bLeftRail	= bLeftRail
endif

if NOT(bRightRail) then
	lock			"rightRailType"
	hideparameter	"rightRailType"
endif
if NOT(bLeftRail) then
	lock			"leftRailType"
	hideparameter	"leftRailType"
endif

values "btypr" stBarStyle
values "btypr_m" BAR_RECTANGULAR, BAR_ROUND

if GLOB_MODPAR_NAME = "btypr" then
	btypr_m = BAR_RECTANGULAR
	if btypr = stBarStyle[2] then btypr_m = BAR_ROUND
	parameters btypr_m = btypr_m
else
	btypr = stBarStyle[1]
	if btypr_m = BAR_ROUND then btypr = stBarStyle[2]
	parameters btypr = btypr
endif

values "btypl" stBarStyle
values "btypl_m" BAR_RECTANGULAR, BAR_ROUND

if GLOB_MODPAR_NAME = "btypl" then
	btypl_m = BAR_RECTANGULAR
	if btypl = stBarStyle[2] then btypl_m = BAR_ROUND
	parameters btypl_m = btypl_m
else
	btypl = stBarStyle[1]
	if btypl_m = BAR_ROUND then btypl = stBarStyle[2]
	parameters btypl = btypl
endif

VALUES "rightRailType" 	stRailTypes[1],
						stRailTypes[2],
						stRailTypes[3],
						stRailTypes[4],
						stRailTypes[5],
						stRailTypes[6],
						stRailTypes[7],
						stRailTypes[8],
						stRailTypes[9],
						stRailTypes[10]

if GLOB_MODPAR_NAME = "rightRailType" then
	for i = 1 to vardim1(stRailTypes)
	   if rightRailType = stRailTypes[i]	then rightRailType_m = i
	next i
	parameters rightRailType_m = rightRailType_m
else
	parameters rightRailType = stRailTypes[rightRailType_m]
endif

if rail_m = RAILPOS_BOTH then		! Both
	VALUES "leftRailType" 	stRailTypes[11],
							stRailTypes[1],
							stRailTypes[2],
							stRailTypes[3],
							stRailTypes[4],
							stRailTypes[5],
							stRailTypes[6],
							stRailTypes[7],
							stRailTypes[8],
							stRailTypes[9],
							stRailTypes[10]
else
	VALUES "leftRailType" 	stRailTypes[1],
							stRailTypes[2],
							stRailTypes[3],
							stRailTypes[4],
							stRailTypes[5],
							stRailTypes[6],
							stRailTypes[7],
							stRailTypes[8],
							stRailTypes[9],
							stRailTypes[10]
endif
if GLOB_MODPAR_NAME = "leftRailType" then
	for i = 1 to vardim1(stRailTypes)
	   if leftRailType = stRailTypes[i]	then leftRailType_m = i
	next i
	parameters leftRailType_m = leftRailType_m
else
	parameters leftRailType = stRailTypes[leftRailType_m]
endif
bSameRails = (leftRailType_m = RAIL_SAMERAILS)
parameters bSameRails = bSameRails

if GLOB_MODPAR_NAME = "rightRailType" or GLOB_MODPAR_NAME = "rightRailType_m" then
	if rightRailType_m = RAIL_WIRED then
		bwr		= 0.005
		bthr	= 0.005
		bdr		= 0.005
	else
		bwr		= 0.025
		bthr	= 0.025
		bdr		= 0.05
	endif

	parameters bwr = bwr
	parameters bthr = bthr
	parameters bdr = bdr
endif

if GLOB_MODPAR_NAME = "leftRailType" or GLOB_MODPAR_NAME = "leftRailType_m" then
	if leftRailType_m = RAIL_WIRED then
		bwl		= 0.005
		bthl	= 0.005
		bdl		= 0.005
	else
		bwl		= 0.025
		bthl	= 0.025
		bdl		= 0.05
	endif

	parameters bwl = bwr
	parameters bthl = bthr
	parameters bdl = bdr
endif

! ==============================================================================
! Symbolic 2D
! ==============================================================================

values "postSymbolType" stPostSymbolType
values "iPostSymbolType" 1, 2, 3, 4, 0
if GLOB_MODPAR_NAME = "postSymbolType" then
	iPostSymbolType = 1
	if postSymbolType = stPostSymbolType[2] then iPostSymbolType = 2
	if postSymbolType = stPostSymbolType[3] then iPostSymbolType = 3
	if postSymbolType = stPostSymbolType[4] then iPostSymbolType = 4
	if postSymbolType = stPostSymbolType[5] then iPostSymbolType = 0
	parameters iPostSymbolType = iPostSymbolType
else
	postSymbolType = stPostSymbolType[1]
	if iPostSymbolType = 2 then postSymbolType = stPostSymbolType[2]
	if iPostSymbolType = 3 then postSymbolType = stPostSymbolType[3]
	if iPostSymbolType = 4 then postSymbolType = stPostSymbolType[4]
	if iPostSymbolType = 0 then postSymbolType = stPostSymbolType[5]
	parameters postSymbolType = postSymbolType
endif

if NOT(bShowRailOnFloorPlan) then
	lock			"railLineType",
					"railPen",
					"bSymbolic2D",
					"postSymbolType",
					"iPostSymbolType",
					"postLineType",
					"postPen",
					"bShowRailAboveBreakLine"
	hideparameter	"railLineType",
					"railPen",
					"bSymbolic2D",
					"postSymbolType",
					"iPostSymbolType",
					"postLineType",
					"postPen",
					"bShowRailAboveBreakLine"
endif
if NOT(iPostSymbolType) then
	lock			"postLineType",
					"postPen"
	hideparameter	"postLineType",
					"postPen"
endif
if NOT(bSymbolic2D) then
	lock			"postSymbolType",
					"iPostSymbolType",
					"postLineType",
					"postPen"
	hideparameter	"postSymbolType",
					"iPostSymbolType",
					"postLineType",
					"postPen"
endif
if not(bShowRailAxis) then
	lock 			"railAxisLineType",
					"gs_RailAxisPen"
	hideparameter	"railAxisLineType",
					"gs_RailAxisPen"
endif
if	gs_detlevel_2D_m = DET2D_CUSTOM &\
	(gs_SymbolType_m = 3 |\
	gs_SymbolType_m = 8 |\
	gs_SymbolType_m = 15) then
	lock			"bShowRailAboveBreakLine"
	hideparameter	"bShowRailAboveBreakLine"
endif
if NOT(bShowCarriage) then
	lock			"iShowCarriageUpTo",
					"stShowCarriageUpTo",
					"carriageLineType",
					"carriagePen"
	hideparameter	"stShowCarriageUpTo",
					"carriageLineType",
					"carriagePen"
endif
if NOT(bEnableCarriageLine) then
	lock			"bShowCarriage",
					"iShowCarriageUpTo",
					"stShowCarriageUpTo",
					"carriageLineType",
					"carriagePen"
	hideparameter	"bShowCarriage",
					"stShowCarriageUpTo",
					"carriageLineType",
					"carriagePen"
endif

values "stShowCarriageUpTo" stShowCarriageValues
values "iShowCarriageUpTo" 1, 20, 50, 100, 200

if GLOB_MODPAR_NAME = "stShowCarriageUpTo" then
	iShowCarriageUpTo = 1
	if stShowCarriageUpTo = stShowCarriageValues[2]	then iShowCarriageUpTo = 20
	if stShowCarriageUpTo = stShowCarriageValues[3]	then iShowCarriageUpTo = 50
	if stShowCarriageUpTo = stShowCarriageValues[4]	then iShowCarriageUpTo = 100
	if stShowCarriageUpTo = stShowCarriageValues[5]	then iShowCarriageUpTo = 200
	parameters iShowCarriageUpTo = iShowCarriageUpTo
else
	stShowCarriageUpTo = stShowCarriageValues[1]
	if iShowCarriageUpTo = 20	then stShowCarriageUpTo = stShowCarriageValues[2]
	if iShowCarriageUpTo = 50	then stShowCarriageUpTo = stShowCarriageValues[3]
	if iShowCarriageUpTo = 100	then stShowCarriageUpTo = stShowCarriageValues[4]
	if iShowCarriageUpTo = 200	then stShowCarriageUpTo = stShowCarriageValues[5]
	parameters stShowCarriageUpTo = stShowCarriageUpTo
endif

!!! *** HIDE RAILING PARAMETERS *** !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

LOCK "ggr","sgr","ggl","sgl"

IF leftRailType_m = RAIL_BALUSTRADE THEN
	HIDEPARAMETER "fdfl", "bhl", "nbl", "btypl", "bdl", "hrtl", "hrdl"
	HIDEPARAMETER "hrwl", "hrhl", "hrol", "ptl", "npl"
	HIDEPARAMETER "nbtl", "pdl", "pwl", "pthl", "sbhl", "btl"
	HIDEPARAMETER "pmatl"
ENDIF

IF leftRailType_m = RAIL_PARALLEL_BARS THEN
	HIDEPARAMETER "fswl", "ftwl", "fbwl", "bwl", "bthl", "abdistl"
	HIDEPARAMETER "fdfl", "btypl", "bdl", "hrtl", "hrdl"
	HIDEPARAMETER "hrwl", "hrhl", "hrol", "ptl", "npl"
	HIDEPARAMETER "nbtl", "pdl", "pwl", "pthl", "sbhl", "btl"
	HIDEPARAMETER "bmatl","pmatl"
ENDIF

IF leftRailType_m = RAIL_SIMPLE_BAR THEN
	HIDEPARAMETER "fswl", "ftwl", "fbwl", "bwl", "bthl", "abdistl"
	HIDEPARAMETER "fdfl", "nbl", "hrtl", "hrdl"
	HIDEPARAMETER "hrwl", "hrhl", "hrol", "ptl", "npl"
	HIDEPARAMETER "nbtl", "pdl", "pwl", "pthl", "sbhl", "btl"
	HIDEPARAMETER "bmatl","pmatl"
ENDIF

IF leftRailType_m = RAIL_SOLID_FRAME_FILLED THEN
	HIDEPARAMETER "bhl", "nbl", "btypl", "bdl", "hrtl", "hrdl"
	HIDEPARAMETER "hrwl", "hrhl", "hrol", "ptl", "npl", "btl"
	HIDEPARAMETER "nbtl", "pdl", "pwl", "pthl", "sbhl", "bwl", "abdistl"
	HIDEPARAMETER "pmatl"
ENDIF

IF leftRailType_m = RAIL_SOLID_FRAME THEN
	HIDEPARAMETER "bthl", "fdfl", "bhl", "nbl", "btypl", "bdl", "hrtl", "hrdl"
	HIDEPARAMETER "hrwl", "hrhl", "hrol", "ptl", "npl", "btl"
	HIDEPARAMETER "nbtl", "pdl", "pwl", "pthl", "sbhl", "bwl", "abdistl"
	HIDEPARAMETER "bmatl","pmatl"
ENDIF

IF leftRailType_m = RAIL_SOLID THEN
	HIDEPARAMETER "fswl", "ftwl", "fbwl", "bthl", "fdfl"
	HIDEPARAMETER "bthl", "fdfl", "bhl", "nbl", "btypl", "bdl", "hrtl", "hrdl"
	HIDEPARAMETER "hrwl", "hrhl", "hrol", "ptl", "npl", "btl"
	HIDEPARAMETER "nbtl", "pdl", "pwl", "pthl", "sbhl", "bwl", "abdistl"
	HIDEPARAMETER "bmatl","pmatl"
ENDIF

IF leftRailType_m = RAIL_POST_WITH_BALUSTERS THEN
	HIDEPARAMETER "ggl","sgl"
	HIDEPARAMETER "fswl", "ftwl", "fbwl", "fdfl", "fthl"
	HIDEPARAMETER "fdfl", "bhl", "btypl"
	HIDEPARAMETER "nbtl", "sbhl", "abdistl"
ENDIF

IF leftRailType_m = RAIL_WIRED THEN
	HIDEPARAMETER "ggl","sgl"
	HIDEPARAMETER "fswl", "ftwl", "fbwl", "fdfl", "fthl"
	HIDEPARAMETER "fdfl", "bhl", "btypl"
	HIDEPARAMETER "sbhl"
	HIDEPARAMETER "nbtl", "abdistl"
ENDIF

IF leftRailType_m = RAIL_WOODEN_BALUSTRADE THEN
	HIDEPARAMETER "ggl","sgl"
	HIDEPARAMETER "fswl", "ftwl", "fbwl", "bthl", "fdfl", "fthl"
	HIDEPARAMETER "bthl", "fdfl", "bhl", "btypl"
	HIDEPARAMETER "sbhl", "abdistl", "ptl", "npl", "pwl"
	HIDEPARAMETER "pthl", "btl", "nbl"
	HIDEPARAMETER "bmatl"
ENDIF

IF leftRailType_m = RAIL_POST_WITH_BARS THEN
	HIDEPARAMETER "ggl","sgl"
	HIDEPARAMETER "fswl", "ftwl", "fbwl", "fdfl", "fthl"
	HIDEPARAMETER "bhl", "btypl"
	HIDEPARAMETER "nbtl", "abdistl"
ENDIF

IF rightRailType_m = RAIL_BALUSTRADE THEN
	HIDEPARAMETER "fdfr", "bhr", "nbr", "btypr", "bdr", "hrtr", "hrdr"
	HIDEPARAMETER "hrwr", "hrhr", "hror", "ptr", "npr"
	HIDEPARAMETER "nbtr", "pdr", "pwr", "pthr", "sbhr", "btr"
	HIDEPARAMETER "pmatr"
ENDIF

IF rightRailType_m = RAIL_PARALLEL_BARS THEN
	HIDEPARAMETER "fswr", "ftwr", "fbwr", "bwr", "bthr", "abdistr"
	HIDEPARAMETER "fdfr", "btypr", "bdr", "hrtr", "hrdr"
	HIDEPARAMETER "hrwr", "hrhr", "hror", "ptr", "npr"
	HIDEPARAMETER "nbtr", "pdr", "pwr", "pthr", "sbhr", "btr"
	HIDEPARAMETER "bmatr","pmatr"
ENDIF

IF rightRailType_m = RAIL_SIMPLE_BAR THEN
	HIDEPARAMETER "fswr", "ftwr", "fbwr", "bwr", "bthr", "abdistr"
	HIDEPARAMETER "fdfr", "nbr", "hrtr", "hrdr"
	HIDEPARAMETER "hrwr", "hrhr", "hror", "ptr", "npr"
	HIDEPARAMETER "nbtr", "pdr", "pwr", "pthr", "sbhr", "btr"
	HIDEPARAMETER "bmatr","pmatr"
ENDIF

IF rightRailType_m = RAIL_SOLID_FRAME_FILLED THEN
	HIDEPARAMETER "bhr", "nbr", "btypr", "bdr", "hrtr", "hrdr"
	HIDEPARAMETER "hrwr", "hrhr", "hror", "ptr", "npr", "btr"
	HIDEPARAMETER "nbtr", "pdr", "pwr", "pthr", "sbhr", "bwr", "abdistr"
	HIDEPARAMETER "pmatr"
ENDIF

IF rightRailType_m = RAIL_SOLID_FRAME THEN
	HIDEPARAMETER "bthr", "fdfr", "bhr", "nbr", "btypr", "bdr", "hrtr", "hrdr"
	HIDEPARAMETER "hrwr", "hrhr", "hror", "ptr", "npr", "btr"
	HIDEPARAMETER "nbtr", "pdr", "pwr", "pthr", "sbhr", "bwr", "abdistr"
	HIDEPARAMETER "bmatr","pmatr"
ENDIF

IF rightRailType_m = RAIL_SOLID THEN
	HIDEPARAMETER "fswr", "ftwr", "fbwr", "bthr", "fdfr"
	HIDEPARAMETER "bthr", "fdfr", "bhr", "nbr", "btypr", "bdr", "hrtr", "hrdr"
	HIDEPARAMETER "hrwr", "hrhr", "hror", "ptr", "npr", "btr"
	HIDEPARAMETER "nbtr", "pdr", "pwr", "pthr", "sbhr", "bwr", "abdistr"
	HIDEPARAMETER "bmatr","pmatr"
ENDIF

IF rightRailType_m = RAIL_POST_WITH_BALUSTERS THEN
	HIDEPARAMETER "ggr","sgr"
	HIDEPARAMETER "fswr", "ftwr", "fbwr", "fdfr", "fthr"
	HIDEPARAMETER "fdfr", "bhr", "btypr"
	HIDEPARAMETER "nbtr", "sbhr", "abdistr"
ENDIF

IF rightRailType_m = RAIL_WIRED THEN
	HIDEPARAMETER "ggr","sgr"
	HIDEPARAMETER "fswr", "ftwr", "fbwr", "fdfr", "fthr"
	HIDEPARAMETER "fdfr", "bhr", "btypr"
	HIDEPARAMETER "sbhr"
	HIDEPARAMETER "nbtr", "abdistr"
ENDIF

IF rightRailType_m = RAIL_WOODEN_BALUSTRADE THEN
	HIDEPARAMETER "ggr","sgr"
	HIDEPARAMETER "fswr", "ftwr", "fbwr", "bthr", "fdfr", "fthr"
	HIDEPARAMETER "bthr", "fdfr", "bhr", "btypr"
	HIDEPARAMETER "sbhr", "abdistr", "ptr", "npr", "pwr"
	HIDEPARAMETER "pthr", "btr", "nbr"
	HIDEPARAMETER "bmatr"
ENDIF

IF rightRailType_m = RAIL_POST_WITH_BARS THEN
	HIDEPARAMETER "ggr","sgr"
	HIDEPARAMETER "fswr", "ftwr", "fbwr", "fdfr", "fthr"
	HIDEPARAMETER "bhr", "btypr"
	HIDEPARAMETER "nbtr", "abdistr"
ENDIF

!!! *** FULL HIDE OF RAILING PARAMETERS *** !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

IF rail_m = RAILPOS_NONE or rail_m = RAILPOS_LEFT THEN
	HIDEPARAMETER "ggr", "hrr", "dsr", "roffr", "sgr", "fswr",
		"fthr", "ftwr", "fbwr", "bwr", "bthr", "abdistr", "fdfr",
		"bhr", "bdr", "nbr", "btypr", "fmatr", "bmatr", "romr", "rmmr",
		"hrtr","hrdr","hrwr","hrhr","hror",
		"ptr","npr","nbtr","pdr","pwr","pthr",
		"btr","nbr","bwr","bthr","bdr","sbhr",
		"bmatr","fmatr","pmatr"
ENDIF
IF rail_m = RAILPOS_NONE or rail_m = RAILPOS_RIGHT THEN
	HIDEPARAMETER "ggl", "hrl", "dsl", "roffl", "sgl", "fswl",
		"fthl", "ftwl", "fbwl", "bwl", "bthl", "abdistl", "fdfl",
		"bhl", "bdl", "nbl", "btypl", "fmatl", "bmatl", "rmml",
		"hrtl","hrdl","hrwl","hrhl","hrol",
		"ptl","npl","nbtl","pdl","pwl","pthl",
		"btl","nbl","bwl","bthl","bdl","sbhl",
		"bmatl","fmatl","pmatl"
ENDIF

!!! *** RIGHT RAIL STRUCTURAL DIMENSION PARAMETERS *** !!!!!!!!!!!!!!!!!!!!!!!!!

values "hrtr" stHandrailStyle
values "hrtr_m" HANDRAIL_RECTANGULAR, HANDRAIL_ROUND

if GLOB_MODPAR_NAME = "hrtr" then
	hrtr_m = HANDRAIL_RECTANGULAR
	if hrtr = stHandrailStyle[2] then hrtr_m = HANDRAIL_ROUND
	parameters hrtr_m = hrtr_m
else
	hrtr = stHandrailStyle[1]
	if hrtr_m = HANDRAIL_ROUND then hrtr = stHandrailStyle[2]
	parameters hrtr = hrtr
endif

IF hrtr_m = HANDRAIL_ROUND THEN
	HIDEPARAMETER "hrwr"
	HIDEPARAMETER "hrhr"
ELSE
	HIDEPARAMETER "hrdr"
ENDIF

values "ptr" stPostStyle
values "ptr_m" POST_RECTANGULAR, POST_ROUND

if GLOB_MODPAR_NAME = "ptr" then
	ptr_m = POST_RECTANGULAR
	if ptr = stPostStyle[2] then ptr_m = POST_ROUND
	parameters ptr_m = ptr_m
else
	ptr = stPostStyle[1]
	if ptr_m = POST_ROUND then ptr = stPostStyle[2]
	parameters ptr = ptr
endif

IF ptr_m = POST_ROUND THEN
	HIDEPARAMETER "pwr"
	HIDEPARAMETER "pthr"
ELSE
	HIDEPARAMETER "pdr"
ENDIF

values "btr" stBoardStyle
values "btr_m" BOARD_RECTANGULAR, BOARD_ROUND

if GLOB_MODPAR_NAME = "btr" then
	btr_m = BOARD_RECTANGULAR
	if btr = stBoardStyle[2] then btr_m = BOARD_ROUND
	parameters btr_m = btr_m
else
	btr = stBoardStyle[1]
	if btr_m = BOARD_ROUND then btr = stBoardStyle[2]
	parameters btr = btr
endif

IF rightRailType_m <> RAIL_SIMPLE_BAR THEN
	IF btr_m = BOARD_ROUND THEN
		HIDEPARAMETER "bwr"
		HIDEPARAMETER "bthr"
	ELSE
		HIDEPARAMETER "bdr"
	ENDIF
ELSE
	IF btypr_m = BAR_ROUND THEN
		HIDEPARAMETER "bhr"
		HIDEPARAMETER "fthr"
	ELSE
		HIDEPARAMETER "bdr"
	ENDIF
ENDIF

values "btl" stBoardStyle
values "btl_m" BOARD_RECTANGULAR, BOARD_ROUND

if GLOB_MODPAR_NAME = "btl" then
	btl_m = BOARD_RECTANGULAR
	if btl = stBoardStyle[2] then btl_m = BOARD_ROUND
	parameters btl_m = btl_m
else
	btl = stBoardStyle[1]
	if btl_m = BOARD_ROUND then btl = stBoardStyle[2]
	parameters btl = btl
endif

IF leftRailType_m <> RAIL_SIMPLE_BAR THEN
	IF btl_m = BOARD_ROUND THEN
		HIDEPARAMETER "bwl"
		HIDEPARAMETER "bthl"
	ELSE
		HIDEPARAMETER "bdl"
	ENDIF
ELSE
	IF btypl_m = BAR_ROUND THEN
		HIDEPARAMETER "bhl"
		HIDEPARAMETER "fthl"
	ELSE
		HIDEPARAMETER "bdl"
	ENDIF
ENDIF

!!! *** LEFT RAIL STRUCTURAL DIMENSION PARAMETERS *** !!!!!!!!!!!!!!!!!!!!!!!!!!

IF bSameRails THEN
	HIDEPARAMETER "ggl","hrl","dsl","roffl",
	"sgl","fswl","fthl","ftwl","fbwl","abdistl","fdfl","bhl","btypl",
	"hrtl","hrdl","hrwl","hrhl","hrol",
	"ptl","npl","nbtl","pdl","pwl","pthl",
	"btl","nbl","bwl","bthl","bdl","sbhl",
	"bmatl","fmatl","pmatl"
ENDIF

values "hrtl" stHandrailStyle
values "hrtl_m" HANDRAIL_RECTANGULAR, HANDRAIL_ROUND

if GLOB_MODPAR_NAME = "hrtl" then
	hrtl_m = HANDRAIL_RECTANGULAR
	if hrtl = stHandrailStyle[2] then hrtl_m = HANDRAIL_ROUND
	parameters hrtl_m = hrtl_m
else
	hrtl = stHandrailStyle[1]
	if hrtl_m = HANDRAIL_ROUND then hrtl = stHandrailStyle[2]
	parameters hrtl = hrtl
endif

IF hrtl_m = HANDRAIL_ROUND THEN
	HIDEPARAMETER "hrwl"
	HIDEPARAMETER "hrhl"
ELSE
	HIDEPARAMETER "hrdl"
ENDIF

values "ptl" stPostStyle
values "ptl_m" POST_RECTANGULAR, POST_ROUND

if GLOB_MODPAR_NAME = "ptl" then
	ptl_m = POST_RECTANGULAR
	if ptl = stPostStyle[2] then ptl_m = POST_ROUND
	parameters ptl_m = ptl_m
else
	ptl = stPostStyle[1]
	if ptl_m = POST_ROUND then ptl = stPostStyle[2]
	parameters ptl = ptl
endif

IF ptl_m = POST_ROUND THEN
	HIDEPARAMETER "pwl"
	HIDEPARAMETER "pthl"
ELSE
	HIDEPARAMETER "pdl"
ENDIF

!!! End of RAILING !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

IF walkl=0 THEN
	 HIDEPARAMETER "arrow_style","walkingDirUPDN","UPDNfontsize"
ENDIF

IF  walkingDirUPDN_m = WALKDIRSTR_NONE THEN
	 HIDEPARAMETER "UPDNfontsize"
ENDIF

!!! Cover Materials
IF iNoseType = NOSE_ROUNDED THEN 	HIDEPARAMETER "covery","covthicky","mat_riser","ns"
IF cover=0 		THEN
	HIDEPARAMETER "covthick","ns","mat_tread",
					"penLineTread", "typeFillTread",
					"penFillTread", "penBackFillTread"
endif

IF covery=0 	THEN 	HIDEPARAMETER "covthicky","mat_riser"

if iNoseType = NOSE_ROUNDED or covery=0 then
	hideparameter 	"penLineRiser", "typeFillRiser",
					"penFillRiser", "penBackFillRiser"
endif

VALUES "nbtr" rnu, custom
VALUES "nbtl" rnu, custom

! ------ Story Sensitive ------------------------------

if not(gs_StorySensitive) then
	hideparameter "gs_AboveHomeStory"
else
	if not(gs_BreaklineStUp) then
		hideparameter "gs_LowerPartStUp","gs_UpperPartStUp"
	endif
	if not(gs_LowerPartStUp) & not(gs_UpperPartStUp) & gs_BreaklineStUp then
		hideparameter "gs_TreadStUp"
	endif
endif

! ------ for 2D above Home Story ------------------------------[
if	(GLOB_MODPAR_NAME = "gs_SymbolType" | GLOB_MODPAR_NAME = "gs_SymbolType_m" |\
	GLOB_MODPAR_NAME = "gs_detlevel_2D" | GLOB_MODPAR_NAME = "gs_detlevel_2D_m") &\
	gs_detlevel_2D_m = DET2D_CUSTOM then
	if gs_SymbolType_m  = 1 | gs_SymbolType_m  = 2 then
		parameters	gs_BreaklineStUp	= 0,
					gs_TreadStUp		= 0
	endif
	if gs_SymbolType_m  = 3 | gs_SymbolType_m  = 4 | gs_SymbolType_m  = 5 then
		parameters	gs_BreaklineStUp	= 1,
					gs_LowerPartStUp	= 0,
					gs_UpperPartStUp	= 1,
					gs_TreadStUp		= 0
	endif
	if gs_SymbolType_m  = 6 | gs_SymbolType_m  = 7 | \
		gs_SymbolType_m  = 13 | gs_SymbolType_m  = 14 then
		parameters	gs_BreaklineStUp	= 0,
					gs_TreadStUp		= 1
	endif
	if gs_SymbolType_m  = 8 | gs_SymbolType_m  = 9 | gs_SymbolType_m  = 10 | \
		gs_SymbolType_m  = 11 | gs_SymbolType_m  = 12 | \
		gs_SymbolType_m  = 15 | gs_SymbolType_m  = 16 | gs_SymbolType_m  = 17 | \
		gs_SymbolType_m  = 18 | gs_SymbolType_m  = 19 | gs_SymbolType_m  = 20 then
		parameters	gs_BreaklineStUp = 1,
					gs_LowerPartStUp = 0,
					gs_UpperPartStUp = 1,
					gs_TreadStUp = 1
	endif
endif
! ------ for 2D above Home Story ------------------------------]

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!! Settings of 2D Symbol Type *** !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

	LOCK	"gs_2DTread","gs_2DTreadAbove","gs_2DRiserAbove","gs_2DContourAbove",
			"gs_2DContourBelow","brk",
			"gs_ArrowFill","gs_ArrowHeight","gs_ArrowHalfWidth",
			"gs_StartEndFill","gs_CircleRadius","gs_StartWidth","gs_StartHeight","tdfs",
			"DirNumText_X","DirNumText_Y",
			"DirUPDN_X","DirUPDN_Y","AngUPDN",
			"bSameRails","gs_FillTypeAbove"


	IF walkl=0 THEN
		 HIDEPARAMETER 	"gs_wLineType1","gs_wLineType2","gs_wLineTypeAbove",
						"gs_wLinePen","arrow_style","gs_ArrowFillPen","gs_ArrowFillPenAbove",
						"gs_StartEndStyle","gs_StartEndFillPen",
						"gs_RiseRunText","gs_CustomText1","gs_CustomText2","gs_CustomText2","bShowRiseAndRunText","fontsize","typeTextRotation_RiseRun", "gs_text_pen",
						"walkingDirUPDN","UPDNfontsize","UPDNfontpen","gs_wLineTypeStUp", "typeTextRotation_UpDn"
	ENDIF

	IF arrow_style_m = ARROW_STYLE_1 OR arrow_style_m = ARROW_STYLE_2 OR arrow_style_m = ARROW_STYLE_3 THEN
		 HIDEPARAMETER 	"gs_ArrowFillPen","gs_ArrowFillPenAbove"
	ENDIF

	IF gs_StartEndStyle_m = STARTSYMB_STYLE3 OR gs_StartEndStyle_m = STARTSYMB_NONE  THEN
		 HIDEPARAMETER 	"gs_StartEndFillPen"
	ENDIF

	IF bShowNumbering=0  THEN
		 HIDEPARAMETER 	"nStartNumbering","gs_NumTextSize","gs_NumTextPen","gs_NumBelow","gs_NumAbove"
	ENDIF

	IF bShowRailAxis=0  THEN
		 HIDEPARAMETER 	"railAxisLineType","gs_RailAxisPen"
	ENDIF

	!!! SETTINGS BY SYMBOL TYPES ON HOME STORY !!!!!!!!!!!!!!!!!!!
	!!! ******************************************************* !!


	if gs_detlevel_2D_m = DET2D_CUSTOM then
		IF gs_SymbolType_m = 1 THEN
			HIDEPARAMETER	"gs_wLineType1","gs_wLineTypeAbove",
							"gs_ArrowFillPenAbove","gs_NumBelow","gs_NumAbove",
							"gs_FillAbove","gs_cont_pen","solid_line",
							"bShowRailAxis","railAxisLineType","gs_RailAxisPen","gs_BreakHeight"

			IF bShowRiseAndRunText=0 AND walkingDirUPDN_m = WALKDIRSTR_NONE OR walkl=0 THEN HIDEPARAMETER "fontType"
			if not(gs_StorySensitive) | (gs_StorySensitive & not(gs_BreaklineStUp)) then
				hideparameter "gs_BreakHeight"
			endif
		ENDIF

		IF gs_SymbolType_m = 2 THEN
			HIDEPARAMETER	"gs_wLineType2","gs_wLineTypeAbove",
							"gs_ArrowFillPenAbove","gs_NumBelow","gs_NumAbove",
							"gs_FillAbove","gs_DashLinePen","dash_line",
							"bShowRailAxis","railAxisLineType","gs_RailAxisPen","gs_BreakHeight"

			IF bShowRiseAndRunText=0 AND walkingDirUPDN_m = WALKDIRSTR_NONE OR walkl=0 THEN HIDEPARAMETER "fontType"
			if not(gs_StorySensitive) | (gs_StorySensitive & not(gs_BreaklineStUp)) then
				hideparameter "gs_BreakHeight"
			endif
		ENDIF


		IF gs_SymbolType_m = 3 THEN
			HIDEPARAMETER	"gs_wLineType2","gs_wLineTypeAbove",
							"gs_ArrowFillPenAbove","gs_NumBelow","gs_NumAbove",
							"gs_FillAbove","gs_DashLinePen","dash_line",
							"bShowRailAxis","railAxisLineType","gs_RailAxisPen"

			IF bShowRiseAndRunText=0 AND walkingDirUPDN_m = WALKDIRSTR_NONE OR walkl=0 THEN HIDEPARAMETER "fontType"
		ENDIF


		IF gs_SymbolType_m = 4 THEN
			HIDEPARAMETER	"gs_wLineType2","bShowRailAxis","railAxisLineType","gs_RailAxisPen"

			IF bShowRiseAndRunText=0 AND walkingDirUPDN_m = WALKDIRSTR_NONE OR walkl=0 THEN HIDEPARAMETER "fontType"
		ENDIF


		IF gs_SymbolType_m = 5 THEN
			HIDEPARAMETER	"gs_wLineType2","gs_wLineTypeAbove",
							"gs_DashLinePen","dash_line",
							"bShowRailAxis","railAxisLineType","gs_RailAxisPen"

			IF bShowRiseAndRunText=0 AND walkingDirUPDN_m = WALKDIRSTR_NONE OR walkl=0 THEN HIDEPARAMETER "fontType"
		ENDIF


		IF gs_SymbolType_m = 6 THEN
			HIDEPARAMETER	"gs_wLineType1","gs_wLineTypeAbove",
							"gs_ArrowFillPenAbove","gs_NumBelow","gs_NumAbove",
							"gs_FillAbove","gs_cont_pen","solid_line",
							"bShowRailAxis","railAxisLineType","gs_RailAxisPen","gs_BreakHeight"

			IF bShowRiseAndRunText=0 AND walkingDirUPDN_m = WALKDIRSTR_NONE and bShowNumbering=0 OR walkl=0 and bShowNumbering=0 THEN HIDEPARAMETER "fontType"
			if not(gs_StorySensitive) | (gs_StorySensitive & not(gs_BreaklineStUp)) then
				hideparameter "gs_BreakHeight"
			endif
		ENDIF


		IF gs_SymbolType_m = 7 THEN
			HIDEPARAMETER	"gs_wLineType2","gs_wLineTypeAbove",
							"gs_ArrowFillPenAbove","gs_NumBelow","gs_NumAbove",
							"gs_FillAbove","gs_DashLinePen","dash_line",
							"bShowRailAxis","railAxisLineType","gs_RailAxisPen","gs_BreakHeight"

			IF bShowRiseAndRunText=0 AND walkingDirUPDN_m = WALKDIRSTR_NONE and bShowNumbering=0 OR walkl=0 and bShowNumbering=0 THEN HIDEPARAMETER "fontType"
			if not(gs_StorySensitive) | (gs_StorySensitive & not(gs_BreaklineStUp)) then
				hideparameter "gs_BreakHeight"
			endif
		ENDIF


		IF gs_SymbolType_m = 8 THEN
			HIDEPARAMETER	"gs_wLineType2","gs_wLineTypeAbove",
							"gs_ArrowFillPenAbove","gs_NumBelow","gs_NumAbove",
							"gs_FillAbove","gs_DashLinePen","dash_line",
							"bShowRailAxis","railAxisLineType","gs_RailAxisPen"

			IF bShowRiseAndRunText=0 AND walkingDirUPDN_m = WALKDIRSTR_NONE OR walkl=0 THEN HIDEPARAMETER "fontType"
		ENDIF


		IF gs_SymbolType_m = 9 THEN
			HIDEPARAMETER	"gs_wLineType2","bShowRailAxis","railAxisLineType","gs_RailAxisPen"

			IF bShowRiseAndRunText=0 AND walkingDirUPDN_m = WALKDIRSTR_NONE OR walkl=0 THEN HIDEPARAMETER "fontType"
		ENDIF


		IF gs_SymbolType_m = 10 THEN
			HIDEPARAMETER	"gs_wLineType2","gs_wLineTypeAbove","gs_DashLinePen","dash_line",
							"bShowRailAxis","railAxisLineType","gs_RailAxisPen"

			IF bShowRiseAndRunText=0 AND walkingDirUPDN_m = WALKDIRSTR_NONE OR walkl=0 THEN HIDEPARAMETER "fontType"
		ENDIF

		IF gs_SymbolType_m = 11 THEN
			HIDEPARAMETER	"gs_wLineType2","bShowRailAxis","railAxisLineType","gs_RailAxisPen"

			IF bShowRiseAndRunText=0 AND walkingDirUPDN_m = WALKDIRSTR_NONE and bShowNumbering=0 OR walkl=0 and bShowNumbering=0 THEN HIDEPARAMETER "fontType"
		ENDIF


		IF gs_SymbolType_m = 12 THEN
			HIDEPARAMETER	"gs_wLineType2","gs_wLineTypeAbove","gs_DashLinePen","dash_line",
							"bShowRailAxis","railAxisLineType","gs_RailAxisPen"

			IF bShowRiseAndRunText=0 AND walkingDirUPDN_m = WALKDIRSTR_NONE and bShowNumbering=0 OR walkl=0 and bShowNumbering=0 THEN HIDEPARAMETER "fontType"
		ENDIF


		IF gs_SymbolType_m = 13 THEN
			HIDEPARAMETER	"gs_wLineType1","gs_wLineTypeAbove",
							"gs_ArrowFillPenAbove","gs_NumBelow","gs_NumAbove",
							"gs_FillAbove","gs_cont_pen","solid_line","gs_BreakHeight"

			IF bShowRiseAndRunText=0 AND walkingDirUPDN_m = WALKDIRSTR_NONE and bShowNumbering=0 OR walkl=0 and bShowNumbering=0 THEN HIDEPARAMETER "fontType"
			if not(gs_StorySensitive) | (gs_StorySensitive & not(gs_BreaklineStUp)) then
				hideparameter "gs_BreakHeight"
			endif
		ENDIF


		IF gs_SymbolType_m = 14 THEN
			HIDEPARAMETER	"gs_wLineType2","gs_wLineTypeAbove",
							"gs_ArrowFillPenAbove","gs_NumBelow","gs_NumAbove",
							"gs_FillAbove","gs_BreakHeight"

			IF bShowRiseAndRunText=0 AND walkingDirUPDN_m = WALKDIRSTR_NONE and bShowNumbering=0 OR walkl=0 and bShowNumbering=0 THEN HIDEPARAMETER "fontType"
			if not(gs_StorySensitive) | (gs_StorySensitive & not(gs_BreaklineStUp)) then
				hideparameter "gs_BreakHeight"
			endif
		ENDIF


		IF gs_SymbolType_m = 15 THEN
			HIDEPARAMETER	"gs_wLineType2","gs_wLineTypeAbove",
							"gs_ArrowFillPenAbove","gs_NumBelow","gs_NumAbove",
							"gs_FillAbove"

			IF bShowRiseAndRunText=0 AND walkingDirUPDN_m = WALKDIRSTR_NONE OR walkl=0 THEN HIDEPARAMETER "fontType"
		ENDIF


		IF gs_SymbolType_m = 16 THEN
			HIDEPARAMETER	"gs_wLineType2"

			IF bShowRiseAndRunText=0 AND walkingDirUPDN_m = WALKDIRSTR_NONE OR walkl=0 THEN HIDEPARAMETER "fontType"
		ENDIF


		IF gs_SymbolType_m = 17 THEN
			HIDEPARAMETER	"gs_wLineType2","gs_wLineTypeAbove"

			IF bShowRiseAndRunText=0 AND walkingDirUPDN_m = WALKDIRSTR_NONE OR walkl=0 THEN HIDEPARAMETER "fontType"
		ENDIF


		IF gs_SymbolType_m = 18 THEN
			HIDEPARAMETER	"gs_wLineType2"

			IF bShowRiseAndRunText=0 AND walkingDirUPDN_m = WALKDIRSTR_NONE and bShowNumbering=0 OR walkl=0 and bShowNumbering=0 THEN HIDEPARAMETER "fontType"
		ENDIF


		IF gs_SymbolType_m = 19 THEN
			HIDEPARAMETER	"gs_wLineType2"

			IF bShowRiseAndRunText=0 AND walkingDirUPDN_m = WALKDIRSTR_NONE and bShowNumbering=0 OR walkl=0 and bShowNumbering=0 THEN HIDEPARAMETER "fontType"
		ENDIF


		IF gs_SymbolType_m = 20 THEN
			HIDEPARAMETER	"gs_wLineType2","gs_wLineTypeAbove"

			IF bShowRiseAndRunText=0 AND walkingDirUPDN_m = WALKDIRSTR_NONE and bShowNumbering=0 OR walkl=0 and bShowNumbering=0 THEN HIDEPARAMETER "fontType"
		ENDIF
	endif

! ==============================================================================
! mm / point conversion
! ==============================================================================

MM_IN_A_DOT = 25.4 / 72

if GLOB_MODPAR_NAME = "gs_text_size_pt_UpDn" then
	UPDNfontsize = gs_text_size_pt_UpDn * MM_IN_A_DOT
	parameters UPDNfontsize = UPDNfontsize
else
	gs_text_size_pt_UpDn = UPDNfontsize / MM_IN_A_DOT
	parameters gs_text_size_pt_UpDn = gs_text_size_pt_UpDn
endif

if GLOB_MODPAR_NAME = "gs_text_size_pt" then
	fontsize = gs_text_size_pt * MM_IN_A_DOT
	parameters fontsize = fontsize
else
	gs_text_size_pt = fontsize / MM_IN_A_DOT
	parameters gs_text_size_pt = gs_text_size_pt
endif

if GLOB_MODPAR_NAME = "gs_text_size_pt_num" then
	gs_NumTextSize = gs_text_size_pt_num * MM_IN_A_DOT
	parameters gs_NumTextSize = gs_NumTextSize
else
	gs_text_size_pt_num = gs_NumTextSize / MM_IN_A_DOT
	parameters gs_text_size_pt_num = gs_text_size_pt_num
endif


! --- Connecting integer and section pencolor type parameters ---

dim iPenNumber[255]
for i=1 to 255
	iPenNumber[i]=i
next i

values "gs_cont_pen"		iPenNumber
values "gs_DashLinePen"		iPenNumber
values "railPen"			iPenNumber
values "gs_RailAxisPen"		iPenNumber
values "postPen"			iPenNumber
values "carriagePen"		iPenNumber
values "gs_fill_pen"		iPenNumber
values "gs_wLinePen"		iPenNumber
values "gs_NumTextPen"		iPenNumber
values "gs_text_pen"		iPenNumber
values "UPDNfontpen"		iPenNumber
values "gs_LinePenStUp"		iPenNumber
values "penLineStringer" 	iPenNumber
values "penFillStringer" 	iPenNumber
values "penLineTread" 		iPenNumber
values "penFillTread" 		iPenNumber
values "penLineRiser" 		iPenNumber
values "penFillRiser" 		iPenNumber

if GLOB_MODPAR_NAME = "penLineStringer_m" then
	if penLineStringer_m < -1 | penLineStringer_m > 255 then
		penLineStringer_m = 1
		parameters penLineStringer_m = penLineStringer_m
	endif
	parameters penLineStringer = penLineStringer_m
else
	parameters penLineStringer_m = penLineStringer
endif
if GLOB_MODPAR_NAME = "penFillStringer_m" then
	if penFillStringer_m < -1 | penFillStringer_m > 255 then
		penFillStringer_m = 1
		parameters penFillStringer_m = penFillStringer_m
	endif
	parameters penFillStringer = penFillStringer_m
else
	parameters penFillStringer_m = penFillStringer
endif

if GLOB_MODPAR_NAME = "penLineTread_m" then
	if penLineTread_m < 1 | penLineTread_m > 255 then
		penLineTread_m = 1
		parameters penLineTread_m = penLineTread_m
	endif
	parameters penLineTread = penLineTread_m
else
	parameters penLineTread_m = penLineTread
endif
if GLOB_MODPAR_NAME = "penFillTread_m" then
	if penFillTread_m < 1 | penFillTread_m > 255 then
		penFillTread_m = 1
		parameters penFillTread_m = penFillTread_m
	endif
	parameters penFillTread = penFillTread_m
else
	parameters penFillTread_m = penFillTread
endif

if GLOB_MODPAR_NAME = "penLineRiser_m" then
	if penLineRiser_m < 1 | penLineRiser_m > 255 then
		penLineRiser_m = 1
		parameters penLineRiser_m = penLineRiser_m
	endif
	parameters penLineRiser = penLineRiser_m
else
	parameters penLineRiser_m = penLineRiser
endif
if GLOB_MODPAR_NAME = "penFillRiser_m" then
	if penFillRiser_m < 1 | penFillRiser_m > 255 then
		penFillRiser_m = 1
		parameters penFillRiser_m = penFillRiser_m
	endif
	parameters penFillRiser = penFillRiser_m
else
	parameters penFillRiser_m = penFillRiser
endif

if GLOB_MODPAR_NAME = "penBackFillStringer_m" then
	if penBackFillStringer_m < -1 | penBackFillStringer_m > 255 then
		penBackFillStringer_m = 1
		parameters penBackFillStringer_m = penBackFillStringer_m
	endif
	parameters penBackFillStringer = penBackFillStringer_m
else
	parameters penBackFillStringer_m = penBackFillStringer
endif

if GLOB_MODPAR_NAME = "penBackFillTread_m" then
	if penBackFillTread_m < -1 | penBackFillTread_m > 255 then
		penBackFillTread_m = 1
		parameters penBackFillTread_m = penBackFillTread_m
	endif
	parameters penBackFillTread = penBackFillTread_m
else
	parameters penBackFillTread_m = penBackFillTread
endif

if GLOB_MODPAR_NAME = "penBackFillRiser_m" then
	if penBackFillRiser_m < -1 | penBackFillRiser_m > 255 then
		penBackFillRiser_m = 1
		parameters penBackFillRiser_m = penBackFillRiser_m
	endif
	parameters penBackFillRiser = penBackFillRiser_m
else
	parameters penBackFillRiser_m = penBackFillRiser
endif

! =============================================================================
! Onorm list Settings
! =============================================================================

if LibraryLangCode = "AUT" or LibraryLangCode = "CHE" or LibraryLangCode = "GER" then
	call "Onorm_Stair" parameters all matTread = mat_tread
else
	hideparameter "gs_onorm_Title", "gs_list_soundinsul"
endif

! =============================================================================
! IFC2x3 Property Set for Stairs
! =============================================================================

SPIRAL_STAIR = 11
parameters ifc_StairType 		= SPIRAL_STAIR
parameters ifc_NumberOfRiser 	= nRiser
parameters ifc_NumberOfTreads 	= numTread
parameters ifc_RiserHeight		= th
parameters ifc_TreadLength		= PI/180 * (r - flw/3) * (fokszog)

]]>
</Script_VL>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Comment SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Comment>

<ParamSection SectVersion="26" SectionFlags="0" SubIdent="0">
	<ParamSectHeader>
		<Version>26</Version>
		<AutoHotspots>false</AutoHotspots>
		<StatBits>
			<STBit_UIDefault/>
			<STBit_FixSize/>
			<STBit_UIUseHierarchicalPages/>
		</StatBits>
		<WDLeftFrame>0</WDLeftFrame>
		<WDRightFrame>0</WDRightFrame>
		<WDTopFrame>0</WDTopFrame>
		<WDBotFrame>0</WDBotFrame>
		<LayFlags>65407</LayFlags>
		<WDMirrorThickness>0</WDMirrorThickness>
		<WDWallInset>0</WDWallInset>
		<SymbolColor>0</SymbolColor>
	</ParamSectHeader>
	<Parameters>
		<Length Name="A">
			<Description><![CDATA["Размер 1"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Unique/>
			</Flags>
			<Value>3.6</Value>
		</Length>
		<Length Name="B">
			<Description><![CDATA["Размер 2"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Unique/>
			</Flags>
			<Value>3.6</Value>
		</Length>
		<Length Name="ZZYZX">
			<Description><![CDATA["Высота"]]></Description>
			<Fix/>
			<Value>3.1</Value>
		</Length>
		<Integer Name="gs_detlevel_3D_m">
			<Description><![CDATA["3D"]]></Description>
			<Value>2</Value>
		</Integer>
		<Boolean Name="cfs">
			<Description><![CDATA["Вызов как Макрос из Лестницы"]]></Description>
			<Flags>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="ad">
			<Description><![CDATA["Ступени Вычисляются на основе Высоты Лестницы"]]></Description>
			<Flags>
				<ParFlg_Unique/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<String Name="PTYP">
			<Description><![CDATA["Способ Вычисления"]]></Description>
			<Flags>
				<ParFlg_Unique/>
			</Flags>
			<Value><![CDATA["Высота Ступени"]]></Value>
		</String>
		<Integer Name="iCalculationMode">
			<Description><![CDATA["Способ Вычисления"]]></Description>
			<Flags>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>2</Value>
		</Integer>

		<!-- RCSpiralSt_sp2: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="RCSpiralSt_sp2">
			<Description><![CDATA["Параметры Марша"]]></Description>
		</Title>
		<Length Name="r">
			<Description><![CDATA["Радиус"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1.8</Value>
		</Length>
		<Length Name="flw">
			<Description><![CDATA["Ширина Марша"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1.2</Value>
		</Length>
		<String Name="ft">
			<Description><![CDATA["Первая Ступень"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value><![CDATA["на Уровне Пола"]]></Value>
		</String>
		<Integer Name="iFirstTread">
			<Description><![CDATA["Первая Ступень"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<String Name="tt">
			<Description><![CDATA["Верхняя Ступень"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value><![CDATA["на Уровне Пола"]]></Value>
		</String>
		<Integer Name="iTopTread">
			<Description><![CDATA["Верхняя Ступень"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<String Name="jntl">
			<Description><![CDATA["Тип Стыка Внизу"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value><![CDATA["Первый Этаж"]]></Value>
		</String>
		<Integer Name="iLowerJunctionType">
			<Description><![CDATA["Тип Стыка Внизу"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Length Name="sst">
			<Description><![CDATA["Толщина Плиты Лестницы"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0.18</Value>
		</Length>
		<Length Name="lst">
			<Description><![CDATA["Толщина Верхней Площадки"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0.25</Value>
		</Length>
		<Length Name="lst2">
			<Description><![CDATA["Толщина Нижней Площадки"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0.25</Value>
		</Length>
		<String Name="fst">
			<Description><![CDATA["Тип Секции Марша"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value><![CDATA["без Косоура"]]></Value>
		</String>
		<Integer Name="iFlightSectionType">
			<Description><![CDATA["Тип Секции Марша"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Length Name="rfthickness">
			<Description><![CDATA["Толщина Армирования"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Length Name="beamx">
			<Description><![CDATA["Размер Балки по Горизонтали"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0.2</Value>
		</Length>
		<Length Name="beamy">
			<Description><![CDATA["Размер Балки по Вертикали"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0.15</Value>
		</Length>

		<!-- noseType: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<String Name="noseType">
			<Description><![CDATA["Размеры Подступенков и Проступей"]]></Description>
			<Flags>
				<ParFlg_BoldName/>
				<ParFlg_Unique/>
			</Flags>
			<Value><![CDATA["Обычные"]]></Value>
		</String>
		<Integer Name="iNoseType">
			<Description><![CDATA["Размеры Подступенков и Проступей"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Length Name="tproj">
			<Description><![CDATA["Проекция Проступи"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.025</Value>
		</Length>
		<Length Name="wldo">
			<Description><![CDATA["Радиус Линии Всхода"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1.2</Value>
		</Length>
		<Integer Name="rnu">
			<Description><![CDATA["Количество Подступенков"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>18</Value>
		</Integer>
		<Length Name="pth">
			<Description><![CDATA["Предпочтительная Высота Ступени"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0.172222222222</Value>
		</Length>
		<Length Name="thd">
			<Description><![CDATA["Две Высоты Подступенка + Проступь"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0.62</Value>
		</Length>
		<Length Name="td">
			<Description><![CDATA["Глубина Ступени"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0.275555555556</Value>
		</Length>
		<Length Name="th">
			<Description><![CDATA["Высота Ступени"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0.172222222222</Value>
		</Length>
		<Length Name="tdor">
			<Description><![CDATA["Глубина Ступени на Радиусе"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0.413333333333</Value>
		</Length>
		<Boolean Name="cover">
			<Description><![CDATA["Защитный Слой Проступи"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Length Name="covthick">
			<Description><![CDATA["Толщина Защитного Слоя Проступи"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Boolean Name="covery">
			<Description><![CDATA["Защитный Слой Подступенка"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Length Name="covthicky">
			<Description><![CDATA["Толщина Защитного Слоя Подступенка"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0.03</Value>
		</Length>
		<Length Name="ns">
			<Description><![CDATA["Выступ"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0.02</Value>
		</Length>
		<Boolean Name="recefice">
			<Description><![CDATA["Противоскользящие Вставки"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Integer Name="rail_m">
			<Description><![CDATA["Ограждение"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>

		<!-- bRightRail: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Boolean Name="bRightRail">
			<Description><![CDATA["Ограждение Справа"]]></Description>
			<Flags>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<String Name="rightRailType">
			<Description><![CDATA["Тип Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Параллельные Прутья"]]></Value>
		</String>
		<Integer Name="rightRailType_m">
			<Description><![CDATA["Тип Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>2</Value>
		</Integer>
		<String Name="ggr">
			<Description><![CDATA["Конструктивные Размеры"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<Length Name="hrr">
			<Description><![CDATA["Высота Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.8</Value>
		</Length>
		<Length Name="dsr">
			<Description><![CDATA["Расстояние от Лестницы"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.1</Value>
		</Length>
		<Length Name="roffr">
			<Description><![CDATA["Смещение Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<String Name="sgr">
			<Description><![CDATA["Размеры Элементов Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<Length Name="fswr">
			<Description><![CDATA["Ширина Рамы по Бокам"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.1</Value>
		</Length>
		<Length Name="fthr">
			<Description><![CDATA["Толщина Рамы/Бруска"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.04</Value>
		</Length>
		<Length Name="ftwr">
			<Description><![CDATA["Ширина Рамы Вверху"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Length Name="fbwr">
			<Description><![CDATA["Ширина Рамы Внизу"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Length Name="abdistr">
			<Description><![CDATA["Приблизительный Шаг Балясин"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.15</Value>
		</Length>
		<Length Name="fdfr">
			<Description><![CDATA["Расстояние от Рамы до Экрана"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Length Name="bhr">
			<Description><![CDATA["Высота Бруска"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.1</Value>
		</Length>
		<String Name="btypr">
			<Description><![CDATA["Стиль Бруска"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Прямоугольные"]]></Value>
		</String>
		<String Name="hrtr">
			<Description><![CDATA["Стиль Поручня"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA["Прямоугольные"]]></Value>
		</String>
		<Length Name="hrdr">
			<Description><![CDATA["Диаметр Поручня"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.06</Value>
		</Length>
		<Length Name="hrwr">
			<Description><![CDATA["Ширина Поручня"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Length Name="hrhr">
			<Description><![CDATA["Толщина Поручня"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.025</Value>
		</Length>
		<Length Name="hror">
			<Description><![CDATA["Выступ Поручня"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.15</Value>
		</Length>
		<String Name="ptr">
			<Description><![CDATA["Стиль Стойки/Балясины"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA["Прямоугольные"]]></Value>
		</String>
		<Integer Name="npr">
			<Description><![CDATA["Количество Стоек/Балясин"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>3</Value>
		</Integer>
		<Integer Name="nbtr">
			<Description><![CDATA["Количество Балясин"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>18</Value>
		</Integer>
		<Length Name="pdr">
			<Description><![CDATA["Диаметр Стойки"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.035</Value>
		</Length>
		<Length Name="pwr">
			<Description><![CDATA["Ширина Стоек"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.035</Value>
		</Length>
		<Length Name="pthr">
			<Description><![CDATA["Толщина Стоек"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.035</Value>
		</Length>
		<String Name="btr">
			<Description><![CDATA["Стиль Доски"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA["Прямоугольные"]]></Value>
		</String>
		<Integer Name="nbr">
			<Description><![CDATA["Количество Брусков"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>4</Value>
		</Integer>
		<Length Name="bwr">
			<Description><![CDATA["Ширина Балясины"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.025</Value>
		</Length>
		<Length Name="bthr">
			<Description><![CDATA["Толщина Балясины/Панели"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.025</Value>
		</Length>
		<Length Name="bdr">
			<Description><![CDATA["Диаметр Бруска"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Length Name="sbhr">
			<Description><![CDATA["Высота суб-доски"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.15</Value>
		</Length>

		<!-- bLeftRail: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Boolean Name="bLeftRail">
			<Description><![CDATA["Ограждение Слева"]]></Description>
			<Flags>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<String Name="leftRailType">
			<Description><![CDATA["Тип Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Как и Правое"]]></Value>
		</String>
		<Integer Name="leftRailType_m">
			<Description><![CDATA["Тип Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>11</Value>
		</Integer>
		<Boolean Name="bSameRails">
			<Description><![CDATA["Как и Правое"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<String Name="ggl">
			<Description><![CDATA["Конструктивные Размеры"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<Length Name="hrl">
			<Description><![CDATA["Высота Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.8</Value>
		</Length>
		<Length Name="dsl">
			<Description><![CDATA["Расстояние от Перекрытия/Лестницы"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.1</Value>
		</Length>
		<Length Name="roffl">
			<Description><![CDATA["Смещение Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<String Name="sgl">
			<Description><![CDATA["Размеры Элементов Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<Length Name="fswl">
			<Description><![CDATA["Ширина Рамы по Бокам"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.1</Value>
		</Length>
		<Length Name="fthl">
			<Description><![CDATA["Толщина Рамы/Бруска"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.04</Value>
		</Length>
		<Length Name="ftwl">
			<Description><![CDATA["Ширина Рамы Вверху"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Length Name="fbwl">
			<Description><![CDATA["Ширина Рамы Внизу"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Length Name="abdistl">
			<Description><![CDATA["Приблизительный Шаг Балясин"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.15</Value>
		</Length>
		<Length Name="fdfl">
			<Description><![CDATA["Расстояние от Рамы до Экрана"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Length Name="bhl">
			<Description><![CDATA["Высота Бруска"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.1</Value>
		</Length>
		<String Name="btypl">
			<Description><![CDATA["Стиль Бруска"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Прямоугольные"]]></Value>
		</String>
		<String Name="hrtl">
			<Description><![CDATA["Стиль Поручня"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA["Прямоугольные"]]></Value>
		</String>
		<Length Name="hrdl">
			<Description><![CDATA["Диаметр Поручня"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.06</Value>
		</Length>
		<Length Name="hrwl">
			<Description><![CDATA["Ширина Поручня"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Length Name="hrhl">
			<Description><![CDATA["Толщина Поручня"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.025</Value>
		</Length>
		<Length Name="hrol">
			<Description><![CDATA["Выступ Поручня"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.15</Value>
		</Length>
		<String Name="ptl">
			<Description><![CDATA["Стиль Стойки/Балясины"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA["Прямоугольные"]]></Value>
		</String>
		<Integer Name="npl">
			<Description><![CDATA["Количество Стоек/Балясин"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>3</Value>
		</Integer>
		<Integer Name="nbtl">
			<Description><![CDATA["Количество Балясин"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>18</Value>
		</Integer>
		<Length Name="pdl">
			<Description><![CDATA["Диаметр Стойки"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.035</Value>
		</Length>
		<Length Name="pwl">
			<Description><![CDATA["Ширина Стоек"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.035</Value>
		</Length>
		<Length Name="pthl">
			<Description><![CDATA["Толщина Стоек"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.035</Value>
		</Length>
		<String Name="btl">
			<Description><![CDATA["Стиль Доски"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA["Прямоугольные"]]></Value>
		</String>
		<Integer Name="nbl">
			<Description><![CDATA["Количество Брусков"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>4</Value>
		</Integer>
		<Length Name="bwl">
			<Description><![CDATA["Ширина Балясины"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.025</Value>
		</Length>
		<Length Name="bthl">
			<Description><![CDATA["Толщина Балясины/Панели"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.025</Value>
		</Length>
		<Length Name="bdl">
			<Description><![CDATA["Диаметр Бруска"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Length Name="sbhl">
			<Description><![CDATA["Высота суб-доски"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.15</Value>
		</Length>

		<!-- gs_3D_representation: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_3D_representation">
			<Description><![CDATA["3D-отображение"]]></Description>
		</Title>
		<Integer Name="res">
			<Description><![CDATA["Аппроксимация/Ступень"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>2</Value>
		</Integer>
		<Integer Name="rescs">
			<Description><![CDATA["Аппроксимация Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>8</Value>
		</Integer>
		<Boolean Name="gs_shadow">
			<Description><![CDATA["Отбрасывание Теней"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="AC_show2DHotspotsIn3D">
			<Description><![CDATA["Показ Узловых 2D Точек в 3D"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Length Name="ac_bottomlevel">
			<Description><![CDATA["Отметка Низа"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Length>
		<Length Name="ac_toplevel">
			<Description><![CDATA["Отметка Верха"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>

		<!-- gs_2D_representation: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_2D_representation">
			<Description><![CDATA["2D-отображение"]]></Description>
			<Fix/>
		</Title>
		<Integer Name="gs_detlevel_2D_m">
			<Description><![CDATA["2D-детализация"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Integer Name="iScaleChangeSM">
			<Description><![CDATA["Простой/Средний Масштаб изменяется в"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>999</Value>
		</Integer>
		<Integer Name="gs_ScaleChangeSM">
			<Description><![CDATA["Простой/Средний Масштаб изменяется в"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>100</Value>
		</Integer>
		<Integer Name="iScaleChangeMD">
			<Description><![CDATA["Средний/Детальный Масштаб изменяется в"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>999</Value>
		</Integer>
		<Integer Name="gs_ScaleChangeMD">
			<Description><![CDATA["Средний/Детальный Масштаб изменяется в"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>50</Value>
		</Integer>

		<!-- Symbol2D: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="Symbol2D">
			<Description><![CDATA["2D-символ"]]></Description>
		</Title>
		<Integer Name="gs_SymbolType_m">
			<Description><![CDATA["Тип 2D-символа"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>11</Value>
		</Integer>
		<Integer Name="iSymbolGroup">
			<Description><![CDATA["Тип Группы Символа"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>6</Value>
		</Integer>
		<Boolean Name="gs_2DTread">
			<Description><![CDATA["Показать Проступи"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="gs_2DTreadAbove">
			<Description><![CDATA["Показать Проступи Выше"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="gs_2DRiserAbove">
			<Description><![CDATA["Показать Подступенки Выше"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="gs_2DContourAbove">
			<Description><![CDATA["Показать Линию Контура Выше"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="gs_2DContourBelow">
			<Description><![CDATA["Показать Линию Контура Ниже"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<PenColor Name="gs_cont_pen">
			<Description><![CDATA["Перо Линий Видимых Конструкций"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>91</Value>
		</PenColor>
		<PenColor Name="gs_DashLinePen">
			<Description><![CDATA["Перо Линий Невидимых Конструкций"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>91</Value>
		</PenColor>
		<LineType Name="solid_line">
			<Description><![CDATA["Тип Линий Видимых Конструкций"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</LineType>
		<LineType Name="dash_line">
			<Description><![CDATA["Тип Линий Невидимых Конструкций"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>4</Value>
		</LineType>
		<Boolean Name="bShowRailOnFloorPlan">
			<Description><![CDATA["Показать Ограждение на Плане"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<LineType Name="railLineType">
			<Description><![CDATA["Тип Линии Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</LineType>
		<PenColor Name="railPen">
			<Description><![CDATA["Перо Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>91</Value>
		</PenColor>
		<Boolean Name="bSymbolic2D">
			<Description><![CDATA["Символический 2D"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<String Name="postSymbolType">
			<Description><![CDATA["Тип Символа Стойки"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Тип 1"]]></Value>
		</String>
		<Integer Name="iPostSymbolType">
			<Description><![CDATA["Тип Символа Стойки"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<LineType Name="postLineType">
			<Description><![CDATA["Тип Линии Стойки"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</LineType>
		<PenColor Name="postPen">
			<Description><![CDATA["Перо Линии Стойки"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>23</Value>
		</PenColor>
		<Boolean Name="bShowRailAboveBreakLine">
			<Description><![CDATA["Показать Ограждение выше Линии Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="bShowCarriage">
			<Description><![CDATA["Показать Тетиву на Плане Этажа"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<String Name="stShowCarriageUpTo">
			<Description><![CDATA["Показать Тетиву"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["До 1:50"]]></Value>
		</String>
		<Integer Name="iShowCarriageUpTo">
			<Description><![CDATA["Показать Тетиву"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>50</Value>
		</Integer>
		<LineType Name="carriageLineType">
			<Description><![CDATA["Линия Невидимой Тетивы"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</LineType>
		<PenColor Name="carriagePen">
			<Description><![CDATA["Перо Невидимой Тетивы"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>23</Value>
		</PenColor>
		<FillPattern Name="gs_fill_type">
			<Description><![CDATA["Штриховка Фона"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>65</Value>
		</FillPattern>
		<FillPattern Name="gs_FillTypeAbove">
			<Description><![CDATA["Штриховка Фона"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>65</Value>
		</FillPattern>
		<PenColor Name="gs_fill_pen">
			<Description><![CDATA["Перо Штриховки"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>19</Value>
		</PenColor>
		<PenColor Name="gs_back_pen">
			<Description><![CDATA["Перо Фона Штриховки"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>19</Value>
		</PenColor>
		<Boolean Name="gs_FillAbove">
			<Description><![CDATA["Штриховка Выше Линии Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="brk">
			<Description><![CDATA["Линия Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Length Name="gs_BreakHeight">
			<Description><![CDATA["Расположение Линии Разрыва (Высота)"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1</Value>
		</Length>
		<Boolean Name="walkl">
			<Description><![CDATA["Показать Линию Всхода"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<LineType Name="gs_wLineType1">
			<Description><![CDATA["Тип Линии"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</LineType>
		<LineType Name="gs_wLineType2">
			<Description><![CDATA["Тип Линии"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>6</Value>
		</LineType>
		<LineType Name="gs_wLineTypeAbove">
			<Description><![CDATA["Тип Линии выше Линии Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>6</Value>
		</LineType>
		<PenColor Name="gs_wLinePen">
			<Description><![CDATA["Перо Линии"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>71</Value>
		</PenColor>
		<String Name="arrow_style">
			<Description><![CDATA["Стиль Стрелки"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA["Стиль 3"]]></Value>
		</String>
		<Integer Name="arrow_style_m">
			<Description><![CDATA["Стиль Стрелки"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>3</Value>
		</Integer>
		<FillPattern Name="gs_ArrowFill">
			<Description><![CDATA["Тип Штриховки Стрелки"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>64</Value>
		</FillPattern>
		<PenColor Name="gs_ArrowFillPen">
			<Description><![CDATA["Перо Штриховки (0 - нет)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>19</Value>
		</PenColor>
		<PenColor Name="gs_ArrowFillPenAbove">
			<Description><![CDATA["Перо Штриховки Выше (0 - Нет)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</PenColor>
		<Length Name="gs_ArrowHeight">
			<Description><![CDATA["Высота Стрелки"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.2</Value>
		</Length>
		<Length Name="gs_ArrowHalfWidth">
			<Description><![CDATA["Половина Ширины Стрелки"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.2</Value>
		</Length>
		<String Name="gs_StartEndStyle">
			<Description><![CDATA["Символ в Начале"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA["Стиль 1"]]></Value>
		</String>
		<Integer Name="gs_StartEndStyle_m">
			<Description><![CDATA["Символ в Начале"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<FillPattern Name="gs_StartEndFill">
			<Description><![CDATA["Тип Штриховки Символа"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>64</Value>
		</FillPattern>
		<PenColor Name="gs_StartEndFillPen">
			<Description><![CDATA["Перо Штриховки (0 - нет)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</PenColor>
		<Length Name="gs_CircleRadius">
			<Description><![CDATA["Радиус Окружности"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.1</Value>
		</Length>
		<Length Name="gs_StartWidth">
			<Description><![CDATA["Половина Ширины Символа"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Length Name="gs_StartHeight">
			<Description><![CDATA["Половина Высоты Символа"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.2</Value>
		</Length>
		<Boolean Name="bShowNumbering">
			<Description><![CDATA["Показать Нумерацию"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Integer Name="nStartNumbering">
			<Description><![CDATA["Начать Нумерацию с"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Integer>
		<Boolean Name="gs_NumBelow">
			<Description><![CDATA["Нумерация ниже Линии Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="gs_NumAbove">
			<Description><![CDATA["Нумерация выше Линии Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<RealNum Name="gs_NumTextSize">
			<Description><![CDATA["Размер Шрифта (мм)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</RealNum>
		<RealNum Name="gs_text_size_pt_num">
			<Description><![CDATA["Размер Шрифта (пт)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>2.83</Value>
		</RealNum>
		<PenColor Name="gs_NumTextPen">
			<Description><![CDATA["Перо Текста"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>86</Value>
		</PenColor>
		<Length Name="DirNumText_X">
			<Description><![CDATA["Расположение Нумерации по X"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="DirNumText_Y">
			<Description><![CDATA["Расположение Нумерации по Y"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<String Name="typeTextRotation_Num">
			<Description><![CDATA["Ориентация Текста в Символе"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Выровнять по Символу"]]></Value>
		</String>
		<Integer Name="typeTextRotation_Num_m">
			<Description><![CDATA["Ориентация Текста в Символе"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Integer>
		<Boolean Name="bShowRiseAndRunText">
			<Description><![CDATA["Текст Подступенков и Проступей"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<String Name="gs_RiseRunText">
			<Description><![CDATA["Текст"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Текст Подступенков/Проступей"]]></Value>
		</String>
		<Integer Name="iRiseRunText">
			<Description><![CDATA["Текст"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<String Name="gs_CustomText1">
			<Description><![CDATA["Специальный Текст_1"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Специальный Текст_1"]]></Value>
		</String>
		<String Name="gs_CustomText2">
			<Description><![CDATA["Специальный Текст_2"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Специальный Текст_2"]]></Value>
		</String>
		<String Name="gs_customText_rise">
			<Description><![CDATA["Текст Подступенка"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["П"]]></Value>
		</String>
		<RealNum Name="tdfs">
			<Description><![CDATA["Размер Шрифта (мм)"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</RealNum>
		<RealNum Name="fontsize">
			<Description><![CDATA["Размер Шрифта (мм)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</RealNum>
		<RealNum Name="gs_text_size_pt">
			<Description><![CDATA["Размер Шрифта (пт)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>2.83</Value>
		</RealNum>
		<PenColor Name="gs_text_pen">
			<Description><![CDATA["Перо Текста"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>86</Value>
		</PenColor>
		<Boolean Name="bUseACLinearUnit">
			<Description><![CDATA["Единицы Измерения Рабочей Среды Проекта"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Length Name="DirRiseRunText_X">
			<Description><![CDATA["Текст Подступенков и Проступей по X"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="DirRiseRunText_Y">
			<Description><![CDATA["Текст Подступенков и Проступей по Y"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Angle Name="DirRiseRunAngle">
			<Description><![CDATA["Угол Поворота Текста Подступенков и Проступей"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Angle>
		<String Name="typeTextRotation_RiseRun">
			<Description><![CDATA["Ориентация Текста в Символе"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Читаемый"]]></Value>
		</String>
		<Integer Name="typeTextRotation_RiseRun_m">
			<Description><![CDATA["Ориентация Текста в Символе"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>2</Value>
		</Integer>
		<String Name="walkingDirUPDN">
			<Description><![CDATA["Размер Текста ВВЕРХ/ВНИЗ"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA["Нет"]]></Value>
		</String>
		<Integer Name="walkingDirUPDN_m">
			<Description><![CDATA["Размер Текста ВВЕРХ/ВНИЗ"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<RealNum Name="UPDNfontsize">
			<Description><![CDATA["Размер Текста ВВЕРХ/ВНИЗ (мм)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1.5</Value>
		</RealNum>
		<RealNum Name="gs_text_size_pt_UpDn">
			<Description><![CDATA["Размер Текста ВВЕРХ/ВНИЗ (точки)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>4.245</Value>
		</RealNum>
		<PenColor Name="UPDNfontpen">
			<Description><![CDATA["Текст ВВЕРХ/ВНИЗ"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>86</Value>
		</PenColor>
		<Length Name="DirUPDN_X">
			<Description><![CDATA["Расположение Текста ВВЕРХ/ВНИЗ по Х"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="DirUPDN_Y">
			<Description><![CDATA["Расположение Текста ВВЕРХ/ВНИЗ по Y"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>-0.2</Value>
		</Length>
		<Angle Name="AngUPDN">
			<Description><![CDATA["Угол Текста ВВЕРХ/ВНИЗ"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Angle>
		<String Name="typeTextRotation_UpDn">
			<Description><![CDATA["Ориентация Текста в Символе"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Выровнять по Символу"]]></Value>
		</String>
		<Integer Name="typeTextRotation_UpDn_m">
			<Description><![CDATA["Ориентация Текста в Символе"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Integer>
		<String Name="fontType">
			<Description><![CDATA["Тип Шрифта"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA["Arial"]]></Value>
		</String>
		<Boolean Name="bShowRailAxis">
			<Description><![CDATA["Показать Ось Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<LineType Name="railAxisLineType">
			<Description><![CDATA["Тип Линии Оси Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>6</Value>
		</LineType>
		<PenColor Name="gs_RailAxisPen">
			<Description><![CDATA["Перо Линии Оси Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>71</Value>
		</PenColor>
		<Boolean Name="gs_StorySensitive">
			<Description><![CDATA["Зависит от Этажа"]]></Description>
			<Flags>
				<ParFlg_BoldName/>
			</Flags>
			<Value>0</Value>
		</Boolean>

		<!-- gs_AboveHomeStory: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_AboveHomeStory">
			<Description><![CDATA["2D выше Собственного Этажа"]]></Description>
		</Title>
		<Boolean Name="gs_BreaklineStUp">
			<Description><![CDATA["Линия Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="gs_LowerPartStUp">
			<Description><![CDATA["Нижняя Часть"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="gs_UpperPartStUp">
			<Description><![CDATA["Верхняя Часть"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="gs_TreadStUp">
			<Description><![CDATA["Показать Проступи"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<LineType Name="gs_LineTypeStUp">
			<Description><![CDATA["Тип Линии"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</LineType>
		<PenColor Name="gs_LinePenStUp">
			<Description><![CDATA["Перо Линии"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>71</Value>
		</PenColor>
		<LineType Name="gs_wLineTypeStUp">
			<Description><![CDATA["Тип Линии Всхода"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</LineType>
		<Boolean Name="gs_numaStUp">
			<Description><![CDATA["Показать Нумерацию"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="gs_txStUp">
			<Description><![CDATA["Текст Подступенков и Проступей"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>

		<!-- gs_section_attributes: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_section_attributes">
			<Description><![CDATA["Реквизиты Сечения"]]></Description>
		</Title>
		<PenColor Name="penLineStringer">
			<Description><![CDATA["Перо Контура Сечения Конструкций"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>29</Value>
		</PenColor>
		<Integer Name="penLineStringer_m">
			<Description><![CDATA["Перо Контура Сечения Конструкций"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>29</Value>
		</Integer>
		<FillPattern Name="typeFillStringer">
			<Description><![CDATA["Штриховка Сечения Конструкций"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>24</Value>
		</FillPattern>
		<PenColor Name="penFillStringer">
			<Description><![CDATA["Перо Штриховки Сечения Конструкций"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>109</Value>
		</PenColor>
		<Integer Name="penFillStringer_m">
			<Description><![CDATA["Перо Штриховки Сечения Конструкций"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>109</Value>
		</Integer>
		<PenColor Name="penBackFillStringer">
			<Description><![CDATA["Перо Фона Штриховки Сечения Конструкций"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</PenColor>
		<Integer Name="penBackFillStringer_m">
			<Description><![CDATA["Перо Фона Штриховки Сечения Конструкций"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Integer>
		<PenColor Name="penLineTread">
			<Description><![CDATA["Перо Контура Сечения Проступи"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1</Value>
		</PenColor>
		<Integer Name="penLineTread_m">
			<Description><![CDATA["Перо Контура Сечения Проступи"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<FillPattern Name="typeFillTread">
			<Description><![CDATA["Штриховка Сечения Проступи"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>23</Value>
		</FillPattern>
		<PenColor Name="penFillTread">
			<Description><![CDATA["Перо Штриховки Сечения Проступи"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>109</Value>
		</PenColor>
		<Integer Name="penFillTread_m">
			<Description><![CDATA["Перо Штриховки Сечения Проступи"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>109</Value>
		</Integer>
		<PenColor Name="penBackFillTread">
			<Description><![CDATA["Перо Фона Штриховки Сечения Проступи"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>-1</Value>
		</PenColor>
		<Integer Name="penBackFillTread_m">
			<Description><![CDATA["Перо Фона Штриховки Сечения Проступи"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>-1</Value>
		</Integer>
		<PenColor Name="penLineRiser">
			<Description><![CDATA["Перо Контура Сечения Подступенка"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1</Value>
		</PenColor>
		<Integer Name="penLineRiser_m">
			<Description><![CDATA["Перо Контура Сечения Подступенка"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<FillPattern Name="typeFillRiser">
			<Description><![CDATA["Штриховка Сечения Подступенка"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>23</Value>
		</FillPattern>
		<PenColor Name="penFillRiser">
			<Description><![CDATA["Перо Штриховки Сечения Подступенка"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>109</Value>
		</PenColor>
		<Integer Name="penFillRiser_m">
			<Description><![CDATA["Перо Штриховки Сечения Подступенка"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>109</Value>
		</Integer>
		<PenColor Name="penBackFillRiser">
			<Description><![CDATA["Перо Фона Штриховки Сечения Подступенка"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>-1</Value>
		</PenColor>
		<Integer Name="penBackFillRiser_m">
			<Description><![CDATA["Перо Фона Штриховки Сечения Подступенка"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>-1</Value>
		</Integer>

		<!-- gs_material: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_material">
			<Description><![CDATA["Покрытия"]]></Description>
		</Title>
		<Material Name="matb">
			<Description><![CDATA["Плита Лестницы"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>4</Value>
		</Material>
		<Material Name="mat_tread">
			<Description><![CDATA["Проступь"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>18</Value>
		</Material>
		<Material Name="mat_riser">
			<Description><![CDATA["Подступенок"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>18</Value>
		</Material>
		<Material Name="pmatr">
			<Description><![CDATA["Стойка Справа"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>15</Value>
		</Material>
		<Material Name="fmatr">
			<Description><![CDATA["Рама Справа"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>15</Value>
		</Material>
		<Material Name="bmatr">
			<Description><![CDATA["Балясина/Панель Справа"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>15</Value>
		</Material>
		<Material Name="pmatl">
			<Description><![CDATA["Стойка Слева"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>15</Value>
		</Material>
		<Material Name="fmatl">
			<Description><![CDATA["Рама Слева"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>15</Value>
		</Material>
		<Material Name="bmatl">
			<Description><![CDATA["Балясина/Панель Слева"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>15</Value>
		</Material>
		<Integer Name="hrtr_m">
			<Description><![CDATA["Стиль Поручня Справа"]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Integer Name="hrtl_m">
			<Description><![CDATA["Стиль Поручня Слева"]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Integer Name="btypr_m">
			<Description><![CDATA["Стиль Бруска Справа"]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Integer Name="btypl_m">
			<Description><![CDATA["Стиль Бруска Слева"]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Integer Name="ptr_m">
			<Description><![CDATA["Стиль Стоек/Балясин Справа"]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Integer Name="ptl_m">
			<Description><![CDATA["Стиль Стоек/Балясин Слева"]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Integer Name="btr_m">
			<Description><![CDATA["Стиль Доски Справа"]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Integer Name="btl_m">
			<Description><![CDATA["Стиль Доски Слева"]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Length Name="fth">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="bd">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="bh">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="lra">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="hrd">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="hrw">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="hrh">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="pd">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="pw">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="bth">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="bw">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Integer Name="nbt">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Integer>
		<Length Name="sbh">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Angle Name="gs_readable_angle">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>90</Value>
		</Angle>

		<!-- gs_list: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_list">
			<Description><![CDATA["Параметры Спецификаций"]]></Description>
			<Fix/>
		</Title>
		<RealNum Name="gs_list_cost">
			<Description><![CDATA["Цена"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<String Name="gs_list_manufacturer">
			<Description><![CDATA["Производитель"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_note">
			<Description><![CDATA["Примечания"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_location">
			<Description><![CDATA["Расположение"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_accessories">
			<Description><![CDATA["Аксессуары"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_soundinsul">
			<Description><![CDATA["Звукоизоляция"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="FM_Type">
			<Description><![CDATA["Тип Группы"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Лестницы"]]></Value>
		</String>
		<Integer Name="iFMType">
			<Description><![CDATA["Тип Группы"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>6</Value>
		</Integer>
		<String Name="FM_InventoryNumber">
			<Description><![CDATA["Инвентарный Номер"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="FM_SerialNumber">
			<Description><![CDATA["Серийный Номер"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="FM_ProductionYear">
			<Description><![CDATA["Год Производства"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<RealNum Name="FM_ObjectWeight">
			<Description><![CDATA["Вес Изделия"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<String Name="FM_ObjectWeightUnit">
			<Description><![CDATA["Единица Веса"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["кг"]]></Value>
		</String>
		<RealNum Name="FM_Stories">
			<Description><![CDATA["Кол-во Этажей"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<RealNum Name="FM_HalfLandings">
			<Description><![CDATA["Кол-во Промежуточных Площадок"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<RealNum Name="FM_LevelHeight">
			<Description><![CDATA["Высота Уровня"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<RealNum Name="FM_HeadRoom">
			<Description><![CDATA["Высота Помещения"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<String Name="FM_BearingStructure">
			<Description><![CDATA["Несущая Конструкция"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<RealNum Name="FM_BearingCapacity">
			<Description><![CDATA["Несущая Способность"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<Boolean Name="FM_SmokeFree">
			<Description><![CDATA["Незадымляемая Лестница"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<RealNum Name="FM_StepsLength">
			<Description><![CDATA["Длина Проступей"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<String Name="FM_MaterialFootstep">
			<Description><![CDATA["Покрытие Проступей"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="FM_MaterialStairRailing">
			<Description><![CDATA["Покрытие Ограждения"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="FM_MaterialHandhold">
			<Description><![CDATA["Покрытие Поручней"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_custom1">
			<Description><![CDATA["Пользовательское Значение 1"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_custom2">
			<Description><![CDATA["Пользовательское Значение 2"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_custom3">
			<Description><![CDATA["Пользовательское Значение 3"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_custom4">
			<Description><![CDATA["Пользовательское Значение 4"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_custom5">
			<Description><![CDATA["Пользовательское Значение 5"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>

		<!-- gs_onorm_Title: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_onorm_Title">
			<Description><![CDATA["Дополнительные Параметры Спецификаций"]]></Description>
			<Fix/>
		</Title>
		<String Name="gs_onorm_treadnumber">
			<Description><![CDATA["Количество Ступеней"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_treadriser">
			<Description><![CDATA["Глубина Проступи / Высота Подступенка"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_person">
			<Description><![CDATA["Количество Людей"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_bardist_auto">
			<Description><![CDATA["Значение Чистой Ширины между Прутьями Ограждения"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_bardist">
			<Description><![CDATA["Чистая Ширина между Прутьями Ограждения"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_botlevheight_auto">
			<Description><![CDATA["Значение Отметки Нижнего Уровня"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_botlevheight">
			<Description><![CDATA["Отметка Нижнего Уровня"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_toplevheight_auto">
			<Description><![CDATA["Значение Отметки Верхнего Уровня"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_toplevheight">
			<Description><![CDATA["Отметка Верхнего Уровня"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_construction">
			<Description><![CDATA["Конструкция"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_soundinsul">
			<Description><![CDATA["Звукоизоляция"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_mat1">
			<Description><![CDATA["Дополнительный Материал 1"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_finish1_value">
			<Description><![CDATA["Значение Отделки 1"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_finish1">
			<Description><![CDATA["Отделка 1"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_customtext1">
			<Description><![CDATA["Дополнительная Информация 1"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_customtext2">
			<Description><![CDATA["Дополнительная Информация 2"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_aks">
			<Description><![CDATA["Номер AKS"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_product">
			<Description><![CDATA["Продукт"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_leistungbuch">
			<Description><![CDATA["Коллекция ID Спецификаций"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_description">
			<Description><![CDATA["Дополнительное Описание"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_number">
			<Description><![CDATA["Дополнительный Номер"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_id">
			<Description><![CDATA["Номер ID"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_admission">
			<Description><![CDATA["Дата Приема"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_modification">
			<Description><![CDATA["Дата Изменения"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_tozonenumber">
			<Description><![CDATA["Номер Зоны"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>

		<!-- ifc_Title: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="ifc_Title">
			<Description><![CDATA["IFC2x3 Набор Свойств для Лестниц"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
		</Title>
		<Integer Name="ifc_StairType">
			<Description><![CDATA["Тип Лестницы"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0</Value>
		</Integer>
		<Integer Name="ifc_NumberOfRiser">
			<Description><![CDATA["Количество Подступенков"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0</Value>
		</Integer>
		<Integer Name="ifc_NumberOfTreads">
			<Description><![CDATA["Количество Проступей"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0</Value>
		</Integer>
		<Length Name="ifc_RiserHeight">
			<Description><![CDATA["Высота Подступенка"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="ifc_TreadLength">
			<Description><![CDATA["Длина Проступи"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0</Value>
		</Length>
		<String Name="LibraryLangCode">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value><![CDATA["RUS"]]></Value>
		</String>
		<Integer Name="gs_ui_current_page">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
	</Parameters>
</ParamSection>

<CalledMacros SectVersion="2" SectionFlags="0" SubIdent="0">
	<Macro>
		<MName><![CDATA["Stair_RiseRun_Text"]]></MName>
		<MainGUID>E42F5F06-4225-4F32-A64C-ADCF1D4F9EDC</MainGUID>
	</Macro>
	<Macro>
		<MName><![CDATA["railSymbol2D_m"]]></MName>
		<MainGUID>C5C904E6-1706-4CD1-BC8D-6C294B5B40F7</MainGUID>
	</Macro>
	<Macro>
		<MName><![CDATA["stairRails_m"]]></MName>
		<MainGUID>4A3DDA4A-B43E-4039-B45A-463905CF42AD</MainGUID>
	</Macro>
	<Macro>
		<MName><![CDATA["ui_stairs"]]></MName>
		<MainGUID>D8D2E274-0A82-4EF4-845A-78AD6980E72F</MainGUID>
	</Macro>
	<Macro>
		<MName><![CDATA["FM_types"]]></MName>
		<MainGUID>2759D2DF-AA8E-44D1-AD1D-261581266B34</MainGUID>
	</Macro>
	<Macro>
		<MName><![CDATA["Onorm_Stair"]]></MName>
		<MainGUID>F021AF23-E4F7-4961-964D-C9BCAFB786DD</MainGUID>
	</Macro>
</CalledMacros>

<Picture MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="0" length_in_bytes="2483" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000007F0000
	007F0803000000F163ED2100000129504C5445FFFFFFDEDEDEB5B5B57373739C
	9C9C848484CECECEEFEFEFADADAD42424284847B94948C8C948C6B6B6BA5A59C
	9CA59C525252DED6CE73736B7B847BADB5ADB5B5AD63635A4242396B736B3939
	39EFE7D6BDA573C6B59CD6C6A552524A5A635A394239B59452E7DECECEBDA54A
	524AC6C6BDAD9C73CEC6A5EFDEBDAD946BBDB59CF7EFDECEB584BDAD9CAD8C4A
	9C8C6BDEC694CEA55AB59C6BE7DED6D6B57BBDA563B5A58CDEC68CB59C73C6A5
	63E7D6ADD6B563C6AD7BEFCEA5EFCE94DEBD94DEAD5A736339AD9452D6BD8CBD
	944A9C7B39BDA55ABDC6B5AD8C52CEB573DEB55ACED6CEB58C4AEFE7BDEFE7C6
	F7F7E7EFC6739C844A8C7342EFD6949C8C73C6AD8CA58C63735A318C6B39E7BD
	73A59C84DED6AD84846BB5ADA5947342ADA57B6B5A29F7EFE7D6C6B579978E9C
	0000083B49444154785EED99D572E3CA164077738BD14C61E60C33331C868BF0
	FF1F71774B8EA24CEC3A958CDB7EC9725B56FCB236B5A58AA0E2861B6EB861B0
	B37F670716CBFECEFECE6FFF585DED439DDD2D982FC97EBFFF7C757315C6FC9E
	C002203BFD3F3606A6143B87B03076067F6C6FFEBE0F8B6475F53F3F0D566081
	24CF3793DB1B9B092C8C43CCBFF1F4F9D6262C88DF8A0624ABF77AFF5BD024DE
	839241EFD12A2C8095ED4AD03839E9C3FCA90DE0E9E0C75FFBF30FA0BE0B93CD
	834102F365770075FA6F7AC9E27A6020BD77731EC67B5DB840F7EF3F0DBA3047
	BA87976A72EB289967002797049F0FE63A081B9765FD7F0D607EFCFB142ED138
	E8C3B5515212A514299682BFE4EEC684BE3CF8F4F8FAFE8994F1C0044E37267D
	B97794CCCE5F31ED723081C1A7EB8D01A9122E5FD5E23991644A009372557BBD
	15B83A5D4AE9BAF43D2FF24514E51EF7C24C783EF7380FB380C224BAEF928925
	58BE460948C445E6FAAE871178699BE711BA5D8CC0132274E894A07F9C18C0EE
	9DA3EE95FDDC6F3422D78F221E8511C740F2DCD4C1CD7CDF5D630151445E9EC3
	2F930380DE7B05578366DCF37CDFBC7D6E3E320FE5F8858B31396CC8CD6C4CA8
	C06B98C8D70F57AC80F47C14718ED50F3112EEF9E685FE10A3E8745A4CF0C901
	EC4D69CDAB6DB80AEB3E9A518BE089109EF0103C602744CB71180B3406402FFD
	40ED4DF1EC2EF7AE943F169D9B644DBDC3D415ED661B49D3B41D349D25A7193B
	4C4829B834D4FCF064635A00DB579B7FBED469ADADB53A9DA5566BC96999B34E
	CB69B55AF19A83E010065C8A5C7E3B09CFA6B5FA680FAE8AD4216F9562A43CAE
	C59DB52567685A10E0A212811AFF5D9E16C0AD1E5C0B1E76B0001D1301EACD01
	0319C6B1131824624A61508A007C9E9AE7CF3DB82E1F39738C77680E987E110A
	DA05C783C64F59A08B11D887C9A887097C0784A11CBD26FD18F5AD805142322C
	81C0778100C3014CE1C1ED2E7C179C153330346BCD19C5CCA5A6F67CECE74159
	E7473085BB2FE13BF9C897308091B3361C0EDB43DF5DAFF9498CBD50447DF930
	B5CEC77BF0DD10DDC2DEB759D06CB699744DDEE53E60C178109F2E4FBB4DE8DE
	DF8519C09D380EDA29739B399AC2D29B0788346C7D0A054CE6F37D9805241805
	8CF92EF352D7F74ABF881996A1E0E7C300A6706B076642E260FE69EA7AAE7003
	815E8A7A210D84FD723CD5FFF925CC08EDA6C2F35CEF6F822824408AF43563C1
	F1A12BF1BB8917825D98115D9EB92E379749EE47D5F0F1004FB75FCA31F4DB20
	9E0C6066882CCFBC28E25EC4B3F1F0890011BD67B284071A2EB2F50C6647238B
	3C839BB9829A6C19337A4996CBE4396314BEE1D903981DA72C6A44E6C628514A
	11D48DAF897F1E15F67482BFB705B3C4CB3DDFD338011ED7462FA834FE811943
	FC5B5CBA517DFC04660AC7EC731C813012A8E4D240FB27CCC031182E2E6E84AD
	C7305B72B305C2066D88333B67BD43639786E24BA2CEFD07306B7CCF0DC3DC6B
	1089688EEA8D0D4649194C310F6FA9ACEA7F02B3E6AB17866623F85D4258C1C6
	433986334931245EF9B78E61E6281C8090BB218BA840BBA68FCFFC9471C185A6
	9A54020B7E5091D07E9837B4142893E4E9BD428E6ACE8C5D9FFBBF1C800DDE7A
	D45D7F1B4A2D2591B2FF6B5174AECD87A0B43682C96DB0026D34BC94BF950AF3
	D60FB705D725520882FA2A82BB03B0830EBD4694739F72C17F48A9464CE23A90
	15C4B43F014BE4B9EF79B98850FC434397452FF7DF18AE15745F8135F2DCE5A1
	A97B7F598ED1A55E73B3A40478D0036B282F771B3CA4E4FD911C2398C6B4E519
	D8FE2DB087D261E8A2ED03BEA9E666092D6BA8EEAB042CF2310C7106EEBDA267
	3913C1649DBB1E58A5E1873EBB7F442AA166A4A6EF1FEC825DC2DCFBE58DACA0
	82CA1AC7773E12B08AF2C2DBFB954F083986189EBEA054825D1AE1323BCB99A1
	5652AA95525A53B5F2661DCFC032C787827DA446498556756E1D2AFBFEADD722
	CB5489A075FDDE01A64F2CF77FF7CD0AE7E2829F94BC7FF14F69B05B805B03A0
	8C954E5D1BFEE4CE7243DAF76F6DE321E21A3D9CA1BD62FD55239125608F6E71
	754D8456C034A87392E34421442116F5E57FFF08A3A0B429B459E6B0F27A05BE
	9A13B45BF4DF2650D0CE019854957E709080B2AFBFDBABEEC5800809AAF4A947
	CBA7855E95F1D89CBD12E5F1F3D15FEDF5E405C03E5CA94A7FF2EEA25E807D24
	C8B2FC78C55D31735FF307601F75D6FA97BD2E40158C5478E8C03C50660D96B7
	A03043ED65DB5F3D405E797F6705D4A500ECFBCB766FBC58AD3D3946E697BF54
	D07F3D2072029AD9F72BD8DDC3B9930014B3AECBB9187596E6317CE4BCEDB8CA
	2838E7922D2D05F6DB5FF51AAAD153505C143B4B4B1A2C539F3A381F7C064A99
	E7361CEC4240D67FEFC8B8025C2B00C7E974A4FDEE9B7E2B59875046CCDE6F75
	3AF6F5E6558F8172C6B52949DE69B52CFB1591B5D943D04D259108652D7C901B
	5AB5AB5AD3CB281810857A42453CC2EE3B00960320B24455DBDF8CA4089CE2F9
	A5B6ED57F5E9AF361F30676D881174C0BA1F2197F71FFA9D61A7C56D375F1598
	F31A4A81888BA7D7601149EA099BA9ABA07E73D81C3A4362D5AF650921E5E08D
	03A2A1889B711C0FD718D884326FBD5671304B5121E2B8391AADA1DFAE1ED65D
	C1F3AAE8A49C7BDA1C61F2C318FD0C2CFB7D37F319B938F9793B88718DE2A10B
	9691C2652C4BD7E539041AC1082B8FCB9160199A657E1A78AE4EE439221899EC
	474302D6519EEFA6DC75359506CE056B0741D06C0E0387C01C50A1705396091E
	719F05ED11EAD1DE8C05853911B9196BB753C182346369DA0C9A8168C01CF9CA
	3963998F79B394A5ED40C09C51FB7ED6F4317716C4CC4D29CC9DD077DDA089AD
	67588905F8A19BBA41E061046E44152C823068F3C65FCDDD0D37DC70C3FF018A
	61AB2FD7641BFD0000000049454E44AE426082
	]]>
</Picture>

<Copyright SectVersion="1" SectionFlags="0" SubIdent="0">
	<Author>GRAPHISOFT</Author>
	<License>
		<Type>CC BY-ND</Type>
		<Version>3.0</Version>
	</License>
</Copyright>

</Symbol>
