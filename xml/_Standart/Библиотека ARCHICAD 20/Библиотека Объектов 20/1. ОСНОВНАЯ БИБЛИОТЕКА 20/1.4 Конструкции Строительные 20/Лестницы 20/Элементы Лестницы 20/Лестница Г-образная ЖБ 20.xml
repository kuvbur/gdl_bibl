<?xml version="1.0" encoding="UTF-8"?>
<Symbol IsArchivable="true" IsPlaceable="true" MainGUID="8069E2EA-C956-482C-A641-B5FA8C765F64" MigrationValue="Normal" Owner="1196638531" Signature="1196644685" Version="43">
<Ancestry SectVersion="1" SectionFlags="0" SubIdent="0" Template="false">
	<MainGUID>F938E33A-329D-4A36-BE3E-85E126820996</MainGUID>
	<MainGUID>103E8D2C-8230-42E1-9597-46F84CCE28C0</MainGUID>
	<MainGUID>784EAEA1-5041-4AA6-B6F4-EF263A891EE7</MainGUID>
	<MainGUID>57B7C584-5C0D-11D6-A0D8-036F034B6792</MainGUID>
</Ancestry>

<MigrationTable SectVersion="1" SectionFlags="0" SubIdent="0">
	<MigrationTableElement>
		<MainGUID>C30FBECA-4F5A-4DB5-88B2-6897E7BC25D5</MainGUID>
		<Version>19</Version>
		<Name><![CDATA[""]]></Name>
		<AutoMigration>true</AutoMigration>
	</MigrationTableElement>
</MigrationTable>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_3D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
!!! *** LStair

IF gs_detlevel_3D_m = DET3D_OFF THEN END

IF GLOB_CONTEXT>20 and GLOB_CONTEXT<40 THEN 		!! FOR Simple Model and in 3D Windoow
	gs_detlevel_3D_m = DET3D_SIMPLE
ENDIF

IF not(gs_shadow) THEN SHADOW OFF

covthick = covthick*cover
addz -sst-covthick

PEN gs_cont_PEN
FILL gs_FILL_type

depthTreadIn=(lx+ly)/rnu					!! Step Depth/Inside
depthTreadOut=(ly+flw+lx+flw)/rnu			!! Step Depth/Outside


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! *** HOTSPOTs UNID *** !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

	!!! FlightUNID=1			!!! 1-9
	!!! RailUNID=1000			!!! 1000,1100,1200,1300


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! *** Flight Slab ** !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

	StepNumCornerIn=INT(ly/depthTreadIn)+1			!!Step Number at Corner (Inside)
	StepNumCornerOut=INT((ly+flw)/depthTreadOut)+1	!!Step Number at Corner (Outside)

	!!! Rest Value of Last Step at Corner
	RestStep=(flw+lx)-(rnu-StepNumCornerOut)*depthTreadOut

	!!! Calculation of "nxprev" value at Corner (StepNum=StepNumCornerOut-1)
	!!! Overhang at Corner Outside Direction
	YY1=(ly+flw)-(StepNumCornerOut-1)*depthTreadOut
	YY2A=flw-yy1
	YY2B=(ly+flw)-yy1-(StepNumCornerOut-1)*depthTreadIn
	XX2A=(flw+lx)-(rnu-(StepNumCornerOut-1))*depthTreadIn
	XX2B=flw

	IF (StepNumCornerOut-1)*depthTreadIn>ly THEN
		XX1=YY1*XX2A/YY2A	!!="nxprev" value
		ELSE
		XX1=YY1*XX2B/YY2B	!!="nxprev" value
	ENDIF

	LastStep=XX1+RestStep

	!!! Y Height of  Stair Slab
	SlabAlfa=ATN(th/depthTreadIn)
	SlabAlfaOut=ATN(th/depthTreadOut)
	SlabYHeight=sst/cos(SlabAlfa)

	!!! Join at Upper Flight Slab
	IF SlabYHeight > lst THEN
		X1DistUp=(SlabYHeight-lst)/TAN(SlabAlfa)
		XDistUp=-X1DistUp
		ELSE
		X2DistUp=(lst-SlabYHeight)/TAN(SlabAlfa)
		XDistUp=X2DistUp
	ENDIF

	GROUP "FlightSlab"

		FOR i=1 TO rnu

				!!! Join at Upper Flight Slab
				IF i=rnu THEN
					tempXDistUp=XDistUp
					tempJointSlab=(SlabYHeight-lst)
					ELSE
					tempXDistUp=0
					tempJointSlab=0
				ENDIF

				!!! Calculation of Steps Outside
				IF depthTreadOut*i <= ly+flw THEN
					ny=i*depthTreadOut
					nx=0
					nyprev=(i-1)*depthTreadOut
					nxprev=0
				ELSE
					ny=ly+flw
					nx=i*depthTreadOut-ny-tempXDistUp
					IF i=StepNumCornerOut THEN
						nyprev=ly+flw
						nxprev=(i)*depthTreadOut-LastStep-ny
					ELSE
						nyprev=ly+flw
						nxprev=(i-1)*depthTreadOut-ny
					ENDIF
				ENDIF

				!!! Calculation of Steps Inside
				IF depthTreadIn*i <= ly THEN
					ky=depthTreadIn*i
					kx=flw
					kyprev=depthTreadIn*(i-1)
					kxprev=flw
				ELSE
					ky=ly
					kx=flw+depthTreadIn*i-ly-tempXDistUp
					IF i=StepNumCornerIn THEN
						kyprev=depthTreadIn*(i-1)
						kxprev=flw
					ELSE
						kyprev=ly
						kxprev=flw+depthTreadIn*(i-1)-ly
					ENDIF
				ENDIF

				IF i=rnu THEN 	!!! at Upper Step
					tempMask=8
					ELSE
					tempMask=9
				ENDIF

				ADDz sst

					!!! Slab Flight
					SECT_FILL typeFillStringer, penBackFillStringer, penFillStringer, penLineStringer

					MASS matb,matb,matb,
					5,0,1+4+16,th*(i),
						nx,ny,th*(i)+th-(th+SlabYHeight)+tempJointSlab,tempMask,
						kx,ky,th*(i)+th-(th+SlabYHeight)+tempJointSlab,9,
						kxprev,kyprev,th*(i)-(th+SlabYHeight),9,
						nxprev,nyprev,th*(i)-(th+SlabYHeight),9,
						nx,ny,th*(i)+th-(th+SlabYHeight)+tempJointSlab,-1

				DEL 1

		NEXT i

	ENDGROUP

	GROUP "FlightSlabCut"

		MATERIAL matb
		SECT_FILL typeFillStringer, penBackFillStringer, penFillStringer, penLineStringer

		ADD flw,0,sst
			BLOCK lx,ly,ZZYZX		!! Cut Inside
		DEL 1

		ADD -flw,0,sst
			BLOCK flw,ly+flw,ZZYZX	!! Cut Outside
		DEL 1

		ADDz -SlabYHeight+sst-lst2
			BLOCK flw,ly,SlabYHeight	!! Join to Lower Slab Thickness
		DEL 1

		!!! Join at Upper Flight Slab/ IF SlabYHeight > lst
		IF SlabYHeight > lst THEN
			ADD flw+lx-XDistUp,ly,sst+ZZYZX-lst
				MATERIAL matb
				SECT_FILL typeFillStringer, penBackFillStringer, penFillStringer, penLineStringer

				PRISM_ 5,lst,
					0,0,13,
					XDistUp,0,15,
					XDistUp,flw,15,
					0,flw,8,
					0,0,-1
			DEL 1
		ENDIF

	ENDGROUP

	PLACEGROUP SUBGROUP("FlightSlab","FlightSlabCut")
	KILLGROUP "FlightSlab"
	KILLGROUP "FlightSlabCut"

	!!! Join at Upper Flight Slab/IF SlabYHeight < lst
	IF SlabYHeight < lst THEN
		ADD flw+lx-XDistUp,ly,sst+ZZYZX-lst
			MATERIAL matb
			SECT_FILL typeFillStringer, penBackFillStringer, penFillStringer, penLineStringer

			PRISM_ 5,lst,
				0,0,13,
				XDistUp,0,15,
				XDistUp,flw,15,
				0,flw,8,
				0,0,-1
		DEL 1
	ENDIF

	!!! Contour of Stair Slab
	FOR i=1 TO StepNumCornerOut		!!! Stair Contour/Outside/Lower
		ADDz sst
			nxprev=0
			nyprev=(i-1)*depthTreadOut
			LIN_ nxprev,nyprev,th*(i),nxprev,nyprev,th*(i)-th
		DEL 1
	NEXT i

	FOR i=StepNumCornerOut+1 TO rnu	!!! Stair Contour/Outside/Upper
		ADDz sst
			nyprev=ly+flw
			nxprev=(i-1)*depthTreadOut-ny
			LIN_ nxprev,nyprev,th*(i),nxprev,nyprev,th*(i)-th
		DEL 1
	NEXT i

	FOR i=1 TO StepNumCornerIn		!!! Stair Contour/Inside/Lower
		ADDz sst
			kxprev=flw
			kyprev=depthTreadIn*(i-1)
			LIN_ kxprev,kyprev,th*(i),kxprev,kyprev,th*(i)-th
		DEL 1
	NEXT i

	FOR i=StepNumCornerIn+1 TO rnu	!!! Stair Contour/Inside/Upper
		ADDz sst
			kyprev=ly
			kxprev=flw+depthTreadIn*(i-1)-ly
			LIN_ kxprev,kyprev,th*(i),kxprev,kyprev,th*(i)-th
		DEL 1
	NEXT i

	IF SlabYHeight > lst THEN		!!! Contour at Flight Slab
		ADDz sst
			LIN_ flw+lx-XDistUp,ly,ZZYZX-lst,flw+lx-XDistUp,ly+flw,ZZYZX-lst
		DEL 1
	ENDIF

	IF SlabYHeight > lst2 THEN
		ADDz sst
			LIN_ 0,0,0,0,0,-lst2
			LIN_ flw,0,0,flw,0,-lst2
		DEL 1
		ELSE
		ADDz sst
			LIN_ 0,0,0,0,0,-SlabYHeight
			LIN_ flw,0,0,flw,0,-SlabYHeight
		DEL 1
	ENDIF


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! *** Step Cover ** !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

	GROUP "nagyharap2"
		SECT_FILL typeFillTread, penBackFillTread, penFillTread, penLineTread
		MATERIAL mat_tread

		ADDz -sst
		PRISM 5, sst+3,
			-0.5,0,
			-0.5,-2*ly-1,
			flw+1,-2*ly-1,
			flw+1,0,
			-0.5,0
		DEL 1

		PRISM 5, abs(th*rnu)+(2+sst),
			lx+flw, ly+flw+1,
			lx+flw+2, ly+flw+1,
			lx+flw+2, 0,
			lx+flw, 0,
			lx+flw, ly+flw+1

		ADDz - sst
		PRISM 5, abs(th*rnu)+3+sst,
			flw-flw,-2*ly-1,
			flw-flw,ly+flw+1,
			-1,ly+flw+1,
			-1,-2*ly-1,
			flw-flw,-2*ly-1
		DEL 1

		PRISM 5, abs(th*rnu)+(3+sst),
			-2,			ly+flw,
			flw+lx+2,ly+flw,
			flw+lx+2,ly+flw+1,
			-2,			ly+flw+1,
			-2,			ly+flw

	ENDGROUP

	GROUP "nagyharap3"

		MATERIAL mat_riser
		SECT_FILL typeFillRiser, penBackFillRiser, penFillRiser, penLineRiser

		ADDz -sst
		PRISM 5, sst+3,
			-0.5,0,
			-0.5,-2*ly-1,
			flw+1,-2*ly-1,
			flw+1,0,
			-0.5,0
		DEL 1

		PRISM 5, abs(th*rnu)+(2+sst),
			lx+flw, ly+flw+1,
			lx+flw+2, ly+flw+1,
			lx+flw+2, 0,
			lx+flw, 0,
			lx+flw, ly+flw+1

		ADDz - sst
		PRISM 5, abs(th*rnu)+3+sst,
			flw-flw,-2*ly-1,
			flw-flw,ly+flw+1,
			-1,ly+flw+1,
			-1,-2*ly-1,
			flw-flw,-2*ly-1
		DEL 1

		PRISM 5, abs(th*rnu)+(3+sst),
			-2,			ly+flw,
			flw+lx+2,ly+flw,
			flw+lx+2,ly+flw+1,
			-2,			ly+flw+1,
			-2,			ly+flw

	ENDGROUP


	GROUP "cover"	!!! *** Cover/Horizontal

		IF cover and covthick > 0 THEN
				nx=0
				ny=-1
				kx=flw
				ky=-1

				vernyul=0
				kisvernyul=0

			 FOR i=1 to rnu

					kxp=kx
					kyp=ky
					nxp=nx
					nyp=ny


					IF depthTreadIn*i <= ly THEN
						ky=depthTreadIn*i
						kx=flw
					ELSE
						ky=ly
						kx=flw+depthTreadIn*i-ly
					ENDIF

					IF depthTreadOut*i <= ly+flw THEN
						ny=i*depthTreadOut
					ELSE
						ny=ly+flw
						nx=i*depthTreadOut-ny
					ENDIF

				IF i=rnu THEN
					kx=kx+1
					nx=nx+1
				ENDIF


				IF (depthTreadIn*(i-1) <= ly) and (depthTreadIn*i > ly) THEN
					kisvernyul=15
				ELSE kisvernyul=0


				IF (depthTreadOut*(i-1) < ly+flw) and (depthTreadOut*i > ly+flw) THEN
					vernyul=15
				ELSE vernyul=0



						!!! *** NOSING

						aa=sqr((ny-ky)*(ny-ky)+(nx-kx)*(nx-kx))

						IF ABS(ny-ky)<EPS THEN
							dy=covthicky+ns
							ddy=covthicky
						ELSE
							dx=(covthicky+ns)*aa/abs(ny-ky)
							ddx=(covthicky)*aa/abs(ny-ky)
						ENDIF

						IF nx-kx=0 THEN
							dx=covthicky+ns
							ddx=covthicky
						ELSE
							dy=(covthicky+ns)*aa/abs(nx-kx)
							ddy=(covthicky)*aa/abs(nx-kx)
						ENDIF

							kkxp=kxp
							kkyp=kyp
							nnxp=nxp
							nnyp=nyp

							IF i*depthTreadIn <= ly or kisvernyul=15 THEN
								kkyp=kyp-dy
							ELSE
								kkxp=kxp-dx
							ENDIF

							IF i*depthTreadOut <= ly+flw or vernyul=15 THEN
								nnyp=nyp-dy
							ELSE
								nnxp=nxp-dx
							ENDIF


						!!! *** COVER HORIZONTAL

						ADDz sst+th*i

						IF cover THEN
							MATERIAL mat_tread
							SECT_FILL typeFillTread, penBackFillTread, penFillTread, penLineTread

							IF vernyul=0 and kisvernyul=0 THEN
								PRISM 5, covthick,
									kx,ky,
									kkxp,kkyp,
									nnxp,nnyp,
									nx,ny,
									kx,ky
							ELSE
								IF vernyul=15 and kisvernyul=0 THEN
									PRISM 6, covthick,
										kx,ky,
										kkxp,kkyp,
										nnxp,nnyp,

										0,ly+flw,

										nx,ny,
										kx,ky
								ENDIF
								IF kisvernyul=15 and vernyul=0 THEN
									PRISM 6, covthick,
										kx,ky,
										flw,ly,
										kkxp,kkyp,
										nnxp,nnyp,
										nx,ny,
										kx,ky

								ENDIF
								IF vernyul=15 and kisvernyul=15 THEN
									PRISM 7, covthick,
										kx,ky,
										flw,ly,
										kkxp,kkyp,
										nnxp,nnyp,
										0,ly+flw,
										nx,ny,
										kx,ky
								ENDIF
							ENDIF
						ENDIF

				DEL 1
			 NEXT i
		ENDIF

	ENDGROUP


	GROUP "covery"	!!! *** Cover/Vertical

		IF covery and covthicky > 0 THEN

				nx=0
				ny=-1
				kx=flw
				ky=-1

				vernyul=0
				kisvernyul=0

			 FOR i=1 to rnu

					kxp=kx
					kyp=ky
					nxp=nx
					nyp=ny


				IF depthTreadIn*i <= ly THEN
						ky=depthTreadIn*i
						kx=flw
					ELSE
						ky=ly
						kx=flw+depthTreadIn*i-ly
					ENDIF
					IF depthTreadOut*i <= ly+flw THEN
						ny=i*depthTreadOut
					ELSE
						ny=ly+flw
						nx=i*depthTreadOut-ny
					ENDIF



				IF i=rnu THEN
					kx=kx+1
					nx=nx+1
				ENDIF


				IF (depthTreadIn*(i-1) <= ly) and depthTreadIn*i > ly THEN
					kisvernyul=15
				ELSE kisvernyul=0


				IF (depthTreadOut*(i-1) < ly+flw) and depthTreadOut*i > ly+flw THEN
					vernyul=15
				ELSE vernyul=0


						!!! *** NOSING

						aa=sqr((ny-ky)*(ny-ky)+(nx-kx)*(nx-kx))

						IF ABS(ny-ky)<EPS THEN
							dy=covthicky+ns
							ddy=covthicky
						ELSE
							dx=(covthicky+ns)*aa/abs(ny-ky)
							ddx=(covthicky)*aa/abs(ny-ky)
						ENDIF

						IF nx-kx=0 THEN
							dx=covthicky+ns
							ddx=covthicky
						ELSE
							dy=(covthicky+ns)*aa/abs(nx-kx)
							ddy=(covthicky)*aa/abs(nx-kx)
						ENDIF

							kkxp=kxp
							kkyp=kyp
							nnxp=nxp
							nnyp=nyp

							IF i*depthTreadIn <= ly or kisvernyul=15 THEN
								kkyp=kyp-dy
							ELSE
								kkxp=kxp-dx
							ENDIF

							IF i*depthTreadOut <= ly+flw or vernyul=15 THEN
								nnyp=nyp-dy
							ELSE
								nnxp=nxp-dx
							ENDIF


						ADDz sst+th*i


						!!! *** Cover/Vertical

						IF i*depthTreadIn <= ly or kisvernyul THEN
							kkyp=kyp-ddy
						ELSE
							kkxp=kxp-ddx
						ENDIF

						IF i*depthTreadOut <= ly+flw or vernyul THEN
							nnyp=nyp-ddy
						ELSE
							nnxp=nxp-ddx
						ENDIF


						ADDz -th+covthick
							MATERIAL mat_riser
							SECT_FILL typeFillRiser, penBackFillRiser, penFillRiser, penLineRiser

							PRISM 5, th-covthick,
								kxp, kyp,
								kkxp, kkyp,
								nnxp, nnyp,
								nxp, nyp,
								kxp, kyp
						DEL 1

				DEL 1
			NEXT i
		ENDIF

	ENDGROUP


	IF gs_detlevel_3D_m = DET3D_DETAILED THEN
		IF cover THEN PLACEGROUP SUBGROUP("cover", "nagyharap2")
		IF covery THEN PLACEGROUP SUBGROUP("covery", "nagyharap3")
	ENDIF


	KILLGROUP "cover"
	KILLGROUP "covery"
	KILLGROUP "nagyharap2"
	KILLGROUP "nagyharap3"


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! *** Hotspot/Flight ** !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

	FlightUNID=1

	addz covthick
	!!! LX: Upper Flight Length
	HOTSPOT flw,	ly,	th*rnu+sst,	FlightUNID,		lx,		1+128 : FlightUNID=FlightUNID+1
	HOTSPOT flw-1,	ly,	th*rnu+sst, FlightUNID,		lx,		3 : FlightUNID=FlightUNID+1
	HOTSPOT flw+lx,	ly,	th*rnu+sst, FlightUNID,		lx,		2 : FlightUNID=FlightUNID+1

	HOTSPOT flw,	ly+flw,	th*rnu+sst,	FlightUNID,		lx,		1+128 : FlightUNID=FlightUNID+1
	HOTSPOT flw-1,	ly+flw,	th*rnu+sst, FlightUNID,		lx,		3 : FlightUNID=FlightUNID+1
	HOTSPOT flw+lx,	ly+flw,	th*rnu+sst, FlightUNID,		lx,		2 : FlightUNID=FlightUNID+1

	!!! Flight Width
	HOTSPOT 0,		0,		sst, FlightUNID,		flw,	1+256	 : FlightUNID=FlightUNID+1
	HOTSPOT -1,		0,		sst, FlightUNID,		flw,	3 : FlightUNID=FlightUNID+1
	HOTSPOT flw,	0,		sst, FlightUNID,		flw,	2 : FlightUNID=FlightUNID+1
	del 1


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! *** Railing ** !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

! ------------------------------------------------------------------------------
! Left rail
! ------------------------------------------------------------------------------

IF rail_m = RAILPOS_LEFT or rail_m = RAILPOS_BOTH THEN
	if bSameRails then
		leftRailType_m = rightRailType_m
	endif

	material fmatl

	PostOffset=0
	PostOffsetHgt=0

	! ---  Rail on 1st Run -----------------------------------------------------
	if bComplexRailLeft then
		ymeredek=(ly+flw+roffl-depthTreadOut)*TAN(SlabAlfaOut)
		ang=ATN(ymeredek/((ly+flw+roffl-depthTreadOut)))
	else
		ymeredek=(ly+flw+roffl)*TAN(SlabAlfaOut)
		ang=ATN(ymeredek/(ly+flw+roffl))
	endif

	ADD (flw-roffl+handRailWidthL/2)-flw, 0, sst+th+covthick
	ROTz 90

	IF bSameRails=0 THEN
		RailUNID=1100
		!!! Distance from Slab/Stair
		HOTSPOT 0,0,0,	RailUNID, dsl, 1+128: RailUNID=RailUNID+1
		HOTSPOT 0,0,dsl,RailUNID, dsl, 2: RailUNID=RailUNID+1
		HOTSPOT 0,0,-1,	RailUNID, dsl, 3: RailUNID=RailUNID+1

		!!! Height of Rail
		HOTSPOT 0,0,dsl,	RailUNID, hrl, 1+128: RailUNID=RailUNID+1
		HOTSPOT 0,0,dsl+hrl,RailUNID, hrl, 2: RailUNID=RailUNID+1
		HOTSPOT 0,0,dsl-1,	RailUNID, hrl, 3: RailUNID=RailUNID+1
	ELSE
		RailUNID=1200
		!!! Distance from Slab/Stair
		HOTSPOT 0,0,0,	RailUNID, dsr, 1+128: RailUNID=RailUNID+1
		HOTSPOT 0,0,dsr,RailUNID, dsr, 2: RailUNID=RailUNID+1
		HOTSPOT 0,0,-1,	RailUNID, dsr, 3: RailUNID=RailUNID+1

		!!! Height of Rail
		HOTSPOT 0,0,dsr,	RailUNID, hrr, 1+128: RailUNID=RailUNID+1
		HOTSPOT 0,0,dsr+hrr,RailUNID, hrr, 2: RailUNID=RailUNID+1
		HOTSPOT 0,0,dsr-1,	RailUNID, hrr, 3: RailUNID=RailUNID+1
	ENDIF

	lraSimple=ly+flw+roffl
	lraComplex=(ly+flw+roffl-depthTreadOut)
	additionXComplex=depthTreadOut/2
	additionZComplex=0
	hrovL=td/2-handRailWidthL/2
	hrovR=td/2-handRailWidthL/2
	postNumber = npl
	side = SIDE_LEFT
	gosub "callRailsForStair"

	DEL 2

	! ---  Rail on 2nd Run -----------------------------------------------------
	IF bSameRails=0 THEN
		ADD -flw+2*flw+lx-depthTreadOut+(depthTreadOut/2)*bComplexRailLeft,ly+flw-handRailWidthL/2+roffl, ZZYZX+sst+covthick

			RailUNID=1300
			!!! Distance from Slab/Stair
			HOTSPOT 0,0,0,		RailUNID, dsl, 1+128: RailUNID=RailUNID+1
			HOTSPOT 0,0,0+dsl,	RailUNID, dsl, 2: RailUNID=RailUNID+1
			HOTSPOT 0,0,0-1,	RailUNID, dsl, 3: RailUNID=RailUNID+1

			!!! Height of Rail
			HOTSPOT 0,0,dsl,	RailUNID, hrl, 1+128: RailUNID=RailUNID+1
			HOTSPOT 0,0,dsl+hrl,RailUNID, hrl, 2: RailUNID=RailUNID+1
			HOTSPOT 0,0,dsl-1,	RailUNID, hrl, 3: RailUNID=RailUNID+1

		DEL 1
	ELSE
		ADD -flw+2*flw+lx-depthTreadOut+(depthTreadOut/2)*bComplexRailLeft,ly+flw-handRailWidthL/2+roffr, ZZYZX+sst+covthick

			RailUNID=1400
			!!! Distance from Slab/Stair
			HOTSPOT 0,0,0,		RailUNID, dsr, 1+128: RailUNID=RailUNID+1
			HOTSPOT 0,0,0+dsr,	RailUNID, dsr, 2: RailUNID=RailUNID+1
			HOTSPOT 0,0,0-1,	RailUNID, dsr, 3: RailUNID=RailUNID+1

			!!! Height of Rail
			HOTSPOT 0,0,dsr,	RailUNID, hrr, 1+128: RailUNID=RailUNID+1
			HOTSPOT 0,0,dsr+hrr,RailUNID, hrr, 2: RailUNID=RailUNID+1
			HOTSPOT 0,0,dsr-1,	RailUNID, hrr, 3: RailUNID=RailUNID+1

		DEL 1
	ENDIF

	add -flw, roffl-handRailWidthL/2+ly+flw, 0

	if bComplexRailLeft then
		SimpleBarDiff=hrl-hrhl
		ymeredek=(lx+flw-depthTreadOut+roffl)*TAN(SlabAlfaOut)
		ang=ATN(ymeredek/(lx+flw+roffl-depthTreadOut))

		ADDx flw-roffl+td/2
		ADDz sst+th+covthick+(ly+flw)*(th*rnu)/(ly+lx+flw+flw)

		ADD -handRailWidthL-td/2, -handRailWidthL/2, dsl-td/2*(th*rnu)/(ly+lx+flw+flw)+SimpleBarDiff
	ELSE
		SimpleBarDiff = (hrl-bhl) * (leftRailType_m = 3)
		ymeredek=(lx+flw-depthTreadOut+roffl-handRailWidthL)*TAN(SlabAlfaOut)
		ang=ATN(ymeredek/(lx+flw+roffl-depthTreadOut-handRailWidthL))

		ADDx flw-roffl+handRailWidthL
		ADDz sst+th+covthick+(ly+flw)*(th*rnu)/(ly+lx+flw+flw)+(handRailWidthL-roffl)*TAN(SlabAlfaOut)

		ADD -handRailWidthL, -handRailWidthL/2, dsl
	ENDIF

	IF hrtl_m = HANDRAIL_RECTANGULAR & not(bComplexRailLeft) & (leftRailType_m <> 3) THEN
		BLOCK handRailWidthL,handRailWidthL, hrl-SimpleBarDiff
	ENDIF
	DEL 1

	lraSimple=lx+flw+roffl-depthTreadOut-handRailWidthL
	lraComplex=lx+flw+roffl-depthTreadOut
	additionXComplex=0
	additionZComplex=0
	hrovL=td/2-handRailWidthL
	hrovR=td/2-handRailWidthL
	postNumber = npl
	side = SIDE_LEFT
	gosub "callRailsForStair"

	DEL 3
ENDIF

! ------------------------------------------------------------------------------
! Right rail
! ------------------------------------------------------------------------------

IF rail_m = RAILPOS_RIGHT or rail_m = RAILPOS_BOTH THEN
	! --- Railing on the 1st run -----------------------------------------------
	if bComplexRailRight then
		ymeredek=(ly-roffr-depthTreadIn)*TAN(SlabAlfa)
		ang=ATN(ymeredek/(ly-roffr-depthTreadIn))
	else
		ymeredek=(ly-roffr)*TAN(SlabAlfa)
		ang=ATN(ymeredek/(ly-roffr))
	endif

	ADD (flw+roffr-handRailWidthR/2), 0, sst+th+covthick
	ROTz 90

	!!! *** Right Railing/Lower Part

	RailUNID=1000

	!!! Distance from Slab/Stair
	HOTSPOT 0,0,0,	RailUNID, dsr, 1+128: RailUNID=RailUNID+1
	HOTSPOT 0,0,dsr,RailUNID, dsr, 2: RailUNID=RailUNID+1
	HOTSPOT 0,0,-1,	RailUNID, dsr, 3: RailUNID=RailUNID+1

	!!! Height of Rail
	HOTSPOT 0,0,dsr,	RailUNID, hrr, 1+128: RailUNID=RailUNID+1
	HOTSPOT 0,0,dsr+hrr,RailUNID, hrr, 2: RailUNID=RailUNID+1
	HOTSPOT 0,0,dsr-1,	RailUNID, hrr, 3: RailUNID=RailUNID+1

	!!! *** Right Railing/Lower Part

	lraSimple=ly-roffr
	lraComplex=ly-roffr-depthTreadIn
	additionXComplex=depthTreadIn/2
	additionZComplex=0
	hrovL=depthTreadIn/2
	hrovR=depthTreadIn/2
	postNumber = npr
	side = SIDE_RIGHT
	gosub "callRailsForStair"

	del 2

	! --- Railing on the 2nd run -----------------------------------------------
	ADD flw+lx-depthTreadIn+(depthTreadIn/2-handRailWidthR)*bComplexRailRight,ly+handRailWidthR/2-roffr, ZZYZX+sst+covthick

		!!! Distance from Slab/Stair
		HOTSPOT 0,0,0,	RailUNID, dsr, 1+128: RailUNID=RailUNID+1
		HOTSPOT 0,0,0+dsr,RailUNID, dsr, 2: RailUNID=RailUNID+1
		HOTSPOT 0,0,0-1,	RailUNID, dsr, 3: RailUNID=RailUNID+1

		!!! Height of Rail
		HOTSPOT 0,0,dsr,	RailUNID, hrr, 1+128: RailUNID=RailUNID+1
		HOTSPOT 0,0,dsr+hrr,RailUNID, hrr, 2: RailUNID=RailUNID+1
		HOTSPOT 0,0,dsr-1,	RailUNID, hrr, 3: RailUNID=RailUNID+1

	DEL 1

	if bComplexRailRight then
		ymeredek=(lx-depthTreadIn-roffr)*TAN(SlabAlfa)
		PostOffset=-depthTreadIn/2
		ang=ATN(ymeredek/(lx-roffr-depthTreadIn))

		ADDx flw+depthTreadIn
		ADDz sst+th+covthick+(ly-roffr-depthTreadIn)*TAN(SlabAlfa)+2*roffr*TAN(SlabAlfa)+depthTreadIn*TAN(SlabAlfa)
	else
		ymeredek=(lx-depthTreadIn-roffr)*TAN(SlabAlfa)
		PostOffset=0
		ang=ATN(ymeredek/(lx-roffr-depthTreadIn))

		ADDx flw+handRailWidthR
		ADDz sst+th+covthick+(ly-roffr)*TAN(SlabAlfa)+2*roffr*TAN(SlabAlfa)
	endif

	ADDy ly-roffr+handRailWidthR/2
	ADDx roffr
	ADDx -handRailWidthR+PostOffset

	!!! Handrails Connection at Corner/Right Side
	SimpleBarDiff = (hrr-bhr) * (rightRailType_m = 3)
	ADD -handRailWidthR, -handRailWidthR/2, dsr+SimpleBarDiff-2*roffr*TAN(SlabAlfa)
		MATERIAL fmatr
		IF NOT(bComplexRailRight) AND roffr >= 0 THEN
			IF (rightRailType_m = 3 & btypr_m = BAR_RECTANGULAR) | hrtr_m = HANDRAIL_RECTANGULAR THEN
				BLOCK handRailWidthR,handRailWidthR, hrr-SimpleBarDiff+2*roffr*TAN(SlabAlfa)
			endif
		ENDIF
	DEL 1

	lraSimple=lx-roffr-depthTreadIn
	lraComplex=lx-roffr-depthTreadIn
	additionXComplex=0
	additionZComplex=0
	hrovL=depthTreadIn/2
	hrovR=depthTreadIn/2
	postNumber = npr
	side = SIDE_RIGHT
	gosub "callRailsForStair"

	DEL 5
ENDIF
DEL 1

DEL TOP
END

! ==============================================================================
"callRailsForStair":
! ------------------------------------------------------------------------------
!	lraSimple
!	lraComplex
!	additionXComplex
!	additionZComplex
!	hrovL: rail overhang start
!	hrovR: rail overhang end
!	postNumber:   number of posts
!	side: SIDE_LEFT or SIDE_RIGHT
! ==============================================================================
	ani = ang
	additionXComplex = additionXComplex
	additionZComplex = additionZComplex
	gosub "callRails"
return

! ==============================================================================
"callRails":
! ------------------------------------------------------------------------------
!	ani
!	additionXComplex
!	additionZComplex
!	dsComplex
!  ------------------
!	side: SIDE_LEFT or SIDE_RIGHT
!	lraSimple
!	lraComplex
!	hrovL: rail overhang start
!	hrovR: rail overhang end
!	postNumber:   number of posts
! ==============================================================================
	if side = SIDE_LEFT then
		railBarDepth	= bwl
		railBarDiam		= bdl
		railHeight		= hrl
		railBarThk		= fthl
		railBarType		= btypl_m
		railFrameThk	= fthl
		railDist		= dsl
		railType_m		= leftRailType_m
		railPostDiam	= pdl
		railPostWidth	= pwl
		railPostThk		= pthl
		railPostType	= ptl_m
		barNumber		= nbl
		iBalusterStyle	= btl_m
		railFramesWSide	= fswl
		railFramesWTop	= ftwl
		railFramesWBot	= fbwl
		railBarHeight	= bhl
		railBarFillThk	= bthl
		balusterDist	= abdistl
		railFrameMat	= fmatl
		railBaluFillMat	= bmatl
		railPostMat		= pmatl
		balusterNumber	= nbtl
		railFillDist	= fdfl
!!!		railPostBaseType= gs_PostBaseTypeL_m
		railDistFromHr	= sbhl
!!!		railPostBaseOv	= gs_PostBaseOverhangL
		handRailType	= hrtl_m
		handRailWidth	= hrwl
		handRailDiam	= hrdl
		handRailHeight	= hrhl
	else
		railBarDepth	= bwr
		railBarDiam		= bdr
		railHeight		= hrr
		railBarThk		= fthr
		railBarType		= btypr_m
		railFrameThk	= fthr
		railDist		= dsr
		railType_m		= rightRailType_m
		railPostDiam	= pdr
		railPostWidth	= pwr
		railPostThk		= pthr
		railPostType	= ptr_m
		barNumber		= nbr
		iBalusterStyle	= btr_m
		railFramesWSide	= fswr
		railFramesWTop	= ftwr
		railFramesWBot	= fbwr
		railBarHeight	= bhr
		railBarFillThk	= bthr
		balusterDist	= abdistr
		railFrameMat	= fmatr
		railBaluFillMat	= bmatr
		railPostMat		= pmatr
		balusterNumber	= nbtr
		railFillDist	= fdfr
!!!		railPostBaseType= gs_PostBaseTypeR_m
		railDistFromHr	= sbhr
!!!		railPostBaseOv	= gs_PostBaseOverhangR
		handRailType	= hrtr_m
		handRailWidth	= hrwr
		handRailDiam	= hrdr
		handRailHeight	= hrhr
	endif

	call "stairRails_m" parameters	railType_m				= railType_m,
									iStairType				= 2,
									bEnableWired02Rail		= 0,
									bEnableNonVerticalRail	= 0,
									additionXComplex		= additionXComplex,
									additionZComplex		= additionZComplex,
									ptyp_m					= 1,
									ani						= ani,
									ab						= 0,
									rb						= 0,
									rom_m					= 1,
									rmm_m					= 1,
									lraSimple				= lraSimple,
									lraComplex				= lraComplex,
									railHeight				= railHeight,
									railDist				= railDist,
									gs_detlevel_3D_m		= gs_detlevel_3D_m,
									gs_cont_pen				= gs_cont_pen,
									res						= res,
									rescs					= rescs,
									gs_shadow				= gs_shadow,
									railFrameThk			= railFrameThk,
									railFramesWSide			= railFramesWSide,
									railFramesWTop			= railFramesWTop,
									railFramesWBot			= railFramesWBot,
									railBarType				= railBarType,
									railBarDepth			= railBarDepth,
									railBarFillThk			= railBarFillThk,
									railBarDiam				= railBarDiam,
									balusterDist			= balusterDist,
									railFrameMat			= railFrameMat,
									railBaluFillMat			= railBaluFillMat,
									barNumber				= barNumber,
									railBarHeight			= railBarHeight,
									railFillDist			= railFillDist,
									handRailType			= handRailType,
									handRailDiam			= handRailDiam,
									handRailWidth			= handRailWidth,
									handRailHeight			= handRailHeight,
									hrovL					= hrovL,
									hrovR					= hrovR,
									iBalusterStyle			= iBalusterStyle,
									railPostDiam			= railPostDiam,
									railPostWidth			= railPostWidth,
									railPostThk				= railPostThk,
									railPostType			= railPostType,
									postNumber				= postNumber,
									railPostMat				= railPostMat,
									iParamInputType			= 1,
									balusterNumber			= balusterNumber,
!!!									railPostBaseType		= railPostBaseType,
!!!									railPostBaseOv			= railPostBaseOv,
									railDistFromHr			= railDistFromHr
return

]]>
</Script_3D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_2D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[

! ---------- Hotspots ----------[

	!!! FlightUNID=1		!!! 1
	!!! RailUNID=1000		!!! 1000,1100,1200
	!!! BreakUNID=2000		!!! 2000,2050,2100,2150
	!!! StartSymbUNID=3000	!!! 3000,3100
	!!! ArrowUNID=4000		!!! 4000,4100
	!!! RiseRunUNID=5000	!!! 5000,5100,5200
	!!! UpDownUNID=6000		!!! 6000
	!!! NumUNID=7000		!!! 7000,7100

! ---------- Hotspots ----------]

temp_wLineLength = 0
temp_wLineLengthAbove = 0

dim drawPart[3]		! 1 - lower,  2 - upper,  3 - full
dim drawDashed[3]	! 1 - lower,  2 - upper,  3 - full
dim drawSteps[3]	! 1 - lower,  2 - upper,  3 - full
dim drawDetails[3]	! 1 - lower,  2 - upper,  3 - full
dim drawNum[3]		! 1 - lower,  2 - upper,  3 - full

drawPart[1] 	= 0	! Lower
drawPart[2] 	= 0	! Upper
drawPart[3] 	= 0	! Full
drawDashed[1] 	= 0	! Lower
drawDashed[2] 	= 0	! Upper
drawDashed[3] 	= 0	! Full
drawSteps[1] 	= 0	! Lower
drawSteps[2] 	= 0	! Upper
drawSteps[3] 	= 0	! Full
drawDetails[1] 	= 0	! Lower
drawDetails[2] 	= 0	! Upper
drawDetails[3]	= 0	! Full
drawNum[1] 		= 0	! Lower
drawNum[2] 		= 0	! Upper
drawNum[3]		= 0	! Full

! ---------- Story Sensitive ----------[

abovestory = 0
belowstory = 0
if gs_StorySensitive then
	if GLOB_CH_STORY_DIST > EPS  then
		abovestory = 1
	else
		if GLOB_CH_STORY_DIST < -EPS  then
			belowstory = 1
		endif
	endif
endif

! ---------- Story Sensitive ----------]

! ---------- Settings of 2D Symbol Type ----------
_iSymbolType = 1
if gs_detlevel_2D_m = DET2D_SCALESENSITIVE then
	if GLOB_SCALE <= _iScaleMD then									!! Detailed Scale
		_iSymbolType = iEnabledSymbolTypes[iSymbolGroup][3]
	else
		if GLOB_SCALE > _iScaleMD & GLOB_SCALE <= _iScaleSM then	!! Middle Scale
			_iSymbolType = iEnabledSymbolTypes[iSymbolGroup][2]
		else														!! Simple Scale
			_iSymbolType = iEnabledSymbolTypes[iSymbolGroup][1]
		endif
	endif
else
	_iSymbolType = gs_SymbolType_m
endif

if _iSymbolType = 1 then
	drawPart[3]		= 1		! Full
	drawDashed[3] 	= 1		! Full
	! Railing
	rail_m = RAILPOS_NONE
endif

if _iSymbolType = 2 then
	drawPart[3]	= 1		! Full
	! Railing
	rail_m = RAILPOS_NONE
ENDIF

if _iSymbolType = 3 then
	drawPart[1]	= 1		! Lower
	! Railing
	rail_m = RAILPOS_NONE
ENDIF

if _iSymbolType = 4 then
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
	drawDashed[2] = 1	! Upper
	! Railing
	rail_m = RAILPOS_NONE
ENDIF

if _iSymbolType = 5 then
	drawPart[1]	= 1	! Lower
	drawPart[2]	= 1	! Upper
	! Railing
	rail_m = RAILPOS_NONE
ENDIF

if _iSymbolType = 6 then
	drawPart[3]	= 1		! Full
	drawDashed[3] = 1	! Full
	drawSteps[3] = 1	! Full
	! Railing
	rail_m = RAILPOS_NONE
ENDIF

if _iSymbolType = 7 then
	drawPart[3]	= 1		! Full
	drawSteps[3] = 1	! Full
	! Railing
	rail_m = RAILPOS_NONE
ENDIF

if _iSymbolType = 8 then
	drawPart[1]	= 1		! Lower
	drawSteps[1] = 1	! Lower
	! Railing
	rail_m = RAILPOS_NONE
ENDIF

if _iSymbolType = 9 then
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
	drawDashed[2] = 1	! Upper
	drawSteps[1] = 1	! Lower
	! Railing
	rail_m = RAILPOS_NONE
ENDIF

if _iSymbolType = 10 then
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
	drawSteps[1] = 1	! Lower
	! Railing
	rail_m = RAILPOS_NONE
ENDIF

if _iSymbolType = 11 then
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
	drawDashed[2] = 1	! Upper
	drawSteps[1] = 1	! Lower
	drawSteps[2] = 1	! Upper
	! Railing
	rail_m = RAILPOS_NONE
ENDIF

if _iSymbolType = 12 then
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
	drawSteps[1] = 1	! Lower
	drawSteps[2] = 1	! Upper
	! Railing
	rail_m = RAILPOS_NONE
ENDIF

if _iSymbolType = 13 then
	drawPart[3]	= 1		! Full
	drawDashed[3] = 1	! Full
	drawSteps[3] = 1	! Full
	drawDetails[3] = 1	! Full
ENDIF

if _iSymbolType = 14 then
	drawPart[3]	= 1		! Full
	drawSteps[3] = 1	! Full
	drawDetails[3] = 1	! Full
ENDIF

if _iSymbolType = 15 then
	drawPart[1]	= 1		! Lower
	drawSteps[1] = 1	! Lower
	drawDetails[1] = 1	! Lower
	drawSteps[2] = 1	! Upper
endif

if _iSymbolType = 16 then
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
	drawDashed[2] = 1	! Upper
	drawSteps[1] = 1	! Lower
	drawDetails[1] = 1	! Lower
ENDIF

if _iSymbolType = 17 then
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
	drawSteps[1] = 1	! Lower
	drawDetails[1] = 1	! Lower
ENDIF

if _iSymbolType = 18 then
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
	drawDashed[2] = 1	! Upper
	drawSteps[1] = 1	! Lower
	drawSteps[2] = 1	! Upper
	drawDetails[1] = 1	! Lower
	drawDetails[2] = 1	! Upper
ENDIF

if _iSymbolType = 19 then
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
	drawDashed[2] = 1	! Upper
	drawSteps[1] = 1	! Lower
	drawSteps[2] = 1	! Upper
	drawDetails[1] = 1	! Lower
ENDIF

if _iSymbolType = 20 then
	drawPart[1]	= 1		! Lower
	drawPart[2]	= 1		! Upper
	drawSteps[1] = 1	! Lower
	drawSteps[2] = 1	! Upper
	drawDetails[1] = 1	! Lower
	drawDetails[2] = 1	! Upper
endif

! Numbering
if bShowNumbering then
	drawNum[1]		= drawPart[1] & (not(drawPart[2]) | (drawPart[2] & gs_NumBelow))
	drawNum[2]		= drawPart[2] & (not(drawPart[1]) | (drawPart[1] & gs_NumAbove))
	drawNum[3]		= drawPart[3]
endif

! Nosing
if not(covery) & ( not(cover) | ABS(ns) < EPS) then
	drawDetails[1] = 0
	drawDetails[2] = 0
	drawDetails[3] = 0
endif

! ---------- Stories below the home story ---------- [

bBackgroundFill = 1
if belowstory then
	drawPart[1]		= 0
	drawPart[2]		= 0
	drawPart[3]		= 1

	drawDashed[1]		= 0
	drawDashed[2]		= 0
	drawDashed[3]		= 1

	drawSteps[1] = 0
	drawSteps[2] = 0
	drawSteps[3] = 0

	drawDetails[1] = 0
	drawDetails[2] = 0
	drawDetails[3] = 0

	drawNum[1] = 0
	drawNum[2] = 0
	drawNum[3] = 0

	walkl			= 0
	gs_fill_type	= 65
	gs_back_pen		= 0
	rail_m = RAILPOS_NONE
	bShowRiseAndRunText		= 0

endif

! ---------- Stories above the home story ---------- [
if aboveStory then
	drawPart[1] = 0
	drawPart[2] = 0
	drawPart[3] = 0

	if gs_TreadStUp then
		drawSteps[1] = 1
		drawSteps[2] = 1
		drawSteps[3] = 1

		if drawDetails[1] | drawDetails[3] then
			drawDetails[1] = 1
			drawDetails[2] = 1
			drawDetails[3] = 1
		endif

	else
		drawSteps[1] = 0
		drawSteps[2] = 0
		drawSteps[3] = 0

		drawDetails[1] = 0
		drawDetails[2] = 0
		drawDetails[3] = 0
	endif

	if gs_BreaklineStUp = 0 then
		drawPart[3] = 1
	else
		if gs_LowerPartStUp then
			drawPart[1] = 1
		endif
		if gs_UpperPartStUp then
			drawPart[2] = 1
		endif
	endif

	if gs_numaStUp then
		if drawPart[1] then drawNum[1] = 1
		if drawPart[2] then drawNum[2] = 1
		if drawPart[3] then drawNum[3] = 1
	else
		drawNum[1] = 0
		drawNum[2] = 0
		drawNum[3] = 0
	endif

	if gs_txStUp then
		bShowRiseAndRunText = 1
	else
		bShowRiseAndRunText = 0
	endif

endif


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!! Arrow Size
		IF td> 0.26 THEN
		ArrowDist=0.2
		ELSE
		ArrowDist=td*sin(45)
		ENDIF
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

PEN gs_cont_pen
FILL gs_fill_type

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

flw=flw*th/abs(th)
lx=lx*th/abs(th)

!!! *** S T A I R	 S L A B

	FlightUNID=1
	HOTSPOT2 0,0, FlightUNID : FlightUNID=FlightUNID+1
	HOTSPOT2 0,ly+flw, FlightUNID : FlightUNID=FlightUNID+1

	HOTSPOT2 0,		0, FlightUNID, flw, 1+128 : FlightUNID=FlightUNID+1
	HOTSPOT2 flw,	0, FlightUNID, flw, 2 : FlightUNID=FlightUNID+1
	HOTSPOT2 -1,	0, FlightUNID, flw, 3 : FlightUNID=FlightUNID+1

	HOTSPOT2 flw,	0,  FlightUNID, ly, 1+128 : FlightUNID=FlightUNID+1
	HOTSPOT2 flw,	ly, FlightUNID, ly, 2 : FlightUNID=FlightUNID+1
	HOTSPOT2 flw,	-1, FlightUNID, ly, 3 : FlightUNID=FlightUNID+1

	HOTSPOT2 flw,	ly, FlightUNID, lx, 1+128 : FlightUNID=FlightUNID+1
	HOTSPOT2 flw+lx,ly, FlightUNID, lx, 2 : FlightUNID=FlightUNID+1
	HOTSPOT2 flw-1,	ly, FlightUNID, lx, 3 : FlightUNID=FlightUNID+1

	HOTSPOT2 flw,	ly+flw, FlightUNID, lx, 1+128 : FlightUNID=FlightUNID+1
	HOTSPOT2 flw+lx,ly+flw, FlightUNID, lx, 2 : FlightUNID=FlightUNID+1
	HOTSPOT2 flw-1,	ly+flw, FlightUNID, lx, 3 : FlightUNID=FlightUNID+1


	!!! *** T R E A D S *** !!!

	depthTreadIn=(abs(lx)+ly)/rnu
	depthTreadOut=(ly+abs(flw)+abs(lx)+abs(flw))/rnu

	!!! ***	B R E A K L I N E and A R R O W at Break Line
!		i11=(INT(rnu/5))
!		i21=(INT(rnu/5))+3
!
!		i22=INT(ly/depthTreadIn)-1
!		i12=i22-3
!
!		numSteptoBreakRight=MIN(i11,i12)
!		numSteptoBreakLeft=MIN(i21,i22)
!
!		IF numSteptoBreakRight<=0 THEN numSteptoBreakRight=0


	numSteptoBreakLeft=INT(gs_BreakHeight/th) 	!!! Num. of Steps on Right Side
	numSteptoBreakRight=numSteptoBreakLeft-3						!!! Num. of Steps on Left Side


	IF numSteptoBreakRight<=0 THEN numSteptoBreakRight=0
	IF numSteptoBreakLeft*depthTreadIn>ly THEN
		drawPart[3] = 1		! IF value of BREAK LINE is longer than ly (at corner)
		drawPart[1] = 0
		drawPart[2] = 0

		drawSteps[3] = drawSteps[1]
		drawSteps[1] = 0
		drawSteps[2] = 0

		drawDetails[3] = drawDetails[1]
		drawDetails[1] = 0
		drawDetails[2] = 0

		drawNum[3] = drawNum[1]	| (aboveStory & not(drawPart[1]) & drawNum[2])
		drawNum[1] = 0
		drawNum[2] = 0
	endif

!TEXT2 0,0,numSteptoBreakRight
!TEXT2 flw,0,numSteptoBreakLeft

	!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	!!!!!!!!!!!!!! *** Stair Slab Contour And Fill *** !!!!!!!!!!!!!!!!!!!

	!!! *** Fill above Break Line
	IF gs_FillAbove=1 THEN
		FullFill=2+64
		temp_FillTypeAbove=gs_fill_type
		temp_BackPen=gs_back_pen
	ELSE
		FullFill=0
		temp_FillTypeAbove=gs_FillTypeAbove	!!! because of Area Fill Selection
		temp_BackPen=0						!!! because of Area Fill Selection
	ENDIF

	DRAWINDEX 10
	IF drawPart[3] THEN

			if aboveStory then
				PEN gs_LinePenStUp
				LINE_TYPE gs_LineTypeStUp
			else
				if drawDashed[3] then
					PEN gs_DashLinePen
					LINE_TYPE dash_line
				else
					PEN gs_cont_pen
					LINE_TYPE solid_line
				endif
			endif

			POLY2_b 7, 1+2+64, gs_fill_pen, gs_back_pen,
				0,0,1,
				0,ly+abs(flw),1,
				lx+flw,ly+abs(flw),1,
				lx+flw,ly,1,
				flw, ly, 1,
				flw, 0, 1,
				0,0,-1

	ELSE
		IF breakline_style_m = BREAKLINE_STRAIGHT THEN

			if drawPart[1] then
				if aboveStory then
					PEN gs_LinePenStUp
					LINE_TYPE gs_LineTypeStUp
				else
					if drawDashed[1] then
						PEN gs_DashLinePen
						LINE_TYPE dash_line
					else
						PEN gs_cont_pen
						LINE_TYPE solid_line
					endif
				endif

				POLY2_b 5, 1+2+64, gs_fill_pen, gs_back_pen,
					0,0,1,
					0,numSteptoBreakRight*depthTreadOut,1,
					flw,numSteptoBreakLeft*depthTreadIn,1,
					flw,0,1,
					0,0,-1

				BreakUNID=2000
				HOTSPOT2 0, numSteptoBreakRight*depthTreadOut, BreakUNID: BreakUNID=BreakUNID+1
				HOTSPOT2 flw, numSteptoBreakLeft*depthTreadIn, BreakUNID: BreakUNID=BreakUNID+1

			ENDIF

			if drawPart[2] then
				if aboveStory then
					PEN gs_LinePenStUp
					LINE_TYPE gs_LineTypeStUp
				else
					if drawDashed[2] then
						PEN gs_DashLinePen
						LINE_TYPE dash_line
					else
						PEN gs_cont_pen
						LINE_TYPE solid_line
					endif
				endif

				FILL temp_FillTypeAbove
				POLY2_b 7, 1+FullFill, gs_fill_pen, temp_BackPen,
					0,numSteptoBreakRight*depthTreadOut+brkLineY,1,
					flw,numSteptoBreakLeft*depthTreadIn+brkLineY,1,
					flw,ly,1,
					lx+flw,ly,1,
					lx+flw,ly+abs(flw),1,
					0,ly+abs(flw),1,
					0,numSteptoBreakRight*depthTreadOut+brkLineY,-1

				!!! BREAK LINE
				BreakUNID=2050
				HOTSPOT2 flw/2,	numSteptoBreakRight*depthTreadOut+(numSteptoBreakLeft*depthTreadIn-numSteptoBreakRight*depthTreadOut)/2, BreakUNID, brkLineY, 1+128 : BreakUNID=BreakUNID+1
				HOTSPOT2 flw/2,	numSteptoBreakRight*depthTreadOut+(numSteptoBreakLeft*depthTreadIn-numSteptoBreakRight*depthTreadOut)/2-1, BreakUNID, brkLineY, 3 : BreakUNID=BreakUNID+1
				HOTSPOT2 flw/2,	numSteptoBreakRight*depthTreadOut+(numSteptoBreakLeft*depthTreadIn-numSteptoBreakRight*depthTreadOut)/2+brkLineY, BreakUNID, brkLineY, 2 : BreakUNID=BreakUNID+1

				HOTSPOT2 0, numSteptoBreakRight*depthTreadOut+brkLineY, BreakUNID: BreakUNID=BreakUNID+1
				HOTSPOT2 flw, numSteptoBreakLeft*depthTreadIn+brkLineY, BreakUNID: BreakUNID=BreakUNID+1
			ENDIF

		ELSE
			if breakline_style_m = BREAKLINE_ZIGZAG_CHI then
				angle_breakline=ATN((numSteptoBreakLeft*depthTreadIn-numSteptoBreakRight*depthTreadOut)/flw)
				ZigZag1Y=(2/5*flw)*tan(angle_breakline)
				ZigZag2Y=(2/5*flw)*tan(angle_breakline)

				IF drawPart[1] THEN

					if aboveStory then
						PEN gs_LinePenStUp
						LINE_TYPE gs_LineTypeStUp
					else
						if drawDashed[1] then
							PEN gs_DashLinePen
							LINE_TYPE dash_line
						else
							PEN gs_cont_pen
							LINE_TYPE solid_line
						endif
					endif

					POLY2_b 9, 1+2+64, gs_fill_pen, gs_back_pen,
						0,0,1,
						0,numSteptoBreakRight*depthTreadOut,1,
						4/10*flw,numSteptoBreakRight*depthTreadOut+ZigZag1Y,1,
						4/10*flw,numSteptoBreakLeft*depthTreadIn-ZigZag1Y+brkLineY,1,
						6/10*flw,numSteptoBreakRight*depthTreadOut+ZigZag1Y,1,
						6/10*flw,numSteptoBreakLeft*depthTreadIn-ZigZag1Y,1,
						flw,numSteptoBreakLeft*depthTreadIn,1,
						flw,0,1,
						0,0,-1

					!!! BREAK LINE
					BreakUNID=2100
					HOTSPOT2 flw/2,	numSteptoBreakRight*depthTreadOut+(numSteptoBreakLeft*depthTreadIn-numSteptoBreakRight*depthTreadOut)/2, BreakUNID, brkLineY, 1+128 : BreakUNID=BreakUNID+1
					HOTSPOT2 flw/2,	numSteptoBreakRight*depthTreadOut+(numSteptoBreakLeft*depthTreadIn-numSteptoBreakRight*depthTreadOut)/2-1, BreakUNID, brkLineY, 3 : BreakUNID=BreakUNID+1
					HOTSPOT2 flw/2,	numSteptoBreakRight*depthTreadOut+(numSteptoBreakLeft*depthTreadIn-numSteptoBreakRight*depthTreadOut)/2+brkLineY, BreakUNID, brkLineY, 2 : BreakUNID=BreakUNID+1

					HOTSPOT2 0, numSteptoBreakRight*depthTreadOut, BreakUNID: BreakUNID=BreakUNID+1
					HOTSPOT2 flw, numSteptoBreakLeft*depthTreadIn,BreakUNID: BreakUNID=BreakUNID+1
				ENDIF

				IF drawPart[2] THEN

					if aboveStory then
						PEN gs_LinePenStUp
						LINE_TYPE gs_LineTypeStUp
					else
						if drawDashed[2] then
							PEN gs_DashLinePen
							LINE_TYPE dash_line
						else
							PEN gs_cont_pen
							LINE_TYPE solid_line
						endif
					endif

					FILL temp_FillTypeAbove

					POLY2_b 11, 1+FullFill, gs_fill_pen, temp_BackPen,
						0,numSteptoBreakRight*depthTreadOut+brkLineY,1,
						4/10*flw,numSteptoBreakRight*depthTreadOut+brkLineY+ZigZag2Y,1,
						4/10*flw,numSteptoBreakLeft*depthTreadIn-ZigZag1Y+brkLineY,1,
						6/10*flw,numSteptoBreakRight*depthTreadOut+ZigZag1Y,1,
						6/10*flw,numSteptoBreakRight*depthTreadOut+brkLineY+ZigZag2Y+((numSteptoBreakLeft*depthTreadIn-numSteptoBreakRight*depthTreadOut)-2*ZigZag1Y),1,
						flw,numSteptoBreakLeft*depthTreadIn+brkLineY,1,
						flw,ly,1,
						lx+flw,ly,1,
						lx+flw,ly+abs(flw),1,
						0,ly+abs(flw),1,
						0,numSteptoBreakRight*depthTreadOut+brkLineY,-1

					BreakUNID=2150
					HOTSPOT2 0, numSteptoBreakRight*depthTreadOut+brkLineY, BreakUNID: BreakUNID=BreakUNID+1
					HOTSPOT2 flw, numSteptoBreakLeft*depthTreadIn+brkLineY, BreakUNID: BreakUNID=BreakUNID+1
				ENDIF
			else		!!!ZigZag
				angle_breakline=ATN((numSteptoBreakLeft*depthTreadIn-numSteptoBreakRight*depthTreadOut)/flw)
				ZigZag1Y=(2/5*flw)*tan(angle_breakline)
				ZigZag2Y=(7/20*flw)*tan(angle_breakline)

				IF drawPart[1] THEN

					if aboveStory then
						PEN gs_LinePenStUp
						LINE_TYPE gs_LineTypeStUp
					else
						if drawDashed[1] then
							PEN gs_DashLinePen
							LINE_TYPE dash_line
						else
							PEN gs_cont_pen
							LINE_TYPE solid_line
						endif
					endif

					POLY2_b 9, 1+2+64, gs_fill_pen, gs_back_pen,
						0,0,1,
						0,numSteptoBreakRight*depthTreadOut,1,
						4/10*flw,numSteptoBreakRight*depthTreadOut+ZigZag1Y,1,
						4/10*flw,numSteptoBreakLeft*depthTreadIn-ZigZag1Y,1,
						6/10*flw,numSteptoBreakRight*depthTreadOut+ZigZag1Y,1,
						6/10*flw,numSteptoBreakLeft*depthTreadIn-ZigZag1Y,1,
						flw,numSteptoBreakLeft*depthTreadIn,1,
						flw,0,1,
						0,0,-1

					!!! BREAK LINE
					BreakUNID=2100
					HOTSPOT2 flw/2,	numSteptoBreakRight*depthTreadOut+(numSteptoBreakLeft*depthTreadIn-numSteptoBreakRight*depthTreadOut)/2, BreakUNID, brkLineY, 1+128 : BreakUNID=BreakUNID+1
					HOTSPOT2 flw/2,	numSteptoBreakRight*depthTreadOut+(numSteptoBreakLeft*depthTreadIn-numSteptoBreakRight*depthTreadOut)/2-1, BreakUNID, brkLineY, 3 : BreakUNID=BreakUNID+1
					HOTSPOT2 flw/2,	numSteptoBreakRight*depthTreadOut+(numSteptoBreakLeft*depthTreadIn-numSteptoBreakRight*depthTreadOut)/2+brkLineY, BreakUNID, brkLineY, 2 : BreakUNID=BreakUNID+1

					HOTSPOT2 0, numSteptoBreakRight*depthTreadOut, BreakUNID: BreakUNID=BreakUNID+1
					HOTSPOT2 flw, numSteptoBreakLeft*depthTreadIn,BreakUNID: BreakUNID=BreakUNID+1
				ENDIF

				IF drawPart[2] THEN

					if aboveStory then
						PEN gs_LinePenStUp
						LINE_TYPE gs_LineTypeStUp
					else
						if drawDashed[2] then
							PEN gs_DashLinePen
							LINE_TYPE dash_line
						else
							PEN gs_cont_pen
							LINE_TYPE solid_line
						endif
					endif

					FILL temp_FillTypeAbove

					POLY2_b 11, 1+FullFill, gs_fill_pen, temp_BackPen,
						0,numSteptoBreakRight*depthTreadOut+brkLineY,1,
						7/20*flw,numSteptoBreakRight*depthTreadOut+brkLineY+ZigZag2Y,1,
						7/20*flw,numSteptoBreakRight*depthTreadOut+brkLineY+ZigZag2Y+((numSteptoBreakLeft*depthTreadIn-numSteptoBreakRight*depthTreadOut)-2*ZigZag1Y),1,
						11/20*flw,numSteptoBreakRight*depthTreadOut+brkLineY+ZigZag2Y,1,
						11/20*flw,numSteptoBreakRight*depthTreadOut+brkLineY+ZigZag2Y+((numSteptoBreakLeft*depthTreadIn-numSteptoBreakRight*depthTreadOut)-2*ZigZag1Y),1,
						flw,numSteptoBreakLeft*depthTreadIn+brkLineY,1,
						flw,ly,1,
						lx+flw,ly,1,
						lx+flw,ly+abs(flw),1,
						0,ly+abs(flw),1,
						0,numSteptoBreakRight*depthTreadOut+brkLineY,-1

					BreakUNID=2150
					HOTSPOT2 0, numSteptoBreakRight*depthTreadOut+brkLineY, BreakUNID: BreakUNID=BreakUNID+1
					HOTSPOT2 flw, numSteptoBreakLeft*depthTreadIn+brkLineY, BreakUNID: BreakUNID=BreakUNID+1
				ENDIF
			endif
		ENDIF
	ENDIF

	!!!!!!!!!!!!!!!!!!!!!! *** CONTOUR HOTLINE *** !!!!!!!!!!!!!!!!!

	IF drawPart[2] THEN
		HOTLINE2 0,0,  flw,0
		HOTLINE2 0,0, 0,ly+abs(flw)
		HOTLINE2 0,ly+abs(flw), lx+flw,ly+abs(flw)
		HOTLINE2 lx+flw,ly+abs(flw), lx+flw, ly
		HOTLINE2 lx+flw,ly, flw, ly
		HOTLINE2 flw, ly, flw,0
	ELSE
		HOTLINE2 0,0,  0,numSteptoBreakRight*depthTreadOut
		HOTLINE2 0,numSteptoBreakRight*depthTreadOut, flw,numSteptoBreakLeft*depthTreadIn
		HOTLINE2 flw,numSteptoBreakLeft*depthTreadIn, flw,0
		HOTLINE2 0,0, flw,0
	ENDIF


!===============================================================================
! --- Text / Up-Down Text / Numbering ---
!===============================================================================

! --- Oriented View ------------------------------------------------------------

angleViewRot = 0
if bShowRiseAndRunText | walkingDirUPDN_m <> WALKDIRSTR_NONE | (drawNum[1] | drawNum[2] | drawNum[3]) then
	rrr = REQUEST ("View_Rotangle", "", angleViewRot)
endif
totalRotate = (SYMB_ROTANGLE + angleViewRot) MOD 360


! --- Define Font Style --------------------------------------------------------

define style "UPDN" fontType, UPDNfontsize, 5, 0		  	!!- UP/DN

DEFINE STYLE "stepnum" fontType, gs_NumTextSize, 7, 0		!! - Numbering

DEFINE STYLE "stepnum2" fontType, gs_NumTextSize, 3, 0		!! - Numbering

! --- Rise and Run Text -------------------------------------------------------
DRAWINDEX 50

if bShowRiseAndRunText then
	call "Stair_RiseRun_Text" PARAMETERS ALL	totalRotate				= totalRotate,
												iRotateType 			= 1,
												iRiseRunTextPosition	= 1,
												flightWidth				= flw,
												nRisers					= rnu,
												treadHeight				= th,
												treadDepth				= td,
												RiseRunUNID				= 5000
endif


! --- Up and Down Text -------------------------------------------------------
iReadable = 0
if walkingDirUPDN_m <> WALKDIRSTR_NONE and walkl then
	set STYLE "UPDN"
	pen UPDNfontpen

	nTransUPDN = 0
	nTransHotspot = 0
	add2 flw/2+DirUPDN_X,DirUPDN_Y
	nTransUPDN = nTransUPDN + 1
	! Text Rotation - Readable / Parallel with Walking Line / Align with Symbol
	! ----------------------------------------------------------------------
	if typeTextRotation_UpDn_m = 2 then									! Readable
		if (totalRotate > (gs_readable_angle + eps) & totalRotate < (gs_readable_angle + 180 + eps)) then
			rot2 180
			nTransUPDN = nTransUPDN + 1
		endif
	else
		if typeTextRotation_UpDn_m = 1 then								! Parallel with Walking Line
			if not(SYMB_MIRRORED) then
				iReadable = (totalRotate > (gs_readable_angle - 90 + eps) & totalRotate < (gs_readable_angle + 180 - 90 + eps))- not(totalRotate > (gs_readable_angle - 90 + eps) & totalRotate < (gs_readable_angle + 180 - 90 + eps))
			else
				iReadable = (totalRotate < (gs_readable_angle - 90 + eps) | totalRotate > (gs_readable_angle + 180 - 90 + eps))- not(totalRotate < (gs_readable_angle - 90 + eps) | totalRotate > (gs_readable_angle + 180 - 90 + eps))
			endif
			rot2 -90 * iReadable
			nTransUPDN = nTransUPDN + 1
		endif
	endif
	! ----------------------------------------------------------------------
	rot2 AngUPDN
	nTransUPDN = nTransUPDN + 1

	text2 0,0, walkingDirUPDN

	del nTransUPDN

	width	= STW (walkingDirUPDN)/1000*GLOB_SCALE
	rb		= width/2

	UpDownUNID=6000
	hotspot2 flw/2,				DirUPDN_Y,	UpDownUNID, DirUPDN_X, 1+128	: UpDownUNID=UpDownUNID+1
	hotspot2 flw/2-1,			DirUPDN_Y,	UpDownUNID, DirUPDN_X, 3		: UpDownUNID=UpDownUNID+1
	hotspot2 flw/2+DirUPDN_X,	DirUPDN_Y,	UpDownUNID, DirUPDN_X, 2		: UpDownUNID=UpDownUNID+1

	hotspot2 flw/2+DirUPDN_X,	0,			UpDownUNID, DirUPDN_Y, 1+128	: UpDownUNID=UpDownUNID+1
	hotspot2 flw/2+DirUPDN_X,	-1,			UpDownUNID, DirUPDN_Y, 3		: UpDownUNID=UpDownUNID+1
	hotspot2 flw/2+DirUPDN_X,	DirUPDN_Y,	UpDownUNID, DirUPDN_Y, 2		: UpDownUNID=UpDownUNID+1

	ADD2 flw/2+DirUPDN_X,DirUPDN_Y
	nTransHotspot = nTransHotspot +1
	if typeTextRotation_UpDn_m = 1 then	! Parallel with Walking Line
		rot2 -90 * iReadable
		nTransHotspot = nTransHotspot +1
	endif
	hotspot2 0,					0,				UpDownUNID,	AngUPDN,6		: UpDownUNID=UpDownUNID+1
	hotspot2 rb,				0,				UpDownUNID,	AngUPDN,4+128	: UpDownUNID=UpDownUNID+1
	hotspot2 rb*cos(AngUPDN),	rb*sin(AngUPDN),UpDownUNID,	AngUPDN,5		: UpDownUNID=UpDownUNID+1
	del nTransHotspot

endif

! --- Numbering ----------------------------------------------------------------

if (drawNum[1] | drawNum[2] | drawNum[3]) then
	if DirNumText_x <= flw/2 then
		endNumBelow		= numSteptoBreakRight
		startNumAbove_1 = numSteptoBreakRight+1
		startNumAbove_2 = INT((ly+flw)/depthTreadOut)
		depthTread		= depthTreadOut
	else
		endNumBelow		= numSteptoBreakLeft-1
		startNumAbove_1 = numSteptoBreakLeft
		startNumAbove_2 = INT((ly)/depthTreadIn)
		depthTread		= depthTreadIn
	endif

	set style "stepnum"
	pen gs_NumTextPen

	rrrr = REQUEST ("Height_of_style", "stepnum", strHeight)
	strHeight = strHeight / 1000 * GLOB_SCALE
	nTextTransformations = 0

	if drawNum[1] | drawNum[3] then
		nTextPos = 0
		add2 DirNumText_X, -depthTread + DirNumText_Y
		nTextPos = nTextPos + 1
		for iNumStep = 0 to endNumBelow
			add2 0, depthTread
			nTextPos = nTextPos + 1

			! Text Rotation - Readable / Align with Symbol
			! ----------------------------------------------------------------------
			if typeTextRotation_Num_m = 2 then								! Readable
				if (totalRotate > (gs_readable_angle + eps) & totalRotate < (gs_readable_angle + 180 + eps)) then
					rot2 180
					strWidth = STW(str("%.0", iNumStep + nStartNumbering)) / 1000 * GLOB_SCALE
					add2 -strWidth, -strHeight
					nTextTransformations = 2
				endif
			endif
			! ----------------------------------------------------------------------

			text2 0, 0, iNumStep + nStartNumbering
			if nTextTransformations > 0 then del nTextTransformations
		next iNumStep
		del nTextPos

		NumUNID = 7000
		hotspot2 0,				DirNumText_Y, NumUNID, DirNumText_X, 1+128	:NumUNID=NumUNID+1
		hotspot2 -1,			DirNumText_Y, NumUNID, DirNumText_X, 3		:NumUNID=NumUNID+1
		hotspot2 DirNumText_X,	DirNumText_Y, NumUNID, DirNumText_X, 2		:NumUNID=NumUNID+1

		hotspot2 DirNumText_X, 0,				NumUNID, DirNumText_Y, 1+128	:NumUNID=NumUNID+1
		hotspot2 DirNumText_X, -1,				NumUNID, DirNumText_Y, 3		:NumUNID=NumUNID+1
		hotspot2 DirNumText_X, DirNumText_Y,	NumUNID, DirNumText_Y, 2		:NumUNID=NumUNID+1
	endif

	if drawNum[2] | drawNum[3] then
		nTextPos = 0
	   ! ----- After Break Line the TreadNum of the first Flight -----
		add2 DirNumText_X, depthTread * endNumBelow + DirNumText_Y
		nTextPos = nTextPos + 1

		for iNumStep = startNumAbove_1 to startNumAbove_2 -1
			add2 0,depthTread
			nTextPos = nTextPos + 1

			! Text Rotation - Readable / Align with Symbol
			! ----------------------------------------------------------------------
			if typeTextRotation_Num_m = 2 then								! Readable
				if (totalRotate > (gs_readable_angle + eps) & totalRotate < (gs_readable_angle + 180 + eps)) then
					rot2 180
					strWidth = STW(str("%.0", iNumStep + nStartNumbering)) / 1000 * GLOB_SCALE
					add2 -strWidth, -strHeight
					nTextTransformations = 2
				endif
			endif
			! ----------------------------------------------------------------------
			text2 0, 0, iNumStep + nStartNumbering
			if nTextTransformations > 0 then del nTextTransformations

		next iNumStep
		del nTextPos

		nTextPos = 0
		! ----- After Break Line the TreadNum of the second Flight -----
		set style "stepnum2"
		rrrr = REQUEST ("Height_of_style", "stepnum2", strHeight)
		strHeight = strHeight / 1000 * GLOB_SCALE

		add2 (lx+flw)-(rnu-startNumAbove_2)*depthTread-DirNumText_Y,ly+flw-DirNumText_X
		nTextPos = nTextPos + 1

		for iNumStep = startNumAbove_2 to rnu-1
			add2 depthTread,0
			nTextPos = nTextPos + 1

			! Text Rotation - Readable / Align with Symbol
			! ----------------------------------------------------------------------
			if typeTextRotation_Num_m = 2 then								! Readable
				if (totalRotate > (gs_readable_angle + eps) & totalRotate < (gs_readable_angle + 180 + eps)) then
					rot2 180
					strWidth = STW(str("%.0", iNumStep + nStartNumbering)) / 1000 * GLOB_SCALE
					add2 strWidth, strHeight
					nTextTransformations = 2
				endif
			endif
			! ----------------------------------------------------------------------

			text2 0, 0, iNumStep + nStartNumbering
			if nTextTransformations > 0 then del nTextTransformations
		next iNumStep
		del nTextPos

		NumUNID = 7100
		ADD2 lx+flw,ly+flw
		ROT2 -90
		HOTSPOT2 0,				-DirNumText_Y, NumUNID, DirNumText_X, 1+128		:NumUNID=NumUNID+1
		HOTSPOT2 -1,			-DirNumText_Y, NumUNID, DirNumText_X, 3	:NumUNID=NumUNID+1
		HOTSPOT2 DirNumText_X,	-DirNumText_Y, NumUNID, DirNumText_X,2	:NumUNID=NumUNID+1
		DEL 2

		ADD2 lx+flw,ly+flw
		ROT2 90
		HOTSPOT2 -DirNumText_X,	0,				NumUNID, DirNumText_Y, 1+128		:NumUNID=NumUNID+1
		HOTSPOT2 -DirNumText_X, -1,				NumUNID, DirNumText_Y, 3	:NumUNID=NumUNID+1
		HOTSPOT2 -DirNumText_X, DirNumText_Y,	NumUNID, DirNumText_Y,2	:NumUNID=NumUNID+1
		DEL 2
	endif

endif

PEN gs_cont_pen

	!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	!!!!!!!!*** ARROWHEAD / WALKING LINE / START END SYMBOL*** !!!!!!!!!
	!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	DRAWINDEX 40
	IF walkl THEN


		!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		!!!!!!!!!!!!!!!!!!!!!!!!!!! *** ARROWHEAD *** !!!!!!!!!!!!!!!!!!!!!!!!

		!!! *** Arrow Size
		IF td> 0.26 then
		ArrowDist=gs_ArrowHalfWidth
		ELSE
		ArrowDist=gs_ArrowHalfWidth
		ENDIF

		!!! ********** Arrowhead Contour Conditions
		IF arrow_style_m = ARROW_STYLE_1 OR arrow_style_m = ARROW_STYLE_2 OR arrow_style_m = ARROW_STYLE_3 THEN
			temp_ArrowMask=0
		else
			temp_ArrowMask=1
		endif

		!!! ********** Arrowhead Contour Points Conditions
		IF arrow_style_m = ARROW_STYLE_1 OR arrow_style_m = ARROW_STYLE_4 OR arrow_style_m = ARROW_STYLE_7 THEN
			temp_1XContour=0
			temp_2XContour=flw
			temp_1YContourBreak=0
			temp_2YContourBreak=0
		endif

		IF arrow_style_m = ARROW_STYLE_2 OR arrow_style_m = ARROW_STYLE_5 OR arrow_style_m = ARROW_STYLE_8 THEN
			temp_1XContour=flw/4
			temp_2XContour=flw*3/4
			temp_1YContourBreak=0
			temp_2YContourBreak=0
		endif

		IF arrow_style_m = ARROW_STYLE_3 OR arrow_style_m = ARROW_STYLE_6 OR arrow_style_m = ARROW_STYLE_9 THEN
			temp_1XContour=flw/2-ArrowDist
			temp_2XContour=flw/2+ArrowDist
			temp_1YContourBreak=(numSteptoBreakRight*depthTreadOut+(numSteptoBreakLeft*depthTreadIn-numSteptoBreakRight*depthTreadOut)/2-numSteptoBreakRight*depthTreadOut)-gs_ArrowHeight
			temp_2YContourBreak=(numSteptoBreakRight*depthTreadOut+(numSteptoBreakLeft*depthTreadIn-numSteptoBreakRight*depthTreadOut)/2-numSteptoBreakRight*depthTreadOut)-gs_ArrowHeight
		endif

		!!! ********** Arrowhead Fill Contour Points Conditions
		IF arrow_style_m = ARROW_STYLE_4 OR arrow_style_m = ARROW_STYLE_5 OR arrow_style_m = ARROW_STYLE_6 THEN
			temp_1XFill=temp_1XContour
		endif

		IF arrow_style_m = ARROW_STYLE_7 OR arrow_style_m = ARROW_STYLE_8 OR arrow_style_m = ARROW_STYLE_9 THEN
			temp_1XFill=flw/2
		endif

		!!! ********** Walking Line Length Conditions
		temp_wLineLength = 0
		temp_wLineLengthAbove = 0
		IF arrow_style_m = ARROW_STYLE_4 OR arrow_style_m = ARROW_STYLE_5 THEN temp_wLineLength=numSteptoBreakRight*depthTreadOut+(numSteptoBreakLeft*depthTreadIn-numSteptoBreakRight*depthTreadOut)/2-numSteptoBreakRight*depthTreadOut
		IF arrow_style_m = ARROW_STYLE_4 OR arrow_style_m = ARROW_STYLE_5 THEN temp_wLineLengthAbove=numSteptoBreakRight*depthTreadOut+(numSteptoBreakLeft*depthTreadIn-numSteptoBreakRight*depthTreadOut)/2-numSteptoBreakRight*depthTreadOut
		IF arrow_style_m = ARROW_STYLE_6 THEN temp_wLineLength=gs_ArrowHeight
		IF arrow_style_m = ARROW_STYLE_6 THEN temp_wLineLengthAbove=gs_ArrowHeight


		PEN gs_wLinePen
		Fill gs_ArrowFill


		!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		IF not(drawPart[3]) THEN				!!! with Break Line !!!
		!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

				!!! ********** Geometry of ArrowHead Contour at Break Line

				IF drawPart[1] THEN
					if aboveStory then
						LINE_TYPE gs_wLineTypeStUp
					else
						if drawDashed[1] then
							LINE_TYPE gs_wLineTypeAbove
						else
							LINE_TYPE gs_wLineType1
						endif
					endif

					ADD2 0,numSteptoBreakRight*depthTreadOut
					POLY2_b 4, 1, gs_ArrowFillPen, gs_fill_pen,
						temp_1XContour,temp_1YContourBreak, temp_ArrowMask,
						temp_2XContour,temp_2YContourBreak, 1,
						flw/2,(numSteptoBreakRight*depthTreadOut+(numSteptoBreakLeft*depthTreadIn-numSteptoBreakRight*depthTreadOut)/2-numSteptoBreakRight*depthTreadOut), 1,
						temp_1XContour,temp_1YContourBreak, -1

					IF gs_ArrowFillPen<>0 THEN
						IF arrow_style_m <> ARROW_STYLE_1 AND arrow_style_m <> ARROW_STYLE_2 AND arrow_style_m <> ARROW_STYLE_3 THEN
							!!! Geometry of ArrowHead Fill
							POLY2_b 4, 2, gs_ArrowFillPen, gs_fill_pen,
								temp_1XFill,temp_1YContourBreak, temp_ArrowMask,
								temp_2XContour,temp_2YContourBreak, 1,
								flw/2,(numSteptoBreakRight*depthTreadOut+(numSteptoBreakLeft*depthTreadIn-numSteptoBreakRight*depthTreadOut)/2-numSteptoBreakRight*depthTreadOut), 1,
								temp_1XFill,temp_1YContourBreak, -1
						ENDIF
					ENDIF
					DEL 1
				ENDIF


				IF drawPart[2] THEN		!!IF No Contour above Break Line
					if aboveStory then
						LINE_TYPE gs_wLineTypeStUp
					else
						if drawDashed[2] then
							LINE_TYPE gs_wLineTypeAbove
						else
							LINE_TYPE gs_wLineType1
						endif
					endif
					!!! ********* Geometry of ArrowHead Contour
					ADD2 lx+flw-depthTreadOut+((depthTreadOut-depthTreadIn)/2),ly+flw/2
					ADD2 -(numSteptoBreakRight*depthTreadOut+(numSteptoBreakLeft*depthTreadIn-numSteptoBreakRight*depthTreadOut)/2-numSteptoBreakRight*depthTreadOut),0
					ROT2 -90
					ADD2 -flw/2,0
						POLY2_b 4, 1, gs_ArrowFillPen, gs_fill_pen,
							temp_1XContour,temp_1YContourBreak, temp_ArrowMask,
							temp_2XContour,temp_2YContourBreak, 1,
							flw/2,(numSteptoBreakRight*depthTreadOut+(numSteptoBreakLeft*depthTreadIn-numSteptoBreakRight*depthTreadOut)/2-numSteptoBreakRight*depthTreadOut), 1,
							temp_1XContour,temp_1YContourBreak, -1

						IF gs_ArrowFillPenAbove<>0 THEN
							IF arrow_style_m <> ARROW_STYLE_1 AND arrow_style_m <> ARROW_STYLE_2 AND arrow_style_m <> ARROW_STYLE_3 THEN
								!!! Geometry of ArrowHead Fill
								POLY2_b 4, 2, gs_ArrowFillPenAbove, gs_fill_pen,
									temp_1XFill,temp_1YContourBreak, temp_ArrowMask,
									temp_2XContour,temp_2YContourBreak, 1,
									flw/2,(numSteptoBreakRight*depthTreadOut+(numSteptoBreakLeft*depthTreadIn-numSteptoBreakRight*depthTreadOut)/2-numSteptoBreakRight*depthTreadOut), 1,
									temp_1XFill,temp_1YContourBreak, -1
							ENDIF
						ENDIF
					DEL 4
				ENDIF


		!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		ELSE			!!! NO BREAK LINE !!!
		!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


					if aboveStory then
						LINE_TYPE gs_wLineTypeStUp
					else
						if drawDashed[3] then
							LINE_TYPE gs_wLineTypeAbove
						else
							LINE_TYPE gs_wLineType1
						endif
					endif
					!!! ********* Geometry of ArrowHead Contour
					ADD2 lx+flw-depthTreadOut+((depthTreadOut-depthTreadIn)/2),ly+flw/2
					ADD2 -(numSteptoBreakRight*depthTreadOut+(numSteptoBreakLeft*depthTreadIn-numSteptoBreakRight*depthTreadOut)/2-numSteptoBreakRight*depthTreadOut),0
					ROT2 -90
					ADD2 -flw/2,0
						POLY2_b 4, 1, gs_ArrowFillPen, gs_fill_pen,
							temp_1XContour,temp_1YContourBreak, temp_ArrowMask,
							temp_2XContour,temp_2YContourBreak, 1,
							flw/2,(numSteptoBreakRight*depthTreadOut+(numSteptoBreakLeft*depthTreadIn-numSteptoBreakRight*depthTreadOut)/2-numSteptoBreakRight*depthTreadOut), 1,
							temp_1XContour,temp_1YContourBreak, -1

						IF gs_ArrowFillPenAbove<>0 THEN
							IF arrow_style_m <> ARROW_STYLE_1 AND arrow_style_m <> ARROW_STYLE_2 AND arrow_style_m <> ARROW_STYLE_3 THEN
								!!! Geometry of ArrowHead Fill
								POLY2_b 4, 2, gs_ArrowFillPen, gs_fill_pen,
									temp_1XFill,temp_1YContourBreak, temp_ArrowMask,
									temp_2XContour,temp_2YContourBreak, 1,
									flw/2,(numSteptoBreakRight*depthTreadOut+(numSteptoBreakLeft*depthTreadIn-numSteptoBreakRight*depthTreadOut)/2-numSteptoBreakRight*depthTreadOut), 1,
									temp_1XFill,temp_1YContourBreak, -1

							ENDIF
						ENDIF
					DEL 4

		ENDIF

		!!!!!!!!!!!!!!!!!!!!!! *** ARROWHEAD HOTSPOTS*** !!!!!!!!!!!!!!!!!!!!!!

		IF drawPart[1] THEN

			!!! ********** Hotspot editing of Height and Width of Arrowhead
			IF arrow_style_m = ARROW_STYLE_3 OR arrow_style_m = ARROW_STYLE_6 OR arrow_style_m = ARROW_STYLE_9 THEN

				ArrowUNID=4000
				ADD2 flw/2+ArrowDist,numSteptoBreakRight*depthTreadOut+(numSteptoBreakLeft*depthTreadIn-numSteptoBreakRight*depthTreadOut)/2
				ROT2 180
					HOTSPOT2 0,0,	ArrowUNID, gs_ArrowHeight, 1+128 : ArrowUNID=ArrowUNID+1
					HOTSPOT2 0,gs_ArrowHeight, ArrowUNID, gs_ArrowHeight, 2 : ArrowUNID=ArrowUNID+1
					HOTSPOT2 0,-1,	ArrowUNID, gs_ArrowHeight, 3: ArrowUNID=ArrowUNID+1
				DEL 2

				ADD2 flw/2-ArrowDist,numSteptoBreakRight*depthTreadOut+(numSteptoBreakLeft*depthTreadIn-numSteptoBreakRight*depthTreadOut)/2
				ROT2 180
					HOTSPOT2 0,0,	ArrowUNID, gs_ArrowHeight, 1+128 : ArrowUNID=ArrowUNID+1
					HOTSPOT2 0,gs_ArrowHeight, ArrowUNID, gs_ArrowHeight, 2 : ArrowUNID=ArrowUNID+1
					HOTSPOT2 0,-1,	ArrowUNID, gs_ArrowHeight, 3: ArrowUNID=ArrowUNID+1
				DEL 2

				ADD2 flw/2,numSteptoBreakRight*depthTreadOut+(numSteptoBreakLeft*depthTreadIn-numSteptoBreakRight*depthTreadOut)/2-gs_ArrowHeight
					HOTSPOT2 0,0,	ArrowUNID, gs_ArrowHalfWidth, 1+128 : ArrowUNID=ArrowUNID+1
					HOTSPOT2 gs_ArrowHalfWidth,0, ArrowUNID, gs_ArrowHalfWidth, 2 : ArrowUNID=ArrowUNID+1
					HOTSPOT2 -1,0,	ArrowUNID, gs_ArrowHalfWidth, 3: ArrowUNID=ArrowUNID+1
				DEL 1

				ADD2 flw/2,numSteptoBreakRight*depthTreadOut+(numSteptoBreakLeft*depthTreadIn-numSteptoBreakRight*depthTreadOut)/2-gs_ArrowHeight
					HOTSPOT2 0,0,	ArrowUNID, gs_ArrowHalfWidth, 1+128 : ArrowUNID=ArrowUNID+1
					HOTSPOT2 -gs_ArrowHalfWidth,0, ArrowUNID, gs_ArrowHalfWidth, 2 : ArrowUNID=ArrowUNID+1
					HOTSPOT2 1,0,	ArrowUNID, gs_ArrowHalfWidth, 3: ArrowUNID=ArrowUNID+1
				DEL 1
			ENDIF
		ENDIF


		IF drawPart[2] THEN

			!!! ********** Hotspot editing of Height and Width of Arrowhead
			IF arrow_style_m = ARROW_STYLE_3 OR arrow_style_m = ARROW_STYLE_6 OR arrow_style_m = ARROW_STYLE_9 THEN

				ArrowUNID=4100
				ADD2 flw+lx-depthTreadOut+((depthTreadOut-depthTreadIn)/2), ly+abs(flw/2)
				ROT2 90
					HOTSPOT2 ArrowDist,0,	ArrowUNID, gs_ArrowHeight, 1+128 : ArrowUNID=ArrowUNID+1
					HOTSPOT2 ArrowDist,gs_ArrowHeight, ArrowUNID, gs_ArrowHeight, 2 : ArrowUNID=ArrowUNID+1
					HOTSPOT2 ArrowDist,-1,	ArrowUNID, gs_ArrowHeight, 3: ArrowUNID=ArrowUNID+1
				DEL 2

				ADD2 flw+lx-depthTreadOut+((depthTreadOut-depthTreadIn)/2), ly+abs(flw/2)
				ROT2 90
					HOTSPOT2 -ArrowDist,0,	ArrowUNID, gs_ArrowHeight, 1+128 : ArrowUNID=ArrowUNID+1
					HOTSPOT2 -ArrowDist,gs_ArrowHeight, ArrowUNID, gs_ArrowHeight, 2 : ArrowUNID=ArrowUNID+1
					HOTSPOT2 -ArrowDist,-1,	ArrowUNID, gs_ArrowHeight, 3: ArrowUNID=ArrowUNID+1
				DEL 2

				ADD2 flw+lx-depthTreadOut+((depthTreadOut-depthTreadIn)/2)-gs_ArrowHeight, ly+abs(flw/2)
				ROT2 90
					HOTSPOT2 0,0,	ArrowUNID, gs_ArrowHalfWidth, 1+128 : ArrowUNID=ArrowUNID+1
					HOTSPOT2 gs_ArrowHalfWidth,0, ArrowUNID, gs_ArrowHalfWidth, 2 : ArrowUNID=ArrowUNID+1
					HOTSPOT2 -1,0,	ArrowUNID, gs_ArrowHalfWidth, 3: ArrowUNID=ArrowUNID+1
				DEL 2

				ADD2 flw+lx-depthTreadOut+((depthTreadOut-depthTreadIn)/2)-gs_ArrowHeight, ly+abs(flw/2)
				ROT2 90
					HOTSPOT2 0,0,	ArrowUNID, gs_ArrowHalfWidth, 1+128 : ArrowUNID=ArrowUNID+1
					HOTSPOT2 -gs_ArrowHalfWidth,0, ArrowUNID, gs_ArrowHalfWidth, 2 : ArrowUNID=ArrowUNID+1
					HOTSPOT2 01,0,	ArrowUNID, gs_ArrowHalfWidth, 3: ArrowUNID=ArrowUNID+1
				DEL 2

			ENDIF
		ENDIF

	PEN gs_cont_pen
	FILL gs_fill_type


		PEN gs_wLinePen

		!!!!!!!!!!!!!!!!!!!!!! ***	WALKING LINE *** !!!!!!!!!!!!!!!!!!!!!!!!!!

		IF drawPart[3] THEN
			if aboveStory then
				LINE_TYPE gs_wLineTypeStUp
			else
				if drawDashed[3] then
					LINE_TYPE gs_wLineTypeAbove
				else
					LINE_TYPE gs_wLineType1
				endif
			endif

			LINE2 flw/2,0, flw/2,ly
			HOTSPOT2 flw/2,0

			IF th >=0 THEN
				ARC2 flw,ly, abs(flw/2), 90, 180
			ELSE
				ARC2 flw,ly, abs(flw/2), 0, 90
			ENDIF
			LINE2 flw, ly+abs(flw/2),  flw+lx-depthTreadOut+((depthTreadOut-depthTreadIn)/2)-temp_wLineLengthAbove, ly+abs(flw/2)
			HOTSPOT2 flw+lx-depthTreadOut+((depthTreadOut-depthTreadIn)/2), ly+abs(flw/2)
		ELSE

			IF drawPart[1] THEN

				if aboveStory then
					LINE_TYPE gs_wLineTypeStUp
				else
					if drawDashed[1] then
						LINE_TYPE gs_wLineTypeAbove
					else
						LINE_TYPE gs_wLineType1
					endif
				endif
				LINE2 flw/2,0, flw/2,numSteptoBreakRight*depthTreadOut+(numSteptoBreakLeft*depthTreadIn-numSteptoBreakRight*depthTreadOut)/2-temp_wLineLength
				HOTSPOT2 flw/2,0
				HOTSPOT2 flw/2,numSteptoBreakRight*depthTreadOut+(numSteptoBreakLeft*depthTreadIn-numSteptoBreakRight*depthTreadOut)/2
			ENDIF

			IF drawPart[2] THEN
				if aboveStory then
					LINE_TYPE gs_wLineTypeStUp
				else
					if drawDashed[2] then
						LINE_TYPE gs_wLineTypeAbove
					else
						LINE_TYPE gs_wLineType1
					endif
				endif
				LINE2 flw/2,numSteptoBreakRight*depthTreadOut+(numSteptoBreakLeft*depthTreadIn-numSteptoBreakRight*depthTreadOut)/2+brkLineY, flw/2,ly
				IF th >=0 THEN
					ARC2 flw,ly, abs(flw/2), 90, 180
				ELSE
					ARC2 flw,ly, abs(flw/2), 0, 90
				ENDIF
				LINE2 flw, ly+abs(flw/2),  flw+lx-depthTreadOut+((depthTreadOut-depthTreadIn)/2)-temp_wLineLengthAbove, ly+abs(flw/2)
				HOTSPOT2 flw+lx-depthTreadOut+((depthTreadOut-depthTreadIn)/2), ly+abs(flw/2)
			ENDIF

		ENDIF

		!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		!!!!!!!!!!!!!!!!!!!!!!!!!! *** START END SYMBOL *** !!!!!!!!!!!!!!!!!!

				Fill gs_StartEndFill

					IF gs_StartEndFillPen<>0 THEN temp_FillStatus=2
					IF gs_StartEndFillPen=0 THEN temp_FillStatus=0

					IF drawPart[1] | drawPart[3] THEN
						if aboveStory then
							LINE_TYPE gs_wLineTypeStUp
						else
							if drawDashed[1] | drawDashed[3] then
								LINE_TYPE gs_wLineTypeAbove
							else
								LINE_TYPE gs_wLineType1
							endif
						endif
						IF gs_StartEndStyle_m = STARTSYMB_STYLE1 THEN

							POLY2_B 2, 1+temp_FillStatus, gs_StartEndFillPen, gs_fill_pen,
							flw/2,0,901,
							gs_CircleRadius,360,4001

						ENDIF


						IF gs_StartEndStyle_m = STARTSYMB_STYLE2 THEN

							FOR kk=1 TO 2
								POLY2_B 6, 1+temp_FillStatus, gs_StartEndFillPen, gs_fill_pen,
									flw/2,0,1,
									flw/2+gs_CircleRadius,0,1,
									flw/2,0,901,
									0,90,4001,
									flw/2,0+gs_CircleRadius,0,
									flw/2,0,-1

								POLY2_B 6, 1, gs_StartEndFillPen, gs_fill_pen,
									flw/2,0,1,
									flw/2,0+gs_CircleRadius,1,
									flw/2,0,901,
									0,90,4001,
									flw/2-gs_CircleRadius,0,0,
									flw/2,0,-1
							ROT2 180
							ADD2 -flw,2*(0)
							NEXT kk
							DEL 4

						ENDIF

						IF gs_StartEndStyle_m = STARTSYMB_STYLE3 THEN
							LINE2 flw/2+gs_StartWidth,0-gs_StartHeight,flw/2+gs_StartWidth,0+gs_StartHeight
							LINE2 flw/2-gs_StartWidth,0-gs_StartHeight,flw/2-gs_StartWidth,0+gs_StartHeight
						ENDIF


						!!! ********* Hotspots of StartEnd Symbol
						IF gs_StartEndStyle_m = STARTSYMB_STYLE1 OR gs_StartEndStyle_m = STARTSYMB_STYLE2 THEN
							StartSymbUNID=3000
							ADD2 flw/2,0
								FOR kk=1 to 4
									HOTSPOT2 0, 0, StartSymbUNID, gs_CircleRadius, 1+128		:StartSymbUNID=StartSymbUNID+1
									HOTSPOT2 -1, 0, StartSymbUNID, gs_CircleRadius, 3+128	:StartSymbUNID=StartSymbUNID+1
									HOTSPOT2 gs_CircleRadius, 0, StartSymbUNID, gs_CircleRadius,2	:StartSymbUNID=StartSymbUNID+1

									ROT2 90
								NEXT KK
								DEL 4
							DEL 1
						ENDIF

						IF gs_StartEndStyle_m = STARTSYMB_STYLE3 THEN
							StartSymbUNID=3100
							ADD2 flw/2,0
								FOR kk=1 to 2
									ADD2 0, 0
										!!! Symbol Width/2
										HOTSPOT2 0, -gs_StartHeight, StartSymbUNID, gs_StartWidth, 1+128		:StartSymbUNID=StartSymbUNID+1
										HOTSPOT2 -1, -gs_StartHeight, StartSymbUNID, gs_StartWidth, 3	:StartSymbUNID=StartSymbUNID+1
										HOTSPOT2 gs_StartWidth, -gs_StartHeight, StartSymbUNID, gs_StartWidth,2	:StartSymbUNID=StartSymbUNID+1

										HOTSPOT2 0, gs_StartHeight, StartSymbUNID, gs_StartWidth, 1+128		:StartSymbUNID=StartSymbUNID+1
										HOTSPOT2 -1, gs_StartHeight, StartSymbUNID, gs_StartWidth, 3	:StartSymbUNID=StartSymbUNID+1
										HOTSPOT2 gs_StartWidth, gs_StartHeight, StartSymbUNID, gs_StartWidth,2	:StartSymbUNID=StartSymbUNID+1
									DEL 1

									ADD2 0, 0
										!!! Symbol Height
										HOTSPOT2 gs_StartWidth, 0, StartSymbUNID, gs_StartHeight, 1+128		:StartSymbUNID=StartSymbUNID+1
										HOTSPOT2 gs_StartWidth, -1, StartSymbUNID, gs_StartHeight, 3	:StartSymbUNID=StartSymbUNID+1
										HOTSPOT2 gs_StartWidth, gs_StartHeight, StartSymbUNID, gs_StartHeight,2	:StartSymbUNID=StartSymbUNID+1

										HOTSPOT2 gs_StartWidth, 0, StartSymbUNID, gs_StartHeight, 1+128		:StartSymbUNID=StartSymbUNID+1
										HOTSPOT2 gs_StartWidth, 1, StartSymbUNID, gs_StartHeight, 3	:StartSymbUNID=StartSymbUNID+1
										HOTSPOT2 gs_StartWidth, -gs_StartHeight, StartSymbUNID, gs_StartHeight,2	:StartSymbUNID=StartSymbUNID+1
									DEL 1

								MUL2 -1,1
								NEXT kk
								DEL 2
							DEL 1
						ENDIF
					ENDIF

	ENDIF	!!! 	End of walkl=1

	nx=0
	ny=0
	kx=flw
	ky=0
	vernyul=0



	!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	!!!!!!!!!!!!!!!!!!!!!!!!!! *** T R E A D S *** !!!!!!!!!!!!!!!!!!!!!!!


	PEN gs_cont_pen
	FILL gs_fill_type

	DRAWINDEX 10
	IF drawPart[3] & drawSteps[3] THEN

		FOR i=1 to rnu

			IF depthTreadIn*i < ly THEN
				kyp=ky
				kxp=kx
				ky=depthTreadIn*i
				kx=flw
			ELSE
				kyp=ky
				kxp=kx
				ky=ly
				kx=flw+(depthTreadIn*i-ly)*th/abs(th)
			ENDIF
			IF depthTreadOut*i < ly+abs(flw) THEN
				nyp=ny
				nxp=nx
				ny=i*depthTreadOut
			ELSE
				nyp=ny
				nxp=nx
				ny=ly+abs(flw)
				nx=(i*depthTreadOut-ny)*th/abs(th)
			ENDIF

			!!!!!!!!!!!!!!!!!!!!!! ***	N O S I N G *** !!!!!!!!!!!!!!!!!!!!!!!!!!


			aa=sqr((ny-ky)*(ny-ky)+(nx-kx)*(nx-kx))
			IF ABS(ny-ky)<EPS THEN
				dx=covthicky+ns
			ELSE
				dx=(covthicky+ns)*aa/abs(ny-ky)
			ENDIF
			IF nx-kx=0 THEN
				dy=ns+covthicky
			ELSE
				dy=(covthicky+ns)*aa/abs(nx-kx)
			ENDIF

			IF (i-1)*depthTreadIn <= ly THEN
				kyp=kyp-dy
			ELSE
				kxp=kxp-dx
			ENDIF
			IF (i-1)*depthTreadOut <= ly+abs(flw) THEN
				nyp=nyp-dy
			ELSE
				nxp=nxp-dx
			ENDIF

			!!! *** T R E A D S

				if drawDetails[3] then

					PEN gs_DashLinePen
					LINE_TYPE dash_line

					IF i < rnu THEN LINE2 kx,ky, nx,ny
					IF _iSymbolType = 13 OR _iSymbolType = 14 THEN
						IF i > 1  THEN HOTLINE2 kx,ky, nx,ny
					ENDIF
				ENDIF


			!!! *** N O S I N G


				if aboveStory then
					PEN gs_LinePenStUp
					LINE_TYPE gs_LineTypeStUp
				else
					if drawDashed[3] then
						PEN gs_DashLinePen
						LINE_TYPE dash_line
					else
						PEN gs_cont_pen
						LINE_TYPE solid_line
					endif
				endif

				IF i > 1  THEN LINE2 kxp,kyp, nxp,nyp
				IF _iSymbolType = 6 OR _iSymbolType = 7 THEN
					IF i > 1  THEN HOTLINE2 kxp,kyp, nxp,nyp
				ENDIF


		NEXT i
	ENDIF




	IF not(drawPart[3]) THEN

		!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		!!!!!!!!!! *** T R E A D S__BELOW __B R E A K L I N E *** !!!!!!!!!!!!

		IF drawPart[1] & drawSteps[1] THEN

			FOR i=1 to numSteptoBreakLeft

			!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
			!!!!!!!!!!!!!!!!!!!!! *** TREADS AND NOSING *** !!!!!!!!!!!!!!!!!!!!!!

			IF depthTreadIn*i < ly THEN
				kyp=ky
				kxp=kx
				ky=depthTreadIn*i
				kx=flw
			ELSE
				kyp=ky
				kxp=kx
				ky=ly
				kx=flw+(depthTreadIn*i-ly)*th/abs(th)
			ENDIF
			IF depthTreadOut*i < ly+abs(flw) THEN
				nyp=ny
				nxp=nx
				ny=i*depthTreadOut
			ELSE
				nyp=ny
				nxp=nx
				ny=ly+abs(flw)
				nx=(i*depthTreadOut-ny)*th/abs(th)
			ENDIF


			aa=sqr((ny-ky)*(ny-ky)+(nx-kx)*(nx-kx))
			IF ABS(ny-ky)<EPS THEN
				dx=covthicky+ns
			ELSE
				dx=(covthicky+ns)*aa/abs(ny-ky)
			ENDIF
			IF nx-kx=0 THEN
				dy=ns+covthicky
			ELSE
				dy=(covthicky+ns)*aa/abs(nx-kx)
			ENDIF

			IF (i-1)*depthTreadIn <= ly THEN
				kyp=kyp-dy
			ELSE
				kxp=kxp-dx
			ENDIF
			IF (i-1)*depthTreadOut <= ly+abs(flw) THEN
				nyp=nyp-dy
			ELSE
				nxp=nxp-dx
			ENDIF


			!!! *** T R E A D S

				!! *** Coordinate of Points
				MM=numSteptoBreakRight		!! Num. of Riser at Break Line

				NN=numSteptoBreakRight+1		!! Num. of Riser
				TreadP1X=((NN-MM)*depthTreadOut*flw)/((MM+3-NN)*depthTreadIn+(NN-MM)*depthTreadOut)
				TreadP1Y=NN*depthTreadOut-(NN*(depthTreadOut-depthTreadIn)/flw)*TreadP1X

				NN=(NN+1)	!! Num. of Riser
				TreadP2X=((NN-MM)*depthTreadOut*flw)/((MM+3-NN)*depthTreadIn+(NN-MM)*depthTreadOut)
				TreadP2Y=NN*depthTreadOut-(NN*(depthTreadOut-depthTreadIn)/flw)*TreadP2X

				TreadPXEND=nx
				TreadPYEND=ny
				IF i=numSteptoBreakRight+1 THEN TreadPXEND=TreadP1X
				IF i=numSteptoBreakRight+1 THEN TreadPYEND=TreadP1Y
				IF i=numSteptoBreakRight+2 THEN TreadPXEND=TreadP2X
				IF i=numSteptoBreakRight+2 THEN TreadPYEND=TreadP2Y
				IF i=numSteptoBreakRight+3 THEN TreadPXEND=flw
				IF i=numSteptoBreakRight+3 THEN TreadPYEND=numSteptoBreakLeft*depthTreadIn

				if drawDetails[1] then

					PEN gs_DashLinePen
					LINE_TYPE dash_line

					LINE2 kx,ky, TreadPXEND,TreadPYEND
					IF _iSymbolType >= 13 AND i > 1 THEN HOTline2 kx,ky, TreadPXEND,TreadPYEND
				ENDIF


			!!! *** N O S I N G

				!! *** Coordinate of Points
				MM=numSteptoBreakRight		!! Num. of Riser at Break Line
				NosingY=(dy)

				NNN=numSteptoBreakRight+1		!! Num. of Riser
				NosingP1X=(((NNN-MM)*depthTreadOut-NosingY)*flw)/((MM+3-NNN)*depthTreadIn+(NNN-MM)*depthTreadOut)
				NosingP1Y=NNN*depthTreadOut-NosingY-NNN*(depthTreadOut-depthTreadIn)/flw*NosingP1X

				NNN=(NNN+1)	!! Num. of Riser
				NosingP2X=(((NNN-MM)*depthTreadOut-NosingY)*flw)/((MM+3-NNN)*depthTreadIn+(NNN-MM)*depthTreadOut)
				NosingP2Y=NNN*depthTreadOut-NosingY-NNN*(depthTreadOut-depthTreadIn)/flw*NosingP2X

				NosingPXEND=nxp
				NosingPYEND=nyp
				IF i=numSteptoBreakRight+2 THEN NosingPXEND=NosingP1X
				IF i=numSteptoBreakRight+2 THEN NosingPYEND=NosingP1Y
				IF i=numSteptoBreakRight+3 THEN NosingPXEND=NosingP2X
				IF i=numSteptoBreakRight+3 THEN NosingPYEND=NosingP2Y

				if aboveStory then
					PEN gs_LinePenStUp
					LINE_TYPE gs_LineTypeStUp
				else
					if drawDashed[1] then
						PEN gs_DashLinePen
						LINE_TYPE dash_line
					else
						PEN gs_cont_pen
						LINE_TYPE solid_line
					endif
				endif

					IF i > 1 THEN line2 kxp,kyp, NosingPXEND,NosingPYEND
					IF _iSymbolType < 13 AND i > 1 THEN HOTline2 kxp,kyp, NosingPXEND,NosingPYEND

			NEXT i

		ENDIF



		!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		!!!!!!!!!! *** T R E A D S__Above __B R E A K L I N E *** !!!!!!!!!!!!

		IF drawPart[2] & drawSteps[2] THEN

			FOR i=numSteptoBreakRight to rnu

			!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
			!!!!!!!!!!!!!!!!!!!!! *** TREADS AND NOSING *** !!!!!!!!!!!!!!!!!!!!!!

				IF depthTreadIn*i < ly THEN
					kyp=ky
					kxp=kx
					ky=depthTreadIn*i
					kx=flw
				ELSE
					kyp=ky
					kxp=kx
					ky=ly
					kx=flw+(depthTreadIn*i-ly)*th/abs(th)
				ENDIF
				IF depthTreadOut*i < ly+abs(flw) THEN
					nyp=ny
					nxp=nx
					ny=i*depthTreadOut
				ELSE
					nyp=ny
					nxp=nx
					ny=ly+abs(flw)
					nx=(i*depthTreadOut-ny)*th/abs(th)
				ENDIF


				aa=sqr((ny-ky)*(ny-ky)+(nx-kx)*(nx-kx))
				IF ABS(ny-ky)<EPS THEN
					dx=covthicky+ns
				ELSE
					dx=(covthicky+ns)*aa/abs(ny-ky)
				ENDIF
				IF nx-kx=0 THEN
					dy=ns+covthicky
				ELSE
					dy=(covthicky+ns)*aa/abs(nx-kx)
				ENDIF

				IF (i-1)*depthTreadIn <= ly THEN
					kyp=kyp-dy
				ELSE
					kxp=kxp-dx
				ENDIF
				IF (i-1)*depthTreadOut <= ly+abs(flw) THEN
					nyp=nyp-dy
				ELSE
					nxp=nxp-dx
				ENDIF


			!!! *** T R E A D S

				!! *** Coordinate of Points
				MM=numSteptoBreakRight		!! Num. of Riser at Break Line

				NN=numSteptoBreakRight+1		!! Num. of Riser
				TreadP3X=((-brkLineY+(NN-MM)*depthTreadOut)*flw)/((MM+3-NN)*depthTreadIn+(NN-MM)*depthTreadOut)
				TreadP3Y=NN*depthTreadOut-NN*(depthTreadOut-depthTreadIn)/flw*TreadP3X

				NN=(NN+1)	!! Num. of Riser
				TreadP4X=((-brkLineY+(NN-MM)*depthTreadOut)*flw)/((MM+3-NN)*depthTreadIn+(NN-MM)*depthTreadOut)
				TreadP4Y=NN*depthTreadOut-(NN*(depthTreadOut-depthTreadIn)/flw)*TreadP4X

				NN=(NN+1)	!! Num. of Riser
				TreadP5X=((-brkLineY+(NN-MM)*depthTreadOut)*flw)/((MM+3-NN)*depthTreadIn+(NN-MM)*depthTreadOut)
				TreadP5Y=NN*depthTreadOut-(NN*(depthTreadOut-depthTreadIn)/flw)*TreadP5X


				TreadPXEND2=kx
				TreadPYEND2=ky
				IF i=numSteptoBreakRight+1 THEN TreadPXEND2=TreadP3X
				IF i=numSteptoBreakRight+1 THEN TreadPYEND2=TreadP3Y
				IF i=numSteptoBreakRight+2 THEN TreadPXEND2=TreadP4X
				IF i=numSteptoBreakRight+2 THEN TreadPYEND2=TreadP4Y
				IF i=numSteptoBreakRight+3 THEN TreadPXEND2=TreadP5X
				IF i=numSteptoBreakRight+3 THEN TreadPYEND2=TreadP5Y

				if drawDetails[2] then 		! IF covery or ABS(ns)>EPS and cover THEN
					PEN gs_DashLinePen
					LINE_TYPE dash_line

					if i > numSteptoBreakRight & i < rnu then
						LINE2 TreadPXEND2,TreadPYEND2, nx,ny
						HOTline2 TreadPXEND2,TreadPYEND2, nx,ny
					ENDIF
				ENDIF


			!!! *** N O S I N G

				!! *** Coordinate of Points
				MM=numSteptoBreakRight		!! Num. of Riser at Break Line
				NosingY=(dy)

				NNN=numSteptoBreakRight+1		!! Num. of Riser
				NosingP3X=((-brkLineY+(NNN-MM)*depthTreadOut-NosingY)*flw)/((MM+3-NNN)*depthTreadIn+(NNN-MM)*depthTreadOut)
				NosingP3Y=NNN*depthTreadOut-NosingY-NNN*(depthTreadOut-depthTreadIn)/flw*NosingP3X

				NNN=(NNN+1)	!! Num. of Riser
				NosingP4X=((-brkLineY+(NNN-MM)*depthTreadOut-NosingY)*flw)/((MM+3-NNN)*depthTreadIn+(NNN-MM)*depthTreadOut)
				NosingP4Y=NNN*depthTreadOut-NosingY-NNN*(depthTreadOut-depthTreadIn)/flw*NosingP4X

				NNN=(NNN+1)	!! Num. of Riser
				NosingP5X=((-brkLineY+(NNN-MM)*depthTreadOut-NosingY)*flw)/((MM+3-NNN)*depthTreadIn+(NNN-MM)*depthTreadOut)
				NosingP5Y=NNN*depthTreadOut-NosingY-NNN*(depthTreadOut-depthTreadIn)/flw*NosingP5X

				NNN=(NNN+1)	!! Num. of Riser
				NosingP6X=((-brkLineY+(NNN-MM)*depthTreadOut-NosingY)*flw)/((MM+3-NNN)*depthTreadIn+(NNN-MM)*depthTreadOut)
				NosingP6Y=NNN*depthTreadOut-NosingY-NNN*(depthTreadOut-depthTreadIn)/flw*NosingP6X

				NosingPXEND2=kxp
				NosingPYEND2=kyp
				IF i=numSteptoBreakRight+2 THEN NosingPXEND2=NosingP3X
				IF i=numSteptoBreakRight+2 THEN NosingPYEND2=NosingP3Y
				IF i=numSteptoBreakRight+3 THEN NosingPXEND2=NosingP4X
				IF i=numSteptoBreakRight+3 THEN NosingPYEND2=NosingP4Y
				IF i=numSteptoBreakRight+4 THEN NosingPXEND2=NosingP5X
				IF i=numSteptoBreakRight+4 THEN NosingPYEND2=NosingP5Y
!				IF covery or ABS(ns)>EPS and cover THEN
!					IF i=numSteptoBreakRight+5 THEN NosingPXEND2=NosingP6X
!					IF i=numSteptoBreakRight+5 THEN NosingPYEND2=NosingP6Y
!				ENDIF


					if aboveStory then
						PEN gs_LinePenStUp
						LINE_TYPE gs_LineTypeStUp
					else
						if drawDashed[2] then
							PEN gs_DashLinePen
							LINE_TYPE dash_line
						else
							PEN gs_cont_pen
							LINE_TYPE solid_line
						endif
					endif

					IF i > numSteptoBreakRight+1 THEN  LINE2 NosingPXEND2,NosingPYEND2, nxp,nyp
					IF _iSymbolType < 13 AND i > 4 THEN HOTline2 NosingPXEND2,NosingPYEND2, nxp,nyp


			NEXT i
		ENDIF

	ENDIF

!===============================================================================
! --- Railings ---
!===============================================================================

_bShowRailIn2D = 1
if _bShowRailIn2D then
	angle_breakline = ATN((numSteptoBreakLeft*depthTreadIn-numSteptoBreakRight*depthTreadOut)/flw)

	SlabAlfa=ATN(th/depthTreadIn)
	SlabAlfaOut=ATN(th/depthTreadOut)

	bShowRailPart1	= 0
	bShowRailPart2	= 0
	breakLineW		= brkLineY
	breakLineDist	= 0
	brLineAngle		= 45

	drawindex 30
	fill gs_fill_type

	! --- Left Rail ----------------------------------------------------------------
	if rail_m = 3 | rail_m = 1 then		! Left, Both
		if bSameRails then
			leftRailType_m = rightRailType_m
		endif

		!!! *** Railings Points
		!!! at Start Step
		RailStartLLX=-roffl				!!Left
		RailStartLRX=handRailWidthL-roffl

		IF NOT(bComplexRailLeft) THEN		!!Left
			RailStartLY=0
		ELSE
			RailStartLY=depthTreadOut/2 - (td/2-handRailWidthL/2)
		ENDIF

		!!! at Break Line
		MM=numSteptoBreakRight		!! Num. of Riser at Break Line
		N=numSteptoBreakRight		!! Num. of Riser

		RailBreakLLX=RailStartLLX				!!Left
		RailBreakLLY=N*depthTreadOut+(((N+3)*depthTreadIn-N*depthTreadOut)*RailBreakLLX)/flw
		RailBreakLRX=RailStartLRX
		RailBreakLRY=N*depthTreadOut+(((N+3)*depthTreadIn-N*depthTreadOut)*RailBreakLRX)/flw

		!!! at Corner
		RailCornerLLX=RailStartLLX				!!Left
		RailCornerLLY=ly+flw+roffl
		RailCornerLRX=RailStartLRX
		RailCornerLRY=ly+flw-handRailWidthL+roffl

		!!! at End Step
		IF NOT(bComplexRailLeft) THEN				!!Left
			RailEndLX=flw+lx-depthTreadOut
		ELSE
			RailEndLX=lx+flw-depthTreadOut+td/2+(td/2-handRailWidthL)
		ENDIF

		RailEndLLY=RailCornerLLY				!!Left
		RailEndLRY=RailCornerLRY

		if drawPart[3] then
			if bShowRailOnFloorPlan then
				if aboveStory then
					railPen	= gs_LinePenStUp
					LINE_TYPE railLineType
				else
					if drawDashed[3] then
						LINE_TYPE dash_line
					else
						LINE_TYPE solid_line
					endif
				endif
				pen railPen

				if bSymbolic2D then
					bShowRailOn1stRun		= 1
					bShowRailOn1stLanding1	= 1
					bShowRailOn1stLanding2	= 1
					bShowRailOn2ndRun		= 1
					bBreakRailLine			= 0
					bRailAboveBreakLine		= 0
					gosub "left rail"
				else
					poly2_b 7, 1+2+64, gs_fill_pen, gs_back_pen,
						RailStartLLX,RailStartLY,1,
						RailCornerLLX,RailCornerLLY,1,
						RailEndLX,RailEndLLY,1,
						RailEndLX,RailEndLRY,1,
						RailCornerLRX,RailCornerLRY,1,
						RailStartLRX,RailStartLY,1,
						RailStartLLX,RailStartLY,-1
				endif
			endif

			if bShowRailAxis then
				line_type railAxisLineType
				pen gs_RailAxisPen
				LINE2 RailStartLLX+handRailWidthL/2,RailStartLY,RailStartLLX+handRailWidthL/2,RailCornerLLY-handRailWidthL/2
				LINE2 RailStartLLX+handRailWidthL/2,RailCornerLLY-handRailWidthL/2,RailEndLX,RailCornerLLY-handRailWidthL/2
			endif
		else		! Break Line - Railing
			if drawPart[1] & bShowRailOnFloorPlan then
				if aboveStory then
					railPen	= gs_LinePenStUp
					LINE_TYPE railLineType
				else
					if drawDashed[1] then
						LINE_TYPE dash_line
					else
						LINE_TYPE solid_line
					endif
				endif
				pen railPen

				if bSymbolic2D then
					bShowRailOn1stRun		= 1
					bShowRailOn2ndRun		= 0
					bBreakRailLine			= 1
					brLineAngle				= angle_breakline
					bShowRailPart1			= 1
					breakLineDist			= RailBreakLLY + handRailWidthL * TAN(angle_breakline) + ((td/2-handRailWidthL/2) - depthTreadOut/2) * bComplexRailLeft
					breakLineW				= brkLineY
					bRailAboveBreakLine		= 0
					gosub "left rail"
				else
					poly2_b 5, 1+2+64, gs_fill_pen, gs_back_pen,
						RailStartLLX,RailStartLY,1,
						RailBreakLLX,RailBreakLLY,1,
						RailBreakLRX,RailBreakLRY,1,
						RailStartLRX,RailStartLY,1,
						RailStartLLX,RailStartLY,-1
				endif
			endif

			if drawPart[2] & bShowRailOnFloorPlan and bShowRailAboveBreakLine then
				if aboveStory then
					railPen	= gs_LinePenStUp
					LINE_TYPE railLineType
				else
					if drawDashed[2] then
						LINE_TYPE dash_line
					else
						LINE_TYPE solid_line
					endif
				endif
				pen railPen
				FILL temp_FillTypeAbove

				if bSymbolic2D then
					bShowRailOn1stRun		= 1
					bShowRailOn2ndRun		= 0
					bBreakRailLine			= 1
					brLineAngle				= angle_breakline
					bShowRailPart2			= 1
					breakLineDist			= RailBreakLLY + handRailWidthL * TAN(angle_breakline) + ((td/2-handRailWidthL/2) - depthTreadOut/2) * bComplexRailLeft
					breakLineW				= brkLineY
					bRailAboveBreakLine		= 1
					gosub "left rail"

					bShowRailOn1stRun		= 0
					bShowRailOn2ndRun		= 1
					bBreakRailLine			= 0
					bRailAboveBreakLine		= 1
					gosub "left rail"
				else
					poly2_b 7, 1 + FullFill, gs_fill_pen, temp_BackPen,
						RailStartLLX,RailBreakLLY+brkLineY,1,
						RailCornerLLX,RailCornerLLY,1,
						RailEndLX,RailEndLLY,1,
						RailEndLX,RailEndLRY,1,
						RailCornerLRX,RailCornerLRY,1,
						RailStartLRX,RailBreakLRY+brkLineY,1,
						RailStartLLX,RailBreakLLY+brkLineY,-1
				endif
			endif

			if bShowRailAxis then
				line_type railAxisLineType
				pen gs_RailAxisPen

				if drawPart[1] then
					LINE2 RailStartLLX+handRailWidthL/2,RailStartLY,RailStartLLX+handRailWidthL/2,RailBreakLLY + handRailWidthL / 2 * TAN(angle_breakline)
				endif

				if drawPart[2] and bShowRailAboveBreakLine then
					LINE2 RailStartLLX+handRailWidthL/2,RailBreakLLY+brkLineY + handRailWidthL / 2 * TAN(angle_breakline),RailStartLLX+handRailWidthL/2,RailCornerLLY-handRailWidthL/2
					LINE2 RailStartLLX+handRailWidthL/2,RailCornerLLY-handRailWidthL/2,RailEndLX,RailCornerLLY-handRailWidthL/2
				endif
			endif
		endif

		if bShowRailOnFloorPlan then
			if bSameRails then
				RailUNID=1200
				HOTSPOT2 handRailWidthL/2, 	RailStartLY,	RailUNID, roffr, 1+128: RailUNID=RailUNID+1
				HOTSPOT2 handRailWidthL/2-roffr,RailStartLY,	RailUNID, roffr, 2: RailUNID=RailUNID+1
				HOTSPOT2 handRailWidthL/2+1,	RailStartLY,	RailUNID, roffr, 3: RailUNID=RailUNID+1

				IF gs_2DContourAbove=1 THEN
					HOTSPOT2 RailEndLX, ly+flw-handRailWidthL/2,	RailUNID, roffr, 1+128: RailUNID=RailUNID+1
					HOTSPOT2 RailEndLX,	ly+flw-handRailWidthL/2+roffr,	RailUNID, roffr, 2: RailUNID=RailUNID+1
					HOTSPOT2 RailEndLX,	ly+flw-handRailWidthL/2-1,	RailUNID, roffr, 3: RailUNID=RailUNID+1
				ENDIF
			else
				RailUNID=1100
				HOTSPOT2 handRailWidthL/2, 	RailStartLY,	RailUNID, roffl, 1+128: RailUNID=RailUNID+1
				HOTSPOT2 handRailWidthL/2-roffl,RailStartLY,	RailUNID, roffl, 2: RailUNID=RailUNID+1
				HOTSPOT2 handRailWidthL/2+1,	RailStartLY,	RailUNID, roffl, 3: RailUNID=RailUNID+1

				IF gs_2DContourAbove=1 THEN
					HOTSPOT2 RailEndLX, ly+flw-handRailWidthL/2,	RailUNID, roffl, 1+128: RailUNID=RailUNID+1
					HOTSPOT2 RailEndLX,	ly+flw-handRailWidthL/2+roffl,	RailUNID, roffl, 2: RailUNID=RailUNID+1
					HOTSPOT2 RailEndLX,	ly+flw-handRailWidthL/2-1,	RailUNID, roffl, 3: RailUNID=RailUNID+1
				ENDIF
			endif
		endif
	endif

	! --- Right Rail ---------------------------------------------------------------
	pen gs_cont_pen
	if rail_m = 2 | rail_m = 1 then		! Right, Both
		!!! *** Railings Points
		!!! at Start Step
		RailStartRLX=flw-handRailWidthR+roffr		!! Right
		RailStartRRX=flw+roffr

		RailStartRY=0

		!!! at Break Line
		MM=numSteptoBreakRight		!! Num. of Riser at Break Line
		N=numSteptoBreakRight		!! Num. of Riser

		RailBreakRLX=RailStartRLX		!!Right
		RailBreakRLY=N*depthTreadOut+(((N+3)*depthTreadIn-N*depthTreadOut)*RailBreakRLX)/flw
		RailBreakRRX=RailStartRRX
		RailBreakRRY=N*depthTreadOut+(((N+3)*depthTreadIn-N*depthTreadOut)*RailBreakRRX)/flw

		!!! at Corner
		RailCornerRLX=RailStartRLX				!!Right
		RailCornerRLY=ly+handRailWidthR-roffr
		RailCornerRRX=RailStartRRX
		RailCornerRRY=ly-roffr

		IF NOT(bComplexRailRight) THEN						!!Right
			RailEndRX=flw+lx-depthTreadIn
		ELSE
			RailEndRX=flw+lx-handRailWidthR
		ENDIF

		RailEndRLY=RailCornerRLY
		RailEndRRY=RailCornerRRY

		if drawPart[3] then
			if bShowRailOnFloorPlan then
				if aboveStory then
					railPen	= gs_LinePenStUp
					LINE_TYPE railLineType
				else
					if drawDashed[3] then
						LINE_TYPE dash_line
					else
						LINE_TYPE solid_line
					endif
				endif
				pen railPen

				if bSymbolic2D then
					bShowRailOn1stRun		= 1
					bShowRailOn2ndRun		= 1
					bBreakRailLine			= 0
					bRailAboveBreakLine		= 0
					gosub "right rail"
				else
					poly2_b 7, 1+2+64, gs_fill_pen, gs_back_pen,
						RailStartRLX,RailStartRY,1,
						RailCornerRLX,RailCornerRLY,1,
						RailEndRX,RailEndRLY,1,
						RailEndRX,RailEndRRY,1,
						RailCornerRRX,RailCornerRRY,1,
						RailStartRRX,RailStartRY,1,
						RailStartRLX,RailStartRY,-1
				endif
			endif

			if bShowRailAxis then
				line_type railAxisLineType
				pen gs_RailAxisPen
				LINE2 RailStartRLX+handRailWidthR/2,RailStartRY,RailStartRLX+handRailWidthR/2,RailCornerRLY-handRailWidthR/2
				LINE2 RailStartRLX+handRailWidthR/2,RailCornerRLY-handRailWidthR/2,RailEndRX,RailCornerRLY-handRailWidthR/2
			endif
		else
			if drawPart[1] & bShowRailOnFloorPlan then
				if aboveStory then
					railPen	= gs_LinePenStUp
					LINE_TYPE railLineType
				else
					if drawDashed[1] then
						LINE_TYPE dash_line
					else
						LINE_TYPE solid_line
					endif
				endif
				pen railPen

				if bSymbolic2D then
					bShowRailOn1stRun		= 1
					bShowRailOn2ndRun		= 0
					bBreakRailLine			= 1
					brLineAngle				= angle_breakline
					bShowRailPart1			= 1
					breakLineDist			= RailBreakRLY - depthTreadIn/2 + depthTreadIn/2 + handRailWidthR * TAN(angle_breakline)
					breakLineW				= brkLineY
					bRailAboveBreakLine		= 0
					gosub "right rail"
				else
					poly2_b 5, 1 + FullFill, gs_fill_pen, gs_back_pen,
						RailStartRLX,RailStartRY,1,
						RailBreakRLX,RailBreakRLY,1,
						RailBreakRRX,RailBreakRRY,1,
						RailStartRRX,RailStartRY,1,
						RailStartRLX,RailStartRY,-1
				endif
			endif

			if drawPart[2] & bShowRailOnFloorPlan and bShowRailAboveBreakLine then
				if aboveStory then
					railPen	= gs_LinePenStUp
					LINE_TYPE railLineType
				else
					if drawDashed[2] then
						LINE_TYPE dash_line
					else
						LINE_TYPE solid_line
					endif
				endif
				pen railPen
				FILL temp_FillTypeAbove

				if bSymbolic2D then
					bShowRailOn1stRun		= 1
					bShowRailOn2ndRun		= 0
					bBreakRailLine			= 1
					brLineAngle				= angle_breakline
					bShowRailPart2			= 1
					breakLineDist			= RailBreakRLY - depthTreadIn/2 + depthTreadIn/2 + handRailWidthR * TAN(angle_breakline)
					breakLineW				= brkLineY
					bRailAboveBreakLine		= 1
					gosub "right rail"

					bShowRailOn1stRun		= 0
					bShowRailOn2ndRun		= 1
					bBreakRailLine			= 0
					bRailAboveBreakLine		= 1
					gosub "right rail"
				else
					IF RailBreakRRY+brkLineY<=ly-roffr THEN
						poly2_b 7, 1 + FullFill, gs_fill_pen, temp_BackPen,
							RailStartRLX,RailBreakRLY+brkLineY,1,
							RailCornerRLX,RailCornerRLY,1,
							RailEndRX,RailEndRLY,1,
							RailEndRX,RailEndRRY,1,
							RailCornerRRX,RailCornerRRY,1,
							RailStartRRX,RailBreakRRY+brkLineY,1,
							RailStartRLX,RailBreakRLY+brkLineY,-1
					else
						poly2_b 7, 1 + FullFill, gs_fill_pen, temp_BackPen,
							RailStartRLX,RailStartRY,1,
							RailCornerRLX,RailCornerRLY,1,
							RailEndRX,RailEndRLY,1,
							RailEndRX,RailEndRRY,1,
							RailCornerRRX,RailCornerRRY,1,
							RailStartRRX,RailStartRY,1,
							RailStartRLX,RailStartRY,-1
					endif
				endif
			endif

			if bShowRailAxis then
				line_type railAxisLineType
				pen gs_RailAxisPen

				if drawPart[1] then
					LINE2 RailStartRLX+handRailWidthR/2,RailStartRY,RailStartRLX+handRailWidthR/2,RailBreakRLY + handRailWidthR / 2 * TAN(angle_breakline)
				endif
				if drawPart[2] then
					LINE2 RailStartRLX+handRailWidthR/2,RailBreakRLY+brkLineY + handRailWidthR / 2 * TAN(angle_breakline),RailStartRLX+handRailWidthR/2,RailCornerRLY-handRailWidthR/2
					LINE2 RailStartRLX+handRailWidthR/2,RailCornerRLY-handRailWidthR/2,RailEndRX,RailCornerRLY-handRailWidthR/2
				endif
			endif
		endif

		if bShowRailOnFloorPlan then
			RailUNID=1000
			HOTSPOT2 flw-handRailWidthR/2, 	RailStartRY,	RailUNID, roffr, 1+128: RailUNID=RailUNID+1
			HOTSPOT2 flw-handRailWidthR/2+roffr,RailStartRY,	RailUNID, roffr, 2: RailUNID=RailUNID+1
			HOTSPOT2 flw-handRailWidthR/2-1,	RailStartRY,	RailUNID, roffr, 3: RailUNID=RailUNID+1

			IF gs_2DContourAbove=1 THEN
				HOTSPOT2 RailEndRX, ly+handRailWidthR/2,	RailUNID, roffr, 1+128: RailUNID=RailUNID+1
				HOTSPOT2 RailEndRX,	ly+handRailWidthR/2-roffr,	RailUNID, roffr, 2: RailUNID=RailUNID+1
				HOTSPOT2 RailEndRX,	ly+handRailWidthR/2+1,	RailUNID, roffr, 3: RailUNID=RailUNID+1
			ENDIF
		endif
	endif
endif

END

"left rail":

	PostOffset=0
	PostOffsetHgt=0

	! ---  Rail on 1st Run -----------------------------------------------------
	if bShowRailOn1stRun then
		if bComplexRailLeft then
			ymeredek=(ly+flw+roffl-depthTreadOut)*TAN(SlabAlfaOut)
			ang=ATN(ymeredek/((ly+flw+roffl-depthTreadOut)))
		else
			ymeredek=(ly+flw+roffl)*TAN(SlabAlfaOut)
			ang=ATN(ymeredek/(ly+flw+roffl))
		endif

		ADD2 (flw-roffl+handRailWidthL/2)-flw, 0
		ROT2 90

		lraSimple=ly+flw+roffl
		lraComplex=(ly+flw+roffl-depthTreadOut)
		additionXComplex=depthTreadOut/2
		additionZComplex=0
		hrovL=td/2-handRailWidthL/2
		hrovR=td/2-handRailWidthL/2
		postNumber = npl
		side = SIDE_LEFT
		gosub "callRailsForStair"

		DEL 2
	endif

	! ---  Rail on 2nd Run -----------------------------------------------------
	if bShowRailOn2ndRun then
		add2 -flw, roffl-handRailWidthL/2+ly+flw

		if bComplexRailLeft then
			SimpleBarDiff=hrl-hrhl
			ymeredek=(lx+flw-depthTreadOut+roffl)*TAN(SlabAlfaOut)
			ang=ATN(ymeredek/(lx+flw+roffl-depthTreadOut))

			ADD2 flw-roffl+td/2, 0
			ADD2 -handRailWidthL-td/2, -handRailWidthL/2
		ELSE
			SimpleBarDiff = (hrl-bhl) * (leftRailType_m = 3)
			ymeredek=(lx+flw-depthTreadOut+roffl-handRailWidthL)*TAN(SlabAlfaOut)
			ang=ATN(ymeredek/(lx+flw+roffl-depthTreadOut-handRailWidthL))

			ADD2 flw-roffl+handRailWidthL, 0
			ADD2 -handRailWidthL, -handRailWidthL/2
		ENDIF

		IF hrtl_m = HANDRAIL_RECTANGULAR & not(bComplexRailLeft) & (leftRailType_m <> 3) THEN
			poly2_b 4, 1 + 2 * NOT(bRailAboveBreakLine) + bRailAboveBreakLine * gs_FillAbove + 4+64, gs_fill_pen, gs_back_pen,
				0, 0, 1,
				handRailWidthL, 0, 1,
				handRailWidthL, handRailWidthL, 1,
				0, handRailWidthL, 1
		ENDIF
		DEL 1

		lraSimple=lx+flw+roffl-depthTreadOut-handRailWidthL
		lraComplex=lx+flw+roffl-depthTreadOut
		additionXComplex=0
		additionZComplex=0
		hrovL=td/2-handRailWidthL
		hrovR=td/2-handRailWidthL
		postNumber = npl
		side = SIDE_LEFT
		gosub "callRailsForStair"

		DEL 2
	endif

return


"right rail":

	! ---  Rail on 1st Run -----------------------------------------------------
	if bShowRailOn1stRun then
		if bComplexRailRight then
			ymeredek=(ly-roffr-depthTreadIn)*TAN(SlabAlfa)
			ang=ATN(ymeredek/(ly-roffr-depthTreadIn))
		else
			ymeredek=(ly-roffr)*TAN(SlabAlfa)
			ang=ATN(ymeredek/(ly-roffr))
		endif

		ADD2 (flw+roffr-handRailWidthR/2), 0
		ROT2 90

		lraSimple=ly-roffr
		lraComplex=ly-roffr-depthTreadIn
		additionXComplex=depthTreadIn/2
		additionZComplex=0
		hrovL=depthTreadIn/2
		hrovR=depthTreadIn/2
		postNumber = npr
		side = SIDE_RIGHT
		gosub "callRailsForStair"

		DEL 2
	endif

	! --- Railing on the 2nd run -----------------------------------------------
	if bShowRailOn2ndRun then
		if bComplexRailRight then
			ymeredek=(lx-depthTreadIn-roffr)*TAN(SlabAlfa)
			PostOffset=-depthTreadIn/2
			ang=ATN(ymeredek/(lx-roffr-depthTreadIn))

			ADD2 flw+depthTreadIn, 0
		else
			ymeredek=(lx-depthTreadIn-roffr)*TAN(SlabAlfa)
			PostOffset=0
			ang=ATN(ymeredek/(lx-roffr-depthTreadIn))

			ADD2 flw+handRailWidthR, 0
		endif

		ADD2 0, ly-roffr+handRailWidthR/2
		ADD2 roffr, 0
		ADD2 -handRailWidthR+PostOffset, 0

		!!! Handrails Connection at Corner/Right Side
		SimpleBarDiff = (hrr-bhr) * (rightRailType_m = 3)
		ADD2 -handRailWidthR, -handRailWidthR/2
			IF NOT(bComplexRailRight) AND roffr >= 0 THEN
				IF (rightRailType_m = 3 & btypr_m = BAR_RECTANGULAR) | hrtr_m = HANDRAIL_RECTANGULAR THEN
					poly2_b 4, 1 + 2 * NOT(bRailAboveBreakLine) + bRailAboveBreakLine * gs_FillAbove + 4+64, gs_fill_pen, gs_back_pen,
						0, 0, 1,
						handRailWidthR, 0, 1,
						handRailWidthR, handRailWidthR, 1,
						0, handRailWidthR, 1
				endif
			ENDIF
		DEL 1

		lraSimple=lx-roffr-depthTreadIn
		lraComplex=lx-roffr-depthTreadIn
		additionXComplex=0
		additionZComplex=0
		hrovL=depthTreadIn/2
		hrovR=depthTreadIn/2
		postNumber = npr
		side = SIDE_RIGHT
		gosub "callRailsForStair"

		DEL 4
	endif

return

"callRailsForStair":
! ------------------------------------------------------------------------------
!	lraSimple
!	lraComplex
!	additionXComplex
!	additionZComplex
!	hrovL: rail overhang start
!	hrovR: rail overhang end
!	postNumber:   number of posts
!	side: SIDE_LEFT or SIDE_RIGHT
! ==============================================================================
	ani = ang
	additionXComplex = additionXComplex
	additionZComplex = additionZComplex
	gosub "callRails"
return

! ==============================================================================
"callRails":
! ------------------------------------------------------------------------------
!	ani
!	additionXComplex
!	additionZComplex
!	dsComplex
!  ------------------
!	side: SIDE_LEFT or SIDE_RIGHT
!	lraSimple
!	lraComplex
!	hrovL: rail overhang start
!	hrovR: rail overhang end
!	postNumber:   number of posts
! ==============================================================================
	if side = SIDE_LEFT then
		railBarDepth	= bwl
		railBarDiam		= bdl
		railHeight		= hrl
		railBarThk		= fthl
		handRailWidth	= handRailWidthL
		railDist		= dsl
		railType_m		= leftRailType_m
		railPostDia		= pdl
		railPostWidth	= pwl
		railPostThk		= pthl
		railPostType	= ptl_m
		nBarsRail		= nbl
		bt_m			= btl_m
		railFramesWSide	= fswl
		railFramesWTop	= ftwl
		railFramesWBot	= fbwl
		railBarHeight	= bhl
		railBarFillThk	= bthl
		abdist			= abdistl
		railFrameMat	= fmatl
		railBaluFillMat	= bmatl
		railPostMat		= pmatl
		nbt				= nbtl
		railFillDist	= fdfl
		bComplexRail	= bComplexRailLeft
	else
		railBarDepth	= bwr
		railBarDiam		= bdr
		railHeight		= hrr
		railBarThk		= fthr
		handRailWidth	= handRailWidthR
		railDist		= dsr
		railType_m		= rightRailType_m
		railPostDia		= pdr
		railPostWidth	= pwr
		railPostThk		= pthr
		railPostType	= ptr_m
		nBarsRail		= nbr
		bt_m			= btr_m
		railFramesWSide	= fswr
		railFramesWTop	= ftwr
		railFramesWBot	= fbwr
		railBarHeight	= bhr
		railBarFillThk	= bthr
		abdist			= abdistr
		railFrameMat	= fmatr
		railBaluFillMat	= bmatr
		railPostMat		= pmatr
		nbt				= nbtr
		railFillDist	= fdfr
		bComplexRail	= bComplexRailRight
	endif

	add2 additionXComplex * bComplexRail, 0
	call "railSymbol2D_m" parameters all	cfs					= 1,
											bEnable2DPosts		= bComplexRail,
											ptyp_m				= 1,
											ani					= ani,
											rom_m				= 1,
											rmm_m				= 1,
											LengthSize			= 0,
											lra					= lraSimple * NOT(bComplexRail) + lraComplex * (bComplexRail),
											hr					= railHeight,
											hrPerp				= railHeight,
											ab					= 0,
											rb					= 0,
											ds					= railDist,
											gs_AngleL			= 90,
											gs_AngleR			= 90,
											iHandRailStyle		= 1,
											handRailDiameter	= handRailWidth,
											handRailWidth		= handRailWidth,
											hroL				= hrovL,
											hroR				= hrovR,
											np					= postNumber,
											pd					= railPostDia,
											pw					= railPostWidth,
											pth					= railPostThk,
											gs_cont_pen			= railPen,
											sa					= 0,
											bBreakRailLine		= bBreakRailLine,
											breakLineAngle		= brLineAngle,
											breakLineDist		= breakLineDist,
											breakLineWidth		= brkLineY,
											bRailAboveBreakLine	= bRailAboveBreakLine,
											bShowRailBelowBrL	= bShowRailPart1,
											bShowRailAboveBrL	= bShowRailPart2,
											bPostNoCalculation	= (railType_m = 9),
											pit_m				= 1,
											dp					= abdist,
											nbt					= nbt
	del 1

	bShowRailPart1			= 0
	bShowRailPart2			= 0

return


]]>
</Script_2D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_1D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
EPS = 0.0001

SIDE_LEFT				= 1
SIDE_RIGHT				= 2

dim stRiseRunText[7]
	stRiseRunText[1] = `Кол-во x Подступенок = Высота Марша`
	stRiseRunText[2] = `Кол-во Проступей/Подступенок @`
	stRiseRunText[3] = `Кол-во х Проступь х Подступенок`
	stRiseRunText[4] = `Кол-во х Подступенок х Проступь`
	stRiseRunText[5] = `Кол-во <текст подступенка> Подступенок / Проступь`
	stRiseRunText[6] = `Кол-во <текст подступенка> // Подступенок / Проступь`
	stRiseRunText[7] = `Специальный Текст`

dim stStartSymbolStyles[4]
	stStartSymbolStyles[1] = `Стиль 1`
	stStartSymbolStyles[2] = `Стиль 2`
	stStartSymbolStyles[3] = `Стиль 3`
	stStartSymbolStyles[4] = `Нет`

! gs_StartEndStyle_m
STARTSYMB_STYLE1	= 1
STARTSYMB_STYLE2	= 2
STARTSYMB_STYLE3	= 3
STARTSYMB_NONE		= 4

dim stWalkingDirUPDN[3]
	stWalkingDirUPDN[1] = `Нет`
	stWalkingDirUPDN[2] = `ВВЕРХ`
	stWalkingDirUPDN[3] = `ВНИЗ`

! walkingDirUPDN_m
WALKDIRSTR_NONE			= 1
WALKDIRSTR_UP			= 2
WALKDIRSTR_DOWN			= 3

dim stRailPosition[4]
	stRailPosition[1] = `Оба`
	stRailPosition[2] = `Справа`
	stRailPosition[3] = `Слева`
	stRailPosition[4] = `Нет`

! rail_m
RAILPOS_BOTH	= 1
RAILPOS_RIGHT	= 2
RAILPOS_LEFT	= 3
RAILPOS_NONE	= 4

dim stDetlevel2D[2]
	stDetlevel2D[1] = `Зависит от Масштаба`
	stDetlevel2D[2] = `Специальный`

DET2D_SCALESENSITIVE	= 1
DET2D_CUSTOM			= 2

dim stDetlevel3D[3]
	stDetlevel3D[1] = `Детальный`
	stDetlevel3D[2] = `Простой`
	stDetlevel3D[3] = `Откл.`

! gs_detlevel_3D_m
DET3D_OFF		= 0
DET3D_SIMPLE	= 1
DET3D_DETAILED	= 2

dim stRailTypes[11]
	stRailTypes[ 1] = `Балюстрада Ограждения`
	stRailTypes[ 2] = `Параллельные Прутья`
	stRailTypes[ 3] = `Простой Брусок`
	stRailTypes[ 4] = `Объемная Рама с Панелью`
	stRailTypes[ 5] = `Объемная Рама`
	stRailTypes[ 6] = `Панель Ограждения`
	stRailTypes[ 7] = `Стойки Ограждения с Балясинами`
	stRailTypes[ 8] = `Стойки с Леерами`
	stRailTypes[ 9] = `Деревянная Балюстрада`
	stRailTypes[10] = `Стойки Ограждения с Брусками`
	stRailTypes[11] = `Как и Правое`

! leftRailType_m, rightRailType_m
RAIL_BALUSTRADE				= 1
RAIL_PARALLEL_BARS			= 2
RAIL_SIMPLE_BAR				= 3
RAIL_SOLID_FRAME_FILLED		= 4
RAIL_SOLID_FRAME			= 5
RAIL_SOLID					= 6
RAIL_POST_WITH_BALUSTERS	= 7
RAIL_WIRED					= 8
RAIL_WOODEN_BALUSTRADE		= 9
RAIL_POST_WITH_BARS			= 10
RAIL_SAMERAILS				= 11

dim stPostSymbolType[5]
	stPostSymbolType[1] = `Тип 1`
	stPostSymbolType[2] = `Тип 2`
	stPostSymbolType[3] = `Тип 3`
	stPostSymbolType[4] = `Тип 4`
	stPostSymbolType[5] = `Нет`

dim stHandrailStyle[2]
	stHandrailStyle[1] = `Прямоугольные`
	stHandrailStyle[2] = `Круглые`

! hrtr_m, hrtl_m
HANDRAIL_RECTANGULAR	= 1
HANDRAIL_ROUND			= 2

dim stBarStyle[2]
	stBarStyle[1] = `Прямоугольные`
	stBarStyle[2] = `Круглые`

! btypr_m, btypl_m
BAR_RECTANGULAR	= 1
BAR_ROUND		= 2

dim stPostStyle[2]
	stPostStyle[1] = `Прямоугольные`
	stPostStyle[2] = `Круглые`

! ptr_m, ptl_m
POST_RECTANGULAR	= 1
POST_ROUND			= 2

dim stBoardStyle[2]
	stBoardStyle[1] = `Прямоугольные`
	stBoardStyle[2] = `Круглые`

! btr_m, btl_m
BOARD_RECTANGULAR	= 1
BOARD_ROUND			= 2

dim stArrowStyle[9]
	stArrowStyle[1] = `Стиль 1`
	stArrowStyle[2] = `Стиль 2`
	stArrowStyle[3] = `Стиль 3`
	stArrowStyle[4] = `Стиль 4`
	stArrowStyle[5] = `Стиль 5`
	stArrowStyle[6] = `Стиль 6`
	stArrowStyle[7] = `Стиль 7`
	stArrowStyle[8] = `Стиль 8`
	stArrowStyle[9] = `Стиль 9`

! arrow_style_m
ARROW_STYLE_1 = 1
ARROW_STYLE_2 = 2
ARROW_STYLE_3 = 3
ARROW_STYLE_4 = 4
ARROW_STYLE_5 = 5
ARROW_STYLE_6 = 6
ARROW_STYLE_7 = 7
ARROW_STYLE_8 = 8
ARROW_STYLE_9 = 9

dim stBreakLineStyle[3]
	stBreakLineStyle[1] = `Прямой`
	stBreakLineStyle[2] = `Зигзаг`
	stBreakLineStyle[3] = `Зигзаг CHI`

! breakline_style_m
BREAKLINE_STRAIGHT		= 1
BREAKLINE_ZIGZAG		= 2
BREAKLINE_ZIGZAG_CHI	= 3


! -------------- 2D Symbol variables --------------

! gs_SymbolType_m
SYMBOL_TYPE1	= 1
SYMBOL_TYPE2	= 2
SYMBOL_TYPE3	= 3
SYMBOL_TYPE4	= 4
SYMBOL_TYPE5	= 5
SYMBOL_TYPE6	= 6
SYMBOL_TYPE7	= 7
SYMBOL_TYPE8	= 8
SYMBOL_TYPE9	= 9
SYMBOL_TYPE10	= 10
SYMBOL_TYPE11	= 11
SYMBOL_TYPE12	= 12
SYMBOL_TYPE13	= 13
SYMBOL_TYPE14	= 14
SYMBOL_TYPE15	= 15
SYMBOL_TYPE16	= 16
SYMBOL_TYPE17	= 17
SYMBOL_TYPE18	= 18
SYMBOL_TYPE19	= 19
SYMBOL_TYPE20	= 20

dim stStairSymbolTypes[20]
	stStairSymbolTypes[ 1] = `Тип 1`
	stStairSymbolTypes[ 2] = `Тип 2`
	stStairSymbolTypes[ 3] = `Тип 3`
	stStairSymbolTypes[ 4] = `Тип 4`
	stStairSymbolTypes[ 5] = `Тип 5`
	stStairSymbolTypes[ 6] = `Тип 6`
	stStairSymbolTypes[ 7] = `Тип 7`
	stStairSymbolTypes[ 8] = `Тип 8`
	stStairSymbolTypes[ 9] = `Тип 9`
	stStairSymbolTypes[10] = `Тип 10`
	stStairSymbolTypes[11] = `Тип 11`
	stStairSymbolTypes[12] = `Тип 12`
	stStairSymbolTypes[13] = `Тип 13`
	stStairSymbolTypes[14] = `Тип 14`
	stStairSymbolTypes[15] = `Тип 15`
	stStairSymbolTypes[16] = `Тип 16`
	stStairSymbolTypes[17] = `Тип 17`
	stStairSymbolTypes[18] = `Тип 18`
	stStairSymbolTypes[19] = `Тип 19`
	stStairSymbolTypes[20] = `Тип 20`

! iSymbolGroup
SYMBOLGROUP_TYPE1	= 1
SYMBOLGROUP_TYPE2	= 2
SYMBOLGROUP_TYPE3	= 3
SYMBOLGROUP_TYPE4	= 4
SYMBOLGROUP_TYPE5	= 5
SYMBOLGROUP_TYPE6	= 6
SYMBOLGROUP_TYPE7	= 7
SYMBOLGROUP_TYPE8	= 8

dim stSymbolGroup[8]
	stSymbolGroup[1] = `Тип 1`
	stSymbolGroup[2] = `Тип 2`
	stSymbolGroup[3] = `Тип 3`
	stSymbolGroup[4] = `Тип 4`
	stSymbolGroup[5] = `Тип 5`
	stSymbolGroup[6] = `Тип 6`
	stSymbolGroup[7] = `Тип 7`
	stSymbolGroup[8] = `Тип 8`

dim	iEnabledSymbolTypes[8][3]
	iEnabledSymbolTypes[1][1] = 1
	iEnabledSymbolTypes[1][2] = 6
	iEnabledSymbolTypes[1][3] = 13

	iEnabledSymbolTypes[2][1] = 2
	iEnabledSymbolTypes[2][2] = 7
	iEnabledSymbolTypes[2][3] = 14

	iEnabledSymbolTypes[3][1] = 3
	iEnabledSymbolTypes[3][2] = 8
	iEnabledSymbolTypes[3][3] = 15

	iEnabledSymbolTypes[4][1] = 4
	iEnabledSymbolTypes[4][2] = 9
	iEnabledSymbolTypes[4][3] = 16

	iEnabledSymbolTypes[5][1] = 5
	iEnabledSymbolTypes[5][2] = 10
	iEnabledSymbolTypes[5][3] = 17

	iEnabledSymbolTypes[6][1] = 4
	iEnabledSymbolTypes[6][2] = 11
	iEnabledSymbolTypes[6][3] = 18

	iEnabledSymbolTypes[7][1] = 4
	iEnabledSymbolTypes[7][2] = 11
	iEnabledSymbolTypes[7][3] = 19

	iEnabledSymbolTypes[8][1] = 5
	iEnabledSymbolTypes[8][2] = 12
	iEnabledSymbolTypes[8][3] = 20


! iScaleType
SCALE_10		= 10
SCALE_20		= 20
SCALE_50		= 50
SCALE_100		= 100
SCALE_200		= 200
SCALE_500		= 500

SCALE_1_1		= 1
SCALE_1_4		= 4
SCALE_1_8		= 8
SCALE_1_16		= 16
SCALE_1_24		= 24
SCALE_1_48		= 48
SCALE_1_96		= 96
SCALE_1_192		= 192
SCALE_CUSTOM	= 999

dim	iScaleType[15]
	iScaleType[1]	= SCALE_10
	iScaleType[2]	= SCALE_20
	iScaleType[3]	= SCALE_50
	iScaleType[4]	= SCALE_100
	iScaleType[5]	= SCALE_200
	iScaleType[6]	= SCALE_500
	iScaleType[7]	= SCALE_1_1
	iScaleType[8]	= SCALE_1_4
	iScaleType[9]	= SCALE_1_8
	iScaleType[10]	= SCALE_1_16
	iScaleType[11]	= SCALE_1_24
	iScaleType[12]	= SCALE_1_48
	iScaleType[13]	= SCALE_1_96
	iScaleType[14]	= SCALE_1_192
	iScaleType[15]	= SCALE_CUSTOM

dim stScaleType[15]
	stScaleType[1]	= `1:10`
	stScaleType[2]	= `1:20`
	stScaleType[3]	= `1:50`
	stScaleType[4]	= `1:100`
	stScaleType[5]	= `1:200`
	stScaleType[6]	= `1:500`
	
	stScaleType[7]	= `1'=1'-0"`
	stScaleType[8]	= `3"=1'-0"`
	stScaleType[9]	= `1 1/2"=1'-0"`
	stScaleType[10]	= `3/4"=1'-0"`
	stScaleType[11]	= `1/2"=1'-0"`
	stScaleType[12]	= `1/4"=1'-0"`
	stScaleType[13]	= `1/8"=1'-0"`
	stScaleType[14]	= `1/16"=1'-0"`
	stScaleType[15]	= `Специальный Масштаб`

if iScaleChangeSM = SCALE_CUSTOM then
	_iScaleSM = gs_ScaleChangeSM
else
	_iScaleSM = iScaleChangeSM
endif
if iScaleChangeMD = SCALE_CUSTOM then
	_iScaleMD = gs_ScaleChangeMD
else
	_iScaleMD = iScaleChangeMD
endif

! -------------- End of 2D Symbol variables --------------

parameters jvon=ly+lx+pi*flw/2	!walking line length
LOCK "jvon"
parameters td=jvon/rnu
LOCK "td"
parameters th=zzyzx/rnu

parameters cfs=1

!!! *** T R E A D S *** !!!

depthTreadIn=(abs(lx)+ly)/rnu
depthTreadOut=(ly+abs(flw)+abs(lx)+abs(flw))/rnu

if bSameRails then
	depthTreadOut			= depthTreadIn
	roffl					= roffr
	hrl						= hrr
	dsl						= dsr
	fswl					= fswr
	fthl					= fthr
	ftwl					= ftwr
	fbwl					= fbwr
	bwl						= bwr
	bthl					= bthr
	abdistl					= abdistr
	pmatl					= pmatr
	fmatl					= fmatr
	bmatl					= bmatr
	bhl						= bhr
	nbl						= nbr
	btypl_m					= btypr_m
	bdl						= bdr
	fdfl					= fdfr
	hrtl_m					= hrtr_m
	hrdl					= hrdr
	hrwl					= hrwr
	hrhl					= hrhr
	hrol					= hror
	ptl_m					= ptr_m
	npl						= npr
	pdl						= pdr
	pwl						= pwr
	pthl					= pthr
	btl_m					= btr_m
	nbtl					= nbtr
	sbhl					= sbhr
!!!	gs_PostBaseTypeL_m		= gs_PostBaseTypeR_m
!!!	gs_PostBaseOverhangL	= gs_PostBaseOverhangR
!!!	OverhangLBottom			= OverhangRBottom
!!!	OverhangLTop			= OverhangRTop
!!!	roml					= romr
!!!	roml_m					= romr_m
!!!	rmml_m					= romr_m
endif

bComplexRailRight		= (rightRailType_m > 6)
if bSameRails then
	bComplexRailLeft 	= (rightRailType_m > 6)
else
	bComplexRailLeft 	= (leftRailType_m > 6)
endif

if NOT(bComplexRailLeft) then
	handRailWidthL = fthl
else
	IF hrtl_m = HANDRAIL_ROUND THEN
		handRailWidthL = hrdl
	ELSE
		handRailWidthL = hrwl
	ENDIF
endif
if NOT(bComplexRailRight) then
	handRailWidthR = fthr
else
	IF hrtr_m = HANDRAIL_ROUND THEN
		handRailWidthR = hrdr
	ELSE
		handRailWidthR = hrwr
	ENDIF
endif
]]>
</Script_1D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_PR SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_PR>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_UI SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
ui_dialog `Параметры Лестницы`

bCustom2dDetlevel = (gs_detlevel_2D_m = DET2D_CUSTOM)

dim stStairUI[128]
	for i = 1 to 128
		stStairUI[i] = ""
	next i

	stStairUI[1] = `2D-детализация`
	stStairUI[2] = `Масштаб`
	stStairUI[3] = `Тип Маркера Разрыва`
	stStairUI[4] = `Видимые Конструкции`
	stStairUI[5] = `Штриховка Фона`
	stStairUI[6] = `Перо Линии`
	stStairUI[7] = `Тип Линии`
	stStairUI[8] = `Перо Штриховки`
	stStairUI[9] = `Перо Фона Штриховки`
	stStairUI[10] = `Невидимые Конструкции`
	stStairUI[11] = `Перо Линии Всхода`
	stStairUI[12] = `Тип Линии Всхода`
	stStairUI[13] = `Конец Линии Всхода`
	stStairUI[14] = `Начало Линии Всхода`
	stStairUI[15] = `Перо Штриховки (0 - нет)`
	stStairUI[16] = `Перо Штрих. Выше (0 - нет)`
	stStairUI[17] = `Тип Шрифта`
	stStairUI[18] = `Начать с`
	stStairUI[19] = `Формат`
	stStairUI[20] = `Размер Шрифта`
	stStairUI[21] = `Специальный Текст 1`
	stStairUI[22] = `Перо Текста`
	stStairUI[23] = `Специальный Текст 2`
	stStairUI[24] = `Текст Подъема и Спуска`
	stStairUI[25] = `Текст`
	stStairUI[26] = `Тип Символа Стойки`
	stStairUI[27] = `Тип Линии Стойки`
	stStairUI[28] = `Перо Линии Стойки`
	stStairUI[29] = `Линия Невидимой Тетивы`
	stStairUI[30] = `Перо Невидимой Тетивы`
	stStairUI[31] = `2D выше Собственного Этажа`
	stStairUI[32] = `Лестница`
	stStairUI[33] = `Ограждение`
	stStairUI[34] = `Основание`
	stStairUI[35] = `Панели Ограждения`
	stStairUI[36] = `Проступь`
	stStairUI[37] = `Обвязка`
	stStairUI[38] = `Подступенок`
	stStairUI[39] = `Стойка`
	stStairUI[40] = `Поручень`
	stStairUI[41] = `Штриховка выше Линии Разрыва`
	stStairUI[42] = `Показ Линии Всхода`
	stStairUI[43] = `Стрелка к Линии Разрыва`
	stStairUI[44] = `Показ Нумерации`
	stStairUI[45] = `Текст Подступенков/Проступей`
	stStairUI[46] = `Читаемый Текст`
	stStairUI[47] = `Показ Ограждения на Плане`
	stStairUI[48] = `Показ Осей Ограждения`
	stStairUI[49] = `Показ Тетивы на Плане Этажа`
	stStairUI[50] = `Символ Зависит от Этажа`
	stStairUI[51] = `Линия Разрыва`
	stStairUI[52] = `Показ 2D ниже Линии Разрыва`
	stStairUI[53] = `Показ 2D выше Линии Разрыва`
	stStairUI[54] = `Отбрасывание Теней`
	stStairUI[55] = `Единицы Измерения Рабочей Среды Проекта`
	stStairUI[56] = `Ориентация`
	stStairUI[57] = `Ориентация Текста в Символе`

	stStairUI[80] = `Показ Проступей`
	stStairUI[81] = `Линия Всхода выше Линии Разрыва`

	stStairUI[86] = `Описание`
	stStairUI[87] = `Текст Спуска`
	stStairUI[88] = `Тип Видимой Линии`
	stStairUI[89] = `Тип Невидимой Линии`
	stStairUI[90] = `Размер Символа`
	stStairUI[91] = `Текст Подступенка`
	stStairUI[92] = `мм`
	stStairUI[93] = `п.`

	stStairUI[94] = `Перо Контура`
	stStairUI[95] = `Тип Штриховки`
	stStairUI[96] = `Перо Штриховки`
	stStairUI[97] = `Перо Фона Штриховки`
	stStairUI[98] = `Подступенок`

	stStairUI[99] = `Показ Ограждения выше Линии Разрыва`
	stStairUI[100] = `2D-символ`
	stStairUI[101] = stPostSymbolType[1]
	stStairUI[102] = stPostSymbolType[2]
	stStairUI[103] = stPostSymbolType[3]
	stStairUI[104] = stPostSymbolType[4]
	stStairUI[105] = stPostSymbolType[5]

	stStairUI[106] = stDetlevel2D[1]
	stStairUI[107] = stDetlevel2D[2]

	stStairUI[108] = `Прямой`
	if bSimpleZigZag then
		stStairUI[109] = `Зигзаг CHI`
	else
		stStairUI[109] = `Зигзаг`
	endif

	stStairUI[110] = stWalkingDirUPDN[1]
	stStairUI[111] = stWalkingDirUPDN[2]
	stStairUI[112] = stWalkingDirUPDN[3]

	stStairUI[116] = `Выровнять по Символу`
	stStairUI[117] = `Параллельно Линии Всхода`
	stStairUI[118] = `Читаемый`

	stStairUI[119] = stRiseRunText[1]
	stStairUI[120] = stRiseRunText[2]
	stStairUI[121] = stRiseRunText[3]
	stStairUI[122] = stRiseRunText[4]
	stStairUI[123] = stRiseRunText[5]
	stStairUI[124] = stRiseRunText[6]
	stStairUI[125] = stRiseRunText[7]

	stStairUI[126] = `Ограждение Справа`
	stStairUI[127] = `Ограждение Слева`
	stStairUI[128] = `Показ Тетивы`

dim stRailTypesForUI[11]
	stRailTypesForUI[ 1] = `Балюстрада`
	stRailTypesForUI[ 2] = `Параллельные Прутья`
	stRailTypesForUI[ 3] = `Простой Брусок`
	stRailTypesForUI[ 4] = `Объемная Рама с Панелью`
	stRailTypesForUI[ 5] = `Объемная Рама`
	stRailTypesForUI[ 6] = `Панель`
	stRailTypesForUI[ 7] = `Стойки с Балясинами`
	stRailTypesForUI[ 8] = `Стойки с Прутьями`
	stRailTypesForUI[ 9] = `Деревянная Балюстрада`
	stRailTypesForUI[10] = `Стойки с Брусками`
	stRailTypesForUI[11] = `Как и Правое`

dim stStairUITabNames[15]
	for i = 1 to 15
		stStairUITabNames[i] = ""
	next i

	stStairUITabNames[1] = `Типы 2D-символа`
	stStairUITabNames[2] = `Реквизиты 2D-символа`
	stStairUITabNames[4] = `Подъем и Спуск, Нумерация`
	stStairUITabNames[5] = `Ограждение в Символе`
	stStairUITabNames[8] = `Тип Ограждения - Справа`
	stStairUITabNames[9] = `Тип Ограждения - Слева`
	stStairUITabNames[13] = `Спуск и Подъем`
	stStairUITabNames[15] = `Стили Стрелки и Начальной Точки`

call "ui_stairs" parameters gs_ui_current_page		= gs_ui_current_page,
! --- 2D symbol type ---
			gs_detlevel_2D_m		= gs_detlevel_2D_m,
			gs_ScaleChangeSM		= gs_ScaleChangeSM,
			iScaleChangeSM			= iScaleChangeSM,
			gs_ScaleChangeMD		= gs_ScaleChangeMD,
			iScaleChangeMD			= iScaleChangeMD,
			stScaleType				= stScaleType,
			bCustom2dDetlevel		= bCustom2dDetlevel,
			gs_SymbolType_m			= gs_SymbolType_m,
			iSymbolGroup			= iSymbolGroup,
! --- 2D symbol attributes ---
			bEnableBreakLineStyle	= 1,
			breakline_style			= breakline_style,
			gs_cont_pen				= gs_cont_pen,
			gs_DashLinePen			= gs_DashLinePen,
			solid_line				= solid_line,
			dash_line				= dash_line,
			gs_fill_type			= gs_fill_type,
			gs_fill_pen				= gs_fill_pen,
			gs_back_pen				= gs_back_pen,
			gs_FillAbove			= gs_FillAbove,
! --- Walkline ---
			arrow_style				= arrow_style,
			gs_StartEndStyle		= gs_StartEndStyle,
! --- Text Display ---
			fontType				= fontType,
			bShowNumbering			= bShowNumbering,
			bShowRiseAndRunText		= bShowRiseAndRunText,
			nStartNumbering			= nStartNumbering,
			gs_NumTextSize			= gs_NumTextSize,
			gs_text_size_pt_num 	= gs_text_size_pt_num,
			gs_NumTextPen			= gs_NumTextPen,
			gs_RiseRunText			= gs_RiseRunText,
			iRiseRunText			= iRiseRunText,
			gs_CustomText1			= gs_CustomText1,
			gs_CustomText2			= gs_CustomText2,
			gs_customText_rise		= gs_customText_rise,
			fontsize				= fontsize,
			gs_text_size_pt			= gs_text_size_pt,
			gs_text_pen				= gs_text_pen,
			walkingDirUPDN			= walkingDirUPDN,
			bEnableCustomDownText	= 0,
			UPDNfontsize			= UPDNfontsize,
			gs_text_size_pt_UpDn	= gs_text_size_pt_UpDn,
			UPDNfontpen				= UPDNfontpen,
			typeTextRotation_RiseRun 	= typeTextRotation_RiseRun,
			typeTextRotation_Num 		= typeTextRotation_Num,
			typeTextRotation_UpDn 		= typeTextRotation_UpDn,
			bEnableDescription		= 0,
! --- Rail & Carriage 2D ---
			bShowRailOnFloorPlan	= bShowRailOnFloorPlan,
			railLineType			= railLineType,
			railPen					= railPen,
			bShowRailAxis			= bShowRailAxis,
			railAxisLineType		= railAxisLineType,
			gs_RailAxisPen			= gs_RailAxisPen,
			bSymbolic2D				= bSymbolic2D,
			postSymbolType			= postSymbolType,
			iPostSymbolType			= iPostSymbolType,
			postLineType			= postLineType,
			postPen					= postPen,
			bEnableCarriageLine		= 0,
! --- Rail Types ---
			bRightRail				= bRightRail,
			bLeftRail				= bLeftRail,
			leftRailType			= leftRailType,
			rightRailType			= rightRailType,
			leftRailType_m			= leftRailType_m,
			rightRailType_m			= rightRailType_m,
! --- String resources ---
			stStairUITabNames		= stStairUITabNames,
			stStairSymbolTypes		= stStairSymbolTypes,
			stSymbolGroup			= stSymbolGroup,
			stRailTypesForUI		= stRailTypesForUI,
			stRailTypes				= stRailTypes,
			stStairUI				= stStairUI,
			bEnableWired02Rail		= 0,
! --- Stair Type ---
			iStairType				= 6		! L-Shape RC

end

]]>
</Script_UI>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_VL SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
call "FM_types" parameters all
call "ui_stairs" parameters gs_ui_current_page	= gs_ui_current_page

! ---------- Length Unit ----------
w_units_form = ""
rrr					= request("Linear_dimension", "", w_units_form)
bLinearDimIsMetric	= (strstr(w_units_form, "m") > 0)


! ---------- 3D detail level ----------
values{2} "gs_detlevel_3D_m" 	DET3D_DETAILED,		stDetlevel3D[1],
								DET3D_SIMPLE,		stDetlevel3D[2],
								DET3D_OFF,			stDetlevel3D[3]

if gs_detlevel_3D_m = DET3D_SIMPLE then
	lock "gs_resol"
	hideparameter "gs_resol"
endif

if gs_detlevel_3D_m = DET3D_OFF then
	lock "gs_resol", "gs_shadow"
	hideparameter "gs_resol", "gs_shadow"
endif


!! ---------- 2D detail level ----------
values{2} "gs_detlevel_2D_m"	DET2D_SCALESENSITIVE,	stDetlevel2D[1],
								DET2D_CUSTOM,			stDetlevel2D[2]

!! ---------- Symbol Type ----------
if gs_detlevel_2D_m = DET2D_SCALESENSITIVE then
	values{2} "iSymbolGroup"	SYMBOLGROUP_TYPE1,	stSymbolGroup[1],
								SYMBOLGROUP_TYPE2,	stSymbolGroup[2],
								SYMBOLGROUP_TYPE3,	stSymbolGroup[3],
								SYMBOLGROUP_TYPE4,	stSymbolGroup[4],
								SYMBOLGROUP_TYPE5,	stSymbolGroup[5],
								SYMBOLGROUP_TYPE6,	stSymbolGroup[6],
								SYMBOLGROUP_TYPE7,	stSymbolGroup[7],
								SYMBOLGROUP_TYPE8,	stSymbolGroup[8]

	lock			"gs_SymbolType_m"
	hideparameter	"gs_SymbolType_m"


	!! ----------------- Simple to Middle Scale -----------------
	if bLinearDimIsMetric then
		_iEnableScaleSMTypes	= 2 + 4 + 8 + 16 + 32 + 64
	else
		_iEnableScaleSMTypes	= 128 + 256 + 512 + 1024 + 2048 + 4096 + 8192 + 16384
	endif

	dim _iEnableScaleSMTypeValueList[]
	dim _stEnableScaleSMTypeValueList[]
	j = 1
	for i = 1 to vardim1(iScaleType)
		if bittest(_iEnableScaleSMTypes, i) then
			_iEnableScaleSMTypeValueList[j] = iScaleType[i]
			_stEnableScaleSMTypeValueList[j] = stScaleType[i]
			j = j + 1
		endif
	next i
	_iEnableScaleSMTypeValueList[j] = iScaleType[15]
	_stEnableScaleSMTypeValueList[j] = stScaleType[15]
	values{2} "iScaleChangeSM" _iEnableScaleSMTypeValueList, _stEnableScaleSMTypeValueList
	if iScaleChangeSM = SCALE_CUSTOM then
		values "gs_ScaleChangeSM"	range (1,)
	else
		gs_ScaleChangeSM = iScaleChangeSM
		parameters	gs_ScaleChangeSM = gs_ScaleChangeSM

		lock			"gs_ScaleChangeSM"
		hideparameter	"gs_ScaleChangeSM"
	endif

	
	!! ----------------- Middle to Detailed Scale -----------------
	if bLinearDimIsMetric then
		_iEnableScaleMDTypes	= 2 + 4 + 8 + 16 + 32 + 64
	else
		_iEnableScaleMDTypes	= 128 + 256 + 512 + 1024 + 2048 + 4096 + 8192 + 16384
	endif

	dim _iEnableScaleMDTypeValueList[]
	dim _stEnableScaleMDTypeValueList[]
	j = 1
	for i = 1 to vardim1(iScaleType)
		if bittest(_iEnableScaleMDTypes, i) then
			if iScaleChangeSM = SCALE_CUSTOM then
				if gs_ScaleChangeSM > iScaleType[i] then
					_iEnableScaleMDTypeValueList[j] = iScaleType[i]
					_stEnableScaleMDTypeValueList[j] = stScaleType[i]
					j = j + 1
				else
					i = vardim1(iScaleType)
				endif
			else
				_iEnableScaleMDTypeValueList[j] = iScaleType[i]
				_stEnableScaleMDTypeValueList[j] = stScaleType[i]

				if gs_ScaleChangeSM = _iEnableScaleSMTypeValueList[j] then
					i = vardim1(iScaleType)
				else
					j = j + 1
				endif
			endif
		endif
	next i
	_iEnableScaleMDTypeValueList[j] = iScaleType[15]
	_stEnableScaleMDTypeValueList[j] = stScaleType[15]
	values{2} "iScaleChangeMD" _iEnableScaleMDTypeValueList, _stEnableScaleMDTypeValueList

	if iScaleChangeMD = SCALE_CUSTOM then
		values "gs_ScaleChangeMD"	range (, _iScaleSM)
	else
		gs_ScaleChangeMD = iScaleChangeMD
		parameters	gs_ScaleChangeMD = gs_ScaleChangeMD

		lock			"gs_ScaleChangeMD"
		hideparameter	"gs_ScaleChangeMD"
	endif
	if (gs_ScaleChangeMD >= gs_ScaleChangeSM)  then
		gs_ScaleChangeMD = gs_ScaleChangeSM - 1
		parameters	gs_ScaleChangeMD = gs_ScaleChangeMD
	endif
else
	values{2} "gs_SymbolType_m"	SYMBOL_TYPE1,	stStairSymbolTypes[1],
								SYMBOL_TYPE2,	stStairSymbolTypes[2],
								SYMBOL_TYPE3,	stStairSymbolTypes[3],
								SYMBOL_TYPE4,	stStairSymbolTypes[4],
								SYMBOL_TYPE5,	stStairSymbolTypes[5],
								SYMBOL_TYPE6,	stStairSymbolTypes[6],
								SYMBOL_TYPE7,	stStairSymbolTypes[7],
								SYMBOL_TYPE8,	stStairSymbolTypes[8],
								SYMBOL_TYPE9,	stStairSymbolTypes[9],
								SYMBOL_TYPE10,	stStairSymbolTypes[10],
								SYMBOL_TYPE11,	stStairSymbolTypes[11],
								SYMBOL_TYPE12,	stStairSymbolTypes[12],
								SYMBOL_TYPE13,	stStairSymbolTypes[13],
								SYMBOL_TYPE14,	stStairSymbolTypes[14],
								SYMBOL_TYPE15,	stStairSymbolTypes[15],
								SYMBOL_TYPE16,	stStairSymbolTypes[16],
								SYMBOL_TYPE17,	stStairSymbolTypes[17],
								SYMBOL_TYPE18,	stStairSymbolTypes[18],
								SYMBOL_TYPE19,	stStairSymbolTypes[19],
								SYMBOL_TYPE20,	stStairSymbolTypes[20]

	lock			"iSymbolGroup",
					"gs_ScaleChangeSM",
					"iScaleChangeSM",
					"gs_ScaleChangeMD",
					"iScaleChangeMD"
	hideparameter	"iSymbolGroup",
					"gs_ScaleChangeSM",
					"iScaleChangeSM",
					"gs_ScaleChangeMD",
					"iScaleChangeMD"
endif


! ---------- Rise and Run Text ----------

values "gs_RiseRunText" stRiseRunText
values "iRiseRunText" 1, 2, 3, 4, 5, 6, 99

if GLOB_MODPAR_NAME = "gs_RiseRunText" then
	for i = 1 to vardim1(stRiseRunText)
	   if gs_RiseRunText = stRiseRunText[i]	then iRiseRunText = i
	next i
	if gs_RiseRunText = stRiseRunText[7]	then iRiseRunText = 99
	parameters iRiseRunText = iRiseRunText
else
	if iRiseRunText = 99 then
		gs_RiseRunText = stRiseRunText[7]
	else
		gs_RiseRunText = stRiseRunText[max(1, min(iRiseRunText, vardim1(stRiseRunText)) )]
	endif
	parameters gs_RiseRunText = gs_RiseRunText
endif

values "typeTextRotation_RiseRun" `Читаемый`,`Выровнять по Символу`
values "typeTextRotation_RiseRun_m" 2, 0

if GLOB_MODPAR_NAME = "typeTextRotation_RiseRun" then
	if typeTextRotation_RiseRun = `Читаемый`			then typeTextRotation_RiseRun_m = 2
	if typeTextRotation_RiseRun = `Выровнять по Символу`	then typeTextRotation_RiseRun_m = 0
	parameters typeTextRotation_RiseRun_m = typeTextRotation_RiseRun_m
else
	if typeTextRotation_RiseRun_m = 2					then typeTextRotation_RiseRun = `Читаемый`
	if typeTextRotation_RiseRun_m = 0					then typeTextRotation_RiseRun = `Выровнять по Символу`
	parameters typeTextRotation_RiseRun = typeTextRotation_RiseRun
endif

if not(bShowRiseAndRunText) then
	lock			"gs_RiseRunText","gs_CustomText1", "gs_CustomText2", "gs_customText_rise",
					"fontsize","gs_text_size_pt", "typeTextRotation_RiseRun","gs_text_pen","bUseACLinearUnit"
	hideparameter	"gs_RiseRunText","gs_CustomText1", "gs_CustomText2", "gs_customText_rise",
					"fontsize","gs_text_size_pt", "typeTextRotation_RiseRun","gs_text_pen","bUseACLinearUnit"
endif

if iRiseRunText <> 99 then
	lock 	"gs_CustomText1","gs_CustomText2"
	hideparameter 	"gs_CustomText1","gs_CustomText2"
endif

if iRiseRunText <> 5 & iRiseRunText <> 6 then
	lock "gs_customText_rise"
	hideparameter "gs_customText_rise"
endif

if iRiseRunText = 99 then		! Custom
	if bLinearDimIsMetric then
		lock	"gs_CustomText2"
		hideparameter	"gs_CustomText2"
	endif
endif

! ---------- Numbering ----------

values "typeTextRotation_Num" `Читаемый`,`Выровнять по Символу`
values "typeTextRotation_Num_m" 2, 0

if GLOB_MODPAR_NAME = "typeTextRotation_Num" then
	if typeTextRotation_Num = `Читаемый`			then typeTextRotation_Num_m = 2
	if typeTextRotation_Num = `Выровнять по Символу`	then typeTextRotation_Num_m = 0
	parameters typeTextRotation_Num_m = typeTextRotation_Num_m
else
	if typeTextRotation_Num_m = 2					then typeTextRotation_Num = `Читаемый`
	if typeTextRotation_Num_m = 0					then typeTextRotation_Num = `Выровнять по Символу`
	parameters typeTextRotation_Num= typeTextRotation_Num
endif

if not(bShowNumbering) then
	 lock			"nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen","gs_NumBelow","gs_NumAbove", "typeTextRotation_Num"
	 hideparameter	"nStartNumbering","gs_NumTextSize", "gs_text_size_pt_num", "gs_NumTextPen","gs_NumBelow","gs_NumAbove", "typeTextRotation_Num"
endif

! ---------- UP and Down ----------
values "walkingDirUPDN" stWalkingDirUPDN		! None, UP, DOWN
values "walkingDirUPDN_m" WALKDIRSTR_NONE, WALKDIRSTR_UP, WALKDIRSTR_DOWN

if GLOB_MODPAR_NAME = "walkingDirUPDN" then
	walkingDirUPDN_m = 1
	for i = 1 to vardim1(stWalkingDirUPDN)
		if walkingDirUPDN = stWalkingDirUPDN[i] then
			walkingDirUPDN_m = i
			i = vardim1(stWalkingDirUPDN)
		endif
	next i
	parameters walkingDirUPDN_m = walkingDirUPDN_m
else
	walkingDirUPDN_m = max(1, min(walkingDirUPDN_m, vardim1(stWalkingDirUPDN)))
	walkingDirUPDN = stWalkingDirUPDN[walkingDirUPDN_m]
	parameters	walkingDirUPDN_m	= walkingDirUPDN_m,
				walkingDirUPDN		= walkingDirUPDN
endif

values "typeTextRotation_UpDn" `Читаемый`,`Параллельно Линии Всхода`,`Выровнять по Символу`
values "typeTextRotation_UpDn_m" 2, 1, 0

if GLOB_MODPAR_NAME = "typeTextRotation_UpDn" then
	if typeTextRotation_UpDn = `Читаемый`					then typeTextRotation_UpDn_m = 2
	if typeTextRotation_UpDn = `Параллельно Линии Всхода`	then typeTextRotation_UpDn_m = 1
	if typeTextRotation_UpDn = `Выровнять по Символу`			then typeTextRotation_UpDn_m = 0
	parameters typeTextRotation_UpDn_m = typeTextRotation_UpDn_m
else
	if typeTextRotation_UpDn_m = 2					then typeTextRotation_UpDn = `Читаемый`
	if typeTextRotation_UpDn_m = 1					then typeTextRotation_UpDn = `Параллельно Линии Всхода`
	if typeTextRotation_UpDn_m = 0					then typeTextRotation_UpDn = `Выровнять по Символу`
	parameters typeTextRotation_UpDn = typeTextRotation_UpDn
endif

if walkingDirUPDN_m = WALKDIRSTR_NONE  then
	 lock			"UPDNfontsize", "gs_text_size_pt_UpDn", "UPDNfontpen","AngUPDN", "typeTextRotation_UpDn"
	 HIDEPARAMETER	"UPDNfontsize", "gs_text_size_pt_UpDn", "UPDNfontpen","AngUPDN", "typeTextRotation_UpDn"
endif

values "arrow_style" stArrowStyle
values "arrow_style_m"	ARROW_STYLE_1,
						ARROW_STYLE_2,
						ARROW_STYLE_3,
						ARROW_STYLE_4,
						ARROW_STYLE_5,
						ARROW_STYLE_6,
						ARROW_STYLE_7,
						ARROW_STYLE_8,
						ARROW_STYLE_9

if GLOB_MODPAR_NAME = "arrow_style" then
	n = vardim1(stArrowStyle)
	arrow_style_m = ARROW_STYLE_1
	for i = 1 to n
		if arrow_style = stArrowStyle[i] then
			arrow_style_m = i
			i = n
		endif
	next i
	parameters arrow_style_m = arrow_style_m
else
	arrow_style_m = max(1, min(arrow_style_m, vardim1(stArrowStyle)))
	arrow_style = stArrowStyle[arrow_style_m]
	parameters	arrow_style = arrow_style,
				arrow_style_m = arrow_style_m
endif

values "gs_StartEndStyle" stStartSymbolStyles		! Style 1, Style 2, Style 3, None
values "gs_StartEndStyle_m" STARTSYMB_STYLE1, STARTSYMB_STYLE2, STARTSYMB_STYLE3, STARTSYMB_NONE

if GLOB_MODPAR_NAME = "gs_StartEndStyle" then
	gs_StartEndStyle_m = 1
	for i = 1 to vardim1(stStartSymbolStyles)
		if gs_StartEndStyle = stStartSymbolStyles[i] then
			gs_StartEndStyle_m = i
			i = vardim1(stStartSymbolStyles)
		endif
	next i
	parameters gs_StartEndStyle_m = gs_StartEndStyle_m
else
	gs_StartEndStyle_m = max(1, min(gs_StartEndStyle_m, vardim1(stStartSymbolStyles)))
	gs_StartEndStyle = stStartSymbolStyles[gs_StartEndStyle_m]
	parameters	gs_StartEndStyle_m	= gs_StartEndStyle_m,
				gs_StartEndStyle	= gs_StartEndStyle
endif

if bSimpleZigZag then
	values "breakline_style" stBreakLineStyle[1], stBreakLineStyle[3]
	values "breakline_style_m" 1, 3
else
	values "breakline_style" stBreakLineStyle[1], stBreakLineStyle[2]
	values "breakline_style_m" 1, 2
endif

if GLOB_MODPAR_NAME = "breakline_style" then
	n = vardim1(stBreakLineStyle)
	breakline_style_m = BREAKLINE_STRAIGHT
	for i = 1 to n
		if breakline_style = stBreakLineStyle[i] then
			breakline_style_m = i
			i = n
		endif
	next i
	parameters breakline_style_m = breakline_style_m
else
	breakline_style_m = max(1, min(breakline_style_m, vardim1(stBreakLineStyle)))
	breakline_style = stBreakLineStyle[breakline_style_m]
	parameters	breakline_style = breakline_style,
				breakline_style_m = breakline_style_m
endif


!!! *** RANGE PARAMETERS *** !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

VALUES "th" RANGE (0,)
VALUES "rnu" RANGE (0,)
VALUES "sst" RANGE (0,)
VALUES "lst" RANGE [0,)
VALUES "lst2" RANGE [0,)
VALUES "lx" RANGE (depthTreadIn,)
VALUES "brkLineY"	RANGE (0,depthTreadIn-covthicky]
VALUES "ly" RANGE [4*depthTreadIn+brkLineY,)
VALUES "flw" RANGE (0,)
VALUES "covthick" RANGE (0,)
VALUES "covthicky" RANGE (0,)
VALUES "ns" RANGE [0,)

VALUES "gs_BreakHeight" 	RANGE [4*th,((INT(ly/depthTreadIn))-1)*th]


VALUES "res" RANGE[3,)
VALUES "rescs" RANGE[3,)

!!! A, B, ZZYZX !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

	PARAMETERS A=flw+lx
	LOCK "A"
	PARAMETERS B=flw+ly
	LOCK "B"

!!! *** RAILING PARAMETERS *** !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

values "rail_m" 1, 2, 3, 4
if GLOB_MODPAR_NAME = "bRightRail" or GLOB_MODPAR_NAME = "bLeftRail" then
	if bRightRail then
		if bLeftRail then
			rail_m = RAILPOS_BOTH
		else
			rail_m = RAILPOS_RIGHT
		endif
	else
		if bLeftRail then
			rail_m = RAILPOS_LEFT
		else
			rail_m = RAILPOS_NONE
		endif
	endif
	parameters rail_m = rail_m
else
	if rail_m = 1 then
		bRightRail	= 1
		bLeftRail	= 1
	endif
	if rail_m = 2 then
		bRightRail	= 1
		bLeftRail	= 0
	endif
	if rail_m = 3 then
		bRightRail	= 0
		bLeftRail	= 1
	endif
	if rail_m = 4 then
		bRightRail	= 0
		bLeftRail	= 0
	endif
	parameters bRightRail	= bRightRail
	parameters bLeftRail	= bLeftRail
endif

if NOT(bRightRail) then
	lock			"rightRailType"
	hideparameter	"rightRailType"
endif
if NOT(bLeftRail) then
	lock			"leftRailType"
	hideparameter	"leftRailType"
endif

values "btypr" stBarStyle
values "btypr_m" BAR_RECTANGULAR, BAR_ROUND

if GLOB_MODPAR_NAME = "btypr" then
	btypr_m = BAR_RECTANGULAR
	if btypr = stBarStyle[2] then btypr_m = BAR_ROUND
	parameters btypr_m = btypr_m
else
	btypr = stBarStyle[1]
	if btypr_m = BAR_ROUND then btypr = stBarStyle[2]
	parameters btypr = btypr
endif

values "btypl" stBarStyle
values "btypl_m" BAR_RECTANGULAR, BAR_ROUND

if GLOB_MODPAR_NAME = "btypl" then
	btypl_m = BAR_RECTANGULAR
	if btypl = stBarStyle[2] then btypl_m = BAR_ROUND
	parameters btypl_m = btypl_m
else
	btypl = stBarStyle[1]
	if btypl_m = BAR_ROUND then btypl = stBarStyle[2]
	parameters btypl = btypl
endif

VALUES "rightRailType" 	stRailTypes[1],
						stRailTypes[2],
						stRailTypes[3],
						stRailTypes[4],
						stRailTypes[5],
						stRailTypes[6],
						stRailTypes[7],
						stRailTypes[8],
						stRailTypes[9],
						stRailTypes[10]

if GLOB_MODPAR_NAME = "rightRailType" then
	for i = 1 to vardim1(stRailTypes)
	   if rightRailType = stRailTypes[i]	then rightRailType_m = i
	next i
	parameters rightRailType_m = rightRailType_m
else
	parameters rightRailType = stRailTypes[rightRailType_m]
endif

if rail_m = RAILPOS_BOTH then		! Both
	VALUES "leftRailType" 	stRailTypes[11],
							stRailTypes[1],
							stRailTypes[2],
							stRailTypes[3],
							stRailTypes[4],
							stRailTypes[5],
							stRailTypes[6],
							stRailTypes[7],
							stRailTypes[8],
							stRailTypes[9],
							stRailTypes[10]
else
	VALUES "leftRailType" 	stRailTypes[1],
							stRailTypes[2],
							stRailTypes[3],
							stRailTypes[4],
							stRailTypes[5],
							stRailTypes[6],
							stRailTypes[7],
							stRailTypes[8],
							stRailTypes[9],
							stRailTypes[10]
endif
if GLOB_MODPAR_NAME = "leftRailType" then
	for i = 1 to vardim1(stRailTypes)
	   if leftRailType = stRailTypes[i]	then leftRailType_m = i
	next i
	parameters leftRailType_m = leftRailType_m
else
	parameters leftRailType = stRailTypes[leftRailType_m]
endif
bSameRails = (leftRailType_m = RAIL_SAMERAILS)
parameters bSameRails = bSameRails

if GLOB_MODPAR_NAME = "rightRailType" or GLOB_MODPAR_NAME = "rightRailType_m" then
	if rightRailType_m = RAIL_WIRED then
		bwr		= 0.005
		bthr	= 0.005
		bdr		= 0.005
	else
		bwr		= 0.025
		bthr	= 0.025
		bdr		= 0.05
	endif

	parameters bwr = bwr
	parameters bthr = bthr
	parameters bdr = bdr
endif

if GLOB_MODPAR_NAME = "leftRailType" or GLOB_MODPAR_NAME = "leftRailType_m" then
	if leftRailType_m = RAIL_WIRED then
		bwl		= 0.005
		bthl	= 0.005
		bdl		= 0.005
	else
		bwl		= 0.025
		bthl	= 0.025
		bdl		= 0.05
	endif

	parameters bwl = bwr
	parameters bthl = bthr
	parameters bdl = bdr
endif

! ==============================================================================
! Symbolic 2D
! ==============================================================================

values "postSymbolType" stPostSymbolType
values "iPostSymbolType" 1, 2, 3, 4, 0
if GLOB_MODPAR_NAME = "postSymbolType" then
	iPostSymbolType = 1
	if postSymbolType = stPostSymbolType[2] then iPostSymbolType = 2
	if postSymbolType = stPostSymbolType[3] then iPostSymbolType = 3
	if postSymbolType = stPostSymbolType[4] then iPostSymbolType = 4
	if postSymbolType = stPostSymbolType[5] then iPostSymbolType = 0
	parameters iPostSymbolType = iPostSymbolType
else
	postSymbolType = stPostSymbolType[1]
	if iPostSymbolType = 2 then postSymbolType = stPostSymbolType[2]
	if iPostSymbolType = 3 then postSymbolType = stPostSymbolType[3]
	if iPostSymbolType = 4 then postSymbolType = stPostSymbolType[4]
	if iPostSymbolType = 0 then postSymbolType = stPostSymbolType[5]
	parameters postSymbolType = postSymbolType
endif

if NOT(bShowRailOnFloorPlan) then
	lock			"railLineType",
					"railPen",
					"bSymbolic2D",
					"postSymbolType",
					"iPostSymbolType",
					"postLineType",
					"postPen",
					"bShowRailAboveBreakLine"
	hideparameter	"railLineType",
					"railPen",
					"bSymbolic2D",
					"postSymbolType",
					"iPostSymbolType",
					"postLineType",
					"postPen",
					"bShowRailAboveBreakLine"
endif
if NOT(iPostSymbolType) then
	lock			"postLineType",
					"postPen"
	hideparameter	"postLineType",
					"postPen"
endif
if NOT(bSymbolic2D) then
	lock			"postSymbolType",
					"iPostSymbolType",
					"postLineType",
					"postPen"
	hideparameter	"postSymbolType",
					"iPostSymbolType",
					"postLineType",
					"postPen"
endif
if not(bShowRailAxis) then
	lock 			"railAxisLineType",
					"gs_RailAxisPen"
	hideparameter	"railAxisLineType",
					"gs_RailAxisPen"
endif
if	gs_detlevel_2D_m = DET2D_CUSTOM &\
	(gs_SymbolType_m = 3 |\
	gs_SymbolType_m = 8 |\
	gs_SymbolType_m = 15) then
	lock			"bShowRailAboveBreakLine"
	hideparameter	"bShowRailAboveBreakLine"
endif

!!! *** HIDE RAILING PARAMETERS *** !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

LOCK "ggr","sgr","ggl","sgl"

IF leftRailType_m = RAIL_BALUSTRADE THEN
	HIDEPARAMETER "fdfl", "bhl", "nbl", "btypl", "bdl", "hrtl", "hrdl"
	HIDEPARAMETER "hrwl", "hrhl", "hrol", "ptl", "npl"
	HIDEPARAMETER "nbtl", "pdl", "pwl", "pthl", "sbhl", "btl"
	HIDEPARAMETER "pmatl"
ENDIF

IF leftRailType_m = RAIL_PARALLEL_BARS THEN
	HIDEPARAMETER "fswl", "ftwl", "fbwl", "bwl", "bthl", "abdistl"
	HIDEPARAMETER "fdfl", "btypl", "bdl", "hrtl", "hrdl"
	HIDEPARAMETER "hrwl", "hrhl", "hrol", "ptl", "npl"
	HIDEPARAMETER "nbtl", "pdl", "pwl", "pthl", "sbhl", "btl"
	HIDEPARAMETER "bmatl","pmatl"
ENDIF

IF leftRailType_m = RAIL_SIMPLE_BAR THEN
	HIDEPARAMETER "fswl", "ftwl", "fbwl", "bwl", "bthl", "abdistl"
	HIDEPARAMETER "fdfl", "nbl", "hrtl", "hrdl"
	HIDEPARAMETER "hrwl", "hrhl", "hrol", "ptl", "npl"
	HIDEPARAMETER "nbtl", "pdl", "pwl", "pthl", "sbhl", "btl"
	HIDEPARAMETER "bmatl","pmatl"
ENDIF

IF leftRailType_m = RAIL_SOLID_FRAME_FILLED THEN
	HIDEPARAMETER "bhl", "nbl", "btypl", "bdl", "hrtl", "hrdl"
	HIDEPARAMETER "hrwl", "hrhl", "hrol", "ptl", "npl", "btl"
	HIDEPARAMETER "nbtl", "pdl", "pwl", "pthl", "sbhl", "bwl", "abdistl"
	HIDEPARAMETER "pmatl"
ENDIF

IF leftRailType_m = RAIL_SOLID_FRAME THEN
	HIDEPARAMETER "bthl", "fdfl", "bhl", "nbl", "btypl", "bdl", "hrtl", "hrdl"
	HIDEPARAMETER "hrwl", "hrhl", "hrol", "ptl", "npl", "btl"
	HIDEPARAMETER "nbtl", "pdl", "pwl", "pthl", "sbhl", "bwl", "abdistl"
	HIDEPARAMETER "bmatl","pmatl"
ENDIF

IF leftRailType_m = RAIL_SOLID THEN
	HIDEPARAMETER "fswl", "ftwl", "fbwl", "bthl", "fdfl"
	HIDEPARAMETER "bthl", "fdfl", "bhl", "nbl", "btypl", "bdl", "hrtl", "hrdl"
	HIDEPARAMETER "hrwl", "hrhl", "hrol", "ptl", "npl", "btl"
	HIDEPARAMETER "nbtl", "pdl", "pwl", "pthl", "sbhl", "bwl", "abdistl"
	HIDEPARAMETER "bmatl","pmatl"
ENDIF

IF leftRailType_m = RAIL_POST_WITH_BALUSTERS THEN
	HIDEPARAMETER "ggl","sgl"
	HIDEPARAMETER "fswl", "ftwl", "fbwl", "fdfl", "fthl"
	HIDEPARAMETER "fdfl", "bhl", "btypl"
	HIDEPARAMETER "nbtl", "sbhl", "abdistl"
ENDIF

IF leftRailType_m = RAIL_WIRED THEN
	HIDEPARAMETER "ggl","sgl"
	HIDEPARAMETER "fswl", "ftwl", "fbwl", "fdfl", "fthl"
	HIDEPARAMETER "fdfl", "bhl", "btypl"
	HIDEPARAMETER "sbhl"
	HIDEPARAMETER "nbtl", "abdistl"
ENDIF

IF leftRailType_m = RAIL_WOODEN_BALUSTRADE THEN
	HIDEPARAMETER "ggl","sgl"
	HIDEPARAMETER "fswl", "ftwl", "fbwl", "bthl", "fdfl", "fthl"
	HIDEPARAMETER "bthl", "fdfl", "bhl", "btypl"
	HIDEPARAMETER "sbhl", "abdistl", "ptl", "npl", "pwl"
	HIDEPARAMETER "pthl", "btl", "nbl"
	HIDEPARAMETER "bmatl"
ENDIF

IF leftRailType_m = RAIL_POST_WITH_BARS THEN
	HIDEPARAMETER "ggl","sgl"
	HIDEPARAMETER "fswl", "ftwl", "fbwl", "fdfl", "fthl"
	HIDEPARAMETER "bhl", "btypl"
	HIDEPARAMETER "nbtl", "abdistl"
ENDIF

IF rightRailType_m = RAIL_BALUSTRADE THEN
	HIDEPARAMETER "fdfr", "bhr", "nbr", "btypr", "bdr", "hrtr", "hrdr"
	HIDEPARAMETER "hrwr", "hrhr", "hror", "ptr", "npr"
	HIDEPARAMETER "nbtr", "pdr", "pwr", "pthr", "sbhr", "btr"
	HIDEPARAMETER "pmatr"
ENDIF

IF rightRailType_m = RAIL_PARALLEL_BARS THEN
	HIDEPARAMETER "fswr", "ftwr", "fbwr", "bwr", "bthr", "abdistr"
	HIDEPARAMETER "fdfr", "btypr", "bdr", "hrtr", "hrdr"
	HIDEPARAMETER "hrwr", "hrhr", "hror", "ptr", "npr"
	HIDEPARAMETER "nbtr", "pdr", "pwr", "pthr", "sbhr", "btr"
	HIDEPARAMETER "bmatr","pmatr"
ENDIF

IF rightRailType_m = RAIL_SIMPLE_BAR THEN
	HIDEPARAMETER "fswr", "ftwr", "fbwr", "bwr", "bthr", "abdistr"
	HIDEPARAMETER "fdfr", "nbr", "hrtr", "hrdr"
	HIDEPARAMETER "hrwr", "hrhr", "hror", "ptr", "npr"
	HIDEPARAMETER "nbtr", "pdr", "pwr", "pthr", "sbhr", "btr"
	HIDEPARAMETER "bmatr","pmatr"
ENDIF

IF rightRailType_m = RAIL_SOLID_FRAME_FILLED THEN
	HIDEPARAMETER "bhr", "nbr", "btypr", "bdr", "hrtr", "hrdr"
	HIDEPARAMETER "hrwr", "hrhr", "hror", "ptr", "npr", "btr"
	HIDEPARAMETER "nbtr", "pdr", "pwr", "pthr", "sbhr", "bwr", "abdistr"
	HIDEPARAMETER "pmatr"
ENDIF

IF rightRailType_m = RAIL_SOLID_FRAME THEN
	HIDEPARAMETER "bthr", "fdfr", "bhr", "nbr", "btypr", "bdr", "hrtr", "hrdr"
	HIDEPARAMETER "hrwr", "hrhr", "hror", "ptr", "npr", "btr"
	HIDEPARAMETER "nbtr", "pdr", "pwr", "pthr", "sbhr", "bwr", "abdistr"
	HIDEPARAMETER "bmatr","pmatr"
ENDIF

IF rightRailType_m = RAIL_SOLID THEN
	HIDEPARAMETER "fswr", "ftwr", "fbwr", "bthr", "fdfr"
	HIDEPARAMETER "bthr", "fdfr", "bhr", "nbr", "btypr", "bdr", "hrtr", "hrdr"
	HIDEPARAMETER "hrwr", "hrhr", "hror", "ptr", "npr", "btr"
	HIDEPARAMETER "nbtr", "pdr", "pwr", "pthr", "sbhr", "bwr", "abdistr"
	HIDEPARAMETER "bmatr","pmatr"
ENDIF

IF rightRailType_m = RAIL_POST_WITH_BALUSTERS THEN
	HIDEPARAMETER "ggr","sgr"
	HIDEPARAMETER "fswr", "ftwr", "fbwr", "fdfr", "fthr"
	HIDEPARAMETER "fdfr", "bhr", "btypr"
	HIDEPARAMETER "nbtr", "sbhr", "abdistr"
ENDIF

IF rightRailType_m = RAIL_WIRED THEN
	HIDEPARAMETER "ggr","sgr"
	HIDEPARAMETER "fswr", "ftwr", "fbwr", "fdfr", "fthr"
	HIDEPARAMETER "fdfr", "bhr", "btypr"
	HIDEPARAMETER "sbhr"
	HIDEPARAMETER "nbtr", "abdistr"
ENDIF

IF rightRailType_m = RAIL_WOODEN_BALUSTRADE THEN
	HIDEPARAMETER "ggr","sgr"
	HIDEPARAMETER "fswr", "ftwr", "fbwr", "bthr", "fdfr", "fthr"
	HIDEPARAMETER "bthr", "fdfr", "bhr", "btypr"
	HIDEPARAMETER "sbhr", "abdistr", "ptr", "npr", "pwr"
	HIDEPARAMETER "pthr", "btr", "nbr"
	HIDEPARAMETER "bmatr"
ENDIF

IF rightRailType_m = RAIL_POST_WITH_BARS THEN
	HIDEPARAMETER "ggr","sgr"
	HIDEPARAMETER "fswr", "ftwr", "fbwr", "fdfr", "fthr"
	HIDEPARAMETER "bhr", "btypr"
	HIDEPARAMETER "nbtr", "abdistr"
ENDIF

!!! *** FULL HIDE OF RAILING PARAMETERS *** !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

IF rail_m = RAILPOS_NONE or rail_m = RAILPOS_LEFT THEN
	HIDEPARAMETER "ggr", "hrr", "dsr", "roffr", "sgr", "fswr",
		"fthr", "ftwr", "fbwr", "bwr", "bthr", "abdistr", "fdfr",
		"bhr", "bdr", "nbr", "btypr", "fmatr", "bmatr", "romr", "rmmr",
		"hrtr","hrdr","hrwr","hrhr","hror",
		"ptr","npr","nbtr","pdr","pwr","pthr",
		"btr","nbr","bwr","bthr","bdr","sbhr",
		"bmatr","fmatr","pmatr"
ENDIF
IF rail_m = RAILPOS_NONE or rail_m = RAILPOS_RIGHT THEN
	HIDEPARAMETER "ggl", "hrl", "dsl", "roffl", "sgl", "fswl",
		"fthl", "ftwl", "fbwl", "bwl", "bthl", "abdistl", "fdfl",
		"bhl", "bdl", "nbl", "btypl", "fmatl", "bmatl", "roml", "rmml",
		"hrtl","hrdl","hrwl","hrhl","hrol",
		"ptl","npl","nbtl","pdl","pwl","pthl",
		"btl","nbl","bwl","bthl","bdl","sbhl",
		"bmatl","fmatl","pmatl"
ENDIF

!!! *** RIGHT RAIL STRUCTURAL DIMENSION PARAMETERS *** !!!!!!!!!!!!!!!!!!!!!!!!!

values "hrtr" stHandrailStyle
values "hrtr_m" HANDRAIL_RECTANGULAR, HANDRAIL_ROUND

if GLOB_MODPAR_NAME = "hrtr" then
	hrtr_m = HANDRAIL_RECTANGULAR
	if hrtr = stHandrailStyle[2] then hrtr_m = HANDRAIL_ROUND
	parameters hrtr_m = hrtr_m
else
	hrtr = stHandrailStyle[1]
	if hrtr_m = HANDRAIL_ROUND then hrtr = stHandrailStyle[2]
	parameters hrtr = hrtr
endif

IF hrtr_m = HANDRAIL_ROUND THEN
	HIDEPARAMETER "hrwr"
	HIDEPARAMETER "hrhr"
ELSE
	HIDEPARAMETER "hrdr"
ENDIF

values "ptr" stPostStyle
values "ptr_m" POST_RECTANGULAR, POST_ROUND

if GLOB_MODPAR_NAME = "ptr" then
	ptr_m = POST_RECTANGULAR
	if ptr = stPostStyle[2] then ptr_m = POST_ROUND
	parameters ptr_m = ptr_m
else
	ptr = stPostStyle[1]
	if ptr_m = POST_ROUND then ptr = stPostStyle[2]
	parameters ptr = ptr
endif

IF ptr_m = POST_ROUND THEN
	HIDEPARAMETER "pwr"
	HIDEPARAMETER "pthr"
ELSE
	HIDEPARAMETER "pdr"
ENDIF

values "btr" stBoardStyle
values "btr_m" BOARD_RECTANGULAR, BOARD_ROUND

if GLOB_MODPAR_NAME = "btr" then
	btr_m = BOARD_RECTANGULAR
	if btr = stBoardStyle[2] then btr_m = BOARD_ROUND
	parameters btr_m = btr_m
else
	btr = stBoardStyle[1]
	if btr_m = BOARD_ROUND then btr = stBoardStyle[2]
	parameters btr = btr
endif

IF rightRailType_m <> RAIL_SIMPLE_BAR THEN
	IF btr_m = BOARD_ROUND THEN
		HIDEPARAMETER "bwr"
		HIDEPARAMETER "bthr"
	ELSE
		HIDEPARAMETER "bdr"
	ENDIF
ELSE
	IF btypr_m = BAR_ROUND THEN
		HIDEPARAMETER "bhr"
		HIDEPARAMETER "fthr"
	ELSE
		HIDEPARAMETER "bdr"
	ENDIF
ENDIF

values "btl" stBoardStyle
values "btl_m" BOARD_RECTANGULAR, BOARD_ROUND

if GLOB_MODPAR_NAME = "btl" then
	btl_m = BOARD_RECTANGULAR
	if btl = stBoardStyle[2] then btl_m = BOARD_ROUND
	parameters btl_m = btl_m
else
	btl = stBoardStyle[1]
	if btl_m = BOARD_ROUND then btl = stBoardStyle[2]
	parameters btl = btl
endif

IF leftRailType_m <> RAIL_SIMPLE_BAR THEN
	IF btl_m = BOARD_ROUND THEN
		HIDEPARAMETER "bwl"
		HIDEPARAMETER "bthl"
	ELSE
		HIDEPARAMETER "bdl"
	ENDIF
ELSE
	IF btypl_m = BAR_ROUND THEN
		HIDEPARAMETER "bhl"
		HIDEPARAMETER "fthl"
	ELSE
		HIDEPARAMETER "bdl"
	ENDIF
ENDIF

!!! *** LEFT RAIL STRUCTURAL DIMENSION PARAMETERS *** !!!!!!!!!!!!!!!!!!!!!!!!!!

IF bSameRails THEN
	HIDEPARAMETER "ggl","hrl","dsl","roffl",
	"sgl","fswl","fthl","ftwl","fbwl","abdistl","fdfl","bhl","btypl",
	"hrtl","hrdl","hrwl","hrhl","hrol",
	"ptl","npl","nbtl","pdl","pwl","pthl",
	"btl","nbl","bwl","bthl","bdl","sbhl",
	"bmatl","fmatl","pmatl"
ENDIF

values "hrtl" stHandrailStyle
values "hrtl_m" HANDRAIL_RECTANGULAR, HANDRAIL_ROUND

if GLOB_MODPAR_NAME = "hrtl" then
	hrtl_m = HANDRAIL_RECTANGULAR
	if hrtl = stHandrailStyle[2] then hrtl_m = HANDRAIL_ROUND
	parameters hrtl_m = hrtl_m
else
	hrtl = stHandrailStyle[1]
	if hrtl_m = HANDRAIL_ROUND then hrtl = stHandrailStyle[2]
	parameters hrtl = hrtl
endif

IF hrtl_m = HANDRAIL_ROUND THEN
	HIDEPARAMETER "hrwl"
	HIDEPARAMETER "hrhl"
ELSE
	HIDEPARAMETER "hrdl"
ENDIF

values "ptl" stPostStyle
values "ptl_m" POST_RECTANGULAR, POST_ROUND

if GLOB_MODPAR_NAME = "ptl" then
	ptl_m = POST_RECTANGULAR
	if ptl = stPostStyle[2] then ptl_m = POST_ROUND
	parameters ptl_m = ptl_m
else
	ptl = stPostStyle[1]
	if ptl_m = POST_ROUND then ptl = stPostStyle[2]
	parameters ptl = ptl
endif

IF ptl_m = POST_ROUND THEN
	HIDEPARAMETER "pwl"
	HIDEPARAMETER "pthl"
ELSE
	HIDEPARAMETER "pdl"
ENDIF

!!! End of RAILING !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

!!! Cover Materials
IF cover=0 	THEN
	HIDEPARAMETER	"covthick","ns",
					"penLineTread", "typeFillTread",
					"penFillTread", "penBackFillTread"
endif

IF covery=0 THEN
	HIDEPARAMETER 	"covthicky",
					"penLineRiser", "typeFillRiser",
					"penFillRiser", "penBackFillRiser"
endif

! ------ Story Sensitive ------------------------------

if not(gs_StorySensitive) then
	hideparameter "gs_AboveHomeStory"
else
	if not(gs_BreaklineStUp) then
		hideparameter "gs_LowerPartStUp","gs_UpperPartStUp"
	endif
	if not(gs_LowerPartStUp) & not(gs_UpperPartStUp) & gs_BreaklineStUp then
		hideparameter "gs_TreadStUp"
	endif
endif

! ------ for 2D above Home Story ------------------------------[
if	(GLOB_MODPAR_NAME = "gs_SymbolType" | GLOB_MODPAR_NAME = "gs_SymbolType_m" |\
	GLOB_MODPAR_NAME = "gs_detlevel_2D" | GLOB_MODPAR_NAME = "gs_detlevel_2D_m") &\
	gs_detlevel_2D_m = DET2D_CUSTOM then
	if gs_SymbolType_m  = 1 | gs_SymbolType_m  = 2 then
		parameters	gs_BreaklineStUp	= 0,
					gs_TreadStUp		= 0
	endif
	if gs_SymbolType_m  = 3 | gs_SymbolType_m  = 4 | gs_SymbolType_m  = 5 then
		parameters	gs_BreaklineStUp	= 1,
					gs_LowerPartStUp	= 0,
					gs_UpperPartStUp	= 1,
					gs_TreadStUp		= 0
	endif
	if gs_SymbolType_m  = 6 | gs_SymbolType_m  = 7 | \
		gs_SymbolType_m  = 13 | gs_SymbolType_m  = 14 then
		parameters	gs_BreaklineStUp	= 0,
					gs_TreadStUp		= 1
	endif
	if gs_SymbolType_m  = 8 | gs_SymbolType_m  = 9 | gs_SymbolType_m  = 10 | \
		gs_SymbolType_m  = 11 | gs_SymbolType_m  = 12 | \
		gs_SymbolType_m  = 15 | gs_SymbolType_m  = 16 | gs_SymbolType_m  = 17 | \
		gs_SymbolType_m  = 18 | gs_SymbolType_m  = 19 | gs_SymbolType_m  = 20 then
		parameters	gs_BreaklineStUp = 1,
					gs_LowerPartStUp = 0,
					gs_UpperPartStUp = 1,
					gs_TreadStUp = 1
	endif
endif
! ------ for 2D above Home Story ------------------------------]

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!! Settings of 2D Symbol Type *** !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

!"DirRiseRunText_X","DirRiseRunText_Y","DirRiseRunAngle",
	LOCK	"gs_2DTread","gs_2DTreadAbove","gs_2DRiserAbove","gs_2DContourAbove",
			"gs_2DContourBelow","brk","brkLineY",
			"gs_ArrowFill","gs_ArrowHeight","gs_ArrowHalfWidth",
			"gs_StartEndFill","gs_CircleRadius","gs_StartWidth","gs_StartHeight",
			"tdfs","DirNumText_X","DirNumText_Y",
			
			"DirUPDN_X","DirUPDN_Y","AngUPDN",
			"bSameRails","gs_FillTypeAbove"


	IF walkl=0 THEN
		 HIDEPARAMETER 	"gs_wLineType1","gs_wLineType2","gs_wLineTypeAbove",
						"gs_wLinePen","arrow_style","gs_ArrowFillPen","gs_ArrowFillPenAbove",
						"gs_StartEndStyle","gs_StartEndFillPen",
						"gs_RiseRunText","gs_CustomText1","gs_CustomText2","bShowRiseAndRunText","fontsize","typeTextRotation_RiseRun","gs_text_pen","bUseACLinearUnit",
						"walkingDirUPDN","UPDNfontsize","UPDNfontpen", "typeTextRotation_UpDn"
	ENDIF

	IF arrow_style_m = ARROW_STYLE_1 OR arrow_style_m = ARROW_STYLE_2 OR arrow_style_m = ARROW_STYLE_3 THEN
		 HIDEPARAMETER 	"gs_ArrowFillPen","gs_ArrowFillPenAbove"
	ENDIF

	IF gs_StartEndStyle_m = STARTSYMB_STYLE3 OR gs_StartEndStyle_m = STARTSYMB_NONE  THEN
		 HIDEPARAMETER 	"gs_StartEndFillPen"
	ENDIF

	!!! SETTINGS BY SYMBOL TYPES ON HOME STORY !!!!!!!!!!!!!!!!!!!
	!!! ******************************************************* !!


	if gs_detlevel_2D_m = DET2D_CUSTOM then
		IF gs_SymbolType_m = 1 THEN
			HIDEPARAMETER	"gs_wLineType1","gs_wLineTypeAbove",
							"breakline_style","gs_BreakHeight",
							"gs_ArrowFillPenAbove","gs_NumBelow","gs_NumAbove",
							"gs_FillAbove","gs_cont_pen","solid_line",
							"bShowRailAxis","railAxisLineType","gs_RailAxisPen"
	
			IF bShowRiseAndRunText=0 AND walkingDirUPDN_m = WALKDIRSTR_NONE OR walkl=0 THEN HIDEPARAMETER "fontType"
			if not(gs_StorySensitive) | (gs_StorySensitive & not(gs_BreaklineStUp)) then
				hideparameter "gs_BreakHeight","breakline_style"
			endif
		ENDIF
	
		IF gs_SymbolType_m = 2 THEN
			HIDEPARAMETER	"gs_wLineType2","gs_wLineTypeAbove",
							"breakline_style","gs_BreakHeight",
							"gs_ArrowFillPenAbove","gs_NumBelow","gs_NumAbove",
							"gs_FillAbove","gs_DashLinePen","dash_line",
							"bShowRailAxis","railAxisLineType","gs_RailAxisPen"
	
			IF bShowRiseAndRunText=0 AND walkingDirUPDN_m = WALKDIRSTR_NONE OR walkl=0 THEN HIDEPARAMETER "fontType"
			if not(gs_StorySensitive) | (gs_StorySensitive & not(gs_BreaklineStUp)) then
				hideparameter "gs_BreakHeight","breakline_style"
			endif
		ENDIF
	
	
		IF gs_SymbolType_m = 3 THEN
			HIDEPARAMETER	"gs_wLineType2","gs_wLineTypeAbove",
							"gs_ArrowFillPenAbove","gs_NumBelow","gs_NumAbove",
							"gs_FillAbove","gs_DashLinePen","dash_line",
							"bShowRailAxis","railAxisLineType","gs_RailAxisPen"
	
			IF bShowRiseAndRunText=0 AND walkingDirUPDN_m = WALKDIRSTR_NONE OR walkl=0 THEN HIDEPARAMETER "fontType"
		ENDIF
	
	
		IF gs_SymbolType_m = 4 THEN
			HIDEPARAMETER	"gs_wLineType2","bShowRailAxis","railAxisLineType","gs_RailAxisPen"
	
			IF bShowRiseAndRunText=0 AND walkingDirUPDN_m = WALKDIRSTR_NONE OR walkl=0 THEN HIDEPARAMETER "fontType"
		ENDIF
	
	
		IF gs_SymbolType_m = 5 THEN
			HIDEPARAMETER	"gs_wLineType2","gs_wLineTypeAbove",
							"gs_DashLinePen","dash_line",
							"bShowRailAxis","railAxisLineType","gs_RailAxisPen"
	
			IF bShowRiseAndRunText=0 AND walkingDirUPDN_m = WALKDIRSTR_NONE OR walkl=0 THEN HIDEPARAMETER "fontType"
		ENDIF
	
	
		IF gs_SymbolType_m = 6 THEN
			HIDEPARAMETER	"gs_wLineType1","gs_wLineTypeAbove",
							"breakline_style","gs_BreakHeight",
							"gs_ArrowFillPenAbove","gs_NumBelow","gs_NumAbove",
							"gs_FillAbove","gs_cont_pen","solid_line",
							"bShowRailAxis","railAxisLineType","gs_RailAxisPen"
	
			IF bShowRiseAndRunText=0 AND walkingDirUPDN_m = WALKDIRSTR_NONE and bShowNumbering=0 OR walkl=0 and bShowNumbering=0 THEN HIDEPARAMETER "fontType"
			if not(gs_StorySensitive) | (gs_StorySensitive & not(gs_BreaklineStUp)) then
				hideparameter "gs_BreakHeight","breakline_style"
			endif
		ENDIF
	
	
		IF gs_SymbolType_m = 7 THEN
			HIDEPARAMETER	"gs_wLineType2","gs_wLineTypeAbove",
							"breakline_style","gs_BreakHeight",
							"gs_ArrowFillPenAbove","gs_NumBelow","gs_NumAbove",
							"gs_FillAbove","gs_DashLinePen","dash_line",
							"bShowRailAxis","railAxisLineType","gs_RailAxisPen"
	
			IF bShowRiseAndRunText=0 AND walkingDirUPDN_m = WALKDIRSTR_NONE and bShowNumbering=0 OR walkl=0 and bShowNumbering=0 THEN HIDEPARAMETER "fontType"
			if not(gs_StorySensitive) | (gs_StorySensitive & not(gs_BreaklineStUp)) then
				hideparameter "gs_BreakHeight","breakline_style"
			endif
		ENDIF
	
	
		IF gs_SymbolType_m = 8 THEN
			HIDEPARAMETER	"gs_wLineType2","gs_wLineTypeAbove",
							"gs_ArrowFillPenAbove","gs_NumBelow","gs_NumAbove",
							"gs_FillAbove","gs_DashLinePen","dash_line",
							"bShowRailAxis","railAxisLineType","gs_RailAxisPen"
	
			IF bShowRiseAndRunText=0 AND walkingDirUPDN_m = WALKDIRSTR_NONE OR walkl=0 THEN HIDEPARAMETER "fontType"
		ENDIF
	
	
		IF gs_SymbolType_m = 9 THEN
			HIDEPARAMETER	"gs_wLineType2","bShowRailAxis","railAxisLineType","gs_RailAxisPen"
	
			IF bShowRiseAndRunText=0 AND walkingDirUPDN_m = WALKDIRSTR_NONE OR walkl=0 THEN HIDEPARAMETER "fontType"
		ENDIF
	
	
		IF gs_SymbolType_m = 10 THEN
			HIDEPARAMETER	"gs_wLineType2","gs_wLineTypeAbove","gs_DashLinePen","dash_line",
							"bShowRailAxis","railAxisLineType","gs_RailAxisPen"
	
			IF bShowRiseAndRunText=0 AND walkingDirUPDN_m = WALKDIRSTR_NONE OR walkl=0 THEN HIDEPARAMETER "fontType"
		ENDIF
	
		IF gs_SymbolType_m = 11 THEN
			HIDEPARAMETER	"gs_wLineType2","bShowRailAxis","railAxisLineType","gs_RailAxisPen"
	
			IF bShowRiseAndRunText=0 AND walkingDirUPDN_m = WALKDIRSTR_NONE and bShowNumbering=0 OR walkl=0 and bShowNumbering=0 THEN HIDEPARAMETER "fontType"
		ENDIF
	
	
		IF gs_SymbolType_m = 12 THEN
			HIDEPARAMETER	"gs_wLineType2","gs_wLineTypeAbove","gs_DashLinePen","dash_line",
							"bShowRailAxis","railAxisLineType","gs_RailAxisPen"
	
			IF bShowRiseAndRunText=0 AND walkingDirUPDN_m = WALKDIRSTR_NONE and bShowNumbering=0 OR walkl=0 and bShowNumbering=0 THEN HIDEPARAMETER "fontType"
		ENDIF
	
	
		IF gs_SymbolType_m = 13 THEN
			HIDEPARAMETER	"gs_wLineType1","gs_wLineTypeAbove",
							"breakline_style","gs_BreakHeight",
							"gs_ArrowFillPenAbove","gs_NumBelow","gs_NumAbove",
							"gs_FillAbove","gs_cont_pen","solid_line"
	
			IF bShowRiseAndRunText=0 AND walkingDirUPDN_m = WALKDIRSTR_NONE and bShowNumbering=0 OR walkl=0 and bShowNumbering=0 THEN HIDEPARAMETER "fontType"
			if not(gs_StorySensitive) | (gs_StorySensitive & not(gs_BreaklineStUp)) then
				hideparameter "gs_BreakHeight","breakline_style"
			endif
		ENDIF
	
	
		IF gs_SymbolType_m = 14 THEN
			HIDEPARAMETER	"gs_wLineType2","gs_wLineTypeAbove",
							"breakline_style","gs_BreakHeight",
							"gs_ArrowFillPenAbove","gs_NumBelow","gs_NumAbove",
							"gs_FillAbove"
	
			IF bShowRiseAndRunText=0 AND walkingDirUPDN_m = WALKDIRSTR_NONE and bShowNumbering=0 OR walkl=0 and bShowNumbering=0 THEN HIDEPARAMETER "fontType"
			if not(gs_StorySensitive) | (gs_StorySensitive & not(gs_BreaklineStUp)) then
				hideparameter "gs_BreakHeight","breakline_style"
			endif
		ENDIF
	
	
		IF gs_SymbolType_m = 15 THEN
			HIDEPARAMETER	"gs_wLineType2","gs_wLineTypeAbove",
							"gs_ArrowFillPenAbove","gs_NumBelow","gs_NumAbove",
							"gs_FillAbove"
	
			IF bShowRiseAndRunText=0 AND walkingDirUPDN_m = WALKDIRSTR_NONE OR walkl=0 THEN HIDEPARAMETER "fontType"
		ENDIF
	
	
		IF gs_SymbolType_m = 16 THEN
			HIDEPARAMETER	"gs_wLineType2"
	
			IF bShowRiseAndRunText=0 AND walkingDirUPDN_m = WALKDIRSTR_NONE OR walkl=0 THEN HIDEPARAMETER "fontType"
		ENDIF
	
	
		IF gs_SymbolType_m = 17 THEN
			HIDEPARAMETER	"gs_wLineType2","gs_wLineTypeAbove"
	
			IF bShowRiseAndRunText=0 AND walkingDirUPDN_m = WALKDIRSTR_NONE OR walkl=0 THEN HIDEPARAMETER "fontType"
		ENDIF
	
	
		IF gs_SymbolType_m = 18 THEN
			HIDEPARAMETER	"gs_wLineType2"
	
			IF bShowRiseAndRunText=0 AND walkingDirUPDN_m = WALKDIRSTR_NONE and bShowNumbering=0 OR walkl=0 and bShowNumbering=0 THEN HIDEPARAMETER "fontType"
		ENDIF
	
	
		IF gs_SymbolType_m = 19 THEN
			HIDEPARAMETER	"gs_wLineType2"
	
			IF bShowRiseAndRunText=0 AND walkingDirUPDN_m = WALKDIRSTR_NONE and bShowNumbering=0 OR walkl=0 and bShowNumbering=0 THEN HIDEPARAMETER "fontType"
		ENDIF
	
	
		IF gs_SymbolType_m = 20 THEN
			HIDEPARAMETER	"gs_wLineType2","gs_wLineTypeAbove"
	
			IF bShowRiseAndRunText=0 AND walkingDirUPDN_m = WALKDIRSTR_NONE and bShowNumbering=0 OR walkl=0 and bShowNumbering=0 THEN HIDEPARAMETER "fontType"
		ENDIF
	endif

! ==============================================================================
! mm / point conversion
! ==============================================================================

MM_IN_A_DOT = 25.4 / 72

if GLOB_MODPAR_NAME = "gs_text_size_pt_UpDn" then
	UPDNfontsize = gs_text_size_pt_UpDn * MM_IN_A_DOT
	parameters UPDNfontsize = UPDNfontsize
else
	gs_text_size_pt_UpDn = UPDNfontsize / MM_IN_A_DOT
	parameters gs_text_size_pt_UpDn = gs_text_size_pt_UpDn
endif

if GLOB_MODPAR_NAME = "gs_text_size_pt" then
	fontsize = gs_text_size_pt * MM_IN_A_DOT
	parameters fontsize = fontsize
else
	gs_text_size_pt = fontsize / MM_IN_A_DOT
	parameters gs_text_size_pt = gs_text_size_pt
endif

if GLOB_MODPAR_NAME = "gs_text_size_pt_num" then
	gs_NumTextSize = gs_text_size_pt_num * MM_IN_A_DOT
	parameters gs_NumTextSize = gs_NumTextSize
else
	gs_text_size_pt_num = gs_NumTextSize / MM_IN_A_DOT
	parameters gs_text_size_pt_num = gs_text_size_pt_num
endif

! --- Connecting integer and section pencolor type parameters ---

dim iPenNumber[255]
for i=1 to 255
	iPenNumber[i]=i
next i

values "gs_cont_pen"		iPenNumber
values "gs_DashLinePen"		iPenNumber
values "railPen"			iPenNumber
values "gs_RailAxisPen"		iPenNumber
values "postPen"			iPenNumber
values "gs_fill_pen"		iPenNumber
values "gs_wLinePen"		iPenNumber
values "gs_NumTextPen"		iPenNumber
values "gs_text_pen"		iPenNumber
values "UPDNfontpen"		iPenNumber
values "gs_LinePenStUp"		iPenNumber
values "penLineStringer" 	iPenNumber
values "penFillStringer" 	iPenNumber
values "penLineTread" 		iPenNumber
values "penFillTread" 		iPenNumber
values "penLineRiser" 		iPenNumber
values "penFillRiser" 		iPenNumber

if GLOB_MODPAR_NAME = "penLineStringer_m" then
	if penLineStringer_m < -1 | penLineStringer_m > 255 then
		penLineStringer_m = 1
		parameters penLineStringer_m = penLineStringer_m
	endif
	parameters penLineStringer = penLineStringer_m
else
	parameters penLineStringer_m = penLineStringer
endif
if GLOB_MODPAR_NAME = "penFillStringer_m" then
	if penFillStringer_m < -1 | penFillStringer_m > 255 then
		penFillStringer_m = 1
		parameters penFillStringer_m = penFillStringer_m
	endif
	parameters penFillStringer = penFillStringer_m
else
	parameters penFillStringer_m = penFillStringer
endif

if GLOB_MODPAR_NAME = "penLineTread_m" then
	if penLineTread_m < 1 | penLineTread_m > 255 then
		penLineTread_m = 1
		parameters penLineTread_m = penLineTread_m
	endif
	parameters penLineTread = penLineTread_m
else
	parameters penLineTread_m = penLineTread
endif
if GLOB_MODPAR_NAME = "penFillTread_m" then
	if penFillTread_m < 1 | penFillTread_m > 255 then
		penFillTread_m = 1
		parameters penFillTread_m = penFillTread_m
	endif
	parameters penFillTread = penFillTread_m
else
	parameters penFillTread_m = penFillTread
endif

if GLOB_MODPAR_NAME = "penLineRiser_m" then
	if penLineRiser_m < 1 | penLineRiser_m > 255 then
		penLineRiser_m = 1
		parameters penLineRiser_m = penLineRiser_m
	endif
	parameters penLineRiser = penLineRiser_m
else
	parameters penLineRiser_m = penLineRiser
endif
if GLOB_MODPAR_NAME = "penFillRiser_m" then
	if penFillRiser_m < 1 | penFillRiser_m > 255 then
		penFillRiser_m = 1
		parameters penFillRiser_m = penFillRiser_m
	endif
	parameters penFillRiser = penFillRiser_m
else
	parameters penFillRiser_m = penFillRiser
endif

if GLOB_MODPAR_NAME = "penBackFillStringer_m" then
	if penBackFillStringer_m < -1 | penBackFillStringer_m > 255 then
		penBackFillStringer_m = 1
		parameters penBackFillStringer_m = penBackFillStringer_m
	endif
	parameters penBackFillStringer = penBackFillStringer_m
else
	parameters penBackFillStringer_m = penBackFillStringer
endif

if GLOB_MODPAR_NAME = "penBackFillTread_m" then
	if penBackFillTread_m < -1 | penBackFillTread_m > 255 then
		penBackFillTread_m = 1
		parameters penBackFillTread_m = penBackFillTread_m
	endif
	parameters penBackFillTread = penBackFillTread_m
else
	parameters penBackFillTread_m = penBackFillTread
endif

if GLOB_MODPAR_NAME = "penBackFillRiser_m" then
	if penBackFillRiser_m < -1 | penBackFillRiser_m > 255 then
		penBackFillRiser_m = 1
		parameters penBackFillRiser_m = penBackFillRiser_m
	endif
	parameters penBackFillRiser = penBackFillRiser_m
else
	parameters penBackFillRiser_m = penBackFillRiser
endif

! =============================================================================
! Onorm list Settings
! =============================================================================

if LibraryLangCode = "AUT" or LibraryLangCode = "CHE" or LibraryLangCode = "GER" then
	call "Onorm_Stair" parameters all matTread = mat_tread
else
	hideparameter "gs_onorm_Title", "gs_list_soundinsul"
endif

! =============================================================================
! IFC2x3 Property Set for Stairs
! =============================================================================

QUARTER_WINDING_STAIR = 3
parameters ifc_StairType 		= QUARTER_WINDING_STAIR
parameters ifc_NumberOfRiser 	= rnu
parameters ifc_NumberOfTreads 	= rnu
parameters ifc_RiserHeight		= th
parameters ifc_TreadLength		= td


]]>
</Script_VL>

<Comment SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Comment>

<ParamSection SectVersion="22" SectionFlags="0" SubIdent="0">
	<ParamSectHeader>
		<AutoHotspots>false</AutoHotspots>
		<StatBits>
			<STBit_UIDefault/>
			<STBit_FixSize/>
			<STBit_UIUseHierarchicalPages/>
		</StatBits>
		<WDLeftFrame>0</WDLeftFrame>
		<WDRightFrame>0</WDRightFrame>
		<WDTopFrame>0</WDTopFrame>
		<WDBotFrame>0</WDBotFrame>
		<LayFlags>0</LayFlags>
		<WDMirrorThickness>0</WDMirrorThickness>
		<WDWallInset>0</WDWallInset>
	</ParamSectHeader>
	<Parameters>
		<Length Name="A">
			<Description><![CDATA["Размер 1"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Unique/>
			</Flags>
			<Value>3.7</Value>
		</Length>
		<Length Name="B">
			<Description><![CDATA["Размер 2"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Unique/>
			</Flags>
			<Value>3.7</Value>
		</Length>
		<Length Name="ZZYZX">
			<Description><![CDATA["Высота"]]></Description>
			<Fix/>
			<Value>3.1</Value>
		</Length>
		<Integer Name="gs_detlevel_3D_m">
			<Description><![CDATA["3D"]]></Description>
			<Value>2</Value>
		</Integer>
		<Boolean Name="cfs">
			<Description><![CDATA["Вызов как Макрос из Лестницы"]]></Description>
			<Flags>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Boolean>

		<!-- LStair_sp0: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="LStair_sp0">
			<Description><![CDATA["Параметры Марша"]]></Description>
		</Title>
		<Length Name="flw">
			<Description><![CDATA["Ширина Марша"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1.2</Value>
		</Length>
		<Length Name="lx">
			<Description><![CDATA["Ширина Верхнего Марша"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>2.5</Value>
		</Length>
		<Length Name="ly">
			<Description><![CDATA["Ширина Нижнего Марша"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>2.5</Value>
		</Length>
		<Length Name="sst">
			<Description><![CDATA["Толщина Плиты Лестницы"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0.212</Value>
		</Length>
		<Length Name="lst2">
			<Description><![CDATA["Толщина Плиты Внизу"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0.25</Value>
		</Length>
		<Length Name="lst">
			<Description><![CDATA["Толщина Плиты Вверху"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0.25</Value>
		</Length>

		<!-- LStair_sp1: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="LStair_sp1">
			<Description><![CDATA["Размеры Подступенков и Проступей"]]></Description>
		</Title>
		<Length Name="td">
			<Description><![CDATA["Глубина Ступени"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0.382497532897</Value>
		</Length>
		<Length Name="th">
			<Description><![CDATA["Высота Ступени"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0.172222222222</Value>
		</Length>
		<Integer Name="rnu">
			<Description><![CDATA["Количество Подступенков"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>18</Value>
		</Integer>
		<Length Name="jvon">
			<Description><![CDATA["Линия Всхода"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>6.88495559215</Value>
		</Length>
		<Boolean Name="cover">
			<Description><![CDATA["Защитный Слой Проступи"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Length Name="covthick">
			<Description><![CDATA["Толщина Защитного Слоя Проступи"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Boolean Name="covery">
			<Description><![CDATA["Защитный Слой Подступенка"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Length Name="covthicky">
			<Description><![CDATA["Толщина Защитного Слоя Подступенка"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0.03</Value>
		</Length>
		<Length Name="ns">
			<Description><![CDATA["Выступ"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0.02</Value>
		</Length>
		<Integer Name="rail_m">
			<Description><![CDATA["Ограждение"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>

		<!-- bRightRail: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Boolean Name="bRightRail">
			<Description><![CDATA["Ограждение Справа"]]></Description>
			<Flags>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<String Name="rightRailType">
			<Description><![CDATA["Тип Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Балюстрада Ограждения"]]></Value>
		</String>
		<Integer Name="rightRailType_m">
			<Description><![CDATA["Тип Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<String Name="ggr">
			<Description><![CDATA["Конструктивные Размеры"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<Length Name="hrr">
			<Description><![CDATA["Высота Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.8</Value>
		</Length>
		<Length Name="dsr">
			<Description><![CDATA["Расстояние от Перекрытия/Лестницы"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.1</Value>
		</Length>
		<Length Name="roffr">
			<Description><![CDATA["Смещение Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<String Name="sgr">
			<Description><![CDATA["Размеры Элементов Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<Length Name="fswr">
			<Description><![CDATA["Ширина Рамы по Бокам"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.1</Value>
		</Length>
		<Length Name="fthr">
			<Description><![CDATA["Толщина Рамы/Бруска"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.04</Value>
		</Length>
		<Length Name="ftwr">
			<Description><![CDATA["Ширина Рамы Вверху"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Length Name="fbwr">
			<Description><![CDATA["Ширина Рамы Внизу"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Length Name="abdistr">
			<Description><![CDATA["Приблизительный Шаг Балясин"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.15</Value>
		</Length>
		<Length Name="fdfr">
			<Description><![CDATA["Расстояние от Рамы до Экрана"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Length Name="bhr">
			<Description><![CDATA["Высота Бруска"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.1</Value>
		</Length>
		<String Name="btypr">
			<Description><![CDATA["Стиль Бруска"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Прямоугольные"]]></Value>
		</String>
		<String Name="hrtr">
			<Description><![CDATA["Стиль Поручня"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA["Прямоугольные"]]></Value>
		</String>
		<Length Name="hrdr">
			<Description><![CDATA["Диаметр Поручня"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.06</Value>
		</Length>
		<Length Name="hrwr">
			<Description><![CDATA["Ширина Поручня"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Length Name="hrhr">
			<Description><![CDATA["Толщина Поручня"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Length Name="hror">
			<Description><![CDATA["Выступ Поручня"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<String Name="ptr">
			<Description><![CDATA["Стиль Стойки/Балясины"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA["Прямоугольные"]]></Value>
		</String>
		<Integer Name="npr">
			<Description><![CDATA["Количество Стоек/Балясин"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>3</Value>
		</Integer>
		<Integer Name="nbtr">
			<Description><![CDATA["Количество Балясин"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>9</Value>
		</Integer>
		<Length Name="pdr">
			<Description><![CDATA["Диаметр Стойки"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.035</Value>
		</Length>
		<Length Name="pwr">
			<Description><![CDATA["Ширина Стоек"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.035</Value>
		</Length>
		<Length Name="pthr">
			<Description><![CDATA["Толщина Стоек"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.035</Value>
		</Length>
		<String Name="btr">
			<Description><![CDATA["Стиль Доски"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA["Прямоугольные"]]></Value>
		</String>
		<Integer Name="nbr">
			<Description><![CDATA["Количество Брусков"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>4</Value>
		</Integer>
		<Length Name="bwr">
			<Description><![CDATA["Ширина Балясины"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.025</Value>
		</Length>
		<Length Name="bthr">
			<Description><![CDATA["Толщина Балясины/Панели"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.025</Value>
		</Length>
		<Length Name="bdr">
			<Description><![CDATA["Диаметр Бруска"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Length Name="sbhr">
			<Description><![CDATA["Высота суб-доски"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.15</Value>
		</Length>

		<!-- bLeftRail: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Boolean Name="bLeftRail">
			<Description><![CDATA["Ограждение Слева"]]></Description>
			<Flags>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<String Name="leftRailType">
			<Description><![CDATA["Тип Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Как и Правое"]]></Value>
		</String>
		<Integer Name="leftRailType_m">
			<Description><![CDATA["Тип Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>11</Value>
		</Integer>
		<Boolean Name="bSameRails">
			<Description><![CDATA["Как и Правое Ограждение"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<String Name="ggl">
			<Description><![CDATA["Конструктивные Размеры"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<Length Name="hrl">
			<Description><![CDATA["Высота Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.8</Value>
		</Length>
		<Length Name="dsl">
			<Description><![CDATA["Расстояние от Перекрытия/Лестницы"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.1</Value>
		</Length>
		<Length Name="roffl">
			<Description><![CDATA["Смещение Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<String Name="sgl">
			<Description><![CDATA["Размеры Элементов Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<Length Name="fswl">
			<Description><![CDATA["Ширина Рамы по Бокам"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.1</Value>
		</Length>
		<Length Name="fthl">
			<Description><![CDATA["Толщина Рамы/Бруска"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.04</Value>
		</Length>
		<Length Name="ftwl">
			<Description><![CDATA["Ширина Рамы Вверху"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Length Name="fbwl">
			<Description><![CDATA["Ширина Рамы Внизу"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Length Name="bwl">
			<Description><![CDATA["Ширина Балясины"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.025</Value>
		</Length>
		<Length Name="bthl">
			<Description><![CDATA["Толщина Балясины/Панели"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.025</Value>
		</Length>
		<Length Name="abdistl">
			<Description><![CDATA["Приблизительный Шаг Балясин"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.15</Value>
		</Length>
		<Length Name="fdfl">
			<Description><![CDATA["Расстояние от Рамы до Экрана"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Length Name="bhl">
			<Description><![CDATA["Высота Бруска"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.1</Value>
		</Length>
		<Length Name="bdl">
			<Description><![CDATA["Диаметр Бруска"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Integer Name="nbl">
			<Description><![CDATA["Количество Брусков"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>4</Value>
		</Integer>
		<String Name="btypl">
			<Description><![CDATA["Стиль Бруска"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Прямоугольные"]]></Value>
		</String>
		<String Name="hrtl">
			<Description><![CDATA["Стиль Поручня"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA["Прямоугольные"]]></Value>
		</String>
		<Length Name="hrdl">
			<Description><![CDATA["Диаметр Поручня"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.06</Value>
		</Length>
		<Length Name="hrwl">
			<Description><![CDATA["Ширина Поручня"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Length Name="hrhl">
			<Description><![CDATA["Толщина Поручня"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.025</Value>
		</Length>
		<Length Name="hrol">
			<Description><![CDATA["Выступ Поручня"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<String Name="ptl">
			<Description><![CDATA["Стиль Стойки/Балясины"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA["Прямоугольные"]]></Value>
		</String>
		<Integer Name="npl">
			<Description><![CDATA["Количество Стоек/Балясин"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>3</Value>
		</Integer>
		<Integer Name="nbtl">
			<Description><![CDATA["Количество Балясин"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>9</Value>
		</Integer>
		<Length Name="pdl">
			<Description><![CDATA["Диаметр Стойки"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.035</Value>
		</Length>
		<Length Name="pwl">
			<Description><![CDATA["Ширина Стоек"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.035</Value>
		</Length>
		<Length Name="pthl">
			<Description><![CDATA["Толщина Стоек"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.035</Value>
		</Length>
		<Length Name="sbhl">
			<Description><![CDATA["Высота суб-доски"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.15</Value>
		</Length>
		<String Name="btl">
			<Description><![CDATA["Стиль Доски"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA["Прямоугольные"]]></Value>
		</String>

		<!-- gs_3D_representation: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_3D_representation">
			<Description><![CDATA["3D-отображение"]]></Description>
		</Title>
		<Integer Name="res">
			<Description><![CDATA["Аппроксимация"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>32</Value>
		</Integer>
		<Integer Name="rescs">
			<Description><![CDATA["Аппроксимация Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>8</Value>
		</Integer>
		<Boolean Name="gs_shadow">
			<Description><![CDATA["Отбрасывание Теней"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="AC_show2DHotspotsIn3D">
			<Description><![CDATA["Показ Узловых 2D Точек в 3D"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Length Name="ac_bottomlevel">
			<Description><![CDATA["Отметка Низа"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Length>
		<Length Name="ac_toplevel">
			<Description><![CDATA["Отметка Верха"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>

		<!-- gs_2D_representation: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_2D_representation">
			<Description><![CDATA["2D-отображение"]]></Description>
			<Fix/>
		</Title>
		<Integer Name="gs_detlevel_2D_m">
			<Description><![CDATA["2D-детализация"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Integer Name="iScaleChangeSM">
			<Description><![CDATA["Простой/Средний Масштаб изменяется в"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>999</Value>
		</Integer>
		<Integer Name="gs_ScaleChangeSM">
			<Description><![CDATA["Простой/Средний Масштаб изменяется в"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>100</Value>
		</Integer>
		<Integer Name="iScaleChangeMD">
			<Description><![CDATA["Средний/Детальный Масштаб изменяется в"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>999</Value>
		</Integer>
		<Integer Name="gs_ScaleChangeMD">
			<Description><![CDATA["Средний/Детальный Масштаб изменяется в"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>50</Value>
		</Integer>

		<!-- Symbol2D: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="Symbol2D">
			<Description><![CDATA["2D-символ"]]></Description>
		</Title>
		<Integer Name="gs_SymbolType_m">
			<Description><![CDATA["Тип 2D-символа"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>11</Value>
		</Integer>
		<Integer Name="iSymbolGroup">
			<Description><![CDATA["Тип Группы Символа"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>6</Value>
		</Integer>
		<Boolean Name="gs_2DTread">
			<Description><![CDATA["Показать Проступи"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="gs_2DTreadAbove">
			<Description><![CDATA["Показать Проступи Выше"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="gs_2DRiserAbove">
			<Description><![CDATA["Показать Подступенки Выше"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="gs_2DContourAbove">
			<Description><![CDATA["Показать Линию Контура Выше"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="gs_2DContourBelow">
			<Description><![CDATA["Показать Линию Контура Ниже"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<PenColor Name="gs_cont_pen">
			<Description><![CDATA["Перо Линий Видимых Конструкций"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>91</Value>
		</PenColor>
		<PenColor Name="gs_DashLinePen">
			<Description><![CDATA["Перо Линий Невидимых Конструкций"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>91</Value>
		</PenColor>
		<LineType Name="solid_line">
			<Description><![CDATA["Тип Линий Видимых Конструкций"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</LineType>
		<LineType Name="dash_line">
			<Description><![CDATA["Тип Линий Невидимых Конструкций"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>4</Value>
		</LineType>
		<Boolean Name="bShowRailOnFloorPlan">
			<Description><![CDATA["Показать Ограждение на Плане"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<LineType Name="railLineType">
			<Description><![CDATA["Тип Линии Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</LineType>
		<PenColor Name="railPen">
			<Description><![CDATA["Перо Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>91</Value>
		</PenColor>
		<Boolean Name="bSymbolic2D">
			<Description><![CDATA["Символический 2D"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<String Name="postSymbolType">
			<Description><![CDATA["Тип Символа Стойки"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Тип 1"]]></Value>
		</String>
		<Integer Name="iPostSymbolType">
			<Description><![CDATA["Тип Символа Стойки"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<LineType Name="postLineType">
			<Description><![CDATA["Тип Линии Стойки"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</LineType>
		<PenColor Name="postPen">
			<Description><![CDATA["Перо Линии Стойки"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>23</Value>
		</PenColor>
		<Boolean Name="bShowRailAboveBreakLine">
			<Description><![CDATA["Показать Ограждение выше Линии Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<FillPattern Name="gs_fill_type">
			<Description><![CDATA["Штриховка Фона"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>65</Value>
		</FillPattern>
		<FillPattern Name="gs_FillTypeAbove">
			<Description><![CDATA["Штриховка Фона"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>65</Value>
		</FillPattern>
		<PenColor Name="gs_fill_pen">
			<Description><![CDATA["Перо Штриховки"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>19</Value>
		</PenColor>
		<PenColor Name="gs_back_pen">
			<Description><![CDATA["Перо Фона Штриховки"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>19</Value>
		</PenColor>
		<Boolean Name="gs_FillAbove">
			<Description><![CDATA["Штриховка Выше Линии Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="brk">
			<Description><![CDATA["Линия Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<String Name="breakline_style">
			<Description><![CDATA["Стиль Линии Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA["Прямой"]]></Value>
		</String>
		<Integer Name="breakline_style_m">
			<Description><![CDATA["Стиль Линии Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Boolean Name="bSimpleZigZag">
			<Description><![CDATA["Линия Разрыва в виде Простого Зигзага"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Length Name="gs_BreakHeight">
			<Description><![CDATA["Расположение Линии Разрыва (Высота)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Length>
		<Length Name="brkLineY">
			<Description><![CDATA["Ширина Линии Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.2</Value>
		</Length>
		<Boolean Name="walkl">
			<Description><![CDATA["Показать Линию Всхода"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<LineType Name="gs_wLineType1">
			<Description><![CDATA["Тип Линии"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</LineType>
		<LineType Name="gs_wLineType2">
			<Description><![CDATA["Тип Линии"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>6</Value>
		</LineType>
		<LineType Name="gs_wLineTypeAbove">
			<Description><![CDATA["Тип Линии выше Линии Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>6</Value>
		</LineType>
		<PenColor Name="gs_wLinePen">
			<Description><![CDATA["Перо Линии"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>71</Value>
		</PenColor>
		<String Name="arrow_style">
			<Description><![CDATA["Стиль Стрелки"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA["Стиль 3"]]></Value>
		</String>
		<Integer Name="arrow_style_m">
			<Description><![CDATA["Стиль Стрелки"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>3</Value>
		</Integer>
		<FillPattern Name="gs_ArrowFill">
			<Description><![CDATA["Тип Штриховки Стрелки"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>64</Value>
		</FillPattern>
		<PenColor Name="gs_ArrowFillPen">
			<Description><![CDATA["Перо Штриховки (0 - нет)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>19</Value>
		</PenColor>
		<PenColor Name="gs_ArrowFillPenAbove">
			<Description><![CDATA["Перо Штриховки Выше (0 - Нет)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</PenColor>
		<Length Name="gs_ArrowHeight">
			<Description><![CDATA["Высота Стрелки"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.2</Value>
		</Length>
		<Length Name="gs_ArrowHalfWidth">
			<Description><![CDATA["Половина Ширины Стрелки"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.2</Value>
		</Length>
		<String Name="gs_StartEndStyle">
			<Description><![CDATA["Символ в Начале"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA["Стиль 1"]]></Value>
		</String>
		<Integer Name="gs_StartEndStyle_m">
			<Description><![CDATA["Символ в Начале"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<FillPattern Name="gs_StartEndFill">
			<Description><![CDATA["Тип Штриховки Символа"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>64</Value>
		</FillPattern>
		<PenColor Name="gs_StartEndFillPen">
			<Description><![CDATA["Перо Штриховки (0 - нет)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</PenColor>
		<Length Name="gs_CircleRadius">
			<Description><![CDATA["Радиус Окружности"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.1</Value>
		</Length>
		<Length Name="gs_StartWidth">
			<Description><![CDATA["Половина Ширины Символа"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Length Name="gs_StartHeight">
			<Description><![CDATA["Половина Высоты Символа"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.2</Value>
		</Length>
		<Boolean Name="bShowNumbering">
			<Description><![CDATA["Показать Нумерацию"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Integer Name="nStartNumbering">
			<Description><![CDATA["Начать Нумерацию с"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Integer>
		<Boolean Name="gs_NumBelow">
			<Description><![CDATA["Нумерация ниже Линии Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="gs_NumAbove">
			<Description><![CDATA["Нумерация выше Линии Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<RealNum Name="gs_NumTextSize">
			<Description><![CDATA["Размер Шрифта (мм)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</RealNum>
		<RealNum Name="gs_text_size_pt_num">
			<Description><![CDATA["Размер Шрифта (пт)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>2.83</Value>
		</RealNum>
		<PenColor Name="gs_NumTextPen">
			<Description><![CDATA["Перо Текста"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>86</Value>
		</PenColor>
		<Length Name="DirNumText_X">
			<Description><![CDATA["Расположение Нумерации по X"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.1</Value>
		</Length>
		<Length Name="DirNumText_Y">
			<Description><![CDATA["Расположение Нумерации по Y"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<String Name="typeTextRotation_Num">
			<Description><![CDATA["Ориентация Текста в Символе"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Выровнять по Символу"]]></Value>
		</String>
		<Integer Name="typeTextRotation_Num_m">
			<Description><![CDATA["Ориентация Текста в Символе"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Integer>
		<Boolean Name="bShowRiseAndRunText">
			<Description><![CDATA["Текст Подступенков и Проступей"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<String Name="gs_RiseRunText">
			<Description><![CDATA["Текст"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Кол-во x Подступенок = Высота Марша"]]></Value>
		</String>
		<Integer Name="iRiseRunText">
			<Description><![CDATA["Текст"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<String Name="gs_CustomText1">
			<Description><![CDATA["Специальный Текст_1"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Специальный Текст_1"]]></Value>
		</String>
		<String Name="gs_CustomText2">
			<Description><![CDATA["Специальный Текст_2"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Специальный Текст_2"]]></Value>
		</String>
		<String Name="gs_customText_rise">
			<Description><![CDATA["Текст Подступенка"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["П"]]></Value>
		</String>
		<RealNum Name="tdfs">
			<Description><![CDATA["Размер Шрифта (мм)"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</RealNum>
		<RealNum Name="fontsize">
			<Description><![CDATA["Размер Шрифта (мм)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</RealNum>
		<RealNum Name="gs_text_size_pt">
			<Description><![CDATA["Размер Шрифта (пт)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>2.83</Value>
		</RealNum>
		<PenColor Name="gs_text_pen">
			<Description><![CDATA["Перо Текста"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>86</Value>
		</PenColor>
		<Boolean Name="bUseACLinearUnit">
			<Description><![CDATA["Единицы Измерения Рабочей Среды Проекта"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Length Name="DirRiseRunText_X">
			<Description><![CDATA["Текст Подступенков и Проступей по X"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="DirRiseRunText_Y">
			<Description><![CDATA["Текст Подступенков и Проступей по Y"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.8</Value>
		</Length>
		<Angle Name="DirRiseRunAngle">
			<Description><![CDATA["Угол Поворота Текста Подступенков и Проступей"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Angle>
		<String Name="typeTextRotation_RiseRun">
			<Description><![CDATA["Ориентация Текста в Символе"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Читаемый"]]></Value>
		</String>
		<Integer Name="typeTextRotation_RiseRun_m">
			<Description><![CDATA["Ориентация Текста в Символе"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>2</Value>
		</Integer>
		<String Name="walkingDirUPDN">
			<Description><![CDATA["Размер Текста ВВЕРХ/ВНИЗ"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA["Нет"]]></Value>
		</String>
		<Integer Name="walkingDirUPDN_m">
			<Description><![CDATA["Размер Текста ВВЕРХ/ВНИЗ"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<RealNum Name="UPDNfontsize">
			<Description><![CDATA["Размер Текста ВВЕРХ/ВНИЗ (мм)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>2</Value>
		</RealNum>
		<RealNum Name="gs_text_size_pt_UpDn">
			<Description><![CDATA["Размер Текста ВВЕРХ/ВНИЗ (точки)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>5.66</Value>
		</RealNum>
		<PenColor Name="UPDNfontpen">
			<Description><![CDATA["Текст ВВЕРХ/ВНИЗ"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>86</Value>
		</PenColor>
		<Length Name="DirUPDN_X">
			<Description><![CDATA["Расположение Текста ВВЕРХ/ВНИЗ по Х"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="DirUPDN_Y">
			<Description><![CDATA["Расположение Текста ВВЕРХ/ВНИЗ по Y"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>-0.2</Value>
		</Length>
		<Angle Name="AngUPDN">
			<Description><![CDATA["Угол Текста ВВЕРХ/ВНИЗ"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Angle>
		<String Name="typeTextRotation_UpDn">
			<Description><![CDATA["Ориентация Текста в Символе"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Выровнять по Символу"]]></Value>
		</String>
		<Integer Name="typeTextRotation_UpDn_m">
			<Description><![CDATA["Ориентация Текста в Символе"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Integer>
		<String Name="fontType">
			<Description><![CDATA["Тип Шрифта"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value><![CDATA["Arial"]]></Value>
		</String>
		<Boolean Name="bShowRailAxis">
			<Description><![CDATA["Показать Ось Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<LineType Name="railAxisLineType">
			<Description><![CDATA["Тип Линии Оси Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>6</Value>
		</LineType>
		<PenColor Name="gs_RailAxisPen">
			<Description><![CDATA["Перо Линии Оси Ограждения"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>71</Value>
		</PenColor>
		<Boolean Name="gs_StorySensitive">
			<Description><![CDATA["Зависит от Этажа"]]></Description>
			<Flags>
				<ParFlg_BoldName/>
			</Flags>
			<Value>0</Value>
		</Boolean>

		<!-- gs_AboveHomeStory: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_AboveHomeStory">
			<Description><![CDATA["2D выше Собственного Этажа"]]></Description>
		</Title>
		<Boolean Name="gs_BreaklineStUp">
			<Description><![CDATA["Линия Разрыва"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="gs_LowerPartStUp">
			<Description><![CDATA["Нижняя Часть"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="gs_UpperPartStUp">
			<Description><![CDATA["Верхняя Часть"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="gs_TreadStUp">
			<Description><![CDATA["Показать Проступи"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<LineType Name="gs_LineTypeStUp">
			<Description><![CDATA["Тип Линии"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</LineType>
		<PenColor Name="gs_LinePenStUp">
			<Description><![CDATA["Перо Линии"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>71</Value>
		</PenColor>
		<LineType Name="gs_wLineTypeStUp">
			<Description><![CDATA["Тип Линии Всхода"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</LineType>
		<Boolean Name="gs_numaStUp">
			<Description><![CDATA["Показать Нумерацию"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="gs_txStUp">
			<Description><![CDATA["Текст Подступенков и Проступей"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>

		<!-- gs_section_attributes: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_section_attributes">
			<Description><![CDATA["Реквизиты Сечения"]]></Description>
		</Title>
		<PenColor Name="penLineStringer">
			<Description><![CDATA["Перо Контура Сечения Конструкций"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>29</Value>
		</PenColor>
		<Integer Name="penLineStringer_m">
			<Description><![CDATA["Перо Контура Сечения Конструкций"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>29</Value>
		</Integer>
		<FillPattern Name="typeFillStringer">
			<Description><![CDATA["Штриховка Сечения Конструкций"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>24</Value>
		</FillPattern>
		<PenColor Name="penFillStringer">
			<Description><![CDATA["Перо Штриховки Сечения Конструкций"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>109</Value>
		</PenColor>
		<Integer Name="penFillStringer_m">
			<Description><![CDATA["Перо Штриховки Сечения Конструкций"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>109</Value>
		</Integer>
		<PenColor Name="penBackFillStringer">
			<Description><![CDATA["Перо Фона Штриховки Сечения Конструкций"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</PenColor>
		<Integer Name="penBackFillStringer_m">
			<Description><![CDATA["Перо Фона Штриховки Сечения Конструкций"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Integer>
		<PenColor Name="penLineTread">
			<Description><![CDATA["Перо Контура Сечения Проступи"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1</Value>
		</PenColor>
		<Integer Name="penLineTread_m">
			<Description><![CDATA["Перо Контура Сечения Проступи"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<FillPattern Name="typeFillTread">
			<Description><![CDATA["Штриховка Сечения Проступи"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>23</Value>
		</FillPattern>
		<PenColor Name="penFillTread">
			<Description><![CDATA["Перо Штриховки Сечения Проступи"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>109</Value>
		</PenColor>
		<Integer Name="penFillTread_m">
			<Description><![CDATA["Перо Штриховки Сечения Проступи"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>109</Value>
		</Integer>
		<PenColor Name="penBackFillTread">
			<Description><![CDATA["Перо Фона Штриховки Сечения Проступи"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>-1</Value>
		</PenColor>
		<Integer Name="penBackFillTread_m">
			<Description><![CDATA["Перо Фона Штриховки Сечения Проступи"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>-1</Value>
		</Integer>
		<PenColor Name="penLineRiser">
			<Description><![CDATA["Перо Контура Сечения Подступенка"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1</Value>
		</PenColor>
		<Integer Name="penLineRiser_m">
			<Description><![CDATA["Перо Контура Сечения Подступенка"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<FillPattern Name="typeFillRiser">
			<Description><![CDATA["Штриховка Сечения Подступенка"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>23</Value>
		</FillPattern>
		<PenColor Name="penFillRiser">
			<Description><![CDATA["Перо Штриховки Сечения Подступенка"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>109</Value>
		</PenColor>
		<Integer Name="penFillRiser_m">
			<Description><![CDATA["Перо Штриховки Сечения Подступенка"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>109</Value>
		</Integer>
		<PenColor Name="penBackFillRiser">
			<Description><![CDATA["Перо Фона Штриховки Сечения Подступенка"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>-1</Value>
		</PenColor>
		<Integer Name="penBackFillRiser_m">
			<Description><![CDATA["Перо Фона Штриховки Сечения Подступенка"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>-1</Value>
		</Integer>

		<!-- gs_materials: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_materials">
			<Description><![CDATA["Покрытия"]]></Description>
		</Title>
		<Material Name="matb">
			<Description><![CDATA["Плита Лестницы"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>4</Value>
		</Material>
		<Material Name="mat_tread">
			<Description><![CDATA["Проступь"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>18</Value>
		</Material>
		<Material Name="mat_riser">
			<Description><![CDATA["Подступенок"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>18</Value>
		</Material>
		<Material Name="pmatr">
			<Description><![CDATA["Стойка Справа"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>15</Value>
		</Material>
		<Material Name="fmatr">
			<Description><![CDATA["Рама Справа"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>15</Value>
		</Material>
		<Material Name="bmatr">
			<Description><![CDATA["Балясина/Панель Справа"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>15</Value>
		</Material>
		<Material Name="pmatl">
			<Description><![CDATA["Стойка Слева"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>15</Value>
		</Material>
		<Material Name="fmatl">
			<Description><![CDATA["Рама Слева"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>15</Value>
		</Material>
		<Material Name="bmatl">
			<Description><![CDATA["Балясина/Панель Слева"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>15</Value>
		</Material>
		<Integer Name="hrtr_m">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Integer Name="hrtl_m">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Integer Name="btypr_m">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Integer Name="btypl_m">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Integer Name="ptr_m">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Integer Name="ptl_m">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Integer Name="btr_m">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Integer Name="btl_m">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Length Name="fth">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="bh">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="bd">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="hrd">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="hrw">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="hrh">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="pd">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="pw">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="pth">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="bth">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="bw">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="sbh">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Angle Name="gs_readable_angle">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>90</Value>
		</Angle>

		<!-- gs_list: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_list">
			<Description><![CDATA["Параметры Спецификаций"]]></Description>
			<Fix/>
		</Title>
		<RealNum Name="gs_list_cost">
			<Description><![CDATA["Цена"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<String Name="gs_list_manufacturer">
			<Description><![CDATA["Производитель"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_note">
			<Description><![CDATA["Примечания"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_location">
			<Description><![CDATA["Расположение"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_accessories">
			<Description><![CDATA["Аксессуары"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_soundinsul">
			<Description><![CDATA["Звукоизоляция"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="FM_Type">
			<Description><![CDATA["Тип Группы"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Лестницы"]]></Value>
		</String>
		<Integer Name="iFMType">
			<Description><![CDATA["Тип Группы"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>6</Value>
		</Integer>
		<String Name="FM_InventoryNumber">
			<Description><![CDATA["Инвентарный Номер"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="FM_SerialNumber">
			<Description><![CDATA["Серийный Номер"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="FM_ProductionYear">
			<Description><![CDATA["Год Производства"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<RealNum Name="FM_ObjectWeight">
			<Description><![CDATA["Вес Изделия"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<RealNum Name="FM_Stories">
			<Description><![CDATA["Кол-во Этажей"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<String Name="FM_ObjectWeightUnit">
			<Description><![CDATA["Единица Веса"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["кг"]]></Value>
		</String>
		<RealNum Name="FM_HalfLandings">
			<Description><![CDATA["Кол-во Промежуточных Площадок"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<RealNum Name="FM_LevelHeight">
			<Description><![CDATA["Высота Уровня"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<RealNum Name="FM_HeadRoom">
			<Description><![CDATA["Высота Помещения"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<String Name="FM_BearingStructure">
			<Description><![CDATA["Несущая Конструкция"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<RealNum Name="FM_BearingCapacity">
			<Description><![CDATA["Несущая Способность"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<Boolean Name="FM_SmokeFree">
			<Description><![CDATA["Незадымляемая Лестница"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<RealNum Name="FM_StepsLength">
			<Description><![CDATA["Длина Проступей"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<String Name="FM_MaterialFootstep">
			<Description><![CDATA["Покрытие Проступей"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="FM_MaterialStairRailing">
			<Description><![CDATA["Покрытие Ограждения"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="FM_MaterialHandhold">
			<Description><![CDATA["Покрытие Поручней"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_custom1">
			<Description><![CDATA["Пользовательское Значение 1"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_custom2">
			<Description><![CDATA["Пользовательское Значение 2"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_custom3">
			<Description><![CDATA["Пользовательское Значение 3"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_custom4">
			<Description><![CDATA["Пользовательское Значение 4"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_custom5">
			<Description><![CDATA["Пользовательское Значение 5"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>

		<!-- gs_onorm_Title: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_onorm_Title">
			<Description><![CDATA["Дополнительные Параметры Спецификаций"]]></Description>
			<Fix/>
		</Title>
		<String Name="gs_onorm_treadnumber">
			<Description><![CDATA["Количество Ступеней"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_treadriser">
			<Description><![CDATA["Глубина Проступи / Высота Подступенка"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_person">
			<Description><![CDATA["Количество Людей"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_bardist_auto">
			<Description><![CDATA["Значение Чистой Ширины между Прутьями Ограждения"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_bardist">
			<Description><![CDATA["Чистая Ширина между Прутьями Ограждения"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_botlevheight_auto">
			<Description><![CDATA["Значение Отметки Нижнего Уровня"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_botlevheight">
			<Description><![CDATA["Отметка Нижнего Уровня"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_toplevheight_auto">
			<Description><![CDATA["Значение Отметки Верхнего Уровня"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_toplevheight">
			<Description><![CDATA["Отметка Верхнего Уровня"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_construction">
			<Description><![CDATA["Конструкция"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_soundinsul">
			<Description><![CDATA["Звукоизоляция"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_mat1">
			<Description><![CDATA["Дополнительный Материал 1"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_finish1_value">
			<Description><![CDATA["Значение Отделки 1"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_finish1">
			<Description><![CDATA["Отделка 1"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_customtext1">
			<Description><![CDATA["Дополнительная Информация 1"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_customtext2">
			<Description><![CDATA["Дополнительная Информация 2"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_aks">
			<Description><![CDATA["Номер AKS"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_product">
			<Description><![CDATA["Продукт"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_leistungbuch">
			<Description><![CDATA["Коллекция ID Спецификаций"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_description">
			<Description><![CDATA["Дополнительное Описание"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_number">
			<Description><![CDATA["Дополнительный Номер"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_id">
			<Description><![CDATA["Номер ID"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_admission">
			<Description><![CDATA["Дата Приема"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_modification">
			<Description><![CDATA["Дата Изменения"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_tozonenumber">
			<Description><![CDATA["Номер Зоны"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>

		<!-- ifc_Title: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="ifc_Title">
			<Description><![CDATA["IFC2x3 Набор Свойств для Лестниц"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
		</Title>
		<Integer Name="ifc_StairType">
			<Description><![CDATA["Тип Лестницы"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0</Value>
		</Integer>
		<Integer Name="ifc_NumberOfRiser">
			<Description><![CDATA["Количество Подступенков"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0</Value>
		</Integer>
		<Integer Name="ifc_NumberOfTreads">
			<Description><![CDATA["Количество Проступей"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0</Value>
		</Integer>
		<Length Name="ifc_RiserHeight">
			<Description><![CDATA["Высота Подступенка"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="ifc_TreadLength">
			<Description><![CDATA["Длина Проступи"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0</Value>
		</Length>
		<String Name="LibraryLangCode">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value><![CDATA["RUS"]]></Value>
		</String>
		<Integer Name="gs_ui_current_page">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
	</Parameters>
</ParamSection>

<CalledMacros SectVersion="2" SectionFlags="0" SubIdent="0">
	<Macro>
		<MName><![CDATA["Stair_RiseRun_Text"]]></MName>
		<MainGUID>E42F5F06-4225-4F32-A64C-ADCF1D4F9EDC</MainGUID>
	</Macro>
	<Macro>
		<MName><![CDATA["railSymbol2D_m"]]></MName>
		<MainGUID>C5C904E6-1706-4CD1-BC8D-6C294B5B40F7</MainGUID>
	</Macro>
	<Macro>
		<MName><![CDATA["stairRails_m"]]></MName>
		<MainGUID>4A3DDA4A-B43E-4039-B45A-463905CF42AD</MainGUID>
	</Macro>
	<Macro>
		<MName><![CDATA["ui_stairs"]]></MName>
		<MainGUID>D8D2E274-0A82-4EF4-845A-78AD6980E72F</MainGUID>
	</Macro>
	<Macro>
		<MName><![CDATA["FM_types"]]></MName>
		<MainGUID>2759D2DF-AA8E-44D1-AD1D-261581266B34</MainGUID>
	</Macro>
	<Macro>
		<MName><![CDATA["Onorm_Stair"]]></MName>
		<MainGUID>F021AF23-E4F7-4961-964D-C9BCAFB786DD</MainGUID>
	</Macro>
</CalledMacros>

<Picture MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="0" length_in_bytes="3277" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000007F0000
	007F0803000000F163ED2100000141504C5445FFFFFFCECECED6D6D69C9C9CB5
	B5B5ADADA59CA59CA5A59CEFEFEFEFDEB5B5AD9C424242BDB59C94948CA59C84
	848484B5B5ADADB5AD393939EFD6AD736339424239DEB563A5947BEFEFDECEBD
	949C7B428C948CDECEA59C8C6B735A315A5A5ADEBD84BDAD84737373E7CEA5D6
	B57BDED6CED6C69C6B6B6BE7BD6B84847B394239C6A55AD6BD949C844ACEAD63
	D6AD5AE7C68CA5844AD6AD63E7CE94BD9C527B847BCE9C4ADEC68CC6C6BD9C94
	7BF7EFDEA58C52E7DECE948C7BCEAD73CEBD8CADA58C73736BCED6CEC6B5A5BD
	A57BCEB57B8C7B5A7363426B5A29EFDED6C69C52C6AD84846B39CEC6AD4A524A
	BDC6BDDEE7DEEFE7BDD69C4AADA57B63635AB59C73B59C63BDA55A8C73429C84
	526B5A31B58C4AE7BD846B736BCEA54AAD946BA58C63DEB55ACEB563D6CEB584
	7B637B735ADED6ADBDA5638C7339D69C52CEC69CF25B09B300000B3D49444154
	785EED985573E44C93852B8BC5D0CC8C66661C667E99E15BF8FF3F60B3A4767B
	66626FC663F5DCF8747758A19B2733CF29A5C26411BAD39DEE74A7E3DEE0DBC1
	2B6F96C65BDF88FFA4FE60A978BCF26DE0F5DC6A71DD424075F1EC72EEACB869
	952D9B7C037EDD7ABAB9B56E00297F63918DD71F60E387883680DC62F92F4E57
	8B5B9641CFF958095948FECAD66AB1DF4B50D7FCF66F870BE9BFDE5F5A5BEFA5
	519BF39FECF5D71790BF726E7BBC6E6962CD51BD84FF6C37577C9335BFDE5E2D
	5A6D7BDEF5C6EC8AB6FFBC4FC85ACF26D9F95F2E6FAFAD5AFAEA94E5AEF94FDA
	C563AB837CCBCF8A8F8DFF99CBCDAC7611703DFFC35F96B6B11C45C8B89789FF
	C7B9ED62DBBA1A758A9AF3CB7BEB7B64252DEAAD75FBF3C78DD23F35093B9A41
	3F9DFFD25E396791A3F4E6DB5BEEBF6EFDBCB6757C98A2AA73A87595BFBF3757
	CB48B60CD1F85FB46C34CABA15FE313ABE645929703E55EB237E7D699D14CD45
	2EE1A329FFD37ED6C3828E6E65956E3FD373E03CEAD7FCFAEA3AD6B664F8E9FC
	3F9CE6765340F3EB164ABD8D1BC53294CFF9D7F3B7C65B3D73DB10D1FF0DAB6D
	1E7D9B06A09917088DBA197F6F7B2FB7FD91CB9FCEFF3F86D03B2DE269B00CBF
	8F8076DB5A494D59330000CE21D18DDAFF2F4AC86A02EDCCD1BD8FE7FFA4BD7E
	4AC853A4E3EDCDAD331C559A7FC1DE72CE29B0042F5AEC26FCAD1299F5618939
	BF7E9DFFE33686D24230B1CAA77D6B2BADA96AF88C8F19000D52BC13DF845FFE
	CE9EF1FF5FFFCB7B6BE840AF87C65B6DCB4ACB5BD6BAAA49EE04F81AC0AC7BEE
	C4B1B889FB3F18EAF8337E2EE51FB657B78881FED2B6C6C69694DF616C65C43A
	0795B3B7880723163B5347DDC4FD86A12E25D79D4FFBDF5EEFE730EAEDDC83A1
	95467DA89364D800550EEDFB1C8A2C0014ED3AA89BF4BFFEAE62F89B49D39FCC
	BFBC8E451DB7DBBD3DBCD74B2D1A020C81F12D6047CBCB26F4E32E0554D77939
	8D1DE7CBF987474F6C432DA6FCEB036FADAE978BB9BE6525377AB3FEFF1805F7
	19E3F5EEE9B2B19D059A6A426114C72FD1FE1BE46F6F85B8F3FC5D6FB9FAEAD3
	EADE9B7592C209816580A2D67419F83B807B4F7BC059123BAA581876A705A7E0
	38852FE797BF6FA4FCDD84EFA6FCFAF745EBCD515A499A783A04FE9431560F44
	BDFEA10E604EBD11952A14BF223E8EA753877EB1FB2537E51713F2B971646975
	AB2D92039E2314EA54FF4713FA81B1B100FE0787658F73865F06034AC56BA698
	EAC6531C7EA14BBF3CFC830A09AFF976DDB270C1264158498C870A35B38765CE
	8AC045BB5267309388A410A2C63CB9131BFCC50D1E7D3F9090548CEB7D2CA6F7
	C02A6312A8D9ACA037B446BEE830569AE059E7B0C4EDE57B8078A6A9D61A18D2
	59CD5352ED140AD342F7CBF187C67D6227F97BD0431ACAAA2683E0B002F0BF00
	1CF9CF10F98143F1D9DFC092D4696F87459C29AF1B2A4F4A715128147E255FAE
	E1772199F93F26A9F49AADCD41E4BC6A8E3A089BE11FFCFD7EBA0910A4A9D362
	3271851BB835C114FE7E8D0B7093C5B7445D5221F63CFFA87B4F4B08A8F8B0BF
	C2764A8C05A71C2A0C96EF077C8DA194A665204C449190351689DACEA4E65D18
	FC8DDCB7899BFABFA9537EFFC837693B017EC4F910387FC145E7C519E7C0D64C
	F238E75114864CB2009DF798F4A488BAF4667BFF27720FF9930A723518693DCE
	1BFED901F0AAC0C6390C55E90CA9C0994641E44588F56A320AA3482A293C06E4
	66DA2A35911E1EE74DFF4F4000AA5DF50DBF12F0E088F1FB00F7B62BD8B2491D
	A74C493EC0E685E4514DBAB23691D1E0F50DE9D8FEF12333FF86DB00AD29245A
	ADFA258EFD370258413E3FEDC0D58285013313574A08E946D83C93AF35B9B986
	3F90BC99BFEDED402A0E2FB61F964AC0E1D93F001B7CBFBFC7383312A63ECA98
	3C9035CF534C783535205F25FD579E3CC6F4378882B986F74B7E923F0F82EFCF
	EA9CA7ADF320304FB95A14D62691DA01C65F93AFD53ABA9F2736ED902E9DF3FF
	3CF013FEB313FBF405621807133A2E911E869E177AAFD464FF927CBDF0C99F37
	FC06413E9D557086E94BF3F79D2F4030065C0B29F6694D869E8AA4F46A034D6E
	45B977486F9ADDC7037A5540BFE327F3678D808964C1522D6B52BE922AF2D0F8
	FD5B829BBD7F8EF43CBACF98C150437BB11B26FD076CD90F04704A5F01F118B6
	ADF6434935B93D0DDF85A67F6A7B1C8CA8A960B87199F019547EE2008209510B
	3CA93C155E925BD5A1D9FB98FFDF0947D05505E326A47CEC5C1B3EBA10296603
	B96D0D1F1017F9799BC03C7C74B8E4CFF8408560C04580D6EF93DB57B9DF2161
	E23F0934855905BF547DEAFB0F8DF51A2E85920C34C944B915B377F30397304E
	35A5DA98F0F7E663C36F3E1254434D05034DB2D25225C4CDF718C32F52E7B106
	58FEB9E953DBE7AD1153CC63D9D1497F83B8C8CFDB350E302FA078D23C805283
	1ABE526176F8C3BE8B7C1BFDE7FA2A7BA0F9AE972FD1E609B446B8DE03929DF6
	365CF3D63BB0916F069FAAFFBC942FC173089CAE3C60AFB3C3978B6ED27F8390
	F4453AAD60FCF0BC69733F781F77651492EC34DC2086DF704DFAA8A980D2F4C5
	277FDE61A3D8B9B05F6588D74537495F93060250A60200BA9BF70FF2A58B272D
	673AE22443BDF9D1F03BD465A9F36905F6D3BC5FCA9F9768CB890392A58A7985
	FCF077CA81CC2B28F7EF3F3F3FC83F84A0E538224BBCF56368FA3F68104EB4D6
	1C52FD86E1FB275F0A4605C72159AA1FBA1DE4E707B44B350A92F82F57FD471D
	96F70D7E9A69FB1BAE6B1377F0A30E12E78DB8865D170FBFDFD02D27E3F1F7F3
	B6E9DFF5BA900AF9441F6FBBE779DC7CB45588639671FB2EE6AFF12FA5705DC1
	5615FC47FE634C5F9CADFD45F79EB2CDE6FD97530DF3F8AFE5B59DB77F427C5C
	C8926FAD10B4DF26187EAE51B30A861B1DED3771F3C6D36CE3F7D72352B15DDB
	1DBC0E68923D424DFCFB550FECE798BE385BFBF1EC63FF1DBB41030A97B3F453
	ED8E1FFB80F9A7A369C19966C8EFBB2E093B61330820555A426EA3790E07CF93
	675F5CC8B0FD23B3F655A561BC9F5740F56F76D3A67E7384E98B9D2CDBCF27FF
	EC71619FA3F1302B812E6F779A1DFD3CFFBEE5E0F8B30CBF4BF06363F8411382
	2524E183FE7F0779A51F37317D8EA3323CFBB6E1579AC003D054630146DC2A3E
	F4F3A5D0A7A342A1E5647AF6D3D7AE40CCA3678AB0AA2727F952890738FE7894
	E5DE4FF8F7021B3ECA1EDE6F5690FFA8EB38C8BFCCB07FC30F490338255AC35C
	BBA1DD69DAF6C841F72F4886DA36FDBB9473133D42AF5E7BFF2895D8A32A49D2
	0759F27F36FC06618224BE630DA029ACF9BE5F6ADADA89E3699764A9A2E10F98
	4856EE550DD646C7F6BD261BE1E66FC94CF90F907FE2714845D302C8A15DAAF8
	0F47312EFE9724532D11B7E2F199EDF323489643BB61B7901F8B6CF9BBC67D30
	E6C34745500B171231EF3D0EC9567F910A108EF8C47C7A7506EB5EE91CDEE3E6
	6319F38BA441029AE0C9EC00183786A503367A997DFB641C5291A62F8DDE6C10
	D6093EFBD0FD6ED6FCD506834FB2979690AB84EFD1FDC220F3FE056830AE5FCB
	B8619D90114E3FF3F6499F700468D42755541EEA56619A7DFB64AC01E933DB35
	B9AA62838D9C38BE20996B570024E0EB0F7EA17A817BB72532C7EB215C495F95
	61BE56B710C731C99E3F5BB89F5761EDC44E8165CFE74C728AFAAC0E7DD67516
	D13E913208A59001570C2885791D5EC1792916C0F722590BE5A59235AE5EB189
	C714E784EE43CB79E99085F011EF85329C48C1222622A6A417B0286EC5DD45F0
	95A7542D529E0865CD93420929A3888502D34F17C4976AE261154A469E575338
	018957E6D1BB0879414DC903830EA5F49854819A889D9A70A68385F02768BECD
	A29ADA9F8472C78D8C074C29315D4CFB24324D47AE0A3D56ABED04CC9BEC7B17
	2A12B1208B5119F607118B2225D17A15C9890A23C5BC982C581A2895355729C5
	43153046BE91285C0EB894B709B8D39DEE74A73BDDE94EFF071D560B3882AB99
	DA0000000049454E44AE426082
	]]>
</Picture>

<Copyright SectVersion="1" SectionFlags="0" SubIdent="0">
	<Author>GRAPHISOFT</Author>
	<License>
		<Type>CC BY-ND</Type>
		<Version>3.0</Version>
	</License>
</Copyright>

</Symbol>
