<?xml version="1.0" encoding="UTF-8"?>
<Symbol IsArchivable="false" IsPlaceable="false" MainGUID="49E4DFF3-1B53-41B9-8390-642D0CD5CE8C" MigrationValue="Normal" Owner="1196638531" Signature="1196644685" Version="43">
<Ancestry SectVersion="1" SectionFlags="0" SubIdent="0" Template="false">
	<MainGUID>F938E33A-329D-4A36-BE3E-85E126820996</MainGUID>
	<MainGUID>103E8D2C-8230-42E1-9597-46F84CCE28C0</MainGUID>
	<MainGUID>6ACDA889-69B2-4EC5-936C-CB1DA7032A92</MainGUID>
	<MainGUID>F6AE9687-2BC7-4D47-88C9-8F793E1DE2D6</MainGUID>
</Ancestry>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_3D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
! Contact person: <NJ>

! ==============================================================================
! This macro draws the Casing
! ------------------------------------------------------------------------------
! Input parameters:
! Geometry ---------------------------------------------------------------------
!	A:						wallhole width (length) (Obsolete)
!	B:						wallhole height (length)
!	refWidth:				reference width in curved walls (length)
!	leftWidth:				wallhole's side distance from the origin at the left side (length)
!	rightWidth:				wallhole's side distance from the origin at the right side (length)
!	AC_Hole_Position_Angle:	Position angle of the window in a curved wall
!	offsY:					for positioning 3D along y (length)
! Functions --------------------------------------------------------------------
!	gs_IsCurved:			Does the window follow the curvature of the wall? (0 / 1)
!	iWindowShape:			Shape of the window (integer)
!								0 = rectangular (default)
!								1 = arched
!							Note: only the rectangular shape can be a Corner Window
!	archHeight:				Height of the arc (length)
!	nArchResolution:		Arc resolution for arched windows (integer)
!								if nArchResolution < 3 then WALL_RESOL used instead
! Reveal -----------------------------------------------------------------------
!	iRevealType:
!	gs_reveal_left_angle:
!	gs_reveal_right_angle:
! Corner Function --------------------------------------------------------------
!	bLeftCornerFunction:		Turn macro in Corner Window mode at the left side (0 / 1)
!	leftCornerAngle:		Angle between connected walls in case of Corner Window (angle)
!	leftConnWallThk:		Thickness of the connected wall in case of Corner Window (length)
!	bRightCornerFunction:	Turn macro in Corner Window mode at the right side (0 / 1)
!	rightCornerAngle:		Angle between connected walls in case of Corner Window (angle)
!	rightConnWallThk:		Thickness of the connected wall in case of Corner Window (length)
! Oversize ---------------------------------------------------------------------
!	gs_left_oversize:		Left opening oversize (length)
!	gs_right_oversize:		Right opening oversize (length)
!	gs_upper_oversize:		Upper opening oversize (length)
!	gs_lower_oversize:		Lower opening oversize (length)
! Casing -----------------------------------------------------------------------
!	gs_trim_inside:
!	gs_trim_outside:
!	gs_trim_width_in:		Width of inside Trim. (length)
!	gs_trim_width_out:		Width of outside Trim. (length)
!	gs_trim_offs_in:		Offset of Casing inside. (length)
!	gs_trim_offs_out:		Offset of Casing outside. (length)
!	gs_trim_thk_in:			Thickness of inside Trim. (length)
!	gs_trim_thk_out:		Thickness of outside Trim. (length)
!	gs_tw_left_in:			Width of inside casing on the left (length)
!	gs_tw_right_in:			Width of inside casing on the right (length)
!	gs_tw_top_in:			Width of inside head casing (length)
!	gs_tw_bottom_in:		Width of inside casing on the bottom (length)
!	gs_tw_left_out:			Width of outside casing on the left (length)
!	gs_tw_right_out:		Width of outside casing on the right (length)
!	gs_tw_top_out:			Width of outside head casing (length)
!	gs_tw_bottom_out:		Width of outside casing on the bottom (length)
! Sill -------------------------------------------------------------------------
!	iSillType:				Identifies the type of the Sill.
!								(integer; 1 = Standard Sill, 2 = Brick Sill, 3 = Stone Sill, 4 = Ceramic Sill)
!								(5 = Eternite Sill, 6 = Concrete Tub, 7 = Aluminum Sill)
!	gs_board_thk:			Thickness of the Board. (length)
! Ganging ----------------------------------------------------------------------
!	gs_stack_left:			Align to door/window on left side (0 / 1)
!	gs_stack_right:			Align to door/window on right side (0 / 1)
!	gs_stack_top:			Align to door/window on upper side (0 / 1)
!	gs_stack_bottom:		Align to door/window on bottom side (0 / 1)
! 2D Representation ------------------------------------------------------------
!	gs_trim_pen_cont:		Cotour pen of the cutted Trim.
!								If it is zero then SYMB_FILL_PEN defines the cutted contour pen. (pen)
!	gs_trim_fill_in:		Type of the fill on the inside Trim. (fill type)
!	gs_trim_pen_fg_in:		Fill pen on the inside Trim. (pen)
!	gs_trim_pen_bg_in:		Fill background pen on the inside Trim. (pen)
!	gs_trim_fill_out:		Type of the fill on the outside Trim. (fill type)
!	gs_trim_pen_fg_out:		Fill pen on the outside Trim. (pen)
!	gs_trim_pen_bg_out:		Fill background pen on the outside Trim. (pen)
! 3D Representation ------------------------------------------------------------
!	lod3D:					Level of detail. Not used. (integer)
!	gs_frame_pen:			Drawing pen of 3D. (pen)
! Materials --------------------------------------------------------------------
!	gs_trim_in_mat:			Inside trim material (material)
!	gs_trim_out_mat:		Outside trim material (material)
!
! Related Global Variables:
!	GLOB_SCRIPT_TYPE
!	GLOB_CONTEXT
!	WALL_THICKNESS
!	WALL_INCL
!	WALL_RESOL
!	WIDO_FRAME_THICKNESS
!	WIDO_SILL
!	WIDO_ORIG_DIST
!	WIDO_REVEAL_SIDE
!	SYMB_MIRRORED
!	SYMB_ROTANGLE
!	SYMB_FILL
!	SYMB_SECT_PEN
!	SYMB_FILL_PEN
!	SYMB_FBGD_PEN
! ==============================================================================

if	iWindowShape <> SHAPE_RECTANGULAR &\
	iWindowShape <> SHAPE_ARCHED &\
	iWindowShape <> SHAPE_ELLIPSEARCH &\
	iWindowShape <> SHAPE_T &\
	iWindowShape <> SHAPE_HALF_T_LEFT &\
	iWindowShape <> SHAPE_ARCHED_T &\
	iWindowShape <> SHAPE_ARCHED_HALF_T_LEFT &\
	iWindowShape <> SHAPE_HALF_T_RIGHT &\
	iWindowShape <> SHAPE_ARCHED_HALF_T_RIGHT then end

if lod3D = 0 then end
if (bInsideCasingNotAvailableByReveal |\
	bInsideCasingNotAvailableByWallType |\
	bInsideCasingNotAvailableByFrameStyle) then
	bDrawInsideTrim  = 0
endif
if (bOutsideCasingNotAvailableByReveal |\
	bOutsideCasingNotAvailableByFrameStyle) then
	bDrawOutsideTrim = 0
endif
if not(bDrawInsideTrim | bDrawOutsideTrim) then end

bShapeEnablesStraightBottomTrim = (	iWindowShape = SHAPE_RECTANGULAR | \
									iWindowShape = SHAPE_ARCHED | \
									iWindowShape = SHAPE_ELLIPSEARCH )
bShapeEnablesStraightLeftTrim   = (	iWindowShape = SHAPE_RECTANGULAR | \
									iWindowShape = SHAPE_ARCHED | \
									iWindowShape = SHAPE_ELLIPSEARCH | \
									iWindowShape = SHAPE_T | \
									iWindowShape = SHAPE_HALF_T_LEFT | \
									iWindowShape = SHAPE_HALF_T_RIGHT | \
									iWindowShape = SHAPE_ARCHED_T | \
									iWindowShape = SHAPE_ARCHED_HALF_T_LEFT | \
									iWindowShape = SHAPE_ARCHED_HALF_T_RIGHT )
bShapeEnablesStraightRightTrim  = (	iWindowShape = SHAPE_RECTANGULAR | \
									iWindowShape = SHAPE_ARCHED | \
									iWindowShape = SHAPE_ELLIPSEARCH | \
									iWindowShape = SHAPE_T | \
									iWindowShape = SHAPE_HALF_T_LEFT | \
									iWindowShape = SHAPE_HALF_T_RIGHT | \
									iWindowShape = SHAPE_ARCHED_T | \
									iWindowShape = SHAPE_ARCHED_HALF_T_LEFT | \
									iWindowShape = SHAPE_ARCHED_HALF_T_RIGHT )
bShapeEnablesStraightTopTrim    = (	iWindowShape = SHAPE_RECTANGULAR | \
									iWindowShape = SHAPE_T | \
									iWindowShape = SHAPE_HALF_T_LEFT | \
									iWindowShape = SHAPE_HALF_T_RIGHT )
bShapeEnablesArchedTopTrim 		= (	iWindowShape = SHAPE_ARCHED | \
									iWindowShape = SHAPE_ARCHED_T | \
									iWindowShape = SHAPE_ARCHED_HALF_T_LEFT | \
									iWindowShape = SHAPE_ARCHED_HALF_T_RIGHT )

! === wido jamb values =========================================================

widoLeftJamb	= gs_reveal_left
widoRightJamb	= gs_reveal_right


! === Initialized variables ====================================================[

archTrimDiff	= 0
bHalfCircle		= 0
pocketThkLeft	= 0
pocketThkRight	= 0

! ]=== End of initialized variables ============================================


! Save the current parameter buffer ============================================

dim savedQueueValues[]
call "SaveQueue" parameters returned_parameters savedQueueValues


gs_trim_pen_cont_out	= gs_trim_pen_cont
gs_trim_pen_cont_in		= gs_trim_pen_cont

if gs_trim_fill_in		< 1 then gs_trim_fill_in	= SYMB_FILL
if gs_trim_pen_bg_in	< 1 then gs_trim_pen_bg_in	= SYMB_FBGD_PEN
if gs_trim_pen_fg_in	< 1 then gs_trim_pen_fg_in	= SYMB_FILL_PEN
if gs_trim_fill_out		< 1 then gs_trim_fill_out	= SYMB_FILL
if gs_trim_pen_bg_out	< 1 then gs_trim_pen_bg_out	= SYMB_FBGD_PEN
if gs_trim_pen_fg_out	< 1 then gs_trim_pen_fg_out	= SYMB_FILL_PEN

if AC_HoleSideMaterial then
	if WIDO_REVEAL_SIDE then
		matWallOut	= WALL_MAT_A
		matWallIn	= WALL_MAT_B
	else
		matWallOut	= WALL_MAT_B
		matWallIn	= WALL_MAT_A
	endif
else
	matWallOut	= WALL_MAT_EDGE
	matWallIn	= WALL_MAT_EDGE
endif

muly -1
if WIDO_REVEAL_SIDE then
	mulz -1
	addz -WIDO_FRAME_THICKNESS
endif

! === Window Shape related definitions ========================================[

if nArchResolution < 3 then nArchResolution = WALL_RESOL

if	bShapeEnablesArchedTopTrim then
	if archHeight < EPS then
		if iWindowShape = SHAPE_ARCHED				then iWindowShape = SHAPE_RECTANGULAR
		if iWindowShape = SHAPE_ARCHED_T			then iWindowShape = SHAPE_T
		if iWindowShape = SHAPE_ARCHED_HALF_T_LEFT	then iWindowShape = SHAPE_HALF_T_LEFT
		if iWindowShape = SHAPE_ARCHED_HALF_T_RIGHT	then iWindowShape = SHAPE_HALF_T_RIGHT
	else
		if archHeight > ((leftWidth + rightWidth) / 2 - EPS) then
			archHeight = (leftWidth + rightWidth) / 2
			arcR = archHeight
			bHalfCircle = 1
		else
			arcR = ((leftWidth + rightWidth) / 2) / sin(2 * atn((archHeight) / ((leftWidth + rightWidth) / 2)))
			bHalfCircle = 0
		endif
	endif
endif

if iWindowShape = SHAPE_ELLIPSEARCH then
	openingWidth = (leftWidth + rightWidth - tolerOffsetLeftIn - tolerOffsetRightIn)

	middleRadiusEllips = (openingWidth * openingWidth / 4 - openingWidth * smallRadiusEllips + archHeight * archHeight) / (2 * archHeight - 2 * smallRadiusEllips)

	alphaSide = atn ((middleRadiusEllips - archHeight) / (openingWidth / 2 - smallRadiusEllips))
	alphaMiddle = (90 - alphaSide) * 2
endif

if	iWindowShape <> SHAPE_ARCHED &\
	iWindowShape <> SHAPE_ELLIPSEARCH &\
	iWindowShape <> SHAPE_ARCHED_T &\
	iWindowShape <> SHAPE_ARCHED_HALF_T_LEFT &\
	iWindowShape <> SHAPE_ARCHED_HALF_T_RIGHT then archHeight = 0

! ]=== Window Shape related definitions ========================================


! ==============================================================================
! Common Calculations for Trims
! ==============================================================================

bHolePosSign = (SYMB_MIRRORED exor (SYMB_ROTANGLE > EPS) exor (AC_Hole_Position_Angle < 0))
iHolePosSign = (not(bHolePosSign) - bHolePosSign)

if bLeftCornerFunction then
	! --- Push left side trim ---
	beta_left = atn ((leftConnWallThk * sin(leftCornerAngle)) / (WALL_THICKNESS + leftConnWallThk * cos(leftCornerAngle)))

	if leftCornerAngle > 180 then
		overSizeLeft = max (0, WALL_THICKNESS / tan(360 - leftCornerAngle + beta_left) + WIDO_SILL / tan(leftCornerAngle / 2))
	else
		overSizeLeft = (WIDO_FRAME_THICKNESS + WIDO_SILL) * lx + max (0, WALL_THICKNESS * tan(leftCornerAngle - beta_left - 90))
	endif
	overSizeLeft = overSizeLeft + abs(gs_trim_thk_in / tan(leftCornerAngle / 2)) + gs_tw_left_out + gs_tw_left_in + 0.1
	overSizeLeftOut = overSizeLeft
	overSizeLeftIn 	= overSizeLeft
endif


if bRightCornerFunction then
	! --- Push right side trim ---
	beta = atn ((rightConnWallThk * sin(rightCornerAngle)) / (WALL_THICKNESS + rightConnWallThk * cos(rightCornerAngle)))

	if rightCornerAngle > 180 then
		overSizeRight = max (0, WALL_THICKNESS / tan(360 - rightCornerAngle + beta) + WIDO_SILL / tan(rightCornerAngle / 2))
	else
		overSizeRight = (WIDO_FRAME_THICKNESS + WIDO_SILL) * rx + max (0, WALL_THICKNESS * tan(rightCornerAngle - beta - 90))
	endif
	overSizeRight = overSizeRight + abs(gs_trim_thk_in / tan(rightCornerAngle / 2)) + gs_tw_right_out + gs_tw_right_in + 0.1
	overSizeRightOut = overSizeRight
	overSizeRightIn	 = overSizeRight
endif


if gs_stack_top then
	overSizeTop = gs_upper_oversize
	overSizeTopIn = gs_upper_oversize
else
	overSizeTop = 0
	overSizeTopIn = 0 - widoInnerTopJamb + sfty
endif

if gs_stack_bottom then
	overSizeBottom = gs_lower_oversize
	overSizeBottomIn = gs_lower_oversize
else
	overSizeBottom = 0
	overSizeBottomIn = -not(bDrawBoard) * widoInnerBottomJamb + sfby - bDrawBoard * boardBottom
endif

if gs_trim_show_cover_in then
	gs_trim_jambext_nosing_in = 0
endif
if gs_trim_show_cover_out then
	gs_trim_jambext_nosing_out = 0
endif


resol WALL_RESOL

bCutWall = not (GLOB_CONTEXT > 40 & GLOB_CONTEXT < 50)

bDrawLeftTrimatGangingIn	= not(bLeftCornerFunction) & bShapeEnablesStraightLeftTrim & gs_stack_left & gs_trim_stack_left
bDrawRightTrimatGangingIn	= not(bRightCornerFunction) & bShapeEnablesStraightRightTrim & gs_stack_right & gs_trim_stack_right
bDrawBottTrimatGangingIn	= isWindow & bShapeEnablesStraightBottomTrim & abs(tolerOffsStackCasLowerIn + trinB - gs_trim_offs_in) > EPS & gs_stack_bottom & gs_trim_stack_bottom
bDrawTopTrimatGangingIn		= bShapeEnablesStraightTopTrim & gs_stack_top & abs(-tolerOffsStackCasUpperIn - trinT + gs_trim_offs_in) > EPS & gs_trim_stack_top

bDrawLeftTrimatGangingOut	= not(bLeftCornerFunction) & bShapeEnablesStraightLeftTrim & gs_stack_left & gs_trim_stack_left
bDrawRightTrimatGangingOut	= not(bRightCornerFunction) & bShapeEnablesStraightRightTrim & gs_stack_right & gs_trim_stack_right
bDrawBottTrimatGangingOut	= bShapeEnablesStraightBottomTrim & gs_stack_bottom & ABS(tolerOffsStackCasLowerOut + trim_offs_out_modify - gs_trim_offs_out)>EPS & (iSillType < 2 | not(bDrawBoard)) & gs_trim_stack_bottom
bDrawTopTrimatGangingOut	= bShapeEnablesStraightTopTrim & gs_stack_top & ABS(-tolerOffsStackCasUpperOut - trim_offs_out_modify + gs_trim_offs_out)>EPS & gs_trim_stack_top

bGangedCasingonFrame = abs(WIDO_FRAME_THICKNESS - WALL_THICKNESS) > EPS

! ==============================================================================
!	Draw Trims
! ==============================================================================

if (gs_trimtype_out_int = CASING_COMPLEX) then
	if bArchitraveCapital then
		if	(iArchitraveCapitalType = ARCH_CAPITAL_SQUARE_ONSIDE |\
			 iArchitraveCapitalType = ARCH_CAPITAL_SQUARE_NEXTSIDE) then

			_offsetTop		= 0.01
			_thickBracket	= 0.06
		endif

		if	(iArchitraveCapitalType = ARCH_CAPITAL_DECOR_ONSIDE |\
			 iArchitraveCapitalType = ARCH_CAPITAL_DECOR_NEXTSIDE) then

			_offsetTop		= 0.01
			_thickBracket	= 0.07
		endif

!!!		if iArchitraveCapitalType = 0 then
!!!			_offsetTop		= 0.021
!!!			_thickBracket	= 0.039
!!!		endif
	else
		_offsetTop		= 0.01
		_thickBracket	= 0.035
	endif
endif

if gs_stack_top then
	overSizeTop = gs_upper_oversize
else
	overSizeTop = 0
endif

if gs_stack_bottom then
	overSizeBottom = gs_lower_oversize
else
	if bDrawSill then
		overSizeBottom = -sillBottomOutside + widoThresDepth
	else
		overSizeBottom = - widoThresDepth * not(isWindow)
	endif
endif
overSizeBottomLeft	= overSizeBottom
overSizeBottomRight	= overSizeBottom
if	(bPShapedLeftOpening & not(bDrawLeftSLSill))		| \
	(bTShapedOpening & gs_sidelight_parapet_hgt_left < EPS)		| \
	(bPShapedRightOpening & iWindowShape <> SHAPE_T)		then overSizeBottomLeft = 0
if	(bPShapedRightOpening & not(bDrawRightSLSill))		| \
	(bTShapedOpening & gs_sidelight_parapet_hgt_right < EPS)	| \
	(bPShapedLeftOpening & iWindowShape <> SHAPE_T)			then overSizeBottomRight = 0

! Calculate overhangs to cutting of top and bottom casing in case of corner opening

if gs_trim_show_cover_in then
	casingOverhangIn = gs_trim_thk_in
else
	casingOverhangIn = gs_trim_jambext_nosing_in
endif
if gs_trim_show_cover_out then
	if (gs_trimtype_out_int = CASING_COMPLEX) & (iCasingHeadTypeOut <> CASING_HEAD_RECT) then
		casingOverhangOut = gs_trim_thk_out + _thickBracket + _offsetTop
	else
		casingOverhangOut = gs_trim_thk_out
	endif
else
	casingOverhangOut = gs_trim_jambext_nosing_out
endif


bHasCasingSetBackIn	 = (casingSetBackOnSides_in  > EPS & casingSetBackOnSides_in  < WALL_THICKNESS - (WIDO_SILL + WIDO_FRAME_THICKNESS))
bHasCasingSetBackOut = (casingSetBackOnSides_out > EPS & casingSetBackOnSides_out < WIDO_SILL)

bShowEdgesAtFrame = (not(bDrawOutsideTrim & bDrawInsideTrim  ) |\
					 abs(gs_trim_width_in - gs_trim_width_out) > EPS |\
					 (gs_trim_in_mat <> gs_trim_out_mat) |\
					 abs(WIDO_FRAME_THICKNESS) > EPS |\
					 (bHasCasingSetBackIn | bHasCasingSetBackOut))

! ==============================================================================
! Cut on Board side
! ==============================================================================

numCuts = 0

material gs_trim_in_mat

if bRightCornerFunction then

	! --- Cut right side in case of Corner Window ---

	if bFitModeRight then
		add rightCwDx + rightCwDx2 + rightWidth - (WALL_THICKNESS - WIDO_SILL - WIDO_FRAME_THICKNESS + casingOverhangIn) * rx, 0, WALL_THICKNESS - WIDO_SILL + casingOverhangIn
		rotx 90

!!!		maxDist = WALL_THICKNESS - WIDO_SILL - WIDO_FRAME_THICKNESS + casingOverhangIn + EPS
		maxDist = WALL_THICKNESS - min(0, WIDO_SILL) + casingOverhangOut + casingOverhangIn

		if abs(maxDist) > EPS then
			cutpolya 4, 2, 0,
				0, 0, 10,
				maxDist / tan(rightCornerAngle / 2), -maxDist, 10,
				10 * A, -maxDist, 8,
				10 * A, 0, 8

			numCuts = numCuts + 1
		endif
		del 2
	else
		rotx 90

		if WALL_THICKNESS - WIDO_SILL - WIDO_FRAME_THICKNESS < -EPS then
			cutpolya 4, 2, 0,
				10 * A,																									WALL_THICKNESS - WIDO_SILL - EPS,	8,
				rightCwDx + rightCwDx2 + rightWidth - (WALL_THICKNESS - WIDO_SILL - WIDO_FRAME_THICKNESS - EPS) * rx,	WALL_THICKNESS - WIDO_SILL - EPS,	10,
				rightCwDx + rightWidth,																					WIDO_FRAME_THICKNESS,				8,
				10 * A,																									WIDO_FRAME_THICKNESS,				8
		else
			cutpolya 5, 2, 0,
				10 * A, 																											WALL_THICKNESS - WIDO_SILL + casingOverhangIn,				8,
				rightCwDx + rightCwDx2 + rightWidth - (WALL_THICKNESS - WIDO_SILL - WIDO_FRAME_THICKNESS + casingOverhangIn) * rx,	WALL_THICKNESS - WIDO_SILL + casingOverhangIn,				10,
				rightCwDx + rightWidth - rightCwDx2 * cos(rightCornerAngle),														WIDO_FRAME_THICKNESS + rightCwDx2 * sin(rightCornerAngle),	8,
				rightCwDx + rightWidth,																								WIDO_FRAME_THICKNESS,										8,
				10 * A,																												WIDO_FRAME_THICKNESS,										8
		endif

		numCuts = numCuts + 1
		del 1
	endif
endif

if bLeftCornerFunction then

	! --- Cut left side in case of Corner Window ---

	if bFitModeLeft then
		add -leftCwDx - leftCwDx2 - leftWidth + (WALL_THICKNESS - WIDO_SILL- WIDO_FRAME_THICKNESS + casingOverhangIn) * lx, 0, WALL_THICKNESS - WIDO_SILL + casingOverhangIn
		rotx 90

!!!		maxDist = WALL_THICKNESS - WIDO_SILL - WIDO_FRAME_THICKNESS + casingOverhangIn + EPS
		maxDist = WALL_THICKNESS - min(0, WIDO_SILL) + casingOverhangOut + casingOverhangIn

		if abs(maxDist) > EPS then
			cutpolya 4, 1, 0,
				0, 0, 10,
				-maxDist / tan(leftCornerAngle / 2), -maxDist, 10,
				-10 * A, -maxDist, 8,
				-10 * A, 0, 8

			numCuts = numCuts + 1
		endif
		del 2
	else

		rotx 90

		if WALL_THICKNESS - WIDO_SILL - WIDO_FRAME_THICKNESS < -EPS then
			cutpolya 4, 1, 0,
				-10 * A, 																							WALL_THICKNESS - WIDO_SILL - EPS,	8,
				-leftCwDx - leftCwDx2 - leftWidth + (WALL_THICKNESS - WIDO_SILL - WIDO_FRAME_THICKNESS - EPS) * lx,	WALL_THICKNESS - WIDO_SILL - EPS,	10,
				-leftCwDx - leftWidth,																				WIDO_FRAME_THICKNESS,				8,
				-10 * A,																							WIDO_FRAME_THICKNESS,				8
		else
			cutpolya 5, 1, 0,
				-10 * A, 																										WALL_THICKNESS - WIDO_SILL + casingOverhangIn,				8,
				-leftCwDx - leftCwDx2 - leftWidth + (WALL_THICKNESS - WIDO_SILL - WIDO_FRAME_THICKNESS + casingOverhangIn) * lx,WALL_THICKNESS - WIDO_SILL + casingOverhangIn,				10,
				-leftCwDx - leftWidth + leftCwDx2 * cos(leftCornerAngle),														WIDO_FRAME_THICKNESS + leftCwDx2 * sin(leftCornerAngle),	8,
				-leftCwDx - leftWidth,																							WIDO_FRAME_THICKNESS,										8,
				-10 * A,																										WIDO_FRAME_THICKNESS,										8
		endif

		numCuts = numCuts + 1
		del 1
	endif
endif

! --- Casing Set Back on Sides ---
if bHasCasingSetBackIn then
	add 0, -gs_trim_width_in * isWindow, casingSetBackOnSides_in + WIDO_FRAME_THICKNESS
	rotx 90

	material gs_trim_in_mat
	cutform 4, 1, 1+2,
		0, 0, 1, B*2,
		lengthCasingSetback/2,	0,							1,
		lengthCasingSetback/2,	-casingSetBackOnSides_in,	1,
		-lengthCasingSetback/2,	-casingSetBackOnSides_in,	1,
		-lengthCasingSetback/2,	0,							1
	numCuts = numCuts + 1
	del 2
endif


! ==============================================================================
!	Draw Inside Trim
! ==============================================================================

if bDrawInsideTrim then

	material gs_trim_in_mat

	if	bPShapedLeftOpening & not(gs_trim_below_boardLeft)then

		add -boardRight_sL, -gs_sidelight_parapet_hgt_left - boardSideHeight + (gs_reveal_double_innerBottom_sL - gs_reveal_bottom), WIDO_FRAME_THICKNESS
		roty 90
		rotz -90

		cutform 4, 1, 2+16,
			0, 0, 1, EPS,
			0,0,15,
			-0.5 * tan(boardSideAngle), -0.5, 15,
			-0.5 * tan(boardSideAngle) - 0.5, -0.5, 15,
			-0.5 * tan(boardSideAngle) - 0.5, 0, 15
		numCuts = numCuts + 1
		del 3
	endif

	if	bPShapedRightOpening & not(gs_trim_below_boardRight) then

		add boardLeft_sR, -gs_sidelight_parapet_hgt_right - boardSideHeight + (gs_reveal_double_innerBottom_sR - gs_reveal_bottom), WIDO_FRAME_THICKNESS
		roty 90
		rotz -90
		mulz -1

		cutform 4, 1, 2+16,
			0, 0, 1, EPS,
			0,0,15,
			-0.5 * tan(boardSideAngle), -0.5, 15,
			-0.5 * tan(boardSideAngle) - 0.5, -0.5, 15,
			-0.5 * tan(boardSideAngle) - 0.5, 0, 15
		numCuts = numCuts + 1
		del 4
	endif

	if bBoardPlaneCut then
		add 0, -boardSideHeight, WIDO_FRAME_THICKNESS
		rotx -90 - boardSideAngle
		cutplane
		numCuts = numCuts + 1
		del 2
	endif

	if bThresholdBoardPlaneCut then
		add 0, -ThresholdBoardSideHeight, WIDO_FRAME_THICKNESS
		rotx -90
		cutplane
		numCuts = numCuts + 1
		del 2
	endif

	gosub 1000

endif


! ==============================================================================
!	Draw Apron
! ==============================================================================

if gs_apron then
	gosub 3000
endif

! ==============================================================================

for i = 1 to numCuts
	cutend
next i


! ==============================================================================
! Cut on Sill side
! ==============================================================================

numCuts = 0

material gs_trim_out_mat

if bRightCornerFunction then

	! --- Cut right side in case of Corner Window ---

	add rightCwDx + rightWidth + WIDO_FRAME_THICKNESS * rx, 0, 0
	rotx 90

	maxDist  = WIDO_SILL + casingOverhangOut

	if abs(maxDist) > EPS then
		cutpolya 4, 1, 0,
			0, 0, 8,
			maxDist / tan(rightCornerAngle / 2), -maxDist, 10,
			10 * A, -maxDist, 8,
			10 * A, 0, 8

		numCuts = numCuts + 1
	endif

	del 2
endif

if bLeftCornerFunction then

	! --- Cut left side in case of Corner Window ---

	add -leftCwDx - leftWidth - WIDO_FRAME_THICKNESS * lx, 0, 0
	rotx 90

	maxDist  = WIDO_SILL + casingOverhangOut

	if abs(maxDist) > EPS then
		cutpolya 4, 1, 0,
			0, 0, 8,
			-maxDist / tan(leftCornerAngle / 2), -maxDist, 10,
			-10 * A, -maxDist, 8,
			-10 * A, 0, 8

		numCuts = numCuts + 1
	endif

	del 2
endif

! --- Casing Set Back on Sides ---
if bHasCasingSetBackOut then
	add 0, -gs_trim_width_ou * isWindow, -casingSetBackOnSides_out
	rotx 90

	material gs_trim_out_mat
	cutform 4, 1, 1+2,
		0, 0, 1, B*2,
		lengthCasingSetback/2,	0,							1,
		lengthCasingSetback/2,	casingSetBackOnSides_out,	1,
		-lengthCasingSetback/2,	casingSetBackOnSides_out,	1,
		-lengthCasingSetback/2,	0,							1
	numCuts = numCuts + 1
	del 2
endif


! ==============================================================================
!	Draw Outside Trim
! ==============================================================================

if bDrawOutsideTrim then


	material gs_trim_out_mat

	if	bPShapedLeftOpening & not(gs_trim_below_sillLeft) then

		add -sillRight_sL, -gs_sidelight_parapet_hgt_left - sillBottom - sillSideHeight - (gs_reveal_bottom_sR - gs_reveal_bottom), 0
		roty 90
		rotz 90

		cutform 4, 1, 2+16,
			0, 0, 1, EPS,
			0,0,15,
			0.5 * tan(sillSideAngle), -0.5, 15,
			0.5 * tan(sillSideAngle) + 0.5, -0.5, 15,
			0.5 * tan(sillSideAngle) + 0.5, 0, 15
		numCuts = numCuts + 1
		del 3
	endif

	if	bPShapedRightOpening & not(gs_trim_below_sillRight) then

		add sillLeft_sR, -gs_sidelight_parapet_hgt_right - sillBottom - sillSideHeight - (gs_reveal_bottom_sR - gs_reveal_bottom), 0
		roty 90
		rotz 90
		mulz -1

		cutform 4, 1, 2+16,
			0, 0, 1, EPS,
			0,0,15,
			0.5 * tan(sillSideAngle), -0.5, 15,
			0.5 * tan(sillSideAngle) + 0.5, -0.5, 15,
			0.5 * tan(sillSideAngle) + 0.5, 0, 15
		numCuts = numCuts + 1
		del 4
	endif


	if bSillPlaneCut then
		if bDrawSill then
			add 0, -sillBottom-sillSideHeight, 0
			rotx -90 + sillSideAngle
			cutplane
			numCuts = numCuts + 1
			del 2
		endif
	endif

	if bThresholdSillPlaneCut then
		add 0, -ThresholdSillSideHeight, 0
		rotx -90
		cutplane
		numCuts = numCuts + 1
		del 2
	endif

	gosub 2000

endif

! ==============================================================================

for i = 1 to numCuts
	cutend
next i


! Restore the saved parameter buffer ===========================================

call "LoadQueue" parameters savedQueueValues = savedQueueValues

! ==============================================================================
 end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end
! ==============================================================================


1000:
! ==============================================================================
!	Draw Inside Trim
! ==============================================================================

	pen gs_frame_pen

	numCutsCornerColumn = 0

	if gs_corner_column then
		matTrim = gs_trim_in_mat

		material gs_trim_in_mat
		sect_fill gs_trim_fill_in, gs_trim_pen_bg_in, gs_trim_pen_fg_in, gs_trim_pen_cont_in

		gosub 100
	endif

	rotx 180

	! ===== Draw Trim Inside =====

	if not(curvedWall) | (curvedWall & gs_trim_atframe_in) then

		! ======================================
		! Inside Trim - Straight Walls
		! ======================================

		addz (-WALL_THICKNESS + WIDO_SILL) * not(gs_trim_atframe_in) - WIDO_FRAME_THICKNESS *gs_trim_atframe_in

		if bTelescopic then
			thk = WALL_THICKNESS
		else
			thk = WALL_THICKNESS - WIDO_SILL - WIDO_FRAME_THICKNESS + gs_trim_jambext_nosing_in + WIDO_FRAME_THICKNESS * gs_sectgar
		endif
		wallIncl = iDir * WALL_INCL

		mask = 10 +\
				1 * bShowEdgesAtFrame +\
				4 * (gs_trim_offs_in > EPS | not(bShowJambExtension) | abs(WALL_THICKNESS - WIDO_SILL - WIDO_FRAME_THICKNESS) < EPS | not(gs_trim_show_cover_in) | abs(gs_trim_thk_in) < EPS)

		if gs_trim_width_in > EPS & thk > EPS & bShowJambExtension & not(gs_trim_atframe_in) then

			matTrim = gs_trim_in_mat

			material gs_trim_in_mat
			sect_fill gs_trim_fill_in, gs_trim_pen_bg_in, gs_trim_pen_fg_in, gs_trim_pen_cont_in

			! ===== Inside Trim - Straight Walls - Jamb Extensions =====

			maxx = 0
			if abs(wallIncl) > EPS then maxx = abs(thk / tan(wallIncl))		! Maximal distance from origin where the sprism doesn't intersects itself

			addz thk - gs_trim_jambext_nosing_in
			mulz -1

			leftNosingDx   = gs_trim_jambext_nosing_in * tan(gs_reveal_left_angle)   * not(gs_stack_left)
			rightNosingDx  = gs_trim_jambext_nosing_in * tan(gs_reveal_right_angle)  * not(gs_stack_right)
			topNosingDx    = gs_trim_jambext_nosing_in * tan(gs_reveal_top_angle)    * not(gs_stack_top)
			bottomNosingDx = gs_trim_jambext_nosing_in * tan(gs_reveal_bottom_angle) * not(gs_stack_bottom)

			if not(	gs_stack_left | \
					gs_stack_right | \
					gs_stack_top | \
					gs_stack_bottom | \
					bDrawBoard | \
					bLeftCornerFunction | \
					bRightCornerFunction | \
					iWindowShape = SHAPE_ARCHED | \
					iWindowShape = SHAPE_ARCHED_T | \
					iWindowShape = SHAPE_ELLIPSEARCH | \
					not(isWindow)) then
				! --- Not Stacked Window, have no Sill and not a Special Window (eg. Arched) ---

				if not(bInclinedWall) then
					if iRevealType <> REVEAL_SLANTED & iRevealType <> REVEAL_SPLAYED & iRevealType <> REVEAL_HISTORIC & iRevealType <> REVEAL_DOUBLE_SPLAYED then
						cprism_{2} matTrim, matTrim, matTrim,
							10, thk,
							-leftWidth  - overSizeLeftIn  + tolerOffsetLeftIn,		-overSizeBottomIn + tolerOffsetLowerIn, 0, 15, gs_trim_in_mat,
							-leftWidth  - overSizeLeftIn  + tolerOffsetLeftIn,		B + overSizeTopIn - tolerOffsetUpperIn, 0, 15, gs_trim_in_mat,
							 rightWidth + overSizeRightIn - tolerOffsetRightIn,		B + overSizeTopIn - tolerOffsetUpperIn, 0, 15, gs_trim_in_mat,
							 rightWidth + overSizeRightIn - tolerOffsetRightIn,		-overSizeBottomIn + tolerOffsetLowerIn, 0, 15, gs_trim_in_mat,
							-leftWidth  - overSizeLeftIn  + tolerOffsetLeftIn,		-overSizeBottomIn + tolerOffsetLowerIn, 0, -1, gs_trim_in_mat,
							-leftWidth  - overSizeLeftIn  + tolerOffsetLeftIn  + gs_trim_width_in,	-overSizeBottomIn + tolerOffsetLowerIn + gs_trim_width_in, 0, mask, gs_trim_in_mat,
							-leftWidth  - overSizeLeftIn  + tolerOffsetLeftIn  + gs_trim_width_in,	B + overSizeTopIn - tolerOffsetUpperIn - gs_trim_width_in, 0, mask, gs_trim_in_mat,
							 rightWidth + overSizeRightIn - tolerOffsetRightIn - gs_trim_width_in,	B + overSizeTopIn - tolerOffsetUpperIn - gs_trim_width_in, 0, mask, gs_trim_in_mat,
							 rightWidth + overSizeRightIn - tolerOffsetRightIn - gs_trim_width_in,	-overSizeBottomIn + tolerOffsetLowerIn + gs_trim_width_in, 0, mask, gs_trim_in_mat,
							-leftWidth  - overSizeLeftIn  + tolerOffsetLeftIn  + gs_trim_width_in,	-overSizeBottomIn + tolerOffsetLowerIn + gs_trim_width_in, 0, -1, gs_trim_in_mat
					else
						ruled{2} 4, 1 + 2 + 4 + 16 + 32 * not(gs_trim_show_cover_in) + 64,
							leftRevealPnts[idxBoardEndRevealLeft - 1][1] + tolerOffsetLeftIn,			-overSizeBottomIn + tolerOffsetLowerIn + bDrawBoard * boardBottom, 1,
							leftRevealPnts[idxBoardEndRevealLeft - 1][1] + tolerOffsetLeftIn + trinL,	-overSizeBottomIn + tolerOffsetLowerIn + bDrawBoard * boardBottom + trinB, 1,
							leftRevealPnts[idxBoardEndRevealLeft - 1][1] + tolerOffsetLeftIn + trinL,	B + overSizeTopIn - tolerOffsetUpperIn - trinT, 1,
							leftRevealPnts[idxBoardEndRevealLeft - 1][1] + tolerOffsetLeftIn,			B + overSizeTopIn - tolerOffsetUpperIn, 1,

							leftRevealPnts[idxBoardEndRevealLeft][1] + tolerOffsetLeftIn - leftNosingDx,			-overSizeBottomIn + tolerOffsetLowerIn - sjby - bottomNosingDx + bDrawBoard * boardBottom, thk,
							leftRevealPnts[idxBoardEndRevealLeft][1] + tolerOffsetLeftIn - leftNosingDx + trinL,	-overSizeBottomIn + tolerOffsetLowerIn - sjby - bottomNosingDx + bDrawBoard * boardBottom + trinB, thk,
							leftRevealPnts[idxBoardEndRevealLeft][1] + tolerOffsetLeftIn - leftNosingDx + trinL,	B + overSizeTopIn - tolerOffsetUpperIn + sjty + topNosingDx - trinT, thk,
							leftRevealPnts[idxBoardEndRevealLeft][1] + tolerOffsetLeftIn - leftNosingDx,			B + overSizeTopIn - tolerOffsetUpperIn + sjty + topNosingDx, thk

						ruled{2} 4, 1 + 2 + 4 + 16 + 32 * not(gs_trim_show_cover_in) + 64,
							rightRevealPnts[idxBoardEndRevealright - 1][1] - tolerOffsetRightIn,			-overSizeBottomIn + tolerOffsetLowerIn + bDrawBoard * boardBottom, 1,
							rightRevealPnts[idxBoardEndRevealright - 1][1] - tolerOffsetRightIn - trinR,	-overSizeBottomIn + tolerOffsetLowerIn + bDrawBoard * boardBottom + trinB, 1,
							rightRevealPnts[idxBoardEndRevealright - 1][1] - tolerOffsetRightIn - trinR,	B + overSizeTopIn - tolerOffsetUpperIn - trinT, 1,
							rightRevealPnts[idxBoardEndRevealright - 1][1] - tolerOffsetRightIn,			B + overSizeTopIn - tolerOffsetUpperIn, 1,

							rightRevealPnts[idxBoardEndRevealright][1] - tolerOffsetRightIn + rightNosingDx,		 -overSizeBottomIn + tolerOffsetLowerIn - sjby - bottomNosingDx + bDrawBoard * boardBottom, thk,
							rightRevealPnts[idxBoardEndRevealright][1] - tolerOffsetRightIn + rightNosingDx - trinR, -overSizeBottomIn + tolerOffsetLowerIn - sjby - bottomNosingDx + bDrawBoard * boardBottom + trinB, thk,
							rightRevealPnts[idxBoardEndRevealright][1] - tolerOffsetRightIn + rightNosingDx - trinR, B + overSizeTopIn - tolerOffsetUpperIn + sjty + topNosingDx - trinT, thk,
							rightRevealPnts[idxBoardEndRevealright][1] - tolerOffsetRightIn + rightNosingDx,		 B + overSizeTopIn - tolerOffsetUpperIn + sjty + topNosingDx, thk

						ruled{2} 4, 1 + 2 + 4 + 16 + 32 * not(gs_trim_show_cover_in) + 64,
							 leftRevealPnts[idxBoardEndRevealLeft  - 1][1] + tolerOffsetLeftIn,			 -overSizeBottomIn + tolerOffsetLowerIn + bDrawBoard * boardBottom, 1,
							rightRevealPnts[idxBoardEndRevealRight - 1][1] - tolerOffsetRightIn,		 -overSizeBottomIn + tolerOffsetLowerIn + bDrawBoard * boardBottom, 1,
							rightRevealPnts[idxBoardEndRevealRight - 1][1] - tolerOffsetRightIn - trinR, -overSizeBottomIn + tolerOffsetLowerIn + bDrawBoard * boardBottom + trinB, 1,
							 leftRevealPnts[idxBoardEndRevealLeft  - 1][1] + tolerOffsetLeftIn  + trinL, -overSizeBottomIn + tolerOffsetLowerIn + bDrawBoard * boardBottom + trinB, 1,

							 leftRevealPnts[idxBoardEndRevealLeft ][1] + tolerOffsetLeftIn  - leftNosingDx,			 -overSizeBottomIn + tolerOffsetLowerIn - sjby - bottomNosingDx + bDrawBoard * boardBottom, thk,
							rightRevealPnts[idxBoardEndRevealRight][1] - tolerOffsetRightIn + rightNosingDx,		 -overSizeBottomIn + tolerOffsetLowerIn - sjby - bottomNosingDx + bDrawBoard * boardBottom, thk,
							rightRevealPnts[idxBoardEndRevealRight][1] - tolerOffsetRightIn + rightNosingDx - trinR, -overSizeBottomIn + tolerOffsetLowerIn - sjby - bottomNosingDx + bDrawBoard * boardBottom + trinB, thk,
							 leftRevealPnts[idxBoardEndRevealLeft ][1] + tolerOffsetLeftIn  - leftNosingDx  + trinL, -overSizeBottomIn + tolerOffsetLowerIn - sjby - bottomNosingDx + bDrawBoard * boardBottom + trinB, thk

						ruled{2} 4, 1 + 2 + 4 + 16 + 32 * not(gs_trim_show_cover_in) + 64,
							 leftRevealPnts[idxBoardEndRevealLeft  - 1][1] + tolerOffsetLeftIn,			 B + overSizeTopIn - tolerOffsetUpperIn, 1,
							rightRevealPnts[idxBoardEndRevealRight - 1][1] - tolerOffsetRightIn,		 B + overSizeTopIn - tolerOffsetUpperIn, 1,
							rightRevealPnts[idxBoardEndRevealRight - 1][1] - tolerOffsetRightIn - trinR, B + overSizeTopIn - tolerOffsetUpperIn - trinT, 1,
							 leftRevealPnts[idxBoardEndRevealLeft  - 1][1] + tolerOffsetLeftIn  + trinL, B + overSizeTopIn - tolerOffsetUpperIn - trinT, 1,

							 leftRevealPnts[idxBoardEndRevealLeft ][1] + tolerOffsetLeftIn  - leftNosingDx,			 B + overSizeTopIn - tolerOffsetUpperIn + sjty + topNosingDx, thk,
							rightRevealPnts[idxBoardEndRevealRight][1] - tolerOffsetRightIn + rightNosingDx,		 B + overSizeTopIn - tolerOffsetUpperIn + sjty + topNosingDx, thk,
							rightRevealPnts[idxBoardEndRevealRight][1] - tolerOffsetRightIn + rightNosingDx - trinR, B + overSizeTopIn - tolerOffsetUpperIn + sjty + topNosingDx - trinT, thk,
							 leftRevealPnts[idxBoardEndRevealLeft ][1] + tolerOffsetLeftIn  - leftNosingDx  + trinL, B + overSizeTopIn - tolerOffsetUpperIn + sjty + topNosingDx - trinT, thk
					endif
				else
					if iRevealType <> REVEAL_SLANTED & iRevealType <> REVEAL_SPLAYED & iRevealType <> REVEAL_HISTORIC & iRevealType <> REVEAL_DOUBLE_SPLAYED then
						sprism_ matTrim, matTrim, matTrim,
							10, 0,0, 0,1, thk, wallIncl,
							-leftWidth  - overSizeLeftIn + tolerOffsetLeftIn,		-overSizeBottomIn + tolerOffsetLowerIn, 15,
							-leftWidth  - overSizeLeftIn + tolerOffsetLeftIn,		B + overSizeTopIn - tolerOffsetUpperIn, 15,
							 rightWidth + overSizeRightIn - tolerOffsetRightIn,	B + overSizeTopIn - tolerOffsetUpperIn, 15,
							 rightWidth + overSizeRightIn - tolerOffsetRightIn,	-overSizeBottomIn + tolerOffsetLowerIn, 15,
							-leftWidth  - overSizeLeftIn + tolerOffsetLeftIn,		-overSizeBottomIn + tolerOffsetLowerIn, -1,
							-leftWidth  - overSizeLeftIn + tolerOffsetLeftIn  + gs_trim_width_in,	-overSizeBottomIn + tolerOffsetLowerIn + gs_trim_width_in, mask,
							-leftWidth  - overSizeLeftIn + tolerOffsetLeftIn  + gs_trim_width_in,	B + overSizeTopIn - gs_trim_width_in - tolerOffsetUpperIn, mask,
							 rightWidth + overSizeRightIn - tolerOffsetRightIn - gs_trim_width_in,	B + overSizeTopIn - gs_trim_width_in - tolerOffsetUpperIn, mask,
							 rightWidth + overSizeRightIn - tolerOffsetRightIn - gs_trim_width_in,	-overSizeBottomIn + tolerOffsetLowerIn + gs_trim_width_in, mask,
							-leftWidth  - overSizeLeftIn + tolerOffsetLeftIn  + gs_trim_width_in,	-overSizeBottomIn + tolerOffsetLowerIn + gs_trim_width_in, -1
					endif
				endif
			else
				! --- Stacked Window or Window with Board or Corner Window ---


				! --- Draw left side Jamb Extension ---

				px1 = leftRevealPnts[idxBoardEndRevealright-1][1] + tolerOffsetLeftIn
				px2 = px1 + gs_trim_width_in * not(gs_stack_left)

				if	bShapeEnablesStraightTopTrim then
					py1 = B + overSizeTopIn - tolerOffsetUpperIn
					py2 = py1 - not(gs_stack_top) * gs_trim_width_in

					s1 = 8 + 2 * not(gs_stack_top)		! 15 or 8
					s2 = bitset (mask, 1, not(gs_stack_top))
				endif

				if	bShapeEnablesArchedTopTrim then
					ta = leftWidth + overSizeTopIn - tolerOffsetLeftIn
					tc = arcR + overSizeTopIn
					py1 = B - arcR - tolerOffsetUpper + sqr(max(0, (tc * tc - ta * ta)))

					ta = ta - gs_trim_width_in
					tc = tc - gs_trim_width_in
					py2 = B - arcR - tolerOffsetUpper + sqr(max(0, (tc * tc - ta * ta)))

					archTrimDiff = py1 - py2

					s1 = 8
					s2 = mask - 2
				endif

				if iWindowShape = SHAPE_ELLIPSEARCH then
					py1 = B - archHeight		! + overSizeTopIn
					py2 = py1

					s1 = 8
					s2 = mask - 2
				endif

				if	isWindow | \
					(bPShapedLeftOpening & gs_trim_below_boardLeft) then
					py3 = -overSizeBottomIn + not(gs_stack_bottom | bDrawLeftSLBoard) * (gs_trim_width_in + tolerOffsetLowerIn)
					py4 = -overSizeBottomIn + not(gs_stack_bottom | bDrawLeftSLBoard) * tolerOffsetLowerIn

					s3 = 8 + 7 * not(gs_stack_bottom) * bDrawBoard * isWindow + 2 * not(isWindow) 		! 15 or 8
					s4 = 13 + 2 * not(gs_stack_bottom)		! 15 or 13
				else
					py3 = -overSizeBottomIn
					py4 = -overSizeBottomIn

					s3 = 15
					s4 = 15
				endif

				py1r = (-overSizeBottomIn + (tolerOffsetLowerIn * not(bDrawLeftSLBoard)) ) * ((isWindow & not(gs_stack_bottom))) - overSizeBottomIn * not(isWindow) * not(bPShapedLeftOpening)
				py2r = py1r + trinB * ( (isWindow & not(gs_stack_bottom) & not(bDrawBoard)) | (bPShapedLeftOpening & gs_trim_below_boardLeft) )
				py3r = B + (overSizeTopIn - tolerOffsetUpperIn - trinT * (iWindowShape = SHAPE_RECTANGULAR) - (archHeight) - archTrimDiff * not(bHalfCircle)) * not(gs_stack_top)				! tok - belso - felso
				py4r = B + (overSizeTopIn - tolerOffsetUpperIn - (archHeight)) * not(gs_stack_top)					! tok - fal - felso
				py5r = (-overSizeBottomIn + (tolerOffsetLowerIn * not(bDrawLeftSLBoard)) - sjby) * (isWindow & not(gs_stack_bottom)) - overSizeBottomIn * not(isWindow) * not(bPShapedLeftOpening)
				py6r = py5r + trinB * ( (isWindow & not(gs_stack_bottom) & not(bDrawBoard)) | (bPShapedLeftOpening & gs_trim_below_boardLeft) )
				py7r = B + (overSizeTopIn - tolerOffsetUpperIn - trinT * (iWindowShape = SHAPE_RECTANGULAR) + sjty - (archHeight) - archTrimDiff * not(bHalfCircle)) * not(gs_stack_top)	! falsik - belso - felso
				py8r = B + (overSizeTopIn - tolerOffsetUpperIn + sjty - (archHeight)) * not(gs_stack_top)				! falsik - fal - felso

				if	bShapeEnablesArchedTopTrim | \
					iWindowShape = SHAPE_ELLIPSEARCH then
					py3r = py2
					py4r = py1
				endif

				if	bPShapedLeftOpening then
					py1r = py1r + gs_sidelight_parapet_hgt_left + gs_reveal_double_innerBottom_sL
					py2r = py2r + gs_sidelight_parapet_hgt_left + gs_reveal_double_innerBottom_sL
					py5r = py2r + gs_sidelight_parapet_hgt_left + gs_reveal_double_innerBottom_sL
					py6r = py2r + gs_sidelight_parapet_hgt_left + gs_reveal_double_innerBottom_sL
					py3 = py3 + gs_sidelight_parapet_hgt_left + gs_reveal_double_innerBottom_sL + overSizeBottomIn
					py4 = py4 + gs_sidelight_parapet_hgt_left + gs_reveal_double_innerBottom_sL + overSizeBottomIn
				endif

				if not(gs_stack_left | bLeftCornerFunction) & bShapeEnablesStraightLeftTrim then

					if maxx < EPS | ((sgn(px1) = sgn(wallIncl) | abs(px1) < maxx) & (sgn(px2) = sgn(wallIncl) | abs(px2) < maxx)) then
						addz (not(isWindow) & not(WIDO_REVEAL_SIDE)) * pocketThkLeft

						if bInclinedWall then
							if iRevealType <> REVEAL_SLANTED & iRevealType <> REVEAL_SPLAYED & iRevealType <> REVEAL_HISTORIC & iRevealType <> REVEAL_DOUBLE_SPLAYED then
								sprism_ matTrim, matTrim, matTrim,
									4, 0,0, 0,1, thk - pocketThkLeft, wallIncl,
									px1,	py1, 	s1,
									px2,	py2, 	s2,
									px2,	py3,	s3,
									px1,	py4, 	s4
							endif
						else
							if iRevealType <> REVEAL_SLANTED & iRevealType <> REVEAL_SPLAYED & iRevealType <> REVEAL_HISTORIC & iRevealType <> REVEAL_DOUBLE_SPLAYED then
								cprism_{2} gs_trim_in_mat, gs_trim_in_mat, gs_trim_in_mat,
									4, thk,
									leftRevealPnts[idxBoardEndRevealLeft-1][1] + tolerOffsetLeftIn,			py4,	0, 8 + 7 * not(bPShapedLeftOpening) * not(isWindow), gs_trim_in_mat,
									leftRevealPnts[idxBoardEndRevealLeft-1][1] + tolerOffsetLeftIn + trinL,	py3,	0, 8 + 1 * bShowEdgesAtFrame + 2 * not(gs_stack_bottom) + 4 * (abs(gs_trim_offs_in) > EPS | not(gs_trim_show_cover_in) | abs(gs_trim_thk_in) < EPS), gs_trim_in_mat,
									leftRevealPnts[idxBoardEndRevealLeft-1][1] + tolerOffsetLeftIn + trinL,	py3r,	0, s1, gs_trim_in_mat,
									leftRevealPnts[idxBoardEndRevealLeft-1][1] + tolerOffsetLeftIn,			py4r,	0, 15, gs_trim_in_mat
							else
								ruled{2} 4, 1 + 2 + 4 + 16 + 32 * not(gs_trim_show_cover_in) + 64,
									leftRevealPnts[idxBoardEndRevealLeft-1][1] + tolerOffsetLeftIn,			py1r, 1,
									leftRevealPnts[idxBoardEndRevealLeft-1][1] + tolerOffsetLeftIn + trinL,	py2r, 1,
									leftRevealPnts[idxBoardEndRevealLeft-1][1] + tolerOffsetLeftIn + trinL,	py3r, 1,
									leftRevealPnts[idxBoardEndRevealLeft-1][1] + tolerOffsetLeftIn,			py4r, 1,

									leftRevealPnts[idxBoardEndRevealLeft][1] + tolerOffsetLeftIn - leftNosingDx,			py5r - bottomNosingDx, thk,
									leftRevealPnts[idxBoardEndRevealLeft][1] + tolerOffsetLeftIn - leftNosingDx + trinL,	py6r - bottomNosingDx, thk,
									leftRevealPnts[idxBoardEndRevealLeft][1] + tolerOffsetLeftIn - leftNosingDx + trinL,	py7r + topNosingDx, thk,
									leftRevealPnts[idxBoardEndRevealLeft][1] + tolerOffsetLeftIn - leftNosingDx,			py8r + topNosingDx, thk

								if abs(gs_trim_offs_in) > EPS | abs(gs_trim_thk_in) < EPS then
									lin_ leftRevealPnts[idxBoardEndRevealleft][1] + tolerOffsetLeftIn - leftNosingDx + trinL, py6r - bottomNosingDx, thk,
										 leftRevealPnts[idxBoardEndRevealleft][1] + tolerOffsetLeftIn - leftNosingDx + trinL, py7r + topNosingDx, thk
								endif
							endif
						endif

						gosub "TextCoord_Vert"

						del 1
					endif
				endif
				if	bPShapedLeftOpening & gs_trim_below_boardLeft then
					! --- Draw Door's Left side Jamb Extension ---
					px1LSL = leftRevealPnts[idxBoardEndRevealright-1][1] + gs_sidelight_WHole_width_left
					px2LSL = px1LSL + gs_trim_width_in
					px1LSLW = leftRevealPnts[idxBoardEndRevealLeft-1][1] + tolerOffsetLeftIn
					px2LSLW = leftRevealPnts[idxBoardEndRevealLeft-1][1] + tolerOffsetLeftIn + trinL * not(gs_stack_left)

					py1 = -overSizeBottomIn
					py2 = -overSizeBottomIn

					sprism_ matTrim, matTrim, matTrim,
						4, 0,0, 0,1, thk - pocketThkRight, wallIncl,
						 px1LSL,	py1,	15,
						 px2LSL,	py2,	mask,
						 px2LSL,	py3,	s3,
						 px1LSL,	py4,	s4
					gosub "TextCoord_Vert"

					if	not(bDrawLeftSLBoard) then
						! --- Draw Left Sidelight lower side Jamb Extension ---
						sprism_ matTrim, matTrim, matTrim,
							4, 0,0, 0,1, thk - pocketThkRight, wallIncl,
							 px2LSL,	py3,	15,
							 px1LSL,	py4,	15,
							 px1LSLW,	py4,	15,
							 px2LSLW,	py3,	mask - 2 * gs_stack_left
						gosub "TextCoord_Hor"
					endif
				endif


				! --- Draw right side Jamb Extension ---

				px1 = rightRevealPnts[idxBoardEndRevealright - 1][1] - tolerOffsetRightIn
				px2 = px1 - gs_trim_width_in * not(gs_stack_right)

				if	bShapeEnablesStraightTopTrim then
					py1 = B + overSizeTopIn - tolerOffsetUpperIn
					py2 = py1 - not(gs_stack_top) * gs_trim_width_in

					s1 = 8 + 2 * not(gs_stack_top)			! 15 or 8
					s2 = bitset (mask, 1, not(gs_stack_top))
				endif

				if	bShapeEnablesArchedTopTrim then
					ta = rightWidth + overSizeTopIn - tolerOffsetRightIn
					tc = arcR + overSizeTopIn
					py1 = B - arcR - tolerOffsetUpper + sqr(max(0, (tc * tc - ta * ta)))

					ta = ta - gs_trim_width_in
					tc = tc - gs_trim_width_in
					py2 = B - arcR - tolerOffsetUpper + sqr(max(0, (tc * tc - ta * ta)))

					archTrimDiff = py1 - py2

					s1 = 8
					s2 = mask - 2
				endif

				if iWindowShape = SHAPE_ELLIPSEARCH then
					py1 = B - archHeight	! + overSizeTopIn
					py2 = py1

					s1 = 8
					s2 = mask - 2
				endif

				if	isWindow | \
					(bPShapedRightOpening & gs_trim_below_boardRight) then
					py3 = -overSizeBottomIn + not(gs_stack_bottom | bDrawRightSLBoard) * (gs_trim_width_in + tolerOffsetLowerIn)
					py4 = -overSizeBottomIn + not(gs_stack_bottom | bDrawRightSLBoard) * tolerOffsetLowerIn

					s3 = 8 + 7 * not(gs_stack_bottom) * bDrawBoard * isWindow + 2 * not(isWindow)		! 15 or 8
					s4 = 13 + 2 * not(gs_stack_bottom)		! 15 or 13
				else
					py3 = -overSizeBottomIn
					py4 = -overSizeBottomIn

					s3 = 15
					s4 = 15
				endif

				py1r = (-overSizeBottomIn + (tolerOffsetLowerIn * not(bDrawRightSLBoard)) ) * ((isWindow & not(gs_stack_bottom))) - overSizeBottomIn * not(isWindow) * not(bPShapedRightOpening)
				py2r = py1r + trinB * ( (isWindow & not(gs_stack_bottom) & not(bDrawBoard)) | (bPShapedRightOpening & gs_trim_below_boardRight ) )
				py3r = B + (overSizeTopIn - tolerOffsetUpperIn - trinT * (iWindowShape = SHAPE_RECTANGULAR) - (archHeight) - archTrimDiff * not(bHalfCircle)) * not(gs_stack_top)
				py4r = B + (overSizeTopIn - tolerOffsetUpperIn - (archHeight)) * not(gs_stack_top)
				py5r = (-overSizeBottomIn + (tolerOffsetLowerIn * not(bDrawRightSLBoard)) - sjby) * (isWindow & not(gs_stack_bottom)) - overSizeBottomIn * not(isWindow) * not(bPShapedRightOpening)
				py6r = py5r + trinB * ( (isWindow & not(gs_stack_bottom) & not(bDrawBoard)) | (bPShapedRightOpening & gs_trim_below_boardRight) )
				py7r = B + (overSizeTopIn - tolerOffsetUpperIn - trinT * (iWindowShape = SHAPE_RECTANGULAR) + sjty - (archHeight) - archTrimDiff * not(bHalfCircle)) * not(gs_stack_top)
				py8r = B + (overSizeTopIn - tolerOffsetUpperIn + sjty - (archHeight)) * not(gs_stack_top)

				if	bShapeEnablesArchedTopTrim | \
					iWindowShape = SHAPE_ELLIPSEARCH then
					py3r = py2
					py4r = py1
				endif

				if	bPShapedRightOpening then
					py1r = py1r + gs_sidelight_parapet_hgt_right + gs_reveal_double_innerBottom_sR
					py2r = py2r + gs_sidelight_parapet_hgt_right + gs_reveal_double_innerBottom_sR
					py5r = py2r + gs_sidelight_parapet_hgt_right + gs_reveal_double_innerBottom_sR
					py6r = py2r + gs_sidelight_parapet_hgt_right + gs_reveal_double_innerBottom_sR
					py3 = py3 + gs_sidelight_parapet_hgt_right + gs_reveal_double_innerBottom_sR + overSizeBottomIn
					py4 = py4 + gs_sidelight_parapet_hgt_right + gs_reveal_double_innerBottom_sR + overSizeBottomIn
				endif

				if not(gs_stack_right | bRightCornerFunction) & bShapeEnablesStraightRightTrim then

					if maxx < EPS | ((sgn(px1) = sgn(wallIncl) | abs(px1) < maxx) & (sgn(px2) = sgn(wallIncl) | abs(px2) < maxx)) then
						addz (not(isWindow) & not(WIDO_REVEAL_SIDE)) * pocketThkRight

						if bInclinedWall then
							if iRevealType <> REVEAL_SLANTED & iRevealType <> REVEAL_SPLAYED & iRevealType <> REVEAL_HISTORIC & iRevealType <> REVEAL_DOUBLE_SPLAYED then
								sprism_ matTrim, matTrim, matTrim,
									4, 0,0, 0,1, thk - pocketThkRight, wallIncl,
									 px1,	py1,	s1,
									 px2,	py2,	s2,
									 px2,	py3,	s3,
									 px1,	py4,	s4
							endif
						else
							if iRevealType <> REVEAL_SLANTED & iRevealType <> REVEAL_SPLAYED & iRevealType <> REVEAL_HISTORIC & iRevealType <> REVEAL_DOUBLE_SPLAYED then
								cprism_{2} gs_trim_in_mat, gs_trim_in_mat, gs_trim_in_mat,
									4,thk,
									rightRevealPnts[idxBoardEndRevealright - 1][1] - tolerOffsetRightIn,			py4,	0, 8 + 7 * not(bPShapedLeftOpening) * not(isWindow), gs_trim_in_mat,
									rightRevealPnts[idxBoardEndRevealright - 1][1] - tolerOffsetRightIn - trinR,	py3,	0, 8 + 1 * bShowEdgesAtFrame + 2 * not(gs_stack_bottom) + 4 * (abs(gs_trim_offs_in) > EPS | not(gs_trim_show_cover_in) | abs(gs_trim_thk_in) < EPS), gs_trim_in_mat,
									rightRevealPnts[idxBoardEndRevealright - 1][1] - tolerOffsetRightIn - trinR,	py3r,	0, s1, gs_trim_in_mat,
									rightRevealPnts[idxBoardEndRevealright - 1][1] - tolerOffsetRightIn,			py4r,	0, 15, gs_trim_in_mat
							else
								ruled{2} 4, 1 + 2 + 4 + 16 + 32 * not(gs_trim_show_cover_in) + 64,
									rightRevealPnts[idxBoardEndRevealright - 1][1] - tolerOffsetRightIn,			py1r, 1,
									rightRevealPnts[idxBoardEndRevealright - 1][1] - tolerOffsetRightIn - trinR,	py2r, 1,
									rightRevealPnts[idxBoardEndRevealright - 1][1] - tolerOffsetRightIn - trinR,	py3r, 1,
									rightRevealPnts[idxBoardEndRevealright - 1][1] - tolerOffsetRightIn,			py4r, 1,

									rightRevealPnts[idxBoardEndRevealright][1] - tolerOffsetRightIn + rightNosingDx,			py5r - bottomNosingDx, thk,
									rightRevealPnts[idxBoardEndRevealright][1] - tolerOffsetRightIn + rightNosingDx - trinR,	py6r - bottomNosingDx, thk,
									rightRevealPnts[idxBoardEndRevealright][1] - tolerOffsetRightIn + rightNosingDx - trinR,	py7r + topNosingDx, thk,
									rightRevealPnts[idxBoardEndRevealright][1] - tolerOffsetRightIn + rightNosingDx,			py8r + topNosingDx, thk

								if abs(gs_trim_offs_in) > EPS | abs(gs_trim_thk_in) < EPS then
									lin_ rightRevealPnts[idxBoardEndRevealright][1] - tolerOffsetRightIn + rightNosingDx - trinR, py6r - bottomNosingDx, thk,
										 rightRevealPnts[idxBoardEndRevealright][1] - tolerOffsetRightIn + rightNosingDx - trinR, py7r + topNosingDx, thk
								endif
							endif
						endif
						gosub "TextCoord_Vert"

						del 1
					endif
				endif

				if	bPShapedRightOpening & gs_trim_below_boardRight then
					! --- Draw Door's Right side Jamb Extension ---
					px1RSL = rightRevealPnts[idxBoardEndRevealright - 1][1] - gs_sidelight_WHole_width_right - gs_trim_width_in
					px2RSL = px1RSL + gs_trim_width_in
					px1RSLW = rightRevealPnts[idxBoardEndRevealright - 1][1] - tolerOffsetRightIn
					px2RSLW = rightRevealPnts[idxBoardEndRevealright - 1][1] - tolerOffsetRightIn - trinR * not(gs_stack_right)

					py1 = -overSizeBottomIn
					py2 = -overSizeBottomIn

					sprism_ matTrim, matTrim, matTrim,
						4, 0,0, 0,1, thk - pocketThkRight, wallIncl,
						 px2RSL,	py1,	15,
						 px1RSL,	py2,	mask,
						 px1RSL,	py3,	s3,
						 px2RSL,	py4,	s4
					gosub "TextCoord_Vert"

					if	not(bDrawRightSLBoard) then
						! --- Draw Right Sidelight lower side Jamb Extension ---
						sprism_ matTrim, matTrim, matTrim,
							4, 0,0, 0,1, thk - pocketThkRight, wallIncl,
							px1RSL,	py3,	15,
							px2RSL,	py4,	15,
							px1RSLW,py4,	15,
							px2RSLW,py3,	mask - 2 * gs_stack_right
						gosub "TextCoord_Hor"
					endif
				endif

				if bShapeEnablesStraightTopTrim & not(gs_stack_top) then
					! --- Draw upper side Jamb Extension ---

					px1 = -leftWidth - overSizeLeftIn + tolerOffsetLeftIn
					px2 = px1 + not(gs_stack_left) * gs_trim_width_in
					px4 = rightWidth + overSizeRightIn - tolerOffsetRightIn
					px3 = px4 - not(gs_stack_right) * gs_trim_width_in

					if maxx > EPS then
						if sgn(wallIncl) < 0 then
							px1 = min(maxx - EPS, px1)
							px2 = min(maxx - EPS, px2)
							px3 = min(maxx - EPS, px3)
							px4 = min(maxx - EPS, px4)
						else
							px1 = max(-maxx + EPS, px1)
							px2 = max(-maxx + EPS, px2)
							px3 = max(-maxx + EPS, px3)
							px4 = max(-maxx + EPS, px4)
						endif
					endif

					py1 = B + overSizeTopIn - tolerOffsetUpperIn
					py2 = B + overSizeTopIn - tolerOffsetUpperIn - gs_trim_width_in
					py3 = B + overSizeTopIn - tolerOffsetUpperIn - gs_trim_width_in
					py4 = B + overSizeTopIn - tolerOffsetUpperIn

					py1r = B + overSizeTopIn - tolerOffsetUpperIn
					py2r = B + overSizeTopIn - tolerOffsetUpperIn
					py3r = B + overSizeTopIn - tolerOffsetUpperIn - trinT
					py4r = B + overSizeTopIn - tolerOffsetUpperIn - trinT
					py5r = B + overSizeTopIn - tolerOffsetUpperIn + sjty
					py6r = B + overSizeTopIn - tolerOffsetUpperIn + sjty
					py7r = B + overSizeTopIn - tolerOffsetUpperIn + sjty - trinT
					py8r = B + overSizeTopIn - tolerOffsetUpperIn + sjty - trinT

					s1 = mask	!8 + 7 * not(gs_stack_left)
					s2 = 8 + 2 * not(gs_stack_right)
					s3 = 10 + 1 * bShowEdgesAtFrame + 4 * (abs(gs_trim_offs_in) > EPS | not(gs_trim_show_cover_in) | abs(gs_trim_thk_in) < EPS) - 2 * gs_stack_right
					s4 = 8 + 2 * not(gs_stack_left)

					if bInclinedWall then
						if iRevealType <> REVEAL_SLANTED & iRevealType <> REVEAL_SPLAYED & iRevealType <> REVEAL_HISTORIC & iRevealType <> REVEAL_DOUBLE_SPLAYED then
							sprism_ matTrim, matTrim, matTrim,
								4, 0,0, 0,1, thk, wallIncl,
								px1,	py1,	8 + 2 * not(gs_stack_left),			! 15 or 8
								px2,	py2,	bitset(bitset (mask, 1, not(gs_stack_left)), 0, not(bRightCornerFunction) | not(bFitModeRight)),
								px3,	py3,	8 + 2 * not(gs_stack_right),		! 15 or 8
								px4,	py4,	13 + 2 * not(gs_stack_right)		! 15 or 13
						endif
					else
						if iRevealType <> REVEAL_SLANTED & iRevealType <> REVEAL_SPLAYED & iRevealType <> REVEAL_HISTORIC & iRevealType <> REVEAL_DOUBLE_SPLAYED then
							if bLeftCornerFunction then
								pxL = min(leftRevealPnts[idxBoardEndRevealLeft][1], leftRevealPnts[idxBoardEndRevealLeft - 1][1]) - 1.0
							else
								pxL = leftRevealPnts[idxBoardEndRevealLeft - 1][1]
							endif
							if bRightCornerFunction then
								pxR = max(rightRevealPnts[idxBoardEndRevealRight][1], rightRevealPnts[idxBoardEndRevealRight - 1][1]) + 1.0
							else
								pxR = rightRevealPnts[idxBoardEndRevealRight - 1][1]
							endif
							cprism_{2} gs_trim_in_mat, gs_trim_in_mat, gs_trim_in_mat,
								4, thk,
								pxL + tolerOffsetLeftIn,														py1r, 0, s1, gs_trim_in_mat,
								pxR - tolerOffsetRightIn,														py2r, 0, s2, gs_trim_in_mat,
								pxR - tolerOffsetRightIn - not(gs_stack_right | bRightCornerFunction) * trinR,	py3r, 0, s3, gs_trim_in_mat,
								pxL + tolerOffsetLeftIn  + not(gs_stack_left  | bLeftCornerFunction)  * trinL,	py4r, 0, s4, gs_trim_in_mat
						else
							ruled{2} 4, 1 + 2 + 4 + 16 + 32 * not(gs_trim_show_cover_in),
								 leftRevealPnts[idxBoardEndRevealLeft  - 1][1] + tolerOffsetLeftIn,  py1r, 1,
								rightRevealPnts[idxBoardEndRevealRight - 1][1] - tolerOffsetRightIn, py2r, 1,
								rightRevealPnts[idxBoardEndRevealRight - 1][1] - tolerOffsetRightIn - not(gs_stack_right | bRightCornerFunction) * trinR, py3r, 1,
								 leftRevealPnts[idxBoardEndRevealLeft  - 1][1] + tolerOffsetLeftIn  + not(gs_stack_left  | bLeftCornerFunction)  * trinL, py4r, 1,

								 leftRevealPnts[idxBoardEndRevealLeft] [1] + tolerOffsetLeftIn  - leftNosingDx,  py5r + topNosingDx, thk,
								rightRevealPnts[idxBoardEndRevealRight][1] - tolerOffsetRightIn + rightNosingDx, py6r + topNosingDx, thk,
								rightRevealPnts[idxBoardEndRevealRight][1] - tolerOffsetRightIn + rightNosingDx - not(gs_stack_right | bRightCornerFunction) * trinR, py7r + topNosingDx, thk,
								 leftRevealPnts[idxBoardEndRevealLeft ][1] + tolerOffsetLeftIn  - leftNosingDx  + not(gs_stack_left  | bLeftCornerFunction)  * trinL, py8r + topNosingDx, thk

							if abs(gs_trim_offs_in) > EPS | abs(gs_trim_thk_in) < EPS then
								lin_ leftRevealPnts[idxBoardEndRevealLeft ][1] + tolerOffsetLeftIn  - leftNosingDx  + not(gs_stack_left  | bLeftCornerFunction)  * trinL, py8r + topNosingDx, thk,
									rightRevealPnts[idxBoardEndRevealRight][1] - tolerOffsetRightIn + rightNosingDx - not(gs_stack_right | bRightCornerFunction) * trinR, py7r + topNosingDx, thk
							endif
						endif
					endif
				endif
				if	bShapeEnablesArchedTopTrim then

					resol nArchResolution
					addy B - archHeight - tolerOffsetUpperIn

					px1L = -leftWidth - overSizeLeftIn + tolerOffsetLeftIn
					px2L = px1L + gs_trim_width_in

					px1R = rightWidth + overSizeRightIn - tolerOffsetRightIn
					px2R = px1R - gs_trim_width_in

					if maxx < EPS | abs(px1L) < maxx | abs(px1R) < maxx then

						if bHalfCircle then

							sprism_ matTrim, matTrim, matTrim,
								9, 0,0, 0,1, thk, wallIncl,
								px1L,	0, 	   8 + 7 * gs_stack_left,		! 15 or 8
								px2L,	0,	  62 + mask,
								 0,		0,	 900,
								 0,	archHeight - gs_trim_width_in,	3062 + mask,		! 1015 or 1008
								 px2R,	0,	3008 + 7 * gs_stack_right,		! 1015 or 1008
								 px1R,	-EPS,  8 + 7 * gs_stack_right,		! 15 or 8
								 px1R,	0,	  79,
								 0,		archHeight, 	3079,
								px1L,	0, 	3015

							! --- Draw missing lines ---
							if gs_stack_left then lin_ px2L,0,0, px2L,0,thk + px2L * tan(wallIncl)
						else
							ta = leftWidth + overSizeTopIn - tolerOffsetLeftIn
							tc = arcR + overSizeTopIn
							py1L = sqr(max(0, (tc * tc - ta * ta))) - arcR + archHeight - tolerOffsetUpper

							ta = ta - gs_trim_width_in
							tc = tc - gs_trim_width_in
							py2L = sqr(max(0, (tc * tc - ta * ta))) - arcR + archHeight - tolerOffsetUpper

							ta = rightWidth + overSizeTopIn - tolerOffsetRightIn
							tc = arcR + overSizeTopIn
							py1R = sqr(max(0, (tc * tc - ta * ta))) - arcR + archHeight - tolerOffsetUpper

							ta = ta - gs_trim_width_in
							tc = tc - gs_trim_width_in
							py2R = sqr(max(0, (tc * tc - ta * ta))) - arcR + archHeight - tolerOffsetUpper

							sprism_ matTrim, matTrim, matTrim,
								8, 0,0, 0,1, thk, wallIncl,
								 0,		archHeight - arcR, 900,
								px1L,	py1L, 	  8 + 7 * gs_stack_left,		! 15 or 8
								px2L,	py2L,	  62 + mask,
								 0,		archHeight - gs_trim_width_in,	3062 + mask,		! 1015 or 1008
								 px2R,	py2R,	3010 + 5 * gs_stack_right,		! 1015 or 1008
								 px1R,	py1R,	  79,
								 0,		archHeight, 	3079,
								px1L,	py1L, 	3015

							lin_ px2L,py2L,0, px2L,py2L,thk + px2L * tan(wallIncl)
						endif

					endif

					del 1
				endif
				if iWindowShape = SHAPE_ELLIPSEARCH then

					resol nArchResolution

					px1 = -leftWidth - overSizeLeftIn + tolerOffsetLeftIn
					px2 = px1 + not(gs_stack_left) * gs_trim_width_in
					px4 = rightWidth + overSizeRightIn - tolerOffsetRightIn
					px3 = px4 - not(gs_stack_right) * gs_trim_width_in

					pxcL = -leftWidth + smallRadiusEllips
					pxcR = rightWidth - smallRadiusEllips

					py1 = B - tolerOffsetUpperIn

					s3 = 9 + 4 * (abs(gs_trim_offs_in) > EPS | not(gs_trim_show_cover_in) | abs(gs_trim_thk_in) < EPS) - 2 * gs_stack_right

					sprism_ matTrim, matTrim, matTrim,
						13, 0,0, 0,1, thk, wallIncl,
						px4,	py1 - archHeight,			13,
						pxcR,	py1 - archHeight,			913,
						0,		alphaSide,					4013,
						0,		py1 - middleRadiusEllips, 	913,
						0,		alphaMiddle,				4013,
						pxcL,	py1 - archHeight,			913,
						0,		alphaSide,					4008,
						px2,	py1 - archHeight,			s3,
						0,		-alphaSide,					4000+s3,
						0,		py1 - middleRadiusEllips, 	900+s3,
						0,		-alphaMiddle,				4000+s3,
						pxcR,	py1 - archHeight,			900+s3,
						0,		-alphaSide,					4000+s3
				endif
				gosub "TextCoord_Hor"

				if not(gs_stack_bottom) & isWindow & bShapeEnablesStraightBottomTrim & not (bDrawBoard) then
					! --- Draw lower side Jamb Extension ---

					px1 = -leftWidth - overSizeLeftIn + tolerOffsetLeftIn
					px2 = px1 + not(gs_stack_left) * gs_trim_width_in
					px4 = rightWidth + overSizeRightIn - tolerOffsetRightIn
					px3 = px4 - not(gs_stack_right) * gs_trim_width_in

					if  maxx > EPS then
						if sgn(wallIncl) < 0 then
							px1 = min(maxx - EPS, px1)
							px2 = min(maxx - EPS, px2)
							px3 = min(maxx - EPS, px3)
							px4 = min(maxx - EPS, px4)
						else
							px1 = max(-maxx + EPS, px1)
							px2 = max(-maxx + EPS, px2)
							px3 = max(-maxx + EPS, px3)
							px4 = max(-maxx + EPS, px4)
						endif
					endif

					if bInclinedWall then
						if iRevealType <> REVEAL_SLANTED & iRevealType <> REVEAL_SPLAYED & iRevealType <> REVEAL_HISTORIC & iRevealType <> REVEAL_DOUBLE_SPLAYED then
							sprism_ matTrim, matTrim, matTrim,
								4, 0,0, 0,1, thk, wallIncl,
								px1,	-overSizeBottomIn + tolerOffsetLowerIn, 						8 + 2 * not(gs_stack_left),		! 15 or 8
								px2,	-overSizeBottomIn + tolerOffsetLowerIn + gs_trim_width_in,		bitset(bitset (mask, 1, not(gs_stack_left)), 0, not(bRightCornerFunction) | not(bFitModeRight)),
								px3,	-overSizeBottomIn + tolerOffsetLowerIn + gs_trim_width_in,		8 + 2 * not(gs_stack_right),		! 15 or 8
								px4,	-overSizeBottomIn + tolerOffsetLowerIn, 						13 + 2 * not(gs_stack_right)		! 15 or 13
						endif
					else
						if iRevealType <> REVEAL_SLANTED & iRevealType <> REVEAL_SPLAYED & iRevealType <> REVEAL_HISTORIC & iRevealType <> REVEAL_DOUBLE_SPLAYED then
							if bLeftCornerFunction then
								pxL = min(leftRevealPnts[idxBoardEndRevealLeft][1], leftRevealPnts[idxBoardEndRevealLeft - 1][1]) - 1.0
							else
								pxL = leftRevealPnts[idxBoardEndRevealLeft - 1][1]
							endif
							if bRightCornerFunction then
								pxR = max(rightRevealPnts[idxBoardEndRevealRight][1], rightRevealPnts[idxBoardEndRevealRight - 1][1]) + 1.0
							else
								pxR = rightRevealPnts[idxBoardEndRevealRight - 1][1]
							endif

							cprism_{2} gs_trim_in_mat, gs_trim_in_mat, gs_trim_in_mat,
								4,thk,
								pxL + tolerOffsetLeftIn,														-overSizeBottomIn + tolerOffsetLowerIn,		0, 15, gs_trim_in_mat,
								pxR - tolerOffsetRightIn,														-overSizeBottomIn + tolerOffsetLowerIn,		0, 8 + 2 * not(gs_stack_right), gs_trim_in_mat,
								pxR - tolerOffsetRightIn - not(gs_stack_right | bRightCornerFunction) * trinR,	-overSizeBottomIn + tolerOffsetLowerIn + trinB,	0, mask, gs_trim_in_mat,
								pxL + tolerOffsetLeftIn  + not(gs_stack_left  | bLeftCornerFunction)  * trinL,	-overSizeBottomIn + tolerOffsetLowerIn + trinB,	0, 8 + 2 * not(gs_stack_left),  gs_trim_in_mat
						else
							ruled{2} 4, 1 + 2 + 4 + 16 + 32 * not(gs_trim_show_cover_in),
								 leftRevealPnts[idxBoardEndRevealLeft  - 1][1] + tolerOffsetLeftIn, -overSizeBottomIn + tolerOffsetLowerIn, 1,
								rightRevealPnts[idxBoardEndRevealRight - 1][1] - tolerOffsetRightIn, -overSizeBottomIn + tolerOffsetLowerIn, 1,
								rightRevealPnts[idxBoardEndRevealRight - 1][1] - tolerOffsetRightIn - not(gs_stack_right | bRightCornerFunction) * trinR, -overSizeBottomIn + tolerOffsetLowerIn + trinB, 1,
								 leftRevealPnts[idxBoardEndRevealLeft  - 1][1] + tolerOffsetLeftIn  + not(gs_stack_left  | bLeftCornerFunction)  * trinL, -overSizeBottomIn + tolerOffsetLowerIn + trinB, 1,

								 leftRevealPnts[idxBoardEndRevealLeft ][1] + tolerOffsetLeftIn  - leftNosingDx,											 -overSizeBottomIn + tolerOffsetLowerIn - bottomNosingDx - sjby, thk,
								rightRevealPnts[idxBoardEndRevealRight][1] - tolerOffsetRightIn + rightNosingDx,										 -overSizeBottomIn + tolerOffsetLowerIn - bottomNosingDx - sjby, thk,
								rightRevealPnts[idxBoardEndRevealRight][1] - tolerOffsetRightIn + rightNosingDx - not(gs_stack_right | bRightCornerFunction) * trinR, -overSizeBottomIn + tolerOffsetLowerIn - bottomNosingDx - sjby + trinB, thk,
								 leftRevealPnts[idxBoardEndRevealLeft ][1] + tolerOffsetLeftIn  - leftNosingDx  + not(gs_stack_left  | bLeftCornerFunction)  * trinL, -overSizeBottomIn + tolerOffsetLowerIn - bottomNosingDx - sjby + trinB, thk

							if abs(gs_trim_offs_in) > EPS | abs(gs_trim_thk_in) < EPS then
								lin_ rightRevealPnts[idxBoardEndRevealRight][1] - tolerOffsetRightIn + rightNosingDx - not(gs_stack_right | bRightCornerFunction) * trinR, -overSizeBottomIn + tolerOffsetLowerIn - bottomNosingDx + trinB - sjby, thk,
									  leftRevealPnts[idxBoardEndRevealLeft ][1] + tolerOffsetLeftIn  - leftNosingDx  + not(gs_stack_left  | bLeftCornerFunction)  * trinL, -overSizeBottomIn + tolerOffsetLowerIn - bottomNosingDx + trinB - sjby, thk
							endif
						endif
					endif
				endif
				gosub "TextCoord_Hor"
			endif

			del 2
		endif

		mask = 11 + 4 * (gs_trim_offs_in > EPS | not(bShowJambExtension) | abs(WALL_THICKNESS - WIDO_SILL - WIDO_FRAME_THICKNESS) < EPS | not(gs_trim_show_cover_in) | abs(gs_trim_thk_in) < EPS)

		if gs_trim_thk_in > EPS & gs_trim_show_cover_in & gs_sectgar = 0 then

			material gs_trim_in_mat
			sect_fill gs_trim_fill_in, gs_trim_pen_bg_in, gs_trim_pen_fg_in, gs_trim_pen_cont_in

			! ===== Inside Trim - Straight Walls - Casing =====

			maskTop		= 8 + 2 * not(gs_stack_top)
			maskBottom	= 8 + 2 * not(gs_stack_bottom)
			maskLeft	= 8 + 2 * not(gs_stack_left)
			maskRight	= 8 + 2 * not(gs_stack_right)

			maskLeft2	= bDrawBoard*(not(bTrimovbotleftin)*(15-7*gs_stack_left)+bTrimovbotleftin*(10-2*gs_stack_left))
			maskRight2	= bDrawBoard*(not(bTrimovbotrightin)*(15-7*gs_stack_right)+bTrimovbotrightin*(10-2*gs_stack_right))

			TrimLeftTopMiterAngle	= atn(gs_tw_top_in / gs_tw_left_in)
			TrimRightTopMiterAngle	= atn(gs_tw_top_in / gs_tw_right_in)
			TrimLeftBotMiterAngle	= atn(gs_tw_bottom_in / gs_tw_left_in)
			TrimRightBotMiterAngle	= atn(gs_tw_bottom_in / gs_tw_right_in)

			! --- Stacked Window or Window with Board or Corner Window ---

			if bInclinedWall & not(gs_trim_atframe_in) then
				if iRevealType <> REVEAL_SLANTED & iRevealType <> REVEAL_SPLAYED & iRevealType <> REVEAL_HISTORIC & iRevealType <> REVEAL_DOUBLE_SPLAYED then
					roty wallIncl
					addz -gs_trim_thk_in


					! --- Draw left side Trim Inclined Wall ---

					px2 = -(leftWidth - tolerOffsetLeftIn + overSizeLeftIn - gs_trim_width_in + gs_trim_offs_in) / cos(wallIncl) + gs_trim_thk_in * tan(wallIncl)
					px1 = px2 - gs_tw_left_in

					if	bShapeEnablesStraightTopTrim then
						py1 = B + overSizeTopIn + not(gs_stack_top) * (-gs_trim_width_in - tolerOffsetUpperIn + gs_trim_offs_in + gs_tw_top_in*not(bTrimovtopleftin))
						py2 = B + overSizeTopIn + not(gs_stack_top) * (- gs_trim_width_in - tolerOffsetUpperIn + gs_trim_offs_in)

						s1 = 15 - 7 * (gs_stack_top | bTrimovtopleftin)
						s2 = bitset (mask, 1, not(gs_stack_top))
					endif

					if	bShapeEnablesArchedTopTrim then
						ta = leftWidth + overSizeTopIn - tolerOffsetLeftIn - gs_trim_width_in + gs_trim_offs_in + gs_tw_right_in
						tc = arcR + overSizeTopIn - gs_trim_width_in + gs_trim_offs_in + gs_tw_right_in
						py1 = B - arcR - tolerOffsetUpper + sqr(max(0, (tc * tc - ta * ta)))

						ta = ta - gs_tw_right_in
						tc = tc - gs_tw_right_in
						py2 = B - arcR - tolerOffsetUpper + sqr(max(0, (tc * tc - ta * ta)))

						s1 = 8
						s2 = mask - 2
					endif

					if iWindowShape = SHAPE_ELLIPSEARCH then
						py1 = B + overSizeTopIn - archHeight
						py2 = py1

						s1 = 8
						s2 = mask - 2
					endif

					if	isWindow | \
						(bPShapedLeftOpening & gs_trim_below_boardLeft) then
						py3 = -overSizeBottomIn + not(bDrawLeftSLBoard) * tolerOffsetLowerIn + not(gs_stack_bottom) * (trinB*not(bDrawLeftSLBoard) - gs_trim_offs_in * not(gs_trim_atframe_in) * not(bDrawLeftSLBoard)\
							- gs_trimov_bot_left_in - gs_tw_bottom_in * bTrimovbotleftin * not(gs_apron) - gs_apron_width * bTrimovbotleftin * gs_apron) - sjby
						py4 = -overSizeBottomIn + not(bDrawLeftSLBoard) * tolerOffsetLowerIn + not(gs_stack_bottom) * (trinB*not(bDrawLeftSLBoard) - gs_trim_offs_in * not(gs_trim_atframe_in) * not(bDrawLeftSLBoard)\
							- gs_trimov_bot_left_in - gs_tw_bottom_in * (not(bDrawLeftSLBoard) | (bDrawLeftSLBoard & (bTrimovbotleftin | gs_trim_below_boardLeft))) * not(gs_apron) - gs_apron_width * bTrimovbotleftin * gs_apron) - sjby

						py5=py3 + not(gs_stack_bottom) * (gs_trimov_bot_left_in + gs_tw_bottom_in*bTrimovbotleftin * not(gs_apron) + gs_apron_width * bTrimovbotleftin * gs_apron)
						py6=py3 + not(gs_stack_bottom) * gs_trimov_bot_left_in

						s3 = 15	* isWindow + 15 * bPShapedLeftOpening					! 15 or 10 or 8
						s4 = 13 + 2 * not(gs_stack_bottom)	! 15 or 13
					else
						py3 = -overSizeBottomIn
						py4 = -overSizeBottomIn

						s3 = 15
						s4 = 15
					endif

					if	bPShapedLeftOpening then
						py3 = py3 + gs_sidelight_parapet_hgt_left + gs_reveal_double_innerBottom_sL + overSizeBottomIn
						py4 = py4 + gs_sidelight_parapet_hgt_left + gs_reveal_double_innerBottom_sL + overSizeBottomIn
						py5 = py5 + gs_sidelight_parapet_hgt_left + gs_reveal_double_innerBottom_sL + overSizeBottomIn
						py6 = py6 + gs_sidelight_parapet_hgt_left + gs_reveal_double_innerBottom_sL + overSizeBottomIn
					endif

					if not(gs_stack_left | bLeftCornerFunction) & bShapeEnablesStraightLeftTrim then
						! mitered joint of inclined casing
						addz gs_trim_thk_in
						roty -wallIncl + 90
						numMiterCuts = 0
						if bShapeEnablesStraightTopTrim & not(gs_stack_top) then
							if	not(gs_stack_top) & not(bTrimovtoprightin) then
								add 0, B + overSizeTopIn - gs_trim_width_in + gs_trim_offs_in, -leftWidth - overSizeLeftIn + tolerOffsetLeftIn + gs_trim_width_in - gs_trim_offs_in
								py2 = py1
								cutplane{2} 270 + TrimLeftTopMiterAngle, 4
								numMiterCuts = numMiterCuts + 1
								del 1
							endif
						endif
						if	bShapeEnablesArchedTopTrim then
							ta = leftWidth + overSizeTopIn - gs_trim_width_in + gs_trim_offs_in
							tc = arcR + overSizeTopIn - gs_trim_width_in + gs_trim_offs_in
							py1L = sqr(max(0, (tc * tc - ta * ta))) - arcR + archHeight

							ta = ta + gs_tw_right_in
							tc = tc + gs_tw_right_in
							py2L = sqr(max(0, (tc * tc - ta * ta))) - arcR + archHeight

							! mitered joint of inclined casing
							TrimLeftTopMiterAngle	= atn( (py2L - py1L) / (gs_tw_right_in * cos(wallIncl) - bDir * gs_trim_thk_in*incV) )

							py1 = py1 + gs_tw_right_in
							py2 = py1

							add 0, py1L + B - archHeight - tolerOffsetUpperIn, -leftWidth - overSizeLeftIn + tolerOffsetLeftIn + gs_trim_width_in - gs_trim_offs_in
							cutplane{2} 270 + TrimLeftTopMiterAngle, 4
							numMiterCuts = numMiterCuts + 1
							del 1
						endif
						if	((bPShapedLeftOpening & gs_trim_below_boardLeft) | isWindow) & not(bTrimovbotleftin) then
							add 0, gs_sidelight_parapet_hgt_left + gs_reveal_double_innerBottom_sL - (gs_trim_width_in - gs_trim_offs_in) * bDrawLeftSLBoard + gs_trim_width_in - gs_trim_offs_in, \
									-leftWidth - overSizeLeftIn + tolerOffsetLeftIn + gs_trim_width_in - gs_trim_offs_in
							py3 = py4
							cutplane{2} TrimLeftbotMiterAngle, 4
							numMiterCuts = numMiterCuts + 1
							del 1
						endif
						del 2

						body -1
						if (gs_apron & abs(gs_trim_thk_in - gs_apron_thk) < EPS) | (not(gs_apron) & (not(bDrawLeftSLBoard) | gs_trim_below_boardLeft)) then
							croof_ gs_trim_in_mat, gs_trim_in_mat, gs_trim_in_mat,
								4+2, 0,0, 1,0, 0, 0, -gs_trim_thk_in,
								px1,	py1,	0,			s1,
								px2,	py2,	wallIncl,	s2,
								px2,	py5,	wallIncl,	8,
								px2,	py6,	wallIncl,	15-2 * (gs_stack_bottom),
								px2,	py3,	0,			s3*not(bTrimovbotleftin) + bTrimovbotleftin * (15-7*gs_stack_bottom),
								px1,	py4,	0,			s4
						else
							croof_ gs_trim_in_mat, gs_trim_in_mat, gs_trim_in_mat,
								4+1, 0,0, 1,0, 0, 0, -gs_trim_thk_in,
								px1,	py1,	0,	s1,
								px2,	py2,	wallIncl*bTrimovbotleftin,	s2,
								px2,	py3+gs_tw_bottom_in * bTrimovbotleftin * not(gs_apron)+gs_trimov_bot_left_in, wallIncl*(bTrimovbotleftin), 15-6 * (gs_stack_bottom | ABS(gs_trim_offs_in) < EPS),
								px2,	py3+gs_tw_bottom_in * bTrimovbotleftin * not(gs_apron),	0, 15-7*gs_stack_bottom,
								px1,	py3+gs_tw_bottom_in * bTrimovbotleftin * not(gs_apron),	0, s4

							if not(gs_stack_bottom) & ABS(gs_trim_offs_in) < EPS & bTrimovbotleftin then
								lin_ px2-gs_trim_thk_in * tan(wallIncl),	py3+gs_tw_bottom_in * bTrimovbotleftin * not(gs_apron),							gs_trim_thk_in,
									 px2-gs_trim_thk_in * tan(wallIncl),	py3+gs_tw_bottom_in * bTrimovbotleftin * not(gs_apron)+gs_trimov_bot_left_in,	gs_trim_thk_in
								lin_ px2,	py3+gs_tw_bottom_in * bTrimovbotleftin * not(gs_apron)+gs_trimov_bot_left_in,	gs_trim_thk_in,
									 px2,	py3+gs_tw_bottom_in * bTrimovbotleftin * not(gs_apron)+gs_trimov_bot_left_in,	0
							endif
						endif
						gosub "TextCoord_Vert"
						for i = 1 to numMiterCuts
							cutend
						next i
					endif

					! --- Draw Door's Left side Trim Inclined Wall ---
					py1 = -overSizeBottomIn
					py2 = -overSizeBottomIn
					py3LSL = gs_reveal_double_innerBottom_sL + tolerOffsetLowerIn + gs_sidelight_parapet_hgt_left + not(gs_stack_bottom) * (trinB*not(bDrawLeftSLBoard) \
							 - gs_trim_offs_in * not(gs_trim_atframe_in) * not(bDrawLeftSLBoard)) - sjBy
					py4LSL = gs_reveal_double_innerBottom_sL + tolerOffsetLowerIn + gs_sidelight_parapet_hgt_left + not(gs_stack_bottom) * (trinB*not(bDrawLeftSLBoard) - gs_trim_offs_in * not(gs_trim_atframe_in) * not(bDrawLeftSLBoard) - gs_tw_bottom_in) - sjBy

					if	bPShapedLeftOpening & gs_trim_below_boardLeft then
						px2 = -(leftWidth - gs_sidelight_WHole_width_left - tolerOffsetLeftIn + overSizeLeftIn - gs_trim_width_in + gs_trim_offs_in) / cos(wallIncl) + gs_trim_thk_in * tan(wallIncl)
						px1 = px2 - gs_tw_left_in

						! mitered joint of inclined casing
						addz gs_trim_thk_in
						roty -wallIncl + 90
						add 0, gs_sidelight_parapet_hgt_left + gs_reveal_double_innerBottom_sL - (gs_trim_width_in - gs_trim_offs_in) * bDrawLeftSLBoard + gs_trim_width_in - gs_trim_offs_in, \
								-leftWidth + gs_sidelight_WHole_width_left - overSizeLeftIn + tolerOffsetLeftIn + gs_trim_width_in - gs_trim_offs_in
						cutplane{2} 270 - TrimLeftBotMiterAngle, 4
						del 3
						croof_ gs_trim_in_mat, gs_trim_in_mat, gs_trim_in_mat,
							4, 0,0, 1,0, 0, 0, -gs_trim_thk_in,
							px1,	py1,	0,			15,
							px2,	py2,	wallIncl,	s2,
							px2,	py3LSL,	0,			10,
							px1,	py3LSL,	-wallIncl,	s4
						gosub "TextCoord_Vert"

						cutend
					endif

					! --- Draw right side Trim Inclined Wall ---

					px2 = (rightWidth - tolerOffsetRightIn + overSizeRightIn - gs_trim_width_in + gs_trim_offs_in) / cos(wallIncl) + gs_trim_thk_in * tan(wallIncl)
					px1 = px2 + gs_tw_right_in

					if	bShapeEnablesStraightTopTrim then
						py1 = B + overSizeTopIn + not(gs_stack_top) * (-gs_trim_width_in - tolerOffsetUpperIn + gs_trim_offs_in + gs_tw_top_in*not(bTrimovtoprightin))
						py2 = B + overSizeTopIn + not(gs_stack_top) * (-gs_trim_width_in - tolerOffsetUpperIn + gs_trim_offs_in)

						s1 = 15 - 7 * (gs_stack_top | bTrimovtoprightin)
						s2 = bitset (mask, 1, not(gs_stack_top))
					endif

					if	bShapeEnablesArchedTopTrim then
						ta = rightWidth + overSizeTopIn - tolerOffsetRightIn - gs_trim_width_in + gs_trim_offs_in + gs_tw_right_in
						tc = arcR + overSizeTopIn - gs_trim_width_in + gs_trim_offs_in + gs_tw_right_in
						py1 = B - arcR - tolerOffsetUpper + sqr(max(0, (tc * tc - ta * ta)))

						ta = ta - gs_tw_right_in
						tc = tc - gs_tw_right_in
						py2 = B - arcR - tolerOffsetUpper + sqr(max(0, (tc * tc - ta * ta)))

						s1 = 8
						s2 = mask - 2
					endif

					if iWindowShape = SHAPE_ELLIPSEARCH then
						py1 = B + overSizeTopIn - archHeight
						py2 = py1

						s1 = 8
						s2 = mask - 2
					endif

					if	isWindow | \
						(bPShapedRightOpening & gs_trim_below_boardRight) then
						py3 = -overSizeBottomIn + not(bDrawRightSLBoard) * tolerOffsetLowerIn + not(gs_stack_bottom) * (trinB*not(bDrawRightSLBoard) - gs_trim_offs_in * not(gs_trim_atframe_in) * not(bDrawRightSLBoard) \
						- gs_trimov_bot_right_in - gs_tw_bottom_in*bTrimovbotrightin * not(gs_apron) - gs_apron_width*bTrimovbotrightin * gs_apron) - sjBy
						py4 = -overSizeBottomIn + not(bDrawRightSLBoard) * tolerOffsetLowerIn + not(gs_stack_bottom) * (trinB*not(bDrawRightSLBoard) - gs_trim_offs_in * not(gs_trim_atframe_in) * not(bDrawRightSLBoard) \
						- gs_trimov_bot_right_in - gs_tw_bottom_in * (not(bDrawRightSLBoard) | (bDrawRightSLBoard & (bTrimovbotrightin | gs_trim_below_boardRight))) * not(gs_apron) - gs_apron_width * bTrimovbotleftin * gs_apron) - sjBy

						py5=py3 + not(gs_stack_bottom) * (gs_trimov_bot_right_in + gs_tw_bottom_in*bTrimovbotrightin)
						py6=py3 + not(gs_stack_bottom) * gs_trimov_bot_right_in

						s3 = 15 * isWindow + 15 * bPShapedRightOpening					! 15 or 10 or 8
						s4 = 13 + 2 * not(gs_stack_bottom)	! 15 or 13
					else
						py3 = -overSizeBottomIn
						py4 = -overSizeBottomIn

						s3 = 15
						s4 = 15
					endif

					if	bPShapedRightOpening then
						py3 = py3 + gs_sidelight_parapet_hgt_right + gs_reveal_double_innerBottom_sR + overSizeBottomIn
						py4 = py4 + gs_sidelight_parapet_hgt_right + gs_reveal_double_innerBottom_sR + overSizeBottomIn
						py5 = py5 + gs_sidelight_parapet_hgt_right + gs_reveal_double_innerBottom_sR + overSizeBottomIn
						py6 = py6 + gs_sidelight_parapet_hgt_right + gs_reveal_double_innerBottom_sR + overSizeBottomIn
					endif

					if not(gs_stack_right | bRightCornerFunction) then
						! mitered joint of inclined casing
						addz gs_trim_thk_in
						roty -wallIncl + 90
						numMiterCuts = 0
						if bShapeEnablesStraightTopTrim & not(gs_stack_top) then
							if	not(gs_stack_top) & not(bTrimovtoprightin) then
								add 0, B + overSizeTopIn - gs_trim_width_in + gs_trim_offs_in, rightWidth + overSizeRightIn - tolerOffsetRightIn - gs_trim_width_in + gs_trim_offs_in
								py2 = py1
								cutplane{2} 270 - TrimRightTopMiterAngle, 4
								numMiterCuts = numMiterCuts + 1
								del 1
							endif
						endif

						if	bShapeEnablesArchedTopTrim then
							ta = rightWidth + overSizeTopIn - gs_trim_width_in + gs_trim_offs_in
							tc = arcR + overSizeTopIn - gs_trim_width_in + gs_trim_offs_in
							py1R = sqr(max(0, (tc * tc - ta * ta))) - arcR + archHeight

							ta = ta + gs_tw_right_in
							tc = tc + gs_tw_right_in
							py2R = sqr(max(0, (tc * tc - ta * ta))) - arcR + archHeight

							! mitered joint of inclined casing
							TrimRightTopMiterAngle	= atn( (py2R - py1R) / (gs_tw_right_in * cos(wallIncl) + not(bDir) * gs_trim_thk_in*incV) )

							py1 = py1 + gs_tw_right_in
							py2 = py1

							add 0, py1R + B - archHeight - tolerOffsetUpperIn, rightWidth + overSizeRightIn - tolerOffsetRightIn - gs_trim_width_in + gs_trim_offs_in
							cutplane{2} 270 - TrimRightTopMiterAngle, 4
							numMiterCuts = numMiterCuts + 1
							del 1
						endif

						if	((bPShapedRightOpening & gs_trim_below_boardRight) | isWindow) & not(bTrimovbotrightin) then
							add 0, gs_sidelight_parapet_hgt_right + gs_reveal_double_innerBottom_sR - (gs_trim_width_in - gs_trim_offs_in) * bDrawRightSLBoard + gs_trim_width_in - gs_trim_offs_in, \
									rightWidth + overSizeRightIn - tolerOffsetRightIn - gs_trim_width_in + gs_trim_offs_in
							py3 = py4
							cutplane{2} 180 - TrimRightBotMiterAngle, 4
							numMiterCuts = numMiterCuts + 1
							del 1
						endif

						del 2

						body -1
						if (gs_apron & abs(gs_trim_thk_in - gs_apron_thk) < EPS) | (not(gs_apron) & (not(bDrawRightSLBoard) | gs_trim_below_boardRight)) then
							croof_ gs_trim_in_mat, gs_trim_in_mat, gs_trim_in_mat,
								4+2, 0,0, 1,0, 0, 0, -gs_trim_thk_in,
								px1,	py1,	0,			s1,
								px2,	py2,	-wallIncl,	s2,
								px2,	py5,	-wallIncl,	8,
								px2,	py6,	-wallIncl,	15-2 * gs_stack_bottom,
								px2,	py3,	0,			s3*not(bTrimovbotrightin)+bTrimovbotrightin*(15-7*gs_stack_bottom),
								px1,	py4,	0,			s4
						else
							croof_ gs_trim_in_mat, gs_trim_in_mat, gs_trim_in_mat,
								4+1, 0,0, 1,0, 0, 0, -gs_trim_thk_in,
								px1,	py1,	0,			s1,
								px2,	py2,	-wallIncl,	s2,
								px2,	py3+gs_tw_bottom_in * bTrimovbotrightin * not(gs_apron)+gs_trimov_bot_right_in, 0, 15-6 * (gs_stack_bottom | ABS(gs_trim_offs_in) < EPS),
								px2,	py3+gs_tw_bottom_in * bTrimovbotrightin * not(gs_apron),	0, 15-7*gs_stack_bottom,
								px1,	py3+gs_tw_bottom_in * bTrimovbotrightin * not(gs_apron),	0, s4

							if not(gs_stack_bottom) & ABS(gs_trim_offs_in) < EPS & bTrimovbotrightin then
								lin_ px2-gs_trim_thk_in * tan(wallIncl),	py3+gs_tw_bottom_in * bTrimovbotrightin * not(gs_apron),						gs_trim_thk_in,
									 px2-gs_trim_thk_in * tan(wallIncl),	py3+gs_tw_bottom_in * bTrimovbotrightin * not(gs_apron)+gs_trimov_bot_right_in, gs_trim_thk_in
								lin_ px2,	py3+gs_tw_bottom_in * bTrimovbotrightin * not(gs_apron)+gs_trimov_bot_right_in, gs_trim_thk_in,
									 px2,	py3+gs_tw_bottom_in * bTrimovbotrightin * not(gs_apron)+gs_trimov_bot_right_in, 0
							endif
						endif
						gosub "TextCoord_Vert"
						for i = 1 to numMiterCuts
							cutend
						next i
					endif

					! --- Draw Door's Right side Trim Inclined Wall ---
					py1 = -overSizeBottomIn
					py2 = -overSizeBottomIn
					py3RSL = gs_reveal_double_innerBottom_sR + tolerOffsetLowerIn + gs_sidelight_parapet_hgt_right + not(gs_stack_bottom) * (trinB*not(bDrawRightSLBoard) - gs_trim_offs_in * not(gs_trim_atframe_in) * not(bDrawRightSLBoard)) - sjBy
					py4RSL = gs_reveal_double_innerBottom_sR + tolerOffsetLowerIn + gs_sidelight_parapet_hgt_right + not(gs_stack_bottom) * (trinB*not(bDrawRightSLBoard) - gs_trim_offs_in * not(gs_trim_atframe_in) * not(bDrawRightSLBoard) - gs_tw_bottom_in) - sjBy

					if	bPShapedRightOpening & gs_trim_below_boardRight then
						px2 = (rightWidth - gs_sidelight_WHole_width_right - tolerOffsetRightIn + overSizeRightIn - gs_trim_width_in + gs_trim_offs_in) / cos(wallIncl) + gs_trim_thk_in * tan(wallIncl)
						px1 = px2 + gs_tw_right_in

						! mitered joint of inclined casing
						addz gs_trim_thk_in
						roty -wallIncl + 90
						add 0, gs_sidelight_parapet_hgt_right + gs_reveal_double_innerBottom_sR - (gs_trim_width_in - gs_trim_offs_in) * bDrawRightSLBoard + gs_trim_width_in - gs_trim_offs_in, \
									rightWidth - gs_sidelight_WHole_width_right + overSizeRightIn - tolerOffsetRightIn - gs_trim_width_in + gs_trim_offs_in

						cutplane{2}   TrimRightBotMiterAngle - 90, 4
						del 3

						croof_ gs_trim_in_mat, gs_trim_in_mat, gs_trim_in_mat,
							4, 0,0, 1,0, 0, 0, -gs_trim_thk_in,
							px1,	py1,	0,			15,
							px2,	py2,	-wallIncl,	s2,
							px2,	py3RSL,	0,			10,
							px1,	py3RSL,	wallIncl,	s4
						gosub "TextCoord_Vert"
						cutend
					endif

					if	bPShapedLeftOpening & gs_trim_below_boardLeft then
						! --- Draw Left lower Trim Inclined Wall ---
						px2 = (gs_trim_width_in - gs_trim_offs_in) / cos(wallIncl)
						px1 = px2 - gs_tw_left_in * not(bTrimovbotleftin)
						px3 = gs_tw_left_in
						pxL = -(leftWidth - tolerOffsetLeftIn + overSizeLeftIn)  / cos(wallIncl) + bBottomtriminthk * tan(wallIncl)
						pxR = -(leftWidth - gs_sidelight_WHole_width_left - gs_trim_width_in + gs_trim_offs_in + overSizeLeftIn)  / cos(wallIncl) + bBottomtriminthk * tan(wallIncl)

						! mitered joint of inclined casing
						if	not(gs_stack_left) & not(gs_trimov_bot_left_in) then
							lin_ pxL + not(gs_stack_left)  * px2,	py3LSL,	0,
								 pxL + not(gs_stack_left)  * px2 - gs_trim_thk_in * tan(wallIncl),	py3LSL,	gs_trim_thk_in
						endif
						lin_ pxR - gs_tw_left_in,	py4LSL,	0,
							 pxR - gs_tw_left_in - gs_trim_thk_in * tan(wallIncl),	py4LSL,	gs_trim_thk_in

						addz gs_trim_thk_in
						roty -wallIncl + 90
						numMiterCuts = 0
						if	not(gs_stack_left) & not(bTrimovbotleftin) then
							add 0, gs_sidelight_parapet_hgt_left + gs_reveal_double_innerBottom_sL - (gs_trim_width_in - gs_trim_offs_in) * bDrawLeftSLBoard + gs_trim_width_in - gs_trim_offs_in, \
									-leftWidth - overSizeLeftIn + tolerOffsetLeftIn + gs_trim_width_in - gs_trim_offs_in
							px2 = px1
							cutplane{2} 180 + TrimLeftBotMiterAngle, 4
							numMiterCuts = numMiterCuts + 1
							del 1
						endif
						add 0, gs_sidelight_parapet_hgt_left + gs_reveal_double_innerBottom_sL - (gs_trim_width_in - gs_trim_offs_in) * bDrawLeftSLBoard + gs_trim_width_in - gs_trim_offs_in, \
								-leftWidth + gs_sidelight_WHole_width_left - overSizeLeftIn + tolerOffsetLeftIn + gs_trim_width_in - gs_trim_offs_in
						px4 = px3
						cutplane{2} 90 - TrimLeftBotMiterAngle, 4
						numMiterCuts = numMiterCuts + 1
						del 1
						del 2

						croof_ bBottomtriminmat, bBottomtriminmat, bBottomtriminmat,
							4, 0,0, 1,0, 0, 0, -bBottomtriminthk,
							pxL + not(gs_stack_left)  * px1,	py4LSL, 	-gs_stack_left * wallIncl * not(bTrimovbotleftin),	15,
							pxL + not(gs_stack_left)  * px2,	py3LSL,		0,													mask - 2 * gs_stack_left,
							pxR + px3,							py3LSL,		wallIncl * bTrimovbotrightin,						maskRight + 5 * not(gs_trim_below_boardLeft),
							pxR + px3,							py4LSL, 	0,													13
						gosub "TextCoord_Hor"
						for i = 1 to numMiterCuts
							cutend
						next i
					endif

					if	bPShapedRightOpening & gs_trim_below_boardRight then
						! --- Draw Right lower Trim Inclined Wall ---
						px2 = -(gs_trim_width_in - gs_trim_offs_in) / cos(wallIncl)
						px1 = px2 + gs_tw_right_in * not(bTrimovbotrightin)
						px3 = -gs_tw_right_in
						pxL = (rightWidth - tolerOffsetRightIn + overSizeRightIn)  / cos(wallIncl) + bBottomtriminthk * tan(wallIncl)
						pxR = (rightWidth - gs_sidelight_WHole_width_right - gs_trim_width_in + gs_trim_offs_in + overSizeRightIn)  / cos(wallIncl) + bBottomtriminthk * tan(wallIncl)

						! mitered joint of inclined casing
						if	not(gs_stack_right) & not(gs_trimov_bot_right_in) then
							lin_ pxL + not(gs_stack_right)  * px2,	py3RSL,	0,
								 pxL + not(gs_stack_right)  * px2 - gs_trim_thk_in * tan(wallIncl),	py3RSL,	gs_trim_thk_in
						endif
						lin_ pxR + gs_tw_right_in,	py4RSL,	0,
							 pxR + gs_tw_right_in - gs_trim_thk_in * tan(wallIncl),	py4RSL,	gs_trim_thk_in

						addz gs_trim_thk_in
						roty -wallIncl + 90
						numMiterCuts = 0
						if	not(gs_stack_right) & not(bTrimovbotrightin) then
							add 0, gs_sidelight_parapet_hgt_right + gs_reveal_double_innerBottom_sR - (gs_trim_width_in - gs_trim_offs_in) * bDrawRightSLBoard + gs_trim_width_in - gs_trim_offs_in, \
									rightWidth + overSizeRightIn - tolerOffsetRightIn - gs_trim_width_in + gs_trim_offs_in
							px2 = px1
							cutplane{2} 360 - TrimRightBotMiterAngle, 4
							numMiterCuts = numMiterCuts + 1
							del 1
						endif
						add 0, gs_sidelight_parapet_hgt_right + gs_reveal_double_innerBottom_sR - (gs_trim_width_in - gs_trim_offs_in) * bDrawRightSLBoard + gs_trim_width_in - gs_trim_offs_in, \
									rightWidth - gs_sidelight_WHole_width_right + overSizeRightIn - tolerOffsetRightIn - gs_trim_width_in + gs_trim_offs_in
						cutplane{2} TrimRightBotMiterAngle + 90, 4
						numMiterCuts = numMiterCuts + 1
						del 1
						del 2

						croof_ bBottomtriminmat, bBottomtriminmat, bBottomtriminmat,
							4, 0,0, 1,0, 0, 0, -bBottomtriminthk,
							pxL + not(gs_stack_right)  * px1,	py4RSL, 	-gs_stack_right * wallIncl * not(bTrimovbotrightin),	15,
							pxL + not(gs_stack_right)  * px2,	py3RSL,		0,		mask - 2 * gs_stack_right,
							pxR + px3,							py3RSL,		wallIncl * bTrimovbotrightin,	maskRight + 5 * not(gs_trim_below_boardRight),
							pxR + px3,							py4RSL, 	0,				13
						gosub "TextCoord_Hor"
						for i = 1 to numMiterCuts
							cutend
						next i
					endif


					! --- Draw upper Trim  Inclined Wall ---

					px2 = (gs_trim_width_in - gs_trim_offs_in) / cos(wallIncl)
					px1 = px2 - gs_tw_left_in
					px3 = -px2
					px4 = px3 + gs_tw_right_in
					pxL = -(leftWidth - tolerOffsetLeftIn + overSizeLeftIn)  / cos(wallIncl) + gs_trim_thk_in * tan(wallIncl)
					pxR =  (rightWidth - tolerOffsetRightIn + overSizeRightIn) / cos(wallIncl) + gs_trim_thk_in * tan(wallIncl)

					py2 = B - tolerOffsetUpperIn + overSizeTopIn - gs_trim_width_in + gs_trim_offs_in
					py1 = py2 + gs_tw_top_in

					numMiterCuts = 0

					if bShapeEnablesStraightTopTrim & not(gs_stack_top) then

						! mitered joint of inclined casing
						if	not(gs_stack_left) & not(bTrimovtopleftin) then
							lin_ pxL + not(gs_stack_left)  * px2,	py2,	0,
								 pxL + not(gs_stack_left)  * px2 - gs_trim_thk_in * tan(wallIncl),	py2,	gs_trim_thk_in
						endif
						if	not(gs_stack_right) & not(bTrimovtoprightin) then
							lin_ pxR - not(gs_stack_right)  * px2,	py2,	0,
								 pxR - not(gs_stack_right)  * px2 - gs_trim_thk_in * tan(wallIncl),	py2,	gs_trim_thk_in
						endif
						addz gs_trim_thk_in
						roty -wallIncl + 90
						if	not(gs_stack_left) & not(bTrimovtopleftin) then
							add 0, B + overSizeTopIn - gs_trim_width_in + gs_trim_offs_in, -leftWidth - overSizeLeftIn + tolerOffsetLeftIn + gs_trim_width_in - gs_trim_offs_in
							px2 = px1
							cutplane{2} 90 + TrimLeftTopMiterAngle, 4
							numMiterCuts = numMiterCuts + 1
							del 1
						endif
						if	not(gs_stack_right) & not(bTrimovtoprightin) then
							add 0, B + overSizeTopIn - gs_trim_width_in + gs_trim_offs_in, rightWidth + overSizeRightIn - tolerOffsetRightIn - gs_trim_width_in + gs_trim_offs_in
							px3 = px4
							cutplane{2} 90 - TrimRightTopMiterAngle, 4
							numMiterCuts = numMiterCuts + 1
							del 1
						endif
						del 2

						if not(bTrimovtopleftin) and not(bTrimovtoprightin) then
							croof_ gs_trim_in_mat, gs_trim_in_mat, gs_trim_in_mat,
								4, 0,0, 1,0, 0, 0, -gs_trim_thk_in,
								pxL + not(gs_stack_left)  * px1,	py1,	-gs_stack_left * wallIncl,	8 + 7 * not(gs_stack_left),
								pxL + not(gs_stack_left)  * px2,	py2,	0,							bitset (mask, 1, not(gs_stack_left)),
								pxR + not(gs_stack_right) * px3,	py2,	gs_stack_right * wallIncl,	8 + 7 * not(gs_stack_right),
								pxR + not(gs_stack_right) * px4,	py1, 	0,							13 + 2 * not(gs_stack_right)
						endif
						if bTrimovtopleftin and not(bTrimovtoprightin) then
							croof_ gs_trim_in_mat, gs_trim_in_mat, gs_trim_in_mat,
								4+2, 0,0, 1,0, 0, 0, -gs_trim_thk_in,
								pxL + not(gs_stack_left)  * px1-gs_trimov_top_left_in*not(gs_stack_left),	py1,	-gs_stack_left * wallIncl,	8 + 7 * not(gs_stack_left),
								pxL + not(gs_stack_left)  * px1-gs_trimov_top_left_in*not(gs_stack_left),	py2,	0,						15,
								pxL + not(gs_stack_left)  * px1,											py2,	0,						10,
								pxL + not(gs_stack_left)  * px2,											py2,	0,						bitset (mask, 1, not(gs_stack_left)),
								pxR + not(gs_stack_right) * px3,											py2,	gs_stack_right * wallIncl,	8 + 7 * not(gs_stack_right),
								pxR + not(gs_stack_right) * px4,											py1, 	0,						13 + 2 * not(gs_stack_right)
						endif
						if not(bTrimovtopleftin) and bTrimovtoprightin then
							croof_ gs_trim_in_mat, gs_trim_in_mat, gs_trim_in_mat,
								4+2, 0,0, 1,0, 0, 0, -gs_trim_thk_in,
								pxL + not(gs_stack_left)  * px1,											py1,	-gs_stack_left * wallIncl,	8 + 7 * not(gs_stack_left),
								pxL + not(gs_stack_left)  * px2,											py2,	0,						bitset (mask, 1, not(gs_stack_left)),
								pxR + not(gs_stack_right) * px3,											py2,	gs_stack_right * wallIncl,	10,
								pxR + not(gs_stack_right) * px4,											py2, 	0,						15,
								pxR + not(gs_stack_right) * px4+gs_trimov_top_right_in*not(gs_stack_right),	py2, 	0,						8 + 7 * not(gs_stack_right),
								pxR + not(gs_stack_right) * px4+gs_trimov_top_right_in*not(gs_stack_right),	py1, 	0,						15
						endif
						if bTrimovtopleftin and bTrimovtoprightin then
							if gs_trimtype_in_int = CASING_NORMAL then				! Rectangular casing type
								croof_ gs_trim_in_mat, gs_trim_in_mat, gs_trim_in_mat,
									4+4, 0,0, 1,0, 0, 0, -gs_trim_thk_in,
									pxL + not(gs_stack_left)  * px1-gs_trimov_top_left_in*not(gs_stack_left),	py1,	-gs_stack_left * wallIncl,	8 + 7 * not(gs_stack_left),
									pxL + not(gs_stack_left)  * px1-gs_trimov_top_left_in*not(gs_stack_left),	py2,	0,						15,
									pxL + not(gs_stack_left)  * px1,											py2,	0,						maskLeft,
									pxL + not(gs_stack_left)  * px2,											py2,	0,						bitset (mask, 1, not(gs_stack_left)),

									pxR + not(gs_stack_right) * px3,											py2,	gs_stack_right * wallIncl,	maskRight,
									pxR + not(gs_stack_right) * px4,											py2, 	0,						15,
									pxR + not(gs_stack_right) * px4+gs_trimov_top_right_in*not(gs_stack_right),	py2, 	0,						8 + 7 * not(gs_stack_right),
									pxR + not(gs_stack_right) * px4+gs_trimov_top_right_in*not(gs_stack_right),	py1, 	0,						15
							endif

							if gs_trimtype_in_int = CASING_OVERHANG then				! SWE traditional casing type
								croof_ gs_trim_in_mat, gs_trim_in_mat, gs_trim_in_mat,
									5+5, 0,0, 1,0, 0, 0, -gs_trim_thk_in,
									pxL + not(gs_stack_left)  * (px1-gs_trimov_top_left_in),	py1,		-gs_stack_left * wallIncl,	8 + 7 * not(gs_stack_left),
									pxL + not(gs_stack_left)  * (px1-gs_trimov_top_left_in),	py1-0.04,	-gs_stack_left * wallIncl,	8 + 7 * not(gs_stack_left),
									pxL + not(gs_stack_left)  * (px1-gs_trimov_top_left_in/2),	py2,		0,							15,
									pxL + not(gs_stack_left)  * px1,							py2,		0,							maskLeft,
									pxL + not(gs_stack_left)  * px2,							py2,		0,							bitset (mask, 1, not(gs_stack_left)),

									pxR + not(gs_stack_right) * px3,							py2,		gs_stack_right * wallIncl,	maskRight,
									pxR + not(gs_stack_right) * px4,							py2, 		0,							15,
									pxR + not(gs_stack_right) * (px4+gs_trimov_top_right_in/2),	py2, 		0,							8 + 7 * not(gs_stack_right),
									pxR + not(gs_stack_right) * (px4+gs_trimov_top_right_in),	py1-0.04, 	0,							15,
									pxR + not(gs_stack_right) * (px4+gs_trimov_top_right_in),	py1, 		0,							15
							endif
						endif
					endif

					if	bShapeEnablesArchedTopTrim then

						resol nArchResolution

						pxL = (-leftWidth - overSizeLeftIn + tolerOffsetLeftIn + gs_trim_width_in - gs_trim_offs_in) / cos(wallIncl)
						pxR = (rightWidth + overSizeLeftIn - tolerOffsetRightIn - gs_trim_width_in + gs_trim_offs_in) / cos(wallIncl)
						px1 = gs_trim_thk_in * tan(wallIncl)

						IncModifiedRad = ((leftWidth / cos(wallIncl))^2 + archHeight^2) / (2 * archHeight)

						addy B - archHeight - tolerOffsetUpperIn

						ta = leftWidth + overSizeTopIn - gs_trim_width_in + gs_trim_offs_in
						tc = arcR + overSizeTopIn - gs_trim_width_in + gs_trim_offs_in
						py1L = sqr(max(0, (tc * tc - ta * ta))) - arcR + archHeight

						ta = ta + gs_tw_right_in
						tc = tc + gs_tw_right_in
						py2L = sqr(max(0, (tc * tc - ta * ta))) - arcR + archHeight

						ta = rightWidth + overSizeTopIn - gs_trim_width_in + gs_trim_offs_in
						tc = arcR + overSizeTopIn - gs_trim_width_in + gs_trim_offs_in
						py1R = sqr(max(0, (tc * tc - ta * ta))) - arcR + archHeight

						ta = ta + gs_tw_right_in
						tc = tc + gs_tw_right_in
						py2R = sqr(max(0, (tc * tc - ta * ta))) - arcR + archHeight

						! mitered joint of inclined casing
						TrimLeftTopMiterAngle	= atn( (py2L - py1L) / (gs_tw_right_in * cos(wallIncl) - bDir * gs_trim_thk_in*incV) )
						TrimRightTopMiterAngle	= atn( (py2R - py1R) / (gs_tw_right_in * cos(wallIncl) + not(bDir) * gs_trim_thk_in*incV) )
						addz gs_trim_thk_in
						roty -wallIncl + 90

						add 0, py1L, -leftWidth - overSizeLeftIn + tolerOffsetLeftIn + gs_trim_width_in - gs_trim_offs_in
						cutplane{2} 90 + TrimLeftTopMiterAngle, 4
						numMiterCuts = numMiterCuts + 1
						del 1
						add 0, py1R, rightWidth + overSizeRightIn - tolerOffsetRightIn - gs_trim_width_in + gs_trim_offs_in
						cutplane{2} 90 - TrimRightTopMiterAngle, 4
						numMiterCuts = numMiterCuts + 1
						del 1

						del 2

						cutform 5,1,1 + 2 + 8 + 16,
							-sin(wallIncl), 0, cos(wallIncl),	0,
							px1,		archHeight - IncModifiedRad,	900,
							pxL + px1,	py1L-0.5,	  		8,
							pxR + px1,	py1L-0.5,			8,
!							pxR + px1,	py1R-0.00001,	  	15,
							pxR + px1,	py1R,	  			62 + mask,
							pxL + px1,	py1L,	  			3015 - 7 * bHalfCircle

						prism_ 10, gs_trim_thk_in,
							px1,						archHeight - IncModifiedRad,	900,
							pxL + px1,					py1L-1,	  			15,
							pxL + px1,					py1L,	  			15,
							pxR + px1,					py1R,				15,
							pxR + px1,					py1R-1,				15,
							pxR + px1 + gs_tw_right_in,	py1R-1,				15,
							pxR + px1 + gs_tw_right_in,	py2R-0.0001,		15,
							pxR + px1 + gs_tw_right_in,	py2R,				79,
							pxL + px1 - gs_tw_right_in,	py2L,				3015 - 7 * bHalfCircle,
							pxL + px1 - gs_tw_right_in,	py1L-1,	  			15

						cutend

						del 1
					endif

					if iWindowShape = SHAPE_ELLIPSEARCH then

						resol nArchResolution

						pxt = gs_trim_thk_in * tan(wallIncl)
						px1 = -leftWidth - overSizeLeftIn + tolerOffsetLeftIn - gs_trim_offs_in + gs_trim_width_in
						px2 =  rightWidth + overSizeLeftIn - tolerOffsetRightIn + gs_trim_offs_in - gs_trim_width_in
						px3 = -leftWidth - overSizeLeftIn + tolerOffsetLeftIn
						px4 = rightWidth + overSizeLeftIn - tolerOffsetRightIn
						py1 = B + overSizeTopIn - tolerOffsetUpperIn

						pxcL = -leftWidth + smallRadiusEllips
						pxcR = rightWidth - smallRadiusEllips

						s1 = 9 + 4 * (abs(gs_trim_offs_in) > EPS | not(gs_trim_show_cover_in) | abs(gs_trim_thk_in) < EPS)

						addx pxt
						roty -wallIncl
						cutform 7,1,1 + 2 + 8 + 16,
							0, 0, 1,	0,
							px2,					py1 - archHeight,			s1,
							pxcR,					py1 - archHeight,			900+s1,
							0,		 				alphaSide,					4000+s1,
							0,						py1 - middleRadiusEllips, 	900+s1,
							0,		 				alphaMiddle,				4000+s1,
							pxcL,					py1 - archHeight,			900+s1,
							0,		 				alphaSide,					4000+s1
						del 2

						mulx 1 / cos(wallIncl)

						prism_ 7,gs_trim_thk_in,
							px2 + (gs_tw_right_in + pxt) * cos(wallIncl),	py1 - archHeight,			13+64,
							pxcR + pxt * cos(wallIncl),						py1 - archHeight,			915+64,
							0,		 										alphaSide,					4015+64,
							0 + pxt * cos(wallIncl),						py1 - middleRadiusEllips, 	915+64,
							0,		 										alphaMiddle,				4015+64,
							pxcL + pxt * cos(wallIncl),						py1 - archHeight,			915+64,
							0,		 										alphaSide,					4008+64
						del 1

						cutend
					endif
					gosub "TextCoord_Hor"
					for i = 1 to numMiterCuts
						cutend
					next i

					! --- Draw lower Trim  Inclined Wall ---
					px2 = (gs_trim_width_in - gs_trim_offs_in) / cos(wallIncl)
					px1 = px2 - gs_tw_left_in * not(bTrimovbotleftin)
					px3 = -px2
					px4 = px3 + gs_tw_right_in * not(bTrimovbotrightin)


					py1 = -overSizeBottomIn + not(gs_stack_bottom) * (gs_trim_width_in*not(bDrawBoard) + tolerOffsetLowerIn - gs_trim_offs_in - gs_tw_bottom_in)
					py2 = -overSizeBottomIn + not(gs_stack_bottom) * (gs_trim_width_in*not(bDrawBoard) + tolerOffsetLowerIn - gs_trim_offs_in)

					addz gs_trim_thk_in
					roty -wallIncl + 90
					numMiterCuts = 0
					if	not(gs_stack_left) & not(bTrimovbotleftin) then
						add 0, -overSizeBottomIn + gs_sidelight_parapet_hgt_left + gs_reveal_double_innerBottom_sL - (gs_trim_width_in - gs_trim_offs_in) * bDrawLeftSLBoard + gs_trim_width_in - gs_trim_offs_in, \
								-leftWidth - overSizeLeftIn + tolerOffsetLeftIn + gs_trim_width_in - gs_trim_offs_in
						px2 = px1

						cutplane{2} 180 + TrimLeftBotMiterAngle, 4
						numMiterCuts = numMiterCuts + 1
						del 1
					endif
					if	not(gs_stack_right) & not(bTrimovbotrightin) then
						add 0, -overSizeBottomIn + gs_sidelight_parapet_hgt_right + gs_reveal_double_innerBottom_sR - (gs_trim_width_in - gs_trim_offs_in) * bDrawRightSLBoard + gs_trim_width_in - gs_trim_offs_in, \
								rightWidth + overSizeRightIn - tolerOffsetRightIn - gs_trim_width_in + gs_trim_offs_in
						px3 = px4
						cutplane{2} 360 - TrimRightBotMiterAngle, 4
						numMiterCuts = numMiterCuts + 1
						del 1
					endif
					del 2

					if not(gs_stack_bottom | not(isWindow)) & bShapeEnablesStraightBottomTrim & abs(gs_tw_bottom_in) > EPS then
						if (not(gs_apron) & not(bDrawBoard)) then
							material bBottomtriminmat
							if abs(gs_trim_thk_in - gs_apron_thk) < EPS | (not(gs_apron) & not(bDrawBoard)) then
								pxL = -(leftWidth - tolerOffsetLeftIn + overSizeLeftIn)  / cos(wallIncl) + bBottomtriminthk * tan(wallIncl)
								pxR =  (rightWidth - tolerOffsetRightIn + overSizeRightIn) / cos(wallIncl) + bBottomtriminthk * tan(wallIncl)

								croof_ bBottomtriminmat, bBottomtriminmat, bBottomtriminmat,
									4+2, 0,0, 1,0, 0, 0, -bBottomtriminthk,
									pxL + not(gs_stack_left)  * px1,	py1, 	-gs_stack_left * wallIncl * not(bTrimovbotleftin),	maskLeft*not(bDrawBoard)+maskLeft2*bDrawBoard,
									pxL + not(gs_stack_left)  * px1,	py1 + gs_tw_bottom_in*bDrawBoard, 	-wallIncl*(bTrimovbotleftin), 15 - 7 * gs_stack_left,
									pxL + not(gs_stack_left)  * px2,	py2,				0,				bitset (mask, 1, not(gs_stack_left)),
									pxR + not(gs_stack_right) * px3,	py2,				wallIncl * bTrimovbotrightin,	15 - 7 * gs_stack_right,
									pxR + not(gs_stack_right) * px4,	py1 + gs_tw_bottom_in*bDrawBoard, 	wallIncl*bTrimovbotrightin, maskRight*not(bDrawBoard)+maskRight2*bDrawBoard,
									pxR + not(gs_stack_right) * px4,	py1, 	0,				13 + 2 * not(gs_stack_right)	! 15 or 13
							else
								pxL = -(leftWidth  + overSizeLeftIn)  / cos(wallIncl) + (gs_trim_thk_in*not(bTrimovbotleftin)+bBottomtriminthk*bTrimovbotleftin) * tan(wallIncl)
								pxR =  (rightWidth + overSizeRightIn) / cos(wallIncl) + (gs_trim_thk_in*not(bTrimovbotrightin)+bBottomtriminthk*bTrimovbotrightin) * tan(wallIncl)

								addz (gs_trim_thk_in - gs_apron_thk)
								croof_ bBottomtriminmat, bBottomtriminmat, bBottomtriminmat,
									4, 0,0, 1,0, 0, 0, -bBottomtriminthk,
									pxL + not(gs_stack_left)  * px1,	py1, 	-wallIncl*bTrimovbotleftin,	8 + 7 * not(gs_stack_left),
									pxL + not(gs_stack_left)  * px1,	py2, 	0, 13 + 2 * not(gs_stack_left),
									pxR + not(gs_stack_right) * px4,	py2, 	wallIncl*bTrimovbotrightin, 8 + 7 * not(gs_stack_right),
									pxR + not(gs_stack_right) * px4,	py1, 	0,	13 + 2 * not(gs_stack_right)
								del 1
							endif
							material gs_trim_in_mat
						endif
					endif
					gosub "TextCoord_Hor"
					for i = 1 to numMiterCuts
						cutend
					next i

					del 2
				endif
			else		! Straight wall

				addz -gs_trim_thk_in


				! --- Draw left side Trim ---

				px2 = leftRevealPnts[idxBoardEndRevealLeft][1]  + tolerOffsetLeftIn + trinL - gs_trim_offs_in
				px1 = px2 - gs_tw_left_in

				if	bShapeEnablesStraightTopTrim then
					py1 = B + overSizeTopIn + not(gs_stack_top) * (- tolerOffsetUpperIn - trinT + gs_trim_offs_in + gs_tw_top_in*not(bTrimovtopleftin)) + sjty
					py2 = B + overSizeTopIn + not(gs_stack_top) * (- tolerOffsetUpperIn - trinT + gs_trim_offs_in) + sjty
					py22 = py2 - gs_stack_top * gs_trim_stack_top * gs_tw_top_in / 2

					s1 = maskTop				! 15 or 10 or 8
					if not(gs_stack_top) then
						s2 = bitset (mask, 1, not(gs_stack_top)) + 4 * gs_trim_atframe_in
					else
						s2 = 9 + 4 * gs_trim_atframe_in
					endif
					s22 = bitset (mask, 1, not(gs_stack_top)) + 4 * gs_trim_atframe_in
					if iWindowShape = SHAPE_RECTANGULAR then
						s5 = 9 + 4 * gs_trim_atframe_in
					else
						s5 = 10
					endif
				endif
				if	bShapeEnablesArchedTopTrim then
					ta = leftWidth + overSizeTopIn - tolerOffsetLeftIn - gs_trim_width_in + gs_trim_offs_in + gs_tw_right_in
					tc = arcR + overSizeTopIn - gs_trim_width_in + gs_trim_offs_in + gs_tw_right_in
					py1 = B - arcR - tolerOffsetUpperIn + sqr(max(0, (tc * tc - ta * ta))) - tolerOffsetUpper * not(bHalfCircle)

					ta = ta - gs_tw_right_in
					tc = tc - gs_tw_right_in
					py2 = B - arcR - tolerOffsetUpperIn + sqr(max(0, (tc * tc - ta * ta))) - tolerOffsetUpper * not(bHalfCircle)
					py22 = py2

					s1 = 8
					s2 = mask - 2
					s22 = mask - 2
					if iWindowShape = SHAPE_ARCHED then
						s5 = 9 + 4 * gs_trim_atframe_in
					else
						s5 = 10
					endif
				endif
				if iWindowShape = SHAPE_ELLIPSEARCH then
					py1 = B - archHeight
					py2 = B - archHeight
					py22 = py2

					s1 = 8
					s2 = mask - 2
					s22 = 9 + 4 * (abs(gs_trim_offs_in) > EPS | not(gs_trim_show_cover_in) | abs(gs_trim_thk_in) < EPS)
					s5 = 9 + 4 * gs_trim_atframe_in
				endif
				if	isWindow | \
					(bPShapedLeftOpening & gs_trim_below_boardLeft) then
					py3 = -overSizeBottomIn + not(bDrawLeftSLBoard) * tolerOffsetLowerIn + not(gs_stack_bottom) * (trinB*not(bDrawLeftSLBoard) - gs_trim_offs_in * not(gs_trim_atframe_in) * not(bDrawLeftSLBoard)\
					  - gs_trimov_bot_left_in - gs_tw_bottom_in * bTrimovbotleftin * not(gs_apron) - gs_apron_width * bTrimovbotleftin * gs_apron) - sjby
					py4 = -overSizeBottomIn + not(bDrawLeftSLBoard) * tolerOffsetLowerIn + not(gs_stack_bottom) * (trinB*not(bDrawLeftSLBoard) - gs_trim_offs_in * not(gs_trim_atframe_in) * not(bDrawLeftSLBoard)\
					 - gs_trimov_bot_left_in - gs_tw_bottom_in * (not(bDrawLeftSLBoard) | (bDrawLeftSLBoard & (bTrimovbotleftin | gs_trim_below_boardLeft))) * not(gs_apron) - gs_apron_width * bTrimovbotleftin * gs_apron) - sjby

					s3 = maskBottom						! 15 or 10 or 8
					s4 = 13 + 2 * not(gs_stack_bottom)	! 15 or 13
				else
					py3 = -overSizeBottomIn
					py4 = -overSizeBottomIn

					s3 = 15-7*gs_stack_bottom
					s4 = 15
				endif

				py5 = py3 + not(gs_stack_bottom) * bTrimovbotleftin * (gs_trimov_bot_left_in + gs_tw_bottom_in * not(gs_apron) + gs_apron_width * gs_apron) + gs_stack_bottom * gs_trim_stack_bottom * gs_tw_bottom_in / 2
				py6 = py3 + not(gs_stack_bottom) * bTrimovbotleftin * gs_trimov_bot_left_in

				if	bPShapedLeftOpening then
					py3 = py3 + gs_sidelight_parapet_hgt_left + gs_reveal_double_innerBottom_sL + overSizeBottomIn
					py4 = py4 + gs_sidelight_parapet_hgt_left + gs_reveal_double_innerBottom_sL + overSizeBottomIn
					py5 = py5 + gs_sidelight_parapet_hgt_left + gs_reveal_double_innerBottom_sL + overSizeBottomIn
					py6 = py6 + gs_sidelight_parapet_hgt_left + gs_reveal_double_innerBottom_sL + overSizeBottomIn
				endif

				if bDrawBottTrimatGangingIn * not(bGangedCasingonFrame) then
					py6 = py6 + tolerOffsStackCasLowerIn + trinB - gs_trim_offs_in
					s5 = 13
				endif
				if bDrawTopTrimatGangingIn then
					py22 = py2
					if not(bGangedCasingonFrame) then
						py22 = py2 - tolerOffsStackCasUpperIn - trinT + gs_trim_offs_in
						s2 = 10
						s5 = 13
					endif
				endif

				pxWCutTopLeftIn		= px1
				pxWCutTopOHLeftIn	= px1
				pxWCutMidLeftIn		= px1
				pxWCutMidOHLeftIn	= px2
				pxWCutBotLeftIn		= px1
				pyWCutTopLeftIn		= py1
				pyWCutTopOHIn		= py1
				pyWCutMidLeftIn		= py4

				if not(gs_stack_left | bLeftCornerFunction) & bShapeEnablesStraightLeftTrim then

					body -1
					if (gs_apron & abs(gs_trim_thk_in - gs_apron_thk) < EPS) | (not(gs_apron) & (not(bDrawLeftSLBoard) | gs_trim_below_boardLeft) & (isWindow | bPShapedLeftOpening)) then
						if iRevealType = REVEAL_SLANTED | iRevealType = REVEAL_SPLAYED | iRevealType = REVEAL_HISTORIC | iRevealType = REVEAL_DOUBLE_SPLAYED then
							ruled{2} 7, 1+2+4,
								px1,	py1 + scTy * bTrimovtopleftin,	0,
								px2 - scLx,	py2 + scTy,	0,
								px2 - scLx,	py22 + scTy,	0,
								px2 - scLx,	py5 - scBy,	0,
								px2 - scLx,	py6 - scBy,	0,
								px2 - scLx,	py3 - scBy,	0,
								px1,	py4,	0,

								px1,	py1,	gs_trim_thk_in,
								px2,	py2,	gs_trim_thk_in,
								px2,	py22,	gs_trim_thk_in,
								px2,	py5,	gs_trim_thk_in,
								px2,	py6,	gs_trim_thk_in,
								px2,	py3,	gs_trim_thk_in,
								px1,	py4,	gs_trim_thk_in

							lin_ px2 - scLx, py2 + scTy, 0, px2 - scLx, py3 - scBy, 0
							lin_ px1, py1 + scTy * bTrimovtopleftin, 0, px1, py4, 0
							lin_ px1, py1 + scTy * bTrimovtopleftin, gs_trim_thk_in, px1, py4, gs_trim_thk_in
						else
							cprism_{2} gs_trim_in_mat, gs_trim_in_mat, gs_trim_in_mat,
								7, gs_trim_thk_in,
								px1,	py1,	0, s1, gs_trim_in_mat,
								px2,	py2,	0, s2, gs_trim_in_mat,
								px2,	py22,	0, s22, gs_trim_in_mat,
								px2,	py5,	0, s5, gs_trim_in_mat,
								px2,	py6,	0, s3*not(bTrimovbotleftin)+bTrimovbotleftin*15, gs_trim_in_mat,
								px2,	py3,	0, (s3+5*not(gs_tw_bottom_in))*not(bTrimovbotleftin)+bTrimovbotleftin*(15-7*gs_stack_bottom), gs_trim_in_mat,
								px1,	py4,	0, s4, gs_trim_in_mat
						endif
					else
						if iRevealType = REVEAL_SLANTED | iRevealType = REVEAL_SPLAYED | iRevealType = REVEAL_HISTORIC | iRevealType = REVEAL_DOUBLE_SPLAYED then
							ruled{2} 6, 1+2+4,
								px1,	py1 + scTy * bTrimovtopleftin,	0,
								px2 - scLx,	py2 + scTy,	0,
								px2 - scLx,	py22 + scTy,	0,
								px2 - scLx,	py3 + gs_tw_bottom_in * bTrimovbotleftin * not(gs_apron) + gs_trimov_bot_left_in * bTrimovbotleftin,	1,
								px2 - scLx,	py3 + gs_tw_bottom_in * bTrimovbotleftin * not(gs_apron),	1,
								px1,		py3 + gs_tw_bottom_in * bTrimovbotleftin * not(gs_apron),	1,

								px1,	py1,	gs_trim_thk_in,
								px2,	py2,	gs_trim_thk_in,
								px2,	py22,	gs_trim_thk_in,
								px2,	py3 + gs_tw_bottom_in * bTrimovbotleftin * not(gs_apron) + gs_trimov_bot_left_in * bTrimovbotleftin,	gs_trim_thk_in,
								px2,	py3 + gs_tw_bottom_in * bTrimovbotleftin * not(gs_apron),	gs_trim_thk_in,
								px1,	py3 + gs_tw_bottom_in * bTrimovbotleftin * not(gs_apron),	gs_trim_thk_in

							lin_ px2 - scLx,	py2 + scTy,						0,						px2 - scLx, py3 + gs_tw_bottom_in * bTrimovbotleftin * not(gs_apron) + gs_trimov_bot_left_in * bTrimovbotleftin, 0
							lin_ px1, 			py1 + scTy * bTrimovtopleftin,	0,						px1,		py3 + gs_tw_bottom_in * bTrimovbotleftin * not(gs_apron), 0
							lin_ px1,			py1 + scTy * bTrimovtopleftin,	gs_trim_thk_in, 		px1,		py3 + gs_tw_bottom_in * bTrimovbotleftin * not(gs_apron), gs_trim_thk_in
						else
							cprism_{2} gs_trim_in_mat, gs_trim_in_mat, gs_trim_in_mat,
								6, gs_trim_thk_in,
								px1,	py1,	0, s1, gs_trim_in_mat,
								px2,	py2,	0, s2, gs_trim_in_mat,
								px2,	py22,	0, s22, gs_trim_in_mat,
								px2,	py3 + gs_tw_bottom_in * bTrimovbotleftin * not(gs_apron) + gs_trimov_bot_left_in * bTrimovbotleftin,	0, 15-6*gs_stack_bottom, gs_trim_in_mat,
								px2,	py3 + gs_tw_bottom_in * bTrimovbotleftin * not(gs_apron),	0, 15-7*gs_stack_bottom, gs_trim_in_mat,
								px1,	py3 + gs_tw_bottom_in * bTrimovbotleftin * not(gs_apron),	0, s4, gs_trim_in_mat
						endif
					endif
					gosub "TextCoord_Vert"
				endif


				! --- Draw Door's Left side Trim ---

				py1 = -overSizeBottomIn
				py2 = -overSizeBottomIn
				py3 = py4 + gs_trimov_bot_left_in
				py4 = py3 + gs_tw_bottom_in

				if	bPShapedLeftOpening & gs_trim_below_boardLeft then
					px1 = leftRevealPnts[idxBoardEndRevealLeft][1] + gs_sidelight_WHole_width_left + trinL - gs_trim_offs_in  !+ tolerOffsetLeftIn
					px2 = px1 - gs_tw_left_in

					prism_ 	4, gs_trim_thk_in,
						px1,	py1,	15,
						px2,	py2,	s4,
						px2,	py3,	s3,
						px1,	py4,	s2
					gosub "TextCoord_Vert"

					! --- Draw Left lower Trim in Straight Wall ---

					px1 = leftRevealPnts[idxBoardEndRevealLeft][1] + not(gs_stack_left) * (tolerOffsetLeftIn - gs_trim_offs_in - gs_tw_left_in * not(bTrimovbotleftin)) + trinL * not(gs_stack_left)
					px2 = leftRevealPnts[idxBoardEndRevealLeft][1] + not(gs_stack_left) * (tolerOffsetLeftIn - gs_trim_offs_in) + trinL * not(gs_stack_left)
					px3 = leftRevealPnts[idxBoardEndRevealLeft][1] + gs_sidelight_WHole_width_left + trinL - gs_trim_offs_in  !+ tolerOffsetLeftIn
					px4 = px3 - gs_tw_left_in * gs_trim_below_boardLeft


					if (not(gs_apron) & not(bDrawLeftSLBoard)) | gs_trim_below_boardLeft then
						addz (WIDO_FRAME_THICKNESS - WALL_THICKNESS + WIDO_SILL) * gs_trim_atframe_in

						if abs(gs_trim_thk_in - gs_apron_thk) < EPS | (not(gs_apron) & not(bDrawLeftSLBoard)) | gs_trim_below_boardLeft then
							prism_ 	4, bBottomtriminthk,
								px1,	py3,	10,
								px2,	py4,	mask - 2 * gs_stack_left,
								px3,	py4,	10 + 5 * not(gs_trim_below_boardLeft),
								px4,	py3,	15
						else
							addz gs_trim_thk_in - gs_apron_thk
							prism_ 4, bBottomtriminthk,
								px1,	py3, 	8 + 7 * not(gs_stack_left),
								px1,	py4,	13 + 2 * not(gs_stack_left),
								px4,	py4,	8 + 7 * not(gs_stack_right),
								px4,	py3, 	13 + 2 * not(gs_stack_right)
							del 1
						endif
						gosub "TextCoord_Hor"

						del 1
					endif
					pxWCutBotLeftIn = px4
				endif

				pyWCutBotLeftIn = py1


				! --- Draw right side Trim ---

				px2 = rightRevealPnts[idxBoardEndRevealright][1] - tolerOffsetRightIn - trinR + gs_trim_offs_in
				px1 = px2 + gs_tw_right_in

				if	bShapeEnablesStraightTopTrim then
					py1 = B + overSizeTopIn + not(gs_stack_top) * (- tolerOffsetUpperIn - trinT + gs_trim_offs_in + gs_tw_top_in*not(bTrimovtoprightin)) + sjty
					py2 = B + overSizeTopIn + not(gs_stack_top) * (- tolerOffsetUpperIn - trinT + gs_trim_offs_in) + sjty
					py22 = py2 - gs_stack_top * gs_trim_stack_top * gs_tw_top_in / 2

					s1 = maskTop						! 15 or or 10 8
					if not(gs_stack_top) then
						s2 = bitset (mask, 1, not(gs_stack_top)) + 4 * gs_trim_atframe_in
					else
						s2 = 9 + 4 * gs_trim_atframe_in
					endif
					s22 = bitset (mask, 1, not(gs_stack_top)) + 4 * gs_trim_atframe_in
					if iWindowShape = SHAPE_RECTANGULAR then
						s5 = 9 + 4 * gs_trim_atframe_in
					else
						s5 = 10
					endif
				endif
				if	bShapeEnablesArchedTopTrim then
					ta = rightWidth + overSizeTopIn - tolerOffsetRightIn - gs_trim_width_in + gs_trim_offs_in + gs_tw_right_in
					tc = arcR + overSizeTopIn - gs_trim_width_in + gs_trim_offs_in + gs_tw_right_in
					py1 = B - arcR - tolerOffsetUpperIn + sqr(max(0, (tc * tc - ta * ta))) - tolerOffsetUpper * not(bHalfCircle)

					ta = ta - gs_tw_right_in
					tc = tc - gs_tw_right_in
					py2 = B - arcR - tolerOffsetUpperIn + sqr(max(0, (tc * tc - ta * ta))) - tolerOffsetUpper * not(bHalfCircle)
					py22 = py2

					s1 = 8
					s2 = mask - 2
					s22 = mask - 2
					if iWindowShape = SHAPE_ARCHED then
						s5 = 9 + 4 * gs_trim_atframe_in
					else
						s5 = 10
					endif
				endif
				if iWindowShape = SHAPE_ELLIPSEARCH then
					py1 = B - archHeight
					py2 = B - archHeight
					py22 = py2

					s1 = 8
					s2 = mask - 2
					s22 = 9 + 4 * (abs(gs_trim_offs_in) > EPS | not(gs_trim_show_cover_in) | abs(gs_trim_thk_in) < EPS)
					s5 = 9 + 4 * gs_trim_atframe_in
				endif

				if	isWindow | \
					(bPShapedRightOpening & gs_trim_below_boardRight) then
					py3 = -overSizeBottomIn + not(bDrawRightSLBoard) * tolerOffsetLowerIn + not(gs_stack_bottom) * (trinB*not(bDrawRightSLBoard) - gs_trim_offs_in * not(gs_trim_atframe_in) * not(bDrawRightSLBoard)\
					 - gs_trimov_bot_right_in - gs_tw_bottom_in * bTrimovbotrightin * not(gs_apron) - gs_apron_width*bTrimovbotrightin * gs_apron) - sjBy
					py4 = -overSizeBottomIn + not(bDrawRightSLBoard) * tolerOffsetLowerIn + not(gs_stack_bottom) * (trinB*not(bDrawRightSLBoard) - gs_trim_offs_in * not(gs_trim_atframe_in) * not(bDrawRightSLBoard)\
					 - gs_trimov_bot_right_in - gs_tw_bottom_in * (not(bDrawRightSLBoard) | (bDrawRightSLBoard & (bTrimovbotrightin | gs_trim_below_boardRight))) * not(gs_apron) - gs_apron_width * bTrimovbotleftin * gs_apron) - sjBy

					s3 = maskBottom						! 15 or 10 or 8
					s4 = 13 + 2 * not(gs_stack_bottom)	! 15 or 13
				else
					py3 = -overSizeBottomIn
					py4 = -overSizeBottomIn

					s3 = 15-7*gs_stack_bottom
					s4 = 15
				endif

				py5 = py3 + not(gs_stack_bottom) * bTrimovbotrightin * (gs_trimov_bot_right_in + gs_tw_bottom_in * not(gs_apron) + gs_apron_width * gs_apron) + gs_stack_bottom * gs_trim_stack_bottom * gs_tw_bottom_in / 2
				py6 = py3 + not(gs_stack_bottom) * bTrimovbotrightin  * gs_trimov_bot_right_in

				if	bPShapedRightOpening then
					py3 = py3 + gs_sidelight_parapet_hgt_right + gs_reveal_double_innerBottom_sR + overSizeBottomIn
					py4 = py4 + gs_sidelight_parapet_hgt_right + gs_reveal_double_innerBottom_sR + overSizeBottomIn
					py5 = py5 + gs_sidelight_parapet_hgt_right + gs_reveal_double_innerBottom_sR + overSizeBottomIn
					py6 = py6 + gs_sidelight_parapet_hgt_right + gs_reveal_double_innerBottom_sR + overSizeBottomIn
				endif

				if bDrawBottTrimatGangingIn * not(bGangedCasingonFrame) then
					py6 = py6 + tolerOffsStackCasLowerIn + trinB - gs_trim_offs_in
					s5 = 13
				endif
				if bDrawTopTrimatGangingIn then
					py22 = py2
					if not(bGangedCasingonFrame) then
						py22 = py2 - tolerOffsStackCasUpperIn - trinT + gs_trim_offs_in
						s2 = 10
						s5 = 13
					endif
				endif

				pxWCutTopRightIn	= px1
				pxWCutBotRightIn	= px1
				pxWCutMidRightIn	= px1
				pxWCutMidOHRightIn	= px2
				pyWCutTopRightIn 	= py1
				pyWCutMidRightIn	= py4

				if not(gs_stack_right | bRightCornerFunction) & bShapeEnablesStraightRightTrim then

					body -1
					if (gs_apron & abs(gs_trim_thk_in - gs_apron_thk) < EPS) | (not(gs_apron) & (not(bDrawRightSLBoard) | gs_trim_below_boardRight) & (isWindow | bPShapedRightOpening)) then
						if iRevealType = REVEAL_SLANTED | iRevealType = REVEAL_SPLAYED | iRevealType = REVEAL_HISTORIC | iRevealType = REVEAL_DOUBLE_SPLAYED then
							ruled{2} 7, 1+2+4,
								px1,	py1 + scTy * bTrimovtoprightin,	0,
								px2 + scRx,	py2 + scTy,	1,
								px2 + scRx,	py22 + scTy,	1,
								px2 + scRx,	py5 - scBy,	1,
								px2 + scRx,	py6 - scBy,	1,
								px2 + scRx,	py3 - scBy,	1,
								px1,	py4,	1,

								px1,	py1,	gs_trim_thk_in,
								px2,	py2,	gs_trim_thk_in,
								px2,	py22,	gs_trim_thk_in,
								px2,	py5,	gs_trim_thk_in,
								px2,	py6,	gs_trim_thk_in,
								px2,	py3,	gs_trim_thk_in,
								px1,	py4,	gs_trim_thk_in

							lin_ px2 + scRx, py2 + scTy, 0, px2 + scRx, py3 - scBy, 0
							lin_ px1, py1 + scTy * bTrimovtoprightin, 0, px1, py4, 0
							lin_ px1, py1 + scTy * bTrimovtoprightin, gs_trim_thk_in, px1, py4, gs_trim_thk_in
						else
							cprism_{2} gs_trim_in_mat, gs_trim_in_mat, gs_trim_in_mat,
								7, gs_trim_thk_in,
								px1,	py1,	0, s1, gs_trim_in_mat,
								px2,	py2,	0, s2, gs_trim_in_mat,
								px2,	py22, 	0, s22, gs_trim_in_mat,
								px2,	py5,	0, s5, gs_trim_in_mat,
								px2,	py6,	0, s3*not(bTrimovbotrightin)+bTrimovbotrightin*15, gs_trim_in_mat,
								px2,	py3,	0, (s3+5*not(gs_tw_bottom_in))*not(bTrimovbotrightin)+bTrimovbotrightin*(15-7*gs_stack_bottom), gs_trim_in_mat,
								px1,	py4,	0, s4, gs_trim_in_mat
						endif
					else
						if iRevealType = REVEAL_SLANTED | iRevealType = REVEAL_SPLAYED | iRevealType = REVEAL_HISTORIC | iRevealType = REVEAL_DOUBLE_SPLAYED then
							ruled{2} 6, 1+2+4,
								px1,	py1 + scTy * bTrimovtoprightin,	0,
								px2 + scRx,	py2 + scTy,	1,
								px2 + scRx,	py22 + scTy,	1,
								px2 + scRx,	py3 + gs_tw_bottom_in * bTrimovbotrightin * not(gs_apron) + gs_trimov_bot_right_in * bTrimovbotrightin,	1,
								px2 + scRx,	py3 + gs_tw_bottom_in * bTrimovbotrightin * not(gs_apron),	1,
								px1,	py3 + gs_tw_bottom_in * bTrimovbotrightin * not(gs_apron),	1,

								px1,	py1,	gs_trim_thk_in,
								px2,	py2,	gs_trim_thk_in,
								px2,	py22,	gs_trim_thk_in,
								px2,	py3 + gs_tw_bottom_in * bTrimovbotrightin * not(gs_apron) + gs_trimov_bot_right_in * bTrimovbotrightin,	gs_trim_thk_in,
								px2,	py3 + gs_tw_bottom_in * bTrimovbotrightin * not(gs_apron),	gs_trim_thk_in,
								px1,	py3 + gs_tw_bottom_in * bTrimovbotrightin * not(gs_apron),	gs_trim_thk_in

							lin_ px2 + scRx,	py2 + scTy,						0,				px2 + scRx, py3 + gs_tw_bottom_in * bTrimovbotrightin * not(gs_apron) + gs_trimov_bot_right_in * bTrimovbotrightin, 0
							lin_ px1, 			py1 + scTy * bTrimovtoprightin, 0,				px1,		py3 + gs_tw_bottom_in * bTrimovbotrightin * not(gs_apron), 0
							lin_ px1,			py1 + scTy * bTrimovtoprightin, gs_trim_thk_in, px1,		py3 + gs_tw_bottom_in * bTrimovbotrightin * not(gs_apron), gs_trim_thk_in
						else
							cprism_{2} gs_trim_in_mat, gs_trim_in_mat, gs_trim_in_mat,
								6, gs_trim_thk_in,
								px1,	py1,	0, s1, gs_trim_in_mat,
								px2,	py2,	0, s2, gs_trim_in_mat,
								px2,    py22,   0, s22, gs_trim_in_mat,
								px2,	py3+gs_tw_bottom_in*bTrimovbotrightin* not(gs_apron)+gs_trimov_bot_right_in*bTrimovbotrightin,	0, 15-6*gs_stack_bottom, gs_trim_in_mat,
								px2,	py3+gs_tw_bottom_in*bTrimovbotrightin* not(gs_apron),	0, 15-7*gs_stack_bottom, gs_trim_in_mat,
								px1,	py3+gs_tw_bottom_in*bTrimovbotrightin* not(gs_apron),	0, s4, gs_trim_in_mat
						endif
					endif
					gosub "TextCoord_Vert"
				endif

				! --- Draw Door's Right side Trim ---
				py1 = -overSizeBottomIn
				py2 = -overSizeBottomIn
				py3 = py4 + gs_trimov_bot_right_in
				py4 = py3 + gs_tw_bottom_in

				if	bPShapedRightOpening & gs_trim_below_boardRight then
					px1 = rightRevealPnts[idxBoardEndRevealright][1] - gs_sidelight_WHole_width_right - trinR + gs_trim_offs_in  !- tolerOffsetRightIn
					px2 = px1 + gs_tw_right_in

					prism_ 	4, gs_trim_thk_in,
						px1,	py1,	15,
						px2,	py2,	s4,
						px2,	py3,	s3,
						px1,	py4,	s2
					gosub "TextCoord_Vert"

					! --- Draw Right lower Trim in Straight Wall ---

					px1 = rightRevealPnts[idxBoardEndRevealRight][1] - not(gs_stack_right) * (tolerOffsetRightIn - gs_trim_offs_in - gs_tw_right_in * not(bTrimovbotrightin)) - trinR * not(gs_stack_right)
					px2 = rightRevealPnts[idxBoardEndRevealRight][1] - not(gs_stack_right) * (tolerOffsetRightIn - gs_trim_offs_in) - trinR * not(gs_stack_right)
					px3 = rightRevealPnts[idxBoardEndRevealRight][1] - gs_sidelight_WHole_width_right - trinR + gs_trim_offs_in  !- tolerOffsetRightIn
					px4 = px3 + gs_tw_right_in * gs_trim_below_boardRight

					if (not(gs_apron) & not(bDrawRightSLBoard)) | gs_trim_below_boardRight then
						addz (WIDO_FRAME_THICKNESS - WALL_THICKNESS + WIDO_SILL) * gs_trim_atframe_in

						if abs(gs_trim_thk_in - gs_apron_thk) < EPS | (not(gs_apron) & not(bDrawRightSLBoard)) | gs_trim_below_boardRight then
							prism_ 	4, bBottomtriminthk,
								px1,	py3,	10,
								px2,	py4,	mask - 2 * gs_stack_right,
								px3,	py4,	10 + 5 * not(gs_trim_below_boardRight),
								px4,	py3,	15
						else
							addz gs_trim_thk_in - gs_apron_thk
							prism_ 4, bBottomtriminthk,
								px1,	py3, 	8 + 7 * not(gs_stack_right),
								px1,	py4,	13 + 2 * not(gs_stack_right),
								px4,	py4,	8 + 7 * not(gs_stack_left),
								px4,	py3, 	13 + 2 * not(gs_stack_left)
							del 1
						endif
						gosub "TextCoord_Hor"
						del 1
					endif
					pxWCutBotRightIn = px4
				endif

				pyWCutBotRightIn = py1


				! --- Draw lower Trim/Apron in Straight Wall ---

				py1 = -overSizeBottomIn + tolerOffsetLowerIn + not(gs_stack_bottom) * (trinB*not(bDrawBoard) - gs_trim_offs_in * not(gs_trim_atframe_in) - gs_tw_bottom_in) - sjBy
				py2 = -overSizeBottomIn + tolerOffsetLowerIn + not(gs_stack_bottom) * (trinB*not(bDrawBoard) - gs_trim_offs_in * not(gs_trim_atframe_in)) - sjBy

				px1 = leftRevealPnts[idxBoardEndRevealLeft][1] + not(gs_stack_left) * (tolerOffsetLeftIn - gs_trim_offs_in - gs_tw_left_in * not(bTrimovbotleftin)) + trinL * not(gs_stack_left| bLeftCornerFunction)
				px2 = leftRevealPnts[idxBoardEndRevealLeft][1] + not(gs_stack_left) * (tolerOffsetLeftIn - gs_trim_offs_in - gs_tw_left_in * (bLeftCornerFunction)) + trinL * not(gs_stack_left| bLeftCornerFunction)
				px3 = rightRevealPnts[idxBoardEndRevealright][1] + not(gs_stack_right) * (- tolerOffsetRightIn + gs_trim_offs_in + gs_tw_right_in * (bRightCornerFunction)) - trinR * not(gs_stack_right | bRightCornerFunction)
				px4 = rightRevealPnts[idxBoardEndRevealright][1] + not(gs_stack_right) * (- tolerOffsetRightIn + gs_trim_offs_in + gs_tw_right_in * not(bTrimovbotrightin)) - trinR * not(gs_stack_right | bRightCornerFunction)

				if bDrawLeftTrimatGangingIn * not(bGangedCasingonFrame) then
					px2 = leftRevealPnts[2][1] + tolerOffsStackCasLeftIn + trinL - gs_trim_offs_in
				endif
				if bDrawRightTrimatGangingIn * not(bGangedCasingonFrame) then
					px3 = rightRevealPnts[2][1] - tolerOffsStackCasRightIn - trinR + gs_trim_offs_in
				endif

				if not(gs_stack_bottom | not(isWindow)) & bShapeEnablesStraightBottomTrim & abs(gs_tw_bottom_in) > EPS & not(bInclinedWall) then
					if (not(gs_apron) & not(bDrawBoard)) then
						material bBottomtriminmat

						addz (WIDO_FRAME_THICKNESS - WALL_THICKNESS + WIDO_SILL) * gs_trim_atframe_in

						if abs(gs_trim_thk_in - gs_apron_thk) < EPS | (not(gs_apron) & not(bDrawBoard)) then
							if iRevealType = REVEAL_SLANTED | iRevealType = REVEAL_SPLAYED | iRevealType = REVEAL_HISTORIC | iRevealType = REVEAL_DOUBLE_SPLAYED then
								ruled{2} 6, 1+2+4,
									px1,	py1, 	0,
									px1,	py1 + gs_tw_bottom_in*bDrawBoard, 	0,
									px2 - not(gs_stack_left) * scLx,	py2 - scBy,	0,
									px3 + not(gs_stack_right) * scRx,	py2 - scBy,	0,
									px4,	py1 + gs_tw_bottom_in*bDrawBoard, 	0,
									px4,	py1, 	0,

									px1,	py1, 	bBottomtriminthk,
									px1,	py1 + gs_tw_bottom_in*bDrawBoard, 	bBottomtriminthk,
									px2,	py2,	bBottomtriminthk,
									px3,	py2,	bBottomtriminthk,
									px4,	py1 + gs_tw_bottom_in*bDrawBoard, 	bBottomtriminthk,
									px4,	py1, 	bBottomtriminthk

								lin_ px2 - not(gs_stack_left) * scLx, py2 - scBy, 0, px3 + not(gs_stack_right) * scRx, py2 - scBy, 0
								lin_ px1, py1, 0, px4, py1, 0
								lin_ px1, py1, bBottomtriminthk, px4, py1, bBottomtriminthk
							else
								cprism_{2} gs_trim_in_mat, gs_trim_in_mat, gs_trim_in_mat,
									4+2, bBottomtriminthk,
									px1,	py1, 																0, maskLeft*not(bDrawBoard)+maskLeft2*bDrawBoard, gs_trim_in_mat,
									px1,	py1 + gs_tw_bottom_in * (bDrawBoard | bDrawLeftTrimatGangingIn), 	0, maskLeft, gs_trim_in_mat,						! 15 or 8
									px2,	py2,																0, bitset (mask, 1, not(gs_stack_left)), gs_trim_in_mat,
									px3,	py2,																0, maskRight, gs_trim_in_mat,						! 15 or 8
									px4,	py1 + gs_tw_bottom_in * (bDrawBoard | bDrawRightTrimatGangingIn), 	0, maskRight*not(bDrawBoard)+maskRight2*bDrawBoard, gs_trim_in_mat,
									px4,	py1,																0, 13 + 2 * not(gs_stack_right), gs_trim_in_mat	! 15 or 13
							endif
						else
							addz gs_trim_thk_in - gs_apron_thk
							prism_ 4, bBottomtriminthk,
								px1,	py1, 	8 + 7 * not(gs_stack_left),
								px1,	py2,	13 + 2 * not(gs_stack_left),
								px4,	py2,	8 + 7 * not(gs_stack_right),
								px4,	py1, 	13 + 2 * not(gs_stack_right)
							del 1
						endif

						del 1
						material gs_trim_in_mat
					endif
					gosub "TextCoord_Hor"
				endif


				! --- Draw lower Trim/Apron in Inclined Wall ---

				px2 = (gs_trim_width_in - gs_trim_offs_in) / cos(wallIncl)
				px1 = px2 - gs_tw_left_in * not(bTrimovbotleftin)
				px3 = -px2
				px4 = px3 + gs_tw_right_in * not(bTrimovbotrightin)
				pxL = -(leftWidth  + overSizeLeftIn)  / cos(wallIncl) + bBottomtriminthk * tan(wallIncl)
				pxR =  (rightWidth + overSizeRightIn) / cos(wallIncl) + bBottomtriminthk * tan(wallIncl)

				py1 = -overSizeBottomIn + not(gs_stack_bottom) * (gs_trim_width_in*not(bDrawBoard) - gs_trim_offs_in * not(gs_trim_atframe_in)- gs_tw_bottom_in)
				py2 = -overSizeBottomIn + not(gs_stack_bottom) * (gs_trim_width_in*not(bDrawBoard) - gs_trim_offs_in * not(gs_trim_atframe_in))

				if not(gs_stack_bottom | not(isWindow)) & bShapeEnablesStraightBottomTrim & abs(gs_tw_bottom_in) > EPS & bInclinedWall then
					if (not(gs_apron) & not(bDrawBoard)) then
						material bBottomtriminmat

						addz (WIDO_FRAME_THICKNESS - WALL_THICKNESS + WIDO_SILL) * gs_trim_atframe_in + gs_trim_thk_in
						roty wallIncl
						addz -gs_trim_thk_in

						if abs(gs_trim_thk_in - gs_apron_thk) < EPS | (not(gs_apron) & not(bDrawBoard)) then
							croof_ bBottomtriminmat, bBottomtriminmat, bBottomtriminmat,
								4+2, 0,0, 1,0, 0, 0, -bBottomtriminthk,
								pxL + not(gs_stack_left)  * px1,	py1, 	-gs_stack_left * wallIncl*not(bTrimovbotleftin),	maskLeft*not(bDrawBoard)+maskLeft2*bDrawBoard,
								pxL + not(gs_stack_left)  * px1,	py1 + gs_tw_bottom_in*bDrawBoard, 	-wallIncl*(bTrimovbotleftin), maskLeft,						! 15 or 8
								pxL + not(gs_stack_left)  * px2,	py2,				0,				bitset (mask, 1, not(gs_stack_left)),
								pxR + not(gs_stack_right) * px3,	py2,				gs_stack_right * wallIncl*not(bTrimovbotrightin),	maskRight,				! 15 or 8
								pxR + not(gs_stack_right) * px4,	py1 + gs_tw_bottom_in*bDrawBoard, 	wallIncl*bTrimovbotrightin, maskRight*not(bDrawBoard)+maskRight2*bDrawBoard,
								pxR + not(gs_stack_right) * px4,	py1, 	0,				13 + 2 * not(gs_stack_right)	! 15 or 13
						else
							addz gs_trim_thk_in - gs_apron_thk
							croof_ bBottomtriminmat, bBottomtriminmat, bBottomtriminmat,
								4, 0,0, 1,0, 0, 0, -bBottomtriminthk,
								pxL + not(gs_stack_left)  * px1,	py1, 	-wallIncl*bTrimovbotleftin,	8 + 7 * not(gs_stack_left),
								pxL + not(gs_stack_left)  * px1,	py2, 	0, 9 + 2 * not(gs_stack_left),
								pxR + not(gs_stack_right) * px4,	py2, 	wallIncl*bTrimovbotrightin, 8 + 7 * not(gs_stack_right),
								pxR + not(gs_stack_right) * px4,	py1, 	0,	13 + 2 * not(gs_stack_right)
							del 1
						endif

						del 3
						material gs_trim_in_mat
					endif
					gosub "TextCoord_Hor"
				endif

				! --- Draw upper Trim ---

				if gs_stack_left then
					px1 = leftRevealPnts[idxBoardEndRevealLeft-1][1] - gs_trim_thk_in * tan(alfaLeft)
					px2 = leftRevealPnts[idxBoardEndRevealLeft-1][1] - gs_trim_thk_in * tan(alfaLeft)
					px22 = leftRevealPnts[idxBoardEndRevealLeft-1][1]
					px3 = leftRevealPnts[idxBoardEndRevealLeft-1][1] - gs_trim_thk_in * tan(alfaLeft)
					px4 = leftRevealPnts[idxBoardEndRevealLeft-1][1] + gs_tw_left_in /2

					s1 = 8
					s2 = 8 + 5 * not(gs_trim_stack_left)
					s3 = maskLeft + 1 * not(gs_trim_atframe_in)
					s4 = bitset (mask, 1, not(gs_stack_left)) + 4 * gs_trim_atframe_in
				else
					px1 = leftRevealPnts[idxBoardEndRevealLeft][1] + tolerOffsetLeftIn + not(bLeftCornerFunction) * trinL - gs_trim_offs_in - gs_tw_left_in - gs_trimov_top_left_in * bTrimovtopleftin
					px2 = leftRevealPnts[idxBoardEndRevealLeft][1] + tolerOffsetLeftIn + not(bLeftCornerFunction) * trinL - gs_trim_offs_in - (gs_tw_left_in + gs_trimov_top_left_in) * (bTrimovtopleftin | bLeftCornerFunction)
					px22 = 0
					px3 = leftRevealPnts[idxBoardEndRevealLeft][1] + tolerOffsetLeftIn + not(bLeftCornerFunction) * trinL - gs_trim_offs_in - gs_tw_left_in * bTrimovtopleftin
					px4 = leftRevealPnts[idxBoardEndRevealLeft][1] + tolerOffsetLeftIn + not(bLeftCornerFunction) * trinL - gs_trim_offs_in

					s1 = 8 + 7 * bTrimovtopleftin
					s2 = 13 + 2 * bTrimovtopleftin
					s3 = maskLeft
					s4 = bitset (mask, 1, not(gs_stack_left))
				endif

				if gs_stack_right then
					px5 = rightRevealPnts[idxBoardEndRevealRight-1][1] - gs_tw_right_in /2
					px6 = rightRevealPnts[idxBoardEndRevealRight-1][1] + gs_trim_thk_in * tan(alfaRight)
					px77 = rightRevealPnts[idxBoardEndRevealRight-1][1]
					px7 = rightRevealPnts[idxBoardEndRevealRight-1][1] + gs_trim_thk_in * tan(alfaRight)
					px8 = rightRevealPnts[idxBoardEndRevealRight-1][1] + gs_trim_thk_in * tan(alfaRight)

					s5 = maskRight + 1 * not(gs_trim_atframe_in) !- 2
					s6 = 8 + 5 * not(gs_trim_stack_right)
					s7 = 8
					s8 = 13
				else
					px5 = rightRevealPnts[idxBoardEndRevealRight][1] - tolerOffsetRightIn - not(bRightCornerFunction) * trinR + gs_trim_offs_in
					px6 = rightRevealPnts[idxBoardEndRevealRight][1] - tolerOffsetRightIn - not(bRightCornerFunction) * trinR + gs_trim_offs_in + gs_tw_right_in * bTrimovtoprightin
					px7 = rightRevealPnts[idxBoardEndRevealRight][1] - tolerOffsetRightIn - not(bRightCornerFunction) * trinR + gs_trim_offs_in + (gs_tw_right_in + gs_trimov_top_right_in) * (bTrimovtoprightin | bRightCornerFunction)
					px8 = rightRevealPnts[idxBoardEndRevealRight][1] - tolerOffsetRightIn - not(bRightCornerFunction) * trinR + gs_trim_offs_in + gs_tw_right_in + gs_trimov_top_right_in * bTrimovtoprightin

					s5 = maskRight
					s6 = 15
					s7 = 8 + 7 * bTrimovtoprightin
					s8 = 15
				endif

				py2 = B + overSizeTopIn - tolerOffsetUpperIn - trinT + gs_trim_offs_in + sjTy
				py1 = py2 + gs_tw_top_in

				pyWCutTopOHIn = py1

				if bDrawLeftTrimatGangingIn * not(bGangedCasingonFrame) then
					px3 = leftRevealPnts[2][1] + tolerOffsStackCasLeftIn + trinL - gs_trim_offs_in
					px4 = leftRevealPnts[2][1] + tolerOffsStackCasLeftIn + trinL - gs_trim_offs_in
				endif
				if bDrawRightTrimatGangingIn * not(bGangedCasingonFrame) then
					px6 = rightRevealPnts[2][1] - tolerOffsStackCasRightIn - trinR + gs_trim_offs_in
				endif

				if bShapeEnablesStraightTopTrim & not(gs_stack_top) then

					add px22, 0, gs_trim_thk_in
					roty  alfaLeft * ySign - 90
					if gs_stack_left then cutplane 1, 1, 0
					del 2

					if iRevealType = REVEAL_SLANTED | iRevealType = REVEAL_SPLAYED | iRevealType = REVEAL_HISTORIC | iRevealType = REVEAL_DOUBLE_SPLAYED then
						if gs_trimtype_in_int = CASING_NORMAL then				! Rectangular casing type
							ruled{2} 8, 1+2+4,
								px1,	py1,	0,
								px2 - scLx * not(bTrimovtopleftin),	py2 + scTy,	0,
								px3 - scLx * not(bTrimovtopleftin),	py2 + scTy,	0,
								px4 - scLx,	py2 + scTy,	1,
								px5 + scRx,	py2 + scTy,	1,
								px6 + scRx * not(bTrimovtoprightin),	py2 + scTy, 	0,
								px7 + scRx * not(bTrimovtoprightin),	py2 + scTy, 	0,
								px8,	py1, 	0,

								px1,	py1,	gs_trim_thk_in,
								px2,	py2,	gs_trim_thk_in,
								px3,	py2,	gs_trim_thk_in,
								px4,	py2,	gs_trim_thk_in,
								px5,	py2,	gs_trim_thk_in,
								px6,	py2, 	gs_trim_thk_in,
								px7,	py2, 	gs_trim_thk_in,
								px8,	py1, 	gs_trim_thk_in

							if bTrimovtopleftin & not(gs_stack_left) then lin_ px2, py2 + scTy, 0, px3, py2 + scTy, 0
							if bTrimovtopleftin then lin_ px2, py2, gs_trim_thk_in, px3, py2, gs_trim_thk_in
							if bTrimovtopleftin & not(gs_stack_left) then lin_ px1, py1, 0, px1, py2 + scTy, 0
							if bTrimovtopleftin & not(gs_stack_left) then lin_ px1, py1, gs_trim_thk_in, px1, py2, gs_trim_thk_in
							if bTrimovtoprightin then lin_ px7, py2 + scTy, 0, px6, py2 + scTy, 0
							if bTrimovtoprightin then lin_ px7, py2, gs_trim_thk_in, px6, py2, gs_trim_thk_in
							if bTrimovtoprightin then lin_ px8, py1, 0, px8, py2 + scTy, 0
							if bTrimovtoprightin then lin_ px8, py1, gs_trim_thk_in, px8, py2, gs_trim_thk_in
						endif
						if gs_trimtype_in_int = CASING_OVERHANG then				! SWE traditional casing type
							ruled{2} 10, 1+2+4,
								px1,	py1,	0,
								px1,	py1-0.04 + scTy,	0,
								px3 + (px1 - px3)/2 - scLx * not(bTrimovtopleftin),	py2 + scTy,	0,
								px3 - scLx * not(bTrimovtopleftin),	py2 + scTy,	0,
								px4 - scLx,	py2 + scTy,	1,
								px5 + scRx,	py2 + scTy,	1,
								px6 + scRx * not(bTrimovtoprightin),	py2 + scTy, 	0,
								px6 + (px8 - px6)/2 + scRx * not(bTrimovtoprightin),	py2 + scTy, 	0,
								px8,	py1-0.04 + scTy, 	0,
								px8,	py1, 	0,

								px1,	py1,	gs_trim_thk_in,
								px1,	py1-0.04,	gs_trim_thk_in,
								px3 + (px1 - px3)/2,	py2,	gs_trim_thk_in,
								px3,	py2,	gs_trim_thk_in,
								px4,	py2,	gs_trim_thk_in,
								px5,	py2,	gs_trim_thk_in,
								px6,	py2, 	gs_trim_thk_in,
								px6 + (px8 - px6)/2,	py2, 	gs_trim_thk_in,
								px8,	py1-0.04, 	gs_trim_thk_in,
								px8,	py1, 	gs_trim_thk_in


							if bTrimovtopleftin & not(gs_stack_left) then lin_ px3 + (px1 - px3)/2, py2 + scTy, 0, px3, py2 + scTy, 0
							if bTrimovtopleftin then lin_ px3 + (px1 - px3)/2, py2, gs_trim_thk_in, px3, py2, gs_trim_thk_in
							if bTrimovtopleftin & not(gs_stack_left) then lin_ px1, py1-0.04 + scTy, 0, px3 + (px1 - px3)/2, py2 + scTy, 0
							if bTrimovtopleftin & not(gs_stack_left) then lin_ px1, py1-0.04, gs_trim_thk_in, px3 + (px1 - px3)/2, py2, gs_trim_thk_in
							if bTrimovtopleftin & not(gs_stack_left) then lin_ px1, py1-0.04 + scTy, 0, px1, py1, 0
							if bTrimovtopleftin & not(gs_stack_left) then lin_ px1, py1-0.04, gs_trim_thk_in, px1, py1, gs_trim_thk_in

							if bTrimovtoprightin then lin_ px6 + (px8 - px6)/2, py2 + scTy, 0, px6, py2 + scTy, 0
							if bTrimovtoprightin then lin_ px6 + (px8 - px6)/2, py2, gs_trim_thk_in, px6, py2, gs_trim_thk_in
							if bTrimovtoprightin then lin_ px8, py1-0.04 + scTy, 0, px6 + (px8 - px6)/2, py2 + scTy, 0
							if bTrimovtoprightin then lin_ px8, py1-0.04, gs_trim_thk_in, px6 + (px8 - px6)/2, py2, gs_trim_thk_in
							if bTrimovtoprightin then lin_ px8, py1-0.04 + scTy, 0, px8, py1, 0
							if bTrimovtoprightin then lin_ px8, py1-0.04, gs_trim_thk_in, px8, py1, gs_trim_thk_in
						endif

							lin_ px4 - not(gs_stack_left) * scLx, py2 + scTy, 0, px5 + not(gs_stack_right) * scRx, py2 + scTy, 0
	!						lin_ px1, py2 + scTy, 0, px8, py2 + scTy, 0
							lin_ px1, py1, 0, px8, py1, 0
							lin_ px1, py1, gs_trim_thk_in, px8, py1, gs_trim_thk_in

					else
						if gs_trimtype_in_int = CASING_NORMAL then				! Rectangular casing type
							cprism_{2} gs_trim_in_mat, gs_trim_in_mat, gs_trim_in_mat,
								8, gs_trim_thk_in,
								px1,	py1,	0, s1, gs_trim_in_mat,
								px2,	py2,	0, s2, gs_trim_in_mat,
								px3,	py2,	0, s3, gs_trim_in_mat,
								px4,	py2,	0, s4, gs_trim_in_mat,
								px5,	py2,	0, s5, gs_trim_in_mat,
								px6,	py2, 	0, s6, gs_trim_in_mat,
								px7,	py2, 	0, s7, gs_trim_in_mat,
								px8,	py1, 	0, s8, gs_trim_in_mat
						endif
						if gs_trimtype_in_int = CASING_OVERHANG then				! SWE traditional casing type
							cprism_{2} gs_trim_in_mat, gs_trim_in_mat, gs_trim_in_mat,
								10, gs_trim_thk_in,
								px1,	py1,			0, s1, gs_trim_in_mat,
								px1,	py1-0.04,		0, s1, gs_trim_in_mat,
								px3 + (px1 - px3)/2,py2,0, s2, gs_trim_in_mat,
								px3,	py2,			0, s3, gs_trim_in_mat,
								px4,	py2,			0, s4, gs_trim_in_mat,
								px5,	py2,			0, s5, gs_trim_in_mat,
								px6,	py2, 			0, s6, gs_trim_in_mat,
								px6 + (px8 - px6)/2,py2,0, s7, gs_trim_in_mat,
								px8,	py1-0.04, 		0, s7, gs_trim_in_mat,
								px8,	py1, 			0, s8, gs_trim_in_mat
						endif
					endif

					if gs_stack_left then cutend
				endif

				if	bShapeEnablesArchedTopTrim then

					resol nArchResolution
					addy B - archHeight - tolerOffsetUpperIn

					px1 = -leftWidth  - overSizeLeftIn  + tolerOffsetLeftIn  - gs_trim_offs_in + gs_trim_width_in
					px2 =  rightWidth + overSizeRightIn - tolerOffsetRightIn + gs_trim_offs_in - gs_trim_width_in

					if bHalfCircle then
						cprism_{2} gs_trim_in_mat, gs_trim_in_mat, gs_trim_in_mat,
							11, gs_trim_thk_in,
							px1,					0,		0, 8 + 7 * gs_stack_left, gs_trim_in_mat,
							px1 - gs_tw_right_in,	-EPS,	0, 8 + 7 * gs_stack_left, gs_trim_in_mat,
							px1 - gs_tw_right_in,	0,		0, 79,	gs_trim_in_mat,
							0,						0,		0, 900,	gs_trim_in_mat,
							0, archHeight + gs_trim_offs_in - gs_trim_width_in + gs_tw_right_in, 0, 3079, gs_trim_in_mat,
							px2 + gs_tw_right_in,	0,		0, 3079, gs_trim_in_mat,
							px2 + gs_tw_right_in,	-EPS,	0, 8 + 7 * gs_stack_right, gs_trim_in_mat,
							px2,					0,		0, 62 + mask, gs_trim_in_mat,
							0, archHeight + gs_trim_offs_in - gs_trim_width_in, 0, 3062 + mask, gs_trim_in_mat,
							px1,					0,		0, 3013 + 2 * gs_stack_left, gs_trim_in_mat,
							px1,					0,		0, -1, gs_trim_in_mat

						! --- Draw missing lines ---
						if gs_stack_left  then lin_ px1 - gs_tw_right_in,0,0, px1 - gs_tw_right_in,0,gs_trim_thk_in
						if gs_stack_right then lin_ px2,0,0, px2,0,gs_trim_thk_in
					else
						ta = leftWidth + overSizeTopIn - tolerOffsetLeftIn - gs_trim_width_in + gs_trim_offs_in + gs_tw_right_in
						tc = arcR + overSizeTopIn - gs_trim_width_in + gs_trim_offs_in + gs_tw_right_in
						py1L = sqr(max(0, (tc * tc - ta * ta))) - arcR + archHeight - tolerOffsetUpper

						ta = ta - gs_tw_right_in
						tc = tc - gs_tw_right_in
						py2L = sqr(max(0, (tc * tc - ta * ta))) - arcR + archHeight - tolerOffsetUpper

						ta = rightWidth + overSizeTopIn - tolerOffsetRightIn - gs_trim_width_in + gs_trim_offs_in + gs_tw_right_in
						tc = arcR + overSizeTopIn - gs_trim_width_in + gs_trim_offs_in + gs_tw_right_in
						py1R = sqr(max(0, (tc * tc - ta * ta))) - arcR + archHeight - tolerOffsetUpper

						ta = ta - gs_tw_right_in
						tc = tc - gs_tw_right_in
						py2R = sqr(max(0, (tc * tc - ta * ta))) - arcR + archHeight - tolerOffsetUpper

						cprism_{2} gs_trim_in_mat, gs_trim_in_mat, gs_trim_in_mat,
							8, gs_trim_thk_in,
							0,						archHeight - arcR, 0, 900, gs_trim_in_mat,
							px1,					py2L,		0, 8 + 7 * gs_stack_left, gs_trim_in_mat,
							px1 - gs_tw_right_in,	py1L,		0, 79, gs_trim_in_mat,
							0,						archHeight + gs_trim_offs_in - gs_trim_width_in + gs_tw_right_in,	0, 3079, gs_trim_in_mat,
							px2 + gs_tw_right_in,	py1R,		0, 3010 + 5 * gs_stack_right, gs_trim_in_mat,
							px2,					py2R,		0, 62 + mask, gs_trim_in_mat,
							0,						archHeight + gs_trim_offs_in - gs_trim_width_in,	0, 3062 + mask, gs_trim_in_mat,
							px1,					py2L,		0, 3015, gs_trim_in_mat

						lin_ px2,py2R,0, px2,py2R,gs_trim_thk_in
					endif

					del 1
				endif

				if iWindowShape = SHAPE_ELLIPSEARCH then

					resol nArchResolution

					px1 = -leftWidth - overSizeLeftIn + tolerOffsetLeftIn - gs_trim_offs_in + gs_trim_width_in
					px2 =  rightWidth + overSizeLeftIn - tolerOffsetRightIn + gs_trim_offs_in - gs_trim_width_in
					px3 = -leftWidth - overSizeLeftIn + tolerOffsetLeftIn
					px4 = rightWidth + overSizeLeftIn - tolerOffsetRightIn

					pxcL = -leftWidth + smallRadiusEllips
					pxcR = rightWidth - smallRadiusEllips

					py1 = B - tolerOffsetUpperIn

					s1 = 9 + 4 * (abs(gs_trim_offs_in) > EPS | not(gs_trim_show_cover_in) | abs(gs_trim_thk_in) < EPS)

					cprism_{2} gs_trim_in_mat, gs_trim_in_mat, gs_trim_in_mat,
						13,gs_trim_thk_in,
						px2,					py1 - archHeight,			0, s1, gs_trim_in_mat,
						pxcR,					py1 - archHeight,			0, 900+s1, gs_trim_in_mat,
						0,		 				alphaSide,					0, 4000+s1, gs_trim_in_mat,
						0,						py1 - middleRadiusEllips, 	0, 900+s1, gs_trim_in_mat,
						0,		 				alphaMiddle,				0, 4000+s1, gs_trim_in_mat,
						pxcL,					py1 - archHeight,			0, 900+s1, gs_trim_in_mat,
						0,		 				alphaSide,					0, 4008, gs_trim_in_mat,
						px1 - gs_tw_right_in,	py1 - archHeight,			0, 13+64, gs_trim_in_mat,
						0,		 				-alphaSide,					0, 4015+64, gs_trim_in_mat,
						0,						py1 - middleRadiusEllips, 	0, 915+64, gs_trim_in_mat,
						0,		 				-alphaMiddle,				0, 4015+64, gs_trim_in_mat,
						pxcR,					py1 - archHeight,			0, 908+64, gs_trim_in_mat,
						0,		 				-alphaSide,					0, 4008+64, gs_trim_in_mat
				endif
				gosub "TextCoord_Hor"

				del 1


				if bCutWall then
					pen WALL_VIEW_PEN
					material matWallIn

					if	bShapeEnablesArchedTopTrim | \
						iWindowShape = SHAPE_ELLIPSEARCH then

						if iWindowShape = SHAPE_ELLIPSEARCH then
							put	pxWCutTopRightIn, pyWCutTopRightIn, 79,
								pxcR,				pyWCutTopRightIn,			979,
								0,		 			alphaSide,					4079,
								0,					py1 - middleRadiusEllips, 	979,
								0,		 			alphaMiddle,				4079,
								pxcL,				py1 - archHeight,			979,
								0,		 			alphaSide,					4079
						else
							if bHalfCircle then
								put	pxWCutTopRightIn, pyWCutTopRightIn, 79,
									0, B - tolerOffsetUpperIn - archHeight, 900,
									pxWCutTopLeftIn, pyWCutTopLeftIn, 3079
							else
								put pxWCutTopRightIn, pyWCutTopRightIn-EPS, 31,
									pxWCutTopRightIn, pyWCutTopRightIn, 79,
									0, B - tolerOffsetUpperIn - arcR, 900,
									pxWCutTopLeftIn, pyWCutTopLeftIn, 3031,
									pxWCutTopLeftIn, pyWCutTopLeftIn-EPS, 31
							endif
						endif
					else
						put pxWCutTopRightIn, pyWCutTopRightIn, 31
						if gs_trimtype_in_int = CASING_OVERHANG then
							put	pxWCutTopRightIn	+ gs_trimov_top_right_in/2, pyWCutTopRightIn, 31,
								pxWCutTopRightIn	+ gs_trimov_top_right_in,	pyWCutTopOHIn - 0.04, 31,
								pxWCutTopRightIn	+ gs_trimov_top_right_in,	pyWCutTopOHIn, 31,
								pxWCutTopLeftIn	- gs_trimov_top_left_in,	pyWCutTopOHIn, 31,
								pxWCutTopLeftIn	- gs_trimov_top_left_in,	pyWCutTopOHIn - 0.04, 31,
								pxWCutTopLeftIn	- gs_trimov_top_left_in/2, pyWCutTopRightIn, 31
						endif
						put	pxWCutTopLeftIn,	pyWCutTopLeftIn,	31
					endif

					put	pxWCutMidLeftIn, pyWCutMidLeftIn, 31

					if gs_trimtype_in_int = CASING_OVERHANG then
						put	pxWCutMidOHLeftIn, pyWCutMidLeftIn, 31,
							pxWCutMidOHLeftIn, pyWCutMidLeftIn + gs_trimov_bot_left_in, 31
					endif
					if not(isWindow) & bPShapedLeftOpening then
						put	pxWCutBotLeftIn, pyWCutMidLeftIn + gs_trimov_bot_left_in, 31,
							pxWCutBotLeftIn, pyWCutBotLeftIn, 31
					endif
					if not(isWindow) & bPShapedRightOpening then
						put	pxWCutBotRightIn, pyWCutBotRightIn, 31,
							pxWCutBotRightIn, pyWCutMidRightIn + gs_trimov_bot_right_in, 31
					endif
					if gs_trimtype_in_int = CASING_OVERHANG then
						put	pxWCutMidOHRightIn, pyWCutMidRightIn + gs_trimov_bot_right_in, 31,
							pxWCutMidOHRightIn, pyWCutMidRightIn, 31
					endif

					put	pxWCutMidRightIn, pyWCutMidRightIn, 31

!					prism_ nsp/3,-1,
!						use(nsp)

					wallniche nsp/3,1,16,
						0,0,1,0,
						get(nsp)

					pen gs_frame_pen
					material gs_trim_in_mat
				endif

			endif ! bInclinedWall
		endif

		del 1

	else	! not(curvedWall)
		if iRevealType <> REVEAL_SLANTED & iRevealType <> REVEAL_SPLAYED & iRevealType <> REVEAL_HISTORIC & iRevealType <> REVEAL_DOUBLE_SPLAYED then

			! ======================================
			! Inside Trim - Curved Walls
			! ======================================

			resol WALL_RESOL

			offsArc = iHolePosSign * AC_Hole_Position_Angle / 180 * PI * rBoard

			matTrim = gs_trim_in_mat

			material gs_trim_in_mat
			sect_fill gs_trim_fill_in, gs_trim_pen_bg_in, gs_trim_pen_fg_in, gs_trim_pen_cont_in

			if gs_IsCurved then
				thk = WALL_THICKNESS - WIDO_SILL - WIDO_FRAME_THICKNESS
			else
				thk = WALL_THICKNESS

				addz -WIDO_FRAME_THICKNESS

				material matTrim

				cutplane
				del 1
				numCutsFrame = 1
			endif

			if wallIsLeft then
				mask = 14 + (gs_trim_offs_in > EPS | not(bShowJambExtension) | not(gs_trim_show_cover_in) | abs(gs_trim_thk_in) < EPS)
			else
				mask = 11 + 4 * (gs_trim_offs_in > EPS | not(bShowJambExtension) | not(gs_trim_show_cover_in) | abs(gs_trim_thk_in) < EPS)
			endif

			if gs_trim_width_in > EPS & thk > EPS & bShowJambExtension then

				! ===== Inside Trim - Curved Walls - Jamb Extensions =====

				addz -WOD
				bCondition = WIDO_REVEAL_SIDE exor SYMB_MIRRORED
				roty (not(bCondition) - bCondition) * abs(AC_Hole_Position_Angle) + not(wallIsLeft) * 180
				addz rBoard

				! --- Draw Left side Jamb Extension ---

				if	isWindow then
					py4 = -overSizeBottomIn + not(gs_stack_bottom | bDrawBoard) * (gs_trim_width_in + tolerOffsetLowerIn) * bParalellInCurvedWalls
					py3 = py4 + not(gs_stack_bottom | bDrawBoard) * gs_trim_width_in * not(bParalellInCurvedWalls)
					py3l = py3
					py4l = py4
					py3r = py3
					py4r = py4

					s3 = 8 + 2 * not(gs_stack_bottom)		! 15 or 8
					s4 = 13 + 2 * not(gs_stack_bottom)		! 15 or 13
				else
					if	bPShapedLeftOpening then
						py4l = -overSizeBottomIn + not(bDrawLeftSLBoard) * (gs_trim_width_in + tolerOffsetLowerIn) * bParalellInCurvedWalls \
								+ gs_sidelight_parapet_hgt_left + gs_reveal_double_innerBottom_sL + overSizeBottomIn
						py3l = py4l + not(bDrawLeftSLBoard) * gs_trim_below_boardLeft * gs_trim_width_in * not(bParalellInCurvedWalls)
					else
						py4l = -overSizeBottomIn
						py3l = -overSizeBottomIn
					endif
					if	bPShapedRightOpening then
						py4r = -overSizeBottomIn + not(bDrawLRightSLBoard) * (gs_trim_width_in + tolerOffsetLowerIn) * bParalellInCurvedWalls \
								 + gs_sidelight_parapet_hgt_right + gs_reveal_double_innerBottom_sR + overSizeBottomIn
						py3r = py4r + not(bDrawRightSLBoard) * gs_trim_below_boardRight * gs_trim_width_in * not(bParalellInCurvedWalls)
					else
						py4r = -overSizeBottomIn
						py3r = -overSizeBottomIn
					endif

					s3 = 15
					s4 = 15
				endif

				px1 = signWallIsLeft * (offsArc - rBoard * alfaLeftIn * DegRad) - leftWidth * bParalellInCurvedWalls
				px2 = px1 + signWallIsLeft * gs_trim_width_in + 2 * leftWidth * bParalellInCurvedWalls

				if	bShapeEnablesStraightTopTrim then
					py1 = B + overSizeTopIn - not(gs_stack_top) * gs_trim_width_in * bParalellInCurvedWalls - tolerOffsetUpperIn
					py2 = py1 - not(gs_stack_top) * gs_trim_width_in * not(bParalellInCurvedWalls)

					s1 = 8 + 2 * not(gs_stack_top)		! 15 or 8
					s2 = bitset (mask, 1, not(gs_stack_top))
				endif
				if	bShapeEnablesArchedTopTrim then
					ta = leftWidth
					tc = arcR + tolerOffsetUpper
					if tc > ta then
						py1 = B - arcR - tolerOffsetUpper + sqr(max(0, (tc * tc - ta * ta)))
					else
						py1 = B - arcR - tolerOffsetUpper
					endif

					ta = ta - gs_trim_width_in
					tc = tc - gs_trim_width_in
					if tc > ta then
						py2 = B - arcR - tolerOffsetUpper + sqr(max(0, (tc * tc - ta * ta)))
					else
						py2 = B - arcR - tolerOffsetUpper
					endif
					s1 = 8
					s2 = mask - 2
				endif
				if iWindowShape = SHAPE_ELLIPSEARCH then
					py1 = B - archHeight - tolerOffsetUpper
					py2 = B - archHeight - tolerOffsetUpper

					s1 = 8
					s2 = mask - 2
				endif

				if not(gs_stack_left | bLeftCornerFunction) & bShapeEnablesStraightLeftTrim then
					if bParalellInCurvedWalls then
						addz -rBoard
						roty -(not(bCondition) - bCondition) * abs(AC_Hole_Position_Angle) - not(wallIsLeft) * 180

						cutpolya 4, 1, 0,
							-leftWidth + tolerOffsetLeftIn - overSizeLeftIn,  -overSizeBottomIn,  0,
							-leftWidth * 3,  -overSizeBottomIn,  0,
							-leftWidth * 3, B + overSizeTopIn, 0,
							-leftWidth + tolerOffsetLeftIn - overSizeLeftIn,  B + overSizeTopIn,  5

						cutpolya 4, 1, 0,
							-leftWidth + tolerOffsetLeftIn - overSizeLeftIn + gs_trim_width_in,  -overSizeBottomIn,  7,
							rightWidth,  -overSizeBottomIn,  7,
							rightWidth, B + overSizeTopIn, 7,
							-leftWidth + tolerOffsetLeftIn - overSizeLeftIn + gs_trim_width_in,  B + overSizeTopIn,  4! * not(bHalfCircle)
						del 2
					endif

					body -1
					bprism_ matTrim, matTrim, matTrim,
						4, signWallIsLeft * thk, rBoard,
						px1,	py1,	s1,
						px2,	py2,	s2,
						px2,	py3l,	s3,
						px1,	py4l,	s4
					gosub "TextCoord_Vert"

					if bParalellInCurvedWalls then
						cutend
						cutend
					endif
				endif

				! --- Draw Right side Jamb Extension ---

				px1 = signWallIsLeft * (offsArc + rBoard * alfaRightIn * DegRad) + rightWidth * bParalellInCurvedWalls
				px2 = px1 - signWallIsLeft * gs_trim_width_in - rightWidth * bParalellInCurvedWalls * 2

				if	bShapeEnablesStraightTopTrim then
					py1 = B + overSizeTopIn - not(gs_stack_top) * gs_trim_width_in * bParalellInCurvedWalls - tolerOffsetUpperIn
					py2 = py1 - not(gs_stack_top) * gs_trim_width_in * not(bParalellInCurvedWalls)

					s1 = 8 + 2 * not(gs_stack_top)		! 15 or 8
					s2 = bitset (mask, 1, not(gs_stack_top))
				endif
				if	bShapeEnablesArchedTopTrim then
					ta = rightWidth
					tc = arcR + tolerOffsetUpper
					if tc > ta then
						py1 = B - arcR - tolerOffsetUpper + sqr(max(0, (tc * tc - ta * ta)))
					else
						py1 = B - arcR - tolerOffsetUpper
					endif
					ta = ta - gs_trim_width_in
					tc = tc - gs_trim_width_in
					if tc > ta then
						py2 = B - arcR - tolerOffsetUpper + sqr(max(0, (tc * tc - ta * ta)))
					else
						py2 = B - arcR - tolerOffsetUpper
					endif
					s1 = 8
					s2 = mask - 2
				endif

				if not(gs_stack_right | bRightCornerFunction) & bShapeEnablesStraightRightTrim then
					if bParalellInCurvedWalls then
						addz -rBoard
						roty -(not(bCondition) - bCondition) * abs(AC_Hole_Position_Angle) - not(wallIsLeft) * 180

						cutpolya 4, 1, 0,
							rightWidth - tolerOffsetRightIn + overSizeRightIn,  -overSizeBottomIn,  0,
							rightWidth * 3,  -overSizeBottomIn,  0,
							rightWidth * 3, B + overSizeTopIn, 0,
							rightWidth - tolerOffsetRightIn + overSizeRightIn,  B + overSizeTopIn,  5

						cutpolya 4, 1, 0,
							rightWidth - tolerOffsetRightIn + overSizeRightIn - gs_trim_width_in,  -overSizeBottomIn,  7,
							-leftWidth,  -overSizeBottomIn,  7,
							-leftWidth, B + overSizeTopIn, 7,
							rightWidth - tolerOffsetRightIn + overSizeRightIn - gs_trim_width_in,  B + overSizeTopIn,  4
						del 2
					endif

					body -1
					bprism_ matTrim, matTrim, matTrim,
						4, signWallIsLeft * thk, rBoard,
						px1,	py1,	s1,
						px2,	py2,	s2,
						px2,	py3r,	s3,
						px1,	py4r,	s4
					gosub "TextCoord_Vert"

					if bParalellInCurvedWalls then
						cutend
						cutend
					endif
				endif

				if	bTShapedOpening then

					del 3

					alphaLeft = abs(asn(leftRevealPnts[idxBoardEndRevealLeft][1]  / radBoard)) + 10
					alphaRight = abs(asn(rightRevealPnts[idxBoardEndRevealright][1] / radBoard)) + 10

					alfaEnd		= alphaRight
					alfaStart	= -alphaLeft
					arcRadius	= radBoard
					bMiddlePoints = 1
					firstStatus	= 31
					midStatus	= 10 + 5 * (gs_trim_offs_in > EPS) + 64 + 16
					lastStatus	= 31
					if abs(alfaStart - alfaEnd) > EPS then
						gosub 110

						rotx 90
						muly -1
						addz -overSizeBottomIn

						cutDepth = MAX(py3l, py3r)
						if wallIsLeft then
!								prism_ NSP/3 + 2,-cutDepth,
!									radBoard * sin(alphaRight), 2*WOD, 15,
!									-radBoard * sin(alphaLeft), 2*WOD, 15,
!									use(nsp)
							cutpolya NSP/3 + 2,1,0,
								radBoard * sin(alphaRight), 2*WOD, 15,
								-radBoard * sin(alphaLeft), 2*WOD, 15,
								get(nsp)
						else
!								prism_ NSP/3 + 2,-cutDepth,
!									 radBoard * sin(alphaRight) + 3, radBoard * cos(alphaRight) + WOD + 2, 15,
!									-radBoard * sin(alphaLeft) - 3,  radBoard * cos(alphaLeft)  + WOD + 2, 15,
!									use(nsp)
							cutpolya NSP/3 + 2,1,0,
								radBoard * sin(alphaRight) + 3, radBoard * cos(alphaRight) + WOD + 2, 31,
								-radBoard * sin(alphaLeft) - 3,  radBoard * cos(alphaLeft)  + WOD + 2, 31,
								get(nsp)
						endif
						del 3
					endif

					if	bPShapedLeftOpening & gs_trim_below_boardLeft then
						! --- Draw Door's Left side Jamb Extension ---

						px1lP = -leftWidth - overSizeLeftIn + gs_sidelight_WHole_width_left ! + tolerOffsetLeftIn
						px2lP = px1lP + gs_trim_width_in
						py1 = -overSizeBottomIn
						py2 = -overSizeBottomIn

						addz -thk - 1
						body -1
						sprism_ matTrim, matTrim, matTrim,
							4, 0,0, 0,1, thk - pocketThkLeft + 1, wallIncl,
							 px1lP,	py1,	s1,
							 px2lP,	py2,	mask,
							 px2lP,	py3l,	s3,
							 px1lP,	py4l,	s4
						gosub "TextCoord_Vert"
						del 1

						if	not(bDrawLeftSLBoard) then
							! --- Draw Left Sidelight lower side Jamb Extension ---

							if not(bParalellInCurvedWalls) then
								addz -WOD
								roty -alfaLeftIn * signWallIsLeft
								addz rBoard * signWallIsLeft
								addy py4l
								roty 90
								rotx 180 + 45 * not(gs_stack_left)

								!rect 1,1
								cutplane

								del 6
							endif

							addz -thk - 1

							px1l = -leftWidth - overSizeLeftIn - 1 * not(bParalellInCurvedWalls)
							px2l = px1l + gs_trim_width_in

							sprism_ matTrim, matTrim, matTrim,
								4, 0,0, 0,1, thk - pocketThkLeft + 1, wallIncl,
								px2lP,	py3l,	15,
								px1lP,	py4l,	15,
								px1l,	py4l,	15,
								px2l,	py3l,	mask
							gosub "TextCoord_Hor"

							del 1

							if not(bParalellInCurvedWalls) then cutend

						endif
					endif

					if	bPShapedRightOpening & gs_trim_below_boardRight then
						! --- Draw Door's Right side Jamb Extension ---

						px1rP = rightWidth + overSizeRightIn - gs_sidelight_WHole_width_right
						px2rP = px1rP - gs_trim_width_in
						py1 = -overSizeBottomIn
						py2 = -overSizeBottomIn

						addz -thk - 1

						body -1
						sprism_ matTrim, matTrim, matTrim,
							4, 0,0, 0,1, thk - pocketThkRight + 1, wallIncl,
							 px1rP,	py1,	s1,
							 px2rP,	py2,	mask,
							 px2rP,	py3r,	s3,
							 px1rP,	py4r,	s4
						gosub "TextCoord_Vert"
						del 1

						if	not(bDrawRightSLBoard) then
							! --- Draw Right Sidelight lower side Jamb Extension ---

							if not(bParalellInCurvedWalls) then
								addz -WOD
								roty alfaRightIn * signWallIsLeft
								addz rBoard * signWallIsLeft

								addy py4r
								roty 90
								rotx 360 - 45 * not(gs_stack_right)

								!rect 1,1
								cutplane

								del 6
							endif

							addz -thk - 1

							px1r = rightWidth + 1 * not(bParalellInCurvedWalls)
							px2r = px1r - gs_trim_width_in

							sprism_ matTrim, matTrim, matTrim,
								4, 0,0, 0,1, thk - pocketThkLeft + 1, wallIncl,
								px2rP,	py3r,	15,
								px1rP,	py4r,	15,
								px1r,	py4r,	15,
								px2r,	py3r,	mask
							gosub "TextCoord_Hor"

							del 1

							if not(bParalellInCurvedWalls) then cutend

						endif
					endif

					if abs(alfaStart - alfaEnd) > EPS then cutend

					addz -WOD
					roty (not(bCondition) - bCondition) * abs(AC_Hole_Position_Angle) + not(wallIsLeft) * 180
					addz rBoard
				endif

				if not(bParalellInCurvedWalls) then
					px1 = signWallIsLeft * (offsArc - rBoard * alfaLeftIn * DegRad)
					px2 = px1 + signWallIsLeft * not(gs_stack_left) * gs_trim_width_in
					px4 = signWallIsLeft * (offsArc + rBoard * alfaRightIn * DegRad)
					px3 = px4 - signWallIsLeft * not(gs_stack_right) * gs_trim_width_in
				else
					px1 = signWallIsLeft * (offsArc - rBoard * alfaLeftIn * DegRad - (leftWidth - tolerOffsetLeftIn) * not(gs_stack_left))
					px2 = px1
					px4 = signWallIsLeft * (offsArc + rBoard * alfaRightIn * DegRad + (rightWidth - tolerOffsetRightIn) * not(gs_stack_right))
					px3 = px4
				endif

				if not(gs_stack_bottom | bDrawBoard | not(isWindow)) & bShapeEnablesStraightBottomTrim then
					if bParalellInCurvedWalls then
						addz -rBoard
						roty -(not(bCondition) - bCondition) * abs(AC_Hole_Position_Angle) - not(wallIsLeft) * 180

						if not(gs_stack_left) then
							cutpolya 4, 1, 0,
								-leftWidth + tolerOffsetLeftIn - overSizeLeftIn,  -overSizeBottomIn,  7,
								-leftWidth * 3,  -overSizeBottomIn,  7,
								-leftWidth * 3, B + overSizeTopIn, 7,
								-leftWidth + tolerOffsetLeftIn - overSizeLeftIn,  B + overSizeTopIn,  7
						endif

						if not(gs_stack_right) then
							cutpolya 4, 1, 0,
								rightWidth - tolerOffsetRightIn + overSizeRightIn,  -overSizeBottomIn,  7,
								rightWidth * 3,  -overSizeBottomIn,  7,
								rightWidth * 3, B + overSizeTopIn, 7,
								rightWidth - tolerOffsetRightIn + overSizeRightIn,  B + overSizeTopIn,  4
						endif
						del 2
					endif

					py1 = -overSizeBottomIn + tolerOffsetLowerIn
					py2 = py1 + gs_trim_width_in

					bprism_ matTrim, matTrim, matTrim,
						4, signWallIsLeft * thk, rBoard,
						px1,	py1, 	8 + 2 * not(gs_stack_left),		! 15 or 8
						px2,	py2,	bitset (mask, 1, not(gs_stack_left)),
						px3,	py2,	8 + 2 * not(gs_stack_right),		! 15 or 8
						px4,	py1,	13 + 2 * not(gs_stack_right)		! 15 or 13
					gosub "TextCoord_Hor"

					if bParalellInCurvedWalls then
						if not(gs_stack_left) then cutend
						if not(gs_stack_right) then cutend
					endif
				endif



				if bShapeEnablesStraightTopTrim & not(gs_stack_top) then

					if bParalellInCurvedWalls then
						addz -rBoard
						roty -(not(bCondition) - bCondition) * abs(AC_Hole_Position_Angle) - not(wallIsLeft) * 180

						if not(gs_stack_left) then
							cutpolya 4, 1, 0,
								-leftWidth + tolerOffsetLeftIn - overSizeLeftIn,  -overSizeBottomIn,  7,
								-leftWidth * 3,  -overSizeBottomIn,  7,
								-leftWidth * 3, B + overSizeTopIn, 7,
								-leftWidth + tolerOffsetLeftIn - overSizeLeftIn,  B + overSizeTopIn,  7
						endif

						if not(gs_stack_right) then
							cutpolya 4, 1, 0,
								rightWidth - tolerOffsetRightIn + overSizeRightIn,  -overSizeBottomIn,  7,
								rightWidth * 3,  -overSizeBottomIn,  7,
								rightWidth * 3, B + overSizeTopIn, 7,
								rightWidth - tolerOffsetRightIn + overSizeRightIn,  B + overSizeTopIn,  4
						endif
						del 2
					endif

					py1 = B + overSizeTopIn - tolerOffsetUpperIn
					py2 = py1 - gs_trim_width_in

					bprism_ matTrim, matTrim, matTrim,
						4, signWallIsLeft * thk, rBoard,
						px1,	py1,	8 + 2 * not(gs_stack_left),		! 15 or 8
						px2,	py2,	bitset (mask, 1, not(gs_stack_left)),
						px3,	py2,	8 + 2 * not(gs_stack_right),		! 15 or 8
						px4,	py1,	13 + 2 * not(gs_stack_right)		! 15 or 13

					if bParalellInCurvedWalls then
						if not(gs_stack_left) then cutend
						if not(gs_stack_right) then cutend
					endif
				endif

				if	bShapeEnablesArchedTopTrim then

					resol WALL_RESOL

					px1 = signWallIsLeft * (offsArc - rBoard * alfaLeftIn * DegRad)
					px2 = px1 + signWallIsLeft * gs_trim_width_in
					px4 = signWallIsLeft * (offsArc + rBoard * alfaRightIn * DegRad)
					px3 = px4 - signWallIsLeft * gs_trim_width_in

					mulRatio = (leftWidth + rightWidth + overSizeLeftIn + overSizeRightIn - tolerOffsetLeft - tolerOffsetRight) / abs(px1 - px4)
					addy B - archHeight - tolerOffsetUpper
					muly mulRatio

					if bHalfCircle then
						if not(bParalellInCurvedWalls) then
							bprism_ matTrim, matTrim, matTrim,
								8, signWallIsLeft * thk, rBoard,
								px1,	0, 	   8 + 7 * gs_stack_left,		! 15 or 8
								px2,	0,	  62 + mask,
								0,		1,	 800,
								px3,	0,	1008 + 7 * gs_stack_right,		! 1015 or 1008
								px4,	-EPS,  8 + 7 * gs_stack_right,		! 15 or 8
								px4,	0,	  79,
								0,		1,	 800,
								px1,	0, 	1015
						else

							px1_grbody = signWallIsLeft * (offsArc - rBoard * PI/2)
							px4_grbody = signWallIsLeft * (offsArc + rBoard * PI/2)

							addz -rBoard
							roty -1*(not(bCondition) - bCondition) * abs(AC_Hole_Position_Angle) - not(wallIsLeft) * 180
							addz WOD

							cutpolya 3, 1, 0,
								-leftWidth + tolerOffsetLeft + gs_trim_width_in,	0,	  62 + mask,
								0,		1,	 800,
								rightWidth - tolerOffsetRight - gs_trim_width_in,	0,	1008 + 7 * gs_stack_right

							cutpolya 7, 1, 0,
								rBoard + WALL_THICKNESS + 1, 0, 15,
								rBoard + WALL_THICKNESS + 1, rightWidth, 15,
								-rBoard - WALL_THICKNESS - 1, rightWidth, 15,
								-rBoard - WALL_THICKNESS - 1, 0, 15,
								-leftWidth + tolerOffsetLeft,	0,	  62 + mask,
								0,		1,	 800,
								rightWidth - tolerOffsetRight,	0,	1008 + 7 * gs_stack_right

							del 3

							bprism_ matTrim, matTrim, matTrim,
								4, signWallIsLeft * thk, rBoard,
								px1_grbody,0,8,
								px4_grbody, 0, 8,
								px4_grbody, rightWidth,8,
								px1_grbody, rightWidth,8

							cutend
							cutend

						endif
					else

						ta = (leftWidth + rightWidth) / 2
						tc = arcR
						py1 = sqr(max(0, (tc * tc - ta * ta))) - arcR + archHeight

						ta = ta - gs_trim_width_in
						tc = tc - gs_trim_width_in
						py2 = sqr(max(0, (tc * tc - ta * ta))) - arcR + archHeight

						bprism_ matTrim, matTrim, matTrim,
							6, signWallIsLeft * thk, rBoard,
							(px2 + px3) / 2,		(archHeight - arcR) / mulRatio, 900,
							px2,	py2, 	   8 + 7 * gs_stack_left,	! 15 or 8
							px1,	py1,	  79,
							px4,	py1,	3010 + 5 * gs_stack_right,	! 15 or 8
							px3,	py2,	  62 + mask,
							px2,	py2, 	3015
					endif

					del 2
				endif

				if iWindowShape = SHAPE_ELLIPSEARCH then

					px1 = offsArc - rBoard * alfaLeft * DegRad
					px4 = offsArc + rBoard * alfaRight * DegRad

					offs = (leftWidth + overSizeLeftIn - (rBoard * alfaLeft * DegRad))
					if wallIsLeft then
						s3 = 12 + 1 * (abs(gs_trim_offs_in) > EPS | not(gs_trim_show_cover_in) | abs(gs_trim_thk_in) < EPS) - 2 * gs_stack_right
					else
						s3 = 9 + 4 * (abs(gs_trim_offs_in) > EPS | not(gs_trim_show_cover_in) | abs(gs_trim_thk_in) < EPS) - 2 * gs_stack_right
					endif
					mulRatio = (archHeight / (archHeight + overSizeLeftIn - offs))

					addy B - tolerOffsetUpper + ((archHeight * mulRatio) - archHeight)
					muly mulRatio

					bprism_ matTrim, matTrim, matTrim,
						13, signWallIsLeft * thk, rBoard,
						signWallIsLeft * offsArc + leftWidth + overSizeLeftIn - tolerOffsetLeft - offs,						-archHeight,			13,
						signWallIsLeft * offsArc + leftWidth - smallRadiusEllips,											-archHeight,			913,
						0,		 																							 alphaSide,				4013,
						signWallIsLeft * offsArc - (leftWidth - rightWidth)/2,												-middleRadiusEllips, 	913,
						0,		 																							 alphaMiddle,			4013,
						signWallIsLeft * offsArc - rightWidth + smallRadiusEllips, 											-archHeight,			913,
						0,		 																							 alphaSide,				4008,
						signWallIsLeft * offsArc - rightWidth - overSizeLeftIn - tolerOffsetLeft + offs + gs_trim_width_in,	-archHeight,			s3,
						0,		 																							-alphaSide,				4000+s3,
						signWallIsLeft * offsArc - (leftWidth - rightWidth)/2,												-middleRadiusEllips, 	900+s3,
						0,		 																							-alphaMiddle,			4000+s3,
						signWallIsLeft * offsArc + leftWidth - smallRadiusEllips,											-archHeight,			900+s3,
						0,		 																							-alphaSide,				4000+s3

					del 2
				endif
				gosub "TextCoord_Hor"

				del 3
			endif

			if numCutsFrame then
				cutend
				numCutsFrame = 0
			endif

			if not(gs_stack_left) then
				alfaLeftParallelIn = abs (asn ( (leftRevealPnts[idxBoardEndRevealLeft][1] + gs_trim_width_in) / rBoard))
			else
				alfaLeftParallelIn = alfaLeft
			endif
			if not(gs_stack_right) then
				alfaRightParallelIn = abs (asn ( (rightRevealPnts[idxBoardEndRevealRight][1] - gs_trim_width_in) / rBoard))
			else
				alfaRightParallelIn = alfaRight
			endif

			if gs_trim_thk_in > EPS & gs_trim_show_cover_in then

				material gs_trim_in_mat
				sect_fill gs_trim_fill_in, gs_trim_pen_bg_in, gs_trim_pen_fg_in, gs_trim_pen_cont_in

				! ===== Inside Trim - Curved Walls - Casing =====

				if wallIsLeft then
					mask = 11 + 4 * (gs_trim_offs_in > EPS)
				else
					mask = 14 + (gs_trim_offs_in > EPS)
				endif

				maskTop		= 8 + 2 * not(gs_stack_top) * not(bParalellInCurvedWalls)
				maskBottom	= 8 + 2 * not(gs_stack_bottom)
				maskLeft	= 8 + (2 + 5 * bParalellInCurvedWalls) * not(gs_stack_left)
				maskRight	= 8 + 2 * not(gs_stack_right)

				maskLeft2	= bDrawBoard*(not(bTrimovbotleftin)*(15-7*gs_stack_left)+bTrimovbotleftin*(10-2*gs_stack_left))
				maskRight2	= bDrawBoard*(not(bTrimovbotrightin)*(15-7*gs_stack_right)+bTrimovbotrightin*(10-2*gs_stack_right))

				if	iWindowShape = SHAPE_RECTANGULAR | \
					bPShapedLeftOpening then

					if gs_stack_left then
						pxL = leftRevealPnts[idxBoardEndRevealLeft][1]
					else
						pxL = leftRevealPnts[idxBoardEndRevealLeft][1] + gs_trim_width_in + not(gs_stack_left) * (-gs_trim_offs_in + tolerOffsetLeftIn)
						alphaLeft = abs(asn(pxL / rBoard)) + ArcLengthBoardToAngle * gs_tw_left_in
						pxL = -rBoard * sin(alphaLeft)
						pyL = -sqr(rBoard^2 - pxL^2) - WOD
					endif
					if gs_stack_right then
						pxR = rightRevealPnts[idxBoardEndRevealright][1]
					else
						pxR = rightRevealPnts[idxBoardEndRevealright][1] - gs_trim_width_in - not(gs_stack_right) * (-gs_trim_offs_in + tolerOffsetRightIn)
						alphaRight = abs(asn(pxR / rBoard)) + ArcLengthBoardToAngle * gs_tw_right_in
						pxR = rBoard * sin(alphaRight)
						pyR = -sqr(rBoard^2 - pxR^2) - WOD
					endif
					if isWindow then
						pyB = -overSizeBottomIn - not(gs_stack_bottom) * (-tolerOffsetLowerIn - trinB + gs_trim_offs_in + gs_tw_bottom_in*not(bTrimovbotleftin)) - sjby
					else
						pyB = 0
					endif
					pyT = B + overSizeTopIn + not(gs_stack_top) * (- tolerOffsetUpperIn - trinT + gs_trim_offs_in + gs_tw_top_in*not(bTrimovtopleftin)) + sjty

					if bCutWall then
						pen WALL_VIEW_PEN
						material matWallIn

						alfaEnd		= alphaRight
						alfaStart	= -alphaLeft
						arcRadius	= radBoard
						bMiddlePoints = 1
						firstStatus	= 31
						midStatus	= 95
						lastStatus	= 31
						if abs(alfaStart - alfaEnd) > EPS then
							gosub 110

							rotx 90
							muly -1
							addz -pyB

							cutDepth = pyT - pyB
							if wallIsLeft then
!								prism_ NSP/3 + 1,-cutDepth,
!									0,WOD,15,
!									use(nsp)
								wallniche NSP/3 + 1,1,0,
									0,0,-cutDepth,cutDepth,
									0,WOD,31,
									get(nsp)
							else
!								prism_ NSP/3 + 2,-cutDepth,
!									 (rBoard + WALL_THICKNESS) * sin(alphaLeft),  (rBoard + WALL_THICKNESS) * cos(alphaLeft)  + WOD, 15,
!									-(rBoard + WALL_THICKNESS) * sin(alphaRight), (rBoard + WALL_THICKNESS) * cos(alphaRight) + WOD, 15,
!									use(nsp)
								wallniche NSP/3 + 2,1,0,
									0,0,-cutDepth,cutDepth,
									 (rBoard + WALL_THICKNESS) * sin(alphaLeft),  (rBoard + WALL_THICKNESS) * cos(alphaLeft)  + WOD, 31,
									-(rBoard + WALL_THICKNESS) * sin(alphaRight), (rBoard + WALL_THICKNESS) * cos(alphaRight) + WOD, 31,
								get(nsp)
							endif
							del 3
						endif

						pen gs_frame_pen
						material gs_trim_in_mat
					endif
				endif

				if bShapeEnablesStraightTopTrim & not(gs_stack_top) & gs_trimtype_in_int = CASING_NORMAL & (bTrimovtopleftin | bTrimovtoprightin) then
					if gs_stack_left then
						pxL = leftRevealPnts[idxBoardEndRevealLeft][1]
					else
						pxL = leftRevealPnts[idxBoardEndRevealLeft][1] + gs_trim_width_in + not(gs_stack_left) * (-gs_trim_offs_in + tolerOffsetLeftIn)
						alphaLeft = abs(asn(pxL / rBoard)) + ArcLengthBoardToAngle * (gs_tw_left_in + gs_trimov_top_left_in)
						pxL = -rBoard * sin(alphaLeft)
						pyL = -sqr(rBoard^2 - pxL^2) - WOD
					endif
					if gs_stack_right then
						pxR = rightRevealPnts[idxBoardEndRevealright][1]
					else
						pxR = rightRevealPnts[idxBoardEndRevealright][1] - gs_trim_width_in - not(gs_stack_right) * (-gs_trim_offs_in + tolerOffsetRightIn)
						alphaRight = abs(asn(pxR / rBoard)) + ArcLengthBoardToAngle * (gs_tw_right_in + gs_trimov_top_right_in)
						pxR = rBoard * sin(alphaRight)
						pyR = -sqr(rBoard^2 - pxR^2) - WOD
					endif
					pyB = B + overSizeTopIn - gs_trim_width_in + gs_trim_offs_in - tolerOffsetUpperIn
					pyT = pyB + gs_tw_top_in

					if bCutWall then
						pen WALL_VIEW_PEN
						material matWallIn

						alfaEnd		= alphaRight
						alfaStart	= -alphaLeft
						arcRadius	= radBoard
						bMiddlePoints = 1
						firstStatus	= 31
						midStatus	= 95
						lastStatus	= 31
						if abs(alfaStart - alfaEnd) > EPS then
							gosub 110

							rotx 90
							muly -1
							addz -pyB

							cutDepth = pyT - pyB
							if wallIsLeft then
!								prism_ NSP/3 + 1,-cutDepth,
!									0,WOD,15,
!									use(nsp)
								wallniche NSP/3 + 1,1,0,
									0,0,-cutDepth,cutDepth,
									0,WOD,31,
									get(nsp)
							else
!								prism_ NSP/3 + 2,-cutDepth,
!									 (rBoard + WALL_THICKNESS) * sin(alphaLeft),  (rBoard + WALL_THICKNESS) * cos(alphaLeft)  + WOD, 15,
!									-(rBoard + WALL_THICKNESS) * sin(alphaRight), (rBoard + WALL_THICKNESS) * cos(alphaRight) + WOD, 15,
!									use(nsp)
								wallniche NSP/3 + 2,1,0,
									0,0,-cutDepth,cutDepth,
									 (rBoard + WALL_THICKNESS) * sin(alphaLeft),  (rBoard + WALL_THICKNESS) * cos(alphaLeft)  + WOD, 31,
									-(rBoard + WALL_THICKNESS) * sin(alphaRight), (rBoard + WALL_THICKNESS) * cos(alphaRight) + WOD, 31,
									get(nsp)
							endif
							del 3
						endif

						pen gs_frame_pen
						material gs_trim_in_mat
					endif
				endif


				pxL = leftRevealPnts[idxBoardEndRevealLeft][1] + gs_trim_width_in + not(gs_stack_left) * (-gs_trim_offs_in + tolerOffsetLeftIn)
				alphaLeft = abs(asn(pxL / rBoard)) + ArcLengthBoardToAngle * gs_tw_left_in
				pxL = -rBoard * sin(alphaLeft)
				pyL = -sqr(rBoard^2 - pxL^2) - WOD

				pxR = leftRevealPnts[idxBoardEndRevealLeft][1] + gs_trim_width_in + not(gs_stack_left) * (-gs_trim_offs_in + tolerOffsetLeftIn)
				alphaRight = abs(asn(pxR / rBoard))
				pxR = -rBoard * sin(alphaRight)
				pyR = -sqr(rBoard^2 - pxR^2) - WOD

				pyB = B + overSizeTopIn - gs_trim_width_in + gs_trim_offs_in - tolerOffsetUpperIn
				if isWindow then
					pyB = -overSizeBottomIn + not(bDrawBoard) * tolerOffsetLowerIn + not(gs_stack_bottom) * (trinB*not(bDrawBoard)\
						 - not(bDrawBoard) * gs_trim_offs_in * not(gs_trim_atframe_in) - gs_trimov_bot_left_in - gs_tw_bottom_in*(not(bDrawBoard) or (bDrawBoard and bTrimovbotleftin)) * not(gs_apron) - gs_apron_width * bTrimovbotleftin * gs_apron) - sjby
				else
					pyB = 0
				endif

				pyT = B + overSizeTopIn - gs_trim_width_in + gs_trim_offs_in - tolerOffsetUpperIn + gs_tw_top_in

				if not(gs_stack_left | bLeftCornerFunction) & bShapeEnablesStraightLeftTrim & gs_trimtype_in_int = CASING_NORMAL & bTrimovtopleftin then
					if bCutWall then
						pen WALL_VIEW_PEN
						material matWallIn

						alfaEnd		= -alphaRight
						alfaStart	= -alphaLeft
						arcRadius	= radBoard
						bMiddlePoints = 1
						firstStatus	= 31
						midStatus	= 95
						lastStatus	= 31
						if abs(alfaStart - alfaEnd) > EPS then
							gosub 110

							rotx 90
							muly -1
							addz -pyB

							cutDepth = pyT - pyB
							if wallIsLeft then
!								prism_ NSP/3 + 1,-cutDepth,
!									0,WOD,15,
!									use(nsp)
								wallniche NSP/3 + 1,1,0,
									0,0,-cutDepth,cutDepth,
									0,WOD,31,
									get(nsp)
							else
!								prism_ NSP/3 + 2,-cutDepth,
!									-(rBoard + WALL_THICKNESS) * sin(alphaRight), (rBoard + WALL_THICKNESS) * cos(alphaRight) + WOD, 15,
!									-(rBoard + WALL_THICKNESS) * sin(alphaLeft),  (rBoard + WALL_THICKNESS) * cos(alphaLeft)  + WOD, 15,
!									use(nsp)
								wallniche NSP/3 + 2,1,0,
									0,0,-cutDepth,cutDepth,
									-(rBoard + WALL_THICKNESS) * sin(alphaRight), (rBoard + WALL_THICKNESS) * cos(alphaRight) + WOD, 31,
									-(rBoard + WALL_THICKNESS) * sin(alphaLeft),  (rBoard + WALL_THICKNESS) * cos(alphaLeft)  + WOD, 31,
									get(nsp)
							endif
							del 3
						endif

						pen gs_frame_pen
						material gs_trim_in_mat
					endif
				endif


				pxR = rightRevealPnts[idxBoardEndRevealRight][1] - gs_trim_width_in - not(gs_stack_right) * (-gs_trim_offs_in + tolerOffsetRightIn)
				alphaRight = abs(asn(pxR / rBoard)) + ArcLengthBoardToAngle * gs_tw_right_in
				pxR = -rBoard * sin(alphaRight)
				pyR = -sqr(rBoard^2 - pxR^2) - WOD

				pxL = rightRevealPnts[idxBoardEndRevealRight][1] - gs_trim_width_in - not(gs_stack_right) * (-gs_trim_offs_in + tolerOffsetRightIn)
				alphaLeft = abs(asn(pxL / rBoard))
				pxL = -rBoard * sin(alphaLeft)
				pyL = -sqr(rBoard^2 - pxL^2) - WOD

				pyB = B + overSizeTopIn - gs_trim_width_in + gs_trim_offs_in - tolerOffsetUpperIn
				if isWindow then
					pyB = -overSizeBottomIn + not(bDrawBoard) * tolerOffsetLowerIn + not(gs_stack_bottom) * (trinB*not(bDrawBoard)\
						 - not(bDrawBoard) * gs_trim_offs_in * not(gs_trim_atframe_in) - gs_trimov_bot_right_in - gs_tw_bottom_in*(not(bDrawBoard) or (bDrawBoard and bTrimovbotrightin)) * not(gs_apron) - gs_apron_width * bTrimovbotrightin * gs_apron) - sjby
				else
					pyB = 0
				endif

				pyT = B + overSizeTopIn - gs_trim_width_in + gs_trim_offs_in - tolerOffsetUpperIn + gs_tw_top_in

				if not(gs_stack_right | bRightCornerFunction) & bShapeEnablesStraightRightTrim & gs_trimtype_in_int = CASING_NORMAL & bTrimovtoprightin then
					if bCutWall then
						pen WALL_VIEW_PEN
						material matWallIn

						alfaEnd		= alphaRight
						alfaStart	= alphaLeft
						arcRadius	= radBoard
						bMiddlePoints = 1
						firstStatus	= 31
						midStatus	= 95
						lastStatus	= 31
						if abs(alfaStart - alfaEnd) > EPS then
							gosub 110

							rotx 90
							muly -1
							addz -pyB

							cutDepth = pyT - pyB
							if wallIsLeft then
!								prism_ NSP/3 + 1,-cutDepth,
!									0,WOD,15,
!									use(nsp)
								wallniche NSP/3 + 1,1,0,
									0,0,-cutDepth,cutDepth,
									0,WOD,31,
									get(nsp)
							else
!								prism_ NSP/3 + 2,-cutDepth,
!									(rBoard + WALL_THICKNESS) * sin(alphaRight), (rBoard + WALL_THICKNESS) * cos(alphaRight) + WOD, 15,
!									(rBoard + WALL_THICKNESS) * sin(alphaLeft),  (rBoard + WALL_THICKNESS) * cos(alphaLeft)  + WOD, 15,
!									use(nsp)
								wallniche NSP/3 + 2,1,0,
									0,0,-cutDepth,cutDepth,
									(rBoard + WALL_THICKNESS) * sin(alphaRight), (rBoard + WALL_THICKNESS) * cos(alphaRight) + WOD, 31,
									(rBoard + WALL_THICKNESS) * sin(alphaLeft),  (rBoard + WALL_THICKNESS) * cos(alphaLeft)  + WOD, 31,
									get(nsp)
							endif
							del 3
						endif

						pen gs_frame_pen
						material gs_trim_in_mat
					endif
				endif

				addz -WOD
				bCondition = WIDO_REVEAL_SIDE exor SYMB_MIRRORED
				roty (not(bCondition) - bCondition) * abs(AC_Hole_Position_Angle) + not(wallIsLeft) * 180
				addz rBoard


				! ===== Inside Trim - Curved Walls - Casing - Top and Bottom Sides =====

				if not(gs_stack_bottom | not(isWindow)) & bShapeEnablesStraightBottomTrim & abs(gs_tw_bottom_in) > EPS then
					if not(bParalellInCurvedWalls) then
						px1 = signWallIsLeft * (offsArc - rBoard * alfaLeftIn * DegRad + not(gs_stack_left) * (gs_trim_width_in - gs_trim_offs_in - gs_tw_left_in*not(bTrimovbotleftin)))

						px2 = px1
						px3 = signWallIsLeft * (offsArc - rBoard * alfaLeftIn * DegRad + not(gs_stack_left) * (gs_trim_width_in - gs_trim_offs_in))
						px4 = signWallIsLeft * (offsArc + rBoard * alfaRightIn * DegRad + not(gs_stack_right) * (-gs_trim_width_in + gs_trim_offs_in))
						px5 = signWallIsLeft * (offsArc + rBoard * alfaRightIn * DegRad + not(gs_stack_right) * (-gs_trim_width_in + gs_trim_offs_in + gs_tw_right_in*not(bTrimovbotrightin)))
						px6 = px5

						py1 = -overSizeBottomIn + not(gs_stack_bottom) * (gs_trim_width_in*not(bDrawBoard) - gs_trim_offs_in - gs_tw_bottom_in)
						py2 = py1 + gs_tw_bottom_in*bDrawBoard
						py3 = -overSizeBottomIn + not(gs_stack_bottom) * (gs_trim_width_in*not(bDrawBoard) - gs_trim_offs_in)
						py4 = py3
						py5 = py2
						py6 = py1

						s1 = maskLeft*not(bDrawBoard)+maskLeft2*bDrawBoard
						s2 = maskLeft
						s3 = bitset (mask, 1, not(gs_stack_left))
						s4 = maskRight
						s5 = maskRight*not(bDrawBoard)+maskRight2*bDrawBoard
						s6 = 13 + 2 * not(gs_stack_right)
					else
						px1 = signWallIsLeft * (offsArc - rBoard * alfaLeftParallelIn * DegRad + not(gs_stack_left) * (gs_trim_width_in*0 - gs_trim_offs_in - gs_tw_left_in + tolerOffsetLeftIn))
						px2 = px1
						px3 = signWallIsLeft * (offsArc - rBoard * alfaLeftParallelIn * DegRad + not(gs_stack_left) * (gs_trim_width_in*0 - gs_trim_offs_in - gs_tw_left_in + tolerOffsetLeftIn))
						px4 = signWallIsLeft * (offsArc + rBoard * alfaRightParallelIn * DegRad + not(gs_stack_right) * (-gs_trim_width_in*0 + gs_trim_offs_in + gs_tw_right_in - tolerOffsetRightIn))
						px5 = signWallIsLeft * (offsArc + rBoard * alfaRightParallelIn * DegRad + not(gs_stack_right) * (-gs_trim_width_in*0 + gs_trim_offs_in + gs_tw_right_in - tolerOffsetRightIn))
						px6 = px5

						py1 = -overSizeBottomIn + not(gs_stack_bottom) * ((gs_trim_width_in + tolerOffsetLowerIn)*not(bDrawBoard) - gs_trim_offs_in - gs_tw_bottom_in)
						py2 = py1 + gs_tw_bottom_in * bDrawBoard
						py3 = -overSizeBottomIn + not(gs_stack_bottom) * ((gs_trim_width_in + tolerOffsetLowerIn)*not(bDrawBoard) - gs_trim_offs_in) + EPS
						py4 = py3 + EPS
						py5 = py2
						py6 = py1

						s1 = maskLeft * not(bDrawBoard) + maskLeft2 * bDrawBoard
						s2 = maskLeft
						s3 = bitset (mask, 1, not(gs_stack_left))
						s4 = 13	+ 2 * bDrawBoard
						s5 = maskRight * not(bDrawBoard) + maskRight2 * bDrawBoard
						s6 = 13 + 2 * not(gs_stack_right)
					endif

					if not(gs_apron) & not(bDrawBoard) then
						if bParalellInCurvedWalls then
							addz -rBoard
							roty -(not(bCondition) - bCondition) * abs(AC_Hole_Position_Angle) - not(wallIsLeft) * 180

							cutpolya 4, 1, 0,
								-leftWidth + tolerOffsetLeftIn - overSizeLeftIn + gs_trim_width_in + gs_trim_offs_in,  py3 - EPS - gs_tw_bottom_in * bTrimovbotleftin,  0,
								-leftWidth * 3,  py3 - EPS - gs_tw_bottom_in * bTrimovbotleftin,  7,
								-leftWidth * 3, B + overSizeTopIn, 7,
								-leftWidth + tolerOffsetLeftIn - overSizeLeftIn + gs_trim_width_in + gs_trim_offs_in,  B + overSizeTopIn,  1 * not(bTrimovbotleftin)

							cutpolya 4, 1, 0,
								-leftWidth + tolerOffsetLeftIn - overSizeLeftIn + gs_trim_width_in - gs_trim_offs_in,  py3 - EPS,  3,
								rightWidth - tolerOffsetRightIn + overSizeRightIn - gs_trim_width_in - gs_trim_offs_in,  py3 - EPS,  7,
								rightWidth - tolerOffsetRightIn + overSizeRightIn - gs_trim_width_in - gs_trim_offs_in, B + overSizeTopIn, 7,
								-leftWidth + tolerOffsetLeftIn - overSizeLeftIn + gs_trim_width_in - gs_trim_offs_in,  B + overSizeTopIn,  1

							cutpolya 4, 1, 0,
								rightWidth - tolerOffsetRightIn + overSizeRightIn - gs_trim_width_in - gs_trim_offs_in,  py3 - EPS - gs_tw_bottom_in * bTrimovbotrightin,  0,
								rightWidth * 3,  py3 - EPS - gs_tw_bottom_in * bTrimovbotrightin,  7,
								rightWidth * 3, B + overSizeTopIn, 7,
								rightWidth - tolerOffsetRightIn + overSizeRightIn - gs_trim_width_in - gs_trim_offs_in,  B + overSizeTopIn,  1 * not(bTrimovbotrightin)

							del 2
						endif

						bprism_ bBottomtriminmat, bBottomtriminmat, bBottomtriminmat,
							4+2, -signWallIsLeft * bBottomtriminthk, rBoard,
							px1,	py1, 	s1,
							px2,	py2, 	s2,
							px3,	py3,	s3,
							px4,	py4,	s4,
							px5,	py5, 	s5,
							px6,	py6, 	s6
						gosub "TextCoord_Hor"

						if bParalellInCurvedWalls then
							cutend
							cutend
							cutend
						endif
						material gs_trim_in_mat
					endif
				endif

				if bShapeEnablesStraightTopTrim & not(gs_stack_top) then

					if not(bParalellInCurvedWalls) then
						px1 = signWallIsLeft * (offsArc - rBoard * alfaLeftIn * DegRad + not(gs_stack_left) * (gs_trim_width_in - gs_trim_offs_in - gs_tw_left_in - gs_trimov_top_left_in * bTrimovtopleftin))
						px2 = signWallIsLeft * (offsArc - rBoard * alfaLeftIn * DegRad + not(gs_stack_left) * (gs_trim_width_in - gs_trim_offs_in - (gs_tw_left_in + gs_trimov_top_left_in) * bTrimovtopleftin))
						px3 = signWallIsLeft * (offsArc - rBoard * alfaLeftIn * DegRad + not(gs_stack_left) * (gs_trim_width_in - gs_trim_offs_in - gs_tw_left_in * bTrimovtopleftin))
						px4 = signWallIsLeft * (offsArc - rBoard * alfaLeftIn * DegRad + not(gs_stack_left) * (gs_trim_width_in - gs_trim_offs_in))
						px5 = signWallIsLeft * (offsArc + rBoard * alfaRightIn * DegRad + not(gs_stack_right) * (-gs_trim_width_in + gs_trim_offs_in))
						px6 = signWallIsLeft * (offsArc + rBoard * alfaRightIn * DegRad + not(gs_stack_right) * (-gs_trim_width_in + gs_trim_offs_in + gs_tw_right_in * bTrimovtoprightin))
						px7 = signWallIsLeft * (offsArc + rBoard * alfaRightIn * DegRad + not(gs_stack_right) * (-gs_trim_width_in + gs_trim_offs_in + (gs_tw_right_in + gs_trimov_top_right_in) * bTrimovtoprightin))
						px8 = signWallIsLeft * (offsArc + rBoard * alfaRightIn * DegRad + not(gs_stack_right) * (-gs_trim_width_in + gs_trim_offs_in + gs_tw_right_in + gs_trimov_top_right_in * bTrimovtoprightin))

						py2 = B + overSizeTopIn - gs_trim_width_in + gs_trim_offs_in
						py1 = py2 + gs_tw_top_in
						py3 = py2
						py4 = py2
						py5 = py2
						py6 = py2
						py7 = py2
						py8 = py1

						s1 = 8 + 7 * not(gs_stack_left) * bTrimovtopleftin
						s2 = 15
						s3 = maskLeft
						s4 = bitset (mask, 1, not(gs_stack_left))
						s5 = maskRight
						s6 = 15
						s7 = 8 + 7 * not(gs_stack_right) * bTrimovtoprightin
						s8 = 13 + 2 * not(gs_stack_right)
					else
						px1 = signWallIsLeft * (offsArc - rBoard * alfaLeftParallelIn * DegRad + not(gs_stack_left) * (- gs_trim_offs_in - gs_tw_left_in - gs_trimov_top_left_in * bTrimovtopleftin + tolerOffsetLeftIn))
						px2 = signWallIsLeft * (offsArc - rBoard * alfaLeftParallelIn * DegRad + not(gs_stack_left) * (- gs_trim_offs_in - gs_tw_left_in - gs_trimov_top_left_in * bTrimovtopleftin + tolerOffsetLeftIn))
						px3 = signWallIsLeft * (offsArc - rBoard * alfaLeftParallelIn * DegRad + not(gs_stack_left) * (- gs_trim_offs_in - gs_tw_left_in + tolerOffsetLeftIn))
						px4 = signWallIsLeft * (offsArc - rBoard * alfaLeftParallelIn * DegRad + not(gs_stack_left) * (- gs_trim_offs_in - gs_tw_left_in + tolerOffsetLeftIn))

						px5 = signWallIsLeft * (offsArc + rBoard * alfaRightParallelIn * DegRad + not(gs_stack_right) * (gs_trim_offs_in + gs_tw_right_in - tolerOffsetRightIn))
						px6 = signWallIsLeft * (offsArc + rBoard * alfaRightParallelIn * DegRad + not(gs_stack_right) * (gs_trim_offs_in + gs_tw_right_in - tolerOffsetRightIn))
						px7 = signWallIsLeft * (offsArc + rBoard * alfaRightParallelIn * DegRad + not(gs_stack_right) * (gs_trim_offs_in + gs_tw_right_in + gs_trimov_top_right_in * bTrimovtoprightin - tolerOffsetRightIn))
						px8 = signWallIsLeft * (offsArc + rBoard * alfaRightParallelIn * DegRad + not(gs_stack_right) * (gs_trim_offs_in + gs_tw_right_in + gs_trimov_top_right_in * bTrimovtoprightin - tolerOffsetRightIn))

						py2 = B + overSizeTopIn - gs_trim_width_in + gs_trim_offs_in - EPS - tolerOffsetUpperIn
						py1 = py2 + gs_tw_top_in + EPS
						py3 = py2
						py4 = py2
						py5 = py2
						py6 = py2 + EPS
						py7 = py2 + EPS
						py8 = py1

						s1 = 8 + 7 * not(gs_stack_left)
						s2 = 15
						s3 = maskLeft
						s4 = 10	!bitset (mask, 1, not(gs_stack_left))
						s5 = maskRight
						s6 = 15
						s7 = 8 + 7 * not(gs_stack_right)
						s8 = 13 + 2 * not(gs_stack_right)
					endif

					if bParalellInCurvedWalls then
						add 0, 0, -rBoard
						roty -(not(bCondition) - bCondition) * abs(AC_Hole_Position_Angle) - not(wallIsLeft) * 180

!						cutpolya 4, 1, 0,
!							-leftWidth + tolerOffsetLeftIn - overSizeLeftIn + gs_trim_width_in + gs_trim_offs_in,  py3 - EPS - gs_tw_bottom_in * bTrimovbotleftin,  0,
!							-leftWidth * 3,  py3 - EPS - gs_tw_bottom_in * bTrimovbotleftin,  7,
!							-leftWidth * 3, py2 + EPS, 2,
!							-leftWidth + tolerOffsetLeftIn - overSizeLeftIn + gs_trim_width_in + gs_trim_offs_in,  py2 + EPS,  1 * not(bTrimovbotleftin)

						cutpolya 4, 1, 0,
							-leftWidth + tolerOffsetLeftIn - overSizeLeftIn + gs_trim_width_in - gs_trim_offs_in,  0,  3,
							rightWidth - tolerOffsetRightIn + overSizeRightIn - gs_trim_width_in - gs_trim_offs_in,  0,  7,
							rightWidth - tolerOffsetRightIn + overSizeRightIn - gs_trim_width_in - gs_trim_offs_in, py2 + EPS, 1 + 2 * not(gs_stack_right),
							-leftWidth + tolerOffsetLeftIn - overSizeLeftIn + gs_trim_width_in - gs_trim_offs_in,  py2 + EPS,  2 * not(gs_stack_left)

						cutpolya 4, 1, 0,
							rightWidth - tolerOffsetRightIn + overSizeRightIn - gs_trim_width_in - gs_trim_offs_in,  py3 - EPS - gs_tw_bottom_in * bTrimovbotrightin,  0,
							rightWidth * 3,  py3 - EPS - gs_tw_bottom_in * bTrimovbotrightin,  7,
							rightWidth * 3, py2 + EPS, 2,
							rightWidth - tolerOffsetRightIn + overSizeRightIn - gs_trim_width_in - gs_trim_offs_in,  py2 + EPS,  1 * not(bTrimovbotrightin)
						del 2
					endif

					if gs_trimtype_in_int = CASING_NORMAL then				! Rectangular casing type
						bprism_ gs_trim_in_mat, gs_trim_in_mat, gs_trim_in_mat,
							8, -signWallIsLeft * gs_trim_thk_in, rBoard,
								px1, py1, s1,
								px2, py2, s2,
								px3, py3, s3,
								px4, py4, s4,
								px5, py5, s5,
								px6, py6, s6,
								px7, py7, s7,
								px8, py8, s8
					endif

					if gs_trimtype_in_int = CASING_OVERHANG then				! SWE traditional casing type
						bprism_ gs_trim_in_mat, gs_trim_in_mat, gs_trim_in_mat,
							10, -signWallIsLeft * gs_trim_thk_in, rBoard,
								px1, py1, s1,
								px1, py1-0.04, s1,
								px3 + (px1 - px3)/2, py2, s2,
								px3, py3, s3,
								px4, py4, s4,
								px5, py5, s5,
								px6, py6, s6,
								px6 + (px8 - px6)/2, py7, s7,
								px8, py8-0.04, s7,
								px8, py8, s8
					endif

					if bParalellInCurvedWalls then
!						cutend
						cutend
						cutend
					endif
				endif

				if	bShapeEnablesArchedTopTrim then

					resol WALL_RESOL


					px1 = signWallIsLeft * (offsArc - rBoard * alfaLeftParallelIn * DegRad - gs_trim_offs_in - gs_tw_left_in + tolerOffsetLeftIn)
					px2 = signWallIsLeft * (offsArc - rBoard * alfaLeftParallelIn * DegRad - gs_trim_offs_in + tolerOffsetLeftIn)

					px3 = signWallIsLeft * (offsArc + rBoard * alfaRightParallelIn * DegRad + gs_trim_offs_in - tolerOffsetRightIn)
					px4 = signWallIsLeft * (offsArc + rBoard * alfaRightParallelIn * DegRad + gs_tw_right_in + gs_trim_offs_in - tolerOffsetRightIn)



					mulRatio = (leftWidth + rightWidth - tolerOffsetLeft - tolerOffsetRight) / (2 * abs(signWallIsLeft * rBoard * alfaLeft * DegRad))
					addy B - archHeight - tolerOffsetUpper
					muly mulRatio

					if bHalfCircle then
						bprism_ gs_trim_in_mat, gs_trim_in_mat, gs_trim_in_mat,
							9, -signWallIsLeft * gs_trim_thk_in, rBoard,
							px1,	-EPS, 	   8 + 7 * gs_stack_left,		! 15 or 8
							px1,	0, 	   8 + 7 * gs_stack_left,		! 15 or 8
							px2,	0,	  62 + mask,
							0,		1,	 800,
							px3,	0,	1008 + 7 * gs_stack_right,		! 1015 or 1008
							px4,	-EPS,  8 + 7 * gs_stack_right,		! 15 or 8
							px4,	0,	  79,
							0,		1,	 800,
							px1,	0, 	1079
					else

						ta = (leftWidth + rightWidth) / 2 - gs_trim_width_in + gs_trim_offs_in + gs_tw_right_in
						tc = arcR - gs_trim_width_in + gs_trim_offs_in + gs_tw_right_in
						py1 = sqr(max(0, (tc * tc - ta * ta))) - arcR + archHeight

						ta = ta - gs_tw_right_in
						tc = tc - gs_tw_right_in
						py2 = sqr(max(0, (tc * tc - ta * ta))) - arcR + archHeight

						bprism_ gs_trim_in_mat, gs_trim_in_mat, gs_trim_in_mat,
							6, -signWallIsLeft * gs_trim_thk_in, rBoard,
							(px2 + px3) / 2,		(archHeight - arcR) / mulRatio, 900,
							px2,	py2, 	   8 + 7 * gs_stack_left,	! 15 or 8
							px1,	py1,	  79,
							px4,	py1,	3010 + 5 * gs_stack_right,	! 15 or 8
							px3,	py2,	  62 + mask,
							px2,	py2, 	3015
					endif

					del 2
				endif

				if iWindowShape = SHAPE_ELLIPSEARCH then

					px1 = offsArc - rBoard * alfaLeftParallelIn * DegRad - gs_trim_offs_in - gs_tw_left_in + tolerOffsetLeftIn
					px4 = offsArc + rBoard * alfaRightParallelIn * DegRad + gs_tw_right_in + gs_trim_offs_in - tolerOffsetRightIn

					s3 = 9 + 4 * (abs(gs_trim_offs_in) > EPS | not(gs_trim_show_cover_in) | abs(gs_trim_thk_in) < EPS) - 2 * gs_stack_right

					offs = (leftWidth + overSizeLeftIn - (rBoard * alfaLeft * DegRad))
					if wallIsLeft then
						s3 = 9 + 4 * (abs(gs_trim_offs_in) > EPS | not(gs_trim_show_cover_in) | abs(gs_trim_thk_in) < EPS) - 2 * gs_stack_right
					else
						s3 = 12 + 1 * (abs(gs_trim_offs_in) > EPS | not(gs_trim_show_cover_in) | abs(gs_trim_thk_in) < EPS) - 2 * gs_stack_right
					endif
					mulRatio = (archHeight / (archHeight + overSizeLeftIn - offs))

					addy B - tolerOffsetUpper + ((archHeight * mulRatio) - archHeight)
					muly mulRatio
					offs = (leftWidth + overSizeLeftIn - (rBoard * alfaLeft * DegRad + gs_trim_offs_in - gs_trim_width_in))

					bprism_ gs_trim_in_mat, gs_trim_in_mat, gs_trim_in_mat,
						13, -signWallIsLeft * gs_trim_thk_in, rBoard,
						signWallIsLeft * offsArc + leftWidth + overSizeLeftIn - offs - tolerOffsetLeft,					-archHeight,			s3,
						signWallIsLeft * offsArc + leftWidth - smallRadiusEllips,										-archHeight,			900+s3,
						0,		 																						 alphaSide,				4000+s3,
						signWallIsLeft * offsArc - (leftWidth - rightWidth)/2,											-middleRadiusEllips, 	900+s3,
						0,		 																						 alphaMiddle,			4000+s3,
						signWallIsLeft * offsArc - rightWidth + smallRadiusEllips, 										-archHeight,			900+s3,
						0,		 																						 alphaSide,				4008,
						signWallIsLeft * offsArc - rightWidth - overSizeLeftIn + tolerOffsetRight + offs - gs_tw_left_in,-archHeight,			79,
						0,		 																						-alphaSide,				4079,
						signWallIsLeft * offsArc - (leftWidth - rightWidth)/2,											-middleRadiusEllips, 	979,
						0,		 																						-alphaMiddle,			4079,
						signWallIsLeft * offsArc + leftWidth - smallRadiusEllips,										-archHeight,			979,
						0,		 																						-alphaSide,				4008

					del 2

				endif
				gosub "TextCoord_Hor"


				! ===== Inside Trim - Curved Walls - Casing - Sides =====


				if not(bParalellInCurvedWalls) then
					px2 = signWallIsLeft * (offsArc - rBoard * alfaLeftIn * DegRad + gs_trim_width_in - gs_trim_offs_in)
					px1 = px2 - signWallIsLeft * gs_tw_left_in
				else
					px2 = signWallIsLeft * (offsArc - rBoard * alfaLeftParallelIn * DegRad + gs_trim_width_in - gs_trim_offs_in + tolerOffsetLeftIn)
					px1 = signWallIsLeft * (offsArc - rBoard * alfaLeftParallelIn * DegRad - gs_trim_offs_in - gs_tw_left_in + tolerOffsetLeftIn)
				endif
				if gs_stack_left then
					px1LUp = px2 - gs_trim_width_in + gs_trim_offs_in
					px2LUp = px1LUp
				else
					px1LUp = px1 * not(bTrimovbotleftin) + px2 * bTrimovbotleftin
					px2LUp = px2
				endif


				py3 = 0
				py4 = 0
				if	isWindow  | \
					bTShapedOpening then

					s3 = maskBottom						! 15 or 10 or 8
					if not(bParalellInCurvedWalls) then
						s4 = 13 + 2 * (not(gs_stack_bottom)) 	! 15 or 13
					else
						s4 = 13 + 2 * (not(gs_stack_bottom)) * bDrawLeftSLBoard
					endif
				else
					s3 = 15
					s4 = 15
				endif


				if	isWindow | \
					(bPShapedLeftOpening & gs_trim_below_boardLeft) then
					py3l = -overSizeBottomIn + not(bDrawLeftSLBoard) * tolerOffsetLowerIn + not(gs_stack_bottom) * (trinB*not(bDrawLeftSLBoard) - gs_trim_offs_in * not(gs_trim_atframe_in) * not(bDrawLeftSLBoard)\
					  - gs_trimov_bot_left_in - gs_tw_bottom_in * bTrimovbotleftin * not(gs_apron) - gs_apron_width * bTrimovbotleftin * gs_apron) - sjby
					py4l = -overSizeBottomIn + not(bDrawLeftSLBoard) * tolerOffsetLowerIn + not(gs_stack_bottom) * (trinB*not(bDrawLeftSLBoard) - gs_trim_offs_in * not(gs_trim_atframe_in) * not(bDrawLeftSLBoard)\
					 - gs_trimov_bot_left_in - gs_tw_bottom_in * (not(bDrawLeftSLBoard) | (bDrawLeftSLBoard & (bTrimovbotleftin | gs_trim_below_boardLeft))) * not(gs_apron) - gs_apron_width * bTrimovbotleftin * gs_apron) - sjby

					s3 = maskBottom						! 15 or 10 or 8
					s4 = 13 + 2 * not(gs_stack_bottom)	! 15 or 13
				else
					py3l = 0
					py4l = 0

					s3 = 15-7*gs_stack_bottom
					s4 = 15
				endif

				py5 = py3l + not(gs_stack_bottom) * bTrimovbotleftin * (gs_trimov_bot_left_in + gs_tw_bottom_in * not(gs_apron) + gs_apron_width * gs_apron) + gs_stack_bottom * gs_trim_stack_bottom * gs_tw_bottom_in / 2
				py6 = py3l + not(gs_stack_bottom) * bTrimovbotleftin * gs_trimov_bot_left_in

				if iWindowShape = SHAPE_ARCHED then py22 = py5

				if	bPShapedLeftOpening then
					py3l = py3l + gs_sidelight_parapet_hgt_left + gs_reveal_double_innerBottom_sL + overSizeBottomIn
					py4l = py4l + gs_sidelight_parapet_hgt_left + gs_reveal_double_innerBottom_sL + overSizeBottomIn
					py5 = py5 + gs_sidelight_parapet_hgt_left + gs_reveal_double_innerBottom_sL + overSizeBottomIn
					py6 = py6 + gs_sidelight_parapet_hgt_left + gs_reveal_double_innerBottom_sL + overSizeBottomIn
				endif


				if	bShapeEnablesStraightTopTrim then
					py2 = B + overSizeTopIn + not(gs_stack_top) * (-gs_trim_width_in + gs_trim_offs_in - tolerOffsetUpperIn)
					if not(bParalellInCurvedWalls) then
						py1 = B + overSizeTopIn + not(gs_stack_top) * (-gs_trim_width_in + gs_trim_offs_in + gs_tw_top_in*not(bTrimovtoprightin))
					else
						py1 = py2
					endif

					s1 = maskTop
					s2 = bitset (mask, 1, not(gs_stack_top))
					s5 = 8
				endif
				if	bShapeEnablesArchedTopTrim then
					ta = leftWidth - gs_trim_width_in
					tc = arcR + tolerOffsetUpper - gs_trim_width_in
					if tc > ta then
						py = B - arcR - tolerOffsetUpper + sqr(max(0, (tc * tc - ta * ta)))
					else
						py = B - arcR - tolerOffsetUpper
					endif

					ta = ta + gs_trim_offs_in
					tc = tc + gs_trim_offs_in
					if tc > ta then
						py2 = B - arcR - tolerOffsetUpper + sqr(max(0, (tc * tc - ta * ta)))
					else
						py2 = B - arcR - tolerOffsetUpper
					endif


					ta = ta + gs_tw_right_in
					tc = tc + gs_tw_right_in
					if tc > ta then
						py1 = B - arcR - tolerOffsetUpper + sqr(max(0, (tc * tc - ta * ta)))
					else
						py1 = B - arcR - tolerOffsetUpper
					endif


					py1 = py1 - (py1 - py) * (1 - mulRatio)		! Correct y coords with mulRatio
					py2 = py2 - (py2 - py) * (1 - mulRatio)

					s1 = 8
					s2 = mask - 2
					s5 = 8
				endif
				if iWindowShape = SHAPE_ELLIPSEARCH then
					py1 = B - archHeight - tolerOffsetUpper
					py2 = B - archHeight - tolerOffsetUpper

					s1 = 8
					s2 = mask - 2
				endif

				if not(gs_stack_left | bLeftCornerFunction) & bShapeEnablesStraightLeftTrim then
					if bParalellInCurvedWalls then
						add 0, 0, -rBoard
						roty -(not(bCondition) - bCondition) * abs(AC_Hole_Position_Angle) - not(wallIsLeft) * 180

						cutpolya 6, 1, 0,
							-leftWidth + tolerOffsetLeftIn - overSizeLeftIn + gs_trim_width_in - gs_trim_offs_in,  py5,  2,
							-leftWidth + tolerOffsetLeftIn - overSizeLeftIn + gs_trim_width_in - gs_trim_offs_in,  py6,  7 - 2 * ( not(gs_apron) & bDrawLeftSLBoard),
							-leftWidth + tolerOffsetLeftIn - overSizeLeftIn + gs_trim_width_in - gs_trim_offs_in,  -overSizeBottomIn - (gs_trimov_bot_left_in + gs_tw_bottom_in * bTrimovbotleftin * not(gs_apron) + gs_apron_width * bTrimovbotleftin * gs_apron),  7,
							rightWidth - tolerOffsetRightIn + overSizeRightIn, -overSizeBottomIn - (gs_trimov_bot_left_in + gs_tw_bottom_in * bTrimovbotleftin * not(gs_apron) + gs_apron_width * bTrimovbotleftin * gs_apron),  7,
							rightWidth - tolerOffsetRightIn + overSizeRightIn, B + overSizeTopIn, 1,
							-leftWidth + tolerOffsetLeftIn - overSizeLeftIn + gs_trim_width_in - gs_trim_offs_in,  B + overSizeTopIn,  1
						del 2
					endif

					body -1
					if (gs_apron & abs(gs_trim_thk_in - gs_apron_thk) < EPS) | (not(gs_apron) & (not(bDrawLeftSLBoard) | gs_trim_below_boardLeft)) then
						if bTrimovbotleftin then
							s6 = 15 - 7*gs_stack_bottom
						else
							if gs_tw_bottom_in then
								s6 = s3
							else
								s6 = bitset(s3, 0)
								s6 = bitset(s6, 2)
							endif
						endif
						bprism_ gs_trim_in_mat, gs_trim_in_mat, gs_trim_in_mat,
							4, -signWallIsLeft * gs_trim_thk_in, rBoard,
							px1,	py1,	s1,
							px2,	py2,	s2,
!							px2,	py5,	s5,
!							px2,	py6,	s3*not(bTrimovbotleftin)+bTrimovbotleftin*15,
							px2,	py3l,	s6,
							px1,	py4l,	s4
					else
						bprism_ gs_trim_in_mat, gs_trim_in_mat, gs_trim_in_mat,
							4+1, -signWallIsLeft * gs_trim_thk_in, rBoard,
							px1,	py1,	s1,
							px2,	py2,	s2,
							px2,	py3l+gs_tw_bottom_in * bTrimovbotleftin * not(gs_apron) + gs_apron_width * bTrimovbotleftin * gs_apron + gs_trimov_bot_left_in,	15-6*gs_stack_bottom,
							px2,	py3l+gs_tw_bottom_in * bTrimovbotleftin * not(gs_apron) + gs_apron_width * bTrimovbotleftin * gs_apron,	15-7*gs_stack_bottom,
							px1,	py3l+gs_tw_bottom_in * bTrimovbotleftin * not(gs_apron) + gs_apron_width * bTrimovbotleftin * gs_apron,	s4

					endif
					gosub "TextCoord_Vert"

					if bParalellInCurvedWalls then
						cutend
					endif
				endif


				if not(bParalellInCurvedWalls) then
					px2 = signWallIsLeft * (offsArc + rBoard * alfaRightIn * DegRad - gs_trim_width_in + gs_trim_offs_in)
					px1 = px2 + signWallIsLeft * gs_tw_right_in
				else
					px2 = signWallIsLeft * (offsArc + rBoard * alfaRightParallelIn * DegRad + gs_trim_offs_in - gs_trim_width_in - tolerOffsetRightIn)
					px1 = signWallIsLeft * (offsArc + rBoard * alfaRightParallelIn * DegRad + gs_trim_offs_in + gs_tw_right_in - tolerOffsetRightIn)
				endif
				if gs_stack_right then
					px1RUp = px2 + gs_trim_width_in - gs_trim_offs_in
					px2RUp = px1RUp
				else
					px1RUp = px1 * not(bTrimovbotrightin) + px2 * bTrimovbotrightin
					px2RUp = px2
				endif

				if	isWindow | \
					(bPShapedRightOpening & gs_trim_below_boardRight) then
					py3r = -overSizeBottomIn + not(bDrawRightSLBoard) * tolerOffsetLowerIn + not(gs_stack_bottom) * (trinB*not(bDrawRightSLBoard) - gs_trim_offs_in * not(gs_trim_atframe_in) * not(bDrawRightSLBoard)\
					 - gs_trimov_bot_right_in - gs_tw_bottom_in * bTrimovbotrightin * not(gs_apron) - gs_apron_width*bTrimovbotrightin * gs_apron) - sjBy
					py4r = -overSizeBottomIn + not(bDrawRightSLBoard) * tolerOffsetLowerIn + not(gs_stack_bottom) * (trinB*not(bDrawRightSLBoard) - gs_trim_offs_in * not(gs_trim_atframe_in) * not(bDrawRightSLBoard)\
					 - gs_trimov_bot_right_in - gs_tw_bottom_in * (not(bDrawRightSLBoard) | (bDrawRightSLBoard & (bTrimovbotrightin | gs_trim_below_boardRight))) * not(gs_apron) - gs_apron_width * bTrimovbotleftin * gs_apron) - sjBy

					s3 = maskBottom						! 15 or 10 or 8
					s4 = 13 + 2 * not(gs_stack_bottom)	! 15 or 13
				else
					py3r = 0
					py4r = 0

					s3 = 15-7*gs_stack_bottom
					s4 = 15
				endif

				py5 = py3r + not(gs_stack_bottom) * bTrimovbotrightin * (gs_trimov_bot_right_in + gs_tw_bottom_in * not(gs_apron) + gs_apron_width * gs_apron) + gs_stack_bottom * gs_trim_stack_bottom * gs_tw_bottom_in / 2
				py6 = py3r + not(gs_stack_bottom) * bTrimovbotrightin  * gs_trimov_bot_right_in

				if iWindowShape = SHAPE_ARCHED then py22 = py5

				if	bPShapedRightOpening then
					py3r = py3r + gs_sidelight_parapet_hgt_right + gs_reveal_double_innerBottom_sR + overSizeBottomIn
					py4r = py4r + gs_sidelight_parapet_hgt_right + gs_reveal_double_innerBottom_sR + overSizeBottomIn
					py5 = py5 + gs_sidelight_parapet_hgt_right + gs_reveal_double_innerBottom_sR + overSizeBottomIn
					py6 = py6 + gs_sidelight_parapet_hgt_right + gs_reveal_double_innerBottom_sR + overSizeBottomIn
				endif



				if	bShapeEnablesStraightTopTrim then
					py2 = B + overSizeTopIn + not(gs_stack_top) * (-gs_trim_width_in + gs_trim_offs_in - tolerOffsetUpperIn)
					if not(bParalellInCurvedWalls) then
						py1 = B + overSizeTopIn + not(gs_stack_top) * (-gs_trim_width_in + gs_trim_offs_in + gs_tw_top_in*not(bTrimovtoprightin))
					else
						py1 = py2
					endif

					s1 = maskTop
					s2 = bitset (mask, 1, not(gs_stack_top))
					s5 = 8
				endif
				if	bShapeEnablesArchedTopTrim then
					ta = rightWidth - gs_trim_width_in
					tc = arcR + tolerOffsetUpper - gs_trim_width_in
					if tc > ta then
						py = B - arcR - tolerOffsetUpper + sqr(max(0, (tc * tc - ta * ta)))
					else
						py = B - arcR - tolerOffsetUpper
					endif

					ta = ta + gs_trim_offs_in
					tc = tc + gs_trim_offs_in
					if tc > ta then
						py2 = B - arcR - tolerOffsetUpper + sqr(max(0, (tc * tc - ta * ta)))
					else
						py2 = B - arcR - tolerOffsetUpper
					endif

					ta = ta + gs_tw_right_in
					tc = tc + gs_tw_right_in
					if tc > ta then
						py1 = B - arcR - tolerOffsetUpper + sqr(max(0, (tc * tc - ta * ta)))
					else
						py1 = B - arcR - tolerOffsetUpper
					endif

					py1 = py1 - (py1 - py) * (1 - mulRatio)		! Correct y coords with mulRatio
					py2 = py2 - (py2 - py) * (1 - mulRatio)

					s1 = 8
					s2 = mask - 2
					s5 = 8
				endif

				if not(gs_stack_right | bRightCornerFunction) & bShapeEnablesStraightRightTrim then
					if bParalellInCurvedWalls then
						add 0, 0, -rBoard
						roty -(not(bCondition) - bCondition) * abs(AC_Hole_Position_Angle) - not(wallIsLeft) * 180

						cutpolya 6, 1, 0,
							rightWidth - tolerOffsetRightIn + overSizeRightIn - gs_trim_width_in + gs_trim_offs_in,  py5,  2,
							rightWidth - tolerOffsetRightIn + overSizeRightIn - gs_trim_width_in + gs_trim_offs_in,  py6,  7 - 2 * ( not(gs_apron) & bDrawRightSLBoard),
							rightWidth - tolerOffsetRightIn + overSizeRightIn - gs_trim_width_in + gs_trim_offs_in,  -overSizeBottomIn - (gs_trimov_bot_right_in + gs_tw_bottom_in * bTrimovbotleftin * not(gs_apron) + gs_apron_width * bTrimovbotleftin * gs_apron),  7,
							-leftWidth + tolerOffsetLeftIn, -overSizeBottomIn - (gs_trimov_bot_right_in + gs_tw_bottom_in * bTrimovbotleftin * not(gs_apron) + gs_apron_width * bTrimovbotleftin * gs_apron),  7,
							-leftWidth + tolerOffsetLeftIn, B + overSizeTopIn, 1,
							rightWidth - tolerOffsetRightIn + overSizeRightIn - gs_trim_width_in + gs_trim_offs_in,  B + overSizeTopIn,  1
						del 2
					endif

					body -1
					if (gs_apron & abs(gs_trim_thk_in - gs_apron_thk) < EPS) | (not(gs_apron) & (not(bDrawRightSLBoard) | gs_trim_below_boardRight)) then
						if bTrimovbotrightin then
							s6 = 15 - 7*gs_stack_bottom
						else
							if gs_tw_bottom_in then
								s6 = s3
							else
								s6 = bitset(s3, 0)
								s6 = bitset(s6, 2)
							endif
						endif
						bprism_ gs_trim_in_mat, gs_trim_in_mat, gs_trim_in_mat,
							4, -signWallIsLeft * gs_trim_thk_in, rBoard,
							px1,	py1,	s1,
							px2,	py2,	s2,
!							px2,	py5,	s5,
!							px2,	py6,	s3*not(bTrimovbotrightin)+bTrimovbotrightin*15,
							px2,	py3r,	s6,
							px1,	py4r,	s4
					else
						bprism_ gs_trim_in_mat, gs_trim_in_mat, gs_trim_in_mat,
							4+1, -signWallIsLeft * gs_trim_thk_in, rBoard,
							px1,	py1,	s1,
							px2,	py2,	s2,
							px2,	py3r+gs_tw_bottom_in * bTrimovbotrightin* not(gs_apron)+gs_trimov_bot_right_in,	15-6*gs_stack_bottom,
							px2,	py3r+gs_tw_bottom_in * bTrimovbotrightin* not(gs_apron),	15-7*gs_stack_bottom,
							px1,	py3r+gs_tw_bottom_in * bTrimovbotrightin* not(gs_apron),	s4
					endif
					gosub "TextCoord_Vert"

					if bParalellInCurvedWalls then
						cutend
					endif
				endif


				if	bTShapedOpening then

					py1 = -overSizeBottomIn
					py2 = -overSizeBottomIn

					px1l = 0
					px2l = 0
					if bPShapedLeftOpening then
						px1l = signWallIsLeft * (offsArc - leftWidth - overSizeLeftIn + gs_sidelight_WHole_width_left + trinL - gs_trim_offs_in)
						px2l = px1l - signWallIsLeft * gs_trim_below_boardLeft * gs_tw_left_in
						py3l = py4l + gs_trimov_bot_left_in
						py4l = py3l + gs_tw_bottom_in
					endif
					px1r = 0
					px2r = 0
					if bPShapedRightOpening then
						px1r = signWallIsLeft * (offsArc + rightWidth + overSizeRightIn - gs_sidelight_WHole_width_right - trinR + gs_trim_offs_in)
						px2r = px1r + signWallIsLeft * gs_trim_below_boardRight * gs_tw_right_in
						py3r = py4r + gs_trimov_bot_right_in
						py4r = py3r + gs_tw_bottom_in
					endif

					add 0, -gs_tw_bottom_in, -rBoard
					roty -(not(bCondition) - bCondition) * abs(AC_Hole_Position_Angle) - not(wallIsLeft) * 180

!						prism_ 4,7,
!							- leftWidth - overSizeLeftIn + gs_sidelight_WHole_width_left + gs_trim_width_in - gs_trim_offs_in,  py1,  15,
!							rightWidth + overSizeRightIn - gs_sidelight_WHole_width_right - gs_trim_width_in + gs_trim_offs_in,  py1,  (11 + 4 * (gs_trim_offs_in > EPS))*bCondition + (14 + (gs_trim_offs_in > EPS))*not(bCondition),
!							rightWidth + overSizeRightIn - gs_sidelight_WHole_width_right - gs_trim_width_in + gs_trim_offs_in,  MAX(py4l, py4r) + gs_tw_bottom_in,  15,
!							- leftWidth - overSizeLeftIn + gs_sidelight_WHole_width_left + gs_trim_width_in - gs_trim_offs_in, MAX(py4l, py4r) + gs_tw_bottom_in,  (11 + 4 * (gs_trim_offs_in > EPS))*bCondition + (14 + (gs_trim_offs_in > EPS))*not(bCondition)

					cutpolya 4, 1, 0,
						-leftWidth - overSizeLeftIn + gs_sidelight_WHole_width_left + gs_trim_width_in - gs_trim_offs_in,  py1,  15,
						rightWidth + overSizeRightIn - gs_sidelight_WHole_width_right - gs_trim_width_in + gs_trim_offs_in,  py1,  (11 + 4 * (gs_trim_offs_in > EPS))*not(WIDO_REVEAL_SIDE) + (14 + (gs_trim_offs_in > EPS))*WIDO_REVEAL_SIDE,
						rightWidth + overSizeRightIn - gs_sidelight_WHole_width_right - gs_trim_width_in + gs_trim_offs_in,  MAX(py4l, py4r) + gs_tw_bottom_in,  15,
						-leftWidth - overSizeLeftIn + gs_sidelight_WHole_width_left + gs_trim_width_in - gs_trim_offs_in, MAX(py4l, py4r) + gs_tw_bottom_in,  (11 + 4 * (gs_trim_offs_in > EPS))*not(WIDO_REVEAL_SIDE) + (14 + (gs_trim_offs_in > EPS))*WIDO_REVEAL_SIDE

					del 2

					if bPShapedLeftOpening & gs_trim_below_boardLeft then
						! --- Draw Door's Left side Trim  Curved Wall---
						bprism_ gs_trim_in_mat, gs_trim_in_mat, gs_trim_in_mat,
							4, -signWallIsLeft * gs_trim_thk_in, rBoard,
							px1l,	py1,	15,
							px2l,	py2,	s4,
							px2l,	py3l,	10,
							px1l,	py4l,	s2
						gosub "TextCoord_Vert"
					endif

					if bPShapedRightOpening & gs_trim_below_boardRight then
						! --- Draw Door's Right side Trim  Curved Wall---
						bprism_ gs_trim_in_mat, gs_trim_in_mat, gs_trim_in_mat,
							4, -signWallIsLeft * gs_trim_thk_in, rBoard,
							px1r,	py1,	15,
							px2r,	py2,	s4,
							px2r,	py3r,	10,
							px1r,	py4r,	s2
						gosub "TextCoord_Vert"
					endif

					if bPShapedLeftOpening & gs_trim_below_boardLeft then
						! --- Draw Left lower Trim  Curved Wall---
						bprism_ gs_trim_in_mat, gs_trim_in_mat, gs_trim_in_mat,
							4, -signWallIsLeft * gs_trim_thk_in, rBoard,
							px2LUp,	py4l,	10 - 2 * gs_stack_left,
							px1LUp,	py3l,	15,
							px2l,	py3l,	10 + 5 * not(gs_trim_below_boardLeft),
							px1l,	py4l,	mask
						gosub "TextCoord_Hor"
					endif

					if bPShapedRightOpening & gs_trim_below_boardRight then
						! --- Draw Right lower Trim  Curved Wall---
						bprism_ gs_trim_in_mat, gs_trim_in_mat, gs_trim_in_mat,
							4, -signWallIsLeft * gs_trim_thk_in, rBoard,
							px2RUp,	py4r,	10 - 2 * gs_stack_left,
							px1RUp,	py3r,	15,
							px2r,	py3r,	10 + 5 * not(gs_trim_below_boardRight),
							px1r,	py4r,	mask
						gosub "TextCoord_Hor"
					endif

					cutend
				endif

				del 3
			endif
		endif
	endif	! not(curvedWall)


	if bDrawLeftTrimatGangingIn then
		! --- Draw left side Trim at Ganging ---

		px2 = leftRevealPnts[idxBoardEndRevealLeft-1][1] + tolerOffsStackCasLeftIn + trinL - gs_trim_offs_in
		px1 = leftRevealPnts[idxBoardEndRevealLeft-1][1]
		px3 = leftRevealPnts[idxBoardEndRevealLeft-1][1] - gs_trim_thk_in * tan(alfaLeft)

		if iWindowShape = SHAPE_RECTANGULAR then

			if gs_stack_top then
				py1 = B + overSizeTopIn + sjTy
				py2 = py1
				py5 = py2 - ( tolerOffsStackCasUpperIn + trinT - gs_trim_offs_in) * gs_trim_stack_top
			else
				py1 = B + overSizeTopIn - tolerOffsetUpperIn - trinT + (gs_trim_offs_in* not(gs_trim_atframe_in) * (ABS(thk)<EPS)) + sjTy
				py2 = py1
				py5 = py2
			endif

			py = -overSizeBottomIn + tolerOffsStackCasLowerIn + not(gs_stack_bottom) * (trinB*not(bDrawBoard) - gs_trim_offs_in * not(gs_trim_atframe_in) * (ABS(thk)<EPS)) - sjBy

			if gs_stack_bottom then
				py3 = py
				py4 = py
				py6 = py3 + ( tolerOffsStackCasLowerIn + trinB - gs_trim_offs_in) * gs_trim_stack_bottom
			else
				py3 = py
				py4 = py3
				py6 = py3
			endif

			s1 = 8 + 5 * (not(gs_stack_top) & bGangedCasingonFrame)
			s2 = 8
			s5 = 13 + 2 * (gs_trim_stack_top | (not(gs_trim_stack_top) & not(gs_trim_atframe_in)))
			s3 = 8 + 7 * (not(gs_stack_bottom) & bGangedCasingonFrame)
			s4 = 8
			s6 = 8 + 7 * (not(gs_stack_bottom) & bGangedCasingonFrame)
		endif

		addz - WIDO_FRAME_THICKNESS - gs_trim_thk_in

		add px1, 0, gs_trim_thk_in
		roty  alfaLeft * ySign - 90
		cutplane 1, 1, 0
		del 2

		body -1

		prism_ 	6, gs_trim_thk_in,
			px3,	py1,	s1,
			px2,	py2,	s2,
			px2,	py5,	s5,
			px2,	py6,	s6,
			px2,	py3,	s3,
			px3,	py4,	s4

		gosub "TextCoord_Vert"

		cutend

		del 1
	endif

	if bDrawRightTrimatGangingIn then
		! --- Draw right side Trim at Ganging ---

		px2 = rightRevealPnts[idxBoardEndRevealRight-1][1]  - tolerOffsStackCasRightIn - trinR + gs_trim_offs_in
		px1 = rightRevealPnts[idxBoardEndRevealRight-1][1]
		px3 = rightRevealPnts[idxBoardEndRevealRight-1][1] + gs_trim_thk_in * tan(alfaRight)

		if iWindowShape = SHAPE_RECTANGULAR then
			if gs_stack_top then
				py1 = B + overSizeTopIn  + sjTy
				py2 = py1
				py5 = py2 - ( tolerOffsStackCasUpperIn  + trinT - gs_trim_offs_in) * gs_trim_stack_top
			else
				py1 = B + overSizeTopIn - tolerOffsetUpperIn - trinT + (gs_trim_offs_in * not(gs_trim_atframe_in) * (ABS(thk)<EPS)) + sjTy
				py2 = py1
				py5 = py2
			endif

			py = -overSizeBottomIn + tolerOffsStackCasLowerIn + not(gs_stack_bottom) * (trinB*not(bDrawBoard)- gs_trim_offs_in * not(gs_trim_atframe_in) * (ABS(thk)<EPS)) - sjBy

			if gs_stack_bottom then
				py3 = py
				py4 = py
				py6 = py3 + ( tolerOffsStackCasLowerIn + trinB - gs_trim_offs_in) * gs_trim_stack_bottom
			else
				py3 = py
				py4 = py3
				py6 = py3
			endif

			s1 = 8 + 5 * (not(gs_stack_top) & bGangedCasingonFrame)
			s2 = 8
			s5 = 13 + 2 * (gs_trim_stack_top | (not(gs_trim_stack_top) & not(gs_trim_atframe_in)))
			s3 = 8 + 7 * (not(gs_stack_bottom) & bGangedCasingonFrame)
			s4 = 8
			s6 = 8 + 7 * (not(gs_stack_bottom) & bGangedCasingonFrame)
		endif

		addz - WIDO_FRAME_THICKNESS - gs_trim_thk_in

		add px1, 0, gs_trim_thk_in
		roty  90 - alfaRight * ySign
		cutplane 1, 1, 0
		del 2

		body -1

		prism_ 	6, gs_trim_thk_in,
			px3,	py1,	s1,
			px2,	py2,	s2,
			px2,	py5,	s5,
			px2,	py6,	s6,
			px2,	py3,	s3,
			px3,	py4,	s4

		gosub "TextCoord_Vert"

		cutend

		del 1
	endif

	if bDrawBottTrimatGangingIn then
	! --- Draw lower Trim at Ganging ---

		if not(gs_stack_left) then
			px1 = leftRevealPnts[idxBoardEndRevealLeft][1]  + tolerOffsetLeftIn + trinL - gs_trim_offs_in * (ABS(thk)<EPS)
			px11 = leftRevealPnts[idxBoardEndRevealLeft-1][1]
		else
			px1 = leftRevealPnts[idxBoardEndRevealLeft-1][1] + (tolerOffsStackCasLeftIn + trinL - gs_trim_offs_in) * gs_trim_stack_left - (gs_trim_thk_in) * tan(alfaLeft) * not(gs_trim_stack_left)
			px11 = leftRevealPnts[idxBoardEndRevealLeft-1][1]
		endif

		if not(gs_stack_right) then
			px2 = rightRevealPnts[idxBoardEndRevealright][1] - tolerOffsetRightIn - trinR + gs_trim_offs_in * (ABS(thk)<EPS)
			px22 = rightRevealPnts[idxBoardEndRevealRight-1][1]
		else
			px2 = rightRevealPnts[idxBoardEndRevealRight-1][1] - (tolerOffsStackCasRightIn + trinR - gs_trim_offs_in) * gs_trim_stack_right  + (gs_trim_thk_in) * tan(alfaRight) * not(gs_trim_stack_right)
			px22 = rightRevealPnts[idxBoardEndRevealRight-1][1]
		endif

		py2 = -overSizeBottomIn
		py1 = py2 + tolerOffsStackCasLowerIn + trinB - gs_trim_offs_in

		s1 = 15 - 2 * (gs_stack_right & not(gs_trim_stack_right))
		s2 = 10 + 5 * (not(gs_stack_right) & bGangedCasingonFrame) - 2 * (gs_stack_right & not(gs_trim_stack_right))
		s3 = 8
		s4 = 8 + 5 * (not(gs_stack_left) & bGangedCasingonFrame)

		addz - WIDO_FRAME_THICKNESS - gs_trim_thk_in

		add px11, 0, gs_trim_thk_in
		roty  alfaLeft * ySign - 90
		cutplane 1, 1, 0
		del 2

		add px22, 0, gs_trim_thk_in
		roty  90 - alfaRight * ySign
		cutplane 1, 1, 0
		del 2

		prism_ 4, gs_trim_thk_in,
			px1,	py1, 	s1,
			px2,	py1, 	s2,
			px2,	py2,	s3,
			px1,	py2,	s4
		gosub "TextCoord_Hor"

		cutend
		cutend

		del 1
	endif

	if bDrawTopTrimatGangingIn then
		! --- Draw upper Trim at Ganging ---

		if not(gs_stack_left) then
			px1 = leftRevealPnts[idxBoardEndRevealLeft][1]  + tolerOffsetLeftIn + trinL - gs_trim_offs_in * (ABS(thk)<EPS)
			px11 = leftRevealPnts[idxBoardEndRevealLeft-1][1]
		else
			px1 = leftRevealPnts[idxBoardEndRevealLeft-1][1] + (tolerOffsStackCasLeftIn + trinL - gs_trim_offs_in) * gs_trim_stack_left - (gs_trim_thk_in) * tan(alfaLeft) * not(gs_trim_stack_left)
			px11 = leftRevealPnts[idxBoardEndRevealLeft-1][1]
		endif

		if not(gs_stack_right) then
			px2 = rightRevealPnts[idxBoardEndRevealright][1] - tolerOffsetRightIn - trinR + gs_trim_offs_in * (ABS(thk)<EPS)
			px22 = rightRevealPnts[idxBoardEndRevealRight-1][1]
		else
			px2 = rightRevealPnts[idxBoardEndRevealRight-1][1] - (tolerOffsStackCasRightIn + trinR - gs_trim_offs_in) * gs_trim_stack_right + (gs_trim_thk_in) * tan(alfaRight) * not(gs_trim_stack_right)
			px22 = rightRevealPnts[idxBoardEndRevealRight-1][1]
		endif


		py2 = B + overSizeTopIn
		py1 = py2  - tolerOffsStackCasUpperIn - trinT + gs_trim_offs_in

		s1 = 15 - 2 * (gs_stack_right & not(gs_trim_stack_right))
		s2 = 10 + 5 * (not(gs_stack_right) & bGangedCasingonFrame) - 2 * (gs_stack_right & not(gs_trim_stack_right))
		s3 = 8
		s4 = 8 + 5 * (not(gs_stack_left) & bGangedCasingonFrame)

		addz - WIDO_FRAME_THICKNESS - gs_trim_thk_in

		add px11, 0, gs_trim_thk_in
		roty  alfaLeft * ySign - 90
		cutplane 1, 1, 0
		del 2

		add px22, 0, gs_trim_thk_in
		roty  90 - alfaRight * ySign
		cutplane 1, 1, 0
		del 2

		prism_ 4, gs_trim_thk_in,
			px1,	py1, 	s1,
			px2,	py1, 	s2,
			px2,	py2,	s3,
			px1,	py2,	s4
		gosub "TextCoord_Hor"

		cutend
		cutend

		del 1
	endif

	del 1

	for i=1 to numCutsCornerColumn
		cutend
	next i
return


2000:
! ==============================================================================
!	Draw Outside Trim
! ==============================================================================

	pen gs_frame_pen

	numCutsCornerColumn = 0

	if gs_corner_column then
		matTrim = gs_trim_out_mat

		material gs_trim_out_mat
		sect_fill gs_trim_fill_out, gs_trim_pen_bg_out, gs_trim_pen_fg_out, gs_trim_pen_cont_out

		gosub 100
	endif

	if not(curvedWall) | (curvedWall & gs_trim_atframe_out) then

		! ======================================
		! Outside Trim - Straight Walls
		! ======================================

		if gs_sectgar = 0 then thk = WIDO_SILL + gs_trim_jambext_nosing_out
		if gs_sectgar = 1 then thk = WALL_THICKNESS - WIDO_SILL

		mask = 10 +\
				1 * bShowEdgesAtFrame +\
				4 * (gs_trim_offs_out > EPS | not(bShowJambExtension) | abs(WIDO_SILL) < EPS | not(gs_trim_show_cover_out) | abs(gs_trim_thk_out) < EPS)

		rotx 180
		addz WIDO_SILL * (gs_trim_atframe_out = 0)
		mulz -1

		if gs_trim_width_out > EPS & thk > EPS & bShowJambExtension & (gs_trim_atframe_out = 0 |\
			(gs_trim_atframe_out = 1 & gs_sectgar)) then

			matTrim = gs_trim_out_mat

			material gs_trim_out_mat
			sect_fill gs_trim_fill_out, gs_trim_pen_bg_out, gs_trim_pen_fg_out, gs_trim_pen_cont_out

			! ===== Outside Trim - Straight Walls - Jamb Extensions =====

			addz thk - gs_trim_jambext_nosing_out
			mulz -1

			if not(gs_stack_left | gs_stack_right | gs_stack_top | gs_stack_bottom | not(bCasingBottomOutside) | bDrawSill | bLeftCornerFunction | bRightCornerFunction | iWindowShape <> SHAPE_RECTANGULAR | not(isWindow)) then
				! --- Not Stacked Window ---
				px1 = -leftWidth - overSizeLeft  + widoLeftJamb + tolerOffsetLeftOut
				px2 = rightWidth + overSizeRight - widoRightJamb - tolerOffsetRightOut
				px3 = px1 + gs_trim_width_out
				px4 = px2 - gs_trim_width_out

				py1 = -overSizeBottom + widoThresDepth + tolerOffsetLowerOut
				py2 = B + overSizeTop - widoHeadDepth - tolerOffsetUpperOut
				py3 = py1 + gs_trim_width_out
				py4 = py2 - gs_trim_width_out

				cprism_{2} gs_trim_out_mat, gs_trim_out_mat, gs_trim_out_mat,
					10, thk,
					px1,	py1, 0, 15, gs_trim_out_mat,
					px1,	py2, 0, 15, gs_trim_out_mat,
					px2,	py2, 0, 15, gs_trim_out_mat,
					px2,	py1, 0, 15, gs_trim_out_mat,
					px1,	py1, 0, -1, gs_trim_out_mat,
					px3,	py3, 0, mask, gs_trim_out_mat,
					px3,	py4, 0, mask, gs_trim_out_mat,
					px4,	py4, 0, mask, gs_trim_out_mat,
					px4,	py3, 0, mask, gs_trim_out_mat,
					px3,	py3, 0, -1, gs_trim_out_mat
			else
				! --- Stacked Window or Window with Sill or Corner Window ---

				if	isWindow | \
					(bPShapedLeftOpening & gs_trim_below_sillLeft) then
					py4 = -overSizeBottomLeft + not(gs_stack_bottom) * widoThresDepth + tolerOffsetLowerOut
					py3 = py4 + not(gs_stack_bottom | not(bCasingBottomOutside) | bDrawLeftSLSill) * gs_trim_width_out

					s3 = 8 + 2 * not(gs_stack_bottom)	! 15 or 8
					s4 = 13 + 2 * not(gs_stack_bottom)	! 15 or 13
				else
					py3 = -overSizeBottomLeft + bDrawSill * widoThresDepth
					py4 = -overSizeBottomLeft + bDrawSill * widoThresDepth

					s3 = 15
					s4 = 15
				endif

				! --- Draw Left Side Jamb extension ---
				px1 = -leftWidth
				if not(gs_sectgar) then
					px1 = px1 + widoLeftJamb + tolerOffsetLeftOut
				else
					if bCasingTolerance then
						px1 = px1 + gs_tolerance_left
					endif
				endif
				px2 = px1 + gs_trim_width_out * not(gs_stack_left)


				if	bShapeEnablesStraightTopTrim then
					py1 = B
					if not(gs_sectgar) then
						py1 = py1 + overSizeTop - not(gs_stack_top) * widoHeadDepth - tolerOffsetUpperOut
					else
						py1 = py1 - bCasingTolerance * gs_tolerance_upper
					endif
					py2 = py1 - not(gs_stack_top) * gs_trim_width_out

					s1 = 8 + 2 * not(gs_stack_top)		! 15 or 8
					s2 = bitset (mask, 1, not(gs_stack_top))
				endif

				if	bShapeEnablesArchedTopTrim then
					ta = leftWidth - not(bHalfCircle) * widoHeadDepth
					tc = arcR - not(bHalfCircle) * widoHeadDepth
					py1 = B - arcR + sqr(max(0, (tc * tc - ta * ta)))

					ta = ta - gs_trim_width_out
					tc = tc - gs_trim_width_out
					py2 = B - arcR + sqr(max(0, (tc * tc - ta * ta)))

					s1 = 8
					s2 = mask - 2
				endif

				if iWindowShape = SHAPE_ELLIPSEARCH then
					py1 = B + overSizeTopOut - tolerOffsetUpperOut - archHeight
					py2 = py1

					s1 = 8
					s2 = mask - 2
				endif

				if	bPShapedLeftOpening then
					py3 = py3 + gs_sidelight_parapet_hgt_left + gs_reveal_bottom_sL - gs_reveal_bottom
					py4 = py4 + gs_sidelight_parapet_hgt_left + gs_reveal_bottom_sL - gs_reveal_bottom
				endif

				if bShapeEnablesStraightLeftTrim & not(gs_stack_left | bLeftCornerFunction) then
					cprism_{2} gs_trim_out_mat, gs_trim_out_mat, gs_trim_out_mat,
						4, thk,
						px1,	py1, 	0, s1, gs_trim_out_mat,
						px2,	py2, 	0, s2, gs_trim_out_mat,
						px2,	py3,	0, s3, gs_trim_out_mat,
						px1,	py4, 	0, s4, gs_trim_out_mat
					gosub "TextCoord_Vert"
				endif

				if	bPShapedLeftOpening & gs_trim_below_sillLeft then
					! --- Draw Door's Left side Jamb Extension ---
					px1LSL = leftRevealPnts[idxSillStartRevealLeft][1] + gs_sidelight_WHole_width_left
					px2LSL = px1LSL + gs_trim_width_out
					px1LSLW = leftRevealPnts[idxSillStartRevealLeft][1] + tolerOffsetLeftIn
					px2LSLW = leftRevealPnts[idxSillStartRevealLeft][1] + tolerOffsetLeftIn + gs_trim_width_out * not(gs_stack_left)

					py1 = widoThresDepth
					py2 = widoThresDepth

					cprism_{2} gs_trim_out_mat, gs_trim_out_mat, gs_trim_out_mat,
						4, thk,
						px1LSL,	py1, 	0, 15, gs_trim_out_mat,
						px2LSL,	py2, 	0, mask, gs_trim_out_mat,
						px2LSL,	py3,	0, s3, gs_trim_out_mat,
						px1LSL,	py4, 	0, s4, gs_trim_out_mat
					gosub "TextCoord_Vert"

					if	not(bDrawLeftSLSill) then
						! --- Draw Left Sidelight lower side Jamb Extension ---
						cprism_{2} gs_trim_out_mat, gs_trim_out_mat, gs_trim_out_mat,
							4, thk,
							 px2LSL,	py3,	0, 15, gs_trim_out_mat,
							 px1LSL,	py4,	0, 15, gs_trim_out_mat,
							 px1LSLW,	py4,	0, 15, gs_trim_out_mat,
							 px2LSLW,	py3,	0, mask - 2 * gs_stack_left, gs_trim_out_mat
					gosub "TextCoord_Hor"
					endif
				endif

				! --- Draw Right Side Jamb extension ---
				if	isWindow | \
					(bPShapedRightOpening & gs_trim_below_sillRight) then
					py4 = -overSizeBottomRight + not(gs_stack_bottom) * widoThresDepth + tolerOffsetLowerOut
					py3 = py4 + not(gs_stack_bottom | not(bCasingBottomOutside) | bDrawRightSLSill) * gs_trim_width_out
				else
					py3 = -overSizeBottomRight + bDrawSill * widoThresDepth
					py4 = -overSizeBottomRight + bDrawSill * widoThresDepth
				endif


				px1 = rightWidth - (widoRightJamb + tolerOffsetRightOut) * not(gs_sectgar) - bCasingTolerance * gs_tolerance_right * gs_sectgar
				px2 = px1 - gs_trim_width_out * not(gs_stack_right)

				if	bShapeEnablesStraightTopTrim then
					py1 = B + (overSizeTop - not(gs_stack_top) * widoHeadDepth - tolerOffsetUpperOut) * not(gs_sectgar) - bCasingTolerance * gs_tolerance_upper * gs_sectgar
					py2 = py1 - not(gs_stack_top) * gs_trim_width_out

					s1 = 8 + 2 * not(gs_stack_top)		! 15 or 8
					s2 = bitset (mask, 1, not(gs_stack_top))
				endif
				if	bShapeEnablesArchedTopTrim then
					ta = rightWidth - not(bHalfCircle) * widoHeadDepth
					tc = arcR - not(bHalfCircle) * widoHeadDepth
					py1 = B - arcR + sqr(max(0, (tc * tc - ta * ta)))

					ta = ta - gs_trim_width_out
					tc = tc - gs_trim_width_out
					py2 = B - arcR + sqr(max(0, (tc * tc - ta * ta)))

					s1 = 8
					s2 = mask - 2
				endif

				if	bPShapedRightOpening then
					py3 = py3 + gs_sidelight_parapet_hgt_right + gs_reveal_bottom_sR - gs_reveal_bottom
					py4 = py4 + gs_sidelight_parapet_hgt_right + gs_reveal_bottom_sR - gs_reveal_bottom
				endif

				if bShapeEnablesStraightRightTrim & not(gs_stack_right | bRightCornerFunction) then
					cprism_{2} gs_trim_out_mat, gs_trim_out_mat, gs_trim_out_mat,
						4, thk,
						 px1,	py1,	0, s1, gs_trim_out_mat,
						 px2,	py2,	0, s2, gs_trim_out_mat,
						 px2,	py3,	0, s3, gs_trim_out_mat,
						 px1,	py4, 	0, s4, gs_trim_out_mat
					gosub "TextCoord_Vert"
				endif
				if	bPShapedRightOpening & gs_trim_below_sillRight then
					! --- Draw Door's Right side Jamb Extension ---
					px1RSL = rightRevealPnts[idxSillStartRevealRight][1] - gs_sidelight_WHole_width_right
					px2RSL = px1RSL - gs_trim_width_out
					px1RSLW = rightRevealPnts[idxSillStartRevealRight][1] - tolerOffsetRightIn
					px2RSLW = rightRevealPnts[idxSillStartRevealRight][1] - tolerOffsetRightIn - gs_trim_width_out * not(gs_stack_right)

					py1 = widoThresDepth
					py2 = widoThresDepth

					cprism_{2} gs_trim_out_mat, gs_trim_out_mat, gs_trim_out_mat,
						4, thk,
						px1RSL,	py1, 	0, 15, gs_trim_out_mat,
						px2RSL,	py2, 	0, mask, gs_trim_out_mat,
						px2RSL,	py3,	0, s3, gs_trim_out_mat,
						px1RSL,	py4, 	0, s4, gs_trim_out_mat
					gosub "TextCoord_Vert"

					if	not(bDrawRightSLSill) then
						! --- Draw Right Sidelight lower side Jamb Extension ---
						cprism_{2} gs_trim_out_mat, gs_trim_out_mat, gs_trim_out_mat,
							4, thk,
							 px2RSL,	py3,	0, 15, gs_trim_out_mat,
							 px1RSL,	py4,	0, 15, gs_trim_out_mat,
							 px1RSLW,	py4,	0, 15, gs_trim_out_mat,
							 px2RSLW,	py3,	0, mask - 2 * gs_stack_right, gs_trim_out_mat
						gosub "TextCoord_Hor"
					endif
				endif
				! --- Draw Bottom Jamb extension ---
				if bLeftCornerFunction then
					px1 = -leftWidth - overSizeLeft + widoLeftJamb + tolerOffsetLeftOut - 1.0
				else
					px1 = -leftWidth + (widoLeftJamb + tolerOffsetLeftOut) * not(gs_sectgar) + bCasingTolerance * gs_tolerance_left * gs_sectgar
				endif
				if bRightCornerFunction then
					px2 = rightWidth + overSizeRight - widoRightJamb - tolerOffsetRightOut + 1.0
				else
					px2 = rightWidth - (widoRightJamb + tolerOffsetRightOut) * not(gs_sectgar) - bCasingTolerance * gs_tolerance_right * gs_sectgar
				endif

				if bShapeEnablesStraightBottomTrim & not(gs_stack_bottom | not(bCasingBottomOutside) | not(isWindow)) & not(bDrawSill) then
					py1 = -overSizeBottom + widoThresDepth + tolerOffsetLowerOut
					py2 = py1 + gs_trim_width_out

					cprism_{2} gs_trim_out_mat, gs_trim_out_mat, gs_trim_out_mat,
						4, thk,
						px1,																	py1,	0, 8 + 2 * not(gs_stack_left), gs_trim_out_mat,
						px1 + not(gs_stack_left  | bLeftCornerFunction)  * gs_trim_width_out,	py2,	0, bitset(bitset (mask, 1, not(gs_stack_left)), 0, (bShowEdgesAtFrame & (not(bRightCornerFunction) | not(bFitModeRight)))), gs_trim_out_mat,
						px2 - not(gs_stack_right | bRightCornerFunction) * gs_trim_width_out,	py2,	0, 8 + 2 * not(gs_stack_right), gs_trim_out_mat,
						px2,																	py1,	0, 13 + 2 * not(gs_stack_right), gs_trim_out_mat
					gosub "TextCoord_Hor"
				endif
				! --- Draw Top Jamb extension ---
				if	(bShapeEnablesStraightTopTrim) & \
					not(gs_stack_top) then

					py1 = B + (overSizeTop - widoHeadDepth - tolerOffsetUpperOut) * not(gs_sectgar) - bCasingTolerance * gs_tolerance_upper * gs_sectgar
					py2 = py1 - gs_trim_width_out

					cprism_{2} gs_trim_out_mat, gs_trim_out_mat, gs_trim_out_mat,
						4, thk,
						px1,																	py1,	0, 8 + 2 * not(gs_stack_left), gs_trim_out_mat,
						px1 + not(gs_stack_left  | bLeftCornerFunction)  * gs_trim_width_out,	py2,	0, bitset(bitset (mask, 1, not(gs_stack_left)), 0, (bShowEdgesAtFrame & (not(bRightCornerFunction) | not(bFitModeRight)))), gs_trim_out_mat,
						px2 - not(gs_stack_right | bRightCornerFunction) * gs_trim_width_out,	py2,	0, 8 + 2 * not(gs_stack_right), gs_trim_out_mat,
						px2,																	py1,	0, 13 + 2 * not(gs_stack_right), gs_trim_out_mat
				endif
				if	bShapeEnablesArchedTopTrim then

					resol nArchResolution

					px1L = leftWidth - widoRightJamb
					px2L = px1L - gs_trim_width_out

					px1R = leftWidth - widoRightJamb
					px2R = px1R - gs_trim_width_out

					if bHalfCircle then
						addy B - archHeight

						cprism_{2} gs_trim_out_mat, gs_trim_out_mat, gs_trim_out_mat,
							9, thk,
							-px1L,	0,			0,    8 + 7 * gs_stack_left, gs_trim_out_mat,
							-px2L,	0,			0,   62 + mask, gs_trim_out_mat,
							 0,		0,			0,  900, gs_trim_out_mat,
							 0,		archHeight - gs_trim_width_out,	0, 3062 + mask, gs_trim_out_mat,
							 px2R,	0,			0, 3008 + 7 * gs_stack_right, gs_trim_out_mat,
							 px1R,	-EPS,		0,    8 + 7 * gs_stack_right, gs_trim_out_mat,
							 px1R,	0,			0,   79, gs_trim_out_mat,
							 0,		archHeight, 0, 3079, gs_trim_out_mat,
							-px1L,	0,			0, 1015, gs_trim_out_mat

						! --- Draw missing lines ---
						if gs_stack_left then lin_ -px2L,0,0, -px2L,0,thk
					else
						addy B - archHeight

						ta = leftWidth - widoHeadDepth
						tc = arcR - widoHeadDepth
						py1L = sqr(max(0, (tc * tc - ta * ta))) - arcR + archHeight

						ta = ta - gs_trim_width_out
						tc = tc - gs_trim_width_out
						py2L = sqr(max(0, (tc * tc - ta * ta))) - arcR + archHeight

						ta = rightWidth - widoHeadDepth
						tc = arcR - widoHeadDepth
						py1R = sqr(max(0, (tc * tc - ta * ta))) - arcR + archHeight

						ta = ta - gs_trim_width_out
						tc = tc - gs_trim_width_out
						py2R = sqr(max(0, (tc * tc - ta * ta))) - arcR + archHeight

						cprism_{2} gs_trim_out_mat, gs_trim_out_mat, gs_trim_out_mat,
							8, thk,
							 0,		archHeight - arcR, 0, 900, gs_trim_out_mat,
							-px1L,	py1L, 	0,  8 + 7 * gs_stack_left, gs_trim_out_mat,
							-px2L,	py2L,	0,  62 + mask, gs_trim_out_mat,
							 0,		archHeight - widoHeadDepth - gs_trim_width_out,	0, 3062 + mask, gs_trim_out_mat,
							 px2R,	py2R,	0,3010 + 5 * gs_stack_right, gs_trim_out_mat,
							 px1R,	py1R,	0,  79, gs_trim_out_mat,
							 0,		archHeight - widoHeadDepth,	0, 3079, gs_trim_out_mat,
							-px1L,	py1L, 	0,3015, gs_trim_out_mat

						lin_ -px2L,py2L,0, -px2L,py2L,thk
					endif

					del 1
				endif

				if iWindowShape = SHAPE_ELLIPSEARCH then
					resol nArchResolution

					px1 = -leftWidth + widoRightJamb + tolerOffsetLeftOut
					px2 = px1 + not(gs_stack_left) * gs_trim_width_Out
					px4 = rightWidth - widoRightJamb - tolerOffsetRightOut
					px3 = px4 - not(gs_stack_right) * gs_trim_width_out

					pxcL = -leftWidth + smallRadiusEllips
					pxcR = rightWidth - smallRadiusEllips

					py1 = B + overSizeTopOut - tolerOffsetUpperOut

					s3 = 9 + 4 * (abs(gs_trim_offs_out) > EPS | not(gs_trim_show_cover_out) | abs(gs_trim_thk_out) < EPS) - 2 * gs_stack_right

					cprism_{2} gs_trim_out_mat, gs_trim_out_mat, gs_trim_out_mat,
						13,thk,
						px4,	py1 - archHeight,			0, 13,		gs_trim_out_mat,
						pxcR,	py1 - archHeight,			0, 913,		gs_trim_out_mat,
						0,		alphaSide,					0, 4013,	gs_trim_out_mat,
						0,		py1 - middleRadiusEllips, 	0, 913,		gs_trim_out_mat,
						0,		alphaMiddle,				0, 4013,	gs_trim_out_mat,
						pxcL,	py1 - archHeight,			0, 913,		gs_trim_out_mat,
						0,		alphaSide,					0, 4008,	gs_trim_out_mat,
						px2,	py1 - archHeight,			0, s3,		gs_trim_out_mat,
						0,		-alphaSide,					0, 4000+s3,	gs_trim_out_mat,
						0,		py1 - middleRadiusEllips, 	0, 900+s3,	gs_trim_out_mat,
						0,		-alphaMiddle,				0, 4000+s3,	gs_trim_out_mat,
						pxcR,	py1 - archHeight,			0, 900+s3,	gs_trim_out_mat,
						0,		-alphaSide,					0, 4000+s3,	gs_trim_out_mat
				endif
				gosub "TextCoord_Hor"
			endif

			del 2
		endif

		mask = 11 + 4 * (gs_trim_offs_out > EPS | not(bShowJambExtension) | abs(WIDO_SILL) < EPS | not(gs_trim_show_cover_out) | abs(gs_trim_thk_out) < EPS)

		if gs_trim_thk_out > EPS & gs_trim_show_cover_out & (gs_trimtype_out_int <> CASING_COMPLEX) then

			material gs_trim_out_mat
			pen gs_frame_pen
			sect_fill gs_trim_fill_out, gs_trim_pen_bg_out, gs_trim_pen_fg_out, gs_trim_pen_cont_out

			! ===== Outside Trim - Straight Walls - Casing =====

			maskTop		= 8 + 2 * not(gs_stack_top)
			maskBottom	= 8 + 2 * not(gs_stack_bottom)
			maskLeft	= 8 + 2 * not(gs_stack_left)
			maskRight	= 8 + 2 * not(gs_stack_right)

			maskLeft2	= bDrawSill*(not(bTrimovbotleftout)*(15-7*gs_stack_left)+bTrimovbotleftout*(10-2*gs_stack_left))
			maskRight2	= bDrawSill*(not(bTrimovbotrightout)*(15-7*gs_stack_right)+bTrimovbotrightout*(10-2*gs_stack_right))

			addz -gs_trim_thk_out
			! --- Stacked Window or Window with Sill or Corner Window ---

			if	isWindow | \
				bTShapedOpening then
				py = -overSizeBottomLeft + not(gs_stack_bottom) * widoThresDepth + gs_trim_offs_out_bottom * bCasingBottomOutside

				s3 = maskBottom						! 15 or 10 or 8
				s4 = 13 + 2 * not(gs_stack_bottom)	! 15 or 13
			else
				py	= -overSizeBottomLeft + bDrawSill * widoThresDepth
				py3 = -overSizeBottomLeft + bDrawSill * widoThresDepth
				py4 = -overSizeBottomLeft + bDrawSill * widoThresDepth

				s3 = 15
				s4 = 15
			endif

			! --- Draw left side Trim ---
			py3l = py
			py4l = py

			px2 = -leftWidth + gs_trim_width_out - gs_trim_offs_out + widoLeftJamb + tolerOffsetLeftOut
			px1 = px2 - gs_tw_left_out

			if gs_stack_bottom then
				py3l = -overSizeBottom
				py4l = py3l
				py5 = py3l
				py6 = py3l
			else
				if not(bCasingBottomOutside) then
					py3l = py
					py4l = py3l
					py5 = py3l
					py6 = py3l
				else
					if	isWindow | \
						(bPShapedLeftOpening & gs_trim_below_sillLeft) then
						py3l = py \
								+ gs_trim_width_out * not(bDrawLeftSLSill) \
								- gs_trim_offs_out * not(gs_trim_atframe_out) * not(bDrawLeftSLSill) \
								- gs_tw_bottom_out * bTrimovbotleftout \
								- gs_trimov_bot_left_out

						if not(gs_trim_atframe_out) then
							py4l = py \
									+ gs_trim_width_out * not(bDrawLeftSLSill) \
									- gs_trim_offs_out * not(gs_trim_atframe_out) * not(bDrawLeftSLSill) \
									- gs_tw_bottom_out * (not(bDrawLeftSLSill) | (bDrawLeftSLSill & (bTrimovbotleftout | gs_trim_below_sillLeft))) \
									- gs_trimov_bot_left_out

						else
							py4l = py3l - (gs_trimov_bot_left_out + gs_tw_bottom_out * (bTrimovbotleftout=0) * gs_trimb_atframe_out * not(bDrawLeftSLSill))
						endif
					endif

					py5 = py3l + (gs_trimov_bot_left_out + gs_tw_bottom_out) * bTrimovbotleftout
					py6 = py3l + gs_trimov_bot_left_out * bTrimovbotleftout
				endif
			endif

			if	bPShapedLeftOpening then
				py3l = py3l + gs_sidelight_parapet_hgt_left + gs_reveal_bottom_sL - gs_reveal_bottom
				py4l = py4l + gs_sidelight_parapet_hgt_left + gs_reveal_bottom_sL - gs_reveal_bottom
				py5 = py5 + gs_sidelight_parapet_hgt_left + gs_reveal_bottom_sL - gs_reveal_bottom
				py6 = py6 + gs_sidelight_parapet_hgt_left + gs_reveal_bottom_sL - gs_reveal_bottom
			endif

			if	bShapeEnablesStraightTopTrim then
				py1 = B + overSizeTop + not(gs_stack_top) * (-widoHeadDepth - tolerOffsetUpperOut - gs_trim_width_out + gs_trim_offs_out + gs_trim_offs_out_top + gs_tw_top_out*not(bTrimovtopleftout))
				py2 = B + overSizeTop + not(gs_stack_top) * (-widoHeadDepth - tolerOffsetUpperOut - gs_trim_width_out + gs_trim_offs_out + gs_trim_offs_out_top)

				if	isWindow | \
					(bPShapedLeftOpening & gs_trim_below_sillLeft) then
					s6 = maskBottom*not(bTrimovbotleftout)+(15-2*not(gs_tw_bottom_out))*bTrimovbotleftout
					if gs_stack_bottom then
						s3 = 8
					else
						if not(bCasingBottomOutside) then
							s3 = 15
						else
							s3 = (maskBottom+5*(not(gs_tw_bottom_out) | gs_trim_atframe_out))*not(bTrimovbotleftout)+bTrimovbotleftout*15-5*gs_trim_atframe_out*not(bDrawLeftSLSill)*not(gs_stack_bottom)\
							+5*not(bTrimovbotleftout)*(WIDO_SILL>0) * (gs_trim_atframe_out) * not(gs_trimb_atframe_out)
						endif
					endif
				else
					s6 = 15
					s3 = 15
				endif

				s1 = maskTop				! 15 or 10 or 8
				s2 = bitset (mask, 1, not(gs_stack_top)) + 4 * gs_trim_atframe_out * (WIDO_SILL>0)
				s5 = 8
			endif
			if	bShapeEnablesArchedTopTrim then
				ta = leftWidth - gs_trim_width_out + gs_trim_offs_out + gs_tw_right_out - not(bHalfCircle) * widoHeadDepth - tolerOffsetUpperOut * not(bHalfCircle)
				tc = arcR - gs_trim_width_out + gs_trim_offs_out + gs_tw_right_out - not(bHalfCircle) * widoHeadDepth - tolerOffsetUpperOut * not(bHalfCircle)
				py1 = B - arcR + sqr(max(0, tc * tc - ta * ta))

				ta = ta - gs_tw_right_out
				tc = tc - gs_tw_right_out
				py2 = B - arcR + sqr(max(0, tc * tc - ta * ta))

				if	isWindow | \
					(bPShapedLeftOpening & gs_trim_below_sillLeft) then
					s6 = maskBottom*not(bTrimovbotleftout)+(15-2*not(gs_tw_bottom_out))*bTrimovbotleftout
					if gs_stack_bottom then
						s3 = 8
					else
						if not(bCasingBottomOutside) then
							s3 = 15
						else
							s3 = (maskBottom+5*(not(gs_tw_bottom_out) | gs_trim_atframe_out))*not(bTrimovbotleftout)+bTrimovbotleftout*(15-7*gs_stack_bottom)-5*gs_trim_atframe_out*not(bDrawLeftSLSill)*not(gs_stack_bottom)\
							+5*not(bTrimovbotleftout)*(WIDO_SILL>0) * (gs_trim_atframe_out) * not(gs_trimb_atframe_out)
						endif
					endif
				else
					s6 = 15
					s3 = 15
				endif

				s1 = 8
				s2 = mask - 2 + 4 * gs_trim_atframe_out * (WIDO_SILL>0)
				s5 = 8
			endif

			if iWindowShape = SHAPE_ELLIPSEARCH then
				py1 = B + overSizeTopOut - archHeight
				py2 = B + overSizeTopOut - archHeight

				s1 = 8
				s2 = mask - 2
				s5 = 9 + 4 * gs_trim_atframe_out
			endif

			pxWCutTopLeftOut	= px1
			pxWCutTopOHLeftOut	= px1
			pxWCutMidLeftOut	= px1
			pxWCutMidOHLeftOut	= px2
			pxWCutBotLeftOut	= px1
			pyWCutTopLeftOut	= py1
			pyWCutTopOHOut		= py1
			pyWCutMidLeftOut	= py4l

			if bShapeEnablesStraightLeftTrim & not(gs_stack_left | bLeftCornerFunction) then
				body -1
				if bDrawBottTrimatGangingOut then
					py6 = py6 + tolerOffsStackCasLowerOut + trim_offs_out_modify - gs_trim_offs_out
					py5 = py2
					s5 = 13
				endif
				if bDrawTopTrimatGangingOut then
					py5 = py2 - tolerOffsStackCasUpperOut - trim_offs_out_modify + gs_trim_offs_out
					s2 = 10
					s5 = 13
				endif
				cprism_{2} gs_trim_out_mat, gs_trim_out_mat, gs_trim_out_mat,
					6, gs_trim_thk_out,
					px1,	py1,	0, s1, gs_trim_out_mat,
					px2,	py2,	0, s2, gs_trim_out_mat,
					px2,	py5,	0, s5, gs_trim_out_mat,
					px2,	py6,	0, s6, gs_trim_out_mat,
					px2,	py3l,	0, s3, gs_trim_out_mat,
					px1,	py4l,	0, s4, gs_trim_out_mat
				gosub "TextCoord_Vert"
			endif

			! --- Draw Door's Left side Trim ---
			py1 = widoThresDepth
			py2 = widoThresDepth
			py3l = py4l + gs_trimov_bot_left_out
			py4l = py3l + gs_tw_bottom_out

			if	bPShapedLeftOpening & gs_trim_below_sillLeft then
				px1 = leftRevealPnts[idxSillStartRevealLeft][1] + gs_sidelight_WHole_width_left  + gs_trim_width_out - gs_trim_offs_out
				px2 = px1 - gs_tw_left_out

				cprism_{2} gs_trim_out_mat, gs_trim_out_mat, gs_trim_out_mat,
					4, gs_trim_thk_out,
					px1,	py1,	0, 15, gs_trim_out_mat,
					px2,	py2,	0, s4, gs_trim_out_mat,
					px2,	py3l,	0, s5, gs_trim_out_mat,
					px1,	py4l,	0, s2, gs_trim_out_mat
				gosub "TextCoord_Vert"

				pxWCutBotLeftOut = px2
			endif

			pyWCutBotLeftOut = py1


			! --- Draw right side Trim ---

			if	isWindow | \
				bPShapedRightOpening then
				py = -overSizeBottomRight + not(gs_stack_bottom) * widoThresDepth + gs_trim_offs_out_bottom * bCasingBottomOutside
			else
				py	= -overSizeBottomRight + bDrawSill * widoThresDepth
				py3 = -overSizeBottomRight + bDrawSill * widoThresDepth
				py4 = -overSizeBottomRight + bDrawSill * widoThresDepth
			endif
			py3r = py
			py4r = py

			px2 = rightWidth - gs_trim_width_out + gs_trim_offs_out - widoRightJamb - tolerOffsetRightOut
			px1 = px2 + gs_tw_right_out

			if gs_stack_bottom then
				py3r = -overSizeBottom
				py4r = py3r
				py5 = py3r
				py6 = py3r
			else
				if not(bCasingBottomOutside) then
					py3l = py
					py4l = py3l
					py5 = py3l
					py6 = py3l
				else
					if	isWindow | \
						(bPShapedRightOpening & gs_trim_below_sillRight) then
						py3r = py \
								+ gs_trim_width_out * not(bDrawRightSLSill) \
								- gs_trim_offs_out * not(gs_trim_atframe_out) * not(bDrawRightSLSill) \
								- gs_tw_bottom_out * bTrimovbotrightout \
!!!									- 1 * (iSillType > 1 & bDrawBoard) \
								- gs_trimov_bot_right_out
						if not(gs_trim_atframe_out) then
							py4r = py \
									+ gs_trim_width_out * not(bDrawRightSLSill) \
									- gs_trim_offs_out * not(gs_trim_atframe_out) * not(bDrawRightSLSill) \
									- gs_tw_bottom_out*(not(bDrawRightSLSill) | (bDrawRightSLSill & (bTrimovbotrightout | gs_trim_below_sillRight))) \
!!!										- 1 * (iSillType > 1 & bDrawBoard) \
									- gs_trimov_bot_right_out
						else
							py4r = py3r - (gs_trimov_bot_left_out + gs_tw_bottom_out * (bTrimovbotleftout=0) * gs_trimb_atframe_out * not(bDrawRightSLSill))
						endif
					endif

					py5 = py3r + (gs_trimov_bot_right_out + gs_tw_bottom_out) * bTrimovbotrightout
					py6 = py3r + gs_trimov_bot_right_out * bTrimovbotrightout
				endif
			endif

			if	bPShapedRightOpening then
				py3r = py3r + gs_sidelight_parapet_hgt_right + gs_reveal_bottom_sR - gs_reveal_bottom
				py4r = py4r + gs_sidelight_parapet_hgt_right + gs_reveal_bottom_sR - gs_reveal_bottom
				py5 = py5 + gs_sidelight_parapet_hgt_right + gs_reveal_bottom_sR - gs_reveal_bottom
				py6 = py6 + gs_sidelight_parapet_hgt_right + gs_reveal_bottom_sR - gs_reveal_bottom
			endif

			if	bShapeEnablesStraightTopTrim then
				py1 = B + overSizeTop + not(gs_stack_top) * (-widoHeadDepth - tolerOffsetUpperOut - gs_trim_width_out + gs_trim_offs_out + gs_trim_offs_out_top + gs_tw_top_out*not(bTrimovtoprightout))
				py2 = B + overSizeTop + not(gs_stack_top) * (-widoHeadDepth - tolerOffsetUpperOut - gs_trim_width_out + gs_trim_offs_out + gs_trim_offs_out_top)

				if	isWindow | \
					(bPShapedRightOpening & gs_trim_below_sillRight) then
					s6 = maskBottom*not(bTrimovbotrightout)+(15-2*not(gs_tw_bottom_out))*bTrimovbotrightout
					if gs_stack_bottom = 1 then
						s3 = 8
					else
						if not(bCasingBottomOutside) then
							s3 = 15
						else
							s3 = (maskBottom+5*(not(gs_tw_bottom_out) | gs_trim_atframe_out))*not(bTrimovbotrightout)+bTrimovbotrightout*(15-7*gs_stack_bottom)-5*gs_trim_atframe_out*not(bDrawRightSLSill)*not(gs_stack_bottom)\
							+5*not(bTrimovbotleftout)*(WIDO_SILL>0) * (gs_trim_atframe_out) * not(gs_trimb_atframe_out)
						endif
					endif
				else
					s6 = 15
					s3 = 15
				endif

				s1 = maskTop				! 15 or 10 or 8
				s2 = bitset (mask, 1, not(gs_stack_top)) + 4 * gs_trim_atframe_out * (WIDO_SILL>0)
				s5 = 8
			endif
			if	bShapeEnablesArchedTopTrim then
				ta = rightWidth - gs_trim_width_out + gs_trim_offs_out + gs_tw_right_out - not(bHalfCircle) * widoHeadDepth - tolerOffsetUpperOut * not(bHalfCircle)
				tc = arcR - gs_trim_width_out + gs_trim_offs_out + gs_tw_right_out - not(bHalfCircle) * widoHeadDepth - tolerOffsetUpperOut * not(bHalfCircle)
				py1 = B - arcR + sqr(max(0, tc * tc - ta * ta))

				ta = ta - gs_tw_right_out
				tc = tc - gs_tw_right_out
				py2 = B - arcR + sqr(max(0, tc * tc - ta * ta))

				if	isWindow | \
					(bPShapedRightOpening & gs_trim_below_sillRight) then
					s6 = maskBottom*not(bTrimovbotrightout)+(15-2*not(gs_tw_bottom_out))*bTrimovbotrightout
					if gs_stack_bottom = 1 then
						s3 = 8
					else
						if not(bCasingBottomOutside) then
							s3 = 15
						else
							s3 = (maskBottom+5*(not(gs_tw_bottom_out) | gs_trim_atframe_out))*not(bTrimovbotrightout)+bTrimovbotrightout*(15-7*gs_stack_bottom)-5*gs_trim_atframe_out*not(bDrawRightSLSill)*not(gs_stack_bottom)\
							+5*not(bTrimovbotleftout)*(WIDO_SILL>0) * gs_trim_atframe_out * not(gs_trimb_atframe_out)
						endif
					endif
				else
					s6 = 15
					s3 = 15
				endif

				s1 = 8
				s2 = mask - 2 + 4 * gs_trim_atframe_out * (WIDO_SILL>0)
				s5 = 8
			endif

			if iWindowShape = SHAPE_ELLIPSEARCH then
				py1 = B + overSizeTopOut - archHeight
				py2 = B + overSizeTopOut - archHeight

				s1 = 8
				s2 = mask - 2
				s5 = 9 + 4 * gs_trim_atframe_out
			endif

			pxWCutTopRightOut	= px1
			pxWCutBotRightOut	= px1
			pxWCutMidRightOut	= px1
			pxWCutMidOHRightOut	= px2
			pyWCutTopRightOut 	= py1
			pyWCutMidRightOut	= py4r

			if bShapeEnablesStraightRightTrim & not(gs_stack_right | bRightCornerFunction) then
				body -1
				if bDrawBottTrimatGangingOut then
					py6 = py6 + tolerOffsStackCasLowerOut + trim_offs_out_modify - gs_trim_offs_out
					py5 = py2
					s5 = 13
				endif
				if bDrawTopTrimatGangingOut then
					py5 = py2 - tolerOffsStackCasUpperOut - trim_offs_out_modify + gs_trim_offs_out
					s2 = 10
					s5 = 13
				endif

				cprism_{2} gs_trim_out_mat, gs_trim_out_mat, gs_trim_out_mat,
					4+2, gs_trim_thk_out,
					px1,	py1,	0, s1, gs_trim_out_mat,
					px2,	py2,	0, s2, gs_trim_out_mat,
					px2,	py5,	0, s5, gs_trim_out_mat,
					px2,	py6,	0, s6, gs_trim_out_mat,
					px2,	py3r,	0, s3, gs_trim_out_mat,
					px1,	py4r,	0, s4, gs_trim_out_mat
				gosub "TextCoord_Vert"
			endif

			! --- Draw Door's Right side Trim ---
			py1 = widoThresDepth
			py2 = widoThresDepth
			py3r = py4r + gs_trimov_bot_right_out
			py4r = py3r + gs_tw_bottom_out

			if	bPShapedRightOpening & gs_trim_below_sillRight then
				px1 = rightRevealPnts[idxSillStartRevealRight][1] - gs_sidelight_WHole_width_right  - gs_trim_width_out + gs_trim_offs_out
				px2 = px1 + gs_tw_right_out

				cprism_{2} gs_trim_out_mat, gs_trim_out_mat, gs_trim_out_mat,
					4, gs_trim_thk_out,
					px1,	py1,	0, 15, gs_trim_out_mat,
					px2,	py2,	0, s4, gs_trim_out_mat,
					px2,	py3r,	0, s5, gs_trim_out_mat,
					px1,	py4r,	0, s2, gs_trim_out_mat
				gosub "TextCoord_Vert"

				pxWCutBotRightOut = px2
			endif

			pyWCutBotRightOut = py1

			if bPShapedLeftOpening & gs_trim_below_sillLeft then
				! --- Draw Left lower Trim in Straight Wall ---
				px = -leftWidth - overSizeLeft + widoLeftJamb + tolerOffsetLeftOut
				px1 = px + not(gs_stack_left) * (gs_trim_width_out - gs_trim_offs_out - gs_tw_left_out*not(bTrimovbotleftout))
				px2 = px + not(gs_stack_left) * (gs_trim_width_out - gs_trim_offs_out)
				px3 = leftRevealPnts[idxSillStartRevealLeft][1] + gs_sidelight_WHole_width_left  + gs_trim_width_out - gs_trim_offs_out
				px4 = px3 - gs_tw_left_out * gs_trim_below_sillLeft

				if not(bDrawLeftSLSill) | gs_trim_below_sillLeft then
					cprism_{2} gs_trim_out_mat, gs_trim_out_mat, gs_trim_out_mat,
						4, gs_trim_thk_out,
						px1,	py3l,	0, 10, gs_trim_out_mat,
						px2,	py4l,	0, mask - 2 * gs_stack_left, gs_trim_out_mat,
						px3,	py4l,	0, 10 + 5 * not(gs_trim_below_sillLeft), gs_trim_out_mat,
						px4,	py3l,	0, 15, gs_trim_out_mat
					gosub "TextCoord_Hor"
				endif
			endif

			if bPShapedRightOpening & gs_trim_below_sillRight then
				! --- Draw Right lower Trim in Straight Wall ---
				px = rightWidth - overSizeRight - widoRightJamb - tolerOffsetRightOut
				px1 = px - not(gs_stack_right) * (gs_trim_width_out - gs_trim_offs_out - gs_tw_right_out*not(bTrimovbotrightout))
				px2 = px - not(gs_stack_right) * (gs_trim_width_out - gs_trim_offs_out)
				px3 = rightRevealPnts[idxSillStartRevealRight][1] - gs_sidelight_WHole_width_right  - gs_trim_width_out + gs_trim_offs_out
				px4 = px3 + gs_tw_right_out * gs_trim_below_sillRight

				if not(bDrawRightSLSill) | gs_trim_below_sillRight then
					cprism_{2} gs_trim_out_mat, gs_trim_out_mat, gs_trim_out_mat,
						4, gs_trim_thk_out,
						px1,	py3r,	0, 10, gs_trim_out_mat,
						px2,	py4r,	0, mask - 2 * gs_stack_right, gs_trim_out_mat,
						px3,	py4r,	0, 10 + 5 * not(gs_trim_below_sillRight), gs_trim_out_mat,
						px4,	py3r,	0, 15, gs_trim_out_mat
					gosub "TextCoord_Hor"
				endif
			endif

			if bShapeEnablesStraightBottomTrim & not(gs_stack_bottom | not(bCasingBottomOutside) | not(isWindow)) & abs(gs_tw_bottom_out) > EPS \
			& (not(curvedWall) | (curvedWall & gs_trimb_atframe_out)) then
				! --- Draw lower Trim ---

				px = -leftWidth - overSizeLeft + widoLeftJamb + tolerOffsetLeftOut
				px1 = px + not(gs_stack_left) * (gs_trim_width_out - gs_trim_offs_out - gs_tw_left_out*not(bTrimovbotleftout))
				px2 = px + not(gs_stack_left) * (gs_trim_width_out - gs_trim_offs_out)
				px = rightWidth + overSizeRight - widoRightJamb - tolerOffsetRightOut
				px3 = px + not(gs_stack_right) * (-gs_trim_width_out + gs_trim_offs_out)
				px4 = px + not(gs_stack_right) * (-gs_trim_width_out + gs_trim_offs_out + gs_tw_right_out*not(bTrimovbotrightout))

				if not(bParalellInCurvedWalls) then		! not USA type
					py = -overSizeBottom + widoThresDepth + gs_trim_offs_out_bottom !!+ BrickSillTrimOffs

					py1 = py + not(gs_stack_bottom) * (gs_trim_width_out*not(bDrawSill) - gs_trim_offs_out * not(gs_trim_atframe_out) * not(bDrawSill) - gs_tw_bottom_out)
					py2 = py1 + gs_tw_bottom_out * ((bDrawSill & not(bCasingBottomOutside)) | (gs_trim_atframe_out & not(gs_trimb_atframe_out) & (WIDO_SILL>0)))
					py3 = py + not(gs_stack_bottom) * (gs_trim_width_out*not(bDrawSill) - gs_trim_offs_out * not(gs_trim_atframe_out) * not(bDrawSill))
				else
					py = -overSizeBottom + widoThresDepth + gs_trim_offs_out_bottom !!+ BrickSillTrimOffs

					if bDrawSill then
						py1 = py + not(gs_stack_bottom) * (-gs_trim_offs_out_bottom * not(gs_trim_atframe_out) - gs_tw_bottom_out)
						py3 = py + not(gs_stack_bottom) * (-gs_trim_offs_out_bottom * not(gs_trim_atframe_out))
					else
						py1 = py + not(gs_stack_bottom) * (gs_trim_width_out - gs_trim_offs_out * not(gs_trim_atframe_out) - gs_tw_bottom_out)
						py3 = py + not(gs_stack_bottom) * (gs_trim_width_out - gs_trim_offs_out * not(gs_trim_atframe_out))
					endif
					py2 = py1 + gs_tw_bottom_out * (bDrawSill | (gs_trim_atframe_out & not(gs_trimb_atframe_out) & (WIDO_SILL>0)))
				endif
				py4 = py3
				py5 = py2
				py6 = py1

				s1 = not(gs_trim_atframe_out) * (maskLeft*not(bDrawSill)+maskLeft2*bDrawSill) + gs_trim_atframe_out * (8 + 7 * not(gs_stack_left))
				s2 = not(gs_trim_atframe_out) * maskLeft + gs_trim_atframe_out * (15 - 5 * not(bDrawSill) * gs_trimb_atframe_out)
				s3 = not(gs_trim_atframe_out) * bitset (mask, 1, not(gs_stack_left)) + gs_trim_atframe_out * 13
				s4 = not(gs_trim_atframe_out) * maskRight + gs_trim_atframe_out * (13 - 5 * not(bDrawSill) * gs_trimb_atframe_out)
				s5 = not(gs_trim_atframe_out) * (maskRight*not(bDrawSill)+maskRight2*bDrawSill) + gs_trim_atframe_out * (8 + 7 * not(gs_stack_right))
				s6 = 13 + 2 * not(gs_stack_right)

				addz -WIDO_SILL * gs_trim_atframe_out * not(gs_trimb_atframe_out)

				if gs_fsill then
					add 0, 0, gs_trim_thk_out
					cutplane 270 - gs_sill_angle
					del 1
				endif

				if bDrawLeftTrimatGangingOut then
					px2 = leftRevealPnts[2][1] + tolerOffsStackCasLeftOut + trim_offs_out_modify - gs_trim_offs_out
					py2 = py3
				endif
				if bDrawRightTrimatGangingOut then
					px3 = rightRevealPnts[2][1] - tolerOffsStackCasRightOut - trim_offs_out_modify + gs_trim_offs_out
					py5 = py4
				endif

				cprism_{2} gs_trim_out_mat, gs_trim_out_mat, gs_trim_out_mat,
					4+2, gs_trim_thk_out,
					px1,	py1,	0, s1, gs_trim_out_mat,
					px1,	py2, 	0, s2, gs_trim_out_mat,
					px2,	py3,	0, s3, gs_trim_out_mat,
					px3,	py4,	0, s4, gs_trim_out_mat,
					px4,	py5, 	0, s5, gs_trim_out_mat,
					px4,	py6, 	0, s6, gs_trim_out_mat
				gosub "TextCoord_Hor"

				if gs_fsill then cutend

				del 1
			endif


			if bShapeEnablesStraightTopTrim & not(gs_stack_top) & abs(gs_tw_top_out) > EPS then
				! --- Draw upper Trim ---

				px = -leftWidth - overSizeLeft + widoLeftJamb + tolerOffsetLeftOut
				px1 = px + not(gs_stack_left) * (gs_trim_width_out - gs_trim_offs_out - gs_tw_left_out)
				px2 = px + not(gs_stack_left) * (gs_trim_width_out - gs_trim_offs_out)
				px = rightWidth + overSizeRight - widoRightJamb - tolerOffsetRightOut
				px3 = px + not(gs_stack_right) * (-gs_trim_width_out + gs_trim_offs_out)
				px4 = px + not(gs_stack_right) * (-gs_trim_width_out + gs_trim_offs_out + gs_tw_right_out)

				py2 = B + overSizeTop - tolerOffsetUpperOut - gs_trim_width_out + gs_trim_offs_out - widoHeadDepth + gs_trim_offs_out_top
				py1 = py2 + gs_tw_top_out

				pyWCutTopOHOut = py1

				if bDrawLeftTrimatGangingOut then
					px2 = leftRevealPnts[2][1] + tolerOffsStackCasLeftOut + trim_offs_out_modify - gs_trim_offs_out
				endif
				if bDrawRightTrimatGangingOut then
					px3 = rightRevealPnts[2][1] - tolerOffsStackCasRightOut - trim_offs_out_modify + gs_trim_offs_out
				endif

				if not(bTrimovtopleftout | bDrawLeftTrimatGangingOut) & not(bTrimovtoprightout | bDrawRightTrimatGangingOut) then
					cprism_{2} gs_trim_out_mat, gs_trim_out_mat, gs_trim_out_mat,
						4, gs_trim_thk_out,
						px1,	py1,	0, maskLeft, gs_trim_out_mat,
						px2,	py2,	0, 13 + 2 * not(gs_stack_left), gs_trim_out_mat,
						px3,	py2,	0, maskRight, gs_trim_out_mat,
						px4,	py1, 	0, 13 + 2 * not(gs_stack_right), gs_trim_out_mat
				endif
				if (bTrimovtopleftout | bDrawLeftTrimatGangingOut) & not(bTrimovtoprightout | bDrawRightTrimatGangingOut) then
					cprism_{2} gs_trim_out_mat, gs_trim_out_mat, gs_trim_out_mat,
						6, gs_trim_thk_out,
						px1-gs_trimov_top_left_out*not(gs_stack_left),	py1,	0, 8 + 7 * not(gs_stack_left), gs_trim_out_mat,
						px1-gs_trimov_top_left_out*not(gs_stack_left),	py2,	0, 15, gs_trim_out_mat,
						px1,	py2,	0, maskLeft, gs_trim_out_mat,
						px2,	py2,	0, 13, gs_trim_out_mat, !bitset (mask, 1, not(gs_stack_left)), gs_trim_out_mat,
						px3,	py2,	0, maskRight, gs_trim_out_mat,
						px4,	py1, 	0, 13 + 2 * not(gs_stack_right), gs_trim_out_mat
				endif
				if not(bTrimovtopleftout | bDrawLeftTrimatGangingOut) & (bTrimovtoprightout | bDrawRightTrimatGangingOut) then
					cprism_{2} gs_trim_out_mat, gs_trim_out_mat, gs_trim_out_mat,
						6, gs_trim_thk_out,
						px1,	py1,	0, maskLeft, gs_trim_out_mat,
						px2,	py2,	0, 13, gs_trim_out_mat, !bitset (mask, 1, not(gs_stack_left)), gs_trim_out_mat,
						px3,	py2,	0, maskRight, gs_trim_out_mat,
						px4,	py2, 	0, 15, gs_trim_out_mat,
						px4+gs_trimov_top_right_out*not(gs_stack_right),	py2, 	0, 8 + 7 * not(gs_stack_right), gs_trim_out_mat,
						px4+gs_trimov_top_right_out*not(gs_stack_right),	py1, 	0, 15, gs_trim_out_mat
				endif
				if (bTrimovtopleftout | bDrawLeftTrimatGangingOut) & (bTrimovtoprightout | bDrawRightTrimatGangingOut) then
					if gs_trimtype_out_int = CASING_NORMAL then				! Rectangular casing type
						cprism_{2} gs_trim_out_mat, gs_trim_out_mat, gs_trim_out_mat,
							8, gs_trim_thk_out,
							px1-gs_trimov_top_left_out*not(gs_stack_left),	py1,	0, 8 + 7 * not(gs_stack_left), gs_trim_out_mat,
							px1-gs_trimov_top_left_out*not(gs_stack_left),	py2,	0, 15, gs_trim_out_mat,
							px1,	py2,	0, maskLeft, gs_trim_out_mat,
							px2,	py2,	0, 13, gs_trim_out_mat, !bitset (mask, 1, not(gs_stack_left)), gs_trim_out_mat,
							px3,	py2,	0, maskRight, gs_trim_out_mat,
							px4,	py2, 	0, 15, gs_trim_out_mat,
							px4+gs_trimov_top_right_out*not(gs_stack_right),	py2, 	0, 8 + 7 * not(gs_stack_right), gs_trim_out_mat,
							px4+gs_trimov_top_right_out*not(gs_stack_right),	py1, 	0, 15, gs_trim_out_mat
					endif
					if gs_trimtype_out_int = CASING_OVERHANG then				! SWE traditional casing type
						cprism_{2} gs_trim_out_mat, gs_trim_out_mat, gs_trim_out_mat,
							10, gs_trim_thk_out,
							px1-gs_trimov_top_left_out*not(gs_stack_left),	py1,		0, 8 + 7 * not(gs_stack_left), gs_trim_out_mat,
							px1-gs_trimov_top_left_out*not(gs_stack_left),	py1-0.04,	0, 8 + 7 * not(gs_stack_left), gs_trim_out_mat,
							px1-gs_trimov_top_left_out*not(gs_stack_left)/2,py2,		0, 15, gs_trim_out_mat,
							px1,	py2,	0, maskLeft, gs_trim_out_mat,
							px2,	py2,	0, bitset (mask, 1, not(gs_stack_left)), gs_trim_out_mat,
							px3,	py2,	0, maskRight, gs_trim_out_mat,
							px4,	py2, 	0, 15, gs_trim_out_mat,
							px4+gs_trimov_top_right_out*not(gs_stack_right)/2,	py2, 		0, 8 + 7 * not(gs_stack_right), gs_trim_out_mat,
							px4+gs_trimov_top_right_out*not(gs_stack_right),	py1-0.04, 	0, 8 + 7 * not(gs_stack_right), gs_trim_out_mat,
							px4+gs_trimov_top_right_out*not(gs_stack_right),	py1, 		0, 15, gs_trim_out_mat
					endif
				endif
			endif



			if	bShapeEnablesArchedTopTrim then

				resol nArchResolution

				px1 = -leftWidth + tolerOffsetLeftOut + gs_trim_width_out - gs_trim_offs_out + widoRightJamb
				px2 = rightWidth - tolerOffsetRightOut - gs_trim_width_out + gs_trim_offs_out - widoRightJamb



				if bHalfCircle then
					addy B - archHeight - tolerOffsetUpperIn

					cprism_{2} gs_trim_out_mat, gs_trim_out_mat, gs_trim_out_mat,
						11, gs_trim_thk_out,
						px1,					0, 	 0,   8 + 7 * gs_stack_left, gs_trim_out_mat,
						px1 - gs_tw_right_out,	-EPS,0,   8 + 7 * gs_stack_left, gs_trim_out_mat,
						px1 - gs_tw_right_out,	0,	 0,  79, gs_trim_out_mat,
						0,						0,	 0, 900, gs_trim_out_mat,
						0,						archHeight - gs_tw_right_out,	0, 3079, gs_trim_out_mat,
						px2 + gs_tw_right_out,	0,	0, 3079, gs_trim_out_mat,
						px2 + gs_tw_right_out,	-EPS,  0, 8 + 7 * gs_stack_right, gs_trim_out_mat,
						px2,					0,	 0, 64 + mask - 2 + 4 * gs_trim_atframe_out * (WIDO_SILL>0), gs_trim_out_mat,
						0,						archHeight, 	0, 3064 + mask - 2 + 4 * gs_trim_atframe_out * (WIDO_SILL>0), gs_trim_out_mat,
						px1,					0, 	0, 3013 + 2 * gs_stack_left, gs_trim_out_mat,
						px1,					0, 	 0,   -1, gs_trim_out_mat

					! --- Draw missing lines ---
					if gs_stack_left  then lin_ px1 - gs_tw_right_out,0,0, px1 - gs_tw_right_out,0,gs_trim_thk_out
					if gs_stack_right then lin_ px2,0,0, px2,0,gs_trim_thk_out
				else
					addy B - archHeight

					ta = leftWidth - gs_trim_width_out + gs_trim_offs_out + gs_tw_right_out - widoHeadDepth - tolerOffsetUpperOut
					tc = arcR - gs_trim_width_out + gs_trim_offs_out + gs_tw_right_out - widoHeadDepth - tolerOffsetUpperOut
					py1L = sqr(max(0, tc * tc - ta * ta)) - arcR + archHeight

					ta = ta - gs_tw_right_out
					tc = tc - gs_tw_right_out
					py2L = sqr(max(0, tc * tc - ta * ta)) - arcR + archHeight

					ta = rightWidth - gs_trim_width_out + gs_trim_offs_out + gs_tw_right_out - widoHeadDepth - tolerOffsetUpperOut
					tc = arcR - gs_trim_width_out + gs_trim_offs_out + gs_tw_right_out - widoHeadDepth - tolerOffsetUpperOut
					py1R = sqr(max(0, tc * tc - ta * ta)) - arcR + archHeight

					ta = ta - gs_tw_right_out
					tc = tc - gs_tw_right_out
					py2R = sqr(max(0, tc * tc - ta * ta)) - arcR + archHeight

					if arcR - (A / 2 / archHeight) * widoHeadDepth < archHeight + EPS then
						cprism_{2} gs_trim_out_mat, gs_trim_out_mat, gs_trim_out_mat,
							8, gs_trim_thk_out,
							px1,					py2L, 		0,    8 + 7 * gs_stack_left, gs_trim_out_mat,
							px1 - gs_tw_right_out,	py1L,		0,   79, gs_trim_out_mat,
							0,						0,			0,  900, gs_trim_out_mat,
							0,						archHeight - gs_tw_right_out,	 0, 3079, gs_trim_out_mat,
							px2 + gs_tw_right_out,	py1R,		0, 3010 + 5 * gs_stack_right, gs_trim_out_mat,
							px2,					py2R,		0,   62 + mask, gs_trim_out_mat,
							0,						archHeight,	0, 3062 + mask, gs_trim_out_mat,
							px1,					py2L,		0, 3015, gs_trim_out_mat
					else
						cprism_{2} gs_trim_out_mat, gs_trim_out_mat, gs_trim_out_mat,
							8, gs_trim_thk_out,
							0,						archHeight - arcR, 0, 900, gs_trim_out_mat,
							px1,					py2L,	0,    8 + 7 * gs_stack_left, gs_trim_out_mat,
							px1 - gs_tw_right_out,	py1L,	0,   79, gs_trim_out_mat,
							0,						archHeight - widoHeadDepth - tolerOffsetUpperOut + gs_trim_offs_out - gs_trim_width_out + gs_tw_right_out,	0, 3079, gs_trim_out_mat,
							px2 + gs_tw_right_out,	py1R,	0, 3010 + 5 * gs_stack_right, gs_trim_out_mat,
							px2,					py2R,	0,   62 + mask, gs_trim_out_mat,
							0,						archHeight - widoHeadDepth - tolerOffsetUpperOut + gs_trim_offs_out - gs_trim_width_out, 	0, 3062 + mask, gs_trim_out_mat,
							px1,					py2L, 	0, 3015, gs_trim_out_mat
					endif

					lin_ px2,py2R,0,
						 px2,py2R,gs_trim_thk_out
					lin_ px1 - gs_tw_right_out,py1L,0,
						 px1 - gs_tw_right_out,py1L,gs_trim_thk_out
				endif

				del 1
			endif

			if iWindowShape = SHAPE_ELLIPSEARCH then

				resol nArchResolution

				px1 = -leftWidth + widoRightJamb + tolerOffsetLeftOut - gs_trim_offs_out + gs_trim_width_out
				px2 =  rightWidth - widoRightJamb - tolerOffsetRightOut + gs_trim_offs_out - gs_trim_width_out
				px3 = -leftWidth + widoRightJamb + tolerOffsetLeftOut
				px4 = rightWidth - widoRightJamb - tolerOffsetRightOut

				pxcL = -leftWidth + smallRadiusEllips
				pxcR = rightWidth - smallRadiusEllips

				py1 = B + overSizeTopOut - tolerOffsetUpperOut

				s1 = 9 + 4 * (abs(gs_trim_offs_out) > EPS | not(gs_trim_show_cover_out) | abs(gs_trim_thk_out) < EPS)

				cprism_{2} gs_trim_out_mat, gs_trim_out_mat, gs_trim_out_mat,
					13,gs_trim_thk_out,
					px2,					py1 - archHeight,			0, s1,		gs_trim_out_mat,
					pxcR,					py1 - archHeight,			0, 900+s1,	gs_trim_out_mat,
					0,		 				alphaSide,					0, 4000+s1,	gs_trim_out_mat,
					0,						py1 - middleRadiusEllips, 	0, 900+s1,	gs_trim_out_mat,
					0,		 				alphaMiddle,				0, 4000+s1,	gs_trim_out_mat,
					pxcL,					py1 - archHeight,			0, 900+s1,	gs_trim_out_mat,
					0,		 				alphaSide,					0, 4008,	gs_trim_out_mat,
					px1 - gs_tw_right_out,	py1 - archHeight,			0, 13+64,	gs_trim_out_mat,
					0,		 				-alphaSide,					0, 4015+64,	gs_trim_out_mat,
					0,						py1 - middleRadiusEllips, 	0, 915+64,	gs_trim_out_mat,
					0,		 				-alphaMiddle,				0, 4015+64,	gs_trim_out_mat,
					pxcR,					py1 - archHeight,			0, 908+64,	gs_trim_out_mat,
					0,		 				-alphaSide,					0, 4008+64,	gs_trim_out_mat
			endif
			gosub "TextCoord_Hor"

			del 1


			if bCutWall then
				pen WALL_VIEW_PEN
				material matWallOut

				if	bShapeEnablesArchedTopTrim | \
					iWindowShape = SHAPE_ELLIPSEARCH then

					if iWindowShape = SHAPE_ELLIPSEARCH then
						put	pxWCutTopRightOut, pyWCutTopRightOut, 79,
							pxcR,				pyWCutTopRightOut,			979,
							0,		 			alphaSide,					4079,
							0,					py1 - middleRadiusEllips, 	979,
							0,		 			alphaMiddle,				4079,
							pxcL,				py1 - archHeight,			979,
							0,		 			alphaSide,					4079
					else
						if bHalfCircle then
							put	pxWCutTopRightOut, pyWCutTopRightOut, 79,
								0, B - tolerOffsetUpperIn - archHeight, 900,
								pxWCutTopLeftOut, pyWCutTopLeftOut, 3079
						else
							put pxWCutTopRightOut, pyWCutTopRightOut-EPS, 31,
								pxWCutTopRightOut, pyWCutTopRightOut, 79,
								0, B - tolerOffsetUpperIn - arcR, 900,
								pxWCutTopLeftOut, pyWCutTopLeftOut, 3031,
								pxWCutTopLeftOut, pyWCutTopLeftOut-EPS, 31
						endif
					endif
				else
					put pxWCutTopRightOut, pyWCutTopRightOut, 31
					if gs_trimtype_out_int = CASING_OVERHANG then
						put	pxWCutTopRightOut	+ gs_trimov_top_right_out/2, pyWCutTopRightOut, 31,
							pxWCutTopRightOut	+ gs_trimov_top_right_out,	pyWCutTopOHOut - 0.04, 31,
							pxWCutTopRightOut	+ gs_trimov_top_right_out,	pyWCutTopOHOut, 31,
							pxWCutTopLeftOut	- gs_trimov_top_left_out,	pyWCutTopOHOut, 31,
							pxWCutTopLeftOut	- gs_trimov_top_left_out,	pyWCutTopOHOut - 0.04, 31,
							pxWCutTopLeftOut	- gs_trimov_top_left_out/2, pyWCutTopRightOut, 31
					endif
					put	pxWCutTopLeftOut,	pyWCutTopLeftOut,	31
				endif

				put	pxWCutMidLeftOut, pyWCutMidLeftOut, 31

				if gs_trimtype_out_int = CASING_OVERHANG then
					put	pxWCutMidOHLeftOut, pyWCutMidLeftOut, 31,
						pxWCutMidOHLeftOut, pyWCutMidLeftOut + gs_trimov_bot_left_out, 31
				endif
				if not(isWindow) & bPShapedLeftOpening then
					put	pxWCutBotLeftOut, pyWCutMidLeftOut + gs_trimov_bot_left_out, 31,
						pxWCutBotLeftOut, pyWCutBotLeftOut, 31
				endif
				if not(isWindow) & bPShapedRightOpening then
					put	pxWCutBotRightOut, pyWCutBotRightOut, 31,
						pxWCutBotRightOut, pyWCutMidRightOut + gs_trimov_bot_right_out, 31
				endif
				if gs_trimtype_out_int = CASING_OVERHANG then
					put	pxWCutMidOHRightOut, pyWCutMidRightOut + gs_trimov_bot_right_out, 31,
						pxWCutMidOHRightOut, pyWCutMidRightOut, 31
				endif

				put	pxWCutMidRightOut, pyWCutMidRightOut, 31

!				prism_ nsp/3,-1,
!					use(nsp)

				wallniche nsp/3,1,16,
					0,0,1,0,
					get(nsp)

				pen gs_frame_pen
				material gs_trim_out_mat
			endif
		endif

		del 3
	else
		! ======================================
		! Outside Trim - Curved Walls
		! ======================================

		resol WALL_RESOL

		offsArc = iHolePosSign * AC_Hole_Position_Angle / 180 * PI * rSill

		if gs_IsCurved then
			thk = WIDO_SILL
		else
			thk = WALL_THICKNESS * 2
			rotx -180
			cutplane 180
			del 1
			numCutsFrame = 1
		endif

		if wallIsLeft then
			mask = 11 + 4 * (gs_trim_offs_out > EPS | not(bShowJambExtension) | not(gs_trim_show_cover_out))
		else
			mask = 14 + (gs_trim_offs_out > EPS | not(bShowJambExtension) | not(gs_trim_show_cover_out))
		endif

		if gs_trim_width_out > EPS & thk > EPS & bShowJambExtension then

			matTrim = gs_trim_out_mat

			material gs_trim_out_mat
			sect_fill gs_trim_fill_out, gs_trim_pen_bg_out, gs_trim_pen_fg_out, gs_trim_pen_cont_out

			! ===== Outside Trim - Curved Walls - Jamb Extensions =====

			rotx -180
			addz -WOD
			bCondition = WIDO_REVEAL_SIDE exor SYMB_MIRRORED
			roty (not(bCondition) - bCondition) * abs(AC_Hole_Position_Angle) + not(wallIsLeft) * 180
			addz rSill

			if	isWindow then
				py4 = -overSizeBottom + not(gs_stack_bottom) * (widoThresDepth * not(bTShapedOpening) + gs_trim_width_out * bParalellInCurvedWalls)
				py3 = py4 + not(gs_stack_bottom | not(bCasingBottomOutside) | bDrawLeftSLSill) * gs_trim_width_out * not(bParalellInCurvedWalls)
				py3l = py3
				py4l = py4
				py3r = py3
				py4r = py4

				s3 = 8 + 2 * not(gs_stack_bottom)	! 15 or 8
				s4 = 13 + 2 * not(gs_stack_bottom)	! 15 or 13
			else
				if	(bPShapedLeftOpening & gs_trim_below_sillLeft) then
					py4l = -overSizeBottomLeft + gs_trim_width_out * bParalellInCurvedWalls
					py3l = py4l + not(bDrawLeftSLSill) * gs_trim_width_out * not(bParalellInCurvedWalls)
				else
					py3l = -overSizeBottomLeft + bDrawLeftSLSill * widoThresDepth
					py4l = -overSizeBottomLeft + bDrawLeftSLSill * widoThresDepth
				endif
				if	(bPShapedRightOpening & gs_trim_below_sillRight) then
					py4r = -overSizeBottomRight + gs_trim_width_out * bParalellInCurvedWalls
					py3r = py4r + not(bDrawRightSLSill) * gs_trim_width_out * not(bParalellInCurvedWalls)
				else
					py3r = -overSizeBottomRight + bDrawRightSLSill * widoThresDepth
					py4r = -overSizeBottomRight + bDrawRightSLSill * widoThresDepth
				endif

				s3 = 15
				s4 = 15
			endif

			! --- Draw Left side Jamb Extension ---
			if bParalellInCurvedWalls then
				addz -rSill
				roty -(not(bCondition) - bCondition) * abs(AC_Hole_Position_Angle) - not(wallIsLeft) * 180

				cutpolya 4, 1, 0,
					-leftWidth + widoLeftJamb,  -overSizeBottom + widoThresDepth,  0,
					-leftWidth * 3,  -overSizeBottom + widoThresDepth,  0,
					-leftWidth * 3, B + overSizeTop - widoHeadDepth, 0,
					-leftWidth + widoLeftJamb,  B + overSizeTop - widoHeadDepth,  5

				cutpolya 4, 1, 0,
					-leftWidth + widoLeftJamb + gs_trim_width_out,  -overSizeBottom + widoThresDepth,  7,
					rightWidth,  -overSizeBottom + widoThresDepth,  7,
					rightWidth, B + overSizeTop - widoHeadDepth, 7,
					-leftWidth + widoLeftJamb + gs_trim_width_out,  B + overSizeTop - widoHeadDepth,  1
				del 2
			endif

			px1 = signWallIsLeft * (offsArc - rSill * alfaLeft * DegRad + widoLeftJamb) - leftWidth * bParalellInCurvedWalls
			px2 = px1 + signWallIsLeft * gs_trim_width_out + 2 * leftWidth * bParalellInCurvedWalls

			if	bShapeEnablesStraightTopTrim then
				py1 = B + overSizeTop - not(gs_stack_top) * widoHeadDepth
				py2 = py1 - not(gs_stack_top) * gs_trim_width_out

				s1 = 8 + 2 * not(gs_stack_top)		! 15 or 8
				s2 = bitset (mask, 1, not(gs_stack_top))
			endif
			if	bShapeEnablesArchedTopTrim then
				ta = leftWidth - tolerOffsetLeftIn
				tc = arcR
				py1 = B - arcR + sqr(max(0, (tc * tc - ta * ta)))

				ta = ta - gs_trim_width_out
				tc = tc - gs_trim_width_out
				py2 = B - arcR + sqr(max(0, (tc * tc - ta * ta)))

				s1 = 8
				s2 = mask - 2
			endif

			if iWindowShape = SHAPE_ELLIPSEARCH then
				py1 = B - archHeight - tolerOffsetUpper
				py2 = B - archHeight - tolerOffsetUpper

				s1 = 8
				s2 = mask - 2
			endif

			if	bPShapedLeftOpening then
				py3l = py3l + gs_sidelight_parapet_hgt_left + gs_reveal_bottom_sL
				py4l = py4l + gs_sidelight_parapet_hgt_left + gs_reveal_bottom_sL
			endif

			if not(gs_stack_left | bLeftCornerFunction) then
				body -1
				bprism_ matTrim, matTrim, matTrim,
					4, -signWallIsLeft * thk, rSill,
					px1,	py1,	s1,
					px2,	py2,	s2,
					px2,	py3l,	s3,
					px1,	py4l,	s4
				gosub "TextCoord_Vert"
			endif

			if bParalellInCurvedWalls then
				cutend
				cutend
			endif

			! --- Draw Right side Jamb Extension ---
			if bParalellInCurvedWalls then
				addz -rSill
				roty -(not(bCondition) - bCondition) * abs(AC_Hole_Position_Angle) - not(wallIsLeft) * 180

				cutpolya 4, 1, 0,
					rightWidth - widoRightJamb,  -overSizeBottom + widoThresDepth,  0,
					rightWidth * 3,  -overSizeBottom + widoThresDepth,  0,
					rightWidth * 3, B + overSizeTop - widoHeadDepth, 0,
					rightWidth - widoRightJamb,  B + overSizeTop - widoHeadDepth,  5

				cutpolya 4, 1, 0,
					rightWidth - widoRightJamb - gs_trim_width_out,  -overSizeBottom + widoThresDepth,  7,
					-leftWidth,  -overSizeBottom + widoThresDepth,  7,
					-leftWidth, B + overSizeTop - widoHeadDepth, 7,
					rightWidth - widoRightJamb - gs_trim_width_out,  B + overSizeTop - widoHeadDepth,  1
				del 2
			endif

			px1 = signWallIsLeft * (offsArc + rSill * alfaRight * DegRad - widoRightJamb) + rightWidth * bParalellInCurvedWalls
			px2 = px1 - signWallIsLeft * gs_trim_width_out - rightWidth * bParalellInCurvedWalls * 2

			if	bShapeEnablesStraightTopTrim then
				py1 = B + overSizeTop - not(gs_stack_top) * (widoHeadDepth + gs_trim_width_out * bParalellInCurvedWalls)
				py2 = py1 - not(gs_stack_top) * gs_trim_width_out * not(bParalellInCurvedWalls)

				s1 = 8 + 2 * not(gs_stack_top)		! 15 or 8
				s2 = bitset (mask, 1, not(gs_stack_top))
			endif
			if	bShapeEnablesArchedTopTrim then
				ta = rightWidth - tolerOffsetRightIn
				tc = arcR
				py1 = B - arcR + sqr(max(0, (tc * tc - ta * ta)))

				ta = ta - gs_trim_width_out
				tc = tc - gs_trim_width_out
				py2 = B - arcR + sqr(max(0, (tc * tc - ta * ta)))

				s1 = 8
				s2 = mask - 2
			endif
			if iWindowShape = SHAPE_ELLIPSEARCH then
				py1 = B - archHeight - tolerOffsetUpper
				py2 = B - archHeight - tolerOffsetUpper

				s1 = 8
				s2 = mask - 2
			endif

			if	bPShapedRightOpening then
				py3r = py3r + gs_sidelight_parapet_hgt_right + gs_reveal_bottom_sR
				py4r = py4r + gs_sidelight_parapet_hgt_right + gs_reveal_bottom_sR
			endif

			if not(gs_stack_right | bRightCornerFunction) then
				body -1
				bprism_ matTrim, matTrim, matTrim,
					4, -signWallIsLeft * thk, rSill,
					 px1,	py1, 	s1,
					 px2,	py2, 	s2,
					 px2,	py3r,	s3,
					 px1,	py4r, 	s4
				gosub "TextCoord_Vert"
			endif

			if bParalellInCurvedWalls then
				cutend
				cutend
			endif

			if bTShapedOpening then

				del 3

				alphaLeft = abs(asn(leftRevealPnts[idxSillEndRevealLeft][1]  / radSill)) + 10
				alphaRight = abs(asn(rightRevealPnts[idxSillEndRevealright][1] / radSill)) + 10


				alfaEnd		= alphaRight + 10
				alfaStart	= -alphaLeft - 10
				arcRadius	= radSill
				bMiddlePoints = 1
				firstStatus	= 31
				midStatus	= 10 + 5 * (gs_trim_offs_out > EPS) + 64 + 16
				lastStatus	= 31
				if abs(alfaStart - alfaEnd) > EPS then
					gosub 110

					rotx 180
					rotx -90
					muly -1


					cutDepth = MAX(py3l, py3r)
					if not(wallIsLeft) then
!						prism_ NSP/3 + 2,-cutDepth,
!							radSill * sin(alphaRight), 2*WOD, 15,
!							-radSill * sin(alphaLeft), 2*WOD, 15,
!							use(nsp)
						cutpolya NSP/3 + 2,1,0,
							radSill * sin(alphaRight), 2*WOD, 15,
							-radSill * sin(alphaLeft), 2*WOD, 15,
							get(nsp)
					else
!							prism_ NSP/3 + 2,-cutDepth,
!								 radSill * sin(alphaLeft) + 2,  -radSill * cos(alphaLeft)  + WOD - 2, 15,
!								-radSill * sin(alphaRight) - 2, -radSill * cos(alphaRight) + WOD - 2, 15,
!								use(nsp)
						cutpolya NSP/3 + 2,1,0,
							 radSill * sin(alphaLeft) + 2,  -radSill * cos(alphaLeft)  + WOD - 2, 31,
							-radSill * sin(alphaRight) - 2, -radSill * cos(alphaRight) + WOD - 2, 31,
							get(nsp)
					endif
					del 3
				endif

				if	bPShapedLeftOpening & gs_trim_below_sillLeft then
					! --- Draw Door's Left side Jamb Extension ---

					px1lP = -leftWidth + gs_reveal_left_sL + gs_sidelight_WHole_width_left ! + tolerOffsetLeftIn
					px2lP = px1lP + gs_trim_width_out
					py1 = widoThresDepth
					py2 = widoThresDepth

					body -1
					sprism_ matTrim, matTrim, matTrim,
						4, 0,0, 0,1, thk - pocketThkLeft, wallIncl,
						 px1lP,	py1,	s1,
						 px2lP,	py2,	s2,
						 px2lP,	py3l,	s3,
						 px1lP,	py4l,	s4
					gosub "TextCoord_Vert"

					if	not(bDrawLeftSLSill) then
						! --- Draw Left Sidelight lower side Jamb Extension ---

						if not(bParalellInCurvedWalls) then

							addz -WOD
							roty -alfaLeftOut * signWallIsLeft  !+ atn((widoLeftJamb)  / WOD) * signWallIsLeft
							addz rBoard * signWallIsLeft
							addy py4l
							roty 90
							rotx 180 + 45 * not(gs_stack_left)

							!rect 1,1
							cutplane

							del 6
						endif

						px1l = -leftWidth - overSizeLeftOut - 1 * not(bParalellInCurvedWalls)
						px2l = px1l + gs_trim_width_out

						sprism_ matTrim, matTrim, matTrim,
							4, 0,0, 0,1, thk - pocketThkLeft, wallIncl,
							px2lP,	py3l,	15,
							px1lP,	py4l,	15,
							px1l,	py4l,	15,
							px2l,	py3l,	mask - 2 * gs_stack_left
						gosub "TextCoord_Hor"

						if not(bParalellInCurvedWalls) then cutend

					endif
				endif

				if	bPShapedRightOpening & gs_trim_below_sillRight then
					! --- Draw Door's Right side Jamb Extension ---

					px1rP = rightWidth - gs_reveal_right_sR - gs_sidelight_WHole_width_right ! + tolerOffsetLeftIn
					px2rP = px1rP - gs_trim_width_out
					py1 = widoThresDepth
					py2 = widoThresDepth

					body -1
					sprism_ matTrim, matTrim, matTrim,
						4, 0,0, 0,1, thk - pocketThkLeft, wallIncl,
						 px1rP,	py1,	s1,
						 px2rP,	py2,	s2,
						 px2rP,	py3r,	s3,
						 px1rP,	py4r,	s4
					gosub "TextCoord_Vert"

					if	not(bDrawRightSLSill) then
						! --- Draw Right Sidelight lower side Jamb Extension ---

						if not(bParalellInCurvedWalls) then
							addz -WOD
							roty alfaRightOut * signWallIsLeft
							addz rBoard * signWallIsLeft
							addy py4r
							roty 90
							rotx 360 - 45 * not(gs_stack_right)

							!rect 1,1
							cutplane

							del 6
						endif

						px1r = rightWidth + overSizeRightOut + 1 * not(bParalellInCurvedWalls)
						px2r = px1r - gs_trim_width_out

						sprism_ matTrim, matTrim, matTrim,
							4, 0,0, 0,1, thk - pocketThkLeft, wallIncl,
							px2rP,	py3r,	15,
							px1rP,	py4r,	15,
							px1r,	py4r,	15,
							px2r,	py3r,	mask - 2 * gs_stack_right
						gosub "TextCoord_Hor"

						if not(bParalellInCurvedWalls) then cutend

					endif
				endif

				if abs(alfaStart - alfaEnd) > EPS then cutend

				addz -WOD
				roty (not(bCondition) - bCondition) * abs(AC_Hole_Position_Angle) + not(wallIsLeft) * 180
				addz rSill
			endif


			if not(bParalellInCurvedWalls) then
				px1 = signWallIsLeft * (offsArc - rSill * alfaLeft * DegRad + widoLeftJamb)
				px2 = px1 + signWallIsLeft * (not(gs_stack_left) * gs_trim_width_out)
				px4 = signWallIsLeft * (offsArc + rSill * alfaRight * DegRad - widoRightJamb)
				px3 = px4 - signWallIsLeft * (not(gs_stack_right) * gs_trim_width_out)
			else
				px1 = signWallIsLeft * (offsArc - rSill * alfaLeft * DegRad - leftWidth * not(gs_stack_left))
				px2 = px1
				px4 = signWallIsLeft * (offsArc + rSill * alfaRight * DegRad + rightWidth * not(gs_stack_right))
				px3 = px4
			endif

			if not(gs_stack_bottom | not(bCasingBottomOutside) | bDrawSill | not(isWindow)) then
				if bParalellInCurvedWalls then
					addz -rSill
					roty -(not(bCondition) - bCondition) * abs(AC_Hole_Position_Angle) - not(wallIsLeft) * 180

					if not(gs_stack_left) then
						cutpolya 4, 1, 0,
							-leftWidth + widoLeftJamb,  -overSizeBottom + widoThresDepth,  7,
							-leftWidth * 3,  -overSizeBottom + widoThresDepth,  7,
							-leftWidth * 3, B + overSizeTop - widoHeadDepth, 7,
							-leftWidth + widoLeftJamb,  B + overSizeTop - widoHeadDepth,  7
					endif

					if not(gs_stack_right) then
						cutpolya 4, 1, 0,
							rightWidth - widoRightJamb,  -overSizeBottom + widoThresDepth,  7,
							rightWidth * 3,  -overSizeBottom + widoThresDepth,  7,
							rightWidth * 3, B + overSizeTop - widoHeadDepth, 7,
							rightWidth - widoRightJamb,  B + overSizeTop - widoHeadDepth,  4
					endif
					del 2
				endif

				py1 = -overSizeBottom + widoThresDepth
				py2 = py1 + gs_trim_width_out

				bprism_ matTrim, matTrim, matTrim,
					4, -signWallIsLeft * thk, rSill,
					px1,	py1,	8 + 2 * not(gs_stack_left),			! 15 or 8
					px2,	py2,	bitset (mask, 1, not(gs_stack_left)),
					px3,	py2,	8 + 2 * not(gs_stack_right),		! 15 or 8
					px4,	py1,	13 + 2 * not(gs_stack_right)		! 15 or 13
				gosub "TextCoord_Hor"

				if bParalellInCurvedWalls then
					if not(gs_stack_left) then cutend
					if not(gs_stack_right) then cutend
				endif
			endif

			if bShapeEnablesStraightTopTrim & not(gs_stack_top) then
				! --- Draw upper Trim ---

				if bParalellInCurvedWalls then
					addz -rSill
					roty -(not(bCondition) - bCondition) * abs(AC_Hole_Position_Angle) - not(wallIsLeft) * 180

					if not(gs_stack_left) then
						cutpolya 4, 1, 0,
							-leftWidth + widoLeftJamb,  -overSizeBottom + widoThresDepth,  7,
							-leftWidth * 3,  -overSizeBottom + widoThresDepth,  7,
							-leftWidth * 3, B + overSizeTop - widoHeadDepth, 7,
							-leftWidth + widoLeftJamb,  B + overSizeTop - widoHeadDepth,  7
					endif

					if not(gs_stack_right) then
						cutpolya 4, 1, 0,
							rightWidth - widoRightJamb,  -overSizeBottom + widoThresDepth,  7,
							rightWidth * 3,  -overSizeBottom + widoThresDepth,  7,
							rightWidth * 3, B + overSizeTop - widoHeadDepth, 7,
							rightWidth - widoRightJamb,  B + overSizeTop - widoHeadDepth,  4
					endif
					del 2
				endif

				py1 = B + overSizeTop - widoHeadDepth
				py2 = py1 - gs_trim_width_out

				bprism_ matTrim, matTrim, matTrim,
					4, -signWallIsLeft * thk, rSill,
					px1,	py1,	8 + 2 * not(gs_stack_left),			! 15 or 8
					px2,	py2,	bitset (mask, 1, not(gs_stack_left)),
					px3,	py2,	8 + 2 * not(gs_stack_right),		! 15 or 8
					px4,	py1,	13 + 2 * not(gs_stack_right)		! 15 or 13

				if bParalellInCurvedWalls then
					if not(gs_stack_left) then cutend
					if not(gs_stack_right) then cutend
				endif
			endif

			if	bShapeEnablesArchedTopTrim then

				resol WALL_RESOL

				px1 = signWallIsLeft * (offsArc - rSill * alfaLeft * DegRad + widoLeftJamb)
				px2 = px1 + signWallIsLeft * gs_trim_width_out
				px4 = signWallIsLeft * (offsArc + rSill * alfaRight * DegRad - widoRightJamb)
				px3 = px4 - signWallIsLeft * gs_trim_width_out


				mulRatio = (leftWidth + rightWidth - widoLeftJamb - widoRightJamb) / abs(px1 - px4)
				addy B - archHeight
				muly mulRatio

				if bHalfCircle then
					bprism_ matTrim, matTrim, matTrim,
						8, -signWallIsLeft * thk, rSill,
						px1,	0, 	   8 + 7 * gs_stack_left,		! 15 or 8
						px2,	0,	  62 + mask,
						0,		1,	 800,
						px3,	0,	1008 + 7 * gs_stack_right,		! 1015 or 1008
						px4,	-EPS,  8 + 7 * gs_stack_right,		! 15 or 8
						px4,	0,	  79,
						0,		1,	 800,
						px1,	0, 	1015
				else

					ta = leftWidth
					tc = arcR
					py1 = sqr(max(0, (tc * tc - ta * ta))) - arcR + archHeight

					ta = ta - gs_trim_width_out
					tc = tc - gs_trim_width_out
					py2 = sqr(max(0, (tc * tc - ta * ta))) - arcR + archHeight

					bprism_ matTrim, matTrim, matTrim,
						6, -signWallIsLeft * thk, rSill,
						(px2 + px3) / 2,		(archHeight - arcR) / mulRatio, 900,
						px2,	py2, 	   8 + 7 * gs_stack_left,	! 15 or 8
						px1,	py1,	  79,
						px4,	py1,	3010 + 5 * gs_stack_right,	! 15 or 8
						px3,	py2,	  62 + mask,
						px2,	py2, 	3015
				endif

				del 2
			endif

			if iWindowShape = SHAPE_ELLIPSEARCH then

				offs = (leftWidth + overSizeLeftOut - (rSill * alfaLeft * DegRad))
				if wallIsLeft then
					s3 = 9 + 4 * (abs(gs_trim_offs_out) > EPS | not(gs_trim_show_cover_out) | abs(gs_trim_thk_out) < EPS) - 2 * gs_stack_right
				else
					s3 = 12 + 1 * (abs(gs_trim_offs_out) > EPS | not(gs_trim_show_cover_out) | abs(gs_trim_thk_out) < EPS) - 2 * gs_stack_right
				endif
				mulRatio = (archHeight / (archHeight + overSizeLeftOut - offs))

				addy B + ((archHeight * mulRatio) - archHeight)
				muly mulRatio

				bprism_ matTrim, matTrim, matTrim,
					13, -signWallIsLeft * thk, rSill,
					signWallIsLeft * offsArc + leftWidth + overSizeLeftOut - offs - widoLeftJamb,							-archHeight,			13,
					signWallIsLeft * offsArc + leftWidth - smallRadiusEllips,												-archHeight,			913,
					0,		 																								 alphaSide,			4013,
					signWallIsLeft * offsArc - (leftWidth - (rightWidth))/2,												-middleRadiusEllips, 	913,
					0,		 																								 alphaMiddle,			4013,
					signWallIsLeft * offsArc - rightWidth + smallRadiusEllips, 												-archHeight,			913,
					0,		 																								 alphaSide,			4008,
					signWallIsLeft * offsArc - rightWidth - overSizeLeftOut + widoRightJamb + offs + gs_trim_width_out,		-archHeight,			s3,
					0,		 																								-alphaSide,			4000+s3,
					signWallIsLeft * offsArc - (leftWidth - rightWidth)/2,													-middleRadiusEllips, 	900+s3,
					0,		 																								-alphaMiddle,			4000+s3,
					signWallIsLeft * offsArc + leftWidth - smallRadiusEllips,												-archHeight,			900+s3,
					0,		 																								-alphaSide,			4000+s3

				del 2
			endif
			gosub "TextCoord_Hor"

			del 4
		endif


		if numCutsFrame then
			cutend
			numCutsFrame = 0
		endif

		if not(gs_stack_left) then
			alfaLeftParallelOut = abs (asn ( (leftRevealPnts[idxSillStartRevealLeft][1] + tolerOffsetLeftOut + gs_trim_width_out) / rSill))
		else
			alfaLeftParallelOut = alfaLeft
		endif
		if not(gs_stack_right) then
			alfaRightParallelOut = abs (asn ( (rightRevealPnts[idxSillStartRevealRight][1] - tolerOffsetRightOut - gs_trim_width_out) / rSill))
		else
			alfaRightParallelOut = alfaRight
		endif

		if gs_trim_thk_out > EPS & gs_trim_show_cover_out & (gs_trimtype_out_int <> CASING_COMPLEX) then

			if iWindowShape = SHAPE_RECTANGULAR then

				if gs_stack_left then
					pxL = leftRevealPnts[idxSillEndRevealLeft][1]
				else
					pxL = leftRevealPnts[idxSillEndRevealLeft][1] + gs_trim_width_out + not(gs_stack_left) * (-gs_trim_offs_out + tolerOffsetLeftOut)
					alphaLeft = abs(asn(pxL / rSill)) + ArcLengthSillToAngle * gs_tw_left_out
					pxL = -rSill * sin(alphaLeft)
					pyL = -sqr(rSill^2 - pxL^2) - WOD
				endif
				if gs_stack_right then
					pxR = rightRevealPnts[idxSillEndRevealright][1]
				else
					pxR = rightRevealPnts[idxSillEndRevealright][1] - gs_trim_width_out - not(gs_stack_right) * (-gs_trim_offs_out + tolerOffsetRightOut)
					alphaRight = abs(asn(pxR / rSill)) + ArcLengthSillToAngle * gs_tw_right_out
					pxR = rSill * sin(alphaRight)
					pyR = -sqr(rSill^2 - pxR^2) - WOD
				endif
				if not(bParalellInCurvedWalls) then		! not USA type
					if isWindow & (not(bDrawSill) | bCasingBottomOutside) then
						if (bDrawSill) * bCasingBottomOutside & not(gs_stack_bottom) then
							pyB = sillBottomOutside - gs_tw_bottom_out
						else
							pyB = -overSizeBottom + not(gs_stack_bottom | not(bCasingBottomOutside)) * (widoThresDepth - gs_trim_offs_out + gs_trim_width_out - gs_tw_bottom_out)
						endif
					else
						pyB = (isWindow & bDrawSill) * (sillBottom + SillSideHeight)
					endif
				else
					if isWindow then
						if bDrawSill then
							pyB = -overSizeBottom + widoThresDepth + gs_trim_offs_out_bottom + not(gs_stack_bottom | not(bCasingBottomOutside)) * (-gs_trim_offs_out_bottom * not(gs_trim_atframe_out) - gs_tw_bottom_out)
						else
							pyB = -overSizeBottom + widoThresDepth + gs_trim_offs_out_bottom + not(gs_stack_bottom | not(bCasingBottomOutside)) * (gs_trim_width_out - gs_trim_offs_out * not(gs_trim_atframe_out) - gs_tw_bottom_out)
						endif
					else
						pyB = 0
					endif
				endif
				pyT = B + overSizeTop - tolerOffsetUpperOut - gs_trim_width_out + gs_trim_offs_out - widoHeadDepth + gs_trim_offs_out_top + gs_tw_top_out

				if bCutWall then
					pen WALL_VIEW_PEN
					material matWallOut

					alfaEnd		= alphaRight
					alfaStart	= -alphaLeft
					arcRadius	= radSill
					bMiddlePoints = 1
					firstStatus	= 31
					midStatus	= 95
					lastStatus	= 31
					if abs(alfaStart - alfaEnd) > EPS then
						gosub 110

						rotx -90
						muly -1
						addz -pyB

						cutDepth = pyT - pyB
						if not(wallIsLeft) then
!							prism_ NSP/3 + 1,-cutDepth,
!								0,WOD,15,
!								use(nsp)
							wallniche NSP/3 + 1,1,0,
								0,0,-cutDepth,cutDepth,
								0,WOD,31,
								get(nsp)
						else
!							prism_ NSP/3 + 2,-cutDepth,
!								 (rSill + WALL_THICKNESS) * sin(alphaLeft),  -(rSill + WALL_THICKNESS) * cos(alphaLeft)  + WOD, 15,
!								-(rSill + WALL_THICKNESS) * sin(alphaRight), -(rSill + WALL_THICKNESS) * cos(alphaRight) + WOD, 15,
!								use(nsp)
							wallniche NSP/3 + 2,1,0,
								0,0,-cutDepth,cutDepth,
								 (rSill + WALL_THICKNESS) * sin(alphaLeft),  -(rSill + WALL_THICKNESS) * cos(alphaLeft)  + WOD, 31,
								-(rSill + WALL_THICKNESS) * sin(alphaRight), -(rSill + WALL_THICKNESS) * cos(alphaRight) + WOD, 31,
								get(nsp)
						endif
						del 3
					endif

					pen gs_frame_pen
					material gs_trim_out_mat
				endif
			endif

			if gs_trimtype_out_int = CASING_NORMAL & not(gs_stack_top) & iWindowShape = SHAPE_RECTANGULAR & (bTrimovtopleftout | bTrimovtoprightout) then

				if gs_stack_left then
					pxL = leftRevealPnts[idxSillEndRevealLeft][1]
				else
					pxL = leftRevealPnts[idxSillEndRevealLeft][1] + gs_trim_width_out + not(gs_stack_left) * (-gs_trim_offs_out + tolerOffsetLeftOut)
					alphaLeft = abs(asn(pxL / rSill)) + ArcLengthSillToAngle * (gs_tw_left_out + gs_trimov_top_left_out)
					pxL = -rSill * sin(alphaLeft)
					pyL = -sqr(rSill^2 - pxL^2) - WOD
				endif
				if gs_stack_right then
					pxR = rightRevealPnts[idxSillEndRevealright][1]
				else
					pxR = rightRevealPnts[idxSillEndRevealright][1] - gs_trim_width_out - not(gs_stack_right) * (-gs_trim_offs_out + tolerOffsetRightOut)
					alphaRight = abs(asn(pxR / rSill)) + ArcLengthSillToAngle * (gs_tw_right_out + gs_trimov_top_right_out)
					pxR = rSill * sin(alphaRight)
					pyR = -sqr(rSill^2 - pxR^2) - WOD
				endif
				pyB = B + overSizeTopOut - gs_trim_width_out + gs_trim_offs_out - tolerOffsetUpperOut
				pyT = pyB + gs_tw_top_out

				if bCutWall then
					pen WALL_VIEW_PEN
					material matWallOut

					alfaEnd		= alphaRight
					alfaStart	= -alphaLeft
					arcRadius	= radSill
					bMiddlePoints = 1
					firstStatus	= 31
					midStatus	= 95
					lastStatus	= 31
					if abs(alfaStart - alfaEnd) > EPS then
						gosub 110

						rotx -90
						muly -1
						addz -pyB

						cutDepth = pyT - pyB
						if not(wallIsLeft) then
!							prism_ NSP/3 + 1,-cutDepth,
!								0,WOD,15,
!								use(nsp)
							wallniche NSP/3 + 1,1,0,
								0,0,-cutDepth,cutDepth,
								0,WOD,31,
								get(nsp)
						else
!							prism_ NSP/3 + 2,-cutDepth,
!								 (rSill + WALL_THICKNESS) * sin(alphaLeft),  -(rSill + WALL_THICKNESS) * cos(alphaLeft)  + WOD, 15,
!								-(rSill + WALL_THICKNESS) * sin(alphaRight), -(rSill + WALL_THICKNESS) * cos(alphaRight) + WOD, 15,
!								use(nsp)
							wallniche NSP/3 + 2,1,0,
								0,0,-cutDepth,cutDepth,
								 (rSill + WALL_THICKNESS) * sin(alphaLeft),  -(rSill + WALL_THICKNESS) * cos(alphaLeft)  + WOD, 31,
								-(rSill + WALL_THICKNESS) * sin(alphaRight), -(rSill + WALL_THICKNESS) * cos(alphaRight) + WOD, 31,
								get(nsp)
						endif
						del 3
					endif

					pen gs_frame_pen
					material gs_trim_out_mat
				endif
			endif

			if isWindow & not(gs_stack_left) & iWindowShape = SHAPE_RECTANGULAR & bTrimovbotleftout then

				pxL = leftRevealPnts[idxSillEndRevealLeft][1] + gs_trim_width_out + not(gs_stack_left) * (-gs_trim_offs_out + tolerOffsetLeftOut)
				alphaLeft = abs(asn(pxL / rSill)) + ArcLengthSillToAngle * gs_tw_left_out
				pxL = -rSill * sin(alphaLeft)
				pyL = -sqr(rSill^2 - pxL^2) - WOD

				pxR = leftRevealPnts[idxSillEndRevealLeft][1] + gs_trim_width_out + not(gs_stack_left) * (-gs_trim_offs_out + tolerOffsetLeftOut)
				alphaRight = abs(asn(pxR / rSill))
				pxR = -rSill * sin(alphaRight)
				pyR = -sqr(rSill^2 - pxR^2) - WOD

				pyB = -overSizeBottom + not(gs_stack_bottom | not(bCasingBottomOutside)) * widoThresDepth + gs_trim_offs_out_bottom \
						+ gs_trim_width_out * not(bDrawSill) \
						- gs_trim_offs_out * not(gs_trim_atframe_out) \
						- gs_tw_bottom_out * bTrimovbotleftout \
			!!!			- 1 * (iSillType > 1 & bDrawBoard) \
						- gs_trimov_bot_left_out
				pyT = B + overSizeTop - tolerOffsetUpperOut - gs_trim_width_out + gs_trim_offs_out - widoHeadDepth + gs_trim_offs_out_top + gs_tw_top_out

				if bCutWall then
					pen WALL_VIEW_PEN
					material matWallOut

					alfaEnd		= -alphaRight
					alfaStart	= -alphaLeft
					arcRadius	= radSill
					bMiddlePoints = 1
					firstStatus	= 31
					midStatus	= 95
					lastStatus	= 31
					if abs(alfaStart - alfaEnd) > EPS then
						gosub 110

						rotx -90
						muly -1
						addz -pyB

						cutDepth = pyT - pyB
						if not(wallIsLeft) then
!							prism_ NSP/3 + 1,-cutDepth,
!								0,WOD,15,
!								use(nsp)
							wallniche NSP/3 + 1,1,0,
								0,0,-cutDepth,cutDepth,
								0,WOD,31,
								get(nsp)
						else
!							prism_ NSP/3 + 2,-cutDepth,
!								-(rSill + WALL_THICKNESS) * sin(alphaRight), -(rSill + WALL_THICKNESS) * cos(alphaRight) + WOD, 15,
!								-(rSill + WALL_THICKNESS) * sin(alphaLeft),  -(rSill + WALL_THICKNESS) * cos(alphaLeft)  + WOD, 15,
!								use(nsp)
							wallniche NSP/3 + 2,1,0,
								0,0,-cutDepth,cutDepth,
								-(rSill + WALL_THICKNESS) * sin(alphaRight), -(rSill + WALL_THICKNESS) * cos(alphaRight) + WOD, 31,
								-(rSill + WALL_THICKNESS) * sin(alphaLeft),  -(rSill + WALL_THICKNESS) * cos(alphaLeft)  + WOD, 31,
								get(nsp)
						endif
						del 3
					endif

					pen gs_frame_pen
					material gs_trim_out_mat
				endif
			endif

			if isWindow & not(gs_stack_right) & iWindowShape = SHAPE_RECTANGULAR & bTrimovbotrightout then

				pxL = rightRevealPnts[idxSillEndRevealRight][1] - gs_trim_width_out - not(gs_stack_right) * (-gs_trim_offs_out + tolerOffsetRightOut)
				alphaLeft = abs(asn(pxL / rSill)) + ArcLengthSillToAngle * gs_tw_left_out
				pxL = -rSill * sin(alphaLeft)
				pyL = -sqr(rSill^2 - pxL^2) - WOD

				pxR = rightRevealPnts[idxSillEndRevealRight][1] - gs_trim_width_out - not(gs_stack_right) * (-gs_trim_offs_out + tolerOffsetRightOut)
				alphaRight = abs(asn(pxR / rSill))
				pxR = -rSill * sin(alphaRight)
				pyR = -sqr(rSill^2 - pxR^2) - WOD

				pyB = -overSizeBottom + not(gs_stack_bottom | not(bCasingBottomOutside)) * widoThresDepth + gs_trim_offs_out_bottom \
						+ gs_trim_width_out * not(bDrawSill) \
						- gs_trim_offs_out * not(gs_trim_atframe_out) \
						- gs_tw_bottom_out * bTrimovbotleftout \
			!!!			- 1 * (iSillType > 1 & bDrawBoard) \
						- gs_trimov_bot_left_out
				pyT = B + overSizeTop - tolerOffsetUpperOut - gs_trim_width_out + gs_trim_offs_out - widoHeadDepth + gs_trim_offs_out_top + gs_tw_top_out

				if bCutWall then
					pen WALL_VIEW_PEN
					material matWallOut

					alfaEnd		= alphaRight
					alfaStart	= alphaLeft
					arcRadius	= radSill
					bMiddlePoints = 1
					firstStatus	= 31
					midStatus	= 95
					lastStatus	= 31
					if abs(alfaStart - alfaEnd) > EPS then
						gosub 110

						rotx -90
						muly -1
						addz -pyB

						cutDepth = pyT - pyB
						if not(wallIsLeft) then
!							prism_ NSP/3 + 1,-cutDepth,
!								0,WOD,15,
!								use(nsp)
							wallniche NSP/3 + 1,1,0,
								0,0,-cutDepth,cutDepth,
								0,WOD,31,
								get(nsp)
						else
!							prism_ NSP/3 + 2,-cutDepth,
!								(rSill + WALL_THICKNESS) * sin(alphaRight), -(rSill + WALL_THICKNESS) * cos(alphaRight) + WOD, 15,
!								(rSill + WALL_THICKNESS) * sin(alphaLeft),  -(rSill + WALL_THICKNESS) * cos(alphaLeft)  + WOD, 15,
!								use(nsp)
							wallniche NSP/3 + 2,1,0,
								0,0,-cutDepth,cutDepth,
								(rSill + WALL_THICKNESS) * sin(alphaRight), -(rSill + WALL_THICKNESS) * cos(alphaRight) + WOD, 31,
								(rSill + WALL_THICKNESS) * sin(alphaLeft),  -(rSill + WALL_THICKNESS) * cos(alphaLeft)  + WOD, 31,
								get(nsp)
						endif
						del 3
					endif

					pen gs_frame_pen
					material gs_trim_out_mat
				endif
			endif

			material gs_trim_out_mat
			sect_fill gs_trim_fill_out, gs_trim_pen_bg_out, gs_trim_pen_fg_out, gs_trim_pen_cont_out

			! ===== Outside Trim - Curved Walls - Casing =====

			if wallIsLeft then
				mask = 14 + (gs_trim_offs_out > EPS)
			else
				mask = 11 + 4 * (gs_trim_offs_out > EPS)
			endif

			maskTop		= 8 + 2 * not(gs_stack_top)
			maskBottom	= 8 + 2 * not(gs_stack_bottom)
			maskLeft	= 8 + (2 + 5 * bParalellInCurvedWalls) * not(gs_stack_left)
			maskRight	= 8 + 2 * not(gs_stack_right)

			maskLeft2	= bDrawSill*(not(bTrimovbotleftout)*(15-7*gs_stack_left)+bTrimovbotleftout*(10-2*gs_stack_left))
			maskRight2	= bDrawSill*(not(bTrimovbotrightout)*(15-7*gs_stack_right)+bTrimovbotrightout*(10-2*gs_stack_right))

			rotx -180
			addz -WOD
			bCondition = WIDO_REVEAL_SIDE exor SYMB_MIRRORED
			roty (not(bCondition) - bCondition) * abs(AC_Hole_Position_Angle) + not(wallIsLeft) * 180
			addz rSill


			if bShapeEnablesStraightTopTrim & not(gs_stack_top) then
				! --- Draw upper Trim ---

				if not(bParalellInCurvedWalls) then
					px1 = signWallIsLeft * (offsArc - rSill * alfaLeft * DegRad + widoLeftJamb + not(gs_stack_left) * (gs_trim_width_out - gs_trim_offs_out - gs_tw_left_out - gs_trimov_top_left_out * bTrimovtopleftout))
					px2 = signWallIsLeft * (offsArc - rSill * alfaLeft * DegRad + widoLeftJamb + not(gs_stack_left) * (gs_trim_width_out - gs_trim_offs_out - (gs_tw_left_out + gs_trimov_top_left_out) * bTrimovtopleftout))
					px3 = signWallIsLeft * (offsArc - rSill * alfaLeft * DegRad + widoLeftJamb + not(gs_stack_left) * (gs_trim_width_out - gs_trim_offs_out - gs_tw_left_out * bTrimovtopleftout))
					px4 = signWallIsLeft * (offsArc - rSill * alfaLeft * DegRad + widoLeftJamb + not(gs_stack_left) * (gs_trim_width_out - gs_trim_offs_out))
					px5 = signWallIsLeft * (offsArc + rSill * alfaRight * DegRad - widoRightJamb + not(gs_stack_right) * (-gs_trim_width_out + gs_trim_offs_out))
					px6 = signWallIsLeft * (offsArc + rSill * alfaRight * DegRad - widoRightJamb + not(gs_stack_right) * (-gs_trim_width_out + gs_trim_offs_out + gs_tw_right_out * bTrimovtoprightout))
					px7 = signWallIsLeft * (offsArc + rSill * alfaRight * DegRad - widoRightJamb + not(gs_stack_right) * (-gs_trim_width_out + gs_trim_offs_out + (gs_tw_right_out + gs_trimov_top_right_out) * bTrimovtoprightout))
					px8 = signWallIsLeft * (offsArc + rSill * alfaRight * DegRad - widoRightJamb + not(gs_stack_right) * (-gs_trim_width_out + gs_trim_offs_out + gs_tw_right_out + gs_trimov_top_right_out * bTrimovtoprightout))

					py2 = B + overSizeTop + not(gs_stack_top) * (-widoHeadDepth - gs_trim_width_out + gs_trim_offs_out)
					py1 = py2 + gs_tw_top_out
					py3 = py2
					py4 = py2
					py5 = py2
					py6 = py2
					py7 = py2
					py8 = py1

					s1 = 8 + 7 * not(gs_stack_left) * bTrimovtopleftout
					s2 = 15
					s3 = maskLeft
					s4 = bitset (mask, 1, not(gs_stack_left))
					s5 = maskRight
					s6 = 15
					s7 = 8 + 7 * not(gs_stack_right) * bTrimovtoprightout
					s8 = 13 + 2 * not(gs_stack_right)
				else
					px1 = signWallIsLeft * (offsArc - rSill * alfaLeftParallelout * DegRad + not(gs_stack_left) * (- gs_trim_offs_out - gs_tw_left_out - gs_trimov_top_left_out * bTrimovtopleftout))
					px2 = signWallIsLeft * (offsArc - rSill * alfaLeftParallelout * DegRad + not(gs_stack_left) * (- gs_trim_offs_out - gs_tw_left_out - gs_trimov_top_left_out * bTrimovtopleftout))
					px3 = signWallIsLeft * (offsArc - rSill * alfaLeftParallelout * DegRad + not(gs_stack_left) * (- gs_trim_offs_out - gs_tw_left_out))
					px4 = signWallIsLeft * (offsArc - rSill * alfaLeftParallelout * DegRad + not(gs_stack_left) * (- gs_trim_offs_out - gs_tw_left_out))

					px5 = signWallIsLeft * (offsArc + rSill * alfaRightParallelout * DegRad + not(gs_stack_right) * (gs_trim_offs_out + gs_tw_right_out))
					px6 = signWallIsLeft * (offsArc + rSill * alfaRightParallelout * DegRad + not(gs_stack_right) * (gs_trim_offs_out + gs_tw_right_out))
					px7 = signWallIsLeft * (offsArc + rSill * alfaRightParallelout * DegRad + not(gs_stack_right) * (gs_trim_offs_out + gs_tw_right_out + gs_trimov_top_right_out * bTrimovtoprightout))
					px8 = signWallIsLeft * (offsArc + rSill * alfaRightParallelout * DegRad + not(gs_stack_right) * (gs_trim_offs_out + gs_tw_right_out + gs_trimov_top_right_out * bTrimovtoprightout))

					py2 = B + overSizeTop + not(gs_stack_top) * (-widoHeadDepth - tolerOffsetUpperOut - gs_trim_width_out + gs_trim_offs_out - EPS)
					py1 = py2 + gs_tw_top_out + EPS
					py3 = py2
					py4 = py2
					py5 = py2
					py6 = py2 + EPS
					py7 = py2 + EPS
					py8 = py1

					s1 = 8 + 7 * not(gs_stack_left)
					s2 = 15
					s3 = maskLeft
					s4 = 10	!bitset (mask, 1, not(gs_stack_left))
					s5 = maskRight
					s6 = 15
					s7 = 8 + 7 * not(gs_stack_right)
					s8 = 13 + 2 * not(gs_stack_right)
				endif

				if bParalellInCurvedWalls then
					add 0, 0, -rSill
					roty -(not(bCondition) - bCondition) * abs(AC_Hole_Position_Angle) - not(wallIsLeft) * 180

!					cutpolya 4, 1, 0,
!						-leftWidth + widoLeftJamb + gs_trim_width_out + gs_trim_offs_out,  py3 - EPS - gs_tw_bottom_out * bTrimovbotleftout,  0,
!						-leftWidth * 3,  py3 - EPS - gs_tw_bottom_out * bTrimovbotleftout, 7,
!						-leftWidth * 3, py2 + EPS, 2,
!						-leftWidth + widoLeftJamb + gs_trim_width_out + gs_trim_offs_out,  py2 + EPS,  4 * not(bTrimovbotleftout)

					cutpolya 4, 1, 0,
						-leftWidth + widoLeftJamb + gs_trim_width_out - gs_trim_offs_out,  0,  6,
						rightWidth - widoRightJamb - gs_trim_width_out - gs_trim_offs_out,  0,  7,
						rightWidth - widoRightJamb - gs_trim_width_out - gs_trim_offs_out, py2 + EPS, 4 + 2 * not(gs_stack_right),
						-leftWidth + widoLeftJamb + gs_trim_width_out - gs_trim_offs_out,  py2 + EPS,  2 * not(gs_stack_left)

					cutpolya 4, 1, 0,
						rightWidth - widoRightJamb - gs_trim_width_out - gs_trim_offs_out,  py3 - EPS - gs_tw_bottom_out * bTrimovbotrightout,  0,
						rightWidth * 3,  py3 - EPS - gs_tw_bottom_out * bTrimovbotrightout,  7,
						rightWidth * 3, py2 + EPS, 2,
						rightWidth - widoRightJamb - gs_trim_width_out - gs_trim_offs_out,  py2 + EPS,  4 * not(bTrimovbotrightout)
					del 2
				endif

				if gs_trimtype_out_int = CASING_NORMAL then				! Rectangular casing type
					bprism_ gs_trim_out_mat, gs_trim_out_mat, gs_trim_out_mat,
						8, signWallIsLeft * gs_trim_thk_out, rSill,
							px1, py1, s1,
							px2, py2, s2,
							px3, py3, s3,
							px4, py4, s4,
							px5, py5, s5,
							px6, py6, s6,
							px7, py7, s7,
							px8, py8, s8
				endif

				if gs_trimtype_out_int = CASING_OVERHANG then				! SWE traditional casing type
					bprism_ gs_trim_out_mat, gs_trim_out_mat, gs_trim_out_mat,
						10, signWallIsLeft * gs_trim_thk_out, rSill,
							px1, py1, s1,
							px1, py1-0.04, s1,
							px3 + (px1 - px3)/2, py2, s2,
							px3, py3, s3,
							px4, py4, s4,
							px5, py5, s5,
							px6, py6, s6,
							px6 + (px8 - px6)/2, py7, s7,
							px8, py8-0.04, s7,
							px8, py8, s8
				endif

				if bParalellInCurvedWalls then
!					cutend
					cutend
					cutend
				endif
			endif

			if	bShapeEnablesArchedTopTrim then

				resol WALL_RESOL


				if not(bParalellInCurvedWalls) then
					px = signWallIsLeft * (offsArc - rSill * alfaLeft * DegRad + widoLeftJamb)
					px1 = px + signWallIsLeft * (gs_trim_width_out - gs_trim_offs_out - gs_tw_left_out)
					px2 = px + signWallIsLeft * (gs_trim_width_out - gs_trim_offs_out)
					px = signWallIsLeft * (offsArc + rSill * alfaRight * DegRad - widoRightJamb)
					px3 = px + signWallIsLeft * (-gs_trim_width_out + gs_trim_offs_out)
					px4 = px + signWallIsLeft * (-gs_trim_width_out + gs_trim_offs_out + gs_tw_right_out)
				else
					px2 = signWallIsLeft * (offsArc - rSill * alfaLeftParallelOut * DegRad + gs_trim_width_out - gs_trim_offs_out)
					px1 = signWallIsLeft * (offsArc - rSill * alfaLeftParallelOut * DegRad - gs_trim_offs_out) - signWallIsLeft * gs_tw_left_out
					px3 = signWallIsLeft * (offsArc + rSill * alfaRightParallelOut * DegRad - gs_trim_width_out + gs_trim_offs_out)
					px4 = signWallIsLeft * (offsArc + rSill * alfaRightParallelOut * DegRad + gs_trim_offs_out) + signWallIsLeft * gs_tw_right_out
				endif


				mulRatio = (leftWidth + rightWidth - tolerOffsetLeftIn - tolerOffsetRightIn) / (2 * abs(signWallIsLeft * rSill * alfaLeft * DegRad))
				addy B - archHeight - tolerOffsetUpperIn
				muly mulRatio

				if bHalfCircle then
					bprism_ gs_trim_out_mat, gs_trim_out_mat, gs_trim_out_mat,
						9, signWallIsLeft * gs_trim_thk_out, rSill,
						px1,	-EPS, 	   8 + 7 * gs_stack_left,	! 15 or 8
						px1,	0, 	   8 + 7 * gs_stack_left,		! 15 or 8
						px2,	0,	  62 + mask,
						0,		1,	 800,
						px3,	0,	1008 + 7 * gs_stack_right,		! 1015 or 1008
						px4,	-EPS,  8 + 7 * gs_stack_right,		! 15 or 8
						px4,	0,	  79,
						0,		1,	 800,
						px1,	0, 	1079
				else

					ta = (leftWidth + rightWidth) / 2 - gs_trim_width_out + gs_trim_offs_out + gs_tw_right_out
					tc = arcR - gs_trim_width_out + gs_trim_offs_out + gs_tw_right_out
					py1 = sqr(max(0, (tc * tc - ta * ta))) - arcR + archHeight

					ta = ta - gs_tw_right_out
					tc = tc - gs_tw_right_out
					py2 = sqr(max(0, (tc * tc - ta * ta))) - arcR + archHeight

					bprism_ gs_trim_out_mat, gs_trim_out_mat, gs_trim_out_mat,
						6, signWallIsLeft * gs_trim_thk_out, rSill,
						(px2 + px3) / 2,		(archHeight - arcR) / mulRatio, 900,
						px2,	py2, 	   8 + 7 * gs_stack_left,	! 15 or 8
						px1,	py1,	  79,
						px4,	py1,	3010 + 5 * gs_stack_right,	! 15 or 8
						px3,	py2,	  62 + mask,
						px2,	py2, 	3015
				endif

				del 2
			endif

			if iWindowShape = SHAPE_ELLIPSEARCH then

				offs = (leftWidth + overSizeLeftOut - (rSill * alfaLeft * DegRad))
				if wallIsLeft then
					s3 = 12 + 1 * (abs(gs_trim_offs_out) > EPS | not(gs_trim_show_cover_out) | abs(gs_trim_thk_out) < EPS) - 2 * gs_stack_right
				else
					s3 = 9 + 4 * (abs(gs_trim_offs_out) > EPS | not(gs_trim_show_cover_out) | abs(gs_trim_thk_out) < EPS) - 2 * gs_stack_right
				endif
				mulRatio = (archHeight / (archHeight + overSizeLeftOut - offs))

				addy B - tolerOffsetUpper + ((archHeight * mulRatio) - archHeight)
				muly mulRatio
				offs = (leftWidth + overSizeLeftOut - (rSill * alfaLeft * DegRad + gs_trim_offs_out - gs_trim_width_out))

				bprism_ gs_trim_out_mat, gs_trim_out_mat, gs_trim_out_mat,
					13, signWallIsLeft * gs_trim_thk_out, rSill,
					signWallIsLeft * offsArc + leftWidth + overSizeLeftOut - offs - widoLeftJamb,						-archHeight,		s3,
					signWallIsLeft * offsArc + leftWidth - smallRadiusEllips,											-archHeight,		900+s3,
					0,		 																							 alphaSide,		4000+s3,
					signWallIsLeft * offsArc - (leftWidth - rightWidth)/2,												-middleRadiusEllips, 	900+s3,
					0,		 																							 alphaMiddle,		4000+s3,
					signWallIsLeft * offsArc - rightWidth + smallRadiusEllips, 											-archHeight,		900+s3,
					0,		 																							 alphaSide,		4008,
					signWallIsLeft * offsArc - rightWidth - overSizeLeftOut + widoRightJamb + offs - gs_tw_left_out,	-archHeight,		79,
					0,		 																							-alphaSide,		4079,
					signWallIsLeft * offsArc - (leftWidth - rightWidth)/2,												-middleRadiusEllips, 	979,
					0,		 																							-alphaMiddle,		4079,
					signWallIsLeft * offsArc + leftWidth - smallRadiusEllips,											-archHeight,		979,
					0,		 																							-alphaSide,		4008

				del 2
			endif
			gosub "TextCoord_Hor"


			! ===== Outside Trim - Curved Walls - Casing - Sides =====

			if	isWindow | \
				bTShapedOpening then
				py = -overSizeBottomLeft + not(gs_stack_bottom) * widoThresDepth + gs_trim_offs_out_bottom

				s3 = maskBottom						! 15 or 10 or 8
				if not(bParalellInCurvedWalls) then
					s4 = 13 + 2 * (not(gs_stack_bottom)) 	! 15 or 13
				else
					s4 = 13 + 2 * (not(gs_stack_bottom)) * bDrawSill
				endif
			else
				py	= -overSizeBottomLeft + bDrawSill * widoThresDepth
				py3 = -overSizeBottomLeft + bDrawSill * widoThresDepth
				py4 = -overSizeBottomLeft + bDrawSill * widoThresDepth

				s3 = 15
				s4 = 15
			endif
			py3l = py
			py4l = py

			! --- Draw left side Trim ---

			if not(bParalellInCurvedWalls) then
				px2 = signWallIsLeft * (offsArc - rSill * alfaLeft * DegRad + gs_trim_width_out - gs_trim_offs_out + widoLeftJamb)
				px1 = px2 - signWallIsLeft * gs_tw_left_out
			else
				px2 = signWallIsLeft * (offsArc - rSill * alfaLeftParallelOut * DegRad + gs_trim_width_out - gs_trim_offs_out)
				px1 = signWallIsLeft * (offsArc - rSill * alfaLeftParallelOut * DegRad - gs_trim_offs_out) - signWallIsLeft * gs_tw_left_out
			endif


!			if	(isWindow | \
!				(bPShapedLeftOpening & gs_trim_below_sillLeft)) & ABS(gs_trimov_bot_left_out) < EPS then
!				py3l = py + not(gs_stack_bottom | not(bCasingBottomOutside) | (bDrawLeftSLSill & not(gs_trim_below_sillLeft))) * (gs_trim_width_out - gs_trim_offs_out)
!				py4l = py + not(gs_stack_bottom | not(bCasingBottomOutside) | (bDrawLeftSLSill & not(gs_trim_below_sillLeft))) * (gs_trim_width_out - gs_trim_offs_out - gs_tw_bottom_out)
!			endif

			if gs_stack_bottom then
				py3l = -overSizeBottom
				py4l = py3l
				py5 = py3l
				py6 = py3l
			else
				if not(bCasingBottomOutside) then
					py3l = py
					py4l = py3l
					py5 = py3l
					py6 = py3l
				else
					if	isWindow | \
						(bPShapedLeftOpening & gs_trim_below_sillLeft) then
						py3l = py \
								+ gs_trim_width_out * not(bDrawLeftSLSill) \
								- gs_trim_offs_out * not(gs_trim_atframe_out) * not(bDrawLeftSLSill) \
								- gs_tw_bottom_out * bTrimovbotleftout \
								- gs_trimov_bot_left_out

						if not(gs_trim_atframe_out) then
							py4l = py \
									+ gs_trim_width_out * not(bDrawLeftSLSill) \
									- gs_trim_offs_out * not(gs_trim_atframe_out) * not(bDrawLeftSLSill) \
									- gs_tw_bottom_out * (not(bDrawLeftSLSill) | (bDrawLeftSLSill & (bTrimovbotleftout | gs_trim_below_sillLeft))) \
									- gs_trimov_bot_left_out

						else
							py4l = py3l - (gs_trimov_bot_left_out + gs_tw_bottom_out * (bTrimovbotleftout=0) * gs_trimb_atframe_out * not(bDrawLeftSLSill))
						endif
					endif

					py5 = py3l + (gs_trimov_bot_left_out + gs_tw_bottom_out) * bTrimovbotleftout
					py6 = py3l + gs_trimov_bot_left_out * bTrimovbotleftout
				endif
			endif

			if	bPShapedLeftOpening then
				py3l = py3l + gs_sidelight_parapet_hgt_left + gs_reveal_bottom_sL - gs_reveal_bottom
				py4l = py4l + gs_sidelight_parapet_hgt_left + gs_reveal_bottom_sL - gs_reveal_bottom
				py5 = py5 + gs_sidelight_parapet_hgt_left + gs_reveal_bottom_sL - gs_reveal_bottom
				py6 = py6 + gs_sidelight_parapet_hgt_left + gs_reveal_bottom_sL - gs_reveal_bottom
			endif

			if	bShapeEnablesStraightTopTrim then
				py2 = B + overSizeTop + not(gs_stack_top) * (-widoHeadDepth - tolerOffsetUpperOut - gs_trim_width_out + gs_trim_offs_out)
				if not(bParalellInCurvedWalls) then
					py1 = B + overSizeTop + not(gs_stack_top) * (-widoHeadDepth - gs_trim_width_out + gs_trim_offs_out + gs_tw_top_out*not(bTrimovtoprightout))
				else
					py1 = py2
				endif


				if	isWindow | \
					(bPShapedLeftOpening & gs_trim_below_sillLeft) then
					s6 = maskBottom*not(bTrimovbotleftout)+(15-2*not(gs_tw_bottom_out))*bTrimovbotleftout
					if not(gs_stack_bottom) & not(bCasingBottomOutside) then
						s3 = 15
					else
						s3 = (maskBottom+5*not(gs_tw_bottom_out))*not(bTrimovbotleftout)+bTrimovbotleftout*(15-7*gs_stack_bottom)
					endif
				else
					s6 = 15
					s3 = 15
				endif

				s1 = maskTop				! 15 or 10 or 8
				s2 = bitset (mask, 1, not(gs_stack_top))
				s5 = 8
			endif
			if	bShapeEnablesArchedTopTrim then
				ta = leftWidth - gs_trim_width_out + gs_trim_offs_out
				tc = arcR + tolerOffsetUpperIn - gs_trim_width_out + gs_trim_offs_out
				py2 = B - arcR - tolerOffsetUpperIn + sqr(max(0, (tc * tc - ta * ta)))


				ta = ta + gs_tw_right_out
				tc = tc + gs_tw_right_out
				py1 = B - arcR - tolerOffsetUpperIn + sqr(max(0, (tc * tc - ta * ta)))


				if	isWindow | \
					(bPShapedLeftOpening & gs_trim_below_sillLeft) then
					s6 = maskBottom*not(bTrimovbotleftout)+(15-2*not(gs_tw_bottom_out))*bTrimovbotleftout
					if not(gs_stack_bottom) & not(bCasingBottomOutside) then
						s3 = 15
					else
						s3 = (maskBottom+5*not(gs_tw_bottom_out))*not(bTrimovbotleftout)+bTrimovbotleftout*(15-7*gs_stack_bottom)
					endif
				else
					s6 = 15
					s3 = 15
				endif

				s1 = 8
				s2 = mask - 2
				s5 = 8
			endif

			if iWindowShape = SHAPE_ELLIPSEARCH then
				py1 = B - archHeight - tolerOffsetUpper
				py2 = B - archHeight - tolerOffsetUpper

				s1 = 8
				s2 = mask - 2
			endif

			if gs_stack_left then
				px1LUp = px2 - gs_trim_width_out + gs_trim_offs_out
				px2LUp = px1LUp
			else
				px1LUp = px1 * not(bTrimovbotleftout) + px2 * bTrimovbotleftout
				px2LUp = px2
			endif

			if not(gs_stack_left | bLeftCornerFunction) then
				if bParalellInCurvedWalls then
					add 0, 0, -rSill
					roty -(not(bCondition) - bCondition) * abs(AC_Hole_Position_Angle) - not(wallIsLeft) * 180

					cutpolya 6, 1, 0,
						leftRevealPnts[idxSillStartRevealLeft][1] + tolerOffsetLeftOut + gs_trim_width_out - gs_trim_offs_out,  py5,  2,
						leftRevealPnts[idxSillStartRevealLeft][1] + tolerOffsetLeftOut + gs_trim_width_out - gs_trim_offs_out,  py6,  7,
						leftRevealPnts[idxSillStartRevealLeft][1] + tolerOffsetLeftOut + gs_trim_width_out - gs_trim_offs_out,  -overSizeBottom - (gs_trimov_bot_left_out + gs_tw_bottom_out),  7,
						rightRevealPnts[idxSillStartRevealRight][1], -overSizeBottom - (gs_trimov_bot_left_out + gs_tw_bottom_out),  7,
						rightRevealPnts[idxSillStartRevealRight][1], B + overSizeTop - widoHeadDepth, 4,
						leftRevealPnts[idxSillStartRevealLeft][1] + tolerOffsetLeftOut + gs_trim_width_out - gs_trim_offs_out,  B + overSizeTop - widoHeadDepth,  1
					del 2
				endif

				body -1
				bprism_ gs_trim_out_mat, gs_trim_out_mat, gs_trim_out_mat,
					4+2, signWallIsLeft * gs_trim_thk_out, rSill,
					px1,	py1,	s1,
					px2,	py2,	s2,
					px2,	py5,	s5,
					px2,	py6,	s6,
					px2,	py3l,	s3,
					px1,	py4l,	s4
				gosub "TextCoord_Vert"

				if bParalellInCurvedWalls then
					cutend
				endif
			endif

			! --- Draw right side Trim ---

			if	isWindow | \
				bTShapedOpening then
				py = -overSizeBottomRight + not(gs_stack_bottom) * widoThresDepth + gs_trim_offs_out_bottom
			else
				py	= -overSizeBottomRight + bDrawSill * widoThresDepth
				py3 = -overSizeBottomRight + bDrawSill * widoThresDepth
				py4 = -overSizeBottomRight + bDrawSill * widoThresDepth
			endif
			py3r = py
			py4r = py

			if not(bParalellInCurvedWalls) then
				px2 = signWallIsLeft * (offsArc + rSill * alfaRight * DegRad - gs_trim_width_out + gs_trim_offs_out - widoRightJamb)
				px1 = px2 + signWallIsLeft * gs_tw_right_out
			else
				px2 = signWallIsLeft * (offsArc + rSill * alfaRightParallelOut * DegRad - gs_trim_width_out + gs_trim_offs_out)
				px1 = signWallIsLeft * (offsArc + rSill * alfaRightParallelOut * DegRad + gs_trim_offs_out) + signWallIsLeft * gs_tw_right_out
			endif

!!			if	(isWindow | \
!!				(bPShapedRightOpening & gs_trim_below_sillRight)) & ABS(gs_trimov_bot_right_out) < EPS then
!!				py3r = py + not(gs_stack_bottom | not(bCasingBottomOutside) | (bDrawRightSLSill & not(gs_trim_below_sillRight))) * (gs_trim_width_out - gs_trim_offs_out)
!!				py4r = py + not(gs_stack_bottom | not(bCasingBottomOutside) | (bDrawRightSLSill & not(gs_trim_below_sillRight))) * (gs_trim_width_out - gs_trim_offs_out - gs_tw_bottom_out)
!!			endif

			if gs_stack_bottom then
				py3r = -overSizeBottom
				py4r = py3r
				py5 = py3r
				py6 = py3r
			else
				if not(bCasingBottomOutside) then
					py3r = py
					py4r = py3r
					py5 = py3r
					py6 = py3r
				else
					if	isWindow | \
						(bPShapedRightOpening & gs_trim_below_sillRight) then
						py3r = py \
								+ gs_trim_width_out * not(bDrawRightSLSill) \
								- gs_trim_offs_out * not(gs_trim_atframe_out) * not(bDrawRightSLSill) \
								- gs_tw_bottom_out * bTrimovbotrightout \
								- gs_trimov_bot_right_out
						if not(gs_trim_atframe_out) then
							py4r = py \
									+ gs_trim_width_out * not(bDrawRightSLSill) \
									- gs_trim_offs_out * not(gs_trim_atframe_out) * not(bDrawRightSLSill) \
									- gs_tw_bottom_out*(not(bDrawRightSLSill) | (bDrawRightSLSill & (bTrimovbotrightout | gs_trim_below_sillRight))) \
									- gs_trimov_bot_right_out
						else
							py4r = py3r - (gs_trimov_bot_left_out + gs_tw_bottom_out * (bTrimovbotleftout=0) * gs_trimb_atframe_out * not(bDrawRightSLSill))
						endif
					endif

					py5 = py3r + (gs_trimov_bot_right_out + gs_tw_bottom_out) * bTrimovbotrightout
					py6 = py3r + gs_trimov_bot_right_out * bTrimovbotrightout
				endif
			endif

			if	bPShapedRightOpening then
				py3r = py3r + gs_sidelight_parapet_hgt_right + gs_reveal_bottom_sR - gs_reveal_bottom
				py4r = py4r + gs_sidelight_parapet_hgt_right + gs_reveal_bottom_sR - gs_reveal_bottom
				py5 = py5 + gs_sidelight_parapet_hgt_right + gs_reveal_bottom_sR - gs_reveal_bottom
				py6 = py6 + gs_sidelight_parapet_hgt_right + gs_reveal_bottom_sR - gs_reveal_bottom
			endif

			if	bShapeEnablesStraightTopTrim then
				py2 = B + overSizeTop + not(gs_stack_top) * (-widoHeadDepth - tolerOffsetUpperOut - gs_trim_width_out + gs_trim_offs_out)
				if not(bParalellInCurvedWalls) then
					py1 = B + overSizeTop + not(gs_stack_top) * (-widoHeadDepth - gs_trim_width_out + gs_trim_offs_out + gs_tw_top_out * not(bTrimovtoprightout))
				else
					py1 = py2
				endif

				if	isWindow | \
					(bPShapedRightOpening & gs_trim_below_sillRight) then
					s6 = maskBottom*not(bTrimovbotrightout)+(15-2*not(gs_tw_bottom_out))*bTrimovbotrightout
					if not(gs_stack_bottom) & not(bCasingBottomOutside) then
						s3 = 15
					else
						s3 = (maskBottom+5*not(gs_tw_bottom_out))*not(bTrimovbotrightout)+bTrimovbotrightout*(15-7*gs_stack_bottom)
					endif
				else
					s6 = 15
					s3 = 15
				endif

				s1 = maskTop				! 15 or 10 or 8
				s2 = bitset (mask, 1, not(gs_stack_top))
				s5 = 8
			endif
			if	bShapeEnablesArchedTopTrim then
				ta = rightWidth - gs_trim_width_out + gs_trim_offs_out + gs_tw_right_out
				tc = arcR + tolerOffsetUpperIn - gs_trim_width_out + gs_trim_offs_out + gs_tw_right_out
				py1 = B - arcR - tolerOffsetUpperIn + sqr(max(0, (tc * tc - ta * ta)))


				ta = ta - gs_tw_right_out
				tc = tc - gs_tw_right_out
				py2 = B - arcR - tolerOffsetUpperIn + sqr(max(0, (tc * tc - ta * ta)))


				if	isWindow | \
					(bPShapedRightOpening & gs_trim_below_sillRight) then
					s6 = maskBottom*not(bTrimovbotrightout)+(15-2*not(gs_tw_bottom_out))*bTrimovbotrightout
					if not(gs_stack_bottom) & not(bCasingBottomOutside) then
						s3 = 15
					else
						s3 = (maskBottom+5*not(gs_tw_bottom_out))*not(bTrimovbotrightout)+bTrimovbotrightout*(15-7*gs_stack_bottom)
					endif
				else
					s6 = 15
					s3 = 15
				endif

				s1 = 8
				s2 = mask - 2
				s5 = 8
			endif

			if iWindowShape = SHAPE_ELLIPSEARCH then
				py1 = B - archHeight - tolerOffsetUpper
				py2 = B - archHeight - tolerOffsetUpper

				s1 = 8
				s2 = mask - 2
			endif

			if gs_stack_right then
				px1RUp = px2 + gs_trim_width_out - gs_trim_offs_out
				px2RUp = px1RUp
			else
				px1RUp = px1 * not(bTrimovbotrightout) + px2 * bTrimovbotrightout
				px2RUp = px2
			endif

			if not(gs_stack_right | bRightCornerFunction) then
				if bParalellInCurvedWalls then
					add 0, 0, -rSill
					roty -(not(bCondition) - bCondition) * abs(AC_Hole_Position_Angle) - not(wallIsLeft) * 180

					cutpolya 6, 1, 0,
						rightRevealPnts[idxSillStartRevealRight][1] - tolerOffsetRightOut - gs_trim_width_out + gs_trim_offs_out,  py5,  2,
						rightRevealPnts[idxSillStartRevealRight][1] - tolerOffsetRightOut - gs_trim_width_out + gs_trim_offs_out,  py6,  7,
						rightRevealPnts[idxSillStartRevealRight][1] - tolerOffsetRightOut - gs_trim_width_out + gs_trim_offs_out,  -overSizeBottom - (gs_trimov_bot_right_out + gs_tw_bottom_out),  7,
						leftRevealPnts[idxSillStartRevealLeft][1], -overSizeBottom - (gs_trimov_bot_right_out + gs_tw_bottom_out),  7,
						leftRevealPnts[idxSillStartRevealLeft][1], B + overSizeTop - widoHeadDepth, 4,
						rightRevealPnts[idxSillStartRevealRight][1] - tolerOffsetRightOut - gs_trim_width_out + gs_trim_offs_out,  B + overSizeTop - widoHeadDepth,  1
					del 2
				endif

				body -1
				bprism_ gs_trim_out_mat, gs_trim_out_mat, gs_trim_out_mat,
					4+2, signWallIsLeft * gs_trim_thk_out, rSill,
					px1,	py1,	s1,
					px2,	py2,	s2,
					px2,	py5,	s5,
					px2,	py6,	s6,
					px2,	py3r,	s3,
					px1,	py4r,	s4
				gosub "TextCoord_Vert"

				if bParalellInCurvedWalls then
					cutend
				endif
			endif


			if	bTShapedOpening then

				py1 = widoThresDepth
				py2 = widoThresDepth

				px1l = 0
				px2l = 0
				if bPShapedLeftOpening then
					px1l = signWallIsLeft * (offsArc + rSill * alfaLeftLSL * DegRad + gs_trim_thk_out)							!gs_trim_thk_out is a safety
					px2l = px1l - signWallIsLeft * gs_trim_below_sillLeft * gs_tw_left_out - signWallIsLeft * gs_trim_thk_out	!gs_trim_thk_out is a safety

					py3l = py4l + gs_trimov_bot_left_out
					py4l = py3l + gs_tw_bottom_out
				endif
				px1r = 0
				px2r = 0
				if bPShapedRightOpening then
					px1r = signWallIsLeft * (offsArc + rSill * alfaRightRSL * DegRad - gs_trim_thk_out)							!gs_trim_thk_out is a safety
					px2r = px1r + signWallIsLeft * gs_trim_below_sillRight * gs_tw_right_out + signWallIsLeft * gs_trim_thk_out	!gs_trim_thk_out is a safety
					py3r = py4r + gs_trimov_bot_right_out
					py4r = py3r + gs_tw_bottom_out
				endif

				add 0, -gs_tw_bottom_out, -rSill
				roty -(not(bCondition) - bCondition) * abs(AC_Hole_Position_Angle) - not(wallIsLeft) * 180


!					prism_ 4,7,
!						-leftWidth + gs_reveal_left_sL + gs_sidelight_WHole_width_left + gs_trim_width_out - gs_trim_offs_out,  py1,  15,
!						rightWidth - gs_reveal_right_sR - gs_sidelight_WHole_width_right - gs_trim_width_out + gs_trim_offs_out,  py1,  (11 + 4 * (gs_trim_offs_out > EPS))*WIDO_REVEAL_SIDE + (14 + (gs_trim_offs_out > EPS))*not(WIDO_REVEAL_SIDE),
!						rightWidth - gs_reveal_right_sR - gs_sidelight_WHole_width_right - gs_trim_width_out + gs_trim_offs_out,  MAX(py4l, py4r) + gs_tw_bottom_out,  15,
!						-leftWidth + gs_reveal_left_sL + gs_sidelight_WHole_width_left + gs_trim_width_out - gs_trim_offs_out, MAX(py4l, py4r) + gs_tw_bottom_out,  (11 + 4 * (gs_trim_offs_out > EPS))*WIDO_REVEAL_SIDE + (14 + (gs_trim_offs_out > EPS))*not(WIDO_REVEAL_SIDE)

				cutpolya 4, 1, 0,
					-leftWidth + gs_reveal_left_sL + gs_sidelight_WHole_width_left + gs_trim_width_out - gs_trim_offs_out,  py1,  15,
					rightWidth - gs_reveal_right_sR - gs_sidelight_WHole_width_right - gs_trim_width_out + gs_trim_offs_out,  py1,  (11 + 4 * (gs_trim_offs_out > EPS))*WIDO_REVEAL_SIDE + (14 + (gs_trim_offs_out > EPS))*not(WIDO_REVEAL_SIDE),
					rightWidth - gs_reveal_right_sR - gs_sidelight_WHole_width_right - gs_trim_width_out + gs_trim_offs_out,  MAX(py4l, py4r) + gs_tw_bottom_out,  15,
					-leftWidth + gs_reveal_left_sL + gs_sidelight_WHole_width_left + gs_trim_width_out - gs_trim_offs_out, MAX(py4l, py4r) + gs_tw_bottom_out,  (11 + 4 * (gs_trim_offs_out > EPS))*WIDO_REVEAL_SIDE + (14 + (gs_trim_offs_out > EPS))*not(WIDO_REVEAL_SIDE)


				del 2

				if bPShapedLeftOpening & gs_trim_below_sillLeft then
					! --- Draw Door's Left side Trim  Curved Wall---
					bprism_ gs_trim_out_mat, gs_trim_out_mat, gs_trim_out_mat,
						4, signWallIsLeft * gs_trim_thk_out, rSill,
						px1l,	py1,	15,
						px2l,	py2,	s4,
						px2l,	py3l,	s5,
						px1l,	py4l,	s2
					gosub "TextCoord_Vert"
				endif
				if bPShapedRightOpening & gs_trim_below_sillRight then
					! --- Draw Door's Right side Trim  Curved Wall---
					bprism_ gs_trim_out_mat, gs_trim_out_mat, gs_trim_out_mat,
						4, signWallIsLeft * gs_trim_thk_out, rSill,
						px1r,	py1,	15,
						px2r,	py2,	s4,
						px2r,	py3r,	s5,
						px1r,	py4r,	s2
					gosub "TextCoord_Vert"
				endif

				if bPShapedLeftOpening & gs_trim_below_sillLeft then
					! --- Draw Left lower Trim  Curved Wall---
					bprism_ gs_trim_out_mat, gs_trim_out_mat, gs_trim_out_mat,
						4, signWallIsLeft * gs_trim_thk_out, rSill,
						px2LUp,	py4l,	10 - 2 * gs_stack_left,
						px1LUp,	py3l,	15,
						px2l,	py3l,	10 + 5 * not(gs_trim_below_sillLeft),
						px1l,	py4l,	mask - 2 * gs_stack_left
					gosub "TextCoord_Hor"
				endif

				if bPShapedRightOpening & gs_trim_below_sillRight then
					! --- Draw Right lower Trim  Curved Wall---
					bprism_ gs_trim_out_mat, gs_trim_out_mat, gs_trim_out_mat,
						4, signWallIsLeft * gs_trim_thk_out, rSill,
						px2RUp,	py4r,	10 - 2 * gs_stack_right,
						px1RUp,	py3r,	15,
						px2r,	py3r,	10 + 5 * not(gs_trim_below_sillRight),
						px1r,	py4r,	mask - 2 * gs_stack_right
					gosub "TextCoord_Hor"
				endif

				cutend
			endif

			del 4
		endif

	endif	! not(curvedWall)

	! ===== Outside Trim - Curved Walls - Casing - Bottom Side =====
	if curvedWall  & (gs_trimtype_out_int <> CASING_COMPLEX) then
		resol WALL_RESOL

		offsArc = iHolePosSign * AC_Hole_Position_Angle / 180 * PI * rSill

		if gs_IsCurved then
			thk = WIDO_SILL + gs_trim_jambext_nosing_out
		else
			thk = WALL_THICKNESS + gs_trim_jambext_nosing_out
			rotx -180
			cutplane 180
			del 1
			numCutsFrame = 1
		endif


		if numCutsFrame then
			cutend
			numCutsFrame = 0
		endif

		if not(gs_stack_left) then
			alfaLeftParallelOut = abs (asn ( (leftRevealPnts[idxSillStartRevealLeft][1] + tolerOffsetLeftOut + gs_trim_width_out) / rSill))
		else
			alfaLeftParallelOut = alfaLeft
		endif
		if not(gs_stack_right) then
			alfaRightParallelOut = abs (asn ( (rightRevealPnts[idxSillStartRevealRight][1] - tolerOffsetRightOut - gs_trim_width_out) / rSill))
		else
			alfaRightParallelOut = alfaRight
		endif

		if gs_trim_thk_out > EPS & gs_trim_show_cover_out then

			material gs_trim_out_mat
			sect_fill gs_trim_fill_out, gs_trim_pen_bg_out, gs_trim_pen_fg_out, gs_trim_pen_cont_out

			! ===== Outside Trim - Curved Walls - Casing =====

			if wallIsLeft then
				mask = 14 + (gs_trim_offs_out > EPS)
			else
				mask = 11 + 4 * (gs_trim_offs_out > EPS)
			endif

			maskTop		= 8 + 2 * not(gs_stack_top)
			maskBottom	= 8 + 2 * not(gs_stack_bottom)
			maskLeft	= 8 + (2 + 5 * bParalellInCurvedWalls) * not(gs_stack_left)
			maskRight	= 8 + 2 * not(gs_stack_right)

			maskLeft2	= bDrawSill*(not(bTrimovbotleftout)*(15-7*gs_stack_left)+bTrimovbotleftout*(10-2*gs_stack_left))
			maskRight2	= bDrawSill*(not(bTrimovbotrightout)*(15-7*gs_stack_right)+bTrimovbotrightout*(10-2*gs_stack_right))

			rotx -180
			addz -WOD
			bCondition = WIDO_REVEAL_SIDE exor SYMB_MIRRORED
			roty (not(bCondition) - bCondition) * abs(AC_Hole_Position_Angle) + not(wallIsLeft) * 180
			addz rSill


			! ===== Outside Trim - Curved Walls - Casing - Top and Bottom Sides =====

			if not(gs_stack_bottom | not(bCasingBottomOutside) | not(isWindow)) & abs(gs_tw_bottom_out) > EPS & not(gs_trimb_atframe_out) then
				! --- Draw lower Trim ---

				if not(bParalellInCurvedWalls) then
					px1 = signWallIsLeft * (offsArc - rSill * alfaLeft * DegRad + widoLeftJamb + not(gs_stack_left) * (gs_trim_width_out - gs_trim_offs_out - gs_tw_left_out*not(bTrimovbotleftout)))
					px2 = px1
					px3 = signWallIsLeft * (offsArc - rSill * alfaLeft * DegRad + widoLeftJamb + not(gs_stack_left) * (gs_trim_width_out - gs_trim_offs_out))
					px4 = signWallIsLeft * (offsArc + rSill * alfaRight * DegRad - widoRightJamb + not(gs_stack_right) * (-gs_trim_width_out + gs_trim_offs_out))
					px5 = signWallIsLeft * (offsArc + rSill * alfaRight * DegRad - widoRightJamb + not(gs_stack_right) * (-gs_trim_width_out + gs_trim_offs_out + gs_tw_right_out*not(bTrimovbotrightout)))
					px6 = px5

					py1 = -overSizeBottom + not(gs_stack_bottom | not(bCasingBottomOutside)) * (widoThresDepth + gs_trim_width_out*not(bDrawSill) - gs_trim_offs_out * not(bDrawSill) - gs_tw_bottom_out)
					py2 = py1 + gs_tw_bottom_out * (bDrawSill & not(bCasingBottomOutside))
					py3 = -overSizeBottom + not(gs_stack_bottom | not(bCasingBottomOutside)) * (widoThresDepth + gs_trim_width_out*not(bDrawSill) - gs_trim_offs_out * not(bDrawSill))
					py4 = py3
					py5 = py2
					py6 = py1

					s1 = maskLeft*not(bDrawSill)+maskLeft2*bDrawSill
					s2 = maskLeft
					s3 = bitset (mask, 1, not(gs_stack_left))
					s4 = maskRight
					s5 = maskRight*not(bDrawSill)+maskRight2*bDrawSill
					s6 = 13 + 2 * not(gs_stack_right)
				else
					px1 = signWallIsLeft * (offsArc - rSill * alfaLeftParallelOut * DegRad + not(gs_stack_left) * (gs_trim_width_out*0 - gs_trim_offs_out - gs_tw_left_out))
					px2 = px1
					px3 = signWallIsLeft * (offsArc - rSill * alfaLeftParallelOut * DegRad + not(gs_stack_left) * (gs_trim_width_out*0 - gs_trim_offs_out - gs_tw_left_out))
					px4 = signWallIsLeft * (offsArc + rSill * alfaRightParallelOut * DegRad + not(gs_stack_right) * (-gs_trim_width_out*0 + gs_trim_offs_out + gs_tw_right_out ))
					px5 = px4
					px6 = px5

					py1 = -overSizeBottom + not(gs_stack_bottom | not(bCasingBottomOutside)) * (widoThresDepth + gs_trim_width_out * (not(bDrawSill) & not(gs_trim_atframe_out)) - gs_tw_bottom_out)
					py2 = py1 + gs_tw_bottom_out * bDrawSill
					py3 = -overSizeBottom + not(gs_stack_bottom | not(bCasingBottomOutside)) * (widoThresDepth + gs_trim_width_out * (not(bDrawSill) & not(gs_trim_atframe_out))) + EPS
					py4 = py3 + EPS
					py5 = py2
					py6 = py1

					s1 = maskLeft * not(bDrawSill) + maskLeft2 * bDrawSill
					s2 = maskLeft
					s3 = bitset (mask, 1, not(gs_stack_left))
					s4 = 13	+ 2 * (bDrawSill | gs_trim_atframe_out) * not(gs_stack_right) - 5 * gs_stack_right
					s5 = maskRight * not(bDrawSill) + maskRight2 * bDrawSill
					s6 = 13 + 2 * not(gs_stack_right)
				endif

				if bParalellInCurvedWalls then
					addz -rSill
					roty -(not(bCondition) - bCondition) * abs(AC_Hole_Position_Angle) - not(wallIsLeft) * 180

					maskOutCasatFrame = 0
					if gs_trim_atframe_out then maskOutCasatFrame = 15


					cutpolya 4, 1, 0,
						-leftWidth + widoLeftJamb + gs_trim_width_out + gs_trim_offs_out,  py3 - EPS - gs_tw_bottom_out * bTrimovbotleftout,  maskOutCasatFrame,
						-leftWidth * 3,  py3 - EPS - gs_tw_bottom_out * bTrimovbotleftout,  7,
						-leftWidth * 3, B + overSizeTop, 7,
						-leftWidth + widoLeftJamb + gs_trim_width_out + gs_trim_offs_out,  B + overSizeTop,  1 * not(bTrimovbotleftout) + bTrimovbotleftout * maskOutCasatFrame

					cutpolya 4, 1, 0,
						rightWidth - widoRightJamb - gs_trim_width_out - gs_trim_offs_out,  py3 - EPS - gs_tw_bottom_out * bTrimovbotrightout,  4 * gs_stack_right,
						rightWidth * 3,  py3 - EPS - gs_tw_bottom_out * bTrimovbotrightout,  7,
						rightWidth * 3, B + overSizeTop, 7,
						rightWidth - widoRightJamb - gs_trim_width_out - gs_trim_offs_out,  B + overSizeTop,  1 * not(bTrimovbotrightout) + bTrimovbotleftout * maskOutCasatFrame

					del 2
				endif

				if gs_fsill then
					addz -rSill
					roty -(not(bCondition) - bCondition) * abs(AC_Hole_Position_Angle) - not(wallIsLeft) * 180
					addz WOD
					cutplane gs_sill_angle - 90
					del 3
				endif

				bprism_ gs_trim_out_mat, gs_trim_out_mat, gs_trim_out_mat,
					4+2, signWallIsLeft * gs_trim_thk_out, rSill,
						px1,	py1, 	s1,
						px2,	py2, 	s2,
						px3,	py3,	s3,
						px4,	py4,	s4,
						px5,	py5, 	s5,
						px6,	py6, 	s6
				gosub "TextCoord_Hor"

				if gs_fsill then cutend

				if bParalellInCurvedWalls then
					cutend
					cutend
				endif
			endif

			del 4
		endif
	endif


	! ===== Outside Trim on Wall Face at Complex Casing =====

	if (gs_trimtype_out_int = CASING_COMPLEX) & (gs_trim_thk_out > EPS) then

		material gs_trim_out_mat
		pen gs_frame_pen
		sect_fill gs_trim_fill_out, gs_trim_pen_bg_out, gs_trim_pen_fg_out, gs_trim_pen_cont_out

		rotx 180
		addz WIDO_SILL
		mulz -1

		_casingOverhangTopSideOut = gs_trimov_top_right_out

		_casingLeftPosX		= -leftWidth + gs_trim_width_out - gs_trim_offs_out + widoLeftJamb + tolerOffsetLeftOut
		_casingRightPosX 	= rightWidth - gs_trim_width_out + gs_trim_offs_out - widoRightJamb - tolerOffsetRightOut
		_casingTopPosY		= B + overSizeTop + not(gs_stack_top) * (-widoHeadDepth - tolerOffsetUpperOut - gs_trim_width_out + gs_trim_offs_out + gs_trim_offs_out_top)
		_trimThick	= gs_trim_thk_out

		! --- Architrave capital ---

		group "capital"

			if bArchitraveCapital & not(gs_stack_top) then

				if not(gs_stack_left | bLeftCornerFunction) then
					_trimWidth	= gs_tw_left_out

					add  _casingLeftPosX - gs_tw_left_out*not(_bArchitraveCapitalOnSide), _casingTopPosY + gs_tw_top_out - min(gs_trim_thk_out, (gs_tw_top_out)/8), -gs_trim_thk_out
					roty 90
					mulz -1
					gosub "architrave capital type"
					del 3
				endif

				if not(gs_stack_right | bRightCornerFunction) then
					_trimWidth	= gs_tw_right_out

					add  _casingRightPosX + gs_tw_right_out*not(_bArchitraveCapitalOnSide), _casingTopPosY + gs_tw_top_out - min(gs_trim_thk_out, (gs_tw_top_out)/8), -gs_trim_thk_out
					roty 90
					gosub "architrave capital type"
					del 2
				endif

			endif

		endgroup


		group "sidehead"

			! --- Draw upper Trim ---

			if not(gs_stack_top) then

				m1 = not(gs_stack_left)
				m2 = not(gs_stack_right)

				_casingHeadLeftPosX		= -leftWidth - overSizeLeft + widoLeftJamb + tolerOffsetLeftOut + not(gs_stack_left) * (gs_trim_width_out - gs_trim_offs_out - gs_tw_left_out - _casingOverhangTopSideOut)
				_casingHeadRightPosX 	= rightWidth + overSizeRight - widoRightJamb - tolerOffsetRightOut - not(gs_stack_right) * (gs_trim_width_out - gs_trim_offs_out - gs_tw_right_out - _casingOverhangTopSideOut)

				_trimWidth	= gs_tw_top_out
				_trimLength	= abs(_casingHeadLeftPosX - _casingHeadRightPosX)

				add  _casingHeadLeftPosX, _casingTopPosY, 0
				rotx -90
				roty 90

				gosub "casing head type"

				del 3
			endif


			addz -gs_trim_thk_out

			! Calculate status codes to left and right casing shape
			s1 = 8 + 7*not(gs_stack_top)
			s2 = 13 + 2*not(gs_stack_top)
			s3 = 8 + 7*not(gs_stack_bottom)
			s4 = 13 + 2*not(gs_stack_bottom)

			! --- Draw left side Trim ---

			if (isWindow | bPShapedLeftOpening) & not(gs_stack_bottom | not(bCasingBottomOutside)) then
				_casingLeftBottomPosY = -overSizeBottomLeft + widoThresDepth + gs_trim_width_out * not(bDrawLeftSLSill) - gs_trim_offs_out * not(gs_trim_atframe_out) * not(bDrawLeftSLSill)
			else
				_casingLeftBottomPosY = -overSizeBottomLeft
			endif

			if bPShapedLeftOpening then
				_casingLeftBottomPosY = _casingLeftBottomPosY + gs_sidelight_parapet_hgt_left + gs_reveal_bottom_sL - gs_reveal_bottom
			endif

			if not(gs_stack_left | bLeftCornerFunction) then
				body -1

				cprism_{2} gs_trim_out_mat, gs_trim_out_mat, gs_trim_out_mat,
					4, _trimThick,
					_casingLeftPosX,					_casingTopPosY,			0, s1, gs_trim_out_mat,
					_casingLeftPosX - gs_tw_left_out,	_casingTopPosY,			0, s2, gs_trim_out_mat,
					_casingLeftPosX - gs_tw_left_out,	_casingLeftBottomPosY,	0, s3, gs_trim_out_mat,
					_casingLeftPosX,					_casingLeftBottomPosY,	0, s4, gs_trim_out_mat
				gosub "TextCoord_Vert"

			endif


			! --- Draw right side Trim ---

			if (isWindow | bTShapedOpening) & not(gs_stack_bottom | not(bCasingBottomOutside)) then
				_casingRightBottomPosY	= -overSizeBottomRight + widoThresDepth + gs_trim_width_out * not(bDrawRightSLSill) - gs_trim_offs_out * not(gs_trim_atframe_out) * not(bDrawRightSLSill)
			else
				_casingRightBottomPosY	= -overSizeBottomRight
			endif

			if bPShapedRightOpening then
				_casingRightBottomPosY = _casingRightBottomPosY + gs_sidelight_parapet_hgt_right + gs_reveal_bottom_sL - gs_reveal_bottom
			endif

			if not(gs_stack_right | bRightCornerFunction) then
				body -1

				cprism_{2} gs_trim_out_mat, gs_trim_out_mat, gs_trim_out_mat,
					4, _trimThick,
					_casingRightPosX,					_casingTopPosY,			0, s1, gs_trim_out_mat,
					_casingRightPosX + gs_tw_right_out,	_casingTopPosY,			0, s2, gs_trim_out_mat,
					_casingRightPosX + gs_tw_right_out,	_casingRightBottomPosY,	0, s3, gs_trim_out_mat,
					_casingRightPosX,					_casingRightBottomPosY,	0, s4, gs_trim_out_mat
				gosub "TextCoord_Vert"

			endif

			del 1

		endgroup

		placegroup "sidehead"
		placegroup subgroup("capital", "sidehead")

		killgroup "sidehead"
		killgroup "capital"


		! --- T and P shape's extra casing pieces ---

		if bPShapedLeftOpening & gs_trim_below_sillLeft then
			_casingDoorLeftPosX 		= leftRevealPnts[idxSillStartRevealLeft][1] + gs_sidelight_WHole_width_left  + gs_trim_width_out - gs_trim_offs_out
			_casingDoorLeftTopPosY		= _casingLeftBottomPosY - gs_tw_bottom_out
			_casingDoorLeftBottomPosY	= _widoThresDepth
			_casingParapetLeftPosX		= -leftWidth - overSizeLeft + widoLeftJamb + tolerOffsetLeftOut + not(gs_stack_left) * (gs_trim_width_out - gs_trim_offs_out - gs_tw_left_out - casingOverhangBottomSideOut)

			! --- Draw Door's Left side Trim ---

			addz -gs_trim_thk_out

			body -1

			cprism_{2} gs_trim_out_mat, gs_trim_out_mat, gs_trim_out_mat,
				4, _trimThick,
				_casingDoorLeftPosX ,					_casingDoorLeftTopPosY,		0, 15, gs_trim_out_mat,
				_casingDoorLeftPosX - gs_tw_left_out,	_casingDoorLeftTopPosY,		0, 15, gs_trim_out_mat,
				_casingDoorLeftPosX - gs_tw_left_out,	_casingDoorLeftBottomPosY,	0, 15, gs_trim_out_mat,
				_casingDoorLeftPosX ,					_casingDoorLeftBottomPosY,	0, 15, gs_trim_out_mat
			gosub "TextCoord_Vert"

			del 1

			! --- Draw Left lower Trim in Straight Wall ---

			_trimWidth	= gs_tw_bottom_out
			_trimLength	= abs(_casingParapetLeftPosX - _casingDoorLeftPosX)

			add  _casingParapetLeftPosX, _casingLeftBottomPosY - _trimWidth, 0
			rotx -90
			roty 90

			m1 = not(gs_stack_left)
			m2 = 1

			gosub "casing head type"

			del 3

		endif


		if	bPShapedRightOpening & gs_trim_below_sillRight then
			_casingDoorRightPosX 		= rightRevealPnts[idxSillStartRevealRight][1] - gs_sidelight_WHole_width_right  - gs_trim_width_out + gs_trim_offs_out
			_casingDoorRightTopPosY		= _casingRightBottomPosY - gs_tw_bottom_out
			_casingDoorRightBottomPosY	= _widoThresDepth
			_casingParapetRightPosX		= rightWidth + overSizeRight - widoRightJamb - tolerOffsetRightOut - not(gs_stack_right) * (gs_trim_width_out - gs_trim_offs_out - gs_tw_right_out - casingOverhangBottomSideOut)

			! --- Draw Door's Right side Trim ---

			addz -gs_trim_thk_out

			body -1

			cprism_{2} gs_trim_out_mat, gs_trim_out_mat, gs_trim_out_mat,
				4, _trimThick,
				_casingDoorRightPosX,					_casingDoorRightTopPosY,	0, 15, gs_trim_out_mat,
				_casingDoorRightPosX + gs_tw_right_out,	_casingDoorRightTopPosY,	0, 15, gs_trim_out_mat,
				_casingDoorRightPosX + gs_tw_right_out,	_casingDoorRightBottomPosY,	0, 15, gs_trim_out_mat,
				_casingDoorRightPosX,					_casingDoorRightBottomPosY,	0, 15, gs_trim_out_mat
			gosub "TextCoord_Vert"

			del 1

			! --- Draw Right lower Trim in Straight Wall ---

			_trimWidth	= gs_tw_bottom_out
			_trimLength	= abs(_casingParapetRightPosX - _casingDoorRightPosX)

			add  _casingDoorRightPosX, _casingRightBottomPosY - _trimWidth, 0
			rotx -90
			roty 90

			m1 = 1
			m2 = not(gs_stack_right)

			gosub "casing head type"

			del 3

		endif


		! --- Draw lower Trim ---

		if not(gs_stack_bottom | not(bCasingBottomOutside) | not(isWindow)) then
			_casingHeadLeftPosX		= -leftWidth - overSizeLeft + widoLeftJamb + tolerOffsetLeftOut + not(gs_stack_left) * (gs_trim_width_out - gs_trim_offs_out - gs_tw_left_out - casingOverhangBottomSideOut)
			_casingHeadRightPosX 	= rightWidth + overSizeRight - widoRightJamb - tolerOffsetRightOut - not(gs_stack_right) * (gs_trim_width_out - gs_trim_offs_out - gs_tw_right_out - casingOverhangBottomSideOut)
			_casingBottomPosY		= -overSizeBottom + widoThresDepth + gs_trim_width_out*not(bDrawSill) - gs_trim_offs_out * not(gs_trim_atframe_out) * not(bDrawSill)

			_trimWidth	= gs_tw_bottom_out
			_trimLength	= abs(_casingHeadLeftPosX - _casingHeadRightPosX)

			add  _casingHeadLeftPosX, _casingBottomPosY - _trimWidth, 0
			rotx -90
			roty 90

			m1 = not(gs_stack_left)
			m2 = not(gs_stack_right)

			gosub "casing head type"

			del 3
		endif

		del 3
	endif


	! ===== Outside Trim at Ganging =====

	if bDrawLeftTrimatGangingOut then
		if isWindow then
			py = -overSizeBottom + not(gs_stack_bottom) * widoThresDepth

			s3 = maskBottom						! 15 or 10 or 8
			s4 = 13 + 2 * not(gs_stack_bottom)	! 15 or 13
		else
			py3 = -overSizeBottom
			py4 = -overSizeBottom

			s3 = 15
			s4 = 15
		endif

		! --- Draw left side Trim at Ganging ---

		px2 = leftRevealPnts[2][1] + tolerOffsStackCasLeftOut + trim_offs_out_modify - gs_trim_offs_out
		px1 = leftRevealPnts[2][1]
		px3 = leftRevealPnts[2][1] - gs_trim_thk_out * tan(alfaLeft)

		if iWindowShape = SHAPE_RECTANGULAR then
			py1 = B + overSizeTop + not(gs_stack_top) * (- tolerOffsetUpperOut - widoHeadDepth - gs_trim_width_out + gs_trim_offs_out)
			py2 = py1

			py = -overSizeBottom + not(gs_stack_bottom) * (widoThresDepth + gs_trim_offs_out_bottom)

			if bDrawSill then
				py3 = py + not(gs_stack_bottom) * (-gs_trim_offs_out_bottom * not(gs_trim_atframe_out))
			else
				py3 = py + not(gs_stack_bottom) * (gs_trim_width_out - gs_trim_offs_out * not(gs_trim_atframe_out))
			endif

			py4 = py3
			py5 = py2 - (tolerOffsStackCasUpperOut + trim_offs_out_modify - gs_trim_offs_out) * gs_trim_stack_top * gs_trim_stack_top
			py6 = py3 + (tolerOffsStackCasLowerOut + trim_offs_out_modify - gs_trim_offs_out) * gs_trim_stack_bottom * gs_trim_stack_bottom

			s1 = 8
			s2 = 8
			s5 = 13 + 2 * (gs_trim_stack_top | (not(gs_trim_stack_top) & not(gs_trim_atframe_out)))
			s3 = 8
			s4 = 8
			s6 = 8
		endif

		rotx 180
		mulz -1
		add 0, 0, -gs_trim_thk_out

		add px1, 0, gs_trim_thk_out
		roty - alfaLeft * ySign - 90
		cutplane 1, 1, 0
		del 2

		body -1

		prism_ 	6, gs_trim_thk_out,
			px3,	py1,	s1,
			px2,	py2,	s2,
			px2,	py5,	s5,
			px2,	py6,	s6,
			px2,	py3,	s3,
			px3,	py4,	s4
		gosub "TextCoord_Vert"

		cutend

		del 3
	endif

	if bDrawRightTrimatGangingOut then
		if isWindow then
			py = -overSizeBottom + not(gs_stack_bottom) * widoThresDepth

			s3 = maskBottom						! 15 or 10 or 8
			s4 = 13 + 2 * not(gs_stack_bottom)	! 15 or 13
		else
			py3 = -overSizeBottom
			py4 = -overSizeBottom

			s3 = 15
			s4 = 15
		endif

		! --- Draw right side Trim at Ganging ---

		px2 = rightRevealPnts[2][1] - tolerOffsStackCasRightOut - trim_offs_out_modify + gs_trim_offs_out
		px1 = rightRevealPnts[2][1]
		px3 = rightRevealPnts[2][1] + gs_trim_thk_out * tan(alfaright)

		if iWindowShape = SHAPE_RECTANGULAR then
			py1 = B + overSizeTop + not(gs_stack_top) * (- tolerOffsetUpperOut - widoHeadDepth - gs_trim_width_out + gs_trim_offs_out)
			py2 = py1

			py = -overSizeBottom + not(gs_stack_bottom) * (widoThresDepth + gs_trim_offs_out_bottom)

			if bDrawSill then
				py3 = py + not(gs_stack_bottom) * (-gs_trim_offs_out_bottom * not(gs_trim_atframe_out))
			else
				py3 = py + not(gs_stack_bottom) * (gs_trim_width_out - gs_trim_offs_out * not(gs_trim_atframe_out))
			endif

			py4 = py3
			py5 = py2 - (tolerOffsStackCasUpperOut + trim_offs_out_modify - gs_trim_offs_out) * gs_trim_stack_top * gs_trim_stack_top
			py6 = py3 + (tolerOffsStackCasLowerOut + trim_offs_out_modify - gs_trim_offs_out) * gs_trim_stack_bottom * gs_trim_stack_bottom


			s1 = 8
			s2 = 8
			s5 = 13 + 2 * (gs_trim_stack_top | (not(gs_trim_stack_top) & not(gs_trim_atframe_out)))
			s3 = 8
			s4 = 8
			s6 = 8
		endif

		rotx 180
		mulz -1
		add 0, 0, -gs_trim_thk_out

		add px1, 0, gs_trim_thk_out
		roty alfaright * ySign + 90
		cutplane 1, 1, 0
		del 2

		body -1

		prism_ 	6, gs_trim_thk_out,
			px3,	py1,	s1,
			px2,	py2,	s2,
			px2,	py5,	s5,
			px2,	py6,	s6,
			px2,	py3,	s3,
			px3,	py4,	s4
		gosub "TextCoord_Vert"

		cutend

		del 3
	endif


	if bDrawBottTrimatGangingOut then
		! --- Draw lower Trim at Ganging ---

		if gs_stack_left then
			px1 = -leftWidth + tolerOffsStackCasLeftOut + trim_offs_out_modify - gs_trim_offs_out
		else
			px1 = -leftWidth + gs_trim_width_out - gs_trim_offs_out + widoLeftJamb + tolerOffsetLeftOut
		endif

		if gs_stack_right then
			px2 = rightWidth - tolerOffsStackCasRightOut - trim_offs_out_modify + gs_trim_offs_out
		else
			px2 = rightWidth - gs_trim_width_out + gs_trim_offs_out - widoRightJamb - tolerOffsetRightOut
		endif

		py2 = -overSizeBottom
		py1 = py2 + tolerOffsStackCasLowerOut + trim_offs_out_modify - gs_trim_offs_out

		s1 = 15
		s2 = 10
		s3 = 8
		s4 = 8

		rotx 180
		mulz -1
		add 0, 0, -gs_trim_thk_out

		addz WIDO_SILL * (gs_trim_atframe_out = 0)

		prism_ 4, gs_trim_thk_out,
			px1,	py1, 	s1,
			px2,	py1, 	s2,
			px2,	py2,	s3,
			px1,	py2,	s4
		gosub "TextCoord_Hor"

		del 4
	endif

	if bDrawTopTrimatGangingOut then
		! --- Draw upper Trim at Ganging ---

		if gs_stack_left then
			px1 = -leftWidth + tolerOffsStackCasLeftOut + trim_offs_out_modify - gs_trim_offs_out
		else
			px1 = -leftWidth + gs_trim_width_out - gs_trim_offs_out + widoLeftJamb + tolerOffsetLeftOut
		endif

		if gs_stack_right then
			px2 = rightWidth - tolerOffsStackCasRightOut - trim_offs_out_modify + gs_trim_offs_out
		else
			px2 = rightWidth - gs_trim_width_out + gs_trim_offs_out - widoRightJamb - tolerOffsetRightOut
		endif

		py2 = B + overSizeTop
		py1 = py2 - tolerOffsStackCasUpperOut - trim_offs_out_modify + gs_trim_offs_out

		s1 = 15
		s2 = 10
		s3 = 8
		s4 = 8

		rotx 180
		mulz -1
		add 0, 0, -gs_trim_thk_out

		addz WIDO_SILL * (gs_trim_atframe_out = 0)

		prism_ 4, gs_trim_thk_out,
			px1,	py1, 	s1,
			px2,	py1, 	s2,
			px2,	py2,	s3,
			px1,	py2,	s4
		gosub "TextCoord_Hor"

		del 4
	endif

	for i=1 to numCutsCornerColumn
		cutend
	next i
return


3000:
! ==============================================================================
!	Draw Apron
! ==============================================================================

	pen gs_frame_pen

	rotx 180

	if not(curvedWall) then

		! ======================================
		! Straight Walls
		! ======================================

		addz (-WALL_THICKNESS + WIDO_SILL) * not(gs_trim_atframe_in) - WIDO_FRAME_THICKNESS * gs_trim_atframe_in

		thk = WALL_THICKNESS - WIDO_SILL - WIDO_FRAME_THICKNESS
		wallIncl = iDir * WALL_INCL

		mask = 11 + 4 * (gs_trim_offs_in > EPS | not(bShowJambExtension) | abs(WALL_THICKNESS - WIDO_SILL - WIDO_FRAME_THICKNESS) < EPS)

		if gs_trim_thk_in > EPS then

			material gs_apron_mat
			sect_fill gs_trim_fill_in, gs_trim_pen_bg_in, gs_trim_pen_fg_in, gs_trim_pen_cont_in

			! ===== Inside Trim - Straight Walls - Casing =====

			maskTop		= 8 + 2 * not(gs_stack_top)
			maskBottom	= 8 + 2 * not(gs_stack_bottom)
			maskLeft	= 8 + 2 * not(gs_stack_left) + 5 * (gs_trim_in_mat <> gs_apron_mat)
			maskRight	= 8 + 2 * not(gs_stack_right) + 5 * (gs_trim_in_mat <> gs_apron_mat)

			maskLeft2	= not(bTrimovbotleftin)*(15-7*gs_stack_left)+bTrimovbotleftin*(10-2*gs_stack_left + 5 * (gs_trim_in_mat <> gs_apron_mat) * not(gs_stack_left))
			maskRight2	= not(bTrimovbotrightin)*(15-7*gs_stack_right)+bTrimovbotrightin*(10-2*gs_stack_right + 5 * (gs_trim_in_mat <> gs_apron_mat) * not(gs_stack_right))

			! --- Stacked Window or Window with Board or Corner Window ---

			if bInclinedWall & not(gs_trim_atframe_in) then
				roty wallIncl
				addz -gs_trim_thk_in

				if not(gs_stack_bottom | not(isWindow)) & bShapeEnablesStraightBottomTrim & abs(gs_apron_width) > EPS then
					px2 = (gs_trim_width_in - gs_trim_offs_in) / cos(wallIncl)
					px1 = px2 - gs_tw_left_in * not(bTrimovbotleftin)
					px3 = -px2
					px4 = px3 + gs_tw_right_in * not(bTrimovbotrightin)

					py1 = -overSizeBottomIn + not(gs_stack_bottom) * ((gs_trim_width_in + tolerOffsetLowerIn - gs_trim_offs_in) * not(bDrawBoard) - gs_apron_width)
					py2 = -overSizeBottomIn + not(gs_stack_bottom) * ((gs_trim_width_in + tolerOffsetLowerIn - gs_trim_offs_in) * not(bDrawBoard))
					material gs_apron_mat

					if abs(gs_trim_thk_in - gs_apron_thk) < EPS then
						pxL = -(leftWidth - tolerOffsetLeftIn + overSizeLeft)  / cos(wallIncl) + bBottomtriminthk * tan(wallIncl)
						pxR =  (rightWidth - tolerOffsetRightIn + overSizeRight) / cos(wallIncl) + bBottomtriminthk * tan(wallIncl)

						croof_ gs_apron_mat, gs_apron_mat, gs_apron_mat,
							4+2, 0,0, 1,0, 0, 0, -bBottomtriminthk,
							pxL + not(gs_stack_left)  * px1,	py1, 	-gs_stack_left * wallIncl * not(bTrimovbotleftin),	maskLeft2,
							pxL + not(gs_stack_left)  * px1,	py1 + gs_apron_width, 	-wallIncl*(bTrimovbotleftin), maskLeft,						! 15 or 8
							pxL + not(gs_stack_left)  * px2,	py2,	0,	bitset (mask, 1, not(gs_stack_left)),
							pxR + not(gs_stack_right) * px3,	py2,	wallIncl * bTrimovbotrightin,	maskRight,				! 15 or 8
							pxR + not(gs_stack_right) * px4,	py1 + gs_apron_width, 	wallIncl*bTrimovbotrightin, maskRight2,
							pxR + not(gs_stack_right) * px4,	py1, 	0,	13 + 2 * not(gs_stack_right)	! 15 or 13

						lin_ pxL + not(gs_stack_left)  * px2, py2, 0, pxR + not(gs_stack_right) * px3,	py2, 0

					else
						pxL = -(leftWidth  - tolerOffsetLeftIn + overSizeLeft)  / cos(wallIncl) + (gs_trim_thk_in*not(bTrimovbotleftin)+bBottomtriminthk*bTrimovbotleftin) * tan(wallIncl)
						pxR =  (rightWidth - tolerOffsetRightIn + overSizeRight) / cos(wallIncl) + (gs_trim_thk_in*not(bTrimovbotrightin)+bBottomtriminthk*bTrimovbotrightin) * tan(wallIncl)

						addz (gs_trim_thk_in - gs_apron_thk)
						croof_ gs_apron_mat, gs_apron_mat, gs_apron_mat,
							4, 0,0, 1,0, 0, 0, -bBottomtriminthk,
							pxL + not(gs_stack_left)  * px1,	py1, 	-wallIncl*bTrimovbotleftin,	8 + 7 * not(gs_stack_left),
							pxL + not(gs_stack_left)  * px1,	py2, 	0, 13 + 2 * not(gs_stack_left),
							pxR + not(gs_stack_right) * px4,	py2, 	wallIncl*bTrimovbotrightin, 8 + 7 * not(gs_stack_right),
							pxR + not(gs_stack_right) * px4,	py1, 	0,	13 + 2 * not(gs_stack_right)
						del 1
					endif
					material gs_trim_in_mat
				endif

				del 2
			else		! Straight wall
				addz -gs_trim_thk_in

				if not(gs_stack_bottom | not(isWindow)) & bShapeEnablesStraightBottomTrim & abs(gs_apron_width) > EPS & not(bInclinedWall) then
					! --- Draw lower Trim/Apron in Straight Wall ---

					py1 = -overSizeBottomIn + not(gs_stack_bottom) * ((gs_trim_width_in + tolerOffsetLowerIn - gs_trim_offs_in * not(gs_trim_atframe_in)) * not(bDrawBoard) - gs_apron_width)
					py2 = -overSizeBottomIn + not(gs_stack_bottom) * ((gs_trim_width_in + tolerOffsetLowerIn - gs_trim_offs_in * not(gs_trim_atframe_in)) * not(bDrawBoard))

					px1 = -leftWidth + tolerOffsetLeftIn - overSizeLeft + not(gs_stack_left) * (gs_trim_width_in - gs_trim_offs_in - gs_tw_left_in*not(bTrimovbotleftin))
					px2 = -leftWidth + tolerOffsetLeftIn - overSizeLeft + not(gs_stack_left) * (gs_trim_width_in - gs_trim_offs_in)
					px3 =  rightWidth - tolerOffsetRightIn + overSizeRight + not(gs_stack_right) * (-gs_trim_width_in + gs_trim_offs_in)
					px4 =  rightWidth - tolerOffsetRightIn + overSizeRight + not(gs_stack_right) * (-gs_trim_width_in + gs_trim_offs_in + gs_tw_right_in*not(bTrimovbotrightin))

					if bDrawLeftTrimatGangingIn then
						px2 = leftRevealPnts[2][1] + tolerOffsStackCasLeftIn + trinL - gs_trim_offs_in
					endif
					if bDrawRightTrimatGangingIn then
						px3 = rightRevealPnts[2][1] - tolerOffsStackCasRightIn - trinR + gs_trim_offs_in
					endif

					material gs_apron_mat

					addz (WIDO_FRAME_THICKNESS - WALL_THICKNESS + WIDO_SILL) * gs_trim_atframe_in

					if abs(gs_trim_thk_in - gs_apron_thk) < EPS then
						prism_ 4+2, bBottomtriminthk,
							px1,	py1,					maskLeft2,
							px1,	py1 + gs_apron_width, 	maskLeft,						! 15 or 8
							px2,	py2,					bitset (mask, 1, not(gs_stack_left)),
							px3,	py2,					maskRight,						! 15 or 8
							px4,	py1 + gs_apron_width, 	maskRight2,
							px4,	py1,					13 + 2 * not(gs_stack_right)	! 15 or 13
					else
						addz gs_trim_thk_in - gs_apron_thk
						prism_ 4, bBottomtriminthk,
							px1,	py1, 	8  + 7 * not(gs_stack_left),
							px1,	py2,	13 + 2 * not(gs_stack_left),
							px4,	py2,	8  + 7 * not(gs_stack_right),
							px4,	py1, 	13 + 2 * not(gs_stack_right)
						del 1
					endif

					if bCutWall then
						pen WALL_VIEW_PEN
						material matWallIn
						wallniche 4,1,16,
							0,0,1,bBottomtriminthk + (gs_trim_thk_in - gs_apron_thk),
							px1,	py1, 	31,
							px1,	py2,	31,
							px4,	py2,	31,
							px4,	py1, 	31
						pen gs_frame_pen
						material gs_trim_in_mat
					endif

					del 1
				endif

				if not(gs_stack_bottom | not(isWindow)) & bShapeEnablesStraightBottomTrim & abs(gs_apron_width) > EPS & bInclinedWall then
					! --- Draw Apron in Inclined Wall ---

					px2 = (gs_trim_width_in - gs_trim_offs_in) / cos(wallIncl)
					px1 = px2 - gs_tw_left_in * not(bTrimovbotleftin)
					px3 = -px2
					px4 = px3 + gs_tw_right_in * not(bTrimovbotrightin)
					pxL = -(leftWidth  + overSizeLeft)  / cos(wallIncl) + bBottomtriminthk * tan(wallIncl)
					pxR =  (rightWidth + overSizeRight) / cos(wallIncl) + bBottomtriminthk * tan(wallIncl)

					py1 = -overSizeBottomIn + not(gs_stack_bottom) * (gs_trim_width_in - gs_trim_offs_in * not(gs_trim_atframe_in)) * not(bDrawBoard) - gs_apron_width
					py2 = -overSizeBottomIn + not(gs_stack_bottom) * (gs_trim_width_in - gs_trim_offs_in * not(gs_trim_atframe_in)) * not(bDrawBoard)

					material gs_apron_mat

					addz (WIDO_FRAME_THICKNESS - WALL_THICKNESS + WIDO_SILL) * gs_trim_atframe_in + gs_trim_thk_in
					roty wallIncl
					addz -gs_trim_thk_in

					if abs(gs_trim_thk_in - gs_apron_thk) < EPS then
						croof_ bBottomtriminmat, bBottomtriminmat, bBottomtriminmat,
							4+2, 0,0, 1,0, 0, 0, -bBottomtriminthk,
							pxL + not(gs_stack_left)  * px1,	py1, 	-gs_stack_left * wallIncl*not(bTrimovbotleftin),	maskLeft*not(bDrawBoard)+maskLeft2*bDrawBoard,
							pxL + not(gs_stack_left)  * px1,	py1 + gs_apron_width*bDrawBoard, 	-wallIncl*(bTrimovbotleftin), maskLeft,						! 15 or 8
							pxL + not(gs_stack_left)  * px2,	py2,				0,				bitset (mask, 1, not(gs_stack_left)),
							pxR + not(gs_stack_right) * px3,	py2,				gs_stack_right * wallIncl*not(bTrimovbotrightin),	maskRight,				! 15 or 8
							pxR + not(gs_stack_right) * px4,	py1 + gs_apron_width*bDrawBoard, 	wallIncl*bTrimovbotrightin, maskRight*not(bDrawBoard)+maskRight2*bDrawBoard,
							pxR + not(gs_stack_right) * px4,	py1, 	0,				13 + 2 * not(gs_stack_right)	! 15 or 13
					else
						addz gs_trim_thk_in - gs_apron_thk
						croof_ bBottomtriminmat, bBottomtriminmat, bBottomtriminmat,
							4, 0,0, 1,0, 0, 0, -bBottomtriminthk,
							pxL + not(gs_stack_left)  * px1,	py1, 	-wallIncl*bTrimovbotleftin,	8 + 7 * not(gs_stack_left),
							pxL + not(gs_stack_left)  * px1,	py2, 	0, 9 + 2 * not(gs_stack_left),
							pxR + not(gs_stack_right) * px4,	py2, 	wallIncl*bTrimovbotrightin, 8 + 7 * not(gs_stack_right),
							pxR + not(gs_stack_right) * px4,	py1, 	0,	13 + 2 * not(gs_stack_right)
						del 1
					endif

					del 3
					material gs_trim_in_mat
				endif

				del 1
			endif ! bInclinedWall
		endif

		del 1

	else	! not(curvedWall)

		! ======================================
		! Apron - Curved Walls
		! ======================================

		resol WALL_RESOL

		offsArc = iHolePosSign * AC_Hole_Position_Angle / 180 * PI * rBoard

		matTrim = gs_trim_in_mat

		material gs_apron_mat
		sect_fill gs_trim_fill_in, gs_trim_pen_bg_in, gs_trim_pen_fg_in, gs_trim_pen_cont_in

		if gs_IsCurved then
			thk = WALL_THICKNESS - WIDO_SILL - WIDO_FRAME_THICKNESS
		else
			thk = WALL_THICKNESS

			addz -WIDO_FRAME_THICKNESS

			material matTrim

			cutplane
			del 1
			numCutsFrame = 1
		endif

		if wallIsLeft then
			mask = 14 + (gs_trim_offs_in > EPS | not(bShowJambExtension))
		else
			mask = 11 + 4 * (gs_trim_offs_in > EPS | not(bShowJambExtension))
		endif

		if numCutsFrame then
			cutend
			numCutsFrame = 0
		endif

		if not(gs_stack_left) then
			alfaLeftParallelIn = abs (asn ( (leftRevealPnts[idxBoardEndRevealLeft][1] + gs_trim_width_in) / rBoard))
		else
			alfaLeftParallelIn = alfaLeft
		endif
		if not(gs_stack_right) then
			alfaRightParallelIn = abs (asn ( (rightRevealPnts[idxBoardEndRevealRight][1] - gs_trim_width_in) / rBoard))
		else
			alfaRightParallelIn = alfaRight
		endif

		if gs_trim_thk_in > EPS then

! ------------------------------------------------------------------------------
! Apron hole in curved wall
! ------------------------------------------------------------------------------

			if iWindowShape = SHAPE_RECTANGULAR then

				if gs_stack_left then
					pxL = leftRevealPnts[idxBoardEndRevealLeft][1]
				else
					pxL = leftRevealPnts[idxBoardEndRevealLeft][1] + gs_trim_width_in + not(gs_stack_left) * (-gs_trim_offs_in + tolerOffsetLeftIn)
					alphaLeft = abs(asn(pxL / rBoard)) + ArcLengthBoardToAngle * gs_tw_left_in
					pxL = -rBoard * sin(alphaLeft)
					pyL = -sqr(rBoard^2 - pxL^2) - WOD
				endif
				if gs_stack_right then
					pxR = rightRevealPnts[idxBoardEndRevealright][1]
				else
					pxR = rightRevealPnts[idxBoardEndRevealright][1] - gs_trim_width_in - not(gs_stack_right) * (-gs_trim_offs_in + tolerOffsetRightIn)
					alphaRight = abs(asn(pxR / rBoard)) + ArcLengthBoardToAngle * gs_tw_right_in
					pxR = rBoard * sin(alphaRight)
					pyR = -sqr(rBoard^2 - pxR^2) - WOD
				endif
				if isWindow then
					pyB = -overSizeBottomIn - not(gs_stack_bottom) * (gs_apron_width)
				else
					pyB = 0
				endif
				pyT = pyB + gs_apron_width

				if bCutWall then
					pen WALL_VIEW_PEN
					material matWallIn

					alfaEnd		= alphaRight
					alfaStart	= -alphaLeft
					arcRadius	= radBoard
					bMiddlePoints = 1
					firstStatus	= 31
					midStatus	= 95
					lastStatus	= 31
					if abs(alfaStart - alfaEnd) > EPS then
						gosub 110

						rotx 90
						muly -1
						addz -pyB

						cutDepth = pyT - pyB
						if wallIsLeft then
!							prism_ NSP/3 + 1,-cutDepth,
!								0,WOD,15,
!								use(nsp)
							wallniche NSP/3 + 1,1,0,
								0,0,-cutDepth,cutDepth,
								0,WOD,31,
								get(nsp)
						else
!							prism_ NSP/3 + 2,-cutDepth,
!								 (rBoard + WALL_THICKNESS) * sin(alphaLeft),  (rBoard + WALL_THICKNESS) * cos(alphaLeft)  + WOD, 15,
!								-(rBoard + WALL_THICKNESS) * sin(alphaRight), (rBoard + WALL_THICKNESS) * cos(alphaRight) + WOD, 15,
!								use(nsp)
							wallniche NSP/3 + 2,1,0,
									0,0,-cutDepth,cutDepth,
								 (rBoard + WALL_THICKNESS) * sin(alphaLeft),  (rBoard + WALL_THICKNESS) * cos(alphaLeft)  + WOD, 31,
								-(rBoard + WALL_THICKNESS) * sin(alphaRight), (rBoard + WALL_THICKNESS) * cos(alphaRight) + WOD, 31,
								get(nsp)
						endif
						del 3
					endif

					pen gs_frame_pen
					material gs_trim_in_mat
				endif
			endif

			material gs_apron_mat
			sect_fill gs_trim_fill_in, gs_trim_pen_bg_in, gs_trim_pen_fg_in, gs_trim_pen_cont_in

			! ===== Inside Trim - Curved Walls - Casing =====

			if wallIsLeft then
				mask = 11 + 4 * (gs_trim_offs_in > EPS)
			else
				mask = 14 + (gs_trim_offs_in > EPS)
			endif

			maskTop		= 8 + 2 * not(gs_stack_top) * not(bParalellInCurvedWalls)
			maskBottom	= 8 + 2 * not(gs_stack_bottom)
			maskLeft	= 8 + (2 + 5 * bParalellInCurvedWalls) * not(gs_stack_left)
			maskRight	= 8 + 2 * not(gs_stack_right)

			maskLeft2	= bDrawBoard*(not(bTrimovbotleftin)*(15-7*gs_stack_left)+bTrimovbotleftin*(10-2*gs_stack_left))
			maskRight2	= bDrawBoard*(not(bTrimovbotrightin)*(15-7*gs_stack_right)+bTrimovbotrightin*(10-2*gs_stack_right))

			addz -WOD
			bCondition = WIDO_REVEAL_SIDE exor SYMB_MIRRORED
			roty (not(bCondition) - bCondition) * abs(AC_Hole_Position_Angle) + not(wallIsLeft) * 180
			addz rBoard

! ------------------------------------------------------------------------------
! Apron in curved wall
! ------------------------------------------------------------------------------

			if not(gs_stack_bottom | not(isWindow)) & bShapeEnablesStraightBottomTrim & abs(gs_apron_width) > EPS then
				if not(bParalellInCurvedWalls) then
					px1 = signWallIsLeft * (offsArc - rBoard * alfaLeft * DegRad + not(gs_stack_left) * (gs_trim_width_in - gs_trim_offs_in - gs_tw_left_in*not(bTrimovbotleftin)))
					px2 = px1
					px3 = signWallIsLeft * (offsArc - rBoard * alfaLeft * DegRad + not(gs_stack_left) * (gs_trim_width_in - gs_trim_offs_in))
					px4 = signWallIsLeft * (offsArc + rBoard * alfaRight * DegRad + not(gs_stack_right) * (-gs_trim_width_in + gs_trim_offs_in))
					px5 = signWallIsLeft * (offsArc + rBoard * alfaRight * DegRad + not(gs_stack_right) * (-gs_trim_width_in + gs_trim_offs_in + gs_tw_right_in*not(bTrimovbotrightin)))
					px6 = px5

					py1 = -overSizeBottomIn + not(gs_stack_bottom) * (gs_trim_width_in*not(bDrawBoard) - gs_trim_offs_in * not(bDrawBoard) - gs_apron_width)
					py2 = py1 + gs_apron_width * bDrawBoard
					py3 = -overSizeBottomIn + not(gs_stack_bottom) * (gs_trim_width_in*not(bDrawBoard) - gs_trim_offs_in * not(bDrawBoard))
					py4 = py3
					py5 = py2
					py6 = py1

					s1 = maskLeft*not(bDrawBoard)+maskLeft2*bDrawBoard
					s2 = maskLeft
					s3 = bitset (mask, 1, not(gs_stack_left))
					s4 = maskRight
					s5 = maskRight*not(bDrawBoard)+maskRight2*bDrawBoard
					s6 = 13 + 2 * not(gs_stack_right)
				else
					px1 = signWallIsLeft * (offsArc - rBoard * alfaLeftParallelIn * DegRad + not(gs_stack_left) * (gs_trim_width_in*0 - gs_trim_offs_in - gs_tw_left_in + tolerOffsetLeftIn))
					px2 = px1
					px3 = signWallIsLeft * (offsArc - rBoard * alfaLeftParallelIn * DegRad + not(gs_stack_left) * (gs_trim_width_in*0 - gs_trim_offs_in - gs_tw_left_in + tolerOffsetLeftIn))
					px4 = signWallIsLeft * (offsArc + rBoard * alfaRightParallelIn * DegRad + not(gs_stack_right) * (-gs_trim_width_in*0 + gs_trim_offs_in + gs_tw_right_in - tolerOffsetRightIn ))
					px5 = signWallIsLeft * (offsArc + rBoard * alfaRightParallelIn * DegRad + not(gs_stack_right) * (-gs_trim_width_in*0 + gs_trim_offs_in + gs_tw_right_in - tolerOffsetRightIn ))
					px6 = px5

					py1 = -overSizeBottomIn + not(gs_stack_bottom) * ( (gs_trim_width_in - gs_trim_offs_in + tolerOffsetLowerIn) * not(bDrawBoard) - gs_apron_width)
					py2 = py1 + gs_apron_width * bDrawBoard
					py3 = -overSizeBottomIn + not(gs_stack_bottom) * ( (gs_trim_width_in - gs_trim_offs_in + tolerOffsetLowerIn) * not(bDrawBoard)) + EPS
					py4 = py3 + EPS
					py5 = py2
					py6 = py1

					s1 = maskLeft * not(bDrawBoard) + maskLeft2 * bDrawBoard
					s2 = maskLeft
					s3 = bitset (mask, 1, not(gs_stack_left))
					s4 = 13	+ 2 * bDrawBoard
					s5 = maskRight * not(bDrawBoard) + maskRight2 * bDrawBoard
					s6 = 13 + 2 * not(gs_stack_right)
				endif

				if bParalellInCurvedWalls then
					addz -rBoard
					roty -(not(bCondition) - bCondition) * abs(AC_Hole_Position_Angle) - not(wallIsLeft) * 180

					maskApronNos = 0
					if abs(gs_apron_thk - gs_trim_thk_in) > EPS then
						maskApronNos = 15
					else
						maskApronNos = 15 * (gs_trim_in_mat <> gs_apron_mat)
					endif

					cutpolya 4, 1, 0,
						-leftWidth + tolerOffsetLeftIn + gs_trim_width_in + gs_trim_offs_in,  py3 - EPS - gs_apron_width * bTrimovbotleftin,  maskApronNos,
						-leftWidth * 3,  py3 - EPS - gs_apron_width * bTrimovbotleftin,  7,
						-leftWidth * 3, B + overSizeTop, 7,
						-leftWidth + tolerOffsetLeftIn + gs_trim_width_in + gs_trim_offs_in,  B + overSizeTop,  1 * not(bTrimovbotleftin) + bTrimovbotleftin * maskApronNos

					cutpolya 4, 1, 0,
						-leftWidth + tolerOffsetLeftIn + gs_trim_width_in - gs_trim_offs_in,  py3 - EPS,  3,
						rightWidth - tolerOffsetRightIn - gs_trim_width_in - gs_trim_offs_in,  py3 - EPS,  7,
						rightWidth - tolerOffsetRightIn - gs_trim_width_in - gs_trim_offs_in, B + overSizeTop, 7,
						-leftWidth + tolerOffsetLeftIn + gs_trim_width_in - gs_trim_offs_in,  B + overSizeTop,  1

					cutpolya 4, 1, 0,
						rightWidth - tolerOffsetRightIn - gs_trim_width_in - gs_trim_offs_in,  py3 - EPS - gs_apron_width * bTrimovbotrightin,  maskApronNos,
						rightWidth * 3,  py3 - EPS - gs_apron_width * bTrimovbotrightin,  7,
						rightWidth * 3, B + overSizeTop, 7,
						rightWidth - tolerOffsetRightIn - gs_trim_width_in - gs_trim_offs_in,  B + overSizeTop,  1 * not(bTrimovbotrightin) + bTrimovbotrightin * maskApronNos

					del 2
				endif

				bprism_ gs_apron_mat, gs_apron_mat, gs_apron_mat,
					4+2, -signWallIsLeft * bBottomtriminthk, rBoard,
					px1,	py1, 	s1,
					px2,	py2, 	s2,
					px3,	py3,	s3,
					px4,	py4,	s4,
					px5,	py5, 	s5,
					px6,	py6, 	s6

				if bParalellInCurvedWalls then
					cutend
					cutend
					cutend
				endif
			endif

			del 3
		endif
	endif	! not(curvedWall)

	del 1
return


"casing head type":

	toler 0.002
	if iCasingHeadTypeOut = CASING_HEAD_RECT then
		put 0,	0,	0,
			-_trimWidth,	0,			0,
			-_trimWidth,	_trimThick,	0,
			0,				_trimThick,	0,
			0,				0,			0
	endif
	
	if iCasingHeadTypeOut = CASING_HEAD_DECORATIVE_1 then
		_sizeW			= min(_trimThick, _trimWidth/8)
		_sizeT			= min(_trimThick, _thickBracket/2)
		_thickProfile	= _trimThick+_thickBracket+_offsetTop
		put 0,0,0,
			-_trimWidth,			0,					0,
			-_trimWidth+_sizeW,		_thickProfile,		0,
			-_trimWidth+_sizeW*2,	_thickProfile,		0,
			-_trimWidth+_sizeW*2,	_trimThick+_sizeT,	0,
			-_sizeW*2,				_trimThick+_sizeT,	0,
			0,						_trimThick,			0,
			0,						0,					0
	endif
	
	if iCasingHeadTypeOut = CASING_HEAD_DECORATIVE_2 then
		_sizeW			= min(_trimThick, _trimWidth/8)
		_sizeT			= min(_trimThick, _thickBracket/2)
		_thickProfile	= _trimThick+_thickBracket+_offsetTop
		_rr				= min((_thickBracket+_offsetTop)/2, _trimWidth-_sizeW*2-EPS)
	
		put 0,0,0,
			-_trimWidth,				0,				0,
			-_trimWidth+_sizeW,			_thickProfile,	0,
			-_trimWidth+_sizeW*2,		_thickProfile,	0,
			-_trimWidth+_sizeW*2,		_trimThick+rr,	1,
			-_trimWidth+_sizeW*2+_rr,	_trimThick,		1001,
			0,							_trimThick,		0,
			0,							0,				0
	endif
	
	if iCasingHeadTypeOut = CASING_HEAD_DECORATIVE_3 then
		_sizeW			= min(_trimThick, _trimWidth/8)
		_thickProfile	= _trimThick+_thickBracket+_offsetTop
	
		put 0,0,0,
			-_trimWidth,			0,				0,
			-_trimWidth+_sizeW,  	_thickProfile,	0,
			-_trimWidth+_sizeW*2,	_thickProfile,	0,
			-_trimWidth+_sizeW*2,	_trimThick,		0,
			0,     					_trimThick,		0,
			0,     					0,				0
	endif
	
	if nsp then
		extrude nsp/3, 0, 0, _trimLength, 1+2+4+16*m1+32*m2,
			get(nsp)
	endif
	
	roty 90
	base
	vert 0,0,0
	vert 0.1,0,0
	vert 0,0.1,0
	vert 0,0,0.1
	coor 258,-1,-2,-3,-4
	body -1
	del 1

return


"architrave capital type":
	if _bArchitraveCapitalOnSide then
		_capitalLength = _trimWidth
	else
		_capitalLength = architraveCapitalWidth
	endif

	if	(iArchitraveCapitalType = ARCH_CAPITAL_SQUARE_ONSIDE |\
		 iArchitraveCapitalType = ARCH_CAPITAL_SQUARE_NEXTSIDE) then

		put -_trimThick,	-0.001,		1,
			-_trimThick,	-0.2,		1,
			0.01,			-0.2,		1,
			0.06,			0,			1,
			-_trimThick,	-0.001,		-1
	endif

	if	(iArchitraveCapitalType = ARCH_CAPITAL_DECOR_ONSIDE |\
		 iArchitraveCapitalType = ARCH_CAPITAL_DECOR_NEXTSIDE) then

		put	-_trimThick,		-0.001,				1,
		  	-_trimThick,		-0.2105623924385,	1,
		  	0.0002225047733932,	-0.2105623924385,	1,
		  	0.02569480801934,	-0.2147356031753,	900,
		  	0,					-66.87864346571,	4001,
		 	0.01953034376379,	-0.1896706216084,	1,
		  	0.01364444354641,	-0.1731057357603,	900,
		  	0,					71.90421043734,		4001,
		  	0.03121820560956,	-0.1726561231749,	1,
		  	0.03757481483445,	-0.1726166802041,	1,
		  	0.02760021831745,	-0.1627083807783,	1,
		  	0.04641522481362,	-0.1412622935953,	900,
		  	0,					-93.75626129549,	4001,
		 	0.026247820758,		-0.1210827262419,	1,
		 	0.0606554624785,	-0.09478132287652,	1,
		 	0.05486053259315,	-0.0887335580581,	1,
		 	0.04784928296197,	-0.0680955002196,	900,
		  	0,					127.355665002,		4001,
			0.06,				-0.05,				1,
			0.07,				-0.05,				1,
			0.07,				0,					1,
			0,					0,					1,
			_trimThick,			-0.001,				-1
	endif

	if iArchitraveCapitalType = 0 then
		put	-_trimThick,		-0.003,				1,
			-_trimThick,		-0.141,				1,
			0,					-0.141,				1,
			-0.008015410958904,	-0.1133424657534,	900,
			0,					60.4,				4001,
			0.02,				-0.12,				1,
			0.01899107142857,	-0.1045,			900,
			0,					172.5514951168,		4001,
			0.02,				-0.089,				1,
			0.08881341911765,	-0.08749908088235,	900,
			0,					-44.8,				4001,
			0.039,				-0.04,				1,
			0.039,				0,					1,
			0,					0,					1,
			-_trimThick,		-0.003,				-1
	endif

	if nsp then
		extrude nsp/3, 0, 0, _capitalLength, 1+2+4+16+32,
			get(nsp)
	endif

	roty 90
	base
	vert 0,0,0
	vert 0.1,0,0
	vert 0,0.1,0
	vert 0,0,0.1
	coor 258,-1,-2,-3,-4
	body -1
	del 1

return


100:
! ==============================================================================
!	Cutting Corner Column
! ==============================================================================

mulz -1
rotx -90


! Draw Right Column ------------------------------------------------------------

if bRightCornerFunction & idxBoardEndRevealRight >= idxR then
	add rightRevealPnts[idxR][1], rightRevealPnts[idxR][2],0
	if bMirrorRight then muly -1

	px1		= px1R
	px2		= px2R
	px3		= px3R
	pxFrame	= pxFrameR

	cutpolya 4, 1, 0,
		px1,			-gs_cc_pr,				15,
		px2 - pxFrame,	-gs_cc_pr,				15,
		px2 - pxFrame,	-gs_cc_pr + gs_cc_thk,	15,
		px3,			-gs_cc_pr + gs_cc_thk,	15

	numCutsCornerColumn = numCutsCornerColumn + 1

	del bMirrorRight + 1
endif


! Draw Left Column -------------------------------------------------------------

if bLeftCornerFunction & idxBoardEndRevealLeft >= idxL then
	add leftRevealPnts[idxL][1], leftRevealPnts[idxL][2],0
	if bMirrorLeft then muly -1
	add offsLeftX, offsLeftY, 0
	mulx -1

	px1		= px1L
	px2		= px2L
	px3		= px3L
	pxFrame	= pxFrameL

	cutpolya 4, 1, 0,
		px1,			-gs_cc_pr,				15,
		px2 - pxFrame,	-gs_cc_pr,				15,
		px2 - pxFrame,	-gs_cc_pr + gs_cc_thk,	15,
		px3,			-gs_cc_pr + gs_cc_thk,	15

	numCutsCornerColumn = numCutsCornerColumn + 1

	del bMirrorLeft + 3
endif

del 2

return


! ==============================================================================
! Arch Segmentation
! ------------------------------------------------------------------------------
! Input parameters:
!	alfaStart:		Start angle (angle)
!	alfaEnd:		End angle (angle)
!	arcRadius:		Arc radius (length)
!	bMiddlePoints:	Generate middle points (0 / 1)
!	firstStatus:	Status of the first segment (integer)
!	midStatus:		Status of the middle segments (integer)
!	lastStatus:		Status of the last segment (integer)
! ==============================================================================

110:
	if not(wallIsLeft) then
		alfaStart = 180 - alfaStart
		alfaEnd = 180 - alfaEnd
	endif
	segmentAngle = 360 / WALL_RESOL


	! --- Point at Start Angle ---
	if WIDO_REVEAL_SIDE then
		if SYMB_ROTANGLE < EPS then
			difAngle = (AC_Hole_Position_Angle + alfaStart) mod segmentAngle
		else
			difAngle = -(AC_Hole_Position_Angle - 180 - alfaStart) mod segmentAngle
		endif
	else
		if SYMB_ROTANGLE < EPS then
			difAngle = -(AC_Hole_Position_Angle - alfaStart + 180) mod segmentAngle
		else
			difAngle = (AC_Hole_Position_Angle + alfaStart) mod segmentAngle
		endif
	endif

	difAngle2 = difAngle
	if abs(difAngle) > segmentAngle / 2 then difAngle = -segmentAngle / 2 + abs(difAngle mod (segmentAngle / 2))

	segmentR = arcRadius / cos(difAngle)
	put segmentR * sin(alfaStart), -segmentR * cos(alfaStart) + WOD, firstStatus

	if bMiddlePoints then
		! --- Middle Points ---
		segmentR = arcRadius / cos(segmentAngle / 2)

		if alfaStart > alfaEnd then
			alfaActual = alfaStart - difAngle2 + segmentAngle / 2

			if alfaActual > alfaStart then alfaActual = alfaActual - segmentAngle
			if alfaActual > alfaStart then alfaActual = alfaActual - segmentAngle

			if alfaActual < alfaEnd then alfaActual = alfaActual + segmentAngle

			if alfaActual < alfaStart & alfaActual > alfaEnd then
				do
					put segmentR * sin(alfaActual), -segmentR * cos(alfaActual) + WOD, midStatus

					alfaActual = alfaActual - segmentAngle

				while alfaActual > alfaEnd
			endif
		else
			alfaActual = alfaStart - difAngle2 + segmentAngle / 2

			if alfaActual < alfaStart then alfaActual = alfaActual + segmentAngle
			if alfaActual > alfaEnd then alfaActual = alfaActual - segmentAngle

			if alfaActual > alfaStart & alfaActual < alfaEnd then
				do
					put segmentR * sin(alfaActual), -segmentR * cos(alfaActual) + WOD, midStatus

					alfaActual = alfaActual + segmentAngle
				while alfaActual < alfaEnd
			endif
		endif
	endif


	! --- Point at End Angle ---
	if WIDO_REVEAL_SIDE then
		if SYMB_ROTANGLE < EPS then
			difAngle = (AC_Hole_Position_Angle + alfaEnd) mod segmentAngle
		else
			difAngle = -(AC_Hole_Position_Angle + 180 - alfaEnd) mod segmentAngle
		endif
	else
		if SYMB_ROTANGLE < EPS then
			difAngle = -(AC_Hole_Position_Angle - alfaEnd + 180) mod segmentAngle
		else
			difAngle = (AC_Hole_Position_Angle + alfaEnd) mod segmentAngle
		endif
	endif

	if abs(difAngle) > segmentAngle / 2 then difAngle = -segmentAngle / 2 + abs(difAngle mod (segmentAngle / 2))

	segmentR = arcRadius / cos(difAngle)
	put segmentR * sin(alfaEnd), -segmentR * cos(alfaEnd) + WOD, lastStatus

return


"TextCoord_Vert":

!********************** texture coordination, vertical

vert 0, 0, 0
vert 0, 1, 0
vert 1, 0, 0
vert 0, 0, 1
coor 2, -1, -2, -3, -4
body 1

base

return



"TextCoord_Hor":

!********************** texture coordination, horozintal

rotz 90
if not(curvedWall) then
	vert 0, 0, 0
	vert 0, 1, 0
	vert 1, 0, 0
	vert 0, 0, 1
	coor 2, -1, -2, -3, -4
else
	addz -wod
	vert 0, 0, 0
	vert 0, 1, 0
	vert 0, 0, 1
	vert 1, 0, 0
	coor 3, -1, -2, -3, -4
	del 1
endif
body 1
del 1

base

return


]]>
</Script_3D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_2D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
! Contact person: <NJ>

! ==============================================================================
! This macro draws the Casing
! ------------------------------------------------------------------------------
! Input parameters:
! Geometry ---------------------------------------------------------------------
!	A:						wallhole width (length) (Obsolete)
!	refWidth:				reference width in curved walls (length)
!	leftWidth:				wallhole's side distance from the origin at the left side (length)
!	rightWidth:				wallhole's side distance from the origin at the right side (length)
! Functions --------------------------------------------------------------------
!	gs_IsCurved:			Does the window follow the curvature of the wall? (0 / 1)
!	bParalellInCurvedWalls:	is the wallhole parallel in curved walls (0 / 1)
!	bShowEdgeHotspots:		Show hotspots at jamb extensions inner edge - CHE request (0 / 1)
! Reveal -----------------------------------------------------------------------
!	iRevealType:
!	gs_reveal_left_angle:
!	gs_reveal_right_angle:
! Corner Function --------------------------------------------------------------
!	bLeftCornerFunction:		Turn macro in Corner Window mode at the left side (0 / 1)
!	leftCornerAngle:		Angle between connected walls in case of Corner Window (angle)
!	leftConnWallThk:		Thickness of the connected wall in case of Corner Window (length)
!	bRightCornerFunction:	Turn macro in Corner Window mode at the right side (0 / 1)
!	rightCornerAngle:		Angle between connected walls in case of Corner Window (angle)
!	rightConnWallThk:		Thickness of the connected wall in case of Corner Window (length)
! Oversize ---------------------------------------------------------------------
!	gs_left_oversize:		Left opening oversize (length)
!	gs_right_oversize:		Right opening oversize (length)
! Casing -----------------------------------------------------------------------
!	gs_trim_inside:
!	gs_trim_outside:
!	gs_trim_width_in:		Width of inside Trim. (length)
!	gs_trim_width_out:		Width of outside Trim. (length)
!	gs_trim_offs_in:		Offset of Casing inside. (length)
!	gs_trim_offs_out:		Offset of Casing outside. (length)
!	gs_trim_thk_in:			Thickness of inside Trim. (length)
!	gs_trim_thk_out:		Thickness of outside Trim. (length)
!	gs_tw_left_in:			Width of inside casing on the left (length)
!	gs_tw_right_in:			Width of inside casing on the right (length)
!	gs_tw_left_out:			Width of outside casing on the left (length)
!	gs_tw_right_out:		Width of outside casing on the right (length)
! Sill -------------------------------------------------------------------------
!	bWindowSymbolAtMiddle:	Is the window symbol appears always on the middle of the wall (CHI special) (0 / 1)
! 2D Representation ------------------------------------------------------------
!	lod2D_Casing:			Level of detail. (integer, 0..1)
!	gs_pen_2D:				Cotour pen of the Trim, Sill and Board. (pen)
!	gs_trim_pen_cont:		Cotour pen of the cutted Trim.
!								If it is zero then gs_pen_2D defines the cutted contour pen. (pen)
!	gs_bFills:				Use fills (boolean)
!	gs_wallhole_fill:		Type of the fill on the Sill and Board. (fill type)
!	gs_wallhole_pen_fg:		Fill pen on the Sill and Board. (pen)
!	gs_wallhole_pen_bg:		Fill background pen on the Sill and Board. (pen)
!	gs_trim_fill_in:		Type of the fill on the inside Trim. (fill type)
!	gs_trim_pen_fg_in:		Fill pen on the inside Trim. (pen)
!	gs_trim_pen_bg_in:		Fill background pen on the inside Trim. (pen)
!	gs_trim_fill_out:		Type of the fill on the outside Trim. (fill type)
!	gs_trim_pen_fg_out:		Fill pen on the outside Trim. (pen)
!	gs_trim_pen_bg_out:		Fill background pen on the outside Trim. (pen)
! Ganging ----------------------------------------------------------------------
!	gs_stack_left:			Align to door/window on left side (0 / 1)
!	gs_stack_right:			Align to door/window on right side (0 / 1)
!	gs_stack_bottom:		Align to door/window on bottom side (0 / 1)
!
! Related Global Variables:
!	GLOB_SCRIPT_TYPE
!	GLOB_CONTEXT
!	WALL_THICKNESS
!	WALL_INCL
!	WALL_SECT_PEN
!	WIDO_FRAME_THICKNESS
!	WIDO_SILL
!	WIDO_ORIG_DIST
!	WIDO_REVEAL_SIDE
!	SYMB_MIRRORED
!	SYMB_ROTANGLE
!
! Hotspot IDs:
!	10010:		Outside Trim's left inner
!	10011:		Outside Trim's right inner
!	10012:		Inside Trim's left inner
!	10013:		Inside Trim's right inner
!
!	10020:		Outside Wall Contour left
!	10021:		Outside Wall Contour right
!	10022:		Inside Wall Contour left
!	10023:		Inside Wall Contour right
!
!	10030:		Outside Trim's left outer
!	10031:		Outside Trim's right outer
!	10032:		Inside Trim's left outer
!	10033:		Inside Trim's right outer
! ==============================================================================


! ==============================================================================
! Showing then unID's of hotspots
!
!
! ==============================================================================


if lod2D_Casing = 0 then end
if (bInsideCasingNotAvailableByReveal |\
	bInsideCasingNotAvailableByWallType |\
	bInsideCasingNotAvailableByFrameStyle) then
	bDrawInsideTrim  = 0
endif
if (bOutsideCasingNotAvailableByReveal |\
	bOutsideCasingNotAvailableByFrameStyle) then
	bDrawOutsideTrim = 0
endif
if not(bDrawInsideTrim | bDrawOutsideTrim) then end

! Save the current parameter buffer ============================================

dim savedQueueValues[]
call "SaveQueue" parameters returned_parameters savedQueueValues


if gs_trim_wallhole_pen_fg_in <= 0 then
	gs_trim_bFills_in			= gs_bFills
	gs_trim_wallhole_pen_fg_in	= gs_wallhole_pen_fg
	gs_trim_wallhole_pen_bg_in	= gs_wallhole_pen_bg

	gs_trim_wallhole_pen_sl_fg_in	= gs_wallhole_pen_sl_fg
	gs_trim_wallhole_pen_sl_bg_in	= gs_wallhole_pen_sl_bg
endif
if bPShapedLeftOpening | bPShapedRightOpening then
	gs_trim_wallhole_fill_in		= gs_wallhole_fill_sl
else
	gs_trim_wallhole_fill_in		= gs_wallhole_fill
endif

if gs_trim_wallhole_pen_fg_out <= 0 then
	gs_trim_bFills_out			= gs_bFills
	gs_trim_wallhole_pen_fg_out	= gs_wallhole_pen_fg
	gs_trim_wallhole_pen_bg_out	= gs_wallhole_pen_bg

	gs_trim_wallhole_pen_sl_fg_out	= gs_wallhole_pen_sl_fg
	gs_trim_wallhole_pen_sl_bg_out	= gs_wallhole_pen_sl_bg
endif
if bPShapedLeftOpening | bPShapedRightOpening then
	gs_trim_wallhole_fill_out		= gs_wallhole_fill_sl
else
	gs_trim_wallhole_fill_out		= gs_wallhole_fill
endif

if not(gs_trim_bFills_in)  then gs_trim_wallhole_fill_in  = 0
if not(gs_trim_bFills_out) then gs_trim_wallhole_fill_out = 0



gs_trim_pen_cont_out	= gs_trim_pen_cont
gs_trim_pen_cont_in		= gs_trim_pen_cont
line_type 1

if WIDO_REVEAL_SIDE then
	add2 0,-WIDO_FRAME_THICKNESS
else
	mul2 1,-1
endif

! ===== Handling 2D Detail Levels =====

if lod2D_Casing = 0 then
	bDrawOutsideTrim = 0
	bDrawInsideTrim  = 0
endif


if gs_stack_left then
	overSizeLeft = gs_left_oversize
	widoLeftJamb = 0
endif

if gs_stack_right then
	overSizeRight = gs_right_oversize
	widoRightJamb = 0
endif

if gs_trim_show_cover_in then
	gs_trim_jambext_nosing_in = 0
else
	gs_trim_thk_in = gs_trim_jambext_nosing_in
	gs_trim_offs_in = 0
endif
if gs_trim_show_cover_out then
	gs_trim_jambext_nosing_out = 0
else
	gs_trim_thk_out = gs_trim_jambext_nosing_out
	gs_trim_offs_out = 0
endif

trthL = gs_trim_thk_in / cos(trinfiL - gi1L)
trthR = gs_trim_thk_in / sin(90 - trinfiR - gi1R)

! ==============================================================================
!	Open PolyOperations Add-on Channel
! ==============================================================================
if bTShapedOpening & curvedWall & (bDrawInsideTrim | bDrawOutsideTrim) then
	ch = INITADDONSCOPE ("PolyOperations", "", "")

	PREPAREFUNCTION ch, "CreateContainer", "mySourceContainer", ""
	PREPAREFUNCTION ch, "CreateContainer", "myDestinationContainer", ""

	PREPAREFUNCTION ch, "SetSourceContainer",		"mySourceContainer", ""
	PREPAREFUNCTION ch, "SetDestinationContainer",	"myDestinationContainer", ""
endif


! ==============================================================================
!	Draw Inside Casing's Background Fill
! ==============================================================================

if bDrawInsideCasingFill & bDrawInsideTrim & isWindow & not(gs_stack_bottom) then

	set fill gs_trim_wallhole_fill_in
	line_property 0
	line_type 1
	pen gs_pen_2D

	if not(curvedWall) then
		if bLeftCornerFunction then
			bpx6 = leftRevealPnts[idxBoardEndRevealLeft][1] + gs_trim_thk_in * lx
			bpy6 = leftRevealPnts[idxBoardEndRevealLeft][2] + gs_trim_thk_in
		else
			if bInclinedWall then
				if gs_stack_left then
					bpx6 = leftRevealPnts[idxBoardEndRevealLeft][1]
					bpy6 = leftRevealPnts[idxBoardEndRevealLeft][2] + gs_trim_thk_in / incH
				else
					bpx6 = leftRevealPnts[idxBoardEndRevealLeft][1] + trin2L * incH - gs_trim_offs_in - trthL * sin(trinfiL)
!					bpy6 = leftRevealPnts[idxBoardEndRevealLeft][2] + (gs_trim_width_in - gs_trim_offs_in) * incV + (gs_trim_thk_in / incH*0 + trthL * cos(trinfiL)) * not(gs_trim_atframe_in)
					bpx60 = leftRevealPnts[idxBoardEndRevealLeft][1] + trin2L * incH - gs_trim_offs_in
					bpy6 = WALL_THICKNESS - WIDO_SILL + incX * bpx60 + trthL * cos(trinfiL)
				endif
			else
				bpx6 = leftRevealPnts[idxBoardEndRevealLeft][1] + not(gs_stack_left) * (trinL - gs_trim_offs_in - gs_trim_thk_in * tan(trinfiL) * not(gs_trim_atframe_in))
				bpy6 = leftRevealPnts[idxBoardEndRevealLeft][2] + gs_trim_thk_in * not(gs_trim_atframe_in)
			endif
		endif

		if bRightCornerFunction then
			bpx7 = rightRevealPnts[idxBoardEndRevealRight][1] - gs_trim_thk_in * rx
			bpy7 = rightRevealPnts[idxBoardEndRevealRight][2] + gs_trim_thk_in
		else
			if bInclinedWall then
				if gs_stack_right then
					bpx7 = rightRevealPnts[idxBoardEndRevealRight][1]
					bpy7 = rightRevealPnts[idxBoardEndRevealRight][2] + gs_trim_thk_in / incH
				else
					bpx7 = rightRevealPnts[idxBoardEndRevealRight][1] - trin2R * incH + gs_trim_offs_in + trthR * sin(trinfiR)	!- gs_trim_width_in + gs_trim_offs_in
!					bpy7 = rightRevealPnts[idxBoardEndRevealRight][2] - (gs_trim_width_in - gs_trim_offs_in) * incV + (gs_trim_thk_in / incH*0 + trthR * cos(trinfiR)) * not(gs_trim_atframe_in)
					bpx70 = rightRevealPnts[idxBoardEndRevealRight][1] - tolerOffsetRightIn + gs_trim_width_in*0 - trin2R * incH + gs_trim_offs_in
					bpy7 = WALL_THICKNESS - WIDO_SILL + incX * bpx70 + trthR * cos(trinfiR)
				endif
			else
				bpx7 = rightRevealPnts[idxBoardEndRevealRight][1] - not(gs_stack_right) * (trinR - gs_trim_offs_in - gs_trim_thk_in * tan(trinfiR) * not(gs_trim_atframe_in))
				bpy7 = rightRevealPnts[idxBoardEndRevealRight][2] + gs_trim_thk_in * not(gs_trim_atframe_in)
			endif
		endif

	else
		if wallIsLeft then
			alfaL = -atn((-leftRevealPnts[idxBoardEndRevealLeft-1][1])  / (WOD - WIDO_FRAME_THICKNESS))
			alfaR =  atn((rightRevealPnts[idxBoardEndRevealRight-1][1]) / (WOD - WIDO_FRAME_THICKNESS))
		else
			alfaL = -atn((-leftRevealPnts[idxBoardEndRevealLeft-1][1])  / WOD)
			alfaR =  atn((rightRevealPnts[idxBoardEndRevealRight-1][1]) / WOD)
		endif

		if gs_stack_left then
			bpx6 = leftRevealPnts[idxBoardEndRevealLeft][1] - gs_trim_thk_in * sin(alfaL)
			bpy6 = leftRevealPnts[idxBoardEndRevealLeft][2] + gs_trim_thk_in * cos(alfaL)
		else
			if bParalellInCurvedWalls then
				bpx6 = leftRevealPnts[idxBoardEndRevealLeft][1] + (gs_trim_width_in - gs_trim_offs_in)
				bpy6 = -signWallIsLeft * sqr((radBoard - signWallIsLeft * gs_trim_thk_in)^2 - bpx6^2) + WOD
			else
				x = leftRevealPnts[idxBoardEndRevealLeft][1]
				y = leftRevealPnts[idxBoardEndRevealLeft][2]
				alpha = (gs_trim_width_in - gs_trim_offs_in) * ArcLengthBoardToAngle
				gosub 1000
				bpx6 = x - gs_trim_thk_in * sin(alfaL)
				bpy6 = y + gs_trim_thk_in * cos(alfaL)
			endif
		endif

		if gs_stack_right then
			bpx7 = rightRevealPnts[idxBoardEndRevealRight][1] - gs_trim_thk_in * sin(alfaR)
			bpy7 = rightRevealPnts[idxBoardEndRevealRight][2] + gs_trim_thk_in * cos(alfaR)
		else
			if bParalellInCurvedWalls then
				bpx7 = rightRevealPnts[idxBoardEndRevealRight][1] - (gs_trim_width_in - gs_trim_offs_in)
				bpy7 = -signWallIsLeft * sqr((radBoard - signWallIsLeft * gs_trim_thk_in)^2 - bpx7^2) + WOD
			else
				x = rightRevealPnts[idxBoardEndRevealRight][1]
				y = rightRevealPnts[idxBoardEndRevealRight][2]
				alpha = -(gs_trim_width_in - gs_trim_offs_in) * ArcLengthBoardToAngle
				gosub 1000
				bpx7 = x - gs_trim_thk_in * sin(alfaR)
				bpy7 = y + gs_trim_thk_in * cos(alfaR)
			endif
		endif
	endif

	bCurvedAtWindowFrame	= (curvedWall & gs_IsCurved)

	put 0,WOD,900,
		leftRevealPnts[idxBoardEndRevealLeft - 1][1],	leftRevealPnts[idxBoardEndRevealLeft - 1][2],	0,
		leftRevealPnts[idxBoardEndRevealLeft][1],		leftRevealPnts[idxBoardEndRevealLeft][2],		0,
		bpx6,											bpy6,											0,
		bpx7,											bpy7,											3000 * curvedWall,
		rightRevealPnts[idxBoardEndRevealRight][1],		rightRevealPnts[idxBoardEndRevealRight][2],		0,
		rightRevealPnts[idxBoardEndRevealRight - 1][1],	rightRevealPnts[idxBoardEndRevealRight - 1][2],	0,
		leftRevealPnts[idxBoardEndRevealLeft - 1][1],	leftRevealPnts[idxBoardEndRevealLeft - 1][2],	3000 * (bCurvedAtWindowFrame)

	poly2_b nsp/3, 2+4+64, gs_trim_wallhole_pen_fg_in, gs_trim_wallhole_pen_bg_in,
		get(nsp)

	if not(gs_trim_atframe_in) & not(gs_board_inside) then
		if curvedWall then
			R = sqr(bpx6^2 + (bpy6 - WOD)^2)

			vx = bpx6
			vy = bpy6 - WOD
			gosub 103	! Direction Angle
			alpha = angle

			vx = bpx7
			vy = bpy7 - WOD
			gosub 103	! Direction Angle
			beta = angle

			if abs(alpha - beta) > EPS then
				arc2 0,WOD, R, min(alpha,beta), max(alpha,beta)
			endif

			if bLineCasingOffset & gs_trim_offs_in > eps then
				R = sqr(bpx6^2 + (bpy6 - gs_trim_thk_in - WOD)^2)

				vx = bpx6
				vy = bpy6 - gs_trim_thk_in - WOD
				gosub 103	! Direction Angle
				alpha = angle

				vx = bpx7
				vy = bpy7 - gs_trim_thk_in - WOD
				gosub 103	! Direction Angle
				beta = angle

				if abs(alpha - beta) > EPS then
					arc2 0,WOD, R, min(alpha,beta), max(alpha,beta)
				endif

			endif
		else
			line2 bpx6, bpy6, bpx7, bpy7

			if bLineCasingOffset & gs_trim_offs_in > eps then
				line2 bpx6, bpy6 - gs_trim_thk_in, bpx7, bpy7 - gs_trim_thk_in
			endif
		endif
	endif
endif


! ==============================================================================
!	Draw Outside Casing's Background Fill
! ==============================================================================

if bDrawOutsideCasingFill & bDrawOutsideTrim & isWindow & not(gs_stack_bottom) then
	set fill gs_trim_wallhole_fill_out
	line_property 0
	line_type 1
	pen gs_pen_2D

	if not(curvedWall) then
		if bLeftCornerFunction then
			spx4 = leftRevealPnts[idxSillStartRevealLeft][1] - gs_trim_thk_out * lx
			spy4 = -WIDO_SILL - gs_trim_thk_out * not(gs_trim_atframe_out)
		else
			spx4 = leftRevealPnts[idxSillStartRevealLeft][1] + not(gs_stack_left) * (gs_trim_width_out - gs_trim_offs_out + tolerOffsetLeftOut)
			spy4 = -WIDO_SILL - gs_trim_thk_out * not(gs_trim_atframe_out)
		endif

		if bRightCornerFunction then
			spx5 = rightRevealPnts[idxSillStartRevealRight][1] + gs_trim_thk_out * rx
			spy5 = -WIDO_SILL - gs_trim_thk_out * not(gs_trim_atframe_out)
		else
			spx5 = rightRevealPnts[idxSillStartRevealRight][1] - not(gs_stack_right) * (gs_trim_width_out - gs_trim_offs_out + tolerOffsetRightOut)
			spy5 = -WIDO_SILL - gs_trim_thk_out * not(gs_trim_atframe_out)
		endif
	else
		if wallIsLeft then
			alfaL = -atn((leftWidth)  / (WOD - WIDO_FRAME_THICKNESS))
			alfaR =  atn((rightWidth) / (WOD - WIDO_FRAME_THICKNESS))
		else
			alfaL = -atn((leftWidth)  / WOD)
			alfaR =  atn((rightWidth) / WOD)
		endif

		if gs_stack_left then
			spx4 = leftRevealPnts[idxSillStartRevealLeft][1] + gs_trim_thk_out * sin(alfaL)
			spy4 = leftRevealPnts[idxSillStartRevealLeft][2] - gs_trim_thk_out * cos(alfaL)
		else
			if bParalellInCurvedWalls then
				spx4 = leftRevealPnts[idxSillStartRevealLeft][1] + (gs_trim_width_out - gs_trim_offs_out + tolerOffsetLeftOut)
				spy4 = -signWallIsLeft * sqr((radSill + signWallIsLeft * gs_trim_thk_out)^2 - spx4^2) + WOD
			else
				x = leftRevealPnts[idxSillStartRevealLeft][1]
				y = leftRevealPnts[idxSillStartRevealLeft][2]
				alpha = (gs_trim_width_out - gs_trim_offs_out) * ArcLengthSillToAngle
				gosub 1000
				spx4 = x + gs_trim_thk_out * sin(alfaL)
				spy4 = y - gs_trim_thk_out * cos(alfaL)
			endif
		endif

		if gs_stack_right then
			spx5 = rightRevealPnts[idxSillStartRevealRight][1] + gs_trim_thk_out * sin(alfaR)
			spy5 = rightRevealPnts[idxSillStartRevealRight][2] - gs_trim_thk_out * cos(alfaR)
		else
			if bParalellInCurvedWalls then
				spx5 = rightRevealPnts[idxSillStartRevealRight][1] - (gs_trim_width_out - gs_trim_offs_out + tolerOffsetRightOut)
				spy5 = -signWallIsLeft * sqr((radSill + signWallIsLeft * gs_trim_thk_out)^2 - spx5^2) + WOD
			else
				x = rightRevealPnts[idxSillStartRevealRight][1]
				y = rightRevealPnts[idxSillStartRevealRight][2]
				alpha = -(gs_trim_width_out - gs_trim_offs_out) * ArcLengthSillToAngle
				gosub 1000
				spx5 = x + gs_trim_thk_out * sin(alfaR)
				spy5 = y - gs_trim_thk_out * cos(alfaR)
			endif
		endif
	endif

	bCurvedAtWindowFrame	= (curvedWall & gs_IsCurved)

	put 0,WOD,900
	for i = idxSillEndPlasterLeft to idxSillStartPlasterLeft step -1
		put leftRevealPnts[i][1],	leftRevealPnts[i][2],	0
	next i
	put	spx4,	spy4,	0,
		spx5,	spy5,	3000 * curvedWall

	for i = idxSillStartPlasterRight to idxSillEndPlasterRight
		put rightRevealPnts[i][1],	rightRevealPnts[i][2],	0
	next i
	put leftRevealPnts[idxSillEndPlasterLeft][1],	leftRevealPnts[idxSillEndPlasterLeft][2],	3000 * (bCurvedAtWindowFrame)

	poly2_b nsp/3, 2+4+64, gs_trim_wallhole_pen_fg_out, gs_trim_wallhole_pen_bg_out,
		get(nsp)

	if not(gs_trim_atframe_out) & not(gs_sill_outside) then
		if curvedWall then
			R = sqr(spx4^2 + (spy4 - WOD)^2)

			vx = spx4
			vy = spy4 - WOD
			gosub 103	! Direction Angle
			alpha = angle

			vx = spx5
			vy = spy5 - WOD
			gosub 103	! Direction Angle
			beta = angle

			if abs(alpha - beta) > EPS then
				arc2 0,WOD, R, min(alpha,beta), max(alpha,beta)
			endif
		else
			line2 spx4, spy4, spx5, spy5
		endif
	endif
endif



! ==============================================================================
!	Draw Casing
! ==============================================================================

bShowJambExtHotspots = bShowAddHotspots

spx1 = leftRevealPnts[2][1]
spy1 = leftRevealPnts[2][2] - WOD

spx8 = rightRevealPnts[2][1]
spy8 = rightRevealPnts[2][2] - WOD

bpx3 = leftRevealPnts[idxBoardEndRevealLeft - 1][1]
bpy3 = leftRevealPnts[idxBoardEndRevealLeft - 1][2] - WOD

bpx10 = rightRevealPnts[idxBoardEndRevealRight - 1][1]
bpy10 = rightRevealPnts[idxBoardEndRevealRight - 1][2] - WOD


! ==============================================================================
!	Draw Inside Trim
! ==============================================================================

if bDrawInsideTrim then

	pen gs_trim_pen_cont_in

	line_property 2
	set fill gs_trim_fill_in
	if not(curvedWall) or (curvedWall & gs_trim_atframe_in = 1) then

		! ===== Inside Trim - Straight Walls =====

		py = WALL_THICKNESS - WIDO_SILL

		if not(bLeftCornerFunction) & not(gs_stack_left) then

			if gs_trim_width_in > EPS & bShowJambExtension & gs_trim_atframe_in = 0 then

				! ===== Inside Trim - Straight Walls - Jamb Extension - Left =====

				thk = WIDO_FRAME_THICKNESS

				px1 = leftRevealPnts[idxBoardEndRevealLeft-1][1] + tolerOffsetLeftIn
				px2 = leftRevealPnts[idxBoardEndRevealLeft][1] + tolerOffsetLeftIn - gs_trim_jambext_nosing_in * tan(gs_reveal_left_angle)
				px3 = leftRevealPnts[idxBoardEndRevealLeft][1] + tolerOffsetLeftIn - gs_trim_jambext_nosing_in * tan(gs_reveal_left_angle) + trinL * (1 - bInclinedWall) + trin2L * incH
				px4 = px1 + trinL

				py1 = thk * (gs_sectgar = 0)
				py2 = leftRevealPnts[idxBoardEndRevealLeft][2] + tolerOffsetLeftIn * incV + gs_trim_jambext_nosing_in
				py3 = leftRevealPnts[idxBoardEndRevealLeft][2] + (trin2L + tolerOffsetLeftIn) * incV + gs_trim_jambext_nosing_in
				py4 = thk * (gs_sectgar = 0)

				if bTelescopic then
					py1 = 0
					py4 = 0
					thk = 0
				endif

				! --- Casing Set Back on Sides ---
				if casingSetBackOnSides_in > EPS then
					py1 = py1 + casingSetBackOnSides_in
					py4 = py4 + casingSetBackOnSides_in
				endif

				set fill gs_trim_fill_in
				if py2 > thk & py3 > thk then
					poly2_b 4, 1+2+4+32, gs_trim_pen_fg_in, gs_trim_pen_bg_in,
						px1,	py1,	1 + 32,
						px2,	py2,	1 + 32,
						px3,	py3,	1 + 32,
						px4,	py4,	1 + 32

					if bShowEdgeHotspots | (bShowJambExtHotspots & gs_trim_offs_in > EPS) then
						hotspot2 	px3, py3, 10012
!!!						text2 		px3, py3, "10012"
					endif
				endif

				if bPShapedLeftOpening & not(bDrawLeftSLBoard) then

					! ===== Inside Trim - Straight Walls - Jamb Extension - Lower Left =====

					px1 = px3 + gs_sidelight_WHole_width_left
					px2 = px4 + gs_sidelight_WHole_width_left

					set fill gs_trim_wallhole_fill_in

					poly2_b 4, 1+2+4+64, gs_trim_wallhole_pen_sl_fg_in, gs_trim_wallhole_pen_sl_bg_in,
						px1,	py1,																1,
						px2,	py2 + incX * (gs_sidelight_WHole_width_left + gs_trim_width_in),	((gs_trim_offs_in > EPS) | not(gs_trim_show_cover_in)),
						px3,	py3,																1,
						px4,	py4,																1
				endif
			endif

			if gs_tw_left_in > EPS & gs_trim_thk_in > EPS & gs_trim_show_cover_in & gs_sectgar = 0 then

				! ===== Inside Trim - Straight Walls - Casing - Left =====

				set fill gs_trim_fill_in
				if bInclinedWall & gs_trim_atframe_in = 0 then
					px1 = leftRevealPnts[idxBoardEndRevealLeft][1] + tolerOffsetLeftIn + gs_trim_width_in*0 + trin2L * incH - gs_trim_offs_in
					px2 = px1 - incH * gs_tw_left_in + incV * gs_trim_thk_in
					px3 = px1 - incH * gs_tw_left_in
					px4 = px1 - trthL * sin(trinfiL)

					py1 = py - incX * (-leftRevealPnts[idxBoardEndRevealLeft][1] - tolerOffsetLeftIn - gs_trim_width_in*0 + gs_trim_offs_in) + (trin2L + tolerOffsetLeftIn*0) * incV
					py2 = py1 - incV * gs_tw_left_in + incV * incX * gs_trim_thk_in
					py3 = py1 + gs_trim_thk_in / incH - incV * gs_tw_left_in
					py4 = py1 + gs_trim_thk_in / incH*0 + trthL * cos(trinfiL)

					poly2_b 4, 1+2+4+32, gs_trim_pen_fg_in, gs_trim_pen_bg_in,
						px1,	py1,	1 + 32,
						px2,	py2,	1 + 32,
						px3,	py3,	1 + 32,
						px4,	py4,	1 + 32

					if not(bShowEdgeHotspots) & bShowJambExtHotspots & gs_trim_offs_in < EPS then
						hotspot2 	px4, py4, 10012
!!!						text2 		px4, py4, "10012"
					endif
					if isWindow & bShowAddHotspots then
						hotspot2 	px3, py3, 10032
!!!						text2 		px3, py3, "10032"
					endif
					if not(isWindow) & bShowAddHotspots then
						hotspot2 	px3, py3, 10002
!!!						text2 		px3, py3, "10002"
					endif

					if bPShapedLeftOpening & not(bDrawLeftSLBoard) then
						! ===== Inside Trim - Straight Walls - Casing - Lower Left =====

						px1 = px4 + gs_sidelight_WHole_width_left

						set fill gs_trim_wallhole_fill_in

						poly2_b 4, 1+2+4+64, gs_trim_wallhole_pen_sl_fg_in, gs_trim_wallhole_pen_sl_bg_in,
							px4,	py1,	1,
							px4,	py4,	1,
							px1,	py4 + incX * gs_sidelight_WHole_width_left,	1,
							px1,	py1 + incX * gs_sidelight_WHole_width_left,	gs_trim_offs_in > EPS
					endif
				else
					px1 = leftRevealPnts[idxBoardEndRevealLeft-gs_trim_atframe_in][1] + tolerOffsetLeftIn + trinL - gs_trim_offs_in
					px2 = px1 - gs_tw_left_in
					px3 = px2
					px4 = px1 - gs_trim_thk_in * tan(trinfiL) * not(gs_trim_atframe_in)

					if gs_trim_atframe_in = 0 then
						py1 = WALL_THICKNESS - WIDO_SILL
					else
						py1 = leftRevealPnts[idxBoardEndRevealLeft-1][2]
					endif
					py2 = py1
					py3 = py1 + gs_trim_thk_in
					py4 = py1 + gs_trim_thk_in

					poly2_b 4, 1+2+4+32, gs_trim_pen_fg_in, gs_trim_pen_bg_in,
						px1,	py1,	1 + 32,
						px2,	py2,	1 + 32,
						px3,	py3,	1 + 32,
						px4,	py4,	1 + 32

					if not(bShowEdgeHotspots) & bShowJambExtHotspots & gs_trim_offs_in < EPS then
						hotspot2 	px1, py2, 10012
!!!						text2 		px1, py2, "10012"
					endif
					if isWindow & bShowAddHotspots then
						hotspot2	px3, py3, 10032
!!!						text2 		px3, py3, "10032"
					endif
					if not(isWindow) & bShowAddHotspots then
						hotspot2 	px3, py3, 10002
!!!						text2 		px3, py3, "10002"
					endif

					if bPShapedLeftOpening & not(bDrawLeftSLBoard) then
						! ===== Inside Trim - Straight Walls - Casing - Lower Left =====

						px1 = px4 + gs_sidelight_WHole_width_left

						set fill gs_trim_wallhole_fill_in

						poly2_b 4, 1+2+4+64, gs_trim_wallhole_pen_sl_fg_in, gs_trim_wallhole_pen_sl_bg_in,
							px4,	py1,	1,
							px4,	py4,	1,
							px1,	py4,	1,
							px1,	py1,	gs_trim_offs_in > EPS
					endif
				endif
			endif
		endif

		if not(bRightCornerFunction) & not(gs_stack_right)then

			set fill gs_trim_fill_in
			if gs_trim_width_in > EPS & bShowJambExtension & gs_trim_atframe_in = 0 then

				! ===== Inside Trim - Straight Walls - Jamb Extension - Right =====

				thk = WIDO_FRAME_THICKNESS

				px1 = rightRevealPnts[idxBoardEndRevealRight-1][1] - tolerOffsetRightIn
				px2 = rightRevealPnts[idxBoardEndRevealRight][1] - tolerOffsetRightIn + gs_trim_jambext_nosing_in * tan(gs_reveal_right_angle)
				px3 = rightRevealPnts[idxBoardEndRevealRight][1] - tolerOffsetRightIn + gs_trim_jambext_nosing_in * tan(gs_reveal_right_angle) - trinR * (1 - bInclinedWall) - trin2R * incH
				px4 = px1 - trinR

				py1 = thk * (gs_sectgar = 0)
				py2 = rightRevealPnts[idxBoardEndRevealRight][2] - tolerOffsetRightIn * incV + gs_trim_jambext_nosing_in
				py3 = rightRevealPnts[idxBoardEndRevealRight][2] - (trin2R + tolerOffsetRightIn) * incV + gs_trim_jambext_nosing_in
				py4 = thk * (gs_sectgar = 0)

				if bTelescopic then
					py1 = 0
					py4 = 0
					thk = 0
				endif

				! --- Casing Set Back on Sides ---
				if casingSetBackOnSides_in > EPS then
					py1 = py1 + casingSetBackOnSides_in
					py4 = py4 + casingSetBackOnSides_in
				endif

				if py2 > thk & py3 > thk then
					poly2_b 4, 1+2+4+32, gs_trim_pen_fg_in, gs_trim_pen_bg_in,
						px1,	py1,	1 + 32,
						px2,	py2,	1 + 32,
						px3,	py3,	1 + 32,
						px4,	py4,	1 + 32

					if bShowEdgeHotspots | (bShowJambExtHotspots & gs_trim_offs_in > EPS) then
						hotspot2 	px3, py3, 10013
!!!						text2 		px3, py3, "10013"
					endif
				endif

				if bPShapedRightOpening & not(bDrawRightSLBoard) then

					! ===== Inside Trim - Straight Walls - Jamb Extension - Lower Right =====

					px1 = px3 - gs_sidelight_WHole_width_right
					px2 = px4 - gs_sidelight_WHole_width_right

					set fill gs_trim_wallhole_fill_in

					poly2_b 4, 1+2+4+64, gs_trim_wallhole_pen_sl_fg_in, gs_trim_wallhole_pen_sl_bg_in,
						px1,	py1,																1,
						px2,	py2 - incX * (gs_sidelight_WHole_width_right + gs_trim_width_in),	((gs_trim_offs_in > EPS) | not(gs_trim_show_cover_in)),
						px3,	py3,																1,
						px4,	py4,																1
				endif
			endif

			if gs_tw_right_in > EPS & gs_trim_thk_in > EPS & gs_trim_show_cover_in & gs_sectgar = 0 then

				! ===== Inside Trim - Straight Walls - Casing - Right =====

				set fill gs_trim_fill_in
				if bInclinedWall & gs_trim_atframe_in = 0 then
					px1 = rightRevealPnts[idxBoardEndRevealRight][1] - tolerOffsetRightIn + gs_trim_width_in*0 - trin2R * incH + gs_trim_offs_in
					px2 = px1 + incH * gs_tw_right_in + incV * gs_trim_thk_in
					px3 = px1 + incH * gs_tw_right_in
					px4 = px1 + trthR * sin(trinfiR)

					py1 = py + incX * px1
					py2 = py1 + incV * gs_tw_right_in + incV * incX * gs_trim_thk_in
					py3 = py1 + gs_trim_thk_in / incH + incV * gs_tw_right_in
					py4 = py1 + gs_trim_thk_in / incH*0 + trthR * cos(trinfiR)

					poly2_b 4, 1+2+4+32, gs_trim_pen_fg_in, gs_trim_pen_bg_in,
						px1,	py1,	1 + 32,
						px2,	py2,	1 + 32,
						px3,	py3,	1 + 32,
						px4,	py4,	1 + 32

					if not(bShowEdgeHotspots) & bShowJambExtHotspots & gs_trim_offs_in < EPS then
						hotspot2 	px4, py4, 10013
!!!						text2 		px4, py4, "10013"
					endif
					if isWindow & bShowAddHotspots then
						hotspot2 	px3, py3, 10033
!!!						text2 		px3, py3, "10033"
					endif
					if not(isWindow) & bShowAddHotspots then
						hotspot2 	px3, py3, 10003
!!!						text2 		px3, py3, "10003"
					endif

					if bPShapedRightOpening & not(bDrawRightSLBoard) then
						! ===== Inside Trim - Straight Walls - Casing - Lower Right =====

						px1 = px4 - gs_sidelight_WHole_width_right

						set fill gs_trim_wallhole_fill_in

						poly2_b 4, 1+2+4+64, gs_trim_wallhole_pen_sl_fg_in, gs_trim_wallhole_pen_sl_bg_in,
							px4,	py1,	1,
							px4,	py4,	1,
							px1,	py4 - incX * gs_sidelight_WHole_width_right,	1,
							px1,	py1 - incX * gs_sidelight_WHole_width_right,	gs_trim_offs_in > EPS
					endif
				else
					px1 = rightRevealPnts[idxBoardEndRevealright - gs_trim_atframe_in][1] - tolerOffsetRightIn - trinR + gs_trim_offs_in
					px2 = px1 + gs_tw_right_in
					px3 = px2
					px4 = px1 + gs_trim_thk_in * tan(trinfiR) * not(gs_trim_atframe_in)

					if gs_trim_atframe_in = 0 then
						py1 = WALL_THICKNESS - WIDO_SILL
					else
						py1 = rightRevealPnts[idxBoardEndRevealright-1][2]
					endif
					py2 = py1
					py3 = py1 + gs_trim_thk_in
					py4 = py1 + gs_trim_thk_in

					poly2_b 4, 1+2+4+32, gs_trim_pen_fg_in, gs_trim_pen_bg_in,
						px1,	py1,	1 + 32,
						px2,	py2,	1 + 32,
						px3,	py3,	1 + 32,
						px4,	py4,	1 + 32

					if not(bShowEdgeHotspots) & bShowJambExtHotspots & gs_trim_offs_in < EPS then
						hotspot2 	px1, py2, 10013
!!!						text2 		px1, py2, "10013"
					endif
					if isWindow & bShowAddHotspots then
						hotspot2 	px3, py3, 10033
!!!						text2 		px3, py3, "10033"
					endif
					if not(isWindow) & bShowAddHotspots then
						hotspot2 	px3, py3, 10003
!!!						text2 		px3, py3, "10003"
					endif

					if bPShapedRightOpening & not(bDrawRightSLBoard) then
						! ===== Inside Trim - Straight Walls - Casing - Lower Right =====

						px1 = px4 - gs_sidelight_WHole_width_right

						set fill gs_trim_wallhole_fill_in

						poly2_b 4, 1+2+4+64, gs_trim_wallhole_pen_sl_fg_in, gs_trim_wallhole_pen_sl_bg_in,
							px4,	py1,	1,
							px4,	py4,	1,
							px1,	py4,	1,
							px1,	py1,	gs_trim_offs_in > EPS
					endif
				endif
			endif
		endif

	else	! not(curvedWall)

		if bParalellInCurvedWalls = 0 then	! radial cutting in curved wall
			add2 0,WOD

			iSign = wallIsLeft - not(wallIsLeft)

			LengtToArc = iSign * 180 / rBoard / PI
			alfaTrimOffsetIn	= LengtToArc * gs_trim_offs_in
			alfaTrimWidthIn		= LengtToArc * gs_trim_width_in

			rBoardEdge = rBoard - iSign * gs_trim_thk_in
			rBoardJambNosing = rBoard - iSign * gs_trim_jambext_nosing_in

			if not(gs_stack_left) then

				if wallIsLeft then
					alfaLeftEdge = 180 + abs(alfaLeftIn)
				else
					alfaLeftEdge = -abs(alfaLeftIn)
				endif

				pyy1 = bpy3
				pyy2 = rBoard * cos(alfaLeftEdge)


				if gs_trim_show_cover_in then
					px1 = rBoard * sin(alfaLeftEdge - alfaTrimWidthIn) + tolerOffsetLeftIn
					py1 = ySign * sqr(rBoard^2 - px1^2)
				else
					px1 = rBoardJambNosing * sin(alfaLeftEdge - alfaTrimWidthIn) + tolerOffsetLeftIn
					py1 = ySign * sqr(rBoardJambNosing^2 - px1^2)
				endif

				px2 = rBoard * sin(alfaLeftEdge) + tolerOffsetLeftIn
				py2 = ySign * sqr((rBoard)^2 - px2^2)

				! --- Casing Set Back on Sides ---
				if casingSetBackOnSides_in > EPS then
					bpx3 = bpx3 + casingSetBackOnSides_in / tan(90 - alfaLeftEdge)
					pyy1 = pyy1 + casingSetBackOnSides_in
				endif

				if gs_trim_width_in > EPS & bShowJambExtension & (pyy1 < pyy2) then

					! ===== Inside Trim - Curved Walls - Jamb Extension - Left =====

					put bpx3 + tolerOffsetLeftIn, pyy1, 1 + 32

					if gs_IsCurved then
						xo = 0
						yo = 0
						ro = rBoard + iSign * (WALL_THICKNESS - WIDO_SILL - WIDO_FRAME_THICKNESS)

						x1 = -iSign * gs_trim_width_in * cos(alfaLeftEdge)
						y1 =  iSign * gs_trim_width_in * sin(alfaLeftEdge)

						x2 = x1 + bpx3
						y2 = y1 + bpy3

						gosub 100

						put 0,  0,  901 + 32,
							xb, yb, 3001 + 32
					else

						! --- Casing Set Back on Sides ---
						if casingSetBackOnSides_in > EPS then
							bpy3 = bpy3 + casingSetBackOnSides_in
						endif

						put bpx3 + tolerOffsetLeftIn - iSign * gs_trim_width_in / cos(alfaLeftEdge),
							bpy3, 1 + 32
					endif

					put px1, py1, 1 + 32,
						0,0, 901 + 32,
						px2, py2, 3001 + 32

					poly2_b nsp/3, 1+2+4+32, gs_trim_pen_fg_in, gs_trim_pen_bg_in, get(nsp)

					if bShowEdgeHotspots | (bShowJambExtHotspots & gs_trim_offs_in > EPS) then
						hotspot2 	px1, py1, 10012
!!!						text2 		px1, py1, "10012"
					endif
				endif

				if bPShapedLeftOpening & not(bDrawLeftSLBoard) then
					! ===== Inside Trim - Curved Walls - Jamb Extension - Lower Left =====

					px1LSL = -leftWidth + gs_sidelight_WHole_width_left + gs_trim_width_in
					py1LSL = ABS(SQR(rBoard^2 - px1LSL^2))

					put px1,	py1,	gs_trim_offs_in > EPS,
						0,		0,		900,
						px1LSL, ySign * py1LSL, 3001,
						px1LSL, bpy3,	1,
						bpx3 + tolerOffsetLeftIn - iSign * gs_trim_width_in / cos(alfaLeftEdge), bpy3-1, 1,
						bpx3 + tolerOffsetLeftIn - iSign * gs_trim_width_in / cos(alfaLeftEdge), bpy3, 1

					bCasingIsInside = 1
					line2 px1LSL, bpy3, px1LSL - gs_trim_width_in, bpy3
					gosub "DrawSidelightCasingCurvedWall"
				endif


				if gs_tw_left_in > EPS & gs_trim_thk_in > EPS & gs_trim_show_cover_in then

					! ===== Inside Trim - Curved Walls - Casing - Left =====

					alfaLeftTrimWidth	= LengtToArc * gs_tw_left_in

					if wallIsLeft then
						rot2 180 - abs(alfaLeftIn) + alfaTrimWidthIn - alfaTrimOffsetIn
					else
						rot2 abs(alfaLeftIn) + alfaTrimWidthIn - alfaTrimOffsetIn
					endif

					poly2_b 6, 1+2+4+32, gs_trim_pen_fg_in, gs_trim_pen_bg_in,
						0, rBoardEdge, 1 + 32,
						0, rBoard, 1 + 32,
						0,0, 901 + 32,
						rBoard * sin(alfaLeftTrimWidth), rBoard * cos(alfaLeftTrimWidth), 3001 + 32,
						rBoardEdge * sin(alfaLeftTrimWidth), rBoardEdge * cos(alfaLeftTrimWidth), 1 + 32,
						0, rBoardEdge, 3001 + 32

					if not(bShowEdgeHotspots) & bShowJambExtHotspots & gs_trim_offs_in < EPS then
						hotspot2 	0, rBoardEdge, 10012
!!!						text2 		0, rBoardEdge, "10012"
					endif
					if isWindow & bShowAddHotspots then
						hotspot2 	rBoardEdge * sin(alfaLeftTrimWidth), rBoardEdge * cos(alfaLeftTrimWidth), 10032
!!!						text2 		rBoardEdge * sin(alfaLeftTrimWidth), rBoardEdge * cos(alfaLeftTrimWidth), "10032"
					endif
					if not(isWindow) & bShowAddHotspots then
						hotspot2 	rBoardEdge * sin(alfaLeftTrimWidth), rBoardEdge * cos(alfaLeftTrimWidth), 10002
!!!						text2 		rBoardEdge * sin(alfaLeftTrimWidth), rBoardEdge * cos(alfaLeftTrimWidth), "10002"
					endif

					del 1
				endif

				if bPShapedLeftOpening & not(bDrawLeftSLBoard) then
					! ===== Inside Trim - Curved Walls - Casing - Lower Left =====

					px1	= px1 + iSign * gs_trim_offs_in * cos(alfaLeftEdge)
					py1	= py1 + ySign * gs_trim_offs_in * sin(alfaLeftEdge)
					px2	= px1 - iSign * gs_trim_thk_in * sin(alfaLeftEdge)
					py2	= py1 + ySign * gs_trim_thk_in * cos(alfaLeftEdge)

					px1LSL = -leftWidth + gs_sidelight_WHole_width_left + gs_trim_width_in - gs_trim_offs_in
					py1LSL = SQR(rBoard^2 - px1LSL^2)
					px2LSL = px1LSL
					py2LSL = py1LSL + ySign * gs_trim_thk_in

					put px2, py2,	1,
						0,		0,		900,
						px2LSL, ySign * py2LSL, 3001,
						px1LSL, ySign * py1LSL, gs_trim_offs_in > EPS,
						px1, py1,	3001

					bCasingIsInside = 1
					gosub "DrawSidelightCasingCurvedWall"
				endif
			endif

			if not(gs_stack_right) then

				if wallIsLeft then
					alfaRightEdge = -180 - abs(alfaRightIn)
				else
					alfaRightEdge = abs(alfaRightIn)
				endif

				pyy1 = bpy10
				pyy2 = rBoard * cos(alfaRightEdge)


				if gs_trim_show_cover_in then
					px1 = rBoard * sin(alfaRightEdge + alfaTrimWidthIn)
					py1 = rBoard * cos(alfaRightEdge + alfaTrimWidthIn)
				else
					px1 = rBoardJambNosing * sin(alfaRightEdge + alfaTrimWidthIn)
					py1 = rBoardJambNosing * cos(alfaRightEdge + alfaTrimWidthIn)
				endif

				! --- Casing Set Back on Sides ---
				if casingSetBackOnSides_in > EPS then
					bpx10 = bpx10 + casingSetBackOnSides_in / tan(90 - alfaRightEdge)
					pyy1 = pyy1 + casingSetBackOnSides_in
				endif

				if gs_trim_width_in  > EPS & bShowJambExtension & (pyy1 < pyy2) then

					! ===== Inside Trim - Curved Walls - Jamb Extension - Right =====

					put bpx10,
						pyy1, 1 + 32

					if gs_IsCurved then
						xo = 0
						yo = 0
						ro = rBoard + iSign * (WALL_THICKNESS - WIDO_SILL - WIDO_FRAME_THICKNESS)

						x1 = iSign * gs_trim_width_in * cos(alfaRightEdge)
						y1 = gs_trim_width_in * sin(alfaRightEdge)

						x2 = x1 + bpx10
						y2 = y1 + bpy10

						gosub 100

						put 0,  0,  901 + 32,
							xa, ya, 3001 + 32
					else
						! --- Casing Set Back on Sides ---
						if casingSetBackOnSides_in > EPS then
							bpy10 = bpy10 + casingSetBackOnSides_in
						endif

						put bpx10 + iSign * gs_trim_width_in / cos(alfaRightEdge),
							bpy10, 1 + 32
					endif


					put px1, py1, 1 + 32,
						0,0, 901 + 32,
						rBoard * sin(alfaRightEdge), pyy2, 3001 + 32

					poly2_b nsp/3, 1+2+4+32, gs_trim_pen_fg_in, gs_trim_pen_bg_in, get(nsp)

					if bShowEdgeHotspots | (bShowJambExtHotspots & gs_trim_offs_in > EPS) then
						hotspot2 	px1, py1, 10013
!!!						text2 		px1, py1, "10013"
					endif
				endif

				if bPShapedRightOpening & not(bDrawRightSLBoard) then
					! ===== Inside Trim - Curved Walls - Jamb Extension - Lower Right =====

					px1RSL = rightWidth - gs_sidelight_WHole_width_right - gs_trim_width_in
					py1RSL = SQR(rBoard^2 - px1RSL^2)

					put px1,	py1,	gs_trim_offs_in > EPS,
						0,		0,		900,
						px1RSL, ySign * py1RSL, 3001,
						px1RSL, pyy1,	1,
						bpx10 + iSign * gs_trim_width_in / cos(alfaRightEdge), bpy10 - 1, 1,
						bpx10 + iSign * gs_trim_width_in / cos(alfaRightEdge), bpy10, 1

					bCasingIsInside = 1
					line2 px1RSL, pyy1, px1RSL + gs_trim_width_in, pyy1
					gosub "DrawSidelightCasingCurvedWall"
				endif


				if gs_tw_right_in > EPS & gs_trim_thk_in > EPS & gs_trim_show_cover_in then

					! ===== Inside Trim - Curved Walls - Casing - Rignt =====

					alfaRightTrimWidth	= LengtToArc * gs_tw_right_in

					if wallIsLeft then
						rot2 180 + abs(alfaRightIn) - alfaTrimWidthIn + alfaTrimOffsetIn
					else
						rot2 -abs(alfaRightIn) - alfaTrimWidthIn + alfaTrimOffsetIn
					endif

					poly2_b 6, 1+2+4+32, gs_trim_pen_fg_in, gs_trim_pen_bg_in,
						0, rBoardEdge, 1 + 32,
						0, rBoard, 1 + 32,
						0,0, 901 + 32,
						rBoard * sin(-alfaRightTrimWidth), rBoard * cos(-alfaRightTrimWidth), 3001 + 32,
						rBoardEdge * sin(-alfaRightTrimWidth), rBoardEdge * cos(-alfaRightTrimWidth), 1 + 32,
						0, rBoardEdge, 3001 + 32

					if not(bShowEdgeHotspots) & bShowJambExtHotspots & gs_trim_offs_in < EPS then
						hotspot2 	0, rBoardEdge, 10013
!!!						text2 		0, rBoardEdge, "10013"
					endif
					if isWindow & bShowAddHotspots then
						hotspot2 	rBoardEdge * sin(-alfaRightTrimWidth), rBoardEdge * cos(-alfaRightTrimWidth), 10033
!!!						text2		rBoardEdge * sin(-alfaRightTrimWidth), rBoardEdge * cos(-alfaRightTrimWidth), "10033"
					endif
					if not(isWindow) & bShowAddHotspots then
						hotspot2 	rBoardEdge * sin(-alfaRightTrimWidth), rBoardEdge * cos(-alfaRightTrimWidth), 10003
!!!						text2 		rBoardEdge * sin(-alfaRightTrimWidth), rBoardEdge * cos(-alfaRightTrimWidth), "10003"
					endif

					del 1
				endif

				if bPShapedRightOpening & not(bDrawRightSLBoard) then
					! ===== Inside Trim - Curved Walls - Casing - Lower Right =====

					px1	= px1 - iSign * gs_trim_offs_in * cos(alfaRightEdge)
					py1	= py1 - ySign * gs_trim_offs_in * sin(alfaRightEdge)
					px2	= px1 - iSign * gs_trim_thk_in * sin(alfaRightEdge)
					py2	= py1 + ySign * gs_trim_thk_in * cos(alfaRightEdge)

					px1RSL = rightWidth - gs_sidelight_WHole_width_right - gs_trim_width_in + gs_trim_offs_in
					py1RSL = SQR(rBoard^2 - px1RSL^2)
					px2RSL = px1RSL
					py2RSL = py1RSL + ySign * gs_trim_thk_in

					put px2, py2,	1,
						0,		0,		900,
						px2RSL, ySign * py2RSL, 3001,
						px1RSL, ySign * py1RSL, gs_trim_offs_in > EPS,
						px1, py1,	3001

					bCasingIsInside = 1
					gosub "DrawSidelightCasingCurvedWall"
				endif
			endif

			del 1
		else	! parallel cutting in curved wall
			py = WALL_THICKNESS - WIDO_SILL

			if not(gs_stack_left) then
				if gs_trim_width_in > EPS & bShowJambExtension & gs_trim_atframe_in = 0 then

!					 ===== Inside Trim - Curved Walls - Jamb Extension - Left =====

					thk = WIDO_FRAME_THICKNESS

					px1 = leftRevealPnts[idxBoardEndRevealLeft][1] + tolerOffsetLeftIn
					px2 = px1 + gs_trim_width_in

					py1 = ySign * sqr (rBoard^2 - (px1) ^2) + WOD
					py2 = ySign * sqr (rBoard^2 - (px1 + gs_trim_width_in) ^2) + WOD

					if py1 > WIDO_FRAME_THICKNESS & py2 > WIDO_FRAME_THICKNESS then
						poly2_b 4, 1+2+4+32, gs_trim_pen_fg_in, gs_trim_pen_bg_in,
							px1,	thk,	1 + 32,
							px1,	py1,	1 + 32,
							px2,	py2,	1 + 32,
							px2,	thk,	1 + 32

						if bShowJambExtHotspots & gs_trim_offs_in > EPS then
							hotspot2 	px2, py2, 10012
!!!							text2 		px2, py2, "10012"
						endif
					endif
				endif
			endif

			if not(gs_stack_right) then
				if gs_trim_width_in > EPS & bShowJambExtension & gs_trim_atframe_in = 0 then

!					 ===== Inside Trim - Curved Walls - Jamb Extension - Right =====

					thk = WIDO_FRAME_THICKNESS

					px1 = rightRevealPnts[idxBoardEndRevealRight][1] - tolerOffsetRightIn
					px2 = px1 - gs_trim_width_in

					py1 = ySign * sqr (rBoard^2 - (px1) ^2) + WOD
					py2 = ySign * sqr (rBoard^2 - (px1 - gs_trim_width_in) ^2) + WOD

					if py1 > WIDO_FRAME_THICKNESS & py2 > WIDO_FRAME_THICKNESS then
						poly2_b 4, 1+2+4+32, gs_trim_pen_fg_in, gs_trim_pen_bg_in,
							px1,	thk,	1 + 32,
							px1,	py1,	1 + 32,
							px2,	py2,	1 + 32,
							px2,	thk,	1 + 32

						if bShowJambExtHotspots & gs_trim_offs_in > EPS then
							hotspot2 	px2, py2, 10012
!!!							text2 		px2, py2, "10012"
						endif
					endif
				endif
			endif

			add2 0,WOD

			iSign = wallIsLeft - not(wallIsLeft)

			alfaLeftParallel 	= abs (asn ( (leftRevealPnts[idxBoardEndRevealLeft][1] + gs_trim_width_in) / rBoard))
			alfaRightParallel 	= abs (asn ( (rightRevealPnts[idxBoardEndRevealRight][1] - gs_trim_width_in) / rBoard))

			LengtToArc = iSign * 180 / rBoard / PI
			alfaTrimOffsetIn	= LengtToArc * gs_trim_offs_in
			alfaTrimWidthIn		= LengtToArc * gs_trim_width_in

			rBoardEdge = rBoard - iSign * gs_trim_thk_in

			if not(gs_stack_left) then

				if wallIsLeft then
					alfaLeftEdge = 180 + abs(alfaLeft)
				else
					alfaLeftEdge = -abs(alfaLeft)
				endif

				pyy1 = bpy3
				pyy2 = rBoard * cos(alfaLeftEdge)

				if gs_tw_left_in > EPS & gs_trim_thk_in > EPS then

					! ===== Inside Trim - Curved Walls - Casing - Left =====

					alfaLeftTrimWidth	= LengtToArc * gs_tw_left_in

					if wallIsLeft then
						rot2 180
					else
						rot2 0
					endif

					px1 =  ySign * (leftRevealPnts[idxBoardEndRevealLeft][1] + tolerOffsetLeftIn + gs_trim_width_in - gs_trim_offs_in)
					px2 = -ySign * (rBoard * sin(alfaLeftParallel - ySign * (alfaLeftTrimWidth + alfaTrimOffsetIn)) - tolerOffsetLeftIn)
					px3 = -ySign * (rBoardEdge * sin(alfaLeftParallel - ySign * (alfaLeftTrimWidth + alfaTrimOffsetIn)) - tolerOffsetLeftIn)

					py1 = sqr(rBoard^2 - px1^2)
					py2 = sqr(rBoard^2 - px2^2)
					py3 = sqr(rBoardEdge^2 - px3^2)
					py4 = sqr(rBoardEdge^2 - px1^2)

					poly2_b 6, 1+2+4+32, gs_trim_pen_fg_in, gs_trim_pen_bg_in,
						px1, py4, 1 + 32,
						px1, py1, 1 + 32,
						0, 0, 901 + 32,
						px2, py2, 3001 + 32,
						px3, py3, 1 + 32,
						px1, py4, 3001 + 32

					if bShowJambExtHotspots & gs_trim_offs_in < EPS then
						hotspot2 	px1, py4, 10012
!!!						text2 		px1, py4, "10012"
					endif
					if isWindow & bShowAddHotspots then
						hotspot2 	px2, py2, 10032
!!!						text2 		px2, py2, "10032"
					endif
					if not(isWindow) & bShowAddHotspots then
						hotspot2 	px3, py3, 10002
!!!						text2 		px3, py3, "10002"
					endif

					del 1
				endif
			endif

			if not(gs_stack_right) then

				if wallIsLeft then
					alfaRightEdge = -180 - abs(alfaRight)
				else
					alfaRightEdge = abs(alfaRight)
				endif

				pyy1 = bpy10
				pyy2 = rBoard * cos(alfaRightEdge)

				if gs_tw_right_in > EPS & gs_trim_thk_in > EPS then

					! ===== Inside Trim - Curved Walls - Casing - Rignt =====

					alfaRightTrimWidth	= LengtToArc * gs_tw_right_in

					if wallIsLeft then
						rot2 180
					else
						rot2 0
					endif

					px1 = ySign * (rightRevealPnts[idxBoardEndRevealRight][1] - tolerOffsetRightIn - gs_trim_width_in + gs_trim_offs_in)
					px2 = ySign * (rBoard * sin(alfaRightParallel - ySign * (alfaRightTrimWidth + alfaTrimOffsetIn)) - tolerOffsetRightIn)
					px3 = ySign * (rBoardEdge * sin(alfaRightParallel - ySign * (alfaRightTrimWidth + alfaTrimOffsetIn)) - tolerOffsetRightIn)

					py1 = sqr(rBoard^2 - px1^2)
					py2 = sqr(rBoard^2 - px2^2)
					py3 = sqr(rBoardEdge^2 - px3^2)
					py4 = sqr(rBoardEdge^2 - px1^2)

					poly2_b 6, 1+2+4+32, gs_trim_pen_fg_in, gs_trim_pen_bg_in,
						px1, py4, 1 + 32,
						px1, py1, 1 + 32,
						0, 0, 901 + 32,
						px2, py2, 3001 + 32,
						px3, py3, 1 + 32,
						px1, py4, 3001 + 32

					if bShowJambExtHotspots & gs_trim_offs_in < EPS then
						hotspot2 	px1, py4, 10013
!!!						text2 		px1, py4, "10013"
					endif
					if isWindow & bShowAddHotspots then
						hotspot2 	px2, py2, 10033
!!!						text2 		px2, py2, "10033"
					endif
					if not(isWindow) & bShowAddHotspots then
						hotspot2 	px3, py3, 10003
!!!						text2 		px3, py3, "10003"
					endif

					del 1
				endif
			endif

			del 1
		endif
	endif	! not(curvedWall)

	if gs_stack_left & gs_trim_stack_left = 1 then
		if (tolerOffsStackCasLeftIn + trinL - gs_trim_offs_in) > EPS & gs_trim_thk_in > EPS then

			! ===== Inside Trim - Straight Walls - Casing at Ganging - Left =====
			px1 = leftRevealPnts[idxBoardEndRevealLeft-1][1] + tolerOffsStackCasLeftIn + trinL - gs_trim_offs_in
			px2 = leftRevealPnts[idxBoardEndRevealLeft-1][1]
			px3 = px2 - gs_trim_thk_in * tan(alfaLeft) * ySign

			py1 = leftRevealPnts[idxBoardEndRevealLeft-1][2]
			py2 = py1 + gs_trim_thk_in

			poly2_b 4, 1+2+4+32, gs_trim_pen_fg_in, gs_trim_pen_bg_in,
				px1,	py1,	1 + 32,
				px2,	py1,	0 + 32,
				px3,	py2,	1 + 32,
				px1,	py2,	1 + 32

			if bShowJambExtHotspots & gs_trim_offs_in < EPS then
				hotspot2 	px1, py2, 10012
!!!				text2 		px1, py2, "10012"
			endif
			if isWindow & bShowAddHotspots then
				hotspot2 	px2, py2, 10032
!!!				text2 		px2, py2, "10032"
			endif
			if not(isWindow) & bShowAddHotspots then
				hotspot2 	px2, py2, 10002
!!!				text2 		px2, py2, "10002"
			endif
		endif
	endif

	if gs_stack_right & gs_trim_stack_right = 1 then
		if (tolerOffsStackCasRightIn + trinR - gs_trim_offs_in) > EPS & gs_trim_thk_in > EPS then

			! ===== Inside Trim - Straight Walls - Casing at Ganging - Right =====

			px1 = rightRevealPnts[idxBoardEndRevealRight-1][1] - tolerOffsStackCasRightIn - trinR + gs_trim_offs_in
			px2 = rightRevealPnts[idxBoardEndRevealRight-1][1]
			px3 = px2 + gs_trim_thk_in * tan(alfaRight) * ySign

			py1 = rightRevealPnts[idxBoardEndRevealRight-1][2]
			py2 = py1 + gs_trim_thk_in

			poly2_b 4, 1+2+4+32, gs_trim_pen_fg_in, gs_trim_pen_bg_in,
				px1,	py1,	1 + 32,
				px2,	py1,	0 + 32,
				px3,	py2,	1 + 32,
				px1,	py2,	1 + 32

			if bShowJambExtHotspots & gs_trim_offs_in < EPS then
				hotspot2 	px1, py2, 10013
!!!				text2 		px1, py2, "10013"
			endif
			if isWindow & bShowAddHotspots then
				hotspot2 	px2, py2, 10033
!!!				text2 		px2, py2, "10033"
			endif
			if not(isWindow) & bShowAddHotspots then
				hotspot2 	px2, py2, 10003
!!!				text2 		px2, py2, "10003"
			endif
		endif
	endif
endif


! ==============================================================================
!	Draw Outside Trim
! ==============================================================================

if bDrawOutsideTrim then

	pen gs_trim_pen_cont_out
	set fill gs_trim_fill_out
	line_property 2

	! --- Draw Trim Outside ---
	if not(curvedWall) or (curvedWall & gs_trim_atframe_out =1) then

		if not(bLeftCornerFunction) & not(gs_stack_left) then

!			add2 widoLeftJamb,0

			if gs_trim_width_out > EPS & (((WIDO_SILL > EPS) & (gs_trim_show_cover_out)) | not(gs_trim_show_cover_out)) & bShowJambExtension & gs_trim_atframe_out = 0 then

				! ===== Outside Trim - Straight Walls - Jamb Extension - Left =====

				px1 = leftRevealPnts[idxSillStartRevealLeft][1] + tolerOffsetLeftOut
				px2 = px1 + gs_trim_width_out

				py1 = leftRevealPnts[idxSillStartRevealLeft][2] - gs_trim_jambext_nosing_out
				py2 = leftRevealPnts[idxSillEndRevealLeft][2]

				! --- Casing Set Back on Sides ---
				if casingSetBackOnSides_out > EPS then
					py2 = py2 - casingSetBackOnSides_out
				endif

				poly2_b 4, 1+2+4+32, gs_trim_pen_fg_out, gs_trim_pen_bg_out,
					px1,	py1,	1 + 32,
					px1,	py2,	1 + 32,
					px2,	py2,	1 + 32,
					px2,	py1,	1 + 32

				if bShowEdgeHotspots | (bShowJambExtHotspots & gs_trim_offs_out > EPS) then
					hotspot2 	px2, py1, 10010
!!!					text2 		px2, py1, "10010"
				endif

				if bPShapedLeftOpening & not(bDrawLeftSLSill) then

					! ===== Outside Trim - Straight Walls - Jamb Extension - Lower Left =====

					px1 = px2 + gs_sidelight_WHole_width_left

					set fill gs_trim_wallhole_fill_out

					poly2_b 4, 1+2+4+64, gs_trim_wallhole_pen_sl_fg_out, gs_trim_wallhole_pen_sl_bg_out,
						px2,	py1,	1,
						px2,	py2,	1,
						px1,	py2,	1,
						px1,	py1,	((gs_trim_offs_out > EPS) | not(gs_trim_show_cover_out))
				endif
			endif

			set fill gs_trim_fill_out
			if gs_trim_width_out > EPS & bShowJambExtension & gs_sectgar then

				! ===== Outside Trim - Straight Walls - Jamb Extension - Left - SectionGarage =====

				px1 = leftRevealPnts[idxBoardEndRevealLeft-1][1] + tolerOffsetLeftIn
				px2 = px1 + gs_trim_width_out

				py1 = leftRevealPnts[idxSillEndRevealLeft][2]
				py2 = leftRevealPnts[idxBoardEndRevealLeft][2]

				poly2_b 4, 1+2+4+32, gs_trim_pen_fg_out, gs_trim_pen_bg_out,
					px1,	py1,	1 + 32,
					px1,	py2,	1 + 32,
					px2,	py2,	1 + 32,
					px2,	py1,	1 + 32

				if bShowJambExtHotspots & gs_trim_offs_out > EPS then
					hotspot2 	px2, -WIDO_SILL, 10010
!!!					text2 		px2, -WIDO_SILL, "10010"
				endif
			endif

			if gs_tw_left_out > EPS & gs_trim_thk_out > EPS & gs_trim_show_cover_out then

				! ===== Outside Trim - Straight Walls - Casing - Left =====

				px1 = leftRevealPnts[idxSillStartRevealLeft][1] + tolerOffsetLeftOut + gs_trim_width_out - gs_trim_offs_out
				px2 = px1 - gs_tw_left_out

				if gs_trim_atframe_out = 0 then
					py1 = -WIDO_SILL
					py2 = -WIDO_SILL - gs_trim_thk_out
				else
					py1 = leftRevealPnts[2][2]
					py2 = py1 - gs_trim_thk_out
				endif

				poly2_b 4, 1+2+4+32, gs_trim_pen_fg_out, gs_trim_pen_bg_out,
					px1,	py1,	1 + 32,
					px2,	py1,	1 + 32,
					px2,	py2,	1 + 32,
					px1,	py2,	1 + 32

				if not(bShowEdgeHotspots) & bShowJambExtHotspots & gs_trim_offs_out < EPS then
					hotspot2 	px1, py2, 10010
!!!					text2 		px1, py2, "10010"
				endif
				if isWindow & bShowAddHotspots then
					hotspot2 	px2, py2, 10030
!!!					text2 		px2, py2, "10030"
				endif
				if not(isWindow) & bShowAddHotspots then
					hotspot2 	px2, py2, 10000
!!!					text2 		px2, py2, "10000"
				endif

				if bPShapedLeftOpening & not(bDrawLeftSLSill) then

					! ===== Outside Trim - Straight Walls - Casing - Lower Left =====
					px2 = px1
					px1 = px1 + gs_sidelight_WHole_width_left

					set fill gs_trim_wallhole_fill_out

					poly2_b 4, 1+2+4+64, gs_trim_wallhole_pen_sl_fg_out, gs_trim_wallhole_pen_sl_bg_out,
						px2,	py1,	1,
						px2,	py2,	1,
						px1,	py2,	1,
						px1,	py1,	gs_trim_offs_out > EPS
				endif
			endif

!			del 1
		endif

		set fill gs_trim_fill_out
		if not(bRightCornerFunction) & not(gs_stack_right) then

!			add2 -widoRightJamb,0

			if gs_trim_width_out > EPS & (((WIDO_SILL > EPS) & (gs_trim_show_cover_out)) | not(gs_trim_show_cover_out)) & bShowJambExtension & gs_trim_atframe_out = 0 then

				! ===== Outside Trim - Straight Walls - Jamb Extension - Right =====

				px1 = rightRevealPnts[idxSillStartRevealRight][1] - tolerOffsetRightOut
				px2 = px1 - gs_trim_width_out

				py1 = rightRevealPnts[idxSillStartRevealRight][2] - gs_trim_jambext_nosing_out
				py2 = rightRevealPnts[idxSillEndRevealRight][2]

				! --- Casing Set Back on Sides ---
				if casingSetBackOnSides_out > EPS then
					py2 = py2 - casingSetBackOnSides_out
				endif

				poly2_b 4, 1+2+4+32, gs_trim_pen_fg_out, gs_trim_pen_bg_out,
					px1,	py1,	1 + 32,
					px1,	py2,	1 + 32,
					px2,	py2,	1 + 32,
					px2,	py1,	1 + 32

				if bShowEdgeHotspots | (bShowJambExtHotspots & gs_trim_offs_out > EPS) then
					hotspot2 	px2, py1, 10011
!!!					text2 		px2, py1, "10011"
				endif

				if bPShapedRightOpening & not(bDrawRightSLSill) then

					! ===== Outside Trim - Straight Walls - Jamb Extension - Lower Right =====

					px1 = px2 - gs_sidelight_WHole_width_right

					set fill gs_trim_wallhole_fill_out

					poly2_b 4, 1+2+4+64, gs_trim_wallhole_pen_sl_fg_out, gs_trim_wallhole_pen_sl_bg_out,
						px2,	py1,	1,
						px2,	py2,	1,
						px1,	py2,	1,
						px1,	py1,	((gs_trim_offs_out > EPS) | not(gs_trim_show_cover_out))
				endif
			endif

			set fill gs_trim_fill_out
			if gs_trim_width_out > EPS & bShowJambExtension & gs_sectgar then

				! ===== Outside Trim - Straight Walls - Jamb Extension - Right - SectionGarage =====

				px1 = rightRevealPnts[idxBoardEndRevealright-1][1] - tolerOffsetrightIn
				px2 = px1 - gs_trim_width_out

				py1 = rightRevealPnts[idxSillEndRevealright][2]
				py2 = rightRevealPnts[idxBoardEndRevealright][2]

				poly2_b 4, 1+2+4+32, gs_trim_pen_fg_out, gs_trim_pen_bg_out,
					px1,	py1,	1 + 32,
					px1,	py2,	1 + 32,
					px2,	py2,	1 + 32,
					px2,	py1,	1 + 32

				if bShowJambExtHotspots & gs_trim_offs_out > EPS then
					hotspot2 	px2, -WIDO_SILL, 10010
!!!					text2 		px2, -WIDO_SILL, "10010"
				endif
			endif

			if gs_tw_right_out > EPS & gs_trim_thk_out > EPS & gs_trim_show_cover_out then

				! ===== Outside Trim - Straight Walls - Casing - Right =====

				px1 = rightRevealPnts[2][1] - tolerOffsetRightOut - gs_trim_width_out + gs_trim_offs_out
				px2 = px1 + gs_tw_right_out

				if gs_trim_atframe_out = 0 then
					py1 = -WIDO_SILL
					py2 = -WIDO_SILL - gs_trim_thk_out
				else
					py1 = leftRevealPnts[2][2]
					py2 = leftRevealPnts[2][2] - gs_trim_thk_out
				endif

				poly2_b 4, 1+2+4+32, gs_trim_pen_fg_out, gs_trim_pen_bg_out,
					 px1,	py1,	1 + 32,
					 px2,	py1,	1 + 32,
					 px2,	py2,	1 + 32,
					 px1,	py2,	1 + 32

				if not(bShowEdgeHotspots) & bShowJambExtHotspots & gs_trim_offs_out < EPS then
					hotspot2 	px1, py2, 10011
!!!					text2 		px1, py2, "10011"
				endif
				if isWindow & bShowAddHotspots then
					hotspot2 	px2, py2, 10031
!!!					text2 		px2, py2, "10031"
				endif
				if not(isWindow) & bShowAddHotspots then
					hotspot2 	px2, py2, 10001
!!!					text2 		px2, py2, "10001"
				endif

				if bPShapedRightOpening & not(bDrawRightSLSill) then

					! ===== Outside Trim - Straight Walls - Casing - Lower Right =====

					px2 = px1
					px1 = px1 - gs_sidelight_WHole_width_right

					set fill gs_trim_wallhole_fill_out

					poly2_b 4, 1+2+4+64, gs_trim_wallhole_pen_sl_fg_out, gs_trim_wallhole_pen_sl_bg_out,
						px2,	py1,	1,
						px2,	py2,	1,
						px1,	py2,	1,
						px1,	py1,	gs_trim_offs_out > EPS
				endif
			endif

!			del 1
		endif

	else	! not(curvedWall)

		if bParalellInCurvedWalls = 0 then		! Radial cutting
			! ===== Outside Trim - Curved Walls =====

			add2 0,WOD

			iSign = wallIsLeft - not(wallIsLeft)

			LengtToArc = iSign * 180 / rSill / PI
			alfaTrimOffsetOut	= LengtToArc * gs_trim_offs_out
			alfaTrimWidthOut	= LengtToArc * gs_trim_width_out

			alfaTolerOffsetLeftOut	= LengtToArc * tolerOffsetLeftOut
			alfaTolerOffsetRightOut	= LengtToArc * tolerOffsetRightOut

			rSillEdge = rSill + iSign * gs_trim_thk_out
			rSillJambNosing = rSill + iSign * gs_trim_jambext_nosing_out

			if not(gs_stack_left) then

				if wallIsLeft then
					alfaLeftEdge = 180 + abs(alfaLeft) - iSign * alfaLeftJamb
				else
					alfaLeftEdge = -abs(alfaLeft) - iSign * alfaLeftJamb
				endif

				pyy1 = spy1
				pyy2 = rSill * cos(alfaLeftEdge)

				if gs_trim_show_cover_out then
					px1 = rSill * sin(alfaLeftEdge - alfaTrimWidthOut)
					py1 = rSill * cos(alfaLeftEdge - alfaTrimWidthOut)
				else
					px1 = rSillJambNosing * sin(alfaLeftEdge - alfaTrimWidthOut)
					py1 = rSillJambNosing * cos(alfaLeftEdge - alfaTrimWidthOut)
				endif

				! --- Casing Set Back on Sides ---
				if casingSetBackOnSides_out > EPS then
					spx1 = spx1 - casingSetBackOnSides_out / tan(90 - alfaLeftEdge)
					pyy1 = pyy1 - casingSetBackOnSides_out
				endif

				if gs_trim_width_out > EPS & bShowJambExtension then

					! ===== Outside Trim - Curved Walls - Jamb Extension - Left =====

					put spx1,
						pyy1, 1 + 32

					if gs_IsCurved then
						xo = 0
						yo = 0
						ro = rSill - iSign * WIDO_SILL

						x1 = -iSign * gs_trim_width_out * cos(alfaLeftEdge)
						y1 =  iSign * gs_trim_width_out * sin(alfaLeftEdge)

						x2 = x1 + spx1
						y2 = y1 + spy1

						gosub 100

						put 0,0,901 + 32,
							xb, yb, 3001 + 32
					else

						! --- Casing Set Back on Sides ---
						if casingSetBackOnSides_out > EPS then
							spy1 = spy1 - casingSetBackOnSides_out
						endif

						put spx1 - iSign * gs_trim_width_out / cos(alfaLeftEdge),
							spy1, 1 + 32
					endif

					put px1, py1, 1 + 32,
						0,0, 901 + 32,
						rSill * sin(alfaLeftEdge), pyy2, 3001 + 32

					poly2_b nsp/3, 1+2+4+32, gs_trim_pen_fg_out, gs_trim_pen_bg_out, get(nsp)

					if bShowEdgeHotspots | (bShowJambExtHotspots & gs_trim_offs_out > EPS) then
						hotspot2 	px1, py1, 10010
!!!						text2 		px1, py1, "10010"
					endif
				endif

				if bPShapedLeftOpening & not(bDrawLeftSLSill) then
					! ===== Outside Trim - Curved Walls - Jamb Extension - Lower Left =====

					px1LSL = -leftWidth + gs_reveal_left_sL + gs_sidelight_WHole_width_left + gs_trim_width_out
					py1LSL = ABS(SQR(rSill^2 - px1LSL^2))

					put px1,	py1,	gs_trim_offs_out > EPS,
						0,		0,		900,
						px1LSL, ySign * py1LSL, 3001,
						px1LSL, spy1,	1,
						spx1 - tolerOffsetLeftOut - iSign * gs_trim_width_out / cos(alfaLeftEdge), spy1+1, 1,
						spx1 - tolerOffsetLeftIn - iSign * gs_trim_width_out / cos(alfaLeftEdge), spy1, 1

					bCasingIsInside = 0
					line2 px1LSL, spy1, px1LSL - gs_trim_width_out, spy1
					gosub "DrawSidelightCasingCurvedWall"
				endif


				if gs_tw_left_out > EPS & gs_trim_thk_out > EPS & gs_trim_show_cover_out then

					! ===== Outside Trim - Curved Walls - Casing - Left =====

					alfaLeftTrimWidth	= LengtToArc * gs_tw_left_out

					if wallIsLeft then
						rot2 180 - abs(alfaLeft) + alfaTrimWidthOut - alfaTrimOffsetOut + iSign * alfaLeftJamb
					else
						rot2 abs(alfaLeft) + alfaTrimWidthOut - alfaTrimOffsetOut + iSign * alfaLeftJamb
					endif

					poly2_b 6, 1+2+4+32, gs_trim_pen_fg_out, gs_trim_pen_bg_out,
						0, rSillEdge, 1 + 32,
						0, rSill, 1 + 32,
						0,0, 901 + 32,
						rSill * sin(alfaLeftTrimWidth), rSill * cos(alfaLeftTrimWidth), 3001 + 32,
						rSillEdge * sin(alfaLeftTrimWidth), rSillEdge * cos(alfaLeftTrimWidth), 1 + 32,
						0, rSillEdge, 3001 + 32

					if not(bShowEdgeHotspots) & bShowJambExtHotspots & gs_trim_offs_out < EPS then
						hotspot2 	0, rSillEdge, 10010
!!!						text2 		0, rSillEdge, "10010"
					endif
					if isWindow & bShowAddHotspots then
						hotspot2 	rSillEdge * sin(alfaLeftTrimWidth), rSillEdge * cos(alfaLeftTrimWidth), 10030
!!!						text2 		rSillEdge * sin(alfaLeftTrimWidth), rSillEdge * cos(alfaLeftTrimWidth), "10030"
					endif
					if not(isWindow) & bShowAddHotspots then
						hotspot2 	rSillEdge * sin(alfaLeftTrimWidth), rSillEdge * cos(alfaLeftTrimWidth), 10000
!!!						text2 		rSillEdge * sin(alfaLeftTrimWidth), rSillEdge * cos(alfaLeftTrimWidth), "10000"
					endif

					del 1
				endif

				if bPShapedLeftOpening & not(bDrawLeftSLSill) then
					! ===== Outside Trim - Curved Walls - Casing - Lower Left =====

					px1	= px1 + iSign * gs_trim_offs_out * cos(alfaLeftEdge)
					py1	= py1 + ySign * gs_trim_offs_out * sin(alfaLeftEdge)
					px2	= px1 + iSign * gs_trim_thk_out * sin(alfaLeftEdge)
					py2	= py1 - ySign * gs_trim_thk_out * cos(alfaLeftEdge)

					px1LSL = -leftWidth + gs_reveal_left_sL + gs_sidelight_WHole_width_left + gs_trim_width_out - gs_trim_offs_out
					py1LSL = SQR(rSill^2 - px1LSL^2)
					px2LSL = px1LSL
					py2LSL = py1LSL - ySign * gs_trim_thk_out

					put px2, py2,	1,
						0,		0,		900,
						px2LSL, ySign * py2LSL, 3001,
						px1LSL, ySign * py1LSL, gs_trim_offs_out > EPS,
						px1, py1,	3001

					bCasingIsInside = 0
					gosub "DrawSidelightCasingCurvedWall"
				endif
			endif

			if not(gs_stack_right) then

				if wallIsLeft then
					alfaRightEdge = -180 - abs(alfaRight) + iSign * alfaRightJamb
				else
					alfaRightEdge = abs(alfaRight) + iSign * alfaRightJamb
				endif

				pyy1 = spy8
				pyy2 = rSill * cos(alfaRightEdge)

				if gs_trim_show_cover_out then
					px1 = rSill * sin(alfaRightEdge + alfaTrimWidthOut)
					py1 = rSill * cos(alfaRightEdge + alfaTrimWidthOut)
				else
					px1 = rSillJambNosing * sin(alfaRightEdge + alfaTrimWidthOut)
					py1 = rSillJambNosing * cos(alfaRightEdge + alfaTrimWidthOut)
				endif

				! --- Casing Set Back on Sides ---
				if casingSetBackOnSides_out > EPS then
					spx8 = spx8 - casingSetBackOnSides_out / tan(90 - alfaRightEdge)
					pyy1 = pyy1 - casingSetBackOnSides_out
				endif

				if gs_trim_width_out > EPS & bShowJambExtension then

					! ===== Outside Trim - Curved Walls - Jamb Extension - Right =====

					put spx8,
						pyy1, 1 + 32

					if gs_IsCurved then
						xo = 0
						yo = 0
						ro = rSill - iSign * WIDO_SILL

						x1 = iSign * gs_trim_width_out * cos(alfaRightEdge)
						y1 = gs_trim_width_out * sin(alfaRightEdge)

						x2 = x1 + spx8
						y2 = y1 + spy8

						gosub 100

						put 0,0,901 + 32,
							xa, ya, 3001 + 32
					else

						! --- Casing Set Back on Sides ---
						if casingSetBackOnSides_out > EPS then
							spy8 = spy8 - casingSetBackOnSides_out
						endif

						put spx8 + iSign * gs_trim_width_out / cos(alfaRightEdge),
							spy8, 1 + 32
					endif

					put px1, py1, 1 + 32,
						0,0, 901 + 32,
						rSill * sin(alfaRightEdge), pyy2, 3001 + 32

					poly2_b nsp/3, 1+2+4+32, gs_trim_pen_fg_out, gs_trim_pen_bg_out, get(nsp)

					if bShowEdgeHotspots | (bShowJambExtHotspots & gs_trim_offs_out > EPS) then
						hotspot2 	px1, py1, 10011
!!!						text2 		px1, py1, "10011"
					endif
				endif

				if bPShapedRightOpening & not(bDrawRightSLSill) then
					! ===== Outside Trim - Curved Walls - Jamb Extension - Lower Right =====

					px1RSL = rightWidth - gs_reveal_right_sR - gs_sidelight_WHole_width_right - gs_trim_width_out
					py1RSL = ABS(SQR(rSill^2 - px1RSL^2))

					put px1,	py1,	gs_trim_offs_out > EPS,
						0,		0,		900,
						px1RSL, ySign * py1RSL, 3001,
						px1RSL, spy8,	1,
						spx8 + iSign * gs_trim_width_out / cos(alfaRightEdge), spy8+1, 1,
						spx8 + iSign * gs_trim_width_out / cos(alfaRightEdge), spy8, 1

					bCasingIsInside = 0
					line2 px1RSL, spy8, px1RSL + gs_trim_width_out, spy8
					gosub "DrawSidelightCasingCurvedWall"
				endif


				if gs_tw_right_out > EPS & gs_trim_thk_out > EPS & gs_trim_show_cover_out then

					! ===== Outside Trim - Curved Walls - Casing - Right =====

					alfaRightTrimWidth	= LengtToArc * gs_tw_right_out

					if wallIsLeft then
						rot2 180 + abs(alfaRight) - alfaTrimWidthOut + alfaTrimOffsetOut - iSign * alfaRightJamb
					else
						rot2 -abs(alfaRight) - alfaTrimWidthOut + alfaTrimOffsetOut - iSign * alfaRightJamb
					endif

					poly2_b 6, 1+2+4+32, gs_trim_pen_fg_out, gs_trim_pen_bg_out,
						0, rSillEdge, 1 + 32,
						0, rSill, 1 + 32,
						0,0, 901 + 32,
						rSill * sin(-alfaRightTrimWidth), rSill * cos(-alfaRightTrimWidth), 3001 + 32,
						rSillEdge * sin(-alfaRightTrimWidth), rSillEdge * cos(-alfaRightTrimWidth), 1 + 32,
						0, rSillEdge, 3001 + 32

					if not(bShowEdgeHotspots) & bShowJambExtHotspots & gs_trim_offs_out < EPS then
						hotspot2 	0, rSillEdge, 10011
!!!						text2 		0, rSillEdge, "10011"
					endif
					if isWindow & bShowAddHotspots then
						hotspot2 	rSillEdge * sin(-alfaRightTrimWidth), rSillEdge * cos(-alfaRightTrimWidth), 10031
!!!						text2 		rSillEdge * sin(-alfaRightTrimWidth), rSillEdge * cos(-alfaRightTrimWidth), "10031"
					endif
					if not(isWindow) & bShowAddHotspots then
						hotspot2 	rSillEdge * sin(-alfaRightTrimWidth), rSillEdge * cos(-alfaRightTrimWidth), 10001
!!!						text2 		rSillEdge * sin(-alfaRightTrimWidth), rSillEdge * cos(-alfaRightTrimWidth), "10001"
					endif

					del 1
				endif
				if bPShapedRightOpening & not(bDrawRightSLSill) then
					! ===== Outside Trim - Curved Walls - Casing - Lower Right =====

					px1	= px1 - iSign * gs_trim_offs_out * cos(alfaRightEdge)
					py1	= py1 - ySign * gs_trim_offs_out * sin(alfaRightEdge)
					px2	= px1 + iSign * gs_trim_thk_out * sin(alfaRightEdge)
					py2	= py1 - ySign * gs_trim_thk_out * cos(alfaRightEdge)

					px1RSL = rightWidth - gs_reveal_right_sR - gs_sidelight_WHole_width_right - gs_trim_width_out + gs_trim_offs_out
					py1RSL = SQR(rSill^2 - px1RSL^2)
					px2RSL = px1RSL
					py2RSL = py1RSL - ySign * gs_trim_thk_out

					put px2, py2,	1,
						0,		0,		900,
						px2RSL, ySign * py2RSL, 3001,
						px1RSL, ySign * py1RSL, gs_trim_offs_out > EPS,
						px1, py1,	3001

					bCasingIsInside = 0
					gosub "DrawSidelightCasingCurvedWall"
				endif
			endif

			del 1
		else		! Parallel cutting in curved wall
			if not(gs_stack_left) then

				add2 widoLeftJamb,0

				if gs_trim_width_out > EPS & WIDO_SILL > EPS & bShowJambExtension & gs_trim_atframe_out = 0 then

					! ===== Outside Trim - Straight Walls - Jamb Extension - Left =====

					px1 = -leftWidth
					px2 = px1 + gs_trim_width_out

					py1 = leftRevealPnts[idxSillStartRevealLeft][2]
					py2 = ySign * sqr (rSill^2 - (leftRevealPnts[idxSillStartRevealLeft][1] + gs_trim_width_out) ^2) + WOD

					poly2_b 4, 1+2+4+32, gs_trim_pen_fg_out, gs_trim_pen_bg_out,
						px1,	0,		1 + 32,
						px1,	py1,	1 + 32,
						px2,	py2,	1 + 32,
						px2,	0,		1 + 32

					if bShowJambExtHotspots & gs_trim_offs_out > EPS then
						hotspot2 	px2, -WIDO_SILL, 10010
!!!						text2 		px2, -WIDO_SILL, "10010"
					endif
				endif

				del 1
			endif

			if not(gs_stack_right) then

				add2 -widoRightJamb, 0

				if gs_trim_width_out > EPS & WIDO_SILL > EPS & bShowJambExtension & gs_trim_atframe_out = 0 then

					! ===== Outside Trim - Curved Walls - Jamb Extension - Right =====

					px1 = rightWidth
					px2 = px1 - gs_trim_width_out

					py1 = rightRevealPnts[idxSillStartRevealRight][2]
					py2 = ySign * sqr (rSill^2 - (rightRevealPnts[idxSillStartRevealRight][1] - gs_trim_width_out) ^2) + WOD

					poly2_b 4, 1+2+4+32, gs_trim_pen_fg_out, gs_trim_pen_bg_out,
						px1,	0,		1 + 32,
						px1,	py1,	1 + 32,
						px2,	py2,	1 + 32,
						px2,	0,		1 + 32

					if bShowJambExtHotspots & gs_trim_offs_out > EPS then
						hotspot2 	px2, py2, 10010
!!!						text2 		px2, py2, "10010"
					endif
				endif

				del 1
			endif


			add2 0,WOD

			iSign = wallIsLeft - not(wallIsLeft)

			alfaLeftParallel 	= abs (asn ( (leftRevealPnts[idxSillStartRevealLeft][1] + gs_trim_width_out) / rSill))
			alfaRightParallel 	= abs (asn ( (rightRevealPnts[idxSillStartRevealRight][1] - gs_trim_width_out) / rSill))

			LengtToArc = iSign * 180 / rSill / PI
			alfaTrimOffsetOut	= LengtToArc * gs_trim_offs_out
			alfaTrimWidthOut	= LengtToArc * gs_trim_width_out

			alfaTolerOffsetLeftOut	= LengtToArc * tolerOffsetLeftOut
			alfaTolerOffsetRightOut	= LengtToArc * tolerOffsetRightOut

			rSillEdge = rSill + iSign * gs_trim_thk_out

			if not(gs_stack_left) then

				if wallIsLeft then
					alfaLeftEdge = 180 + abs(alfaLeft) - iSign * alfaLeftJamb
				else
					alfaLeftEdge = -abs(alfaLeft) - iSign * alfaLeftJamb
				endif

				pyy1 = spy1
				pyy2 = rSill * cos(alfaLeftEdge)

				if gs_tw_left_out > EPS & gs_trim_thk_out > EPS then

					! ===== Outside Trim - Curved Walls - Casing - Left =====

					alfaLeftTrimWidth	= LengtToArc * gs_tw_left_out

					if wallIsLeft then
						rot2 180 !- abs(alfaLeft) + alfaTrimWidthOut - alfaTrimOffsetOut + iSign * alfaLeftJamb
					else
						rot2 0	!abs(alfaLeft) + alfaTrimWidthOut - alfaTrimOffsetOut + iSign * alfaLeftJamb
					endif

					px1 = ySign * (leftRevealPnts[idxSillStartRevealLeft][1] + tolerOffsetLeftOut + gs_trim_width_out - gs_trim_offs_out)
					px2 = - ySign * rSill * sin(alfaLeftParallel - ySign * (-alfaTolerOffsetLeftOut + alfaLeftTrimWidth + alfaTrimOffsetOut))
					px3 = - ySign * rSillEdge * sin(alfaLeftParallel - ySign * (-alfaTolerOffsetLeftOut + alfaLeftTrimWidth + alfaTrimOffsetOut))

					py1 = sqr (rSill^2 - px1^2)
					py2 = rSill * cos(alfaLeftParallel - ySign * (-alfaTolerOffsetLeftOut + alfaLeftTrimWidth + alfaTrimOffsetOut))
					py3 = rSillEdge * cos(alfaLeftParallel - ySign * (-alfaTolerOffsetLeftOut + alfaLeftTrimWidth + alfaTrimOffsetOut))
					py4 = sqr (rSillEdge^2 - px1^2)

					poly2_b 6, 1+2+4+32, gs_trim_pen_fg_in, gs_trim_pen_bg_in,
						px1, py4, 1 + 32,
						px1, py1, 1 + 32,
						0, 0, 901 + 32,
						px2, py2, 3001 + 32,
						px3, py3, 1 + 32,
						px1, py4, 3001 + 32

					if bShowJambExtHotspots & gs_trim_offs_out < EPS then
						hotspot2 	px1, py4, 10010
!!!						text2 		px1, py4, "10010"
					endif
					if isWindow & bShowAddHotspots then
						hotspot2 	px2, py2, 10030
!!!						text2 		px2, py2, "10030"
					endif
					if not(isWindow) & bShowAddHotspots then
						hotspot2 	px3, py3, 10000
!!!						text2 		px3, py3, "10000"
					endif

					del 1
				endif
			endif

			if not(gs_stack_right) then

				if wallIsLeft then
					alfaRightEdge = -180 - abs(alfaRight) + iSign * alfaRightJamb
				else
					alfaRightEdge = abs(alfaRight) + iSign * alfaRightJamb
				endif

				pyy1 = spy8
				pyy2 = rSill * cos(alfaRightEdge)

				if gs_tw_right_out > EPS & gs_trim_thk_out > EPS then

					! ===== Outside Trim - Curved Walls - Casing - Right =====

					alfaRightTrimWidth	= LengtToArc * gs_tw_right_out

					if wallIsLeft then
						rot2 180 !+ abs(alfaRight) - alfaTrimWidthOut + alfaTrimOffsetOut - iSign * alfaRightJamb
					else
						rot2 0	!-abs(alfaRight) - alfaTrimWidthOut + alfaTrimOffsetOut - iSign * alfaRightJamb
					endif

					px1 = ySign * (rightRevealPnts[idxSillStartRevealRight][1] - tolerOffsetRightOut - gs_trim_width_out + gs_trim_offs_out)
					px2 = ySign * rSill * sin(alfaRightParallel - ySign * (-alfaTolerOffsetRightOut + alfarightTrimWidth + alfaTrimOffsetOut))
					px3 = ySign * rSillEdge * sin(alfarightParallel - ySign * (-alfaTolerOffsetRightOut + alfarightTrimWidth + alfaTrimOffsetOut))

					py1 = sqr (rSill^2 - px1^2)
					py2 = rSill * cos(alfarightParallel - ySign * (-alfaTolerOffsetRightOut + alfarightTrimWidth + alfaTrimOffsetOut))
					py3 = rSillEdge * cos(alfarightParallel - ySign * (-alfaTolerOffsetRightOut + alfarightTrimWidth + alfaTrimOffsetOut))
					py4 = sqr (rSillEdge^2 - px1^2)

					poly2_b 6, 1+2+4+32, gs_trim_pen_fg_in, gs_trim_pen_bg_in,
						px1, py4, 1 + 32,
						px1, py1, 1 + 32,
						0, 0, 901 + 32,
						px2, py2, 3001 + 32,
						px3, py3, 1 + 32,
						px1, py4, 3001 + 32

					if bShowJambExtHotspots & gs_trim_offs_out < EPS then
						hotspot2 	px1, py4, 10011
!!!						text2 		px1, py4, "10011"
					endif
					if isWindow & bShowAddHotspots then
						hotspot2 	px2, py2, 10031
!!!						text2 		px2, py2, "10031"
					endif
					if not(isWindow) & bShowAddHotspots then
						hotspot2 	px3, py3, 10001
!!!						text2 		px3, py3, "10001"
					endif

					del 1
				endif
			endif

			del 1

		endif

	endif	! not(curvedWall)

	if gs_stack_left then
		if (tolerOffsStackCasLeftOut + trim_offs_out_modify - gs_trim_offs_out) > EPS & gs_trim_thk_out > EPS & gs_trim_stack_left = 1 then

			! ===== Outside Trim - Casing at Ganging - Left =====

			px1 = leftRevealPnts[2][1]  + tolerOffsStackCasLeftOut + trim_offs_out_modify - gs_trim_offs_out
			px2 = leftRevealPnts[2][1]
			px3 = px2 + gs_trim_thk_out * tan(alfaLeft) * ySign

			py1 = leftRevealPnts[2][2]
			py2 = leftRevealPnts[2][2] - gs_trim_thk_out

			poly2_b 4, 1+2+4+32, gs_trim_pen_fg_out, gs_trim_pen_bg_out,
				px1,	py1,	1 + 32,
				px2,	py1,	0 + 32,
				px3,	py2,	1 + 32,
				px1,	py2,	1 + 32

			if bShowJambExtHotspots & gs_trim_offs_out < EPS then
				hotspot2 	px1, py2, 10010
!!!				text2		px1, py2, "10010"
			endif
			if isWindow & bShowAddHotspots then
				hotspot2 	px2, py2, 10030
!!!				text2 		px2, py2, "10030"
			endif
			if not(isWindow) & bShowAddHotspots then
				hotspot2 	px2, py2, 10000
!!!				text2 		px2, py2, "10000"
			endif
		endif
	endif

	if not(bRightCornerFunction) & gs_stack_right then
		if (tolerOffsStackCasRightOut + trim_offs_out_modify - gs_trim_offs_out) > EPS & gs_trim_thk_out > EPS & gs_trim_stack_right = 1 then

			! ===== Outside Trim - Casing at Ganging - Right =====

			px1 = rightRevealPnts[2][1] - tolerOffsStackCasRightOut - trim_offs_out_modify + gs_trim_offs_out
			px2 = rightRevealPnts[2][1]
			px3 = px2 - gs_trim_thk_out * tan(alfaRight) * ySign

			py1 = rightRevealPnts[2][2]
			py2 = rightRevealPnts[2][2] - gs_trim_thk_out

			poly2_b 4, 1+2+4+32, gs_trim_pen_fg_out, gs_trim_pen_bg_out,
				 px1,	py1,	1 + 32,
				 px2,	py1,	0 + 32,
				 px3,	py2,	1 + 32,
				 px1,	py2,	1 + 32

			if bShowJambExtHotspots & gs_trim_offs_out < EPS then
				hotspot2 	px1, py2, 10011
!!!				text2 		px1, py2, "10011"
			endif
			if isWindow & bShowAddHotspots then
				hotspot2 	px2, py2, 10031
!!!				text2 		px2, py2, "10031"
			endif
			if not(isWindow) & bShowAddHotspots then
				hotspot2 	px2, py2, 10001
!!!				text2 		px2, py2, "10001"
			endif
		endif
	endif
endif


! Restore the saved parameter buffer ===========================================

call "LoadQueue" parameters savedQueueValues = savedQueueValues


! ==============================================================================
!	Close PolyOperations Add-on Channel
! ==============================================================================
if bTShapedOpening & curvedWall & (bDrawInsideTrim | bDrawOutsideTrim) then
	CLOSEADDONSCOPE ch
endif



! ==============================================================================
 end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end
! ==============================================================================


! ==============================================================================
! === SUBROUTINES
! ==============================================================================

! ==============================================================================
!		Cross points of circle (xo,yo,ro) and line (x1,y1, x2,y2)
! ------------------------------------------------------------------------------
! Input parameters:
!	xo, yo:		Circle center
!	ro:			Circle radius
!	x1, y1:		Line endpoint 1
!	x2, y2:		Line endpoint 2
! Output parameters:
!	state:		Status (0, 1, 2)
!				  0: No intersection
!				  1: One intersection
!				  2: Two intersections
!	xa, ya:		Cross point 1
!	xb, yb:		Cross point 2
! ==============================================================================

100:
	x1 = x1 - xo
	y1 = y1 - yo

	x2 = x2 - xo
	y2 = y2 - yo

	kf = (y2 - y1) / (x2 - x1)
	ad = 1 + kf * kf
	bd = 2 * y1 * kf - 2 * x1 * kf * kf
	cd = y1 * y1 - 2 * x1 * y1 * kf + x1 * x1 * kf * kf - ro * ro

	if bd * bd - 4 * ad * cd < 0 then
		state = 0
		xa = 0
		ya = 0
		xb = 0
		yb = 0
	else
		xa = (-bd + sqr(bd * bd - 4 * ad * cd)) / (2 * ad)
		ya = y1 + (xa - x1) * kf
		xb = (-bd - sqr(bd * bd - 4 * ad * cd)) / (2 * ad)
		yb = y1 + (xb - x1) * kf

		if abs(xa - xb) < EPS then
			state = 1
		else
			state = 2
		endif
	endif

	xa = xa + xo
	ya = ya + yo
	xb = xb + xo
	yb = yb + yo
return


! ==============================================================================
! Direction Angle
! ------------------------------------------------------------------------------
! Input variables:
!	vx, vy:				vector
!
! Returned variables:
!	alpha:				selected intersection point
! ==============================================================================

103:

if abs(vx) < EPS & abs(vy) < EPS then
	angle = 0
	return
endif

if abs(vx) < EPS then
	if vy > 0 then
		angle = 90
	else
		angle = 270
	endif
else
	angle = atn(vy / vx)
	if vx >= 0 then
		if angle < 0 then
			angle = angle + 360
		endif
	else
		angle = 180 + angle
	endif
endif

return


! ==============================================================================
! Rotate 2D points around curved wall's center
! ------------------------------------------------------------------------------
! Input variables:
!	x,y:				2D point
!	WOD:				"wido orig dist" in the wallhole coordinate system
!	alpha:				rotation angle
! Returned variables:
!	x,y:				rotated 2D point
! ==============================================================================

1000:
	xo = x
	yo = y - WOD
	x = xo * cos(signWallIsLeft * alpha) - yo * sin(signWallIsLeft * alpha)
	y = xo * sin(signWallIsLeft * alpha) + yo * cos(signWallIsLeft * alpha) + WOD
return




"DrawSidelightCasingCurvedWall":
! ==============================================================================
! Cuts Casing polygon with the facade plane of door frame in Curved Walls
! and also draws it
! ------------------------------------------------------------------------------
! ==============================================================================

	! Store casing polygon -------------------------------------------------------

	dim vertArr1[][3]
	dim inhEdgeInfos1[]
	defaultInhEdgeInfo = 0


	gosub "Convert GDL poly2_ to AC polygons"

	nContours1 = 1
	dim contArr1[]
	contArr1[1] = nVertices1 + 1

	if nVertices1 >= 2 then
		preparefunction ch, "Store", "CasingPoly", nVertices1, nContours1, vertArr1, contArr1, defaultInhEdgeInfo, inhEdgeInfos1
	endif


	! ------------------------------------------------------------------------------
	! Cut "CasingPoly" polygon with halfplane
	! ------------------------------------------------------------------------------

	if bCasingIsInside = 1 then
		PREPAREFUNCTION  ch, "HalfPlaneParams", "", 0, -1, WOD - WIDO_FRAME_THICKNESS
		set fill gs_trim_wallhole_fill_in
		ActCasingFillPen 		= gs_trim_wallhole_pen_sl_fg_in
		ActCasingFillBackPen	= gs_trim_wallhole_pen_sl_bg_in
	else
		PREPAREFUNCTION  ch, "HalfPlaneParams", "", 0, 1, -WOD
		set fill gs_trim_wallhole_fill_out
		ActCasingFillPen 		= gs_trim_wallhole_pen_sl_fg_out
		ActCasingFillBackPen	= gs_trim_wallhole_pen_sl_bg_out
	endif


	dim resPolyIDArray[]
	numPoly = CALLFUNCTION (ch, "PolyCut", "CasingPoly", resPolyIDArray)

	! ------------------------------------------------------------------------------
	! Draw resulting polygons
	! ------------------------------------------------------------------------------

	for jk = 1 to numPoly
		polygonID = resPolyIDArray[jk]

		gosub "GetResultingACPolygon"

		if nsp > 0 then
			poly2_b  nsp/3, 1+2+4+64, ActCasingFillPen, ActCasingFillBackPen,
				get(nsp)
		endif
	next jk


	PREPAREFUNCTION ch, "EmptyContainer", "mySourceContainer", ""
	PREPAREFUNCTION ch, "EmptyContainer", "myDestinationContainer", ""
return



"Convert GDL poly2_ to AC polygons":
! ==============================================================================
! Converts GDL poly2_b command values to AC polygon values
! ------------------------------------------------------------------------------
! ==============================================================================

idx = 1
inhEdgeInfosLast = 0

for i=1 to nsp/3
	px = get(1)
	py = get(1)
	ps = round_int (get(1))


	if idx > 1 then
		bSkipThisVertex = (abs(px - vertarr1[1][1]) < EPS & abs(py - vertarr1[1][2]) < EPS)	! Skip this vertex if this is a closing one
	else
		bSkipThisVertex = 0
	endif

	if ps < 900 | ps >= 1000 then	! Skip state '900'
		if not(bSkipThisVertex) then
			vertarr1[idx][1] = px
			vertarr1[idx][2] = py
		endif
		if ps >= 3000 & ps < 4000 then
			if idx > 1 then
				vx = vertarr1[idx-1][1] - 0
				vy = vertarr1[idx-1][2] !- WOD
				gosub 103	! Direction Angle
				savedAngle = angle

				vx = px - 0
				vy = py !- WOD
				gosub 103	! Direction Angle

				vertarr1[idx-1][3] = angle - savedAngle
				if not(bSkipThisVertex) then
					inhEdgeInfos1[idx] = bittest(ps, 0)
				endif
			endif
		else
			if not(bSkipThisVertex) then
				vertarr1[idx][3] = 0
				inhEdgeInfos1[idx] = bittest(ps, 0)
			endif
		endif
		if not(bSkipThisVertex) then
			idx = idx + 1
		endif
	endif
next i
nVertices1 = vardim1(vertarr1)

return


"GetResultingACPolygon":
! ==============================================================================
! Get GDL Polygon
! ------------------------------------------------------------------------------
! Input variables:
!	polygonID:			Polygon index
!
! Returned variables:
!	GDL stack:			GDL polygon
! ==============================================================================

	dim resVertices[]
	numVertices = callfunction(ch, "GETVERTICES", polygonID, resVertices)
	numVertices = numVertices / 3

	dim contArr[]
	numContours = callfunction(ch, "GETCONTOURENDS", polygonID, contArr)

	dim inhEdgeInfos[]
	numEdges = callfunction(ch, "GetInhEdgeInfos", polygonID, inhEdgeInfos)

	for contIndex = 1 to numContours

		if contIndex = 1 then
			begIdx = 0
		else
			begIdx = contArr[contIndex] - 1
		endif
		if contIndex = numContours then
			endIdx = numVertices - 1
		else
			endIdx = contArr[contIndex + 1] - 2
		endif

		bClosed = 0
		bStartWithLast = 0

		index = endIdx * 3
		ac2gdl_lpx = resVertices[index + 1]
		ac2gdl_lpy = resVertices[index + 2]
		ac2gdl_lpa = resVertices[index + 3]
		prevEdgeInfo = round_int(inhEdgeInfos[endIdx + 1])

		if abs(ac2gdl_lpa) > EPS then
			put ac2gdl_lpx, ac2gdl_lpy, 1
			bStartWithLast = 1
		endif

		for vertIndex = begIdx to endIdx
			index = vertIndex * 3
			ac2gdl_px = resVertices[index + 1]
			ac2gdl_py = resVertices[index + 2]
			ac2gdl_pa = resVertices[index + 3]
			edgeInfo	= round_int(inhEdgeInfos[vertIndex + 1])

			if vertIndex = begIdx then
				if bStartWithLast then
					ac2gdl_spx = ac2gdl_lpx
					ac2gdl_spy = ac2gdl_lpy
				else
					ac2gdl_spx = ac2gdl_px
					ac2gdl_spy = ac2gdl_py
				endif
			endif

			if abs(ac2gdl_lpa) > EPS then
				ac2gdl_mx = (ac2gdl_px + ac2gdl_lpx) / 2
				ac2gdl_my = (ac2gdl_py + ac2gdl_lpy) / 2
				ac2gdl_ratio = 1 / 2 / tan (ac2gdl_lpa / 2)

				ac2gdl_cx = ac2gdl_mx - ac2gdl_ratio * (ac2gdl_py - ac2gdl_lpy)	! Arc center
				ac2gdl_cy = ac2gdl_my + ac2gdl_ratio * (ac2gdl_px - ac2gdl_lpx)
				ac2gdl_rad = sqr((ac2gdl_cx - ac2gdl_px)^2 + (ac2gdl_cy - ac2gdl_py)^2)

				vx = ac2gdl_px - ac2gdl_cx
				vy = ac2gdl_py - ac2gdl_cy
				gosub 103	! Direction Angle
				alpha = angle

				vx = ac2gdl_lpx - ac2gdl_cx
				vy = ac2gdl_lpy - ac2gdl_cy
				gosub 103	! Direction Angle
				beta = angle

				put ac2gdl_cx,	ac2gdl_cy,	900,
					0,			ac2gdl_lpa,	4000 + edgeInfo

				if GLOB_CONTEXT <> 5 & (prevEdgeInfo > 0) then
					line_property 0
					arc2 ac2gdl_cx,	ac2gdl_cy, ac2gdl_rad, min(alpha,beta), max(alpha,beta)
				endif
			else
				if GLOB_CONTEXT <> 5 & (prevEdgeInfo > 0) then
					line_property 0
					line2 ac2gdl_lpx, ac2gdl_lpy, ac2gdl_px, ac2gdl_py
				endif
			endif

			if vertIndex > begIdx & abs(ac2gdl_spx - ac2gdl_px) < EPS & abs(ac2gdl_spy - ac2gdl_py) < EPS then
				put ac2gdl_px, ac2gdl_py, -1
				bClosed = 1
			else
				if vertIndex < endIdx | not(bStartWithLast) then
					put ac2gdl_px, ac2gdl_py, edgeInfo
				endif
			endif

			ac2gdl_lpx = ac2gdl_px
			ac2gdl_lpy = ac2gdl_py
			ac2gdl_lpa = ac2gdl_pa
			prevEdgeInfo = edgeInfo
		next vertIndex

		if not(bClosed) & numContours > 1 then	! Close the polygon if it has holes
			put ac2gdl_spx, ac2gdl_spy, -1
		endif

	next contIndex
return



]]>
</Script_2D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_1D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
EPS = 0.0001

! iRevealType:
REVEAL_EDGE				= 0
REVEAL_NO				= 1
REVEAL_POSITIVE			= 2
REVEAL_NEGATIVE			= 3
REVEAL_SLANTED			= 4
REVEAL_SPLAYED			= 5
REVEAL_HISTORIC			= 6
REVEAL_DOUBLE			= 7
REVEAL_DOUBLE_SPLAYED	= 8
REVEAL_OUTSIDE_SPLAYED	= 9

! Partial Stucture Display defines:
STRUCTURE_ENTIRE_STRUCTURE	= 0
STRUCTURE_CORE_ONLY			= 1
STRUCTURE_WITHOUT_FINISHES	= 2

! iWindowShape:
SHAPE_RECTANGULAR			= 0
SHAPE_ARCHED				= 1
SHAPE_ROUND					= 2
SHAPE_EYEBROWS				= 3
SHAPE_HALFCIRCLE			= 4 	! straight side is horizontal
SHAPE_MULTISIDE				= 5
SHAPE_OCTAGONAL				= 6
SHAPE_HALFARCH				= 7
SHAPE_PENTAGON				= 8
SHAPE_QUARTERROUND			= 9
SHAPE_HALFROUND				= 10 	! straight side is vertical
SHAPE_TRAPEZOID				= 11
SHAPE_TRIANGLE				= 12
SHAPE_GOTHICARCH			= 13
SHAPE_ELLIPSEARCH			= 14
SHAPE_ROMBUS				= 15
SHAPE_HORSESHOE				= 16
SHAPE_OGEECENTERED			= 17
SHAPE_SARACENIC				= 18
SHAPE_T						= 19
SHAPE_HALF_T_LEFT			= 20
SHAPE_ARCHED_T				= 21
SHAPE_ARCHED_HALF_T_LEFT	= 22
SHAPE_PARALLELOGRAM			= 23
SHAPE_ELLIPSE				= 24
SHAPE_CORNER_TRIANGLE		= 25
SHAPE_QUARTERROUND_NOFRAME	= 26
SHAPE_HALF_T_RIGHT			= 27
SHAPE_ARCHED_HALF_T_RIGHT	= 28

! iCasingWidthControl:
FULL_EDITABLE				= 1
SIDE_AND_BOTTOM_EDITABLE	= 2
SIDE_EDITABLE				= 3

! gs_trimtype_out_int, gs_trimtype_in_int
CASING_NORMAL		= 1
CASING_OVERHANG		= 2
CASING_COMPLEX		= 3		! Only for outside casing

!iCasingHeadTypeOut
CASING_HEAD_RECT			= 1
CASING_HEAD_DECORATIVE_1	= 2
CASING_HEAD_DECORATIVE_2	= 3
CASING_HEAD_DECORATIVE_3	= 4

! iArchitraveCapitalType
ARCH_CAPITAL_SQUARE_ONSIDE		= 1
ARCH_CAPITAL_SQUARE_NEXTSIDE	= 2
ARCH_CAPITAL_DECOR_ONSIDE		= 3
ARCH_CAPITAL_DECOR_NEXTSIDE		= 4

! iNORCasingType
ARCHITRAV_NONE                  = 1
ARCHITRAV_SILL                  = 2
ARCHITRAV_LEFT                  = 3
ARCHITRAV_LEFT_SILL             = 4
ARCHITRAV_RIGHT                 = 5
ARCHITRAV_RIGHT_SILL            = 6
ARCHITRAV_LEFT_RIGHT            = 7
ARCHITRAV_LEFT_RIGHT_SILL       = 8
ARCHITRAV_ENTAB                 = 9
ARCHITRAV_ENTAB_SILL            = 10
ARCHITRAV_ENTAB_LEFT            = 11
ARCHITRAV_ENTAB_LEFT_SILL       = 12
ARCHITRAV_ENTAB_RIGHT           = 13
ARCHITRAV_ENTAB_RIGHT_SILL      = 14
ARCHITRAV_ENTAB_LEFT_RIGHT      = 15
ARCHITRAV_ENTAB_LEFT_RIGHT_SILL = 16
ARCHITRAV_ALL                   = 17
ARCHITRAV_SIMPLE_CASING         = 18


! ==============================================================================
! Get Casing restrictions
! ==============================================================================

call "CasingEnable" parameters A=A,
	iRevealType			= iRevealType,
	iWindowShape		= iWindowShape,
	gs_frame_style_m	= gs_frame_style_m,
	returned_parameters bInsideCasingNotAvailableByWallType,
						bInsideCasingNotAvailableByReveal,
						bOutsideCasingNotAvailableByReveal,
						bInsideCasingNotAvailableByFrameStyle,
						bOutsideCasingNotAvailableByFrameStyle


! ==============================================================================
! Reveal Points Indexes
! ==============================================================================

idxSillStartRevealLeft		= iRevealPointsIdx[1]
idxSillEndRevealLeft		= iRevealPointsIdx[2]
idxFrameStartRevealLeft		= iRevealPointsIdx[3]
idxFrameEndRevealLeft		= iRevealPointsIdx[4]
idxBoardEndRevealLeft		= iRevealPointsIdx[6]
idxSillStartPlasterLeft		= iRevealPointsIdx[7]
idxSillEndPlasterLeft		= iRevealPointsIdx[8]
idxSillStartRevealRight		= iRevealPointsIdx[11]
idxSillEndRevealRight		= iRevealPointsIdx[12]
idxFrameStartRevealRight	= iRevealPointsIdx[13]
idxFrameEndRevealRight		= iRevealPointsIdx[14]
idxBoardEndRevealRight		= iRevealPointsIdx[16]
idxSillStartPlasterRight	= iRevealPointsIdx[17]
idxSillEndPlasterRight		= iRevealPointsIdx[18]


! ==============================================================================

bTShapedOpening =  (iWindowShape = SHAPE_T |\
					iWindowShape = SHAPE_HALF_T_LEFT |\
					iWindowShape = SHAPE_HALF_T_RIGHT |\
					iWindowShape = SHAPE_ARCHED_T |\
					iWindowShape = SHAPE_ARCHED_HALF_T_LEFT |\
					iWindowShape = SHAPE_ARCHED_HALF_T_RIGHT)

bPShapedLeftOpening =	(iWindowShape = SHAPE_T |\
						iWindowShape = SHAPE_HALF_T_LEFT |\
						iWindowShape = SHAPE_ARCHED_T |\
						iWindowShape = SHAPE_ARCHED_HALF_T_LEFT) &\
						gs_sidelight_parapet_hgt_left > EPS

bPShapedRightOpening =	(iWindowShape = SHAPE_T |\
						iWindowShape = SHAPE_HALF_T_RIGHT |\
						iWindowShape = SHAPE_ARCHED_T |\
						iWindowShape = SHAPE_ARCHED_HALF_T_RIGHT) &\
						gs_sidelight_parapet_hgt_right > EPS


bInclinedWall	= (abs(WALL_INCL) > EPS)
curvedWall		= (abs(WIDO_ORIG_DIST) > EPS)
wallIsLeft		= (SYMB_ROTANGLE > EPS) exor WIDO_REVEAL_SIDE
signWallIsLeft	= wallIsleft - not(wallIsleft)

if bTShapedOpening then
	bDrawLeftSLSill		= gs_sill_outside_sl_left
	bDrawRightSLSill	= gs_sill_outside_sl_right
	bDrawLeftSLBoard	= gs_board_inside_sl_left
	bDrawRightSLBoard	= gs_board_inside_sl_right
else
	bDrawLeftSLSill		= bDrawSill
	bDrawRightSLSill	= bDrawSill
	bDrawLeftSLBoard	= bDrawBoard
	bDrawRightSLBoard	= bDrawBoard
endif


if not(bCasingUSA) then
	if gs_trimtype_out_int = CASING_NORMAL then
		gs_trimov_top_left_out	= 0
		gs_trimov_top_right_out	= 0
		gs_trimov_bot_left_out	= 0
		gs_trimov_bot_right_out	= 0
	endif
	if gs_trimtype_in_int = CASING_NORMAL then
		gs_trimov_top_left_in	= 0
		gs_trimov_top_right_in	= 0
		gs_trimov_bot_left_in	= 0
		gs_trimov_bot_right_in	= 0
	endif
endif


if gs_trimtype_in_int = CASING_OVERHANG then
	gs_trimov_top_left_in	= gs_trimov_top_right_in

	if	isWindow | \
		iWindowShape = SHAPE_T | \
		iWindowShape = SHAPE_ARCHED_T then
		gs_trimov_bot_left_in	= gs_trimov_bot_right_in
	endif
endif

if gs_trimtype_out_int = CASING_OVERHANG then
	gs_trimov_top_left_out	= gs_trimov_top_right_out

	if	isWindow | \
		iWindowShape = SHAPE_T | \
		iWindowShape = SHAPE_ARCHED_T then
		gs_trimov_bot_left_out	= gs_trimov_bot_right_out
	endif
endif


if Suppress_isWindow then isWindow = 0

bShowJambExtension		= 1

bEnableUniformCasing = ((iWindowShape = SHAPE_RECTANGULAR |\
						 iWindowShape = SHAPE_T |\
						 iWindowShape = SHAPE_HALF_T_LEFT |\
						 iWindowShape = SHAPE_HALF_T_RIGHT) &\
						 not(bTerraceDoorNORUI))

if (iWindowShape = SHAPE_RECTANGULAR |\
	iWindowShape = SHAPE_T |\
	iWindowShape = SHAPE_HALF_T_LEFT |\
	iWindowShape = SHAPE_HALF_T_RIGHT) then

	iCasingWidthControl = FULL_EDITABLE
else
	if (iWindowShape = SHAPE_ARCHED |\
		iWindowShape = SHAPE_ELLIPSEARCH |\
		iWindowShape = SHAPE_TRAPEZOID |\
		iWindowShape = SHAPE_HALFCIRCLE |\
		iWindowShape = SHAPE_PENTAGON |\
		iWindowShape = SHAPE_QUARTERROUND) then

		iCasingWidthControl = SIDE_AND_BOTTOM_EDITABLE
	else
		iCasingWidthControl = SIDE_EDITABLE
	endif
endif


! ==============================================================================
! Disable simple overhang and complex casing types according to window shape
! ==============================================================================

if	iWindowShape <> SHAPE_RECTANGULAR & \
	iWindowShape <> SHAPE_T & \
	iWindowShape <> SHAPE_HALF_T_LEFT & \
	iWindowShape <> SHAPE_HALF_T_RIGHT then

	! Inside
	gs_CasingInTypeEnable = bitset( gs_CasingInTypeEnable, 1, 0)


	! Outside
	gs_CasingOutTypeEnable = bitset( gs_CasingOutTypeEnable, 1, 0)
	gs_CasingOutTypeEnable = bitset( gs_CasingOutTypeEnable, 2, 0)
endif


! ==============================================================================

!if SYMB_MIRRORED exor (SYMB_ROTANGLE > EPS) then
!	widoRightJamb	= WIDO_LEFT_JAMB
!	widoLeftJamb	= WIDO_RIGHT_JAMB
!else
!	widoRightJamb	= WIDO_RIGHT_JAMB
!	widoLeftJamb	= WIDO_LEFT_JAMB
!endif

widoLeftJamb	= gs_reveal_left
widoRightJamb	= gs_reveal_right

widoInnerLeftJamb	= revealInnerLeft
widoInnerRightJamb	= revealInnerRight
widoInnerTopJamb	= 0
widoInnerBottomJamb	= 0
if iRevealType = REVEAL_SPLAYED | iRevealType = REVEAL_HISTORIC then
	widoInnerTopJamb	= gs_reveal_splayed_innerTop
	widoInnerBottomJamb	= gs_reveal_splayed_innerBottom
endif
if iRevealType = REVEAL_DOUBLE then
	widoInnerTopJamb	= gs_reveal_double_innerTop
	widoInnerBottomJamb	= gs_reveal_double_innerBottom
endif


! ==============================================================================
! Restrictions for Window Shapes
! ==============================================================================

widoHeadDepth	= gs_reveal_top
widoThresDepth	= gs_reveal_bottom

if	iWindowShape = SHAPE_ARCHED | \
	iWindowShape = SHAPE_ARCHED_T | \
	iWindowShape = SHAPE_ARCHED_HALF_T_LEFT | \
	iWindowShape = SHAPE_ARCHED_HALF_T_RIGHT | \
	iWindowShape = SHAPE_ELLIPSEARCH then
	! --- Arched Window Shape ---

	widoLeftJamb	= widoRightJamb
	widoHeadDepth	= widoRightJamb

	gs_tw_left_in	= gs_tw_right_in
	gs_tw_top_in	= gs_tw_right_in

	gs_tw_left_out	= gs_tw_right_out
	gs_tw_top_out	= gs_tw_right_out
endif

if	iWindowShape = SHAPE_RECTANGULAR |\
	iWindowShape = SHAPE_T |\
	iWindowShape = SHAPE_HALF_T_LEFT |\
	iWindowShape = SHAPE_HALF_T_RIGHT then

	if gs_trim_outside_uniform then
		gs_tw_left_out	= gs_tw_right_out
		gs_tw_top_out	= gs_tw_right_out
		gs_tw_bottom_out = gs_tw_right_out
	endif

	if gs_trim_inside_uniform then
		gs_tw_left_in	= gs_tw_right_in
		gs_tw_top_in	= gs_tw_right_in
		gs_tw_bottom_in = gs_tw_right_in
	endif
endif

if not(isWindow) & not(bTShapedOpening) then
	gs_tw_bottom_in		= 0
	gs_tw_bottom_out	= 0
	gs_stack_bottom		= 0
endif


gs_trim_below_sillLeft		= bCasingBottomOutside
gs_trim_below_sillRight		= bCasingBottomOutside
gs_trim_below_boardLeft		= gs_trim_below_board
gs_trim_below_boardRight	= gs_trim_below_board
if	bPShapedLeftOpening then
	if	( (gs_sidelight_parapet_hgt_left + gs_reveal_double_innerBottom_sL + (gs_trim_width_in - gs_trim_offs_in) * not(bDrawLeftSLBoard)) <= \
			gs_tw_bottom_in ) then gs_trim_below_boardLeft = 0
	if	( (gs_sidelight_parapet_hgt_left + gs_reveal_bottom_sL + (gs_trim_width_out - gs_trim_offs_out) * not(bDrawLeftSLSill) + bDrawLeftSLSill * sillBottomOutside) <= \
			gs_tw_bottom_out ) then gs_trim_below_sillLeft = 0
endif
if	bPShapedRightOpening then
	if	( (gs_sidelight_parapet_hgt_right + gs_reveal_double_innerBottom_sR + (gs_trim_width_in - gs_trim_offs_in) * not(bDrawRightSLBoard)) <= \
			gs_tw_bottom_in ) then gs_trim_below_boardRight = 0
	if	( (gs_sidelight_parapet_hgt_right + gs_reveal_bottom_sR + (gs_trim_width_out - gs_trim_offs_out) * not(bDrawRightSLSill) + bDrawRightSLSill * sillBottomOutside) <= \
			gs_tw_bottom_out ) then gs_trim_below_sillRight = 0
endif

! ==============================================================================
! Calculations for Corner Window
! ==============================================================================

if bRightCornerFunction & abs(rightCornerAngle) > EPS then
	rx = 1 / tan(rightCornerAngle / 2)

	if rightCornerAngle > 180 then
		rightCwDx = WIDO_FRAME_THICKNESS / tan(-rightCornerAngle / 2)
	else
		rightCwDx = 0
	endif

	rightCwDx2 = 0
	if abs(WALL_THICKNESS - rightConnWallThk) > EPS then
		rightCwDx2 = (WALL_THICKNESS - rightConnWallThk) / cos(rightCornerAngle - 90)
	endif
	bFitModeRight = (rightConnWallThk > WALL_THICKNESS + EPS)

!!!	if SYMB_MIRRORED exor WIDO_REVEAL_SIDE then
!!!		! --- Swap Left and Right Attributes
!!!		gs_tw_left_in		= gs_tw_right_in
!!!		gs_tw_left_out		= gs_tw_right_out
!!!		gs_stack_left		= gs_stack_right
!!!		gs_left_oversize	= gs_right_oversize
!!!	endif

	gs_right_oversize = 0
else
	bFitModeRight = 0
endif

if bLeftCornerFunction & abs(leftCornerAngle) > EPS then
	lx = 1 / tan(leftCornerAngle / 2)

	if leftCornerAngle > 180 then
		leftCwDx = WIDO_FRAME_THICKNESS / tan(-leftCornerAngle / 2)
	else
		leftCwDx = 0
	endif

	leftCwDx2 = 0
	if abs(WALL_THICKNESS - leftConnWallThk) > EPS then
		leftCwDx2 = (WALL_THICKNESS - leftConnWallThk) / cos(leftCornerAngle - 90)
	endif
	bFitModeLeft = (leftConnWallThk > WALL_THICKNESS + EPS)

	gs_left_oversize = 0
else
	bFitModeLeft = 0
endif


! ==============================================================================
! Calculations for Inclined Walls
! ==============================================================================

if bInclinedWall then
	bFactor = SYMB_MIRRORED exor WIDO_REVEAL_SIDE exor wallIsLeft
	incFactor = not(bFactor) - bFactor
	incX = incFactor * tan(WALL_INCL)
	incY = incFactor * (1 / cos(WALL_INCL))

	bDir = SYMB_MIRRORED exor (SYMB_ROTANGLE > EPS)
	iDir = not(bDir) - bDir
	incH = cos(WALL_INCL)
	incV = sin(WALL_INCL) * iDir
else
	incX = 0
	incY = 1
	iDir = 0
	incH = 0
	incV = 0
endif


! ==============================================================================
! Calculations for Stack Window
! ==============================================================================

if gs_stack_left then
	overSizeLeft		= gs_left_oversize
	overSizeLeftIn		= gs_left_oversize
	overSizeLeftOut		= gs_left_oversize
	widoLeftJamb		= 0
	gs_reveal_left		= 0
else
	overSizeLeft		= 0
	overSizeLeftIn		= -widoInnerLeftJamb
	overSizeLeftOut		= -widoLeftJamb
	gs_trim_stack_left	= 0
endif

if gs_stack_right then
	overSizeRight		= gs_right_oversize
	overSizeRightIn		= gs_right_oversize
	overSizeRightOut	= gs_right_oversize
	widoRightJamb		= 0
	gs_reveal_right		= 0
else
	overSizeRight		= 0
	overSizeRightIn		= -widoInnerRightJamb
	overSizeRightOut	= -widoRightJamb
	gs_trim_stack_right	= 0
endif
if not(gs_stack_bottom) then gs_trim_stack_bottom = 0
if not(gs_stack_top) 	then gs_trim_stack_top = 0


! ==============================================================================
! Tolerance Offsets
! ==============================================================================

tolerOffsetLeft		= bCasingTolerance * gs_tolerance_left * not(gs_stack_left)
tolerOffsetRight	= bCasingTolerance * gs_tolerance_right * not(gs_stack_right)
tolerOffsetUpper	= bCasingTolerance * gs_tolerance_upper * not(gs_stack_top)
tolerOffsetLower	= bCasingTolerance * gs_tolerance_lower

tolerOffsetLeftIn	= tolerOffsetLeft  * not(gs_trim_atframe_in)
tolerOffsetRightIn	= tolerOffsetRight * not(gs_trim_atframe_in)
tolerOffsetUpperIn	= tolerOffsetUpper * not(gs_trim_atframe_in)
tolerOffsetLowerIn	= tolerOffsetLower * not(gs_trim_atframe_in)

if gs_trim_atframe_out then
	tolerOffsetLeftOut	= 0
	tolerOffsetRightOut	= 0
	tolerOffsetUpperOut = 0
	tolerOffsetLowerOut = 0
else
	tolerOffsetLeftOut	= bCasingTolerance * (gs_tolerance_left  + gs_frame_width * not(gs_casing_nor)) * not(gs_stack_left)
	tolerOffsetRightOut	= bCasingTolerance * (gs_tolerance_right + gs_frame_width * not(gs_casing_nor)) * not(gs_stack_right)
	tolerOffsetUpperOut	= bCasingTolerance * (gs_tolerance_upper + gs_frame_width * not(gs_casing_nor)) * not(gs_stack_top)
	tolerOffsetLowerOut	= bCasingTolerance * (gs_tolerance_lower + gs_frame_width * not(gs_casing_nor)) * not(bDrawSill)
endif

tolerOffsStackCasLeftIn		= bCasingTolerance * gs_tolerance_left * gs_stack_left
tolerOffsStackCasRightIn	= bCasingTolerance * gs_tolerance_right * gs_stack_right
tolerOffsStackCasUpperIn	= bCasingTolerance * gs_tolerance_upper * gs_stack_top
tolerOffsStackCasLowerIn	= bCasingTolerance * gs_tolerance_lower * gs_stack_bottom

tolerOffsStackCasLeftOut	= bCasingTolerance * (gs_tolerance_left + gs_frame_width * not(gs_casing_nor)) * gs_stack_left
tolerOffsStackCasRightOut	= bCasingTolerance * (gs_tolerance_right + gs_frame_width * not(gs_casing_nor)) * gs_stack_right
tolerOffsStackCasUpperOut	= bCasingTolerance * (gs_tolerance_upper + gs_frame_width * not(gs_casing_nor)) * gs_stack_top
tolerOffsStackCasLowerOut	= bCasingTolerance * (gs_tolerance_lower + gs_frame_width * not(gs_casing_nor)) * gs_stack_bottom


! ==============================================================================
! Calculations for Curved Walls
! ==============================================================================

alfaLeft = 0
ySign = 0

if curvedWall & abs(radSill) > EPS & abs(radBoard) > EPS then

	if GLOB_SCRIPT_TYPE = 2 | GLOB_SCRIPT_TYPE = 3 then
		DegRad = PI / 180

		if GLOB_SCRIPT_TYPE <> 2 then
			widoOrigDist = -WIDO_ORIG_DIST
		else
			widoOrigDist = WIDO_ORIG_DIST
		endif

		alfaLeftIn	= abs(atn( leftRevealPnts[idxBoardEndRevealLeft][1]  / ( leftRevealPnts[idxBoardEndRevealLeft][2]  - WOD)))
		alfaRightIn	= abs(atn(rightRevealPnts[idxBoardEndRevealRight][1] / (rightRevealPnts[idxBoardEndRevealRight][2] - WOD)))

		alfaLeftOut	= abs(atn( leftRevealPnts[idxSillEndRevealLeft - 1][1]  / ( leftRevealPnts[idxSillEndRevealLeft - 1][2]  - WOD)))
		alfaRightOut= abs(atn(rightRevealPnts[idxSillEndRevealRight - 1][1] / (rightRevealPnts[idxSillEndRevealRight - 1][2] - WOD)))

		WOD = abs(widoOrigDist) - (SYMB_ROTANGLE > EPS) * WIDO_FRAME_THICKNESS
		WODIn = abs(widoOrigDist) + (SYMB_ROTANGLE < EPS) * WIDO_FRAME_THICKNESS - (SYMB_ROTANGLE > EPS) * WIDO_FRAME_THICKNESS

		alfaLeft	= atn((leftWidth  + overSizeLeft*0)  / WOD)
		alfaRight	= atn((rightWidth + overSizeRight*0) / WOD)

		alfaLeftOs	= atn((leftRevealPnts[idxBoardEndRevealLeft-1][1]  + gs_left_oversize) / WOD)
		alfaRightOs	= atn((rightRevealPnts[idxBoardEndRevealRight-1][1] + gs_right_oversize) / WOD)

		bArchSign = (WIDO_REVEAL_SIDE exor SYMB_ROTANGLE > EPS)
		iArchSign = bArchSign - not(bArchSign)		! 1 / -1

		if WIDO_REVEAL_SIDE then
			WOD = widoOrigDist + WIDO_FRAME_THICKNESS
		else
			WOD = -widoOrigDist
		endif

		if WIDO_REVEAL_SIDE exor SYMB_ROTANGLE < EPS then
			ySign = 1
			if WIDO_REVEAL_SIDE then
				rSill = sqr(refWidth^2 / 4 + WOD^2) - WIDO_SILL
				rBoard = rSill + WALL_THICKNESS
			else
				rSill = sqr(refWidth^2 / 4 + WOD^2) - WIDO_SILL
				rBoard = rSill + WALL_THICKNESS
			endif
		else
			ySign = -1
			if WIDO_REVEAL_SIDE then
				rBoard = sqr(refWidth^2 / 4 + WOD^2) + WIDO_SILL - WALL_THICKNESS
				rSill = rBoard + WALL_THICKNESS
			else
				rSill = sqr(refWidth^2 / 4 + WOD^2) + WIDO_SILL
				rBoard = rSill - WALL_THICKNESS
			endif
		endif

		if leftRevealPnts[idxFrameEndRevealLeft][1] < leftRevealPnts[idxFrameStartRevealLeft][1] then
			idx = idxFrameStartRevealLeft
		else
			idx = idxFrameEndRevealLeft
		endif
		alfaLeftLSL	 = asn(( leftRevealPnts[idx][1] + gs_sidelight_WHole_width_left + gs_reveal_left_sL + gs_trim_width_out - gs_trim_offs_out) / rSill)

		if rightRevealPnts[idxFrameEndRevealRight][1] > rightRevealPnts[idxFrameStartRevealRight][1] then
			idx = idxFrameStartRevealRight
		else
			idx = idxFrameEndRevealRight
		endif
		alfaRightRSL = asn((rightRevealPnts[idx][1] - gs_sidelight_WHole_width_right - gs_reveal_right_sR - gs_trim_width_out + gs_trim_offs_out) / rSill)

		ArcLengthSillToAngle	= 180 / rSill / PI
		ArcLengthBoardToAngle	= 180 / rBoard / PI

		alfaLeftJamb	= widoLeftJamb  * ArcLengthSillToAngle
		alfaRightJamb	= widoRightJamb * ArcLengthSillToAngle
	endif
endif	! curvedWall


! ==============================================================================
! Overhang Control
! ==============================================================================

if abs(WIDO_SILL) > EPS & gs_trim_atframe_out then
	gs_trimov_top_left_out	= 0
	gs_trimov_top_right_out	= 0
	gs_trimov_bot_left_out	= 0
	gs_trimov_bot_right_out	= 0
endif

bTrimovtopleftout 	= 0
bTrimovtoprightout 	= 0
bTrimovbotleftout  	= 0
bTrimovbotrightout  = 0
if abs(gs_trimov_top_left_out)  > EPS then bTrimovtopleftout  = 1
if abs(gs_trimov_top_right_out) > EPS then bTrimovtoprightout = 1
if isWindow then
	if abs(gs_trimov_bot_left_out)  > EPS then bTrimovbotleftout  = 1
	if abs(gs_trimov_bot_right_out) > EPS then bTrimovbotrightout = 1
else
	if bTShapedOpening then
		if (EPS < gs_trimov_bot_left_out & gs_trimov_bot_left_out < gs_sidelight_parapet_hgt_left) then bTrimovbotleftout  = 1
		if (EPS < gs_trimov_bot_right_out & gs_trimov_bot_right_out < gs_sidelight_parapet_hgt_right) then bTrimovbotrightout = 1
	endif
endif

bTrimovtopleftin 	= 0
bTrimovtoprightin 	= 0
bTrimovbotleftin  	= 0
bTrimovbotrightin  	= 0
if abs(gs_trimov_top_left_in)  > EPS then bTrimovtopleftin  = 1
if abs(gs_trimov_top_right_in) > EPS then bTrimovtoprightin = 1
if isWindow then
	if abs(gs_trimov_bot_left_in)  > EPS then bTrimovbotleftin  = 1
	if abs(gs_trimov_bot_right_in) > EPS then bTrimovbotrightin = 1
else
	if bTShapedOpening then
		if (EPS < gs_trimov_bot_left_in & gs_trimov_bot_left_in < gs_sidelight_parapet_hgt_left) then bTrimovbotleftin  = 1
		if (EPS < gs_trimov_bot_right_in & gs_trimov_bot_right_in < gs_sidelight_parapet_hgt_right) then bTrimovbotrightin = 1
	endif
endif


! ==============================================================================
! Apron Control
! ==============================================================================

if gs_apron then
	bBottomtriminmat=gs_apron_mat
	bBottomtriminthk=gs_apron_thk
else
	bBottomtriminmat=gs_trim_in_mat
	bBottomtriminthk=gs_trim_thk_in
endif


! ==============================================================================
! Custom Corner Function Control
! ==============================================================================

if abs(leftCornerAngle mod 360) < EPS then leftCornerAngle = 0
if abs(rightCornerAngle mod 360) < EPS then rightCornerAngle = 0

if bLeftCornerFunction and abs(leftCornerAngle) < EPS then bLeftCornerFunction = 0
if bRightCornerFunction and abs(rightCornerAngle) < EPS then bRightCornerFunction = 0


! ==============================================================================
! Calculation for Corner Column
! ==============================================================================

if gs_corner_column then
	if bRightCornerFunction & abs(rightCornerAngle) > EPS then
		cornerPostXbyWidth	= (-WIDO_FRAME_THICKNESS - gs_cc_pr) * abs(tan(90 - rightCornerAngle / 2)) + gs_cc_width
		cornerPostXbyThk	= (gs_cc_thk - WIDO_FRAME_THICKNESS - gs_cc_pr) * abs(tan(90 - rightCornerAngle / 2))
		pxFrameR = max(cornerPostXbyWidth, cornerPostXbyThk)

		tanAngle = tan(rightCornerAngle / 2)
		if (rightCornerAngle > 180) then
			px1R = -gs_cc_pr / tanAngle
			px2R =  WIDO_FRAME_THICKNESS / tanAngle
			px3R =  -(gs_cc_pr - gs_cc_thk) / tanAngle
		else
			px1R =  gs_cc_pr / tanAngle
			px2R = -WIDO_FRAME_THICKNESS / tanAngle
			px3R =  (gs_cc_pr - gs_cc_thk) / tanAngle
		endif
	endif

	if bLeftCornerFunction & abs(leftCornerAngle) > EPS then
		cornerPostXbyWidth	= (-WIDO_FRAME_THICKNESS - gs_cc_pr) * abs(tan(90 - leftCornerAngle / 2)) + gs_cc_width
		cornerPostXbyThk	= (gs_cc_thk - WIDO_FRAME_THICKNESS - gs_cc_pr) * abs(tan(90 - leftCornerAngle / 2))
		pxFrameL = max(cornerPostXbyWidth, cornerPostXbyThk)

		tanAngle = tan(leftCornerAngle / 2)
		if (leftCornerAngle > 180) then
			px1L = -gs_cc_pr / tanAngle
			px2L =  WIDO_FRAME_THICKNESS / tanAngle
			px3L =  -(gs_cc_pr - gs_cc_thk) / tanAngle
		else
			px1L =  gs_cc_pr / tanAngle
			px2L = -WIDO_FRAME_THICKNESS / tanAngle
			px3L =  (gs_cc_pr - gs_cc_thk) / tanAngle
		endif
	endif

	if (rightCornerAngle > 180) then
		idxL = idxFrameEndRevealLeft
		idxR = idxFrameEndRevealRight
	else
		idxL = idxFrameStartRevealLeft
		idxR = idxFrameStartRevealRight
	endif

	bMirrorRight	= (rightCornerAngle > 180)
	bMirrorLeft		= (leftCornerAngle > 180)
	offsLeftY		= ((leftCornerAngle > 180) exor (rightCornerAngle > 180)) * (2 * gs_cc_pr - gs_cc_thk)
	if abs(leftCornerAngle) > EPS then
		offsLeftX	= -abs(offsLeftY / tan(leftCornerAngle / 2))
	endif
endif


! ==============================================================================
! Calculations for Slanted Reveal
! ==============================================================================

if GLOB_SCRIPT_TYPE = 2 | GLOB_SCRIPT_TYPE = 3 then
	trinfiL = gs_reveal_left_angle
	trinfiR = gs_reveal_right_angle

	trinL = gs_trim_width_in / cos(trinfiL)
	trinR = gs_trim_width_in / cos(trinfiR)

	gi1L=WALL_INCL
	gi2L=90-abs(trinfiL)
	gi3L=180-gi1L-gi2L
	trin2L = trinL/sin(gi3L)*sin(gi2L)

	gi1R=WALL_INCL
	gi2R=90+abs(trinfiR)
	gi3R=180-gi1R-gi2R
	trin2R = trinR/sin(gi3R)*sin(gi2R)

	scLx = gs_trim_thk_in * tan(trinfiL)
	scRx = gs_trim_thk_in * tan(trinfiR)
	sfLx = WIDO_FRAME_THICKNESS * tan(trinfiL)
	sjLx = (WALL_THICKNESS - WIDO_SILL - WIDO_FRAME_THICKNESS) * tan(trinfiL)
	sfjLx = (WALL_THICKNESS - WIDO_SILL) * tan(trinfiL)

	trinfiB = gs_reveal_bottom_angle
	trinB = gs_trim_width_in / cos(trinfiB)
	sfby = WIDO_FRAME_THICKNESS * tan(trinfiB) * (iRevealType = REVEAL_SLANTED)
	sjby = (WALL_THICKNESS - WIDO_SILL - WIDO_FRAME_THICKNESS) * tan(trinfiB)
	scBy = gs_trim_thk_in * tan(trinfiB)

	trinfiT = gs_reveal_top_angle
	trinT = gs_trim_width_in / cos(trinfiT)
	sfty = WIDO_FRAME_THICKNESS * tan(trinfiT) * (iRevealType = REVEAL_SLANTED)
	sjty = (WALL_THICKNESS - WIDO_SILL - WIDO_FRAME_THICKNESS) * tan(trinfiT)
	scTy = gs_trim_thk_in * tan(trinfiT)
else
	trinfiL = 0
	trinfiR = 0

	trinL = 0
	trinR = 0

	gi1L = 0
	gi2L = 0
	gi3L = 0
	trin2L = 0

	gi1R = 0
	gi2R = 0
	gi3R = 0
	trin2R = 0

	scLx = 0
	scRx = 0
	sfLx = 0
	sjLx = 0
	sfjLx = 0

	trinfiB = 0
	trinB = 0
	sfby = 0
	sjby = 0
	scBy = 0

	trinfiT = 0
	trinT = 0
	sfty = 0
	sjty = 0
	scTy = 0
endif


! ==============================================================================
! Set controller parameters for Simple with Overhang
! ==============================================================================

_bPocketDoor = 0
if iDoorType = 6 | iDoorType = 7 then _bPocketDoor = 1

_bEnableOutsideCasingOverhang = bittest(gs_CasingOutTypeEnable, 1)		! Complex with Overhang

if	(_bEnableOutsideCasingOverhang & (gs_trimtype_out_int = CASING_OVERHANG)) |\
	(_bPocketDoor & (gs_frame_wthk | (iRevealType = REVEAL_EDGE))) then

	gs_trim_show_cover_out = 1
endif

_bEnableInsideCasingOverhang = bittest(gs_CasingInTypeEnable, 1)		! Complex with Overhang

if	(_bEnableInsideCasingOverhang & (gs_trimtype_in_int = CASING_OVERHANG)) |\
	(_bPocketDoor & gs_frame_wthk) then

	gs_trim_show_cover_in = 1
endif


! ==============================================================================
! Set controller parameters for Complex Casing
! ==============================================================================

_bArchitraveCapitalOnSide = (iArchitraveCapitalType = ARCH_CAPITAL_SQUARE_ONSIDE |\
							 iArchitraveCapitalType = ARCH_CAPITAL_DECOR_ONSIDE)

_bEnableOutsideCasingComplex = bittest(gs_CasingOutTypeEnable, 2)		! Complex with Overhang

if _bEnableOutsideCasingComplex & (gs_trimtype_out_int = CASING_COMPLEX) then
	gs_trim_show_cover_out = 1
endif


! ==============================================================================
! Enable Switchable Casing Cover
! ==============================================================================

bExtSliding = 0
if iDoorType = 8 | iDoorType = 9 then bExtSliding = 1

_bEnableSwitchableOutCasCover =	(gs_casing_che |\
								 (not(bCasingUSA | gs_casing_nor | bExtSliding) &\ 
								  (iWindowShape = SHAPE_RECTANGULAR |\
								   iWindowShape = SHAPE_ARCHED |\
								   iWindowShape = SHAPE_T |\
								   iWindowShape = SHAPE_HALF_T_LEFT |\
								   iWindowShape = SHAPE_ARCHED_T |\
								   iWindowShape = SHAPE_ARCHED_HALF_T_LEFT |\
								   iWindowShape = SHAPE_HALF_T_RIGHT |\
								   iWindowShape = SHAPE_ARCHED_HALF_T_RIGHT |\
								   iWindowShape = SHAPE_ELLIPSEARCH)))

if not(_bEnableSwitchableOutCasCover) then gs_trim_show_cover_out = 1

_bEnableSwitchableInCasCover =	(gs_casing_che |\
								 (not(bCasingUSA | gs_casing_nor) &\ 
								  (iWindowShape = SHAPE_RECTANGULAR |\
								   iWindowShape = SHAPE_ARCHED |\
								   iWindowShape = SHAPE_T |\
								   iWindowShape = SHAPE_HALF_T_LEFT |\
								   iWindowShape = SHAPE_ARCHED_T |\
								   iWindowShape = SHAPE_ARCHED_HALF_T_LEFT |\
								   iWindowShape = SHAPE_HALF_T_RIGHT |\
								   iWindowShape = SHAPE_ARCHED_HALF_T_RIGHT |\
								   iWindowShape = SHAPE_ELLIPSEARCH)))


! ==============================================================================
! Set Casing Cover in case of Curved Wall
! ==============================================================================

if curvedWall then
	gs_trim_show_cover_out	= 1
	gs_trim_show_cover_in	= 1
endif


! ==============================================================================
! Enable Switchable Bottom Casing
! ==============================================================================

if bEnableSwitchableBottomCasing < 0 then
	bEnableSwitchableBottomCasing = isWindow &\
									(iWindowShape = SHAPE_RECTANGULAR |\
									 iWindowShape = SHAPE_ARCHED |\
									 iWindowShape = SHAPE_EYEBROWS |\
									 iWindowShape = SHAPE_HALFCIRCLE |\
									 iWindowShape = SHAPE_HALFARCH |\
									 iWindowShape = SHAPE_PENTAGON |\
									 iWindowShape = SHAPE_QUARTERROUND |\
									 iWindowShape = SHAPE_TRAPEZOID |\
									 iWindowShape = SHAPE_TRIANGLE |\
									 iWindowShape = SHAPE_GOTHICARCH |\
									 iWindowShape = SHAPE_ELLIPSEARCH |\
									 iWindowShape = SHAPE_HORSESHOE |\
									 iWindowShape = SHAPE_OGEECENTERED |\
									 iWindowShape = SHAPE_SARACENIC |\
									 iWindowShape = SHAPE_CORNER_TRIANGLE |\
									 iWindowShape = SHAPE_QUARTERROUND_NOFRAME)
endif
]]>
</Script_1D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_PR SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_PR>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_UI SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[

CasingTypesonUI = 1
if gs_CasingOutTypeEnable = 1 & gs_CasingInTypeEnable = 1 then CasingTypesonUI = 0

bTShapeOpening = ((iWindowShape = SHAPE_T |\
				  iWindowShape = SHAPE_ARCHED_T) &\
				 (gs_sidelight_parapet_hgt_left > EPS |\
				  gs_sidelight_parapet_hgt_right > EPS))

bPShapeOpening = (((iWindowShape = SHAPE_HALF_T_LEFT |\
					iWindowShape = SHAPE_ARCHED_HALF_T_LEFT) &\
				   (gs_sidelight_parapet_hgt_left > EPS)) |\
				  ((iWindowShape = SHAPE_HALF_T_RIGHT |\
					iWindowShape = SHAPE_ARCHED_HALF_T_RIGHT) &\
				   (gs_sidelight_parapet_hgt_right > EPS)))

bArchedTopTPShape = (iWindowShape = SHAPE_ARCHED_T |\
					 iWindowShape = SHAPE_ARCHED_HALF_T_LEFT |\
					 iWindowShape = SHAPE_ARCHED_HALF_T_RIGHT)


! ================================================================================
! DW Outside Casing UI - INT
! ================================================================================

if bCasingOutPage then

	pageStartY	= 3

	if	gs_trim_outside_uniform						|\
		iWindowShape = SHAPE_PENTAGON				|\
		iWindowShape = SHAPE_TRAPEZOID				|\
		iWindowShape = SHAPE_ARCHED					|\
		iWindowShape = SHAPE_ELLIPSEARCH			|\
		iWindowShape = SHAPE_T						|\
		iWindowShape = SHAPE_HALF_T_LEFT			|\
		iWindowShape = SHAPE_HALF_T_RIGHT			|\
		iWindowShape = SHAPE_ARCHED_T				|\
		iWindowShape = SHAPE_ARCHED_HALF_T_LEFT		|\
		iWindowShape = SHAPE_ARCHED_HALF_T_RIGHT	|\
		not(iCasingWidthControl = FULL_EDITABLE)	|\
		(iCasingWidthControl = SIDE_EDITABLE)		then

		n = request("Working_length_unit", "", formatt)
	endif

	x1 = 0
	x2 = 15
	x3 = 240
	x4 = 430

	cx = 70
	cy = 19
	y = pageStartY
	dy = 20

	dy = 20
	cx2 = 110
	cx3 = 85
	cy3 = 55

	! --------------------------------------------------------------------------------
	! DW Outside Casing Header - Left Side!
	! --------------------------------------------------------------------------------

	ui_style 0, 1
	ui_infield{3} "gs_trim_outside", x1, y, x3-x1-1, cy,
			7, "",
			1,
			1, 0, 0, 0, 0,
			"", stCasingUI[1], 0,	! Outside Casing
			"", stCasingUI[1], 1	! Outside Casing
	y = y + dy + 4

	ui_style 0, 0

	! Outside Casing Uniform Checkbox
	! --------------------------------------------------------------------------------
	if bEnableUniformCasing then
		ui_infield{3} "gs_trim_outside_uniform", x2, y, x4 - x2 - cx3 - 2, cy,
				7, "",
				1,
				1, 0, 0, 0, 0,
				"", stCasingUI[3], 0,	! Uniform Casing Widths
				"", stCasingUI[3], 1	! Uniform Casing Widths

		y = y + dy
	endif

	! Switchable Bottom Casing Checkbox
	! --------------------------------------------------------------------------------
	if bEnableSwitchableBottomCasing then
		ui_infield{3} "bCasingBottomOutside", x2, y, x4 - x2 - cx3 - 2, cy,
				7, "",
				1,
				1, 0, 0, 0, 0,
				"", stCasingUI[4], 0,	! Outside Bottom Casing
				"", stCasingUI[4], 1	! Outside Bottom Casing

		y = y + dy
	endif

	! Cover Outer Wall Surface Checkbox
	! --------------------------------------------------------------------------------
	if _bEnableSwitchableOutCasCover then
		ui_infield{3} "gs_trim_show_cover_out", x2, y, x4 - x2 - cx3 - 2, cy,
				7, "",
				1,
				1, 0, 0, 0, 0,
				"", stCasingUI[16], 0,	! Cover Outer Wall Surface
				"", stCasingUI[16], 1	! Cover Outer Wall Surface

		y = y + dy
	endif

	! Architrave Capital Checkbox
	! --------------------------------------------------------------------------------
	if _bEnableOutsideCasingComplex then
		y = y + dy*not(bEnableSwitchableBottomCasing) + dy*not(_bEnableSwitchableOutCasCover) + 4

		ui_infield{3} "bArchitraveCapital", x1, y, x3-x1-1, cy,
				7, "",
				1,
				1, 0, 0, 0, 0,
				"", stCasingUI[21], 0,	! Architrave Capital
				"", stCasingUI[21], 1	! Architrave Capital

		_y_capital_infield = y
		y = y + dy
	endif

	_y_left = y


	! --------------------------------------------------------------------------------
	! DW Outside Casing Header - Right Side!
	! --------------------------------------------------------------------------------

	y = pageStartY
	ui_style 0, 0

	! Outside Casing Type Selector
	! --------------------------------------------------------------------------------
	if gs_CasingOutTypeEnable > 1 then
		ui_infield{3} "gs_trimtype_out_int", x3, y, x4-x3, cy,
			8, "",
			1,
			1, 0, 0, 0, 0,
			"",	stCasingType[1],	CASING_NORMAL,
			"",	stCasingType[2],	CASING_OVERHANG,
			"",	stCasingType[3],	CASING_COMPLEX

		y = y + dy + 6
	endif

	if _bEnableOutsideCasingComplex then

	! Casing Head Type Selector
	! --------------------------------------------------------------------------------
	if (gs_trimtype_out_int = CASING_COMPLEX) then
		ui_infield{3} "iCasingHeadTypeOut", x4 - cx3, y, cx3, cy3,
			2, 488,		! DW_HeadType.png
			4,
			1, 70, 50, 70, 50,
			1,	stCasingHeadType[1],	CASING_HEAD_RECT,
			2,	stCasingHeadType[2],	CASING_HEAD_DECORATIVE_1,
			3,	stCasingHeadType[3],	CASING_HEAD_DECORATIVE_2,
			4,	stCasingHeadType[4],	CASING_HEAD_DECORATIVE_3
	endif

	! Architrave Capital Type Selector
	! --------------------------------------------------------------------------------
		y = _y_capital_infield
		ui_infield{3} "iArchitraveCapitalType", x3, y, x4-x3, cy,
			8, "",
			1,
			1, 0, 0, 0, 0,
			"",	stArchitraveCapitalType[1],	ARCH_CAPITAL_SQUARE_ONSIDE,
			"",	stArchitraveCapitalType[2],	ARCH_CAPITAL_SQUARE_NEXTSIDE,
			"",	stArchitraveCapitalType[3],	ARCH_CAPITAL_DECOR_ONSIDE,
			"",	stArchitraveCapitalType[4],	ARCH_CAPITAL_DECOR_NEXTSIDE

		y = y + dy
	endif

	_y_right = y


	! --------------------------------------------------------------------------------
	! Horizontal separator
	! --------------------------------------------------------------------------------
	sepy = max(_y_left, _y_right) + 4
	ui_separator 0, sepy, 444, sepy

	gosub "outsideWarning"


	! --------------------------------------------------------------------------------
	! DW Outside Casing Shapes
	! --------------------------------------------------------------------------------
	_iCasingType		= gs_trimtype_out_int
	_bCasing			= gs_trim_outside
	_bCasingCover		= gs_trim_show_cover_out | (gs_trimtype_out_int = CASING_COMPLEX)
	_bShowBottomCasing	= bCasingBottomOutside

	gosub "shapePictures"


	! Outside Casing Parameters
	! -------------------------------------------------------------------------------

	if isWindow then	! Casing parameters to window shapes

		if gs_trim_outside & _bCasingCover & _bShowShape then

			if iWindowShape = SHAPE_RECTANGULAR then

				! Common Casing Size Parameters

				if gs_trim_outside_uniform then
					str_tooltip = stCasingUITooltip[8]		! Outside Casing Width
				else
					str_tooltip = stCasingUITooltip[1]		! Outside Casing Width Side 1
				endif
				ui_infield "gs_tw_right_out", posx+picx+3, posy+42, cx, 20 ui_tooltip str_tooltip

				if gs_trim_outside_uniform then
					ui_outfield str(formatt, gs_tw_left_out), posx-cx/2-3, posy+46, cx/2, 16, 1
				else
					ui_infield "gs_tw_left_out", posx-cx-2, posy+42, cx, 20 ui_tooltip stCasingUITooltip[2]			! Outside Casing Width Side 2
				endif

				if gs_trim_outside_uniform then
					ui_outfield str(formatt, gs_tw_top_out), posx+29, posy-19, cx/2, 16, 2
				else
					ui_infield "gs_tw_top_out", posx-1+20*(gs_trimtype_out_int = CASING_NORMAL), posy-23, cx, 20 ui_tooltip stCasingUITooltip[3]	! Outside Casing Width Top
				endif

				if bCasingBottomOutside then
					if gs_trim_outside_uniform then
						ui_outfield str(formatt, gs_tw_bottom_out), posx+29, posy+picy+7, cx/2, 16, 2
					else
						ui_infield "gs_tw_bottom_out", posx+19-20*(gs_trimtype_out_int = CASING_COMPLEX), posy+picy+3, cx, 20 ui_tooltip stCasingUITooltip[4]		! Outside Casing Width Bottom
					endif
				endif


				! Casing Overhang Parameters by Casing Type

				if (gs_trimtype_out_int = CASING_OVERHANG) | (gs_trimtype_out_int = CASING_COMPLEX) then

					ui_infield "gs_trimov_top_right_out", posx+78, posy-23, cx, 20 ui_tooltip stCasingUITooltip[9]		! Outside Top Casing Overhang

					if bCasingBottomOutside then
						if (gs_trimtype_out_int = CASING_OVERHANG) then
							ui_infield "gs_trimov_bot_right_out", posx+picx+3, posy+80, cx, 20 ui_tooltip stCasingUITooltip[10]			! Outside Side Casing Overhang
						else
							ui_infield "casingOverhangBottomSideOut", posx+78, posy+picy+3, cx, 20 ui_tooltip stCasingUITooltip[24]	! Outside Bottom Casing Overhang
						endif
					endif
				endif

				if (gs_trimtype_out_int = CASING_COMPLEX) then
					if bArchitraveCapital & not(_bArchitraveCapitalOnSide) then
						ui_infield "architraveCapitalWidth", posx+picx+3, posy+15, cx, 20 ui_tooltip stCasingUITooltip[23]		! Architrave Capital Width
					endif
				endif
			endif

			if (iWindowShape = SHAPE_ARCHED |\
				iWindowShape = SHAPE_ELLIPSEARCH) then

				ui_infield "gs_tw_right_out", posx+picx+3, posy+42, cx, 20 ui_tooltip stCasingUITooltip[8]			! Outside Casing Width

				ui_outfield str(formatt, gs_tw_left_out), posx-cx/2-3, posy+46, cx/2, 16, 1

				ui_outfield str(formatt, gs_tw_top_out), posx+29, posy-19, cx/2, 16, 2

				if bCasingBottomOutside then
					ui_infield "gs_tw_bottom_out", posx+19, posy+picy+3, cx, 20 ui_tooltip stCasingUITooltip[4]		! Outside Casing Width Bottom
				endif
			endif

			if iWindowShape = SHAPE_PENTAGON | iWindowShape = SHAPE_TRAPEZOID then
				ui_infield "gs_tw_right_out", posx+picx+3, posy+42, cx, 20 ui_tooltip stCasingUITooltip[8]			! Outside Casing Width

				ui_outfield str(formatt, gs_tw_left_out), posx-cx/2-3, posy+46, cx/2, 16, 1

				if bCasingBottomOutside then
					ui_infield "gs_tw_bottom_out", posx+19, posy+picy+3, cx, 20 ui_tooltip stCasingUITooltip[4]		! Outside Casing Width Bottom
				endif
			endif

			if iWindowShape = SHAPE_QUARTERROUND then
				ui_infield "gs_tw_right_out", posx-cx-3, posy+42, cx, 20 ui_tooltip stCasingUITooltip[8]			! Outside Casing Width

				if bCasingBottomOutside then
					ui_infield "gs_tw_bottom_out", posx+19, posy+picy+3, cx, 20 ui_tooltip stCasingUITooltip[4]		! Outside Casing Width Bottom
				endif
			endif

			if iWindowShape = SHAPE_HALFCIRCLE then
				ui_infield "gs_tw_right_out", posx+19, posy-23, cx, 20 ui_tooltip stCasingUITooltip[8]				! Outside Casing Width
	
				if bCasingBottomOutside then
					ui_infield "gs_tw_bottom_out", posx+19, posy+picy+3, cx, 20 ui_tooltip stCasingUITooltip[4]		! Outside Casing Width Bottom
				endif
			endif
		endif

	else

		if gs_trim_outside & _bCasingCover & _bShowShape then

			if (iWindowShape = SHAPE_RECTANGULAR) | (iWindowShape = SHAPE_T) | (iWindowShape = SHAPE_HALF_T_LEFT) | (iWindowShape = SHAPE_HALF_T_RIGHT) then

				! Common Casing Size Parameters

				if gs_trim_outside_uniform then
					str_tooltip = stCasingUITooltip[8]		! Outside Casing Width
				else
					str_tooltip = stCasingUITooltip[1]		! Outside Casing Width Side 1
				endif
				ui_infield "gs_tw_right_out", posx+picx+3, posy+42, cx, 20 ui_tooltip str_tooltip

				if gs_trim_outside_uniform then
					ui_outfield str(formatt, gs_tw_left_out), posx-cx/2-3, posy+46, cx/2, 16, 1
				else
					ui_infield "gs_tw_left_out", posx-cx-2, posy+42, cx, 20 ui_tooltip stCasingUITooltip[2]			! Outside Casing Width Side 2
				endif

				if gs_trim_outside_uniform then
					ui_outfield str(formatt, gs_tw_top_out), posx+picx/2-cx/4, posy-19, cx/2, 16, 2
				else
					ui_infield "gs_tw_top_out", posx+picx/2-(cx-18)/2-17*not(gs_trimtype_out_int = CASING_NORMAL) + 5*(iWindowShape = SHAPE_T), posy-23, cx, 20 ui_tooltip stCasingUITooltip[3]	! Outside Casing Width Top
				endif

				if (iWindowShape = SHAPE_T) | (iWindowShape = SHAPE_HALF_T_LEFT) | (iWindowShape = SHAPE_HALF_T_RIGHT) then
					if (iWindowShape = SHAPE_HALF_T_RIGHT) then
						ui_outfield str(formatt, gs_tw_left_out), posx+picx+7, posy+86, cx/2, 16, 0

						if gs_trim_outside_uniform then
							ui_outfield str(formatt, gs_tw_bottom_out), posx+54, posy+picy+7, cx/2, 16, 2
						else
							ui_infield "gs_tw_bottom_out", posx+45, posy+picy+5, cx, 20 ui_tooltip stCasingUITooltip[4]		! Outside Casing Width Bottom
						endif
					else
						ui_outfield str(formatt, gs_tw_left_out), posx-cx/2-3, posy+86, cx/2, 16, 1

						if gs_trim_outside_uniform then
							ui_outfield str(formatt, gs_tw_bottom_out), posx+5, posy+picy+7, cx/2, 16, 2
						else
							ui_infield "gs_tw_bottom_out", posx-4, posy+picy+5, cx, 20 ui_tooltip stCasingUITooltip[4]		! Outside Casing Width Bottom
						endif
					endif

					if (iWindowShape = SHAPE_T) then
						ui_outfield str(formatt, gs_tw_right_out), posx+picx+3, posy+86, cx/2, 16, 0
						ui_outfield str(formatt, gs_tw_bottom_out), posx+picx-cx/2-5, posy+picy+7, cx/2, 16, 2
					endif
				endif


				! Casing Overhang Parameters by Casing Type

				if (gs_trimtype_out_int = CASING_OVERHANG) | (gs_trimtype_out_int = CASING_COMPLEX) then

					ui_infield "gs_trimov_top_right_out", posx+picx-15, posy-23, cx, 20 ui_tooltip stCasingUITooltip[9]		! Outside Top Casing Overhang

					if (gs_trimtype_out_int = CASING_COMPLEX) then
						if bArchitraveCapital & not(_bArchitraveCapitalOnSide) then
							ui_infield "architraveCapitalWidth", posx+picx+3, posy+15, cx, 20 ui_tooltip stCasingUITooltip[23]		! Architrave Capital Width
						endif
					endif

					if (iWindowShape = SHAPE_T) then
						if (gs_trimtype_out_int = CASING_OVERHANG) then
							ui_infield "gs_trimov_bot_right_out", posx+picx+3, posy+65, cx, 20 ui_tooltip stCasingUITooltip[10]			! Outside Side Casing Overhang
						else
							ui_infield "casingOverhangBottomSideOut", posx+picx+3, posy+65, cx, 20 ui_tooltip stCasingUITooltip[24]	! Outside Bottom Casing Overhang
						endif
					endif

					if (iWindowShape = SHAPE_HALF_T_LEFT) | (iWindowShape = SHAPE_HALF_T_RIGHT) then
						if (gs_trimtype_out_int = CASING_OVERHANG) then
							if (iWindowShape = SHAPE_HALF_T_LEFT) then
								ui_infield "gs_trimov_bot_left_out", posx-cx-3, posy+65, cx, 20 ui_tooltip stCasingUITooltip[10]			! Outside Side Casing Overhang
							endif

							if (iWindowShape = SHAPE_HALF_T_RIGHT) then
								ui_infield "gs_trimov_bot_right_out", posx+picx+3, posy+65, cx, 20 ui_tooltip stCasingUITooltip[10]		! Outside Side Casing Overhang
							endif
						else
							if (iWindowShape = SHAPE_HALF_T_RIGHT) then
								ui_infield "casingOverhangBottomSideOut", posx+picx+3, posy+65, cx, 20 ui_tooltip stCasingUITooltip[24]		! Outside Bottom Casing Overhang
							else
								ui_infield "casingOverhangBottomSideOut", posx-cx-3, posy+65, cx, 20 ui_tooltip stCasingUITooltip[24]		! Outside Bottom Casing Overhang
							endif
						endif
					endif
				endif
			endif

			if (iWindowShape = SHAPE_ARCHED_T) | (iWindowShape = SHAPE_ARCHED_HALF_T_LEFT) | (iWindowShape = SHAPE_ARCHED_HALF_T_RIGHT) then

				ui_infield "gs_tw_right_out", posx+picx+3, posy+42, cx, 20 ui_tooltip stCasingUITooltip[8]		! Outside Casing Width
				ui_outfield str(formatt, gs_tw_left_out), posx-cx/2-3, posy+46, cx/2, 16, 1
				ui_outfield str(formatt, gs_tw_top_out), posx+picx/2-cx/4, posy-19, cx/2, 16, 2

				if (iWindowShape = SHAPE_ARCHED_HALF_T_RIGHT) then
					ui_outfield str(formatt, gs_tw_left_out), posx+picx+7, posy+86, cx/2, 16, 0
					ui_infield "gs_tw_bottom_out", posx+45, posy+picy+5, cx, 20 ui_tooltip stCasingUITooltip[4]		! Outside Casing Width Bottom
				else
					ui_outfield str(formatt, gs_tw_left_out), posx-cx/2-3, posy+86, cx/2, 16, 1
					ui_infield "gs_tw_bottom_out", posx-4, posy+picy+5, cx, 20 ui_tooltip stCasingUITooltip[4]		! Outside Casing Width Bottom
				endif
				if (iWindowShape = SHAPE_ARCHED_T) then
					ui_outfield str(formatt, gs_tw_right_out), posx+picx+3, posy+86, cx/2, 16, 0
					ui_outfield str(formatt, gs_tw_bottom_out), posx+picx-cx/2-5, posy+picy+7, cx/2, 16, 2
				endif
			endif
		endif

	endif


	! --------------------------------------------------------------------------------
	! Vertical separator if the shape is showing
	! --------------------------------------------------------------------------------

	sepx = sepx * _bShowShape
	if sepx > 0 then
		ui_separator sepx, sepy+4, sepx, 266
	endif


	! --------------------------------------------------------------------------------
	! DW Outside Casing Section
	! --------------------------------------------------------------------------------

	picx = 99
	picy = 98
	posx = round_int((sepx+440)/2 - picx/2)
	posy = round_int((sepy+266)/2 - picy/2)
	_bShowCasingWidth = not(_bShowShape)

	if gs_trim_outside then
		if _bCasingCover then
			if _bShowCasingWidth then
				if bExtSliding then
					ui_pict 58, posx, posy, picx, picy, 1			! DExt_OutCasSectionWithCasWidth.png
				else
					ui_pict 2, posx, posy, picx, picy, 1			! DW_OutCasSectionWithCasWidth.png
				endif
				ui_infield "gs_trim_thk_out", posx-cx-3, posy+7, cx, 20 ui_tooltip stCasingUITooltip[5]		! Outside Casing Thickness on Wall
				ui_infield "gs_tw_right_out", posx-18, posy-23, cx, 20 ui_tooltip stCasingUITooltip[8]		! Outside Casing Casing Width
				ui_infield "gs_trim_offs_out", posx+59, posy-23, cx, 20 ui_tooltip stCasingUITooltip[7]		! Outside Casing Offset
			else
				if bExtSliding then
					if iRevealType = REVEAL_EDGE then
						ui_pict 489, posx, posy, picx, picy, 1			! DExt_OutCasSectionNoRevealEdge.png
					else
						ui_pict 57, posx, posy, picx, picy, 1			! DExt_OutCasSection.png
					endif
				else
					if _bPocketDoor then
						if gs_frame_wthk then
							ui_pict 496, posx, posy, picx, picy, 1			! DPocket_OutCasSectionCasWallThkFr.png					
						else
							if iRevealType = REVEAL_EDGE then
								ui_pict 500, posx, posy, picx, picy, 1		! DPocket_OutCasSectionCasNoRevealEdge.png
							else
								ui_pict 499, posx, posy, picx, picy, 1		! DPocket_OutCasSectionCas.png
							endif
						endif
					else
						ui_pict 1, posx, posy, picx, picy, 1			! DW_OutCasSection.png
					endif
				endif
				ui_infield "gs_trim_thk_out", posx-27, posy-23, cx, 20 ui_tooltip stCasingUITooltip[5]		! Outside Casing Thickness on Wall
				ui_infield "gs_trim_offs_out", posx+50, posy-23, cx, 20 ui_tooltip stCasingUITooltip[7]		! Outside Casing Offset
			endif
		else
			if _bPocketDoor then
				ui_pict 498, posx, posy, picx, picy, 1			! DPocket_OutCasSectionNoCasCover.png
			else
				ui_pict 3, posx, posy, picx, picy, 1			! DW_OutCasSectionNoCasCover.png
			endif

			ui_infield "gs_trim_jambext_nosing_out", posx-27, posy-23, cx, 20 ui_tooltip stCasingUITooltip[11]	! Outer Nosing
		endif

		ui_infield "gs_trim_width_out", posx+36, posy+98+3, cx, 20 ui_tooltip stCasingUITooltip[6]	! Outside Casing Thickness in Wallhole
	else
		if bExtSliding then
			ui_pict 59, posx, posy, picx, picy, 1			! DExt_OutCasSectionNoCas.png
		else
			if _bPocketDoor then
				if gs_frame_wthk then
					ui_pict 495, posx, posy, picx, picy, 1			! DPocket_OutCasSectionNoCasWallThkFr.png					
				else
					ui_pict 497, posx, posy, picx, picy, 1			! DPocket_OutCasSectionNoCas.png
				endif
			else
				ui_pict 4, posx, posy, picx, picy, 1			! DW_OutCasSectionNoCas.png
			endif
		endif
	endif



endif


! ================================================================================
! DW Inside Casing UI - INT
! ================================================================================

if bCasingInPage then

	if not(bTelescopic) then

		pageStartY	= 3

		if	gs_trim_inside_uniform						|\
			iWindowShape = SHAPE_PENTAGON				|\
			iWindowShape = SHAPE_TRAPEZOID				|\
			iWindowShape = SHAPE_ARCHED					|\
			iWindowShape = SHAPE_ELLIPSEARCH			|\
			iWindowShape = SHAPE_T						|\
			iWindowShape = SHAPE_HALF_T_LEFT			|\
			iWindowShape = SHAPE_HALF_T_RIGHT			|\
			iWindowShape = SHAPE_ARCHED_T				|\
			iWindowShape = SHAPE_ARCHED_HALF_T_LEFT		|\
			iWindowShape = SHAPE_ARCHED_HALF_T_RIGHT	|\
			not(iCasingWidthControl = FULL_EDITABLE)	|\
			(iCasingWidthControl = SIDE_EDITABLE)		then
	
			n = request("Working_length_unit", "", formatt)
		endif

		x1 = 0
		x2 = 15
		x3 = 240
		x4 = 430

		cx = 70
		cy = 19
		y = pageStartY
		dy = 20

		dy = 20
		cx2 = 110

		! --------------------------------------------------------------------------------
		! DW Inside Casing Header - Left Side !
		! --------------------------------------------------------------------------------

		ui_style 0, 1
		ui_infield{3} "gs_trim_inside", x1, y, x3-x1-1, cy,
			7, "",
			1,
			1, 0, 0, 0, 0,
			"", stCasingUI[2], 0,	! Inside Casing
			"", stCasingUI[2], 1	! Inside Casing
		y = y + dy + 4

		ui_style 0, 0

		! Inside Casing Uniform Checkbox
		! --------------------------------------------------------------------------------
		if bEnableUniformCasing then
			ui_infield{3} "gs_trim_inside_uniform", x2, y, x4 - x2, cy,
					7, "",
					1,
					1, 0, 0, 0, 0,
					"", stCasingUI[3], 0,	! Uniform Casing Widths
					"", stCasingUI[3], 1	! Uniform Casing Widths

			y = y + dy
		endif

		! Cover Inner Wall Surface Checkbox
		! --------------------------------------------------------------------------------
		if _bEnableSwitchableInCasCover then
			ui_infield{3} "gs_trim_show_cover_in", x2, y, x4 - x2, cy,
					7, "",
					1,
					1, 0, 0, 0, 0,
					"", stCasingUI[17], 0,	! Cover Inner Wall Surface
					"", stCasingUI[17], 1	! Cover Inner Wall Surface

			y = y + dy
		endif

		_y_left = y


		! --------------------------------------------------------------------------------
		! Inside Casing Header - Right Side!
		! --------------------------------------------------------------------------------

		y = pageStartY
		ui_style 0, 0

		! Inside Casing Type Selector
		! --------------------------------------------------------------------------------
		if gs_CasingInTypeEnable > 1 then
			ui_infield{3} "gs_trimtype_in_int", x3, y, x4-x3, cy,
				8, "",
				1,
				1, 0, 0, 0, 0,
				"",	stCasingType[1],	CASING_NORMAL,
				"",	stCasingType[2],	CASING_OVERHANG

			y = y + dy + 6
		endif

		_y_right = y


		! --------------------------------------------------------------------------------
		! Horizontal separator
		! --------------------------------------------------------------------------------
		sepy = max(_y_left, _y_right) + 4
		ui_separator 0, sepy, 444, sepy

		gosub "insideWarning"


		! --------------------------------------------------------------------------------
		! DW Inside Casing Shapes
		! --------------------------------------------------------------------------------
		_iCasingType		= gs_trimtype_in_int
		_bCasing			= gs_trim_inside
		_bCasingCover		= gs_trim_show_cover_in
		_bShowBottomCasing	= 1

		gosub "shapePictures"


		! Inside Casing Parameters
		! -------------------------------------------------------------------------------

		if isWindow then	! Casing parameters to window shapes

			if gs_trim_inside & _bCasingCover & _bShowShape then

				if iWindowShape = SHAPE_RECTANGULAR then

					! Common Casing Size Parameters

					if gs_trim_inside_uniform then
						str_tooltip = stCasingUITooltip[20]		! Inside Casing Width
					else
						str_tooltip = stCasingUITooltip[13]		! Inside Casing Width Side 1
					endif
					ui_infield "gs_tw_right_in", posx+picx+3, posy+42, cx, 20 ui_tooltip str_tooltip

					if gs_trim_inside_uniform then
						ui_outfield str(formatt, gs_tw_left_in), posx-cx/2-3, posy+46, cx/2, 16, 1
					else
						ui_infield "gs_tw_left_in", posx-cx-2, posy+42, cx, 20 ui_tooltip stCasingUITooltip[14]			! Inside Casing Width Side 2
					endif

					if gs_trim_inside_uniform then
						ui_outfield str(formatt, gs_tw_top_in), posx+29, posy-19, cx/2, 16, 2
					else
						ui_infield "gs_tw_top_in", posx-1+20*(gs_trimtype_in_int = CASING_NORMAL), posy-23, cx, 20 ui_tooltip stCasingUITooltip[15]	! Inside Casing Width Top
					endif

					if gs_trim_inside_uniform then
						ui_outfield str(formatt, gs_tw_bottom_in), posx+29, posy+picy+7, cx/2, 16, 2
					else
						ui_infield "gs_tw_bottom_in", posx+19, posy+picy+3, cx, 20 ui_tooltip stCasingUITooltip[16]	! Inside Casing Width Bottom
					endif


					! Casing Overhang Parameters by Casing Type

					if (gs_trimtype_in_int = CASING_OVERHANG) then
						ui_infield "gs_trimov_top_right_in", posx+78, posy-23, cx, 20 ui_tooltip stCasingUITooltip[21]		! Inside Top Casing Overhang

						ui_infield "gs_trimov_bot_right_in", posx+picx+3, posy+80, cx, 20 ui_tooltip stCasingUITooltip[22]			! Inside Side Casing Overhang
					endif
				endif

				if (iWindowShape = SHAPE_ARCHED |\
					iWindowShape = SHAPE_ELLIPSEARCH) then

					ui_infield "gs_tw_right_in", posx+picx+3, posy+42, cx, 20 ui_tooltip stCasingUITooltip[20]		! Inside Casing Width

					ui_outfield str(formatt, gs_tw_left_in), posx-cx/2-3, posy+46, cx/2, 16, 1

					ui_outfield str(formatt, gs_tw_top_in), posx+29, posy-19, cx/2, 16, 2

					ui_infield "gs_tw_bottom_in", posx+19, posy+picy+3, cx, 20 ui_tooltip stCasingUITooltip[16]		! Inside Casing Width Bottom
				endif

				if iWindowShape = SHAPE_PENTAGON | iWindowShape = SHAPE_TRAPEZOID then
					ui_infield "gs_tw_right_in", posx+picx+3, posy+42, cx, 20 ui_tooltip stCasingUITooltip[20]		! Inside Casing Width

					ui_outfield str(formatt, gs_tw_left_in), posx-cx/2-3, posy+46, cx/2, 16, 1

					ui_infield "gs_tw_bottom_in", posx+19, posy+picy+3, cx, 20 ui_tooltip stCasingUITooltip[16]		! Inside Casing Width Bottom
				endif

				if iWindowShape = SHAPE_QUARTERROUND then
					ui_infield "gs_tw_right_in", posx-cx-3, posy+42, cx, 20 ui_tooltip stCasingUITooltip[20]		! Inside Casing Width

					ui_infield "gs_tw_bottom_in", posx+19, posy+picy+3, cx, 20 ui_tooltip stCasingUITooltip[16]		! Inside Casing Width Bottom
				endif

				if iWindowShape = SHAPE_HALFCIRCLE then
					ui_infield "gs_tw_right_in", posx+19, posy-23, cx, 20 ui_tooltip stCasingUITooltip[20]			! Inside Casing Width

					ui_infield "gs_tw_bottom_in", posx+19, posy+picy+3, cx, 20 ui_tooltip stCasingUITooltip[16]		! Inside Casing Width Bottom
				endif
			endif

		else

			if gs_trim_inside & _bCasingCover & _bShowShape then

				if (iWindowShape = SHAPE_RECTANGULAR) | (iWindowShape = SHAPE_T) | (iWindowShape = SHAPE_HALF_T_LEFT) | (iWindowShape = SHAPE_HALF_T_RIGHT) then

					! Common Casing Size Parameters

					if gs_trim_inside_uniform then
						str_tooltip = stCasingUITooltip[20]		! Inside Casing Width
					else
						str_tooltip = stCasingUITooltip[13]		! Inside Casing Width Side 1
					endif
					ui_infield "gs_tw_right_in", posx+picx+3, posy+42, cx, 20 ui_tooltip str_tooltip

					if gs_trim_inside_uniform then
						ui_outfield str(formatt, gs_tw_left_in), posx-cx/2-3, posy+46, cx/2, 16, 1
					else
						ui_infield "gs_tw_left_in", posx-cx-2, posy+42, cx, 20 ui_tooltip stCasingUITooltip[14]			! Inside Casing Width Side 2
					endif

					if gs_trim_inside_uniform then
						ui_outfield str(formatt, gs_tw_top_in), posx+picx/2-cx/4, posy-19, cx/2, 16, 2
					else
						ui_infield "gs_tw_top_in", posx+picx/2-(cx-18)/2-17*not(gs_trimtype_in_int = CASING_NORMAL) + 5*(iWindowShape = SHAPE_T), posy-23, cx, 20 ui_tooltip stCasingUITooltip[15]	! Inside Casing Width Top
					endif

					if (iWindowShape = SHAPE_T) | (iWindowShape = SHAPE_HALF_T_LEFT) | (iWindowShape = SHAPE_HALF_T_RIGHT) then
						if (iWindowShape = SHAPE_HALF_T_RIGHT) then
							ui_outfield str(formatt, gs_tw_left_in), posx+picx+7, posy+86, cx/2, 16, 0

							if gs_trim_inside_uniform then
								ui_outfield str(formatt, gs_tw_bottom_in), posx+54, posy+picy+7, cx/2, 16, 2
							else
								ui_infield "gs_tw_bottom_in", posx+45, posy+picy+5, cx, 20 ui_tooltip stCasingUITooltip[16]		! Inside Casing Width Bottom
							endif
						else
							ui_outfield str(formatt, gs_tw_left_in), posx-cx/2-3, posy+86, cx/2, 16, 1

							if gs_trim_inside_uniform then
								ui_outfield str(formatt, gs_tw_bottom_in), posx+5, posy+picy+7, cx/2, 16, 2
							else
								ui_infield "gs_tw_bottom_in", posx-4, posy+picy+5, cx, 20 ui_tooltip stCasingUITooltip[16]		! Inside Casing Width Bottom
							endif
						endif

						if (iWindowShape = SHAPE_T) then
							ui_outfield str(formatt, gs_tw_right_in), posx+picx+3, posy+86, cx/2, 16, 0
							ui_outfield str(formatt, gs_tw_bottom_in), posx+picx-cx/2-5, posy+picy+7, cx/2, 16, 2
						endif
					endif


					! Casing Overhang Parameters by Casing Type

					if (gs_trimtype_in_int = CASING_OVERHANG) then

						ui_infield "gs_trimov_top_right_in", posx+picx-15, posy-23, cx, 20 ui_tooltip stCasingUITooltip[21]			! Inside Top Casing Overhang

						if (iWindowShape = SHAPE_T) then
							ui_infield "gs_trimov_bot_right_in", posx+picx+3, posy+65, cx, 20 ui_tooltip stCasingUITooltip[22]		! Inside Side Casing Overhang
						endif

						if (iWindowShape = SHAPE_HALF_T_LEFT) then
							ui_infield "gs_trimov_bot_left_in", posx-cx-3, posy+65, cx, 20 ui_tooltip stCasingUITooltip[22]		! Inside Side Casing Overhang
						endif

						if (iWindowShape = SHAPE_HALF_T_RIGHT) then
							ui_infield "gs_trimov_bot_right_in", posx+picx+3, posy+65, cx, 20 ui_tooltip stCasingUITooltip[22]		! Inside Side Casing Overhang
						endif
					endif
				endif

				if (iWindowShape = SHAPE_ARCHED_T) | (iWindowShape = SHAPE_ARCHED_HALF_T_LEFT) | (iWindowShape = SHAPE_ARCHED_HALF_T_RIGHT) then

					ui_infield "gs_tw_right_in", posx+picx+3, posy+42, cx, 20 ui_tooltip stCasingUITooltip[20]		! Inside Casing Width
					ui_outfield str(formatt, gs_tw_left_in), posx-cx/2-3, posy+46, cx/2, 16, 1
					ui_outfield str(formatt, gs_tw_top_in), posx+picx/2-cx/4, posy-19, cx/2, 16, 2

					if (iWindowShape = SHAPE_ARCHED_HALF_T_RIGHT) then
						ui_outfield str(formatt, gs_tw_left_in), posx+picx+7, posy+86, cx/2, 16, 0
						ui_infield "gs_tw_bottom_in", posx+45, posy+picy+5, cx, 20 ui_tooltip stCasingUITooltip[16]	! Inside Casing Width Bottom
					else
						ui_outfield str(formatt, gs_tw_left_in), posx-cx/2-3, posy+86, cx/2, 16, 1
						ui_infield "gs_tw_bottom_in", posx-4, posy+picy+5, cx, 20 ui_tooltip stCasingUITooltip[16]		! Inside Casing Width Bottom
					endif

					if (iWindowShape = SHAPE_ARCHED_T) then
						ui_outfield str(formatt, gs_tw_right_in), posx+picx+3, posy+86, cx/2, 16, 0
						ui_outfield str(formatt, gs_tw_bottom_in), posx+picx-cx/2-5, posy+picy+7, cx/2, 16, 2
					endif
				endif
			endif

		endif
	

		! --------------------------------------------------------------------------------
		! Vertical separator if the shape is showing
		! --------------------------------------------------------------------------------

		sepx = sepx * _bShowShape
		if sepx > 0 then
			ui_separator sepx, sepy+4, sepx, 266
		endif
	

		! --------------------------------------------------------------------------------
		! DW Inside Casing Section
		! --------------------------------------------------------------------------------

		posx = 100
		posy = 150

		picx = 99
		picy = 98
		posx = round_int((sepx+440)/2 - picx/2)
		posy = round_int((sepy+266)/2 - picy/2)
		_bShowCasingWidth = not(_bShowShape)

		if gs_trim_inside then
			if _bCasingCover then
				if _bShowCasingWidth then
					if bExtSliding then
						ui_pict 61, posx, posy, picx, picy, 1			! DExt_InCasSectionWithCasWidth.png
					else
						ui_pict 6, posx, posy, picx, picy, 1			! DW_InCasSectionWithCasWidth.png
					endif

					ui_infield "gs_trim_thk_in", posx-cx-3, posy+70, cx, 20 ui_tooltip stCasingUITooltip[17]		! Inside Casing Thickness on Wall
					ui_infield "gs_tw_right_in", posx-18, posy+picy+3, cx, 20 ui_tooltip stCasingUITooltip[20]		! Inside Casing Casing Width
					ui_infield "gs_trim_offs_in", posx+59, posy+picy+3, cx, 20 ui_tooltip stCasingUITooltip[19]		! Inside Casing Offset
				else
					if bExtSliding then
						ui_pict 60, posx, posy, picx, picy, 1			! DExt_InCasSection.png
					else
						if _bPocketDoor then
							if gs_frame_wthk then
								ui_pict 491, posx, posy, picx, picy, 1		! DPocket_InCasSectionCasWallThkFr.png					
							else
								ui_pict 494, posx, posy, picx, picy, 1		! DPocket_InCasSectionCas.png
							endif
						else
							ui_pict 5, posx, posy, picx, picy, 1			! DW_InCasSection.png
						endif
					endif

					ui_infield "gs_trim_thk_in", posx-27, posy+picy+3, cx, 20 ui_tooltip stCasingUITooltip[17]		! Inside Casing Thickness on Wall
					ui_infield "gs_trim_offs_in", posx+50, posy+picy+3, cx, 20 ui_tooltip stCasingUITooltip[19]		! Inside Casing Offset
				endif
			else
				if bExtSliding then
					ui_pict 62, posx, posy, picx, picy, 1			! DExt_InCasSectionNoCasCover.png
				else
					if _bPocketDoor then
						ui_pict 493, posx, posy, picx, picy, 1			! DPocket_InCasSectionNoCasCover.png
					else
						ui_pict 7, posx, posy, picx, picy, 1			! DW_InCasSectionNoCasCover.png
					endif
				endif

				ui_infield "gs_trim_jambext_nosing_in", posx-27, posy+picy+3, cx, 20 ui_tooltip stCasingUITooltip[12]	! Inner Nosing
			endif

			ui_infield "gs_trim_width_in", posx+36, posy-23, cx, 20 ui_tooltip stCasingUITooltip[18]	! Inside Casing Thickness in Wallhole
		else
			if bExtSliding then
				ui_pict 63, posx, posy, picx, picy, 1			! DExt_InCasSectionNoCas.png
			else
				if _bPocketDoor then
					if gs_frame_wthk then
						ui_pict 490, posx, posy, picx, picy, 1			! DPocket_InCasSectionNoCasWallThkFr.png					
					else
						ui_pict 492, posx, posy, picx, picy, 1			! DPocket_InCasSectionNoCas.png
					endif
				else
					ui_pict 8, posx, posy, picx, picy, 1			! DW_InCasSectionNoCas.png
				endif
			endif
		endif

	endif


	if bTelescopic then

		pageStartY	= 7
		y0			= 20 + pageStartY 

		if	gs_trim_inside_uniform						|\
			not(iCasingWidthControl = FULL_EDITABLE)	|\
			(iCasingWidthControl = SIDE_EDITABLE)		then

			n = request("Working_length_unit", "", formatt)
		endif

		x1 = 0
		x2 = 222
		x3 = 440
		cx = 70
		cy = 19
		y = 5 + pageStartY
		dy = 20

		ui_style 0, 1
		ui_infield{3} "gs_trim_inside", x1, y+5, x2-x1-1, cy,
				7, "",
				1,
				1, 0, 0, 0, 0,
				"", stCasingUI[2], 0,		! Inside Casing
				"", stCasingUI[2], 1		! Inside Casing

		ui_style 0, 0
		y = y + dy + 6

		if bEnableUniformCasing then
			ui_infield{3} "gs_trim_inside_uniform", x1, y+5, x3-x2, cy,
					7, "",
					1,
					1, 0, 0, 0, 0,
					"", stCasingUI[3], 0,	! Uniform Casing Widths
					"", stCasingUI[3], 1	! Uniform Casing Widths
		endif

		sepy = 35 + y0


		! --------------------------------------------------------------------------------
		! Horizontal separator
		! --------------------------------------------------------------------------------

		ui_separator 0, sepy, 444, sepy

		gosub "insideWarning"

		! ------ Horizontal Section
		posx = 0
		posy = 82 + y0
		cx = 70

		if gs_trim_inside then
			if gs_trim_inside_uniform then
				str_tooltip = stCasingUITooltip[20]		! Inside Casing Width
			else
				str_tooltip = stCasingUITooltip[13]		! Inside Casing Width Side 1
			endif

			ui_pict 482, posx, posy, 199, 97, 1			! telescopic_wallcover.png

			if gs_trim_inside_uniform then
				ui_outfield str(formatt, gs_tw_left_in), posx+11, posy+104, cx/2, 16, 2 ui_tooltip stCasingUITooltip[14]
			else
				ui_infield "gs_tw_left_in", posx, posy+100, cx, 20 ui_tooltip stCasingUITooltip[14]			! Inside Casing Width Side 2
			endif
			ui_infield "gs_tw_right_in", posx+(cx+5)*2-21, posy+100, cx, 20 ui_tooltip str_tooltip
			ui_infield "gs_trim_thk_in", posx+202, posy+73, cx, 20 ui_tooltip stCasingUITooltip[17]			! Inside Casing Thickness on Wall
			ui_infield "gs_trim_width_in", posx+15, posy-23, cx, 20 ui_tooltip stCasingUITooltip[18]		! Inside Casing Thickness in Wallhole
		else
			ui_pict 483, posx, posy, 199, 97, 1			! telescopic_wallcover_no.png
		endif

		! ------ Vertical Section
		posx = 279
		posy = 51 + y0
		dist = 45

		if gs_trim_inside then
			ui_pict 484, posx+7, posy, 84, 46, 1			! telescopic_wallcover_top.png

			if gs_trim_inside_uniform then
				ui_outfield str(formatt, gs_tw_top_in), posx+96, posy+22, cx/2, 16, 0
			else
				ui_infield "gs_tw_top_in", posx+94, posy+18, cx, 20 ui_tooltip stCasingUITooltip[15]		! Inside Casing Width Top
			endif
		else
			ui_pict 485, posx+7, posy, 84, 46, 1			! telescopic_wallcover_top_no.png

		endif
		ui_pict 481, posx+7*bTelescopic, posy+88+dist, 68, 42, 1		! telescopic_wallcover_bottom.png

	endif

endif


! ==============================================================================
! --- USA Window Casing Tabpage ---
! ==============================================================================

if bCasingPageUSA & isWindow then

	y0	 = 5
	
	sepx = 230

	flox = 140
	floy = 142
	secx = 142
	secy = 115

	pos1_x = 75
	pos1_y = 40 + y0

	pos2_x = sepx + 40
	pos2_y = 20 + y0

	descx = 70
	rowy = 18

	ui_style 0,1
	ui_infield{3} "gs_trim_outside", 70, y0, 150, rowy,
			7, "",
			2,
			1, 20, 20, 20, 20,
			0, stCasingTextUSA[9], 0,	! Outside
			1, stCasingTextUSA[9], 1

	ui_infield{3} "gs_trim_inside", 70, 206 + y0, 150, rowy,
			7, "",
			2,
			1, 20, 20, 20, 20,
			0, stCasingTextUSA[8], 0,	! Inside
			1, stCasingTextUSA[8], 1

	if bInsideCasingNotAvailableByReveal | bInsideCasingNotAvailableByWallType then
		y2 = 193 + y0
		ui_pict 446, 0, y2, 12, 12, 1	! ui_warningsign.png
		ui_style 0,0
		idx = 26 + (not(bInsideCasingNotAvailableByReveal) & bInsideCasingNotAvailableByWallType)
		ui_outfield stCasingTextUSA[idx], 20, y2, 200, 15

		gs_trim_inside = 0
	endif

	ui_style 0,0

	! Pict Index ---------------------------------------------------[

	ui_separator pos1_x + flox + 15, 5 + y0, pos1_x + flox + 15, 230 + y0

	! Wall Pict
	pictx_w1 = 65
	picty_w1 = 45
	pictx_w2 = 45
	picty_w2 = 40
	indexWallPict = 152	! 152 - 153
	indexWallSectPict = 186	! 186 - 187
	if gs_wt_m > 1 then	! Solid Wall, Custom Closure
		indexWallPict = indexWallPict + 1
		indexWallSectPict = indexWallSectPict + 1
	endif

	! Sash Pict
	pictx_s1 = 75
	picty_s1 = 45
	pictx_s2 = 45
	picty_s2 = 75
	indexOpPict = 154	! 154 - 165
	indexOpSectPict = 188	! 188 - 189
	if not(bOpeningDirection) then	! Outside Opening Direction
		indexOpPict = indexOpPict + 4
		indexOpSectPict = indexOpSectPict + 1
		if gs_trim_outside then
			if (gs_wt_m=1 AND ABS(WIDO_SILL) < EPS) OR gs_wt_m=2 OR gs_wt_m=3 OR gs_wt_m=4 then
				indexOpPict = indexOpPict + 4
			endif
		endif
	endif

	if not(gs_sill_outside) then
		if not(gs_board_inside) then
			indexOpPict = indexOpPict + 0	! No Sill & No Board
		else
			indexOpPict = indexOpPict + 1	! Board
		endif
	else
		if not(gs_board_inside) then
			indexOpPict = indexOpPict + 2	! Sill
		else
			indexOpPict = indexOpPict + 3	! Sill & Board
		endif
	endif

	! Outside Pict
	pictx_o1 = 140
	picty_o1 = 33
	pictx_o2 = 33
	picty_o2 = 115
	indexOutPict = 166	! 166 - 177
	indexOutSectPict = 190	! 190 - 195
	if gs_wt_m = 3 then	! Stud Wall
		indexOutPict = indexOutPict + 4
		indexOutSectPict = indexOutSectPict + 2
	endif
	if gs_wt_m = 4 then	! Brick Veneer
		indexOutPict = indexOutPict + 8
		indexOutSectPict = indexOutSectPict + 4
	endif

	if not(gs_sill_outside) then
		if not(gs_trim_outside) then
			indexOutPict = indexOutPict + 0	! No Sill & No Casing
			! if gs_wt_m = 1 then no pict
		else
			if (gs_wt_m=1 AND ABS(WIDO_SILL) < EPS) OR gs_wt_m=2 OR gs_wt_m=3 OR gs_wt_m=4 then
				indexOutPict = indexOutPict + 1		! No Sill & Casing, with Casing Offset
			else
				indexOutPict = indexOutPict + 320	! No Sill & Casing, without Casing Offset
			endif
		endif
	else
		if not(gs_trim_outside) then
			indexOutPict = indexOutPict + 2	! Sill & No Casing
		else
			if (gs_wt_m=1 AND ABS(WIDO_SILL) < EPS) OR gs_wt_m=2 OR gs_wt_m=3 OR gs_wt_m=4 then
				indexOutPict = indexOutPict + 3		! Sill & Casing, with Casing Offset
			else
				indexOutPict = indexOutPict + 321	! Sill & Casing, without Casing Offset
			endif
		endif
	endif

	if gs_trim_outside then
		indexOutSectPict = indexOutSectPict + 1
	endif

	! Inside Pict
	pictx_i1 = 140
	picty_i1 = 64
	pictx_i2 = 64
	picty_i2 = 115
	indexInPict = 178	! 178 - 185
	indexInSectPict = 196	! 196 - 199
	if gs_wt_m > 1 then
		indexInPict = indexInPict + 4
		indexInSectPict = indexInSectPict + 2
	endif

	if not(gs_board_inside) then
		if not(gs_trim_inside) then
			indexInPict = indexInPict + 0	! No Board & No Casing
			! if gs_wt_m = 1 then no pict
		else
			indexInPict = indexInPict + 1	! No Board & Casing
		endif
	else
		if not(gs_trim_inside) then
			indexInPict = indexInPict + 2	! Board & No Casing
		else
			indexInPict = indexInPict + 3	! Board & Casing
		endif
	endif

	if gs_trim_inside then
		indexInSectPict = indexInSectPict + 1
	endif

	! Pict Index ---------------------------------------------------]

	if indexOutPict <> 166 then	! clear area
		ui_pict indexOutPict, pos1_x, pos1_y, pictx_o1, picty_o1, 1
	endif
	if indexOutSectPict <> 190 then	! clear area
		ui_pict indexOutSectPict, pos2_x, pos2_y, pictx_o2, picty_o2, 1
	endif

	ui_pict indexWallPict, pos1_x, pos1_y + picty_o1, pictx_w1, picty_w1, 1
	ui_pict indexWallSectPict, pos2_x + pictx_o2, pos2_y, pictx_w2, picty_w2, 1

	ui_pict indexOpPict, pos1_x + pictx_w1, pos1_y + picty_o1, pictx_s1, picty_s1, 1
	ui_pict indexOpSectPict, pos2_x + pictx_o2, pos2_y + picty_w2, pictx_s2, picty_s2, 1

	ui_pict indexInPict, pos1_x, pos1_y + picty_o1 + picty_w1, pictx_i1, picty_i1, 1
	ui_pict indexInSectPict, pos2_x + pictx_o2 + pictx_w2, pos2_y, pictx_i2, picty_i2, 1


	if gs_trim_inside then
		ui_infield "gs_trim_width_in", pos1_x - descx - 1, pos1_y + 100, descx, rowy ui_tooltip stCasingTextUSA[21]		! Jamb Extension Width
		ui_infield "gs_trim_thk_in",pos1_x - descx - 1, pos1_y + 125, descx, rowy ui_tooltip stCasingTextUSA[23]		! Casing Thickness Inside

		ui_infield "gs_tw_right_in", pos1_x, pos1_y + 145, descx, rowy ui_tooltip stCasingTextUSA[20]					! Side Casing Width Inside
		if (gs_wt_m=1 & gs_trim_width_in > EPS) | gs_wt_m=2 | gs_wt_m=3 | gs_wt_m=4 then
			ui_infield "gs_trim_offs_in",pos1_x + descx + 1, pos1_y + 145, descx, rowy ui_tooltip stCasingTextUSA[22]	! Casing Offset Inside
		endif

		ui_infield "gs_tw_top_in", 444 - descx - 10, y0 - 3, descx, rowy ui_tooltip stCasingTextUSA[25]		! Head Casing Width Inside
	endif

	if gs_trim_outside then
		ui_infield "gs_tw_right_out", pos1_x, pos1_y - 20, descx, rowy ui_tooltip stCasingTextUSA[16]					! Side Casing Width Outside
		ui_infield "gs_trim_thk_out",pos1_x - descx - 1, pos1_y + 22, descx, rowy ui_tooltip stCasingTextUSA[19]		! Casing Thickness Outside

		if (gs_wt_m=1 AND ABS(WIDO_SILL) < EPS) OR gs_wt_m=2 OR gs_wt_m=3 OR gs_wt_m=4 then
			ui_infield "gs_trim_offs_out", pos1_x + descx + 1, pos1_y - 20, descx, rowy ui_tooltip stCasingTextUSA[18]	! Casing Offset Outside
		endif

		ui_infield "gs_tw_top_out", sepx + 14, y0 - 3, descx, rowy ui_tooltip stCasingTextUSA[24]		! Head Casing Width Outside
	endif


	! Casing Overhangs
	pos_x = sepx + 14
	pos_y = pos2_y + secy + 2
	descx = 135
	contx = 50
	dy = 23

	if gs_trim_outside then
		if (gs_wt_m=2 | gs_wt_m=1 & ABS(WIDO_SILL) < EPS | gs_wt_m=3) then
			if gs_win_type < 63 then
				ui_outfield stCasingTextUSA[1], pos_x, pos_y, descx, rowy			! Brick Mold. Top Overh.
				ui_infield "gs_trimov_top_right_out", pos_x + descx + 1, pos_y, contx , rowy
				pos_y = pos_y + dy
			endif

			if gs_win_type < 73 then
				ui_outfield stCasingTextUSA[2], pos_x, pos_y, descx, rowy			! Brick Mold. Bot. Overh.
				ui_infield "gs_trimov_bot_right_out", pos_x + descx + 1, pos_y, contx , rowy
				pos_y = pos_y + dy
			endif
		endif
	endif

	if gs_trim_inside then
		if (gs_wt_m > 1 | gs_wt_m = 1 & gs_trim_width_in > 0) then
			if gs_win_type < 63 then
				ui_outfield stCasingTextUSA[3],  pos_x, pos_y, descx, rowy			! Casing Trim Top Overh.
				ui_infield "gs_trimov_top_right_in", pos_x + descx + 1, pos_y, contx , rowy
				pos_y = pos_y + dy
			endif

			if gs_win_type < 73 then
				ui_outfield stCasingTextUSA[4],  pos_x, pos_y, descx, rowy			! Casing Trim Bot. Overh.
				ui_infield "gs_trimov_bot_right_in", pos_x + descx + 1, pos_y, contx , rowy
				pos_y = pos_y + dy
			endif
		endif
	endif

endif


! ==============================================================================
! --- USA Door Casing Tabpage ---
! ==============================================================================

if bCasingPageUSA & not(isWindow) then
	bPocketDoor = (iDoorType = 39 | iDoorType = 40)

		y0	 = 5

		sepx = 230
		flox = 140
		floy = 142
		secx = 142
		secy = 115

		pos1_x = 75
		pos1_y = 40 + y0

		pos2_x = sepx + 40
		pos2_y = 45 + y0

		descx = 70
		rowy = 18

		ui_style 0,1
		ui_infield{3} "gs_trim_outside", 70, y0, 150, rowy,
				7, "",
				2,
				1, 20, 20, 20, 20,
				0, stCasingTextUSA[9], 0,	! Outside
				1, stCasingTextUSA[9], 1

		if not(gs_sectgar) then
			ui_infield{3} "gs_trim_inside", 70, 206 + y0, 150, rowy,
					7, "",
					2,
					1, 20, 20, 20, 20,
					0, stCasingTextUSA[8], 0,	! Inside
					1, stCasingTextUSA[8], 1
		endif
		ui_style 0,0

! Garagge Doors ------------------------------------------------------------
		if gs_sectgar then
			! Pict Index ---------------------------------------------------[
			flox = 140
			floy = 170
			secx = 170
			secy = 115

			ui_separator pos1_x + flox + 15, 5 + y0, pos1_x + flox + 15, 230 + y0

		!	if gs_wt_m = 1 then	! Solid Wall, Custom Closure
				indexPict = 389	! 390 - 393
		!	endif
			if gs_wt_m = 2 then	! Stud Wall
				indexPict = 393	! 394 - 397
			endif
			if gs_wt_m = 3 then	! Stud Wall with Siding
				indexPict = 397	! 398 - 401
			endif
			if gs_wt_m = 4 then	! Brick Veneer
				indexPict = 401	!  402 - 405
			endif

			indexOp = 0

			! Casing Type Picture Index
			if not(gs_trim_outside) then	! No Casing
				indexCas = 1
			else							! Casing OutSide
				indexCas = 2
			endif

			IndexPictHor = indexPict + indexOp + indexCas	! 1-2
			IndexPictVer = indexPict + indexOp + 2 + indexCas	! 2-4

			ui_pict IndexPictHor, pos1_x, pos1_y, flox, floy, 1
			ui_pict IndexPictVer, pos2_x, pos2_y, secx, secy, 1

			if bInsideCasingNotAvailableByReveal | bInsideCasingNotAvailableByWallType then
				y2 = 187 + y0
				ui_pict 446, 0, y2, 12, 12, 1	! ui_warningsign.png
				ui_style 0,0
				idx = 26 + (not(bInsideCasingNotAvailableByReveal) & bInsideCasingNotAvailableByWallType)
				ui_outfield stCasingTextUSA[idx], 20, y2, 350, 15

				gs_trim_inside = 0
			endif
		else
! Pocket Doors ------------------------------------------------------------
			if bPocketDoor then
				! Pict Index ---------------------------------------------------[
				flo1_x = 140
				flo1_y = 67
				flo2_x = 140
				flo2_y = 25
				flo3_x = 140
				flo3_y = 50
				flox = 140
				floy = 142
				secx = 142
				secy = 115

				ui_separator pos1_x + flox + 15, 5 + y0, pos1_x + flox + 15, 230 + y0

				indexPict = 409	! 410 - 421
				indexMain = 424
				indexPict2 = 433 ! 434 - 445

				if gs_pocket_door_frame then
					if gs_frame_wthk then			! Frame = Wall Thk
						indexVert = indexPict2		! Full Frame
						indexOut = indexPict
						indexIn = indexPict + 8
					else
						indexVert = indexPict2 + 4	! Small Frame
						indexOut = indexPict + 2
						indexIn = indexPict + 10
					endif
				else
					indexVert = indexPict2 + 8 		! No Frame
					indexOut = indexPict + 5		! No Frame
					indexIn = indexPict + 12		! No Frame
				endif

				! Casing Type Picture Index
				if not(gs_trim_outside) then
					indexOut = indexOut + 2
					if not(gs_trim_inside) then		! No Casing
						indexVert = indexVert + 1
						indexIn = indexIn + 2
					else							! Casing Inside
						indexVert = indexVert + 2
						indexIn = indexIn + 1
					endif
				else
					if not(gs_trim_inside) then		! Casing Outside
						indexVert = indexVert + 3
						indexIn = indexIn + 2
						indexOut = indexOut + 1
					else							! Full Casing
						indexVert = indexVert + 4
						indexIn = indexIn + 1
						indexOut = indexOut + 3 - (2 * (gs_pocket_door_frame & gs_frame_wthk))
					endif
				endif

				ui_pict indexOut, pos1_x, pos1_y, flo1_x, flo1_y, 1
				ui_pict indexMain, pos1_x, pos1_y + flo1_y, flo2_x, flo2_y, 1
				ui_pict indexIn, pos1_x, pos1_y + flo1_y + flo2_y, flo3_x, flo3_y, 1
				ui_pict indexVert, pos2_x, pos2_y, secx, secy, 1

			else

! Normal Doors ------------------------------------------------------------
				! Pict Index ---------------------------------------------------[
				flox = 140
				floy = 142
				secx = 142
				secy = 115

				ui_separator pos1_x + flox + 15, 5 + y0, pos1_x + flox + 15, 230 + y0

				! Wall Pict
				pictx_w1 = 65
				picty_w1 = 45
				pictx_w2 = 45
				picty_w2 = 40
				indexWallPict = 152	! 152 - 153
				indexWallSectPict = 186	! 186 - 187
				if gs_wt_m > 1 then	! Solid Wall, Custom Closure
					indexWallPict = indexWallPict + 1
					indexWallSectPict = indexWallSectPict + 1
				endif

				! Sash Pict
				pictx_s1 = 75
				picty_s1 = 45
				pictx_s2 = 45
				picty_s2 = 75
				indexOpPict = 200	! 200 - 201
				indexOpSectPict = 202	! 202 - 203
				if not(bOpeningDirection) then	! Outside Opening Direction
					indexOpPict = indexOpPict + 1
					indexOpSectPict = indexOpSectPict + 1
				endif

				! Outside Pict
				pictx_o1 = 140
				picty_o1 = 33
				pictx_o2 = 33
				picty_o2 = 115
				indexOutPict = 166	! 166 - 177
				indexOutSectPict = 190	! 190 - 195
				if gs_wt_m = 3 then	! Stud Wall
					indexOutPict = indexOutPict + 4
					indexOutSectPict = indexOutSectPict + 2
				endif
				if gs_wt_m = 4 then	! Brick Veneer
					indexOutPict = indexOutPict + 8
					indexOutSectPict = indexOutSectPict + 4
				endif


				if not(gs_trim_outside) then
					indexOutPict = indexOutPict + 0	! No Sill & No Casing
					! if gs_wt_m = 1 then no pict
				else
					if (gs_wt_m=1 AND ABS(WIDO_SILL) < EPS) OR gs_wt_m=2 OR gs_wt_m=3 OR gs_wt_m=4 then
						indexOutPict = indexOutPict + 1		! No Sill & Casing
					else
						indexOutPict = indexOutPict + 320	! No Sill & Casing, without Casing Offset
					endif
				endif


				if gs_trim_outside then
					indexOutSectPict = indexOutSectPict + 1
				endif

				! Inside Pict
				pictx_i1 = 140
				picty_i1 = 64
				pictx_i2 = 64
				picty_i2 = 115
				indexInPict = 178	! 178 - 185
				indexInSectPict = 196	! 196 - 199
				if gs_wt_m > 1 then
					indexInPict = indexInPict + 4
					indexInSectPict = indexInSectPict + 2
				endif

				if not(gs_trim_inside) then
					indexInPict = indexInPict + 0	! No Board & No Casing
					! if gs_wt_m = 1 then no pict
				else
					indexInPict = indexInPict + 1	! No Board & Casing
				endif


				if gs_trim_inside then
					indexInSectPict = indexInSectPict + 1
				endif

				! Pict Index ---------------------------------------------------]

				if indexOutPict <> 166 then	! clear area
					ui_pict indexOutPict, pos1_x, pos1_y, pictx_o1, picty_o1, 1
				endif
				if indexOutSectPict <> 190 then	! clear area
					ui_pict indexOutSectPict, pos2_x, pos2_y, pictx_o2, picty_o2, 1
				endif

				ui_pict indexWallPict, pos1_x, pos1_y + picty_o1, pictx_w1, picty_w1, 1
				ui_pict indexWallSectPict, pos2_x + pictx_o2, pos2_y, pictx_w2, picty_w2, 1

				ui_pict indexOpPict, pos1_x + pictx_w1, pos1_y + picty_o1, pictx_s1, picty_s1, 1
				ui_pict indexOpSectPict, pos2_x + pictx_o2, pos2_y + picty_w2, pictx_s2, picty_s2, 1

				ui_pict indexInPict, pos1_x, pos1_y + picty_o1 + picty_w1, pictx_i1, picty_i1, 1
				ui_pict indexInSectPict, pos2_x + pictx_o2 + pictx_w2, pos2_y, pictx_i2, picty_i2, 1
			endif

		endif

		! Pict Index ---------------------------------------------------]


		if gs_trim_inside then
			if not(gs_frame_wthk) then
				ui_infield "gs_trim_width_in", pos1_x - descx - 1, pos1_y + 100, descx, rowy ui_tooltip stCasingTextUSA[21]		! Jamb Extension Width
			endif
			if not(gs_sectgar) then
				ui_infield "gs_tw_right_in", pos1_x, pos1_y + 145, descx, rowy ui_tooltip stCasingTextUSA[20]					! Side Casing Width Inside
				if (gs_wt_m=1 & gs_trim_width_in > EPS) | gs_wt_m=2 | gs_wt_m=3 | gs_wt_m=4 then
					ui_infield "gs_trim_offs_in",pos1_x + descx + 1, pos1_y + 145, descx, rowy ui_tooltip stCasingTextUSA[22]	! Casing Offset Inside
				endif

				ui_infield "gs_trim_thk_in",pos1_x - descx - 1, pos1_y + 120, descx, rowy ui_tooltip stCasingTextUSA[23]		! Casing Thickness Inside
			endif

			ui_infield "gs_tw_top_in", 444 - descx - 10, 22 + y0, descx, rowy ui_tooltip stCasingTextUSA[25]		! Head Casing Width Inside
		endif

		if gs_trim_outside then
			ui_infield "gs_tw_right_out", pos1_x, pos1_y - 20, descx, rowy				ui_tooltip stCasingTextUSA[16]		! Side Casing Width Outside
			ui_infield "gs_trim_thk_out",pos1_x - descx - 1, pos1_y + 22, descx, rowy 	ui_tooltip stCasingTextUSA[19]		! Casing Thickness Outside
			if gs_sectgar | (bPocketDoor & not(gs_frame_wthk) & not(gs_trim_inside)) then
				ui_infield "gs_trim_width_out", pos1_x - descx - 1, pos1_y + 42, descx, rowy ui_tooltip stCasingTextUSA[17]	! Jamb Extension Width Outside
			endif

			if (gs_wt_m=1 AND ABS(WIDO_SILL) < EPS) OR gs_wt_m=2 OR gs_wt_m=3 OR gs_wt_m=4 then
				ui_infield "gs_trim_offs_out", pos1_x + descx + 1, pos1_y - 20, descx, rowy ui_tooltip stCasingTextUSA[18]	! Casing Offset Outside
			endif

			ui_infield "gs_tw_top_out", sepx + 14, 22 + y0, descx, rowy ui_tooltip stCasingTextUSA[24]	! Head Casing Width Outside
		endif


		! Casing Overhangs
		pos_x = sepx + 14
		pos_y = pos2_y + secy + 15
		descx = 135
		contx = 50
		dy = 30

		if gs_trim_outside then
			if (gs_wt_m=2 | gs_wt_m=1 & ABS(WIDO_SILL) < EPS | gs_wt_m=3) then
				ui_outfield stCasingTextUSA[1], pos_x, pos_y, descx, rowy		! Brick Mold. Top Overh.
				ui_infield "gs_trimov_top_right_out", pos_x + descx + 1, pos_y, contx , rowy
				pos_y = pos_y + dy
			endif
		endif

		if gs_trim_inside then
			if (gs_wt_m > 1 | gs_wt_m = 1 & gs_trim_width_in > 0) then
				ui_outfield stCasingTextUSA[3],  pos_x, pos_y, descx, rowy		! Casing Trim Top Overh.
				ui_infield "gs_trimov_top_right_in", pos_x + descx + 1, pos_y, contx , rowy
				pos_y = pos_y + dy
			endif
		endif

endif


! ================================================================================
end
! ================================================================================


! --------------------------------------------------------------------------------
! Warning Message Inside
! --------------------------------------------------------------------------------
"insideWarning":
	if bInsideCasingNotAvailableByReveal then
		ui_pict 446, 2, sepy+7, 12, 12, 1	! ui_warningsign.png
		ui_style 0,0
		ui_outfield stCasingUI[18], 23, sepy+7, 240, 34
	else
		if bInsideCasingNotAvailableByWallType then
			ui_pict 446, 2, sepy+7, 12, 12, 1	! ui_warningsign.png
			ui_style 0,0
			ui_outfield stCasingUI[12], 23, sepy+7, 240, 34		! Casing is not available with trapezoid and curved walls.
		else
			if bInsideCasingNotAvailableByFrameStyle then
				if isWindow then
					ui_pict 446, 2, sepy+7, 12, 12, 1	! ui_warningsign.png
					ui_style 0,0
					ui_outfield stCasingUI[19], 23, sepy+7, 240, 34		! Casing is not available with the actual frame style.
				else
					posy = sepy+7+185*(bTShapeOpening | bPShapeOpening)
					ui_pict 446, 2, posy, 12, 12, 1	! ui_warningsign.png
					ui_style 0,0
					ui_outfield stCasingUI[19], 23, posy, 240, 34		! Casing is not available with the actual frame style.
				endif
			endif
		endif
	endif
return



! --------------------------------------------------------------------------------
! Warning Message Outside
! --------------------------------------------------------------------------------
"outsideWarning":
	if bOutsideCasingNotAvailableByReveal then
		ui_pict 446, 2, sepy+7, 12, 12, 1	! ui_warningsign.png
		ui_style 0,0
		ui_outfield stCasingUI[18], 23, sepy+7, 300, 34
	else
		if bOutsideCasingNotAvailableByFrameStyle then
			if isWindow then
				ui_pict 446, 2, sepy+7, 12, 12, 1	! ui_warningsign.png
				ui_style 0,0
				ui_outfield stCasingUI[19], 23, sepy+7, 300, 34		! Casing is not available with the actual frame style.
			else
				posy = sepy+7+185*(bTShapeOpening | bPShapeOpening)
				ui_pict 446, 2, posy, 12, 12, 1	! ui_warningsign.png
				ui_style 0,0
				ui_outfield stCasingUI[19], 23, posy, 300, 34		! Casing is not available with the actual frame style.
			endif
		endif
	endif
return


! --------------------------------------------------------------------------------
! Door and Window Shape Pictures
! -------------------------------------------------------------------------------- 
! Input parameters:
!	isWindow:				0: Door
!							1: Window
!	iWindowShape
!	_iCasingType:			gs_trimtype_in_int
!							gs_trimtype_out_int
!	_bCasing:				gs_trim_inside
!							gs_trim_outside
!	_bCasingCover:			gs_trim_show_cover_in
!							gs_trim_show_cover_out
!	_bShowBottomCasing:		in case of inside casing	: 1
!							in case of outside casing	: bCasingBottomOutside
! Output parameters:
!	
!	
!	
!	
! --------------------------------------------------------------------------------
"shapePictures":

	_bShowShape = 0

	if isWindow then

		! Window shape pictures
		! -------------------------------------------------------------------------------
		sepx = 267
		picx = 93
		if iWindowShape = SHAPE_HALFCIRCLE then
			picy = 67
		else
			picy = 98
		endif
		posx = round_int(sepx/2 - picx/2)
		posy = round_int((sepy+266)/2 - picy/2)

		if (iWindowShape = SHAPE_RECTANGULAR) then

			if _bCasing & not(not(_iCasingType = CASING_COMPLEX) & not(_bCasingCover)) then

				if (_iCasingType = CASING_NORMAL) then
					if _bShowBottomCasing then
						ui_pict 10, posx, posy, picx, picy, 1			! W_CasSimpleRect.png
					else
						ui_pict 11, posx, posy, picx, picy, 1			! W_CasSimpleRectNoBottomCas.png
					endif
				endif

				if (_iCasingType = CASING_OVERHANG) then
					if _bShowBottomCasing then
						ui_pict 12, posx, posy, picx, picy, 1		! W_CasSimpleOverhang.png
					else
						ui_pict 13, posx, posy, picx, picy, 1		! W_CasSimpleOverhangNoBottomCas.png
					endif
				endif

				if (_iCasingType = CASING_COMPLEX) then
					if bArchitraveCapital then
						if _bArchitraveCapitalOnSide then
							if _bShowBottomCasing then
								ui_pict 14, posx, posy, picx, picy, 1			! W_CasComplexOverhOnSide.png
							else
								ui_pict 15, posx, posy, picx, picy, 1			! W_CasComplexOverhOnSideNoBottCas.png
							endif
						else
							if _bShowBottomCasing then
								ui_pict 16, posx, posy, picx, picy, 1			! W_CasComplexOverhNextSide.png
							else
								ui_pict 17, posx, posy, picx, picy, 1			! W_CasComplexOverhNextSideNoBottCas.png
							endif
						endif
					else
						if _bShowBottomCasing then
							ui_pict 52, posx, posy, picx, picy, 1			! W_CasComplexOverh.png
						else
							ui_pict 53, posx, posy, picx, picy, 1			! W_CasComplexOverhNoBottomCas.png
						endif
					endif
				endif
			else
				ui_pict 9, posx, posy, picx, picy, 1			! W_CasNo.png
			endif

			_bShowShape = 1
		endif

		if (iWindowShape = SHAPE_ARCHED |\
			iWindowShape = SHAPE_ELLIPSEARCH) then

			if _bCasing & _bCasingCover then
				if _bShowBottomCasing then
					ui_pict 19, posx, posy, picx, picy, 1			! W_CasSimpleArch.png
				else
					ui_pict 20, posx, posy, picx, picy, 1			! W_CasSimpleArchNoBottomCas.png
				endif
			else
				ui_pict 18, posx, posy, picx, picy, 1				! W_CasNoArch.png
			endif

			_bShowShape = 1
		endif

		if (iWindowShape = SHAPE_HALFCIRCLE) then
			if _bCasing & _bCasingCover then
				if _bShowBottomCasing then
					ui_pict 22, posx, posy, picx, picy, 1			! W_CasSimpleHalfround.png
				else
					ui_pict 23, posx, posy, picx, picy, 1			! W_CasSimpleHalfroundNoBottomCas.png
				endif
			else
				ui_pict 21, posx, posy, picx, picy, 1				! W_CasNoHalfround.png
			endif

			_bShowShape = 1
		endif

		if (iWindowShape = SHAPE_PENTAGON) then
			if _bCasing & _bCasingCover then
				if _bShowBottomCasing then
					ui_pict 25, posx, posy, picx, picy, 1			! W_CasSimplePentagon.png
				else
					ui_pict 26, posx, posy, picx, picy, 1			! W_CasSimplePentagonNoBottomCas.png
				endif
			else
				ui_pict 24, posx, posy, picx, picy, 1				! W_CasNoPentagon.png
			endif

			_bShowShape = 1
		endif

		if (iWindowShape = SHAPE_QUARTERROUND) then
			if _bCasing & _bCasingCover then
				if _bShowBottomCasing then
					ui_pict 28, posx, posy, picx, picy, 1			! W_CasSimpleQuarterround.png
				else
					ui_pict 29, posx, posy, picx, picy, 1			! W_CasSimpleQuarterroundNoBottomCas.png
				endif
			else
				ui_pict 27, posx, posy, picx, picy, 1				! W_CasNoQuarterround.png
			endif

			_bShowShape = 1
		endif

		if (iWindowShape = SHAPE_TRAPEZOID) then
			if _bCasing & _bCasingCover then
				if _bShowBottomCasing then
					ui_pict 31, posx, posy, picx, picy, 1			! W_CasSimpleTrapezoid.png
				else
					ui_pict 32, posx, posy, picx, picy, 1			! W_CasSimpleTrapezoidNoBottomCas.png
				endif
			else
				ui_pict 30, posx, posy, picx, picy, 1				! W_CasNoTrapezoid.png
			endif

			_bShowShape = 1
		endif

	else	! Door shape pictures

		! Door shape pictures
		! -------------------------------------------------------------------------------
		sepx = 267
		if (iWindowShape = SHAPE_T) | (iWindowShape = SHAPE_ARCHED_T) then
			picx = 116
		else
			picx = 93
		endif
		picy = 98
		posx = round_int(sepx/2 - picx/2)
		posy = round_int((sepy+266)/2 - picy/2)

		if (iWindowShape = SHAPE_RECTANGULAR) then

			if _bCasing & not(not(_iCasingType = CASING_COMPLEX) & not(_bCasingCover)) then

				if (_iCasingType = CASING_NORMAL) then
					ui_pict 34, posx, posy, picx, picy, 1			! D_CasSimpleRect.png
				endif

				if (_iCasingType = CASING_OVERHANG) then
						ui_pict 35, posx, posy, picx, picy, 1		! D_CasSimpleOverhangRect.png
				endif

				if (_iCasingType = CASING_COMPLEX) then
					if bArchitraveCapital then
						if _bArchitraveCapitalOnSide then
							ui_pict 36, posx, posy, picx, picy, 1			! D_CasComplexOverhOnSideRect.png
						else
							ui_pict 37, posx, posy, picx, picy, 1			! D_CasComplexOverhNextSideRect.png
						endif
					else
						ui_pict 54, posx, posy, picx, picy, 1			! D_CasComplexOverhRect.png
					endif
				endif
			else
				ui_pict 33, posx, posy, picx, picy, 1			! D_CasNoRect.png
			endif

			_bShowShape = 1
		endif

		if (iWindowShape = SHAPE_HALF_T_LEFT) then

			if _bCasing & _bCasingCover then

				if (_iCasingType = CASING_NORMAL) then
					ui_pict 39, posx, posy, picx, picy, 1			! D_CasSimpleRectPShape.png
				endif

				if (_iCasingType = CASING_OVERHANG) then
					ui_pict 40, posx, posy, picx, picy, 1		! D_CasSimpleOverhangRectPShape.png
				endif

				if (_iCasingType = CASING_COMPLEX) then
					if bArchitraveCapital then
						if _bArchitraveCapitalOnSide then
							ui_pict 41, posx, posy, picx, picy, 1			! D_CasComplexOverhOnSideRectPShape.png
						else
							ui_pict 42, posx, posy, picx, picy, 1			! D_CasComplexOverhNextSideRectPShape.png
						endif
					else
						ui_pict 55, posx, posy, picx, picy, 1			! D_CasComplexOverhRectPShape.png
					endif
				endif
			else
				ui_pict 38, posx, posy, picx, picy, 1			! D_CasNoRectPShape.png
			endif

			_bShowShape = 1
		endif

		if (iWindowShape = SHAPE_HALF_T_RIGHT) then

			if _bCasing & _bCasingCover then

				if (_iCasingType = CASING_NORMAL) then
					ui_pict 65, posx, posy, picx, picy, 1			! D_CasSimpleRectPMShape.png
				endif

				if (_iCasingType = CASING_OVERHANG) then
					ui_pict 66, posx, posy, picx, picy, 1		! D_CasSimpleOverhangRectPMShape.png
				endif

				if (_iCasingType = CASING_COMPLEX) then
					if bArchitraveCapital then
						if _bArchitraveCapitalOnSide then
							ui_pict 67, posx, posy, picx, picy, 1			! D_CasComplexOverhOnSideRectPMShape.png
						else
							ui_pict 68, posx, posy, picx, picy, 1			! D_CasComplexOverhNextSideRectPMShape.png
						endif
					else
						ui_pict 71, posx, posy, picx, picy, 1			! D_CasComplexOverhRectPMShape.png
					endif
				endif
			else
				ui_pict 64, posx, posy, picx, picy, 1			! D_CasNoRectPMShape.png
			endif

			_bShowShape = 1
		endif

		if (iWindowShape = SHAPE_T) then

			if _bCasing & not(not(_iCasingType = CASING_COMPLEX) & not(_bCasingCover)) then

				if (_iCasingType = CASING_NORMAL) then
					ui_pict 44, posx, posy, picx, picy, 1			! D_CasSimpleRectTShape.png
				endif

				if (_iCasingType = CASING_OVERHANG) then
					ui_pict 45, posx, posy, picx, picy, 1		! D_CasSimpleOverhangRectTShape.png
				endif

				if (_iCasingType = CASING_COMPLEX) then
					if bArchitraveCapital then
						if _bArchitraveCapitalOnSide then
							ui_pict 46, posx, posy, picx, picy, 1			! D_CasComplexOverhOnSideRectTShape.png
						else
							ui_pict 47, posx, posy, picx, picy, 1			! D_CasComplexOverhNextSideRectTShape.png
						endif
					else
						ui_pict 56, posx, posy, picx, picy, 1			! D_CasComplexOverhRectTShape.png
					endif
				endif
			else
				ui_pict 43, posx, posy, picx, picy, 1			! D_CasNoRectTShape.png
			endif

			_bShowShape = 1
		endif

		if (iWindowShape = SHAPE_ARCHED_HALF_T_LEFT) then
			if _bCasing & _bCasingCover then
				ui_pict 49, posx, posy, picx, picy, 1			! D_CasSimpleArchPShape.png
			else
				ui_pict 48, posx, posy, picx, picy, 1			! D_CasNoArchPShape.png
			endif

			_bShowShape = 1
		endif

		if (iWindowShape = SHAPE_ARCHED_HALF_T_RIGHT) then
			if _bCasing & _bCasingCover then
				ui_pict 70, posx, posy, picx, picy, 1			! D_CasSimpleArchPMShape.png
			else
				ui_pict 69, posx, posy, picx, picy, 1			! D_CasNoArchPMShape.png
			endif

			_bShowShape = 1
		endif

		if (iWindowShape = SHAPE_ARCHED_T) then
			if _bCasing & _bCasingCover then
				ui_pict 51, posx, posy, picx, picy, 1			! D_CasSimpleArchTShape.png
			else
				ui_pict 50, posx, posy, picx, picy, 1			! D_CasNoArchTShape.png
			endif

			_bShowShape = 1
		endif
	endif
return
]]>
</Script_UI>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_VL SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
! Contact person: <NJ>

! ==============================================================================
! This macro draws the Casing
! ------------------------------------------------------------------------------
! Input parameters:
!	A:						Window nominal width (length)
!	B:						Window nominal height (length)
!	gs_IsCurved:			Does the window follow the curvature of the wall? (0 / 1)
!	isWindow:				Is the macro applied for a window or for a door?
!	iWindowShape:			Shape of the window (integer)
!								0 = rectangular (default)
!								1 = arched
!							Note: only the rectangular shape can be a Corner Window
! Corner Function --------------------------------------------------------------
!	bLeftCornerFunction:		Turn macro in Corner Window mode at the left side (0 / 1)
!	leftCornerAngle:		Angle between connected walls in case of Corner Window (angle)
!	leftConnWallThk:		Thickness of the connected wall in case of Corner Window (length)
!	bRightCornerFunction:	Turn macro in Corner Window mode at the right side (0 / 1)
!	rightCornerAngle:		Angle between connected walls in case of Corner Window (angle)
!	rightConnWallThk:		Thickness of the connected wall in case of Corner Window (length)
! Casing -----------------------------------------------------------------------
!	gs_trim_width_in:		Width of inside Trim. (length)
!	gs_trim_width_out:		Width of outside Trim. (length)
!	gs_trim_offs_in:		Offset of Casing inside. (length)
!	gs_trim_offs_out:		Offset of Casing outside. (length)
!	gs_trim_thk_in:			Thickness of inside Trim. (length)
!	gs_trim_thk_out:		Thickness of outside Trim. (length)
!	gs_tw_left_in:			Width of inside casing on the left (length)
!	gs_tw_right_in:			Width of inside casing on the right (length)
!	gs_tw_left_out:			Width of outside casing on the left (length)
!	gs_tw_right_out:		Width of outside casing on the right (length)
! Ganging ----------------------------------------------------------------------
!	gs_stack_left:			Align to door/window on left side (0 / 1)
!	gs_stack_right:			Align to door/window on right side (0 / 1)
!	gs_stack_top:			Align to door/window on upper side (0 / 1)
!	gs_stack_bottom:		Align to door/window on bottom side (0 / 1)
!	--- String Tables ---
!
! Related Global Variables:
!	GLOB_SCRIPT_TYPE
!	GLOB_CONTEXT
!	WALL_THICKNESS
!	WALL_INCL
!	WIDO_FRAME_THICKNESS
!	WIDO_SILL
!	WIDO_ORIG_DIST
!	WIDO_REVEAL_SIDE
!	SYMB_MIRRORED
!	SYMB_ROTANGLE
! ==============================================================================

if gs_sectgar then
	lock "gs_trim_inside"
	parameters gs_trim_inside = 0
else
	if iRevealType = REVEAL_DOUBLE_SPLAYED | iRevealType = REVEAL_OUTSIDE_SPLAYED then
		lock "gs_trim_outside"
		parameters gs_trim_outside = 0
	endif
endif


! ==============================================================================
! SWE Casing Types
! ==============================================================================

dim sCasingInTypeValueMask[]
dim iCasingInTypeValueMask[]

i=1
if bittest( gs_CasingInTypeEnable, 0) then 				! Rectangular
	sCasingInTypeValueMask[i] = stCasingType[1]
	iCasingInTypeValueMask[i] = 1
	i = i + 1
endif
if bittest( gs_CasingInTypeEnable, 1) then 				! SWE Traditional
	sCasingInTypeValueMask[i] = stCasingType[2]
	iCasingInTypeValueMask[i] = 2
	i = i + 1
endif

if i > 1 then
	values "gs_trimtype_in"		sCasingInTypeValueMask
	values "gs_trimtype_in_int"	iCasingInTypeValueMask
endif


dim sCasingOutTypeValueMask[]
dim iCasingOutTypeValueMask[]

i=1
if bittest( gs_CasingOutTypeEnable, 0) then 				! Rectangular
	sCasingOutTypeValueMask[i] = stCasingType[1]
	iCasingOutTypeValueMask[i] = 1
	i = i + 1
endif
if bittest( gs_CasingOutTypeEnable, 1) then 				! SWE Traditional
	sCasingOutTypeValueMask[i] = stCasingType[2]
	iCasingOutTypeValueMask[i] = 2
	i = i + 1
endif
if bittest( gs_CasingOutTypeEnable, 2) then 				! Complex
	sCasingOutTypeValueMask[i] = stCasingType[3]
	iCasingOutTypeValueMask[i] = 3
	i = i + 1
endif

if i > 1 then
	values "gs_trimtype_out"	 sCasingOutTypeValueMask
	values "gs_trimtype_out_int" iCasingOutTypeValueMask
endif


if GLOB_MODPAR_NAME = "gs_trimtype_in" then
	gs_trimtype_in_int = CASING_NORMAL
	if gs_trimtype_in = stCasingType[2] then gs_trimtype_in_int = CASING_OVERHANG
	parameters gs_trimtype_in_int = gs_trimtype_in_int
else
	gs_trimtype_in = stCasingType[min(2, max(1,gs_trimtype_in_int))]
	parameters gs_trimtype_in = gs_trimtype_in
endif

if	GLOB_MODPAR_NAME = "gs_trimtype_out" then
	gs_trimtype_out_int = CASING_NORMAL
	if gs_trimtype_out = stCasingType[2] then gs_trimtype_out_int = CASING_OVERHANG
	if gs_trimtype_out = stCasingType[3] then gs_trimtype_out_int = CASING_COMPLEX
	parameters gs_trimtype_out_int = gs_trimtype_out_int
else
	gs_trimtype_out = stCasingType[min(2, max(1,gs_trimtype_out_int))]
	parameters gs_trimtype_out = gs_trimtype_out
endif

if gs_CasingInTypeEnable = 0 | gs_CasingInTypeEnable = 1 then
	hideparameter "gs_trimtype_in", "gs_trimtype_in_int"
endif

if gs_CasingOutTypeEnable = 0 | gs_CasingOutTypeEnable = 1 then
	hideparameter "gs_trimtype_out", "gs_trimtype_out_int"
endif


! ==============================================================================
! Casing parameter handling in case of pocket door or curved wall
! ==============================================================================

if gs_trim_outside & ((_bPocketDoor & (gs_frame_wthk | (iRevealType = REVEAL_EDGE))) | curvedWall) then
	lock "gs_trim_show_cover_out"
endif

if gs_trim_inside & ((_bPocketDoor & gs_frame_wthk) | curvedWall) then
	lock "gs_trim_show_cover_in"
endif


! ==============================================================================
! Simple with Overhang casing parameter handling
! ==============================================================================

if _bEnableOutsideCasingOverhang then
	if gs_trim_outside & (gs_trimtype_out_int = CASING_OVERHANG) then
		lock "gs_trim_show_cover_out"
	endif
endif

if _bEnableInsideCasingOverhang then
	if gs_trim_inside & (gs_trimtype_in_int = CASING_OVERHANG) then
		lock "gs_trim_show_cover_in"
	endif
endif


! ==============================================================================
! Complex casing parameter handling
! ==============================================================================

if _bEnableOutsideCasingComplex then	! Complex is enabled in outside
	values{2} "iCasingHeadTypeOut"	CASING_HEAD_RECT, stCasingHeadType[1],
									CASING_HEAD_DECORATIVE_1, stCasingHeadType[2],
									CASING_HEAD_DECORATIVE_2, stCasingHeadType[3],
									CASING_HEAD_DECORATIVE_3, stCasingHeadType[4]

	values{2} "iArchitraveCapitalType"	ARCH_CAPITAL_SQUARE_ONSIDE,		stArchitraveCapitalType[1],
										ARCH_CAPITAL_SQUARE_NEXTSIDE,	stArchitraveCapitalType[2],
										ARCH_CAPITAL_DECOR_ONSIDE,		stArchitraveCapitalType[3],
										ARCH_CAPITAL_DECOR_NEXTSIDE,	stArchitraveCapitalType[4]

	if gs_trim_outside & (gs_trimtype_out_int = CASING_COMPLEX) then
		if not(bArchitraveCapital) then
			lock "iArchitraveCapitalType", "architraveCapitalWidth"
		endif
		lock "gs_trim_show_cover_out"
	else
		lock "iCasingHeadTypeOut", "bArchitraveCapital", "iArchitraveCapitalType", "architraveCapitalWidth"
	endif
endif

! ==============================================================================

if gs_trim_inside then
	if gs_wt_m = 1 then
		if gs_trim_atframe_in 	= 0 then values "gs_trim_offs_in"	range [0, gs_trim_width_in]
	else
		if gs_trim_atframe_in 	= 0 then values "gs_trim_offs_in"	range [0, )
	endif
	values "gs_trim_thk_in"		range [0,)
	values "gs_trim_width_in"	range [0,)
endif
if gs_trim_outside then
	if gs_trim_atframe_out 	= 0 & not(bCasingTolerance) then values "gs_trim_offs_out"	range [0, gs_trim_width_out]
	if gs_trim_atframe_out 	= 0 & bCasingTolerance then values "gs_trim_offs_out"	range [0, )
	values "gs_trim_thk_out"	range [0,)
	values "gs_trim_width_out"	range [0,)
endif

if gs_trim_inside then
	values "gs_tw_left_in"		range [gs_trim_width_in,)
	values "gs_tw_right_in"		range [gs_trim_width_in,)
	values "gs_tw_top_in"		range [gs_trim_width_in,)
	if isWindow then
		values "gs_tw_bottom_in"	range [gs_trim_width_in,)
	else
		if bTShapedOpening then
			values "gs_tw_bottom_in"	range [gs_trim_width_in,)
		endif
	endif
endif
if gs_trim_outside then
	values "gs_tw_left_out"		range [gs_trim_width_out,)
	values "gs_tw_right_out"	range [gs_trim_width_out,)
	values "gs_tw_top_out"		range [gs_trim_width_out,)
	if isWindow then
		values "gs_tw_bottom_out"	range [gs_trim_width_out,)
	else
		if bTShapedOpening then
			values "gs_tw_bottom_out"	range [gs_trim_width_out,)
		endif
	endif
endif

if iWindowShape = SHAPE_ARCHED | iWindowShape = SHAPE_ELLIPSEARCH then
	if gs_trim_inside then
		parameters gs_tw_left_in	= gs_tw_right_in
		parameters gs_tw_top_in		= gs_tw_right_in
	endif
	if gs_trim_outside then
		parameters gs_tw_left_out	= gs_tw_right_out
		parameters gs_tw_top_out	= gs_tw_right_out
	endif
endif

values "gs_trim_fill_in"	filltypes_mask 1
values "gs_trim_fill_out"	filltypes_mask 1


! ==============================================================================
! Trim parameter logic
! ==============================================================================

if (bInsideCasingNotAvailableByReveal |\
	bInsideCasingNotAvailableByWallType |\
	bInsideCasingNotAvailableByFrameStyle) then
	lock "gs_trim_inside"
endif
if (bOutsideCasingNotAvailableByReveal |\
	bOutsideCasingNotAvailableByFrameStyle) then
	lock "gs_trim_outside"
endif

if _bEnableSwitchableInCasCover then
	if gs_trim_inside & not(gs_trim_show_cover_in) then
		hideparameter "gs_trim_inside_uniform"
		lock "gs_trim_inside_uniform"
	endif
endif

if _bEnableSwitchableOutCasCover then
	if gs_trim_outside & not(gs_trim_show_cover_out) then
		hideparameter "gs_trim_outside_uniform"
		lock "gs_trim_outside_uniform"

		if isWindow then
			hideparameter "bCasingBottomOutside"
			lock "bCasingBottomOutside"
		endif
	endif
else
	if bExtSliding & not(gs_casing_nor) then
		parameters gs_trim_show_cover_out = 1
	endif
endif

if not(gs_trim_inside) | bInsideCasingNotAvailableByReveal | bInsideCasingNotAvailableByFrameStyle then
	hideparameter	"gs_trimtype_in",
					"gs_trimtype_in_int",
					"gs_trim_inside_uniform",
					"gs_trim_width_in",
					"gs_trim_offs_in",
					"gs_trim_thk_in",
					"gs_tw_left_in",
					"gs_tw_right_in",
					"gs_tw_top_in",
					"gs_trim_in_mat",
					"gs_trim_pen_fg_in",
					"gs_trim_pen_bg_in",
					"gs_trim_fill_in"

	lock			"gs_trimtype_in",
					"gs_trimtype_in_int",
					"gs_trim_inside_uniform",
					"gs_trim_width_in",
					"gs_trim_offs_in",
					"gs_trim_thk_in",
					"gs_tw_left_in",
					"gs_tw_right_in",
					"gs_tw_top_in",
					"gs_trim_in_mat",
					"gs_trim_pen_fg_in",
					"gs_trim_pen_bg_in",
					"gs_trim_fill_in"

	if isWindow | (not(isWindow) & bTShapedOpening) then
		hideparameter "gs_tw_bottom_in"
		lock "gs_tw_bottom_in"
	endif

	if gs_casing_che then
		hideparameter	"gs_trim_jambext_nosing_in"
		lock	"gs_trim_jambext_nosing_in"
	endif

	if bittest(gs_CasingInTypeEnable, 1) then 		! SWE Traditional
		hideparameter "gs_trimov_top_right_in"

		lock "gs_trimov_top_right_in"

		if isWindow | bTShapedOpening then
			hideparameter "gs_trimov_bot_right_in"

			lock "gs_trimov_bot_right_in"
		endif
	endif
else
	if not(bCasingUSA) & (isWindow | (not(isWindow) & bTShapedOpening)) then
		if gs_trimtype_in_int = CASING_NORMAL then		! Rectangular
			hideparameter	"gs_trimov_top_right_in",
							"gs_trimov_bot_right_in",
							"gs_trimov_bot_left_in"
			lock	"gs_trimov_top_right_in",
					"gs_trimov_bot_right_in",
					"gs_trimov_bot_left_in"
		else
			if not((iWindowShape = SHAPE_T & (gs_sidelight_parapet_hgt_left > EPS | gs_sidelight_parapet_hgt_right > EPS)) |\
				   (iWindowShape = SHAPE_HALF_T_RIGHT & (gs_sidelight_parapet_hgt_right > EPS)) |\
				   (isWindow & (iWindowShape = SHAPE_RECTANGULAR))) then

				hideparameter "gs_trimov_bot_right_in"
				lock "gs_trimov_bot_right_in"
			endif
			if not((iWindowShape = SHAPE_HALF_T_LEFT & (gs_sidelight_parapet_hgt_left > EPS))) then
				hideparameter "gs_trimov_bot_left_in"
				lock "gs_trimov_bot_left_in"
			endif
		endif
	endif
endif

if not(gs_trim_outside) | bOutsideCasingNotAvailableByReveal | bOutsideCasingNotAvailableByFrameStyle then
		hideparameter	"gs_trimtype_out",
						"gs_trimtype_out_int",
						"gs_trim_outside_uniform",
						"gs_trim_width_out",
						"gs_trim_offs_out",
						"gs_trim_thk_out",
						"gs_tw_left_out",
						"gs_tw_right_out",
						"gs_tw_top_out",
						"gs_trim_out_mat",
						"gs_trim_pen_fg_out",
						"gs_trim_pen_bg_out",
						"gs_trim_fill_out"

		lock			"gs_trimtype_out",
						"gs_trimtype_out_int",
						"gs_trim_outside_uniform",
						"gs_trim_width_out",
						"gs_trim_offs_out",
						"gs_trim_thk_out",
						"gs_tw_left_out",
						"gs_tw_right_out",
						"gs_tw_top_out",
						"gs_trim_out_mat",
						"gs_trim_pen_fg_out",
						"gs_trim_pen_bg_out",
						"gs_trim_fill_out"

	if isWindow | (not(isWindow) & bTShapedOpening) then
		hideparameter "gs_tw_bottom_out"
		lock "gs_tw_bottom_out"
	endif

	if gs_casing_che then
		hideparameter	"gs_trim_jambext_nosing_out"
		lock	"gs_trim_jambext_nosing_out"
	endif

	if bittest(gs_CasingOutTypeEnable, 1) then 		! SWE Traditional
		hideparameter "gs_trimov_top_right_out"

		lock "gs_trimov_top_right_out"

		if isWindow | bTShapedOpening then
			hideparameter "gs_trimov_bot_right_out"

			lock "gs_trimov_bot_right_out"
		endif
	endif
else
	if not(bCasingUSA) & (isWindow | (not(isWindow) & bTShapedOpening)) then
		if gs_trimtype_out_int = CASING_NORMAL then		! Rectangular
			if	iWindowShape = SHAPE_RECTANGULAR |\
				iWindowShape = SHAPE_T |\
				iWindowShape = SHAPE_HALF_T_LEFT |\
				iWindowShape = SHAPE_ARCHED_T |\
				iWindowShape = SHAPE_ARCHED_HALF_T_LEFT |\
				iWindowShape = SHAPE_HALF_T_RIGHT |\
				iWindowShape = SHAPE_ARCHED_HALF_T_RIGHT then

				hideparameter	"gs_trimov_top_right_out",
								"gs_trimov_bot_right_out",
								"gs_trimov_bot_left_out"
				lock	"gs_trimov_top_right_out",
						"gs_trimov_bot_right_out",
						"gs_trimov_bot_left_out"
			endif
		else
			if not((iWindowShape = SHAPE_T & (gs_sidelight_parapet_hgt_left > EPS | gs_sidelight_parapet_hgt_right > EPS)) |\
				   (iWindowShape = SHAPE_HALF_T_RIGHT & (gs_sidelight_parapet_hgt_right > EPS)) |\
				   (isWindow & (iWindowShape = SHAPE_RECTANGULAR))) then

				hideparameter "gs_trimov_bot_right_out"
				lock "gs_trimov_bot_right_out"
			endif
			if not((iWindowShape = SHAPE_HALF_T_LEFT & (gs_sidelight_parapet_hgt_left > EPS))) then
				hideparameter "gs_trimov_bot_left_out"
				lock "gs_trimov_bot_left_out"
			endif
		endif
	endif
endif

! Uniform Surfaces =============================================================

if	(not(gs_trim_inside) | bInsideCasingNotAvailableByReveal | bInsideCasingNotAvailableByFrameStyle) &\
	(not(gs_trim_outside) | bOutsideCasingNotAvailableByReveal | bOutsideCasingNotAvailableByFrameStyle) then

	hideparameter "bLinkCasingSurfaces"
	lock "bLinkCasingSurfaces"
endif

! ==============================================================================
! Uniform Casing Surfaces
! ==============================================================================

dim	surfaceParNames[]							:	dim	surfaceParameters[]
	surfaceParNames[1]	= "gs_trim_in_mat"		:		surfaceParameters[1]	= gs_trim_in_mat
	surfaceParNames[2]	= "gs_trim_out_mat"		:		surfaceParameters[2]	= gs_trim_out_mat

if bEnableApron then
	surfaceParNames[3]	= "gs_apron_mat"		:		surfaceParameters[3]	= gs_apron_mat
endif

_lastModCasingSurfaceParameter = gs_trim_in_mat

if stored_material[3][1] <> -9999 then
	for i = 1 to vardim1(surfaceParNames)
		if GLOB_MODPAR_NAME = surfaceParNames[i] then
			_lastModCasingSurfaceParameter	= surfaceParameters[i]
			stored_material[3][i]	= surfaceParameters[i]
			stored_material[4][i]	= 1

			for j = 1 to i-1
				stored_material[4][j]	= 0
				parameters stored_material[4][j]	= stored_material[4][j]
			next j

			for k = i+1 to vardim1(surfaceParNames)
				stored_material[4][k]	= 0
				parameters stored_material[4][k]	= stored_material[4][k]
			next k
		endif

		parameters	stored_material[3][i]	= stored_material[3][i],
					stored_material[4][i]	= stored_material[4][i]

		if stored_material[4][i] = 1 then
			_lastModCasingSurfaceParameter = stored_material[3][i]
		endif
	next i
else
	parameters	stored_material[3][1]	= gs_trim_in_mat,
				stored_material[3][2]	= gs_trim_out_mat

	if bEnableApron then
		parameters	stored_material[3][3]	= gs_apron_mat
	endif
endif

if bLinkCasingSurfaces then
	parameters	gs_trim_in_mat		= _lastModCasingSurfaceParameter,
				gs_trim_out_mat		= _lastModCasingSurfaceParameter

	if bEnableApron then
		parameters	gs_apron_mat	= _lastModCasingSurfaceParameter
	endif
else
	if GLOB_MODPAR_NAME = "bLinkCasingSurfaces" then
		parameters	gs_trim_in_mat		= stored_material[3][1],
					gs_trim_out_mat		= stored_material[3][2]

		if bEnableApron then
			parameters	gs_apron_mat	= stored_material[3][3]
		endif
	else
		parameters	stored_material[3][1]	= gs_trim_in_mat,
					stored_material[3][2]	= gs_trim_out_mat

		if bEnableApron then
			parameters	stored_material[3][3]	= gs_apron_mat
		endif
	endif
endif

if	(not(gs_trim_inside) | bInsideCasingNotAvailableByReveal | bInsideCasingNotAvailableByFrameStyle) &\
	(not(gs_trim_outside) | bOutsideCasingNotAvailableByReveal | bOutsideCasingNotAvailableByFrameStyle) then

	hideparameter "gs_trim_pen_cont"
	lock "gs_trim_pen_cont"
endif

if not(	iWindowShape = SHAPE_RECTANGULAR |\
		iWindowShape = SHAPE_T |\
		iWindowShape = SHAPE_HALF_T_LEFT |\
		iWindowShape = SHAPE_HALF_T_RIGHT ) then
	hideparameter "gs_trim_outside_uniform", "gs_trim_inside_uniform"
	lock "gs_trim_outside_uniform", "gs_trim_inside_uniform"
else
	if gs_trim_outside_uniform then
		hideparameter "gs_tw_left_out", "gs_tw_top_out"
		lock "gs_tw_left_out", "gs_tw_top_out"

		if isWindow | (not(isWindow) & bTShapedOpening) then
			hideparameter "gs_tw_bottom_out"
			lock "gs_tw_bottom_out"
		endif
	endif
	if gs_trim_inside_uniform then
		hideparameter "gs_tw_left_in", "gs_tw_top_in"
		lock "gs_tw_left_in", "gs_tw_top_in"

		if isWindow | (not(isWindow) & bTShapedOpening) then
			hideparameter "gs_tw_bottom_in"
			lock "gs_tw_bottom_in"
		endif
	endif
endif

if (gs_trim_inside | gs_trim_outside) then
	if gs_stack_left	then
		hideparameter "gs_tw_left_in", "gs_tw_left_out"
		lock "gs_tw_left_in", "gs_tw_left_out"
	else
		if bCasingUSA then hideparameter "gs_trim_stack_left"
	endif
	if gs_stack_right	then
		hideparameter "gs_tw_right_in", "gs_tw_right_out"
		lock "gs_tw_right_in", "gs_tw_right_out"
	else
		if bCasingUSA then hideparameter "gs_trim_stack_right"
	endif
	if gs_stack_top		then
		hideparameter "gs_tw_top_in", "gs_tw_top_out"
		lock "gs_tw_top_in", "gs_tw_top_out"
	else
		if bCasingUSA then hideparameter "gs_trim_stack_top"
	endif
	if gs_stack_bottom	then
		hideparameter "gs_tw_bottom_in", "gs_tw_bottom_out"
		lock "gs_tw_bottom_in", "gs_tw_bottom_out"
	else
		if bCasingUSA & isWindow then hideparameter "gs_trim_stack_bottom"
	endif

	if iWindowShape = SHAPE_ARCHED | iWindowShape = SHAPE_ARCHED then
		hideparameter	"gs_tw_left_in",
						"gs_tw_top_in",
						"gs_tw_left_out",
						"gs_tw_top_out"

		lock			"gs_tw_left_in",
						"gs_tw_top_in",
						"gs_tw_left_out",
						"gs_tw_top_out"
	endif
else
	if bEnableCasingAtGanging then
		if isWindow then
			hideparameter	"gs_trim_stack_bottom"
			lock			"gs_trim_stack_bottom"
		endif

		hideparameter	"gs_trim_stack_left",
						"gs_trim_stack_right",
						"gs_trim_stack_top"

		lock			"gs_trim_stack_left",
						"gs_trim_stack_right",
						"gs_trim_stack_top"
	endif
endif

if bCasingUSA then
	hideparameter	"gs_trim_atframe_out", "gs_trim_atframe_in"
	lock			"gs_trim_atframe_out", "gs_trim_atframe_in"

	if isWindow then
		hideparameter	"gs_trimb_atframe_out"
		lock			"gs_trimb_atframe_out"
	endif
endif

if	bEnableApron & not(gs_apron) then
	hideparameter	"gs_apron_thk",
					"gs_apron_width",
					"gs_apron_mat"
	lock			"gs_apron_thk",
					"gs_apron_width",
					"gs_apron_mat"
endif

if abs(WIDO_SILL) > EPS & gs_trim_atframe_out then
	lock "gs_trimov_top_left_out", "gs_trimov_top_right_out", "gs_trimov_bot_left_out", "gs_trimov_bot_right_out"
	hideparameter "gs_trimov_top_left_out", "gs_trimov_top_right_out", "gs_trimov_bot_left_out", "gs_trimov_bot_right_out"
endif

if _bEnableSwitchableInCasCover then
	if not(gs_trim_inside) then
		lock "gs_trim_show_cover_in"
		hideparameter "gs_trim_show_cover_in"
	endif

	if gs_trim_show_cover_in then
		lock "gs_trim_jambext_nosing_in"
		hideparameter "gs_trim_jambext_nosing_in"
	else
		lock	"gs_tw_right_in",
				"gs_tw_left_in",
				"gs_tw_top_in",
				"gs_tw_bottom_in",
				"gs_trim_thk_in",
				"gs_trim_offs_in"
		hideparameter	"gs_tw_right_in",
						"gs_tw_left_in",
						"gs_tw_top_in",
						"gs_tw_bottom_in",
						"gs_trim_thk_in",
						"gs_trim_offs_in"
	endif
endif

if _bEnableSwitchableOutCasCover then
	if not(gs_trim_outside) then
		lock "gs_trim_show_cover_out"
		hideparameter "gs_trim_show_cover_out"
	endif

	if gs_trim_show_cover_out then
		lock "gs_trim_jambext_nosing_out"
		hideparameter "gs_trim_jambext_nosing_out"
	else
		lock	"gs_tw_right_out",
				"gs_tw_left_out",
				"gs_tw_top_out",
				"gs_tw_bottom_out",
				"gs_trim_thk_out",
				"gs_trim_offs_out"
		hideparameter	"gs_tw_right_out",
						"gs_tw_left_out",
						"gs_tw_top_out",
						"gs_tw_bottom_out",
						"gs_trim_thk_out",
						"gs_trim_offs_out"
	endif
endif

if bEnableSwitchableBottomCasing & not(bCasingUSA | gs_casing_nor) then
	if not(gs_trim_outside) then
		hideparameter	"bCasingBottomOutside"
		lock			"bCasingBottomOutside"
	endif
endif


for i = 1 to 255
	put i
next i
values "gs_trim_pen_cont"	use(NSP)
values "gs_trim_pen_fg_in"	use(NSP)
values "gs_trim_pen_fg_out"	get(NSP)


! =============================================================================
! IFC Parameters
! =============================================================================

if isWindow = 0	then
	ifc_CasingDepth = max(gs_trim_thk_in*gs_trim_inside, gs_trim_thk_out*gs_trim_outside)
	parameters ifc_CasingDepth = ifc_CasingDepth

	ifc_CasingThickness = max(gs_tw_right_in*gs_trim_inside, gs_tw_right_out*gs_trim_outside)
	parameters ifc_CasingThickness = ifc_CasingThickness
endif


end	! ===== end ===== end ===== end ===== end ===== end ===== end ===== end ===== end ===== end =====


]]>
</Script_VL>

<Comment SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Comment>

<ParamSection SectVersion="22" SectionFlags="0" SubIdent="0">
	<ParamSectHeader>
		<AutoHotspots>false</AutoHotspots>
		<StatBits>
			<STBit_FixSize/>
		</StatBits>
		<WDLeftFrame>0</WDLeftFrame>
		<WDRightFrame>0</WDRightFrame>
		<WDTopFrame>0</WDTopFrame>
		<WDBotFrame>0</WDBotFrame>
		<LayFlags>65535</LayFlags>
		<WDMirrorThickness>0</WDMirrorThickness>
		<WDWallInset>0</WDWallInset>
	</ParamSectHeader>
	<Parameters>
		<Length Name="A">
			<Description><![CDATA["Dimension 1"]]></Description>
			<Fix/>
			<Value>1</Value>
		</Length>
		<Length Name="B">
			<Description><![CDATA["Dimension 2"]]></Description>
			<Fix/>
			<Value>1</Value>
		</Length>
		<Length Name="ZZYZX">
			<Description><![CDATA["Height"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Length>
		<Integer Name="AC_WallContours">
			<Description><![CDATA["Wall Contours (0-None,1-Full,2-Side,3-Length)"]]></Description>
			<Fix/>
			<Value>0</Value>
		</Integer>
		<Integer Name="AC_Hole_Hotspot_Control">
			<Description><![CDATA["Hotspots 0-None,1-2D,2-3D,3-All"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>3</Value>
		</Integer>
		<Boolean Name="AC_show2DHotspotsIn3D">
			<Description><![CDATA["Show 2D Hotspots in 3D"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Length Name="ac_bottomlevel">
			<Description><![CDATA["Bottom Level"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Length>
		<Length Name="ac_toplevel">
			<Description><![CDATA["Top Level"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Integer Name="gs_macro_version">
			<Description><![CDATA["Macro Version"]]></Description>
			<Value>12</Value>
		</Integer>
		<Integer Name="iDoorType">
			<Description><![CDATA["Door Type"]]></Description>
			<Value>0</Value>
		</Integer>
		<Angle Name="AC_Hole_Position_Angle">
			<Description><![CDATA["Hole Position Angle"]]></Description>
			<Value>0</Value>
		</Angle>
		<Integer Name="AC_WallType">
			<Description><![CDATA["Wall Type"]]></Description>
			<Value>1</Value>
		</Integer>
		<Integer Name="AC_WindowInWallContour">
			<Description><![CDATA["Window in Wall Contour"]]></Description>
			<ArrayValues FirstDimension="4" SecondDimension="0">
				<AVal Row="1">0</AVal>
				<AVal Row="2">0</AVal>
				<AVal Row="3">0</AVal>
				<AVal Row="4">0</AVal>
			</ArrayValues>
		</Integer>
		<Length Name="AC_WallContourPolygon">
			<Description><![CDATA["Wall Contour Polygon"]]></Description>
			<ArrayValues FirstDimension="1" SecondDimension="3">
				<AVal Column="1" Row="1">0</AVal>
				<AVal Column="2" Row="1">0</AVal>
				<AVal Column="3" Row="1">0</AVal>
			</ArrayValues>
		</Length>
		<Integer Name="AC_Wall_Direction_Type">
			<Description><![CDATA["Wall Direction Type"]]></Description>
			<Value>0</Value>
		</Integer>
		<Boolean Name="AC_HoleSideMaterial">
			<Description><![CDATA["Hole has Wall's Side Surface"]]></Description>
			<Fix/>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="AC_HoleMaterialCurved">
			<Description><![CDATA["Hole Surface's Split is Curved in Curved Walls"]]></Description>
			<Fix/>
			<Value>0</Value>
		</Boolean>

		<!-- gs_wallhole_geometry: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_wallhole_geometry">
			<Description><![CDATA["Wallhole Geometry"]]></Description>
		</Title>
		<Length Name="refWidth">
			<Description><![CDATA["Reference Width"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="leftWidth">
			<Description><![CDATA["Left Offset from the Origo"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="rightWidth">
			<Description><![CDATA["Right Offset from the Origo"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="radSill">
			<Description><![CDATA["Curved Wall - Sill Radius"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="radBoard">
			<Description><![CDATA["Curved Wall - Board Radius"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="WOD">
			<Description><![CDATA["Curved Wall - Wall Center Distance"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="offsY">
			<Description><![CDATA["Vertical Offset Size"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="gs_sidelight_WHole_width_left">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="gs_sidelight_WHole_width_right">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="gs_sidelight_parapet_hgt_left">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="gs_sidelight_parapet_hgt_right">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="sillRight">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="sillLeft">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="sillLeft_sL">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="sillRight_sL">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="sillLeft_sR">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="sillRight_sR">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="boardLeft_sL">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="boardRight_sL">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="boardLeft_sR">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="boardRight_sR">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>

		<!-- gs_macro_control_parameters: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_macro_control_parameters">
			<Description><![CDATA["Macro Control Parameters"]]></Description>
		</Title>
		<Boolean Name="isWindow">
			<Description><![CDATA["Window or Door Type Object"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="isEmptyOpening">
			<Description><![CDATA["Opening"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="Suppress_isWindow">
			<Description><![CDATA["Force to Door Type Object"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="gs_IsCurved">
			<Description><![CDATA["Curved Window"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="bParalellInCurvedWalls">
			<Description><![CDATA["Parallel Opening in Curved Walls"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="bCasingTolerance">
			<Description><![CDATA["Offset Casing with Tolerance Sizes"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="bDrawOutsideCasingFill">
			<Description><![CDATA["Draw Wallhole Fill at Outside"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="bDrawInsideCasingFill">
			<Description><![CDATA["Draw Wallhole Fill at Inside"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Integer Name="gs_CasingOutTypeEnable">
			<Description><![CDATA["Casing Outside Type Enable"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Integer Name="gs_CasingInTypeEnable">
			<Description><![CDATA["Casing Inside Type Enable"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Boolean Name="bShowEdgeHotspots">
			<Description><![CDATA["Show Hotspots at Jamb Extensions Edge"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="bshowCasbSill">
			<Description><![CDATA["Show Casing below Sill on UI"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Length Name="smallRadiusEllips">
			<Description><![CDATA["smaller radius of ellips arch"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>

		<!-- iWindowShape: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Integer Name="iWindowShape">
			<Description><![CDATA["Window Shape"]]></Description>
			<Flags>
				<ParFlg_BoldName/>
			</Flags>
			<Value>0</Value>
		</Integer>
		<Length Name="archHeight">
			<Description><![CDATA["Height of the Arc"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.25</Value>
		</Length>
		<Integer Name="nArchResolution">
			<Description><![CDATA["Arch Resolution"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Integer>

		<!-- iRevealType: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Integer Name="iRevealType">
			<Description><![CDATA["Reveal Type"]]></Description>
			<Flags>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Length Name="gs_reveal_left">
			<Description><![CDATA["Jamb Depth Side 2"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="gs_reveal_right">
			<Description><![CDATA["Jamb Depth"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="gs_reveal_left_sL">
			<Description><![CDATA["Lower Jamb Depth Side 2"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="gs_reveal_right_sR">
			<Description><![CDATA["Lower Jamb Depth Side 1"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="revealInnerLeft">
			<Description><![CDATA["Inner Jamb Depth Side 2"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="revealInnerRight">
			<Description><![CDATA["Inner Jamb Depth"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="gs_reveal_double_innerLeft_sL">
			<Description><![CDATA["Inner Lower Jamb Depth Side 2"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="gs_reveal_double_innerRight_sR">
			<Description><![CDATA["Inner Lower Jamb Depth Side 1"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="gs_reveal_top">
			<Description><![CDATA["Head Jamb Depth"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="gs_reveal_bottom">
			<Description><![CDATA["Sill Jamb Depth"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.06</Value>
		</Length>
		<Length Name="gs_reveal_bottom_sL">
			<Description><![CDATA["Sill Depth Side 2"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="gs_reveal_bottom_sR">
			<Description><![CDATA["Sill Depth Side 1"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="gs_reveal_splayed_innerTop">
			<Description><![CDATA["Inner Head Depth"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="gs_reveal_splayed_innerBottom">
			<Description><![CDATA["Inner Sill Depth"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="gs_reveal_double_innerTop">
			<Description><![CDATA["Inner Head Depth"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="gs_reveal_double_innerBottom">
			<Description><![CDATA["Inner Sill Depth"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="gs_reveal_double_innerBottom_sL">
			<Description><![CDATA["Inner Sill Depth Side 2"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="gs_reveal_double_innerBottom_sR">
			<Description><![CDATA["Inner Sill Depth Side 1"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="gs_reveal_outer_jamb_depth">
			<Description><![CDATA["Outer Jamb Depth"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.08</Value>
		</Length>
		<Angle Name="gs_reveal_left_angle">
			<Description><![CDATA["Angle Side 2"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>20</Value>
		</Angle>
		<Angle Name="gs_reveal_right_angle">
			<Description><![CDATA["Angle Side"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>20</Value>
		</Angle>
		<Angle Name="gs_reveal_top_angle">
			<Description><![CDATA["Upper Side Angle"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>20</Value>
		</Angle>
		<Angle Name="gs_reveal_bottom_angle">
			<Description><![CDATA["Bottom Side Angle"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>20</Value>
		</Angle>
		<Angle Name="gs_reveal_outerLeft_angle">
			<Description><![CDATA["Outer Angle Side 2"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>20</Value>
		</Angle>
		<Angle Name="gs_reveal_outerRight_angle">
			<Description><![CDATA["Outer Angle Side"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>20</Value>
		</Angle>
		<Angle Name="gs_reveal_outerTop_angle">
			<Description><![CDATA["Outer Angle Upper Side"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>20</Value>
		</Angle>
		<Angle Name="gs_reveal_outerBottom_angle">
			<Description><![CDATA["Outer Angle Bottom Side"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>20</Value>
		</Angle>
		<Length Name="gs_mountingFrame_width_right">
			<Description><![CDATA["Mounting Frame Width Right"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.06</Value>
		</Length>
		<Length Name="gs_mountingFrame_width_top">
			<Description><![CDATA["Mounting Frame Width Upper"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.06</Value>
		</Length>
		<Length Name="gs_mountingFrame_width_bottom">
			<Description><![CDATA["Mounting Frame Width Bottom"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.06</Value>
		</Length>
		<Length Name="leftRevealPnts">
			<Description><![CDATA["Left Reveal Points"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<ArrayValues FirstDimension="2" SecondDimension="2">
				<AVal Column="1" Row="1">0</AVal>
				<AVal Column="2" Row="1">0</AVal>
				<AVal Column="1" Row="2">0</AVal>
				<AVal Column="2" Row="2">0</AVal>
			</ArrayValues>
		</Length>
		<Length Name="rightRevealPnts">
			<Description><![CDATA["Right Reveal Points"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<ArrayValues FirstDimension="2" SecondDimension="2">
				<AVal Column="1" Row="1">0</AVal>
				<AVal Column="2" Row="1">0</AVal>
				<AVal Column="1" Row="2">0</AVal>
				<AVal Column="2" Row="2">0</AVal>
			</ArrayValues>
		</Length>
		<Integer Name="iRevealPointsIdx">
			<Description><![CDATA["Reveal Points Index"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<ArrayValues FirstDimension="20" SecondDimension="0">
				<AVal Row="1">1</AVal>
				<AVal Row="2">1</AVal>
				<AVal Row="3">1</AVal>
				<AVal Row="4">1</AVal>
				<AVal Row="5">1</AVal>
				<AVal Row="6">2</AVal>
				<AVal Row="7">1</AVal>
				<AVal Row="8">1</AVal>
				<AVal Row="9">1</AVal>
				<AVal Row="10">1</AVal>
				<AVal Row="11">1</AVal>
				<AVal Row="12">1</AVal>
				<AVal Row="13">1</AVal>
				<AVal Row="14">1</AVal>
				<AVal Row="15">1</AVal>
				<AVal Row="16">2</AVal>
				<AVal Row="17">1</AVal>
				<AVal Row="18">1</AVal>
				<AVal Row="19">1</AVal>
				<AVal Row="20">1</AVal>
			</ArrayValues>
		</Integer>

		<!-- gs_corner_functions: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_corner_functions">
			<Description><![CDATA["Corner Functions"]]></Description>
		</Title>
		<Boolean Name="bLeftCornerFunction">
			<Description><![CDATA["Left Corner"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Angle Name="leftCornerAngle">
			<Description><![CDATA["Left Corner Angle"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Angle>
		<Length Name="leftConnWallThk">
			<Description><![CDATA["Left Connected Wall Thickness"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Boolean Name="bRightCornerFunction">
			<Description><![CDATA["Right Corner"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Angle Name="rightCornerAngle">
			<Description><![CDATA["Right Corner Angle"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Angle>
		<Length Name="rightConnWallThk">
			<Description><![CDATA["Right Connected Wall Thickness"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0</Value>
		</Length>

		<!-- gs_tolerance: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_tolerance">
			<Description><![CDATA["Tolerance"]]></Description>
		</Title>
		<Length Name="gs_tolerance_left">
			<Description><![CDATA["Tolerance Left"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="gs_tolerance_right">
			<Description><![CDATA["Tolerance Right"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="gs_tolerance_upper">
			<Description><![CDATA["Tolerance Upper"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="gs_tolerance_lower">
			<Description><![CDATA["Tolerance Lower"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>

		<!-- gs_window_oversize: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_window_oversize">
			<Description><![CDATA["Oversize"]]></Description>
		</Title>
		<Length Name="gs_left_oversize">
			<Description><![CDATA["Left Opening Oversize"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="gs_right_oversize">
			<Description><![CDATA["Right Opening Oversize"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="gs_upper_oversize">
			<Description><![CDATA["Upper Opening Oversize"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="gs_lower_oversize">
			<Description><![CDATA["Lower Opening Oversize"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>

		<!-- gs_trim_outside: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Boolean Name="gs_trim_outside">
			<Description><![CDATA["Casing Outside"]]></Description>
			<Flags>
				<ParFlg_BoldName/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="bDrawOutsideTrim">
			<Description><![CDATA["Draw Outside Casing 2D and 3D"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="bShowTrimOutsideSplice">
			<Description><![CDATA["Show Outside Trim Splice Lines"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<String Name="gs_trimtype_out">
			<Description><![CDATA["Casing Type Outside"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Прямоугольная"]]></Value>
		</String>
		<Integer Name="gs_trimtype_out_int">
			<Description><![CDATA["Casing Type Outside"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Integer Name="iCasingHeadTypeOut">
			<Description><![CDATA["Outside Casing Head Type"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Boolean Name="bArchitraveCapital">
			<Description><![CDATA["Architrave Capital"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Integer Name="iArchitraveCapitalType">
			<Description><![CDATA["Architrave Capital Type"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Length Name="architraveCapitalWidth">
			<Description><![CDATA["Architrave Capital Width"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.02</Value>
		</Length>
		<Boolean Name="bCasingBottomOutside">
			<Description><![CDATA["Outside Bottom Casing"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="gs_trim_outside_uniform">
			<Description><![CDATA["Uniform Casing Widths"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Length Name="gs_tw_right_out">
			<Description><![CDATA["Width Side 1"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Length Name="gs_tw_left_out">
			<Description><![CDATA["Width Side 2"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Length Name="gs_tw_top_out">
			<Description><![CDATA["Width Top"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Length Name="gs_tw_bottom_out">
			<Description><![CDATA["Width Bottom"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Length Name="gs_trim_thk_out">
			<Description><![CDATA["Thickness on Wall"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.019</Value>
		</Length>
		<Length Name="gs_trim_width_out">
			<Description><![CDATA["Thickness in Wallhole"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.025</Value>
		</Length>
		<Length Name="gs_trim_offs_out">
			<Description><![CDATA["Offset"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="gs_trimov_top_left_out">
			<Description><![CDATA["Top Overhang"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="gs_trimov_top_right_out">
			<Description><![CDATA["Top Overhang"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="gs_trimov_bot_left_out">
			<Description><![CDATA["Bottom Overhang"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="gs_trimov_bot_right_out">
			<Description><![CDATA["Bottom Overhang"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="casingOverhangBottomSideOut">
			<Description><![CDATA["Bottom Overhang"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Boolean Name="gs_trimb_atframe_out">
			<Description><![CDATA["Bottom Casing at Frame Outside"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="gs_trim_atframe_out">
			<Description><![CDATA["Casing at Frame Outside"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="gs_trim_show_cover_out">
			<Description><![CDATA["Cover Outer Wall Surface"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Length Name="gs_trim_jambext_nosing_out">
			<Description><![CDATA["Nosing"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.05</Value>
		</Length>

		<!-- gs_trim_inside: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Boolean Name="gs_trim_inside">
			<Description><![CDATA["Casing Inside"]]></Description>
			<Flags>
				<ParFlg_BoldName/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="bDrawInsideTrim">
			<Description><![CDATA["Draw Inside Casing 2D and 3D"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="bShowTrimInsideSplice">
			<Description><![CDATA["Show Inside Trim Splice Lines"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<String Name="gs_trimtype_in">
			<Description><![CDATA["Casing Type Inside"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Прямоугольная"]]></Value>
		</String>
		<Integer Name="gs_trimtype_in_int">
			<Description><![CDATA["Casing Type Inside"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Boolean Name="gs_trim_below_board">
			<Description><![CDATA["Casing below Board"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="gs_trim_inside_uniform">
			<Description><![CDATA["Uniform Casing Widths"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Length Name="gs_tw_right_in">
			<Description><![CDATA["Width Side 1"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Length Name="gs_tw_left_in">
			<Description><![CDATA["Width Side 2"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Length Name="gs_tw_top_in">
			<Description><![CDATA["Width Top"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Length Name="gs_tw_bottom_in">
			<Description><![CDATA["Width Bottom"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Length Name="gs_trim_thk_in">
			<Description><![CDATA["Thickness on Wall"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.019</Value>
		</Length>
		<Length Name="gs_trim_width_in">
			<Description><![CDATA["Thickness in Wallhole"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.025</Value>
		</Length>
		<Length Name="gs_trim_offs_in">
			<Description><![CDATA["Offset"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="gs_trimov_top_left_in">
			<Description><![CDATA["Top Overhang"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="gs_trimov_top_right_in">
			<Description><![CDATA["Top Overhang"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="gs_trimov_bot_left_in">
			<Description><![CDATA["Casing Overhang Bottom Left Inside"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="gs_trimov_bot_right_in">
			<Description><![CDATA["Bottom Overhang"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Boolean Name="gs_trim_atframe_in">
			<Description><![CDATA["Casing at Frame Inside"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="gs_trim_stack_left">
			<Description><![CDATA["Casing at Ganging Left"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="gs_trim_stack_right">
			<Description><![CDATA["Casing at Ganging Right"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="gs_trim_stack_bottom">
			<Description><![CDATA["Casing at Ganging Bottom"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="gs_trim_stack_top">
			<Description><![CDATA["Casing at Ganging Top"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="gs_trim_show_cover_in">
			<Description><![CDATA["Cover Inner Wall Surface"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Length Name="gs_trim_jambext_nosing_in">
			<Description><![CDATA["Nosing"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.03</Value>
		</Length>
		<Boolean Name="bWindowSymbolAtMiddle">
			<Description><![CDATA["Window Symbol at Middle"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>

		<!-- gs_apron: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Boolean Name="gs_apron">
			<Description><![CDATA["Apron"]]></Description>
			<Flags>
				<ParFlg_BoldName/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Length Name="gs_apron_thk">
			<Description><![CDATA["Apron Thickness"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.0254</Value>
		</Length>
		<Length Name="gs_apron_width">
			<Description><![CDATA["Apron Width"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.0508</Value>
		</Length>

		<!-- bDrawSill: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Boolean Name="bDrawSill">
			<Description><![CDATA["Draw Sill"]]></Description>
			<Flags>
				<ParFlg_BoldName/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Integer Name="iSillType">
			<Description><![CDATA["Type of the Sill"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Length Name="sillBottom">
			<Description><![CDATA["Sill Bottom Distance"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="sillBottomOutside">
			<Description><![CDATA["Sill Bottom Outside"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Boolean Name="bSillPlaneCut">
			<Description><![CDATA["Use Cut Plane at Sill Side"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Length Name="SillSideHeight">
			<Description><![CDATA["Cut Plane Height"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Angle Name="sillSideAngle">
			<Description><![CDATA["Cut Plane Angle"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Angle>
		<Boolean Name="bThresholdSillPlaneCut">
			<Description><![CDATA["Use Cut Plane at Threshold Sill Side"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Length Name="ThresholdSillSideHeight">
			<Description><![CDATA["Cut Plane Height"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>

		<!-- bDrawBoard: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Boolean Name="bDrawBoard">
			<Description><![CDATA["Draw Board"]]></Description>
			<Flags>
				<ParFlg_BoldName/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Length Name="boardBottom">
			<Description><![CDATA["Board Bottom Distance"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Boolean Name="bBoardPlaneCut">
			<Description><![CDATA["Use Cut Plane at Board Side"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Length Name="boardSideHeight">
			<Description><![CDATA["Cut Plane Height"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Angle Name="boardSideAngle">
			<Description><![CDATA["Cut Plane Angle"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Angle>
		<Boolean Name="bThresholdBoardPlaneCut">
			<Description><![CDATA["Use Cut Plane at Threshold Board Side"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Length Name="ThresholdBoardSideHeight">
			<Description><![CDATA["Cut Plane Height"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>

		<!-- gs_2D_representation: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_2D_representation">
			<Description><![CDATA["2D and Section Representation"]]></Description>
		</Title>
		<Integer Name="lod2D_Casing">
			<Description><![CDATA["Level of Detail in 2D"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Boolean Name="bShowAddHotspots">
			<Description><![CDATA["Show Additional Hotspots"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<PenColor Name="gs_pen_2D">
			<Description><![CDATA["2D Contour Pen"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>4</Value>
		</PenColor>
		<PenColor Name="gs_trim_pen_cont">
			<Description><![CDATA["Casing Cut Line Pen on Both Sides"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</PenColor>
		<Boolean Name="gs_bFills">
			<Description><![CDATA["Use Fills"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<FillPattern Name="gs_wallhole_fill">
			<Description><![CDATA["Wallhole Fill Type"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</FillPattern>
		<PenColor Name="gs_wallhole_pen_fg">
			<Description><![CDATA["Wallhole Fill Pen"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</PenColor>
		<PenColor Name="gs_wallhole_pen_bg">
			<Description><![CDATA["Wallhole Fill Background Pen"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>92</Value>
		</PenColor>
		<FillPattern Name="gs_wallhole_fill_sl">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</FillPattern>
		<PenColor Name="gs_wallhole_pen_sl_fg">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</PenColor>
		<PenColor Name="gs_wallhole_pen_sl_bg">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</PenColor>
		<Boolean Name="gs_trim_bFills_in">
			<Description><![CDATA["Use Fills on Inside Casing"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<PenColor Name="gs_trim_wallhole_pen_fg_in">
			<Description><![CDATA["Fill Pen"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>-1</Value>
		</PenColor>
		<PenColor Name="gs_trim_wallhole_pen_bg_in">
			<Description><![CDATA["Fill Backgroud Pen"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</PenColor>
		<Boolean Name="gs_trim_bFills_out">
			<Description><![CDATA["Use Fills on Outside Casing"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<PenColor Name="gs_trim_wallhole_pen_fg_out">
			<Description><![CDATA["Fill Pen"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>-1</Value>
		</PenColor>
		<PenColor Name="gs_trim_wallhole_pen_bg_out">
			<Description><![CDATA["Fill Backgroud Pen"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</PenColor>
		<FillPattern Name="gs_trim_fill_in">
			<Description><![CDATA["Casing Fill Type Inside"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>65</Value>
		</FillPattern>
		<PenColor Name="gs_trim_pen_fg_in">
			<Description><![CDATA["Casing Fill Pen Inside"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>7</Value>
		</PenColor>
		<PenColor Name="gs_trim_pen_bg_in">
			<Description><![CDATA["Casing Fill Background Pen Inside"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>39</Value>
		</PenColor>
		<FillPattern Name="gs_trim_fill_out">
			<Description><![CDATA["Casing Fill Type Outside"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>26</Value>
		</FillPattern>
		<PenColor Name="gs_trim_pen_fg_out">
			<Description><![CDATA["Casing Fill Pen Outside"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>4</Value>
		</PenColor>
		<PenColor Name="gs_trim_pen_bg_out">
			<Description><![CDATA["Casing Fill Background Pen Outside"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>59</Value>
		</PenColor>

		<!-- gs_3D_representation: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_3D_representation">
			<Description><![CDATA["3D Representation"]]></Description>
		</Title>
		<Integer Name="lod3D">
			<Description><![CDATA["Level of Detail in 3D"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<PenColor Name="gs_frame_pen">
			<Description><![CDATA["Frame Pen"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>2</Value>
		</PenColor>

		<!-- gs_window_material: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_window_material">
			<Description><![CDATA["Surfaces"]]></Description>
		</Title>
		<Boolean Name="bLinkCasingSurfaces">
			<Description><![CDATA["Uniform Casing Surfaces"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Integer Name="stored_material">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<ArrayValues FirstDimension="4" SecondDimension="1">
				<AVal Column="1" Row="1">-9999</AVal>
				<AVal Column="1" Row="2">0</AVal>
				<AVal Column="1" Row="3">-9999</AVal>
				<AVal Column="1" Row="4">0</AVal>
			</ArrayValues>
		</Integer>
		<Material Name="gs_trim_in_mat">
			<Description><![CDATA["Interior Casing Surface"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Material>
		<Material Name="gs_trim_out_mat">
			<Description><![CDATA["Exterior Casing Surface"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Material>
		<Material Name="gs_apron_mat">
			<Description><![CDATA["Apron Surface"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>59</Value>
		</Material>

		<!-- gs_window_stack: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_window_stack">
			<Description><![CDATA["Ganging"]]></Description>
		</Title>
		<Boolean Name="gs_stack_left">
			<Description><![CDATA["Connection on the Left"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="gs_stack_right">
			<Description><![CDATA["Connection on the Right"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="gs_stack_top">
			<Description><![CDATA["Connection on the Top"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="gs_stack_bottom">
			<Description><![CDATA["Connection on the Bottom"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Integer Name="gs_ui_sub_tabpage">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Length Name="bBoardElevUsa">
			<Description><![CDATA["Board Elevation (USA)"]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>

		<!-- gs_string_resources: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_string_resources">
			<Description><![CDATA["String Resources"]]></Description>
		</Title>
		<String Name="stCasingType">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<ArrayValues FirstDimension="3" SecondDimension="0">
				<AVal Row="1"><![CDATA["Простой"]]></AVal>
				<AVal Row="2"><![CDATA["Традиционное"]]></AVal>
				<AVal Row="3"><![CDATA["Сложный"]]></AVal>
			</ArrayValues>
		</String>
		<String Name="stCasingHeadType">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<ArrayValues FirstDimension="4" SecondDimension="0">
				<AVal Row="1"><![CDATA["Тип 1"]]></AVal>
				<AVal Row="2"><![CDATA["Тип 2"]]></AVal>
				<AVal Row="3"><![CDATA["Тип 3"]]></AVal>
				<AVal Row="4"><![CDATA["Тип 4"]]></AVal>
			</ArrayValues>
		</String>
		<String Name="stArchitraveCapitalType">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<ArrayValues FirstDimension="3" SecondDimension="0">
				<AVal Row="1"><![CDATA["Тип 1"]]></AVal>
				<AVal Row="2"><![CDATA["Тип 2"]]></AVal>
				<AVal Row="3"><![CDATA["Тип 3"]]></AVal>
			</ArrayValues>
		</String>
		<String Name="stSubTabpageToolTip">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Выбор Вкладки: Общие Параметры, Реквизиты"]]></Value>
		</String>
		<String Name="stCutLinePenNote">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Перо Видимого Контура/3D наличника как для рам окна."]]></Value>
		</String>

		<!-- gs_corner_column: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Boolean Name="gs_corner_column">
			<Description><![CDATA["Corner Column"]]></Description>
			<Flags>
				<ParFlg_BoldName/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Length Name="gs_cc_width">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.175</Value>
		</Length>
		<Length Name="gs_cc_thk">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.14</Value>
		</Length>
		<Length Name="gs_cc_pr">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Length Name="openingHeight">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1.5</Value>
		</Length>
		<Boolean Name="bCasingInPage">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="bCasingOutPage">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<String Name="stCasingUI">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<ArrayValues FirstDimension="49" SecondDimension="0">
				<AVal Row="1"><![CDATA["Внутри"]]></AVal>
				<AVal Row="2"><![CDATA["Снаружи"]]></AVal>
				<AVal Row="3"><![CDATA["Увеличение Проема за Счет Наличника"]]></AVal>
				<AVal Row="4"><![CDATA["Перо Контура"]]></AVal>
				<AVal Row="5"><![CDATA["Внутри"]]></AVal>
				<AVal Row="6"><![CDATA["Снаружи"]]></AVal>
				<AVal Row="7"><![CDATA["Тип Штриховки"]]></AVal>
				<AVal Row="8"><![CDATA["Перо Штриховки"]]></AVal>
				<AVal Row="9"><![CDATA["Перо Фона"]]></AVal>
				<AVal Row="10"><![CDATA["На Наружной Поверхности Стены"]]></AVal>
				<AVal Row="11"><![CDATA["На Внутренней Поверхности Стены"]]></AVal>
				<AVal Row="12"><![CDATA["Ширина Наружного Левого Наличника"]]></AVal>
				<AVal Row="13"><![CDATA["Ширина Наружного Правого Наличника"]]></AVal>
				<AVal Row="14"><![CDATA["Ширина Наружного Наличника"]]></AVal>
				<AVal Row="15"><![CDATA["Смещение Наружного Добора"]]></AVal>
				<AVal Row="16"><![CDATA["Толщина Наружного Наличника"]]></AVal>
				<AVal Row="17"><![CDATA["Внешний Выступ"]]></AVal>
				<AVal Row="18"><![CDATA["Ширина Внутреннего Левого Наличника"]]></AVal>
				<AVal Row="19"><![CDATA["Ширина Внутреннего Правого Наличника"]]></AVal>
				<AVal Row="20"><![CDATA["Тип Перемычки"]]></AVal>
				<AVal Row="21"><![CDATA["Консольные Выступы"]]></AVal>
				<AVal Row="22"><![CDATA["Толщина Внутреннего Наличника"]]></AVal>
				<AVal Row="23"><![CDATA["Внутренний Выступ"]]></AVal>
				<AVal Row="24"><![CDATA["Ширина Наружного Нижнего Наличника"]]></AVal>
				<AVal Row="25"><![CDATA["Ширина Наружного Верхнего Наличника"]]></AVal>
				<AVal Row="26"><![CDATA["Ширина Внутреннего Нижнего Наличника"]]></AVal>
				<AVal Row="27"><![CDATA["Ширина Внутреннего Верхнего Наличника"]]></AVal>
				<AVal Row="28"><![CDATA["Тип Внутреннего Наличника"]]></AVal>
				<AVal Row="29"><![CDATA["Выступ Вверху Снаружи"]]></AVal>
				<AVal Row="30"><![CDATA["Выступ Внизу Снаружи"]]></AVal>
				<AVal Row="31"><![CDATA["Тип Наружного Наличника"]]></AVal>
				<AVal Row="32"><![CDATA["Выступ Вверху Внутри"]]></AVal>
				<AVal Row="33"><![CDATA["Выступ Внизу Внутри"]]></AVal>
				<AVal Row="34"><![CDATA["Ширина Наружного Левого Добора"]]></AVal>
				<AVal Row="35"><![CDATA["Ширина Наружного Правого Добора"]]></AVal>
				<AVal Row="36"><![CDATA["Смещение Наружного Добора"]]></AVal>
				<AVal Row="37"><![CDATA["Толщина Наружного Добора"]]></AVal>
				<AVal Row="38"><![CDATA["Ширина Наружного Добора"]]></AVal>
				<AVal Row="39"><![CDATA["Толщина Внутреннего Верхнего Добора"]]></AVal>
				<AVal Row="40"><![CDATA["Толщина Внутреннего Левого Добора"]]></AVal>
				<AVal Row="41"><![CDATA["Толщина Внутреннего Правого Добора"]]></AVal>
				<AVal Row="42"><![CDATA["Смещение Внутреннего Добора"]]></AVal>
				<AVal Row="43"><![CDATA["Толщина Внутреннего Добора"]]></AVal>
				<AVal Row="44"><![CDATA["Ширина Внутреннего Добора"]]></AVal>
				<AVal Row="45"><![CDATA["Ширина Наружного Верхнего Добора"]]></AVal>
				<AVal Row="46"><![CDATA["Ширина Внутреннего Верхнего Добора"]]></AVal>
				<AVal Row="47"><![CDATA["Наличник под Отливом"]]></AVal>
				<AVal Row="48"><![CDATA["Наличник недопустим для текущего типа четверти."]]></AVal>
				<AVal Row="49"><![CDATA["Наличник недопустим для трапецеидальных и криволинейных стен."]]></AVal>
			</ArrayValues>
		</String>
		<String Name="stCasingUITooltip">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<ArrayValues FirstDimension="24" SecondDimension="0">
				<AVal Row="1"><![CDATA["Ширина Наружного Наличника со Стороны 1"]]></AVal>
				<AVal Row="2"><![CDATA["Ширина Наружного Наличника со Стороны 2"]]></AVal>
				<AVal Row="3"><![CDATA["Ширина Верхнего Наружного Наличника"]]></AVal>
				<AVal Row="4"><![CDATA["Ширина Нижнего Наружного Наличника"]]></AVal>
				<AVal Row="5"><![CDATA["Толщина Наружного Наличника"]]></AVal>
				<AVal Row="6"><![CDATA["Толщина Наружного Добора"]]></AVal>
				<AVal Row="7"><![CDATA["Смещение Наружного Добора"]]></AVal>
				<AVal Row="8"><![CDATA["Ширина Наружного Наличника"]]></AVal>
				<AVal Row="9"><![CDATA["Выступ Верхнего Наружного Наличника"]]></AVal>
				<AVal Row="10"><![CDATA["Выступ Бокового Наружного Наличника"]]></AVal>
				<AVal Row="11"><![CDATA["Внешний Выступ"]]></AVal>
				<AVal Row="12"><![CDATA["Внутренний Выступ"]]></AVal>
				<AVal Row="13"><![CDATA["Ширина Внутреннего Наличника со Стороны 1"]]></AVal>
				<AVal Row="14"><![CDATA["Ширина Внутреннего Наличника со Стороны 2"]]></AVal>
				<AVal Row="15"><![CDATA["Ширина Верхнего Внутреннего Наличника"]]></AVal>
				<AVal Row="16"><![CDATA["Ширина Нижнего Внутреннего Наличника"]]></AVal>
				<AVal Row="17"><![CDATA["Толщина Внутреннего Наличника"]]></AVal>
				<AVal Row="18"><![CDATA["Толщина Внутреннего Добора"]]></AVal>
				<AVal Row="19"><![CDATA["Смещение Внутреннего Добора"]]></AVal>
				<AVal Row="20"><![CDATA["Ширина Внутреннего Наличника"]]></AVal>
				<AVal Row="21"><![CDATA["Выступ Верхнего Внутреннего Наличника"]]></AVal>
				<AVal Row="22"><![CDATA["Выступ Нижнего Внутреннего Наличника"]]></AVal>
				<AVal Row="23"><![CDATA["Ширина Консольного Выступа"]]></AVal>
				<AVal Row="24"><![CDATA["Выступ Нижнего Наружного Наличника"]]></AVal>
			</ArrayValues>
		</String>
		<String Name="stNORCasingTypes">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<ArrayValues FirstDimension="18" SecondDimension="0">
				<AVal Row="1"><![CDATA["Нет"]]></AVal>
				<AVal Row="2"><![CDATA["Только Отлив"]]></AVal>
				<AVal Row="3"><![CDATA["Только Слева"]]></AVal>
				<AVal Row="4"><![CDATA["Слева, Отлив"]]></AVal>
				<AVal Row="5"><![CDATA["Только Справа"]]></AVal>
				<AVal Row="6"><![CDATA["Справа, Отлив"]]></AVal>
				<AVal Row="7"><![CDATA["Слева, Справа"]]></AVal>
				<AVal Row="8"><![CDATA["Слева, Справа, Отлив"]]></AVal>
				<AVal Row="9"><![CDATA["Только Антаблемент"]]></AVal>
				<AVal Row="10"><![CDATA["Сандрик, Отлив"]]></AVal>
				<AVal Row="11"><![CDATA["Антаблемент, Слева"]]></AVal>
				<AVal Row="12"><![CDATA["Сандрик, Слева, Отлив"]]></AVal>
				<AVal Row="13"><![CDATA["Антаблемент, Справа"]]></AVal>
				<AVal Row="14"><![CDATA["Сандрик, Справа, Отлив"]]></AVal>
				<AVal Row="15"><![CDATA["Антаблемент, Слева, Справа"]]></AVal>
				<AVal Row="16"><![CDATA["Сандрик, Слева, Справа, Отлив"]]></AVal>
				<AVal Row="17"><![CDATA["Все"]]></AVal>
				<AVal Row="18"><![CDATA["Простой Наличник"]]></AVal>
			</ArrayValues>
		</String>
		<String Name="stCasingTextNOR">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<ArrayValues FirstDimension="2" SecondDimension="0">
				<AVal Row="1"><![CDATA[""]]></AVal>
				<AVal Row="2"><![CDATA[""]]></AVal>
			</ArrayValues>
		</String>
		<Boolean Name="bEnableCasingNORUI">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="bTerraceDoorNORUI">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Integer Name="iNORCasingType">
			<Description><![CDATA["Casing Configuration"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>18</Value>
		</Integer>
		<Boolean Name="bEnableOutsideCasingSWEUI">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="bEnableInsideCasingSWEUI">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="bOpeningDirection">
			<Description><![CDATA[""]]></Description>
			<Value>0</Value>
		</Boolean>
		<Integer Name="iPanelType">
			<Description><![CDATA[""]]></Description>
			<Value>0</Value>
		</Integer>
		<Boolean Name="gs_board_inside">
			<Description><![CDATA[""]]></Description>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="gs_board_inside_sl_left">
			<Description><![CDATA[""]]></Description>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="gs_board_inside_sl_right">
			<Description><![CDATA[""]]></Description>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="bEnableSill">
			<Description><![CDATA[""]]></Description>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="bEnableApron">
			<Description><![CDATA[""]]></Description>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="bEnableCasingAtGanging">
			<Description><![CDATA[""]]></Description>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="gs_sill_outside">
			<Description><![CDATA[""]]></Description>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="gs_sill_outside_sl_left">
			<Description><![CDATA[""]]></Description>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="gs_sill_outside_sl_right">
			<Description><![CDATA[""]]></Description>
			<Value>0</Value>
		</Boolean>

		<!-- gs_usa_parameters: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_usa_parameters">
			<Description><![CDATA["USA Parameters"]]></Description>
		</Title>
		<Integer Name="gs_wt_m">
			<Description><![CDATA["Wall Type"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Boolean Name="bCasingPageUSA">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<String Name="stCasingTextUSA">
			<Description><![CDATA["UI Casing Text"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<ArrayValues FirstDimension="7" SecondDimension="0">
				<AVal Row="1"><![CDATA[""]]></AVal>
				<AVal Row="2"><![CDATA[""]]></AVal>
				<AVal Row="3"><![CDATA[""]]></AVal>
				<AVal Row="4"><![CDATA[""]]></AVal>
				<AVal Row="5"><![CDATA[""]]></AVal>
				<AVal Row="6"><![CDATA[""]]></AVal>
				<AVal Row="7"><![CDATA[""]]></AVal>
			</ArrayValues>
		</String>
		<Integer Name="iFrameStyle">
			<Description><![CDATA["Frame Style"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Length Name="gs_frame_width">
			<Description><![CDATA["Frame Width"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Angle Name="gs_sill_angle">
			<Description><![CDATA["Sill Angle"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Angle>
		<Length Name="gs_board_thk">
			<Description><![CDATA["Stool Thickness"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Boolean Name="gs_fsill">
			<Description><![CDATA["Bottom Frame at Sill"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Length Name="gs_trim_offs_out_top">
			<Description><![CDATA["Trim Offset Outside Top"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="gs_trim_offs_out_bottom">
			<Description><![CDATA["Trim Offset Outside Bottom"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="trim_offs_out_modify">
			<Description><![CDATA["Trim Offset Left-Right Modify Value"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Boolean Name="gs_sectgar">
			<Description><![CDATA["Sectional Garage Door"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="gs_pocket">
			<Description><![CDATA["Sectional Garage Door"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Integer Name="gs_door_type">
			<Description><![CDATA["Door Type"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Integer Name="gs_win_type">
			<Description><![CDATA["Window Type"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Boolean Name="gs_casing_nor">
			<Description><![CDATA["NOR Casing"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="gs_casing_che">
			<Description><![CDATA["CHE Casing"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="bCasingUSA">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="gs_pocket_door_frame">
			<Description><![CDATA["Pocket Door Frame"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="gs_frame_wthk">
			<Description><![CDATA["Frame Thickness=Wall Thickness"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="bLineCasingOffset">
			<Description><![CDATA["Show Line at Casing Offset"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>

		<!-- gs_sunshade_parameters: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_sunshade_parameters">
			<Description><![CDATA["SunShade Parameters"]]></Description>
		</Title>
		<Length Name="casingSetBackOnSides_out">
			<Description><![CDATA["Casing Set Back Outside"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="casingSetBackOnSides_in">
			<Description><![CDATA["Casing Set Back Inside"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="lengthCasingSetback">
			<Description><![CDATA[""]]></Description>
			<Value>0</Value>
		</Length>
		<Length Name="ifc_CasingDepth">
			<Description><![CDATA[""]]></Description>
			<Value>0</Value>
		</Length>
		<Length Name="ifc_CasingThickness">
			<Description><![CDATA[""]]></Description>
			<Value>0</Value>
		</Length>
		<Boolean Name="bTelescopic">
			<Description><![CDATA["Telescopic Door"]]></Description>
			<Value>0</Value>
		</Boolean>
		<Integer Name="gs_frame_style_m">
			<Description><![CDATA[""]]></Description>
			<Value>0</Value>
		</Integer>
		<Integer Name="bEnableSwitchableBottomCasing">
			<Description><![CDATA[""]]></Description>
			<Value>-1</Value>
		</Integer>
	</Parameters>
</ParamSection>

<CalledMacros SectVersion="2" SectionFlags="0" SubIdent="0">
	<Macro>
		<MName><![CDATA["CasingEnable"]]></MName>
		<MainGUID>6CF90E68-BCE3-4733-A1B7-F71C8DF9DFDE</MainGUID>
	</Macro>
	<Macro>
		<MName><![CDATA["SaveQueue"]]></MName>
		<MainGUID>94152DAD-3888-4DAC-AC2E-EB7988A1C356</MainGUID>
	</Macro>
	<Macro>
		<MName><![CDATA["LoadQueue"]]></MName>
		<MainGUID>76C49CD5-2439-4953-8829-5B7914C1A082</MainGUID>
	</Macro>
</CalledMacros>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="1" length_in_bytes="3220" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D49484452000000630000
	0062080600000044676D30000000097048597300000EC300000EC301C76FA864
	00000A4F6943435050686F746F73686F70204943432070726F66696C65000078
	DA9D53675453E9163DF7DEF4424B8880944B6F5215082052428B801491262A21
	09104A8821A1D91551C1114545041BC8A088038E8E808C15512C0C8A0AD807E4
	21A28E83A3888ACAFBE17BA36BD6BCF7E6CDFEB5D73EE7ACF39DB3CF07C0080C
	9648335135800CA9421E11E083C7C4C6E1E42E40810A2470001008B3642173FD
	230100F87E3C3C2B22C007BE000178D30B0800C04D9BC0301C87FF0FEA42995C
	01808401C07491384B08801400407A8E42A600404601809D98265300A0040060
	CB6362E300502D0060277FE6D300809DF8997B01005B94211501A09100201365
	884400683B00ACCF568A450058300014664BC43900D82D00304957664800B0B7
	00C0CE100BB200080C00305188852900047B0060C8232378008499001446F257
	3CF12BAE10E72A00007899B23CB9243945815B082D710757572E1E28CE49172B
	14366102619A402EC27999193281340FE0F3CC0000A0911511E083F3FD78CE0E
	AECECE368EB60E5F2DEABF06FF226262E3FEE5CFAB70400000E1747ED1FE2C2F
	B31A803B06806DFEA225EE04685E0BA075F78B66B20F40B500A0E9DA57F370F8
	7E3C3C45A190B9D9D9E5E4E4D84AC4425B61CA577DFE67C25FC057FD6CF97E3C
	FCF7F5E0BEE22481325D814704F8E0C2CCF44CA51CCF92098462DCE68F47FCB7
	0BFFFC1DD322C44962B9582A14E35112718E449A8CF332A52289429229C525D2
	FF64E2DF2CFB033EDF3500B06A3E017B912DA85D6303F64B27105874C0E2F700
	00F2BB6FC1D4280803806883E1CF77FFEF3FFD47A02500806649927100005E44
	242E54CAB33FC708000044A0812AB0411BF4C1182CC0061CC105DCC10BFC6036
	844224C4C24210420A64801C726029AC82422886CDB01D2A602FD4401D34C051
	688693700E2EC255B80E3D700FFA61089EC128BC81090441C808136121DA8801
	628A58238E08179985F821C14804128B2420C9881451224B91354831528A5420
	55481DF23D720239875C46BA913BC8003282FC86BC47319481B2513DD40CB543
	B9A8371A8446A20BD06474319A8F16A09BD072B41A3D8C36A1E7D0AB680FDA8F
	3E43C730C0E8180733C46C302EC6C342B1382C099363CBB122AC0CABC61AB056
	AC03BB89F563CFB17704128145C0093604774220611E4148584C584ED848A820
	1C243411DA093709038451C2272293A84BB426BA11F9C4186232318758482C23
	D6128F132F107B8843C437241289433227B9900249B1A454D212D246D26E5223
	E92CA99B34481A2393C9DA646BB20739942C202BC885E49DE4C3E433E41BE421
	F25B0A9D624071A4F853E22852CA6A4A19E510E534E5066598324155A39A52DD
	A8A15411358F5A42ADA1B652AF5187A81334759A39CD8316494BA5ADA295D31A
	681768F769AFE874BA11DD951E4E97D057D2CBE947E897E803F4770C0D861583
	C7886728199B18071867197718AF984CA619D38B19C754303731EB98E7990F99
	6F55582AB62A7C1591CA0A954A9526951B2A2F54A9AAA6AADEAA0B55F355CB54
	8FA95E537DAE46553353E3A909D496AB55AA9D50EB531B5367A93BA887AA67A8
	6F543FA47E59FD890659C34CC34F43A451A0B15FE3BCC6200B6319B3782C216B
	0DAB86758135C426B1CDD97C762ABB98FD1DBB8B3DAAA9A13943334A3357B352
	F394663F07E39871F89C744E09E728A797F37E8ADE14EF29E2291BA6344CB931
	655C6BAA96979658AB48AB51AB47EBBD36AEEDA79DA6BD45BB59FB810E41C74A
	275C2747678FCE059DE753D953DDA70AA7164D3D3AF5AE2EAA6BA51BA1BB4477
	BF6EA7EE989EBE5E809E4C6FA7DE79BDE7FA1C7D2FFD54FD6DFAA7F5470C5806
	B30C2406DB0CCE183CC535716F3C1D2FC7DBF151435DC34043A561956197E184
	91B9D13CA3D5468D460F8C69C65CE324E36DC66DC6A326062621264B4DEA4DEE
	9A524DB9A629A63B4C3B4CC7CDCCCDA2CDD699359B3D31D732E79BE79BD79BDF
	B7605A785A2CB6A8B6B86549B2E45AA659EEB6BC6E855A3959A558555A5DB346
	AD9DAD25D6BBADBBA711A7B94E934EAB9ED667C3B0F1B6C9B6A9B719B0E5D806
	DBAEB66DB67D6167621767B7C5AEC3EE93BD937DBA7D8DFD3D070D87D90EAB1D
	5A1D7E73B472143A563ADE9ACE9CEE3F7DC5F496E92F6758CF10CFD833E3B613
	CB29C4699D539BD347671767B97383F3888B894B82CB2E973E2E9B1BC6DDC8BD
	E44A74F5715DE17AD2F59D9BB39BC2EDA8DBAFEE36EE69EE87DC9FCC349F299E
	593373D0C3C843E051E5D13F0B9F95306BDFAC7E4F434F8167B5E7232F632F91
	57ADD7B0B7A577AAF761EF173EF63E729FE33EE33C37DE32DE595FCC37C0B7C8
	B7CB4FC36F9E5F85DF437F23FF64FF7AFFD100A78025016703898141815B02FB
	F87A7C21BF8E3F3ADB65F6B2D9ED418CA0B94115418F82AD82E5C1AD2168C8EC
	90AD21F7E798CE91CE690E85507EE8D6D00761E6618BC37E0C2785878557863F
	8E7088581AD131973577D1DC4373DF44FA449644DE9B67314F39AF2D4A352A3E
	AA2E6A3CDA37BA34BA3FC62E6659CCD5589D58496C4B1C392E2AAE366E6CBEDF
	FCEDF387E29DE20BE37B17982FC85D7079A1CEC2F485A716A92E122C3A96404C
	884E3894F041102AA8168C25F21377258E0A79C21DC267222FD136D188D8435C
	2A1E4EF2482A4D7A92EC91BC357924C533A52CE5B98427A990BC4C0D4CDD9B3A
	9E169A76206D323D3ABD31839291907142AA214D93B667EA67E66676CBAC6585
	B2FEC56E8BB72F1E9507C96BB390AC05592D0AB642A6E8545A28D72A07B26765
	5766BFCD89CA3996AB9E2BCDEDCCB3CADB90379CEF9FFFED12C212E192B6A586
	4B572D1D58E6BDAC6A39B23C7179DB0AE315052B865606AC3CB88AB62A6DD54F
	ABED5797AE7EBD267A4D6B815EC1CA82C1B5016BEB0B550AE5857DEBDCD7ED5D
	4F582F59DFB561FA869D1B3E15898AAE14DB1797157FD828DC78E51B876FCABF
	99DC94B4A9ABC4B964CF66D266E9E6DE2D9E5B0E96AA97E6970E6E0DD9DAB40D
	DF56B4EDF5F645DB2F97CD28DBBB83B643B9A3BF3CB8BC65A7C9CECD3B3F54A4
	54F454FA5436EED2DDB561D7F86ED1EE1B7BBCF634ECD5DB5BBCF7FD3EC9BEDB
	5501554DD566D565FB49FBB3F73FAE89AAE9F896FB6D5DAD4E6D71EDC703D203
	FD07230EB6D7B9D4D51DD23D54528FD62BEB470EC71FBEFE9DEF772D0D360D55
	8D9CC6E223704479E4E9F709DFF71E0D3ADA768C7BACE107D31F761D671D2F6A
	429AF29A469B539AFB5B625BBA4FCC3ED1D6EADE7AFC47DB1F0F9C343C59794A
	F354C969DAE982D39367F2CF8C9D959D7D7E2EF9DC60DBA2B67BE763CEDF6A0F
	6FEFBA1074E1D245FF8BE73BBC3BCE5CF2B874F2B2DBE51357B8579AAF3A5F6D
	EA74EA3CFE93D34FC7BB9CBB9AAEB95C6BB9EE7ABDB57B66F7E91B9E37CEDDF4
	BD79F116FFD6D59E393DDDBDF37A6FF7C5F7F5DF16DD7E7227FDCECBBBD97727
	EEADBC4FBC5FF440ED41D943DD87D53F5BFEDCD8EFDC7F6AC077A0F3D1DC47F7
	068583CFFE91F58F0F43058F998FCB860D86EB9E383E3939E23F72FDE9FCA743
	CF64CF269E17FEA2FECBAE17162F7EF8D5EBD7CED198D1A197F29793BF6D7CA5
	FDEAC0EB19AFDBC6C2C61EBEC97833315EF456FBEDC177DC771DEFA3DF0F4FE4
	7C207F28FF68F9B1F553D0A7FB93199393FF040398F3FC63332DDB0000002063
	48524D00007A25000080830000F9FF000080E9000075300000EA6000003A9800
	00176F925FC546000001B54944415478DAECDD4172832018805138A7F7F39A74
	13675C641A82447FE0B169679A05F1E553C14E9B4B2969D691732EA594DCEB75
	3F9FEF81116542BD31524AE9BFF755F39ADB31664468194FA2284319AE19CB95
	F1E960477BCF539731DC874619CA3094A10CE34A19C7F757BE467BA3C394713E
	783D26370A46B832524AA5F7C44FABDA08D78BB1CAE83DB1513096B89B52060C
	652803863294E1D676AD325658F48DB018FC7A3B64B6FDA061370AF77D0F8FB1
	6D5BAA3945463C7DC1800163688C9C73D5DD190C65C0800103060C183060C080
	0103C67C18B5AB6218CA800103060C188B62D84257060C183060C07808E38E15
	3B0C65C0800103060C183060C0800163018CDA0123104624AC29317A6DB9BCB6
	6F60DC81F169AF0C863294014319F360BCFB642B4319F3625C7922D85AC6B122
	B7E80B50C6D547C23D1E29BB9B3A950143193094A10C18CA58B00CB7B6CA5006
	8C4A8CD6E134F59B3272C3C12CCA7810E3CD5F2C85A10C18CA50060C658C56C6
	D37357865FEF8C57060C65C0508632FA6218305A166FCA306028C380A18CD950
	A2214C8D71FA0F9AB9E5E7303A43D40EA72965B86644BF66FC010000FFFF0300
	E1C23882D5682E970000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="2" length_in_bytes="3235" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D49484452000000630000
	0062080600000044676D30000000097048597300000EC300000EC301C76FA864
	00000A4F6943435050686F746F73686F70204943432070726F66696C65000078
	DA9D53675453E9163DF7DEF4424B8880944B6F5215082052428B801491262A21
	09104A8821A1D91551C1114545041BC8A088038E8E808C15512C0C8A0AD807E4
	21A28E83A3888ACAFBE17BA36BD6BCF7E6CDFEB5D73EE7ACF39DB3CF07C0080C
	9648335135800CA9421E11E083C7C4C6E1E42E40810A2470001008B3642173FD
	230100F87E3C3C2B22C007BE000178D30B0800C04D9BC0301C87FF0FEA42995C
	01808401C07491384B08801400407A8E42A600404601809D98265300A0040060
	CB6362E300502D0060277FE6D300809DF8997B01005B94211501A09100201365
	884400683B00ACCF568A450058300014664BC43900D82D00304957664800B0B7
	00C0CE100BB200080C00305188852900047B0060C8232378008499001446F257
	3CF12BAE10E72A00007899B23CB9243945815B082D710757572E1E28CE49172B
	14366102619A402EC27999193281340FE0F3CC0000A0911511E083F3FD78CE0E
	AECECE368EB60E5F2DEABF06FF226262E3FEE5CFAB70400000E1747ED1FE2C2F
	B31A803B06806DFEA225EE04685E0BA075F78B66B20F40B500A0E9DA57F370F8
	7E3C3C45A190B9D9D9E5E4E4D84AC4425B61CA577DFE67C25FC057FD6CF97E3C
	FCF7F5E0BEE22481325D814704F8E0C2CCF44CA51CCF92098462DCE68F47FCB7
	0BFFFC1DD322C44962B9582A14E35112718E449A8CF332A52289429229C525D2
	FF64E2DF2CFB033EDF3500B06A3E017B912DA85D6303F64B27105874C0E2F700
	00F2BB6FC1D4280803806883E1CF77FFEF3FFD47A02500806649927100005E44
	242E54CAB33FC708000044A0812AB0411BF4C1182CC0061CC105DCC10BFC6036
	844224C4C24210420A64801C726029AC82422886CDB01D2A602FD4401D34C051
	688693700E2EC255B80E3D700FFA61089EC128BC81090441C808136121DA8801
	628A58238E08179985F821C14804128B2420C9881451224B91354831528A5420
	55481DF23D720239875C46BA913BC8003282FC86BC47319481B2513DD40CB543
	B9A8371A8446A20BD06474319A8F16A09BD072B41A3D8C36A1E7D0AB680FDA8F
	3E43C730C0E8180733C46C302EC6C342B1382C099363CBB122AC0CABC61AB056
	AC03BB89F563CFB17704128145C0093604774220611E4148584C584ED848A820
	1C243411DA093709038451C2272293A84BB426BA11F9C4186232318758482C23
	D6128F132F107B8843C437241289433227B9900249B1A454D212D246D26E5223
	E92CA99B34481A2393C9DA646BB20739942C202BC885E49DE4C3E433E41BE421
	F25B0A9D624071A4F853E22852CA6A4A19E510E534E5066598324155A39A52DD
	A8A15411358F5A42ADA1B652AF5187A81334759A39CD8316494BA5ADA295D31A
	681768F769AFE874BA11DD951E4E97D057D2CBE947E897E803F4770C0D861583
	C7886728199B18071867197718AF984CA619D38B19C754303731EB98E7990F99
	6F55582AB62A7C1591CA0A954A9526951B2A2F54A9AAA6AADEAA0B55F355CB54
	8FA95E537DAE46553353E3A909D496AB55AA9D50EB531B5367A93BA887AA67A8
	6F543FA47E59FD890659C34CC34F43A451A0B15FE3BCC6200B6319B3782C216B
	0DAB86758135C426B1CDD97C762ABB98FD1DBB8B3DAAA9A13943334A3357B352
	F394663F07E39871F89C744E09E728A797F37E8ADE14EF29E2291BA6344CB931
	655C6BAA96979658AB48AB51AB47EBBD36AEEDA79DA6BD45BB59FB810E41C74A
	275C2747678FCE059DE753D953DDA70AA7164D3D3AF5AE2EAA6BA51BA1BB4477
	BF6EA7EE989EBE5E809E4C6FA7DE79BDE7FA1C7D2FFD54FD6DFAA7F5470C5806
	B30C2406DB0CCE183CC535716F3C1D2FC7DBF151435DC34043A561956197E184
	91B9D13CA3D5468D460F8C69C65CE324E36DC66DC6A326062621264B4DEA4DEE
	9A524DB9A629A63B4C3B4CC7CDCCCDA2CDD699359B3D31D732E79BE79BD79BDF
	B7605A785A2CB6A8B6B86549B2E45AA659EEB6BC6E855A3959A558555A5DB346
	AD9DAD25D6BBADBBA711A7B94E934EAB9ED667C3B0F1B6C9B6A9B719B0E5D806
	DBAEB66DB67D6167621767B7C5AEC3EE93BD937DBA7D8DFD3D070D87D90EAB1D
	5A1D7E73B472143A563ADE9ACE9CEE3F7DC5F496E92F6758CF10CFD833E3B613
	CB29C4699D539BD347671767B97383F3888B894B82CB2E973E2E9B1BC6DDC8BD
	E44A74F5715DE17AD2F59D9BB39BC2EDA8DBAFEE36EE69EE87DC9FCC349F299E
	593373D0C3C843E051E5D13F0B9F95306BDFAC7E4F434F8167B5E7232F632F91
	57ADD7B0B7A577AAF761EF173EF63E729FE33EE33C37DE32DE595FCC37C0B7C8
	B7CB4FC36F9E5F85DF437F23FF64FF7AFFD100A78025016703898141815B02FB
	F87A7C21BF8E3F3ADB65F6B2D9ED418CA0B94115418F82AD82E5C1AD2168C8EC
	90AD21F7E798CE91CE690E85507EE8D6D00761E6618BC37E0C2785878557863F
	8E7088581AD131973577D1DC4373DF44FA449644DE9B67314F39AF2D4A352A3E
	AA2E6A3CDA37BA34BA3FC62E6659CCD5589D58496C4B1C392E2AAE366E6CBEDF
	FCEDF387E29DE20BE37B17982FC85D7079A1CEC2F485A716A92E122C3A96404C
	884E3894F041102AA8168C25F21377258E0A79C21DC267222FD136D188D8435C
	2A1E4EF2482A4D7A92EC91BC357924C533A52CE5B98427A990BC4C0D4CDD9B3A
	9E169A76206D323D3ABD31839291907142AA214D93B667EA67E66676CBAC6585
	B2FEC56E8BB72F1E9507C96BB390AC05592D0AB642A6E8545A28D72A07B26765
	5766BFCD89CA3996AB9E2BCDEDCCB3CADB90379CEF9FFFED12C212E192B6A586
	4B572D1D58E6BDAC6A39B23C7179DB0AE315052B865606AC3CB88AB62A6DD54F
	ABED5797AE7EBD267A4D6B815EC1CA82C1B5016BEB0B550AE5857DEBDCD7ED5D
	4F582F59DFB561FA869D1B3E15898AAE14DB1797157FD828DC78E51B876FCABF
	99DC94B4A9ABC4B964CF66D266E9E6DE2D9E5B0E96AA97E6970E6E0DD9DAB40D
	DF56B4EDF5F645DB2F97CD28DBBB83B643B9A3BF3CB8BC65A7C9CECD3B3F54A4
	54F454FA5436EED2DDB561D7F86ED1EE1B7BBCF634ECD5DB5BBCF7FD3EC9BEDB
	5501554DD566D565FB49FBB3F73FAE89AAE9F896FB6D5DAD4E6D71EDC703D203
	FD07230EB6D7B9D4D51DD23D54528FD62BEB470EC71FBEFE9DEF772D0D360D55
	8D9CC6E223704479E4E9F709DFF71E0D3ADA768C7BACE107D31F761D671D2F6A
	429AF29A469B539AFB5B625BBA4FCC3ED1D6EADE7AFC47DB1F0F9C343C59794A
	F354C969DAE982D39367F2CF8C9D959D7D7E2EF9DC60DBA2B67BE763CEDF6A0F
	6FEFBA1074E1D245FF8BE73BBC3BCE5CF2B874F2B2DBE51357B8579AAF3A5F6D
	EA74EA3CFE93D34FC7BB9CBB9AAEB95C6BB9EE7ABDB57B66F7E91B9E37CEDDF4
	BD79F116FFD6D59E393DDDBDF37A6FF7C5F7F5DF16DD7E7227FDCECBBBD97727
	EEADBC4FBC5FF440ED41D943DD87D53F5BFEDCD8EFDC7F6AC077A0F3D1DC47F7
	068583CFFE91F58F0F43058F998FCB860D86EB9E383E3939E23F72FDE9FCA743
	CF64CF269E17FEA2FECBAE17162F7EF8D5EBD7CED198D1A197F29793BF6D7CA5
	FDEAC0EB19AFDBC6C2C61EBEC97833315EF456FBEDC177DC771DEFA3DF0F4FE4
	7C207F28FF68F9B1F553D0A7FB93199393FF040398F3FC63332DDB0000002063
	48524D00007A25000080830000F9FF000080E9000075300000EA6000003A9800
	00176F925FC546000001C44944415478DAECDD416E8330104051CF39B95FAEE9
	6E9A8A45245C30F1D83C6F5AA98B3A797CC0266AA3D65AEE1A11516BAD51068D
	D6DF3F7A9E7FF3B80B23226A29A58CC6389A438679DE8AF17E81338EA1078F32
	162FC33523D9692AC38B3B9A4FBA79DE5986A10C6518CA50867133C6FE28797F
	7FE5EB0C8BB99465ECDFBC1E939B05235D19A594DA7BE2BB556D86EBC55C65F4
	9ED82C18535C339E82A10C65C0508632604C5BC6936F6D5396F18445DF0C8BC1
	7F6F87ACB61F34ED46E1EBF54A8FB16D5B693945663C7DC18001636A8C8868BA
	3B83A10C183060C0800103060C183060C0580FA375550C43193060C08001E3A1
	18B6D0950103060C183006617C63C50E43193060C0800103060C183060C07800
	46EB8091082313D69218BDB65C7EB76F607C03E368AF0C863294014319EB607C
	3AB295A18C7531AE3C113C5BC67B456ED197A08CAB8F847B3C527637B52B0386
	32602843193094F1C032DCDA2A4319301A31CE0EA7A97BCA88136F6655C6408C
	0F7FB1148632602843193094315B19A3E7AE0C1FEFCC57060C65C0508632FA62
	1830CE2CDE9461C05086014319ABA16443581A63F71F34E3CCCF617486681D4E
	53CA70CDC87ECDF8010000FFFF0300743340821285B2DD0000000049454E44AE
	426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="3" length_in_bytes="3181" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D49484452000000630000
	0062080600000044676D30000000097048597300000EC300000EC301C76FA864
	00000A4F6943435050686F746F73686F70204943432070726F66696C65000078
	DA9D53675453E9163DF7DEF4424B8880944B6F5215082052428B801491262A21
	09104A8821A1D91551C1114545041BC8A088038E8E808C15512C0C8A0AD807E4
	21A28E83A3888ACAFBE17BA36BD6BCF7E6CDFEB5D73EE7ACF39DB3CF07C0080C
	9648335135800CA9421E11E083C7C4C6E1E42E40810A2470001008B3642173FD
	230100F87E3C3C2B22C007BE000178D30B0800C04D9BC0301C87FF0FEA42995C
	01808401C07491384B08801400407A8E42A600404601809D98265300A0040060
	CB6362E300502D0060277FE6D300809DF8997B01005B94211501A09100201365
	884400683B00ACCF568A450058300014664BC43900D82D00304957664800B0B7
	00C0CE100BB200080C00305188852900047B0060C8232378008499001446F257
	3CF12BAE10E72A00007899B23CB9243945815B082D710757572E1E28CE49172B
	14366102619A402EC27999193281340FE0F3CC0000A0911511E083F3FD78CE0E
	AECECE368EB60E5F2DEABF06FF226262E3FEE5CFAB70400000E1747ED1FE2C2F
	B31A803B06806DFEA225EE04685E0BA075F78B66B20F40B500A0E9DA57F370F8
	7E3C3C45A190B9D9D9E5E4E4D84AC4425B61CA577DFE67C25FC057FD6CF97E3C
	FCF7F5E0BEE22481325D814704F8E0C2CCF44CA51CCF92098462DCE68F47FCB7
	0BFFFC1DD322C44962B9582A14E35112718E449A8CF332A52289429229C525D2
	FF64E2DF2CFB033EDF3500B06A3E017B912DA85D6303F64B27105874C0E2F700
	00F2BB6FC1D4280803806883E1CF77FFEF3FFD47A02500806649927100005E44
	242E54CAB33FC708000044A0812AB0411BF4C1182CC0061CC105DCC10BFC6036
	844224C4C24210420A64801C726029AC82422886CDB01D2A602FD4401D34C051
	688693700E2EC255B80E3D700FFA61089EC128BC81090441C808136121DA8801
	628A58238E08179985F821C14804128B2420C9881451224B91354831528A5420
	55481DF23D720239875C46BA913BC8003282FC86BC47319481B2513DD40CB543
	B9A8371A8446A20BD06474319A8F16A09BD072B41A3D8C36A1E7D0AB680FDA8F
	3E43C730C0E8180733C46C302EC6C342B1382C099363CBB122AC0CABC61AB056
	AC03BB89F563CFB17704128145C0093604774220611E4148584C584ED848A820
	1C243411DA093709038451C2272293A84BB426BA11F9C4186232318758482C23
	D6128F132F107B8843C437241289433227B9900249B1A454D212D246D26E5223
	E92CA99B34481A2393C9DA646BB20739942C202BC885E49DE4C3E433E41BE421
	F25B0A9D624071A4F853E22852CA6A4A19E510E534E5066598324155A39A52DD
	A8A15411358F5A42ADA1B652AF5187A81334759A39CD8316494BA5ADA295D31A
	681768F769AFE874BA11DD951E4E97D057D2CBE947E897E803F4770C0D861583
	C7886728199B18071867197718AF984CA619D38B19C754303731EB98E7990F99
	6F55582AB62A7C1591CA0A954A9526951B2A2F54A9AAA6AADEAA0B55F355CB54
	8FA95E537DAE46553353E3A909D496AB55AA9D50EB531B5367A93BA887AA67A8
	6F543FA47E59FD890659C34CC34F43A451A0B15FE3BCC6200B6319B3782C216B
	0DAB86758135C426B1CDD97C762ABB98FD1DBB8B3DAAA9A13943334A3357B352
	F394663F07E39871F89C744E09E728A797F37E8ADE14EF29E2291BA6344CB931
	655C6BAA96979658AB48AB51AB47EBBD36AEEDA79DA6BD45BB59FB810E41C74A
	275C2747678FCE059DE753D953DDA70AA7164D3D3AF5AE2EAA6BA51BA1BB4477
	BF6EA7EE989EBE5E809E4C6FA7DE79BDE7FA1C7D2FFD54FD6DFAA7F5470C5806
	B30C2406DB0CCE183CC535716F3C1D2FC7DBF151435DC34043A561956197E184
	91B9D13CA3D5468D460F8C69C65CE324E36DC66DC6A326062621264B4DEA4DEE
	9A524DB9A629A63B4C3B4CC7CDCCCDA2CDD699359B3D31D732E79BE79BD79BDF
	B7605A785A2CB6A8B6B86549B2E45AA659EEB6BC6E855A3959A558555A5DB346
	AD9DAD25D6BBADBBA711A7B94E934EAB9ED667C3B0F1B6C9B6A9B719B0E5D806
	DBAEB66DB67D6167621767B7C5AEC3EE93BD937DBA7D8DFD3D070D87D90EAB1D
	5A1D7E73B472143A563ADE9ACE9CEE3F7DC5F496E92F6758CF10CFD833E3B613
	CB29C4699D539BD347671767B97383F3888B894B82CB2E973E2E9B1BC6DDC8BD
	E44A74F5715DE17AD2F59D9BB39BC2EDA8DBAFEE36EE69EE87DC9FCC349F299E
	593373D0C3C843E051E5D13F0B9F95306BDFAC7E4F434F8167B5E7232F632F91
	57ADD7B0B7A577AAF761EF173EF63E729FE33EE33C37DE32DE595FCC37C0B7C8
	B7CB4FC36F9E5F85DF437F23FF64FF7AFFD100A78025016703898141815B02FB
	F87A7C21BF8E3F3ADB65F6B2D9ED418CA0B94115418F82AD82E5C1AD2168C8EC
	90AD21F7E798CE91CE690E85507EE8D6D00761E6618BC37E0C2785878557863F
	8E7088581AD131973577D1DC4373DF44FA449644DE9B67314F39AF2D4A352A3E
	AA2E6A3CDA37BA34BA3FC62E6659CCD5589D58496C4B1C392E2AAE366E6CBEDF
	FCEDF387E29DE20BE37B17982FC85D7079A1CEC2F485A716A92E122C3A96404C
	884E3894F041102AA8168C25F21377258E0A79C21DC267222FD136D188D8435C
	2A1E4EF2482A4D7A92EC91BC357924C533A52CE5B98427A990BC4C0D4CDD9B3A
	9E169A76206D323D3ABD31839291907142AA214D93B667EA67E66676CBAC6585
	B2FEC56E8BB72F1E9507C96BB390AC05592D0AB642A6E8545A28D72A07B26765
	5766BFCD89CA3996AB9E2BCDEDCCB3CADB90379CEF9FFFED12C212E192B6A586
	4B572D1D58E6BDAC6A39B23C7179DB0AE315052B865606AC3CB88AB62A6DD54F
	ABED5797AE7EBD267A4D6B815EC1CA82C1B5016BEB0B550AE5857DEBDCD7ED5D
	4F582F59DFB561FA869D1B3E15898AAE14DB1797157FD828DC78E51B876FCABF
	99DC94B4A9ABC4B964CF66D266E9E6DE2D9E5B0E96AA97E6970E6E0DD9DAB40D
	DF56B4EDF5F645DB2F97CD28DBBB83B643B9A3BF3CB8BC65A7C9CECD3B3F54A4
	54F454FA5436EED2DDB561D7F86ED1EE1B7BBCF634ECD5DB5BBCF7FD3EC9BEDB
	5501554DD566D565FB49FBB3F73FAE89AAE9F896FB6D5DAD4E6D71EDC703D203
	FD07230EB6D7B9D4D51DD23D54528FD62BEB470EC71FBEFE9DEF772D0D360D55
	8D9CC6E223704479E4E9F709DFF71E0D3ADA768C7BACE107D31F761D671D2F6A
	429AF29A469B539AFB5B625BBA4FCC3ED1D6EADE7AFC47DB1F0F9C343C59794A
	F354C969DAE982D39367F2CF8C9D959D7D7E2EF9DC60DBA2B67BE763CEDF6A0F
	6FEFBA1074E1D245FF8BE73BBC3BCE5CF2B874F2B2DBE51357B8579AAF3A5F6D
	EA74EA3CFE93D34FC7BB9CBB9AAEB95C6BB9EE7ABDB57B66F7E91B9E37CEDDF4
	BD79F116FFD6D59E393DDDBDF37A6FF7C5F7F5DF16DD7E7227FDCECBBBD97727
	EEADBC4FBC5FF440ED41D943DD87D53F5BFEDCD8EFDC7F6AC077A0F3D1DC47F7
	068583CFFE91F58F0F43058F998FCB860D86EB9E383E3939E23F72FDE9FCA743
	CF64CF269E17FEA2FECBAE17162F7EF8D5EBD7CED198D1A197F29793BF6D7CA5
	FDEAC0EB19AFDBC6C2C61EBEC97833315EF456FBEDC177DC771DEFA3DF0F4FE4
	7C207F28FF68F9B1F553D0A7FB93199393FF040398F3FC63332DDB0000002063
	48524D00007A25000080830000F9FF000080E9000075300000EA6000003A9800
	00176F925FC5460000018E4944415478DAECDD416E8330104051CF39B91FD79C
	6C82C422521C8784C1BCD9B4523734AFDF60889AC8CCD65A6B11919919CD9C36
	B161984218CA50865186328C32946194A10CA30C65186528C3542863FBFE8A5F
	3F7D012AAD0691996DFF4B5C7DA9FA14A414466B2D2B1FE028C6BBE537226A96
	31D3091C060C18D3613867B89A8271C43EE32A2897C6E899755DCB632CCB0203
	060C18279D985BCFB1C250060C183060C0800103060C183060CC87D1BB2B86A1
	0C183060C08071530CB7D0950103060C18304EC2F8C78E1D863260C080010306
	0C183060C08071038CDE815108A312D6941847DD7279DEBE81F10F8C77F7CA60
	2843193094310FC6ABBF6C6528635E8C6F9E088E96B1EDC86DFA0A94F1ED23E1
	231E29BB9ADA950143193094A10C18CAB861192E6D95A10C189D18A36399FA4D
	1931F062A6324EC478F11F4B612803863294014319572BE3EC635786B777D62B
	03863260284319C7621818239B37651818CA303094311B4AD54FEB9C1263F7C1
	8931F273180743F48E654A19CE19D5CF190F000000FFFF0300285B1182241FE9
	460000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="4" length_in_bytes="3069" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D49484452000000630000
	0062080600000044676D30000000097048597300000EC300000EC301C76FA864
	00000A4F6943435050686F746F73686F70204943432070726F66696C65000078
	DA9D53675453E9163DF7DEF4424B8880944B6F5215082052428B801491262A21
	09104A8821A1D91551C1114545041BC8A088038E8E808C15512C0C8A0AD807E4
	21A28E83A3888ACAFBE17BA36BD6BCF7E6CDFEB5D73EE7ACF39DB3CF07C0080C
	9648335135800CA9421E11E083C7C4C6E1E42E40810A2470001008B3642173FD
	230100F87E3C3C2B22C007BE000178D30B0800C04D9BC0301C87FF0FEA42995C
	01808401C07491384B08801400407A8E42A600404601809D98265300A0040060
	CB6362E300502D0060277FE6D300809DF8997B01005B94211501A09100201365
	884400683B00ACCF568A450058300014664BC43900D82D00304957664800B0B7
	00C0CE100BB200080C00305188852900047B0060C8232378008499001446F257
	3CF12BAE10E72A00007899B23CB9243945815B082D710757572E1E28CE49172B
	14366102619A402EC27999193281340FE0F3CC0000A0911511E083F3FD78CE0E
	AECECE368EB60E5F2DEABF06FF226262E3FEE5CFAB70400000E1747ED1FE2C2F
	B31A803B06806DFEA225EE04685E0BA075F78B66B20F40B500A0E9DA57F370F8
	7E3C3C45A190B9D9D9E5E4E4D84AC4425B61CA577DFE67C25FC057FD6CF97E3C
	FCF7F5E0BEE22481325D814704F8E0C2CCF44CA51CCF92098462DCE68F47FCB7
	0BFFFC1DD322C44962B9582A14E35112718E449A8CF332A52289429229C525D2
	FF64E2DF2CFB033EDF3500B06A3E017B912DA85D6303F64B27105874C0E2F700
	00F2BB6FC1D4280803806883E1CF77FFEF3FFD47A02500806649927100005E44
	242E54CAB33FC708000044A0812AB0411BF4C1182CC0061CC105DCC10BFC6036
	844224C4C24210420A64801C726029AC82422886CDB01D2A602FD4401D34C051
	688693700E2EC255B80E3D700FFA61089EC128BC81090441C808136121DA8801
	628A58238E08179985F821C14804128B2420C9881451224B91354831528A5420
	55481DF23D720239875C46BA913BC8003282FC86BC47319481B2513DD40CB543
	B9A8371A8446A20BD06474319A8F16A09BD072B41A3D8C36A1E7D0AB680FDA8F
	3E43C730C0E8180733C46C302EC6C342B1382C099363CBB122AC0CABC61AB056
	AC03BB89F563CFB17704128145C0093604774220611E4148584C584ED848A820
	1C243411DA093709038451C2272293A84BB426BA11F9C4186232318758482C23
	D6128F132F107B8843C437241289433227B9900249B1A454D212D246D26E5223
	E92CA99B34481A2393C9DA646BB20739942C202BC885E49DE4C3E433E41BE421
	F25B0A9D624071A4F853E22852CA6A4A19E510E534E5066598324155A39A52DD
	A8A15411358F5A42ADA1B652AF5187A81334759A39CD8316494BA5ADA295D31A
	681768F769AFE874BA11DD951E4E97D057D2CBE947E897E803F4770C0D861583
	C7886728199B18071867197718AF984CA619D38B19C754303731EB98E7990F99
	6F55582AB62A7C1591CA0A954A9526951B2A2F54A9AAA6AADEAA0B55F355CB54
	8FA95E537DAE46553353E3A909D496AB55AA9D50EB531B5367A93BA887AA67A8
	6F543FA47E59FD890659C34CC34F43A451A0B15FE3BCC6200B6319B3782C216B
	0DAB86758135C426B1CDD97C762ABB98FD1DBB8B3DAAA9A13943334A3357B352
	F394663F07E39871F89C744E09E728A797F37E8ADE14EF29E2291BA6344CB931
	655C6BAA96979658AB48AB51AB47EBBD36AEEDA79DA6BD45BB59FB810E41C74A
	275C2747678FCE059DE753D953DDA70AA7164D3D3AF5AE2EAA6BA51BA1BB4477
	BF6EA7EE989EBE5E809E4C6FA7DE79BDE7FA1C7D2FFD54FD6DFAA7F5470C5806
	B30C2406DB0CCE183CC535716F3C1D2FC7DBF151435DC34043A561956197E184
	91B9D13CA3D5468D460F8C69C65CE324E36DC66DC6A326062621264B4DEA4DEE
	9A524DB9A629A63B4C3B4CC7CDCCCDA2CDD699359B3D31D732E79BE79BD79BDF
	B7605A785A2CB6A8B6B86549B2E45AA659EEB6BC6E855A3959A558555A5DB346
	AD9DAD25D6BBADBBA711A7B94E934EAB9ED667C3B0F1B6C9B6A9B719B0E5D806
	DBAEB66DB67D6167621767B7C5AEC3EE93BD937DBA7D8DFD3D070D87D90EAB1D
	5A1D7E73B472143A563ADE9ACE9CEE3F7DC5F496E92F6758CF10CFD833E3B613
	CB29C4699D539BD347671767B97383F3888B894B82CB2E973E2E9B1BC6DDC8BD
	E44A74F5715DE17AD2F59D9BB39BC2EDA8DBAFEE36EE69EE87DC9FCC349F299E
	593373D0C3C843E051E5D13F0B9F95306BDFAC7E4F434F8167B5E7232F632F91
	57ADD7B0B7A577AAF761EF173EF63E729FE33EE33C37DE32DE595FCC37C0B7C8
	B7CB4FC36F9E5F85DF437F23FF64FF7AFFD100A78025016703898141815B02FB
	F87A7C21BF8E3F3ADB65F6B2D9ED418CA0B94115418F82AD82E5C1AD2168C8EC
	90AD21F7E798CE91CE690E85507EE8D6D00761E6618BC37E0C2785878557863F
	8E7088581AD131973577D1DC4373DF44FA449644DE9B67314F39AF2D4A352A3E
	AA2E6A3CDA37BA34BA3FC62E6659CCD5589D58496C4B1C392E2AAE366E6CBEDF
	FCEDF387E29DE20BE37B17982FC85D7079A1CEC2F485A716A92E122C3A96404C
	884E3894F041102AA8168C25F21377258E0A79C21DC267222FD136D188D8435C
	2A1E4EF2482A4D7A92EC91BC357924C533A52CE5B98427A990BC4C0D4CDD9B3A
	9E169A76206D323D3ABD31839291907142AA214D93B667EA67E66676CBAC6585
	B2FEC56E8BB72F1E9507C96BB390AC05592D0AB642A6E8545A28D72A07B26765
	5766BFCD89CA3996AB9E2BCDEDCCB3CADB90379CEF9FFFED12C212E192B6A586
	4B572D1D58E6BDAC6A39B23C7179DB0AE315052B865606AC3CB88AB62A6DD54F
	ABED5797AE7EBD267A4D6B815EC1CA82C1B5016BEB0B550AE5857DEBDCD7ED5D
	4F582F59DFB561FA869D1B3E15898AAE14DB1797157FD828DC78E51B876FCABF
	99DC94B4A9ABC4B964CF66D266E9E6DE2D9E5B0E96AA97E6970E6E0DD9DAB40D
	DF56B4EDF5F645DB2F97CD28DBBB83B643B9A3BF3CB8BC65A7C9CECD3B3F54A4
	54F454FA5436EED2DDB561D7F86ED1EE1B7BBCF634ECD5DB5BBCF7FD3EC9BEDB
	5501554DD566D565FB49FBB3F73FAE89AAE9F896FB6D5DAD4E6D71EDC703D203
	FD07230EB6D7B9D4D51DD23D54528FD62BEB470EC71FBEFE9DEF772D0D360D55
	8D9CC6E223704479E4E9F709DFF71E0D3ADA768C7BACE107D31F761D671D2F6A
	429AF29A469B539AFB5B625BBA4FCC3ED1D6EADE7AFC47DB1F0F9C343C59794A
	F354C969DAE982D39367F2CF8C9D959D7D7E2EF9DC60DBA2B67BE763CEDF6A0F
	6FEFBA1074E1D245FF8BE73BBC3BCE5CF2B874F2B2DBE51357B8579AAF3A5F6D
	EA74EA3CFE93D34FC7BB9CBB9AAEB95C6BB9EE7ABDB57B66F7E91B9E37CEDDF4
	BD79F116FFD6D59E393DDDBDF37A6FF7C5F7F5DF16DD7E7227FDCECBBBD97727
	EEADBC4FBC5FF440ED41D943DD87D53F5BFEDCD8EFDC7F6AC077A0F3D1DC47F7
	068583CFFE91F58F0F43058F998FCB860D86EB9E383E3939E23F72FDE9FCA743
	CF64CF269E17FEA2FECBAE17162F7EF8D5EBD7CED198D1A197F29793BF6D7CA5
	FDEAC0EB19AFDBC6C2C61EBEC97833315EF456FBEDC177DC771DEFA3DF0F4FE4
	7C207F28FF68F9B1F553D0A7FB93199393FF040398F3FC63332DDB0000002063
	48524D00007A25000080830000F9FF000080E9000075300000EA6000003A9800
	00176F925FC5460000011E4944415478DAECD9310EC320104541EF39B91FD7DC
	146953208C0193797D24E4C98F623B32F3D21E050C18820143306008060CC180
	2118300443306008060CC180211830B41423225E219799713C46AD757B8C520A
	0C1830602C3968C4D5725618960103060C183060C0800103060C18E761B4DE15
	C3B00C183060C080F1A7181EA15B060C183060C0588431E38E1D8665C0800103
	060C183060C0800103068C5918239B097BEA32C65C9CEFE31B183060C0800103
	C6D0C3FF783F02C332CEC5B8F346B0172362FD7DA2650CF8028CF83C0C183060
	C0800103060C7F6D2D03068C468CDEFC4C3DB38CE8B89869193060C080010306
	0C187730569F1DC646C1800103060C188F6008060CC1802118820143306008C6
	FBFB000000FFFF0300AD966E64C1CAF2BF0000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="5" length_in_bytes="3222" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D49484452000000630000
	0062080600000044676D30000000097048597300000EC300000EC301C76FA864
	00000A4F6943435050686F746F73686F70204943432070726F66696C65000078
	DA9D53675453E9163DF7DEF4424B8880944B6F5215082052428B801491262A21
	09104A8821A1D91551C1114545041BC8A088038E8E808C15512C0C8A0AD807E4
	21A28E83A3888ACAFBE17BA36BD6BCF7E6CDFEB5D73EE7ACF39DB3CF07C0080C
	9648335135800CA9421E11E083C7C4C6E1E42E40810A2470001008B3642173FD
	230100F87E3C3C2B22C007BE000178D30B0800C04D9BC0301C87FF0FEA42995C
	01808401C07491384B08801400407A8E42A600404601809D98265300A0040060
	CB6362E300502D0060277FE6D300809DF8997B01005B94211501A09100201365
	884400683B00ACCF568A450058300014664BC43900D82D00304957664800B0B7
	00C0CE100BB200080C00305188852900047B0060C8232378008499001446F257
	3CF12BAE10E72A00007899B23CB9243945815B082D710757572E1E28CE49172B
	14366102619A402EC27999193281340FE0F3CC0000A0911511E083F3FD78CE0E
	AECECE368EB60E5F2DEABF06FF226262E3FEE5CFAB70400000E1747ED1FE2C2F
	B31A803B06806DFEA225EE04685E0BA075F78B66B20F40B500A0E9DA57F370F8
	7E3C3C45A190B9D9D9E5E4E4D84AC4425B61CA577DFE67C25FC057FD6CF97E3C
	FCF7F5E0BEE22481325D814704F8E0C2CCF44CA51CCF92098462DCE68F47FCB7
	0BFFFC1DD322C44962B9582A14E35112718E449A8CF332A52289429229C525D2
	FF64E2DF2CFB033EDF3500B06A3E017B912DA85D6303F64B27105874C0E2F700
	00F2BB6FC1D4280803806883E1CF77FFEF3FFD47A02500806649927100005E44
	242E54CAB33FC708000044A0812AB0411BF4C1182CC0061CC105DCC10BFC6036
	844224C4C24210420A64801C726029AC82422886CDB01D2A602FD4401D34C051
	688693700E2EC255B80E3D700FFA61089EC128BC81090441C808136121DA8801
	628A58238E08179985F821C14804128B2420C9881451224B91354831528A5420
	55481DF23D720239875C46BA913BC8003282FC86BC47319481B2513DD40CB543
	B9A8371A8446A20BD06474319A8F16A09BD072B41A3D8C36A1E7D0AB680FDA8F
	3E43C730C0E8180733C46C302EC6C342B1382C099363CBB122AC0CABC61AB056
	AC03BB89F563CFB17704128145C0093604774220611E4148584C584ED848A820
	1C243411DA093709038451C2272293A84BB426BA11F9C4186232318758482C23
	D6128F132F107B8843C437241289433227B9900249B1A454D212D246D26E5223
	E92CA99B34481A2393C9DA646BB20739942C202BC885E49DE4C3E433E41BE421
	F25B0A9D624071A4F853E22852CA6A4A19E510E534E5066598324155A39A52DD
	A8A15411358F5A42ADA1B652AF5187A81334759A39CD8316494BA5ADA295D31A
	681768F769AFE874BA11DD951E4E97D057D2CBE947E897E803F4770C0D861583
	C7886728199B18071867197718AF984CA619D38B19C754303731EB98E7990F99
	6F55582AB62A7C1591CA0A954A9526951B2A2F54A9AAA6AADEAA0B55F355CB54
	8FA95E537DAE46553353E3A909D496AB55AA9D50EB531B5367A93BA887AA67A8
	6F543FA47E59FD890659C34CC34F43A451A0B15FE3BCC6200B6319B3782C216B
	0DAB86758135C426B1CDD97C762ABB98FD1DBB8B3DAAA9A13943334A3357B352
	F394663F07E39871F89C744E09E728A797F37E8ADE14EF29E2291BA6344CB931
	655C6BAA96979658AB48AB51AB47EBBD36AEEDA79DA6BD45BB59FB810E41C74A
	275C2747678FCE059DE753D953DDA70AA7164D3D3AF5AE2EAA6BA51BA1BB4477
	BF6EA7EE989EBE5E809E4C6FA7DE79BDE7FA1C7D2FFD54FD6DFAA7F5470C5806
	B30C2406DB0CCE183CC535716F3C1D2FC7DBF151435DC34043A561956197E184
	91B9D13CA3D5468D460F8C69C65CE324E36DC66DC6A326062621264B4DEA4DEE
	9A524DB9A629A63B4C3B4CC7CDCCCDA2CDD699359B3D31D732E79BE79BD79BDF
	B7605A785A2CB6A8B6B86549B2E45AA659EEB6BC6E855A3959A558555A5DB346
	AD9DAD25D6BBADBBA711A7B94E934EAB9ED667C3B0F1B6C9B6A9B719B0E5D806
	DBAEB66DB67D6167621767B7C5AEC3EE93BD937DBA7D8DFD3D070D87D90EAB1D
	5A1D7E73B472143A563ADE9ACE9CEE3F7DC5F496E92F6758CF10CFD833E3B613
	CB29C4699D539BD347671767B97383F3888B894B82CB2E973E2E9B1BC6DDC8BD
	E44A74F5715DE17AD2F59D9BB39BC2EDA8DBAFEE36EE69EE87DC9FCC349F299E
	593373D0C3C843E051E5D13F0B9F95306BDFAC7E4F434F8167B5E7232F632F91
	57ADD7B0B7A577AAF761EF173EF63E729FE33EE33C37DE32DE595FCC37C0B7C8
	B7CB4FC36F9E5F85DF437F23FF64FF7AFFD100A78025016703898141815B02FB
	F87A7C21BF8E3F3ADB65F6B2D9ED418CA0B94115418F82AD82E5C1AD2168C8EC
	90AD21F7E798CE91CE690E85507EE8D6D00761E6618BC37E0C2785878557863F
	8E7088581AD131973577D1DC4373DF44FA449644DE9B67314F39AF2D4A352A3E
	AA2E6A3CDA37BA34BA3FC62E6659CCD5589D58496C4B1C392E2AAE366E6CBEDF
	FCEDF387E29DE20BE37B17982FC85D7079A1CEC2F485A716A92E122C3A96404C
	884E3894F041102AA8168C25F21377258E0A79C21DC267222FD136D188D8435C
	2A1E4EF2482A4D7A92EC91BC357924C533A52CE5B98427A990BC4C0D4CDD9B3A
	9E169A76206D323D3ABD31839291907142AA214D93B667EA67E66676CBAC6585
	B2FEC56E8BB72F1E9507C96BB390AC05592D0AB642A6E8545A28D72A07B26765
	5766BFCD89CA3996AB9E2BCDEDCCB3CADB90379CEF9FFFED12C212E192B6A586
	4B572D1D58E6BDAC6A39B23C7179DB0AE315052B865606AC3CB88AB62A6DD54F
	ABED5797AE7EBD267A4D6B815EC1CA82C1B5016BEB0B550AE5857DEBDCD7ED5D
	4F582F59DFB561FA869D1B3E15898AAE14DB1797157FD828DC78E51B876FCABF
	99DC94B4A9ABC4B964CF66D266E9E6DE2D9E5B0E96AA97E6970E6E0DD9DAB40D
	DF56B4EDF5F645DB2F97CD28DBBB83B643B9A3BF3CB8BC65A7C9CECD3B3F54A4
	54F454FA5436EED2DDB561D7F86ED1EE1B7BBCF634ECD5DB5BBCF7FD3EC9BEDB
	5501554DD566D565FB49FBB3F73FAE89AAE9F896FB6D5DAD4E6D71EDC703D203
	FD07230EB6D7B9D4D51DD23D54528FD62BEB470EC71FBEFE9DEF772D0D360D55
	8D9CC6E223704479E4E9F709DFF71E0D3ADA768C7BACE107D31F761D671D2F6A
	429AF29A469B539AFB5B625BBA4FCC3ED1D6EADE7AFC47DB1F0F9C343C59794A
	F354C969DAE982D39367F2CF8C9D959D7D7E2EF9DC60DBA2B67BE763CEDF6A0F
	6FEFBA1074E1D245FF8BE73BBC3BCE5CF2B874F2B2DBE51357B8579AAF3A5F6D
	EA74EA3CFE93D34FC7BB9CBB9AAEB95C6BB9EE7ABDB57B66F7E91B9E37CEDDF4
	BD79F116FFD6D59E393DDDBDF37A6FF7C5F7F5DF16DD7E7227FDCECBBBD97727
	EEADBC4FBC5FF440ED41D943DD87D53F5BFEDCD8EFDC7F6AC077A0F3D1DC47F7
	068583CFFE91F58F0F43058F998FCB860D86EB9E383E3939E23F72FDE9FCA743
	CF64CF269E17FEA2FECBAE17162F7EF8D5EBD7CED198D1A197F29793BF6D7CA5
	FDEAC0EB19AFDBC6C2C61EBEC97833315EF456FBEDC177DC771DEFA3DF0F4FE4
	7C207F28FF68F9B1F553D0A7FB93199393FF040398F3FC63332DDB0000002063
	48524D00007A25000080830000F9FF000080E9000075300000EA6000003A9800
	00176F925FC546000001B74944415478DAECDD4B6E83301440517B9DEC8F6DBA
	9346A212E567C73FCE9B245232004E2E04529598520A334E8C31A594E2DDD79A
	2EF38C1831C6144208471847AFC3280C71757A025186321C335EB39BBABAA17B
	4399B68C213F48CA5086518632CC3730D675ED5E6E5996F08A3266C350863260
	284319309E6CE0BB577B617CB18CDFE739E73721F73441197F61602803863294
	014319AD309E4E2E86AFB6FB6554FF642B231363BB01614C5686DD9432940143
	19CA80A10C65C028B8623965B41E659C6345180F0B7A5A060C65C05086326028
	4319303E18250746450C7FDE5901E36CBD3E67DC3060C0800103060C183060C0
	181BA3C44F9330940103060C183006C2B87AF087A10C183060C080718251E38C
	1A863260C0800103060C183060C080010346D50575095D193060C0E80663E73F
	59C6BDC730D97487B1DDC825166E24B4AE304208A9F4026EEE10D97E053BDC1D
	DDDA4D952AA3778C6E6FD9F0460C6528038632940163D832DEFCD5B6CB32DE70
	D237EC31E3E872C8D5C71130DC68D7D43D8077B792FFAC9B328C32946194A18C
	81107A4599BA8CCD958098F31E6534BA02D0124519CA70CCD89B1F000000FFFF
	0300CA5E388281F678090000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="6" length_in_bytes="3231" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D49484452000000630000
	0062080600000044676D30000000097048597300000EC300000EC301C76FA864
	00000A4F6943435050686F746F73686F70204943432070726F66696C65000078
	DA9D53675453E9163DF7DEF4424B8880944B6F5215082052428B801491262A21
	09104A8821A1D91551C1114545041BC8A088038E8E808C15512C0C8A0AD807E4
	21A28E83A3888ACAFBE17BA36BD6BCF7E6CDFEB5D73EE7ACF39DB3CF07C0080C
	9648335135800CA9421E11E083C7C4C6E1E42E40810A2470001008B3642173FD
	230100F87E3C3C2B22C007BE000178D30B0800C04D9BC0301C87FF0FEA42995C
	01808401C07491384B08801400407A8E42A600404601809D98265300A0040060
	CB6362E300502D0060277FE6D300809DF8997B01005B94211501A09100201365
	884400683B00ACCF568A450058300014664BC43900D82D00304957664800B0B7
	00C0CE100BB200080C00305188852900047B0060C8232378008499001446F257
	3CF12BAE10E72A00007899B23CB9243945815B082D710757572E1E28CE49172B
	14366102619A402EC27999193281340FE0F3CC0000A0911511E083F3FD78CE0E
	AECECE368EB60E5F2DEABF06FF226262E3FEE5CFAB70400000E1747ED1FE2C2F
	B31A803B06806DFEA225EE04685E0BA075F78B66B20F40B500A0E9DA57F370F8
	7E3C3C45A190B9D9D9E5E4E4D84AC4425B61CA577DFE67C25FC057FD6CF97E3C
	FCF7F5E0BEE22481325D814704F8E0C2CCF44CA51CCF92098462DCE68F47FCB7
	0BFFFC1DD322C44962B9582A14E35112718E449A8CF332A52289429229C525D2
	FF64E2DF2CFB033EDF3500B06A3E017B912DA85D6303F64B27105874C0E2F700
	00F2BB6FC1D4280803806883E1CF77FFEF3FFD47A02500806649927100005E44
	242E54CAB33FC708000044A0812AB0411BF4C1182CC0061CC105DCC10BFC6036
	844224C4C24210420A64801C726029AC82422886CDB01D2A602FD4401D34C051
	688693700E2EC255B80E3D700FFA61089EC128BC81090441C808136121DA8801
	628A58238E08179985F821C14804128B2420C9881451224B91354831528A5420
	55481DF23D720239875C46BA913BC8003282FC86BC47319481B2513DD40CB543
	B9A8371A8446A20BD06474319A8F16A09BD072B41A3D8C36A1E7D0AB680FDA8F
	3E43C730C0E8180733C46C302EC6C342B1382C099363CBB122AC0CABC61AB056
	AC03BB89F563CFB17704128145C0093604774220611E4148584C584ED848A820
	1C243411DA093709038451C2272293A84BB426BA11F9C4186232318758482C23
	D6128F132F107B8843C437241289433227B9900249B1A454D212D246D26E5223
	E92CA99B34481A2393C9DA646BB20739942C202BC885E49DE4C3E433E41BE421
	F25B0A9D624071A4F853E22852CA6A4A19E510E534E5066598324155A39A52DD
	A8A15411358F5A42ADA1B652AF5187A81334759A39CD8316494BA5ADA295D31A
	681768F769AFE874BA11DD951E4E97D057D2CBE947E897E803F4770C0D861583
	C7886728199B18071867197718AF984CA619D38B19C754303731EB98E7990F99
	6F55582AB62A7C1591CA0A954A9526951B2A2F54A9AAA6AADEAA0B55F355CB54
	8FA95E537DAE46553353E3A909D496AB55AA9D50EB531B5367A93BA887AA67A8
	6F543FA47E59FD890659C34CC34F43A451A0B15FE3BCC6200B6319B3782C216B
	0DAB86758135C426B1CDD97C762ABB98FD1DBB8B3DAAA9A13943334A3357B352
	F394663F07E39871F89C744E09E728A797F37E8ADE14EF29E2291BA6344CB931
	655C6BAA96979658AB48AB51AB47EBBD36AEEDA79DA6BD45BB59FB810E41C74A
	275C2747678FCE059DE753D953DDA70AA7164D3D3AF5AE2EAA6BA51BA1BB4477
	BF6EA7EE989EBE5E809E4C6FA7DE79BDE7FA1C7D2FFD54FD6DFAA7F5470C5806
	B30C2406DB0CCE183CC535716F3C1D2FC7DBF151435DC34043A561956197E184
	91B9D13CA3D5468D460F8C69C65CE324E36DC66DC6A326062621264B4DEA4DEE
	9A524DB9A629A63B4C3B4CC7CDCCCDA2CDD699359B3D31D732E79BE79BD79BDF
	B7605A785A2CB6A8B6B86549B2E45AA659EEB6BC6E855A3959A558555A5DB346
	AD9DAD25D6BBADBBA711A7B94E934EAB9ED667C3B0F1B6C9B6A9B719B0E5D806
	DBAEB66DB67D6167621767B7C5AEC3EE93BD937DBA7D8DFD3D070D87D90EAB1D
	5A1D7E73B472143A563ADE9ACE9CEE3F7DC5F496E92F6758CF10CFD833E3B613
	CB29C4699D539BD347671767B97383F3888B894B82CB2E973E2E9B1BC6DDC8BD
	E44A74F5715DE17AD2F59D9BB39BC2EDA8DBAFEE36EE69EE87DC9FCC349F299E
	593373D0C3C843E051E5D13F0B9F95306BDFAC7E4F434F8167B5E7232F632F91
	57ADD7B0B7A577AAF761EF173EF63E729FE33EE33C37DE32DE595FCC37C0B7C8
	B7CB4FC36F9E5F85DF437F23FF64FF7AFFD100A78025016703898141815B02FB
	F87A7C21BF8E3F3ADB65F6B2D9ED418CA0B94115418F82AD82E5C1AD2168C8EC
	90AD21F7E798CE91CE690E85507EE8D6D00761E6618BC37E0C2785878557863F
	8E7088581AD131973577D1DC4373DF44FA449644DE9B67314F39AF2D4A352A3E
	AA2E6A3CDA37BA34BA3FC62E6659CCD5589D58496C4B1C392E2AAE366E6CBEDF
	FCEDF387E29DE20BE37B17982FC85D7079A1CEC2F485A716A92E122C3A96404C
	884E3894F041102AA8168C25F21377258E0A79C21DC267222FD136D188D8435C
	2A1E4EF2482A4D7A92EC91BC357924C533A52CE5B98427A990BC4C0D4CDD9B3A
	9E169A76206D323D3ABD31839291907142AA214D93B667EA67E66676CBAC6585
	B2FEC56E8BB72F1E9507C96BB390AC05592D0AB642A6E8545A28D72A07B26765
	5766BFCD89CA3996AB9E2BCDEDCCB3CADB90379CEF9FFFED12C212E192B6A586
	4B572D1D58E6BDAC6A39B23C7179DB0AE315052B865606AC3CB88AB62A6DD54F
	ABED5797AE7EBD267A4D6B815EC1CA82C1B5016BEB0B550AE5857DEBDCD7ED5D
	4F582F59DFB561FA869D1B3E15898AAE14DB1797157FD828DC78E51B876FCABF
	99DC94B4A9ABC4B964CF66D266E9E6DE2D9E5B0E96AA97E6970E6E0DD9DAB40D
	DF56B4EDF5F645DB2F97CD28DBBB83B643B9A3BF3CB8BC65A7C9CECD3B3F54A4
	54F454FA5436EED2DDB561D7F86ED1EE1B7BBCF634ECD5DB5BBCF7FD3EC9BEDB
	5501554DD566D565FB49FBB3F73FAE89AAE9F896FB6D5DAD4E6D71EDC703D203
	FD07230EB6D7B9D4D51DD23D54528FD62BEB470EC71FBEFE9DEF772D0D360D55
	8D9CC6E223704479E4E9F709DFF71E0D3ADA768C7BACE107D31F761D671D2F6A
	429AF29A469B539AFB5B625BBA4FCC3ED1D6EADE7AFC47DB1F0F9C343C59794A
	F354C969DAE982D39367F2CF8C9D959D7D7E2EF9DC60DBA2B67BE763CEDF6A0F
	6FEFBA1074E1D245FF8BE73BBC3BCE5CF2B874F2B2DBE51357B8579AAF3A5F6D
	EA74EA3CFE93D34FC7BB9CBB9AAEB95C6BB9EE7ABDB57B66F7E91B9E37CEDDF4
	BD79F116FFD6D59E393DDDBDF37A6FF7C5F7F5DF16DD7E7227FDCECBBBD97727
	EEADBC4FBC5FF440ED41D943DD87D53F5BFEDCD8EFDC7F6AC077A0F3D1DC47F7
	068583CFFE91F58F0F43058F998FCB860D86EB9E383E3939E23F72FDE9FCA743
	CF64CF269E17FEA2FECBAE17162F7EF8D5EBD7CED198D1A197F29793BF6D7CA5
	FDEAC0EB19AFDBC6C2C61EBEC97833315EF456FBEDC177DC771DEFA3DF0F4FE4
	7C207F28FF68F9B1F553D0A7FB93199393FF040398F3FC63332DDB0000002063
	48524D00007A25000080830000F9FF000080E9000075300000EA6000003A9800
	00176F925FC546000001C04944415478DAECDD4B6E83301440517B9DD91FDB74
	278D4425CAD79867733C49A50C6A385C1348557229258D3872CEA594928FBEF7
	E89C47C4C8399794525AC3587B1F466588BD2312883294E19CF19A656AEF8E8E
	86326C195D1E48CA5086A10C651877604CD3145EEEF3F9A45794311A86329401
	4319CA807166071FBDDB0BE3C6327E7FBE727D93AE5E2628E32F0C0C65C05086
	326028E3298CB3E32A868FB6CB65343FB295711163BE03610C5686654A19CA80
	A10C65C05086326054DCB02B653C3D94B18D95619C2CE86C193094014319CA80
	A10C65C0F862D41C301A62F8F3CE06185BDBF5BDE2860103060C183060C08001
	0346DF1835BE9A84A10C183060C080D111C6DE933F0C65C0800103068C0D8C16
	57D430940103060C183060C0800103060C18309A4ED42D7465C08001230CC6C2
	7FB2CC4BAF69B0110E63BE936B4CAE27B4501829A5527B82B327443EBF810197
	A343CB54AD32A263847D64C31B3194A10C18CA50068C6ECB78F347DB9065BCE1
	A2AFDB73C6DAED90BDAF3D6078D0AED11623DC11F7CF7C946128431986329411
	1065EFEF8F82721BC6EC2AFC518CAD394498E7EDCB54AFEBF6A3078F32062FC3
	39E3DCF8010000FFFF03005131408209F853EF0000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="7" length_in_bytes="3182" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D49484452000000630000
	0062080600000044676D30000000097048597300000EC300000EC301C76FA864
	00000A4F6943435050686F746F73686F70204943432070726F66696C65000078
	DA9D53675453E9163DF7DEF4424B8880944B6F5215082052428B801491262A21
	09104A8821A1D91551C1114545041BC8A088038E8E808C15512C0C8A0AD807E4
	21A28E83A3888ACAFBE17BA36BD6BCF7E6CDFEB5D73EE7ACF39DB3CF07C0080C
	9648335135800CA9421E11E083C7C4C6E1E42E40810A2470001008B3642173FD
	230100F87E3C3C2B22C007BE000178D30B0800C04D9BC0301C87FF0FEA42995C
	01808401C07491384B08801400407A8E42A600404601809D98265300A0040060
	CB6362E300502D0060277FE6D300809DF8997B01005B94211501A09100201365
	884400683B00ACCF568A450058300014664BC43900D82D00304957664800B0B7
	00C0CE100BB200080C00305188852900047B0060C8232378008499001446F257
	3CF12BAE10E72A00007899B23CB9243945815B082D710757572E1E28CE49172B
	14366102619A402EC27999193281340FE0F3CC0000A0911511E083F3FD78CE0E
	AECECE368EB60E5F2DEABF06FF226262E3FEE5CFAB70400000E1747ED1FE2C2F
	B31A803B06806DFEA225EE04685E0BA075F78B66B20F40B500A0E9DA57F370F8
	7E3C3C45A190B9D9D9E5E4E4D84AC4425B61CA577DFE67C25FC057FD6CF97E3C
	FCF7F5E0BEE22481325D814704F8E0C2CCF44CA51CCF92098462DCE68F47FCB7
	0BFFFC1DD322C44962B9582A14E35112718E449A8CF332A52289429229C525D2
	FF64E2DF2CFB033EDF3500B06A3E017B912DA85D6303F64B27105874C0E2F700
	00F2BB6FC1D4280803806883E1CF77FFEF3FFD47A02500806649927100005E44
	242E54CAB33FC708000044A0812AB0411BF4C1182CC0061CC105DCC10BFC6036
	844224C4C24210420A64801C726029AC82422886CDB01D2A602FD4401D34C051
	688693700E2EC255B80E3D700FFA61089EC128BC81090441C808136121DA8801
	628A58238E08179985F821C14804128B2420C9881451224B91354831528A5420
	55481DF23D720239875C46BA913BC8003282FC86BC47319481B2513DD40CB543
	B9A8371A8446A20BD06474319A8F16A09BD072B41A3D8C36A1E7D0AB680FDA8F
	3E43C730C0E8180733C46C302EC6C342B1382C099363CBB122AC0CABC61AB056
	AC03BB89F563CFB17704128145C0093604774220611E4148584C584ED848A820
	1C243411DA093709038451C2272293A84BB426BA11F9C4186232318758482C23
	D6128F132F107B8843C437241289433227B9900249B1A454D212D246D26E5223
	E92CA99B34481A2393C9DA646BB20739942C202BC885E49DE4C3E433E41BE421
	F25B0A9D624071A4F853E22852CA6A4A19E510E534E5066598324155A39A52DD
	A8A15411358F5A42ADA1B652AF5187A81334759A39CD8316494BA5ADA295D31A
	681768F769AFE874BA11DD951E4E97D057D2CBE947E897E803F4770C0D861583
	C7886728199B18071867197718AF984CA619D38B19C754303731EB98E7990F99
	6F55582AB62A7C1591CA0A954A9526951B2A2F54A9AAA6AADEAA0B55F355CB54
	8FA95E537DAE46553353E3A909D496AB55AA9D50EB531B5367A93BA887AA67A8
	6F543FA47E59FD890659C34CC34F43A451A0B15FE3BCC6200B6319B3782C216B
	0DAB86758135C426B1CDD97C762ABB98FD1DBB8B3DAAA9A13943334A3357B352
	F394663F07E39871F89C744E09E728A797F37E8ADE14EF29E2291BA6344CB931
	655C6BAA96979658AB48AB51AB47EBBD36AEEDA79DA6BD45BB59FB810E41C74A
	275C2747678FCE059DE753D953DDA70AA7164D3D3AF5AE2EAA6BA51BA1BB4477
	BF6EA7EE989EBE5E809E4C6FA7DE79BDE7FA1C7D2FFD54FD6DFAA7F5470C5806
	B30C2406DB0CCE183CC535716F3C1D2FC7DBF151435DC34043A561956197E184
	91B9D13CA3D5468D460F8C69C65CE324E36DC66DC6A326062621264B4DEA4DEE
	9A524DB9A629A63B4C3B4CC7CDCCCDA2CDD699359B3D31D732E79BE79BD79BDF
	B7605A785A2CB6A8B6B86549B2E45AA659EEB6BC6E855A3959A558555A5DB346
	AD9DAD25D6BBADBBA711A7B94E934EAB9ED667C3B0F1B6C9B6A9B719B0E5D806
	DBAEB66DB67D6167621767B7C5AEC3EE93BD937DBA7D8DFD3D070D87D90EAB1D
	5A1D7E73B472143A563ADE9ACE9CEE3F7DC5F496E92F6758CF10CFD833E3B613
	CB29C4699D539BD347671767B97383F3888B894B82CB2E973E2E9B1BC6DDC8BD
	E44A74F5715DE17AD2F59D9BB39BC2EDA8DBAFEE36EE69EE87DC9FCC349F299E
	593373D0C3C843E051E5D13F0B9F95306BDFAC7E4F434F8167B5E7232F632F91
	57ADD7B0B7A577AAF761EF173EF63E729FE33EE33C37DE32DE595FCC37C0B7C8
	B7CB4FC36F9E5F85DF437F23FF64FF7AFFD100A78025016703898141815B02FB
	F87A7C21BF8E3F3ADB65F6B2D9ED418CA0B94115418F82AD82E5C1AD2168C8EC
	90AD21F7E798CE91CE690E85507EE8D6D00761E6618BC37E0C2785878557863F
	8E7088581AD131973577D1DC4373DF44FA449644DE9B67314F39AF2D4A352A3E
	AA2E6A3CDA37BA34BA3FC62E6659CCD5589D58496C4B1C392E2AAE366E6CBEDF
	FCEDF387E29DE20BE37B17982FC85D7079A1CEC2F485A716A92E122C3A96404C
	884E3894F041102AA8168C25F21377258E0A79C21DC267222FD136D188D8435C
	2A1E4EF2482A4D7A92EC91BC357924C533A52CE5B98427A990BC4C0D4CDD9B3A
	9E169A76206D323D3ABD31839291907142AA214D93B667EA67E66676CBAC6585
	B2FEC56E8BB72F1E9507C96BB390AC05592D0AB642A6E8545A28D72A07B26765
	5766BFCD89CA3996AB9E2BCDEDCCB3CADB90379CEF9FFFED12C212E192B6A586
	4B572D1D58E6BDAC6A39B23C7179DB0AE315052B865606AC3CB88AB62A6DD54F
	ABED5797AE7EBD267A4D6B815EC1CA82C1B5016BEB0B550AE5857DEBDCD7ED5D
	4F582F59DFB561FA869D1B3E15898AAE14DB1797157FD828DC78E51B876FCABF
	99DC94B4A9ABC4B964CF66D266E9E6DE2D9E5B0E96AA97E6970E6E0DD9DAB40D
	DF56B4EDF5F645DB2F97CD28DBBB83B643B9A3BF3CB8BC65A7C9CECD3B3F54A4
	54F454FA5436EED2DDB561D7F86ED1EE1B7BBCF634ECD5DB5BBCF7FD3EC9BEDB
	5501554DD566D565FB49FBB3F73FAE89AAE9F896FB6D5DAD4E6D71EDC703D203
	FD07230EB6D7B9D4D51DD23D54528FD62BEB470EC71FBEFE9DEF772D0D360D55
	8D9CC6E223704479E4E9F709DFF71E0D3ADA768C7BACE107D31F761D671D2F6A
	429AF29A469B539AFB5B625BBA4FCC3ED1D6EADE7AFC47DB1F0F9C343C59794A
	F354C969DAE982D39367F2CF8C9D959D7D7E2EF9DC60DBA2B67BE763CEDF6A0F
	6FEFBA1074E1D245FF8BE73BBC3BCE5CF2B874F2B2DBE51357B8579AAF3A5F6D
	EA74EA3CFE93D34FC7BB9CBB9AAEB95C6BB9EE7ABDB57B66F7E91B9E37CEDDF4
	BD79F116FFD6D59E393DDDBDF37A6FF7C5F7F5DF16DD7E7227FDCECBBBD97727
	EEADBC4FBC5FF440ED41D943DD87D53F5BFEDCD8EFDC7F6AC077A0F3D1DC47F7
	068583CFFE91F58F0F43058F998FCB860D86EB9E383E3939E23F72FDE9FCA743
	CF64CF269E17FEA2FECBAE17162F7EF8D5EBD7CED198D1A197F29793BF6D7CA5
	FDEAC0EB19AFDBC6C2C61EBEC97833315EF456FBEDC177DC771DEFA3DF0F4FE4
	7C207F28FF68F9B1F553D0A7FB93199393FF040398F3FC63332DDB0000002063
	48524D00007A25000080830000F9FF000080E9000075300000EA6000003A9800
	00176F925FC5460000018F4944415478DAECDD4D6EC2301080D1997372BF5CD3
	DD14294811F9C5B19D371B2AB101BF7C494C2B9AA594187132B3945272EF73B7
	BEE6113132B344447CC3F8F63C8C8B21B64E4B20CA50866BC6634E535B17BA35
	9461CBE8F2405286328C3294617E81314D53F372AFD72B1E51C66818CA50060C
	652803C69105DEFB692F8C1F96F1FFF399FD4D9CDD2628E31306863260284319
	30947117C6D1398BE1D676B98CEA47B6324E62CC1710C66065384D2943193094
	A10C18CA50068C0BDFD89932EE1E65AC63258C83051D2D038632602843193094
	A10C186F8C2B0746450C7FDE590163ED7DBD77DC3060C0800103060C183060C0
	E81BE38A5F4DC250060C183060C0E80863EBC51F863260C0800103C60A468D1D
	350C65C0800103060C183060C0800103068CAA2FD447E8CA8001034633180BDF
	64994B8FD1C9748B315FE45EBF617FB6C8A55B8C88280B4755C268E434A50C18
	3060B866C078D2DDD48E5BE07EF719AD3F1ED88FF80F96E60117F021308C328C
	32946194A10CA30C65186528C3284319A6F2FC010000FFFF030066AC11829256
	3AB30000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="8" length_in_bytes="3064" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D49484452000000630000
	0062080600000044676D30000000097048597300000EC300000EC301C76FA864
	00000A4F6943435050686F746F73686F70204943432070726F66696C65000078
	DA9D53675453E9163DF7DEF4424B8880944B6F5215082052428B801491262A21
	09104A8821A1D91551C1114545041BC8A088038E8E808C15512C0C8A0AD807E4
	21A28E83A3888ACAFBE17BA36BD6BCF7E6CDFEB5D73EE7ACF39DB3CF07C0080C
	9648335135800CA9421E11E083C7C4C6E1E42E40810A2470001008B3642173FD
	230100F87E3C3C2B22C007BE000178D30B0800C04D9BC0301C87FF0FEA42995C
	01808401C07491384B08801400407A8E42A600404601809D98265300A0040060
	CB6362E300502D0060277FE6D300809DF8997B01005B94211501A09100201365
	884400683B00ACCF568A450058300014664BC43900D82D00304957664800B0B7
	00C0CE100BB200080C00305188852900047B0060C8232378008499001446F257
	3CF12BAE10E72A00007899B23CB9243945815B082D710757572E1E28CE49172B
	14366102619A402EC27999193281340FE0F3CC0000A0911511E083F3FD78CE0E
	AECECE368EB60E5F2DEABF06FF226262E3FEE5CFAB70400000E1747ED1FE2C2F
	B31A803B06806DFEA225EE04685E0BA075F78B66B20F40B500A0E9DA57F370F8
	7E3C3C45A190B9D9D9E5E4E4D84AC4425B61CA577DFE67C25FC057FD6CF97E3C
	FCF7F5E0BEE22481325D814704F8E0C2CCF44CA51CCF92098462DCE68F47FCB7
	0BFFFC1DD322C44962B9582A14E35112718E449A8CF332A52289429229C525D2
	FF64E2DF2CFB033EDF3500B06A3E017B912DA85D6303F64B27105874C0E2F700
	00F2BB6FC1D4280803806883E1CF77FFEF3FFD47A02500806649927100005E44
	242E54CAB33FC708000044A0812AB0411BF4C1182CC0061CC105DCC10BFC6036
	844224C4C24210420A64801C726029AC82422886CDB01D2A602FD4401D34C051
	688693700E2EC255B80E3D700FFA61089EC128BC81090441C808136121DA8801
	628A58238E08179985F821C14804128B2420C9881451224B91354831528A5420
	55481DF23D720239875C46BA913BC8003282FC86BC47319481B2513DD40CB543
	B9A8371A8446A20BD06474319A8F16A09BD072B41A3D8C36A1E7D0AB680FDA8F
	3E43C730C0E8180733C46C302EC6C342B1382C099363CBB122AC0CABC61AB056
	AC03BB89F563CFB17704128145C0093604774220611E4148584C584ED848A820
	1C243411DA093709038451C2272293A84BB426BA11F9C4186232318758482C23
	D6128F132F107B8843C437241289433227B9900249B1A454D212D246D26E5223
	E92CA99B34481A2393C9DA646BB20739942C202BC885E49DE4C3E433E41BE421
	F25B0A9D624071A4F853E22852CA6A4A19E510E534E5066598324155A39A52DD
	A8A15411358F5A42ADA1B652AF5187A81334759A39CD8316494BA5ADA295D31A
	681768F769AFE874BA11DD951E4E97D057D2CBE947E897E803F4770C0D861583
	C7886728199B18071867197718AF984CA619D38B19C754303731EB98E7990F99
	6F55582AB62A7C1591CA0A954A9526951B2A2F54A9AAA6AADEAA0B55F355CB54
	8FA95E537DAE46553353E3A909D496AB55AA9D50EB531B5367A93BA887AA67A8
	6F543FA47E59FD890659C34CC34F43A451A0B15FE3BCC6200B6319B3782C216B
	0DAB86758135C426B1CDD97C762ABB98FD1DBB8B3DAAA9A13943334A3357B352
	F394663F07E39871F89C744E09E728A797F37E8ADE14EF29E2291BA6344CB931
	655C6BAA96979658AB48AB51AB47EBBD36AEEDA79DA6BD45BB59FB810E41C74A
	275C2747678FCE059DE753D953DDA70AA7164D3D3AF5AE2EAA6BA51BA1BB4477
	BF6EA7EE989EBE5E809E4C6FA7DE79BDE7FA1C7D2FFD54FD6DFAA7F5470C5806
	B30C2406DB0CCE183CC535716F3C1D2FC7DBF151435DC34043A561956197E184
	91B9D13CA3D5468D460F8C69C65CE324E36DC66DC6A326062621264B4DEA4DEE
	9A524DB9A629A63B4C3B4CC7CDCCCDA2CDD699359B3D31D732E79BE79BD79BDF
	B7605A785A2CB6A8B6B86549B2E45AA659EEB6BC6E855A3959A558555A5DB346
	AD9DAD25D6BBADBBA711A7B94E934EAB9ED667C3B0F1B6C9B6A9B719B0E5D806
	DBAEB66DB67D6167621767B7C5AEC3EE93BD937DBA7D8DFD3D070D87D90EAB1D
	5A1D7E73B472143A563ADE9ACE9CEE3F7DC5F496E92F6758CF10CFD833E3B613
	CB29C4699D539BD347671767B97383F3888B894B82CB2E973E2E9B1BC6DDC8BD
	E44A74F5715DE17AD2F59D9BB39BC2EDA8DBAFEE36EE69EE87DC9FCC349F299E
	593373D0C3C843E051E5D13F0B9F95306BDFAC7E4F434F8167B5E7232F632F91
	57ADD7B0B7A577AAF761EF173EF63E729FE33EE33C37DE32DE595FCC37C0B7C8
	B7CB4FC36F9E5F85DF437F23FF64FF7AFFD100A78025016703898141815B02FB
	F87A7C21BF8E3F3ADB65F6B2D9ED418CA0B94115418F82AD82E5C1AD2168C8EC
	90AD21F7E798CE91CE690E85507EE8D6D00761E6618BC37E0C2785878557863F
	8E7088581AD131973577D1DC4373DF44FA449644DE9B67314F39AF2D4A352A3E
	AA2E6A3CDA37BA34BA3FC62E6659CCD5589D58496C4B1C392E2AAE366E6CBEDF
	FCEDF387E29DE20BE37B17982FC85D7079A1CEC2F485A716A92E122C3A96404C
	884E3894F041102AA8168C25F21377258E0A79C21DC267222FD136D188D8435C
	2A1E4EF2482A4D7A92EC91BC357924C533A52CE5B98427A990BC4C0D4CDD9B3A
	9E169A76206D323D3ABD31839291907142AA214D93B667EA67E66676CBAC6585
	B2FEC56E8BB72F1E9507C96BB390AC05592D0AB642A6E8545A28D72A07B26765
	5766BFCD89CA3996AB9E2BCDEDCCB3CADB90379CEF9FFFED12C212E192B6A586
	4B572D1D58E6BDAC6A39B23C7179DB0AE315052B865606AC3CB88AB62A6DD54F
	ABED5797AE7EBD267A4D6B815EC1CA82C1B5016BEB0B550AE5857DEBDCD7ED5D
	4F582F59DFB561FA869D1B3E15898AAE14DB1797157FD828DC78E51B876FCABF
	99DC94B4A9ABC4B964CF66D266E9E6DE2D9E5B0E96AA97E6970E6E0DD9DAB40D
	DF56B4EDF5F645DB2F97CD28DBBB83B643B9A3BF3CB8BC65A7C9CECD3B3F54A4
	54F454FA5436EED2DDB561D7F86ED1EE1B7BBCF634ECD5DB5BBCF7FD3EC9BEDB
	5501554DD566D565FB49FBB3F73FAE89AAE9F896FB6D5DAD4E6D71EDC703D203
	FD07230EB6D7B9D4D51DD23D54528FD62BEB470EC71FBEFE9DEF772D0D360D55
	8D9CC6E223704479E4E9F709DFF71E0D3ADA768C7BACE107D31F761D671D2F6A
	429AF29A469B539AFB5B625BBA4FCC3ED1D6EADE7AFC47DB1F0F9C343C59794A
	F354C969DAE982D39367F2CF8C9D959D7D7E2EF9DC60DBA2B67BE763CEDF6A0F
	6FEFBA1074E1D245FF8BE73BBC3BCE5CF2B874F2B2DBE51357B8579AAF3A5F6D
	EA74EA3CFE93D34FC7BB9CBB9AAEB95C6BB9EE7ABDB57B66F7E91B9E37CEDDF4
	BD79F116FFD6D59E393DDDBDF37A6FF7C5F7F5DF16DD7E7227FDCECBBBD97727
	EEADBC4FBC5FF440ED41D943DD87D53F5BFEDCD8EFDC7F6AC077A0F3D1DC47F7
	068583CFFE91F58F0F43058F998FCB860D86EB9E383E3939E23F72FDE9FCA743
	CF64CF269E17FEA2FECBAE17162F7EF8D5EBD7CED198D1A197F29793BF6D7CA5
	FDEAC0EB19AFDBC6C2C61EBEC97833315EF456FBEDC177DC771DEFA3DF0F4FE4
	7C207F28FF68F9B1F553D0A7FB93199393FF040398F3FC63332DDB0000002063
	48524D00007A25000080830000F9FF000080E9000075300000EA6000003A9800
	00176F925FC546000001194944415478DAECDC810D8240104541B6CEEBEFDA5C
	1A3081B0E4DC0BF32A50878FA0C6C8CC433D0A183004038660C0100C18820143
	DD30E69CEDE5C6184766060C183060C08001E303181191301A61542EF323E2A8
	DE26C0800103060C183060F4C0785A15C3A5EDEF652C3FB22D03060CA729CB80
	0103060C183060C058F0C42A18FFCE32AE0F8A80F17041302C03060C183060C0
	8051C5783318F565F879270C183060C0800103060C183060ACC678E3AB491896
	0103060C183036C2B8FBE60FC33260C0800103C605C68A3B6A18960103060C18
	3060C0800103060C1830963E501FA15B060C1830B6C2E8F017D577FA048660C0
	100C188221183004038660C0100C18820143306078156008060CC1D8AC130000
	FFFF03007EA56E647D65EBE50000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="9" length_in_bytes="2986" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000005D0000
	00620806000000325DDFBB000000097048597300000EC300000EC301C76FA864
	00000A4F6943435050686F746F73686F70204943432070726F66696C65000078
	DA9D53675453E9163DF7DEF4424B8880944B6F5215082052428B801491262A21
	09104A8821A1D91551C1114545041BC8A088038E8E808C15512C0C8A0AD807E4
	21A28E83A3888ACAFBE17BA36BD6BCF7E6CDFEB5D73EE7ACF39DB3CF07C0080C
	9648335135800CA9421E11E083C7C4C6E1E42E40810A2470001008B3642173FD
	230100F87E3C3C2B22C007BE000178D30B0800C04D9BC0301C87FF0FEA42995C
	01808401C07491384B08801400407A8E42A600404601809D98265300A0040060
	CB6362E300502D0060277FE6D300809DF8997B01005B94211501A09100201365
	884400683B00ACCF568A450058300014664BC43900D82D00304957664800B0B7
	00C0CE100BB200080C00305188852900047B0060C8232378008499001446F257
	3CF12BAE10E72A00007899B23CB9243945815B082D710757572E1E28CE49172B
	14366102619A402EC27999193281340FE0F3CC0000A0911511E083F3FD78CE0E
	AECECE368EB60E5F2DEABF06FF226262E3FEE5CFAB70400000E1747ED1FE2C2F
	B31A803B06806DFEA225EE04685E0BA075F78B66B20F40B500A0E9DA57F370F8
	7E3C3C45A190B9D9D9E5E4E4D84AC4425B61CA577DFE67C25FC057FD6CF97E3C
	FCF7F5E0BEE22481325D814704F8E0C2CCF44CA51CCF92098462DCE68F47FCB7
	0BFFFC1DD322C44962B9582A14E35112718E449A8CF332A52289429229C525D2
	FF64E2DF2CFB033EDF3500B06A3E017B912DA85D6303F64B27105874C0E2F700
	00F2BB6FC1D4280803806883E1CF77FFEF3FFD47A02500806649927100005E44
	242E54CAB33FC708000044A0812AB0411BF4C1182CC0061CC105DCC10BFC6036
	844224C4C24210420A64801C726029AC82422886CDB01D2A602FD4401D34C051
	688693700E2EC255B80E3D700FFA61089EC128BC81090441C808136121DA8801
	628A58238E08179985F821C14804128B2420C9881451224B91354831528A5420
	55481DF23D720239875C46BA913BC8003282FC86BC47319481B2513DD40CB543
	B9A8371A8446A20BD06474319A8F16A09BD072B41A3D8C36A1E7D0AB680FDA8F
	3E43C730C0E8180733C46C302EC6C342B1382C099363CBB122AC0CABC61AB056
	AC03BB89F563CFB17704128145C0093604774220611E4148584C584ED848A820
	1C243411DA093709038451C2272293A84BB426BA11F9C4186232318758482C23
	D6128F132F107B8843C437241289433227B9900249B1A454D212D246D26E5223
	E92CA99B34481A2393C9DA646BB20739942C202BC885E49DE4C3E433E41BE421
	F25B0A9D624071A4F853E22852CA6A4A19E510E534E5066598324155A39A52DD
	A8A15411358F5A42ADA1B652AF5187A81334759A39CD8316494BA5ADA295D31A
	681768F769AFE874BA11DD951E4E97D057D2CBE947E897E803F4770C0D861583
	C7886728199B18071867197718AF984CA619D38B19C754303731EB98E7990F99
	6F55582AB62A7C1591CA0A954A9526951B2A2F54A9AAA6AADEAA0B55F355CB54
	8FA95E537DAE46553353E3A909D496AB55AA9D50EB531B5367A93BA887AA67A8
	6F543FA47E59FD890659C34CC34F43A451A0B15FE3BCC6200B6319B3782C216B
	0DAB86758135C426B1CDD97C762ABB98FD1DBB8B3DAAA9A13943334A3357B352
	F394663F07E39871F89C744E09E728A797F37E8ADE14EF29E2291BA6344CB931
	655C6BAA96979658AB48AB51AB47EBBD36AEEDA79DA6BD45BB59FB810E41C74A
	275C2747678FCE059DE753D953DDA70AA7164D3D3AF5AE2EAA6BA51BA1BB4477
	BF6EA7EE989EBE5E809E4C6FA7DE79BDE7FA1C7D2FFD54FD6DFAA7F5470C5806
	B30C2406DB0CCE183CC535716F3C1D2FC7DBF151435DC34043A561956197E184
	91B9D13CA3D5468D460F8C69C65CE324E36DC66DC6A326062621264B4DEA4DEE
	9A524DB9A629A63B4C3B4CC7CDCCCDA2CDD699359B3D31D732E79BE79BD79BDF
	B7605A785A2CB6A8B6B86549B2E45AA659EEB6BC6E855A3959A558555A5DB346
	AD9DAD25D6BBADBBA711A7B94E934EAB9ED667C3B0F1B6C9B6A9B719B0E5D806
	DBAEB66DB67D6167621767B7C5AEC3EE93BD937DBA7D8DFD3D070D87D90EAB1D
	5A1D7E73B472143A563ADE9ACE9CEE3F7DC5F496E92F6758CF10CFD833E3B613
	CB29C4699D539BD347671767B97383F3888B894B82CB2E973E2E9B1BC6DDC8BD
	E44A74F5715DE17AD2F59D9BB39BC2EDA8DBAFEE36EE69EE87DC9FCC349F299E
	593373D0C3C843E051E5D13F0B9F95306BDFAC7E4F434F8167B5E7232F632F91
	57ADD7B0B7A577AAF761EF173EF63E729FE33EE33C37DE32DE595FCC37C0B7C8
	B7CB4FC36F9E5F85DF437F23FF64FF7AFFD100A78025016703898141815B02FB
	F87A7C21BF8E3F3ADB65F6B2D9ED418CA0B94115418F82AD82E5C1AD2168C8EC
	90AD21F7E798CE91CE690E85507EE8D6D00761E6618BC37E0C2785878557863F
	8E7088581AD131973577D1DC4373DF44FA449644DE9B67314F39AF2D4A352A3E
	AA2E6A3CDA37BA34BA3FC62E6659CCD5589D58496C4B1C392E2AAE366E6CBEDF
	FCEDF387E29DE20BE37B17982FC85D7079A1CEC2F485A716A92E122C3A96404C
	884E3894F041102AA8168C25F21377258E0A79C21DC267222FD136D188D8435C
	2A1E4EF2482A4D7A92EC91BC357924C533A52CE5B98427A990BC4C0D4CDD9B3A
	9E169A76206D323D3ABD31839291907142AA214D93B667EA67E66676CBAC6585
	B2FEC56E8BB72F1E9507C96BB390AC05592D0AB642A6E8545A28D72A07B26765
	5766BFCD89CA3996AB9E2BCDEDCCB3CADB90379CEF9FFFED12C212E192B6A586
	4B572D1D58E6BDAC6A39B23C7179DB0AE315052B865606AC3CB88AB62A6DD54F
	ABED5797AE7EBD267A4D6B815EC1CA82C1B5016BEB0B550AE5857DEBDCD7ED5D
	4F582F59DFB561FA869D1B3E15898AAE14DB1797157FD828DC78E51B876FCABF
	99DC94B4A9ABC4B964CF66D266E9E6DE2D9E5B0E96AA97E6970E6E0DD9DAB40D
	DF56B4EDF5F645DB2F97CD28DBBB83B643B9A3BF3CB8BC65A7C9CECD3B3F54A4
	54F454FA5436EED2DDB561D7F86ED1EE1B7BBCF634ECD5DB5BBCF7FD3EC9BEDB
	5501554DD566D565FB49FBB3F73FAE89AAE9F896FB6D5DAD4E6D71EDC703D203
	FD07230EB6D7B9D4D51DD23D54528FD62BEB470EC71FBEFE9DEF772D0D360D55
	8D9CC6E223704479E4E9F709DFF71E0D3ADA768C7BACE107D31F761D671D2F6A
	429AF29A469B539AFB5B625BBA4FCC3ED1D6EADE7AFC47DB1F0F9C343C59794A
	F354C969DAE982D39367F2CF8C9D959D7D7E2EF9DC60DBA2B67BE763CEDF6A0F
	6FEFBA1074E1D245FF8BE73BBC3BCE5CF2B874F2B2DBE51357B8579AAF3A5F6D
	EA74EA3CFE93D34FC7BB9CBB9AAEB95C6BB9EE7ABDB57B66F7E91B9E37CEDDF4
	BD79F116FFD6D59E393DDDBDF37A6FF7C5F7F5DF16DD7E7227FDCECBBBD97727
	EEADBC4FBC5FF440ED41D943DD87D53F5BFEDCD8EFDC7F6AC077A0F3D1DC47F7
	068583CFFE91F58F0F43058F998FCB860D86EB9E383E3939E23F72FDE9FCA743
	CF64CF269E17FEA2FECBAE17162F7EF8D5EBD7CED198D1A197F29793BF6D7CA5
	FDEAC0EB19AFDBC6C2C61EBEC97833315EF456FBEDC177DC771DEFA3DF0F4FE4
	7C207F28FF68F9B1F553D0A7FB93199393FF040398F3FC63332DDB0000002063
	48524D00007A25000080830000F9FF000080E9000075300000EA6000003A9800
	00176F925FC546000000CB4944415478DAECD28109C0400804C1BFFE8BBED410
	90609ED90A74346D8FBE2DD0A1431774E8820E5DD0A10B3A74E8820E5DD0A10B
	3A74CDA327B9F6826DB3167D72B8359F39BC1774E8D0A143870E1D3A74E8D0A1
	43870E1D3A74E8D0A143870E1D3A74E8D0A143870E1D3A74E8D0A143870E1D3A
	74E8D0A143870E1D3A74E8D0A143870E1D3A74E8D0A143870E1D3A74E8D0A143
	870E1D3A74E8D0A143870E1D3A74E8FF453F97B6165DD0A10B3A74E8820E5DD0
	A10B3A7441870E5DD0A10B3A74BDE9010000FFFF0300CEE6FD5B5CA8C1490000
	000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="10" length_in_bytes="3135" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000005D0000
	00620806000000325DDFBB000000097048597300000EC300000EC301C76FA864
	00000A4F6943435050686F746F73686F70204943432070726F66696C65000078
	DA9D53675453E9163DF7DEF4424B8880944B6F5215082052428B801491262A21
	09104A8821A1D91551C1114545041BC8A088038E8E808C15512C0C8A0AD807E4
	21A28E83A3888ACAFBE17BA36BD6BCF7E6CDFEB5D73EE7ACF39DB3CF07C0080C
	9648335135800CA9421E11E083C7C4C6E1E42E40810A2470001008B3642173FD
	230100F87E3C3C2B22C007BE000178D30B0800C04D9BC0301C87FF0FEA42995C
	01808401C07491384B08801400407A8E42A600404601809D98265300A0040060
	CB6362E300502D0060277FE6D300809DF8997B01005B94211501A09100201365
	884400683B00ACCF568A450058300014664BC43900D82D00304957664800B0B7
	00C0CE100BB200080C00305188852900047B0060C8232378008499001446F257
	3CF12BAE10E72A00007899B23CB9243945815B082D710757572E1E28CE49172B
	14366102619A402EC27999193281340FE0F3CC0000A0911511E083F3FD78CE0E
	AECECE368EB60E5F2DEABF06FF226262E3FEE5CFAB70400000E1747ED1FE2C2F
	B31A803B06806DFEA225EE04685E0BA075F78B66B20F40B500A0E9DA57F370F8
	7E3C3C45A190B9D9D9E5E4E4D84AC4425B61CA577DFE67C25FC057FD6CF97E3C
	FCF7F5E0BEE22481325D814704F8E0C2CCF44CA51CCF92098462DCE68F47FCB7
	0BFFFC1DD322C44962B9582A14E35112718E449A8CF332A52289429229C525D2
	FF64E2DF2CFB033EDF3500B06A3E017B912DA85D6303F64B27105874C0E2F700
	00F2BB6FC1D4280803806883E1CF77FFEF3FFD47A02500806649927100005E44
	242E54CAB33FC708000044A0812AB0411BF4C1182CC0061CC105DCC10BFC6036
	844224C4C24210420A64801C726029AC82422886CDB01D2A602FD4401D34C051
	688693700E2EC255B80E3D700FFA61089EC128BC81090441C808136121DA8801
	628A58238E08179985F821C14804128B2420C9881451224B91354831528A5420
	55481DF23D720239875C46BA913BC8003282FC86BC47319481B2513DD40CB543
	B9A8371A8446A20BD06474319A8F16A09BD072B41A3D8C36A1E7D0AB680FDA8F
	3E43C730C0E8180733C46C302EC6C342B1382C099363CBB122AC0CABC61AB056
	AC03BB89F563CFB17704128145C0093604774220611E4148584C584ED848A820
	1C243411DA093709038451C2272293A84BB426BA11F9C4186232318758482C23
	D6128F132F107B8843C437241289433227B9900249B1A454D212D246D26E5223
	E92CA99B34481A2393C9DA646BB20739942C202BC885E49DE4C3E433E41BE421
	F25B0A9D624071A4F853E22852CA6A4A19E510E534E5066598324155A39A52DD
	A8A15411358F5A42ADA1B652AF5187A81334759A39CD8316494BA5ADA295D31A
	681768F769AFE874BA11DD951E4E97D057D2CBE947E897E803F4770C0D861583
	C7886728199B18071867197718AF984CA619D38B19C754303731EB98E7990F99
	6F55582AB62A7C1591CA0A954A9526951B2A2F54A9AAA6AADEAA0B55F355CB54
	8FA95E537DAE46553353E3A909D496AB55AA9D50EB531B5367A93BA887AA67A8
	6F543FA47E59FD890659C34CC34F43A451A0B15FE3BCC6200B6319B3782C216B
	0DAB86758135C426B1CDD97C762ABB98FD1DBB8B3DAAA9A13943334A3357B352
	F394663F07E39871F89C744E09E728A797F37E8ADE14EF29E2291BA6344CB931
	655C6BAA96979658AB48AB51AB47EBBD36AEEDA79DA6BD45BB59FB810E41C74A
	275C2747678FCE059DE753D953DDA70AA7164D3D3AF5AE2EAA6BA51BA1BB4477
	BF6EA7EE989EBE5E809E4C6FA7DE79BDE7FA1C7D2FFD54FD6DFAA7F5470C5806
	B30C2406DB0CCE183CC535716F3C1D2FC7DBF151435DC34043A561956197E184
	91B9D13CA3D5468D460F8C69C65CE324E36DC66DC6A326062621264B4DEA4DEE
	9A524DB9A629A63B4C3B4CC7CDCCCDA2CDD699359B3D31D732E79BE79BD79BDF
	B7605A785A2CB6A8B6B86549B2E45AA659EEB6BC6E855A3959A558555A5DB346
	AD9DAD25D6BBADBBA711A7B94E934EAB9ED667C3B0F1B6C9B6A9B719B0E5D806
	DBAEB66DB67D6167621767B7C5AEC3EE93BD937DBA7D8DFD3D070D87D90EAB1D
	5A1D7E73B472143A563ADE9ACE9CEE3F7DC5F496E92F6758CF10CFD833E3B613
	CB29C4699D539BD347671767B97383F3888B894B82CB2E973E2E9B1BC6DDC8BD
	E44A74F5715DE17AD2F59D9BB39BC2EDA8DBAFEE36EE69EE87DC9FCC349F299E
	593373D0C3C843E051E5D13F0B9F95306BDFAC7E4F434F8167B5E7232F632F91
	57ADD7B0B7A577AAF761EF173EF63E729FE33EE33C37DE32DE595FCC37C0B7C8
	B7CB4FC36F9E5F85DF437F23FF64FF7AFFD100A78025016703898141815B02FB
	F87A7C21BF8E3F3ADB65F6B2D9ED418CA0B94115418F82AD82E5C1AD2168C8EC
	90AD21F7E798CE91CE690E85507EE8D6D00761E6618BC37E0C2785878557863F
	8E7088581AD131973577D1DC4373DF44FA449644DE9B67314F39AF2D4A352A3E
	AA2E6A3CDA37BA34BA3FC62E6659CCD5589D58496C4B1C392E2AAE366E6CBEDF
	FCEDF387E29DE20BE37B17982FC85D7079A1CEC2F485A716A92E122C3A96404C
	884E3894F041102AA8168C25F21377258E0A79C21DC267222FD136D188D8435C
	2A1E4EF2482A4D7A92EC91BC357924C533A52CE5B98427A990BC4C0D4CDD9B3A
	9E169A76206D323D3ABD31839291907142AA214D93B667EA67E66676CBAC6585
	B2FEC56E8BB72F1E9507C96BB390AC05592D0AB642A6E8545A28D72A07B26765
	5766BFCD89CA3996AB9E2BCDEDCCB3CADB90379CEF9FFFED12C212E192B6A586
	4B572D1D58E6BDAC6A39B23C7179DB0AE315052B865606AC3CB88AB62A6DD54F
	ABED5797AE7EBD267A4D6B815EC1CA82C1B5016BEB0B550AE5857DEBDCD7ED5D
	4F582F59DFB561FA869D1B3E15898AAE14DB1797157FD828DC78E51B876FCABF
	99DC94B4A9ABC4B964CF66D266E9E6DE2D9E5B0E96AA97E6970E6E0DD9DAB40D
	DF56B4EDF5F645DB2F97CD28DBBB83B643B9A3BF3CB8BC65A7C9CECD3B3F54A4
	54F454FA5436EED2DDB561D7F86ED1EE1B7BBCF634ECD5DB5BBCF7FD3EC9BEDB
	5501554DD566D565FB49FBB3F73FAE89AAE9F896FB6D5DAD4E6D71EDC703D203
	FD07230EB6D7B9D4D51DD23D54528FD62BEB470EC71FBEFE9DEF772D0D360D55
	8D9CC6E223704479E4E9F709DFF71E0D3ADA768C7BACE107D31F761D671D2F6A
	429AF29A469B539AFB5B625BBA4FCC3ED1D6EADE7AFC47DB1F0F9C343C59794A
	F354C969DAE982D39367F2CF8C9D959D7D7E2EF9DC60DBA2B67BE763CEDF6A0F
	6FEFBA1074E1D245FF8BE73BBC3BCE5CF2B874F2B2DBE51357B8579AAF3A5F6D
	EA74EA3CFE93D34FC7BB9CBB9AAEB95C6BB9EE7ABDB57B66F7E91B9E37CEDDF4
	BD79F116FFD6D59E393DDDBDF37A6FF7C5F7F5DF16DD7E7227FDCECBBBD97727
	EEADBC4FBC5FF440ED41D943DD87D53F5BFEDCD8EFDC7F6AC077A0F3D1DC47F7
	068583CFFE91F58F0F43058F998FCB860D86EB9E383E3939E23F72FDE9FCA743
	CF64CF269E17FEA2FECBAE17162F7EF8D5EBD7CED198D1A197F29793BF6D7CA5
	FDEAC0EB19AFDBC6C2C61EBEC97833315EF456FBEDC177DC771DEFA3DF0F4FE4
	7C207F28FF68F9B1F553D0A7FB93199393FF040398F3FC63332DDB0000002063
	48524D00007A25000080830000F9FF000080E9000075300000EA6000003A9800
	00176F925FC546000001604944415478DAECDD410A8330100550E7FE874E1742
	B12554638D71F4CDA6506A358F6F48444D9452A68C1511A59412298F3D2B7AE6
	0A49872EE9920E5DD2251D3AF4DED8DFDF65C34F99F4257CC6B4EB5EAE8E5E3B
	B555FB19D78C6E885975810E1D3A74E8D0A14387BE0D3D226E0BBBD6EEA1E867
	CD12CF9C911EDDEE94E8675F7B793CFA88AB8C92AE7B81FE28F4938784D0A143
	870E1D3A74E8D0A143870E1D3A74E8D0A143870E1D3A74E8D0A143870E1D3A74
	E8D0A1435F435FDE49D5B2F3CCCF79F66EF726F4699A6FD2DCBAF3E53699D17B
	B53BE6DFBCFFF8E3B3B6C19E870232E11FDDEE9AABA48F48BA3EFD827DBAD18B
	212374E8D0A143870E1D3A74E8D0A143870E1D3A74E8D0A143870E1DFAB5D1BD
	6407BA17A741EF0CEF1581BA9731E877ADCBA23FB5A043870E1D3A74E8D0A1FF
	9C82ABF699B10503471CBBA531A1EFEAE22C02AB7B810E5D493A74499774E892
	2EE9FFD60B0000FFFF030094DE898A6078095F0000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="11" length_in_bytes="3108" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000005D0000
	00620806000000325DDFBB000000097048597300000EC300000EC301C76FA864
	00000A4F6943435050686F746F73686F70204943432070726F66696C65000078
	DA9D53675453E9163DF7DEF4424B8880944B6F5215082052428B801491262A21
	09104A8821A1D91551C1114545041BC8A088038E8E808C15512C0C8A0AD807E4
	21A28E83A3888ACAFBE17BA36BD6BCF7E6CDFEB5D73EE7ACF39DB3CF07C0080C
	9648335135800CA9421E11E083C7C4C6E1E42E40810A2470001008B3642173FD
	230100F87E3C3C2B22C007BE000178D30B0800C04D9BC0301C87FF0FEA42995C
	01808401C07491384B08801400407A8E42A600404601809D98265300A0040060
	CB6362E300502D0060277FE6D300809DF8997B01005B94211501A09100201365
	884400683B00ACCF568A450058300014664BC43900D82D00304957664800B0B7
	00C0CE100BB200080C00305188852900047B0060C8232378008499001446F257
	3CF12BAE10E72A00007899B23CB9243945815B082D710757572E1E28CE49172B
	14366102619A402EC27999193281340FE0F3CC0000A0911511E083F3FD78CE0E
	AECECE368EB60E5F2DEABF06FF226262E3FEE5CFAB70400000E1747ED1FE2C2F
	B31A803B06806DFEA225EE04685E0BA075F78B66B20F40B500A0E9DA57F370F8
	7E3C3C45A190B9D9D9E5E4E4D84AC4425B61CA577DFE67C25FC057FD6CF97E3C
	FCF7F5E0BEE22481325D814704F8E0C2CCF44CA51CCF92098462DCE68F47FCB7
	0BFFFC1DD322C44962B9582A14E35112718E449A8CF332A52289429229C525D2
	FF64E2DF2CFB033EDF3500B06A3E017B912DA85D6303F64B27105874C0E2F700
	00F2BB6FC1D4280803806883E1CF77FFEF3FFD47A02500806649927100005E44
	242E54CAB33FC708000044A0812AB0411BF4C1182CC0061CC105DCC10BFC6036
	844224C4C24210420A64801C726029AC82422886CDB01D2A602FD4401D34C051
	688693700E2EC255B80E3D700FFA61089EC128BC81090441C808136121DA8801
	628A58238E08179985F821C14804128B2420C9881451224B91354831528A5420
	55481DF23D720239875C46BA913BC8003282FC86BC47319481B2513DD40CB543
	B9A8371A8446A20BD06474319A8F16A09BD072B41A3D8C36A1E7D0AB680FDA8F
	3E43C730C0E8180733C46C302EC6C342B1382C099363CBB122AC0CABC61AB056
	AC03BB89F563CFB17704128145C0093604774220611E4148584C584ED848A820
	1C243411DA093709038451C2272293A84BB426BA11F9C4186232318758482C23
	D6128F132F107B8843C437241289433227B9900249B1A454D212D246D26E5223
	E92CA99B34481A2393C9DA646BB20739942C202BC885E49DE4C3E433E41BE421
	F25B0A9D624071A4F853E22852CA6A4A19E510E534E5066598324155A39A52DD
	A8A15411358F5A42ADA1B652AF5187A81334759A39CD8316494BA5ADA295D31A
	681768F769AFE874BA11DD951E4E97D057D2CBE947E897E803F4770C0D861583
	C7886728199B18071867197718AF984CA619D38B19C754303731EB98E7990F99
	6F55582AB62A7C1591CA0A954A9526951B2A2F54A9AAA6AADEAA0B55F355CB54
	8FA95E537DAE46553353E3A909D496AB55AA9D50EB531B5367A93BA887AA67A8
	6F543FA47E59FD890659C34CC34F43A451A0B15FE3BCC6200B6319B3782C216B
	0DAB86758135C426B1CDD97C762ABB98FD1DBB8B3DAAA9A13943334A3357B352
	F394663F07E39871F89C744E09E728A797F37E8ADE14EF29E2291BA6344CB931
	655C6BAA96979658AB48AB51AB47EBBD36AEEDA79DA6BD45BB59FB810E41C74A
	275C2747678FCE059DE753D953DDA70AA7164D3D3AF5AE2EAA6BA51BA1BB4477
	BF6EA7EE989EBE5E809E4C6FA7DE79BDE7FA1C7D2FFD54FD6DFAA7F5470C5806
	B30C2406DB0CCE183CC535716F3C1D2FC7DBF151435DC34043A561956197E184
	91B9D13CA3D5468D460F8C69C65CE324E36DC66DC6A326062621264B4DEA4DEE
	9A524DB9A629A63B4C3B4CC7CDCCCDA2CDD699359B3D31D732E79BE79BD79BDF
	B7605A785A2CB6A8B6B86549B2E45AA659EEB6BC6E855A3959A558555A5DB346
	AD9DAD25D6BBADBBA711A7B94E934EAB9ED667C3B0F1B6C9B6A9B719B0E5D806
	DBAEB66DB67D6167621767B7C5AEC3EE93BD937DBA7D8DFD3D070D87D90EAB1D
	5A1D7E73B472143A563ADE9ACE9CEE3F7DC5F496E92F6758CF10CFD833E3B613
	CB29C4699D539BD347671767B97383F3888B894B82CB2E973E2E9B1BC6DDC8BD
	E44A74F5715DE17AD2F59D9BB39BC2EDA8DBAFEE36EE69EE87DC9FCC349F299E
	593373D0C3C843E051E5D13F0B9F95306BDFAC7E4F434F8167B5E7232F632F91
	57ADD7B0B7A577AAF761EF173EF63E729FE33EE33C37DE32DE595FCC37C0B7C8
	B7CB4FC36F9E5F85DF437F23FF64FF7AFFD100A78025016703898141815B02FB
	F87A7C21BF8E3F3ADB65F6B2D9ED418CA0B94115418F82AD82E5C1AD2168C8EC
	90AD21F7E798CE91CE690E85507EE8D6D00761E6618BC37E0C2785878557863F
	8E7088581AD131973577D1DC4373DF44FA449644DE9B67314F39AF2D4A352A3E
	AA2E6A3CDA37BA34BA3FC62E6659CCD5589D58496C4B1C392E2AAE366E6CBEDF
	FCEDF387E29DE20BE37B17982FC85D7079A1CEC2F485A716A92E122C3A96404C
	884E3894F041102AA8168C25F21377258E0A79C21DC267222FD136D188D8435C
	2A1E4EF2482A4D7A92EC91BC357924C533A52CE5B98427A990BC4C0D4CDD9B3A
	9E169A76206D323D3ABD31839291907142AA214D93B667EA67E66676CBAC6585
	B2FEC56E8BB72F1E9507C96BB390AC05592D0AB642A6E8545A28D72A07B26765
	5766BFCD89CA3996AB9E2BCDEDCCB3CADB90379CEF9FFFED12C212E192B6A586
	4B572D1D58E6BDAC6A39B23C7179DB0AE315052B865606AC3CB88AB62A6DD54F
	ABED5797AE7EBD267A4D6B815EC1CA82C1B5016BEB0B550AE5857DEBDCD7ED5D
	4F582F59DFB561FA869D1B3E15898AAE14DB1797157FD828DC78E51B876FCABF
	99DC94B4A9ABC4B964CF66D266E9E6DE2D9E5B0E96AA97E6970E6E0DD9DAB40D
	DF56B4EDF5F645DB2F97CD28DBBB83B643B9A3BF3CB8BC65A7C9CECD3B3F54A4
	54F454FA5436EED2DDB561D7F86ED1EE1B7BBCF634ECD5DB5BBCF7FD3EC9BEDB
	5501554DD566D565FB49FBB3F73FAE89AAE9F896FB6D5DAD4E6D71EDC703D203
	FD07230EB6D7B9D4D51DD23D54528FD62BEB470EC71FBEFE9DEF772D0D360D55
	8D9CC6E223704479E4E9F709DFF71E0D3ADA768C7BACE107D31F761D671D2F6A
	429AF29A469B539AFB5B625BBA4FCC3ED1D6EADE7AFC47DB1F0F9C343C59794A
	F354C969DAE982D39367F2CF8C9D959D7D7E2EF9DC60DBA2B67BE763CEDF6A0F
	6FEFBA1074E1D245FF8BE73BBC3BCE5CF2B874F2B2DBE51357B8579AAF3A5F6D
	EA74EA3CFE93D34FC7BB9CBB9AAEB95C6BB9EE7ABDB57B66F7E91B9E37CEDDF4
	BD79F116FFD6D59E393DDDBDF37A6FF7C5F7F5DF16DD7E7227FDCECBBBD97727
	EEADBC4FBC5FF440ED41D943DD87D53F5BFEDCD8EFDC7F6AC077A0F3D1DC47F7
	068583CFFE91F58F0F43058F998FCB860D86EB9E383E3939E23F72FDE9FCA743
	CF64CF269E17FEA2FECBAE17162F7EF8D5EBD7CED198D1A197F29793BF6D7CA5
	FDEAC0EB19AFDBC6C2C61EBEC97833315EF456FBEDC177DC771DEFA3DF0F4FE4
	7C207F28FF68F9B1F553D0A7FB93199393FF040398F3FC63332DDB0000002063
	48524D00007A25000080830000F9FF000080E9000075300000EA6000003A9800
	00176F925FC546000001454944415478DAECDBDD0A83300C06D0E4FD1FBABB10
	861B0575D86AE6F96E06327F72484B15CDD65A544C66B6D65A96BCF6AAE89593
	3A1DBA4ED7E9D075BA4E870E7D34F6F7B66AF8253B7D0D5FB1DB4D2F7747EF0D
	6D393EE20EA35B62765DA043870E1D3A74E8D0A1EF43CFCCBF85DDAAFB52F459
	778933EF48CFAEBB24FAEC672F8F47BFE229A34E37BD407F14FAE4252174E8D0
	A143870E1D3A74E8D0A143870E1D3A74E8D0A143870E1D3A74E8D0A143870E1D
	3A74E8D0B7D0D76F521D3979E5EF3C47D7BD0B3D62794973EFC9D7FB54461F55
	772EFF791FF8E3B7B7C32F1F0554C23FBBEE9EAB4EBFA2D3CDE9379CD3AD5E2C
	19A143870E1D3A74E8D0A143870E1D3A74E8D0A143870E1D3A74E8D0A143870E
	1D3A74E8A7A38774330C5D4E1A39D0A14317E8D0053A74810E5DA043872ED0A1
	0B74E8021DBA4444C40B0000FFFF030053471A8AC341B3360000000049454E44
	AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="12" length_in_bytes="3218" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000005D0000
	00620806000000325DDFBB000000097048597300000EC300000EC301C76FA864
	00000A4F6943435050686F746F73686F70204943432070726F66696C65000078
	DA9D53675453E9163DF7DEF4424B8880944B6F5215082052428B801491262A21
	09104A8821A1D91551C1114545041BC8A088038E8E808C15512C0C8A0AD807E4
	21A28E83A3888ACAFBE17BA36BD6BCF7E6CDFEB5D73EE7ACF39DB3CF07C0080C
	9648335135800CA9421E11E083C7C4C6E1E42E40810A2470001008B3642173FD
	230100F87E3C3C2B22C007BE000178D30B0800C04D9BC0301C87FF0FEA42995C
	01808401C07491384B08801400407A8E42A600404601809D98265300A0040060
	CB6362E300502D0060277FE6D300809DF8997B01005B94211501A09100201365
	884400683B00ACCF568A450058300014664BC43900D82D00304957664800B0B7
	00C0CE100BB200080C00305188852900047B0060C8232378008499001446F257
	3CF12BAE10E72A00007899B23CB9243945815B082D710757572E1E28CE49172B
	14366102619A402EC27999193281340FE0F3CC0000A0911511E083F3FD78CE0E
	AECECE368EB60E5F2DEABF06FF226262E3FEE5CFAB70400000E1747ED1FE2C2F
	B31A803B06806DFEA225EE04685E0BA075F78B66B20F40B500A0E9DA57F370F8
	7E3C3C45A190B9D9D9E5E4E4D84AC4425B61CA577DFE67C25FC057FD6CF97E3C
	FCF7F5E0BEE22481325D814704F8E0C2CCF44CA51CCF92098462DCE68F47FCB7
	0BFFFC1DD322C44962B9582A14E35112718E449A8CF332A52289429229C525D2
	FF64E2DF2CFB033EDF3500B06A3E017B912DA85D6303F64B27105874C0E2F700
	00F2BB6FC1D4280803806883E1CF77FFEF3FFD47A02500806649927100005E44
	242E54CAB33FC708000044A0812AB0411BF4C1182CC0061CC105DCC10BFC6036
	844224C4C24210420A64801C726029AC82422886CDB01D2A602FD4401D34C051
	688693700E2EC255B80E3D700FFA61089EC128BC81090441C808136121DA8801
	628A58238E08179985F821C14804128B2420C9881451224B91354831528A5420
	55481DF23D720239875C46BA913BC8003282FC86BC47319481B2513DD40CB543
	B9A8371A8446A20BD06474319A8F16A09BD072B41A3D8C36A1E7D0AB680FDA8F
	3E43C730C0E8180733C46C302EC6C342B1382C099363CBB122AC0CABC61AB056
	AC03BB89F563CFB17704128145C0093604774220611E4148584C584ED848A820
	1C243411DA093709038451C2272293A84BB426BA11F9C4186232318758482C23
	D6128F132F107B8843C437241289433227B9900249B1A454D212D246D26E5223
	E92CA99B34481A2393C9DA646BB20739942C202BC885E49DE4C3E433E41BE421
	F25B0A9D624071A4F853E22852CA6A4A19E510E534E5066598324155A39A52DD
	A8A15411358F5A42ADA1B652AF5187A81334759A39CD8316494BA5ADA295D31A
	681768F769AFE874BA11DD951E4E97D057D2CBE947E897E803F4770C0D861583
	C7886728199B18071867197718AF984CA619D38B19C754303731EB98E7990F99
	6F55582AB62A7C1591CA0A954A9526951B2A2F54A9AAA6AADEAA0B55F355CB54
	8FA95E537DAE46553353E3A909D496AB55AA9D50EB531B5367A93BA887AA67A8
	6F543FA47E59FD890659C34CC34F43A451A0B15FE3BCC6200B6319B3782C216B
	0DAB86758135C426B1CDD97C762ABB98FD1DBB8B3DAAA9A13943334A3357B352
	F394663F07E39871F89C744E09E728A797F37E8ADE14EF29E2291BA6344CB931
	655C6BAA96979658AB48AB51AB47EBBD36AEEDA79DA6BD45BB59FB810E41C74A
	275C2747678FCE059DE753D953DDA70AA7164D3D3AF5AE2EAA6BA51BA1BB4477
	BF6EA7EE989EBE5E809E4C6FA7DE79BDE7FA1C7D2FFD54FD6DFAA7F5470C5806
	B30C2406DB0CCE183CC535716F3C1D2FC7DBF151435DC34043A561956197E184
	91B9D13CA3D5468D460F8C69C65CE324E36DC66DC6A326062621264B4DEA4DEE
	9A524DB9A629A63B4C3B4CC7CDCCCDA2CDD699359B3D31D732E79BE79BD79BDF
	B7605A785A2CB6A8B6B86549B2E45AA659EEB6BC6E855A3959A558555A5DB346
	AD9DAD25D6BBADBBA711A7B94E934EAB9ED667C3B0F1B6C9B6A9B719B0E5D806
	DBAEB66DB67D6167621767B7C5AEC3EE93BD937DBA7D8DFD3D070D87D90EAB1D
	5A1D7E73B472143A563ADE9ACE9CEE3F7DC5F496E92F6758CF10CFD833E3B613
	CB29C4699D539BD347671767B97383F3888B894B82CB2E973E2E9B1BC6DDC8BD
	E44A74F5715DE17AD2F59D9BB39BC2EDA8DBAFEE36EE69EE87DC9FCC349F299E
	593373D0C3C843E051E5D13F0B9F95306BDFAC7E4F434F8167B5E7232F632F91
	57ADD7B0B7A577AAF761EF173EF63E729FE33EE33C37DE32DE595FCC37C0B7C8
	B7CB4FC36F9E5F85DF437F23FF64FF7AFFD100A78025016703898141815B02FB
	F87A7C21BF8E3F3ADB65F6B2D9ED418CA0B94115418F82AD82E5C1AD2168C8EC
	90AD21F7E798CE91CE690E85507EE8D6D00761E6618BC37E0C2785878557863F
	8E7088581AD131973577D1DC4373DF44FA449644DE9B67314F39AF2D4A352A3E
	AA2E6A3CDA37BA34BA3FC62E6659CCD5589D58496C4B1C392E2AAE366E6CBEDF
	FCEDF387E29DE20BE37B17982FC85D7079A1CEC2F485A716A92E122C3A96404C
	884E3894F041102AA8168C25F21377258E0A79C21DC267222FD136D188D8435C
	2A1E4EF2482A4D7A92EC91BC357924C533A52CE5B98427A990BC4C0D4CDD9B3A
	9E169A76206D323D3ABD31839291907142AA214D93B667EA67E66676CBAC6585
	B2FEC56E8BB72F1E9507C96BB390AC05592D0AB642A6E8545A28D72A07B26765
	5766BFCD89CA3996AB9E2BCDEDCCB3CADB90379CEF9FFFED12C212E192B6A586
	4B572D1D58E6BDAC6A39B23C7179DB0AE315052B865606AC3CB88AB62A6DD54F
	ABED5797AE7EBD267A4D6B815EC1CA82C1B5016BEB0B550AE5857DEBDCD7ED5D
	4F582F59DFB561FA869D1B3E15898AAE14DB1797157FD828DC78E51B876FCABF
	99DC94B4A9ABC4B964CF66D266E9E6DE2D9E5B0E96AA97E6970E6E0DD9DAB40D
	DF56B4EDF5F645DB2F97CD28DBBB83B643B9A3BF3CB8BC65A7C9CECD3B3F54A4
	54F454FA5436EED2DDB561D7F86ED1EE1B7BBCF634ECD5DB5BBCF7FD3EC9BEDB
	5501554DD566D565FB49FBB3F73FAE89AAE9F896FB6D5DAD4E6D71EDC703D203
	FD07230EB6D7B9D4D51DD23D54528FD62BEB470EC71FBEFE9DEF772D0D360D55
	8D9CC6E223704479E4E9F709DFF71E0D3ADA768C7BACE107D31F761D671D2F6A
	429AF29A469B539AFB5B625BBA4FCC3ED1D6EADE7AFC47DB1F0F9C343C59794A
	F354C969DAE982D39367F2CF8C9D959D7D7E2EF9DC60DBA2B67BE763CEDF6A0F
	6FEFBA1074E1D245FF8BE73BBC3BCE5CF2B874F2B2DBE51357B8579AAF3A5F6D
	EA74EA3CFE93D34FC7BB9CBB9AAEB95C6BB9EE7ABDB57B66F7E91B9E37CEDDF4
	BD79F116FFD6D59E393DDDBDF37A6FF7C5F7F5DF16DD7E7227FDCECBBBD97727
	EEADBC4FBC5FF440ED41D943DD87D53F5BFEDCD8EFDC7F6AC077A0F3D1DC47F7
	068583CFFE91F58F0F43058F998FCB860D86EB9E383E3939E23F72FDE9FCA743
	CF64CF269E17FEA2FECBAE17162F7EF8D5EBD7CED198D1A197F29793BF6D7CA5
	FDEAC0EB19AFDBC6C2C61EBEC97833315EF456FBEDC177DC771DEFA3DF0F4FE4
	7C207F28FF68F9B1F553D0A7FB93199393FF040398F3FC63332DDB0000002063
	48524D00007A25000080830000F9FF000080E9000075300000EA6000003A9800
	00176F925FC546000001B34944415478DAECDD41928320100040E6FF8F662F6B
	55CCB286588220CD250793E8B42319282591734E33B688C839E798E5985EB7C5
	ACE82326414A291DA16FDB43A65F075EFD7E992ED3F5E9DAF509101159A6DF71
	ECD065FAA94A61B68C9F32D35FE14700D7A7CF70EC2925E5CB1DE8CAC6AE5728
	74E8ABA0E79CB71F25221DC077732FE0FB80FFA9D3C1B7072F0E8EC0B705FF77
	447A34297F744222E2B17867E32E0DE0BE1A917EBA0A4A67F50923D2ABE39E12
	BDF7DCCBF2E877CC32CA74DD0BF4A5D03B977DD0A143870E1D3A74E8D0A14387
	0E1D3A74E8D0A143870E1D3A74E8D0A143870E1D3A74E8D0A143FF84BE5BBDE1
	8B9DCFFC9C67EBB8ABD053FA5DA7A472E79FD63E9905BD55DCDBD375DB17EF5E
	4B1F387373FC4CF857C75D7295E97764BA3E7DC03E5DF5A264840E1D3A74E8D0
	A143870E1D3A74E8D0A143870E1D3A74E8D0A1431F1BDD223BD02D9C06BD31BC
	2502752FF7A03FB50D8BBE6A830E1D3A74E8D0A14387AE4EAFACD34B4F5D94EE
	5B3722ED10F7FBB485B997C6719726E8CC32768A5BF7021DFA34E89D4BC2B5FB
	F425AB978A7AF691995E1377933A7DC04B7ECE3FF636AC87BE44A6FF0C00FC51
	47AD437294F10000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="13" length_in_bytes="3165" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000005D0000
	00620806000000325DDFBB000000097048597300000EC300000EC301C76FA864
	00000A4F6943435050686F746F73686F70204943432070726F66696C65000078
	DA9D53675453E9163DF7DEF4424B8880944B6F5215082052428B801491262A21
	09104A8821A1D91551C1114545041BC8A088038E8E808C15512C0C8A0AD807E4
	21A28E83A3888ACAFBE17BA36BD6BCF7E6CDFEB5D73EE7ACF39DB3CF07C0080C
	9648335135800CA9421E11E083C7C4C6E1E42E40810A2470001008B3642173FD
	230100F87E3C3C2B22C007BE000178D30B0800C04D9BC0301C87FF0FEA42995C
	01808401C07491384B08801400407A8E42A600404601809D98265300A0040060
	CB6362E300502D0060277FE6D300809DF8997B01005B94211501A09100201365
	884400683B00ACCF568A450058300014664BC43900D82D00304957664800B0B7
	00C0CE100BB200080C00305188852900047B0060C8232378008499001446F257
	3CF12BAE10E72A00007899B23CB9243945815B082D710757572E1E28CE49172B
	14366102619A402EC27999193281340FE0F3CC0000A0911511E083F3FD78CE0E
	AECECE368EB60E5F2DEABF06FF226262E3FEE5CFAB70400000E1747ED1FE2C2F
	B31A803B06806DFEA225EE04685E0BA075F78B66B20F40B500A0E9DA57F370F8
	7E3C3C45A190B9D9D9E5E4E4D84AC4425B61CA577DFE67C25FC057FD6CF97E3C
	FCF7F5E0BEE22481325D814704F8E0C2CCF44CA51CCF92098462DCE68F47FCB7
	0BFFFC1DD322C44962B9582A14E35112718E449A8CF332A52289429229C525D2
	FF64E2DF2CFB033EDF3500B06A3E017B912DA85D6303F64B27105874C0E2F700
	00F2BB6FC1D4280803806883E1CF77FFEF3FFD47A02500806649927100005E44
	242E54CAB33FC708000044A0812AB0411BF4C1182CC0061CC105DCC10BFC6036
	844224C4C24210420A64801C726029AC82422886CDB01D2A602FD4401D34C051
	688693700E2EC255B80E3D700FFA61089EC128BC81090441C808136121DA8801
	628A58238E08179985F821C14804128B2420C9881451224B91354831528A5420
	55481DF23D720239875C46BA913BC8003282FC86BC47319481B2513DD40CB543
	B9A8371A8446A20BD06474319A8F16A09BD072B41A3D8C36A1E7D0AB680FDA8F
	3E43C730C0E8180733C46C302EC6C342B1382C099363CBB122AC0CABC61AB056
	AC03BB89F563CFB17704128145C0093604774220611E4148584C584ED848A820
	1C243411DA093709038451C2272293A84BB426BA11F9C4186232318758482C23
	D6128F132F107B8843C437241289433227B9900249B1A454D212D246D26E5223
	E92CA99B34481A2393C9DA646BB20739942C202BC885E49DE4C3E433E41BE421
	F25B0A9D624071A4F853E22852CA6A4A19E510E534E5066598324155A39A52DD
	A8A15411358F5A42ADA1B652AF5187A81334759A39CD8316494BA5ADA295D31A
	681768F769AFE874BA11DD951E4E97D057D2CBE947E897E803F4770C0D861583
	C7886728199B18071867197718AF984CA619D38B19C754303731EB98E7990F99
	6F55582AB62A7C1591CA0A954A9526951B2A2F54A9AAA6AADEAA0B55F355CB54
	8FA95E537DAE46553353E3A909D496AB55AA9D50EB531B5367A93BA887AA67A8
	6F543FA47E59FD890659C34CC34F43A451A0B15FE3BCC6200B6319B3782C216B
	0DAB86758135C426B1CDD97C762ABB98FD1DBB8B3DAAA9A13943334A3357B352
	F394663F07E39871F89C744E09E728A797F37E8ADE14EF29E2291BA6344CB931
	655C6BAA96979658AB48AB51AB47EBBD36AEEDA79DA6BD45BB59FB810E41C74A
	275C2747678FCE059DE753D953DDA70AA7164D3D3AF5AE2EAA6BA51BA1BB4477
	BF6EA7EE989EBE5E809E4C6FA7DE79BDE7FA1C7D2FFD54FD6DFAA7F5470C5806
	B30C2406DB0CCE183CC535716F3C1D2FC7DBF151435DC34043A561956197E184
	91B9D13CA3D5468D460F8C69C65CE324E36DC66DC6A326062621264B4DEA4DEE
	9A524DB9A629A63B4C3B4CC7CDCCCDA2CDD699359B3D31D732E79BE79BD79BDF
	B7605A785A2CB6A8B6B86549B2E45AA659EEB6BC6E855A3959A558555A5DB346
	AD9DAD25D6BBADBBA711A7B94E934EAB9ED667C3B0F1B6C9B6A9B719B0E5D806
	DBAEB66DB67D6167621767B7C5AEC3EE93BD937DBA7D8DFD3D070D87D90EAB1D
	5A1D7E73B472143A563ADE9ACE9CEE3F7DC5F496E92F6758CF10CFD833E3B613
	CB29C4699D539BD347671767B97383F3888B894B82CB2E973E2E9B1BC6DDC8BD
	E44A74F5715DE17AD2F59D9BB39BC2EDA8DBAFEE36EE69EE87DC9FCC349F299E
	593373D0C3C843E051E5D13F0B9F95306BDFAC7E4F434F8167B5E7232F632F91
	57ADD7B0B7A577AAF761EF173EF63E729FE33EE33C37DE32DE595FCC37C0B7C8
	B7CB4FC36F9E5F85DF437F23FF64FF7AFFD100A78025016703898141815B02FB
	F87A7C21BF8E3F3ADB65F6B2D9ED418CA0B94115418F82AD82E5C1AD2168C8EC
	90AD21F7E798CE91CE690E85507EE8D6D00761E6618BC37E0C2785878557863F
	8E7088581AD131973577D1DC4373DF44FA449644DE9B67314F39AF2D4A352A3E
	AA2E6A3CDA37BA34BA3FC62E6659CCD5589D58496C4B1C392E2AAE366E6CBEDF
	FCEDF387E29DE20BE37B17982FC85D7079A1CEC2F485A716A92E122C3A96404C
	884E3894F041102AA8168C25F21377258E0A79C21DC267222FD136D188D8435C
	2A1E4EF2482A4D7A92EC91BC357924C533A52CE5B98427A990BC4C0D4CDD9B3A
	9E169A76206D323D3ABD31839291907142AA214D93B667EA67E66676CBAC6585
	B2FEC56E8BB72F1E9507C96BB390AC05592D0AB642A6E8545A28D72A07B26765
	5766BFCD89CA3996AB9E2BCDEDCCB3CADB90379CEF9FFFED12C212E192B6A586
	4B572D1D58E6BDAC6A39B23C7179DB0AE315052B865606AC3CB88AB62A6DD54F
	ABED5797AE7EBD267A4D6B815EC1CA82C1B5016BEB0B550AE5857DEBDCD7ED5D
	4F582F59DFB561FA869D1B3E15898AAE14DB1797157FD828DC78E51B876FCABF
	99DC94B4A9ABC4B964CF66D266E9E6DE2D9E5B0E96AA97E6970E6E0DD9DAB40D
	DF56B4EDF5F645DB2F97CD28DBBB83B643B9A3BF3CB8BC65A7C9CECD3B3F54A4
	54F454FA5436EED2DDB561D7F86ED1EE1B7BBCF634ECD5DB5BBCF7FD3EC9BEDB
	5501554DD566D565FB49FBB3F73FAE89AAE9F896FB6D5DAD4E6D71EDC703D203
	FD07230EB6D7B9D4D51DD23D54528FD62BEB470EC71FBEFE9DEF772D0D360D55
	8D9CC6E223704479E4E9F709DFF71E0D3ADA768C7BACE107D31F761D671D2F6A
	429AF29A469B539AFB5B625BBA4FCC3ED1D6EADE7AFC47DB1F0F9C343C59794A
	F354C969DAE982D39367F2CF8C9D959D7D7E2EF9DC60DBA2B67BE763CEDF6A0F
	6FEFBA1074E1D245FF8BE73BBC3BCE5CF2B874F2B2DBE51357B8579AAF3A5F6D
	EA74EA3CFE93D34FC7BB9CBB9AAEB95C6BB9EE7ABDB57B66F7E91B9E37CEDDF4
	BD79F116FFD6D59E393DDDBDF37A6FF7C5F7F5DF16DD7E7227FDCECBBBD97727
	EEADBC4FBC5FF440ED41D943DD87D53F5BFEDCD8EFDC7F6AC077A0F3D1DC47F7
	068583CFFE91F58F0F43058F998FCB860D86EB9E383E3939E23F72FDE9FCA743
	CF64CF269E17FEA2FECBAE17162F7EF8D5EBD7CED198D1A197F29793BF6D7CA5
	FDEAC0EB19AFDBC6C2C61EBEC97833315EF456FBEDC177DC771DEFA3DF0F4FE4
	7C207F28FF68F9B1F553D0A7FB93199393FF040398F3FC63332DDB0000002063
	48524D00007A25000080830000F9FF000080E9000075300000EA6000003A9800
	00176F925FC5460000017E4944415478DAECDCCBB282300C00D0E4FF3F3A7723
	3332B70232E55139D9B840A53DA435ED0859553162646655558ED2A6F763392A
	FA1D93202262097D3A9E32BD1FF8E6F7CB74996E4E17FD1320334BA65FD176E8
	327D57A5305AC60F99E9EFF0770037A78FD0F68850BE5C81AE6C3C75844287FE
	14F4AA9A7E94889C003EDB7B017F0EF8BF3A1DFCF1E0CDC511F863C13FAE4897
	36E5972E4866FE2CDEDE7EB716705FAD48D74641EBAAFEC28AB477BF87443F7B
	EFE5F1E857EC32CA74D30BF447A19F5CF641870E1D3A74E8D0A143870E1D3A74
	E8D0A143870E1D3A74E8D0A143870E1D3A74E8D0A143870E7D0D7DF6F4862F4E
	3EF27D9E47F77B137AC4EB39251B4FBEF6EC9351D08FEAF77477DDF4C5B3D7D6
	07F6FC397E24FCDEFD6EB9CAF42B32DD9C7EC3395DF5A264840E1D3A74E8D0A1
	43870E1D3A74E8D0A143870E1D3A74E8D0A143870E1D3A74E8D0A177470FD18C
	C3D045A791031D3A74011DBA800E5D40872EA043872EA04317D0A10BE8D04544
	44FC010000FFFF0300185C329A2E35A09F0000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="14" length_in_bytes="3229" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000005D0000
	00620806000000325DDFBB000000097048597300000EC300000EC301C76FA864
	00000A4F6943435050686F746F73686F70204943432070726F66696C65000078
	DA9D53675453E9163DF7DEF4424B8880944B6F5215082052428B801491262A21
	09104A8821A1D91551C1114545041BC8A088038E8E808C15512C0C8A0AD807E4
	21A28E83A3888ACAFBE17BA36BD6BCF7E6CDFEB5D73EE7ACF39DB3CF07C0080C
	9648335135800CA9421E11E083C7C4C6E1E42E40810A2470001008B3642173FD
	230100F87E3C3C2B22C007BE000178D30B0800C04D9BC0301C87FF0FEA42995C
	01808401C07491384B08801400407A8E42A600404601809D98265300A0040060
	CB6362E300502D0060277FE6D300809DF8997B01005B94211501A09100201365
	884400683B00ACCF568A450058300014664BC43900D82D00304957664800B0B7
	00C0CE100BB200080C00305188852900047B0060C8232378008499001446F257
	3CF12BAE10E72A00007899B23CB9243945815B082D710757572E1E28CE49172B
	14366102619A402EC27999193281340FE0F3CC0000A0911511E083F3FD78CE0E
	AECECE368EB60E5F2DEABF06FF226262E3FEE5CFAB70400000E1747ED1FE2C2F
	B31A803B06806DFEA225EE04685E0BA075F78B66B20F40B500A0E9DA57F370F8
	7E3C3C45A190B9D9D9E5E4E4D84AC4425B61CA577DFE67C25FC057FD6CF97E3C
	FCF7F5E0BEE22481325D814704F8E0C2CCF44CA51CCF92098462DCE68F47FCB7
	0BFFFC1DD322C44962B9582A14E35112718E449A8CF332A52289429229C525D2
	FF64E2DF2CFB033EDF3500B06A3E017B912DA85D6303F64B27105874C0E2F700
	00F2BB6FC1D4280803806883E1CF77FFEF3FFD47A02500806649927100005E44
	242E54CAB33FC708000044A0812AB0411BF4C1182CC0061CC105DCC10BFC6036
	844224C4C24210420A64801C726029AC82422886CDB01D2A602FD4401D34C051
	688693700E2EC255B80E3D700FFA61089EC128BC81090441C808136121DA8801
	628A58238E08179985F821C14804128B2420C9881451224B91354831528A5420
	55481DF23D720239875C46BA913BC8003282FC86BC47319481B2513DD40CB543
	B9A8371A8446A20BD06474319A8F16A09BD072B41A3D8C36A1E7D0AB680FDA8F
	3E43C730C0E8180733C46C302EC6C342B1382C099363CBB122AC0CABC61AB056
	AC03BB89F563CFB17704128145C0093604774220611E4148584C584ED848A820
	1C243411DA093709038451C2272293A84BB426BA11F9C4186232318758482C23
	D6128F132F107B8843C437241289433227B9900249B1A454D212D246D26E5223
	E92CA99B34481A2393C9DA646BB20739942C202BC885E49DE4C3E433E41BE421
	F25B0A9D624071A4F853E22852CA6A4A19E510E534E5066598324155A39A52DD
	A8A15411358F5A42ADA1B652AF5187A81334759A39CD8316494BA5ADA295D31A
	681768F769AFE874BA11DD951E4E97D057D2CBE947E897E803F4770C0D861583
	C7886728199B18071867197718AF984CA619D38B19C754303731EB98E7990F99
	6F55582AB62A7C1591CA0A954A9526951B2A2F54A9AAA6AADEAA0B55F355CB54
	8FA95E537DAE46553353E3A909D496AB55AA9D50EB531B5367A93BA887AA67A8
	6F543FA47E59FD890659C34CC34F43A451A0B15FE3BCC6200B6319B3782C216B
	0DAB86758135C426B1CDD97C762ABB98FD1DBB8B3DAAA9A13943334A3357B352
	F394663F07E39871F89C744E09E728A797F37E8ADE14EF29E2291BA6344CB931
	655C6BAA96979658AB48AB51AB47EBBD36AEEDA79DA6BD45BB59FB810E41C74A
	275C2747678FCE059DE753D953DDA70AA7164D3D3AF5AE2EAA6BA51BA1BB4477
	BF6EA7EE989EBE5E809E4C6FA7DE79BDE7FA1C7D2FFD54FD6DFAA7F5470C5806
	B30C2406DB0CCE183CC535716F3C1D2FC7DBF151435DC34043A561956197E184
	91B9D13CA3D5468D460F8C69C65CE324E36DC66DC6A326062621264B4DEA4DEE
	9A524DB9A629A63B4C3B4CC7CDCCCDA2CDD699359B3D31D732E79BE79BD79BDF
	B7605A785A2CB6A8B6B86549B2E45AA659EEB6BC6E855A3959A558555A5DB346
	AD9DAD25D6BBADBBA711A7B94E934EAB9ED667C3B0F1B6C9B6A9B719B0E5D806
	DBAEB66DB67D6167621767B7C5AEC3EE93BD937DBA7D8DFD3D070D87D90EAB1D
	5A1D7E73B472143A563ADE9ACE9CEE3F7DC5F496E92F6758CF10CFD833E3B613
	CB29C4699D539BD347671767B97383F3888B894B82CB2E973E2E9B1BC6DDC8BD
	E44A74F5715DE17AD2F59D9BB39BC2EDA8DBAFEE36EE69EE87DC9FCC349F299E
	593373D0C3C843E051E5D13F0B9F95306BDFAC7E4F434F8167B5E7232F632F91
	57ADD7B0B7A577AAF761EF173EF63E729FE33EE33C37DE32DE595FCC37C0B7C8
	B7CB4FC36F9E5F85DF437F23FF64FF7AFFD100A78025016703898141815B02FB
	F87A7C21BF8E3F3ADB65F6B2D9ED418CA0B94115418F82AD82E5C1AD2168C8EC
	90AD21F7E798CE91CE690E85507EE8D6D00761E6618BC37E0C2785878557863F
	8E7088581AD131973577D1DC4373DF44FA449644DE9B67314F39AF2D4A352A3E
	AA2E6A3CDA37BA34BA3FC62E6659CCD5589D58496C4B1C392E2AAE366E6CBEDF
	FCEDF387E29DE20BE37B17982FC85D7079A1CEC2F485A716A92E122C3A96404C
	884E3894F041102AA8168C25F21377258E0A79C21DC267222FD136D188D8435C
	2A1E4EF2482A4D7A92EC91BC357924C533A52CE5B98427A990BC4C0D4CDD9B3A
	9E169A76206D323D3ABD31839291907142AA214D93B667EA67E66676CBAC6585
	B2FEC56E8BB72F1E9507C96BB390AC05592D0AB642A6E8545A28D72A07B26765
	5766BFCD89CA3996AB9E2BCDEDCCB3CADB90379CEF9FFFED12C212E192B6A586
	4B572D1D58E6BDAC6A39B23C7179DB0AE315052B865606AC3CB88AB62A6DD54F
	ABED5797AE7EBD267A4D6B815EC1CA82C1B5016BEB0B550AE5857DEBDCD7ED5D
	4F582F59DFB561FA869D1B3E15898AAE14DB1797157FD828DC78E51B876FCABF
	99DC94B4A9ABC4B964CF66D266E9E6DE2D9E5B0E96AA97E6970E6E0DD9DAB40D
	DF56B4EDF5F645DB2F97CD28DBBB83B643B9A3BF3CB8BC65A7C9CECD3B3F54A4
	54F454FA5436EED2DDB561D7F86ED1EE1B7BBCF634ECD5DB5BBCF7FD3EC9BEDB
	5501554DD566D565FB49FBB3F73FAE89AAE9F896FB6D5DAD4E6D71EDC703D203
	FD07230EB6D7B9D4D51DD23D54528FD62BEB470EC71FBEFE9DEF772D0D360D55
	8D9CC6E223704479E4E9F709DFF71E0D3ADA768C7BACE107D31F761D671D2F6A
	429AF29A469B539AFB5B625BBA4FCC3ED1D6EADE7AFC47DB1F0F9C343C59794A
	F354C969DAE982D39367F2CF8C9D959D7D7E2EF9DC60DBA2B67BE763CEDF6A0F
	6FEFBA1074E1D245FF8BE73BBC3BCE5CF2B874F2B2DBE51357B8579AAF3A5F6D
	EA74EA3CFE93D34FC7BB9CBB9AAEB95C6BB9EE7ABDB57B66F7E91B9E37CEDDF4
	BD79F116FFD6D59E393DDDBDF37A6FF7C5F7F5DF16DD7E7227FDCECBBBD97727
	EEADBC4FBC5FF440ED41D943DD87D53F5BFEDCD8EFDC7F6AC077A0F3D1DC47F7
	068583CFFE91F58F0F43058F998FCB860D86EB9E383E3939E23F72FDE9FCA743
	CF64CF269E17FEA2FECBAE17162F7EF8D5EBD7CED198D1A197F29793BF6D7CA5
	FDEAC0EB19AFDBC6C2C61EBEC97833315EF456FBEDC177DC771DEFA3DF0F4FE4
	7C207F28FF68F9B1F553D0A7FB93199393FF040398F3FC63332DDB0000002063
	48524D00007A25000080830000F9FF000080E9000075300000EA6000003A9800
	00176F925FC546000001BE4944415478DAECDDD1B28220140550CEFF7F34F7A5
	666AC62B6088A08B971EAC84E5EE844E61E49CD38A2D2272CE3956E9D3E7B658
	157DC610A494D21EFA7B7B487A3FF0EAE74BBAA4ABE95AFF00444496F42BFA0E
	5DD20FCD14564BFC9249FF849F015C4D5FA1EF2925D3972BD04D1B877E42A1F7
	82AC356C468F2897D03B1EC09EE33E84BEF7DC96237EA7249F9E74E8D0A1436F
	406FE94069E7776D3DC7DD7446FA3A0B2C1DF11894BE3C785FDDC6BD24FAE86B
	2F8F47BFE22AA3A42B2FD01F853E78CA081D3A74E8D0A1435F16BDE21AC52DD1
	7B8E5BD29517E8D0A143870E1D3A74E8D0A143870E1D3A74E8D0A143870E1D3A
	F44AF4AFD51B1A76BEF2FF3CCF1E77157A4AAF754A2A775E5AFB6415F4B3C6FD
	FE27C6FB8DBF1EB75E70E4C7F12BE1F71EF796ABA45F9174357DC29A6EF662CA
	081D3A74E8D0A143870E1D3A74E8D0A143870E1D3A74E8D0A143873E37BA4576
	A05B380DFAC9F09608545E7E476FBD279B5657F28AE8EE2270E893017D103274
	499774E8922EE9D0A7483AC2C1F3F4C9D3E426B0A3C16B127555004A81701358
	495FB3BCDC3EE96ABA26E9B3F5E1BFED92DEE14B7D13766F9BA4F79B45D59E28
	49BAA43FA3A6FF0D004F07F5A4517951A50000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="15" length_in_bytes="3172" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000005D0000
	00620806000000325DDFBB000000097048597300000EC300000EC301C76FA864
	00000A4F6943435050686F746F73686F70204943432070726F66696C65000078
	DA9D53675453E9163DF7DEF4424B8880944B6F5215082052428B801491262A21
	09104A8821A1D91551C1114545041BC8A088038E8E808C15512C0C8A0AD807E4
	21A28E83A3888ACAFBE17BA36BD6BCF7E6CDFEB5D73EE7ACF39DB3CF07C0080C
	9648335135800CA9421E11E083C7C4C6E1E42E40810A2470001008B3642173FD
	230100F87E3C3C2B22C007BE000178D30B0800C04D9BC0301C87FF0FEA42995C
	01808401C07491384B08801400407A8E42A600404601809D98265300A0040060
	CB6362E300502D0060277FE6D300809DF8997B01005B94211501A09100201365
	884400683B00ACCF568A450058300014664BC43900D82D00304957664800B0B7
	00C0CE100BB200080C00305188852900047B0060C8232378008499001446F257
	3CF12BAE10E72A00007899B23CB9243945815B082D710757572E1E28CE49172B
	14366102619A402EC27999193281340FE0F3CC0000A0911511E083F3FD78CE0E
	AECECE368EB60E5F2DEABF06FF226262E3FEE5CFAB70400000E1747ED1FE2C2F
	B31A803B06806DFEA225EE04685E0BA075F78B66B20F40B500A0E9DA57F370F8
	7E3C3C45A190B9D9D9E5E4E4D84AC4425B61CA577DFE67C25FC057FD6CF97E3C
	FCF7F5E0BEE22481325D814704F8E0C2CCF44CA51CCF92098462DCE68F47FCB7
	0BFFFC1DD322C44962B9582A14E35112718E449A8CF332A52289429229C525D2
	FF64E2DF2CFB033EDF3500B06A3E017B912DA85D6303F64B27105874C0E2F700
	00F2BB6FC1D4280803806883E1CF77FFEF3FFD47A02500806649927100005E44
	242E54CAB33FC708000044A0812AB0411BF4C1182CC0061CC105DCC10BFC6036
	844224C4C24210420A64801C726029AC82422886CDB01D2A602FD4401D34C051
	688693700E2EC255B80E3D700FFA61089EC128BC81090441C808136121DA8801
	628A58238E08179985F821C14804128B2420C9881451224B91354831528A5420
	55481DF23D720239875C46BA913BC8003282FC86BC47319481B2513DD40CB543
	B9A8371A8446A20BD06474319A8F16A09BD072B41A3D8C36A1E7D0AB680FDA8F
	3E43C730C0E8180733C46C302EC6C342B1382C099363CBB122AC0CABC61AB056
	AC03BB89F563CFB17704128145C0093604774220611E4148584C584ED848A820
	1C243411DA093709038451C2272293A84BB426BA11F9C4186232318758482C23
	D6128F132F107B8843C437241289433227B9900249B1A454D212D246D26E5223
	E92CA99B34481A2393C9DA646BB20739942C202BC885E49DE4C3E433E41BE421
	F25B0A9D624071A4F853E22852CA6A4A19E510E534E5066598324155A39A52DD
	A8A15411358F5A42ADA1B652AF5187A81334759A39CD8316494BA5ADA295D31A
	681768F769AFE874BA11DD951E4E97D057D2CBE947E897E803F4770C0D861583
	C7886728199B18071867197718AF984CA619D38B19C754303731EB98E7990F99
	6F55582AB62A7C1591CA0A954A9526951B2A2F54A9AAA6AADEAA0B55F355CB54
	8FA95E537DAE46553353E3A909D496AB55AA9D50EB531B5367A93BA887AA67A8
	6F543FA47E59FD890659C34CC34F43A451A0B15FE3BCC6200B6319B3782C216B
	0DAB86758135C426B1CDD97C762ABB98FD1DBB8B3DAAA9A13943334A3357B352
	F394663F07E39871F89C744E09E728A797F37E8ADE14EF29E2291BA6344CB931
	655C6BAA96979658AB48AB51AB47EBBD36AEEDA79DA6BD45BB59FB810E41C74A
	275C2747678FCE059DE753D953DDA70AA7164D3D3AF5AE2EAA6BA51BA1BB4477
	BF6EA7EE989EBE5E809E4C6FA7DE79BDE7FA1C7D2FFD54FD6DFAA7F5470C5806
	B30C2406DB0CCE183CC535716F3C1D2FC7DBF151435DC34043A561956197E184
	91B9D13CA3D5468D460F8C69C65CE324E36DC66DC6A326062621264B4DEA4DEE
	9A524DB9A629A63B4C3B4CC7CDCCCDA2CDD699359B3D31D732E79BE79BD79BDF
	B7605A785A2CB6A8B6B86549B2E45AA659EEB6BC6E855A3959A558555A5DB346
	AD9DAD25D6BBADBBA711A7B94E934EAB9ED667C3B0F1B6C9B6A9B719B0E5D806
	DBAEB66DB67D6167621767B7C5AEC3EE93BD937DBA7D8DFD3D070D87D90EAB1D
	5A1D7E73B472143A563ADE9ACE9CEE3F7DC5F496E92F6758CF10CFD833E3B613
	CB29C4699D539BD347671767B97383F3888B894B82CB2E973E2E9B1BC6DDC8BD
	E44A74F5715DE17AD2F59D9BB39BC2EDA8DBAFEE36EE69EE87DC9FCC349F299E
	593373D0C3C843E051E5D13F0B9F95306BDFAC7E4F434F8167B5E7232F632F91
	57ADD7B0B7A577AAF761EF173EF63E729FE33EE33C37DE32DE595FCC37C0B7C8
	B7CB4FC36F9E5F85DF437F23FF64FF7AFFD100A78025016703898141815B02FB
	F87A7C21BF8E3F3ADB65F6B2D9ED418CA0B94115418F82AD82E5C1AD2168C8EC
	90AD21F7E798CE91CE690E85507EE8D6D00761E6618BC37E0C2785878557863F
	8E7088581AD131973577D1DC4373DF44FA449644DE9B67314F39AF2D4A352A3E
	AA2E6A3CDA37BA34BA3FC62E6659CCD5589D58496C4B1C392E2AAE366E6CBEDF
	FCEDF387E29DE20BE37B17982FC85D7079A1CEC2F485A716A92E122C3A96404C
	884E3894F041102AA8168C25F21377258E0A79C21DC267222FD136D188D8435C
	2A1E4EF2482A4D7A92EC91BC357924C533A52CE5B98427A990BC4C0D4CDD9B3A
	9E169A76206D323D3ABD31839291907142AA214D93B667EA67E66676CBAC6585
	B2FEC56E8BB72F1E9507C96BB390AC05592D0AB642A6E8545A28D72A07B26765
	5766BFCD89CA3996AB9E2BCDEDCCB3CADB90379CEF9FFFED12C212E192B6A586
	4B572D1D58E6BDAC6A39B23C7179DB0AE315052B865606AC3CB88AB62A6DD54F
	ABED5797AE7EBD267A4D6B815EC1CA82C1B5016BEB0B550AE5857DEBDCD7ED5D
	4F582F59DFB561FA869D1B3E15898AAE14DB1797157FD828DC78E51B876FCABF
	99DC94B4A9ABC4B964CF66D266E9E6DE2D9E5B0E96AA97E6970E6E0DD9DAB40D
	DF56B4EDF5F645DB2F97CD28DBBB83B643B9A3BF3CB8BC65A7C9CECD3B3F54A4
	54F454FA5436EED2DDB561D7F86ED1EE1B7BBCF634ECD5DB5BBCF7FD3EC9BEDB
	5501554DD566D565FB49FBB3F73FAE89AAE9F896FB6D5DAD4E6D71EDC703D203
	FD07230EB6D7B9D4D51DD23D54528FD62BEB470EC71FBEFE9DEF772D0D360D55
	8D9CC6E223704479E4E9F709DFF71E0D3ADA768C7BACE107D31F761D671D2F6A
	429AF29A469B539AFB5B625BBA4FCC3ED1D6EADE7AFC47DB1F0F9C343C59794A
	F354C969DAE982D39367F2CF8C9D959D7D7E2EF9DC60DBA2B67BE763CEDF6A0F
	6FEFBA1074E1D245FF8BE73BBC3BCE5CF2B874F2B2DBE51357B8579AAF3A5F6D
	EA74EA3CFE93D34FC7BB9CBB9AAEB95C6BB9EE7ABDB57B66F7E91B9E37CEDDF4
	BD79F116FFD6D59E393DDDBDF37A6FF7C5F7F5DF16DD7E7227FDCECBBBD97727
	EEADBC4FBC5FF440ED41D943DD87D53F5BFEDCD8EFDC7F6AC077A0F3D1DC47F7
	068583CFFE91F58F0F43058F998FCB860D86EB9E383E3939E23F72FDE9FCA743
	CF64CF269E17FEA2FECBAE17162F7EF8D5EBD7CED198D1A197F29793BF6D7CA5
	FDEAC0EB19AFDBC6C2C61EBEC97833315EF456FBEDC177DC771DEFA3DF0F4FE4
	7C207F28FF68F9B1F553D0A7FB93199393FF040398F3FC63332DDB0000002063
	48524D00007A25000080830000F9FF000080E9000075300000EA6000003A9800
	00176F925FC546000001854944415478DAECDCCB0E82301005D099FFFFE8BA91
	4413222D298FC1331B17A06D0F97A610215B6B51B132B3B5D6B24A9F3EB76555
	F43B862022E217FAB23D257D1E78F7FE922EE9E674353F0099D924FD8ABE4397
	F45D2B856A892F99F44FF83B809BD32BF43D222C5FAE40B76C3CF50C853E0BB2
	D770183D737B0A7DE2019C39EE5DE8BFF61D39E24F4AF2E149870E1D3AF401F4
	910E6C35FED49A39EEA12BD2F755E0D611CF93D2D74E6E6BDAB84BA29F7DEFE5
	EFD1AFB8CB28E9A617E87F857EF292113A74E8D0A143875E16BDE31EC523D167
	8E5BD24D2FD0A143870E1D3A74E8D0A143870E1D3A74E8D0A143870E1D3A74E8
	9DE85F6F6F1868BCF2739E478FBB0B3DE2FD9E92CEC6B7DE7D5205FDA8712F4F
	622C3FFCF5B9F6853D7F8EAF843F7BDC6BAE927E45D2CDE9379CD3AD5E2C19A1
	43870E1D3A74E8D0A143870E1D3A74E8D0A143870E1D3A74E8D0A143870E1D3A
	74E8D3D143ADD661E86AD299031D3A74051DBA820E5D4187AEA04387AEA04357
	D0A12BE8D0554444BC000000FFFF0300897E47A48D7AA8630000000049454E44
	AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="16" length_in_bytes="3277" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000005D0000
	00620806000000325DDFBB000000097048597300000EC300000EC301C76FA864
	00000A4F6943435050686F746F73686F70204943432070726F66696C65000078
	DA9D53675453E9163DF7DEF4424B8880944B6F5215082052428B801491262A21
	09104A8821A1D91551C1114545041BC8A088038E8E808C15512C0C8A0AD807E4
	21A28E83A3888ACAFBE17BA36BD6BCF7E6CDFEB5D73EE7ACF39DB3CF07C0080C
	9648335135800CA9421E11E083C7C4C6E1E42E40810A2470001008B3642173FD
	230100F87E3C3C2B22C007BE000178D30B0800C04D9BC0301C87FF0FEA42995C
	01808401C07491384B08801400407A8E42A600404601809D98265300A0040060
	CB6362E300502D0060277FE6D300809DF8997B01005B94211501A09100201365
	884400683B00ACCF568A450058300014664BC43900D82D00304957664800B0B7
	00C0CE100BB200080C00305188852900047B0060C8232378008499001446F257
	3CF12BAE10E72A00007899B23CB9243945815B082D710757572E1E28CE49172B
	14366102619A402EC27999193281340FE0F3CC0000A0911511E083F3FD78CE0E
	AECECE368EB60E5F2DEABF06FF226262E3FEE5CFAB70400000E1747ED1FE2C2F
	B31A803B06806DFEA225EE04685E0BA075F78B66B20F40B500A0E9DA57F370F8
	7E3C3C45A190B9D9D9E5E4E4D84AC4425B61CA577DFE67C25FC057FD6CF97E3C
	FCF7F5E0BEE22481325D814704F8E0C2CCF44CA51CCF92098462DCE68F47FCB7
	0BFFFC1DD322C44962B9582A14E35112718E449A8CF332A52289429229C525D2
	FF64E2DF2CFB033EDF3500B06A3E017B912DA85D6303F64B27105874C0E2F700
	00F2BB6FC1D4280803806883E1CF77FFEF3FFD47A02500806649927100005E44
	242E54CAB33FC708000044A0812AB0411BF4C1182CC0061CC105DCC10BFC6036
	844224C4C24210420A64801C726029AC82422886CDB01D2A602FD4401D34C051
	688693700E2EC255B80E3D700FFA61089EC128BC81090441C808136121DA8801
	628A58238E08179985F821C14804128B2420C9881451224B91354831528A5420
	55481DF23D720239875C46BA913BC8003282FC86BC47319481B2513DD40CB543
	B9A8371A8446A20BD06474319A8F16A09BD072B41A3D8C36A1E7D0AB680FDA8F
	3E43C730C0E8180733C46C302EC6C342B1382C099363CBB122AC0CABC61AB056
	AC03BB89F563CFB17704128145C0093604774220611E4148584C584ED848A820
	1C243411DA093709038451C2272293A84BB426BA11F9C4186232318758482C23
	D6128F132F107B8843C437241289433227B9900249B1A454D212D246D26E5223
	E92CA99B34481A2393C9DA646BB20739942C202BC885E49DE4C3E433E41BE421
	F25B0A9D624071A4F853E22852CA6A4A19E510E534E5066598324155A39A52DD
	A8A15411358F5A42ADA1B652AF5187A81334759A39CD8316494BA5ADA295D31A
	681768F769AFE874BA11DD951E4E97D057D2CBE947E897E803F4770C0D861583
	C7886728199B18071867197718AF984CA619D38B19C754303731EB98E7990F99
	6F55582AB62A7C1591CA0A954A9526951B2A2F54A9AAA6AADEAA0B55F355CB54
	8FA95E537DAE46553353E3A909D496AB55AA9D50EB531B5367A93BA887AA67A8
	6F543FA47E59FD890659C34CC34F43A451A0B15FE3BCC6200B6319B3782C216B
	0DAB86758135C426B1CDD97C762ABB98FD1DBB8B3DAAA9A13943334A3357B352
	F394663F07E39871F89C744E09E728A797F37E8ADE14EF29E2291BA6344CB931
	655C6BAA96979658AB48AB51AB47EBBD36AEEDA79DA6BD45BB59FB810E41C74A
	275C2747678FCE059DE753D953DDA70AA7164D3D3AF5AE2EAA6BA51BA1BB4477
	BF6EA7EE989EBE5E809E4C6FA7DE79BDE7FA1C7D2FFD54FD6DFAA7F5470C5806
	B30C2406DB0CCE183CC535716F3C1D2FC7DBF151435DC34043A561956197E184
	91B9D13CA3D5468D460F8C69C65CE324E36DC66DC6A326062621264B4DEA4DEE
	9A524DB9A629A63B4C3B4CC7CDCCCDA2CDD699359B3D31D732E79BE79BD79BDF
	B7605A785A2CB6A8B6B86549B2E45AA659EEB6BC6E855A3959A558555A5DB346
	AD9DAD25D6BBADBBA711A7B94E934EAB9ED667C3B0F1B6C9B6A9B719B0E5D806
	DBAEB66DB67D6167621767B7C5AEC3EE93BD937DBA7D8DFD3D070D87D90EAB1D
	5A1D7E73B472143A563ADE9ACE9CEE3F7DC5F496E92F6758CF10CFD833E3B613
	CB29C4699D539BD347671767B97383F3888B894B82CB2E973E2E9B1BC6DDC8BD
	E44A74F5715DE17AD2F59D9BB39BC2EDA8DBAFEE36EE69EE87DC9FCC349F299E
	593373D0C3C843E051E5D13F0B9F95306BDFAC7E4F434F8167B5E7232F632F91
	57ADD7B0B7A577AAF761EF173EF63E729FE33EE33C37DE32DE595FCC37C0B7C8
	B7CB4FC36F9E5F85DF437F23FF64FF7AFFD100A78025016703898141815B02FB
	F87A7C21BF8E3F3ADB65F6B2D9ED418CA0B94115418F82AD82E5C1AD2168C8EC
	90AD21F7E798CE91CE690E85507EE8D6D00761E6618BC37E0C2785878557863F
	8E7088581AD131973577D1DC4373DF44FA449644DE9B67314F39AF2D4A352A3E
	AA2E6A3CDA37BA34BA3FC62E6659CCD5589D58496C4B1C392E2AAE366E6CBEDF
	FCEDF387E29DE20BE37B17982FC85D7079A1CEC2F485A716A92E122C3A96404C
	884E3894F041102AA8168C25F21377258E0A79C21DC267222FD136D188D8435C
	2A1E4EF2482A4D7A92EC91BC357924C533A52CE5B98427A990BC4C0D4CDD9B3A
	9E169A76206D323D3ABD31839291907142AA214D93B667EA67E66676CBAC6585
	B2FEC56E8BB72F1E9507C96BB390AC05592D0AB642A6E8545A28D72A07B26765
	5766BFCD89CA3996AB9E2BCDEDCCB3CADB90379CEF9FFFED12C212E192B6A586
	4B572D1D58E6BDAC6A39B23C7179DB0AE315052B865606AC3CB88AB62A6DD54F
	ABED5797AE7EBD267A4D6B815EC1CA82C1B5016BEB0B550AE5857DEBDCD7ED5D
	4F582F59DFB561FA869D1B3E15898AAE14DB1797157FD828DC78E51B876FCABF
	99DC94B4A9ABC4B964CF66D266E9E6DE2D9E5B0E96AA97E6970E6E0DD9DAB40D
	DF56B4EDF5F645DB2F97CD28DBBB83B643B9A3BF3CB8BC65A7C9CECD3B3F54A4
	54F454FA5436EED2DDB561D7F86ED1EE1B7BBCF634ECD5DB5BBCF7FD3EC9BEDB
	5501554DD566D565FB49FBB3F73FAE89AAE9F896FB6D5DAD4E6D71EDC703D203
	FD07230EB6D7B9D4D51DD23D54528FD62BEB470EC71FBEFE9DEF772D0D360D55
	8D9CC6E223704479E4E9F709DFF71E0D3ADA768C7BACE107D31F761D671D2F6A
	429AF29A469B539AFB5B625BBA4FCC3ED1D6EADE7AFC47DB1F0F9C343C59794A
	F354C969DAE982D39367F2CF8C9D959D7D7E2EF9DC60DBA2B67BE763CEDF6A0F
	6FEFBA1074E1D245FF8BE73BBC3BCE5CF2B874F2B2DBE51357B8579AAF3A5F6D
	EA74EA3CFE93D34FC7BB9CBB9AAEB95C6BB9EE7ABDB57B66F7E91B9E37CEDDF4
	BD79F116FFD6D59E393DDDBDF37A6FF7C5F7F5DF16DD7E7227FDCECBBBD97727
	EEADBC4FBC5FF440ED41D943DD87D53F5BFEDCD8EFDC7F6AC077A0F3D1DC47F7
	068583CFFE91F58F0F43058F998FCB860D86EB9E383E3939E23F72FDE9FCA743
	CF64CF269E17FEA2FECBAE17162F7EF8D5EBD7CED198D1A197F29793BF6D7CA5
	FDEAC0EB19AFDBC6C2C61EBEC97833315EF456FBEDC177DC771DEFA3DF0F4FE4
	7C207F28FF68F9B1F553D0A7FB93199393FF040398F3FC63332DDB0000002063
	48524D00007A25000080830000F9FF000080E9000075300000EA6000003A9800
	00176F925FC546000001EE4944415478DAECDDDB728320140550CEFF7F347DA9
	53932A414310E2E2A533A1F1B2DC39622E1839E734638B889C738E59B669DD17
	B3A28F188294522AA12FFD21E9EDC0ABFF5FD2255D4DD7DA072022B2A45FB1ED
	D025FDD44861B6C44F99F435FC08E06AFA0CDB9E52327CB902DDB0B1EB2B147A
	2BC85AC397E811FF4BA603F49E5315FABAEFC811BD73D24B4ED0A14387FE69F4
	D2029F17A6BDEF54BC22FDBDEAAB4EFA6F7F744A57EEBCAEA3498FAF42EFFDDE
	CBEDD1AF789751D207292F6B8B12FAD676427F037D3981EEA1EF7D583D2D7AE7
	21615EA7FAECE8653910D0257D2EF4DBD5F4ABD16F397A810EBD2D7AE92C0D7D
	7FB4721AFDE411BF6BD2ABF71B3A74E8D0A143870E1D3A74E8D0A143870E1D3A
	74E8D0A143870E7D4EF487D91B0EAC7CE6DF797E7ABFABD053FAFB7652CDCA5F
	CD7D320BFAA7F67BF925C6B2E087BF5B4F38FA01ED6CF8ADF77BCB55D2AF48BA
	9A3E604D377A3164840E1D3A74E8D0A143870E1D3A74E8D0A143870E1D3A74E8
	D0A1431F1B7DC089D3A0436F0CF0FCD82013A77D77D2079D2250799916FDE83D
	D9B4BA927768921DADFA9501BD133274499774E8922EE9D087483AC2CEE3F4C1
	D3E426B0BDC16B127555005E05C24D60257DCEF2F2F54957D335491F6D1BF6FA
	25BDC1497D13B6D427E9ED4651B5174A922EE9F7A8E93F03004B315AB5E9704A
	B10000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="17" length_in_bytes="3211" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000005D0000
	00620806000000325DDFBB000000097048597300000EC300000EC301C76FA864
	00000A4F6943435050686F746F73686F70204943432070726F66696C65000078
	DA9D53675453E9163DF7DEF4424B8880944B6F5215082052428B801491262A21
	09104A8821A1D91551C1114545041BC8A088038E8E808C15512C0C8A0AD807E4
	21A28E83A3888ACAFBE17BA36BD6BCF7E6CDFEB5D73EE7ACF39DB3CF07C0080C
	9648335135800CA9421E11E083C7C4C6E1E42E40810A2470001008B3642173FD
	230100F87E3C3C2B22C007BE000178D30B0800C04D9BC0301C87FF0FEA42995C
	01808401C07491384B08801400407A8E42A600404601809D98265300A0040060
	CB6362E300502D0060277FE6D300809DF8997B01005B94211501A09100201365
	884400683B00ACCF568A450058300014664BC43900D82D00304957664800B0B7
	00C0CE100BB200080C00305188852900047B0060C8232378008499001446F257
	3CF12BAE10E72A00007899B23CB9243945815B082D710757572E1E28CE49172B
	14366102619A402EC27999193281340FE0F3CC0000A0911511E083F3FD78CE0E
	AECECE368EB60E5F2DEABF06FF226262E3FEE5CFAB70400000E1747ED1FE2C2F
	B31A803B06806DFEA225EE04685E0BA075F78B66B20F40B500A0E9DA57F370F8
	7E3C3C45A190B9D9D9E5E4E4D84AC4425B61CA577DFE67C25FC057FD6CF97E3C
	FCF7F5E0BEE22481325D814704F8E0C2CCF44CA51CCF92098462DCE68F47FCB7
	0BFFFC1DD322C44962B9582A14E35112718E449A8CF332A52289429229C525D2
	FF64E2DF2CFB033EDF3500B06A3E017B912DA85D6303F64B27105874C0E2F700
	00F2BB6FC1D4280803806883E1CF77FFEF3FFD47A02500806649927100005E44
	242E54CAB33FC708000044A0812AB0411BF4C1182CC0061CC105DCC10BFC6036
	844224C4C24210420A64801C726029AC82422886CDB01D2A602FD4401D34C051
	688693700E2EC255B80E3D700FFA61089EC128BC81090441C808136121DA8801
	628A58238E08179985F821C14804128B2420C9881451224B91354831528A5420
	55481DF23D720239875C46BA913BC8003282FC86BC47319481B2513DD40CB543
	B9A8371A8446A20BD06474319A8F16A09BD072B41A3D8C36A1E7D0AB680FDA8F
	3E43C730C0E8180733C46C302EC6C342B1382C099363CBB122AC0CABC61AB056
	AC03BB89F563CFB17704128145C0093604774220611E4148584C584ED848A820
	1C243411DA093709038451C2272293A84BB426BA11F9C4186232318758482C23
	D6128F132F107B8843C437241289433227B9900249B1A454D212D246D26E5223
	E92CA99B34481A2393C9DA646BB20739942C202BC885E49DE4C3E433E41BE421
	F25B0A9D624071A4F853E22852CA6A4A19E510E534E5066598324155A39A52DD
	A8A15411358F5A42ADA1B652AF5187A81334759A39CD8316494BA5ADA295D31A
	681768F769AFE874BA11DD951E4E97D057D2CBE947E897E803F4770C0D861583
	C7886728199B18071867197718AF984CA619D38B19C754303731EB98E7990F99
	6F55582AB62A7C1591CA0A954A9526951B2A2F54A9AAA6AADEAA0B55F355CB54
	8FA95E537DAE46553353E3A909D496AB55AA9D50EB531B5367A93BA887AA67A8
	6F543FA47E59FD890659C34CC34F43A451A0B15FE3BCC6200B6319B3782C216B
	0DAB86758135C426B1CDD97C762ABB98FD1DBB8B3DAAA9A13943334A3357B352
	F394663F07E39871F89C744E09E728A797F37E8ADE14EF29E2291BA6344CB931
	655C6BAA96979658AB48AB51AB47EBBD36AEEDA79DA6BD45BB59FB810E41C74A
	275C2747678FCE059DE753D953DDA70AA7164D3D3AF5AE2EAA6BA51BA1BB4477
	BF6EA7EE989EBE5E809E4C6FA7DE79BDE7FA1C7D2FFD54FD6DFAA7F5470C5806
	B30C2406DB0CCE183CC535716F3C1D2FC7DBF151435DC34043A561956197E184
	91B9D13CA3D5468D460F8C69C65CE324E36DC66DC6A326062621264B4DEA4DEE
	9A524DB9A629A63B4C3B4CC7CDCCCDA2CDD699359B3D31D732E79BE79BD79BDF
	B7605A785A2CB6A8B6B86549B2E45AA659EEB6BC6E855A3959A558555A5DB346
	AD9DAD25D6BBADBBA711A7B94E934EAB9ED667C3B0F1B6C9B6A9B719B0E5D806
	DBAEB66DB67D6167621767B7C5AEC3EE93BD937DBA7D8DFD3D070D87D90EAB1D
	5A1D7E73B472143A563ADE9ACE9CEE3F7DC5F496E92F6758CF10CFD833E3B613
	CB29C4699D539BD347671767B97383F3888B894B82CB2E973E2E9B1BC6DDC8BD
	E44A74F5715DE17AD2F59D9BB39BC2EDA8DBAFEE36EE69EE87DC9FCC349F299E
	593373D0C3C843E051E5D13F0B9F95306BDFAC7E4F434F8167B5E7232F632F91
	57ADD7B0B7A577AAF761EF173EF63E729FE33EE33C37DE32DE595FCC37C0B7C8
	B7CB4FC36F9E5F85DF437F23FF64FF7AFFD100A78025016703898141815B02FB
	F87A7C21BF8E3F3ADB65F6B2D9ED418CA0B94115418F82AD82E5C1AD2168C8EC
	90AD21F7E798CE91CE690E85507EE8D6D00761E6618BC37E0C2785878557863F
	8E7088581AD131973577D1DC4373DF44FA449644DE9B67314F39AF2D4A352A3E
	AA2E6A3CDA37BA34BA3FC62E6659CCD5589D58496C4B1C392E2AAE366E6CBEDF
	FCEDF387E29DE20BE37B17982FC85D7079A1CEC2F485A716A92E122C3A96404C
	884E3894F041102AA8168C25F21377258E0A79C21DC267222FD136D188D8435C
	2A1E4EF2482A4D7A92EC91BC357924C533A52CE5B98427A990BC4C0D4CDD9B3A
	9E169A76206D323D3ABD31839291907142AA214D93B667EA67E66676CBAC6585
	B2FEC56E8BB72F1E9507C96BB390AC05592D0AB642A6E8545A28D72A07B26765
	5766BFCD89CA3996AB9E2BCDEDCCB3CADB90379CEF9FFFED12C212E192B6A586
	4B572D1D58E6BDAC6A39B23C7179DB0AE315052B865606AC3CB88AB62A6DD54F
	ABED5797AE7EBD267A4D6B815EC1CA82C1B5016BEB0B550AE5857DEBDCD7ED5D
	4F582F59DFB561FA869D1B3E15898AAE14DB1797157FD828DC78E51B876FCABF
	99DC94B4A9ABC4B964CF66D266E9E6DE2D9E5B0E96AA97E6970E6E0DD9DAB40D
	DF56B4EDF5F645DB2F97CD28DBBB83B643B9A3BF3CB8BC65A7C9CECD3B3F54A4
	54F454FA5436EED2DDB561D7F86ED1EE1B7BBCF634ECD5DB5BBCF7FD3EC9BEDB
	5501554DD566D565FB49FBB3F73FAE89AAE9F896FB6D5DAD4E6D71EDC703D203
	FD07230EB6D7B9D4D51DD23D54528FD62BEB470EC71FBEFE9DEF772D0D360D55
	8D9CC6E223704479E4E9F709DFF71E0D3ADA768C7BACE107D31F761D671D2F6A
	429AF29A469B539AFB5B625BBA4FCC3ED1D6EADE7AFC47DB1F0F9C343C59794A
	F354C969DAE982D39367F2CF8C9D959D7D7E2EF9DC60DBA2B67BE763CEDF6A0F
	6FEFBA1074E1D245FF8BE73BBC3BCE5CF2B874F2B2DBE51357B8579AAF3A5F6D
	EA74EA3CFE93D34FC7BB9CBB9AAEB95C6BB9EE7ABDB57B66F7E91B9E37CEDDF4
	BD79F116FFD6D59E393DDDBDF37A6FF7C5F7F5DF16DD7E7227FDCECBBBD97727
	EEADBC4FBC5FF440ED41D943DD87D53F5BFEDCD8EFDC7F6AC077A0F3D1DC47F7
	068583CFFE91F58F0F43058F998FCB860D86EB9E383E3939E23F72FDE9FCA743
	CF64CF269E17FEA2FECBAE17162F7EF8D5EBD7CED198D1A197F29793BF6D7CA5
	FDEAC0EB19AFDBC6C2C61EBEC97833315EF456FBEDC177DC771DEFA3DF0F4FE4
	7C207F28FF68F9B1F553D0A7FB93199393FF040398F3FC63332DDB0000002063
	48524D00007A25000080830000F9FF000080E9000075300000EA6000003A9800
	00176F925FC546000001AC4944415478DAECDCC99682301005D0AAFFFFE8B891
	D3D80D18200C696E6D5CA00C97472840CD524AF45899594A29D9CB3A8DA765AF
	E8770C4144C412FA303D25BD1D78F5FB255DD28DE9AA7D0032B348FA15EB0E5D
	D237750ABD25BECBA48FE1EF006E4CEF61DD2342FB7205BAB6F1D423147A2BC8
	5AC3AFE8997F874C3B689F5315FA78DA9A3DFAE4A42F3941870E1DFAD1E84B33
	FC3D33B5DF69F18AF47DD5579DF4F7F43C295DE5E465AD4D7AFE2BF4B3EFBD3C
	1EFD8ABB8C927E93E1656CB1843EB59ED077A00F27D039F4B987D5DDA29FDC12
	9671AAB7762FC38E802EE97DA13F6E4CBF1AFD91DD0B74E86DD197CED2D0E7BB
	95CDE81BF7F853935EBDDDD0A143870E1D3A74E8D0A143870E1D3A74E8D0A143
	870E1D3A74E87DA27FFC7BC38A85F7FC3BCFA3B7BB0A3DE2E7DB49350BFFF6DF
	27BDA01FB5DDC32F3186197FBC4E7D60ED03DADEF05B6FF794ABA45F917463FA
	0DC774DD8B96113A74E8D0A143870E1D3A74E8D0A143870E1D3A74E8D0A14387
	0E1D3A74E8D0A14387DE1C3DD4641D86AE1A1D39D0A14357D0A12BE8D01574E8
	0A3A74E80A3A74051DBA820E5D4544C40B0000FFFF030085A8ACA6F8C21F9600
	00000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="18" length_in_bytes="3071" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000005D0000
	00620806000000325DDFBB000000097048597300000EC300000EC301C76FA864
	00000A4F6943435050686F746F73686F70204943432070726F66696C65000078
	DA9D53675453E9163DF7DEF4424B8880944B6F5215082052428B801491262A21
	09104A8821A1D91551C1114545041BC8A088038E8E808C15512C0C8A0AD807E4
	21A28E83A3888ACAFBE17BA36BD6BCF7E6CDFEB5D73EE7ACF39DB3CF07C0080C
	9648335135800CA9421E11E083C7C4C6E1E42E40810A2470001008B3642173FD
	230100F87E3C3C2B22C007BE000178D30B0800C04D9BC0301C87FF0FEA42995C
	01808401C07491384B08801400407A8E42A600404601809D98265300A0040060
	CB6362E300502D0060277FE6D300809DF8997B01005B94211501A09100201365
	884400683B00ACCF568A450058300014664BC43900D82D00304957664800B0B7
	00C0CE100BB200080C00305188852900047B0060C8232378008499001446F257
	3CF12BAE10E72A00007899B23CB9243945815B082D710757572E1E28CE49172B
	14366102619A402EC27999193281340FE0F3CC0000A0911511E083F3FD78CE0E
	AECECE368EB60E5F2DEABF06FF226262E3FEE5CFAB70400000E1747ED1FE2C2F
	B31A803B06806DFEA225EE04685E0BA075F78B66B20F40B500A0E9DA57F370F8
	7E3C3C45A190B9D9D9E5E4E4D84AC4425B61CA577DFE67C25FC057FD6CF97E3C
	FCF7F5E0BEE22481325D814704F8E0C2CCF44CA51CCF92098462DCE68F47FCB7
	0BFFFC1DD322C44962B9582A14E35112718E449A8CF332A52289429229C525D2
	FF64E2DF2CFB033EDF3500B06A3E017B912DA85D6303F64B27105874C0E2F700
	00F2BB6FC1D4280803806883E1CF77FFEF3FFD47A02500806649927100005E44
	242E54CAB33FC708000044A0812AB0411BF4C1182CC0061CC105DCC10BFC6036
	844224C4C24210420A64801C726029AC82422886CDB01D2A602FD4401D34C051
	688693700E2EC255B80E3D700FFA61089EC128BC81090441C808136121DA8801
	628A58238E08179985F821C14804128B2420C9881451224B91354831528A5420
	55481DF23D720239875C46BA913BC8003282FC86BC47319481B2513DD40CB543
	B9A8371A8446A20BD06474319A8F16A09BD072B41A3D8C36A1E7D0AB680FDA8F
	3E43C730C0E8180733C46C302EC6C342B1382C099363CBB122AC0CABC61AB056
	AC03BB89F563CFB17704128145C0093604774220611E4148584C584ED848A820
	1C243411DA093709038451C2272293A84BB426BA11F9C4186232318758482C23
	D6128F132F107B8843C437241289433227B9900249B1A454D212D246D26E5223
	E92CA99B34481A2393C9DA646BB20739942C202BC885E49DE4C3E433E41BE421
	F25B0A9D624071A4F853E22852CA6A4A19E510E534E5066598324155A39A52DD
	A8A15411358F5A42ADA1B652AF5187A81334759A39CD8316494BA5ADA295D31A
	681768F769AFE874BA11DD951E4E97D057D2CBE947E897E803F4770C0D861583
	C7886728199B18071867197718AF984CA619D38B19C754303731EB98E7990F99
	6F55582AB62A7C1591CA0A954A9526951B2A2F54A9AAA6AADEAA0B55F355CB54
	8FA95E537DAE46553353E3A909D496AB55AA9D50EB531B5367A93BA887AA67A8
	6F543FA47E59FD890659C34CC34F43A451A0B15FE3BCC6200B6319B3782C216B
	0DAB86758135C426B1CDD97C762ABB98FD1DBB8B3DAAA9A13943334A3357B352
	F394663F07E39871F89C744E09E728A797F37E8ADE14EF29E2291BA6344CB931
	655C6BAA96979658AB48AB51AB47EBBD36AEEDA79DA6BD45BB59FB810E41C74A
	275C2747678FCE059DE753D953DDA70AA7164D3D3AF5AE2EAA6BA51BA1BB4477
	BF6EA7EE989EBE5E809E4C6FA7DE79BDE7FA1C7D2FFD54FD6DFAA7F5470C5806
	B30C2406DB0CCE183CC535716F3C1D2FC7DBF151435DC34043A561956197E184
	91B9D13CA3D5468D460F8C69C65CE324E36DC66DC6A326062621264B4DEA4DEE
	9A524DB9A629A63B4C3B4CC7CDCCCDA2CDD699359B3D31D732E79BE79BD79BDF
	B7605A785A2CB6A8B6B86549B2E45AA659EEB6BC6E855A3959A558555A5DB346
	AD9DAD25D6BBADBBA711A7B94E934EAB9ED667C3B0F1B6C9B6A9B719B0E5D806
	DBAEB66DB67D6167621767B7C5AEC3EE93BD937DBA7D8DFD3D070D87D90EAB1D
	5A1D7E73B472143A563ADE9ACE9CEE3F7DC5F496E92F6758CF10CFD833E3B613
	CB29C4699D539BD347671767B97383F3888B894B82CB2E973E2E9B1BC6DDC8BD
	E44A74F5715DE17AD2F59D9BB39BC2EDA8DBAFEE36EE69EE87DC9FCC349F299E
	593373D0C3C843E051E5D13F0B9F95306BDFAC7E4F434F8167B5E7232F632F91
	57ADD7B0B7A577AAF761EF173EF63E729FE33EE33C37DE32DE595FCC37C0B7C8
	B7CB4FC36F9E5F85DF437F23FF64FF7AFFD100A78025016703898141815B02FB
	F87A7C21BF8E3F3ADB65F6B2D9ED418CA0B94115418F82AD82E5C1AD2168C8EC
	90AD21F7E798CE91CE690E85507EE8D6D00761E6618BC37E0C2785878557863F
	8E7088581AD131973577D1DC4373DF44FA449644DE9B67314F39AF2D4A352A3E
	AA2E6A3CDA37BA34BA3FC62E6659CCD5589D58496C4B1C392E2AAE366E6CBEDF
	FCEDF387E29DE20BE37B17982FC85D7079A1CEC2F485A716A92E122C3A96404C
	884E3894F041102AA8168C25F21377258E0A79C21DC267222FD136D188D8435C
	2A1E4EF2482A4D7A92EC91BC357924C533A52CE5B98427A990BC4C0D4CDD9B3A
	9E169A76206D323D3ABD31839291907142AA214D93B667EA67E66676CBAC6585
	B2FEC56E8BB72F1E9507C96BB390AC05592D0AB642A6E8545A28D72A07B26765
	5766BFCD89CA3996AB9E2BCDEDCCB3CADB90379CEF9FFFED12C212E192B6A586
	4B572D1D58E6BDAC6A39B23C7179DB0AE315052B865606AC3CB88AB62A6DD54F
	ABED5797AE7EBD267A4D6B815EC1CA82C1B5016BEB0B550AE5857DEBDCD7ED5D
	4F582F59DFB561FA869D1B3E15898AAE14DB1797157FD828DC78E51B876FCABF
	99DC94B4A9ABC4B964CF66D266E9E6DE2D9E5B0E96AA97E6970E6E0DD9DAB40D
	DF56B4EDF5F645DB2F97CD28DBBB83B643B9A3BF3CB8BC65A7C9CECD3B3F54A4
	54F454FA5436EED2DDB561D7F86ED1EE1B7BBCF634ECD5DB5BBCF7FD3EC9BEDB
	5501554DD566D565FB49FBB3F73FAE89AAE9F896FB6D5DAD4E6D71EDC703D203
	FD07230EB6D7B9D4D51DD23D54528FD62BEB470EC71FBEFE9DEF772D0D360D55
	8D9CC6E223704479E4E9F709DFF71E0D3ADA768C7BACE107D31F761D671D2F6A
	429AF29A469B539AFB5B625BBA4FCC3ED1D6EADE7AFC47DB1F0F9C343C59794A
	F354C969DAE982D39367F2CF8C9D959D7D7E2EF9DC60DBA2B67BE763CEDF6A0F
	6FEFBA1074E1D245FF8BE73BBC3BCE5CF2B874F2B2DBE51357B8579AAF3A5F6D
	EA74EA3CFE93D34FC7BB9CBB9AAEB95C6BB9EE7ABDB57B66F7E91B9E37CEDDF4
	BD79F116FFD6D59E393DDDBDF37A6FF7C5F7F5DF16DD7E7227FDCECBBBD97727
	EEADBC4FBC5FF440ED41D943DD87D53F5BFEDCD8EFDC7F6AC077A0F3D1DC47F7
	068583CFFE91F58F0F43058F998FCB860D86EB9E383E3939E23F72FDE9FCA743
	CF64CF269E17FEA2FECBAE17162F7EF8D5EBD7CED198D1A197F29793BF6D7CA5
	FDEAC0EB19AFDBC6C2C61EBEC97833315EF456FBEDC177DC771DEFA3DF0F4FE4
	7C207F28FF68F9B1F553D0A7FB93199393FF040398F3FC63332DDB0000002063
	48524D00007A25000080830000F9FF000080E9000075300000EA6000003A9800
	00176F925FC546000001204944415478DAECD739128330104541E6FE879623E7
	C6C52C42FD728AAFA608146BAD4BB50574E8D0051DBAA0431774E8820E1DBAA0
	431774E8820E5DFBA047C4CF23D75A01FD01E83B90FF3E772CFAD360533FC008
	F42F4E264CC53BB640EF809880DF86DE79F86EF816F48858237EF3A61DE5E853
	C03BF794A24F03EFDA55863E15BC635F09FA74F0EA9DE9E8BB8057EE4D459F74
	21197551CB46DF09BC6A771AFAAEE015FBA1BF057D77F0EC7340870EFD68F0CC
	F340870EFD78F0AC7341870E1D3A74E8D0A143870E1D3A74E8D0A143870E1D3A
	74E8D0A143870E1D3A74E8D0A143870E1D3A74E8D0A143870E1D3A74E8D0A143
	870E1D7A2AFAF5D2C6A20B3A7441870E5DD0A10B3A7441872EE8D0A10B3A7441
	87AE3B7D000000FFFF03003E15FD5B5C1C2C3E0000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="19" length_in_bytes="3318" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000005D0000
	00620806000000325DDFBB000000097048597300000EC300000EC301C76FA864
	00000A4F6943435050686F746F73686F70204943432070726F66696C65000078
	DA9D53675453E9163DF7DEF4424B8880944B6F5215082052428B801491262A21
	09104A8821A1D91551C1114545041BC8A088038E8E808C15512C0C8A0AD807E4
	21A28E83A3888ACAFBE17BA36BD6BCF7E6CDFEB5D73EE7ACF39DB3CF07C0080C
	9648335135800CA9421E11E083C7C4C6E1E42E40810A2470001008B3642173FD
	230100F87E3C3C2B22C007BE000178D30B0800C04D9BC0301C87FF0FEA42995C
	01808401C07491384B08801400407A8E42A600404601809D98265300A0040060
	CB6362E300502D0060277FE6D300809DF8997B01005B94211501A09100201365
	884400683B00ACCF568A450058300014664BC43900D82D00304957664800B0B7
	00C0CE100BB200080C00305188852900047B0060C8232378008499001446F257
	3CF12BAE10E72A00007899B23CB9243945815B082D710757572E1E28CE49172B
	14366102619A402EC27999193281340FE0F3CC0000A0911511E083F3FD78CE0E
	AECECE368EB60E5F2DEABF06FF226262E3FEE5CFAB70400000E1747ED1FE2C2F
	B31A803B06806DFEA225EE04685E0BA075F78B66B20F40B500A0E9DA57F370F8
	7E3C3C45A190B9D9D9E5E4E4D84AC4425B61CA577DFE67C25FC057FD6CF97E3C
	FCF7F5E0BEE22481325D814704F8E0C2CCF44CA51CCF92098462DCE68F47FCB7
	0BFFFC1DD322C44962B9582A14E35112718E449A8CF332A52289429229C525D2
	FF64E2DF2CFB033EDF3500B06A3E017B912DA85D6303F64B27105874C0E2F700
	00F2BB6FC1D4280803806883E1CF77FFEF3FFD47A02500806649927100005E44
	242E54CAB33FC708000044A0812AB0411BF4C1182CC0061CC105DCC10BFC6036
	844224C4C24210420A64801C726029AC82422886CDB01D2A602FD4401D34C051
	688693700E2EC255B80E3D700FFA61089EC128BC81090441C808136121DA8801
	628A58238E08179985F821C14804128B2420C9881451224B91354831528A5420
	55481DF23D720239875C46BA913BC8003282FC86BC47319481B2513DD40CB543
	B9A8371A8446A20BD06474319A8F16A09BD072B41A3D8C36A1E7D0AB680FDA8F
	3E43C730C0E8180733C46C302EC6C342B1382C099363CBB122AC0CABC61AB056
	AC03BB89F563CFB17704128145C0093604774220611E4148584C584ED848A820
	1C243411DA093709038451C2272293A84BB426BA11F9C4186232318758482C23
	D6128F132F107B8843C437241289433227B9900249B1A454D212D246D26E5223
	E92CA99B34481A2393C9DA646BB20739942C202BC885E49DE4C3E433E41BE421
	F25B0A9D624071A4F853E22852CA6A4A19E510E534E5066598324155A39A52DD
	A8A15411358F5A42ADA1B652AF5187A81334759A39CD8316494BA5ADA295D31A
	681768F769AFE874BA11DD951E4E97D057D2CBE947E897E803F4770C0D861583
	C7886728199B18071867197718AF984CA619D38B19C754303731EB98E7990F99
	6F55582AB62A7C1591CA0A954A9526951B2A2F54A9AAA6AADEAA0B55F355CB54
	8FA95E537DAE46553353E3A909D496AB55AA9D50EB531B5367A93BA887AA67A8
	6F543FA47E59FD890659C34CC34F43A451A0B15FE3BCC6200B6319B3782C216B
	0DAB86758135C426B1CDD97C762ABB98FD1DBB8B3DAAA9A13943334A3357B352
	F394663F07E39871F89C744E09E728A797F37E8ADE14EF29E2291BA6344CB931
	655C6BAA96979658AB48AB51AB47EBBD36AEEDA79DA6BD45BB59FB810E41C74A
	275C2747678FCE059DE753D953DDA70AA7164D3D3AF5AE2EAA6BA51BA1BB4477
	BF6EA7EE989EBE5E809E4C6FA7DE79BDE7FA1C7D2FFD54FD6DFAA7F5470C5806
	B30C2406DB0CCE183CC535716F3C1D2FC7DBF151435DC34043A561956197E184
	91B9D13CA3D5468D460F8C69C65CE324E36DC66DC6A326062621264B4DEA4DEE
	9A524DB9A629A63B4C3B4CC7CDCCCDA2CDD699359B3D31D732E79BE79BD79BDF
	B7605A785A2CB6A8B6B86549B2E45AA659EEB6BC6E855A3959A558555A5DB346
	AD9DAD25D6BBADBBA711A7B94E934EAB9ED667C3B0F1B6C9B6A9B719B0E5D806
	DBAEB66DB67D6167621767B7C5AEC3EE93BD937DBA7D8DFD3D070D87D90EAB1D
	5A1D7E73B472143A563ADE9ACE9CEE3F7DC5F496E92F6758CF10CFD833E3B613
	CB29C4699D539BD347671767B97383F3888B894B82CB2E973E2E9B1BC6DDC8BD
	E44A74F5715DE17AD2F59D9BB39BC2EDA8DBAFEE36EE69EE87DC9FCC349F299E
	593373D0C3C843E051E5D13F0B9F95306BDFAC7E4F434F8167B5E7232F632F91
	57ADD7B0B7A577AAF761EF173EF63E729FE33EE33C37DE32DE595FCC37C0B7C8
	B7CB4FC36F9E5F85DF437F23FF64FF7AFFD100A78025016703898141815B02FB
	F87A7C21BF8E3F3ADB65F6B2D9ED418CA0B94115418F82AD82E5C1AD2168C8EC
	90AD21F7E798CE91CE690E85507EE8D6D00761E6618BC37E0C2785878557863F
	8E7088581AD131973577D1DC4373DF44FA449644DE9B67314F39AF2D4A352A3E
	AA2E6A3CDA37BA34BA3FC62E6659CCD5589D58496C4B1C392E2AAE366E6CBEDF
	FCEDF387E29DE20BE37B17982FC85D7079A1CEC2F485A716A92E122C3A96404C
	884E3894F041102AA8168C25F21377258E0A79C21DC267222FD136D188D8435C
	2A1E4EF2482A4D7A92EC91BC357924C533A52CE5B98427A990BC4C0D4CDD9B3A
	9E169A76206D323D3ABD31839291907142AA214D93B667EA67E66676CBAC6585
	B2FEC56E8BB72F1E9507C96BB390AC05592D0AB642A6E8545A28D72A07B26765
	5766BFCD89CA3996AB9E2BCDEDCCB3CADB90379CEF9FFFED12C212E192B6A586
	4B572D1D58E6BDAC6A39B23C7179DB0AE315052B865606AC3CB88AB62A6DD54F
	ABED5797AE7EBD267A4D6B815EC1CA82C1B5016BEB0B550AE5857DEBDCD7ED5D
	4F582F59DFB561FA869D1B3E15898AAE14DB1797157FD828DC78E51B876FCABF
	99DC94B4A9ABC4B964CF66D266E9E6DE2D9E5B0E96AA97E6970E6E0DD9DAB40D
	DF56B4EDF5F645DB2F97CD28DBBB83B643B9A3BF3CB8BC65A7C9CECD3B3F54A4
	54F454FA5436EED2DDB561D7F86ED1EE1B7BBCF634ECD5DB5BBCF7FD3EC9BEDB
	5501554DD566D565FB49FBB3F73FAE89AAE9F896FB6D5DAD4E6D71EDC703D203
	FD07230EB6D7B9D4D51DD23D54528FD62BEB470EC71FBEFE9DEF772D0D360D55
	8D9CC6E223704479E4E9F709DFF71E0D3ADA768C7BACE107D31F761D671D2F6A
	429AF29A469B539AFB5B625BBA4FCC3ED1D6EADE7AFC47DB1F0F9C343C59794A
	F354C969DAE982D39367F2CF8C9D959D7D7E2EF9DC60DBA2B67BE763CEDF6A0F
	6FEFBA1074E1D245FF8BE73BBC3BCE5CF2B874F2B2DBE51357B8579AAF3A5F6D
	EA74EA3CFE93D34FC7BB9CBB9AAEB95C6BB9EE7ABDB57B66F7E91B9E37CEDDF4
	BD79F116FFD6D59E393DDDBDF37A6FF7C5F7F5DF16DD7E7227FDCECBBBD97727
	EEADBC4FBC5FF440ED41D943DD87D53F5BFEDCD8EFDC7F6AC077A0F3D1DC47F7
	068583CFFE91F58F0F43058F998FCB860D86EB9E383E3939E23F72FDE9FCA743
	CF64CF269E17FEA2FECBAE17162F7EF8D5EBD7CED198D1A197F29793BF6D7CA5
	FDEAC0EB19AFDBC6C2C61EBEC97833315EF456FBEDC177DC771DEFA3DF0F4FE4
	7C207F28FF68F9B1F553D0A7FB93199393FF040398F3FC63332DDB0000002063
	48524D00007A25000080830000F9FF000080E9000075300000EA6000003A9800
	00176F925FC546000002174944415478DAECDDDB6EC2301045D1CCFF7FB4FB40
	5BA53481F1656E66FB05A922C4B372E4DA0E28D25A3B2A361169AD3529D9F7AA
	E8959B9074D0493A49079DA49374D041B7C67EFE5B35FC92493FC3574C3BC30B
	E8FA21E5AE55B810E9D06FC6EC9EE3D35F8814E84F63B4C5E7A7BA00A1E8D6D8
	59F143D07FB0832F7818BE3BFAF7AC23D3FF10777837F40CE9CE927A711A4B5B
	91A9A90BBC29FAAA745F4D035FCCD3D3A7DE0C7D16FCDD4CE36E45BA6246640D
	2F46F3E22170ED944EBBF73273012CE197A38F80F71438BACB68DDAF30F4DEC2
	668A1ADDF0F2ECA31BBA573133BB8C23F029D17BC153EC8104F579097A45F0C8
	BEBBA267038FEABF2C584C94068FA8630A7D1770EF7ACCD1AB807BD624134B65
	55E7ACF731A256D333F0E6E825BF22615CDB10BA260D55C1B5F053ABE951F45D
	53EE51A3097A7570EB3A6560CB73FB945BD70AFA0EE8BB805BD60B3AE8A07F3C
	B855DDA0830E3AE8A0830E3AE8A0830E7A41F4F337A97A4E5EF9779ED675ABD0
	8FE37187447BF2F33195D1ADEA96C77B7E3FF8CFEBD5019A5B5817C794BB31BD
	AAEE2B57921E9174C6F484633AB317A68CA0830E3AE8A0830E3AE8A0830E3AE8
	A0830E3AE8A0830E3AE8A0830E3AE8B9D13D6F07820EBA3F7AC4E31948FAE1FF
	7806D0195EFE9F7CD79616FD531BE8A0830E3AE8A0830E3AE82F97E0B4FE9531
	0F0C8CE83B8FC6047D6888E321B00C2FA0834E23E9A09374920E3A4927E9B3ED
	6B0005FE898A35CDBFFD0000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="20" length_in_bytes="3288" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000005D0000
	00620806000000325DDFBB000000097048597300000EC300000EC301C76FA864
	00000A4F6943435050686F746F73686F70204943432070726F66696C65000078
	DA9D53675453E9163DF7DEF4424B8880944B6F5215082052428B801491262A21
	09104A8821A1D91551C1114545041BC8A088038E8E808C15512C0C8A0AD807E4
	21A28E83A3888ACAFBE17BA36BD6BCF7E6CDFEB5D73EE7ACF39DB3CF07C0080C
	9648335135800CA9421E11E083C7C4C6E1E42E40810A2470001008B3642173FD
	230100F87E3C3C2B22C007BE000178D30B0800C04D9BC0301C87FF0FEA42995C
	01808401C07491384B08801400407A8E42A600404601809D98265300A0040060
	CB6362E300502D0060277FE6D300809DF8997B01005B94211501A09100201365
	884400683B00ACCF568A450058300014664BC43900D82D00304957664800B0B7
	00C0CE100BB200080C00305188852900047B0060C8232378008499001446F257
	3CF12BAE10E72A00007899B23CB9243945815B082D710757572E1E28CE49172B
	14366102619A402EC27999193281340FE0F3CC0000A0911511E083F3FD78CE0E
	AECECE368EB60E5F2DEABF06FF226262E3FEE5CFAB70400000E1747ED1FE2C2F
	B31A803B06806DFEA225EE04685E0BA075F78B66B20F40B500A0E9DA57F370F8
	7E3C3C45A190B9D9D9E5E4E4D84AC4425B61CA577DFE67C25FC057FD6CF97E3C
	FCF7F5E0BEE22481325D814704F8E0C2CCF44CA51CCF92098462DCE68F47FCB7
	0BFFFC1DD322C44962B9582A14E35112718E449A8CF332A52289429229C525D2
	FF64E2DF2CFB033EDF3500B06A3E017B912DA85D6303F64B27105874C0E2F700
	00F2BB6FC1D4280803806883E1CF77FFEF3FFD47A02500806649927100005E44
	242E54CAB33FC708000044A0812AB0411BF4C1182CC0061CC105DCC10BFC6036
	844224C4C24210420A64801C726029AC82422886CDB01D2A602FD4401D34C051
	688693700E2EC255B80E3D700FFA61089EC128BC81090441C808136121DA8801
	628A58238E08179985F821C14804128B2420C9881451224B91354831528A5420
	55481DF23D720239875C46BA913BC8003282FC86BC47319481B2513DD40CB543
	B9A8371A8446A20BD06474319A8F16A09BD072B41A3D8C36A1E7D0AB680FDA8F
	3E43C730C0E8180733C46C302EC6C342B1382C099363CBB122AC0CABC61AB056
	AC03BB89F563CFB17704128145C0093604774220611E4148584C584ED848A820
	1C243411DA093709038451C2272293A84BB426BA11F9C4186232318758482C23
	D6128F132F107B8843C437241289433227B9900249B1A454D212D246D26E5223
	E92CA99B34481A2393C9DA646BB20739942C202BC885E49DE4C3E433E41BE421
	F25B0A9D624071A4F853E22852CA6A4A19E510E534E5066598324155A39A52DD
	A8A15411358F5A42ADA1B652AF5187A81334759A39CD8316494BA5ADA295D31A
	681768F769AFE874BA11DD951E4E97D057D2CBE947E897E803F4770C0D861583
	C7886728199B18071867197718AF984CA619D38B19C754303731EB98E7990F99
	6F55582AB62A7C1591CA0A954A9526951B2A2F54A9AAA6AADEAA0B55F355CB54
	8FA95E537DAE46553353E3A909D496AB55AA9D50EB531B5367A93BA887AA67A8
	6F543FA47E59FD890659C34CC34F43A451A0B15FE3BCC6200B6319B3782C216B
	0DAB86758135C426B1CDD97C762ABB98FD1DBB8B3DAAA9A13943334A3357B352
	F394663F07E39871F89C744E09E728A797F37E8ADE14EF29E2291BA6344CB931
	655C6BAA96979658AB48AB51AB47EBBD36AEEDA79DA6BD45BB59FB810E41C74A
	275C2747678FCE059DE753D953DDA70AA7164D3D3AF5AE2EAA6BA51BA1BB4477
	BF6EA7EE989EBE5E809E4C6FA7DE79BDE7FA1C7D2FFD54FD6DFAA7F5470C5806
	B30C2406DB0CCE183CC535716F3C1D2FC7DBF151435DC34043A561956197E184
	91B9D13CA3D5468D460F8C69C65CE324E36DC66DC6A326062621264B4DEA4DEE
	9A524DB9A629A63B4C3B4CC7CDCCCDA2CDD699359B3D31D732E79BE79BD79BDF
	B7605A785A2CB6A8B6B86549B2E45AA659EEB6BC6E855A3959A558555A5DB346
	AD9DAD25D6BBADBBA711A7B94E934EAB9ED667C3B0F1B6C9B6A9B719B0E5D806
	DBAEB66DB67D6167621767B7C5AEC3EE93BD937DBA7D8DFD3D070D87D90EAB1D
	5A1D7E73B472143A563ADE9ACE9CEE3F7DC5F496E92F6758CF10CFD833E3B613
	CB29C4699D539BD347671767B97383F3888B894B82CB2E973E2E9B1BC6DDC8BD
	E44A74F5715DE17AD2F59D9BB39BC2EDA8DBAFEE36EE69EE87DC9FCC349F299E
	593373D0C3C843E051E5D13F0B9F95306BDFAC7E4F434F8167B5E7232F632F91
	57ADD7B0B7A577AAF761EF173EF63E729FE33EE33C37DE32DE595FCC37C0B7C8
	B7CB4FC36F9E5F85DF437F23FF64FF7AFFD100A78025016703898141815B02FB
	F87A7C21BF8E3F3ADB65F6B2D9ED418CA0B94115418F82AD82E5C1AD2168C8EC
	90AD21F7E798CE91CE690E85507EE8D6D00761E6618BC37E0C2785878557863F
	8E7088581AD131973577D1DC4373DF44FA449644DE9B67314F39AF2D4A352A3E
	AA2E6A3CDA37BA34BA3FC62E6659CCD5589D58496C4B1C392E2AAE366E6CBEDF
	FCEDF387E29DE20BE37B17982FC85D7079A1CEC2F485A716A92E122C3A96404C
	884E3894F041102AA8168C25F21377258E0A79C21DC267222FD136D188D8435C
	2A1E4EF2482A4D7A92EC91BC357924C533A52CE5B98427A990BC4C0D4CDD9B3A
	9E169A76206D323D3ABD31839291907142AA214D93B667EA67E66676CBAC6585
	B2FEC56E8BB72F1E9507C96BB390AC05592D0AB642A6E8545A28D72A07B26765
	5766BFCD89CA3996AB9E2BCDEDCCB3CADB90379CEF9FFFED12C212E192B6A586
	4B572D1D58E6BDAC6A39B23C7179DB0AE315052B865606AC3CB88AB62A6DD54F
	ABED5797AE7EBD267A4D6B815EC1CA82C1B5016BEB0B550AE5857DEBDCD7ED5D
	4F582F59DFB561FA869D1B3E15898AAE14DB1797157FD828DC78E51B876FCABF
	99DC94B4A9ABC4B964CF66D266E9E6DE2D9E5B0E96AA97E6970E6E0DD9DAB40D
	DF56B4EDF5F645DB2F97CD28DBBB83B643B9A3BF3CB8BC65A7C9CECD3B3F54A4
	54F454FA5436EED2DDB561D7F86ED1EE1B7BBCF634ECD5DB5BBCF7FD3EC9BEDB
	5501554DD566D565FB49FBB3F73FAE89AAE9F896FB6D5DAD4E6D71EDC703D203
	FD07230EB6D7B9D4D51DD23D54528FD62BEB470EC71FBEFE9DEF772D0D360D55
	8D9CC6E223704479E4E9F709DFF71E0D3ADA768C7BACE107D31F761D671D2F6A
	429AF29A469B539AFB5B625BBA4FCC3ED1D6EADE7AFC47DB1F0F9C343C59794A
	F354C969DAE982D39367F2CF8C9D959D7D7E2EF9DC60DBA2B67BE763CEDF6A0F
	6FEFBA1074E1D245FF8BE73BBC3BCE5CF2B874F2B2DBE51357B8579AAF3A5F6D
	EA74EA3CFE93D34FC7BB9CBB9AAEB95C6BB9EE7ABDB57B66F7E91B9E37CEDDF4
	BD79F116FFD6D59E393DDDBDF37A6FF7C5F7F5DF16DD7E7227FDCECBBBD97727
	EEADBC4FBC5FF440ED41D943DD87D53F5BFEDCD8EFDC7F6AC077A0F3D1DC47F7
	068583CFFE91F58F0F43058F998FCB860D86EB9E383E3939E23F72FDE9FCA743
	CF64CF269E17FEA2FECBAE17162F7EF8D5EBD7CED198D1A197F29793BF6D7CA5
	FDEAC0EB19AFDBC6C2C61EBEC97833315EF456FBEDC177DC771DEFA3DF0F4FE4
	7C207F28FF68F9B1F553D0A7FB93199393FF040398F3FC63332DDB0000002063
	48524D00007A25000080830000F9FF000080E9000075300000EA6000003A9800
	00176F925FC546000001F94944415478DAECDBDD6EC3200C86617CFF17CD0EBA
	4D59956C04F8FC93BD3EA934352D7E709921ADF5DE5BC530B3DE7BB79263AF8A
	5E398C4A079D4AA7D241A7D2A974D0415763BFFFAD1A7EC94A3FC257AC769617
	D0C79794ABA83011E9D02FD6EC3BD7A79F8814E86F6BB4E2F5534D4028BA1A3B
	2B7E08FA1776F08487E1BBA37F761D99FE87B8C3BBA167A8EE2C556F4E6B692F
	D29ABAC04BD17755F7591BF84B9F9EBEEA65E8ABE07F751A573BD21D1D911ADE
	447DF114F8684B377AF6B232014AF8EDE833E077129C3D65548F2B0CFD6E622B
	49CD1E78798ED10DDD2B999553C619F894E877C1539C81048D790B7A45F0C8B1
	BBA267038F1ABF6DD84C94068FC86309FD29E0DEF9C8D1AB807BE6640B5BE5A1
	C1A9CF31A276D32BF072F4925F9110E736853E520D55C147E19776D3B3E84FAD
	728F1C25E8D5C1D579DAC491E7E3AB5C9D2BE84F407F0AB8325FD04107FDDF83
	ABF2061D74D041071D74D041071D74D00BA21FBF4975E7CD2BFFCE539DF7107A
	6BAF3B24A36F7EBCA632BA2A6F7B3DE7FB857F3C9E5D30720BEBE49A7237A677
	E57DE64AA547543A6B7AC2359DEE85961174D041071D74D041071D74D041071D
	74D041071D74D041071D74D041071D74D041071D74D041DF8EDE88D390A1139B
	3E39A0830E3A013AE804E8A013A0834E800E3AE804E8A013A0834E800E3AD15A
	6BED6300C4581A8A3FE5B0FE0000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="21" length_in_bytes="3020" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000005D0000
	00430806000000FEAD0928000000097048597300000EC300000EC301C76FA864
	00000A4F6943435050686F746F73686F70204943432070726F66696C65000078
	DA9D53675453E9163DF7DEF4424B8880944B6F5215082052428B801491262A21
	09104A8821A1D91551C1114545041BC8A088038E8E808C15512C0C8A0AD807E4
	21A28E83A3888ACAFBE17BA36BD6BCF7E6CDFEB5D73EE7ACF39DB3CF07C0080C
	9648335135800CA9421E11E083C7C4C6E1E42E40810A2470001008B3642173FD
	230100F87E3C3C2B22C007BE000178D30B0800C04D9BC0301C87FF0FEA42995C
	01808401C07491384B08801400407A8E42A600404601809D98265300A0040060
	CB6362E300502D0060277FE6D300809DF8997B01005B94211501A09100201365
	884400683B00ACCF568A450058300014664BC43900D82D00304957664800B0B7
	00C0CE100BB200080C00305188852900047B0060C8232378008499001446F257
	3CF12BAE10E72A00007899B23CB9243945815B082D710757572E1E28CE49172B
	14366102619A402EC27999193281340FE0F3CC0000A0911511E083F3FD78CE0E
	AECECE368EB60E5F2DEABF06FF226262E3FEE5CFAB70400000E1747ED1FE2C2F
	B31A803B06806DFEA225EE04685E0BA075F78B66B20F40B500A0E9DA57F370F8
	7E3C3C45A190B9D9D9E5E4E4D84AC4425B61CA577DFE67C25FC057FD6CF97E3C
	FCF7F5E0BEE22481325D814704F8E0C2CCF44CA51CCF92098462DCE68F47FCB7
	0BFFFC1DD322C44962B9582A14E35112718E449A8CF332A52289429229C525D2
	FF64E2DF2CFB033EDF3500B06A3E017B912DA85D6303F64B27105874C0E2F700
	00F2BB6FC1D4280803806883E1CF77FFEF3FFD47A02500806649927100005E44
	242E54CAB33FC708000044A0812AB0411BF4C1182CC0061CC105DCC10BFC6036
	844224C4C24210420A64801C726029AC82422886CDB01D2A602FD4401D34C051
	688693700E2EC255B80E3D700FFA61089EC128BC81090441C808136121DA8801
	628A58238E08179985F821C14804128B2420C9881451224B91354831528A5420
	55481DF23D720239875C46BA913BC8003282FC86BC47319481B2513DD40CB543
	B9A8371A8446A20BD06474319A8F16A09BD072B41A3D8C36A1E7D0AB680FDA8F
	3E43C730C0E8180733C46C302EC6C342B1382C099363CBB122AC0CABC61AB056
	AC03BB89F563CFB17704128145C0093604774220611E4148584C584ED848A820
	1C243411DA093709038451C2272293A84BB426BA11F9C4186232318758482C23
	D6128F132F107B8843C437241289433227B9900249B1A454D212D246D26E5223
	E92CA99B34481A2393C9DA646BB20739942C202BC885E49DE4C3E433E41BE421
	F25B0A9D624071A4F853E22852CA6A4A19E510E534E5066598324155A39A52DD
	A8A15411358F5A42ADA1B652AF5187A81334759A39CD8316494BA5ADA295D31A
	681768F769AFE874BA11DD951E4E97D057D2CBE947E897E803F4770C0D861583
	C7886728199B18071867197718AF984CA619D38B19C754303731EB98E7990F99
	6F55582AB62A7C1591CA0A954A9526951B2A2F54A9AAA6AADEAA0B55F355CB54
	8FA95E537DAE46553353E3A909D496AB55AA9D50EB531B5367A93BA887AA67A8
	6F543FA47E59FD890659C34CC34F43A451A0B15FE3BCC6200B6319B3782C216B
	0DAB86758135C426B1CDD97C762ABB98FD1DBB8B3DAAA9A13943334A3357B352
	F394663F07E39871F89C744E09E728A797F37E8ADE14EF29E2291BA6344CB931
	655C6BAA96979658AB48AB51AB47EBBD36AEEDA79DA6BD45BB59FB810E41C74A
	275C2747678FCE059DE753D953DDA70AA7164D3D3AF5AE2EAA6BA51BA1BB4477
	BF6EA7EE989EBE5E809E4C6FA7DE79BDE7FA1C7D2FFD54FD6DFAA7F5470C5806
	B30C2406DB0CCE183CC535716F3C1D2FC7DBF151435DC34043A561956197E184
	91B9D13CA3D5468D460F8C69C65CE324E36DC66DC6A326062621264B4DEA4DEE
	9A524DB9A629A63B4C3B4CC7CDCCCDA2CDD699359B3D31D732E79BE79BD79BDF
	B7605A785A2CB6A8B6B86549B2E45AA659EEB6BC6E855A3959A558555A5DB346
	AD9DAD25D6BBADBBA711A7B94E934EAB9ED667C3B0F1B6C9B6A9B719B0E5D806
	DBAEB66DB67D6167621767B7C5AEC3EE93BD937DBA7D8DFD3D070D87D90EAB1D
	5A1D7E73B472143A563ADE9ACE9CEE3F7DC5F496E92F6758CF10CFD833E3B613
	CB29C4699D539BD347671767B97383F3888B894B82CB2E973E2E9B1BC6DDC8BD
	E44A74F5715DE17AD2F59D9BB39BC2EDA8DBAFEE36EE69EE87DC9FCC349F299E
	593373D0C3C843E051E5D13F0B9F95306BDFAC7E4F434F8167B5E7232F632F91
	57ADD7B0B7A577AAF761EF173EF63E729FE33EE33C37DE32DE595FCC37C0B7C8
	B7CB4FC36F9E5F85DF437F23FF64FF7AFFD100A78025016703898141815B02FB
	F87A7C21BF8E3F3ADB65F6B2D9ED418CA0B94115418F82AD82E5C1AD2168C8EC
	90AD21F7E798CE91CE690E85507EE8D6D00761E6618BC37E0C2785878557863F
	8E7088581AD131973577D1DC4373DF44FA449644DE9B67314F39AF2D4A352A3E
	AA2E6A3CDA37BA34BA3FC62E6659CCD5589D58496C4B1C392E2AAE366E6CBEDF
	FCEDF387E29DE20BE37B17982FC85D7079A1CEC2F485A716A92E122C3A96404C
	884E3894F041102AA8168C25F21377258E0A79C21DC267222FD136D188D8435C
	2A1E4EF2482A4D7A92EC91BC357924C533A52CE5B98427A990BC4C0D4CDD9B3A
	9E169A76206D323D3ABD31839291907142AA214D93B667EA67E66676CBAC6585
	B2FEC56E8BB72F1E9507C96BB390AC05592D0AB642A6E8545A28D72A07B26765
	5766BFCD89CA3996AB9E2BCDEDCCB3CADB90379CEF9FFFED12C212E192B6A586
	4B572D1D58E6BDAC6A39B23C7179DB0AE315052B865606AC3CB88AB62A6DD54F
	ABED5797AE7EBD267A4D6B815EC1CA82C1B5016BEB0B550AE5857DEBDCD7ED5D
	4F582F59DFB561FA869D1B3E15898AAE14DB1797157FD828DC78E51B876FCABF
	99DC94B4A9ABC4B964CF66D266E9E6DE2D9E5B0E96AA97E6970E6E0DD9DAB40D
	DF56B4EDF5F645DB2F97CD28DBBB83B643B9A3BF3CB8BC65A7C9CECD3B3F54A4
	54F454FA5436EED2DDB561D7F86ED1EE1B7BBCF634ECD5DB5BBCF7FD3EC9BEDB
	5501554DD566D565FB49FBB3F73FAE89AAE9F896FB6D5DAD4E6D71EDC703D203
	FD07230EB6D7B9D4D51DD23D54528FD62BEB470EC71FBEFE9DEF772D0D360D55
	8D9CC6E223704479E4E9F709DFF71E0D3ADA768C7BACE107D31F761D671D2F6A
	429AF29A469B539AFB5B625BBA4FCC3ED1D6EADE7AFC47DB1F0F9C343C59794A
	F354C969DAE982D39367F2CF8C9D959D7D7E2EF9DC60DBA2B67BE763CEDF6A0F
	6FEFBA1074E1D245FF8BE73BBC3BCE5CF2B874F2B2DBE51357B8579AAF3A5F6D
	EA74EA3CFE93D34FC7BB9CBB9AAEB95C6BB9EE7ABDB57B66F7E91B9E37CEDDF4
	BD79F116FFD6D59E393DDDBDF37A6FF7C5F7F5DF16DD7E7227FDCECBBBD97727
	EEADBC4FBC5FF440ED41D943DD87D53F5BFEDCD8EFDC7F6AC077A0F3D1DC47F7
	068583CFFE91F58F0F43058F998FCB860D86EB9E383E3939E23F72FDE9FCA743
	CF64CF269E17FEA2FECBAE17162F7EF8D5EBD7CED198D1A197F29793BF6D7CA5
	FDEAC0EB19AFDBC6C2C61EBEC97833315EF456FBEDC177DC771DEFA3DF0F4FE4
	7C207F28FF68F9B1F553D0A7FB93199393FF040398F3FC63332DDB0000002063
	48524D00007A25000080830000F9FF000080E9000075300000EA6000003A9800
	00176F925FC546000000ED4944415478DAECD739128330104541E6FE879623E7
	C6C52C42FD728AAFA608146BAD4BB50574E8D0051DBAA0431774E8820E1DBAA0
	431774E8820E5DFBA047C4CF23D75A01FD01E83B90FF3E772CFAD360533FC008
	F42F4E264CC53BB640EF809880DF86DE79F86EF816F48858237EF3A61DE5E853
	C03BF794A24F03EFDA55863E15BC635F09FA74F0EA9DE9E8BB8057EE4D459F74
	21197551CB46DF09BC6A771AFAAEE015FBA1BF057D77F0EC7340870EFD68F0CC
	F340870EFD78F0AC7341870E1D3A74E8D027A15F2F6D2CBAA0431774E8D0051D
	BAA0431774E8820E1DBAA0431774E8BAD3070000FFFF0300B7B5A88A43574792
	0000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="22" length_in_bytes="3211" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000005D0000
	00430806000000FEAD0928000000097048597300000EC300000EC301C76FA864
	00000A4F6943435050686F746F73686F70204943432070726F66696C65000078
	DA9D53675453E9163DF7DEF4424B8880944B6F5215082052428B801491262A21
	09104A8821A1D91551C1114545041BC8A088038E8E808C15512C0C8A0AD807E4
	21A28E83A3888ACAFBE17BA36BD6BCF7E6CDFEB5D73EE7ACF39DB3CF07C0080C
	9648335135800CA9421E11E083C7C4C6E1E42E40810A2470001008B3642173FD
	230100F87E3C3C2B22C007BE000178D30B0800C04D9BC0301C87FF0FEA42995C
	01808401C07491384B08801400407A8E42A600404601809D98265300A0040060
	CB6362E300502D0060277FE6D300809DF8997B01005B94211501A09100201365
	884400683B00ACCF568A450058300014664BC43900D82D00304957664800B0B7
	00C0CE100BB200080C00305188852900047B0060C8232378008499001446F257
	3CF12BAE10E72A00007899B23CB9243945815B082D710757572E1E28CE49172B
	14366102619A402EC27999193281340FE0F3CC0000A0911511E083F3FD78CE0E
	AECECE368EB60E5F2DEABF06FF226262E3FEE5CFAB70400000E1747ED1FE2C2F
	B31A803B06806DFEA225EE04685E0BA075F78B66B20F40B500A0E9DA57F370F8
	7E3C3C45A190B9D9D9E5E4E4D84AC4425B61CA577DFE67C25FC057FD6CF97E3C
	FCF7F5E0BEE22481325D814704F8E0C2CCF44CA51CCF92098462DCE68F47FCB7
	0BFFFC1DD322C44962B9582A14E35112718E449A8CF332A52289429229C525D2
	FF64E2DF2CFB033EDF3500B06A3E017B912DA85D6303F64B27105874C0E2F700
	00F2BB6FC1D4280803806883E1CF77FFEF3FFD47A02500806649927100005E44
	242E54CAB33FC708000044A0812AB0411BF4C1182CC0061CC105DCC10BFC6036
	844224C4C24210420A64801C726029AC82422886CDB01D2A602FD4401D34C051
	688693700E2EC255B80E3D700FFA61089EC128BC81090441C808136121DA8801
	628A58238E08179985F821C14804128B2420C9881451224B91354831528A5420
	55481DF23D720239875C46BA913BC8003282FC86BC47319481B2513DD40CB543
	B9A8371A8446A20BD06474319A8F16A09BD072B41A3D8C36A1E7D0AB680FDA8F
	3E43C730C0E8180733C46C302EC6C342B1382C099363CBB122AC0CABC61AB056
	AC03BB89F563CFB17704128145C0093604774220611E4148584C584ED848A820
	1C243411DA093709038451C2272293A84BB426BA11F9C4186232318758482C23
	D6128F132F107B8843C437241289433227B9900249B1A454D212D246D26E5223
	E92CA99B34481A2393C9DA646BB20739942C202BC885E49DE4C3E433E41BE421
	F25B0A9D624071A4F853E22852CA6A4A19E510E534E5066598324155A39A52DD
	A8A15411358F5A42ADA1B652AF5187A81334759A39CD8316494BA5ADA295D31A
	681768F769AFE874BA11DD951E4E97D057D2CBE947E897E803F4770C0D861583
	C7886728199B18071867197718AF984CA619D38B19C754303731EB98E7990F99
	6F55582AB62A7C1591CA0A954A9526951B2A2F54A9AAA6AADEAA0B55F355CB54
	8FA95E537DAE46553353E3A909D496AB55AA9D50EB531B5367A93BA887AA67A8
	6F543FA47E59FD890659C34CC34F43A451A0B15FE3BCC6200B6319B3782C216B
	0DAB86758135C426B1CDD97C762ABB98FD1DBB8B3DAAA9A13943334A3357B352
	F394663F07E39871F89C744E09E728A797F37E8ADE14EF29E2291BA6344CB931
	655C6BAA96979658AB48AB51AB47EBBD36AEEDA79DA6BD45BB59FB810E41C74A
	275C2747678FCE059DE753D953DDA70AA7164D3D3AF5AE2EAA6BA51BA1BB4477
	BF6EA7EE989EBE5E809E4C6FA7DE79BDE7FA1C7D2FFD54FD6DFAA7F5470C5806
	B30C2406DB0CCE183CC535716F3C1D2FC7DBF151435DC34043A561956197E184
	91B9D13CA3D5468D460F8C69C65CE324E36DC66DC6A326062621264B4DEA4DEE
	9A524DB9A629A63B4C3B4CC7CDCCCDA2CDD699359B3D31D732E79BE79BD79BDF
	B7605A785A2CB6A8B6B86549B2E45AA659EEB6BC6E855A3959A558555A5DB346
	AD9DAD25D6BBADBBA711A7B94E934EAB9ED667C3B0F1B6C9B6A9B719B0E5D806
	DBAEB66DB67D6167621767B7C5AEC3EE93BD937DBA7D8DFD3D070D87D90EAB1D
	5A1D7E73B472143A563ADE9ACE9CEE3F7DC5F496E92F6758CF10CFD833E3B613
	CB29C4699D539BD347671767B97383F3888B894B82CB2E973E2E9B1BC6DDC8BD
	E44A74F5715DE17AD2F59D9BB39BC2EDA8DBAFEE36EE69EE87DC9FCC349F299E
	593373D0C3C843E051E5D13F0B9F95306BDFAC7E4F434F8167B5E7232F632F91
	57ADD7B0B7A577AAF761EF173EF63E729FE33EE33C37DE32DE595FCC37C0B7C8
	B7CB4FC36F9E5F85DF437F23FF64FF7AFFD100A78025016703898141815B02FB
	F87A7C21BF8E3F3ADB65F6B2D9ED418CA0B94115418F82AD82E5C1AD2168C8EC
	90AD21F7E798CE91CE690E85507EE8D6D00761E6618BC37E0C2785878557863F
	8E7088581AD131973577D1DC4373DF44FA449644DE9B67314F39AF2D4A352A3E
	AA2E6A3CDA37BA34BA3FC62E6659CCD5589D58496C4B1C392E2AAE366E6CBEDF
	FCEDF387E29DE20BE37B17982FC85D7079A1CEC2F485A716A92E122C3A96404C
	884E3894F041102AA8168C25F21377258E0A79C21DC267222FD136D188D8435C
	2A1E4EF2482A4D7A92EC91BC357924C533A52CE5B98427A990BC4C0D4CDD9B3A
	9E169A76206D323D3ABD31839291907142AA214D93B667EA67E66676CBAC6585
	B2FEC56E8BB72F1E9507C96BB390AC05592D0AB642A6E8545A28D72A07B26765
	5766BFCD89CA3996AB9E2BCDEDCCB3CADB90379CEF9FFFED12C212E192B6A586
	4B572D1D58E6BDAC6A39B23C7179DB0AE315052B865606AC3CB88AB62A6DD54F
	ABED5797AE7EBD267A4D6B815EC1CA82C1B5016BEB0B550AE5857DEBDCD7ED5D
	4F582F59DFB561FA869D1B3E15898AAE14DB1797157FD828DC78E51B876FCABF
	99DC94B4A9ABC4B964CF66D266E9E6DE2D9E5B0E96AA97E6970E6E0DD9DAB40D
	DF56B4EDF5F645DB2F97CD28DBBB83B643B9A3BF3CB8BC65A7C9CECD3B3F54A4
	54F454FA5436EED2DDB561D7F86ED1EE1B7BBCF634ECD5DB5BBCF7FD3EC9BEDB
	5501554DD566D565FB49FBB3F73FAE89AAE9F896FB6D5DAD4E6D71EDC703D203
	FD07230EB6D7B9D4D51DD23D54528FD62BEB470EC71FBEFE9DEF772D0D360D55
	8D9CC6E223704479E4E9F709DFF71E0D3ADA768C7BACE107D31F761D671D2F6A
	429AF29A469B539AFB5B625BBA4FCC3ED1D6EADE7AFC47DB1F0F9C343C59794A
	F354C969DAE982D39367F2CF8C9D959D7D7E2EF9DC60DBA2B67BE763CEDF6A0F
	6FEFBA1074E1D245FF8BE73BBC3BCE5CF2B874F2B2DBE51357B8579AAF3A5F6D
	EA74EA3CFE93D34FC7BB9CBB9AAEB95C6BB9EE7ABDB57B66F7E91B9E37CEDDF4
	BD79F116FFD6D59E393DDDBDF37A6FF7C5F7F5DF16DD7E7227FDCECBBBD97727
	EEADBC4FBC5FF440ED41D943DD87D53F5BFEDCD8EFDC7F6AC077A0F3D1DC47F7
	068583CFFE91F58F0F43058F998FCB860D86EB9E383E3939E23F72FDE9FCA743
	CF64CF269E17FEA2FECBAE17162F7EF8D5EBD7CED198D1A197F29793BF6D7CA5
	FDEAC0EB19AFDBC6C2C61EBEC97833315EF456FBEDC177DC771DEFA3DF0F4FE4
	7C207F28FF68F9B1F553D0A7FB93199393FF040398F3FC63332DDB0000002063
	48524D00007A25000080830000F9FF000080E9000075300000EA6000003A9800
	00176F925FC546000001AC4944415478DAECDCDD6E0221108661E7FE2F9A9ED4
	C4AC5D0B33CC1FBE1C9A5499872F7420BA32C678741C2232C618D272EE5DD13B
	0F21E9A09374920E3A4927E9A083EE8D7D7DAD1B7ECBA4BFC2774C3BDB0BE8F3
	5BCADDE8B010E5D06FF6EC95BF2FBF1025D02F7BB4C7FB975A8054746FECAAF8
	29E84FECE4054FC30F47FFED3A2AFD0F09870F43AF90EE2AA997A0BD7434694D
	43E05DD177A5FBAF36F0439F5E3EF56EE856F0FF3A8DBB13E98E8EC81B5E9CFA
	6215F86C4B377BF76259004FF8EDE81AF09502B5B78CDEF34A435F2DCC5294F6
	C22B728E61E851C5586E1935F025D157C14BDC8124CD790B7A47F0CCB987A257
	03CF9ABF6C384CB406CFA8C3847E0A78743DEEE85DC0236B12C351796A72DEF7
	1859A7690BBC3B7ACBAF4838D7A6429F494357F05978D3695A8B7E6ACA236A74
	41EF0EEE5DA728AE3C8F4FB977ADA09F807E0AB867BDA0830EFAD7837BD5DD16
	3DF2FBE9A0831E8F9EF19B2392FE88FFCD11E86C2FEF1F7EEA288BFEAD0374D0
	41071D74D041071DF48F4770C6FAC998A76064CC9DE7BD80AEDAE278B211DB0B
	E8A033483AE8249DA4834ED249BA75FC000000FFFF030003A628A849121C4F00
	00000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="23" length_in_bytes="3181" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000005D0000
	00430806000000FEAD0928000000097048597300000EC300000EC301C76FA864
	00000A4F6943435050686F746F73686F70204943432070726F66696C65000078
	DA9D53675453E9163DF7DEF4424B8880944B6F5215082052428B801491262A21
	09104A8821A1D91551C1114545041BC8A088038E8E808C15512C0C8A0AD807E4
	21A28E83A3888ACAFBE17BA36BD6BCF7E6CDFEB5D73EE7ACF39DB3CF07C0080C
	9648335135800CA9421E11E083C7C4C6E1E42E40810A2470001008B3642173FD
	230100F87E3C3C2B22C007BE000178D30B0800C04D9BC0301C87FF0FEA42995C
	01808401C07491384B08801400407A8E42A600404601809D98265300A0040060
	CB6362E300502D0060277FE6D300809DF8997B01005B94211501A09100201365
	884400683B00ACCF568A450058300014664BC43900D82D00304957664800B0B7
	00C0CE100BB200080C00305188852900047B0060C8232378008499001446F257
	3CF12BAE10E72A00007899B23CB9243945815B082D710757572E1E28CE49172B
	14366102619A402EC27999193281340FE0F3CC0000A0911511E083F3FD78CE0E
	AECECE368EB60E5F2DEABF06FF226262E3FEE5CFAB70400000E1747ED1FE2C2F
	B31A803B06806DFEA225EE04685E0BA075F78B66B20F40B500A0E9DA57F370F8
	7E3C3C45A190B9D9D9E5E4E4D84AC4425B61CA577DFE67C25FC057FD6CF97E3C
	FCF7F5E0BEE22481325D814704F8E0C2CCF44CA51CCF92098462DCE68F47FCB7
	0BFFFC1DD322C44962B9582A14E35112718E449A8CF332A52289429229C525D2
	FF64E2DF2CFB033EDF3500B06A3E017B912DA85D6303F64B27105874C0E2F700
	00F2BB6FC1D4280803806883E1CF77FFEF3FFD47A02500806649927100005E44
	242E54CAB33FC708000044A0812AB0411BF4C1182CC0061CC105DCC10BFC6036
	844224C4C24210420A64801C726029AC82422886CDB01D2A602FD4401D34C051
	688693700E2EC255B80E3D700FFA61089EC128BC81090441C808136121DA8801
	628A58238E08179985F821C14804128B2420C9881451224B91354831528A5420
	55481DF23D720239875C46BA913BC8003282FC86BC47319481B2513DD40CB543
	B9A8371A8446A20BD06474319A8F16A09BD072B41A3D8C36A1E7D0AB680FDA8F
	3E43C730C0E8180733C46C302EC6C342B1382C099363CBB122AC0CABC61AB056
	AC03BB89F563CFB17704128145C0093604774220611E4148584C584ED848A820
	1C243411DA093709038451C2272293A84BB426BA11F9C4186232318758482C23
	D6128F132F107B8843C437241289433227B9900249B1A454D212D246D26E5223
	E92CA99B34481A2393C9DA646BB20739942C202BC885E49DE4C3E433E41BE421
	F25B0A9D624071A4F853E22852CA6A4A19E510E534E5066598324155A39A52DD
	A8A15411358F5A42ADA1B652AF5187A81334759A39CD8316494BA5ADA295D31A
	681768F769AFE874BA11DD951E4E97D057D2CBE947E897E803F4770C0D861583
	C7886728199B18071867197718AF984CA619D38B19C754303731EB98E7990F99
	6F55582AB62A7C1591CA0A954A9526951B2A2F54A9AAA6AADEAA0B55F355CB54
	8FA95E537DAE46553353E3A909D496AB55AA9D50EB531B5367A93BA887AA67A8
	6F543FA47E59FD890659C34CC34F43A451A0B15FE3BCC6200B6319B3782C216B
	0DAB86758135C426B1CDD97C762ABB98FD1DBB8B3DAAA9A13943334A3357B352
	F394663F07E39871F89C744E09E728A797F37E8ADE14EF29E2291BA6344CB931
	655C6BAA96979658AB48AB51AB47EBBD36AEEDA79DA6BD45BB59FB810E41C74A
	275C2747678FCE059DE753D953DDA70AA7164D3D3AF5AE2EAA6BA51BA1BB4477
	BF6EA7EE989EBE5E809E4C6FA7DE79BDE7FA1C7D2FFD54FD6DFAA7F5470C5806
	B30C2406DB0CCE183CC535716F3C1D2FC7DBF151435DC34043A561956197E184
	91B9D13CA3D5468D460F8C69C65CE324E36DC66DC6A326062621264B4DEA4DEE
	9A524DB9A629A63B4C3B4CC7CDCCCDA2CDD699359B3D31D732E79BE79BD79BDF
	B7605A785A2CB6A8B6B86549B2E45AA659EEB6BC6E855A3959A558555A5DB346
	AD9DAD25D6BBADBBA711A7B94E934EAB9ED667C3B0F1B6C9B6A9B719B0E5D806
	DBAEB66DB67D6167621767B7C5AEC3EE93BD937DBA7D8DFD3D070D87D90EAB1D
	5A1D7E73B472143A563ADE9ACE9CEE3F7DC5F496E92F6758CF10CFD833E3B613
	CB29C4699D539BD347671767B97383F3888B894B82CB2E973E2E9B1BC6DDC8BD
	E44A74F5715DE17AD2F59D9BB39BC2EDA8DBAFEE36EE69EE87DC9FCC349F299E
	593373D0C3C843E051E5D13F0B9F95306BDFAC7E4F434F8167B5E7232F632F91
	57ADD7B0B7A577AAF761EF173EF63E729FE33EE33C37DE32DE595FCC37C0B7C8
	B7CB4FC36F9E5F85DF437F23FF64FF7AFFD100A78025016703898141815B02FB
	F87A7C21BF8E3F3ADB65F6B2D9ED418CA0B94115418F82AD82E5C1AD2168C8EC
	90AD21F7E798CE91CE690E85507EE8D6D00761E6618BC37E0C2785878557863F
	8E7088581AD131973577D1DC4373DF44FA449644DE9B67314F39AF2D4A352A3E
	AA2E6A3CDA37BA34BA3FC62E6659CCD5589D58496C4B1C392E2AAE366E6CBEDF
	FCEDF387E29DE20BE37B17982FC85D7079A1CEC2F485A716A92E122C3A96404C
	884E3894F041102AA8168C25F21377258E0A79C21DC267222FD136D188D8435C
	2A1E4EF2482A4D7A92EC91BC357924C533A52CE5B98427A990BC4C0D4CDD9B3A
	9E169A76206D323D3ABD31839291907142AA214D93B667EA67E66676CBAC6585
	B2FEC56E8BB72F1E9507C96BB390AC05592D0AB642A6E8545A28D72A07B26765
	5766BFCD89CA3996AB9E2BCDEDCCB3CADB90379CEF9FFFED12C212E192B6A586
	4B572D1D58E6BDAC6A39B23C7179DB0AE315052B865606AC3CB88AB62A6DD54F
	ABED5797AE7EBD267A4D6B815EC1CA82C1B5016BEB0B550AE5857DEBDCD7ED5D
	4F582F59DFB561FA869D1B3E15898AAE14DB1797157FD828DC78E51B876FCABF
	99DC94B4A9ABC4B964CF66D266E9E6DE2D9E5B0E96AA97E6970E6E0DD9DAB40D
	DF56B4EDF5F645DB2F97CD28DBBB83B643B9A3BF3CB8BC65A7C9CECD3B3F54A4
	54F454FA5436EED2DDB561D7F86ED1EE1B7BBCF634ECD5DB5BBCF7FD3EC9BEDB
	5501554DD566D565FB49FBB3F73FAE89AAE9F896FB6D5DAD4E6D71EDC703D203
	FD07230EB6D7B9D4D51DD23D54528FD62BEB470EC71FBEFE9DEF772D0D360D55
	8D9CC6E223704479E4E9F709DFF71E0D3ADA768C7BACE107D31F761D671D2F6A
	429AF29A469B539AFB5B625BBA4FCC3ED1D6EADE7AFC47DB1F0F9C343C59794A
	F354C969DAE982D39367F2CF8C9D959D7D7E2EF9DC60DBA2B67BE763CEDF6A0F
	6FEFBA1074E1D245FF8BE73BBC3BCE5CF2B874F2B2DBE51357B8579AAF3A5F6D
	EA74EA3CFE93D34FC7BB9CBB9AAEB95C6BB9EE7ABDB57B66F7E91B9E37CEDDF4
	BD79F116FFD6D59E393DDDBDF37A6FF7C5F7F5DF16DD7E7227FDCECBBBD97727
	EEADBC4FBC5FF440ED41D943DD87D53F5BFEDCD8EFDC7F6AC077A0F3D1DC47F7
	068583CFFE91F58F0F43058F998FCB860D86EB9E383E3939E23F72FDE9FCA743
	CF64CF269E17FEA2FECBAE17162F7EF8D5EBD7CED198D1A197F29793BF6D7CA5
	FDEAC0EB19AFDBC6C2C61EBEC97833315EF456FBEDC177DC771DEFA3DF0F4FE4
	7C207F28FF68F9B1F553D0A7FB93199393FF040398F3FC63332DDB0000002063
	48524D00007A25000080830000F9FF000080E9000075300000EA6000003A9800
	00176F925FC5460000018E4944415478DAECDADB6E03210C4551FCFF1F4D5E1A
	291A655A0638BED0EDC748ADEC85438D55EBBDB78A6166BDF76E2573AF8A5E39
	8C4E079D4EA7D341A7D3E974D04157635F3FAB865FB2D33FE12B763BD70BE8E3
	57CA5D54388874E83777F6939F4F7F1029D02F77B4E2F7A73A805074357656FC
	10F43776F08187E1BBA3FF4C1D99FE86B8C3BBA167E8EE2C5D6F4E77692F329A
	BAC04BD17775F7B731F097393D7DD7CBD057C1FF9A34EE5EA43B262235BC89E6
	E229F0D1916E74F7B272004AF8EDE833E04F0A9CDD32AAF30A437F5AD84A51B3
	0B2FCF1CDDD0BD8A59D932CEC0A7447F0A9E62071294F316F48AE091B9BBA267
	038FCADF363C264A8347D4B1847E0AB8773D72F42AE09E35D9C253792839F51E
	23EA35BD022F472FF92F12E2DAA6D047BAA12AF828FCD26B7A16FDD42EF7A851
	825E1D5C5DA74DAC3C8FEF7275ADA09F807E0AB8B25ED04107FDDF83ABEA061D
	74D041071D74D03DD11BF13564E8C4A66F0EE8A0834E800E3A013AE804E8A013
	A0830E3A013AE804E8A013A0834EB4D65A7B010000FFFF0300C200B999A5EE3F
	5C0000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="24" length_in_bytes="3128" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000005D0000
	00620806000000325DDFBB000000097048597300000EC300000EC301C76FA864
	00000A4F6943435050686F746F73686F70204943432070726F66696C65000078
	DA9D53675453E9163DF7DEF4424B8880944B6F5215082052428B801491262A21
	09104A8821A1D91551C1114545041BC8A088038E8E808C15512C0C8A0AD807E4
	21A28E83A3888ACAFBE17BA36BD6BCF7E6CDFEB5D73EE7ACF39DB3CF07C0080C
	9648335135800CA9421E11E083C7C4C6E1E42E40810A2470001008B3642173FD
	230100F87E3C3C2B22C007BE000178D30B0800C04D9BC0301C87FF0FEA42995C
	01808401C07491384B08801400407A8E42A600404601809D98265300A0040060
	CB6362E300502D0060277FE6D300809DF8997B01005B94211501A09100201365
	884400683B00ACCF568A450058300014664BC43900D82D00304957664800B0B7
	00C0CE100BB200080C00305188852900047B0060C8232378008499001446F257
	3CF12BAE10E72A00007899B23CB9243945815B082D710757572E1E28CE49172B
	14366102619A402EC27999193281340FE0F3CC0000A0911511E083F3FD78CE0E
	AECECE368EB60E5F2DEABF06FF226262E3FEE5CFAB70400000E1747ED1FE2C2F
	B31A803B06806DFEA225EE04685E0BA075F78B66B20F40B500A0E9DA57F370F8
	7E3C3C45A190B9D9D9E5E4E4D84AC4425B61CA577DFE67C25FC057FD6CF97E3C
	FCF7F5E0BEE22481325D814704F8E0C2CCF44CA51CCF92098462DCE68F47FCB7
	0BFFFC1DD322C44962B9582A14E35112718E449A8CF332A52289429229C525D2
	FF64E2DF2CFB033EDF3500B06A3E017B912DA85D6303F64B27105874C0E2F700
	00F2BB6FC1D4280803806883E1CF77FFEF3FFD47A02500806649927100005E44
	242E54CAB33FC708000044A0812AB0411BF4C1182CC0061CC105DCC10BFC6036
	844224C4C24210420A64801C726029AC82422886CDB01D2A602FD4401D34C051
	688693700E2EC255B80E3D700FFA61089EC128BC81090441C808136121DA8801
	628A58238E08179985F821C14804128B2420C9881451224B91354831528A5420
	55481DF23D720239875C46BA913BC8003282FC86BC47319481B2513DD40CB543
	B9A8371A8446A20BD06474319A8F16A09BD072B41A3D8C36A1E7D0AB680FDA8F
	3E43C730C0E8180733C46C302EC6C342B1382C099363CBB122AC0CABC61AB056
	AC03BB89F563CFB17704128145C0093604774220611E4148584C584ED848A820
	1C243411DA093709038451C2272293A84BB426BA11F9C4186232318758482C23
	D6128F132F107B8843C437241289433227B9900249B1A454D212D246D26E5223
	E92CA99B34481A2393C9DA646BB20739942C202BC885E49DE4C3E433E41BE421
	F25B0A9D624071A4F853E22852CA6A4A19E510E534E5066598324155A39A52DD
	A8A15411358F5A42ADA1B652AF5187A81334759A39CD8316494BA5ADA295D31A
	681768F769AFE874BA11DD951E4E97D057D2CBE947E897E803F4770C0D861583
	C7886728199B18071867197718AF984CA619D38B19C754303731EB98E7990F99
	6F55582AB62A7C1591CA0A954A9526951B2A2F54A9AAA6AADEAA0B55F355CB54
	8FA95E537DAE46553353E3A909D496AB55AA9D50EB531B5367A93BA887AA67A8
	6F543FA47E59FD890659C34CC34F43A451A0B15FE3BCC6200B6319B3782C216B
	0DAB86758135C426B1CDD97C762ABB98FD1DBB8B3DAAA9A13943334A3357B352
	F394663F07E39871F89C744E09E728A797F37E8ADE14EF29E2291BA6344CB931
	655C6BAA96979658AB48AB51AB47EBBD36AEEDA79DA6BD45BB59FB810E41C74A
	275C2747678FCE059DE753D953DDA70AA7164D3D3AF5AE2EAA6BA51BA1BB4477
	BF6EA7EE989EBE5E809E4C6FA7DE79BDE7FA1C7D2FFD54FD6DFAA7F5470C5806
	B30C2406DB0CCE183CC535716F3C1D2FC7DBF151435DC34043A561956197E184
	91B9D13CA3D5468D460F8C69C65CE324E36DC66DC6A326062621264B4DEA4DEE
	9A524DB9A629A63B4C3B4CC7CDCCCDA2CDD699359B3D31D732E79BE79BD79BDF
	B7605A785A2CB6A8B6B86549B2E45AA659EEB6BC6E855A3959A558555A5DB346
	AD9DAD25D6BBADBBA711A7B94E934EAB9ED667C3B0F1B6C9B6A9B719B0E5D806
	DBAEB66DB67D6167621767B7C5AEC3EE93BD937DBA7D8DFD3D070D87D90EAB1D
	5A1D7E73B472143A563ADE9ACE9CEE3F7DC5F496E92F6758CF10CFD833E3B613
	CB29C4699D539BD347671767B97383F3888B894B82CB2E973E2E9B1BC6DDC8BD
	E44A74F5715DE17AD2F59D9BB39BC2EDA8DBAFEE36EE69EE87DC9FCC349F299E
	593373D0C3C843E051E5D13F0B9F95306BDFAC7E4F434F8167B5E7232F632F91
	57ADD7B0B7A577AAF761EF173EF63E729FE33EE33C37DE32DE595FCC37C0B7C8
	B7CB4FC36F9E5F85DF437F23FF64FF7AFFD100A78025016703898141815B02FB
	F87A7C21BF8E3F3ADB65F6B2D9ED418CA0B94115418F82AD82E5C1AD2168C8EC
	90AD21F7E798CE91CE690E85507EE8D6D00761E6618BC37E0C2785878557863F
	8E7088581AD131973577D1DC4373DF44FA449644DE9B67314F39AF2D4A352A3E
	AA2E6A3CDA37BA34BA3FC62E6659CCD5589D58496C4B1C392E2AAE366E6CBEDF
	FCEDF387E29DE20BE37B17982FC85D7079A1CEC2F485A716A92E122C3A96404C
	884E3894F041102AA8168C25F21377258E0A79C21DC267222FD136D188D8435C
	2A1E4EF2482A4D7A92EC91BC357924C533A52CE5B98427A990BC4C0D4CDD9B3A
	9E169A76206D323D3ABD31839291907142AA214D93B667EA67E66676CBAC6585
	B2FEC56E8BB72F1E9507C96BB390AC05592D0AB642A6E8545A28D72A07B26765
	5766BFCD89CA3996AB9E2BCDEDCCB3CADB90379CEF9FFFED12C212E192B6A586
	4B572D1D58E6BDAC6A39B23C7179DB0AE315052B865606AC3CB88AB62A6DD54F
	ABED5797AE7EBD267A4D6B815EC1CA82C1B5016BEB0B550AE5857DEBDCD7ED5D
	4F582F59DFB561FA869D1B3E15898AAE14DB1797157FD828DC78E51B876FCABF
	99DC94B4A9ABC4B964CF66D266E9E6DE2D9E5B0E96AA97E6970E6E0DD9DAB40D
	DF56B4EDF5F645DB2F97CD28DBBB83B643B9A3BF3CB8BC65A7C9CECD3B3F54A4
	54F454FA5436EED2DDB561D7F86ED1EE1B7BBCF634ECD5DB5BBCF7FD3EC9BEDB
	5501554DD566D565FB49FBB3F73FAE89AAE9F896FB6D5DAD4E6D71EDC703D203
	FD07230EB6D7B9D4D51DD23D54528FD62BEB470EC71FBEFE9DEF772D0D360D55
	8D9CC6E223704479E4E9F709DFF71E0D3ADA768C7BACE107D31F761D671D2F6A
	429AF29A469B539AFB5B625BBA4FCC3ED1D6EADE7AFC47DB1F0F9C343C59794A
	F354C969DAE982D39367F2CF8C9D959D7D7E2EF9DC60DBA2B67BE763CEDF6A0F
	6FEFBA1074E1D245FF8BE73BBC3BCE5CF2B874F2B2DBE51357B8579AAF3A5F6D
	EA74EA3CFE93D34FC7BB9CBB9AAEB95C6BB9EE7ABDB57B66F7E91B9E37CEDDF4
	BD79F116FFD6D59E393DDDBDF37A6FF7C5F7F5DF16DD7E7227FDCECBBBD97727
	EEADBC4FBC5FF440ED41D943DD87D53F5BFEDCD8EFDC7F6AC077A0F3D1DC47F7
	068583CFFE91F58F0F43058F998FCB860D86EB9E383E3939E23F72FDE9FCA743
	CF64CF269E17FEA2FECBAE17162F7EF8D5EBD7CED198D1A197F29793BF6D7CA5
	FDEAC0EB19AFDBC6C2C61EBEC97833315EF456FBEDC177DC771DEFA3DF0F4FE4
	7C207F28FF68F9B1F553D0A7FB93199393FF040398F3FC63332DDB0000002063
	48524D00007A25000080830000F9FF000080E9000075300000EA6000003A9800
	00176F925FC546000001594944415478DAECDA5B6E84400C45C161FF8BEEFC47
	8A92C960FB1AD5D900EE9278355CE79C977ABBA043872EE8D0051DBAA0431774
	E8D0D307BFAE73CEB9A037836F855F87FE1D7A23FC2AF49F80B7C1AF41FF0D76
	13FC0AF4BF826E818F477F1772037C34FA7F01D3E163D13F854B868F44BF0B2C
	153E0EFD6EA844F828F42AA034F818F46A9824F808F42E9014F871F46E8804F8
	51F4298069F831F4F1850F1E7F043DE6DA3A75A675A3C73DBE0DCCD38A1EFB86
	D87D33EF428FDF846A9CAF057DCD3E77D7FB4235FABA4F690DF396A2AFFD5A5F
	BD255185BEF9BF94EAF94BD0B78357AFE376F4A78057AEE756F4A78157AD0B3A
	74E8D0A143870E1D3A74E8D0A143870E1D3A74E8D0A143870E1D3A74E8D0A143
	870E1D3A74E8D0A143870E1D3A74E8D0A143870E1D3A74E8D0A14387FEF170AF
	87168B2EE8D0051D3A7441872EE8D0051DBAA043872EE8D0051DBADEE90B0000
	FFFF030035D1356A6924E31F0000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="25" length_in_bytes="3309" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000005D0000
	00620806000000325DDFBB000000097048597300000EC300000EC301C76FA864
	00000A4F6943435050686F746F73686F70204943432070726F66696C65000078
	DA9D53675453E9163DF7DEF4424B8880944B6F5215082052428B801491262A21
	09104A8821A1D91551C1114545041BC8A088038E8E808C15512C0C8A0AD807E4
	21A28E83A3888ACAFBE17BA36BD6BCF7E6CDFEB5D73EE7ACF39DB3CF07C0080C
	9648335135800CA9421E11E083C7C4C6E1E42E40810A2470001008B3642173FD
	230100F87E3C3C2B22C007BE000178D30B0800C04D9BC0301C87FF0FEA42995C
	01808401C07491384B08801400407A8E42A600404601809D98265300A0040060
	CB6362E300502D0060277FE6D300809DF8997B01005B94211501A09100201365
	884400683B00ACCF568A450058300014664BC43900D82D00304957664800B0B7
	00C0CE100BB200080C00305188852900047B0060C8232378008499001446F257
	3CF12BAE10E72A00007899B23CB9243945815B082D710757572E1E28CE49172B
	14366102619A402EC27999193281340FE0F3CC0000A0911511E083F3FD78CE0E
	AECECE368EB60E5F2DEABF06FF226262E3FEE5CFAB70400000E1747ED1FE2C2F
	B31A803B06806DFEA225EE04685E0BA075F78B66B20F40B500A0E9DA57F370F8
	7E3C3C45A190B9D9D9E5E4E4D84AC4425B61CA577DFE67C25FC057FD6CF97E3C
	FCF7F5E0BEE22481325D814704F8E0C2CCF44CA51CCF92098462DCE68F47FCB7
	0BFFFC1DD322C44962B9582A14E35112718E449A8CF332A52289429229C525D2
	FF64E2DF2CFB033EDF3500B06A3E017B912DA85D6303F64B27105874C0E2F700
	00F2BB6FC1D4280803806883E1CF77FFEF3FFD47A02500806649927100005E44
	242E54CAB33FC708000044A0812AB0411BF4C1182CC0061CC105DCC10BFC6036
	844224C4C24210420A64801C726029AC82422886CDB01D2A602FD4401D34C051
	688693700E2EC255B80E3D700FFA61089EC128BC81090441C808136121DA8801
	628A58238E08179985F821C14804128B2420C9881451224B91354831528A5420
	55481DF23D720239875C46BA913BC8003282FC86BC47319481B2513DD40CB543
	B9A8371A8446A20BD06474319A8F16A09BD072B41A3D8C36A1E7D0AB680FDA8F
	3E43C730C0E8180733C46C302EC6C342B1382C099363CBB122AC0CABC61AB056
	AC03BB89F563CFB17704128145C0093604774220611E4148584C584ED848A820
	1C243411DA093709038451C2272293A84BB426BA11F9C4186232318758482C23
	D6128F132F107B8843C437241289433227B9900249B1A454D212D246D26E5223
	E92CA99B34481A2393C9DA646BB20739942C202BC885E49DE4C3E433E41BE421
	F25B0A9D624071A4F853E22852CA6A4A19E510E534E5066598324155A39A52DD
	A8A15411358F5A42ADA1B652AF5187A81334759A39CD8316494BA5ADA295D31A
	681768F769AFE874BA11DD951E4E97D057D2CBE947E897E803F4770C0D861583
	C7886728199B18071867197718AF984CA619D38B19C754303731EB98E7990F99
	6F55582AB62A7C1591CA0A954A9526951B2A2F54A9AAA6AADEAA0B55F355CB54
	8FA95E537DAE46553353E3A909D496AB55AA9D50EB531B5367A93BA887AA67A8
	6F543FA47E59FD890659C34CC34F43A451A0B15FE3BCC6200B6319B3782C216B
	0DAB86758135C426B1CDD97C762ABB98FD1DBB8B3DAAA9A13943334A3357B352
	F394663F07E39871F89C744E09E728A797F37E8ADE14EF29E2291BA6344CB931
	655C6BAA96979658AB48AB51AB47EBBD36AEEDA79DA6BD45BB59FB810E41C74A
	275C2747678FCE059DE753D953DDA70AA7164D3D3AF5AE2EAA6BA51BA1BB4477
	BF6EA7EE989EBE5E809E4C6FA7DE79BDE7FA1C7D2FFD54FD6DFAA7F5470C5806
	B30C2406DB0CCE183CC535716F3C1D2FC7DBF151435DC34043A561956197E184
	91B9D13CA3D5468D460F8C69C65CE324E36DC66DC6A326062621264B4DEA4DEE
	9A524DB9A629A63B4C3B4CC7CDCCCDA2CDD699359B3D31D732E79BE79BD79BDF
	B7605A785A2CB6A8B6B86549B2E45AA659EEB6BC6E855A3959A558555A5DB346
	AD9DAD25D6BBADBBA711A7B94E934EAB9ED667C3B0F1B6C9B6A9B719B0E5D806
	DBAEB66DB67D6167621767B7C5AEC3EE93BD937DBA7D8DFD3D070D87D90EAB1D
	5A1D7E73B472143A563ADE9ACE9CEE3F7DC5F496E92F6758CF10CFD833E3B613
	CB29C4699D539BD347671767B97383F3888B894B82CB2E973E2E9B1BC6DDC8BD
	E44A74F5715DE17AD2F59D9BB39BC2EDA8DBAFEE36EE69EE87DC9FCC349F299E
	593373D0C3C843E051E5D13F0B9F95306BDFAC7E4F434F8167B5E7232F632F91
	57ADD7B0B7A577AAF761EF173EF63E729FE33EE33C37DE32DE595FCC37C0B7C8
	B7CB4FC36F9E5F85DF437F23FF64FF7AFFD100A78025016703898141815B02FB
	F87A7C21BF8E3F3ADB65F6B2D9ED418CA0B94115418F82AD82E5C1AD2168C8EC
	90AD21F7E798CE91CE690E85507EE8D6D00761E6618BC37E0C2785878557863F
	8E7088581AD131973577D1DC4373DF44FA449644DE9B67314F39AF2D4A352A3E
	AA2E6A3CDA37BA34BA3FC62E6659CCD5589D58496C4B1C392E2AAE366E6CBEDF
	FCEDF387E29DE20BE37B17982FC85D7079A1CEC2F485A716A92E122C3A96404C
	884E3894F041102AA8168C25F21377258E0A79C21DC267222FD136D188D8435C
	2A1E4EF2482A4D7A92EC91BC357924C533A52CE5B98427A990BC4C0D4CDD9B3A
	9E169A76206D323D3ABD31839291907142AA214D93B667EA67E66676CBAC6585
	B2FEC56E8BB72F1E9507C96BB390AC05592D0AB642A6E8545A28D72A07B26765
	5766BFCD89CA3996AB9E2BCDEDCCB3CADB90379CEF9FFFED12C212E192B6A586
	4B572D1D58E6BDAC6A39B23C7179DB0AE315052B865606AC3CB88AB62A6DD54F
	ABED5797AE7EBD267A4D6B815EC1CA82C1B5016BEB0B550AE5857DEBDCD7ED5D
	4F582F59DFB561FA869D1B3E15898AAE14DB1797157FD828DC78E51B876FCABF
	99DC94B4A9ABC4B964CF66D266E9E6DE2D9E5B0E96AA97E6970E6E0DD9DAB40D
	DF56B4EDF5F645DB2F97CD28DBBB83B643B9A3BF3CB8BC65A7C9CECD3B3F54A4
	54F454FA5436EED2DDB561D7F86ED1EE1B7BBCF634ECD5DB5BBCF7FD3EC9BEDB
	5501554DD566D565FB49FBB3F73FAE89AAE9F896FB6D5DAD4E6D71EDC703D203
	FD07230EB6D7B9D4D51DD23D54528FD62BEB470EC71FBEFE9DEF772D0D360D55
	8D9CC6E223704479E4E9F709DFF71E0D3ADA768C7BACE107D31F761D671D2F6A
	429AF29A469B539AFB5B625BBA4FCC3ED1D6EADE7AFC47DB1F0F9C343C59794A
	F354C969DAE982D39367F2CF8C9D959D7D7E2EF9DC60DBA2B67BE763CEDF6A0F
	6FEFBA1074E1D245FF8BE73BBC3BCE5CF2B874F2B2DBE51357B8579AAF3A5F6D
	EA74EA3CFE93D34FC7BB9CBB9AAEB95C6BB9EE7ABDB57B66F7E91B9E37CEDDF4
	BD79F116FFD6D59E393DDDBDF37A6FF7C5F7F5DF16DD7E7227FDCECBBBD97727
	EEADBC4FBC5FF440ED41D943DD87D53F5BFEDCD8EFDC7F6AC077A0F3D1DC47F7
	068583CFFE91F58F0F43058F998FCB860D86EB9E383E3939E23F72FDE9FCA743
	CF64CF269E17FEA2FECBAE17162F7EF8D5EBD7CED198D1A197F29793BF6D7CA5
	FDEAC0EB19AFDBC6C2C61EBEC97833315EF456FBEDC177DC771DEFA3DF0F4FE4
	7C207F28FF68F9B1F553D0A7FB93199393FF040398F3FC63332DDB0000002063
	48524D00007A25000080830000F9FF000080E9000075300000EA6000003A9800
	00176F925FC5460000020E4944415478DAECDDD16EC3200C85E1F8FD1F9A5D6C
	ADB2295D1382CD39F4F74D55A929F813A5404812ADB5CD3122A2B5D6C2B2EE8E
	E83FE05B446C8EF076E80FF0DD7B3B782BF4BFE0AEF036E8AFC01DE12DD0DF81
	BBC1CBA39F0577829746BF0AEE022F8BDE0BEE002F897E175C1D5E0E7D14B832
	BC14FA6870557819F4CE518A25BC047AEFB0D07538391DFD2E9C23FC54F45160
	6EF0D3D0474339C14F41CF0272812F47CF8671802F45AF0251872F43AF865086
	2F419F05A00A9F8E3E3B7145F854749584D5E0D3D0E51215AA4F24ADEA69F6A5
	2ABFBCD1E8F2C33581FAC5E013061E33C2D97FEEA3D0ED169D26D637069D8BF4
	5CD79E357FB88BEEBE2F6546FDE3E63687253602952F51F4A2AFB6F3AA329FE8
	DC41B5DC56B7CABC2EA3AF0A5E995F5C2C6069F0AA3CD3D05DC12B724D417707
	CFCE7738FA2AE099390F455F0D3C2B6FD041071D74D041071D74D041071D74D0
	411745DFDF41E84AE1CE771ECACEFB14FAB66DA7AE66DB5FF5F638C6193D2BEF
	F8FECCF38B7FBD1E1DF0AEF017C7841BF6A8BC8F5C69E9335A3A7DBA609FCEE8
	852123E8A0830E3AE8A0830E3AE8A0830E3AE8A0830E3AE8A0830E3AE8A0830E
	BA367AE5E940D041AF473FDA225151E6C7B7F43DBCC26DA8E85E3E117DD59045
	FFD4001D74D041071D74D04107FDDF2938717D661C3CC27E42DD5D1F61DFD3C2
	401F00EE0A4FF7023AE804E8B47482960E3A414BD78BAF010087DED38AB07A8F
	0C0000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="26" length_in_bytes="3273" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000005D0000
	00620806000000325DDFBB000000097048597300000EC300000EC301C76FA864
	00000A4F6943435050686F746F73686F70204943432070726F66696C65000078
	DA9D53675453E9163DF7DEF4424B8880944B6F5215082052428B801491262A21
	09104A8821A1D91551C1114545041BC8A088038E8E808C15512C0C8A0AD807E4
	21A28E83A3888ACAFBE17BA36BD6BCF7E6CDFEB5D73EE7ACF39DB3CF07C0080C
	9648335135800CA9421E11E083C7C4C6E1E42E40810A2470001008B3642173FD
	230100F87E3C3C2B22C007BE000178D30B0800C04D9BC0301C87FF0FEA42995C
	01808401C07491384B08801400407A8E42A600404601809D98265300A0040060
	CB6362E300502D0060277FE6D300809DF8997B01005B94211501A09100201365
	884400683B00ACCF568A450058300014664BC43900D82D00304957664800B0B7
	00C0CE100BB200080C00305188852900047B0060C8232378008499001446F257
	3CF12BAE10E72A00007899B23CB9243945815B082D710757572E1E28CE49172B
	14366102619A402EC27999193281340FE0F3CC0000A0911511E083F3FD78CE0E
	AECECE368EB60E5F2DEABF06FF226262E3FEE5CFAB70400000E1747ED1FE2C2F
	B31A803B06806DFEA225EE04685E0BA075F78B66B20F40B500A0E9DA57F370F8
	7E3C3C45A190B9D9D9E5E4E4D84AC4425B61CA577DFE67C25FC057FD6CF97E3C
	FCF7F5E0BEE22481325D814704F8E0C2CCF44CA51CCF92098462DCE68F47FCB7
	0BFFFC1DD322C44962B9582A14E35112718E449A8CF332A52289429229C525D2
	FF64E2DF2CFB033EDF3500B06A3E017B912DA85D6303F64B27105874C0E2F700
	00F2BB6FC1D4280803806883E1CF77FFEF3FFD47A02500806649927100005E44
	242E54CAB33FC708000044A0812AB0411BF4C1182CC0061CC105DCC10BFC6036
	844224C4C24210420A64801C726029AC82422886CDB01D2A602FD4401D34C051
	688693700E2EC255B80E3D700FFA61089EC128BC81090441C808136121DA8801
	628A58238E08179985F821C14804128B2420C9881451224B91354831528A5420
	55481DF23D720239875C46BA913BC8003282FC86BC47319481B2513DD40CB543
	B9A8371A8446A20BD06474319A8F16A09BD072B41A3D8C36A1E7D0AB680FDA8F
	3E43C730C0E8180733C46C302EC6C342B1382C099363CBB122AC0CABC61AB056
	AC03BB89F563CFB17704128145C0093604774220611E4148584C584ED848A820
	1C243411DA093709038451C2272293A84BB426BA11F9C4186232318758482C23
	D6128F132F107B8843C437241289433227B9900249B1A454D212D246D26E5223
	E92CA99B34481A2393C9DA646BB20739942C202BC885E49DE4C3E433E41BE421
	F25B0A9D624071A4F853E22852CA6A4A19E510E534E5066598324155A39A52DD
	A8A15411358F5A42ADA1B652AF5187A81334759A39CD8316494BA5ADA295D31A
	681768F769AFE874BA11DD951E4E97D057D2CBE947E897E803F4770C0D861583
	C7886728199B18071867197718AF984CA619D38B19C754303731EB98E7990F99
	6F55582AB62A7C1591CA0A954A9526951B2A2F54A9AAA6AADEAA0B55F355CB54
	8FA95E537DAE46553353E3A909D496AB55AA9D50EB531B5367A93BA887AA67A8
	6F543FA47E59FD890659C34CC34F43A451A0B15FE3BCC6200B6319B3782C216B
	0DAB86758135C426B1CDD97C762ABB98FD1DBB8B3DAAA9A13943334A3357B352
	F394663F07E39871F89C744E09E728A797F37E8ADE14EF29E2291BA6344CB931
	655C6BAA96979658AB48AB51AB47EBBD36AEEDA79DA6BD45BB59FB810E41C74A
	275C2747678FCE059DE753D953DDA70AA7164D3D3AF5AE2EAA6BA51BA1BB4477
	BF6EA7EE989EBE5E809E4C6FA7DE79BDE7FA1C7D2FFD54FD6DFAA7F5470C5806
	B30C2406DB0CCE183CC535716F3C1D2FC7DBF151435DC34043A561956197E184
	91B9D13CA3D5468D460F8C69C65CE324E36DC66DC6A326062621264B4DEA4DEE
	9A524DB9A629A63B4C3B4CC7CDCCCDA2CDD699359B3D31D732E79BE79BD79BDF
	B7605A785A2CB6A8B6B86549B2E45AA659EEB6BC6E855A3959A558555A5DB346
	AD9DAD25D6BBADBBA711A7B94E934EAB9ED667C3B0F1B6C9B6A9B719B0E5D806
	DBAEB66DB67D6167621767B7C5AEC3EE93BD937DBA7D8DFD3D070D87D90EAB1D
	5A1D7E73B472143A563ADE9ACE9CEE3F7DC5F496E92F6758CF10CFD833E3B613
	CB29C4699D539BD347671767B97383F3888B894B82CB2E973E2E9B1BC6DDC8BD
	E44A74F5715DE17AD2F59D9BB39BC2EDA8DBAFEE36EE69EE87DC9FCC349F299E
	593373D0C3C843E051E5D13F0B9F95306BDFAC7E4F434F8167B5E7232F632F91
	57ADD7B0B7A577AAF761EF173EF63E729FE33EE33C37DE32DE595FCC37C0B7C8
	B7CB4FC36F9E5F85DF437F23FF64FF7AFFD100A78025016703898141815B02FB
	F87A7C21BF8E3F3ADB65F6B2D9ED418CA0B94115418F82AD82E5C1AD2168C8EC
	90AD21F7E798CE91CE690E85507EE8D6D00761E6618BC37E0C2785878557863F
	8E7088581AD131973577D1DC4373DF44FA449644DE9B67314F39AF2D4A352A3E
	AA2E6A3CDA37BA34BA3FC62E6659CCD5589D58496C4B1C392E2AAE366E6CBEDF
	FCEDF387E29DE20BE37B17982FC85D7079A1CEC2F485A716A92E122C3A96404C
	884E3894F041102AA8168C25F21377258E0A79C21DC267222FD136D188D8435C
	2A1E4EF2482A4D7A92EC91BC357924C533A52CE5B98427A990BC4C0D4CDD9B3A
	9E169A76206D323D3ABD31839291907142AA214D93B667EA67E66676CBAC6585
	B2FEC56E8BB72F1E9507C96BB390AC05592D0AB642A6E8545A28D72A07B26765
	5766BFCD89CA3996AB9E2BCDEDCCB3CADB90379CEF9FFFED12C212E192B6A586
	4B572D1D58E6BDAC6A39B23C7179DB0AE315052B865606AC3CB88AB62A6DD54F
	ABED5797AE7EBD267A4D6B815EC1CA82C1B5016BEB0B550AE5857DEBDCD7ED5D
	4F582F59DFB561FA869D1B3E15898AAE14DB1797157FD828DC78E51B876FCABF
	99DC94B4A9ABC4B964CF66D266E9E6DE2D9E5B0E96AA97E6970E6E0DD9DAB40D
	DF56B4EDF5F645DB2F97CD28DBBB83B643B9A3BF3CB8BC65A7C9CECD3B3F54A4
	54F454FA5436EED2DDB561D7F86ED1EE1B7BBCF634ECD5DB5BBCF7FD3EC9BEDB
	5501554DD566D565FB49FBB3F73FAE89AAE9F896FB6D5DAD4E6D71EDC703D203
	FD07230EB6D7B9D4D51DD23D54528FD62BEB470EC71FBEFE9DEF772D0D360D55
	8D9CC6E223704479E4E9F709DFF71E0D3ADA768C7BACE107D31F761D671D2F6A
	429AF29A469B539AFB5B625BBA4FCC3ED1D6EADE7AFC47DB1F0F9C343C59794A
	F354C969DAE982D39367F2CF8C9D959D7D7E2EF9DC60DBA2B67BE763CEDF6A0F
	6FEFBA1074E1D245FF8BE73BBC3BCE5CF2B874F2B2DBE51357B8579AAF3A5F6D
	EA74EA3CFE93D34FC7BB9CBB9AAEB95C6BB9EE7ABDB57B66F7E91B9E37CEDDF4
	BD79F116FFD6D59E393DDDBDF37A6FF7C5F7F5DF16DD7E7227FDCECBBBD97727
	EEADBC4FBC5FF440ED41D943DD87D53F5BFEDCD8EFDC7F6AC077A0F3D1DC47F7
	068583CFFE91F58F0F43058F998FCB860D86EB9E383E3939E23F72FDE9FCA743
	CF64CF269E17FEA2FECBAE17162F7EF8D5EBD7CED198D1A197F29793BF6D7CA5
	FDEAC0EB19AFDBC6C2C61EBEC97833315EF456FBEDC177DC771DEFA3DF0F4FE4
	7C207F28FF68F9B1F553D0A7FB93199393FF040398F3FC63332DDB0000002063
	48524D00007A25000080830000F9FF000080E9000075300000EA6000003A9800
	00176F925FC546000001EA4944415478DAECDCD16E8330104451EFFF7FB4FBD0
	A6A255A204D85DCF58775FA248103C47408C31C49C73385644CC396758B6DD11
	FD077C44C47084B7437F801FBEDBC15BA1FF077785B7417F05EE086F81FE0EDC
	0D5E1EFD5370277869F4B3E02EF0B2E857C11DE025D1EF82ABC3CBA167812BC3
	4BA16783ABC2CBA05FECA558C24BA05FED16BA762797A3DF8573845F8A9E05E6
	06BF0C3D1BCA097E097A15900B7C3B7A358C037C2B7A17883A7C1B7A3784327C
	0BFA2A0055F872F4D5C115E14BD15502ABC197A1CB05156A4F148DEA699E4B55
	8EBC6C74F9EE9A40FB22F98681C715E1EA3FF72C74BB41A785ED8DA47B919EE3
	DAABAE1FEEA2BBCF4B59D1FEB839CD618B8940ED431457D1779B79D599272ECE
	A0DA6EAA5B67AED3E8BB8277E68B931BD81ABC2B6719BA2B7847D6127477F0EA
	BCE9E8BB8057664E45DF0DBC2A37E8A0830E3AE8A0830E3AE8A0830E3AE8A08B
	A21FDF207466E3CE6F1EAACEFD11FA18E3A3A7D98E4FBD3DD67146AFCA1DDFCB
	FCFEF09FCF672BBCDBF88B75C20D3B2BF73357F6F4157B3AE774C1733ABD17BA
	8CA0830E3AE8A0830E3AE8A0830E3AE8A0830E3AE8A0830E3AE8A0830E3AE8A0
	830E3AE8A0830E7A3AFAA09E56193A9574E4800E3AE814E8A053A0834E810E3A
	053AE8A053A0834E810E3A053AE8D418638CAF01004647648AF7D79CF1000000
	0049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="27" length_in_bytes="3094" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000005D0000
	00620806000000325DDFBB000000097048597300000EC300000EC301C76FA864
	00000A4F6943435050686F746F73686F70204943432070726F66696C65000078
	DA9D53675453E9163DF7DEF4424B8880944B6F5215082052428B801491262A21
	09104A8821A1D91551C1114545041BC8A088038E8E808C15512C0C8A0AD807E4
	21A28E83A3888ACAFBE17BA36BD6BCF7E6CDFEB5D73EE7ACF39DB3CF07C0080C
	9648335135800CA9421E11E083C7C4C6E1E42E40810A2470001008B3642173FD
	230100F87E3C3C2B22C007BE000178D30B0800C04D9BC0301C87FF0FEA42995C
	01808401C07491384B08801400407A8E42A600404601809D98265300A0040060
	CB6362E300502D0060277FE6D300809DF8997B01005B94211501A09100201365
	884400683B00ACCF568A450058300014664BC43900D82D00304957664800B0B7
	00C0CE100BB200080C00305188852900047B0060C8232378008499001446F257
	3CF12BAE10E72A00007899B23CB9243945815B082D710757572E1E28CE49172B
	14366102619A402EC27999193281340FE0F3CC0000A0911511E083F3FD78CE0E
	AECECE368EB60E5F2DEABF06FF226262E3FEE5CFAB70400000E1747ED1FE2C2F
	B31A803B06806DFEA225EE04685E0BA075F78B66B20F40B500A0E9DA57F370F8
	7E3C3C45A190B9D9D9E5E4E4D84AC4425B61CA577DFE67C25FC057FD6CF97E3C
	FCF7F5E0BEE22481325D814704F8E0C2CCF44CA51CCF92098462DCE68F47FCB7
	0BFFFC1DD322C44962B9582A14E35112718E449A8CF332A52289429229C525D2
	FF64E2DF2CFB033EDF3500B06A3E017B912DA85D6303F64B27105874C0E2F700
	00F2BB6FC1D4280803806883E1CF77FFEF3FFD47A02500806649927100005E44
	242E54CAB33FC708000044A0812AB0411BF4C1182CC0061CC105DCC10BFC6036
	844224C4C24210420A64801C726029AC82422886CDB01D2A602FD4401D34C051
	688693700E2EC255B80E3D700FFA61089EC128BC81090441C808136121DA8801
	628A58238E08179985F821C14804128B2420C9881451224B91354831528A5420
	55481DF23D720239875C46BA913BC8003282FC86BC47319481B2513DD40CB543
	B9A8371A8446A20BD06474319A8F16A09BD072B41A3D8C36A1E7D0AB680FDA8F
	3E43C730C0E8180733C46C302EC6C342B1382C099363CBB122AC0CABC61AB056
	AC03BB89F563CFB17704128145C0093604774220611E4148584C584ED848A820
	1C243411DA093709038451C2272293A84BB426BA11F9C4186232318758482C23
	D6128F132F107B8843C437241289433227B9900249B1A454D212D246D26E5223
	E92CA99B34481A2393C9DA646BB20739942C202BC885E49DE4C3E433E41BE421
	F25B0A9D624071A4F853E22852CA6A4A19E510E534E5066598324155A39A52DD
	A8A15411358F5A42ADA1B652AF5187A81334759A39CD8316494BA5ADA295D31A
	681768F769AFE874BA11DD951E4E97D057D2CBE947E897E803F4770C0D861583
	C7886728199B18071867197718AF984CA619D38B19C754303731EB98E7990F99
	6F55582AB62A7C1591CA0A954A9526951B2A2F54A9AAA6AADEAA0B55F355CB54
	8FA95E537DAE46553353E3A909D496AB55AA9D50EB531B5367A93BA887AA67A8
	6F543FA47E59FD890659C34CC34F43A451A0B15FE3BCC6200B6319B3782C216B
	0DAB86758135C426B1CDD97C762ABB98FD1DBB8B3DAAA9A13943334A3357B352
	F394663F07E39871F89C744E09E728A797F37E8ADE14EF29E2291BA6344CB931
	655C6BAA96979658AB48AB51AB47EBBD36AEEDA79DA6BD45BB59FB810E41C74A
	275C2747678FCE059DE753D953DDA70AA7164D3D3AF5AE2EAA6BA51BA1BB4477
	BF6EA7EE989EBE5E809E4C6FA7DE79BDE7FA1C7D2FFD54FD6DFAA7F5470C5806
	B30C2406DB0CCE183CC535716F3C1D2FC7DBF151435DC34043A561956197E184
	91B9D13CA3D5468D460F8C69C65CE324E36DC66DC6A326062621264B4DEA4DEE
	9A524DB9A629A63B4C3B4CC7CDCCCDA2CDD699359B3D31D732E79BE79BD79BDF
	B7605A785A2CB6A8B6B86549B2E45AA659EEB6BC6E855A3959A558555A5DB346
	AD9DAD25D6BBADBBA711A7B94E934EAB9ED667C3B0F1B6C9B6A9B719B0E5D806
	DBAEB66DB67D6167621767B7C5AEC3EE93BD937DBA7D8DFD3D070D87D90EAB1D
	5A1D7E73B472143A563ADE9ACE9CEE3F7DC5F496E92F6758CF10CFD833E3B613
	CB29C4699D539BD347671767B97383F3888B894B82CB2E973E2E9B1BC6DDC8BD
	E44A74F5715DE17AD2F59D9BB39BC2EDA8DBAFEE36EE69EE87DC9FCC349F299E
	593373D0C3C843E051E5D13F0B9F95306BDFAC7E4F434F8167B5E7232F632F91
	57ADD7B0B7A577AAF761EF173EF63E729FE33EE33C37DE32DE595FCC37C0B7C8
	B7CB4FC36F9E5F85DF437F23FF64FF7AFFD100A78025016703898141815B02FB
	F87A7C21BF8E3F3ADB65F6B2D9ED418CA0B94115418F82AD82E5C1AD2168C8EC
	90AD21F7E798CE91CE690E85507EE8D6D00761E6618BC37E0C2785878557863F
	8E7088581AD131973577D1DC4373DF44FA449644DE9B67314F39AF2D4A352A3E
	AA2E6A3CDA37BA34BA3FC62E6659CCD5589D58496C4B1C392E2AAE366E6CBEDF
	FCEDF387E29DE20BE37B17982FC85D7079A1CEC2F485A716A92E122C3A96404C
	884E3894F041102AA8168C25F21377258E0A79C21DC267222FD136D188D8435C
	2A1E4EF2482A4D7A92EC91BC357924C533A52CE5B98427A990BC4C0D4CDD9B3A
	9E169A76206D323D3ABD31839291907142AA214D93B667EA67E66676CBAC6585
	B2FEC56E8BB72F1E9507C96BB390AC05592D0AB642A6E8545A28D72A07B26765
	5766BFCD89CA3996AB9E2BCDEDCCB3CADB90379CEF9FFFED12C212E192B6A586
	4B572D1D58E6BDAC6A39B23C7179DB0AE315052B865606AC3CB88AB62A6DD54F
	ABED5797AE7EBD267A4D6B815EC1CA82C1B5016BEB0B550AE5857DEBDCD7ED5D
	4F582F59DFB561FA869D1B3E15898AAE14DB1797157FD828DC78E51B876FCABF
	99DC94B4A9ABC4B964CF66D266E9E6DE2D9E5B0E96AA97E6970E6E0DD9DAB40D
	DF56B4EDF5F645DB2F97CD28DBBB83B643B9A3BF3CB8BC65A7C9CECD3B3F54A4
	54F454FA5436EED2DDB561D7F86ED1EE1B7BBCF634ECD5DB5BBCF7FD3EC9BEDB
	5501554DD566D565FB49FBB3F73FAE89AAE9F896FB6D5DAD4E6D71EDC703D203
	FD07230EB6D7B9D4D51DD23D54528FD62BEB470EC71FBEFE9DEF772D0D360D55
	8D9CC6E223704479E4E9F709DFF71E0D3ADA768C7BACE107D31F761D671D2F6A
	429AF29A469B539AFB5B625BBA4FCC3ED1D6EADE7AFC47DB1F0F9C343C59794A
	F354C969DAE982D39367F2CF8C9D959D7D7E2EF9DC60DBA2B67BE763CEDF6A0F
	6FEFBA1074E1D245FF8BE73BBC3BCE5CF2B874F2B2DBE51357B8579AAF3A5F6D
	EA74EA3CFE93D34FC7BB9CBB9AAEB95C6BB9EE7ABDB57B66F7E91B9E37CEDDF4
	BD79F116FFD6D59E393DDDBDF37A6FF7C5F7F5DF16DD7E7227FDCECBBBD97727
	EEADBC4FBC5FF440ED41D943DD87D53F5BFEDCD8EFDC7F6AC077A0F3D1DC47F7
	068583CFFE91F58F0F43058F998FCB860D86EB9E383E3939E23F72FDE9FCA743
	CF64CF269E17FEA2FECBAE17162F7EF8D5EBD7CED198D1A197F29793BF6D7CA5
	FDEAC0EB19AFDBC6C2C61EBEC97833315EF456FBEDC177DC771DEFA3DF0F4FE4
	7C207F28FF68F9B1F553D0A7FB93199393FF040398F3FC63332DDB0000002063
	48524D00007A25000080830000F9FF000080E9000075300000EA6000003A9800
	00176F925FC546000001374944415478DAECD84B6EC330104441F3FE8766F681
	10200B793E5DEF003259235B94CFBDF7A3EF76A043872EE8D0051DBAA0431774
	E8D0051DBAA0431774E8820E1DBAA043572BF473CEE3C5EEBD07F58BE84FC0BF
	87913E84AFA01B4031FA5F43481940397A227E1BF4A7016CC56F89BE1DBF35FA
	56FC11E8DBE0C7A06FC21F875EF159D017DCF5A3D1A7DEF52BD0A7C1AF419F04
	BF0A7DCAEFFC3AF409F02BD1BBC3AF45EF0CBF1ABD2BFC7AF496DFC004F476CF
	9B14F456A7AB24F436EF1269E82DDE9CA1438F808F45AF5C2F74E819F0D00BFE
	268847AF5837F482B543879E010F1D7A063C74E819E776E805FB800E3D031E3A
	74E8F1E86F9D62A017EC073A74E8F1E86FED093A74E8D0A14387DE09FDB3B0D6
	E8820E5DD0A1431774E8820E5DD0A10B3A74E8820E5DD0A1EB3FFD000000FFFF
	0300DD13D55B14FE294C0000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="28" length_in_bytes="3285" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000005D0000
	00620806000000325DDFBB000000097048597300000EC300000EC301C76FA864
	00000A4F6943435050686F746F73686F70204943432070726F66696C65000078
	DA9D53675453E9163DF7DEF4424B8880944B6F5215082052428B801491262A21
	09104A8821A1D91551C1114545041BC8A088038E8E808C15512C0C8A0AD807E4
	21A28E83A3888ACAFBE17BA36BD6BCF7E6CDFEB5D73EE7ACF39DB3CF07C0080C
	9648335135800CA9421E11E083C7C4C6E1E42E40810A2470001008B3642173FD
	230100F87E3C3C2B22C007BE000178D30B0800C04D9BC0301C87FF0FEA42995C
	01808401C07491384B08801400407A8E42A600404601809D98265300A0040060
	CB6362E300502D0060277FE6D300809DF8997B01005B94211501A09100201365
	884400683B00ACCF568A450058300014664BC43900D82D00304957664800B0B7
	00C0CE100BB200080C00305188852900047B0060C8232378008499001446F257
	3CF12BAE10E72A00007899B23CB9243945815B082D710757572E1E28CE49172B
	14366102619A402EC27999193281340FE0F3CC0000A0911511E083F3FD78CE0E
	AECECE368EB60E5F2DEABF06FF226262E3FEE5CFAB70400000E1747ED1FE2C2F
	B31A803B06806DFEA225EE04685E0BA075F78B66B20F40B500A0E9DA57F370F8
	7E3C3C45A190B9D9D9E5E4E4D84AC4425B61CA577DFE67C25FC057FD6CF97E3C
	FCF7F5E0BEE22481325D814704F8E0C2CCF44CA51CCF92098462DCE68F47FCB7
	0BFFFC1DD322C44962B9582A14E35112718E449A8CF332A52289429229C525D2
	FF64E2DF2CFB033EDF3500B06A3E017B912DA85D6303F64B27105874C0E2F700
	00F2BB6FC1D4280803806883E1CF77FFEF3FFD47A02500806649927100005E44
	242E54CAB33FC708000044A0812AB0411BF4C1182CC0061CC105DCC10BFC6036
	844224C4C24210420A64801C726029AC82422886CDB01D2A602FD4401D34C051
	688693700E2EC255B80E3D700FFA61089EC128BC81090441C808136121DA8801
	628A58238E08179985F821C14804128B2420C9881451224B91354831528A5420
	55481DF23D720239875C46BA913BC8003282FC86BC47319481B2513DD40CB543
	B9A8371A8446A20BD06474319A8F16A09BD072B41A3D8C36A1E7D0AB680FDA8F
	3E43C730C0E8180733C46C302EC6C342B1382C099363CBB122AC0CABC61AB056
	AC03BB89F563CFB17704128145C0093604774220611E4148584C584ED848A820
	1C243411DA093709038451C2272293A84BB426BA11F9C4186232318758482C23
	D6128F132F107B8843C437241289433227B9900249B1A454D212D246D26E5223
	E92CA99B34481A2393C9DA646BB20739942C202BC885E49DE4C3E433E41BE421
	F25B0A9D624071A4F853E22852CA6A4A19E510E534E5066598324155A39A52DD
	A8A15411358F5A42ADA1B652AF5187A81334759A39CD8316494BA5ADA295D31A
	681768F769AFE874BA11DD951E4E97D057D2CBE947E897E803F4770C0D861583
	C7886728199B18071867197718AF984CA619D38B19C754303731EB98E7990F99
	6F55582AB62A7C1591CA0A954A9526951B2A2F54A9AAA6AADEAA0B55F355CB54
	8FA95E537DAE46553353E3A909D496AB55AA9D50EB531B5367A93BA887AA67A8
	6F543FA47E59FD890659C34CC34F43A451A0B15FE3BCC6200B6319B3782C216B
	0DAB86758135C426B1CDD97C762ABB98FD1DBB8B3DAAA9A13943334A3357B352
	F394663F07E39871F89C744E09E728A797F37E8ADE14EF29E2291BA6344CB931
	655C6BAA96979658AB48AB51AB47EBBD36AEEDA79DA6BD45BB59FB810E41C74A
	275C2747678FCE059DE753D953DDA70AA7164D3D3AF5AE2EAA6BA51BA1BB4477
	BF6EA7EE989EBE5E809E4C6FA7DE79BDE7FA1C7D2FFD54FD6DFAA7F5470C5806
	B30C2406DB0CCE183CC535716F3C1D2FC7DBF151435DC34043A561956197E184
	91B9D13CA3D5468D460F8C69C65CE324E36DC66DC6A326062621264B4DEA4DEE
	9A524DB9A629A63B4C3B4CC7CDCCCDA2CDD699359B3D31D732E79BE79BD79BDF
	B7605A785A2CB6A8B6B86549B2E45AA659EEB6BC6E855A3959A558555A5DB346
	AD9DAD25D6BBADBBA711A7B94E934EAB9ED667C3B0F1B6C9B6A9B719B0E5D806
	DBAEB66DB67D6167621767B7C5AEC3EE93BD937DBA7D8DFD3D070D87D90EAB1D
	5A1D7E73B472143A563ADE9ACE9CEE3F7DC5F496E92F6758CF10CFD833E3B613
	CB29C4699D539BD347671767B97383F3888B894B82CB2E973E2E9B1BC6DDC8BD
	E44A74F5715DE17AD2F59D9BB39BC2EDA8DBAFEE36EE69EE87DC9FCC349F299E
	593373D0C3C843E051E5D13F0B9F95306BDFAC7E4F434F8167B5E7232F632F91
	57ADD7B0B7A577AAF761EF173EF63E729FE33EE33C37DE32DE595FCC37C0B7C8
	B7CB4FC36F9E5F85DF437F23FF64FF7AFFD100A78025016703898141815B02FB
	F87A7C21BF8E3F3ADB65F6B2D9ED418CA0B94115418F82AD82E5C1AD2168C8EC
	90AD21F7E798CE91CE690E85507EE8D6D00761E6618BC37E0C2785878557863F
	8E7088581AD131973577D1DC4373DF44FA449644DE9B67314F39AF2D4A352A3E
	AA2E6A3CDA37BA34BA3FC62E6659CCD5589D58496C4B1C392E2AAE366E6CBEDF
	FCEDF387E29DE20BE37B17982FC85D7079A1CEC2F485A716A92E122C3A96404C
	884E3894F041102AA8168C25F21377258E0A79C21DC267222FD136D188D8435C
	2A1E4EF2482A4D7A92EC91BC357924C533A52CE5B98427A990BC4C0D4CDD9B3A
	9E169A76206D323D3ABD31839291907142AA214D93B667EA67E66676CBAC6585
	B2FEC56E8BB72F1E9507C96BB390AC05592D0AB642A6E8545A28D72A07B26765
	5766BFCD89CA3996AB9E2BCDEDCCB3CADB90379CEF9FFFED12C212E192B6A586
	4B572D1D58E6BDAC6A39B23C7179DB0AE315052B865606AC3CB88AB62A6DD54F
	ABED5797AE7EBD267A4D6B815EC1CA82C1B5016BEB0B550AE5857DEBDCD7ED5D
	4F582F59DFB561FA869D1B3E15898AAE14DB1797157FD828DC78E51B876FCABF
	99DC94B4A9ABC4B964CF66D266E9E6DE2D9E5B0E96AA97E6970E6E0DD9DAB40D
	DF56B4EDF5F645DB2F97CD28DBBB83B643B9A3BF3CB8BC65A7C9CECD3B3F54A4
	54F454FA5436EED2DDB561D7F86ED1EE1B7BBCF634ECD5DB5BBCF7FD3EC9BEDB
	5501554DD566D565FB49FBB3F73FAE89AAE9F896FB6D5DAD4E6D71EDC703D203
	FD07230EB6D7B9D4D51DD23D54528FD62BEB470EC71FBEFE9DEF772D0D360D55
	8D9CC6E223704479E4E9F709DFF71E0D3ADA768C7BACE107D31F761D671D2F6A
	429AF29A469B539AFB5B625BBA4FCC3ED1D6EADE7AFC47DB1F0F9C343C59794A
	F354C969DAE982D39367F2CF8C9D959D7D7E2EF9DC60DBA2B67BE763CEDF6A0F
	6FEFBA1074E1D245FF8BE73BBC3BCE5CF2B874F2B2DBE51357B8579AAF3A5F6D
	EA74EA3CFE93D34FC7BB9CBB9AAEB95C6BB9EE7ABDB57B66F7E91B9E37CEDDF4
	BD79F116FFD6D59E393DDDBDF37A6FF7C5F7F5DF16DD7E7227FDCECBBBD97727
	EEADBC4FBC5FF440ED41D943DD87D53F5BFEDCD8EFDC7F6AC077A0F3D1DC47F7
	068583CFFE91F58F0F43058F998FCB860D86EB9E383E3939E23F72FDE9FCA743
	CF64CF269E17FEA2FECBAE17162F7EF8D5EBD7CED198D1A197F29793BF6D7CA5
	FDEAC0EB19AFDBC6C2C61EBEC97833315EF456FBEDC177DC771DEFA3DF0F4FE4
	7C207F28FF68F9B1F553D0A7FB93199393FF040398F3FC63332DDB0000002063
	48524D00007A25000080830000F9FF000080E9000075300000EA6000003A9800
	00176F925FC546000001F64944415478DAECDDC172C2300C4551F4FF1FED2E5A
	3AB44D21768CA4275D6DD890861CBDD1389E406D8C71A37CCB40071D740A74D0
	29D041A740079D021D74D029D041A7FCD0CDECE59BC71806EB66F467EF37339A
	E18D3ED38CCE4D70417FD5886E0D0843EFDC8014E8470DA88C9F0EBD43FAD3A2
	574EBF047A357C9775FAEE46A9E36F473F82F87D27BBA309CAF02EE8EF6C8022
	BE3BFAB3265C69C0CAB9DBA2EFC457497D1AF4A3065CD9E7C90C9F127D177E56
	F8D4E857F1B3A65E02BD1ABC0CFA15FC6CF072E8AB5B1299E065D1AFA43E1A5E
	1A7D25F519125F027D75DC847DD62AE84A892F853E3BE7A3E0CBA12BC097445F
	8107BD387C69F4ACF0E5D16756355EF3BD05FA2C3CE805E15BA167816F877E16
	1EF46269B7131D1FF713CFA03F1EA79CF677AC664EA1DF4F7C16FDF118C6CCC1
	DFFCB4F906FDF17A74C0E2B38C2C23497A6CDADBCEF4D96D829DF02D572FD169
	073D001E74D073C3832E9C76D003AE11F480B483BEB06E075D70C4801E306240
	0FB856D041EF3162400F58C5801E70BDA083AE87FE35820CF4E46957FF4AA381
	0E7A4DF4A34743DEFAB027E87FE13D9A0C7AC2F132DB7CB75F9556AEDDDB0152
	BFCB987859093AE8A0830E3AE8A0830EFAFFB7E0D4FC9DB1EC3F9752F9D24119
	74CFBD17D06FFEBB8CA0335E406F872EBDC424E9A09374920E3A4927E9EBF531
	000423ED79AD1E35830000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="29" length_in_bytes="3234" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000005D0000
	00620806000000325DDFBB000000097048597300000EC300000EC301C76FA864
	00000A4F6943435050686F746F73686F70204943432070726F66696C65000078
	DA9D53675453E9163DF7DEF4424B8880944B6F5215082052428B801491262A21
	09104A8821A1D91551C1114545041BC8A088038E8E808C15512C0C8A0AD807E4
	21A28E83A3888ACAFBE17BA36BD6BCF7E6CDFEB5D73EE7ACF39DB3CF07C0080C
	9648335135800CA9421E11E083C7C4C6E1E42E40810A2470001008B3642173FD
	230100F87E3C3C2B22C007BE000178D30B0800C04D9BC0301C87FF0FEA42995C
	01808401C07491384B08801400407A8E42A600404601809D98265300A0040060
	CB6362E300502D0060277FE6D300809DF8997B01005B94211501A09100201365
	884400683B00ACCF568A450058300014664BC43900D82D00304957664800B0B7
	00C0CE100BB200080C00305188852900047B0060C8232378008499001446F257
	3CF12BAE10E72A00007899B23CB9243945815B082D710757572E1E28CE49172B
	14366102619A402EC27999193281340FE0F3CC0000A0911511E083F3FD78CE0E
	AECECE368EB60E5F2DEABF06FF226262E3FEE5CFAB70400000E1747ED1FE2C2F
	B31A803B06806DFEA225EE04685E0BA075F78B66B20F40B500A0E9DA57F370F8
	7E3C3C45A190B9D9D9E5E4E4D84AC4425B61CA577DFE67C25FC057FD6CF97E3C
	FCF7F5E0BEE22481325D814704F8E0C2CCF44CA51CCF92098462DCE68F47FCB7
	0BFFFC1DD322C44962B9582A14E35112718E449A8CF332A52289429229C525D2
	FF64E2DF2CFB033EDF3500B06A3E017B912DA85D6303F64B27105874C0E2F700
	00F2BB6FC1D4280803806883E1CF77FFEF3FFD47A02500806649927100005E44
	242E54CAB33FC708000044A0812AB0411BF4C1182CC0061CC105DCC10BFC6036
	844224C4C24210420A64801C726029AC82422886CDB01D2A602FD4401D34C051
	688693700E2EC255B80E3D700FFA61089EC128BC81090441C808136121DA8801
	628A58238E08179985F821C14804128B2420C9881451224B91354831528A5420
	55481DF23D720239875C46BA913BC8003282FC86BC47319481B2513DD40CB543
	B9A8371A8446A20BD06474319A8F16A09BD072B41A3D8C36A1E7D0AB680FDA8F
	3E43C730C0E8180733C46C302EC6C342B1382C099363CBB122AC0CABC61AB056
	AC03BB89F563CFB17704128145C0093604774220611E4148584C584ED848A820
	1C243411DA093709038451C2272293A84BB426BA11F9C4186232318758482C23
	D6128F132F107B8843C437241289433227B9900249B1A454D212D246D26E5223
	E92CA99B34481A2393C9DA646BB20739942C202BC885E49DE4C3E433E41BE421
	F25B0A9D624071A4F853E22852CA6A4A19E510E534E5066598324155A39A52DD
	A8A15411358F5A42ADA1B652AF5187A81334759A39CD8316494BA5ADA295D31A
	681768F769AFE874BA11DD951E4E97D057D2CBE947E897E803F4770C0D861583
	C7886728199B18071867197718AF984CA619D38B19C754303731EB98E7990F99
	6F55582AB62A7C1591CA0A954A9526951B2A2F54A9AAA6AADEAA0B55F355CB54
	8FA95E537DAE46553353E3A909D496AB55AA9D50EB531B5367A93BA887AA67A8
	6F543FA47E59FD890659C34CC34F43A451A0B15FE3BCC6200B6319B3782C216B
	0DAB86758135C426B1CDD97C762ABB98FD1DBB8B3DAAA9A13943334A3357B352
	F394663F07E39871F89C744E09E728A797F37E8ADE14EF29E2291BA6344CB931
	655C6BAA96979658AB48AB51AB47EBBD36AEEDA79DA6BD45BB59FB810E41C74A
	275C2747678FCE059DE753D953DDA70AA7164D3D3AF5AE2EAA6BA51BA1BB4477
	BF6EA7EE989EBE5E809E4C6FA7DE79BDE7FA1C7D2FFD54FD6DFAA7F5470C5806
	B30C2406DB0CCE183CC535716F3C1D2FC7DBF151435DC34043A561956197E184
	91B9D13CA3D5468D460F8C69C65CE324E36DC66DC6A326062621264B4DEA4DEE
	9A524DB9A629A63B4C3B4CC7CDCCCDA2CDD699359B3D31D732E79BE79BD79BDF
	B7605A785A2CB6A8B6B86549B2E45AA659EEB6BC6E855A3959A558555A5DB346
	AD9DAD25D6BBADBBA711A7B94E934EAB9ED667C3B0F1B6C9B6A9B719B0E5D806
	DBAEB66DB67D6167621767B7C5AEC3EE93BD937DBA7D8DFD3D070D87D90EAB1D
	5A1D7E73B472143A563ADE9ACE9CEE3F7DC5F496E92F6758CF10CFD833E3B613
	CB29C4699D539BD347671767B97383F3888B894B82CB2E973E2E9B1BC6DDC8BD
	E44A74F5715DE17AD2F59D9BB39BC2EDA8DBAFEE36EE69EE87DC9FCC349F299E
	593373D0C3C843E051E5D13F0B9F95306BDFAC7E4F434F8167B5E7232F632F91
	57ADD7B0B7A577AAF761EF173EF63E729FE33EE33C37DE32DE595FCC37C0B7C8
	B7CB4FC36F9E5F85DF437F23FF64FF7AFFD100A78025016703898141815B02FB
	F87A7C21BF8E3F3ADB65F6B2D9ED418CA0B94115418F82AD82E5C1AD2168C8EC
	90AD21F7E798CE91CE690E85507EE8D6D00761E6618BC37E0C2785878557863F
	8E7088581AD131973577D1DC4373DF44FA449644DE9B67314F39AF2D4A352A3E
	AA2E6A3CDA37BA34BA3FC62E6659CCD5589D58496C4B1C392E2AAE366E6CBEDF
	FCEDF387E29DE20BE37B17982FC85D7079A1CEC2F485A716A92E122C3A96404C
	884E3894F041102AA8168C25F21377258E0A79C21DC267222FD136D188D8435C
	2A1E4EF2482A4D7A92EC91BC357924C533A52CE5B98427A990BC4C0D4CDD9B3A
	9E169A76206D323D3ABD31839291907142AA214D93B667EA67E66676CBAC6585
	B2FEC56E8BB72F1E9507C96BB390AC05592D0AB642A6E8545A28D72A07B26765
	5766BFCD89CA3996AB9E2BCDEDCCB3CADB90379CEF9FFFED12C212E192B6A586
	4B572D1D58E6BDAC6A39B23C7179DB0AE315052B865606AC3CB88AB62A6DD54F
	ABED5797AE7EBD267A4D6B815EC1CA82C1B5016BEB0B550AE5857DEBDCD7ED5D
	4F582F59DFB561FA869D1B3E15898AAE14DB1797157FD828DC78E51B876FCABF
	99DC94B4A9ABC4B964CF66D266E9E6DE2D9E5B0E96AA97E6970E6E0DD9DAB40D
	DF56B4EDF5F645DB2F97CD28DBBB83B643B9A3BF3CB8BC65A7C9CECD3B3F54A4
	54F454FA5436EED2DDB561D7F86ED1EE1B7BBCF634ECD5DB5BBCF7FD3EC9BEDB
	5501554DD566D565FB49FBB3F73FAE89AAE9F896FB6D5DAD4E6D71EDC703D203
	FD07230EB6D7B9D4D51DD23D54528FD62BEB470EC71FBEFE9DEF772D0D360D55
	8D9CC6E223704479E4E9F709DFF71E0D3ADA768C7BACE107D31F761D671D2F6A
	429AF29A469B539AFB5B625BBA4FCC3ED1D6EADE7AFC47DB1F0F9C343C59794A
	F354C969DAE982D39367F2CF8C9D959D7D7E2EF9DC60DBA2B67BE763CEDF6A0F
	6FEFBA1074E1D245FF8BE73BBC3BCE5CF2B874F2B2DBE51357B8579AAF3A5F6D
	EA74EA3CFE93D34FC7BB9CBB9AAEB95C6BB9EE7ABDB57B66F7E91B9E37CEDDF4
	BD79F116FFD6D59E393DDDBDF37A6FF7C5F7F5DF16DD7E7227FDCECBBBD97727
	EEADBC4FBC5FF440ED41D943DD87D53F5BFEDCD8EFDC7F6AC077A0F3D1DC47F7
	068583CFFE91F58F0F43058F998FCB860D86EB9E383E3939E23F72FDE9FCA743
	CF64CF269E17FEA2FECBAE17162F7EF8D5EBD7CED198D1A197F29793BF6D7CA5
	FDEAC0EB19AFDBC6C2C61EBEC97833315EF456FBEDC177DC771DEFA3DF0F4FE4
	7C207F28FF68F9B1F553D0A7FB93199393FF040398F3FC63332DDB0000002063
	48524D00007A25000080830000F9FF000080E9000075300000EA6000003A9800
	00176F925FC546000001C34944415478DAECDACB52C330104451CDFF7FB45840
	52015489F5F03C6F6FD8C4189F69A6840BE9BD37A21B011D74D009E8A013D041
	27A0834E40071D74023AE8440F5D443E7EB8F72EB01E467FF779116118DAE833
	C3A83C0415F44F83A8360033F4CA0370813E1A40667C77E815DAEF163D73FB43
	A067C35739A79F1E5474FCE3E82388BF7FC99E1842647815F43B0710115F1DFD
	DD107606B072EFB2E827F1A3B4DE0DFA68003BEF793CC3BB443F85EF15DE35FA
	2EBED7D68740CF061F067D07DF1B7C38F4D557129EE0C3A2EFB4DE1A3E34FA4A
	EB3D343E05FAEABA31FB59B3A0476A7C2AF4D93D6F059F0E3D027C4AF41578D0
	93C3A746F70A9F1E7DE654A3B5DF4BA0CFC2839E10BE14BA17F872E857E1414F
	D676B930F1FEB8F10CFAEB7591DB7EC769E612FAE3C657D15FAF61CD0CBEE7B7
	CD13F4D7D7D1058BFFCBC83192A6DBB6BDEC4E9F7D4D7012BEE4E9C5BAEDA01B
	C0830EBA6F78D003B71D74836704DDA0EDA02F9CDB410FB86240375831A01B3C
	2BE8A0D75831A01B9C624037785ED0418F87FEB3820474E76D071D74D041071D
	74D035D11BF9975BD1C9A1DF1ED041079D800E3A011D74023AE80474D04127A0
	834E40079D800E3A69ADB5F63500CE797E79C72D0BCF0000000049454E44AE42
	6082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="30" length_in_bytes="3041" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000005D0000
	00620806000000325DDFBB000000097048597300000EC300000EC301C76FA864
	00000A4F6943435050686F746F73686F70204943432070726F66696C65000078
	DA9D53675453E9163DF7DEF4424B8880944B6F5215082052428B801491262A21
	09104A8821A1D91551C1114545041BC8A088038E8E808C15512C0C8A0AD807E4
	21A28E83A3888ACAFBE17BA36BD6BCF7E6CDFEB5D73EE7ACF39DB3CF07C0080C
	9648335135800CA9421E11E083C7C4C6E1E42E40810A2470001008B3642173FD
	230100F87E3C3C2B22C007BE000178D30B0800C04D9BC0301C87FF0FEA42995C
	01808401C07491384B08801400407A8E42A600404601809D98265300A0040060
	CB6362E300502D0060277FE6D300809DF8997B01005B94211501A09100201365
	884400683B00ACCF568A450058300014664BC43900D82D00304957664800B0B7
	00C0CE100BB200080C00305188852900047B0060C8232378008499001446F257
	3CF12BAE10E72A00007899B23CB9243945815B082D710757572E1E28CE49172B
	14366102619A402EC27999193281340FE0F3CC0000A0911511E083F3FD78CE0E
	AECECE368EB60E5F2DEABF06FF226262E3FEE5CFAB70400000E1747ED1FE2C2F
	B31A803B06806DFEA225EE04685E0BA075F78B66B20F40B500A0E9DA57F370F8
	7E3C3C45A190B9D9D9E5E4E4D84AC4425B61CA577DFE67C25FC057FD6CF97E3C
	FCF7F5E0BEE22481325D814704F8E0C2CCF44CA51CCF92098462DCE68F47FCB7
	0BFFFC1DD322C44962B9582A14E35112718E449A8CF332A52289429229C525D2
	FF64E2DF2CFB033EDF3500B06A3E017B912DA85D6303F64B27105874C0E2F700
	00F2BB6FC1D4280803806883E1CF77FFEF3FFD47A02500806649927100005E44
	242E54CAB33FC708000044A0812AB0411BF4C1182CC0061CC105DCC10BFC6036
	844224C4C24210420A64801C726029AC82422886CDB01D2A602FD4401D34C051
	688693700E2EC255B80E3D700FFA61089EC128BC81090441C808136121DA8801
	628A58238E08179985F821C14804128B2420C9881451224B91354831528A5420
	55481DF23D720239875C46BA913BC8003282FC86BC47319481B2513DD40CB543
	B9A8371A8446A20BD06474319A8F16A09BD072B41A3D8C36A1E7D0AB680FDA8F
	3E43C730C0E8180733C46C302EC6C342B1382C099363CBB122AC0CABC61AB056
	AC03BB89F563CFB17704128145C0093604774220611E4148584C584ED848A820
	1C243411DA093709038451C2272293A84BB426BA11F9C4186232318758482C23
	D6128F132F107B8843C437241289433227B9900249B1A454D212D246D26E5223
	E92CA99B34481A2393C9DA646BB20739942C202BC885E49DE4C3E433E41BE421
	F25B0A9D624071A4F853E22852CA6A4A19E510E534E5066598324155A39A52DD
	A8A15411358F5A42ADA1B652AF5187A81334759A39CD8316494BA5ADA295D31A
	681768F769AFE874BA11DD951E4E97D057D2CBE947E897E803F4770C0D861583
	C7886728199B18071867197718AF984CA619D38B19C754303731EB98E7990F99
	6F55582AB62A7C1591CA0A954A9526951B2A2F54A9AAA6AADEAA0B55F355CB54
	8FA95E537DAE46553353E3A909D496AB55AA9D50EB531B5367A93BA887AA67A8
	6F543FA47E59FD890659C34CC34F43A451A0B15FE3BCC6200B6319B3782C216B
	0DAB86758135C426B1CDD97C762ABB98FD1DBB8B3DAAA9A13943334A3357B352
	F394663F07E39871F89C744E09E728A797F37E8ADE14EF29E2291BA6344CB931
	655C6BAA96979658AB48AB51AB47EBBD36AEEDA79DA6BD45BB59FB810E41C74A
	275C2747678FCE059DE753D953DDA70AA7164D3D3AF5AE2EAA6BA51BA1BB4477
	BF6EA7EE989EBE5E809E4C6FA7DE79BDE7FA1C7D2FFD54FD6DFAA7F5470C5806
	B30C2406DB0CCE183CC535716F3C1D2FC7DBF151435DC34043A561956197E184
	91B9D13CA3D5468D460F8C69C65CE324E36DC66DC6A326062621264B4DEA4DEE
	9A524DB9A629A63B4C3B4CC7CDCCCDA2CDD699359B3D31D732E79BE79BD79BDF
	B7605A785A2CB6A8B6B86549B2E45AA659EEB6BC6E855A3959A558555A5DB346
	AD9DAD25D6BBADBBA711A7B94E934EAB9ED667C3B0F1B6C9B6A9B719B0E5D806
	DBAEB66DB67D6167621767B7C5AEC3EE93BD937DBA7D8DFD3D070D87D90EAB1D
	5A1D7E73B472143A563ADE9ACE9CEE3F7DC5F496E92F6758CF10CFD833E3B613
	CB29C4699D539BD347671767B97383F3888B894B82CB2E973E2E9B1BC6DDC8BD
	E44A74F5715DE17AD2F59D9BB39BC2EDA8DBAFEE36EE69EE87DC9FCC349F299E
	593373D0C3C843E051E5D13F0B9F95306BDFAC7E4F434F8167B5E7232F632F91
	57ADD7B0B7A577AAF761EF173EF63E729FE33EE33C37DE32DE595FCC37C0B7C8
	B7CB4FC36F9E5F85DF437F23FF64FF7AFFD100A78025016703898141815B02FB
	F87A7C21BF8E3F3ADB65F6B2D9ED418CA0B94115418F82AD82E5C1AD2168C8EC
	90AD21F7E798CE91CE690E85507EE8D6D00761E6618BC37E0C2785878557863F
	8E7088581AD131973577D1DC4373DF44FA449644DE9B67314F39AF2D4A352A3E
	AA2E6A3CDA37BA34BA3FC62E6659CCD5589D58496C4B1C392E2AAE366E6CBEDF
	FCEDF387E29DE20BE37B17982FC85D7079A1CEC2F485A716A92E122C3A96404C
	884E3894F041102AA8168C25F21377258E0A79C21DC267222FD136D188D8435C
	2A1E4EF2482A4D7A92EC91BC357924C533A52CE5B98427A990BC4C0D4CDD9B3A
	9E169A76206D323D3ABD31839291907142AA214D93B667EA67E66676CBAC6585
	B2FEC56E8BB72F1E9507C96BB390AC05592D0AB642A6E8545A28D72A07B26765
	5766BFCD89CA3996AB9E2BCDEDCCB3CADB90379CEF9FFFED12C212E192B6A586
	4B572D1D58E6BDAC6A39B23C7179DB0AE315052B865606AC3CB88AB62A6DD54F
	ABED5797AE7EBD267A4D6B815EC1CA82C1B5016BEB0B550AE5857DEBDCD7ED5D
	4F582F59DFB561FA869D1B3E15898AAE14DB1797157FD828DC78E51B876FCABF
	99DC94B4A9ABC4B964CF66D266E9E6DE2D9E5B0E96AA97E6970E6E0DD9DAB40D
	DF56B4EDF5F645DB2F97CD28DBBB83B643B9A3BF3CB8BC65A7C9CECD3B3F54A4
	54F454FA5436EED2DDB561D7F86ED1EE1B7BBCF634ECD5DB5BBCF7FD3EC9BEDB
	5501554DD566D565FB49FBB3F73FAE89AAE9F896FB6D5DAD4E6D71EDC703D203
	FD07230EB6D7B9D4D51DD23D54528FD62BEB470EC71FBEFE9DEF772D0D360D55
	8D9CC6E223704479E4E9F709DFF71E0D3ADA768C7BACE107D31F761D671D2F6A
	429AF29A469B539AFB5B625BBA4FCC3ED1D6EADE7AFC47DB1F0F9C343C59794A
	F354C969DAE982D39367F2CF8C9D959D7D7E2EF9DC60DBA2B67BE763CEDF6A0F
	6FEFBA1074E1D245FF8BE73BBC3BCE5CF2B874F2B2DBE51357B8579AAF3A5F6D
	EA74EA3CFE93D34FC7BB9CBB9AAEB95C6BB9EE7ABDB57B66F7E91B9E37CEDDF4
	BD79F116FFD6D59E393DDDBDF37A6FF7C5F7F5DF16DD7E7227FDCECBBBD97727
	EEADBC4FBC5FF440ED41D943DD87D53F5BFEDCD8EFDC7F6AC077A0F3D1DC47F7
	068583CFFE91F58F0F43058F998FCB860D86EB9E383E3939E23F72FDE9FCA743
	CF64CF269E17FEA2FECBAE17162F7EF8D5EBD7CED198D1A197F29793BF6D7CA5
	FDEAC0EB19AFDBC6C2C61EBEC97833315EF456FBEDC177DC771DEFA3DF0F4FE4
	7C207F28FF68F9B1F553D0A7FB93199393FF040398F3FC63332DDB0000002063
	48524D00007A25000080830000F9FF000080E9000075300000EA6000003A9800
	00176F925FC546000001024944415478DAECD9B91103411003B1C93FE9550C72
	8EF3C0E80450F458EFBDD2B741800E5DD0A10B3A7441872EE8D0A16B087A55BD
	AA7A603F46871F42B7FC203AFC203AFC203AFC20FA75FC28FA55FC16E8D7F05B
	A15FC16F89BE1DBF35FA56FC11E8DBF047A16FC11F893E1D7F34FA54FC15E8D3
	F057A14FC15F89DE1D7F357A57FC13E8DDF04FA177C13F899EC63F8D9EC2871E
	C0871EC0871EC0879E3867A043870E1D3A74E8D0A143870E1D3A74E8D0A14387
	0E1D3A74E8D0A143870E1D3A74E8D0A143870E1D3A74E8D0A143870E1D3A74E8
	D0A143870E1DFA32F4ADB5451774E8820E1DBAA0431774E8820E5DD0A1431774
	E8820E5DFFF4030000FFFF03000604C4F1E96EA6490000000049454E44AE4260
	82
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="31" length_in_bytes="3179" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000005D0000
	00620806000000325DDFBB000000097048597300000EC300000EC301C76FA864
	00000A4F6943435050686F746F73686F70204943432070726F66696C65000078
	DA9D53675453E9163DF7DEF4424B8880944B6F5215082052428B801491262A21
	09104A8821A1D91551C1114545041BC8A088038E8E808C15512C0C8A0AD807E4
	21A28E83A3888ACAFBE17BA36BD6BCF7E6CDFEB5D73EE7ACF39DB3CF07C0080C
	9648335135800CA9421E11E083C7C4C6E1E42E40810A2470001008B3642173FD
	230100F87E3C3C2B22C007BE000178D30B0800C04D9BC0301C87FF0FEA42995C
	01808401C07491384B08801400407A8E42A600404601809D98265300A0040060
	CB6362E300502D0060277FE6D300809DF8997B01005B94211501A09100201365
	884400683B00ACCF568A450058300014664BC43900D82D00304957664800B0B7
	00C0CE100BB200080C00305188852900047B0060C8232378008499001446F257
	3CF12BAE10E72A00007899B23CB9243945815B082D710757572E1E28CE49172B
	14366102619A402EC27999193281340FE0F3CC0000A0911511E083F3FD78CE0E
	AECECE368EB60E5F2DEABF06FF226262E3FEE5CFAB70400000E1747ED1FE2C2F
	B31A803B06806DFEA225EE04685E0BA075F78B66B20F40B500A0E9DA57F370F8
	7E3C3C45A190B9D9D9E5E4E4D84AC4425B61CA577DFE67C25FC057FD6CF97E3C
	FCF7F5E0BEE22481325D814704F8E0C2CCF44CA51CCF92098462DCE68F47FCB7
	0BFFFC1DD322C44962B9582A14E35112718E449A8CF332A52289429229C525D2
	FF64E2DF2CFB033EDF3500B06A3E017B912DA85D6303F64B27105874C0E2F700
	00F2BB6FC1D4280803806883E1CF77FFEF3FFD47A02500806649927100005E44
	242E54CAB33FC708000044A0812AB0411BF4C1182CC0061CC105DCC10BFC6036
	844224C4C24210420A64801C726029AC82422886CDB01D2A602FD4401D34C051
	688693700E2EC255B80E3D700FFA61089EC128BC81090441C808136121DA8801
	628A58238E08179985F821C14804128B2420C9881451224B91354831528A5420
	55481DF23D720239875C46BA913BC8003282FC86BC47319481B2513DD40CB543
	B9A8371A8446A20BD06474319A8F16A09BD072B41A3D8C36A1E7D0AB680FDA8F
	3E43C730C0E8180733C46C302EC6C342B1382C099363CBB122AC0CABC61AB056
	AC03BB89F563CFB17704128145C0093604774220611E4148584C584ED848A820
	1C243411DA093709038451C2272293A84BB426BA11F9C4186232318758482C23
	D6128F132F107B8843C437241289433227B9900249B1A454D212D246D26E5223
	E92CA99B34481A2393C9DA646BB20739942C202BC885E49DE4C3E433E41BE421
	F25B0A9D624071A4F853E22852CA6A4A19E510E534E5066598324155A39A52DD
	A8A15411358F5A42ADA1B652AF5187A81334759A39CD8316494BA5ADA295D31A
	681768F769AFE874BA11DD951E4E97D057D2CBE947E897E803F4770C0D861583
	C7886728199B18071867197718AF984CA619D38B19C754303731EB98E7990F99
	6F55582AB62A7C1591CA0A954A9526951B2A2F54A9AAA6AADEAA0B55F355CB54
	8FA95E537DAE46553353E3A909D496AB55AA9D50EB531B5367A93BA887AA67A8
	6F543FA47E59FD890659C34CC34F43A451A0B15FE3BCC6200B6319B3782C216B
	0DAB86758135C426B1CDD97C762ABB98FD1DBB8B3DAAA9A13943334A3357B352
	F394663F07E39871F89C744E09E728A797F37E8ADE14EF29E2291BA6344CB931
	655C6BAA96979658AB48AB51AB47EBBD36AEEDA79DA6BD45BB59FB810E41C74A
	275C2747678FCE059DE753D953DDA70AA7164D3D3AF5AE2EAA6BA51BA1BB4477
	BF6EA7EE989EBE5E809E4C6FA7DE79BDE7FA1C7D2FFD54FD6DFAA7F5470C5806
	B30C2406DB0CCE183CC535716F3C1D2FC7DBF151435DC34043A561956197E184
	91B9D13CA3D5468D460F8C69C65CE324E36DC66DC6A326062621264B4DEA4DEE
	9A524DB9A629A63B4C3B4CC7CDCCCDA2CDD699359B3D31D732E79BE79BD79BDF
	B7605A785A2CB6A8B6B86549B2E45AA659EEB6BC6E855A3959A558555A5DB346
	AD9DAD25D6BBADBBA711A7B94E934EAB9ED667C3B0F1B6C9B6A9B719B0E5D806
	DBAEB66DB67D6167621767B7C5AEC3EE93BD937DBA7D8DFD3D070D87D90EAB1D
	5A1D7E73B472143A563ADE9ACE9CEE3F7DC5F496E92F6758CF10CFD833E3B613
	CB29C4699D539BD347671767B97383F3888B894B82CB2E973E2E9B1BC6DDC8BD
	E44A74F5715DE17AD2F59D9BB39BC2EDA8DBAFEE36EE69EE87DC9FCC349F299E
	593373D0C3C843E051E5D13F0B9F95306BDFAC7E4F434F8167B5E7232F632F91
	57ADD7B0B7A577AAF761EF173EF63E729FE33EE33C37DE32DE595FCC37C0B7C8
	B7CB4FC36F9E5F85DF437F23FF64FF7AFFD100A78025016703898141815B02FB
	F87A7C21BF8E3F3ADB65F6B2D9ED418CA0B94115418F82AD82E5C1AD2168C8EC
	90AD21F7E798CE91CE690E85507EE8D6D00761E6618BC37E0C2785878557863F
	8E7088581AD131973577D1DC4373DF44FA449644DE9B67314F39AF2D4A352A3E
	AA2E6A3CDA37BA34BA3FC62E6659CCD5589D58496C4B1C392E2AAE366E6CBEDF
	FCEDF387E29DE20BE37B17982FC85D7079A1CEC2F485A716A92E122C3A96404C
	884E3894F041102AA8168C25F21377258E0A79C21DC267222FD136D188D8435C
	2A1E4EF2482A4D7A92EC91BC357924C533A52CE5B98427A990BC4C0D4CDD9B3A
	9E169A76206D323D3ABD31839291907142AA214D93B667EA67E66676CBAC6585
	B2FEC56E8BB72F1E9507C96BB390AC05592D0AB642A6E8545A28D72A07B26765
	5766BFCD89CA3996AB9E2BCDEDCCB3CADB90379CEF9FFFED12C212E192B6A586
	4B572D1D58E6BDAC6A39B23C7179DB0AE315052B865606AC3CB88AB62A6DD54F
	ABED5797AE7EBD267A4D6B815EC1CA82C1B5016BEB0B550AE5857DEBDCD7ED5D
	4F582F59DFB561FA869D1B3E15898AAE14DB1797157FD828DC78E51B876FCABF
	99DC94B4A9ABC4B964CF66D266E9E6DE2D9E5B0E96AA97E6970E6E0DD9DAB40D
	DF56B4EDF5F645DB2F97CD28DBBB83B643B9A3BF3CB8BC65A7C9CECD3B3F54A4
	54F454FA5436EED2DDB561D7F86ED1EE1B7BBCF634ECD5DB5BBCF7FD3EC9BEDB
	5501554DD566D565FB49FBB3F73FAE89AAE9F896FB6D5DAD4E6D71EDC703D203
	FD07230EB6D7B9D4D51DD23D54528FD62BEB470EC71FBEFE9DEF772D0D360D55
	8D9CC6E223704479E4E9F709DFF71E0D3ADA768C7BACE107D31F761D671D2F6A
	429AF29A469B539AFB5B625BBA4FCC3ED1D6EADE7AFC47DB1F0F9C343C59794A
	F354C969DAE982D39367F2CF8C9D959D7D7E2EF9DC60DBA2B67BE763CEDF6A0F
	6FEFBA1074E1D245FF8BE73BBC3BCE5CF2B874F2B2DBE51357B8579AAF3A5F6D
	EA74EA3CFE93D34FC7BB9CBB9AAEB95C6BB9EE7ABDB57B66F7E91B9E37CEDDF4
	BD79F116FFD6D59E393DDDBDF37A6FF7C5F7F5DF16DD7E7227FDCECBBBD97727
	EEADBC4FBC5FF440ED41D943DD87D53F5BFEDCD8EFDC7F6AC077A0F3D1DC47F7
	068583CFFE91F58F0F43058F998FCB860D86EB9E383E3939E23F72FDE9FCA743
	CF64CF269E17FEA2FECBAE17162F7EF8D5EBD7CED198D1A197F29793BF6D7CA5
	FDEAC0EB19AFDBC6C2C61EBEC97833315EF456FBEDC177DC771DEFA3DF0F4FE4
	7C207F28FF68F9B1F553D0A7FB93199393FF040398F3FC63332DDB0000002063
	48524D00007A25000080830000F9FF000080E9000075300000EA6000003A9800
	00176F925FC5460000018C4944415478DAECDDC18A84300C00D0FEFF4F770FCB
	C022C28EC3B4499A2704BCB4DA47281AAD8E39E77837C618738C319FB411378E
	4FD1E7EF0EFCDDE8AF0D7E003AFC4074F881E8F003D1E107A2C30F44871F880E
	3F10BD3B7E287A57FC14E8DDF057DD1CC1DF897EA946C2DF857E530A86BF0B1D
	7E203AFC4074F881E8DDF143D1BBE2A740EF869F0ABD0B7E4AF4D3F153A39F8A
	5F02FD34FC52E8A7E09744AF8E5F1ABD2AFE11E8D5F08F42AF827F247A76FCA3
	D1B3E2B740CF86DF0A3D0B7E4BF415F8D037E3430FC0871E800F3D001FFA227C
	E8D0A143870E1D3A74E8D0A14387BE1BFD6F874F0E7E42F16BD5B81F7D42EA83
	855E27D45DBE3EEE71E9785C3BB8C63B4F526EDA94C3FED6B86F5D657A40A69B
	D313CEE9AE5E5C3242870E1D3A74E8D0A143870E1D3A74E8D0A143870E1D3A74
	E8D0A1E7460F381674E81BD1235EF190E91778996E7A89413F35D2A277DDA043
	870E1D3A74E8D0A1FFBB4A412C444F586EAD79EE55C12B2FB1290DDEE2973BA6
	17E8D0854C872E643A74992ED3B7C40F000000FFFF03005652EEFF6D96594000
	00000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="32" length_in_bytes="3150" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000005D0000
	00620806000000325DDFBB000000097048597300000EC300000EC301C76FA864
	00000A4F6943435050686F746F73686F70204943432070726F66696C65000078
	DA9D53675453E9163DF7DEF4424B8880944B6F5215082052428B801491262A21
	09104A8821A1D91551C1114545041BC8A088038E8E808C15512C0C8A0AD807E4
	21A28E83A3888ACAFBE17BA36BD6BCF7E6CDFEB5D73EE7ACF39DB3CF07C0080C
	9648335135800CA9421E11E083C7C4C6E1E42E40810A2470001008B3642173FD
	230100F87E3C3C2B22C007BE000178D30B0800C04D9BC0301C87FF0FEA42995C
	01808401C07491384B08801400407A8E42A600404601809D98265300A0040060
	CB6362E300502D0060277FE6D300809DF8997B01005B94211501A09100201365
	884400683B00ACCF568A450058300014664BC43900D82D00304957664800B0B7
	00C0CE100BB200080C00305188852900047B0060C8232378008499001446F257
	3CF12BAE10E72A00007899B23CB9243945815B082D710757572E1E28CE49172B
	14366102619A402EC27999193281340FE0F3CC0000A0911511E083F3FD78CE0E
	AECECE368EB60E5F2DEABF06FF226262E3FEE5CFAB70400000E1747ED1FE2C2F
	B31A803B06806DFEA225EE04685E0BA075F78B66B20F40B500A0E9DA57F370F8
	7E3C3C45A190B9D9D9E5E4E4D84AC4425B61CA577DFE67C25FC057FD6CF97E3C
	FCF7F5E0BEE22481325D814704F8E0C2CCF44CA51CCF92098462DCE68F47FCB7
	0BFFFC1DD322C44962B9582A14E35112718E449A8CF332A52289429229C525D2
	FF64E2DF2CFB033EDF3500B06A3E017B912DA85D6303F64B27105874C0E2F700
	00F2BB6FC1D4280803806883E1CF77FFEF3FFD47A02500806649927100005E44
	242E54CAB33FC708000044A0812AB0411BF4C1182CC0061CC105DCC10BFC6036
	844224C4C24210420A64801C726029AC82422886CDB01D2A602FD4401D34C051
	688693700E2EC255B80E3D700FFA61089EC128BC81090441C808136121DA8801
	628A58238E08179985F821C14804128B2420C9881451224B91354831528A5420
	55481DF23D720239875C46BA913BC8003282FC86BC47319481B2513DD40CB543
	B9A8371A8446A20BD06474319A8F16A09BD072B41A3D8C36A1E7D0AB680FDA8F
	3E43C730C0E8180733C46C302EC6C342B1382C099363CBB122AC0CABC61AB056
	AC03BB89F563CFB17704128145C0093604774220611E4148584C584ED848A820
	1C243411DA093709038451C2272293A84BB426BA11F9C4186232318758482C23
	D6128F132F107B8843C437241289433227B9900249B1A454D212D246D26E5223
	E92CA99B34481A2393C9DA646BB20739942C202BC885E49DE4C3E433E41BE421
	F25B0A9D624071A4F853E22852CA6A4A19E510E534E5066598324155A39A52DD
	A8A15411358F5A42ADA1B652AF5187A81334759A39CD8316494BA5ADA295D31A
	681768F769AFE874BA11DD951E4E97D057D2CBE947E897E803F4770C0D861583
	C7886728199B18071867197718AF984CA619D38B19C754303731EB98E7990F99
	6F55582AB62A7C1591CA0A954A9526951B2A2F54A9AAA6AADEAA0B55F355CB54
	8FA95E537DAE46553353E3A909D496AB55AA9D50EB531B5367A93BA887AA67A8
	6F543FA47E59FD890659C34CC34F43A451A0B15FE3BCC6200B6319B3782C216B
	0DAB86758135C426B1CDD97C762ABB98FD1DBB8B3DAAA9A13943334A3357B352
	F394663F07E39871F89C744E09E728A797F37E8ADE14EF29E2291BA6344CB931
	655C6BAA96979658AB48AB51AB47EBBD36AEEDA79DA6BD45BB59FB810E41C74A
	275C2747678FCE059DE753D953DDA70AA7164D3D3AF5AE2EAA6BA51BA1BB4477
	BF6EA7EE989EBE5E809E4C6FA7DE79BDE7FA1C7D2FFD54FD6DFAA7F5470C5806
	B30C2406DB0CCE183CC535716F3C1D2FC7DBF151435DC34043A561956197E184
	91B9D13CA3D5468D460F8C69C65CE324E36DC66DC6A326062621264B4DEA4DEE
	9A524DB9A629A63B4C3B4CC7CDCCCDA2CDD699359B3D31D732E79BE79BD79BDF
	B7605A785A2CB6A8B6B86549B2E45AA659EEB6BC6E855A3959A558555A5DB346
	AD9DAD25D6BBADBBA711A7B94E934EAB9ED667C3B0F1B6C9B6A9B719B0E5D806
	DBAEB66DB67D6167621767B7C5AEC3EE93BD937DBA7D8DFD3D070D87D90EAB1D
	5A1D7E73B472143A563ADE9ACE9CEE3F7DC5F496E92F6758CF10CFD833E3B613
	CB29C4699D539BD347671767B97383F3888B894B82CB2E973E2E9B1BC6DDC8BD
	E44A74F5715DE17AD2F59D9BB39BC2EDA8DBAFEE36EE69EE87DC9FCC349F299E
	593373D0C3C843E051E5D13F0B9F95306BDFAC7E4F434F8167B5E7232F632F91
	57ADD7B0B7A577AAF761EF173EF63E729FE33EE33C37DE32DE595FCC37C0B7C8
	B7CB4FC36F9E5F85DF437F23FF64FF7AFFD100A78025016703898141815B02FB
	F87A7C21BF8E3F3ADB65F6B2D9ED418CA0B94115418F82AD82E5C1AD2168C8EC
	90AD21F7E798CE91CE690E85507EE8D6D00761E6618BC37E0C2785878557863F
	8E7088581AD131973577D1DC4373DF44FA449644DE9B67314F39AF2D4A352A3E
	AA2E6A3CDA37BA34BA3FC62E6659CCD5589D58496C4B1C392E2AAE366E6CBEDF
	FCEDF387E29DE20BE37B17982FC85D7079A1CEC2F485A716A92E122C3A96404C
	884E3894F041102AA8168C25F21377258E0A79C21DC267222FD136D188D8435C
	2A1E4EF2482A4D7A92EC91BC357924C533A52CE5B98427A990BC4C0D4CDD9B3A
	9E169A76206D323D3ABD31839291907142AA214D93B667EA67E66676CBAC6585
	B2FEC56E8BB72F1E9507C96BB390AC05592D0AB642A6E8545A28D72A07B26765
	5766BFCD89CA3996AB9E2BCDEDCCB3CADB90379CEF9FFFED12C212E192B6A586
	4B572D1D58E6BDAC6A39B23C7179DB0AE315052B865606AC3CB88AB62A6DD54F
	ABED5797AE7EBD267A4D6B815EC1CA82C1B5016BEB0B550AE5857DEBDCD7ED5D
	4F582F59DFB561FA869D1B3E15898AAE14DB1797157FD828DC78E51B876FCABF
	99DC94B4A9ABC4B964CF66D266E9E6DE2D9E5B0E96AA97E6970E6E0DD9DAB40D
	DF56B4EDF5F645DB2F97CD28DBBB83B643B9A3BF3CB8BC65A7C9CECD3B3F54A4
	54F454FA5436EED2DDB561D7F86ED1EE1B7BBCF634ECD5DB5BBCF7FD3EC9BEDB
	5501554DD566D565FB49FBB3F73FAE89AAE9F896FB6D5DAD4E6D71EDC703D203
	FD07230EB6D7B9D4D51DD23D54528FD62BEB470EC71FBEFE9DEF772D0D360D55
	8D9CC6E223704479E4E9F709DFF71E0D3ADA768C7BACE107D31F761D671D2F6A
	429AF29A469B539AFB5B625BBA4FCC3ED1D6EADE7AFC47DB1F0F9C343C59794A
	F354C969DAE982D39367F2CF8C9D959D7D7E2EF9DC60DBA2B67BE763CEDF6A0F
	6FEFBA1074E1D245FF8BE73BBC3BCE5CF2B874F2B2DBE51357B8579AAF3A5F6D
	EA74EA3CFE93D34FC7BB9CBB9AAEB95C6BB9EE7ABDB57B66F7E91B9E37CEDDF4
	BD79F116FFD6D59E393DDDBDF37A6FF7C5F7F5DF16DD7E7227FDCECBBBD97727
	EEADBC4FBC5FF440ED41D943DD87D53F5BFEDCD8EFDC7F6AC077A0F3D1DC47F7
	068583CFFE91F58F0F43058F998FCB860D86EB9E383E3939E23F72FDE9FCA743
	CF64CF269E17FEA2FECBAE17162F7EF8D5EBD7CED198D1A197F29793BF6D7CA5
	FDEAC0EB19AFDBC6C2C61EBEC97833315EF456FBEDC177DC771DEFA3DF0F4FE4
	7C207F28FF68F9B1F553D0A7FB93199393FF040398F3FC63332DDB0000002063
	48524D00007A25000080830000F9FF000080E9000075300000EA6000003A9800
	00176F925FC5460000016F4944415478DAECDCCD8A85300C06D0BCFF4BF72E86
	818BB8D0196DD2F4081FB869A5875A34FEC41823AE262246448C3B6DE4C4F12E
	FAF8D9813F1BFD77839F800E3F111D7E223AFC4474F889E8F013D1E127A2C34F
	44DF1D3F157D57FC12E8BBE1BF7573047F26FAA11A097F16FA492918FE2C74F8
	89E8F013D1E127A2EF8E9F8ABE2B7E09F4DDF04BA1EF825F12BD3B7E69F4AEF8
	4BA077C35F0ABD0BFE92E8ABE32F8DBE2A7E0BF4D5F05BA1AF82DF12BD3A7E6B
	F4AAF85BA057C3DF0ABD0AFE96E86FE0439F8C0F3D011F7A023EF4047CE82FE1
	43870E1D3A74E8D0A143870E1D3AF4D9E8DF1DDE397887E2D75BE3BEF50BA93F
	7CE8D5A1EEF2F8B8E3D0711C3B38E6CA93949336CB613F35EE5357333D61A65B
	D30BAEE9AE5E5C3242870E1D3A74E8D0A143870E1D3A74E8D0A143870E1D3A74
	E8D0A143870E1D3A74E8D01F4797FFBFC5161D6766F933070274E8021DBA4087
	2ED0A10B74E8D0053A74810E5DA043971863C4070000FFFF0300EB45BF216A57
	09900000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="33" length_in_bytes="2993" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000005D0000
	00620806000000325DDFBB000000097048597300000EC300000EC301C76FA864
	00000A4F6943435050686F746F73686F70204943432070726F66696C65000078
	DA9D53675453E9163DF7DEF4424B8880944B6F5215082052428B801491262A21
	09104A8821A1D91551C1114545041BC8A088038E8E808C15512C0C8A0AD807E4
	21A28E83A3888ACAFBE17BA36BD6BCF7E6CDFEB5D73EE7ACF39DB3CF07C0080C
	9648335135800CA9421E11E083C7C4C6E1E42E40810A2470001008B3642173FD
	230100F87E3C3C2B22C007BE000178D30B0800C04D9BC0301C87FF0FEA42995C
	01808401C07491384B08801400407A8E42A600404601809D98265300A0040060
	CB6362E300502D0060277FE6D300809DF8997B01005B94211501A09100201365
	884400683B00ACCF568A450058300014664BC43900D82D00304957664800B0B7
	00C0CE100BB200080C00305188852900047B0060C8232378008499001446F257
	3CF12BAE10E72A00007899B23CB9243945815B082D710757572E1E28CE49172B
	14366102619A402EC27999193281340FE0F3CC0000A0911511E083F3FD78CE0E
	AECECE368EB60E5F2DEABF06FF226262E3FEE5CFAB70400000E1747ED1FE2C2F
	B31A803B06806DFEA225EE04685E0BA075F78B66B20F40B500A0E9DA57F370F8
	7E3C3C45A190B9D9D9E5E4E4D84AC4425B61CA577DFE67C25FC057FD6CF97E3C
	FCF7F5E0BEE22481325D814704F8E0C2CCF44CA51CCF92098462DCE68F47FCB7
	0BFFFC1DD322C44962B9582A14E35112718E449A8CF332A52289429229C525D2
	FF64E2DF2CFB033EDF3500B06A3E017B912DA85D6303F64B27105874C0E2F700
	00F2BB6FC1D4280803806883E1CF77FFEF3FFD47A02500806649927100005E44
	242E54CAB33FC708000044A0812AB0411BF4C1182CC0061CC105DCC10BFC6036
	844224C4C24210420A64801C726029AC82422886CDB01D2A602FD4401D34C051
	688693700E2EC255B80E3D700FFA61089EC128BC81090441C808136121DA8801
	628A58238E08179985F821C14804128B2420C9881451224B91354831528A5420
	55481DF23D720239875C46BA913BC8003282FC86BC47319481B2513DD40CB543
	B9A8371A8446A20BD06474319A8F16A09BD072B41A3D8C36A1E7D0AB680FDA8F
	3E43C730C0E8180733C46C302EC6C342B1382C099363CBB122AC0CABC61AB056
	AC03BB89F563CFB17704128145C0093604774220611E4148584C584ED848A820
	1C243411DA093709038451C2272293A84BB426BA11F9C4186232318758482C23
	D6128F132F107B8843C437241289433227B9900249B1A454D212D246D26E5223
	E92CA99B34481A2393C9DA646BB20739942C202BC885E49DE4C3E433E41BE421
	F25B0A9D624071A4F853E22852CA6A4A19E510E534E5066598324155A39A52DD
	A8A15411358F5A42ADA1B652AF5187A81334759A39CD8316494BA5ADA295D31A
	681768F769AFE874BA11DD951E4E97D057D2CBE947E897E803F4770C0D861583
	C7886728199B18071867197718AF984CA619D38B19C754303731EB98E7990F99
	6F55582AB62A7C1591CA0A954A9526951B2A2F54A9AAA6AADEAA0B55F355CB54
	8FA95E537DAE46553353E3A909D496AB55AA9D50EB531B5367A93BA887AA67A8
	6F543FA47E59FD890659C34CC34F43A451A0B15FE3BCC6200B6319B3782C216B
	0DAB86758135C426B1CDD97C762ABB98FD1DBB8B3DAAA9A13943334A3357B352
	F394663F07E39871F89C744E09E728A797F37E8ADE14EF29E2291BA6344CB931
	655C6BAA96979658AB48AB51AB47EBBD36AEEDA79DA6BD45BB59FB810E41C74A
	275C2747678FCE059DE753D953DDA70AA7164D3D3AF5AE2EAA6BA51BA1BB4477
	BF6EA7EE989EBE5E809E4C6FA7DE79BDE7FA1C7D2FFD54FD6DFAA7F5470C5806
	B30C2406DB0CCE183CC535716F3C1D2FC7DBF151435DC34043A561956197E184
	91B9D13CA3D5468D460F8C69C65CE324E36DC66DC6A326062621264B4DEA4DEE
	9A524DB9A629A63B4C3B4CC7CDCCCDA2CDD699359B3D31D732E79BE79BD79BDF
	B7605A785A2CB6A8B6B86549B2E45AA659EEB6BC6E855A3959A558555A5DB346
	AD9DAD25D6BBADBBA711A7B94E934EAB9ED667C3B0F1B6C9B6A9B719B0E5D806
	DBAEB66DB67D6167621767B7C5AEC3EE93BD937DBA7D8DFD3D070D87D90EAB1D
	5A1D7E73B472143A563ADE9ACE9CEE3F7DC5F496E92F6758CF10CFD833E3B613
	CB29C4699D539BD347671767B97383F3888B894B82CB2E973E2E9B1BC6DDC8BD
	E44A74F5715DE17AD2F59D9BB39BC2EDA8DBAFEE36EE69EE87DC9FCC349F299E
	593373D0C3C843E051E5D13F0B9F95306BDFAC7E4F434F8167B5E7232F632F91
	57ADD7B0B7A577AAF761EF173EF63E729FE33EE33C37DE32DE595FCC37C0B7C8
	B7CB4FC36F9E5F85DF437F23FF64FF7AFFD100A78025016703898141815B02FB
	F87A7C21BF8E3F3ADB65F6B2D9ED418CA0B94115418F82AD82E5C1AD2168C8EC
	90AD21F7E798CE91CE690E85507EE8D6D00761E6618BC37E0C2785878557863F
	8E7088581AD131973577D1DC4373DF44FA449644DE9B67314F39AF2D4A352A3E
	AA2E6A3CDA37BA34BA3FC62E6659CCD5589D58496C4B1C392E2AAE366E6CBEDF
	FCEDF387E29DE20BE37B17982FC85D7079A1CEC2F485A716A92E122C3A96404C
	884E3894F041102AA8168C25F21377258E0A79C21DC267222FD136D188D8435C
	2A1E4EF2482A4D7A92EC91BC357924C533A52CE5B98427A990BC4C0D4CDD9B3A
	9E169A76206D323D3ABD31839291907142AA214D93B667EA67E66676CBAC6585
	B2FEC56E8BB72F1E9507C96BB390AC05592D0AB642A6E8545A28D72A07B26765
	5766BFCD89CA3996AB9E2BCDEDCCB3CADB90379CEF9FFFED12C212E192B6A586
	4B572D1D58E6BDAC6A39B23C7179DB0AE315052B865606AC3CB88AB62A6DD54F
	ABED5797AE7EBD267A4D6B815EC1CA82C1B5016BEB0B550AE5857DEBDCD7ED5D
	4F582F59DFB561FA869D1B3E15898AAE14DB1797157FD828DC78E51B876FCABF
	99DC94B4A9ABC4B964CF66D266E9E6DE2D9E5B0E96AA97E6970E6E0DD9DAB40D
	DF56B4EDF5F645DB2F97CD28DBBB83B643B9A3BF3CB8BC65A7C9CECD3B3F54A4
	54F454FA5436EED2DDB561D7F86ED1EE1B7BBCF634ECD5DB5BBCF7FD3EC9BEDB
	5501554DD566D565FB49FBB3F73FAE89AAE9F896FB6D5DAD4E6D71EDC703D203
	FD07230EB6D7B9D4D51DD23D54528FD62BEB470EC71FBEFE9DEF772D0D360D55
	8D9CC6E223704479E4E9F709DFF71E0D3ADA768C7BACE107D31F761D671D2F6A
	429AF29A469B539AFB5B625BBA4FCC3ED1D6EADE7AFC47DB1F0F9C343C59794A
	F354C969DAE982D39367F2CF8C9D959D7D7E2EF9DC60DBA2B67BE763CEDF6A0F
	6FEFBA1074E1D245FF8BE73BBC3BCE5CF2B874F2B2DBE51357B8579AAF3A5F6D
	EA74EA3CFE93D34FC7BB9CBB9AAEB95C6BB9EE7ABDB57B66F7E91B9E37CEDDF4
	BD79F116FFD6D59E393DDDBDF37A6FF7C5F7F5DF16DD7E7227FDCECBBBD97727
	EEADBC4FBC5FF440ED41D943DD87D53F5BFEDCD8EFDC7F6AC077A0F3D1DC47F7
	068583CFFE91F58F0F43058F998FCB860D86EB9E383E3939E23F72FDE9FCA743
	CF64CF269E17FEA2FECBAE17162F7EF8D5EBD7CED198D1A197F29793BF6D7CA5
	FDEAC0EB19AFDBC6C2C61EBEC97833315EF456FBEDC177DC771DEFA3DF0F4FE4
	7C207F28FF68F9B1F553D0A7FB93199393FF040398F3FC63332DDB0000002063
	48524D00007A25000080830000F9FF000080E9000075300000EA6000003A9800
	00176F925FC546000000D24944415478DAECD2C10D0020080441AFFFA2CFB77F
	624C9CAD0006D276E96E810E1DBAA0431774E8820E5DD0A1431774E8820E5D77
	D0937C73B9B679067D6298E73F74684FE8D0A143870E1D3A74E8D0A143870E1D
	3A74E8D0A143870E1D3A74E8D0A143870E1D3A74E8D0A143870E1D3A74E8D0A1
	43870E1D3A74E8D0A143870E1D3A74E8D0A143870E1D3A74E8D0A143870E1D3A
	74E8D0A143870E1D3A74E8D0A143870E1D3A74E8D0A143870E1D3A74E8D0A143
	870E1D3A74E8D0A143870E1D3A74E8C730EB9326D037000000FFFF0300AEC3A5
	6AD99844C50000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="34" length_in_bytes="3108" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000005D0000
	00620806000000325DDFBB000000097048597300000EC300000EC301C76FA864
	00000A4F6943435050686F746F73686F70204943432070726F66696C65000078
	DA9D53675453E9163DF7DEF4424B8880944B6F5215082052428B801491262A21
	09104A8821A1D91551C1114545041BC8A088038E8E808C15512C0C8A0AD807E4
	21A28E83A3888ACAFBE17BA36BD6BCF7E6CDFEB5D73EE7ACF39DB3CF07C0080C
	9648335135800CA9421E11E083C7C4C6E1E42E40810A2470001008B3642173FD
	230100F87E3C3C2B22C007BE000178D30B0800C04D9BC0301C87FF0FEA42995C
	01808401C07491384B08801400407A8E42A600404601809D98265300A0040060
	CB6362E300502D0060277FE6D300809DF8997B01005B94211501A09100201365
	884400683B00ACCF568A450058300014664BC43900D82D00304957664800B0B7
	00C0CE100BB200080C00305188852900047B0060C8232378008499001446F257
	3CF12BAE10E72A00007899B23CB9243945815B082D710757572E1E28CE49172B
	14366102619A402EC27999193281340FE0F3CC0000A0911511E083F3FD78CE0E
	AECECE368EB60E5F2DEABF06FF226262E3FEE5CFAB70400000E1747ED1FE2C2F
	B31A803B06806DFEA225EE04685E0BA075F78B66B20F40B500A0E9DA57F370F8
	7E3C3C45A190B9D9D9E5E4E4D84AC4425B61CA577DFE67C25FC057FD6CF97E3C
	FCF7F5E0BEE22481325D814704F8E0C2CCF44CA51CCF92098462DCE68F47FCB7
	0BFFFC1DD322C44962B9582A14E35112718E449A8CF332A52289429229C525D2
	FF64E2DF2CFB033EDF3500B06A3E017B912DA85D6303F64B27105874C0E2F700
	00F2BB6FC1D4280803806883E1CF77FFEF3FFD47A02500806649927100005E44
	242E54CAB33FC708000044A0812AB0411BF4C1182CC0061CC105DCC10BFC6036
	844224C4C24210420A64801C726029AC82422886CDB01D2A602FD4401D34C051
	688693700E2EC255B80E3D700FFA61089EC128BC81090441C808136121DA8801
	628A58238E08179985F821C14804128B2420C9881451224B91354831528A5420
	55481DF23D720239875C46BA913BC8003282FC86BC47319481B2513DD40CB543
	B9A8371A8446A20BD06474319A8F16A09BD072B41A3D8C36A1E7D0AB680FDA8F
	3E43C730C0E8180733C46C302EC6C342B1382C099363CBB122AC0CABC61AB056
	AC03BB89F563CFB17704128145C0093604774220611E4148584C584ED848A820
	1C243411DA093709038451C2272293A84BB426BA11F9C4186232318758482C23
	D6128F132F107B8843C437241289433227B9900249B1A454D212D246D26E5223
	E92CA99B34481A2393C9DA646BB20739942C202BC885E49DE4C3E433E41BE421
	F25B0A9D624071A4F853E22852CA6A4A19E510E534E5066598324155A39A52DD
	A8A15411358F5A42ADA1B652AF5187A81334759A39CD8316494BA5ADA295D31A
	681768F769AFE874BA11DD951E4E97D057D2CBE947E897E803F4770C0D861583
	C7886728199B18071867197718AF984CA619D38B19C754303731EB98E7990F99
	6F55582AB62A7C1591CA0A954A9526951B2A2F54A9AAA6AADEAA0B55F355CB54
	8FA95E537DAE46553353E3A909D496AB55AA9D50EB531B5367A93BA887AA67A8
	6F543FA47E59FD890659C34CC34F43A451A0B15FE3BCC6200B6319B3782C216B
	0DAB86758135C426B1CDD97C762ABB98FD1DBB8B3DAAA9A13943334A3357B352
	F394663F07E39871F89C744E09E728A797F37E8ADE14EF29E2291BA6344CB931
	655C6BAA96979658AB48AB51AB47EBBD36AEEDA79DA6BD45BB59FB810E41C74A
	275C2747678FCE059DE753D953DDA70AA7164D3D3AF5AE2EAA6BA51BA1BB4477
	BF6EA7EE989EBE5E809E4C6FA7DE79BDE7FA1C7D2FFD54FD6DFAA7F5470C5806
	B30C2406DB0CCE183CC535716F3C1D2FC7DBF151435DC34043A561956197E184
	91B9D13CA3D5468D460F8C69C65CE324E36DC66DC6A326062621264B4DEA4DEE
	9A524DB9A629A63B4C3B4CC7CDCCCDA2CDD699359B3D31D732E79BE79BD79BDF
	B7605A785A2CB6A8B6B86549B2E45AA659EEB6BC6E855A3959A558555A5DB346
	AD9DAD25D6BBADBBA711A7B94E934EAB9ED667C3B0F1B6C9B6A9B719B0E5D806
	DBAEB66DB67D6167621767B7C5AEC3EE93BD937DBA7D8DFD3D070D87D90EAB1D
	5A1D7E73B472143A563ADE9ACE9CEE3F7DC5F496E92F6758CF10CFD833E3B613
	CB29C4699D539BD347671767B97383F3888B894B82CB2E973E2E9B1BC6DDC8BD
	E44A74F5715DE17AD2F59D9BB39BC2EDA8DBAFEE36EE69EE87DC9FCC349F299E
	593373D0C3C843E051E5D13F0B9F95306BDFAC7E4F434F8167B5E7232F632F91
	57ADD7B0B7A577AAF761EF173EF63E729FE33EE33C37DE32DE595FCC37C0B7C8
	B7CB4FC36F9E5F85DF437F23FF64FF7AFFD100A78025016703898141815B02FB
	F87A7C21BF8E3F3ADB65F6B2D9ED418CA0B94115418F82AD82E5C1AD2168C8EC
	90AD21F7E798CE91CE690E85507EE8D6D00761E6618BC37E0C2785878557863F
	8E7088581AD131973577D1DC4373DF44FA449644DE9B67314F39AF2D4A352A3E
	AA2E6A3CDA37BA34BA3FC62E6659CCD5589D58496C4B1C392E2AAE366E6CBEDF
	FCEDF387E29DE20BE37B17982FC85D7079A1CEC2F485A716A92E122C3A96404C
	884E3894F041102AA8168C25F21377258E0A79C21DC267222FD136D188D8435C
	2A1E4EF2482A4D7A92EC91BC357924C533A52CE5B98427A990BC4C0D4CDD9B3A
	9E169A76206D323D3ABD31839291907142AA214D93B667EA67E66676CBAC6585
	B2FEC56E8BB72F1E9507C96BB390AC05592D0AB642A6E8545A28D72A07B26765
	5766BFCD89CA3996AB9E2BCDEDCCB3CADB90379CEF9FFFED12C212E192B6A586
	4B572D1D58E6BDAC6A39B23C7179DB0AE315052B865606AC3CB88AB62A6DD54F
	ABED5797AE7EBD267A4D6B815EC1CA82C1B5016BEB0B550AE5857DEBDCD7ED5D
	4F582F59DFB561FA869D1B3E15898AAE14DB1797157FD828DC78E51B876FCABF
	99DC94B4A9ABC4B964CF66D266E9E6DE2D9E5B0E96AA97E6970E6E0DD9DAB40D
	DF56B4EDF5F645DB2F97CD28DBBB83B643B9A3BF3CB8BC65A7C9CECD3B3F54A4
	54F454FA5436EED2DDB561D7F86ED1EE1B7BBCF634ECD5DB5BBCF7FD3EC9BEDB
	5501554DD566D565FB49FBB3F73FAE89AAE9F896FB6D5DAD4E6D71EDC703D203
	FD07230EB6D7B9D4D51DD23D54528FD62BEB470EC71FBEFE9DEF772D0D360D55
	8D9CC6E223704479E4E9F709DFF71E0D3ADA768C7BACE107D31F761D671D2F6A
	429AF29A469B539AFB5B625BBA4FCC3ED1D6EADE7AFC47DB1F0F9C343C59794A
	F354C969DAE982D39367F2CF8C9D959D7D7E2EF9DC60DBA2B67BE763CEDF6A0F
	6FEFBA1074E1D245FF8BE73BBC3BCE5CF2B874F2B2DBE51357B8579AAF3A5F6D
	EA74EA3CFE93D34FC7BB9CBB9AAEB95C6BB9EE7ABDB57B66F7E91B9E37CEDDF4
	BD79F116FFD6D59E393DDDBDF37A6FF7C5F7F5DF16DD7E7227FDCECBBBD97727
	EEADBC4FBC5FF440ED41D943DD87D53F5BFEDCD8EFDC7F6AC077A0F3D1DC47F7
	068583CFFE91F58F0F43058F998FCB860D86EB9E383E3939E23F72FDE9FCA743
	CF64CF269E17FEA2FECBAE17162F7EF8D5EBD7CED198D1A197F29793BF6D7CA5
	FDEAC0EB19AFDBC6C2C61EBEC97833315EF456FBEDC177DC771DEFA3DF0F4FE4
	7C207F28FF68F9B1F553D0A7FB93199393FF040398F3FC63332DDB0000002063
	48524D00007A25000080830000F9FF000080E9000075300000EA6000003A9800
	00176F925FC546000001454944415478DAECDBD10E82300C05D0F5FF3F7A3E90
	18343332331965A72F2406C19E5C964A206AAD25634544ADB546CADF9E153D73
	85A443977449872EE9920E1DFABFB1DF3FCB869F32E97BF88C69B7BC5C1DBD75
	69ABFE2BAE1BDD88D974810E1D3A74E8D07F478F8865803FF53F05FDEC9979C6
	9C3EAAFF94E8B3FE912E8B3EF3DECBD249B7BC405F077DD268081D3A74E8D0A1
	43870E1D3A74E8D0A143870E1D3A74E8D0A143870E1D3A74E8D0A143870E1D3A
	74E8D0D746DF3F3378E4A499DFEF3CABFF43E8A56C8F237F3BE97EDF3BA18FEE
	3FB67D9E077CD9B6BED0F3FA4B66FC51FDB75C257D46D2ADE9175CD34D2F4646
	E8D0A143870E1D3A74E8D0A143870E1D3A74E8D0A143870E1D3A74E8D0A14387
	0E1D3A74E8D0A143870E1D3A74E8D0A143870E1D3A74E8D0A143870E1D3A74E8
	D0EF835E54B37AD01F000000FFFF030057953299B9F959C60000000049454E44
	AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="35" length_in_bytes="3159" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000005D0000
	00620806000000325DDFBB000000097048597300000EC300000EC301C76FA864
	00000A4F6943435050686F746F73686F70204943432070726F66696C65000078
	DA9D53675453E9163DF7DEF4424B8880944B6F5215082052428B801491262A21
	09104A8821A1D91551C1114545041BC8A088038E8E808C15512C0C8A0AD807E4
	21A28E83A3888ACAFBE17BA36BD6BCF7E6CDFEB5D73EE7ACF39DB3CF07C0080C
	9648335135800CA9421E11E083C7C4C6E1E42E40810A2470001008B3642173FD
	230100F87E3C3C2B22C007BE000178D30B0800C04D9BC0301C87FF0FEA42995C
	01808401C07491384B08801400407A8E42A600404601809D98265300A0040060
	CB6362E300502D0060277FE6D300809DF8997B01005B94211501A09100201365
	884400683B00ACCF568A450058300014664BC43900D82D00304957664800B0B7
	00C0CE100BB200080C00305188852900047B0060C8232378008499001446F257
	3CF12BAE10E72A00007899B23CB9243945815B082D710757572E1E28CE49172B
	14366102619A402EC27999193281340FE0F3CC0000A0911511E083F3FD78CE0E
	AECECE368EB60E5F2DEABF06FF226262E3FEE5CFAB70400000E1747ED1FE2C2F
	B31A803B06806DFEA225EE04685E0BA075F78B66B20F40B500A0E9DA57F370F8
	7E3C3C45A190B9D9D9E5E4E4D84AC4425B61CA577DFE67C25FC057FD6CF97E3C
	FCF7F5E0BEE22481325D814704F8E0C2CCF44CA51CCF92098462DCE68F47FCB7
	0BFFFC1DD322C44962B9582A14E35112718E449A8CF332A52289429229C525D2
	FF64E2DF2CFB033EDF3500B06A3E017B912DA85D6303F64B27105874C0E2F700
	00F2BB6FC1D4280803806883E1CF77FFEF3FFD47A02500806649927100005E44
	242E54CAB33FC708000044A0812AB0411BF4C1182CC0061CC105DCC10BFC6036
	844224C4C24210420A64801C726029AC82422886CDB01D2A602FD4401D34C051
	688693700E2EC255B80E3D700FFA61089EC128BC81090441C808136121DA8801
	628A58238E08179985F821C14804128B2420C9881451224B91354831528A5420
	55481DF23D720239875C46BA913BC8003282FC86BC47319481B2513DD40CB543
	B9A8371A8446A20BD06474319A8F16A09BD072B41A3D8C36A1E7D0AB680FDA8F
	3E43C730C0E8180733C46C302EC6C342B1382C099363CBB122AC0CABC61AB056
	AC03BB89F563CFB17704128145C0093604774220611E4148584C584ED848A820
	1C243411DA093709038451C2272293A84BB426BA11F9C4186232318758482C23
	D6128F132F107B8843C437241289433227B9900249B1A454D212D246D26E5223
	E92CA99B34481A2393C9DA646BB20739942C202BC885E49DE4C3E433E41BE421
	F25B0A9D624071A4F853E22852CA6A4A19E510E534E5066598324155A39A52DD
	A8A15411358F5A42ADA1B652AF5187A81334759A39CD8316494BA5ADA295D31A
	681768F769AFE874BA11DD951E4E97D057D2CBE947E897E803F4770C0D861583
	C7886728199B18071867197718AF984CA619D38B19C754303731EB98E7990F99
	6F55582AB62A7C1591CA0A954A9526951B2A2F54A9AAA6AADEAA0B55F355CB54
	8FA95E537DAE46553353E3A909D496AB55AA9D50EB531B5367A93BA887AA67A8
	6F543FA47E59FD890659C34CC34F43A451A0B15FE3BCC6200B6319B3782C216B
	0DAB86758135C426B1CDD97C762ABB98FD1DBB8B3DAAA9A13943334A3357B352
	F394663F07E39871F89C744E09E728A797F37E8ADE14EF29E2291BA6344CB931
	655C6BAA96979658AB48AB51AB47EBBD36AEEDA79DA6BD45BB59FB810E41C74A
	275C2747678FCE059DE753D953DDA70AA7164D3D3AF5AE2EAA6BA51BA1BB4477
	BF6EA7EE989EBE5E809E4C6FA7DE79BDE7FA1C7D2FFD54FD6DFAA7F5470C5806
	B30C2406DB0CCE183CC535716F3C1D2FC7DBF151435DC34043A561956197E184
	91B9D13CA3D5468D460F8C69C65CE324E36DC66DC6A326062621264B4DEA4DEE
	9A524DB9A629A63B4C3B4CC7CDCCCDA2CDD699359B3D31D732E79BE79BD79BDF
	B7605A785A2CB6A8B6B86549B2E45AA659EEB6BC6E855A3959A558555A5DB346
	AD9DAD25D6BBADBBA711A7B94E934EAB9ED667C3B0F1B6C9B6A9B719B0E5D806
	DBAEB66DB67D6167621767B7C5AEC3EE93BD937DBA7D8DFD3D070D87D90EAB1D
	5A1D7E73B472143A563ADE9ACE9CEE3F7DC5F496E92F6758CF10CFD833E3B613
	CB29C4699D539BD347671767B97383F3888B894B82CB2E973E2E9B1BC6DDC8BD
	E44A74F5715DE17AD2F59D9BB39BC2EDA8DBAFEE36EE69EE87DC9FCC349F299E
	593373D0C3C843E051E5D13F0B9F95306BDFAC7E4F434F8167B5E7232F632F91
	57ADD7B0B7A577AAF761EF173EF63E729FE33EE33C37DE32DE595FCC37C0B7C8
	B7CB4FC36F9E5F85DF437F23FF64FF7AFFD100A78025016703898141815B02FB
	F87A7C21BF8E3F3ADB65F6B2D9ED418CA0B94115418F82AD82E5C1AD2168C8EC
	90AD21F7E798CE91CE690E85507EE8D6D00761E6618BC37E0C2785878557863F
	8E7088581AD131973577D1DC4373DF44FA449644DE9B67314F39AF2D4A352A3E
	AA2E6A3CDA37BA34BA3FC62E6659CCD5589D58496C4B1C392E2AAE366E6CBEDF
	FCEDF387E29DE20BE37B17982FC85D7079A1CEC2F485A716A92E122C3A96404C
	884E3894F041102AA8168C25F21377258E0A79C21DC267222FD136D188D8435C
	2A1E4EF2482A4D7A92EC91BC357924C533A52CE5B98427A990BC4C0D4CDD9B3A
	9E169A76206D323D3ABD31839291907142AA214D93B667EA67E66676CBAC6585
	B2FEC56E8BB72F1E9507C96BB390AC05592D0AB642A6E8545A28D72A07B26765
	5766BFCD89CA3996AB9E2BCDEDCCB3CADB90379CEF9FFFED12C212E192B6A586
	4B572D1D58E6BDAC6A39B23C7179DB0AE315052B865606AC3CB88AB62A6DD54F
	ABED5797AE7EBD267A4D6B815EC1CA82C1B5016BEB0B550AE5857DEBDCD7ED5D
	4F582F59DFB561FA869D1B3E15898AAE14DB1797157FD828DC78E51B876FCABF
	99DC94B4A9ABC4B964CF66D266E9E6DE2D9E5B0E96AA97E6970E6E0DD9DAB40D
	DF56B4EDF5F645DB2F97CD28DBBB83B643B9A3BF3CB8BC65A7C9CECD3B3F54A4
	54F454FA5436EED2DDB561D7F86ED1EE1B7BBCF634ECD5DB5BBCF7FD3EC9BEDB
	5501554DD566D565FB49FBB3F73FAE89AAE9F896FB6D5DAD4E6D71EDC703D203
	FD07230EB6D7B9D4D51DD23D54528FD62BEB470EC71FBEFE9DEF772D0D360D55
	8D9CC6E223704479E4E9F709DFF71E0D3ADA768C7BACE107D31F761D671D2F6A
	429AF29A469B539AFB5B625BBA4FCC3ED1D6EADE7AFC47DB1F0F9C343C59794A
	F354C969DAE982D39367F2CF8C9D959D7D7E2EF9DC60DBA2B67BE763CEDF6A0F
	6FEFBA1074E1D245FF8BE73BBC3BCE5CF2B874F2B2DBE51357B8579AAF3A5F6D
	EA74EA3CFE93D34FC7BB9CBB9AAEB95C6BB9EE7ABDB57B66F7E91B9E37CEDDF4
	BD79F116FFD6D59E393DDDBDF37A6FF7C5F7F5DF16DD7E7227FDCECBBBD97727
	EEADBC4FBC5FF440ED41D943DD87D53F5BFEDCD8EFDC7F6AC077A0F3D1DC47F7
	068583CFFE91F58F0F43058F998FCB860D86EB9E383E3939E23F72FDE9FCA743
	CF64CF269E17FEA2FECBAE17162F7EF8D5EBD7CED198D1A197F29793BF6D7CA5
	FDEAC0EB19AFDBC6C2C61EBEC97833315EF456FBEDC177DC771DEFA3DF0F4FE4
	7C207F28FF68F9B1F553D0A7FB93199393FF040398F3FC63332DDB0000002063
	48524D00007A25000080830000F9FF000080E9000075300000EA6000003A9800
	00176F925FC546000001784944415478DAECDCD18E82301005D099FFFFE8D917
	4944BB0B982EA572FAE2032AF4706986266D5655CCD832B3AA2A67B9A6E76339
	2BFA15431011F117FA723C25BD1FF8EEEF4BBAA41BD3B5FE01C8CC92F411D70E
	5DD23FAA14664BFC94497F86BF02B8317D866B8F08E5CB087465E3A94F28F421
	E855B58C8F444E005F4D03803F07FCAD6404FFFFE0CD3A7D6B9AB2755332F336
	809FF4FFB5B43D54A7FFF624BCDEC96FADD37BF57F4AF4516FA4B7451F39F772
	EBA41B5EA0DF077D50E9071D3A74E8D0A143870E1D3A74E8D0A143870E1D3A74
	E8D0A143870E1D3A74E8D0A143870E1D3A74E8D0EF8DBEDABD61C749675EDF79
	56FF77A1473CF629D938E9D69E27B3A2F7EEFFB2A471F9C3D567EB0747967FCC
	8CDFABFF2D57491F917463FA05C774D58B92113A74E8D0A143870E1D3A74E8D0
	A143870E1D3A74E8D0A143870E1D3A74E8D0A143870E1D3A74E8D0A143870E1D
	3A74E8D0A143870E1D3A74E8D0A143870E1D3AF4EF410FADD98EA0FF000000FF
	FF0300F61450A7767155910000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="36" length_in_bytes="3171" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000005D0000
	00620806000000325DDFBB000000097048597300000EC300000EC301C76FA864
	00000A4F6943435050686F746F73686F70204943432070726F66696C65000078
	DA9D53675453E9163DF7DEF4424B8880944B6F5215082052428B801491262A21
	09104A8821A1D91551C1114545041BC8A088038E8E808C15512C0C8A0AD807E4
	21A28E83A3888ACAFBE17BA36BD6BCF7E6CDFEB5D73EE7ACF39DB3CF07C0080C
	9648335135800CA9421E11E083C7C4C6E1E42E40810A2470001008B3642173FD
	230100F87E3C3C2B22C007BE000178D30B0800C04D9BC0301C87FF0FEA42995C
	01808401C07491384B08801400407A8E42A600404601809D98265300A0040060
	CB6362E300502D0060277FE6D300809DF8997B01005B94211501A09100201365
	884400683B00ACCF568A450058300014664BC43900D82D00304957664800B0B7
	00C0CE100BB200080C00305188852900047B0060C8232378008499001446F257
	3CF12BAE10E72A00007899B23CB9243945815B082D710757572E1E28CE49172B
	14366102619A402EC27999193281340FE0F3CC0000A0911511E083F3FD78CE0E
	AECECE368EB60E5F2DEABF06FF226262E3FEE5CFAB70400000E1747ED1FE2C2F
	B31A803B06806DFEA225EE04685E0BA075F78B66B20F40B500A0E9DA57F370F8
	7E3C3C45A190B9D9D9E5E4E4D84AC4425B61CA577DFE67C25FC057FD6CF97E3C
	FCF7F5E0BEE22481325D814704F8E0C2CCF44CA51CCF92098462DCE68F47FCB7
	0BFFFC1DD322C44962B9582A14E35112718E449A8CF332A52289429229C525D2
	FF64E2DF2CFB033EDF3500B06A3E017B912DA85D6303F64B27105874C0E2F700
	00F2BB6FC1D4280803806883E1CF77FFEF3FFD47A02500806649927100005E44
	242E54CAB33FC708000044A0812AB0411BF4C1182CC0061CC105DCC10BFC6036
	844224C4C24210420A64801C726029AC82422886CDB01D2A602FD4401D34C051
	688693700E2EC255B80E3D700FFA61089EC128BC81090441C808136121DA8801
	628A58238E08179985F821C14804128B2420C9881451224B91354831528A5420
	55481DF23D720239875C46BA913BC8003282FC86BC47319481B2513DD40CB543
	B9A8371A8446A20BD06474319A8F16A09BD072B41A3D8C36A1E7D0AB680FDA8F
	3E43C730C0E8180733C46C302EC6C342B1382C099363CBB122AC0CABC61AB056
	AC03BB89F563CFB17704128145C0093604774220611E4148584C584ED848A820
	1C243411DA093709038451C2272293A84BB426BA11F9C4186232318758482C23
	D6128F132F107B8843C437241289433227B9900249B1A454D212D246D26E5223
	E92CA99B34481A2393C9DA646BB20739942C202BC885E49DE4C3E433E41BE421
	F25B0A9D624071A4F853E22852CA6A4A19E510E534E5066598324155A39A52DD
	A8A15411358F5A42ADA1B652AF5187A81334759A39CD8316494BA5ADA295D31A
	681768F769AFE874BA11DD951E4E97D057D2CBE947E897E803F4770C0D861583
	C7886728199B18071867197718AF984CA619D38B19C754303731EB98E7990F99
	6F55582AB62A7C1591CA0A954A9526951B2A2F54A9AAA6AADEAA0B55F355CB54
	8FA95E537DAE46553353E3A909D496AB55AA9D50EB531B5367A93BA887AA67A8
	6F543FA47E59FD890659C34CC34F43A451A0B15FE3BCC6200B6319B3782C216B
	0DAB86758135C426B1CDD97C762ABB98FD1DBB8B3DAAA9A13943334A3357B352
	F394663F07E39871F89C744E09E728A797F37E8ADE14EF29E2291BA6344CB931
	655C6BAA96979658AB48AB51AB47EBBD36AEEDA79DA6BD45BB59FB810E41C74A
	275C2747678FCE059DE753D953DDA70AA7164D3D3AF5AE2EAA6BA51BA1BB4477
	BF6EA7EE989EBE5E809E4C6FA7DE79BDE7FA1C7D2FFD54FD6DFAA7F5470C5806
	B30C2406DB0CCE183CC535716F3C1D2FC7DBF151435DC34043A561956197E184
	91B9D13CA3D5468D460F8C69C65CE324E36DC66DC6A326062621264B4DEA4DEE
	9A524DB9A629A63B4C3B4CC7CDCCCDA2CDD699359B3D31D732E79BE79BD79BDF
	B7605A785A2CB6A8B6B86549B2E45AA659EEB6BC6E855A3959A558555A5DB346
	AD9DAD25D6BBADBBA711A7B94E934EAB9ED667C3B0F1B6C9B6A9B719B0E5D806
	DBAEB66DB67D6167621767B7C5AEC3EE93BD937DBA7D8DFD3D070D87D90EAB1D
	5A1D7E73B472143A563ADE9ACE9CEE3F7DC5F496E92F6758CF10CFD833E3B613
	CB29C4699D539BD347671767B97383F3888B894B82CB2E973E2E9B1BC6DDC8BD
	E44A74F5715DE17AD2F59D9BB39BC2EDA8DBAFEE36EE69EE87DC9FCC349F299E
	593373D0C3C843E051E5D13F0B9F95306BDFAC7E4F434F8167B5E7232F632F91
	57ADD7B0B7A577AAF761EF173EF63E729FE33EE33C37DE32DE595FCC37C0B7C8
	B7CB4FC36F9E5F85DF437F23FF64FF7AFFD100A78025016703898141815B02FB
	F87A7C21BF8E3F3ADB65F6B2D9ED418CA0B94115418F82AD82E5C1AD2168C8EC
	90AD21F7E798CE91CE690E85507EE8D6D00761E6618BC37E0C2785878557863F
	8E7088581AD131973577D1DC4373DF44FA449644DE9B67314F39AF2D4A352A3E
	AA2E6A3CDA37BA34BA3FC62E6659CCD5589D58496C4B1C392E2AAE366E6CBEDF
	FCEDF387E29DE20BE37B17982FC85D7079A1CEC2F485A716A92E122C3A96404C
	884E3894F041102AA8168C25F21377258E0A79C21DC267222FD136D188D8435C
	2A1E4EF2482A4D7A92EC91BC357924C533A52CE5B98427A990BC4C0D4CDD9B3A
	9E169A76206D323D3ABD31839291907142AA214D93B667EA67E66676CBAC6585
	B2FEC56E8BB72F1E9507C96BB390AC05592D0AB642A6E8545A28D72A07B26765
	5766BFCD89CA3996AB9E2BCDEDCCB3CADB90379CEF9FFFED12C212E192B6A586
	4B572D1D58E6BDAC6A39B23C7179DB0AE315052B865606AC3CB88AB62A6DD54F
	ABED5797AE7EBD267A4D6B815EC1CA82C1B5016BEB0B550AE5857DEBDCD7ED5D
	4F582F59DFB561FA869D1B3E15898AAE14DB1797157FD828DC78E51B876FCABF
	99DC94B4A9ABC4B964CF66D266E9E6DE2D9E5B0E96AA97E6970E6E0DD9DAB40D
	DF56B4EDF5F645DB2F97CD28DBBB83B643B9A3BF3CB8BC65A7C9CECD3B3F54A4
	54F454FA5436EED2DDB561D7F86ED1EE1B7BBCF634ECD5DB5BBCF7FD3EC9BEDB
	5501554DD566D565FB49FBB3F73FAE89AAE9F896FB6D5DAD4E6D71EDC703D203
	FD07230EB6D7B9D4D51DD23D54528FD62BEB470EC71FBEFE9DEF772D0D360D55
	8D9CC6E223704479E4E9F709DFF71E0D3ADA768C7BACE107D31F761D671D2F6A
	429AF29A469B539AFB5B625BBA4FCC3ED1D6EADE7AFC47DB1F0F9C343C59794A
	F354C969DAE982D39367F2CF8C9D959D7D7E2EF9DC60DBA2B67BE763CEDF6A0F
	6FEFBA1074E1D245FF8BE73BBC3BCE5CF2B874F2B2DBE51357B8579AAF3A5F6D
	EA74EA3CFE93D34FC7BB9CBB9AAEB95C6BB9EE7ABDB57B66F7E91B9E37CEDDF4
	BD79F116FFD6D59E393DDDBDF37A6FF7C5F7F5DF16DD7E7227FDCECBBBD97727
	EEADBC4FBC5FF440ED41D943DD87D53F5BFEDCD8EFDC7F6AC077A0F3D1DC47F7
	068583CFFE91F58F0F43058F998FCB860D86EB9E383E3939E23F72FDE9FCA743
	CF64CF269E17FEA2FECBAE17162F7EF8D5EBD7CED198D1A197F29793BF6D7CA5
	FDEAC0EB19AFDBC6C2C61EBEC97833315EF456FBEDC177DC771DEFA3DF0F4FE4
	7C207F28FF68F9B1F553D0A7FB93199393FF040398F3FC63332DDB0000002063
	48524D00007A25000080830000F9FF000080E9000075300000EA6000003A9800
	00176F925FC546000001844944415478DAECDCD18E82301005D099FFFFE8EE8B
	249AC04ADD2E65ECE98B0FA0ED1CAECD6802D95A8B8A23335B6B2DABACE9F958
	5645BF630822227E43DF8EA7A48F033F7DBEA44BBA3DDD181F80CC6C923E63ED
	D025FDA34EA15AE24B26FD19FE0EE0F6F40A6B8F08EDCB0C746DE3A5DF50E8A3
	20CF1A76A3671E6FA12B5CB811F57F84BE776ECF95FEC644FF7BD2A10F42EF99
	F868D255C688FABBFAF4476F7C74A5F3E2D4B54973FEB9FE92E8B37E912E8B3E
	F3BF97A5936E7B81BE0EFAA496113A74E8D0A143870E1D3AF45BA21F1D5B057D
	44FD926E7B810E1D3A74E8D0A143870E1D3A74E8D0A143870E1D3A74E8D0A143
	3F89FEF2F486139356BEBFF3AAFA4FA1473C9E53F266D277CF3CA98A3EBAFEED
	9EA3ED035F5EF7DED073FB4765FC51F5EFB94AFA8CA4DBD36FB8A7EB5EB48CD0
	A143870E1D3A74E8D0A143870E1D3A74E8D0A143870E1D3A74E8D0A143870E1D
	3A74E8D0A143870E1D3A74E8D0A143870E1D3A74E8D0A143870E1D3A74E8D0A1
	7F0F7A18BBA307FD070000FFFF03004F2453AF853D177E0000000049454E44AE
	426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="37" length_in_bytes="3204" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000005D0000
	00620806000000325DDFBB000000097048597300000EC300000EC301C76FA864
	00000A4F6943435050686F746F73686F70204943432070726F66696C65000078
	DA9D53675453E9163DF7DEF4424B8880944B6F5215082052428B801491262A21
	09104A8821A1D91551C1114545041BC8A088038E8E808C15512C0C8A0AD807E4
	21A28E83A3888ACAFBE17BA36BD6BCF7E6CDFEB5D73EE7ACF39DB3CF07C0080C
	9648335135800CA9421E11E083C7C4C6E1E42E40810A2470001008B3642173FD
	230100F87E3C3C2B22C007BE000178D30B0800C04D9BC0301C87FF0FEA42995C
	01808401C07491384B08801400407A8E42A600404601809D98265300A0040060
	CB6362E300502D0060277FE6D300809DF8997B01005B94211501A09100201365
	884400683B00ACCF568A450058300014664BC43900D82D00304957664800B0B7
	00C0CE100BB200080C00305188852900047B0060C8232378008499001446F257
	3CF12BAE10E72A00007899B23CB9243945815B082D710757572E1E28CE49172B
	14366102619A402EC27999193281340FE0F3CC0000A0911511E083F3FD78CE0E
	AECECE368EB60E5F2DEABF06FF226262E3FEE5CFAB70400000E1747ED1FE2C2F
	B31A803B06806DFEA225EE04685E0BA075F78B66B20F40B500A0E9DA57F370F8
	7E3C3C45A190B9D9D9E5E4E4D84AC4425B61CA577DFE67C25FC057FD6CF97E3C
	FCF7F5E0BEE22481325D814704F8E0C2CCF44CA51CCF92098462DCE68F47FCB7
	0BFFFC1DD322C44962B9582A14E35112718E449A8CF332A52289429229C525D2
	FF64E2DF2CFB033EDF3500B06A3E017B912DA85D6303F64B27105874C0E2F700
	00F2BB6FC1D4280803806883E1CF77FFEF3FFD47A02500806649927100005E44
	242E54CAB33FC708000044A0812AB0411BF4C1182CC0061CC105DCC10BFC6036
	844224C4C24210420A64801C726029AC82422886CDB01D2A602FD4401D34C051
	688693700E2EC255B80E3D700FFA61089EC128BC81090441C808136121DA8801
	628A58238E08179985F821C14804128B2420C9881451224B91354831528A5420
	55481DF23D720239875C46BA913BC8003282FC86BC47319481B2513DD40CB543
	B9A8371A8446A20BD06474319A8F16A09BD072B41A3D8C36A1E7D0AB680FDA8F
	3E43C730C0E8180733C46C302EC6C342B1382C099363CBB122AC0CABC61AB056
	AC03BB89F563CFB17704128145C0093604774220611E4148584C584ED848A820
	1C243411DA093709038451C2272293A84BB426BA11F9C4186232318758482C23
	D6128F132F107B8843C437241289433227B9900249B1A454D212D246D26E5223
	E92CA99B34481A2393C9DA646BB20739942C202BC885E49DE4C3E433E41BE421
	F25B0A9D624071A4F853E22852CA6A4A19E510E534E5066598324155A39A52DD
	A8A15411358F5A42ADA1B652AF5187A81334759A39CD8316494BA5ADA295D31A
	681768F769AFE874BA11DD951E4E97D057D2CBE947E897E803F4770C0D861583
	C7886728199B18071867197718AF984CA619D38B19C754303731EB98E7990F99
	6F55582AB62A7C1591CA0A954A9526951B2A2F54A9AAA6AADEAA0B55F355CB54
	8FA95E537DAE46553353E3A909D496AB55AA9D50EB531B5367A93BA887AA67A8
	6F543FA47E59FD890659C34CC34F43A451A0B15FE3BCC6200B6319B3782C216B
	0DAB86758135C426B1CDD97C762ABB98FD1DBB8B3DAAA9A13943334A3357B352
	F394663F07E39871F89C744E09E728A797F37E8ADE14EF29E2291BA6344CB931
	655C6BAA96979658AB48AB51AB47EBBD36AEEDA79DA6BD45BB59FB810E41C74A
	275C2747678FCE059DE753D953DDA70AA7164D3D3AF5AE2EAA6BA51BA1BB4477
	BF6EA7EE989EBE5E809E4C6FA7DE79BDE7FA1C7D2FFD54FD6DFAA7F5470C5806
	B30C2406DB0CCE183CC535716F3C1D2FC7DBF151435DC34043A561956197E184
	91B9D13CA3D5468D460F8C69C65CE324E36DC66DC6A326062621264B4DEA4DEE
	9A524DB9A629A63B4C3B4CC7CDCCCDA2CDD699359B3D31D732E79BE79BD79BDF
	B7605A785A2CB6A8B6B86549B2E45AA659EEB6BC6E855A3959A558555A5DB346
	AD9DAD25D6BBADBBA711A7B94E934EAB9ED667C3B0F1B6C9B6A9B719B0E5D806
	DBAEB66DB67D6167621767B7C5AEC3EE93BD937DBA7D8DFD3D070D87D90EAB1D
	5A1D7E73B472143A563ADE9ACE9CEE3F7DC5F496E92F6758CF10CFD833E3B613
	CB29C4699D539BD347671767B97383F3888B894B82CB2E973E2E9B1BC6DDC8BD
	E44A74F5715DE17AD2F59D9BB39BC2EDA8DBAFEE36EE69EE87DC9FCC349F299E
	593373D0C3C843E051E5D13F0B9F95306BDFAC7E4F434F8167B5E7232F632F91
	57ADD7B0B7A577AAF761EF173EF63E729FE33EE33C37DE32DE595FCC37C0B7C8
	B7CB4FC36F9E5F85DF437F23FF64FF7AFFD100A78025016703898141815B02FB
	F87A7C21BF8E3F3ADB65F6B2D9ED418CA0B94115418F82AD82E5C1AD2168C8EC
	90AD21F7E798CE91CE690E85507EE8D6D00761E6618BC37E0C2785878557863F
	8E7088581AD131973577D1DC4373DF44FA449644DE9B67314F39AF2D4A352A3E
	AA2E6A3CDA37BA34BA3FC62E6659CCD5589D58496C4B1C392E2AAE366E6CBEDF
	FCEDF387E29DE20BE37B17982FC85D7079A1CEC2F485A716A92E122C3A96404C
	884E3894F041102AA8168C25F21377258E0A79C21DC267222FD136D188D8435C
	2A1E4EF2482A4D7A92EC91BC357924C533A52CE5B98427A990BC4C0D4CDD9B3A
	9E169A76206D323D3ABD31839291907142AA214D93B667EA67E66676CBAC6585
	B2FEC56E8BB72F1E9507C96BB390AC05592D0AB642A6E8545A28D72A07B26765
	5766BFCD89CA3996AB9E2BCDEDCCB3CADB90379CEF9FFFED12C212E192B6A586
	4B572D1D58E6BDAC6A39B23C7179DB0AE315052B865606AC3CB88AB62A6DD54F
	ABED5797AE7EBD267A4D6B815EC1CA82C1B5016BEB0B550AE5857DEBDCD7ED5D
	4F582F59DFB561FA869D1B3E15898AAE14DB1797157FD828DC78E51B876FCABF
	99DC94B4A9ABC4B964CF66D266E9E6DE2D9E5B0E96AA97E6970E6E0DD9DAB40D
	DF56B4EDF5F645DB2F97CD28DBBB83B643B9A3BF3CB8BC65A7C9CECD3B3F54A4
	54F454FA5436EED2DDB561D7F86ED1EE1B7BBCF634ECD5DB5BBCF7FD3EC9BEDB
	5501554DD566D565FB49FBB3F73FAE89AAE9F896FB6D5DAD4E6D71EDC703D203
	FD07230EB6D7B9D4D51DD23D54528FD62BEB470EC71FBEFE9DEF772D0D360D55
	8D9CC6E223704479E4E9F709DFF71E0D3ADA768C7BACE107D31F761D671D2F6A
	429AF29A469B539AFB5B625BBA4FCC3ED1D6EADE7AFC47DB1F0F9C343C59794A
	F354C969DAE982D39367F2CF8C9D959D7D7E2EF9DC60DBA2B67BE763CEDF6A0F
	6FEFBA1074E1D245FF8BE73BBC3BCE5CF2B874F2B2DBE51357B8579AAF3A5F6D
	EA74EA3CFE93D34FC7BB9CBB9AAEB95C6BB9EE7ABDB57B66F7E91B9E37CEDDF4
	BD79F116FFD6D59E393DDDBDF37A6FF7C5F7F5DF16DD7E7227FDCECBBBD97727
	EEADBC4FBC5FF440ED41D943DD87D53F5BFEDCD8EFDC7F6AC077A0F3D1DC47F7
	068583CFFE91F58F0F43058F998FCB860D86EB9E383E3939E23F72FDE9FCA743
	CF64CF269E17FEA2FECBAE17162F7EF8D5EBD7CED198D1A197F29793BF6D7CA5
	FDEAC0EB19AFDBC6C2C61EBEC97833315EF456FBEDC177DC771DEFA3DF0F4FE4
	7C207F28FF68F9B1F553D0A7FB93199393FF040398F3FC63332DDB0000002063
	48524D00007A25000080830000F9FF000080E9000075300000EA6000003A9800
	00176F925FC546000001A54944415478DAECDCD17282301005D0DDFFFFE8F445
	5A6C3104A184C8C98B33A2404EAE9905842CA5C4882D334B292547D9A7F9B21C
	15FD8A218888A8A14FCB53D28F036FFEBCA44BBA395D3B3E00995924BDC7BE43
	97F4B72A85D1123F64D2E7F0570037A78FB0EF11A17CE981AE6C3CF5170AFD28
	C856C355F4CCBF53A601DAE7D4843E5FB66544EF9CF49A13F49EE8B515FE5E99
	B6DFA95AA73F6AE1D5117CBC9F27A7AB74DA666BD2F3A3D07B1D91DE16BDE7B9
	975B27DDF402FD3EE89D4AC36F8FB9450D7D291CD077A04FA5E22BF45717ABA1
	EF44DF52A74F03015DD2CDE9D0552FD0A1FF277AED6C1AF4D7D5CADBE81B47FA
	EE496FEE3F74E8D0A143870E1D3A74E8D0A143870E1D3A74E8D0A143870E1DFA
	98E84F4F6F68D8E8C8F7779ED5FF26F4889F7F27D536BAF6CC9351D18FEEFF74
	CFD1B4C2A7D7A52FB45E981D1DFFA8FE2FB94A7A8FA49BD32F38A7AB5E948CD0
	A143870E1D3A74E8D0A143870E1D3A74E8D0A143870E1D3A74E8D0A143870E1D
	3A74E8D0A143870E1D3A74E8D0A143870E1D3A74E8D0A143870E1D3A74E8D0A1
	7F0E7A688B6D0BFA17000000FFFF0300BE41C4B1C819BEBC0000000049454E44
	AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="38" length_in_bytes="3001" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000005D0000
	00620806000000325DDFBB000000097048597300000EC300000EC301C76FA864
	00000A4F6943435050686F746F73686F70204943432070726F66696C65000078
	DA9D53675453E9163DF7DEF4424B8880944B6F5215082052428B801491262A21
	09104A8821A1D91551C1114545041BC8A088038E8E808C15512C0C8A0AD807E4
	21A28E83A3888ACAFBE17BA36BD6BCF7E6CDFEB5D73EE7ACF39DB3CF07C0080C
	9648335135800CA9421E11E083C7C4C6E1E42E40810A2470001008B3642173FD
	230100F87E3C3C2B22C007BE000178D30B0800C04D9BC0301C87FF0FEA42995C
	01808401C07491384B08801400407A8E42A600404601809D98265300A0040060
	CB6362E300502D0060277FE6D300809DF8997B01005B94211501A09100201365
	884400683B00ACCF568A450058300014664BC43900D82D00304957664800B0B7
	00C0CE100BB200080C00305188852900047B0060C8232378008499001446F257
	3CF12BAE10E72A00007899B23CB9243945815B082D710757572E1E28CE49172B
	14366102619A402EC27999193281340FE0F3CC0000A0911511E083F3FD78CE0E
	AECECE368EB60E5F2DEABF06FF226262E3FEE5CFAB70400000E1747ED1FE2C2F
	B31A803B06806DFEA225EE04685E0BA075F78B66B20F40B500A0E9DA57F370F8
	7E3C3C45A190B9D9D9E5E4E4D84AC4425B61CA577DFE67C25FC057FD6CF97E3C
	FCF7F5E0BEE22481325D814704F8E0C2CCF44CA51CCF92098462DCE68F47FCB7
	0BFFFC1DD322C44962B9582A14E35112718E449A8CF332A52289429229C525D2
	FF64E2DF2CFB033EDF3500B06A3E017B912DA85D6303F64B27105874C0E2F700
	00F2BB6FC1D4280803806883E1CF77FFEF3FFD47A02500806649927100005E44
	242E54CAB33FC708000044A0812AB0411BF4C1182CC0061CC105DCC10BFC6036
	844224C4C24210420A64801C726029AC82422886CDB01D2A602FD4401D34C051
	688693700E2EC255B80E3D700FFA61089EC128BC81090441C808136121DA8801
	628A58238E08179985F821C14804128B2420C9881451224B91354831528A5420
	55481DF23D720239875C46BA913BC8003282FC86BC47319481B2513DD40CB543
	B9A8371A8446A20BD06474319A8F16A09BD072B41A3D8C36A1E7D0AB680FDA8F
	3E43C730C0E8180733C46C302EC6C342B1382C099363CBB122AC0CABC61AB056
	AC03BB89F563CFB17704128145C0093604774220611E4148584C584ED848A820
	1C243411DA093709038451C2272293A84BB426BA11F9C4186232318758482C23
	D6128F132F107B8843C437241289433227B9900249B1A454D212D246D26E5223
	E92CA99B34481A2393C9DA646BB20739942C202BC885E49DE4C3E433E41BE421
	F25B0A9D624071A4F853E22852CA6A4A19E510E534E5066598324155A39A52DD
	A8A15411358F5A42ADA1B652AF5187A81334759A39CD8316494BA5ADA295D31A
	681768F769AFE874BA11DD951E4E97D057D2CBE947E897E803F4770C0D861583
	C7886728199B18071867197718AF984CA619D38B19C754303731EB98E7990F99
	6F55582AB62A7C1591CA0A954A9526951B2A2F54A9AAA6AADEAA0B55F355CB54
	8FA95E537DAE46553353E3A909D496AB55AA9D50EB531B5367A93BA887AA67A8
	6F543FA47E59FD890659C34CC34F43A451A0B15FE3BCC6200B6319B3782C216B
	0DAB86758135C426B1CDD97C762ABB98FD1DBB8B3DAAA9A13943334A3357B352
	F394663F07E39871F89C744E09E728A797F37E8ADE14EF29E2291BA6344CB931
	655C6BAA96979658AB48AB51AB47EBBD36AEEDA79DA6BD45BB59FB810E41C74A
	275C2747678FCE059DE753D953DDA70AA7164D3D3AF5AE2EAA6BA51BA1BB4477
	BF6EA7EE989EBE5E809E4C6FA7DE79BDE7FA1C7D2FFD54FD6DFAA7F5470C5806
	B30C2406DB0CCE183CC535716F3C1D2FC7DBF151435DC34043A561956197E184
	91B9D13CA3D5468D460F8C69C65CE324E36DC66DC6A326062621264B4DEA4DEE
	9A524DB9A629A63B4C3B4CC7CDCCCDA2CDD699359B3D31D732E79BE79BD79BDF
	B7605A785A2CB6A8B6B86549B2E45AA659EEB6BC6E855A3959A558555A5DB346
	AD9DAD25D6BBADBBA711A7B94E934EAB9ED667C3B0F1B6C9B6A9B719B0E5D806
	DBAEB66DB67D6167621767B7C5AEC3EE93BD937DBA7D8DFD3D070D87D90EAB1D
	5A1D7E73B472143A563ADE9ACE9CEE3F7DC5F496E92F6758CF10CFD833E3B613
	CB29C4699D539BD347671767B97383F3888B894B82CB2E973E2E9B1BC6DDC8BD
	E44A74F5715DE17AD2F59D9BB39BC2EDA8DBAFEE36EE69EE87DC9FCC349F299E
	593373D0C3C843E051E5D13F0B9F95306BDFAC7E4F434F8167B5E7232F632F91
	57ADD7B0B7A577AAF761EF173EF63E729FE33EE33C37DE32DE595FCC37C0B7C8
	B7CB4FC36F9E5F85DF437F23FF64FF7AFFD100A78025016703898141815B02FB
	F87A7C21BF8E3F3ADB65F6B2D9ED418CA0B94115418F82AD82E5C1AD2168C8EC
	90AD21F7E798CE91CE690E85507EE8D6D00761E6618BC37E0C2785878557863F
	8E7088581AD131973577D1DC4373DF44FA449644DE9B67314F39AF2D4A352A3E
	AA2E6A3CDA37BA34BA3FC62E6659CCD5589D58496C4B1C392E2AAE366E6CBEDF
	FCEDF387E29DE20BE37B17982FC85D7079A1CEC2F485A716A92E122C3A96404C
	884E3894F041102AA8168C25F21377258E0A79C21DC267222FD136D188D8435C
	2A1E4EF2482A4D7A92EC91BC357924C533A52CE5B98427A990BC4C0D4CDD9B3A
	9E169A76206D323D3ABD31839291907142AA214D93B667EA67E66676CBAC6585
	B2FEC56E8BB72F1E9507C96BB390AC05592D0AB642A6E8545A28D72A07B26765
	5766BFCD89CA3996AB9E2BCDEDCCB3CADB90379CEF9FFFED12C212E192B6A586
	4B572D1D58E6BDAC6A39B23C7179DB0AE315052B865606AC3CB88AB62A6DD54F
	ABED5797AE7EBD267A4D6B815EC1CA82C1B5016BEB0B550AE5857DEBDCD7ED5D
	4F582F59DFB561FA869D1B3E15898AAE14DB1797157FD828DC78E51B876FCABF
	99DC94B4A9ABC4B964CF66D266E9E6DE2D9E5B0E96AA97E6970E6E0DD9DAB40D
	DF56B4EDF5F645DB2F97CD28DBBB83B643B9A3BF3CB8BC65A7C9CECD3B3F54A4
	54F454FA5436EED2DDB561D7F86ED1EE1B7BBCF634ECD5DB5BBCF7FD3EC9BEDB
	5501554DD566D565FB49FBB3F73FAE89AAE9F896FB6D5DAD4E6D71EDC703D203
	FD07230EB6D7B9D4D51DD23D54528FD62BEB470EC71FBEFE9DEF772D0D360D55
	8D9CC6E223704479E4E9F709DFF71E0D3ADA768C7BACE107D31F761D671D2F6A
	429AF29A469B539AFB5B625BBA4FCC3ED1D6EADE7AFC47DB1F0F9C343C59794A
	F354C969DAE982D39367F2CF8C9D959D7D7E2EF9DC60DBA2B67BE763CEDF6A0F
	6FEFBA1074E1D245FF8BE73BBC3BCE5CF2B874F2B2DBE51357B8579AAF3A5F6D
	EA74EA3CFE93D34FC7BB9CBB9AAEB95C6BB9EE7ABDB57B66F7E91B9E37CEDDF4
	BD79F116FFD6D59E393DDDBDF37A6FF7C5F7F5DF16DD7E7227FDCECBBBD97727
	EEADBC4FBC5FF440ED41D943DD87D53F5BFEDCD8EFDC7F6AC077A0F3D1DC47F7
	068583CFFE91F58F0F43058F998FCB860D86EB9E383E3939E23F72FDE9FCA743
	CF64CF269E17FEA2FECBAE17162F7EF8D5EBD7CED198D1A197F29793BF6D7CA5
	FDEAC0EB19AFDBC6C2C61EBEC97833315EF456FBEDC177DC771DEFA3DF0F4FE4
	7C207F28FF68F9B1F553D0A7FB93199393FF040398F3FC63332DDB0000002063
	48524D00007A25000080830000F9FF000080E9000075300000EA6000003A9800
	00176F925FC546000000DA4944415478DAECD1810D80300C0341BCFFD0660424
	544211F70354CE356D0FCD16E8D0A10B3A7441872EE8D0051D3A7441872EE8D0
	35839EE4373FD736DBA0AF1833FDF65B5BA043870E1D3A74E8D0A143870E1D3A
	74E8D0A143870E1D3A74E8D0A143870E1D3A74E8D0A143870E1D3A74E8D0A143
	870E1D3A74E8D0A143870E1D3A74E8D0A143870E1D3A74E8D0A143870E1D3A74
	E857639E3C16FA470F850E1D3A74E8D0A143870E1D3A74E8D0A143870E1D3A74
	E8D0A143870E1D3A74E8D0A143870E1D3A74E8D0A143BF7BE84E7B56A09F0000
	00FFFF03006A2D6D7917059DA60000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="39" length_in_bytes="3189" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000005D0000
	00620806000000325DDFBB000000097048597300000EC300000EC301C76FA864
	00000A4F6943435050686F746F73686F70204943432070726F66696C65000078
	DA9D53675453E9163DF7DEF4424B8880944B6F5215082052428B801491262A21
	09104A8821A1D91551C1114545041BC8A088038E8E808C15512C0C8A0AD807E4
	21A28E83A3888ACAFBE17BA36BD6BCF7E6CDFEB5D73EE7ACF39DB3CF07C0080C
	9648335135800CA9421E11E083C7C4C6E1E42E40810A2470001008B3642173FD
	230100F87E3C3C2B22C007BE000178D30B0800C04D9BC0301C87FF0FEA42995C
	01808401C07491384B08801400407A8E42A600404601809D98265300A0040060
	CB6362E300502D0060277FE6D300809DF8997B01005B94211501A09100201365
	884400683B00ACCF568A450058300014664BC43900D82D00304957664800B0B7
	00C0CE100BB200080C00305188852900047B0060C8232378008499001446F257
	3CF12BAE10E72A00007899B23CB9243945815B082D710757572E1E28CE49172B
	14366102619A402EC27999193281340FE0F3CC0000A0911511E083F3FD78CE0E
	AECECE368EB60E5F2DEABF06FF226262E3FEE5CFAB70400000E1747ED1FE2C2F
	B31A803B06806DFEA225EE04685E0BA075F78B66B20F40B500A0E9DA57F370F8
	7E3C3C45A190B9D9D9E5E4E4D84AC4425B61CA577DFE67C25FC057FD6CF97E3C
	FCF7F5E0BEE22481325D814704F8E0C2CCF44CA51CCF92098462DCE68F47FCB7
	0BFFFC1DD322C44962B9582A14E35112718E449A8CF332A52289429229C525D2
	FF64E2DF2CFB033EDF3500B06A3E017B912DA85D6303F64B27105874C0E2F700
	00F2BB6FC1D4280803806883E1CF77FFEF3FFD47A02500806649927100005E44
	242E54CAB33FC708000044A0812AB0411BF4C1182CC0061CC105DCC10BFC6036
	844224C4C24210420A64801C726029AC82422886CDB01D2A602FD4401D34C051
	688693700E2EC255B80E3D700FFA61089EC128BC81090441C808136121DA8801
	628A58238E08179985F821C14804128B2420C9881451224B91354831528A5420
	55481DF23D720239875C46BA913BC8003282FC86BC47319481B2513DD40CB543
	B9A8371A8446A20BD06474319A8F16A09BD072B41A3D8C36A1E7D0AB680FDA8F
	3E43C730C0E8180733C46C302EC6C342B1382C099363CBB122AC0CABC61AB056
	AC03BB89F563CFB17704128145C0093604774220611E4148584C584ED848A820
	1C243411DA093709038451C2272293A84BB426BA11F9C4186232318758482C23
	D6128F132F107B8843C437241289433227B9900249B1A454D212D246D26E5223
	E92CA99B34481A2393C9DA646BB20739942C202BC885E49DE4C3E433E41BE421
	F25B0A9D624071A4F853E22852CA6A4A19E510E534E5066598324155A39A52DD
	A8A15411358F5A42ADA1B652AF5187A81334759A39CD8316494BA5ADA295D31A
	681768F769AFE874BA11DD951E4E97D057D2CBE947E897E803F4770C0D861583
	C7886728199B18071867197718AF984CA619D38B19C754303731EB98E7990F99
	6F55582AB62A7C1591CA0A954A9526951B2A2F54A9AAA6AADEAA0B55F355CB54
	8FA95E537DAE46553353E3A909D496AB55AA9D50EB531B5367A93BA887AA67A8
	6F543FA47E59FD890659C34CC34F43A451A0B15FE3BCC6200B6319B3782C216B
	0DAB86758135C426B1CDD97C762ABB98FD1DBB8B3DAAA9A13943334A3357B352
	F394663F07E39871F89C744E09E728A797F37E8ADE14EF29E2291BA6344CB931
	655C6BAA96979658AB48AB51AB47EBBD36AEEDA79DA6BD45BB59FB810E41C74A
	275C2747678FCE059DE753D953DDA70AA7164D3D3AF5AE2EAA6BA51BA1BB4477
	BF6EA7EE989EBE5E809E4C6FA7DE79BDE7FA1C7D2FFD54FD6DFAA7F5470C5806
	B30C2406DB0CCE183CC535716F3C1D2FC7DBF151435DC34043A561956197E184
	91B9D13CA3D5468D460F8C69C65CE324E36DC66DC6A326062621264B4DEA4DEE
	9A524DB9A629A63B4C3B4CC7CDCCCDA2CDD699359B3D31D732E79BE79BD79BDF
	B7605A785A2CB6A8B6B86549B2E45AA659EEB6BC6E855A3959A558555A5DB346
	AD9DAD25D6BBADBBA711A7B94E934EAB9ED667C3B0F1B6C9B6A9B719B0E5D806
	DBAEB66DB67D6167621767B7C5AEC3EE93BD937DBA7D8DFD3D070D87D90EAB1D
	5A1D7E73B472143A563ADE9ACE9CEE3F7DC5F496E92F6758CF10CFD833E3B613
	CB29C4699D539BD347671767B97383F3888B894B82CB2E973E2E9B1BC6DDC8BD
	E44A74F5715DE17AD2F59D9BB39BC2EDA8DBAFEE36EE69EE87DC9FCC349F299E
	593373D0C3C843E051E5D13F0B9F95306BDFAC7E4F434F8167B5E7232F632F91
	57ADD7B0B7A577AAF761EF173EF63E729FE33EE33C37DE32DE595FCC37C0B7C8
	B7CB4FC36F9E5F85DF437F23FF64FF7AFFD100A78025016703898141815B02FB
	F87A7C21BF8E3F3ADB65F6B2D9ED418CA0B94115418F82AD82E5C1AD2168C8EC
	90AD21F7E798CE91CE690E85507EE8D6D00761E6618BC37E0C2785878557863F
	8E7088581AD131973577D1DC4373DF44FA449644DE9B67314F39AF2D4A352A3E
	AA2E6A3CDA37BA34BA3FC62E6659CCD5589D58496C4B1C392E2AAE366E6CBEDF
	FCEDF387E29DE20BE37B17982FC85D7079A1CEC2F485A716A92E122C3A96404C
	884E3894F041102AA8168C25F21377258E0A79C21DC267222FD136D188D8435C
	2A1E4EF2482A4D7A92EC91BC357924C533A52CE5B98427A990BC4C0D4CDD9B3A
	9E169A76206D323D3ABD31839291907142AA214D93B667EA67E66676CBAC6585
	B2FEC56E8BB72F1E9507C96BB390AC05592D0AB642A6E8545A28D72A07B26765
	5766BFCD89CA3996AB9E2BCDEDCCB3CADB90379CEF9FFFED12C212E192B6A586
	4B572D1D58E6BDAC6A39B23C7179DB0AE315052B865606AC3CB88AB62A6DD54F
	ABED5797AE7EBD267A4D6B815EC1CA82C1B5016BEB0B550AE5857DEBDCD7ED5D
	4F582F59DFB561FA869D1B3E15898AAE14DB1797157FD828DC78E51B876FCABF
	99DC94B4A9ABC4B964CF66D266E9E6DE2D9E5B0E96AA97E6970E6E0DD9DAB40D
	DF56B4EDF5F645DB2F97CD28DBBB83B643B9A3BF3CB8BC65A7C9CECD3B3F54A4
	54F454FA5436EED2DDB561D7F86ED1EE1B7BBCF634ECD5DB5BBCF7FD3EC9BEDB
	5501554DD566D565FB49FBB3F73FAE89AAE9F896FB6D5DAD4E6D71EDC703D203
	FD07230EB6D7B9D4D51DD23D54528FD62BEB470EC71FBEFE9DEF772D0D360D55
	8D9CC6E223704479E4E9F709DFF71E0D3ADA768C7BACE107D31F761D671D2F6A
	429AF29A469B539AFB5B625BBA4FCC3ED1D6EADE7AFC47DB1F0F9C343C59794A
	F354C969DAE982D39367F2CF8C9D959D7D7E2EF9DC60DBA2B67BE763CEDF6A0F
	6FEFBA1074E1D245FF8BE73BBC3BCE5CF2B874F2B2DBE51357B8579AAF3A5F6D
	EA74EA3CFE93D34FC7BB9CBB9AAEB95C6BB9EE7ABDB57B66F7E91B9E37CEDDF4
	BD79F116FFD6D59E393DDDBDF37A6FF7C5F7F5DF16DD7E7227FDCECBBBD97727
	EEADBC4FBC5FF440ED41D943DD87D53F5BFEDCD8EFDC7F6AC077A0F3D1DC47F7
	068583CFFE91F58F0F43058F998FCB860D86EB9E383E3939E23F72FDE9FCA743
	CF64CF269E17FEA2FECBAE17162F7EF8D5EBD7CED198D1A197F29793BF6D7CA5
	FDEAC0EB19AFDBC6C2C61EBEC97833315EF456FBEDC177DC771DEFA3DF0F4FE4
	7C207F28FF68F9B1F553D0A7FB93199393FF040398F3FC63332DDB0000002063
	48524D00007A25000080830000F9FF000080E9000075300000EA6000003A9800
	00176F925FC546000001964944415478DAECDCD18A83301005D0CCFF7F74FA50
	58DC45BB5A122731272F42B1D51CAEC3288D516B2D338E88A8B5D698F2DC6745
	9F7984A443977449872EE9920E1D7A6FECBF9FCD863F65D2B7F033A65D79191D
	7DEFD236AE5F7197D1B598BB2ED0A143870E1DFAF7E811B10CF0D1FC53D07BF5
	CC47FD78469FDE6AFE53A267DD912E8B9EF9EC65E9A42B2FD0D7414F6A0DA143
	870E1D3A74E8D0A143870E1D3A74E8D0A143870E1D3A74E8D0A143870E1D3A74
	E8D0A143870E1DFADAE8DB499F39686BA46CF41EF33F855ECAFBEFC8FF1D74BB
	EF93D05BCF3FDEFBFCFCE0AFEDDE17AE2C7F69819585DE6AFE7BAE929E917435
	7DC09AAE7BD13242870E1D3A74E8D0A1437F0E7A2B2CE8D0C7446FFDC204E827
	0FDAF2D520D09597B1D07B0EE837BF38AD673B0A1D3A74E8D0A1DF8EDEB94B81
	7E677F9DF130ED51E8DFDC91426F047E051EBAF2021D3AF471D1B32624E9922E
	E9920E5DD2251DBAA44B3A74499F2EE9D9EB99964C7AF6CABD34F4F2611D69AF
	EDD1C9DCBD4655D2574ABA9AAE7BD1BDE8D317487A99785C417F010000FFFF03
	00DFAE97A8F758BD450000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="40" length_in_bytes="3279" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000005D0000
	00620806000000325DDFBB000000097048597300000EC300000EC301C76FA864
	00000A4F6943435050686F746F73686F70204943432070726F66696C65000078
	DA9D53675453E9163DF7DEF4424B8880944B6F5215082052428B801491262A21
	09104A8821A1D91551C1114545041BC8A088038E8E808C15512C0C8A0AD807E4
	21A28E83A3888ACAFBE17BA36BD6BCF7E6CDFEB5D73EE7ACF39DB3CF07C0080C
	9648335135800CA9421E11E083C7C4C6E1E42E40810A2470001008B3642173FD
	230100F87E3C3C2B22C007BE000178D30B0800C04D9BC0301C87FF0FEA42995C
	01808401C07491384B08801400407A8E42A600404601809D98265300A0040060
	CB6362E300502D0060277FE6D300809DF8997B01005B94211501A09100201365
	884400683B00ACCF568A450058300014664BC43900D82D00304957664800B0B7
	00C0CE100BB200080C00305188852900047B0060C8232378008499001446F257
	3CF12BAE10E72A00007899B23CB9243945815B082D710757572E1E28CE49172B
	14366102619A402EC27999193281340FE0F3CC0000A0911511E083F3FD78CE0E
	AECECE368EB60E5F2DEABF06FF226262E3FEE5CFAB70400000E1747ED1FE2C2F
	B31A803B06806DFEA225EE04685E0BA075F78B66B20F40B500A0E9DA57F370F8
	7E3C3C45A190B9D9D9E5E4E4D84AC4425B61CA577DFE67C25FC057FD6CF97E3C
	FCF7F5E0BEE22481325D814704F8E0C2CCF44CA51CCF92098462DCE68F47FCB7
	0BFFFC1DD322C44962B9582A14E35112718E449A8CF332A52289429229C525D2
	FF64E2DF2CFB033EDF3500B06A3E017B912DA85D6303F64B27105874C0E2F700
	00F2BB6FC1D4280803806883E1CF77FFEF3FFD47A02500806649927100005E44
	242E54CAB33FC708000044A0812AB0411BF4C1182CC0061CC105DCC10BFC6036
	844224C4C24210420A64801C726029AC82422886CDB01D2A602FD4401D34C051
	688693700E2EC255B80E3D700FFA61089EC128BC81090441C808136121DA8801
	628A58238E08179985F821C14804128B2420C9881451224B91354831528A5420
	55481DF23D720239875C46BA913BC8003282FC86BC47319481B2513DD40CB543
	B9A8371A8446A20BD06474319A8F16A09BD072B41A3D8C36A1E7D0AB680FDA8F
	3E43C730C0E8180733C46C302EC6C342B1382C099363CBB122AC0CABC61AB056
	AC03BB89F563CFB17704128145C0093604774220611E4148584C584ED848A820
	1C243411DA093709038451C2272293A84BB426BA11F9C4186232318758482C23
	D6128F132F107B8843C437241289433227B9900249B1A454D212D246D26E5223
	E92CA99B34481A2393C9DA646BB20739942C202BC885E49DE4C3E433E41BE421
	F25B0A9D624071A4F853E22852CA6A4A19E510E534E5066598324155A39A52DD
	A8A15411358F5A42ADA1B652AF5187A81334759A39CD8316494BA5ADA295D31A
	681768F769AFE874BA11DD951E4E97D057D2CBE947E897E803F4770C0D861583
	C7886728199B18071867197718AF984CA619D38B19C754303731EB98E7990F99
	6F55582AB62A7C1591CA0A954A9526951B2A2F54A9AAA6AADEAA0B55F355CB54
	8FA95E537DAE46553353E3A909D496AB55AA9D50EB531B5367A93BA887AA67A8
	6F543FA47E59FD890659C34CC34F43A451A0B15FE3BCC6200B6319B3782C216B
	0DAB86758135C426B1CDD97C762ABB98FD1DBB8B3DAAA9A13943334A3357B352
	F394663F07E39871F89C744E09E728A797F37E8ADE14EF29E2291BA6344CB931
	655C6BAA96979658AB48AB51AB47EBBD36AEEDA79DA6BD45BB59FB810E41C74A
	275C2747678FCE059DE753D953DDA70AA7164D3D3AF5AE2EAA6BA51BA1BB4477
	BF6EA7EE989EBE5E809E4C6FA7DE79BDE7FA1C7D2FFD54FD6DFAA7F5470C5806
	B30C2406DB0CCE183CC535716F3C1D2FC7DBF151435DC34043A561956197E184
	91B9D13CA3D5468D460F8C69C65CE324E36DC66DC6A326062621264B4DEA4DEE
	9A524DB9A629A63B4C3B4CC7CDCCCDA2CDD699359B3D31D732E79BE79BD79BDF
	B7605A785A2CB6A8B6B86549B2E45AA659EEB6BC6E855A3959A558555A5DB346
	AD9DAD25D6BBADBBA711A7B94E934EAB9ED667C3B0F1B6C9B6A9B719B0E5D806
	DBAEB66DB67D6167621767B7C5AEC3EE93BD937DBA7D8DFD3D070D87D90EAB1D
	5A1D7E73B472143A563ADE9ACE9CEE3F7DC5F496E92F6758CF10CFD833E3B613
	CB29C4699D539BD347671767B97383F3888B894B82CB2E973E2E9B1BC6DDC8BD
	E44A74F5715DE17AD2F59D9BB39BC2EDA8DBAFEE36EE69EE87DC9FCC349F299E
	593373D0C3C843E051E5D13F0B9F95306BDFAC7E4F434F8167B5E7232F632F91
	57ADD7B0B7A577AAF761EF173EF63E729FE33EE33C37DE32DE595FCC37C0B7C8
	B7CB4FC36F9E5F85DF437F23FF64FF7AFFD100A78025016703898141815B02FB
	F87A7C21BF8E3F3ADB65F6B2D9ED418CA0B94115418F82AD82E5C1AD2168C8EC
	90AD21F7E798CE91CE690E85507EE8D6D00761E6618BC37E0C2785878557863F
	8E7088581AD131973577D1DC4373DF44FA449644DE9B67314F39AF2D4A352A3E
	AA2E6A3CDA37BA34BA3FC62E6659CCD5589D58496C4B1C392E2AAE366E6CBEDF
	FCEDF387E29DE20BE37B17982FC85D7079A1CEC2F485A716A92E122C3A96404C
	884E3894F041102AA8168C25F21377258E0A79C21DC267222FD136D188D8435C
	2A1E4EF2482A4D7A92EC91BC357924C533A52CE5B98427A990BC4C0D4CDD9B3A
	9E169A76206D323D3ABD31839291907142AA214D93B667EA67E66676CBAC6585
	B2FEC56E8BB72F1E9507C96BB390AC05592D0AB642A6E8545A28D72A07B26765
	5766BFCD89CA3996AB9E2BCDEDCCB3CADB90379CEF9FFFED12C212E192B6A586
	4B572D1D58E6BDAC6A39B23C7179DB0AE315052B865606AC3CB88AB62A6DD54F
	ABED5797AE7EBD267A4D6B815EC1CA82C1B5016BEB0B550AE5857DEBDCD7ED5D
	4F582F59DFB561FA869D1B3E15898AAE14DB1797157FD828DC78E51B876FCABF
	99DC94B4A9ABC4B964CF66D266E9E6DE2D9E5B0E96AA97E6970E6E0DD9DAB40D
	DF56B4EDF5F645DB2F97CD28DBBB83B643B9A3BF3CB8BC65A7C9CECD3B3F54A4
	54F454FA5436EED2DDB561D7F86ED1EE1B7BBCF634ECD5DB5BBCF7FD3EC9BEDB
	5501554DD566D565FB49FBB3F73FAE89AAE9F896FB6D5DAD4E6D71EDC703D203
	FD07230EB6D7B9D4D51DD23D54528FD62BEB470EC71FBEFE9DEF772D0D360D55
	8D9CC6E223704479E4E9F709DFF71E0D3ADA768C7BACE107D31F761D671D2F6A
	429AF29A469B539AFB5B625BBA4FCC3ED1D6EADE7AFC47DB1F0F9C343C59794A
	F354C969DAE982D39367F2CF8C9D959D7D7E2EF9DC60DBA2B67BE763CEDF6A0F
	6FEFBA1074E1D245FF8BE73BBC3BCE5CF2B874F2B2DBE51357B8579AAF3A5F6D
	EA74EA3CFE93D34FC7BB9CBB9AAEB95C6BB9EE7ABDB57B66F7E91B9E37CEDDF4
	BD79F116FFD6D59E393DDDBDF37A6FF7C5F7F5DF16DD7E7227FDCECBBBD97727
	EEADBC4FBC5FF440ED41D943DD87D53F5BFEDCD8EFDC7F6AC077A0F3D1DC47F7
	068583CFFE91F58F0F43058F998FCB860D86EB9E383E3939E23F72FDE9FCA743
	CF64CF269E17FEA2FECBAE17162F7EF8D5EBD7CED198D1A197F29793BF6D7CA5
	FDEAC0EB19AFDBC6C2C61EBEC97833315EF456FBEDC177DC771DEFA3DF0F4FE4
	7C207F28FF68F9B1F553D0A7FB93199393FF040398F3FC63332DDB0000002063
	48524D00007A25000080830000F9FF000080E9000075300000EA6000003A9800
	00176F925FC546000001F04944415478DAECDDC17682301005D0CCFF7F74BAA8
	9CAA45404FC21073D9B0D01672794E877848A3D65A46DC22A2D65A639473BA7F
	2D4645BF62084A29650B7D793D24BD1DF8E1F74BBAA4ABE9B6F60188882AE919
	E70E5DD23FEA14464BFC9049BF87BF02B89A3EC2B99752B42F19E8DAC6533FA1
	D05B411E358C88DF3FA4B7FA48EF9C8BF3370D00BE6FD217F07F2D23F8BE097F
	D9A7EF4D53AE5D94889806F093F13FB7B66FF5E9AF3E09CF57F28C7E3CA34F6F
	35FE21D1B3EE48A745CF9C7B993AE9CA0BF479D0935A3FE8D0A143870E1D3A74
	E8D0A143870E1D3A74E8D0A143870E1D3A74E8D0A143870E1D3A74E8D0A14387
	3E37FAC3EA0D070EDA1A291BBDC7F80FA197725BA764E7A07B6B9E8C8ADE7AFC
	CB238DCB2F7CD8AFFDC03B8F7FB4C0CA426F35FE355749CF48BA9A7EC19AAE7B
	D13242870E1D3A74E8D0A143FF1EF45658D0A15F13BDF58209D00F1EB4E5D220
	D095976BA1F7DCA09FBCB05ACF76143A74E8D0A1436F86BEF25D60BCD877EB5E
	CE9ED749453F7A33D3B34FCF984C4B432F2B8BD6EFFCAF9E2E77A453A1AF9597
	8CB917E8CA0B74351DFA75BB97AC017D659FBED1634B7A8F3BD211063435BAA4
	4BBAA443977449872EE9DF97F4ECE799A64C7AF6937BA9732F1BDF1275D96FDC
	D5AE0EE8C81DB0A44BBA9A2EE9BA177DFAF4492F036FEFA0FF0C00561729C534
	BB8E8E0000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="41" length_in_bytes="3284" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000005D0000
	00620806000000325DDFBB000000097048597300000EC300000EC301C76FA864
	00000A4F6943435050686F746F73686F70204943432070726F66696C65000078
	DA9D53675453E9163DF7DEF4424B8880944B6F5215082052428B801491262A21
	09104A8821A1D91551C1114545041BC8A088038E8E808C15512C0C8A0AD807E4
	21A28E83A3888ACAFBE17BA36BD6BCF7E6CDFEB5D73EE7ACF39DB3CF07C0080C
	9648335135800CA9421E11E083C7C4C6E1E42E40810A2470001008B3642173FD
	230100F87E3C3C2B22C007BE000178D30B0800C04D9BC0301C87FF0FEA42995C
	01808401C07491384B08801400407A8E42A600404601809D98265300A0040060
	CB6362E300502D0060277FE6D300809DF8997B01005B94211501A09100201365
	884400683B00ACCF568A450058300014664BC43900D82D00304957664800B0B7
	00C0CE100BB200080C00305188852900047B0060C8232378008499001446F257
	3CF12BAE10E72A00007899B23CB9243945815B082D710757572E1E28CE49172B
	14366102619A402EC27999193281340FE0F3CC0000A0911511E083F3FD78CE0E
	AECECE368EB60E5F2DEABF06FF226262E3FEE5CFAB70400000E1747ED1FE2C2F
	B31A803B06806DFEA225EE04685E0BA075F78B66B20F40B500A0E9DA57F370F8
	7E3C3C45A190B9D9D9E5E4E4D84AC4425B61CA577DFE67C25FC057FD6CF97E3C
	FCF7F5E0BEE22481325D814704F8E0C2CCF44CA51CCF92098462DCE68F47FCB7
	0BFFFC1DD322C44962B9582A14E35112718E449A8CF332A52289429229C525D2
	FF64E2DF2CFB033EDF3500B06A3E017B912DA85D6303F64B27105874C0E2F700
	00F2BB6FC1D4280803806883E1CF77FFEF3FFD47A02500806649927100005E44
	242E54CAB33FC708000044A0812AB0411BF4C1182CC0061CC105DCC10BFC6036
	844224C4C24210420A64801C726029AC82422886CDB01D2A602FD4401D34C051
	688693700E2EC255B80E3D700FFA61089EC128BC81090441C808136121DA8801
	628A58238E08179985F821C14804128B2420C9881451224B91354831528A5420
	55481DF23D720239875C46BA913BC8003282FC86BC47319481B2513DD40CB543
	B9A8371A8446A20BD06474319A8F16A09BD072B41A3D8C36A1E7D0AB680FDA8F
	3E43C730C0E8180733C46C302EC6C342B1382C099363CBB122AC0CABC61AB056
	AC03BB89F563CFB17704128145C0093604774220611E4148584C584ED848A820
	1C243411DA093709038451C2272293A84BB426BA11F9C4186232318758482C23
	D6128F132F107B8843C437241289433227B9900249B1A454D212D246D26E5223
	E92CA99B34481A2393C9DA646BB20739942C202BC885E49DE4C3E433E41BE421
	F25B0A9D624071A4F853E22852CA6A4A19E510E534E5066598324155A39A52DD
	A8A15411358F5A42ADA1B652AF5187A81334759A39CD8316494BA5ADA295D31A
	681768F769AFE874BA11DD951E4E97D057D2CBE947E897E803F4770C0D861583
	C7886728199B18071867197718AF984CA619D38B19C754303731EB98E7990F99
	6F55582AB62A7C1591CA0A954A9526951B2A2F54A9AAA6AADEAA0B55F355CB54
	8FA95E537DAE46553353E3A909D496AB55AA9D50EB531B5367A93BA887AA67A8
	6F543FA47E59FD890659C34CC34F43A451A0B15FE3BCC6200B6319B3782C216B
	0DAB86758135C426B1CDD97C762ABB98FD1DBB8B3DAAA9A13943334A3357B352
	F394663F07E39871F89C744E09E728A797F37E8ADE14EF29E2291BA6344CB931
	655C6BAA96979658AB48AB51AB47EBBD36AEEDA79DA6BD45BB59FB810E41C74A
	275C2747678FCE059DE753D953DDA70AA7164D3D3AF5AE2EAA6BA51BA1BB4477
	BF6EA7EE989EBE5E809E4C6FA7DE79BDE7FA1C7D2FFD54FD6DFAA7F5470C5806
	B30C2406DB0CCE183CC535716F3C1D2FC7DBF151435DC34043A561956197E184
	91B9D13CA3D5468D460F8C69C65CE324E36DC66DC6A326062621264B4DEA4DEE
	9A524DB9A629A63B4C3B4CC7CDCCCDA2CDD699359B3D31D732E79BE79BD79BDF
	B7605A785A2CB6A8B6B86549B2E45AA659EEB6BC6E855A3959A558555A5DB346
	AD9DAD25D6BBADBBA711A7B94E934EAB9ED667C3B0F1B6C9B6A9B719B0E5D806
	DBAEB66DB67D6167621767B7C5AEC3EE93BD937DBA7D8DFD3D070D87D90EAB1D
	5A1D7E73B472143A563ADE9ACE9CEE3F7DC5F496E92F6758CF10CFD833E3B613
	CB29C4699D539BD347671767B97383F3888B894B82CB2E973E2E9B1BC6DDC8BD
	E44A74F5715DE17AD2F59D9BB39BC2EDA8DBAFEE36EE69EE87DC9FCC349F299E
	593373D0C3C843E051E5D13F0B9F95306BDFAC7E4F434F8167B5E7232F632F91
	57ADD7B0B7A577AAF761EF173EF63E729FE33EE33C37DE32DE595FCC37C0B7C8
	B7CB4FC36F9E5F85DF437F23FF64FF7AFFD100A78025016703898141815B02FB
	F87A7C21BF8E3F3ADB65F6B2D9ED418CA0B94115418F82AD82E5C1AD2168C8EC
	90AD21F7E798CE91CE690E85507EE8D6D00761E6618BC37E0C2785878557863F
	8E7088581AD131973577D1DC4373DF44FA449644DE9B67314F39AF2D4A352A3E
	AA2E6A3CDA37BA34BA3FC62E6659CCD5589D58496C4B1C392E2AAE366E6CBEDF
	FCEDF387E29DE20BE37B17982FC85D7079A1CEC2F485A716A92E122C3A96404C
	884E3894F041102AA8168C25F21377258E0A79C21DC267222FD136D188D8435C
	2A1E4EF2482A4D7A92EC91BC357924C533A52CE5B98427A990BC4C0D4CDD9B3A
	9E169A76206D323D3ABD31839291907142AA214D93B667EA67E66676CBAC6585
	B2FEC56E8BB72F1E9507C96BB390AC05592D0AB642A6E8545A28D72A07B26765
	5766BFCD89CA3996AB9E2BCDEDCCB3CADB90379CEF9FFFED12C212E192B6A586
	4B572D1D58E6BDAC6A39B23C7179DB0AE315052B865606AC3CB88AB62A6DD54F
	ABED5797AE7EBD267A4D6B815EC1CA82C1B5016BEB0B550AE5857DEBDCD7ED5D
	4F582F59DFB561FA869D1B3E15898AAE14DB1797157FD828DC78E51B876FCABF
	99DC94B4A9ABC4B964CF66D266E9E6DE2D9E5B0E96AA97E6970E6E0DD9DAB40D
	DF56B4EDF5F645DB2F97CD28DBBB83B643B9A3BF3CB8BC65A7C9CECD3B3F54A4
	54F454FA5436EED2DDB561D7F86ED1EE1B7BBCF634ECD5DB5BBCF7FD3EC9BEDB
	5501554DD566D565FB49FBB3F73FAE89AAE9F896FB6D5DAD4E6D71EDC703D203
	FD07230EB6D7B9D4D51DD23D54528FD62BEB470EC71FBEFE9DEF772D0D360D55
	8D9CC6E223704479E4E9F709DFF71E0D3ADA768C7BACE107D31F761D671D2F6A
	429AF29A469B539AFB5B625BBA4FCC3ED1D6EADE7AFC47DB1F0F9C343C59794A
	F354C969DAE982D39367F2CF8C9D959D7D7E2EF9DC60DBA2B67BE763CEDF6A0F
	6FEFBA1074E1D245FF8BE73BBC3BCE5CF2B874F2B2DBE51357B8579AAF3A5F6D
	EA74EA3CFE93D34FC7BB9CBB9AAEB95C6BB9EE7ABDB57B66F7E91B9E37CEDDF4
	BD79F116FFD6D59E393DDDBDF37A6FF7C5F7F5DF16DD7E7227FDCECBBBD97727
	EEADBC4FBC5FF440ED41D943DD87D53F5BFEDCD8EFDC7F6AC077A0F3D1DC47F7
	068583CFFE91F58F0F43058F998FCB860D86EB9E383E3939E23F72FDE9FCA743
	CF64CF269E17FEA2FECBAE17162F7EF8D5EBD7CED198D1A197F29793BF6D7CA5
	FDEAC0EB19AFDBC6C2C61EBEC97833315EF456FBEDC177DC771DEFA3DF0F4FE4
	7C207F28FF68F9B1F553D0A7FB93199393FF040398F3FC63332DDB0000002063
	48524D00007A25000080830000F9FF000080E9000075300000EA6000003A9800
	00176F925FC546000001F54944415478DAECDCD18E82301005D0F6FF3FBAFBA2
	8926A054A73BAD3DBCF8802BF470773225D0DA5A2B2B6EB5D6D65AABAB9CD3E3
	BEBA2AFA8C2128A59457E8F7FD55D2E3C02F7F5FD2255D4DB7C507A0D6DA243D
	E3DCA14BFA479DC26A895F32E98FF03380ABE92B9C7B2945FB9281AE6DFCD7FF
	50E85190570DBBD16B3D2FA13B5CB888F17F847EF4DD9E2BFD8B891E9E74E841
	E83D073E3BE82E5BC4F8BBFAF45B6F7C76A5EBA0741DF6E3197D7AD4F89744CF
	9A916E8B9E79EF65EBA42B2FD0F7414F6A19A143870E1D3A74E8D0A1439F12FD
	6CDF2EE811E39774E5053A74E8D0A143870E1D3A74E8D0A143870E1D3A74E8D0
	A143870EFD22FAD3EA0D170E1A8D948D3E62FC97D04BB9AD53F2E6A0EFD63C59
	153D7AFCF7778EEE3FF8F479F4073DAF7F446065A1478DFFC855D23392AEA64F
	58D3752F5A46E8D0A143870E1D3A74E8BF831E85051DFA9CE8D10B2640BF78D0
	C8A541A02B2FE3D17B57C01FB56D879EBD20DAC8767409F48C55E9B647977449
	9774E8BA97DFE9D347F6D71937D3662E2FB517F2931929F42F4FEC93F200FDCB
	A42B2F6ABAA4433F417F0736E2CE1FF4170F425E7E4852D2CF7FA71C3C2A9D31
	6991744957D3B58C5AC679D1255DD2251D7A62D2B3DF67DA32E9D96FEE4D3539
	1AFDF962B27538A0D1133349DF21E96ABAEE45F7A24FDF20E965E1AD07FD6F00
	E4C1F9BEE5181BBE0000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="42" length_in_bytes="3320" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000005D0000
	00620806000000325DDFBB000000097048597300000EC300000EC301C76FA864
	00000A4F6943435050686F746F73686F70204943432070726F66696C65000078
	DA9D53675453E9163DF7DEF4424B8880944B6F5215082052428B801491262A21
	09104A8821A1D91551C1114545041BC8A088038E8E808C15512C0C8A0AD807E4
	21A28E83A3888ACAFBE17BA36BD6BCF7E6CDFEB5D73EE7ACF39DB3CF07C0080C
	9648335135800CA9421E11E083C7C4C6E1E42E40810A2470001008B3642173FD
	230100F87E3C3C2B22C007BE000178D30B0800C04D9BC0301C87FF0FEA42995C
	01808401C07491384B08801400407A8E42A600404601809D98265300A0040060
	CB6362E300502D0060277FE6D300809DF8997B01005B94211501A09100201365
	884400683B00ACCF568A450058300014664BC43900D82D00304957664800B0B7
	00C0CE100BB200080C00305188852900047B0060C8232378008499001446F257
	3CF12BAE10E72A00007899B23CB9243945815B082D710757572E1E28CE49172B
	14366102619A402EC27999193281340FE0F3CC0000A0911511E083F3FD78CE0E
	AECECE368EB60E5F2DEABF06FF226262E3FEE5CFAB70400000E1747ED1FE2C2F
	B31A803B06806DFEA225EE04685E0BA075F78B66B20F40B500A0E9DA57F370F8
	7E3C3C45A190B9D9D9E5E4E4D84AC4425B61CA577DFE67C25FC057FD6CF97E3C
	FCF7F5E0BEE22481325D814704F8E0C2CCF44CA51CCF92098462DCE68F47FCB7
	0BFFFC1DD322C44962B9582A14E35112718E449A8CF332A52289429229C525D2
	FF64E2DF2CFB033EDF3500B06A3E017B912DA85D6303F64B27105874C0E2F700
	00F2BB6FC1D4280803806883E1CF77FFEF3FFD47A02500806649927100005E44
	242E54CAB33FC708000044A0812AB0411BF4C1182CC0061CC105DCC10BFC6036
	844224C4C24210420A64801C726029AC82422886CDB01D2A602FD4401D34C051
	688693700E2EC255B80E3D700FFA61089EC128BC81090441C808136121DA8801
	628A58238E08179985F821C14804128B2420C9881451224B91354831528A5420
	55481DF23D720239875C46BA913BC8003282FC86BC47319481B2513DD40CB543
	B9A8371A8446A20BD06474319A8F16A09BD072B41A3D8C36A1E7D0AB680FDA8F
	3E43C730C0E8180733C46C302EC6C342B1382C099363CBB122AC0CABC61AB056
	AC03BB89F563CFB17704128145C0093604774220611E4148584C584ED848A820
	1C243411DA093709038451C2272293A84BB426BA11F9C4186232318758482C23
	D6128F132F107B8843C437241289433227B9900249B1A454D212D246D26E5223
	E92CA99B34481A2393C9DA646BB20739942C202BC885E49DE4C3E433E41BE421
	F25B0A9D624071A4F853E22852CA6A4A19E510E534E5066598324155A39A52DD
	A8A15411358F5A42ADA1B652AF5187A81334759A39CD8316494BA5ADA295D31A
	681768F769AFE874BA11DD951E4E97D057D2CBE947E897E803F4770C0D861583
	C7886728199B18071867197718AF984CA619D38B19C754303731EB98E7990F99
	6F55582AB62A7C1591CA0A954A9526951B2A2F54A9AAA6AADEAA0B55F355CB54
	8FA95E537DAE46553353E3A909D496AB55AA9D50EB531B5367A93BA887AA67A8
	6F543FA47E59FD890659C34CC34F43A451A0B15FE3BCC6200B6319B3782C216B
	0DAB86758135C426B1CDD97C762ABB98FD1DBB8B3DAAA9A13943334A3357B352
	F394663F07E39871F89C744E09E728A797F37E8ADE14EF29E2291BA6344CB931
	655C6BAA96979658AB48AB51AB47EBBD36AEEDA79DA6BD45BB59FB810E41C74A
	275C2747678FCE059DE753D953DDA70AA7164D3D3AF5AE2EAA6BA51BA1BB4477
	BF6EA7EE989EBE5E809E4C6FA7DE79BDE7FA1C7D2FFD54FD6DFAA7F5470C5806
	B30C2406DB0CCE183CC535716F3C1D2FC7DBF151435DC34043A561956197E184
	91B9D13CA3D5468D460F8C69C65CE324E36DC66DC6A326062621264B4DEA4DEE
	9A524DB9A629A63B4C3B4CC7CDCCCDA2CDD699359B3D31D732E79BE79BD79BDF
	B7605A785A2CB6A8B6B86549B2E45AA659EEB6BC6E855A3959A558555A5DB346
	AD9DAD25D6BBADBBA711A7B94E934EAB9ED667C3B0F1B6C9B6A9B719B0E5D806
	DBAEB66DB67D6167621767B7C5AEC3EE93BD937DBA7D8DFD3D070D87D90EAB1D
	5A1D7E73B472143A563ADE9ACE9CEE3F7DC5F496E92F6758CF10CFD833E3B613
	CB29C4699D539BD347671767B97383F3888B894B82CB2E973E2E9B1BC6DDC8BD
	E44A74F5715DE17AD2F59D9BB39BC2EDA8DBAFEE36EE69EE87DC9FCC349F299E
	593373D0C3C843E051E5D13F0B9F95306BDFAC7E4F434F8167B5E7232F632F91
	57ADD7B0B7A577AAF761EF173EF63E729FE33EE33C37DE32DE595FCC37C0B7C8
	B7CB4FC36F9E5F85DF437F23FF64FF7AFFD100A78025016703898141815B02FB
	F87A7C21BF8E3F3ADB65F6B2D9ED418CA0B94115418F82AD82E5C1AD2168C8EC
	90AD21F7E798CE91CE690E85507EE8D6D00761E6618BC37E0C2785878557863F
	8E7088581AD131973577D1DC4373DF44FA449644DE9B67314F39AF2D4A352A3E
	AA2E6A3CDA37BA34BA3FC62E6659CCD5589D58496C4B1C392E2AAE366E6CBEDF
	FCEDF387E29DE20BE37B17982FC85D7079A1CEC2F485A716A92E122C3A96404C
	884E3894F041102AA8168C25F21377258E0A79C21DC267222FD136D188D8435C
	2A1E4EF2482A4D7A92EC91BC357924C533A52CE5B98427A990BC4C0D4CDD9B3A
	9E169A76206D323D3ABD31839291907142AA214D93B667EA67E66676CBAC6585
	B2FEC56E8BB72F1E9507C96BB390AC05592D0AB642A6E8545A28D72A07B26765
	5766BFCD89CA3996AB9E2BCDEDCCB3CADB90379CEF9FFFED12C212E192B6A586
	4B572D1D58E6BDAC6A39B23C7179DB0AE315052B865606AC3CB88AB62A6DD54F
	ABED5797AE7EBD267A4D6B815EC1CA82C1B5016BEB0B550AE5857DEBDCD7ED5D
	4F582F59DFB561FA869D1B3E15898AAE14DB1797157FD828DC78E51B876FCABF
	99DC94B4A9ABC4B964CF66D266E9E6DE2D9E5B0E96AA97E6970E6E0DD9DAB40D
	DF56B4EDF5F645DB2F97CD28DBBB83B643B9A3BF3CB8BC65A7C9CECD3B3F54A4
	54F454FA5436EED2DDB561D7F86ED1EE1B7BBCF634ECD5DB5BBCF7FD3EC9BEDB
	5501554DD566D565FB49FBB3F73FAE89AAE9F896FB6D5DAD4E6D71EDC703D203
	FD07230EB6D7B9D4D51DD23D54528FD62BEB470EC71FBEFE9DEF772D0D360D55
	8D9CC6E223704479E4E9F709DFF71E0D3ADA768C7BACE107D31F761D671D2F6A
	429AF29A469B539AFB5B625BBA4FCC3ED1D6EADE7AFC47DB1F0F9C343C59794A
	F354C969DAE982D39367F2CF8C9D959D7D7E2EF9DC60DBA2B67BE763CEDF6A0F
	6FEFBA1074E1D245FF8BE73BBC3BCE5CF2B874F2B2DBE51357B8579AAF3A5F6D
	EA74EA3CFE93D34FC7BB9CBB9AAEB95C6BB9EE7ABDB57B66F7E91B9E37CEDDF4
	BD79F116FFD6D59E393DDDBDF37A6FF7C5F7F5DF16DD7E7227FDCECBBBD97727
	EEADBC4FBC5FF440ED41D943DD87D53F5BFEDCD8EFDC7F6AC077A0F3D1DC47F7
	068583CFFE91F58F0F43058F998FCB860D86EB9E383E3939E23F72FDE9FCA743
	CF64CF269E17FEA2FECBAE17162F7EF8D5EBD7CED198D1A197F29793BF6D7CA5
	FDEAC0EB19AFDBC6C2C61EBEC97833315EF456FBEDC177DC771DEFA3DF0F4FE4
	7C207F28FF68F9B1F553D0A7FB93199393FF040398F3FC63332DDB0000002063
	48524D00007A25000080830000F9FF000080E9000075300000EA6000003A9800
	00176F925FC546000002194944415478DAECDCD976C3200C4551E9FF3F9ABE84
	C64931331558C72F59AB6E3D6CDF2AC271D010829CB8A86A0821E829C7745DA7
	A7A2EF180211911C7A5CAF247D1E78F5EF9374924E4D67991F00550D24DDE2D8
	4127E95D9DC269893F32E957F81DC0A9E9271CBB88D0BE58A0D336FEEB7F28E8
	B3206B0D8BE8AA7F4B261768CCA90AFDBAAEE58A7A4E7ACE09744BF4DC06BF37
	C632EE94EDD35FBD70F10ABE7EAE8B5294ECC72DFAF46F8F42D2F551E8562352
	B7E896F75E5C279DF202BA1F74A3D6F0D7E36A91434FBE2781DE8F1E5BC53BF4
	BB0FAB411F446FE9D3E385009DA453D341A77B011DF495E8B9BB69A0DF772BDD
	E88D57DA7BD2AB8F1174D041071D74D041071D74D041071D74D041071D74D041
	071D74D04107FD4CF48FD91B2A763A1BC91A7DC5F957A18BBC9F4ECAEDB434E7
	C9A9E8B3CF3F7EE7286EF0E335F507B51FCCCEC2B7429F75FE2957926E91746A
	FA86359DEE85961174D041071D74D041071DF4E7A0CFC2021DF43DD1674F9800
	7AE54E674E0D023AE5653D7AEB0CF8AB1677E8D613A5AD6C478F40B798ADCE3D
	3A4927E9241D74BA97E7F4E92BFB6B8B9B693B97176D85EC1991823E78603DE5
	01F4C1A4535EA8E9241DF41BF412D88A3B7FA0671E84AC7E4892A4DF6F47128F
	4A5B0C5A483A49A7A6D332D232EE8B4ED2493A4907DD30E9D6DF67729974EB6F
	EE6D35385AFD9A196C254F68F5C08CA47B483A359DEE85EE853EDD41D2E5E0A5
	05FD670053ED6ACFBEA6AD2B0000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="43" length_in_bytes="3053" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D49484452000000740000
	006208060000008115F7A1000000097048597300000EC300000EC301C76FA864
	00000A4F6943435050686F746F73686F70204943432070726F66696C65000078
	DA9D53675453E9163DF7DEF4424B8880944B6F5215082052428B801491262A21
	09104A8821A1D91551C1114545041BC8A088038E8E808C15512C0C8A0AD807E4
	21A28E83A3888ACAFBE17BA36BD6BCF7E6CDFEB5D73EE7ACF39DB3CF07C0080C
	9648335135800CA9421E11E083C7C4C6E1E42E40810A2470001008B3642173FD
	230100F87E3C3C2B22C007BE000178D30B0800C04D9BC0301C87FF0FEA42995C
	01808401C07491384B08801400407A8E42A600404601809D98265300A0040060
	CB6362E300502D0060277FE6D300809DF8997B01005B94211501A09100201365
	884400683B00ACCF568A450058300014664BC43900D82D00304957664800B0B7
	00C0CE100BB200080C00305188852900047B0060C8232378008499001446F257
	3CF12BAE10E72A00007899B23CB9243945815B082D710757572E1E28CE49172B
	14366102619A402EC27999193281340FE0F3CC0000A0911511E083F3FD78CE0E
	AECECE368EB60E5F2DEABF06FF226262E3FEE5CFAB70400000E1747ED1FE2C2F
	B31A803B06806DFEA225EE04685E0BA075F78B66B20F40B500A0E9DA57F370F8
	7E3C3C45A190B9D9D9E5E4E4D84AC4425B61CA577DFE67C25FC057FD6CF97E3C
	FCF7F5E0BEE22481325D814704F8E0C2CCF44CA51CCF92098462DCE68F47FCB7
	0BFFFC1DD322C44962B9582A14E35112718E449A8CF332A52289429229C525D2
	FF64E2DF2CFB033EDF3500B06A3E017B912DA85D6303F64B27105874C0E2F700
	00F2BB6FC1D4280803806883E1CF77FFEF3FFD47A02500806649927100005E44
	242E54CAB33FC708000044A0812AB0411BF4C1182CC0061CC105DCC10BFC6036
	844224C4C24210420A64801C726029AC82422886CDB01D2A602FD4401D34C051
	688693700E2EC255B80E3D700FFA61089EC128BC81090441C808136121DA8801
	628A58238E08179985F821C14804128B2420C9881451224B91354831528A5420
	55481DF23D720239875C46BA913BC8003282FC86BC47319481B2513DD40CB543
	B9A8371A8446A20BD06474319A8F16A09BD072B41A3D8C36A1E7D0AB680FDA8F
	3E43C730C0E8180733C46C302EC6C342B1382C099363CBB122AC0CABC61AB056
	AC03BB89F563CFB17704128145C0093604774220611E4148584C584ED848A820
	1C243411DA093709038451C2272293A84BB426BA11F9C4186232318758482C23
	D6128F132F107B8843C437241289433227B9900249B1A454D212D246D26E5223
	E92CA99B34481A2393C9DA646BB20739942C202BC885E49DE4C3E433E41BE421
	F25B0A9D624071A4F853E22852CA6A4A19E510E534E5066598324155A39A52DD
	A8A15411358F5A42ADA1B652AF5187A81334759A39CD8316494BA5ADA295D31A
	681768F769AFE874BA11DD951E4E97D057D2CBE947E897E803F4770C0D861583
	C7886728199B18071867197718AF984CA619D38B19C754303731EB98E7990F99
	6F55582AB62A7C1591CA0A954A9526951B2A2F54A9AAA6AADEAA0B55F355CB54
	8FA95E537DAE46553353E3A909D496AB55AA9D50EB531B5367A93BA887AA67A8
	6F543FA47E59FD890659C34CC34F43A451A0B15FE3BCC6200B6319B3782C216B
	0DAB86758135C426B1CDD97C762ABB98FD1DBB8B3DAAA9A13943334A3357B352
	F394663F07E39871F89C744E09E728A797F37E8ADE14EF29E2291BA6344CB931
	655C6BAA96979658AB48AB51AB47EBBD36AEEDA79DA6BD45BB59FB810E41C74A
	275C2747678FCE059DE753D953DDA70AA7164D3D3AF5AE2EAA6BA51BA1BB4477
	BF6EA7EE989EBE5E809E4C6FA7DE79BDE7FA1C7D2FFD54FD6DFAA7F5470C5806
	B30C2406DB0CCE183CC535716F3C1D2FC7DBF151435DC34043A561956197E184
	91B9D13CA3D5468D460F8C69C65CE324E36DC66DC6A326062621264B4DEA4DEE
	9A524DB9A629A63B4C3B4CC7CDCCCDA2CDD699359B3D31D732E79BE79BD79BDF
	B7605A785A2CB6A8B6B86549B2E45AA659EEB6BC6E855A3959A558555A5DB346
	AD9DAD25D6BBADBBA711A7B94E934EAB9ED667C3B0F1B6C9B6A9B719B0E5D806
	DBAEB66DB67D6167621767B7C5AEC3EE93BD937DBA7D8DFD3D070D87D90EAB1D
	5A1D7E73B472143A563ADE9ACE9CEE3F7DC5F496E92F6758CF10CFD833E3B613
	CB29C4699D539BD347671767B97383F3888B894B82CB2E973E2E9B1BC6DDC8BD
	E44A74F5715DE17AD2F59D9BB39BC2EDA8DBAFEE36EE69EE87DC9FCC349F299E
	593373D0C3C843E051E5D13F0B9F95306BDFAC7E4F434F8167B5E7232F632F91
	57ADD7B0B7A577AAF761EF173EF63E729FE33EE33C37DE32DE595FCC37C0B7C8
	B7CB4FC36F9E5F85DF437F23FF64FF7AFFD100A78025016703898141815B02FB
	F87A7C21BF8E3F3ADB65F6B2D9ED418CA0B94115418F82AD82E5C1AD2168C8EC
	90AD21F7E798CE91CE690E85507EE8D6D00761E6618BC37E0C2785878557863F
	8E7088581AD131973577D1DC4373DF44FA449644DE9B67314F39AF2D4A352A3E
	AA2E6A3CDA37BA34BA3FC62E6659CCD5589D58496C4B1C392E2AAE366E6CBEDF
	FCEDF387E29DE20BE37B17982FC85D7079A1CEC2F485A716A92E122C3A96404C
	884E3894F041102AA8168C25F21377258E0A79C21DC267222FD136D188D8435C
	2A1E4EF2482A4D7A92EC91BC357924C533A52CE5B98427A990BC4C0D4CDD9B3A
	9E169A76206D323D3ABD31839291907142AA214D93B667EA67E66676CBAC6585
	B2FEC56E8BB72F1E9507C96BB390AC05592D0AB642A6E8545A28D72A07B26765
	5766BFCD89CA3996AB9E2BCDEDCCB3CADB90379CEF9FFFED12C212E192B6A586
	4B572D1D58E6BDAC6A39B23C7179DB0AE315052B865606AC3CB88AB62A6DD54F
	ABED5797AE7EBD267A4D6B815EC1CA82C1B5016BEB0B550AE5857DEBDCD7ED5D
	4F582F59DFB561FA869D1B3E15898AAE14DB1797157FD828DC78E51B876FCABF
	99DC94B4A9ABC4B964CF66D266E9E6DE2D9E5B0E96AA97E6970E6E0DD9DAB40D
	DF56B4EDF5F645DB2F97CD28DBBB83B643B9A3BF3CB8BC65A7C9CECD3B3F54A4
	54F454FA5436EED2DDB561D7F86ED1EE1B7BBCF634ECD5DB5BBCF7FD3EC9BEDB
	5501554DD566D565FB49FBB3F73FAE89AAE9F896FB6D5DAD4E6D71EDC703D203
	FD07230EB6D7B9D4D51DD23D54528FD62BEB470EC71FBEFE9DEF772D0D360D55
	8D9CC6E223704479E4E9F709DFF71E0D3ADA768C7BACE107D31F761D671D2F6A
	429AF29A469B539AFB5B625BBA4FCC3ED1D6EADE7AFC47DB1F0F9C343C59794A
	F354C969DAE982D39367F2CF8C9D959D7D7E2EF9DC60DBA2B67BE763CEDF6A0F
	6FEFBA1074E1D245FF8BE73BBC3BCE5CF2B874F2B2DBE51357B8579AAF3A5F6D
	EA74EA3CFE93D34FC7BB9CBB9AAEB95C6BB9EE7ABDB57B66F7E91B9E37CEDDF4
	BD79F116FFD6D59E393DDDBDF37A6FF7C5F7F5DF16DD7E7227FDCECBBBD97727
	EEADBC4FBC5FF440ED41D943DD87D53F5BFEDCD8EFDC7F6AC077A0F3D1DC47F7
	068583CFFE91F58F0F43058F998FCB860D86EB9E383E3939E23F72FDE9FCA743
	CF64CF269E17FEA2FECBAE17162F7EF8D5EBD7CED198D1A197F29793BF6D7CA5
	FDEAC0EB19AFDBC6C2C61EBEC97833315EF456FBEDC177DC771DEFA3DF0F4FE4
	7C207F28FF68F9B1F553D0A7FB93199393FF040398F3FC63332DDB0000002063
	48524D00007A25000080830000F9FF000080E9000075300000EA6000003A9800
	00176F925FC5460000010E4944415478DAECDDC1118030084541E9BF68ECC08B
	64E62BFB0A701256CEA9EEBEF49F0A2850011550011550A0022AA0022AA04005
	5440055440813E7CA4CA5F315077570CE8C461566FD6D00C8102050A54408102
	050A142850A0020A142850A04081021550A04081CE832279DF8A0D4DDAFE2FDC
	132850A0408102050A142850A0408102050A142850A0408102050A142850A040
	8102050A142850A0408102050A142850A0408102050A142850A0408102050A14
	E852D093834C024DBF67FC23025B3674EC8C408102050A142850A0408102050A
	142850A0408102050A142850A0408102050AD4108102050A142850A0400D1128
	50A0408102050AD410818E0E31E93CE9A037000000FFFF0300567FA979E33384
	6C0000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="44" length_in_bytes="3301" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D49484452000000740000
	006208060000008115F7A1000000097048597300000EC300000EC301C76FA864
	00000A4F6943435050686F746F73686F70204943432070726F66696C65000078
	DA9D53675453E9163DF7DEF4424B8880944B6F5215082052428B801491262A21
	09104A8821A1D91551C1114545041BC8A088038E8E808C15512C0C8A0AD807E4
	21A28E83A3888ACAFBE17BA36BD6BCF7E6CDFEB5D73EE7ACF39DB3CF07C0080C
	9648335135800CA9421E11E083C7C4C6E1E42E40810A2470001008B3642173FD
	230100F87E3C3C2B22C007BE000178D30B0800C04D9BC0301C87FF0FEA42995C
	01808401C07491384B08801400407A8E42A600404601809D98265300A0040060
	CB6362E300502D0060277FE6D300809DF8997B01005B94211501A09100201365
	884400683B00ACCF568A450058300014664BC43900D82D00304957664800B0B7
	00C0CE100BB200080C00305188852900047B0060C8232378008499001446F257
	3CF12BAE10E72A00007899B23CB9243945815B082D710757572E1E28CE49172B
	14366102619A402EC27999193281340FE0F3CC0000A0911511E083F3FD78CE0E
	AECECE368EB60E5F2DEABF06FF226262E3FEE5CFAB70400000E1747ED1FE2C2F
	B31A803B06806DFEA225EE04685E0BA075F78B66B20F40B500A0E9DA57F370F8
	7E3C3C45A190B9D9D9E5E4E4D84AC4425B61CA577DFE67C25FC057FD6CF97E3C
	FCF7F5E0BEE22481325D814704F8E0C2CCF44CA51CCF92098462DCE68F47FCB7
	0BFFFC1DD322C44962B9582A14E35112718E449A8CF332A52289429229C525D2
	FF64E2DF2CFB033EDF3500B06A3E017B912DA85D6303F64B27105874C0E2F700
	00F2BB6FC1D4280803806883E1CF77FFEF3FFD47A02500806649927100005E44
	242E54CAB33FC708000044A0812AB0411BF4C1182CC0061CC105DCC10BFC6036
	844224C4C24210420A64801C726029AC82422886CDB01D2A602FD4401D34C051
	688693700E2EC255B80E3D700FFA61089EC128BC81090441C808136121DA8801
	628A58238E08179985F821C14804128B2420C9881451224B91354831528A5420
	55481DF23D720239875C46BA913BC8003282FC86BC47319481B2513DD40CB543
	B9A8371A8446A20BD06474319A8F16A09BD072B41A3D8C36A1E7D0AB680FDA8F
	3E43C730C0E8180733C46C302EC6C342B1382C099363CBB122AC0CABC61AB056
	AC03BB89F563CFB17704128145C0093604774220611E4148584C584ED848A820
	1C243411DA093709038451C2272293A84BB426BA11F9C4186232318758482C23
	D6128F132F107B8843C437241289433227B9900249B1A454D212D246D26E5223
	E92CA99B34481A2393C9DA646BB20739942C202BC885E49DE4C3E433E41BE421
	F25B0A9D624071A4F853E22852CA6A4A19E510E534E5066598324155A39A52DD
	A8A15411358F5A42ADA1B652AF5187A81334759A39CD8316494BA5ADA295D31A
	681768F769AFE874BA11DD951E4E97D057D2CBE947E897E803F4770C0D861583
	C7886728199B18071867197718AF984CA619D38B19C754303731EB98E7990F99
	6F55582AB62A7C1591CA0A954A9526951B2A2F54A9AAA6AADEAA0B55F355CB54
	8FA95E537DAE46553353E3A909D496AB55AA9D50EB531B5367A93BA887AA67A8
	6F543FA47E59FD890659C34CC34F43A451A0B15FE3BCC6200B6319B3782C216B
	0DAB86758135C426B1CDD97C762ABB98FD1DBB8B3DAAA9A13943334A3357B352
	F394663F07E39871F89C744E09E728A797F37E8ADE14EF29E2291BA6344CB931
	655C6BAA96979658AB48AB51AB47EBBD36AEEDA79DA6BD45BB59FB810E41C74A
	275C2747678FCE059DE753D953DDA70AA7164D3D3AF5AE2EAA6BA51BA1BB4477
	BF6EA7EE989EBE5E809E4C6FA7DE79BDE7FA1C7D2FFD54FD6DFAA7F5470C5806
	B30C2406DB0CCE183CC535716F3C1D2FC7DBF151435DC34043A561956197E184
	91B9D13CA3D5468D460F8C69C65CE324E36DC66DC6A326062621264B4DEA4DEE
	9A524DB9A629A63B4C3B4CC7CDCCCDA2CDD699359B3D31D732E79BE79BD79BDF
	B7605A785A2CB6A8B6B86549B2E45AA659EEB6BC6E855A3959A558555A5DB346
	AD9DAD25D6BBADBBA711A7B94E934EAB9ED667C3B0F1B6C9B6A9B719B0E5D806
	DBAEB66DB67D6167621767B7C5AEC3EE93BD937DBA7D8DFD3D070D87D90EAB1D
	5A1D7E73B472143A563ADE9ACE9CEE3F7DC5F496E92F6758CF10CFD833E3B613
	CB29C4699D539BD347671767B97383F3888B894B82CB2E973E2E9B1BC6DDC8BD
	E44A74F5715DE17AD2F59D9BB39BC2EDA8DBAFEE36EE69EE87DC9FCC349F299E
	593373D0C3C843E051E5D13F0B9F95306BDFAC7E4F434F8167B5E7232F632F91
	57ADD7B0B7A577AAF761EF173EF63E729FE33EE33C37DE32DE595FCC37C0B7C8
	B7CB4FC36F9E5F85DF437F23FF64FF7AFFD100A78025016703898141815B02FB
	F87A7C21BF8E3F3ADB65F6B2D9ED418CA0B94115418F82AD82E5C1AD2168C8EC
	90AD21F7E798CE91CE690E85507EE8D6D00761E6618BC37E0C2785878557863F
	8E7088581AD131973577D1DC4373DF44FA449644DE9B67314F39AF2D4A352A3E
	AA2E6A3CDA37BA34BA3FC62E6659CCD5589D58496C4B1C392E2AAE366E6CBEDF
	FCEDF387E29DE20BE37B17982FC85D7079A1CEC2F485A716A92E122C3A96404C
	884E3894F041102AA8168C25F21377258E0A79C21DC267222FD136D188D8435C
	2A1E4EF2482A4D7A92EC91BC357924C533A52CE5B98427A990BC4C0D4CDD9B3A
	9E169A76206D323D3ABD31839291907142AA214D93B667EA67E66676CBAC6585
	B2FEC56E8BB72F1E9507C96BB390AC05592D0AB642A6E8545A28D72A07B26765
	5766BFCD89CA3996AB9E2BCDEDCCB3CADB90379CEF9FFFED12C212E192B6A586
	4B572D1D58E6BDAC6A39B23C7179DB0AE315052B865606AC3CB88AB62A6DD54F
	ABED5797AE7EBD267A4D6B815EC1CA82C1B5016BEB0B550AE5857DEBDCD7ED5D
	4F582F59DFB561FA869D1B3E15898AAE14DB1797157FD828DC78E51B876FCABF
	99DC94B4A9ABC4B964CF66D266E9E6DE2D9E5B0E96AA97E6970E6E0DD9DAB40D
	DF56B4EDF5F645DB2F97CD28DBBB83B643B9A3BF3CB8BC65A7C9CECD3B3F54A4
	54F454FA5436EED2DDB561D7F86ED1EE1B7BBCF634ECD5DB5BBCF7FD3EC9BEDB
	5501554DD566D565FB49FBB3F73FAE89AAE9F896FB6D5DAD4E6D71EDC703D203
	FD07230EB6D7B9D4D51DD23D54528FD62BEB470EC71FBEFE9DEF772D0D360D55
	8D9CC6E223704479E4E9F709DFF71E0D3ADA768C7BACE107D31F761D671D2F6A
	429AF29A469B539AFB5B625BBA4FCC3ED1D6EADE7AFC47DB1F0F9C343C59794A
	F354C969DAE982D39367F2CF8C9D959D7D7E2EF9DC60DBA2B67BE763CEDF6A0F
	6FEFBA1074E1D245FF8BE73BBC3BCE5CF2B874F2B2DBE51357B8579AAF3A5F6D
	EA74EA3CFE93D34FC7BB9CBB9AAEB95C6BB9EE7ABDB57B66F7E91B9E37CEDDF4
	BD79F116FFD6D59E393DDDBDF37A6FF7C5F7F5DF16DD7E7227FDCECBBBD97727
	EEADBC4FBC5FF440ED41D943DD87D53F5BFEDCD8EFDC7F6AC077A0F3D1DC47F7
	068583CFFE91F58F0F43058F998FCB860D86EB9E383E3939E23F72FDE9FCA743
	CF64CF269E17FEA2FECBAE17162F7EF8D5EBD7CED198D1A197F29793BF6D7CA5
	FDEAC0EB19AFDBC6C2C61EBEC97833315EF456FBEDC177DC771DEFA3DF0F4FE4
	7C207F28FF68F9B1F553D0A7FB93199393FF040398F3FC63332DDB0000002063
	48524D00007A25000080830000F9FF000080E9000075300000EA6000003A9800
	00176F925FC546000002064944415478DAECDDD16E02211005D0E5FF3F9A3E98
	346AB4DD55667760CEBC98345681E36517D262EBBD6F15AAB5D67BEF6DF97E56
	01AD524D42812AA0120A54019550A04067847CFED9CAB025127A8FBA7A4A4DB9
	95415F4D5F2ABE8E7C100F835AE69C3EB300050A14A802AA66016DAD19F93177
	B37940B3AFF1B2AF43478D6D09D019768A807EB11992B1AD404DB940812E043A
	C1F2042850A040810255401550A040810205AA80AA8CA0EAFB2A91D04C9BEA91
	6D2933E502050A142850A0408102050A142850A0408102050A142850A04081CE
	0D7ADF893D6F3ABAD32B83468CED2ED06DBBFD0BDE7F6F7AFF5CA0FB5E6FF4D8
	B6DB737E5FF0E1F1D52F1CF98B85119D5F1174D4D8BE3293D0D512EA1A5AEC1A
	EA2ED7B2052850A0408102050A142850A04067001DB94DB6E2D6DF9BF1020A34
	1874F461892B81FE3536A9133AF238D3D512FA6E6C4CB9A6DC58D0C8CA041ADC
	CF1CA0C183B8254B68EAFE03050A142850A0404F02CD7E97770568A6BBFCB02F
	843DBA669BE194B2616BC5C84DFE08D04F768AAA80467F29D070D04FF7722B80
	9EF1A540A65C532E50A040E707BD6AB0CAB751422554422514A8844AA8844AA8
	844AA8844A28D02A09BDFAFC86A3FD18760EC2AA09BDFA849555DAF8D096ED8F
	738AA21EDF35E6EC3390F6407ED3C6A70FC2298F12BA5A425D435D43DDE5BACB
	055A32A1DBC495E543F7030000FFFF0300AC4F70B953C9A7330000000049454E
	44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="45" length_in_bytes="3386" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D49484452000000740000
	006208060000008115F7A1000000097048597300000EC300000EC301C76FA864
	00000A4F6943435050686F746F73686F70204943432070726F66696C65000078
	DA9D53675453E9163DF7DEF4424B8880944B6F5215082052428B801491262A21
	09104A8821A1D91551C1114545041BC8A088038E8E808C15512C0C8A0AD807E4
	21A28E83A3888ACAFBE17BA36BD6BCF7E6CDFEB5D73EE7ACF39DB3CF07C0080C
	9648335135800CA9421E11E083C7C4C6E1E42E40810A2470001008B3642173FD
	230100F87E3C3C2B22C007BE000178D30B0800C04D9BC0301C87FF0FEA42995C
	01808401C07491384B08801400407A8E42A600404601809D98265300A0040060
	CB6362E300502D0060277FE6D300809DF8997B01005B94211501A09100201365
	884400683B00ACCF568A450058300014664BC43900D82D00304957664800B0B7
	00C0CE100BB200080C00305188852900047B0060C8232378008499001446F257
	3CF12BAE10E72A00007899B23CB9243945815B082D710757572E1E28CE49172B
	14366102619A402EC27999193281340FE0F3CC0000A0911511E083F3FD78CE0E
	AECECE368EB60E5F2DEABF06FF226262E3FEE5CFAB70400000E1747ED1FE2C2F
	B31A803B06806DFEA225EE04685E0BA075F78B66B20F40B500A0E9DA57F370F8
	7E3C3C45A190B9D9D9E5E4E4D84AC4425B61CA577DFE67C25FC057FD6CF97E3C
	FCF7F5E0BEE22481325D814704F8E0C2CCF44CA51CCF92098462DCE68F47FCB7
	0BFFFC1DD322C44962B9582A14E35112718E449A8CF332A52289429229C525D2
	FF64E2DF2CFB033EDF3500B06A3E017B912DA85D6303F64B27105874C0E2F700
	00F2BB6FC1D4280803806883E1CF77FFEF3FFD47A02500806649927100005E44
	242E54CAB33FC708000044A0812AB0411BF4C1182CC0061CC105DCC10BFC6036
	844224C4C24210420A64801C726029AC82422886CDB01D2A602FD4401D34C051
	688693700E2EC255B80E3D700FFA61089EC128BC81090441C808136121DA8801
	628A58238E08179985F821C14804128B2420C9881451224B91354831528A5420
	55481DF23D720239875C46BA913BC8003282FC86BC47319481B2513DD40CB543
	B9A8371A8446A20BD06474319A8F16A09BD072B41A3D8C36A1E7D0AB680FDA8F
	3E43C730C0E8180733C46C302EC6C342B1382C099363CBB122AC0CABC61AB056
	AC03BB89F563CFB17704128145C0093604774220611E4148584C584ED848A820
	1C243411DA093709038451C2272293A84BB426BA11F9C4186232318758482C23
	D6128F132F107B8843C437241289433227B9900249B1A454D212D246D26E5223
	E92CA99B34481A2393C9DA646BB20739942C202BC885E49DE4C3E433E41BE421
	F25B0A9D624071A4F853E22852CA6A4A19E510E534E5066598324155A39A52DD
	A8A15411358F5A42ADA1B652AF5187A81334759A39CD8316494BA5ADA295D31A
	681768F769AFE874BA11DD951E4E97D057D2CBE947E897E803F4770C0D861583
	C7886728199B18071867197718AF984CA619D38B19C754303731EB98E7990F99
	6F55582AB62A7C1591CA0A954A9526951B2A2F54A9AAA6AADEAA0B55F355CB54
	8FA95E537DAE46553353E3A909D496AB55AA9D50EB531B5367A93BA887AA67A8
	6F543FA47E59FD890659C34CC34F43A451A0B15FE3BCC6200B6319B3782C216B
	0DAB86758135C426B1CDD97C762ABB98FD1DBB8B3DAAA9A13943334A3357B352
	F394663F07E39871F89C744E09E728A797F37E8ADE14EF29E2291BA6344CB931
	655C6BAA96979658AB48AB51AB47EBBD36AEEDA79DA6BD45BB59FB810E41C74A
	275C2747678FCE059DE753D953DDA70AA7164D3D3AF5AE2EAA6BA51BA1BB4477
	BF6EA7EE989EBE5E809E4C6FA7DE79BDE7FA1C7D2FFD54FD6DFAA7F5470C5806
	B30C2406DB0CCE183CC535716F3C1D2FC7DBF151435DC34043A561956197E184
	91B9D13CA3D5468D460F8C69C65CE324E36DC66DC6A326062621264B4DEA4DEE
	9A524DB9A629A63B4C3B4CC7CDCCCDA2CDD699359B3D31D732E79BE79BD79BDF
	B7605A785A2CB6A8B6B86549B2E45AA659EEB6BC6E855A3959A558555A5DB346
	AD9DAD25D6BBADBBA711A7B94E934EAB9ED667C3B0F1B6C9B6A9B719B0E5D806
	DBAEB66DB67D6167621767B7C5AEC3EE93BD937DBA7D8DFD3D070D87D90EAB1D
	5A1D7E73B472143A563ADE9ACE9CEE3F7DC5F496E92F6758CF10CFD833E3B613
	CB29C4699D539BD347671767B97383F3888B894B82CB2E973E2E9B1BC6DDC8BD
	E44A74F5715DE17AD2F59D9BB39BC2EDA8DBAFEE36EE69EE87DC9FCC349F299E
	593373D0C3C843E051E5D13F0B9F95306BDFAC7E4F434F8167B5E7232F632F91
	57ADD7B0B7A577AAF761EF173EF63E729FE33EE33C37DE32DE595FCC37C0B7C8
	B7CB4FC36F9E5F85DF437F23FF64FF7AFFD100A78025016703898141815B02FB
	F87A7C21BF8E3F3ADB65F6B2D9ED418CA0B94115418F82AD82E5C1AD2168C8EC
	90AD21F7E798CE91CE690E85507EE8D6D00761E6618BC37E0C2785878557863F
	8E7088581AD131973577D1DC4373DF44FA449644DE9B67314F39AF2D4A352A3E
	AA2E6A3CDA37BA34BA3FC62E6659CCD5589D58496C4B1C392E2AAE366E6CBEDF
	FCEDF387E29DE20BE37B17982FC85D7079A1CEC2F485A716A92E122C3A96404C
	884E3894F041102AA8168C25F21377258E0A79C21DC267222FD136D188D8435C
	2A1E4EF2482A4D7A92EC91BC357924C533A52CE5B98427A990BC4C0D4CDD9B3A
	9E169A76206D323D3ABD31839291907142AA214D93B667EA67E66676CBAC6585
	B2FEC56E8BB72F1E9507C96BB390AC05592D0AB642A6E8545A28D72A07B26765
	5766BFCD89CA3996AB9E2BCDEDCCB3CADB90379CEF9FFFED12C212E192B6A586
	4B572D1D58E6BDAC6A39B23C7179DB0AE315052B865606AC3CB88AB62A6DD54F
	ABED5797AE7EBD267A4D6B815EC1CA82C1B5016BEB0B550AE5857DEBDCD7ED5D
	4F582F59DFB561FA869D1B3E15898AAE14DB1797157FD828DC78E51B876FCABF
	99DC94B4A9ABC4B964CF66D266E9E6DE2D9E5B0E96AA97E6970E6E0DD9DAB40D
	DF56B4EDF5F645DB2F97CD28DBBB83B643B9A3BF3CB8BC65A7C9CECD3B3F54A4
	54F454FA5436EED2DDB561D7F86ED1EE1B7BBCF634ECD5DB5BBCF7FD3EC9BEDB
	5501554DD566D565FB49FBB3F73FAE89AAE9F896FB6D5DAD4E6D71EDC703D203
	FD07230EB6D7B9D4D51DD23D54528FD62BEB470EC71FBEFE9DEF772D0D360D55
	8D9CC6E223704479E4E9F709DFF71E0D3ADA768C7BACE107D31F761D671D2F6A
	429AF29A469B539AFB5B625BBA4FCC3ED1D6EADE7AFC47DB1F0F9C343C59794A
	F354C969DAE982D39367F2CF8C9D959D7D7E2EF9DC60DBA2B67BE763CEDF6A0F
	6FEFBA1074E1D245FF8BE73BBC3BCE5CF2B874F2B2DBE51357B8579AAF3A5F6D
	EA74EA3CFE93D34FC7BB9CBB9AAEB95C6BB9EE7ABDB57B66F7E91B9E37CEDDF4
	BD79F116FFD6D59E393DDDBDF37A6FF7C5F7F5DF16DD7E7227FDCECBBBD97727
	EEADBC4FBC5FF440ED41D943DD87D53F5BFEDCD8EFDC7F6AC077A0F3D1DC47F7
	068583CFFE91F58F0F43058F998FCB860D86EB9E383E3939E23F72FDE9FCA743
	CF64CF269E17FEA2FECBAE17162F7EF8D5EBD7CED198D1A197F29793BF6D7CA5
	FDEAC0EB19AFDBC6C2C61EBEC97833315EF456FBEDC177DC771DEFA3DF0F4FE4
	7C207F28FF68F9B1F553D0A7FB93199393FF040398F3FC63332DDB0000002063
	48524D00007A25000080830000F9FF000080E9000075300000EA6000003A9800
	00176F925FC5460000025B4944415478DAECDCCB76C220140550F8FF8FA683EA
	AADABC3460E0B2993868ABE4EE9CF0A88B5C4A4933B49C7329A5E488FD7FFC59
	9E0574F49B31A594B640EF3FCF123A06E6E1DF975009955063A8F68D1B31E75C
	2434DA750295D0E1678991933A45421F5147C394D0D9C7D09492696E34504B97
	304F21A023201DF5C939FF4E8A6EE38BEA8D0FFFB7F50775DC84DE31FF2D5BA0
	8E9BCCD575E8DEBF6B96C073CE2A5BA17D52DBD7A5D85BEBD0B504BFDE25D6A1
	1FF7EF746DA7001D61A708E807983DA302F5C8050A3410E800CB0FA040810205
	0A5403AA01050A142850A01A50AD4750ED7C9B22A13D6DAAB7ECCB348F5CA040
	8102050A142850A0408102050A142850A0408102050A1428D0B1419F4E7A3CF0
	A1B52F3A32688BDA1E024DE97616EBCE87EE9DEB0AB47D6DEFC7DADCDFF0E975
	E90FDEF9C6428D8B8F085AABB64B66121A2DA1C6D0C9C650B35CCB16A0408102
	050A142850A04081021D01B4E63659C4ADBF957A0105DA18B4F661899140B76A
	D375426B1E671A2DA16BB5F1C8F5C86D0BDAB2F504DAF83AFB006D5CC4D45942
	BBBE7EA0408102050A146880596EEF875A5D79FD4BDFF05BFAAE5137EBD0114E
	29ABB656ACB80E7DDDA8E866A76816D09A3B454BEBE26EF67267006DB597EB91
	1BE8910B1428D05E41BF32865E5DAC11406BBEF7E959EEC61A4A424F2674ABB6
	4DD6A1A3DEFD53F5B115A884D6AB4D17A0122AA1122AA1FA28A112EAEE97D083
	77E1D5E737BC7B1DD5CE41889AD0AB4F5889D2C7A7BEA48D738A5ABD6EEC882C
	16EBC8CE542BC8337DDCDBE569F12AA1D1126A0C35869AE59AE5029D32A169E0
	D6CB4DF73300997E3ADAE387AE910000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="46" length_in_bytes="3396" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D49484452000000740000
	006208060000008115F7A1000000097048597300000EC300000EC301C76FA864
	00000A4F6943435050686F746F73686F70204943432070726F66696C65000078
	DA9D53675453E9163DF7DEF4424B8880944B6F5215082052428B801491262A21
	09104A8821A1D91551C1114545041BC8A088038E8E808C15512C0C8A0AD807E4
	21A28E83A3888ACAFBE17BA36BD6BCF7E6CDFEB5D73EE7ACF39DB3CF07C0080C
	9648335135800CA9421E11E083C7C4C6E1E42E40810A2470001008B3642173FD
	230100F87E3C3C2B22C007BE000178D30B0800C04D9BC0301C87FF0FEA42995C
	01808401C07491384B08801400407A8E42A600404601809D98265300A0040060
	CB6362E300502D0060277FE6D300809DF8997B01005B94211501A09100201365
	884400683B00ACCF568A450058300014664BC43900D82D00304957664800B0B7
	00C0CE100BB200080C00305188852900047B0060C8232378008499001446F257
	3CF12BAE10E72A00007899B23CB9243945815B082D710757572E1E28CE49172B
	14366102619A402EC27999193281340FE0F3CC0000A0911511E083F3FD78CE0E
	AECECE368EB60E5F2DEABF06FF226262E3FEE5CFAB70400000E1747ED1FE2C2F
	B31A803B06806DFEA225EE04685E0BA075F78B66B20F40B500A0E9DA57F370F8
	7E3C3C45A190B9D9D9E5E4E4D84AC4425B61CA577DFE67C25FC057FD6CF97E3C
	FCF7F5E0BEE22481325D814704F8E0C2CCF44CA51CCF92098462DCE68F47FCB7
	0BFFFC1DD322C44962B9582A14E35112718E449A8CF332A52289429229C525D2
	FF64E2DF2CFB033EDF3500B06A3E017B912DA85D6303F64B27105874C0E2F700
	00F2BB6FC1D4280803806883E1CF77FFEF3FFD47A02500806649927100005E44
	242E54CAB33FC708000044A0812AB0411BF4C1182CC0061CC105DCC10BFC6036
	844224C4C24210420A64801C726029AC82422886CDB01D2A602FD4401D34C051
	688693700E2EC255B80E3D700FFA61089EC128BC81090441C808136121DA8801
	628A58238E08179985F821C14804128B2420C9881451224B91354831528A5420
	55481DF23D720239875C46BA913BC8003282FC86BC47319481B2513DD40CB543
	B9A8371A8446A20BD06474319A8F16A09BD072B41A3D8C36A1E7D0AB680FDA8F
	3E43C730C0E8180733C46C302EC6C342B1382C099363CBB122AC0CABC61AB056
	AC03BB89F563CFB17704128145C0093604774220611E4148584C584ED848A820
	1C243411DA093709038451C2272293A84BB426BA11F9C4186232318758482C23
	D6128F132F107B8843C437241289433227B9900249B1A454D212D246D26E5223
	E92CA99B34481A2393C9DA646BB20739942C202BC885E49DE4C3E433E41BE421
	F25B0A9D624071A4F853E22852CA6A4A19E510E534E5066598324155A39A52DD
	A8A15411358F5A42ADA1B652AF5187A81334759A39CD8316494BA5ADA295D31A
	681768F769AFE874BA11DD951E4E97D057D2CBE947E897E803F4770C0D861583
	C7886728199B18071867197718AF984CA619D38B19C754303731EB98E7990F99
	6F55582AB62A7C1591CA0A954A9526951B2A2F54A9AAA6AADEAA0B55F355CB54
	8FA95E537DAE46553353E3A909D496AB55AA9D50EB531B5367A93BA887AA67A8
	6F543FA47E59FD890659C34CC34F43A451A0B15FE3BCC6200B6319B3782C216B
	0DAB86758135C426B1CDD97C762ABB98FD1DBB8B3DAAA9A13943334A3357B352
	F394663F07E39871F89C744E09E728A797F37E8ADE14EF29E2291BA6344CB931
	655C6BAA96979658AB48AB51AB47EBBD36AEEDA79DA6BD45BB59FB810E41C74A
	275C2747678FCE059DE753D953DDA70AA7164D3D3AF5AE2EAA6BA51BA1BB4477
	BF6EA7EE989EBE5E809E4C6FA7DE79BDE7FA1C7D2FFD54FD6DFAA7F5470C5806
	B30C2406DB0CCE183CC535716F3C1D2FC7DBF151435DC34043A561956197E184
	91B9D13CA3D5468D460F8C69C65CE324E36DC66DC6A326062621264B4DEA4DEE
	9A524DB9A629A63B4C3B4CC7CDCCCDA2CDD699359B3D31D732E79BE79BD79BDF
	B7605A785A2CB6A8B6B86549B2E45AA659EEB6BC6E855A3959A558555A5DB346
	AD9DAD25D6BBADBBA711A7B94E934EAB9ED667C3B0F1B6C9B6A9B719B0E5D806
	DBAEB66DB67D6167621767B7C5AEC3EE93BD937DBA7D8DFD3D070D87D90EAB1D
	5A1D7E73B472143A563ADE9ACE9CEE3F7DC5F496E92F6758CF10CFD833E3B613
	CB29C4699D539BD347671767B97383F3888B894B82CB2E973E2E9B1BC6DDC8BD
	E44A74F5715DE17AD2F59D9BB39BC2EDA8DBAFEE36EE69EE87DC9FCC349F299E
	593373D0C3C843E051E5D13F0B9F95306BDFAC7E4F434F8167B5E7232F632F91
	57ADD7B0B7A577AAF761EF173EF63E729FE33EE33C37DE32DE595FCC37C0B7C8
	B7CB4FC36F9E5F85DF437F23FF64FF7AFFD100A78025016703898141815B02FB
	F87A7C21BF8E3F3ADB65F6B2D9ED418CA0B94115418F82AD82E5C1AD2168C8EC
	90AD21F7E798CE91CE690E85507EE8D6D00761E6618BC37E0C2785878557863F
	8E7088581AD131973577D1DC4373DF44FA449644DE9B67314F39AF2D4A352A3E
	AA2E6A3CDA37BA34BA3FC62E6659CCD5589D58496C4B1C392E2AAE366E6CBEDF
	FCEDF387E29DE20BE37B17982FC85D7079A1CEC2F485A716A92E122C3A96404C
	884E3894F041102AA8168C25F21377258E0A79C21DC267222FD136D188D8435C
	2A1E4EF2482A4D7A92EC91BC357924C533A52CE5B98427A990BC4C0D4CDD9B3A
	9E169A76206D323D3ABD31839291907142AA214D93B667EA67E66676CBAC6585
	B2FEC56E8BB72F1E9507C96BB390AC05592D0AB642A6E8545A28D72A07B26765
	5766BFCD89CA3996AB9E2BCDEDCCB3CADB90379CEF9FFFED12C212E192B6A586
	4B572D1D58E6BDAC6A39B23C7179DB0AE315052B865606AC3CB88AB62A6DD54F
	ABED5797AE7EBD267A4D6B815EC1CA82C1B5016BEB0B550AE5857DEBDCD7ED5D
	4F582F59DFB561FA869D1B3E15898AAE14DB1797157FD828DC78E51B876FCABF
	99DC94B4A9ABC4B964CF66D266E9E6DE2D9E5B0E96AA97E6970E6E0DD9DAB40D
	DF56B4EDF5F645DB2F97CD28DBBB83B643B9A3BF3CB8BC65A7C9CECD3B3F54A4
	54F454FA5436EED2DDB561D7F86ED1EE1B7BBCF634ECD5DB5BBCF7FD3EC9BEDB
	5501554DD566D565FB49FBB3F73FAE89AAE9F896FB6D5DAD4E6D71EDC703D203
	FD07230EB6D7B9D4D51DD23D54528FD62BEB470EC71FBEFE9DEF772D0D360D55
	8D9CC6E223704479E4E9F709DFF71E0D3ADA768C7BACE107D31F761D671D2F6A
	429AF29A469B539AFB5B625BBA4FCC3ED1D6EADE7AFC47DB1F0F9C343C59794A
	F354C969DAE982D39367F2CF8C9D959D7D7E2EF9DC60DBA2B67BE763CEDF6A0F
	6FEFBA1074E1D245FF8BE73BBC3BCE5CF2B874F2B2DBE51357B8579AAF3A5F6D
	EA74EA3CFE93D34FC7BB9CBB9AAEB95C6BB9EE7ABDB57B66F7E91B9E37CEDDF4
	BD79F116FFD6D59E393DDDBDF37A6FF7C5F7F5DF16DD7E7227FDCECBBBD97727
	EEADBC4FBC5FF440ED41D943DD87D53F5BFEDCD8EFDC7F6AC077A0F3D1DC47F7
	068583CFFE91F58F0F43058F998FCB860D86EB9E383E3939E23F72FDE9FCA743
	CF64CF269E17FEA2FECBAE17162F7EF8D5EBD7CED198D1A197F29793BF6D7CA5
	FDEAC0EB19AFDBC6C2C61EBEC97833315EF456FBEDC177DC771DEFA3DF0F4FE4
	7C207F28FF68F9B1F553D0A7FB93199393FF040398F3FC63332DDB0000002063
	48524D00007A25000080830000F9FF000080E9000075300000EA6000003A9800
	00176F925FC546000002654944415478DAECDDCB72832018065078FF87B69B64
	A6C978090A0A3F874D16A615397E204C8B7959963443C9392FCBB2E488F5FF7F
	2CCF023AFACD98524A7BA0EFE35942C7C0FCF9FB122AA1126A0C55EEB81173CE
	8B8446BB4EA0123AFC5362E4A44E91D0FFA8A3614AE8EC63684AC9636E345053
	9730BD10D011907EF52906CD797B0872535C87BBDAB6A740D7BE5B721729EDDA
	166854D092136F9D54B95E6AB46DD13CF43597DBBA8B72E709E87A1E5AAB6DA7
	001D61A508E809CC9E5181EA7281020D043AC0B4052850A040810255802A4081
	0205BA72D2AD6340AF83D6685B09D5E5029D0254B95EA648684F8BEA2DEB324D
	970B142850A0408102050A142850A0408102050A142850A0408102053A36E8C7
	4E8F3F9CB4F64547066DD1B63F81A6F4DA8BF5E0A447FBBA026DDFB6EF3D16DE
	BFF0E373ED074AFE62A1C6C54704ADD5B66B66121A2DA1C6D0C9C6504FB9A62D
	408102050A142850A0408102053A0268CD65B2884B7F1BED05146863D0DA9B25
	4602DD6B9BAE135A733BD36809DD6A1B5DAE2EB71CB4F4EDB2AD4A4FA0BDB7C7
	21E8D32F07E869FF8611DA0368E7A0DF6F85002AA1402514E83809F5941BE829
	F7CE39DB08BB94559B2BB65CE46F017A66A56816D0D2B6F9C63FBA19AA839E5D
	CB9D01F48E9702E9723BEF721F4F28D0806328D080097DAAB1A2D4F1106EE3B8
	84769AD0BD7F4EDA3D26A1FDD5B16401A3F8DF0925544225D4182AA1DD4F5B24
	F4A13A4AA8844AA8841E7FE789FD1B4AAFA3DA3E085113FAF40E2B51EAF85197
	B4B34F51ABCF9D49F26A636D4DA8EF80BC52C7B5897FEB4F098D965063A831D4
	53AEA75CA05326340D5C7AB9E9FE06009C23CCD1599A249C0000000049454E44
	AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="47" length_in_bytes="3439" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D49484452000000740000
	006208060000008115F7A1000000097048597300000EC300000EC301C76FA864
	00000A4F6943435050686F746F73686F70204943432070726F66696C65000078
	DA9D53675453E9163DF7DEF4424B8880944B6F5215082052428B801491262A21
	09104A8821A1D91551C1114545041BC8A088038E8E808C15512C0C8A0AD807E4
	21A28E83A3888ACAFBE17BA36BD6BCF7E6CDFEB5D73EE7ACF39DB3CF07C0080C
	9648335135800CA9421E11E083C7C4C6E1E42E40810A2470001008B3642173FD
	230100F87E3C3C2B22C007BE000178D30B0800C04D9BC0301C87FF0FEA42995C
	01808401C07491384B08801400407A8E42A600404601809D98265300A0040060
	CB6362E300502D0060277FE6D300809DF8997B01005B94211501A09100201365
	884400683B00ACCF568A450058300014664BC43900D82D00304957664800B0B7
	00C0CE100BB200080C00305188852900047B0060C8232378008499001446F257
	3CF12BAE10E72A00007899B23CB9243945815B082D710757572E1E28CE49172B
	14366102619A402EC27999193281340FE0F3CC0000A0911511E083F3FD78CE0E
	AECECE368EB60E5F2DEABF06FF226262E3FEE5CFAB70400000E1747ED1FE2C2F
	B31A803B06806DFEA225EE04685E0BA075F78B66B20F40B500A0E9DA57F370F8
	7E3C3C45A190B9D9D9E5E4E4D84AC4425B61CA577DFE67C25FC057FD6CF97E3C
	FCF7F5E0BEE22481325D814704F8E0C2CCF44CA51CCF92098462DCE68F47FCB7
	0BFFFC1DD322C44962B9582A14E35112718E449A8CF332A52289429229C525D2
	FF64E2DF2CFB033EDF3500B06A3E017B912DA85D6303F64B27105874C0E2F700
	00F2BB6FC1D4280803806883E1CF77FFEF3FFD47A02500806649927100005E44
	242E54CAB33FC708000044A0812AB0411BF4C1182CC0061CC105DCC10BFC6036
	844224C4C24210420A64801C726029AC82422886CDB01D2A602FD4401D34C051
	688693700E2EC255B80E3D700FFA61089EC128BC81090441C808136121DA8801
	628A58238E08179985F821C14804128B2420C9881451224B91354831528A5420
	55481DF23D720239875C46BA913BC8003282FC86BC47319481B2513DD40CB543
	B9A8371A8446A20BD06474319A8F16A09BD072B41A3D8C36A1E7D0AB680FDA8F
	3E43C730C0E8180733C46C302EC6C342B1382C099363CBB122AC0CABC61AB056
	AC03BB89F563CFB17704128145C0093604774220611E4148584C584ED848A820
	1C243411DA093709038451C2272293A84BB426BA11F9C4186232318758482C23
	D6128F132F107B8843C437241289433227B9900249B1A454D212D246D26E5223
	E92CA99B34481A2393C9DA646BB20739942C202BC885E49DE4C3E433E41BE421
	F25B0A9D624071A4F853E22852CA6A4A19E510E534E5066598324155A39A52DD
	A8A15411358F5A42ADA1B652AF5187A81334759A39CD8316494BA5ADA295D31A
	681768F769AFE874BA11DD951E4E97D057D2CBE947E897E803F4770C0D861583
	C7886728199B18071867197718AF984CA619D38B19C754303731EB98E7990F99
	6F55582AB62A7C1591CA0A954A9526951B2A2F54A9AAA6AADEAA0B55F355CB54
	8FA95E537DAE46553353E3A909D496AB55AA9D50EB531B5367A93BA887AA67A8
	6F543FA47E59FD890659C34CC34F43A451A0B15FE3BCC6200B6319B3782C216B
	0DAB86758135C426B1CDD97C762ABB98FD1DBB8B3DAAA9A13943334A3357B352
	F394663F07E39871F89C744E09E728A797F37E8ADE14EF29E2291BA6344CB931
	655C6BAA96979658AB48AB51AB47EBBD36AEEDA79DA6BD45BB59FB810E41C74A
	275C2747678FCE059DE753D953DDA70AA7164D3D3AF5AE2EAA6BA51BA1BB4477
	BF6EA7EE989EBE5E809E4C6FA7DE79BDE7FA1C7D2FFD54FD6DFAA7F5470C5806
	B30C2406DB0CCE183CC535716F3C1D2FC7DBF151435DC34043A561956197E184
	91B9D13CA3D5468D460F8C69C65CE324E36DC66DC6A326062621264B4DEA4DEE
	9A524DB9A629A63B4C3B4CC7CDCCCDA2CDD699359B3D31D732E79BE79BD79BDF
	B7605A785A2CB6A8B6B86549B2E45AA659EEB6BC6E855A3959A558555A5DB346
	AD9DAD25D6BBADBBA711A7B94E934EAB9ED667C3B0F1B6C9B6A9B719B0E5D806
	DBAEB66DB67D6167621767B7C5AEC3EE93BD937DBA7D8DFD3D070D87D90EAB1D
	5A1D7E73B472143A563ADE9ACE9CEE3F7DC5F496E92F6758CF10CFD833E3B613
	CB29C4699D539BD347671767B97383F3888B894B82CB2E973E2E9B1BC6DDC8BD
	E44A74F5715DE17AD2F59D9BB39BC2EDA8DBAFEE36EE69EE87DC9FCC349F299E
	593373D0C3C843E051E5D13F0B9F95306BDFAC7E4F434F8167B5E7232F632F91
	57ADD7B0B7A577AAF761EF173EF63E729FE33EE33C37DE32DE595FCC37C0B7C8
	B7CB4FC36F9E5F85DF437F23FF64FF7AFFD100A78025016703898141815B02FB
	F87A7C21BF8E3F3ADB65F6B2D9ED418CA0B94115418F82AD82E5C1AD2168C8EC
	90AD21F7E798CE91CE690E85507EE8D6D00761E6618BC37E0C2785878557863F
	8E7088581AD131973577D1DC4373DF44FA449644DE9B67314F39AF2D4A352A3E
	AA2E6A3CDA37BA34BA3FC62E6659CCD5589D58496C4B1C392E2AAE366E6CBEDF
	FCEDF387E29DE20BE37B17982FC85D7079A1CEC2F485A716A92E122C3A96404C
	884E3894F041102AA8168C25F21377258E0A79C21DC267222FD136D188D8435C
	2A1E4EF2482A4D7A92EC91BC357924C533A52CE5B98427A990BC4C0D4CDD9B3A
	9E169A76206D323D3ABD31839291907142AA214D93B667EA67E66676CBAC6585
	B2FEC56E8BB72F1E9507C96BB390AC05592D0AB642A6E8545A28D72A07B26765
	5766BFCD89CA3996AB9E2BCDEDCCB3CADB90379CEF9FFFED12C212E192B6A586
	4B572D1D58E6BDAC6A39B23C7179DB0AE315052B865606AC3CB88AB62A6DD54F
	ABED5797AE7EBD267A4D6B815EC1CA82C1B5016BEB0B550AE5857DEBDCD7ED5D
	4F582F59DFB561FA869D1B3E15898AAE14DB1797157FD828DC78E51B876FCABF
	99DC94B4A9ABC4B964CF66D266E9E6DE2D9E5B0E96AA97E6970E6E0DD9DAB40D
	DF56B4EDF5F645DB2F97CD28DBBB83B643B9A3BF3CB8BC65A7C9CECD3B3F54A4
	54F454FA5436EED2DDB561D7F86ED1EE1B7BBCF634ECD5DB5BBCF7FD3EC9BEDB
	5501554DD566D565FB49FBB3F73FAE89AAE9F896FB6D5DAD4E6D71EDC703D203
	FD07230EB6D7B9D4D51DD23D54528FD62BEB470EC71FBEFE9DEF772D0D360D55
	8D9CC6E223704479E4E9F709DFF71E0D3ADA768C7BACE107D31F761D671D2F6A
	429AF29A469B539AFB5B625BBA4FCC3ED1D6EADE7AFC47DB1F0F9C343C59794A
	F354C969DAE982D39367F2CF8C9D959D7D7E2EF9DC60DBA2B67BE763CEDF6A0F
	6FEFBA1074E1D245FF8BE73BBC3BCE5CF2B874F2B2DBE51357B8579AAF3A5F6D
	EA74EA3CFE93D34FC7BB9CBB9AAEB95C6BB9EE7ABDB57B66F7E91B9E37CEDDF4
	BD79F116FFD6D59E393DDDBDF37A6FF7C5F7F5DF16DD7E7227FDCECBBBD97727
	EEADBC4FBC5FF440ED41D943DD87D53F5BFEDCD8EFDC7F6AC077A0F3D1DC47F7
	068583CFFE91F58F0F43058F998FCB860D86EB9E383E3939E23F72FDE9FCA743
	CF64CF269E17FEA2FECBAE17162F7EF8D5EBD7CED198D1A197F29793BF6D7CA5
	FDEAC0EB19AFDBC6C2C61EBEC97833315EF456FBEDC177DC771DEFA3DF0F4FE4
	7C207F28FF68F9B1F553D0A7FB93199393FF040398F3FC63332DDB0000002063
	48524D00007A25000080830000F9FF000080E9000075300000EA6000003A9800
	00176F925FC546000002904944415478DAECDDD172C2201085E1DDF77F687A63
	6AB404D814C8B2FCDC38D358257C9C0019454D29C90E4555534A4923D6FF7C4C
	77015DBD338A8894408FE34A42D7C06C7E3E0925A12494319432A323AA6A22A1
	D1CE135012BAFC2C317252B748E81975354C12BAFB182A224C73A381B2740973
	15027405A4569F2AA8EADF2107FCF9A0AD064DA0E76396DE421993D09201A051
	414B2FF8FD6294F9C562505C87BED66ED5DEF1FABB3AEFE9AED7A1DF6D5D49A8
	6E0DBAC29D22406F607A4605944B2EA08006025D6079F2DBD6E7762E81E63A29
	A04E418FE5CA15E8D507C700750C6A59871EC880925040194329CC72010514D0
	16D0CC6C0AD0C9A0B919ED2D50632F02745C429BDB165040DB2E0B147BD922A1
	9E6EAA8FACCB36975C4001051450400105145040010514504001051450400105
	145040010514D0B5413F767A6C78D3DE271D197444DB36818ABC3F995D7AD3DA
	BEAE808E6FDB638F85E3053F1E73FF60F9C4428F938F08DAAB6D736624345A42
	1943371B4399E5B26C0114504001051450400105145040015D01B4E76DB288B7
	FE2EDA0B50400783F6DE2C311268A96D5C27B4E776A6D1127AD5365C72B9E4DA
	41ADBF2E3BAA7802F5DE1EA66D6D1E6A44719650D7ED01A873D0A11B4F014A42
	0125A1800E4D28B3DC40B3DC996BB6157629EBB6561C79937F04E89D3B45BB80
	5ADBE61BBFD619BA83DEBD97BB03E88C1F05E292EBFC92FB7842010D3886021A
	30A14F3556943A56E12E8E9350A7092D7D39A9788C84FAABA3E50686F9EB8424
	94849250C65012EA7ED942421FAA230925A1249484D69FF3C4FE0DD6F3E8B60F
	42D4843EBDC34A943A7ED4450AFB148D7A2C2C92B38D75B5A09E01F99F3AE616
	FEA31F4968B4843286328632CB65960BE8960995858B974EF73300FC253DE2C3
	5B5E160000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="48" length_in_bytes="3077" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000005D0000
	00620806000000325DDFBB000000097048597300000EC300000EC301C76FA864
	00000A4F6943435050686F746F73686F70204943432070726F66696C65000078
	DA9D53675453E9163DF7DEF4424B8880944B6F5215082052428B801491262A21
	09104A8821A1D91551C1114545041BC8A088038E8E808C15512C0C8A0AD807E4
	21A28E83A3888ACAFBE17BA36BD6BCF7E6CDFEB5D73EE7ACF39DB3CF07C0080C
	9648335135800CA9421E11E083C7C4C6E1E42E40810A2470001008B3642173FD
	230100F87E3C3C2B22C007BE000178D30B0800C04D9BC0301C87FF0FEA42995C
	01808401C07491384B08801400407A8E42A600404601809D98265300A0040060
	CB6362E300502D0060277FE6D300809DF8997B01005B94211501A09100201365
	884400683B00ACCF568A450058300014664BC43900D82D00304957664800B0B7
	00C0CE100BB200080C00305188852900047B0060C8232378008499001446F257
	3CF12BAE10E72A00007899B23CB9243945815B082D710757572E1E28CE49172B
	14366102619A402EC27999193281340FE0F3CC0000A0911511E083F3FD78CE0E
	AECECE368EB60E5F2DEABF06FF226262E3FEE5CFAB70400000E1747ED1FE2C2F
	B31A803B06806DFEA225EE04685E0BA075F78B66B20F40B500A0E9DA57F370F8
	7E3C3C45A190B9D9D9E5E4E4D84AC4425B61CA577DFE67C25FC057FD6CF97E3C
	FCF7F5E0BEE22481325D814704F8E0C2CCF44CA51CCF92098462DCE68F47FCB7
	0BFFFC1DD322C44962B9582A14E35112718E449A8CF332A52289429229C525D2
	FF64E2DF2CFB033EDF3500B06A3E017B912DA85D6303F64B27105874C0E2F700
	00F2BB6FC1D4280803806883E1CF77FFEF3FFD47A02500806649927100005E44
	242E54CAB33FC708000044A0812AB0411BF4C1182CC0061CC105DCC10BFC6036
	844224C4C24210420A64801C726029AC82422886CDB01D2A602FD4401D34C051
	688693700E2EC255B80E3D700FFA61089EC128BC81090441C808136121DA8801
	628A58238E08179985F821C14804128B2420C9881451224B91354831528A5420
	55481DF23D720239875C46BA913BC8003282FC86BC47319481B2513DD40CB543
	B9A8371A8446A20BD06474319A8F16A09BD072B41A3D8C36A1E7D0AB680FDA8F
	3E43C730C0E8180733C46C302EC6C342B1382C099363CBB122AC0CABC61AB056
	AC03BB89F563CFB17704128145C0093604774220611E4148584C584ED848A820
	1C243411DA093709038451C2272293A84BB426BA11F9C4186232318758482C23
	D6128F132F107B8843C437241289433227B9900249B1A454D212D246D26E5223
	E92CA99B34481A2393C9DA646BB20739942C202BC885E49DE4C3E433E41BE421
	F25B0A9D624071A4F853E22852CA6A4A19E510E534E5066598324155A39A52DD
	A8A15411358F5A42ADA1B652AF5187A81334759A39CD8316494BA5ADA295D31A
	681768F769AFE874BA11DD951E4E97D057D2CBE947E897E803F4770C0D861583
	C7886728199B18071867197718AF984CA619D38B19C754303731EB98E7990F99
	6F55582AB62A7C1591CA0A954A9526951B2A2F54A9AAA6AADEAA0B55F355CB54
	8FA95E537DAE46553353E3A909D496AB55AA9D50EB531B5367A93BA887AA67A8
	6F543FA47E59FD890659C34CC34F43A451A0B15FE3BCC6200B6319B3782C216B
	0DAB86758135C426B1CDD97C762ABB98FD1DBB8B3DAAA9A13943334A3357B352
	F394663F07E39871F89C744E09E728A797F37E8ADE14EF29E2291BA6344CB931
	655C6BAA96979658AB48AB51AB47EBBD36AEEDA79DA6BD45BB59FB810E41C74A
	275C2747678FCE059DE753D953DDA70AA7164D3D3AF5AE2EAA6BA51BA1BB4477
	BF6EA7EE989EBE5E809E4C6FA7DE79BDE7FA1C7D2FFD54FD6DFAA7F5470C5806
	B30C2406DB0CCE183CC535716F3C1D2FC7DBF151435DC34043A561956197E184
	91B9D13CA3D5468D460F8C69C65CE324E36DC66DC6A326062621264B4DEA4DEE
	9A524DB9A629A63B4C3B4CC7CDCCCDA2CDD699359B3D31D732E79BE79BD79BDF
	B7605A785A2CB6A8B6B86549B2E45AA659EEB6BC6E855A3959A558555A5DB346
	AD9DAD25D6BBADBBA711A7B94E934EAB9ED667C3B0F1B6C9B6A9B719B0E5D806
	DBAEB66DB67D6167621767B7C5AEC3EE93BD937DBA7D8DFD3D070D87D90EAB1D
	5A1D7E73B472143A563ADE9ACE9CEE3F7DC5F496E92F6758CF10CFD833E3B613
	CB29C4699D539BD347671767B97383F3888B894B82CB2E973E2E9B1BC6DDC8BD
	E44A74F5715DE17AD2F59D9BB39BC2EDA8DBAFEE36EE69EE87DC9FCC349F299E
	593373D0C3C843E051E5D13F0B9F95306BDFAC7E4F434F8167B5E7232F632F91
	57ADD7B0B7A577AAF761EF173EF63E729FE33EE33C37DE32DE595FCC37C0B7C8
	B7CB4FC36F9E5F85DF437F23FF64FF7AFFD100A78025016703898141815B02FB
	F87A7C21BF8E3F3ADB65F6B2D9ED418CA0B94115418F82AD82E5C1AD2168C8EC
	90AD21F7E798CE91CE690E85507EE8D6D00761E6618BC37E0C2785878557863F
	8E7088581AD131973577D1DC4373DF44FA449644DE9B67314F39AF2D4A352A3E
	AA2E6A3CDA37BA34BA3FC62E6659CCD5589D58496C4B1C392E2AAE366E6CBEDF
	FCEDF387E29DE20BE37B17982FC85D7079A1CEC2F485A716A92E122C3A96404C
	884E3894F041102AA8168C25F21377258E0A79C21DC267222FD136D188D8435C
	2A1E4EF2482A4D7A92EC91BC357924C533A52CE5B98427A990BC4C0D4CDD9B3A
	9E169A76206D323D3ABD31839291907142AA214D93B667EA67E66676CBAC6585
	B2FEC56E8BB72F1E9507C96BB390AC05592D0AB642A6E8545A28D72A07B26765
	5766BFCD89CA3996AB9E2BCDEDCCB3CADB90379CEF9FFFED12C212E192B6A586
	4B572D1D58E6BDAC6A39B23C7179DB0AE315052B865606AC3CB88AB62A6DD54F
	ABED5797AE7EBD267A4D6B815EC1CA82C1B5016BEB0B550AE5857DEBDCD7ED5D
	4F582F59DFB561FA869D1B3E15898AAE14DB1797157FD828DC78E51B876FCABF
	99DC94B4A9ABC4B964CF66D266E9E6DE2D9E5B0E96AA97E6970E6E0DD9DAB40D
	DF56B4EDF5F645DB2F97CD28DBBB83B643B9A3BF3CB8BC65A7C9CECD3B3F54A4
	54F454FA5436EED2DDB561D7F86ED1EE1B7BBCF634ECD5DB5BBCF7FD3EC9BEDB
	5501554DD566D565FB49FBB3F73FAE89AAE9F896FB6D5DAD4E6D71EDC703D203
	FD07230EB6D7B9D4D51DD23D54528FD62BEB470EC71FBEFE9DEF772D0D360D55
	8D9CC6E223704479E4E9F709DFF71E0D3ADA768C7BACE107D31F761D671D2F6A
	429AF29A469B539AFB5B625BBA4FCC3ED1D6EADE7AFC47DB1F0F9C343C59794A
	F354C969DAE982D39367F2CF8C9D959D7D7E2EF9DC60DBA2B67BE763CEDF6A0F
	6FEFBA1074E1D245FF8BE73BBC3BCE5CF2B874F2B2DBE51357B8579AAF3A5F6D
	EA74EA3CFE93D34FC7BB9CBB9AAEB95C6BB9EE7ABDB57B66F7E91B9E37CEDDF4
	BD79F116FFD6D59E393DDDBDF37A6FF7C5F7F5DF16DD7E7227FDCECBBBD97727
	EEADBC4FBC5FF440ED41D943DD87D53F5BFEDCD8EFDC7F6AC077A0F3D1DC47F7
	068583CFFE91F58F0F43058F998FCB860D86EB9E383E3939E23F72FDE9FCA743
	CF64CF269E17FEA2FECBAE17162F7EF8D5EBD7CED198D1A197F29793BF6D7CA5
	FDEAC0EB19AFDBC6C2C61EBEC97833315EF456FBEDC177DC771DEFA3DF0F4FE4
	7C207F28FF68F9B1F553D0A7FB93199393FF040398F3FC63332DDB0000002063
	48524D00007A25000080830000F9FF000080E9000075300000EA6000003A9800
	00176F925FC546000001264944415478DAECD4C90DC3300C0440B3FFA2995780
	20BFC4A475CD1660EF0E2445665EF26C023A74E8021DBA40872ED0A10B74E8D0
	053A74810E5DD6458F88DBC53233A0FF887B07ADEBBBCBA27F833C8930F2DF8F
	A37F8E9DE9DA8FE8D58A3E2BF4E8BE6DE811912B408FE8DF82BE3A78F78E72F4
	5DC03BF794A2BFDFC4DDD0AB3795A3EF04DEB5AB0C7DC753DEB5AD147D47F08E
	7DD05745DF1DBC7A2774E8D0A1CF8E7E1D92234EFA4CB7E898E7053A74E8D0A1
	43870E1D3A74E8D0A143870E1D3A74E8D0A143870E1D3A74E8D0A143870E1D3A
	74E8D0A143870E1D3A74E8D0A19F85DE3916FAA243A143870E1D3A74E8D0A143
	870E1D3A74E8D0A143870E1D3A74E8D0A143870E1D3A74E8D0A143870E1D3A74
	E8D0FF1D3A539F0AF417000000FFFF030049D3257989748DF80000000049454E
	44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="49" length_in_bytes="3325" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000005D0000
	00620806000000325DDFBB000000097048597300000EC300000EC301C76FA864
	00000A4F6943435050686F746F73686F70204943432070726F66696C65000078
	DA9D53675453E9163DF7DEF4424B8880944B6F5215082052428B801491262A21
	09104A8821A1D91551C1114545041BC8A088038E8E808C15512C0C8A0AD807E4
	21A28E83A3888ACAFBE17BA36BD6BCF7E6CDFEB5D73EE7ACF39DB3CF07C0080C
	9648335135800CA9421E11E083C7C4C6E1E42E40810A2470001008B3642173FD
	230100F87E3C3C2B22C007BE000178D30B0800C04D9BC0301C87FF0FEA42995C
	01808401C07491384B08801400407A8E42A600404601809D98265300A0040060
	CB6362E300502D0060277FE6D300809DF8997B01005B94211501A09100201365
	884400683B00ACCF568A450058300014664BC43900D82D00304957664800B0B7
	00C0CE100BB200080C00305188852900047B0060C8232378008499001446F257
	3CF12BAE10E72A00007899B23CB9243945815B082D710757572E1E28CE49172B
	14366102619A402EC27999193281340FE0F3CC0000A0911511E083F3FD78CE0E
	AECECE368EB60E5F2DEABF06FF226262E3FEE5CFAB70400000E1747ED1FE2C2F
	B31A803B06806DFEA225EE04685E0BA075F78B66B20F40B500A0E9DA57F370F8
	7E3C3C45A190B9D9D9E5E4E4D84AC4425B61CA577DFE67C25FC057FD6CF97E3C
	FCF7F5E0BEE22481325D814704F8E0C2CCF44CA51CCF92098462DCE68F47FCB7
	0BFFFC1DD322C44962B9582A14E35112718E449A8CF332A52289429229C525D2
	FF64E2DF2CFB033EDF3500B06A3E017B912DA85D6303F64B27105874C0E2F700
	00F2BB6FC1D4280803806883E1CF77FFEF3FFD47A02500806649927100005E44
	242E54CAB33FC708000044A0812AB0411BF4C1182CC0061CC105DCC10BFC6036
	844224C4C24210420A64801C726029AC82422886CDB01D2A602FD4401D34C051
	688693700E2EC255B80E3D700FFA61089EC128BC81090441C808136121DA8801
	628A58238E08179985F821C14804128B2420C9881451224B91354831528A5420
	55481DF23D720239875C46BA913BC8003282FC86BC47319481B2513DD40CB543
	B9A8371A8446A20BD06474319A8F16A09BD072B41A3D8C36A1E7D0AB680FDA8F
	3E43C730C0E8180733C46C302EC6C342B1382C099363CBB122AC0CABC61AB056
	AC03BB89F563CFB17704128145C0093604774220611E4148584C584ED848A820
	1C243411DA093709038451C2272293A84BB426BA11F9C4186232318758482C23
	D6128F132F107B8843C437241289433227B9900249B1A454D212D246D26E5223
	E92CA99B34481A2393C9DA646BB20739942C202BC885E49DE4C3E433E41BE421
	F25B0A9D624071A4F853E22852CA6A4A19E510E534E5066598324155A39A52DD
	A8A15411358F5A42ADA1B652AF5187A81334759A39CD8316494BA5ADA295D31A
	681768F769AFE874BA11DD951E4E97D057D2CBE947E897E803F4770C0D861583
	C7886728199B18071867197718AF984CA619D38B19C754303731EB98E7990F99
	6F55582AB62A7C1591CA0A954A9526951B2A2F54A9AAA6AADEAA0B55F355CB54
	8FA95E537DAE46553353E3A909D496AB55AA9D50EB531B5367A93BA887AA67A8
	6F543FA47E59FD890659C34CC34F43A451A0B15FE3BCC6200B6319B3782C216B
	0DAB86758135C426B1CDD97C762ABB98FD1DBB8B3DAAA9A13943334A3357B352
	F394663F07E39871F89C744E09E728A797F37E8ADE14EF29E2291BA6344CB931
	655C6BAA96979658AB48AB51AB47EBBD36AEEDA79DA6BD45BB59FB810E41C74A
	275C2747678FCE059DE753D953DDA70AA7164D3D3AF5AE2EAA6BA51BA1BB4477
	BF6EA7EE989EBE5E809E4C6FA7DE79BDE7FA1C7D2FFD54FD6DFAA7F5470C5806
	B30C2406DB0CCE183CC535716F3C1D2FC7DBF151435DC34043A561956197E184
	91B9D13CA3D5468D460F8C69C65CE324E36DC66DC6A326062621264B4DEA4DEE
	9A524DB9A629A63B4C3B4CC7CDCCCDA2CDD699359B3D31D732E79BE79BD79BDF
	B7605A785A2CB6A8B6B86549B2E45AA659EEB6BC6E855A3959A558555A5DB346
	AD9DAD25D6BBADBBA711A7B94E934EAB9ED667C3B0F1B6C9B6A9B719B0E5D806
	DBAEB66DB67D6167621767B7C5AEC3EE93BD937DBA7D8DFD3D070D87D90EAB1D
	5A1D7E73B472143A563ADE9ACE9CEE3F7DC5F496E92F6758CF10CFD833E3B613
	CB29C4699D539BD347671767B97383F3888B894B82CB2E973E2E9B1BC6DDC8BD
	E44A74F5715DE17AD2F59D9BB39BC2EDA8DBAFEE36EE69EE87DC9FCC349F299E
	593373D0C3C843E051E5D13F0B9F95306BDFAC7E4F434F8167B5E7232F632F91
	57ADD7B0B7A577AAF761EF173EF63E729FE33EE33C37DE32DE595FCC37C0B7C8
	B7CB4FC36F9E5F85DF437F23FF64FF7AFFD100A78025016703898141815B02FB
	F87A7C21BF8E3F3ADB65F6B2D9ED418CA0B94115418F82AD82E5C1AD2168C8EC
	90AD21F7E798CE91CE690E85507EE8D6D00761E6618BC37E0C2785878557863F
	8E7088581AD131973577D1DC4373DF44FA449644DE9B67314F39AF2D4A352A3E
	AA2E6A3CDA37BA34BA3FC62E6659CCD5589D58496C4B1C392E2AAE366E6CBEDF
	FCEDF387E29DE20BE37B17982FC85D7079A1CEC2F485A716A92E122C3A96404C
	884E3894F041102AA8168C25F21377258E0A79C21DC267222FD136D188D8435C
	2A1E4EF2482A4D7A92EC91BC357924C533A52CE5B98427A990BC4C0D4CDD9B3A
	9E169A76206D323D3ABD31839291907142AA214D93B667EA67E66676CBAC6585
	B2FEC56E8BB72F1E9507C96BB390AC05592D0AB642A6E8545A28D72A07B26765
	5766BFCD89CA3996AB9E2BCDEDCCB3CADB90379CEF9FFFED12C212E192B6A586
	4B572D1D58E6BDAC6A39B23C7179DB0AE315052B865606AC3CB88AB62A6DD54F
	ABED5797AE7EBD267A4D6B815EC1CA82C1B5016BEB0B550AE5857DEBDCD7ED5D
	4F582F59DFB561FA869D1B3E15898AAE14DB1797157FD828DC78E51B876FCABF
	99DC94B4A9ABC4B964CF66D266E9E6DE2D9E5B0E96AA97E6970E6E0DD9DAB40D
	DF56B4EDF5F645DB2F97CD28DBBB83B643B9A3BF3CB8BC65A7C9CECD3B3F54A4
	54F454FA5436EED2DDB561D7F86ED1EE1B7BBCF634ECD5DB5BBCF7FD3EC9BEDB
	5501554DD566D565FB49FBB3F73FAE89AAE9F896FB6D5DAD4E6D71EDC703D203
	FD07230EB6D7B9D4D51DD23D54528FD62BEB470EC71FBEFE9DEF772D0D360D55
	8D9CC6E223704479E4E9F709DFF71E0D3ADA768C7BACE107D31F761D671D2F6A
	429AF29A469B539AFB5B625BBA4FCC3ED1D6EADE7AFC47DB1F0F9C343C59794A
	F354C969DAE982D39367F2CF8C9D959D7D7E2EF9DC60DBA2B67BE763CEDF6A0F
	6FEFBA1074E1D245FF8BE73BBC3BCE5CF2B874F2B2DBE51357B8579AAF3A5F6D
	EA74EA3CFE93D34FC7BB9CBB9AAEB95C6BB9EE7ABDB57B66F7E91B9E37CEDDF4
	BD79F116FFD6D59E393DDDBDF37A6FF7C5F7F5DF16DD7E7227FDCECBBBD97727
	EEADBC4FBC5FF440ED41D943DD87D53F5BFEDCD8EFDC7F6AC077A0F3D1DC47F7
	068583CFFE91F58F0F43058F998FCB860D86EB9E383E3939E23F72FDE9FCA743
	CF64CF269E17FEA2FECBAE17162F7EF8D5EBD7CED198D1A197F29793BF6D7CA5
	FDEAC0EB19AFDBC6C2C61EBEC97833315EF456FBEDC177DC771DEFA3DF0F4FE4
	7C207F28FF68F9B1F553D0A7FB93199393FF040398F3FC63332DDB0000002063
	48524D00007A25000080830000F9FF000080E9000075300000EA6000003A9800
	00176F925FC5460000021E4944415478DAECDC51AF82300C8661FAFF7FF4BC30
	1A24021B6BD7767BB93139F1087DF6651474482965CBB8894829A548CA63CF8A
	9E7913920E3A4927E9A09374920E3AE8D6D8C7BF65C34F99F43D7CC6B433BD80
	7E3D8DB46E5107C51DFD0C57E3B84424E4600C473F227B0CFA7130460FC210F4
	C3892FE254367400CCD0A3437B0E803AFA077B86DB0B9F01D0C65743D7C63E3B
	0936762F21F145A94B780C7E857B55E45D9F7ED572F61CA7067C37FA13F0DEEE
	A1E78AB4A77BD2825741AFF90CAD1394F6BD97D613BE88F8A2DF815B760216B7
	016A07A017FE317A0DB865CF6B7DEFC5B23E13746BF09157CF1635CAC333F9F4
	E096B5AAA25B5D4C78A39FCDF1C3D0574AB955CD6AE833A6DC2AEDAAE833825B
	D40D7A74F455C1B5EB071D74D0418F8EBECAB644D223FDA86899E90574D04107
	1D74D041071D74D041071D74D041071D74D041CF8EBE2FBA66A7DA48DEE816F5
	57A16FDBFBF72C773BDDBF772674EDFAE5FD9EEF07FEBCFEFB87966F8E54562D
	38A16BD5FFCF95A47B249D393DE09C4EF742CB083AE8A0830E3AE8A0830EFA3C
	E85A58A0831E13DDE28109A057EC54F36195A033BDACB31203F4F1CF71041D74
	D041071DF479D08DBB14D047F6D719566387467F72450ABA12780B3CE84C2FA0
	830E7A5C74AF82483A4927E9241D74924ED24127E9241D74929E2EE9DEEB9996
	4CBAF7CA3D37F4ED621DA9D5EBD9C18C5EA34AD2574A3A733ADD0BDD0B7DFA02
	49DF126F2DE8AF01005C1C4FA8F56C3A960000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="50" length_in_bytes="3108" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D49484452000000740000
	006208060000008115F7A1000000097048597300000EC300000EC301C76FA864
	00000A4F6943435050686F746F73686F70204943432070726F66696C65000078
	DA9D53675453E9163DF7DEF4424B8880944B6F5215082052428B801491262A21
	09104A8821A1D91551C1114545041BC8A088038E8E808C15512C0C8A0AD807E4
	21A28E83A3888ACAFBE17BA36BD6BCF7E6CDFEB5D73EE7ACF39DB3CF07C0080C
	9648335135800CA9421E11E083C7C4C6E1E42E40810A2470001008B3642173FD
	230100F87E3C3C2B22C007BE000178D30B0800C04D9BC0301C87FF0FEA42995C
	01808401C07491384B08801400407A8E42A600404601809D98265300A0040060
	CB6362E300502D0060277FE6D300809DF8997B01005B94211501A09100201365
	884400683B00ACCF568A450058300014664BC43900D82D00304957664800B0B7
	00C0CE100BB200080C00305188852900047B0060C8232378008499001446F257
	3CF12BAE10E72A00007899B23CB9243945815B082D710757572E1E28CE49172B
	14366102619A402EC27999193281340FE0F3CC0000A0911511E083F3FD78CE0E
	AECECE368EB60E5F2DEABF06FF226262E3FEE5CFAB70400000E1747ED1FE2C2F
	B31A803B06806DFEA225EE04685E0BA075F78B66B20F40B500A0E9DA57F370F8
	7E3C3C45A190B9D9D9E5E4E4D84AC4425B61CA577DFE67C25FC057FD6CF97E3C
	FCF7F5E0BEE22481325D814704F8E0C2CCF44CA51CCF92098462DCE68F47FCB7
	0BFFFC1DD322C44962B9582A14E35112718E449A8CF332A52289429229C525D2
	FF64E2DF2CFB033EDF3500B06A3E017B912DA85D6303F64B27105874C0E2F700
	00F2BB6FC1D4280803806883E1CF77FFEF3FFD47A02500806649927100005E44
	242E54CAB33FC708000044A0812AB0411BF4C1182CC0061CC105DCC10BFC6036
	844224C4C24210420A64801C726029AC82422886CDB01D2A602FD4401D34C051
	688693700E2EC255B80E3D700FFA61089EC128BC81090441C808136121DA8801
	628A58238E08179985F821C14804128B2420C9881451224B91354831528A5420
	55481DF23D720239875C46BA913BC8003282FC86BC47319481B2513DD40CB543
	B9A8371A8446A20BD06474319A8F16A09BD072B41A3D8C36A1E7D0AB680FDA8F
	3E43C730C0E8180733C46C302EC6C342B1382C099363CBB122AC0CABC61AB056
	AC03BB89F563CFB17704128145C0093604774220611E4148584C584ED848A820
	1C243411DA093709038451C2272293A84BB426BA11F9C4186232318758482C23
	D6128F132F107B8843C437241289433227B9900249B1A454D212D246D26E5223
	E92CA99B34481A2393C9DA646BB20739942C202BC885E49DE4C3E433E41BE421
	F25B0A9D624071A4F853E22852CA6A4A19E510E534E5066598324155A39A52DD
	A8A15411358F5A42ADA1B652AF5187A81334759A39CD8316494BA5ADA295D31A
	681768F769AFE874BA11DD951E4E97D057D2CBE947E897E803F4770C0D861583
	C7886728199B18071867197718AF984CA619D38B19C754303731EB98E7990F99
	6F55582AB62A7C1591CA0A954A9526951B2A2F54A9AAA6AADEAA0B55F355CB54
	8FA95E537DAE46553353E3A909D496AB55AA9D50EB531B5367A93BA887AA67A8
	6F543FA47E59FD890659C34CC34F43A451A0B15FE3BCC6200B6319B3782C216B
	0DAB86758135C426B1CDD97C762ABB98FD1DBB8B3DAAA9A13943334A3357B352
	F394663F07E39871F89C744E09E728A797F37E8ADE14EF29E2291BA6344CB931
	655C6BAA96979658AB48AB51AB47EBBD36AEEDA79DA6BD45BB59FB810E41C74A
	275C2747678FCE059DE753D953DDA70AA7164D3D3AF5AE2EAA6BA51BA1BB4477
	BF6EA7EE989EBE5E809E4C6FA7DE79BDE7FA1C7D2FFD54FD6DFAA7F5470C5806
	B30C2406DB0CCE183CC535716F3C1D2FC7DBF151435DC34043A561956197E184
	91B9D13CA3D5468D460F8C69C65CE324E36DC66DC6A326062621264B4DEA4DEE
	9A524DB9A629A63B4C3B4CC7CDCCCDA2CDD699359B3D31D732E79BE79BD79BDF
	B7605A785A2CB6A8B6B86549B2E45AA659EEB6BC6E855A3959A558555A5DB346
	AD9DAD25D6BBADBBA711A7B94E934EAB9ED667C3B0F1B6C9B6A9B719B0E5D806
	DBAEB66DB67D6167621767B7C5AEC3EE93BD937DBA7D8DFD3D070D87D90EAB1D
	5A1D7E73B472143A563ADE9ACE9CEE3F7DC5F496E92F6758CF10CFD833E3B613
	CB29C4699D539BD347671767B97383F3888B894B82CB2E973E2E9B1BC6DDC8BD
	E44A74F5715DE17AD2F59D9BB39BC2EDA8DBAFEE36EE69EE87DC9FCC349F299E
	593373D0C3C843E051E5D13F0B9F95306BDFAC7E4F434F8167B5E7232F632F91
	57ADD7B0B7A577AAF761EF173EF63E729FE33EE33C37DE32DE595FCC37C0B7C8
	B7CB4FC36F9E5F85DF437F23FF64FF7AFFD100A78025016703898141815B02FB
	F87A7C21BF8E3F3ADB65F6B2D9ED418CA0B94115418F82AD82E5C1AD2168C8EC
	90AD21F7E798CE91CE690E85507EE8D6D00761E6618BC37E0C2785878557863F
	8E7088581AD131973577D1DC4373DF44FA449644DE9B67314F39AF2D4A352A3E
	AA2E6A3CDA37BA34BA3FC62E6659CCD5589D58496C4B1C392E2AAE366E6CBEDF
	FCEDF387E29DE20BE37B17982FC85D7079A1CEC2F485A716A92E122C3A96404C
	884E3894F041102AA8168C25F21377258E0A79C21DC267222FD136D188D8435C
	2A1E4EF2482A4D7A92EC91BC357924C533A52CE5B98427A990BC4C0D4CDD9B3A
	9E169A76206D323D3ABD31839291907142AA214D93B667EA67E66676CBAC6585
	B2FEC56E8BB72F1E9507C96BB390AC05592D0AB642A6E8545A28D72A07B26765
	5766BFCD89CA3996AB9E2BCDEDCCB3CADB90379CEF9FFFED12C212E192B6A586
	4B572D1D58E6BDAC6A39B23C7179DB0AE315052B865606AC3CB88AB62A6DD54F
	ABED5797AE7EBD267A4D6B815EC1CA82C1B5016BEB0B550AE5857DEBDCD7ED5D
	4F582F59DFB561FA869D1B3E15898AAE14DB1797157FD828DC78E51B876FCABF
	99DC94B4A9ABC4B964CF66D266E9E6DE2D9E5B0E96AA97E6970E6E0DD9DAB40D
	DF56B4EDF5F645DB2F97CD28DBBB83B643B9A3BF3CB8BC65A7C9CECD3B3F54A4
	54F454FA5436EED2DDB561D7F86ED1EE1B7BBCF634ECD5DB5BBCF7FD3EC9BEDB
	5501554DD566D565FB49FBB3F73FAE89AAE9F896FB6D5DAD4E6D71EDC703D203
	FD07230EB6D7B9D4D51DD23D54528FD62BEB470EC71FBEFE9DEF772D0D360D55
	8D9CC6E223704479E4E9F709DFF71E0D3ADA768C7BACE107D31F761D671D2F6A
	429AF29A469B539AFB5B625BBA4FCC3ED1D6EADE7AFC47DB1F0F9C343C59794A
	F354C969DAE982D39367F2CF8C9D959D7D7E2EF9DC60DBA2B67BE763CEDF6A0F
	6FEFBA1074E1D245FF8BE73BBC3BCE5CF2B874F2B2DBE51357B8579AAF3A5F6D
	EA74EA3CFE93D34FC7BB9CBB9AAEB95C6BB9EE7ABDB57B66F7E91B9E37CEDDF4
	BD79F116FFD6D59E393DDDBDF37A6FF7C5F7F5DF16DD7E7227FDCECBBBD97727
	EEADBC4FBC5FF440ED41D943DD87D53F5BFEDCD8EFDC7F6AC077A0F3D1DC47F7
	068583CFFE91F58F0F43058F998FCB860D86EB9E383E3939E23F72FDE9FCA743
	CF64CF269E17FEA2FECBAE17162F7EF8D5EBD7CED198D1A197F29793BF6D7CA5
	FDEAC0EB19AFDBC6C2C61EBEC97833315EF456FBEDC177DC771DEFA3DF0F4FE4
	7C207F28FF68F9B1F553D0A7FB93199393FF040398F3FC63332DDB0000002063
	48524D00007A25000080830000F9FF000080E9000075300000EA6000003A9800
	00176F925FC546000001454944415478DAECDC31120241080440F9FFA33132B1
	CA4810D6EDF9C0C174B1E145663EE47F1240810A50012A40052850012A4005A8
	00052A4005A80015A040170E1FD1327C6606D001ACAEE227BF7D3CE8A7F2B65F
	C9D6B97F0EFA5EC4C9CFDBC6FDDA41FF1D70DBFE6DA0AF456E039CEEA5053422
	12E44C47E5A03067BB2A05F5CCCEF7550E0A73B6B33250D7B9A3B7525098F3DD
	01050A73332A50A04081CA79A048BECF1517BAE9FA4FD8132850A0408102050A
	142850A0408102050A142850A0408102050A142850A0408102050A142850A040
	8102050A142850A0408102050A142850A0408102050A14E8A5A09D456E02DDBE
	E7FA7FCEDF72A1653302050A142850A0408102050A142850A0408102050A1428
	50A0408102050A1428502502050A142850A040812A112850A0408102050A5489
	404B4BDC34CF76D027000000FFFF030095FFA9797B8D07AC0000000049454E44
	AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="51" length_in_bytes="3424" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D49484452000000740000
	006208060000008115F7A1000000097048597300000EC300000EC301C76FA864
	00000A4F6943435050686F746F73686F70204943432070726F66696C65000078
	DA9D53675453E9163DF7DEF4424B8880944B6F5215082052428B801491262A21
	09104A8821A1D91551C1114545041BC8A088038E8E808C15512C0C8A0AD807E4
	21A28E83A3888ACAFBE17BA36BD6BCF7E6CDFEB5D73EE7ACF39DB3CF07C0080C
	9648335135800CA9421E11E083C7C4C6E1E42E40810A2470001008B3642173FD
	230100F87E3C3C2B22C007BE000178D30B0800C04D9BC0301C87FF0FEA42995C
	01808401C07491384B08801400407A8E42A600404601809D98265300A0040060
	CB6362E300502D0060277FE6D300809DF8997B01005B94211501A09100201365
	884400683B00ACCF568A450058300014664BC43900D82D00304957664800B0B7
	00C0CE100BB200080C00305188852900047B0060C8232378008499001446F257
	3CF12BAE10E72A00007899B23CB9243945815B082D710757572E1E28CE49172B
	14366102619A402EC27999193281340FE0F3CC0000A0911511E083F3FD78CE0E
	AECECE368EB60E5F2DEABF06FF226262E3FEE5CFAB70400000E1747ED1FE2C2F
	B31A803B06806DFEA225EE04685E0BA075F78B66B20F40B500A0E9DA57F370F8
	7E3C3C45A190B9D9D9E5E4E4D84AC4425B61CA577DFE67C25FC057FD6CF97E3C
	FCF7F5E0BEE22481325D814704F8E0C2CCF44CA51CCF92098462DCE68F47FCB7
	0BFFFC1DD322C44962B9582A14E35112718E449A8CF332A52289429229C525D2
	FF64E2DF2CFB033EDF3500B06A3E017B912DA85D6303F64B27105874C0E2F700
	00F2BB6FC1D4280803806883E1CF77FFEF3FFD47A02500806649927100005E44
	242E54CAB33FC708000044A0812AB0411BF4C1182CC0061CC105DCC10BFC6036
	844224C4C24210420A64801C726029AC82422886CDB01D2A602FD4401D34C051
	688693700E2EC255B80E3D700FFA61089EC128BC81090441C808136121DA8801
	628A58238E08179985F821C14804128B2420C9881451224B91354831528A5420
	55481DF23D720239875C46BA913BC8003282FC86BC47319481B2513DD40CB543
	B9A8371A8446A20BD06474319A8F16A09BD072B41A3D8C36A1E7D0AB680FDA8F
	3E43C730C0E8180733C46C302EC6C342B1382C099363CBB122AC0CABC61AB056
	AC03BB89F563CFB17704128145C0093604774220611E4148584C584ED848A820
	1C243411DA093709038451C2272293A84BB426BA11F9C4186232318758482C23
	D6128F132F107B8843C437241289433227B9900249B1A454D212D246D26E5223
	E92CA99B34481A2393C9DA646BB20739942C202BC885E49DE4C3E433E41BE421
	F25B0A9D624071A4F853E22852CA6A4A19E510E534E5066598324155A39A52DD
	A8A15411358F5A42ADA1B652AF5187A81334759A39CD8316494BA5ADA295D31A
	681768F769AFE874BA11DD951E4E97D057D2CBE947E897E803F4770C0D861583
	C7886728199B18071867197718AF984CA619D38B19C754303731EB98E7990F99
	6F55582AB62A7C1591CA0A954A9526951B2A2F54A9AAA6AADEAA0B55F355CB54
	8FA95E537DAE46553353E3A909D496AB55AA9D50EB531B5367A93BA887AA67A8
	6F543FA47E59FD890659C34CC34F43A451A0B15FE3BCC6200B6319B3782C216B
	0DAB86758135C426B1CDD97C762ABB98FD1DBB8B3DAAA9A13943334A3357B352
	F394663F07E39871F89C744E09E728A797F37E8ADE14EF29E2291BA6344CB931
	655C6BAA96979658AB48AB51AB47EBBD36AEEDA79DA6BD45BB59FB810E41C74A
	275C2747678FCE059DE753D953DDA70AA7164D3D3AF5AE2EAA6BA51BA1BB4477
	BF6EA7EE989EBE5E809E4C6FA7DE79BDE7FA1C7D2FFD54FD6DFAA7F5470C5806
	B30C2406DB0CCE183CC535716F3C1D2FC7DBF151435DC34043A561956197E184
	91B9D13CA3D5468D460F8C69C65CE324E36DC66DC6A326062621264B4DEA4DEE
	9A524DB9A629A63B4C3B4CC7CDCCCDA2CDD699359B3D31D732E79BE79BD79BDF
	B7605A785A2CB6A8B6B86549B2E45AA659EEB6BC6E855A3959A558555A5DB346
	AD9DAD25D6BBADBBA711A7B94E934EAB9ED667C3B0F1B6C9B6A9B719B0E5D806
	DBAEB66DB67D6167621767B7C5AEC3EE93BD937DBA7D8DFD3D070D87D90EAB1D
	5A1D7E73B472143A563ADE9ACE9CEE3F7DC5F496E92F6758CF10CFD833E3B613
	CB29C4699D539BD347671767B97383F3888B894B82CB2E973E2E9B1BC6DDC8BD
	E44A74F5715DE17AD2F59D9BB39BC2EDA8DBAFEE36EE69EE87DC9FCC349F299E
	593373D0C3C843E051E5D13F0B9F95306BDFAC7E4F434F8167B5E7232F632F91
	57ADD7B0B7A577AAF761EF173EF63E729FE33EE33C37DE32DE595FCC37C0B7C8
	B7CB4FC36F9E5F85DF437F23FF64FF7AFFD100A78025016703898141815B02FB
	F87A7C21BF8E3F3ADB65F6B2D9ED418CA0B94115418F82AD82E5C1AD2168C8EC
	90AD21F7E798CE91CE690E85507EE8D6D00761E6618BC37E0C2785878557863F
	8E7088581AD131973577D1DC4373DF44FA449644DE9B67314F39AF2D4A352A3E
	AA2E6A3CDA37BA34BA3FC62E6659CCD5589D58496C4B1C392E2AAE366E6CBEDF
	FCEDF387E29DE20BE37B17982FC85D7079A1CEC2F485A716A92E122C3A96404C
	884E3894F041102AA8168C25F21377258E0A79C21DC267222FD136D188D8435C
	2A1E4EF2482A4D7A92EC91BC357924C533A52CE5B98427A990BC4C0D4CDD9B3A
	9E169A76206D323D3ABD31839291907142AA214D93B667EA67E66676CBAC6585
	B2FEC56E8BB72F1E9507C96BB390AC05592D0AB642A6E8545A28D72A07B26765
	5766BFCD89CA3996AB9E2BCDEDCCB3CADB90379CEF9FFFED12C212E192B6A586
	4B572D1D58E6BDAC6A39B23C7179DB0AE315052B865606AC3CB88AB62A6DD54F
	ABED5797AE7EBD267A4D6B815EC1CA82C1B5016BEB0B550AE5857DEBDCD7ED5D
	4F582F59DFB561FA869D1B3E15898AAE14DB1797157FD828DC78E51B876FCABF
	99DC94B4A9ABC4B964CF66D266E9E6DE2D9E5B0E96AA97E6970E6E0DD9DAB40D
	DF56B4EDF5F645DB2F97CD28DBBB83B643B9A3BF3CB8BC65A7C9CECD3B3F54A4
	54F454FA5436EED2DDB561D7F86ED1EE1B7BBCF634ECD5DB5BBCF7FD3EC9BEDB
	5501554DD566D565FB49FBB3F73FAE89AAE9F896FB6D5DAD4E6D71EDC703D203
	FD07230EB6D7B9D4D51DD23D54528FD62BEB470EC71FBEFE9DEF772D0D360D55
	8D9CC6E223704479E4E9F709DFF71E0D3ADA768C7BACE107D31F761D671D2F6A
	429AF29A469B539AFB5B625BBA4FCC3ED1D6EADE7AFC47DB1F0F9C343C59794A
	F354C969DAE982D39367F2CF8C9D959D7D7E2EF9DC60DBA2B67BE763CEDF6A0F
	6FEFBA1074E1D245FF8BE73BBC3BCE5CF2B874F2B2DBE51357B8579AAF3A5F6D
	EA74EA3CFE93D34FC7BB9CBB9AAEB95C6BB9EE7ABDB57B66F7E91B9E37CEDDF4
	BD79F116FFD6D59E393DDDBDF37A6FF7C5F7F5DF16DD7E7227FDCECBBBD97727
	EEADBC4FBC5FF440ED41D943DD87D53F5BFEDCD8EFDC7F6AC077A0F3D1DC47F7
	068583CFFE91F58F0F43058F998FCB860D86EB9E383E3939E23F72FDE9FCA743
	CF64CF269E17FEA2FECBAE17162F7EF8D5EBD7CED198D1A197F29793BF6D7CA5
	FDEAC0EB19AFDBC6C2C61EBEC97833315EF456FBEDC177DC771DEFA3DF0F4FE4
	7C207F28FF68F9B1F553D0A7FB93199393FF040398F3FC63332DDB0000002063
	48524D00007A25000080830000F9FF000080E9000075300000EA6000003A9800
	00176F925FC546000002814944415478DAECDDDD8EC2201086E172FF178D0766
	37B5910A6506E6E7E5C464E356E0E94729515A6AAD4786524AA9B5D612BE9D59
	40B394424201A5004A4201A5004A420105D423E4F56F91615324F48C1A3DA50C
	B980DA1D4A258B577CB3A0BFC0B4EB5D4A7109BE1DB405677DE46881EF865E0A
	DA987146BB566F455605BD02665D95BA226B02AB80FE41B2AC780FAC012B0ABA
	1AF2D7C4656286EB1656045403B2076BA42346EE437B6E8934DA2A013B0D3A8B
	B962B6A8B152243D3B974215011D39C6CA09C2CDCCBAACFABCD1BED90ADA83B9
	1A5062C8DD093C8B5A2686885B4CCD999C27D02797A81954155089A123C1AD8B
	4AFF3D0205D32EAA28A8B561D603686BF85D064A3A6DA7540C9474DA48A92828
	98B2290514D0315030EDA3020A28A08052FC8152E64B8A845AFA82B4665DD20C
	B980020A28A080020A28A080020A28A080020A28A080020A28A080020A28A0BE
	41CF8DE8F950E9464706D5E8DB2ED0E3787FDFF6D7879EDF0B68DFF1A4FBB6BC
	DFF37FC08FD76FFF30F28D05915F24070495EADB6F6624345A42B98626BB8632
	CBE5B6055040010514504001051450400105D403A8E43259C4A5BF467F010AA8
	32A8F466899140EFFAC6744225B7338D96D056DF30E432E4EA826A164BA0CAED
	B401AADC89D6B66835DD7E40010514504001057411A8F559DE0E504BB37CB567
	9F8DDEB379D8A54CEC5E5173915FF3D9672367571650EDC7478B833E5DCBCD00
	BAE2A1400CB90CB980020AA87FD05D9D95BE8E2494849250120A280925A12494
	849250124A424928A05912BA7BFF86D17688ED831035A1BB77588952C78FBA1C
	37FB1469BDB62AB37A0FA41EC8993A5E4E8425AF24345A42B986720D6596CB2C
	17D094093D1C172B27DD6B008C8F70B992F6140E0000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="52" length_in_bytes="3198" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000005D0000
	00620806000000325DDFBB000000097048597300000EC300000EC301C76FA864
	00000A4F6943435050686F746F73686F70204943432070726F66696C65000078
	DA9D53675453E9163DF7DEF4424B8880944B6F5215082052428B801491262A21
	09104A8821A1D91551C1114545041BC8A088038E8E808C15512C0C8A0AD807E4
	21A28E83A3888ACAFBE17BA36BD6BCF7E6CDFEB5D73EE7ACF39DB3CF07C0080C
	9648335135800CA9421E11E083C7C4C6E1E42E40810A2470001008B3642173FD
	230100F87E3C3C2B22C007BE000178D30B0800C04D9BC0301C87FF0FEA42995C
	01808401C07491384B08801400407A8E42A600404601809D98265300A0040060
	CB6362E300502D0060277FE6D300809DF8997B01005B94211501A09100201365
	884400683B00ACCF568A450058300014664BC43900D82D00304957664800B0B7
	00C0CE100BB200080C00305188852900047B0060C8232378008499001446F257
	3CF12BAE10E72A00007899B23CB9243945815B082D710757572E1E28CE49172B
	14366102619A402EC27999193281340FE0F3CC0000A0911511E083F3FD78CE0E
	AECECE368EB60E5F2DEABF06FF226262E3FEE5CFAB70400000E1747ED1FE2C2F
	B31A803B06806DFEA225EE04685E0BA075F78B66B20F40B500A0E9DA57F370F8
	7E3C3C45A190B9D9D9E5E4E4D84AC4425B61CA577DFE67C25FC057FD6CF97E3C
	FCF7F5E0BEE22481325D814704F8E0C2CCF44CA51CCF92098462DCE68F47FCB7
	0BFFFC1DD322C44962B9582A14E35112718E449A8CF332A52289429229C525D2
	FF64E2DF2CFB033EDF3500B06A3E017B912DA85D6303F64B27105874C0E2F700
	00F2BB6FC1D4280803806883E1CF77FFEF3FFD47A02500806649927100005E44
	242E54CAB33FC708000044A0812AB0411BF4C1182CC0061CC105DCC10BFC6036
	844224C4C24210420A64801C726029AC82422886CDB01D2A602FD4401D34C051
	688693700E2EC255B80E3D700FFA61089EC128BC81090441C808136121DA8801
	628A58238E08179985F821C14804128B2420C9881451224B91354831528A5420
	55481DF23D720239875C46BA913BC8003282FC86BC47319481B2513DD40CB543
	B9A8371A8446A20BD06474319A8F16A09BD072B41A3D8C36A1E7D0AB680FDA8F
	3E43C730C0E8180733C46C302EC6C342B1382C099363CBB122AC0CABC61AB056
	AC03BB89F563CFB17704128145C0093604774220611E4148584C584ED848A820
	1C243411DA093709038451C2272293A84BB426BA11F9C4186232318758482C23
	D6128F132F107B8843C437241289433227B9900249B1A454D212D246D26E5223
	E92CA99B34481A2393C9DA646BB20739942C202BC885E49DE4C3E433E41BE421
	F25B0A9D624071A4F853E22852CA6A4A19E510E534E5066598324155A39A52DD
	A8A15411358F5A42ADA1B652AF5187A81334759A39CD8316494BA5ADA295D31A
	681768F769AFE874BA11DD951E4E97D057D2CBE947E897E803F4770C0D861583
	C7886728199B18071867197718AF984CA619D38B19C754303731EB98E7990F99
	6F55582AB62A7C1591CA0A954A9526951B2A2F54A9AAA6AADEAA0B55F355CB54
	8FA95E537DAE46553353E3A909D496AB55AA9D50EB531B5367A93BA887AA67A8
	6F543FA47E59FD890659C34CC34F43A451A0B15FE3BCC6200B6319B3782C216B
	0DAB86758135C426B1CDD97C762ABB98FD1DBB8B3DAAA9A13943334A3357B352
	F394663F07E39871F89C744E09E728A797F37E8ADE14EF29E2291BA6344CB931
	655C6BAA96979658AB48AB51AB47EBBD36AEEDA79DA6BD45BB59FB810E41C74A
	275C2747678FCE059DE753D953DDA70AA7164D3D3AF5AE2EAA6BA51BA1BB4477
	BF6EA7EE989EBE5E809E4C6FA7DE79BDE7FA1C7D2FFD54FD6DFAA7F5470C5806
	B30C2406DB0CCE183CC535716F3C1D2FC7DBF151435DC34043A561956197E184
	91B9D13CA3D5468D460F8C69C65CE324E36DC66DC6A326062621264B4DEA4DEE
	9A524DB9A629A63B4C3B4CC7CDCCCDA2CDD699359B3D31D732E79BE79BD79BDF
	B7605A785A2CB6A8B6B86549B2E45AA659EEB6BC6E855A3959A558555A5DB346
	AD9DAD25D6BBADBBA711A7B94E934EAB9ED667C3B0F1B6C9B6A9B719B0E5D806
	DBAEB66DB67D6167621767B7C5AEC3EE93BD937DBA7D8DFD3D070D87D90EAB1D
	5A1D7E73B472143A563ADE9ACE9CEE3F7DC5F496E92F6758CF10CFD833E3B613
	CB29C4699D539BD347671767B97383F3888B894B82CB2E973E2E9B1BC6DDC8BD
	E44A74F5715DE17AD2F59D9BB39BC2EDA8DBAFEE36EE69EE87DC9FCC349F299E
	593373D0C3C843E051E5D13F0B9F95306BDFAC7E4F434F8167B5E7232F632F91
	57ADD7B0B7A577AAF761EF173EF63E729FE33EE33C37DE32DE595FCC37C0B7C8
	B7CB4FC36F9E5F85DF437F23FF64FF7AFFD100A78025016703898141815B02FB
	F87A7C21BF8E3F3ADB65F6B2D9ED418CA0B94115418F82AD82E5C1AD2168C8EC
	90AD21F7E798CE91CE690E85507EE8D6D00761E6618BC37E0C2785878557863F
	8E7088581AD131973577D1DC4373DF44FA449644DE9B67314F39AF2D4A352A3E
	AA2E6A3CDA37BA34BA3FC62E6659CCD5589D58496C4B1C392E2AAE366E6CBEDF
	FCEDF387E29DE20BE37B17982FC85D7079A1CEC2F485A716A92E122C3A96404C
	884E3894F041102AA8168C25F21377258E0A79C21DC267222FD136D188D8435C
	2A1E4EF2482A4D7A92EC91BC357924C533A52CE5B98427A990BC4C0D4CDD9B3A
	9E169A76206D323D3ABD31839291907142AA214D93B667EA67E66676CBAC6585
	B2FEC56E8BB72F1E9507C96BB390AC05592D0AB642A6E8545A28D72A07B26765
	5766BFCD89CA3996AB9E2BCDEDCCB3CADB90379CEF9FFFED12C212E192B6A586
	4B572D1D58E6BDAC6A39B23C7179DB0AE315052B865606AC3CB88AB62A6DD54F
	ABED5797AE7EBD267A4D6B815EC1CA82C1B5016BEB0B550AE5857DEBDCD7ED5D
	4F582F59DFB561FA869D1B3E15898AAE14DB1797157FD828DC78E51B876FCABF
	99DC94B4A9ABC4B964CF66D266E9E6DE2D9E5B0E96AA97E6970E6E0DD9DAB40D
	DF56B4EDF5F645DB2F97CD28DBBB83B643B9A3BF3CB8BC65A7C9CECD3B3F54A4
	54F454FA5436EED2DDB561D7F86ED1EE1B7BBCF634ECD5DB5BBCF7FD3EC9BEDB
	5501554DD566D565FB49FBB3F73FAE89AAE9F896FB6D5DAD4E6D71EDC703D203
	FD07230EB6D7B9D4D51DD23D54528FD62BEB470EC71FBEFE9DEF772D0D360D55
	8D9CC6E223704479E4E9F709DFF71E0D3ADA768C7BACE107D31F761D671D2F6A
	429AF29A469B539AFB5B625BBA4FCC3ED1D6EADE7AFC47DB1F0F9C343C59794A
	F354C969DAE982D39367F2CF8C9D959D7D7E2EF9DC60DBA2B67BE763CEDF6A0F
	6FEFBA1074E1D245FF8BE73BBC3BCE5CF2B874F2B2DBE51357B8579AAF3A5F6D
	EA74EA3CFE93D34FC7BB9CBB9AAEB95C6BB9EE7ABDB57B66F7E91B9E37CEDDF4
	BD79F116FFD6D59E393DDDBDF37A6FF7C5F7F5DF16DD7E7227FDCECBBBD97727
	EEADBC4FBC5FF440ED41D943DD87D53F5BFEDCD8EFDC7F6AC077A0F3D1DC47F7
	068583CFFE91F58F0F43058F998FCB860D86EB9E383E3939E23F72FDE9FCA743
	CF64CF269E17FEA2FECBAE17162F7EF8D5EBD7CED198D1A197F29793BF6D7CA5
	FDEAC0EB19AFDBC6C2C61EBEC97833315EF456FBEDC177DC771DEFA3DF0F4FE4
	7C207F28FF68F9B1F553D0A7FB93199393FF040398F3FC63332DDB0000002063
	48524D00007A25000080830000F9FF000080E9000075300000EA6000003A9800
	00176F925FC5460000019F4944415478DAECDDD10E8220140660CEFB3F34DDE4
	569B051522273F6EBA2043BFFD9ED04D8C5A6BC9D822A2D65A23CB3E3DF64556
	F41543504A29EFD0B7FE90F471E0DDDF97744957D3B5F10188882AE967EC3B74
	49FF6AA6902DF12993FE08BF02B89A9E61DF4B29A62F67A09B364E3D43A18F82
	EC35842EE992AE49BAA46B23928E62E1DB00F7ABC0D66916931253278F35ECB8
	53A2CFBEF77279F433EE324ABAF202FD52E893A779D0A143870E1D3A74E8D0A1
	43870E1D3A74E8D0A143870E1D3A74E8D0A143870E1D3A74E8D0A1436FA13FAD
	DEF0C1E0999FF33CFAB8BBD04BB9AF53D239786BED932CE8471DF7F624C6F6C3
	4F9F7B1BB4067FB14D64C31E75DC7BAE927E46D2D5F4056BBAD98B292374E8D0
	A143870E1D3A74E8D0A143870E1D3A74E8D0A143870E1DFADAE816D9816EE134
	E807C35B225079F91DFDD377B2697D25AF896EF1E3AFCE0CE89390A14BBAA443
	97744987BE44D2114E9EA72F9E262F819D0DDE93A8B302D00A8497C04A7ACEF2
	F2F74957D335495F6D1F5EF54BFA803FF55DD8777D923E6E16D57BA124E9927E
	8D9A7E030000FFFF03006636C5A4A6C9E3110000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="53" length_in_bytes="3136" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000005D0000
	00620806000000325DDFBB000000097048597300000EC300000EC301C76FA864
	00000A4F6943435050686F746F73686F70204943432070726F66696C65000078
	DA9D53675453E9163DF7DEF4424B8880944B6F5215082052428B801491262A21
	09104A8821A1D91551C1114545041BC8A088038E8E808C15512C0C8A0AD807E4
	21A28E83A3888ACAFBE17BA36BD6BCF7E6CDFEB5D73EE7ACF39DB3CF07C0080C
	9648335135800CA9421E11E083C7C4C6E1E42E40810A2470001008B3642173FD
	230100F87E3C3C2B22C007BE000178D30B0800C04D9BC0301C87FF0FEA42995C
	01808401C07491384B08801400407A8E42A600404601809D98265300A0040060
	CB6362E300502D0060277FE6D300809DF8997B01005B94211501A09100201365
	884400683B00ACCF568A450058300014664BC43900D82D00304957664800B0B7
	00C0CE100BB200080C00305188852900047B0060C8232378008499001446F257
	3CF12BAE10E72A00007899B23CB9243945815B082D710757572E1E28CE49172B
	14366102619A402EC27999193281340FE0F3CC0000A0911511E083F3FD78CE0E
	AECECE368EB60E5F2DEABF06FF226262E3FEE5CFAB70400000E1747ED1FE2C2F
	B31A803B06806DFEA225EE04685E0BA075F78B66B20F40B500A0E9DA57F370F8
	7E3C3C45A190B9D9D9E5E4E4D84AC4425B61CA577DFE67C25FC057FD6CF97E3C
	FCF7F5E0BEE22481325D814704F8E0C2CCF44CA51CCF92098462DCE68F47FCB7
	0BFFFC1DD322C44962B9582A14E35112718E449A8CF332A52289429229C525D2
	FF64E2DF2CFB033EDF3500B06A3E017B912DA85D6303F64B27105874C0E2F700
	00F2BB6FC1D4280803806883E1CF77FFEF3FFD47A02500806649927100005E44
	242E54CAB33FC708000044A0812AB0411BF4C1182CC0061CC105DCC10BFC6036
	844224C4C24210420A64801C726029AC82422886CDB01D2A602FD4401D34C051
	688693700E2EC255B80E3D700FFA61089EC128BC81090441C808136121DA8801
	628A58238E08179985F821C14804128B2420C9881451224B91354831528A5420
	55481DF23D720239875C46BA913BC8003282FC86BC47319481B2513DD40CB543
	B9A8371A8446A20BD06474319A8F16A09BD072B41A3D8C36A1E7D0AB680FDA8F
	3E43C730C0E8180733C46C302EC6C342B1382C099363CBB122AC0CABC61AB056
	AC03BB89F563CFB17704128145C0093604774220611E4148584C584ED848A820
	1C243411DA093709038451C2272293A84BB426BA11F9C4186232318758482C23
	D6128F132F107B8843C437241289433227B9900249B1A454D212D246D26E5223
	E92CA99B34481A2393C9DA646BB20739942C202BC885E49DE4C3E433E41BE421
	F25B0A9D624071A4F853E22852CA6A4A19E510E534E5066598324155A39A52DD
	A8A15411358F5A42ADA1B652AF5187A81334759A39CD8316494BA5ADA295D31A
	681768F769AFE874BA11DD951E4E97D057D2CBE947E897E803F4770C0D861583
	C7886728199B18071867197718AF984CA619D38B19C754303731EB98E7990F99
	6F55582AB62A7C1591CA0A954A9526951B2A2F54A9AAA6AADEAA0B55F355CB54
	8FA95E537DAE46553353E3A909D496AB55AA9D50EB531B5367A93BA887AA67A8
	6F543FA47E59FD890659C34CC34F43A451A0B15FE3BCC6200B6319B3782C216B
	0DAB86758135C426B1CDD97C762ABB98FD1DBB8B3DAAA9A13943334A3357B352
	F394663F07E39871F89C744E09E728A797F37E8ADE14EF29E2291BA6344CB931
	655C6BAA96979658AB48AB51AB47EBBD36AEEDA79DA6BD45BB59FB810E41C74A
	275C2747678FCE059DE753D953DDA70AA7164D3D3AF5AE2EAA6BA51BA1BB4477
	BF6EA7EE989EBE5E809E4C6FA7DE79BDE7FA1C7D2FFD54FD6DFAA7F5470C5806
	B30C2406DB0CCE183CC535716F3C1D2FC7DBF151435DC34043A561956197E184
	91B9D13CA3D5468D460F8C69C65CE324E36DC66DC6A326062621264B4DEA4DEE
	9A524DB9A629A63B4C3B4CC7CDCCCDA2CDD699359B3D31D732E79BE79BD79BDF
	B7605A785A2CB6A8B6B86549B2E45AA659EEB6BC6E855A3959A558555A5DB346
	AD9DAD25D6BBADBBA711A7B94E934EAB9ED667C3B0F1B6C9B6A9B719B0E5D806
	DBAEB66DB67D6167621767B7C5AEC3EE93BD937DBA7D8DFD3D070D87D90EAB1D
	5A1D7E73B472143A563ADE9ACE9CEE3F7DC5F496E92F6758CF10CFD833E3B613
	CB29C4699D539BD347671767B97383F3888B894B82CB2E973E2E9B1BC6DDC8BD
	E44A74F5715DE17AD2F59D9BB39BC2EDA8DBAFEE36EE69EE87DC9FCC349F299E
	593373D0C3C843E051E5D13F0B9F95306BDFAC7E4F434F8167B5E7232F632F91
	57ADD7B0B7A577AAF761EF173EF63E729FE33EE33C37DE32DE595FCC37C0B7C8
	B7CB4FC36F9E5F85DF437F23FF64FF7AFFD100A78025016703898141815B02FB
	F87A7C21BF8E3F3ADB65F6B2D9ED418CA0B94115418F82AD82E5C1AD2168C8EC
	90AD21F7E798CE91CE690E85507EE8D6D00761E6618BC37E0C2785878557863F
	8E7088581AD131973577D1DC4373DF44FA449644DE9B67314F39AF2D4A352A3E
	AA2E6A3CDA37BA34BA3FC62E6659CCD5589D58496C4B1C392E2AAE366E6CBEDF
	FCEDF387E29DE20BE37B17982FC85D7079A1CEC2F485A716A92E122C3A96404C
	884E3894F041102AA8168C25F21377258E0A79C21DC267222FD136D188D8435C
	2A1E4EF2482A4D7A92EC91BC357924C533A52CE5B98427A990BC4C0D4CDD9B3A
	9E169A76206D323D3ABD31839291907142AA214D93B667EA67E66676CBAC6585
	B2FEC56E8BB72F1E9507C96BB390AC05592D0AB642A6E8545A28D72A07B26765
	5766BFCD89CA3996AB9E2BCDEDCCB3CADB90379CEF9FFFED12C212E192B6A586
	4B572D1D58E6BDAC6A39B23C7179DB0AE315052B865606AC3CB88AB62A6DD54F
	ABED5797AE7EBD267A4D6B815EC1CA82C1B5016BEB0B550AE5857DEBDCD7ED5D
	4F582F59DFB561FA869D1B3E15898AAE14DB1797157FD828DC78E51B876FCABF
	99DC94B4A9ABC4B964CF66D266E9E6DE2D9E5B0E96AA97E6970E6E0DD9DAB40D
	DF56B4EDF5F645DB2F97CD28DBBB83B643B9A3BF3CB8BC65A7C9CECD3B3F54A4
	54F454FA5436EED2DDB561D7F86ED1EE1B7BBCF634ECD5DB5BBCF7FD3EC9BEDB
	5501554DD566D565FB49FBB3F73FAE89AAE9F896FB6D5DAD4E6D71EDC703D203
	FD07230EB6D7B9D4D51DD23D54528FD62BEB470EC71FBEFE9DEF772D0D360D55
	8D9CC6E223704479E4E9F709DFF71E0D3ADA768C7BACE107D31F761D671D2F6A
	429AF29A469B539AFB5B625BBA4FCC3ED1D6EADE7AFC47DB1F0F9C343C59794A
	F354C969DAE982D39367F2CF8C9D959D7D7E2EF9DC60DBA2B67BE763CEDF6A0F
	6FEFBA1074E1D245FF8BE73BBC3BCE5CF2B874F2B2DBE51357B8579AAF3A5F6D
	EA74EA3CFE93D34FC7BB9CBB9AAEB95C6BB9EE7ABDB57B66F7E91B9E37CEDDF4
	BD79F116FFD6D59E393DDDBDF37A6FF7C5F7F5DF16DD7E7227FDCECBBBD97727
	EEADBC4FBC5FF440ED41D943DD87D53F5BFEDCD8EFDC7F6AC077A0F3D1DC47F7
	068583CFFE91F58F0F43058F998FCB860D86EB9E383E3939E23F72FDE9FCA743
	CF64CF269E17FEA2FECBAE17162F7EF8D5EBD7CED198D1A197F29793BF6D7CA5
	FDEAC0EB19AFDBC6C2C61EBEC97833315EF456FBEDC177DC771DEFA3DF0F4FE4
	7C207F28FF68F9B1F553D0A7FB93199393FF040398F3FC63332DDB0000002063
	48524D00007A25000080830000F9FF000080E9000075300000EA6000003A9800
	00176F925FC546000001614944415478DAECDC410E82301005D099FB1F7ADC48
	22090A9A5298F8FEC60562E1E5D35412C8AA8A8EC9CCAAAAEC724CAFDBB22BFA
	1D4B1011F1097DD99E9A3E0EFCF0F7355DD3CDE932BE0099599A7EC5B143D7F4
	9F560ADD1ADFB2E9AFF0770037A77738F688B07CB902DDB271EA150A7D14E451
	43E89AAEE9A2E99A2E239A8EE2C6B7019EFF02F72EB39CD4989A3CD6B0F36E89
	3EFBDECBDFA35F719751D34D2FD0FF0A7DF2320F3A74E8D0A143870E1D3A74E8
	D0A143870E1D3A74E8D0A143870E1D3A74E8D0A143870E1D3A74E87BE8ABB737
	7C3178E7E73CCF3EEF43E811CFF7941C1C7CEFDD275DD0CF3AEFE5498CE58757
	9F5B3BEC0DFE669FEC863DEABCB75C35FD8AA69BD36F38A75BBD583242870E1D
	3A74E8D0A143870E1D3A74E8D0A143870E1D3A74E8D0A143870E1D3A74E8D087
	A3876CE634741974E540870E5DA04317E8D0053A74810E1DBA40872ED0A10B74
	E81211110F000000FFFF0300A0AD17A4821D366E0000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="54" length_in_bytes="3135" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000005D0000
	00620806000000325DDFBB000000097048597300000EC300000EC301C76FA864
	00000A4F6943435050686F746F73686F70204943432070726F66696C65000078
	DA9D53675453E9163DF7DEF4424B8880944B6F5215082052428B801491262A21
	09104A8821A1D91551C1114545041BC8A088038E8E808C15512C0C8A0AD807E4
	21A28E83A3888ACAFBE17BA36BD6BCF7E6CDFEB5D73EE7ACF39DB3CF07C0080C
	9648335135800CA9421E11E083C7C4C6E1E42E40810A2470001008B3642173FD
	230100F87E3C3C2B22C007BE000178D30B0800C04D9BC0301C87FF0FEA42995C
	01808401C07491384B08801400407A8E42A600404601809D98265300A0040060
	CB6362E300502D0060277FE6D300809DF8997B01005B94211501A09100201365
	884400683B00ACCF568A450058300014664BC43900D82D00304957664800B0B7
	00C0CE100BB200080C00305188852900047B0060C8232378008499001446F257
	3CF12BAE10E72A00007899B23CB9243945815B082D710757572E1E28CE49172B
	14366102619A402EC27999193281340FE0F3CC0000A0911511E083F3FD78CE0E
	AECECE368EB60E5F2DEABF06FF226262E3FEE5CFAB70400000E1747ED1FE2C2F
	B31A803B06806DFEA225EE04685E0BA075F78B66B20F40B500A0E9DA57F370F8
	7E3C3C45A190B9D9D9E5E4E4D84AC4425B61CA577DFE67C25FC057FD6CF97E3C
	FCF7F5E0BEE22481325D814704F8E0C2CCF44CA51CCF92098462DCE68F47FCB7
	0BFFFC1DD322C44962B9582A14E35112718E449A8CF332A52289429229C525D2
	FF64E2DF2CFB033EDF3500B06A3E017B912DA85D6303F64B27105874C0E2F700
	00F2BB6FC1D4280803806883E1CF77FFEF3FFD47A02500806649927100005E44
	242E54CAB33FC708000044A0812AB0411BF4C1182CC0061CC105DCC10BFC6036
	844224C4C24210420A64801C726029AC82422886CDB01D2A602FD4401D34C051
	688693700E2EC255B80E3D700FFA61089EC128BC81090441C808136121DA8801
	628A58238E08179985F821C14804128B2420C9881451224B91354831528A5420
	55481DF23D720239875C46BA913BC8003282FC86BC47319481B2513DD40CB543
	B9A8371A8446A20BD06474319A8F16A09BD072B41A3D8C36A1E7D0AB680FDA8F
	3E43C730C0E8180733C46C302EC6C342B1382C099363CBB122AC0CABC61AB056
	AC03BB89F563CFB17704128145C0093604774220611E4148584C584ED848A820
	1C243411DA093709038451C2272293A84BB426BA11F9C4186232318758482C23
	D6128F132F107B8843C437241289433227B9900249B1A454D212D246D26E5223
	E92CA99B34481A2393C9DA646BB20739942C202BC885E49DE4C3E433E41BE421
	F25B0A9D624071A4F853E22852CA6A4A19E510E534E5066598324155A39A52DD
	A8A15411358F5A42ADA1B652AF5187A81334759A39CD8316494BA5ADA295D31A
	681768F769AFE874BA11DD951E4E97D057D2CBE947E897E803F4770C0D861583
	C7886728199B18071867197718AF984CA619D38B19C754303731EB98E7990F99
	6F55582AB62A7C1591CA0A954A9526951B2A2F54A9AAA6AADEAA0B55F355CB54
	8FA95E537DAE46553353E3A909D496AB55AA9D50EB531B5367A93BA887AA67A8
	6F543FA47E59FD890659C34CC34F43A451A0B15FE3BCC6200B6319B3782C216B
	0DAB86758135C426B1CDD97C762ABB98FD1DBB8B3DAAA9A13943334A3357B352
	F394663F07E39871F89C744E09E728A797F37E8ADE14EF29E2291BA6344CB931
	655C6BAA96979658AB48AB51AB47EBBD36AEEDA79DA6BD45BB59FB810E41C74A
	275C2747678FCE059DE753D953DDA70AA7164D3D3AF5AE2EAA6BA51BA1BB4477
	BF6EA7EE989EBE5E809E4C6FA7DE79BDE7FA1C7D2FFD54FD6DFAA7F5470C5806
	B30C2406DB0CCE183CC535716F3C1D2FC7DBF151435DC34043A561956197E184
	91B9D13CA3D5468D460F8C69C65CE324E36DC66DC6A326062621264B4DEA4DEE
	9A524DB9A629A63B4C3B4CC7CDCCCDA2CDD699359B3D31D732E79BE79BD79BDF
	B7605A785A2CB6A8B6B86549B2E45AA659EEB6BC6E855A3959A558555A5DB346
	AD9DAD25D6BBADBBA711A7B94E934EAB9ED667C3B0F1B6C9B6A9B719B0E5D806
	DBAEB66DB67D6167621767B7C5AEC3EE93BD937DBA7D8DFD3D070D87D90EAB1D
	5A1D7E73B472143A563ADE9ACE9CEE3F7DC5F496E92F6758CF10CFD833E3B613
	CB29C4699D539BD347671767B97383F3888B894B82CB2E973E2E9B1BC6DDC8BD
	E44A74F5715DE17AD2F59D9BB39BC2EDA8DBAFEE36EE69EE87DC9FCC349F299E
	593373D0C3C843E051E5D13F0B9F95306BDFAC7E4F434F8167B5E7232F632F91
	57ADD7B0B7A577AAF761EF173EF63E729FE33EE33C37DE32DE595FCC37C0B7C8
	B7CB4FC36F9E5F85DF437F23FF64FF7AFFD100A78025016703898141815B02FB
	F87A7C21BF8E3F3ADB65F6B2D9ED418CA0B94115418F82AD82E5C1AD2168C8EC
	90AD21F7E798CE91CE690E85507EE8D6D00761E6618BC37E0C2785878557863F
	8E7088581AD131973577D1DC4373DF44FA449644DE9B67314F39AF2D4A352A3E
	AA2E6A3CDA37BA34BA3FC62E6659CCD5589D58496C4B1C392E2AAE366E6CBEDF
	FCEDF387E29DE20BE37B17982FC85D7079A1CEC2F485A716A92E122C3A96404C
	884E3894F041102AA8168C25F21377258E0A79C21DC267222FD136D188D8435C
	2A1E4EF2482A4D7A92EC91BC357924C533A52CE5B98427A990BC4C0D4CDD9B3A
	9E169A76206D323D3ABD31839291907142AA214D93B667EA67E66676CBAC6585
	B2FEC56E8BB72F1E9507C96BB390AC05592D0AB642A6E8545A28D72A07B26765
	5766BFCD89CA3996AB9E2BCDEDCCB3CADB90379CEF9FFFED12C212E192B6A586
	4B572D1D58E6BDAC6A39B23C7179DB0AE315052B865606AC3CB88AB62A6DD54F
	ABED5797AE7EBD267A4D6B815EC1CA82C1B5016BEB0B550AE5857DEBDCD7ED5D
	4F582F59DFB561FA869D1B3E15898AAE14DB1797157FD828DC78E51B876FCABF
	99DC94B4A9ABC4B964CF66D266E9E6DE2D9E5B0E96AA97E6970E6E0DD9DAB40D
	DF56B4EDF5F645DB2F97CD28DBBB83B643B9A3BF3CB8BC65A7C9CECD3B3F54A4
	54F454FA5436EED2DDB561D7F86ED1EE1B7BBCF634ECD5DB5BBCF7FD3EC9BEDB
	5501554DD566D565FB49FBB3F73FAE89AAE9F896FB6D5DAD4E6D71EDC703D203
	FD07230EB6D7B9D4D51DD23D54528FD62BEB470EC71FBEFE9DEF772D0D360D55
	8D9CC6E223704479E4E9F709DFF71E0D3ADA768C7BACE107D31F761D671D2F6A
	429AF29A469B539AFB5B625BBA4FCC3ED1D6EADE7AFC47DB1F0F9C343C59794A
	F354C969DAE982D39367F2CF8C9D959D7D7E2EF9DC60DBA2B67BE763CEDF6A0F
	6FEFBA1074E1D245FF8BE73BBC3BCE5CF2B874F2B2DBE51357B8579AAF3A5F6D
	EA74EA3CFE93D34FC7BB9CBB9AAEB95C6BB9EE7ABDB57B66F7E91B9E37CEDDF4
	BD79F116FFD6D59E393DDDBDF37A6FF7C5F7F5DF16DD7E7227FDCECBBBD97727
	EEADBC4FBC5FF440ED41D943DD87D53F5BFEDCD8EFDC7F6AC077A0F3D1DC47F7
	068583CFFE91F58F0F43058F998FCB860D86EB9E383E3939E23F72FDE9FCA743
	CF64CF269E17FEA2FECBAE17162F7EF8D5EBD7CED198D1A197F29793BF6D7CA5
	FDEAC0EB19AFDBC6C2C61EBEC97833315EF456FBEDC177DC771DEFA3DF0F4FE4
	7C207F28FF68F9B1F553D0A7FB93199393FF040398F3FC63332DDB0000002063
	48524D00007A25000080830000F9FF000080E9000075300000EA6000003A9800
	00176F925FC546000001604944415478DAECDC410E82301005D099FB1F7ADC48
	A209280A52465E372C40DABE7C9AC184665545C796995555D9654C8FE7B22BFA
	19431011F10A7D3A9F92BE1FF8EAEB255DD2ADE9DAFE01C8CC92F41163872EE9
	5F550ADD12DF32E98FF06700B7A677187B44285F46A02B1B0F7D42A1EF05B9D6
	10BAA44BBAF6EBA4A338F1CBD1BD365E7ABCF2E0C4D4A03E37CFBF25FAA837D2
	CBA28FFCEFE5D249B7BC40BF0EFAA0720F3A74E8D0A143870E1D3A74E8D0A143
	870E1D3A74E8D0A143870E1D3A74E8D0A143870E1D3A74E8D0A15F1BFD69F786
	159D76FEBEF3A8F9AF428FB8EF53F2A6D3777B9E7445DF7BFED33747D30D9F8E
	733F58EA74E1DAEC8EBD75FE73AE923E22E9D6F413AEE9AA17252374E8D0A143
	870E1D3A74E8D0A143870E1D3A74E8D0A143870E1D3A74E8D0A143870E1D3A74
	E8D0A143870E1D3A74E8D0A143870E1D3A74E8D0A143870E1D3A74E8FF831EDA
	6CFB04FD060000FFFF03005C3938AFF8208F010000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="55" length_in_bytes="3246" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000005D0000
	00620806000000325DDFBB000000097048597300000EC300000EC301C76FA864
	00000A4F6943435050686F746F73686F70204943432070726F66696C65000078
	DA9D53675453E9163DF7DEF4424B8880944B6F5215082052428B801491262A21
	09104A8821A1D91551C1114545041BC8A088038E8E808C15512C0C8A0AD807E4
	21A28E83A3888ACAFBE17BA36BD6BCF7E6CDFEB5D73EE7ACF39DB3CF07C0080C
	9648335135800CA9421E11E083C7C4C6E1E42E40810A2470001008B3642173FD
	230100F87E3C3C2B22C007BE000178D30B0800C04D9BC0301C87FF0FEA42995C
	01808401C07491384B08801400407A8E42A600404601809D98265300A0040060
	CB6362E300502D0060277FE6D300809DF8997B01005B94211501A09100201365
	884400683B00ACCF568A450058300014664BC43900D82D00304957664800B0B7
	00C0CE100BB200080C00305188852900047B0060C8232378008499001446F257
	3CF12BAE10E72A00007899B23CB9243945815B082D710757572E1E28CE49172B
	14366102619A402EC27999193281340FE0F3CC0000A0911511E083F3FD78CE0E
	AECECE368EB60E5F2DEABF06FF226262E3FEE5CFAB70400000E1747ED1FE2C2F
	B31A803B06806DFEA225EE04685E0BA075F78B66B20F40B500A0E9DA57F370F8
	7E3C3C45A190B9D9D9E5E4E4D84AC4425B61CA577DFE67C25FC057FD6CF97E3C
	FCF7F5E0BEE22481325D814704F8E0C2CCF44CA51CCF92098462DCE68F47FCB7
	0BFFFC1DD322C44962B9582A14E35112718E449A8CF332A52289429229C525D2
	FF64E2DF2CFB033EDF3500B06A3E017B912DA85D6303F64B27105874C0E2F700
	00F2BB6FC1D4280803806883E1CF77FFEF3FFD47A02500806649927100005E44
	242E54CAB33FC708000044A0812AB0411BF4C1182CC0061CC105DCC10BFC6036
	844224C4C24210420A64801C726029AC82422886CDB01D2A602FD4401D34C051
	688693700E2EC255B80E3D700FFA61089EC128BC81090441C808136121DA8801
	628A58238E08179985F821C14804128B2420C9881451224B91354831528A5420
	55481DF23D720239875C46BA913BC8003282FC86BC47319481B2513DD40CB543
	B9A8371A8446A20BD06474319A8F16A09BD072B41A3D8C36A1E7D0AB680FDA8F
	3E43C730C0E8180733C46C302EC6C342B1382C099363CBB122AC0CABC61AB056
	AC03BB89F563CFB17704128145C0093604774220611E4148584C584ED848A820
	1C243411DA093709038451C2272293A84BB426BA11F9C4186232318758482C23
	D6128F132F107B8843C437241289433227B9900249B1A454D212D246D26E5223
	E92CA99B34481A2393C9DA646BB20739942C202BC885E49DE4C3E433E41BE421
	F25B0A9D624071A4F853E22852CA6A4A19E510E534E5066598324155A39A52DD
	A8A15411358F5A42ADA1B652AF5187A81334759A39CD8316494BA5ADA295D31A
	681768F769AFE874BA11DD951E4E97D057D2CBE947E897E803F4770C0D861583
	C7886728199B18071867197718AF984CA619D38B19C754303731EB98E7990F99
	6F55582AB62A7C1591CA0A954A9526951B2A2F54A9AAA6AADEAA0B55F355CB54
	8FA95E537DAE46553353E3A909D496AB55AA9D50EB531B5367A93BA887AA67A8
	6F543FA47E59FD890659C34CC34F43A451A0B15FE3BCC6200B6319B3782C216B
	0DAB86758135C426B1CDD97C762ABB98FD1DBB8B3DAAA9A13943334A3357B352
	F394663F07E39871F89C744E09E728A797F37E8ADE14EF29E2291BA6344CB931
	655C6BAA96979658AB48AB51AB47EBBD36AEEDA79DA6BD45BB59FB810E41C74A
	275C2747678FCE059DE753D953DDA70AA7164D3D3AF5AE2EAA6BA51BA1BB4477
	BF6EA7EE989EBE5E809E4C6FA7DE79BDE7FA1C7D2FFD54FD6DFAA7F5470C5806
	B30C2406DB0CCE183CC535716F3C1D2FC7DBF151435DC34043A561956197E184
	91B9D13CA3D5468D460F8C69C65CE324E36DC66DC6A326062621264B4DEA4DEE
	9A524DB9A629A63B4C3B4CC7CDCCCDA2CDD699359B3D31D732E79BE79BD79BDF
	B7605A785A2CB6A8B6B86549B2E45AA659EEB6BC6E855A3959A558555A5DB346
	AD9DAD25D6BBADBBA711A7B94E934EAB9ED667C3B0F1B6C9B6A9B719B0E5D806
	DBAEB66DB67D6167621767B7C5AEC3EE93BD937DBA7D8DFD3D070D87D90EAB1D
	5A1D7E73B472143A563ADE9ACE9CEE3F7DC5F496E92F6758CF10CFD833E3B613
	CB29C4699D539BD347671767B97383F3888B894B82CB2E973E2E9B1BC6DDC8BD
	E44A74F5715DE17AD2F59D9BB39BC2EDA8DBAFEE36EE69EE87DC9FCC349F299E
	593373D0C3C843E051E5D13F0B9F95306BDFAC7E4F434F8167B5E7232F632F91
	57ADD7B0B7A577AAF761EF173EF63E729FE33EE33C37DE32DE595FCC37C0B7C8
	B7CB4FC36F9E5F85DF437F23FF64FF7AFFD100A78025016703898141815B02FB
	F87A7C21BF8E3F3ADB65F6B2D9ED418CA0B94115418F82AD82E5C1AD2168C8EC
	90AD21F7E798CE91CE690E85507EE8D6D00761E6618BC37E0C2785878557863F
	8E7088581AD131973577D1DC4373DF44FA449644DE9B67314F39AF2D4A352A3E
	AA2E6A3CDA37BA34BA3FC62E6659CCD5589D58496C4B1C392E2AAE366E6CBEDF
	FCEDF387E29DE20BE37B17982FC85D7079A1CEC2F485A716A92E122C3A96404C
	884E3894F041102AA8168C25F21377258E0A79C21DC267222FD136D188D8435C
	2A1E4EF2482A4D7A92EC91BC357924C533A52CE5B98427A990BC4C0D4CDD9B3A
	9E169A76206D323D3ABD31839291907142AA214D93B667EA67E66676CBAC6585
	B2FEC56E8BB72F1E9507C96BB390AC05592D0AB642A6E8545A28D72A07B26765
	5766BFCD89CA3996AB9E2BCDEDCCB3CADB90379CEF9FFFED12C212E192B6A586
	4B572D1D58E6BDAC6A39B23C7179DB0AE315052B865606AC3CB88AB62A6DD54F
	ABED5797AE7EBD267A4D6B815EC1CA82C1B5016BEB0B550AE5857DEBDCD7ED5D
	4F582F59DFB561FA869D1B3E15898AAE14DB1797157FD828DC78E51B876FCABF
	99DC94B4A9ABC4B964CF66D266E9E6DE2D9E5B0E96AA97E6970E6E0DD9DAB40D
	DF56B4EDF5F645DB2F97CD28DBBB83B643B9A3BF3CB8BC65A7C9CECD3B3F54A4
	54F454FA5436EED2DDB561D7F86ED1EE1B7BBCF634ECD5DB5BBCF7FD3EC9BEDB
	5501554DD566D565FB49FBB3F73FAE89AAE9F896FB6D5DAD4E6D71EDC703D203
	FD07230EB6D7B9D4D51DD23D54528FD62BEB470EC71FBEFE9DEF772D0D360D55
	8D9CC6E223704479E4E9F709DFF71E0D3ADA768C7BACE107D31F761D671D2F6A
	429AF29A469B539AFB5B625BBA4FCC3ED1D6EADE7AFC47DB1F0F9C343C59794A
	F354C969DAE982D39367F2CF8C9D959D7D7E2EF9DC60DBA2B67BE763CEDF6A0F
	6FEFBA1074E1D245FF8BE73BBC3BCE5CF2B874F2B2DBE51357B8579AAF3A5F6D
	EA74EA3CFE93D34FC7BB9CBB9AAEB95C6BB9EE7ABDB57B66F7E91B9E37CEDDF4
	BD79F116FFD6D59E393DDDBDF37A6FF7C5F7F5DF16DD7E7227FDCECBBBD97727
	EEADBC4FBC5FF440ED41D943DD87D53F5BFEDCD8EFDC7F6AC077A0F3D1DC47F7
	068583CFFE91F58F0F43058F998FCB860D86EB9E383E3939E23F72FDE9FCA743
	CF64CF269E17FEA2FECBAE17162F7EF8D5EBD7CED198D1A197F29793BF6D7CA5
	FDEAC0EB19AFDBC6C2C61EBEC97833315EF456FBEDC177DC771DEFA3DF0F4FE4
	7C207F28FF68F9B1F553D0A7FB93199393FF040398F3FC63332DDB0000002063
	48524D00007A25000080830000F9FF000080E9000075300000EA6000003A9800
	00176F925FC546000001CF4944415478DAECDCDBAEC220100550E6FF3F9AF3A2
	8926BD2A387058BCF8E0A565653B199A96A8B596194744D45A6BCC724EAFEFC5
	ACE82386A094528ED09FEF87A4B703BFFC7949977435DD681F8088A8929E71EE
	D025FDA34E61B6C44F99F457F811C0D5F419CEBD94A27DC940D736FEF41F0ABD
	15E45543E8922EE946EFA4A3187871F4E88DF7FE5ED129199BFD78469FDE6AFE
	53A267AD489745CFBCF6B274D29517E8EBA027B57BD0A143870E1D3A74E8D0A1
	43870E1D3A74E8D0A143870E1D3A74E8D0A143870E1D3A74E8D0A143870E7D6D
	F4B7DD1B2E1CB43552367A8FF95F422FE5B14FC9C941CFF63C9915BDF5FC9FCF
	1C3D7FF0ED75EB0B7B07DDF96CCC8ADE6AFE5BAE929E9174357DC09AAE7BD132
	42870E1D3A74E8D0A143FF3FE8ADB0A0431F13BDF58609D02F1EB4E5D620D095
	97FEE87777C0EF359643CFDE54AD673B3A05FA9DADF0A04BBAA4439774DDCBF2
	DDCB2FFBEB8C8B69239797B80BF9C98A14FA9727F6497980FE65D29517355DD2
	A1EFA09F81F5B8F207FDE046C8CB37494AFAFEEF948D5BA533162D922EE96ABA
	9651CB382EBAA44BBAA4434F4C7AF6F34C4B263DFBC9BDA11647BD5F0F165B9B
	13EABD3093F41592AEA6EB5E742FFAF405925E261E77D0FF0600F1D6DEBE9C52
	B6650000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="56" length_in_bytes="3358" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D49484452000000740000
	006208060000008115F7A1000000097048597300000EC300000EC301C76FA864
	00000A4F6943435050686F746F73686F70204943432070726F66696C65000078
	DA9D53675453E9163DF7DEF4424B8880944B6F5215082052428B801491262A21
	09104A8821A1D91551C1114545041BC8A088038E8E808C15512C0C8A0AD807E4
	21A28E83A3888ACAFBE17BA36BD6BCF7E6CDFEB5D73EE7ACF39DB3CF07C0080C
	9648335135800CA9421E11E083C7C4C6E1E42E40810A2470001008B3642173FD
	230100F87E3C3C2B22C007BE000178D30B0800C04D9BC0301C87FF0FEA42995C
	01808401C07491384B08801400407A8E42A600404601809D98265300A0040060
	CB6362E300502D0060277FE6D300809DF8997B01005B94211501A09100201365
	884400683B00ACCF568A450058300014664BC43900D82D00304957664800B0B7
	00C0CE100BB200080C00305188852900047B0060C8232378008499001446F257
	3CF12BAE10E72A00007899B23CB9243945815B082D710757572E1E28CE49172B
	14366102619A402EC27999193281340FE0F3CC0000A0911511E083F3FD78CE0E
	AECECE368EB60E5F2DEABF06FF226262E3FEE5CFAB70400000E1747ED1FE2C2F
	B31A803B06806DFEA225EE04685E0BA075F78B66B20F40B500A0E9DA57F370F8
	7E3C3C45A190B9D9D9E5E4E4D84AC4425B61CA577DFE67C25FC057FD6CF97E3C
	FCF7F5E0BEE22481325D814704F8E0C2CCF44CA51CCF92098462DCE68F47FCB7
	0BFFFC1DD322C44962B9582A14E35112718E449A8CF332A52289429229C525D2
	FF64E2DF2CFB033EDF3500B06A3E017B912DA85D6303F64B27105874C0E2F700
	00F2BB6FC1D4280803806883E1CF77FFEF3FFD47A02500806649927100005E44
	242E54CAB33FC708000044A0812AB0411BF4C1182CC0061CC105DCC10BFC6036
	844224C4C24210420A64801C726029AC82422886CDB01D2A602FD4401D34C051
	688693700E2EC255B80E3D700FFA61089EC128BC81090441C808136121DA8801
	628A58238E08179985F821C14804128B2420C9881451224B91354831528A5420
	55481DF23D720239875C46BA913BC8003282FC86BC47319481B2513DD40CB543
	B9A8371A8446A20BD06474319A8F16A09BD072B41A3D8C36A1E7D0AB680FDA8F
	3E43C730C0E8180733C46C302EC6C342B1382C099363CBB122AC0CABC61AB056
	AC03BB89F563CFB17704128145C0093604774220611E4148584C584ED848A820
	1C243411DA093709038451C2272293A84BB426BA11F9C4186232318758482C23
	D6128F132F107B8843C437241289433227B9900249B1A454D212D246D26E5223
	E92CA99B34481A2393C9DA646BB20739942C202BC885E49DE4C3E433E41BE421
	F25B0A9D624071A4F853E22852CA6A4A19E510E534E5066598324155A39A52DD
	A8A15411358F5A42ADA1B652AF5187A81334759A39CD8316494BA5ADA295D31A
	681768F769AFE874BA11DD951E4E97D057D2CBE947E897E803F4770C0D861583
	C7886728199B18071867197718AF984CA619D38B19C754303731EB98E7990F99
	6F55582AB62A7C1591CA0A954A9526951B2A2F54A9AAA6AADEAA0B55F355CB54
	8FA95E537DAE46553353E3A909D496AB55AA9D50EB531B5367A93BA887AA67A8
	6F543FA47E59FD890659C34CC34F43A451A0B15FE3BCC6200B6319B3782C216B
	0DAB86758135C426B1CDD97C762ABB98FD1DBB8B3DAAA9A13943334A3357B352
	F394663F07E39871F89C744E09E728A797F37E8ADE14EF29E2291BA6344CB931
	655C6BAA96979658AB48AB51AB47EBBD36AEEDA79DA6BD45BB59FB810E41C74A
	275C2747678FCE059DE753D953DDA70AA7164D3D3AF5AE2EAA6BA51BA1BB4477
	BF6EA7EE989EBE5E809E4C6FA7DE79BDE7FA1C7D2FFD54FD6DFAA7F5470C5806
	B30C2406DB0CCE183CC535716F3C1D2FC7DBF151435DC34043A561956197E184
	91B9D13CA3D5468D460F8C69C65CE324E36DC66DC6A326062621264B4DEA4DEE
	9A524DB9A629A63B4C3B4CC7CDCCCDA2CDD699359B3D31D732E79BE79BD79BDF
	B7605A785A2CB6A8B6B86549B2E45AA659EEB6BC6E855A3959A558555A5DB346
	AD9DAD25D6BBADBBA711A7B94E934EAB9ED667C3B0F1B6C9B6A9B719B0E5D806
	DBAEB66DB67D6167621767B7C5AEC3EE93BD937DBA7D8DFD3D070D87D90EAB1D
	5A1D7E73B472143A563ADE9ACE9CEE3F7DC5F496E92F6758CF10CFD833E3B613
	CB29C4699D539BD347671767B97383F3888B894B82CB2E973E2E9B1BC6DDC8BD
	E44A74F5715DE17AD2F59D9BB39BC2EDA8DBAFEE36EE69EE87DC9FCC349F299E
	593373D0C3C843E051E5D13F0B9F95306BDFAC7E4F434F8167B5E7232F632F91
	57ADD7B0B7A577AAF761EF173EF63E729FE33EE33C37DE32DE595FCC37C0B7C8
	B7CB4FC36F9E5F85DF437F23FF64FF7AFFD100A78025016703898141815B02FB
	F87A7C21BF8E3F3ADB65F6B2D9ED418CA0B94115418F82AD82E5C1AD2168C8EC
	90AD21F7E798CE91CE690E85507EE8D6D00761E6618BC37E0C2785878557863F
	8E7088581AD131973577D1DC4373DF44FA449644DE9B67314F39AF2D4A352A3E
	AA2E6A3CDA37BA34BA3FC62E6659CCD5589D58496C4B1C392E2AAE366E6CBEDF
	FCEDF387E29DE20BE37B17982FC85D7079A1CEC2F485A716A92E122C3A96404C
	884E3894F041102AA8168C25F21377258E0A79C21DC267222FD136D188D8435C
	2A1E4EF2482A4D7A92EC91BC357924C533A52CE5B98427A990BC4C0D4CDD9B3A
	9E169A76206D323D3ABD31839291907142AA214D93B667EA67E66676CBAC6585
	B2FEC56E8BB72F1E9507C96BB390AC05592D0AB642A6E8545A28D72A07B26765
	5766BFCD89CA3996AB9E2BCDEDCCB3CADB90379CEF9FFFED12C212E192B6A586
	4B572D1D58E6BDAC6A39B23C7179DB0AE315052B865606AC3CB88AB62A6DD54F
	ABED5797AE7EBD267A4D6B815EC1CA82C1B5016BEB0B550AE5857DEBDCD7ED5D
	4F582F59DFB561FA869D1B3E15898AAE14DB1797157FD828DC78E51B876FCABF
	99DC94B4A9ABC4B964CF66D266E9E6DE2D9E5B0E96AA97E6970E6E0DD9DAB40D
	DF56B4EDF5F645DB2F97CD28DBBB83B643B9A3BF3CB8BC65A7C9CECD3B3F54A4
	54F454FA5436EED2DDB561D7F86ED1EE1B7BBCF634ECD5DB5BBCF7FD3EC9BEDB
	5501554DD566D565FB49FBB3F73FAE89AAE9F896FB6D5DAD4E6D71EDC703D203
	FD07230EB6D7B9D4D51DD23D54528FD62BEB470EC71FBEFE9DEF772D0D360D55
	8D9CC6E223704479E4E9F709DFF71E0D3ADA768C7BACE107D31F761D671D2F6A
	429AF29A469B539AFB5B625BBA4FCC3ED1D6EADE7AFC47DB1F0F9C343C59794A
	F354C969DAE982D39367F2CF8C9D959D7D7E2EF9DC60DBA2B67BE763CEDF6A0F
	6FEFBA1074E1D245FF8BE73BBC3BCE5CF2B874F2B2DBE51357B8579AAF3A5F6D
	EA74EA3CFE93D34FC7BB9CBB9AAEB95C6BB9EE7ABDB57B66F7E91B9E37CEDDF4
	BD79F116FFD6D59E393DDDBDF37A6FF7C5F7F5DF16DD7E7227FDCECBBBD97727
	EEADBC4FBC5FF440ED41D943DD87D53F5BFEDCD8EFDC7F6AC077A0F3D1DC47F7
	068583CFFE91F58F0F43058F998FCB860D86EB9E383E3939E23F72FDE9FCA743
	CF64CF269E17FEA2FECBAE17162F7EF8D5EBD7CED198D1A197F29793BF6D7CA5
	FDEAC0EB19AFDBC6C2C61EBEC97833315EF456FBEDC177DC771DEFA3DF0F4FE4
	7C207F28FF68F9B1F553D0A7FB93199393FF040398F3FC63332DDB0000002063
	48524D00007A25000080830000F9FF000080E9000075300000EA6000003A9800
	00176F925FC5460000023F4944415478DAECDDCB92C220140540F8FF8FC68D56
	A995A742029766E322CE48E81C0894925C4A4933949C7329A5E488F57F3F9667
	011DFD624C29A52DD0D7F12CA163601E7EBF844AA8841A43952B2EC49C7391D0
	68E709544287BF4B8C9CD42912FA8E3A1AA684CE3E86A694DCE64603357509D3
	0B011D01E9A80F5009552454B93EA19A62D28585E75C6EAD5BC89D5FBD5DCF43
	6BB5ED14A023AC1401FD01B36754A0BA5CA04003810E30E5000A142850A04015
	A00A50A040810205AA00557A0455FE2F5324B4A745F5967599A6CB050A142850
	A0408102050A142850A0408102050A142850A04081021D1BF463A7C7031F5AFB
	A42383B668DB43A0293DF762DDF9D0BD7D5D81B66FDBD71E0BAF7FF8F1BAF407
	67BEB150E3E42382D66ADB2533098D965063E86463A8BB5CD316A0408102050A
	142850A04081021D01B4E63259C4A5BF95F6020AB43168EDCD1223816EB54DD7
	09ADB99D69B484AEB58D2E57977B1EF4ECD3655B959E407B6F8F5DD0BB1F30D0
	D3FE0D23B407D0CE41BF1FF3015442814A28D07112EA2E37D05DEE9573B61176
	29AB36576CB9C8DF02F49795A25940CFB6CD37FEDEC5501DF4D7B5DC1940AF78
	28902EB7F32EF7F684020D3886020D98D0BB1A2B4A1D77E1568E4B68A709DDFA
	71D2E63109EDAF8E6716304EFF9C50422554428DA112DAFDB445426FAAA3844A
	A8844AE8FE7BEED8BFE1EC7954DB07216A42EFDE61254A1D3FEA9236F6296AF5
	BA31495E6CACB509F51590FFD47169E2DFFA5542A325D4186A0C7597EB2E17E8
	94094D03975E2EBAC70064A5B1D1C28EBC8D0000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="57" length_in_bytes="3238" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D49484452000000630000
	0062080600000044676D30000000097048597300000EC300000EC301C76FA864
	00000A4F6943435050686F746F73686F70204943432070726F66696C65000078
	DA9D53675453E9163DF7DEF4424B8880944B6F5215082052428B801491262A21
	09104A8821A1D91551C1114545041BC8A088038E8E808C15512C0C8A0AD807E4
	21A28E83A3888ACAFBE17BA36BD6BCF7E6CDFEB5D73EE7ACF39DB3CF07C0080C
	9648335135800CA9421E11E083C7C4C6E1E42E40810A2470001008B3642173FD
	230100F87E3C3C2B22C007BE000178D30B0800C04D9BC0301C87FF0FEA42995C
	01808401C07491384B08801400407A8E42A600404601809D98265300A0040060
	CB6362E300502D0060277FE6D300809DF8997B01005B94211501A09100201365
	884400683B00ACCF568A450058300014664BC43900D82D00304957664800B0B7
	00C0CE100BB200080C00305188852900047B0060C8232378008499001446F257
	3CF12BAE10E72A00007899B23CB9243945815B082D710757572E1E28CE49172B
	14366102619A402EC27999193281340FE0F3CC0000A0911511E083F3FD78CE0E
	AECECE368EB60E5F2DEABF06FF226262E3FEE5CFAB70400000E1747ED1FE2C2F
	B31A803B06806DFEA225EE04685E0BA075F78B66B20F40B500A0E9DA57F370F8
	7E3C3C45A190B9D9D9E5E4E4D84AC4425B61CA577DFE67C25FC057FD6CF97E3C
	FCF7F5E0BEE22481325D814704F8E0C2CCF44CA51CCF92098462DCE68F47FCB7
	0BFFFC1DD322C44962B9582A14E35112718E449A8CF332A52289429229C525D2
	FF64E2DF2CFB033EDF3500B06A3E017B912DA85D6303F64B27105874C0E2F700
	00F2BB6FC1D4280803806883E1CF77FFEF3FFD47A02500806649927100005E44
	242E54CAB33FC708000044A0812AB0411BF4C1182CC0061CC105DCC10BFC6036
	844224C4C24210420A64801C726029AC82422886CDB01D2A602FD4401D34C051
	688693700E2EC255B80E3D700FFA61089EC128BC81090441C808136121DA8801
	628A58238E08179985F821C14804128B2420C9881451224B91354831528A5420
	55481DF23D720239875C46BA913BC8003282FC86BC47319481B2513DD40CB543
	B9A8371A8446A20BD06474319A8F16A09BD072B41A3D8C36A1E7D0AB680FDA8F
	3E43C730C0E8180733C46C302EC6C342B1382C099363CBB122AC0CABC61AB056
	AC03BB89F563CFB17704128145C0093604774220611E4148584C584ED848A820
	1C243411DA093709038451C2272293A84BB426BA11F9C4186232318758482C23
	D6128F132F107B8843C437241289433227B9900249B1A454D212D246D26E5223
	E92CA99B34481A2393C9DA646BB20739942C202BC885E49DE4C3E433E41BE421
	F25B0A9D624071A4F853E22852CA6A4A19E510E534E5066598324155A39A52DD
	A8A15411358F5A42ADA1B652AF5187A81334759A39CD8316494BA5ADA295D31A
	681768F769AFE874BA11DD951E4E97D057D2CBE947E897E803F4770C0D861583
	C7886728199B18071867197718AF984CA619D38B19C754303731EB98E7990F99
	6F55582AB62A7C1591CA0A954A9526951B2A2F54A9AAA6AADEAA0B55F355CB54
	8FA95E537DAE46553353E3A909D496AB55AA9D50EB531B5367A93BA887AA67A8
	6F543FA47E59FD890659C34CC34F43A451A0B15FE3BCC6200B6319B3782C216B
	0DAB86758135C426B1CDD97C762ABB98FD1DBB8B3DAAA9A13943334A3357B352
	F394663F07E39871F89C744E09E728A797F37E8ADE14EF29E2291BA6344CB931
	655C6BAA96979658AB48AB51AB47EBBD36AEEDA79DA6BD45BB59FB810E41C74A
	275C2747678FCE059DE753D953DDA70AA7164D3D3AF5AE2EAA6BA51BA1BB4477
	BF6EA7EE989EBE5E809E4C6FA7DE79BDE7FA1C7D2FFD54FD6DFAA7F5470C5806
	B30C2406DB0CCE183CC535716F3C1D2FC7DBF151435DC34043A561956197E184
	91B9D13CA3D5468D460F8C69C65CE324E36DC66DC6A326062621264B4DEA4DEE
	9A524DB9A629A63B4C3B4CC7CDCCCDA2CDD699359B3D31D732E79BE79BD79BDF
	B7605A785A2CB6A8B6B86549B2E45AA659EEB6BC6E855A3959A558555A5DB346
	AD9DAD25D6BBADBBA711A7B94E934EAB9ED667C3B0F1B6C9B6A9B719B0E5D806
	DBAEB66DB67D6167621767B7C5AEC3EE93BD937DBA7D8DFD3D070D87D90EAB1D
	5A1D7E73B472143A563ADE9ACE9CEE3F7DC5F496E92F6758CF10CFD833E3B613
	CB29C4699D539BD347671767B97383F3888B894B82CB2E973E2E9B1BC6DDC8BD
	E44A74F5715DE17AD2F59D9BB39BC2EDA8DBAFEE36EE69EE87DC9FCC349F299E
	593373D0C3C843E051E5D13F0B9F95306BDFAC7E4F434F8167B5E7232F632F91
	57ADD7B0B7A577AAF761EF173EF63E729FE33EE33C37DE32DE595FCC37C0B7C8
	B7CB4FC36F9E5F85DF437F23FF64FF7AFFD100A78025016703898141815B02FB
	F87A7C21BF8E3F3ADB65F6B2D9ED418CA0B94115418F82AD82E5C1AD2168C8EC
	90AD21F7E798CE91CE690E85507EE8D6D00761E6618BC37E0C2785878557863F
	8E7088581AD131973577D1DC4373DF44FA449644DE9B67314F39AF2D4A352A3E
	AA2E6A3CDA37BA34BA3FC62E6659CCD5589D58496C4B1C392E2AAE366E6CBEDF
	FCEDF387E29DE20BE37B17982FC85D7079A1CEC2F485A716A92E122C3A96404C
	884E3894F041102AA8168C25F21377258E0A79C21DC267222FD136D188D8435C
	2A1E4EF2482A4D7A92EC91BC357924C533A52CE5B98427A990BC4C0D4CDD9B3A
	9E169A76206D323D3ABD31839291907142AA214D93B667EA67E66676CBAC6585
	B2FEC56E8BB72F1E9507C96BB390AC05592D0AB642A6E8545A28D72A07B26765
	5766BFCD89CA3996AB9E2BCDEDCCB3CADB90379CEF9FFFED12C212E192B6A586
	4B572D1D58E6BDAC6A39B23C7179DB0AE315052B865606AC3CB88AB62A6DD54F
	ABED5797AE7EBD267A4D6B815EC1CA82C1B5016BEB0B550AE5857DEBDCD7ED5D
	4F582F59DFB561FA869D1B3E15898AAE14DB1797157FD828DC78E51B876FCABF
	99DC94B4A9ABC4B964CF66D266E9E6DE2D9E5B0E96AA97E6970E6E0DD9DAB40D
	DF56B4EDF5F645DB2F97CD28DBBB83B643B9A3BF3CB8BC65A7C9CECD3B3F54A4
	54F454FA5436EED2DDB561D7F86ED1EE1B7BBCF634ECD5DB5BBCF7FD3EC9BEDB
	5501554DD566D565FB49FBB3F73FAE89AAE9F896FB6D5DAD4E6D71EDC703D203
	FD07230EB6D7B9D4D51DD23D54528FD62BEB470EC71FBEFE9DEF772D0D360D55
	8D9CC6E223704479E4E9F709DFF71E0D3ADA768C7BACE107D31F761D671D2F6A
	429AF29A469B539AFB5B625BBA4FCC3ED1D6EADE7AFC47DB1F0F9C343C59794A
	F354C969DAE982D39367F2CF8C9D959D7D7E2EF9DC60DBA2B67BE763CEDF6A0F
	6FEFBA1074E1D245FF8BE73BBC3BCE5CF2B874F2B2DBE51357B8579AAF3A5F6D
	EA74EA3CFE93D34FC7BB9CBB9AAEB95C6BB9EE7ABDB57B66F7E91B9E37CEDDF4
	BD79F116FFD6D59E393DDDBDF37A6FF7C5F7F5DF16DD7E7227FDCECBBBD97727
	EEADBC4FBC5FF440ED41D943DD87D53F5BFEDCD8EFDC7F6AC077A0F3D1DC47F7
	068583CFFE91F58F0F43058F998FCB860D86EB9E383E3939E23F72FDE9FCA743
	CF64CF269E17FEA2FECBAE17162F7EF8D5EBD7CED198D1A197F29793BF6D7CA5
	FDEAC0EB19AFDBC6C2C61EBEC97833315EF456FBEDC177DC771DEFA3DF0F4FE4
	7C207F28FF68F9B1F553D0A7FB93199393FF040398F3FC63332DDB0000002063
	48524D00007A25000080830000F9FF000080E9000075300000EA6000003A9800
	00176F925FC546000001C74944415478DAECDDCD720221104561B1E62DE7FD7C
	4DB2229558C948323F36CD77375AA50BE07080462D4BADF59635A5945A6B2D47
	BDEFECDCBF36282B903DAF5FDAD68C66EC19E0771AF209238AAA6740D9EA57CF
	7B2E5FA6B281E8ED57A47EA7DE33DA40FFD6B74856A4DD33464DFAD3548F194E
	53C20C664857969FAE04DAF33D8F231C71A3D556A5D6FA4DD7231A370A8C7066
	3C0FDC91B325C212584AD99C3491202DCF4BD34C6B74B4FEDE67DE30A32DA753
	C3600633C0600633FE7FB48D76A53C9B19D3147D2300595A837AAF436E72AE19
	BD793C1EE161ACEBDA55FDB7CA3CE4C7AE02868C0863EBC20F8CEB4F3D600818
	60081802061802061872258C19AAE26160F86AA8650A0C01038C8871851E28AE
	D0050C30642E182AF6403054EC962930040C30040C30048C29B264EDD8880526
	3398717AA53FE4BD8B9F1E83C1203098C18C2960EC3DBE32E3D899CD8C2C051B
	332E98F1CC709A028319CC008319CC008319CC00831960308319603083196030
	83196030831960308319603083196030A3B5C76FB3991162B6334398C10C6186
	3A2358EDB035D051FF1C32659DD133E323FEE760BA3DE3AF831CC98E941BF8AB
	65C832F5867D6314235A3E000000FFFF030016D74EC70B659EBF000000004945
	4E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="58" length_in_bytes="1100" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D49484452000000630000
	0062080300000073B99D020000000774494D4507DF0B1B091C0AD6076A190000
	00097048597300000E7400000E74016B24B3D600000300504C5445000000A5A5
	A5FF0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF83C3012100
	00000374524E53FFFF00D7CA0D41000000C64944415478DAED9AD90A80300C04
	A3FEFF3F0B82E051EDA65E21CEEA93A42EE3267DA9D69765FDB94CAE3CACB0AA
	87A995471EE653588E37F2A8AF9B6BF4CA670547388EE9DE5CF2E4691CA539BD
	63BAB76FDB3F1D6A727194CA740F3D0F387EC571B177358E6B33A8E7E1D84156
	1EDAB42F6B3A55CE8D148FFD7A3CBECF238B4796CCE9AB581E5932A7AF627964
	C99CBE8AE5912573FA2A9647963CE080030E38E080030E38E080038EE7D5E401
	C71F39CCB3BACD633E16D40E3BDBBE95EF8F83B01CCE3C4614A93F3303064929
	0000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="59" length_in_bytes="3020" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D49484452000000630000
	0062080600000044676D30000000097048597300000EC300000EC301C76FA864
	00000A4F6943435050686F746F73686F70204943432070726F66696C65000078
	DA9D53675453E9163DF7DEF4424B8880944B6F5215082052428B801491262A21
	09104A8821A1D91551C1114545041BC8A088038E8E808C15512C0C8A0AD807E4
	21A28E83A3888ACAFBE17BA36BD6BCF7E6CDFEB5D73EE7ACF39DB3CF07C0080C
	9648335135800CA9421E11E083C7C4C6E1E42E40810A2470001008B3642173FD
	230100F87E3C3C2B22C007BE000178D30B0800C04D9BC0301C87FF0FEA42995C
	01808401C07491384B08801400407A8E42A600404601809D98265300A0040060
	CB6362E300502D0060277FE6D300809DF8997B01005B94211501A09100201365
	884400683B00ACCF568A450058300014664BC43900D82D00304957664800B0B7
	00C0CE100BB200080C00305188852900047B0060C8232378008499001446F257
	3CF12BAE10E72A00007899B23CB9243945815B082D710757572E1E28CE49172B
	14366102619A402EC27999193281340FE0F3CC0000A0911511E083F3FD78CE0E
	AECECE368EB60E5F2DEABF06FF226262E3FEE5CFAB70400000E1747ED1FE2C2F
	B31A803B06806DFEA225EE04685E0BA075F78B66B20F40B500A0E9DA57F370F8
	7E3C3C45A190B9D9D9E5E4E4D84AC4425B61CA577DFE67C25FC057FD6CF97E3C
	FCF7F5E0BEE22481325D814704F8E0C2CCF44CA51CCF92098462DCE68F47FCB7
	0BFFFC1DD322C44962B9582A14E35112718E449A8CF332A52289429229C525D2
	FF64E2DF2CFB033EDF3500B06A3E017B912DA85D6303F64B27105874C0E2F700
	00F2BB6FC1D4280803806883E1CF77FFEF3FFD47A02500806649927100005E44
	242E54CAB33FC708000044A0812AB0411BF4C1182CC0061CC105DCC10BFC6036
	844224C4C24210420A64801C726029AC82422886CDB01D2A602FD4401D34C051
	688693700E2EC255B80E3D700FFA61089EC128BC81090441C808136121DA8801
	628A58238E08179985F821C14804128B2420C9881451224B91354831528A5420
	55481DF23D720239875C46BA913BC8003282FC86BC47319481B2513DD40CB543
	B9A8371A8446A20BD06474319A8F16A09BD072B41A3D8C36A1E7D0AB680FDA8F
	3E43C730C0E8180733C46C302EC6C342B1382C099363CBB122AC0CABC61AB056
	AC03BB89F563CFB17704128145C0093604774220611E4148584C584ED848A820
	1C243411DA093709038451C2272293A84BB426BA11F9C4186232318758482C23
	D6128F132F107B8843C437241289433227B9900249B1A454D212D246D26E5223
	E92CA99B34481A2393C9DA646BB20739942C202BC885E49DE4C3E433E41BE421
	F25B0A9D624071A4F853E22852CA6A4A19E510E534E5066598324155A39A52DD
	A8A15411358F5A42ADA1B652AF5187A81334759A39CD8316494BA5ADA295D31A
	681768F769AFE874BA11DD951E4E97D057D2CBE947E897E803F4770C0D861583
	C7886728199B18071867197718AF984CA619D38B19C754303731EB98E7990F99
	6F55582AB62A7C1591CA0A954A9526951B2A2F54A9AAA6AADEAA0B55F355CB54
	8FA95E537DAE46553353E3A909D496AB55AA9D50EB531B5367A93BA887AA67A8
	6F543FA47E59FD890659C34CC34F43A451A0B15FE3BCC6200B6319B3782C216B
	0DAB86758135C426B1CDD97C762ABB98FD1DBB8B3DAAA9A13943334A3357B352
	F394663F07E39871F89C744E09E728A797F37E8ADE14EF29E2291BA6344CB931
	655C6BAA96979658AB48AB51AB47EBBD36AEEDA79DA6BD45BB59FB810E41C74A
	275C2747678FCE059DE753D953DDA70AA7164D3D3AF5AE2EAA6BA51BA1BB4477
	BF6EA7EE989EBE5E809E4C6FA7DE79BDE7FA1C7D2FFD54FD6DFAA7F5470C5806
	B30C2406DB0CCE183CC535716F3C1D2FC7DBF151435DC34043A561956197E184
	91B9D13CA3D5468D460F8C69C65CE324E36DC66DC6A326062621264B4DEA4DEE
	9A524DB9A629A63B4C3B4CC7CDCCCDA2CDD699359B3D31D732E79BE79BD79BDF
	B7605A785A2CB6A8B6B86549B2E45AA659EEB6BC6E855A3959A558555A5DB346
	AD9DAD25D6BBADBBA711A7B94E934EAB9ED667C3B0F1B6C9B6A9B719B0E5D806
	DBAEB66DB67D6167621767B7C5AEC3EE93BD937DBA7D8DFD3D070D87D90EAB1D
	5A1D7E73B472143A563ADE9ACE9CEE3F7DC5F496E92F6758CF10CFD833E3B613
	CB29C4699D539BD347671767B97383F3888B894B82CB2E973E2E9B1BC6DDC8BD
	E44A74F5715DE17AD2F59D9BB39BC2EDA8DBAFEE36EE69EE87DC9FCC349F299E
	593373D0C3C843E051E5D13F0B9F95306BDFAC7E4F434F8167B5E7232F632F91
	57ADD7B0B7A577AAF761EF173EF63E729FE33EE33C37DE32DE595FCC37C0B7C8
	B7CB4FC36F9E5F85DF437F23FF64FF7AFFD100A78025016703898141815B02FB
	F87A7C21BF8E3F3ADB65F6B2D9ED418CA0B94115418F82AD82E5C1AD2168C8EC
	90AD21F7E798CE91CE690E85507EE8D6D00761E6618BC37E0C2785878557863F
	8E7088581AD131973577D1DC4373DF44FA449644DE9B67314F39AF2D4A352A3E
	AA2E6A3CDA37BA34BA3FC62E6659CCD5589D58496C4B1C392E2AAE366E6CBEDF
	FCEDF387E29DE20BE37B17982FC85D7079A1CEC2F485A716A92E122C3A96404C
	884E3894F041102AA8168C25F21377258E0A79C21DC267222FD136D188D8435C
	2A1E4EF2482A4D7A92EC91BC357924C533A52CE5B98427A990BC4C0D4CDD9B3A
	9E169A76206D323D3ABD31839291907142AA214D93B667EA67E66676CBAC6585
	B2FEC56E8BB72F1E9507C96BB390AC05592D0AB642A6E8545A28D72A07B26765
	5766BFCD89CA3996AB9E2BCDEDCCB3CADB90379CEF9FFFED12C212E192B6A586
	4B572D1D58E6BDAC6A39B23C7179DB0AE315052B865606AC3CB88AB62A6DD54F
	ABED5797AE7EBD267A4D6B815EC1CA82C1B5016BEB0B550AE5857DEBDCD7ED5D
	4F582F59DFB561FA869D1B3E15898AAE14DB1797157FD828DC78E51B876FCABF
	99DC94B4A9ABC4B964CF66D266E9E6DE2D9E5B0E96AA97E6970E6E0DD9DAB40D
	DF56B4EDF5F645DB2F97CD28DBBB83B643B9A3BF3CB8BC65A7C9CECD3B3F54A4
	54F454FA5436EED2DDB561D7F86ED1EE1B7BBCF634ECD5DB5BBCF7FD3EC9BEDB
	5501554DD566D565FB49FBB3F73FAE89AAE9F896FB6D5DAD4E6D71EDC703D203
	FD07230EB6D7B9D4D51DD23D54528FD62BEB470EC71FBEFE9DEF772D0D360D55
	8D9CC6E223704479E4E9F709DFF71E0D3ADA768C7BACE107D31F761D671D2F6A
	429AF29A469B539AFB5B625BBA4FCC3ED1D6EADE7AFC47DB1F0F9C343C59794A
	F354C969DAE982D39367F2CF8C9D959D7D7E2EF9DC60DBA2B67BE763CEDF6A0F
	6FEFBA1074E1D245FF8BE73BBC3BCE5CF2B874F2B2DBE51357B8579AAF3A5F6D
	EA74EA3CFE93D34FC7BB9CBB9AAEB95C6BB9EE7ABDB57B66F7E91B9E37CEDDF4
	BD79F116FFD6D59E393DDDBDF37A6FF7C5F7F5DF16DD7E7227FDCECBBBD97727
	EEADBC4FBC5FF440ED41D943DD87D53F5BFEDCD8EFDC7F6AC077A0F3D1DC47F7
	068583CFFE91F58F0F43058F998FCB860D86EB9E383E3939E23F72FDE9FCA743
	CF64CF269E17FEA2FECBAE17162F7EF8D5EBD7CED198D1A197F29793BF6D7CA5
	FDEAC0EB19AFDBC6C2C61EBEC97833315EF456FBEDC177DC771DEFA3DF0F4FE4
	7C207F28FF68F9B1F553D0A7FB93199393FF040398F3FC63332DDB0000002063
	48524D00007A25000080830000F9FF000080E9000075300000EA6000003A9800
	00176F925FC546000000ED4944415478DAECDB410E84201045C1F9666EC9F938
	677B864926DA40BDB51B2DC4A092AAFAA847974B0043306008060CC180211830
	0403866008060CC180211830040386FEDDF79783932CF12B4955657B8C3967FB
	131A6398A60403C61B2581D1E8A10C433060088660C0100C187A12E38455F132
	1836679AA66008068C8E7985DE28AFD0050386CEC2B0626F8461C56E9A822118
	3004038660C0100C18822118300403C623EDF67D64698CDDBE8F5C463C8CA346
	BC07380CC1802118300403866008060CC18021183004038660C0100C187AADD8
	9BEDCE100C18820143306008060CC138AB1B0000FFFF0300195B1FC1B6A0C1BB
	0000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="60" length_in_bytes="3237" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D49484452000000630000
	0062080600000044676D30000000097048597300000EC300000EC301C76FA864
	00000A4F6943435050686F746F73686F70204943432070726F66696C65000078
	DA9D53675453E9163DF7DEF4424B8880944B6F5215082052428B801491262A21
	09104A8821A1D91551C1114545041BC8A088038E8E808C15512C0C8A0AD807E4
	21A28E83A3888ACAFBE17BA36BD6BCF7E6CDFEB5D73EE7ACF39DB3CF07C0080C
	9648335135800CA9421E11E083C7C4C6E1E42E40810A2470001008B3642173FD
	230100F87E3C3C2B22C007BE000178D30B0800C04D9BC0301C87FF0FEA42995C
	01808401C07491384B08801400407A8E42A600404601809D98265300A0040060
	CB6362E300502D0060277FE6D300809DF8997B01005B94211501A09100201365
	884400683B00ACCF568A450058300014664BC43900D82D00304957664800B0B7
	00C0CE100BB200080C00305188852900047B0060C8232378008499001446F257
	3CF12BAE10E72A00007899B23CB9243945815B082D710757572E1E28CE49172B
	14366102619A402EC27999193281340FE0F3CC0000A0911511E083F3FD78CE0E
	AECECE368EB60E5F2DEABF06FF226262E3FEE5CFAB70400000E1747ED1FE2C2F
	B31A803B06806DFEA225EE04685E0BA075F78B66B20F40B500A0E9DA57F370F8
	7E3C3C45A190B9D9D9E5E4E4D84AC4425B61CA577DFE67C25FC057FD6CF97E3C
	FCF7F5E0BEE22481325D814704F8E0C2CCF44CA51CCF92098462DCE68F47FCB7
	0BFFFC1DD322C44962B9582A14E35112718E449A8CF332A52289429229C525D2
	FF64E2DF2CFB033EDF3500B06A3E017B912DA85D6303F64B27105874C0E2F700
	00F2BB6FC1D4280803806883E1CF77FFEF3FFD47A02500806649927100005E44
	242E54CAB33FC708000044A0812AB0411BF4C1182CC0061CC105DCC10BFC6036
	844224C4C24210420A64801C726029AC82422886CDB01D2A602FD4401D34C051
	688693700E2EC255B80E3D700FFA61089EC128BC81090441C808136121DA8801
	628A58238E08179985F821C14804128B2420C9881451224B91354831528A5420
	55481DF23D720239875C46BA913BC8003282FC86BC47319481B2513DD40CB543
	B9A8371A8446A20BD06474319A8F16A09BD072B41A3D8C36A1E7D0AB680FDA8F
	3E43C730C0E8180733C46C302EC6C342B1382C099363CBB122AC0CABC61AB056
	AC03BB89F563CFB17704128145C0093604774220611E4148584C584ED848A820
	1C243411DA093709038451C2272293A84BB426BA11F9C4186232318758482C23
	D6128F132F107B8843C437241289433227B9900249B1A454D212D246D26E5223
	E92CA99B34481A2393C9DA646BB20739942C202BC885E49DE4C3E433E41BE421
	F25B0A9D624071A4F853E22852CA6A4A19E510E534E5066598324155A39A52DD
	A8A15411358F5A42ADA1B652AF5187A81334759A39CD8316494BA5ADA295D31A
	681768F769AFE874BA11DD951E4E97D057D2CBE947E897E803F4770C0D861583
	C7886728199B18071867197718AF984CA619D38B19C754303731EB98E7990F99
	6F55582AB62A7C1591CA0A954A9526951B2A2F54A9AAA6AADEAA0B55F355CB54
	8FA95E537DAE46553353E3A909D496AB55AA9D50EB531B5367A93BA887AA67A8
	6F543FA47E59FD890659C34CC34F43A451A0B15FE3BCC6200B6319B3782C216B
	0DAB86758135C426B1CDD97C762ABB98FD1DBB8B3DAAA9A13943334A3357B352
	F394663F07E39871F89C744E09E728A797F37E8ADE14EF29E2291BA6344CB931
	655C6BAA96979658AB48AB51AB47EBBD36AEEDA79DA6BD45BB59FB810E41C74A
	275C2747678FCE059DE753D953DDA70AA7164D3D3AF5AE2EAA6BA51BA1BB4477
	BF6EA7EE989EBE5E809E4C6FA7DE79BDE7FA1C7D2FFD54FD6DFAA7F5470C5806
	B30C2406DB0CCE183CC535716F3C1D2FC7DBF151435DC34043A561956197E184
	91B9D13CA3D5468D460F8C69C65CE324E36DC66DC6A326062621264B4DEA4DEE
	9A524DB9A629A63B4C3B4CC7CDCCCDA2CDD699359B3D31D732E79BE79BD79BDF
	B7605A785A2CB6A8B6B86549B2E45AA659EEB6BC6E855A3959A558555A5DB346
	AD9DAD25D6BBADBBA711A7B94E934EAB9ED667C3B0F1B6C9B6A9B719B0E5D806
	DBAEB66DB67D6167621767B7C5AEC3EE93BD937DBA7D8DFD3D070D87D90EAB1D
	5A1D7E73B472143A563ADE9ACE9CEE3F7DC5F496E92F6758CF10CFD833E3B613
	CB29C4699D539BD347671767B97383F3888B894B82CB2E973E2E9B1BC6DDC8BD
	E44A74F5715DE17AD2F59D9BB39BC2EDA8DBAFEE36EE69EE87DC9FCC349F299E
	593373D0C3C843E051E5D13F0B9F95306BDFAC7E4F434F8167B5E7232F632F91
	57ADD7B0B7A577AAF761EF173EF63E729FE33EE33C37DE32DE595FCC37C0B7C8
	B7CB4FC36F9E5F85DF437F23FF64FF7AFFD100A78025016703898141815B02FB
	F87A7C21BF8E3F3ADB65F6B2D9ED418CA0B94115418F82AD82E5C1AD2168C8EC
	90AD21F7E798CE91CE690E85507EE8D6D00761E6618BC37E0C2785878557863F
	8E7088581AD131973577D1DC4373DF44FA449644DE9B67314F39AF2D4A352A3E
	AA2E6A3CDA37BA34BA3FC62E6659CCD5589D58496C4B1C392E2AAE366E6CBEDF
	FCEDF387E29DE20BE37B17982FC85D7079A1CEC2F485A716A92E122C3A96404C
	884E3894F041102AA8168C25F21377258E0A79C21DC267222FD136D188D8435C
	2A1E4EF2482A4D7A92EC91BC357924C533A52CE5B98427A990BC4C0D4CDD9B3A
	9E169A76206D323D3ABD31839291907142AA214D93B667EA67E66676CBAC6585
	B2FEC56E8BB72F1E9507C96BB390AC05592D0AB642A6E8545A28D72A07B26765
	5766BFCD89CA3996AB9E2BCDEDCCB3CADB90379CEF9FFFED12C212E192B6A586
	4B572D1D58E6BDAC6A39B23C7179DB0AE315052B865606AC3CB88AB62A6DD54F
	ABED5797AE7EBD267A4D6B815EC1CA82C1B5016BEB0B550AE5857DEBDCD7ED5D
	4F582F59DFB561FA869D1B3E15898AAE14DB1797157FD828DC78E51B876FCABF
	99DC94B4A9ABC4B964CF66D266E9E6DE2D9E5B0E96AA97E6970E6E0DD9DAB40D
	DF56B4EDF5F645DB2F97CD28DBBB83B643B9A3BF3CB8BC65A7C9CECD3B3F54A4
	54F454FA5436EED2DDB561D7F86ED1EE1B7BBCF634ECD5DB5BBCF7FD3EC9BEDB
	5501554DD566D565FB49FBB3F73FAE89AAE9F896FB6D5DAD4E6D71EDC703D203
	FD07230EB6D7B9D4D51DD23D54528FD62BEB470EC71FBEFE9DEF772D0D360D55
	8D9CC6E223704479E4E9F709DFF71E0D3ADA768C7BACE107D31F761D671D2F6A
	429AF29A469B539AFB5B625BBA4FCC3ED1D6EADE7AFC47DB1F0F9C343C59794A
	F354C969DAE982D39367F2CF8C9D959D7D7E2EF9DC60DBA2B67BE763CEDF6A0F
	6FEFBA1074E1D245FF8BE73BBC3BCE5CF2B874F2B2DBE51357B8579AAF3A5F6D
	EA74EA3CFE93D34FC7BB9CBB9AAEB95C6BB9EE7ABDB57B66F7E91B9E37CEDDF4
	BD79F116FFD6D59E393DDDBDF37A6FF7C5F7F5DF16DD7E7227FDCECBBBD97727
	EEADBC4FBC5FF440ED41D943DD87D53F5BFEDCD8EFDC7F6AC077A0F3D1DC47F7
	068583CFFE91F58F0F43058F998FCB860D86EB9E383E3939E23F72FDE9FCA743
	CF64CF269E17FEA2FECBAE17162F7EF8D5EBD7CED198D1A197F29793BF6D7CA5
	FDEAC0EB19AFDBC6C2C61EBEC97833315EF456FBEDC177DC771DEFA3DF0F4FE4
	7C207F28FF68F9B1F553D0A7FB93199393FF040398F3FC63332DDB0000002063
	48524D00007A25000080830000F9FF000080E9000075300000EA6000003A9800
	00176F925FC546000001C64944415478DAECDD4B8E83301045511C6597EC8F6D
	BA47B42C7592864048B97CDE24486100BEBE659B7C5C6AAD53C694526AADB5EC
	7DEF9BB9650571C639975F773633F6367224434AC632B5027955A6A281485BA6
	B634B231238015ED7BD1C68D927536D563D29AF189C19E19CC60063306CF7DCF
	C9CBB2842737CFF3E6696BB4C722B7917BA2455FA7E30B18CC600618CC600618
	CC008319CC008319CC008319CC008319CC008319CC008319CC600633C060C69B
	3D9619817A2C333AACF9CCC8621033CCA6C0600633C0E8D58CFBE83DDEB7D065
	1C33B64C7BAF5AE533A3D3800186800186800186740323E2DC7E5818FE8D4199
	0243C000C3E03F188C11067F650A0C0123330C2BEA4030ACA8952930040C3004
	0C30340118020618A7C423F440F1085DC01835BF9B99B47B49ACC78F5EB33540
	B84D13DB463EE3E27A82160AC6344DF5EC0B6CF6CA0B330B8BB849E29F31A3D6
	5AD60B6D8F87A8D17E7AAC4481C10C6680C10C661C86514AA96B0F698F9961D1
	378C054FCB54BBCE681BF3DD57661C3043820DE099C78A67F7C60C6106338419
	CC080A61CBFA62EB79CCF8F05A22D27DA734E348037FD390875F48C806E5D57D
	6D39E7F23295F5E3D6FFEE2BD27DFF0C0037CD3CC2FD30BD500000000049454E
	44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="61" length_in_bytes="1081" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D49484452000000630000
	0062080300000073B99D020000000774494D4507DF0B1B09120DD6E0D2340000
	00097048597300000E7400000E74016B24B3D600000300504C5445000000A5A5
	A5FF0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF83C3012100
	00000374524E53FFFF00D7CA0D41000000B34944415478DAED99D10A80200C00
	57FDFF3F0712A5A1B44D2DAB9B812F93F3B62442995D21C9A44BB622249D3B30
	248A377BDCD10FB1AD777A78B784C7601E93362A3C3C0C3CF0C0030F3CF0C003
	0F3CF0C0C3C3F0FF3B0FC658B6800103060C183060C0800103060C0B233C6178
	42C5C8E5356664138F62144377C519D5CACFD0F7038F5F7954BEBB9DCFA0B11F
	721E6AC68877C236321E5FF3B85A2BEACC62C6E509DB131467B150ABA6DFF4E7
	3CDAF66305EB9A3F57CEC0B48D0000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="62" length_in_bytes="3188" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D49484452000000630000
	0062080600000044676D30000000097048597300000EC300000EC301C76FA864
	00000A4F6943435050686F746F73686F70204943432070726F66696C65000078
	DA9D53675453E9163DF7DEF4424B8880944B6F5215082052428B801491262A21
	09104A8821A1D91551C1114545041BC8A088038E8E808C15512C0C8A0AD807E4
	21A28E83A3888ACAFBE17BA36BD6BCF7E6CDFEB5D73EE7ACF39DB3CF07C0080C
	9648335135800CA9421E11E083C7C4C6E1E42E40810A2470001008B3642173FD
	230100F87E3C3C2B22C007BE000178D30B0800C04D9BC0301C87FF0FEA42995C
	01808401C07491384B08801400407A8E42A600404601809D98265300A0040060
	CB6362E300502D0060277FE6D300809DF8997B01005B94211501A09100201365
	884400683B00ACCF568A450058300014664BC43900D82D00304957664800B0B7
	00C0CE100BB200080C00305188852900047B0060C8232378008499001446F257
	3CF12BAE10E72A00007899B23CB9243945815B082D710757572E1E28CE49172B
	14366102619A402EC27999193281340FE0F3CC0000A0911511E083F3FD78CE0E
	AECECE368EB60E5F2DEABF06FF226262E3FEE5CFAB70400000E1747ED1FE2C2F
	B31A803B06806DFEA225EE04685E0BA075F78B66B20F40B500A0E9DA57F370F8
	7E3C3C45A190B9D9D9E5E4E4D84AC4425B61CA577DFE67C25FC057FD6CF97E3C
	FCF7F5E0BEE22481325D814704F8E0C2CCF44CA51CCF92098462DCE68F47FCB7
	0BFFFC1DD322C44962B9582A14E35112718E449A8CF332A52289429229C525D2
	FF64E2DF2CFB033EDF3500B06A3E017B912DA85D6303F64B27105874C0E2F700
	00F2BB6FC1D4280803806883E1CF77FFEF3FFD47A02500806649927100005E44
	242E54CAB33FC708000044A0812AB0411BF4C1182CC0061CC105DCC10BFC6036
	844224C4C24210420A64801C726029AC82422886CDB01D2A602FD4401D34C051
	688693700E2EC255B80E3D700FFA61089EC128BC81090441C808136121DA8801
	628A58238E08179985F821C14804128B2420C9881451224B91354831528A5420
	55481DF23D720239875C46BA913BC8003282FC86BC47319481B2513DD40CB543
	B9A8371A8446A20BD06474319A8F16A09BD072B41A3D8C36A1E7D0AB680FDA8F
	3E43C730C0E8180733C46C302EC6C342B1382C099363CBB122AC0CABC61AB056
	AC03BB89F563CFB17704128145C0093604774220611E4148584C584ED848A820
	1C243411DA093709038451C2272293A84BB426BA11F9C4186232318758482C23
	D6128F132F107B8843C437241289433227B9900249B1A454D212D246D26E5223
	E92CA99B34481A2393C9DA646BB20739942C202BC885E49DE4C3E433E41BE421
	F25B0A9D624071A4F853E22852CA6A4A19E510E534E5066598324155A39A52DD
	A8A15411358F5A42ADA1B652AF5187A81334759A39CD8316494BA5ADA295D31A
	681768F769AFE874BA11DD951E4E97D057D2CBE947E897E803F4770C0D861583
	C7886728199B18071867197718AF984CA619D38B19C754303731EB98E7990F99
	6F55582AB62A7C1591CA0A954A9526951B2A2F54A9AAA6AADEAA0B55F355CB54
	8FA95E537DAE46553353E3A909D496AB55AA9D50EB531B5367A93BA887AA67A8
	6F543FA47E59FD890659C34CC34F43A451A0B15FE3BCC6200B6319B3782C216B
	0DAB86758135C426B1CDD97C762ABB98FD1DBB8B3DAAA9A13943334A3357B352
	F394663F07E39871F89C744E09E728A797F37E8ADE14EF29E2291BA6344CB931
	655C6BAA96979658AB48AB51AB47EBBD36AEEDA79DA6BD45BB59FB810E41C74A
	275C2747678FCE059DE753D953DDA70AA7164D3D3AF5AE2EAA6BA51BA1BB4477
	BF6EA7EE989EBE5E809E4C6FA7DE79BDE7FA1C7D2FFD54FD6DFAA7F5470C5806
	B30C2406DB0CCE183CC535716F3C1D2FC7DBF151435DC34043A561956197E184
	91B9D13CA3D5468D460F8C69C65CE324E36DC66DC6A326062621264B4DEA4DEE
	9A524DB9A629A63B4C3B4CC7CDCCCDA2CDD699359B3D31D732E79BE79BD79BDF
	B7605A785A2CB6A8B6B86549B2E45AA659EEB6BC6E855A3959A558555A5DB346
	AD9DAD25D6BBADBBA711A7B94E934EAB9ED667C3B0F1B6C9B6A9B719B0E5D806
	DBAEB66DB67D6167621767B7C5AEC3EE93BD937DBA7D8DFD3D070D87D90EAB1D
	5A1D7E73B472143A563ADE9ACE9CEE3F7DC5F496E92F6758CF10CFD833E3B613
	CB29C4699D539BD347671767B97383F3888B894B82CB2E973E2E9B1BC6DDC8BD
	E44A74F5715DE17AD2F59D9BB39BC2EDA8DBAFEE36EE69EE87DC9FCC349F299E
	593373D0C3C843E051E5D13F0B9F95306BDFAC7E4F434F8167B5E7232F632F91
	57ADD7B0B7A577AAF761EF173EF63E729FE33EE33C37DE32DE595FCC37C0B7C8
	B7CB4FC36F9E5F85DF437F23FF64FF7AFFD100A78025016703898141815B02FB
	F87A7C21BF8E3F3ADB65F6B2D9ED418CA0B94115418F82AD82E5C1AD2168C8EC
	90AD21F7E798CE91CE690E85507EE8D6D00761E6618BC37E0C2785878557863F
	8E7088581AD131973577D1DC4373DF44FA449644DE9B67314F39AF2D4A352A3E
	AA2E6A3CDA37BA34BA3FC62E6659CCD5589D58496C4B1C392E2AAE366E6CBEDF
	FCEDF387E29DE20BE37B17982FC85D7079A1CEC2F485A716A92E122C3A96404C
	884E3894F041102AA8168C25F21377258E0A79C21DC267222FD136D188D8435C
	2A1E4EF2482A4D7A92EC91BC357924C533A52CE5B98427A990BC4C0D4CDD9B3A
	9E169A76206D323D3ABD31839291907142AA214D93B667EA67E66676CBAC6585
	B2FEC56E8BB72F1E9507C96BB390AC05592D0AB642A6E8545A28D72A07B26765
	5766BFCD89CA3996AB9E2BCDEDCCB3CADB90379CEF9FFFED12C212E192B6A586
	4B572D1D58E6BDAC6A39B23C7179DB0AE315052B865606AC3CB88AB62A6DD54F
	ABED5797AE7EBD267A4D6B815EC1CA82C1B5016BEB0B550AE5857DEBDCD7ED5D
	4F582F59DFB561FA869D1B3E15898AAE14DB1797157FD828DC78E51B876FCABF
	99DC94B4A9ABC4B964CF66D266E9E6DE2D9E5B0E96AA97E6970E6E0DD9DAB40D
	DF56B4EDF5F645DB2F97CD28DBBB83B643B9A3BF3CB8BC65A7C9CECD3B3F54A4
	54F454FA5436EED2DDB561D7F86ED1EE1B7BBCF634ECD5DB5BBCF7FD3EC9BEDB
	5501554DD566D565FB49FBB3F73FAE89AAE9F896FB6D5DAD4E6D71EDC703D203
	FD07230EB6D7B9D4D51DD23D54528FD62BEB470EC71FBEFE9DEF772D0D360D55
	8D9CC6E223704479E4E9F709DFF71E0D3ADA768C7BACE107D31F761D671D2F6A
	429AF29A469B539AFB5B625BBA4FCC3ED1D6EADE7AFC47DB1F0F9C343C59794A
	F354C969DAE982D39367F2CF8C9D959D7D7E2EF9DC60DBA2B67BE763CEDF6A0F
	6FEFBA1074E1D245FF8BE73BBC3BCE5CF2B874F2B2DBE51357B8579AAF3A5F6D
	EA74EA3CFE93D34FC7BB9CBB9AAEB95C6BB9EE7ABDB57B66F7E91B9E37CEDDF4
	BD79F116FFD6D59E393DDDBDF37A6FF7C5F7F5DF16DD7E7227FDCECBBBD97727
	EEADBC4FBC5FF440ED41D943DD87D53F5BFEDCD8EFDC7F6AC077A0F3D1DC47F7
	068583CFFE91F58F0F43058F998FCB860D86EB9E383E3939E23F72FDE9FCA743
	CF64CF269E17FEA2FECBAE17162F7EF8D5EBD7CED198D1A197F29793BF6D7CA5
	FDEAC0EB19AFDBC6C2C61EBEC97833315EF456FBEDC177DC771DEFA3DF0F4FE4
	7C207F28FF68F9B1F553D0A7FB93199393FF040398F3FC63332DDB0000002063
	48524D00007A25000080830000F9FF000080E9000075300000EA6000003A9800
	00176F925FC546000001954944415478DAECDDCD6E83301045E11AF196BC1FAF
	E9AEA810AA2AA8D2747EBEBB21122C221F9F191B45F198737E54CC1863CE39C7
	D37BFF99A52A88573CF3F6EF5DCD8CA7831CC99051B14C1D407E2A53D140942D
	53770659CF0860C5F95EB4BE31AAAEA632A6AC197FD1EC99C10C6630A379D627
	0FEFFB1E9EDCB66DB797ADD15E8B2C9D67A24D5FD2FE02063398010633980106
	33C0600633C0600633C0600633C0600633C0600633C060063398C10C3098F1CB
	19CB8C40339619096B3E33AA18C40CAB293098C10C30B29AB1769FF17E852E7D
	CCB8B3EC7DD72E9F1949030618020618020618920646C4B57D5B18FE8D419902
	43C00043F36F06A343F357A6C010302AC3B0A30E04C38E5A990243C00043C000
	C31080216080F19278851E285EA10B185DF37598C9F92C89E3F377D72A65EDE8
	41E10E4D3C0F72C4F3EB1E36FA9915C6729DED99667FB5ACD7D2644834700123
	58993AF788A8A701B7EA19955653D7D552BA327500B89E069CF59A7ED327811A
	B8FD05338419CC1066304398C10C6106338419CC1066F4CD27000000FFFF0300
	447510E92E6CDFB30000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="63" length_in_bytes="3030" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D49484452000000630000
	0062080600000044676D30000000097048597300000EC300000EC301C76FA864
	00000A4F6943435050686F746F73686F70204943432070726F66696C65000078
	DA9D53675453E9163DF7DEF4424B8880944B6F5215082052428B801491262A21
	09104A8821A1D91551C1114545041BC8A088038E8E808C15512C0C8A0AD807E4
	21A28E83A3888ACAFBE17BA36BD6BCF7E6CDFEB5D73EE7ACF39DB3CF07C0080C
	9648335135800CA9421E11E083C7C4C6E1E42E40810A2470001008B3642173FD
	230100F87E3C3C2B22C007BE000178D30B0800C04D9BC0301C87FF0FEA42995C
	01808401C07491384B08801400407A8E42A600404601809D98265300A0040060
	CB6362E300502D0060277FE6D300809DF8997B01005B94211501A09100201365
	884400683B00ACCF568A450058300014664BC43900D82D00304957664800B0B7
	00C0CE100BB200080C00305188852900047B0060C8232378008499001446F257
	3CF12BAE10E72A00007899B23CB9243945815B082D710757572E1E28CE49172B
	14366102619A402EC27999193281340FE0F3CC0000A0911511E083F3FD78CE0E
	AECECE368EB60E5F2DEABF06FF226262E3FEE5CFAB70400000E1747ED1FE2C2F
	B31A803B06806DFEA225EE04685E0BA075F78B66B20F40B500A0E9DA57F370F8
	7E3C3C45A190B9D9D9E5E4E4D84AC4425B61CA577DFE67C25FC057FD6CF97E3C
	FCF7F5E0BEE22481325D814704F8E0C2CCF44CA51CCF92098462DCE68F47FCB7
	0BFFFC1DD322C44962B9582A14E35112718E449A8CF332A52289429229C525D2
	FF64E2DF2CFB033EDF3500B06A3E017B912DA85D6303F64B27105874C0E2F700
	00F2BB6FC1D4280803806883E1CF77FFEF3FFD47A02500806649927100005E44
	242E54CAB33FC708000044A0812AB0411BF4C1182CC0061CC105DCC10BFC6036
	844224C4C24210420A64801C726029AC82422886CDB01D2A602FD4401D34C051
	688693700E2EC255B80E3D700FFA61089EC128BC81090441C808136121DA8801
	628A58238E08179985F821C14804128B2420C9881451224B91354831528A5420
	55481DF23D720239875C46BA913BC8003282FC86BC47319481B2513DD40CB543
	B9A8371A8446A20BD06474319A8F16A09BD072B41A3D8C36A1E7D0AB680FDA8F
	3E43C730C0E8180733C46C302EC6C342B1382C099363CBB122AC0CABC61AB056
	AC03BB89F563CFB17704128145C0093604774220611E4148584C584ED848A820
	1C243411DA093709038451C2272293A84BB426BA11F9C4186232318758482C23
	D6128F132F107B8843C437241289433227B9900249B1A454D212D246D26E5223
	E92CA99B34481A2393C9DA646BB20739942C202BC885E49DE4C3E433E41BE421
	F25B0A9D624071A4F853E22852CA6A4A19E510E534E5066598324155A39A52DD
	A8A15411358F5A42ADA1B652AF5187A81334759A39CD8316494BA5ADA295D31A
	681768F769AFE874BA11DD951E4E97D057D2CBE947E897E803F4770C0D861583
	C7886728199B18071867197718AF984CA619D38B19C754303731EB98E7990F99
	6F55582AB62A7C1591CA0A954A9526951B2A2F54A9AAA6AADEAA0B55F355CB54
	8FA95E537DAE46553353E3A909D496AB55AA9D50EB531B5367A93BA887AA67A8
	6F543FA47E59FD890659C34CC34F43A451A0B15FE3BCC6200B6319B3782C216B
	0DAB86758135C426B1CDD97C762ABB98FD1DBB8B3DAAA9A13943334A3357B352
	F394663F07E39871F89C744E09E728A797F37E8ADE14EF29E2291BA6344CB931
	655C6BAA96979658AB48AB51AB47EBBD36AEEDA79DA6BD45BB59FB810E41C74A
	275C2747678FCE059DE753D953DDA70AA7164D3D3AF5AE2EAA6BA51BA1BB4477
	BF6EA7EE989EBE5E809E4C6FA7DE79BDE7FA1C7D2FFD54FD6DFAA7F5470C5806
	B30C2406DB0CCE183CC535716F3C1D2FC7DBF151435DC34043A561956197E184
	91B9D13CA3D5468D460F8C69C65CE324E36DC66DC6A326062621264B4DEA4DEE
	9A524DB9A629A63B4C3B4CC7CDCCCDA2CDD699359B3D31D732E79BE79BD79BDF
	B7605A785A2CB6A8B6B86549B2E45AA659EEB6BC6E855A3959A558555A5DB346
	AD9DAD25D6BBADBBA711A7B94E934EAB9ED667C3B0F1B6C9B6A9B719B0E5D806
	DBAEB66DB67D6167621767B7C5AEC3EE93BD937DBA7D8DFD3D070D87D90EAB1D
	5A1D7E73B472143A563ADE9ACE9CEE3F7DC5F496E92F6758CF10CFD833E3B613
	CB29C4699D539BD347671767B97383F3888B894B82CB2E973E2E9B1BC6DDC8BD
	E44A74F5715DE17AD2F59D9BB39BC2EDA8DBAFEE36EE69EE87DC9FCC349F299E
	593373D0C3C843E051E5D13F0B9F95306BDFAC7E4F434F8167B5E7232F632F91
	57ADD7B0B7A577AAF761EF173EF63E729FE33EE33C37DE32DE595FCC37C0B7C8
	B7CB4FC36F9E5F85DF437F23FF64FF7AFFD100A78025016703898141815B02FB
	F87A7C21BF8E3F3ADB65F6B2D9ED418CA0B94115418F82AD82E5C1AD2168C8EC
	90AD21F7E798CE91CE690E85507EE8D6D00761E6618BC37E0C2785878557863F
	8E7088581AD131973577D1DC4373DF44FA449644DE9B67314F39AF2D4A352A3E
	AA2E6A3CDA37BA34BA3FC62E6659CCD5589D58496C4B1C392E2AAE366E6CBEDF
	FCEDF387E29DE20BE37B17982FC85D7079A1CEC2F485A716A92E122C3A96404C
	884E3894F041102AA8168C25F21377258E0A79C21DC267222FD136D188D8435C
	2A1E4EF2482A4D7A92EC91BC357924C533A52CE5B98427A990BC4C0D4CDD9B3A
	9E169A76206D323D3ABD31839291907142AA214D93B667EA67E66676CBAC6585
	B2FEC56E8BB72F1E9507C96BB390AC05592D0AB642A6E8545A28D72A07B26765
	5766BFCD89CA3996AB9E2BCDEDCCB3CADB90379CEF9FFFED12C212E192B6A586
	4B572D1D58E6BDAC6A39B23C7179DB0AE315052B865606AC3CB88AB62A6DD54F
	ABED5797AE7EBD267A4D6B815EC1CA82C1B5016BEB0B550AE5857DEBDCD7ED5D
	4F582F59DFB561FA869D1B3E15898AAE14DB1797157FD828DC78E51B876FCABF
	99DC94B4A9ABC4B964CF66D266E9E6DE2D9E5B0E96AA97E6970E6E0DD9DAB40D
	DF56B4EDF5F645DB2F97CD28DBBB83B643B9A3BF3CB8BC65A7C9CECD3B3F54A4
	54F454FA5436EED2DDB561D7F86ED1EE1B7BBCF634ECD5DB5BBCF7FD3EC9BEDB
	5501554DD566D565FB49FBB3F73FAE89AAE9F896FB6D5DAD4E6D71EDC703D203
	FD07230EB6D7B9D4D51DD23D54528FD62BEB470EC71FBEFE9DEF772D0D360D55
	8D9CC6E223704479E4E9F709DFF71E0D3ADA768C7BACE107D31F761D671D2F6A
	429AF29A469B539AFB5B625BBA4FCC3ED1D6EADE7AFC47DB1F0F9C343C59794A
	F354C969DAE982D39367F2CF8C9D959D7D7E2EF9DC60DBA2B67BE763CEDF6A0F
	6FEFBA1074E1D245FF8BE73BBC3BCE5CF2B874F2B2DBE51357B8579AAF3A5F6D
	EA74EA3CFE93D34FC7BB9CBB9AAEB95C6BB9EE7ABDB57B66F7E91B9E37CEDDF4
	BD79F116FFD6D59E393DDDBDF37A6FF7C5F7F5DF16DD7E7227FDCECBBBD97727
	EEADBC4FBC5FF440ED41D943DD87D53F5BFEDCD8EFDC7F6AC077A0F3D1DC47F7
	068583CFFE91F58F0F43058F998FCB860D86EB9E383E3939E23F72FDE9FCA743
	CF64CF269E17FEA2FECBAE17162F7EF8D5EBD7CED198D1A197F29793BF6D7CA5
	FDEAC0EB19AFDBC6C2C61EBEC97833315EF456FBEDC177DC771DEFA3DF0F4FE4
	7C207F28FF68F9B1F553D0A7FB93199393FF040398F3FC63332DDB0000002063
	48524D00007A25000080830000F9FF000080E9000075300000EA6000003A9800
	00176F925FC546000000F74944415478DAECDDC10D83301045417E942EDD1F6D
	2E352045D1DA3BEFCC8991D7C288245575A9471FB7008660C0100C1882014330
	60E80F7DDF5C7CDF77FBB393B5D65555B13204038660C0100C18822118300403
	8660C0100C1882014330600886BA622481D1A5A95F536D3DA64E5B415B639CB6
	826CE03004038660C0100C1882014330600886608CC598FA06AF2586DF4334A6
	6008060C9BFF308C099BBF310543304EC6F044DD08C313B5310543306008060C
	B7008660C0F8498ED01BE5085D30A69637CB3FC916B362D7FFCF889357634A30
	6008060CC1802118300403866008060CC180211830040386601CDC030000FFFF
	0300E32A26BBF89233510000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="64" length_in_bytes="975" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000005D0000
	0062080300000005832F890000000774494D4507DF0C020C2E13C6E690460000
	00097048597300000E7400000E74016B24B3D600000300504C5445FF00000000
	0000000000000000000000000000000000000000000000000000000000000000
	0000000000000000000000000000000000000000000000000000000000000000
	0000000000000000000000000000000000000000000000000000000000000000
	0000000000000000000000000000000000000000000000000000000000000000
	0000000000000000000000000000000000000000000000000000000000000000
	0000000000000000000000000000000000000000000000000000000000000000
	0000000000000000000000000000000000000000000000000000000000000000
	0000000000000000000000000000000000000000000000000000000000000000
	0000000000000000000000000000000000000000000000000000000000000000
	0000000000000000000000000000000000000000000000000000000000000000
	0000000000000000000000000000000000000000000000000000000000000000
	0000000000000000000000000000000000000000000000000000000000000000
	0000000000000000000000000000000000000000000000000000000000000000
	0000000000000000000000000000000000000000000000000000000000000000
	0000000000000000000000000000000000000000000000000000000000000000
	0000000000000000000000000000000000000000000000000000000000000000
	0000000000000000000000000000000000000000000000000000000000000000
	0000000000000000000000000000000000000000000000000000000000000000
	0000000000000000000000000000000000000000000000000000000000000000
	0000000000000000000000000000000000000000000000000000000000000000
	0000000000000000000000000000000000000000000000000000000000000000
	0000000000000000000000000000000000000000000000000000000000000000
	0000000000000000000000000000000000000000000000000000000000000000
	0000000000000000000000000000000000000000000000000000001789995500
	00000174524E530040E6D8660000004B4944415478DAEDD9D1090020084551DB
	7FE9C005120B8438F7FB7106D0084992EE5BFD2A7A7B42A7D3E9743A9D4EA7D3
	E9743A9D4EA79F271397AB4A743A9D4EA7D3E9F46FF5378FD46C0315C00147FA
	2DCBAE0000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="65" length_in_bytes="371" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000005D0000
	0062080300000005832F890000000774494D4507DF0C020C301715CA6B800000
	00097048597300000E7400000E74016B24B3D600000009504C5445FF00000000
	00FFFFFFCA92C3990000000174524E530040E6D866000000E64944415478DAED
	99510EC420084465EF7FE8EDA69A902D8DA04E23CDE05F0BCF09A18D60292193
	98FB5646ED6FD48EA4CBCFA078A0F899CCC81ABBA37F5618E93BD227AAC543EF
	D7BB8CC4F7E9B59A31F4F6B180B4633303A6EB3D48279D74D249279D74D249CF
	4117F5B6B78184E38FA3737BDB6DA84DBA192FE7529D497F1A6069FB8F3F1756
	FB33792F892B9274D29FA54B5A7AFDEFA1B4D7D1478ACC802657DAF1C6484F4D
	1F9A90FBE9FAC94890D7D17363314C77DDB6EC9A99D47487513BB553FBC5CB6A
	9096498A348751FAA5316D9DA9BDB6D28ECE7BC471117DE2F0193C5A28FB025B
	120CC1E85982790000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="66" length_in_bytes="429" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000005D0000
	0062080300000005832F890000000774494D4507DF0C020C2D0FF9CA9FCA0000
	00097048597300000E7400000E74016B24B3D600000009504C5445FF00000000
	00FFFFFFCA92C3990000000174524E530040E6D866000001204944415478DAED
	99D10EC3200845A5FFFFD15B56DB61452DCA6D4A023E6C7170BC63CCA04D4965
	A470BAE5AB36A2F2D5543B31F3A61D9B7712DFDA69B71066AE1D55077F3C4EFB
	843FD2126D3803D019F09B479CF8DF8F648C3F71C7868053CEEB669F9DB722BE
	2ACE72CD76BD375CFAF1637A9684A11FDF18A41D9B19309DAF11F4A0073DE841
	0F7AD0831E741F74629F8E162075FC79B8A4F1C58A4817E3691FD79389925EC7
	EF03ABFD99BC27C71519F4A03F4BA771FC4BE979DF4369CF571F2E32D3BDB95A
	A66F1D0BBA6B7AB366723B406B743E534F5FDB9679BAF05FADBAA269BABCCF40
	33E3986E977771DAAE66B2F6B2FDB5CBCC0D5BD50EA38776E7DAC503929924CD
	E1504BAF1FB9A5DE78957674DE358E46F485E6B3F9C47D681F67430E402DC945
	1B0000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="67" length_in_bytes="441" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000005D0000
	0062080300000005832F890000000774494D4507DF0C020C29302BC077F30000
	00097048597300000E7400000E74016B24B3D600000009504C5445FF00000000
	00FFFFFFCA92C3990000000174524E530040E6D8660000012C4944415478DAED
	99C112C3200844DDFEFF47F710DBA0315128EBC4063C343385C74A990E9A9454
	0685D390AFDA80F2D3553B84ADA69D5B77341FFDB47B0873D7CEEA831DCFD36E
	F0675AC28B6704BA0016F4BC1D3BB78E2FE9756E93EA997461727F163BC417CD
	991376FBFDC4E53ABE4FCF7238F4CF6E49DAB99521D3658EA0077D6DFAE86809
	4BFCD295097AD0831EF4A0FF1F1DE2DB5E02A8E3BF874BF42F569AF4663CB655
	9F4C94F463FCB6B8DAE7D43D2DDC91410FFA5C3A96A5E7FF3D96F67CF5B14465
	FAD79CBFD05F1DE3D141A53F5BFB849E918EA6A051471403D2C9D060A50F5D8D
	F854C65D3BB9EE64ED8734D0040D6BCFBF2E5CE93B5CBC6B2A37707BEDE4BA9B
	24191D9FA5BD79407293A4391C6AE9C7576EE96ADD4A3BBBEE1A4727BACB20D1
	1D2B2A7B035A540E09303287E10000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="68" length_in_bytes="473" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000005D0000
	0062080300000005832F890000000774494D4507DF0C020C270494F7AEC80000
	00097048597300000E7400000E74016B24B3D600000009504C5445FF00000000
	00FFFFFFCA92C3990000000174524E530040E6D8660000014C4944415478DAED
	99E10E83200C8439DFFFA1974C04D46A2DF45023E5C796D07E1C5DA385856032
	189C2EF99A0D587FBA6A47616FD3CECD3BC4AF7EDA3D84B96B67D541C6F3B457
	F8332D60E219815E0013FDBF111F7A2665FA7AD546EDBDE8D1963DB55B414A85
	99563C2D699C553DB2766146A747391CFAB25B92766E66C8F4720D898E440783
	8E4807875ED47BB0D6FBCDDAA979E7D6CC3DF4F4CC6FA61FB4254EF450333BE8
	833EE8833EE8832E45A4596D0198E3D3E112FAC58A4817E3318FE2ADADDF0648
	DAB6F1F3E06AEF93F7F0E28A1CF441EF4BC76BE9F1B9C7D21EAF3E5E9119FD9A
	B3853E29C6A3834AFFB6F60E35533A56055D75C4AA413A681A6AE97A7FE59619
	77EDE4BC93B5EF968125E8B2F6F8EBC2959EE1C57F4DFB3BC9476B27E7BD4A52
	A5E3B7B48B0724374996C3A195BE3B982E2753793C4A3B3BEF164727BA4B23A1
	B6151BFB0196630ED43B27DC1B0000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="69" length_in_bytes="1031" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000005D0000
	0062080300000005832F890000000774494D4507DF0C020C2D292BC71A370000
	00097048597300000E7400000E74016B24B3D600000300504C5445FF00000000
	0000000000000000000000000000000000000000000000000000000000000000
	0000000000000000000000000000000000000000000000000000000000000000
	0000000000000000000000000000000000000000000000000000000000000000
	0000000000000000000000000000000000000000000000000000000000000000
	0000000000000000000000000000000000000000000000000000000000000000
	0000000000000000000000000000000000000000000000000000000000000000
	0000000000000000000000000000000000000000000000000000000000000000
	0000000000000000000000000000000000000000000000000000000000000000
	0000000000000000000000000000000000000000000000000000000000000000
	0000000000000000000000000000000000000000000000000000000000000000
	0000000000000000000000000000000000000000000000000000000000000000
	0000000000000000000000000000000000000000000000000000000000000000
	0000000000000000000000000000000000000000000000000000000000000000
	0000000000000000000000000000000000000000000000000000000000000000
	0000000000000000000000000000000000000000000000000000000000000000
	0000000000000000000000000000000000000000000000000000000000000000
	0000000000000000000000000000000000000000000000000000000000000000
	0000000000000000000000000000000000000000000000000000000000000000
	0000000000000000000000000000000000000000000000000000000000000000
	0000000000000000000000000000000000000000000000000000000000000000
	0000000000000000000000000000000000000000000000000000000000000000
	0000000000000000000000000000000000000000000000000000000000000000
	0000000000000000000000000000000000000000000000000000000000000000
	0000000000000000000000000000000000000000000000000000001789995500
	00000174524E530040E6D866000000834944415478DAEDD8410A8030100340FB
	FF4F0B1E057137569432396A33566C05DD361111919732CE99EB968E06747EFA
	8E9E36EA41A97D81EE7C5AE3FB37DB68248FAADC891642B994ADB2622B5CC3C5
	5ABA417EA0E72F8FD2D6A65F8DC9336706236ED2E9743A9D4EA7D3E9F4C5F42F
	BE3D2AA1D3E9743A9D4EA72FABCFF9157E640705F801631894428D0000000049
	454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="70" length_in_bytes="446" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000005D0000
	0062080300000005832F890000000774494D4507DF0C020C2F13DFFDA1070000
	00097048597300000E7400000E74016B24B3D600000009504C5445FF00000000
	00FFFFFFCA92C3990000000174524E530040E6D866000001314944415478DAED
	98DB12C2200C449BFEFF47AB53A95C82D904528B93F0E008ECC98AB425DD3655
	906EFAAD22BCFFA3774F3ABDC215EF68DE6965A88EA9DCBD8E0939586E9DC38C
	DE91302440D196042A744A30C06EF68C955F29CB1D787E3239107C21A9F744FB
	957478CAD1ED7FCDF57D1428BCB30DF8CE330181F0DEB85157CCD25F8088D00C
	87A4A4BB320A2949F401EB8078C03A605EFC7180F91FD1C7E0923EE802DD1E73
	BC93451FF4A0073DE841EFE8291B9512905AFF3CC5A451F140C3D2593D1D2D7B
	B6C89528E7ADD61FCDD7FB35EBBE2DBC23831EF46BE9B42CFD7DDFF3F27EDC54
	D75819DFDA63FF12415F9ADEDB3993E8798F45844E445E339BE9D09BFEBBAECC
	D27420C27B780FEFCD2CAE409A6649531C6AE94D619A2A53BEDDCABBF7BA6B26
	4EA20F1C3E95478B2C1E9AEB0C0B7E9034CD0000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="71" length_in_bytes="422" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000005D0000
	0062080300000005832F890000000774494D4507DF0C020C2816E0D6C34F0000
	00097048597300000E7400000E74016B24B3D600000009504C5445FF00000000
	00FFFFFFCA92C3990000000174524E530040E6D866000001194944415478DAED
	99D10E83200C45B9FEFF472F99A845D152D24B24B63E6C89E570EC9A05302553
	C090D4946B0EA0FC74758788D9DCB97547F5AB9FBB8798BB3BAB0F0E3CCFBD23
	9F19090B2F0874010CF707776ACFC8E6CC13AAFD7E93F23C5EA7671D0E7D7B5A
	923BB73264BA9C23E8410F7AD0831EF4A0073DE873D021EE6A13C03C7EDF5C42
	3F58A9D2ABE3B15EFF58EFEAA70135B7F3F8F5E2BA8FA97B9AB823831EF4B174
	4C4BCFFF7B2CF77CF43145654C475666FAA2048F0E2AFDDBEE037A4626760D6A
	4D44B140BA5934F4D2F5F5955B65DCDDC97527BB5FA6816550B37BFE75E14A3F
	E0E25D53F900AF7727D7BD4BA933F15BEED50D929B92657368A55F36A6DBCEB4
	7EBDCA9D5D774BA213DD6521A12E2B4EF103A7000E1E39C7CB91000000004945
	4E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="152" length_in_bytes="104" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D49484452000000410000
	002D0103000000CB0F942700000006504C5445E7E7E70000007F7AF0BB000000
	134944415418D363F80F050D0C3030CA1A522C004E451E79B650B0D700000000
	49454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="153" length_in_bytes="117" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D49484452000000410000
	002D02030000008CAFEEF700000009504C5445E7E7E7999999000000B4111DC7
	0000001D4944415428CF635885061A1842D1C0E013C174333A18151915A1B208
	00E6E05B9178A4A01D0000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="154" length_in_bytes="174" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000004B0000
	002D0803000000D13D669F0000000F504C5445E7E7E7FFFFFF000000999999D0
	E2E352AFE056000000504944415478DAEDD5310E00200843D18ADEFFCC2E6E12
	12CA6030FD0BDB8B830498DB64C2F03230C992D5D5B2B0DC0ED999CC7365C9AA
	5971396B85FD61C5E97FC9AA590FEF10F864C96A635D6BC2B7014FA00A328C0E
	FE310000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="155" length_in_bytes="176" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000004B0000
	002D0803000000D13D669F00000012504C5445000000999999FFFFFFE7E7E7D0
	E2E3CCCCCC713BB6710000004F4944415478DAEDD53B0E00200844C1F577FF2B
	5BD91842C25218CCBE8E66428111768D09DD0A834996ACAA16DC626FE8CCCCBA
	B264E52CBF9835DDFEB0FC745FB272D6C37F68F1C99255C6BACA581B32B42477
	7F6AB4FF0000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="156" length_in_bytes="172" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000004B0000
	002D0803000000D13D669F00000012504C5445000000CCCCCCFFFFFF999999E7
	E7E7D0E2E3ADD3BC9A0000004B4944415478DAEDD5C10D002008435104DC7F65
	EF4A9A88E1A0F60FF04E4D2A712D9368142D5A7F590233D86229481C468BD699
	85DBB33AEC0D0BC77DD1AAB44A7FC8F3D1A2758D3567F9061B75204129E12048
	0000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="157" length_in_bytes="172" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000004B0000
	002D0803000000D13D669F00000012504C5445000000CCCCCCFFFFFF999999E7
	E7E7D0E2E3ADD3BC9A0000004B4944415478DAEDD5C10900200C43D1B4EAFE2B
	7B2F25A0D2839A3FC03B05823CDB099E254BD65F16688D866839099D264BD699
	C55BB306ED0D8BA77DC9AAB44A7FC8F69325EB1A2B74624DF35E18E10EDAA50E
	0000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="158" length_in_bytes="171" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000004B0000
	002D0803000000D13D669F0000000F504C5445E7E7E7FFFFFF000000999999D0
	E2E352AFE0560000004D4944415478DAEDD5310E002008044140FFFF666B2D2E
	010AA3D97DC0545CB0381AF5CCF7C2EA61613D6BC9921B7251980C0BAB67E972
	D694FD61E9B82FAC9E75E30FF5BF2416D63396184BB60552120A3216B948BF00
	00000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="159" length_in_bytes="176" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000004B0000
	002D0803000000D13D669F00000012504C5445000000999999FFFFFFE7E7E7D0
	E2E3CCCCCC713BB6710000004F4944415478DAEDD53B0E0020084441FCDDFFCA
	D618B3094B6130FB3A9A0905463B6B7CD67D36F864C92A6BC1626FC8CFB1A565
	C9CA59B89835617F5838DD97AC9CF5E01FF2E2629225AB8C758DB336E93B23E7
	D97037680000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="160" length_in_bytes="174" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000004B0000
	002D0803000000D13D669F00000012504C5445000000CCCCCCFFFFFF999999E7
	E7E7D0E2E3ADD3BC9A0000004D4944415478DAEDD5410A002008445133BBFF95
	5B6730A04250CD3FC05B3928BE964F748D16AD2F2D58876D9682C460B468D52C
	5CCC1AB0372C1CEF8BD651ABFE87BC689968D1BAC50263093701CD811F81B4A9
	8A830000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="161" length_in_bytes="173" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000004B0000
	002D0803000000D13D669F00000012504C5445000000CCCCCCFFFFFF999999E7
	E7E7D0E2E3ADD3BC9A0000004C4944415478DAEDD5C10900200C43D15875FF95
	3D5B24601541CD1FE09D02812FC583F5C992F5A545CB3478CB48283459B2D62C
	DE9C55696F583CED4BD6516BFD87B6BCA42C59D758C3625603F5D018E1D93286
	260000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="162" length_in_bytes="186" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000004B0000
	002D0803000000D13D669F0000000F504C5445E7E7E7FFFFFF000000999999D0
	E2E352AFE0560000005C4944415478DAEDD5410A80301043D174ECFDCF2C2E55
	F890112C62DE01C25F74A8EA62EBD3382B1D4A1DF7ADBE74A5EBD52E64DED000
	6576D16209A5EB8F5DCCEB9AC8EB9A685D17CBFB4AD7B3AE75FF1007B06C65EB
	335B702CAE1D0B710A4648C18D930000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="163" length_in_bytes="190" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000004B0000
	002D0803000000D13D669F00000012504C5445FFFFFFE7E7E7CCCCCC00000099
	9999D0E2E328C637930000005D4944415478DAEDD5410AC0201043D1D1D4FB5F
	B91477B604264245CC5BB80C7FA118185CBA18A03C5014EF2D9DBBDCF56B1795
	7C434120D9D54F69CB5D277671B9AE46E5BA1AB5AE8BF3FD72D75CD7BA7FA843
	5578CB5BDB6CE15355DC413D0F17618A738C0000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="164" length_in_bytes="187" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000004B0000
	002D0803000000D13D669F00000012504C5445FFFFFFE7E7E7CCCCCC00000099
	9999D0E2E328C637930000005A4944415478DAEDD2410AC0201043D1B199DEFF
	CA5D74A7F2C1A108D2BC0384BF48A873D545E7DDD2275BEE72D7315D28D1B015
	400DCDB754DA72D71FBBD85AD78DA0ABBCB5BF8BF95FEEDADA851241C0326F79
	EB982D4D65C50302A20F42B92302A80000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="165" length_in_bytes="187" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000004B0000
	002D0803000000D13D669F00000012504C5445FFFFFFCCCCCCE7E7E7000000D0
	E2E39999997238D3000000005A4944415478DAED95B109002010035FA3FBAF6C
	61A712F079143137C07145208681E4C706BA0B212E75A9EB992E4AA54C2E2320
	53D62EB85CEAFAB18BB3D75528A4CBE1BAD5C5D1BED475A02BF087625E522EB9
	9E716185CFD5001BCE0DE1F711BF9C0000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="167" length_in_bytes="202" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000008C0000
	00210203000000762CAB9D00000009504C5445000000000000FFFFFF83DDCFD2
	0000000174524E530040E6D866000000654944415438CB636080030730C9C202
	676202468804AB089008C0A1863514014228308705EA1E1720E1C2403E6041F2
	1ECBA839A3E60C4A73585C40C0159A6FB0E73F5194FC85DD1C8856D65560B0D2
	018F4B90D5B010A1868108BB5870B99918F7E0F41700002B2CDF8A337CB30000
	000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="168" length_in_bytes="130" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000008C0000
	00210203000000762CAB9D00000009504C5445000000CCCCCC9999992EA5FAA7
	0000000174524E530040E6D8660000001D4944415438CB63601805A3803E6015
	1E00533335143718553332D500009C35A1CDB94079900000000049454E44AE42
	6082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="169" length_in_bytes="233" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000008C0000
	00210403000000F96C5E3D0000000F504C5445000000CCCCCC000000FFFFFF99
	9999F8A7D1F90000000174524E530040E6D8660000007E49444154785EED91C1
	0D80200C451B366083DF8EA01398B8FF4C6A0C81468916881CE49DFA39FC3C5A
	BA033A200C369CAA9110856C480674B10174427CEE0032F14F36C366D8AC8590
	66F13BEC151C872C979A323EB3193638E103D1F07B1B27898D680C3622486AE6
	94C96043A0E71A6E53E3DB7C8A0D2BAEDC4DDDA536E1BE62021615197D000000
	0049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="170" length_in_bytes="298" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000008C0000
	002108030000003C9CB33C00000045504C5445FFFFFF66666600000066666666
	6666666666000000666666666666666666666666000000000000141414000000
	0000000000006666666666666666666666660000006666660A66127600000015
	74524E530001010203060305090FFE02320B04FA0A04FA0E0A656BAB3B000000
	7549444154785EEDD1CB0A83401404D1EAB9336ADECF9BFFFFD42061F62E4421
	F459F5B2A0F90366666666666666B9C82DCFA5701DE8B897D9C089157D1679E6
	0568C14C202A0246D83EE69875824A1792027850368CE9320ED0E8424D00DA2D
	4693102008C6DFA6EC72D30BDE408F5100486BC67C017584156B223A2DB90000
	000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="171" length_in_bytes="224" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000008C0000
	002108030000003C9CB33C0000000F504C5445000000000000666666FFFFFFE7
	E7E7EDCC71240000000174524E530040E6D866000000754944415478DAEDD341
	0AC0200C0551C7F6FE672E2EB51A148C04FCD35DB291479A66C3DCD04C7C036B
	05EDC43356BB472661EEF84D6E89B5AD64242319C948463292718F4832AF64BA
	518A0303816E86D16777F866CCB6C930D9336E9F4CAE22F75B7D0CAE8F392F43
	298C0C0C6842DDCC99BFE903CDAC042710B3C6F20000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="172" length_in_bytes="162" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000008C0000
	00210403000000F96C5E3D00000012504C5445FFFFFF000000CCCCCC66666699
	99990000000FAE819A0000000274524E5300007693CD38000000334944415448
	C763601805A360148C82A1050451800B9900CD182725F2C0A831A3C690654C28
	260822C318634C306A0C558D0100115C9F3D8242BDC00000000049454E44AE42
	6082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="173" length_in_bytes="250" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000008C0000
	002108030000003C9CB33C00000015504C5445000000CCCCCC000000666666FF
	FFFF999999E7E7E7466338EC0000000174524E530040E6D86600000089494441
	5478DAED93410A80300C04DBA9FAFF274B0F0A551B1BD01034D3DBEE6519D234
	0A62C3217917902A38266F8296FF9849881DA7E42FA06BC34C9809336126CC7C
	C9CC6C8C3C266F902510120D37636C492D7832B38499CB3154DC98011CDD0CED
	CBFB9331BE1991C7CC30C8D4E73933A581728D760C06632CCD507163063A6A5C
	DD8CCD6F5A01553E0E21E6D9798B0000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="174" length_in_bytes="143" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000008C0000
	00210203000000762CAB9D0000000C504C5445000000999999E7E7E7000000C3
	5D16B20000000174524E530040E6D866000000274944415438CB6360180578C1
	7F18F8835B4D280CC48CAA195533B8D510939E57C1C09A41A106002D006E1A2E
	B2CF3D0000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="175" length_in_bytes="238" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000008C0000
	002108030000003C9CB33C0000000F504C5445000000999999000000E7E7E7FF
	FFFFFB3F5C940000000174524E530040E6D866000000834944415478DAED9641
	0AC0200C04EBD8FFBFB9F4A8ADC114B248CD78CB1E5C46058F593013BA492C60
	45D04F22C1CB3E660ECC8CC76417F0A5BF30C3142233650A91F632459A493369
	26CDA4996833A499F5CD70B38C1960A13BC368D948EF8CBB0CB165CE31A0FD03
	BBCA7C37531BA8EF88CCB45B024619AD19406EC67F4C9AD774011798092B8786
	4E060000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="176" length_in_bytes="163" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000008C0000
	00210403000000F96C5E3D0000000F504C5445000000999999CCCCCCE7E7E700
	000083C62D5D0000000174524E530040E6D866000000384944415448C7636040
	018264025453188494C803A3C60C19635C30811319C660494BA3C68C1A336ACC
	A831A3C6D0B92C36C604A3C64000006A1E15131CFD14D20000000049454E44AE
	426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="177" length_in_bytes="259" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000008C0000
	00210403000000F96C5E3D00000012504C5445000000999999000000CCCCCCE7
	E7E7FFFFFFE637FC6F0000000174524E530040E6D8660000009549444154785E
	ED94D109423110046DE1B482DBB502D381BC0A04FB6F45518217E321599E8292
	F9DB9F619240362D76C32DE075BAE53C6976E5CA8125803A51725E6990C05CF3
	C11A361AD6C9911A81441363E2FC420D7A941AEB49E305CDCFD5CC9A59E37F58
	03F81A355BAC52631E400BC5BBC9341CD49C23278A7F71AF795FB3DCD92F0FC6
	6AA206081EBDE608B5263F94F0521731DA811D1A3EAC600000000049454E44AE
	426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="178" length_in_bytes="141" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000008C0000
	00400203000000B584776200000009504C5445000000E7E7E7000000597EA0B4
	0000000174524E530040E6D866000000284944415448C7630845030D0C986054
	CDA89A5135A36A46D58CAAA1A79A5568009B9A51300A280000DAD11C6092FCD1
	8B0000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="179" length_in_bytes="249" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000008C0000
	00400203000000B58477620000000C504C5445000000E7E7E7000000FFFFFF24
	1249470000000174524E530040E6D8660000009149444154785EED95B10D8430
	0C45BFAEB2320AFBDC08146C61512136B815DC64C30007BE0213C548A9D0E515
	4EF3F4E4A409DE061186C53A31FD89D39CE634A78F69F49C21A61996CF19D998
	6E75FC7D1EFFCECDF1FF1D31A863A17D869282EE70969DC45949F8E42007F91D
	10FC8EB0DFE9FC7B81A62FF3CF6154417A567758972B745E871342A11344A9EC
	40F72158568F73B80F912FC8660000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="180" length_in_bytes="169" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000008C0000
	004004030000003AC482C20000000F504C5445000000E7E7E7CCCCCC99999900
	0000F64356D90000000174524E530040E6D8660000003E49444154785EEDCC31
	0D00200C00412C600109C501C1BF2666A6366C24F7F3E75A4F5AA3D2470C0683
	C16030180C0683C1ECA4227317D98FC16030F3B10338A0E05847D2C99E000000
	0049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="181" length_in_bytes="280" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000008C0000
	004004030000003AC482C200000012504C5445000000E7E7E7000000CCCCCCFF
	FFFF9999999D6A345C0000000174524E530040E6D866000000AA49444154785E
	EDD1C10D83300C85E1AA1BB413802D16C01BA06C80D87F95BA8443DC43ECA691
	A24AEFCF81DBA797707B3891C6E2E533296DFFC6800103060C1830609E99597F
	65E693219799ABD11573AF35FDDF66FC0F0703068C1660C829C85C4DF9B38B56
	411CE64E2593CA3696F01AA2A9C248FC52CE9A1E8CF4B914B73DB1EDABB7C9F1
	3BB285D6D876F18A336C81D16BCC1CD69A98D530A4A789A1CF46AD39CE96A368
	D1E3F602558B9262B166CD7D0000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="182" length_in_bytes="151" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000008C0000
	00400203000000B58477620000000C504C5445000000E7E7E799999900000002
	9BC3910000000174524E530040E6D8660000002F4944415448C7630845030718
	30C1A89A5135A36A46D58CAA8180FF68009B9A556860540DE96A8809E751300A
	2800004ED6682021908B170000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="183" length_in_bytes="259" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000008C0000
	004004030000003AC482C20000000F504C5445000000E7E7E7000000999999FF
	FFFF8EBA27100000000174524E530040E6D8660000009849444154785EEDD2E1
	0DC2300C84D153368009AEB7021B54D97F262AE08755A43A984815E2BE019E1C
	3BB824698BC8CA99DED75F63CC983163C68C1933D727D3BE65960723642D87E9
	15397F9AFA6EFEF3DF286990B92595183366B626FCE2C8E431C865044D91E9B1
	951886241E30E33199660683398F6269C5F54B81A1378638312286B3A7E17E6B
	A8D488902094D2BE53A7013F3ED41DE03FE653A02BDC880000000049454E44AE
	426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="184" length_in_bytes="175" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000008C0000
	004004030000003AC482C20000000F504C5445000000E7E7E7999999CCCCCC00
	0000F2CE4F3D0000000174524E530040E6D8660000004449444154785EEDD221
	1100201044512A50E1884004E89F098D3A0681E17DBDF3D4969A34FA491F3118
	0C0683C16030989974C844D20D83C1BC7DF15ECBF6180C0613972D3641A237AB
	9D60370000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="185" length_in_bytes="286" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000008C0000
	004004030000003AC482C200000012504C5445000000E7E7E7999999000000CC
	CCCCFFFFFFD662E83C0000000174524E530040E6D866000000B049444154785E
	EDD2CD0DC3201084D148A9204A07C805D89EEDC07460D17F2BC13F073607866C
	90AC28FB71F0ED698CB83D48C849647126A5F5D718679C71C619679C71E67930
	CBB7CCB433A0CC540D6722FDD7D8EFE63FDF0D488D4C209918679CC97578C58D
	CCD9787C868DAE2084B9A36452D92AB1790D30569868F829B6C6CEC43E3F25B6
	2BD67D743747B2055DD31ADD1059ED8C68E0EA356A8EE44CCCA218E46362F0DE
	556BC2DE1C8AE67C682F33A5523F722490F10000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="186" length_in_bytes="104" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000002D0000
	002801030000005019E16A00000006504C5445E7E7E70000007F7AF0BB000000
	134944415418D36368600083510A46FD07811F0035A11974C15B4F0D00000000
	49454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="187" length_in_bytes="110" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000002D0000
	0028020300000017B99BBA00000009504C5445E7E7E7999999000000B4111DC7
	000000164944415428CF63981A1AC10007A39C91C45985000D002FD338DD6E27
	713E0000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="188" length_in_bytes="160" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000002D0000
	004B0403000000169913EE0000000F504C5445E7E7E7FFFFFF000000999999D0
	E2E352AFE056000000424944415438CB635014C406141846C569202EA4840660
	E20895420C206040737188FD98E206208A69547C541C591C29C9228B33830815
	17051873547C547C688A030065F55A69B4C3792C0000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="189" length_in_bytes="159" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000002D0000
	004B0403000000169913EE0000000F504C5445E7E7E7FFFFFF000000999999D0
	E2E352AFE056000000414944415438CB635014C406141846C5A92BAE840EA0E2
	060C40C08450293450E26047611107F181A2A3E223591C29DD228B3383081517
	051873547C547C688A03004E375A6925E110EA0000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="191" length_in_bytes="173" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D49484452000000210000
	00730403000000E48C76A00000000F504C5445000000CCCCCC000000FFFFFF99
	9999F8A7D1F90000000174524E530040E6D866000000424944415448C7636018
	3940010198949494141898941092101110868B281B1B03790A0CA322435A0433
	4E31E31D336D200316414141815191519151915191912002002E8D2ECBAB7569
	770000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="192" length_in_bytes="150" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D49484452000000210000
	00730403000000E48C76A00000000F504C5445FFFFFFCCCCCC99999966666600
	0000379E01DC0000000174524E530040E6D8660000002B4944415448C7636040
	062CC6C6060C2343C4C5C501558449505060546454645464546454645464248B
	0000786D1D23D7A24AEF0000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="193" length_in_bytes="183" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D49484452000000210000
	00730403000000E48C76A000000012504C5445000000CCCCCC000000FFFFFF99
	99996666664EE9EC7E0000000174524E530040E6D866000000494944415448C7
	636040064CA1A1010CC35644010198949494141898949094804540182EA26C6C
	0CE429308C8A0C6911CC38C58C77CCB4810C5804050505464546454645464546
	8208007B693B97C54F0A870000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="194" length_in_bytes="153" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D49484452000000210000
	00730403000000E48C76A00000000F504C5445000000CCCCCC999999E7E7E700
	0000252403A00000000174524E530040E6D8660000002E4944415448C7636000
	022725187036366018CE222E48C0012CA228880002A322A322A322A322A322A3
	2223590400E5637BDF18C653960000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="195" length_in_bytes="193" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D49484452000000210000
	00730403000000E48C76A000000012504C5445000000CCCCCC999999000000FF
	FFFFE7E7E7530BD5E20000000174524E530040E6D866000000534944415448C7
	63600002232518300D0D6018B622060606C648C08081D998814151100284C122
	200C173171713100EA62181519D22298718A19EFA0B4610805501106841A2120
	16181519151915191519092200A322991793906D4D0000000049454E44AE4260
	82
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="196" length_in_bytes="160" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D49484452000000400000
	00730403000000DAA919EE0000000F504C5445000000CCCCCCE7E7E700000099
	99991947E38B0000000174524E530040E6D866000000354944415448C7EDCA31
	0D00200C00B05920410148C0BF37AE718D9B84B47763D46624411084BFC3BA38
	A1D5BA200882200882F03A6C3B74F9A99B06C4C00000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="197" length_in_bytes="213" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D49484452000000400000
	00730403000000DAA919EE00000012504C5445000000E7E7E7CCCCCC000000FF
	FFFF99999979B3A68E0000000174524E530040E6D866000000674944415448C7
	EDD3B109C0400C4351812708D9C0707D403782F79F2955AE3A1B774940BF7E60
	5C08C7BE134F02DF07246966350078A560461046D600C5090181FF0226F5C18C
	6D5CCBCAC0DA6605CC8A13EE3E003440F6451FF8BE2120202020202020F01EB8
	0185DA8C21275F612F0000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="198" length_in_bytes="165" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D49484452000000400000
	00730403000000DAA919EE0000000F504C5445000000CCCCCCE7E7E799999900
	0000E4E2D6830000000174524E530040E6D8660000003A4944415448C7EDCAB1
	0D00110000402B880DC4068CF0FBCFF41A1AD412B9AB2FE445A95D0B832008C2
	DBE13B9821EE25411004411004E176F8014861084625946FBD0000000049454E
	44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="199" length_in_bytes="219" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D49484452000000400000
	00730403000000DAA919EE00000012504C5445000000E7E7E7CCCCCC99999900
	0000FFFFFF7E931BB10000000174524E530040E6D8660000006D4944415448C7
	EDD3B10D80300C44D12BBC00121338238401282E2364FF55A848436CA503A4FB
	F5932C1787EDD15E6BAD07EE04BE0F48D2CC7200F00C41EB9D303207484E0808
	FC1730681DB43E8D63591118DBCC805972C2DD0B8005107DB10E7C5E11101010
	10101010780F5C111EBC7C9ADDBACA0000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="200" length_in_bytes="144" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000004B0000
	002D02030000009B8D7E3E00000009504C5445000000FFFFFF00000073C68371
	0000000174524E530040E6D8660000002B4944415428CF635805020B18504028
	08248C8A0D7AB1AC55486005442C351409848C8A0D32B155186005003A21CBB5
	8F217F2B0000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="201" length_in_bytes="144" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000004B0000
	002D02030000009B8D7E3E00000009504C5445000000FFFFFF00000073C68371
	0000000174524E530040E6D8660000002B4944415428CF635885015630848240
	6A28120819151B8C625958E22D8101058C8A0D2E3170542D40110200695FCBB5
	963263F60000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="202" length_in_bytes="126" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000002D0000
	004B020300000099D9E64E0000000C504C5445FFFFFFE7E7E700000099999932
	5BC342000000234944415428CF63686080830686514E03C32A046860B81A0A04
	11509951CE28679073008F22BC04611539590000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="203" length_in_bytes="124" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000002D0000
	004B020300000099D9E64E0000000C504C5445FFFFFFE7E7E700000099999932
	5BC342000000214944415428CF63686080830686514E03C32A0480CA708682C0
	8151CE2867B07300FFE8B8E9DF21EB720000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="390" length_in_bytes="272" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000008C0000
	00AA04030000008D1BBA2600000024504C54450000000C06040C06040C06040C
	06040F07053D3836000000E7E7E70B06040C0604FFFFFF1ECC91BD0000000674
	524E5300CCFBF5FEFE701131FE0000008B4944415468DEEDD8A10D8030104051
	46A006CD0A6CC008AC8041E3102C806404F660391C4110DA900A48DE5767FAEC
	E55A14922449BA6B8A34A6314B240C0683C16030180C0683F90FB3E661B63C4C
	9787A931180C0683C16030184C2EA64D63A6F735E1ECDE9EF7B3CBF8100683C1
	607EC0C436431F425F0D5126F18B0C83C160301F652ED74099F4E00012DEFB0A
	5B7395A90000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="391" length_in_bytes="453" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000008C0000
	00AA080300000048EB572700000039504C54450000000C06040C06040C06040C
	06040C06040C06040F0705FCFCFC0C0604FFFFFF0C06040A05030B05033D3836
	E7E7E70B0604000000FFFFFF1C84D1A70000000B74524E5300EDCCFBF5F7F2FE
	F8FEFD378EE6F2000001264944415478DAEDD7DD0A82401445E1D1B4FFAC3DEF
	FFB0395450E0A8E1490FB9D6403703F1B1D10BC3D8D47BA3306752EF9534A765
	B8B52E137A30CFB3CE3474CB322CC3322CC3322CC3322CC3322C333E65CE129F
	29D9FF1DC6C8DE92D348319F34EFB3318C91238C7D4AB95926593C3D338BBE4D
	32CA04739D98334C4C810103060C18303E30FAC068618CDE3006E3E83AE17C96
	407E96E199E1D50603060C183060C0800103060C1830FF89399F3D606EB79672
	DC5F2E1E30A73AA6B65B0F985D115375ED01B379608A020C183060C080010306
	0C183060C0800103060C183060C080F935E670AACAB68D09468B54955D7DC38E
	5D29DA05060C183060C0800103060C982F3153BF0E9AD76FD334D331C12E3060
	C0800103060C183060C064ABCACE825D7740446198BBED3D940000000049454E
	44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="392" length_in_bytes="207" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D49484452000000AA0000
	00730403000000FA69845600000012504C5445000000CCCCCCE7E7E7FFFFFF00
	00009999998F5D2CE30000000174524E530040E6D866000000614944415468DE
	EDCEC10980301000C17BC402042B103BD012D27F4DFE932006F330305BC0B011
	4569EFE9887751A9542AF5176A6EF6553D5B5D542A954AA5CEADE60155EAB2F6
	B43D0D52A9542A954AA552A9542A954AA552A9542A954AA5CEA1DE29D5EF706B
	3EEB0B0000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="393" length_in_bytes="289" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D49484452000000AA0000
	00730403000000FA69845600000015504C5445FFFFFF000000CCCCCCFFFFFFE7
	E7E700000099999994DFBEFE0000000274524E5300007693CD38000000AF4944
	415468DEEDD6410AC3201040D17161D6F10A427201E90DDA7D2078FFABD42E4A
	ACDA82750804FEDFFB180617235264EF3D3DDECFDC47828A8A8A2ADB918DA93E
	F56518634AD5C66CCEFFD434E95CA8316E87BA87D0A9CE8914E35CB5011956C5
	88AE1A9B8DAAA1D50D1515151515F5DAAA46A36A36E0CFDB650F1D7D53AB3B4B
	45AD6E421D356BF2DE2F575255FEC039EAEA7B5A505151515151515151515151
	51515151515151515151DBEA136974972E1486A4170000000049454E44AE4260
	82
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="394" length_in_bytes="249" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000008C0000
	00AA04030000008D1BBA2600000018504C54450000000C06040C060499999900
	0000E7E7E73D3836FFFFFF2A7DE0BD0000000374524E5300CCF550EE5A0F0000
	00834944415468DEEDD8310E40301480614760B13B830B18244EE0001657707D
	A6C6205E0704F9FE74E8D26F6AD2F415852449928EEA83BA3CA60DC2606E642E
	BAC563100683C16030180C0683C16030180C0683799031BDC6FC7F7A7D5253A5
	8EED6149EDB6276130180CE6034CF4324CDBAAE790C97CA730180C06F35266F7
	1B28B30EACDEC3F840A4E9019F0000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="395" length_in_bytes="455" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000008C0000
	00AA080300000048EB572700000036504C54450000000C06040C06040C06040C
	06040C0604FFFFFF0C0604FCFCFCE7E7E70B05030A05030C06040B06043D3836
	000000FFFFFF999999AF53AEF40000000974524E5300EDCCF5F7F2FDFBF80A1A
	26FE0000012D4944415478DAEDDAD90AC2301445D17470D69EF4FF7F56030A0A
	4DABE4DA5C74EF822F05591CD28742C3BB69F68EC29A49B3B7A4352DCBFDEB32
	610673BFFE332DDD651996611996611996611996611996793F65AE1AAF29D9FF
	5DC6C8DE92D348319FB4EED958C6C811C63EA5DC2C932C9ECE4CD5A749469960
	C6C29C61620A0C183060B2A93053CCA13030FE317AC1A832464F1883717428B8
	5E4B203FCB706678B4C1800103060C183060C080010306CC6F624E271798CB8D
	B2DD1F8F2E307D4C6D362E304D4CF5BD234CD3800103060C183060C080010306
	0C183060C080A9F29D9E29662C0C0C183060BE8E3977EDAD9D094655EADAA93E
	61C7A914ED0203060C183060C080010306CC8798D2B783E1F13B0C433926D805
	060C183060C0800103060C986C5D3B59B0EB0AFC05E4BFB92673530000000049
	454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="396" length_in_bytes="216" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D49484452000000AA0000
	00730403000000FA69845600000012504C5445000000CCCCCCE7E7E7FFFFFF99
	999900000072F819EB0000000174524E530040E6D8660000006A4944415468DE
	EDCEBB0980401444D11768010636205881D88196B0FDB7A218EAE2070D5C3837
	1E0E13B1AB9ED6E6EEBA7E1BC6BDA8542A95FA0B35657BAB0EB9462A954AA552
	CB56D3071DD4AA79527B76904AA552A9542A954AA552A9542A954AA552A9542A
	B50C750187A22A42AFCF42DC0000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="397" length_in_bytes="269" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D49484452000000AA0000
	00730403000000FA69845600000012504C5445000000CCCCCCFFFFFFE7E7E700
	000099999949724B2D0000000174524E530040E6D8660000009F4944415468DE
	EDD6C90980301040D11C6201016D20D8811610644AD0FE5B51BCB8246E3888E2
	FFA71CC26308398C31AB6C37D456C7D5E345732E5454D41FAA61CACA908A6A65
	7ED65245C2A436DE8BD20B98F7A992ECAEEA5395A8A8A8A8A8A8DF5635BAAB2E
	06DCD95D1A7FA12D35DAB354D46827D4516765CEB9FC4BAACA1F78462DDC9572
	545454545454545454545454545454545454545454D4B4DA035908AC351EDBC6
	DB0000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="398" length_in_bytes="263" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000008C0000
	00AA04030000008D1BBA260000001B504C54450000000C06040C060499999900
	0000666666E7E7E73D3836FFFFFF59894AF50000000374524E5300CCF550EE5A
	0F0000008E4944415468DEEDD8B10D02211480614690EA6A67B8052C2C6E0157
	B0A7BA151CDBEE426178242251F3FD150D5F0309E1A5244992E6760DBAF431B7
	20CCDBCCA0935A8330980F32836EF13D0883C16030180C0683C16030180C0683
	C14C644CAF31FF3FBD6E74CE47AFEDED71542D1B6130180CE60798E865283997
	650F99CE770A83C160305FCA54BF8153D78627DB7B1EF7D518ED580000000049
	454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="399" length_in_bytes="462" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000008C0000
	00AA080300000048EB572700000039504C54450000000C06040C06040C06040C
	06040C0604FFFFFF0C0604FCFCFC0B05030A0503E7E7E70C06040B06043D3836
	000000666666FFFFFF999999D2D89D290000000974524E5300EDCCF5F7F2FDFB
	F80A1A26FE000001314944415478DAEDDADB0A82401485614F9DCBE5F4FE0F5B
	0305098E63CC2E37F5FF4237427C2CC60BC16A699ABDA3EA9B49B3B7A46F5AF2
	FDEB327367E671FD67CADD651996611996611996611996611996599E12D71AAF
	29C9FFCD634C405A584867B7CC304AC374798C1C61EC9751CCCD3229CBE0EACC
	B87A9AF29960AE8539C38418183060C0245361A698536160FC6334C268658C5E
	3006E3E854708D8B203FCB706678B4C1800103060C183060C080010306CC6F62
	8E471798CB9DB2DD1F0E2E305D886D362E307588759D234C5D830103060C1830
	60C0800103060C183060C08059E53B3D53CCB5303060C080F938E6DC36F77626
	18AD52DB4CF50E3B4CA56017183060C0800103060C183060DEC494BE1DF4CFDF
	BEEFCB31955D60C0800103060C183060C08049D636935576DD00723025848AD8
	6A7D0000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="400" length_in_bytes="223" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D49484452000000AA0000
	00730403000000FA69845600000015504C5445000000CCCCCCE7E7E7FFFFFF99
	9999000000666666A9BC8AC90000000174524E530040E6D8660000006E494441
	5468DEEDCEC10D40401440C13D50808306242A101D7C256C09F45F82AB084138
	D8645E019397D2B67A59E68888A9BBAE8F8898D28DA8542A95FA17351FF6561D
	8E1AA9542A954A2D58CDDF94F655CD93DAD3412A954AA552A9542A954AA552A9
	542A954AA552A9D462D415D81859B8F822879D0000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="401" length_in_bytes="276" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D49484452000000AA0000
	00730403000000FA69845600000015504C5445000000CCCCCCFFFFFFE7E7E700
	0000999999666666B97E35E80000000174524E530040E6D866000000A3494441
	5468DEEDD6BD0980301040E1147180802E10DC400710B911740371FF11141B23
	C63F3C44F1BD2A45F838428A3326CCF67DD78E35C571E574D19C081515F59F6A
	3567654C45B5129EB554916A566BEF45E905CCFB54897657F5B1725454545454
	D46FAB1ADD551703EEEC2EB5BFD096BADAB354D4D54EA8A30625CEB9F44BAACA
	1F7846CDDC9552545454545454545454545454545454545454545454D4B83A00
	CAEABBA59A4EDFAF0000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="402" length_in_bytes="267" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000008C0000
	00AA04030000008D1BBA2600000018504C54450000000C06040C060499999900
	0000E7E7E73D3836FFFFFF2A7DE0BD0000000374524E5300CCF550EE5A0F0000
	00954944415468DEEDD8B10D84200040514790C6DE1958E08A4B9CC0016C6E05
	D7BFCE98708A211E51F37E45C32B088140D34805BDD35E054C4CC36030184CE5
	B3784CC36C2F71C97AC74C18CC1F999376F1980983C16030180C0683C1603018
	0C0683C15464FC5E639EFF7BBD531F967EDBC3BCB41AEE84C16030981B30B99B
	610A61EA3E59E6E03D85C16030988B32ABD7407B68C217E2F169CEB7BD3E0900
	00000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="403" length_in_bytes="479" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000008C0000
	00AA080300000048EB572700000036504C54450000000C06040C06040C06040C
	06040C0604FFFFFF0C0604FCFCFC0B05030A05030C06040B06043D3836000000
	E7E7E7FFFFFF9999992BEBE3000000000974524E5300EDCCF5F7F2FDFBF80A1A
	26FE000001454944415478DAEDDADB8AC2301845E1F4A08E8EDD4DDFFF65C780
	C2149AB492BF69D0B502DEF4E6636B4041B735259FC8954C4A3E924A5AD6FBD6
	655C02F33CDF99D69E7EE032DA54A165A64DC965648D61199661199661199661
	19964960143BE976594652649964BB2CA35004E3E34965BF03AF634C40E32C8D
	CB992FB38E51288229BF8C24F365ECDFA642B74946D95CEDCC2AC3F810183060
	C0445366A698313330F56334C3E8608CFE610CC6D19871E605503DCBF099E16A
	830103060C183060C0800103060C98CFC4DC6E5560EE0FCAF9E77AAD02D3FBD0
	E95405A6F1A1BEAF08D33460C0800103060C183060C0800103060C1830600EF9
	9F9E2966CA0C0C18306076C7FC76EDA38B094687D4B54BBDC3F64BC9DB05060C
	183060C0800103060C983731B9BF0E86D7EB300CF9186717183060C080010306
	0C183060A275ED62CEAE3F121585F96A738DC70000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="404" length_in_bytes="227" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D49484452000000AA0000
	00730403000000FA69845600000012504C5445000000CCCCCCE7E7E7FFFFFF99
	999900000072F819EB0000000174524E530040E6D866000000754944415468DE
	EDCEBB0980401445C10DB400031B10AC40EC401B10B7FF56544458F0876822CC
	496EF2185E087363B73554F5327D75DF7A18CEA352A9D498F6999A96539FA9F1
	B0B76A73544BA552A954EABFD5F8413B352B9E545E3D48A552A9542A954AA552
	A9542A954AA552A9542A95FA0F75029B1F596A292A269D0000000049454E44AE
	426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="405" length_in_bytes="303" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D49484452000000AA0000
	00730403000000FA69845600000015504C5445FFFFFF000000E7E7E7CCCCCCFF
	FFFF999999000000542C4C790000000274524E5300007693CD38000000BD4944
	415468DEEDD6310EC2201480E1C760E772850E5E80D813106FA0333195FB1F41
	88566B4B35083169F2FF0B0BF9F242189E48E87A1ABB74FB789CBBEFDD2FCA23
	FD96A0A2A2A28A73CE4FCB53A3A1949AAB8D9767CD6F6A98B49DA9DEBB973A58
	9BA9B68114A5F5E205A458152575559FAC54B5A98EA8A8A8A8A8A8DB566B54AA
	4E06FCB8BB0C36A33575B1675551E34E3856519DB433C6F45B52ABFC81FFA807
	93538F8A8A8A8A8A8A8A8A8A8A8A8A8A8A8A8A8A8A8A8A8A9A566FF78E8AC6DB
	7713A30000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="410" length_in_bytes="263" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000008C0000
	00430403000000BC50F06C00000012504C5445000000F0F0F0FFFFFF000000E7
	E7E7F0F0F0D0CF2A5F0000000274524E5300106B24DD5C000000984944415478
	5EED96C10DC23010048DD2C0A174000DDC655BA003FAEF850F163E892359C50F
	1E3BBFFD8CC6C9C36E5FB8F8B8BCBD67348E2569D027480D0A9CD3ACB9E6D96B
	8CD384A7D5679035564CB2C68BA91AD514A84635AA890164FC78CD022BEF29A2
	06F061DC46EE44CD356C5FE37334461CEA54CD0A9BF36D4EFE291CE797E6B1C3
	F639DEDF6AA491461A69A491461A69E63F935E3BEB83B99095F0410000000049
	454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="411" length_in_bytes="150" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000008C0000
	00430203000000331005CC0000000C504C5445000000E7E7E7FFFFFF000000D4
	0905E40000000174524E530040E6D8660000002E4944415448C763601805A360
	148C82410CFE63037F50D584A28157AB8060CDA89A5135A36A46D5D05E0D1165
	140095F45D9E50E6528C0000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="412" length_in_bytes="285" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000008C0000
	00430403000000BC50F06C0000000F504C5445000000F0F0F0000000FFFFFFE7
	E7E7E1555C080000000274524E5300106B24DD5C000000B149444154785EED95
	C10D83300C4553260899C0FE6582B241D5FD672A42158D511582F1A187FF38F9
	F2F4702225FDE026F52449938BC168B07C2EB0475C9A626B46649746C54CAABE
	9ABC1F7D35B21F59C39A36AC610D6BB40216E9AF195085C372A2C63C69986B1E
	276A46CD0D8DC468B2EBA7FC3505397037FE9342071D9AD701519A653B511A6A
	A8A1E6B96AB45CD54CAB06879AA9093EA8C4D7C4EF86D7EF8F5E862F7241739F
	37A8D9A006FD34346F7ADF61F912EA999C0000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="413" length_in_bytes="158" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000008C0000
	00430203000000331005CC0000000C504C5445000000E7E7E7000000FFFFFF24
	1249470000000174524E530040E6D866000000364944415448C763601805A360
	148C82410C56A181062C6A42D1C0A89A5135A36AC85303CE642BF0ABD9FF1F08
	7E8CAAC1554661094300F48600DC2B67E4490000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="414" length_in_bytes="283" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000008C0000
	00430403000000BC50F06C00000012504C5445000000F0F0F0F0F0F0FFFFFFE7
	E7E7000000215F3A890000000374524E53001000B0B4D68F000000AB49444154
	785EED95311202210C45D199EDB3C5F6DE81E1061E20D1C9FDAFE2562B308A6C
	FCE57F5469DE3CA048FAC045EB4993A5104BA3F1FD84F01E0D69B6B666750969
	4C9BC92C5623FD18ABD17E640D6BC6B08635ACB10A6FD1F99AC5E5EB9E3A51D3
	AC34CF35E544CD6A32D0284623A14BC56B3617E0DBC47FCA2798D0DC7F80D2E4
	5CB01A6AA8A1C604A3415DEA8AD03C30357683FF1435F8CDF046FFD03CF30135
	07D4F83C03CD0B712FA273967740120000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="415" length_in_bytes="294" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000008C0000
	00430403000000BC50F06C00000012504C5445000000F0F0F0000000FFFFFFE7
	E7E7190B07923AEBFF0000000274524E5300106B24DD5C000000B74944415478
	5EED92CB0DC320140489D300A682F7564E03466E204A01B9D07F2B91AC1CC08A
	006F38256F6E7B190D1FF7818BE44B9C3A8AA9D0C081D3E088509A50D6CCF094
	46A558AA5C8D3F4EAE468ED36AACA68ED5588DD568064AA4BF6642168E921335
	806423E6AC276A66F5158D8CD178EA507C4D801F7837FC4BA1830ECDA3C1284D
	8CEB288D694C639AFBAED1F0AD66D935686A962A78A332BE86BF9BBFF937A6B9
	C5B83D6B02D35C7FEB5029A50E0D3A686B5E38FE579057DC29E8000000004945
	4E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="416" length_in_bytes="142" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000008C0000
	00430203000000331005CC00000009504C5445000000E7E7E7000000597EA0B4
	0000000174524E530040E6D866000000294944415448C763601805A360148C82
	410C56A181062C6A42D1C0A89A5135A36A46D5D04B0D1165140029E3D04115D1
	C4B80000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="417" length_in_bytes="294" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000008C0000
	00430403000000BC50F06C00000015504C5445000000F0F0F0F0F0F0FFFFFFE7
	E7E7190B07000000010631DB0000000374524E53001000B0B4D68F000000B349
	444154785EED96310E83300C45D35662360B3377B0CA097A0096EC36527DFF23
	B42389DA102C4FED7F4C5E9E9E0129491FB8C87E92A4C9C55068ECFDB8B01A71
	69A6B266347269548A49D55743F5E8AB917A440D6ADAA00635A8D11D5622FD35
	83D1D773EA444D71A419EF594ED48C4A0D8DC468C8B594BF66320A7C37FE2F65
	1D74681E0744699897580D34D040A3738C266AA96B84668BA9D9E6BFF96FA079
	32DFD796009ADB6F2D95735E63AE49C79A1750BAA4C53090CAEB000000004945
	4E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="418" length_in_bytes="257" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000008C0000
	003204030000007C2E2E0800000012504C5445000000F0F0F0FFFFFF000000E7
	E7E7F0F0F0D0CF2A5F0000000274524E5300106B24DD5C000000924944415478
	5EED91C10903310C04375C030AEEE0D28074DB423A48FFBDE47367EC87904502
	21A0F9EDC3C30883EB287C9E01C7DEF90B4D694A539AD294A634A5290DD75144
	DC4DD0F15E0B221A47CD3EF2E89AB886D4582389A3B235798D248EFAA866E357
	7E0A36E0691429C49982143ACF1FD7984EEB9A96AC699386AF733259438764CD
	36D75C93C8719B348A731A7CDE51ED7D2932F4337A0000000049454E44AE4260
	82
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="419" length_in_bytes="146" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000008C0000
	00320203000000F36EDBA80000000C504C5445000000E7E7E7FFFFFF000000D4
	0905E40000000174524E530040E6D8660000002A4944415438CB63F88F0DFC61
	4001A168E0D52A205833AA6654CDA89A5135B457434C19350A4601050000412D
	5D9E7F3776760000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="420" length_in_bytes="281" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000008C0000
	003204030000007C2E2E080000000F504C5445000000F0F0F0000000FFFFFFE7
	E7E7E1555C080000000274524E5300106B24DD5C000000AD49444154785EEDD5
	410E82301085E12727187A82D72727A03730DEFF4C26C6188A422723864DBF1D
	8BFE99962685FC886DF7866B7973677AA6670EBA7EF5FA78A694B967BEB93D33
	39FD9A999E19A165DAA597CC43A639F16CFAF5EB99969EF9FFCB2007C269CCB6
	59260C4E49CB4C599A09C249E24EC6FC9B724F13CF586853F169061DF2A79017
	3E324484AD3F0D1144E5E4693257A74644A42AA3518608AD1111433D0D84904B
	9521329A1EF5C25D19A305CCF40000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="421" length_in_bytes="156" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000008C0000
	00320203000000F36EDBA80000000C504C5445000000E7E7E7000000FFFFFF24
	1249470000000174524E530040E6D866000000344944415438CB6358850DAC60
	4001A16860FF7F20F831AA06971A62C2B08101138CAA195533AA0613A0174FD8
	D48C825140010000C11C00DC49949C750000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="422" length_in_bytes="284" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000008C0000
	00320803000000B9DEC30900000012504C5445000000F0F0F0000000FFFFFFE7
	E7E7190B07923AEBFF0000000274524E5300106B24DD5C000000AD4944415478
	DAEDD3C10A03210C45D1BC3BD3FFFFE5A274315DA8650C6968735D8A70886AEC
	F678650E9D9B25C31CADC214A6303F8621218644180A53988FE28291F832860B
	867D0CE7C682F7449EC9D49BA9AF5D98C214A63085C98DE9F960F0CA9C9390EE
	90DB59770C30C21CE33A06738ED64D8CE2AE698D21134699AE09F30EC8F19B7A
	68B096182C2C2D77656161B3FE7A3262F5CE2C2C31C12041E464D6595C30DD02
	0B4CCCFF92CCA127EF40279DDEBC3DC30000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="423" length_in_bytes="177" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000008C0000
	003204030000007C2E2E080000000F504C5445000000FFFFFF000000E7E7E7FF
	FFFF58C8BD300000000274524E5300007693CD38000000454944415448C76350
	220014188802C604C0603386455050801AAE61140401018A3D053646705805F1
	A831A3C68C1A336ACCA831A3C60C7963A8D44C1A05A360148C023A0100C01DD9
	C31D0749AF0000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="424" length_in_bytes="144" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000008C0000
	001902030000009E052E5D0000000C504C5445000000F0F0F0000000FFFFFF38
	B4FC8D0000000274524E5300106B24DD5C000000274944415428CF6360008150
	047060C00156E1051035FBFFE303A36A46D50C3F35C4E40BFCF90B00582E9E0F
	2324076B0000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="434" length_in_bytes="200" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000008E0000
	00730403000000BCDF27FC0000000F504C5445000000E7E7E7FFFFFF00000099
	99998E9374970000000174524E530040E6D8660000005D49444154785EEDD531
	0A80300C4051412F50DA13D41354EF7FB78E42C0218350E1FD35E465CC16DB4B
	A61AB67FE270381C0E87C3E1703877AA77A7673AD774381C0E87F3F9BF384AEC
	7ACE8F386B2B391C0E87C3E170381C0E87C3E14C137CDEEF9AA72E6C00000000
	49454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="435" length_in_bytes="255" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000008E0000
	00730403000000BCDF27FC00000018504C5445000000F0F0F0FFFFFF000000CC
	CCCC999999F0F0F0E7E7E7661966690000000274524E5300106B24DD5C000000
	8A49444154785EEDD5B10D03211404D1B5902BF81DE00A7C1BB801DC8A1BB04E
	B4EF1009E9020C01C14C016FC3555FAA237DD5DAD4C1C1C1B1ED8858E2E8E6E7
	AC73E46C257B89A3F4F9CFC1C1C1C1C1C1F150D74E1EE9B1D449F6ACD3FE7DDE
	8908CD3AA594B7A48D1C1C1C1C1C0F75E9DC6BDFD1E65FB5EBDCC9C1C1C1C1C1
	C1C1C1C1C1C1C1C1C1F9018CF5E49A10DA5C580000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="436" length_in_bytes="244" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000008E0000
	00730403000000BCDF27FC00000012504C5445FFFFFFE7E7E7FFFFFF000000CC
	CCCC9999992A0E6F7E0000000174524E530040E6D8660000008649444154785E
	EDD5C10980300C46E1407180222E5017A8CD08D6FD57D25BA0D2435B4485F706
	F8424EBF9439DFD22CD6630E0E0E4EB49C5E753A4E8D1C7154A3392904EDFE4B
	DE73707070707070DAAA3BA1A5B5D8D371A7DCF75E47A2D5EB944D39E7FDEF0E
	0E0E0E8E3655750E5F96ECFCE68B962F39383838383838383838383838383827
	E26E4A8A9B583D360000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="437" length_in_bytes="271" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000008E0000
	00730403000000BCDF27FC00000012504C5445FFFFFFE7E7E7FFFFFFCCCCCC00
	0000999999241DB20E0000000174524E530040E6D866000000A149444154785E
	EDD5B10D83401044D109C60520D90D9CDCC199FC8CB6FF9A0C092763112CC812
	C1FFE96A5EBADAE621D35DBDBF39383838ADE798CB3931675B7274F2A0234553
	44EBCE544AD25916F262359D76641D7370707070707072ED3B25D3737522DA69
	C7113FFF3DE9ACFF5DAD77D0B1ADAF6EB5D657CE9917A3A40B3938383838916A
	D719876D53597B6F6F8F2B3938383838383838383838383838381FE84EA27A48
	3F093C0000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="438" length_in_bytes="214" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000008E0000
	00730403000000BCDF27FC00000012504C5445000000E7E7E7CCCCCCFFFFFF00
	000099999974248CA20000000174524E530040E6D866000000684944415468DE
	EDD5B10D40601485D1BF60809BB08030010B08FBCFA42442F17724E7AB5F4E6E
	F74AB9D5A4A6AEBCC5E170381C0E87C3E17CDAD9AB7A75DAE16C9C9F5A2E1713
	87C3E170FEEC3CFF886A674A926CE79435497A0E87C3E170381C0E87C3E170BE
	EA1C3FB581A8FF42582C0000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="439" length_in_bytes="278" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000008E0000
	00730403000000BCDF27FC00000018504C5445000000F0F0F0CCCCCCFFFFFF00
	0000999999F0F0F0E7E7E7CF6916450000000274524E5300106B24DD5C000000
	A14944415468DEEDD6C10D02211046E131C10EA8804805D880D949ECC40A347F
	FB1E971838B012E5F0DE8903F92E24CC987D1434D2D37AE1E0E02CE3B8BBC718
	A73876F2DBB7CE568A5B709FE25878E0E0E0E0E0E01C737CA8AE734E7B97D2EA
	3ACBD9F6B377E7E9A0D39DEF079CE6BE31E8A494B2B5FAA153BFD70A4E7523E3
	E0E0FCDB69CF8861274B92AA6FEB2E492F1C1C1C1C1C1C1C1C1C1C1C1C1C9C55
	9D3777E47905FC0291B80000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="440" length_in_bytes="280" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000008E0000
	00730403000000BCDF27FC00000018504C5445000000F0F0F0CCCCCCFFFFFF00
	0000999999F0F0F0E7E7E7CF6916450000000274524E5300106B24DD5C000000
	A34944415468DEEDD6410AC2301046E12C74EFA22708CD09D203543AE04D3C81
	F25FBFCB04DB821915B3786F9D7C04029984F0D2492D3DC2513838385F74AEA5
	C1CCCCE90C762967F9C0319B8BB3E4EC75EE73C0C1C1C1C1C1F99FD3D67B4EDE
	6B8AA5743C4F97B2A3C5D9CC77A7B3F96F789DAA738C71ECCD71DED7AF9C54AD
	1A717070FA77F66744B3932449D5C37693A4270E0E0E0E0E0E0E0E0E0E0E0E0E
	4EAFCE0ABD15845BADC9AECB0000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="441" length_in_bytes="301" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000008E0000
	00730403000000BCDF27FC00000012504C5445FFFFFFCCCCCCE7E7E7FFFFFF00
	00009999990BEAF5DB0000000174524E530040E6D866000000BF494441546881
	EDD6510AC2301004D0F9580F10682EB0E809E201829DFB9FA97F4D6C23B8D5A2
	1F33DFBB8F4020136013F348AEDB753972E49CE1D41623C9984392660618BBB3
	1C73005690B539732941672E853012A8F8D881418E1C3972E4C839E6C4F29E53
	46B90F9D5D9FCE6DE385D34FAC7DBAEBF798B3F6FBEEBF1177CC0C4FB9A494A6
	989352CAD8E6AB4EECBE4E77726A99C64E3791E5C891F36B67DC116127BBBB7B
	F76C3DDCDD6F72E4C89123478E1C3972E4C8912347CEBF3A0BBF03372E7AA731
	6E0000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="442" length_in_bytes="197" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000008E0000
	00730403000000BCDF27FC00000012504C5445000000CCCCCCE7E7E7FFFFFF00
	00009999998F5D2CE30000000174524E530040E6D866000000574944415468DE
	EDCCB10980301040D12BE20029B280B8811348B2FF4CE92C0E52A45378BFFDF0
	2252E5DCE98A551C0E87C3E170381CCEA79DB1D5D2396AAEDF6F4F7E8DC3E170
	381C0E87C3E170381C0E87C3E170FEE64C594763987ABAD6690000000049454E
	44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="443" length_in_bytes="274" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000008E0000
	00730403000000BCDF27FC00000018504C5445000000F0F0F0E7E7E7FFFFFF00
	0000999999190B07CCCCCC42FF030B0000000274524E5300106B24DD5C000000
	9D4944415468DEEDD5C10902311046E1FF30DE3D5881D8411A5871D04284ED60
	B1FD4D404163560809AEE07BC7247C30E4305296ED6B3A68291C1C9C9F713CB6
	33EBE2487E6C754E21B82C591D1CB5CF8583838383F3AF8E7FE83CA69E4F92B3
	2D399B5B5E7CFAA8ECA8DEB986D77C719F563AF7FD3EF470CCDAE78AF7934A7D
	C779FBAF759D4B7E37E1E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0ACE1CC7A91
	E2841E6810C00000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="444" length_in_bytes="262" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000008E0000
	00730403000000BCDF27FC00000015504C5445000000CCCCCCE7E7E7FFFFFF00
	0000999999190B07166925140000000174524E530040E6D86600000095494441
	5468DEEDD6C10980201480610F3640500B441B089D0DDF2645FB8F507448538A
	B2A00EFF7F553E140F4FA5A27473A7561D858383F3A2637D5A96321D2DC1591E
	3822D63BCE18C9BE97C2C1C1C1C1C1F9CE099AD64639E9863398ADBE8CAA8FE7
	A933FBBA6B4E32DF339DE4BF91EB0415CB4AF53727792FF7A953C75B4B1C1C1C
	1C1C1C1C1C1C1C1C1C1C1C1C1C1C9CDF393319BCBC89E46A7449000000004945
	4E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="445" length_in_bytes="301" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000008E0000
	00730403000000BCDF27FC00000015504C5445000000CCCCCCE7E7E7FFFFFF00
	0000999999190B07166925140000000174524E530040E6D866000000BC494441
	546881EDD6C109C3300C05D07F500710340B946EA0055CF2E92205EF3F426F89
	A3404169432FFF1F25FC30F8F00DA4D8AD927B3E2E478E9C339CB6C648B2E690
	A49901C6E12EC71C800D645B9D39A2E8CC11849140C3D70E0C72E4C8912347CE
	316748EFBDF73E0C9E79C08233C7920FCEAE4F87631111B1715E69C9A54F77FD
	5E73967EDFFD37EA8E9961938BBB5F6B8EBB4FC8F9A9537BAFD39DC97306E791
	77931C3972E4C89123478E1C3972E4C89123478E1C39FF70DE3E5809E5363204
	680000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="446" length_in_bytes="481" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000000E0000
	000E08060000001F482DD100000006624B474400FF00FF00FFA0BDA793000001
	8C494441542891AD91CB4B025114C6BF3B332A6333A989540699653E02C17C5D
	14A345F470DDAAD7BF5021FD03B54DD761D0B65AB56ED92208DA852DA25D51B9
	7282B0521CEF6D110E65136D3ACB73CEC7EF7CE703FEBBE8746A3F359D3E0140
	CCE6A2593318CBA6643B2B3914362A28BE8A567DB8EDDE11CC84BDAABEBBB1A4
	D9B7D66A8AC3CE8A66D41FC2709C262481A7FAFB7462B332B89C6C3098A4F9BF
	AC2139953E3BDC1F63514A7994527E7AECE3F15CFAA69BFA8DD8A12DCEBC9066
	8BA0D92298CBBCC2A5B68742F1CCFCAF42A58797D65734D96AE1468F10A0B056
	53547BBB682AFC4A038044A48144A4010058C8D6A1AAEDE1F1249DEDEC1B718C
	04868E3657B5402CD42000E071E9484EBCC3E76D8110C0ED60B68B2B3956BD7F
	DA3388DD340028940650280D18A7E573752832F30727333306D11FF41E6C2C6B
	E10E0D00C2234DCC67EBF0795B9F9E08E07632CBE5B51C7ABC7B3C9000401048
	75A7EC11B6CB9E6FD14822D74509BA6C650D9B155C12191345FE86EE6CCC2A40
	69AFFC66317E51A99C3F03C007C40F77771DFF36FB0000000049454E44AE4260
	82
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="481" length_in_bytes="221" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D49484452000000440000
	002A0802000000858F6ACF00000015744558744372656174696F6E2054696D65
	0007DC080A0D350DF7BC13790000000774494D4507DC080A0D35206762AC7C00
	0000097048597300000B1200000B1201D2DD7EFC000000514944415478DAEDCF
	010D803010C0C00DFF225EEA4C90AC903B05ED5A3FB267E676C36B9EDB0166CC
	7C8C992A335566AACC5499A9325365A6CA4C95992A335566AACC5499A9325365
	A6CA4C95992A335507F33D023294AEADD90000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="482" length_in_bytes="822" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D49484452000000C70000
	006108060000006240B5350000002B744558744372656174696F6E2054696D65
	0050203136206E6F762E20323031322031343A35343A3131202B30313030A85F
	ED390000000774494D4507DC0B100D393647079B0A000000097048597300000B
	1300000B1301009A9C180000000467414D410000B18F0BFC6105000002844944
	415478DAEDDB01729A40188661E97800EEE7F9723F6E40DDA6CC50C6CF0A1177
	D1E799C9C43499B829FBFA8326DD300CA716F57D3F5ED7D6FDF46B60AB5FB517
	704FD9FC5B3E07CFD0B53839D66E7CD3833D34194731059236FEFF3E0F3FD5F4
	69D5BD8D2F0AF6D66C1CD3E6BF758A656AF00ACD9E56416DCD4E8EC9BDC9017B
	323920303920303920687E72402DE5A9D0439EA2781AB7AEA39EDAAED937E7AF
	AFAFDAEBBDEB72B9D45E022BB4BE9FD638CC69D5388E7FDE68CB3B1F97C3C401
	AF260E08C401813820100704E280401C108803027140200E08C4018138201007
	04E280401C108803027140200E08C401813820100704E280401C108803027140
	200E08C401813820100704E280401C108803027140200E08C401813820100704
	E280401C108803027140200E08C401813820100704E280401C10880302714020
	0E08C401813820100704E280401C108803027140200E08C401813820100704E2
	8099BEEFC7E9F6B9F662A005F328A6DB26075C0DC3D02D3E3E957F18377EBF97
	1AC7EF65765D77F387E1B5A647D7E571695DD93765EDB7DE4F3F5709A3383FBA
	C9E663075AB3E6C172FADAE5FBA5D5D71CD32305CCD5DA177B4E2CD71C10AC9E
	1C4739B7E435DE793F981CBC8DE9BA78EBFBA56EBA32874F378FA474F1F0E468
	E9D9AA96D6F2A95A3A06CF58CBF27B5C3F3639606EFE9A87C9C1262D1D8367AE
	65FE9A87C90181C9C1262D1D83BDD6B27A72940B955AD3A6E67DF37956BDCE51
	36E7A9EE2F2A8E7FD740236A4E90BDEFFBE157C8E76154DEA02510D74A0D68E1
	D46AFEECD2B3ADF9F59131DCAEA1DCFFFBFEDEC201DCFAE3A09A6BD92390558F
	C0D37F42ADBFA5A87DFFFCABF6F1D8FBFE575D73B4B0295B5803DF5A38167BAE
	E1379DB2FB2C6732E7F10000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="483" length_in_bytes="442" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D49484452000000C70000
	006108060000006240B5350000002B744558744372656174696F6E2054696D65
	0050203136206E6F762E20323031322031343A35343A3131202B30313030A85F
	ED390000000774494D4507DC0B100E021332F71E2C000000097048597300000B
	1300000B1301009A9C180000000467414D410000B18F0BFC6105000001084944
	415478DAEDD3410A83401045410DB9A5E7F39CEA3AF08281C00C5205BDFF8B7E
	CB020000000000000000C0A7F5BA63F4889B3B99DFA37EE9BDEFFBE8B15F6DDB
	367A023F78D23FBD468F85598903823820880382382088038238208803823820
	8803823820880382382088038238208803823820880382382088038238208803
	8238208803823820880382382088038238208803823820880382382088038238
	2088038238208803823820880382382088038238208803823820880382382088
	0382382088038238208803823820880382382088038238208803823820880382
	382088038238208803823820ACD71DA347DCDCC9FCFC12000000000000000000
	000000C0BF9D1DD90A89E64A83B10000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="484" length_in_bytes="414" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D49484452000000540000
	002E0806000000B6D23E660000002B744558744372656174696F6E2054696D65
	0050203136206E6F762E20323031322031353A30343A3433202B30313030DBE1
	87B30000000774494D4507DC0B100E052A22B300E3000000097048597300000B
	1300000B1301009A9C180000000467414D410000B18F0BFC6105000000EC4944
	415478DAEDDB010A82301840E17FD101BC9FE7F37EDE6061B118C3DAC01752BD
	0F448B907A8C41F09B22222FCB128A98E739D6754D47EE7139FB47FC1A83C20C
	0A3328CCA03083C20C0A3328CCA0308336A669CAED51DEDF3BB7D7061D54FE92
	B6E736B04177E49CEF474FBD32CBEBEBD95FFE9BD5ABB45CBB42610685191466
	5098416106851914665098416106851914665098416106851914665098416106
	851914665098416106851914665098416106856DE323FD219E3F53E69A527A3C
	B2D47B76C9519C0F7A0E8B8D4C9BA9CFE9BB03F6866EDD4307BCDB43EBA8DBE7
	DC4307BD1A096F279A6FDEA84CFBE2093EC70000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="485" length_in_bytes="423" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D49484452000000540000
	002E0806000000B6D23E660000002B744558744372656174696F6E2054696D65
	0050203136206E6F762E20323031322031353A30343A3433202B30313030DBE1
	87B30000000774494D4507DC0B100E060B45F7437E000000097048597300000B
	1300000B1301009A9C180000000467414D410000B18F0BFC6105000000F54944
	415478DAEDDB010A82301840E12D3A80F7F37CDECF1BAC2C266BCD1CF840AAF7
	816811518F5504FF6208214DD31414C2388E619EE778E4392E67BF895F635098
	41610685191466509841610685191466D0CA300C6F47BEBF75AEAF0DDAE9FE97
	B479AE031BB421A5F438F6942B33DFBE9EFDE2BF59B94AF3B52B146650984161
	0685191466509841610685191466509841610685191466509841610685191466
	50984161068519146650984161068519146650D8B227677F88E7BFC43CD714E3
	73CB521EB3D9528EE22CB34D87363AE9D53A2CD6336DA67D4EDF1DD01ABAF5E3
	DEE1D377681975799CBFF29DB646C2EB89E61B6117370AC732571D0000000049
	454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="486" length_in_bytes="472" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000008C0000
	002108060000000B42430E000000017352474200AECE1CE90000000467414D41
	0000B18F0BFC6105000000097048597300000EC300000EC301C76FA864000000
	1874455874536F667477617265007061696E742E6E657420342E302E338CE697
	500000013F49444154785EEDD4DB0A84300C0450FFFFA75DD2DD59A28E972889
	58E7C0E083D640123A3CC0F87B669BD419C771377BDF493DEB7AE5C2B45A6CF8
	67237530C0F2CC877E25520B43ACF0AFC5067F365207DDAE5C98F69C0F7D2DBF
	8F37232FC186EFE3B1F788D4B9ABDBFFBA4707EFBF631199604B328FE4BBFD86
	89604BE223B2C01605917C8FBA610C5B144464812D0A22F974C348DFD8A22092
	4F378CF48D2D0A22F974C348DFD8A220924F378CF48B2D898FE47BD40DC396C4
	4764822D092235BAB9614416D8A2205243374C67D089CCE75D09638B82C8C5E6
	1EE46B54278C2D0AF276F3E66675A4FDBB126A5AF1283BBE16F9CAEE441B5E25
	D4B4E251767C2DF295DD8936BC4AA869C5A3ECF856DECC3716C9D0FE5D0935AD
	78941DDFCADB5D6AEE41EDFF9550D38A47D9F1ADC8C9C606F80156278C2D09D2
	8F61F80081517FD5233338800000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="487" length_in_bytes="484" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000008C0000
	002108060000000B42430E000000017352474200AECE1CE90000000467414D41
	0000B18F0BFC6105000000097048597300000EC300000EC301C76FA864000000
	1874455874536F667477617265007061696E742E6E657420342E302E338CE697
	500000014B49444154785EED94016AC4300C04FBFF1FE44FF9936BFBECE0BB0A
	2E562EEBAA9D81215C6950D02EFA0A406ACFBB39E6A4943E2AE828DB5616A6CE
	B242BF2268E801CA7D0DFCAAA0A387A8E09865857E45D0D037AD2C4C7DBE067E
	55F80758C17B050DAB367DCCB5C2F708F084559251D0B0FCC29CC52AC928C013
	5649BAA0830B037F13AB24A3A021CC85295845190578C22AC928DC4FA80B53B0
	8AD20530A12CEB0877613A94E5836CDB9630AE2D461D65E8BEEF6FCDFF6AFEFD
	6E57CD8D620D51C9D9C2E0EFB4C5A8830B13DB1AA2122E4C6C5B8C3AB830B1AD
	212AE1C2C4B6C5A8830B13DB1AA293FEF2F4B30D7EFB5C65998FB6793F2EC605
	4F31736156697D0F3ECCFB99E6C782B3A7992D8C923ED3FA1E7C98F7E3C6F532
	85896DDE8F1BD7CB1426B6793FD31C8B1D3C0D85896DDE8F8B63B9F5D7041426
	B6793F6E5C2FCF166685D6F760714FDFFA3A4BE1F5EE38850000000049454E44
	AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="488" length_in_bytes="25428" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D49484452000001300000
	003108060000012AD7C574000000097048597300000EC300000EC301C76FA864
	00000A4F6943435050686F746F73686F70204943432070726F66696C65000078
	DA9D53675453E9163DF7DEF4424B8880944B6F5215082052428B801491262A21
	09104A8821A1D91551C1114545041BC8A088038E8E808C15512C0C8A0AD807E4
	21A28E83A3888ACAFBE17BA36BD6BCF7E6CDFEB5D73EE7ACF39DB3CF07C0080C
	9648335135800CA9421E11E083C7C4C6E1E42E40810A2470001008B3642173FD
	230100F87E3C3C2B22C007BE000178D30B0800C04D9BC0301C87FF0FEA42995C
	01808401C07491384B08801400407A8E42A600404601809D98265300A0040060
	CB6362E300502D0060277FE6D300809DF8997B01005B94211501A09100201365
	884400683B00ACCF568A450058300014664BC43900D82D00304957664800B0B7
	00C0CE100BB200080C00305188852900047B0060C8232378008499001446F257
	3CF12BAE10E72A00007899B23CB9243945815B082D710757572E1E28CE49172B
	14366102619A402EC27999193281340FE0F3CC0000A0911511E083F3FD78CE0E
	AECECE368EB60E5F2DEABF06FF226262E3FEE5CFAB70400000E1747ED1FE2C2F
	B31A803B06806DFEA225EE04685E0BA075F78B66B20F40B500A0E9DA57F370F8
	7E3C3C45A190B9D9D9E5E4E4D84AC4425B61CA577DFE67C25FC057FD6CF97E3C
	FCF7F5E0BEE22481325D814704F8E0C2CCF44CA51CCF92098462DCE68F47FCB7
	0BFFFC1DD322C44962B9582A14E35112718E449A8CF332A52289429229C525D2
	FF64E2DF2CFB033EDF3500B06A3E017B912DA85D6303F64B27105874C0E2F700
	00F2BB6FC1D4280803806883E1CF77FFEF3FFD47A02500806649927100005E44
	242E54CAB33FC708000044A0812AB0411BF4C1182CC0061CC105DCC10BFC6036
	844224C4C24210420A64801C726029AC82422886CDB01D2A602FD4401D34C051
	688693700E2EC255B80E3D700FFA61089EC128BC81090441C808136121DA8801
	628A58238E08179985F821C14804128B2420C9881451224B91354831528A5420
	55481DF23D720239875C46BA913BC8003282FC86BC47319481B2513DD40CB543
	B9A8371A8446A20BD06474319A8F16A09BD072B41A3D8C36A1E7D0AB680FDA8F
	3E43C730C0E8180733C46C302EC6C342B1382C099363CBB122AC0CABC61AB056
	AC03BB89F563CFB17704128145C0093604774220611E4148584C584ED848A820
	1C243411DA093709038451C2272293A84BB426BA11F9C4186232318758482C23
	D6128F132F107B8843C437241289433227B9900249B1A454D212D246D26E5223
	E92CA99B34481A2393C9DA646BB20739942C202BC885E49DE4C3E433E41BE421
	F25B0A9D624071A4F853E22852CA6A4A19E510E534E5066598324155A39A52DD
	A8A15411358F5A42ADA1B652AF5187A81334759A39CD8316494BA5ADA295D31A
	681768F769AFE874BA11DD951E4E97D057D2CBE947E897E803F4770C0D861583
	C7886728199B18071867197718AF984CA619D38B19C754303731EB98E7990F99
	6F55582AB62A7C1591CA0A954A9526951B2A2F54A9AAA6AADEAA0B55F355CB54
	8FA95E537DAE46553353E3A909D496AB55AA9D50EB531B5367A93BA887AA67A8
	6F543FA47E59FD890659C34CC34F43A451A0B15FE3BCC6200B6319B3782C216B
	0DAB86758135C426B1CDD97C762ABB98FD1DBB8B3DAAA9A13943334A3357B352
	F394663F07E39871F89C744E09E728A797F37E8ADE14EF29E2291BA6344CB931
	655C6BAA96979658AB48AB51AB47EBBD36AEEDA79DA6BD45BB59FB810E41C74A
	275C2747678FCE059DE753D953DDA70AA7164D3D3AF5AE2EAA6BA51BA1BB4477
	BF6EA7EE989EBE5E809E4C6FA7DE79BDE7FA1C7D2FFD54FD6DFAA7F5470C5806
	B30C2406DB0CCE183CC535716F3C1D2FC7DBF151435DC34043A561956197E184
	91B9D13CA3D5468D460F8C69C65CE324E36DC66DC6A326062621264B4DEA4DEE
	9A524DB9A629A63B4C3B4CC7CDCCCDA2CDD699359B3D31D732E79BE79BD79BDF
	B7605A785A2CB6A8B6B86549B2E45AA659EEB6BC6E855A3959A558555A5DB346
	AD9DAD25D6BBADBBA711A7B94E934EAB9ED667C3B0F1B6C9B6A9B719B0E5D806
	DBAEB66DB67D6167621767B7C5AEC3EE93BD937DBA7D8DFD3D070D87D90EAB1D
	5A1D7E73B472143A563ADE9ACE9CEE3F7DC5F496E92F6758CF10CFD833E3B613
	CB29C4699D539BD347671767B97383F3888B894B82CB2E973E2E9B1BC6DDC8BD
	E44A74F5715DE17AD2F59D9BB39BC2EDA8DBAFEE36EE69EE87DC9FCC349F299E
	593373D0C3C843E051E5D13F0B9F95306BDFAC7E4F434F8167B5E7232F632F91
	57ADD7B0B7A577AAF761EF173EF63E729FE33EE33C37DE32DE595FCC37C0B7C8
	B7CB4FC36F9E5F85DF437F23FF64FF7AFFD100A78025016703898141815B02FB
	F87A7C21BF8E3F3ADB65F6B2D9ED418CA0B94115418F82AD82E5C1AD2168C8EC
	90AD21F7E798CE91CE690E85507EE8D6D00761E6618BC37E0C2785878557863F
	8E7088581AD131973577D1DC4373DF44FA449644DE9B67314F39AF2D4A352A3E
	AA2E6A3CDA37BA34BA3FC62E6659CCD5589D58496C4B1C392E2AAE366E6CBEDF
	FCEDF387E29DE20BE37B17982FC85D7079A1CEC2F485A716A92E122C3A96404C
	884E3894F041102AA8168C25F21377258E0A79C21DC267222FD136D188D8435C
	2A1E4EF2482A4D7A92EC91BC357924C533A52CE5B98427A990BC4C0D4CDD9B3A
	9E169A76206D323D3ABD31839291907142AA214D93B667EA67E66676CBAC6585
	B2FEC56E8BB72F1E9507C96BB390AC05592D0AB642A6E8545A28D72A07B26765
	5766BFCD89CA3996AB9E2BCDEDCCB3CADB90379CEF9FFFED12C212E192B6A586
	4B572D1D58E6BDAC6A39B23C7179DB0AE315052B865606AC3CB88AB62A6DD54F
	ABED5797AE7EBD267A4D6B815EC1CA82C1B5016BEB0B550AE5857DEBDCD7ED5D
	4F582F59DFB561FA869D1B3E15898AAE14DB1797157FD828DC78E51B876FCABF
	99DC94B4A9ABC4B964CF66D266E9E6DE2D9E5B0E96AA97E6970E6E0DD9DAB40D
	DF56B4EDF5F645DB2F97CD28DBBB83B643B9A3BF3CB8BC65A7C9CECD3B3F54A4
	54F454FA5436EED2DDB561D7F86ED1EE1B7BBCF634ECD5DB5BBCF7FD3EC9BEDB
	5501554DD566D565FB49FBB3F73FAE89AAE9F896FB6D5DAD4E6D71EDC703D203
	FD07230EB6D7B9D4D51DD23D54528FD62BEB470EC71FBEFE9DEF772D0D360D55
	8D9CC6E223704479E4E9F709DFF71E0D3ADA768C7BACE107D31F761D671D2F6A
	429AF29A469B539AFB5B625BBA4FCC3ED1D6EADE7AFC47DB1F0F9C343C59794A
	F354C969DAE982D39367F2CF8C9D959D7D7E2EF9DC60DBA2B67BE763CEDF6A0F
	6FEFBA1074E1D245FF8BE73BBC3BCE5CF2B874F2B2DBE51357B8579AAF3A5F6D
	EA74EA3CFE93D34FC7BB9CBB9AAEB95C6BB9EE7ABDB57B66F7E91B9E37CEDDF4
	BD79F116FFD6D59E393DDDBDF37A6FF7C5F7F5DF16DD7E7227FDCECBBBD97727
	EEADBC4FBC5FF440ED41D943DD87D53F5BFEDCD8EFDC7F6AC077A0F3D1DC47F7
	068583CFFE91F58F0F43058F998FCB860D86EB9E383E3939E23F72FDE9FCA743
	CF64CF269E17FEA2FECBAE17162F7EF8D5EBD7CED198D1A197F29793BF6D7CA5
	FDEAC0EB19AFDBC6C2C61EBEC97833315EF456FBEDC177DC771DEFA3DF0F4FE4
	7C207F28FF68F9B1F553D0A7FB93199393FF040398F3FC63332DDB0000002063
	48524D00007A25000080830000F9FF000080E9000075300000EA6000003A9800
	00176F925FC546000058754944415478DA4C935F6C53551CC73FB7E7DE9EDE75
	54580C3E68D0C8A33E61D4E09F27DED48410351133191B714D56A663CD4698C9
	860E8D120D4EFECC3831F822511362D00782219AA06382E9DC5CD751BBB10C84
	ACDD78E8DADBDEF6DE737C682D3BCFDF7CCEE777BEBF637885BCA67E34E055CA
	E4F37942D2C60C9A98C264F8D81887FBBA6A19AD51CA6735B78CAF3422200806
	83D8E126A4B469B0B4A6E29659CD6511C2C4B44CA4947C71F63CBDD13D8DFB50
	8A5CF60EBE527596C40E3761AC17BBF9CF2CE7C73EE6DF3BB7D9193DC8430F3F
	4A38DCCCA7A7BFA563D70EBE3ED28332249EF21181004E314FF4FD5304A524B2
	6123F76D6A61A4BF9DBBD915B4D61806547DCDCBB143B4DCBF995093CDD91F7F
	E1951D4F7166B8CED23EC230709C35A24746915212896CC4F00A6B5AD7DCB999
	9EE5C2996300B8150F80D5951C3CF60287FBBA10D26634DECA722E872904C592
	8B521A4B04D8BC652BB1F746D068BE39DACFE2FC3CBEE763008EEB620981290C
	9A9F7E95DEE81E44C866B4B795E56C0E210214CB2ECA575842F0C096AD185E71
	4DA36B624BE9197EFAEA13AC8049306851F5159F7FFF332FED8B37AA3C1E6F63
	2A739B4858F2EB648A663B8453AAA0B44F62EE06A0D15AB3783DC907FD3D4C2F
	DC429A011CD705E0F59EA17B556ACD87B1D7C8DE2DF0DB4C8648C8C23260395F
	AC55A901A3DEF9D8C09B9842E0565DA42539FEDD45F675B6B13F3E547BD7FAEE
	F4EE7E1119DE40A1582631B780D28AC4DC3C5A6B300CD09ACFE26D646EE5A854
	7DA415E0F2549AB7E2DDB4771E68B0DC529903ADBB703D1FA53D6CCB622299B9
	27564F72A2BF832B9333381EEC7CFE094E9DBB445BC71BEC8F0F366065A7C889
	4351AEFD9D66DBB3DB39F7C30594EFF3676ABE9101CD487C2F137FA5282978FC
	9107B9782D49D7DB31F676F6FCFF43283B454E0E44B93A9DE6C9E79E61E97A86
	F1E9D43AB17A70F46007E393491C657074B89BAA0F97AE2E108B0FD6E40D2815
	D7F872B09BF1C924EFF4B5D3DC1261626A89DD9D03AC679DAC0F5952013E7AB7
	0B0FC1446AA526D66015383D14E3F7C42C037DED346D8AF0476291FF000000FF
	FF8CD4DD4B53711CC7F1F739670F3E9716455D6479D58D57814174E53F105A5D
	54144EDDC5D4F9C070F6608931288C6E24266817514117DD04411045048166F9
	30C23687B8296AB169B3A76D9EED9CF3EB42C91D45EAFEC787377CF9BD4CBF52
	1806896F71ECF63C14C58AC5A260B1D9912489DC376A4625F14F063496E3B16D
	0CFC2F29A6B0C1AB4E62895512F138EEBE418A8B4A28D95D8A3D2F9FFEAE7A12
	F10442E800E84250D37499B23DFBC82B28E0C9F3379CA9AEE281AF1D1D0B3AA0
	48126BA9DF387DFEBF0C6C9292B385A0D66526C5143670A511A1EB0801369B85
	C8FC0265078FD0D93780001EFA3A585A5C209BD5502C12E974065996B1290A85
	55B5DB18903718103A582D32FBCB2B68EEED5F27E5B697B9E86CCE968A2C2BD8
	1485A2E3A737C304E0F73A00906509ABD586A665187AF696F1D03A03DF576278
	1A2E0282E0DC121290D5B2009C6BBD6E62E096EB2CAB4995D71F3F0312326008
	83C9F09C89949BDE5642D12F48C0AE7C2B2BBF529C6FEF3173A1AEA579E4EB20
	9B511140716101771FBF2030133531D078AA9AA3870F10FDBACA5868164DD371
	7BDC389CED66062ED560180608C1FCCA4F62F16526C311D3D6BDCE3A42F331D6
	540D0998084768F5B8CD61E964127FB78B0F8110C74E9E602F2AFEA7AF189B36
	33D0EF713012089232A0BCB498D199455C6DCDD439DB766460696696778120E3
	D3912DA438781F089236A0B2E2102F473FD1D4D68C94DD38A504A45349EEDF68
	6178728A6BDE060A4B4B181E8B70A1A9DBCC40573D231353240D993BBD2EC20B
	3F584EB21E9643CA504F0B235B18D8B6B503297F000000FFFFAC975D88555514
	C77F7BEF73EEBDC3741522EA219A5E7A09220CCC2090228A7989401FEA417350
	FCBC238C234E118D70A71E0C0AA9511AD33EB4ACE84361B054FA801C3118F323
	CD3B0E337E6453E1387A9D1CEFF59E73F659BB877B66BC97540ADA4FFB61F33B
	6BAFB5F6FAFF4F5DF3D7AED191B374BFB49452A9C2A34F3FCBC38F35E3FB1EA9
	741ACFF749F929B4F130C6E0F93EAFAEDF3C255BB5CB783ED65AF67EB289BEAF
	BE6456F35C66CC7E122782E77968AD925191C2188F864C869EED3BA7FAB58EE5
	A788AD65CFC76FD3B76B07B39AE73063F6533817E3793E5A25ACD47F616D62DF
	AECF79A479EEBF62DD3461BF0D0DF0DD87DD08000268AE94CA148B9701210A23
	1677BD453AE5D3D89865C3D61DE43B72F4EFF98263FBF71259E1C2589186B48F
	753171ECC0399C089520C278064F6BB4D10461C0E2AE0DB8589896BD8D8F7ABF
	67F5B2055556DF1E22EBB83076914CC6C75A21961827D5C71F84119EA731C6A0
	B522884296E43782C464B3D91BB246C72ED290496165322EC1894BE2D278DAA0
	8D22084396746D4424667AC2AA333D93D34C2509FBFAFD3748FB69708ED855C7
	AE568A6B4180D11A11D8D2FB0300739676907FA1955A565FEFA76CDFB615E560
	E6FDF72240B158AC7EC541B1147070E02C9726CAF84683139452CC6FCFB37A79
	4B1DCB25FB9ECE1C9EB38883E2E56215E5628A1301878747181B9FA8B244505A
	F3FCEAAE9BB2CE0D9FE49BADEB11A712D6F5B88E0C8F305AFCEB1F2C65AF4E38
	7037E8B013ECFEE0CD2483825606718E86748A30B2C422A48CA6FBB36F017866
	F11A5E79B1F5BA82273BCF185A9E7888A6A626329934A77E2FA23548EC90E4E4
	CF43D5C1E65CB558F356E559B362413DCB4D5AEC023B37AD6368E4124E1C899E
	60B442E188C5F163E114C9D3605E7B171DB99BB37AB7BCCE8933E71111446224
	19FC416451E2F05286A383E7AA71B577D5EB24352E16A0522AF15E7E25D60AFB
	8F0EF0F8CC07686C48038A6B4105056CDB7D00718E9645F36B1C6E15A46AAA59
	2997E8E9CC118421870BA7B9637A9694E771CFDDB7B373DF315C52C5388E59D1
	96AB91B65BB082909F064EF3E07D4D5CBC52462B4D144528AD39327886D83972
	6DB91AB77C23D6557AD6B65659852A6B74BC84022AA1C5339AE3C3BF4EB1AEFF
	204D4A6A4D152AE532EFE65722311C3C5E2016478062DDCBCBE92FFC81321A6B
	43AC8D08C9D4396F267D65CD2537AF6DC58AE3D02F27118100C5F245CF717EBC
	8C670CA10DB151883FED2E162E69BB25EB9DB5ADC44E38747C708AF55AE732FA
	0B7FD6C5E567EF64E1D255FF1BEB6F000000FFFF8C995B7055D519C77FEBB2F7
	3E87809244187110D169CB80509C56EB30C35347676AA56AA540C1204910A5D0
	8B83845B2FB6B60F751C9D51106B6919FBD00ADA994E5B608A53B404CB9D9640
	1422E1662E2721DCC9C9C93E7BAFB5FAB00FC94938B19EC7F3F0DBDFFEAFB5BE
	F5FFFE7BC8A67F7DD6CEF56409C3104F79285F22D10825932320154A0ADEFEEB
	7B7CD27CE6865BF2FA2AE21C719C2797EB21DBDD8D039454C98E16C94DEA791E
	9EF6D8FAC11E3E6DCB94BCD99C4B2E0E63637AB2DD64AF1558AA346BCB07BB69
	69EB189A85C31A4336DB4DF6DAB5CFC51A52B09797D5D0D17A1A293D9E7AE135
	02CF2308D268DFC3531AA515CAF35152F0EED6F74B0A06A05269CE1E6BE09D37
	5EE262A685DAE75F03E7904A22A5442B2FB9313D8DE7F9BCB7EB6049C1A41088
	20616D5EFF22173B5A58F8FC5A7016291552DDC8DA5E7F8096F68ED2AC749AB3
	1F1558991616FEFCF3B186146CE34F16139A186B2CADEDED58E31835761C8F3D
	FD1CE95480549A742A8D1F04FC65FB2E4E9C3CC30B2B96B26DD346F66D7D1BA4
	0F4A27BEDE8271066B1D5A6A229367CCED77F270EDB308E7105AA3B5209D2E63
	C7DE23B4B66558BE7801DB366D64EFB64D3874C2B2167018070E8742105B53C4
	02A1255ACB84B5A781D6F68E7ED6963F15D5650B7559ACB585BA226E1B775781
	650B750D649514CC01BF5BB3082115CE598490647B72E4E388735DE791CE72DF
	371EE72BD31F20954AF1C1BEA39C3875965FAEFA3EEB9E7B922095A6BDB30367
	1D4A098C7198D825738E89FB56D2D38A7C98E3FE876633F1DE69A482147B8E9C
	A435D341DD926AD62D9B4F10A4693BD70116A4021B4314C70821884C8C73A094
	442B493E1F72FF376731E9ABD3480569F61C69A635D3D9CF4AA569EB2C621988
	0B41545297432A85A724F9B097FB1F9E7D036B08C11CAFD7D512F81ED95C2F65
	E914CEBAA45025104272FEC2454C3E4F2E97E58B8F2EA1B5ADABE8480A322DCD
	FCED8D5F13861157AE5C0621101264E203C8E622A4147DFD24F034BD3DDD4C9C
	F943CE9DBF5C748C12D69F5FF929088F4B572E238448AC49C13AE4C264449605
	8B1D684DAEE72A13673E4BD7851B59EF1458570A2C86AA0B47A035BD3DD7FA58
	6270F07ADD56ACAFABC1F73D9454186B08F311C35201711C1346114A4AD6BEBB
	035F2B1E59B0041594F587B38546BF7679350DCD19C68FA9A0E2A634C658BABB
	BBB1589C717CDCD2C5B13399E4E1D621A460DED215A860D8C054A69095AA20C5
	8BCFCC249D0AB0B1E16A1F0B9ADA2FD0D8DC7A3DEE4108C97797D4E10F1B5E9A
	A57D5EFEC15C3CAD888D29AA0B4E745CA4B1B92D99D0B1082473163F4730FCA6
	D2C6D501EB962D406989003C2F893A034FA394241FC528217975F3763C2D79A8
	6A31CA2F1BD0F41D8E5FD5CCE09AF1B870398BD692308EB877C21DFC61DB8768
	EDE16B454F6F6F92F2588B04662FAE43A7860D68D4EEBAA375F0D2D2399C3E77
	85381F3175C21DBCB5A59EC00FF07DC9D5EEDC008F35EB99E503041BCC7AE547
	4FD0D4729E308CB86FD238DEDA9AD4950A14C21802CFA3F36A0F12C7779E5E4E
	50367CE8A6FFDB358B302EE93B14E22DA554217B9384519ED736FF135F2B663C
	F93D945FD6E7F48B7F271A0FB3F6172B9970E7183E3AD309EE7A089E3CF6BF4D
	67FBA2310A8279A9B23EA73FD80ABC5E574D73EB05421325080B4A8131495ED3
	75B99BE6D6CE44B0C5CB09D22358BEA4346BFDCA5A8E9F3D47988F70CE616CD2
	CFA228C602CE3A1A4FB5228A580352573108B861752D42790821894D92F4C7B1
	21950A5052F0CA1FFF81AF058FCD7C84F28AF27EA73F6804C139EAAABE453617
	920E3CC6DE5A49D3A7E791020E359DC61A8B751604CCAF9ECFC88A91FD4E7F30
	0BC7FABA6A3297B2745DEA2EF41B471C1BB494049E62E7E1261050B5E0092A2A
	2BFA9D7E89BAD6AFA82673A9877317AFF6BD7718C5782AF198FB8F9D440055D5
	096B604C5D3C1A39C78635B5C446A095A2FE3F1FF1F5AF4D45480A937DC8EFFF
	5E8F968A198F3D4C79C5C8CF146C5D5D3591055F2BB6EF39CCEDA32A1973CBCD
	6CDBFB71DF4DEAB0CCA99AC3C88A8AA1052BBC6464406BC5EE86E3DC367A3471
	6C30CE114731073F398D04E654CDA1BCE2FF08B6B29A28064F2BFEDD709C5B47
	DD423E4A129138361C693E0B45ACD28215FE7973752D1681968A1D7B0F632D8C
	9D388989A347E0617875D376B4543CFAF88CC20EFB19EEC6A12D296C552DC638
	9496ECDCDF8875307EF264FCB087F7F71EC5BA18E71C73E7CFA5BCB232198D86
	60BDB1B286C8242FB9F3C051AC83DB274E62DCCD1E67CE74B2ABE13802CBDC27
	E7515159998C4643B156D510C5E0FB927FED6BEC63DD3132A0F9543BBB8F3421
	B0CC5B5045794579E923E98A3E8A38402A45FDFE06AC85F193A7F2C0B4BBC95C
	CA628C258A7AC9E60C5EBAAC5F303168359DE3F59535582BD0BEA27EDF11AC83
	BBBE7C0F5FFAC2387CADC8C78638EAC5C9347ED9887EC14AB0D6AFA8C122D15A
	B073FF519C837193A7F2E0B4BBE928AACBCA3441D9887EC13E83A5B4A0BE8F35
	8507A74D29C91AF449AB6800778E0DAB1712C60EA5051F1E388A71307ECA3DD4
	7E7B1A526BD241C0C1A6762E5EEE21171A96160FDF7DB0A4B0DFFCF829A2BC45
	2AC187871A93DD7AF7649E9E351D253561EC38DADC85953E914D62E5A1586FAE
	5948145BA490EC3AD488733076D26416CD9A8E529A542AE05053866C28880C54
	170FDF2558616CD143B0D2A98083C73364F309EB7FB49B69905CD575C77FE7DE
	F7FAF574F7CC48331221A9D840552C16072B29CB7C3294CB2E27C562192F0542
	48C6541C524288A5289C6F38225BA54825AEB24991A4586CA72C0A1C1CD96063
	3346328C202005D0A025CC20A365B421CDA29E99EE7EFDDEBD371FEEEDD668A6
	252425994F1A49FDFA5FE7FEEF39FFF33FE79DB64A766CC8C321291108E2CE1A
	CBE4C43853D5090441C73151140378F34D342AD22801A5A2203A957F969C6C76
	B58AD8B0F10586DFDB0BD0B12FED8467763EF2F37483C321224C57A7A84E4DE0
	8C17B49116AC75681D214ABC4DAE631050A24089B7CC95464411857EF9B98141
	F61FF47AB15323FFA1D8022EF0F65D75BA4A757202679DC7A514D6055C22DE26
	D785804B40A98EB87E3AF00A070E1E390F5CB36E88355801E5FE7F709D13C100
	F68FECE227FFFA30A234B55A8DE9E929D2B489039AF53ADD7D8BB87AF92D5C7C
	F9950890C4314A470180228A1394084A2BB452C11CD0E848F3F44F0618DED399
	605A2B881300A6C68E313CB48DA12D038CEC789BC6CC345A84A8AB8C209ECC5A
	91E5C68F651B357AFA2EE09A2FDEC2473E7605C6E52804A575F8FF2ACC6B227F
	3122EF60C5514C2149F8D9A6FF3C2DC1E6E1DABE95A12D2F32BC633B8DDA145A
	145157191DF2A788903B0B16D27486DEBE0BF8F4F2955CB4E40A8CCDFD256DE1
	0A9758B72E6C14215A88A3028524E1F9975EE3C0A12367856B64682BDB070718
	DEF1368D9929B45227E305282D64C6E2ACA5D9A8D3DB7F01572F5FC947FF97B8
	CE39831D1CD9CD0B4FFE83CF4CE1EF8DB5182CB57A932CCFA8CDD469A6759452
	98DC606CC6E5577D864F7DFE062AA56E1C5E41254901A563B48E480A31FFF1CB
	41467EB3AF4D309D247CF7EE9B89E22263E3E3D41B294A87EF5520485B00B554
	9C520A67213721932121A3811615A60882C93304CB9265D770D5E7979314121C
	06251A9410C7115A1748920203AFBDCDE8AC4CA1938447EEBE095DE8E2F8D838
	F57AC3E312DAFB0B2E14E53CF73D4324E257A482FC47A9B62E512258E75078FF
	4539CBA5CBAEE6537FE47159E77B2B44111722B48E4992848157DF62F4D0D153
	707D77DD4D448522C7C7C7FDD43EC44BD4A9B88C315EFFF8C913B9B1B8D0353B
	2CA220426308B842BC2E5D760D579D03AED38E8C6697C4D9BF8F8EF8ADA856F6
	37D61047059CB39860B61863B0B94569858810C511D5E919C6C7C7B1D61F76DE
	6CD0BDD0DFDE8B2FFB38B1566CDEB68B3DEF1F9897C174D2C5F4F807FCFAE9C7
	19197A8372B98213C589A92AD513D38816922822770667BC691F698531D6FBEC
	CE132E373922DE4DF0293F8CB5946ACB8C2C6D505AD8CF67BEB49A8B2EBD1C11
	78F5AD11460F1F9D9729DAB89E798C91ED6FD055AA80284E54AB54A77DF68AE3
	086B0DC67849A0B4C2E6D6CF2CF1076B728328F1EEA756616906222501A7236B
	36A82C5CC4355F5EC5451FBB02A5CE02D7D38FF978952AD876BCA610AD48E288
	DC1A9C694995D3C54B7CBCC2C5054BA4F4FC787D7935172FB90299836BDE10B7
	932F36BB653A30BC8B5F7CEF1F41BC76CAAD4509349B19C618E2C86F103967C9
	B2DC670F25601C85424CA399E102F3BFF3CC4B681D02EFE00B5F5F4B945402C1
	D6D289F82E207B79E3065EF9F946721C8B7B2B48580C6C66398D7A0D630C2D37
	D138E7B38B9210241F446B1CD65922AD50088DDC30315D67F4D8098E4E4E51AB
	A528E0D6BBFF9C28298583BCAD332EE7751F22E82866C796015EFAD113ED40A6
	0197B3A6352EC518E7670B0A30C17871CE1B1138222D28140D63989C4E193D36
	C991B113D41A2902ACBCEB9B24A5EE73C7F5CC1364CD94B89090E6215EF9A9F1
	D2C1546D81350EAC3158772AAE6A3D63F4D82447C7AA4CD56A08B062CD037455
	7A66130C4E97C5E61EEE81E1DD3CFFF8C398DC972380486BA228C23A8BD21AAC
	2F05D639B4F21943294D33CFC8B20C506805FFFCE3CD2825AD7E81EB56AD4127
	654FB0391B0773C9BFF9C73F60E89517D9F9FE519412ACB57E7935B71493884B
	7EBBBF3D6F06C7C0B65DEC3B741C63ED29CD8A17F76083C5E7E5916D0B72A514
	5FB9E37EE26220D89C8D838E1760D63FEF1DDEC933DF7E88F70E4F901434175D
	D84FA958F04D92854D6FBFCBFEC363341A69585E21C4C4FB03361CB673B49704
	54C8C05FB9E37E9252E5BC70ED1BDEC9C647FF9677478FE38CE392DF5D4477A9
	D8BE80BF1E7A8F7D87C79899A97B511F749AE2CCB89408377EE3BE59043B4389
	EC94CD464776F1DC637F8F0026F7466F1C4544C115CFF31C5182350E1569B428
	441C5A3451AC7DBACF2DB1563CFC6FCF13471A258231961B6E5B332B837D7817
	A9CB15FEFACF563279E4108B17F70230FAC1094ED45222ADC87383755EB86AAD
	429014B9B134F31C1C180BBB7F7300518256D2CE2E383F5332B963C59DDF3C49
	B0B3E8D6DCAC833E30BC9367FFE96FB0C07FEF3F0EF8199A20BE9C87313281CC
	88EF7601AAD30D76EE3D481E46F5618104AD20CF1D37DFF9C049829D07AE8D8F
	FE1D006FEE3982844AA3C31C8E30C2379636E99CF356870BFBB1C6F9AD995D7B
	0FB665A5C91D37AD798062B9D299607375D7EC34EB9C4394E29D577FC5EBCF3D
	D55EB5514AA104D2AC8908443A22B727196EAC9F96F8074B5BBB3DFAEF9B88A3
	08E70C22C297BE7A237D7D9E286BEE7B707E7B3DCBC46AE169FD44C5222F3DBB
	81A7FEE5DB443A218A14FD7D3DF4944A1C3B31C3D189E9F65E903116AD04631D
	C63976EED9EF4B42D04402889670F08AAFDD7E2B0BFA1702F0B53FB9E79C7089
	0843832F32B8F1879CA835D87F7802D1A0F097CA777CFECF162F152CBE74B69E
	A7146CD9F11E1A41B40AB884D55F5F49DFA27E8FEB1BF79E232E181A1C60CB73
	3F647226E5FD8363E8B6CFEFB168200B030E3F97C811D14878BA733E4EEF8CEC
	F7DA32E05A75DB4AFA17F7CFEF223B7AFA731DD8F6566D8DEFFFE53AD2CCEB9B
	CC58CA5D09C5A44096F97AAE4530CE81F18B7838D0DA8B5E25F0C88F7E4514E9
	F677DD70E3F52C5CB80080BBEEFF5687409D326C982F129D0BEBF06B71A299AA
	A5EC3F3A062627D21A672DBDDD253EF23B8B49B38C7D8727A93733DE19D98FD6
	BE9373161CB65D028C73DCB27A050BFAFA00B8FD4FEF9D7F88B36FE5AC8DE2B9
	B89E58BF8ED4F80F983C071126A753C6AB33BE19520A672DADD74C8CB1E84887
	4546C79BBBDFF7072FB4712D6CE1BAE3BEF3C2559B99E2C9F5FED5028B0B5A4C
	989CAA73BC5A83F0DA8A710E6BFD1A776E7C056A3DFECDE1BD61A2381F574782
	49277C73062D69BDC6F71F5A47D3F8DB514F332AA584CD6F6C0FBB1D5E1F5EF8
	5B7D2C5B7209388B75DED0B4589483479EDDE4CDCF4098E537DEC0C2BE058070
	D7FD0F9E6A0CCE4FAB9D6A008D7A8DC71E5C4B661D88226B3629978ABCBCF59D
	20A283E91AC72CEE2EA110AA4DC3EEBD07DB5A90F686BCDF5159B1EA6616F6F7
	01C2ED6143FC8CB83A1C64A35EE3F16FDDE9DD6D8134CBA87415D9BC7507044C
	0E58D4D7CB472FE8E7D8C474288D122C167865E85D2251ED372456ACBA99BE16
	AEF002CBF9E15A4B661CA28534CD287725BCBC7547D05727715D7CE1220E8D4D
	911B131A07D0285EDB394214AAD35C5CA7CD609DC6B9B3E996D66B3CF9D03AF2
	40B034CBE92E15D9F4FA5B584BBB7CE6A2B86CE952FA7ABBE92977F976376B12
	35A6F8CE8617E8E92ED15D2E82B57CFAB39FA5D2D31D32D883A749F7B35607E7
	12CD191AF5068FAFBF8B3C0FB8F28C72B1C8CBDB868296F024CB44F1F13F58CA
	A2BE5ECAC584282E509F9962F0D5FFE2C8B171BA4A5D544A45B2469DCF5D7B3D
	E5053D2183DD73DEB89EF88B7564C6A214A4CD8C72A9D89E75B53E922BC5654B
	3F415F6F0F3DE52E94D6B83CA57AF8101B5E788DDEDE0AA5628CCD73FE78F917
	E95ED01B32D8BDFF47B8724AA5A43D373B232E93D1387684A75E7C9D9E4A8572
	B9489E36F8DC75D753E9ED20F23B11CCD13973346A357EF057F7504FFD727C6E
	A1106B06B76E3FC97C0BA908975EB9945BAFFD43926291AE62429AC39E03C7F9
	60620671DEE033D650AB5B9C8ECF4CB0B3B8914F3E74378D664E1C4734B39C62
	2166709B1F80B6889F3A58F2892B5975ED3292AE024A62F61E9DE2D8C40C22AD
	96DC604C8E5365A4909C996067836BFD3AD2CC5B39696E2826118361FADCFA68
	0AFCDEEF5FC9EA6B3F49D255A49814C9AC63CF81B179F172523A89EB74043B0B
	5CDF5BBF8E466688624D33FB105CD77D92A458242916C9CD87E3FA1FDACE3DCA
	B2AABEF39FBDCF3EE7DCAAEAAAA61BFA491B9B06041A92C94B1E26685C2B2E19
	458176228CA40D282A4A83DD2D81896B92A5DD601C830E229918356064191D67
	AD4C9295894ACB6446410234461B1B10E8EEAAEA7ABFEFFBDE73CEDE3B7FEC7D
	4FDD5B8FEE2A56F8A357FF73EBDEEFFD9DDFFEEDDFE3FBFDDD5577F2E727C58E
	769966198D5A15AD5D4E1148957356F1ED895663530432BF7C4420FD98468090
	A85071D7812F1047D18AAA48BB80948275AD068BF18D5E4DAD5E25F1CA51E3AD
	D5EA6CBB595B001864A07CB21DB8B02E0461E488378542C467FFFC1BC451B8BA
	99DF8239A4B516ADB3795C0D8FCBB670C905B8EC6B826B2141DB588DD19A2CCD
	5E135CAB9E453A27F275847134AA91A101D78792122902E238F6E578E8925715
	E4CE660129025749098190AEDB1F4511771DF8EF2B76B0850FD139BD417BC50D
	08C646869DE3FB881A889C398D6A19C96312423ACEA01048E1C9D32AA4AB10F3
	D9FFF12A1C6CC120DE589DA7180E57DA864BE4B6556D0FCFFA8319A8E035C465
	F2ABEAB5C0B52A070BC288AF1ED8CFD0B1A3D42A655223481B0D7EE9824BB8F2
	9AF7B171CBB63C4B0BA3081528A41284410CC2FA799DF0C36FE75C4E152489E3
	88BBEEB97F550E268540441120294E8E72ECE8117EF6E4631C3B72987AADC6B6
	F32EE2CA6BDEC7999BB692656E8210FA81B6EB2749872950EEBD849758489133
	F3BBBABAF8DC5F3CB2AA0729038950EE8A284D8D71ECE8CFF8E9133FE095E79E
	A159ADB2EDFC8BF9AD6B6EE4AC4D5BC9B204632C51E8711937B69181F4B8E46B
	8FEBC833D46B75B69D7F1157FE3BE35A9D83C531F7DF763D41A430DA325B2AD1
	68D4D0997544D02C61E7A55772F97FDC45A1D045202571214688C0294F954204
	8163322827AF10FEDAEA2A14B8FBDE2F2EE960520884521086E87A83A1632FF2
	FCE11FF3F3C34F30D6FF0B27FF8EBB1181025CB98F3424A9C166193A4BD979E9
	955C76D575A838765734E48632184215FA46A77404DE501186215D5DDDDCF797
	DF5CF2413A5C2184CAE17AE5799E7FF65F78EE9927181B70B8C2A8CBB334848F
	0896546B779DA70917BED1D94B45B19F2E385A9394028325542A1FC00742BE2A
	5CC3AFBCC8D1677F3C8FCB401477399B22504220A4A5996A6CA6D13A65E7BF13
	AE450EB65485DBEE607FB1EF7D8820243306E31B85CD3473836CAFC448D28430
	0CF9CDDF7D37975CF11654A08894F211CBE97502E538FF3290846144A110F3C9
	3F7DB0C3C1EAD52A470F3FCE8BCFFC88A1E3BF20AD943042626544E0EF3BAD2D
	8184446BB06DF44B3F7269258E9931E834258E237EE36DD772D1A5BF45206447
	775A29E5733481520A1586F4AEE9E1BEAF7EBBE341D6AB558E3EF3235E78F671
	865E7989B43687468208113EF7B4C6785CA6ADE9D1593D199F9F992C238E237E
	FD77AF65E7A5BFED260A5EF3E970853E17920E5714D2DB730A5CCF3CCED0F117
	9DBDA4C48AD0D1773C8BA21D577B762D45BBBD343ACD727BAD08D712F65A7504
	FBF2FEDD3E5218AF2E816696618CA6916634EA4DAAD5B2EB1E07018D5A9533CE
	DCC8E557BF97732EFA15304E73AE648BAEA3502A644D4F37FFF5CFBEDCE160FF
	FC9D8738F1FC61CAC51273A5B2777E37BB6C11AD4DCE9BD37E0E6AC9BC9016DF
	116F25AC8E35219D90A5DE60DD86B3B8FCEA1BD87EE12F63B22682C02B670471
	1811C6116B7AD6F0C043DF216C7B90FFFCBF1EA2FFE7872996CACC15E7B0C6B1
	0D0221F2F192C9C729C6E52FC69059E3D53D26275DDA36D644661D176BFD599B
	B8FCEAEBD97EE125E834F1D791042188A388300E59D3D3CB171FFA0E513BAEEF
	3CC489A38729958ACC154BDE5ED2EBFB59C65E8B71193FAF0DA5B387B68666BD
	CEBAB33672C5BB6E5815AE153958EB052A8E78E08EFF4C1C77217D13D225EDF3
	63F734CB68363332636936EBCC154B442A0009F57295CD3B2EE07776ED66C396
	AD586D0855401C17E8EDEBE3C0FD7FD5E1603393631C7AE441A687FB89BB7B30
	D6522A952897EA044AB8999E90647E44D1EA785BEDE6881837EA304693694BA8
	02A77593BEF0F07DB172A5C8D61D17F1D6F7FC3EEB366CCE99069152AC3DA38F
	07BFFEB71D0E363339C6A16F7C89E9E17EA2EE5EB09AB9729972B14AA02441E0
	86E89936BEC075DDEFD674A0359232D61D04A5DC94A1B5BBC01A376F2C958B6C
	3977276FDDF57ED66FD8489A24C4518452216BCFE8E34B5FFFDB0E07EBC4D583
	B59662A94CB9348F4B08998FA8ACB5EE19B6DBCB1A57556A4BA8648736B0B54E
	A25C29B2F5BC9DBC75D76ED66FD8449A24845144B404AEE5F5CA4B5C954118F1
	A57D37128621DA677E2D66A8F16D0B634D2E840488E39054678C4FCED0A8D550
	2AF024C48C0B7EF3B7B9FCEDEF614D6F0F7DBDBDDCF7956F138561470ED64A4C
	5F78F2FFF2F8DF3D42A35EA3D0D34D9A34999E9923CDDCD8290C14699679A6A5
	001CD911204B35A9B57EE6293BBE97C055C508499635416BDEF0C6B7F0A677EC
	A2D055A0BBBB9BAF7DFB9F087DB2DBCA755AB89E7FF2319EF8DF8FD068D42874
	F7902409D33333A4995B39D6121C7468CB3D2539D399E360F9D9A0DFAFE3FE97
	B8D9A310A45902D691FDDEF48EF7502814E8EEE9E6ABDFFA3F1D0EB6242E6FAF
	A4CD5E81AFECD3547B7B392E84C93C472DD3A4C6E633E24E3F9028C7AC24CB12
	D0860BDEF866DEF4CEA5719D9A70D8AE2A01541871FF9EEB09E298D04FFE1B4D
	C7032B14625410B868613446DBDCA851A8FC1AA38C5AA3E9C3B79B71993425B1
	70E93BDECB4F06AB28CFD15F24AEF7777E96A63CF94FDFE6A73F7C14152852AD
	A9D7EBD4EBB545B32DA502FFCD5C2449B52549D2B687ED2A4721848FC8D6F1CA
	3DE31529B9EC9DD7F3DC44969FE085D55A27AEFFC9B33FF807541C6111D4AA75
	EAF5FAA2D31A042EF76B8961B5D12469E671792793010179D0C8ED62751384E2
	F277DDC0736369DE025A0DAE6AB54EA35E5FB4504129B9C05E9024CDB6D74984
	67124BBF842BF43998D10956045CFECE1B786E621ED78AE93A588B8A621EFCC4
	8DC42ACE590908976B24698A3696EEAE984004243A436B8DC4D381FD50BBD94C
	09247CEFA9E719189B72C9B0709FB2EBD64F62FD3C67B93685B51655E8E60BB7
	5EC3B1F10ADBB79E495741A133679466B34992341D3609D6538A82C0B1275A0F
	DBD1505CC48DC2802CB3549B1963332586A666992D57311AA430DC74D7BD58EF
	0DCBB5035A8C93208E294D8E73E85B5FA1FFE84F08A32E2CD068363A71E996B3
	81D6AEB1E9684BAE29DB525D675A534D33C6A62B9C9C9C66AE584503C25A6EBE
	FB332D2ECDCA704D8D73E86FBEC2B1238789BB7BC02E812B6B316F5D6BA2E55C
	99712B928C5796A799A6DACC982CD6189A9A616AAEECD8CA586EBE6B1ED7E22A
	B2CDAB1712D6541CF3C5DB6E802040A98048295AF1DD3512254992001045519E
	A7353DDB55054EE0A133CDA34F1D61706CC6BFB7BB16AEFBC8DDCB3A58FBDE33
	55E8E6731FBA9AE1B9845ABD49234D58BFA687735FB7813008DCB519082AA58A
	E336B9B39763AC279AF1B93243E3738CCF15C95237D29552E491C6688B0C1C8D
	79F7FE0358967E902D5C6201A94F088135967B3E741DEBD7AF23542D5C01E572
	29BFCEA5704B23DC624ECB54B9C6D0C41C6333459ACD14308EEA249967580412
	6160F79D07F3DC7735B8829E5E3EF78177D2DDD34D20646EAF72BBBD84F04A28
	67AFE94A9DE14987AB5E4F568C6B955564C403B7DD80504EE4DD0A837118E549
	B60804566B922C2308948B387E3F4C23697AE6A9E4D1A77ECEF0E44CCE8B37D6
	72ED87EE3E6D046B71CEFFF4E6ABC86444FFD8DCFC5E1A9FBC6ED9B0962DEBFB
	1C435542B55AE71F1F3F42B15AA3D5B816016D8A229373CE85749A82C0D37B8C
	85DDFB3EBDAC832D8E16F38D7215C57CE68357536B1846662A6C39AB8F8DEBD7
	122857E6576A0DBEFF2F2F30532C9169E34768AD2BDBB9464B3B2004B9B0BEC5
	9BDFBDFFC0B20E763A5C7FF6D15D182B38727C8C6D1BD6B275C33AC7DF9350A9
	D6F9FED32F325BAAB8CD071E57E02724ABC1B5EC15B994E043C5119FFFD8EFB9
	9576CAB5045AC3E34039F1B8B52E498C42BF87C757792D8A47209DB0FEBB3F3E
	C2E0D8B4BFF12D01F0AE5BEE3AFD15E91549DFB8EFD34C0DBC40A99E313C5924
	493542382DA6B596A6362821D871F6994461C437BFFF44CEAE0D03E5489252D0
	CC3277BDCE4F0E3D75547A1DBBE1C6BDA77730DB2EF3F649AB73B07723A4A47F
	B2E42474494AA442B66D3C83288EF8E6F79E70ED0D2128C4112A94D4EA29998F
	70F36D33F7BEC2F7FAACB5DCB8EFF40EB61CAECF7E781742495E3E398DB18624
	C99052B0E3EC0D1422672FE5D72A4AE1B446511CFAC2CE1086111843A99939A2
	E932B872075B9242D4FEE5AC638D3E70FBF548A5B0C625F132C0E564D6B83535
	6D4EE72A09579AABD0758D33E35434DF7BF2398E0F8FB94E8D009D69AEBBF58F
	1639D8528E2EAC454AC9E08957F8D447AE67FB39E7D0D71D33536E303255F2C9
	B3EB8769639C265182124E5A564F1377248DE6C593E36469EA8B1917D1B47579
	A1B16E67EA1FEC3FB8C8C196C4B5E03A5251CCE76EDD45200326E6AA4C976ABE
	D27312BAA499E544C756235648810A0499361C1F9E6074A6E8137CE1C5181E97
	D1FCC19DF72E72B095E2FAFCC7DE830A4286A74B8CCF56B15E9E1648412369B8
	098735E81641D21A5A340121A4BF4A0553A50A33C58A93182C816B4594E9F646
	EB03775C8F54917B8D35582111BE1BEE9A8A01D6380708238531966692110581
	CB35AC25D39AC70EBFC8B19363E46A016378F787EF7628251CF8C3DB56440156
	3D3DFCC94DD7313E3C4AA12BE6EC4DEB88A290E1892253A59A6BAE02A9310480
	3696CC6A54A030DAF0C289619A6982B5764111DAEA481A7EFFCE7B725C772E51
	ADB52FA91042CC1FC828E6FE3DFF09846BD5BC3232ED2BC1791648AEED14A094
	20CB4C5E3D6A0B8530E0D04F5EC889862D47C75A76DF794F7EADDF79EB0A70B5
	1ACE51CCFD7B7E0FA92232AD79BE7F1CE9A71D8ECB37DF6632380AB9D5862473
	7AC956AB0504A3B373CCCC9697C5B5EC0A27B1CC755929CEF0D8B7BECCC4E009
	2C6E2E15791A7492A6A820F05D694B28652EE80C83C051668413A31E7AFA2827
	C7A7E73FC3586EDDF301325F0D7E74FF9F2C4913CA85ADED2732544C8C8DF257
	FFED8FE97FE9654420E9EBE962E3996BC98C6568B248B591A28470EC012FDFD1
	DAF2CAC83875BF15A99DA1E10CE4B0FEE11FEDCB9BA6EFBFE5E32BC625049466
	6779F491079938798C9F1D1B43229CE2CFFA2D4C523AE7C5821498AC557048CF
	7D170C4C17199F986A2BC224599671D727DB702D49E53E0DAE6FFE399343C7F9
	D75F8CF8D9AC13EB645AB775F4DD3273D7253044A1CA1BB5420A86C667992B97
	97C5B572466B5BA80D02C5C39FBA8366BD92537AC93BFA7EC999A7C5B4FA6171
	ECF842125061C0DFFFF05FE91F1E773C78C06ACDADB7DF82CEDC89B96D2127BF
	7D11C79294694BA002EEDB7F0B2F1D1BC064CED99514AC3B630DEBD7F63257AD
	313653719DF220C05ACDD11323349B4DB4B1FE543AC183B54E09A54DC6BEBBF7
	A1BD18E4A60FED3D3D2ED1498C0F64C0D73E7507B572897A336178B248334911
	81CBBDD29653E10E80D116154844E007F7027EF4B35FE407201012AD33F6FF97
	FDF3B83C27FFD4B8440787CEE1DA43BD52A19E240C8D17A935535CCB4DD04CBC
	E0437A02A671632F8B6B02CB40707C6482A962C99F0FB108D7A2DDB62CB3CC49
	78706E6BA8E491CF7C8272B9489A66BE0B0D7114E70AE150C95CF081F08A1429
	9D718CE6D0D3CF736274D2F3E05DF5F1810FBFBFC3C1EC42D102628188A1F341
	0A21F9EAA76EA7562A9119CDD87499E96289C8375295526CDDBC9EF56B7B3839
	3EC7D45C959786C79DF45F883C8730FEB3A47044C53D9FD8D3E160AF06D74307
	3E4EB534E7F63FE0A268B5913253ACD3CCD29CFCD87A3B9D6957F6FBDCF0B981
	312A95CA3C2E6DB9FDCE3D1D0E663BEFC595E1FAF4C7A9964BA45A63715B626A
	49C6F46C959A5FE56D5B11D6589A995364495F350E8CCF30532C2E8B6B69075B
	D0C1170B886A424AFEFAE07E9AB552BE6024CB34A39333BC3C38CAF93BB671C1
	B62D208CEFFE3A0DA0B686344D31C6F0C39FBEEC1CCC5B446BCD073F7AD3F211
	6C61936E610473FA39BEF6E9DBA9974A6ED4E1255743E3D3F48F4C12C5111BFB
	7A49B38CBE9E6EB66CECE3BB4FBF4CA55A993FEDDA627D4E68FDDE8DDB3F71FB
	F2116C85B81EEE789016AB9DBD4E0C4F72CEEB36D353E8F2EA22994BEA2CC655
	B812FA47A6992D97F343AEB5E68E3BEF583E82AD14D7818FBB03A9357A095C5D
	85425E9CB47231D3C6101E1C9FA158591ED7B2116CB1B2C8A77E5EADFDF0C1FD
	D4AB45B7FACDCD3B189D9AA17F68CC51762C480C6F7EE37FA0AFE0775758F208
	F683A78FD23F3635DF1CD0969B3FFCFEBC1BDCE1604B2DF75A241AF027F2E05E
	2A73732E7A0246678C4ECE32383AE9927D0B4992F1FAB337629294421CF2ECF1
	51926673E1DB797FB3ECD9B707ED717538D82A703D7C702FD552D10DE6AD1B0F
	8D4ECD3238E270397B697E7DE705D46A754AB5D4374ADD871C1B1E676AAED881
	EBF6765CED0EF6AA70B5B6066BC6266619E8C065F88D5FBE804AB9C66CA5D1D1
	893F3E34CE5CB9B22CAE535E910B23590BA873B0BD346B15EA8DC4893E32C3D8
	F40C2786C63C3FDEE5D26BB6BD8EED5B3671564F44B74D10BEBDF1DD278F3038
	3E955369D224E1231FBB2507963BD84A256BDE605FBF671FD5529186EFEB586B
	199B9C626064B215E5D1C019BFF47ACE397B332249981939C9D0748913C3931D
	530C632D26D3ECBD6BEF62075B25AE870FEEA55E2ED24835AD7A7064729A81E1
	C9FC4F737B6DDDCC995D0195C929A64B35B2CCF0E2E008D3C5922F6C0D2633EC
	BB7BEF62075B35AE7DD4CB732BC3B5653367F50454A7A7999CADD248342F0D8E
	B8C8BA0CAE251D4C2C5151B6AFF56B5D91B5CA2C995B948D1470727C8A01BFE6
	C86F4D65C38EF3397BF306D6F6162844EE47D264A3C6A1FFF7144353B3ACE971
	F2309D245C75ED35DEE1ECD2C2DB6527F2AD90E30C562BCF9166C6EF02178C4C
	4C3230DAE66016369F773EAFDBBC91DE355D14E2186D0DA3032779ECC73F2152
	8ADEBE5EA24090362A5CF3BEDD39AE9B97BA225782EB8073B0546BB405256078
	628AC191C99CC2EDEC751E676FDEC8DA35050A8518632DE9DC2C8FFEFFA7982A
	56E8ED5B4357A8489A55DE7BD307E7712D7545AE00D7D70FEEA5562E92669EBB
	866078F234B8E218834197CB1C7AFC198A950685AE026B0A1149A3C2B56DF65A
	5192BF540EF68D7BF7532BBB2BD27AF9FBE0D038836313F9CE076361FDF61D5C
	FD965F63CBC6B51C1F2952A925A840FA95029A4CA7C46181665223155DF9DAFF
	3DED116CC9A4D02E79221F3AB88F7AC575F6F1C285A1F1096730E123AB8533B7
	EFE0AD975E8215927A53132899CFEE32ADD13A21520E57B476738EEBE6F608B6
	0A5CAD4891646E601C0682C1D1494E8EBAA8D9C2B56EFB39BCEBCDBFCA968DEB
	383EEAEC150432BF56B54E89BCBDA2BE4DF3B8DA23D8ABC485757B334E896BD3
	3A8E0F15A9345AB8ACDB0FB70CAE535F91CB48D00329F9EB7BF75329171DB74B
	431409FA87C6191A9B700A6AE3FE9DB9E35CDE76D9C5BCE1DC0DC47117852866
	74A64CFFF02C8D24456031BA4933D12414F20F3C65045B542DB55F91FBA994E6
	DCAE07EB48738323E30C8D4EE6B8B477B0B75D7611179EB799388E2956334E8C
	38430BDC2F0E68DDA4D9CC08FB36E59F71CA08760A5CADC89A659E2D1A48FA47
	C6191E9BC7652C9CF1FA7378FB651773E1F91B896317F54767AB9C189EA5D94C
	1162DE5E61EFC6795CA78B607675B886C62673B1478EEB8A8BB9F0DC4E5CFDC3
	B3344E81EB94556447A3AEAD8F321FC14A645986B64E74DB7F7284A1F129FFE3
	2A0EDCBA1DE772D59B2E61E7795BDCAACC406184A3A2580B27274A0C0CCFA075
	C64CD595EB7639076B3F854B88488577FC5AB548EA191202C1C0F02823BEA9AB
	7D7EB86EFB76DE7EC5AFB0F30D9B1DF74A85041284548C4C94189AA8A0B5138C
	A4B2DB29999773B095E0BA671FF56AD955D1B862E7C4F028A3E3D3B983590B6B
	5F7F0E575D71313BCFDF820895DB7F2A4129275671F69A426B4322BBBCEC6E19
	075B252EBC7CEFC4D028A3138B71BDFD8A4BB8F882CD08A19C904542AC1C0379
	60A2C4E0D014C674E2FA37E6BE35B8AEAB4AF3DB7B9F73CFBD57D2952C4B8E1D
	C7B6EC3831744C0AD25553D3CDBF999A1F3DD5D3BC6912260950F434CF99A9E2
	51D04DD25343F54C014DD23C66860E0D53439A26090192F04808105E0D0DE989
	13873CF143B62559EF2BDDC7B9F7BCF6DEF363AFBDCFB9D2952C199B1EFD89CB
	72A47BBFBBF73A6B7DEB5BDFDAFE5CE4768774D7BE593BBF2835C0B51992950A
	7144BA2492AE584933B71B71B851A972C6CC060D90A99A75FD6182FE8D76DFCB
	AB61EE5A1C166C4E6082C3CD519A411163667BF7FDDFC6AF9EFBB59370DBAFAD
	8CD36D697079ED075E1820EEFD2B931B592D962617C2388ED08D22122E2A2712
	64D426306B5A0813DBFEE14632ADB59147096146076D6783171FAB9CB997C898
	A0B13E064646C98C0BEA4A0804BE87AF3DFC239C983CE7863DECD7760682B78D
	61DFCBA48CEE8F14B9B207AF2E6900A59BBA61967F541A8C6610ACCCDDBE5FAD
	CC99121E7778BA8D27D483E5DBC4EBFE877F8493BF55BCD6DECAFCAC29258DB6
	00A66E915222B98C785DCCF9DA08AFCB16C08A5F5266C8D214691CA1137610C7
	1D44DD089D561361B38E4E6B05B5F1AB30BAFB4A5A2D463BE084596A006E0C8C
	15092D38335352368D0033818D7B3C6F4F7A9E13A1326E5C0A9C42BAE0A2CE91
	3B1A987922014F70DCFDF5EF5CF20076C14B481157306E06B7EC7C489AA21BB6
	D0A82F6179611ECB73E73038328ED13DFB8CA75F268D6C9F86E9E94D3B51292F
	F80D33CE5C0264D4D9F43080399060A0F570BCF0FF1A9595A2791980E66D0487
	601EFC928F6F3CF2E3CB1EC0F47A95B591CE096E5E3B5D16996588C2102BCB73
	A82F2C6069EE1C0687C730BA779F51D167A66D6EB64EFA6EC2317797A0B36275
	A305ECE8C4E4678F1BD6CE7A2C732EB684D7D71FFE114E9E99BAEC010C7DA85D
	8397E73611C82445D40DD1585AC0D2C21C9666CF6170781746F7EEDD102FA79E
	F967C6EBB266605E10E0D4D34FE0FECF7E149C7B905A238A22A4B1313B37C1DB
	445E9929A469174A6A0CD46AD8BDFF30267EE7E5D877F80806778C51A625DDD8
	A7F07C709A27B691DDCDBF70BB2E90AC39C8F19409F2AA578A2E6BCE477AC25C
	5E2E047CCFC3DF7DFDE14B16C0B8B57D119E092C9C01498628EAA0B9348FE585
	592C9C9FC6ECE48B585A9C4763610EADD505A3DA271368E6F960DC737A60A594
	B1B05312D5A11A76ED3F8483476FC055571FC1D0C8A8C9D86446CEB3C6C5DE0A
	85B8E02E501A451FA3600637790AE4D9AFCD88ED34969D53F73C414F481F0F3C
	FAD34B16C0FAE22525A23044B33E8FA5B9392C9D9FC6CCE9E7515F5C4463E93C
	9AF5453306AE337369BC122D0C34D3B94A9AF166A524AA83355CB1FF100EBDEC
	77B1F7D0110CED188596CAF8286969F02A8C4F732EC84ED1745F79E102EAC250
	35177C0D5E7C43BCBEF1DD9F5CB200D617AF5422EE8668105E0BE7A7317BFA79
	2C2F2E62756906ADBA3D5FF490F74B60B47A983113CC6596005A3BBC0EBEEC77
	71D5FF67785D96006623B008029C79E6493CF4371F03F77D68AD9C0A0DE0AE2C
	8AA2C86CA44C62D331D51AD4E03546EE6902E1098C8CEFC1FE975C8FFD2F398A
	B13DFB50A954012DC1C049F762FE2B9807A52584F048236D06378D2D90705918
	276F6FC6CDDC15631C4C1849C897BFF1089E797EF3002604073C1FB0173DCD10
	856D3457EBA8CF4D61797E16B3674F626EFA34C2D526C2D5652471D79479DC06
	4D1F60DCC86E99E96141E7E3E8BA9069384B1B664A6245449F54E4CECB391419
	71F8251F2363BB71D591A338F092EB31B6E72A94AB15C82483D2196C8B930B01
	C184714A86767FB6878E3313F48510865B21A71AEE71A39B17C64AE9C1EFFDC3
	0503580F5E4A53506AA3B9BA82FADC14EAF3E73173F604E6CF9E46BBD9447B75
	1171D40167E6627A9E00B8F9B32279AD297C0A78D9DF55689659398AD2A64B6F
	CB4ACE05944AA1B314C2F3313CB61BFB8F1CC581975E8F9D7BAE42A552854C33
	4895999F0FE3F46296B06B8317FDD92E84B05E654270FAF7E451E60908EED1F6
	91000F3CFAD30B06B0CDF13A87FAFC2CCE9F3D8139C22B5C5D421247F9F9E202
	E03E403EB00274BEAC2E8CD6DFBA81143B244CBEFA76F7798E178322E312DF37
	E76BDFE5C4AB70BE36C26B5B53DDDBFD3201EC297CFB0B1F37364EB4B881BC94
	495DA1698997767E097192214913C4718C344B1DEF63CA1F6DB66464299494A8
	0CD5B0E7E0353870E47AEC3DFC52D4464629BBA5091D2E2084B96C8C4EB3A091
	3B572691B715270BA220F0F1F70F7E0FCF3C7F62C3002682008FDDF3B7F8A7EF
	3D806E2744942400F2FD469C323A660D582C6149E5B1243F548E7C058ED230B2
	68EE282DC7EB64AA7775A7B4C437F10F9E2D13491D28B572F219AD8CC11C5486
	EA500D574C1CC18197BE1C571E3A8C81C11130AE295BA39FCF193CAF647C74ED
	143C27AE82325AC1CDD3B1E49BD5310F3DF6734C4E4E397B85B5175204011EBB
	F70B78FCD16F200ADBE826A909338497DD11654A56E5F072F6069256D6D0434D
	D9F7ED7897DEE1986CCDAA53ADCD90300373AB988B5D17ABFFD330B39F3A33D9
	4575B086DD13D762FFEFBC1C7B0F5E8381A11130A629FB28E2E5BB40CAE883CF
	1F8CB4E3A988D70F7E86D367A6DDF47B5FBCEEF93C1E7FF401449D10DD75E7CB
	CB45BE1C7DF162B45C44923CCC9C2FD6E77CADC10B74BE88F7D2B4D9253F5F8C
	E67673A1707EBE867FAB785DBE1252035EB984B3CF1EC7B7FEF6E3C6E50796CF
	3317CC3E051DCBA7150A6D7E48699C30A324731739896344518C2C331B6A34B5
	454D4697214D138033D4C6F7E0C0B52FC3D5475F81D1F1DD08CA15F7A9712EE8
	696EB209E33AE4190B33CE313050C1BDDF7C0CCFBCB05900ABE0FB777F064FFF
	E41154866A79E7041A699AA0D38DD0ED464833E3BB62B9246B0A045630B1A600
	9D2B8472721594720B67C46D0292D666D01AD044E2C349E87B782FC6A8F36688
	7BC6E134813233D907F33C0C8DEDC1BE6B8FE2F075AFC0E8157B500ACA5052BA
	A574207DA1273CF841C9B95B09CF43A55AC6B77EF04B4C9EDD2C8055F0FDBB3F
	8BE33FFE0EAA43C360C264240090A4B1C12B8A90A6162FE1824F5EED17F1B222
	68E58297A4C1ACA29586351EB6593D88A8066507865735F3D5664A91B98D8F8E
	80068CF990CCA0B314DCF330B47337F65F7B1487AE7B054677ED4150294349E5
	96D2390302E1C10F7CE76E95E3F50B9C3EBB5900ABE0FB777F1AC77FFC08AA43
	3530EE410873BE92BEE72B6F721173D273BEECC5B29B8A7ACF17331950DFF395
	E3D5C313D24399710E8F71B7732E3F5FAA70BE7C0C8DEDC6018BD7EE3D08824B
	83D745AD22ED377BD47744D70F70E6B927F1D05D9F30AB040A5D435BBB734E22
	14AD7A52FE9E861C2DD39634EBA2C939DEF30438E7E8C631DA6188288E912629
	29EF058D29286449822C33D9DADE834770E86537E0CA896B30303C623E626DE6
	D319E310C247AD368807BEFF733CF7C24994362B217D1F103E92B08999D32F62
	F2F82F71F6C55FA1555F04E326F565DC1CBA2C9388E3D8708059424A35D02ACF
	7C256BCEED53370DBD0B0BADE399928A6C66CC2556D4D9B473E8B656E764E890
	5BAAC019859ACF232F0FB53402F3388E90C90C43233BB067E208268EBE1C7B26
	0E63A8B6832656CD93D9F30484F0313058C5777F7A0C93E7A6E0FB9B944445BC
	4EBD80D3C71FC7B9179F76789582009C825AA632C4DD18DD28469AC574510D6F
	6296C7E7BBF1B4EDD6D220A01DCE9376768C829B5DA6680DC718C923B5EDA281
	D1AE92BC642A363238F2F5B94ADB8B6E0CCAA454A80D8F60CFA1233870DD0DD8
	337135866A3B0C676907187BF07A62D300B63DBCCCBD88A3D83C04B224C78B0C
	6A45816FCACF57E1CE12068ABE67468E84918F52B6053093CDEBBC936E2667F3
	3B699B6CE6A8F59E2F451B8992A88B5465181A1EC595134730F1B21C2FD378DB
	3A5E5BB2D5D96C60B25FE0B27FEB05259C7CFA18BEF63FFE12D56AC558FCF50C
	2018FF734D17D99A6FD96D981ADA457CCB9F4925A99D9B974CD647C05A20674A
	228E12845DE34F9466A97352B39989CA52247104E19530BA67AFE1D68E1CC5AE
	2BF7637474140FFFE8713CF7EBD3CEA82C0F60EFDE5436273C01881220332CCF
	CDE0CC734FE2E4F15F62F1FC1964710C2F28C31325E2A525E23841378A102791
	B96CAECD6CBA38B6C4B4A58E7D5A79A41B327209CA68C93628A3FD8499CCDCB4
	2D032F94B23A5FE3A674CFCCA1FD45C27228F47AE224824C1330EE63C7EEBD98
	B8EE061CB8F628C6AFDA871DC3C378F4E7C7307966DA7D86F985BC759B781DC3
	C9E38F63696612599C40F82578251F02DC7DAE1D92DC68555C9E654A2333D2B4
	FEF7789EC94ECDA5A6728BCA4AA396D56458A7DD9A3B4B322B1A5C65B0995911
	29E632451B249456489314328DC13C1FA357ECC5C1EB6EC07E87D7081EFDD913
	1B94901781D753F9F9127E00DFF7A9D193E315273150C00BDC644B1C05BC187A
	4875AD7BCF97DDF792D23EC7DEF355C04B2AB7BED004A43532260A6CBEF522D3
	0A719A4226717EBE8EDE80892DE045016C630DE4667B8B8A53D0C5F6A94B074B
	01CE3E771CDFF9E227C8B49FBBB41554387A44BE662A439A14B22B61B6C49AB4
	15EE6028AD4CA640815011C0F6C96BD7F5D9C9F1A2FC25930A499AE0D7E766B1
	DA8A906619327A02C74982385588BA6D44718C57BFFDFDF02A434E8AB1D52E64
	5FBC1820BC12500AF0E37B3E8F633F7800F02BF03C8EC0F3906419E96D34B4D4
	48650699654833E3AD56A89E5C13C48EEC1323413AA44289555823ADC803CD06
	395D24B799592ACA84F9D9765FA6A08090A72A86004E338D284DD1ECC468B643
	2CAFAE220C63BCF69D1F8257195887D7852E647FBC1844C9072010B51A983EF9
	1C5E3CF6739C3FF92C3A8D154818E1A53D13499A41661229F1A228E08562C02A
	2C56E53C97E239FF334B5D684978E9C2FBC94DF700733EB5A24C8D2A09565872
	65BDDDD24C214A5334C208CD7617CB2BAB6876BA78DD9F7E08A5819AEB025E0E
	BCA64F3C8BA8B9824C69F8A532F155CA78F66D82571127D7E9E4E8395F3D3229
	F28C337815CE97332964F9F922FB5827A530263326398159A617670AAD4E8C66
	D8C1F2CA2A5A6117AF7AFB07100CAEC76B9B8B6E37CFBCD89A8026FC12CE3CF7
	14BEFD85BF729C860D346CCDADCCB92FEDF694ABCC90DB66F90643E095ACF588
	B3363542CE7C6DA17D6288C27640994AE280CC87F0F02F9EC6A9E90504441C3B
	7D9D234125FEDD5BDE0BBF3CE44C7EB69A81F5D55612305E50C163F77D114FFC
	E0013051C68BE71690A4197C9F632028A33650C6F06019D5B2E7CE91242E4629
	0D999A43972489318DE456EF45E74DE5ABB6B92D11B999BBB137D46675A0CC2E
	9340274D11C529DA9D182B61179D28462B8CD14D12EA70028C087D4E75547166
	5C498937BFF7CFE05F4400EBAFF3EAF34CA5F5A3F04AD05982A5B9193CFDB31F
	E0A91F7F07811FB8BDF6AA805766F14A5323391124A6ECC10BCEAC8815086E49
	18BA63AAC82F472A445986289168776334C32EDA9D04ED6E846E9C2225B29AD9
	0797FD01C5ADD44AE2A6F77C08C14504B08BC32BC3E2EC199C7AFA184E1CFB19
	5616665DC75EF7C36BD3F3959B7032963F1CDC68372FC44269DC6A3B69823895
	E8C61956DA1D849D04AD6E8428C9105B6756EAB4174B5DD0C33A93126F7AE707
	51191AD92C8061CBC06DADCCD4A4033B86073EF7DFE189526F34E7CC6DF0F6C8
	DBB9FF989CF9C0B5A294955AFA829CEEB9ED22D1C5B1AE63C61786E57ECD64DE
	C4003CF28B67706A661E3EF172D036A3C95FC61FDEFC2E78DB0C609B756EB50D
	60F77C1EFFF8DDFB51A9D6B0B0D2C2E26AC76542C6784141C290D125DFC3C8A0
	096A83E5328447BA1A6616DF300AE2DD28361754E7EB30924CA31DC768B523D4
	9B211ADD085194228C62C7AD59329623E7808C3E8CF58C1CE70F25EEACE54461
	EB80D6C09BDEF54194CA83B979D3162EE44678E9B55309ACFF8FF0CA553CF6D5
	FF8DEFDDFB45784115AD6E8A52C9C7C86005E54A093EADD5E082BAA630F6D316
	2FCBE7C5A9449299401E76122C374334DA5D74B3049D284112277909C7ACE364
	EE016EADA38B1CA5B65A432B5B28E2A5404BB06BEB529DCB8A5729C0A9678EE1
	BE4FFD1730E621D31A8D30C650B58C5A25A0F365F7C3180FB88CECBAFB9DAF4E
	9AA11365A837DB688411A2244618A588E3D871B68C71883578F59EAFB5786997
	55A280D71BDEF13E540647D6E1754902983BFC6B525CE19730F9EC313CF8BF3E
	66BA7C050EC67211764CC8A69E5C0804C2CB1D788990E68C9BE84C2D6F6D8DBD
	32E93E599BCE5B22D112E1193500ECD8F9F71E7F1693734B268029ACBB745A29
	FCDB8D02D807DFBDC1FCFD850F9A082A78EC9EBBF0CBEFDC87811D639099C4E4
	DC0A1A61ECB6BF83745D4E4C4A4FB88C5E87271886CA01466B03A80D94E1FBD4
	AD130C8D768CFB7FF87F912489C3A1F82CB0B20B9B41092648E0AAD7BD6837B5
	ABE0E42B8C190F2EFB4028E2F5C6777C007EBF00F68E5B2F88D7E659AC5EFF5C
	73012CC089E3C7F0D5BFFE0BF8A512008DA546174B8DAE6966C0343A0682126A
	B50A760C54E1FBC28D5435DA5D7CED474F208E62C70F16534BD5F350A3454E6B
	328462699F8F73190E97716E24404E8B6697946ABCE14FDF8F52BF007639F12A
	0538F9AB63F8DA673E8A2028818161B119626AA1E1965B08CE31580D303A54C5
	F0501565B223E50268B4E31EBC3800C50A937196AB15949C90CEAB1060F22A4D
	994A87816D8857F13DBDFE4FDE876070F8F204B0759796DE912D21BF79D7C70C
	FFB59E2B74AB568A9D235D5C186AFD3E25CD6951A665B45D462260344976968F
	B93ADD78294830533B90EF28F0D03F3C855F9F3D6FD6DA80ADB76AD7C01FDCFC
	2E78C1C06F5842E6C3CA7967B604AD247EF8D0FD78F8CB9F83E0C0E8CE31049E
	5924D1ECC6A837BBE846A973B9714BD709A3845CA8A59490CA6C2CA9063E06CA
	01A6EA0D306DB254DB35B3320DA5147C5F8073812CCD8C3607C099F93AD23835
	3C85CED5DD39A563B6D08156C9142D3835EDCC7EE3BB3E003FD85E06D6AFE4EE
	39B876A48CAD29C7756F4671FFA73F0A465E74D0C0F9E5263A7146E329562261
	1A42561A30500EE0973C4C2F36A0B3CC9854932E4F088112EDC0E4F6006A896E
	A6B0D2EA62A1DE40A31BBB0E361827E2BF979DB2A331C6B5DC6A1FCD03F70DEF
	7C3F4A95ED6560173E5F5BC3EBEBFFF32FC169AA0300CECCD6D1EAC639974CA3
	3C5996B97D1241C9431078985B095DC967E91A5E780FE6C19867AB0090500565
	BB9BDA8D19992EE9E26A889556DB69C472BCF287EEEBDFF1FEBE19EBA624FE66
	66D3FD7930DDABE9280798FCD553F8E6E73F9683C3F3CE8D2222DA5AB7DB3725
	B8A0084F59945490C8B9C67C048117E402B06986D3F668D859CABC441482E3C1
	9F3C891727674C6961A33FAC3B91D10CBDEAADEF45A952DB1289BF9194A42F46
	968B0283082AC8A20E1EB8FB6FF0DDAF7E094A310C0ED450A994303C5841A51C
	8073864E9CA019C668B42274D2D4D9FBBBF755B8F8B64CB1650EF57CA8E121DD
	6C9A21AA8D4DDB89A939A4694A1780A1776D7B6E839F0F1AD133AFC019DEF89E
	3F433030D88703BBE5A2F05AE7B8DEE7887AA50093CF1CC3D73FF7DF0025ACDF
	29A238C3D4523397E358BD9C5BBAC79DA1B72EEE222F0C2383FC5A9C758C2D13
	EDC52337F73493585E6DE2D45C1D519A19DE8C06E4F55A465CE7CDA89BDEF3E1
	0D38B0CB8CD7B3C7F0E0E73E06F25E0767402B4A716676C5043E652A007BB634
	1438043CC1C81B5BBB7D7366B175AEB953641665B2ABFCC1A1A9D308A27C8AF9
	98EF714C2DAE62A1DE00B71E9524DA28E275E3BB3F8C725F127F1B01EC42EAFC
	B5DF177E09D3A75FC0C3777D02DDB009EE95E0FB3E3438A436737ABEF04C7023
	22DFEC1ED3E05A41D11B96040073E243ED14E1C6BED6F85A2BDAC868629930C4
	AC25C06925972F181EF9C5B338313D8780D663D963C6E877710DFC8B7FF507A8
	EDD801060D4F98D2CDE70C7F7EFB47372654FB7909164C2B7B9E9685549F3140
	94AB68D7EB78E0FF7C168FFFF06134575A60BE8F525045E00BF89E8FA1A1B2C9
	1C3C81544AB4C2188D30461825E4816914CC5A4A48AD9DE053084624ACE9745A
	AE4B6B09058E5353B388C9EEC45C379D9B87283339C1A99CB78EF93D414E03FF
	E6B537626464040C8027CCF48BCF39DEFB9FDE77D178A128485D8397D6269B9D
	3EF502BE75D72710B6568C38D6336DF6E98506565A5D93A9B37CEAA3702BA83E
	D754299B07977D0EDA12DCCDF049373FE27853FB3A040352053C3D39832489DD
	A603457C922AFC5E1BF8FFF56BDF84D1D15173BEB8F98C7CCEF01FFFF3FB2F39
	5E2E80F9254C9F7A1EDFBAEBE3085B0D336AE797C004C3D9F3752C373BC66E9A
	32EC5C2357E042AD6B85A56BECEC2461A794EE91EB68A280146C53C4240C8A96
	463221303DBF82E546D3959D7DF17ACD1F6374E7CE75786DBA3B66EDD75683D9
	DA2C4D0801E695209318D3279EC3A37FF7592471C70C8132EE54C1A63B99CB20
	2499EDDB4B083BABB7EEB3536E50D99E4BDFF3502A79503277CBB317F1DB3F3F
	8E53334BF03DEEF640BB0F08C6B2E6F56F7A3DC6C6477AF6CA14DD8837C4AB98
	BBB3FED9EABA2D596B839910801F006982678E3F89CFFED70F22EE76E07B2570
	FAF78233F8BE403528A3365846A55A06671CAD4E8CD556884637461C9B4D17BE
	6FF46FAAD0FEB6E5472A154ECDCC234963E41A55BD5E2253788DC536BA3D6CB7
	BEED16EC1CDFD9F3BDA24BF2E5C2CB66ECACE4432609CEBDF82C1EF9D2A79174
	3AA8B72334BB8921A1A522CE9596A5334092FB9FD59109F288375C4E2E1CD685
	CBAB68AC4678CC8D6FD9C0DF88323C3F3903A932575A9B557E85290B2AA56E79
	DBCD18DF35BE1E2FF2DDFA8DF0EA394FFDF0E260A592C3EBBB5FFA0C92A8837A
	2B42A31321EC26904AB99F6717B31BF992E568E1F092A63569327CFA7D360B53
	B40ADBF3B89928A10C572197A79C9B5F42BD118231E564196BF1BAF96D376357
	1FBCFA2AF12F5481B30DB80BDDB34902EB7CAF04E708DB2DDCFFE9BF40B7B902
	058E2C95B436C5F051864BE039F745047E217B87747201ED32B3FCCD9AA766E0
	95C0040DFBCADCF6C3630CDFFAE95378FEDC2C4A05429615FAE55A6BBCFA75AF
	C2D8AED14D0358CFDB636B0E5821DB626B30DAB2FE8273749AABB8E7CEDBD069
	3610A7122BAD0E56C308699C5273033DDD538F09048187A1C12AAA818F4AA50C
	0D86D556178D3042BB13B9CF89D30CE1F3E7CE23EC74E9B3D3CECE54B88D7385
	504225A21DBCB53CD8BF7FCBCD181D1FDD34806D0BAF6249B445BC18E7089B0D
	DC7BE747D06934A0B9C9542D179849893895688511C228454A1A2856E0FB18B8
	29AFADDB31ECC63DE5E80EC1AD69401E1C188C3073BED5C5C9A959C834E90926
	0A79F74D6B8D37DFFA668CED1ADB34805D1EBCB44B6B18F710B65671EF1DB7A1
	D36A001048A484209BA9442B445182763746D84D11A7A402E0BD11C0645ADA69
	DF9C090365FBDC718426102AAD01657836C1184ECD2E617965B5E77EE4D63A9B
	E3B57EFFE816D8FAB5A4F785C4AEBA70C0BAED36EEFFF4EDE836570026DCDE06
	FB21C459068F7104818F85FA2AEAAD0EAEDE7B058607ABB4374BA3C7F4851843
	E1E6277581C73035B95DC6ABA4842718BEFF4F2FE2F4EC82916FE8355E6FD4E5
	FCA3D7FC21C6C6472F9881E9AD0422B70714EB3B4C7D5BDEC46B718E4ED8C697
	FFEAC3E8AEAE005C402A1ACAE5666F69374A8D342091585A69A0D90E313C5845
	D937B3A7699681318652E063C75015C3B50104BE07A5353A9D180B8D2E9E3A35
	8DA8DBEDF3A0623D6337B993085C209374706FBAE546EC1C1FBB60067659F02A
	9EAFB08DAF7CF2CFD169AE001034F86D641F99D688E314258FA31204985F59C5
	7223C4EED1118031B4C3189D3875636D8281FCE972ED93228E9515C4AAEED147
	97EEC4F412569A4DA7052BDE012B8EBDE9D69B30363E76C10CECB78A1713866F
	D666B76CA615923881E7095483000B2BAB586A84D83DB6030043B31D218CE29E
	A069E76E55A1F3ADA42DA9CDD9CDE38769A09D9D5BC66AB3D9D350DB2A5EDBCE
	C0D87ABDDCFA36EEBA08970316856DDC7BC7EDE8B6EBD06026E0D00B575ABB00
	562997707A7A0E67A6E72049A56BF6B964181A1AC4C495BBB0776C077CCF33AE
	AE962AA5550956B42918A7393FC38130008F3DF1024E9F5F20BF30EDB61239FE
	472ABCEA757F849DBB4669D7D9E625A4DEA4A6665B48E9377A4ADA03F6F79FFC
	08C2D52513F0AD8C81789D24CD50F2044A9E8FB3B30B989A5D34992BFDEE9436
	420D55AB18AA042EF0011CBE67B2B5B30B4D9C5D5806B3AF4B39FD624F29E404
	B2E601EADEB8D61A37DE7C63FF8CA24F0979B9F1FACA273F82CEEA32203C2499
	74D9BBD41A5962D6D307A51226678CD7B85DC561CFD7C04015BB778EA056AD20
	4A32B4BA315503BAB799418A72C180442AA2321826CF2F62A9D18228F065AAE0
	E7AD95C28DB7DC84F15D635B2A217F5B7831E121CEA40BDE99D6C8920C9EC751
	2E953039338BA9D9E50DF11A1A1840142768756364D2544AB098312BAB20FF3F
	B2820234CECED5516F5E1C5E175542F60D66C58DE31B5826DB0CECAB9FBA1D51
	8B4A48DADA60B99D2493108CA15A29E1D4D41CCE9D9FEB51FADA069126C23DCE
	24F65C7D087B4786B0B31A604098697C61965851D3A2C0A1088E87FFF1299C38
	378FC0F75C9B569178542A23E378F5EB5F85B1B1D19E7ABCB8CF66DDE15A5B2F
	026BB64EB1ADA3BBE60979EF9DB7A1D35C8194E650E982E99C52462E50F27D9C
	9D99C7D4DCA27315B02FC5E6AC1240A214F64C1C442DF020B20C49374416A7F0
	18906886734B0D2CAE36690343DEF4517AFD6E563B64AE95C64DB7DE689E906B
	F0DA3003D3970FAFFBEEB80D9DD62AA43665A36DFA4868285ABE1EF81ECECCCC
	BB80BFF6A56800194C60BAF2D041EC191E40AD24A0931451D44527CE10C59244
	C7443C33331AF7E2D41CE697EB6EE8BBB83EDA704326A318EF87D74619D86F0D
	AF9CA0975AE578791ECE9CDF025E99C295571FC49EE1210C0702C812743A11C2
	2841186590D409B7BD598F31FC7AFA3C96EA8DCDF17ACB9B313EB6731D5E1795
	816D563A6EF464B01C58276CE3BEBFBE1D9D661D1A02D2F11046B099C80C25E1
	21087C4C4ECFE2DCCC9C0B5A60F4860A312965C0F8FE8318A90D606470004110
	20280970EE8143812511789A002A85C7043C8FE1C19F3C8517CE9E87EF719771
	48E29318951D6FFCE3D7607C7CE70503D856037E0F1E7DFDF0370F606163051A
	7651A9734F4696A5108223F07D9C3B3F6F167C617DC0B73C4C06E08A03873032
	6CF02A97030425E35F96C631DA8D55B497EA985F5EC5C9997934C30EF2FD6E70
	01AB7812A4D678CBDB6FE98BD78619D865C4EB9E3B6E43B7598706474A0BB26C
	6692CA0C4208947D7321CF15F172597CFE3A5306ECDC7F10A3B51CAF122DC3E0
	50905188A8DD46A7DD41B71B23951A4F9E3883C57A933846493F8E3BEE496AE0
	AD7FF2168CF779406E98815D6ABC9811DC6E8697E964FF667805E50081F0203C
	018F2B64DD2E643744BBD5412B8C106712C737C5CBDCCDB7FD87B7616CE748BF
	00B67EFFFBC57CAD0F62EB9B9BB684FCCA1D1F411A369049B8271707A37DA10A
	258F837B1ECE4CCF62EAFCBCCB22184C5655EC84679CE1AAC347501B18C4E1FD
	E328F93E5A9DD8CD013A37563B389A6568852134350CCC620B864A65105A67EE
	B5369A114AD5C1354138DF66B375CE703DE98A0B1DB4B51CC51DB719CE901BE7
	56AB8E4F3305A5257CF2373B3B3D87A9F9C5B5CB61DC6B941A908C61DFE16B31
	52AB61A45685277CF8BE80EF0B22993520C8E09171A47162087E4AFD19336E0C
	95F2400F5EA9F2110CD6D6E1F5D6ED70609708AF7BEEF80871AC1CB6E2600C48
	32A336F70583EF095342CEF5C7CB9EB58C33EC3B7C0D6A0343B87662173CE1D1
	F9321D354636E4A051359D65E87423273C7678AD395F89F450EE87D77638B04B
	8A57833AA6FDF1F23C8133DBC4EBF0C42E9444F13E16F1A2C1BEDF10AFBE328A
	6D05B19ED2B10FCB5FACCF0B2564DC5A8104479AD2CC2259D86AF2010203CECE
	CC62EAFC22D9C6E4599AFDB14A032967D8B56F0243B501BCF2E8415C33318E72
	5082101EA4069AED188D768CC5660749224D49C434AD7422C1AB96600CF0848F
	4CA6003C34DB214430B0E600AC0F60EB33F835E5F3FA36D2169E92BD1CC57D77
	DE8EB06938C3245534A86B641199D608C817EDCCCCACDB1F57CCC0E0B43C400A
	86F10307501B1CC42BAF3F88230777018CA1132B34DA091AED04719AD1803373
	6F49BA0EA469971BC5BAE7F0CA348357ADADC3EBADFD32B0CB8A570BF7DD793B
	3ACD55E30691CA9EA17665F1120CA7A7E6DC5EBBE2CBD08507A4C9280E607860
	08BF7FFD048E4CEC42292841D0DAB65618A3DE8AB1DCEC2089A513929A644B91
	BE6CFDF94A15835F1D5A8F57BF0CEC9F052FF3B0545A21F0BC8BC2EB95D74FE0
	DA225E12687663345AE63E5A99CF6F82D7D633B07EE4FC1A72B16F155EF885B6
	84FCEAA76E47D8A8433381244D8D9D0B1D300E98F93E069C99A60B5920028B42
	6FA5808C735C317110C3C335FCCBEBF6E3F0BE317881800045792E9CA3A94F4B
	023A618CA56607F546178D56179994300ED01AD65DA49B68C4A9EAB148D95606
	56FC84DD9440EFFFB531E1DA1BC0EEBDF376745AA68434A354A6A8B35870615A
	D467A6E63033BFE8CAC51E0E4CDB8C9563D7FE090CD706F1FB47277068DF4E08
	5FB8B12D41E93E34439C64687553D49B311AED2E11AF546A33C34DC88C8856BF
	8A4CF175786D3903BB8478DD77C76D085BAB009829396CE34129B76C82336072
	C62CE6B497AFDF85CC38C3D8BE098C0CD7F07BD71DC0D5FB47E1115E8C71D3A5
	248B6D4F78E01E43D849B1DCE8A0DEECA0D18A20FB9C2FED55FAE3B5D50CAC5F
	205B43CA6E07AF4E6BD5503A45BBAB1EBC182667E6B681D7207EEFBA091CDE9F
	9FAF1C2F0EC1393CC1C13D816E27C552A383E56607CD56D4F73E6E84D7FF1B00
	CE3A8D0CC8EA48480000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="489" length_in_bytes="3242" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D49484452000000630000
	0062080600000044676D30000000097048597300000EC300000EC301C76FA864
	00000A4F6943435050686F746F73686F70204943432070726F66696C65000078
	DA9D53675453E9163DF7DEF4424B8880944B6F5215082052428B801491262A21
	09104A8821A1D91551C1114545041BC8A088038E8E808C15512C0C8A0AD807E4
	21A28E83A3888ACAFBE17BA36BD6BCF7E6CDFEB5D73EE7ACF39DB3CF07C0080C
	9648335135800CA9421E11E083C7C4C6E1E42E40810A2470001008B3642173FD
	230100F87E3C3C2B22C007BE000178D30B0800C04D9BC0301C87FF0FEA42995C
	01808401C07491384B08801400407A8E42A600404601809D98265300A0040060
	CB6362E300502D0060277FE6D300809DF8997B01005B94211501A09100201365
	884400683B00ACCF568A450058300014664BC43900D82D00304957664800B0B7
	00C0CE100BB200080C00305188852900047B0060C8232378008499001446F257
	3CF12BAE10E72A00007899B23CB9243945815B082D710757572E1E28CE49172B
	14366102619A402EC27999193281340FE0F3CC0000A0911511E083F3FD78CE0E
	AECECE368EB60E5F2DEABF06FF226262E3FEE5CFAB70400000E1747ED1FE2C2F
	B31A803B06806DFEA225EE04685E0BA075F78B66B20F40B500A0E9DA57F370F8
	7E3C3C45A190B9D9D9E5E4E4D84AC4425B61CA577DFE67C25FC057FD6CF97E3C
	FCF7F5E0BEE22481325D814704F8E0C2CCF44CA51CCF92098462DCE68F47FCB7
	0BFFFC1DD322C44962B9582A14E35112718E449A8CF332A52289429229C525D2
	FF64E2DF2CFB033EDF3500B06A3E017B912DA85D6303F64B27105874C0E2F700
	00F2BB6FC1D4280803806883E1CF77FFEF3FFD47A02500806649927100005E44
	242E54CAB33FC708000044A0812AB0411BF4C1182CC0061CC105DCC10BFC6036
	844224C4C24210420A64801C726029AC82422886CDB01D2A602FD4401D34C051
	688693700E2EC255B80E3D700FFA61089EC128BC81090441C808136121DA8801
	628A58238E08179985F821C14804128B2420C9881451224B91354831528A5420
	55481DF23D720239875C46BA913BC8003282FC86BC47319481B2513DD40CB543
	B9A8371A8446A20BD06474319A8F16A09BD072B41A3D8C36A1E7D0AB680FDA8F
	3E43C730C0E8180733C46C302EC6C342B1382C099363CBB122AC0CABC61AB056
	AC03BB89F563CFB17704128145C0093604774220611E4148584C584ED848A820
	1C243411DA093709038451C2272293A84BB426BA11F9C4186232318758482C23
	D6128F132F107B8843C437241289433227B9900249B1A454D212D246D26E5223
	E92CA99B34481A2393C9DA646BB20739942C202BC885E49DE4C3E433E41BE421
	F25B0A9D624071A4F853E22852CA6A4A19E510E534E5066598324155A39A52DD
	A8A15411358F5A42ADA1B652AF5187A81334759A39CD8316494BA5ADA295D31A
	681768F769AFE874BA11DD951E4E97D057D2CBE947E897E803F4770C0D861583
	C7886728199B18071867197718AF984CA619D38B19C754303731EB98E7990F99
	6F55582AB62A7C1591CA0A954A9526951B2A2F54A9AAA6AADEAA0B55F355CB54
	8FA95E537DAE46553353E3A909D496AB55AA9D50EB531B5367A93BA887AA67A8
	6F543FA47E59FD890659C34CC34F43A451A0B15FE3BCC6200B6319B3782C216B
	0DAB86758135C426B1CDD97C762ABB98FD1DBB8B3DAAA9A13943334A3357B352
	F394663F07E39871F89C744E09E728A797F37E8ADE14EF29E2291BA6344CB931
	655C6BAA96979658AB48AB51AB47EBBD36AEEDA79DA6BD45BB59FB810E41C74A
	275C2747678FCE059DE753D953DDA70AA7164D3D3AF5AE2EAA6BA51BA1BB4477
	BF6EA7EE989EBE5E809E4C6FA7DE79BDE7FA1C7D2FFD54FD6DFAA7F5470C5806
	B30C2406DB0CCE183CC535716F3C1D2FC7DBF151435DC34043A561956197E184
	91B9D13CA3D5468D460F8C69C65CE324E36DC66DC6A326062621264B4DEA4DEE
	9A524DB9A629A63B4C3B4CC7CDCCCDA2CDD699359B3D31D732E79BE79BD79BDF
	B7605A785A2CB6A8B6B86549B2E45AA659EEB6BC6E855A3959A558555A5DB346
	AD9DAD25D6BBADBBA711A7B94E934EAB9ED667C3B0F1B6C9B6A9B719B0E5D806
	DBAEB66DB67D6167621767B7C5AEC3EE93BD937DBA7D8DFD3D070D87D90EAB1D
	5A1D7E73B472143A563ADE9ACE9CEE3F7DC5F496E92F6758CF10CFD833E3B613
	CB29C4699D539BD347671767B97383F3888B894B82CB2E973E2E9B1BC6DDC8BD
	E44A74F5715DE17AD2F59D9BB39BC2EDA8DBAFEE36EE69EE87DC9FCC349F299E
	593373D0C3C843E051E5D13F0B9F95306BDFAC7E4F434F8167B5E7232F632F91
	57ADD7B0B7A577AAF761EF173EF63E729FE33EE33C37DE32DE595FCC37C0B7C8
	B7CB4FC36F9E5F85DF437F23FF64FF7AFFD100A78025016703898141815B02FB
	F87A7C21BF8E3F3ADB65F6B2D9ED418CA0B94115418F82AD82E5C1AD2168C8EC
	90AD21F7E798CE91CE690E85507EE8D6D00761E6618BC37E0C2785878557863F
	8E7088581AD131973577D1DC4373DF44FA449644DE9B67314F39AF2D4A352A3E
	AA2E6A3CDA37BA34BA3FC62E6659CCD5589D58496C4B1C392E2AAE366E6CBEDF
	FCEDF387E29DE20BE37B17982FC85D7079A1CEC2F485A716A92E122C3A96404C
	884E3894F041102AA8168C25F21377258E0A79C21DC267222FD136D188D8435C
	2A1E4EF2482A4D7A92EC91BC357924C533A52CE5B98427A990BC4C0D4CDD9B3A
	9E169A76206D323D3ABD31839291907142AA214D93B667EA67E66676CBAC6585
	B2FEC56E8BB72F1E9507C96BB390AC05592D0AB642A6E8545A28D72A07B26765
	5766BFCD89CA3996AB9E2BCDEDCCB3CADB90379CEF9FFFED12C212E192B6A586
	4B572D1D58E6BDAC6A39B23C7179DB0AE315052B865606AC3CB88AB62A6DD54F
	ABED5797AE7EBD267A4D6B815EC1CA82C1B5016BEB0B550AE5857DEBDCD7ED5D
	4F582F59DFB561FA869D1B3E15898AAE14DB1797157FD828DC78E51B876FCABF
	99DC94B4A9ABC4B964CF66D266E9E6DE2D9E5B0E96AA97E6970E6E0DD9DAB40D
	DF56B4EDF5F645DB2F97CD28DBBB83B643B9A3BF3CB8BC65A7C9CECD3B3F54A4
	54F454FA5436EED2DDB561D7F86ED1EE1B7BBCF634ECD5DB5BBCF7FD3EC9BEDB
	5501554DD566D565FB49FBB3F73FAE89AAE9F896FB6D5DAD4E6D71EDC703D203
	FD07230EB6D7B9D4D51DD23D54528FD62BEB470EC71FBEFE9DEF772D0D360D55
	8D9CC6E223704479E4E9F709DFF71E0D3ADA768C7BACE107D31F761D671D2F6A
	429AF29A469B539AFB5B625BBA4FCC3ED1D6EADE7AFC47DB1F0F9C343C59794A
	F354C969DAE982D39367F2CF8C9D959D7D7E2EF9DC60DBA2B67BE763CEDF6A0F
	6FEFBA1074E1D245FF8BE73BBC3BCE5CF2B874F2B2DBE51357B8579AAF3A5F6D
	EA74EA3CFE93D34FC7BB9CBB9AAEB95C6BB9EE7ABDB57B66F7E91B9E37CEDDF4
	BD79F116FFD6D59E393DDDBDF37A6FF7C5F7F5DF16DD7E7227FDCECBBBD97727
	EEADBC4FBC5FF440ED41D943DD87D53F5BFEDCD8EFDC7F6AC077A0F3D1DC47F7
	068583CFFE91F58F0F43058F998FCB860D86EB9E383E3939E23F72FDE9FCA743
	CF64CF269E17FEA2FECBAE17162F7EF8D5EBD7CED198D1A197F29793BF6D7CA5
	FDEAC0EB19AFDBC6C2C61EBEC97833315EF456FBEDC177DC771DEFA3DF0F4FE4
	7C207F28FF68F9B1F553D0A7FB93199393FF040398F3FC63332DDB0000002063
	48524D00007A25000080830000F9FF000080E9000075300000EA6000003A9800
	00176F925FC546000001CB4944415478DAECDD4D6E83301445E13A6297EC8F6D
	BA23AA16B594040817FB7B93446A06B68FCFFBA155536AAD1FAD4629A5D65ACB
	519F3B3B1EDF17D42A903D3F7FEB5A5B3463CF015F69C8178C1455CF80B2B6AF
	2D9F797B9A6A0DC4D67D25EDBBE99A311FF45F7B4BB2A2D99A71D768BE9BDA62
	866E4A30831962530CBF3D1298DFEF79BD438B9B365B955AEB0F5D8F58DC5D60
	C499B13CB8236F4B420A2CA5AC5E9A2448C33235F594A3D3F6FBE8B960A6A5D3
	AE6130831960308319AFB7B6698F947B3363584ECC472E70ADC74F31236ACE98
	016C7D1C223D9DB8AE67A6E4699AE2618CE378DB34DB75010743DC1FC619CD80
	A1EFF5369419028C2E873E668021C0D04D0930C0D04D5D0623FD11795766F8D3
	50694A3725C0002334A5E8A682DA506608307453A2231826F620186945583725
	C00043370506330418BA29010618BA2930D40C6680C10C3098C18C4661ECFDFD
	08338EBDD9CC48BFF1CC08BAF1CCD04D81C10C6680C10C6680C10C6680C10C30
	98C10C3098C10C3098C10C3098C10C3098C10C3098C10C309831AFC77F536346
	C46D67866006330433CC1961B3C3DA41A77E39649373C6961B9FF85D7DCDD58C
	670F39C98E260BF87F69489ABAA06EDCC588393E0700D56F61CB3B43DEBE0000
	000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="490" length_in_bytes="3036" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D49484452000000630000
	0062080600000044676D30000000097048597300000EC300000EC301C76FA864
	00000A4F6943435050686F746F73686F70204943432070726F66696C65000078
	DA9D53675453E9163DF7DEF4424B8880944B6F5215082052428B801491262A21
	09104A8821A1D91551C1114545041BC8A088038E8E808C15512C0C8A0AD807E4
	21A28E83A3888ACAFBE17BA36BD6BCF7E6CDFEB5D73EE7ACF39DB3CF07C0080C
	9648335135800CA9421E11E083C7C4C6E1E42E40810A2470001008B3642173FD
	230100F87E3C3C2B22C007BE000178D30B0800C04D9BC0301C87FF0FEA42995C
	01808401C07491384B08801400407A8E42A600404601809D98265300A0040060
	CB6362E300502D0060277FE6D300809DF8997B01005B94211501A09100201365
	884400683B00ACCF568A450058300014664BC43900D82D00304957664800B0B7
	00C0CE100BB200080C00305188852900047B0060C8232378008499001446F257
	3CF12BAE10E72A00007899B23CB9243945815B082D710757572E1E28CE49172B
	14366102619A402EC27999193281340FE0F3CC0000A0911511E083F3FD78CE0E
	AECECE368EB60E5F2DEABF06FF226262E3FEE5CFAB70400000E1747ED1FE2C2F
	B31A803B06806DFEA225EE04685E0BA075F78B66B20F40B500A0E9DA57F370F8
	7E3C3C45A190B9D9D9E5E4E4D84AC4425B61CA577DFE67C25FC057FD6CF97E3C
	FCF7F5E0BEE22481325D814704F8E0C2CCF44CA51CCF92098462DCE68F47FCB7
	0BFFFC1DD322C44962B9582A14E35112718E449A8CF332A52289429229C525D2
	FF64E2DF2CFB033EDF3500B06A3E017B912DA85D6303F64B27105874C0E2F700
	00F2BB6FC1D4280803806883E1CF77FFEF3FFD47A02500806649927100005E44
	242E54CAB33FC708000044A0812AB0411BF4C1182CC0061CC105DCC10BFC6036
	844224C4C24210420A64801C726029AC82422886CDB01D2A602FD4401D34C051
	688693700E2EC255B80E3D700FFA61089EC128BC81090441C808136121DA8801
	628A58238E08179985F821C14804128B2420C9881451224B91354831528A5420
	55481DF23D720239875C46BA913BC8003282FC86BC47319481B2513DD40CB543
	B9A8371A8446A20BD06474319A8F16A09BD072B41A3D8C36A1E7D0AB680FDA8F
	3E43C730C0E8180733C46C302EC6C342B1382C099363CBB122AC0CABC61AB056
	AC03BB89F563CFB17704128145C0093604774220611E4148584C584ED848A820
	1C243411DA093709038451C2272293A84BB426BA11F9C4186232318758482C23
	D6128F132F107B8843C437241289433227B9900249B1A454D212D246D26E5223
	E92CA99B34481A2393C9DA646BB20739942C202BC885E49DE4C3E433E41BE421
	F25B0A9D624071A4F853E22852CA6A4A19E510E534E5066598324155A39A52DD
	A8A15411358F5A42ADA1B652AF5187A81334759A39CD8316494BA5ADA295D31A
	681768F769AFE874BA11DD951E4E97D057D2CBE947E897E803F4770C0D861583
	C7886728199B18071867197718AF984CA619D38B19C754303731EB98E7990F99
	6F55582AB62A7C1591CA0A954A9526951B2A2F54A9AAA6AADEAA0B55F355CB54
	8FA95E537DAE46553353E3A909D496AB55AA9D50EB531B5367A93BA887AA67A8
	6F543FA47E59FD890659C34CC34F43A451A0B15FE3BCC6200B6319B3782C216B
	0DAB86758135C426B1CDD97C762ABB98FD1DBB8B3DAAA9A13943334A3357B352
	F394663F07E39871F89C744E09E728A797F37E8ADE14EF29E2291BA6344CB931
	655C6BAA96979658AB48AB51AB47EBBD36AEEDA79DA6BD45BB59FB810E41C74A
	275C2747678FCE059DE753D953DDA70AA7164D3D3AF5AE2EAA6BA51BA1BB4477
	BF6EA7EE989EBE5E809E4C6FA7DE79BDE7FA1C7D2FFD54FD6DFAA7F5470C5806
	B30C2406DB0CCE183CC535716F3C1D2FC7DBF151435DC34043A561956197E184
	91B9D13CA3D5468D460F8C69C65CE324E36DC66DC6A326062621264B4DEA4DEE
	9A524DB9A629A63B4C3B4CC7CDCCCDA2CDD699359B3D31D732E79BE79BD79BDF
	B7605A785A2CB6A8B6B86549B2E45AA659EEB6BC6E855A3959A558555A5DB346
	AD9DAD25D6BBADBBA711A7B94E934EAB9ED667C3B0F1B6C9B6A9B719B0E5D806
	DBAEB66DB67D6167621767B7C5AEC3EE93BD937DBA7D8DFD3D070D87D90EAB1D
	5A1D7E73B472143A563ADE9ACE9CEE3F7DC5F496E92F6758CF10CFD833E3B613
	CB29C4699D539BD347671767B97383F3888B894B82CB2E973E2E9B1BC6DDC8BD
	E44A74F5715DE17AD2F59D9BB39BC2EDA8DBAFEE36EE69EE87DC9FCC349F299E
	593373D0C3C843E051E5D13F0B9F95306BDFAC7E4F434F8167B5E7232F632F91
	57ADD7B0B7A577AAF761EF173EF63E729FE33EE33C37DE32DE595FCC37C0B7C8
	B7CB4FC36F9E5F85DF437F23FF64FF7AFFD100A78025016703898141815B02FB
	F87A7C21BF8E3F3ADB65F6B2D9ED418CA0B94115418F82AD82E5C1AD2168C8EC
	90AD21F7E798CE91CE690E85507EE8D6D00761E6618BC37E0C2785878557863F
	8E7088581AD131973577D1DC4373DF44FA449644DE9B67314F39AF2D4A352A3E
	AA2E6A3CDA37BA34BA3FC62E6659CCD5589D58496C4B1C392E2AAE366E6CBEDF
	FCEDF387E29DE20BE37B17982FC85D7079A1CEC2F485A716A92E122C3A96404C
	884E3894F041102AA8168C25F21377258E0A79C21DC267222FD136D188D8435C
	2A1E4EF2482A4D7A92EC91BC357924C533A52CE5B98427A990BC4C0D4CDD9B3A
	9E169A76206D323D3ABD31839291907142AA214D93B667EA67E66676CBAC6585
	B2FEC56E8BB72F1E9507C96BB390AC05592D0AB642A6E8545A28D72A07B26765
	5766BFCD89CA3996AB9E2BCDEDCCB3CADB90379CEF9FFFED12C212E192B6A586
	4B572D1D58E6BDAC6A39B23C7179DB0AE315052B865606AC3CB88AB62A6DD54F
	ABED5797AE7EBD267A4D6B815EC1CA82C1B5016BEB0B550AE5857DEBDCD7ED5D
	4F582F59DFB561FA869D1B3E15898AAE14DB1797157FD828DC78E51B876FCABF
	99DC94B4A9ABC4B964CF66D266E9E6DE2D9E5B0E96AA97E6970E6E0DD9DAB40D
	DF56B4EDF5F645DB2F97CD28DBBB83B643B9A3BF3CB8BC65A7C9CECD3B3F54A4
	54F454FA5436EED2DDB561D7F86ED1EE1B7BBCF634ECD5DB5BBCF7FD3EC9BEDB
	5501554DD566D565FB49FBB3F73FAE89AAE9F896FB6D5DAD4E6D71EDC703D203
	FD07230EB6D7B9D4D51DD23D54528FD62BEB470EC71FBEFE9DEF772D0D360D55
	8D9CC6E223704479E4E9F709DFF71E0D3ADA768C7BACE107D31F761D671D2F6A
	429AF29A469B539AFB5B625BBA4FCC3ED1D6EADE7AFC47DB1F0F9C343C59794A
	F354C969DAE982D39367F2CF8C9D959D7D7E2EF9DC60DBA2B67BE763CEDF6A0F
	6FEFBA1074E1D245FF8BE73BBC3BCE5CF2B874F2B2DBE51357B8579AAF3A5F6D
	EA74EA3CFE93D34FC7BB9CBB9AAEB95C6BB9EE7ABDB57B66F7E91B9E37CEDDF4
	BD79F116FFD6D59E393DDDBDF37A6FF7C5F7F5DF16DD7E7227FDCECBBBD97727
	EEADBC4FBC5FF440ED41D943DD87D53F5BFEDCD8EFDC7F6AC077A0F3D1DC47F7
	068583CFFE91F58F0F43058F998FCB860D86EB9E383E3939E23F72FDE9FCA743
	CF64CF269E17FEA2FECBAE17162F7EF8D5EBD7CED198D1A197F29793BF6D7CA5
	FDEAC0EB19AFDBC6C2C61EBEC97833315EF456FBEDC177DC771DEFA3DF0F4FE4
	7C207F28FF68F9B1F553D0A7FB93199393FF040398F3FC63332DDB0000002063
	48524D00007A25000080830000F9FF000080E9000075300000EA6000003A9800
	00176F925FC546000000FD4944415478DAECDDDB0DC3201045416E942EE98F36
	373538CA03B373BEFDE5118B8CE5245535B4470FB7008660C0100C1882014330
	60E8073DAF5CBCD6DAFEEC64CE39DE39E24932AA2A568660C0100C1882014330
	6008060CC1802118820143306008060CC180F1ED92C0D8A5AE5F53DD7A4C9DB6
	826E8D71DA0AB281C3100C18820143306008060CC180211882D116A3EB1BBC2D
	31FC1EA23105433060D8FC9B6174D8FC8D29188271328627EA8D303C511B5330
	04038660C0700B6008068C8FE4087DA31CA10B46D77265F927397A56FCFBFF33
	E2E4D598120C18820143306008060CC1802118820143306008060CC180211807
	F7020000FFFF0300E9ED29BBD0DCF97B0000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="491" length_in_bytes="3254" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D49484452000000630000
	0062080600000044676D30000000097048597300000EC300000EC301C76FA864
	00000A4F6943435050686F746F73686F70204943432070726F66696C65000078
	DA9D53675453E9163DF7DEF4424B8880944B6F5215082052428B801491262A21
	09104A8821A1D91551C1114545041BC8A088038E8E808C15512C0C8A0AD807E4
	21A28E83A3888ACAFBE17BA36BD6BCF7E6CDFEB5D73EE7ACF39DB3CF07C0080C
	9648335135800CA9421E11E083C7C4C6E1E42E40810A2470001008B3642173FD
	230100F87E3C3C2B22C007BE000178D30B0800C04D9BC0301C87FF0FEA42995C
	01808401C07491384B08801400407A8E42A600404601809D98265300A0040060
	CB6362E300502D0060277FE6D300809DF8997B01005B94211501A09100201365
	884400683B00ACCF568A450058300014664BC43900D82D00304957664800B0B7
	00C0CE100BB200080C00305188852900047B0060C8232378008499001446F257
	3CF12BAE10E72A00007899B23CB9243945815B082D710757572E1E28CE49172B
	14366102619A402EC27999193281340FE0F3CC0000A0911511E083F3FD78CE0E
	AECECE368EB60E5F2DEABF06FF226262E3FEE5CFAB70400000E1747ED1FE2C2F
	B31A803B06806DFEA225EE04685E0BA075F78B66B20F40B500A0E9DA57F370F8
	7E3C3C45A190B9D9D9E5E4E4D84AC4425B61CA577DFE67C25FC057FD6CF97E3C
	FCF7F5E0BEE22481325D814704F8E0C2CCF44CA51CCF92098462DCE68F47FCB7
	0BFFFC1DD322C44962B9582A14E35112718E449A8CF332A52289429229C525D2
	FF64E2DF2CFB033EDF3500B06A3E017B912DA85D6303F64B27105874C0E2F700
	00F2BB6FC1D4280803806883E1CF77FFEF3FFD47A02500806649927100005E44
	242E54CAB33FC708000044A0812AB0411BF4C1182CC0061CC105DCC10BFC6036
	844224C4C24210420A64801C726029AC82422886CDB01D2A602FD4401D34C051
	688693700E2EC255B80E3D700FFA61089EC128BC81090441C808136121DA8801
	628A58238E08179985F821C14804128B2420C9881451224B91354831528A5420
	55481DF23D720239875C46BA913BC8003282FC86BC47319481B2513DD40CB543
	B9A8371A8446A20BD06474319A8F16A09BD072B41A3D8C36A1E7D0AB680FDA8F
	3E43C730C0E8180733C46C302EC6C342B1382C099363CBB122AC0CABC61AB056
	AC03BB89F563CFB17704128145C0093604774220611E4148584C584ED848A820
	1C243411DA093709038451C2272293A84BB426BA11F9C4186232318758482C23
	D6128F132F107B8843C437241289433227B9900249B1A454D212D246D26E5223
	E92CA99B34481A2393C9DA646BB20739942C202BC885E49DE4C3E433E41BE421
	F25B0A9D624071A4F853E22852CA6A4A19E510E534E5066598324155A39A52DD
	A8A15411358F5A42ADA1B652AF5187A81334759A39CD8316494BA5ADA295D31A
	681768F769AFE874BA11DD951E4E97D057D2CBE947E897E803F4770C0D861583
	C7886728199B18071867197718AF984CA619D38B19C754303731EB98E7990F99
	6F55582AB62A7C1591CA0A954A9526951B2A2F54A9AAA6AADEAA0B55F355CB54
	8FA95E537DAE46553353E3A909D496AB55AA9D50EB531B5367A93BA887AA67A8
	6F543FA47E59FD890659C34CC34F43A451A0B15FE3BCC6200B6319B3782C216B
	0DAB86758135C426B1CDD97C762ABB98FD1DBB8B3DAAA9A13943334A3357B352
	F394663F07E39871F89C744E09E728A797F37E8ADE14EF29E2291BA6344CB931
	655C6BAA96979658AB48AB51AB47EBBD36AEEDA79DA6BD45BB59FB810E41C74A
	275C2747678FCE059DE753D953DDA70AA7164D3D3AF5AE2EAA6BA51BA1BB4477
	BF6EA7EE989EBE5E809E4C6FA7DE79BDE7FA1C7D2FFD54FD6DFAA7F5470C5806
	B30C2406DB0CCE183CC535716F3C1D2FC7DBF151435DC34043A561956197E184
	91B9D13CA3D5468D460F8C69C65CE324E36DC66DC6A326062621264B4DEA4DEE
	9A524DB9A629A63B4C3B4CC7CDCCCDA2CDD699359B3D31D732E79BE79BD79BDF
	B7605A785A2CB6A8B6B86549B2E45AA659EEB6BC6E855A3959A558555A5DB346
	AD9DAD25D6BBADBBA711A7B94E934EAB9ED667C3B0F1B6C9B6A9B719B0E5D806
	DBAEB66DB67D6167621767B7C5AEC3EE93BD937DBA7D8DFD3D070D87D90EAB1D
	5A1D7E73B472143A563ADE9ACE9CEE3F7DC5F496E92F6758CF10CFD833E3B613
	CB29C4699D539BD347671767B97383F3888B894B82CB2E973E2E9B1BC6DDC8BD
	E44A74F5715DE17AD2F59D9BB39BC2EDA8DBAFEE36EE69EE87DC9FCC349F299E
	593373D0C3C843E051E5D13F0B9F95306BDFAC7E4F434F8167B5E7232F632F91
	57ADD7B0B7A577AAF761EF173EF63E729FE33EE33C37DE32DE595FCC37C0B7C8
	B7CB4FC36F9E5F85DF437F23FF64FF7AFFD100A78025016703898141815B02FB
	F87A7C21BF8E3F3ADB65F6B2D9ED418CA0B94115418F82AD82E5C1AD2168C8EC
	90AD21F7E798CE91CE690E85507EE8D6D00761E6618BC37E0C2785878557863F
	8E7088581AD131973577D1DC4373DF44FA449644DE9B67314F39AF2D4A352A3E
	AA2E6A3CDA37BA34BA3FC62E6659CCD5589D58496C4B1C392E2AAE366E6CBEDF
	FCEDF387E29DE20BE37B17982FC85D7079A1CEC2F485A716A92E122C3A96404C
	884E3894F041102AA8168C25F21377258E0A79C21DC267222FD136D188D8435C
	2A1E4EF2482A4D7A92EC91BC357924C533A52CE5B98427A990BC4C0D4CDD9B3A
	9E169A76206D323D3ABD31839291907142AA214D93B667EA67E66676CBAC6585
	B2FEC56E8BB72F1E9507C96BB390AC05592D0AB642A6E8545A28D72A07B26765
	5766BFCD89CA3996AB9E2BCDEDCCB3CADB90379CEF9FFFED12C212E192B6A586
	4B572D1D58E6BDAC6A39B23C7179DB0AE315052B865606AC3CB88AB62A6DD54F
	ABED5797AE7EBD267A4D6B815EC1CA82C1B5016BEB0B550AE5857DEBDCD7ED5D
	4F582F59DFB561FA869D1B3E15898AAE14DB1797157FD828DC78E51B876FCABF
	99DC94B4A9ABC4B964CF66D266E9E6DE2D9E5B0E96AA97E6970E6E0DD9DAB40D
	DF56B4EDF5F645DB2F97CD28DBBB83B643B9A3BF3CB8BC65A7C9CECD3B3F54A4
	54F454FA5436EED2DDB561D7F86ED1EE1B7BBCF634ECD5DB5BBCF7FD3EC9BEDB
	5501554DD566D565FB49FBB3F73FAE89AAE9F896FB6D5DAD4E6D71EDC703D203
	FD07230EB6D7B9D4D51DD23D54528FD62BEB470EC71FBEFE9DEF772D0D360D55
	8D9CC6E223704479E4E9F709DFF71E0D3ADA768C7BACE107D31F761D671D2F6A
	429AF29A469B539AFB5B625BBA4FCC3ED1D6EADE7AFC47DB1F0F9C343C59794A
	F354C969DAE982D39367F2CF8C9D959D7D7E2EF9DC60DBA2B67BE763CEDF6A0F
	6FEFBA1074E1D245FF8BE73BBC3BCE5CF2B874F2B2DBE51357B8579AAF3A5F6D
	EA74EA3CFE93D34FC7BB9CBB9AAEB95C6BB9EE7ABDB57B66F7E91B9E37CEDDF4
	BD79F116FFD6D59E393DDDBDF37A6FF7C5F7F5DF16DD7E7227FDCECBBBD97727
	EEADBC4FBC5FF440ED41D943DD87D53F5BFEDCD8EFDC7F6AC077A0F3D1DC47F7
	068583CFFE91F58F0F43058F998FCB860D86EB9E383E3939E23F72FDE9FCA743
	CF64CF269E17FEA2FECBAE17162F7EF8D5EBD7CED198D1A197F29793BF6D7CA5
	FDEAC0EB19AFDBC6C2C61EBEC97833315EF456FBEDC177DC771DEFA3DF0F4FE4
	7C207F28FF68F9B1F553D0A7FB93199393FF040398F3FC63332DDB0000002063
	48524D00007A25000080830000F9FF000080E9000075300000EA6000003A9800
	00176F925FC546000001D74944415478DAECDD496EC3300C055033E82D73BF5C
	93DD34858066709AC134F5B489817861E9F39936525491994BC711119999F1E8
	775B8E43D7205E71CEC7AFBB9B8C4717B99290E8789B3A0772EB36552D88B6B7
	A9358BAC671450317E57AD6F44D7A7A93D8EB632DED1ECC920830C32261F5F8F
	9C7C3A9DCA27773C1E97B5051611BFE7FE1C6FFAB87B98B912ABDD15A60E2322
	84418630C82043186490210C32C81006196408830C32844106196490210C32C8
	1006196408838C16154B46A18A25A350659351A8B2C9F034250C32C810061964
	08830C3284410619C220830C6190210C32C8281246B54A9C5A46B54AD433C810
	061964F40CE31D0B4746A1852343CF100619647C2E8C6A9535B58CBDFF7F433D
	830C6190418630C82043186490210C321A57311985AA980C3D43187B9011C3FE
	1139EED2959971E9B37938B17918E322BFE2822A8676695ED5F6788D6559F2D5
	1532EC9557A62F54DC24F14FCFC8CC385FE8783C49032F2578F6066E6F573284
	410619C2D8A78C88C873858CC76478E99B46C1D5DBD4F89E312EE67F3FC97842
	8651AC8177EE15D7E64686410619061964140D61CDFB45951F99DACBB837AF4A
	F36E29E39905DE52C8C53F48E816CAAD79AD39E7E3B7A9AE3FB7DE9B57A5797F
	0F00135C60BD1B1AFF960000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="492" length_in_bytes="3061" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D49484452000000630000
	0062080600000044676D30000000097048597300000EC300000EC301C76FA864
	00000A4F6943435050686F746F73686F70204943432070726F66696C65000078
	DA9D53675453E9163DF7DEF4424B8880944B6F5215082052428B801491262A21
	09104A8821A1D91551C1114545041BC8A088038E8E808C15512C0C8A0AD807E4
	21A28E83A3888ACAFBE17BA36BD6BCF7E6CDFEB5D73EE7ACF39DB3CF07C0080C
	9648335135800CA9421E11E083C7C4C6E1E42E40810A2470001008B3642173FD
	230100F87E3C3C2B22C007BE000178D30B0800C04D9BC0301C87FF0FEA42995C
	01808401C07491384B08801400407A8E42A600404601809D98265300A0040060
	CB6362E300502D0060277FE6D300809DF8997B01005B94211501A09100201365
	884400683B00ACCF568A450058300014664BC43900D82D00304957664800B0B7
	00C0CE100BB200080C00305188852900047B0060C8232378008499001446F257
	3CF12BAE10E72A00007899B23CB9243945815B082D710757572E1E28CE49172B
	14366102619A402EC27999193281340FE0F3CC0000A0911511E083F3FD78CE0E
	AECECE368EB60E5F2DEABF06FF226262E3FEE5CFAB70400000E1747ED1FE2C2F
	B31A803B06806DFEA225EE04685E0BA075F78B66B20F40B500A0E9DA57F370F8
	7E3C3C45A190B9D9D9E5E4E4D84AC4425B61CA577DFE67C25FC057FD6CF97E3C
	FCF7F5E0BEE22481325D814704F8E0C2CCF44CA51CCF92098462DCE68F47FCB7
	0BFFFC1DD322C44962B9582A14E35112718E449A8CF332A52289429229C525D2
	FF64E2DF2CFB033EDF3500B06A3E017B912DA85D6303F64B27105874C0E2F700
	00F2BB6FC1D4280803806883E1CF77FFEF3FFD47A02500806649927100005E44
	242E54CAB33FC708000044A0812AB0411BF4C1182CC0061CC105DCC10BFC6036
	844224C4C24210420A64801C726029AC82422886CDB01D2A602FD4401D34C051
	688693700E2EC255B80E3D700FFA61089EC128BC81090441C808136121DA8801
	628A58238E08179985F821C14804128B2420C9881451224B91354831528A5420
	55481DF23D720239875C46BA913BC8003282FC86BC47319481B2513DD40CB543
	B9A8371A8446A20BD06474319A8F16A09BD072B41A3D8C36A1E7D0AB680FDA8F
	3E43C730C0E8180733C46C302EC6C342B1382C099363CBB122AC0CABC61AB056
	AC03BB89F563CFB17704128145C0093604774220611E4148584C584ED848A820
	1C243411DA093709038451C2272293A84BB426BA11F9C4186232318758482C23
	D6128F132F107B8843C437241289433227B9900249B1A454D212D246D26E5223
	E92CA99B34481A2393C9DA646BB20739942C202BC885E49DE4C3E433E41BE421
	F25B0A9D624071A4F853E22852CA6A4A19E510E534E5066598324155A39A52DD
	A8A15411358F5A42ADA1B652AF5187A81334759A39CD8316494BA5ADA295D31A
	681768F769AFE874BA11DD951E4E97D057D2CBE947E897E803F4770C0D861583
	C7886728199B18071867197718AF984CA619D38B19C754303731EB98E7990F99
	6F55582AB62A7C1591CA0A954A9526951B2A2F54A9AAA6AADEAA0B55F355CB54
	8FA95E537DAE46553353E3A909D496AB55AA9D50EB531B5367A93BA887AA67A8
	6F543FA47E59FD890659C34CC34F43A451A0B15FE3BCC6200B6319B3782C216B
	0DAB86758135C426B1CDD97C762ABB98FD1DBB8B3DAAA9A13943334A3357B352
	F394663F07E39871F89C744E09E728A797F37E8ADE14EF29E2291BA6344CB931
	655C6BAA96979658AB48AB51AB47EBBD36AEEDA79DA6BD45BB59FB810E41C74A
	275C2747678FCE059DE753D953DDA70AA7164D3D3AF5AE2EAA6BA51BA1BB4477
	BF6EA7EE989EBE5E809E4C6FA7DE79BDE7FA1C7D2FFD54FD6DFAA7F5470C5806
	B30C2406DB0CCE183CC535716F3C1D2FC7DBF151435DC34043A561956197E184
	91B9D13CA3D5468D460F8C69C65CE324E36DC66DC6A326062621264B4DEA4DEE
	9A524DB9A629A63B4C3B4CC7CDCCCDA2CDD699359B3D31D732E79BE79BD79BDF
	B7605A785A2CB6A8B6B86549B2E45AA659EEB6BC6E855A3959A558555A5DB346
	AD9DAD25D6BBADBBA711A7B94E934EAB9ED667C3B0F1B6C9B6A9B719B0E5D806
	DBAEB66DB67D6167621767B7C5AEC3EE93BD937DBA7D8DFD3D070D87D90EAB1D
	5A1D7E73B472143A563ADE9ACE9CEE3F7DC5F496E92F6758CF10CFD833E3B613
	CB29C4699D539BD347671767B97383F3888B894B82CB2E973E2E9B1BC6DDC8BD
	E44A74F5715DE17AD2F59D9BB39BC2EDA8DBAFEE36EE69EE87DC9FCC349F299E
	593373D0C3C843E051E5D13F0B9F95306BDFAC7E4F434F8167B5E7232F632F91
	57ADD7B0B7A577AAF761EF173EF63E729FE33EE33C37DE32DE595FCC37C0B7C8
	B7CB4FC36F9E5F85DF437F23FF64FF7AFFD100A78025016703898141815B02FB
	F87A7C21BF8E3F3ADB65F6B2D9ED418CA0B94115418F82AD82E5C1AD2168C8EC
	90AD21F7E798CE91CE690E85507EE8D6D00761E6618BC37E0C2785878557863F
	8E7088581AD131973577D1DC4373DF44FA449644DE9B67314F39AF2D4A352A3E
	AA2E6A3CDA37BA34BA3FC62E6659CCD5589D58496C4B1C392E2AAE366E6CBEDF
	FCEDF387E29DE20BE37B17982FC85D7079A1CEC2F485A716A92E122C3A96404C
	884E3894F041102AA8168C25F21377258E0A79C21DC267222FD136D188D8435C
	2A1E4EF2482A4D7A92EC91BC357924C533A52CE5B98427A990BC4C0D4CDD9B3A
	9E169A76206D323D3ABD31839291907142AA214D93B667EA67E66676CBAC6585
	B2FEC56E8BB72F1E9507C96BB390AC05592D0AB642A6E8545A28D72A07B26765
	5766BFCD89CA3996AB9E2BCDEDCCB3CADB90379CEF9FFFED12C212E192B6A586
	4B572D1D58E6BDAC6A39B23C7179DB0AE315052B865606AC3CB88AB62A6DD54F
	ABED5797AE7EBD267A4D6B815EC1CA82C1B5016BEB0B550AE5857DEBDCD7ED5D
	4F582F59DFB561FA869D1B3E15898AAE14DB1797157FD828DC78E51B876FCABF
	99DC94B4A9ABC4B964CF66D266E9E6DE2D9E5B0E96AA97E6970E6E0DD9DAB40D
	DF56B4EDF5F645DB2F97CD28DBBB83B643B9A3BF3CB8BC65A7C9CECD3B3F54A4
	54F454FA5436EED2DDB561D7F86ED1EE1B7BBCF634ECD5DB5BBCF7FD3EC9BEDB
	5501554DD566D565FB49FBB3F73FAE89AAE9F896FB6D5DAD4E6D71EDC703D203
	FD07230EB6D7B9D4D51DD23D54528FD62BEB470EC71FBEFE9DEF772D0D360D55
	8D9CC6E223704479E4E9F709DFF71E0D3ADA768C7BACE107D31F761D671D2F6A
	429AF29A469B539AFB5B625BBA4FCC3ED1D6EADE7AFC47DB1F0F9C343C59794A
	F354C969DAE982D39367F2CF8C9D959D7D7E2EF9DC60DBA2B67BE763CEDF6A0F
	6FEFBA1074E1D245FF8BE73BBC3BCE5CF2B874F2B2DBE51357B8579AAF3A5F6D
	EA74EA3CFE93D34FC7BB9CBB9AAEB95C6BB9EE7ABDB57B66F7E91B9E37CEDDF4
	BD79F116FFD6D59E393DDDBDF37A6FF7C5F7F5DF16DD7E7227FDCECBBBD97727
	EEADBC4FBC5FF440ED41D943DD87D53F5BFEDCD8EFDC7F6AC077A0F3D1DC47F7
	068583CFFE91F58F0F43058F998FCB860D86EB9E383E3939E23F72FDE9FCA743
	CF64CF269E17FEA2FECBAE17162F7EF8D5EBD7CED198D1A197F29793BF6D7CA5
	FDEAC0EB19AFDBC6C2C61EBEC97833315EF456FBEDC177DC771DEFA3DF0F4FE4
	7C207F28FF68F9B1F553D0A7FB93199393FF040398F3FC63332DDB0000002063
	48524D00007A25000080830000F9FF000080E9000075300000EA6000003A9800
	00176F925FC546000001164944415478DAECDCCB11C3200C40412B932EE98F36
	954B0A88998C11B0EF9C937740FEC48ECCBC54A397430043306008060CC18021
	1830F440EF3B3FEEBD97BF77D25ABB3233AC0CC180A1B9336395226268B6CD9E
	355B628C3CA389983FF36D53668660C0100C18820143306008060CC1100C1882
	0163A00A0F7A607C3BF56DAAA5B7A9DD56D0D218BBAD20031C8660C0D0AFEDFA
	8F421885CEB2BC1220183004038660C0100C3D8D71EA13BC9218BE87689B8221
	18300CFFC3304E18FEB6291882B133862BEA4218AEA86D533004038660C07008
	6008068CBFE4167AA1DC42178C538B3BCB7FF41BE313B6B4D81E43B629188201
	433004038660C0100C18820143306008060CC1100C1882B1581F000000FFFF03
	00BB6130C4A614EF570000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="493" length_in_bytes="3196" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D49484452000000630000
	0062080600000044676D30000000097048597300000EC300000EC301C76FA864
	00000A4F6943435050686F746F73686F70204943432070726F66696C65000078
	DA9D53675453E9163DF7DEF4424B8880944B6F5215082052428B801491262A21
	09104A8821A1D91551C1114545041BC8A088038E8E808C15512C0C8A0AD807E4
	21A28E83A3888ACAFBE17BA36BD6BCF7E6CDFEB5D73EE7ACF39DB3CF07C0080C
	9648335135800CA9421E11E083C7C4C6E1E42E40810A2470001008B3642173FD
	230100F87E3C3C2B22C007BE000178D30B0800C04D9BC0301C87FF0FEA42995C
	01808401C07491384B08801400407A8E42A600404601809D98265300A0040060
	CB6362E300502D0060277FE6D300809DF8997B01005B94211501A09100201365
	884400683B00ACCF568A450058300014664BC43900D82D00304957664800B0B7
	00C0CE100BB200080C00305188852900047B0060C8232378008499001446F257
	3CF12BAE10E72A00007899B23CB9243945815B082D710757572E1E28CE49172B
	14366102619A402EC27999193281340FE0F3CC0000A0911511E083F3FD78CE0E
	AECECE368EB60E5F2DEABF06FF226262E3FEE5CFAB70400000E1747ED1FE2C2F
	B31A803B06806DFEA225EE04685E0BA075F78B66B20F40B500A0E9DA57F370F8
	7E3C3C45A190B9D9D9E5E4E4D84AC4425B61CA577DFE67C25FC057FD6CF97E3C
	FCF7F5E0BEE22481325D814704F8E0C2CCF44CA51CCF92098462DCE68F47FCB7
	0BFFFC1DD322C44962B9582A14E35112718E449A8CF332A52289429229C525D2
	FF64E2DF2CFB033EDF3500B06A3E017B912DA85D6303F64B27105874C0E2F700
	00F2BB6FC1D4280803806883E1CF77FFEF3FFD47A02500806649927100005E44
	242E54CAB33FC708000044A0812AB0411BF4C1182CC0061CC105DCC10BFC6036
	844224C4C24210420A64801C726029AC82422886CDB01D2A602FD4401D34C051
	688693700E2EC255B80E3D700FFA61089EC128BC81090441C808136121DA8801
	628A58238E08179985F821C14804128B2420C9881451224B91354831528A5420
	55481DF23D720239875C46BA913BC8003282FC86BC47319481B2513DD40CB543
	B9A8371A8446A20BD06474319A8F16A09BD072B41A3D8C36A1E7D0AB680FDA8F
	3E43C730C0E8180733C46C302EC6C342B1382C099363CBB122AC0CABC61AB056
	AC03BB89F563CFB17704128145C0093604774220611E4148584C584ED848A820
	1C243411DA093709038451C2272293A84BB426BA11F9C4186232318758482C23
	D6128F132F107B8843C437241289433227B9900249B1A454D212D246D26E5223
	E92CA99B34481A2393C9DA646BB20739942C202BC885E49DE4C3E433E41BE421
	F25B0A9D624071A4F853E22852CA6A4A19E510E534E5066598324155A39A52DD
	A8A15411358F5A42ADA1B652AF5187A81334759A39CD8316494BA5ADA295D31A
	681768F769AFE874BA11DD951E4E97D057D2CBE947E897E803F4770C0D861583
	C7886728199B18071867197718AF984CA619D38B19C754303731EB98E7990F99
	6F55582AB62A7C1591CA0A954A9526951B2A2F54A9AAA6AADEAA0B55F355CB54
	8FA95E537DAE46553353E3A909D496AB55AA9D50EB531B5367A93BA887AA67A8
	6F543FA47E59FD890659C34CC34F43A451A0B15FE3BCC6200B6319B3782C216B
	0DAB86758135C426B1CDD97C762ABB98FD1DBB8B3DAAA9A13943334A3357B352
	F394663F07E39871F89C744E09E728A797F37E8ADE14EF29E2291BA6344CB931
	655C6BAA96979658AB48AB51AB47EBBD36AEEDA79DA6BD45BB59FB810E41C74A
	275C2747678FCE059DE753D953DDA70AA7164D3D3AF5AE2EAA6BA51BA1BB4477
	BF6EA7EE989EBE5E809E4C6FA7DE79BDE7FA1C7D2FFD54FD6DFAA7F5470C5806
	B30C2406DB0CCE183CC535716F3C1D2FC7DBF151435DC34043A561956197E184
	91B9D13CA3D5468D460F8C69C65CE324E36DC66DC6A326062621264B4DEA4DEE
	9A524DB9A629A63B4C3B4CC7CDCCCDA2CDD699359B3D31D732E79BE79BD79BDF
	B7605A785A2CB6A8B6B86549B2E45AA659EEB6BC6E855A3959A558555A5DB346
	AD9DAD25D6BBADBBA711A7B94E934EAB9ED667C3B0F1B6C9B6A9B719B0E5D806
	DBAEB66DB67D6167621767B7C5AEC3EE93BD937DBA7D8DFD3D070D87D90EAB1D
	5A1D7E73B472143A563ADE9ACE9CEE3F7DC5F496E92F6758CF10CFD833E3B613
	CB29C4699D539BD347671767B97383F3888B894B82CB2E973E2E9B1BC6DDC8BD
	E44A74F5715DE17AD2F59D9BB39BC2EDA8DBAFEE36EE69EE87DC9FCC349F299E
	593373D0C3C843E051E5D13F0B9F95306BDFAC7E4F434F8167B5E7232F632F91
	57ADD7B0B7A577AAF761EF173EF63E729FE33EE33C37DE32DE595FCC37C0B7C8
	B7CB4FC36F9E5F85DF437F23FF64FF7AFFD100A78025016703898141815B02FB
	F87A7C21BF8E3F3ADB65F6B2D9ED418CA0B94115418F82AD82E5C1AD2168C8EC
	90AD21F7E798CE91CE690E85507EE8D6D00761E6618BC37E0C2785878557863F
	8E7088581AD131973577D1DC4373DF44FA449644DE9B67314F39AF2D4A352A3E
	AA2E6A3CDA37BA34BA3FC62E6659CCD5589D58496C4B1C392E2AAE366E6CBEDF
	FCEDF387E29DE20BE37B17982FC85D7079A1CEC2F485A716A92E122C3A96404C
	884E3894F041102AA8168C25F21377258E0A79C21DC267222FD136D188D8435C
	2A1E4EF2482A4D7A92EC91BC357924C533A52CE5B98427A990BC4C0D4CDD9B3A
	9E169A76206D323D3ABD31839291907142AA214D93B667EA67E66676CBAC6585
	B2FEC56E8BB72F1E9507C96BB390AC05592D0AB642A6E8545A28D72A07B26765
	5766BFCD89CA3996AB9E2BCDEDCCB3CADB90379CEF9FFFED12C212E192B6A586
	4B572D1D58E6BDAC6A39B23C7179DB0AE315052B865606AC3CB88AB62A6DD54F
	ABED5797AE7EBD267A4D6B815EC1CA82C1B5016BEB0B550AE5857DEBDCD7ED5D
	4F582F59DFB561FA869D1B3E15898AAE14DB1797157FD828DC78E51B876FCABF
	99DC94B4A9ABC4B964CF66D266E9E6DE2D9E5B0E96AA97E6970E6E0DD9DAB40D
	DF56B4EDF5F645DB2F97CD28DBBB83B643B9A3BF3CB8BC65A7C9CECD3B3F54A4
	54F454FA5436EED2DDB561D7F86ED1EE1B7BBCF634ECD5DB5BBCF7FD3EC9BEDB
	5501554DD566D565FB49FBB3F73FAE89AAE9F896FB6D5DAD4E6D71EDC703D203
	FD07230EB6D7B9D4D51DD23D54528FD62BEB470EC71FBEFE9DEF772D0D360D55
	8D9CC6E223704479E4E9F709DFF71E0D3ADA768C7BACE107D31F761D671D2F6A
	429AF29A469B539AFB5B625BBA4FCC3ED1D6EADE7AFC47DB1F0F9C343C59794A
	F354C969DAE982D39367F2CF8C9D959D7D7E2EF9DC60DBA2B67BE763CEDF6A0F
	6FEFBA1074E1D245FF8BE73BBC3BCE5CF2B874F2B2DBE51357B8579AAF3A5F6D
	EA74EA3CFE93D34FC7BB9CBB9AAEB95C6BB9EE7ABDB57B66F7E91B9E37CEDDF4
	BD79F116FFD6D59E393DDDBDF37A6FF7C5F7F5DF16DD7E7227FDCECBBBD97727
	EEADBC4FBC5FF440ED41D943DD87D53F5BFEDCD8EFDC7F6AC077A0F3D1DC47F7
	068583CFFE91F58F0F43058F998FCB860D86EB9E383E3939E23F72FDE9FCA743
	CF64CF269E17FEA2FECBAE17162F7EF8D5EBD7CED198D1A197F29793BF6D7CA5
	FDEAC0EB19AFDBC6C2C61EBEC97833315EF456FBEDC177DC771DEFA3DF0F4FE4
	7C207F28FF68F9B1F553D0A7FB93199393FF040398F3FC63332DDB0000002063
	48524D00007A25000080830000F9FF000080E9000075300000EA6000003A9800
	00176F925FC5460000019D4944415478DAECDD418EC2300C466152E596BD5FAF
	99591555D5684411431DFBFB3720C102E5F9D94917A48D311E19D35A1B638C76
	F5B33BB36405F189EF7CFD776733E3EA224732A4656C533B90BFDA54341069DB
	D42B8B6C6604B0E2F859B4B9D1B2EEA6664C5A33FE63D8338319CC6046F1F42B
	5FDEB62D3CB9755D5FDEB6467B2CB254AE4487BE49E70B18C5CCE82A3E0E9C9E
	B4E2DF01A84DDD6C9043DFCC0681C10C6680C10C6680C10C3098C10C3098C10C
	3098C10C3098C10C309851A0629911A8629911A8B29911A8B299613705063398
	01C6AC6674150F46243B1A1837B7A088F62C0F0143C00043C00043C000A3CAC9
	38250CFFC6A04D8121608061F817835161F86B53600818996138510782E144AD
	4D812160802160806109C01030C0F8483C420F148FD0058CAA795E6672BC4B62
	7FFFDB6B96B6B6CFA07097261E1739E2FD751707FD9815C672AEF699AA3F5BFA
	B9355912035CC008D6A68E3322EA6DC0A56646A6DDD479B7345D9BDA019C6F03
	9EF575FA439F041AE0CE17CC1066304398C10C6106338419CC10663043985137
	3F000000FFFF0300E07906F057DB79470000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="494" length_in_bytes="3245" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D49484452000000630000
	0062080600000044676D30000000097048597300000EC300000EC301C76FA864
	00000A4F6943435050686F746F73686F70204943432070726F66696C65000078
	DA9D53675453E9163DF7DEF4424B8880944B6F5215082052428B801491262A21
	09104A8821A1D91551C1114545041BC8A088038E8E808C15512C0C8A0AD807E4
	21A28E83A3888ACAFBE17BA36BD6BCF7E6CDFEB5D73EE7ACF39DB3CF07C0080C
	9648335135800CA9421E11E083C7C4C6E1E42E40810A2470001008B3642173FD
	230100F87E3C3C2B22C007BE000178D30B0800C04D9BC0301C87FF0FEA42995C
	01808401C07491384B08801400407A8E42A600404601809D98265300A0040060
	CB6362E300502D0060277FE6D300809DF8997B01005B94211501A09100201365
	884400683B00ACCF568A450058300014664BC43900D82D00304957664800B0B7
	00C0CE100BB200080C00305188852900047B0060C8232378008499001446F257
	3CF12BAE10E72A00007899B23CB9243945815B082D710757572E1E28CE49172B
	14366102619A402EC27999193281340FE0F3CC0000A0911511E083F3FD78CE0E
	AECECE368EB60E5F2DEABF06FF226262E3FEE5CFAB70400000E1747ED1FE2C2F
	B31A803B06806DFEA225EE04685E0BA075F78B66B20F40B500A0E9DA57F370F8
	7E3C3C45A190B9D9D9E5E4E4D84AC4425B61CA577DFE67C25FC057FD6CF97E3C
	FCF7F5E0BEE22481325D814704F8E0C2CCF44CA51CCF92098462DCE68F47FCB7
	0BFFFC1DD322C44962B9582A14E35112718E449A8CF332A52289429229C525D2
	FF64E2DF2CFB033EDF3500B06A3E017B912DA85D6303F64B27105874C0E2F700
	00F2BB6FC1D4280803806883E1CF77FFEF3FFD47A02500806649927100005E44
	242E54CAB33FC708000044A0812AB0411BF4C1182CC0061CC105DCC10BFC6036
	844224C4C24210420A64801C726029AC82422886CDB01D2A602FD4401D34C051
	688693700E2EC255B80E3D700FFA61089EC128BC81090441C808136121DA8801
	628A58238E08179985F821C14804128B2420C9881451224B91354831528A5420
	55481DF23D720239875C46BA913BC8003282FC86BC47319481B2513DD40CB543
	B9A8371A8446A20BD06474319A8F16A09BD072B41A3D8C36A1E7D0AB680FDA8F
	3E43C730C0E8180733C46C302EC6C342B1382C099363CBB122AC0CABC61AB056
	AC03BB89F563CFB17704128145C0093604774220611E4148584C584ED848A820
	1C243411DA093709038451C2272293A84BB426BA11F9C4186232318758482C23
	D6128F132F107B8843C437241289433227B9900249B1A454D212D246D26E5223
	E92CA99B34481A2393C9DA646BB20739942C202BC885E49DE4C3E433E41BE421
	F25B0A9D624071A4F853E22852CA6A4A19E510E534E5066598324155A39A52DD
	A8A15411358F5A42ADA1B652AF5187A81334759A39CD8316494BA5ADA295D31A
	681768F769AFE874BA11DD951E4E97D057D2CBE947E897E803F4770C0D861583
	C7886728199B18071867197718AF984CA619D38B19C754303731EB98E7990F99
	6F55582AB62A7C1591CA0A954A9526951B2A2F54A9AAA6AADEAA0B55F355CB54
	8FA95E537DAE46553353E3A909D496AB55AA9D50EB531B5367A93BA887AA67A8
	6F543FA47E59FD890659C34CC34F43A451A0B15FE3BCC6200B6319B3782C216B
	0DAB86758135C426B1CDD97C762ABB98FD1DBB8B3DAAA9A13943334A3357B352
	F394663F07E39871F89C744E09E728A797F37E8ADE14EF29E2291BA6344CB931
	655C6BAA96979658AB48AB51AB47EBBD36AEEDA79DA6BD45BB59FB810E41C74A
	275C2747678FCE059DE753D953DDA70AA7164D3D3AF5AE2EAA6BA51BA1BB4477
	BF6EA7EE989EBE5E809E4C6FA7DE79BDE7FA1C7D2FFD54FD6DFAA7F5470C5806
	B30C2406DB0CCE183CC535716F3C1D2FC7DBF151435DC34043A561956197E184
	91B9D13CA3D5468D460F8C69C65CE324E36DC66DC6A326062621264B4DEA4DEE
	9A524DB9A629A63B4C3B4CC7CDCCCDA2CDD699359B3D31D732E79BE79BD79BDF
	B7605A785A2CB6A8B6B86549B2E45AA659EEB6BC6E855A3959A558555A5DB346
	AD9DAD25D6BBADBBA711A7B94E934EAB9ED667C3B0F1B6C9B6A9B719B0E5D806
	DBAEB66DB67D6167621767B7C5AEC3EE93BD937DBA7D8DFD3D070D87D90EAB1D
	5A1D7E73B472143A563ADE9ACE9CEE3F7DC5F496E92F6758CF10CFD833E3B613
	CB29C4699D539BD347671767B97383F3888B894B82CB2E973E2E9B1BC6DDC8BD
	E44A74F5715DE17AD2F59D9BB39BC2EDA8DBAFEE36EE69EE87DC9FCC349F299E
	593373D0C3C843E051E5D13F0B9F95306BDFAC7E4F434F8167B5E7232F632F91
	57ADD7B0B7A577AAF761EF173EF63E729FE33EE33C37DE32DE595FCC37C0B7C8
	B7CB4FC36F9E5F85DF437F23FF64FF7AFFD100A78025016703898141815B02FB
	F87A7C21BF8E3F3ADB65F6B2D9ED418CA0B94115418F82AD82E5C1AD2168C8EC
	90AD21F7E798CE91CE690E85507EE8D6D00761E6618BC37E0C2785878557863F
	8E7088581AD131973577D1DC4373DF44FA449644DE9B67314F39AF2D4A352A3E
	AA2E6A3CDA37BA34BA3FC62E6659CCD5589D58496C4B1C392E2AAE366E6CBEDF
	FCEDF387E29DE20BE37B17982FC85D7079A1CEC2F485A716A92E122C3A96404C
	884E3894F041102AA8168C25F21377258E0A79C21DC267222FD136D188D8435C
	2A1E4EF2482A4D7A92EC91BC357924C533A52CE5B98427A990BC4C0D4CDD9B3A
	9E169A76206D323D3ABD31839291907142AA214D93B667EA67E66676CBAC6585
	B2FEC56E8BB72F1E9507C96BB390AC05592D0AB642A6E8545A28D72A07B26765
	5766BFCD89CA3996AB9E2BCDEDCCB3CADB90379CEF9FFFED12C212E192B6A586
	4B572D1D58E6BDAC6A39B23C7179DB0AE315052B865606AC3CB88AB62A6DD54F
	ABED5797AE7EBD267A4D6B815EC1CA82C1B5016BEB0B550AE5857DEBDCD7ED5D
	4F582F59DFB561FA869D1B3E15898AAE14DB1797157FD828DC78E51B876FCABF
	99DC94B4A9ABC4B964CF66D266E9E6DE2D9E5B0E96AA97E6970E6E0DD9DAB40D
	DF56B4EDF5F645DB2F97CD28DBBB83B643B9A3BF3CB8BC65A7C9CECD3B3F54A4
	54F454FA5436EED2DDB561D7F86ED1EE1B7BBCF634ECD5DB5BBCF7FD3EC9BEDB
	5501554DD566D565FB49FBB3F73FAE89AAE9F896FB6D5DAD4E6D71EDC703D203
	FD07230EB6D7B9D4D51DD23D54528FD62BEB470EC71FBEFE9DEF772D0D360D55
	8D9CC6E223704479E4E9F709DFF71E0D3ADA768C7BACE107D31F761D671D2F6A
	429AF29A469B539AFB5B625BBA4FCC3ED1D6EADE7AFC47DB1F0F9C343C59794A
	F354C969DAE982D39367F2CF8C9D959D7D7E2EF9DC60DBA2B67BE763CEDF6A0F
	6FEFBA1074E1D245FF8BE73BBC3BCE5CF2B874F2B2DBE51357B8579AAF3A5F6D
	EA74EA3CFE93D34FC7BB9CBB9AAEB95C6BB9EE7ABDB57B66F7E91B9E37CEDDF4
	BD79F116FFD6D59E393DDDBDF37A6FF7C5F7F5DF16DD7E7227FDCECBBBD97727
	EEADBC4FBC5FF440ED41D943DD87D53F5BFEDCD8EFDC7F6AC077A0F3D1DC47F7
	068583CFFE91F58F0F43058F998FCB860D86EB9E383E3939E23F72FDE9FCA743
	CF64CF269E17FEA2FECBAE17162F7EF8D5EBD7CED198D1A197F29793BF6D7CA5
	FDEAC0EB19AFDBC6C2C61EBEC97833315EF456FBEDC177DC771DEFA3DF0F4FE4
	7C207F28FF68F9B1F553D0A7FB93199393FF040398F3FC63332DDB0000002063
	48524D00007A25000080830000F9FF000080E9000075300000EA6000003A9800
	00176F925FC546000001CE4944415478DAECDD418E83301005518CB825F7E39A
	9E15234B93642090D0B4DFDF040916D8E56A6312C5A5D63A644C29A5D65ACBDE
	735766CC0AE28C6BBE7EDFD9CCD8DBC9910C2919CBD40AE455998A06226D99DA
	D2C9E68C0056B4E7A2CD1B25EBD3D41D93D68C4F4CF6CC60063398D179A63D17
	2FCB129EDC3CCF9B1F5BA3BD16197B1E89167D379D5FC0E8CC8CC9888F03674A
	3AE2DF01A84C5D6C9045DF9D0D028319CC008319CC0083196030831960308319
	60308319603083196030A38311CB8C4023961981463633028D6C66789A028319
	CC00E3AE664C463C1891EC28605C5C8222DA330E02868001868001868001462F
	2BE39430FC1B83320586800186C9BF33183D4CFECA14180246661856D4816058
	512B5360081860081860E80230040C304E8957E881E215BA80D16B7E373369F7
	92588F1F7D66EB80709B26B69D7CC6CDDD095A2818C330D4B36FB0D92B2FCC53
	58C44D12FFCC19B5D6B2DE687BDC458DB6998912050633980106339871184629
	A5AE23A43D6686455F37163C2D53ED3AA3EDCC773F9971C00C093681679E2B9E
	B58D19C20C660833981114C296F5C5D6EB98F1E1B544A476A734E348075F69C8
	C31F246483F2AA5D5BAEF97A99CAFA75EB7FED8AD4EE9F0100D3D132C90324BF
	160000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="495" length_in_bytes="3030" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D49484452000000630000
	0062080600000044676D30000000097048597300000EC300000EC301C76FA864
	00000A4F6943435050686F746F73686F70204943432070726F66696C65000078
	DA9D53675453E9163DF7DEF4424B8880944B6F5215082052428B801491262A21
	09104A8821A1D91551C1114545041BC8A088038E8E808C15512C0C8A0AD807E4
	21A28E83A3888ACAFBE17BA36BD6BCF7E6CDFEB5D73EE7ACF39DB3CF07C0080C
	9648335135800CA9421E11E083C7C4C6E1E42E40810A2470001008B3642173FD
	230100F87E3C3C2B22C007BE000178D30B0800C04D9BC0301C87FF0FEA42995C
	01808401C07491384B08801400407A8E42A600404601809D98265300A0040060
	CB6362E300502D0060277FE6D300809DF8997B01005B94211501A09100201365
	884400683B00ACCF568A450058300014664BC43900D82D00304957664800B0B7
	00C0CE100BB200080C00305188852900047B0060C8232378008499001446F257
	3CF12BAE10E72A00007899B23CB9243945815B082D710757572E1E28CE49172B
	14366102619A402EC27999193281340FE0F3CC0000A0911511E083F3FD78CE0E
	AECECE368EB60E5F2DEABF06FF226262E3FEE5CFAB70400000E1747ED1FE2C2F
	B31A803B06806DFEA225EE04685E0BA075F78B66B20F40B500A0E9DA57F370F8
	7E3C3C45A190B9D9D9E5E4E4D84AC4425B61CA577DFE67C25FC057FD6CF97E3C
	FCF7F5E0BEE22481325D814704F8E0C2CCF44CA51CCF92098462DCE68F47FCB7
	0BFFFC1DD322C44962B9582A14E35112718E449A8CF332A52289429229C525D2
	FF64E2DF2CFB033EDF3500B06A3E017B912DA85D6303F64B27105874C0E2F700
	00F2BB6FC1D4280803806883E1CF77FFEF3FFD47A02500806649927100005E44
	242E54CAB33FC708000044A0812AB0411BF4C1182CC0061CC105DCC10BFC6036
	844224C4C24210420A64801C726029AC82422886CDB01D2A602FD4401D34C051
	688693700E2EC255B80E3D700FFA61089EC128BC81090441C808136121DA8801
	628A58238E08179985F821C14804128B2420C9881451224B91354831528A5420
	55481DF23D720239875C46BA913BC8003282FC86BC47319481B2513DD40CB543
	B9A8371A8446A20BD06474319A8F16A09BD072B41A3D8C36A1E7D0AB680FDA8F
	3E43C730C0E8180733C46C302EC6C342B1382C099363CBB122AC0CABC61AB056
	AC03BB89F563CFB17704128145C0093604774220611E4148584C584ED848A820
	1C243411DA093709038451C2272293A84BB426BA11F9C4186232318758482C23
	D6128F132F107B8843C437241289433227B9900249B1A454D212D246D26E5223
	E92CA99B34481A2393C9DA646BB20739942C202BC885E49DE4C3E433E41BE421
	F25B0A9D624071A4F853E22852CA6A4A19E510E534E5066598324155A39A52DD
	A8A15411358F5A42ADA1B652AF5187A81334759A39CD8316494BA5ADA295D31A
	681768F769AFE874BA11DD951E4E97D057D2CBE947E897E803F4770C0D861583
	C7886728199B18071867197718AF984CA619D38B19C754303731EB98E7990F99
	6F55582AB62A7C1591CA0A954A9526951B2A2F54A9AAA6AADEAA0B55F355CB54
	8FA95E537DAE46553353E3A909D496AB55AA9D50EB531B5367A93BA887AA67A8
	6F543FA47E59FD890659C34CC34F43A451A0B15FE3BCC6200B6319B3782C216B
	0DAB86758135C426B1CDD97C762ABB98FD1DBB8B3DAAA9A13943334A3357B352
	F394663F07E39871F89C744E09E728A797F37E8ADE14EF29E2291BA6344CB931
	655C6BAA96979658AB48AB51AB47EBBD36AEEDA79DA6BD45BB59FB810E41C74A
	275C2747678FCE059DE753D953DDA70AA7164D3D3AF5AE2EAA6BA51BA1BB4477
	BF6EA7EE989EBE5E809E4C6FA7DE79BDE7FA1C7D2FFD54FD6DFAA7F5470C5806
	B30C2406DB0CCE183CC535716F3C1D2FC7DBF151435DC34043A561956197E184
	91B9D13CA3D5468D460F8C69C65CE324E36DC66DC6A326062621264B4DEA4DEE
	9A524DB9A629A63B4C3B4CC7CDCCCDA2CDD699359B3D31D732E79BE79BD79BDF
	B7605A785A2CB6A8B6B86549B2E45AA659EEB6BC6E855A3959A558555A5DB346
	AD9DAD25D6BBADBBA711A7B94E934EAB9ED667C3B0F1B6C9B6A9B719B0E5D806
	DBAEB66DB67D6167621767B7C5AEC3EE93BD937DBA7D8DFD3D070D87D90EAB1D
	5A1D7E73B472143A563ADE9ACE9CEE3F7DC5F496E92F6758CF10CFD833E3B613
	CB29C4699D539BD347671767B97383F3888B894B82CB2E973E2E9B1BC6DDC8BD
	E44A74F5715DE17AD2F59D9BB39BC2EDA8DBAFEE36EE69EE87DC9FCC349F299E
	593373D0C3C843E051E5D13F0B9F95306BDFAC7E4F434F8167B5E7232F632F91
	57ADD7B0B7A577AAF761EF173EF63E729FE33EE33C37DE32DE595FCC37C0B7C8
	B7CB4FC36F9E5F85DF437F23FF64FF7AFFD100A78025016703898141815B02FB
	F87A7C21BF8E3F3ADB65F6B2D9ED418CA0B94115418F82AD82E5C1AD2168C8EC
	90AD21F7E798CE91CE690E85507EE8D6D00761E6618BC37E0C2785878557863F
	8E7088581AD131973577D1DC4373DF44FA449644DE9B67314F39AF2D4A352A3E
	AA2E6A3CDA37BA34BA3FC62E6659CCD5589D58496C4B1C392E2AAE366E6CBEDF
	FCEDF387E29DE20BE37B17982FC85D7079A1CEC2F485A716A92E122C3A96404C
	884E3894F041102AA8168C25F21377258E0A79C21DC267222FD136D188D8435C
	2A1E4EF2482A4D7A92EC91BC357924C533A52CE5B98427A990BC4C0D4CDD9B3A
	9E169A76206D323D3ABD31839291907142AA214D93B667EA67E66676CBAC6585
	B2FEC56E8BB72F1E9507C96BB390AC05592D0AB642A6E8545A28D72A07B26765
	5766BFCD89CA3996AB9E2BCDEDCCB3CADB90379CEF9FFFED12C212E192B6A586
	4B572D1D58E6BDAC6A39B23C7179DB0AE315052B865606AC3CB88AB62A6DD54F
	ABED5797AE7EBD267A4D6B815EC1CA82C1B5016BEB0B550AE5857DEBDCD7ED5D
	4F582F59DFB561FA869D1B3E15898AAE14DB1797157FD828DC78E51B876FCABF
	99DC94B4A9ABC4B964CF66D266E9E6DE2D9E5B0E96AA97E6970E6E0DD9DAB40D
	DF56B4EDF5F645DB2F97CD28DBBB83B643B9A3BF3CB8BC65A7C9CECD3B3F54A4
	54F454FA5436EED2DDB561D7F86ED1EE1B7BBCF634ECD5DB5BBCF7FD3EC9BEDB
	5501554DD566D565FB49FBB3F73FAE89AAE9F896FB6D5DAD4E6D71EDC703D203
	FD07230EB6D7B9D4D51DD23D54528FD62BEB470EC71FBEFE9DEF772D0D360D55
	8D9CC6E223704479E4E9F709DFF71E0D3ADA768C7BACE107D31F761D671D2F6A
	429AF29A469B539AFB5B625BBA4FCC3ED1D6EADE7AFC47DB1F0F9C343C59794A
	F354C969DAE982D39367F2CF8C9D959D7D7E2EF9DC60DBA2B67BE763CEDF6A0F
	6FEFBA1074E1D245FF8BE73BBC3BCE5CF2B874F2B2DBE51357B8579AAF3A5F6D
	EA74EA3CFE93D34FC7BB9CBB9AAEB95C6BB9EE7ABDB57B66F7E91B9E37CEDDF4
	BD79F116FFD6D59E393DDDBDF37A6FF7C5F7F5DF16DD7E7227FDCECBBBD97727
	EEADBC4FBC5FF440ED41D943DD87D53F5BFEDCD8EFDC7F6AC077A0F3D1DC47F7
	068583CFFE91F58F0F43058F998FCB860D86EB9E383E3939E23F72FDE9FCA743
	CF64CF269E17FEA2FECBAE17162F7EF8D5EBD7CED198D1A197F29793BF6D7CA5
	FDEAC0EB19AFDBC6C2C61EBEC97833315EF456FBEDC177DC771DEFA3DF0F4FE4
	7C207F28FF68F9B1F553D0A7FB93199393FF040398F3FC63332DDB0000002063
	48524D00007A25000080830000F9FF000080E9000075300000EA6000003A9800
	00176F925FC546000000F74944415478DAECDB3B0E8020104041D7784BCEC739
	D7D25A63748179B5856114829FC8CC4D35DA0D010CC18021183004038660C010
	0C188221183004038660C0100C187ABBE3CEC11131F5A7249919C360F4DECB0F
	686B6D7BF2F95144FC7EEEA6296B8686C6A8308DC0B816571882014330040386
	60C0D097182BEC8A87C1F073A6690A8660C0A89847E885F2085D3060682D0C3B
	F6421876ECA62918820143306008060CC180211882014330607CD26CEF4786C6
	98EDFDC8EE8A87B1D4156F018721183004038660C0100CC18021183004038660
	C0100C18820143BF15FECD766708060CC18021183004038660ACD5090000FFFF
	0300F06622C1D5FB1AD60000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="496" length_in_bytes="3248" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D49484452000000630000
	0062080600000044676D30000000097048597300000EC300000EC301C76FA864
	00000A4F6943435050686F746F73686F70204943432070726F66696C65000078
	DA9D53675453E9163DF7DEF4424B8880944B6F5215082052428B801491262A21
	09104A8821A1D91551C1114545041BC8A088038E8E808C15512C0C8A0AD807E4
	21A28E83A3888ACAFBE17BA36BD6BCF7E6CDFEB5D73EE7ACF39DB3CF07C0080C
	9648335135800CA9421E11E083C7C4C6E1E42E40810A2470001008B3642173FD
	230100F87E3C3C2B22C007BE000178D30B0800C04D9BC0301C87FF0FEA42995C
	01808401C07491384B08801400407A8E42A600404601809D98265300A0040060
	CB6362E300502D0060277FE6D300809DF8997B01005B94211501A09100201365
	884400683B00ACCF568A450058300014664BC43900D82D00304957664800B0B7
	00C0CE100BB200080C00305188852900047B0060C8232378008499001446F257
	3CF12BAE10E72A00007899B23CB9243945815B082D710757572E1E28CE49172B
	14366102619A402EC27999193281340FE0F3CC0000A0911511E083F3FD78CE0E
	AECECE368EB60E5F2DEABF06FF226262E3FEE5CFAB70400000E1747ED1FE2C2F
	B31A803B06806DFEA225EE04685E0BA075F78B66B20F40B500A0E9DA57F370F8
	7E3C3C45A190B9D9D9E5E4E4D84AC4425B61CA577DFE67C25FC057FD6CF97E3C
	FCF7F5E0BEE22481325D814704F8E0C2CCF44CA51CCF92098462DCE68F47FCB7
	0BFFFC1DD322C44962B9582A14E35112718E449A8CF332A52289429229C525D2
	FF64E2DF2CFB033EDF3500B06A3E017B912DA85D6303F64B27105874C0E2F700
	00F2BB6FC1D4280803806883E1CF77FFEF3FFD47A02500806649927100005E44
	242E54CAB33FC708000044A0812AB0411BF4C1182CC0061CC105DCC10BFC6036
	844224C4C24210420A64801C726029AC82422886CDB01D2A602FD4401D34C051
	688693700E2EC255B80E3D700FFA61089EC128BC81090441C808136121DA8801
	628A58238E08179985F821C14804128B2420C9881451224B91354831528A5420
	55481DF23D720239875C46BA913BC8003282FC86BC47319481B2513DD40CB543
	B9A8371A8446A20BD06474319A8F16A09BD072B41A3D8C36A1E7D0AB680FDA8F
	3E43C730C0E8180733C46C302EC6C342B1382C099363CBB122AC0CABC61AB056
	AC03BB89F563CFB17704128145C0093604774220611E4148584C584ED848A820
	1C243411DA093709038451C2272293A84BB426BA11F9C4186232318758482C23
	D6128F132F107B8843C437241289433227B9900249B1A454D212D246D26E5223
	E92CA99B34481A2393C9DA646BB20739942C202BC885E49DE4C3E433E41BE421
	F25B0A9D624071A4F853E22852CA6A4A19E510E534E5066598324155A39A52DD
	A8A15411358F5A42ADA1B652AF5187A81334759A39CD8316494BA5ADA295D31A
	681768F769AFE874BA11DD951E4E97D057D2CBE947E897E803F4770C0D861583
	C7886728199B18071867197718AF984CA619D38B19C754303731EB98E7990F99
	6F55582AB62A7C1591CA0A954A9526951B2A2F54A9AAA6AADEAA0B55F355CB54
	8FA95E537DAE46553353E3A909D496AB55AA9D50EB531B5367A93BA887AA67A8
	6F543FA47E59FD890659C34CC34F43A451A0B15FE3BCC6200B6319B3782C216B
	0DAB86758135C426B1CDD97C762ABB98FD1DBB8B3DAAA9A13943334A3357B352
	F394663F07E39871F89C744E09E728A797F37E8ADE14EF29E2291BA6344CB931
	655C6BAA96979658AB48AB51AB47EBBD36AEEDA79DA6BD45BB59FB810E41C74A
	275C2747678FCE059DE753D953DDA70AA7164D3D3AF5AE2EAA6BA51BA1BB4477
	BF6EA7EE989EBE5E809E4C6FA7DE79BDE7FA1C7D2FFD54FD6DFAA7F5470C5806
	B30C2406DB0CCE183CC535716F3C1D2FC7DBF151435DC34043A561956197E184
	91B9D13CA3D5468D460F8C69C65CE324E36DC66DC6A326062621264B4DEA4DEE
	9A524DB9A629A63B4C3B4CC7CDCCCDA2CDD699359B3D31D732E79BE79BD79BDF
	B7605A785A2CB6A8B6B86549B2E45AA659EEB6BC6E855A3959A558555A5DB346
	AD9DAD25D6BBADBBA711A7B94E934EAB9ED667C3B0F1B6C9B6A9B719B0E5D806
	DBAEB66DB67D6167621767B7C5AEC3EE93BD937DBA7D8DFD3D070D87D90EAB1D
	5A1D7E73B472143A563ADE9ACE9CEE3F7DC5F496E92F6758CF10CFD833E3B613
	CB29C4699D539BD347671767B97383F3888B894B82CB2E973E2E9B1BC6DDC8BD
	E44A74F5715DE17AD2F59D9BB39BC2EDA8DBAFEE36EE69EE87DC9FCC349F299E
	593373D0C3C843E051E5D13F0B9F95306BDFAC7E4F434F8167B5E7232F632F91
	57ADD7B0B7A577AAF761EF173EF63E729FE33EE33C37DE32DE595FCC37C0B7C8
	B7CB4FC36F9E5F85DF437F23FF64FF7AFFD100A78025016703898141815B02FB
	F87A7C21BF8E3F3ADB65F6B2D9ED418CA0B94115418F82AD82E5C1AD2168C8EC
	90AD21F7E798CE91CE690E85507EE8D6D00761E6618BC37E0C2785878557863F
	8E7088581AD131973577D1DC4373DF44FA449644DE9B67314F39AF2D4A352A3E
	AA2E6A3CDA37BA34BA3FC62E6659CCD5589D58496C4B1C392E2AAE366E6CBEDF
	FCEDF387E29DE20BE37B17982FC85D7079A1CEC2F485A716A92E122C3A96404C
	884E3894F041102AA8168C25F21377258E0A79C21DC267222FD136D188D8435C
	2A1E4EF2482A4D7A92EC91BC357924C533A52CE5B98427A990BC4C0D4CDD9B3A
	9E169A76206D323D3ABD31839291907142AA214D93B667EA67E66676CBAC6585
	B2FEC56E8BB72F1E9507C96BB390AC05592D0AB642A6E8545A28D72A07B26765
	5766BFCD89CA3996AB9E2BCDEDCCB3CADB90379CEF9FFFED12C212E192B6A586
	4B572D1D58E6BDAC6A39B23C7179DB0AE315052B865606AC3CB88AB62A6DD54F
	ABED5797AE7EBD267A4D6B815EC1CA82C1B5016BEB0B550AE5857DEBDCD7ED5D
	4F582F59DFB561FA869D1B3E15898AAE14DB1797157FD828DC78E51B876FCABF
	99DC94B4A9ABC4B964CF66D266E9E6DE2D9E5B0E96AA97E6970E6E0DD9DAB40D
	DF56B4EDF5F645DB2F97CD28DBBB83B643B9A3BF3CB8BC65A7C9CECD3B3F54A4
	54F454FA5436EED2DDB561D7F86ED1EE1B7BBCF634ECD5DB5BBCF7FD3EC9BEDB
	5501554DD566D565FB49FBB3F73FAE89AAE9F896FB6D5DAD4E6D71EDC703D203
	FD07230EB6D7B9D4D51DD23D54528FD62BEB470EC71FBEFE9DEF772D0D360D55
	8D9CC6E223704479E4E9F709DFF71E0D3ADA768C7BACE107D31F761D671D2F6A
	429AF29A469B539AFB5B625BBA4FCC3ED1D6EADE7AFC47DB1F0F9C343C59794A
	F354C969DAE982D39367F2CF8C9D959D7D7E2EF9DC60DBA2B67BE763CEDF6A0F
	6FEFBA1074E1D245FF8BE73BBC3BCE5CF2B874F2B2DBE51357B8579AAF3A5F6D
	EA74EA3CFE93D34FC7BB9CBB9AAEB95C6BB9EE7ABDB57B66F7E91B9E37CEDDF4
	BD79F116FFD6D59E393DDDBDF37A6FF7C5F7F5DF16DD7E7227FDCECBBBD97727
	EEADBC4FBC5FF440ED41D943DD87D53F5BFEDCD8EFDC7F6AC077A0F3D1DC47F7
	068583CFFE91F58F0F43058F998FCB860D86EB9E383E3939E23F72FDE9FCA743
	CF64CF269E17FEA2FECBAE17162F7EF8D5EBD7CED198D1A197F29793BF6D7CA5
	FDEAC0EB19AFDBC6C2C61EBEC97833315EF456FBEDC177DC771DEFA3DF0F4FE4
	7C207F28FF68F9B1F553D0A7FB93199393FF040398F3FC63332DDB0000002063
	48524D00007A25000080830000F9FF000080E9000075300000EA6000003A9800
	00176F925FC546000001D14944415478DAECDD4B6EC2301405D03EC42ED95FB6
	E98EA85A5420900F37F6F1A4959A81EDFB8E3F51A5546BEDABD75655ADB5566B
	3DB7753BFDEE50AF812CF9FBAE7DED51C69209FEA4909F3052A86E11CAA371CD
	7966F765AAB720E68E2B69DC5DEF19D789BE37B62415DDEE19476DDD9FA6E6C8
	709AD2C820439BD5CEFFBD12B8FEBEE4E7118EB86977AB6AADFDE1BA46E78E12
	469C8CDB895BB35A1296C0AA7A583449219D6F97A691D6E8B4F19E46DE30D396
	D3A1C320830C619041C6FB47DBB457CAA3C938DFDE98D7ECE0A3337E8A8CB81B
	F82BAF4348D9218C396D9AA6F8302E97CB5B37FFAAFA7818A36FE051FD19FD68
	2B8C942A2623A88AC9B06708830C3284410619C220830C619071A0CA1A5AC6D1
	FF35D49E418630C820A3CF30B698383282268E0C7B8630C82023378CB44A1C5A
	465A25DA33C81006196408830C3284410619C220830C6190418630C810061964
	741AC6D2CA2623A8B2C908AA5832822A960CA7296190418630C8204318649021
	0C32C81006196408830C6190418630C82043186490210C32C81046F7327C6897
	8C4DABBD6DF12C1964904186468630B6BD3BD4B3894EFD386497F78C39159FF8
	CDC1EEF68C572739F20B963D06726FA22D531FD8378E22E2DABE0700DD0772C4
	CD8619270000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="497" length_in_bytes="3049" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D49484452000000630000
	0062080600000044676D30000000097048597300000EC300000EC301C76FA864
	00000A4F6943435050686F746F73686F70204943432070726F66696C65000078
	DA9D53675453E9163DF7DEF4424B8880944B6F5215082052428B801491262A21
	09104A8821A1D91551C1114545041BC8A088038E8E808C15512C0C8A0AD807E4
	21A28E83A3888ACAFBE17BA36BD6BCF7E6CDFEB5D73EE7ACF39DB3CF07C0080C
	9648335135800CA9421E11E083C7C4C6E1E42E40810A2470001008B3642173FD
	230100F87E3C3C2B22C007BE000178D30B0800C04D9BC0301C87FF0FEA42995C
	01808401C07491384B08801400407A8E42A600404601809D98265300A0040060
	CB6362E300502D0060277FE6D300809DF8997B01005B94211501A09100201365
	884400683B00ACCF568A450058300014664BC43900D82D00304957664800B0B7
	00C0CE100BB200080C00305188852900047B0060C8232378008499001446F257
	3CF12BAE10E72A00007899B23CB9243945815B082D710757572E1E28CE49172B
	14366102619A402EC27999193281340FE0F3CC0000A0911511E083F3FD78CE0E
	AECECE368EB60E5F2DEABF06FF226262E3FEE5CFAB70400000E1747ED1FE2C2F
	B31A803B06806DFEA225EE04685E0BA075F78B66B20F40B500A0E9DA57F370F8
	7E3C3C45A190B9D9D9E5E4E4D84AC4425B61CA577DFE67C25FC057FD6CF97E3C
	FCF7F5E0BEE22481325D814704F8E0C2CCF44CA51CCF92098462DCE68F47FCB7
	0BFFFC1DD322C44962B9582A14E35112718E449A8CF332A52289429229C525D2
	FF64E2DF2CFB033EDF3500B06A3E017B912DA85D6303F64B27105874C0E2F700
	00F2BB6FC1D4280803806883E1CF77FFEF3FFD47A02500806649927100005E44
	242E54CAB33FC708000044A0812AB0411BF4C1182CC0061CC105DCC10BFC6036
	844224C4C24210420A64801C726029AC82422886CDB01D2A602FD4401D34C051
	688693700E2EC255B80E3D700FFA61089EC128BC81090441C808136121DA8801
	628A58238E08179985F821C14804128B2420C9881451224B91354831528A5420
	55481DF23D720239875C46BA913BC8003282FC86BC47319481B2513DD40CB543
	B9A8371A8446A20BD06474319A8F16A09BD072B41A3D8C36A1E7D0AB680FDA8F
	3E43C730C0E8180733C46C302EC6C342B1382C099363CBB122AC0CABC61AB056
	AC03BB89F563CFB17704128145C0093604774220611E4148584C584ED848A820
	1C243411DA093709038451C2272293A84BB426BA11F9C4186232318758482C23
	D6128F132F107B8843C437241289433227B9900249B1A454D212D246D26E5223
	E92CA99B34481A2393C9DA646BB20739942C202BC885E49DE4C3E433E41BE421
	F25B0A9D624071A4F853E22852CA6A4A19E510E534E5066598324155A39A52DD
	A8A15411358F5A42ADA1B652AF5187A81334759A39CD8316494BA5ADA295D31A
	681768F769AFE874BA11DD951E4E97D057D2CBE947E897E803F4770C0D861583
	C7886728199B18071867197718AF984CA619D38B19C754303731EB98E7990F99
	6F55582AB62A7C1591CA0A954A9526951B2A2F54A9AAA6AADEAA0B55F355CB54
	8FA95E537DAE46553353E3A909D496AB55AA9D50EB531B5367A93BA887AA67A8
	6F543FA47E59FD890659C34CC34F43A451A0B15FE3BCC6200B6319B3782C216B
	0DAB86758135C426B1CDD97C762ABB98FD1DBB8B3DAAA9A13943334A3357B352
	F394663F07E39871F89C744E09E728A797F37E8ADE14EF29E2291BA6344CB931
	655C6BAA96979658AB48AB51AB47EBBD36AEEDA79DA6BD45BB59FB810E41C74A
	275C2747678FCE059DE753D953DDA70AA7164D3D3AF5AE2EAA6BA51BA1BB4477
	BF6EA7EE989EBE5E809E4C6FA7DE79BDE7FA1C7D2FFD54FD6DFAA7F5470C5806
	B30C2406DB0CCE183CC535716F3C1D2FC7DBF151435DC34043A561956197E184
	91B9D13CA3D5468D460F8C69C65CE324E36DC66DC6A326062621264B4DEA4DEE
	9A524DB9A629A63B4C3B4CC7CDCCCDA2CDD699359B3D31D732E79BE79BD79BDF
	B7605A785A2CB6A8B6B86549B2E45AA659EEB6BC6E855A3959A558555A5DB346
	AD9DAD25D6BBADBBA711A7B94E934EAB9ED667C3B0F1B6C9B6A9B719B0E5D806
	DBAEB66DB67D6167621767B7C5AEC3EE93BD937DBA7D8DFD3D070D87D90EAB1D
	5A1D7E73B472143A563ADE9ACE9CEE3F7DC5F496E92F6758CF10CFD833E3B613
	CB29C4699D539BD347671767B97383F3888B894B82CB2E973E2E9B1BC6DDC8BD
	E44A74F5715DE17AD2F59D9BB39BC2EDA8DBAFEE36EE69EE87DC9FCC349F299E
	593373D0C3C843E051E5D13F0B9F95306BDFAC7E4F434F8167B5E7232F632F91
	57ADD7B0B7A577AAF761EF173EF63E729FE33EE33C37DE32DE595FCC37C0B7C8
	B7CB4FC36F9E5F85DF437F23FF64FF7AFFD100A78025016703898141815B02FB
	F87A7C21BF8E3F3ADB65F6B2D9ED418CA0B94115418F82AD82E5C1AD2168C8EC
	90AD21F7E798CE91CE690E85507EE8D6D00761E6618BC37E0C2785878557863F
	8E7088581AD131973577D1DC4373DF44FA449644DE9B67314F39AF2D4A352A3E
	AA2E6A3CDA37BA34BA3FC62E6659CCD5589D58496C4B1C392E2AAE366E6CBEDF
	FCEDF387E29DE20BE37B17982FC85D7079A1CEC2F485A716A92E122C3A96404C
	884E3894F041102AA8168C25F21377258E0A79C21DC267222FD136D188D8435C
	2A1E4EF2482A4D7A92EC91BC357924C533A52CE5B98427A990BC4C0D4CDD9B3A
	9E169A76206D323D3ABD31839291907142AA214D93B667EA67E66676CBAC6585
	B2FEC56E8BB72F1E9507C96BB390AC05592D0AB642A6E8545A28D72A07B26765
	5766BFCD89CA3996AB9E2BCDEDCCB3CADB90379CEF9FFFED12C212E192B6A586
	4B572D1D58E6BDAC6A39B23C7179DB0AE315052B865606AC3CB88AB62A6DD54F
	ABED5797AE7EBD267A4D6B815EC1CA82C1B5016BEB0B550AE5857DEBDCD7ED5D
	4F582F59DFB561FA869D1B3E15898AAE14DB1797157FD828DC78E51B876FCABF
	99DC94B4A9ABC4B964CF66D266E9E6DE2D9E5B0E96AA97E6970E6E0DD9DAB40D
	DF56B4EDF5F645DB2F97CD28DBBB83B643B9A3BF3CB8BC65A7C9CECD3B3F54A4
	54F454FA5436EED2DDB561D7F86ED1EE1B7BBCF634ECD5DB5BBCF7FD3EC9BEDB
	5501554DD566D565FB49FBB3F73FAE89AAE9F896FB6D5DAD4E6D71EDC703D203
	FD07230EB6D7B9D4D51DD23D54528FD62BEB470EC71FBEFE9DEF772D0D360D55
	8D9CC6E223704479E4E9F709DFF71E0D3ADA768C7BACE107D31F761D671D2F6A
	429AF29A469B539AFB5B625BBA4FCC3ED1D6EADE7AFC47DB1F0F9C343C59794A
	F354C969DAE982D39367F2CF8C9D959D7D7E2EF9DC60DBA2B67BE763CEDF6A0F
	6FEFBA1074E1D245FF8BE73BBC3BCE5CF2B874F2B2DBE51357B8579AAF3A5F6D
	EA74EA3CFE93D34FC7BB9CBB9AAEB95C6BB9EE7ABDB57B66F7E91B9E37CEDDF4
	BD79F116FFD6D59E393DDDBDF37A6FF7C5F7F5DF16DD7E7227FDCECBBBD97727
	EEADBC4FBC5FF440ED41D943DD87D53F5BFEDCD8EFDC7F6AC077A0F3D1DC47F7
	068583CFFE91F58F0F43058F998FCB860D86EB9E383E3939E23F72FDE9FCA743
	CF64CF269E17FEA2FECBAE17162F7EF8D5EBD7CED198D1A197F29793BF6D7CA5
	FDEAC0EB19AFDBC6C2C61EBEC97833315EF456FBEDC177DC771DEFA3DF0F4FE4
	7C207F28FF68F9B1F553D0A7FB93199393FF040398F3FC63332DDB0000002063
	48524D00007A25000080830000F9FF000080E9000075300000EA6000003A9800
	00176F925FC5460000010A4944415478DAECDDC10D83300C40518CD832F3654E
	778622048EF3FEB91778902840D4C8CC43353A9D0218820143306008060CC180
	2118300443306008060CC180211830F474D73F3F8E88253E25C9CC688F31E72C
	7F40630CC39460C0F8A28880516852862118300443306008060CBD89B1C3AA78
	190C9B330D5330040346C53C422F9447E88201437B6158B117C2B062374CC110
	0C188201433060E8DDAE8E07757787D5D73B9E5A62DC59E95778546398326708
	060C6D81D1EDFDC8D218DDDE8F9CAE78185B5DF1267018820143306008060CC1
	100C18820143306008060CC1E85CD76F6D615469D5BF6C304C55BAA3EDCD7667
	08060CC18021183004038660ECD50F0000FFFF03005FDB29CA4DF03480000000
	0049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="498" length_in_bytes="3191" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D49484452000000630000
	0062080600000044676D30000000097048597300000EC300000EC301C76FA864
	00000A4F6943435050686F746F73686F70204943432070726F66696C65000078
	DA9D53675453E9163DF7DEF4424B8880944B6F5215082052428B801491262A21
	09104A8821A1D91551C1114545041BC8A088038E8E808C15512C0C8A0AD807E4
	21A28E83A3888ACAFBE17BA36BD6BCF7E6CDFEB5D73EE7ACF39DB3CF07C0080C
	9648335135800CA9421E11E083C7C4C6E1E42E40810A2470001008B3642173FD
	230100F87E3C3C2B22C007BE000178D30B0800C04D9BC0301C87FF0FEA42995C
	01808401C07491384B08801400407A8E42A600404601809D98265300A0040060
	CB6362E300502D0060277FE6D300809DF8997B01005B94211501A09100201365
	884400683B00ACCF568A450058300014664BC43900D82D00304957664800B0B7
	00C0CE100BB200080C00305188852900047B0060C8232378008499001446F257
	3CF12BAE10E72A00007899B23CB9243945815B082D710757572E1E28CE49172B
	14366102619A402EC27999193281340FE0F3CC0000A0911511E083F3FD78CE0E
	AECECE368EB60E5F2DEABF06FF226262E3FEE5CFAB70400000E1747ED1FE2C2F
	B31A803B06806DFEA225EE04685E0BA075F78B66B20F40B500A0E9DA57F370F8
	7E3C3C45A190B9D9D9E5E4E4D84AC4425B61CA577DFE67C25FC057FD6CF97E3C
	FCF7F5E0BEE22481325D814704F8E0C2CCF44CA51CCF92098462DCE68F47FCB7
	0BFFFC1DD322C44962B9582A14E35112718E449A8CF332A52289429229C525D2
	FF64E2DF2CFB033EDF3500B06A3E017B912DA85D6303F64B27105874C0E2F700
	00F2BB6FC1D4280803806883E1CF77FFEF3FFD47A02500806649927100005E44
	242E54CAB33FC708000044A0812AB0411BF4C1182CC0061CC105DCC10BFC6036
	844224C4C24210420A64801C726029AC82422886CDB01D2A602FD4401D34C051
	688693700E2EC255B80E3D700FFA61089EC128BC81090441C808136121DA8801
	628A58238E08179985F821C14804128B2420C9881451224B91354831528A5420
	55481DF23D720239875C46BA913BC8003282FC86BC47319481B2513DD40CB543
	B9A8371A8446A20BD06474319A8F16A09BD072B41A3D8C36A1E7D0AB680FDA8F
	3E43C730C0E8180733C46C302EC6C342B1382C099363CBB122AC0CABC61AB056
	AC03BB89F563CFB17704128145C0093604774220611E4148584C584ED848A820
	1C243411DA093709038451C2272293A84BB426BA11F9C4186232318758482C23
	D6128F132F107B8843C437241289433227B9900249B1A454D212D246D26E5223
	E92CA99B34481A2393C9DA646BB20739942C202BC885E49DE4C3E433E41BE421
	F25B0A9D624071A4F853E22852CA6A4A19E510E534E5066598324155A39A52DD
	A8A15411358F5A42ADA1B652AF5187A81334759A39CD8316494BA5ADA295D31A
	681768F769AFE874BA11DD951E4E97D057D2CBE947E897E803F4770C0D861583
	C7886728199B18071867197718AF984CA619D38B19C754303731EB98E7990F99
	6F55582AB62A7C1591CA0A954A9526951B2A2F54A9AAA6AADEAA0B55F355CB54
	8FA95E537DAE46553353E3A909D496AB55AA9D50EB531B5367A93BA887AA67A8
	6F543FA47E59FD890659C34CC34F43A451A0B15FE3BCC6200B6319B3782C216B
	0DAB86758135C426B1CDD97C762ABB98FD1DBB8B3DAAA9A13943334A3357B352
	F394663F07E39871F89C744E09E728A797F37E8ADE14EF29E2291BA6344CB931
	655C6BAA96979658AB48AB51AB47EBBD36AEEDA79DA6BD45BB59FB810E41C74A
	275C2747678FCE059DE753D953DDA70AA7164D3D3AF5AE2EAA6BA51BA1BB4477
	BF6EA7EE989EBE5E809E4C6FA7DE79BDE7FA1C7D2FFD54FD6DFAA7F5470C5806
	B30C2406DB0CCE183CC535716F3C1D2FC7DBF151435DC34043A561956197E184
	91B9D13CA3D5468D460F8C69C65CE324E36DC66DC6A326062621264B4DEA4DEE
	9A524DB9A629A63B4C3B4CC7CDCCCDA2CDD699359B3D31D732E79BE79BD79BDF
	B7605A785A2CB6A8B6B86549B2E45AA659EEB6BC6E855A3959A558555A5DB346
	AD9DAD25D6BBADBBA711A7B94E934EAB9ED667C3B0F1B6C9B6A9B719B0E5D806
	DBAEB66DB67D6167621767B7C5AEC3EE93BD937DBA7D8DFD3D070D87D90EAB1D
	5A1D7E73B472143A563ADE9ACE9CEE3F7DC5F496E92F6758CF10CFD833E3B613
	CB29C4699D539BD347671767B97383F3888B894B82CB2E973E2E9B1BC6DDC8BD
	E44A74F5715DE17AD2F59D9BB39BC2EDA8DBAFEE36EE69EE87DC9FCC349F299E
	593373D0C3C843E051E5D13F0B9F95306BDFAC7E4F434F8167B5E7232F632F91
	57ADD7B0B7A577AAF761EF173EF63E729FE33EE33C37DE32DE595FCC37C0B7C8
	B7CB4FC36F9E5F85DF437F23FF64FF7AFFD100A78025016703898141815B02FB
	F87A7C21BF8E3F3ADB65F6B2D9ED418CA0B94115418F82AD82E5C1AD2168C8EC
	90AD21F7E798CE91CE690E85507EE8D6D00761E6618BC37E0C2785878557863F
	8E7088581AD131973577D1DC4373DF44FA449644DE9B67314F39AF2D4A352A3E
	AA2E6A3CDA37BA34BA3FC62E6659CCD5589D58496C4B1C392E2AAE366E6CBEDF
	FCEDF387E29DE20BE37B17982FC85D7079A1CEC2F485A716A92E122C3A96404C
	884E3894F041102AA8168C25F21377258E0A79C21DC267222FD136D188D8435C
	2A1E4EF2482A4D7A92EC91BC357924C533A52CE5B98427A990BC4C0D4CDD9B3A
	9E169A76206D323D3ABD31839291907142AA214D93B667EA67E66676CBAC6585
	B2FEC56E8BB72F1E9507C96BB390AC05592D0AB642A6E8545A28D72A07B26765
	5766BFCD89CA3996AB9E2BCDEDCCB3CADB90379CEF9FFFED12C212E192B6A586
	4B572D1D58E6BDAC6A39B23C7179DB0AE315052B865606AC3CB88AB62A6DD54F
	ABED5797AE7EBD267A4D6B815EC1CA82C1B5016BEB0B550AE5857DEBDCD7ED5D
	4F582F59DFB561FA869D1B3E15898AAE14DB1797157FD828DC78E51B876FCABF
	99DC94B4A9ABC4B964CF66D266E9E6DE2D9E5B0E96AA97E6970E6E0DD9DAB40D
	DF56B4EDF5F645DB2F97CD28DBBB83B643B9A3BF3CB8BC65A7C9CECD3B3F54A4
	54F454FA5436EED2DDB561D7F86ED1EE1B7BBCF634ECD5DB5BBCF7FD3EC9BEDB
	5501554DD566D565FB49FBB3F73FAE89AAE9F896FB6D5DAD4E6D71EDC703D203
	FD07230EB6D7B9D4D51DD23D54528FD62BEB470EC71FBEFE9DEF772D0D360D55
	8D9CC6E223704479E4E9F709DFF71E0D3ADA768C7BACE107D31F761D671D2F6A
	429AF29A469B539AFB5B625BBA4FCC3ED1D6EADE7AFC47DB1F0F9C343C59794A
	F354C969DAE982D39367F2CF8C9D959D7D7E2EF9DC60DBA2B67BE763CEDF6A0F
	6FEFBA1074E1D245FF8BE73BBC3BCE5CF2B874F2B2DBE51357B8579AAF3A5F6D
	EA74EA3CFE93D34FC7BB9CBB9AAEB95C6BB9EE7ABDB57B66F7E91B9E37CEDDF4
	BD79F116FFD6D59E393DDDBDF37A6FF7C5F7F5DF16DD7E7227FDCECBBBD97727
	EEADBC4FBC5FF440ED41D943DD87D53F5BFEDCD8EFDC7F6AC077A0F3D1DC47F7
	068583CFFE91F58F0F43058F998FCB860D86EB9E383E3939E23F72FDE9FCA743
	CF64CF269E17FEA2FECBAE17162F7EF8D5EBD7CED198D1A197F29793BF6D7CA5
	FDEAC0EB19AFDBC6C2C61EBEC97833315EF456FBEDC177DC771DEFA3DF0F4FE4
	7C207F28FF68F9B1F553D0A7FB93199393FF040398F3FC63332DDB0000002063
	48524D00007A25000080830000F9FF000080E9000075300000EA6000003A9800
	00176F925FC546000001984944415478DAECDD516EC2301045511B6597D91FDB
	74BF5C21D41652A9F5B37D9E84C827F19DEBC904446A6BAD94524AADB5B5D66A
	9161A91D868CCFED934AADA8304398C10C6106338419CC1066304398C10C196E
	463F9EF1FDEA2BCE8CC70F35FB6DF4AB0B9C74BEC7F3875FE57B8D57DB6FAD79
	A778F485F7E55250CF1030E4BB9ED18F6D5783CC785E7820069AD1013C36F07E
	FCD5BB250B99C0EFF77B3C8CF33C2F5DDA26ED041AB8AB29991A46E2C4BC2D8C
	1DEE2EDBA6C01030C01030C01030C09028183B4CC5D3C0F09B2BDB1418020618
	89710B3D286EA10B1860C85E304CEC41304CECB62930040C30040C30048C2D72
	AC7A62330E98C7EED598F487044BC2F8CDA49F60D26D732B34F0990D028319CC
	00E31F2B9B194195CD8CA08A654650C532C3D51418CC600618CC600618CC6006
	18CC600618CC600618CC008319CC008319CCB89643C583F1D7153F258DDD7B46
	03834160A49BE10996CCC8A8766608339821CC306784CD0E3F2D74EAC321979C
	33DEA9F8C4670E2ED733667E1EF8920DFCD536649B1AD0376631A2E7030000FF
	FF0300E3810410A55446150000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="499" length_in_bytes="3246" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D49484452000000630000
	0062080600000044676D30000000097048597300000EC300000EC301C76FA864
	00000A4F6943435050686F746F73686F70204943432070726F66696C65000078
	DA9D53675453E9163DF7DEF4424B8880944B6F5215082052428B801491262A21
	09104A8821A1D91551C1114545041BC8A088038E8E808C15512C0C8A0AD807E4
	21A28E83A3888ACAFBE17BA36BD6BCF7E6CDFEB5D73EE7ACF39DB3CF07C0080C
	9648335135800CA9421E11E083C7C4C6E1E42E40810A2470001008B3642173FD
	230100F87E3C3C2B22C007BE000178D30B0800C04D9BC0301C87FF0FEA42995C
	01808401C07491384B08801400407A8E42A600404601809D98265300A0040060
	CB6362E300502D0060277FE6D300809DF8997B01005B94211501A09100201365
	884400683B00ACCF568A450058300014664BC43900D82D00304957664800B0B7
	00C0CE100BB200080C00305188852900047B0060C8232378008499001446F257
	3CF12BAE10E72A00007899B23CB9243945815B082D710757572E1E28CE49172B
	14366102619A402EC27999193281340FE0F3CC0000A0911511E083F3FD78CE0E
	AECECE368EB60E5F2DEABF06FF226262E3FEE5CFAB70400000E1747ED1FE2C2F
	B31A803B06806DFEA225EE04685E0BA075F78B66B20F40B500A0E9DA57F370F8
	7E3C3C45A190B9D9D9E5E4E4D84AC4425B61CA577DFE67C25FC057FD6CF97E3C
	FCF7F5E0BEE22481325D814704F8E0C2CCF44CA51CCF92098462DCE68F47FCB7
	0BFFFC1DD322C44962B9582A14E35112718E449A8CF332A52289429229C525D2
	FF64E2DF2CFB033EDF3500B06A3E017B912DA85D6303F64B27105874C0E2F700
	00F2BB6FC1D4280803806883E1CF77FFEF3FFD47A02500806649927100005E44
	242E54CAB33FC708000044A0812AB0411BF4C1182CC0061CC105DCC10BFC6036
	844224C4C24210420A64801C726029AC82422886CDB01D2A602FD4401D34C051
	688693700E2EC255B80E3D700FFA61089EC128BC81090441C808136121DA8801
	628A58238E08179985F821C14804128B2420C9881451224B91354831528A5420
	55481DF23D720239875C46BA913BC8003282FC86BC47319481B2513DD40CB543
	B9A8371A8446A20BD06474319A8F16A09BD072B41A3D8C36A1E7D0AB680FDA8F
	3E43C730C0E8180733C46C302EC6C342B1382C099363CBB122AC0CABC61AB056
	AC03BB89F563CFB17704128145C0093604774220611E4148584C584ED848A820
	1C243411DA093709038451C2272293A84BB426BA11F9C4186232318758482C23
	D6128F132F107B8843C437241289433227B9900249B1A454D212D246D26E5223
	E92CA99B34481A2393C9DA646BB20739942C202BC885E49DE4C3E433E41BE421
	F25B0A9D624071A4F853E22852CA6A4A19E510E534E5066598324155A39A52DD
	A8A15411358F5A42ADA1B652AF5187A81334759A39CD8316494BA5ADA295D31A
	681768F769AFE874BA11DD951E4E97D057D2CBE947E897E803F4770C0D861583
	C7886728199B18071867197718AF984CA619D38B19C754303731EB98E7990F99
	6F55582AB62A7C1591CA0A954A9526951B2A2F54A9AAA6AADEAA0B55F355CB54
	8FA95E537DAE46553353E3A909D496AB55AA9D50EB531B5367A93BA887AA67A8
	6F543FA47E59FD890659C34CC34F43A451A0B15FE3BCC6200B6319B3782C216B
	0DAB86758135C426B1CDD97C762ABB98FD1DBB8B3DAAA9A13943334A3357B352
	F394663F07E39871F89C744E09E728A797F37E8ADE14EF29E2291BA6344CB931
	655C6BAA96979658AB48AB51AB47EBBD36AEEDA79DA6BD45BB59FB810E41C74A
	275C2747678FCE059DE753D953DDA70AA7164D3D3AF5AE2EAA6BA51BA1BB4477
	BF6EA7EE989EBE5E809E4C6FA7DE79BDE7FA1C7D2FFD54FD6DFAA7F5470C5806
	B30C2406DB0CCE183CC535716F3C1D2FC7DBF151435DC34043A561956197E184
	91B9D13CA3D5468D460F8C69C65CE324E36DC66DC6A326062621264B4DEA4DEE
	9A524DB9A629A63B4C3B4CC7CDCCCDA2CDD699359B3D31D732E79BE79BD79BDF
	B7605A785A2CB6A8B6B86549B2E45AA659EEB6BC6E855A3959A558555A5DB346
	AD9DAD25D6BBADBBA711A7B94E934EAB9ED667C3B0F1B6C9B6A9B719B0E5D806
	DBAEB66DB67D6167621767B7C5AEC3EE93BD937DBA7D8DFD3D070D87D90EAB1D
	5A1D7E73B472143A563ADE9ACE9CEE3F7DC5F496E92F6758CF10CFD833E3B613
	CB29C4699D539BD347671767B97383F3888B894B82CB2E973E2E9B1BC6DDC8BD
	E44A74F5715DE17AD2F59D9BB39BC2EDA8DBAFEE36EE69EE87DC9FCC349F299E
	593373D0C3C843E051E5D13F0B9F95306BDFAC7E4F434F8167B5E7232F632F91
	57ADD7B0B7A577AAF761EF173EF63E729FE33EE33C37DE32DE595FCC37C0B7C8
	B7CB4FC36F9E5F85DF437F23FF64FF7AFFD100A78025016703898141815B02FB
	F87A7C21BF8E3F3ADB65F6B2D9ED418CA0B94115418F82AD82E5C1AD2168C8EC
	90AD21F7E798CE91CE690E85507EE8D6D00761E6618BC37E0C2785878557863F
	8E7088581AD131973577D1DC4373DF44FA449644DE9B67314F39AF2D4A352A3E
	AA2E6A3CDA37BA34BA3FC62E6659CCD5589D58496C4B1C392E2AAE366E6CBEDF
	FCEDF387E29DE20BE37B17982FC85D7079A1CEC2F485A716A92E122C3A96404C
	884E3894F041102AA8168C25F21377258E0A79C21DC267222FD136D188D8435C
	2A1E4EF2482A4D7A92EC91BC357924C533A52CE5B98427A990BC4C0D4CDD9B3A
	9E169A76206D323D3ABD31839291907142AA214D93B667EA67E66676CBAC6585
	B2FEC56E8BB72F1E9507C96BB390AC05592D0AB642A6E8545A28D72A07B26765
	5766BFCD89CA3996AB9E2BCDEDCCB3CADB90379CEF9FFFED12C212E192B6A586
	4B572D1D58E6BDAC6A39B23C7179DB0AE315052B865606AC3CB88AB62A6DD54F
	ABED5797AE7EBD267A4D6B815EC1CA82C1B5016BEB0B550AE5857DEBDCD7ED5D
	4F582F59DFB561FA869D1B3E15898AAE14DB1797157FD828DC78E51B876FCABF
	99DC94B4A9ABC4B964CF66D266E9E6DE2D9E5B0E96AA97E6970E6E0DD9DAB40D
	DF56B4EDF5F645DB2F97CD28DBBB83B643B9A3BF3CB8BC65A7C9CECD3B3F54A4
	54F454FA5436EED2DDB561D7F86ED1EE1B7BBCF634ECD5DB5BBCF7FD3EC9BEDB
	5501554DD566D565FB49FBB3F73FAE89AAE9F896FB6D5DAD4E6D71EDC703D203
	FD07230EB6D7B9D4D51DD23D54528FD62BEB470EC71FBEFE9DEF772D0D360D55
	8D9CC6E223704479E4E9F709DFF71E0D3ADA768C7BACE107D31F761D671D2F6A
	429AF29A469B539AFB5B625BBA4FCC3ED1D6EADE7AFC47DB1F0F9C343C59794A
	F354C969DAE982D39367F2CF8C9D959D7D7E2EF9DC60DBA2B67BE763CEDF6A0F
	6FEFBA1074E1D245FF8BE73BBC3BCE5CF2B874F2B2DBE51357B8579AAF3A5F6D
	EA74EA3CFE93D34FC7BB9CBB9AAEB95C6BB9EE7ABDB57B66F7E91B9E37CEDDF4
	BD79F116FFD6D59E393DDDBDF37A6FF7C5F7F5DF16DD7E7227FDCECBBBD97727
	EEADBC4FBC5FF440ED41D943DD87D53F5BFEDCD8EFDC7F6AC077A0F3D1DC47F7
	068583CFFE91F58F0F43058F998FCB860D86EB9E383E3939E23F72FDE9FCA743
	CF64CF269E17FEA2FECBAE17162F7EF8D5EBD7CED198D1A197F29793BF6D7CA5
	FDEAC0EB19AFDBC6C2C61EBEC97833315EF456FBEDC177DC771DEFA3DF0F4FE4
	7C207F28FF68F9B1F553D0A7FB93199393FF040398F3FC63332DDB0000002063
	48524D00007A25000080830000F9FF000080E9000075300000EA6000003A9800
	00176F925FC546000001CF4944415478DAECDD416EC2301445518CB24BF6C736
	DD51AA16B5A9294978B6CF9B80540671EEBFB6BF294AA9B55E464D29A5D65ACB
	5E9F3B3AD7AF17342A9057FE7EEAB58E68C62B37F89D867CC24851F508285BE3
	6AF9CCE9D3D468205AC79534EEA1D78CF546FF36B6242B865D337ACDF0BBA916
	33ECA68419CC90A62C3F1D09ACEF5F79ED618B9BD65B955AEB375DF7B8B85E60
	C499F178E3F6AC968429B094B25934499096C7A969A6393A6DBCD79917CCB4E9
	746A18CC600618CC60C6FFB7B66947CAB399314DD3D7039065BDA0D6E3908B1C
	6B466BEEF77B3C8CDBEDD6D4FDAF9D79E4D7AE0286F40863EBC00F8CF3773D60
	081860081802061802061872268C19BAE26E60F8D750D314180206188971841E
	1447E802061832170C1D7B100C1DBB690A0C01030C01030C01638A2CA30EACC7
	067399BD1AF7FE091D183B74FA0926CDFED3630B78CF0681C10C668071626533
	23A8B2991154B1CC08AA5866D84D81C10C6680C10C6680C10C6680C10C6680C1
	0C6680C10C3098C10C3098C18CE7B2A878308EAEF82E69789809180C0223DC0C
	0FDA654646B5334398C10C61863E23AC77D8BAD1A90F871CB2CF68A9F8C4670E
	0EB7663C7B9393EC187201FF6B1A324DBD61DDE8C588351F0300E59745D0D42C
	372E0000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="500" length_in_bytes="3251" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D49484452000000630000
	0062080600000044676D30000000097048597300000EC300000EC301C76FA864
	00000A4F6943435050686F746F73686F70204943432070726F66696C65000078
	DA9D53675453E9163DF7DEF4424B8880944B6F5215082052428B801491262A21
	09104A8821A1D91551C1114545041BC8A088038E8E808C15512C0C8A0AD807E4
	21A28E83A3888ACAFBE17BA36BD6BCF7E6CDFEB5D73EE7ACF39DB3CF07C0080C
	9648335135800CA9421E11E083C7C4C6E1E42E40810A2470001008B3642173FD
	230100F87E3C3C2B22C007BE000178D30B0800C04D9BC0301C87FF0FEA42995C
	01808401C07491384B08801400407A8E42A600404601809D98265300A0040060
	CB6362E300502D0060277FE6D300809DF8997B01005B94211501A09100201365
	884400683B00ACCF568A450058300014664BC43900D82D00304957664800B0B7
	00C0CE100BB200080C00305188852900047B0060C8232378008499001446F257
	3CF12BAE10E72A00007899B23CB9243945815B082D710757572E1E28CE49172B
	14366102619A402EC27999193281340FE0F3CC0000A0911511E083F3FD78CE0E
	AECECE368EB60E5F2DEABF06FF226262E3FEE5CFAB70400000E1747ED1FE2C2F
	B31A803B06806DFEA225EE04685E0BA075F78B66B20F40B500A0E9DA57F370F8
	7E3C3C45A190B9D9D9E5E4E4D84AC4425B61CA577DFE67C25FC057FD6CF97E3C
	FCF7F5E0BEE22481325D814704F8E0C2CCF44CA51CCF92098462DCE68F47FCB7
	0BFFFC1DD322C44962B9582A14E35112718E449A8CF332A52289429229C525D2
	FF64E2DF2CFB033EDF3500B06A3E017B912DA85D6303F64B27105874C0E2F700
	00F2BB6FC1D4280803806883E1CF77FFEF3FFD47A02500806649927100005E44
	242E54CAB33FC708000044A0812AB0411BF4C1182CC0061CC105DCC10BFC6036
	844224C4C24210420A64801C726029AC82422886CDB01D2A602FD4401D34C051
	688693700E2EC255B80E3D700FFA61089EC128BC81090441C808136121DA8801
	628A58238E08179985F821C14804128B2420C9881451224B91354831528A5420
	55481DF23D720239875C46BA913BC8003282FC86BC47319481B2513DD40CB543
	B9A8371A8446A20BD06474319A8F16A09BD072B41A3D8C36A1E7D0AB680FDA8F
	3E43C730C0E8180733C46C302EC6C342B1382C099363CBB122AC0CABC61AB056
	AC03BB89F563CFB17704128145C0093604774220611E4148584C584ED848A820
	1C243411DA093709038451C2272293A84BB426BA11F9C4186232318758482C23
	D6128F132F107B8843C437241289433227B9900249B1A454D212D246D26E5223
	E92CA99B34481A2393C9DA646BB20739942C202BC885E49DE4C3E433E41BE421
	F25B0A9D624071A4F853E22852CA6A4A19E510E534E5066598324155A39A52DD
	A8A15411358F5A42ADA1B652AF5187A81334759A39CD8316494BA5ADA295D31A
	681768F769AFE874BA11DD951E4E97D057D2CBE947E897E803F4770C0D861583
	C7886728199B18071867197718AF984CA619D38B19C754303731EB98E7990F99
	6F55582AB62A7C1591CA0A954A9526951B2A2F54A9AAA6AADEAA0B55F355CB54
	8FA95E537DAE46553353E3A909D496AB55AA9D50EB531B5367A93BA887AA67A8
	6F543FA47E59FD890659C34CC34F43A451A0B15FE3BCC6200B6319B3782C216B
	0DAB86758135C426B1CDD97C762ABB98FD1DBB8B3DAAA9A13943334A3357B352
	F394663F07E39871F89C744E09E728A797F37E8ADE14EF29E2291BA6344CB931
	655C6BAA96979658AB48AB51AB47EBBD36AEEDA79DA6BD45BB59FB810E41C74A
	275C2747678FCE059DE753D953DDA70AA7164D3D3AF5AE2EAA6BA51BA1BB4477
	BF6EA7EE989EBE5E809E4C6FA7DE79BDE7FA1C7D2FFD54FD6DFAA7F5470C5806
	B30C2406DB0CCE183CC535716F3C1D2FC7DBF151435DC34043A561956197E184
	91B9D13CA3D5468D460F8C69C65CE324E36DC66DC6A326062621264B4DEA4DEE
	9A524DB9A629A63B4C3B4CC7CDCCCDA2CDD699359B3D31D732E79BE79BD79BDF
	B7605A785A2CB6A8B6B86549B2E45AA659EEB6BC6E855A3959A558555A5DB346
	AD9DAD25D6BBADBBA711A7B94E934EAB9ED667C3B0F1B6C9B6A9B719B0E5D806
	DBAEB66DB67D6167621767B7C5AEC3EE93BD937DBA7D8DFD3D070D87D90EAB1D
	5A1D7E73B472143A563ADE9ACE9CEE3F7DC5F496E92F6758CF10CFD833E3B613
	CB29C4699D539BD347671767B97383F3888B894B82CB2E973E2E9B1BC6DDC8BD
	E44A74F5715DE17AD2F59D9BB39BC2EDA8DBAFEE36EE69EE87DC9FCC349F299E
	593373D0C3C843E051E5D13F0B9F95306BDFAC7E4F434F8167B5E7232F632F91
	57ADD7B0B7A577AAF761EF173EF63E729FE33EE33C37DE32DE595FCC37C0B7C8
	B7CB4FC36F9E5F85DF437F23FF64FF7AFFD100A78025016703898141815B02FB
	F87A7C21BF8E3F3ADB65F6B2D9ED418CA0B94115418F82AD82E5C1AD2168C8EC
	90AD21F7E798CE91CE690E85507EE8D6D00761E6618BC37E0C2785878557863F
	8E7088581AD131973577D1DC4373DF44FA449644DE9B67314F39AF2D4A352A3E
	AA2E6A3CDA37BA34BA3FC62E6659CCD5589D58496C4B1C392E2AAE366E6CBEDF
	FCEDF387E29DE20BE37B17982FC85D7079A1CEC2F485A716A92E122C3A96404C
	884E3894F041102AA8168C25F21377258E0A79C21DC267222FD136D188D8435C
	2A1E4EF2482A4D7A92EC91BC357924C533A52CE5B98427A990BC4C0D4CDD9B3A
	9E169A76206D323D3ABD31839291907142AA214D93B667EA67E66676CBAC6585
	B2FEC56E8BB72F1E9507C96BB390AC05592D0AB642A6E8545A28D72A07B26765
	5766BFCD89CA3996AB9E2BCDEDCCB3CADB90379CEF9FFFED12C212E192B6A586
	4B572D1D58E6BDAC6A39B23C7179DB0AE315052B865606AC3CB88AB62A6DD54F
	ABED5797AE7EBD267A4D6B815EC1CA82C1B5016BEB0B550AE5857DEBDCD7ED5D
	4F582F59DFB561FA869D1B3E15898AAE14DB1797157FD828DC78E51B876FCABF
	99DC94B4A9ABC4B964CF66D266E9E6DE2D9E5B0E96AA97E6970E6E0DD9DAB40D
	DF56B4EDF5F645DB2F97CD28DBBB83B643B9A3BF3CB8BC65A7C9CECD3B3F54A4
	54F454FA5436EED2DDB561D7F86ED1EE1B7BBCF634ECD5DB5BBCF7FD3EC9BEDB
	5501554DD566D565FB49FBB3F73FAE89AAE9F896FB6D5DAD4E6D71EDC703D203
	FD07230EB6D7B9D4D51DD23D54528FD62BEB470EC71FBEFE9DEF772D0D360D55
	8D9CC6E223704479E4E9F709DFF71E0D3ADA768C7BACE107D31F761D671D2F6A
	429AF29A469B539AFB5B625BBA4FCC3ED1D6EADE7AFC47DB1F0F9C343C59794A
	F354C969DAE982D39367F2CF8C9D959D7D7E2EF9DC60DBA2B67BE763CEDF6A0F
	6FEFBA1074E1D245FF8BE73BBC3BCE5CF2B874F2B2DBE51357B8579AAF3A5F6D
	EA74EA3CFE93D34FC7BB9CBB9AAEB95C6BB9EE7ABDB57B66F7E91B9E37CEDDF4
	BD79F116FFD6D59E393DDDBDF37A6FF7C5F7F5DF16DD7E7227FDCECBBBD97727
	EEADBC4FBC5FF440ED41D943DD87D53F5BFEDCD8EFDC7F6AC077A0F3D1DC47F7
	068583CFFE91F58F0F43058F998FCB860D86EB9E383E3939E23F72FDE9FCA743
	CF64CF269E17FEA2FECBAE17162F7EF8D5EBD7CED198D1A197F29793BF6D7CA5
	FDEAC0EB19AFDBC6C2C61EBEC97833315EF456FBEDC177DC771DEFA3DF0F4FE4
	7C207F28FF68F9B1F553D0A7FB93199393FF040398F3FC63332DDB0000002063
	48524D00007A25000080830000F9FF000080E9000075300000EA6000003A9800
	00176F925FC546000001D44944415478DAECDDCD6EC2301045E11AE52D793F5E
	D35DA56A518942FEB8B6BFD980040B7BCE1C8F1D815C6AAD5FBD4629A5D65ACB
	51DF3B3B6EBF07D42B903D9F5F3AD61ECDD893E04F1AF2032345D533A02CCD6B
	CD772E5FA67A03B1765E49F3EEBA67CC897E35B7242BBAED19AD46F7BBA93566
	D84D09663043AC8AE9BF4702F3FB3DAF2D6C71D3CE56A5D6FA47D72306D70A8C
	38339E137764B5242C81A594C5A24982343D2F4D23ADD169F3BD8DDC30D396D3
	A16130831960308319DBB7B6698F944733637A3E311F39C0A53D7E8A197127F0
	771E8730E502186BE2F178C4C3B8DFEF9B4EFEA5948FC318BD81478D67F4AD2D
	182955CC8CA02A66869E0106339801063398010633980106331AAAACA1CD68FD
	A7A17A0633C0600633FA847146E29811943866E81960308319B930D22A716833
	D22A316D3C935E00C6D915DF240D7F0900834160308319603083196030831960
	30831960308319606CAB6C6604553633D22B9E194115CF0CBB293098C10C3098
	C10C3098C10C3098010633980106339801063398010633980106339801063398
	010633E6F1B868971911D5CE0CC10C6608663867849D1D96129D7A396497E78C
	35159F78E760773DE3DD2447DE60D923905789B64C7DA06FB462C41CDF0300CA
	8185C8F63073920000000049454E44AE426082
	]]>
</GDLPict>

<Copyright SectVersion="1" SectionFlags="0" SubIdent="0">
	<Author>GRAPHISOFT</Author>
	<License>
		<Type>CC BY-ND</Type>
		<Version>3.0</Version>
	</License>
</Copyright>

</Symbol>
