<?xml version="1.0" encoding="UTF-8"?>
<Symbol IsArchivable="true" IsPlaceable="false" MainGUID="813C9150-07B5-482D-BEA4-08777DDB0FA0" MigrationValue="Normal" Owner="1196638531" Signature="1297307981" Version="38">
<Ancestry SectVersion="1" SectionFlags="0" SubIdent="0" Template="false">
	<MainGUID>F938E33A-329D-4A36-BE3E-85E126820996</MainGUID>
	<MainGUID>103E8D2C-8230-42E1-9597-46F84CCE28C0</MainGUID>
	<MainGUID>B2970E4C-8680-4061-8670-2F4B638F3953</MainGUID>
</Ancestry>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_3D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
! CasingTrapezoid

PEN gs_frame_pen


material gs_trim_out_mat

! ==============================================================================
! Casing in Straight Wall
! ==============================================================================

if abs(WIDO_ORIG_DIST)<EPS then

	if abs(WALL_INCL)<EPS then

		! ------------------------------------------------------------------------------
		! Corner cuts
		! ------------------------------------------------------------------------------

		muly -1
		if WIDO_REVEAL_SIDE then
			mulz -1
			addz -WIDO_FRAME_THICKNESS
		endif

		numCuts = 0

		! --- Cut on board side

		! Right Corner
		if bRightCornerFunction then
			! --- Cut right side in case of Corner Window ---

			if bFitMode then
				add rightCwDx + rightCwDx2 + rightWidth - (WALL_THICKNESS - WIDO_SILL - WIDO_FRAME_THICKNESS + gs_trim_thk_in) * rx, 0, WALL_THICKNESS - WIDO_SILL + gs_trim_thk_in
				rotx 90

				maxDist  = WALL_THICKNESS - min(0, WIDO_SILL) + gs_trim_thk_out + gs_trim_thk_in

				if abs(maxDist) > EPS then
					cutpolya 4, 2, 0,
						0, 0, 10,
						maxDist / tan(rightCornerAngle / 2), -maxDist, 10,
						A + A, -maxDist, 8,
						A + A, 0, 8

					numCuts = numCuts + 1
				endif
				del 2
			else
				rotx 90

				cutpolya 5, 2, 0,
					A + A + gs_tw_right_in, 																								WALL_THICKNESS - WIDO_SILL + MAX(gs_board_nosing, gs_trim_thk_in),		8,
					rightCwDx + rightCwDx2 + rightWidth - (WALL_THICKNESS - WIDO_SILL - WIDO_FRAME_THICKNESS + MAX(gs_board_nosing, gs_trim_thk_in)) * rx,	WALL_THICKNESS - WIDO_SILL + MAX(gs_board_nosing, gs_trim_thk_in),		10,
					rightCwDx + rightWidth - rightCwDx2 * COS(rightCornerAngle),															WIDO_FRAME_THICKNESS + rightCwDx2 * SIN(rightCornerAngle),	8,
					rightCwDx + rightWidth,																										WIDO_FRAME_THICKNESS,						8,
					A + A + gs_tw_right_in,																									WIDO_FRAME_THICKNESS,						8

				numCuts = numCuts + 1
				del 1
			endif
		endif

		! Left Corner
		if bLeftCornerFunction then

			! --- Cut left side in case of Corner Window ---

			if bFitMode then
				add -leftCwDx - leftCwDx2 - leftWidth + (WALL_THICKNESS - WIDO_SILL- WIDO_FRAME_THICKNESS + gs_trim_thk_in) * lx, 0, WALL_THICKNESS - WIDO_SILL + gs_trim_thk_in
				rotx 90

				maxDist  = WALL_THICKNESS - min(0, WIDO_SILL) + gs_trim_thk_out + gs_trim_thk_in

				if abs(maxDist) > EPS then
					cutpolya 4, 1, 0,
						0, 0, 10,
						-maxDist / tan(leftCornerAngle / 2), -maxDist, 10,
						-A - A, -maxDist, 8,
						-A - A, 0, 8

					numCuts = numCuts + 1
				endif
				del 2
			else

				rotx 90

				cutpolya 5, 1, 0,
					-A - A - gs_tw_left_in, 																								WALL_THICKNESS - WIDO_SILL + MAX(gs_board_nosing, gs_trim_thk_in),		8,
					-leftCwDx - leftCwDx2 - leftWidth + (WALL_THICKNESS - WIDO_SILL - WIDO_FRAME_THICKNESS + MAX(gs_board_nosing, gs_trim_thk_in)) * lx,	WALL_THICKNESS - WIDO_SILL + MAX(gs_board_nosing, gs_trim_thk_in),		10,
					-leftCwDx - leftWidth + leftCwDx2 * COS(leftCornerAngle),															WIDO_FRAME_THICKNESS + leftCwDx2 * SIN(leftCornerAngle),	8,
					-leftCwDx - leftWidth,																										WIDO_FRAME_THICKNESS,						8,
					-A - A - gs_tw_left_in,																									WIDO_FRAME_THICKNESS,						8

				numCuts = numCuts + 1
				del 1
			endif
		endif

		! --- Cut on sill side ---

		! Right Corner
		if bRightCornerFunction then
			! --- Cut right side in case of Corner Window ---

			add rightCwDx + rightWidth + WIDO_FRAME_THICKNESS * rx, 0, 0
			rotx 90

			maxDist  = WIDO_SILL + gs_trim_thk_out

			if abs(maxDist) > EPS then
				cutpolya 4, 1, 0,
					0, 0, 8,
					maxDist / tan(rightCornerAngle / 2), -maxDist, 10,
					A + A, -maxDist, 8,
					A + A, 0, 8

				numCuts = numCuts + 1
			endif

			del 2
		endif

		! Left Corner
		if bLeftCornerFunction then
			! --- Cut left side in case of Corner Window ---

			add -leftCwDx - leftWidth - WIDO_FRAME_THICKNESS * lx, 0, 0
			rotx 90

			maxDist  = WIDO_SILL + gs_trim_thk_out		!!WALL_THICKNESS

			if abs(maxDist) > EPS then
				cutpolya 4, 1, 0,
					0, 0, 8,
					-maxDist / tan(leftCornerAngle / 2), -maxDist, 10,
					-A - A, -maxDist, 8,
					-A - A, 0, 8

				numCuts = numCuts + 1
			endif

			del 2
		endif

		del 1
		if WIDO_REVEAL_SIDE then del 2



		if WIDO_REVEAL_SIDE then
			addz WIDO_SILL - WALL_THICKNESS + WIDO_FRAME_THICKNESS    ! Flip
		else
			addz -WIDO_SILL
		endif

		if WIDO_REVEAL_SIDE then
			mulz -1
			addz -WALL_THICKNESS
		endif

		if bDrawInsideTrim then
			sect_fill gs_trim_fill_in, gs_trim_pen_bg_in, gs_trim_pen_fg_in, gs_trim_pen_cont
			material gs_trim_in_mat

			numCutsCornerColumn = 0
			if gs_corner_column then
				matTrim = gs_trim_in_mat
				gosub 300
			endif

			!!! cut with board-----------------------------
			if bDrawBoard then
				add 0, -boardSideHeight, WIDO_FRAME_THICKNESS
				rotx -90 - boardSideAngle

				material gs_trim_in_mat
				cutplane 1, 1, 0, 1

				del 2
			endif

			! Casing in Wallhole
			if gs_trim_width_in > 0 then
				px1L = -leftWidth+gs_trim_width_in-overSizeLeftX
				px2L = px1L - gs_trim_width_in
				px1R = rightWidth-gs_trim_width_in+overSizeRightX
				px2R = px1R + gs_trim_width_in

				if iWindowShape = SHAPE_PARALLELOGRAM then
					py1BL =	ArchHeight + dytth1_in - overSizeLeftY
					py2BL = py1BL - dytth1_in

					py1BR =	dytth2_in - overSizeRightY
					py2BR = py1BR - dytth2_in
				else
					py1BL =	gs_trim_width_in*not(bDrawBoard)
					py2BL = py1BL-gs_trim_width_in*not(bDrawSill)

					py1BR =	py1BL
					py2BR = py2BL
				endif

				py1TL = b-dytth2_in+overSizeLeftY
				py2TL = py1TL + dytth2_in
				py1TR = b-ArchHeight-dytth1_in-overSizeRightY
				py2TR = py1TR + dytth1_in

				addz WIDO_SILL+WIDO_FRAME_THICKNESS
				prism_ 9, WALL_THICKNESS-WIDO_SILL-WIDO_FRAME_THICKNESS,
					px2L, py2BL, 15,
					px1L, py1BL, jambExtInMask,
					px1L, py1TL, jambExtInMask,
					px1R, py1TR, jambExtInMask,
					px1R, py1BR, jambExtInMask,
					px2R, py2BR, 15,
					px2R, py2TR, 15,
					px2L, py2TL, 15,
					px2L, py2BL, -1

				if not(bDrawBoard) then
					base
					prism_ 5, WALL_THICKNESS-WIDO_SILL-WIDO_FRAME_THICKNESS,
						px1L, py1BL, jambExtInMask,
						px1R, py1BR, jambExtInMask,
						px2R, py2BR, 15,
						px2L, py2BL, jambExtInMask,
						px1L, py1BL, -1
					vert 0, 0, 0
					vert 1, 0, 0
					vert 0, 1, 0
					vert 0, 0, 1
					coor 2, -1, -2, -3, -4
					body 1
				endif

				del 1
			endif

			! Casing on Wall
			if gs_trim_thk_in > 0 then
				px1L = -leftWidth+gs_trim_width_in-gs_trim_offs_in-overSizeLeftX
				px2L = px1L - gs_tw_right_in
				px1R = rightWidth-gs_trim_width_in+gs_trim_offs_in+overSizeRightX
				px2R = px1R + gs_tw_right_in

				py1TL = b-dytis2+overSizeLeftY
				py2TL = py1TL + idytw2
				py1TR = b-ArchHeight-dytis1-overSizeRightY
				py2TR = py1TR + idytw1

				if iWindowShape = SHAPE_PARALLELOGRAM then
					py1BL =	ArchHeight + dytis1 + overSizeLeftY
					py2BL = py1BL - idytw1

					py1BR =	dytis2 - overSizeRightY
					py2BR = py1BR - idytw2
				else
					if bDrawBoard then
						py1BL = gs_board_thk
						py2BL = py1BL
					else
						py1BL = gs_trim_width_in - gs_trim_offs_in
						py2BL = py1BL - gs_tw_bottom_in
					endif

					py1BR =	py1BL
					py2BR = py2BL
				endif

				addz WALL_THICKNESS

				if not(bLeftCornerFunction) then
					base
					PRISM_ 4, gs_trim_thk_in,
						px1L, py1BL, 10 + 5 * bDrawBoard,
						px2L, py2BL, 15,
						px2L, py2TL, 10,
						px1L, py1TL, casInMask
					vert 0, 0, 0
					vert 0, 1, 0
					vert 1, 0, 0
					vert 0, 0, 1
					coor 2, -1, -2, -3, -4
					body 1
				endif

				if not(bRightCornerFunction) then
					base
					PRISM_ 4,gs_trim_thk_in,
						px1R, py1BR, 10 + 5 * bDrawBoard,
						px2R, py2BR, 15,
						px2R, py2TR, 10,
						px1R, py1TR, casInMask
					vert 0, 0, 0
					vert 0, 1, 0
					vert 1, 0, 0
					vert 0, 0, 1
					coor 2, -1, -2, -3, -4
					body 1
				endif

				base
				PRISM_ 4,gs_trim_thk_in,
					px2L, py2TL, 10,
					px1L, py1TL, casInMask,
					px1R, py1TR, 10,
					px2R, py2TR, 15
				vert 0, 0, 0
				vert cos(palpha), -sin(palpha), 0
				vert sin(palpha), cos(palpha), 0
				vert 0, 0, 1
				coor 2, -1, -2, -3, -4
				body 1

				if not(bDrawBoard) then
					base

					PRISM_ 4,gs_trim_thk_in,
						px2R, py2BR, 10,
						px1R, py1BR, casInMask,
						px1L, py1BL, 10,
						px2L, py2BL, 15

					if iWindowShape = SHAPE_PARALLELOGRAM then
						vert 0, 0, 0
						vert cos(palpha), -sin(palpha), 0
						vert sin(palpha), cos(palpha), 0
						vert 0, 0, 1
					else
						vert 0, 0, 0
						vert 1, 0, 0
						vert 0, 1, 0
						vert 0, 0, 1
					endif
					coor 2, -1, -2, -3, -4
					body 1
				endif
				del 1
			endif

			if bDrawBoard then cutend

			for i=1 to numCutsCornerColumn
				cutend
			next i
		endif

		if bDrawOutsideTrim then gosub "Outside Casing"

		if WIDO_REVEAL_SIDE then
			del 2
		endif

		del 1

		for i = 1 to numCuts
			cutend
		next i

	endif

endif


! ==============================================================================
! Casing in Inclined Wall
! ==============================================================================

gs_trim_offs = gs_trim_offs_out

if abs(WIDO_ORIG_DIST)<EPS then

	if abs(WALL_INCL)>EPS then

		if not(WIDO_REVEAL_SIDE) then addz -WIDO_SILL else addz WIDO_SILL-WALL_THICKNESS+WIDO_FRAME_THICKNESS    ! Flip

		if WIDO_REVEAL_SIDE then
			MULZ -1
			addz -WALL_THICKNESS
		endif

		if bDrawInsideTrim then
			sect_fill gs_trim_fill_in, gs_trim_pen_bg_in, gs_trim_pen_fg_in, gs_trim_pen_cont
			material gs_trim_in_mat

			!!! cut with board-----------------------------
			if bDrawBoard then
				add 0, -boardSideHeight, WIDO_FRAME_THICKNESS
				rotx -90 - boardSideAngle

				material gs_trim_in_mat
				cutplane 1, 1, 0, 1

				del 2
			endif

			if not(SYMB_MIRRORED) AND abs(SYMB_ROTANGLE-180)<EPS OR SYMB_MIRRORED AND abs(SYMB_ROTANGLE)<EPS then MULX -1  ! Rotated or mirrored window

			ROTX 90
			if WALL_INCL > 0 then
				cutpolya 4, 1, 0,
				!prism_ 4, 1,
				   -leftWidth,  WALL_THICKNESS-TAN(WALL_INCL)*(leftWidth),  cutInMask,
					rightWidth,  WALL_THICKNESS+TAN(WALL_INCL)*(rightWidth),   cutInMask,
				   -leftWidth,  WALL_THICKNESS+TAN(WALL_INCL)*(rightWidth),   cutInMask,
				   -leftWidth,  WALL_THICKNESS-TAN(WALL_INCL)*(leftWidth),  -1
			endif

			if WALL_INCL < 0 then
				cutpolya 4, 1, 0,
				!!prism_ 4, 1,
				   -leftWidth,  WALL_THICKNESS-TAN(WALL_INCL)*(leftWidth),   cutInMask,
					rightWidth,  WALL_THICKNESS-TAN(WALL_INCL)*(leftWidth),   cutInMask,
					rightWidth,  WALL_THICKNESS+TAN(WALL_INCL)*(rightWidth),   cutInMask,
				   -leftWidth,  WALL_THICKNESS-TAN(WALL_INCL)*(leftWidth),  -1
			endif
			del 1

			addz WIDO_SILL+WIDO_FRAME_THICKNESS
			if not(SYMB_MIRRORED) AND abs(SYMB_ROTANGLE-180)<EPS OR SYMB_MIRRORED AND abs(SYMB_ROTANGLE)<EPS then MULX -1

			! Casing in Wallhole
			if gs_trim_width_in > 0 then
				px1L = -leftWidth+gs_trim_width_in
				px2L = px1L - gs_trim_width_in
				px1R = rightWidth-gs_trim_width_in
				px2R = px1R + gs_trim_width_in

				py1TL = b-dytth2_in
				py2TL = py1TL + dytth2_in
				py1TR = b-ArchHeight-dytth1_in
				py2TR = py1TR + dytth1_in

				if iWindowShape = SHAPE_PARALLELOGRAM then
					py1BL =	ArchHeight + dytth1_in
					py2BL = py1BL - dytth1_in

					py1BR =	dytth2_in
					py2BR = py1BR - dytth2_in
				else
					if bDrawBoard then
						py1BL = 0
						py2BL = py1BL
					else
						py1BL = gs_trim_width_in
						py2BL = py1BL - gs_trim_width_in
					endif

					py1BR =	py1BL
					py2BR = py2BL
				endif

				prism_ 9, WALL_THICKNESS-WIDO_SILL-WIDO_FRAME_THICKNESS+ABS(TAN(WALL_INCL))*(leftWidth),
					px2L, py2BL, 15,
					px1L, py1BL, jambExtInMask,
					px1L, py1TL, jambExtInMask,
					px1R, py1TR, jambExtInMask,
					px1R, py1BR, jambExtInMask,
					px2R, py2BR, 15,
					px2R, py2TR, 15,
					px2L, py2TL, 15,
					px2L, py2BL, -1

				if not(bDrawBoard) then
					base
					prism_ 5, WALL_THICKNESS-WIDO_SILL-WIDO_FRAME_THICKNESS+ABS(TAN(WALL_INCL))*(leftWidth),
						px1L, py1BL, jambExtInMask,
						px1R, py1BR, jambExtInMask,
						px2R, py2BR, 15,
						px2L, py2BL, jambExtInMask,
						px1L, py1BL, -1
					vert 0, 0, 0
					vert 1, 0, 0
					vert 0, 1, 0
					vert 0, 0, 1
					coor 2, -1, -2, -3, -4
					body 1
				endif
			endif

			if not(SYMB_MIRRORED) AND abs(SYMB_ROTANGLE-180)<EPS OR SYMB_MIRRORED AND abs(SYMB_ROTANGLE)<EPS then del 1
			del 1

			cutend


			if WIDO_REVEAL_SIDE then lwam=3
			if abs(gs_trim_offs_in)>EPS then lwam=-1

			px1L = -leftWidth+gs_trim_width_in-gs_trim_offs_in
			px1R = rightWidth-gs_trim_width_in+gs_trim_offs_in

			py1TL = b-dytis2
			py1TR = b-ArchHeight-dytis1

			if iWindowShape = SHAPE_PARALLELOGRAM then
				py1BL =	ArchHeight + dytis1

				py1BR =	dytis2
			else
				if bDrawBoard then
					py1BL = 0
				else
					py1BL = gs_trim_width_in - gs_trim_offs_in
				endif

				py1BR =	py1BL
			endif

			if not(SYMB_MIRRORED) AND abs(SYMB_ROTANGLE-180)<EPS OR SYMB_MIRRORED AND abs(SYMB_ROTANGLE)<EPS then MULX -1

			cutpolya 5, 1, 0,
				px1L, py1BL, cutInMask,
				px1R, py1BR, cutInMask,
				px1R, py1TR, cutInMask,
				px1L, py1TL, cutInMask,
				px1L, py1BL,-1

			if not(SYMB_MIRRORED) AND abs(SYMB_ROTANGLE-180)<EPS OR SYMB_MIRRORED AND abs(SYMB_ROTANGLE)<EPS then del 1

			addz WALL_THICKNESS
			ROTY -WALL_INCL

			if not(SYMB_MIRRORED) AND abs(SYMB_ROTANGLE-180)<EPS OR SYMB_MIRRORED AND abs(SYMB_ROTANGLE)<EPS then MULX -1

			! Casing on Wall
			if gs_trim_thk_in > 0 then
				! Need an offset because of the previous cutpolya
				dxInclined = abs(tan(WALL_INCL))*gs_trim_thk_in

				palpha_inclined=atn(ArchHeight / ((leftWidth + rightWidth))/cos(WALL_INCL))
				pbeta1_inclined=(90+palpha_inclined)/2
				pbeta2_inclined=(90-palpha_inclined)/2

				dytis1_inclined=(gs_trim_width_in-gs_trim_offs_in+dxInclined)/tan(pbeta1_inclined)   		 !dy at trim thickness
				dytis2_inclined=(gs_trim_width_in-gs_trim_offs_in+dxInclined)/tan(pbeta2_inclined)

				idytw1_inclined=(gs_tw_right_in+dxInclined)/tan(pbeta1_inclined)     !dy at inside trim width
				idytw2_inclined=(gs_tw_right_in+dxInclined)/tan(pbeta2_inclined)

				px1L = (-leftWidth+gs_trim_width_in)/cos(WALL_INCL) - gs_trim_offs_in + dxInclined
				px2L = px1L - gs_tw_right_in - dxInclined
				px1R = (rightWidth-gs_trim_width_in)/cos(WALL_INCL) + gs_trim_offs_in - dxInclined
				px2R = px1R + gs_tw_right_in + dxInclined

				py1TL = b-dytis2_inclined
				py2TL = py1TL + idytw2_inclined
				py1TR = b-ArchHeight-dytis1_inclined
				py2TR = py1TR + idytw1_inclined

				if iWindowShape = SHAPE_PARALLELOGRAM then
					py1BL =	ArchHeight + dytis1_inclined
					py2BL = py1BL - idytw1_inclined

					py1BR =	dytis2_inclined
					py2BR = py1BR - idytw2_inclined
				else
					if bDrawBoard then
						py1BL = gs_board_thk
						py2BL = py1BL
					else
						py1BL = gs_trim_width_in - gs_trim_offs_in
						py2BL = py1BL - gs_tw_bottom_in
					endif

					py1BR =	py1BL
					py2BR = py2BL
				endif

				base
				prism_ 4, gs_trim_thk_in,
					px1L, py1BL, 10 + 5 * bDrawBoard,
					px2L, py2BL, 15,
					px2L, py2TL, 10,
					px1L, py1TL, casInMask
				vert 0, 0, 0
				vert 0, 1, 0
				vert 1, 0, 0
				vert 0, 0, 1
				coor 2, -1, -2, -3, -4
				body 1

				base
				prism_ 4,gs_trim_thk_in,
					px1R, py1BR, 10 + 5 * bDrawBoard,
					px2R, py2BR, 15,
					px2R, py2TR, 10,
					px1R, py1TR, casInMask
				vert 0, 0, 0
				vert 0, 1, 0
				vert 1, 0, 0
				vert 0, 0, 1
				coor 2, -1, -2, -3, -4
				body 1

				base
				prism_ 4,gs_trim_thk_in,
					px2L, py2TL, 10,
					px1L, py1TL, casInMask,
					px1R, py1TR, 10,
					px2R, py2TR, 15
				vert 0, 0, 0
				vert cos(palpha), -sin(palpha), 0
				vert sin(palpha), cos(palpha), 0
				vert 0, 0, 1
				coor 2, -1, -2, -3, -4
				body 1

				if not(bDrawBoard) then
					base
					prism_ 4,gs_trim_thk_in,
						px2R, py2BR, 10,
						px1R, py1BR, casInMask,
						px1L, py1BL, 10,
						px2L, py2BL, 15

					if iWindowShape = SHAPE_PARALLELOGRAM then
						vert 0, 0, 0
						vert cos(palpha), -sin(palpha), 0
						vert sin(palpha), cos(palpha), 0
						vert 0, 0, 1
					else
						vert 0, 0, 0
						vert 1, 0, 0
						vert 0, 1, 0
						vert 0, 0, 1
					endif
					coor 2, -1, -2, -3, -4
					body 1
				endif
			endif

			if not(SYMB_MIRRORED) AND abs(SYMB_ROTANGLE-180)<EPS OR SYMB_MIRRORED AND abs(SYMB_ROTANGLE)<EPS then del 1
			del 2

			cutend

			if not(SYMB_MIRRORED) AND abs(SYMB_ROTANGLE-180)<EPS OR SYMB_MIRRORED AND abs(SYMB_ROTANGLE)<EPS then del 1

			if bDrawBoard then cutend

		endif

		if bDrawOutsideTrim then gosub "Outside Casing"

		if WIDO_REVEAL_SIDE then
			del 2
		endif

		del 1

		BODY -1
	endif

endif


! ==============================================================================
! Casing in Curved Wall
! ==============================================================================

if abs(WIDO_ORIG_DIST)>EPS then

	if bDrawInsideTrim then
		sect_fill gs_trim_fill_in, gs_trim_pen_bg_in, gs_trim_pen_fg_in, gs_trim_pen_cont
		material gs_trim_in_mat

		!!! cut with board-----------------------------
		if bDrawBoard then
			add 0, -boardSideHeight, WIDO_FRAME_THICKNESS
			rotx -90 - boardSideAngle

			material gs_trim_in_mat
			cutplane 1, 1, 0, 1

			del 2
		endif

		! Casing on Wall

		off1=0-gs_trim_thk_in
		off2=0
		off3=WALL_THICKNESS
		off4=-WALL_THICKNESS-gs_trim_thk_in
		gosub "Curved Wall Calculation"

		addz k_weitoffset

		mulz mulstat
		addz -rfur
		roty -AC_Hole_Position_Angle
		addz rfur

		resol 2*WALL_RESOL

		if iWindowShape = SHAPE_PARALLELOGRAM then
			py1BL =	ArchHeight + dytth1_in
			py2BL = py1BL - idytw1

			py1BR =	dytth2_in
			py2BR = py1BR - idytw2
		else
			if bDrawBoard then
				py1BL = gs_board_thk
				py2BL = py1BL
			else
				py1BL = gs_trim_width_in - gs_trim_offs_in
				py2BL = py1BL - gs_tw_bottom_in
			endif
			py1BR =	py1BL
			py2BR = py2BL
		endif

		if SYMB_ROTANGLE > 0 exor WIDO_REVEAL_SIDE then
			sideBit = 0
		else
			sideBit = 2
		endif

		if gs_trim_thk_in > 0 then
			bprism_ gs_trim_in_mat,gs_trim_in_mat,gs_trim_in_mat,4,gs_trim_thk_in,rfur,
				xoffset-ax/2-gs_tw_right_in+gs_trim_width_in, py2BL,15,
				xoffset-ax/2-gs_tw_right_in+gs_trim_width_in, b-dytth2_in+idytw2,bitset(btim1, sideBit,0),
				xoffset-ax/2+gs_trim_width_in, b-dytth2_in,btim1,
				xoffset-ax/2+gs_trim_width_in, py1BL,bitset(btim1, sideBit,abs(py1BL - py2BL) < EPS)

			bprism_ gs_trim_in_mat,gs_trim_in_mat,gs_trim_in_mat,4,gs_trim_thk_in,rfur,
				xoffset-ax/2-gs_tw_right_in+gs_trim_width_in, b-dytth2_in+idytw2,bitset(btim1, sideBit,0),
				xoffset-ax/2+gs_trim_width_in, b-dytth2_in,btim1,
				xoffset+ax/2-gs_trim_width_in, b-ArchHeight-dytth1_in,bitset(btim1, sideBit,0),
				xoffset+ax/2+gs_tw_right_in-gs_trim_width_in, b-ArchHeight-dytth1_in+idytw1,15

			bprism_ gs_trim_in_mat,gs_trim_in_mat,gs_trim_in_mat,4,gs_trim_thk_in,rfur,
				xoffset+ax/2+gs_tw_right_in-gs_trim_width_in, py2BR,15,
				xoffset+ax/2+gs_tw_right_in-gs_trim_width_in, b-ArchHeight-dytth1_in+idytw1,bitset(btim1, sideBit,0),
				xoffset+ax/2-gs_trim_width_in, b-ArchHeight-dytth1_in,btim1,
				xoffset+ax/2-gs_trim_width_in, py1BR,bitset(btim1, sideBit,abs(py1BR - py2BR) < EPS)

			if abs(py1BL - py2BL) > EPS then
				bprism_ gs_trim_in_mat,gs_trim_in_mat,gs_trim_in_mat,4,gs_trim_thk_in,rfur,
					xoffset-ax/2-gs_tw_right_in+gs_trim_width_in, py2BL,bitset(btim1, sideBit,0),
					xoffset-ax/2+gs_trim_width_in, py1BL,btim1,
					xoffset+ax/2-gs_trim_width_in, py1BR,bitset(btim1, sideBit,0),
					xoffset+ax/2+gs_tw_right_in-gs_trim_width_in, py2BR,15
			endif
		endif

		del 5


		! Casing in Wallhole

		!cutplanes at frame

		if WIDO_REVEAL_SIDE>0 then
			cutplane 1,1,0,0
		else
			addz WIDO_FRAME_THICKNESS
			cutplane 1,1,0,1
			del 1
		endif

		off1=0
		off2=-WALL_THICKNESS
		off3=0
		off4=-WALL_THICKNESS
		gosub "Curved Wall Calculation"

		addz k_weitoffset
		mulz mulstat
		addz -rfur
		roty -AC_Hole_Position_Angle
		addz rfur

		resol 2*WALL_RESOL

		if iWindowShape = SHAPE_PARALLELOGRAM then
			py1BL =	ArchHeight + dytth1_in
			py2BL = py1BL - dytth1_in

			py1BR =	dytth2_in
			py2BR = py1BR - dytth2_in
		else
			py1BL = gs_trim_width_in*not(bDrawBoard)
			py2BL = py1BL-gs_trim_width_in*not(bDrawBoard)

			py1BR =	py1BL
			py2BR = py2BL
		endif

		if gs_trim_width_in > 0 then
			bprism_  gs_trim_in_mat,gs_trim_in_mat,gs_trim_in_mat,10,WALL_THICKNESS,rfur,
				xoffset-ax/2, py2BL, 15,
				xoffset+ax/2, py2BR, 15,
				xoffset+ax/2, b-ArchHeight, 15,
				xoffset-ax/2, b, 15,
				xoffset-ax/2, py2BL, -1,

				xoffset-ax/2+gs_trim_width_in, py1BL, btim2,
				xoffset+ax/2-gs_trim_width_in, py1BR, btim2,
				xoffset+ax/2-gs_trim_width_in, b-ArchHeight-dytth1_in, btim2,
				xoffset-ax/2+gs_trim_width_in, b-dytth2_in, btim2,
				xoffset-ax/2+gs_trim_width_in, py1BL, -1
		endif

		del 5

		cutend

		if bDrawBoard then cutend

	endif


	if bDrawOutsideTrim then
		sect_fill gs_trim_fill_out, gs_trim_pen_bg_out, gs_trim_pen_fg_out, gs_trim_pen_cont
		material gs_trim_out_mat


		!!! Cutting with sill---------
		if not(bCasingBottomOutside) then
			if bDrawSill then
				add 0, sillBottom + sillSideHeight, 0
				rotx 90 - sillSideAngle

				material gs_trim_out_mat
				cutplane !1, 1, 0, 1

				del 2
			else
				rotx 90
				material gs_trim_out_mat
				cutplane
				del 1
			endif
		endif


		! Casing on Wall

		off1=WALL_THICKNESS
		off2=-WALL_THICKNESS-gs_trim_thk_out
		off3=-gs_trim_thk_out
		off4=0
		gosub "Curved Wall Calculation"

		addz k_weitoffset
		mulz mulstat
		addz -rfur
		roty -AC_Hole_Position_Angle
		addz rfur

		resol 2*WALL_RESOL

		if iWindowShape = SHAPE_PARALLELOGRAM then
			py1BL =	ArchHeight + dytth1_out
			py2BL = py1BL - dytw1

			py1BR =	dytth2_out
			py2BR = py1BR - dytw2
		else
			if bDrawSill & not(bCasingBottomOutside) then
				py1BL = sillBottomOutside
				py2BL = py1BL
			else
				if bCasingBottomOutside then
					py1BL = (gs_trim_width_out - gs_trim_offs_out + widoThresDepth) * not(bDrawSill) + sillBottomOutside * bDrawSill
				else
					py1BL = (gs_trim_width_out - gs_trim_offs_out + widoThresDepth - (gs_trim_width_out+0.01))
				endif
				py2BL = py1BL - gs_tw_bottom_out
			endif

			py1BR =	py1BL
			py2BR = py2BL
		endif

		if gs_trim_thk_out > 0 then
			if bDrawSill & not(bCasingBottomOutside) then
				bprism_ gs_trim_out_mat,gs_trim_out_mat,gs_trim_out_mat,8,gs_trim_thk_out,rfur,
					xoffset+ax/2+gs_tw_right_out-gs_trim_width_out, py2BR,15,
					xoffset+ax/2+gs_tw_right_out-gs_trim_width_out, b-ArchHeight-dytth1_out+dytw1,15,
					xoffset-ax/2-gs_tw_right_out+gs_trim_width_out, b-dytth2_out+dytw2,15,
					xoffset-ax/2-gs_tw_right_out+gs_trim_width_out, py2BL,15,

					xoffset-ax/2+gs_trim_width_out, py1BL,btim3,
					xoffset-ax/2+gs_trim_width_out, b-dytth2_out,btim3,
					xoffset+ax/2-gs_trim_width_out, b-ArchHeight-dytth1_out,btim3,
					xoffset+ax/2-gs_trim_width_out, py1BR,btim3

			else
				bprism_ gs_trim_out_mat,gs_trim_out_mat,gs_trim_out_mat,10,gs_trim_thk_out,rfur,
					xoffset-ax/2-gs_tw_right_out+gs_trim_width_out, py2BL,15,
					xoffset+ax/2+gs_tw_right_out-gs_trim_width_out, py2BR,15,
					xoffset+ax/2+gs_tw_right_out-gs_trim_width_out, b-ArchHeight-dytth1_out+dytw1,15,
					xoffset-ax/2-gs_tw_right_out+gs_trim_width_out, b-dytth2_out+dytw2,15,
					xoffset-ax/2-gs_tw_right_out+gs_trim_width_out, py2BL,-1,

					xoffset-ax/2+gs_trim_width_out, py1BL,btim3,
					xoffset+ax/2-gs_trim_width_out, py1BR,btim3,
					xoffset+ax/2-gs_trim_width_out, b-ArchHeight-dytth1_out,btim3,
					xoffset-ax/2+gs_trim_width_out, b-dytth2_out,btim3,
					xoffset-ax/2+gs_trim_width_out, py1BL,-1
			endif
		endif

		del 5

		! Casing in Wallhole

		!cutplanes at frame

		if WIDO_REVEAL_SIDE>0 then
			addz WIDO_FRAME_THICKNESS
				cutplane 1,1,0,1
			del 1
		else
			CUTPLANE 1,1,0,0
		endif

		off1=0
		off2=-WALL_THICKNESS
		off3=0
		off4=-WALL_THICKNESS
		gosub "Curved Wall Calculation"


		addz k_weitoffset
		mulz mulstat
		addz -rfur
		roty -AC_Hole_Position_Angle
		addz rfur

		resol 2*WALL_RESOL


		if iWindowShape = SHAPE_PARALLELOGRAM then
			py1BL =	ArchHeight + dytth1_out
			py2BL = py1BL - dytth1_out

			py1BR =	dytth2_out
			py2BR = py1BR - dytth2_out
		else
			py1BL =	(gs_trim_width_out+widoThresDepth) * not(bDrawSill) \
					+ sillBottomOutside * bDrawSill \
					- (gs_trim_width_out+0.01)*(not(bDrawSill) & not(bCasingBottomOutside))
			py2BL = py1BL-gs_trim_width_out*not(bDrawSill)

			py1BR =	py1BL
			py2BR = py2BL
		endif

		if gs_trim_width_out > 0 then
			if bDrawSill then
				bprism_  gs_trim_out_mat,gs_trim_out_mat,gs_trim_out_mat,8,WALL_THICKNESS,rfur,
					xoffset+ax/2, py2BR,15,
					xoffset+ax/2, b-ArchHeight,15,
					xoffset-ax/2, b,15,
					xoffset-ax/2, py2BL,15,

					xoffset-ax/2+gs_trim_width_out, py1BR, btim4,
					xoffset-ax/2+gs_trim_width_out,  b-dytth2_out, btim4,
					xoffset+ax/2-gs_trim_width_out, b-ArchHeight-dytth1_out, btim4,
					xoffset+ax/2-gs_trim_width_out, py1BL, btim4

			else
				bprism_  gs_trim_out_mat,gs_trim_out_mat,gs_trim_out_mat,10,WALL_THICKNESS,rfur,
					xoffset-ax/2, py2BL,15,
					xoffset+ax/2, py2BR,15,
					xoffset+ax/2, b-ArchHeight,15,
					xoffset-ax/2, b,15,
					xoffset-ax/2, py2BL,-1,

					xoffset-ax/2+gs_trim_width_out, py1BL, btim4,
					xoffset+ax/2-gs_trim_width_out, py1BR, btim4,
					xoffset+ax/2-gs_trim_width_out, b-ArchHeight-dytth1_out, btim4,
					xoffset-ax/2+gs_trim_width_out, b-dytth2_out, btim4,
					xoffset-ax/2+gs_trim_width_out, py1BL,-1
			endif
		endif

		del 5

		cutend

		if not(bCasingBottomOutside) then cutend

	endif

endif


END

!! 3D-SUBROUTINES !!

"Curved Wall Calculation":

	A = refWidth

	r0=abs(WIDO_ORIG_DIST)

	if WIDO_ORIG_DIST<0 then                !Wall is convex from "outside"

		if WIDO_REVEAL_SIDE>0 then                            !Flip is on

			nframe=WIDO_FRAME_THICKNESS
			wsill=WIDO_SILL
			wthickness=WALL_THICKNESS

			mulstat=1
			rdpi=sqr(a*a/4+(r0+nframe)^2)
			r=sqr(a*a/4+r0*r0)
			kdpi=rdpi-r+WIDO_SILL
			rclo=r+kdpi                         !wall radius_2
			rfur=rclo-wthickness+off1           !wall radius_1
			calpha=asn(a/2/r)                   !window half angle

		else                                     !Flip is off

			nframe=0
			wsill=-WIDO_SILL
			wthickness=-WALL_THICKNESS

			mulstat=1
			r=sqr(a*a/4+r0*r0)
			rclo=r+wsill                         !wall radius_2
			rfur=rclo-wthickness+off2            !wall radius_1
			calpha=asn(a/2/r)                    !window half angle

		endif

	else                                      !Wall is concave from "outside"

		if WIDO_REVEAL_SIDE>0 then                              !Flip is on

			nframe=WIDO_FRAME_THICKNESS
			wsill=WIDO_SILL
			wthickness=WALL_THICKNESS

			mulstat=-1
			r0=r0-nframe
			r=sqr(a*a/4+r0*r0)
			rfur=r-wsill+off3                    !wall radius_1
			rclo=rfur+wthickness                 !wall radius_2
			calpha=asn(a/2/r)                    !window half angle

		else                                      !Flip is off

			nframe=WIDO_FRAME_THICKNESS
			wsill=-WIDO_SILL
			wthickness=-WALL_THICKNESS

			mulstat=-1
			rdpi=sqr(a*a/4+r0*r0)
			r0=r0-nframe
			r=sqr(a*a/4+r0*r0)
			kdpi=rdpi-r+WIDO_SILL
			rfur=r+kdpi+off4                     !wall radius_1
			rclo=rfur+wthickness                 !wall radius_2
			calpha=asn(a/2/r)                    !window half angle

		endif

	endif


	!Additional values

	k_weitoffset=rfur*mulstat+WIDO_ORIG_DIST	!gs_window_sill value at window centerpoint
	walpha=2*atn(a/2/r0)						!Window Opening angle
	xoffset=AC_Hole_Position_Angle/180*pi*rfur						!Window centerpoint distance from wall origin
	ax=walpha/180*pi*rfur						!"a" curve length (at further radius)


	!Oversize calculation (independent from "rfur")
	calphar=90+calpha

	!right oversize and gs_window_sill angle
	rosr=sqr(r^2+osr^2-2*r*osr*cos(calphar))
	cbetarr=asn(osr*sin(calphar)/rosr)          !Right oversize angle

	!left oversize and gs_window_sill angle
	rosl=sqr(r^2+osl^2-2*r*osl*cos(calphar))
	cbetarl=asn(osl*sin(calphar)/rosl)          !Left oversize angle

	A = leftWidth+rightWidth

RETURN


"Outside Casing":

	sect_fill gs_trim_fill_out, gs_trim_pen_bg_out, gs_trim_pen_fg_out, gs_trim_pen_cont
	material gs_trim_out_mat

	numCutsCornerColumn = 0
	if gs_corner_column & abs(WALL_INCL) < eps then
		matTrim = gs_trim_out_mat
		gosub 300
	endif

	!!! Cutting with sill---------
	if not(bCasingBottomOutside) then
		if bDrawSill then
			add 0, sillBottom + sillSideHeight, WIDO_SILL
			rotx 90 - sillSideAngle

			material gs_trim_out_mat
			cutplane !1, 1, 0, 1

			del 2
		else
			rotx 90
			material gs_trim_out_mat
			cutplane
			del 1
		endif
	endif


	! Casing in Wallhole
	if gs_trim_width_out > 0 then
		px1L = -leftWidth+gs_trim_width_out+widoLeftJamb-overSizeLeftX
		px2L = px1L - gs_trim_width_out
		px1R = rightWidth-gs_trim_width_out-widoRightJamb+overSizeRightX
		px2R = px1R + gs_trim_width_out

		if iWindowShape = SHAPE_PARALLELOGRAM then
			py1BL =	ArchHeight + dytth1_out + dyrev1 - overSizeLeftY
			py2BL = py1BL - dytth1_out

			py1BR =	dytth2_out + dyrev2 - overSizeRightY
			py2BR = py1BR - dytth2_out
		else
			py1BL =	(gs_trim_width_out+widoThresDepth) * not(bDrawSill) \
					+ sillBottomOutside * bDrawSill \
					- (gs_trim_width_out+0.01)*(not(bDrawSill) & not(bCasingBottomOutside))
			py2BL = py1BL-gs_trim_width_out*not(bDrawSill)

			py1BR =	py1BL
			py2BR = py2BL
		endif

		py1TL = b-dytth2_out-dyrev2+overSizeLeftY
		py2TL = py1TL + dytth2_out
		py1TR = b-ArchHeight-dytth1_out-dyrev1-overSizeRightY
		py2TR = py1TR + dytth1_out

		prism_ 9, WIDO_SILL,
			px2L, py2BL, 15,
			px1L, py1BL, jambExtOutMask,
			px1L, py1TL, jambExtOutMask,
			px1R, py1TR, jambExtOutMask,
			px1R, py1BR, jambExtOutMask,
			px2R, py2BR, 15,
			px2R, py2TR, 15,
			px2L, py2TL, 15,
			px2L, py2BL, -1

		if not(bDrawSill) then
			base
			prism_ 5, WIDO_SILL,
				px1L, py1BL, jambExtOutMask,
				px1R, py1BR, jambExtOutMask,
				px2R, py2BR, 15,
				px2L, py2BL, jambExtOutMask,
				px1L, py1BL, -1
			vert 0, 0, 0
			vert 1, 0, 0
			vert 0, 1, 0
			vert 0, 0, 1
			coor 2, -1, -2, -3, -4
			body 1
		endif
	endif

	! Casing on Wall
	if gs_trim_thk_out > 0 then
		px1L = -leftWidth+gs_trim_width_out-gs_trim_offs_out+widoLeftJamb-overSizeLeftX
		px2L = px1L - gs_tw_right_out
		px1R = rightWidth-gs_trim_width_out+gs_trim_offs_out-widoRightJamb+overSizeRightX
		px2R = px1R + gs_tw_right_out

		py1TL = b-dytos2-dyrev2+overSizeLeftY
		py2TL = py1TL + dytw2
		py1TR = b-ArchHeight-dytos1-dyrev1-overSizeRightY
		py2TR = py1TR + dytw1

		if iWindowShape = SHAPE_PARALLELOGRAM then
			py1BL =	ArchHeight + dytos1 + dyrev1 + overSizeLeftY
			py2BL = py1BL - dytw1

			py1BR =	dytos2 + dyrev2 - overSizeRightY
			py2BR = py1BR - dytw2
		else
			if bDrawSill & not(bCasingBottomOutside) then
				! Only for Trapezoid 
				py1BL = sillBottomOutside
				py2BL = py1BL

				py1BR =	py1BL
				py2BR = py2BL

				casOutMask_start = 15
			else
				if bCasingBottomOutside then
					py1BL = (gs_trim_width_out - gs_trim_offs_out + widoThresDepth) * not(bDrawSill) + sillBottomOutside * bDrawSill
				else
					py1BL = (gs_trim_width_out - gs_trim_offs_out + widoThresDepth - (gs_trim_width_out+0.01))
				endif
				py2BL = py1BL - gs_tw_bottom_out

				py1BR =	py1BL
				py2BR = py2BL

				casOutMask_start = 10
			endif
		endif

		addz -gs_trim_thk_out
		if not(bLeftCornerFunction) then
			base
			PRISM_ 4,gs_trim_thk_out,
				px1L, py1BL, casOutMask_start,
				px2L, py2BL, 15,
				px2L, py2TL, 10,
				px1L, py1TL, casOutMask

			vert 0, 0, 0
			vert 0, 1, 0
			vert 1, 0, 0
			vert 0, 0, 1
			coor 2, -1, -2, -3, -4
			body 1
		endif

		if not(bRightCornerFunction) then
			base
			PRISM_ 4,gs_trim_thk_out,
				px1R, py1BR, casOutMask_start,
				px2R, py2BR, 15,
				px2R, py2TR, 10,
				px1R, py1TR, casOutMask

			vert 0, 0, 0
			vert 0, 1, 0
			vert 1, 0, 0
			vert 0, 0, 1
			coor 2, -1, -2, -3, -4
			body 1
		endif

		base
		PRISM_ 4,gs_trim_thk_out,
			px2L, py2TL, 10,
			px1L, py1TL, casOutMask,
			px1R, py1TR, 10,
			px2R, py2TR, 15
		vert 0, 0, 0
		vert cos(palpha), -sin(palpha), 0
		vert sin(palpha), cos(palpha), 0
		vert 0, 0, 1
		coor 2, -1, -2, -3, -4
		body 1

		if not(bDrawSill * not(bCasingBottomOutside)) then
			base
			PRISM_ 4,gs_trim_thk_out,
				px2R, py2BR, 10,
				px1R, py1BR, casOutMask,
				px1L, py1BL, 10,
				px2L, py2BL, 15

			if iWindowShape = SHAPE_PARALLELOGRAM then
				vert 0, 0, 0
				vert cos(palpha), -sin(palpha), 0
				vert sin(palpha), cos(palpha), 0
				vert 0, 0, 1
			else
				vert 0, 0, 0
				vert 1, 0, 0
				vert 0, 1, 0
				vert 0, 0, 1
			endif
			coor 2, -1, -2, -3, -4
			body 1
		endif
		del 1
	endif

	if not(bCasingBottomOutside) then cutend

	if abs(WALL_INCL) < eps then
		for i=1 to numCutsCornerColumn
			cutend
		next i
	endif

return


300:
	! ==============================================================================
	!	Cutting Corner Column
	! ==============================================================================

	if WIDO_REVEAL_SIDE then
		addz -WIDO_FRAME_THICKNESS
	else
		mulz -1
	endif

	rotx -90


	! Draw Right Column ------------------------------------------------------------

	if bRightCornerFunction then
		add rightCwDx + rightWidth + WIDO_FRAME_THICKNESS * rx, WIDO_SILL, 0

		if bMirrorRight then muly -1

		px1		= px1R
		px2		= px2R
		px3		= px3R
		pxFrame	= pxFrameR

		cutpolya 4, 1, 0,
			px1,			-gs_cc_pr,				15,
			px2 - pxFrame,	-gs_cc_pr,				15,
			px2 - pxFrame,	-gs_cc_pr + gs_cc_thk,	15,
			px3,			-gs_cc_pr + gs_cc_thk,	15

		numCutsCornerColumn = numCutsCornerColumn + 1

		del bMirrorRight + 1
	endif


	! Draw Left Column -------------------------------------------------------------

	if bLeftCornerFunction then
		add -leftCwDx - leftWidth - WIDO_FRAME_THICKNESS * lx, WIDO_SILL, 0

		if bMirrorLeft then muly -1
		add offsLeftX, offsLeftY, 0
		mulx -1

		px1		= px1L
		px2		= px2L
		px3		= px3L
		pxFrame	= pxFrameL

		cutpolya 4, 1, 0,
			px1,			-gs_cc_pr,				15,
			px2 - pxFrame,	-gs_cc_pr,				15,
			px2 - pxFrame,	-gs_cc_pr + gs_cc_thk,	15,
			px3,			-gs_cc_pr + gs_cc_thk,	15

		numCutsCornerColumn = numCutsCornerColumn + 1

		del bMirrorLeft + 3
	endif

	del 2

return
]]>
</Script_3D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_1D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
! CasingTrapezoid

EPS = 0.00001

! iWindowShape:
SHAPE_RECTANGULAR			= 0
SHAPE_ARCHED				= 1
SHAPE_ROUND					= 2
SHAPE_EYEBROWS				= 3
SHAPE_HALFCIRCLE			= 4 	! straight side is horizontal
SHAPE_MULTISIDE				= 5
SHAPE_OCTAGONAL				= 6
SHAPE_HALFARCH				= 7
SHAPE_PENTAGON				= 8
SHAPE_QUARTERROUND			= 9
SHAPE_HALFROUND				= 10 	! straight side is vertical
SHAPE_TRAPEZOID				= 11
SHAPE_TRIANGLE				= 12
SHAPE_GOTHICARCH			= 13
SHAPE_ELLIPSEARCH			= 14
SHAPE_ROMBUS				= 15
SHAPE_HORSESHOE				= 16
SHAPE_OGEECENTERED			= 17
SHAPE_SARACENIC				= 18
SHAPE_T						= 19
SHAPE_HALF_T_LEFT			= 20
SHAPE_ARCHED_T				= 21
SHAPE_ARCHED_HALF_T_LEFT	= 22
SHAPE_PARALLELOGRAM			= 23
SHAPE_ELLIPSE				= 24
SHAPE_CORNER_TRIANGLE		= 25
SHAPE_QUARTERROUND_NOFRAME	= 26
SHAPE_HALF_T_RIGHT			= 27
SHAPE_ARCHED_HALF_T_RIGHT	= 28

! iRevealType:
REVEAL_EDGE				= 0
REVEAL_NO				= 1
REVEAL_POSITIVE			= 2
REVEAL_NEGATIVE			= 3
REVEAL_SLANTED			= 4
REVEAL_SPLAYED			= 5
REVEAL_HISTORIC			= 6
REVEAL_DOUBLE			= 7
REVEAL_DOUBLE_SPLAYED	= 8
REVEAL_OUTSIDE_SPLAYED	= 9


widoLeftJamb	= gs_reveal_left
widoRightJamb	= gs_reveal_right
widoHeadDepth	= gs_reveal_top
widoThresDepth	= gs_reveal_bottom


!!Angle and coordinate calculation!!

palpha=atn(ArchHeight / (leftWidth + rightWidth))
pbeta1=(90+palpha)/2
pbeta2=(90-palpha)/2

dyfw1=(gs_frame_width)/tan(pbeta1)     !dy at frame width
dyfw2=(gs_frame_width)/tan(pbeta2)

dyrw1=(gs_frame_width)/tan(pbeta1)     !dy at rebate width
dyrw2=(gs_frame_width)/tan(pbeta2)

dytth1_out=(gs_trim_width_out)/tan(pbeta1)   		 !dy at outside trim thickness
dytth2_out=(gs_trim_width_out)/tan(pbeta2)

dytos1=(gs_trim_width_out-gs_trim_offs_out)/tan(pbeta1)   		 !dy at trim thickness
dytos2=(gs_trim_width_out-gs_trim_offs_out)/tan(pbeta2)

dytw1=(gs_tw_right_out)/tan(pbeta1)     !dy at outside trim width
dytw2=(gs_tw_right_out)/tan(pbeta2)

dytth1_in=(gs_trim_width_in)/tan(pbeta1)   		 !dy at inside trim thickness
dytth2_in=(gs_trim_width_in)/tan(pbeta2)

dytis1=(gs_trim_width_in-gs_trim_offs_in)/tan(pbeta1)   		 !dy at trim thickness
dytis2=(gs_trim_width_in-gs_trim_offs_in)/tan(pbeta2)

idytw1=(gs_tw_right_in)/tan(pbeta1)     !dy at inside trim width
idytw2=(gs_tw_right_in)/tan(pbeta2)

if iRevealType = REVEAL_POSITIVE | iRevealType = REVEAL_NEGATIVE then
	revLTfi = atn(sin(90-palpha)/(widoHeadDepth/widoLeftJamb+cos(90-palpha)))
	revTLfi = 90-palpha-revLTfi
	revRTfi = atn(sin(90+palpha)/(widoHeadDepth/widoRightJamb+cos(90+palpha)))
	revTRfi = 90-palpha-revRTfi

	dyrev2 = widoLeftJamb / tan(revLTfi)
	dyrev1 = widoRightJamb / tan(revRTfi)
else
	revLTfi = 0
	revTLfi = 0
	revRTfi = 0
	revTRfi = 0

	dyrev2 = 0
	dyrev1 = 0
endif

! ==============================================================================
! Calculations for Corner Window
! ==============================================================================

if GLOB_MODPAR_NAME = "rightCornerAngle" then
	if ABS(rightCornerAngle) < EPS OR ABS(180-rightCornerAngle) < EPS OR ABS(360-rightCornerAngle) < EPS then
		bRightCornerFunction = 0
	else
		bRightCornerFunction = 1
	endif
	parameters bRightCornerFunction = bRightCornerFunction
endif

if bRightCornerFunction & abs(rightCornerAngle) > EPS then
	rx = 1 / tan(rightCornerAngle / 2)

	if rightCornerAngle > 180 then
		rightCwDx = WIDO_FRAME_THICKNESS / tan(-rightCornerAngle / 2)
	else
		rightCwDx = 0
	endif

	rightCwDx2 = 0
	if abs(WALL_THICKNESS - rightConnWallThk) > EPS then
		rightCwDx2 = (WALL_THICKNESS - rightConnWallThk) / cos(rightCornerAngle - 90)
	endif
	bFitMode = (rightConnWallThk > WALL_THICKNESS + EPS)

	gs_right_oversize = 0

	beta = atn ((rightConnWallThk * sin(rightCornerAngle)) / (WALL_THICKNESS + rightConnWallThk * cos(rightCornerAngle)))
	rx = 1 / tan(rightCornerAngle / 2)

	if rightCornerAngle > 180 then
		overSizeRightX = max (0, WALL_THICKNESS / tan(360 - rightCornerAngle + beta) + WIDO_SILL / tan(rightCornerAngle / 2)) + 2 * gs_tw_right_out
	else
		overSizeRightX = (WIDO_FRAME_THICKNESS + WIDO_SILL) * rx + max (0, WALL_THICKNESS * tan(rightCornerAngle - beta - 90)) + 2 * gs_tw_right_out
	endif
	overSizeRightY = overSizeRightX * (ArchHeight / (leftWidth + rightWidth))

	cornerPostXbyWidth	= (-WIDO_FRAME_THICKNESS - gs_cc_pr) * abs(tan(90 - rightCornerAngle / 2)) + gs_cc_width
	cornerPostXbyThk	= (gs_cc_thk - WIDO_FRAME_THICKNESS - gs_cc_pr) * abs(tan(90 - rightCornerAngle / 2))
	pxFrameR = max(cornerPostXbyWidth, cornerPostXbyThk)

	tanAngle = tan(rightCornerAngle / 2)
	if (rightCornerAngle > 180) then
		px1R = -gs_cc_pr / tanAngle
		px2R =  WIDO_FRAME_THICKNESS / tanAngle
		px3R =  -(gs_cc_pr - gs_cc_thk) / tanAngle
	else
		px1R =  gs_cc_pr / tanAngle
		px2R = -WIDO_FRAME_THICKNESS / tanAngle
		px3R =  (gs_cc_pr - gs_cc_thk) / tanAngle
	endif
else
	overSizeRightX = 0
	overSizeRightY = 0
endif

if bLeftCornerFunction & abs(leftCornerAngle) > EPS then
	lx = 1 / tan(leftCornerAngle / 2)

	if leftCornerAngle > 180 then
		leftCwDx = WIDO_FRAME_THICKNESS / tan(-leftCornerAngle / 2)
	else
		leftCwDx = 0
	endif

	leftCwDx2 = 0
	if abs(WALL_THICKNESS - leftConnWallThk) > EPS then
		leftCwDx2 = (WALL_THICKNESS - leftConnWallThk) / cos(leftCornerAngle - 90)
	endif
	bFitMode = (leftConnWallThk > WALL_THICKNESS + EPS)

	gs_left_oversize = 0

	beta = atn ((leftConnWallThk * sin(leftCornerAngle)) / (WALL_THICKNESS + leftConnWallThk * cos(leftCornerAngle)))
	lx = 1 / tan(leftCornerAngle / 2)

	if leftCornerAngle > 180 then
		overSizeLeftX = max (0, WALL_THICKNESS / tan(360 - leftCornerAngle + beta) + WIDO_SILL / tan(leftCornerAngle / 2)) + 2 * gs_tw_right_out
	else
		overSizeLeftX = (WIDO_FRAME_THICKNESS + WIDO_SILL) * lx + max (0, WALL_THICKNESS * tan(leftCornerAngle - beta - 90)) + 2 * gs_tw_right_out
	endif
	overSizeLeftY = overSizeLeftX * (ArchHeight / (leftWidth + rightWidth))

	cornerPostXbyWidth	= (-WIDO_FRAME_THICKNESS - gs_cc_pr) * abs(tan(90 - leftCornerAngle / 2)) + gs_cc_width
	cornerPostXbyThk	= (gs_cc_thk - WIDO_FRAME_THICKNESS - gs_cc_pr) * abs(tan(90 - leftCornerAngle / 2))
	pxFrameL = max(cornerPostXbyWidth, cornerPostXbyThk)

	tanAngle = tan(leftCornerAngle / 2)
	if (leftCornerAngle > 180) then
		px1L = -gs_cc_pr / tanAngle
		px2L =  WIDO_FRAME_THICKNESS / tanAngle
		px3L =  -(gs_cc_pr - gs_cc_thk) / tanAngle
	else
		px1L =  gs_cc_pr / tanAngle
		px2L = -WIDO_FRAME_THICKNESS / tanAngle
		px3L =  (gs_cc_pr - gs_cc_thk) / tanAngle
	endif
else
	overSizeLeftX = 0
	overSizeLeftY = 0
endif

if gs_corner_column then
	bMirrorRight	= (rightCornerAngle > 180)
	bMirrorLeft		= (leftCornerAngle > 180)
	offsLeftY		= ((leftCornerAngle > 180) exor (rightCornerAngle > 180)) * (2 * gs_cc_pr - gs_cc_thk)
	if abs(leftCornerAngle) > EPS then
		offsLeftX	= -abs(offsLeftY / tan(leftCornerAngle / 2))
	endif
endif


! ==============================================================================
! Mask Values
! ==============================================================================

!Straight or Inclined Wall

!if abs(WIDO_SILL-(WALL_THICKNESS-WIDO_FRAME_THICKNESS))<EPS then tim=1
!if abs(WIDO_SILL)<EPS then     tom=4

if abs(gs_trim_offs_in) > EPS then
	casInMask = 15
	jambExtInMask = 15
	cutInMask = 7
else
	casInMask = 14
	jambExtInMask = 11
	cutInMask = 7
endif

if abs(gs_trim_offs_out) > EPS then
	casOutMask = 15
	jambExtOutMask = 15
else
	casOutMask = 11
	jambExtOutMask = 14
endif

!Curved Wall

if WIDO_ORIG_DIST<0  then
	btim1=14
	btim2=11
	btim3=11
	btim4=14
	if WIDO_REVEAL_SIDE>0 then
		btim1=11
		btim2=14
		btim3=14
		btim4=11
	endif
endif

if WIDO_ORIG_DIST>0  then
	btim1=11
	btim2=14
	btim3=14
	btim4=11
	if WIDO_REVEAL_SIDE>0 then
		btim1=14
		btim2=11
		btim3=11
		btim4=14
	endif
endif





]]>
</Script_1D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_VL SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_VL>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Comment SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Comment>

<ParamSection SectVersion="26" SectionFlags="0" SubIdent="0">
	<ParamSectHeader>
		<Version>26</Version>
		<AutoHotspots>false</AutoHotspots>
		<WDLeftFrame>0</WDLeftFrame>
		<WDRightFrame>0</WDRightFrame>
		<WDTopFrame>0</WDTopFrame>
		<WDBotFrame>0</WDBotFrame>
		<LayFlags>65535</LayFlags>
		<WDMirrorThickness>0</WDMirrorThickness>
		<WDWallInset>0</WDWallInset>
		<SymbolColor>0</SymbolColor>
	</ParamSectHeader>
	<Parameters>
		<Length Name="A">
			<Description><![CDATA["Dimension 1"]]></Description>
			<Fix/>
			<Value>1</Value>
		</Length>
		<Length Name="B">
			<Description><![CDATA["Dimension 2"]]></Description>
			<Fix/>
			<Value>2</Value>
		</Length>
		<Length Name="ZZYZX">
			<Description><![CDATA["Height"]]></Description>
			<Fix/>
			<Value>1</Value>
		</Length>
		<Boolean Name="AC_show2DHotspotsIn3D">
			<Description><![CDATA["Show 2D Hotspots in 3D"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Length Name="ac_bottomlevel">
			<Description><![CDATA["Bottom Level"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Length>
		<Length Name="ac_toplevel">
			<Description><![CDATA["Top Level"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Angle Name="AC_Hole_Position_Angle">
			<Description><![CDATA["Hole Position Angle"]]></Description>
			<Value>0</Value>
		</Angle>
		<Integer Name="iWindowShape">
			<Description><![CDATA[""]]></Description>
			<Value>0</Value>
		</Integer>

		<!-- gs_wallhole_geometry: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_wallhole_geometry">
			<Description><![CDATA["Wallhole Geometry"]]></Description>
		</Title>
		<Length Name="refWidth">
			<Description><![CDATA["Reference Width"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="leftWidth">
			<Description><![CDATA["Left Offset from the Origo"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.5</Value>
		</Length>
		<Length Name="rightWidth">
			<Description><![CDATA["Right Offset from the Origo"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.5</Value>
		</Length>
		<Length Name="archHeight">
			<Description><![CDATA["Height of the Arc"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.25</Value>
		</Length>

		<!-- iRevealType: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Integer Name="iRevealType">
			<Description><![CDATA["Reveal Type"]]></Description>
			<Flags>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Length Name="gs_reveal_left">
			<Description><![CDATA["Jamb Depth Side 2"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.06</Value>
		</Length>
		<Length Name="gs_reveal_right">
			<Description><![CDATA["Jamb Depth"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.06</Value>
		</Length>
		<Length Name="gs_reveal_top">
			<Description><![CDATA["Head Jamb Depth"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.06</Value>
		</Length>
		<Length Name="gs_reveal_bottom">
			<Description><![CDATA["Sill Jamb Depth"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.06</Value>
		</Length>

		<!-- gs_corner_functions: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_corner_functions">
			<Description><![CDATA["Corner Functions"]]></Description>
		</Title>
		<Boolean Name="bLeftCornerFunction">
			<Description><![CDATA["Left Corner"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Angle Name="leftCornerAngle">
			<Description><![CDATA["Left Corner Angle"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Angle>
		<Length Name="leftConnWallThk">
			<Description><![CDATA["Left Connected Wall Thickness"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Boolean Name="bRightCornerFunction">
			<Description><![CDATA["Right Corner"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Angle Name="rightCornerAngle">
			<Description><![CDATA["Right Corner Angle"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>90</Value>
		</Angle>
		<Length Name="rightConnWallThk">
			<Description><![CDATA["Right Connected Wall Thickness"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>

		<!-- bDrawOutsideTrim: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Boolean Name="bDrawOutsideTrim">
			<Description><![CDATA["Draw Outside Casing 2D and 3D"]]></Description>
			<Flags>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="bCasingBottomOutside">
			<Description><![CDATA["Outside Bottom Casing"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="gs_trim_outside_uniform">
			<Description><![CDATA["Uniform Casing Widths"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Length Name="gs_tw_right_out">
			<Description><![CDATA["Width Side 1"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Length Name="gs_tw_bottom_out">
			<Description><![CDATA["Width Bottom"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Length Name="gs_trim_thk_out">
			<Description><![CDATA["Thickness on Wall"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.019</Value>
		</Length>
		<Length Name="gs_trim_width_out">
			<Description><![CDATA["Thickness in Wallhole"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.025</Value>
		</Length>
		<Length Name="gs_trim_offs_out">
			<Description><![CDATA["Offset"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>

		<!-- bDrawInsideTrim: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Boolean Name="bDrawInsideTrim">
			<Description><![CDATA["Draw Inside Casing 2D and 3D"]]></Description>
			<Flags>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="gs_trim_inside_uniform">
			<Description><![CDATA["Uniform Casing Widths"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Length Name="gs_tw_right_in">
			<Description><![CDATA["Width Side 1"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Length Name="gs_tw_bottom_in">
			<Description><![CDATA["Width Bottom"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Length Name="gs_trim_thk_in">
			<Description><![CDATA["Thickness on Wall"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.019</Value>
		</Length>
		<Length Name="gs_trim_width_in">
			<Description><![CDATA["Thickness in Wallhole"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.025</Value>
		</Length>
		<Length Name="gs_trim_offs_in">
			<Description><![CDATA["Offset"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>

		<!-- bDrawSill: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Boolean Name="bDrawSill">
			<Description><![CDATA["Draw Sill"]]></Description>
			<Flags>
				<ParFlg_BoldName/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Integer Name="iSillType">
			<Description><![CDATA["Type of the Sill"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Length Name="sillBottom">
			<Description><![CDATA["Sill Bottom Distance"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="sillBottomOutside">
			<Description><![CDATA["Sill Bottom Outside"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Boolean Name="bSillPlaneCut">
			<Description><![CDATA["Use Cut Plane at Sill Side"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Length Name="SillSideHeight">
			<Description><![CDATA["Cut Plane Height"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Angle Name="sillSideAngle">
			<Description><![CDATA["Cut Plane Angle"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Angle>

		<!-- bDrawBoard: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Boolean Name="bDrawBoard">
			<Description><![CDATA["Draw Board"]]></Description>
			<Flags>
				<ParFlg_BoldName/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Length Name="boardBottom">
			<Description><![CDATA["Board Bottom Distance"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Boolean Name="bBoardPlaneCut">
			<Description><![CDATA["Use Cut Plane at Board Side"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Length Name="boardSideHeight">
			<Description><![CDATA["Cut Plane Height"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Angle Name="boardSideAngle">
			<Description><![CDATA["Cut Plane Angle"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Angle>

		<!-- gs_2D_representation: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_2D_representation">
			<Description><![CDATA["2D and Section Representation"]]></Description>
		</Title>
		<PenColor Name="gs_trim_pen_cont">
			<Description><![CDATA["Casing Cut Line Pen on Both Sides"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>3</Value>
		</PenColor>
		<FillPattern Name="gs_trim_fill_in">
			<Description><![CDATA["Casing Fill Type Inside"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>65</Value>
		</FillPattern>
		<PenColor Name="gs_trim_pen_fg_in">
			<Description><![CDATA["Casing Fill Pen Inside"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>19</Value>
		</PenColor>
		<PenColor Name="gs_trim_pen_bg_in">
			<Description><![CDATA["Casing Fill Background Pen Inside"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>19</Value>
		</PenColor>
		<FillPattern Name="gs_trim_fill_out">
			<Description><![CDATA["Casing Fill Type Outside"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>65</Value>
		</FillPattern>
		<PenColor Name="gs_trim_pen_fg_out">
			<Description><![CDATA["Casing Fill Pen Outside"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>19</Value>
		</PenColor>
		<PenColor Name="gs_trim_pen_bg_out">
			<Description><![CDATA["Casing Fill Background Pen Outside"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>19</Value>
		</PenColor>

		<!-- gs_3D_representation: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_3D_representation">
			<Description><![CDATA["3D Representation"]]></Description>
		</Title>
		<Integer Name="lod3D">
			<Description><![CDATA["3D detail"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>2</Value>
		</Integer>
		<PenColor Name="gs_frame_pen">
			<Description><![CDATA["Frame Pen"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</PenColor>

		<!-- gs_materials: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_materials">
			<Description><![CDATA["Surfaces"]]></Description>
		</Title>
		<Boolean Name="bLinkCasingSurfaces">
			<Description><![CDATA["Uniform Casing Surfaces"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Integer Name="stored_material">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<ArrayValues FirstDimension="4" SecondDimension="1">
				<AVal Column="1" Row="1">-9999</AVal>
				<AVal Column="1" Row="2">0</AVal>
				<AVal Column="1" Row="3">-9999</AVal>
				<AVal Column="1" Row="4">0</AVal>
			</ArrayValues>
		</Integer>
		<Material Name="gs_trim_in_mat">
			<Description><![CDATA["Casing Surface Outside"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>71</Value>
		</Material>
		<Material Name="gs_trim_out_mat">
			<Description><![CDATA["Casing Surface Inside"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>100</Value>
		</Material>

		<!-- gs_corner_column: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Boolean Name="gs_corner_column">
			<Description><![CDATA["Corner Column"]]></Description>
			<Flags>
				<ParFlg_BoldName/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Length Name="gs_cc_width">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.175</Value>
		</Length>
		<Length Name="gs_cc_thk">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.14</Value>
		</Length>
		<Length Name="gs_cc_pr">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Length Name="gs_frame_width">
			<Description><![CDATA["Frame Width"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Length Name="gs_board_thk">
			<Description><![CDATA["Stool Thickness"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
	</Parameters>
</ParamSection>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_2D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_2D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_PR SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_PR>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_UI SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_UI>

<CalledMacros SectVersion="2" SectionFlags="0" SubIdent="0">
</CalledMacros>

<Copyright SectVersion="1" SectionFlags="0" SubIdent="0">
	<Author>GRAPHISOFT</Author>
	<License>
		<Type>CC BY-ND</Type>
		<Version>3.0</Version>
	</License>
</Copyright>

</Symbol>
