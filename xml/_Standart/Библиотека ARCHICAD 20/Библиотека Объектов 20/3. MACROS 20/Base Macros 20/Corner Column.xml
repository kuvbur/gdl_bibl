<?xml version="1.0" encoding="UTF-8"?>
<Symbol IsArchivable="false" IsPlaceable="false" MainGUID="94D9D750-640C-427A-8FEC-B756B3C9A498" MigrationValue="Normal" Owner="0" Signature="1465080141" Version="43">
<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_2D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
! ==============================================================================
! This macro draws the corner columns
! ------------------------------------------------------------------------------
! Input parameters:
! ==============================================================================

if lod2D_CornerColumn = 0 then end

fill gs_fillFr
penCC_bg = gs_penFr_bg
penCC_fg = gs_penFr_fg

line_property 0	! LINE_PROPERTY_GENERIC


if WIDO_REVEAL_SIDE then
	add2 0,-WIDO_FRAME_THICKNESS
else
	mul2 1,-1
endif

signRevealSide = not(WIDO_REVEAL_SIDE) - WIDO_REVEAL_SIDE

! Draw Right Column ------------------------------------------------------------

if bRightCornerFunction & idxBoardEndRevealRight >= idxR then
	add2 rightRevealPnts[idxR][1] + signRevealSide * SymbolMid_shiftDy / tanAngle,
		 rightRevealPnts[idxR][2] - signRevealSide * SymbolMid_shiftDy
	if bMirrorRight then mul2 1,-1

	bMirror	= bMirrorRight
	px1		= px1R
	px2		= px2R
	px3		= px3R
	pxFrame	= pxFrameR
	unID	= 10300
	gosub 100

	del bMirrorRight + 1
endif


! Draw Left Column -------------------------------------------------------------

if bLeftCornerFunction & idxBoardEndRevealLeft >= idxL then
	add2 leftRevealPnts[idxL][1],leftRevealPnts[idxL][2]
	if bMirrorLeft then mul2 1,-1
	add2 offsLeftX,offsLeftY
	mul2 -1,1

	bMirror	= bMirrorLeft
	px1		= px1L
	px2		= px2L
	px3		= px3L
	pxFrame	= pxFrameL
	unID	= 10310
	gosub 100

	del bMirrorLeft + 3
endif

del 1

! ==============================================================================
end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end
! ==============================================================================


100:
	if lod2D_CornerColumn = 1 then
		if bMirror then
			line2 px2 - pxFrame,WIDO_FRAME_THICKNESS, px3,WIDO_FRAME_THICKNESS
		else
			line2 px2 - pxFrame,0, px1,0
		endif

		if abs(SymbolMid_shiftDy) < EPS then
			hotspot2 px1,			0, unID
			hotspot2 px2 - pxFrame,	0, unID + 1
			hotspot2 px2 - pxFrame,	0, unID + 2
			hotspot2 px1,			0, unID + 3
		endif
	endif

	if lod2D_CornerColumn = 2 then
		line2 px2 - pxFrame,0, px1,0
		line2 px2 - pxFrame,WIDO_FRAME_THICKNESS, px3,WIDO_FRAME_THICKNESS

		hotspot2 px1,			0,  		          unID
		hotspot2 px2 - pxFrame,	0,  		          unID + 1
		hotspot2 px2 - pxFrame,	WIDO_FRAME_THICKNESS, unID + 2
		hotspot2 px3,			WIDO_FRAME_THICKNESS, unID + 3
	endif

	if lod2D_CornerColumn = 3 then
		poly2_b 4, 1+2+4+16+32, penCC_fg, penCC_bg,
			px1,			-gs_cc_pr,				32 + 1,
			px2 - pxFrame,	-gs_cc_pr,				32 + 1,
			px2 - pxFrame,	-gs_cc_pr + gs_cc_thk,	32 + 1,
			px3,			-gs_cc_pr + gs_cc_thk,	32 + gs_cc_endline

		hotspot2 px1,			-gs_cc_pr,             unID
		hotspot2 px2 - pxFrame,	-gs_cc_pr,             unID + 1
		hotspot2 px2 - pxFrame,	-gs_cc_pr + gs_cc_thk, unID + 2
		hotspot2 px3,			-gs_cc_pr + gs_cc_thk, unID + 3
	endif
return




]]>
</Script_2D>

<ParamSection SectVersion="22" SectionFlags="0" SubIdent="0">
	<ParamSectHeader>
		<AutoHotspots>true</AutoHotspots>
		<HoleBits>
			<WDBit_3DFrame/>
		</HoleBits>
		<WDLeftFrame>0</WDLeftFrame>
		<WDRightFrame>0</WDRightFrame>
		<WDTopFrame>0</WDTopFrame>
		<WDBotFrame>0</WDBotFrame>
		<LayFlags>65535</LayFlags>
		<WDMirrorThickness>0</WDMirrorThickness>
		<WDWallInset>0</WDWallInset>
	</ParamSectHeader>
	<Parameters>
		<Length Name="A">
			<Description><![CDATA["Width"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Length>
		<Length Name="B">
			<Description><![CDATA["Height"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Length>
		<Length Name="ZZYZX">
			<Description><![CDATA[""]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Boolean Name="AC_show2DHotspotsIn3D">
			<Description><![CDATA["Show 2D Hotspots in 3D"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Length Name="ac_bottomlevel">
			<Description><![CDATA["Bottom Level"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Length>
		<Length Name="ac_toplevel">
			<Description><![CDATA["Top Level"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Integer Name="gs_macro_version">
			<Description><![CDATA["Macro Version"]]></Description>
			<Value>12</Value>
		</Integer>
		<Length Name="openingHeight">
			<Description><![CDATA["Opening Height"]]></Description>
			<Value>1.5</Value>
		</Length>
		<Length Name="openingArchHeight">
			<Description><![CDATA[""]]></Description>
			<Value>0</Value>
		</Length>
		<Length Name="leftWidth">
			<Description><![CDATA["Left Offset from the Origo"]]></Description>
			<Value>0</Value>
		</Length>
		<Length Name="rightWidth">
			<Description><![CDATA["Right Offset from the Origo"]]></Description>
			<Value>0</Value>
		</Length>
		<Length Name="SymbolMid_shiftDy">
			<Description><![CDATA[""]]></Description>
			<Value>0</Value>
		</Length>
		<Length Name="ac_wallhole_width">
			<Description><![CDATA["Wallhole Width"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Length>
		<Integer Name="iRevealType">
			<Description><![CDATA["Reveal Type"]]></Description>
			<Value>0</Value>
		</Integer>
		<Length Name="leftRevealPnts">
			<Description><![CDATA["Left Reveal Points"]]></Description>
			<ArrayValues FirstDimension="1" SecondDimension="2">
				<AVal Column="1" Row="1">0</AVal>
				<AVal Column="2" Row="1">0</AVal>
			</ArrayValues>
		</Length>
		<Length Name="rightRevealPnts">
			<Description><![CDATA["Right Reveal Points"]]></Description>
			<ArrayValues FirstDimension="1" SecondDimension="2">
				<AVal Column="1" Row="1">0</AVal>
				<AVal Column="2" Row="1">0</AVal>
			</ArrayValues>
		</Length>
		<Integer Name="iRevealPointsIdx">
			<Description><![CDATA[""]]></Description>
			<ArrayValues FirstDimension="20" SecondDimension="0">
				<AVal Row="1">1</AVal>
				<AVal Row="2">1</AVal>
				<AVal Row="3">1</AVal>
				<AVal Row="4">1</AVal>
				<AVal Row="5">1</AVal>
				<AVal Row="6">1</AVal>
				<AVal Row="7">1</AVal>
				<AVal Row="8">1</AVal>
				<AVal Row="9">1</AVal>
				<AVal Row="10">1</AVal>
				<AVal Row="11">1</AVal>
				<AVal Row="12">1</AVal>
				<AVal Row="13">1</AVal>
				<AVal Row="14">1</AVal>
				<AVal Row="15">1</AVal>
				<AVal Row="16">1</AVal>
				<AVal Row="17">1</AVal>
				<AVal Row="18">1</AVal>
				<AVal Row="19">1</AVal>
				<AVal Row="20">1</AVal>
			</ArrayValues>
		</Integer>

		<!-- CornerWindowFunction: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="CornerWindowFunction">
			<Description><![CDATA["Corner Window Function"]]></Description>
		</Title>
		<Boolean Name="bLeftCornerFunction">
			<Description><![CDATA["Left Corner"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Angle Name="leftCornerAngle">
			<Description><![CDATA["Left Corner Angle"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Angle>
		<Boolean Name="bRightCornerFunction">
			<Description><![CDATA["Right Corner"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Angle Name="rightCornerAngle">
			<Description><![CDATA["Right Corner Angle"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Angle>

		<!-- gs_window_sizes: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_window_sizes">
			<Description><![CDATA["Window Sizes"]]></Description>
		</Title>

		<!-- gs_corner_column: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Boolean Name="gs_corner_column">
			<Description><![CDATA["Corner Column"]]></Description>
			<Flags>
				<ParFlg_BoldName/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Length Name="gs_cc_width">
			<Description><![CDATA["Corner Column Width"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.175</Value>
		</Length>
		<Length Name="gs_cc_thk">
			<Description><![CDATA["Corner Column Thickness"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.14</Value>
		</Length>
		<Length Name="gs_cc_pr">
			<Description><![CDATA["Corner Column Projection"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Boolean Name="gs_cc_endline">
			<Description><![CDATA["Corner Column Endline"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>

		<!-- gs_2D_representation: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_2D_representation">
			<Description><![CDATA["2D and Section Representation"]]></Description>
		</Title>
		<Integer Name="lod2D_CornerColumn">
			<Description><![CDATA["2D Detail Level - Corner Column"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>3</Value>
		</Integer>
		<PenColor Name="gs_frame_pen_cont">
			<Description><![CDATA["Contour Pen"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>3</Value>
		</PenColor>
		<FillPattern Name="gs_fillFr">
			<Description><![CDATA["Fill Pattern"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>65</Value>
		</FillPattern>
		<PenColor Name="gs_penFr_fg">
			<Description><![CDATA["Fill ForeGround"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>8</Value>
		</PenColor>
		<PenColor Name="gs_penFr_bg">
			<Description><![CDATA["Fill BackGround"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>108</Value>
		</PenColor>

		<!-- gs_3D_representation: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_3D_representation">
			<Description><![CDATA["3D Representation"]]></Description>
		</Title>
		<PenColor Name="gs_frame_pen">
			<Description><![CDATA["3D Pen"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>3</Value>
		</PenColor>

		<!-- gs_column_material: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_column_material">
			<Description><![CDATA["Surfaces"]]></Description>
		</Title>
		<Material Name="matCornerColumn">
			<Description><![CDATA["Column Surface"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>15</Value>
		</Material>
	</Parameters>
</ParamSection>

<Ancestry SectVersion="1" SectionFlags="0" SubIdent="0" Template="false">
	<MainGUID>F938E33A-329D-4A36-BE3E-85E126820996</MainGUID>
	<MainGUID>103E8D2C-8230-42E1-9597-46F84CCE28C0</MainGUID>
	<MainGUID>B2970E4C-8680-4061-8670-2F4B638F3953</MainGUID>
</Ancestry>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_3D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
! Contact person: <NJ>

! ==============================================================================
! This macro draws the corner columns
! ------------------------------------------------------------------------------
! Input Parameters:
! ==============================================================================


pen gs_frame_pen
material matCornerColumn
sect_fill gs_fillFr, gs_penFr_bg, gs_penFr_fg, gs_frame_pen_cont



if WIDO_REVEAL_SIDE then
	addz WIDO_FRAME_THICKNESS
else
	mulz -1
endif

rotx -90

topAngle = 0
if openingArchHeight > EPS then
	topAngle = atn(openingArchHeight / ac_wallhole_width)
endif

! Draw Right Column ------------------------------------------------------------

if bRightCornerFunction & vardim1(rightRevealPnts) >= idxR then
	add rightRevealPnts[idxR][1],rightRevealPnts[idxR][2],0
	if bMirrorRight then muly -1

	px1		= px1R
	px2		= px2R
	px3		= px3R
	pxFrame	= pxFrameR
	trapezoidHeightMod = 0
	bCutDone = 0

	if openingArchHeight > EPS then		! only trapeze shape!
		add px2 - pxFrame, 0, openingHeight - openingArchHeight
		rotz 90

		cutplane topAngle

		del 2
		bCutDone = 1
	endif

	gosub 100

	if bCutDone then cutend

	del bMirrorRight + 1
endif


! Draw Left Column -------------------------------------------------------------

if bLeftCornerFunction & vardim1(leftRevealPnts) >= idxL then
	add leftRevealPnts[idxL][1],leftRevealPnts[idxL][2],0
	if bMirrorLeft then muly -1
	add offsLeftX, offsLeftY, 0
	mulx -1

	px1		= px1L
	px2		= px2L
	px3		= px3L
	pxFrame	= pxFrameL
	trapezoidHeightMod = 0
	bCutDone = 0

	if openingArchHeight > EPS then		! only trapeze shape!
		trapezoidHeightMod = max(px1, px3) - (px2 - pxFrame) * tan(topAngle)
		add px2 - pxFrame, 0, openingHeight
		rotz 90
		cutplane -topAngle
		del 2
		bCutDone = 1
	endif

	gosub 100

	if bCutDone then cutend

	del bMirrorLeft + 3
endif

del 2

! ==============================================================================
end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end
! ==============================================================================


100:
	body -1

	bPlanarIn	= (abs(WIDO_FRAME_THICKNESS - (gs_cc_thk - gs_cc_pr)) < EPS & abs(px3 - (px2 - pxFrame)) > EPS)
	bPlanarOut	= (abs(gs_cc_pr) < EPS & abs(px1 - (px2 - pxFrame)) > EPS)

	if bPlanarIn | bPlanarOut then
		! Workaround to avoid line elimination in case when the corner column
		! and the window frame are in the same plane.

		add px1, -gs_cc_pr, 0
		rotz -atn(gs_cc_thk / (px1 - px3))
		rotx 90
		cutplane 180
		del 3

		add px2 - pxFrame, -gs_cc_pr, 0
		block max(px1, px3) - (px2 - pxFrame), gs_cc_thk, openingHeight + trapezoidHeightMod
		del 1

		cutend
	else
		prism_ 4, openingHeight + trapezoidHeightMod,
			px1,			-gs_cc_pr,				15,
			px2 - pxFrame,	-gs_cc_pr,				15,
			px2 - pxFrame,	-gs_cc_pr + gs_cc_thk,	15,
			px3,			-gs_cc_pr + gs_cc_thk,	15
	endif

	base
	vert 0, 0, 0
	vert 0, 0, 1
	vert 0, 1, 0
	vert 1, 0, 0
	coor 5, -1, -2, -3, -4
	body 1

	! Cut space from upper and bottom reveal
	if abs(openingArchHeight) < EPS then
		wallniche 4,1,2,
			0,0,1, openingHeight,
			px1,			-gs_cc_pr,				31,
			px2 - pxFrame,	-gs_cc_pr,				31,
			px2 - pxFrame,	-gs_cc_pr + gs_cc_thk,	31,
			px3,			-gs_cc_pr + gs_cc_thk,	31
	endif
return
]]>
</Script_3D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_1D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
! Contact person: <NJ>

! ==============================================================================
! This macro draws the corner columns
! ------------------------------------------------------------------------------
! Remark:
!	See the input parameters at the 2D/3D Scripts
! ==============================================================================

EPS = 0.0001

REVEAL_EDGE				= 0
REVEAL_NO				= 1
REVEAL_POSITIVE			= 2
REVEAL_NEGATIVE			= 3
REVEAL_SLANTED			= 4
REVEAL_SPLAYED			= 5
REVEAL_HISTORIC			= 6
REVEAL_DOUBLE			= 7
REVEAL_DOUBLE_SPLAYED	= 8
REVEAL_OUTSIDE_SPLAYED	= 9

! =============================================================================

if gs_corner_column and (GLOB_SCRIPT_TYPE = 2 | GLOB_SCRIPT_TYPE = 3) then

	bSimpleDetail = ((GLOB_CONTEXT = 2 | GLOB_CONTEXT = 22) & lod2D_CornerColumn < 3)

	if bRightCornerFunction & abs(rightCornerAngle) > EPS then
		cornerPostXbyWidth	= (-WIDO_FRAME_THICKNESS - gs_cc_pr) * abs(tan(90 - rightCornerAngle / 2)) + gs_cc_width
		cornerPostXbyThk	= (gs_cc_thk - WIDO_FRAME_THICKNESS - gs_cc_pr) * abs(tan(90 - rightCornerAngle / 2))
		pxFrameR = max(cornerPostXbyWidth, cornerPostXbyThk)

		tanAngle = tan(rightCornerAngle / 2)
		if (rightCornerAngle > 180) then
			px1R = -not(bSimpleDetail) * (gs_cc_pr / tanAngle)
			px2R =  WIDO_FRAME_THICKNESS / tanAngle
			px3R =  (bSimpleDetail * WIDO_FRAME_THICKNESS - not(bSimpleDetail) * (gs_cc_pr - gs_cc_thk)) / tanAngle
		else
			px1R =  not(bSimpleDetail) * (gs_cc_pr / tanAngle)
			px2R = -WIDO_FRAME_THICKNESS / tanAngle
			px3R = -(bSimpleDetail * WIDO_FRAME_THICKNESS - not(bSimpleDetail) * (gs_cc_pr - gs_cc_thk)) / tanAngle
		endif
	endif

	if bLeftCornerFunction & abs(leftCornerAngle) > EPS then
		cornerPostXbyWidth	= (-WIDO_FRAME_THICKNESS - gs_cc_pr) * abs(tan(90 - leftCornerAngle / 2)) + gs_cc_width
		cornerPostXbyThk	= (gs_cc_thk - WIDO_FRAME_THICKNESS - gs_cc_pr) * abs(tan(90 - leftCornerAngle / 2))
		pxFrameL = max(cornerPostXbyWidth, cornerPostXbyThk)

		tanAngle = tan(leftCornerAngle / 2)
		if (leftCornerAngle > 180) then
			px1L = -not(bSimpleDetail) * (gs_cc_pr / tanAngle)
			px2L =  WIDO_FRAME_THICKNESS / tanAngle
			px3L =  (bSimpleDetail * WIDO_FRAME_THICKNESS - not(bSimpleDetail) * (gs_cc_pr - gs_cc_thk)) / tanAngle
		else
			px1L =  not(bSimpleDetail) * (gs_cc_pr / tanAngle)
			px2L = -WIDO_FRAME_THICKNESS / tanAngle
			px3L = -(bSimpleDetail * WIDO_FRAME_THICKNESS - not(bSimpleDetail) * (gs_cc_pr - gs_cc_thk)) / tanAngle
		endif
	endif
endif


! =============================================================================

idxFrameStartRevealLeft		= iRevealPointsIdx[3]
idxFrameEndRevealLeft		= iRevealPointsIdx[4]
idxBoardEndRevealLeft		= iRevealPointsIdx[6]
idxFrameStartRevealRight	= iRevealPointsIdx[13]
idxFrameEndRevealRight		= iRevealPointsIdx[14]
idxBoardEndRevealRight		= iRevealPointsIdx[16]

if (rightCornerAngle > 180) then
	idxL = idxFrameEndRevealLeft
	idxR = idxFrameEndRevealRight
else
	idxL = idxFrameStartRevealLeft
	idxR = idxFrameStartRevealRight
endif


! =============================================================================

bMirrorRight	= (rightCornerAngle > 180)
bMirrorLeft		= (leftCornerAngle > 180)
offsLeftY		= ((leftCornerAngle > 180) exor (rightCornerAngle > 180)) * (2 * gs_cc_pr - gs_cc_thk)
if abs(leftCornerAngle) > EPS then
	offsLeftX	= -abs(offsLeftY / tan(leftCornerAngle / 2))
endif
]]>
</Script_1D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_PR SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_PR>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_UI SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_UI>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_VL SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
if not(gs_corner_column) then
	hideparameter "gs_cc_width", "gs_cc_thk", "gs_cc_pr"
	lock "gs_cc_width", "gs_cc_thk", "gs_cc_pr"
else
	if not(bLeftCornerFunction) AND not(bRightCornerFunction) then
		hideparameter "gs_cc_width", "gs_cc_thk", "gs_cc_pr", "matCornerColumn"
		lock "gs_cc_width", "gs_cc_thk", "gs_cc_pr", "matCornerColumn"
	endif

	values "gs_cc_pr"		range[0,]
	values "gs_cc_width"	range[0,]
	values "gs_cc_thk"		range[WIDO_FRAME_THICKNESS + gs_cc_pr,]
endif

]]>
</Script_VL>

<Comment SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Comment>

<CalledMacros SectVersion="2" SectionFlags="0" SubIdent="0">
</CalledMacros>

<Copyright SectVersion="1" SectionFlags="0" SubIdent="0">
	<Author>GRAPHISOFT</Author>
	<License>
		<Type>CC BY-ND</Type>
		<Version>3.0</Version>
	</License>
</Copyright>

</Symbol>
