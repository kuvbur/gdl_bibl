<?xml version="1.0" encoding="UTF-8"?>
<Symbol IsArchivable="false" IsPlaceable="false" MainGUID="98FA003A-2EEA-11E0-AF68-03A0DFD72085" MigrationValue="Normal" Owner="1196638531" Signature="1196644685" Version="38">
<Ancestry SectVersion="1" SectionFlags="0" SubIdent="0" Template="false">
	<MainGUID>F938E33A-329D-4A36-BE3E-85E126820996</MainGUID>
	<MainGUID>103E8D2C-8230-42E1-9597-46F84CCE28C0</MainGUID>
	<MainGUID>B2970E4C-8680-4061-8670-2F4B638F3953</MainGUID>
</Ancestry>

<CalledMacros SectVersion="2" SectionFlags="0" SubIdent="0">
</CalledMacros>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_3D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_3D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_2D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_2D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_1D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
! Contact person: <NJ>

! ==============================================================================
! This macro used by the RevealGeometry and TurnPlaster macros
! to retrieve information about the turned plaster skins
! ------------------------------------------------------------------------------
! Input parameters:
!	AC_Wall_Direction_Type:	(integer)
!	bEnablePlasterLeftIn:	enable/disable left in plaster turn (0 / 1)
!	bEnablePlasterLeftOut:	enable/disable left out plaster turn (0 / 1)
!	bEnablePlasterRightIn:	enable/disable right in plaster turn (0 / 1)
!	bEnablePlasterRightOut:	enable/disable right out plaster turn (0 / 1)
!	bEnablePlasterTopIn:	enable/disable top in plaster turn (0 / 1)
!	bEnablePlasterTopOut:	enable/disable top out plaster turn (0 / 1)
!	bEnablePlasterBottomIn:	enable/disable bottom in plaster turn (0 / 1)
!	bEnablePlasterBottomOut:enable/disable bottom out plaster turn (0 / 1)
!	gs_useWallFinishSkin:	use wall finish component (0 / 1)
!	gs_maxPlasterThk:		wall skin classification parameter (length)
!							consider Skin as Plaster if it is thinner this
!	gs_bAutoTurnIn:			automatic plaster return at Outside Face (0 / 1)
!	gs_bAutoTurnOut:		automatic plaster return at Inside Face (0 / 1)
!	gs_bOverIn:				number of turned plaster skins at Outside Face (integer)
!	gs_bOverOut:			number of turned plaster skins at Inside Face (integer)
! ------------------------------------------------------------------------------
! Output parameters:
!	thkPlasterAtSillLeft:	Thickness of turned plaster skins at left sill side
!	thkPlasterAtSillRight:	Thickness of turned plaster skins at right sill side
!	thkPlasterAtSillTop:	Thickness of turned plaster skins at sill top
!	thkPlasterAtSillBottom:	Thickness of turned plaster skins at sill bottom
!	thkPlasterAtBoardLeft:	Thickness of turned plaster skins at left board side
!	thkPlasterAtBoardRight:	Thickness of turned plaster skins at right board side
!	thkPlasterAtBoardTop:	Thickness of turned plaster skins at board top
!	thkPlasterAtBoardBottom:Thickness of turned plaster skins at board bottom
!	possibleSkinTurnIn:		Number of plaster skins at the Outside Face
!	possibleSkinTurnOut:	Number of plaster skins at the Inside Face
!								Skin can be turn in when it's width less or equal than "gs_maxPlasterThk"
!	maxSkinTurnIn:			Number of possible turned plaster skins at the Outside Face
!	maxSkinTurnOut:			Number of possible turned plaster skins at the Inside Face
!								Summ thickness of these skins are less than the depth of the sill (WIDO_SILL)
!								or less than the depth of the board (WALL_THICKNESS - WIDO_SILL - WIDO_FRAME_THICKNESS)
!	nSkinTurnIn:
!	nSkinTurnOut:
! ==============================================================================


EPS = 0.0001

! iClosureType:
CLOSURE_NO					= 0
CLOSURE_TRADITIONAL			= 1
CLOSURE_PREFABRICATED		= 2
CLOSURE_CUSTOM				= 3
CLOSURE_SOLID_WALL			= 4
CLOSURE_STUD_WALL			= 5
CLOSURE_STUD_WALL_SIDING	= 6
CLOSURE_BRICK_VENEER		= 7
CLOSURE_VARIABLE			= 8
CLOSURE_PLASTER_REVEAL	 			= 9
CLOSURE_INSULATED_REVEAL			= 10
CLOSURE_INSULATED_FOR_RENOVATION	= 11
CLOSURE_FINISH						= 12
CLOSURE_AIR_SPACE					= 13
CLOSURE_DUTCH_VARIABLE				= 14

! gs_custom_cc_array_left and gs_custom_cc_array_right columns:
CUSTOMCC_BITFIELD	= 1

bCustomClosure = (	iClosureType = CLOSURE_CUSTOM |\
					iClosureType = CLOSURE_PLASTER_REVEAL |\
					iClosureType = CLOSURE_INSULATED_REVEAL |\
					iClosureType = CLOSURE_INSULATED_FOR_RENOVATION )

! ==============================================================================

wallIsLeft	= (SYMB_ROTANGLE > EPS) exor WIDO_REVEAL_SIDE

reorder = (AC_Wall_Direction_Type <> 1 & AC_Wall_Direction_Type <> 3)
signReorder = not(reorder) - reorder

SKIN_FILL				=  1
SKIN_THICKNESS			=  2
SKIN_CONT_PEN			=  3	! Obsolete (old contour pen)
SKIN_FILL_PEN			=  4
SKIN_FILL_BACK_PEN		=  5
SKIN_CORE_STATUS		=  6
SKIN_UPPER_LINE_PEN		=  7 + 2 * reorder
SKIN_UPPER_LINE_TYPE	=  8 + 2 * reorder
SKIN_LOWER_LINE_PEN		=  9 - 2 * reorder
SKIN_LOWER_LINE_TYPE	= 10 - 2 * reorder
SKIN_END_FACE_PEN		= 11
SKIN_FILL_ORIENTATION	= 12	! 0 - global, 1 - local
SKIN_TYPE				= 13	! 0 - cut, 1 - below cutplane, 2 - above cutplane (all skin types are 0 for simple walls)
!	For D/W in complex walls on the floor plan this variable contains the data of all cut skins, for wall ends on the floor plan the data of all skins.
!	For D/W and wall ends in the 3D window contains the data of the skins actually cut by the D/W or wall end
SKIN_END_LINE_TYPE		= 14
SKIN_FINISH_STATUS		= 15


! Partial Stucture Display defines:
STRUCTURE_ENTIRE_STRUCTURE	= 0
STRUCTURE_CORE_ONLY			= 1
STRUCTURE_WITHOUT_FINISHES	= 2


! ==============================================================================

if not(bEnablePlasterLeftOut) & not(bEnablePlasterRightOut) then
	gs_bAutoTurnOut	= 0
	gs_bOverOut		= 0
endif

if not(bEnablePlasterLeftIn) & not(bEnablePlasterRightIn) then
	gs_bAutoTurnIn	= 0
	gs_bOverIn		= 0
endif


! ==============================================================================

bCompositeWall		= (WALL_SKINS_NUMBER > 0)
bFirstSkinAtReveal	= (wallIsLeft exor reorder)

! --- find the last core skin ---
firstCoreSkin	= 0
lastCoreSkin	= 0
for i = 1 to WALL_SKINS_NUMBER
	idx = i: gosub 10	! Get proper index

	if abs(WALL_SKINS_PARAMS[idx][SKIN_CORE_STATUS] - 3) < EPS then
		lastCoreSkin = i
	endif

	if WALL_SKINS_PARAMS[idx][SKIN_CORE_STATUS] > EPS then
		if firstCoreSkin < 1 then
			firstCoreSkin = i
		endif
	endif
next i

if firstCoreSkin = 0 then
	firstCoreSkin = WALL_SKINS_NUMBER
endif

gs_maxPlasterThkIn	= gs_maxPlasterThk
gs_maxPlasterThkOut	= gs_maxPlasterThk


! ==============================================================================
! Determine number of turned plaster skins from the Outside Face
! ==============================================================================

maxSkinTurnIn		= 0
nSkinTurnIn         = 0
nFinishSkinTurnIn	= 0	! Number of finish state skins at inside
bCountMaxSkins		= 1
possibleSkinTurnIn	= 0
bCountPossibleSkins	= 1
lengthPlasterTurnIn	= bFirstSkinAtReveal * WIDO_SILL + not(bFirstSkinAtReveal) * (WALL_THICKNESS - WIDO_SILL - WIDO_FRAME_THICKNESS)

if GLOB_SCRIPT_TYPE <> 5 then
	if bCompositeWall & not(bCustomClosure) then
		sumThk = 0
		for i = 1 to firstCoreSkin - 1
			idx = i: gosub 10	! Get proper index

			thisTkh = WALL_SKINS_PARAMS[idx][SKIN_THICKNESS]
			sumThk = sumThk + thisTkh

			bFinishSkin = (abs(WALL_SKINS_PARAMS[idx][SKIN_FINISH_STATUS] - 1) < EPS)

			if bFinishSkin | GLOB_STRUCTURE_DISPLAY = STRUCTURE_CORE_ONLY then
				nFinishSkinTurnIn = nFinishSkinTurnIn + 1
			endif

			if (not(gs_useWallFinishSkin) & thisTkh <= gs_maxPlasterThkIn + EPS) | (gs_useWallFinishSkin & bFinishSkin) then
				if bCountPossibleSkins then possibleSkinTurnIn = possibleSkinTurnIn + 1
			else
				bCountPossibleSkins = 0
			endif

			if bCountMaxSkins & (not(gs_bAutoTurnIn) | thisTkh <= gs_maxPlasterThkIn + EPS) then
				if bFirstSkinAtReveal then
					if sumThk <= WIDO_SILL - EPS then
						maxSkinTurnIn = maxSkinTurnIn + 1
					else
						bCountMaxSkins = 0
					endif
				else
					if sumThk <= WALL_THICKNESS - WIDO_SILL - WIDO_FRAME_THICKNESS - EPS then
						maxSkinTurnIn = maxSkinTurnIn + 1
					else
						bCountMaxSkins = 0
					endif
				endif
			else
				bCountMaxSkins = 0
			endif
		next i

		if gs_useWallFinishSkin then
			maxSkinTurnIn	= 0
			bCountMaxSkins	= 1

			for i = 1 to firstCoreSkin - 1
				idx = i: gosub 10	! Get proper index

				if bCountMaxSkins & abs(WALL_SKINS_PARAMS[idx][SKIN_FINISH_STATUS] - 1) < EPS then
					maxSkinTurnIn = maxSkinTurnIn + 1
				else
					bCountMaxSkins = 0
				endif
			next i
		endif

		if gs_bAutoTurnIn then
			nSkinTurnIn = maxSkinTurnIn
		else
			nSkinTurnIn = min(possibleSkinTurnIn, gs_bOverIn)
			nSkinTurnIn = max(nSkinTurnIn, 0)
		endif
		nFinishSkinTurnIn = min(nFinishSkinTurnIn, nSkinTurnIn)
	endif

	if bCompositeWall & bCustomClosure then
		sumThk = 0
		bCountSkins = 1
		for i=1 to min(WALL_SKINS_NUMBER, 4)
			idx = i: gosub 10	! Get proper index

			if abs(WALL_SKINS_PARAMS[idx][SKIN_FINISH_STATUS] - 1) < EPS | GLOB_STRUCTURE_DISPLAY = STRUCTURE_CORE_ONLY then
				nFinishSkinTurnIn = nFinishSkinTurnIn + 1
			endif

			if bCountSkins & WALL_SKINS_PARAMS[idx][SKIN_CORE_STATUS] < EPS then

				thisTkh = WALL_SKINS_PARAMS[idx][SKIN_THICKNESS]
				sumThk = sumThk + thisTkh

				iBitfield = round_int(gs_custom_cc_array_left[i][CUSTOMCC_BITFIELD])
				bTurnSkinLeft		= bittest(iBitfield, 0)
				bPlasterSkinLeft	= bittest(iBitfield, 4)

				iBitfield = round_int(gs_custom_cc_array_right[i][CUSTOMCC_BITFIELD])
				bTurnSkinRight		= bittest(iBitfield, 0)
				bPlasterSkinRight	= bittest(iBitfield, 4)

				bTurnSkin		= (bTurnSkinLeft & bTurnSkinRight)
				bPlasterSkin	= (bPlasterSkinLeft & bPlasterSkinRight)

				if bTurnSkin & bPlasterSkin then
					possibleSkinTurnIn = possibleSkinTurnIn + 1
				endif

				if bFirstSkinAtReveal then
					if sumThk <= WIDO_SILL - EPS then
						maxSkinTurnIn = maxSkinTurnIn + 1
					else
						bCountMaxSkins = 0
					endif
				else
					if sumThk <= WALL_THICKNESS - WIDO_SILL - WIDO_FRAME_THICKNESS - EPS then
						maxSkinTurnIn = maxSkinTurnIn + 1
					else
						bCountMaxSkins = 0
					endif
				endif
			else
				bCountSkins = 0
			endif
		next i

		nSkinTurnIn			= min(possibleSkinTurnIn, maxSkinTurnIn)
		nFinishSkinTurnIn	= min(nFinishSkinTurnIn, possibleSkinTurnIn, maxSkinTurnIn)
	endif
endif


! ==============================================================================
! Determine number of turned plaster skins from the Inside Face
! ==============================================================================

maxSkinTurnOut		= 0
nSkinTurnOut        = 0
nFinishSkinTurnOut	= 0	! Number of finish state skins at outside
bCountMaxSkins		= 1
possibleSkinTurnOut	= 0
bCountPossibleSkins	= 1
lengthPlasterTurnOut= not(bFirstSkinAtReveal) * WIDO_SILL + bFirstSkinAtReveal * (WALL_THICKNESS - WIDO_SILL - WIDO_FRAME_THICKNESS)

if GLOB_SCRIPT_TYPE <> 5 then
	if bCompositeWall & not(bCustomClosure) then
		sumThk = 0
		for i = WALL_SKINS_NUMBER to lastCoreSkin + 1 step -1
			idx = i: gosub 10	! Get proper index

			thisTkh = WALL_SKINS_PARAMS[idx][SKIN_THICKNESS]
			sumThk = sumThk + thisTkh

			bFinishSkin = (abs(WALL_SKINS_PARAMS[idx][SKIN_FINISH_STATUS] - 1) < EPS)

			if bFinishSkin | GLOB_STRUCTURE_DISPLAY = STRUCTURE_CORE_ONLY then
				nFinishSkinTurnOut = nFinishSkinTurnOut + 1
			endif

			if (not(gs_useWallFinishSkin) & thisTkh <= gs_maxPlasterThkOut + EPS) | (gs_useWallFinishSkin & bFinishSkin) then
				if bCountPossibleSkins then possibleSkinTurnOut = possibleSkinTurnOut + 1
			else
				bCountPossibleSkins = 0
			endif

			if bCountMaxSkins & (not(gs_bAutoTurnOut) | thisTkh <= gs_maxPlasterThkOut + EPS) then
				if bFirstSkinAtReveal then
					if sumThk <= WALL_THICKNESS - WIDO_SILL - WIDO_FRAME_THICKNESS - EPS then
						maxSkinTurnOut = maxSkinTurnOut + 1
					else
						bCountMaxSkins = 0
					endif
				else
					if sumThk <= WIDO_SILL - EPS then
						maxSkinTurnOut = maxSkinTurnOut + 1
					else
						bCountMaxSkins = 0
					endif
				endif
			else
				bCountMaxSkins = 0
			endif
		next i

		if gs_useWallFinishSkin then
			maxSkinTurnOut	= 0
			bCountMaxSkins	= 1

			for i = WALL_SKINS_NUMBER to lastCoreSkin + 1 step -1
				idx = i: gosub 10	! Get proper index

				if bCountMaxSkins & abs(WALL_SKINS_PARAMS[idx][SKIN_FINISH_STATUS] - 1) < EPS then
					maxSkinTurnOut = maxSkinTurnOut + 1
				else
					bCountMaxSkins = 0
				endif
			next i
		endif

		if gs_bAutoTurnOut then
			nSkinTurnOut = maxSkinTurnOut
		else
			nSkinTurnOut = min(possibleSkinTurnOut, gs_bOverOut)
			nSkinTurnOut = max(nSkinTurnOut, 0)
		endif
		nFinishSkinTurnOut = min(nFinishSkinTurnOut, nSkinTurnOut)
	endif

	if bCompositeWall & bCustomClosure then
		sumThk = 0
		bCountSkins = 1
		for i=1 to min(WALL_SKINS_NUMBER, 4)
			idx = WALL_SKINS_NUMBER - i + 1: gosub 10	! Get proper index

			if abs(WALL_SKINS_PARAMS[idx][SKIN_FINISH_STATUS] - 1) < EPS | GLOB_STRUCTURE_DISPLAY = STRUCTURE_CORE_ONLY then
				nFinishSkinTurnOut = nFinishSkinTurnOut + 1
			endif

			if bCountSkins & WALL_SKINS_PARAMS[idx][SKIN_CORE_STATUS] < EPS then

				thisTkh = WALL_SKINS_PARAMS[idx][SKIN_THICKNESS]
				sumThk = sumThk + thisTkh

				iBitfield = round_int(gs_custom_cc_array_left[4 + i][CUSTOMCC_BITFIELD])
				bTurnSkinLeft		= bittest(iBitfield, 0)
				bPlasterSkinLeft	= bittest(iBitfield, 4)

				iBitfield = round_int(gs_custom_cc_array_right[4 + i][CUSTOMCC_BITFIELD])
				bTurnSkinRight		= bittest(iBitfield, 0)
				bPlasterSkinRight	= bittest(iBitfield, 4)

				bTurnSkin		= (bTurnSkinLeft & bTurnSkinRight)
				bPlasterSkin	= (bPlasterSkinLeft & bPlasterSkinRight)

				if bTurnSkin & bPlasterSkin then
					possibleSkinTurnOut = possibleSkinTurnOut + 1
				endif

				if bFirstSkinAtReveal then
					if sumThk <= WALL_THICKNESS - WIDO_SILL - WIDO_FRAME_THICKNESS - EPS then
						maxSkinTurnOut = maxSkinTurnOut + 1
					else
						bCountMaxSkins = 0
					endif
				else
					if sumThk <= WIDO_SILL - EPS then
						maxSkinTurnOut = maxSkinTurnOut + 1
					else
						bCountMaxSkins = 0
					endif
				endif
			else
				bCountSkins = 0
			endif
		next i

		nSkinTurnOut		= min(possibleSkinTurnOut, maxSkinTurnOut)
		nFinishSkinTurnOut	= min(nFinishSkinTurnOut, possibleSkinTurnOut, maxSkinTurnOut)
	endif
endif


! ==============================================================================

dim skinCummThkRef[]	! Cummulative skin thickness from the Outside Face (8 +1 skins))
dim skinCummThkOpp[]	! Cummulative skin thickness from the Inside Face (8 + 1 skins)

cumRefThk = 0
cumOppThk = 0

if bCompositeWall & (nSkinTurnIn > 0 | nFinishSkinTurnIn > 0 | nSkinTurnOut > 0 | nFinishSkinTurnOut > 0) then
	for i=1 to WALL_SKINS_NUMBER
		idx = i: gosub 10	! Get proper index

		cumRefThk = cumRefThk + WALL_SKINS_PARAMS[idx][SKIN_THICKNESS]
		skinCummThkRef[idx] = cumRefThk

		idx = WALL_SKINS_NUMBER + 1 - idx	! reorder
		cumOppThk = cumOppThk + WALL_SKINS_PARAMS[idx][SKIN_THICKNESS]
		skinCummThkOpp[idx] = cumOppThk
	next i
endif


! ==============================================================================

thkSkinTurnIn = 0
if nSkinTurnIn > 0 then
	idx = nSkinTurnIn: gosub 10	! Get proper index
	thkSkinTurnIn = skinCummThkRef[idx]
endif
thkFinishSkinTurnIn = 0
if nFinishSkinTurnIn > 0 then
	idx = nFinishSkinTurnIn: gosub 10	! Get proper index
	thkFinishSkinTurnIn = skinCummThkRef[idx]
endif

thkSkinTurnOut = 0
if nSkinTurnOut > 0 then
	idx = WALL_SKINS_NUMBER - nSkinTurnOut + 1: gosub 10	! Get proper index
	thkSkinTurnOut = skinCummThkOpp[idx]
endif
thkFinishSkinTurnOut = 0
if nFinishSkinTurnOut > 0 then
	idx = WALL_SKINS_NUMBER - nFinishSkinTurnOut + 1: gosub 10	! Get proper index
	thkFinishSkinTurnOut = skinCummThkOpp[idx]
endif


thkSkinTurnInLeft	= bEnablePlasterLeftIn  * thkSkinTurnIn
thkSkinTurnOutLeft	= bEnablePlasterLeftOut * thkSkinTurnOut

thkSkinTurnInRight	= bEnablePlasterRightIn  * thkSkinTurnIn
thkSkinTurnOutRight	= bEnablePlasterRightOut * thkSkinTurnOut

thkSkinTurnInTop	= bEnablePlasterTopIn  * thkSkinTurnIn
thkSkinTurnOutTop	= bEnablePlasterTopOut * thkSkinTurnOut

thkSkinTurnInBottom	= bEnablePlasterBottomIn  * thkSkinTurnIn
thkSkinTurnOutBottom= bEnablePlasterBottomOut * thkSkinTurnOut

thkSkinTurnInBottomSlLeft	= bEnablePlasterBottomSlLeftIn  * thkSkinTurnIn
thkSkinTurnOutBottomSlLeft	= bEnablePlasterBottomSlLeftOut * thkSkinTurnOut

thkSkinTurnInBottomSlRight	= bEnablePlasterBottomSlRightIn  * thkSkinTurnIn
thkSkinTurnOutBottomSlRight	= bEnablePlasterBottomSlRightOut * thkSkinTurnOut

if GLOB_SCRIPT_TYPE = 2 | GLOB_SCRIPT_TYPE = 3 then
	if GLOB_STRUCTURE_DISPLAY <> STRUCTURE_ENTIRE_STRUCTURE then
		thkSkinTurnInLeft	= bEnablePlasterLeftIn  * (thkSkinTurnIn  - thkFinishSkinTurnIn)
		thkSkinTurnOutLeft	= bEnablePlasterLeftOut * (thkSkinTurnOut - thkFinishSkinTurnOut)

		thkSkinTurnInRight	= bEnablePlasterRightIn  * (thkSkinTurnIn  - thkFinishSkinTurnIn)
		thkSkinTurnOutRight	= bEnablePlasterRightOut * (thkSkinTurnOut - thkFinishSkinTurnOut)

		thkSkinTurnInTop	= bEnablePlasterTopIn  * (thkSkinTurnIn  - thkFinishSkinTurnIn)
		thkSkinTurnOutTop	= bEnablePlasterTopOut * (thkSkinTurnOut - thkFinishSkinTurnOut)

		thkSkinTurnInBottom	= bEnablePlasterBottomIn  * (thkSkinTurnIn  - thkFinishSkinTurnIn)
		thkSkinTurnOutBottom= bEnablePlasterBottomOut * (thkSkinTurnOut - thkFinishSkinTurnOut)

		thkSkinTurnInBottomSlLeft	= bEnablePlasterBottomSlLeftIn  * (thkSkinTurnIn  - thkFinishSkinTurnIn)
		thkSkinTurnOutBottomSlLeft	= bEnablePlasterBottomSlLeftOut * (thkSkinTurnOut - thkFinishSkinTurnOut)

		thkSkinTurnInBottomSlRight	= bEnablePlasterBottomSlRightIn  * (thkSkinTurnIn  - thkFinishSkinTurnIn)
		thkSkinTurnOutBottomSlRight	= bEnablePlasterBottomSlRightOut * (thkSkinTurnOut - thkFinishSkinTurnOut)
	endif
endif

if GLOB_SCRIPT_TYPE = 2 then
	if not(bEnablePlasterLeftIn | bEnablePlasterRightIn) then
		nSkinTurnIn = 0
	endif
	if not(bEnablePlasterLeftOut | bEnablePlasterRightOut) then
		nSkinTurnOut = 0
	endif
else
	if not(bEnablePlasterLeftIn | bEnablePlasterRightIn | bEnablePlasterTopIn | bEnablePlasterBottomIn) then
		nSkinTurnIn = 0
	endif
	if not(bEnablePlasterLeftOut | bEnablePlasterRightOut | bEnablePlasterTopOut | bEnablePlasterBottomOut) then
		nSkinTurnOut = 0
	endif
endif

if wallIsLeft exor reorder then
	thkPlasterAtSillLeft			= thkSkinTurnInLeft
	thkPlasterAtSillSlLeft			= thkSkinTurnInLeft
	thkPlasterAtSillSlLeftBottom	= thkSkinTurnInBottomSlLeft
	thkPlasterAtSillRight			= thkSkinTurnInRight
	thkPlasterAtSillSlRight			= thkSkinTurnInRight
	thkPlasterAtSillSlRightBottom	= thkSkinTurnInBottomSlRight
	thkPlasterAtSillTop				= thkSkinTurnInTop
	thkPlasterAtSillBottom			= thkSkinTurnInBottom

	thkPlasterAtBoardLeft			= thkSkinTurnOutLeft
	thkPlasterAtBoardSlLeft			= thkSkinTurnOutLeft
	thkPlasterAtBoardSlLeftBottom	= thkSkinTurnOutBottomSlLeft
	thkPlasterAtBoardRight			= thkSkinTurnOutRight
	thkPlasterAtBoardSlRight		= thkSkinTurnOutRight
	thkPlasterAtBoardSlRightBottom	= thkSkinTurnOutBottomSlRight
	thkPlasterAtBoardTop			= thkSkinTurnOutTop
	thkPlasterAtBoardBottom			= thkSkinTurnOutBottom
else
	thkPlasterAtSillLeft			= thkSkinTurnOutLeft
	thkPlasterAtSillSlLeft			= thkSkinTurnOutLeft
	thkPlasterAtSillSlLeftBottom	= thkSkinTurnOutBottomSlLeft
	thkPlasterAtSillRight			= thkSkinTurnOutRight
	thkPlasterAtSillSlRight			= thkSkinTurnOutRight
	thkPlasterAtSillSlRightBottom	= thkSkinTurnOutBottomSlRight
	thkPlasterAtSillTop				= thkSkinTurnOutTop
	thkPlasterAtSillBottom			= thkSkinTurnOutBottom

	thkPlasterAtBoardLeft			= thkSkinTurnInLeft
	thkPlasterAtBoardSlLeft			= thkSkinTurnInLeft
	thkPlasterAtBoardSlLeftBottom	= thkSkinTurnInBottomSlLeft
	thkPlasterAtBoardRight			= thkSkinTurnInRight
	thkPlasterAtBoardSlRight		= thkSkinTurnInRight
	thkPlasterAtBoardSlRightBottom	= thkSkinTurnInBottomSlRight
	thkPlasterAtBoardTop			= thkSkinTurnInTop
	thkPlasterAtBoardBottom			= thkSkinTurnInBottom
endif


! ==============================================================================
! Returned Parameters
! ==============================================================================

end thkPlasterAtSillLeft,
	thkPlasterAtSillSlLeft,
	thkPlasterAtSillSlLeftBottom,
	thkPlasterAtSillRight,
	thkPlasterAtSillSlRight,
	thkPlasterAtSillSlRightBottom,
	thkPlasterAtSillTop,
	thkPlasterAtSillBottom,
	thkPlasterAtBoardLeft,
	thkPlasterAtBoardSlLeft,
	thkPlasterAtBoardSlLeftBottom,
	thkPlasterAtBoardRight,
	thkPlasterAtBoardSlRight,
	thkPlasterAtBoardSlRightBottom,
	thkPlasterAtBoardTop,
	thkPlasterAtBoardBottom,
	possibleSkinTurnIn,
	possibleSkinTurnOut,
	maxSkinTurnIn,
	maxSkinTurnOut,
	nSkinTurnIn,
	nSkinTurnOut

! ==============================================================================
!		Calculate proper skin index from parameter 'idx'
! ------------------------------------------------------------------------------
! Input variables:
!	idx:	index of current skin
! Output variables:
!	idx:	index of skin via 'Composite Structures' dialog
! ==============================================================================

10:
	if reorder then
		idx = WALL_SKINS_NUMBER + 1 - idx
	endif
return

]]>
</Script_1D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_PR SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_PR>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_UI SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_UI>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_VL SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_VL>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Comment SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Comment>

<ParamSection SectVersion="26" SectionFlags="0" SubIdent="0">
	<ParamSectHeader>
		<Version>26</Version>
		<AutoHotspots>false</AutoHotspots>
		<StatBits>
			<STBit_FixSize/>
		</StatBits>
		<WDLeftFrame>0</WDLeftFrame>
		<WDRightFrame>0</WDRightFrame>
		<WDTopFrame>0</WDTopFrame>
		<WDBotFrame>0</WDBotFrame>
		<LayFlags>65535</LayFlags>
		<WDMirrorThickness>0</WDMirrorThickness>
		<WDWallInset>0</WDWallInset>
		<SymbolColor>0</SymbolColor>
	</ParamSectHeader>
	<Parameters>
		<Length Name="A">
			<Description><![CDATA["Dimension 1"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Length>
		<Length Name="B">
			<Description><![CDATA["Dimension 2"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Length>
		<Length Name="ZZYZX">
			<Description><![CDATA["Height"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Length>
		<Boolean Name="AC_show2DHotspotsIn3D">
			<Description><![CDATA["Show 2D Hotspots in 3D"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Length Name="ac_bottomlevel">
			<Description><![CDATA["Bottom Level"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Length>
		<Length Name="ac_toplevel">
			<Description><![CDATA["Top Level"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Integer Name="gs_macro_version">
			<Description><![CDATA["Macro Version"]]></Description>
			<Value>12</Value>
		</Integer>
		<Integer Name="AC_Wall_Direction_Type">
			<Description><![CDATA["Wall Direction Type"]]></Description>
			<Value>0</Value>
		</Integer>
		<Boolean Name="bEnablePlasterLeftIn">
			<Description><![CDATA["Enable/Disable Left Inner Plaster Turn"]]></Description>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="bEnablePlasterLeftOut">
			<Description><![CDATA["Enable/Disable Left Outer Plaster Turn"]]></Description>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="bEnablePlasterRightIn">
			<Description><![CDATA["Enable/Disable Right Inner Plaster Turn"]]></Description>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="bEnablePlasterRightOut">
			<Description><![CDATA["Enable/Disable Right Outer Plaster Turn"]]></Description>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="bEnablePlasterTopIn">
			<Description><![CDATA["Enable/Disable Top Inner Plaster Turn"]]></Description>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="bEnablePlasterTopOut">
			<Description><![CDATA["Enable/Disable Top Outer Plaster Turn"]]></Description>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="bEnablePlasterBottomIn">
			<Description><![CDATA["Enable/Disable Bottom Inner Plaster Turn"]]></Description>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="bEnablePlasterBottomOut">
			<Description><![CDATA["Enable/Disable Bottom Outer Plaster Turn"]]></Description>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="bEnablePlasterBottomSlLeftIn">
			<Description><![CDATA[""]]></Description>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="bEnablePlasterBottomSlLeftOut">
			<Description><![CDATA[""]]></Description>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="bEnablePlasterBottomSlRightIn">
			<Description><![CDATA[""]]></Description>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="bEnablePlasterBottomSlRightOut">
			<Description><![CDATA[""]]></Description>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="gs_useWallFinishSkin">
			<Description><![CDATA["Use Wall Finish Component"]]></Description>
			<Value>0</Value>
		</Boolean>
		<Length Name="gs_maxPlasterThk">
			<Description><![CDATA["Plaster Thickness Limit"]]></Description>
			<Value>0.04</Value>
		</Length>
		<Boolean Name="gs_bAutoTurnOut">
			<Description><![CDATA["Auto Turn Inside Face Plaster"]]></Description>
			<Value>0</Value>
		</Boolean>
		<Integer Name="gs_bOverOut">
			<Description><![CDATA["Turn Inside Face Plaster"]]></Description>
			<Value>0</Value>
		</Integer>
		<Boolean Name="gs_bAutoTurnIn">
			<Description><![CDATA["Auto Turn Outside Face Plaster"]]></Description>
			<Value>0</Value>
		</Boolean>
		<Integer Name="gs_bOverIn">
			<Description><![CDATA["Turn Outside Face Plaster"]]></Description>
			<Value>0</Value>
		</Integer>
		<Boolean Name="gs_turn_plaster_show_3D">
			<Description><![CDATA["Show in 3D"]]></Description>
			<Value>0</Value>
		</Boolean>
		<Integer Name="iClosureType">
			<Description><![CDATA["Closure Type"]]></Description>
			<Value>0</Value>
		</Integer>
		<Length Name="gs_custom_cc_array_left">
			<Description><![CDATA[""]]></Description>
			<ArrayValues FirstDimension="8" SecondDimension="4">
				<AVal Column="1" Row="1">0</AVal>
				<AVal Column="2" Row="1">0</AVal>
				<AVal Column="3" Row="1">0</AVal>
				<AVal Column="4" Row="1">0</AVal>
				<AVal Column="1" Row="2">0</AVal>
				<AVal Column="2" Row="2">0</AVal>
				<AVal Column="3" Row="2">0</AVal>
				<AVal Column="4" Row="2">0</AVal>
				<AVal Column="1" Row="3">0</AVal>
				<AVal Column="2" Row="3">0</AVal>
				<AVal Column="3" Row="3">0</AVal>
				<AVal Column="4" Row="3">0</AVal>
				<AVal Column="1" Row="4">0</AVal>
				<AVal Column="2" Row="4">0</AVal>
				<AVal Column="3" Row="4">0</AVal>
				<AVal Column="4" Row="4">0</AVal>
				<AVal Column="1" Row="5">0</AVal>
				<AVal Column="2" Row="5">0</AVal>
				<AVal Column="3" Row="5">0</AVal>
				<AVal Column="4" Row="5">0</AVal>
				<AVal Column="1" Row="6">0</AVal>
				<AVal Column="2" Row="6">0</AVal>
				<AVal Column="3" Row="6">0</AVal>
				<AVal Column="4" Row="6">0</AVal>
				<AVal Column="1" Row="7">0</AVal>
				<AVal Column="2" Row="7">0</AVal>
				<AVal Column="3" Row="7">0</AVal>
				<AVal Column="4" Row="7">0</AVal>
				<AVal Column="1" Row="8">0</AVal>
				<AVal Column="2" Row="8">0</AVal>
				<AVal Column="3" Row="8">0</AVal>
				<AVal Column="4" Row="8">0</AVal>
			</ArrayValues>
		</Length>
		<Length Name="gs_custom_cc_array_right">
			<Description><![CDATA[""]]></Description>
			<ArrayValues FirstDimension="8" SecondDimension="4">
				<AVal Column="1" Row="1">0</AVal>
				<AVal Column="2" Row="1">0</AVal>
				<AVal Column="3" Row="1">0</AVal>
				<AVal Column="4" Row="1">0</AVal>
				<AVal Column="1" Row="2">0</AVal>
				<AVal Column="2" Row="2">0</AVal>
				<AVal Column="3" Row="2">0</AVal>
				<AVal Column="4" Row="2">0</AVal>
				<AVal Column="1" Row="3">0</AVal>
				<AVal Column="2" Row="3">0</AVal>
				<AVal Column="3" Row="3">0</AVal>
				<AVal Column="4" Row="3">0</AVal>
				<AVal Column="1" Row="4">0</AVal>
				<AVal Column="2" Row="4">0</AVal>
				<AVal Column="3" Row="4">0</AVal>
				<AVal Column="4" Row="4">0</AVal>
				<AVal Column="1" Row="5">0</AVal>
				<AVal Column="2" Row="5">0</AVal>
				<AVal Column="3" Row="5">0</AVal>
				<AVal Column="4" Row="5">0</AVal>
				<AVal Column="1" Row="6">0</AVal>
				<AVal Column="2" Row="6">0</AVal>
				<AVal Column="3" Row="6">0</AVal>
				<AVal Column="4" Row="6">0</AVal>
				<AVal Column="1" Row="7">0</AVal>
				<AVal Column="2" Row="7">0</AVal>
				<AVal Column="3" Row="7">0</AVal>
				<AVal Column="4" Row="7">0</AVal>
				<AVal Column="1" Row="8">0</AVal>
				<AVal Column="2" Row="8">0</AVal>
				<AVal Column="3" Row="8">0</AVal>
				<AVal Column="4" Row="8">0</AVal>
			</ArrayValues>
		</Length>
	</Parameters>
</ParamSection>

<Copyright SectVersion="1" SectionFlags="0" SubIdent="0">
	<Author>GRAPHISOFT</Author>
	<License>
		<Type>CC BY-ND</Type>
		<Version>3.0</Version>
	</License>
</Copyright>

</Symbol>
