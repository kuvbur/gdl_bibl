<?xml version="1.0" encoding="UTF-8"?>
<Symbol IsArchivable="false" IsPlaceable="false" MainGUID="D6778BC7-0C29-48F5-B0BF-243CF72879CB" MigrationValue="Normal" Owner="1196638531" Signature="1196644685" Version="38">
<Ancestry SectVersion="1" SectionFlags="0" SubIdent="0" Template="false">
	<MainGUID>F938E33A-329D-4A36-BE3E-85E126820996</MainGUID>
	<MainGUID>103E8D2C-8230-42E1-9597-46F84CCE28C0</MainGUID>
</Ancestry>

<CalledMacros SectVersion="2" SectionFlags="0" SubIdent="0">
</CalledMacros>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_3D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
pen gs_cont_pen
material "coreMat"
add -1, -1, -1
block 3,3,3
del 1

add 0.5,0.5,0.5

UnID = 1
rotz 45
for i = 1 to 4
	sinang	= sqr(2)*1.6*sin(aLayer1)
	cosang	= sqr(2)*1.6*cos(aLayer1)
	hotspot 0,		0,		1,	UnID,aLayer1, 6		: UnID = UnID +1
	hotspot 0,		1.6,	1,	UnID,aLayer1, 4+128	: UnID = UnID +1
	hotspot 0,		0,		-2,	UnID,aLayer1, 7		: UnID = UnID +1
	hotspot sinang, cosang,	1,	UnID,aLayer1, 5		: UnID = UnID +1
	
	sinang	= sqr(2)*1.6*sin(aLayer2)
	cosang	= sqr(2)*1.6*cos(aLayer2)
	hotspot 0,		0,		0,	UnID,aLayer2, 6		: UnID = UnID +1
	hotspot 0,		1.6,	0,	UnID,aLayer2, 4+128	: UnID = UnID +1
	hotspot 0,		0,		-2,	UnID,aLayer2, 7		: UnID = UnID +1
	hotspot sinang, cosang,	0,	UnID,aLayer2, 5		: UnID = UnID +1

	sinang	= sqr(2)*1.6*sin(aLayer3)
	cosang	= sqr(2)*1.6*cos(aLayer3)
	hotspot 0,		0,		-1,	UnID,aLayer3, 6		: UnID = UnID +1
	hotspot 0,		1.6,	-1,	UnID,aLayer3, 4+128	: UnID = UnID +1
	hotspot 0,		0,		-2,	UnID,aLayer3, 7		: UnID = UnID +1
	hotspot sinang, cosang,	-1,	UnID,aLayer3, 5		: UnID = UnID +1

	rotz 90
next i
del 4
del 1

roty -90
rotz 45
for i = 1 to 4
	sinang	= sqr(2)*1.6*sin(aColumn1)
	cosang	= sqr(2)*1.6*cos(aColumn1)
	hotspot 0,		0,		1,	UnID,aColumn1, 6		: UnID = UnID +1
	hotspot 0,		1.6,	1,	UnID,aColumn1, 4+128	: UnID = UnID +1
	hotspot 0,		0,		-2,	UnID,aColumn1, 7		: UnID = UnID +1
	hotspot sinang,	cosang,	1,	UnID,aColumn1, 5		: UnID = UnID +1
	
	sinang	= sqr(2)*1.6*sin(aColumn2)
	cosang	= sqr(2)*1.6*cos(aColumn2)
	hotspot 0,		0,		0,	UnID,aColumn2, 6		: UnID = UnID +1
	hotspot 0,		1.6,	0,	UnID,aColumn2, 4+128	: UnID = UnID +1
	hotspot 0,		0,		-2,	UnID,aColumn2, 7		: UnID = UnID +1
	hotspot sinang, cosang,	0,	UnID,aColumn2, 5		: UnID = UnID +1

	sinang	= sqr(2)*1.6*sin(aColumn3)
	cosang	= sqr(2)*1.6*cos(aColumn3)
	hotspot 0,		0,		-1,	UnID,aColumn3, 6		: UnID = UnID +1
	hotspot 0,		1.6,	-1,	UnID,aColumn3, 4+128	: UnID = UnID +1
	hotspot 0,		0,		-2,	UnID,aColumn3, 7		: UnID = UnID +1
	hotspot sinang, cosang,	-1,	UnID,aColumn3, 5		: UnID = UnID +1

	rotz 90
next i
del 4
del 2

rotx -90
rotz 45
for i = 1 to 4
	sinang	= sqr(2)*1.6*sin(aRow1)
	cosang	= sqr(2)*1.6*cos(aRow1)
	hotspot 0,		0,		1,	UnID,aRow1, 6		: UnID = UnID +1
	hotspot 0,		1.6,	1,	UnID,aRow1, 4+128	: UnID = UnID +1
	hotspot 0,		0,		-2,	UnID,aRow1, 7		: UnID = UnID +1
	hotspot sinang, cosang,	1,	UnID,aRow1, 5		: UnID = UnID +1
	
	sinang	= sqr(2)*1.6*sin(aRow2)
	cosang	= sqr(2)*1.6*cos(aRow2)
	hotspot 0,		0,		0,	UnID,aRow2, 6		: UnID = UnID +1
	hotspot 0,		1.6,	0,	UnID,aRow2, 4+128	: UnID = UnID +1
	hotspot 0,		0,		-2,	UnID,aRow2, 7		: UnID = UnID +1
	hotspot sinang, cosang,	0,	UnID,aRow2, 5		: UnID = UnID +1

	sinang	= sqr(2)*1.6*sin(aRow3)
	cosang	= sqr(2)*1.6*cos(aRow3)
	hotspot 0,		0,		-1,	UnID,aRow3, 6		: UnID = UnID +1
	hotspot 0,		1.6,	-1,	UnID,aRow3, 4+128	: UnID = UnID +1
	hotspot 0,		0,		-2,	UnID,aRow3, 7		: UnID = UnID +1
	hotspot sinang, cosang,	-1,	UnID,aRow3, 5		: UnID = UnID +1

	rotz 90
next i
del 4
del 2

del 1

dim _curentTileMat[3][3]

for side = 1 to 6
	if side = 1 then
		add -0.95, -1.01, 1.05
		_curentTileMat = frontSide
	else
		if side = 2 then
			rotz 90
			add -0.95, -2.01, 1.05
			_curentTileMat = rightSide
		else
			if side = 3 then
				rotz 90+90
				add -1.95, -2.01, 1.05
				_curentTileMat = rearSide
			else
				if side = 4 then
					rotz 90+90+90
					add -1.95, -1.01, 1.05
					_curentTileMat = leftSide
				else
					if side = 5 then
						rotx 90
						add -0.95, -1.01, 0.05
						_curentTileMat = bottomSide
					else
						if side = 6 then
							rotx -90
							add -0.95, -2.01, 1.05
							_curentTileMat = topside
						endif
					endif
				endif
			endif
		endif
	endif

	gosub "drawtiles"
	del 1
	if  side > 1 then del 1
next side

end

"drawtiles":
	rotx 90
	for i = 1 to 3
		for j = 1 to 3
			if _curentTileMat[i][j] = TILEMAT_RED		then material "redTileMat"
			if _curentTileMat[i][j] = TILEMAT_YELLOW	then material "yellowTileMat"
			if _curentTileMat[i][j] = TILEMAT_ORANGE	then material "orangeTileMat"
			if _curentTileMat[i][j] = TILEMAT_WHITE		then material "whiteTileMat"
			if _curentTileMat[i][j] = TILEMAT_GREEN		then material "greenTileMat"
			if _curentTileMat[i][j] = TILEMAT_BLUE		then material "blueTileMat"
!			if i = 1 and j = 1 then sphere 0.2
			poly 4, 0,0,0.9,0,0.9,0.9,0,0.9
			addx 1
		next j
		del 3
		addy -1
	next i
	del 3
	del 1
return



]]>
</Script_3D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_2D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_2D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_1D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
eps = 0.0001

DEFINE MATERIAL "coreMat" 3, 0, 0, 0
DEFINE MATERIAL "textmat" 3, 0, 0.6, 0.3

DEFINE MATERIAL "redTileMat" 3, 1, 0, 0
DEFINE MATERIAL "yellowTileMat" 3, 1, 1, 0
DEFINE MATERIAL "orangeTileMat" 3, 1, 0.5, 0
DEFINE MATERIAL "whiteTileMat" 3, 1, 1, 1
DEFINE MATERIAL "greenTileMat" 3, 0, 0.6, 0.3
DEFINE MATERIAL "blueTileMat" 3, 0, 0.3, 0.7

TILEMAT_RED		= 1
TILEMAT_YELLOW	= 2
TILEMAT_ORANGE	= 3
TILEMAT_WHITE	= 4
TILEMAT_GREEN	= 5
TILEMAT_BLUE	= 6
]]>
</Script_1D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_PR SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_PR>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_UI SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_UI>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_VL SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
values "aLayer1"	0, 90, 180, 270	: values "iLayer1"	0, 1, 2, 3
values "aLayer3"	0, 90, 180, 270	: values "iLayer3"	0, 1, 2, 3
values "aLayer2"	0, 90, 180, 270	: values "iLayer2"	0, 1, 2, 3

values "acolumn1"	0, 90, 180, 270	: values "icolumn1"	0, 1, 2, 3
values "acolumn2"	0, 90, 180, 270	: values "icolumn2"	0, 1, 2, 3
values "acolumn3"	0, 90, 180, 270	: values "icolumn3"	0, 1, 2, 3

values "arow1"		0, 90, 180, 270	: values "irow1"	0, 1, 2, 3
values "arow2"		0, 90, 180, 270	: values "irow2"	0, 1, 2, 3
values "arow3"		0, 90, 180, 270	: values "irow3"	0, 1, 2, 3

dim _side1[3]
dim _side2[3]
dim _side3[3]
dim _side4[3]
dim _fullSide[3][3]

if GLOB_MODPAR_NAME = "aLayer1" then
	isFirstRun = 0
	n = APPLICATION_QUERY ("parameter_script", "firstoccasion_in_progress", isFirstRun)

	if isFirstRun then
		if abs(aLayer1 - aLayer1prew) < eps then 
			iLayer1 = 0
		else
			if aLayer1 - aLayer1prew < eps then
				if abs(aLayer1 + 360 - aLayer1prew - 90) < eps then iLayer1 = 1
				if abs(aLayer1 + 360 - aLayer1prew - 180) < eps then iLayer1 = 2
				if abs(aLayer1 + 360 - aLayer1prew - 270) < eps then iLayer1 = 3
			else
				if abs(aLayer1 - aLayer1prew - 90) < eps then iLayer1 = 1
				if abs(aLayer1 - aLayer1prew - 180) < eps then iLayer1 = 2
				if abs(aLayer1 - aLayer1prew - 270) < eps then iLayer1 = 3
			endif
		endif

		if not(iLayer1 = 0) then
			_rotNum		= iLayer1
			gosub "layer1_rotation"
		endif
		aLayer1prew = aLayer1

		parameters	iLayer1		= iLayer1,
					aLayer1prew	= aLayer1prew

		if check then gosub "docheck"
	endif

	parameters	iLayer1		= iLayer1,
				aLayer1		= aLayer1,
				aLayer1prew	= aLayer1prew,
				frontSide	= frontSide,
				leftSide	= leftSide,
				rearSide	= rearSide,
				rightSide	= rightSide,
				topside		= topside,	
				bottomSide	= bottomSide
endif


if GLOB_MODPAR_NAME = "aLayer2" then
	isFirstRun = 0
	n = APPLICATION_QUERY ("parameter_script", "firstoccasion_in_progress", isFirstRun)

	if isFirstRun then
		if abs(aLayer2 - aLayer2prew) < eps then 
			iLayer2 = 0
		else
			if aLayer2 - aLayer2prew < eps then
				if abs(aLayer2 + 360 - aLayer2prew - 90) < eps then iLayer2 = 1
				if abs(aLayer2 + 360 - aLayer2prew - 180) < eps then iLayer2 = 2
				if abs(aLayer2 + 360 - aLayer2prew - 270) < eps then iLayer2 = 3
			else
				if abs(aLayer2 - aLayer2prew - 90) < eps then iLayer2 = 1
				if abs(aLayer2 - aLayer2prew - 180) < eps then iLayer2 = 2
				if abs(aLayer2 - aLayer2prew - 270) < eps then iLayer2 = 3
			endif
		endif

		if not(iLayer2 = 0) then
			_rotNum		= iLayer2
			gosub "layer2_rotation"
		endif
		aLayer2prew = aLayer2

		parameters	iLayer2		= iLayer2,
					aLayer2prew	= aLayer2prew

		if check then gosub "docheck"
	endif

	parameters	iLayer2		= iLayer2,
				aLayer2		= aLayer2,
				aLayer2prew	= aLayer2prew,
				frontSide	= frontSide,
				leftSide	= leftSide,
				rearSide	= rearSide,
				rightSide	= rightSide,
				topside		= topside,	
				bottomSide	= bottomSide
endif

if GLOB_MODPAR_NAME = "aLayer3" then
	isFirstRun = 0
	n = APPLICATION_QUERY ("parameter_script", "firstoccasion_in_progress", isFirstRun)

	if isFirstRun then
		if abs(aLayer3 - aLayer3prew) < eps then 
			iLayer3 = 0
		else
			if aLayer3 - aLayer3prew < eps then
				if abs(aLayer3 + 360 - aLayer3prew - 90) < eps	then iLayer3 = 1
				if abs(aLayer3 + 360 - aLayer3prew - 180) < eps	then iLayer3 = 2
				if abs(aLayer3 + 360 - aLayer3prew - 270) < eps	then iLayer3 = 3
			else
				if abs(aLayer3 - aLayer3prew - 90) < eps then iLayer3 = 1
				if abs(aLayer3 - aLayer3prew - 180) < eps then iLayer3 = 2
				if abs(aLayer3 - aLayer3prew - 270) < eps then iLayer3 = 3
			endif
		endif

		if not(iLayer3 = 0) then
			_rotNum		= iLayer3
			gosub "layer3_rotation"
		endif
		aLayer3prew = aLayer3

		parameters	iLayer3		= iLayer3,
					aLayer3prew	= aLayer3prew

		if check then gosub "docheck"
	endif

	parameters	iLayer3		= iLayer3,
				aLayer3		= aLayer3,
				aLayer3prew	= aLayer3prew,
				frontSide	= frontSide,
				leftSide	= leftSide,
				rearSide	= rearSide,
				rightSide	= rightSide,
				topside		= topside,	
				bottomSide	= bottomSide
endif

if GLOB_MODPAR_NAME = "aColumn1" then
	isFirstRun = 0
	n = APPLICATION_QUERY ("parameter_script", "firstoccasion_in_progress", isFirstRun)

	if isFirstRun then
		if abs(aColumn1 - aColumn1prew) < eps then 
			iColumn1 = 0
		else
			if aColumn1 - aColumn1prew < eps then
				if abs(aColumn1 + 360 - aColumn1prew - 90) < eps	then iColumn1 = 1
				if abs(aColumn1 + 360 - aColumn1prew - 180) < eps	then iColumn1 = 2
				if abs(aColumn1 + 360 - aColumn1prew - 270) < eps	then iColumn1 = 3
			else
				if abs(aColumn1 - aColumn1prew - 90) < eps	then iColumn1 = 1
				if abs(aColumn1 - aColumn1prew - 180) < eps	then iColumn1 = 2
				if abs(aColumn1 - aColumn1prew - 270) < eps	then iColumn1 = 3
			endif
		endif

		if not(iColumn1 = 0) then
			_rotNum		= iColumn1
			gosub "column1_rotation"
		endif
		aColumn1prew = aColumn1

		parameters	iColumn1		= iColumn1,
					aColumn1prew	= aColumn1prew

		if check then gosub "docheck"
	endif

	parameters	iColumn1		= iColumn1,
				aColumn1		= aColumn1,
				aColumn1prew	= aColumn1prew,
				frontSide		= frontSide,
				leftSide		= leftSide,
				rearSide		= rearSide,
				rightSide		= rightSide,
				topside			= topside,	
				bottomSide		= bottomSide
endif

if GLOB_MODPAR_NAME = "aColumn2" then
	isFirstRun = 0
	n = APPLICATION_QUERY ("parameter_script", "firstoccasion_in_progress", isFirstRun)

	if isFirstRun then
		if abs(aColumn2 - aColumn2prew) < eps then 
			iColumn2 = 0
		else
			if aColumn2 - aColumn2prew < eps then
				if abs(aColumn2 + 360 - aColumn2prew - 90) < eps then iColumn2 = 1
				if abs(aColumn2 + 360 - aColumn2prew - 180) < eps then iColumn2 = 2
				if abs(aColumn2 + 360 - aColumn2prew - 270) < eps then iColumn2 = 3
			else
				if abs(aColumn2 - aColumn2prew - 90) < eps then iColumn2 = 1
				if abs(aColumn2 - aColumn2prew - 180) < eps then iColumn2 = 2
				if abs(aColumn2 - aColumn2prew - 270) < eps then iColumn2 = 3
			endif
		endif

		if not(iColumn2 = 0) then
			_rotNum		= iColumn2
			gosub "column2_rotation"
		endif
		aColumn2prew = aColumn2

		parameters	iColumn2		= iColumn2,
					aColumn2prew	= aColumn2prew

		if check then gosub "docheck"
	endif

	parameters	iColumn2		= iColumn2,
				aColumn2		= aColumn2,
				aColumn2prew	= aColumn2prew,
				frontSide		= frontSide,
				leftSide		= leftSide,
				rearSide		= rearSide,
				rightSide		= rightSide,
				topside			= topside,	
				bottomSide		= bottomSide
endif

if GLOB_MODPAR_NAME = "aColumn3" then
	isFirstRun = 0
	n = APPLICATION_QUERY ("parameter_script", "firstoccasion_in_progress", isFirstRun)

	if isFirstRun then
		if abs(aColumn3 - aColumn3prew) < eps then 
			iColumn3 = 0
		else
			if aColumn3 - aColumn3prew < eps then
				if abs(aColumn3 + 360 - aColumn3prew - 90) < eps	then iColumn3 = 1
				if abs(aColumn3 + 360 - aColumn3prew - 180) < eps	then iColumn3 = 2
				if abs(aColumn3 + 360 - aColumn3prew - 270) < eps	then iColumn3 = 3
			else
				if abs(aColumn3 - aColumn3prew - 90) < eps		then iColumn3 = 1
				if abs(aColumn3 - aColumn3prew - 180) < eps		then iColumn3 = 2
				if abs(aColumn3 - aColumn3prew - 270) < eps		then iColumn3 = 3
			endif
		endif

		if not(iColumn3 = 0) then
			_rotNum		= iColumn3
			gosub "column3_rotation"
		endif
		aColumn3prew = aColumn3

		parameters	iColumn3		= iColumn3,
					aColumn3prew	= aColumn3prew

		if check then gosub "docheck"
	endif

	parameters	iColumn3		= iColumn3,
				aColumn3		= aColumn3,
				aColumn3prew	= aColumn3prew,
				frontSide		= frontSide,
				leftSide		= leftSide,
				rearSide		= rearSide,
				rightSide		= rightSide,
				topside			= topside,	
				bottomSide		= bottomSide
endif

if GLOB_MODPAR_NAME = "aRow1" then
	isFirstRun = 0
	n = APPLICATION_QUERY ("parameter_script", "firstoccasion_in_progress", isFirstRun)

	if isFirstRun then
		if abs(aRow1 - aRow1prew) < eps then 
			iRow1 = 0
		else
			if aRow1 - aRow1prew < eps then
				if abs(aRow1 + 360 - aRow1prew - 90) < eps then iRow1 = 1
				if abs(aRow1 + 360 - aRow1prew - 180) < eps then iRow1 = 2
				if abs(aRow1 + 360 - aRow1prew - 270) < eps then iRow1 = 3
			else
				if abs(aRow1 - aRow1prew - 90) < eps then iRow1 = 1
				if abs(aRow1 - aRow1prew - 180) < eps then iRow1 = 2
				if abs(aRow1 - aRow1prew - 270) < eps then iRow1 = 3
			endif
		endif

		if not(iRow1 = 0) then
			_rotNum		= iRow1
			gosub "row1_rotation"
		endif
		aRow1prew = aRow1

		parameters	iRow1		= iRow1,
					aRow1prew	= aRow1prew

		if check then gosub "docheck"
	endif

	parameters	iRow1		= iRow1,
				aRow1		= aRow1,
				aRow1prew	= aRow1prew,
				frontSide	= frontSide,
				leftSide	= leftSide,
				rearSide	= rearSide,
				rightSide	= rightSide,
				topside		= topside,	
				bottomSide	= bottomSide
endif

if GLOB_MODPAR_NAME = "aRow2" then
	isFirstRun = 0
	n = APPLICATION_QUERY ("parameter_script", "firstoccasion_in_progress", isFirstRun)

	if isFirstRun then
		if abs(aRow2 - aRow2prew) < eps then 
			iRow2 = 0
		else
			if aRow2 - aRow2prew < eps then
				if abs(aRow2 + 360 - aRow2prew - 90) < eps then iRow2 = 1
				if abs(aRow2 + 360 - aRow2prew - 180) < eps then iRow2 = 2
				if abs(aRow2 + 360 - aRow2prew - 270) < eps then iRow2 = 3
			else
				if abs(aRow2 - aRow2prew - 90) < eps then iRow2 = 1
				if abs(aRow2 - aRow2prew - 180) < eps then iRow2 = 2
				if abs(aRow2 - aRow2prew - 270) < eps then iRow2 = 3
			endif
		endif

		if not(iRow2 = 0) then
			_rotNum		= iRow2
			gosub "row2_rotation"
		endif
		aRow2prew = aRow2

		parameters	iRow2		= iRow2,
					aRow2prew	= aRow2prew

		if check then gosub "docheck"
	endif

	parameters	iRow2		= iRow2,
				aRow2		= aRow2,
				aRow2prew	= aRow2prew,
				frontSide	= frontSide,
				leftSide	= leftSide,
				rearSide	= rearSide,
				rightSide	= rightSide,
				topside		= topside,	
				bottomSide	= bottomSide
endif

if GLOB_MODPAR_NAME = "aRow3" then
	isFirstRun = 0
	n = APPLICATION_QUERY ("parameter_script", "firstoccasion_in_progress", isFirstRun)

	if isFirstRun then
		if abs(aRow3 - aRow3prew) < eps then 
			iRow3 = 0
		else
			if aRow3 - aRow3prew < eps then
				if abs(aRow3 + 360 - aRow3prew - 90) < eps	then iRow3 = 1
				if abs(aRow3 + 360 - aRow3prew - 180) < eps	then iRow3 = 2
				if abs(aRow3 + 360 - aRow3prew - 270) < eps	then iRow3 = 3
			else
				if abs(aRow3 - aRow3prew - 90) < eps		then iRow3 = 1
				if abs(aRow3 - aRow3prew - 180) < eps		then iRow3 = 2
				if abs(aRow3 - aRow3prew - 270) < eps		then iRow3 = 3
			endif
		endif

		if not(iRow3 = 0) then
			_rotNum		= iRow3
			gosub "row3_rotation"
		endif
		aRow3prew = aRow3

		parameters	iRow3		= iRow3,
					aRow3prew	= aRow3prew

		if check then gosub "docheck"
	endif

	parameters	iRow3		= iRow3,
				aRow3		= aRow3,
				aRow3prew	= aRow3prew,
				frontSide	= frontSide,
				leftSide	= leftSide,
				rearSide	= rearSide,
				rightSide	= rightSide,
				topside		= topside,	
				bottomSide	= bottomSide
endif

if GLOB_MODPAR_NAME = "mixup" then
	gosub "reset"

	ch	= OPEN ("DateTime", "", "%S")
	n	= INPUT (ch, "", "", dstr)
	CLOSE (ch)
	tmp = split(dstr, "%N", initrnd)

	for i = 1 to initrnd
		tmp	= rnd(1)
	next i

	mixupsteps = int(rnd(15)) + 1

	DIM mixuparray[][2]
	for i = 1 to 25 + mixupsteps
		mixuparray[i][1]	= int(rnd(9)) + 1
		mixuparray[i][2]	= int(rnd(3)) + 1

		if mixuparray[i][1] = 1 then
			_rotNum		= mixuparray[i][2]
			gosub "layer1_rotation"
		else
			if mixuparray[i][1] = 2 then
				_rotNum		= mixuparray[i][2]
				gosub "layer2_rotation"
			else
				if mixuparray[i][1] = 3 then
					_rotNum		= mixuparray[i][2]
					gosub "layer3_rotation"
				else
					if mixuparray[i][1] = 4 then
						_rotNum		= mixuparray[i][2]
						gosub "column1_rotation"
					else
						if mixuparray[i][1] = 5 then
							_rotNum		= mixuparray[i][2]
							gosub "column2_rotation"
						else
							if mixuparray[i][1] = 6 then
								_rotNum		= mixuparray[i][2]
								gosub "column3_rotation"
							else
								if mixuparray[i][1] = 7 then
									_rotNum		= mixuparray[i][2]
									gosub "row1_rotation"
								else
									if mixuparray[i][1] = 8 then
										_rotNum		= mixuparray[i][2]
										gosub "row2_rotation"
									else
										if mixuparray[i][1] = 8 then
											_rotNum		= mixuparray[i][2]
											gosub "row3_rotation"
										endif
									endif
								endif
							endif
						endif
					endif
				endif
			endif
		endif
	next i

	check = 1

	parameters	mixuparray	= mixuparray,
				frontSide	= frontSide,
				leftSide	= leftSide,
				rearSide	= rearSide,
				rightSide	= rightSide,
				topside		= topside,
				bottomSide	= bottomSide,
				check		= check,
				mixup		= 0
endif

if GLOB_MODPAR_NAME = "reset" then
	gosub "reset"
endif


end

"layer1_rotation":
	for sideRot = 1 to _rotNum
		_side1[1]	= frontSide[1][1]	: _side1[2]	= frontSide[1][2]	: _side1[3]	= frontSide[1][3]
		_side2[1]	= leftSide[1][1]	: _side2[2]	= leftSide[1][2]	: _side2[3]	= leftSide[1][3]
		_side3[1]	= rearSide[1][1]	: _side3[2]	= rearSide[1][2]	: _side3[3]	= rearSide[1][3]
		_side4[1]	= rightSide[1][1]	: _side4[2]	= rightSide[1][2]	: _side4[3]	= rightSide[1][3]
	
		gosub "layerRotate"
	
		frontSide[1][1]	= _side1[1] : frontSide[1][2]	= _side1[2] : frontSide[1][3]	= _side1[3]
		leftSide[1][1]	= _side2[1] : leftSide[1][2]	= _side2[2] : leftSide[1][3]	= _side2[3]
		rearSide[1][1]	= _side3[1] : rearSide[1][2]	= _side3[2] : rearSide[1][3]	= _side3[3]
		rightSide[1][1]	= _side4[1] : rightSide[1][2]	= _side4[2] : rightSide[1][3]	= _side4[3]
	next sideRot
	
	_fullSide	= topside
	gosub "sideRotate"
	topside	= _fullSide
return

"layer2_rotation":
	for sideRot = 1 to _rotNum
		_side1[1]	= frontSide[2][1]	: _side1[2]	= frontSide[2][2]	: _side1[3]	= frontSide[2][3]
		_side2[1]	= leftSide[2][1]	: _side2[2]	= leftSide[2][2]	: _side2[3]	= leftSide[2][3]
		_side3[1]	= rearSide[2][1]	: _side3[2]	= rearSide[2][2]	: _side3[3]	= rearSide[2][3]
		_side4[1]	= rightSide[2][1]	: _side4[2]	= rightSide[2][2]	: _side4[3]	= rightSide[2][3]
	
		gosub "layerRotate"
	
		frontSide[2][1]	= _side1[1] : frontSide[2][2]	= _side1[2] : frontSide[2][3]	= _side1[3]
		leftSide[2][1]	= _side2[1] : leftSide[2][2]	= _side2[2] : leftSide[2][3]	= _side2[3]
		rearSide[2][1]	= _side3[1] : rearSide[2][2]	= _side3[2] : rearSide[2][3]	= _side3[3]
		rightSide[2][1]	= _side4[1] : rightSide[2][2]	= _side4[2] : rightSide[2][3]	= _side4[3]
	next sideRot
return

"layer3_rotation":
	for sideRot = 1 to _rotNum
		_side1[1]	= frontSide[3][1]	: _side1[2]	= frontSide[3][2]	: _side1[3]	= frontSide[3][3]
		_side2[1]	= leftSide[3][1]	: _side2[2]	= leftSide[3][2]	: _side2[3]	= leftSide[3][3]
		_side3[1]	= rearSide[3][1]	: _side3[2]	= rearSide[3][2]	: _side3[3]	= rearSide[3][3]
		_side4[1]	= rightSide[3][1]	: _side4[2]	= rightSide[3][2]	: _side4[3]	= rightSide[3][3]
	
		gosub "layerRotate"
	
		frontSide[3][1]	= _side1[1] : frontSide[3][2]	= _side1[2] : frontSide[3][3]	= _side1[3]
		leftSide[3][1]	= _side2[1] : leftSide[3][2]	= _side2[2] : leftSide[3][3]	= _side2[3]
		rearSide[3][1]	= _side3[1] : rearSide[3][2]	= _side3[2] : rearSide[3][3]	= _side3[3]
		rightSide[3][1]	= _side4[1] : rightSide[3][2]	= _side4[2] : rightSide[3][3]	= _side4[3]
	next sideRot
	
	_fullSide	= bottomSide
	gosub "sideRotate_inverse"
	bottomSide	= _fullSide
return

"column1_rotation":
	for sideRot = 1 to _rotNum
		_side1[1]	= frontSide[1][1]	: _side1[2]	= frontSide[2][1]	: _side1[3]	= frontSide[3][1]
		_side2[1]	= bottomSide[1][1]	: _side2[2]	= bottomSide[2][1]	: _side2[3]	= bottomSide[3][1]
		_side3[1]	= rearSide[3][3]	: _side3[2]	= rearSide[2][3]	: _side3[3]	= rearSide[1][3]
		_side4[1]	= topside[1][1]		: _side4[2]	= topside[2][1]		: _side4[3]	= topside[3][1]
	
		gosub "layerRotate"
	
		frontSide[1][1]		= _side1[1] : frontSide[2][1]	= _side1[2] : frontSide[3][1]	= _side1[3]
		bottomSide[1][1]	= _side2[1] : bottomSide[2][1]	= _side2[2] : bottomSide[3][1]	= _side2[3]
		rearSide[3][3]		= _side3[1]	: rearSide[2][3]	= _side3[2] : rearSide[1][3]	= _side3[3]
		topside[1][1]		= _side4[1]	: topside[2][1]		= _side4[2] : topside[3][1]		= _side4[3]
	next sideRot

	_fullSide	= leftSide
	gosub "sideRotate"
	leftSide	= _fullSide
return

"column2_rotation":
	for sideRot = 1 to _rotNum
		_side1[1]	= frontSide[1][2]	: _side1[2]	= frontSide[2][2]	: _side1[3]	= frontSide[3][2]
		_side2[1]	= bottomSide[1][2]	: _side2[2]	= bottomSide[2][2]	: _side2[3]	= bottomSide[3][2]
		_side3[1]	= rearSide[3][2]	: _side3[2]	= rearSide[2][2]	: _side3[3]	= rearSide[1][2]
		_side4[1]	= topside[1][2]		: _side4[2]	= topside[2][2]		: _side4[3]	= topside[3][2]
	
		gosub "layerRotate"
	
		frontSide[1][2]		= _side1[1] : frontSide[2][2]	= _side1[2] : frontSide[3][2]	= _side1[3]
		bottomSide[1][2]	= _side2[1] : bottomSide[2][2]	= _side2[2] : bottomSide[3][2]	= _side2[3]
		rearSide[3][2]		= _side3[1]	: rearSide[2][2]	= _side3[2] : rearSide[1][2]	= _side3[3]
		topside[1][2]		= _side4[1]	: topside[2][2]		= _side4[2] : topside[3][2]		= _side4[3]
	next sideRot
return

"column3_rotation":
	for sideRot = 1 to _rotNum
		_side1[1]	= frontSide[1][3]	: _side1[2]	= frontSide[2][3]	: _side1[3]	= frontSide[3][3]
		_side2[1]	= bottomSide[1][3]	: _side2[2]	= bottomSide[2][3]	: _side2[3]	= bottomSide[3][3]
		_side3[1]	= rearSide[3][1]	: _side3[2]	= rearSide[2][1]	: _side3[3]	= rearSide[1][1]
		_side4[1]	= topside[1][3]		: _side4[2]	= topside[2][3]		: _side4[3]	= topside[3][3]
	
		gosub "layerRotate"
	
		frontSide[1][3]		= _side1[1] : frontSide[2][3]	= _side1[2] : frontSide[3][3]	= _side1[3]
		bottomSide[1][3]	= _side2[1] : bottomSide[2][3]	= _side2[2] : bottomSide[3][3]	= _side2[3]
		rearSide[3][1]		= _side3[1]	: rearSide[2][1]	= _side3[2] : rearSide[1][1]	= _side3[3]
		topside[1][3]		= _side4[1]	: topside[2][3]		= _side4[2] : topside[3][3]		= _side4[3]
	next sideRot
	
	_fullSide	= rightSide
	gosub "sideRotate_inverse"
	rightSide	= _fullSide
return

"row1_rotation":
	for sideRot = 1 to _rotNum
		_side1[1]	= topside[1][3]		: _side1[2]	= topside[1][2]		: _side1[3]	= topside[1][1]
		_side2[1]	= leftSide[1][1]	: _side2[2]	= leftSide[2][1]	: _side2[3]	= leftSide[3][1]
		_side3[1]	= bottomSide[3][3]	: _side3[2]	= bottomSide[3][2]	: _side3[3]	= bottomSide[3][1]
		_side4[1]	= rightSide[1][3]	: _side4[2]	= rightSide[2][3]	: _side4[3]	= rightSide[3][3]
	
		gosub "layerRotate"
	
		topside[1][1]		= _side1[1] : topside[1][2]		= _side1[2] : topside[1][3]		= _side1[3]
		leftSide[1][1]		= _side2[1] : leftSide[2][1]	= _side2[2] : leftSide[3][1]	= _side2[3]
		bottomSide[3][1]	= _side3[1] : bottomSide[3][2]	= _side3[2] : bottomSide[3][3]	= _side3[3]
		rightSide[1][3]		= _side4[1] : rightSide[2][3]	= _side4[2] : rightSide[3][3]	= _side4[3]
	next sideRot
	
	_fullSide	= rearSide
	gosub "sideRotate"
	rearSide	= _fullSide
return

"row2_rotation":
	for sideRot = 1 to _rotNum
		_side1[1]	= topside[2][3]		: _side1[2]	= topside[2][2]		: _side1[3]	= topside[2][1]
		_side2[1]	= leftSide[1][2]	: _side2[2]	= leftSide[2][2]	: _side2[3]	= leftSide[3][2]
		_side3[1]	= bottomSide[2][3]	: _side3[2]	= bottomSide[2][2]	: _side3[3]	= bottomSide[2][1]
		_side4[1]	= rightSide[1][2]	: _side4[2]	= rightSide[2][2]	: _side4[3]	= rightSide[3][2]
	
		gosub "layerRotate"
	
		topside[2][1]		= _side1[1] : topside[2][2]		= _side1[2] : topside[2][3]		= _side1[3]
		leftSide[1][2]		= _side2[1] : leftSide[2][2]	= _side2[2] : leftSide[3][2]	= _side2[3]
		bottomSide[2][1]	= _side3[1] : bottomSide[2][2]	= _side3[2] : bottomSide[2][3]	= _side3[3]
		rightSide[1][2]		= _side4[1] : rightSide[2][2]	= _side4[2] : rightSide[3][2]	= _side4[3]
	next sideRot

return

"row3_rotation":
	for sideRot = 1 to _rotNum
		_side1[1]	= topside[3][3]		: _side1[2]	= topside[3][2]		: _side1[3]	= topside[3][1]
		_side2[1]	= leftSide[1][3]	: _side2[2]	= leftSide[2][3]	: _side2[3]	= leftSide[3][3]
		_side3[1]	= bottomSide[1][3]	: _side3[2]	= bottomSide[1][2]	: _side3[3]	= bottomSide[1][1]
		_side4[1]	= rightSide[1][1]	: _side4[2]	= rightSide[2][1]	: _side4[3]	= rightSide[3][1]
	
		gosub "layerRotate"
	
		topside[3][1]		= _side1[1] : topside[3][2]		= _side1[2] : topside[3][3]		= _side1[3]
		leftSide[1][3]		= _side2[1] : leftSide[2][3]	= _side2[2] : leftSide[3][3]	= _side2[3]
		bottomSide[1][1]	= _side3[1] : bottomSide[1][2]	= _side3[2] : bottomSide[1][3]	= _side3[3]
		rightSide[1][1]		= _side4[1] : rightSide[2][1]	= _side4[2] : rightSide[3][1]	= _side4[3]
	next sideRot
	
	_fullSide	= frontSide
	gosub "sideRotate_inverse"
	frontSide	= _fullSide
return

"layerRotate":
	tempVar		= _side1[1]
	_side1[1]	= _side4[1]
	_side4[1]	= _side3[1]
	_side3[1]	= _side2[1]
	_side2[1]	= tempVar

	tempVar		= _side1[2]
	_side1[2]	= _side4[2]
	_side4[2]	= _side3[2]
	_side3[2]	= _side2[2]
	_side2[2]	= tempVar

	tempVar		= _side1[3]
	_side1[3]	= _side4[3]
	_side4[3]	= _side3[3]
	_side3[3]	= _side2[3]
	_side2[3]	= tempVar
return

"sideRotate":
	for sideRot = 1 to _rotNum
		tempVar			= _fullSide[3][3]
		_fullSide[3][3]	= _fullSide[1][3]
		_fullSide[1][3]	= _fullSide[1][1]
		_fullSide[1][1]	= _fullSide[3][1]
		_fullSide[3][1]	= tempVar
	
		tempVar			= _fullSide[3][2]
		_fullSide[3][2]	= _fullSide[2][3]
		_fullSide[2][3]	= _fullSide[1][2]
		_fullSide[1][2]	= _fullSide[2][1]
		_fullSide[2][1]	= tempVar
	next sideRot
return

"sideRotate_inverse":
	for sideRot = 1 to _rotNum
		tempVar			= _fullSide[3][3]
		_fullSide[3][3]	= _fullSide[3][1]
		_fullSide[3][1]	= _fullSide[1][1]
		_fullSide[1][1]	= _fullSide[1][3]
		_fullSide[1][3]	= tempVar
	
		tempVar			= _fullSide[3][2]
		_fullSide[3][2]	= _fullSide[2][1]
		_fullSide[2][1]	= _fullSide[1][2]
		_fullSide[1][2]	= _fullSide[2][3]
		_fullSide[2][3]	= tempVar
	next sideRot
return

"reset":
	for i = 1 to 3
		for j = 1 to 3
			frontSide[i][j]		= TILEMAT_RED
			leftSide[i][j]		= TILEMAT_YELLOW
			rearSide[i][j]		= TILEMAT_ORANGE
			rightSide[i][j]		= TILEMAT_WHITE
			topside[i][j]		= TILEMAT_GREEN
			bottomSide[i][j]	= TILEMAT_BLUE
		next j
	next i

	parameters	frontSide	= frontSide,
				leftSide	= leftSide,
				rearSide	= rearSide,
				rightSide	= rightSide,
				topside		= topside,
				bottomSide	= bottomSide

	aLayer1			= 0 : aLayer2		= 0 : aLayer3		= 0
	aLayer1prew		= 0 : aLayer2prew	= 0 : aLayer3prew	= 0
	iLayer1			= 0 : iLayer2		= 0 : iLayer3		= 0
	
	aColumn1		= 0 : aColumn2		= 0 : aColumn3		= 0
	aColumn1prew	= 0 : aColumn2prew	= 0 : aColumn3prew	= 0
	iColumn1		= 0 : iColumn2		= 0 : iColumn3		= 0
	
	aRow1			= 0 : aRow2			= 0 : aRow3			= 0
	aRow1prew		= 0 : aRow2prew		= 0 : aRow3prew		= 0
	iRow1			= 0 : iRow2			= 0 : iRow3			= 0

	parameters	aLayer1		= aLayer1, aLayer1prew		= aLayer1prew, iLayer1		= iLayer1,
				aLayer2		= aLayer2, aLayer2prew		= aLayer2prew, iLayer2		= iLayer2,
				aLayer3		= aLayer3, aLayer3prew		= aLayer3prew, iLayer3		= iLayer3,
				aColumn1	= aColumn1, aColumn1prew	= aColumn1prew, iColumn1	= iColumn1,
				aColumn2	= aColumn2, aColumn2prew	= aColumn2prew, iColumn2	= iColumn2,
				aColumn3	= aColumn3, aColumn3prew	= aColumn3prew, iColumn3	= iColumn3,
				aRow1		= aRow1, aRow1prew			= aRow1prew, iRow1			= iRow1,
				aRow2		= aRow2, aRow2prew			= aRow2prew, iRow2			= iRow2,
				aRow3		= aRow3, aRow3prew			= aRow3prew, iRow3			= iRow3


	reset		= 0
	check		= 0
	solvedside	= 0
	parameters	reset		= reset,
				check		= check,
				solvedside	= solvedside
return

"docheck":
	DIM testside[3][3]
	solvedside = 0

	testside = frontside
	gosub "sidechecker"

	testside = rightside
	gosub "sidechecker"

	testside = rearside
	gosub "sidechecker"

	testside = leftside
	gosub "sidechecker"

	testside = topside
	gosub "sidechecker"

	testside = bottomSide
	gosub "sidechecker"

	parameters solvedside = solvedside
return

"sidechecker":
	if testside[1][1] = testside[1][2] & \
		testside[1][1] = testside[1][3] & \
		testside[1][1] = testside[2][1] & \
		testside[1][1] = testside[2][2] & \
		testside[1][1] = testside[2][3] & \
		testside[1][1] = testside[3][1] & \
		testside[1][1] = testside[3][2] & \
		testside[1][1] = testside[3][3] then solvedside = solvedside + 1
return


]]>
</Script_VL>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_FWM SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_FWM>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_BWM SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_BWM>

<ParamSection SectVersion="26" SectionFlags="0" SubIdent="0">
	<ParamSectHeader>
		<Version>26</Version>
		<AutoHotspots>false</AutoHotspots>
		<StatBits>
			<STBit_FixSize/>
		</StatBits>
		<WDLeftFrame>0</WDLeftFrame>
		<WDRightFrame>0</WDRightFrame>
		<WDTopFrame>0</WDTopFrame>
		<WDBotFrame>0</WDBotFrame>
		<LayFlags>65535</LayFlags>
		<WDMirrorThickness>0</WDMirrorThickness>
		<WDWallInset>0</WDWallInset>
		<SymbolColor>0</SymbolColor>
	</ParamSectHeader>
	<Parameters>
		<Length Name="A">
			<Description><![CDATA["Dimension 1"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>3</Value>
		</Length>
		<Length Name="B">
			<Description><![CDATA["Dimension 2"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>3</Value>
		</Length>
		<Length Name="ZZYZX">
			<Description><![CDATA["Height"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>3</Value>
		</Length>
		<Boolean Name="AC_show2DHotspotsIn3D">
			<Description><![CDATA["Show 2D Hotspots in 3D"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Length Name="ac_bottomlevel">
			<Description><![CDATA["Bottom Level"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="ac_toplevel">
			<Description><![CDATA["Top Level"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<FillPattern Name="gs_fill_type">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>65</Value>
		</FillPattern>
		<PenColor Name="gs_fill_pen">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>19</Value>
		</PenColor>
		<PenColor Name="gs_back_pen">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>19</Value>
		</PenColor>
		<PenColor Name="gs_cont_pen">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</PenColor>
		<Boolean Name="mixup">
			<Description><![CDATA["Mixup"]]></Description>
			<Value>0</Value>
		</Boolean>
		<Integer Name="mixuparray">
			<Description><![CDATA["Mixup"]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<ArrayValues FirstDimension="1" SecondDimension="2">
				<AVal Column="1" Row="1">0</AVal>
				<AVal Column="2" Row="1">0</AVal>
			</ArrayValues>
		</Integer>
		<Boolean Name="reset">
			<Description><![CDATA["Reset"]]></Description>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="check">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Integer Name="solvedside">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Integer>

		<!-- Surfaces_title: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="Surfaces_title">
			<Description><![CDATA["Surfaces"]]></Description>
		</Title>
		<Integer Name="frontSide">
			<Description><![CDATA["Red Tile"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<ArrayValues FirstDimension="3" SecondDimension="3">
				<AVal Column="1" Row="1">1</AVal>
				<AVal Column="2" Row="1">1</AVal>
				<AVal Column="3" Row="1">1</AVal>
				<AVal Column="1" Row="2">1</AVal>
				<AVal Column="2" Row="2">1</AVal>
				<AVal Column="3" Row="2">1</AVal>
				<AVal Column="1" Row="3">1</AVal>
				<AVal Column="2" Row="3">1</AVal>
				<AVal Column="3" Row="3">1</AVal>
			</ArrayValues>
		</Integer>
		<Integer Name="leftSide">
			<Description><![CDATA["Yellow Tile"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<ArrayValues FirstDimension="3" SecondDimension="3">
				<AVal Column="1" Row="1">2</AVal>
				<AVal Column="2" Row="1">2</AVal>
				<AVal Column="3" Row="1">2</AVal>
				<AVal Column="1" Row="2">2</AVal>
				<AVal Column="2" Row="2">2</AVal>
				<AVal Column="3" Row="2">2</AVal>
				<AVal Column="1" Row="3">2</AVal>
				<AVal Column="2" Row="3">2</AVal>
				<AVal Column="3" Row="3">2</AVal>
			</ArrayValues>
		</Integer>
		<Integer Name="rearSide">
			<Description><![CDATA["Orange Tile"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<ArrayValues FirstDimension="3" SecondDimension="3">
				<AVal Column="1" Row="1">3</AVal>
				<AVal Column="2" Row="1">3</AVal>
				<AVal Column="3" Row="1">3</AVal>
				<AVal Column="1" Row="2">3</AVal>
				<AVal Column="2" Row="2">3</AVal>
				<AVal Column="3" Row="2">3</AVal>
				<AVal Column="1" Row="3">3</AVal>
				<AVal Column="2" Row="3">3</AVal>
				<AVal Column="3" Row="3">3</AVal>
			</ArrayValues>
		</Integer>
		<Integer Name="rightSide">
			<Description><![CDATA["White Tile"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<ArrayValues FirstDimension="3" SecondDimension="3">
				<AVal Column="1" Row="1">4</AVal>
				<AVal Column="2" Row="1">4</AVal>
				<AVal Column="3" Row="1">4</AVal>
				<AVal Column="1" Row="2">4</AVal>
				<AVal Column="2" Row="2">4</AVal>
				<AVal Column="3" Row="2">4</AVal>
				<AVal Column="1" Row="3">4</AVal>
				<AVal Column="2" Row="3">4</AVal>
				<AVal Column="3" Row="3">4</AVal>
			</ArrayValues>
		</Integer>
		<Integer Name="topside">
			<Description><![CDATA["Green Tile"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<ArrayValues FirstDimension="3" SecondDimension="3">
				<AVal Column="1" Row="1">5</AVal>
				<AVal Column="2" Row="1">5</AVal>
				<AVal Column="3" Row="1">5</AVal>
				<AVal Column="1" Row="2">5</AVal>
				<AVal Column="2" Row="2">5</AVal>
				<AVal Column="3" Row="2">5</AVal>
				<AVal Column="1" Row="3">5</AVal>
				<AVal Column="2" Row="3">5</AVal>
				<AVal Column="3" Row="3">5</AVal>
			</ArrayValues>
		</Integer>
		<Integer Name="bottomSide">
			<Description><![CDATA["Blue Tile"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<ArrayValues FirstDimension="3" SecondDimension="3">
				<AVal Column="1" Row="1">6</AVal>
				<AVal Column="2" Row="1">6</AVal>
				<AVal Column="3" Row="1">6</AVal>
				<AVal Column="1" Row="2">6</AVal>
				<AVal Column="2" Row="2">6</AVal>
				<AVal Column="3" Row="2">6</AVal>
				<AVal Column="1" Row="3">6</AVal>
				<AVal Column="2" Row="3">6</AVal>
				<AVal Column="3" Row="3">6</AVal>
			</ArrayValues>
		</Integer>

		<!-- movement: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="movement">
			<Description><![CDATA["Movement"]]></Description>
		</Title>
		<Angle Name="aLayer1">
			<Description><![CDATA["Layer 1"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0</Value>
		</Angle>
		<Angle Name="aLayer1prew">
			<Description><![CDATA["Layer 1"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Angle>
		<Integer Name="iLayer1">
			<Description><![CDATA["Layer 1"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Integer>
		<Angle Name="aLayer2">
			<Description><![CDATA["Layer 2"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0</Value>
		</Angle>
		<Angle Name="aLayer2prew">
			<Description><![CDATA["Layer 2"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Angle>
		<Integer Name="iLayer2">
			<Description><![CDATA["Layer 2"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Integer>
		<Angle Name="aLayer3">
			<Description><![CDATA["Layer 3"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0</Value>
		</Angle>
		<Angle Name="aLayer3prew">
			<Description><![CDATA["Layer 3"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Angle>
		<Integer Name="iLayer3">
			<Description><![CDATA["Layer 3"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Integer>
		<Angle Name="aColumn1">
			<Description><![CDATA["Column 1"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0</Value>
		</Angle>
		<Angle Name="aColumn1prew">
			<Description><![CDATA["Column 1"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Angle>
		<Integer Name="iColumn1">
			<Description><![CDATA["Column 1"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Integer>
		<Angle Name="aColumn2">
			<Description><![CDATA["Column 2"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0</Value>
		</Angle>
		<Angle Name="aColumn2prew">
			<Description><![CDATA["Column 2"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Angle>
		<Integer Name="iColumn2">
			<Description><![CDATA["Column 2"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Integer>
		<Angle Name="aColumn3">
			<Description><![CDATA["Column 3"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0</Value>
		</Angle>
		<Angle Name="aColumn3prew">
			<Description><![CDATA["Column 3"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Angle>
		<Integer Name="iColumn3">
			<Description><![CDATA["Column 3"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Integer>
		<Angle Name="aRow1">
			<Description><![CDATA["Row 1"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0</Value>
		</Angle>
		<Angle Name="aRow1prew">
			<Description><![CDATA["Row 1"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Angle>
		<Integer Name="iRow1">
			<Description><![CDATA["Row 1"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Integer>
		<Angle Name="aRow2">
			<Description><![CDATA["Row 2"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0</Value>
		</Angle>
		<Angle Name="aRow2prew">
			<Description><![CDATA["Row 2"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Angle>
		<Integer Name="iRow2">
			<Description><![CDATA["Row 2"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Integer>
		<Angle Name="aRow3">
			<Description><![CDATA["Row 3"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0</Value>
		</Angle>
		<Angle Name="aRow3prew">
			<Description><![CDATA["Row 3"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Angle>
		<Integer Name="iRow3">
			<Description><![CDATA["Row 3"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Integer>
	</Parameters>
</ParamSection>

<Copyright SectVersion="1" SectionFlags="0" SubIdent="0">
	<Author>GRAPHISOFT</Author>
	<License>
		<Type>CC BY-ND</Type>
		<Version>3.0</Version>
	</License>
</Copyright>

<Keywords SectVersion="1" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Keywords>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Comment SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Comment>

</Symbol>
