<?xml version="1.0" encoding="UTF-8"?>
<Symbol IsArchivable="true" IsPlaceable="false" MainGUID="36327679-6042-4D59-8591-1418D2031826" MigrationValue="Normal" Owner="1196638531" Signature="1196644685" Version="38">
<Ancestry SectVersion="1" SectionFlags="0" SubIdent="0" Template="false">
	<MainGUID>F938E33A-329D-4A36-BE3E-85E126820996</MainGUID>
	<MainGUID>103E8D2C-8230-42E1-9597-46F84CCE28C0</MainGUID>
	<MainGUID>C76BC373-89AE-4368-A490-BB2485825242</MainGUID>
</Ancestry>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_3D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
if gs_detlevel_3D_m = 0 then end

if not(gs_shadow) then shadow off

unID = tableTops_unID

if archedTableTop then
	iResol = gs_resol
else
	if GLOB_CONTEXT > 20 and GLOB_CONTEXT < 40 or gs_detlevel_3D_m = 1 then 		!! for Simple Model and in 3D Windoow
		if GLOB_CONTEXT > 20 and GLOB_CONTEXT < 40 then
			iResol = 3
		else
			iResol = 360 / (180 - tableTopAngle) * 3
		endif
	else
		iResol = gs_resol
	endif
endif

resol iResol

pen gs_cont_pen

! ======================================================================
! TableTop
! ======================================================================

material gs_top_mat

addz zzyzx - topThk

gosub "3DHotspots"

if iTableTopType = TTOP_L_SHAPED then	gosub "deskLShaped"
if iTableTopType = TTOP_STRAIGHT then	gosub "deskStraight"
if archedTableTop then					gosub "deskArched"
if iTableTopType = TTOP_RECT then		gosub "deskRectangle"

del 1

! ======================================================================
tableTops_unID = unID
end tableTops_unID
! ======================================================================

"deskLShaped":
	put	0, 0, 15,
		tableLength1, 0, 15,
		tableLength1, tableDepth1, 15

	if iInnerEdge = STRAIGHT then
		put	innerCornerPos, tableDepth1,	15
	else
		put	innerArcStartPos, tableDepth1, 15 + 64,
			innerEdgeRad, -(90 - tableTopAngle / 2) * 2, 2015
	endif

	put	xPosTopCorner, yPosTopCorner, 15,
		-xPosSideCorner, yPosSideCorner, 15

	prism_ NSP / 3, topThk,
			get(NSP)

return



"deskStraight":
	addx -extraDeskWidth / 2 * bCalledAsExtension
	prism_ 4, topThk,
		0, 0, 15,
		tableLength1, 0, 15,
		tableLength1, tableDepth1, 15,
		0, tableDepth1, 15
	del 1

return



"deskArched":
	rotz 60 * (iTableTopType = TTOP_ARCHED_360)

	if bPartColumnCut then
		put	-partColumnCutWidth, 0, 15,
			-partColumnCutWidth, -partColumnCutWidth, 15,
			0, -partColumnCutWidth, 15
	endif
	put	0, -b, 79,
		0, 0, 900,
		0, -tableTopAngle, 4015,
		b * (iTableTopType = TTOP_ARCHED_P_TOP) - partColumnCutWidth * bPartColumnCut, -b * (iTableTopType = TTOP_ARCHED_360 or iTableTopType = TTOP_ARCHED_P_TOP), 15

	prism_ NSP / 3, topThk,
			get(NSP)
	del 1

return



"deskRectangle":
	prism_ 4, topThk,
		-a / 2, -b / 2, 15,
		a / 2, -b / 2, 15,
		a / 2, b / 2, 15,
		-a / 2, b / 2, 15

return



"3DHotspots":
	addz topThk - zzyzx
		if iTableTopType = TTOP_L_SHAPED then
			if bEnableDeskHsCorner then
				hotspot 0, 0, zzyzx, unID:																unID = unID + 1
			endif
			if bEnableDeskHsHalfEdge then
				hotspot tableLength1 / 2, 0, zzyzx, unID:												unID = unID + 1
				hotspot -xPosSideCorner / 2, yPosSideCorner / 2, zzyzx, unID:							unID = unID + 1
			endif
			if bEnableDeskHsEditingX then
				hotspot 0, tableDepth1, zzyzx, unID, tableLength1, 1 + 128:								unID = unID + 1
				hotspot -tableLength1, tableDepth1, zzyzx, unID, tableLength1, 3 + 128:					unID = unID + 1
				hotspot tableLength1, tableDepth1, zzyzx, unID, tableLength1, 2:						unID = unID + 1

				hotspot 0, 0, zzyzx, unID, tableLength1, 1 + 128:										unID = unID + 1
				hotspot -tableLength1, 0, zzyzx, unID, tableLength1, 3 + 128:							unID = unID + 1
				hotspot tableLength1, 0, zzyzx, unID, tableLength1, 2:									unID = unID + 1
			endif
			if bEnableDeskHsEditingC then
				if iInnerEdge = STRAIGHT then
					hotspot 0, tableDepth1, zzyzx, unID, innerCornerPos, 1 + 128, tableDepth2:			unID = unID + 1
					hotspot -1, tableDepth1, zzyzx, unID, innerCornerPos, 3 + 128, tableDepth2:			unID = unID + 1
					hotspot innerCornerPos, tableDepth1, zzyzx, unID, innerCornerPos, 2, tableDepth2:	unID = unID + 1
					hotspot innerCornerPos, 0, zzyzx, unID, tableDepth1, 1 + 128:						unID = unID + 1
					hotspot innerCornerPos, -tableDepth1, zzyzx, unID, tableDepth1, 3 + 128:			unID = unID + 1
					hotspot innerCornerPos, tableDepth1, zzyzx, unID, tableDepth1, 2:					unID = unID + 1
				else
					hotspot innerArcStartPos, 0, zzyzx, unID, tableDepth1, 1 + 128:							unID = unID + 1
					hotspot innerArcStartPos, -1, zzyzx, unID, tableDepth1, 3 + 128:						unID = unID + 1
					hotspot innerArcStartPos, tableDepth1, zzyzx, unID, tableDepth1, 2:						unID = unID + 1
					hotspot 0, tableDepth1, zzyzx, unID, innerArcStartPos, 1 + 128, innerEdgeRad:			unID = unID + 1
					hotspot -1, tableDepth1, zzyzx, unID, innerArcStartPos, 3 + 128, innerEdgeRad:			unID = unID + 1
					hotspot innerArcStartPos, tableDepth1, zzyzx, unID, innerArcStartPos, 2, innerEdgeRad:	unID = unID + 1

					rotz tableTopAngle - 180
						hotspot -innerArcEndPos, 0, zzyzx, unID, tableDepth2, 1 + 128:						unID = unID + 1
						hotspot -innerArcEndPos, -1, zzyzx, unID, tableDepth2, 3 + 128:						unID = unID + 1
						hotspot -innerArcEndPos, tableDepth2, zzyzx, unID, tableDepth2, 2:					unID = unID + 1

						hotspot 0, tableDepth2, zzyzx, unID, innerArcEndPos, 1 + 128, innerEdgeRad: 		unID = unID + 1
						hotspot 1, tableDepth2, zzyzx, unID, innerArcEndPos, 3 + 128, innerEdgeRad: 		unID = unID + 1
						hotspot -innerArcEndPos, zzyzx, tableDepth2, unID, innerArcEndPos, 2, innerEdgeRad:	unID = unID + 1
					del 1
				endif
			endif
			if bEnableDeskHsEditingY then
				rotz tableTopAngle - 180
					hotspot -tableLength2, 0, zzyzx, unID, tableDepth2, 1 + 128:						unID = unID + 1
					hotspot -tableLength2, -tableDepth2, zzyzx, unID, tableDepth2, 3 + 128:				unID = unID + 1
					hotspot -tableLength2, tableDepth2, zzyzx, unID, tableDepth2, 2:					unID = unID + 1

					hotspot 0, tableDepth2, zzyzx, unID, tableLength2, 1 + 128:							unID = unID + 1
					hotspot tableLength2, tableDepth2, zzyzx, unID, tableLength2, 3 + 128:				unID = unID + 1
					hotspot -tableLength2, tableDepth2, zzyzx, unID, tableLength2, 2:					unID = unID + 1
				del 1

				hotspot tableLength1, 0, zzyzx, unID, tableDepth1, 1 + 128:								unID = unID + 1
				hotspot tableLength1, -tableDepth1, zzyzx, unID, tableDepth1, 3 + 128:					unID = unID + 1
				hotspot tableLength1, tableDepth1, zzyzx, unID, tableDepth1, 2:							unID = unID + 1

				hotspot 0, 0, zzyzx, unID, tableLength2, 1 + 128:										unID = unID + 1
				hotspot 1, -1, zzyzx, unID, tableLength2, 3 + 128: 										unID = unID + 1
				hotspot -xPosSideCorner, yPosSideCorner, zzyzx, unID, tableLength2, 2: 					unID = unID + 1
			endif
		endif

		if iTableTopType = TTOP_STRAIGHT then
			if NOT(bCalledAsExtension) then
				if NOT(bPartOfLayout) and NOT(bPartOfWsSolo) then
					if bEnableDeskHsEditingX then
						hotspot 0, 0, zzyzx, unID, a, 1 + 256:		unID = unID + 1
						hotspot -1, 0, zzyzx, unID, a, 3 + 128:		unID = unID + 1
						hotspot a, 0, zzyzx, unID, a, 2:			unID = unID + 1

						hotspot 0, b, zzyzx, unID, a, 1 + 256:		unID = unID + 1
						hotspot -1, b, zzyzx, unID, a, 3 + 128:		unID = unID + 1
						hotspot a, b, zzyzx, unID, a, 2:			unID = unID + 1
					endif
					if bEnableDeskHsEditingY then
						hotspot 0, 0, zzyzx, unID, b, 1 + 256:		unID = unID + 1
						hotspot 0, -1, zzyzx, unID, b, 3 + 128:		unID = unID + 1
						hotspot 0, b, zzyzx, unID, b, 2:			unID = unID + 1

						hotspot a, 0, zzyzx, unID, b, 1 + 256:		unID = unID + 1
						hotspot a, -1, zzyzx, unID, b, 3 + 128:		unID = unID + 1
						hotspot a, b, zzyzx, unID, b, 2:			unID = unID + 1
					endif

					hotspot a / 2, b / 2, zzyzx, unID:				unID = unID + 1

					if bEnableDeskHsHalfEdge then
						hotspot 0, b / 2, zzyzx, unID:				unID = unID + 1
						hotspot a, b / 2, zzyzx, unID:				unID = unID + 1
						hotspot a / 2, 0, zzyzx, unID:				unID = unID + 1
						hotspot a / 2, b, zzyzx, unID:				unID = unID + 1
					endif
				else
					if bPartOfWsSolo then
						if bEnableDeskHsEditingX then
							hotspot 0, 0, zzyzx, unID, tableLength1, 1 + 256:					unID = unID + 1
							hotspot -1, 0, zzyzx, unID, tableLength1, 3 + 128:					unID = unID + 1
							hotspot tableLength1, 0, zzyzx, unID, tableLength1, 2:				unID = unID + 1

							hotspot 0, tableDepth1, zzyzx, unID, tableLength1, 1 + 256:			unID = unID + 1
							hotspot -1, tableDepth1, zzyzx, unID, tableLength1, 3 + 128:		unID = unID + 1
							hotspot tableLength1, tableDepth1, zzyzx, unID, tableLength1, 2:	unID = unID + 1
						endif
						if bEnableDeskHsEditingY then
							hotspot 0, 0, zzyzx, unID, tableDepth1, 1 + 256:					unID = unID + 1
							hotspot 0, -1, zzyzx, unID, tableDepth1, 3 + 128:					unID = unID + 1
							hotspot 0, tableDepth1, zzyzx, unID, tableDepth1, 2:				unID = unID + 1

							hotspot tableLength1, 0, zzyzx, unID, tableDepth1, 1 + 256:			unID = unID + 1
							hotspot tableLength1, -1, zzyzx, unID, tableDepth1, 3 + 128:		unID = unID + 1
							hotspot tableLength1, tableDepth1, zzyzx, unID, tableDepth1, 2:		unID = unID + 1
						endif
					else
						if bEnableDeskHsEditingX then
							hotspot 0, 0, zzyzx, unID, tableLength1, 1 + 128:					unID = unID + 1
							hotspot -1, 0, zzyzx, unID, tableLength1, 3 + 128:					unID = unID + 1
							hotspot tableLength1, 0, zzyzx, unID, tableLength1, 2:				unID = unID + 1

							hotspot 0, tableDepth1, zzyzx, unID, tableLength1, 1 + 128:			unID = unID + 1
							hotspot -1, tableDepth1, zzyzx, unID, tableLength1, 3 + 128:		unID = unID + 1
							hotspot tableLength1, tableDepth1, zzyzx, unID, tableLength1, 2:	unID = unID + 1
						endif
						if bEnableDeskHsEditingY then
							hotspot 0, 0, zzyzx, unID, tableDepth1, 1 + 128:					unID = unID + 1
							hotspot 0, -1, zzyzx, unID, tableDepth1, 3 + 128:					unID = unID + 1
							hotspot 0, tableDepth1, zzyzx, unID, tableDepth1, 2:				unID = unID + 1
						endif
						if bEnableDeskHsEditingY then
							hotspot tableLength1, 0, zzyzx, unID, tableDepth1, 1 + 128:			unID = unID + 1
							hotspot tableLength1, -1, zzyzx, unID, tableDepth1, 3 + 128:		unID = unID + 1
							hotspot tableLength1, tableDepth1, zzyzx, unID, tableDepth1, 2:		unID = unID + 1
						endif
					endif
				endif
			else
				hotspot 0, extraDeskDepth, zzyzx, unID, halfExtraDeskWidth, 1 + 128, extraDeskWidth:				unID = unID + 1
				hotspot -1, extraDeskDepth, zzyzx, unID, halfExtraDeskWidth, 3, extraDeskWidth:						unID = unID + 1
				hotspot halfExtraDeskWidth, extraDeskDepth, zzyzx, unID, halfExtraDeskWidth, 2, extraDeskWidth:		unID = unID + 1
				hotspot halfExtraDeskWidth, 0, zzyzx, unID, extraDeskDepth, 1 + 128:								unID = unID + 1
				hotspot halfExtraDeskWidth, -extraDeskDepth, zzyzx, unID, extraDeskDepth, 3:						unID = unID + 1
				hotspot halfExtraDeskWidth, extraDeskDepth, zzyzx, unID, extraDeskDepth, 2:							unID = unID + 1

				hotspot 0, extraDeskDepth, zzyzx, unID, halfExtraDeskWidth, 1 + 128, extraDeskWidth:				unID = unID + 1
				hotspot 1, extraDeskDepth, zzyzx, unID, halfExtraDeskWidth, 3, extraDeskWidth:						unID = unID + 1
				hotspot -halfExtraDeskWidth, extraDeskDepth, zzyzx, unID, halfExtraDeskWidth, 2, extraDeskWidth:	unID = unID + 1
				hotspot -halfExtraDeskWidth, 0, zzyzx, unID, extraDeskDepth, 1 + 128:								unID = unID + 1
				hotspot -halfExtraDeskWidth, -extraDeskDepth, zzyzx, unID, extraDeskDepth, 3:						unID = unID + 1
				hotspot -halfExtraDeskWidth, extraDeskDepth, zzyzx, unID, extraDeskDepth, 2:						unID = unID + 1
			endif
		endif

		if archedTableTop and NOT(bPartOfLayout) and NOT(bPartOfWsSolo) then
			if iTableTopType <> TTOP_ARCHED_360 then
				hotspot 0, 0, zzyzx, unID:													unID = unID + 1
			else
				hotspot -b * SIN(tableTopAngle), -b * COS(tableTopAngle), zzyzx, unID:				unID = unID + 1
				hotspot -b * SIN(tableTopAngle - 60), -b * COS(tableTopAngle - 60), zzyzx, unID:	unID = unID + 1
			endif

			if iTableTopType = TTOP_ARCHED_P_TOP then
				hotspot b, -b, zzyzx, unID:													unID = unID + 1
			endif

			hotspot 0, 0, zzyzx, unID, b, 1 + 128:											unID = unID + 1
			hotspot 1, 0, zzyzx, unID, b, 3 + 128:											unID = unID + 1
			hotspot 0, -b, zzyzx, unID, b, 2:												unID = unID + 1

			if tableTopAngle > 135 then
				hotspot 0, 0, zzyzx, unID, b, 1 + 128:										unID = unID + 1
				hotspot 1, 0, zzyzx, unID, b, 3 + 128:										unID = unID + 1
				hotspot -b * SIN(90), -b * COS(90), zzyzx, unID, b, 2:						unID = unID + 1
			endif
			if tableTopAngle > 180 then
				hotspot 0, 0, zzyzx, unID, b, 1 + 128:										unID = unID + 1
				hotspot 1 - 2 * (tableTopAngle > 180), 0, zzyzx, unID, b, 3 + 128:			unID = unID + 1
				hotspot -b * SIN(180), -b * COS(180), zzyzx, unID, b, 2:					unID = unID + 1
			endif
			if iTableTopType <> TTOP_ARCHED_360 then
				hotspot 0, 0, zzyzx, unID, b, 1 + 128:										unID = unID + 1
				hotspot 1 - 2 * (tableTopAngle > 180), 0, zzyzx, unID, b, 3 + 128:			unID = unID + 1
				hotspot -b * SIN(tableTopAngle), -b * COS(tableTopAngle), zzyzx, unID, b, 2:unID = unID + 1
			endif
		endif

		if iTableTopType = TTOP_RECT and NOT(bPartOfLayout) and NOT(bPartOfWsSolo) then
			hotspot 0, 0, zzyzx, unID:								unID = unID + 1

			hotspot 0, halfB, zzyzx, unID, halfA, 1 + 128, a:		unID = unID + 1
			hotspot -halfA, halfB, zzyzx, unID, halfA, 3, a:		unID = unID + 1
			hotspot halfA, halfB, zzyzx, unID, halfA, 2, a:			unID = unID + 1

			hotspot halfA, 0, zzyzx, unID, halfB, 1 + 128, b:		unID = unID + 1
			hotspot halfA, -halfB, zzyzx, unID, halfB, 3, b:		unID = unID + 1
			hotspot halfA, halfB, zzyzx, unID, halfB, 2, b:			unID = unID + 1

			hotspot 0, -halfB, zzyzx, unID, halfA, 1 + 128, a:		unID = unID + 1
			hotspot -halfA, -halfB, zzyzx, unID, halfA, 3, a:		unID = unID + 1
			hotspot halfA, -halfB, zzyzx, unID, halfA, 2, a:		unID = unID + 1

			hotspot halfA, 0, zzyzx, unID, halfB, 1 + 128, b:		unID = unID + 1
			hotspot halfA, halfB, zzyzx, unID, halfB, 3, b:			unID = unID + 1
			hotspot halfA, -halfB, zzyzx, unID, halfB, 2, b:		unID = unID + 1

			hotspot 0, halfB, zzyzx, unID, halfA, 1 + 128, a:		unID = unID + 1
			hotspot halfA, halfB, zzyzx, unID, halfA, 3, a:			unID = unID + 1
			hotspot -halfA, halfB, zzyzx, unID, halfA, 2, a:		unID = unID + 1

			hotspot -halfA, 0, zzyzx, unID, halfB, 1 + 128, b:		unID = unID + 1
			hotspot -halfA, -halfB, zzyzx, unID, halfB, 3, b:		unID = unID + 1
			hotspot -halfA, halfB, zzyzx, unID, halfB, 2, b:		unID = unID + 1

			hotspot 0, -halfB, zzyzx, unID, halfA, 1 + 128, a:		unID = unID + 1
			hotspot halfA, -halfB, zzyzx, unID, halfA, 3, a:		unID = unID + 1
			hotspot -halfA, -halfB, zzyzx, unID, halfA, 2, a:		unID = unID + 1

			hotspot -halfA, 0, zzyzx, unID, halfB, 1 + 128, b:		unID = unID + 1
			hotspot -halfA, halfB, zzyzx, unID, halfB, 3, b:		unID = unID + 1
			hotspot -halfA, -halfB, zzyzx, unID, halfB, 2, b:		unID = unID + 1
		endif

		if archedTableTop and NOT(bPartOfLayout) and NOT(bPartOfWsSolo) and iTableTopType = TTOP_ARCHED_360 then
			hotspot 0, 0, zzyzx, unID:								unID = unID + 1
		endif

	del 1

return

]]>
</Script_3D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_2D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
unID = tableTops_unID

! ======================================================================
! Minimal Space
! ======================================================================

reqBMinSpace = 0
call "fa_minimalspace" parameters all MSType = 0, unID = 3000,
							returned_parameters reqBMinSpace,
												MSFillType,
												MSFillPen,
												MSFillBackPen,
												MSContLineType,
												MSContLinePen



! ======================================================================
! TableTop
! ======================================================================

pen gs_cont_pen
line_type 1
fill gs_fill_type
minSpaceUnID = 3000

gosub "2DHotspots"

if iTableTopType = TTOP_L_SHAPED then	gosub "deskLShaped"
if iTableTopType = TTOP_STRAIGHT then	gosub "deskStraight"
if archedTableTop then					gosub "deskArched"
if iTableTopType = TTOP_RECT then		gosub "deskRectangle"

if NOT(bPartOfLayout) then gosub "minimalSpace"

! ======================================================================
tableTops_unID = unID
end tableTops_unID
! ======================================================================

"deskLShaped":
	put	0, 0, 1,
		tableLength1, 0, 1,
		tableLength1, tableDepth1, 1

	if iInnerEdge = STRAIGHT then
		put	innerCornerPos, tableDepth1,	1
	else
		put	innerArcStartPos, tableDepth1,	1,
			innerEdgeRad, -(90 - tableTopAngle / 2) * 2, 2001
	endif

	put	xPosTopCorner, yPosTopCorner, 1,
		-xPosSideCorner, yPosSideCorner, 1

	poly2_b NSP / 3, 1+2+4+64, gs_fill_pen, gs_back_pen,
			get(NSP)

	hotline2 0, 0, tableLength1, 0
	hotline2 tableLength1, 0, tableLength1, tableDepth1
	if iInnerEdge = STRAIGHT then
		hotline2 tableLength1, tableDepth1, innerCornerPos, tableDepth1
		hotline2 innerCornerPos, tableDepth1, xPosTopCorner, yPosTopCorner
	else
		hotline2 tableLength1, tableDepth1, innerArcStartPos, tableDepth1
		hotarc2 innerArcStartPos, tableDepth1 + innerEdgeRad, innerEdgeRad, 270 - (90 - tableTopAngle / 2) * 2, -90
		hotline2 xPosAngleEnd, yPosAngleEnd, xPosTopCorner, yPosTopCorner
	endif
	hotline2 xPosTopCorner, yPosTopCorner, -xPosSideCorner, yPosSideCorner
	hotline2 -xPosSideCorner, yPosSideCorner, 0, 0

return



"deskStraight":
	add2 -extraDeskWidth / 2 * bCalledAsExtension, 0
	poly2_b 4, 1+2+4+64, gs_fill_pen, gs_back_pen,
		0, 0, 1,
		tableLength1, 0, 1,
		tableLength1, tableDepth1, 1,
		0, tableDepth1, 1

	hotline2 0, 0, tableLength1, 0
	hotline2 0, 0, 0, tableDepth1
	hotline2 tableLength1, 0, tableLength1, tableDepth1
	hotline2 0, tableDepth1, tableLength1, tableDepth1
	del 1

return



"deskArched":
	if iTableTopType = TTOP_ARCHED_P_TOP then
		hotline2 0, -b, b, -b
		hotline2 b, 0, b, -b
	endif
	if iTableTopType = TTOP_ARCHED_360 then
		hotline2 b * SIN(60), -b * COS(60), b * SIN(60), b * COS(60)
	endif

	rot2 60 * (iTableTopType = TTOP_ARCHED_360)
	hotarc2 0, 0, b, 270 - tableTopAngle, 270

	if bPartColumnCut then
		put	-partColumnCutWidth, 0, 1,
			-partColumnCutWidth, -partColumnCutWidth, 1,
			0, -partColumnCutWidth, 1
	endif
	put	0, -b, 1,
		0, 0, 900,
		0, -tableTopAngle, 4001,
		b * (iTableTopType = TTOP_ARCHED_P_TOP) - partColumnCutWidth * bPartColumnCut, -b * (iTableTopType = TTOP_ARCHED_360 or iTableTopType = TTOP_ARCHED_P_TOP), 1

	poly2_b NSP / 3, 1+2+4+64, gs_fill_pen, gs_back_pen,
			get(NSP)
	del 1

	hotline2 0, 0, 0, -b
	hotline2 0, 0, -SIN(tableTopAngle) * b, -COS(tableTopAngle) * b

return



"deskRectangle":
	poly2_b 4, 1+2+4+64, gs_fill_pen, gs_back_pen,
		-a / 2, -b / 2, 1,
		a / 2, -b / 2, 1,
		a / 2, b / 2, 1,
		-a / 2, b / 2, 1

	hotline2 -a / 2, -b / 2, a / 2, -b / 2
	hotline2 a / 2, -b / 2, a / 2, b / 2
	hotline2 a / 2, b / 2, -a / 2, b / 2
	hotline2 -a / 2, b / 2, -a / 2, -b / 2

return



"2DHotspots":
	if iTableTopType = TTOP_L_SHAPED then
		if bEnableDeskHsCorner then
			hotspot2 0, 0, unID:																unID = unID + 1
		endif
		if bEnableDeskHsHalfEdge then
			hotspot2 tableLength1 / 2, 0, unID:													unID = unID + 1
			hotspot2 -xPosSideCorner / 2, yPosSideCorner / 2, unID:								unID = unID + 1
		endif
		if bEnableDeskHsEditingX then
			hotspot2 0, tableDepth1, unID, tableLength1, 1 + 128:								unID = unID + 1
			hotspot2 -tableLength1, tableDepth1, unID, tableLength1, 3 + 128:					unID = unID + 1
			hotspot2 tableLength1, tableDepth1, unID, tableLength1, 2:							unID = unID + 1

			hotspot2 0, 0, unID, tableLength1, 1 + 128:											unID = unID + 1
			hotspot2 -tableLength1, 0, unID, tableLength1, 3 + 128:								unID = unID + 1
			hotspot2 tableLength1, 0, unID, tableLength1, 2:									unID = unID + 1
		endif
		if bEnableDeskHsEditingC then
			if iInnerEdge = STRAIGHT then
				hotspot2 innerCornerPos, 0, unID, tableDepth1, 1 + 128:							unID = unID + 1
				hotspot2 innerCornerPos, -1, unID, tableDepth1, 3 + 128:						unID = unID + 1
				hotspot2 innerCornerPos, tableDepth1, unID, tableDepth1, 2:						unID = unID + 1
				hotspot2 0, tableDepth1, unID, innerCornerPos, 1 + 128, tableDepth2:			unID = unID + 1
				hotspot2 -1, tableDepth1, unID, innerCornerPos, 3 + 128, tableDepth2:			unID = unID + 1
				hotspot2 innerCornerPos, tableDepth1, unID, innerCornerPos, 2, tableDepth2:		unID = unID + 1
			else
				hotspot2 innerArcStartPos, 0, unID, tableDepth1, 1 + 128:							unID = unID + 1
				hotspot2 innerArcStartPos, -1, unID, tableDepth1, 3 + 128:							unID = unID + 1
				hotspot2 innerArcStartPos, tableDepth1, unID, tableDepth1, 2:						unID = unID + 1
				hotspot2 0, tableDepth1, unID, innerArcStartPos, 1 + 128, innerEdgeRad:				unID = unID + 1
				hotspot2 -1, tableDepth1, unID, innerArcStartPos, 3 + 128, innerEdgeRad:			unID = unID + 1
				hotspot2 innerArcStartPos, tableDepth1, unID, innerArcStartPos, 2, innerEdgeRad:	unID = unID + 1

				rot2 tableTopAngle - 180
					hotspot2 -innerArcEndPos, 0, unID, tableDepth2, 1 + 128:						unID = unID + 1
					hotspot2 -innerArcEndPos, -1, unID, tableDepth2, 3 + 128:						unID = unID + 1
					hotspot2 -innerArcEndPos, tableDepth2, unID, tableDepth2, 2:					unID = unID + 1

					hotspot2 0, tableDepth2, unID, innerArcEndPos, 1 + 128, innerEdgeRad: 			unID = unID + 1
					hotspot2 1, tableDepth2, unID, innerArcEndPos, 3 + 128, innerEdgeRad: 			unID = unID + 1
					hotspot2 -innerArcEndPos, tableDepth2, unID, innerArcEndPos, 2, innerEdgeRad:	unID = unID + 1
				del 1
			endif
		endif
		if bEnableDeskHsEditingY then
			rot2 tableTopAngle - 180
				hotspot2 -tableLength2, 0, unID, tableDepth2, 1 + 128:							unID = unID + 1
				hotspot2 -tableLength2, -tableDepth2, unID, tableDepth2, 3 + 128:				unID = unID + 1
				hotspot2 -tableLength2, tableDepth2, unID, tableDepth2, 2:						unID = unID + 1

				hotspot2 0, tableDepth2, unID, tableLength2, 1 + 128:							unID = unID + 1
				hotspot2 tableLength2, tableDepth2, unID, tableLength2, 3 + 128:				unID = unID + 1
				hotspot2 -tableLength2, tableDepth2, unID, tableLength2, 2:						unID = unID + 1
			del 1

			hotspot2 tableLength1, 0, unID, tableDepth1, 1 + 128:								unID = unID + 1
			hotspot2 tableLength1, -tableDepth1, unID, tableDepth1, 3 + 128:					unID = unID + 1
			hotspot2 tableLength1, tableDepth1, unID, tableDepth1, 2:							unID = unID + 1

			hotspot2 0, 0, unID, tableLength2, 1 + 128:											unID = unID + 1
			hotspot2 1, -1, unID, tableLength2, 3 + 128: 										unID = unID + 1
			hotspot2 -xPosSideCorner, yPosSideCorner, unID, tableLength2, 2: 					unID = unID + 1
		endif
	endif

	if iTableTopType = TTOP_STRAIGHT then
		if NOT(bCalledAsExtension) then
			if NOT(bPartOfLayout) and NOT(bPartOfWsSolo) then
				if bEnableDeskHsEditingX then
					hotspot2 0, 0, unID, a, 1 + 256:			unID = unID + 1
					hotspot2 -1, 0, unID, a, 3 + 128:			unID = unID + 1
					hotspot2 a, 0, unID, a, 2:					unID = unID + 1

					hotspot2 0, b, unID, a, 1 + 256:			unID = unID + 1
					hotspot2 -1, b, unID, a, 3 + 128:			unID = unID + 1
					hotspot2 a, b, unID, a, 2:					unID = unID + 1
				endif
				if bEnableDeskHsEditingY then
					hotspot2 0, 0, unID, b, 1 + 256:			unID = unID + 1
					hotspot2 0, -1, unID, b, 3 + 128:			unID = unID + 1
					hotspot2 0, b, unID, b, 2:					unID = unID + 1

					hotspot2 a, 0, unID, b, 1 + 256:			unID = unID + 1
					hotspot2 a, -1, unID, b, 3 + 128:			unID = unID + 1
					hotspot2 a, b, unID, b, 2:					unID = unID + 1
				endif

				hotspot2 a / 2, b / 2, unID:					unID = unID + 1

				if bEnableDeskHsHalfEdge then
					hotspot2 0, b / 2, unID:					unID = unID + 1
					hotspot2 a, b / 2, unID:					unID = unID + 1
					hotspot2 a / 2, 0, unID:					unID = unID + 1
					hotspot2 a / 2, b, unID:					unID = unID + 1
				endif
			else
				if bPartOfWsSolo then
					if bEnableDeskHsEditingX then
						hotspot2 0, 0, unID, tableLength1, 1 + 256:					unID = unID + 1
						hotspot2 -1, 0, unID, tableLength1, 3 + 128:				unID = unID + 1
						hotspot2 tableLength1, 0, unID, tableLength1, 2:			unID = unID + 1

						hotspot2 0, tableDepth1, unID, tableLength1, 1 + 256:		unID = unID + 1
						hotspot2 -1, tableDepth1, unID, tableLength1, 3 + 128:		unID = unID + 1
						hotspot2 tableLength1, tableDepth1, unID, tableLength1, 2:	unID = unID + 1
					endif
					if bEnableDeskHsEditingY then
						hotspot2 0, 0, unID, tableDepth1, 1 + 256:					unID = unID + 1
						hotspot2 0, -1, unID, tableDepth1, 3 + 128:					unID = unID + 1
						hotspot2 0, tableDepth1, unID, tableDepth1, 2:				unID = unID + 1

						hotspot2 tableLength1, 0, unID, tableDepth1, 1 + 256:		unID = unID + 1
						hotspot2 tableLength1, -1, unID, tableDepth1, 3 + 128:		unID = unID + 1
						hotspot2 tableLength1, tableDepth1, unID, tableDepth1, 2:	unID = unID + 1
					endif
				else
					if bEnableDeskHsEditingX then
						hotspot2 0, 0, unID, tableLength1, 1 + 128:					unID = unID + 1
						hotspot2 -1, 0, unID, tableLength1, 3 + 128:				unID = unID + 1
						hotspot2 tableLength1, 0, unID, tableLength1, 2:			unID = unID + 1

						hotspot2 0, tableDepth1, unID, tableLength1, 1 + 128:		unID = unID + 1
						hotspot2 -1, tableDepth1, unID, tableLength1, 3 + 128:		unID = unID + 1
						hotspot2 tableLength1, tableDepth1, unID, tableLength1, 2:	unID = unID + 1
					endif
					if bEnableDeskHsEditingY then
						hotspot2 0, 0, unID, tableDepth1, 1 + 128:					unID = unID + 1
						hotspot2 0, -1, unID, tableDepth1, 3 + 128:					unID = unID + 1
						hotspot2 0, tableDepth1, unID, tableDepth1, 2:				unID = unID + 1
					endif
					if bEnableDeskHsEditingY then
						hotspot2 tableLength1, 0, unID, tableDepth1, 1 + 128:		unID = unID + 1
						hotspot2 tableLength1, -1, unID, tableDepth1, 3 + 128:		unID = unID + 1
						hotspot2 tableLength1, tableDepth1, unID, tableDepth1, 2:	unID = unID + 1
					endif
				endif
			endif
		else
			hotspot2 0, extraDeskDepth, unID, halfExtraDeskWidth, 1 + 128, extraDeskWidth:				unID = unID + 1
			hotspot2 -1, extraDeskDepth, unID, halfExtraDeskWidth, 3, extraDeskWidth:					unID = unID + 1
			hotspot2 halfExtraDeskWidth, extraDeskDepth, unID, halfExtraDeskWidth, 2, extraDeskWidth:	unID = unID + 1
			hotspot2 halfExtraDeskWidth, 0, unID, extraDeskDepth, 1 + 128:								unID = unID + 1
			hotspot2 halfExtraDeskWidth, -extraDeskDepth, unID, extraDeskDepth, 3:						unID = unID + 1
			hotspot2 halfExtraDeskWidth, extraDeskDepth, unID, extraDeskDepth, 2:						unID = unID + 1

			hotspot2 0, extraDeskDepth, unID, halfExtraDeskWidth, 1 + 128, extraDeskWidth:				unID = unID + 1
			hotspot2 1, extraDeskDepth, unID, halfExtraDeskWidth, 3, extraDeskWidth:					unID = unID + 1
			hotspot2 -halfExtraDeskWidth, extraDeskDepth, unID, halfExtraDeskWidth, 2, extraDeskWidth:	unID = unID + 1
			hotspot2 -halfExtraDeskWidth, 0, unID, extraDeskDepth, 1 + 128:								unID = unID + 1
			hotspot2 -halfExtraDeskWidth, -extraDeskDepth, unID, extraDeskDepth, 3:						unID = unID + 1
			hotspot2 -halfExtraDeskWidth, extraDeskDepth, unID, extraDeskDepth, 2:						unID = unID + 1
		endif
	endif

	if archedTableTop and NOT(bPartOfLayout) and NOT(bPartOfWsSolo) then
		if iTableTopType <> TTOP_ARCHED_360 then
			hotspot2 0, 0, unID:														unID = unID + 1
		else
			hotspot2 -b * SIN(tableTopAngle), -b * COS(tableTopAngle), unID:			unID = unID + 1
			hotspot2 -b * SIN(tableTopAngle - 60), -b * COS(tableTopAngle - 60), unID:	unID = unID + 1
		endif

		if iTableTopType = TTOP_ARCHED_P_TOP then
			hotspot2 b, -b, unID:														unID = unID + 1
		endif

		hotspot2 0, 0, unID, b, 1 + 128:												unID = unID + 1
		hotspot2 1, 0, unID, b, 3 + 128:												unID = unID + 1
		hotspot2 0, -b, unID, b, 2:														unID = unID + 1

		if tableTopAngle > 135 then
			hotspot2 0, 0, unID, b, 1 + 128:											unID = unID + 1
			hotspot2 1, 0, unID, b, 3 + 128:											unID = unID + 1
			hotspot2 -b * SIN(90), -b * COS(90), unID, b, 2:							unID = unID + 1
		endif
		if tableTopAngle > 180 then
			hotspot2 0, 0, unID, b, 1 + 128:	unID = unID + 1
			hotspot2 1 - 2 * (tableTopAngle > 180), 0, unID, b, 3 + 128:				unID = unID + 1
			hotspot2 -b * SIN(180), -b * COS(180), unID, b, 2:							unID = unID + 1
		endif
		if iTableTopType <> TTOP_ARCHED_360 then
			hotspot2 0, 0, unID, b, 1 + 128:	unID = unID + 1
			hotspot2 1 - 2 * (tableTopAngle > 180), 0, unID, b, 3 + 128:				unID = unID + 1
			hotspot2 -b * SIN(tableTopAngle), -b * COS(tableTopAngle), unID, b, 2:		unID = unID + 1
		endif
	endif

	if iTableTopType = TTOP_RECT and NOT(bPartOfLayout) and NOT(bPartOfWsSolo) then
		hotspot2 0, 0, unID:							unID = unID + 1

		hotspot2 0, halfB, unID, halfA, 1 + 128, a:		unID = unID + 1
		hotspot2 -halfA, halfB, unID, halfA, 3, a:		unID = unID + 1
		hotspot2 halfA, halfB, unID, halfA, 2, a:		unID = unID + 1
		hotspot2 halfA, 0, unID, halfB, 1 + 128, b:		unID = unID + 1
		hotspot2 halfA, -halfB, unID, halfB, 3, b:		unID = unID + 1
		hotspot2 halfA, halfB, unID, halfB, 2, b:		unID = unID + 1

		hotspot2 0, -halfB, unID, halfA, 1 + 128, a:	unID = unID + 1
		hotspot2 -halfA, -halfB, unID, halfA, 3, a:		unID = unID + 1
		hotspot2 halfA, -halfB, unID, halfA, 2, a:		unID = unID + 1
		hotspot2 halfA, 0, unID, halfB, 1 + 128, b:		unID = unID + 1
		hotspot2 halfA, halfB, unID, halfB, 3, b:		unID = unID + 1
		hotspot2 halfA, -halfB, unID, halfB, 2, b:		unID = unID + 1

		hotspot2 0, halfB, unID, halfA, 1 + 128, a:		unID = unID + 1
		hotspot2 halfA, halfB, unID, halfA, 3, a:		unID = unID + 1
		hotspot2 -halfA, halfB, unID, halfA, 2, a:		unID = unID + 1
		hotspot2 -halfA, 0, unID, halfB, 1 + 128, b:	unID = unID + 1
		hotspot2 -halfA, -halfB, unID, halfB, 3, b:		unID = unID + 1
		hotspot2 -halfA, halfB, unID, halfB, 2, b:		unID = unID + 1

		hotspot2 0, -halfB, unID, halfA, 1 + 128, a:	unID = unID + 1
		hotspot2 halfA, -halfB, unID, halfA, 3, a:		unID = unID + 1
		hotspot2 -halfA, -halfB, unID, halfA, 2, a:		unID = unID + 1
		hotspot2 -halfA, 0, unID, halfB, 1 + 128, b:	unID = unID + 1
		hotspot2 -halfA, halfB, unID, halfB, 3, b:		unID = unID + 1
		hotspot2 -halfA, -halfB, unID, halfB, 2, b:		unID = unID + 1
	endif

	if archedTableTop and NOT(bPartOfLayout) and NOT(bPartOfWsSolo) and iTableTopType = TTOP_ARCHED_360 then
		hotspot2 0, 0, unID:							unID = unID + 1
	endif

return

"minimalSpace":
	if MSFront > EPS and reqBMinSpace <> 0 then
		drawindex 10
		FILL MSFillType
		pen MSContLinePen
		line_type MSContLineType

		if iTableTopType = TTOP_L_SHAPED then
			if bPartOfWsSolo then
				hotspot2 innerCornerPos + MSSide, tableDepth1 + MSFront, minSpaceUnID : minSpaceUnID = minSpaceUnID + 1
				hotspot2 innerCornerPos + MSFront / TAN(tableTopAngle / 2), tableDepth1 + MSFront, minSpaceUnID : minSpaceUnID = minSpaceUnID + 1
				hotspot2 innerCornerPos - MSSide2 * COS(180 - tableTopAngle) + MSFront * SIN(180 - tableTopAngle), tableDepth1 + MSSide2 * SIN(180 - tableTopAngle) + MSFront * COS(180 - tableTopAngle), minSpaceUnID : minSpaceUnID = minSpaceUnID + 1

				if MSSide > tableLength1 - innerCornerPos then
					hotspot2 innerCornerPos + MSSide, tableDepth1, minSpaceUnID : minSpaceUnID = minSpaceUnID + 1
					put tableLength1, tableDepth1, 1
				endif

				put innerCornerPos + MSSide, tableDepth1, 1,
					innerCornerPos + MSSide, tableDepth1 + MSFront, 1,
					innerCornerPos + MSFront / TAN(tableTopAngle / 2), tableDepth1 + MSFront, 1,
					innerCornerPos - MSSide2 * COS(180 - tableTopAngle) + MSFront * SIN(180 - tableTopAngle), tableDepth1 + MSSide2 * SIN(180 - tableTopAngle) + MSFront * COS(180 - tableTopAngle), 1,
					innerCornerPos - MSSide2 * COS(180 - tableTopAngle), tableDepth1 + MSSide2 * SIN(180 - tableTopAngle), MSSide2 > SQR((innerCornerPos - xPosTopCorner) ** 2 + (yPosTopCorner - tableDepth1) ** 2)

				if MSSide2 > SQR((innerCornerPos - xPosTopCorner) ** 2 + (yPosTopCorner - tableDepth1) ** 2) then
					hotspot2 innerCornerPos - MSSide2 * COS(180 - tableTopAngle), tableDepth1 + MSSide2 * SIN(180 - tableTopAngle), minSpaceUnID : minSpaceUnID = minSpaceUnID + 1
					put xPosTopCorner, yPosTopCorner, 0
				endif
			endif
			if NOT(bPartOfLayout) and NOT(bPartOfWsSolo) then
				if tableTopAngle = 90 then
					if tableDepth2 + MSFront < tableLength1 then
						hotspot2 tableLength1, tableDepth1 + MSFront, minSpaceUnID : minSpaceUnID = minSpaceUnID + 1
					else
						hotspot2 tableDepth2 + MSFront, tableDepth1 + MSFront, minSpaceUnID : minSpaceUnID = minSpaceUnID + 1
						hotspot2 tableDepth2 + MSFront, tableDepth1, minSpaceUnID : minSpaceUnID = minSpaceUnID + 1
					endif
					if tableDepth1 + MSFront < tableLength2 and tableDepth2 + MSFront < tableLength1 then
						hotspot2 innerCornerPos + MSFront, tableDepth1 + MSFront, minSpaceUnID : minSpaceUnID = minSpaceUnID + 1
					endif
					if tableDepth1 + MSFront < tableLength2 then
						hotspot2 innerCornerPos + MSFront, tableLength2, minSpaceUnID : minSpaceUnID = minSpaceUnID + 1
					else
						hotspot2 innerCornerPos, tableDepth1 + MSFront, minSpaceUnID : minSpaceUnID = minSpaceUnID + 1
					endif

					put tableLength1, tableDepth1, 1,
						MAX(tableLength1, tableDepth2 + MSFront), tableDepth1, 1,
						MAX(tableLength1, tableDepth2 + MSFront), tableDepth1 + MSFront, 1,
						innerCornerPos + MSFront, tableDepth1 + MSFront, 1,
						innerCornerPos + MSFront, MAX(tableLength2, tableDepth1 + MSFront), 1,
						innerCornerPos, MAX(tableLength2, tableDepth1 + MSFront), 1,
						innerCornerPos, tableLength2, 0
				else
					qq = SQR((innerCornerPos - xPosTopCorner) ** 2 + (yPosTopCorner - tableDepth1) ** 2)
					ww = qq * TAN(180 - tableTopAngle)
					zz = MSFront / TAN(tableTopAngle / 2)
					ee = (tableLength1 - innerCornerPos) * TAN(tableTopAngle / 2)

					if MSFront < ww then
						hotspot2 tableLength1, tableDepth1 + MSFront, minSpaceUnID : minSpaceUnID = minSpaceUnID + 1
						hotspot2 innerCornerPos + MSFront / TAN(tableTopAngle / 2), tableDepth1 + MSFront, minSpaceUnID : minSpaceUnID = minSpaceUnID + 1
						hotspot2 xPosTopCorner + SIN(180 - tableTopAngle) * MSFront, yPosTopCorner + COS(180 - tableTopAngle) * MSFront, minSpaceUnID : minSpaceUnID = minSpaceUnID + 1

						put tableLength1, tableDepth1, 1,
							tableLength1, tableDepth1 + MSFront, 1,
							innerCornerPos + MSFront / TAN(tableTopAngle / 2), tableDepth1 + MSFront, 1,
							xPosTopCorner + SIN(180 - tableTopAngle) * MSFront, yPosTopCorner + COS(180 - tableTopAngle) * MSFront, 1,
							xPosTopCorner, yPosTopCorner, 0
					else
						if MSFront < ee then
							hotspot2 tableLength1, tableDepth1 + MSFront, minSpaceUnID : minSpaceUnID = minSpaceUnID + 1
							hotspot2 innerCornerPos + MSFront / TAN(tableTopAngle / 2), tableDepth1 + MSFront, minSpaceUnID : minSpaceUnID = minSpaceUnID + 1
							hotspot2 innerCornerPos - COS(180 - tableTopAngle) * zz, tableDepth1 + SIN(180 - tableTopAngle) * zz, minSpaceUnID : minSpaceUnID = minSpaceUnID + 1

							put tableLength1, tableDepth1, 1,
								tableLength1, tableDepth1 + MSFront, 1,
								innerCornerPos + MSFront / TAN(tableTopAngle / 2), tableDepth1 + MSFront, 1,
								innerCornerPos - COS(180 - tableTopAngle) * zz, tableDepth1 + SIN(180 - tableTopAngle) * zz, 1,
								xPosTopCorner, yPosTopCorner, 0
						else
							hotspot2 innerCornerPos + MSFront / TAN(tableTopAngle / 2), tableDepth1, minSpaceUnID : minSpaceUnID = minSpaceUnID + 1
							hotspot2 innerCornerPos + MSFront / TAN(tableTopAngle / 2), tableDepth1 + MSFront, minSpaceUnID : minSpaceUnID = minSpaceUnID + 1
							hotspot2 innerCornerPos - COS(180 - tableTopAngle) * zz, tableDepth1 + SIN(180 - tableTopAngle) * zz, minSpaceUnID : minSpaceUnID = minSpaceUnID + 1

							put tableLength1, tableDepth1, 1,
								innerCornerPos + MSFront / TAN(tableTopAngle / 2), tableDepth1, 1,
								innerCornerPos + MSFront / TAN(tableTopAngle / 2), tableDepth1 + MSFront, 1,
								innerCornerPos - COS(180 - tableTopAngle) * zz, tableDepth1 + SIN(180 - tableTopAngle) * zz, 1,
								xPosTopCorner, yPosTopCorner, 0
						endif
					endif
				endif
			endif

			if iInnerEdge = STRAIGHT then
				put innerCornerPos, tableDepth1, 0
			else
				put xPosAngleEnd, yPosAngleEnd, 0,
					innerArcStartPos, tableDepth1, 1000
			endif

			poly2_b NSP / 3, 1+2+4+64, MSFillPen, MSFillBackPen,
					get(NSP)
		endif
		if iTableTopType = TTOP_STRAIGHT then
			add2 tableLength1, tableDepth1
			rot2 180
			call "fa_minimalspace" parameters all	MSType	= 12,
													unID	= minSpaceUnID,
													a		= tableLength1
			del 2
		endif
		if archedTableTop then
			if iTableTopType = TTOP_ARCHED_360 then
				rot2 60
				poly2_b 5, 1+2+4+64, MSFillPen, MSFillBackPen,
						hur * COS(60) - szelo * SIN(60), -hur * SIN(60) - szelo * COS(60), 1,
						0, 0, 900,
						0, -gamma, 4001,
						b * SIN(60), -b * COS(60), 0,
						0, tableTopAngle, 4001
				del 1

				hotspot2 -b - MSFront, 0, minSpaceUnID : minSpaceUnID = minSpaceUnID + 1
				hotspot2 0, b + MSFront, minSpaceUnID : minSpaceUnID = minSpaceUnID + 1
				hotspot2 0, -b - MSFront, minSpaceUnID : minSpaceUnID = minSpaceUnID + 1

				hotspot2 hur, szelo, minSpaceUnID : minSpaceUnID = minSpaceUnID + 1
				hotspot2 hur, -szelo, minSpaceUnID : minSpaceUnID = minSpaceUnID + 1
			endif
			if iTableTopType = TTOP_ARCHED_P_TOP then
				poly2_b 7, 1+2+4+64, MSFillPen, MSFillBackPen,
						0, -b, 1,
						-tt, -b, 1,
						-b, tt, 800,
						xb - tt * SIN(270 - tableTopAngle), yb + tt * COS(270 - tableTopAngle), 1001,
						xb, yb, 0,
						-tt * SIN(270 - tableTopAngle), tt * COS(270 - tableTopAngle), 800,
						0, -b, 1000

				hotspot2 -tt, -b, minSpaceUnID : minSpaceUnID = minSpaceUnID + 1
				hotspot2 b, tt, minSpaceUnID : minSpaceUnID = minSpaceUnID + 1
			endif
			if iTableTopType <> TTOP_ARCHED_360 and iTableTopType <> TTOP_ARCHED_P_TOP then
				poly2_b 8, 1+2+4+64, MSFillPen, MSFillBackPen,
						0,			-b,					1,
						0,			-b - MSFront,			1,
						-1,			0,					800,
						-SIN(tableTopAngle) * (b + MSFront),	-COS(tableTopAngle) * (b + MSFront), 1001,
						-SIN(tableTopAngle) * b,				-COS(tableTopAngle) * b,			 0,
						b * COS(tableTopAngle),				-b * SIN(tableTopAngle),			 800,
						0,			-b,		1000,
						0,			-b,		-1

				hotspot2 0,-b - MSFront, minSpaceUnID : minSpaceUnID = minSpaceUnID + 1
				hotspot2 -SIN(tableTopAngle) * (b + MSFront), -COS(tableTopAngle) * (b + MSFront), minSpaceUnID : minSpaceUnID = minSpaceUnID + 1
			endif
		endif
		if iTableTopType = TTOP_RECT then
			add2 -a / 2, -b / 2
				call "fa_minimalspace" parameters all MSType = 4, unID = minSpaceUnID, MSSide = 0, MSFront = MSFront2
			del 1
		endif
	endif

return




end

call "deskAcc_m"




]]>
</Script_2D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_1D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
EPS = 0.0001

CABINET				= 0
SIMPLE_DESK			= 1
LAYOUT_ISLAND		= 2
LAYOUT_LINEAR		= 3
WS_SOLO				= 4

dim stDetlevel3D[3]
	stDetlevel3D[1] = `Простой`
	stDetlevel3D[2] = `Детальный`
	stDetlevel3D[3] = `Откл.`

dim stDetlevel3D[3]
	stDetlevel3D[1] = `Простой`
	stDetlevel3D[2] = `Детальный`
	stDetlevel3D[3] = `Откл.`

dim	stInnerEdge[2]
	stInnerEdge[1] = `Прямой`
	stInnerEdge[2] = `Скругленный`

dim stTableTopTypes[11]
	stTableTopTypes[1]	= `L-образная`
	stTableTopTypes[2]	= `Прямой`
	stTableTopTypes[3]	= `360`
	stTableTopTypes[4]	= `180`
	stTableTopTypes[5]	= `135`
	stTableTopTypes[6]	= `90`
	stTableTopTypes[7]	= `60`
	stTableTopTypes[8]	= `45`
	stTableTopTypes[9]	= `С-образная`
	stTableTopTypes[10]	= `Р-образная`
	stTableTopTypes[11]	= `Прямоугольный`

TTOP_L_SHAPED		= 1
TTOP_STRAIGHT		= 2
TTOP_ARCHED_360		= 3
TTOP_ARCHED_180		= 4
TTOP_ARCHED_135		= 5
TTOP_ARCHED_90		= 6
TTOP_ARCHED_60		= 7
TTOP_ARCHED_45		= 8
TTOP_ARCHED_C_TOP	= 9
TTOP_ARCHED_P_TOP	= 10
TTOP_RECT			= 11

STRAIGHT			= 1
ROUNDED				= 2

archedTableTop		= (iTableTopType > TTOP_STRAIGHT and iTableTopType < TTOP_RECT)

! ======================================================================
! L-Shaped Tabletop
! ======================================================================

if iTableTopType = TTOP_L_SHAPED and NOT(bCalledAsExtension) then
	xPosSideCorner	= tableLength2 * COS(180 - tableTopAngle)
	yPosSideCorner	= tableLength2 * SIN(180 - tableTopAngle)

	xPosTopCorner	= tableDepth2 * COS(tableTopAngle - 90) - tableLength2 * COS(180 - tableTopAngle)
	yPosTopCorner	= tableDepth2 * SIN(tableTopAngle - 90) + tableLength2 * SIN(180 - tableTopAngle)

	xPosAngleEnd	= tableDepth2 * SIN(180 - tableTopAngle) - innerArcEndPos * COS(180 - tableTopAngle)
	yPosAngleEnd	= tableDepth2 * COS(180 - tableTopAngle) + innerArcEndPos * SIN(180 - tableTopAngle)

	alpha			= ATN(COS(tableTopAngle - 90) / (tableDepth1 / tableDepth2 - SIN(tableTopAngle - 90)))
	beta			= tableTopAngle - 90 - alpha

	topCornerDist	= SQR(xPosTopCorner ** 2 + yPosTopCorner ** 2)
	teta			= ASN(yPosTopCorner / topCornerDist)
	if xPosTopCorner > EPS then
		gamma		= tableTopAngle - teta
	else
		gamma		= teta - (180 - tableTopAngle)
	endif
endif
if iTableTopType = TTOP_STRAIGHT and bCalledAsExtension then
	tableLength1	= extraDeskWidth
	tableDepth1		= extraDeskDepth
endif

! ======================================================================
! Arched Tabletop
! ======================================================================

if archedTableTop then
	if iTableTopType = TTOP_ARCHED_360 then tableTopAngle = 300
	if iTableTopType = TTOP_ARCHED_180 then tableTopAngle = 180
	if iTableTopType = TTOP_ARCHED_135 then tableTopAngle = 135
	if iTableTopType = TTOP_ARCHED_90 then tableTopAngle = 90
	if iTableTopType = TTOP_ARCHED_60 then tableTopAngle = 60
	if iTableTopType = TTOP_ARCHED_45 then tableTopAngle = 45

	if iTableTopType = TTOP_ARCHED_C_TOP then tableTopAngle = 270
	if iTableTopType = TTOP_ARCHED_P_TOP then tableTopAngle = 270

	tt		= SQR((b + MSFront) ** 2 - b ** 2)
	yb		= b * SIN(270 - tableTopAngle)
	xb		= b * COS(270 - tableTopAngle)

	hur 	= b * SIN(60)
	szelo	= SQR((b + MSFront) ** 2 - hur ** 2)
	teta	= ATN(hur / szelo)
	gamma	= 360 - (90 - teta) * 2
endif

]]>
</Script_1D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_UI SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_UI>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_VL SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
values "gs_resol" range[3,)

values "gs_detlevel_3D" stDetlevel3D[2], stDetlevel3D[1], stDetlevel3D[3]
values "gs_detlevel_3D_m" 2, 1, 0

if GLOB_MODPAR_NAME = "gs_detlevel_3D" then
	if gs_detlevel_3D = stDetlevel3D[3] then gs_detlevel_3D_m = 0
	if gs_detlevel_3D = stDetlevel3D[1]	then gs_detlevel_3D_m = 1
	if gs_detlevel_3D = stDetlevel3D[2]	then gs_detlevel_3D_m = 2
	parameters gs_detlevel_3D_m = gs_detlevel_3D_m
else
	if gs_detlevel_3D_m = 0 then gs_detlevel_3D = stDetlevel3D[3]
	if gs_detlevel_3D_m = 1 then gs_detlevel_3D = stDetlevel3D[1]
	if gs_detlevel_3D_m = 2 then gs_detlevel_3D = stDetlevel3D[2]
	parameters gs_detlevel_3D = gs_detlevel_3D
endif

values "topThk" range(0, )

if gs_detlevel_3D_m = 1 then
	lock			"gs_resol"
	hideparameter	"gs_resol"
endif
if gs_detlevel_3D_m = 0 then
	lock			"gs_resol",
					"gs_shadow"
	hideparameter	"gs_resol",
					"gs_shadow"
endif

if NOT(bPartOfLayout) and NOT(bPartOfWsSolo) and bCalledAsExtension then
	! enableTableTopTypes - possible values
	!	2		- enable L-Shaped
	!	4		- enable Straight
	!	8		- enable 45
	!	16		- enable 60
	!	32		- enable 90
	!	64		- enable 135
	!	128		- enable 180
	!	256		- enable 360
	!	512		- enable C-top
	!	1024	- enable P-top
	!	2048	- enable Rectangle

	if enableTableTopTypes < EPS then enableTableTopTypes = 2 + 4 + 8 + 16 + 32 + 64 + 128 + 256 + 512 + 1024 + 2048

	dim tableTopTypeValueList[]
	j = 1
	for i = 1 to vardim1(stTableTopTypes)
		if bittest(enableTableTopTypes, i) then
			put i
			tableTopTypeValueList[j] = stTableTopTypes[i]
			j = j + 1
		endif
	next i

	values "iTableTopType" get(NSP)
	values "ttyp" tableTopTypeValueList

	if GLOB_MODPAR_NAME = "ttyp" then
		for iTtop = 1 to vardim1(stTableTopTypes)
			if ttyp = stTableTopTypes[iTtop] then iTableTopType = iTtop
		next iTtop
		parameters iTableTopType = iTableTopType
	else
		ttyp = stTableTopTypes[max(iTableTopType, 1)]
		parameters ttyp = ttyp
	endif
endif

if NOT(bCalledAsExtension) then
	if iTableTopType = TTOP_L_SHAPED then
		values "innerEdge" stInnerEdge
		values "iInnerEdge" 1, 2

		if GLOB_MODPAR_NAME = "innerEdge" then
			for iInn = 1 to vardim1(stInnerEdge)
				if innerEdge = stInnerEdge[iInn] then iInnerEdge = iInn
			next iInn
			parameters iInnerEdge = iInnerEdge
		else
			innerEdge = stInnerEdge[max(iInnerEdge, 1)]
			parameters innerEdge = innerEdge
		endif

		if iInnerEdge = STRAIGHT then
			lock			"innerEdgeRad"
		endif
	else
		if bPartOfLayout or bPartOfWsSolo then
			values "innerEdge" stInnerEdge
			values "iInnerEdge" 1, 2
		endif
	endif
endif

if iTableTopType = TTOP_L_SHAPED and NOT(bCalledAsExtension) then
	minCabWidth1	= 0.2 * bOfficeCab1

	if GLOB_MODPAR_NAME = "innerCornerPos" then
		tableDepth2 = tableDepth1 / (COS(tableTopAngle - 90) / TAN(tableTopAngle - 90 + ATN(innerCornerPos / tableDepth1)) + SIN(tableTopAngle - 90))
		parameters tableDepth2 = tableDepth2
	else
		innerCornerPos = -tableDepth1 * TAN(beta)
		parameters innerCornerPos = innerCornerPos
	endif

	if GLOB_MODPAR_NAME = "innerArcStartPos" then
		innerEdgeRad = (innerArcStartPos + tableDepth1 * TAN(beta)) * TAN(tableTopAngle / 2)
		parameters innerEdgeRad = innerEdgeRad
	else
		innerArcStartPos = innerEdgeRad / TAN(tableTopAngle / 2) - tableDepth1 * TAN(beta)
		parameters innerArcStartPos = innerArcStartPos
	endif

	if GLOB_MODPAR_NAME = "innerArcEndPos" then
		innerEdgeRad = (innerArcEndPos - tableDepth2 / TAN(alpha)) * TAN(tableTopAngle / 2)
		parameters innerEdgeRad = innerEdgeRad
	else
		innerArcEndPos = innerEdgeRad / TAN(tableTopAngle / 2) + tableDepth2 / TAN(alpha)
		parameters innerArcEndPos = innerArcEndPos
	endif


	!!!!!!!!!!! Inner Edge Radius Limitation
	maxInnerEdgeLength1	= (yPosTopCorner - tableDepth1) / SIN(180 - tableTopAngle) - minCabWidth1 * (bMirroredCabPos) - 0.01
	maxInnerEdgeLength2	= (tableLength1 - innerCornerPos) - minCabWidth1 * NOT(bMirroredCabPos) - 0.01
	minInnerEdgeRad		= 0.1
	maxInnerEdgeRad		= MIN(maxInnerEdgeLength1, maxInnerEdgeLength2) * TAN(tableTopAngle / 2)
	values "innerEdgeRad" range[minInnerEdgeRad, maxInnerEdgeRad]

	!!!!!!!!!!! Table Length 1 Limitation
	minTableLength1		= innerCornerPos + (minInnerEdgeRad / TAN(tableTopAngle / 2)) * (iInnerEdge = ROUNDED) + minCabWidth1 * NOT(bMirroredCabPos) + 0.01
	values "tableLength1" range[MAX(0.4, minTableLength1),]

	!!!!!!!!!!! Table Length 2 Limitation
	minTableLength2		= tableDepth1 / SIN(180 - tableTopAngle) - tableDepth2 / TAN(180 - tableTopAngle) + minInnerEdgeRad / TAN(tableTopAngle / 2) * (iInnerEdge = ROUNDED) + minCabWidth1 * (bMirroredCabPos) + 0.01
	values "tableLength2" range[MAX(0.4, minTableLength2),]

	!!!!!!!!!!! Table Depth 1 Limitation
	minTableDepth1		= 0.2
	maxTableDepth1		= yPosTopCorner - (minInnerEdgeRad / TAN(tableTopAngle / 2) * SIN(180 - tableTopAngle)) * (iInnerEdge = ROUNDED) - minCabWidth1 * (bMirroredCabPos) * SIN(180 - tableTopAngle) - 0.01
	values "tableDepth1" range[minTableDepth1, maxTableDepth1]

	!!!!!!!!!!! Table Depth 2 Limitation
	length1Diagonal 	= tableLength1 * TAN(tableTopAngle - 90)
	minTableDepth2		= 0.2
	if length1Diagonal > tableDepth1 then
		maxTableDepth2	= tableLength1 / COS(tableTopAngle - 90) - (length1Diagonal - tableDepth1) * SIN(tableTopAngle - 90)\
						- (minInnerEdgeRad / TAN(tableTopAngle / 2) * SIN(180 - tableTopAngle)) * (iInnerEdge = ROUNDED)\
						- minCabWidth1 * NOT(bMirroredCabPos) * SIN(180 - tableTopAngle) - 0.01
	else
		maxTableDepth2	= tableLength1 / COS(tableTopAngle - 90) + (tableDepth1 - length1Diagonal) * SIN(tableTopAngle - 90)\
						- (minInnerEdgeRad / TAN(tableTopAngle / 2) * SIN(180 - tableTopAngle)) * (iInnerEdge = ROUNDED)\
						- minCabWidth1 * NOT(bMirroredCabPos) * SIN(180 - tableTopAngle) - 0.01
	endif
	values "tableDepth2" range[minTableDepth2, maxTableDepth2]


	!!!!!!!!!!! Inner Corner Point Limitation
	minInnerCornerPos	= minTableDepth2 / SIN(180 - tableTopAngle) - tableDepth1 / TAN(180 - tableTopAngle)
	maxInnerCornerPos	= tableLength1 - minCabWidth1 * NOT(bMirroredCabPos) - 0.01
	values "innerCornerPos" range[minInnerCornerPos, maxInnerCornerPos]

	!!!!!!!!!!! Inner Arc Right Point Limitation
	minInnerArcStartPos	= innerCornerPos + minInnerEdgeRad / TAN(tableTopAngle / 2)
	maxInnerArcStartPos	= innerCornerPos + MIN(maxInnerEdgeLength1, maxInnerEdgeLength2)
	values "innerArcStartPos" range[minInnerArcStartPos, maxInnerArcStartPos]

	!!!!!!!!!!! Inner Arc Left Point Limitation
	minInnerArcEndPos	= minInnerEdgeRad / TAN(tableTopAngle / 2) + minTableDepth2 / TAN(alpha)
	maxInnerArcEndPos	= tableDepth2 / TAN(alpha) + MIN(maxInnerEdgeLength1, maxInnerEdgeLength2)
	values "innerArcEndPos" range[minInnerArcEndPos, maxInnerArcEndPos]
endif

if iTableTopType = TTOP_STRAIGHT then
	if NOT(bCalledAsExtension) then
		minCabWidth1	= 0.2 * bOfficeCab1
		minCabWidth2	= 0.2 * bOfficeCab2
		minA			= 0.2 + minCabWidth1 + minCabWidth2
		minB			= 0.2

		if bPartOfLayout or bPartOfWsSolo then
			values "tableLength1" range[minA, )
			values "tableDepth1" range[minB, )
		else
			if a < 0.2 + gs_officeCab_width * bOfficeCab1 + gs_officeCab_width_2 * bOfficeCab2 then
				if gs_officeCab_width * bOfficeCab1 > gs_officeCab_width_2 * bOfficeCab2 then
					gs_officeCab_width = a - 0.2 - gs_officeCab_width_2 * bOfficeCab2

					if bOfficeCab2 and gs_officeCab_width < gs_officeCab_width_2 then
						gs_officeCab_width = (a - 0.2) / 2
						gs_officeCab_width_2 = gs_officeCab_width
					endif
				else
					gs_officeCab_width_2 = a - 0.2 - gs_officeCab_width * bOfficeCab1

					if bOfficeCab1 and gs_officeCab_width_2 < gs_officeCab_width then
						gs_officeCab_width_2 = (a - 0.2) / 2
						gs_officeCab_width = gs_officeCab_width_2
					endif
				endif

				parameters gs_officeCab_width = gs_officeCab_width
				parameters gs_officeCab_width_2 = gs_officeCab_width_2
			endif

			values "a" range[minA, )
			values "b" range[minB, )
		endif
	endif
endif

if archedTableTop then
	if GLOB_MODPAR_NAME = "B" then parameters a = b
	if GLOB_MODPAR_NAME = "A" then parameters b = a
endif

if iTableTopType = TTOP_RECT then
	if GLOB_MODPAR_NAME = "halfA" or GLOB_MODPAR_NAME = "halfB" then
		parameters a = halfA * 2
		parameters b = halfB * 2
	else
		parameters halfA = a / 2
		parameters halfB = b / 2
	endif
endif

if NOT(bCalledAsExtension) then
	if bPartOfLayout or bPartOfWsSolo then
		if iTableTopType = TTOP_STRAIGHT then
			if bOfficeCab1 and bOfficeCab2 then
				values "gs_officeCab_width" range[0.2, (tableLength1 - 0.2) / 2]
			else
				values "gs_officeCab_width" range[0.2, tableLength1 - 0.2]
			endif
		else
			if bMirroredCabPos then
				values "gs_officeCab_width" range[0.2, (yPosTopCorner - tableDepth1) / SIN(180 - tableTopAngle) - innerEdgeRad / TAN(tableTopAngle / 2) * (iInnerEdge = ROUNDED) - 0.01]
			else
				values "gs_officeCab_width" range[0.2, tableLength1 - innerCornerPos - innerEdgeRad / TAN(tableTopAngle / 2) * (iInnerEdge = ROUNDED) - 0.01]
			endif
		endif
	else
		if iTableTopType = TTOP_STRAIGHT then
			values "gs_officeCab_width" range[0.2, a - (0.2 + gs_officeCab_width_2 * bOfficeCab2))
			values "gs_officeCab_width_2" range[0.2, a - (0.2 + gs_officeCab_width * bOfficeCab1))
		else
			values "gs_officeCab_width" range[0.2, tableLength1 - innerCornerPos - innerEdgeRad / TAN(tableTopAngle / 2) * (iInnerEdge = ROUNDED) - 0.01]
		endif
	endif
endif

values "MSFront" range[0, ]
if bPartOfWsSolo then
	if iTableTopType = TTOP_L_SHAPED then
		values "MSSide" range[MSFront / TAN(tableTopAngle / 2), ]
		values "MSSide2" range[MSFront / TAN(tableTopAngle / 2), ]

		lock			"MSLength"
		hideparameter	"MSLength"
	else
		values "MSLength" range[0, ]

		lock			"MSSide",
						"MSSide2"
		hideparameter	"MSSide",
						"MSSide2"
	endif
endif

]]>
</Script_VL>

<ParamSection SectVersion="26" SectionFlags="0" SubIdent="0">
	<ParamSectHeader>
		<Version>26</Version>
		<AutoHotspots>false</AutoHotspots>
		<StatBits>
			<STBit_FixSize/>
		</StatBits>
		<WDLeftFrame>0</WDLeftFrame>
		<WDRightFrame>0</WDRightFrame>
		<WDTopFrame>0</WDTopFrame>
		<WDBotFrame>0</WDBotFrame>
		<LayFlags>65535</LayFlags>
		<WDMirrorThickness>0</WDMirrorThickness>
		<WDWallInset>0</WDWallInset>
		<SymbolColor>0</SymbolColor>
	</ParamSectHeader>
	<Parameters>
		<Length Name="A">
			<Description><![CDATA["Dimension 1"]]></Description>
			<Fix/>
			<Value>2</Value>
		</Length>
		<Length Name="B">
			<Description><![CDATA["Dimension 2"]]></Description>
			<Fix/>
			<Value>1</Value>
		</Length>
		<Length Name="zzyzx">
			<Description><![CDATA["Tabletop Height"]]></Description>
			<Fix/>
			<Value>0.75</Value>
		</Length>
		<Boolean Name="AC_show2DHotspotsIn3D">
			<Description><![CDATA["Show 2D Hotspots in 3D"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Length Name="ac_bottomlevel">
			<Description><![CDATA["Bottom Level"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Length>
		<Length Name="ac_toplevel">
			<Description><![CDATA["Top Level"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Boolean Name="bPartOfLayout">
			<Description><![CDATA["Called as a Part of Layout"]]></Description>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="bPartOfWsSolo">
			<Description><![CDATA["Called as a Part of Workstation Solo"]]></Description>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="bCalledAsExtension">
			<Description><![CDATA["Called as Extension"]]></Description>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="bEnableDeskHsCorner">
			<Description><![CDATA["Enable Desk Hotspots at Desk Corners"]]></Description>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="bEnableDeskHsHalfEdge">
			<Description><![CDATA["Enable Desk Hotspots at Desk Half Edges"]]></Description>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="bEnableDeskHsEditingX">
			<Description><![CDATA["Enable Desk Hotspot Editing X"]]></Description>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="bEnableDeskHsEditingY">
			<Description><![CDATA["Enable Desk Hotspot Editing Y"]]></Description>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="bEnableDeskHsEditingC">
			<Description><![CDATA["Enable Desk Hotspot Editing Inner Corner"]]></Description>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="bPartColumnCut">
			<Description><![CDATA["Cutting For Partition Column"]]></Description>
			<Value>0</Value>
		</Boolean>
		<Length Name="partColumnCutWidth">
			<Description><![CDATA["Partition Column Cutting Width"]]></Description>
			<Value>0.1</Value>
		</Length>
		<Length Name="innerCornerPos">
			<Description><![CDATA["Inner Corner X Position"]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.057735026919</Value>
		</Length>
		<Length Name="innerArcStartPos">
			<Description><![CDATA["Inner Arc Start X Position"]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.144337567297</Value>
		</Length>
		<Length Name="innerArcEndPos">
			<Description><![CDATA["Inner Arc End Position"]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.663952809568</Value>
		</Length>
		<Length Name="halfA">
			<Description><![CDATA["Half A"]]></Description>
			<Value>1</Value>
		</Length>
		<Length Name="halfB">
			<Description><![CDATA["Half B"]]></Description>
			<Value>0.5</Value>
		</Length>
		<String Name="ttyp">
			<Description><![CDATA["Tabletop Type"]]></Description>
			<Value><![CDATA["Прямой"]]></Value>
		</String>
		<Integer Name="iTableTopType">
			<Description><![CDATA["Tabletop Type"]]></Description>
			<Value>1</Value>
		</Integer>
		<Length Name="tableLength1">
			<Description><![CDATA["Table Length 1"]]></Description>
			<Value>1.68</Value>
		</Length>
		<Length Name="tableLength2">
			<Description><![CDATA["Table Length 2"]]></Description>
			<Value>1.4</Value>
		</Length>
		<Length Name="tableDepth1">
			<Description><![CDATA["Tabletop Width"]]></Description>
			<Value>0.7</Value>
		</Length>
		<Length Name="tableDepth2">
			<Description><![CDATA["Top Width"]]></Description>
			<Value>0.4</Value>
		</Length>
		<Length Name="extraDeskWidth">
			<Description><![CDATA["Extra Desk Width"]]></Description>
			<Value>1</Value>
		</Length>
		<Length Name="halfExtraDeskWidth">
			<Description><![CDATA["Half Extra Desk Width"]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.5</Value>
		</Length>
		<Length Name="extraDeskDepth">
			<Description><![CDATA["Extra Desk Depth"]]></Description>
			<Value>0.5</Value>
		</Length>
		<Length Name="topThk">
			<Description><![CDATA["Tabletop Thickness"]]></Description>
			<Value>0.03</Value>
		</Length>
		<String Name="innerEdge">
			<Description><![CDATA["Inner Edge"]]></Description>
			<Value><![CDATA["Скругленный"]]></Value>
		</String>
		<Integer Name="iInnerEdge">
			<Description><![CDATA["Inner Edge"]]></Description>
			<Value>2</Value>
		</Integer>
		<Length Name="innerEdgeRad">
			<Description><![CDATA["Inner Edge Radius"]]></Description>
			<Value>0.15</Value>
		</Length>
		<Angle Name="tableTopAngle">
			<Description><![CDATA["Tabletop Angle"]]></Description>
			<Value>120</Value>
		</Angle>
		<Integer Name="enableTableTopTypes">
			<Description><![CDATA["Enabled Tabletop Types"]]></Description>
			<Value>4094</Value>
		</Integer>
		<Boolean Name="bOfficeCab1">
			<Description><![CDATA["Cabinet on Side 1"]]></Description>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="bOfficeCab2">
			<Description><![CDATA["Cabinet on Side 2"]]></Description>
			<Value>0</Value>
		</Boolean>
		<Length Name="gs_officeCab_width">
			<Description><![CDATA["Desk Cabinet Width on Side 1"]]></Description>
			<Value>0.2</Value>
		</Length>
		<Length Name="gs_officeCab_width_2">
			<Description><![CDATA["Desk Cabinet Width on Side 2"]]></Description>
			<Value>0.2</Value>
		</Length>
		<Boolean Name="bMirroredCabPos">
			<Description><![CDATA["Mirrored Cabinet Position by L-Shaped Desk"]]></Description>
			<Value>0</Value>
		</Boolean>

		<!-- gs_2D_representation: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_2D_representation">
			<Description><![CDATA["2D Representation"]]></Description>
			<Fix/>
		</Title>
		<PenColor Name="gs_cont_pen">
			<Description><![CDATA["Contour Pen"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>4</Value>
		</PenColor>
		<FillPattern Name="gs_fill_type">
			<Description><![CDATA["Fill Type"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>65</Value>
		</FillPattern>
		<PenColor Name="gs_fill_pen">
			<Description><![CDATA["Fill Pen"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>19</Value>
		</PenColor>
		<PenColor Name="gs_back_pen">
			<Description><![CDATA["Fill Background Pen"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>19</Value>
		</PenColor>

		<!-- gs_min_space: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_min_space">
			<Description><![CDATA["Minimal Space"]]></Description>
		</Title>
		<Length Name="MSFront">
			<Description><![CDATA["Minimal Space in Front"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.5</Value>
		</Length>
		<Length Name="MSFront2">
			<Description><![CDATA["Minimal Space in Front"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.6</Value>
		</Length>
		<Length Name="MSSide">
			<Description><![CDATA["Minimal Space on Side 1"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1.8</Value>
		</Length>
		<Length Name="MSSide2">
			<Description><![CDATA["Minimal Space on Side 2"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1.1</Value>
		</Length>
		<Length Name="MSRear">
			<Description><![CDATA["Minimal Space Behind"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.6</Value>
		</Length>
		<Length Name="MSLength">
			<Description><![CDATA["Minimal Space Length"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>3</Value>
		</Length>
		<Length Name="MSAllSides">
			<Description><![CDATA["Minimal Space on all Sides"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.5</Value>
		</Length>

		<!-- gs_3D_representation: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_3D_representation">
			<Description><![CDATA["3D Representation"]]></Description>
		</Title>
		<String Name="gs_detlevel_3D">
			<Description><![CDATA["3D Detail Level"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Детальный"]]></Value>
		</String>
		<Integer Name="gs_detlevel_3D_m">
			<Description><![CDATA["3D Detail Level"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>2</Value>
		</Integer>
		<Integer Name="gs_resol">
			<Description><![CDATA["Resolution"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>16</Value>
		</Integer>
		<Boolean Name="gs_shadow">
			<Description><![CDATA["Shadow"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Material Name="gs_top_mat">
			<Description><![CDATA["Tabletop"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>14</Value>
		</Material>
		<Integer Name="tableTops_unID">
			<Description><![CDATA["unID"]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Integer>

		<!-- gs_list: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_list">
			<Description><![CDATA["Parameters for Listing"]]></Description>
			<Fix/>
		</Title>
		<RealNum Name="gs_list_cost">
			<Description><![CDATA["Cost"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<String Name="gs_list_manufacturer">
			<Description><![CDATA["Manufacturer"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_note">
			<Description><![CDATA["Note/Remarks"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_location">
			<Description><![CDATA["Location"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_accessories">
			<Description><![CDATA["Accessories"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="FM_Type">
			<Description><![CDATA["Group Type"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Мебель"]]></Value>
		</String>
		<Integer Name="iFMType">
			<Description><![CDATA["Group Type"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>16</Value>
		</Integer>
		<String Name="FM_InventoryNumber">
			<Description><![CDATA["Inventory Number"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="FM_SerialNumber">
			<Description><![CDATA["Serial Number"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="FM_ProductionYear">
			<Description><![CDATA["Production Year"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<RealNum Name="FM_ObjectWeight">
			<Description><![CDATA["Object Weight"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<String Name="FM_ObjectWeightUnit">
			<Description><![CDATA["Object Weight Unit"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["кг"]]></Value>
		</String>
		<String Name="gs_list_custom1">
			<Description><![CDATA["User Defined 1"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_custom2">
			<Description><![CDATA["User Defined 2"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_custom3">
			<Description><![CDATA["User Defined 3"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_custom4">
			<Description><![CDATA["User Defined 4"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_custom5">
			<Description><![CDATA["User Defined 5"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
	</Parameters>
</ParamSection>

<CalledMacros SectVersion="2" SectionFlags="0" SubIdent="0">
	<Macro>
		<MName><![CDATA["fa_minimalspace"]]></MName>
		<MainGUID>948022D5-BA0C-4407-8518-A3B5922DF84C</MainGUID>
	</Macro>
	<Macro>
		<MName><![CDATA["deskAcc_m"]]></MName>
		<MainGUID>F8DDB166-4806-4845-972A-673E77126E31</MainGUID>
	</Macro>
</CalledMacros>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_PR SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_PR>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Comment SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Comment>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_FWM SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_FWM>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_BWM SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_BWM>

<Copyright SectVersion="1" SectionFlags="0" SubIdent="0">
	<Author>GRAPHISOFT</Author>
	<License>
		<Type>CC BY-ND</Type>
		<Version>3.0</Version>
	</License>
</Copyright>

</Symbol>
