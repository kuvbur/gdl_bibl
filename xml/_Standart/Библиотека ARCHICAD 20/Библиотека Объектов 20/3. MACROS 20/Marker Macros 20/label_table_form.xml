<?xml version="1.0" encoding="UTF-8"?>
<Symbol IsArchivable="false" IsPlaceable="false" MainGUID="4FEBC7E5-70D7-458B-861B-B1B1221819BD" MigrationValue="Normal" Owner="1196638531" Signature="1196644685" Version="38">
<Ancestry SectVersion="1" SectionFlags="0" SubIdent="0" Template="false">
	<MainGUID>F938E33A-329D-4A36-BE3E-85E126820996</MainGUID>
	<MainGUID>B176ABF1-5813-478F-926B-28EE7C5DC1F7</MainGUID>
	<MainGUID>4FD10D67-2F29-4844-A65A-6597589B0CB5</MainGUID>
</Ancestry>

<CalledMacros SectVersion="2" SectionFlags="0" SubIdent="0">
</CalledMacros>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_3D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_3D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_2D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
! ========================================================================================
!	-------------	-------------
!	|	--------|---|--------	|	
!	|	| Header|	|		|	|
!	|	--------|---|--------	|
!	|	--------|---|--------	|	
!	|	|		|	|		|	|
!	|	| Body	|	|		|	|
!	|	--------|---|--------	|
!	|	Prefix	|	|	Content	|
!	-------------	-------------
!
! Header:
!	has own text style
!		fontTypeHeader			- font style
!		sizeFontHeader_mm		- font size
!		_iStyleFontHeader		- font style
!		_sizeLeadingHeader		- leading, line space percent - 100 % is the real size
!		iAlignmentPrefixHeader	- text alignment - 1: left aligned, 2: center aligned, 3: right aligned, 4: full justified
!		iAlignmentContentHeader	- text alignment - 1: left aligned, 2: center aligned, 3: right aligned, 4: full justified
! Body:
!	has own text style
!		sTypeFontBody			- font style
!		sizeFontBody			- font size
!		iStyleFontBody			- font style
!		sizeLeadingBody			- leading, line space percent - 100 % is the real size
!		iAlignmentPrefixBody	- text alignment - 1: left aligned, 2: center aligned, 3: right aligned, 4: full justified
!		iAlignmentContentBody	- text alignment - 1: left aligned, 2: center aligned, 3: right aligned, 4: full justified
! Prefix:
!		input with sPrefixStrings array - one column : 1.prefix
! Content:
!		input with sContentStrings array - 30 column
!			column properties : [1.note1 2.frac 3.unit 4.unitindex 5.suffix] * 6 possibility
!			can be displayed 6 calculated and separated data with unit in one row
! ========================================================================================
_numberofRow			= vardim1(sContentStrings)
_numberMaxContentCells	= 30
_isPreview 				= (GLOB_CONTEXT = 5)

! ========================================================================================
! Fill out arrays to 30 fixed cells number - initialization 
! ========================================================================================

dim _sContentStrings[][]
	_sContentStrings = sContentStrings
for i = 1 to _numberofRow
	for iCell = vardim2(sContentStrings)+1 to _numberMaxContentCells
		_sContentStrings[i][iCell] = ""
	next iCell
next i

! ========================================================================================
! Custom header style - merge first row prefix and content strings
! if there is Prefix and Content too then Prefix is added to Content
! if there is only Prefix or only Content then the function is working like others
! ========================================================================================

if bEnableCustomHeaderStyle and bUsePrefixColumn then
	_sep = ""
	if sPrefixStrings[1] <> "" then _sep = " "
	_sContentStrings[1][1] = sPrefixStrings[1] + _sep + _sContentStrings[1][1]
	sPrefixStrings[1] = ""
endif

! ========================================================================================
! Merge rows of multi-row-content by Parameter Name
! ========================================================================================

dim _isMergeContentRows[]
for i = 1 to _numberofRow
	_isMergeContentRows[i] = 0
	if bUsePrefixColumn and i > 1 then
		if sPrefixStrings[i] = sPrefixStrings[i-1] then
			for iMerge = i to _numberofRow
				if sPrefixStrings[iMerge] = sPrefixStrings[i-1] then
					sPrefixStrings[iMerge] = ""
					_isMergeContentRows[iMerge] = 1
				endif
			next iMerge
		endif
	endif
next i

! ========================================================================================
! Define styles and ratio of line spacing
! ========================================================================================

! normal text:
define style{2} "mainStyleHeader"  fontTypeHeader, sizeFontHeader_mm * GLOB_SCALE/1000, _iStyleFontHeader
n = request("Height_of_style", "mainStyleHeader", _heightFirstRowTextBox, descent, leading)
_ratioLinespaceHeader = _sizeLeadingHeader

define style{2} "mainStyleBody"  sTypeFontBody, sizeFontBody * GLOB_SCALE/1000, iStyleFontBody
n = request("Height_of_style", "mainStyleBody", _heightRowBody, descent, leading)
_ratioLinespaceBody = sizeLeadingBody

! superscript style - upper index text (for extra precision or unit extension) without underline and striketrough style by design
_iStyleFontHeaderExtra = _iStyleFontHeader
if bittest(_iStyleFontHeaderExtra, 2) then	! Underline
	_iStyleFontHeaderExtra = _iStyleFontHeaderExtra - 4
endif
if bittest(_iStyleFontHeaderExtra, 7) then	! Striketrough
	_iStyleFontHeaderExtra = _iStyleFontHeaderExtra - 128
endif
_iStyleFontBodyExtra = iStyleFontBody
if bittest(_iStyleFontBodyExtra, 2) then	! Underline
	_iStyleFontBodyExtra = _iStyleFontBodyExtra - 4
endif
if bittest(_iStyleFontBodyExtra, 7) then	! Striketrough
	_iStyleFontBodyExtra = _iStyleFontBodyExtra - 128
endif
define style{2} "extraStyleHeader"  fontTypeHeader, sizeFontHeader_mm * GLOB_SCALE/1000, _iStyleFontHeaderExtra + 32
define style{2} "extraStyleBody"	sTypeFontBody, sizeFontBody * GLOB_SCALE/1000, _iStyleFontBodyExtra + 32

! ========================================================================================
! Fill style arrays for paragraph
! ========================================================================================

dim _sStylePrefix[]
dim _sStyleBody[][]
for i = 1 to _numberofRow
	if i = 1 then
		_sStylePrefix[i] = "mainStyleHeader"
	else
		_sStylePrefix[i] = "mainStyleBody"
	endif

	for iCell = 1 to vardim2(sContentStrings)
		if abs(((iCell+5) MOD 5) - 2) < EPS  | abs(((iCell+5) MOD 5) - 4) < EPS then
			if i = 1 then
				_sStyleBody[i][iCell] = "extraStyleHeader"
			else
				_sStyleBody[i][iCell] = "extraStyleBody"
			endif
		else
			if i = 1 then
				_sStyleBody[i][iCell] = "mainStyleHeader"
			else
				_sStyleBody[i][iCell] = "mainStyleBody"
			endif
		endif
	next iCell
	for iCell = vardim2(sContentStrings)+1 to _numberMaxContentCells
		_sStyleBody[i][iCell] =  "mainStyleBody" ! dummy - no need
	next iCell
next i

! ==========================================================================
! Calculating textbox`s dimensions
! ==========================================================================
_xPosTB			= 0
_yPosTB			= 0

dim _stringwidthPrefix[]
dim _stringheightPrefix[]
dim _stringwidthContent[]
dim _stringheightContent[]
dim _heightRow[]

_calculatedWidthPrefixTextBox = 0
_calculatedWidthContentTextBox = 0
_calculatedWidthFullTextBox = 0
if bWrapText then
	if bUsePrefixColumn then
		_calculatedWidthPrefixTextBox = widthTextBoxPrefix_mm
	endif
	if bUseContentColumn then
		_calculatedWidthContentTextBox = widthTextBoxContent_mm
	endif
	_calculatedWidthFullTextBox = _calculatedWidthPrefixTextBox + _calculatedWidthContentTextBox +\
								 (widthTextBoxOffset * 2 * (bUsePrefixColumn & bUseContentColumn))
endif

for i = 1 to _numberofRow

	_penindex 			= 1
	_drawRichtext		= 0
	_iAlignment			= 1
	_iReferencePoint	= 1

	if i = 1 then
		_ratioLineSpace = _ratioLinespaceHeader
	else
		_ratioLineSpace = _ratioLinespaceBody
	endif

	if bUsePrefixColumn then
		_usePrefixChapter	= 1
		_widthTextBlock	= _calculatedWidthPrefixTextBox	! -> zero means automatic calculations
		gosub "usePharagraph"	! returned automatic dim or calculated
		if bWrapText then
			! the recalculated text box width is not always matching with the given widths because of paragraph standard
			! and the text box width can be longer then the automatic by design
			_stringwidthPrefix[i] = _widthTextBlock
		else
			_stringwidthPrefix[i] = _widthTB
		endif
		_stringheightPrefix[i] = _heightTB
	else
		_stringwidthPrefix[i] = 0
		_stringheightPrefix[i] = 0
	endif

	if bUseContentColumn then
		_usePrefixChapter	= 0
		if bEnableCustomHeaderStyle and i = 1 then
			_widthTextBlock = _calculatedWidthFullTextBox
			gosub "usePharagraph"	! returned automatic dim or calculated
		else
			_widthTextBlock		= _calculatedWidthContentTextBox	! -> zero means automatic calculations
			gosub "usePharagraph"	! returned automatic dim or calculated
		endif
		if bWrapText then
			! the recalculated text box width is not always matching with the given widths because of paragraph standard
			! and the text box width can be longer then the automatic by design
			_stringwidthContent[i] = _widthTextBlock
		else
			_stringwidthContent[i] = _widthTB
		endif
		_stringheightContent[i] = _heightTB
	else
		_stringwidthContent[i] = 0
		_stringheightContent[i] = 0
	endif

	_heightRow[i] = max(_stringheightPrefix[i], _stringheightContent[i])
next i

_widthPrefixTextBox = 0
for iCalc = (1 + bEnableCustomHeaderStyle) to vardim1(_stringwidthPrefix)
	_widthPrefixTextBox = max(_widthPrefixTextBox, _stringwidthPrefix[iCalc])
next iCalc
_widthContentTextBox = 0
for iCalc = (1 + bEnableCustomHeaderStyle) to vardim1(_stringwidthContent)
	_widthContentTextBox = max(_widthContentTextBox, _stringwidthContent[iCalc])
next iCalc

! by first row at cutom head style (prefix + 2 offset as separator + content)
_widthFirstRowTextBox = _stringwidthContent[1]
_widthFullTextBox = _widthPrefixTextBox + _widthContentTextBox + (widthTextBoxOffset * 2 * (bUsePrefixColumn & bUseContentColumn))
if bEnableCustomHeaderStyle then
	if _widthFullTextBox < _widthFirstRowTextBox then
		_widthPrefixTextBox = _widthPrefixTextBox + (_widthFirstRowTextBox - _widthFullTextBox) /(bUsePrefixColumn + bUseContentColumn)
		_widthContentTextBox = _widthContentTextBox + (_widthFirstRowTextBox - _widthFullTextBox) /(bUsePrefixColumn + bUseContentColumn)
		_widthFullTextBox = _widthPrefixTextBox + _widthContentTextBox + (widthTextBoxOffset * 2 * (bUsePrefixColumn & bUseContentColumn))
	else
		_widthFirstRowTextBox = _widthFullTextBox
	endif
endif

_heightFirstRowTextBox = _heightRow[1]
_heightFullTextBox = 0
for iCalc = 1 to vardim1(_stringheightContent)
	_heightFullTextBox = _heightFullTextBox + _heightRow[iCalc]
next iCalc

_widthPrefixFrame = 0
if bUsePrefixColumn then
	_widthPrefixFrame = _widthPrefixTextBox + widthTextBoxOffset * 2
endif
_widthContentFrame = 0
if bUseContentColumn then
	_widthContentFrame = _widthContentTextBox + widthTextBoxOffset * 2
endif
_widthFullFrame = _widthPrefixFrame + _widthContentFrame
_heightFullFrame = _heightFullTextBox + widthTextBoxOffset * 2

! ==============================================================================
! Install label position
! ==============================================================================
! ------------------------------------------------------------------------------
! Label positioning - global behavior for Marker form Labels
! - origin is where AC gives, the table begins with top left anchor 
! - LABEL_ROTANGLE (anglePosition) rotating is handled by AC, only need for readability calculation
! - bUseBuiltinPointer OFF (without AC Arrow)
! 		- the origin is at the arrow peak
! 		- orientation is rotated from gdl parameter and working as at Word Labels
!			1. Paralell/Horizontal/Vertical - LABEL_ROTANGLE has no effect
!			2. Custom - only LABEL_ROTANGLE lives
! 		- Reference Point is cordinated by user
! - bUseBuiltinPointer ON (with AC Arrow)
!		- the origin is at the boundary
!		- handling of rotation is belongs to AC (AC_CustomReadabilty OFF)
!		- Reference Point is cordinated at Pointer tabpage
! input:
!	iLabelOrientation	- type Orientation
!	anglePosition		- LABEL_ROTANGLE
!	angleParentPosition	- Parent tool direction using at Parallel
!	_isPreview
! ==============================================================================
nTrans = 0

if bUseBuiltinPointer then
	iReferencePoint			= 1
	iLabelOrientation		= 0	! none
endif

if not(_isPreview) and not(bUseBuiltinPointer) then
	angleViewRot = 0
	rrr = REQUEST ("View_Rotangle", "", angleViewRot)
	totalRotate = (angleViewRot) MOD 360

	if iLabelOrientation = ORIENTATION_PARALLEL then
		rot2 angleParentPosition - anglePosition
		nTrans = nTrans + 1
		totalRotate = ( totalRotate + angleParentPosition ) MOD 360
	else
		if iLabelOrientation = ORIENTATION_HORIZONTAL then
			rot2 -totalRotate - anglePosition
			nTrans = nTrans + 1
			totalRotate = 0
		else
			if iLabelOrientation = ORIENTATION_VERTICAL then
				rot2 -totalRotate + 90 - anglePosition
				nTrans = nTrans + 1
				totalRotate = 90
			else
				! at CUSTOM the LABEL_ROTANGLE (anglePosition) is handled by AC
				totalRotate = (anglePosition + totalRotate) MOD 360
			endif
		endif
	endif
endif


unID = 10
if bUseBuiltinPointer then
	hotspot2 0,					0, 						unID : unID = unID + 1
	hotspot2 _widthFullFrame,	0, 						unID : unID = unID + 1
	hotspot2 _widthFullFrame,	-_heightFullFrame, 		unID : unID = unID + 1
	hotspot2 0,					-_heightFullFrame, 		unID : unID = unID + 1
else
	! Only 1 hotspot at Reference Point
	hotspot2 0,	0,	unID : unID = unID + 1
endif

_posX = 0
_posY = 0

if iReferencePoint = 2 | iReferencePoint = 5 | iReferencePoint = 8 then _posX = -_widthFullFrame/2
if iReferencePoint = 3 | iReferencePoint = 6 | iReferencePoint = 9 then _posX = -_widthFullFrame

if iReferencePoint = 4 | iReferencePoint = 5 | iReferencePoint = 6 then _posY = _heightFullFrame/2
if iReferencePoint = 7 | iReferencePoint = 8 | iReferencePoint = 9 then _posY = _heightFullFrame

add2 _posX, _posY

hotline2 0,					0,					_widthFullFrame,	0,					unID : unID = unID + 1
hotline2 _widthFullFrame,	0,					_widthFullFrame,	-_heightFullFrame,	unID : unID = unID + 1
hotline2 _widthFullFrame,	-_heightFullFrame,	0,					-_heightFullFrame,	unID : unID = unID + 1
hotline2 0,					-_heightFullFrame,	0,					0,					unID : unID = unID + 1

! Readabilty - transform the full table ------------------------------------
if not(_isPreview) then
	if bAlwaysReadable and AC_CustomReadability then
		if (totalRotate > 90+EPS & totalRotate < 270-EPS) then
			mul2 -1, -1
			add2 -_widthFullFrame, _heightFullFrame
		endif
	endif
endif

! ==========================================================================
! Draw texts with paragraph row by row
! - the table begins with top left anchor
! ==========================================================================

_yPosTB	= -widthTextBoxOffset

for i = 1 to _numberofRow
	_drawRichtext 	= 1
	if i = 1 then
		_ratioLineSpace = _ratioLinespaceHeader
		_penindex		= penTextHeader
	else
		_ratioLineSpace = _ratioLinespaceBody
		_penindex		= penTextBody
	endif

	! --------------------------------------------------------------------------
	!  displaying content type NAME column 
	! --------------------------------------------------------------------------

	if bUsePrefixColumn then
		_xPosTB 			= widthTextBoxOffset
		_usePrefixChapter 	= 1
		_iReferencePoint	= 1		! for Text Box Orientation
		_widthTextBlock 	= _widthPrefixTextBox
		_iAlignment			= _iAlignmentPrefixBody
		gosub "usePharagraph"
	endif

	! --------------------------------------------------------------------------
	! displaying content Body column 
	! --------------------------------------------------------------------------

	if bUseContentColumn then
		_usePrefixChapter 	= 0
		_iReferencePoint	= 1		! for Text Box Orientation
		if bEnableCustomHeaderStyle and i = 1 then
			_xPosTB 			= widthTextBoxOffset
			_iAlignment			= iAlignmentHeader
			_widthTextBlock 	= _widthFirstRowTextBox
		else
			_xPosTB 			= _widthPrefixFrame + widthTextBoxOffset
			_iAlignment			= _iAlignmentContentBody
			_widthTextBlock 	= _widthContentTextBox
		endif
		gosub "usePharagraph"
	endif

	_yPosTB = _yPosTB - _heightRow[i]
next i

! ==========================================================================
! Frame and fill
! ==========================================================================

pen penFrame
fill filltype
line_type lineTypeFrame

bHeaderContour		= 0
bDetBoxContour		= 0
bHeaderSeparator	= 0
bLineSeparator		= 0
bColumnSeparator	= 0

if bShowFrame then
	bHeaderContour = 1
	if iFrameStyle <> FRAME_STYLE1 then bHeaderSeparator = 1
	if iFrameStyle <> FRAME_STYLE3 then bDetBoxContour = 1
	if iFrameStyle = FRAME_STYLE4 | iFrameStyle = FRAME_STYLE6 then bLineSeparator = 1
	if (iFrameStyle = FRAME_STYLE5 | iFrameStyle = FRAME_STYLE6) &\
		(bUsePrefixColumn & bUseContentColumn) then
		bColumnSeparator = 1
	endif
endif

poly2_b 6, bShowFrame + bShowFill * 2 + 4, penForeground, penBackground,
	0, 					0, 												bHeaderContour,
	_widthFullFrame, 	0,					 							bHeaderContour,
	_widthFullFrame, 	-(_heightFirstRowTextBox + widthTextBoxOffset), 	bDetBoxContour,
	_widthFullFrame,	-_heightFullFrame, 								bDetBoxContour,
	0,  				-_heightFullFrame, 								bDetBoxContour,
	0,  				-(_heightFirstRowTextBox + widthTextBoxOffset),	bHeaderContour

if bHeaderSeparator then line2 0, -_heightFirstRowTextBox - widthTextBoxOffset, _widthFullFrame, -_heightFirstRowTextBox - widthTextBoxOffset
if bColumnSeparator then
	line2 _widthPrefixFrame, -_heightFirstRowTextBox - widthTextBoxOffset, _widthPrefixFrame, - _heightFullFrame
endif
if bLineSeparator and _numberofRow > 1 then
	for i = 1 to _numberofRow - 1
		if i = 1 then
			add2 0, -_heightRow[i] - widthTextBoxOffset
		else
			add2 0, -_heightRow[i]
		endif
		if not(_isMergeContentRows[i+1]) then
			line2 0, 0, _widthFullFrame, 0
		endif
	next i
	del _numberofRow - 1
endif

hotline2  0, 				0,					_widthFullFrame, 	0,					unID : unID = unID + 1
hotline2  _widthFullFrame, 	0, 					_widthFullFrame,	-_heightFullFrame, 	unID : unID = unID + 1
hotline2  _widthFullFrame,	-_heightFullFrame, 	0, 					-_heightFullFrame, 	unID : unID = unID + 1
hotline2  0, 				-_heightFullFrame, 	0, 					0, 					unID : unID = unID + 1


! ==============================================================================
END !END	!END	!END	!END	!END	!END	!END	!END	!END	!END
! ==============================================================================

! ==============================================================================
"usePharagraph" :
! ------------------------------------------------------------------------------
! input for paragraph:
! 		_iAlignment					! 1: left aligned, 2: center aligned, 3: right aligned, 4: full justified
!		_penindex					! text pen
!		_ratioLineSpace				! (character size + distance to the next line) defined by the actual style will be multiplied by this number
!		xFirstIndentParagraph		! meaning millimeters or meters depends on the fixed_height parameter of the TEXTBLOCK definition
!		xLeftIndentParagraph		! meaning millimeters or meters depends on the fixed_height parameter of the TEXTBLOCK definition
!		xRightIndentParagraph		! meaning millimeters or meters depends on the fixed_height parameter of the TEXTBLOCK definition
!		xTabPositionParagraph		! consecutive tabulator positions (each relative to the beginning of the paragraph). Default values (0) are used (12.7 mm). Works only with '\t' special character.
!		sPrefixStrings[]			! prefix column strings
!		sContentStrings[][30]		! content column strings
!		_sStylePrefix[]				! style for prefix
!		_sStyleBody[][30]			! style for content
!
! input for textblock:
!		_widthTextBlock				! textblock width in mm or m in model space, if 0 it is calculated automatically
!		anglePosition				! rotation angle of the textblock in degrees
!		_iReferencePoint				! code of the position point in the text 1-9
!		widthFactorTextBlock		! width_factor: Character widths defined by the actual style will be multiplied by this number		
!		charspaceFactorTextBlock	! charspace_factor: The horizontal distance between two characters will be multiplied by this number! output:
!		iFixedHeightTextBlock		! fixed_height: Possible values: 	1: the placed TEXTBLOCK will be scale-independent and all specified length type parameters will mean millimeters, !
!		 																0: the placed TEXTBLOCK will be scale-dependent and all specified length type parameters will mean meters in model space
!		_drawRichText				! use richtext (1) or just calculate textblock sizes (0)
! output:
!		texbox sizes - _widthTB, _heightTB
! ==============================================================================
	pen _penindex

	doSplit = '\n'

	_stNamePG 			= "nameParaGraph"
	_iAlignPG 			= _iAlignment				! 1: left aligned, 2: center aligned, 3: right aligned, 4: full justified
	_xFirstIndentPG	 	= xFirstIndentParagraph		! meaning millimeters or meters depends on the fixed_height parameter of the TEXTBLOCK definition
	_xLeftIndentPG 		= xLeftIndentParagraph		! meaning millimeters or meters depends on the fixed_height parameter of the TEXTBLOCK definition
	_xRightIndentPG 	= xRightIndentParagraph		! meaning millimeters or meters depends on the fixed_height parameter of the TEXTBLOCK definition
	_ratioLineSpacePG	= _ratioLineSpace			! (character size + distance to the next line) defined by the actual style will be multiplied by this number
	_xTabPosPG	 		= xTabPositionParagraph		! consecutive tabulator positions (each relative to the beginning of the paragraph). Default values (0) are used (12.7 mm). Works only with '\t' special character.
	_penindexPG			= _penindex

	if _usePrefixChapter = 1 then
		paragraph _stNamePG _iAlignPG,
			_xFirstIndentPG, _xLeftIndentPG, _xRightIndentPG,
			_ratioLineSpacePG, _xTabPosPG,
			_penindexPG
			style _sStylePrefix[i]
			sPrefixStrings[i]
		endparagraph
	else
		paragraph _stNamePG _iAlignPG,
			_xFirstIndentPG, _xLeftIndentPG, _xRightIndentPG,
			_ratioLineSpacePG, _xTabPosPG,
			_penindexPG
			style _sStyleBody[i][1]
			_sContentStrings[i][1]
			style _sStyleBody[i][2]
			_sContentStrings[i][2]
			style _sStyleBody[i][3]
			_sContentStrings[i][3]
			style _sStyleBody[i][4]
			_sContentStrings[i][4]
			style _sStyleBody[i][5]
			_sContentStrings[i][5]
			style _sStyleBody[i][6]
			_sContentStrings[i][6]
			style _sStyleBody[i][7]
			_sContentStrings[i][7]
			style _sStyleBody[i][8]
			_sContentStrings[i][8]
			style _sStyleBody[i][9]
			_sContentStrings[i][9]
			style _sStyleBody[i][10]
			_sContentStrings[i][10]
			style _sStyleBody[i][11]
			_sContentStrings[i][11]
			style _sStyleBody[i][12]
			_sContentStrings[i][12]
			style _sStyleBody[i][13]
			_sContentStrings[i][13]
			style _sStyleBody[i][14]
			_sContentStrings[i][14]
			style _sStyleBody[i][15]
			_sContentStrings[i][15]
			style _sStyleBody[i][16]
			_sContentStrings[i][16]
			style _sStyleBody[i][17]
			_sContentStrings[i][17]
			style _sStyleBody[i][18]
			_sContentStrings[i][18]
			style _sStyleBody[i][19]
			_sContentStrings[i][19]
			style _sStyleBody[i][20]
			_sContentStrings[i][20]
			style _sStyleBody[i][21]
			_sContentStrings[i][21]
			style _sStyleBody[i][22]
			_sContentStrings[i][22]
			style _sStyleBody[i][23]
			_sContentStrings[i][23]
			style _sStyleBody[i][24]
			_sContentStrings[i][24]
			style _sStyleBody[i][25]
			_sContentStrings[i][25]
			style _sStyleBody[i][26]
			_sContentStrings[i][26]
			style _sStyleBody[i][27]
			_sContentStrings[i][27]
			style _sStyleBody[i][28]
			_sContentStrings[i][28]
			style _sStyleBody[i][29]
			_sContentStrings[i][29]
			style _sStyleBody[i][30]
			_sContentStrings[i][30]
		endparagraph
	endif

	_stNameTB			= "nameTextBlock"
	_widthTB			= _widthTextBlock
	_angleTB			= 0 			! table elements dont use readable rotation by rows (full table rotating instead)
	if not(bAlwaysReadable) | (bAlwaysReadable and _angleTB < 180-EPS) then
		_iAnchorTB	= _iReferencePoint
	else
		_iAnchorTB  = 5
		if _iReferencePoint	= 1 then _iAnchorTB = 9
		if _iReferencePoint	= 2 then _iAnchorTB = 8
		if _iReferencePoint	= 3 then _iAnchorTB = 7
		if _iReferencePoint	= 4 then _iAnchorTB = 6
		if _iReferencePoint	= 6 then _iAnchorTB = 4
		if _iReferencePoint	= 7 then _iAnchorTB = 3
		if _iReferencePoint	= 8 then _iAnchorTB = 2
		if _iReferencePoint	= 9 then _iAnchorTB = 1
	endif
	_ratioWidthTB		= widthFactorTextBlock			! width_factor: Character widths defined by the actual style will be multiplied by this number
	_ratioCharspaceTB	= charspaceFactorTextBlock		! charspace_factor: The horizontal distance between two characters will be multiplied by this number
	_iScale 			= iFixedHeightTextBlock			! fixed_height: Possible values: 		1: the placed TEXTBLOCK will be scale-independent and all specified length type parameters will mean millimeters, 
														!		 								0: the placed TEXTBLOCK will be scale-dependent and all specified length type parameters will mean meters in model space.

	textblock _stNameTB _widthTB,
		_iAnchorTB, _angleTB, _ratioWidthTB, _ratioCharspaceTB, _iScale,
		_stNamePG

	rrr = REQUEST ("TEXTBLOCK_INFO", _stNameTB, _widthTB, _heightTB)

	if _drawRichText then
		richtext2 _xPosTB, _yPosTB, _stNameTB
	endif
return
]]>
</Script_2D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_1D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
EPS = 0.0001
DOT_IN_MM = 72 / 25.4

dim _stLabelOrientation[4]
	_stLabelOrientation[1] = `Параллельно`
	_stLabelOrientation[2] = `Вертикально`
	_stLabelOrientation[3] = `Горизонтально`
	_stLabelOrientation[4] = `Специальный`

ORIENTATION_PARALLEL			= 1
ORIENTATION_VERTICAL			= 2
ORIENTATION_HORIZONTAL			= 3
ORIENTATION_CUSTOM				= 4

dim _stRefPoint[9]
	_stRefPoint[1] = `Верхняя Левая`
	_stRefPoint[2] = `Верх Центр`
	_stRefPoint[3] = `Верхняя Правая`
	_stRefPoint[4] = `Средняя Левая`
	_stRefPoint[5] = `Середина Центр`
	_stRefPoint[6] = `Средняя Правая`
	_stRefPoint[7] = `Нижняя Левая`
	_stRefPoint[8] = `Низ Центр`
	_stRefPoint[9] = `Нижняя Правая`

dim _valuesRefPoint[9]
dim _picIdxRefPoint[9]
for i = 1 to 9
	_picIdxRefPoint[i] = i
	_valuesRefPoint[i] = i
next i

dim _stAlignment[3]
	_stAlignment[1] = `Слева`
	_stAlignment[2] = `По центру`
	_stAlignment[3] = `Справа`

IDALIGN_LEFT		= 1
IDALIGN_CENTER		= 2
IDALIGN_RIGHT		= 3

dim _stFrameStyles[6]
	_stFrameStyles[1] = `Стиль 1`
	_stFrameStyles[2] = `Стиль 2`
	_stFrameStyles[3] = `Стиль 3`
	_stFrameStyles[4] = `Стиль 4`
	_stFrameStyles[5] = `Стиль 5`
	_stFrameStyles[6] = `Стиль 6`

FRAME_STYLE1		= 1
FRAME_STYLE2		= 2
FRAME_STYLE3		= 3
FRAME_STYLE4		= 4
FRAME_STYLE5		= 5
FRAME_STYLE6		= 6

dim sAutoCustom[2]
	sAutoCustom[1] = `Автоматически`
	sAutoCustom[2] = `Специальный`

VALUE_AUTOMATIC		= 1
VALUE_CUSTOM		= 2

! Alignment for table columns
! 0: custom alignment by columns 1: left aligned, 2: center aligned, 3: right aligned, 4: full justified

if iAlignmentTableColumns > EPS then
	_iAlignmentPrefixBody 	= 1
	_iAlignmentContentBody 	= 1

	if bUsePrefixColumn & bUseContentColumn then
		if iAlignmentTableColumns = 2 then
			_iAlignmentPrefixBody 	= 3
			_iAlignmentContentBody 	= 1
		endif
		if iAlignmentTableColumns = 3 then
			_iAlignmentPrefixBody 	= 3
			_iAlignmentContentBody 	= 3
		endif
		if iAlignmentTableColumns = 4 then
			_iAlignmentPrefixBody 	= 1
			_iAlignmentContentBody 	= 3
		endif
	else
		_iAlignmentPrefixBody = iAlignmentTableColumns
		_iAlignmentContentBody = iAlignmentTableColumns
	endif
else
	_iAlignmentPrefixBody 	= iAlignmentPrefixBody
	_iAlignmentContentBody 	= iAlignmentContentBody
endif

_iStyleFontHeader = bBoldStyleHeader + bItalicStyleHeader * 2 + bUnderlineStyleHeader * 4 + bStrikethroughStyleHeader * 128
if iLineSpaceHeader = VALUE_AUTOMATIC then
	_sizeLeadingHeader = 1
else
	_sizeLeadingHeader = (max (EPS,sizeLineSpaceHeader_mm))/sizeFontHeader_mm
endif

if not(bEnableCustomHeaderStyle) then bUseCustomHeaderStyle = 0

if not(bUseCustomHeaderStyle) then
	penTextHeader			= penTextBody
	fontTypeHeader			= sTypeFontBody
	_iStyleFontHeader		= iStyleFontBody
	sizeFontHeader_mm		= sizeFontBody
	_sizeLeadingHeader		= sizeLeadingBody
	iAlignmentHeader		= iAlignmentTableColumns
endif

if not(bUseBuiltinPointer) then
	AC_CustomReadability = 1
	parameters AC_CustomReadability = AC_CustomReadability
else
	! With AC Arrow
	lock "iLabelOrientation", "iReferencePoint"
	hideparameter "iLabelOrientation", "iReferencePoint"

	AC_CustomReadability = 0
	parameters AC_CustomReadability = AC_CustomReadability
endif

if not(bShowFrame) then
	lock "iFrameStyle"
endif

]]>
</Script_1D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_PR SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_PR>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_UI SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
w_units_form = ""
rrr = request("Working_length_unit", "", w_units_form)
_bMetricDimension = strstr(w_units_form, "m")		! m, cm, mm


inFieldHeight = 19
outFieldHeight = 15
penBoxHeight = 19
buttonHeight = 20

inFieldWidth1 = 130
inFieldWidth2 = 120
inFieldWidth3 = 100
penBoxWidth = 33
buttonWidth = 20

pageStartX = 1
pageStartY = 40

if bWrapText then
	_BoxWidthTooltipLeft = `Ширина Текста Столбца Названий Параметров`
	_BoxWidthTooltipRight = `Ширина Текста Столбца Значений`
else
	_BoxWidthTooltipLeft = `Ширина Текста Столбца Названий Параметров. Активируется при включении Переноса Текста в панели Стиля Текста.`
	_BoxWidthTooltipRight = `Ширина Текста Столбца Значений. Активируется при включении Переноса Текста в панели Стиля Текста.`
endif


file_dependence "ui_InfoIcon_flat(1)"

if idTab_HeaderStyle > 0 and gs_ui_current_page = idTab_HeaderStyle then
	ui_page idTab_HeaderStyle
		gosub "HeaderStylePage"
endif


if idTab_FrameStyle > 0 and gs_ui_current_page = idTab_FrameStyle then
	ui_page idTab_FrameStyle 
		gosub "AppearancePage"
endif


! ==============================================================================
end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! en
! ==============================================================================


! ==============================================================================
"HeaderStylePage":
! ------------------------------------------------------------------------------

	x1 = pageStartX
	x2 = 180
	x3 = x2 + inFieldWidth1
	x4 = x3 + 13
	x5 = x4 + inFieldWidth2

	yCurr = pageStartY

	dy = 40
		
	ui_style 0,1
	ui_infield{3} "bUseCustomHeaderStyle", x1, yCurr,	440-x1, outFieldHeight,
			7, "", 2, 1, 0, 0, 0, 0,
			1, `Заменить Стиль Текста Первой Строки`, 0,
			2, `Заменить Стиль Текста Первой Строки`, 1
	ui_style 0,0
	yCurr = yCurr + dy

	_hiddenFlag = 4 * bUseCustomHeaderStyle

	ui_infield{3} "iAlignmentHeader", x2/2 - 74/2, yCurr, 74, 50,
		2, 2,		! ui_IDAlign
		3, 1,
		59, 38, 59, 38,
		1, _stAlignment[1], IDALIGN_LEFT,
		2, _stAlignment[2], IDALIGN_CENTER,
		3, _stAlignment[3], IDALIGN_RIGHT


	if bUseCustomHeaderStyle then
		ui_pict "Pen Colour_flat(1)", x2 - 20, yCurr, 13, 19, 1
	else
		ui_pict "Pen ColourLock_flat(1)", x2 - 20, yCurr, 13, 19, 1
	endif

	ui_infield{3} "penTextHeader", x2, yCurr, penBoxWidth, penBoxHeight		
	ui_infield{3} "fontTypeHeader", x2 + penBoxWidth+2, yCurr, x5 - x2 - penBoxWidth-15, inFieldHeight
	
	dy = 35
	yCurr = yCurr + dy
	
	pictx = 27
	picty = 14

	if bUseCustomHeaderStyle then
		ui_pict "ui_FontSize_flat(1)", x2 - 30, yCurr-2, pictx, picty, 1
	else
		ui_pict "ui_FontSize_hide_flat(1)", x2 - 30, yCurr-2, pictx, picty, 1
	endif
	
	if _bMetricDimension then	
		ui_infield{3} "sizeFontHeader_mm", x2, yCurr-4,	penBoxWidth, inFieldHeight
		ui_outfield `мм`, x2 + penBoxWidth + 2, yCurr, 30, outFieldHeight,_hiddenFlag + 2
	else
		ui_infield{3} "sizeFontHeader_pt", x2, yCurr-4,	penBoxWidth, inFieldHeight
		ui_outfield `пт`, x2 + penBoxWidth + 2, yCurr, 30, outFieldHeight,_hiddenFlag + 2
	endif

	xdiff = 3
	ui_infield{3} "bBoldStyleHeader", x4, yCurr-4*2, buttonWidth, buttonHeight,
			6, "",
			2,
			1, 16, 16, 16, 16,
			"ui_bold_flat(1)", "", 0,
			"ui_bold_flat(1)", "", 1\
			ui_tooltip `Жирный`
		
	
	ui_infield{3} "bItalicStyleHeader", x4+(buttonWidth+xdiff), yCurr-4*2, buttonWidth, buttonHeight,
			6, "",
			2,
			1, 16, 16, 16, 16,
			"ui_italic_flat(1)", "", 0,
			"ui_italic_flat(1)", "", 1\
			ui_tooltip `Курсив`
		
	ui_infield{3} "bUnderlineStyleHeader", x4+2*(buttonWidth+xdiff), yCurr-4*2, buttonWidth, buttonHeight,
			6, "",
			2,
			1, 16, 16, 16, 16,
			"ui_underline_flat(1)", "", 0,
			"ui_underline_flat(1)", "", 1\
			ui_tooltip `Подчеркнутый`
		
	ui_infield{3} "bStrikethroughStyleHeader", x4+3*(buttonWidth+xdiff), yCurr-4*2, buttonWidth, buttonHeight,
			6, "",
			2,
			1, 16, 16, 16, 16,
			"ui_text_strikethrough_flat(1)", "", 0,
			"ui_text_strikethrough_flat(1)", "", 1\
			ui_tooltip `Зачеркнутый`

	dy = 45

	yCurr = yCurr + dy

	ui_outfield `Межстрочное Расстояние`, x2/2 - 74/2, yCurr, x2-(x2/2 - 74/2), outFieldHeight
	ui_infield{3} "iLineSpaceHeader",	x2, yCurr-4, x3-x2, inFieldHeight,
			8, "", 3, 1, 0, 0, 0, 0,
			"", sAutoCustom[VALUE_AUTOMATIC], VALUE_AUTOMATIC,
			"", sAutoCustom[VALUE_CUSTOM], VALUE_CUSTOM

	if _bMetricDimension then	
		ui_infield{3} "sizeLineSpaceHeader_mm", x4, yCurr-4,	x5-x4 - 30, inFieldHeight
		ui_outfield `мм`, x5-30, yCurr, 30, outFieldHeight, _hiddenFlag + 2
	else
		ui_infield{3} "sizeLineSpaceHeader_pt", x4, yCurr-4,	x5-x4 - 30, inFieldHeight
		ui_outfield `пт`, x5-30, yCurr, 30, outFieldHeight, _hiddenFlag + 2
	endif

return


! =============================================================================
"AppearancePage":
! ------------------------------------------------------------------------------

	x1 = pageStartX
	x2 = 150
	x3 = x2 + 5
	x4 = 313
	x5 = x4 + inFieldWidth3

	yCurr = pageStartY - 3

	dy = 24

	ySep = yBottomPosGeneral

	ui_separator x2, yCurr, x2, ySep


	ui_style 0,1
	ui_outfield `Стиль Рамки`, x1, yCurr, x2-x1-1, outFieldHeight
	ui_style 0,0
	yCurr = yCurr + dy
	
	ui_infield{3} "iFrameStyle", x1+50, yCurr, 78, 94,
		2, 1,			! ui_frameTypes
		7, 1,
		64, 78, 64, 78,
		2, _stFrameStyles[FRAME_STYLE1], FRAME_STYLE1,
		3, _stFrameStyles[FRAME_STYLE2], FRAME_STYLE2,
		4, _stFrameStyles[FRAME_STYLE3], FRAME_STYLE3,
		5, _stFrameStyles[FRAME_STYLE4], FRAME_STYLE4,
		6, _stFrameStyles[FRAME_STYLE5], FRAME_STYLE5,
		7, _stFrameStyles[FRAME_STYLE6], FRAME_STYLE6

	if not(bShowFrame) then
		_pictPosition	= yCurr + 80	! yCurr + 94 - 14
		_stInfoNote		= `Включить рамку можно в панели Стиля Текста.`

		if yBottomPosGeneral > 200 then
			ui_pict "ui_InfoIcon_flat(1)", x1, yBottomPosGeneral-outFieldHeight*3 - 17, 14, 14, 1
			ui_outfield _stInfoNote	, x1, yBottomPosGeneral-outFieldHeight*3, x2-x1-1, outFieldHeight*3
		else
			ui_pict "ui_InfoIcon_flat(1)", x1, _pictPosition, 14, 14, 1	ui_tooltip _stInfoNote	
		endif
	endif

	_hiddenFlagLeft = 4 * (not(bWrapText) | not(bUsePrefixColumn))

	_hiddenFlagRight = 4 * (not(bWrapText) | not(bUseContentColumn))

	yCurr = pageStartY - 3
	dy = min(28, 32/235 * yBottomPosGeneral)

	ui_outfield `Ширина Текста Названий`, x3, yCurr, x4-x3-1, outFieldHeight, _hiddenFlagLeft
	if _bMetricDimension then 
		ui_infield "widthTextBoxPrefix_mm", x4, yCurr-4, x5-x4-1, inFieldHeight ui_tooltip _BoxWidthTooltipLeft
		ui_outfield `мм`, x5, yCurr, 30, outFieldHeight, 2 + _hiddenFlagLeft
	else
		ui_infield "widthTextBoxPrefix_pt", x4, yCurr-4, x5-x4-1, inFieldHeight ui_tooltip _BoxWidthTooltipLeft
		ui_outfield `пт`, x5, yCurr, 30, outFieldHeight, 2 + _hiddenFlagLeft
	endif
	yCurr = yCurr + dy

	ui_outfield `Ширина Текста Значений`, x3, yCurr, x4-x3-1, outFieldHeight, _hiddenFlagRight
	if _bMetricDimension then 
		ui_infield "widthTextBoxContent_mm", x4, yCurr-4, x5-x4-1, inFieldHeight ui_tooltip _BoxWidthTooltipRight
		ui_outfield `мм`, x5, yCurr, 30, outFieldHeight, 2 + _hiddenFlagRight
	else
		ui_infield "widthTextBoxContent_pt", x4, yCurr-4, x5-x4-1, inFieldHeight ui_tooltip _BoxWidthTooltipRight
		ui_outfield `пт`, x5, yCurr, 30, outFieldHeight, 2 + _hiddenFlagRight
	endif
	yCurr = yCurr + dy
	
	ui_outfield `Ориентация`,x3, yCurr, x4-x3-1, outFieldHeight
	ui_infield{3} "iLabelOrientation",	x4, yCurr-4, x5-x4-1, 40,
		2, "ui_label_orientation_flat(1)", 6, 2,
		35, 35, 32, 32,
		5, _stLabelOrientation[ORIENTATION_PARALLEL],	ORIENTATION_PARALLEL,
		2, _stLabelOrientation[ORIENTATION_VERTICAL],	ORIENTATION_VERTICAL,
		1, _stLabelOrientation[ORIENTATION_HORIZONTAL], ORIENTATION_HORIZONTAL,
		3, _stLabelOrientation[ORIENTATION_CUSTOM],		ORIENTATION_CUSTOM
	yCurr = yCurr + dy + 40 - inFieldHeight
	
	ui_outfield		`Точка Привязки`,	x3, yCurr,		x4-x3-1,	outFieldHeight
	ui_infield{3}	"iReferencePoint",	x4, yCurr-4,	x5-x4,		45,
		3, "ui_anchorpoint_flat(1)", 9, 3, 41, 41, 41, 41,
		_picIdxRefPoint, _stRefPoint, _valuesRefPoint
		
return
]]>
</Script_UI>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="1" length_in_bytes="602" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D49484452000001C00000
	004E08030000008036365D00000033504C5445F2F2F2D1D1D1EDEDEDEFEFEFDB
	DBDBDADADAEBEBEBECECECD2D2D2DDDDDDF0F0F0D4D4D4D8D8D8F1F1F1DBDBDB
	000000FFFFFF003730900000000E74524E530000000000000000000000000000
	AAE86E57000001BE4944415478DAEDDDC14E83401485E10A21AC88BEFF5BEA8E
	1044BB302E34A59D5B7A19FA9D2DF907E2C9B9438F93B63951D56AFC09AA37F0
	2DA0F312AF01E1A3BC04D69EC06188E0C370E65F0A858FF312587B02E73982CF
	333E9797401F23681F067EDEA4BF2BE1537809344229D5C0718CE0E388CFE525
	D0082506D21D0C6C6ED23F2BE1337809344229D5C06589E0CB720F7E29147E59
	24D0088DABFC1F9A113ABEC215CFBF7231CE4BE0511278B131BFA24EC7E7F012
	680F240652B9815D17C1BB0E9FCB3717AAB88B3DDD15551EFE01BC116A0FAC5F
	E555D6E6F75FB9C840093C82A255DA86F757A51D3E813F93BCACCAF9DD09F039
	BC04DA038981C4C0A7375095A54AA38C04B66D046FDB23F0E555DAE6F75FB9D8
	B612E8254695A64AA378029D0A732A8D3212384D117C9AF0B9BC047A0B25551A
	5E9566843EB19C4AA3BC04C60AA168A1B40FBEBC4ADBFCFEAB172550958657A5
	91B75006120329C1C0BE8F54397D8FCFE525D00855A5A556697BF8B23B7C392F
	8127A7D24895862FAED2FC7A58DDBC11EA63043190E2063A15E6541AD53A42A3
	55D48EABACE8F3AF5661E12ACDCFBFD5CD7F27F03DA0F3221F01DD83AFFDF963
	BC3DB0727D015EB0DF11E8B0906B0000000049454E44AE426082
	]]>
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="2" length_in_bytes="384" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D49484452000000B10000
	002608060000008B4A7A3E0000013D4944415478DAEDD9C10D83300C4661EFBF
	1D8803023101B043E515ECA83F76DEE1CB31E815AB29C5DEF7054A9BFE03407D
	F63C4F8899DD0A7EED205A9BB6A662CFF3B47F4AC6D2FAD15686981B3B7D2B47
	2CAD2D7E4E00720C3118E2880647A7A3BF41BFDDF71D31F401C0F7F23D05E8AF
	DFCF10D33FF9108F22BC89F437E8F705906388C1100B8E13C5B1436BF156FD83
	9DFE0180D6A6AD765D57842CD6AF1D446BD3D654AC402696D6A6ADBE00A5F9D7
	39509A1DC71131FCD8F13D05E86FD06FFBBE470C7FEDE87B0AD05FBF9F21A67F
	F2211E457813E96FD06FDBB6019531C4987788657F8A2762696DDA9A8815BC9E
	CCC5D2DAB4D5D6758D90C5FAB583686DDA9A8A15C8C4D2DAB4D517408E210643
	1CD1E0E874F437E84F45147F8871F47FA09F21E6264EDF6FCBB2440C3F4E7C4F
	01FA1BF4FB02C831C498DA0FB702FCE4D5710FAE0000000049454E44AE426082
	]]>
</GDLPict>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_VL SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
lock "A"
lock "B"

w_units_form = ""
rrr = request("Working_length_unit", "", w_units_form)
_bMetricDimension = strstr(w_units_form, "m")		! m, cm, mm

! -> zero means automatic calculations
values "widthTextBoxContent_mm" range [sizeFontBody*2,)
values "widthTextBoxContent_pt" range [sizeFontBody*2 * DOT_IN_MM,)
values "widthTextBoxPrefix_mm" range [sizeFontBody*2,)
values "widthTextBoxPrefix_pt" range [sizeFontBody*2 * DOT_IN_MM,) 


if _bMetricDimension then 
	lock "widthTextBoxPrefix_pt", "widthTextBoxContent_pt"
	hideparameter "widthTextBoxPrefix_pt", "widthTextBoxContent_pt"
else
	lock "widthTextBoxPrefix_mm", "widthTextBoxContent_mm"
	hideparameter "widthTextBoxPrefix_mm", "widthTextBoxContent_mm"
endif

if not(bWrapText) then
	lock "widthTextBoxContent_mm", "widthTextBoxContent_pt"
	lock "widthTextBoxPrefix_mm", "widthTextBoxPrefix_pt"
else
	if GLOB_MODPAR_NAME = "widthTextBoxContent_pt" then
		widthTextBoxContent_mm = widthTextBoxContent_pt / DOT_IN_MM
		parameters widthTextBoxContent_mm = widthTextBoxContent_mm
	else
		widthTextBoxContent_pt = widthTextBoxContent_mm * DOT_IN_MM
		parameters widthTextBoxContent_pt = widthTextBoxContent_pt
	endif

	if bUsePrefixColumn then
		if GLOB_MODPAR_NAME = "widthTextBoxPrefix_pt" then
			widthTextBoxPrefix_mm = widthTextBoxPrefix_pt / DOT_IN_MM
			parameters widthTextBoxPrefix_mm = widthTextBoxPrefix_mm
		else
			widthTextBoxPrefix_pt = widthTextBoxPrefix_mm * DOT_IN_MM
			parameters widthTextBoxPrefix_pt = widthTextBoxPrefix_pt
		endif
	else
		lock "widthTextBoxPrefix_mm", "widthTextBoxPrefix_pt"
	endif
endif

if not(bUseContentColumn) then
	lock "widthTextBoxContent_pt", "widthTextBoxContent_mm"
	hideparameter "widthTextBoxContent_pt", "widthTextBoxContent_mm"
endif
if not(bUsePrefixColumn) then
	lock "widthTextBoxPrefix_pt", "widthTextBoxPrefix_mm"
	hideparameter "widthTextBoxPrefix_pt", "widthTextBoxPrefix_mm"
endif


values{2} "iFrameStyle" FRAME_STYLE1,	_stFrameStyles[FRAME_STYLE1],
						FRAME_STYLE2,	_stFrameStyles[FRAME_STYLE2],
						FRAME_STYLE3,	_stFrameStyles[FRAME_STYLE3],
						FRAME_STYLE4,	_stFrameStyles[FRAME_STYLE4],
						FRAME_STYLE5,	_stFrameStyles[FRAME_STYLE5],
						FRAME_STYLE6,	_stFrameStyles[FRAME_STYLE6]


values{2} "iLabelOrientation" 	ORIENTATION_PARALLEL, 		_stLabelOrientation[ORIENTATION_PARALLEL],
								ORIENTATION_VERTICAL, 		_stLabelOrientation[ORIENTATION_VERTICAL],
								ORIENTATION_HORIZONTAL, 	_stLabelOrientation[ORIENTATION_HORIZONTAL],
								ORIENTATION_CUSTOM, 		_stLabelOrientation[ORIENTATION_CUSTOM]

values{2} "iReferencePoint" 	_valuesRefPoint, _stRefPoint



if bEnableCustomHeaderStyle then
	values{2} "iAlignmentHeader" 	1, _stAlignment[1],
									2, _stAlignment[2],
									3, _stAlignment[3]

	values{2} "iLineSpaceHeader"	VALUE_AUTOMATIC,	sAutoCustom[1],
									VALUE_CUSTOM,		sAutoCustom[2]

	if iLineSpaceHeader = VALUE_AUTOMATIC then
		lock "sizeLineSpaceHeader_mm", "sizeLineSpaceHeader_pt"
	endif

	w_units_form = ""
	rrr = request("Working_length_unit", "", w_units_form)
	bMetricDimension = strstr(w_units_form, "m")		! m, cm, mm

	if GLOB_MODPAR_NAME = "sizeFontHeader_pt" then
		sizeFontHeader_mm = sizeFontHeader_pt / DOT_IN_MM
		parameters sizeFontHeader_mm = sizeFontHeader_mm
	else
		sizeFontHeader_pt = sizeFontHeader_mm * DOT_IN_MM
		parameters sizeFontHeader_pt = sizeFontHeader_pt
	endif

	if GLOB_MODPAR_NAME = "sizeLineSpaceHeader_pt" then
		sizeLineSpaceHeader_mm = sizeLineSpaceHeader_pt / DOT_IN_MM
		parameters sizeLineSpaceHeader_mm = sizeLineSpaceHeader_mm
	else
		sizeLineSpaceHeader_pt = sizeLineSpaceHeader_mm * DOT_IN_MM
		parameters sizeLineSpaceHeader_pt = sizeLineSpaceHeader_pt
	endif

	if bMetricDimension then
		lock "sizeFontHeader_pt", "sizeLineSpaceHeader_pt"
		hideparameter "sizeFontHeader_pt", "sizeLineSpaceHeader_pt"
	else
		lock "sizeFontHeader_mm", "sizeLineSpaceHeader_mm"
		hideparameter "sizeFontHeader_mm", "sizeLineSpaceHeader_mm"
	endif

	if not(bUseCustomHeaderStyle) then
		lock "penTextHeader",
			"fontTypeHeader",
			"bBoldStyleHeader",
			"bItalicStyleHeader",
			"bUnderlineStyleHeader",
			"bStrikethroughStyleHeader",
			"sizeFontHeader_mm",
			"sizeFontHeader_pt",
			"iAlignmentHeader",
			"iLineSpaceHeader",
			"sizeLineSpaceHeader_mm",
			"sizeLineSpaceHeader_pt"

		hideparameter "penTextHeader",
			"fontTypeHeader",
			"bBoldStyleHeader",
			"bItalicStyleHeader",
			"bUnderlineStyleHeader",
			"bStrikethroughStyleHeader",
			"sizeFontHeader_mm",
			"sizeFontHeader_pt",
			"iAlignmentHeader",
			"iLineSpaceHeader",
			"sizeLineSpaceHeader_mm",
			"sizeLineSpaceHeader_pt"
	endif
endif




]]>
</Script_VL>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_FWM SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_FWM>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_BWM SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_BWM>

<ParamSection SectVersion="26" SectionFlags="0" SubIdent="0">
	<ParamSectHeader>
		<Version>26</Version>
		<AutoHotspots>false</AutoHotspots>
		<StatBits>
			<STBit_FixSize/>
		</StatBits>
		<WDLeftFrame>0</WDLeftFrame>
		<WDRightFrame>0</WDRightFrame>
		<WDTopFrame>0</WDTopFrame>
		<WDBotFrame>0</WDBotFrame>
		<LayFlags>65535</LayFlags>
		<WDMirrorThickness>0</WDMirrorThickness>
		<WDWallInset>0</WDWallInset>
		<SymbolColor>0</SymbolColor>
	</ParamSectHeader>
	<Parameters>
		<Length Name="A">
			<Description><![CDATA["Dimension 1"]]></Description>
			<Fix/>
			<Value>1</Value>
		</Length>
		<Length Name="B">
			<Description><![CDATA["Dimension 2"]]></Description>
			<Fix/>
			<Value>1</Value>
		</Length>
		<Boolean Name="AC_CustomReadability">
			<Description><![CDATA[""]]></Description>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="bUseBuiltinPointer">
			<Description><![CDATA[""]]></Description>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="bAlwaysReadable">
			<Description><![CDATA[""]]></Description>
			<Value>0</Value>
		</Boolean>
		<Angle Name="anglePosition">
			<Description><![CDATA[""]]></Description>
			<Value>0</Value>
		</Angle>
		<Angle Name="angleParentPosition">
			<Description><![CDATA[""]]></Description>
			<Value>0</Value>
		</Angle>
		<Boolean Name="bUsePrefixColumn">
			<Description><![CDATA[""]]></Description>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="bUseContentColumn">
			<Description><![CDATA[""]]></Description>
			<Value>0</Value>
		</Boolean>
		<String Name="sPrefixStrings">
			<Description><![CDATA[""]]></Description>
			<ArrayValues FirstDimension="3" SecondDimension="0">
				<AVal Row="1"><![CDATA[""]]></AVal>
				<AVal Row="2"><![CDATA[""]]></AVal>
				<AVal Row="3"><![CDATA[""]]></AVal>
			</ArrayValues>
		</String>
		<String Name="sContentStrings">
			<Description><![CDATA[""]]></Description>
			<ArrayValues FirstDimension="3" SecondDimension="3">
				<AVal Column="1" Row="1"><![CDATA[""]]></AVal>
				<AVal Column="2" Row="1"><![CDATA[""]]></AVal>
				<AVal Column="3" Row="1"><![CDATA[""]]></AVal>
				<AVal Column="1" Row="2"><![CDATA[""]]></AVal>
				<AVal Column="2" Row="2"><![CDATA[""]]></AVal>
				<AVal Column="3" Row="2"><![CDATA[""]]></AVal>
				<AVal Column="1" Row="3"><![CDATA[""]]></AVal>
				<AVal Column="2" Row="3"><![CDATA[""]]></AVal>
				<AVal Column="3" Row="3"><![CDATA[""]]></AVal>
			</ArrayValues>
		</String>
		<Boolean Name="bWrapText">
			<Description><![CDATA[""]]></Description>
			<Value>0</Value>
		</Boolean>
		<RealNum Name="widthTextBoxPrefix_mm">
			<Description><![CDATA[""]]></Description>
			<Value>15</Value>
		</RealNum>
		<RealNum Name="widthTextBoxPrefix_pt">
			<Description><![CDATA[""]]></Description>
			<Value>42.5196</Value>
		</RealNum>
		<RealNum Name="widthTextBoxContent_mm">
			<Description><![CDATA[""]]></Description>
			<Value>15</Value>
		</RealNum>
		<RealNum Name="widthTextBoxContent_pt">
			<Description><![CDATA[""]]></Description>
			<Value>42.5196</Value>
		</RealNum>
		<Boolean Name="bEnableCustomHeaderStyle">
			<Description><![CDATA[""]]></Description>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="bUseCustomHeaderStyle">
			<Description><![CDATA[""]]></Description>
			<Value>0</Value>
		</Boolean>
		<Length Name="xFirstIndentParagraph">
			<Description><![CDATA[""]]></Description>
			<Value>0</Value>
		</Length>
		<Length Name="xLeftIndentParagraph">
			<Description><![CDATA[""]]></Description>
			<Value>0</Value>
		</Length>
		<Length Name="xRightIndentParagraph">
			<Description><![CDATA[""]]></Description>
			<Value>0</Value>
		</Length>
		<RealNum Name="xTabPositionParagraph">
			<Description><![CDATA[""]]></Description>
			<Value>0</Value>
		</RealNum>
		<RealNum Name="widthFactorTextBlock">
			<Description><![CDATA[""]]></Description>
			<Value>1</Value>
		</RealNum>
		<RealNum Name="charspaceFactorTextBlock">
			<Description><![CDATA[""]]></Description>
			<Value>1</Value>
		</RealNum>
		<Integer Name="iFixedHeightTextBlock">
			<Description><![CDATA[""]]></Description>
			<Value>0</Value>
		</Integer>

		<!-- label_tabl_sp1: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="label_tabl_sp1">
			<Description><![CDATA["Header Appearance"]]></Description>
		</Title>
		<PenColor Name="penTextHeader">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>3</Value>
		</PenColor>
		<String Name="fontTypeHeader">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<Integer Name="iStyleFontHeader">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Integer>
		<RealNum Name="sizeFontHeader_mm">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>4</Value>
		</RealNum>
		<RealNum Name="sizeFontHeader_pt">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>11.3385826772</Value>
		</RealNum>
		<Boolean Name="bBoldStyleHeader">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="bItalicStyleHeader">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="bUnderlineStyleHeader">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="bStrikethroughStyleHeader">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Integer Name="iAlignmentHeader">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Integer Name="iLineSpaceHeader">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<RealNum Name="sizeLineSpaceHeader_mm">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>3</Value>
		</RealNum>
		<RealNum Name="sizeLineSpaceHeader_pt">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>8.50393700787</Value>
		</RealNum>

		<!-- label_tabl_sp0: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="label_tabl_sp0">
			<Description><![CDATA["Body Box Appearance"]]></Description>
		</Title>
		<PenColor Name="penTextBody">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>3</Value>
		</PenColor>
		<String Name="sTypeFontBody">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<RealNum Name="sizeFontBody">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>3</Value>
		</RealNum>
		<Integer Name="iStyleFontBody">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Integer>
		<Integer Name="iAlignmentTableColumns">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Integer>
		<Integer Name="iAlignmentPrefixBody">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Integer Name="iAlignmentContentBody">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<RealNum Name="sizeLeadingBody">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</RealNum>
		<RealNum Name="widthTextBoxOffset">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>

		<!-- label_tabl_sp2: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="label_tabl_sp2">
			<Description><![CDATA["Representation"]]></Description>
		</Title>
		<Boolean Name="bShowFill">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<FillPattern Name="filltype">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>65</Value>
		</FillPattern>
		<PenColor Name="penForeground">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>22</Value>
		</PenColor>
		<PenColor Name="penBackground">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</PenColor>
		<Boolean Name="bShowFrame">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<PenColor Name="penFrame">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>3</Value>
		</PenColor>
		<LineType Name="lineTypeFrame">
			<Description><![CDATA[""]]></Description>
			<Value>1</Value>
		</LineType>
		<Integer Name="iFrameStyle">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Integer>
		<Integer Name="iReferencePoint">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Integer Name="iLabelOrientation">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Integer>

		<!-- label_tabl_sp3: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="label_tabl_sp3">
			<Description><![CDATA["UI controlls"]]></Description>
		</Title>
		<Integer Name="yBottomPosGeneral">
			<Description><![CDATA[""]]></Description>
			<Value>235</Value>
		</Integer>
		<Integer Name="gs_ui_current_page">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Integer Name="idTab_HeaderStyle">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Integer Name="idTab_FrameStyle">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>2</Value>
		</Integer>
	</Parameters>
</ParamSection>

<Copyright SectVersion="1" SectionFlags="0" SubIdent="0">
	<Author>GRAPHISOFT</Author>
	<License>
		<Type>CC BY-ND</Type>
		<Version>3.0</Version>
	</License>
</Copyright>

<Keywords SectVersion="1" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Keywords>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Comment SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Comment>

</Symbol>
