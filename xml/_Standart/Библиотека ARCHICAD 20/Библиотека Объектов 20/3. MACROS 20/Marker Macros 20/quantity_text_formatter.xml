<?xml version="1.0" encoding="UTF-8"?>
<Symbol IsArchivable="false" IsPlaceable="false" MainGUID="5E4D02A3-CF83-4DE5-8F7D-C5FF522A117A" MigrationValue="Normal" Owner="1196638531" Signature="1196644685" Version="38">
<Ancestry SectVersion="1" SectionFlags="0" SubIdent="0" Template="false">
	<MainGUID>F938E33A-329D-4A36-BE3E-85E126820996</MainGUID>
	<MainGUID>B176ABF1-5813-478F-926B-28EE7C5DC1F7</MainGUID>
	<MainGUID>4FD10D67-2F29-4844-A65A-6597589B0CB5</MainGUID>
</Ancestry>

<CalledMacros SectVersion="2" SectionFlags="0" SubIdent="0">
</CalledMacros>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_3D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_3D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_2D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_2D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_1D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
EPS = 0.0001

! -- Values for horizontalALignment --
Alignment_Left        = 1
Alignment_Center      = 2
Alignment_Right       = 3
Alignment_IntegerPart = 4

! -- Values for verticalALignment --
Alignment_Bottom      = 1
Alignment_Top         = 2

! bUseTextblock options:
! ------------------------------------------------------------------------------
! possible values 0:
!	old type
!	this type draws the parts of expression one after another
!	anchor is always at left (1/7)
!	contents need to be transformed to follow the alignments
! 
! possible values 1:	
!	this type use pharagraph and textblock commands
!	the anchor point comes about the alignments parameters (horizontalAlignment, verticalAlignment)  
!	contents do not need to be transformed to replace the anchor point
!	wrapping words is an options if widthFixedSize is not empty (0)
! ------------------------------------------------------------------------------

! ------------------------------------------------------------------------------
! Defining Text Style
! ------------------------------------------------------------------------------
iAnchorString = 1
if verticalAlignment = Alignment_Bottom then
	iAnchorString = 7
endif
if bUseTextblock then iAnchorString = iAnchorString + (horizontalALignment -1)

define style "mainStyle"  		AC_TextFont, AC_TextSize,iAnchorString, AC_TextStyle
style "mainStyle"

if not(bUseTextblock) then
	define style "extraStyle" 		AC_TextFont, 2/3*AC_TextSize, iAnchorString, AC_TextStyle
else
	define style{2} "extraStyle2"  AC_TextFont, AC_TextSize, AC_TextStyle + 32 ! superscript
endif

! ------------------------------------------------------------------------------
! Converting Numeric Value to String, Defining Stringsegments
! ------------------------------------------------------------------------------

! Prefix and Main LengthValue
main = ""
frac = ""
szFormattedLength = ""
gosub "split_lengthValue_to_main_frac"
note1 = szPrefix + main

! Unit String
szUnit = ""
szUnitIndex = ""
if bShowUnit then gosub "unit_determinaton_by_iUnitType"

nameStyle = "mainStyle"
gosub "calc_height_n_offsets"

if bUseTextblock then
	gosub "calc_dimesions_of_textblock"
endif

! ------------------------------------------------------------------------------
! Widths of the Stringsegments
! ------------------------------------------------------------------------------

lengthOfNote1	= stw (note1)
lengthOfNote2	= stw (frac) * 2/3
lengthOfNote3	= stw (szUnit)
lengthOfNote4	= stw (szUnitIndex) * 2/3

lengthOfUnit = lengthOfNote3 + lengthOfNote4

if horizontalAlignment = Alignment_IntegerPart then
	lengthOfIntegerPart = stw (strsub (szFormattedLength,0,strstr(szFormattedLength,".")-1))
else
	lengthOfIntegerPart = 0
endif

if not(bUseTextblock) then
	totalLength = lengthOfNote1 + lengthOfNote2 + lengthOfNote3 + lengthOfNote4
else
	! coming from "calc_dimesions_of_textblock" subroutine
endif


! ==============================================================================
!END	!END	!END	!END	!END	!END	!END	!END	!END	!END	!END
! ==============================================================================
END lengthOfNote1,
lengthOfNote2,
lengthOfNote3,
lengthOfNote4,
totalLength,
totalHeight,
lengthOfUnit,
lengthOfIntegerPart,
note1,
frac,
szUnit,
szUnitIndex,
szExtraPrecision,
iAnchorString,
vertOffsetMain,
vertOffsetBox,
vertOffsetExponent

! ==============================================================================
! input:
!    iUnitType, lengthValue
! returns:
!    main, frac
! ==============================================================================
"split_lengthValue_to_main_frac":
	szFormat	= ""
	_isTsubo 	= 0
	if iUnitType > 0 then
		if iUnitType =  1 then
			rrr = request ("Linear_dimension", "", szFormat)
		endif
		if iUnitType =  2 then
			rrr = request ("Angular_dimension", "", szFormat)
		endif
		if iUnitType =  3 then
			rrr = request ("Angular_length_dimension", "", szFormat)
		endif
		if iUnitType =  4 then
			rrr = request ("Radial_dimension", "", szFormat)
		endif
		if iUnitType =  5 then
			rrr = request ("Level_dimension", "", szFormat)
		endif
		if iUnitType =  6 then
			rrr = request ("Elevation_dimension", "", szFormat)
		endif
		if iUnitType =  7 then
			rrr = request ("Window_door_dimension", "", szFormat)
		endif
		if iUnitType =  8 then
			rrr = request ("Sill_height_dimension", "", szFormat)
		endif
		if iUnitType =  9 then
			rrr = request ("Area_dimension", "", szFormat)
		endif
		if iUnitType = 10 then
			rrr = request ("Calc_length_unit", "", szFormat)
		endif
		if iUnitType = 11 then
			rrr = request ("Calc_area_unit", "", szFormat)
		endif
		if iUnitType = 12 then
			rrr = request ("Calc_volume_unit", "", szFormat)
		endif
		if iUnitType = 13 then
			rrr = request ("Calc_angle_unit", "", szFormat)
		endif
	else
		szFormat	= custom_form
		if strstr(szFormat, `Тсубо`) > EPS then
			_isTsubo = 1
			_szFormat = strsub (szFormat, 1, strlen(szFormat) - 5) + "m"
			szFormat = _szFormat
		endif
	endif


	! DIN: removing "hide zero wholes" flag (checkbox in Project Preferences)
	_bHideZeroWholes	= 0
	_zeroFlagPos		= strstr (szFormat, "#")
	if abs(_zeroFlagPos)> EPS then _bHideZeroWholes = 1

	if _bHideZeroWholes & bIgnoreHideZeroWholes then 
		_szFormatPart1	= strsub (szFormat, 1, _zeroFlagPos-1)
		_szFormatPart2	= strsub (szFormat, _zeroFlagPos+1, strlen (szFormat) -_zeroFlagPos)
		szFormat		= _szFormatPart1 + _szFormatPart2
	endif


	szExtraPrecision = ""
	szFormattedLength = ""
	if szFormat <> "" then
		szFormattedLength = str{2}(szFormat, lengthValue, szExtraPrecision)
	endif

	if strstr(szFormat, "*10") <= 0 then
		main = szFormattedLength
		frac = szExtraPrecision
	else

		slash = strstr(szFormattedLength, "/")

		main = ""
		frac = ""

		if not(slash) then	! No Fractions
			main = szFormattedLength
		else				! Fractions
			if slash > 2 then
				slen  = strlen(szFormattedLength)
				main = strsub(szFormattedLength, 1, slash - 3)
				frac = strsub(szFormattedLength, slash - 2, slen)

				if strstr(frac," ") | strstr(frac,"-") then
					temp = frac
					frac = ""
					frac = strsub(temp, 2, strlen(temp))
				endif

				fine = strsub(main, strlen(main), strlen(main))

				if fine = " " | fine = "-" then
					temp = main
					main = ""
					main = strsub(temp, 1, strlen(temp) - 1)
				endif
			else
				frac = szFormattedLength
			endif
		endif
	endif
return


! ==============================================================================
! input:
!    szFormat
! returns:
!    szUnit, szUnitIndex
! ==============================================================================
"unit_determinaton_by_iUnitType":

	szUnitIndex = ""
	_bUnitIsFound = 0

	if _isTsubo then
		szUnit = " " + `Тсубо`	: _bUnitIsFound  = 1
		return
	endif
	if strstr (szFormat, "sq") then
		! Area szUnit strings
		if bShowSuperScript then
			if strstr (szFormat, "sqcm") & not(_bUnitIsFound) then
				szUnit = " " + `см`	:	szUnitIndex = "2"	:	_bUnitIsFound  = 1
			endif
			if strstr (szFormat, "sqmm") & not(_bUnitIsFound) then
				szUnit = " " + `мм`	:	szUnitIndex = "2"	:	_bUnitIsFound  = 1	
			endif
			if strstr (szFormat, "sqm") & not(_bUnitIsFound) then
 				szUnit = " " + `м`  : 	szUnitIndex = "2"	:	_bUnitIsFound  = 1
			endif
		else
			if strstr (szFormat, "sqcm") & not(_bUnitIsFound) then
				szUnit = " " + `см2`	:	_bUnitIsFound  = 1
			endif
			if strstr (szFormat, "sqmm") & not(_bUnitIsFound) then
				szUnit = " " + `мм2` :	_bUnitIsFound  = 1
			endif
			if strstr (szFormat, "sqm") & not(_bUnitIsFound) then
				szUnit = " " + `м2`  :	_bUnitIsFound  = 1
			endif
		endif
		if strstr (szFormat, "sqf") & not(_bUnitIsFound) then
			szUnit = " " + `кв. фут`  :	_bUnitIsFound  = 1
		endif
		if strstr (szFormat, "sqi") & not(_bUnitIsFound) then
			szUnit = " " + `кв. дюйм`  :	_bUnitIsFound  = 1
		endif

	else
		if strstr (szFormat, "cu") then
			! Volume szUnit strings
			if bShowSuperScript then
				if strstr (szFormat, "cucm") & not(_bUnitIsFound) then
					szUnit = " " + `см` : szUnitIndex = "3"  :	_bUnitIsFound  = 1
				endif
				if strstr (szFormat, "cumm") & not(_bUnitIsFound) then
					 szUnit = " " + `мм` : szUnitIndex = "3"  :	_bUnitIsFound  = 1
				endif
				if strstr (szFormat, "cum") & not(_bUnitIsFound) then
					 szUnit = " " + `м`  : szUnitIndex = "3"  :	_bUnitIsFound  = 1
				endif
			else
				if strstr (szFormat, "cucm") & not(_bUnitIsFound) then
					szUnit = " " + `см3`  :	_bUnitIsFound  = 1
				endif
				if strstr (szFormat, "cumm") & not(_bUnitIsFound) then
					szUnit = " " + `мм3`  :	_bUnitIsFound  = 1
				endif
				if strstr (szFormat, "cum") & not(_bUnitIsFound) then
					szUnit = " " + `м3`  :	_bUnitIsFound  = 1
				endif
			endif
			if strstr (szFormat, "cuf") & not(_bUnitIsFound) then
					szUnit = " " + `куб. фут`  :	_bUnitIsFound  = 1
			endif
			if strstr (szFormat, "cui") & not(_bUnitIsFound) then
					szUnit = " " + `куб. дюйм`  :	_bUnitIsFound  = 1
			endif
			if strstr (szFormat, "cuy") & not(_bUnitIsFound) then
					szUnit = " " + `куб. ярд`  :	_bUnitIsFound  = 1
			endif
		else
			! Linear szUnit strings
			if strstr (szFormat, "mm") & not(_bUnitIsFound) then
				szUnit = " " + `мм`  :	_bUnitIsFound  = 1
			endif
			if strstr (szFormat, "cm") & not(_bUnitIsFound) then
				szUnit = " " + `см`  :	_bUnitIsFound  = 1
			endif
			if strstr (szFormat, "m") & not(_bUnitIsFound) then 
				szUnit = " " + `м`  :	_bUnitIsFound  = 1
			endif
			if (strstr (szFormat, "i") | strstr (szFormat, "f") ) & not(_bUnitIsFound) then
				szUnit = ""  :	_bUnitIsFound  = 1
			endif
			! Volume szUnit strings
			if strstr (szFormat, "gal") & not(_bUnitIsFound) then
				szUnit = " " + `галл`  :	_bUnitIsFound  = 1
			endif
			if strstr (szFormat, "l") & not(_bUnitIsFound) then 
				szUnit = " " + `л`  :	_bUnitIsFound  = 1
			endif
		endif
	endif


return

! ==============================================================================
! input:
!    nameStyle, useLeadingAndDescent, AC_TextSize
! returns:
!    vertOffsetMain, vertOffsetExponent, totalHeight
! ==============================================================================
"calc_height_n_offsets":

	rrr = request("Height_of_style", nameStyle, heightStyle, descent, leading)
	dl	= (descent + leading)
	if useLeadingAndDescent then
		vertOffsetBox		= 0
		vertOffsetMain		= 0
		vertOffsetExponent	= dl/3
		totalHeight		= heightStyle
	else
		vertOffsetMain		= -dl
		vertOffsetExponent	= -dl*2/3
		totalHeight		= AC_TextSize
		vertOffsetBox		= -heightStyle + AC_TextSize
	endif
	if verticalAlignment = Alignment_Top then vertOffsetExponent = vertOffsetExponent -dl*4/3

return

! ==============================================================================
! input parameters:
!		widthFixedSize
! input variables:
!		note1, frac, szUnit, szUnitIndex, iAnchorString
! returns:
!		totalLength, totalHeight
! ==============================================================================
"calc_dimesions_of_textblock":

	_stNamePG 			= "nameParaGraph"
	_iAlignPG 			= horizontalAlignment	! 1: left aligned, 2: center aligned, 3: right aligned, 4: full justified
	_xFirstIndent	 	= 0						! meaning millimeters or meters depends on the fixed_height parameter of the TEXTBLOCK definition
	_xLeftIndent 		= 0						! meaning millimeters or meters depends on the fixed_height parameter of the TEXTBLOCK definition
	_xRightIndent 		= 0						! meaning millimeters or meters depends on the fixed_height parameter of the TEXTBLOCK definition
	_ratioLineSpace		= 1						! (character size + distance to the next line) defined by the actual style will be multiplied by this number
	_xTabPos	 		= 0						! consecutive tabulator positions (each relative to the beginning of the paragraph). Default values (0) are used (12.7 mm). Works only with '\t' special character.
	_penindex 			= 1

	PARAGRAPH _stNamePG _iAlignPG,
			_xFirstIndent, _xLeftIndent, _xRightIndent,
			_ratioLineSpace, _xTabPos,
			_penindex
			style "mainStyle"
			note1
			style "extraStyle2"
			frac
			style "mainStyle"
			szUnit
			style "extraStyle2"
			szUnitIndex
	ENDPARAGRAPH

	_stNameTB			= "nameTextBlock"
	_widthTB			= widthFixedSize		! textblock width in mm or m in model space, if 0 it is calculated automatically.
	_iAnchorTB			= iAnchorString				! code of the position point in the text.
	_angleTB			= 0						! rotation angle of the textblock in degrees
	_ratioWidthTB		= 1						! width_factor: Character widths defined by the actual style will be multiplied by this number
	_ratioCharspaceTB	= 1						! charspace_factor: The horizontal distance between two characters will be multiplied by this number
	_iScale 			= 0 ! model				! fixed_height: Possible values: 1: the placed TEXTBLOCK will be scale-independent and all specified length type parameters will mean millimeters, 
														! 								0: the placed TEXTBLOCK will be scale-dependent and all specified length type parameters will mean meters in model space.

	TEXTBLOCK _stNameTB _widthTB,
		_iAnchorTB, _angleTB, _ratioWidthTB, _ratioCharspaceTB, _iScale,
		_stNamePG

	nnn = REQUEST ("TEXTBLOCK_INFO", _stNameTB, widthTB, heightTB )

	totalLength = widthTB
	totalHeight = heightTB
			
return

]]>
</Script_1D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_PR SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_PR>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_UI SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_UI>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_VL SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_VL>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_FWM SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_FWM>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_BWM SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_BWM>

<ParamSection SectVersion="26" SectionFlags="0" SubIdent="0">
	<ParamSectHeader>
		<Version>26</Version>
		<AutoHotspots>false</AutoHotspots>
		<StatBits>
			<STBit_FixSize/>
		</StatBits>
		<WDLeftFrame>0</WDLeftFrame>
		<WDRightFrame>0</WDRightFrame>
		<WDTopFrame>0</WDTopFrame>
		<WDBotFrame>0</WDBotFrame>
		<LayFlags>65535</LayFlags>
		<WDMirrorThickness>0</WDMirrorThickness>
		<WDWallInset>0</WDWallInset>
		<SymbolColor>0</SymbolColor>
	</ParamSectHeader>
	<Parameters>
		<Length Name="A">
			<Description><![CDATA["Dimension 1"]]></Description>
			<Fix/>
			<Value>1</Value>
		</Length>
		<Length Name="B">
			<Description><![CDATA["Dimension 2"]]></Description>
			<Fix/>
			<Value>1</Value>
		</Length>
		<Length Name="lengthValue">
			<Description><![CDATA[""]]></Description>
			<Value>0.001</Value>
		</Length>
		<Integer Name="iUnitType">
			<Description><![CDATA[""]]></Description>
			<Value>1</Value>
		</Integer>
		<String Name="custom_form">
			<Description><![CDATA[""]]></Description>
			<Value><![CDATA[""]]></Value>
		</String>
		<Integer Name="horizontalAlignment">
			<Description><![CDATA[""]]></Description>
			<Value>1</Value>
		</Integer>
		<Integer Name="verticalAlignment">
			<Description><![CDATA[""]]></Description>
			<Value>1</Value>
		</Integer>
		<String Name="AC_TextFont">
			<Description><![CDATA[""]]></Description>
			<Value><![CDATA["Arial"]]></Value>
		</String>
		<RealNum Name="AC_TextSize">
			<Description><![CDATA[""]]></Description>
			<Value>2</Value>
		</RealNum>
		<Integer Name="AC_TextStyle">
			<Description><![CDATA[""]]></Description>
			<Value>0</Value>
		</Integer>
		<String Name="szPrefix">
			<Description><![CDATA[""]]></Description>
			<Value><![CDATA[""]]></Value>
		</String>
		<Boolean Name="bShowText">
			<Description><![CDATA[""]]></Description>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="bShowUnit">
			<Description><![CDATA[""]]></Description>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="bShowSuperScript">
			<Description><![CDATA[""]]></Description>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="bIgnoreHideZeroWholes">
			<Description><![CDATA[""]]></Description>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="useLeadingAndDescent">
			<Description><![CDATA[""]]></Description>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="bUseTextblock">
			<Description><![CDATA[""]]></Description>
			<Value>0</Value>
		</Boolean>
		<RealNum Name="widthfixedSize">
			<Description><![CDATA[""]]></Description>
			<Value>0</Value>
		</RealNum>
	</Parameters>
</ParamSection>

<Copyright SectVersion="1" SectionFlags="0" SubIdent="0">
	<Author>GRAPHISOFT</Author>
	<License>
		<Type>CC BY-ND</Type>
		<Version>3.0</Version>
	</License>
</Copyright>

<Keywords SectVersion="1" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Keywords>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Comment SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Comment>

</Symbol>
