<?xml version="1.0" encoding="UTF-8"?>
<Symbol IsArchivable="false" IsPlaceable="false" MainGUID="61AA9A1B-4B04-4056-BE1E-A87F7E4CEC66" MigrationValue="Normal" Owner="1196638531" Signature="1196644685" Version="43">
<Ancestry SectVersion="1" SectionFlags="0" SubIdent="0" Template="false">
	<MainGUID>F938E33A-329D-4A36-BE3E-85E126820996</MainGUID>
	<MainGUID>B176ABF1-5813-478F-926B-28EE7C5DC1F7</MainGUID>
	<MainGUID>4FD10D67-2F29-4844-A65A-6597589B0CB5</MainGUID>
</Ancestry>

<CalledMacros SectVersion="2" SectionFlags="0" SubIdent="0">
	<Macro>
		<MName><![CDATA["quantity_text_formatter"]]></MName>
		<MainGUID>5E4D02A3-CF83-4DE5-8F7D-C5FF522A117A</MainGUID>
	</Macro>
</CalledMacros>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_3D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_3D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_2D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
! bUseTextblock options:
! ------------------------------------------------------------------------------
! possible values 0:
!	old type
!	this type draws the parts of expression one after another
!	anchor is always at left (1/7)
!	contents need to be transformed to follow the alignments
! 
! possible values 1:	
!	this type use pharagraph and textblock commands
!	the anchor point comes about the alignments parameters (horizontalAlignment, verticalAlignment)  
!	contents do not need to be transformed to replace the anchor point
!	wrapping words is an options if widthFixedSize is not empty (0)
! ------------------------------------------------------------------------------

PAPER_TO_MODEL = GLOB_SCALE / 1000

! ------------------------------------------------------------------------------
! Defining Style
! ------------------------------------------------------------------------------

define style "mainStyle"  AC_TextFont, AC_TextSize, iAnchorString, AC_TextStyle
style "mainStyle"

if not(bUseTextblock) then
	define style "extraStyle" 		AC_TextFont, 2/3*AC_TextSize, iAnchorString, AC_TextStyle
else
	! superscript style
	define style{2} "extraStyle2"  AC_TextFont, AC_TextSize, AC_TextStyle + 32
endif

! ------------------------------------------------------------------------------
! Rotating and positioning
! ------------------------------------------------------------------------------

mul2 PAPER_TO_MODEL, PAPER_TO_MODEL

if not(bUseTextblock) then
	gosub "rotate_accordingto_readable"

	gosub "offset_accordingto_alignment"
endif


! ------------------------------------------------------------------------------
! Text Output
! ------------------------------------------------------------------------------
if bShowText then
	if GLOB_CONTEXT < 20 then
		if bUseTextblock then

			_stNamePG 			= "nameParaGraph"
			_iAlignPG 			= horizontalAlignment	! 1: left aligned, 2: center aligned, 3: right aligned, 4: full justified
			_xFirstIndent	 	= 0						! meaning millimeters or meters depends on the fixed_height parameter of the TEXTBLOCK definition
			_xLeftIndent 		= 0						! meaning millimeters or meters depends on the fixed_height parameter of the TEXTBLOCK definition
			_xRightIndent 		= 0						! meaning millimeters or meters depends on the fixed_height parameter of the TEXTBLOCK definition
			_ratioLineSpace		= 1						! (character size + distance to the next line) defined by the actual style will be multiplied by this number
			_xTabPos	 		= 0						! consecutive tabulator positions (each relative to the beginning of the paragraph). Default values (0) are used (12.7 mm). Works only with '\t' special character.
			_penindex 			= 1

			paragraph _stNamePG _iAlignPG,
					_xFirstIndent, _xLeftIndent, _xRightIndent,
					_ratioLineSpace, _xTabPos,
					_penindex
					style "mainStyle"
					note1
					style "extraStyle2"
					frac
					style "mainStyle"
					szUnit
					style "extraStyle2"
					szUnitIndex
			endparagraph

			_stNameTB			= "nameTextBlock"
			_widthTB			= widthFixedSize		! textblock width in mm or m in model space, if 0 it is calculated automatically.
			_iAnchorTB			= iAnchorString			! code of the position point in the text.
			_angleTB			= 0						! rotation angle of the textblock in degrees
			_ratioWidthTB		= 1						! width_factor: Character widths defined by the actual style will be multiplied by this number
			_ratioCharspaceTB	= 1						! charspace_factor: The horizontal distance between two characters will be multiplied by this number
			_iScale 			= 0 ! model				! fixed_height: Possible values: 1: the placed TEXTBLOCK will be scale-independent and all specified length type parameters will mean millimeters, 
														! 								0: the placed TEXTBLOCK will be scale-dependent and all specified length type parameters will mean meters in model space.

			textblock _stNameTB _widthTB,
				_iAnchorTB, _angleTB, _ratioWidthTB, _ratioCharspaceTB, _iScale,
				_stNamePG

			richtext2 0, 0, _stNameTB
		else

			text2 0, vertOffsetMain, note1

			if frac <> "" then
				style "extraStyle"
				text2 lengthOfNote1, AC_TextSize/3 + vertOffsetExponent, frac
			endif
			if bShowUnit then
				style "mainStyle"
				text2 lengthOfNote1 + lengthOfNote2, vertOffsetMain, szUnit
				if szUnitIndex <> "" then
					style "extraStyle"
					text2 lengthOfNote1 + lengthOfNote2 + lengthOfNote3, vertOffsetMain, szUnitIndex
				endif
			endif
		endif
	else
		if bFeedbackMode then
			if verticalAlignment = Alignment_Bottom then
				rect2 0, 0, totalLength, totalHeight
			else
				add2 0, vertOffsetBox
				rect2 0, -totalHeight, totalLength, 0
				del 1
			endif
		endif
	endif
endif

! ==============================================================================
end totalLength, totalHeight, szExtraPrecision, lengthOfIntegerPart, lengthOfUnit
! ==============================================================================


! ==============================================================================
! input:
!    GS_iMarkerDir, AC_Readable, gs_readable_angle,
!    totalLength, AC_TextSize
! globals:
!    EPS,
!    MarkerDir_Standard, MarkerDir_StandardRotated90,
!    MarkerDir_Horizontal, MarkerDir_Vertical
! ==============================================================================
"rotate_accordingto_readable":
	angleViewRot = 0
	if AC_Readable then
		rrr = REQUEST ("View_Rotangle", "", angleViewRot)
	endif
	totalRotate = (SYMB_ROTANGLE + angleViewRot) MOD 360

	if GS_iMarkerDir = MarkerDir_Standard          then rotdir_angle = 0
	if GS_iMarkerDir = MarkerDir_StandardRotated90 then rotdir_angle = 90
	if GS_iMarkerDir = MarkerDir_Horizontal        then rotdir_angle = -totalRotate
	if GS_iMarkerDir = MarkerDir_Vertical          then rotdir_angle = -totalRotate + 90

	rot2 rotdir_angle
	if AC_Readable then
		if (totalRotate > (gs_readable_angle + EPS) & totalRotate < (gs_readable_angle + 180 + EPS) & GS_iMarkerDir = MarkerDir_Standard) | \
			(totalRotate > (gs_readable_angle - 90 + EPS) & totalRotate < (gs_readable_angle + 180 - 90 + EPS) & GS_iMarkerDir = MarkerDir_StandardRotated90) then
			! turning around: bottom left -> top right corner

			add2 totalLength, AC_TextSize
			rot2 180
		endif
	endif
return


! ==============================================================================
! input:
!    horizontalAlignment, totalLength
! globals:
!    Alignment_Center, Alignment_Right, Alignment_IntegerPart
! ==============================================================================
"offset_accordingto_alignment":
	if horizontalAlignment = Alignment_Center then
		add2 -(totalLength)/2, 0
	endif
	if horizontalAlignment = Alignment_Right then
		add2 -totalLength, 0
	endif
	if horizontalAlignment = Alignment_IntegerPart then
		! compute length of integer part
		add2 -lengthOfIntegerPart, 0
	endif
return




]]>
</Script_2D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_1D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
EPS = 0.00001


! -- values for GS_iMarkerDir --
MarkerDir_Standard          = 1
MarkerDir_StandardRotated90 = 2
MarkerDir_Horizontal        = 3
MarkerDir_Vertical          = 4

! -- Values for horizontalALignment --
Alignment_Left        = 1
Alignment_Center      = 2
Alignment_Right       = 3
Alignment_IntegerPart = 4

! -- Values for verticalALignment --
Alignment_Bottom      = 1
Alignment_Top         = 2


call "quantity_text_formatter" parameters	bUseTextblock		= bUseTextblock,
											! function to words wrapping using pharagraph and textblock
											widthfixedSize		= widthfixedSize,

											! input values and project preferences type of sizes
											lengthValue			= lengthValue,
											iUnitType			= iUnitType,
											custom_form			= custom_form,
											szPrefix			= szPrefix,

											! attributes
											horizontalAlignment	= horizontalAlignment,
											verticalAlignment	= verticalAlignment,
											AC_TextFont			= AC_TextFont,
											AC_TextSize			= AC_TextSize,
											AC_TextStyle		= AC_TextStyle,

											! options for display
											bShowText				= bShowText,
											bShowUnit				= bShowUnit,
											bShowSuperScript		= bShowSuperScript,
											useLeadingAndDescent	= useLeadingAndDescent,
											bIgnoreHideZeroWholes	= bShowUnit,	! by design

						returned_parameters lengthOfNote1,
											lengthOfNote2,
											lengthOfNote3,
											lengthOfNote4,
											totalLength,
											totalHeight,
											lengthOfUnit,
											lengthOfIntegerPart,
											note1,				! content string
											frac,				! content string
											szUnit,				! content string
											szUnitIndex,		! content string
											szExtraPrecision,	! content string
											iAnchorString,		! attribute
											vertOffsetMain,		! position at options for display
											vertOffsetBox,		! position at options for display
											vertOffsetExponent	! position at options for display
						
]]>
</Script_1D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_PR SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_PR>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_UI SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_UI>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_VL SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[


! ==============================================================================
end note1,szUnit,szUnitIndex
! ==============================================================================



]]>
</Script_VL>

<Comment SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Comment>

<ParamSection SectVersion="22" SectionFlags="0" SubIdent="0">
	<ParamSectHeader>
		<AutoHotspots>false</AutoHotspots>
		<StatBits>
			<STBit_FixSize/>
		</StatBits>
		<WDLeftFrame>0</WDLeftFrame>
		<WDRightFrame>0</WDRightFrame>
		<WDTopFrame>0</WDTopFrame>
		<WDBotFrame>0</WDBotFrame>
		<LayFlags>65535</LayFlags>
		<WDMirrorThickness>0</WDMirrorThickness>
		<WDWallInset>0</WDWallInset>
	</ParamSectHeader>
	<Parameters>
		<Length Name="A">
			<Description><![CDATA["Dimension 1"]]></Description>
			<Fix/>
			<Value>1</Value>
		</Length>
		<Length Name="B">
			<Description><![CDATA["Dimension 2"]]></Description>
			<Fix/>
			<Value>1</Value>
		</Length>
		<Boolean Name="bUseTextblock">
			<Description><![CDATA[""]]></Description>
			<Value>0</Value>
		</Boolean>
		<RealNum Name="widthfixedSize">
			<Description><![CDATA[""]]></Description>
			<Value>0</Value>
		</RealNum>
		<Length Name="lengthValue">
			<Description><![CDATA[""]]></Description>
			<Value>0.556</Value>
		</Length>
		<Integer Name="iUnitType">
			<Description><![CDATA[""]]></Description>
			<Value>1</Value>
		</Integer>
		<String Name="custom_form">
			<Description><![CDATA[""]]></Description>
			<Value><![CDATA[""]]></Value>
		</String>
		<Integer Name="GS_iMarkerDir">
			<Description><![CDATA[""]]></Description>
			<Value>1</Value>
		</Integer>
		<Integer Name="horizontalAlignment">
			<Description><![CDATA[""]]></Description>
			<Value>1</Value>
		</Integer>
		<Integer Name="verticalAlignment">
			<Description><![CDATA[""]]></Description>
			<Value>1</Value>
		</Integer>
		<String Name="AC_TextFont">
			<Description><![CDATA[""]]></Description>
			<Value><![CDATA["Arial"]]></Value>
		</String>
		<RealNum Name="AC_TextSize">
			<Description><![CDATA[""]]></Description>
			<Value>2</Value>
		</RealNum>
		<Integer Name="AC_TextStyle">
			<Description><![CDATA[""]]></Description>
			<Value>0</Value>
		</Integer>
		<String Name="szPrefix">
			<Description><![CDATA[""]]></Description>
			<Value><![CDATA[""]]></Value>
		</String>
		<Boolean Name="AC_Readable">
			<Description><![CDATA[""]]></Description>
			<Value>0</Value>
		</Boolean>
		<RealNum Name="gs_readable_angle">
			<Description><![CDATA[""]]></Description>
			<Value>90</Value>
		</RealNum>
		<Boolean Name="useLeadingAndDescent">
			<Description><![CDATA[""]]></Description>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="bShowText">
			<Description><![CDATA[""]]></Description>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="bFeedbackMode">
			<Description><![CDATA[""]]></Description>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="bShowUnit">
			<Description><![CDATA[""]]></Description>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="bShowSuperScript">
			<Description><![CDATA[""]]></Description>
			<Value>1</Value>
		</Boolean>
	</Parameters>
</ParamSection>

<Copyright SectVersion="1" SectionFlags="0" SubIdent="0">
	<Author>GRAPHISOFT</Author>
	<License>
		<Type>CC BY-ND</Type>
		<Version>3.0</Version>
	</License>
</Copyright>

</Symbol>
