<?xml version="1.0" encoding="UTF-8"?>
<Symbol IsArchivable="false" IsPlaceable="false" MainGUID="12CFF697-E72C-446C-982C-3506048E41C6" MigrationValue="Normal" Owner="1196638531" Signature="1196644685" Version="38">
<Ancestry SectVersion="1" SectionFlags="0" SubIdent="0" Template="false">
	<MainGUID>F938E33A-329D-4A36-BE3E-85E126820996</MainGUID>
	<MainGUID>103E8D2C-8230-42E1-9597-46F84CCE28C0</MainGUID>
	<MainGUID>0DF8E541-68EB-4102-8886-C144F74770E0</MainGUID>
</Ancestry>

<CalledMacros SectVersion="2" SectionFlags="0" SubIdent="0">
	<Macro>
		<MName><![CDATA["FM_types"]]></MName>
		<MainGUID>2759D2DF-AA8E-44D1-AD1D-261581266B34</MainGUID>
	</Macro>
</CalledMacros>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_3D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
! ==============================================================================
! electricalItems_m
! ==============================================================================


if gs_detlevel_3D_m = 0 then end

bCenterPlaced = (iPlaceBy = 1)

if gs_detlevel_3D_m = 2 then
	resol gs_resol
else
	resol 6
endif
pen gs_cont_pen


! ==============================================================================
! Height editing hotspot
! ==============================================================================

unID = 1

if iGroupType = GROUP_OUTLET & iObjectType = OBJECT_FLOOR_OUTLET then
else
	hotspot 0, 0, 0, unID, gs_placementHeight, 1 : unID = unID + 1
	hotspot 0, 0, gs_placementHeight, unID, gs_placementHeight, 2 : unID = unID + 1
	hotspot 0, 0, -1, unID, gs_placementHeight, 3 : unID = unID + 1
endif


! ==============================================================================
! Placing object
! ==============================================================================

if iGroupType = GROUP_OUTLET & iObjectType = OBJECT_FLOOR_OUTLET then
	addz 0
	rotx 0
else
	if iOrientation = 1 then
		placeHeightMod = (min(gs_plateHeight, gs_boxHeight))/2
	else
		placeHeightMod = (max(gs_plateHeight, gs_boxHeight))/2
	endif
	addz gs_placementHeight + not (bCenterPlaced) * placeHeightMod + bottomPanelOverhang
	rotx 90
endif
if iOrientation = 2 then rotz 90
addx -fullLength/2 + max (leftPanelOverhang, leftBoxOverhang) + elementLength/2

for ijk = 1 to nModItem
	if ijk = 1 then
		lPanelOverhang = leftPanelOverhang
		lBoxOverhang = leftBoxOverhang
		bLeftEdge = not (bLeftCon)
		bShowLeftHotspot = 1
	else
		lPanelOverhang = 0
		lBoxOverhang = 0
		bLeftEdge = 0
		bShowLeftHotspot = 0
	endif

	if ijk = nModItem then
		rPanelOverhang = rightPanelOverhang
		rBoxOverhang = rightBoxOverhang
		bRightEdge = not (bRightCon)
		bShowRightHotspot = 1
	else
		rPanelOverhang = 0
		rBoxOverhang = 0
		bRightEdge = 0
		bShowRightHotspot = 0
	endif

	bSwitch = 1
	bOutlet = 1
	if iGroupType = GROUP_SWITCH_OUTLET then
		if ijk = nModItem then
			bOutlet = 1
			bSwitch = 0
		else
			bOutlet = 0
			bSwitch = 1
		endif
	endif
	gosub "Item"

	addx elementLength
next ijk

del nModItem + 1
if iOrientation = 2 then del 1
del 2


end




! ==============================================================================
"Item":
! ==============================================================================

	if bShowLeftHotspot then
		hotspot -elementLength/2 - lPanelOverhang, -elementHeight/2 - bottomPanelOverhang, 0, unID : unID = unID + 1
		hotspot -elementLength/2 - lPanelOverhang,  elementHeight/2 + topPanelOverhang, 0, unID : unID = unID + 1
	endif
	if bShowRightHotspot then
		hotspot elementLength/2 + rPanelOverhang, -elementHeight/2 - bottomPanelOverhang, 0, unID : unID = unID + 1
		hotspot elementLength/2 + rPanelOverhang,  elementHeight/2 + topPanelOverhang, 0, unID : unID = unID + 1
	endif

	if (iGroupType = GROUP_OUTLET | iGroupType = GROUP_SWITCH_OUTLET | (iGroupType = GROUP_SIGNAL & (iObjectType = OBJECT_PHONE_SIGNAL | iObjectType = OBJECT_COMMUNICATION_SIGNAL))) & bOutlet then
		if iOutletType = RECEPTACLE then
			material gs_matOutlet

			addz gs_plateThk/4
			if iItemType = SINGLE & (iObjectType = OBJECT_OUTLET_1 | iObjectType = OBJECT_OUTLET_2\
			 | iObjectType = OBJECT_SWITCH_OUTLET | iObjectType = OBJECT_FLOOR_OUTLET) then
				addy 0
				nOutlet = 1
			else
				if iObjectType = OBJECT_OUTLET_1 & iItemType = TRIPLE then
					addy 0
					nOutlet = 1
				else
					addy -0.018
					nOutlet = 2
				endif
			endif
			for i = 1 to nOutlet
				put	 0.01,  -0.012, 15,
					-0.007,  0, 900,
					 0.01,  0.012, 3015,
					-0.01,  0.012, 15,
					 0.007,  0, 900,
					-0.01,  -0.012, 3015,
					 0.01,  -0.012, -1

				if gs_detlevel_3D_m = 2 then
					put -0.005, 0, 15,
						-0.007, 0, 15,
						-0.007, 0.006, 15,
						-0.005, 0.006, 15,
						-0.005, 0, -1,
						 0.005, 0, 15,
						 0.007, 0, 15,
						 0.007, 0.006, 15,
						 0.005, 0.006, 15,
						 0.005, 0, -1,
						-0.002, -0.01, 15,
						 0.002, -0.01, 15,
						 0.002, -0.008, 15 + 64,
						-0.002, -0.008, 1015 + 64,
						-0.002, -0.01, -1

				endif

				prism_ nsp/3, gs_plateThk*3/4 + 0.002,
					get (nsp)

				add 0, -0.018, -gs_plateThk/4
				cutpolya 7, 1, gs_plateThk/4,
					-0.01,  0.006, 15,
					 0.01,  0.006, 15,
					-0.007,  0.018, 900,
					 0.01,  0.030, 3015,
					-0.01,  0.030, 15,
					 0.007,  0.018, 900,
					-0.01,  0.006, 3015
				del 1

				addy 0.036
			next i

			del 2 + nOutlet
		endif

		if iOutletType = CABLE_OUTLET then
			addz gs_plateThk

			rrr = 0.004
			rrr2 = 0.006
			material gs_matOutlet

			if gs_detlevel_3D_m = 2 then
				prism_ 7, 0.003,
					 rrr2, 0, 15,
					 rrr2 * cos(60),  rrr2 * sin(60), 15,
					-rrr2 * cos(60),  rrr2 * sin(60), 15,
					-rrr2, 0, 15,
					-rrr2 * cos(60), -rrr2 * sin(60), 15,
					 rrr2 * cos(60), -rrr2 * sin(60), 15,
					 rrr2, 0, -1

				addz 0.003
				cylind 0.009, rrr
				del 1
			else
				cylind 0.012, rrr
			endif
			del 1
		endif

		if iOutletType = PHONE_OUTLET then
			addz gs_plateThk/4

			material gs_matOutlet

			prism_ 14, gs_plateThk*3/4 + 0.002,
				-0.0075, -0.0075, 15,
				-0.0075,  0.0075, 15,
				 0.0075,  0.0075, 15,
				 0.0075, -0.0075, 15,
				-0.0075, -0.0075, -1,

				-0.0055, -0.0045, 15,
				-0.0035, -0.0045, 15,
				-0.0035, -0.0065, 15,
				 0.0035, -0.0065, 15,
				 0.0035, -0.0045, 15,
				 0.0055, -0.0045, 15,
				 0.0055,  0.0045, 15,
				-0.0055,  0.0045, 15,
				-0.0055, -0.0045, -1

			del 1

			cutpolya 4, 1, gs_plateThk/4,
				-0.0075, -0.0075, 15,
				-0.0075,  0.0075, 15,
				 0.0075,  0.0075, 15,
				 0.0075, -0.0075, 15
		endif
	endif

	if (iGroupType = GROUP_SWITCH | iGroupType = GROUP_SWITCH_OUTLET) & bSwitch then
		if 	iSwitchType = TOGGLE then
			material gs_matSwitch
			roty 90
			rotz 90
			addz -0.005

			prism_ 9, 0.01,
				-0.015, 0, 15,
				 0.015, 0, 15,
				 0.015, gs_plateThk*3/4, 15,
				 0.012, gs_plateThk*3/4, 15,
				 0.012, gs_plateThk*3/4+0.01, 15,
				 0.004, gs_plateThk*3/4+0.01, 15,
				 0.004, gs_plateThk*3/4, 15,
				-0.015, gs_plateThk*3/4, 15,
				-0.015, 0, -1

			del 3

			if gs_detlevel_3D_m = 2 then
				prism_ 10, gs_plateThk + 0.001,
					-0.007, -0.017, 15,
					 0.007, -0.017, 15,
					 0.007,  0.017, 15,
					-0.007,  0.017, 15,
					-0.007, -0.017, -1,
					-0.005, -0.015, 15,
					 0.005, -0.015, 15,
					 0.005,  0.015, 15,
					-0.005,  0.015, 15,
					-0.005, -0.015, -1

				cutpolya 4, 1, 0,
					-0.007, -0.017, 15,
					 0.007, -0.017, 15,
					 0.007,  0.017, 15,
					-0.007,  0.017, 15
			else
				cutpolya 4, 1, 0,
					-0.005, -0.015, 15,
					 0.005, -0.015, 15,
					 0.005,  0.015, 15,
					-0.005,  0.015, 15
			endif
		endif

		if iSwitchType = ROCKER then
			material gs_matSwitch
			roty 90
			rotz 90
			addz -0.016

			prism_ 7, 0.032,
				-0.035, 0, 15,
				 0.035, 0, 15,
				 0.035, gs_plateThk + 0.002, 15,
				 0, gs_plateThk + 0.002, 15,
				-0.031, gs_plateThk*3, 15,
				-0.035, gs_plateThk + 0.002, 15,
				-0.035, 0, -1

			del 3

			if gs_detlevel_3D_m = 2 then
				prism_ 10, gs_plateThk + 0.001,
					-0.018, -0.037, 15,
					 0.018, -0.037, 15,
					 0.018,  0.037, 15,
					-0.018,  0.037, 15,
					-0.018, -0.037, -1,
					-0.016, -0.035, 15,
					 0.016, -0.035, 15,
					 0.016,  0.035, 15,
					-0.016,  0.035, 15,
					-0.016, -0.035, -1

				cutpolya 4, 1, 0,
					-0.018, -0.037, 15,
					 0.018, -0.037, 15,
					 0.018,  0.037, 15,
					-0.018,  0.037, 15
			else
				cutpolya 4, 1, 0,
					-0.016, -0.035, 15,
					 0.016, -0.035, 15,
					 0.016,  0.035, 15,
					-0.016,  0.035, 15
			endif
		endif

		if iSwitchType = BUTTON then
			addz gs_plateThk
			material gs_matSwitch
			if gs_detlevel_3D_m = 2 then
				cylind 0.006, 0.0075
				addz 0.006
				cylind 0.01, 0.006
				del 1
			else
				cylind 0.016, 0.006
			endif
			del 1
		endif
	endif

	material gs_matPlate

	if gs_detlevel_3D_m = 2 then
		if not(bRightEdge) then
			cutpolya 4, 1, 0,
				elementLength/2 + rPanelOverhang, -1, 8,
				elementLength/2 + rPanelOverhang+1, -1, 8,
				elementLength/2 + rPanelOverhang+1, 1, 8,
				elementLength/2 + rPanelOverhang, 1, 8
		endif
		if not(bLeftEdge) then
			cutpolya 4, 1, 0,
				-elementLength/2 - lPanelOverhang, -1, 8,
				-elementLength/2 - lPanelOverhang-1, -1, 8,
				-elementLength/2 - lPanelOverhang-1, 1, 8,
				-elementLength/2 - lPanelOverhang, 1, 8
		endif
		if bTopCon then
			cutpolya 4, 1, 0,
				-elementLength/2 - lPanelOverhang - 1, elementHeight/2 + topPanelOverhang, 8,
				 elementLength/2 + rPanelOverhang + 1, elementHeight/2 + topPanelOverhang, 8,
				 elementLength/2 + rPanelOverhang + 1, elementHeight/2 + topPanelOverhang + 1, 8,
				-elementLength/2 - lPanelOverhang - 1, elementHeight/2 + topPanelOverhang + 1, 8
		endif
		if bBottomCon then
			cutpolya 4, 1, 0,
				-elementLength/2 - lPanelOverhang - 1, -elementHeight/2 - bottomPanelOverhang, 8,
				 elementLength/2 + rPanelOverhang + 1, -elementHeight/2 - bottomPanelOverhang, 8,
				 elementLength/2 + rPanelOverhang + 1, -elementHeight/2 - bottomPanelOverhang - 1, 8,
				-elementLength/2 - lPanelOverhang - 1, -elementHeight/2 - bottomPanelOverhang - 1, 8
		endif

		put	-elementLength/2 - lPanelOverhang-(0.1 + gs_plateThk)*not(bLeftEdge),	-elementHeight/2 - bottomPanelOverhang - bBottomCon * (0.1 + gs_plateThk), 8 + 2 * bLeftEdge * not (bBottomCon) + 5 * not(bBottomCon),
			 elementLength/2 + rPanelOverhang+(0.1 + gs_plateThk)*not(bRightEdge),	-elementHeight/2 - bottomPanelOverhang - bBottomCon * (0.1 + gs_plateThk), 8 + 2 * bRightEdge * not (bBottomCon) + 5 * bRightEdge,
			 elementLength/2 + rPanelOverhang+(0.1 + gs_plateThk)*not(bRightEdge),	 elementHeight/2 + topPanelOverhang + bTopCon * (0.1 + gs_plateThk), 8 + 2 * bRightEdge * not (bTopCon) + 5 * not(bTopCon),
			-elementLength/2 - lPanelOverhang-(0.1 + gs_plateThk)*not(bLeftEdge),	 elementHeight/2 + topPanelOverhang + bTopCon * (0.1 + gs_plateThk), 8 + 2 * bLeftEdge * not (bTopCon) + 5 * bLeftEdge,
			-elementLength/2 - lPanelOverhang-(0.1 + gs_plateThk)*not(bLeftEdge),	-elementHeight/2 - bottomPanelOverhang - bBottomCon * (0.1 + gs_plateThk), -1

	else
		put	-elementLength/2 - lPanelOverhang,	-elementHeight/2 - bottomPanelOverhang, 8 + 2 * bLeftEdge * not (bBottomCon) + 5 * not(bBottomCon),
			 elementLength/2 + rPanelOverhang,	-elementHeight/2 - bottomPanelOverhang, 8 + 2 * bRightEdge * not (bBottomCon) + 5 * bRightEdge,
			 elementLength/2 + rPanelOverhang,	 elementHeight/2 + topPanelOverhang, 8 + 2 * bRightEdge * not (bTopCon) + 5 * not(bTopCon),
			-elementLength/2 - lPanelOverhang,	 elementHeight/2  +topPanelOverhang, 8 + 2 * bLeftEdge * not (bTopCon) + 5 * bLeftEdge,
			-elementLength/2 - lPanelOverhang,	-elementHeight/2 - bottomPanelOverhang, -1
	endif

	if gs_detlevel_3D_m = 2 then
		hprism_ gs_matPlate, gs_matPlate, gs_matPlate, gs_matPlate,
			nsp/3, gs_plateThk, 0, gs_plateThk/4, 1,
				get (nsp)

		if not(bRightEdge) then cutend
		if not(bLeftEdge) then cutend
		if bTopCon then cutend
		if bBottomCon then cutend
	else
		prism_ nsp/3, gs_plateThk,
				get (nsp)
	endif

	if (iGroupType = GROUP_OUTLET | iGroupType = GROUP_SWITCH_OUTLET | (iGroupType = GROUP_SIGNAL & (iObjectType = OBJECT_PHONE_SIGNAL | iObjectType = OBJECT_COMMUNICATION_SIGNAL))) & bOutlet then
		if iOutletType = PHONE_OUTLET then cutend
		if iOutletType = RECEPTACLE then
			for ji = 1 to nOutlet
				cutend
			next ji
		endif
	endif
	if (iGroupType = GROUP_SWITCH | iGroupType = GROUP_SWITCH_OUTLET) & bSwitch then
		if 	iSwitchType = TOGGLE then cutend
		if iSwitchType = ROCKER then cutend
	endif


	if gs_bShowBoxIn3D then
		addz -gs_boxThk

		material gs_matBox

		prism_ 5, gs_boxThk,
			-elementLength/2 - lBoxOverhang,	-elementHeight/2 - bottomBoxOverhang, 8 + 2 * bLeftEdge * not (bBottomCon) + 5 * not(bBottomCon),
			 elementLength/2 + rBoxOverhang,	-elementHeight/2 - bottomBoxOverhang, 8 + 2 * bRightEdge * not (bBottomCon) + 5 * bRightEdge,
			 elementLength/2 + rBoxOverhang,	 elementHeight/2 + topBoxOverhang, 8 + 2 * bRightEdge * not (bTopCon) + 5 * not(bTopCon),
			-elementLength/2 - lBoxOverhang,	 elementHeight/2 + topBoxOverhang, 8 + 2 * bLeftEdge * not (bTopCon) + 5 * bLeftEdge,
			-elementLength/2 - lBoxOverhang,	-elementHeight/2 - bottomBoxOverhang, -1

		if bShowLeftHotspot then
			hotspot -elementLength/2 - lBoxOverhang, -elementHeight/2 - bottomBoxOverhang, 0, unID : unID = unID + 1
			hotspot -elementLength/2 - lBoxOverhang,  elementHeight/2 + topBoxOverhang, 0, unID : unID = unID + 1
			hotspot -elementLength/2 - lBoxOverhang, -elementHeight/2 - bottomBoxOverhang, gs_boxThk, unID : unID = unID + 1
			hotspot -elementLength/2 - lBoxOverhang,  elementHeight/2 + topBoxOverhang, gs_boxThk, unID : unID = unID + 1
		endif
		if bShowRightHotspot then
			hotspot elementLength/2 + rBoxOverhang, -elementHeight/2 - bottomBoxOverhang, 0, unID : unID = unID + 1
			hotspot elementLength/2 + rBoxOverhang,  elementHeight/2 + topBoxOverhang, 0, unID : unID = unID + 1
			hotspot elementLength/2 + rBoxOverhang, -elementHeight/2 - bottomBoxOverhang, gs_boxThk, unID : unID = unID + 1
			hotspot elementLength/2 + rBoxOverhang,  elementHeight/2 + topBoxOverhang, gs_boxThk, unID : unID = unID + 1
		endif
		del 1
	endif

return
]]>
</Script_3D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_2D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
! ==============================================================================
! electricalItems_m
! ==============================================================================


pen gs_cont_pen
fill gs_fill_type
yTextMod = 0
textAngle = 0
unID = 1

if iGroupType = GROUP_SYMBOL then
	if iObjectType = OBJECT_PUSH_BUTTON then
		hotspot2  0,    0, unID : unID = unID + 1
		hotspot2 -A/2,  A/2, unID : unID = unID + 1
		hotspot2  A/2,  A/2, unID : unID = unID + 1
		hotspot2  A/2, -A/2, unID : unID = unID + 1
		hotspot2 -A/2, -A/2, unID : unID = unID + 1

		rot2 135
		hotspot2    		 0, 0, unID, A2, 1+128, A : unID = unID + 1
		hotspot2  A/2 * sqr(2), 0, unID, A2, 2,     A	: unID = unID + 1
		hotspot2 		  -A/2,	0, unID, A2, 3,     A	: unID = unID + 1
		del 1
		rot2 45
		hotspot2    0,    0, unID, A2, 1+128, A : unID = unID + 1
		hotspot2  A/2 * sqr(2),    0, unID, A2, 2,     A	: unID = unID + 1
		hotspot2 -A/2,    0, unID, A2, 3,     A	: unID = unID + 1
		del 1
		rot2 -45
		hotspot2    0,    0, unID, A2, 1+128, A : unID = unID + 1
		hotspot2  A/2 * sqr(2),    0, unID, A2, 2,     A	: unID = unID + 1
		hotspot2 -A/2,    0, unID, A2, 3,     A	: unID = unID + 1
		del 1
		rot2 -135
		hotspot2    0,    0, unID, A2, 1+128, A : unID = unID + 1
		hotspot2  A/2 * sqr(2),    0, unID, A2, 2,     A	: unID = unID + 1
		hotspot2 -A/2,    0, unID, A2, 3,     A	: unID = unID + 1
		del 1

		poly2_b 4, 1+2+4+64, gs_fill_pen, gs_back_pen,
			-A/2, -A/2,		1,
			-A/2, A/2,		1,
			A/2, A/2, 		1,
			A/2, -A/2, 		1

		circle2 0, 0, A/4
	endif
	if iObjectType = OBJECT_RECESS_CAN_LIGHT then
		hotspot2 0, 0, unID : unID = unID + 1
		hotspot2 0, A/2, unID : unID = unID + 1
		hotspot2 A/2, 0, unID : unID = unID + 1
		hotspot2 0, -A/2, unID : unID = unID + 1
		hotspot2 -A/2, 0, unID : unID = unID + 1

		hotspot2    0,    0, unID, A2, 1+128, A : unID = unID + 1
		hotspot2    0, 	A/2, unID, A2, 2,     A	: unID = unID + 1
		hotspot2    0, -A/2, unID, A2, 3,     A	: unID = unID + 1

		hotspot2    0,    0, unID, A2, 1+128, A : unID = unID + 1
		hotspot2  A/2,    0, unID, A2, 2,     A	: unID = unID + 1
		hotspot2 -A/2,    0, unID, A2, 3,     A	: unID = unID + 1

		hotspot2    0,    0, unID, A2, 1+128, A : unID = unID + 1
		hotspot2    0, -A/2, unID, A2, 2,     A	: unID = unID + 1
		hotspot2    0,  A/2, unID, A2, 3,     A	: unID = unID + 1


		hotspot2    0,    0, unID, A2, 1+128, A : unID = unID + 1
		hotspot2 -A/2,    0, unID, A2, 2,     A	: unID = unID + 1
		hotspot2  A/2,    0, unID, A2, 3,     A	: unID = unID + 1

		poly2_b 5 + 2, 1+2+4+64, gs_fill_pen, gs_back_pen,
			-A * 0.32, -A * 0.32, 1,
			A * 0.32, -A * 0.32, 1,
			A * 0.32, A * 0.32, 1,
			-A * 0.32, A * 0.32, 1,
			-A * 0.32, -A * 0.32, -1,

			0, 0, 901,
			A * 0.283, 360, 4001

		fill gs_fill_type_2
		poly2_b 2, 1+2+4+64, gs_fill_pen_2, gs_back_pen_2,
			0,0, 900,
			A * 0.283, 360, 4001
		fill gs_fill_type

		circle2 0, 0, A * 0.231
		circle2 0, 0, A * 0.257

		line2 -A/2, 0, -A * 0.283, 0
		line2 A/2, 0, A * 0.283, 0
		line2 0, -A/2, 0, -A * 0.283
		line2 0, A/2, 0, A * 0.283
	endif
	if iObjectType = OBJECT_VANITY_FIXTURE then
		hotspot2  0,    0, unID : unID = unID + 1
		hotspot2  0,    0, unID : unID = unID + 1
		hotspot2  A / (1 + sin(45)) * sin(45), A / (1 + sin(45)) * sin(45), unID : unID = unID + 1
		hotspot2  A / (1 + sin(45)) * sin(45), -A / (1 + sin(45)) * sin(45), unID : unID = unID + 1
		hotspot2 - A / (1 + sin(45)), 0, unID : unID = unID + 1

		hotspot2    0,    0, unID, A2, 1+128, A : unID = unID + 1
		hotspot2 - A / (1 + sin(45)),    0, unID, A2, 2,     A	: unID = unID + 1
		hotspot2  A/2,    0, unID, A2, 3,     A	: unID = unID + 1

		rot2 45
		hotspot2    0,    0, unID, A2, 1+128, A : unID = unID + 1
		hotspot2  A / (1 + sin(45)),    0, unID, A2, 2,     A	: unID = unID + 1
		hotspot2 -A/2,    0, unID, A2, 3,     A	: unID = unID + 1
		del 1

		rot2 -45
		hotspot2    0,    0, unID, A2, 1+128, A : unID = unID + 1
		hotspot2  A / (1 + sin(45)),    0, unID, A2, 2,     A	: unID = unID + 1
		hotspot2 -A/2,    0, unID, A2, 3,     A	: unID = unID + 1
		del 1

		poly2_b 2, 1+2+4+64, gs_fill_pen, gs_back_pen,
			0, 0,		900,
			A * 0.326, 360,		4001

		line2 - A / (1 + sin(45)), 0, -A * 0.326, 0
		line2 A * 0.326 * sin(45), A * 0.326 * sin(45), A / (1 + sin(45)) * sin(45), A / (1 + sin(45)) * sin(45)
		line2 A * 0.326 * sin(45), -A * 0.326 * sin(45), A / (1 + sin(45)) * sin(45), -A / (1 + sin(45)) * sin(45)
	endif
	if iObjectType = OBJECT_WALL_SCONCE then

		hotspot2 0, 0, 4

		hotspot2 0, -B/2, unID : unID = unID + 1
		hotspot2 0, B/2, unID : unID = unID + 1
		hotspot2 B/2, 0, unID : unID = unID + 1
!		hotspot2 0, 0, unID : unID = unID + 1
		unID = unID + 1	! 4

		hotspot2 0, 0, unID, A, 1+128, 	A : unID = unID + 1
		hotspot2 0, -A, unID, A, 2,   	A : unID = unID + 1
		hotspot2 0, 1, unID, A, 3,     	A : unID = unID + 1

		hotspot2 0, 0, unID, A, 1+128, 	A : unID = unID + 1
		hotspot2 A, 0, unID, A, 2,   	A : unID = unID + 1
		hotspot2 -1, 0, unID, A, 3,     A : unID = unID + 1

		hotspot2 0, 0, unID, A, 1+128, 	A : unID = unID + 1
		hotspot2 0, A, unID, A, 2,   	A : unID = unID + 1
		hotspot2 0, -1, unID, A, 3,     A : unID = unID + 1

		poly2_b 3, 1+2+4+64, gs_fill_pen, gs_back_pen,
			0, -B * 0.286,		1,
			0, 0,		900,
			0, 180,		4001

		line2 0, -B/2, 0, B/2
		line2 B * 0.286, 0, B/2, 0

		if bShowText2D then gosub "Symbol Text"
	endif
	if iObjectType = OBJECT_SMOKE_DETECTOR then
		if bShowText2D then gosub "Symbol Text"
	endif
	if iObjectType = OBJECT_FAN_SYMBOL then
		if iItemType = FAN then
			poly2_b 2, 1+2+4+64, gs_fill_pen, gs_back_pen,
				0, 		0,		900,
				A/2, 	360,		4001

			poly2_b 4, 1, gs_fill_pen, gs_back_pen,
				-A/2, 0, 1,
				0, -1, 800,
				0, 0, 1001,
				A/2, 0, 1001
		endif
		if iItemType = EXHAUST_FAN then
			poly2_b 2, 1+2+4+64, gs_fill_pen, gs_back_pen,
				0, 		0,		900,
				A/2, 	360,		4001

			fill gs_fill_type_2
			poly2_b 5, 1+2+4+64, gs_fill_pen_2, gs_back_pen_2,
				0, -A/2, 1,
				-1, 0,800,
				0, 0, 1001,
				0, A/2, 1000,
				0, -A/2, 1001

			circle2 0,0,A/2
		endif
		if iItemType = FAN_WITH_LIGHT then
			poly2_b 2, 1+2+4+64, gs_fill_pen, gs_back_pen,
				0, 		0,		900,
				A * 0.35, 	360,		4001

			fill gs_fill_type_2
			poly2_b 4, 1, gs_fill_pen_2, gs_back_pen_2,
				-A * 0.35, 0, 1,
				0, -1, 800,
				0, 0, 1001,
				A * 0.35, 0, 1001
			for hi = 1 to 4
				line2 A * 0.35 * sin(45), A * 0.35 * sin(45), A/2, A/2
			rot2 90
			next hi
			del 4
		endif
		if iItemType = FAN_LIGHT_COMBO then
			radCircle = A * 0.1888

			poly2_b 4, 1+2+4+64, gs_fill_pen, gs_back_pen,
			   -A * 0.2222,	-A * 0.2222, 1,
			   -A * 0.2222,	A * 0.2222, 1,
			   A2,			A * 0.2222, 1,
			   A2,			-A * 0.2222, 1

			circle2 0, 0, radCircle
			circle2 A * 0.4444, 0, radCircle

			fill gs_fill_type_2
			poly2_b 5, 1+2+4+64, gs_fill_pen_2, gs_back_pen_2,
				A * 0.4444, -radCircle, 1,
				-1, 0,800,
				A * 0.4444, 0, 1001,
				A * 0.4444, radCircle, 1000,
				A * 0.4444, -radCircle, 1001

			line2 -B2, 0, -radCircle, 0
			line2 0, -radCircle, 0, -B2
			line2 0, radCircle, 0, B2
		endif
		if iItemType = CEILING_FAN then
			line_type ltDashed
			circle2 0, 0, A/2

			line_type 1
			mul2 A * 10, A * 10
			hotspot2 0, 0, unID : unID = unID + 1
			hotspot2 -0.01165137612805, 0, unID : unID = unID + 1
			hotspot2 0.01165137612805, 0, unID : unID = unID + 1
			hotspot2 0, -0.01165137612805, unID : unID = unID + 1
			hotspot2 0, 0.01165137612805, unID : unID = unID + 1

			for hi = 1 to 4
				poly2_b 13, 1+2+4+64, gs_fill_pen, gs_back_pen,
					-0.01452461793952, -0.003297623708808,      1,
					-0.01498034074142, 0, 900,
					 0, 164.2634286291,   4001,
					-0.01452461793952, 0.003297623708808,      1,
					-0.04742506901517, 0.007844378302994,      1,
					-0.04773511373713, 0.005600885500479,    900,
					 0, 97.86828568546,   4001,
					-0.04999992889174, 0.005600885500459,      1,
					-0.04999992889174, -0.005600885500459,      1,
					-0.04773511373713, -0.005600885500479,    900,
					 0, 97.86828568546,   4001,
					-0.04742506901517, -0.007844378302994,      1,
					-0.01452461793952, -0.003297623708808,      1

				line2 -0.01165137612805, 0, -0.006657929146265, 0
			rot2 90
			next hi
			del 4

			poly2_b 2, 1+2+4+64, gs_fill_pen, gs_back_pen,
				0, 		0,		900,
				0.006657929146265, 	360,		4001

			del 1
		endif
		if iItemType = FAN_LIGHT_COMBO then
			hotspot2 0, 0, unID : unID = unID + 1

			hotspot2    0,    0, unID, A2, 1+128, A : unID = unID + 1
			hotspot2 A2,    0, unID, A2, 2,     A	: unID = unID + 1
			hotspot2 -1,    0, unID, A2, 3,     A	: unID = unID + 1

			hotspot2 	0,    0, unID, B2, 1+128, A : unID = unID + 1
			hotspot2 -B/2,    0, unID, B2, 2,     A	: unID = unID + 1
			hotspot2 	1,    0, unID, B2, 3,     A	: unID = unID + 1

			hotspot2 0,    0, unID, B2, 1+128, A : unID = unID + 1
			hotspot2 0, -B/2, unID, B2, 2,     A	: unID = unID + 1
			hotspot2 0,  B/2, unID, B2, 3,     A	: unID = unID + 1

			hotspot2 0,    0, unID, B2, 1+128, A : unID = unID + 1
			hotspot2 0,  B/2, unID, B2, 2,     A	: unID = unID + 1
			hotspot2 0, -B/2, unID, B2, 3,     A	: unID = unID + 1
		else
			hotspot2  0,    0, unID : unID = unID + 1

			rot2 -135
			hotspot2    		 0, 0, unID, A2, 1+128, A : unID = unID + 1
			hotspot2  A/2 * sqr(2), 0, unID, A2, 2,     A	: unID = unID + 1
			hotspot2 		  -A/2,	0, unID, A2, 3,     A	: unID = unID + 1
			del 1
			rot2 135
			hotspot2    		 0, 0, unID, A2, 1+128, A : unID = unID + 1
			hotspot2  A/2 * sqr(2), 0, unID, A2, 2,     A	: unID = unID + 1
			hotspot2 		  -A/2,	0, unID, A2, 3,     A	: unID = unID + 1
			del 1
			rot2 45
			hotspot2    		 0, 0, unID, A2, 1+128, A : unID = unID + 1
			hotspot2  A/2 * sqr(2), 0, unID, A2, 2,     A	: unID = unID + 1
			hotspot2 		  -A/2,	0, unID, A2, 3,     A	: unID = unID + 1
			del 1
			rot2 -45
			hotspot2    		 0, 0, unID, A2, 1+128, A : unID = unID + 1
			hotspot2  A/2 * sqr(2), 0, unID, A2, 2,     A	: unID = unID + 1
			hotspot2 		  -A/2,	0, unID, A2, 3,     A	: unID = unID + 1
			del 1

		endif
	endif
	if iObjectType = OBJECT_JUNCTION_BOX then
		if iItemType = CEILING_JUNCTION_BOX then
			hotspot2  0,    0, unID : unID = unID + 1
			hotspot2 -A/2,  A/2, unID : unID = unID + 1
			hotspot2  A/2,  A/2, unID : unID = unID + 1
			hotspot2  A/2, -A/2, unID : unID = unID + 1
			hotspot2 -A/2, -A/2, unID : unID = unID + 1

			rot2 135
			hotspot2    		 0, 0, unID, A2, 1+128, A : unID = unID + 1
			hotspot2  A/2 * sqr(2), 0, unID, A2, 2,     A	: unID = unID + 1
			hotspot2 		  -A/2,	0, unID, A2, 3,     A	: unID = unID + 1
			del 1
			rot2 45
			hotspot2    		 0, 0, unID, A2, 1+128, A : unID = unID + 1
			hotspot2  A/2 * sqr(2), 0, unID, A2, 2,     A	: unID = unID + 1
			hotspot2 		  -A/2,	0, unID, A2, 3,     A	: unID = unID + 1
			del 1
			rot2 -45
			hotspot2    		 0, 0, unID, A2, 1+128, A : unID = unID + 1
			hotspot2  A/2 * sqr(2), 0, unID, A2, 2,     A	: unID = unID + 1
			hotspot2 		  -A/2,	0, unID, A2, 3,     A	: unID = unID + 1
			del 1
			rot2 -135
			hotspot2    		 0, 0, unID, A2, 1+128, A : unID = unID + 1
			hotspot2  A/2 * sqr(2), 0, unID, A2, 2,     A	: unID = unID + 1
			hotspot2 		  -A/2,	0, unID, A2, 3,     A	: unID = unID + 1
			del 1

			line2   -A/2,  A/2, -a/0.254*0.0718420445919,  a/0.254*0.0718420445919
			line2    A/2,  A/2,  a/0.254*0.0718420445919,  a/0.254*0.0718420445919
			line2    A/2, -A/2,  a/0.254*0.0718420445919, -a/0.254*0.0718420445919
			line2   -A/2, -A/2, -a/0.254*0.0718420445919, -a/0.254*0.0718420445919

			poly2_b 2, 1+2+4+64, gs_fill_pen, gs_back_pen,
				0, 0,					900,
				a/0.254*0.101599998772, 360,		4001

		endif
		if iItemType = WALL_JUNCTION_BOX then
			hotspot2  0,   0, unID : unID = unID + 1
			hotspot2 -A/2, 0, unID : unID = unID + 1
			hotspot2 A/2, 0, unID : unID = unID + 1

			hotspot2    0,    0, unID, A2, 1+128, A : unID = unID + 1
			hotspot2 -A/2,    0, unID, A2, 2,     A	: unID = unID + 1
			hotspot2  A/2,    0, unID, A2, 3,     A	: unID = unID + 1

			hotspot2    0,    0, unID, A2, 1+128, A : unID = unID + 1
			hotspot2  A/2,    0, unID, A2, 2,     A	: unID = unID + 1
			hotspot2 -A/2,    0, unID, A2, 3,     A	: unID = unID + 1

			line2 -A/2, 0, -A/3.5, 0
			line2 A/3.5, 0, A/2, 0
			line2 -A/2, A/3.5, -A/2, -A/3.5

			poly2_b 2, 1+2+4+64, gs_fill_pen, gs_back_pen,
				0, 		0,		900,
				A/3.5,	360,	4001

		endif

		if bShowText2D then gosub "Symbol Text"
	endif
endif

if iGroupType = GROUP_SWITCH then
	if iObjectType = OBJECT_SWITCH_NORMAL then
		if bShowPlateAndBox then
			hotspot2 xSymbolPos, ySymbolPos - B/2, unID : unID = unID + 1

			gosub "Show Plate"

			hotspot2 xSymbolPos, 0, unID, ySymbolPos, 1+128 : unID = unID + 1
			hotspot2 xSymbolPos, ySymbolPos, unID, ySymbolPos, 2 : unID = unID + 1
			hotspot2 xSymbolPos, - 1, unID, ySymbolPos, 3 : unID = unID + 1

			hotspot2 0, ySymbolPos, unID, xSymbolPos, 1+128 : unID = unID + 1
			hotspot2 xSymbolPos, ySymbolPos, unID, xSymbolPos, 2 : unID = unID + 1
			hotspot2 -1, ySymbolPos, unID, xSymbolPos, 3 : unID = unID + 1

			add2 xSymbolPos, ySymbolPos

			attributeHostpot = 128
		else
			hotspot2  0, - B/2, unID : unID = unID + 1

			attributeHostpot = 256
		endif

		add2 -(nModItem - 1) * B/3 / 2, 0

		for ijk = 1 to nModItem
			add2 0, 0
			line2 0, - B, 0, 0
			poly2_b 4, 1, gs_fill_pen, gs_back_pen,
				-B * 0.1, -B * 0.6, 1,
				0, -1, 800,
				0, -B * 0.5, 1001,
				B * 0.1, -B * 0.4, 1001

			hotspot2  0, -B/2, unID : unID = unID + 1

			hotspot2 0, 0, 	unID, B, 1 + attributeHostpot : unID = unID + 1
			hotspot2 0, -B, unID, B, 2	: unID = unID + 1
			hotspot2 0, 1, 	unID, B, 3	: unID = unID + 1
			del 1
			add2 B/3, 0
		next ijk

		del nModItem + 1

		if bShowText2D then
			textAnchor = 5
			yTextMod = textHeight/100 * 0.8
			add2 0, - B
			gosub "Symbol Text"
			del 1
		endif

		if bShowPlateAndBox then del 1
	endif
	if iObjectType = OBJECT_SWITCH_SINGLE_POLE then
		ySymbolPosMod = gs_boxThk * 2
		if bShowPlateAndBox then
			hotspot2 xSymbolPos, ySymbolPos - ySymbolPosMod, unID : unID = unID + 1

			gosub "Show Plate"

			add2 0, - ySymbolPosMod		! - B/2 - 25/80*B
			hotspot2 xSymbolPos, 0, unID, ySymbolPos, 1+128 : unID = unID + 1
			hotspot2 xSymbolPos, ySymbolPos, unID, ySymbolPos, 2 : unID = unID + 1
			hotspot2 xSymbolPos, - 1, unID, ySymbolPos, 3 : unID = unID + 1

			hotspot2 0, ySymbolPos, unID, xSymbolPos, 1+128 : unID = unID + 1
			hotspot2 xSymbolPos, ySymbolPos, unID, xSymbolPos, 2 : unID = unID + 1
			hotspot2 -1, ySymbolPos, unID, xSymbolPos, 3 : unID = unID + 1
			del 1

			add2 xSymbolPos, ySymbolPos
		else
			hotspot2  0, - ySymbolPosMod, unID : unID = unID + 1
		endif

		add2 0, - ySymbolPosMod

		hotspot2  B/2, 0, unID : unID = unID + 1
		hotspot2  -B/2, 0, unID : unID = unID + 1

		hotspot2    0,    0, unID, A2, 1+128, B : unID = unID + 1
		hotspot2    0, 	B/2, unID, A2, 2,     B	: unID = unID + 1
		hotspot2    0, -B/2, unID, A2, 3,     B	: unID = unID + 1


		hotspot2    0,    0, unID, A2, 1+128, B : unID = unID + 1
		hotspot2    0, -B/2, unID, A2, 2,     B	: unID = unID + 1
		hotspot2    0,  B/2, unID, A2, 3,     B	: unID = unID + 1


		poly2_b 2, 1+2+4+64, gs_fill_pen, gs_back_pen,
			0, 	0,		900,
			B/2, 360,		4001

		if bShowText2D then
			textAnchor = 5
			yTextMod = 0
			add2 0, 0
			gosub "Symbol Text"
			del 1
		endif
		del 1

		if bShowPlateAndBox then del 1
	endif

endif

if iGroupType = GROUP_SWITCH_OUTLET then
	if iObjectType = OBJECT_SWITCH_OUTLET then
		if bShowPlateAndBox then
			hotspot2 xSymbolPos, ySymbolPos - B/2, unID : unID = unID + 1

			gosub "Show Plate"

			hotspot2 xSymbolPos, 0, unID, ySymbolPos, 1+128 : unID = unID + 1
			hotspot2 xSymbolPos, ySymbolPos, unID, ySymbolPos, 2 : unID = unID + 1
			hotspot2 xSymbolPos, - 1, unID, ySymbolPos, 3 : unID = unID + 1

			hotspot2 0, ySymbolPos, unID, xSymbolPos, 1+128 : unID = unID + 1
			hotspot2 xSymbolPos, ySymbolPos, unID, xSymbolPos, 2 : unID = unID + 1
			hotspot2 -1, ySymbolPos, unID, xSymbolPos, 3 : unID = unID + 1

			add2 xSymbolPos, ySymbolPos

			attributeHostpot = 128
		else
			hotspot2  0, - B/2, unID : unID = unID + 1

			attributeHostpot = 256
		endif


		if iItemType = SINGLE then
			line2 0, - B, 0, 0

			hotspot2 0, 0,	unID, B, 1 + attributeHostpot : unID = unID + 1
			hotspot2 0, -B, unID, B, 2	: unID = unID + 1
			hotspot2 0, 1,	unID, B, 3	: unID = unID + 1
		else
			line2 -B/13, - B, -B/13, 0
			line2 B/13, - B, B/13, 0

			hotspot2 B/13, 0, 	unID, B, 1 + attributeHostpot : unID = unID + 1
			hotspot2 B/13, -B, 	unID, B, 2	: unID = unID + 1
			hotspot2 B/13, 1, 	unID, B, 3	: unID = unID + 1

			hotspot2 -B/13, 0, 	unID, B, 1 + attributeHostpot : unID = unID + 1
			hotspot2 -B/13, -B, unID, B, 2	: unID = unID + 1
			hotspot2 -B/13, 1, 	unID, B, 3	: unID = unID + 1
		endif

		poly2_b 2, 1+2+4+64, gs_fill_pen, gs_back_pen,
			0, 	-B/2,			900,
			B * 0.3, 360,		4001

		poly2_b 4, 1, gs_fill_pen, gs_back_pen,
			-B * 0.1, -B * 0.6, 1,
			0, -1, 800,
			0, -B * 0.5, 1001,
			B * 0.1, -B * 0.4, 1001
		circle2 0, -B/2, B * 0.3


		if bShowText2D then
			textAnchor = 5
			yTextMod = textHeight/100 * 0.8
			add2 0, - B
			gosub "Symbol Text"
			del 1
		endif

		if bShowPlateAndBox then del 1
	endif
endif

if iGroupType = GROUP_OUTLET then
	if iObjectType = OBJECT_FLOOR_OUTLET then

		poly2_b 4, 1+2+4+64, gs_fill_pen, gs_back_pen,
			-A/2, -A/2,		1,
			-A/2, A/2,		1,
			A/2, A/2, 		1,
			A/2, -A/2,		1

		if iItemType = SINGLE then
			hotspot2  0, 0, unID : unID = unID + 1
			hotspot2  0, 0, unID : unID = unID + 1
			hotspot2  -A/2, A/2, unID : unID = unID + 1
			hotspot2  A/2, A/2, unID : unID = unID + 1
			hotspot2  A/2, -A/2, unID : unID = unID + 1
			hotspot2  -A/2, -A/2, unID : unID = unID + 1

			circle2 0, 0, A * 0.4
			line2 -A * 0.4, 0, A * 0.4, 0
		endif
		if iItemType = DUPLEX then
			hotspot2  0, 0, unID : unID = unID + 1
			hotspot2  0, 0, unID : unID = unID + 1
			hotspot2  0, 0, unID : unID = unID + 1
			hotspot2  -A/2, A/2, unID : unID = unID + 1
			hotspot2  A/2, A/2, unID : unID = unID + 1
			hotspot2  A/2, -A/2, unID : unID = unID + 1
			hotspot2  -A/2, -A/2, unID : unID = unID + 1

			circle2 0, 0, A * 0.4
			line2 -A * 0.4 * cos(asn(1/4)), -A * 0.1, A * 0.4 * cos(asn(1/4)), -A * 0.1
			line2 -A * 0.4 * cos(asn(1/4)), A * 0.1, A * 0.4 * cos(asn(1/4)), A * 0.1
		endif
		if iItemType = ONEPOLE then
			hotspot2  0, 0, unID : unID = unID + 1
			hotspot2  0, 0, unID : unID = unID + 1
			hotspot2  -A/2, A/2, unID : unID = unID + 1
			hotspot2  A/2, A/2, unID : unID = unID + 1
			hotspot2  A/2, -A/2, unID : unID = unID + 1
			hotspot2  -A/2, -A/2, unID : unID = unID + 1

			line2 -A * 0.35, -A * 0.3, A * 0.35, -A * 0.3
			line2 -A * 0.35, -A * 0.3, 0, -A * 0.3 + A * 0.7 * sin(60)
			line2  A * 0.35, -A * 0.3, 0, -A * 0.3 + A * 0.7 * sin(60)
		endif
		if iItemType = TELEPHONE then
			hotspot2  0, 0, unID : unID = unID + 1
			hotspot2  0, 0, unID : unID = unID + 1
			hotspot2  -A/2, A/2, unID : unID = unID + 1
			hotspot2  A/2, A/2, unID : unID = unID + 1
			hotspot2  A/2, -A/2, unID : unID = unID + 1
			hotspot2  -A/2, -A/2, unID : unID = unID + 1

			line2 A * 0.3, -A * 0.35, A * 0.3, A * 0.35
			line2 A * 0.3, -A * 0.35, A * 0.3 - A * 0.7 * sin(60), 0
			line2 A * 0.3,  A * 0.35, A * 0.3 - A * 0.7 * sin(60), 0
			line2 A * 0.3 - A * 0.7 * sin(60), -A * 0.35, A * 0.3 - A * 0.7 * sin(60), A * 0.35
		endif

		rot2 135
		hotspot2    		 0, 0, unID, A2, 1+128, A : unID = unID + 1
		hotspot2  A/2 * sqr(2), 0, unID, A2, 2,     A	: unID = unID + 1
		hotspot2 		  -A/2,	0, unID, A2, 3,     A	: unID = unID + 1
		del 1
		rot2 45
		hotspot2    0,    0, unID, A2, 1+128, A : unID = unID + 1
		hotspot2  A/2 * sqr(2),    0, unID, A2, 2,     A	: unID = unID + 1
		hotspot2 -A/2,    0, unID, A2, 3,     A	: unID = unID + 1
		del 1
		rot2 -45
		hotspot2    0,    0, unID, A2, 1+128, A : unID = unID + 1
		hotspot2  A/2 * sqr(2),    0, unID, A2, 2,     A	: unID = unID + 1
		hotspot2 -A/2,    0, unID, A2, 3,     A	: unID = unID + 1
		del 1
		rot2 -135
		hotspot2    0,    0, unID, A2, 1+128, A : unID = unID + 1
		hotspot2  A/2 * sqr(2),    0, unID, A2, 2,     A	: unID = unID + 1
		hotspot2 -A/2,    0, unID, A2, 3,     A	: unID = unID + 1
		del 1
	endif
	if iObjectType = OBJECT_WALL_FIXTURE_OUTLET then
		if bShowPlateAndBox then
			hotspot2 xSymbolPos, ySymbolPos - A/2, unID : unID = unID + 1

			gosub "Show Plate"

			hotspot2 xSymbolPos, 0, unID, ySymbolPos, 1+128 : unID = unID + 1
			hotspot2 xSymbolPos, ySymbolPos, unID, ySymbolPos, 2 : unID = unID + 1
			hotspot2 xSymbolPos, - 1, unID, ySymbolPos, 3 : unID = unID + 1

			hotspot2 0, ySymbolPos, unID, xSymbolPos, 1+128 : unID = unID + 1
			hotspot2 xSymbolPos, ySymbolPos, unID, xSymbolPos, 2 : unID = unID + 1
			hotspot2 -1, ySymbolPos, unID, xSymbolPos, 3 : unID = unID + 1

			add2 xSymbolPos, ySymbolPos

			attributeHostpot  = 128
		else
			hotspot2  0, - A/2, unID : unID = unID + 1

			attributeHostpot  = 256
		endif

		hotspot2  -A/2, -A/2, unID : unID = unID + 1
		hotspot2  A/2, -A/2, unID : unID = unID + 1

		hotspot2    0, 0, 	unID, A, 1 + attributeHostpot : unID = unID + 1
		hotspot2    0, -A, 	unID, A, 2	: unID = unID + 1
		hotspot2    0,  A, 	unID, A, 3	: unID = unID + 1

		add2 0, - A/2

		poly2_b 2, 1+2+4+64, gs_fill_pen, gs_back_pen,
			0, 	0,		900,
			A * 0.286, 360,		4001

		line2 -A * 0.286, A/2, A * 0.286, A/2
		line2 -A/2, 0, -A * 0.286, 0
		line2 0, -A * 0.286, 0, -A/2
		line2 A * 0.286, 0, A/2, 0
		line2 0, A * 0.286, 0, A/2

		if bShowText2D then gosub "Symbol Text"

		del 1
	endif
	if iObjectType = OBJECT_SPECIAL_PURPOSE_OUTLET then
		ySymbolPosMod = gs_boxThk * 2
		if bShowPlateAndBox then
			hotspot2 xSymbolPos, ySymbolPos - ySymbolPosMod, unID : unID = unID + 1

			gosub "Show Plate"

			add2 0, - ySymbolPosMod		! - ! A/2 - 25/80*A
			hotspot2 xSymbolPos, 0, unID, ySymbolPos, 1+128 : unID = unID + 1
			hotspot2 xSymbolPos, ySymbolPos, unID, ySymbolPos, 2 : unID = unID + 1
			hotspot2 xSymbolPos, - 1, unID, ySymbolPos, 3 : unID = unID + 1

			hotspot2 0, ySymbolPos, unID, xSymbolPos, 1+128 : unID = unID + 1
			hotspot2 xSymbolPos, ySymbolPos, unID, xSymbolPos, 2 : unID = unID + 1
			hotspot2 -1, ySymbolPos, unID, xSymbolPos, 3 : unID = unID + 1
			del 1

			add2 xSymbolPos, ySymbolPos
		else
			hotspot2  0, - ySymbolPosMod, unID : unID = unID + 1
		endif

		add2 0, - ySymbolPosMod

		hotspot2  B/2, 0, unID : unID = unID + 1
		hotspot2  -B/2, 0, unID : unID = unID + 1

		hotspot2    0,    0, unID, A2, 1+128, B : unID = unID + 1
		hotspot2    0, 	B/2, unID, A2, 2,     B	: unID = unID + 1
		hotspot2    0, -B/2, unID, A2, 3,     B	: unID = unID + 1


		hotspot2    0,    0, unID, A2, 1+128, B : unID = unID + 1
		hotspot2    0, -B/2, unID, A2, 2,     B	: unID = unID + 1
		hotspot2    0,  B/2, unID, A2, 3,     B	: unID = unID + 1

		poly2_b 2, 1+2+4+64, gs_fill_pen, gs_back_pen,
			0, 	0,		900,
			B/2, 360,		4001

		if iProngs = 1 then line2 0, ySymbolPosMod, 0, A/2
		if iProngs = 2 then
			line2 -A/8, ySymbolPosMod, -A/8, A/2 * cos(asn(1/4))
			line2 A/8, ySymbolPosMod,  A/8, A/2 * cos(asn(1/4))
		endif

		if bShowText2D then gosub "Symbol Text"

		del 1
	endif
	if iObjectType = OBJECT_OUTLET_1 | iObjectType = OBJECT_OUTLET_2 then
		circleDia = B * 80/105

		if bShowPlateAndBox then
			hotspot2 xSymbolPos, ySymbolPos - circleDia/2 - 25/80*circleDia, unID : unID = unID + 1

			gosub "Show Plate"

			hotspot2 xSymbolPos, 0, unID, ySymbolPos, 1+128 : unID = unID + 1
			hotspot2 xSymbolPos, ySymbolPos, unID, ySymbolPos, 2 : unID = unID + 1
			hotspot2 xSymbolPos, - 1, unID, ySymbolPos, 3 : unID = unID + 1

			hotspot2 0, ySymbolPos, unID, xSymbolPos, 1+128 : unID = unID + 1
			hotspot2 xSymbolPos, ySymbolPos, unID, xSymbolPos, 2 : unID = unID + 1
			hotspot2 -1, ySymbolPos, unID, xSymbolPos, 3 : unID = unID + 1

			add2 xSymbolPos, ySymbolPos

			attributeHostpot = 128
		else
			hotspot2  0, - circleDia/2 - 25/80*circleDia, unID : unID = unID + 1

			attributeHostpot = 256
		endif

		hotspot2 0,    0, unID, B, 1 + attributeHostpot : unID = unID + 1
		hotspot2 0,   -B, unID, B, 2	 : unID = unID + 1
		hotspot2 0,    B, unID, B, 3	 : unID = unID + 1

		add2 0, - circleDia/2 - 25/80*circleDia

		rot2 -90

		poly2_b 2, 1+2+4+64, gs_fill_pen, gs_back_pen,
			0, 			0,		900,
			circleDia/2, 360,		4001

		if iObjectType = OBJECT_OUTLET_1 then
			if iItemType = SINGLE then
				line2 -circleDia/2 - 25/80*circleDia, 0, -circleDia/2, 0
				if iProngs = 2 then line2 -circleDia/2, 0, circleDia/2, 0
			else
				line2 -circleDia/2 - 25/80*circleDia, -circleDia/8, -circleDia/2 * cos(asn(1/4)), -circleDia/8
				line2 -circleDia/2 - 25/80*circleDia,  circleDia/8, -circleDia/2 * cos(asn(1/4)),  circleDia/8
				if iProngs = 2 then
					line2 -circleDia/2 * cos(asn(1/4)), -circleDia/8, circleDia/2 * cos(asn(1/4)), -circleDia/8
					line2 -circleDia/2 * cos(asn(1/4)),  circleDia/8, circleDia/2 * cos(asn(1/4)),  circleDia/8
					if iItemType = TRIPLE then line2 0, -circleDia/2, 0, circleDia/2
					if iItemType = QUAD then
						line2 -circleDia/8, -circleDia/2 * cos(asn(1/4)), -circleDia/8, circleDia/2 * cos(asn(1/4))
						line2  circleDia/8, -circleDia/2 * cos(asn(1/4)),  circleDia/8, circleDia/2 * cos(asn(1/4))
					endif
				endif
				if bMiddleLine then line2 -circleDia/2, 0, circleDia/2, 0
			endif
		endif
		if iObjectType = OBJECT_OUTLET_2 then
			if iItemType = SINGLE then
				line2 -circleDia/2 - 25/80*circleDia, 0, -circleDia/2, 0
			else
				line2 -circleDia/2 - 25/80*circleDia, -circleDia/8, -circleDia/2 * cos(asn(1/4)), -circleDia/8
				line2 -circleDia/2 - 25/80*circleDia,  circleDia/8, -circleDia/2 * cos(asn(1/4)),  circleDia/8
			endif
			line2 -circleDia/2 * cos(30), -circleDia/2 * sin(30), circleDia/2 * cos(30), -circleDia/2 * sin(30)
			line2 -circleDia/2 * cos(30), -circleDia/2 * sin(30), 0, circleDia/2
			line2  circleDia/2 * cos(30), -circleDia/2 * sin(30), 0, circleDia/2
		endif

		del 1

		if bShowText2D then
			add2 0, -circleDia
			if typeTextRotation_m = 0 then rot2 90
			gosub "Symbol Text"
			if typeTextRotation_m = 0 then del 1
			del 1
		endif

		del 1
	endif
endif

if iGroupType = GROUP_SIGNAL then
	if iObjectType = OBJECT_PHONE_SIGNAL then
		modA = 0.5 * SQR(3) * B
		ySymbolPosMod = gs_boxThk * 2

		if bShowPlateAndBox then
			hotspot2 xSymbolPos, ySymbolPos - ySymbolPosMod, unID : unID = unID + 1

			gosub "Show Plate"

			add2 0, - ySymbolPosMod
			hotspot2 xSymbolPos, 0, unID, ySymbolPos, 1+128 : unID = unID + 1
			hotspot2 xSymbolPos, ySymbolPos, unID, ySymbolPos, 2 : unID = unID + 1
			hotspot2 xSymbolPos, - 1, unID, ySymbolPos, 3 : unID = unID + 1

			hotspot2 0, ySymbolPos, unID, xSymbolPos, 1+128 : unID = unID + 1
			hotspot2 xSymbolPos, ySymbolPos, unID, xSymbolPos, 2 : unID = unID + 1
			hotspot2 -1, ySymbolPos, unID, xSymbolPos, 3 : unID = unID + 1
			del 1

			add2 xSymbolPos, ySymbolPos
		endif

		add2 0, - ySymbolPosMod
		hotspot2  0, 0, unID : unID = unID + 1
		hotspot2  -modA/2, 0, unID : unID = unID + 1

		if iItemType = PHONE_TELEPHONE then
			poly2_b 4, 1+2+64, gs_fill_pen, gs_back_pen,
				-modA/2, 0, 1,
				modA/2, -modA * tan(30), 1,
				modA/2, modA * tan(30), 1,
				-modA/2, 0, -1

			line2 -modA/2, -modA * tan(30), -modA/2, modA * tan(30)
		endif
		if iItemType = PHONE_SW_BOARD then
			poly2_b 4, 1+2+64, gs_fill_pen, gs_back_pen,
				-modA/2, 0, 1,
				modA/2, -modA * tan(30), 1,
				modA/2, modA * tan(30), 1,
				-modA/2, 0, -1

			poly2_b 4, 1+2+4+64, gs_fill_pen, gs_back_pen,
				-modA/2, 	-modA * tan(30), 1,
				-modA/2,	modA * tan(30), 1,
				-modA * 0.75, modA * tan(30), 1,
				-modA * 0.75, -modA * tan(30), 1

			fi = atn(B/2 / (0.5 * SQR(3) * B * 0.75))
			rot2 180 - fi
			hotspot2 0, 0, unID, B2, 1+128, B : unID = unID + 1
			hotspot2 B2, 0, unID, B2, 2,    B : unID = unID + 1
			hotspot2 -1, 0, unID, B2, 3,    B : unID = unID + 1
			del 1
			rot2 fi - 180
			hotspot2 0, 0, unID, B2, 1+128, B : unID = unID + 1
			hotspot2 B2, 0, unID, B2, 2,    B : unID = unID + 1
			hotspot2 -1, 0, unID, B2, 3,    B : unID = unID + 1
			del 1
		endif

		rot2 180 - atn(2 * tan(30))
		hotspot2    		 0, 0, unID, A2, 1+128, B : unID = unID + 1
		hotspot2  A2, 0, unID, A2, 2,     B	: unID = unID + 1
		hotspot2 		  -A/2,	0, unID, A2, 3,     B	: unID = unID + 1
		del 1
		rot2 atn(2 * tan(30))
		hotspot2    0,    0, unID, A2, 1+128, B : unID = unID + 1
		hotspot2  A2,    0, unID, A2, 2,     B	: unID = unID + 1
		hotspot2 -A/2,    0, unID, A2, 3,     B	: unID = unID + 1
		del 1
		rot2 -atn(2 * tan(30))
		hotspot2    0,    0, unID, A2, 1+128, B : unID = unID + 1
		hotspot2  A2,    0, unID, A2, 2,     B	: unID = unID + 1
		hotspot2 -A/2,    0, unID, A2, 3,     B	: unID = unID + 1
		del 1
		rot2 atn(2 * tan(30)) - 180
		hotspot2    0,    0, unID, A2, 1+128, B : unID = unID + 1
		hotspot2  A2,    0, unID, A2, 2,     B	: unID = unID + 1
		hotspot2 -A/2,    0, unID, A2, 3,     B	: unID = unID + 1
		del 1

		del 1

		if bShowPlateAndBox then del 1
	endif
	if iObjectType = OBJECT_COMMUNICATION_SIGNAL then
		ySymbolPosMod = gs_boxThk * 2
		if bShowPlateAndBox then
			hotspot2 xSymbolPos, ySymbolPos - ySymbolPosMod, unID : unID = unID + 1

			gosub "Show Plate"

			add2 0, - ySymbolPosMod
			hotspot2 xSymbolPos, 0, unID, ySymbolPos, 1+128 : unID = unID + 1
			hotspot2 xSymbolPos, ySymbolPos, unID, ySymbolPos, 2 : unID = unID + 1
			hotspot2 xSymbolPos, - 1, unID, ySymbolPos, 3 : unID = unID + 1

			hotspot2 0, ySymbolPos, unID, xSymbolPos, 1+128 : unID = unID + 1
			hotspot2 xSymbolPos, ySymbolPos, unID, xSymbolPos, 2 : unID = unID + 1
			hotspot2 -1, ySymbolPos, unID, xSymbolPos, 3 : unID = unID + 1
			del 1

			add2 xSymbolPos, ySymbolPos
		else
			hotspot2  0, - ySymbolPosMod, unID : unID = unID + 1
		endif

		add2 0, - ySymbolPosMod
		hotspot2  0, 0,			unID : unID=unID+1

		rot2 135
		hotspot2    		 0, 0, unID, A2, 1+128, A : unID = unID + 1
		hotspot2  A/2 * sqr(2), 0, unID, A2, 2,     A	: unID = unID + 1
		hotspot2 		  -A/2,	0, unID, A2, 3,     A	: unID = unID + 1
		del 1
		rot2 -135
		hotspot2    0,    0, unID, A2, 1+128, A : unID = unID + 1
		hotspot2  A/2 * sqr(2),    0, unID, A2, 2,     A	: unID = unID + 1
		hotspot2 -A/2,    0, unID, A2, 3,     A	: unID = unID + 1
		del 1
		rot2 45
		hotspot2    0,    0, unID, A2, 1+128, A : unID = unID + 1
		hotspot2  A/2 * sqr(2),    0, unID, A2, 2,     A	: unID = unID + 1
		hotspot2 -A/2,    0, unID, A2, 3,     A	: unID = unID + 1
		del 1
		rot2 -45
		hotspot2    0,    0, unID, A2, 1+128, A : unID = unID + 1
		hotspot2  A/2 * sqr(2),    0, unID, A2, 2,     A	: unID = unID + 1
		hotspot2 -A/2,    0, unID, A2, 3,     A	: unID = unID + 1
		del 1

		poly2_b 4, 1+2+4+64, gs_fill_pen, gs_back_pen,
			-A/2, -A/2,		1,
			-A/2, A/2,		1,
			A/2, A/2, 		1,
			A/2, -A/2, 		1


		if bShowText2D then gosub "Symbol Text"
		del 1

		if bShowPlateAndBox then del 1
	endif
	if iObjectType = OBJECT_AUDIO_SIGNAL then
		if iItemType = ANNUCIATOR then
			modA = 4/3 * B
			hotspot2  0,   0, unID : unID = unID + 1
			hotspot2 -B/2, 0, unID : unID = unID + 1
			hotspot2 B/2, 0, unID : unID = unID + 1
			hotspot2 0, B/2, unID : unID = unID + 1
			hotspot2 0, -B/2, unID : unID = unID + 1
			hotspot2 -modA + 45/120 * modA, 0, unID : unID = unID + 1

			add2 -modA/2 + 45/120 * modA, 0
			poly2_b 4, 1+2+4+64, gs_fill_pen, gs_back_pen,
				modA/2 - 90/120*modA, 0,				1,
				modA/2 - 45/120*modA, -45/120*modA, 1,
				modA/2, 0,									1,
				modA/2 - 45/120*modA, 45/120*modA,	1

			line2 -modA/2, 0,modA/2 - 90/120*modA, 0
			del 1
		endif
		if iItemType = BELL then
			modA = 21/16 * B
			hotspot2  0,	0,	unID : unID=unID+1
			hotspot2 -modA * 65/105, 0, unID : unID=unID+1
			hotspot2  -modA/2 * 80/105, modA/2 * 80/105,	unID : unID=unID+1
			hotspot2  modA/2 * 80/105, modA/2 * 80/105,		unID : unID=unID+1
			hotspot2  modA/2 * 80/105, -modA/2 * 80/105,	unID : unID=unID+1
			hotspot2  -modA/2 * 80/105, -modA/2 * 80/105,	unID : unID=unID+1

			poly2_b 4, 1+2+4+64, gs_fill_pen, gs_back_pen,
				-modA * 40/105, -modA * 40/105,		1,
				-modA * 40/105, modA * 40/105,		1,
				modA * 40/105, modA * 40/105, 		1,
				modA * 40/105, -modA * 40/105,		1

			poly2_b 3, 1+2+4+64, gs_fill_pen, gs_back_pen,
				-modA * 40/105, -modA * 25/105,		1,
				-modA * 40/105, 0,					900,
				-modA * 25/105, -180,				4001

		endif
		if iItemType = BUZZER then
			modA = 21/16 * B
			hotspot2 0,					0, 		unID : unID=unID+1
			hotspot2 -B/2,				B/2,	unID : unID=unID+1
			hotspot2 B/2,				B/2,	unID : unID=unID+1
			hotspot2 B/2,				-B/2, 	unID : unID=unID+1
			hotspot2 -B/2,				-B/2,	unID : unID=unID+1
			hotspot2 modA * 65/105,		0,		unID : unID=unID+1

			poly2_b 4, 1+2+4+64, gs_fill_pen, gs_back_pen,
				-modA * 40/105, -modA * 40/105,		1,
				-modA * 40/105, modA * 40/105,		1,
				modA * 40/105, modA * 40/105, 		1,
				modA * 40/105, -modA * 40/105,		1

			line2  modA * 40/105, -modA * 40/105, modA * 65/105, 0
		endif
		if iItemType = BELL_BUZZER then
			modA = 13/8 * B
			hotspot2  0,				0,					unID : unID=unID+1
			hotspot2  0,				0,					unID : unID=unID+1	! Migration
			hotspot2 -modA * 65/130,	0,					unID : unID=unID+1
			hotspot2 -modA/2 * 80/130,	modA/2 * 80/130,	unID : unID=unID+1
			hotspot2 modA/2 * 80/130,	modA/2 * 80/130,	unID : unID=unID+1
			hotspot2 modA/2 * 80/130,	-modA/2 * 80/130,	unID : unID=unID+1
			hotspot2 -modA/2 * 80/130,	-modA/2 * 80/130,	unID : unID=unID+1
			hotspot2  0,				0,					unID : unID=unID+1	! Migration
			hotspot2 -modA * 65/130,	0,					unID : unID=unID+1	! Migration
			hotspot2 -modA/2 * 80/130,	modA/2 * 80/130,	unID : unID=unID+1	! Migration
			hotspot2 modA/2 * 80/130,	-modA/2 * 80/130,	unID : unID=unID+1	! Migration
			hotspot2 -modA/2 * 80/130,	-modA/2 * 80/130,	unID : unID=unID+1	! Migration
			hotspot2 modA * 65/130, 	0,					unID : unID=unID+1	! Migration

			poly2_b 4, 1+2+4+64, gs_fill_pen, gs_back_pen,
				-modA * 40/130, -modA * 40/130,		1,
				-modA * 40/130, modA * 40/130,		1,
				modA * 40/130, modA * 40/130, 		1,
				modA * 40/130, -modA * 40/130,		1

			poly2_b 3, 1+2+4+64, gs_fill_pen, gs_back_pen,
				-modA * 40/130, -modA * 25/130,		1,
				-modA * 40/130, 0,				900,
				-modA * 25/130, -180,			4001

			line2  modA * 40/130, -modA * 40/130, modA * 65/130, 0
		endif
		if iItemType = CHIMES | iItemType = MOTION_DETECTOR | iItemType = DOOR_OPEN | iItemType = CUSTOM_AUDIO then
			hotspot2  0, 0, unID : unID = unID + 1
			if iItemType = CHIMES then hotspot2  0, 0, unID : unID = unID + 1 ! Migration
			hotspot2  -B/2, B/2, unID : unID = unID + 1
			hotspot2  -B/2, -B/2, unID : unID = unID + 1
			hotspot2  B/2, B/2, unID : unID = unID + 1
			hotspot2  B/2, -B/2, unID : unID = unID + 1

			hotspot2  B/2, B/2, unID : unID = unID + 1 ! Migration
			hotspot2  -B/2, B/2, unID : unID = unID + 1 ! Migration

			poly2_b 4, 1+2+4+64, gs_fill_pen, gs_back_pen,
				-B/2,	-B/2,		1,
				-B/2,	B/2,		1,
				B/2,	B/2, 		1,
				B/2,	-B/2,		1

			if bShowText2D then gosub "Symbol Text"
		endif
		if iItemType = ANNUCIATOR then
			hotspot2    0,    0, unID, A2, 1+128, B : unID = unID + 1
			hotspot2    0, 	B/2, unID, A2, 2,     B	: unID = unID + 1
			hotspot2    0, -B/2, unID, A2, 3,     B	: unID = unID + 1

			hotspot2    0,    0, unID, A2, 1+128, B : unID = unID + 1
			hotspot2  B/2,    0, unID, A2, 2,     B	: unID = unID + 1
			hotspot2 -B/2,    0, unID, A2, 3,     B	: unID = unID + 1

			hotspot2    0,    0, unID, A2, 1+128, B : unID = unID + 1
			hotspot2    0, -B/2, unID, A2, 2,     B	: unID = unID + 1
			hotspot2    0,  B/2, unID, A2, 3,     B	: unID = unID + 1


			hotspot2    0,    0, unID, A2, 1+128, B : unID = unID + 1
			hotspot2 -B/2,    0, unID, A2, 2,     B	: unID = unID + 1
			hotspot2  B/2,    0, unID, A2, 3,     B	: unID = unID + 1
		else
			rot2 135
			hotspot2    		 0, 0, unID, A2, 1+128, B : unID = unID + 1
			hotspot2  B/2 * sqr(2), 0, unID, A2, 2,     B	: unID = unID + 1
			hotspot2 		  -B/2,	0, unID, A2, 3,     B	: unID = unID + 1
			del 1

			rot2 45
			hotspot2    0,    0, unID, A2, 1+128, B : unID = unID + 1
			hotspot2  B/2 * sqr(2),    0, unID, A2, 2,     B	: unID = unID + 1
			hotspot2 -B/2,    0, unID, A2, 3,     B	: unID = unID + 1
			del 1

			rot2 -45
			hotspot2    0,    0, unID, A2, 1+128, B : unID = unID + 1
			hotspot2  B/2 * sqr(2),    0, unID, A2, 2,     B	: unID = unID + 1
			hotspot2 -B/2,    0, unID, A2, 3,     B	: unID = unID + 1
			del 1

			rot2 -135
			hotspot2    0,    0, unID, A2, 1+128, B : unID = unID + 1
			hotspot2  B/2 * sqr(2),    0, unID, A2, 2,     B	: unID = unID + 1
			hotspot2 -B/2,    0, unID, A2, 3,     B	: unID = unID + 1
			del 1
		endif
	endif
endif

end


! ==============================================================================
"Symbol Text":
! ==============================================================================

mirror = not(SYMB_MIRRORED) - SYMB_MIRRORED
angleViewRot = 0
gs_readable_angle = 90
rrr = REQUEST ("View_Rotangle", "", angleViewRot)
totalRotate = (SYMB_ROTANGLE + angleViewRot) MOD 360
if totalRotate < eps then totalRotate = totalRotate + 360

pen gs_text_pen

define style "textStyle" fontType , textHeight * 10/GLOB_SCALE, textAnchor, bTextBold + 2 * bTextItalic + 4 * bTextUnderline
style textStyle

add2 xTextPos, yTextPos - yTextMod
rot2 textAngle
nTrans = 0
if typeTextRotation_m = 2 then								! Readable
	if totalRotate > (gs_readable_angle + eps) & totalRotate < (gs_readable_angle + 180 + eps) then
		rot2 180
		add2 0, 0
		nTrans = nTrans + 2
	endif
else
	if typeTextRotation_m = 1 then							! Horizontal
		rot2 -totalRotate * mirror ! -1/1
		nTrans = nTrans + 1
	endif
endif

text2 0, 0, text2D
del nTrans + 2

if bFulleditText then
	hotspot2 xTextPos, 0, unID, yTextPos, 1+128 : unID = unID + 1
	hotspot2 xTextPos, yTextPos, unID, yTextPos, 2 : unID = unID + 1
	hotspot2 xTextPos, - 1, unID, yTextPos, 3 : unID = unID + 1

	hotspot2 0, yTextPos, unID, xTextPos, 1+128 : unID = unID + 1
	hotspot2 xTextPos, yTextPos, unID, xTextPos, 2 : unID = unID + 1
	hotspot2 -1, yTextPos, unID, xTextPos, 3 : unID = unID + 1
endif

return


! ==============================================================================
"Show Plate":
! ==============================================================================

if bShowPlateAndBox then

	unID = 100

	fullLength2D = max (gs_plateWidth, gs_boxWidth)

	if abs(gs_plateWidth - gs_boxWidth) < EPS then
		leftPanelOverhang2D 	= 0
		rightPanelOverhang2D	= 0
		leftBoxOverhang2D 		= 0
		rightBoxOverhang2D 		= 0
	else
		if gs_plateWidth > gs_boxWidth then
			if gs_bLeftConnection then
				leftPanelOverhang2D = 0
				rightPanelOverhang2D = gs_plateWidth - gs_boxWidth
			else
				if gs_bRightConnection then
					leftPanelOverhang2D = gs_plateWidth - gs_boxWidth
					rightPanelOverhang2D = 0
				else !No ganging
					leftPanelOverhang2D = (gs_plateWidth - gs_boxWidth) / 2
					rightPanelOverhang2D = (gs_plateWidth - gs_boxWidth) / 2
				endif
			endif

			leftBoxOverhang2D = 0
			rightBoxOverhang2D = 0

		else 			! gs_plateWidth < gs_boxWidth

			if gs_bLeftConnection then
				leftBoxOverhang2D = 0
				rightBoxOverhang2D = gs_boxWidth - gs_plateWidth
			else
				if gs_bRightConnection then
					leftBoxOverhang2D = gs_boxWidth - gs_plateWidth
					rightBoxOverhang2D = 0
				else
					leftBoxOverhang2D = (gs_boxWidth - gs_plateWidth) / 2
					rightBoxOverhang2D = (gs_boxWidth - gs_plateWidth) / 2
				endif
			endif

			leftPanelOverhang2D = 0
			rightPanelOvehang2D = 0
		endif
	endif

	hotspot2 0, 0, unID : unID = unID + 1

	add2 -fullLength2D/2 + leftBoxOverhang2D , -gs_plateThk

	poly2_b 5, 1+2+4+64, gs_fill_pen, gs_back_pen,
		0, 0, 1,
		gs_plateWidth, 0, not(gs_bRightConnection),
		gs_plateWidth, gs_plateThk, 1,
		0, gs_plateThk, not(gs_bLeftConnection),
		0, 0, -1

	hotspot2 0, 0, unID : unID = unID + 1
	hotspot2 gs_plateWidth, 0, unID : unID = unID + 1
	hotspot2 gs_plateWidth, gs_plateThk, unID : unID = unID + 1
	hotspot2 0, gs_plateThk, unID : unID = unID + 1

	del 1

	add2 -fullLength2D/2 + leftPanelOverhang2D, 0

	poly2_b 5, 1+2+4+64, gs_fill_pen, gs_back_pen,
		0, 0, 1,
		gs_boxWidth, 0, not(gs_bRightConnection),
		gs_boxWidth, gs_boxThk, 1,
		0, gs_boxThk, not(gs_bLeftConnection),
		0, 0, -1

	hotspot2 0, 0, unID : unID = unID + 1
	hotspot2 gs_boxWidth, 0, unID : unID = unID + 1
	hotspot2 gs_boxWidth, gs_boxThk, unID : unID = unID + 1
	hotspot2 0, gs_boxThk, unID : unID = unID + 1

	del 1

endif

return

]]>
</Script_2D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_1D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
! ==============================================================================
! electricalItems_m
! ==============================================================================


EPS = 0.0001

! ==============================================================================
! Group Type
! ==============================================================================

GROUP_SYMBOL 			= 1
GROUP_SWITCH 			= 2
GROUP_SWITCH_OUTLET		= 3
GROUP_OUTLET 			= 4
GROUP_SIGNAL 			= 5

! ==============================================================================
! Object Type
! ==============================================================================

OBJECT_PUSH_BUTTON			= 1
OBJECT_RECESS_CAN_LIGHT		= 2
OBJECT_VANITY_FIXTURE		= 3
OBJECT_WALL_SCONCE			= 4
OBJECT_SMOKE_DETECTOR		= 5
OBJECT_FAN_SYMBOL			= 6
OBJECT_JUNCTION_BOX			= 7

OBJECT_SWITCH_NORMAL 		= 1
OBJECT_SWITCH_SINGLE_POLE 	= 2

OBJECT_SWITCH_OUTLET		= 1

OBJECT_FLOOR_OUTLET				= 1
OBJECT_WALL_FIXTURE_OUTLET		= 2
OBJECT_SPECIAL_PURPOSE_OUTLET	= 3
OBJECT_OUTLET_1					= 4
OBJECT_OUTLET_2					= 5

OBJECT_PHONE_SIGNAL			= 1
OBJECT_COMMUNICATION_SIGNAL	= 2
OBJECT_AUDIO_SIGNAL			= 3

! ==============================================================================
! Item Type
! ==============================================================================

SMOKE_DETECTOR		= 1
HEAT_DETECTOR		= 2
COMBI_DETECTOR		= 3

FAN						= 1
EXHAUST_FAN				= 2
FAN_WITH_LIGHT			= 3
FAN_LIGHT_COMBO			= 4
CEILING_FAN				= 5

CEILING_JUNCTION_BOX 	= 1
WALL_JUNCTION_BOX 		= 2

SWITCH_COUPLED			= 1
SWITCH_DOUBLE_GANG		= 2
SWITCH_4_GANG			= 3
SWITCH_SING_POLE		= 4
SWITCH_DOUBLE_POLE		= 5
SWITCH_3_WAY			= 6
SWITCH_4_WAY			= 7

SINGLE					= 1
DOUBLE					= 2
TRIPLE					= 3
QUAD					= 4

DUPLEX					= 2
ONEPOLE					= 3
TELEPHONE				= 4

FAN_OUTLET				= 1
CLOCK_OUTLET			= 2
CUSTOM_OUTLET			= 3

PHONE_TELEPHONE			= 1
PHONE_SW_BOARD			= 2

RADIO_OUT				= 1
TV_OUT					= 2
CUSTOM_OUT				= 3

ANNUCIATOR				= 1
BELL					= 2
BUZZER					= 3
BELL_BUZZER				= 4
CHIMES					= 5
MOTION_DETECTOR			= 6
DOOR_OPEN				= 7
CUSTOM_AUDIO			= 8

! ==============================================================================
! Switch Type
! ==============================================================================

TOGGLE	= 1
ROCKER	= 2
BUTTON	= 3

! ==============================================================================
! Outlet Type
! ==============================================================================

RECEPTACLE		= 1
PHONE_OUTLET	= 2
CABLE_OUTLET	= 3

Dot_in_mm = 25.4 / 72

! ==============================================================================
! Strings for Migration - Signal Chimes, Signal MD Sign, Signal Door Open
! ==============================================================================

if GLOB_SCRIPT_TYPE = 7 | GLOB_SCRIPT_TYPE = 8 then
	SMOKE_HEAT_DETECTOR		= 1
	SMOKE_DETECTOR			= 2
	SIGNAL_SMOKE_DETECTOR	= 3

	dim stText2DForMigration[7]
		stText2DForMigration[1] 	= `ДД`
		stText2DForMigration[2] 	= "d"
		stText2DForMigration[3] 	= "A"
		stText2DForMigration[4] 	= "2"
		stText2DForMigration[5] 	= "3"
		stText2DForMigration[6] 	= "4"
		stText2DForMigration[7] 	= "S"

	dim stSwitchTypeForMigration[3]
		stSwitchTypeForMigration[1] = `Переключатель`
		stSwitchTypeForMigration[2] = `Рокер`
		stSwitchTypeForMigration[3] = `Кнопка`

	dim stOutletTypeForMigration[3]
		stOutletTypeForMigration[1] = `Приёмник`
		stOutletTypeForMigration[2] = `Вывод Телефона`
		stOutletTypeForMigration[3] = `Вывод Кабеля`

	dim stPlaceByForMigration[2]
		stPlaceByForMigration[1] = `Центр`
		stPlaceByForMigration[2] = `Основание Плиты`
endif

! ==============================================================================
! Variable settings
! ==============================================================================

if GLOB_SCRIPT_TYPE <> 7 & GLOB_SCRIPT_TYPE <> 8 then
	dim stOrientation[2]
		stOrientation[1] = `Горизонтальный`
		stOrientation[2] = `Вертикальный`

	if (iGroupType = GROUP_OUTLET & iObjectType <> OBJECT_FLOOR_OUTLET) | iGroupType = GROUP_SWITCH\
	 | (iGroupType = GROUP_SIGNAL & (iObjectType = OBJECT_PHONE_SIGNAL | iObjectType = OBJECT_COMMUNICATION_SIGNAL)) then
		values "orientation" stOrientation
		values "iOrientation" 1, 2

		if GLOB_MODPAR_NAME = "orientation" then
			iOrientation = 1
			if orientation = stOrientation[2] then iOrientation = 2
			parameters iOrientation = iOrientation
		else
			orientation = stOrientation[1]
			if iOrientation = 2 then orientation = stOrientation[2]
			parameters orientation = orientation
		endif
	endif

	bLeftCon = gs_bLeftConnection
	bRightCon = gs_bRightConnection
	bBottomCon = gs_bBottomConnection
	bTopCon = gs_bTopConnection
	plateW = gs_plateWidth
	plateH = gs_plateHeight
	boxW = gs_boxWidth
	boxH = gs_boxHeight
	if iOrientation = 2 then
		bLeftCon = gs_bBottomConnection
		bRightCon = gs_bTopConnection
		bBottomCon = gs_bRightConnection
		bTopCon = gs_bLeftConnection
		plateH = gs_plateWidth
		plateW = gs_plateHeight
		boxH = gs_boxWidth
		boxW = gs_boxHeight
	endif

	nModItem = nItem
	if iObjectType = OBJECT_OUTLET_1 then
		if iItemType = QUAD 	then nModItem = 2
	endif

	fullLength = max (plateW, boxW)
	elementLength = min(plateW, boxW) / nModItem
	elementHeight = min(plateH, boxH)

	if abs(plateW - boxW) < EPS then
		leftPanelOverhang = 0
		rightPanelOverhang = 0
		leftBoxOverhang = 0
		rightBoxOverhang = 0
	else
		if plateW > boxW then
			if bLeftCon then
				leftPanelOverhang = 0
				rightPanelOverhang = plateW - boxW
			else
				if bRightCon then
					leftPanelOverhang = plateW - boxW
					rightPanelOverhang = 0
				else !No ganging
					leftPanelOverhang = (plateW - boxW) / 2
					rightPanelOverhang = (plateW - boxW) / 2
				endif
			endif

			leftBoxOverhang = 0
			rightBoxOverhang = 0

		else

			if bLeftCon then
				leftBoxOverhang = 0
				rightBoxOverhang = boxW - plateW
			else
				if bRightCon then
					leftBoxOverhang = boxW - plateW
					rightBoxOverhang = 0
				else
					leftBoxOverhang = (boxW - plateW) / 2
					rightBoxOverhang = (boxW - plateW) / 2
				endif
			endif

			leftPanelOverhang = 0
			rightPanelOvehang = 0
		endif
	endif

	if abs(plateH - boxH) < EPS then
		topPanelOverhang = 0
		bottomPanelOverhang = 0
		topBoxOverhang = 0
		bottomBoxOverhang = 0
	else
		if plateH > boxH then
			if bTopCon then
				topPanelOverhang = 0
				bottomPanelOverhang = plateH - boxH
			else
				if bBottomCon then
					topPanelOverhang = plateH - boxH
					bottomPanelOverhang = 0
				else
					topPanelOverhang = (plateH - boxH) / 2
					bottomPanelOverhang = (plateH - boxH) / 2
				endif
			endif

			topBoxOverhang = 0
			bottomBoxOverhang = 0
		else
			if bTopCon then
				topBoxOverhang = 0
				bottomBoxOverhang = boxH - plateH
			else
				if bBottomCon then
					topBoxOverhang = boxH - plateH
					bottomBoxOverhang = 0
				else
					topBoxOverhang = (boxH - plateH) / 2
					bottomBoxOverhang = (boxH - plateH) / 2
				endif
			endif

			topPanelOverhang = 0
			bottomPanelOverhang = 0
		endif
	endif
endif

]]>
</Script_1D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_PR SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_PR>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_UI SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_UI>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_VL SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
! ==============================================================================
! electricalItems_m
! ==============================================================================


call "FM_types" parameters all

dim stFanSymbolType[5]
	stFanSymbolType[1] = `Вентилятор`
	stFanSymbolType[2] = `Вытяжной Вентилятор`
	stFanSymbolType[3] = `Вентилятор со Светом`
	stFanSymbolType[4] = `Комбинированное Устройство Вентиляции-Освещения`
	stFanSymbolType[5] = `Потолочный Вентилятор`

dim stJunctionBoxType[]
	stJunctionBoxType[1] = `Потолочная Распределительная Коробка`
	stJunctionBoxType[2] = `Настенная Распределительная Коробка`

dim stSwitchOutletType[2]
	stSwitchOutletType[1] = `Одиночный`
	stSwitchOutletType[2] = `Двойной`

dim stFloorOutletType[4]
	stFloorOutletType[1] = `Одиночный`
	stFloorOutletType[2] = `Дуплекс`
	stFloorOutletType[3] = `1 полюс`
	stFloorOutletType[4] = `Телефон`

dim stSpecialPurposeOutletType[3]
	stSpecialPurposeOutletType[1] = `Вывод Вентилятора`
	stSpecialPurposeOutletType[2] = `Вывод Часов`
	stSpecialPurposeOutletType[3] = `Специальный Вывод`

dim stOutlet1Type[4]
	stOutlet1Type[1] = `Одиночный`
	stOutlet1Type[2] = `Двойной`
	stOutlet1Type[3] = `Тройной`
	stOutlet1Type[4] = `Четыре`

dim stPhoneSignalType[2]
	stPhoneSignalType[1] = `Телефон`
	stPhoneSignalType[2] = `SW-панель Телефона`

dim stCommunicationSignalType[3]
	stCommunicationSignalType[1] = `Вывод Радио`
	stCommunicationSignalType[2] = `Вывод ТВ`
	stCommunicationSignalType[3] = `Специальный`

dim stAudioSignalType[8]
	stAudioSignalType[1] = `Сигнализатор`
	stAudioSignalType[2] = `Звонок`
	stAudioSignalType[3] = `Зуммер`
	stAudioSignalType[4] = `Зуммер Звонка`
	stAudioSignalType[5] = `Звуковая Сигнализация`
	stAudioSignalType[6] = `Детектор Движения`
	stAudioSignalType[7] = `Открытая Дверь`
	stAudioSignalType[8] = `Специальный`

dim stSwitchType[3]
	stSwitchType[1] = `Переключатель`
	stSwitchType[2] = `Рокер`
	stSwitchType[3] = `Кнопка`

dim stOutletType[3]
	stOutletType[1] = `Приёмник`
	stOutletType[2] = `Вывод Телефона`
	stOutletType[3] = `Вывод Кабеля`

dim stProngType[2]
	stProngType[1] = `Обычный`
	stProngType[2] = `Выступающий`


if iGroupType = GROUP_SYMBOL then
	if iObjectType = OBJECT_PUSH_BUTTON then
		if GLOB_MODPAR_NAME = "A" then
			B = A
			A2 = A/2 * sqr(2)
			parameters B = B, A2 = A2
		else
			if GLOB_MODPAR_NAME = "A2" then
				A = A2 / sqr(2) * 2
				B = A2 / sqr(2) * 2
				parameters A = A, B = B
			endif
		endif
	endif
	if iObjectType = OBJECT_RECESS_CAN_LIGHT then
		if GLOB_MODPAR_NAME = "A" then
			B = A
			A2 = A/2
			parameters B = B, A2 = A2
		else
			A = A2 * 2
			B = A2 * 2
			parameters A = A, B = B
		endif
	endif
	if iObjectType = OBJECT_VANITY_FIXTURE then
		if GLOB_MODPAR_NAME = "A" then
			B = A
			A2 = A / (1 + sin(45))
			parameters B = B, A2 = A2
		else
			A = A2 * (1 + sin(45))
			B = A2 * 2
			parameters A = A, B = B
		endif
	endif
	if iObjectType = OBJECT_WALL_SCONCE then
		if GLOB_MODPAR_NAME = "B" then
			A = B / 2
			parameters A = A
		else
			B = A * 2
			parameters B = B
		endif
	endif
	if iObjectType = OBJECT_FAN_SYMBOL then
		values "itemType" stFanSymbolType
		values "iItemType" 1, 2, 3, 4, 5

		if GLOB_MODPAR_NAME = "itemType" then
			for nFanSymbolType = 1 to vardim1(stFanSymbolType)
				if itemType = stFanSymbolType[nFanSymbolType] then
					iItemType = nFanSymbolType
				endif
			next nFanSymbolType
			parameters iItemType = iItemType
		else
			itemType = stFanSymbolType[max(1, min(iItemType, vardim1(stFanSymbolType)))]
			parameters itemType = itemType
		endif
		if GLOB_MODPAR_NAME = "itemType" then
			if iItemType = FAN | iItemType = EXHAUST_FAN then
				A = 8"
			endif
			if iItemType = FAN_WITH_LIGHT then
				A = 11"
			endif
			if iItemType = FAN_LIGHT_COMBO then
				A = 21"
				B = A * 0.6666
				A2 = B
				B2 = B/2
				parameters B = B, A2 = A2, B2 = B2
			endif
			if iItemType = CEILING_FAN then
				A = 60"
			endif
			parameters A = A
		endif
		if iItemType <> CEILING_FAN then
			hideparameter "ltDashed"
			lock "ltDashed"
		endif
		if iItemType = FAN | iItemType = FAN_WITH_LIGHT | iItemType = CEILING_FAN then
			hideparameter "gs_fill_type_2", "gs_fill_pen_2", "gs_back_pen_2"
			lock "gs_fill_type_2", "gs_fill_pen_2", "gs_back_pen_2"
		endif

		if iItemType <> FAN_LIGHT_COMBO then
			if GLOB_MODPAR_NAME = "A" then
				B = A
				A2 = A/2 * sqr(2)
				parameters B = B, A2 = A2
			else
				if GLOB_MODPAR_NAME = "A2" then
					A = A2 / sqr(2) * 2
					B = A2 / sqr(2) * 2
					parameters A = A, B = B
				endif
			endif
		else
			if GLOB_MODPAR_NAME = "A" then
				B = A * 0.6666
				A2 = A * 0.6666
				B2 = A * 0.6666 / 2
				parameters B = B, A2 = A2, B2 = B2
			else
				if GLOB_MODPAR_NAME = "A2" then
					A = A2 / 0.6666
					B = A2
					B2 = A2 / 2
					parameters A = A, B = B, B2 = B2
				else
					if GLOB_MODPAR_NAME = "B2" then
						A = B2 * 2 / 0.6666
						B = B2 * 2
						A2 = B2 * 2
						parameters A = A, B = B, A2 = A2
					endif
				endif
			endif
		endif
	endif
	if iObjectType = OBJECT_JUNCTION_BOX then
		values "itemType" stJunctionBoxType
		values "iItemType" 1, 2

		if GLOB_MODPAR_NAME = "itemType" then
			iItemType = 1
			if itemType = stJunctionBoxType[2] then iItemType = 2
			parameters iItemType = iItemType
		else
			itemType = stJunctionBoxType[1]
			if iItemType = 2 then itemType = stJunctionBoxType[2]
			parameters itemType = itemType
		endif
		if GLOB_MODPAR_NAME = "itemType" then
			if iItemType = CEILING_JUNCTION_BOX then
				A = 10"
			endif
			if iItemType = WALL_JUNCTION_BOX then
				A = 14"
			endif
			parameters A = A
		endif
		if iItemType = CEILING_JUNCTION_BOX then
			if GLOB_MODPAR_NAME = "A" then
				B = A
				A2 = A/2 * sqr(2)
				parameters B = B, A2 = A2
			else
				A = A2 / sqr(2) * 2
				B = A2 / sqr(2) * 2
				parameters A = A, B = B
			endif
		else
			if GLOB_MODPAR_NAME = "A" | GLOB_MODPAR_NAME = "itemType" then
				B = 2 * A / 3.5
				A2 = A/2
				parameters B = B, A2 = A2
			else
				A = A2 * 2
				B = A2 * 2 * 2 / 3.5
				parameters A = A, B = B
			endif
		endif
	endif
	if iObjectType = OBJECT_SMOKE_DETECTOR then
		if GLOB_MODPAR_NAME = "type" then
			if iItemType = SMOKE_DETECTOR then
				text2D = typeAbbreviations[1]
				parameters text2D = text2D
			endif
			if iItemType = HEAT_DETECTOR then
				text2D = typeAbbreviations[2]
				parameters text2D = text2D
			endif
			if iItemType = COMBI_DETECTOR then
				text2D = typeAbbreviations[3]
				parameters text2D = text2D
			endif
		endif
	endif

endif

if iGroupType = GROUP_SWITCH then
	if iObjectType = OBJECT_SWITCH_SINGLE_POLE then
		nItem = 1
		parameters nItem = nItem
		lock "nItem"
		hideparameter "nItem"

		if GLOB_MODPAR_NAME = "B" then
			A = B
			A2 = A/2
			parameters B = B, A2 = A2
		else
			A = A2 * 2
			B = A2 * 2
			parameters A = A, B = B
		endif
	endif
endif

if iGroupType = GROUP_SWITCH_OUTLET then
	outletType = stOutletType[1]
	iOutletType = 1
	parameters outletType = outletType, iOutletType = iOutletType
	lock "outletType", "iOutletType"
	hideparameter "outletType", "iOutletType"

	if iObjectType = OBJECT_SWITCH_OUTLET then
		values "itemType" stSwitchOutletType
		values "iItemType" 1, 2

		if GLOB_MODPAR_NAME = "itemType" then
			iItemType = 1
			if itemType = stSwitchOutletType[2] then iItemType = 2
			parameters iItemType = iItemType
		else
			itemType = stSwitchOutletType[1]
			if iItemType = 2 then itemType = stSwitchOutletType[2]
			parameters itemType = itemType
		endif
	endif

	if iItemType = SINGLE then nItem = 2
	if iItemType = DOUBLE then nItem = 3
	parameters nItem = nItem
endif

if iGroupType = GROUP_OUTLET then
	values "outletType" stOutletType
	values "iOutletType" 1, 2, 3

	if GLOB_MODPAR_NAME = "outletType" then
		for nOutletType = 1 to vardim1(stOutletType)
			if outletType = stOutletType[nOutletType] then
				iOutletType = nOutletType
			endif
		next nOutletType
		parameters iOutletType = iOutletType
	else
		outletType = stOutletType[max(1, min(iOutletType, vardim1(stOutletType)))]
		parameters outletType = outletType
	endif

	if iObjectType = OBJECT_FLOOR_OUTLET then
		values "itemType" stFloorOutletType
		values "iItemType" 1, 2, 3, 4

		if GLOB_MODPAR_NAME = "itemType" then
			for nFloorOutletType = 1 to vardim1(stFloorOutletType)
				if itemType = stFloorOutletType[nFloorOutletType] then
					iItemType = nFloorOutletType
				endif
			next nFloorOutletType
			parameters iItemType = iItemType
		else
			itemType = stFloorOutletType[max(1, min(iItemType, vardim1(stFloorOutletType)))]
			parameters itemType = itemType
		endif

		if GLOB_MODPAR_NAME = "itemType" & itemType = stFloorOutletType[4] then
			outletType = stOutletType[2]
			iOutletType = 2
			parameters outletType = outletType, iOutletType = iOutletType
		endif

		if iItemType = SINGLE then
			nItem = 1
			parameters nItem = nItem
			lock "nItem"
		endif
		if iItemType = DUPLEX then
			nItem = 2
			parameters nItem = nItem
			lock "nItem"
		endif
		if iItemType = ONEPOLE | iItemType = TELEPHONE then
			values "nItem" 1, 2
		endif

		bShowText2D = 0
		parameters bShowText2D = bShowText2D
		lock "bShowText2D"
		hideparameter "bShowText2D"

		if GLOB_MODPAR_NAME = "A" then
			B = A
			A2 = A/2 * sqr(2)
			parameters B = B, A2 = A2
		else
			if GLOB_MODPAR_NAME = "A2" then
				A = A2 / sqr(2) * 2
				B = A2 / sqr(2) * 2
				parameters A = A, B = B
			endif
		endif
	endif
	if iObjectType = OBJECT_WALL_FIXTURE_OUTLET then
		values "nItem" range [1, 8]

		if GLOB_MODPAR_NAME = "A" then
			B = A
			A2 = A/2
			parameters B = B, A2 = A2
		else
			A = A2 * 2
			B = A2 * 2
			parameters A = A, B = B
		endif
	endif
	if iObjectType = OBJECT_SPECIAL_PURPOSE_OUTLET then
		values "itemType" stSpecialPurposeOutletType
		values "iItemType" 1, 2, 3

		if GLOB_MODPAR_NAME = "itemType" then
			for nSPOutletType = 1 to vardim1(stSpecialPurposeOutletType)
				if itemType = stSpecialPurposeOutletType[nSPOutletType] then
					iItemType = nSPOutletType
				endif
			next nSPOutletType
			parameters iItemType = iItemType
		else
			itemType = stSpecialPurposeOutletType[max(1, min(iItemType, vardim1(stSpecialPurposeOutletType)))]
			parameters itemType = itemType
		endif

		values "nItem" 1, 2
		values "iProngs" 0, 1, 2

		if iItemType = FAN_OUTLET then
			text2D = typeAbbreviations[4]
			parameters text2D = text2D
			lock "text2D"
		endif
		if iItemType = CLOCK_OUTLET then
			text2D = typeAbbreviations[5]
			parameters text2D = text2D
			lock "text2D"
		endif

		if GLOB_MODPAR_NAME = "B" then
			A = B
			A2 = A/2
			parameters B = B, A2 = A2
		else
			A = A2 * 2
			B = A2 * 2
			parameters A = A, B = B
		endif
	endif
	if iObjectType = OBJECT_OUTLET_1 then
		values "itemType" stOutlet1Type
		values "iItemType" 1, 2, 3, 4

		if GLOB_MODPAR_NAME = "itemType" then
			for nOutlet1Type = 1 to vardim1(stOutlet1Type)
				if itemType = stOutlet1Type[nOutlet1Type] then
					iItemType = nOutlet1Type
				endif
			next nOutlet1Type
			parameters iItemType = iItemType
		else
			itemType = stOutlet1Type[max(1, min(iItemType, vardim1(stOutlet1Type)))]
			parameters itemType = itemType
		endif

		if iItemType = TRIPLE | iItemType = QUAD then
			outletType = stOutletType[1]
			iOutletType = 1
			parameters outletType = outletType, iOutletType = iOutletType
			lock "outletType", "iOutletType"
		endif

		if iItemType = SINGLE then
			nItem = 1
			iOrientation = 1
			parameters nItem = nItem, iOrientation = iOrientation
			lock "nItem", "Orientation", "bMiddleLine"
			hideparameter "Orientation", "bMiddleLine"
		endif
		if iItemType = DOUBLE then
			values "nItem" range [1, 8]
		endif
		if iItemType = TRIPLE then
			nItem = 3
			parameters nItem = nItem
			lock "nItem"
		endif
		if iItemType = QUAD then
			nItem = 4
			iOrientation = 1
			parameters nItem = nItem, iOrientation = iOrientation
			lock "nItem", "Orientation"
			hideparameter "Orientation"
		endif

		values "prongs" stProngType
		values "iProngs" 0, 2

		if GLOB_MODPAR_NAME = "prongs" then
			iProngs = 2
			if prongs = stProngType[1] then iProngs = 0
			parameters iProngs = iProngs
		else
			prongs = stProngType[2]
			if iProngs = 0 then prongs = stProngType[1]
			parameters prongs = prongs
		endif

		if GLOB_MODPAR_NAME = "B" then
			A = 80/105 * B
			A2 = 40/105 * B
			B2 = B
			parameters A = A, A2 = A2, B2 = B2
		else
			A = A2 * 2
			B = A2 * 2 * 105/80
			parameters A = A, B = B
		endif
	endif
	if iObjectType = OBJECT_OUTLET_2 then
		values "itemType" stOutlet1Type[1], stOutlet1Type[2]
		values "iItemType" 1, 2

		if GLOB_MODPAR_NAME = "itemType" then
			iItemType = 1
			if itemType = stOutlet1Type[2] then iItemType = 2
			parameters iItemType = iItemType
		else
			itemType = stOutlet1Type[1]
			if iItemType = 2 then itemType = stOutlet1Type[2]
			parameters itemType = itemType
		endif

		if iItemType = SINGLE then
			nItem = 1
			parameters nItem = nItem
			lock "nItem"
		endif
		if iItemType = DOUBLE then
			values "nItem" range [1, 8]
		endif

		if GLOB_MODPAR_NAME = "B" then
			A = 80/105 * B
			A2 = 40/105 * B
			B2 = B
			parameters A = A, A2 = A2, B2 = B2
		else
			A = A2 * 2
			B = A2 * 2 * 105/80
			parameters A = A, B = B
		endif
	endif

	if bEnableSwitch then
		hideparameter "switchType", "gs_matSwitch"
		lock "switchType", "gs_matSwitch"
	endif
endif

if iGroupType = GROUP_SIGNAL then
	if iObjectType = OBJECT_PHONE_SIGNAL then
		values "itemType" stPhoneSignalType
		values "iItemType" 1, 2

		if GLOB_MODPAR_NAME = "itemType" then
			iItemType = 1
			if itemType = stPhoneSignalType[2] then iItemType = 2
			parameters iItemType = iItemType
		else
			itemType = stPhoneSignalType[1]
			if iItemType = 2 then itemType = stPhoneSignalType[2]
			parameters itemType = itemType
		endif

		values "outletType" stOutletType[2], stOutletType[3]
		values "iOutletType" 2, 3

		if GLOB_MODPAR_NAME = "outletType" then
			iOutletType = 2
			if outletType = stOutletType[3] then iOutletType = 3
			parameters iOutletType = iOutletType
		else
			outletType = stOutletType[2]
			if iOutletType = 3 then outletType = stOutletType[3]
			parameters outletType = outletType
		endif

		values "nItem" range [1, 2]

		if GLOB_MODPAR_NAME = "B" then
			A = B / 2 / tan(30)
			A2 = B/2 / sin(atn(2 * tan(30)))
			B2 = (0.5 * SQR(3) * B * 0.75) / cos(atn(B/2 / (0.5 * SQR(3) * B * 0.75)))
			parameters A = A, A2 = A2, B2 = B2
		else
			if GLOB_MODPAR_NAME = "A2" then
				B = A2 * 2 * sin(atn(2 * tan(30)))
				A = A2 * 2 * sin(atn(2 * tan(30))) / (2 * tan(30))
				B2 = (0.5 * SQR(3) * B * 0.75) / cos(atn(B/2 / (0.5 * SQR(3) * B * 0.75)))
				parameters A = A, B = B, B2 = B2
			else
				B = B2 * cos(atn(B/2 / (0.5 * SQR(3) * B * 0.75))) / (0.5 * SQR(3) * 0.75)
				A = B / 2 / tan(30)
				A2 = B/2 / sin(atn(2 * tan(30)))
				parameters A = A, B = B, A2 = A2
			endif
		endif
	endif
	if iObjectType = OBJECT_COMMUNICATION_SIGNAL then
		values "itemType" stCommunicationSignalType
		values "iItemType" 1, 2, 3

		if GLOB_MODPAR_NAME = "itemType" then
			iItemType = 1
			if itemType = stCommunicationSignalType[2] then iItemType = 2
			if itemType = stCommunicationSignalType[3] then iItemType = 3
			parameters iItemType = iItemType
		else
			itemType = stCommunicationSignalType[1]
			if iItemType = 2 then itemType = stCommunicationSignalType[2]
			if iItemType = 3 then itemType = stCommunicationSignalType[3]
			parameters itemType = itemType
		endif

		values "outletType" stOutletType[2], stOutletType[3]
		values "iOutletType" 2, 3

		if GLOB_MODPAR_NAME = "outletType" then
			iOutletType = 2
			if outletType = stOutletType[3] then iOutletType = 3
			parameters iOutletType = iOutletType
		else
			outletType = stOutletType[2]
			if iOutletType = 3 then outletType = stOutletType[3]
			parameters outletType = outletType
		endif

		values "nItem" range [1, 2]

		if iItemType = RADIO_OUT then
			text2D = typeAbbreviations[6]
			parameters text2D = text2D
			lock "text2D"
		endif
		if iItemType = TV_OUT then
			text2D = typeAbbreviations[7]
			parameters text2D = text2D
			lock "text2D"
		endif

		if GLOB_MODPAR_NAME = "A" then
			B = A
			A2 = A/2 * sqr(2)
			parameters B = B, A2 = A2
		else
			A = A2 / sqr(2) * 2
			B = A2 / sqr(2) * 2
			parameters A = A, B = B
		endif
	endif
	if iObjectType = OBJECT_AUDIO_SIGNAL then
		values "itemType" stAudioSignalType
		values "iItemType" 1, 2, 3, 4, 5, 6, 7, 8

		if GLOB_MODPAR_NAME = "itemType" then
			for nAudioSignalType = 1 to vardim1(stAudioSignalType)
				if itemType = stAudioSignalType[nAudioSignalType] then
					iItemType = nAudioSignalType
				endif
			next nAudioSignalType
			parameters iItemType = iItemType
		else
			itemType = stAudioSignalType[max(1, min(iItemType, vardim1(stAudioSignalType)))]
			parameters itemType = itemType
		endif

		if iItemType = ANNUCIATOR | iItemType = BELL | iItemType = BUZZER | iItemType = BELL_BUZZER then
			bShowText2D = 0
			parameters bShowText2D = bShowText2D
			lock "bShowText2D"
			hideparameter "bShowText2D"
		endif
		if GLOB_MODPAR_NAME = "itemType" & (iItemType = CHIMES | iItemType = MOTION_DETECTOR\
		 | iItemType = DOOR_OPEN | iItemType = CUSTOM_AUDIO) then
			bShowText2D = 1
			parameters bShowText2D = bShowText2D
		endif
		if iItemType = CHIMES then
			text2D = typeAbbreviations[8]
			parameters text2D = text2D
			lock "text2D"
		endif
		if iItemType = MOTION_DETECTOR then
			text2D = typeAbbreviations[9]
			parameters text2D = text2D
			lock "text2D"
		endif
		if iItemType = DOOR_OPEN then
			text2D = typeAbbreviations[10]
			parameters text2D = text2D
			lock "text2D"
		endif

		if iItemType = ANNUCIATOR then
			if GLOB_MODPAR_NAME = "B" then
				A = 4/3 * B
				A2 = B/2
				parameters A = A, A2 = A2
			else
				if GLOB_MODPAR_NAME = "A2" then
					A = A2 * 2 * 4/3
					B = A2 * 2
					parameters A = A, B = B
				endif
			endif
		endif
		if iItemType = BELL then
			if GLOB_MODPAR_NAME = "B" then
				A = 21/16 * B
				A2 = B/2 * sqr(2)
				parameters A = A, A2 = A2
			else
				if GLOB_MODPAR_NAME = "A2" then
					A = A2 / sqr(2) * 2 * 21/16
					B = A2 / sqr(2) * 2
					parameters A = A, B = B
				endif
			endif
		endif
		if iItemType = BUZZER then
			if GLOB_MODPAR_NAME = "B" then
				A = B * 2748/2032
				A2 = B/2 * sqr(2)
				parameters A = A, A2 = A2
			else
				if GLOB_MODPAR_NAME = "A2" then
					A = A2 / sqr(2) * 2 * 2748/2032
					B = A2 / sqr(2) * 2
					parameters A = A, B = B
				endif
			endif
		endif
		if iItemType = BELL_BUZZER then
			if GLOB_MODPAR_NAME = "B" then
				A = B * (21/16 + 716/2748)
				A2 = B/2 * sqr(2)
				parameters A = A, A2 = A2
			else
				if GLOB_MODPAR_NAME = "A2" then
					A = A2 / sqr(2) * 2 * (21/16 + 716/2032)
					B = A2 / sqr(2) * 2
					parameters A = A, B = B
				endif
			endif
		endif
		if iItemType = CHIMES | iItemType = MOTION_DETECTOR | iItemType = DOOR_OPEN | iItemType = CUSTOM_AUDIO then
			if GLOB_MODPAR_NAME = "B" then
				A2 = B/2 * sqr(2)
				parameters A2 = A2
			else
				if GLOB_MODPAR_NAME = "A2" then
					B = A2 / sqr(2) * 2
					parameters B = B
				endif
			endif
			A = B
			parameters A = A
		endif
	endif
endif

if bEnableText2D then
	if bShowText2D then
		values "textHeight" range (0, ]
		values "textHeightPoint" range [1, ]

		dim st_typeTextRotation[3]
			st_typeTextRotation[1] = `Читаемый`
			st_typeTextRotation[2] = `Всегда Горизонтально`
			st_typeTextRotation[3] = `Выровнять по Символу`

		values "typeTextRotation" `Читаемый`,`Всегда Горизонтально`,`Выровнять по Символу`
		values "typeTextRotation_m" 2, 1, 0

		if GLOB_MODPAR_NAME = "typeTextRotation" then
			typeTextRotation_m = 2
			if typeTextRotation = st_typeTextRotation[2] then typeTextRotation_m = 1
			if typeTextRotation = st_typeTextRotation[3] then typeTextRotation_m = 0
			parameters typeTextRotation_m = typeTextRotation_m
		else
			typeTextRotation = st_typeTextRotation[1]
			if typeTextRotation_m = 1 then typeTextRotation = st_typeTextRotation[2]
			if typeTextRotation_m = 0 then typeTextRotation = st_typeTextRotation[3]
			parameters typeTextRotation = typeTextRotation
		endif

		if GLOB_MODPAR_NAME = "textHeight" then
			textHeightPoint = textHeight / Dot_in_mm
			parameters textHeightPoint = textHeightPoint
		endif
		if GLOB_MODPAR_NAME = "textHeightPoint" then
			textHeight = textHeightPoint * Dot_in_mm
			parameters textHeight = textHeight
		endif

		requestWorkingUnit = REQUEST ("Working_length_unit", "", workingLengthUnit)

		if STRSTR (workingLengthUnit,"ffi")  > 0 | STRSTR (workingLengthUnit,"fdi") > 0 | STRSTR (workingLengthUnit,"df") > 0 \
		 | STRSTR (workingLengthUnit,"fi")  > 0  | STRSTR (workingLengthUnit,"di")  > 0 then
			lock "textHeight"
			hideparameter "textHeight"
		endif
		if STRSTR (workingLengthUnit,"m")  > 0 | STRSTR (workingLengthUnit,"cm") > 0 | STRSTR (workingLengthUnit,"mm") > 0 then
			lock "textHeightPoint"
			hideparameter "textHeightPoint"
		endif

		hideparameter "typeTextRotation_m"
	else
		lock "text2D", "gs_text_pen", "fontType", "textHeight", "textHeightPoint", "bTextBold",
			"bTextItalic", "bTextUnderline", "typeTextRotation", "typeTextRotation_m"
		hideparameter "text2D", "gs_text_pen", "fontType", "textHeight", "textHeightPoint", "bTextBold",
			"bTextItalic", "bTextUnderline", "typeTextRotation", "typeTextRotation_m"
	endif
endif

if iGroupType = GROUP_OUTLET | iGroupType = GROUP_SWITCH | iGroupType = GROUP_SWITCH_OUTLET \
 | (iGroupType = GROUP_SIGNAL & (iObjectType = OBJECT_PHONE_SIGNAL | iObjectType = OBJECT_COMMUNICATION_SIGNAL)) then
	values "nItem" range [1,8]

	dim stDetail[3]
		stDetail[1] = `Откл.`
		stDetail[2] = `Простой`
		stDetail[3] = `Детальный`

	values "gs_detlevel_3D" stDetail
	values "gs_detlevel_3D_m" 0, 1, 2

	if GLOB_MODPAR_NAME = "gs_detlevel_3D" then
		for hi = 1 to vardim1(stDetail)
			if gs_detlevel_3D = stDetail[hi] then
				gs_detlevel_3D_m = hi - 1
			endif
		next hi
		parameters gs_detlevel_3D_m = gs_detlevel_3D_m
	else
		gs_detlevel_3D = stDetail[max(1, min(gs_detlevel_3D_m+1, vardim1(stDetail)))]
		parameters gs_detlevel_3D = gs_detlevel_3D
	endif

	if iGroupType = GROUP_OUTLET & iObjectType <> OBJECT_FLOOR_OUTLET then
		dim stPlaceBy[2]
			stPlaceBy[1] = `Центр`
			stPlaceBy[2] = `Основание Плиты`

		values "placeBy" stPlaceBy
		values "iPlaceBy" 1, 2

		if GLOB_MODPAR_NAME = "placeBy" then
			iPlaceBy = 1
			if placeBy = stPlaceBy[2] then iPlaceBy = 2
			parameters iPlaceBy = iPlaceBy
		else
			placeBy = stPlaceBy[1]
			if iPlaceBy = 2 then placeBy = stPlaceBy[2]
			parameters placeBy = placeBy
		endif
	endif
endif

if bEnableSwitch & (iGroupType = GROUP_SWITCH | iGroupType = GROUP_SWITCH_OUTLET) then
	values "switchType" stSwitchType
	values "iSwitchType" 1, 2, 3

	if GLOB_MODPAR_NAME = "switchType" then
		for nSwitchType = 1 to vardim1(stSwitchType)
			if switchType = stSwitchType[nSwitchType] then
				iSwitchType = nSwitchType
			endif
		next nSwitchType
		parameters iSwitchType = iSwitchType
	else
		switchType = stSwitchType[max(1, min(iSwitchType, vardim1(stSwitchType)))]
		parameters switchType = switchType
	endif

	if bEnableOutlet then
	!	lock "outletType", "gs_matOutlet"
		hideparameter "outletType", "gs_matOutlet"
	endif
endif

if GLOB_MODPAR_NAME = "gs_detlevel_3D" | GLOB_MODPAR_NAME = "gs_detlevel_3D_m" then
	if gs_detlevel_3D_m = 0 then
		AC_show2DHotspotsIn3D = 1
	else
		AC_show2DHotspotsIn3D = 0
	endif
	parameters AC_show2DHotspotsIn3D = AC_show2DHotspotsIn3D
endif

if not(gs_bShowBoxIn3D) then
	hideparameter "gs_matBox"
	lock "gs_matBox"
endif

has3DBox = 1
if iGroupType = GROUP_SYMBOL then
	if iObjectType = OBJECT_FAN_SYMBOL then has3DBox = 0
	if iObjectType = OBJECT_JUNCTION_BOX then has3DBox = 0
endif
if iGroupType = GROUP_SIGNAL then
	if iObjectType = OBJECT_AUDIO_SIGNAL then has3DBox = 0
endif

if has3DBox then
	if (not(gs_bCustomWallPlateDim) & (GLOB_MODPAR_NAME = "gs_bCustomWallPlateDim" | GLOB_MODPAR_NAME = "nItem" | \
		GLOB_MODPAR_NAME = "gs_bLeftConnection" | GLOB_MODPAR_NAME = "gs_bRightConnection")) | GLOB_MODPAR_NAME = "orientation"\
		| GLOB_MODPAR_NAME = "itemType" | GLOB_MODPAR_NAME = "nItem" then
		if iOrientation = 1 then
			gs_plateHeight = 0.12
			gs_plateWidth = 0.05 * nModItem + not (gs_bLeftConnection) * 0.01 + not (gs_bRightConnection) * 0.01
		else
			gs_plateWidth = 0.12
			gs_plateHeight = 0.05 * nModItem + not (gs_bBottomConnection) * 0.01 + not (gs_bTopConnection) * 0.01
		endif
		gs_plateThk = 0.0035
		parameters gs_plateHeight = gs_plateHeight
		parameters gs_plateWidth = gs_plateWidth
		parameters gs_plateThk = gs_plateThk
	endif

	if (not(gs_bCustomBoxDim) & (GLOB_MODPAR_NAME = "gs_bCustomBoxDim" | GLOB_MODPAR_NAME = "nItem"))\
		| GLOB_MODPAR_NAME = "orientation" | GLOB_MODPAR_NAME = "itemType" then
		if iOrientation = 1 then
			gs_boxHeight = 0.12
			gs_boxWidth = 0.05 * nModItem
		else
			gs_boxHeight = 0.05 * nModItem
			gs_boxWidth = 0.12
		endif
		gs_boxThk = 0.08
		parameters gs_boxHeight = gs_boxHeight
		parameters gs_boxWidth = gs_boxWidth
		parameters gs_boxThk = gs_boxThk
	endif
endif

if gs_bLeftConnection & gs_bRightConnection then
	if GLOB_MODPAR_NAME = "gs_plateWidth" then
		gs_boxWidth = gs_plateWidth
		parameters gs_boxWidth = gs_boxWidth
	else
		gs_plateWidth = gs_boxWidth
		parameters gs_plateWidth = gs_plateWidth
	endif
endif

if gs_bTopConnection & gs_bBottomConnection then
	if GLOB_MODPAR_NAME = "gs_plateHeight" then
		gs_boxHeight = gs_plateHeight
		parameters gs_boxHeight = gs_boxHeight
	else
		gs_plateHeight = gs_boxHeight
		parameters gs_plateHeight = gs_plateHeight
	endif
endif

if bEnablePlate then
	if not(gs_bCustomWallPlateDim) then
		lock "gs_plateHeight", "gs_plateWidth", "gs_plateThk"
		hideparameter "gs_plateHeight", "gs_plateWidth", "gs_plateThk"
	endif
endif

if bEnableBox then
	if not(gs_bCustomBoxDim) then
		lock "gs_boxHeight", "gs_boxWidth", "gs_boxThk"
		hideparameter "gs_boxHeight", "gs_boxWidth", "gs_boxThk"
	endif
endif

if gs_detlevel_3D_m = 1 then
	lock "gs_resol"
	hideparameter "gs_resol"
endif

if bEnable3D & gs_detlevel_3D_m = 0 & not(bShowPlateAndBox) then
	lock	"gs_ganging",
			"gs_bLeftConnection",
			"gs_bRightConnection"

	hideparameter	"gs_ganging",
			"gs_bLeftConnection",
			"gs_bRightConnection"
endif

if bEnable3D & gs_detlevel_3D_m = 0 then
	lock	"gs_bTopConnection",
			"gs_bBottomConnection",

			"gs_3D_representation",
			"gs_shadow",
			"gs_resol",

			"gs_materials"

	hideparameter	"gs_bTopConnection",
					"gs_bBottomConnection",

					"gs_3D_representation",
					"gs_shadow",
					"gs_resol",

					"gs_materials"

	if not(iGroupType = GROUP_OUTLET & iObjectType = OBJECT_FLOOR_OUTLET) then
		lock			"gs_placement",
						"gs_placementHeight",
						"placeBy"

		hideparameter	"gs_placement",
						"gs_placementHeight",
						"placeBy"
	endif


					
	if bEnablePlate then
		lock			"gs_wallPlateDim",
						"gs_bCustomWallPlateDim",
						"gs_plateHeight",
						"gs_plateWidth",
						"gs_plateThk"

		hideparameter	"gs_wallPlateDim",
						"gs_bCustomWallPlateDim",
						"gs_plateHeight",
						"gs_plateWidth",
						"gs_plateThk",
						"gs_matPlate"
	endif

	if bEnableBox then
		lock			"gs_bShowBoxIn3D",
						"gs_boxDim",
						"gs_bCustomBoxDim",
						"gs_boxHeight",
						"gs_boxWidth",
						"gs_boxThk"

		hideparameter	"gs_bShowBoxIn3D",
						"gs_boxDim",
						"gs_bCustomBoxDim",
						"gs_boxHeight",
						"gs_boxWidth",
						"gs_boxThk",
						"gs_matBox"
	endif

	if bEnableSwitch then
		lock			"gs_matSwitch"
		hideparameter	"gs_matSwitch"
	endif

	if bEnableOutlet then
		lock			"gs_matOutlet"
		hideparameter	"gs_matOutlet"
	endif
endif


]]>
</Script_VL>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Comment SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Comment>

<ParamSection SectVersion="26" SectionFlags="0" SubIdent="0">
	<ParamSectHeader>
		<Version>26</Version>
		<AutoHotspots>false</AutoHotspots>
		<StatBits>
			<STBit_FixSize/>
		</StatBits>
		<WDLeftFrame>0</WDLeftFrame>
		<WDRightFrame>0</WDRightFrame>
		<WDTopFrame>0</WDTopFrame>
		<WDBotFrame>0</WDBotFrame>
		<LayFlags>65535</LayFlags>
		<WDMirrorThickness>0</WDMirrorThickness>
		<WDWallInset>0</WDWallInset>
		<SymbolColor>0</SymbolColor>
	</ParamSectHeader>
	<Parameters>
		<Length Name="A">
			<Description><![CDATA["Dimension 1"]]></Description>
			<Fix/>
			<Value>0.254</Value>
		</Length>
		<Length Name="A2">
			<Description><![CDATA[""]]></Description>
			<Value>0.161644610179</Value>
		</Length>
		<Length Name="B">
			<Description><![CDATA["Dimension 2"]]></Description>
			<Fix/>
			<Value>0.3</Value>
		</Length>
		<Length Name="B2">
			<Description><![CDATA[""]]></Description>
			<Value>0.177165</Value>
		</Length>
		<Length Name="ZZYZX">
			<Description><![CDATA["Height"]]></Description>
			<Fix/>
			<Value>1</Value>
		</Length>
		<Boolean Name="AC_show2DHotspotsIn3D">
			<Description><![CDATA["Show 2D Hotspots in 3D"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Length Name="ac_bottomlevel">
			<Description><![CDATA["Bottom Level"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Length>
		<Length Name="ac_toplevel">
			<Description><![CDATA["Top Level"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Integer Name="iGroupType">
			<Description><![CDATA["Group Type"]]></Description>
			<Value>5</Value>
		</Integer>
		<Integer Name="iObjectType">
			<Description><![CDATA["Object Type"]]></Description>
			<Value>3</Value>
		</Integer>
		<String Name="itemType">
			<Description><![CDATA["Type"]]></Description>
			<Value><![CDATA["Сигнализатор"]]></Value>
		</String>
		<Integer Name="iItemType">
			<Description><![CDATA["Type"]]></Description>
			<Value>1</Value>
		</Integer>
		<String Name="type">
			<Description><![CDATA["Smoke and Heat Detector Type"]]></Description>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="outletType">
			<Description><![CDATA["Outlet Type"]]></Description>
			<Value><![CDATA["Вывод Телефона"]]></Value>
		</String>
		<Integer Name="iOutletType">
			<Description><![CDATA["Outlet Type"]]></Description>
			<Value>2</Value>
		</Integer>
		<String Name="switchType">
			<Description><![CDATA["Switch Type"]]></Description>
			<Value><![CDATA["Переключатель"]]></Value>
		</String>
		<Integer Name="iSwitchType">
			<Description><![CDATA["Switch Type"]]></Description>
			<Value>1</Value>
		</Integer>
		<Integer Name="nItem">
			<Description><![CDATA["Number of Items"]]></Description>
			<Value>1</Value>
		</Integer>
		<Boolean Name="bShowPlateAndBox">
			<Description><![CDATA["Show Plate and Box in 2D"]]></Description>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="bEnable3D">
			<Description><![CDATA["Enable 3D Parameters"]]></Description>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="bEnableText2D">
			<Description><![CDATA["Enable 2D Text Parameters"]]></Description>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="bEnableBox">
			<Description><![CDATA["Enable Box Parameters"]]></Description>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="bEnablePlate">
			<Description><![CDATA["Enable Plate Parameters"]]></Description>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="bEnableSwitch">
			<Description><![CDATA["Enable Switch Parameters"]]></Description>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="bEnableOutlet">
			<Description><![CDATA["Enable Outlet Parameters"]]></Description>
			<Value>0</Value>
		</Boolean>
		<String Name="gs_detlevel_3D">
			<Description><![CDATA["3D Detail Level"]]></Description>
			<Value><![CDATA["Детальный"]]></Value>
		</String>
		<Integer Name="gs_detlevel_3D_m">
			<Description><![CDATA["3D Detail Level"]]></Description>
			<Value>2</Value>
		</Integer>

		<!-- placement3D: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="placement3D">
			<Description><![CDATA["Placement and Orientation in 3D"]]></Description>
		</Title>
		<String Name="orientation">
			<Description><![CDATA["Orientation"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Горизонтальный"]]></Value>
		</String>
		<Integer Name="iOrientation">
			<Description><![CDATA["Orientation"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Length Name="gs_placementHeight">
			<Description><![CDATA["Placement Height"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.1</Value>
		</Length>
		<String Name="placeBy">
			<Description><![CDATA["Place By:"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Основание Плиты"]]></Value>
		</String>
		<Integer Name="iPlaceBy">
			<Description><![CDATA["Place By:"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>2</Value>
		</Integer>

		<!-- gs_wallPlateDim: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_wallPlateDim">
			<Description><![CDATA["Wall Plate"]]></Description>
		</Title>
		<Boolean Name="gs_bCustomWallPlateDim">
			<Description><![CDATA["Custom Wall Plate Dimensions"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Length Name="gs_plateHeight">
			<Description><![CDATA["Plate Height"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.12</Value>
		</Length>
		<Length Name="gs_plateWidth">
			<Description><![CDATA["Plate Width"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.07</Value>
		</Length>
		<Length Name="gs_plateThk">
			<Description><![CDATA["Plate Thickness"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.0035</Value>
		</Length>

		<!-- gs_boxDim: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_boxDim">
			<Description><![CDATA["Box"]]></Description>
		</Title>
		<Boolean Name="gs_bShowBoxIn3D">
			<Description><![CDATA["Show box in 3D"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="gs_bCustomBoxDim">
			<Description><![CDATA["Custom Box Dimensions"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Length Name="gs_boxHeight">
			<Description><![CDATA["Box Height"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.12</Value>
		</Length>
		<Length Name="gs_boxWidth">
			<Description><![CDATA["Box Width"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Length Name="gs_boxThk">
			<Description><![CDATA["Box Thickness"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.08</Value>
		</Length>

		<!-- gs_2D_representation: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_2D_representation">
			<Description><![CDATA["2D Representation"]]></Description>
			<Fix/>
		</Title>
		<Boolean Name="bMiddleLine">
			<Description><![CDATA["Middle Line"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<String Name="prongs">
			<Description><![CDATA["Prongs in 2D"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Выступающий"]]></Value>
		</String>
		<Integer Name="iProngs">
			<Description><![CDATA["Prongs in 2D"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>2</Value>
		</Integer>
		<PenColor Name="gs_cont_pen">
			<Description><![CDATA["Contour Pen"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</PenColor>
		<FillPattern Name="gs_fill_type">
			<Description><![CDATA["Fill Type"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>85</Value>
		</FillPattern>
		<PenColor Name="gs_fill_pen">
			<Description><![CDATA["Fill Pen"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>2</Value>
		</PenColor>
		<PenColor Name="gs_back_pen">
			<Description><![CDATA["Fill Background Pen"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>-1</Value>
		</PenColor>
		<FillPattern Name="gs_fill_type_2">
			<Description><![CDATA["Fill Type"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>85</Value>
		</FillPattern>
		<PenColor Name="gs_fill_pen_2">
			<Description><![CDATA["Fill Pen"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>2</Value>
		</PenColor>
		<PenColor Name="gs_back_pen_2">
			<Description><![CDATA["Fill Background Pen"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>-1</Value>
		</PenColor>
		<LineType Name="ltDashed">
			<Description><![CDATA["Dashed Line Type"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>4</Value>
		</LineType>
		<Length Name="xSymbolPos">
			<Description><![CDATA["Symbol X Position"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="ySymbolPos">
			<Description><![CDATA["Symbol Y Position"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>

		<!-- bShowText2D: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Boolean Name="bShowText2D">
			<Description><![CDATA["Text on Symbol"]]></Description>
			<Flags>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<String Name="text2D">
			<Description><![CDATA["Text"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["ЗС"]]></Value>
		</String>
		<PenColor Name="gs_text_pen">
			<Description><![CDATA["Text Pen"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>4</Value>
		</PenColor>
		<String Name="fontType">
			<Description><![CDATA["Font Type"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Arial"]]></Value>
		</String>
		<RealNum Name="textHeight">
			<Description><![CDATA["Font Size (mm)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>7.05555555556</Value>
		</RealNum>
		<RealNum Name="textHeightPoint">
			<Description><![CDATA["Font Size (point)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>20</Value>
		</RealNum>
		<Boolean Name="bTextBold">
			<Description><![CDATA["Font Style Bold"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="bTextItalic">
			<Description><![CDATA["Font Style Italic"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="bTextUnderline">
			<Description><![CDATA["Font Style Underline"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<String Name="typeTextRotation">
			<Description><![CDATA["Text Orientation on Symbol"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Читаемый"]]></Value>
		</String>
		<Integer Name="typeTextRotation_m">
			<Description><![CDATA["Text Orientation on Symbol"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>2</Value>
		</Integer>
		<Boolean Name="bFulleditText">
			<Description><![CDATA["Editable Text"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Length Name="xTextPos">
			<Description><![CDATA["Text X Position"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="yTextPos">
			<Description><![CDATA["Text Y Position"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Integer Name="textAnchor">
			<Description><![CDATA["Text Anchor Point"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>5</Value>
		</Integer>

		<!-- gs_list: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_list">
			<Description><![CDATA["Parameters for Listing"]]></Description>
			<Fix/>
		</Title>
		<RealNum Name="gs_list_cost">
			<Description><![CDATA["Cost"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<String Name="gs_list_manufacturer">
			<Description><![CDATA["Manufacturer"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_note">
			<Description><![CDATA["Note/Remarks"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_location">
			<Description><![CDATA["Location"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_accessories">
			<Description><![CDATA["Accessories"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<RealNum Name="gs_list_volts">
			<Description><![CDATA["Volts"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<String Name="FM_Type">
			<Description><![CDATA["Group Type"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Электрические Устройства"]]></Value>
		</String>
		<Integer Name="iFMType">
			<Description><![CDATA["Group Type"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>8</Value>
		</Integer>
		<String Name="FM_InventoryNumber">
			<Description><![CDATA["Inventory Number"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="FM_SerialNumber">
			<Description><![CDATA["Serial Number"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="FM_ProductionYear">
			<Description><![CDATA["Production Year"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<RealNum Name="FM_ObjectWeight">
			<Description><![CDATA["Object Weight"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<String Name="FM_ObjectWeightUnit">
			<Description><![CDATA["Object Weight Unit"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["кг"]]></Value>
		</String>
		<RealNum Name="FM_PowerConsumption">
			<Description><![CDATA["Wattage"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<RealNum Name="FM_Egress">
			<Description><![CDATA["Egress"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<String Name="gs_list_custom1">
			<Description><![CDATA["User Defined 1"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_custom2">
			<Description><![CDATA["User Defined 2"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_custom3">
			<Description><![CDATA["User Defined 3"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_custom4">
			<Description><![CDATA["User Defined 4"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_custom5">
			<Description><![CDATA["User Defined 5"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>

		<!-- gs_3D_representation: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_3D_representation">
			<Description><![CDATA["3D Representation"]]></Description>
		</Title>
		<Boolean Name="gs_shadow">
			<Description><![CDATA["Shadow"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Integer Name="gs_resol">
			<Description><![CDATA["Resolution"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>12</Value>
		</Integer>
		<Boolean Name="gs_bLeftConnection">
			<Description><![CDATA["Ganging on the Left"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="gs_bRightConnection">
			<Description><![CDATA["Ganging on the Right"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="gs_bTopConnection">
			<Description><![CDATA["Ganging on the Top"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="gs_bBottomConnection">
			<Description><![CDATA["Ganging on the Bottom"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>

		<!-- gs_materials: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_materials">
			<Description><![CDATA["Surfaces"]]></Description>
		</Title>
		<Material Name="gs_matPlate">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>78</Value>
		</Material>
		<Material Name="gs_matBox">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Material>
		<Material Name="gs_matSwitch">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>19</Value>
		</Material>
		<Material Name="gs_matOutlet">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>19</Value>
		</Material>
		<String Name="typeAbbreviations">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<ArrayValues FirstDimension="10" SecondDimension="0">
				<AVal Row="1"><![CDATA["ДД"]]></AVal>
				<AVal Row="2"><![CDATA["ДО"]]></AVal>
				<AVal Row="3"><![CDATA["КД"]]></AVal>
				<AVal Row="4"><![CDATA["В"]]></AVal>
				<AVal Row="5"><![CDATA["Ч"]]></AVal>
				<AVal Row="6"><![CDATA["Р"]]></AVal>
				<AVal Row="7"><![CDATA["Телевизор"]]></AVal>
				<AVal Row="8"><![CDATA["ЗС"]]></AVal>
				<AVal Row="9"><![CDATA["ДД"]]></AVal>
				<AVal Row="10"><![CDATA["Д"]]></AVal>
			</ArrayValues>
		</String>
	</Parameters>
</ParamSection>

<Copyright SectVersion="1" SectionFlags="0" SubIdent="0">
	<Author>GRAPHISOFT</Author>
	<License>
		<Type>CC BY-ND</Type>
		<Version>3.0</Version>
	</License>
</Copyright>

</Symbol>
