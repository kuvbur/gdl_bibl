<?xml version="1.0" encoding="UTF-8"?>
<Symbol IsArchivable="false" IsPlaceable="false" MainGUID="F5860B5B-BC05-4931-89F2-1C95A57982C1" MigrationValue="Normal" Owner="1196638531" Signature="1196644685" Version="43">
<Ancestry SectVersion="1" SectionFlags="0" SubIdent="0" Template="false">
	<MainGUID>F938E33A-329D-4A36-BE3E-85E126820996</MainGUID>
	<MainGUID>103E8D2C-8230-42E1-9597-46F84CCE28C0</MainGUID>
	<MainGUID>9BCE6139-F733-4E13-B439-AAF1AF232B89</MainGUID>
	<MainGUID>30E58E66-1DA9-4D20-9341-700170100E12</MainGUID>
	<MainGUID>D39DF9D9-2191-4C4D-B004-2E8C1B298D7C</MainGUID>
	<MainGUID>0D6515ED-B372-41C6-8291-C527CE94BA43</MainGUID>
</Ancestry>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_3D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
! ==============================================================================
! showerCabin_m
! ==============================================================================


unID=GS_HotspotUnIDBegin

if gs_detlevel_3D_m=0 then end GS_HotspotUnIDBegin

if not(gs_shadow) then SHADOW OFF

pen gs_cont_pen

if (GLOB_CONTEXT > 20 & GLOB_CONTEXT < 40) | gs_detlevel_3D_m = 1 | gs_detlevel_3D_m = 3 then
	gs_resol = 12
else
	gs_resol = gs_resol
endif
resol gs_resol

bFramedPanel = 2 - iPanelType		! Framed Panel = 1, Fully Panel = 2
if bFramedPanel then panelThk = frameThk else panelThk = glassThk
frameWidth = cabinFrameWidth
frameWidthL = frameWidth
frameWidthR = frameWidth
frameWidthB = frameWidth
frameWidthT = frameWidth
frameMaskR = 0
framemaskR2 = 0
frameMaskL = 0
withoutGlas = 0
panelHeight = ZZYZX
cutAngleL = 0
cutAngleR = 0
cutMaskR = 0
iStiffL = 0
iStiffR = 0
bCeilingStiffL = 0
bCeilingStiffR = 0
stiffAngle = 0
stiffType = 0
hingeWidth = 0.04
hingeHeight = 0.04
hingeThk = 0.003
hingeAngleL = 0
hingeAngleR = 0
ceilingThk = 0.02
bHandle = 0
if iHandleType = 8 then gs_knob_type_m = 0
if iHandleType = 1 then gs_knob_type_m = 9
if iHandleType = 2 then gs_knob_type_m = 10
if iHandleType = 3 then gs_knob_type_m = 1
if iHandleType = 4 then gs_knob_type_m = 2
if iHandleType = 5 then gs_knob_type_m = 4
if iHandleType = 6 then gs_knob_type_m = 5
if iHandleType = 7 then gs_knob_type_m = 8
if iHandleType = 2 then
	knob_size = 0.3
else
	knob_size = 0.1
endif
if iHandleType > 4 then zHandlePos = knob_size/2 else zHandlePos = 0

bWallL = 0		! Left Wall
bWallR = 0		! Right Wall
bWallB = 0		! Back Wall
if iCabinType = CABINTYPE_ALCOVE then
	bWallL = 1		! Left Wall
	bWallR = 1		! Right Wall
	bWallB = 1		! Back Wall
endif
if iCabinType = CABINTYPE_CORNER then
	bWallL = 1		! Left Wall
	bWallB = 1		! Back Wall
endif
if iCabinType = CABINTYPE_PENINSULAR then
	bWallB = 1		! Back Wall
endif

if iCabinForm = CABINFORM_SQUAREDALCOVE | iCabinForm = CABINFORM_SQUAREDCORNER | iCabinForm = CABINFORM_SQUAREDPENINSULAR | iCabinForm = CABINFORM_SQUARE then			! Square
	if not(bWallL) then 		! Left Panel
		panelWidth = B
		cutAngleL = 45 * not(bWallB)
		cutAngleR = 45
		xPanelPos = -A/2
		yPanelPos = B/2
		panelRotation = -90
		iStiffL = 1 + bWallB
		iStiffR = 0
		bCeilingStiffL = 1
		bCeilingStiffR = 0
		gosub "Straight_Panel"
	endif

	if not(bWallB) then			! Back Panel
		panelWidth = A
		cutAngleL = 45
		cutAngleR = 45
		xPanelPos = A/2
		yPanelPos = B/2
		panelRotation = -180
		iStiffL = 0
		iStiffR = 0
		bCeilingStiffL = 0
		bCeilingStiffR = 0
		gosub "Straight_Panel"
	endif

	if not(bWallR) then			! Right Panel
		if iDoorType = DOORTYPE_CORNERSLIDING then
			panelWidth =  sidePanelWidthR -cabinFrameWidth/2
			yPanelPos = B/2 - sidePanelWidthR + cabinFrameWidth/2
			cutAngleL = 0
			frameWidthL = cabinFrameWidth/2
			frameMaskL = 7
		else
			panelWidth = B
			yPanelPos = -B/2
			cutAngleL = 45
		endif
		cutAngleR = 45 * not(bWallB)
		xPanelPos = A/2
		panelRotation = 90
		iStiffL = 0
		iStiffR = 1 + bWallB
		bCeilingStiffL = 0
		bCeilingStiffR = 1
		gosub "Straight_Panel"
	endif
	if iDoorType = DOORTYPE_CORNERSLIDING then
		panelWidth =  B - sidePanelWidthR + cabinFrameWidth/2
		cutAngleL = 45
		cutAngleR = 0
		xPanelPos = A/2
		yPanelPos = -B/2
		panelRotation = 90
		frameWidthL = 0
		frameWidthR = cabinFrameWidth/2
		frameMaskR = 7
		withoutGlas = 1
		iStiffR = 0
		gosub "Straight_Panel"
	endif

	if bFramedPanel then		! Front Panel
		panelWidth = A - (bSidePanelL * (sidePanelWidthL - cabinFrameWidth/2)) - (bSidePanelR * (sidePanelWidthR - cabinFrameWidth/2))
		panelHeight = ZZYZX
		if bWallL then cutAngleL = 0 else cutAngleL = 45 * not(bSidePanelL)
		if bWallR then cutAngleR = 0 else cutAngleR = 45 * not(bSidePanelR)
		xPanelPos = -A/2 + (bSidePanelL * (sidePanelWidthL - cabinFrameWidth/2))
		yPanelPos = -B/2
		panelRotation = 0
		frameWidthL = cabinFrameWidth - cabinFrameWidth/2 * bSidePanelL
		frameMaskL = 7 * bSidePanelL
		if iDoorType = DOORTYPE_CORNERSLIDING then
			frameWidthR = 0
		else
			frameWidthR = cabinFrameWidth - cabinFrameWidth/2 * bSidePanelR
			frameMaskR = 7 * bSidePanelR
		endif
		withoutGlas = 1
		iStiffR = 0
		gosub "Straight_Panel"
	endif

	if bSidePanelL then			! Left Side Panel
		panelWidth = sidePanelWidthL - cabinFrameWidth/2 * bFramedPanel
		cutAngleL = 45 * not(bWallL)
		cutAngleR = 0
		xPanelPos = -A/2
		yPanelPos = -B/2
		panelRotation = 0
		frameWidthR = cabinFrameWidth/2
		frameMaskR = 7
		iStiffL = 1 + bWallL
		iStiffR = 0
		bCeilingStiffL = 1
		bCeilingStiffR = 0
		gosub "Straight_Panel"
	endif

	if bSidePanelR then			! Right Side Panel
		panelWidth = sidePanelWidthR - cabinFrameWidth/2 * bFramedPanel
		cutAngleL = 0
		cutAngleR = 45 * not(bWallR)
		xPanelPos = A/2 - sidePanelWidthR + cabinFrameWidth/2 * bFramedPanel
		yPanelPos = -B/2
		panelRotation = 0
		frameWidthL = cabinFrameWidth/2
		frameMaskL = 7
		iStiffL = 0
		iStiffR = 1 + bWallR
		bCeilingStiffL = 0
		bCeilingStiffR = 1
		gosub "Straight_Panel"
	endif

	if bFramedPanel then
		if bSidePanelL = 0 & bSidePanelR = 0 then
			panelWidth = A - 2 * cabinFrameWidth
			xPanelPos = -A/2 + cabinFrameWidth
		endif
		if bSidePanelL = 1 & bSidePanelR = 0 then
			panelWidth = A - cabinFrameWidth - sidePanelWidthL
			xPanelPos = -A/2 + sidePanelWidthL
		endif
		if bSidePanelL = 1 & bSidePanelR = 1 then
			panelWidth = doorWidth
			xPanelPos = -A/2 + sidePanelWidthL
		endif
	else
		if bSidePanelL = 0 & bSidePanelR = 0 then
			panelWidth = A - 2 * panelThk
			xPanelPos = -A/2 + panelThk
		endif
		if bSidePanelL = 1 & bSidePanelR = 0 then
			panelWidth = A - panelThk - sidePanelWidthL
			xPanelPos = -A/2 + sidePanelWidthL
		endif
		if bSidePanelL = 1 & bSidePanelR = 1 then
			panelWidth = A - sidePanelWidthL - sidePanelWidthR
			xPanelPos = -A/2 + sidePanelWidthL
		endif
	endif
	yPanelPos = -B/2
	panelRotation = 0
	bHandle = 1
	iStiffL = 0
	iStiffR = 0
	bCeilingStiffL = 0
	bCeilingStiffR = 0
	gosub "Opening_Type"			! Opening Panel

	if iDoorType = DOORTYPE_SIMPLELEAF_SIDEPANEL2 | iDoorType = DOORTYPE_DOUBLELEAF_SIDEPANEL2 | iDoorType = DOORTYPE_DOUBLESLIDING then
		hotspot -A/2 + sidePanelWidthL + doorWidth/2, -B/2, 0, unID, halfDoorWidth, 1+128, doorWidth : unID=unID+1
		hotspot -A/2 + sidePanelWidthL + doorWidth/2 - halfDoorWidth, -B/2, 0, unID, halfDoorWidth, 2, doorWidth : unID=unID+1
		hotspot -A/2 + sidePanelWidthL + 1, -B/2, 0, unID, halfDoorWidth, 3, doorWidth : unID=unID+1

		hotspot -A/2 + sidePanelWidthL + doorWidth/2, -B/2, 0, unID, halfDoorWidth, 1+128, doorWidth : unID=unID+1
		hotspot -A/2 + sidePanelWidthL + doorWidth/2 + halfDoorWidth, -B/2, 0, unID, halfDoorWidth, 2, doorWidth : unID=unID+1
		hotspot -A/2 + sidePanelWidthL, -B/2, 0, unID, halfDoorWidth, 3, doorWidth : unID=unID+1
	endif
	if iDoorType = DOORTYPE_SIMPLELEAF_SIDEPANEL1 | iDoorType = DOORTYPE_DOUBLELEAF_SIDEPANEL1 | iDoorType = DOORTYPE_SLIDING then
		hotspot A/2, -B/2, 0, unID, doorWidth, 1+128 : unID=unID+1
		hotspot A/2 - doorWidth, -B/2, 0, unID, doorWidth, 2 : unID=unID+1
		hotspot A/2 + 1, -B/2, 0, unID, doorWidth, 3 : unID=unID+1
	endif
	if iDoorType = DOORTYPE_CORNERSLIDING then
		add A/2 - doorWidth/2*cos(45), -B/2 + doorWidth/2*cos(45), 0
		rotz 45
		hotspot 0, 0, 0, unID, halfDoorWidth, 1+128, doorWidth : unID=unID+1
		hotspot halfDoorWidth, 0, 0, unID, halfDoorWidth, 2, doorWidth : unID=unID+1
		hotspot -1, 0, 0, unID, halfDoorWidth, 3, doorWidth : unID=unID+1

		hotspot 0, 0, 0, unID, halfDoorWidth, 1+128, doorWidth : unID=unID+1
		hotspot -halfDoorWidth, 0, 0, unID, halfDoorWidth, 2, doorWidth : unID=unID+1
		hotspot 1, 0, 0, unID, halfDoorWidth, 3, doorWidth : unID=unID+1
		del 2
	endif

endif

if iCabinForm = CABINFORM_ROUNDEDCORNER then			! Rounded Corner

	if not(bWallL) then 		! Left Panel
		panelWidth = B
		cutAngleL = 45 * not(bWallB)
		cutAngleR = 45
		xPanelPos = -A/2
		yPanelPos = B/2
		panelRotation = -90
		gosub "Straight_Panel"
	endif

	if not(bWallB) then			! Back Panel
		panelWidth = A
		cutAngleL = 45
		cutAngleR = 45
		xPanelPos = A/2
		yPanelPos = B/2
		panelRotation = -180
		gosub "Straight_Panel"
	endif

	panelWidth =  sidePanelWidthR
	yPanelPos = B/2 - sidePanelWidthR
	cutAngleL = 0
	cutAngleR = 45 * not(bWallB)
	xPanelPos = A/2
	panelRotation = 90
	frameMaskL = 7
	iStiffL = 0
	iStiffR = 1 + bWallB
	bCeilingStiffL = 0
	bCeilingStiffR = 1
	gosub "Straight_Panel"

	panelWidth = sidePanelWidthL
	cutAngleL = 45 * not(bWallL)
	cutAngleR = 0
	xPanelPos = -A/2
	yPanelPos = -B/2
	panelRotation = 0
	frameMaskR = 7
	iStiffL = 1 + bWallB
	iStiffR = 0
	bCeilingStiffL = 1
	bCeilingStiffR = 0
	gosub "Straight_Panel"

	if bFramedPanel then		! Front Panel
		arcRadius = doorWidth*cos(45) - panelThk
		panelWidth = arcRadius * PI/2
		cutAngleL = 22.5
		cutAngleR = 22.5
		xPanelPos = -A/2 + sidePanelWidthL
		yPanelPos = -B/2
		panelRotation = 0
		withoutGlas = 1
		frameWidthL = 0
		frameMaskL = 7
		frameWidthR = 0
		frameMaskR = 7
		gosub "Curved_Panel"
		lin_ xPanelPos, yPanelPos, cabinFrameWidth, xPanelPos, yPanelPos, panelHeight - cabinFrameWidth
		lin_ xPanelPos, yPanelPos + frameThk, cabinFrameWidth, xPanelPos, yPanelPos + frameThk, panelHeight - cabinFrameWidth
		lin_ A/2, -B/2 + doorWidth*cos(45), cabinFrameWidth, A/2, -B/2 + doorWidth*cos(45), panelHeight - cabinFrameWidth
		lin_ A/2 - frameThk, -B/2 + doorWidth*cos(45), cabinFrameWidth, A/2 - frameThk, -B/2 + doorWidth*cos(45), panelHeight - cabinFrameWidth
	endif

	arcRadius = doorWidth*cos(45) - panelThk
	arcAngle = 90
	panelWidth = arcRadius * PI / 2
	xPanelPos = -A/2 + sidePanelWidthL
	yPanelPos = -B/2 + panelThk * (iDoorType > 8)
	panelRotation = 45
	bHandle = 1
	iStiffL = 0
	iStiffR = 0
	bCeilingStiffL = 0
	bCeilingStiffR = 0
	gosub "Opening_Type"			! Opening Panel

	add A/2 - doorWidth/2*cos(45), -B/2 + doorWidth/2*cos(45), 0
	rotz 45
	hotspot 0, 0, 0, unID, halfDoorWidth, 1+128, doorWidth : unID=unID+1
	hotspot halfDoorWidth, 0, 0, unID, halfDoorWidth, 2, doorWidth : unID=unID+1
	hotspot -1, 0, 0, unID, halfDoorWidth, 3, doorWidth : unID=unID+1

	hotspot 0, 0, 0, unID, halfDoorWidth, 1+128, doorWidth : unID=unID+1
	hotspot -halfDoorWidth, 0, 0, unID, halfDoorWidth, 2, doorWidth : unID=unID+1
	hotspot 1, 0, 0, unID, halfDoorWidth, 3, doorWidth : unID=unID+1
	del 2

endif

if iCabinForm = CABINFORM_CHAMFERCORNER then			! Chamfer Corner

	if not(bWallL) then 		! Left Panel
		panelWidth = B
		cutAngleL = 45 * not(bWallB)
		cutAngleR = 45
		xPanelPos = -A/2
		yPanelPos = B/2
		panelRotation = -90
		iStiffL = 1 + bWallB
		iStiffR = 0
		bCeilingStiffL = 1
		bCeilingStiffR = 0
		gosub "Straight_Panel"
	endif

	if not(bWallB) then			! Back Panel
		panelWidth = A
		cutAngleL = 45
		cutAngleR = 45
		xPanelPos = A/2
		yPanelPos = B/2
		panelRotation = -180
		gosub "Straight_Panel"
	endif

	panelWidth =  sidePanelWidthR
	yPanelPos = B/2 - sidePanelWidthR
	cutAngleL = 22.5
	cutAngleR = 45 * not(bWallB)
	xPanelPos = A/2
	panelRotation = 90
	iStiffL = 0
	iStiffR = 1 + bWallB
	bCeilingStiffL = 0
	bCeilingStiffR = 1
	gosub "Straight_Panel"

	if bFramedPanel then		! Front Panel
		panelWidth = doorWidth
		cutAngleL = 22.5
		cutAngleR = 22.5
		xPanelPos = -A/2 + (bSidePanelL * sidePanelWidthL)
		yPanelPos = -B/2
		panelRotation = 45
		withoutGlas = 1
		gosub "Straight_Panel"
	endif

	panelWidth = sidePanelWidthL
	cutAngleL = 45 * not(bWallL)
	cutAngleR = 22.5
	xPanelPos = -A/2
	yPanelPos = -B/2
	panelRotation = 0
	iStiffL = 1 + bWallB
	iStiffR = 0
	bCeilingStiffL = 1
	bCeilingStiffR = 0
	gosub "Straight_Panel"

	if bFramedPanel then
		panelWidth = doorWidth - 2 * cabinFrameWidth
		xPanelPos = -A/2 + sidePanelWidthL + cabinFrameWidth * cos(45)
		yPanelPos = -B/2 + cabinFrameWidth * sin(45)
	else
		panelWidth = doorWidth
		xPanelPos = -A/2 + sidePanelWidthL
		yPanelPos = -B/2
	endif
	panelRotation = 45
	bHandle = 1
	iStiffL = 0
	iStiffR = 0
	bCeilingStiffL = 0
	bCeilingStiffR = 0
	gosub "Opening_Type"			! Opening Panel

	add A/2 - doorWidth/2*cos(45), -B/2 + doorWidth/2*cos(45), 0
	rotz 45
	hotspot 0, 0, 0, unID, halfDoorWidth, 1+128, doorWidth : unID=unID+1
	hotspot halfDoorWidth, 0, 0, unID, halfDoorWidth, 2, doorWidth : unID=unID+1
	hotspot -1, 0, 0, unID, halfDoorWidth, 3, doorWidth : unID=unID+1

	hotspot 0, 0, 0, unID, halfDoorWidth, 1+128, doorWidth : unID=unID+1
	hotspot -halfDoorWidth, 0, 0, unID, halfDoorWidth, 2, doorWidth : unID=unID+1
	hotspot 1, 0, 0, unID, halfDoorWidth, 3, doorWidth : unID=unID+1
	del 2

endif

if iCabinForm = CABINFORM_ROUNDEDPENINSULAR then			! Rounded Peninsular

	gosub "Straight_Curved_Panel"

	arcRadius = A/2 - panelThk
	arcAngle = 2 * asn(doorWidth/A)
	if bFramedPanel then
		if iDoorType < 8 then
			panelWidth = arcRadius * PI * arcAngle/180
			xPanelPos = -doorWidth/2
			yPanelPos = -B/2 + A/2 -(arcRadius + panelThk) * cos(arcAngle/2)
		else
			panelWidth = (arcRadius) * PI * arcAngle/180
			xPanelPos = -doorWidth/2 + (panelThk) * sin(arcAngle/2)
			yPanelPos = -A/2 * cos(arcAngle/2) + (panelThk) * cos(arcAngle/2)
		endif
	else
		panelWidth = arcRadius * PI * arcAngle/180
		xPanelPos = -doorWidth/2
		yPanelPos = -B/2 + A/2 -(arcRadius + panelThk) * cos(arcAngle/2)
	endif
	panelRotation = 0
	bHandle = 1
	gosub "Opening_Type"			! Opening Panel

	arcAngle = 2 * asn(doorWidth/A)
	add 0, -A/2 * cos(arcAngle/2), 0
	hotspot 0, 0, 0, unID, halfDoorWidth, 1+128, doorWidth : unID=unID+1
	hotspot halfDoorWidth, 0, 0, unID, halfDoorWidth, 2, doorWidth : unID=unID+1
	hotspot -1, 0, 0, unID, halfDoorWidth, 3, doorWidth : unID=unID+1

	hotspot 0, 0, 0, unID, halfDoorWidth, 1+128, doorWidth : unID=unID+1
	hotspot -halfDoorWidth, 0, 0, unID, halfDoorWidth, 2, doorWidth : unID=unID+1
	hotspot 1, 0, 0, unID, halfDoorWidth, 3, doorWidth : unID=unID+1
	del 1

endif

if iCabinForm = CABINFORM_ROUND then			! Round

	arcRadius = A/2
	arcAngle = 2 * asn(doorWidth/A)
	frameAngle = cabinFrameWidth/(arcRadius*PI)*180
	if bFramedPanel then
		material matFrame
		addz cabinFrameWidth - 100*eps*0
		cutform 4, 1, 1 + 2,
			0, 0, 1, panelHeight - 2*cabinFrameWidth + 2*eps*0,
			0, 0, 95,
			-A * sin(arcAngle/2), -A * cos(arcAngle/2), 95,
			A * sin(arcAngle/2), -A * cos(arcAngle/2), 95,
			0, 0, -1
		del 1
		addz cabinFrameWidth
		cutform 8, 1, 1 + 2,
			0, 0, 1, panelHeight - 2*cabinFrameWidth,
			0, 0, 95,
			A * sin(arcAngle/2 + frameAngle), -A * cos(arcAngle/2 + frameAngle), 95,
			A, -A * cos(arcAngle/2 + frameAngle), 95,
			A, A, 95,
			-A, A, 95,
			-A, -A * cos(arcAngle/2 + frameAngle), 95,
			-A * sin(arcAngle/2 + frameAngle), -A * cos(arcAngle/2 + frameAngle), 95,
			0, 0, 1
		del 1
		prism_ 5 + 5, panelHeight,
			-arcRadius * sin(arcAngle/2), -arcRadius * cos(arcAngle/2), 15 + 64,
			0, 0, 900,
			arcRadius * sin(arcAngle/2), -arcRadius * cos(arcAngle/2), 3015 + 64,
			-arcRadius * sin(arcAngle/2), -arcRadius * cos(arcAngle/2), 1015 + 64,
			-arcRadius * sin(arcAngle/2), -arcRadius * cos(arcAngle/2), -1,
			-(arcRadius - frameThk)* sin(arcAngle/2), -(arcRadius - frameThk) * cos(arcAngle/2), 15 + 64,
			0, 0, 900,
			(arcRadius - frameThk) * sin(arcAngle/2), -(arcRadius - frameThk) * cos(arcAngle/2), 3015 + 64,
			-(arcRadius - frameThk) * sin(arcAngle/2), -(arcRadius - frameThk) * cos(arcAngle/2), 1015 + 64,
			-(arcRadius - frameThk) * sin(arcAngle/2), -(arcRadius - frameThk) * cos(arcAngle/2), -1
		cutend
		cutend

		material matGlass
		cutform 6, 1, 1 + 2,
			0, 0, 1, panelHeight,
			0, 0, 95,
			-A * sin(arcAngle/2 + frameAngle), -A * cos(arcAngle/2 + frameAngle), 95,
			-A * sin(arcAngle/2 + frameAngle), -A * cos(arcAngle/2 + frameAngle) - A, 95,
			A * sin(arcAngle/2 + frameAngle), -A * cos(arcAngle/2 + frameAngle) - A, 95,
			A * sin(arcAngle/2 + frameAngle), -A * cos(arcAngle/2 + frameAngle), 95,
			0, 0, -1
		addz cabinFrameWidth
		prism_ 5 + 5, panelHeight - 2*cabinFrameWidth,
			-(arcRadius - framethk/2 + glassThk/2) * sin(arcAngle/2), -(arcRadius - framethk/2 + glassThk/2) * cos(arcAngle/2), 15 + 64,
			0, 0, 900,
			(arcRadius - framethk/2 + glassThk/2) * sin(arcAngle/2), -(arcRadius - framethk/2 + glassThk/2) * cos(arcAngle/2), 3015 + 64,
			-(arcRadius - framethk/2 + glassThk/2) * sin(arcAngle/2), -(arcRadius - framethk/2 + glassThk/2) * cos(arcAngle/2), 1015 + 64,
			-(arcRadius - framethk/2 + glassThk/2) * sin(arcAngle/2), -(arcRadius - framethk/2 + glassThk/2) * cos(arcAngle/2), -1,
			-(arcRadius - framethk/2 - glassThk/2)* sin(arcAngle/2), -(arcRadius - framethk/2 - glassThk/2) * cos(arcAngle/2), 15 + 64,
			0, 0, 900,
			(arcRadius - framethk/2 - glassThk/2) * sin(arcAngle/2), -(arcRadius - framethk/2 - glassThk/2) * cos(arcAngle/2), 3015 + 64,
			-(arcRadius - framethk/2 - glassThk/2) * sin(arcAngle/2), -(arcRadius - framethk/2 - glassThk/2) * cos(arcAngle/2), 1015 + 64,
			-(arcRadius - framethk/2 - glassThk/2) * sin(arcAngle/2), -(arcRadius - framethk/2 - glassThk/2) * cos(arcAngle/2), -1
		del 1
		cutend
	else
		material matGlass
		cutform 4, 1, 1 + 2,
			0, 0, 1, panelHeight,
			0, 0, 95,
			-A * sin(arcAngle/2), -A * cos(arcAngle/2), 95,
			A * sin(arcAngle/2), -A * cos(arcAngle/2), 95,
			0, 0, -1
		prism_ 5 + 5, panelHeight,
			-arcRadius * sin(arcAngle/2), -arcRadius * cos(arcAngle/2), 15 + 64,
			0, 0, 900,
			arcRadius * sin(arcAngle/2), -arcRadius * cos(arcAngle/2), 3015 + 64,
			-arcRadius * sin(arcAngle/2), -arcRadius * cos(arcAngle/2), 1015 + 64,
			-arcRadius * sin(arcAngle/2), -arcRadius * cos(arcAngle/2), -1,

			-(arcRadius - glassThk)* sin(arcAngle/2), -(arcRadius - glassThk) * cos(arcAngle/2), 15 + 64,
			0, 0, 900,
			(arcRadius - glassThk) * sin(arcAngle/2), -(arcRadius - glassThk) * cos(arcAngle/2), 3015 + 64,
			-(arcRadius - glassThk) * sin(arcAngle/2), -(arcRadius - glassThk) * cos(arcAngle/2), 1015 + 64,
			-(arcRadius - glassThk) * sin(arcAngle/2), -(arcRadius - glassThk) * cos(arcAngle/2), -1
		cutend

		if gs_detlevel_3D_m = 2 then
			material matFrame
			szi = min(45, 90 - arcAngle/2 - 5)
			for ji = 1 to 2
				add 0.015 / sin(szi), 0, 0
				cutpolya 4, 1, 0,
					0, 0, 7,
					5 * A * cos(szi), -5 * A * sin(szi), 7,
					5 * A * cos(szi), 5 * A * sin(szi), 7,
					0, 0, -1
				del 1
			mulx -1
			next ji
			del 2
			for ji = 1 to 2
				if szi < 90 then add 0, -0.015 / sin(90 - szi), 0 else add 0, -0.015, 0
				cutpolya 4, 1, 0,
					0, 0, 7,
					-5 * A * cos(szi), -5 * A * sin(szi), 7,
					5 * A * cos(szi), -5 * A * sin(szi), 7,
					0, 0, -1
				del 1
			muly -1
			next ji
			del 2

			addz zzyzx
			prism_ 5, ceilingThk/2,
				-arcRadius * sin(arcAngle/2), -arcRadius * cos(arcAngle/2), 15 + 64,
				0, 0, 900,
				arcRadius * sin(arcAngle/2), -arcRadius * cos(arcAngle/2), 3015 + 64,
				-arcRadius * sin(arcAngle/2), -arcRadius * cos(arcAngle/2), 1015 + 64,
				-arcRadius * sin(arcAngle/2), -arcRadius * cos(arcAngle/2), -1
			del 1
			cutend
			cutend
			cutend
			cutend
		endif
	endif

	arcRadius = A/2 - panelThk
	arcAngle = 2 * asn(doorWidth/A)
	if bFramedPanel then
		if iDoorType < 8 then
			panelWidth = arcRadius * PI * arcAngle/180
			xPanelPos = -doorWidth/2
			yPanelPos = -(arcRadius + panelThk) * cos(arcAngle/2)
		else
			panelWidth = (arcRadius) * PI * arcAngle/180
			xPanelPos = -doorWidth/2 + (panelThk) * sin(arcAngle/2)
			yPanelPos = -A/2 * cos(arcAngle/2) + (panelThk) * cos(arcAngle/2)
		endif
	else
		if iDoorType < 8 then
			panelWidth = arcRadius * PI * arcAngle/180
			xPanelPos = -doorWidth/2
			yPanelPos = -(arcRadius + panelThk) * cos(arcAngle/2)
		else
			panelWidth = (arcRadius) * PI * arcAngle/180
			xPanelPos = -doorWidth/2 + (panelThk) * sin(arcAngle/2)
			yPanelPos = -A/2 * cos(arcAngle/2) + (panelThk) * cos(arcAngle/2)
		endif
	endif
	panelRotation = 0
	bHandle = 1
	gosub "Opening_Type"			! Opening Panel

	arcAngle = 2 * asn(doorWidth/A)
	add 0, -A/2 * cos(arcAngle/2), 0
	hotspot 0, 0, 0, unID, halfDoorWidth, 1+128, doorWidth : unID=unID+1
	hotspot halfDoorWidth, 0, 0, unID, halfDoorWidth, 2, doorWidth : unID=unID+1
	hotspot -1, 0, 0, unID, halfDoorWidth, 3, doorWidth : unID=unID+1

	hotspot 0, 0, 0, unID, halfDoorWidth, 1+128, doorWidth : unID=unID+1
	hotspot -halfDoorWidth, 0, 0, unID, halfDoorWidth, 2, doorWidth : unID=unID+1
	hotspot 1, 0, 0, unID, halfDoorWidth, 3, doorWidth : unID=unID+1
	del 1

endif


GS_HotspotUnIDBegin = unID
end GS_HotspotUnIDBegin


! ==============================================================================
"Opening_Type":
! ==============================================================================

if iCabinForm = CABINFORM_SQUAREDALCOVE | iCabinForm = CABINFORM_SQUAREDCORNER | iCabinForm = CABINFORM_CHAMFERCORNER | iCabinForm = CABINFORM_SQUAREDPENINSULAR | iCabinForm = CABINFORM_SQUARE then			! Square
	if iDoorType = DOORTYPE_SIMPLELEAF | iDoorType = DOORTYPE_SIMPLELEAF_SIDEPANEL1 | iDoorType = DOORTYPE_SIMPLELEAF_SIDEPANEL2 then gosub "Simple_Leaf"
	if iDoorType = DOORTYPE_DOUBLELEAF | iDoorType = DOORTYPE_DOUBLELEAF_SIDEPANEL1 | iDoorType = DOORTYPE_DOUBLELEAF_SIDEPANEL2 then gosub "Double_Leaf"
	if iDoorType = DOORTYPE_FOLDING then gosub "Folding"
	if iDoorType = DOORTYPE_DOUBLEFOLDING then gosub "Double_Folding"
	if iDoorType = DOORTYPE_SLIDING then gosub "Sliding"
	if iDoorType = DOORTYPE_DOUBLESLIDING then gosub "Double_Sliding"
	if iDoorType = DOORTYPE_CORNERSLIDING then gosub "Corner_Sliding"
endif
if iCabinForm = CABINFORM_ROUNDEDCORNER | iCabinForm = CABINFORM_ROUNDEDPENINSULAR | iCabinForm = CABINFORM_ROUND then			! Rounded Corner
	if iDoorType = DOORTYPE_SIMPLELEAF then gosub "Curved_Simple_Leaf"
	if iDoorType = DOORTYPE_DOUBLELEAF then	gosub "Curved_Double_Leaf"
	if iDoorType = DOORTYPE_SLIDING then gosub "Curved_Sliding"
	if iDoorType = DOORTYPE_DOUBLESLIDING then gosub "Curved_Double_Sliding"
endif

return


! ==============================================================================
"Simple_Leaf":
! ==============================================================================

add xPanelPos, yPanelPos, 0
rotz panelRotation
if bMirrorDoor then
	addx panelWidth
	mulx -1
endif

if bFramedPanel then
	fi = 0
	rotW = panelWidth
	hingeAngleL = 0
	xHingePos = 0
	yHingePos = 0
else
	hingeAngleL = 0
	xHingePos = - hingeThk/2 - glassThk * bMirrorDoor
	yHingePos = - hingeThk/2
	fi = atn(hingeThk/2/(panelWidth + hingeThk/2 + glassThk * bMirrorDoor))
	rotW = (panelWidth + hingeThk/2 + glassThk * bMirrorDoor)/cos(fi)

	if iCabinForm = CABINFORM_SQUAREDALCOVE then
		if iDoorType = DOORTYPE_SIMPLELEAF then
			hingeAngleL = -90
			xHingePos = - hingeThk/2
			yHingePos = - hingeThk/2
			fi = atn(hingeThk/2/(panelWidth + hingeThk/2))
			rotW = (panelWidth + hingeThk/2)/cos(fi)
		endif
		if iDoorType = DOORTYPE_SIMPLELEAF_SIDEPANEL1 then
			hingeAngleL = -90 * bMirrorDoor
			xHingePos = - hingeThk/2 * bMirrorDoor
			yHingePos = - hingeThk/2
			fi = atn(hingeThk/2/(panelWidth + hingeThk/2 * bMirrorDoor))
			rotW = (panelWidth + hingeThk/2 * bMirrorDoor)/cos(fi)
		endif
		if iDoorType = DOORTYPE_SIMPLELEAF_SIDEPANEL2 then
			hingeAngleL = 0
			xHingePos = 0
			yHingePos = - hingeThk/2
			fi = atn(hingeThk/2/panelWidth)
			rotW = panelWidth/cos(fi)
		endif
	endif
	if iCabinForm = CABINFORM_SQUAREDCORNER then
		if iDoorType = DOORTYPE_SIMPLELEAF then
			hingeAngleL = -90
			xHingePos = - hingeThk/2 - glassThk * bMirrorDoor
			yHingePos = - hingeThk/2
			fi = atn(hingeThk/2/(panelWidth + hingeThk/2 + glassThk * bMirrorDoor))
			rotW = (panelWidth + hingeThk/2 + glassThk * bMirrorDoor)/cos(fi)
		endif
		if iDoorType = DOORTYPE_SIMPLELEAF_SIDEPANEL1 then
			hingeAngleL = -90 * bMirrorDoor
			xHingePos = - (hingeThk/2 + glassThk) * bMirrorDoor
			yHingePos = - hingeThk/2
			fi = atn(hingeThk/2/(panelWidth + (hingeThk/2 + glassThk) * bMirrorDoor))
			rotW = (panelWidth + (hingeThk/2 + glassThk) * bMirrorDoor)/cos(fi)
		endif
		if iDoorType = DOORTYPE_SIMPLELEAF_SIDEPANEL2 then
			hingeAngleL = 0
			xHingePos = 0
			yHingePos = - hingeThk/2
			fi = atn(hingeThk/2/panelWidth)
			rotW = panelWidth/cos(fi)
		endif
	endif
	if iCabinForm = CABINFORM_CHAMFERCORNER then
		cutAngleL = 22.5
		cutAngleR = 22.5
		if iDoorType = DOORTYPE_SIMPLELEAF then
			hingeAngleL = -45
			xHingePos = - hingeThk/2 * tan(22.5)
			yHingePos = - hingeThk/2
			fi = atn(hingeThk/2/(panelWidth + hingeThk/2 * tan(22.5) - glassThk * tan(22.5)))
			rotW = (panelWidth + hingeThk/2 * tan(22.5) - glassThk * tan(22.5))/cos(fi)
		endif
	endif
	if iCabinForm = CABINFORM_SQUAREDPENINSULAR | iCabinForm = CABINFORM_SQUARE then
		if iDoorType = DOORTYPE_SIMPLELEAF then
			hingeAngleL = -90
			xHingePos = - hingeThk/2 - glassThk
			yHingePos = - hingeThk/2
			fi = atn(hingeThk/2/(panelWidth + hingeThk/2 + glassThk))
			rotW = (panelWidth + hingeThk/2 + glassThk)/cos(fi)
		endif
		if iDoorType = DOORTYPE_SIMPLELEAF_SIDEPANEL1 then
			hingeAngleL = -90 * bMirrorDoor
			xHingePos = - (hingeThk/2 + glassThk) * bMirrorDoor
			yHingePos = - hingeThk/2
			fi = atn(hingeThk/2/(panelWidth + (hingeThk/2 + glassThk) * bMirrorDoor))
			rotW = (panelWidth + (hingeThk/2 + glassThk) * bMirrorDoor)/cos(fi)
		endif
		if iDoorType = DOORTYPE_SIMPLELEAF_SIDEPANEL2 then
			hingeAngleL = 0
			xHingePos = 0
			yHingePos = - hingeThk/2
			fi = atn(hingeThk/2/panelWidth)
			rotW = panelWidth/cos(fi)
		endif
	endif

	add xHingePos, yHingePos, 0
	gosub "Hinge"
	del 1
endif

add xHingePos, yHingePos, 0
rotz fi
hotspot rotW, 0, panelheight/2, unID, gs_open_3D, 4+128 : unID = unID + 1
hotspot rotW*cos(gs_open_3D), -rotW*sin(gs_open_3D), panelHeight/2, unID, gs_open_3D, 5 : unID = unID + 1
hotspot 0, 0, panelheight/2, unID, gs_open_3D, 6 : unID = unID + 1
hotspot 0, 0, panelheight * bMirrorDoor, unID, gs_open_3D, 7 : unID = unID + 1
del 2

add xHingePos, yHingePos, frameWidth * bFramedPanel
rotz -gs_open_3D
add -xHingePos, -yHingePos, 0
xPanelPos = 0
yPanelPos = 0
panelRotation = 0
panelHeight = ZZYZX - 2 * frameWidth * bFramedPanel
frameWidth = doorFrameWidth
frameWidthL = doorFrameWidth
frameWidthR = doorFrameWidth
gosub "Straight_Panel"
del 3

del 2 + bMirrorDoor * 2

return


! ==============================================================================
"Double_Leaf":
! ==============================================================================

panelWidth = panelWidth/2

add xPanelPos, yPanelPos, 0
rotz panelRotation

for ii = 1 to 2
if bFramedPanel then
	fi = 0
	rotW = panelWidth
	hingeAngleL = 0
	xHingePos = 0
	yHingePos = 0
else
	hingeAngleL = 0
	xHingePos = - hingeThk/2
	yHingePos = - hingeThk/2
	fi = atn(hingeThk/2/(panelWidth + hingeThk/2))
	rotW = (panelWidth + hingeThk/2)/cos(fi)

	if iCabinForm = CABINFORM_SQUAREDALCOVE then
		if iDoorType = DOORTYPE_DOUBLELEAF then
			hingeAngleL = -90
			xHingePos = - hingeThk/2
			yHingePos = - hingeThk/2
			fi = atn(hingeThk/2/(panelWidth + hingeThk/2))
			rotW = (panelWidth + hingeThk/2)/cos(fi)
		endif
		if iDoorType = DOORTYPE_DOUBLELEAF_SIDEPANEL1 then
			hingeAngleL = -90 * (ii - 1)
			xHingePos = - hingeThk/2 * (ii - 1)
			yHingePos = - hingeThk/2
			fi = atn(hingeThk/2/(panelWidth + hingeThk/2 * (ii - 1)))
			rotW = (panelWidth + hingeThk/2 * (ii - 1))/cos(fi)
		endif
		if iDoorType = DOORTYPE_DOUBLELEAF_SIDEPANEL2 then
			hingeAngleL = 0
			xHingePos = 0
			yHingePos = - hingeThk/2
			fi = atn(hingeThk/2/panelWidth)
			rotW = panelWidth/cos(fi)

		endif
	endif
	if iCabinForm = CABINFORM_SQUAREDCORNER then
		if iDoorType = DOORTYPE_DOUBLELEAF then
			hingeAngleL = -90
			xHingePos = - hingeThk/2 - glassThk * (ii = 2)
			yHingePos = - hingeThk/2
			fi = atn(hingeThk/2/(panelWidth + hingeThk/2 + glassThk * (ii = 2)))
			rotW = (panelWidth + hingeThk/2 + glassThk * (ii = 2))/cos(fi)
		endif
		if iDoorType = DOORTYPE_DOUBLELEAF_SIDEPANEL1 then
			hingeAngleL = -90 * (ii = 2)
			xHingePos = - (hingeThk/2 + glassThk) * (ii = 2)
			yHingePos = - hingeThk/2
			fi = atn(hingeThk/2/(panelWidth + (hingeThk/2 + glassThk) * (ii = 2)))
			rotW = (panelWidth + (hingeThk/2 + glassThk) * (ii = 2))/cos(fi)
		endif
		if iDoorType = DOORTYPE_DOUBLELEAF_SIDEPANEL2 then
			hingeAngleL = 0
			xHingePos = 0
			yHingePos = - hingeThk/2
			fi = atn(hingeThk/2/panelWidth)
			rotW = panelWidth/cos(fi)
		endif
	endif
	if iCabinForm = CABINFORM_CHAMFERCORNER then
		cutAngleL = 22.5
		cutAngleR = 0
		if iDoorType = DOORTYPE_DOUBLELEAF then
			hingeAngleL = -45
			xHingePos = - hingeThk/2 * tan(22.5)
			yHingePos = - hingeThk/2
			fi = atn(hingeThk/2/(panelWidth + hingeThk/2  * tan(22.5)))
			rotW = (panelWidth + hingeThk/2 * tan(22.5))/cos(fi)
		endif
	endif
	if iCabinForm = CABINFORM_SQUAREDPENINSULAR | iCabinForm = CABINFORM_SQUARE then
		if iDoorType = DOORTYPE_DOUBLELEAF then
			hingeAngleL = -90
			xHingePos = - hingeThk/2 - glassThk
			yHingePos = - hingeThk/2
			fi = atn(hingeThk/2/(panelWidth + hingeThk/2 + glassThk))
			rotW = (panelWidth + hingeThk/2 + glassThk)/cos(fi)
		endif
		if iDoorType = DOORTYPE_DOUBLELEAF_SIDEPANEL1 then
			hingeAngleL = -90 * (ii = 2)
			xHingePos = - (hingeThk/2 + glassThk) * (ii = 2)
			yHingePos = - hingeThk/2
			fi = atn(hingeThk/2/(panelWidth + (hingeThk/2 + glassThk) * (ii = 2)))
			rotW = (panelWidth + (hingeThk/2 + glassThk) * (ii = 2))/cos(fi)
		endif
		if iDoorType = DOORTYPE_DOUBLELEAF_SIDEPANEL2 then
			hingeAngleL = 0
			xHingePos = 0
			yHingePos = - hingeThk/2
			fi = atn(hingeThk/2/panelWidth)
			rotW = panelWidth/cos(fi)
		endif
	endif

	add xHingePos, yHingePos, 0
	gosub "Hinge"
	del 1
endif

add xHingePos, yHingePos, 0
rotz fi
hotspot rotW, 0, panelheight/2, unID, gs_open_3D, 4+128 : unID = unID + 1
hotspot rotW*cos(gs_open_3D), -rotW*sin(gs_open_3D), panelHeight/2, unID, gs_open_3D, 5 : unID = unID + 1
hotspot 0, 0, panelheight/2, unID, gs_open_3D, 6 : unID = unID + 1
hotspot 0, 0, panelheight * (ii=2), unID, gs_open_3D, 7 : unID = unID + 1
del 2

add xHingePos, yHingePos, cabinFrameWidth * bFramedPanel
rotz -gs_open_3D
add -xHingePos, -yHingePos, 0
xPanelPos = 0
yPanelPos = 0
panelRotation = 0
panelHeight = ZZYZX - 2 * cabinFrameWidth * bFramedPanel
frameWidth = doorFrameWidth
frameWidthL = doorFrameWidth
frameWidthR = doorFrameWidth
gosub "Straight_Panel"
del 3

addx 2 * panelWidth
mulx -1
next ii
del 4

del 2

return


! ==============================================================================
"Folding":
! ==============================================================================

panelWidth = panelWidth/2
panelHeight = ZZYZX - 2 * cabinFrameWidth * bFramedPanel

add xPanelPos, yPanelPos, 0
rotz panelRotation
if bMirrorDoor then
	addx panelWidth * 2
	mulx -1
endif
xPanelPos = 0
yPanelPos = 0
panelRotation = 0

hotspot xPanelPos + panelWidth*2, yPanelPos + panelThk, panelHeight/2 + cabinFrameWidth * bFramedPanel, unID, gs_open3D, 1+128 : unID=unID+1
hotspot xPanelPos + panelWidth*2 - gs_open3D, yPanelPos + panelThk, panelHeight/2 + cabinFrameWidth * bFramedPanel, unID, gs_open3D, 2 : unID=unID+1
hotspot xPanelPos + panelWidth*2 + 1, yPanelPos + panelThk, panelHeight/2 + cabinFrameWidth * bFramedPanel, unID, gs_open3D, 3 : unID=unID+1

panelDiagonal = sqr(panelWidth^2 + panelThk^2)
rotAngle = 0
diaAngle = 0
if gs_open3D > eps then
	diaAngle = atn(panelthk/panelWidth)
	rotAngle = acs((panelWidth - gs_open3D/2)/panelDiagonal) + diaAngle
endif
add xPanelPos, yPanelPos + panelThk, cabinFrameWidth * bFramedPanel
for ii = 1 to 2
	if ii = 1 then bHandle = 0
	if ii = 2 then bHandle = 1
	rotz rotAngle
	add -xPanelPos, -yPanelPos - panelThk, 0
	addx panelWidth
	mulx -1
	frameWidth = doorFrameWidth
	frameWidthL = doorFrameWidth
	frameWidthR = doorFrameWidth
	gosub "Straight_Panel"
	del 4
addx 2*panelWidth - gs_open3D
mulx -1
next ii
del 4 + 1

del 2 + 2 * bMirrorDoor

return


! ==============================================================================
"Double_Folding":
! ==============================================================================

panelWidth = panelWidth/4
panelHeight = ZZYZX - 2 * cabinFrameWidth * bFramedPanel

add xPanelPos, yPanelPos, 0
rotz panelRotation

xPanelPos = 0
yPanelPos = 0
panelRotation = 0

for ji = 1 to 2
	hotspot xPanelPos + panelWidth*2, yPanelPos + panelThk, panelHeight/2, unID, gs_open3D, 1+128 : unID=unID+1
	hotspot xPanelPos + panelWidth*2 - gs_open3D, yPanelPos + panelThk, panelHeight/2, unID, gs_open3D, 2 : unID=unID+1
	hotspot xPanelPos + panelWidth*2 + 1, yPanelPos + panelThk, panelHeight/2, unID, gs_open3D, 3 : unID=unID+1
	addx 4*panelWidth
mulx -1
next ji
del 4

panelDiagonal = sqr(panelWidth^2 + panelThk^2)
rotAngle = 0
diaAngle = 0
if gs_open3D > eps then
	diaAngle = atn(panelthk/panelWidth)
	rotAngle = acs((panelWidth - gs_open3D/2)/panelDiagonal) + diaAngle
endif
add xPanelPos, yPanelPos + panelThk, cabinFrameWidth * bFramedPanel
for ji = 1 to 2
	for ii = 1 to 2
		if ii = 1 then bHandle = 0
		if ii = 2 then bHandle = 1
		rotz rotAngle
		add -xPanelPos, -yPanelPos - panelThk, 0
		addx panelWidth
		mulx -1
		frameWidth = doorFrameWidth
		frameWidthL = doorFrameWidth
		frameWidthR = doorFrameWidth
		gosub "Straight_Panel"
		del 4
	addx 2*panelWidth - gs_open3D
	mulx -1
	next ii
	del 4
addx 4*panelWidth
mulx -1
next ji
del 4 + 1

del 2

return


! ==============================================================================
"Sliding":
! ==============================================================================

panelWidth = panelWidth + 2 * doorFrameWidth
panelHeight = ZZYZX

hotspot A/2 - cabinFrameWidth + doorFrameWidth, -B/2 + panelThk, panelHeight/2, unID, gs_open3D, 1+128 : unID=unID+1
hotspot A/2 - cabinFrameWidth + doorFrameWidth - gs_open3D, -B/2 + panelThk, panelHeight/2, unID, gs_open3D, 2 : unID=unID+1
hotspot A/2 - cabinFrameWidth + doorFrameWidth + 1, -B/2 + panelThk, panelHeight/2, unID, gs_open3D, 3 : unID=unID+1

add -doorFrameWidth - gs_open3D, panelThk, 0
frameWidth = cabinFrameWidth
frameWidthL = doorFrameWidth
frameWidthR = doorFrameWidth
gosub "Straight_Panel"
del 1

return


! ==============================================================================
"Double_Sliding":
! ==============================================================================

panelWidth = panelWidth/2 + doorFrameWidth
panelHeight = ZZYZX

add xpanelPos + panelWidth - doorFrameWidth, 0, 0
for ii = 1 to 2
	hotspot 0, -B/2 + panelThk, panelHeight/2, unID, gs_open3D, 1+128 : unID=unID+1
	hotspot - gs_open3D, -B/2 + panelThk, panelHeight/2, unID, gs_open3D, 2 : unID=unID+1
	hotspot 1, -B/2 + panelThk, panelHeight/2, unID, gs_open3D, 3 : unID=unID+1
mulx -1
next ii
del 2 + 1

add xpanelPos + panelWidth - doorFrameWidth, panelThk, 0
for ii = 1 to 2
	addx -xPanelpos - panelWidth - gs_open3D
	frameWidth = cabinFrameWidth
	frameWidthL = doorFrameWidth
	frameWidthR = doorFrameWidth
	gosub "Straight_Panel"
	del 1
mulx -1
next ii
del 2 + 1

return


! ==============================================================================
"Corner_Sliding":
! ==============================================================================

panelWidth = panelWidth + cabinFrameWidth + doorFrameWidth - panelThk
panelHeight = ZZYZX

add A/2 - panelThk, yPanelPos + panelThk, 0
for ii = 1 to 2
	addx -gs_open3D
	rotx -90
	rotz 90
	cutplane 45
	del 3
	add -A/2 + panelThk, -yPanelPos - panelThk, 0
	hotspot A/2 - panelThk, -B/2 + panelThk, panelHeight/2, unID, gs_open3D, 1+128 : unID=unID+1
	hotspot A/2 - panelThk- gs_open3D, -B/2 + panelThk, panelHeight/2, unID, gs_open3D, 2 : unID=unID+1
	hotspot A/2 - panelThk+ 1, -B/2 + panelThk, panelHeight/2, unID, gs_open3D, 3 : unID=unID+1

	add -doorFrameWidth - gs_open3D, panelThk, 0
	frameWidth = cabinFrameWidth
	frameWidthL = doorFrameWidth
	frameWidthR = doorFrameWidth
	gosub "Straight_Panel"
	del 1 + 1
	cutend
mulx -1
rotz -90
next ii
del 4 + 1

return


! ==============================================================================
"Curved_Simple_Leaf":
! ==============================================================================

panelHeight = ZZYZX - 2 * cabinFrameWidth * bFramedPanel
add xPanelPos, yPanelPos, 0
rotz -arcAngle/2 + panelRotation
if bMirrorDoor then
	rotz arcAngle/2
	addx doorWidth
	mulx -1
	rotz -arcAngle/2
endif

if bFramedPanel then
	fi = 0
	rotW = doorWidth
	hingeAngleL = 0
	xHingePos = 0
	yHingePos = 0
else
	if iCabinForm = CABINFORM_ROUNDEDCORNER then
		nSegment1 = round_int((360 - arcAngle)/360*gs_resol)
		nSegment2 = gs_resol - nSegment1
		hingeAngleL = 0
		hingeAngleR = (arcAngle/nSegment2)/2

		xHingePos = hingeThk/2 * tan((arcAngle/nSegment2)/4)
		yHingePos = - hingeThk/2
		di = 135 - (arcAngle/nSegment2)/4
		rd = sqr(xHingePos^2 + yHingePos^2)
		rotW = sqr(doorWidth^2 + rd^2 - 2 * doorWidth * rd * cos(di))
		fi = asn(rd / rotW * sin(di))
	endif
	if iCabinForm = CABINFORM_ROUNDEDPENINSULAR | iCabinForm = CABINFORM_ROUND then
		nSegment1 = round_int((360 - arcAngle)/360*gs_resol)
		nSegment2 = gs_resol - nSegment1
		if iCabinForm = CABINFORM_ROUNDEDPENINSULAR then nSegment3 = round_int((90 - arcAngle/2)/360*gs_resol)
		if iCabinForm = CABINFORM_ROUND then nSegment3 = round_int((360 - arcAngle)/360*gs_resol)
		if iCabinForm = CABINFORM_ROUNDEDPENINSULAR then hingeAngleL = -((90 - arcAngle/2)/nSegment3)/2
		if iCabinForm = CABINFORM_ROUND then hingeAngleL = -((360 - arcAngle)/nSegment3)/2
		hingeAngleR = (arcAngle/nSegment2)/2

		xHingePos = 0
		yHingePos = - hingeThk/2/cos(hingeAngleR)
		di = 135 - (arcAngle/nSegment2)/4
		rd = sqr(xHingePos^2 + yHingePos^2)
		rotW = sqr(doorWidth^2 + rd^2 - 2 * doorWidth * rd * cos(di))
		fi = asn(rd / rotW * sin(di))
	endif

	add xHingePos, yHingePos, 0
	gosub "Hinge"
	del 1
endif

add xHingePos, yHingePos, 0
rotz fi + arcAngle/2
hotspot rotW, 0, panelheight/2 + cabiFrameWidth * bFramedPanel, unID, gs_open_3D, 4+128 : unID = unID + 1
hotspot rotW*cos(gs_open_3D), -rotW*sin(gs_open_3D), panelHeight/2 + cabinFrameWidth * bFramedPanel, unID, gs_open_3D, 5 : unID = unID + 1
hotspot 0, 0, panelheight/2 + cabinFrameWidth * bFramedPanel, unID, gs_open_3D, 6 : unID = unID + 1
hotspot 0, 0, panelheight * bMirrorDoor, unID, gs_open_3D, 7 : unID = unID + 1
del 2

add xHingePos, yHingePos, cabinFrameWidth * bFramedPanel
rotz -gs_open_3D
add -xHingePos, -yHingePos, 0
xPanelPos = 0
yPanelPos = 0
panelRotation = 0
frameWidth = doorFrameWidth
frameWidthL = doorFrameWidth
frameWidthR = doorFrameWidth
gosub "Curved_Panel"
del 3

del 2 + bMirrorDoor * 4

return


! ==============================================================================
"Curved_Double_Leaf":
! ==============================================================================

panelWidthHalf = panelWidth/2
xPanelPosMod = xPanelPos
yPanelPosMod = yPanelPos
panelRotMod = panelRotation
arcAngleMod = arcAngle
panelHeight = ZZYZX - 2 * cabinFrameWidth * bFramedPanel

for ii = 1 to 2

add xPanelPosMod, yPanelPosMod, 0
rotz -arcAngleMod/2 + panelRotMod
if ii = 2 then
	rotz arcAngleMod/2
	addx doorWidth
	mulx -1
	rotz -arcAngleMod/2
endif

if bFramedPanel then
	fi = 0
	rotW = ((arcRadius+panelThk) * sin(arcAngleMod/4))*2
	hingeAngleL = 0
	xHingePos = 0
	yHingePos = 0
else
	if iCabinForm = CABINFORM_ROUNDEDCORNER then
		nSegment1 = round_int((360 - arcAngleMod)/360*gs_resol)
		nSegment2 = gs_resol - nSegment1
		hingeAngleL = 0
		hingeAngleR = (arcAngleMod/nSegment2)/2

		xHingePos = hingeThk/2 * tan((arcAngleMod/nSegment2)/4)
		yHingePos = - hingeThk/2
		di = 135 - arcAngleMod/4 - (arcAngleMod/nSegment2)/4
		rd = sqr(xHingePos^2 + yHingePos^2)
		doorWidthHalf = ((arcRadius+panelThk) * sin(arcAngleMod/4))*2
		rotW = sqr(doorWidthHalf^2 + rd^2 - 2 * doorWidthHalf * rd * cos(di))
		fi = asn(rd / rotW * sin(di))
	endif
	if iCabinForm = CABINFORM_ROUNDEDPENINSULAR | iCabinForm = CABINFORM_ROUND then
		nSegment1 = round_int((360 - arcAngleMod)/360*gs_resol)
		nSegment2 = gs_resol - nSegment1
		if iCabinForm = CABINFORM_ROUNDEDPENINSULAR then nSegment3 = round_int((90 - arcAngleMod/2)/360*gs_resol)
		if iCabinForm = CABINFORM_ROUND then nSegment3 = round_int((360 - arcAngleMod)/360*gs_resol)
		if iCabinForm = CABINFORM_ROUNDEDPENINSULAR then hingeAngleL = -((90 - arcAngleMod/2)/nSegment3)/2
		if iCabinForm = CABINFORM_ROUND then hingeAngleL = -((360 - arcAngleMod)/nSegment3)/2
		hingeAngleR = (arcAngleMod/nSegment2)/2

		xHingePos = 0
		yHingePos = - hingeThk/2/cos(hingeAngleR)
		di = 90 + arcAngleMod/4
		rd = sqr(xHingePos^2 + yHingePos^2)
		doorWidthHalf = ((arcRadius+panelThk) * sin(arcAngleMod/4))*2
		rotW = sqr(doorWidthHalf^2 + rd^2 - 2 * doorWidthHalf * rd * cos(di))
		fi = asn(rd / rotW * sin(di))
	endif

	add xHingePos, yHingePos, 0
	gosub "Hinge"
	del 1
endif

add xHingePos, yHingePos, 0
rotz fi + arcAngleMod/4
hotspot rotW, 0, panelheight/2 + cabinFrameWidth * bFramedPanel, unID, gs_open_3D, 4+128 : unID = unID + 1
hotspot rotW*cos(gs_open_3D), -rotW*sin(gs_open_3D), panelHeight/2 + cabinFrameWidth * bFramedPanel, unID, gs_open_3D, 5 : unID = unID + 1
hotspot 0, 0, panelheight/2 + cabinFrameWidth * bFramedPanel, unID, gs_open_3D, 6 : unID = unID + 1
hotspot 0, 0, panelHeight * (ii = 2), unID, gs_open_3D, 7 : unID = unID + 1
del 2

add xHingePos, yHingePos, cabinFrameWidth * bFramedPanel
rotz -gs_open_3D
add -xHingePos, -yHingePos, 0
xPanelPos = 0
yPanelPos = 0
panelRotation = 0
panelWidth = panelWidthHalf
frameWidth = doorFrameWidth
frameWidthL = doorFrameWidth
frameWidthR = doorFrameWidth
gosub "Curved_Panel"
del 3

del 2 + (ii = 2) * 4

next ii

return


! ==============================================================================
"Curved_Sliding":
! ==============================================================================

arcRadius = arcRadius - panelThk
rotW = arcRadius + panelThk
panelWidth = arcRadius * PI * arcAngle/180

add xPanelPos, yPanelPos, 0
rotz -arcAngle/2 + panelRotation
panelRotation = 0
xPanelPos = 0
yPanelPos = 0
hotspot rotW*sin(arcAngle), arcRadius + panelThk - rotW*cos(arcAngle), panelheight/2, unID, gs_open_3D, 4+128, gs_open3D : unID = unID + 1
hotspot rotW*sin(arcAngle - gs_open_3D), arcRadius + panelThk - rotW*cos(arcAngle - gs_open_3D), panelHeight/2, unID, gs_open_3D, 5, gs_open3D : unID = unID + 1
hotspot 0, arcRadius + panelThk, panelheight/2, unID, gs_open_3D, 6, gs_open3D : unID = unID + 1
hotspot 0, arcRadius + panelThk, 0, unID, gs_open_3D, 7, gs_open3D : unID = unID + 1

panelHeight = ZZYZX
add 0, arcRadius + panelThk, 0
rotz -gs_open_3D
add 0, -arcRadius - panelThk, 0
frameWidth = cabinFrameWidth
frameWidthL = doorFrameWidth
frameWidthR = doorFrameWidth
gosub "Curved_Panel"
del 3

if not(bFramedPanel) then
	add xPanelPos, yPanelPos - hingeThk, 0
	gosub "Stiffening"
	del 1
endif
del 2

return


! ==============================================================================
"Curved_Double_Sliding":
! ==============================================================================

arcRadius = arcRadius - panelThk
rotW = arcRadius + panelThk
panelWidth = arcRadius * PI * arcAngle/180/2

add xPanelPos, yPanelPos, 0
rotz panelRotation
add (arcRadius + panelThk) * sin(arcAngle/2), (arcRadius + panelThk) * cos(arcAngle/2), 0

panelRotation = 0
xPanelPos = 0
yPanelPos = 0
for ii = 1 to 2
	if ii = 2 then rotz arcAngle/2
	hotspot 0, -rotW, panelheight/2, unID, gs_open_3D, 4+128, gs_open3D : unID = unID + 1
	hotspot -rotW*sin(gs_open_3D), - rotW*cos(gs_open_3D), panelHeight/2, unID, gs_open_3D, 5, gs_open3D : unID = unID + 1
	hotspot 0, 0, panelheight/2, unID, gs_open_3D, 6, gs_open3D : unID = unID + 1
	hotspot 0, 0, (ii-1)*panelheight, unID, gs_open_3D, 7, gs_open3D : unID = unID + 1
	if ii = 2 then del 1

	panelHeight = ZZYZX
	rotz -gs_open_3D - arcAngle/2
	add 0, -arcRadius - panelThk, 0
	frameWidth = cabinFrameWidth
	frameWidthL = doorFrameWidth
	frameWidthR = doorFrameWidth
	gosub "Curved_Panel"
	del 2
rotz arcAngle/2
mulx -1
next ii
del 4

del 3

return


! ==============================================================================
"Straight_Panel":
! ==============================================================================

add xPanelPos, yPanelPos, 0
rotz panelRotation

if bFramedPanel then
	material matFrame
	cutDepth = frameThk
else
	material matGlass
	cutDepth = glassThk
endif
if cutAngleL > 0 then
	cutpolya 3, 1, 0,
		0, 0, 2 + 64,
		cutDepth * tan(cutAngleL), cutDepth, 2 + 64,
		0, cutDepth, 2 + 64
endif
if cutAngleR > 0 then
	cutpolya 3, 1, 0,
		panelWidth, 0, 2 + 64,
		panelWidth - sin(cutAngleR), cos(cutAngleR), 2 + 64,
		panelWidth, cos(cutAngleR), 2 + 64
endif

if not(bFramedPanel) then
	material matGlass
	addy glassThk
	rotx 90
	prism_ 5, glassThk,
		glassThk * tan(cutAngleL), 0, 15,
		panelWidth - glassThk * tan(cutAngleR), 0, 15,
		panelWidth - glassThk * tan(cutAngleR), panelHeight, 15,
		glassThk * tan(cutAngleL), panelHeight, 15,
		glassThk * tan(cutAngleL), 0, -1
	del 2

	for hi = 1 to 2
	lin_ panelWidth, 0, 0, panelWidth, 0, panelHeight
	addy panelThk
	next hi
	del 2
else
	material matFrame
	addy frameThk
	rotx 90
	cutpolya 5, 2, 0,
		frameWidthL, frameWidth, 7,
		panelWidth - frameWidthR, frameWidth, 7,
		panelWidth - frameWidthR, panelHeight - frameWidth, 7,
		frameWidthL, panelHeight - frameWidth, 7,
		frameWidthL, frameWidth, -1
	prism_ 5, frameThk,
		0, 0, 15 - frameMaskL/3.5,
		panelWidth, 0, 15 - frameMaskR,
		panelWidth, panelHeight, 15 - framemaskR/3.5,
		0, panelHeight, 15 - frameMaskL,
		0, 0, -1
	cutend
	del 2

	if not(withoutGlas) then
		material matGlass
		addy frameThk/2 + glassThk/2
		rotx 90
		prism_ 5, glassThk,
			frameWidthL, frameWidth, 15,
			panelWidth - frameWidthR, frameWidth, 15,
			panelWidth - frameWidthR, panelHeight - frameWidth, 15,
			frameWidthL, panelHeight - frameWidth, 15,
			frameWidthL, frameWidth, -1
		del 2
	else
		for hi = 1 to 2
		lin_ frameWidthL, 0, frameWidth, panelWidth - frameWidthR, 0, frameWidth
		if frameWidthR > 0 then lin_ panelWidth - frameWidthR, 0, frameWidth, panelWidth - frameWidthR, 0, panelHeight - frameWidth
		lin_ panelWidth - frameWidthR, 0, panelHeight - frameWidth, frameWidthL, 0, panelHeight - frameWidth
		if frameWidthL > 0 then lin_ frameWidthL, 0, panelHeight - frameWidth, frameWidthL, 0, frameWidth
		addy panelThk
		next hi
		del 2
	endif
endif

if cutAngleL > 0 then cutend
if cutAngleR > 0 then cutend

if not(bFramedPanel) then
	if iStiffL > 0 then
		stiffType = iStiffL
		stiffAngle = 0
		gosub "Stiffening"
	endif
	if iStiffR > 0 then
		addx panelWidth
		mulx -1
		stiffType = iStiffR
		stiffAngle = 0
		gosub "Stiffening"
		del 2
	endif
	if bBracket then						!Bracket in case of Fully Glazed
		if bCeilingStiffL then
			stiffAngle = 90
			gosub "Ceiling_Stiffening"
		endif
		if bCeilingStiffR then
			stiffAngle = 180
			addx panelWidth
			gosub "Ceiling_Stiffening"
			del 1
		endif
	endif
endif

if gs_detlevel_3D_m = 2 & bHandle then
	for ki = 1 to 2
		add panelWidth - 0.06, 0, 0.9 - frameWidth * bFramedPanel * (iDoorType < 9) + zHandlePos
		call "fa_knobtyp" parameters all gs_knob_type_m = gs_knob_type_m,
										knob_size		= knob_size
		del 1
	muly -1
	addy -panelThk
	next ki
	del 4
endif

del 2

frameWidthL = frameWidth
frameWidthR = frameWidth
frameMaskR = 0
frameMaskL = 0
withoutGlas = 0
cutAngleL = 0
cutAngleR = 0

return


! ==============================================================================
"Curved_Panel":
! ==============================================================================

arcAngle = panelWidth/arcRadius/PI*180
frameAngleL = frameWidthL/(arcRadius*PI)*180
frameAngleR = frameWidthR/(arcRadius*PI)*180
if arcAngle > 90 & arcAngle < 270 then tanMod = 1 else tanMod = -1
nSegment1 = round_int((360 - arcAngle)/360*gs_resol)
nSegment2 = gs_resol - nSegment1

add xPanelPos, yPanelPos, 0
rotz panelRotation

if bFramedPanel then
	material matFrame
	cutDepth = frameThk
else
	material matGlass
	cutDepth = glassThk
endif

if bFramedPanel then
	material matFrame
	addz frameWidth
	if arcAngle < 180 then
		cutform 4, 1, 1 + 2,
			0, 0, 1, panelHeight - 2*frameWidth,
			0, arcRadius + panelThk, 95,
			2*(arcRadius + panelThk)*sin(frameAngleL), (arcRadius + panelThk) * (1 - 2*cos(frameAngleL)), 95,
			2*(arcRadius + panelThk)*sin(arcAngle - frameAngleR), (arcRadius + panelThk) * (1 - 2*cos(arcAngle - frameAngleR)), 95,
			0, arcRadius + panelThk, -1
	else
		cutform 7, 1, 1 + 2,
			0, 0, 1, panelHeight - 2*frameWidth,
			0, arcRadius + panelThk, 95,
			2*(arcRadius + panelThk)*sin(frameAngleL), (arcRadius + panelThk) * (1 - 2*cos(frameAngleL)), 95,
			A, (arcRadius + panelThk) * (1 - 2*cos(frameAngleL)), 95,
			A, 2*B, 95,
			2*(arcRadius + panelThk)*sin(arcAngle - frameAngleR), 2*B, 95,
			2*(arcRadius + panelThk)*sin(arcAngle - frameAngleR), (arcRadius + panelThk) * (1 - 2*cos(arcAngle - frameAngleR)), 95,
			0, arcRadius + panelThk, -1
	endif
	del 1
	prism_ 7, panelHeight,
		0, 0, 15 + 64 - frameMaskL/3.5,
		1, 0, 800,
		(arcRadius + panelThk) * sin(arcAngle), (arcRadius + panelThk) * (1 - cos(arcAngle)), 1015 - frameMaskR,
		(arcRadius) * sin(arcAngle), (arcRadius + panelThk) - (arcRadius)*cos(arcAngle), 15 + 64 - frameMaskR/3.5,
		tanMod, tanMod * tan(arcAngle), 800,
		0, panelThk, 1015 - frameMaskL,
		0, 0, -1
	cutend

	if abs(gs_open_3D) < eps then
		for ji = 1 to 2
		poly_ 7,
			0, 0, 1,
			1, 0, 800,
			(arcRadius + panelThk) * sin(arcAngle), (arcRadius + panelThk) * (1 - cos(arcAngle)), 1001,
			(arcRadius) * sin(arcAngle), (arcRadius + panelThk) - (arcRadius)*cos(arcAngle), 1,
			tanMod, tanMod * tan(arcAngle), 800,
			0, panelThk, 1001 - frameMaskL/7,
			0, 0, -1
		addz panelHeight
		next ji
		del 2
	endif

	if not(withoutGlas) then
		material matGlass
		cutform 4, 1, 1 + 2,
			0, 0, 1, panelHeight,
			0, arcRadius + panelThk, 95,
			0, 0, 95,
			(arcRadius + panelThk)*sin(frameAngleL), (arcRadius + panelThk) * (1 - cos(frameAngleL)), 95,
			0, arcRadius + panelThk, -1
		cutform 4, 1, 1 + 2,
			0, 0, 1, panelHeight,
			0, arcRadius + panelThk, 95,
			(arcRadius + panelThk)*sin(arcAngle - frameAngleR), (arcRadius + panelThk) * (1 - cos(arcAngle - frameAngleR)), 95,
			(arcRadius + panelThk)*sin(arcAngle), (arcRadius + panelThk) * (1 - cos(arcAngle)), 95,
			0, arcRadius + panelThk, -1
		addz frameWidth
		prism_ 7, panelHeight - 2*frameWidth,
			0, panelThk/2 - glassThk/2, 15 + 64,
			1, 0, 800,
			(arcRadius + panelThk/2 + glassThk/2) * sin(arcAngle), (arcRadius + panelThk) - (arcRadius + panelThk/2 + glassThk/2)*cos(arcAngle), 1015,
			(arcRadius + panelThk/2 - glassThk/2) * sin(arcAngle), (arcRadius + panelThk) - (arcRadius + panelThk/2 - glassThk/2)*cos(arcAngle), 15 + 64,
			tanMod, tanmod * tan(arcAngle), 800,
			0, panelThk/2 + glassThk/2, 1015,
			0, panelThk/2 - glassThk/2, -1
		del 1
		cutend
		cutend
	endif
else
	material matGlass
	prism_ 7, panelHeight,
		0, 0, 15 + 64,
		1, 0, 800,
		(arcRadius + panelThk) * sin(arcAngle), (arcRadius + panelThk) * (1 - cos(arcAngle)), 1015,
		(arcRadius) * sin(arcAngle), (arcRadius + panelThk) - (arcRadius)*cos(arcAngle), 15 + 64,
		tanMod, tanMod * tan(arcAngle), 800,
		0, panelThk, 1015,
		0, 0, -1
endif

if gs_detlevel_3D_m = 2 & bHandle then
	add (arcRadius + panelThk) * sin(arcAngle), (arcRadius + panelThk) * (1 - cos(arcAngle)), 0.9 - frameWidth * bFramedPanel * (iDoorType < 9) + zHandlePos
	rotz arcAngle - (arcAngle/nSegment2)/2
	add -0.06, bFramedPanel * (frameThk/2 - glassThk/2), 0
	for ki = 1 to 2
		call "fa_knobtyp" parameters all gs_knob_type_m = gs_knob_type_m,
										knob_size		= knob_size
	muly -1
	addy -glassThk * cos((arcAngle/nSegment2)/2)
	next ki
	del 4
	del 1+1+1
endif

del 2

frameWidthL = frameWidth
frameWidthR = frameWidth
frameWidthB = frameWidth
frameWidthT = frameWidth
frameMaskR = 0
frameMaskL = 0
withoutGlas = 0
cutAngleL = 0
cutAngleR = 0

return


! ==============================================================================
"Straight_Curved_Panel":
! ==============================================================================

arcRadius = A/2 - panelThk
arcAngle = 2 * asn(doorWidth/A)
frameAngle = cabinFrameWidth/(arcRadius*PI)*180

if bFramedPanel then
	material matFrame
	cutDepth = frameThk
else
	material matGlass
	cutDepth = glassThk
endif

if bFramedPanel then
	material matFrame
	add 0, 0, cabinFrameWidth
	cutform 3, 1, 1 + 2 + 64*0 + 128*0,
		0, 0, 1, panelHeight - 2*cabinFrameWidth,
		0, -B/2 + A/2, 95,
		-A*tan(asn(doorWidth/A)), -B/2 + A/2 - A, 95,
		A*tan(asn(doorWidth/A)), -B/2 + A/2 - A, 95
	cutform 4, 1, 1 + 2 + 64*0 + 128*0,
		0, 0, 1, panelHeight - 2*cabinFrameWidth,
		0, -B/2 + A/2, 95,
		-A*tan(asn(doorWidth/A)+frameAngle), -B/2 + A/2 - A, 95,
		-A*tan(asn(doorWidth/A)+frameAngle), B/2 - cabinFrameWidth, 95,
		0, B/2 - cabinFrameWidth, 95
	cutform 4, 1, 1 + 2 + 64*0 + 128*0,
		0, 0, 1, panelHeight - 2*cabinFrameWidth,
		0, -B/2 + A/2, 95,
		A*tan(asn(doorWidth/A)+frameAngle), -B/2 + A/2 - A, 95,
		A*tan(asn(doorWidth/A)+frameAngle), B/2 - cabinFrameWidth, 95,
		0, B/2 - cabinFrameWidth, 95
	del 1
	if iDoorType = DOORTYPE_SIMPLELEAF | iDoorType = DOORTYPE_SLIDING then
		put -(A/2)*sin(arcAngle/2), -B/2+A/2-(A/2)*cos(arcAngle/2), 1015 + 64
		put (A/2)*sin(arcAngle/2), -B/2+A/2-(A/2)*cos(arcAngle/2), 1015 + 64
		put (A/2 - panelThk)*sin(arcAngle/2), -B/2+A/2-(A/2 - panelThk)*cos(arcAngle/2), 1015 + 64
		put -(A/2 - panelThk)*sin(arcAngle/2), -B/2+A/2-(A/2 - panelThk)*cos(arcAngle/2), 1015 + 64
	else
		put -(A/2)*sin(arcAngle/2), -B/2+A/2-(A/2)*cos(arcAngle/2), 1015 + 64
		put 0, -B/2, 1015 + 64
		put (A/2)*sin(arcAngle/2), -B/2+A/2-(A/2)*cos(arcAngle/2), 1015 + 64
		put (A/2 - panelThk)*sin(arcAngle/2), -B/2+A/2-(A/2 - panelThk)*cos(arcAngle/2), 1015 + 64
		put 0, -B/2 + panelthk, 1015 + 64
		put -(A/2 - panelThk)*sin(arcAngle/2), -B/2+A/2-(A/2 - panelThk)*cos(arcAngle/2), 1015 + 64
	endif
	prism_ 9 + nsp/3, panelHeight,
		-A/2, B/2, 15,
		-A/2, -B/2 + A/2, 15 + 64,
		get(nsp/2),
		 A/2, -B/2 + A/2, 1015 + 64,
		 A/2, B/2, 15,
		 A/2 - panelThk, B/2, 15,
		 A/2 - panelThk, -B/2 + A/2, 15 + 64,
		get(nsp),
		-A/2 + panelThk, -B/2 + A/2, 1015 + 64,
		-A/2 + panelThk, B/2, 15,
		-A/2, B/2, -1
	cutend
	cutend
	cutend

	material matGlass
	addz cabinFrameWidth
	for ji = 1 to 2
		cutform 3, 1, 1 + 2 + 64*0 + 128*0,
			0, 0, 1, panelHeight - 2*cabinFrameWidth,
			0, -B/2 + A/2, 95,
			-A*tan(asn(doorWidth/A) + frameAngle), -B/2 + A/2 - A, 95,
			A*tan(asn(doorWidth/A)) + frameAngle, -B/2 + A/2 - A, 95
		prism_ 8, panelHeight - 2*cabinFrameWidth,
			-A/2 + panelThk/2 - glassThk/2, B/2 - cabinFrameWidth, 15,
			-A/2 + panelThk/2 - glassThk/2, -B/2 + A/2, 15 + 64,
			-(A/2 - panelThk/2 + glassThk/2)*sin(arcAngle/2), -B/2+A/2-(A/2 - panelThk/2 + glassThk/2)*cos(arcAngle/2), 1015,
			-(A/2 - panelThk/2 - glassThk/2)*sin(arcAngle/2), -B/2+A/2-(A/2 - panelThk/2 - glassThk/2)*cos(arcAngle/2), 15 + 64,
			0, -B/2 + A/2, 900,
			-A/2 + panelThk/2 + glassThk/2, -B/2 + A/2, 3015 + 64,
			-A/2 + panelThk/2 + glassThk/2, B/2 - cabinFrameWidth, 15,
			-A/2 + panelThk/2 - glassThk/2, B/2 - cabinFrameWidth, -1
		cutend
	mulx -1
	next ji
	del 2 + 1
else
	for ji = 1 to 2
	material matGlass
	prism_ 8, panelHeight,
		-A/2, B/2, 15,
		-A/2, -B/2 + A/2, 15 + 64,
		-(A/2)*sin(arcAngle/2), -B/2+A/2-(A/2)*cos(arcAngle/2), 1015,
		-(A/2 - glassThk)*sin(arcAngle/2), -B/2+A/2-(A/2 - glassThk)*cos(arcAngle/2), 15 + 64,
		0, -B/2 + A/2, 900 + 64,
		-A/2 + glassThk, -B/2 + A/2, 3015 + 64,
		-A/2 + glassThk, B/2, 15,
		-A/2, B/2, -1

	stiffType = 2
	stiffAngle = 270
	add -A/2, B/2, 0
	gosub "Stiffening"
	del 1

	stiffAngle = 0
	add -A/2, B/2, 0
	if bBracket then gosub "Ceiling_Stiffening"			!Bracket in case of Fully Glazed
	del 1
	mulx -1
	next ji
	del 2
endif

frameWidthL = frameWidth
frameWidthR = frameWidth
frameWidthB = frameWidth
frameWidthT = frameWidth
frameMaskR = 0
frameMaskL = 0
withoutGlas = 0
cutAngleL = 0
cutAngleR = 0

return


! ==============================================================================
"Hinge":
! ==============================================================================

if gs_detlevel_3D_m = 2 then
	material matFrame
	resol 6
	for hi = 1 to 2
		addz panelHeight/8 - hingeHeight/2
		rotz hingeAngleL
		add  - hingeWidth, hingeThk/2, 0

		rotx 90
		cutpolya 4, 1, 0,
			hingeWidth - hingeThk/2, hingeHeight/2, 7,
			hingeWidth*2, hingeHeight/2, 7,
			hingeWidth*2, hingeHeight, 7,
			hingeWidth - hingeThk/2, hingeHeight, 7
		del 1

		prism_ 5, hingeHeight,
			0, 0, 15,
			hingeWidth, 0, 15 + 64,
			hingeWidth, -hingeThk, 1015 + 64,
			0, -hingeThk, 15,
			0, 0, -1
		cutend
		del 2

		rotz hingeAngleR - gs_open_3D
		add  hingeWidth, hingeThk/2, 0

		rotx 90
		cutpolya 4, 1, 0,
			-hingeWidth + hingeThk/2, 0, 7,
			-hingeWidth*2, 0, 7,
			-hingeWidth*2, hingeHeight/2, 7,
			-hingeWidth + hingeThk/2, hingeHeight/2, 7
		del 1

		prism_ 5, hingeHeight,
			0, 0, 15,
			-hingeWidth, 0, 15 + 64,
			-hingeWidth, -hingeThk, 1015 + 64,
			0, -hingeThk, 15,
			0, 0, -1
		cutend
		del 2

		del 1
	addz panelHeight/8*6
	next hi
	del 2
	resol gs_resol
endif

return


! ==============================================================================
"Stiffening":
! ==============================================================================

if gs_detlevel_3D_m = 2 then
	material matFrame
	rotz stiffAngle
	if stiffType = 2 then		! Wall
		for hi = 1 to 2
			add 0, -hingeThk, panelheight/8 - hingeHeight/2
			block hingeWidth, hingeThk, hingeHeight
			del 1
		addz panelheight/8*6
		next hi
		del 2
	endif
	if stiffType = 1 then		! Corner
		for hi = 1 to 2
			addz panelheight/8 - hingeHeight/2
			prism_ 7, hingeHeight,
				0, 0, 15,
				hingeWidth, 0, 15,
				hingeWidth, -hingeThk, 15,
			   -hingeThk, -hingeThk, 15,
			   -hingeThk, +hingeWidth, 15,
				0, +hingeWidth, 15,
				0, 0, -1
			del 1
		addz panelheight/8*6
		next hi
		del 2
	endif
	del 1
endif

return


! ==============================================================================
"Ceiling_Stiffening":
! ==============================================================================

if gs_detlevel_3D_m = 2 then
	material matFrame
	if iCabinForm <> CABINFORM_ROUNDEDPENINSULAR then
		stiffWidth = min(panelWidth, A/5, B/5)
	else
		stiffWidth = min(A/5, B/5)
	endif
	rotz stiffAngle
	if not(bCeiling) then		! !Bracket
		addz ZZYZX
		prism_ 5, ceilingThk/2,
			0, -stiffWidth, 15,
			stiffWidth, 0, 15,
			stiffWidth - 0.02, 0, 15,
			0, -stiffWidth + 0.02, 15,
			0, -stiffWidth, -1
		del 1
	endif
	del 1
endif

return

]]>
</Script_3D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_2D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
! ==============================================================================
! showerCabin_m
! ==============================================================================


define line_type "openingline" 1, 2, 0.05 / GLOB_SCALE, 0.03 / GLOB_SCALE
line_type "openingline"

panelOffset = 0.03
frameWidthMod = 0
if iPanelType = 1 then frameWidthMod = cabinFrameWidth

if iCabinForm = CABINFORM_SQUAREDALCOVE | iCabinForm = CABINFORM_SQUAREDCORNER | iCabinForm = CABINFORM_SQUAREDPENINSULAR | iCabinForm = CABINFORM_SQUARE then			! Square
	if bSidePanelL = 0 & bSidePanelR = 0 then
		panelWidth = A - 2 * frameWidthMod
		xPanelPos = -A/2 + frameWidthMod
	endif
	if bSidePanelL = 1 & bSidePanelR = 0 then
		panelWidth = A - sidePanelWidthL - frameWidthMod
		xPanelPos = -A/2 + sidePanelWidthL
	endif
	if bSidePanelL = 1 & bSidePanelR = 1 then
		panelWidth = doorWidth
		xPanelPos = -A/2 + sidePanelWidthL
	endif
	yPanelPos = -B/2
	panelRotation = 0
	gosub "Opening_Type"
endif

if iCabinForm = CABINFORM_ROUNDEDCORNER then			! Rounded Corner
	arcRadius = doorWidth*cos(45)
	arcAngle = 90
	panelWidth = doorWidth
	xPanelPos = -A/2 + sidePanelWidthL
	yPanelPos = -B/2
	panelRotation = 45
	gosub "Opening_Type"
endif

if iCabinForm = CABINFORM_CHAMFERCORNER then			! Chamfer Corner
	panelWidth = doorWidth - 2 * frameWidthMod
	xPanelPos = -A/2 + sidePanelWidthL + frameWidthMod * cos(45)
	yPanelPos = -B/2 + frameWidthMod * cos(45)
	panelRotation = 45
	gosub "Opening_Type"
endif

if iCabinForm = CABINFORM_ROUNDEDPENINSULAR | iCabinForm = CABINFORM_ROUND then			! Round & Rounded Peninsular
	arcRadius = A/2
	arcAngle = 2 * asn(doorWidth/A)
	panelWidth = doorWidth
	xPanelPos = -doorWidth/2
	yPanelPos = -arcRadius * cos(arcAngle/2)
	panelRotation = 0
	gosub "Opening_Type"
endif

end


! ==============================================================================
"Opening_Type":
! ==============================================================================

if iCabinForm = CABINFORM_SQUAREDALCOVE | iCabinForm = CABINFORM_SQUAREDCORNER | iCabinForm = CABINFORM_CHAMFERCORNER | iCabinForm = CABINFORM_SQUAREDPENINSULAR | iCabinForm = CABINFORM_SQUARE then			! Square
	if iDoorType = DOORTYPE_SIMPLELEAF | iDoorType = DOORTYPE_SIMPLELEAF_SIDEPANEL1 | iDoorType = DOORTYPE_SIMPLELEAF_SIDEPANEL2 then gosub "Simple_Leaf"
	if iDoorType = DOORTYPE_DOUBLELEAF | iDoorType = DOORTYPE_DOUBLELEAF_SIDEPANEL1 | iDoorType = DOORTYPE_DOUBLELEAF_SIDEPANEL2 then gosub "Double_Leaf"
	if iDoorType = DOORTYPE_FOLDING then gosub "Folding"
	if iDoorType = DOORTYPE_DOUBLEFOLDING then gosub "Double_Folding"
	if iDoorType = DOORTYPE_SLIDING then gosub "Sliding"
	if iDoorType = DOORTYPE_DOUBLESLIDING then gosub "Double_Sliding"
	if iDoorType = DOORTYPE_CORNERSLIDING then gosub "Corner_Sliding"
endif
if iCabinForm = CABINFORM_ROUNDEDCORNER | iCabinForm = CABINFORM_ROUNDEDPENINSULAR | iCabinForm = CABINFORM_ROUND then			! Rounded Corner
	if iDoorType = DOORTYPE_SIMPLELEAF then gosub "Curved_Simple_Leaf"
	if iDoorType = DOORTYPE_DOUBLELEAF then	gosub "Curved_Double_Leaf"
	if iDoorType = DOORTYPE_SLIDING then gosub "Curved_Sliding"
	if iDoorType = DOORTYPE_DOUBLESLIDING then gosub "Curved_Double_Sliding"
endif

return


! ==============================================================================
"Simple_Leaf":
! ==============================================================================

add2 xPanelPos, yPanelPos
rot2 panelRotation
if bMirrorDoor then
	add2 panelWidth, 0
	mul2 -1, 1
endif
line2 0, 0, 0, -panelWidth
arc2 0, 0, panelWidth, 270, 0
del 2 + 2 * bMirrorDoor

return


! ==============================================================================
"Double_Leaf":
! ==============================================================================

add2 xPanelPos, yPanelPos
rot2 panelRotation
line2 0, 0, 0, -panelWidth/2
line2 panelWidth, 0, panelWidth, -panelWidth/2
arc2 0, 0, panelWidth/2, 270, 0
arc2 panelWidth, 0, panelWidth/2, 180, 270
del 2

return


! ==============================================================================
"Folding":
! ==============================================================================

add2 xPanelPos, yPanelPos
rot2 panelRotation
if bMirrorDoor then
	add2 panelWidth, 0
	mul2 -1, 1
endif
line2 0, 0, panelWidth/2 * sin(10), panelWidth/2 * cos(10)
line2 panelWidth/2 * sin(10), panelWidth/2 * cos(10), 2 * panelWidth/2 * sin(10), 0
del 2 + 2 * bMirrorDoor

return


! ==============================================================================
"Double_Folding":
! ==============================================================================

add2 xPanelPos, yPanelPos
rot2 panelRotation
for ji = 1 to 2
	line2 0, 0, panelWidth/4 * sin(10), panelWidth/4 * cos(10)
	line2 panelWidth/4 * sin(10), panelWidth/4 * cos(10), 2 * panelWidth/4 * sin(10), 0
mul2 -1, 1
add2 -panelWidth, 0
next ji
del 4 + 2

return


! ==============================================================================
"Sliding":
! ==============================================================================

line_type 1
add2 0, yPanelPos
line2 -A/4, -panelOffset, 0, -panelOffset
line2 -A/4, -panelOffset, -A/4 + 0.05, -panelOffset - 0.02
del 1

return


! ==============================================================================
"Double_Sliding":
! ==============================================================================

line_type 1
add2 0, yPanelPos
line2 -A/2, -panelOffset, -A/4, -panelOffset
line2 -A/2, -panelOffset, -A/2 + 0.05, -panelOffset - 0.02
line2 A/2, -panelOffset, A/4, -panelOffset
line2 A/2, -panelOffset, A/2 - 0.05, -panelOffset - 0.02
del 1

return


! ==============================================================================
"Corner_Sliding":
! ==============================================================================

line_type 1
line2 -A/4, yPanelPos - panelOffset, 0, yPanelPos - panelOffset
line2 -A/4, yPanelPos - panelOffset, -A/4 + 0.05, yPanelPos - panelOffset - 0.02
line2 A/2 + panelOffset, 0, A/2 + panelOffset, A/4
line2 A/2 + panelOffset, A/4, A/2 + panelOffset + 0.02, A/4 - 0.05

return


! ==============================================================================
"Curved_Simple_Leaf":
! ==============================================================================

add2 xPanelPos, yPanelPos
rot2 panelRotation
if bMirrorDoor then
	add2 panelWidth, 0
	mul2 -1, 1
endif
rot2 -180 - arcAngle / 2
add2 -arcRadius, 0
arc2 0, 0, arcRadius, 0, arcAngle
del 2
arc2 0, 0, panelWidth, 270, 0
del 2 + 2 * bMirrorDoor

return


! ==============================================================================
"Curved_Double_Leaf":
! ==============================================================================

panelWidth2 = arcRadius * sin(arcAngle/4) * 2
add2 xPanelPos, yPanelPos
rot2 panelRotation
for ji = 1 to 2
	rot2 -90 - arcAngle / 2 - 90 + arcAngle/4
	add2 -arcRadius, 0
	arc2 0, 0, arcRadius, 0, arcAngle/2
	del 2
	arc2 0, 0, panelWidth2, 270, -arcAngle/4
mul2 -1, 1
add2 -panelWidth, 0
next ji
del 4 + 2

return


! ==============================================================================
"Curved_Sliding":
! ==============================================================================

line_type 1
arc2 A/2 - arcRadius, -B/2 + arcRadius, arcRadius + panelOffset, panelRotation - arcAngle/2 - 90, panelRotation - 90
rot2 -arcAngle/2 + panelRotation
line2 A/2 - arcRadius, -B/2 - panelOffset, A/2 - arcRadius + 0.05, -B/2 - panelOffset - 0.02
del 1

return


! ==============================================================================
"Curved_Double_Sliding":
! ==============================================================================

line_type 1
add2 A/2 - arcRadius, -B/2 + arcRadius
rot2 panelRotation
arc2 0, 0, arcRadius + panelOffset, - arcAngle/2 - 90, - arcAngle/4 - 90
arc2 0, 0, arcRadius + panelOffset, arcAngle/4 - 90, arcAngle/2 - 90
rot2 -arcAngle/2
line2 0, -arcRadius - panelOffset, 0 + 0.05, -arcRadius - panelOffset - 0.02
del 1
rot2 arcAngle/2
line2 0, -arcRadius - panelOffset, 0 - 0.05, -arcRadius - panelOffset - 0.02
del 1
del 1 + 1

return
]]>
</Script_2D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_1D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
! ==============================================================================
! showerCabin_m
! ==============================================================================


eps = 0.00001

CABINTYPE_ALCOVE 			= 1
CABINTYPE_CORNER 			= 2
CABINTYPE_PENINSULAR 		= 3
CABINTYPE_FREESTANDING		= 4

CABINFORM_SQUAREDALCOVE 	= 1
CABINFORM_SQUAREDCORNER 	= 2
CABINFORM_ROUNDEDCORNER 	= 3
CABINFORM_CHAMFERCORNER 	= 4
CABINFORM_SQUAREDPENINSULAR	= 5
CABINFORM_ROUNDEDPENINSULAR = 6
CABINFORM_SQUARE 			= 7
CABINFORM_ROUND 			= 8

DOORTYPE_SIMPLELEAF				= 1
DOORTYPE_DOUBLELEAF				= 2
DOORTYPE_SIMPLELEAF_SIDEPANEL1	= 3
DOORTYPE_SIMPLELEAF_SIDEPANEL2	= 4
DOORTYPE_DOUBLELEAF_SIDEPANEL1	= 5
DOORTYPE_DOUBLELEAF_SIDEPANEL2	= 6
DOORTYPE_FOLDING				= 7
DOORTYPE_DOUBLEFOLDING			= 8
DOORTYPE_SLIDING				= 9
DOORTYPE_DOUBLESLIDING			= 10
DOORTYPE_CORNERSLIDING			= 11

PANELTYPE_FRAMED	= 1
PANELTYPE_GLAZED	= 2

yWallPos = 0
yTapPos = 0
glassThk = 0.003
frameThk = 0.01
frameWidth = 0.04

bSidePanelL = 0
bSidePanelR = 0
if iCabinForm = CABINFORM_SQUAREDALCOVE | iCabinForm = CABINFORM_SQUAREDCORNER\
 | iCabinForm = CABINFORM_SQUAREDPENINSULAR | iCabinForm = CABINFORM_SQUARE then			! Square
	if iDoorType = DOORTYPE_SIMPLELEAF_SIDEPANEL1 | iDoorType = DOORTYPE_SIMPLELEAF_SIDEPANEL2 | iDoorType = DOORTYPE_DOUBLELEAF_SIDEPANEL1 | iDoorType = DOORTYPE_DOUBLELEAF_SIDEPANEL2\
	 | iDoorType = DOORTYPE_SLIDING | iDoorType = DOORTYPE_DOUBLESLIDING | iDoorType = DOORTYPE_CORNERSLIDING then bSidePanelL = 1
	if iDoorType = DOORTYPE_SIMPLELEAF_SIDEPANEL2 | iDoorType = DOORTYPE_DOUBLELEAF_SIDEPANEL2 | iDoorType = DOORTYPE_DOUBLESLIDING then bSidePanelR = 1
endif
if iCabinForm = CABINFORM_CHAMFERCORNER then			! Chamfer Corner
	bSidePanelL = 1
	bSidePanelR = 1
endif

openingType = 0
if iCabinForm = CABINFORM_SQUAREDALCOVE | iCabinForm = CABINFORM_SQUAREDCORNER | iCabinForm = CABINFORM_CHAMFERCORNER | iCabinForm = CABINFORM_SQUAREDPENINSULAR | iCabinForm = CABINFORM_SQUARE then			! Square
	if iDoorType = DOORTYPE_SIMPLELEAF | iDoorType = DOORTYPE_SIMPLELEAF_SIDEPANEL1 | iDoorType = DOORTYPE_SIMPLELEAF_SIDEPANEL2 then openingType = 10		! Simple Leaf
	if iDoorType = DOORTYPE_DOUBLELEAF | iDoorType = DOORTYPE_DOUBLELEAF_SIDEPANEL1 | iDoorType = DOORTYPE_DOUBLELEAF_SIDEPANEL2 then openingType = 20		! Double Leaf
	if iDoorType = DOORTYPE_FOLDING then openingType = 30										! Folding
	if iDoorType = DOORTYPE_DOUBLEFOLDING then openingType = 40										! Double Folding
	if iDoorType = DOORTYPE_SLIDING then openingType = 50										! Sliding
	if iDoorType = DOORTYPE_DOUBLESLIDING then openingType = 60										! Double Sliding
	if iDoorType = DOORTYPE_CORNERSLIDING then openingType = 70										! Corner Sliding
endif
if iCabinForm = CABINFORM_ROUNDEDCORNER | iCabinForm = CABINFORM_ROUNDEDPENINSULAR | iCabinForm = CABINFORM_ROUND then			! Rounded Corner
	if iDoorType = DOORTYPE_SIMPLELEAF then openingType = 80		! Curved Simple Leaf
	if iDoorType = DOORTYPE_DOUBLELEAF then
		openingType = 90		! Curved Double Leaf
	endif
	if iDoorType = DOORTYPE_SLIDING then openingType = 100		! Curved Sliding
	if iDoorType = DOORTYPE_DOUBLESLIDING then
		openingType = 110	! Curved Double Sliding
	endif
endif


]]>
</Script_1D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_PR SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_PR>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_UI SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_UI>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_VL SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
! ==============================================================================
! showerCabin_m
! ==============================================================================


values "gs_detlevel_3D_m" 0,1,2

if GLOB_MODPAR_NAME = "halfDoorWidth" then
	doorWidth = 2*halfDoorWidth
	parameters doorWidth = 2*halfDoorWidth
else
	halfDoorWidth = doorWidth/2
	parameters halfDoorWidth = doorWidth/2
endif

if iCabinForm = CABINFORM_SQUAREDALCOVE | iCabinForm = CABINFORM_SQUAREDCORNER | iCabinForm = CABINFORM_SQUAREDPENINSULAR | iCabinForm = CABINFORM_SQUARE then			! Square
	if iDoorType <> DOORTYPE_CORNERSLIDING then
		sidePanelRatio = sidePanelWidthL / (sidePanelWidthL + sidePanelWidthR)
		if bSidePanelL & bSidePanelR & (GLOB_MODPAR_NAME = "A" | GLOB_MODPAR_NAME = "cabinSize" | GLOB_MODPAR_NAME = "doorType" | GLOB_MODPAR_NAME = "iDoorType") then
			sidePanelWidthL = (A - doorWidth) * sidePanelRatio
			sidePanelWidthR = A - doorWidth - sidePanelWidthL
			parameters sidePanelWidthL = sidePanelWidthL
			parameters sidePanelWidthR = sidePanelWidthR
		endif
		if bSidePanelL & not(bSidePanelR) then
			if GLOB_MODPAR_NAME = "sidePanelWidthL" then
				doorWidth = A - sidePanelWidthL
				parameters doorWidth = doorWidth
			else
				sidePanelWidthL = A - doorWidth
				parameters sidePanelWidthL = sidePanelWidthL
			endif
		endif
		if bSidePanelL & bSidePanelR then
			if (GLOB_MODPAR_NAME = "doorWidth" | GLOB_MODPAR_NAME = "halfDoorWidth") then
				sidePanelWidthL = sidePanelWidthL + (A - sidePanelWidthL - sidePanelWidthR) / 2 - doorWidth/2
				sidePanelWidthR = A - sidePanelWidthL - 2 * halfDoorWidth
				parameters sidePanelWidthL = sidePanelWidthL
				parameters sidePanelWidthR = sidePanelWidthR
			endif
			if GLOB_MODPAR_NAME = "sidePanelWidthL" | GLOB_MODPAR_NAME = "sidePanelWidthR" then
				doorWidth = A - sidePanelWidthL - sidePanelWidthR
				parameters doorWidth = doorWidth
			endif
		endif
	endif
endif
if iCabinForm = CABINFORM_ROUNDEDCORNER | iCabinForm = CABINFORM_CHAMFERCORNER | (iCabinForm = CABINFORM_SQUAREDCORNER & iDoorType = DOORTYPE_CORNERSLIDING) then			! Rounded & Chamfer Corner
	if GLOB_MODPAR_NAME = "A" | GLOB_MODPAR_NAME = "B" | GLOB_MODPAR_NAME = "cabinForm" | GLOB_MODPAR_NAME = "iCabinForm" | GLOB_MODPAR_NAME = "cabinSize"\
	 | GLOB_MODPAR_NAME = "doorWidth" | GLOB_MODPAR_NAME = "halfDoorWidth" | GLOB_MODPAR_NAME = "doorType" | GLOB_MODPAR_NAME = "iDoorType" then
		sidePanelWidthL = A - doorWidth*cos(45)
		sidePanelWidthR = sidePanelWidthL - A + B
		parameters sidePanelWidthL = sidePanelWidthL
		parameters sidePanelWidthR = sidePanelWidthR
	endif
	if GLOB_MODPAR_NAME = "sidePanelWidthL" then
		doorWidth = (A - sidePanelWidthL)/cos(45)
		sidePanelWidthR = sidePanelWidthL - A + B
		parameters doorWidth = doorWidth
		parameters sidePanelWidthR = sidePanelWidthR
	endif
	if iCabinForm = CABINFORM_ROUNDEDCORNER & (iDoorType = DOORTYPE_SLIDING | iDoorType = DOORTYPE_DOUBLESLIDING) then			! Rounded Corner
		if GLOB_MODPAR_NAME = "gs_open3D" then
			gs_open_3D = gs_open3D/((doorWidth*cos(45) - frameThk) * PI) * 180
			parameters gs_open_3D = gs_open_3D
		else
			gs_open3D = (doorWidth*cos(45) - frameThk) * PI * (gs_open_3D) / 180
			parameters gs_open3D = gs_open3D
		endif
	endif
endif
if iCabinForm = CABINFORM_ROUND then			! Round
	if iDoorType = DOORTYPE_SLIDING | iDoorType = DOORTYPE_DOUBLESLIDING then			! Rounded Corner
		if GLOB_MODPAR_NAME = "gs_open3D" then
			gs_open_3D = gs_open3D/((A/2 - frameThk) * PI) * 180
			parameters gs_open_3D = gs_open_3D
		else
			gs_open3D = (A/2 - frameThk) * PI * (gs_open_3D) / 180
			parameters gs_open3D = gs_open3D
		endif
	endif
endif

]]>
</Script_VL>

<Comment SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Comment>

<ParamSection SectVersion="22" SectionFlags="0" SubIdent="0">
	<ParamSectHeader>
		<AutoHotspots>false</AutoHotspots>
		<StatBits>
			<STBit_FixSize/>
		</StatBits>
		<WDLeftFrame>0</WDLeftFrame>
		<WDRightFrame>0</WDRightFrame>
		<WDTopFrame>0</WDTopFrame>
		<WDBotFrame>0</WDBotFrame>
		<LayFlags>65535</LayFlags>
		<WDMirrorThickness>0</WDMirrorThickness>
		<WDWallInset>0</WDWallInset>
	</ParamSectHeader>
	<Parameters>
		<Length Name="A">
			<Description><![CDATA["Dimension 1"]]></Description>
			<Fix/>
			<Value>0.8</Value>
		</Length>
		<Length Name="B">
			<Description><![CDATA["Dimension 2"]]></Description>
			<Fix/>
			<Value>0.8</Value>
		</Length>
		<Length Name="ZZYZX">
			<Description><![CDATA["Height"]]></Description>
			<Fix/>
			<Value>2</Value>
		</Length>
		<Boolean Name="AC_show2DHotspotsIn3D">
			<Description><![CDATA["Showing 2D Hotspots in 3D"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Length Name="ac_bottomlevel">
			<Description><![CDATA["Bottom Level"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Length>
		<Length Name="ac_toplevel">
			<Description><![CDATA["Top Level"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Integer Name="iCabinType">
			<Description><![CDATA["Cabin Type"]]></Description>
			<Value>1</Value>
		</Integer>
		<Integer Name="iCabinForm">
			<Description><![CDATA["Cabin Form"]]></Description>
			<Value>1</Value>
		</Integer>
		<Integer Name="iDoorType">
			<Description><![CDATA["Door Type"]]></Description>
			<Value>1</Value>
		</Integer>
		<Boolean Name="bMirrorDoor">
			<Description><![CDATA["Mirror Door"]]></Description>
			<Value>0</Value>
		</Boolean>
		<Integer Name="iCabinSize">
			<Description><![CDATA["Cabin Size"]]></Description>
			<Value>1</Value>
		</Integer>
		<Angle Name="gs_open_3D">
			<Description><![CDATA["Opening Angle in 3D"]]></Description>
			<Value>0</Value>
		</Angle>
		<Length Name="gs_open3D">
			<Description><![CDATA["Opening Width in 3D"]]></Description>
			<Value>0</Value>
		</Length>
		<Integer Name="iPanelType">
			<Description><![CDATA["Panel Type"]]></Description>
			<Value>2</Value>
		</Integer>
		<Length Name="cabinFrameWidth">
			<Description><![CDATA["Cabin Frame Width"]]></Description>
			<Value>0.03</Value>
		</Length>
		<Length Name="doorFrameWidth">
			<Description><![CDATA["Door Frame Width"]]></Description>
			<Value>0.015</Value>
		</Length>
		<Integer Name="iHandleType">
			<Description><![CDATA["Handle Type"]]></Description>
			<Value>1</Value>
		</Integer>
		<Boolean Name="bCeiling">
			<Description><![CDATA["Ceiling"]]></Description>
			<Value>0</Value>
		</Boolean>
		<Integer Name="gs_resol">
			<Description><![CDATA["Resolution"]]></Description>
			<Value>24</Value>
		</Integer>
		<Boolean Name="gs_shadow">
			<Description><![CDATA["Shadow"]]></Description>
			<Value>1</Value>
		</Boolean>
		<Length Name="doorWidth">
			<Description><![CDATA["Door Width"]]></Description>
			<Value>0.6</Value>
		</Length>
		<Length Name="halfDoorWidth">
			<Description><![CDATA["Half Door Width"]]></Description>
			<Value>0.3</Value>
		</Length>
		<Length Name="sidePanelWidthL">
			<Description><![CDATA["Side Panel Width 1"]]></Description>
			<Value>0.575735931288</Value>
		</Length>
		<Length Name="sidePanelWidthR">
			<Description><![CDATA["Side Panel Width 2"]]></Description>
			<Value>0.375735931288</Value>
		</Length>
		<Material Name="matGlass">
			<Description><![CDATA["Glass"]]></Description>
			<Value>100</Value>
		</Material>
		<Material Name="matFrame">
			<Description><![CDATA["Frame"]]></Description>
			<Value>19</Value>
		</Material>
		<Material Name="gs_knob_mat">
			<Description><![CDATA["Handle"]]></Description>
			<Value>0</Value>
		</Material>
		<Boolean Name="bBracket">
			<Description><![CDATA["Bracket"]]></Description>
			<Value>1</Value>
		</Boolean>

		<!-- gs_2D_representation: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_2D_representation">
			<Description><![CDATA["2D Representation"]]></Description>
			<Fix/>
		</Title>
		<PenColor Name="gs_cont_pen">
			<Description><![CDATA["Contour Pen"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>7</Value>
		</PenColor>
		<FillPattern Name="gs_fill_type">
			<Description><![CDATA["Fill Type"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>65</Value>
		</FillPattern>
		<PenColor Name="gs_fill_pen">
			<Description><![CDATA["Fill Pen"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>91</Value>
		</PenColor>
		<PenColor Name="gs_back_pen">
			<Description><![CDATA["Fill Background Pen"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>19</Value>
		</PenColor>
		<LineType Name="ltOpeningLine">
			<Description><![CDATA["Opening Line Type"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>21</Value>
		</LineType>

		<!-- gs_3D_representation: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_3D_representation">
			<Description><![CDATA["3D Representation"]]></Description>
			<Fix/>
		</Title>
		<String Name="gs_detlevel_3D">
			<Description><![CDATA["3D Detail Level"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<Integer Name="gs_detlevel_3D_m">
			<Description><![CDATA["3D Representation"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>2</Value>
		</Integer>
		<Integer Name="MEP_version">
			<Description><![CDATA[""]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>4</Value>
		</Integer>
		<String Name="MEP_ConInfo">
			<Description><![CDATA[""]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<ArrayValues FirstDimension="1" SecondDimension="3">
				<AVal Column="1" Row="1"><![CDATA[""]]></AVal>
				<AVal Column="2" Row="1"><![CDATA[""]]></AVal>
				<AVal Column="3" Row="1"><![CDATA[""]]></AVal>
			</ArrayValues>
		</String>
		<Length Name="gs_Connections">
			<Description><![CDATA[""]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<ArrayValues FirstDimension="1" SecondDimension="26">
				<AVal Column="1" Row="1">0</AVal>
				<AVal Column="2" Row="1">0</AVal>
				<AVal Column="3" Row="1">0</AVal>
				<AVal Column="4" Row="1">0</AVal>
				<AVal Column="5" Row="1">0</AVal>
				<AVal Column="6" Row="1">0</AVal>
				<AVal Column="7" Row="1">0</AVal>
				<AVal Column="8" Row="1">0</AVal>
				<AVal Column="9" Row="1">0</AVal>
				<AVal Column="10" Row="1">0</AVal>
				<AVal Column="11" Row="1">0</AVal>
				<AVal Column="12" Row="1">0</AVal>
				<AVal Column="13" Row="1">0</AVal>
				<AVal Column="14" Row="1">0</AVal>
				<AVal Column="15" Row="1">0</AVal>
				<AVal Column="16" Row="1">0</AVal>
				<AVal Column="17" Row="1">0</AVal>
				<AVal Column="18" Row="1">0</AVal>
				<AVal Column="19" Row="1">0</AVal>
				<AVal Column="20" Row="1">0</AVal>
				<AVal Column="21" Row="1">0</AVal>
				<AVal Column="22" Row="1">0</AVal>
				<AVal Column="23" Row="1">0</AVal>
				<AVal Column="24" Row="1">0</AVal>
				<AVal Column="25" Row="1">0</AVal>
				<AVal Column="26" Row="1">0</AVal>
			</ArrayValues>
		</Length>
		<Integer Name="MEP_NumberConnections">
			<Description><![CDATA["Number of Connections"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Integer>
		<Length Name="MEP_NumConnectionData">
			<Description><![CDATA[""]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<ArrayValues FirstDimension="1" SecondDimension="26">
				<AVal Column="1" Row="1">0</AVal>
				<AVal Column="2" Row="1">0</AVal>
				<AVal Column="3" Row="1">0</AVal>
				<AVal Column="4" Row="1">0</AVal>
				<AVal Column="5" Row="1">0</AVal>
				<AVal Column="6" Row="1">0</AVal>
				<AVal Column="7" Row="1">0</AVal>
				<AVal Column="8" Row="1">0</AVal>
				<AVal Column="9" Row="1">0</AVal>
				<AVal Column="10" Row="1">0</AVal>
				<AVal Column="11" Row="1">0</AVal>
				<AVal Column="12" Row="1">0</AVal>
				<AVal Column="13" Row="1">0</AVal>
				<AVal Column="14" Row="1">0</AVal>
				<AVal Column="15" Row="1">0</AVal>
				<AVal Column="16" Row="1">0</AVal>
				<AVal Column="17" Row="1">0</AVal>
				<AVal Column="18" Row="1">0</AVal>
				<AVal Column="19" Row="1">0</AVal>
				<AVal Column="20" Row="1">0</AVal>
				<AVal Column="21" Row="1">0</AVal>
				<AVal Column="22" Row="1">0</AVal>
				<AVal Column="23" Row="1">0</AVal>
				<AVal Column="24" Row="1">0</AVal>
				<AVal Column="25" Row="1">0</AVal>
				<AVal Column="26" Row="1">0</AVal>
			</ArrayValues>
		</Length>
		<String Name="MEP_StrConnectionData">
			<Description><![CDATA[""]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<ArrayValues FirstDimension="1" SecondDimension="3">
				<AVal Column="1" Row="1"><![CDATA[""]]></AVal>
				<AVal Column="2" Row="1"><![CDATA[""]]></AVal>
				<AVal Column="3" Row="1"><![CDATA[""]]></AVal>
			</ArrayValues>
		</String>
		<Length Name="gs_AddConnections">
			<Description><![CDATA[""]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<ArrayValues FirstDimension="1" SecondDimension="2">
				<AVal Column="1" Row="1">0</AVal>
				<AVal Column="2" Row="1">0</AVal>
			</ArrayValues>
		</Length>
		<Length Name="MEP_NumConnectedConnectionData">
			<Description><![CDATA[""]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Unique/>
				<ParFlg_Hidden/>
			</Flags>
			<ArrayValues FirstDimension="1" SecondDimension="26">
				<AVal Column="1" Row="1">0</AVal>
				<AVal Column="2" Row="1">0</AVal>
				<AVal Column="3" Row="1">0</AVal>
				<AVal Column="4" Row="1">0</AVal>
				<AVal Column="5" Row="1">0</AVal>
				<AVal Column="6" Row="1">0</AVal>
				<AVal Column="7" Row="1">0</AVal>
				<AVal Column="8" Row="1">0</AVal>
				<AVal Column="9" Row="1">0</AVal>
				<AVal Column="10" Row="1">0</AVal>
				<AVal Column="11" Row="1">0</AVal>
				<AVal Column="12" Row="1">0</AVal>
				<AVal Column="13" Row="1">0</AVal>
				<AVal Column="14" Row="1">0</AVal>
				<AVal Column="15" Row="1">0</AVal>
				<AVal Column="16" Row="1">0</AVal>
				<AVal Column="17" Row="1">0</AVal>
				<AVal Column="18" Row="1">0</AVal>
				<AVal Column="19" Row="1">0</AVal>
				<AVal Column="20" Row="1">0</AVal>
				<AVal Column="21" Row="1">0</AVal>
				<AVal Column="22" Row="1">0</AVal>
				<AVal Column="23" Row="1">0</AVal>
				<AVal Column="24" Row="1">0</AVal>
				<AVal Column="25" Row="1">0</AVal>
				<AVal Column="26" Row="1">0</AVal>
			</ArrayValues>
		</Length>
		<String Name="LibraryLangCode">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value><![CDATA["RUS"]]></Value>
		</String>
		<Integer Name="GS_HotspotUnIDBegin">
			<Description><![CDATA["The First unId of the Hotspots"]]></Description>
			<Value>10000</Value>
		</Integer>

		<!-- gs_list: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_list">
			<Description><![CDATA["Parameters for Listing"]]></Description>
			<Fix/>
		</Title>
		<Integer Name="ifc_subtype">
			<Description><![CDATA["IFC Subtype"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Integer>
		<Integer Name="ifc_predefinedtype">
			<Description><![CDATA["IFC Predefined Type"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Integer>
		<String Name="gs_list_manufacturer">
			<Description><![CDATA["Manufacturer"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="FM_ProductName">
			<Description><![CDATA["Product Name"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_GUID">
			<Description><![CDATA["Product ID"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_material">
			<Description><![CDATA["Material"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_gauge">
			<Description><![CDATA["Gauge Type"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<RealNum Name="gs_list_area">
			<Description><![CDATA["Area"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<RealNum Name="gs_list_volume">
			<Description><![CDATA["Volume"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<RealNum Name="gs_list_cost">
			<Description><![CDATA["Cost"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<String Name="gs_list_note">
			<Description><![CDATA["Note/Remarks"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_location">
			<Description><![CDATA["Location"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_accessories">
			<Description><![CDATA["Accessories"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="FM_Type">
			<Description><![CDATA["Group Type"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Механическое Оборудование"]]></Value>
		</String>
		<Integer Name="iFMType">
			<Description><![CDATA["Group Type"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>12</Value>
		</Integer>
		<String Name="FM_InventoryNumber">
			<Description><![CDATA["Inventory Number"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="FM_SerialNumber">
			<Description><![CDATA["Serial Number"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="FM_ProductionYear">
			<Description><![CDATA["Production Year"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<RealNum Name="FM_ObjectWeight">
			<Description><![CDATA["Object Weight"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<String Name="FM_ObjectWeightUnit">
			<Description><![CDATA["Object Weight Unit"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["кг"]]></Value>
		</String>
		<String Name="gs_list_custom1">
			<Description><![CDATA["User Defined 1"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_custom2">
			<Description><![CDATA["User Defined 2"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_custom3">
			<Description><![CDATA["User Defined 3"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_custom4">
			<Description><![CDATA["User Defined 4"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_custom5">
			<Description><![CDATA["User Defined 5"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>

		<!-- gs_onorm_Title: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_onorm_Title">
			<Description><![CDATA["Additional Listing Parameters"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
		</Title>
		<String Name="gs_onorm_dimensions">
			<Description><![CDATA["Dimensions W/D/H"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_manufacturer">
			<Description><![CDATA["Additional Manufacturer"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_baseheight_value">
			<Description><![CDATA["Base Height Value"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_baseheight">
			<Description><![CDATA["Additional Base Height"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_assemblydate">
			<Description><![CDATA["Assembly Date"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_customtext1">
			<Description><![CDATA["Additional Information 1"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_customtext2">
			<Description><![CDATA["Additional Information 2"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_aks">
			<Description><![CDATA["AKS Number"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_product">
			<Description><![CDATA["Product Name"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_leistungbuch">
			<Description><![CDATA["Collection of Specifications ID"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_description">
			<Description><![CDATA["Additional Description"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_number">
			<Description><![CDATA["Additional Number"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_id">
			<Description><![CDATA["ID Number"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_admission">
			<Description><![CDATA["Admission Date"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_modification">
			<Description><![CDATA["Modification Date"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_onorm_tozonenumber">
			<Description><![CDATA["To Zone Number"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
	</Parameters>
</ParamSection>

<Picture MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="0" length_in_bytes="3328" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D49484452000000800000
	008008020000004C5CF69C00000CBD49444154785EECD1AB0D00200C0540F6FF
	A259018DABAEC1E33A42052121453D56A8A8ECAD70053EE93E9BB210CD1590F4
	EC4ABDF140B4DFDEB9BD48765D67FCFBD63EE7D4AD67BAAB7BD473BD388A84ED
	171B2676F0150C221030D80141DE0301FF1BF92B8CFD1CF0431E122C30842424
	46C84462E40869C6B2ACDBD89A51F7DCBAFA3A55DD55E7EC2FD55355533D5495
	EDD1D43ED216FD3D9C39D314A7BBD66FAFB5D75EFB72128456FCFAB875EFA72F
	BFD4335C4C33CC5B86A08A5FD76E7DF8E3977FDE3578EF21950AE058AFFFFE77
	3FFBF57F23752BD546139939571E8063BDF4E6AFFEF5FAAF2C7197EBCBDF5D7E
	36A19911F35682693AD6BFBCFE3F6FDEF93D69976BCDBF5ABC80A1C2033856EB
	C1CE4FFFF3DFB62D27F0F5E5CB97EB4D8C44328210F4CF57FFEBDFAFBFF6CAFB
	D7DFBB7DF3E3D65D44A55FBEF3C63FFDEC276F5D7BAB9AA45F6B5E3A6A7DC8CB
	FB083CE0B7F76EBDD9ED824C93244D33E579BD525D6D2CD6B24AFF5A4F2BAB0B
	4BB5343BDF7C069F1975BA07D7D76E5CBDFDE1FAF6C641DE23EDB9C6A92F3496
	71449440441782E42A5997FEE683161EE0DDCD7500F20250E4791FC9D985E5CC
	B9B32797334BCE9D5CAEA59573CD5328516FDFFEC38D76EB839DBBAA24BE9E24
	ED7471F5D4B92F3E3B99704A82E201F0A5EACA5FAE9EEFF9622BEFF4E437BBED
	5CC566B7432349412E4D7AD02118E0839D7BA3AF089FE7D5343BDD58ECC338DD
	F795C3FBA56A5639BF341F30ADBDED7BFB7BADA2736B6F63BDBB576D3472E4A8
	653E2F04D5174FD44F2E743BFB2884200A0F4012C97AB576B6B608E012C612D0
	2DF2CD5EBB0FE61009FC66EF10CF56B74D3390045C92F454DCDA6B010F3D4603
	2EC87B792DCBCE2C34176AF5BEC748EA3B509F53FFE792FA016D6DF3DE917E72
	70459BF94EB76389BBB9DB22B5CDDC2796562B82B890D48B93459E4382E48B82
	8039F3793EA3A94B521C1E60E6302982402549CE2427015C6C343190C660F287
	BED25331B86EF5F6490EC8A595AC00FA6092EEDE47DD6D73CE8CD8A03903C98D
	7748F6E1D18C66E68C460079510030EF6A4B35C127C8A0A1AF8D45829404E959
	9EB8B6FD91652980583DC0390714C48404107F12CC85FAD263607CDE8731F092
	0FF6EEB77D57D0245933A3D19C91062380A2F0928AA290E4121C95F4D81F43A2
	0677D92D9E43AD2AF7C6412F4D1CA6290E0F30334900F1E733C06C302E39537B
	E831F5A5F5F6D65EBEFF245690A011B03136122224350A5B2C6AA70EDC8277A2
	A4E1E7A529B61618491F00910484F98B048D1C3D9FE414C01C3AA24914248123
	EA95828DC2EAB99DECB17F4D861F781C0F484C9391640C00F4475D55003F39DA
	11054058D92C56569F0191430F58103CE1B354464F92033ECEA3E11DC9854D97
	C81E3D46839B27142D0A005E92108281467613BCFC855AF342BA34E0C911A2E9
	86F563FA4F23D2A2A886CA7B2FCC59936920490490069C271EEEBD071001803F
	2B5BD0270300EF7DE10BC90F7820840412368D2E630030560006C39628096145
	92933F0A530D8D4F22395FAE939EA98907194D517800D3C4394772EE4E604602
	84010CDDF8274573502421C88CE0FC031169343A67F834441A100B00E700CEBD
	33A03171890DDCAB64096024B520121688EB785A5CC17BFB4949B178000F1520
	23A2511220686C8E3241C400207C562A415EF04248C50F8008247979C94B2403
	B66C1F2D0007E414C8F93AC1D82614204808230D044D6B5251CC882954B22108
	00C9D0017D3A004051AC0DD568C269EEFCF878230DDB54146D08924081813B6A
	49C1DC93982E46D309D33F5D8CD6ECC77A50A0BCA9283B4393E22B47CF9981E4
	7D21091221942BC59486FA20115A80F7920495606D1FED48D8174290CD2452A1
	F0F6E78C1C9A3E120002BC0A4073777B2F0F0850F060318BB2E2E9031422F44A
	284BD2D42F15C93840F2D0FCBB3F950160BC326B2A920800F8A2F0DE030A8116
	F412A520B98BFE78D22F9111A5A1F3958E5C0480082A7292802080B10008D1FE
	01C94B082F0224270220108B0750A20265E742292231A178366A3B06E16A8487
	A65A47654C65C4538A20C84FEFB1C73362A1EC44126039851B29DA1D32A08908
	2433130BC9410C8741D31892F194A321480AB628D1039288701220440C2050B6
	E8F5246D5B732F3E538A0180C9879A3497105EF21ED2941047220A0084070922
	88A45217221E21CE5053925149C101CC3637C963005E93FD63498B2B45808C00
	C0606F340249840C62400C020520D62C28747248898207F2B2E7DF8F01003012
	2588B3A25F1C59104BB34D9999966239B6D2BC63180C469AD9080303C59C471B
	10E2DDA001941D2634E771B1A0E94F553C479631F44646963CE0200945538EB6
	A0D6074963A0C639EBA817734E8AC503083094F19D19CD0906059927D7006594
	F301E125810F0530E4288060B40004852C9A8D00041301CE88A2640C000A0A12
	A46007E1882147BD0466220E02203269A2565CEA3AFFE33E408008CE9A1E898E
	89054C1683882041900C68F6998BD38F8B71898114E1E1E76EFE344D00704820
	2C82F000189763617575F5D5575FBB74F1E2DF7DF38559A616140F0021886808
	A37BF7EFADAE3ED3E9745EBBF67FB31B3B230040F360B01E580AF570AF8B172F
	F5317CBCBB214CFF2D8AE6CC3885732B9532DF409635D56151AD5DA0544EA146
	8A370D250885354C50064692C6A9F96F3421880003A5402A7C2180B4C06B5218
	2002459E05490258D616A59847C282421028A70398FDA72B8E8198F73426219A
	2AE924912420282800A9A4566508220B0260A452F21495935D5B443194A41949
	827C1A9BEA131FB6A0780004F100903490652DCE8A73590A6981FC55A36A8466
	7F80C1CC261F511674A870074A7E3AF2F251A5A181C196BF535EDE4732256964
	1E2C415430B847FF9DB6F2CE3C1880BEC5358E94247848E52F5157F01074ACD9
	4D48519D1B4A44233D0115631C7BC418785D7429A063DE2316EE7C6D1E6A6C78
	0523A099734A8A0680A039339858B2C990A691106B2DA890970469EE86114482
	81AD4290D3888A502CAF34971734FF37104943FB0CFD4028578C7824ACF9D12D
	61E65CD3FE4B46550B0A114039022040E5D722C078564793814B412A3FDC9064
	0800B1BD8E4E90421F9AC2596D888C7E79BA0257A4859052240BB314E65B68C4
	0052400373C626B75826E56984419C3F030D535082FCBCBC4A1216E844871076
	A199D1A04FA75C27290E00A0198DE0DC19184963E820AE19CD5DF28A02002104
	3AE1969444124125418014F3485861320B1D6A5469954ACE77F8F9DD1FA0CFD8
	91899A46C099C5E1018214E66DCB4249E2B478431A184735141E0A314ED67075
	88480BFDDE7792E56C7AB0B8A6683522CBA0A35892200045BA470C80C2309084
	B8151E8033479201E091230F28A31CA45801803023C0B93B10694648F292E483
	5991931037DBBB1BFB7B24E328479B1938FFDAB51941860E9993FB6F6E6EDEBD
	BA7513D5B49A6671AC0B228DE0DCA300493396BC2CE8C3CDDBAF6C7C78407F76
	71F9C5AF7E278AFD01709680F39FC331BA71492E74262601F8F5DAFB378A5D97
	A5572E3DFFC3AF7CAB9656220010761E4D200806FF8D12FE77EDBD8FF5C025EE
	CAB9E7FEFECAF710468618A4525293F59DD62FD6AE375696CCEC37AD5B6B6C9B
	B37ED819583F6200E567857A125ADDBCF74E6BED3FEEBEF36A7E074B7597B8AD
	3BF72C4B6B69F5C5AF7EF7CAC5E7A33CB2EC4E67E7EDFBB7D6775B1B7BDBF37E
	53BD20491EC4D3E8FEDED68DDDFB573BEBBFC49DB567D2A259775996777B1F5D
	7F77FDDD1BB5B4F28FDFF8DB2B179E8BF5D0BE167AADF65DB401C0DFC953DA72
	AD91C09A593D059BD58514B6D2388927519E77A1E1C9957FB208A489667E7F77
	5B95A4A5FDB6F35B96574F2F986579EEAA52DFEECE8C44B7BDDF3B38B8B072FA
	47DFF97E3FED89F2D4C42F344FEFF7F2DBBB9B18C9D2A400EE171D00B73B0F24
	3F0473B7701ECD4A230157AA2732738778E86681215978AFD1FD6FFDF67BAD1D
	48674E34BBFB070008A6B58A4B12E75C0EDF6AEFD2B94EE2F7F36E61AC9CAEA5
	299C6B90B6301CCC7902122481347334FEE0AFBFF7FD2BDF8EF8D8CA7FF8DADF
	0C6E3ABD6E1FC37EDE7B78EDDED91BDE63243A3BF0F95A7B4BC0CDCE5692A666
	C68760525A336B8CAF957A224BD394340E59B093C18CA07BDFEF14AE28BC0769
	793B659A2559A55A65A3413225AD283A9D7D00DECB4C66908047240DCE5C61C5
	F34B675EF8CA0B4B95FAE7E4DCD05A9AFDC5F269005F5EBD80A18E82E9DEDE69
	ED1D746E6DDE6F1FECF77B8BE128CB68C9D863D6F30700B4E77BBD5C92994D78
	05E4A5C11D691C0AC42349A0711C9934AE38186D39AD3DB7B8F2A513AB159746
	7070EB5CC15C9C00D31A79CCD87B8E9E1361C3CBD4707FF44376B463307B1C08
	B19CD4975D6D39A95DAE364F2495E393731F81393303CC66A777D0CFD30FF2DE
	46EF419A653BBDCE4E6F7FA20635A0C3A384165CD648B32E7BE76B8B469EAF2E
	9EAD9CC467478A5AF1EBFF019499260FD6CF9BEB0000000049454E44AE426082
	]]>
</Picture>

<CalledMacros SectVersion="2" SectionFlags="0" SubIdent="0">
	<Macro>
		<MName><![CDATA["fa_knobtyp"]]></MName>
		<MainGUID>29F83AA1-B564-436E-9586-290736E65631</MainGUID>
	</Macro>
</CalledMacros>

<Copyright SectVersion="1" SectionFlags="0" SubIdent="0">
	<Author>GRAPHISOFT</Author>
	<License>
		<Type>CC BY-ND</Type>
		<Version>3.0</Version>
	</License>
</Copyright>

</Symbol>
