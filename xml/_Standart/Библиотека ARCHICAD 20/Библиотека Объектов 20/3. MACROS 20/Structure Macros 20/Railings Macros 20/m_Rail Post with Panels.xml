<?xml version="1.0" encoding="UTF-8"?>
<Symbol IsArchivable="true" IsPlaceable="false" MainGUID="8F273077-0C99-494C-AF29-9F940C664556" MigrationValue="Normal" Owner="1196638531" Signature="1196644685" Version="43">
<Ancestry SectVersion="1" SectionFlags="0" SubIdent="0" Template="false">
	<MainGUID>F938E33A-329D-4A36-BE3E-85E126820996</MainGUID>
	<MainGUID>103E8D2C-8230-42E1-9597-46F84CCE28C0</MainGUID>
	<MainGUID>784EAEA1-5041-4AA6-B6F4-EF263A891EE7</MainGUID>
	<MainGUID>09BEB35E-7BF8-448C-B408-AC04D159B0D1</MainGUID>
</Ancestry>

<ParamSection SectVersion="22" SectionFlags="0" SubIdent="0">
	<ParamSectHeader>
		<AutoHotspots>false</AutoHotspots>
		<StatBits>
			<STBit_FixSize/>
		</StatBits>
		<WDLeftFrame>0</WDLeftFrame>
		<WDRightFrame>0</WDRightFrame>
		<WDTopFrame>0</WDTopFrame>
		<WDBotFrame>0</WDBotFrame>
		<LayFlags>65535</LayFlags>
		<WDMirrorThickness>0</WDMirrorThickness>
		<WDWallInset>0</WDWallInset>
	</ParamSectHeader>
	<Parameters>
		<Length Name="A">
			<Description><![CDATA["Dimension 1"]]></Description>
			<Fix/>
			<Value>1.8</Value>
		</Length>
		<Length Name="B">
			<Description><![CDATA["Dimension 2"]]></Description>
			<Fix/>
			<Value>0.05</Value>
		</Length>
		<Length Name="ZZYZX">
			<Description><![CDATA["Height"]]></Description>
			<Fix/>
			<Value>0.9</Value>
		</Length>
		<Integer Name="gs_detlevel_3D_m">
			<Description><![CDATA["3D"]]></Description>
			<Value>2</Value>
		</Integer>
		<Boolean Name="cfs">
			<Description><![CDATA["Called as Macro from Stair"]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Boolean>

		<!-- RailBalust_sp0: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="RailBalust_sp0">
			<Description><![CDATA["General Dimensions"]]></Description>
		</Title>
		<Integer Name="ptyp_m">
			<Description><![CDATA["Rail and Parameter Input Type"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Angle Name="ani">
			<Description><![CDATA["Inclination Angle"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Angle>
		<Integer Name="rom_m">
			<Description><![CDATA["Rail Orientation Method"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Integer Name="rmm_m">
			<Description><![CDATA["Rail Measurement Method"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Boolean Name="LengthSize">
			<Description><![CDATA["'A' Size=Handrail Length"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Length Name="lra">
			<Description><![CDATA["Horizontal Length of Railing"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1.5</Value>
		</Length>
		<Length Name="lrah">
			<Description><![CDATA["Length of Railing"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1.5</Value>
		</Length>
		<Length Name="hr">
			<Description><![CDATA["Height of Railing"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.75</Value>
		</Length>
		<Length Name="hrPerp">
			<Description><![CDATA["Height of Railing"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.75</Value>
		</Length>
		<Angle Name="ab">
			<Description><![CDATA["Angle of Bending"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>85.9436692696</Value>
		</Angle>
		<Length Name="rb">
			<Description><![CDATA["Radius of Bending"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Length>
		<Length Name="ds">
			<Description><![CDATA["Distance from Slab/Stair"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.15</Value>
		</Length>
		<Length Name="dsPerp">
			<Description><![CDATA["Distance from Slab/Stair"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.15</Value>
		</Length>
		<Angle Name="gs_AngleL">
			<Description><![CDATA["Left End Cutting Angle"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>90</Value>
		</Angle>
		<Angle Name="gs_AngleR">
			<Description><![CDATA["Right End Cutting Angle"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>90</Value>
		</Angle>

		<!-- RailBalust_sp1: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="RailBalust_sp1">
			<Description><![CDATA["Structural Dimensions"]]></Description>
		</Title>
		<Integer Name="hrt_m">
			<Description><![CDATA["Handrail Style"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Length Name="hrd">
			<Description><![CDATA["Handrail Diameter"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Length Name="hrw">
			<Description><![CDATA["Handrail Width"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Length Name="hrh">
			<Description><![CDATA["Handrail Height"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.025</Value>
		</Length>
		<Length Name="hro">
			<Description><![CDATA["Handrail Overhang"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="hroL">
			<Description><![CDATA["Handrail Overhang - Left"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.15</Value>
		</Length>
		<Length Name="hroR">
			<Description><![CDATA["Handrail Overhang - Right"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.15</Value>
		</Length>
		<Length Name="hroLDiagonal">
			<Description><![CDATA["Handrail Overhang - Left"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.15</Value>
		</Length>
		<Length Name="hroRDiagonal">
			<Description><![CDATA["Handrail Overhang - Right"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.15</Value>
		</Length>
		<Integer Name="pt_m">
			<Description><![CDATA["Post Style"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Integer Name="np">
			<Description><![CDATA["No. of Posts"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>3</Value>
		</Integer>
		<Length Name="pd">
			<Description><![CDATA["Post Diameter"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.04</Value>
		</Length>
		<Length Name="pw">
			<Description><![CDATA["Post Width"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.04</Value>
		</Length>
		<Length Name="pth">
			<Description><![CDATA["Post Thickness"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.04</Value>
		</Length>
		<Length Name="gs_PostBaseOverhang">
			<Description><![CDATA["Post Base Overhang"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="gs_PostBaseOverhangPerp">
			<Description><![CDATA["Post Base Overhang"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="fillThk">
			<Description><![CDATA["Fill Thickness"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.02</Value>
		</Length>
		<Length Name="fillDistFromFrameSide">
			<Description><![CDATA["Fill Distance from Frame on Sides"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.01</Value>
		</Length>
		<Length Name="fillDistFromFrameTop">
			<Description><![CDATA["Fill Distance from Frame on Top"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Length Name="fillDistFromFrameTopPerp">
			<Description><![CDATA["Fill Distance from Frame on Top"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.05</Value>
		</Length>

		<!-- gs_3D_representation: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_3D_representation">
			<Description><![CDATA["3D Representation"]]></Description>
		</Title>
		<Integer Name="res">
			<Description><![CDATA["Rail Arc Resolution"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>42</Value>
		</Integer>
		<Integer Name="rescs">
			<Description><![CDATA["Cross Section Resolution"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>12</Value>
		</Integer>
		<Boolean Name="gs_shadow">
			<Description><![CDATA["Shadow"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="AC_show2DHotspotsIn3D">
			<Description><![CDATA["Show 2D Hotspots in 3D"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Length Name="ac_bottomlevel">
			<Description><![CDATA["Bottom Level"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Length>
		<Length Name="ac_toplevel">
			<Description><![CDATA["Top Level"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>

		<!-- gs_2D_representation: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_2D_representation">
			<Description><![CDATA["2D Representation"]]></Description>
			<Fix/>
		</Title>
		<PenColor Name="gs_cont_pen">
			<Description><![CDATA["Contour Pen"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>2</Value>
		</PenColor>
		<FillPattern Name="gs_fill_type">
			<Description><![CDATA["Fill Type"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>65</Value>
		</FillPattern>
		<PenColor Name="gs_fill_pen">
			<Description><![CDATA["Fill Pen"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>91</Value>
		</PenColor>
		<PenColor Name="gs_back_pen">
			<Description><![CDATA["Fill Background Pen"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>91</Value>
		</PenColor>
		<Boolean Name="bPostSymbol">
			<Description><![CDATA["Post Symbol"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="sa">
			<Description><![CDATA["Show Axis"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<LineType Name="al">
			<Description><![CDATA["Axis Line Type"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</LineType>
		<PenColor Name="gs_RailAxisPen">
			<Description><![CDATA["Axis Line Pen"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>16</Value>
		</PenColor>
		<Integer Name="iPostSymbolType">
			<Description><![CDATA["Post Symbol Type"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Integer>
		<LineType Name="postLineType">
			<Description><![CDATA["Post Line Type"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</LineType>
		<PenColor Name="postPen">
			<Description><![CDATA["Post Line Pen"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>16</Value>
		</PenColor>

		<!-- RailBalust_sp2: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="RailBalust_sp2">
			<Description><![CDATA["Surfaces"]]></Description>
		</Title>
		<Material Name="fmat">
			<Description><![CDATA["Handrail"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>15</Value>
		</Material>
		<Material Name="pmat">
			<Description><![CDATA["Post"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>15</Value>
		</Material>
		<Material Name="gs_fillMat">
			<Description><![CDATA["Fill"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>15</Value>
		</Material>

		<!-- gs_list: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_list">
			<Description><![CDATA["Parameters for Listing"]]></Description>
			<Fix/>
		</Title>
		<RealNum Name="gs_list_cost">
			<Description><![CDATA["Cost"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<String Name="gs_list_manufacturer">
			<Description><![CDATA["Manufacturer"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_note">
			<Description><![CDATA["Note/Remarks"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_location">
			<Description><![CDATA["Location"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_accessories">
			<Description><![CDATA["Accessories"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="FM_Type">
			<Description><![CDATA["Group Type"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Другой"]]></Value>
		</String>
		<Integer Name="iFMType">
			<Description><![CDATA["Group Type"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>25</Value>
		</Integer>
		<String Name="FM_InventoryNumber">
			<Description><![CDATA["Inventory No."]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="FM_SerialNumber">
			<Description><![CDATA["Serial No."]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="FM_ProductionYear">
			<Description><![CDATA["Production Year"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<RealNum Name="FM_ObjectWeight">
			<Description><![CDATA["Object Weight"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<String Name="FM_ObjectWeightUnit">
			<Description><![CDATA["Object Weight Unit"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["кг"]]></Value>
		</String>
		<String Name="gs_list_custom1">
			<Description><![CDATA["User Defined 1"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_custom2">
			<Description><![CDATA["User Defined 2"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_custom3">
			<Description><![CDATA["User Defined 3"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_custom4">
			<Description><![CDATA["User Defined 4"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_custom5">
			<Description><![CDATA["User Defined 5"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
	</Parameters>
</ParamSection>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_VL SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
! GENERAL PARAMETERS
values "gs_detlevel_3D_m" 2,1,0		! Detailed, Simple, Off


! GENERAL RAIL GEOMETRY PARAMETERS
values "ptyp_m" 1,2,3				! Straight, Curve Length and Radius, Angle and Radius


IF ptyp_m<>1 OR ABS(ani)<EPS  THEN
	VALUES "rom_m" 1
	VALUES "rmm_m" 1
	HIDEPARAMETER "lrah"
ELSE
	VALUES "rom_m"  1,2
	IF rom_m=2 then
		VALUES "rmm_m" 2
	ELSE
		VALUES "rmm_m" 1,2
	ENDIF
ENDIF

IF ptyp_m<>1 THEN	HIDEPARAMETER "LengthSize"

IF LengthSize = 0 OR ptyp_m<>1 THEN
	VALUES "a" lra+hroL+hroR
ELSE
	VALUES "a" lra
ENDIF
VALUES "zzyzx" ds+hr


! STRUCTURAL DIMENSION PARAMETERS
VALUES "hrt_m" 1,2		! Rectangular, Round
IF hrt_m=2 then
	HIDEPARAMETER "hrw","hrh"
ELSE
	HIDEPARAMETER "hrd"
ENDIF


IF ptyp_m<>1 then
	IF hrt_m=1 then VALUES "b" hrw
	IF hrt_m=2 then VALUES "b" hrd
	lock "a","b","zzyzx"
ELSE
	IF hrt_m=1 then
		IF GLOB_MODPAR_NAME = "B" THEN PARAMETERS hrw=B
		IF GLOB_MODPAR_NAME = "hrw" THEN PARAMETERS B=hrw
		IF GLOB_MODPAR_NAME = "hrt_m" THEN PARAMETERS hrw=B
	ELSE
		IF GLOB_MODPAR_NAME = "B" THEN PARAMETERS hrd=B
		IF GLOB_MODPAR_NAME = "hrd" THEN PARAMETERS B=hrd
		IF GLOB_MODPAR_NAME = "hrt_m" THEN PARAMETERS hrd=B
	ENDIF
	lock "a","zzyzx"
ENDIF


VALUES "pt_m" 1,2		! Rectangular, Round
IF pt_m=2 then
	HIDEPARAMETER "pw","pth"
ELSE
	HIDEPARAMETER "pd"
ENDIF

IF ptyp_m<>1 OR rom_m<>1 THEN
	LOCK "gs_AngleL"
	LOCK "gs_AngleR"
ENDIF


if gs_cont_pen<=0 then parameters gs_cont_pen=2
if gs_fill_pen<=0 then parameters gs_fill_pen=91

!PARAMETER RANGE DEFINITION

if LengthSize then
	VALUES "lra" 	RANGE(hroL+hroR,)
	VALUES "lrah" 	RANGE((hroL+hroR)/cos(ani),)
else
	VALUES "lra" 	RANGE(0,)
	VALUES "lrah" 	RANGE(0,)
endif
values "hr" RANGE(hrh,)

values "res" RANGE[3,)
values "rescs" RANGE[3,)

if hrt_m = 1 and pt_m = 1 then
	lock			"rescs"
	hideparameter	"rescs"
endif

VALUES "B" RANGE(0,)

VALUES "gs_AngleL" 	range(0,180)
VALUES "gs_AngleR" 	range(0,180)

VALUES "hro"	RANGE [0,)

IF LengthSize=1 OR ABS(gs_AngleL-90)<EPS THEN		!! gs_AngleL=90
	VALUES "hroL"	RANGE [dpost,)
ELSE
	VALUES "hroL"	RANGE [0,)
ENDIF

IF LengthSize=1 OR ABS(gs_AngleR-90)<EPS THEN		!! gs_AngleR=90
	VALUES "hroR"	RANGE [dpost,)
ELSE
	VALUES "hroR"	RANGE [0,)
ENDIF

VALUES "hroLDiagonal"	RANGE [dpost,)
VALUES "hroRDiagonal"	RANGE [dpost,)

VALUES "ani" range(-90, 0), range (0, 90)

VALUES "hrd" RANGE(0,)
VALUES "hrw" RANGE(0,)
VALUES "hrh" RANGE(0,)
VALUES "np"	RANGE [2,)

VALUES "pd" RANGE(0,)
VALUES "pw" RANGE(0,)
VALUES "pth" RANGE(0,)
VALUES "gs_PostBaseOverhang" RANGE [0,)
VALUES "gs_PostBaseOverhangPerp" RANGE [0,)

VALUES "fillThk" RANGE(0,)


IF ABS(ani)<EPS THEN
	VALUES "ab" RANGE (0,360]
	LOCK "rom_m","rmm_m"
ELSE
	VALUES "ab" RANGE (0,)
ENDIF


! Distance from Slab/Stair
if GLOB_MODPAR_NAME = "dsPerp" then
	ds = dsPerp * cos(ani)
	parameters ds = ds
else
	dsPerp = ds / cos(ani)
	parameters dsPerp = dsPerp
endif

! Height of Railing
if GLOB_MODPAR_NAME = "hrPerp" then
	hr = hrPerp * cos(ani)
	parameters hr = hr
else
	hrPerp = hr / cos(ani)
	parameters hrPerp = hrPerp
endif

! Post Base Overhang
if GLOB_MODPAR_NAME = "gs_PostBaseOverhangPerp" then
	gs_PostBaseOverhang = gs_PostBaseOverhangPerp * cos(ani)
	parameters gs_PostBaseOverhang = gs_PostBaseOverhang
else
	gs_PostBaseOverhangPerp = gs_PostBaseOverhang / cos(ani)
	parameters gs_PostBaseOverhangPerp = gs_PostBaseOverhangPerp
endif

! Distance from Handrail to Fill
if GLOB_MODPAR_NAME = "fillDistFromFrameTopPerp" then
	fillDistFromFrameTop = fillDistFromFrameTopPerp * cos(ani)
	parameters fillDistFromFrameTop = fillDistFromFrameTop
else
	fillDistFromFrameTopPerp = fillDistFromFrameTop / cos(ani)
	parameters fillDistFromFrameTopPerp = fillDistFromFrameTopPerp
endif

! Left Overhang of Railing
if GLOB_MODPAR_NAME = "hroLDiagonal" then
	hroL = hroLDiagonal * cos(ani)
	parameters hroL = hroL
else
	hroLDiagonal = hroL / cos(ani)
	parameters hroLDiagonal = hroLDiagonal
endif

! Right Overhang of Railing
if GLOB_MODPAR_NAME = "hroRDiagonal" then
	hroR = hroRDiagonal * cos(ani)
	parameters hroR = hroR
else
	hroRDiagonal = hroR / cos(ani)
	parameters hroRDiagonal = hroRDiagonal
endif

! COMPABILITY OF OVERHANG OF RAILING
EPS=0.00001
IF GLOB_MODPAR_NAME = "hroL" OR GLOB_MODPAR_NAME = "hroR" then
	parameters hro = 0
ELSE
	if abs(hro) > EPS then
		parameters 	hroL = hro,
					hroR = hro,
					hroLDiagonal=hro/cos(ani),
					hroRDiagonal=hro/cos(ani)
	endif
ENDIF
]]>
</Script_VL>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_3D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
!Rail Post with Panels

if gs_detlevel_3D_m = 0 then end
templra = max(templra, EPS)

if not(gs_shadow) then shadow off

PEN gs_cont_pen
unID=1


IF hrt_m=1 THEN		!!! HANDRAIL WIDTH
	fth=pth
	HandrailWidth=hrw
ELSE
	fth=pd
	HandrailWidth=hrd
ENDIF



!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! *** SIMPLE 3D *** !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


!!!CALCULATION FOR CONNECTING ANGLE

XPosL0=(HandrailWidth/2)/tan(gs_AngleL)
XPosR0=(HandrailWidth/2)/tan(gs_AngleR)

XPosL=ABS((HandrailWidth/2)/tan(gs_AngleL))
XPosR=ABS((HandrailWidth/2)/tan(gs_AngleR))
YPosL=(XPosL*tan(ani))
YPosR=(XPosR*tan(ani))


IF gs_detlevel_3D_m=1 THEN		!!Simple

	MATERIAL pmat
	RESOL res


	!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! *** STRAIGHT *** !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

		IF ABS(ani)<EPS and ptyp_m=1 THEN		!!ptyp=Straight

			ADDx XStartPoslra
			ADDz ds
				PRISM_ 5,hr,
					XPosL0,fth/2,15,
					-XPosL0,-fth/2,15,
					templra+XPosR0,-fth/2,15,
					templra-XPosR0,fth/2,15,
					XPosL0,fth/2,-1
			DEL 2

		ENDIF

	!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! *** STRAIGHT CURVED *** !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

		IF ABS(ani)<EPS and ptyp_m<>1 THEN

		!!!!FRAME

			IF ab<360 THEN
					ADDz ds
					PRISM_ 10,hr,
						0,fth/2,15,
						0,-fth/2+0.00005,15,
						0,-fth/2,79,
						1,0,800,
						(rb+(fth/2))*sin(ab),rb-(rb+(fth/2))*cos(ab),1015,
						(rb-(fth/2)+0.00005)*sin(ab),rb-(rb-(fth/2)+0.00005)*cos(ab),15,
						(rb-(fth/2))*sin(ab),rb-(rb-(fth/2))*cos(ab),79,
						-cos(ab),-sin(ab),800,
						0,fth/2,1015,
						0,fth/2,-1
					DEL 1

			ELSE	!!!ANGLE=360

				ADDz ds
					PRISM_ 12,hr,
						0,-fth/2,79,
						1,0,800,
						0,2*rb+fth/2,1079,
						-1,0,800,
						0,-fth/2,1079,
						0,-fth/2,-1,

						0,fth/2,79,
						1,0,800,
						0,2*rb-fth/2,1079,
						-1,0,800,
						0,fth/2,1079,
						0,fth/2,-1
				DEL 1

			ENDIF
		ENDIF

	!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! *** STRAIGHT INCLINED *** !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

		IF ABS(ani)>EPS and ptyp_m=1 THEN			!!ptyp=Straight

			IF rom_m=1 THEN					!!Vertical Orientation

				ADD XStartPoslra,0,ZStartPoslra

					IF rmm_m=1 THEN			!!Vertical Measurement
						temp_ds=ds
						temp_hr=hr
					ELSE					!!Perpendicular Measurement
						temp_ds=dsPerp
						temp_hr=hrPerp
					ENDIF

						ROTz -90+gs_AngleL		!! CONNECTING ANGLE
						ROTy -90
							CUTPLANE
						DEL 2

						ADDx templra
						ROTz 90-gs_AngleR
						ROTy 90
							CUTPLANE
						DEL 3


							ROTx 90
							ADDz -fth/2

								PRISM_ 5,fth,
									-XPosL,temp_ds-YPosL,15,
									templra+XPosR,temp_ds+templra*tan(ani)+YPosR,15,
									templra+XPosR,temp_ds+temp_hr+templra*tan(ani)+YPosR,15,
									-XPosL,temp_ds+temp_hr-YPosL,15,
									-XPosL,temp_ds-YPosL,-1

							DEL 2

						CUTEND
						CUTEND
				DEL 1

			ELSE						!Perpendicular Orientation
										!Measurement is always perpendicular to inclination in this case

				ROTy -ani
				ADDx XStartPoslra

					ROTx 90
					ADDz -fth/2
						!!FRAME

						PRISM_ 5,fth,
						0,ds,15,
						templrah,ds,15,
						templrah,ds+hr,15,
						0,ds+hr,15,
						0,ds,-1
					DEL 2

				DEL 2

			ENDIF


		ENDIF


	!!!!!!!!!!!!!!!!!!!!!!!!!!!! *** INCLINED AND CURVED *** !!!!!!!!!!!!!!!!!!!!!!!!!!!!

		IF ABS(ani)>EPS and ptyp_m<>1 THEN

			!!!!FRAME

			alphai=-alphaincl
			deltazi=-deltazincl
			for i=1 to nalphaincl+3 step 1
			put rb*sin(alphai),rb-rb*cos(alphai),ds+deltazi
			alphai=alphai+alphaincl
			deltazi=deltazi+deltazincl
			NEXT i

			TUBEA 5,nalphaincl+3,1+2+16+32,
				-fth/2,0,0,
				fth/2,0,0,
				fth/2,hr,0,
				-fth/2,hr,0,
				-fth/2,0,-1,
				get (nsp)

		ENDIF


ENDIF		!!END of SIMPLE 3D!!



!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! *** DETAILED 3D *** !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


IF gs_detlevel_3D_m=2 THEN

	!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! *** STRAIGHT *** !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

	IF ABS(ani)<EPS and ptyp_m=1 THEN

		ADDX XStartPoslra

		!!3D FEEDBACK AT HOTSPOT EDITING
		IF GLOB_CONTEXT>20 and GLOB_CONTEXT<40 THEN

			ADDz ds
			MATERIAL fmat
			PRISM_ 5,hr,
				(fth/2)/tan(gs_AngleL),fth/2,15,
				-(fth/2)/tan(gs_AngleL),-fth/2,15,
				templra+(fth/2)/tan(gs_AngleR),-fth/2,15,
				templra-(fth/2)/tan(gs_AngleR),fth/2,15,
				(fth/2)/tan(gs_AngleL),fth/2,-1
			DEL 1

		ELSE	!!! DETAILED MODEL

			!! *** HANDRAIL *** !! *****************************************************

			MATERIAL fmat

			ADDx -(hroL)
			ROTz -90+gs_AngleL		!! CONNECTING ANGLE
			ROTy -90
			CUTPLANE
			DEL 3

			ADDx templra+(hroR)
			ROTz 90-gs_AngleR
			ROTy 90
			CUTPLANE
			DEL 3

			RESOL rescs

			MATERIAL fmat

			GROUP "handrail round straight"			!Groups
				ADD  -hroL-XPosL,0,ds+hr-hrd/2
				ROTy 90
				CYLIND templra+(hroL)+XPosL+(hroR)+XPosR,hrd/2
				DEL 2
			ENDGROUP

			IF hrt_m=1 THEN
				ADDz ds+hr-hrh
				PRISM_ 5,hrh,
					-(hroL)-XPosL,hrw/2,15,
					-(hroL)-XPosL,-hrw/2,15,
					templra+(hroR)+XPosR,-hrw/2,15,
					templra+(hroR)+XPosR,hrw/2,15,
					-(hroL)-XPosL,hrw/2,-1
				DEL 1

			ELSE
				PLACEGROUP "handrail round straight"
			ENDIF

			body -1

			CUTEND
			CUTEND

			!! *** POST *** !! *****************************************************

			MATERIAL pmat

			ADDx -(hroL)-LengthSize*dpost
			ROTz -90+gs_AngleL		!! CONNECTING ANGLE
			ROTy -90
			CUTPLANE
			DEL 3

			ADDx templra+(hroR)+LengthSize*dpost
			ROTz 90-gs_AngleR
			ROTy 90
			CUTPLANE
			DEL 3

			MATERIAL pmat

			IF hrt_m=1 THEN			!Post height calculation
				ph=hr+ds-hrh+gs_PostBaseOverhang
			ELSE
				IF pt_m=1 THEN
					ph=hr+ds-hrd+gs_PostBaseOverhang
				ELSE
					ph=hr+ds-hrd/2+gs_PostBaseOverhang
				ENDIF
			ENDIF

			GROUP "post round straight"			!Groups
				addz -gs_PostBaseOverhang
				for i=1 to np step 1
					CYLIND ph,pd/2
					ADDx distpost
				NEXT i
				DEL np + 1
			ENDGROUP

			GROUP "post rect straight"
				addz -gs_PostBaseOverhang
				for i=1 to np
					PRISM_ 5,ph,
						-pw/2,-pth/2,15,
						 pw/2,-pth/2,15,
						 pw/2,pth/2,15,
						-pw/2,pth/2,15,
						-pw/2,-pth/2,-1
					ADDx distpost
				NEXT i
				DEL np + 1
			ENDGROUP

			IF pt_m=1 THEN
				PLACEGROUP "post rect straight"
			ELSE
				IF hrt_m=1 THEN
					PLACEGROUP "post round straight"
				ELSE
					PLACEGROUP subgroup ("post round straight","handrail round straight")
				ENDIF
			ENDIF

			CUTEND
			CUTEND

			! Fill

			MATERIAL gs_fillMat

			panelLength = distpost - (pt_m = 1) * pw - (pt_m = 2) * pd - 2 * fillDistFromFrameSide

			ADD  fillDistFromFrameSide + (pt_m = 1) * pw/2 + (pt_m = 2) * pd/2, 0, ds
			for i = 1 to np-1
				PRISM_ 5, hr - (hrt_m = 1) * hrh - (hrt_m = 2) * hrd - fillDistFromFrameTop,
					0,				-fillThk/2,15,
					panelLength,	-fillThk/2,15,
					panelLength,	fillThk/2,15,
					0,				fillThk/2,15,
					0,				-fillThk/2,-1
				addx distpost
			next i
			DEL np

			body -1

			KILLGROUP "handrail round straight"
			KILLGROUP "post round straight"
			KILLGROUP "post rect straight"
		ENDIF
		DEL 1
	ENDIF


	!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! *** STRAIGHT CURVED *** !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

	IF ABS(ani)<EPS and ptyp_m<>1 THEN

		!!3D FEEDBACK AT HOTSPOT EDITING
		IF GLOB_CONTEXT>20 and GLOB_CONTEXT<40 THEN

			!!!!FRAME
			MATERIAL fmat

			IF ab<360 THEN
				ADDz ds
				PRISM_ 10,hr,
					0,fth/2,15,
					0,-fth/2+0.00005,15,
					0,-fth/2,79,
					1,0,800,
					(rb+(fth/2))*sin(ab),rb-(rb+(fth/2))*cos(ab),1015,
					(rb-(fth/2)+0.00005)*sin(ab),rb-(rb-(fth/2)+0.00005)*cos(ab),15,
					(rb-(fth/2))*sin(ab),rb-(rb-(fth/2))*cos(ab),79,
					-cos(ab),-sin(ab),800,
					0,fth/2,1015,
					0,fth/2,-1
				DEL 1
			ELSE	!!!ANGLE=360

				ADDz ds
				PRISM_ 12,hr,
					0,-fth/2,79,
					1,0,800,
					0,2*rb+fth/2,1079,
					-1,0,800,
					0,-fth/2,1079,
					0,-fth/2,-1,

					0,fth/2,79,
					1,0,800,
					0,2*rb-fth/2,1079,
					-1,0,800,
					0,fth/2,1079,
					0,fth/2,-1
				DEL 1

			ENDIF
		ELSE

			!!! *** handrail *** !!! *****************************************

			MATERIAL fmat
			resol res

			if (ab + alphahroL + alphahroR) < 360 then

				group "handrail round curved"				!Groups
					gamma0 = 360 / rescs
					gamma = 0
					for i = 1 to rescs step 1
						put hrd/2 * cos(gamma), rb + hrd/2 * sin(gamma), 1
						gamma = gamma + gamma0
					next i
					add 0, rb, ds + hr - hrd/2
					roty 90
					rotx 180 - ab - alphahroR
						revolve rescs+1, ab + alphahroL + alphahroR, 1+2+4+8+16+32,
						get (nsp),
							hrd/2, rb, -1
					del 3
				endgroup
				handrailgroupname = "handrail round curved"

				IF hrt_m=1 THEN
					ADDz ds+hr-hrh
					PRISM_ 9,hrh,
						(rb-(hrw/2))*sin(-alphahroL),rb-(rb-(hrw/2))*cos(alphahroL),15,
						(rb+(hrw/2)-0.00005)*sin(-alphahroL),rb-(rb+(hrw/2)-0.000005)*cos(alphahroL),15,
						(rb+(hrw/2))*sin(-alphahroL),rb-(rb+(hrw/2))*cos(alphahroL),79,
						cos(alphahroL),sin(-alphahroL),800,
						(rb+(hrw/2))*sin(ab+alphahroR),rb-(rb+(hrw/2))*cos(ab+alphahroR),1015,
						(rb-(hrw/2)+0.00005)*sin(ab+alphahroR),rb-(rb-(hrw/2)+0.00005)*cos(ab+alphahroR),15,
						(rb-(hrw/2))*sin(ab+alphahroR),rb-(rb-(hrw/2))*cos(ab+alphahroR),79,
						-cos(ab+alphahroR),-sin(ab+alphahroR),800,
						(rb-(hrw/2))*sin(-alphahroL),rb-(rb-(hrw/2))*cos(alphahroL),1015
					DEL 1
				ELSE
					PLACEGROUP "handrail round curved"
				ENDIF

			else
	
				group "handrail round curved 360"
					gamma0 = 360 / rescs
					gamma = 0
					for i = 1 to rescs step 1
						put hrd/2 * cos(gamma), rb + hrd/2 * sin(gamma), 1
						gamma = gamma + gamma0
					next i
					add  0, rb, ds + hr - hrd/2
					roty 90
					rotx 180 - ab
						revolve rescs+1, 360, 0,
							get (nsp),
							hrd/2, rb, -1
					del 3
				endgroup
				handrailgroupname = "handrail round curved 360"

				if hrt_m = 1 then
					addz ds + hr - hrh
					prism_ 12, hrh,
						0, -hrw/2, 79,
						1, 0, 800,
						0, 2*rb + hrw/2, 1079,
						-1, 0, 800,
						0, -hrw/2, 1079,
						0, -hrw/2, -1,

						0, hrw/2, 79,
						1, 0, 800,
						0, 2*rb - hrw/2, 1079,
						-1, 0, 800,
						0, hrw/2, 1079,
						0, hrw/2, -1
					del 1
				else
					placegroup "handrail round curved 360"
				endif
		
			endif

			!!other parts are shorter, circularity checked differently
			if ab < 360 then

				!!! *** Posts *** !!! *********************************

				MATERIAL pmat
				resol rescs

				IF hrt_m=1 THEN			!Post height calculation
					ph=hr+ds-hrh+gs_PostBaseOverhang
				ELSE
					IF pt_m=1 THEN
						ph=hr+ds-hrd+gs_PostBaseOverhang
					ELSE
						ph=hr+ds-hrd/2+gs_PostBaseOverhang
					ENDIF
				ENDIF

				GROUP "post round curved"			!Groups
					addz -gs_PostBaseOverhang
					for i=1 to np step 1
						CYLIND ph,pd/2
						ADDy rb
						ROTz anglepost
						ADDy -rb
					next i
					DEL 3*np
				ENDGROUP

				GROUP "post rect curved"
					addz -gs_PostBaseOverhang
					for i=1 to np step 1
						PRISM_ 5,ph,
							-pw/2,-pth/2,15,
							 pw/2,-pth/2,15,
							 pw/2,pth/2,15,
							-pw/2,pth/2,15,
							-pw/2,-pth/2,-1
						ADDy rb
						ROTz anglepost
						ADDy -rb
					next i
					DEL 3 * np + 1
				ENDGROUP

				IF pt_m=1 THEN
					PLACEGROUP "post rect curved"
				ELSE
					IF hrt_m=1 THEN
						PLACEGROUP "post round curved"
					ELSE
						PLACEGROUP subgroup ("post round curved", handrailgroupname)
					ENDIF
				ENDIF

				!!! Fill

				MATERIAL gs_fillMat
				resol res

				sideAngle = 2 * asn ((((pt_m = 1) * pw/2 + (pt_m = 2) * pd/2)/2) / rb) + 2 * asn ((fillDistFromFrameSide/2) / rb)

				addz ds
				for i = 1 to np - 1
					prism_ 6, hr - (hrt_m = 1) * hrh - (hrt_m = 2) * hrd - fillDistFromFrameTop,
						0, rb, 900,
						(rb + fillThk / 2) * sin (sideAngle), rb - (rb + fillThk / 2) * cos (sideAngle), 15,
						(rb + fillThk / 2) * sin (anglepost - sideAngle), rb - (rb + fillThk / 2) * cos (anglepost - sideAngle), 3015,
						(rb - fillThk / 2) * sin (anglepost - sideAngle), rb - (rb - fillThk / 2) * cos (anglepost - sideAngle), 15,
						(rb - fillThk / 2) * sin (sideAngle), rb - (rb - fillThk / 2) * cos (sideAngle), 3015,
						(rb + fillThk / 2) * sin (sideAngle), rb - (rb + fillThk / 2) * cos (sideAngle), -1
					addy rb
					rotz anglePost
					addy -rb
				next i
				del 3 * (np - 1) + 1

				KILLGROUP "post round curved"
				KILLGROUP "post rect curved"

			ELSE	!!!ANGLE=360

				!!! *** Posts *** !!! *********************************************

				MATERIAL pmat
				resol rescs

				IF hrt_m=1 THEN			!Post height calculation
					ph=hr+ds-hrh+gs_PostBaseOverhang
				ELSE
					IF pt_m=1 THEN
						ph=hr+ds-hrd+gs_PostBaseOverhang
					ELSE
						ph=hr+ds-hrd/2+gs_PostBaseOverhang
					ENDIF
				ENDIF

				GROUP "post round curved 360"			!Groups
					addz -gs_PostBaseOverhang
					for i=1 to np step 1
						CYLIND ph,pd/2
						ADDy rb
						ROTz anglepost
						ADDy -rb
					NEXT i
					DEL 3 * np + 1
				ENDGROUP

				GROUP "post rect curved 360"
					addz -gs_PostBaseOverhang
					for i=1 to np step 1
						PRISM_ 5,ph,
							-pw/2,-pth/2,15,
							 pw/2,-pth/2,15,
							 pw/2,pth/2,15,
							-pw/2,pth/2,15,
							-pw/2,-pth/2,-1
						ADDy rb
						ROTz anglepost
						ADDy -rb
					NEXT i
					DEL 3 * np + 1
				ENDGROUP

				IF pt_m = 1 THEN
					PLACEGROUP "post rect curved 360"
				ELSE
					IF hrt_m=1 THEN
						PLACEGROUP "post round curved 360"
					ELSE
						PLACEGROUP subgroup ("post round curved 360", handrailgroupname)
					ENDIF
				ENDIF

				!!! Fill

				MATERIAL gs_fillMat
				resol res

				sideAngle = 2 * asn ((((pt_m = 1) * pw/2 + (pt_m = 2) * pd/2)/2) / rb) + 2 * asn ((fillDistFromFrameSide/2) / rb)

				addz ds
				for i = 1 to np
					prism_ 6, hr - (hrt_m = 1) * hrh - (hrt_m = 2) * hrd - fillDistFromFrameTop,
						0, rb, 900,
						(rb + fillThk / 2) * sin (sideAngle), rb - (rb + fillThk / 2) * cos (sideAngle), 15,
						(rb + fillThk / 2) * sin (anglepost - sideAngle), rb - (rb + fillThk / 2) * cos (anglepost - sideAngle), 3015,
						(rb - fillThk / 2) * sin (anglepost - sideAngle), rb - (rb - fillThk / 2) * cos (anglepost - sideAngle), 15,
						(rb - fillThk / 2) * sin (sideAngle), rb - (rb - fillThk / 2) * cos (sideAngle), 3015,
						(rb + fillThk / 2) * sin (sideAngle), rb - (rb + fillThk / 2) * cos (sideAngle), -1
					addy rb
					rotz anglePost
					addy -rb
				next i
				del 3 * np + 1

				KILLGROUP "post round curved 360"
				KILLGROUP "post rect curved 360"
			ENDIF
			KILLGROUP handrailgroupname
		ENDIF
	ENDIF


	!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! *** STRAIGHT INCLINED *** !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

	IF ABS(ani)>EPS and ptyp_m=1 THEN

		RESOL rescs

		IF rom_m=1 THEN									!Vertical Orientation

			IF rmm_m=2 THEN		!Perpendicular Measurement Extra Values
				hrh=hrh/cos(ani)
				hrd=hrd/cos(ani)
			ENDIF

			IF rmm_m=1 THEN			!!Vertical Measurement
				temp_ds = ds
				temp_hr = hr
				temp_PostBaseOverhang = gs_PostBaseOverhang
				temp_fillDistFromFrameTop = fillDistFromFrameTop
			ELSE					!!Perpendicular Measurement
				temp_ds = dsPerp
				temp_hr = hrPerp
				temp_PostBaseOverhang = gs_PostBaseOverhangPerp
				temp_fillDistFromFrameTop = fillDistFromFrameTopPerp
			ENDIF


			!!3D FEEDBACK AT HOTSPOT EDITING
			IF GLOB_CONTEXT>20 and GLOB_CONTEXT<40 THEN

				ADD XStartPoslra,0,ZStartPoslra

				MATERIAL fmat

				ROTz -90+gs_AngleL		!!! CONNECTING ANGLE
				ROTy -90
				CUTPLANE
				DEL 2

				ADDx templra
				ROTz 90-gs_AngleR
				ROTy 90
				CUTPLANE
				DEL 3

				ROTx 90
				ADDz -fth/2

				PRISM_ 5,fth,
					-XPosL,temp_ds-YPosL,15,
					templra+XPosR,temp_ds+templra*tan(ani)+YPosR,15,
					templra+XPosR,temp_ds+temp_hr+templra*tan(ani)+YPosR,15,
					-XPosL,temp_ds+temp_hr-YPosL,15,
					-XPosL,temp_ds-YPosL,-1
							DEL 2

				CUTEND
				CUTEND

				DEL 1

			ELSE

				ADD XStartPoslra,0,ZStartPoslra

				!!! *** Handrail *** !!! *****************************************

				MATERIAL fmat

				ADDx -(hroL)
				ROTz -90+gs_AngleL		!! CONNECTING ANGLE
				ROTy -90
				CUTPLANE
				DEL 3

				ADDx templra+(hroR)
				ROTz 90-gs_AngleR
				ROTy 90
				CUTPLANE
				DEL 3

				GROUP "handrail round straight inclined"
					ADD -(hroL)-XPosL,0,temp_ds+temp_hr-hrd/2-(hroL)*tan(ani)-YPosL
					ROTy 90-ani
					CONE (templra+hroL+hroR)/cos(ani)+XPosL+XPosR,hrd/2,hrd/2,90+ani,90+ani
					DEL 1
				ENDGROUP

				IF hrt_m=1 THEN
					ROTx 90
					ADDz -hrw/2
						PRISM_ 5,hrw,
						-(hroL)-XPosL,temp_ds+temp_hr-hrh-(hroL)*tan(ani)-YPosL,15,
						templra+(hroR)+XPosR,temp_ds+temp_hr-hrh+(templra+(hroR))*tan(ani)+YPosR,15,
						templra+(hroR)+XPosR,temp_ds+temp_hr+(templra+(hroR))*tan(ani)+YPosR,15,
						-(hroL)-XPosL,temp_ds+temp_hr-(hroL)*tan(ani)-YPosL,15,
						-(hroL)-XPosL,temp_ds+temp_hr-hrh-(hroL)*tan(ani)-YPosL,-1
					DEL 2
				ELSE
					PLACEGROUP "handrail round straight inclined"
				ENDIF

				CUTEND
				CUTEND


				!!! *** Posts *** !!! **********************************************


				MATERIAL pmat

				ADDx -(hroL)-LengthSize*dpost
				ROTz -90+gs_AngleL		!! CONNECTING ANGLE
				ROTy -90
				CUTPLANE
				DEL 3

				ADDx templra+(hroR)+LengthSize*dpost
				ROTz 90-gs_AngleR
				ROTy 90
				CUTPLANE
				DEL 3

				MATERIAL pmat

				IF hrt_m=1 THEN			!Post height calculation
					ph=temp_hr+temp_ds-hrh+temp_PostBaseOverhang
				ELSE
					IF pt_m=1 THEN
						ph=temp_hr+temp_ds-hrd+temp_PostBaseOverhang
					ELSE
						ph=temp_hr+temp_ds-hrd/2+temp_PostBaseOverhang
					ENDIF
				ENDIF

				GROUP "post round straight inclined"			!Groups
					addz -temp_PostBaseOverhang
					for i=1 to np step 1
						cone ph,pd/2,pd/2,90,90-ani
						ADD distpost,0,distpost*tan(ani)
					NEXT i
					DEL np + 1
				ENDGROUP

				GROUP "post rect straight inclined"
					addz -temp_PostBaseOverhang
					ROTx 90
					ADDz -pth/2
					for i=1 to np step 1
						PRISM_ 5,pth,
							-pw/2,0,15,
							 pw/2, 0,15,
							 pw/2, pw/2*tan(ani)+ph,15,
							-pw/2,-pw/2*tan(ani)+ph,15,
							-pw/2,0,-1

						ADD distpost,distpost*tan(ani),0
					next i
					DEL np + 3
				ENDGROUP

				IF pt_m=1 THEN
					IF hrt_m=1 THEN
						PLACEGROUP "post rect straight inclined"
					ELSE
						PLACEGROUP subgroup ("post rect straight inclined","handrail round straight inclined")
					ENDIF
				ELSE
					IF hrt_m=1 THEN
						PLACEGROUP "post round straight inclined"
					ELSE
						PLACEGROUP subgroup ("post round straight inclined","handrail round straight inclined")
					ENDIF
				ENDIF

				CUTEND
				CUTEND


				!!! Fill

				panelLength = distpost - (pt_m = 1) * pw - (pt_m = 2) * pd - 2 * fillDistFromFrameSide
				panelHeight = temp_hr - (hrt_m = 1) * hrh - (hrt_m = 2) * hrd - temp_fillDistFromFrameTop
				sideDist = fillDistFromFrameSide + (pt_m = 1) * pw/2 + (pt_m = 2) * pd/2
				MATERIAL gs_fillMat

				ROTx 90
				ADD  sideDist, sideDist * tan (ani), -fillThk/2
				for i = 1 to np - 1
					PRISM_ 5,fillThk,
						0,				temp_ds,						15,
						panelLength,	temp_ds+panelLength*tan(ani),	15,
						panelLength,	temp_ds+panelHeight +panelLength*tan(ani),15,
						0,				temp_ds+panelHeight,						15,
						0,				temp_ds,						-1
					add distpost, distpost * tan (ani), 0
				next i
				DEL 1 + np

				KILLGROUP "handrail round straight inclined"
				KILLGROUP "post round straight inclined"
				KILLGROUP "post rect straight inclined"

				DEL 1
			ENDIF

		ELSE						!Perpendicular Orientation
									!Measurement is always perpendicular to inclination in this case
			ROTy -ani
			ADDX XStartPoslrah

			!!3D FEEDBACK AT HOTSPOT EDITING
			IF GLOB_CONTEXT>20 and GLOB_CONTEXT<40 THEN

				ROTx 90
				ADDz -fth/2
				!!FRAME
				MATERIAL fmat
				PRISM_ 5,fth,
					0,ds,15,
					templrah,ds,15,
					templrah,ds+hr,15,
					0,ds+hr,15,
					0,ds,-1
				DEL 2

			ELSE		!! 3D DETAILED MODEL

				!!! *** Handrail *** !!! ******************************************
				MATERIAL fmat

				GROUP "handrail round straight perp"			!Groups
					ADD  -hroLDiagonal,0,ds+hr-hrd/2
					ROTy 90
					CYLIND templrah+hroLDiagonal+hroRDiagonal,hrd/2
					DEL 2
				ENDGROUP

				IF hrt_m=1 THEN
					ROTx 90
					ADDz -hrw/2
					PRISM_ 5,hrw,
						-hroLDiagonal,ds+hr-hrh,15,
						templrah+hroRDiagonal,ds+hr-hrh,15,
						templrah+hroRDiagonal,ds+hr,15,
						-hroLDiagonal,ds+hr,15,
						-hroLDiagonal,ds+hr-hrh,-1
					DEL 2
				ELSE
					PLACEGROUP "handrail round straight perp"
				ENDIF


				!!! *** Post *** !!! **********************************************
				MATERIAL pmat

				IF hrt_m=1 THEN			!Post height calculation
					ph=hr+ds-hrh+gs_PostBaseOverhang
				ELSE
					IF pt_m=1 THEN
						ph=hr+ds-hrd+gs_PostBaseOverhang
					ELSE
						ph=hr+ds-hrd/2+gs_PostBaseOverhang
					ENDIF
				ENDIF

				GROUP "post round straight perp"			!Groups
					addz -gs_PostBaseOverhang
					for i=1 to np step 1
						CYLIND ph,pd/2
						ADDx distpost
					NEXT i
					DEL np + 1
				ENDGROUP

				GROUP "post rect straight perp"
					addz -gs_PostBaseOverhang
					for i=1 to np step 1
						PRISM_ 5,ph,
							-pw/2,-pth/2,15,
							 pw/2,-pth/2,15,
							 pw/2,pth/2,15,
							-pw/2,pth/2,15,
							-pw/2,-pth/2,-1
						ADDx distpost
					NEXT i
					DEL np + 1
				ENDGROUP

				IF pt_m=1 THEN
					PLACEGROUP "post rect straight perp"
				ELSE
					IF hrt_m=1 THEN
						PLACEGROUP "post round straight perp"
					ELSE
						PLACEGROUP subgroup ("post round straight perp","handrail round straight perp")
					ENDIF
				ENDIF

				!!! Fill

				MATERIAL gs_fillMat

				panelLength = distpost - (pt_m = 1) * pw - (pt_m = 2) * pd - 2 * fillDistFromFrameSide

				ADD  fillDistFromFrameSide + (pt_m = 1) * pw/2 + (pt_m = 2) * pd/2, 0, ds
				for i = 1 to np-1
					PRISM_ 5, hr - (hrt_m = 1) * hrh - (hrt_m = 2) * hrd - fillDistFromFrameTop,
						0,				-fillThk/2,15,
						panelLength,	-fillThk/2,15,
						panelLength,	 fillThk/2,15,
						0,				 fillThk/2,15,
						0,				-fillThk/2,-1
					addx distpost
				next i
				DEL np

				KILLGROUP "handrail round straight perp"
				KILLGROUP "post round straight perp"
				KILLGROUP "post rect straight perp"

			ENDIF	!! END OF 3D MODEL
			DEL 1		!! END OF DRAG
			DEL 1		!! END OF ROTATION
		ENDIF
	ENDIF




	!!!!!!!!!!!!!!!!!!!!!!!!!!!! *** INCLINED AND CURVED *** !!!!!!!!!!!!!!!!!!!!!!!!!!!!


	IF ABS(ani)>EPS and ptyp_m<>1 THEN

		RESOL rescs

		MATERIAL fmat

		!!3D FEEDBACK AT HOTSPOT EDITING
		IF GLOB_CONTEXT>20 and GLOB_CONTEXT<40 THEN

			!!!!FRAME
			MATERIAL fmat

			alphai=-alphaincl
			deltazi=-deltazincl

			for i=1 to nalphaincl+3 step 1
				put rb*sin(alphai),rb-rb*cos(alphai),ds+deltazi
				alphai=alphai+alphaincl
				deltazi=deltazi+deltazincl
			next i

			TUBEA 5,nalphaincl+3,1+2+16+32,
				-fth/2,0,0,
				fth/2,0,0,
				fth/2,hr,0,
				-fth/2,hr,0,
				-fth/2,0,-1,
				get (nsp)

		ELSE

			RestAngleL=alphahroL-nalphahroL*alphaincl		!!Rest Angle= Overhang Angle- Segments Points Angle
			LOHkerul=(rb*pi*alphahroL)/180					!!Perimeter of Handrail
			deltazLOH=LOHkerul*sin(ani)						!!vertical distance of Handrail
			deltara=deltazLOH-(deltazincl*nalphahroL)		!!vertical step of Rest Angle

			RestAngleR=alphahroR-nalphahroR*alphaincl
			ROHkerul=(rb*pi*alphahroR)/180
			deltazROH=ROHkerul*sin(ani)
			deltaraR=deltazROH-(deltazincl*nalphahroR)


			alphai=-(nalphahroL+1)*alphaincl
			deltazi=-(nalphahroL+1)*deltazincl

			if ABS(hroR)<EPS THEN
				tempStep=1
			ELSE
				tempStep=0
			ENDIF

			PUT rb*sin(-alphahroL-restangleL),rb-rb*cos(-alphahroL-restangleL),ds-deltazLOH-deltara
			PUT rb*sin(-alphahroL),rb-rb*cos(-alphahroL),ds-deltazLOH
			PUT rb*sin(-alphahroL+restangleL),rb-rb*cos(-alphahroL+restangleL),ds-deltazLOH+deltara

			if abs(nalphahroL)>EPS then		!! Left Handrail
				for i=1 to nalphahroL step 1
					PUT rb*sin(-alphahroL+restangleL+i*alphaincl),rb-rb*cos(-alphahroL+restangleL+i*alphaincl),ds-deltazLOH+deltara+i*deltazincl
				next i
			endif

			FOR i=0 to nalphaincl+tempStep step 1		!! Handrail between Posts
				PUT rb*sin(i*alphaincl),rb-rb*cos(i*alphaincl),ds+i*deltazincl
			NEXT i

			IF ABS(hroR)>EPS THEN				!! Right Handrail

				if abs(nalphahroR)>EPS then
					for i=1 to nalphahroR step 1
						PUT rb*sin((nalphaincl+i)*alphaincl),rb-rb*cos((nalphaincl+i)*alphaincl),ds+(nalphaincl+i)*deltazincl
					next i
				endif

				PUT rb*sin((nalphaincl+nalphahroR)*alphaincl+restangleR),rb-rb*cos((nalphaincl+nalphahroR)*alphaincl+restangleR),ds+(nalphaincl+nalphahroR)*deltazincl+deltaraR
				PUT rb*sin((nalphaincl+nalphahroR)*alphaincl+2*restangleR),rb-rb*cos((nalphaincl+nalphahroR)*alphaincl+2*restangleR),ds+(nalphaincl+nalphahroR)*deltazincl+2*deltaraR
			ENDIF

			GROUP "handrail round inclined curved"
				ADDz hr-hrd/2
				tubea 6,nsp/3,1+2+16+32,
					-hrd/2,0,1,
					 0,-1,801,
					 hrd/2,0,1001,
					 0,1,801,
					-hrd/2,0,1001,
					-hrd/2,0,-1,
					use (nsp)
				DEL 1
			ENDGROUP

			GROUP "handrail rect inclined curved"
				ADDz hr-hrh
				tubea 5,nsp/3,1+2+16+32,
					-hrw/2,0,0,
					 hrw/2,0,0,
					 hrw/2,hrh,0,
					-hrw/2,hrh,0,
					-hrw/2,0,-1,
					get (nsp)
				DEL 1
			ENDGROUP

			IF hrt_m=1 THEN
				PLACEGROUP "handrail rect inclined curved"
			ELSE
				PLACEGROUP "handrail round inclined curved"
			ENDIF


			!! *** POST *** !! *****************************************************

			MATERIAL pmat

			IF hrt_m=1 THEN			!Post height calculation
				ph=hr+ds-hrh/2+gs_PostBaseOverhang
			ELSE
				IF pt_m=1 THEN
					ph=hr+ds-hrd/2+gs_PostBaseOverhang
				ELSE
					ph=hr+ds-hrd/2+gs_PostBaseOverhang
				ENDIF
			ENDIF

			GROUP "post round inclined curved"
				ADDz -gs_PostBaseOverhang
					for i=1 to np step 1
					CYLIND ph,pd/2
					ADDy rb
					ROTz anglepost
					ADDy -rb
					ADDz deltazpost
					NEXT i
					DEL 4*np
				DEL 1
			ENDGROUP

			GROUP "post rect inclined curved"
				ADDz -gs_PostBaseOverhang
				for i=1 to np step 1
					PRISM_ 5,ph,
						-pw/2,-pth/2,15,
						 pw/2,-pth/2,15,
						 pw/2,pth/2,15,
						-pw/2,pth/2,15,
						-pw/2,-pth/2,-1
					ADDy rb
					ROTz anglepost
					ADDy -rb
					ADDz deltazpost
				NEXT i
				DEL 4*np
				DEL 1
			ENDGROUP

			IF pt_m=1 THEN
				IF hrt_m=1 THEN
					PLACEGROUP subgroup ("post rect inclined curved","handrail rect inclined curved")
				ELSE
					PLACEGROUP subgroup ("post rect inclined curved","handrail round inclined curved")
				ENDIF
			ELSE
				IF hrt_m=1 THEN
					PLACEGROUP subgroup ("post round inclined curved","handrail rect inclined curved")
				ELSE
					PLACEGROUP subgroup ("post round inclined curved","handrail round inclined curved")
				ENDIF
			ENDIF


			!!! Fill

			MATERIAL gs_fillMat

			!!!Horizontal

			sideAngle = 2 * asn ((((pt_m = 1) * pw/2 + (pt_m = 2) * pd/2)/2) / rb) + 2 * asn ((fillDistFromFrameSide/2) / rb)
			nalphaincl = int((anglepost - sideAngle*2) / (360 / res)) + 1
			alphaincl = (anglepost - sideAngle*2) / nalphaincl

			deltaZFill = ((anglepost - sideAngle*2) / ab) * deltaZ
			deltaZincl = deltaZFill / nalphaincl

			alphai=-alphaincl + sideAngle
			deltazi=-deltazincl
			for i = 1 to nalphaincl + 3
				put rb*sin(alphai),rb-rb*cos(alphai),deltazi
				alphai=alphai+alphaincl
				deltazi=deltazi+deltazincl
			next i

			ADDz ds
			for i = 1 to np - 1
				tubea 5,nsp / 3,1+2+16+32,
					-fillThk/2,0,0,
					 fillThk/2,0,0,
					 fillThk/2,hr - (hrt_m = 1) * hrh - (hrt_m = 2) * hrd - fillDistFromFrameTop,0,
					-fillThk/2,hr - (hrt_m = 1) * hrh - (hrt_m = 2) * hrd - fillDistFromFrameTop,0,
					-fillThk/2,0,-1,
					use (nsp)

				addy rb
				rotz anglepost
				addy - rb
				addz deltazpost
			next i
			del (np - 1) * 4
			del 1

			for i = 1 to nsp
				eee = get (1)
			next i

			KILLGROUP "handrail round inclined curved"
			KILLGROUP "handrail rect inclined curved"
			KILLGROUP "post round inclined curved"
			KILLGROUP "post rect inclined curved"
		ENDIF
	ENDIF
ENDIF


!!DETAILED 3D END!!

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ** HOTSPOTS ** !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

	IF LengthSize = 0 THEN			!!!OVERHANG OF HANDRAIL
		temphroL = -hroL
		temphroR = hroR
		RefPoint1 = 1
		RefPoint2 = -1

		InclRefPoint = -tan(ani)

		temphroLDiag = -hroLDiagonal
		temphroRDiag = hroRDiagonal
	ELSE
		temphroL = hroL
		temphroR = -hroR
		RefPoint1 = -1
		RefPoint2 = 1

		InclRefPoint = tan(ani)

		temphroLDiag = hroLDiagonal
		temphroRDiag = -hroRDiagonal
	ENDIF

	!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! *** STRAIGHT *** !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

	IF cfs=0 THEN
		IF ABS(ani)<EPS and ptyp_m=1 THEN

				!!!LENGHT
				HOTSPOT 0,0,ds+hr,unID,lra,1+256 : unID=unID+1
				HOTSPOT lra,0,ds+hr,unID,lra,2 : unID=unID+1
				HOTSPOT -1,0,ds+hr,unID,lra,3 : unID=unID+1

				IF LengthSize = 0 THEN
					HOTSPOT 0,0,0,unID,lra,1+256 : unID=unID+1
					HOTSPOT lra,0,0,unID,lra,2 : unID=unID+1
					HOTSPOT -1,0,0,unID,lra,3 : unID=unID+1

					HOTSPOT 0,0,ds,unID,lra,1+256 : unID=unID+1
					HOTSPOT lra,0,ds,unID,lra,2 : unID=unID+1
					HOTSPOT -1,0,ds,unID,lra,3 : unID=unID+1
				ENDIF

				!!!DISTANCE FROM FLOOR
				HOTSPOT templra/2+LengthSize*hroL,0,0,unID,ds,1+128 : unID=unID+1
				HOTSPOT templra/2+LengthSize*hroL,0,ds,unID,ds,2 : unID=unID+1
				HOTSPOT templra/2+LengthSize*hroL,0,-1,unID,ds,3 : unID=unID+1

				!!!HEIGHT OF RAILING
				HOTSPOT templra/2+LengthSize*hroL,0,ds,unID,hr,1 : unID=unID+1
				HOTSPOT templra/2+LengthSize*hroL,0,ds+hr,unID,hr,2 : unID=unID+1
				HOTSPOT templra/2+LengthSize*hroL,0,-1,unID,hr,3 : unID=unID+1

				!!!POST BASE OVERHANG
				HOTSPOT LengthSize*hroL,0,0,unID,gs_PostBaseOverhang,1 : unID=unID+1
				HOTSPOT LengthSize*hroL,0,-gs_PostBaseOverhang,unID,gs_PostBaseOverhang,2 : unID=unID+1
				HOTSPOT LengthSize*hroL,0,1,unID,gs_PostBaseOverhang,3 : unID=unID+1

				HOTSPOT lra-LengthSize*hroR,0,0,unID,gs_PostBaseOverhang,1 : unID=unID+1
				HOTSPOT lra-LengthSize*hroR,0,-gs_PostBaseOverhang,unID,gs_PostBaseOverhang,2 : unID=unID+1
				HOTSPOT lra-LengthSize*hroR,0,1,unID,gs_PostBaseOverhang,3 : unID=unID+1

				!!!OVERHANG OF RAILING
				HOTSPOT 0,0,ds+hr,unID,hroL,1+128 : unID=unID+1
				HOTSPOT temphroL,0,ds+hr,unID,hroL,2 : unID=unID+1
				HOTSPOT RefPoint1,0,ds+hr,unID,hroL,3 : unID=unID+1

				HOTSPOT lra,0,ds+hr,unID,hroR,1+128 : unID=unID+1
				HOTSPOT lra+temphroR,0,ds+hr,unID,hroR,2 : unID=unID+1
				HOTSPOT lra+RefPoint2,0,ds+hr,unID,hroR,3 : unID=unID+1

		ENDIF

	!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! *** STRAIGHT CURVED *** !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

		IF ABS(ani)<EPS and ptyp_m<>1 THEN
			IF ab<360 THEN

					IF ptyp_m=3 THEN
					!!!ROTATE
						HOTSPOT 0,rb,ds,unID,ab,6 : unID=unID+1
						HOTSPOT 0,0,ds,unID,ab,4+256 : unID=unID+1
						HOTSPOT rb*sin(ab),rb-rb*cos(ab),ds,unID,ab,5 : unID=unID+1

						HOTSPOT 0,rb,ds+hr,unID,ab,6 : unID=unID+1
						HOTSPOT 0,0,ds+hr,unID,ab,4+256 : unID=unID+1
						HOTSPOT rb*sin(ab),rb-rb*cos(ab),ds+hr,unID,ab,5 : unID=unID+1

					!!!FIX HOTSPOT AT FLOOR
						HOTSPOT 0,0,0,unID : unID=unID+1
						HOTSPOT rb*sin(ab),rb-rb*cos(ab),0,unID : unID=unID+1
					ENDIF

					!!!HEIGHT OF RAILING
						HOTSPOT rb*sin(ab/2),rb-rb*cos(ab/2),ds,unID,hr,1+128 : unID=unID+1
						HOTSPOT rb*sin(ab/2),rb-rb*cos(ab/2),ds+hr,unID,hr,2 : unID=unID+1
						HOTSPOT rb*sin(ab/2),rb-rb*cos(ab/2),-1,unID,ds,3 : unID=unID+1

					!!! DISTANCE FROM FLOOR
						HOTSPOT rb*sin(ab/2),rb-rb*cos(ab/2),0,unID,ds,1 : unID=unID+1
						HOTSPOT rb*sin(ab/2),rb-rb*cos(ab/2),ds,unID,ds,2 : unID=unID+1
						HOTSPOT rb*sin(ab/2),rb-rb*cos(ab/2),-1,unID,ds,3 : unID=unID+1

					!!!POST BASE OVERHANG
						HOTSPOT 0,0,0,unID,gs_PostBaseOverhang,1+128 : unID=unID+1
						HOTSPOT 0,0,-gs_PostBaseOverhang,unID,gs_PostBaseOverhang,2 : unID=unID+1
						HOTSPOT 0,0,1,unID,gs_PostBaseOverhang,3 : unID=unID+1

						HOTSPOT rb*sin(ab),rb-rb*cos(ab),0,unID,gs_PostBaseOverhang,1+128 : unID=unID+1
						HOTSPOT rb*sin(ab),rb-rb*cos(ab),-gs_PostBaseOverhang,unID,gs_PostBaseOverhang,2 : unID=unID+1
						HOTSPOT rb*sin(ab),rb-rb*cos(ab),1,unID,gs_PostBaseOverhang,3 : unID=unID+1

					IF ptyp_m=2 THEN

					!!!HEIGHT OF RAILING
						HOTSPOT 0,0,ds,unID,hr,1+128 : unID=unID+1
						HOTSPOT 0,0,ds+hr,unID,hr,2 : unID=unID+1
						HOTSPOT 0,0,-1,unID,hr,3 : unID=unID+1

						HOTSPOT rb*sin(ab),rb-rb*cos(ab),ds,unID,hr,1+128 : unID=unID+1
						HOTSPOT rb*sin(ab),rb-rb*cos(ab),ds+hr,unID,hr,2 : unID=unID+1
						HOTSPOT rb*sin(ab),rb-rb*cos(ab),-1,unID,hr,3 : unID=unID+1

					!!! DISTANCE FROM FLOOR
						HOTSPOT 0,0,0,unID,ds,1 : unID=unID+1
						HOTSPOT 0,0,ds,unID,ds,2 : unID=unID+1
						HOTSPOT 0,0,-1,unID,ds,3 : unID=unID+1

						HOTSPOT rb*sin(ab),rb-rb*cos(ab),0,unID,ds,1 : unID=unID+1
						HOTSPOT rb*sin(ab),rb-rb*cos(ab),ds,unID,ds,2 : unID=unID+1
						HOTSPOT rb*sin(ab),rb-rb*cos(ab),-1,unID,ds,3 : unID=unID+1
					ENDIF


			ELSE	!!!ANGLE=360


				!!!HOTSPOTS FOR GRAPHICAL EDITING
				!!!HEIGHT

					HOTSPOT 0,0,ds,unID,hr,1 : unID=unID+1
					HOTSPOT 0,0,ds+hr,unID,hr,2 : unID=unID+1
					HOTSPOT 0,0,-1,unID,hr,3 : unID=unID+1

					HOTSPOT rb,rb,ds,unID,hr,1 : unID=unID+1
					HOTSPOT rb,rb,ds+hr,unID,hr,2 : unID=unID+1
					HOTSPOT rb,rb,-1,unID,hr,3 : unID=unID+1

					HOTSPOT 0,2*rb,ds,unID,hr,1 : unID=unID+1
					HOTSPOT 0,2*rb,ds+hr,unID,hr,2 : unID=unID+1
					HOTSPOT 0,2*rb,-1,unID,hr,3 : unID=unID+1

					HOTSPOT -rb,rb,ds,unID,hr,1 : unID=unID+1
					HOTSPOT -rb,rb,ds+hr,unID,hr,2 : unID=unID+1
					HOTSPOT -rb,rb,-1,unID,hr,3 : unID=unID+1

					HOTSPOT 0,0,0,unID,ds,1 : unID=unID+1
					HOTSPOT 0,0,ds,unID,ds,2 : unID=unID+1
					HOTSPOT 0,0,-1,unID,ds,3 : unID=unID+1

					HOTSPOT rb,rb,0,unID,ds,1 : unID=unID+1
					HOTSPOT rb,rb,ds,unID,ds,2 : unID=unID+1
					HOTSPOT rb,rb,-1,unID,ds,3 : unID=unID+1

					HOTSPOT 0,2*rb,0,unID,ds,1 : unID=unID+1
					HOTSPOT 0,2*rb,ds,unID,ds,2 : unID=unID+1
					HOTSPOT 0,2*rb,-1,unID,ds,3 : unID=unID+1

					HOTSPOT -rb,rb,0,unID,ds,1 : unID=unID+1
					HOTSPOT -rb,rb,ds,unID,ds,2 : unID=unID+1
					HOTSPOT -rb,rb,-1,unID,ds,3 : unID=unID+1

					!!!POST BASE OVERHANG
					HOTSPOT 0,0,0,unID,gs_PostBaseOverhang,1+128 : unID=unID+1
					HOTSPOT 0,0,-gs_PostBaseOverhang,unID,gs_PostBaseOverhang,2 : unID=unID+1
					HOTSPOT 0,0,1,unID,gs_PostBaseOverhang,3 : unID=unID+1

					HOTSPOT rb,rb,0,unID,gs_PostBaseOverhang,1+128 : unID=unID+1
					HOTSPOT rb,rb,-gs_PostBaseOverhang,unID,gs_PostBaseOverhang,2 : unID=unID+1
					HOTSPOT rb,rb,1,unID,gs_PostBaseOverhang,3 : unID=unID+1

					HOTSPOT 0,2*rb,0,unID,gs_PostBaseOverhang,1+128 : unID=unID+1
					HOTSPOT 0,2*rb,-gs_PostBaseOverhang,unID,gs_PostBaseOverhang,2 : unID=unID+1
					HOTSPOT 0,2*rb,1,unID,gs_PostBaseOverhang,3 : unID=unID+1

					HOTSPOT -rb,rb,0,unID,gs_PostBaseOverhang,1+128 : unID=unID+1
					HOTSPOT -rb,rb,-gs_PostBaseOverhang,unID,gs_PostBaseOverhang,2 : unID=unID+1
					HOTSPOT -rb,rb,1,unID,gs_PostBaseOverhang,3 : unID=unID+1
			ENDIF
		ENDIF

	!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! *** STRAIGHT INCLINED *** !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

		IF ABS(ani)>EPS and ptyp_m=1 THEN	!!ptyp=Straight
			IF rom_m=1 THEN					!!Vertical Orientation

					IF rmm_m=2 THEN			!!Perpendicular Measurement
						ftw=ftw/cos(ani)
						fbw=fbw/cos(ani)
					ENDIF

					IF rmm_m=1 THEN			!!Vertical Measurement
						temp_ds=ds
						temp_hr=hr
					ELSE					!!Perpendicular Measurement
						temp_ds=dsPerp
						temp_hr=hrPerp
					ENDIF

						!!!	HOTSPOTS FOR GRAPHICAL EDITING
						!!! LENGTH OF RAILING

							HOTSPOT 0,	0,	temp_ds+temp_hr,				unID, lrah, 1+256 : unID=unID+1
							HOTSPOT -1, 0,	temp_ds+temp_hr-tan(ani),		unID, lrah, 3 : unID=unID+1
							HOTSPOT lra,0, 	temp_ds+temp_hr+lra*tan(ani),	unID, lrah, 2 : unID=unID+1

						IF LengthSize = 0 THEN
							HOTSPOT 0,	0,	0,				unID, lrah, 1+256 : unID=unID+1
							HOTSPOT -1, 0,	0-tan(ani),		unID, lrah, 3 : unID=unID+1
							HOTSPOT lra,0, 	0+lra*tan(ani),	unID, lrah, 2 : unID=unID+1

							HOTSPOT 0,	0,	temp_ds,				unID, lrah, 1+256 : unID=unID+1
							HOTSPOT -1, 0,	temp_ds-tan(ani),		unID, lrah, 3 : unID=unID+1
							HOTSPOT lra,0, 	temp_ds+lra*tan(ani),	unID, lrah, 2 : unID=unID+1
						ENDIF

						IF rmm_m=1 THEN
							!!! DISTANCE FROM FLOOR
							HOTSPOT templra/2+LengthSize*hroL,	0,	(templra/2+LengthSize*hroL)*tan(ani),	unID, ds, 1+128 : unID=unID+1
							HOTSPOT templra/2+LengthSize*hroL,	0,	(templra/2+LengthSize*hroL)*tan(ani)-1,	unID, ds, 3 : unID=unID+1
							HOTSPOT templra/2+LengthSize*hroL,	0, 	(templra/2+LengthSize*hroL)*tan(ani)+temp_ds,	unID, ds, 2 : unID=unID+1

							!!! HEIGHT of RAILING
							HOTSPOT templra/2+LengthSize*hroL,	0,	temp_ds+(templra/2+LengthSize*hroL)*tan(ani),	unID, hr, 1+128 : unID=unID+1
							HOTSPOT templra/2+LengthSize*hroL,	0,	temp_ds+(templra/2+LengthSize*hroL)*tan(ani)-1,	unID, hr, 3 : unID=unID+1
							HOTSPOT templra/2+LengthSize*hroL,	0, 	temp_ds+(templra/2+LengthSize*hroL)*tan(ani)+temp_hr,unID, hr, 2 : unID=unID+1

							!!!POST BASE OVERHANG
							HOTSPOT LengthSize*hroL,0,LengthSize*hroL*tan(ani),unID,gs_PostBaseOverhang,1 : unID=unID+1
							HOTSPOT LengthSize*hroL,0,LengthSize*hroL*tan(ani)-gs_PostBaseOverhang,unID,gs_PostBaseOverhang,2 : unID=unID+1
							HOTSPOT LengthSize*hroL,0,LengthSize*hroL*tan(ani)+1,unID,gs_PostBaseOverhang,3 : unID=unID+1

							HOTSPOT lra-LengthSize*hroR,0,LengthSize*hroL*tan(ani)+templra*tan(ani),unID,gs_PostBaseOverhang,1 : unID=unID+1
							HOTSPOT lra-LengthSize*hroR,0,LengthSize*hroL*tan(ani)+templra*tan(ani)-gs_PostBaseOverhang,unID,gs_PostBaseOverhang,2 : unID=unID+1
							HOTSPOT lra-LengthSize*hroR,0,LengthSize*hroL*tan(ani)+templra*tan(ani)+1,unID,gs_PostBaseOverhang,3 : unID=unID+1

						ELSE
							!!! DISTANCE FROM FLOOR
							HOTSPOT templra/2+LengthSize*hroL,	0,	(templra/2+LengthSize*hroL)*tan(ani),	unID, dsPerp, 1+128, ds : unID=unID+1
							HOTSPOT templra/2+LengthSize*hroL,	0,	(templra/2+LengthSize*hroL)*tan(ani)-1,	unID, dsPerp, 3, ds : unID=unID+1
							HOTSPOT templra/2+LengthSize*hroL,	0, 	(templra/2+LengthSize*hroL)*tan(ani)+temp_ds,	unID, dsPerp, 2, ds : unID=unID+1

							!!! HEIGHT of RAILING
							HOTSPOT templra/2+LengthSize*hroL,	0,	temp_ds+(templra/2+LengthSize*hroL)*tan(ani),	unID, hrPerp, 1+128, hr : unID=unID+1
							HOTSPOT templra/2+LengthSize*hroL,	0,	temp_ds+(templra/2+LengthSize*hroL)*tan(ani)-1,	unID, hrPerp, 3, hr  : unID=unID+1
							HOTSPOT templra/2+LengthSize*hroL,	0, 	temp_ds+(templra/2+LengthSize*hroL)*tan(ani)+temp_hr,unID, hrPerp, 2, hr  : unID=unID+1

							!!!POST BASE OVERHANG
							HOTSPOT LengthSize*hroL,0,LengthSize*hroL*tan(ani),unID,gs_PostBaseOverhangPerp,1,gs_PostBaseOverhang : unID=unID+1
							HOTSPOT LengthSize*hroL,0,LengthSize*hroL*tan(ani)-temp_PostBaseOverhang,unID,gs_PostBaseOverhangPerp,2,gs_PostBaseOverhang : unID=unID+1
							HOTSPOT LengthSize*hroL,0,LengthSize*hroL*tan(ani)+1,unID,gs_PostBaseOverhangPerp,3,gs_PostBaseOverhang : unID=unID+1

							HOTSPOT lra-LengthSize*hroR,0,LengthSize*hroL*tan(ani)+templra*tan(ani),unID,gs_PostBaseOverhangPerp,1,gs_PostBaseOverhang : unID=unID+1
							HOTSPOT lra-LengthSize*hroR,0,LengthSize*hroL*tan(ani)+templra*tan(ani)-temp_PostBaseOverhang,unID,gs_PostBaseOverhangPerp,2,gs_PostBaseOverhang : unID=unID+1
							HOTSPOT lra-LengthSize*hroR,0,LengthSize*hroL*tan(ani)+templra*tan(ani)+1,unID,gs_PostBaseOverhangPerp,3,gs_PostBaseOverhang : unID=unID+1

						ENDIF

							!!!OVERHANG OF RAILING
							HOTSPOT 0,0,	temp_ds+temp_hr,				unID,hroLDiagonal,1+128,hroL : unID=unID+1
							HOTSPOT temphroL,0,	temp_ds+temp_hr+temphroL*tan(ani),	unID,hroLDiagonal,2	,hroL	: unID=unID+1
							HOTSPOT RefPoint1,0,temp_ds+temp_hr-InclRefPoint,		unID,hroLDiagonal,3	,hroL	: unID=unID+1

							HOTSPOT lra,0,		temp_ds+temp_hr+lra*tan(ani),				unID,hroRDiagonal,1+128,hroR : unID=unID+1
							HOTSPOT lra+temphroR,0,	temp_ds+temp_hr+lra*tan(ani)+temphroR*tan(ani),	unID,hroRDiagonal,2	,hroR	: unID=unID+1
							HOTSPOT lra+RefPoint2,0,	temp_ds+temp_hr+lra*tan(ani)+InclRefPoint,		unID,hroRDiagonal,3	,hroR	: unID=unID+1


			ELSE			!Perpendicular Orientation
							!Measurement is always perpendicular to inclination in this case

				ROTy -ani

						!!! LENGTH OF RAILING

							HOTSPOT 0,0,ds+hr,unID,lrah,1+256 : unID=unID+1
							HOTSPOT lrah,0,ds+hr,unID,lrah,2 	: unID=unID+1
							HOTSPOT -1,0,ds+hr,unID,lrah,3 	: unID=unID+1

						IF LengthSize = 0 THEN
							HOTSPOT 0,0,0,unID,lrah,1+256 : unID=unID+1
							HOTSPOT lrah,0,0,unID,lrah,2 	: unID=unID+1
							HOTSPOT -1,0,0,unID,lrah,3 	: unID=unID+1

							HOTSPOT 0,0,ds,unID,lrah,1+256 : unID=unID+1
							HOTSPOT lrah,0,ds,unID,lrah,2 	: unID=unID+1
							HOTSPOT -1,0,ds,unID,lrah,3 	: unID=unID+1
						ENDIF


						!!!DISTANCE FROM FLOOR
						HOTSPOT templrah/2+LengthSize*hroLDiagonal,0,0,unID,ds,1+128 : unID=unID+1
						HOTSPOT templrah/2+LengthSize*hroLDiagonal,0,ds,unID,ds,2 : unID=unID+1
						HOTSPOT templrah/2+LengthSize*hroLDiagonal,0,-1,unID,ds,3 : unID=unID+1

						!!! HEIGHT of RAILING
						HOTSPOT templrah/2+LengthSize*hroLDiagonal,0,ds,unID,hr,1 : unID=unID+1
						HOTSPOT templrah/2+LengthSize*hroLDiagonal,0,ds+hr,unID,hr,2 : unID=unID+1
						HOTSPOT templrah/2+LengthSize*hroLDiagonal,0,-1,unID,hr,3 : unID=unID+1

						!!!POST BASE OVERHANG
						HOTSPOT LengthSize*hroLDiagonal,0,0,unID,gs_PostBaseOverhang,1 : unID=unID+1
						HOTSPOT LengthSize*hroLDiagonal,0,-gs_PostBaseOverhang,unID,gs_PostBaseOverhang,2 : unID=unID+1
						HOTSPOT LengthSize*hroLDiagonal,0,1,unID,gs_PostBaseOverhang,3 : unID=unID+1

						HOTSPOT LengthSize*hroLDiagonal+templrah,0,0,unID,gs_PostBaseOverhang,1 : unID=unID+1
						HOTSPOT LengthSize*hroLDiagonal+templrah,0,-gs_PostBaseOverhang,unID,gs_PostBaseOverhang,2 : unID=unID+1
						HOTSPOT LengthSize*hroLDiagonal+templrah,0,1,unID,gs_PostBaseOverhang,3 : unID=unID+1

						!!!OVERHANG OF RAILING
						HOTSPOT lrah,0,ds+hr,unID,hroRDiagonal,1+128 , hroR : unID=unID+1
						HOTSPOT lrah+temphroRDiag,0,ds+hr,unID,hroRDiagonal,2 , hroR 	: unID=unID+1
						HOTSPOT lrah+RefPoint2,0,ds+hr,unID,hroRDiagonal,3 , hroR 	: unID=unID+1

						HOTSPOT 0,0,ds+hr,unID,hroLDiagonal,1+128 , hroL: unID=unID+1
						HOTSPOT temphroLDiag,0,ds+hr,unID,hroLDiagonal,2, hroL 	: unID=unID+1
						HOTSPOT RefPoint1,0,ds+hr,unID,hroLDiagonal,3, hroL 	: unID=unID+1

				DEL 1

			ENDIF

		ENDIF

!!!!!!!!!!!!!!!!!!!!!!!!!!!! *** INCLINED AND CURVED *** !!!!!!!!!!!!!!!!!!!!!!!!!!!!

		IF ABS(ani)>EPS and ptyp_m<>1 THEN

			!!!HOTSPOTS FOR GRAPHICAL EDITING

			IF ptyp_m=3 THEN
				!!!ROTATE
				HOTSPOT 0,rb,ds+lra*sin(ani),unID,ab,6 : unID=unID+1
				HOTSPOT 0,0,ds+lra*sin(ani),unID,ab,4+128 : unID=unID+1
				HOTSPOT rb*sin(ab),rb-rb*cos(ab),ds+lra*sin(ani),unID,ab,5 : unID=unID+1

				HOTSPOT 0,rb,ds+hr+lra*sin(ani),unID,ab,6 : unID=unID+1
				HOTSPOT 0,0,ds+hr+lra*sin(ani),unID,ab,4+128 : unID=unID+1
				HOTSPOT rb*sin(ab),rb-rb*cos(ab),ds+hr+lra*sin(ani),unID,ab,5 : unID=unID+1
			ENDIF

				!!!HEIGHT OF RAILING
				HOTSPOT 0,0,ds,unID,hr,1 : unID=unID+1
				HOTSPOT 0,0,ds+hr,unID,hr,2 : unID=unID+1
				HOTSPOT 0,0,-1,unID,hr,3 : unID=unID+1

				HOTSPOT rb*sin(ab/2),rb-rb*cos(ab/2),ds+(lra/2)*sin(ani),unID,hr,1 : unID=unID+1
				HOTSPOT rb*sin(ab/2),rb-rb*cos(ab/2),ds+hr+(lra/2)*sin(ani),unID,hr,2 : unID=unID+1
				HOTSPOT rb*sin(ab/2),rb-rb*cos(ab/2),-1,unID,hr,3 : unID=unID+1

				!!!DISTANCE FROM FLOOR
				HOTSPOT rb*sin(ab/2),rb-rb*cos(ab/2),(lra/2)*sin(ani),unID,ds,1 : unID=unID+1
				HOTSPOT rb*sin(ab/2),rb-rb*cos(ab/2),ds+(lra/2)*sin(ani),unID,ds,2 : unID=unID+1
				HOTSPOT rb*sin(ab/2),rb-rb*cos(ab/2),-1,unID,ds,3 : unID=unID+1

				HOTSPOT 0,0,0,unID,ds,1 : unID=unID+1
				HOTSPOT 0,0,ds,unID,ds,2 : unID=unID+1
				HOTSPOT 0,0,-1,unID,ds,3 : unID=unID+1

				!!!FIX HOTSPOT AT FLOOR
				HOTSPOT rb*sin(ab),rb-rb*cos(ab),0+lra*sin(ani), unID : unID=unID+1

			IF ptyp_m=2 THEN
				!!!HEIGHT OF RAILING
				HOTSPOT rb*sin(ab),rb-rb*cos(ab),ds+lra*sin(ani),unID,hr,1 : unID=unID+1
				HOTSPOT rb*sin(ab),rb-rb*cos(ab),ds+hr+lra*sin(ani),unID,hr,2 : unID=unID+1
				HOTSPOT rb*sin(ab),rb-rb*cos(ab),-1,unID,hr,3 : unID=unID+1

				!!!DISTANCE FROM FLOOR
				HOTSPOT rb*sin(ab),rb-rb*cos(ab),lra*sin(ani),unID,ds,1+128 : unID=unID+1
				HOTSPOT rb*sin(ab),rb-rb*cos(ab),ds+lra*sin(ani),unID,ds,2 : unID=unID+1
				HOTSPOT rb*sin(ab),rb-rb*cos(ab),-1,unID,ds,3 : unID=unID+1
			ENDIF

				!!!POST BASE OVERHANG
				HOTSPOT 0,0,0,unID,gs_PostBaseOverhang,1+128 : unID=unID+1
				HOTSPOT 0,0,-gs_PostBaseOverhang,unID,gs_PostBaseOverhang,2 : unID=unID+1
				HOTSPOT 0,0,1,unID,gs_PostBaseOverhang,3 : unID=unID+1

				HOTSPOT rb*sin(ab/2),rb-rb*cos(ab/2),(lra/2)*sin(ani),unID,gs_PostBaseOverhang,1+128 : unID=unID+1
				HOTSPOT rb*sin(ab/2),rb-rb*cos(ab/2),(lra/2)*sin(ani)-gs_PostBaseOverhang,unID,gs_PostBaseOverhang,2 : unID=unID+1
				HOTSPOT rb*sin(ab/2),rb-rb*cos(ab/2),(lra/2)*sin(ani)+1,unID,gs_PostBaseOverhang,3 : unID=unID+1

				HOTSPOT rb*sin(ab),rb-rb*cos(ab),lra*sin(ani),unID,gs_PostBaseOverhang,1+128 : unID=unID+1
				HOTSPOT rb*sin(ab),rb-rb*cos(ab),lra*sin(ani)-gs_PostBaseOverhang,unID,gs_PostBaseOverhang,2 : unID=unID+1
				HOTSPOT rb*sin(ab),rb-rb*cos(ab),lra*sin(ani)+1,unID,gs_PostBaseOverhang,3 : unID=unID+1
		ENDIF

	ENDIF
end
]]>
</Script_3D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_2D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
call "railSymbol2D_m" parameters all	bEnable2DPosts		= 1,
										iHandRailStyle		= hrt_m,
										handRailDiameter	= hrd,
										handRailWidth		= hrw,
										bBreakRailLine		= 0,
										bPostNoCalculation	= 0
]]>
</Script_2D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_1D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
!!Rail Post with Balusters

EPS=0.0001

IF pt_m=1 THEN
	dpost=pw/2
ELSE
	dpost=pd/2
ENDIF


!!!!!! Railing Length

IF LengthSize = 1 THEN
	lra2=(lra - (hroL + hroR))
	lrah2=(lrah - (hroLDiagonal + hroRDiagonal))
	templra=lra2
	templrah=lrah2
	XStartPoslra=hrol
	ZStartPoslra=hrol*tan(ani)
	XStartPoslrah=hroLDiagonal
ELSE
	templra=lra
	templrah=lrah
	XStartPoslra=0
	ZStartPoslra=0
	XStartPoslrah=0
ENDIF



!!PARAMETER INPUT CALCULATION!!

IF ptyp_m=1 THEN
	HIDEPARAMETER "ab"
	HIDEPARAMETER "rb"
	HIDEPARAMETER "res"
ENDIF

IF ptyp_m=2 THEN
	IF ABS(rb)>EPS THEN
		PARAMETERS ab=(lra*180)/(rb*pi)
		LOCK "ab"
	ENDIF
ENDIF

IF ptyp_m=3 THEN
	PARAMETERS lra=(rb*pi*ab)/180
	LOCK "lra"
ENDIF


!!POST AND BOARD CALCULATION!!
!!POST SPACING CALCULATION FOR STRAIGHT AND CURVED RAILS

IF rom_m=2 AND rmm_m=2 THEN
	distpost=templrah/(np-1)
ELSE
	distpost=templra/(np-1)
ENDIF

IF ABS(ab-360)<EPS and ABS(ani)<EPS THEN
	anglepost=ab/np
ELSE
	anglepost=ab/(np-1)
ENDIF


!!BOARD SPACING CALCULATION FOR STRAIGHT AND CURVED RAILS

IF pt_m=1 THEN
!!		dpost=pw/2
	IF ABS(rb)>EPS THEN		!!rb<>0
		dpostangle=180*(pw/2)/(rb*pi)
	ENDIF
ELSE
!!		dpost=pd/2
	IF ABS(rb)>EPS THEN		!!rb<>0
		dpostangle=180*(pd/2)/(rb*pi)
	ENDIF
ENDIF



!!ADDITIONAL CALCULATION FOR CURVED AND INCLINED RAILS!!

IF ptyp_m<>1 and ABS(ab)>EPS or ABS(rb)>EPS THEN
	!!! *** General data

	alphahroL=(hroL*180)/(rb*pi) 			!Overhung angle
	alphahroR=(hroR*180)/(rb*pi) 			!Overhung angle
	deltaz=templra*sin(ani)					!Total height to rise

	!!! *** For segment points
	nalphaincl=int(ab/(360/res))+1		!number of segment points without overhung
	alphaincl=ab/nalphaincl  			!angle between segment points

	nalphahroL=int(alphahroL/alphaincl)	!number of segment points at handrail overhung
	nalphahroR=int(alphahroR/alphaincl)	!number of segment points at handrail overhung
	deltazincl=deltaz/nalphaincl 		!vertical step between segment points

	!!! *** For posts
	deltazpost=deltaz/(np-1)			!vertical step between posts

	!!! *** For Boards
ENDIF
]]>
</Script_1D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_PR SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_PR>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_UI SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_UI>

<Comment SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Comment>

<Picture MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="0" length_in_bytes="2578" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D49484452000000800000
	00600803000000E2A48A7B0000006C504C5445FFFFFFA0A19EAEB0AE40403EC0
	C1BFBFC0BFE0E0DF30312F6F70707474738C8D8AABACAAC3C3C35B5B5B1B1C1B
	939492BBBCBBD4D4D44B4C493D3D3C8E908CE3E3E390918D2323236B6C6A0000
	0081827E7E807C6F706D70716E3F403ECFD0CE61625FD0D0CF8F90909FA09D50
	C20AEA0000095749444154785EEC94C94EE4401044B94664ED9BB76E98E5FFFF
	11D294463D185B33A83117C2075BBED4D3CB8C7A78C977BE53BF18203A372430
	C4AF02E1D4E3866429E1748E717A133758781572B2812D471A29E6048E20B069
	98F6E2F22AE4F3BB60028F38A67C8290CA39191592F741866CE9CD27098944AE
	9DC508C734B8DDC10C76F4E1DE422214E0363506AF42768CF4EA9A783F038FD1
	BC53C0DF4C96F64848BE4B75E37C490158402F21DECCD933B16FAA47CA6E3AAE
	6EFC380092B09033800B404A50BD0A80BF488D60DCDF54B70AF900C713AF49C8
	C2D25A6985CBA21823BC28C03635E0873B18CCA442FE675323A0002CFA14FD28
	A535023A020FFE92606ABD355190EA43ADC11F573759C8BFDC653FCB2B00CB0A
	D021480580705E8580F4D237351249456FAABB7F97F54D3DDA013DB7357D2903
	5B99175914806C4DE580175CAE508E7E716CAA6BAD9BDC6E75F30831757F09F5
	70F649AC815F2CE4CF8FD6FFCFD61764E37DD8545768118D1C5777B06FA7F2CC
	981528B78D2BB167B99779A292935B3398DCD276A6AFFFFF8F4F04764939C999
	513B93982AC72016582CA70E40DF93F91729A53257112E464AB82C88EBDB8AF2
	6B29E5BA1546D6150ED9A611F2EFD65D3F00784E1789308EAF9F25490352478E
	9F04309F9704605B2C560D33CF9590D74FB691755FCEF740968F0C94F93C4983
	FA232865AE1A98A40181E283B77575DB10F20AD47AA5B7B7F98FFD9A5F3B211D
	45B2F3063C0879FE5482EBAF697F4CFE1A2E302D767FAC97B5DA065AE86FD634
	FFD934B06E7CBCA514D6ED71A7C23CAF73FA844F8DA80980670E0D4C6D354A83
	CB0A32D017B5CFE66563E094C8C75C9F92A4D4D712BEFDDA868522EC1074D0B9
	6AA02C1D9817A232606721DEA3106517225BEB218864DEA4BAAD95F3CF411604
	F54DEC48F3324B84AA89D471A7012EAB0CC8C9289AE50ED80A607D4BDB860180
	498891E146E89DB0332376E882E3D2D49A1C83365CA5CEFD860D711E31700B0D
	10879EB9A80F8898FE540D94EE82DD46350EC1EC8E26E2870CBCA7CA8097BEB5
	C3608034438BF03EB0CE6717615844253858451C900284360C4598321C331487
	56969922CCDD99197441D6067EDC89972E087522B654D1605C827E1872E10CBC
	ECFA40B0ED9D30CE2F19DE6B2049CB00638C0CDC1E01883EE08A0A0D280D0527
	07DF6460DD3440D6F75B7271178461C0FC021197E3B80F782DE3B45D035A685F
	B85EC440A4577B1F1B64820698884736BC4D9DC804B0E7701E28536AEA1082DE
	096503B4766C1E9FA181784636541650EB40F75CCB823BBB817D2097A3D70CFB
	08AD61749DC40BEE44931F339036061A5C18C45CA1A8A7A4CF1D45B8404F5741
	B5A19740F28F5250348F6D78A91A107530F8EE1A6E1B004386695ED21B895A00
	802ECEC40DD7294AD0DA24C62EA80082686437FD5CEA81549B1E1139E11A6918
	2E30F1DDB3A03F915E03067820E58DCE84CC9246B6E4544930AE63632095DB42
	4DEA1D1324C2630A647B063060A0CD844182DB9A9D35BA70E83A5CD07509B1E6
	2E08C5E4D0022A03B73103E16AB502CE84F6321319EA09431BDE071039D885A8
	343459502F008A6618C7C7A9FA188969636031CC19009C54CF58EF84FAA07F9F
	0C6D227271A82ADE38BED3073C3E7A8CEC3A2160C12B123C0B7A3CA83A4D03D6
	EAEFA0C10D8F5D709BA2831B90F71A982C67052524F6FC41033D29E882FF4E4E
	8D451D0860A48123DD16435986554DD9C6801D5C1A08D57BB6EC430AD0CFE20C
	701DCCF4B6E13628814AEA980D40760D9C8CA2005705E5BA63C010F26833A170
	F589841A188BB08F7ED2BB1FA81C228B00F96AA701AE26587C1B5D3059130DD9
	7106CEC379204A603196CE713352754C6EF7A9F8B81026529264BA6D26D94946
	A06CC8C06D6843F346149C266A603E4516F1AC09D1885C0380513129287B3B59
	3810C6F6057CA30F308C546754DABAAD458D7B1D9A2F7C2C07E1C06FA9C1C081
	0A60BDC05FC67DE077A206180480B588297281794823AE4C6E4318CD82085FBF
	199D4CA1DA87028966C8807B1011A3A0A855821CDF4366AFD400801471A457A5
	654126337A4C1793A1065A6787ACC303C90521010DCC58A304C404EB2DB4280B
	DC494D3BEBB734A00431A9868277511317592017FB34D4AB6CEE1C6B53312179
	1AA26A203D2CC17BBA9E4F1EF690A57DC4A30BC82660DE1E9C5132CD65E53172
	BB17382D264BF986E1CD08F014A41DAC8DF98718BEE145B89B8A0D004884E5E8
	0346C6A85AEDAD00E6E340038B1A370C96A118B71269C838CC4DA57E2F48193C
	A15EC786AB6F00E0D0A12C186BC0685B38F0AC922A0BDCE971CF601845D6E6F0
	4868C0B2B0B53B222E0306DE3596AB5EF25AEF841C70F65199566FC5A196386A
	640177EBD1F27718389E4CD12AB553C17DC001E9C1FD4CE8B92925501BFBDBB1
	859625C2711A2EE22D41A2DF0DB9E6C54E7083A3DF8EA97D18EBD35D600A4198
	96D907C69D90DE65B409410B37F2D8478C74370FD037A1F63A42BD5C26034857
	EBDDB8320D1FF68163C5EDB1AA60765197C994467D28D58116994DB095A4C180
	68F139AE358E411F3801C9CC4C992747C6802351C4482451AB15B79987E048D9
	D5AF383A8921F27B24C2EDF5D3CF1FA7E5802C1CED769C2D43BE9417A581B81D
	6B82C0FE76BC9FA0E17D20DB00C0EDB52D3C3DBD9F4EF8936C2EB2357B5D1B96
	9170551FF0A689BAC677657F3B966541C497EADBC7F3C0EDE9D3EAEBEF57F501
	96A65F0D220D8946CBA04E141E9105F20C77AC6FFF1BDC8ECBF5F8FAD58B8DD1
	F4FAF4FCE374000CC4B1CB02F1E20E659432BD1603DD8114B2D1543C18CB3F33
	F0E1BFED9E7EFF384D0724B3FC52C3AD8A102E8E04644B2D0DC989178CD6FDC6
	547CFB57063E82FDF9FCD772AAD7E962562988BB24220B26E574BB5367A5E1C0
	865F03588D0C7C699B1F9B6500D5C534957916E85344417E70331A327020035F
	6E383E3921EFA74358B75C0E2C41544608A2718C6C38D2C0E7C6B177CCD3EFD3
	E99057F9B6F5078EB6CC825CFEDF8EB9A5200C035134C117495AD2B1B6C8542B
	DAFDEFD18C3F52C81DB042FAD3B3807073E641C8B824804501BC4B0632C814EC
	E377A7CAF5C540AFFF963FDDF5943D2F385002063FAF3619F808A99290A96741
	9E642FFD4D689A3E1A5402D4038494CD0A531D520EE59B4E472EE47F2A81CD8E
	4D47E491019DC83B60005C08360D2F33D0F83AA0DD4DA809F5C4FFA31B18F201
	3A062558080D2800D7850CDCE0E2281240FADAE4089C0F7064D9840588650C60
	2637A2006D9100D444C20656A4E31206F4B96D1F664DAC77B3B9DDD878039BFE
	9AC81CF72BDE0000000049454E44AE426082
	]]>
</Picture>

<CalledMacros SectVersion="2" SectionFlags="0" SubIdent="0">
	<Macro>
		<MName><![CDATA["railSymbol2D_m"]]></MName>
		<MainGUID>C5C904E6-1706-4CD1-BC8D-6C294B5B40F7</MainGUID>
	</Macro>
</CalledMacros>

<Copyright SectVersion="1" SectionFlags="0" SubIdent="0">
	<Author>GRAPHISOFT</Author>
	<License>
		<Type>CC BY-ND</Type>
		<Version>3.0</Version>
	</License>
</Copyright>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_FWM SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_FWM>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_BWM SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_BWM>

<Keywords SectVersion="1" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Keywords>

</Symbol>
