<?xml version="1.0" encoding="UTF-8"?>
<Symbol IsArchivable="true" IsPlaceable="false" MainGUID="C5C904E6-1706-4CD1-BC8D-6C294B5B40F7" MigrationValue="Normal" Owner="1196638531" Signature="1196644685" Version="43">
<Ancestry SectVersion="1" SectionFlags="0" SubIdent="0" Template="false">
	<MainGUID>F938E33A-329D-4A36-BE3E-85E126820996</MainGUID>
	<MainGUID>103E8D2C-8230-42E1-9597-46F84CCE28C0</MainGUID>
	<MainGUID>B2970E4C-8680-4061-8670-2F4B638F3953</MainGUID>
</Ancestry>

<ParamSection SectVersion="22" SectionFlags="0" SubIdent="0">
	<ParamSectHeader>
		<AutoHotspots>false</AutoHotspots>
		<StatBits>
			<STBit_FixSize/>
		</StatBits>
		<WDLeftFrame>0</WDLeftFrame>
		<WDRightFrame>0</WDRightFrame>
		<WDTopFrame>0</WDTopFrame>
		<WDBotFrame>0</WDBotFrame>
		<LayFlags>65535</LayFlags>
		<WDMirrorThickness>0</WDMirrorThickness>
		<WDWallInset>0</WDWallInset>
	</ParamSectHeader>
	<Parameters>
		<Length Name="A">
			<Description><![CDATA["Dimension 1"]]></Description>
			<Fix/>
			<Value>1.8</Value>
		</Length>
		<Length Name="B">
			<Description><![CDATA["Dimension 2"]]></Description>
			<Fix/>
			<Value>0.05</Value>
		</Length>
		<Length Name="ZZYZX">
			<Description><![CDATA["Height"]]></Description>
			<Fix/>
			<Value>0.9</Value>
		</Length>
		<Boolean Name="AC_show2DHotspotsIn3D">
			<Description><![CDATA["Show 2D Hotspots in 3D"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Length Name="ac_bottomlevel">
			<Description><![CDATA["Bottom Level"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Length>
		<Length Name="ac_toplevel">
			<Description><![CDATA["Top Level"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Boolean Name="cfs">
			<Description><![CDATA["Called as Macro from Stair"]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Boolean>

		<!-- RailBalust_sp0: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="RailBalust_sp0">
			<Description><![CDATA["General Dimensions"]]></Description>
		</Title>
		<Integer Name="ptyp_m">
			<Description><![CDATA["Rail and Parameter Input Type"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Angle Name="ani">
			<Description><![CDATA["Inclination Angle"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>30</Value>
		</Angle>
		<Integer Name="rom_m">
			<Description><![CDATA["Rail Orientation Method"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Integer Name="rmm_m">
			<Description><![CDATA["Rail Measurement Method"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Boolean Name="LengthSize">
			<Description><![CDATA["'A' Size=Handrail Length"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Length Name="lra">
			<Description><![CDATA["Horizontal Length of Railing"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1.5</Value>
		</Length>
		<Length Name="lrah">
			<Description><![CDATA["Length of Railing"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1.5</Value>
		</Length>
		<Length Name="hr">
			<Description><![CDATA["Height of Railing"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.75</Value>
		</Length>
		<Length Name="hrPerp">
			<Description><![CDATA["Height of Railing"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.750000011423</Value>
		</Length>
		<Angle Name="ab">
			<Description><![CDATA["Angle of Bending"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>90</Value>
		</Angle>
		<Length Name="rb">
			<Description><![CDATA["Radius of Bending"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Length>
		<Length Name="ds">
			<Description><![CDATA["Distance from Slab/Stair"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.15</Value>
		</Length>
		<Length Name="dsPerp">
			<Description><![CDATA["Distance from Slab/Stair"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0.150000002285</Value>
		</Length>
		<Angle Name="gs_AngleL">
			<Description><![CDATA["Left End Cutting Angle"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>90</Value>
		</Angle>
		<Angle Name="gs_AngleR">
			<Description><![CDATA["Right End Cutting Angle"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>90</Value>
		</Angle>

		<!-- RailBalust_sp1: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="RailBalust_sp1">
			<Description><![CDATA["Structural Dimensions"]]></Description>
		</Title>
		<Integer Name="iHandRailStyle">
			<Description><![CDATA["Handrail Style"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Length Name="handRailDiameter">
			<Description><![CDATA["Handrail Diameter"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Length Name="handRailWidth">
			<Description><![CDATA["Handrail Width"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.05</Value>
		</Length>
		<Length Name="hro">
			<Description><![CDATA["Handrail Overhang"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="hroL">
			<Description><![CDATA["Handrail Overhang - Left"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.2</Value>
		</Length>
		<Length Name="hroR">
			<Description><![CDATA["Handrail Overhang - Right"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.2</Value>
		</Length>
		<Length Name="hroLDiagonal">
			<Description><![CDATA["Handrail Overhang - Left"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="hroRDiagonal">
			<Description><![CDATA["Handrail Overhang - Right"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Integer Name="pt_m">
			<Description><![CDATA["Post Style"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Integer Name="np">
			<Description><![CDATA["No. of Posts"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>3</Value>
		</Integer>
		<Length Name="pd">
			<Description><![CDATA["Post Diameter"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.04</Value>
		</Length>
		<Length Name="pw">
			<Description><![CDATA["Post Width"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.04</Value>
		</Length>
		<Length Name="pth">
			<Description><![CDATA["Post Thickness"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.1</Value>
		</Length>
		<Integer Name="pit_m">
			<Description><![CDATA["Parameter Input Type (Wooden Balustrade)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>2</Value>
		</Integer>
		<Integer Name="nbt">
			<Description><![CDATA["No. of Balusters (Wooden Balustrade)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>3</Value>
		</Integer>
		<Length Name="dp">
			<Description><![CDATA["Preferred Distance (Wooden Balustrade)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.2</Value>
		</Length>

		<!-- rails2D_m_sp0: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="rails2D_m_sp0">
			<Description><![CDATA["2D Representation"]]></Description>
		</Title>
		<PenColor Name="gs_cont_pen">
			<Description><![CDATA["Contour Pen"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>2</Value>
		</PenColor>
		<FillPattern Name="gs_fill_type">
			<Description><![CDATA["Fill Type"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>65</Value>
		</FillPattern>
		<PenColor Name="gs_fill_pen">
			<Description><![CDATA["Fill Pen"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>91</Value>
		</PenColor>
		<PenColor Name="gs_back_pen">
			<Description><![CDATA["Fill Background Pen"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>91</Value>
		</PenColor>
		<Boolean Name="bPostSymbol">
			<Description><![CDATA["Post Symbol"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="sa">
			<Description><![CDATA["Show Axis"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<LineType Name="al">
			<Description><![CDATA["Axis Line Type"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>4</Value>
		</LineType>
		<PenColor Name="gs_RailAxisPen">
			<Description><![CDATA["Axis Line Pen"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>16</Value>
		</PenColor>
		<Integer Name="iPostSymbolType">
			<Description><![CDATA["Post Symbol Type"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<LineType Name="postLineType">
			<Description><![CDATA["Post Line Type"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</LineType>
		<PenColor Name="postPen">
			<Description><![CDATA["Post Line Pen"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>3</Value>
		</PenColor>
		<Boolean Name="bBreakRailLine">
			<Description><![CDATA["Break Rail Line"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Angle Name="breakLineAngle">
			<Description><![CDATA["Break Line Angle"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>30</Value>
		</Angle>
		<Length Name="breakLineDist">
			<Description><![CDATA["Break Line Distance"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Length>
		<Length Name="breakLineWidth">
			<Description><![CDATA["Break Line Width"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.1</Value>
		</Length>
		<Angle Name="breakLineDistAngle">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>30</Value>
		</Angle>
		<Angle Name="breakLineWidthAngle">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>10</Value>
		</Angle>
		<Boolean Name="bRailAboveBreakLine">
			<Description><![CDATA["Rail Above Break Line"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="bShowRailBelowBrL">
			<Description><![CDATA["Show Rail Below Break Line"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="bShowRailAboveBrL">
			<Description><![CDATA["Show Rail Above Break Line"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<LineType Name="railLineType">
			<Description><![CDATA["Rail Line Type"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</LineType>
		<LineType Name="dash_line">
			<Description><![CDATA["Invisible Structures Lines Type"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>4</Value>
		</LineType>
		<Boolean Name="bEnable2DPosts">
			<Description><![CDATA["Enable Posts in 2D"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="bPostNoCalculation">
			<Description><![CDATA["Calculated Post Number (Wooden Balustrade)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="bSimple2DPosts">
			<Description><![CDATA["Simple Posts in 2D (Railing Horizontal)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="gs_ShowPost2D">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="gs_FillAbove">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
	</Parameters>
</ParamSection>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_VL SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_VL>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_3D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_3D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_2D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
templra = max(templra, EPS)

PEN gs_cont_pen
FILL gs_fill_type

IF iHandRailStyle = 1 THEN		!!!WIDTH OF HANDRAIL
	railWidth = handRailWidth
ELSE
	railWidth = handRailDiameter
ENDIF

if NOT(bEnable2DPosts) then
	hroL		= 0
	hroR		= 0

	alphahroL	= 0
	alphahroR	= 0
endif

IF LengthSize = 0 THEN			!!!OVERHANG OF HANDRAIL
	temphroL = -hroL
	temphroR = hroR
	RefPoint1 = 1
	RefPoint2 = -1
ELSE
	temphroL = hroL
	temphroR = -hroR
	RefPoint1 = -1
	RefPoint2 = 1
ENDIF

unID=1
hLineID = 1000
hArcID = 2000

! ==============================================================================
! STRAIGHT
! ==============================================================================

IF ptyp_m=1 and rom_m=1 THEN		! Not Inclined
	ADD2 XStartPoslra,0

		XPosL			= (railWidth / 2) / tan(gs_AngleL)
		XPosR			= (railWidth / 2) / tan(gs_AngleR)

		breakLineXPos	= (railWidth) * tan(breakLineAngle)

		drawindex 30
		!!FRAME
		if bBreakRailLine then
			if bShowRailBelowBrL then
				line_type railLineType
				poly2_b 4, 1+2+4+64, gs_fill_pen, gs_back_pen,
					-(hroL) + XPosL, railWidth / 2, 1,
					-(hroL) - XPosL, -railWidth / 2, 1,
					-(hroL) + breakLineDist, -railWidth / 2, 1,
					-(hroL) + breakLineDist - breakLineXPos, railWidth / 2, 1
			endif
			if bShowRailAboveBrL then
				line_type dash_line
				poly2_b 4, 1 + 2 * gs_FillAbove + 4 + 64, gs_fill_pen, gs_back_pen,
					-(hroL) + breakLineDist - breakLineXPos + breakLineWidth, railWidth / 2, 1,
					-(hroL) + breakLineDist + breakLineWidth, -railWidth / 2, 1,
					 templra + (hroR) + XPosR, -railWidth / 2, 1,
					 templra + (hroR) - XPosR, railWidth / 2, 1
			endif
		else
			line_type railLineType * NOT(bRailAboveBreakLine) + (dash_line) * bRailAboveBreakLine
			POLY2_b 4, 1 + 2 * (NOT(bRailAboveBreakLine) + bRailAboveBreakLine * gs_FillAbove) + 4 + 64, gs_fill_pen, gs_back_pen,
				-(hroL) + XPosL, railWidth / 2, 1,
				-(hroL) - XPosL, -railWidth / 2, 1,
				 templra + hroR + XPosR, -railWidth / 2, 1,
				 templra + hroR - XPosR, railWidth / 2, 1
		endif

		drawindex 50
		!!AXIS
		IF sa=1 THEN
			pen gs_RailAxisPen
			line_type al

			if bBreakRailLine then
				if bShowRailBelowBrL then
					LINE2 -(hroL),0,-(hroL) + breakLineDist - breakLineXPos / 2,0
					HOTLINE2 -(hroL),0,-(hroL) + breakLineDist - breakLineXPos / 2,0, hLineID
				endif
				if bShowRailAboveBrL then
					LINE2 -(hroL) + breakLineDist + breakLineWidth - breakLineXPos / 2,0,templra+(hroR),0
					HOTLINE2 -(hroL) + breakLineDist + breakLineWidth - breakLineXPos / 2,0,templra+(hroR),0, hLineID
				endif
			else
				LINE2 -(hroL),0,templra+(hroR),0
				HOTLINE2 -(hroL),0,templra+(hroR),0, hLineID
			endif

			pen gs_cont_pen
			line_type 1
		ENDIF
		hLineID = hLineID + 1

	DEL 1

	!!SELECTION HOTSPOTS
	IF cfs=0 THEN

		!!!HOTSPOTS FOR GRAPHICAL EDITING
		!!LENGTH
		HOTSPOT2 0,0,unID,lra,1+256 : unID=unID+1
		HOTSPOT2 lra,0,unID,lra,2 : unID=unID+1
		HOTSPOT2 -1,0,unID,lra,3 : unID=unID+1

		if bEnable2DPosts then
			!!!OVERHANG OF HANDRAIL
			HOTSPOT2 0,0,unID,hroL,1+128 : unID=unID+1
			HOTSPOT2 temphroL,0,unID,hroL,2 : unID=unID+1
			HOTSPOT2 RefPoint1,0,unID,hroL,3 : unID=unID+1

			HOTSPOT2 lra,0,unID,hroR,1+128 : unID=unID+1
			HOTSPOT2 lra+temphroR,0,unID,hroR,2 : unID=unID+1
			HOTSPOT2 lra+RefPoint2,0,unID,hroR,3 : unID=unID+1
		else
			HOTSPOT2 lra/2,0,UniD : unID=unID+1
		endif

		!!! ROTATION
		fthRadiusL=(railWidth/2)/SIN(gs_AngleL)
		fthRadiusR=(railWidth/2)/SIN(gs_AngleR)

		ADD2 XStartPoslra,0
			HOTSPOT2 -hroL, 0, unID, gs_AngleL, 6: unID=unID+1
			HOTSPOT2 fthRadiusL, 0, unID, gs_AngleL, 4+128: unID=unID+1
			HOTSPOT2 fthRadiusL*COS(gs_AngleL)-(hroL), fthRadiusL*SIN(gs_AngleL), unID, gs_AngleL, 5: unID=unID+1

			HOTSPOT2 -hroL, 0, unID, gs_AngleL, 6: unID=unID+1
			HOTSPOT2 -fthRadiusL-1, 0, unID, gs_AngleL, 4+128: unID=unID+1
			HOTSPOT2 -fthRadiusL*COS(gs_AngleL)-(hroL), -fthRadiusL*SIN(gs_AngleL), unID, gs_AngleL, 5: unID=unID+1
		DEL 1

		ADD2 XStartPoslra,0
			HOTSPOT2 templra+hroR, 0, unID, gs_AngleR, 6+512: unID=unID+1
			HOTSPOT2 templra-fthRadiusR, 0, unID, gs_AngleR, 4+128: unID=unID+1
			HOTSPOT2 templra-fthRadiusR*COS(gs_AngleR)+(hroR), fthRadiusR*SIN(gs_AngleR), unID, gs_AngleR, 5: unID=unID+1

			HOTSPOT2 templra+hroR, 0, unID, gs_AngleR, 6+512: unID=unID+1
			HOTSPOT2 templra+fthRadiusR+1, 0, unID, gs_AngleR, 4+128: unID=unID+1
			HOTSPOT2 templra+fthRadiusR*COS(gs_AngleR)+(hroR), -fthRadiusR*SIN(gs_AngleR), unID, gs_AngleR, 5: unID=unID+1
		DEL 1

	ENDIF

	!!!POSTS
	ADD2 XStartPoslra, 0
	FOR i = 1 to np
		if postPos[i] >= 0 and postPos[i] <= (templra + hroL + hroR) then
			if bBreakRailLine then
				if postPos[i] < breakLineDist and bShowRailBelowBrL then
					if NOT(cfs) then
						if i > 1 and i < np then HOTSPOT2 0, 0, UniD : unID=unID+1
					endif
					if drawThePost then gosub "posts2D"
				endif
				if postPos[i] > (breakLineDist + breakLineWidth) and bShowRailAboveBrL then
					if NOT(cfs) then
						if i > 1 and i < np then HOTSPOT2 0, 0, UniD : unID=unID+1
					endif
					if drawThePost then gosub "posts2D"
				endif
			else
				if NOT(cfs) then
					if i > 1 and i < np then HOTSPOT2 0, 0, UniD : unID=unID+1
				endif
				if drawThePost then gosub "posts2D"
			endif
		endif

		ADD2 distpost, 0
	NEXT i
	DEL np
	del 1
ENDIF

IF ptyp_m=1 and rom_m<>1 THEN				! Inclined

	ADD2 XStartPoslra,0

		drawindex 30
		!!FRAME
		IF ani >=0 THEN
			StartPoint=-(ds+hr)*sin(ani)-hroLDiagonal*cos(ani)
			EndPoint=templra
			IF ABS(hroL)<EPS THEN LINE2 templra-(ds+hr)*sin(ani),railWidth/2,templra-(ds+hr)*sin(ani),-railWidth/2
		ELSE
			StartPoint=0
			EndPoint=templra-(ds+hr)*sin(ani)+ hroRDiagonal*cos(ani)
			IF ABS(hroR)<EPS THEN LINE2 -(ds+hr)*sin(ani),railWidth/2,-(ds+hr)*sin(ani),-railWidth/2
		ENDIF

		XPosL			= (railWidth / 2) / tan(gs_AngleL)
		XPosR			= (railWidth / 2) / tan(gs_AngleR)

		breakLineXPos	= (railWidth) * tan(breakLineAngle)

		if bBreakRailLine then
			if bShowRailBelowBrL then
				line_type railLineType
				poly2_b 4, 1+2+4+64, gs_fill_pen, gs_back_pen,
					StartPoint, railWidth / 2, 1,
					StartPoint, -railWidth / 2, 1,
					StartPoint + breakLineDist, -railWidth / 2, 1,
					StartPoint + breakLineDist - breakLineXPos, railWidth / 2, 1
			endif
			if bShowRailAboveBrL then
				line_type dash_line
				poly2_b 4, 1 + 2 * gs_FillAbove + 4 + 64, gs_fill_pen, gs_back_pen,
					StartPoint + breakLineDist - breakLineXPos + breakLineWidth, railWidth / 2, 1,
					StartPoint + breakLineDist + breakLineWidth, -railWidth / 2, 1,
					 EndPoint, -railWidth / 2, 1,
					 EndPoint, railWidth / 2, 1
			endif
		else
			line_type railLineType * NOT(bRailAboveBreakLine) + dash_line * bRailAboveBreakLine
			POLY2_b 4, 1 + 2 * (NOT(bRailAboveBreakLine) + bRailAboveBreakLine * gs_FillAbove) + 4 + 64, gs_fill_pen, gs_back_pen,
				StartPoint, railWidth / 2, 1,
				StartPoint, -railWidth / 2, 1,
				EndPoint, -railWidth / 2, 1,
				EndPoint, railWidth / 2, 1
		endif

		drawindex 50
		!!AXIS
		IF sa=1 THEN
			pen gs_RailAxisPen
			line_type al

			IF ani >=0 THEN
				if bBreakRailLine then
					if bShowRailBelowBrL then
						LINE2 -(ds+hr)*sin(ani)-hroLDiagonal*cos(ani),0,-(ds+hr)*sin(ani)-hroLDiagonal*cos(ani) + breakLineDist - breakLineXPos / 2,0
						HOTLINE2 -(ds+hr)*sin(ani)-hroLDiagonal*cos(ani),0,-(ds+hr)*sin(ani)-hroLDiagonal*cos(ani) + breakLineDist - breakLineXPos / 2,0, hLineID
					endif
					if bShowRailAboveBrL then
						LINE2 -(ds+hr)*sin(ani)-hroLDiagonal*cos(ani) + breakLineDist + breakLineWidth - breakLineXPos / 2,0, templra,0
						HOTLINE2 -(ds+hr)*sin(ani)-hroLDiagonal*cos(ani) + breakLineDist + breakLineWidth - breakLineXPos / 2,0, templra,0, hLineID
					endif
				else
					LINE2 -(ds+hr)*sin(ani)-hroLDiagonal*cos(ani),0,templra,0
					HOTLINE2 -(ds+hr)*sin(ani)-hroLDiagonal*cos(ani),0,templra,0, hLineID
				endif
			ELSE
				LINE2 0,0,templra-(ds+hr)*sin(ani)+ hroRDiagonal*cos(ani),0
			ENDIF
			hLineID = hLineID + 1
			HOTLINE2 0,0,templra,0, hLineID

			pen gs_cont_pen
			line_type 1
		else
			hLineID = hLineID + 2
		ENDIF

	DEL 1

	IF cfs=0 THEN

		!LENGTH
		HOTSPOT2 0,0,unID,lra,1+256 : unID=unID+1
		HOTSPOT2 lra,0,unID,lra,2 : unID=unID+1
		HOTSPOT2 -1,0,unID,lra,3 : unID=unID+1

		ADD2 XStartPoslra,0
			HOTSPOT2 EndPoint,railWidth/2, UniD : unID=unID+1
			HOTSPOT2 EndPoint,-railWidth/2, UniD : unID=unID+1

			HOTSPOT2 StartPoint,railWidth/2, UniD : unID=unID+1
			HOTSPOT2 StartPoint,-railWidth/2, UniD : unID=unID+1

			IF ani >=0 THEN
				HOTSPOT2 StartPoint,0, UniD : unID=unID+1
				IF ABS(hroL)<EPS THEN HOTSPOT2 templra-(ds+hr)*sin(ani),0, UniD : unID=unID+1
			ELSE
				HOTSPOT2 EndPoint,0, UniD : unID=unID+1
				IF ABS(hroR)<EPS THEN HOTSPOT2 -(ds+hr)*sin(ani),0, UniD : unID=unID+1
			ENDIF
		DEL 1

	ENDIF

	!!!POSTS
	ADD2 XStartPoslra + StartPoint + hroLDiagonal * cos(ani), 0
	FOR i = 1 to np
		if postPos[i] >= 0 and postPos[i] <= (templrah + hroLDiagonal + hroRDiagonal) then
			if bBreakRailLine then
				if postPos[i] < breakLineDist and bShowRailBelowBrL then
					if NOT(cfs) then
						HOTSPOT2 0, 0, UniD : unID=unID+1
					endif

					if drawThePost then gosub "posts2D"
				endif
				if postPos[i] > (breakLineDist + breakLineWidth) and bShowRailAboveBrL then
					if NOT(cfs) then
						HOTSPOT2 0, 0, UniD : unID=unID+1
					endif

					if drawThePost then gosub "posts2D"
				endif
			else
				if NOT(cfs) then
					HOTSPOT2 0, 0, UniD : unID=unID+1
				endif

				if drawThePost then gosub "posts2D"
			endif
		endif

		ADD2 distpost * cos(ani), 0
	NEXT i
	DEL np
	del 1

ENDIF

! ==============================================================================
! CURVED
! ==============================================================================

IF ptyp_m<>1 THEN

	!!!POSTS
	add2 0, rb
	for i = 1 to np
		add2 0, -rb
			if postPos[i] >= 0 and postPos[i] <= (ab + alphahroL + alphahroR) then
				if bBreakRailLine then
					if postPos[i] < breakLineDistAngle and bShowRailBelowBrL then
						if not(cfs) then
							if i > 1 and i < np then hotspot2 0, 0, UniD : unID = unID+1
						endif

						if drawThePost then gosub "posts2D"
					endif
					if postPos[i] > (breakLineDistAngle + breakLineWidthAngle) and bShowRailAboveBrL then
						if not(cfs) then
							if i > 1 and i < np then hotspot2 0, 0, UniD : unID = unID+1
						endif

						if drawThePost then gosub "posts2D"
					endif
				else
					if not(cfs) then
						if i > 1 and i < np then hotspot2 0, 0, UniD : unID = unID+1
					endif

					if drawThePost then gosub "posts2D"
				endif
			endif
		del 1

		rot2 anglepost
	next i
	del np+1

	IF (ab + alphahroL + alphahroR) < 360 THEN
		drawindex 30
		!!FRAME
		if bBreakRailLine then
			if bShowRailBelowBrL then
				line_type railLineType
				POLY2_b 7, 1+2+4+64, gs_fill_pen, gs_back_pen,
					(rb-(railWidth/2))*sin(-alphahroL),rb-(rb-(railWidth/2))*cos(-alphahroL),1,
					(rb+(railWidth/2))*sin(-alphahroL),rb-(rb+(railWidth/2))*cos(-alphahroL),1,
					cos(-alphahroL),sin(-alphahroL),800,
					(rb+(railWidth/2))*sin(breakLineDistAngle-alphahroL),rb-(rb+(railWidth/2))*cos(breakLineDistAngle-alphahroL),1001,
					(rb-(railWidth/2))*sin(breakLineDistAngle-alphahroL),rb-(rb-(railWidth/2))*cos(breakLineDistAngle-alphahroL),1,
					-cos(breakLineDistAngle-alphahroL),-sin(breakLineDistAngle-alphahroL),800,
					(rb-(railWidth/2))*sin(-alphahroL),rb-(rb-(railWidth/2))*cos(-alphahroL),1000
			endif
			if bShowRailAboveBrL then
				line_type dash_line
				POLY2_b 7, 1 + 2 * gs_FillAbove + 4 + 64, gs_fill_pen, gs_back_pen,
					(rb-(railWidth/2))*sin(breakLineDistAngle - alphahroL + breakLineWidthAngle),rb-(rb-(railWidth/2))*cos(breakLineDistAngle - alphahroL + breakLineWidthAngle),1,
					(rb+(railWidth/2))*sin(breakLineDistAngle - alphahroL + breakLineWidthAngle),rb-(rb+(railWidth/2))*cos(breakLineDistAngle - alphahroL + breakLineWidthAngle),1,
					cos(breakLineDistAngle - alphahroL + breakLineWidthAngle),sin(breakLineDistAngle - alphahroL + breakLineWidthAngle),800,
					(rb+(railWidth/2))*sin(ab + alphahroL),rb-(rb+(railWidth/2))*cos(ab + alphahroL),1001,
					(rb-(railWidth/2))*sin(ab + alphahroL),rb-(rb-(railWidth/2))*cos(ab + alphahroL),1,
					-cos(ab + alphahroL),-sin(ab + alphahroL),800,
					(rb-(railWidth/2))*sin(breakLineDistAngle - alphahroL + breakLineWidthAngle),rb-(rb-(railWidth/2))*cos(breakLineDistAngle - alphahroL + breakLineWidthAngle),1000
			endif
		else
			line_type railLineType * NOT(bRailAboveBreakLine) + dash_line * bRailAboveBreakLine
			POLY2_b 7, 1 + 2 * (NOT(bRailAboveBreakLine) + bRailAboveBreakLine * gs_FillAbove) + 4 + 64, gs_fill_pen, gs_back_pen,
				(rb-(railWidth/2))*sin(-alphahroL),rb-(rb-(railWidth/2))*cos(-alphahroL),1,
				(rb+(railWidth/2))*sin(-alphahroL),rb-(rb+(railWidth/2))*cos(-alphahroL),1,
				cos(-alphahroL),sin(-alphahroL),800,
				(rb+(railWidth/2))*sin(ab+alphahroR),rb-(rb+(railWidth/2))*cos(ab+alphahroR),1001,
				(rb-(railWidth/2))*sin(ab+alphahroR),rb-(rb-(railWidth/2))*cos(ab+alphahroR),1,
				-cos(ab+alphahroR),-sin(ab+alphahroR),800,
				(rb-(railWidth/2))*sin(-alphahroL),rb-(rb-(railWidth/2))*cos(-alphahroL),1000
		endif

		drawindex 50
		!!AXIS
		IF sa=1 THEN
			pen gs_RailAxisPen
			line_type al

			if bBreakRailLine then
				if bShowRailBelowBrL then
					arc2 0,rb,rb,-90-alphahroL,-90-alphahroL + breakLineDistAngle
					hotarc2 0,rb,rb,-90-alphahroL,-90-alphahroL + breakLineDistAngle, hArcID
				endif
				if bShowRailAboveBrL then
					arc2 0,rb,rb,-90-alphahroL + breakLineDistAngle + breakLineWidthAngle,ab-90+alphahroR
					hotarc2 0,rb,rb,-90-alphahroL + breakLineDistAngle + breakLineWidthAngle,ab-90+alphahroR, hArcID
				endif
			else
				arc2 0,rb,rb,-90-alphahroL,ab-90+alphahroR
				hotarc2 0,rb,rb,-90-alphahroL,ab-90+alphahroR, hArcID
			endif

			pen gs_cont_pen
			line_type 1
		ENDIF
		hArcID = hArcID + 1

		IF cfs=0 THEN

			!!!SELECTION HOTSPOTS
			HOTSPOT2 0,rb, unID : unID=unID+1

			!!!HOTSPOTS FOR GRAPHICAL EDITING
			HOTSPOT2 0,0,unID,rb,1+256 : unID=unID+1
			HOTSPOT2 0,rb,unID,rb,2 : unID=unID+1
			HOTSPOT2 0,-1,unID,rb,3 : unID=unID+1

			HOTSPOT2 rb*sin(ab),rb-rb*cos(ab),unID : unID=unID+1

			HOTSPOT2 rb*sin(ab/2),rb-rb*cos(ab/2),unID: unID=unID+1

			HOTSPOT2 (rb-(railWidth/2))*sin(-alphahroL),rb-(rb-(railWidth/2))*cos(-alphahroL),unID : unID=unID+1
			HOTSPOT2 (rb+(railWidth/2))*sin(-alphahroL),rb-(rb+(railWidth/2))*cos(-alphahroL),unID : unID=unID+1
			HOTSPOT2 (rb-(railWidth/2))*sin(ab+alphahroR),rb-(rb-(railWidth/2))*cos(ab+alphahroR),unID : unID=unID+1
			HOTSPOT2 (rb+(railWidth/2))*sin(ab+alphahroR),rb-(rb+(railWidth/2))*cos(ab+alphahroR),unID : unID=unID+1
			HOTSPOT2 (rb)*sin(ab+alphahroR),rb-(rb)*cos(ab+alphahroR),unID : unID=unID+1
			HOTSPOT2 (rb)*sin(-alphahroL),rb-(rb)*cos(alphahroL),unID : unID=unID+1

			IF ptyp_m=3 THEN
				!!!HOTSPOTS FOR GRAPHICAL EDITING
				HOTSPOT2 0,rb,unID,ab,6: unID=unID+1
				HOTSPOT2 0,0,unID,ab,4+256: unID=unID+1
				HOTSPOT2 rb*sin(ab),rb-rb*cos(ab),unID,ab,5: unID=unID+1
			ENDIF

		ENDIF

	ELSE

		!!FRAME
		POLY2_b 12, 1+2+64,gs_fill_pen,gs_back_pen,
			0,-railWidth/2,1,
			1,0,800,
			0,2*rb+railWidth/2,1001,
			-1,0,800,
			0,-railWidth/2,1001,
			0,-railWidth/2,-1,

			0,railWidth/2,1,
			1,0,800,
			0,2*rb-railWidth/2,1001,
			-1,0,800,
			0,railWidth/2,1001,
			0,railWidth/2,-1


		!!FRAME END LINE
		if abs(ani) >= EPS then
			line_type railLineType * not(bRailAboveBreakLine) + dash_line * bRailAboveBreakLine
			line2		(rb + (railWidth/2)) * sin(ab + alphahroL), rb - (rb + (railWidth/2)) * cos(ab + alphahroL),
						(rb - (railWidth/2)) * sin(ab + alphahroL), rb - (rb - (railWidth/2)) * cos(ab + alphahroL)
		ENDIF

		!!AXIS
		IF sa=1 THEN
			pen gs_RailAxisPen
			line_type al

			arc2 0,rb,rb,-90,ab-90
			hotarc2 0,rb,rb,-90,ab-90, hArcID

			pen gs_cont_pen
			line_type 1
		ENDIF
		hArcID = hArcID + 1

		!!!SELECTION HOTSPOTS
		IF cfs=0 THEN

			!!!HOTSPOTS FOR GRAPHICAL EDITING
			HOTSPOT2 0,0,unID,rb,1+256 : unID=unID+1
			HOTSPOT2 0,rb,unID,rb,2 : unID=unID+1
			HOTSPOT2 0,-1,unID,rb,3 : unID=unID+1

			HOTSPOT2 0,-railWidth/2,unID : unID=unID+1
			HOTSPOT2 0,railWidth/2,unID : unID=unID+1

			IF ptyp_m=3 THEN
				HOTSPOT2 (rb+(railWidth/2))*sin(ab/2),rb-(rb+(railWidth/2))*cos(ab/2),unID : unID=unID+1
				HOTSPOT2 (rb)*sin(ab/2),rb-(rb)*cos(ab/2),unID : unID=unID+1
				HOTSPOT2 (rb-(railWidth/2))*sin(ab/2),rb-(rb-(railWidth/2))*cos(ab/2),unID : unID=unID+1

				HOTSPOT2 (rb+(railWidth/2))*sin(ab/4),rb-(rb+(railWidth/2))*cos(ab/4),unID : unID=unID+1
				HOTSPOT2 (rb)*sin(ab/4),rb-(rb)*cos(ab/4),unID : unID=unID+1
				HOTSPOT2 (rb-(railWidth/2))*sin(ab/4),rb-(rb-(railWidth/2))*cos(ab/4),unID : unID=unID+1

				HOTSPOT2 (rb+(railWidth/2))*sin(3*ab/4),rb-(rb+(railWidth/2))*cos(3*ab/4),unID : unID=unID+1
				HOTSPOT2 (rb)*sin(3*ab/4),rb-(rb)*cos(3*ab/4),unID : unID=unID+1
				HOTSPOT2 (rb-(railWidth/2))*sin(3*ab/4),rb-(rb-(railWidth/2))*cos(3*ab/4),unID : unID=unID+1
			ENDIF

			IF ptyp_m=2 THEN
				HOTSPOT2 rb-railWidth/2,rb,unID : unID=unID+1
				HOTSPOT2 rb,rb,unID : unID=unID+1
				HOTSPOT2 rb+railWidth/2,rb,unID : unID=unID+1

				HOTSPOT2 0,2*rb-railWidth/2,unID : unID=unID+1
				HOTSPOT2 0,2*rb,unID : unID=unID+1
				HOTSPOT2 0,2*rb+railWidth/2,unID : unID=unID+1

				HOTSPOT2 -rb-railWidth/2,rb,unID : unID=unID+1
				HOTSPOT2 -rb,rb,unID : unID=unID+1
				HOTSPOT2 -rb+railWidth/2,rb,unID : unID=unID+1
			ENDIF

		ENDIF

	ENDIF

ENDIF

!================================================================================
end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end
!================================================================================

"posts2D":

	if bSimple2DPosts then
		if pt_m = 1 then
			add2 -pw/2, -pth/2
			rect2 0, 0, pw, pth
			del 1
		else
			circle2 0, 0, pd/2
		endif
	else
		pen postPen
		line_type postLineType
		drawindex 10 + bPostAboveHandRail * 30

		if iPostType2D = POST_CIRCULAR then
			poly2_b 2, 1 + 2 * (NOT(bRailAboveBreakLine) + bRailAboveBreakLine * gs_FillAbove) + 4 + 64, gs_fill_pen, gs_back_pen,
					0, 0, 901,
					postDia2D / 2, 360, 4001
		else
			poly2_b 4, 1 + 2 * (NOT(bRailAboveBreakLine) + bRailAboveBreakLine * gs_FillAbove) + 4 + 64, gs_fill_pen, gs_back_pen,
					-postWidth2D / 2, -postThk2D / 2, 1,
					postWidth2D / 2, -postThk2D / 2, 1,
					postWidth2D / 2, postThk2D / 2, 1,
					-postWidth2D / 2, postThk2D / 2, 1
		endif

		pen gs_cont_pen
		line_type 1
		drawindex 50
	endif

return

]]>
</Script_2D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_1D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
EPS=0.0001

!!!!!! Railing Length

IF LengthSize = 1 THEN
	lra2=(lra - (hroL + hroR))
	lrah2=(lrah - (hroLDiagonal + hroRDiagonal))
	templra=lra2
	templrah=lrah2
	XStartPoslra=hrol
	ZStartPoslra=hrol*tan(ani)
	XStartPoslrah=hroLDiagonal
ELSE
	templra=lra
	templrah=lrah
	XStartPoslra=0
	ZStartPoslra=0
	XStartPoslrah=0
ENDIF

if bPostNoCalculation then
	if pit_m=2 then
		IF rom_m=2 AND rmm_m=2 THEN
			np=int(lra/dp)+1
		ELSE
			np=int(lra/dp)+1
		ENDIF
	else
		np = nbt
	endif
endif

np = max(2, np)

IF ABS(ab-360)<EPS and ABS(ani)<EPS THEN
	anglepost=ab/np
ELSE
	anglepost=ab/(np-1)
ENDIF

!!ADDITIONAL CALCULATION FOR CURVED AND INCLINED RAILS!!

IF ptyp_m<>1 and ABS(ab)>EPS or ABS(rb)>EPS THEN
	!!! *** General data

	alphahroL=(hroL*180)/(rb*pi) 			!Overhung angle
	alphahroR=(hroR*180)/(rb*pi) 			!Overhung angle
ENDIF

IF ptyp_m<>1 and (ABS(ab)>EPS or ABS(rb)>EPS) THEN
	distpost		= ab/(np-1)
	tempPostPos		= alphahroL
else
	IF rom_m=2 AND rmm_m=2 THEN
		distpost	= templrah/(np-1)
		tempPostPos	= XStartPoslrah * cos(ani)
	ELSE
		distpost	= templra/(np-1)
		tempPostPos	= hrol
	ENDIF
endif

dim postPos[]
for i = 1 to np
	postPos[i] = tempPostPos
	IF ptyp_m<>1 and (ABS(ab)>EPS or ABS(rb)>EPS) THEN
		tempPostPos = postPos[i] + distpost
	else
		IF rom_m=2 AND rmm_m=2 THEN
			tempPostPos = postPos[i] + distpost * cos(ani)
		else
			tempPostPos = postPos[i] + distpost
		endif
	endif
next i

POST_CIRCULAR		= 1
POST_RECTANGULAR	= 2

if bSimple2DPosts then
	drawThePost		= (bEnable2DPosts * gs_ShowPost2D)
else
	drawThePost		= (bEnable2DPosts * iPostSymbolType * bPostSymbol)
endif
postDia2D			= 0.1 !pd
postWidth2D			= 0.1 !pw
postThk2D			= 0.1 !pth
bPostAboveHandRail	= (iPostSymbolType = 1 or iPostSymbolType = 3)

if iPostSymbolType = 1 or iPostSymbolType = 2 then iPostType2D = POST_CIRCULAR
if iPostSymbolType = 3 or iPostSymbolType = 4 then iPostType2D = POST_RECTANGULAR

]]>
</Script_1D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_PR SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_PR>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_UI SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_UI>

<Comment SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Comment>

<CalledMacros SectVersion="2" SectionFlags="0" SubIdent="0">
</CalledMacros>

<Copyright SectVersion="1" SectionFlags="0" SubIdent="0">
	<Author>GRAPHISOFT</Author>
	<License>
		<Type>CC BY-ND</Type>
		<Version>3.0</Version>
	</License>
</Copyright>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_FWM SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_FWM>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_BWM SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_BWM>

<Keywords SectVersion="1" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Keywords>

</Symbol>
