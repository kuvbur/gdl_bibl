<?xml version="1.0" encoding="UTF-8"?>
<Symbol IsArchivable="false" IsPlaceable="false" MainGUID="E42F5F06-4225-4F32-A64C-ADCF1D4F9EDC" MigrationValue="Normal" Owner="1196638531" Signature="1196644685" Version="43">
<Ancestry SectVersion="1" SectionFlags="0" SubIdent="0" Template="false">
	<MainGUID>F938E33A-329D-4A36-BE3E-85E126820996</MainGUID>
	<MainGUID>103E8D2C-8230-42E1-9597-46F84CCE28C0</MainGUID>
	<MainGUID>B2970E4C-8680-4061-8670-2F4B638F3953</MainGUID>
</Ancestry>

<CalledMacros SectVersion="2" SectionFlags="0" SubIdent="0">
</CalledMacros>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_3D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_3D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_2D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[

EPS=0.0001

! --- Length Unit --------------------------------------------------------------

ss	= ""
rrr	= REQUEST ("Linear_dimension", "", ss)
linear_unit = ""
IF STRSTR (ss, "m") > 0 THEN linear_unit = "m"


! --- Define Font Style --------------------------------------------------------

anchorPoz = 7
anchorPoz2 = 1
if iRiseRunTextPosition = 2 then
	anchorPoz = 8
	anchorPoz2 = 2
endif

define style "stepnum_tread" fontType, fontsize, anchorPoz, 0		! riser & number

define style "stepnum_inch" fontType, fontsize, 1, 0				! riser & number_inch

define style "rnrTextAboveLine" fontType, fontsize, anchorPoz, 0	! rise & run text above middle line

define style{2} "rnrTextfrac" fontType, fontsize, 32				! rise & run text with superscript

define style "rnrTextUnderLine" fontType, fontsize, anchorPoz2, 0	! rise & run text under middle line



! --- Rise & Run Text -------------------------------------------------------

	style "rnrTextAboveLine"
	b2lines = 0

! --- strings ---
	fracFull = ""
	fracRiser = ""
	fracTread = ""
	strRiserNum		= str("%.0",nRisers)
	strTreadNum		= str("%.0",(nRisers - 1))

	if bUseACLinearUnit then

		! Special Rise Text type - Number <rise text> Rise / Tread - always with mm precision
		if (iRiseRunText = 5 | iRiseRunText = 6) & linear_unit = "m" then
			decimalPlace = 0
			extraAccPlace = 0
			decimalCont = "0"
			extraAccCont = "0"
			if STRSTR (ss, "cm") > 0 then 	! unit = "cm"
				decimalPlace = STRSTR (ss, ".")
				if decimalPlace > 0 then
					decimalCont = STRSUB (ss, decimalPlace + 1, 1)
				endif
				extraAccPlace = STRSTR (ss, "*")
				if extraAccPlace > 0 then
					extraAccCont = STRSUB (ss, extraAccPlace + 1, 1)
				endif

				iDecimal = 0
				if decimalCont = "1" then iDecimal = 1
				if decimalCont = "2" then iDecimal = 2
				if decimalCont = "3" then iDecimal = 3
				if decimalCont = "4" then iDecimal = 4
				iExtraAcc = 0
				if extraAccCont <> "0" then iExtraAcc = 1

				if (iDecimal + iExtraAcc) < 1 then
					decimalCont = "1"
				endif
			else
				if STRSTR (ss, "mm") = 0 then	 ! unit = "m"
					decimalPlace = STRSTR (ss, ".")
					if decimalPlace > 0 then
						decimalCont = STRSUB (ss, decimalPlace + 1, 1)
					endif
					extraAccPlace = STRSTR (ss, "*")
					if extraAccPlace > 0 then
						extraAccCont = STRSUB (ss, extraAccPlace + 1, 1)
					endif

					iDecimal = 0
					if decimalCont = "1" then iDecimal = 1
					if decimalCont = "2" then iDecimal = 2
					if decimalCont = "3" then iDecimal = 3
					if decimalCont = "4" then iDecimal = 4
					iExtraAcc = 0
					if extraAccCont <> "0" then iExtraAcc = 1

					if (iDecimal + iExtraAcc) < 3 then
						decimalCont = "3"
					endif
				endif
			endif

			if decimalCont <> "0" & decimalPlace > 0 then
				ss1 = STRSUB (ss, 1, decimalPlace )
				ss2 = decimalCont
				ss3 = STRSUB (ss, decimalPlace + 2, 10)
				ss = ss1 + ss2 + ss3
			endif
		endif

		strFullHeight	= str{2}(ss, treadHeight*nRisers, fracFull)
		strRiser		= str{2}(ss, treadHeight, fracRiser)
		strTread		= str{2}(ss, treadDepth, fracTread)
	else
		if linear_unit <> "m" then
			strFullHeight	= str("%0.64ffi",treadHeight*nRisers)
			strRiser		= str("%.64fi",treadHeight)
			strTread		= str("%.64fi",treadDepth)
		else
			if iRiseRunText = 5 | iRiseRunText = 6 then	! Number <rise text> Rise / Tread, Number <rise text> // Rise/Text
				! Special Rise Text type - always with mm precision
				strRiser		= str{2}("%*3.0cm", treadHeight, fracRiser)
				strTread		= str{2}("%*3.0cm", treadDepth, fracTread)
			else
				strFullHeight	= str("%.2",treadHeight*nRisers)
				strRiser		= str("%.1cm",treadHeight)
				strTread		= str("%.1cm",treadDepth)
			endif
		endif
	endif

	strX =		" x "
	strEqual =	" = "
	strR =		` п. @ `
	strT =		` с. @ `
	strSlash =		" / "
	strSlashSimple = "/"

	topTextString = ""
	bottomTextString = ""
	hasParagraphTop = 0
	hasParagraphBottom = 0

	if iRiseRunText = 1 then
		if fracRiser <> "" | fracFull <> "" then
			hasParagraphTop = 1
			stringTop1st = strRiserNum + strX + strRiser
			fracTop1st = fracRiser
			stringTop2nd = strEqual + strFullHeight
			fracTop2nd = fracFull
		else
			topTextString = strRiserNum + strX + strRiser + strEqual + strFullHeight
		endif
	endif
	if iRiseRunText = 2 then
		b2lines = 1
		if fracRiser <> "" then
			hasParagraphTop = 1
			stringTop1st = strRiserNum + strR + strRiser
			fracTop1st = fracRiser
			stringTop2nd = ""
			fracTop2nd = ""
		else
			topTextString = strRiserNum + strR + strRiser
		endif

		if fracTread <> "" then
			hasParagraphBottom = 1
			stringBottom1st = strTreadNum + strT + strTread
			fracBottom1st = fracTread
			stringBottom2nd = ""
			fracBottom2nd = ""
		else
			bottomTextString = strTreadNum + strT + strTread
		endif
	endif
	if iRiseRunText = 3 then
		if fracTread <> "" | fracRiser <> "" then
			hasParagraphTop = 1
			stringTop1st = strRiserNum + strX + strTread
			fracTop1st = fracTread
			stringTop2nd = strX + strRiser
			fracTop2nd = fracRiser
		else
			topTextString = strRiserNum + strX + strTread + strX + strRiser
		endif
	endif
	if iRiseRunText = 4 then
		if fracTread <> "" | fracRiser <> "" then
			hasParagraphTop = 1
			stringTop1st = strRiserNum + strX + strRiser
			fracTop1st = fracRiser
			stringTop2nd = strX + strTread
			fracTop2nd = fracTread
		else
			topTextString = strRiserNum + strX + strRiser + strX + strTread
		endif
	endif
	if iRiseRunText = 5 then
		if fracTread <> "" | fracRiser <> "" then
			hasParagraphTop = 1
			stringTop1st = strRiserNum + " " + gs_customText_rise + " " + strRiser
			fracTop1st = fracRiser
			stringTop2nd = strSlash + strTread
			fracTop2nd = fracTread
		else
			topTextString = strRiserNum + " " + gs_customText_rise + " " + strRiser + strSlash + strTread
		endif
	endif
	if iRiseRunText = 6 then
		b2lines = 1
		topTextString = strRiserNum + " " + gs_customText_rise

		if fracTread <> "" | fracRiser <> "" then
			hasParagraphBottom = 1
			stringBottom1st = strRiser
			fracBottom1st = fracRiser
			stringBottom2nd = strSlash + strTread
			fracBottom2nd = fracTread
		else
			bottomTextString = strRiser + strSlash + strTread
		endif
	endif
	if iRiseRunText = 99 then
		topTextString = gs_CustomText1
		if linear_unit <> "m" then
			b2lines = 1
			bottomTextString = gs_CustomText2
		endif
	endif

	! ToptextString
	widthToptextString = 0
	if hasParagraphTop then
		PARAGRAPH "paragraphTop" 1, 0, 0, 0, 1, 0
			pen gs_text_pen
			set style "rnrTextAboveLine"
			""+ stringTop1st
			pen gs_text_pen
			set style "rnrTextfrac"
			""+ fracTop1st
			pen gs_text_pen
			set style "rnrTextAboveLine"
			""+ stringTop2nd
			pen gs_text_pen
			set style "rnrTextfrac"
			""+ fracTop2nd
		ENDPARAGRAPH
		TEXTBLOCK "blockToptextString" 0, anchorPoz, 0, 1 ,1, 1,"paragraphTop"
		n = REQUEST ("TEXTBLOCK_INFO","blockToptextString",widthToptextString,height)
	endif

	! BottomtextString
	widthBottomtextString = 0
	if hasParagraphBottom then
		PARAGRAPH "paragraphBottom" 1, 0, 0, 0, 1, 0
			pen gs_text_pen
			set style "rnrTextUnderLine"
			""+ stringBottom1st
			pen gs_text_pen
			set style "rnrTextfrac"
			""+ fracBottom1st
			pen gs_text_pen
			set style "rnrTextUnderLine"
			""+ stringBottom2nd
			pen gs_text_pen
			set style "rnrTextfrac"
			""+ fracBottom2nd
		ENDPARAGRAPH
		TEXTBLOCK "blockBottomtextString" 0, anchorPoz2, 0, 1 ,1, 1,"paragraphBottom"
		n = REQUEST ("TEXTBLOCK_INFO","blockBottomtextString",widthBottomtextString,height)
	endif


! --- text length ---
	if hasParagraphTop then
		textLengthTop = widthToptextString / 1000 * GLOB_SCALE
	else
		textLengthTop = stw (topTextString) / 1000 * GLOB_SCALE
	endif
	if hasParagraphBottom then
		textLengthBottom = widthBottomtextString / 1000 * GLOB_SCALE
	else
		textLengthBottom = stw (bottomTextString) / 1000 * GLOB_SCALE
	endif

	textLengthMax = max(textLengthTop, textLengthBottom*b2lines)


pen gs_text_pen

! --- positioning ---
	nTrans = 0
	bMirror = 0
	dirSign = 1

	if iRiseRunTextPosition = 1 then
		rot2	90
		add2 0, -flightWidth/2
		nTrans = nTrans + 2
	else
		add2 -flightWidth, flightWidth
		nTrans = nTrans + 1
	endif

	totalRotate = totalRotate + DirRiseRunAngle

	! Text Rotation - Readable / Align with Symbol
	! ----------------------------------------------------------------------
	if typeTextRotation_RiseRun_m = 2 then								! Readable
		if (iRotateType = 1 and (((totalRotate > (gs_readable_angle - 90 + eps) & totalRotate < (gs_readable_angle + 180 - 90 + eps)) & not(SYMB_MIRRORED)) | \
			((totalRotate < (gs_readable_angle - 90 + eps) | totalRotate > (gs_readable_angle + 180 - 90 + eps)) & SYMB_MIRRORED))) | \
			(iRotateType = 2 and ((totalRotate > (gs_readable_angle + eps) & totalRotate < (gs_readable_angle + 180 + eps)))) then
			bMirror = 1
			dirSign = -1
		endif
	endif
	! ----------------------------------------------------------------------


! --- text 1 ---

	set style "rnrTextAboveLine"

	add2 DirRiseRunText_Y, DirRiseRunText_X
	rot2 DirRiseRunAngle + 180 * bMirror

	textOffsetTop = textLengthTop*(iRiseRunTextPosition = 1)*bMirror + textLengthMax/2 * dirSign * (iRiseRunTextPosition = 1)
	if hasParagraphTop then
		richtext2 -textOffsetTop, 0, "blockToptextString"
	else
		text2 -textOffsetTop, 0, topTextString
	endif

	del 2


! --- text 2 ---

	if b2lines then
		set style "rnrTextUnderLine"

		add2 DirRiseRunText_Y, DirRiseRunText_X
		rot2 DirRiseRunAngle + 180 * bMirror

		textOffsetBottom =  textLengthBottom*(iRiseRunTextPosition = 1)*bMirror + textLengthMax/2 * dirSign * (iRiseRunTextPosition = 1)
		if hasParagraphBottom then
			richtext2 - textOffsetBottom, 0, "blockBottomtextString"
		else
			text2 -textOffsetBottom, 0, bottomTextString
		endif

		del 2
	endif


! --- hotspots ---

	hotspot2 DirRiseRunText_Y,	 0,				 	RiseRunUNID, DirRiseRunText_X, 1+128	:RiseRunUNID=RiseRunUNID+1
	hotspot2 DirRiseRunText_Y,	-1, 				RiseRunUNID, DirRiseRunText_X, 3		:RiseRunUNID=RiseRunUNID+1
	hotspot2 DirRiseRunText_Y,	 DirRiseRunText_X,	RiseRunUNID, DirRiseRunText_X, 2		:RiseRunUNID=RiseRunUNID+1

	hotspot2 0,					DirRiseRunText_X,	RiseRunUNID, DirRiseRunText_Y, 1+128	:RiseRunUNID=RiseRunUNID+1
	hotspot2 -1,				DirRiseRunText_X,	RiseRunUNID, DirRiseRunText_Y, 3		:RiseRunUNID=RiseRunUNID+1
	hotspot2 DirRiseRunText_Y,	DirRiseRunText_X,	RiseRunUNID, DirRiseRunText_Y, 2		:RiseRunUNID=RiseRunUNID+1


	add2 DirRiseRunText_Y, DirRiseRunText_X
	textOffset = textLengthMax/2 * dirSign
	hotspot2 0,									0,									RiseRunUNID, DirRiseRunAngle, 6			:RiseRunUNID=RiseRunUNID+1
	hotspot2 textOffset,						0,									RiseRunUNID, DirRiseRunAngle, 4+128		:RiseRunUNID=RiseRunUNID+1
	hotspot2 textOffset*cos(DirRiseRunAngle),	textOffset*sin(DirRiseRunAngle),	RiseRunUNID, DirRiseRunAngle, 5 		:RiseRunUNID=RiseRunUNID+1

	del 1


! --- Del flightWidth transform ---

	if 	nTrans > 0 then del nTrans
]]>
</Script_2D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_1D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[



]]>
</Script_1D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_PR SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_PR>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_UI SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_UI>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_VL SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_VL>

<Comment SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Comment>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_FWM SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
end textLengthMax
]]>
</Script_FWM>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_BWM SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
end textLengthMax
]]>
</Script_BWM>

<ParamSection SectVersion="22" SectionFlags="0" SubIdent="0">
	<ParamSectHeader>
		<AutoHotspots>false</AutoHotspots>
		<StatBits>
			<STBit_FixSize/>
		</StatBits>
		<WDLeftFrame>0</WDLeftFrame>
		<WDRightFrame>0</WDRightFrame>
		<WDTopFrame>0</WDTopFrame>
		<WDBotFrame>0</WDBotFrame>
		<LayFlags>65535</LayFlags>
		<WDMirrorThickness>0</WDMirrorThickness>
		<WDWallInset>0</WDWallInset>
	</ParamSectHeader>
	<Parameters>
		<Length Name="A">
			<Description><![CDATA["Dimension 1"]]></Description>
			<Fix/>
			<Value>1</Value>
		</Length>
		<Length Name="B">
			<Description><![CDATA["Dimension 2"]]></Description>
			<Fix/>
			<Value>1</Value>
		</Length>
		<Length Name="ZZYZX">
			<Description><![CDATA["Height"]]></Description>
			<Fix/>
			<Value>1</Value>
		</Length>
		<Boolean Name="AC_show2DHotspotsIn3D">
			<Description><![CDATA["Show 2D Hotspots in 3D"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Length Name="ac_bottomlevel">
			<Description><![CDATA["Bottom Level"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Length>
		<Length Name="ac_toplevel">
			<Description><![CDATA["Top Level"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="flightWidth">
			<Description><![CDATA["Flight Width"]]></Description>
			<Value>1.2</Value>
		</Length>

		<!-- gs_tread: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_tread">
			<Description><![CDATA["Tread and Riser Sizes"]]></Description>
		</Title>
		<Integer Name="nRisers">
			<Description><![CDATA["No. of Risers"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>17</Value>
		</Integer>
		<Length Name="treadHeight">
			<Description><![CDATA["Real Tread Height"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.1765</Value>
		</Length>
		<Length Name="treadDepth">
			<Description><![CDATA["Tread Depth"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.275</Value>
		</Length>

		<!-- bShowRiseAndRunText: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Boolean Name="bShowRiseAndRunText">
			<Description><![CDATA["Rise and Run Text"]]></Description>
			<Flags>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Integer Name="iRiseRunText">
			<Description><![CDATA["Text"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<String Name="gs_CustomText1">
			<Description><![CDATA["Custom Text_1"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Специальный Текст_1"]]></Value>
		</String>
		<String Name="gs_CustomText2">
			<Description><![CDATA["Custom Text_2"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Специальный Текст_2"]]></Value>
		</String>
		<String Name="gs_customText_rise">
			<Description><![CDATA["Rise Text"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["П"]]></Value>
		</String>
		<RealNum Name="fontsize">
			<Description><![CDATA["Font Size (mm)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</RealNum>
		<RealNum Name="gs_text_size_pt">
			<Description><![CDATA["Font Size (point)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>2.8346</Value>
		</RealNum>
		<PenColor Name="gs_text_pen">
			<Description><![CDATA["Font Pen"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>86</Value>
		</PenColor>
		<Boolean Name="bUseACLinearUnit">
			<Description><![CDATA["Use Units from Project Preferences"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Length Name="DirRiseRunText_X">
			<Description><![CDATA["Rise and Run Text Position X"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="DirRiseRunText_Y">
			<Description><![CDATA["Rise and Run Text Position Y"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.8</Value>
		</Length>
		<Angle Name="DirRiseRunAngle">
			<Description><![CDATA["Rise and Run Text Rotation Angle"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Angle>
		<Integer Name="typeTextRotation_RiseRun_m">
			<Description><![CDATA["Text Orientation on Symbol"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>2</Value>
		</Integer>
		<Separator Name="Stair_Rise_sp0">
			<Description><![CDATA[""]]></Description>
		</Separator>
		<String Name="fontType">
			<Description><![CDATA["Font Type"]]></Description>
			<Value><![CDATA["Arial"]]></Value>
		</String>
		<Angle Name="totalRotate">
			<Description><![CDATA["Symb Rotation + View_Rotangle"]]></Description>
			<Value>0</Value>
		</Angle>
		<Integer Name="iRotateType">
			<Description><![CDATA["Rotate type (1, 2)"]]></Description>
			<Value>1</Value>
		</Integer>
		<Integer Name="iRiseRunTextPosition">
			<Description><![CDATA["Text Pozition (1, 2)"]]></Description>
			<Value>1</Value>
		</Integer>
		<Angle Name="gs_readable_angle">
			<Description><![CDATA[""]]></Description>
			<Value>90</Value>
		</Angle>
		<Integer Name="RiseRunUNID">
			<Description><![CDATA["RiseRunUNID"]]></Description>
			<Value>400</Value>
		</Integer>
	</Parameters>
</ParamSection>

<Copyright SectVersion="1" SectionFlags="0" SubIdent="0">
	<Author>GRAPHISOFT</Author>
	<License>
		<Type>CC BY-ND</Type>
		<Version>3.0</Version>
	</License>
</Copyright>

</Symbol>
