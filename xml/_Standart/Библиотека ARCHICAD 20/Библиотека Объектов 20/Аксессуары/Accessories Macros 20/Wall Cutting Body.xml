<?xml version="1.0" encoding="UTF-8"?>
<Symbol IsArchivable="false" IsPlaceable="false" MainGUID="8CBA413D-111D-4363-9309-3D03589EAA45" MigrationValue="Normal" Owner="1196638531" Signature="1196644685" Version="43">
<Ancestry SectVersion="1" SectionFlags="0" SubIdent="0" Template="false">
	<MainGUID>F938E33A-329D-4A36-BE3E-85E126820996</MainGUID>
	<MainGUID>103E8D2C-8230-42E1-9597-46F84CCE28C0</MainGUID>
	<MainGUID>784EAEA1-5041-4AA6-B6F4-EF263A891EE7</MainGUID>
	<MainGUID>21DE7666-EF71-4885-8222-629F88CB3F4A</MainGUID>
	<MainGUID>66F6D7C2-637D-4243-91FD-6DB3FC8F91BE</MainGUID>
</Ancestry>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_3D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
!!-----------------------!!!-----------------------!!!-----------------------!!
!! Create Cutting Bodies !!! Create Cutting Bodies !!! Create Cutting Bodies !!
!!-----------------------!!!-----------------------!!!-----------------------!!

epszilon=0.0001

if ac_refSide then
	dir=-1
else
	dir=1
endif

if ac_wall_radius<eps then	!! For the Curved Wall
	ratio=1
else
	ratio=(ac_wall_radius+oper_thk*dir)/ac_wall_radius
endif

material gs_mat

if gs_gdl_debug then
	print "cutting_thk=",cutting_thk
	print "ref_thickness=",ref_thickness
endif

! Arrays for the polygon offset
dim transfer[][]
dim polygon[][]
dim empty[1][1]
	empty[1][1] = 0

!------------!
! Bottom Cut !
!------------!

offset=bot_ext
transfer=ac_bot_poly
gosub 9501 !! Do the polygon offset

min_bot_y=0

group "lower cut"
	if cut_set[1]=1 then

		put (polygon[1][1]-over_cut_beg)*ratio, min_bot_y-1, 15
		put (polygon[1][1]-over_cut_beg)*ratio, polygon[1][2], 15
		for i=1 to vardim1(polygon)
			put polygon[i][1]*ratio, polygon[i][2], 15
		next i
		put (polygon[vardim1(polygon)][1]+over_cut_end)*ratio, polygon[vardim1(polygon)][2], 15
		put (polygon[vardim1(polygon)][1]+over_cut_end)*ratio, min_bot_y-1, 15
		put (polygon[1][1]-over_cut_beg)*ratio, min_bot_y-1, -1

		rotx 90
		addz oper_thk*dir
		if ac_wall_radius<eps then
			prism_	nsp/3, -cutting_thk*dir,
					get(nsp)
		else
			bprism_	gs_mat, gs_mat, gs_mat,
					nsp/3, -cutting_thk*dir, ac_wall_radius*ratio,
					get(nsp)
		endif
		del 2
	endif
endgroup


!---------!
! Top Cut !
!---------!

offset=-top_ext
transfer=ac_top_poly
gosub 9501 !! Do the polygon offset

min_top_y=0
max_top_y=ac_wall_height

group "upper cut"
	if cut_set[2]=1 then
		put (polygon[1][1]-over_cut_beg)*ratio, max_top_y+1, 15
		put (polygon[1][1]-over_cut_beg)*ratio, polygon[1][2], 15
		for i=1 to vardim1(polygon)
			put polygon[i][1]*ratio, polygon[i][2], 15
		next i
		put (polygon[top_num][1]+over_cut_end)*ratio, polygon[top_num][2], 15
		put (polygon[top_num][1]+over_cut_end)*ratio, max_top_y+1, 15
		put (polygon[1][1]-over_cut_beg)*ratio, max_top_y+1, -1

		rotx 90
		addz oper_thk*dir
		if ac_wall_radius<eps then
			prism_	nsp/3, -cutting_thk*dir,
					get(nsp)
		else
			bprism_	gs_mat, gs_mat, gs_mat,
					nsp/3, -cutting_thk*dir, ac_wall_radius*ratio,
					get(nsp)
		endif
		del 2
	endif
endgroup


!----------!
! End Cuts !
!----------!

group "end cuts"
	if cut_set[3]=1 then
		addz min_bot_y-1

		if ac_wall_radius<eps then
			prism_	7, (max_top_y-min_top_y)+2,	! begin cut
					0, 0, 15,
					(ref_thickness/tan(ac_angles[1][1]))*not(not(ac_angles[1][1]-90)), ref_thickness*dir, 15,
					(ref_thickness/tan(ac_angles[1][1]))*not(not(ac_angles[1][1]-90)), (ref_thickness+oper_thk)*dir, 15,
				   -over_cut_beg, (ref_thickness+oper_thk)*dir, 15,
				   -over_cut_beg, -oper_thk*dir, 15,
					0, -oper_thk*dir, 15,
					0, 0, -1

			addx ac_wall_length
			prism_	7, (max_top_y-min_top_y)+2, ! end cut
					0, 0, 15,
					ref_thickness/tan(ac_angles[vardim1(ac_angles)][2])*not(not(ac_angles[vardim1(ac_angles)][2]-90)), ref_thickness*dir, 15,
					ref_thickness/tan(ac_angles[vardim1(ac_angles)][2])*not(not(ac_angles[vardim1(ac_angles)][2]-90)), (ref_thickness+oper_thk)*dir, 15,
					over_cut_end, (ref_thickness+oper_thk)*dir, 15,
					over_cut_end, -oper_thk*dir, 15,
					0, -oper_thk*dir, 15,
					0, 0, -1
			del 1
		else
			prism_	7, (max_top_y-min_top_y)+2,	! begin cut
					0, 0, 15,
					sec_x_beg, sec_y_beg*dir, 15,
					sec_x_beg, (sec_y_beg+oper_thk)*dir, 15,
				   -over_cut_beg, (sec_y_beg+oper_thk)*dir, 15,
				   -over_cut_beg, -oper_thk*dir, 15,
					0, -oper_thk*dir, 15,
					0, 0, -1

			addy ac_wall_radius
			rotz 180*ac_wall_length/ac_wall_radius/pi
			addy -ac_wall_radius

			prism_	7, (max_top_y-min_top_y)+2, ! end cut
					0, 0, 15,
					sec_x_end, sec_y_end*dir, 15,
					sec_x_end, (sec_y_end+oper_thk)*dir, 15,
					over_cut_end, (sec_y_end+oper_thk)*dir, 15,
					over_cut_end, -oper_thk*dir, 15,
					0, -oper_thk*dir, 15,
					0, 0, -1

			del 3
		endif
		del 1
	endif
endgroup


!---------------------!
! Do the window holes !
!---------------------!

group "window/door"
	if cut_set[4]=1 then
		dim corner_cuts[][]
		if wd_num<>0 then       ! Do the holes
			epszilon=0.001
			corn_num=1

			rotx 90
			for i=1 to wd_num
				ins_point=0
				corner_end=0
				corner_beg=0
				for j=2 to 2*int((ac_wd_poly[i][1]+1/4")/1") step 2
					if ac_wd_poly[i][j]>=ac_wall_length-epszilon and ac_angles[sg_num][2]<90 then
						put ac_wd_poly[i][j]*ratio
						put ac_wd_poly[i][j+1]
						put 79

						if corner_end=0 then
							corner_cuts[1][1]=(ac_wd_poly[i][j]-epszilon)*ratio
							corner_cuts[1][2]=ac_wd_poly[i][j+1]
							corner_cuts[1][3]=(ac_wd_poly[i][j]+ref_thickness/tan(ac_angles[sg_num][2])+oper_thk)*ratio
							corner_cuts[1][4]=ac_wd_poly[i][j+1]
							corner_end=1
						else
							corner_cuts[1][5]=(ac_wd_poly[i][j]+ref_thickness/tan(ac_angles[sg_num][2])+oper_thk)*ratio
							corner_cuts[1][6]=ac_wd_poly[i][j+1]
							corner_cuts[1][7]=(ac_wd_poly[i][j]-epszilon)*ratio
							corner_cuts[1][8]=ac_wd_poly[i][j+1]
							corner_end=0
							corn_num=corn_num+1
						endif

						ins_point=1
					endif

					if ac_wd_poly[i][j]<=0+epszilon and ac_angles[1][1]>90 then
						put ac_wd_poly[i][j]*ratio
						put ac_wd_poly[i][j+1]
						put 79

						if corner_beg=0 then
							corner_cuts[1][1]=(ac_wd_poly[i][j]+epszilon)*ratio
							corner_cuts[1][2]=ac_wd_poly[i][j+1]
							corner_cuts[1][3]=(ac_wd_poly[i][j]+ref_thickness/tan(ac_angles[1][1])-oper_thk)*ratio
							corner_cuts[1][4]=ac_wd_poly[i][j+1]
							corner_beg=1
						else
							corner_cuts[1][5]=(ac_wd_poly[i][j]+ref_thickness/tan(ac_angles[1][1])-oper_thk)*ratio
							corner_cuts[1][6]=ac_wd_poly[i][j+1]
							corner_cuts[1][7]=(ac_wd_poly[i][j]+epszilon)*ratio
							corner_cuts[1][8]=ac_wd_poly[i][j+1]
							corner_beg=0
							corn_num=corn_num+1
						endif

						ins_point=1
					endif

					if ins_point=0 then
						put ac_wd_poly[i][j]*ratio
						put ac_wd_poly[i][j+1]
						put 79
					endif
					ins_point=0

				next j

				addz oper_thk*dir
				if ac_wall_radius<eps then
					! Cuts for the corner windows
					if corn_num-1<>0 then
						prism_  5, -cutting_thk*dir,  ! Just for testing
								corner_cuts[1][1], corner_cuts[1][2], 15,
								corner_cuts[1][3], corner_cuts[1][4], 15,
								corner_cuts[1][5], corner_cuts[1][6], 15,
								corner_cuts[1][7], corner_cuts[1][8], 15,
								corner_cuts[1][1], corner_cuts[1][2], -1
					endif

					! Cuts for the normal windows
					prism_  int((ac_wd_poly[i][1]+1/4")/1"), -cutting_thk*dir,
							get(nsp)
				else
					! Cuts for the corner windows
					if corn_num-1<>0 then
						bprism_ gs_mat, gs_mat, gs_mat,
								5, -cutting_thk*dir, ac_wall_radius, !!!!+oper_thk*dir
								corner_cuts[1][1], corner_cuts[1][2], 15,
								corner_cuts[1][3], corner_cuts[1][4], 15,
								corner_cuts[1][5], corner_cuts[1][6], 15,
								corner_cuts[1][7], corner_cuts[1][8], 15,
								corner_cuts[1][1], corner_cuts[1][2], -1
					endif
					put use(3)

					! Cuts for the normal windows

					bprism_ gs_mat, gs_mat, gs_mat,
							int((ac_wd_poly[i][1]+1/4")/1")+1, -cutting_thk*dir, ac_wall_radius*ratio,
							get(nsp)
				endif
				del 1
			next i
			del 1

			corn_num=corn_num-1
		endif
	endif
endgroup

! Do the conection holes

group "connecting walls"
	if cut_set[5]=1 then
		if sp_num<>0 then       ! Do the holes
			if ac_wall_radius<eps then
				for i=1 to sp_num
					tan_1=ref_thickness/tan(ac_angles[i+1][1])
					tan_2=-ref_thickness/tan(180-ac_angles[i][2])

					addz ac_side_poly[i][2]
					prism_  9, ac_side_poly[i][4]-ac_side_poly[i][2],
							ac_side_poly[i][1], 0, 15,
							ac_side_poly[i][1], -oper_thk*dir, 15,
							ac_side_poly[i][3], -oper_thk*dir, 15,
							ac_side_poly[i][3], 0, 15,
							ac_side_poly[i][3]+tan_1, ref_thickness*dir, 15,
							ac_side_poly[i][3]+tan_1, (ref_thickness+oper_thk)*dir, 15,
							ac_side_poly[i][1]+tan_2, (ref_thickness+oper_thk)*dir, 15,
							ac_side_poly[i][1]+tan_2, ref_thickness*dir, 15,
							ac_side_poly[i][1], 0, -1
					del 1
				next i
			else
				for i=1 to sp_num
					! -----------------------------------------
					! Calculate the oversize for the revolution
					! -----------------------------------------

					! Center point            (u,v)=(0,ac_wall_radius)
					! Radius                  r=ac_wall_radius-ref_thickness
					! Equation of the circle  (sec_x_beg-u)^2+(sec_y_beg-v)^2=r^2
					! Slope of the line       kappa=180-ac_angles[1][1]
					! Equation of the line    sec_y_beg=tan(kappa)*sec_x_beg
					! Equation with two unkn. (1+(tan(kappa))^2)*sec_x_beg^2-2*ac_wall_radius*tan(kappa)*sec_x_beg+2*ac_wall_radius*ref_thickness-ref_thickness^2

					if ac_angles[i][2]<=90 then
					!!!!print "ac_angles[",i,"][2]<90"

						line_y=con_cur_d-con_cur_w*tan(kappa)

						kappa=ac_angles[i][2]

						a_beg=(1+(tan(kappa))^2)
						b_beg=-2*(ac_wall_radius-y)*tan(kappa)
						c_beg=2*ac_wall_radius*ref_thickness-ref_thickness^2

						if b_beg^2-4*a_beg*c_beg>=0 then
							sec_x_beg=(-b_beg-sqr(b_beg^2-4*a_beg*c_beg))/(2*a_beg)
							sec_y_beg=sec_x_beg*tan(kappa)

							print sec_x_beg,sec_y_beg
						else
							sec_x_beg=ac_wall_radius*cos(kappa)*sin(kappa)
							sec_y_beg=ac_wall_radius-ac_wall_radius*cos(kappa)*cos(kappa)
						endif
					else
					!!!!print "ac_angles[",i,"][2]>90"

						kappa=180-ac_angles[i][2]

						a_beg=(1+(tan(kappa))^2)
						b_beg=-2*(ac_wall_radius-y)*tan(kappa)
						c_beg=2*ac_wall_radius*ref_thickness-ref_thickness^2

						if b_beg^2-4*a_beg*c_beg>=0 then
							sec_x_beg=-(-b_beg-sqr(b_beg^2-4*a_beg*c_beg))/(2*a_beg)
							sec_y_beg=-sec_x_beg*tan(kappa)
						else
							sec_x_beg=-ac_wall_radius*cos(kappa)*sin(kappa)
							sec_y_beg=ac_wall_radius-ac_wall_radius*cos(kappa)*cos(kappa)
						endif
					endif

					if ac_angles[i+1][1]>=90 then
						lambda=180-ac_angles[i+1][1]

						a_end=(1+(tan(lambda))^2)
						b_end=-2*ac_wall_radius*tan(lambda)
						c_end=2*ac_wall_radius*ref_thickness-ref_thickness^2

						if b_end^2-4*a_end*c_end>=0 then
							sec_x_end=-(-b_end-sqr(b_end^2-4*a_end*c_end))/(2*a_end)
							sec_y_end=-sec_x_end*tan(lambda)
						else
							sec_x_end=-ac_wall_radius*cos(lambda)*sin(lambda)
							sec_y_end=ac_wall_radius-ac_wall_radius*cos(lambda)*cos(lambda)
						endif
					else
						lambda=ac_angles[i+1][1]

						a_end=(1+(tan(lambda))^2)
						b_end=-2*ac_wall_radius*tan(lambda)
						c_end=2*ac_wall_radius*ref_thickness-ref_thickness^2

						if b_end^2-4*a_end*c_end>=0 then
							sec_x_end=(-b_end-sqr(b_end^2-4*a_end*c_end))/(2*a_end)
							sec_y_end=sec_x_end*tan(lambda)
						else
							sec_x_end=ac_wall_radius*cos(lambda)*sin(lambda)
							sec_y_end=ac_wall_radius-ac_wall_radius*cos(lambda)*cos(lambda)
						endif
					endif

					con_width=(ac_side_poly[i][3]-ac_side_poly[i][1])
					szigma=con_width/2*180/(ac_wall_radius*Pi)
					con_cur_w=ac_wall_radius*sin(szigma)	! Conection Width/2 Stratight Length from the Curved Length
					con_cur_d=ac_wall_radius*(1-cos(szigma)) ! Conection Width/2 Stratight Length from the Curved Length

					beg_x=sec_x_beg*cos(-szigma)-sec_y_beg*sin(-szigma)
					beg_y=sec_x_beg*sin(-szigma)+sec_y_beg*cos(-szigma)

					end_x=sec_x_end*cos(szigma)-sec_y_end*sin(szigma)
					end_y=sec_x_end*sin(szigma)+sec_y_end*cos(szigma)

	!!!!				print "ref_thickness",ref_thickness
	!!!!				print "sec_x_beg=",sec_x_beg,"sec_y_beg=",sec_y_beg,"sec_x_end=",sec_x_end,"sec_y_end=",sec_y_end
	!!!!				print "con_cur_w=",con_cur_w," con_cur_d=",con_cur_d

					addy ac_wall_radius
					rotz 180*(ac_side_poly[i][3]+ac_side_poly[i][1])/2/ac_wall_radius/pi
					add 0,-ac_wall_radius,ac_side_poly[i][2]
					prism_  9, ac_side_poly[i][4]-ac_side_poly[i][2],
						   -con_cur_w, con_cur_d*dir, 15,
						   -con_cur_w, -oper_thk*dir, 15,
							con_cur_w, -oper_thk*dir, 15,
							con_cur_w, con_cur_d*dir, 15,
							con_cur_w+end_x, (con_cur_d+end_y)*dir, 15,
							con_cur_w+end_x, (con_cur_d+end_y+oper_thk)*dir, 15,
						   -con_cur_w+beg_x, (con_cur_d+beg_y+oper_thk)*dir, 15,
						   -con_cur_w+beg_x, (con_cur_d+beg_y)*dir, 15,
						   -con_cur_w, con_cur_d*dir, -1
					del 3
				next i
			endif
		endif
	endif
endgroup

!!!!if gs_gdl_debug then
!!!!	model wire
!!!!	placegroup "connecting walls"
!!!!	model solid
!!!!endif

!!-----------------------!!!-----------------------!!!-----------------------!!
!! End Of Cutting Bodies !!! End Of Cutting Bodies !!! End Of Cutting Bodies !!
!!-----------------------!!!-----------------------!!!-----------------------!!

!!!!placegroup "lower cut"
!!!!placegroup "upper cut"
!!!!placegroup "end cuts"
!!!!placegroup "window/door"

cut_1=addgroup("lower cut","upper cut")
cut_2=addgroup(cut_1,"end cuts")
cut_3=addgroup(cut_2,"window/door")
cutting_body=addgroup(cut_3,"connecting walls")

placegroup cutting_body

killgroup "lower cut"
killgroup "upper cut"
killgroup "end cuts"
killgroup "window/door"
killgroup "connecting walls"

killgroup cut_1
killgroup cut_2
killgroup cut_3
killgroup cutting_body

END

!!----------------!!!----------------!!!----------------!!!----------------!!
!! Polygon Offset !!! Polygon Offset !!! Polygon Offset !!! Polygon Offset !!
!!----------------!!!----------------!!!----------------!!!----------------!!
9501:

dim data[][]

polygon=empty	!! Empty the Polygon Array
data=empty		!! Empty the Data Array

dir_x=-1	!! Mindig ala kerul az offsetelt az eredetinek
dir_y=1

!-------------------------
! Start the polygon offset
!-------------------------

If abs(offset)<epszilon Then
	polygon=transfer
	return
EndIf

i=1
data[i][1]=0
data[i][2]=0
data[i][3]=0       ! Direction vector
data[i][4]=1       ! Direction vector

for i=2 to vardim1(transfer)           ! Precalculate the data
	data[i][3]=transfer[i][1]-transfer[i-1][1]       ! Direction vector
	data[i][4]=transfer[i][2]-transfer[i-1][2]       ! Direction vector

	length=sqr(data[i][3]^2+data[i][4]^2)            ! Make the unit vector
	vect_x=offset*dir_x*data[i][4]/length
	vect_y=offset*dir_y*data[i][3]/length

	data[i][1]=transfer[i-1][1]+vect_x
	data[i][2]=transfer[i-1][2]+vect_y
next i

data[i][1]=transfer[vardim1(transfer)][1]
data[i][2]=0
data[i][3]=0       ! Direction vector
data[i][4]=1       ! Direction vector

g=1
for i=1 to vardim1(transfer)
	x0=data[i][1]
	y0=data[i][2]
	v_1=data[i][3]
	v_2=data[i][4]

	a0=data[i+1][1]
	b0=data[i+1][2]
	u_1=data[i+1][3]
	u_2=data[i+1][4]

	if abs(v_1*u_2-u_1*v_2)>epszilon then   ! If the points are situated in a line
		y=((v_2*(u_2*a0-u_1*b0))-(u_2*(v_2*x0-v_1*y0)))/(v_1*u_2-u_1*v_2)
		if abs(u_2)>eps then
			x=(u_2*a0-u_1*b0+u_1*y)/u_2
		else
			x=(v_2*x0-v_1*y0+v_1*y)/v_2
		endif

		polygon[g][1]=x
		polygon[g][2]=y

		g=g+1
	endif
next i

return



]]>
</Script_3D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_2D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_2D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_1D SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[
epszilon=0.0001
eps=0.00001

! --------------------------------
! Scan the arrays for the last row
! --------------------------------

bot_num=vardim1(ac_bot_poly)
top_num=vardim1(ac_top_poly)
sg_num=vardim1(ac_angles)
if vardim2(ac_side_poly)<=2 then
	sp_num=0
else
	sp_num=vardim1(ac_side_poly)
endif
if vardim2(ac_wd_poly)<=2 then
	wd_num=0
else
	wd_num=vardim1(ac_wd_poly)
endif

if gs_gdl_debug then
	print "- GDL Debug --- Cutting Body --- GDL Debug -"
	print "ref_thickness=",ref_thickness
	print "gs_mat=",gs_mat
	print "cut_set=",cut_set
	print "ac_accessory_debug=",ac_accessory_debug
	print "gs_gdl_debug=",gs_gdl_debug
	print "ac_wall_height=",ac_wall_height
	print "ac_wall_radius=",ac_wall_radius
	print "ac_wall_length=",ac_wall_length
	print "ac_wall_resol=",ac_wall_resol
	print "ac_refside=",ac_refside
	print "ac_curved_wall=",ac_curved_wall
	print "ac_cont_pen=",ac_cont_pen
	print "ac_angles"
	for i=1 to vardim1(ac_angles)
		print ac_angles[i]
	next i
	print "ac_side_poly"
	for i=1 to vardim1(ac_side_poly)
		print ac_side_poly[i]
	next i
	print "ac_top_poly"
	for i=1 to top_num
		print ac_top_poly[i]
	next i

	print "ac_bot_poly"
	for i=1 to bot_num
		print ac_bot_poly[i]
	next i

	print "ac_wd_poly"
	for i=1 to wd_num
		print ac_wd_poly[i]
	next i
endif

! -----------------------------------------
! Calculate the oversize for the revolution
! -----------------------------------------

! Center point            (u,v)=(0,ac_wall_radius)
! Radius                  r=ac_wall_radius-ref_thickness
! Equation of the circle  (sec_x_beg-u)^2+(sec_y_beg-v)^2=r^2
! Slope of the line       kappa=ac_angles[1][1]
! Equation of the line    sec_y_beg=tan(kappa)*sec_x_beg
! Equation with two unkn. (1+(tan(kappa))^2)*sec_x_beg^2-2*ac_wall_radius*tan(kappa)*sec_x_beg+2*ac_wall_radius*ref_thickness-ref_thickness^2

oper_thk=ref_thickness
cutting_thk=ref_thickness+2*oper_thk
if abs(ac_wall_radius)<EPS then	!! Staight Wall
	if ac_angles[1][1]>90 then
		over_beg=ref_thickness/tan(180-ac_angles[1][1])+oper_thk/2
	else
		over_beg=oper_thk/2
	endif
	if ac_angles[vardim1(ac_angles)][2]<90 then
		over_end=ref_thickness/tan(ac_angles[vardim1(ac_angles)][2])+oper_thk/2
	else
		over_end=oper_thk/2
	endif

	over_cut_end=over_end+oper_thk/2
	over_cut_beg=over_beg+oper_thk/2
else						!! Curved Wall
	if ac_angles[1][1]<=90 then
		kappa=ac_angles[1][1]

		a_beg=(1+(tan(kappa))^2)
		b_beg=-2*ac_wall_radius*tan(kappa)
		c_beg=2*ac_wall_radius*ref_thickness-ref_thickness^2

		if b_beg^2-4*a_beg*c_beg>=0 then
			sec_x_beg=(-b_beg-sqr(b_beg^2-4*a_beg*c_beg))/(2*a_beg)
			sec_y_beg=sec_x_beg*tan(kappa)
		else
			sec_x_beg=ac_wall_radius*cos(kappa)*sin(kappa)
			sec_y_beg=ac_wall_radius-ac_wall_radius*cos(kappa)*cos(kappa)
		endif

		overang_1=0
	else
		kappa=180-ac_angles[1][1]

		a_beg=(1+(tan(kappa))^2)
		b_beg=-2*ac_wall_radius*tan(kappa)
		c_beg=2*ac_wall_radius*ref_thickness-ref_thickness^2

		if b_beg^2-4*a_beg*c_beg>=0 then
			sec_x_beg=-(-b_beg-sqr(b_beg^2-4*a_beg*c_beg))/(2*a_beg)
			sec_y_beg=-sec_x_beg*tan(kappa)
			overang_1=asn(-sec_x_beg/(ac_wall_radius-ref_thickness))  ! Iaccuray
		else
			sec_x_beg=-ac_wall_radius*cos(kappa)*sin(kappa)
			sec_y_beg=ac_wall_radius-ac_wall_radius*cos(kappa)*cos(kappa)
			overang_1=kappa
		endif
	endif

	if ac_angles[sg_num][2]>=90 then
		lambda=180-ac_angles[sg_num][2]

		a_end=(1+(tan(lambda))^2)
		b_end=-2*ac_wall_radius*tan(lambda)
		c_end=2*ac_wall_radius*ref_thickness-ref_thickness^2

		if b_end^2-4*a_end*c_end>=0 then
			sec_x_end=-(-b_end-sqr(b_end^2-4*a_end*c_end))/(2*a_end)
			sec_y_end=-sec_x_end*tan(lambda)
		else
			sec_x_end=-ac_wall_radius*cos(lambda)*sin(lambda)
			sec_y_end=ac_wall_radius-ac_wall_radius*cos(lambda)*cos(lambda)
		endif

		overang_2=0
	else
		lambda=ac_angles[sg_num][2]

		a_end=(1+(tan(lambda))^2)
		b_end=-2*ac_wall_radius*tan(lambda)
		c_end=2*ac_wall_radius*ref_thickness-ref_thickness^2

		if b_end^2-4*a_end*c_end>=0 then
			sec_x_end=(-b_end-sqr(b_end^2-4*a_end*c_end))/(2*a_end)
			sec_y_end=sec_x_end*tan(lambda)
			overang_2=asn(sec_x_end/(ac_wall_radius-ref_thickness))
		else
			sec_x_end=ac_wall_radius*cos(lambda)*sin(lambda)
			sec_y_end=ac_wall_radius-ac_wall_radius*cos(lambda)*cos(lambda)
			overang_2=lambda
		endif
	endif

	over_cut_beg=sin(overang_1)*ac_wall_radius+oper_thk/2
	over_cut_end=sin(overang_2)*ac_wall_radius+oper_thk/2
endif

]]>
</Script_1D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_PR SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_PR>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_UI SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_UI>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_VL SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Script_VL>

<Comment SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Comment>

<ParamSection SectVersion="22" SectionFlags="0" SubIdent="0">
	<ParamSectHeader>
		<AutoHotspots>false</AutoHotspots>
		<StatBits>
			<STBit_FixSize/>
		</StatBits>
		<WDLeftFrame>0</WDLeftFrame>
		<WDRightFrame>0</WDRightFrame>
		<WDTopFrame>0</WDTopFrame>
		<WDBotFrame>0</WDBotFrame>
		<LayFlags>65535</LayFlags>
		<WDMirrorThickness>0</WDMirrorThickness>
		<WDWallInset>0</WDWallInset>
	</ParamSectHeader>
	<Parameters>
		<Length Name="A">
			<Description><![CDATA[""]]></Description>
			<Fix/>
			<Value>1</Value>
		</Length>
		<Length Name="B">
			<Description><![CDATA[""]]></Description>
			<Fix/>
			<Value>1</Value>
		</Length>
		<Length Name="ZZYZX">
			<Description><![CDATA[""]]></Description>
			<Fix/>
			<Value>1</Value>
		</Length>
		<Boolean Name="AC_show2DHotspotsIn3D">
			<Description><![CDATA["Show 2D Hotspots in 3D"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Length Name="ac_bottomlevel">
			<Description><![CDATA["Bottom Level"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Length>
		<Length Name="ac_toplevel">
			<Description><![CDATA["Top Level"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<String Name="gs_detlevel_2D">
			<Description><![CDATA["2D Detail Level"]]></Description>
			<Fix/>
			<Value><![CDATA["Детальный"]]></Value>
		</String>
		<String Name="gs_detlevel_3D">
			<Description><![CDATA["3D Detail Level"]]></Description>
			<Fix/>
			<Value><![CDATA["Детальный"]]></Value>
		</String>

		<!-- gs_2D_representation: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_2D_representation">
			<Description><![CDATA["2D Representation"]]></Description>
			<Fix/>
		</Title>
		<PenColor Name="gs_cont_pen">
			<Description><![CDATA["Contour Pen"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>2</Value>
		</PenColor>
		<FillPattern Name="gs_fill_type">
			<Description><![CDATA["Fill Type"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>65</Value>
		</FillPattern>
		<PenColor Name="gs_fill_pen">
			<Description><![CDATA["Fill Pen"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>19</Value>
		</PenColor>
		<PenColor Name="gs_back_pen">
			<Description><![CDATA["Fill Background Pen"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>19</Value>
		</PenColor>
		<Length Name="ref_thickness">
			<Description><![CDATA["Reference Thickness"]]></Description>
			<Value>0.35</Value>
		</Length>
		<Material Name="gs_mat">
			<Description><![CDATA["Body Surface"]]></Description>
			<Value>66</Value>
		</Material>
		<Boolean Name="cut_set">
			<Description><![CDATA["Cutting Settings"]]></Description>
			<ArrayValues FirstDimension="5" SecondDimension="0">
				<AVal Row="1">1</AVal>
				<AVal Row="2">1</AVal>
				<AVal Row="3">1</AVal>
				<AVal Row="4">1</AVal>
				<AVal Row="5">1</AVal>
			</ArrayValues>
		</Boolean>
		<Length Name="top_ext">
			<Description><![CDATA["Upper Extension"]]></Description>
			<Value>0</Value>
		</Length>
		<Length Name="bot_ext">
			<Description><![CDATA["Lower Extension"]]></Description>
			<Value>0.15</Value>
		</Length>

		<!-- gs_wall_addon: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_wall_addon">
			<Description><![CDATA["Accessories Add-On Parameters"]]></Description>
		</Title>
		<Boolean Name="ac_accessory_debug">
			<Description><![CDATA["Accessory Debug Function"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Length Name="ac_wall_height">
			<Description><![CDATA["Wall Height"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>2.7</Value>
		</Length>
		<Length Name="ac_wall_radius">
			<Description><![CDATA["Wall Radius"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="ac_wall_length">
			<Description><![CDATA["Wall Length"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>4.5</Value>
		</Length>
		<Integer Name="ac_wall_resol">
			<Description><![CDATA["Wall Resolution"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>72</Value>
		</Integer>
		<Boolean Name="ac_refside">
			<Description><![CDATA["Build on the Right Side"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Angle Name="ac_angles">
			<Description><![CDATA["Angles of Opening"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<ArrayValues FirstDimension="1" SecondDimension="2">
				<AVal Column="1" Row="1">90</AVal>
				<AVal Column="2" Row="1">90</AVal>
			</ArrayValues>
		</Angle>
		<Length Name="ac_side_poly">
			<Description><![CDATA["Side Polygon"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<ArrayValues FirstDimension="1" SecondDimension="2">
				<AVal Column="1" Row="1">0</AVal>
				<AVal Column="2" Row="1">0</AVal>
			</ArrayValues>
		</Length>
		<Length Name="ac_top_poly">
			<Description><![CDATA["Top Polygon of Wall"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<ArrayValues FirstDimension="3" SecondDimension="2">
				<AVal Column="1" Row="1">0</AVal>
				<AVal Column="2" Row="1">2.7</AVal>
				<AVal Column="1" Row="2">3</AVal>
				<AVal Column="2" Row="2">2.7</AVal>
				<AVal Column="1" Row="3">4.5</AVal>
				<AVal Column="2" Row="3">1.7</AVal>
			</ArrayValues>
		</Length>
		<Length Name="ac_bot_poly">
			<Description><![CDATA["Bottom Polygon of Wall"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<ArrayValues FirstDimension="2" SecondDimension="2">
				<AVal Column="1" Row="1">0</AVal>
				<AVal Column="2" Row="1">0</AVal>
				<AVal Column="1" Row="2">4.5</AVal>
				<AVal Column="2" Row="2">0</AVal>
			</ArrayValues>
		</Length>
		<Length Name="ac_wd_poly">
			<Description><![CDATA["Window - Door Polygon"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<ArrayValues FirstDimension="2" SecondDimension="9">
				<AVal Column="1" Row="1">0.1016</AVal>
				<AVal Column="2" Row="1">1</AVal>
				<AVal Column="3" Row="1">0.9</AVal>
				<AVal Column="4" Row="1">1</AVal>
				<AVal Column="5" Row="1">2.1</AVal>
				<AVal Column="6" Row="1">2</AVal>
				<AVal Column="7" Row="1">2.1</AVal>
				<AVal Column="8" Row="1">2</AVal>
				<AVal Column="9" Row="1">0.9</AVal>
				<AVal Column="1" Row="2">0.1016</AVal>
				<AVal Column="2" Row="2">2.5</AVal>
				<AVal Column="3" Row="2">0</AVal>
				<AVal Column="4" Row="2">2.5</AVal>
				<AVal Column="5" Row="2">2.1</AVal>
				<AVal Column="6" Row="2">3.5</AVal>
				<AVal Column="7" Row="2">2.1</AVal>
				<AVal Column="8" Row="2">3.5</AVal>
				<AVal Column="9" Row="2">0</AVal>
			</ArrayValues>
		</Length>
		<Boolean Name="ac_curved_wall">
			<Description><![CDATA["Curved Wall ( Off - Straight )"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Material Name="ac_left_mat">
			<Description><![CDATA["Left Side Surface"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Material>
		<Material Name="ac_right_mat">
			<Description><![CDATA["Right Side Surface"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Material>
		<Material Name="ac_edge_mat">
			<Description><![CDATA["Edge Surface"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Material>
		<PenColor Name="ac_cont_pen">
			<Description><![CDATA["Contour Pen"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</PenColor>
		<PenColor Name="ac_back_pen">
			<Description><![CDATA["Background Pen"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</PenColor>
		<PenColor Name="ac_fill_pen">
			<Description><![CDATA["Fill Pen"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</PenColor>
		<FillPattern Name="ac_fill_type">
			<Description><![CDATA["Fill Type"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</FillPattern>
		<LineType Name="ac_line_type">
			<Description><![CDATA["Line Type"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</LineType>
		<Boolean Name="gs_gdl_debug">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>

		<!-- gs_list: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_list">
			<Description><![CDATA["Parameters for Listing"]]></Description>
			<Fix/>
		</Title>
		<RealNum Name="gs_list_cost">
			<Description><![CDATA["Cost"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<String Name="gs_list_manufacturer">
			<Description><![CDATA["Manufacturer"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_note">
			<Description><![CDATA["Note/Remarks"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_location">
			<Description><![CDATA["Location"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_accessories">
			<Description><![CDATA["Accessories"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="FM_Type">
			<Description><![CDATA["Group Type"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["Другой"]]></Value>
		</String>
		<Integer Name="iFMType">
			<Description><![CDATA["Group Type"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>25</Value>
		</Integer>
		<String Name="FM_InventoryNumber">
			<Description><![CDATA["Inventory Number"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="FM_SerialNumber">
			<Description><![CDATA["Serial Number"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="FM_ProductionYear">
			<Description><![CDATA["Production Year"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<RealNum Name="FM_ObjectWeight">
			<Description><![CDATA["Object Weight"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</RealNum>
		<String Name="FM_ObjectWeightUnit">
			<Description><![CDATA["Object Weight Unit"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA["кг"]]></Value>
		</String>
		<String Name="gs_list_custom1">
			<Description><![CDATA["User Defined 1"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_custom2">
			<Description><![CDATA["User Defined 2"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_custom3">
			<Description><![CDATA["User Defined 3"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_custom4">
			<Description><![CDATA["User Defined 4"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<String Name="gs_list_custom5">
			<Description><![CDATA["User Defined 5"]]></Description>
			<Fix/>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
	</Parameters>
</ParamSection>

<Picture MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="0" length_in_bytes="2335" platform="Win">
	<![CDATA[
	696D6167652F706E670089504E470D0A1A0A0000000D494844520000007F0000
	007F0803000000F163ED2100000066504C5445FFFFFF94947B63635284846B94
	8C7373735A8C8C735A5A4AD6D6BDF7F7EF7B7363635A4AD6CEB5CECEC6E7E7CE
	736B5AD6CEADA5A584BDBD9CEFEFEFA59C84C6BD9CB5AD94C6BDAD9C9C84E7E7
	DEBDB5A5D6CEC6CECEA5CECEB5DEDED6ADAD94C6C69CD6D6C6EF1AE508000008
	6A49444154785EECD1690AC3300C84D15E61468BB76CBDFF254BA085D6F96D05
	8ADF053EA179FCA1699A2611B9350F55D456EE3A82FA51D72DFE883DEB373C83
	F3FA0328A1DBF779670BCC3774793AE3FE2FD43E0F7AD8FF9BE66EFAE444D0FF
	65D50E2C91B090BE54CD5D9D8934903E7EFF8DDA034F6E2007F7A5ED9A2FF5C3
	485A02893274F55D2F9096C38C2703C7ED5F56E895DBB2D477DF40FA90BEBCDA
	35A3E5D4751D0C9F406943CB025B4436B8A298F77FC9E348022724D0B1D9FB62
	CF2C35840B3AF3F9D72F29C9389770B69D9D04440A440488FF9AFFFB9F13D8F9
	00F23D3ED0553FA0FB27FDDF1F4FA1E71C66E1891E0D52C8F977E5FEEFE7B0FB
	9FEF53CA77631F86238A26E1A3A7817E5FDEFFDF0238070D50C0C13E0E4F7DB0
	7A1343C21354EB0F19A0DCE7E1803682373DDE538F57FD88E5FD6F0B0280E8C4
	7F1C098FD170FD41EE7FB729E217A03702573CAB8F9A00E5A3437B28F2FFE757
	B203004357F4587F4C07D73F44F51F5C19FFFB9964C004A148348B2734064DEE
	7F0EEACAF874B6CE42974ED63907603D000B3684748BD36956FF6D01A4FA3D91
	ED8AF827771D5C1E116320A0E87B69D11BF4748B793CA28903FD94A230FF2770
	20813D9F88EDE405B038A5CF1910F95FE8EABFA4AB34FFADF52EF341F1D1ABB8
	AC7E4057781B3DA12E3772AE2AF46FD0F9CCC770D5EFA337FD61E25C0288DA84
	970E249D4054AC5FFD1FE9D7051834311D3161A6FA23C3057F35EC16E7423E3A
	CC7CCCF6736D6302A5E35E7F8FD704780A4AD7E8BA57FC572D41F05174B677C9
	EFC56F350191CE40C370AFE90FA482B09FAD2CF3E1024C34D01D7438539DFFC4
	F667FFB5983C0F801ECF9F095EE53796237D41ADFF0E5D18D6BF3AE0E3B500B7
	5285930540C3740918FA5F9F7FD0FC339EBB8F95323EF34D8C76B91CD12154EB
	1FD61F6AFE039756BF082DB576308243B35A2D6D0EBEFED7FA7F1AFB1F04CFB3
	5DE56FFBD375029876BDF858ECB27600997F57FDC696EA1F0D40B55F1780AC3F
	6EC580F6C877568B3E56E23D464F61ACDFD5E8573E0089FDA078A5476CDE174B
	15B0E0D8ADAC8D89AE8E61B57EEB51F93A7F640926B201884DD3ACBE3E16ABF7
	C3889F3C68FB0140D23159BF2DADFF610180C82700FBB65CEEBEFA58AC964D63
	C1F9CCE76878852FE7FFFDF3F373F9FEFEF6F6F6F979D9EFF78B0F899EBCDBDD
	0A1D1D4DF8327F457FF5FC836EB9B846EFDCC7C762F1F1B9787F93B976C3BB70
	CF3703FDB1BEFFDB08AE79FFECF93F3D7FB14CF93E3429BA21DE9D26FA79018C
	7FA5FFA3210E38373D7FC1688D65631BB4D8E3CF93FCB7D1EBD3DF2BF50F31B6
	D7BB9C63CF6F06B15BF21508DDACFE185FAF3F4226B437FE72287FD7F08FB6E7
	87A7F90FB5F9B789C0C78CFEE562A9F3A79BF51F6FCF1FD5FDBF8989C00B98E1
	AF764DC2AB7E3FF11F6FCFBF01A17AFEC6DB352EF6FCD528FF4BFE0D2DBAD9FE
	8F46E72F406DFF63622B7E9A7FD11F2D4EFCFFDA49FE453E61ACED7FCB7459C1
	44FF97FA6F71C6FF9617A0F33F56DEFF106E9FE69F7FB0385BFFDAFF14E865FD
	7C9AF21384FDEFE6F4B3FD72BF52EFBF51FF59E79CFF71ABFEFBD9FC7B0A597F
	75FDABFEF5D47F494EAF9FE6FB1F5ED6CFF2E55CE0BFF67F14FD50AD1F72FDC7
	F5FA81FF76D6FF68B4FD03F32B9FFF6FF4EDA4FE56ECFFE3FE8F6858FD0BFE93
	CEBF19FF75FE3FF19FC7BFE8A76AFF05CE31EBFFF661FFEBE54F3250AB1F84CC
	AB98E14FFD5F1FEEEB6F14B662FE6F1FCD9FAF3CFFCF943704DE6ED71F4F6085
	5B5FFF0A9FEF3FFE0DE5FE33C79F4FCD7F9B76BF855B7FFDBB367F7C3EFFC71B
	05B06B5A7349051B945F3BFF41E5CFF7BFEAEF50F139F69BDEADCCAFBCFE4554
	FA7636FFEABFE2A7A1FC7AFF37AC5F0B60CB7AC6F35F12A0F8E77C706053D4F8
	2F18C9E8FE4FE8B27EC5FFC207B0B23BD79DEDB1AAFEF92BBB7BF132FFA52E1E
	E32FF690D087BC6D03EEBB7CFEA903E395EF5B5836FCCB43F9FB70B76354BCFF
	43C3FABFCFDC7ADD6EB7EBED13F1F78160F1BB78FEA90366EADCBA8F07F49FF3
	1DBC838407A8EFFF92CCFDB9A75BE7C12158F8A9F29FF517BC7C31B75D24FABF
	4BFDD73059FF6FF4C394EE7BBE7360A1F2F9C7FCAA5FA703D8897840D9FF7400
	58D8FFF666BFC1E3EFCACF76860E5EF8095E5AFF884C67FC2FFA8F273B178102
	45E50396D6FFE6AADF3CD3BF3F5E820A1FC73912E5FD5FA9FFA2FCFBABFA47FA
	D76914DBF93800913EFFA87E0457387F375C7F82C7E3BDE88B3F3FDB91F69104
	1F94EF8ADFBFF2A8DEA3E8DFAF8F89FB87827D1A40267A42E3F50158F9DE96D6
	FFC6B67901D9E0E6297CB8FD0FB2FF5BFBFE8FC19ECEBB0D687F8F0E20B60C8F
	BC4369C4FF70EB3FB47029D5CF9B6DACF969387DC8E3736CF9F10B27F50FA7FF
	15F1B137DE76BFB001C918C1D300EF89EEEADF72F68BF8169F28070748D4A323
	19CA11A3610B288CF473F317F1BBD9C4830500A28C1C4AD73F34319A40C3FE63
	7CA17E0E8B1A51EC05D90147CF7B1CA3903DA1364AD9309D08A0E7FBF2978F4F
	681D8341F9810DF5E4A52B4C2265D9728AADE23DB2FFDAFF5CF8C57CC7CEE1F8
	0D8890981E652AE80284CB277E5E53FD9A7F403C958AD7FE1B6C80A97E962BFA
	D399914A6F199CAF58593FA9F3E5FE5B8F43BE181AD87F46B4E23753F3C1F587
	C603EBA7DCF4C5FE8FF50309DE9B883DDD28377FC55BFE6FDB1F9CFA4A7E87E8
	EEF5F78692D18BD2909CD7A2F93789AE6557AF1F333F427E0121EF016772C64B
	714EE8AFEBD7891654FEC87945EBC73FB963ADF73F901C39FB0F3EA615DB5FD7
	EFEFF5077DBD311D260ECDCF5FDBE35A00AFEB7763FF55BEE073CAD9FCEB39B3
	5FE53BE7F1AEFFD4022F3376205CD8DBFC4CFA7A7874C3FA03A0A0F8ECFF2001
	CCAEC5CF5F7FD9FEA9FF81A4C35438EB2E8017F83FD12F879197E018CDD8027A
	51FDBB91FFD97E633697E3FA782C40D75D7F06FAE974BAA4E3723CEE85266766
	FF37E36FFC8DBFF137FE0FCEA8357DDD77E6B60000000049454E44AE426082
	]]>
</Picture>

<CalledMacros SectVersion="2" SectionFlags="0" SubIdent="0">
</CalledMacros>

<Copyright SectVersion="1" SectionFlags="0" SubIdent="0">
	<Author>GRAPHISOFT</Author>
	<License>
		<Type>CC BY-ND</Type>
		<Version>3.0</Version>
	</License>
</Copyright>

</Symbol>
